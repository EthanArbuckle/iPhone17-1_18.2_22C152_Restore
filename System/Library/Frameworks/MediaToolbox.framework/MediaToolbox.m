uint64_t FigMediaServerStart()
{
  int v0;
  int v1;
  _DWORD *v2;
  void *v3;
  void (*v4)(uint64_t);
  void *v5;
  CFDictionaryRef ModelSpecificPropertyList;
  void *v7;
  void (*v8)(void);
  void *v9;
  void (*v10)(void);
  void *v11;
  void (*v12)(void);
  void *v13;
  void (*v14)(void);
  void *v15;
  void (*v16)(void);
  int out_token;

  FigWatchdogStart();
  v0 = FigWatchdogBeginVitalWork();
  if (v0)
  {
    v1 = v0;
    if (os_log_type_enabled(MEMORY[0x1E4F14500], OS_LOG_TYPE_ERROR)) {
      FigMediaServerStart_cold_1(v1);
    }
  }
  GSInitialize();
  FigServer_InitializeWithEnvironment();
  fpServer_CreateRPCTimeoutThread();
  getpid();
  proc_disable_cpumon();
  FigKTraceInit();
  v2 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  signal(30, (void (__cdecl *)(int))1);
  signal(31, (void (__cdecl *)(int))1);
  FigNote_OneTimeInitializationForMediaServerd();
  FigSysdiagnoseBlock_OneTimeInitializationForMediaserverd();
  FigSandboxRegistrationServerStart();
  feServer_LoadCelestial();
  FigShared_OneTimeInitialization();
  out_token = 0;
  notify_register_dispatch("com.apple.language.changed", &out_token, MEMORY[0x1E4F14428], &__block_literal_global_12);
  FigPlayerCMSessionOneTimeInitialization();
  feServer_startCTTelephonyCenterOnADispatchQueue_sAnythingButARunLoop = (uint64_t)dispatch_queue_create("com.apple.mediaserverd.coretelephony.notarunloop", 0);
  v3 = dlopen("/System/Library/Frameworks/CoreTelephony.framework/CoreTelephony", 4);
  if (v3)
  {
    v4 = (void (*)(uint64_t))dlsym(v3, "CTTelephonyCenterSetDefaultDispatchQueue");
    if (v4) {
      v4(feServer_startCTTelephonyCenterOnADispatchQueue_sAnythingButARunLoop);
    }
  }
  v5 = (void *)FigOSTransactionCreate();
  FigControlCommandsStartServer();
  ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartWirelessDisplayServer"))
  {
    FigVirtualFramebufferServerStart();
    FigVirtualDisplaySessionServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartCPECryptorServer"))
  {
    FigCPECryptorStartServer();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartCPEServer"))
  {
    FigCPEServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartContentKeySessionServer"))
  {
    FigContentKeyBossStartServer();
    FigContentKeySessionStartServer();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartCustomURLLoaderServer"))
  {
    FigCustomURLLoaderServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartByteStreamServer"))
  {
    FigByteStreamServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartFormatReaderServer")) {
    FigFormatReaderServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartSampleGeneratorServer"))
  {
    FigSampleGeneratorServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartAssetServer"))
  {
    FigAssetServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartAudioDeviceClockServer"))
  {
    FigAudioDeviceClockServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartMutableCompositionServer"))
  {
    FigMutableCompositionServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartMutableMovieServer")
    && !FigRemote_ShouldConnectToMediaparserdForFileParsing())
  {
    FigMutableMovieServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartAssetImageGeneratorServer"))
  {
    FigAssetImageGeneratorServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartMTAudioProcessingTapServer"))
  {
    MTAudioProcessingTapServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"VideoCompositorServer"))
  {
    FigVideoCompositorServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartPlayerServer"))
  {
    FigPlayerServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"PreloadPhotoJPEG"))
  {
    FigPhotoJPEGPreload();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartRecorderServer"))
  {
    FigStartCaptureServers();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartAVConferenceServer"))
  {
    v7 = dlopen("/System/Library/PrivateFrameworks/GameKitServices.framework/GameKitServices", 4);
    if (v7)
    {
      v8 = (void (*)(void))dlsym(v7, "AVConferenceServerStart");
      if (v8) {
        v8(v8);
      }
    }
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartVideoQueueServer"))
  {
    FigVideoQueueServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartMonitoringNetworkActivity"))
  {
    FigStartMonitoringNetworkActivity();
  }
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartSystemControllerServer")) {
      FigSystemControllerStartServer();
    }
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartEndpointServer")) {
      FigEndpointStartServer();
    }
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartEndpointRemoteControlSessionServer")) {
      FigEndpointRemoteControlSessionStartServer();
    }
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartEndpointStreamServer")) {
      FigEndpointStreamStartServer();
    }
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartAirPlayServicesServer"))
    {
      v9 = dlopen("/System/Library/PrivateFrameworks/AirPlaySender.framework/AirPlaySender", 4);
      if (v9)
      {
        v10 = (void (*)(void))dlsym(v9, "AirPlayReceiverServicesServerStart");
        if (v10) {
          v10(v10);
        }
      }
    }
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartSTSServer")) {
      FigSTSServerStart();
    }
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartRouteDiscovererServer")) {
      FigRouteDiscovererStartServer();
    }
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartRoutingContextServer")) {
      FigRoutingContextStartServer();
    }
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartVolumeControllerServer")) {
      FigVolumeControllerStartServer();
    }
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartEndpointUIAgentServer")) {
      FigEndpointUIAgentStartServer();
    }
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartRoutingSessionManagerServer")) {
      FigRoutingSessionManagerStartServer();
    }
    if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartAirPlayAlwaysOnModules"))
    {
      v11 = dlopen("/System/Library/PrivateFrameworks/AirPlaySender.framework/AirPlaySender", 4);
      if (v11)
      {
        v12 = (void (*)(void))dlsym(v11, "AirPlayStartAlwaysOnModules");
        if (v12) {
          v12(v12);
        }
      }
    }
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartRemakerServer"))
  {
    FigRemakerServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartNeroidServer"))
  {
    FigNeroidStartServer();
  }
  FigAudioSessionInitializeVTFigAudioSession();
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartDecompressionServer")
    && !VTVideoCodecService_ShouldUseSeparateCodecProcessForDecode())
  {
    VTDecompressionSessionServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartCompressionServer")
    && !VTVideoCodecService_ShouldUseSeparateCodecProcessForEncode())
  {
    VTCompressionSessionServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartAssetDownloaderServer"))
  {
    FigAssetDownloaderStartServer();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartAssetCacheInspectorServer"))
  {
    FigAssetCacheInspectorStartServer();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartSampleBufferAudioRendererServer"))
  {
    FigSampleBufferAudioRendererServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartSampleBufferRenderSynchronizerServer"))
  {
    FigSampleBufferRenderSynchronizerServerStart();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartVideoTargetServer"))
  {
    FigVideoTargetStartServer();
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartVisualContextServer"))
  {
    FigVisualContextServerStart();
  }
  if (feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartVisionHWAccelerationServer"))
  {
    v13 = dlopen("/System/Library/PrivateFrameworks/VisionHWAccelerationServices.framework/VisionHWAccelerationServices", 4);
    if (v13)
    {
      v14 = (void (*)(void))dlsym(v13, "VisionHWAccelerationServicesStart");
      if (v14) {
        v14(v14);
      }
    }
  }
  if ((_os_feature_enabled_impl() & 1) == 0
    && feServer_ShouldStartSubServer(ModelSpecificPropertyList, @"StartVirtualCaptureCardServer"))
  {
    FigVirtualCaptureCardServerStart();
  }
  if (ModelSpecificPropertyList) {
    CFRelease(ModelSpecificPropertyList);
  }
  if (v5) {
    os_release(v5);
  }
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    v15 = dlopen("/System/Library/PrivateFrameworks/AirPlaySender.framework/AirPlaySender", 4);
    if (v15)
    {
      v16 = (void (*)(void))dlsym(v15, "SidePlayManagerStart");
      if (v16) {
        v16(v16);
      }
    }
  }
  FigWatchdogCompleteVitalWork();
  if (*v2 == 1) {
    kdebug_trace();
  }
  return 0;
}

uint64_t FigSharedPlayerGetDefaultEngineTopology(int *a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  CFStringRef v2 = (const __CFString *)CFPreferencesCopyValue(@"mediaengine", @"com.apple.coremedia", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (!v2)
  {
    int v4 = 33;
    goto LABEL_7;
  }
  CFStringRef v3 = v2;
  CFStringGetCString(v2, v6, 200, 0x8000100u);
  if (CFEqual(v3, @"fig") || CFEqual(v3, @"mission")) {
    goto LABEL_4;
  }
  if (CFEqual(v3, @"remotefig") || CFEqual(v3, @"remotemission"))
  {
LABEL_10:
    int v4 = 33;
    goto LABEL_5;
  }
  if (!CFEqual(v3, @"marlow"))
  {
    CFEqual(v3, @"remotemarlow");
    goto LABEL_10;
  }
LABEL_4:
  int v4 = 1;
LABEL_5:
  CFRelease(v3);
LABEL_7:
  *a1 = v4;
  return 0;
}

uint64_t FigMovieStartServing()
{
  return 4294954514;
}

uint64_t FigShared_OneTimeInitialization()
{
  int64_t v1 = 0;
  sDiskCacheIsRemote = 1;
  return FigShared_CopyDiskCacheParams(0, &v1, 0, 0, 0, 0);
}

void CentralOneTimeSetup()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  id v0 = objc_alloc_init(MEMORY[0x1E4F28B28]);
  [MEMORY[0x1E4F29060] detachNewThreadSelector:sel_invokeThread_ toTarget:objc_opt_class() withObject:0];
}

uint64_t FigRemakerServerStart()
{
  gRemakerFamilyServerState_3 = FigReentrantMutexCreate();
  if (!gRemakerFamilyServerState_3 || FigServer_IsMediaparserd()) {
    return FigSignalErrorAt();
  }
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t FigSharedPlayerCreate(const __CFAllocator *a1, int a2, CFTypeRef *a3)
{
  return FigSharedPlayerCreateWithOptions(a1, a2, 0, a3);
}

uint64_t FigPlayerRemoteCreate(const __CFAllocator *a1, int a2, void *a3)
{
  return FigPlayerRemoteCreateWithOptions(a1, a2, 0, a3);
}

uint64_t FigPlayerGetClassID()
{
  return sFigPlayerClassID;
}

uint64_t RegisterFigPlayerType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigPlayerCentralCreate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FigPlayerCentralCreateWithOptions(a1, a2, 0, a3);
}

uint64_t FigPlayerAsyncCreate(uint64_t a1, const void *a2, void *a3)
{
  return FigPlayerAsyncCreateWithOptions(a1, a2, 0, a3);
}

uint64_t playerasync_SetProperty(void *a1, const void *a2, uint64_t a3)
{
  CFTypeRef v16 = 0;
  CFTypeRef cf = 0;
  char v15 = 0;
  v14 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() || !a2)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_18;
  }
  uint64_t v6 = FPSupport_HandlePlayerSetPropertyAndCopyModification((uint64_t)a1, a2, a3, 0, (uint64_t)playerasync_handleSetProperty, &v15, &cf, &v16);
  if (v6)
  {
LABEL_18:
    uint64_t v12 = v6;
    v11 = 0;
    goto LABEL_12;
  }
  if (v15)
  {
LABEL_11:
    v11 = 0;
    uint64_t v12 = 0;
    goto LABEL_12;
  }
  uint64_t v7 = playerasync_createCommand(a1, 3, 0, &v14);
  if (!v7)
  {
    CFTypeRef v8 = cf;
    if (cf) {
      CFTypeRef v8 = CFRetain(cf);
    }
    v9 = v14;
    v14[4] = v8;
    CFTypeRef v10 = v16;
    if (v16) {
      CFTypeRef v10 = CFRetain(v16);
    }
    v9[5] = v10;
    playerasync_runAsynchronousCommand(a1, v9);
    goto LABEL_11;
  }
  uint64_t v12 = v7;
  v11 = v14;
LABEL_12:
  fpa_releaseCommand(v11);
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v12;
}

uint64_t playerasync_createCommand(const void *a1, int a2, const void *a3, void *a4)
{
  CFTypeRef v8 = malloc_type_calloc(1uLL, 0x70uLL, 0x10F2040C1459ED2uLL);
  if (v8)
  {
    v9 = v8;
    v8[6] = a2;
    if (a1) {
      CFTypeRef v10 = CFRetain(a1);
    }
    else {
      CFTypeRef v10 = 0;
    }
    *((void *)v9 + 1) = v10;
    if (a3) {
      CFTypeRef v11 = CFRetain(a3);
    }
    else {
      CFTypeRef v11 = 0;
    }
    *((void *)v9 + 2) = v11;
    *a4 = v9;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fpa_releaseCommand(void *a1)
{
  if (a1)
  {
    switch(*((_WORD *)a1 + 12))
    {
      case 1:
        goto LABEL_5;
      case 2:
      case 3:
      case 4:
      case 0x19:
      case 0x1A:
      case 0x1B:
      case 0x23:
        CFStringRef v2 = (const void *)a1[4];
        if (v2) {
          CFRelease(v2);
        }
LABEL_5:
        CFStringRef v3 = (const void *)a1[5];
        if (v3) {
          goto LABEL_6;
        }
        break;
      case 6:
      case 0x12:
      case 0x13:
      case 0x15:
      case 0x21:
      case 0x2B:
      case 0x30:
        CFStringRef v3 = (const void *)a1[4];
        if (!v3) {
          break;
        }
        goto LABEL_6;
      case 0x10:
        uint64_t v6 = (const void *)a1[4];
        if (!v6) {
          goto LABEL_19;
        }
        goto LABEL_18;
      case 0x11:
        CFStringRef v3 = (const void *)a1[8];
        if (!v3) {
          break;
        }
        goto LABEL_6;
      case 0x20:
      case 0x29:
        uint64_t v6 = (const void *)a1[5];
        if (v6) {
LABEL_18:
        }
          CFRelease(v6);
LABEL_19:
        CFStringRef v3 = (const void *)a1[6];
        if (!v3) {
          break;
        }
        goto LABEL_6;
      case 0x2F:
        CFStringRef v3 = (const void *)a1[7];
        if (!v3) {
          break;
        }
LABEL_6:
        CFRelease(v3);
        break;
      default:
        break;
    }
    int v4 = (const void *)a1[2];
    if (v4) {
      CFRelease(v4);
    }
    v5 = (const void *)a1[1];
    if (v5) {
      CFRelease(v5);
    }
    free(a1);
  }
}

uint64_t FigPlayerFileCreate(uint64_t a1, void *a2)
{
  return FigPlayerFileCreateWithOptions(a1, 0, a2);
}

uint64_t playerfig_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  return FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)playerfig_handleSetProperty, 0, 0, 0);
}

uint64_t FigPlayerSetConnectionActive(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (!v4) {
    return 4294954514;
  }
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v4 + 24);
  if (!v5) {
    return 4294954514;
  }

  return v5(a1, a2);
}

uint64_t playerfig_SetConnectionActive(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2) {
    int v6 = 2;
  }
  else {
    int v6 = *(unsigned char *)(DerivedStorage + 64) && !*(unsigned char *)(DerivedStorage + 65);
  }
  return playerfig_updatePlayerActiveState(a1, v6);
}

const void *playerfig_disturbPlayQueue()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BF0 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
  uint64_t v3 = Count;
  uint64_t v4 = *(const void **)(DerivedStorage + 512);
  if (v4)
  {
    v10.location = 0;
    v10.length = Count;
    CFIndex v5 = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v10, v4) + 1;
  }
  else
  {
    CFIndex v5 = Count;
  }
  if (v5 >= 1)
  {
    for (CFIndex i = 0; i != v5; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), i);
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      itemfig_antiprepare(ValueAtIndex);
      ++*(_DWORD *)(v8 + 1720);
    }
  }
  if (v3 < 1) {
    result = 0;
  }
  else {
    result = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
  }
  *(void *)(DerivedStorage + 512) = result;
  *(void *)(DerivedStorage + 520) = 0;
  return result;
}

void playeritemfig_releaseRenderPipelines(const void *a1, uint64_t a2, CFTypeRef a3)
{
  int v6 = (void *)MEMORY[0x199711A30]();
  if (a2) {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t DerivedStorage = 0;
  }
  CFTypeRef cf = 0;
  if (a1)
  {
    uint64_t v14 = CMBaseObjectGetDerivedStorage();
    if (a3 || (int v15 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf), a3 = cf, !v15))
    {
      if (*(unsigned char *)(v14 + 123))
      {
        *(unsigned char *)(v14 + 123) = 0;
        NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(a1, a2, v8, v9, v10, v11, v12, v13, @"IsNeroPlaybackActive", 0);
        CMNotificationCenterGetDefaultLocalCenter();
        FigDispatchAsyncPostNotification();
        if (NotificationPayloadForProperties) {
          CFRelease(NotificationPayloadForProperties);
        }
      }
      uint64_t v17 = *(void *)(v14 + 568);
      if (v17)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v17);
        if (FigBaseObject)
        {
          uint64_t v19 = FigBaseObject;
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v21 = v20 ? v20 : 0;
          v22 = *(void (**)(uint64_t))(v21 + 24);
          if (v22) {
            v22(v19);
          }
        }
        v23 = *(const void **)(v14 + 568);
        if (v23)
        {
          CFRelease(v23);
          *(void *)(v14 + 568) = 0;
        }
      }
      CFArrayRef v24 = *(const __CFArray **)(v14 + 640);
      if (v24)
      {
        CFIndex Count = CFArrayGetCount(v24);
        if (Count >= 1)
        {
          uint64_t v26 = Count + 1;
          do
          {
            ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 640), 0);
            uint64_t v28 = FigRenderPipelineGetFigBaseObject(ValueAtIndex);
            if (v28)
            {
              uint64_t v29 = v28;
              uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v31 = v30 ? v30 : 0;
              v32 = *(void (**)(uint64_t))(v31 + 24);
              if (v32) {
                v32(v29);
              }
            }
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v14 + 640), 0);
            --v26;
          }
          while (v26 > 1);
        }
        v33 = *(const void **)(v14 + 640);
        if (v33)
        {
          CFRelease(v33);
          *(void *)(v14 + 640) = 0;
        }
      }
      if (a2)
      {
        if (DerivedStorage[138])
        {
          MEMORY[0x19970E910](*(void *)(v14 + 224));
          CFArrayRef v34 = *(const __CFArray **)(v14 + 208);
          if (v34) {
            playerfig_clearVideoLayers(v34, 0, a3);
          }
          MEMORY[0x19970E930](*(void *)(v14 + 224));
          itemfig_handleReadyToDisplayVideoLatch(a2, 4, a3);
          itemfig_removeAllImageQueues(a2);
        }
        playeritemfig_releaseVideoCompositionObjects(a2);
      }
      v35 = *(const void **)(v14 + 600);
      if (v35)
      {
        CFRelease(v35);
        *(void *)(v14 + 600) = 0;
      }
      v36 = *(const void **)(v14 + 608);
      if (v36)
      {
        CFRelease(v36);
        *(void *)(v14 + 608) = 0;
      }
      v37 = *(const void **)(v14 + 616);
      if (v37)
      {
        CFRelease(v37);
        *(void *)(v14 + 616) = 0;
      }
      uint64_t v38 = *(void *)(v14 + 560);
      if (v38)
      {
        playerfig_removeAudioRenderPipelineListeners((uint64_t)a1, v38);
        v39 = *(const void **)(v14 + 560);
        if (v39)
        {
          CFRelease(v39);
          *(void *)(v14 + 560) = 0;
        }
      }
      FPSupport_ReleasePassthroughHelper();
      *(void *)(v14 + 912) = 0;
      CFArrayRef v40 = *(const __CFArray **)(v14 + 632);
      if (v40)
      {
        if (CFArrayGetCount(v40) >= 1)
        {
          do
          {
            v41 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 632), 0);
            playerfig_removeAudioRenderPipelineListeners((uint64_t)a1, (uint64_t)v41);
            CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v14 + 632), 0);
          }
          while (CFArrayGetCount(*(CFArrayRef *)(v14 + 632)) > 0);
        }
        v42 = *(const void **)(v14 + 632);
        if (v42)
        {
          CFRelease(v42);
          *(void *)(v14 + 632) = 0;
        }
      }
      FPSupport_resetClosedCaptionLayer(v14 + 296);
      v43 = *(const void **)(v14 + 576);
      if (v43)
      {
        CFRelease(v43);
        *(void *)(v14 + 576) = 0;
      }
      uint64_t v44 = *(void *)(v14 + 584);
      if (v44)
      {
        uint64_t v45 = FigRenderPipelineGetFigBaseObject(v44);
        if (v45)
        {
          uint64_t v46 = v45;
          uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v48 = v47 ? v47 : 0;
          v49 = *(void (**)(uint64_t))(v48 + 24);
          if (v49) {
            v49(v46);
          }
        }
        CFRelease(*(CFTypeRef *)(v14 + 584));
        *(void *)(v14 + 584) = 0;
      }
      v50 = *(const void **)(v14 + 648);
      if (v50)
      {
        CFRelease(v50);
        *(void *)(v14 + 648) = 0;
      }
      if (a2)
      {
        uint64_t v51 = CMBaseObjectGetDerivedStorage();
        CFArrayRef v52 = *(const __CFArray **)(v51 + 1768);
        CFIndex v53 = CFArrayGetCount(v52);
        *(void *)(v51 + 1768) = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D510]);
        if (v53 >= 1)
        {
          for (CFIndex i = 0; i != v53; ++i)
          {
            v55 = CFArrayGetValueAtIndex(v52, i);
            FPSupport_ForgetAboutMetadataOutputRenderPipeline(*(void *)(v51 + 1760), (uint64_t)v55);
            uint64_t v56 = FigRenderPipelineGetFigBaseObject(v55);
            if (v56)
            {
              uint64_t v57 = v56;
              uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v59 = v58 ? v58 : 0;
              v60 = *(void (**)(uint64_t))(v59 + 24);
              if (v60) {
                v60(v57);
              }
            }
          }
        }
        if (v52) {
          CFRelease(v52);
        }
        uint64_t v61 = DerivedStorage[218];
        if (v61) {
          FigLegibleOutputManagerForgetAboutLegibleOutputRenderPipelines(v61);
        }
        uint64_t v62 = DerivedStorage[222];
        if (v62) {
          FigRenderedLegibleOutputManagerForgetAboutRenderedLegibleOutputRenderPipelines(v62);
        }
        uint64_t v63 = 0;
        v64 = DerivedStorage + 46;
        do
        {
          v65 = (const void *)v64[v63];
          if (v65)
          {
            CFRelease(v65);
            v64[v63] = 0;
          }
          ++v63;
        }
        while (v63 != 14);
      }
      playerfig_preWirePixelBuffersIfNeeded((uint64_t)a1, 1);
      a3 = cf;
    }
  }
  else
  {
    a3 = 0;
  }
  FigDeferredTransactionCommit((uint64_t)a3);
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t playerasync_CopyProperty(const void *a1, const void *a2, const void *a3, uint64_t *a4)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  uint64_t v18 = 0;
  if (a4)
  {
    int v9 = DerivedStorage;
    *a4 = 0;
    if (!*DerivedStorage)
    {
      if (a2)
      {
        if (CFEqual(a2, @"UserVolume"))
        {
          MEMORY[0x19970E910](*((void *)v9 + 10));
          uint64_t v10 = *((void *)v9 + 11);
          if (v10)
          {
            *a4 = v10;
            CFRetain(*((CFTypeRef *)v9 + 11));
LABEL_14:
            MEMORY[0x19970E930](*((void *)v9 + 10));
            uint64_t v13 = 0;
            uint64_t v14 = 0;
LABEL_36:
            fpa_releaseCommand((void *)v13);
            return v14;
          }
          MEMORY[0x19970E930](*((void *)v9 + 10));
        }
        else
        {
          if (CFEqual(a2, @"LastSentSubtitleSample"))
          {
            MEMORY[0x19970E910](*((void *)v9 + 10));
            CFTypeRef v12 = (CFTypeRef)*((void *)v9 + 12);
            if (v12) {
              CFTypeRef v12 = CFRetain(v12);
            }
            *a4 = (uint64_t)v12;
            goto LABEL_14;
          }
          if (CFEqual(a2, @"Status"))
          {
            MEMORY[0x19970E910](*((void *)v9 + 17));
            if (*((void *)v9 + 2) || v9[2])
            {
              uint64_t v14 = 0;
              *a4 = FigCFNumberCreateSInt32();
            }
            else
            {
              uint64_t v14 = 4294954513;
            }
            MEMORY[0x19970E930](*((void *)v9 + 17));
            uint64_t v13 = 0;
            goto LABEL_36;
          }
          if (FigCFEqual())
          {
            uint64_t v13 = 0;
            uint64_t v14 = 4294954512;
            goto LABEL_36;
          }
        }
        uint64_t v15 = playerasync_createCommand(a1, 2, 0, &v18);
        if (v15)
        {
          uint64_t v14 = v15;
          uint64_t v13 = v18;
        }
        else
        {
          CFTypeRef v16 = CFRetain(a2);
          uint64_t v13 = v18;
          *(void *)(v18 + 32) = v16;
          if (a3) {
            CFTypeRef v17 = CFRetain(a3);
          }
          else {
            CFTypeRef v17 = 0;
          }
          *(void *)(v13 + 40) = v17;
          *(void *)(v13 + 48) = a4;
          if (CFEqual(a2, @"IsValid"))
          {
            MEMORY[0x19970E910](*((void *)v9 + 17));
            while (!*((void *)v9 + 2) && !v9[2])
              FigConditionVariableWaitRelative();
            MEMORY[0x19970E930](*((void *)v9 + 17));
            playerasync_runImmediateCommand(a1, v13, 0);
          }
          else
          {
            playerasync_runSynchronousCommand((uint64_t)a1, (_DWORD *)v13);
          }
          uint64_t v14 = *(unsigned int *)(v13 + 28);
        }
        goto LABEL_36;
      }
    }
  }

  return FigSignalErrorAt();
}

void playerfig_updateVideoLayerSize(const void *a1, CFTypeRef a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v5 = *(const void **)(DerivedStorage + 512);
  CFTypeRef v27 = 0;
  if (v5)
  {
    uint64_t v6 = DerivedStorage;
    if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 1200)) {
      return;
    }
    uint64_t v7 = (void *)MEMORY[0x199711A30]();
    if (*(void *)(v6 + 200) && *(void *)(v6 + 208))
    {
      uint64_t v26 = 0;
      long long v8 = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 16);
      *(_OWORD *)&v25.a = *MEMORY[0x1E4F1DAB8];
      *(_OWORD *)&v25.c = v8;
      *(_OWORD *)&v25.tx = *(_OWORD *)(MEMORY[0x1E4F1DAB8] + 32);
      if (!a2)
      {
        if (FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&v27))
        {
LABEL_30:
          uint64_t v12 = (uint64_t)v27;
          goto LABEL_12;
        }
        a2 = v27;
      }
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v13 = *(void (**)(const void *, char *, uint64_t *, __n128, double))(v11 + 8);
      v10.n128_u64[0] = 0;
      if (v13)
      {
        v13(v5, (char *)&v26 + 4, &v26, v10, 0.0);
        float v14 = *((float *)&v26 + 1);
        v10.n128_u32[0] = v26;
      }
      else
      {
        float v14 = 0.0;
      }
      if (*(unsigned char *)(v6 + 76))
      {
        FPSupport_AppendDeferredTransactionChangeForSettingBoundsOnLayers(a2, *(CFArrayRef *)(v6 + 200), (uint64_t)"playerfig_updateVideoLayerSize", 0.0, 0.0, v14, v10.n128_f32[0]);
        float v14 = *((float *)&v26 + 1);
        v10.n128_u32[0] = v26;
      }
      double v15 = v14 * 0.5;
      double v16 = v10.n128_f32[0] * 0.5;
      if (FPSupport_ShouldApplyVideoTrackMatrix(a1, v5))
      {
        LOBYTE(v21.a) = 0;
        char v24 = 0;
        int VideoMatrixRotationAngleAndFlips = itemfig_getVideoMatrixRotationAngleAndFlips((uint64_t)v5, &v21, &v24);
        CGAffineTransformMakeRotation(&t1, (double)VideoMatrixRotationAngleAndFlips * 3.14159265 / 180.0);
        double v18 = -1.0;
        if (v24) {
          double v19 = -1.0;
        }
        else {
          double v19 = 1.0;
        }
        if (!LOBYTE(v21.a)) {
          double v18 = 1.0;
        }
        CGAffineTransformMakeScale(&t2, v19, v18);
        CGAffineTransformConcat(&v25, &t1, &t2);
      }
      CFArrayRef v20 = *(const __CFArray **)(v6 + 208);
      CGAffineTransform v21 = v25;
      FPSupport_AppendDeferredTransactionChangeForSettingTransformOnLayers(a2, 1, (long long *)&v21, v20, (uint64_t)"playerfig_updateVideoLayerSize", v15, v16);
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x199711A30]();
  }
  uint64_t v12 = 0;
LABEL_12:
  FigDeferredTransactionCommit(v12);
  if (v27) {
    CFRelease(v27);
  }
}

void playerfig_applyEQPreset(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    FigSignalErrorAt();
  }
  else if (*(void *)(DerivedStorage + 560) || *(void *)(DerivedStorage + 632))
  {
    int valuePtr = *(_DWORD *)(DerivedStorage + 80);
    if (*(void *)(DerivedStorage + 512))
    {
      int v3 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 936);
      if (v3) {
        int valuePtr = v3;
      }
    }
    CFNumberRef v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    fp_setPropertyOnAllAudioRenderPipelines(a1, @"EQPreset", (uint64_t)v4);
    CFRelease(v4);
  }
}

uint64_t playerfig_doesAnyWorkingOrLameDuckItemHaveVideo()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (!*(void *)(DerivedStorage + 512)
    || (v16.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)),
        v16.location = 0,
        CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v16, *(const void **)(DerivedStorage + 512)), FirstIndexOfValue < 0))
  {
    unsigned __int8 v3 = 0;
  }
  else
  {
    CFIndex v2 = FirstIndexOfValue;
    unsigned __int8 v3 = 0;
    CFIndex v4 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v4);
      uint64_t v6 = CMBaseObjectGetDerivedStorage();
      if (*(_DWORD *)(v6 + 1000)) {
        break;
      }
      CFArrayRef v7 = *(const __CFArray **)(v6 + 1048);
      if (v7)
      {
        CFIndex Count = CFArrayGetCount(v7);
        if (Count >= 1)
        {
          CFIndex v9 = Count;
          uint64_t v10 = 0;
          while (1)
          {
            int v15 = 0;
            uint64_t v14 = 0;
            FigCFArrayGetInt32AtIndex();
            itemfig_getTrackStorage((uint64_t)ValueAtIndex, v15, &v14);
            if (v14)
            {
              if (*(_DWORD *)(v14 + 4) == 1986618469)
              {
                CFArrayRef v11 = *(const __CFArray **)(v14 + 216);
                if (v11)
                {
                  if (CFArrayGetCount(v11) >= 1) {
                    break;
                  }
                }
              }
            }
            if (v9 == ++v10) {
              goto LABEL_13;
            }
          }
          unsigned __int8 v3 = 1;
        }
      }
LABEL_13:
      if (v4++ == v2) {
        goto LABEL_19;
      }
    }
    unsigned __int8 v3 = 1;
  }
LABEL_19:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  return v3;
}

uint64_t FigPlaybackItemGetClassID()
{
  return sFigPlaybackItemClassID;
}

uint64_t RegisterFigPlaybackItemType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigRemote_SerializeCookiesForURL(const __CFURL *a1, uint64_t a2)
{
  CFArrayRef theArray = 0;
  if (!FigCFHTTPIsHTTPBasedURL(a1)) {
    return 0;
  }
  CFTypeRef v4 = FigURLStorageSessionCopyGlobalSession();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  CFArrayRef v7 = *(void (**)(CFTypeRef, const __CFURL *, CFArrayRef *))(v6 + 16);
  if (!v7 || (v7(v4, a1, &theArray), !theArray))
  {
    uint64_t v10 = 0;
    goto LABEL_11;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  CFArrayRef v9 = theArray;
  if (Count < 1)
  {
    uint64_t v10 = 0;
    if (!theArray) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  uint64_t v10 = MEMORY[0x19970E2C0](theArray, *MEMORY[0x1E4F1CF80], a2);
  CFArrayRef v9 = theArray;
  if (theArray) {
LABEL_15:
  }
    CFRelease(v9);
LABEL_11:
  if (v4) {
    CFRelease(v4);
  }
  return v10;
}

uint64_t itemasync_SetProperty(const void *a1, const void *a2, uint64_t a3)
{
  double v18 = 0;
  CFTypeRef v16 = 0;
  CFTypeRef cf = 0;
  char v15 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage() || !a2)
  {
    uint64_t v13 = FigSignalErrorAt();
    uint64_t v12 = 0;
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  uint64_t v6 = (void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v6 || *(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_22;
  }
  uint64_t v7 = FPSupport_HandlePlayerSetPropertyAndCopyModification((uint64_t)a1, a2, a3, 0, (uint64_t)itemasync_handleSetProperty, &v15, &cf, &v16);
  if (v7)
  {
LABEL_22:
    uint64_t v13 = v7;
    uint64_t v12 = 0;
    goto LABEL_14;
  }
  if (v15)
  {
LABEL_13:
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    goto LABEL_14;
  }
  uint64_t v8 = playerasync_createCommand(v6, 26, a1, &v18);
  if (!v8)
  {
    CFTypeRef v9 = cf;
    if (cf) {
      CFTypeRef v9 = CFRetain(cf);
    }
    uint64_t v10 = v18;
    v18[4] = v9;
    CFTypeRef v11 = v16;
    if (v16) {
      CFTypeRef v11 = CFRetain(v16);
    }
    v10[5] = v11;
    playerasync_runAsynchronousCommand(v6, v10);
    goto LABEL_13;
  }
  uint64_t v13 = v8;
  uint64_t v12 = v18;
LABEL_14:
  fpa_releaseCommand(v12);
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v6) {
    CFRelease(v6);
  }
  return v13;
}

uint64_t playercentral_CopyPlayQueueItem(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v6 = 0;
  }
  CFTypeRef cf = 0;
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v7 = *(void *)(DerivedStorage + 16);
    if (v7)
    {
      if (v6)
      {
        if (!*(unsigned char *)(v6 + 16) && a3)
        {
          uint64_t v8 = *(void *)(v6 + 8);
LABEL_13:
          uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v9) {
            uint64_t v10 = v9;
          }
          else {
            uint64_t v10 = 0;
          }
          uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(v10 + 32);
          if (v12)
          {
            uint64_t v13 = v12(v7, v8, &cf);
            if (cf)
            {
              uint64_t v14 = FigCFWeakReferenceTableCopyValue();
              if (v14) {
                uint64_t v13 = v13;
              }
              else {
                uint64_t v13 = 4294954511;
              }
              CFRelease(cf);
            }
            else
            {
              uint64_t v14 = 0;
            }
          }
          else
          {
            uint64_t v14 = 0;
            uint64_t v13 = 4294954514;
          }
          *a3 = v14;
          return v13;
        }
      }
      else if (a3)
      {
        uint64_t v8 = 0;
        goto LABEL_13;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t playerfig_CopyPlayQueueItem(uint64_t a1, const void *a2, const void **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v7 = DerivedStorage;
    *a3 = 0;
    if (!*(unsigned char *)DerivedStorage)
    {
      if (a2)
      {
        uint64_t v8 = CMBaseObjectGetDerivedStorage();
        if (*(unsigned char *)v8) {
          goto LABEL_7;
        }
        uint64_t v9 = v8;
        if (*(void *)(v8 + 8) != a1) {
          goto LABEL_7;
        }
        CFTypeRef v11 = (void *)(v7 + 496);
        MEMORY[0x19970E290](*(void *)(v7 + 496));
        if (!*(unsigned char *)(v9 + 1))
        {
          uint64_t v15 = FigSignalErrorAt();
LABEL_21:
          MEMORY[0x19970E2B0](*v11);
          return v15;
        }
        CFArrayRef v16 = *(const __CFArray **)(v7 + 504);
        v22.length = CFArrayGetCount(v16);
        v22.location = 0;
        CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v16, v22, a2);
        if (FirstIndexOfValue == -1)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v15 = FigSignalErrorAt();
          ValueAtIndex = *a3;
          if (*a3) {
LABEL_13:
          }
            CFRetain(ValueAtIndex);
LABEL_19:
          if (dword_1E9350BF0 >= 5)
          {
            double v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          goto LABEL_21;
        }
        CFIndex v18 = FirstIndexOfValue + 1;
        if (FirstIndexOfValue + 1 < CFArrayGetCount(*(CFArrayRef *)(v7 + 504)))
        {
          CFArrayRef v12 = *(const __CFArray **)(v7 + 504);
          CFIndex v13 = v18;
LABEL_12:
          ValueAtIndex = CFArrayGetValueAtIndex(v12, v13);
          uint64_t v15 = 0;
          *a3 = ValueAtIndex;
          if (!ValueAtIndex) {
            goto LABEL_19;
          }
          goto LABEL_13;
        }
      }
      else
      {
        CFTypeRef v11 = (void *)(DerivedStorage + 496);
        MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
        if (CFArrayGetCount(*(CFArrayRef *)(v7 + 504)) >= 1)
        {
          CFArrayRef v12 = *(const __CFArray **)(v7 + 504);
          CFIndex v13 = 0;
          goto LABEL_12;
        }
      }
      uint64_t v15 = 0;
      *a3 = 0;
      goto LABEL_19;
    }
  }
LABEL_7:

  return FigSignalErrorAt();
}

uint64_t itemfig_SetProperty(uint64_t a1, const void *a2, uint64_t a3)
{
  return FPSupport_HandlePlayerSetPropertyAndCopyModification(a1, a2, a3, 0, (uint64_t)itemfig_handleSetProperty, 0, 0, 0);
}

uint64_t itemasync_SetCurrentTime(const void *a1, long long *a2, int a3)
{
  CFIndex v13 = 0;
  if (!*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (!v7)
    {
      uint64_t v12 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v12;
    }
    uint64_t v8 = (void *)v7;
    if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
    {
      uint64_t v9 = FigSignalErrorAt();
    }
    else
    {
      playerasync_removeQueuedSeekCommands(v8, a1);
      uint64_t v9 = playerasync_createCommand(v8, 30, a1, &v13);
      uint64_t v10 = v13;
      if (v9)
      {
LABEL_10:
        fpa_releaseCommand(v10);
        CFRelease(v8);
        return v9;
      }
      long long v11 = *a2;
      *((void *)v13 + 6) = *((void *)a2 + 2);
      *((_OWORD *)v10 + 2) = v11;
      *((_DWORD *)v10 + 14) = a3;
      playerasync_runAsynchronousCommand(v8, v10);
    }
    uint64_t v10 = 0;
    goto LABEL_10;
  }

  return FigSignalErrorAt();
}

uint64_t itemfig_SetCurrentTime(const void *a1, CMTime *a2, char a3)
{
  CMTime v4 = *a2;
  return itemfig_setCurrentTimeWithRangeAndIDGuts(a1, &v4, a3, MEMORY[0x1E4F1FA08], MEMORY[0x1E4F1FA10], 0, 0, 0);
}

uint64_t itemfig_SetCurrentTimeWithRange(const void *a1, CMTime *a2, char a3, CMTime *a4, uint64_t a5)
{
  CMTime v9 = *a2;
  CMTime v8 = *a4;
  long long v6 = *(_OWORD *)a5;
  uint64_t v7 = *(void *)(a5 + 16);
  return itemfig_setCurrentTimeWithRangeAndIDGuts(a1, &v9, a3, &v8, &v6, 0, 0, 0);
}

uint64_t itemfig_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage && a2 && (CMTime v4 = DerivedStorage, (v5 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0))
  {
    long long v6 = (const void *)v5;
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)v7)
    {
      uint64_t v11 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v8 = v7;
      MEMORY[0x19970E290](*(void *)(v7 + 496));
      uint64_t v9 = *((void *)v4 + 44);
      if (v9)
      {
        FigPlaybackBossGetTime(v9, &v13);
        *(_OWORD *)a2 = v13;
        *(void *)(a2 + 16) = v14;
      }
      else
      {
        long long v10 = *(_OWORD *)(v4 + 24);
        *(void *)(a2 + 16) = *((void *)v4 + 5);
        *(_OWORD *)a2 = v10;
      }
      MEMORY[0x19970E2B0](*(void *)(v8 + 496));
      uint64_t v11 = 0;
    }
    CFRelease(v6);
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTimebaseSynchronizeToMoment(OpaqueCMTimebase *a1, OpaqueCMTimebase *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 8);
  int v3 = *(_DWORD *)(a3 + 4);
  v5[0] = 120;
  v5[1] = v3;
  long long v7 = *(_OWORD *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 32);
  long long v9 = *(_OWORD *)(a3 + 40);
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v13 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v12 = *MEMORY[0x1E4F1F9F8];
  uint64_t v15 = v13;
  long long v14 = v12;
  return figtimebase_synchronizeToMomentInternal(a1, a2, (uint64_t)v5);
}

void itemasync_reflectSubItemNotification(uint64_t a1, const void *a2, const void *a3, uint64_t a4, const __CFDictionary *a5)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v8) {
    CMBaseObjectGetDerivedStorage();
  }
  if (CFEqual(a3, @"ItemWasRemovedFromPlayQueue"))
  {
    if (a5)
    {
      Value = CFDictionaryGetValue(a5, @"AsRequested");
      if (v8 && (const void *)*MEMORY[0x1E4F1CFD0] != Value) {
        goto LABEL_7;
      }
    }
    else if (v8)
    {
LABEL_7:
      playerasync_removeItemFromPlayQueueWithoutInformingSubPlayer((uint64_t)v8, a2);
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v8)
  {
    CFRelease(v8);
  }
}

uint64_t itemasync_MakeReadyForInspection(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v14 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v7)
    {
      uint64_t v8 = (const void *)v7;
      if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v12 = FigSignalErrorAt();
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v9 = playerasync_createCommand(v8, 33, a1, &v14);
        if (v9)
        {
          uint64_t v12 = v9;
          uint64_t v11 = v14;
        }
        else
        {
          if (a2) {
            CFTypeRef v10 = CFRetain(a2);
          }
          else {
            CFTypeRef v10 = 0;
          }
          uint64_t v11 = v14;
          *(void *)(v14 + 32) = v10;
          *(void *)(v11 + 40) = a3;
          playerasync_runSynchronousCommand((uint64_t)v8, (_DWORD *)v11);
          uint64_t v12 = *(unsigned int *)(v11 + 28);
        }
      }
      fpa_releaseCommand((void *)v11);
      CFRelease(v8);
      return v12;
    }
    else
    {
      uint64_t v13 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v13;
    }
  }
}

uint64_t itemcentral_MakeReadyForInspection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v6 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 8);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFTypeRef v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    if (v10)
    {
      return v10(v7, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemfig_makeReadyForInspection(void *a1, const __CFArray *a2, char *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  char v26 = 1;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v8 = DerivedStorage;
    if (DerivedStorage[1242]
      || (DerivedStorage[1242] = 1, uint64_t ready = itemfig_retrieveAssetBasicsIfReady(a1), !ready))
    {
      if (v8[1200]) {
        goto LABEL_10;
      }
      if (!v8[1240])
      {
        Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        if (!Mutable) {
          goto LABEL_2;
        }
        CFTypeRef v10 = Mutable;
        CFArrayAppendValue(Mutable, @"assetProperty_ContentByteStream");
        CFArrayAppendValue(v10, @"assetProperty_FormatReader");
        CFArrayAppendValue(v10, @"assetProperty_Tracks");
        CFArrayAppendValue(v10, @"MediaSelectionArray");
        if (!a2) {
          goto LABEL_34;
        }
        goto LABEL_11;
      }
      uint64_t ready = itemfig_assureBasicsReadyUsingAsset(a1);
      if (!ready)
      {
LABEL_10:
        CFTypeRef v10 = 0;
        if (!a2) {
          goto LABEL_34;
        }
LABEL_11:
        CFIndex Count = CFArrayGetCount(a2);
        if (Count)
        {
          uint64_t v12 = Count;
          CGAffineTransform v25 = a3;
          if (!v10)
          {
            CFTypeRef v10 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
            if (!v10) {
              goto LABEL_2;
            }
          }
          if (v12 >= 1)
          {
            for (CFIndex i = 0; v12 != i; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(a2, i);
              if (CFEqual(ValueAtIndex, @"Lyrics"))
              {
                uint64_t v15 = v10;
                CFArrayRef v16 = @"Lyrics";
              }
              else if (CFEqual(ValueAtIndex, @"AccurateDuration"))
              {
                uint64_t v15 = v10;
                CFArrayRef v16 = @"Duration";
              }
              else if (CFEqual(ValueAtIndex, @"InitialSamples"))
              {
                uint64_t v15 = v10;
                CFArrayRef v16 = @"assetProperty_InitialSamples";
              }
              else if (CFEqual(ValueAtIndex, @"iTunesGaplessInfo"))
              {
                uint64_t v15 = v10;
                CFArrayRef v16 = @"iTunesGaplessInfo";
              }
              else
              {
                if (!CFEqual(ValueAtIndex, @"CPEProtector"))
                {
                  os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  continue;
                }
                CFArrayAppendValue(v10, @"assetProperty_ProtectedStatus");
                uint64_t v15 = v10;
                CFArrayRef v16 = @"assetProperty_CPEProtector";
              }
              CFArrayAppendValue(v15, v16);
            }
          }
          a3 = v25;
          if (!CFArrayGetCount(v10))
          {
            CFRelease(v10);
LABEL_37:
            uint64_t v21 = 0;
            if (a3) {
              *a3 = v26;
            }
            return v21;
          }
        }
LABEL_34:
        if (v10)
        {
          uint64_t v18 = *((void *)v8 + 152);
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          CFRange v22 = *(uint64_t (**)(uint64_t, __CFArray *, char *, void))(v20 + 16);
          if (v22)
          {
            uint64_t v23 = v22(v18, v10, &v26, 0);
            uint64_t v21 = v23;
            if (a3 && !v23) {
              *a3 = v26;
            }
          }
          else
          {
            uint64_t v21 = 4294954514;
          }
          CFRelease(v10);
          return v21;
        }
        goto LABEL_37;
      }
    }
    return ready;
  }
LABEL_2:

  return FigSignalErrorAt();
}

uint64_t FigReadCacheAddOneFile(uint64_t a1, const void *a2)
{
  int v3 = a1;
  if (gFigReadCache && *(_DWORD *)gFigReadCache || (uint64_t result = FigReadCacheInitialize(a1, 64, 0x40000u), !result))
  {
    uint64_t v5 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
    v5[4] = (v3 << 31 >> 31) & 5;
    *((void *)v5 + 3) = CFRetain(a2);
    IssueFigReadCacheRequest(v5);
    return 0;
  }
  return result;
}

uint64_t FigReadCacheInitialize(uint64_t a1, int a2, unsigned int a3)
{
  LODWORD(v4) = a2;
  MEMORY[0x19970EE10](&sSetupFigReadCacheStructureOnce, SetupFigReadCacheStructure);
  if (!gFigReadCache) {
    return 4294967188;
  }
  MEMORY[0x19970E910](*(void *)(gFigReadCache + 8));
  uint64_t v5 = gFigReadCache;
  if (*(_DWORD *)gFigReadCache)
  {
    size_t v4 = 0;
  }
  else
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef ModelSpecificPropertyList = (const __CFDictionary *)FigCreateModelSpecificPropertyList();
    if (ModelSpecificPropertyList)
    {
      CFDictionaryRef v8 = ModelSpecificPropertyList;
      value.version = 0;
      uint64_t valuePtr = 0;
      if (CFDictionaryGetValueIfPresent(ModelSpecificPropertyList, @"ReadCacheNumberOfBlocks", (const void **)&value))
      {
        CFTypeID v9 = CFGetTypeID((CFTypeRef)value.version);
        if (v9 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)value.version, kCFNumberSInt64Type, &valuePtr);
          if ((unint64_t)(valuePtr - 2) < 0xFFFFFFFE) {
            LODWORD(v4) = valuePtr;
          }
        }
      }
      if (CFDictionaryGetValueIfPresent(v8, @"ReadCacheBlockSize", (const void **)&value))
      {
        CFTypeID v10 = CFGetTypeID((CFTypeRef)value.version);
        if (v10 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)value.version, kCFNumberSInt64Type, &valuePtr);
          if ((unint64_t)(valuePtr - 0x20000) < 0xFFFE0000) {
            a3 = valuePtr;
          }
        }
      }
      CFRelease(v8);
    }
    LOBYTE(value.version) = 0;
    CFIndex AppIntegerValue = CFPreferencesGetAppIntegerValue(@"read_cache_num_entries", @"com.apple.coremedia", (Boolean *)&value);
    if (AppIntegerValue >= 0x100000000 || AppIntegerValue <= 1 || LOBYTE(value.version) == 0) {
      size_t v4 = v4;
    }
    else {
      size_t v4 = AppIntegerValue;
    }
    CFIndex v14 = CFPreferencesGetAppIntegerValue(@"read_cache_block_size", @"com.apple.coremedia", (Boolean *)&value);
    if (v14 >= 0x100000000 || v14 <= 0x1FFFF || LOBYTE(value.version) == 0) {
      unsigned int v17 = a3;
    }
    else {
      unsigned int v17 = v14;
    }
    if (v17 <= 0x20000) {
      uint64_t v18 = 0x20000;
    }
    else {
      uint64_t v18 = v17;
    }
    *(void *)(gFigReadCache + 16) = FigSemaphoreCreate();
    *(void *)(gFigReadCache + 32) = FigSimpleMutexCreate();
    uint64_t v19 = FigSimpleMutexCreate();
    uint64_t v20 = (vm_map_t *)MEMORY[0x1E4F14960];
    *(void *)(gFigReadCache + 184) = v19;
    vm_map_t v21 = *v20;
    value.version = 0;
    value.info = (void *)v18;
    memset(&value.retain, 0, 40);
    value.deallocate = (CFAllocatorDeallocateCallBack)PurgeableVMAllocatorDeallocateCallBack;
    value.preferredSize = 0;
    CFAllocatorRef v22 = CFAllocatorCreate(0, &value);
    uint64_t v23 = gFigReadCache;
    *(void *)(gFigReadCache + 168) = v22;
    *(_DWORD *)(v23 + 104) = v18;
    *(_DWORD *)(v23 + 108) = v4;
    char v24 = malloc_type_calloc(v4, 0x68uLL, 0x1030040915FFAA9uLL);
    *(void *)(gFigReadCache + 112) = v24;
    if (v24)
    {
      if (v4)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 104 * v4;
        while (1)
        {
          vm_allocate(v21, (vm_address_t *)(*(void *)(gFigReadCache + 112) + v25 + 40), *(unsigned int *)(gFigReadCache + 104), 1593835523);
          uint64_t v27 = *(void *)(gFigReadCache + 112) + v25;
          uint64_t v28 = *(void **)(v27 + 40);
          uint64_t v29 = v28
              ? CMBlockBufferCreateWithMemoryBlock(0, v28, *(unsigned int *)(gFigReadCache + 104), *(CFAllocatorRef *)(gFigReadCache + 168), 0, 0, *(unsigned int *)(gFigReadCache + 104), 0, (CMBlockBufferRef *)(v27 + 48)): FigSignalErrorAt();
          size_t v4 = v29;
          if (v29) {
            break;
          }
          uint64_t v30 = *(void *)(gFigReadCache + 112) + v25;
          *(_DWORD *)(v30 + 72) = -1;
          MoveToVGroup(v30, 4u, 0);
          v25 += 104;
          if (v26 == v25)
          {
            size_t v4 = 0;
            break;
          }
        }
      }
    }
    else
    {
      size_t v4 = FigSignalErrorAt();
    }
    Mutable = CFDictionaryCreateMutable(v6, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21EA0], (const void *)*MEMORY[0x1E4F1CFC8]);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21EA8], @"com.apple.coremedia.readcache");
    FigThreadCreate();
    if (Mutable) {
      CFRelease(Mutable);
    }
    uint64_t v5 = gFigReadCache;
    *(_DWORD *)gFigReadCache = 1;
  }
  MEMORY[0x19970E930](*(void *)(v5 + 8));
  return v4;
}

uint64_t SetupFigReadCacheStructure()
{
  uint64_t result = (uint64_t)malloc_type_calloc(1uLL, 0x138uLL, 0x106004043265632uLL);
  if (result)
  {
    uint64_t v1 = result;
    *(void *)(result + 8) = FigSimpleMutexCreate();
    uint64_t result = FigReadWriteLockCreate();
    *(void *)(v1 + 88) = result;
    gFigReadCache = v1;
  }
  return result;
}

BOOL MoveToVGroup(uint64_t a1, unsigned int a2, int a3)
{
  unsigned int v23 = 0;
  if (*(_DWORD *)(a1 + 72) == a2)
  {
    uint64_t v4 = 1;
  }
  else
  {
    unsigned int v6 = a2;
    MEMORY[0x19970E910](*(void *)(gFigReadCache + 184));
    int v7 = *(_DWORD *)(a1 + 72);
    if (v7 != -1)
    {
      uint64_t v8 = gFigReadCache;
      uint64_t v9 = *(void *)(a1 + 80);
      uint64_t v10 = *(void *)(a1 + 88);
      if (v9)
      {
        *(void *)(v9 + 88) = v10;
        uint64_t v10 = *(void *)(a1 + 88);
      }
      else
      {
        *(void *)(gFigReadCache + 24 * v7 + 192) = v10;
      }
      uint64_t v11 = v8 + 24 * v7;
      uint64_t v12 = (void *)(v11 + 200);
      if (v10) {
        uint64_t v12 = (void *)(v10 + 80);
      }
      *uint64_t v12 = v9;
      *(void *)(a1 + 80) = 0;
      *(void *)(a1 + 88) = 0;
      --*(_DWORD *)(v11 + 208);
    }
    uint64_t v13 = gFigReadCache;
    uint64_t v14 = gFigReadCache + 24 * v6;
    if (a3 == 1)
    {
      uint64_t v17 = *(void *)(v14 + 192);
      uint64_t v15 = (void *)(v14 + 192);
      uint64_t v16 = v17;
      if (v17)
      {
        *(void *)(v16 + 80) = a1;
        *(void *)(a1 + 88) = v16;
      }
      else
      {
        *(void *)(gFigReadCache + 24 * v6 + 200) = a1;
      }
    }
    else
    {
      uint64_t v19 = *(void *)(v14 + 200);
      uint64_t v15 = (void *)(v14 + 200);
      uint64_t v18 = v19;
      if (v19)
      {
        *(void *)(v18 + 88) = a1;
        *(void *)(a1 + 80) = v18;
      }
      else
      {
        *(void *)(gFigReadCache + 24 * v6 + 192) = a1;
      }
    }
    *uint64_t v15 = a1;
    ++*(_DWORD *)(v13 + 24 * v6 + 208);
    *(_DWORD *)(a1 + 72) = v6;
    MEMORY[0x19970E930](*(void *)(gFigReadCache + 184));
    switch(v6)
    {
      case 0u:
        goto LABEL_24;
      case 1u:
        int v20 = 1537;
        goto LABEL_23;
      case 2u:
        int v20 = 1025;
        goto LABEL_23;
      case 3u:
        int v20 = 513;
        goto LABEL_23;
      case 4u:
        int v20 = 33;
        goto LABEL_23;
      default:
        int v20 = 1;
LABEL_23:
        unsigned int v6 = v20 | ((a3 != 1) << 6);
LABEL_24:
        uint64_t v4 = 0;
        unsigned int v23 = v6;
        break;
    }
  }
  return !MEMORY[0x199712240](*MEMORY[0x1E4F14960], *(void *)(a1 + 40), v4, &v23)
      && v23 == 2;
}

uint64_t IssueFigReadCacheRequest(void *a1)
{
  MEMORY[0x19970E910](*(void *)(gFigReadCache + 32));
  uint64_t v2 = gFigReadCache;
  uint64_t v3 = *(void *)(gFigReadCache + 48);
  if (v3)
  {
    *(void *)(v3 + 8) = a1;
    *a1 = v3;
    uint64_t v4 = gFigReadCache;
  }
  else
  {
    *(void *)(gFigReadCache + 40) = a1;
    uint64_t v4 = v2;
  }
  *(void *)(v2 + 48) = a1;
  ++*(_DWORD *)(v2 + 56);
  MEMORY[0x19970E930](*(void *)(v4 + 32));

  return FigSemaphoreSignal();
}

uint64_t FigCachedFileByteStreamCreate(const void *a1, uint64_t a2, CFAllocatorRef Default, void *a4)
{
  uint64_t v20 = 0;
  if (!a1) {
    return FigSignalErrorAt();
  }
  if (!a4) {
    return FigSignalErrorAt();
  }
  CacheNewRequestCompletion = FigReadCacheNewRequestCompletion();
  if (!CacheNewRequestCompletion) {
    return FigSignalErrorAt();
  }
  uint64_t v8 = CacheNewRequestCompletion;
  uint64_t v21 = 0;
  FigReadCacheAddOneFileAndCopyContainer(1, a1, CacheNewRequestCompletion, &v20);
  if (!v20)
  {
    FigReadCacheDisposeRequestCompletion(v8);
    uint64_t v15 = CMByteStreamCreateForFileURL();
    uint64_t v16 = 0;
    if (!v15) {
      return v16;
    }
    return v15;
  }
  CFNumberRef number = 0;
  MEMORY[0x19970EE10](&FigCachedFileByteStreamGetClassID_sRegisterFigCachedFileByteStreamClassOnce, RegisterFigCachedFileByteStreamClass);
  uint64_t v9 = CMDerivedObjectCreate();
  if (v9)
  {
    uint64_t v16 = v9;
    FigReadCacheDisposeRequestCompletion(v8);
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!Default) {
      Default = CFAllocatorGetDefault();
    }
    *(void *)uint64_t DerivedStorage = Default;
    *(void *)uint64_t DerivedStorage = CFRetain(Default);
    *(void *)(DerivedStorage + 32) = v8;
    ByteStream = (const void *)FigReadCacheContainerGetByteStream(v20);
    *(void *)(DerivedStorage + 8) = ByteStream;
    *(void *)(DerivedStorage + 8) = CFRetain(ByteStream);
    *(void *)(DerivedStorage + 24) = v20;
    *(void *)(DerivedStorage + 16) = CFRetain(a1);
    *(void *)(DerivedStorage + 112) = FigSimpleMutexCreate();
    *(unsigned char *)(DerivedStorage + 120) = 0;
    FigByteStreamStatsSetupWorker();
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v17 = *(unsigned int (**)(uint64_t, void, void, CFNumberRef *))(v14 + 48);
    if (v17 && !v17(CMBaseObject, *MEMORY[0x1E4F1EC50], *MEMORY[0x1E4F1CF80], &number))
    {
      CFNumberGetValue(number, kCFNumberSInt64Type, (void *)(DerivedStorage + 40));
      CFRelease(number);
    }
    uint64_t v16 = 0;
    *a4 = v21;
  }
  return v16;
}

void *FigReadCacheNewRequestCompletion()
{
  id v0 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (v0)
  {
    *id v0 = FigSimpleMutexCreate();
    v0[1] = FigSemaphoreCreate();
  }
  return v0;
}

uint64_t FigReadCacheCopyContainerForFile(const void *a1, void *a2, void *a3)
{
  return FigReadCacheCopyContainer(a1, 0, a2, a3);
}

uint64_t playerasync_SetRate(void *a1, float a2)
{
  int v7 = 0;
  if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
  {
    return FigSignalErrorAt();
  }
  else
  {
    playerasync_cancelQueuedCommandsMatching(a1, 9u, 0);
    uint64_t v5 = playerasync_createCommand(a1, 9, 0, &v7);
    unsigned int v6 = v7;
    if (!v5)
    {
      *((float *)v7 + 8) = a2;
      playerasync_runAsynchronousCommand(a1, v6);
      unsigned int v6 = 0;
    }
    fpa_releaseCommand(v6);
    return v5;
  }
}

uint64_t itemasync_GetCurrentTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a2
    && (uint64_t v4 = DerivedStorage,
        uint64_t v5 = MEMORY[0x1E4F1F9F8],
        *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8],
        *(void *)(a2 + 16) = *(void *)(v5 + 16),
        !*DerivedStorage)
    && (uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject()) != 0)
  {
    uint64_t v8 = (const void *)v7;
    uint64_t v9 = CMBaseObjectGetDerivedStorage();
    if (*(_DWORD *)v9)
    {
      uint64_t v15 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v10 = v9;
      MEMORY[0x19970E910](*(void *)(v9 + 136));
      uint64_t v11 = *((void *)v4 + 2);
      if (v11)
      {
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 32);
        if (v16) {
          uint64_t v15 = v16(v11, a2);
        }
        else {
          uint64_t v15 = 4294954514;
        }
      }
      else
      {
        unsigned int v14 = v4[2];
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 4294954513;
        }
      }
      MEMORY[0x19970E930](*(void *)(v10 + 136));
    }
    CFRelease(v8);
    return v15;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void FigReadCacheThread()
{
  while (1)
  {
    uint64_t v0 = gFigReadCache;
    if (!*(void *)(gFigReadCache + 40))
    {
      int v46 = 0;
      goto LABEL_94;
    }
    int v1 = FigSimpleMutexTryLock();
    uint64_t v0 = gFigReadCache;
    if (!v1)
    {
      int v46 = 0;
      int v47 = 0;
      if (gFigReadCache) {
        goto LABEL_94;
      }
      goto LABEL_129;
    }
    *(_OWORD *)(gFigReadCache + 64) = *(_OWORD *)(gFigReadCache + 40);
    *(void *)(v0 + 80) = *(void *)(v0 + 56);
    *(void *)(v0 + 40) = 0;
    *(void *)(v0 + 48) = 0;
    *(_DWORD *)(v0 + 56) = 0;
    MEMORY[0x19970E930](*(void *)(v0 + 32));
    uint64_t v0 = gFigReadCache;
    uint64_t v2 = *(void *)(gFigReadCache + 64);
    do
    {
      uint64_t v3 = *(void *)v2;
      uint64_t v4 = *(void **)(v2 + 8);
      if (*(void *)v2)
      {
        *(void *)(v3 + 8) = v4;
        uint64_t v4 = *(void **)(v2 + 8);
      }
      else
      {
        *(void *)(v0 + 64) = v4;
      }
      if (!v4) {
        uint64_t v4 = (void *)(v0 + 72);
      }
      *uint64_t v4 = v3;
      *(void *)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
      --*(_DWORD *)(v0 + 80);
      switch(*(_DWORD *)(v2 + 16))
      {
        case 0:
          uint64_t v5 = *(const void **)(v2 + 24);
          char v6 = 0;
          goto LABEL_57;
        case 1:
          CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v2 + 24));
          if (Count >= 1)
          {
            CFIndex v8 = Count;
            for (CFIndex i = 0; i != v8; ++i)
            {
              ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 24), i);
              LoadOneFile(ValueAtIndex, 0);
            }
          }
          goto LABEL_61;
        case 2:
          uint64_t v66 = 0;
          memset(v65, 0, sizeof(v65));
          if (!FigFileGetFileInfo()) {
            FindFileInCacheAndCopyContainer(*(CFTypeRef *)(v2 + 24), (uint64_t)v65, (CFTypeRef *)(v2 + 56));
          }
          goto LABEL_89;
        case 3:
          BOOL v11 = 0;
          break;
        case 4:
          uint64_t v28 = *(void *)(v2 + 24);
          if (v28)
          {
            CFRelease(*(CFTypeRef *)(v2 + 24));
            --*(_DWORD *)(gFigReadCache + 160);
            if (CFGetRetainCount((CFTypeRef)v28) <= 1)
            {
              MEMORY[0x19970E910](*(void *)(v28 + 24));
              uint64_t v29 = *(void *)(v28 + 104);
              if (v29)
              {
                do
                {
                  uint64_t v30 = *(void *)(v29 + 64);
                  if (*(_DWORD *)v29 == 1)
                  {
                    uint64_t v31 = *(void *)(v29 + 56);
                    if (v31)
                    {
                      *(void *)(v31 + 64) = v30;
                      uint64_t v32 = *(void *)(v29 + 64);
                    }
                    else
                    {
                      *(void *)(v28 + 104) = v30;
                      uint64_t v32 = v30;
                    }
                    if (v32) {
                      v33 = (void *)(v32 + 56);
                    }
                    else {
                      v33 = (void *)(v28 + 112);
                    }
                    void *v33 = v31;
                    *(void *)(v29 + 56) = 0;
                    *(void *)(v29 + 64) = 0;
                    --*(_DWORD *)(v28 + 120);
                    MoveToVGroup(v29, 4u, 1);
                    RecycleCacheEntry(v29);
                  }
                  uint64_t v29 = v30;
                }
                while (v30);
              }
              if (*(_DWORD *)(gFigReadCache + 304)) {
                *(unsigned char *)(gFigReadCache + 157) = 1;
              }
              CFArrayRef v34 = *(const void **)(v28 + 88);
              if (v34)
              {
                CFRelease(v34);
                *(void *)(v28 + 88) = 0;
              }
              MEMORY[0x19970E930](*(void *)(v28 + 24));
              if (!*(_DWORD *)(v28 + 120)) {
                DeleteCacheContainer((CFTypeRef)v28);
              }
            }
          }
          goto LABEL_62;
        case 5:
          uint64_t v5 = *(const void **)(v2 + 24);
          char v6 = 1;
LABEL_57:
          LoadOneFile(v5, v6);
          goto LABEL_61;
        case 6:
          unint64_t v35 = *(void *)(v2 + 24);
          char v36 = 0;
          goto LABEL_60;
        case 7:
          unint64_t v35 = *(void *)(v2 + 24);
          char v36 = 1;
LABEL_60:
          LoadOneByteStreamForOpenFile(v35, v36);
LABEL_61:
          CFRelease(*(CFTypeRef *)(v2 + 24));
LABEL_62:
          free((void *)v2);
          goto LABEL_90;
        case 8:
          uint64_t v37 = *(void *)(gFigReadCache + 120);
          if (!v37) {
            goto LABEL_89;
          }
          while (!*(unsigned char *)(v37 + 96) || *(void *)(v37 + 88) != *(void *)(v2 + 32))
          {
            uint64_t v37 = *(void *)(v37 + 136);
            if (!v37) {
              goto LABEL_89;
            }
          }
          *(void *)(v2 + 56) = CFRetain((CFTypeRef)v37);
          ++*(_DWORD *)(gFigReadCache + 160);
LABEL_89:
          FigSemaphoreSignal();
          goto LABEL_90;
        case 9:
          uint64_t v38 = v2;
          char v39 = 0;
          goto LABEL_70;
        case 0xA:
          uint64_t v38 = v2;
          char v39 = 1;
LABEL_70:
          HandleAddOneFileAndCopyContainer(v38, v39);
          goto LABEL_90;
        default:
          goto LABEL_90;
      }
      while (1)
      {
        uint64_t v12 = *(void *)(v2 + 24);
        uint64_t v13 = *(unsigned int *)(gFigReadCache + 104);
        if ((*(void *)(v12 + 48) + (v13 - 1)) / v13 > *(unsigned int *)(gFigReadCache + 304)) {
          break;
        }
        uint64_t v23 = *(void *)(v2 + 32);
LABEL_31:
        if (!PopulateCacheContainer(v12, *(void *)(v23 + 8) / (unint64_t)v13 * v13)
          || FillFromCacheContainer(*(void **)(v2 + 24), *(void *)(v2 + 32))
          || !*(void *)(*(void *)(v2 + 32) + 16))
        {
          goto LABEL_71;
        }
      }
      ScanForUnreferencedDataReadyEntries();
      ScanForAbandonedEntries();
      int64_t v14 = *(void *)(*(void *)(v2 + 32) + 24);
      if (!v14) {
        int64_t v14 = (unint64_t)*(unsigned int *)(gFigReadCache + 108) >> 2;
      }
      FigReadWriteLockLockForWrite();
      if (v14 > *(unsigned int *)(gFigReadCache + 304))
      {
        uint64_t v16 = FreeEntriesInGroup(3u, *(void *)(gFigReadCache + 144), v14, v15);
        if (v16)
        {
          uint64_t v18 = FreeEntriesInGroup(2u, *(void *)(gFigReadCache + 144), v16, v17);
          if (v18)
          {
            uint64_t v20 = FreeEntriesInGroup(1u, *(void *)(gFigReadCache + 144), v18, v19);
            if (v20)
            {
              if (!*(_DWORD *)(gFigReadCache + 304))
              {
                uint64_t v24 = FreeEntriesInGroup(3u, 0, v20, v21);
                if (v24)
                {
                  uint64_t v26 = FreeEntriesInGroup(2u, 0, v24, v25);
                  if (v26) {
                    FreeEntriesInGroup(1u, 0, v26, v27);
                  }
                }
              }
            }
          }
        }
      }
      FigReadWriteLockUnlockForWrite();
      int v22 = *(_DWORD *)(gFigReadCache + 304);
      uint64_t v23 = *(void *)(v2 + 32);
      if (!*(void *)(v23 + 24)) {
        BOOL v11 = v22 != 0;
      }
      if (v22)
      {
        uint64_t v13 = *(unsigned int *)(gFigReadCache + 104);
        uint64_t v12 = *(void *)(v2 + 24);
        goto LABEL_31;
      }
LABEL_71:
      FigSemaphoreSignal();
      if (v11)
      {
        uint64_t v40 = gFigReadCache;
        if (*(_DWORD *)(gFigReadCache + 304))
        {
          uint64_t v41 = *(void *)(gFigReadCache + 144);
          if (!v41) {
            goto LABEL_87;
          }
          v42 = *(void **)(v41 + 136);
          if (!v42) {
            goto LABEL_87;
          }
          int v43 = 0;
          do
          {
            uint64_t v40 = gFigReadCache;
            int v44 = *(_DWORD *)(gFigReadCache + 304);
            if (v44) {
              BOOL v45 = v43 == 0;
            }
            else {
              BOOL v45 = 0;
            }
            if (!v45) {
              goto LABEL_86;
            }
            MEMORY[0x19970E910](v42[2]);
            if (CFGetRetainCount(v42) < 2) {
              int v43 = 0;
            }
            else {
              int v43 = PopulateCacheContainer((uint64_t)v42, 0) ^ 1;
            }
            MEMORY[0x19970E930](v42[2]);
            v42 = (void *)v42[17];
          }
          while (v42);
          uint64_t v40 = gFigReadCache;
          int v44 = *(_DWORD *)(gFigReadCache + 304);
LABEL_86:
          if (v44) {
LABEL_87:
          }
            *(unsigned char *)(v40 + 157) = 1;
        }
      }
LABEL_90:
      uint64_t v0 = gFigReadCache;
      uint64_t v2 = *(void *)(gFigReadCache + 64);
    }
    while (v2);
    int v46 = 1;
LABEL_94:
    if (*(unsigned char *)(v0 + 156))
    {
      *(unsigned char *)(v0 + 156) = 1;
      uint64_t v48 = *(void *)(v0 + 120);
      if (!v48) {
        goto LABEL_107;
      }
      do
      {
        uint64_t v49 = *(void *)(v48 + 136);
        MEMORY[0x19970E910](*(void *)(v48 + 16));
        *(unsigned char *)(v48 + 152) = 0;
        uint64_t v50 = *(void *)(v48 + 104);
        if (v50)
        {
          while (*(_DWORD *)v50 != 2)
          {
            uint64_t v53 = *(void *)(v50 + 56);
            uint64_t v51 = *(void *)(v50 + 64);
            CFArrayRef v52 = (void *)(v50 + 56);
            if (v53)
            {
              *(void *)(v53 + 64) = v51;
              uint64_t v54 = *(void *)(v50 + 64);
            }
            else
            {
              *(void *)(v48 + 104) = v51;
              uint64_t v54 = v51;
            }
            if (v54) {
              v55 = (void *)(v54 + 56);
            }
            else {
              v55 = (void *)(v48 + 112);
            }
            void *v55 = v53;
            *CFArrayRef v52 = 0;
            v52[1] = 0;
            --*(_DWORD *)(v48 + 120);
            uint64_t v50 = v51;
            if (!v51) {
              goto LABEL_105;
            }
          }
          goto LABEL_115;
        }
LABEL_105:
        MEMORY[0x19970E930](*(void *)(v48 + 16));
        DeleteCacheContainer((CFTypeRef)v48);
        uint64_t v48 = v49;
      }
      while (v49);
      uint64_t v0 = gFigReadCache;
LABEL_107:
      if (*(_DWORD *)(v0 + 108))
      {
        unint64_t v56 = 0;
        uint64_t v57 = 48;
        do
        {
          uint64_t v58 = *(const void **)(*(void *)(v0 + 112) + v57);
          if (v58)
          {
            CFRelease(v58);
            uint64_t v0 = gFigReadCache;
          }
          ++v56;
          v57 += 104;
        }
        while (v56 < *(unsigned int *)(v0 + 108));
      }
      uint64_t v59 = *(const void **)(v0 + 168);
      if (v59)
      {
        CFRelease(v59);
        uint64_t v0 = gFigReadCache;
      }
      free(*(void **)(v0 + 112));
      free((void *)gFigReadCache);
      gFigReadCache = 0;
LABEL_115:
      int v47 = 1;
    }
    else if (*(_DWORD *)(v0 + 152) && (v60 = *(void **)(v0 + 120)) != 0)
    {
      int v47 = 0;
      do
      {
        for (uint64_t j = v60[13]; j; uint64_t j = *(void *)(j + 64))
        {
          if (*(_DWORD *)j == 1)
          {
            MEMORY[0x19970E910](v60[3]);
            if (*(_DWORD *)j == 1)
            {
              ReadDataForCacheEntry((uint64_t)v60, j);
              int v47 = 1;
            }
            MEMORY[0x19970E930](v60[3]);
            uint64_t v0 = gFigReadCache;
          }
          if (*(void *)(v0 + 40)) {
            break;
          }
        }
        v60 = (void *)v60[17];
      }
      while (v60);
    }
    else
    {
      int v47 = 0;
    }
LABEL_129:
    if (!(v47 | v46))
    {
      ScanForUnreferencedDataReadyEntries();
      ScanForAbandonedEntries();
      uint64_t v62 = gFigReadCache;
      if (!*(_DWORD *)(gFigReadCache + 176) && *(int *)(gFigReadCache + 164) >= 1)
      {
        uint64_t v63 = *(void **)(gFigReadCache + 120);
        if (v63)
        {
          do
          {
            MEMORY[0x19970E910](v63[2]);
            if (v63[18] && CFGetRetainCount(v63) <= 1)
            {
              v64 = (void *)v63[18];
              if (v64)
              {
                os_release(v64);
                v63[18] = 0;
              }
              --*(_DWORD *)(gFigReadCache + 164);
            }
            MEMORY[0x19970E930](v63[2]);
            uint64_t v63 = (void *)v63[17];
          }
          while (v63);
          uint64_t v62 = gFigReadCache;
        }
      }
      if (*(unsigned char *)(v62 + 156) || !*(unsigned char *)(v62 + 157)) {
        FigSemaphoreWaitRelative();
      }
      else {
        *(unsigned char *)(v62 + 157) = 0;
      }
    }
  }
}

uint64_t LoadOneFile(const void *a1, char a2)
{
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  uint64_t result = FigFileGetFileInfo();
  if (!result)
  {
    uint64_t result = FindFileInCacheAndCopyContainer(a1, (uint64_t)v5, 0);
    if (!result) {
      return CreateAndLoadNewContainerInCacheAndReturnContainer((unint64_t)a1, 0, v5, a2, 0);
    }
  }
  return result;
}

uint64_t RegisterFigReadCacheContainerType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigReadCacheContainerID = result;
  return result;
}

double FRCContainerInit(_OWORD *a1)
{
  double result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t AssureContainerFileIsOpen(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 96))
  {
    if (!*(void *)(a1 + 88))
    {
      return FigSignalErrorAt();
    }
    return 0;
  }
  if (!*(void *)(a1 + 144))
  {
    *(void *)(a1 + 144) = FigOSTransactionCreate();
    ++*(_DWORD *)(gFigReadCache + 164);
  }
  if (*(void *)(a1 + 88)) {
    return 0;
  }
  FigGetDefaultManagedFilePool();

  return FigManagedFilePoolCreateByteStreamForFile();
}

uint64_t PopulateCacheContainer(uint64_t a1, unint64_t a2)
{
  unsigned __int8 v2 = *(unsigned char *)(a1 + 153);
  if (!v2)
  {
    uint64_t v5 = (void *)(a1 + 104);
    uint64_t v6 = *(void **)(a1 + 104);
    while (1)
    {
      if (v6)
      {
        while (1)
        {
          unint64_t v7 = v6[3];
          if (a2 == v7) {
            break;
          }
          BOOL v8 = a2 >= v7;
          if (a2 >= v7)
          {
            uint64_t v6 = (void *)v6[8];
            if (v6) {
              continue;
            }
          }
          goto LABEL_10;
        }
        uint64_t v11 = gFigReadCache;
      }
      else
      {
        BOOL v8 = 1;
LABEL_10:
        uint64_t v9 = *(void *)(gFigReadCache + 288);
        if (!v9) {
          return v2;
        }
        MoveToVGroup(*(void *)(gFigReadCache + 288), 0, 0);
        FigAtomicIncrement32();
        *(_DWORD *)uint64_t v9 = 1;
        unint64_t v10 = *(void *)(a1 + 48) - a2;
        uint64_t v11 = gFigReadCache;
        if (v10 >= *(unsigned int *)(gFigReadCache + 104)) {
          unint64_t v10 = *(unsigned int *)(gFigReadCache + 104);
        }
        *(void *)(v9 + 24) = a2;
        *(void *)(v9 + 32) = v10 + a2;
        *(void *)(v9 + 8) = a1;
        *(void *)(v9 + 16) = 0;
        if (v8)
        {
          uint64_t v12 = *(void *)(a1 + 112);
          if (v12)
          {
            *(void *)(v12 + 64) = v9;
            *(void *)(v9 + 56) = v12;
          }
          else
          {
            void *v5 = v9;
          }
          *(void *)(a1 + 112) = v9;
        }
        else
        {
          uint64_t v13 = v6[7];
          int64_t v14 = v5;
          if (v13)
          {
            *(void *)(v9 + 56) = v13;
            int64_t v14 = (void *)(v6[7] + 64);
          }
          *(void *)(v9 + 64) = v6;
          void *v14 = v9;
          v6[7] = v9;
        }
        ++*(_DWORD *)(a1 + 120);
        unsigned __int8 v2 = 1;
      }
      a2 += *(unsigned int *)(v11 + 104);
      if (a2 >= *(void *)(a1 + 48)) {
        return v2;
      }
    }
  }
  return 0;
}

uint64_t ReadDataForCacheEntry(uint64_t a1, uint64_t a2)
{
  uint64_t result = AssureContainerFileIsOpen(a1);
  if (!result)
  {
    if (*(_DWORD *)(a2 + 72)) {
      MoveToVGroup(a2, 0, 0);
    }
    uint64_t v5 = *(void *)(a2 + 24);
    uint64_t v6 = *(void *)(a2 + 32);
    uint64_t v7 = *(void *)(a1 + 88);
    uint64_t v8 = *(void *)(a2 + 40);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(v10 + 8);
    if (v11)
    {
      uint64_t v12 = v6 - v5;
      uint64_t v13 = 0;
      uint64_t result = v11(v7, v12, v5, v8, &v13);
      if (!result && v13 == v12)
      {
        *(_DWORD *)a2 = 3;
        FigAtomicDecrement32();
        return 0;
      }
    }
    else
    {
      uint64_t result = 4294954514;
    }
    *(_DWORD *)a2 = 4;
  }
  return result;
}

uint64_t FigReadCacheContainerGetByteStream(uint64_t result)
{
  if (result) {
    return *(void *)(result + 88);
  }
  return result;
}

uint64_t FigCachedFileByteStreamCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB30])) {
    goto LABEL_2;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB78]))
  {
    uint64_t StatsDictionary = FigByteStreamStatsCreateStatsDictionary();
    goto LABEL_6;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC68]))
  {
LABEL_2:
    uint64_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
LABEL_3:
    uint64_t StatsDictionary = (uint64_t)CFRetain(*v7);
LABEL_6:
    uint64_t v9 = StatsDictionary;
    uint64_t result = 0;
    *a4 = v9;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC80]))
  {
    uint64_t v7 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    goto LABEL_3;
  }
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  int64_t v14 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t *))(v13 + 48);
  if (!v14) {
    return 4294954514;
  }

  return v14(CMBaseObject, a2, a3, a4);
}

uint64_t IsReferenceMovie(uint64_t a1, BOOL *a2)
{
  if (a1)
  {
    if (a2) {
      *a2 = 0;
    }
    uint64_t result = FigAtomStreamInitWithByteStream();
    if (!result)
    {
      LODWORD(result) = FigAtomStreamPositionViaAtomPath();
      if (a2) {
        *a2 = result == 0;
      }
      if (result == -12890) {
        return 0;
      }
      else {
        return result;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigCachedFileByteStreamRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 < 0 || !a4)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v10 = DerivedStorage;
    if (*(unsigned char *)(DerivedStorage + 120))
    {
      uint64_t v19 = 0;
      uint64_t v11 = *(void *)(DerivedStorage + 40);
      if (a2 && v11 <= a3)
      {
        uint64_t v12 = 4294954423;
        if (!a5) {
          return v12;
        }
      }
      else
      {
        if (a3 + a2 <= (unint64_t)v11) {
          uint64_t v16 = a2;
        }
        else {
          uint64_t v16 = v11 - a3;
        }
        FigGetUpTimeNanoseconds();
        uint64_t v12 = FigReadCacheContainerReadBytes(*(void *)(v10 + 24), (OpaqueCMBlockBuffer *)a3, (OpaqueCMBlockBuffer *)(v16 + a3), *(void **)(v10 + 32), a4, &v19);
        FigGetUpTimeNanoseconds();
        FigByteStreamStatsLogOneRead();
        if (!a5) {
          return v12;
        }
      }
      *a5 = v19;
      return v12;
    }
    uint64_t v13 = *(void *)(DerivedStorage + 8);
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    __n128 v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(v15 + 8);
    if (!v17) {
      return 4294954514;
    }
    return v17(v13, a2, a3, a4, a5);
  }
}

uint64_t FigReadCacheContainerReadBytes(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, void *a4, uint64_t a5, void *a6)
{
  return ReadBBufOrCopyBytes(a1, a2, a3, a4, 0, a5, a6);
}

uint64_t ReadBBufOrCopyBytes(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, void *a4, CMBlockBufferRef *a5, uint64_t a6, void *a7)
{
  uint64_t IsOpen = 4294955046;
  if (!a1 || !gFigReadCache || *(unsigned char *)(gFigReadCache + 156) || !*(unsigned char *)(a1 + 152)) {
    return IsOpen;
  }
  uint64_t v26 = 0;
  *(_OWORD *)theBuffer = 0u;
  long long v25 = 0u;
  uint64_t v23 = 0;
  unint64_t v11 = *(void *)(a1 + 48);
  if (v11 <= (unint64_t)a2) {
    return 4294954423;
  }
  if (a2 == a3) {
    return 4294954424;
  }
  if (v11 >= (unint64_t)a3) {
    uint64_t v16 = a3;
  }
  else {
    uint64_t v16 = *(OpaqueCMBlockBuffer **)(a1 + 48);
  }
  int64_t v17 = v16 - a2;
  theBuffer[1] = a2;
  long long v25 = (unint64_t)(v16 - a2);
  LOBYTE(v26) = 1;
  uint64_t v27 = a6;
  uint64_t v28 = 0;
  uint64_t IsOpen = FillFromCacheContainer((void *)a1, (uint64_t)theBuffer);
  uint64_t v18 = v25;
  if (!*(unsigned char *)(a1 + 153) && (void)v25)
  {
    IssueCacheMissRequest(a1, a4, (uint64_t)theBuffer);
    uint64_t v18 = v25;
  }
  if (v18)
  {
    CMBlockBufferRef targetBBuf = 0;
    MEMORY[0x19970E910](*(void *)(a1 + 24));
    uint64_t IsOpen = AssureContainerFileIsOpen(a1);
    if (IsOpen) {
      goto LABEL_18;
    }
    uint64_t v19 = *(void *)(a1 + 88);
    uint64_t v20 = (uint64_t)v16 - v25;
    if (a6)
    {
      uint64_t IsOpen = CMByteStreamRead_0(v19, v25, v20, a6 + v28, (uint64_t)&v23);
      if (!IsOpen)
      {
        *(void *)&long long v25 = v25 - v23;
        v28 += v23;
      }
      goto LABEL_18;
    }
    uint64_t IsOpen = CMByteStreamReadAndCreateBlockBuffer_0(v19, v25, v20, (uint64_t)&targetBBuf, (uint64_t)&v23);
    if (IsOpen || !v23)
    {
      if (theBuffer[0]) {
        CFRelease(theBuffer[0]);
      }
      theBuffer[0] = 0;
      goto LABEL_18;
    }
    if (theBuffer[0])
    {
      CMBlockBufferAppendBufferReference(theBuffer[0], targetBBuf, 0, 0, 0);
      if (targetBBuf) {
        CFRelease(targetBBuf);
      }
    }
    else
    {
      theBuffer[0] = targetBBuf;
    }
    uint64_t IsOpen = 0;
LABEL_45:
    *(void *)&long long v25 = v25 - v23;
    goto LABEL_18;
  }
  if ((_BYTE)v26) {
    goto LABEL_20;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 24));
  uint64_t IsOpen = AssureContainerFileIsOpen(a1);
  if (!IsOpen)
  {
    if (a6)
    {
      uint64_t BlockBuffer_0 = CMByteStreamRead_0(*(void *)(a1 + 88), v16 - a2, (uint64_t)a2, a6, (uint64_t)&v23);
    }
    else
    {
      if (theBuffer[0]) {
        CFRelease(theBuffer[0]);
      }
      theBuffer[0] = 0;
      uint64_t BlockBuffer_0 = CMByteStreamReadAndCreateBlockBuffer_0(*(void *)(a1 + 88), v16 - a2, (uint64_t)a2, (uint64_t)theBuffer, (uint64_t)&v23);
    }
    uint64_t IsOpen = BlockBuffer_0;
    if (!BlockBuffer_0) {
      goto LABEL_45;
    }
  }
LABEL_18:
  MEMORY[0x19970E930](*(void *)(a1 + 24));
LABEL_20:
  if (a5) {
    *a5 = theBuffer[0];
  }
  if (a7) {
    *a7 = v17 - v25;
  }
  return IsOpen;
}

uint64_t FillFromCacheContainer(void *a1, uint64_t a2)
{
  FigReadWriteLockLockForRead();
  MEMORY[0x19970E910](a1[2]);
  uint64_t v4 = a1[13];
  if (v4)
  {
    uint64_t DataForCacheEntry = 0;
    size_t v6 = *(void *)(a2 + 16);
    while (1)
    {
      if (!v6) {
        goto LABEL_36;
      }
      unint64_t v7 = *(void *)(a2 + 8);
      unint64_t v8 = *(void *)(v4 + 24);
      size_t v9 = v7 - v8;
      if (v7 >= v8)
      {
        unint64_t v10 = *(void *)(v4 + 32);
        BOOL v11 = v10 > v7;
        size_t v12 = v10 - v7;
        if (v11) {
          break;
        }
      }
      if (v7 <= v8)
      {
        *(void *)(a2 + 24) = v8 / *(unsigned int *)(gFigReadCache + 104) - v7 / *(unsigned int *)(gFigReadCache + 104);
        goto LABEL_36;
      }
LABEL_33:
      uint64_t v4 = *(void *)(v4 + 64);
      if (!v4) {
        goto LABEL_36;
      }
    }
    if (v6 >= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v6;
    }
    *(void *)(v4 + 16) = FigGetUpTimeNanoseconds();
    if (!*(void *)(a2 + 40))
    {
      if (*(void *)a2)
      {
        uint64_t appended = CMBlockBufferAppendBufferReference(*(CMBlockBufferRef *)a2, *(CMBlockBufferRef *)(v4 + 48), v9, v13, 0);
      }
      else
      {
        *(void *)(gFigReadCache + 144) = a1;
        uint64_t appended = CMBlockBufferCreateWithBufferReference(0, *(CMBlockBufferRef *)(v4 + 48), v9, v13, 0, (CMBlockBufferRef *)a2);
      }
      uint64_t DataForCacheEntry = 0;
      if (appended)
      {
        uint64_t DataForCacheEntry = appended;
        goto LABEL_36;
      }
    }
    if (!*(unsigned char *)(v4 + 96))
    {
      *(unsigned char *)(v4 + 96) = 1;
      FigAtomicIncrement32();
    }
    if (*(_DWORD *)(v4 + 72))
    {
      BOOL v15 = MoveToVGroup(v4, 0, 0);
      int v16 = *(_DWORD *)v4;
      if (*(_DWORD *)v4 != 3 || !v15) {
        goto LABEL_24;
      }
      *(_DWORD *)uint64_t v4 = 1;
      FigAtomicIncrement32();
    }
    int v16 = *(_DWORD *)v4;
LABEL_24:
    if (v16 != 3)
    {
      MEMORY[0x19970E910](a1[3]);
      if (*(_DWORD *)v4 != 3)
      {
        uint64_t DataForCacheEntry = ReadDataForCacheEntry((uint64_t)a1, v4);
        if (DataForCacheEntry) {
          *(unsigned char *)(a2 + 32) = 0;
        }
      }
      MEMORY[0x19970E930](a1[3]);
    }
    uint64_t v17 = *(void *)(a2 + 40);
    if (v17 && *(unsigned char *)(a2 + 32))
    {
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v4 + 48), v9, v13, (void *)(v17 + *(void *)(a2 + 48)));
      *(void *)(a2 + 48) += v13;
    }
    size_t v6 = *(void *)(a2 + 16) - v13;
    *(void *)(a2 + 8) += v13;
    *(void *)(a2 + 16) = v6;
    goto LABEL_33;
  }
  uint64_t DataForCacheEntry = 0;
LABEL_36:
  MEMORY[0x19970E930](a1[2]);
  FigReadWriteLockUnlockForRead();
  return DataForCacheEntry;
}

uint64_t playerfig_prepareWorkingItem(const void *a1, uint64_t a2, CFTypeRef a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v24 = 1;
  CFTypeRef cf = 0;
  if (!a3)
  {
    uint64_t v7 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&cf);
    if (v7)
    {
      uint64_t PlaybackPrerequisitePropertiesReady = v7;
      goto LABEL_19;
    }
    a3 = cf;
  }
  if (*(void *)(DerivedStorage + 512))
  {
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v8 + 1289))
    {
      uint64_t v9 = 0;
      uint64_t PlaybackPrerequisitePropertiesReady = 0;
    }
    else
    {
      uint64_t PlaybackPrerequisitePropertiesReady = itemfig_makePlaybackPrerequisitePropertiesReady(*(void *)(DerivedStorage + 512), &v24);
      if (v24)
      {
        uint64_t v9 = playerfig_prepareWorkingItem2(a1, a2, a3);
      }
      else
      {
        *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 993) = a2;
        if (dword_1E9350BF0)
        {
          os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v9 = 0;
          a2 = a2;
        }
        else
        {
          uint64_t v9 = 0;
        }
      }
    }
    if (*(unsigned char *)(v8 + 1289)) {
      BOOL v12 = 0;
    }
    else {
      BOOL v12 = v9 == 0;
    }
    if (!v12)
    {
      *(unsigned char *)(v8 + 1289) = 1;
      if (!*(_DWORD *)(DerivedStorage + 776) && *(void *)(DerivedStorage + 512))
      {
        unsigned int v22 = a2;
        while (1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
          BOOL v15 = *(const void **)(DerivedStorage + 512);
          if (*(unsigned char *)(DerivedStorage + 780)) {
            BOOL v16 = 1;
          }
          else {
            BOOL v16 = ValueAtIndex == v15;
          }
          if (!v16)
          {
            if (!dword_1E9350BF0) {
              goto LABEL_18;
            }
            goto LABEL_40;
          }
          uint64_t v17 = ValueAtIndex;
          if (dword_1E9350BF0)
          {
            uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v19 = *(void *)(DerivedStorage + 512);
            a2 = v22;
          }
          else
          {
            uint64_t v19 = *(void *)(DerivedStorage + 512);
          }
          playerfig_gracefullyRemoveItemFromPlayQueue(a1, v19, 0, 0, 1, 0);
          if (v17 == v15) {
            playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(a1, @"ReasonAdvanceDueToError");
          }
          uint64_t v20 = *(void *)(DerivedStorage + 512);
          if (!v20) {
            goto LABEL_18;
          }
          itemfig_makePlaybackPrerequisitePropertiesReady(v20, &v24);
          if (!v24) {
            break;
          }
          if (playerfig_prepareWorkingItem2(a1, a2, a3))
          {
            *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 1289) = 1;
            if (*(void *)(DerivedStorage + 512)) {
              continue;
            }
          }
          goto LABEL_18;
        }
        if (dword_1E9350BF0)
        {
LABEL_40:
          __n128 v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t PlaybackPrerequisitePropertiesReady = v9;
          goto LABEL_19;
        }
      }
LABEL_18:
      uint64_t PlaybackPrerequisitePropertiesReady = v9;
    }
  }
  else
  {
    uint64_t PlaybackPrerequisitePropertiesReady = 0;
  }
LABEL_19:
  FigDeferredTransactionCommit((uint64_t)cf);
  if (cf) {
    CFRelease(cf);
  }
  return PlaybackPrerequisitePropertiesReady;
}

uint64_t playerfig_prepareWorkingItem2(const void *a1, uint64_t a2, CFTypeRef a3)
{
  uint64_t v255 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v242 = 2;
  CFTypeRef v241 = 0;
  long long v233 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&v240.CFAllocatorContext value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v240.epoch = v7;
  v239 = a1;
  if (dword_1E9350BF0 >= 2)
  {
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a1) {
      unint64_t v10 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    }
    else {
      unint64_t v10 = "";
    }
    strncpy((char *)__dst, v10, 8uLL);
    if (*(void *)(DerivedStorage + 512)) {
      BOOL v11 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    }
    else {
      BOOL v11 = "";
    }
    strncpy((char *)__dst, v11, 8uLL);
    kdebug_trace();
  }
  if (!*(void *)(DerivedStorage + 512))
  {
    CFStringRef v13 = 0;
    uint64_t v22 = 0;
    BOOL v238 = 1;
    goto LABEL_349;
  }
  if (!*(_DWORD *)(DerivedStorage + 60))
  {
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
    BOOL v238 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFStringRef v13 = 0;
    uint64_t v22 = 0;
LABEL_348:
    uint64_t v9 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    goto LABEL_349;
  }
  if (a3)
  {
LABEL_16:
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    CFStringRef v13 = *(const __CFString **)(DerivedStorage + 512);
    uint64_t v14 = CMBaseObjectGetDerivedStorage();
    BOOL v238 = v13 == 0;
    if (v13) {
      CFRetain(v13);
    }
    if (*(double *)(v14 + 1584) == 0.0) {
      *(CFAbsoluteTime *)(v14 + 1584) = CFAbsoluteTimeGetCurrent();
    }
    if (*(double *)(v14 + 1928) == 0.0)
    {
      *(CFAbsoluteTime *)(v14 + 1928) = CFAbsoluteTimeGetCurrent();
      uint64_t v15 = CMBaseObjectGetDerivedStorage();
      double v16 = *(double *)(v15 + 1928);
      if (v16 != 0.0)
      {
        uint64_t v17 = v15;
        double v18 = *(double *)(v15 + 1920);
        MEMORY[0x19970E910](*(void *)(v15 + 1896));
        uint64_t v19 = *(void *)(v17 + 1904);
        if (v19)
        {
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v21 = v20 ? v20 : 0;
          char v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v21 + 56);
          if (v24) {
            v24(v19, 0x1EE582B78, 0x1EE584BB8, (uint64_t)((v16 - v18) * 1000.0), 0);
          }
        }
        MEMORY[0x19970E930](*(void *)(v17 + 1896));
      }
    }
    if (!a2) {
      goto LABEL_83;
    }
    unsigned __int8 v245 = 0;
    __dst[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    uint64_t v25 = CMBaseObjectGetDerivedStorage();
    *(void *)type = 0;
    CFTypeRef cf = 0;
    if (*(_DWORD *)(v25 + 996))
    {
      uint64_t v26 = v25;
      uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v28 = v27 ? v27 : 0;
      uint64_t v29 = *(unsigned int (**)(const __CFString *, CMTime *))(v28 + 32);
      if (v29)
      {
        if (!v29(v13, __dst))
        {
          if ((__dst[0].flags & 1) == 0)
          {
            *(_OWORD *)&__dst[0].CFAllocatorContext value = v233;
            __dst[0].epoch = v7;
          }
          uint64_t v30 = *(void *)(v26 + 968);
          uint64_t v31 = *(unsigned int *)(v26 + 996);
          uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v33 = v32 ? v32 : 0;
          CFArrayRef v34 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, void))(v33 + 56);
          if (v34)
          {
            if (!v34(v30, v31, &cf, 0))
            {
              uint64_t v35 = *MEMORY[0x1E4F1CF80];
              uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(cf);
              uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v37) {
                uint64_t v38 = v37;
              }
              else {
                uint64_t v38 = 0;
              }
              char v39 = *(void (**)(uint64_t, __CFString *, uint64_t, os_log_type_t *))(v38 + 48);
              if (v39)
              {
                v39(FigBaseObject, @"SecondaryEditCursorService", v35, type);
                if (*(void *)type)
                {
                  CMTime v246 = __dst[0];
                  int v40 = itemfig_lookForEmptyEditAndMapTime(*(uint64_t *)type, (long long *)&v246.value, __dst, &v245);
                  int v41 = v245;
                  v42 = *(const void **)type;
                  if (v40 | v245)
                  {
                    int v43 = v239;
                    goto LABEL_63;
                  }
                  if (*(void *)type)
                  {
                    CFRelease(*(CFTypeRef *)type);
                    *(void *)type = 0;
                  }
                }
              }
              uint64_t v44 = FigTrackReaderGetFigBaseObject(cf);
              uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v45) {
                uint64_t v46 = v45;
              }
              else {
                uint64_t v46 = 0;
              }
              int v47 = *(void (**)(uint64_t, __CFString *, uint64_t, os_log_type_t *))(v46 + 48);
              if (v47) {
                v47(v44, @"EditCursorService", v35, type);
              }
              if (*(void *)type)
              {
                CMTime v246 = __dst[0];
                int v48 = itemfig_lookForEmptyEditAndMapTime(*(uint64_t *)type, (long long *)&v246.value, __dst, &v245);
                int v41 = v245;
                v42 = *(const void **)type;
                int v43 = v239;
                if (!v48 && !v245 && *(void *)type)
                {
                  CFRelease(*(CFTypeRef *)type);
                  int v41 = 0;
                  *(void *)type = 0;
                  goto LABEL_66;
                }
LABEL_63:
                if (v42) {
                  CFRelease(v42);
                }
LABEL_66:
                if (cf) {
                  CFRelease(cf);
                }
                if (!v41)
                {
LABEL_84:
                  uint64_t v54 = itemfig_rebuildRenderPipelinesAndBossGuts(v13, 1, 1, a2, &v242, a3, 0, 0, value, v232);
                  if (v54)
                  {
                    uint64_t v22 = v54;
                    if (dword_1E9350BF0)
                    {
                      uint64_t v61 = v54;
                      uint64_t v234 = v14;
                      LODWORD(cf) = 0;
                      type[0] = OS_LOG_TYPE_DEFAULT;
                      uint64_t v62 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      unsigned int v63 = cf;
                      if (os_log_type_enabled(v62, type[0])) {
                        unsigned int v64 = v63;
                      }
                      else {
                        unsigned int v64 = v63 & 0xFFFFFFFE;
                      }
                      if (!v64) {
                        goto LABEL_271;
                      }
                      v65 = v239;
                      if (v239) {
                        uint64_t v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                      }
                      else {
                        uint64_t v66 = "";
                      }
                      if (!v13)
                      {
                        v71 = "";
LABEL_146:
                        LODWORD(v246.value) = 136316418;
                        *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                        LOWORD(v246.flags) = 2048;
                        *(void *)((char *)&v246.flags + 2) = v65;
                        HIWORD(v246.epoch) = 2082;
                        v247 = v66;
                        __int16 v248 = 2048;
                        CFStringRef v249 = v13;
                        __int16 v250 = 2082;
                        v251 = v71;
                        __int16 v252 = 1024;
                        LODWORD(v253) = v61;
                        _os_log_send_and_compose_impl();
LABEL_271:
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        int v43 = v239;
                        uint64_t v14 = v234;
                        uint64_t v22 = v61;
                        goto LABEL_272;
                      }
                      goto LABEL_212;
                    }
LABEL_272:
                    if (v13)
                    {
                      if (v22)
                      {
                        v137 = *(const void **)(v14 + 128);
                        LODWORD(__dst[0].value) = v22;
                        v138 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, __dst);
                        if (v138)
                        {
                          v139 = v138;
                          FailedNotificationPayloadWithContentStream = itemfig_createFailedNotificationPayloadWithContentStream(v137, v138);
                          CFRelease(v139);
                        }
                        else
                        {
                          FailedNotificationPayloadWithContentStream = 0;
                        }
                        *(unsigned char *)(v14 + 1266) = 0;
                        v159 = (__CFError *)CFDictionaryGetValue(FailedNotificationPayloadWithContentStream, @"CFError");
                        itemfig_reportingAgentReportError((uint64_t)v13, v159, @"CoreMediaErrorDomain", @"Failed to become ready for playback", v22);
                        if (dword_1E9350BF0)
                        {
                          v235 = FailedNotificationPayloadWithContentStream;
                          uint64_t v160 = v22;
                          LODWORD(cf) = 0;
                          type[0] = OS_LOG_TYPE_DEFAULT;
                          v161 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          unsigned int v162 = cf;
                          if (os_log_type_enabled(v161, type[0])) {
                            unsigned int v163 = v162;
                          }
                          else {
                            unsigned int v163 = v162 & 0xFFFFFFFE;
                          }
                          if (v163)
                          {
                            if (v239) {
                              v164 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                            }
                            else {
                              v164 = "";
                            }
                            uint64_t v165 = CMBaseObjectGetDerivedStorage();
                            LODWORD(v246.value) = 136316418;
                            *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                            LOWORD(v246.flags) = 2048;
                            *(void *)((char *)&v246.flags + 2) = v239;
                            HIWORD(v246.epoch) = 2082;
                            v247 = v164;
                            __int16 v248 = 2048;
                            CFStringRef v249 = v13;
                            __int16 v250 = 2082;
                            v251 = (const char *)(v165 + 2048);
                            __int16 v252 = 1024;
                            LODWORD(v253) = v160;
                            _os_log_send_and_compose_impl();
                          }
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                          uint64_t v22 = v160;
                          FailedNotificationPayloadWithContentStream = v235;
                        }
                      }
                      else
                      {
                        if (!*(void *)(v14 + 600))
                        {
                          NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(v43, (uint64_t)v13, v55, v56, v57, v58, v59, v60, @"PlayableTimeIntervals", 0);
                          CMNotificationCenterGetDefaultLocalCenter();
                          FigDispatchAsyncPostNotification();
                          if (NotificationPayloadForProperties) {
                            CFRelease(NotificationPayloadForProperties);
                          }
                        }
                        v142 = playerfig_createNotificationPayloadForProperties(v43, (uint64_t)v13, v55, v56, v57, v58, v59, v60, @"SeekableTimeIntervals", 0);
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigDispatchAsyncPostNotification();
                        if (v142) {
                          CFRelease(v142);
                        }
                        FailedNotificationPayloadWithContentStream = playerfig_createNotificationPayloadForProperties(v43, (uint64_t)v13, v143, v144, v145, v146, v147, v148, @"CanPlayFastForward", @"CanPlayFastReverse");
                        *(unsigned char *)(v14 + 1266) = 1;
                        if (*(double *)(v14 + 1984) == 0.0)
                        {
                          *(CFAbsoluteTime *)(v14 + 1984) = CFAbsoluteTimeGetCurrent();
                          uint64_t v149 = CMBaseObjectGetDerivedStorage();
                          if (*(unsigned char *)(v149 + 1696))
                          {
                            uint64_t v150 = v149;
                            uint64_t v151 = v22;
                            LODWORD(__dst[0].value) = 0;
                            LODWORD(v246.value) = 0;
                            double v152 = *(double *)(v149 + 1960);
                            double v153 = *(double *)(v149 + 1920);
                            double v154 = *(double *)(v149 + 1976);
                            double v155 = *(double *)(v149 + 1984);
                            MEMORY[0x19970E910](*(void *)(v149 + 1896));
                            uint64_t v156 = *(void *)(v150 + 1904);
                            if (v156)
                            {
                              uint64_t v157 = *(void *)(CMBaseObjectGetVTable() + 16);
                              uint64_t v158 = v157 ? v157 : 0;
                              v166 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v158 + 56);
                              if (v166) {
                                v166(v156, 0x1EE582B78, 0x1EE583B98, (uint64_t)((v152 - v153) * 1000.0), 0);
                              }
                            }
                            uint64_t v167 = *(void *)(v150 + 1904);
                            if (v167)
                            {
                              uint64_t v168 = *(void *)(CMBaseObjectGetVTable() + 16);
                              if (v168) {
                                uint64_t v169 = v168;
                              }
                              else {
                                uint64_t v169 = 0;
                              }
                              v170 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v169 + 56);
                              if (v170) {
                                v170(v167, 0x1EE582B78, 0x1EE583BB8, (uint64_t)((v154 - v153) * 1000.0), 0);
                              }
                              uint64_t v171 = *(void *)(v150 + 1904);
                              if (v171)
                              {
                                uint64_t v172 = *(void *)(CMBaseObjectGetVTable() + 16);
                                uint64_t v173 = v172 ? v172 : 0;
                                v174 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v173 + 56);
                                if (v174) {
                                  v174(v171, 0x1EE582B78, 0x1EE583BD8, (uint64_t)((v155 - v153) * 1000.0), 0);
                                }
                              }
                            }
                            itemfig_GetDimensions(v13, (float *)__dst, (float *)&v246);
                            uint64_t v175 = *(void *)(v150 + 1904);
                            if (v175)
                            {
                              float v176 = *(float *)&__dst[0].value;
                              uint64_t v177 = *(void *)(CMBaseObjectGetVTable() + 16);
                              uint64_t v178 = v177 ? v177 : 0;
                              v179 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v178 + 56);
                              if (v179) {
                                v179(v175, 0x1EE582BF8, 0x1EE583938, (int)v176, 0);
                              }
                            }
                            uint64_t v180 = *(void *)(v150 + 1904);
                            if (v180)
                            {
                              float v181 = *(float *)&v246.value;
                              uint64_t v182 = *(void *)(CMBaseObjectGetVTable() + 16);
                              uint64_t v183 = v182 ? v182 : 0;
                              v184 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v183 + 56);
                              if (v184) {
                                v184(v180, 0x1EE582BF8, 0x1EE583918, (int)v181, 0);
                              }
                            }
                            MEMORY[0x19970E930](*(void *)(v150 + 1896));
                            uint64_t v22 = v151;
                          }
                          itemfig_networkActivitySubmitMetricsForInitialStartupIfAvailable();
                        }
                        CFArrayRef v185 = *(const __CFArray **)(DerivedStorage + 504);
                        if (v185
                          && CFArrayGetCount(v185)
                          && CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0) == v13)
                        {
                          itemfig_handleReadyToDisplayVideoLatch((uint64_t)v13, 3, a3);
                          playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(v43, v13, MEMORY[0x1E4F1F9F8]);
                        }
                        v186 = (_DWORD *)MEMORY[0x1E4F1EBA8];
                        if (dword_1E9350BF0)
                        {
                          v236 = FailedNotificationPayloadWithContentStream;
                          uint64_t v187 = v22;
                          LODWORD(cf) = 0;
                          type[0] = OS_LOG_TYPE_DEFAULT;
                          v188 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          unsigned int v189 = cf;
                          if (os_log_type_enabled(v188, type[0])) {
                            unsigned int v190 = v189;
                          }
                          else {
                            unsigned int v190 = v189 & 0xFFFFFFFE;
                          }
                          if (v190)
                          {
                            if (v239) {
                              v191 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                            }
                            else {
                              v191 = "";
                            }
                            uint64_t v192 = CMBaseObjectGetDerivedStorage();
                            LODWORD(v246.value) = 136316162;
                            *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                            LOWORD(v246.flags) = 2048;
                            *(void *)((char *)&v246.flags + 2) = v239;
                            HIWORD(v246.epoch) = 2082;
                            v247 = v191;
                            __int16 v248 = 2048;
                            CFStringRef v249 = v13;
                            __int16 v250 = 2082;
                            v251 = (const char *)(v192 + 2048);
                            _os_log_send_and_compose_impl();
                          }
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                          v186 = (_DWORD *)MEMORY[0x1E4F1EBA8];
                          uint64_t v22 = v187;
                          FailedNotificationPayloadWithContentStream = v236;
                        }
                        if (*v186 == 1)
                        {
                          uint64_t v193 = CMBaseObjectGetDerivedStorage();
                          strncpy((char *)__dst, (const char *)(v193 + 2048), 8uLL);
                          kdebug_trace();
                        }
                      }
                      CMNotificationCenterGetDefaultLocalCenter();
                      FigDispatchAsyncPostNotification();
                      if (FailedNotificationPayloadWithContentStream) {
                        CFRelease(FailedNotificationPayloadWithContentStream);
                      }
                      CFRelease(v13);
                    }
                    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
                    goto LABEL_348;
                  }
                  itemfig_assureContentProtectionReadyForInspection(v13);
                  uint64_t v67 = *(void *)(v14 + 1160);
                  if (!v67) {
                    goto LABEL_109;
                  }
                  uint64_t v68 = *(void *)(DerivedStorage + 848);
                  uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v69) {
                    uint64_t v70 = v69;
                  }
                  else {
                    uint64_t v70 = 0;
                  }
                  v72 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v70 + 56);
                  if (v72)
                  {
                    uint64_t v22 = v72(v67, @"DisplayList", v68);
                    if (!v22)
                    {
                      CMNotificationCenterGetDefaultLocalCenter();
                      uint64_t v73 = FigNotificationCenterAddWeakListener();
                      if (v73)
                      {
                        uint64_t v22 = v73;
                        if (dword_1E9350BF0)
                        {
                          uint64_t v61 = v73;
                          uint64_t v234 = v14;
                          LODWORD(cf) = 0;
                          type[0] = OS_LOG_TYPE_DEFAULT;
                          v74 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          unsigned int v75 = cf;
                          if (os_log_type_enabled(v74, type[0])) {
                            unsigned int v76 = v75;
                          }
                          else {
                            unsigned int v76 = v75 & 0xFFFFFFFE;
                          }
                          if (!v76) {
                            goto LABEL_271;
                          }
                          v65 = v239;
                          if (v239) {
                            uint64_t v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                          }
                          else {
                            uint64_t v66 = "";
                          }
                          if (!v13)
                          {
                            v71 = "";
                            goto LABEL_146;
                          }
                          goto LABEL_212;
                        }
LABEL_122:
                        int v43 = v239;
                        goto LABEL_272;
                      }
LABEL_109:
                      itemfig_ExternalProtectionStatusChangedGuts((uint64_t)v13);
                      if (*(double *)(v14 + 1592) == 0.0) {
                        *(CFAbsoluteTime *)(v14 + 1592) = CFAbsoluteTimeGetCurrent();
                      }
                      itemfig_getDurationIfReady((uint64_t)v13, (uint64_t)&v240);
                      MEMORY[0x19970E910](*(void *)(v14 + 1896));
                      uint64_t v77 = *(void *)(v14 + 1904);
                      __dst[0] = v240;
                      v78.n128_f64[0] = CMTimeGetSeconds(__dst);
                      if (v77)
                      {
                        double v79 = v78.n128_f64[0];
                        uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 16);
                        uint64_t v81 = v80 ? v80 : 0;
                        v85 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v81 + 56);
                        if (v85) {
                          v85(v77, 0x1EE582B78, 0x1EE55E038, (uint64_t)(round(v79) * 1000.0), 0);
                        }
                      }
                      MEMORY[0x19970E930](*(void *)(v14 + 1896), v78);
                      int v43 = v239;
                      if (*(float *)(DerivedStorage + 48) != 0.0)
                      {
                        if (*(const __CFString **)(DerivedStorage + 520) == v13)
                        {
                          *(void *)(DerivedStorage + 520) = 0;
                          if (dword_1E9350BF0 >= 2)
                          {
                            LODWORD(cf) = 0;
                            type[0] = OS_LOG_TYPE_DEFAULT;
                            v90 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            unsigned int v91 = cf;
                            if (os_log_type_enabled(v90, type[0])) {
                              unsigned int v92 = v91;
                            }
                            else {
                              unsigned int v92 = v91 & 0xFFFFFFFE;
                            }
                            if (v92)
                            {
                              if (v239) {
                                v93 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                              }
                              else {
                                v93 = "";
                              }
                              if (v13) {
                                v99 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                              }
                              else {
                                v99 = "";
                              }
                              v100 = "does not have an";
                              *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                              LODWORD(v246.value) = 136316418;
                              if (!v242) {
                                v100 = "created new";
                              }
                              LOWORD(v246.flags) = 2048;
                              *(void *)((char *)&v246.flags + 2) = v239;
                              v101 = "reused";
                              if (v242 != 1) {
                                v101 = v100;
                              }
                              HIWORD(v246.epoch) = 2082;
                              v247 = v93;
                              __int16 v248 = 2048;
                              CFStringRef v249 = v13;
                              __int16 v250 = 2082;
                              v251 = v99;
                              __int16 v252 = 2082;
                              v253 = v101;
                              _os_log_send_and_compose_impl();
                            }
                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                            int v43 = v239;
                          }
                          if (v242 == 1)
                          {
                            if (fp_audioPipelineIsRunning(*(void *)(DerivedStorage + 560)))
                            {
                              if (dword_1E9350BF0 >= 2)
                              {
                                LODWORD(cf) = 0;
                                type[0] = OS_LOG_TYPE_DEFAULT;
                                v102 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                unsigned int v103 = cf;
                                if (os_log_type_enabled(v102, type[0])) {
                                  unsigned int v104 = v103;
                                }
                                else {
                                  unsigned int v104 = v103 & 0xFFFFFFFE;
                                }
                                if (v104)
                                {
                                  if (v43) {
                                    v105 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                                  }
                                  else {
                                    v105 = "";
                                  }
                                  if (v13) {
                                    v118 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                                  }
                                  else {
                                    v118 = "";
                                  }
                                  LODWORD(v246.value) = 136316162;
                                  *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                                  LOWORD(v246.flags) = 2048;
                                  *(void *)((char *)&v246.flags + 2) = v43;
                                  HIWORD(v246.epoch) = 2082;
                                  v247 = v105;
                                  __int16 v248 = 2048;
                                  CFStringRef v249 = v13;
                                  __int16 v250 = 2082;
                                  v251 = v118;
                                  _os_log_send_and_compose_impl();
                                }
                                fig_log_call_emit_and_clean_up_after_send_and_compose();
                              }
                              fp_bumpTransitionNumber();
                              itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v13, 0);
                              itemfig_applyLoudnessInfo(v13, *(unsigned int *)(v14 + 996), 0, 1);
                              uint64_t v119 = FigPlaybackBossPrerollAndScheduleGaplessStart(*(void *)(v14 + 352), *(const void **)(DerivedStorage + 536), *(const void **)(v14 + 512), *(float *)(DerivedStorage + 48));
                              if (v119)
                              {
                                uint64_t v22 = v119;
                                if (!dword_1E9350BF0) {
                                  goto LABEL_272;
                                }
                                uint64_t v61 = v119;
                                uint64_t v234 = v14;
                                LODWORD(cf) = 0;
                                type[0] = OS_LOG_TYPE_DEFAULT;
                                v120 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                unsigned int v121 = cf;
                                if (os_log_type_enabled(v120, type[0])) {
                                  unsigned int v122 = v121;
                                }
                                else {
                                  unsigned int v122 = v121 & 0xFFFFFFFE;
                                }
                                if (!v122) {
                                  goto LABEL_271;
                                }
                                v65 = v239;
                                if (v239) {
                                  uint64_t v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                                }
                                else {
                                  uint64_t v66 = "";
                                }
                                if (!v13)
                                {
                                  v71 = "";
                                  goto LABEL_146;
                                }
                                goto LABEL_449;
                              }
                              uint64_t v123 = playerfig_setExitTransitionIDOnItemPrecedingWorkingItem((uint64_t)v43, *(const void **)(DerivedStorage + 536));
                              if (v123)
                              {
                                uint64_t v22 = v123;
                                if (!dword_1E9350BF0) {
                                  goto LABEL_272;
                                }
                                uint64_t v61 = v123;
                                uint64_t v234 = v14;
                                LODWORD(cf) = 0;
                                type[0] = OS_LOG_TYPE_DEFAULT;
                                v124 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                unsigned int v125 = cf;
                                if (os_log_type_enabled(v124, type[0])) {
                                  unsigned int v126 = v125;
                                }
                                else {
                                  unsigned int v126 = v125 & 0xFFFFFFFE;
                                }
                                if (!v126) {
                                  goto LABEL_271;
                                }
                                v65 = v239;
                                if (v239) {
                                  uint64_t v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                                }
                                else {
                                  uint64_t v66 = "";
                                }
                                if (!v13)
                                {
                                  v71 = "";
                                  goto LABEL_146;
                                }
                                goto LABEL_449;
                              }
                            }
                            else
                            {
                              if (dword_1E9350BF0 >= 2)
                              {
                                LODWORD(cf) = 0;
                                type[0] = OS_LOG_TYPE_DEFAULT;
                                v110 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                unsigned int v111 = cf;
                                if (os_log_type_enabled(v110, type[0])) {
                                  unsigned int v112 = v111;
                                }
                                else {
                                  unsigned int v112 = v111 & 0xFFFFFFFE;
                                }
                                if (v112)
                                {
                                  if (v43) {
                                    v113 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                                  }
                                  else {
                                    v113 = "";
                                  }
                                  if (v13) {
                                    v127 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                                  }
                                  else {
                                    v127 = "";
                                  }
                                  LODWORD(v246.value) = 136316162;
                                  *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                                  LOWORD(v246.flags) = 2048;
                                  *(void *)((char *)&v246.flags + 2) = v43;
                                  HIWORD(v246.epoch) = 2082;
                                  v247 = v113;
                                  __int16 v248 = 2048;
                                  CFStringRef v249 = v13;
                                  __int16 v250 = 2082;
                                  v251 = v127;
                                  _os_log_send_and_compose_impl();
                                }
                                fig_log_call_emit_and_clean_up_after_send_and_compose();
                              }
                              itemfig_applyLoudnessInfo(v13, *(unsigned int *)(v14 + 996), 0, 0);
                              itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v13, 0);
                              __dst[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
                              CMTime v246 = __dst[0];
                              uint64_t matched = itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v13, __dst, &v246);
                              if (matched)
                              {
                                uint64_t v22 = matched;
                                if (!dword_1E9350BF0) {
                                  goto LABEL_272;
                                }
                                uint64_t v61 = matched;
                                uint64_t v234 = v14;
                                LODWORD(cf) = 0;
                                type[0] = OS_LOG_TYPE_DEFAULT;
                                v130 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                unsigned int v131 = cf;
                                if (os_log_type_enabled(v130, type[0])) {
                                  unsigned int v132 = v131;
                                }
                                else {
                                  unsigned int v132 = v131 & 0xFFFFFFFE;
                                }
                                if (!v132) {
                                  goto LABEL_271;
                                }
                                v65 = v239;
                                if (v239) {
                                  uint64_t v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                                }
                                else {
                                  uint64_t v66 = "";
                                }
                                if (!v13)
                                {
                                  v71 = "";
                                  goto LABEL_146;
                                }
                                goto LABEL_449;
                              }
                            }
                          }
                          else if (CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0) == v13)
                          {
                            if (dword_1E9350BF0 >= 2)
                            {
                              LODWORD(cf) = 0;
                              type[0] = OS_LOG_TYPE_DEFAULT;
                              v114 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                              unsigned int v115 = cf;
                              if (os_log_type_enabled(v114, type[0])) {
                                unsigned int v116 = v115;
                              }
                              else {
                                unsigned int v116 = v115 & 0xFFFFFFFE;
                              }
                              if (v116)
                              {
                                if (v43) {
                                  v117 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                                }
                                else {
                                  v117 = "";
                                }
                                if (v13) {
                                  v128 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                                }
                                else {
                                  v128 = "";
                                }
                                LODWORD(v246.value) = 136316162;
                                *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                                LOWORD(v246.flags) = 2048;
                                *(void *)((char *)&v246.flags + 2) = v43;
                                HIWORD(v246.epoch) = 2082;
                                v247 = v117;
                                __int16 v248 = 2048;
                                CFStringRef v249 = v13;
                                __int16 v250 = 2082;
                                v251 = v128;
                                _os_log_send_and_compose_impl();
                              }
                              fig_log_call_emit_and_clean_up_after_send_and_compose();
                            }
                            itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v13, 0);
                            __dst[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
                            CMTime v246 = __dst[0];
                            uint64_t v133 = itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v13, __dst, &v246);
                            if (v133)
                            {
                              uint64_t v22 = v133;
                              if (!dword_1E9350BF0) {
                                goto LABEL_272;
                              }
                              uint64_t v61 = v133;
                              uint64_t v234 = v14;
                              LODWORD(cf) = 0;
                              type[0] = OS_LOG_TYPE_DEFAULT;
                              v134 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                              unsigned int v135 = cf;
                              if (os_log_type_enabled(v134, type[0])) {
                                unsigned int v136 = v135;
                              }
                              else {
                                unsigned int v136 = v135 & 0xFFFFFFFE;
                              }
                              if (!v136) {
                                goto LABEL_271;
                              }
                              v65 = v239;
                              if (v239) {
                                uint64_t v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                              }
                              else {
                                uint64_t v66 = "";
                              }
                              if (!v13)
                              {
                                v71 = "";
                                goto LABEL_146;
                              }
                              goto LABEL_449;
                            }
                          }
                          else
                          {
                            if (v242 == 2)
                            {
                              if (dword_1E9350BF0 >= 2)
                              {
                                LODWORD(cf) = 0;
                                type[0] = OS_LOG_TYPE_DEFAULT;
                                v106 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                                unsigned int v107 = cf;
                                if (os_log_type_enabled(v106, type[0])) {
                                  unsigned int v108 = v107;
                                }
                                else {
                                  unsigned int v108 = v107 & 0xFFFFFFFE;
                                }
                                if (v108)
                                {
                                  if (v43) {
                                    v109 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                                  }
                                  else {
                                    v109 = "";
                                  }
                                  if (v13) {
                                    v199 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                                  }
                                  else {
                                    v199 = "";
                                  }
                                  LODWORD(v246.value) = 136316162;
                                  *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                                  LOWORD(v246.flags) = 2048;
                                  *(void *)((char *)&v246.flags + 2) = v43;
                                  HIWORD(v246.epoch) = 2082;
                                  v247 = v109;
                                  __int16 v248 = 2048;
                                  CFStringRef v249 = v13;
                                  __int16 v250 = 2082;
                                  v251 = v199;
                                  _os_log_send_and_compose_impl();
                                }
                                fig_log_call_emit_and_clean_up_after_send_and_compose();
                              }
                              itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v13, 0);
                              FigPlaybackBossStartPreroll(*(void *)(v14 + 352), *(const __CFDictionary **)(v14 + 512), *(const void **)(v14 + 512), *(float *)(DerivedStorage + 48));
                            }
                            if (dword_1E9350BF0 >= 2)
                            {
                              LODWORD(cf) = 0;
                              type[0] = OS_LOG_TYPE_DEFAULT;
                              v200 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                              unsigned int v201 = cf;
                              if (os_log_type_enabled(v200, type[0])) {
                                unsigned int v202 = v201;
                              }
                              else {
                                unsigned int v202 = v201 & 0xFFFFFFFE;
                              }
                              if (v202)
                              {
                                if (v43) {
                                  v203 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                                }
                                else {
                                  v203 = "";
                                }
                                if (v13) {
                                  v204 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                                }
                                else {
                                  v204 = "";
                                }
                                LODWORD(v246.value) = 136316162;
                                *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                                LOWORD(v246.flags) = 2048;
                                *(void *)((char *)&v246.flags + 2) = v43;
                                HIWORD(v246.epoch) = 2082;
                                v247 = v203;
                                __int16 v248 = 2048;
                                CFStringRef v249 = v13;
                                __int16 v250 = 2082;
                                v251 = v204;
                                _os_log_send_and_compose_impl();
                              }
                              fig_log_call_emit_and_clean_up_after_send_and_compose();
                            }
                            *(unsigned char *)(v14 + 625) = 1;
                          }
                          playerfig_scheduleVideoSlotAndVideoTargetConfigurationSwitchAndPossiblyStartBossForNextItem(v43);
                        }
                        else
                        {
                          if (dword_1E9350BF0 >= 2)
                          {
                            LODWORD(cf) = 0;
                            type[0] = OS_LOG_TYPE_DEFAULT;
                            v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            unsigned int v87 = cf;
                            if (os_log_type_enabled(v86, type[0])) {
                              unsigned int v88 = v87;
                            }
                            else {
                              unsigned int v88 = v87 & 0xFFFFFFFE;
                            }
                            if (v88)
                            {
                              if (v239) {
                                v89 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                              }
                              else {
                                v89 = "";
                              }
                              if (v13) {
                                v94 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                              }
                              else {
                                v94 = "";
                              }
                              LODWORD(v246.value) = 136316162;
                              *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                              LOWORD(v246.flags) = 2048;
                              *(void *)((char *)&v246.flags + 2) = v239;
                              HIWORD(v246.epoch) = 2082;
                              v247 = v89;
                              __int16 v248 = 2048;
                              CFStringRef v249 = v13;
                              __int16 v250 = 2082;
                              v251 = v94;
                              _os_log_send_and_compose_impl();
                            }
                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                            int v43 = v239;
                          }
                          itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v13, 0);
                          __dst[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
                          CMTime v246 = __dst[0];
                          uint64_t v95 = itemfig_matchBossRateToPlayerRateAndPlaybackState((uint64_t)v13, __dst, &v246);
                          if (v95)
                          {
                            uint64_t v22 = v95;
                            if (!dword_1E9350BF0) {
                              goto LABEL_272;
                            }
                            uint64_t v61 = v95;
                            uint64_t v234 = v14;
                            LODWORD(cf) = 0;
                            type[0] = OS_LOG_TYPE_DEFAULT;
                            v96 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            unsigned int v97 = cf;
                            if (os_log_type_enabled(v96, type[0])) {
                              unsigned int v98 = v97;
                            }
                            else {
                              unsigned int v98 = v97 & 0xFFFFFFFE;
                            }
                            if (!v98) {
                              goto LABEL_271;
                            }
                            v65 = v239;
                            if (v239) {
                              uint64_t v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                            }
                            else {
                              uint64_t v66 = "";
                            }
                            if (!v13)
                            {
                              v71 = "";
                              goto LABEL_146;
                            }
LABEL_449:
                            v71 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                            goto LABEL_146;
                          }
                        }
                      }
                      if (*(unsigned char *)(DerivedStorage + 544)
                        && v13 == CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0))
                      {
                        itemfig_bumpBossControlTokenAndMarkBossAsNonIdle((uint64_t)v13, *(_DWORD *)(DerivedStorage + 552));
                        uint64_t started = FigPlaybackBossStartPreroll(*(void *)(v14 + 352), *(const __CFDictionary **)(v14 + 512), *(const void **)(v14 + 512), *(float *)(DerivedStorage + 548));
                        uint64_t v22 = started;
                        *(unsigned char *)(DerivedStorage + 544) = 0;
                        if (started && dword_1E9350BF0)
                        {
                          uint64_t v225 = started;
                          uint64_t v237 = v14;
                          LODWORD(cf) = 0;
                          type[0] = OS_LOG_TYPE_DEFAULT;
                          v226 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          unsigned int v227 = cf;
                          if (os_log_type_enabled(v226, type[0])) {
                            unsigned int v228 = v227;
                          }
                          else {
                            unsigned int v228 = v227 & 0xFFFFFFFE;
                          }
                          if (v228)
                          {
                            if (v239) {
                              v229 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                            }
                            else {
                              v229 = "";
                            }
                            if (v13) {
                              v230 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                            }
                            else {
                              v230 = "";
                            }
                            LODWORD(v246.value) = 136316418;
                            *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                            LOWORD(v246.flags) = 2048;
                            *(void *)((char *)&v246.flags + 2) = v239;
                            HIWORD(v246.epoch) = 2082;
                            v247 = v229;
                            __int16 v248 = 2048;
                            CFStringRef v249 = v13;
                            __int16 v250 = 2082;
                            v251 = v230;
                            __int16 v252 = 1024;
                            LODWORD(v253) = v225;
                            uint64_t v22 = v225;
                            _os_log_send_and_compose_impl();
                          }
                          else
                          {
                            uint64_t v22 = v225;
                          }
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                          int v43 = v239;
                          uint64_t v14 = v237;
                        }
                      }
                      else
                      {
                        uint64_t v22 = 0;
                      }
                      uint64_t v205 = CMBaseObjectGetDerivedStorage();
                      MEMORY[0x19970E290](*(void *)(v205 + 496));
                      if (!*(void *)(v205 + 512)
                        || (CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v205 + 504)),
                            v256.location = 0,
                            v256.length = Count,
                            CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(v205 + 504), v256, *(const void **)(v205 + 512)), FirstIndexOfValue == -1)|| FirstIndexOfValue + 1 >= Count)
                      {
                        MEMORY[0x19970E2B0](*(void *)(v205 + 496));
                      }
                      else
                      {
                        ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v205 + 504), FirstIndexOfValue + 1);
                        CFRetain(ValueAtIndex);
                        MEMORY[0x19970E2B0](*(void *)(v205 + 496));
                        if (ValueAtIndex)
                        {
                          uint64_t v209 = CMBaseObjectGetDerivedStorage();
                          itemfig_makePlaybackPrerequisitePropertiesReady((uint64_t)ValueAtIndex, 0);
                          if (*(unsigned char *)(v209 + 952))
                          {
                            itemfig_lookForLyrics((uint64_t)ValueAtIndex);
                            *(unsigned char *)(v209 + 952) = 0;
                          }
                          CFRelease(ValueAtIndex);
                          if (*(unsigned char *)(DerivedStorage + 813) && dword_1E9350BF0)
                          {
                            uint64_t v210 = v22;
                            CFStringRef v211 = v13;
                            uint64_t v212 = v14;
                            LODWORD(cf) = 0;
                            type[0] = OS_LOG_TYPE_DEFAULT;
                            v213 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            unsigned int v214 = cf;
                            if (os_log_type_enabled(v213, type[0])) {
                              unsigned int v215 = v214;
                            }
                            else {
                              unsigned int v215 = v214 & 0xFFFFFFFE;
                            }
                            if (v215)
                            {
                              if (v239) {
                                v216 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                              }
                              else {
                                v216 = "";
                              }
                              LODWORD(v246.value) = 136315650;
                              *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                              LOWORD(v246.flags) = 2048;
                              *(void *)((char *)&v246.flags + 2) = v239;
                              HIWORD(v246.epoch) = 2082;
                              v247 = v216;
                              _os_log_send_and_compose_impl();
                            }
                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                            uint64_t v14 = v212;
                            CFStringRef v13 = v211;
                            int v43 = v239;
                            uint64_t v22 = v210;
                          }
                          *(unsigned char *)(DerivedStorage + 813) = 0;
                          goto LABEL_272;
                        }
                      }
                      if (!*(unsigned char *)(DerivedStorage + 813))
                      {
                        *(unsigned char *)(DerivedStorage + 813) = 1;
                        if (dword_1E9350BF0)
                        {
                          uint64_t v217 = v22;
                          CFStringRef v218 = v13;
                          uint64_t v219 = v14;
                          LODWORD(cf) = 0;
                          type[0] = OS_LOG_TYPE_DEFAULT;
                          v220 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          unsigned int v221 = cf;
                          if (os_log_type_enabled(v220, type[0])) {
                            unsigned int v222 = v221;
                          }
                          else {
                            unsigned int v222 = v221 & 0xFFFFFFFE;
                          }
                          if (v222)
                          {
                            if (v239) {
                              v223 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                            }
                            else {
                              v223 = "";
                            }
                            LODWORD(v246.value) = 136315650;
                            *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                            LOWORD(v246.flags) = 2048;
                            *(void *)((char *)&v246.flags + 2) = v239;
                            HIWORD(v246.epoch) = 2082;
                            v247 = v223;
                            _os_log_send_and_compose_impl();
                          }
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                          uint64_t v14 = v219;
                          CFStringRef v13 = v218;
                          int v43 = v239;
                          uint64_t v22 = v217;
                        }
                        CMNotificationCenterGetDefaultLocalCenter();
                        FigDispatchAsyncPostNotification();
                      }
                      goto LABEL_272;
                    }
                  }
                  else
                  {
                    uint64_t v22 = 4294954514;
                  }
                  if (dword_1E9350BF0)
                  {
                    uint64_t v61 = v22;
                    uint64_t v234 = v14;
                    LODWORD(cf) = 0;
                    type[0] = OS_LOG_TYPE_DEFAULT;
                    v82 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v83 = cf;
                    if (os_log_type_enabled(v82, type[0])) {
                      unsigned int v84 = v83;
                    }
                    else {
                      unsigned int v84 = v83 & 0xFFFFFFFE;
                    }
                    if (!v84) {
                      goto LABEL_271;
                    }
                    v65 = v239;
                    if (v239) {
                      uint64_t v66 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                    }
                    else {
                      uint64_t v66 = "";
                    }
                    if (!v13)
                    {
                      v71 = "";
                      goto LABEL_146;
                    }
LABEL_212:
                    v71 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
                    goto LABEL_146;
                  }
                  goto LABEL_122;
                }
                if (dword_1E9350BF0 < 2)
                {
                  a2 = 0;
                  goto LABEL_84;
                }
                LODWORD(cf) = 0;
                type[0] = OS_LOG_TYPE_DEFAULT;
                uint64_t v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                unsigned int v50 = cf;
                if (os_log_type_enabled(v49, type[0])) {
                  unsigned int v51 = v50;
                }
                else {
                  unsigned int v51 = v50 & 0xFFFFFFFE;
                }
                if (!v51) {
                  goto LABEL_82;
                }
                if (v239)
                {
                  CFArrayRef v52 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                  if (v13)
                  {
LABEL_76:
                    uint64_t v53 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
LABEL_81:
                    LODWORD(v246.value) = 136316162;
                    *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
                    LOWORD(v246.flags) = 2048;
                    *(void *)((char *)&v246.flags + 2) = v239;
                    HIWORD(v246.epoch) = 2082;
                    v247 = v52;
                    __int16 v248 = 2048;
                    CFStringRef v249 = v13;
                    __int16 v250 = 2082;
                    v251 = v53;
                    int v232 = 52;
                    CFAllocatorContext value = &v246;
                    _os_log_send_and_compose_impl();
LABEL_82:
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    a2 = 0;
LABEL_83:
                    int v43 = v239;
                    goto LABEL_84;
                  }
                }
                else
                {
                  CFArrayRef v52 = "";
                  if (v13) {
                    goto LABEL_76;
                  }
                }
                uint64_t v53 = "";
                goto LABEL_81;
              }
            }
          }
        }
      }
    }
    int v41 = 0;
    int v43 = v239;
    goto LABEL_66;
  }
  uint64_t v12 = FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)&v241);
  if (!v12)
  {
    a3 = v241;
    goto LABEL_16;
  }
  CFStringRef v13 = 0;
  BOOL v238 = 1;
  uint64_t v22 = v12;
LABEL_349:
  FigDeferredTransactionCommit((uint64_t)v241);
  if (v241) {
    CFRelease(v241);
  }
  if (*v9 == 1) {
    kdebug_trace();
  }
  if (dword_1E9350BF0 >= 2)
  {
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v194 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v195 = cf;
    if (os_log_type_enabled(v194, type[0])) {
      unsigned int v196 = v195;
    }
    else {
      unsigned int v196 = v195 & 0xFFFFFFFE;
    }
    if (v196)
    {
      if (v238) {
        v197 = "";
      }
      else {
        v197 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
      }
      LODWORD(v246.value) = 136315906;
      *(CMTimeValue *)((char *)&v246.value + 4) = (CMTimeValue)"playerfig_prepareWorkingItem2";
      LOWORD(v246.flags) = 2048;
      *(void *)((char *)&v246.flags + 2) = v13;
      HIWORD(v246.epoch) = 2082;
      v247 = v197;
      __int16 v248 = 1024;
      LODWORD(v249) = v22;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v22;
}

uint64_t playerasync_reflectSubPlayerNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigCFEqual())
  {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a5, @"AVController_Volume");
    if (!Value) {
      goto LABEL_11;
    }
    CFDictionaryRef v8 = Value;
    uint64_t v10 = *(void *)(DerivedStorage + 80);
    uint64_t v9 = (void *)(DerivedStorage + 80);
    MEMORY[0x19970E910](v10);
    BOOL v11 = (const void *)v9[1];
    v9[1] = v8;
    CFDictionaryRef v12 = v8;
    goto LABEL_7;
  }
  if (!FigCFEqual()) {
    goto LABEL_11;
  }
  uint64_t v13 = *(void *)(DerivedStorage + 80);
  uint64_t v9 = (void *)(DerivedStorage + 80);
  MEMORY[0x19970E910](v13);
  BOOL v11 = (const void *)v9[2];
  v9[2] = a5;
  if (a5)
  {
    CFDictionaryRef v12 = a5;
LABEL_7:
    CFRetain(v12);
  }
  if (v11) {
    CFRelease(v11);
  }
  MEMORY[0x19970E930](*v9);
LABEL_11:
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t FigFormatReaderCreateForStream(uint64_t a1, const __CFAllocator *a2, uint64_t a3, CFTypeRef *a4)
{
  return FigFormatReaderCreateForStreamReturningResults(a1, 0, a2, a3, a4, 0, 0, 0);
}

uint64_t ensureRegistryInitialized()
{
  MEMORY[0x19970EE10](&ensureRegistryInitialized_sInitRegistryOnce, initRegistry);
  if (gFFRRegistry && CFArrayGetCount((CFArrayRef)gFFRRegistry)) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t initRegistry()
{
  gFFRRegistry = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  uint64_t result = FigFormatReaderCreatePropertyListDictionaryFromCString("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>video/mp4</key>\t<array>\t\t<string>audio/mp4</string>\t\t<string>audio/x-m4a</string>\t\t<string>audio/x-m4b</string>\t\t<string>audio/x-m4p</string>\t\t<string>video/x-m4v</string>\t\t<string>audio/x-m4r</string>\t\t<string>video/3gpp</string>\t\t<string>audio/3gpp</string>\t\t<string>video/3gpp2</string>\t\t<string>audio/3gpp2</string>\t\t<string>application/mp4</string>\t</array>\t<key>audio/vnd.wave</key>\t<array>\t\t<string>audio/wav</string>\t\t<string>audio/x-wav</string>\t\t<string>audio/wave</string>\t</array>\t<key>audio/mpeg</key>\t<array>\t\t<string>audio/mpa</string>\t\t<string>audio/x-mpeg</string>\t\t<string>audio/mpg</string>\t\t<string>audio/x-mpg</string>\t\t<string>audio/mpeg3</string>\t\t<string>audio/x-mpeg3</string>\t\t<string>audio/mp3</string>\t\t<string>audio/x-mp3</string>\t</array>\t<key>audio/aac</key>\t<array>\t\t<string>audio/x-aac</string>\t</array>\t<key>video/mp2t</key>\t<array>\t\t<string>video/x-mp2t</string>\t\t<string>video/m2ts</string>\t\t<string>video/x-m2ts</string>\t</array>\t<key>audio/aiff</key>\t<array>\t\t<string>audio/x-aiff</string>\t</array>\t<key>video/vnd.avi</key>\t<array>\t\t<string>video/avi</string>\t\t<string>video/msvideo</string>\t\t<string>video/x-msvideo</string>\t</array></dict></plist>", 0, (const __CFDictionary **)&gFFREquivalentMIMETypes);
  if (result) {
    return result;
  }
  uint64_t result = RegisterStaticFormatReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>MooV</string>\t\t</array>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>video/quicktime</string>\t\t\t<string>video/mp4</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>mov</string>\t\t\t<string>qt</string>\t\t\t<string>qta</string>\t\t\t<string>mqv</string>\t\t\t<string>mp4</string>\t\t\t<string>m4a</string>\t\t\t<string>m4v</string>\t\t\t<string>m4b</string>\t\t\t<string>m4p</string>\t\t\t<string>m4r</string>\t\t\t<string>aax</string>\t\t\t<string>3gp</string>\t\t\t<string>3gpp</string>\t\t\t<string>3g2</string>\t\t\t<string>3gp2</string>\t\t\t<string>aivu</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>com.apple.quicktime-movie</string>\t\t\t<string>com.apple.quicktime-audio</string>\t\t\t<string>public.mpeg-4</string>\t\t\t<string>public.mpeg-4-audio</string>\t\t\t<string>com.apple.m4a-audio</string>\t\t\t<string>com.apple.protected-mpeg-4-audio</string>\t\t\t<string>com.apple.protected-mpeg-4-audio-b</string>\t\t\t<string>com.apple.m4v-video</string>\t\t\t<string>com.apple.mpeg-4-ringtone</string>\t\t\t<string>com.audible.aax-audiobook</string>\t\t\t<string>public.3gpp</string>\t\t\t<string>public.3gpp2</string>\t\t\t<string>com.apple.immersive-video</string>\t\t</array>\t</dict></dict></plist>", (uint64_t)InstantiateMovieFormatReader);
  if (result) {
    return result;
  }
  uint64_t result = RegisterStaticFormatReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>video/vnd.avi</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>avi</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>public.avi</string>\t\t</array>\t</dict></dict></plist>", (uint64_t)InstantiateAVIFormatReader);
  if (result) {
    return result;
  }
  CFPropertyListRef v1 = CFPreferencesCopyValue(@"CombinedAudioFormatReader", @"com.apple.coremedia", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (!v1) {
    goto LABEL_12;
  }
  unsigned __int8 v2 = v1;
  if (!CFEqual(v1, @"AudioFile"))
  {
    int v3 = CFEqual(v2, @"AudioFileStream");
    uint64_t v4 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"htt"
         "p://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<di"
         "ct>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>mp3!</string>\t\t\t<string>MP3!</string>\t\t\t<strin"
         "g>MPG3</string>\t\t\t<string>mpg3</string>\t\t\t<string>Mp3 </string>\t\t\t<string>MP3 </string>\t\t\t<string>a"
         "mr </string>\t\t\t<string>amrw</string>\t\t\t<string>AIFF</string>\t\t\t<string>AIFC</string>\t\t</array>\t\t<k"
         "ey>public.mime-type</key>\t\t<array>\t\t\t<string>audio/mpeg</string>\t\t\t<string>audio/AMR</string>\t\t\t<str"
         "ing>audio/AMR-WB</string>\t\t\t<string>audio/aac</string>\t\t\t<string>audio/vnd.wave</string>\t\t\t<string>aud"
         "io/aiff</string>\t\t\t<string>audio/x-caf</string>\t\t\t<string>audio/basic</string>\t\t\t<string>audio/flac</s"
         "tring>\t\t\t<string>audio/usac</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<st"
         "ring>mp3</string>\t\t\t<string>m1a</string>\t\t\t<string>m2a</string>\t\t\t<string>mpa</string>\t\t\t<string>mp"
         "2</string>\t\t\t<string>mp1</string>\t\t\t<string>aif</string>\t\t\t<string>aiff</string>\t\t\t<string>aifc</st"
         "ring>\t\t\t<string>wav</string>\t\t\t<string>w64</string>\t\t\t<string>aac</string>\t\t\t<string>adts</string>\t"
         "\t\t<string>ac3</string>\t\t\t<string>ec3</string>\t\t\t<string>eac3</string>\t\t\t<string>caf</string>\t\t\t<s"
         "tring>amr</string>\t\t\t<string>awb</string>\t\t\t<string>aa</string>\t\t\t<string>au</string>\t\t\t<string>fla"
         "c</string>\t\t\t<string>latm</string>\t\t\t<string>loas</string>\t\t\t<string>xhe</string>\t\t</array>\t\t<key>"
         "com.apple.uti</key>\t\t<array>\t\t\t<string>public.mp2</string>\t\t\t<string>public.mp3</string>\t\t\t<string>p"
         "ublic.aiff-audio</string>\t\t\t<string>public.aifc-audio</string>\t\t\t<string>com.microsoft.waveform-audio</st"
         "ring>\t\t\t<string>com.sony.wave64</string>\t\t\t<string>public.aac-audio</string>\t\t\t<string>public.ac3-audi"
         "o</string>\t\t\t<string>public.enhanced-ac3-audio</string>\t\t\t<string>com.apple.coreaudio-format</string>\t\t"
         "\t<string>org.3gpp.adaptive-multi-rate-audio</string>\t\t\t<string>com.audible.aa-audiobook</string>\t\t\t<stri"
         "ng>public.au-audio</string>\t\t\t<string>org.xiph.flac</string>\t\t\t<string>public.mp4a-loas</string>\t\t</arr"
         "ay>\t</dict></dict></plist>";
    if (v3)
    {
      uint64_t v5 = InstantiateAudioFileStreamFormatReader;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
    }
    gSelectedAudioFormatReaderInfo = (uint64_t)v4;
    gAudioFormatReaderCreator = (uint64_t)v5;
    CFRelease(v2);
    if (v3) {
      goto LABEL_11;
    }
LABEL_12:
    uint64_t result = RegisterStaticFormatReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>AIFF</string>\t\t\t<string>AIFC</string>\t\t</array>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>audio/vnd.wave</string>\t\t\t<string>audio/aiff</string>\t\t\t<string>audio/x-caf</string>\t\t\t<string>audio/basic</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>aif</string>\t\t\t<string>aiff</string>\t\t\t<string>aifc</string>\t\t\t<string>caf</string>\t\t\t<string>aa</string>\t\t\t<string>wav</string>\t\t\t<string>au</string>\t\t\t<string>w64</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>public.aiff-audio</string>\t\t\t<string>public.aifc-audio</string>\t\t\t<string>com.apple.coreaudio-format</string>\t\t\t<string>com.audible.aa-audiobook</string>\t\t\t<string>com.microsoft.waveform-audio</string>\t\t\t<string>public.au-audio</string>\t\t\t<string>com.sony.wave64</string>\t\t</array>\t</dict></dict></plist>", (uint64_t)InstantiateAudioFileFormatReader);
    if (result) {
      return result;
    }
    size_t v6 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"htt"
         "p://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<di"
         "ct>\t\t<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>mp3!</string>\t\t\t<string>MP3!</string>\t\t\t<strin"
         "g>MPG3</string>\t\t\t<string>mpg3</string>\t\t\t<string>Mp3 </string>\t\t\t<string>MP3 </string>\t\t\t<string>a"
         "mr </string>\t\t\t<string>amrw</string>\t\t</array>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>audi"
         "o/mpeg</string>\t\t\t<string>audio/AMR</string>\t\t\t<string>audio/AMR-WB</string>\t\t\t<string>audio/aac</stri"
         "ng>\t\t\t<string>audio/flac</string>\t\t\t<string>audio/usac</string>\t\t</array>\t\t<key>public.filename-exten"
         "sion</key>\t\t<array>\t\t\t<string>mp3</string>\t\t\t<string>m1a</string>\t\t\t<string>m2a</string>\t\t\t<strin"
         "g>mpa</string>\t\t\t<string>mp2</string>\t\t\t<string>mp1</string>\t\t\t<string>aac</string>\t\t\t<string>adts<"
         "/string>\t\t\t<string>amr</string>\t\t\t<string>awb</string>\t\t\t<string>ac3</string>\t\t\t<string>ec3</string"
         ">\t\t\t<string>eac3</string>\t\t\t<string>flac</string>\t\t\t<string>latm</string>\t\t\t<string>loas</string>\t"
         "\t\t<string>xhe</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>public.mp3</string>\t\t"
         "\t<string>public.mp2</string>\t\t\t<string>public.aac-audio</string>\t\t\t<string>org.3gpp.adaptive-multi-rate-"
         "audio</string>\t\t\t<string>public.ac3-audio</string>\t\t\t<string>public.enhanced-ac3-audio</string>\t\t\t<str"
         "ing>org.xiph.flac</string>\t\t\t<string>public.mp4a-loas</string>\t\t</array>\t</dict></dict></plist>";
    CMTimeEpoch v7 = InstantiateAudioFileStreamFormatReader;
    goto LABEL_14;
  }
  gSelectedAudioFormatReaderInfo = (uint64_t)"<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple "
                                            "Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.d"
                                            "td\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t"
                                            "<key>com.apple.ostype</key>\t\t<array>\t\t\t<string>mp3!</string>\t\t\t<stri"
                                            "ng>MP3!</string>\t\t\t<string>MPG3</string>\t\t\t<string>mpg3</string>\t\t\t"
                                            "<string>Mp3 </string>\t\t\t<string>MP3 </string>\t\t\t<string>amr </string>\t"
                                            "\t\t<string>amrw</string>\t\t\t<string>AIFF</string>\t\t\t<string>AIFC</stri"
                                            "ng>\t\t</array>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>audio"
                                            "/mpeg</string>\t\t\t<string>audio/AMR</string>\t\t\t<string>audio/AMR-WB</st"
                                            "ring>\t\t\t<string>audio/aac</string>\t\t\t<string>audio/vnd.wave</string>\t"
                                            "\t\t<string>audio/aiff</string>\t\t\t<string>audio/x-caf</string>\t\t\t<stri"
                                            "ng>audio/basic</string>\t\t\t<string>audio/flac</string>\t\t\t<string>audio/"
                                            "usac</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>"
                                            "\t\t\t<string>mp3</string>\t\t\t<string>m1a</string>\t\t\t<string>m2a</strin"
                                            "g>\t\t\t<string>mpa</string>\t\t\t<string>mp2</string>\t\t\t<string>mp1</str"
                                            "ing>\t\t\t<string>aif</string>\t\t\t<string>aiff</string>\t\t\t<string>aifc<"
                                            "/string>\t\t\t<string>wav</string>\t\t\t<string>w64</string>\t\t\t<string>aa"
                                            "c</string>\t\t\t<string>adts</string>\t\t\t<string>ac3</string>\t\t\t<string"
                                            ">ec3</string>\t\t\t<string>eac3</string>\t\t\t<string>caf</string>\t\t\t<str"
                                            "ing>amr</string>\t\t\t<string>awb</string>\t\t\t<string>aa</string>\t\t\t<st"
                                            "ring>au</string>\t\t\t<string>flac</string>\t\t\t<string>latm</string>\t\t\t"
                                            "<string>loas</string>\t\t\t<string>xhe</string>\t\t</array>\t\t<key>com.appl"
                                            "e.uti</key>\t\t<array>\t\t\t<string>public.mp2</string>\t\t\t<string>public."
                                            "mp3</string>\t\t\t<string>public.aiff-audio</string>\t\t\t<string>public.aif"
                                            "c-audio</string>\t\t\t<string>com.microsoft.waveform-audio</string>\t\t\t<st"
                                            "ring>com.sony.wave64</string>\t\t\t<string>public.aac-audio</string>\t\t\t<s"
                                            "tring>public.ac3-audio</string>\t\t\t<string>public.enhanced-ac3-audio</stri"
                                            "ng>\t\t\t<string>com.apple.coreaudio-format</string>\t\t\t<string>org.3gpp.a"
                                            "daptive-multi-rate-audio</string>\t\t\t<string>com.audible.aa-audiobook</str"
                                            "ing>\t\t\t<string>public.au-audio</string>\t\t\t<string>org.xiph.flac</strin"
                                            "g>\t\t\t<string>public.mp4a-loas</string>\t\t</array>\t</dict></dict></plist>";
  gAudioFormatReaderCreator = (uint64_t)InstantiateAudioFileFormatReader;
  CFRelease(v2);
LABEL_11:
  size_t v6 = (char *)gSelectedAudioFormatReaderInfo;
  CMTimeEpoch v7 = (uint64_t (*)(const void *, int, uint64_t, CFDictionaryRef, void *, void *))gAudioFormatReaderCreator;
LABEL_14:
  uint64_t result = RegisterStaticFormatReader(v6, (uint64_t)v7);
  if (!result)
  {
    uint64_t result = RegisterStaticFormatReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>text/vtt</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>vtt</string>\t\t\t<string>webvtt</string>\t\t</array>\t\t\t<key>com.apple.uti</key>\t\t\t<array>\t\t\t\t<string>org.w3.webvtt</string>\t\t\t</array>\t</dict></dict></plist>", (uint64_t)InstantiateWebVTTFormatReader);
    if (!result)
    {
      uint64_t result = RegisterStaticFormatReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>text/scc</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>scc</string>\t\t\t<string>sc2</string>\t\t</array>\t\t<key>com.apple.uti</key>\t\t<array>\t\t\t<string>com.scenarist.closed-caption</string>\t\t</array>\t</dict></dict></plist>", (uint64_t)InstantiateSCCFormatReader);
      if (!result)
      {
        return RegisterStaticFormatReader("<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><dict>\t<key>ContainerLabelling</key>\t<dict>\t\t<key>public.mime-type</key>\t\t<array>\t\t\t<string>application/ttml+xml</string>\t\t</array>\t\t<key>public.filename-extension</key>\t\t<array>\t\t\t<string>itt</string>\t\t\t<string>ttml</string>\t\t</array>\t</dict></dict></plist>", (uint64_t)InstantiateTTMLFormatReader);
      }
    }
  }
  return result;
}

uint64_t FigThingFind(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = gAllFigThings;
  if (gAllFigThings)
  {
    while (1)
    {
      uint64_t v5 = *(const void **)a1;
      if (!*(void *)a1
        || (size_t v6 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), @"FigThingType"), CFEqual(v5, v6)))
      {
        CMTimeEpoch v7 = *(const void **)(a1 + 8);
        if (!v7 || (CFDictionaryRef v8 = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), @"FigThingSubtype"), CFEqual(v7, v8)))
        {
          uint64_t v9 = *(const void **)(a1 + 16);
          if (!v9) {
            break;
          }
          CFDictionaryRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v3 + 8), @"FigThingManufacturer");
          if (CFEqual(v9, Value)) {
            break;
          }
        }
      }
      uint64_t v3 = *(void *)(v3 + 40);
      if (!v3) {
        goto LABEL_11;
      }
    }
    *a2 = v3;
  }
LABEL_11:
  if (*a2) {
    return 0;
  }
  else {
    return 4294967294;
  }
}

uint64_t QTMovieFormatReaderCreateFromStream(const void *a1, const __CFAllocator *a2, const __CFDictionary *a3, void *a4)
{
  FigFormatReaderGetClassID();
  unsigned int v8 = CMDerivedObjectCreate();
  if (v8) {
    goto LABEL_34;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    CFDictionaryRef Value = CFDictionaryGetValue(a3, @"Instantiation_AllowIncrementalFragmentParsing");
    BOOL v11 = (const void *)*MEMORY[0x1E4F1CFD0];
    if (Value == (const void *)*MEMORY[0x1E4F1CFD0]) {
      char v12 = 19;
    }
    else {
      char v12 = 0;
    }
    if (Value == (const void *)*MEMORY[0x1E4F1CFD0]) {
      int v13 = 3;
    }
    else {
      int v13 = 0;
    }
    if (CFDictionaryGetValue(a3, @"Instantiation_PrepareForCopying") == v11) {
      v12 |= 0xBu;
    }
    if (CFDictionaryGetValue(a3, @"Instantiation_MovieProxy") == v11) {
      v12 |= 0x20u;
    }
    if (CFDictionaryGetValue(a3, @"ReadEntireMoovAtom") == v11) {
      char v14 = v12 | 0x40;
    }
    else {
      char v14 = v12;
    }
    if (CFDictionaryGetValue(a3, @"Instantiation_EnableAssetAnalysis") == v11) {
      FigAssetAnalysisReporterCreate();
    }
    int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    double v16 = CFDictionaryGetValue(a3, @"Instantiation_IgnoreDisabledAPACAudioTracks");
    char v17 = v14 | 0x80;
    if (v16 != v11) {
      char v17 = v14;
    }
    char v18 = v17 | 2;
  }
  else
  {
    int v13 = 0;
    int Int32IfPresent = 0;
    char v18 = 2;
  }
  unsigned int v8 = MovieInformationCreate((uint64_t)a2, v13, (uint64_t *)(DerivedStorage + 8));
  if (v8) {
    goto LABEL_34;
  }
  *(void *)uint64_t DerivedStorage = CFRetain(a1);
  uint64_t v19 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 80) = v19;
  if (!v19 || (uint64_t v20 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 72) = v20) == 0))
  {
    unsigned int v8 = FigSignalErrorAt();
LABEL_34:
    unsigned int TrackReaderDictionary = v8;
    goto LABEL_30;
  }
  if (Int32IfPresent) {
    MovieInformationSetAudibleGroupID(*(void *)(DerivedStorage + 8), 0);
  }
  unsigned int v8 = MoovParseByteStream(*(void *)(DerivedStorage + 8), v18, *(const void **)DerivedStorage, 0);
  if (v8) {
    goto LABEL_34;
  }
  unsigned int TrackReaderDictionary = CreateTrackReaderDictionary(a2, (uint64_t *)DerivedStorage);
  if (!TrackReaderDictionary) {
    *a4 = 0;
  }
LABEL_30:
  if (MoovIsParsingError(TrackReaderDictionary)) {
    return 4294954448;
  }
  else {
    return TrackReaderDictionary;
  }
}

uint64_t FigFormatReaderGetClassID()
{
  return sFigFormatReaderClassID;
}

uint64_t RegisterFigFormatReader()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t playercentral_SetRate(OpaqueFigPlayer *a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (*(unsigned char *)(DerivedStorage + 8) || !*(void *)(DerivedStorage + 16))
  {
    uint64_t SetRateOptions = FigSignalErrorAt();
LABEL_3:
    uint64_t v6 = SetRateOptions;
    goto LABEL_4;
  }
  uint64_t SetRateOptions = FPSupport_CreateSetRateOptions((const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, (CFMutableDictionaryRef *)&cf);
  if (SetRateOptions) {
    goto LABEL_3;
  }
  CFTypeRef v8 = cf;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  BOOL v11 = *(uint64_t (**)(OpaqueFigPlayer *, CFTypeRef, float))(v10 + 104);
  if (v11)
  {
    uint64_t SetRateOptions = v11(a1, v8, a2);
    goto LABEL_3;
  }
  uint64_t v6 = 4294954514;
LABEL_4:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t playerfig_SetRate(const void *a1, float a2)
{
  return playerfig_setRateForReason(a1, 0, a2);
}

uint64_t playerfig_SetRateWithFade(const void *a1, CMTime *a2, float a3)
{
  CMTime v8 = *a2;
  long long v6 = *MEMORY[0x1E4F1F9F8];
  uint64_t v7 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v4 = v6;
  uint64_t v5 = v7;
  return playerfig_setRateGuts(a1, 0, &v8, (uint64_t)&v6, (uint64_t)&v4, a3);
}

uint64_t playerfig_applySoftwareVolume(uint64_t a1, const void *a2, int a3, float a4, float a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  float v23 = a5;
  float valuePtr = a4;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](DerivedStorage[62]);
  uint64_t v10 = (const void *)FigCFCopyCompactDescription();
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v10) {
    CFRelease(v10);
  }
  if (!DerivedStorage[70] && !DerivedStorage[79])
  {
    if (dword_1E9350BF0)
    {
      uint64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v20 = 0;
    goto LABEL_31;
  }
  if (!CFEqual(a2, @"SoftwareVolume1"))
  {
    if (CFEqual(a2, @"SoftwareVolume2"))
    {
      char v12 = 0;
      int v13 = kFigAudioRenderPipelineProperty_SoftwareVolume2RampDuration;
      goto LABEL_11;
    }
    if (CFEqual(a2, @"SoftwareVolume5"))
    {
      uint64_t v14 = 0;
      char v12 = 1;
      goto LABEL_12;
    }
    uint64_t v20 = FigSignalErrorAt();
LABEL_31:
    MEMORY[0x19970E2B0](DerivedStorage[62]);
    return v20;
  }
  char v12 = 0;
  int v13 = kFigAudioRenderPipelineProperty_SoftwareVolume1RampDuration;
LABEL_11:
  uint64_t v14 = (uint64_t)*v13;
LABEL_12:
  if (a5 < 0.0) {
    float v23 = 0.0;
  }
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v16 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
  CFNumberRef v17 = CFNumberCreate(v15, kCFNumberFloatType, &v23);
  if ((v12 & 1) == 0 && (uint64_t v18 = fp_setPropertyOnAllAudioRenderPipelines(a1, v14, (uint64_t)v17), v18))
  {
    uint64_t v20 = v18;
  }
  else
  {
    uint64_t v19 = fp_setPropertyOnAllAudioRenderPipelines(a1, (uint64_t)a2, (uint64_t)v16);
    uint64_t v20 = v19;
    if (a3 && !v19)
    {
      if (v23 > 0.0) {
        usleep((v23 * 1000.0 * 1000.0));
      }
      uint64_t v20 = 0;
    }
  }
  MEMORY[0x19970E2B0](DerivedStorage[62]);
  if (v17) {
    CFRelease(v17);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v20;
}

uint64_t playerfig_setRateGuts(const void *a1, unsigned int a2, CMTime *a3, uint64_t a4, uint64_t a5, float a6)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v61 = 0;
  float v60 = a6;
  int v59 = 0;
  char v58 = 0;
  int v57 = 0;
  char v56 = 0;
  if (a6 != 0.0)
  {
    LOBYTE(__dst[0].value) = 0;
    FigCFDictionaryGetBooleanIfPresent();
  }
  int v13 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  if ((*(unsigned char *)(a5 + 12) & 1) == 0) {
    FigCFDictionaryGetCMTimeIfPresent();
  }
  if ((*(unsigned char *)(a4 + 12) & 1) == 0) {
    FigCFDictionaryGetCMTimeIfPresent();
  }
  if (*(unsigned char *)DerivedStorage) {
    return 0;
  }
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  float v15 = *(float *)(DerivedStorage + 48);
  if (*(_DWORD *)(DerivedStorage + 52) == 4) {
    float v16 = *(float *)(DerivedStorage + 48);
  }
  else {
    float v16 = 0.0;
  }
  if (!*(unsigned char *)(DerivedStorage + 57) || (*(unsigned char *)(a4 + 12) & 1) != 0 || (*(unsigned char *)(a5 + 12) & 1) != 0) {
    int v13 = 2;
  }
  unsigned int v17 = v13;
  if (v15 != a6) {
    playerfig_clearCoordinatedPlaybackSynchronizationTimebaseForItemsAfterItem((uint64_t)a1, 0);
  }
  CFArrayRef v52 = a3;
  uint64_t v53 = a5;
  int v18 = *(unsigned __int8 *)(DerivedStorage + 56);
  int v19 = *(_DWORD *)(DerivedStorage + 52);
  uint64_t v20 = *(void *)(DerivedStorage + 512);
  BOOL v21 = v20 != 0;
  unsigned int PlaythroughPrediction = itemfig_getPlaythroughPrediction(v20);
  uint64_t NextPlaybackState = playerfig_getNextPlaybackState((uint64_t)a1, a6, a2, v19, v15 != a6, v21, v18, v17, PlaythroughPrediction, &v59, (unsigned char *)(DerivedStorage + 56), (BOOL *)&v61, &v60);
  if (NextPlaybackState)
  {
    uint64_t v14 = NextPlaybackState;
    LODWORD(v54.value) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  }
  else
  {
    uint64_t v14 = playerfig_enterPlaybackState((uint64_t)a1, v59);
    if (v14)
    {
      LODWORD(v54.value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      char v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(float *)(DerivedStorage + 48) = a6;
    uint64_t v25 = CMBaseObjectGetDerivedStorage();
    uint64_t v26 = (CMTime *)v53;
    if (a6 == 0.0) {
      int v27 = *(_DWORD *)(v25 + 68);
    }
    else {
      int v27 = 0;
    }
    if (*(unsigned char *)(a4 + 12) & 1) != 0 || (*(unsigned char *)(v53 + 12)) {
      char v61 = 1;
    }
    int v28 = *(_DWORD *)(v25 + 72);
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
    if (a6 != 0.0 && v15 == 0.0 && v27 < v28)
    {
      if (dword_1E9350BF0)
      {
        LODWORD(v54.value) = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v26 = (CMTime *)v53;
      }
      playerfig_updateEffectiveResourceConservationLevel(a1);
    }
    CFArrayRef ValueAtIndex = *(const __CFArray **)(DerivedStorage + 504);
    if (ValueAtIndex)
    {
      if (CFArrayGetCount(ValueAtIndex) < 1) {
        CFArrayRef ValueAtIndex = 0;
      }
      else {
        CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      }
    }
    if (*MEMORY[0x1E4F1EBA8] == 1)
    {
      if (ValueAtIndex) {
        uint64_t v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
      }
      else {
        uint64_t v37 = "";
      }
      strncpy((char *)__dst, v37, 8uLL);
      if (a1) {
        uint64_t v38 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
      }
      else {
        uint64_t v38 = "";
      }
      strncpy((char *)__dst, v38, 8uLL);
      kdebug_trace();
    }
    if (v61)
    {
      __dst[0] = *v52;
      CMTime v62 = *(CMTime *)a4;
      CMTime v54 = *v26;
      uint64_t v14 = playerfig_setBossRateWithFade(a1, a2, __dst, &v62, &v54, v60, v16);
      if (v14)
      {
        LODWORD(v54.value) = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        char v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int value = v54.value;
        if (os_log_type_enabled(v39, type)) {
          unsigned int v41 = value;
        }
        else {
          unsigned int v41 = value & 0xFFFFFFFE;
        }
        if (v41)
        {
          if (a1) {
            v42 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
          }
          else {
            v42 = "";
          }
          double v43 = v60;
          Description = FigPlayerPlaybackStateGetDescription(*(_DWORD *)(DerivedStorage + 52));
          LODWORD(v62.value) = 136316418;
          *(CMTimeValue *)((char *)&v62.value + 4) = (CMTimeValue)"playerfig_setRateGuts";
          LOWORD(v62.flags) = 2048;
          *(void *)((char *)&v62.flags + 2) = a1;
          HIWORD(v62.epoch) = 2082;
          unsigned int v63 = v42;
          __int16 v64 = 2048;
          double v65 = v43;
          __int16 v66 = 1024;
          int v67 = v14;
          __int16 v68 = 2082;
          uint64_t v69 = Description;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if (v15 != a6)
    {
      NotificationPayloadForProperties = playerfig_createNotificationPayloadForProperties(a1, 0, v29, v30, v31, v32, v33, v34, @"CurrentRate", 0);
      FigCFDictionarySetInt32();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      FigCFDictionarySetValueFromKeyInDict();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (NotificationPayloadForProperties) {
        CFRelease(NotificationPayloadForProperties);
      }
      playerfig_updateStartHostTimeEstimatesOfAllItems((uint64_t)a1);
    }
    if (a6 == 0.0 && v15 != 0.0 && v27 > v28)
    {
      if (dword_1E9350BF0)
      {
        LODWORD(v54.value) = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v47 = v54.value;
        if (os_log_type_enabled(v46, type)) {
          unsigned int v48 = v47;
        }
        else {
          unsigned int v48 = v47 & 0xFFFFFFFE;
        }
        if (v48)
        {
          if (a1) {
            uint64_t v49 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
          }
          else {
            uint64_t v49 = "";
          }
          LODWORD(v62.value) = 136315650;
          *(CMTimeValue *)((char *)&v62.value + 4) = (CMTimeValue)"playerfig_setRateGuts";
          LOWORD(v62.flags) = 2048;
          *(void *)((char *)&v62.flags + 2) = a1;
          HIWORD(v62.epoch) = 2082;
          unsigned int v63 = v49;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playerfig_updateEffectiveResourceConservationLevel(a1);
    }
  }
  return v14;
}

uint64_t FigPlayerGetRate(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, a2);
}

uint64_t playerfig_GetRate(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 48);
  return 0;
}

uint64_t ParseChildAtoms(void *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10 = 0;
  BOOL v11 = (uint64_t (**)(uint64_t, uint64_t))(a4 + 8);
  while (1)
  {
    uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (result) {
      return result;
    }
    if (a3 >= 1)
    {
      int v13 = 0;
      uint64_t v14 = v11;
      float v15 = v11;
      while (*((_DWORD *)v14 - 2))
      {
        ++v13;
        v15 += 2;
        v14 += 2;
        if (a3 == v13) {
          goto LABEL_12;
        }
      }
      int v16 = 1 << v13;
      if ((*((unsigned char *)v14 - 4) & 1) != 0 && (v16 & v10) != 0)
      {
        MovieAtomReportChildAtomParsingFailureMessage(a1, 0, a2, (uint64_t)"Repeated non-repeatable atom");
        return FigSignalErrorAt();
      }
      v10 |= v16;
      uint64_t result = (*v14)(a2, a5);
      if (result == 1937010544)
      {
        uint64_t result = 0;
        goto LABEL_17;
      }
      if (result) {
        return result;
      }
    }
LABEL_12:
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if (result)
    {
      if (result == -12890) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = result;
      }
LABEL_17:
      if (a3 >= 1)
      {
        int v17 = 0;
        int v18 = (unsigned char *)(a4 + 4);
        int v19 = (unsigned char *)(a4 + 4);
        do
        {
          char v20 = *v19;
          v19 += 16;
          if ((v20 & 2) != 0 && ((v10 >> v17) & 1) == 0)
          {
            MovieAtomReportChildAtomParsingFailureMessage(a1, *((unsigned int *)v18 - 1), a2, (uint64_t)"Missing mandatory atom");
            uint64_t result = FigSignalErrorAt();
          }
          ++v17;
          int v18 = v19;
        }
        while (a3 != v17);
      }
      return result;
    }
  }
}

uint64_t GetFileTypeAtom()
{
  CMBlockBufferRef theBuffer = 0;
  uint64_t v5 = 0;
  dataPointerOut = 0;
  uint64_t CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
  if (!CurrentAtomTypeAndDataLength) {
    uint64_t CurrentAtomTypeAndDataLength = FigSignalErrorAt();
  }
  uint64_t v2 = CurrentAtomTypeAndDataLength;
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v2;
}

uint64_t FigReadCacheContainerReadBBuf(uint64_t a1, OpaqueCMBlockBuffer *a2, OpaqueCMBlockBuffer *a3, void *a4, CMBlockBufferRef *a5)
{
  return ReadBBufOrCopyBytes(a1, a2, a3, a4, a5, 0, 0);
}

uint64_t GetMovieAtom(_OWORD *a1, uint64_t a2)
{
  long long v3 = a1[5];
  v7[11] = a1[4];
  v7[12] = v3;
  v7[13] = a1[6];
  long long v4 = a1[1];
  v7[7] = *a1;
  v7[8] = v4;
  long long v5 = a1[3];
  v7[9] = a1[2];
  v7[10] = v5;
  LODWORD(result) = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!result)
  {
    memset(v7, 0, 112);
    *(void *)(a2 + 40) = *(void *)(a2 + 48);
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if (result == -12890
      || !result && (LODWORD(result) = FigAtomStreamGetCurrentAtomTypeAndDataLength(), !result))
    {
      LODWORD(result) = FigAtomStreamInitWithParent();
      if (!result) {
        LODWORD(result) = figMDRW_ParseChildAtoms((uint64_t)v7, 3, (uint64_t)&GetMovieAtom_atomDispatch, a2);
      }
    }
  }
  if (result) {
    return result;
  }
  else {
    return 1937010544;
  }
}

uint64_t playerasync_GetRate(const void *a1, _DWORD *a2)
{
  uint64_t v20 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    long long v5 = DerivedStorage;
    *a2 = 0;
    if (!*DerivedStorage)
    {
      uint64_t v7 = playerasync_createCommand(a1, 10, 0, &v20);
      CMTime v8 = (_DWORD *)v20;
      if (!v7)
      {
        *(void *)(v20 + 32) = a2;
        uint64_t v9 = CMBaseObjectGetDerivedStorage();
        MEMORY[0x19970E910](*(void *)(v9 + 104));
        if (*(unsigned char *)(v9 + 6))
        {
LABEL_8:
          MEMORY[0x19970E930](*(void *)(v9 + 104));
          playerasync_runSynchronousCommand((uint64_t)a1, v8);
          uint64_t v10 = v8[7];
LABEL_9:
          fpa_releaseCommand(v8);
          return v10;
        }
        for (CFIndex i = *(uint64_t **)(v9 + 112); i; CFIndex i = (uint64_t *)*i)
        {
          unsigned int v12 = *((_DWORD *)i + 6);
          BOOL v13 = v12 > 0x11;
          int v14 = (1 << v12) & 0x28A00;
          if (!v13 && v14 != 0) {
            goto LABEL_8;
          }
        }
        MEMORY[0x19970E930](*(void *)(v9 + 104));
        uint64_t v16 = *((void *)v5 + 2);
        if (!v16)
        {
          MEMORY[0x19970E910](*((void *)v5 + 17));
          uint64_t v10 = v5[2];
          MEMORY[0x19970E930](*((void *)v5 + 17));
          goto LABEL_9;
        }
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v17) {
          uint64_t v18 = v17;
        }
        else {
          uint64_t v18 = 0;
        }
        int v19 = *(uint64_t (**)(uint64_t, _DWORD *))(v18 + 48);
        if (!v19)
        {
          uint64_t v10 = 4294954514;
          goto LABEL_9;
        }
        uint64_t v7 = v19(v16, a2);
      }
      uint64_t v10 = v7;
      goto LABEL_9;
    }
  }

  return FigSignalErrorAt();
}

uint64_t CheckAtomVersionIsZero()
{
  return FigAtomStreamGetCurrentAtomVersionAndFlags();
}

uint64_t CheckAtomVersionIsZero_0()
{
  return FigAtomStreamGetCurrentAtomVersionAndFlags();
}

uint64_t DoPostParsingSampleTableCommon(void *a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  if (*(int *)(a2 + 288) < 1)
  {
LABEL_67:
    uint64_t v37 = *(void *)(a2 + 728);
    if (v37 && *(void *)(v37 + 56)) {
      AssureTrackFragmentFixups(a2);
    }
    if (MovieSampleTableHaveCompositionShiftLeastInfo(a2))
    {
      *(_DWORD *)(a2 + 112) = MovieSampleTableGetMaxDecodeToDisplay(a2);
      *(_DWORD *)(a2 + 116) = MovieSampleTableGetMinDecodeToDisplay(a2);
    }
    else if (MovieSampleTableHaveCompositionOffsetTable(a2))
    {
      int v41 = MovieSampleTableNumCompositionOffsetEntries(a2);
      if (v41 >= 1)
      {
        int v42 = v41;
        for (int i = 0; i != v42; ++i)
        {
          int CompositionOffsetDisplayOffset = MovieSampleTableGetCompositionOffsetDisplayOffset(a2, i);
          if (*(_DWORD *)(a2 + 112) < CompositionOffsetDisplayOffset) {
            *(_DWORD *)(a2 + 112) = CompositionOffsetDisplayOffset;
          }
          if (*(_DWORD *)(a2 + 116) > CompositionOffsetDisplayOffset) {
            *(_DWORD *)(a2 + 116) = CompositionOffsetDisplayOffset;
          }
        }
      }
    }
    uint64_t v38 = *(void *)(a2 + 728);
    if (v38 && *(void *)(v38 + 56) && *(unsigned char *)(v38 + 13))
    {
      int v39 = *(_DWORD *)(v38 + 32);
      if (*(_DWORD *)(a2 + 112) < v39) {
        *(_DWORD *)(a2 + 112) = v39;
      }
      int v40 = *(_DWORD *)(v38 + 36);
      if (*(_DWORD *)(a2 + 116) > v40)
      {
        uint64_t result = 0;
        *(_DWORD *)(a2 + 116) = v40;
        return result;
      }
    }
    return 0;
  }
  if (!*(void *)(a2 + 56))
  {
    uint64_t v45 = "'stsd' atom missing";
LABEL_97:
    _MovieAtomReportParsingMessage(a1, a2, 0, (uint64_t)v45, 2);
    return FigSignalErrorAt();
  }
  if (!MovieSampleTableHaveTimeToSampleTable(a2))
  {
    uint64_t v45 = "'stts' atom missing";
    goto LABEL_97;
  }
  if ((int)MovieSampleTableNumTimeToSampleEntries(a2) <= 0)
  {
    uint64_t v45 = "'stts' atom has zero entries";
    goto LABEL_97;
  }
  if (!MovieSampleTableHaveSampleToChunkTable(a2))
  {
    uint64_t v45 = "'stsc' atom missing";
    goto LABEL_97;
  }
  if ((int)MovieSampleTableNumSampleToChunkEntries(a2) <= 0)
  {
    uint64_t v45 = "'stsc' atom has zero entries";
    goto LABEL_97;
  }
  if (!MovieSampleTableHaveChunkOffsetTable(a2))
  {
    uint64_t v45 = "'stco'/'co64' atom missing";
    goto LABEL_97;
  }
  if ((int)MovieSampleTableNumChunkTableEntries(a2) <= 0)
  {
    uint64_t v45 = "Chunk offset atom has zero entries";
    goto LABEL_97;
  }
  if (MovieSampleTableHaveTimeToSampleTable(a2) && (int v4 = MovieSampleTableNumTimeToSampleEntries(a2), v4 >= 1))
  {
    int v5 = v4;
    int v6 = 0;
    for (int j = 0; j != v5; ++j)
      v6 += MovieSampleTableGetSampleCountAtIndex(a2, j);
  }
  else
  {
    int v6 = 0;
  }
  int v8 = *(_DWORD *)(a2 + 288);
  if (v6 == v8)
  {
LABEL_39:
    char v26 = 0;
    char v25 = 1;
    goto LABEL_40;
  }
  if (v6 > v8)
  {
    uint64_t v9 = "Inconsistent sample count - 'stsz' is under-reporting";
    goto LABEL_38;
  }
  if (!MovieSampleTableHaveSampleToChunkTable(a2)
    || (int v10 = MovieSampleTableNumSampleToChunkEntries(a2), v11 = v10 - 1, v10 < 1))
  {
LABEL_33:
    int v17 = 0;
    goto LABEL_34;
  }
  if (v10 != 1)
  {
    int v12 = v10;
    int v13 = 0;
    int v14 = 1;
    while (1)
    {
      int SampleToChunkFirstChunk = MovieSampleTableGetSampleToChunkFirstChunk(a2, v14);
      int v16 = MovieSampleTableGetSampleToChunkFirstChunk(a2, v14 - 1);
      int v17 = 0;
      if (SampleToChunkFirstChunk < 0) {
        goto LABEL_34;
      }
      if (v16 < 0) {
        goto LABEL_34;
      }
      BOOL v18 = __OFSUB__(SampleToChunkFirstChunk, v16);
      int v19 = SampleToChunkFirstChunk - v16;
      if (v19 < 0 != v18) {
        goto LABEL_34;
      }
      v13 += MovieSampleTableGetSampleToChunkSamplesPerChunk(a2, v14++ - 1) * v19;
      if (v12 == v14) {
        goto LABEL_28;
      }
    }
  }
  int v11 = 0;
  int v13 = 0;
LABEL_28:
  int v20 = MovieSampleTableNumChunkTableEntries(a2);
  int v21 = MovieSampleTableGetSampleToChunkFirstChunk(a2, v11);
  int v17 = 0;
  if ((v20 & 0x80000000) == 0 && (v21 & 0x80000000) == 0)
  {
    BOOL v18 = __OFSUB__(v20, v21);
    int v22 = v20 - v21;
    if (v22 < 0 == v18)
    {
      if (v22 >= 0)
      {
        int SampleToChunkSamplesPerChunk = MovieSampleTableGetSampleToChunkSamplesPerChunk(a2, v11);
        int v17 = SampleToChunkSamplesPerChunk + SampleToChunkSamplesPerChunk * v22 + v13;
        goto LABEL_34;
      }
      goto LABEL_33;
    }
  }
LABEL_34:
  if (v17 != v6)
  {
    uint64_t v9 = "Inconsistent sample count - 'stts' / 'stco' / 'stsz'";
LABEL_38:
    _MovieAtomReportParsingMessage(a1, a2, 0, (uint64_t)v9, 2);
    uint64_t result = FigSignalErrorAt();
    if (result) {
      return result;
    }
    goto LABEL_39;
  }
  _MovieAtomReportParsingMessage(a1, a2, 0, (uint64_t)"Overriding 'stsz' sample count with calculated value from 'stts'/'stco'", 2);
  uint64_t result = (uint64_t)MovieTrackReviseParsedSampleCount(a2, v6);
  if (result) {
    return result;
  }
  char v25 = 0;
  char v26 = 1;
LABEL_40:
  int v27 = *(_DWORD *)(a2 + 288);
  if (MovieSampleTableHaveSampleDependencyTable(a2))
  {
    if (!*(unsigned char *)(a2 + 736) && (int)MovieSampleTableNumSampleDependencyEntries(a2) < v27) {
      _MovieAtomReportParsingMessage(a1, a2, 0, (uint64_t)"Number of sample dependency entries too small vs. track sample count", 2);
    }
    if ((int)MovieSampleTableNumSampleDependencyEntries(a2) > v27)
    {
      uint64_t result = MovieTrackReviseSampleDependencyTable(a2, v27);
      if (result) {
        return result;
      }
    }
  }
  signed int v28 = *(_DWORD *)(a2 + 288);
  if (MovieSampleTableHaveSyncSampleTable(a2))
  {
    if (v25)
    {
      int v29 = MovieSampleTableNumSyncSampleEntries(a2);
      if (v29 >= 1)
      {
        int v30 = v29;
        int v31 = 0;
        while (1)
        {
          int SyncSampleNumber = MovieSampleTableGetSyncSampleNumber(a2, v31);
          if (SyncSampleNumber < 1 || SyncSampleNumber > v28) {
            break;
          }
          if (v30 == ++v31) {
            goto LABEL_57;
          }
        }
        _MovieAtomReportParsingMessage(a1, a2, 0, (uint64_t)"Sync sample table has an entry which is out of the range", 2);
        uint64_t result = FigSignalErrorAt();
        if (result) {
          return result;
        }
      }
    }
    else
    {
      uint64_t result = MovieTrackReviseSyncSampleTable(a2, v28);
      if (result) {
        return result;
      }
    }
  }
LABEL_57:
  signed int v33 = *(_DWORD *)(a2 + 288);
  if (MovieSampleTableHavePartialSyncSampleTable(a2)) {
    char v34 = v26 ^ 1;
  }
  else {
    char v34 = 1;
  }
  if ((v34 & 1) != 0 || (uint64_t result = MovieTrackRevisePartialSyncSampleTable(a2, v33), !result))
  {
    int v35 = *(_DWORD *)(a2 + 288);
    char v36 = MovieSampleTableHaveCompositionOffsetTable(a2) ? v26 ^ 1 : 1;
    if (v36) {
      goto LABEL_67;
    }
    uint64_t result = MovieTrackReviseCompositionOffsetTable(a2, v35);
    if (!result) {
      goto LABEL_67;
    }
  }
  return result;
}

uint64_t ConvertSampleDescriptionsToFormatDescriptions(void *a1, CFArrayRef *cf)
{
  CFAllocatorRef v4 = CFGetAllocator(cf);
  CFArrayRef v5 = cf[5];
  if (v5) {
    CFIndex Count = CFArrayGetCount(v5);
  }
  else {
    CFIndex Count = 0;
  }
  if (!cf[7])
  {
    int v21 = "Track has no sample descriptions";
    goto LABEL_58;
  }
  signed int v7 = 1986618469;
  int v8 = *((_DWORD *)cf + 6);
  if (v8 <= 1986618468)
  {
    if (v8 == 1885954932 || v8 == 1635088502) {
      goto LABEL_12;
    }
    if (v8) {
      goto LABEL_11;
    }
    int v21 = "MediaType is zero";
LABEL_58:
    MovieInformationReportParsingFailureMessage(a1, (uint64_t)cf, (uint64_t)v21, 2);
LABEL_59:
    uint64_t v16 = FigSignalErrorAt();
LABEL_60:
    MovieInformationReportParsingFailureMessage(a1, (uint64_t)cf, (uint64_t)"Error when generating format descriptions", 7);
    ReleaseSampleDescriptionInfoArray((uint64_t)cf);
    return v16;
  }
  if (v8 != 1986618469) {
LABEL_11:
  }
    signed int v7 = *((_DWORD *)cf + 6);
LABEL_12:
  if (Count >= 1)
  {
    CFIndex v9 = 0;
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      CFArrayRef ValueAtIndex = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(cf[5], v9);
      CMMetadataFormatDescriptionRef formatDescriptionOut = 0;
      if (v7 > 1935893869)
      {
        if (v7 <= 1952807027)
        {
          if (v7 == 1935893870)
          {
            uint64_t v17 = CMSceneFormatDescriptionCreateFromBigEndianSceneDescriptionBlockBuffer();
            goto LABEL_44;
          }
          if (v7 == 1936684398)
          {
            uint64_t v17 = FigAudioFormatDescriptionCreateFromBigEndianSoundDescriptionBlockBufferWithReporter();
            goto LABEL_44;
          }
        }
        else
        {
          switch(v7)
          {
            case 1952807028:
              CFAllocatorRef v12 = v4;
              int v13 = ValueAtIndex;
              CMMediaType v14 = 1952807028;
              goto LABEL_34;
            case 1953325924:
              uint64_t v17 = CMTimeCodeFormatDescriptionCreateFromBigEndianTimeCodeDescriptionBlockBuffer(v4, ValueAtIndex, 0, &formatDescriptionOut);
              goto LABEL_44;
            case 1986618469:
              CFStringGetSystemEncoding();
              uint64_t v17 = FigVideoFormatDescriptionCreateFromBigEndianImageDescriptionBlockBufferWithReporter();
LABEL_44:
              uint64_t v16 = v17;
              goto LABEL_45;
          }
        }
      }
      else if (v7 <= 1835365472)
      {
        if (v7 == 1668047728)
        {
          uint64_t v17 = CMClosedCaptionFormatDescriptionCreateFromBigEndianClosedCaptionDescriptionBlockBuffer(v4, ValueAtIndex, 0, &formatDescriptionOut);
          goto LABEL_44;
        }
        if (v7 == 1751216244)
        {
          uint64_t v17 = CMHapticFormatDescriptionCreateFromBigEndianHapticDescriptionBlockBuffer();
          goto LABEL_44;
        }
      }
      else
      {
        switch(v7)
        {
          case 1835365473:
            uint64_t v17 = CMMetadataFormatDescriptionCreateFromBigEndianMetadataDescriptionBlockBuffer(v4, ValueAtIndex, 0, &formatDescriptionOut);
            goto LABEL_44;
          case 1885564004:
            uint64_t v17 = CMPointCloudFormatDescriptionCreateFromBigEndianPointCloudDescriptionBlockBuffer();
            goto LABEL_44;
          case 1935832172:
            CFAllocatorRef v12 = v4;
            int v13 = ValueAtIndex;
            CMMediaType v14 = 1935832172;
LABEL_34:
            uint64_t v17 = CMTextFormatDescriptionCreateFromBigEndianTextDescriptionBlockBuffer(v12, v13, 0, v14, &formatDescriptionOut);
            goto LABEL_44;
        }
      }
      unsigned int destination = 0;
      values = 0;
      CFDictionaryRef v15 = 0;
      if (!FigCreateCFDataWithBlockBufferNoCopy())
      {
        CFDictionaryRef v15 = CFDictionaryCreate(v4, MEMORY[0x1E4F1EE58], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (values) {
          CFRelease(values);
        }
      }
      CMBlockBufferCopyDataBytes(ValueAtIndex, 4uLL, 4uLL, &destination);
      uint64_t v16 = CMFormatDescriptionCreate(v4, v7, bswap32(destination), v15, &formatDescriptionOut);
      if (v15) {
        CFRelease(v15);
      }
LABEL_45:
      if (v16) {
        goto LABEL_60;
      }
      Mutable = cf[6];
      if (!Mutable)
      {
        Mutable = CFArrayCreateMutable(v10, 0, MEMORY[0x1E4F1D510]);
        cf[6] = Mutable;
        if (!Mutable) {
          goto LABEL_59;
        }
      }
      CFArrayAppendValue(Mutable, formatDescriptionOut);
      if (formatDescriptionOut) {
        CFRelease(formatDescriptionOut);
      }
      ++v9;
    }
    while (Count != v9);
  }
  CFArrayRef v19 = cf[5];
  if (!v19) {
    return 0;
  }
  CFRelease(v19);
  uint64_t v16 = 0;
  cf[5] = 0;
  return v16;
}

uint64_t FigTrackReaderGetClassID()
{
  return sFigTrackReaderClassID;
}

uint64_t RegisterFigTrackReaderBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t GetMovieUserDataAtom(_OWORD *a1, uint64_t a2)
{
  long long v3 = a1[5];
  v7[11] = a1[4];
  v7[12] = v3;
  v7[13] = a1[6];
  long long v4 = a1[1];
  v7[7] = *a1;
  v7[8] = v4;
  long long v5 = a1[3];
  v7[9] = a1[2];
  v7[10] = v5;
  uint64_t result = FigAtomStreamGetCurrentAtomGlobalOffset();
  if (!result)
  {
    memset(v7, 0, 112);
    uint64_t result = FigAtomStreamAdvanceToNextAtom();
    if (result == -12890
      || !result && (uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength(), !result))
    {
      LODWORD(result) = FigAtomStreamInitWithParent();
      if (!result) {
        LODWORD(result) = figMDRW_ParseChildAtoms((uint64_t)v7, 1, (uint64_t)&GetMovieUserDataAtom_atomDispatch, a2);
      }
      if (result == -12893) {
        return 0;
      }
      else {
        return result;
      }
    }
  }
  return result;
}

uint64_t GetiTunesMetaDataAtom()
{
  return FigAtomStreamGetCurrentAtomGlobalOffset();
}

uint64_t FigCRABSGetClassID()
{
  return sFigCRABSClassID;
}

uint64_t RegisterFigCRABS()
{
  CMByteStreamGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FPSupport_BuildAlternateTrackGroups(uint64_t a1, __CFDictionary **a2)
{
  CFTypeRef v57 = 0;
  CFArrayRef theArray = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v9 = FigSignalErrorAt();
LABEL_5:
    CFAllocatorRef v10 = 0;
    goto LABEL_76;
  }
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  int v11 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFArrayRef *))(v8 + 48);
  if (!v11) {
    goto LABEL_65;
  }
  v11(FigBaseObject, @"AlternateGroupArray", v4, &theArray);
  if (!theArray) {
    goto LABEL_65;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    goto LABEL_65;
  }
  CFIndex v13 = Count;
  CFArrayRef v52 = a2;
  CFAllocatorRef allocator = v4;
  CFIndex v14 = 0;
  uint64_t v51 = 0;
  int v54 = 0;
  CFIndex v55 = Count;
  while (1)
  {
    CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(theArray, v14);
    if (ValueAtIndex)
    {
      CFArrayRef v16 = ValueAtIndex;
      CFTypeID TypeID = CFArrayGetTypeID();
      if (TypeID == CFGetTypeID(v16))
      {
        CFIndex v18 = CFArrayGetCount(v16);
        if (v18 >= 1) {
          break;
        }
      }
    }
LABEL_63:
    if (++v14 == v13)
    {
      a2 = v52;
      CFAllocatorRef v4 = allocator;
      if (!v54)
      {
LABEL_65:
        LODWORD(cf) = 0;
        uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v43) {
          uint64_t v44 = v43;
        }
        else {
          uint64_t v44 = 0;
        }
        uint64_t v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, void, void))(v44 + 64);
        if (!v45 || v45(a1, 1, 1935832172, 0, 0))
        {
          uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v47 = v46 ? v46 : 0;
          unsigned int v48 = *(unsigned int (**)(uint64_t, void, uint64_t, CFTypeRef *, CFTypeRef *))(v47 + 64);
          if (v48)
          {
            if (!v48(a1, 0, 1935832172, &v57, &cf))
            {
              CFAllocatorRef v10 = CFArrayCreateMutable(v4, 1, MEMORY[0x1E4F1D510]);
              if (!v10) {
                goto LABEL_90;
              }
              uint64_t v9 = fpSupport_addTrackInfoToArray((uint64_t)v57, (int)cf, 1935832172, v10);
              if (v9) {
                goto LABEL_76;
              }
              CFDictionarySetValue(Mutable, @"Subtitle", v10);
              CFRelease(v10);
              if (v57)
              {
                CFRelease(v57);
                CFTypeRef v57 = 0;
              }
            }
          }
        }
      }
      uint64_t v9 = 0;
      CFAllocatorRef v10 = 0;
      *a2 = Mutable;
      Mutable = 0;
      goto LABEL_76;
    }
  }
  CFIndex v19 = v18;
  CFIndex v20 = 0;
  uint64_t v21 = 0;
  int v22 = 0;
  do
  {
    float v23 = CFArrayGetValueAtIndex(v16, v20);
    if (!v23) {
      goto LABEL_34;
    }
    char v24 = v23;
    CFTypeID v25 = CFNumberGetTypeID();
    if (v25 != CFGetTypeID(v24)) {
      goto LABEL_34;
    }
    uint64_t valuePtr = 0;
    CFNumberGetValue((CFNumberRef)v24, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    uint64_t v26 = HIDWORD(valuePtr);
    CFTypeRef cf = 0;
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    int v29 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, uint64_t *))(v28 + 56);
    if (!v29)
    {
      uint64_t v9 = 4294954514;
      goto LABEL_5;
    }
    uint64_t v9 = v29(a1, v26, &cf, &valuePtr);
    CFTypeRef v30 = cf;
    if (v9)
    {
      int isTrackEnabled = 0;
      if (!cf) {
        goto LABEL_24;
      }
LABEL_23:
      CFRelease(v30);
      goto LABEL_24;
    }
    int isTrackEnabled = fpSupport_isTrackEnabled((uint64_t)cf);
    CFTypeRef v30 = cf;
    if (cf) {
      goto LABEL_23;
    }
LABEL_24:
    if (v9) {
      goto LABEL_5;
    }
    if (v22)
    {
      if (v22 != valuePtr) {
        goto LABEL_62;
      }
      if (!isTrackEnabled) {
        goto LABEL_34;
      }
    }
    else
    {
      int v22 = valuePtr;
      if (!isTrackEnabled) {
        goto LABEL_34;
      }
    }
    if (v21 > 0) {
      goto LABEL_62;
    }
    ++v21;
LABEL_34:
    ++v20;
  }
  while (v19 != v20);
  if (v21 < 1) {
    goto LABEL_62;
  }
  if (v22 == 1835365473)
  {
    if (!v51)
    {
      LODWORD(v51) = 1;
      int v32 = (void **)&kFigPlaybackItemAlternateType_Metadata;
      goto LABEL_48;
    }
    LODWORD(v51) = 1;
    goto LABEL_62;
  }
  if (v22 == 1935832172)
  {
    if (!v54)
    {
      int v54 = 1;
      int v32 = (void **)&kFigPlaybackItemAlternateType_Subtitle;
      goto LABEL_48;
    }
    int v54 = 1;
LABEL_62:
    CFIndex v13 = v55;
    goto LABEL_63;
  }
  if (v22 != 1936684398) {
    goto LABEL_62;
  }
  if (HIDWORD(v51))
  {
    HIDWORD(v51) = 1;
    goto LABEL_62;
  }
  HIDWORD(v51) = 1;
  int v32 = (void **)&kFigPlaybackItemAlternateType_Audio;
LABEL_48:
  signed int v33 = *v32;
  CFAllocatorRef v10 = CFArrayCreateMutable(allocator, v19, MEMORY[0x1E4F1D510]);
  if (v10)
  {
    key = v33;
    CFIndex v34 = 0;
    while (1)
    {
      CFNumberRef v35 = (const __CFNumber *)CFArrayGetValueAtIndex(v16, v34);
      if (v35)
      {
        CFNumberRef v36 = v35;
        CFTypeID v37 = CFNumberGetTypeID();
        if (v37 == CFGetTypeID(v36))
        {
          LODWORD(cf) = 0;
          CFNumberGetValue(v36, kCFNumberSInt32Type, &cf);
          uint64_t v38 = cf;
          uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v39) {
            uint64_t v40 = v39;
          }
          else {
            uint64_t v40 = 0;
          }
          int v41 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v40 + 56);
          if (!v41)
          {
            uint64_t v9 = 4294954514;
            goto LABEL_76;
          }
          uint64_t v42 = v41(a1, v38, &v57, 0);
          if (v42) {
            goto LABEL_91;
          }
          uint64_t v42 = fpSupport_addTrackInfoToArray((uint64_t)v57, (int)cf, v22, v10);
          if (v42) {
            goto LABEL_91;
          }
          if (v57)
          {
            CFRelease(v57);
            CFTypeRef v57 = 0;
          }
        }
      }
      if (v19 == ++v34)
      {
        CFDictionarySetValue(Mutable, key, v10);
        CFRelease(v10);
        goto LABEL_62;
      }
    }
  }
LABEL_90:
  uint64_t v42 = FigSignalErrorAt();
LABEL_91:
  uint64_t v9 = v42;
LABEL_76:
  if (v57) {
    CFRelease(v57);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v9;
}

uint64_t FPSupport_GetDefaultTrackIDForMediaType(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7 = 0;
  CFTypeRef v29 = 0;
  CFTypeRef cf = 0;
  int v28 = 0;
  char v27 = 0;
  int v26 = 0;
  while (1)
  {
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    CFAllocatorRef v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *))(v9 + 64);
    if (!v10 || v10(a1, v7, a2, &cf, &v26))
    {
      CFTypeRef v15 = v29;
      goto LABEL_31;
    }
    if (fpSupport_isTrackEnabled((uint64_t)cf)) {
      break;
    }
LABEL_27:
    if (cf)
    {
      CFRelease(cf);
      CFTypeRef cf = 0;
    }
    ++v7;
  }
  switch(a2)
  {
    case 0x736F756E:
      CFTypeRef v11 = cf;
      CMAudioFormatDescriptionRef desc = 0;
      fpSupport_copyFormatDescription((uint64_t)cf, &desc);
      CMAudioFormatDescriptionRef v12 = desc;
      if (!desc) {
        goto LABEL_27;
      }
      if (!CMAudioFormatDescriptionGetRichestDecodableFormat(desc)) {
        goto LABEL_26;
      }
      goto LABEL_23;
    case 0x74657874:
      CFTypeRef v11 = cf;
      CMAudioFormatDescriptionRef desc = 0;
      fpSupport_copyFormatDescription((uint64_t)cf, &desc);
      CMAudioFormatDescriptionRef v12 = desc;
      if (!desc) {
        goto LABEL_27;
      }
      signed int MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
      if (MediaSubType <= 1937142899)
      {
        if (MediaSubType == 1634301044) {
          goto LABEL_23;
        }
        int v14 = 1937010800;
      }
      else
      {
        if (MediaSubType == 1937142900 || MediaSubType == 2021028980) {
          goto LABEL_23;
        }
        int v14 = 2004251764;
      }
      if (MediaSubType != v14)
      {
LABEL_26:
        CFRelease(v12);
        goto LABEL_27;
      }
LABEL_23:
      if (!v29)
      {
        CFTypeRef v29 = v11;
        if (v11) {
          CFRetain(v11);
        }
      }
      goto LABEL_26;
    case 0x76696465:
      fpSupport_pickPreferredVideoTrack(cf, &v29, &v28, &v27, a4);
      goto LABEL_27;
  }
  char v24 = v29;
  CFTypeRef v15 = cf;
  CFTypeRef v29 = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v24) {
    CFRelease(v24);
  }
LABEL_31:
  if (a2 == 1986618469 && !v15)
  {
    for (uint64_t i = 0; ; ++i)
    {
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v18 = v17 ? v17 : 0;
      CFIndex v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *, int *))(v18 + 64);
      if (!v19 || v19(a1, i, 1635088502, &cf, &v26)) {
        break;
      }
      if (fpSupport_isTrackEnabled((uint64_t)cf)) {
        fpSupport_pickPreferredVideoTrack(cf, &v29, &v28, &v27, a4);
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
    }
    CFTypeRef v15 = v29;
  }
  if (v15)
  {
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    int v22 = *(void (**)(CFTypeRef, uint64_t, void))(v21 + 8);
    if (v22) {
      v22(v15, a3, 0);
    }
    CFRelease(v15);
  }
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

uint64_t fpSupport_isTrackEnabled(uint64_t a1)
{
  CFTypeRef cf1 = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFAllocatorRef v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (!v4) {
    return 1;
  }
  v4(FigBaseObject, @"TrackEnabled", *MEMORY[0x1E4F1CF80], &cf1);
  if (!cf1) {
    return 1;
  }
  uint64_t v5 = CFEqual(cf1, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
  CFRelease(cf1);
  return v5;
}

uint64_t FPSupport_ChooseTrackIDsUsingPreferredLanguageLists(const void *a1, const __CFDictionary *a2, const void *a3, _DWORD *a4)
{
  if (a3 && a4)
  {
    if (!a1) {
      return 0;
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(a1)) {
      return 0;
    }
    CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, a3);
    CFAllocatorRef v10 = Value;
    if (a2)
    {
      CFArrayRef v11 = (const __CFArray *)CFDictionaryGetValue(a2, a3);
      if (!v10) {
        return 0;
      }
    }
    else
    {
      CFArrayRef v11 = 0;
      if (!Value) {
        return 0;
      }
    }
    CFTypeID v12 = CFArrayGetTypeID();
    CFTypeID v13 = CFGetTypeID(v10);
    if (v11)
    {
      if (v12 == v13)
      {
        CFTypeID v14 = CFArrayGetTypeID();
        if (v14 == CFGetTypeID(v11))
        {
          CFIndex Count = CFArrayGetCount(v11);
          if (Count >= 1)
          {
            CFIndex v15 = 0;
            CFTypeRef cf2 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
            while (1)
            {
              CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v15);
              if (ValueAtIndex)
              {
                uint64_t v17 = ValueAtIndex;
                CFTypeID v18 = CFStringGetTypeID();
                if (v18 == CFGetTypeID(v17))
                {
                  CFIndex v19 = CFArrayGetCount((CFArrayRef)v10);
                  if (v19 >= 1) {
                    break;
                  }
                }
              }
LABEL_27:
              if (++v15 == Count) {
                return 0;
              }
            }
            CFIndex v20 = v19;
            CFIndex v21 = 0;
            while (1)
            {
              CFDictionaryRef v22 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v10, v21);
              if (v22)
              {
                CFDictionaryRef v23 = v22;
                CFTypeID v24 = CFDictionaryGetTypeID();
                if (v24 == CFGetTypeID(v23))
                {
                  CFTypeID v25 = CFDictionaryGetValue(v23, @"ExcludeFromAutoSelection");
                  if (!v25 || !CFEqual(v25, cf2))
                  {
                    int v26 = CFDictionaryGetValue(v23, @"Language");
                    if (v26)
                    {
                      if (CFEqual(v26, v17))
                      {
                        char v27 = CFDictionaryGetValue(v23, @"TrackID");
                        if (v27)
                        {
                          int v28 = v27;
                          CFTypeID v29 = CFNumberGetTypeID();
                          if (v29 == CFGetTypeID(v28)) {
                            break;
                          }
                        }
                      }
                    }
                  }
                }
              }
              if (v20 == ++v21) {
                goto LABEL_27;
              }
            }
            int valuePtr = 0;
            CFNumberGetValue((CFNumberRef)v28, kCFNumberSInt32Type, &valuePtr);
            *a4 = valuePtr;
          }
        }
      }
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t fcSupport_GetListOfChapterTrackIDsForMediaType(int a1, int a2, uint64_t a3, uint64_t *a4, int **a5, unsigned int *a6)
{
  CFDictionaryRef theDict = 0;
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(a3);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  unsigned int value = 0;
  CFIndex v15 = *(uint64_t (**)(uint64_t, __CFString *, void, CFDictionaryRef *))(v14 + 48);
  if (!v15)
  {
    unsigned int v19 = 0;
    CFIndex v20 = 0;
    uint64_t v16 = 4294954514;
    goto LABEL_14;
  }
  uint64_t v16 = v15(FigBaseObject, @"TrackReferenceDictionary", *MEMORY[0x1E4F1CF80], &theDict);
  if (v16) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = theDict == 0;
  }
  if (v17)
  {
LABEL_12:
    unsigned int v19 = 0;
    CFIndex v20 = 0;
LABEL_14:
    free(v20);
    uint64_t v21 = 0;
    CFIndex v20 = 0;
    goto LABEL_15;
  }
  if (!CFDictionaryGetValueIfPresent(theDict, @"chap", (const void **)&value)
    || (CFIndex Count = CFArrayGetCount((CFArrayRef)value), Count < 2))
  {
    uint64_t v16 = 0;
    goto LABEL_12;
  }
  CFIndex v23 = Count;
  int v35 = a2;
  int v36 = a1;
  CFIndex v20 = (int *)malloc_type_malloc((2 * Count) & 0xFFFFFFFFFFFFFFFCLL, 0x100004052888210uLL);
  if (!v20)
  {
    uint64_t v16 = FigSignalErrorAt();
    unsigned int v19 = 0;
    goto LABEL_14;
  }
  unsigned int v19 = 0;
  uint64_t v21 = 0;
  for (CFIndex i = 1; i < v23; i += 2)
  {
    int v41 = 0;
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)value, i);
    if (ValueAtIndex)
    {
      unsigned int valuePtr = 0;
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
      uint64_t v26 = valuePtr;
      uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v28 = v27 ? v27 : 0;
      CFTypeID v29 = *(unsigned int (**)(uint64_t, uint64_t, void, int *))(v28 + 56);
      if (v29)
      {
        if (!v29(a3, v26, 0, &v41) && v41 == v36)
        {
          if (v21 < 1)
          {
LABEL_42:
            Boolean v39 = 0;
            fcSupport_getTrackMediaTypeAndEnabled(a3, valuePtr, &v39);
            BOOL v32 = v35 == 1 && v39 != 0;
            if (v35 == 2 || v32)
            {
              uint64_t v33 = v21 + 1;
              v20[v21] = valuePtr;
              if (a6 && !v19)
              {
                CFNumberRef v34 = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)value, i - 1);
                if (v34)
                {
                  Boolean v38 = 0;
                  unsigned int v37 = 0;
                  CFNumberGetValue(v34, kCFNumberSInt32Type, &v37);
                  fcSupport_getTrackMediaTypeAndEnabled(a3, v37, &v38);
                  if (v38) {
                    unsigned int v19 = valuePtr;
                  }
                  else {
                    unsigned int v19 = 0;
                  }
                }
                else
                {
                  unsigned int v19 = 0;
                }
              }
            }
            else
            {
              uint64_t v33 = v21;
            }
            uint64_t v21 = v33;
          }
          else
          {
            uint64_t v30 = 0;
            while (valuePtr != v20[v30])
            {
              if (v21 == ++v30) {
                goto LABEL_42;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v16 = 0;
  if (!v21) {
    goto LABEL_14;
  }
LABEL_15:
  if (theDict) {
    CFRelease(theDict);
  }
  if (a6)
  {
    if (v21 >= 1 && !v19 && v20) {
      unsigned int v19 = *v20;
    }
    *a6 = v19;
  }
  if (a4) {
    *a4 = v21;
  }
  if (a5) {
    *a5 = v20;
  }
  else {
    free(v20);
  }
  return v16;
}

uint64_t FCSupport_GetListOfChapterImageTrackIDs(uint64_t a1, uint64_t *a2, int **a3, unsigned int *a4)
{
  return fcSupport_GetListOfChapterTrackIDsForMediaType(1986618469, 2, a1, a2, a3, a4);
}

uint64_t itemfig_assureBasicsReadyForInspection(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t ready = itemfig_assureBasicsReadyUsingAsset(a1);
  if (!ready && *(unsigned char *)(DerivedStorage + 952))
  {
    itemfig_lookForLyrics((uint64_t)a1);
    *(unsigned char *)(DerivedStorage + 952) = 0;
  }
  return ready;
}

void itemfig_lookForLyrics(uint64_t a1)
{
  CFArrayRef v2 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlaybackItemProperty_Lyrics, 1, MEMORY[0x1E4F1D510]);
  if (v2)
  {
    CFArrayRef v3 = v2;
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = *(void (**)(uint64_t, CFArrayRef, void))(v5 + 48);
    if (v6) {
      v6(a1, v3, 0);
    }
    CFRelease(v3);
  }
}

uint64_t FigPlaybackItemMakeReadyForInspection(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigSampleCursorGetClassID()
{
  return sFigSampleCursorClassID;
}

uint64_t RegisterFigSampleCursorType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

void ScanForUnreferencedDataReadyEntries()
{
  if (gFigReadCache && (*(_DWORD *)(gFigReadCache + 176) || *(_DWORD *)(gFigReadCache + 208)))
  {
    for (CFIndex i = *(void **)(gFigReadCache + 120); i; CFIndex i = (void *)i[17])
    {
      MEMORY[0x19970E910](i[2]);
      for (uint64_t j = i[13]; j; uint64_t j = *(void *)(j + 64))
      {
        if (*(_DWORD *)j == 3 && !*(_DWORD *)(j + 72) && CFGetRetainCount(*(CFTypeRef *)(j + 48)) == 1)
        {
          if (*(void *)(j + 16))
          {
            unsigned int v2 = 3;
            int v3 = 0;
          }
          else
          {
            unsigned int v2 = 1;
            int v3 = 1;
          }
          MoveToVGroup(j, v2, v3);
          if (*(unsigned char *)(j + 96))
          {
            *(unsigned char *)(j + 96) = 0;
            FigAtomicDecrement32();
          }
        }
      }
      MEMORY[0x19970E930](i[2]);
    }
  }
}

uint64_t resetTrackCursor(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(_DWORD *)(a1 + 80) = 1;
  if (*(_DWORD *)(v2 + 288))
  {
    *(_DWORD *)(a1 + 88) = 0;
    uint64_t v3 = *(void *)(*(void *)a1 + 24);
    if (v3) {
      LOBYTE(v3) = *(_DWORD *)(v2 + 408) == 1;
    }
    *(unsigned char *)(a1 + 120) = v3;
    *(void *)(a1 + 96) = 0;
    uint64_t v11 = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v2 + 416), 0, 8uLL, &v11);
    *(_DWORD *)(a1 + 112) = bswap32(v11);
    *(_DWORD *)(a1 + 116) = 1;
    *(_OWORD *)(a1 + 128) = xmmword_1949985D0;
    if (*(int *)(v2 + 432) < 2)
    {
      int v6 = (*(uint64_t (**)(uint64_t))(v2 + 624))(v2);
    }
    else
    {
      int v12 = 0;
      uint64_t v11 = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v2 + 440), 0, 0xCuLL, &v11);
      int v4 = bswap32(v11);
      int v12 = 0;
      uint64_t v11 = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v2 + 440), 0xCuLL, 0xCuLL, &v11);
      if (v4 <= 0) {
        return FigSignalErrorAt();
      }
      int v5 = bswap32(v11);
      if (v5 <= 0) {
        return FigSignalErrorAt();
      }
      int v6 = v5 - v4;
      if (v5 < v4) {
        return FigSignalErrorAt();
      }
    }
    *(_DWORD *)(a1 + 144) = v6;
    int v12 = 0;
    uint64_t v11 = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v2 + 440), 0, 0xCuLL, &v11);
    signed int v7 = bswap32(HIDWORD(v11));
    *(_DWORD *)(a1 + 148) = v7;
    uint64_t v8 = *(int *)(v2 + 244);
    if (v8)
    {
      *(_DWORD *)(a1 + 112) /= v8;
      int v9 = v7 / (int)v8;
      *(_DWORD *)(a1 + 148) = v9;
    }
    else
    {
      uint64_t v11 = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v2 + 416), 0, 8uLL, &v11);
      uint64_t v8 = bswap32(HIDWORD(v11));
      int v9 = *(_DWORD *)(a1 + 148);
    }
    *(void *)(a1 + 104) = v8;
    if (v9 < 1 || v9 > *(_DWORD *)(v2 + 288)) {
      return FigSignalErrorAt();
    }
    *(void *)(a1 + 152) = 0;
  }
  ResetFragmentCursor(v2, a1 + 184);
  uint64_t result = 0;
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a1 + 80);
  return result;
}

double ResetFragmentCursor(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 728);
  if (v2 && (uint64_t v3 = *(void *)(v2 + 56)) != 0)
  {
    *(void *)(a2 + 8) = v2;
    *(void *)(a2 + 16) = v3;
    *(void *)(a2 + 24) = *(void *)(v3 + 72);
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

uint64_t FigMetadataReaderCreateForiTunes(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  if (!a2 || !a4 || (uint64_t v5 = a3, a3 < 0))
  {
    return FigSignalErrorAt();
  }
  int v6 = a2;
  FigMetadataReaderGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7) {
    return v7;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!FigAtomStreamInitWithByteStream())
  {
    *(void *)&v33[0] = 0;
    number[0] = 0;
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    CFTypeID v18 = *(void (**)(uint64_t, void, void, CFNumberRef *))(v14 + 48);
    if (v18) {
      v18(CMBaseObject, *MEMORY[0x1E4F1EC50], 0, number);
    }
    uint64_t v19 = CMByteStreamGetCMBaseObject();
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    CFDictionaryRef v22 = *(void (**)(uint64_t, void, void, _OWORD *))(v21 + 48);
    if (v22) {
      v22(v19, *MEMORY[0x1E4F1EC48], 0, v33);
    }
    int v23 = 0;
    CFTypeID v24 = *(const void **)&v33[0];
    if (number[0] && *(void *)&v33[0])
    {
      if (CFNumberCompare(number[0], *(CFNumberRef *)&v33[0], 0))
      {
        int64_t v34 = 0;
        if (FigAtomStreamGetCurrentAtomTypeAndDataLength()) {
          BOOL v25 = 0;
        }
        else {
          BOOL v25 = v34 <= 0x2000;
        }
        int v23 = v25;
      }
      else
      {
        int v23 = 0;
      }
      CFTypeID v24 = *(const void **)&v33[0];
    }
    if (v24) {
      CFRelease(v24);
    }
    if (number[0]) {
      CFRelease(number[0]);
    }
    if (v23)
    {
      if (!FigAtomStreamReadCurrentAtomAndCreateBBuf())
      {
        CFGetAllocator(0);
        if (!CMByteStreamCreateForBlockBuffer())
        {
          int v6 = 0;
          uint64_t v5 = 0;
        }
      }
    }
  }
  *uint64_t DerivedStorage = CFRetain(v6);
  DerivedStorage[1] = v5;
  int64_t v34 = 0;
  memset(v33, 0, sizeof(v33));
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)CFNumberRef number = 0u;
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  if (*(void *)(v9 + 16)) {
    return 4294954687;
  }
  if (*(void *)(v9 + 24)) {
    return 4294954687;
  }
  int v35 = 0;
  if (FigAtomStreamInitWithByteStream() || FigAtomStreamInitWithParent()) {
    return 4294954687;
  }
  char v15 = 0;
  do
  {
    uint64_t CurrentAtomTypeAndDataLength = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (CurrentAtomTypeAndDataLength)
    {
      uint64_t CurrentAtomGlobalOffset = CurrentAtomTypeAndDataLength;
      goto LABEL_29;
    }
    if (v35 == 1801812339 || v35 == 1768715124)
    {
      uint64_t CurrentAtomGlobalOffset = FigAtomStreamGetCurrentAtomGlobalOffset();
    }
    else
    {
      if (v35 != 1751411826) {
        goto LABEL_26;
      }
      uint64_t CurrentAtomGlobalOffset = FigMetadataValidateHandlerType((uint64_t)number, v34);
      if (!CurrentAtomGlobalOffset) {
        char v15 = 1;
      }
    }
    if (CurrentAtomGlobalOffset) {
      goto LABEL_29;
    }
LABEL_26:
    uint64_t Atom = FigAtomStreamAdvanceToNextAtom();
  }
  while (!Atom);
  uint64_t CurrentAtomGlobalOffset = Atom;
  if (Atom == -12890) {
    uint64_t CurrentAtomGlobalOffset = 0;
  }
LABEL_29:
  if (!v15) {
    return 4294954687;
  }
  if (!CurrentAtomGlobalOffset) {
    *a4 = 0;
  }
  return CurrentAtomGlobalOffset;
}

uint64_t itemasync_GetDimensions(const void *a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t v14 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a2 && (*a2 = 0, a3) && (*a3 = 0, !*DerivedStorage))
  {
    uint64_t v8 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v8)
    {
      uint64_t v9 = (const void *)v8;
      if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v12 = FigSignalErrorAt();
        uint64_t v11 = 0;
      }
      else
      {
        uint64_t v10 = playerasync_createCommand(v9, 28, a1, &v14);
        uint64_t v11 = v14;
        if (v10)
        {
          uint64_t v12 = v10;
        }
        else
        {
          *(void *)(v14 + 32) = a2;
          *(void *)(v11 + 40) = a3;
          playerasync_runSynchronousCommand((uint64_t)v9, (_DWORD *)v11);
          uint64_t v12 = *(unsigned int *)(v11 + 28);
        }
      }
      fpa_releaseCommand((void *)v11);
      CFRelease(v9);
      return v12;
    }
    else
    {
      uint64_t v13 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v13;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemcentral_GetDimensions(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 16) || (uint64_t v6 = DerivedStorage, !itemcentral_isParentPlayerValid()))
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 8);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8);
    if (v10)
    {
      return v10(v7, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
}

uint64_t itemfig_GetDimensions(const void *a1, float *a2, float *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = *(const void **)(DerivedStorage + 8);
  CMVideoFormatDescriptionRef videoDesc = 0;
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v8 = DerivedStorage;
    if (*(void *)(DerivedStorage + 656))
    {
      CMVideoFormatDescriptionRef v9 = 0;
      double v10 = *(float *)(DerivedStorage + 736);
      double height = *(double *)(DerivedStorage + 720) * v10;
      double v12 = *(double *)(DerivedStorage + 728) * v10;
    }
    else if (*(unsigned char *)(DerivedStorage + 1872))
    {
      CMVideoFormatDescriptionRef v9 = 0;
      double height = *(double *)(DerivedStorage + 1880);
      double v12 = *(double *)(DerivedStorage + 1888);
    }
    else
    {
      uint64_t result = itemfig_copyVideoFormatDescription((uint64_t)a1, (uint64_t *)&videoDesc);
      if (result) {
        return result;
      }
      CMVideoFormatDescriptionRef v9 = videoDesc;
      if (videoDesc)
      {
        CGSize PresentationDimensions = CMVideoFormatDescriptionGetPresentationDimensions(videoDesc, *(unsigned char *)(v8 + 1152), *(unsigned char *)(v8 + 1153));
        CGFloat width = PresentationDimensions.width;
        double height = PresentationDimensions.height;
      }
      else
      {
        double height = 0.0;
        CGFloat width = 0.0;
      }
      if (FPSupport_ShouldApplyVideoTrackMatrix(v7, a1)
        && ((int VideoMatrixRotationAngleAndFlips = itemfig_getVideoMatrixRotationAngleAndFlips((uint64_t)a1, 0, 0),
             VideoMatrixRotationAngleAndFlips == 270)
         || VideoMatrixRotationAngleAndFlips == 90))
      {
        double v12 = width;
      }
      else
      {
        double v12 = height;
        double height = width;
      }
    }
    if ((height == 0.0 || v12 == 0.0)
      && (itemfig_IsThereMediaTrack(v8, 1935832172) || itemfig_IsThereMediaTrack(v8, 1668047728)))
    {
      double height = 1280.0;
      double v12 = 720.0;
    }
    float v17 = height;
    *a2 = v17;
    float v18 = v12;
    *a3 = v18;
    if (v9) {
      CFRelease(v9);
    }
    return 0;
  }
}

uint64_t itemfig_copyVideoFormatDescription(uint64_t a1, uint64_t *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  *a2 = 0;
  if (*DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v6 = DerivedStorage;
    uint64_t v7 = itemfig_assureBasicsReadyForInspection(a1);
    if (v7) {
      return v7;
    }
    uint64_t v8 = *((unsigned int *)v6 + 250);
    if (v8)
    {
      uint64_t v9 = *((void *)v6 + 121);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      double v12 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, void))(v11 + 56);
      if (v12)
      {
        uint64_t v8 = v12(v9, v8, &cf, 0);
        CFTypeRef v13 = cf;
        if (!v8)
        {
          uint64_t v8 = itemfig_copyFormatDescription((uint64_t)cf, a2);
          CFTypeRef v13 = cf;
        }
        if (v13) {
          CFRelease(v13);
        }
      }
      else
      {
        return 4294954514;
      }
    }
    return v8;
  }
}

uint64_t itemfig_CopyProperty(void *a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v10 = (const void *)v9;
  if (*(unsigned char *)DerivedStorage) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = a4 == 0;
  }
  if (v11)
  {
    uint64_t Duration = FigSignalErrorAt();
    if (!v10) {
      return Duration;
    }
    goto LABEL_46;
  }
  if (!v9) {
    return 0;
  }
  if (CFEqual(a2, @"SeekableTimeIntervals"))
  {
    cf.unsigned int value = 0;
    memset(&keys, 0, 32);
    memset(&values, 0, 32);
    valuePtr.unsigned int value = 0;
    v105.unsigned int value = 0;
    *(_OWORD *)v114 = *MEMORY[0x1E4F1F9F8];
    *(void *)&long long v115 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    uint64_t DurationIfReady = itemfig_getDurationIfReady((uint64_t)a1, (uint64_t)v114);
    if (DurationIfReady)
    {
      uint64_t Duration = DurationIfReady;
      CFNumberRef v15 = 0;
    }
    else
    {
      *(_OWORD *)time = *(_OWORD *)v114;
      *(void *)&time[16] = v115;
      v105.unsigned int value = CMTimeGetSeconds((CMTime *)time);
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberRef v14 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &valuePtr);
      CFNumberRef v15 = v14;
      if (v14)
      {
        keys.start.unsigned int value = (CMTimeValue)@"start";
        values.start.unsigned int value = (CMTimeValue)v14;
        CFNumberRef v16 = CFNumberCreate(v13, kCFNumberDoubleType, &v105);
        CFNumberRef v17 = v16;
        if (v16)
        {
          *(void *)&keys.start.timescale = @"end";
          *(void *)&values.start.timescale = v16;
          *(_OWORD *)time = *MEMORY[0x1E4F1FA48];
          *(void *)&time[16] = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          CFDictionaryRef v18 = CMTimeCopyAsDictionary((CMTime *)time, v13);
          CFDictionaryRef v19 = v18;
          if (v18)
          {
            keys.start.epoch = (CMTimeEpoch)@"startTime";
            values.start.epoch = (CMTimeEpoch)v18;
            *(_OWORD *)time = *(_OWORD *)v114;
            *(void *)&time[16] = v115;
            CFDictionaryRef v20 = CMTimeCopyAsDictionary((CMTime *)time, v13);
            CFDictionaryRef v21 = v20;
            if (v20
              && (keys.duration.unsigned int value = (CMTimeValue)@"endTime",
                  values.duration.unsigned int value = (CMTimeValue)v20,
                  (cf.value = (CMTimeValue)CFDictionaryCreate(v13, (const void **)&keys, (const void **)&values, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)&& (CFArrayRef v22 = CFArrayCreate(v13, (const void **)&cf, 1, MEMORY[0x1E4F1D510])) != 0)
            {
              uint64_t Duration = 0;
              *a4 = v22;
            }
            else
            {
              uint64_t Duration = FigSignalErrorAt();
            }
            goto LABEL_15;
          }
          uint64_t Duration = FigSignalErrorAt();
LABEL_87:
          CFDictionaryRef v21 = 0;
LABEL_15:
          if (cf.value) {
            CFRelease((CFTypeRef)cf.value);
          }
          if (v15) {
            CFRelease(v15);
          }
          if (v17) {
            CFRelease(v17);
          }
          if (v19) {
            CFRelease(v19);
          }
          if (!v21) {
            goto LABEL_46;
          }
          CFDictionaryRef v24 = v21;
          goto LABEL_45;
        }
        uint64_t Duration = FigSignalErrorAt();
LABEL_85:
        CFDictionaryRef v19 = 0;
        goto LABEL_87;
      }
      uint64_t Duration = FigSignalErrorAt();
    }
    CFNumberRef v17 = 0;
    goto LABEL_85;
  }
  if (CFEqual(a2, @"PlayableTimeIntervals"))
  {
    CFTypeRef v110 = 0;
    *(_OWORD *)v114 = 0u;
    long long v115 = 0u;
    memset(time, 0, sizeof(time));
    CMTime cf = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    long long v25 = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 16);
    *(_OWORD *)&keys.start.unsigned int value = *MEMORY[0x1E4F1FA30];
    *(_OWORD *)&keys.start.epoch = v25;
    *(_OWORD *)&keys.duration.timescale = *(_OWORD *)(MEMORY[0x1E4F1FA30] + 32);
    itemfig_getNonNegativeCurrentTime((uint64_t)a1, &cf);
    values.start = cf;
    itemfig_getPlayableRangeAtTime((uint64_t)a1, &values.start, &keys);
    *(_OWORD *)&values.start.unsigned int value = *(_OWORD *)&keys.start.value;
    values.start.epoch = keys.start.epoch;
    Float64 Seconds = CMTimeGetSeconds(&values.start);
    CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberRef v27 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &Seconds);
    if (v27)
    {
      CFNumberRef v28 = v27;
      v114[0] = @"start";
      *(void *)time = v27;
      CMTimeRange values = keys;
      CMTimeRangeGetEnd(&valuePtr, &values);
      Float64 v108 = CMTimeGetSeconds(&valuePtr);
      CFNumberRef v29 = CFNumberCreate(v26, kCFNumberDoubleType, &v108);
      if (v29)
      {
        CFNumberRef v30 = v29;
        v114[1] = @"end";
        *(void *)&time[8] = v29;
        *(_OWORD *)&values.start.unsigned int value = *(_OWORD *)&keys.start.value;
        values.start.epoch = keys.start.epoch;
        CFDictionaryRef v31 = CMTimeCopyAsDictionary(&values.start, v26);
        if (v31)
        {
          CFDictionaryRef v32 = v31;
          *(void *)&long long v115 = @"startTime";
          *(void *)&time[16] = v31;
          CMTimeRange values = keys;
          CMTimeRangeGetEnd(&v105, &values);
          CFDictionaryRef v33 = CMTimeCopyAsDictionary(&v105, v26);
          if (v33)
          {
            CFDictionaryRef v34 = v33;
            *((void *)&v115 + 1) = @"endTime";
            *(void *)&time[24] = v33;
            CFTypeRef v110 = CFDictionaryCreate(v26, (const void **)v114, (const void **)time, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (v110)
            {
              CFArrayRef v35 = CFArrayCreate(v26, &v110, 1, MEMORY[0x1E4F1D510]);
              if (v35)
              {
                uint64_t Duration = 0;
                *a4 = v35;
              }
              else
              {
                uint64_t Duration = FigSignalErrorAt();
              }
              if (v110) {
                CFRelease(v110);
              }
            }
            else
            {
              uint64_t Duration = FigSignalErrorAt();
            }
            CFRelease(v34);
          }
          else
          {
            uint64_t Duration = FigSignalErrorAt();
          }
          CFRelease(v32);
        }
        else
        {
          uint64_t Duration = FigSignalErrorAt();
        }
        CFRelease(v30);
      }
      else
      {
        uint64_t Duration = FigSignalErrorAt();
      }
      CFDictionaryRef v24 = v28;
LABEL_45:
      CFRelease(v24);
      goto LABEL_46;
    }
LABEL_92:
    uint64_t PlayabilityMetricsDictionary = FigSignalErrorAt();
    goto LABEL_70;
  }
  if (!CFEqual(a2, @"Timebase"))
  {
    if (CFEqual(a2, @"Lyrics"))
    {
      uint64_t v38 = CMBaseObjectGetDerivedStorage();
      if (*(void *)(v38 + 960))
      {
        uint64_t Duration = 0;
      }
      else
      {
        uint64_t v39 = v38;
        uint64_t v40 = *(void *)(v38 + 1216);
        CFAllocatorRef v41 = CFGetAllocator(a1);
        uint64_t CMBaseObject = FigAssetGetCMBaseObject(v40);
        uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v43) {
          uint64_t v44 = v43;
        }
        else {
          uint64_t v44 = 0;
        }
        uint64_t v45 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, uint64_t))(v44 + 48);
        if (v45) {
          uint64_t Duration = v45(CMBaseObject, @"Lyrics", v41, v39 + 960);
        }
        else {
          uint64_t Duration = 4294954514;
        }
      }
      CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 960);
      if (DictionaryRepresentation) {
        goto LABEL_64;
      }
LABEL_65:
      *a4 = 0;
      goto LABEL_46;
    }
    if (CFEqual(a2, @"AvailableAlternateTrackGroups"))
    {
      CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 984);
      if (DictionaryRepresentation) {
        goto LABEL_35;
      }
      goto LABEL_53;
    }
    if (CFEqual(a2, @"ChosenAlternateTrackIDDictionary"))
    {
      itemfig_copyChosenAlternateTrackIDsDictionary((uint64_t)a1, a3, a4);
LABEL_58:
      uint64_t Duration = 0;
      goto LABEL_46;
    }
    if (CFEqual(a2, @"EstimatedDuration"))
    {
      uint64_t Duration = itemfig_assureFormatReader(a1);
      if (Duration) {
        goto LABEL_46;
      }
      uint64_t v46 = *(void *)(DerivedStorage + 968);
      uint64_t v47 = kFigFormatReaderProperty_EstimatedDuration;
      goto LABEL_69;
    }
    if (CFEqual(a2, @"AccurateDuration"))
    {
      *(_OWORD *)&keys.start.unsigned int value = *MEMORY[0x1E4F1F9F8];
      keys.start.epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      uint64_t Duration = FigPlaybackItemGetDuration((uint64_t)a1, (uint64_t)&keys);
      if (Duration)
      {
        CFStringRef DictionaryRepresentation = 0;
      }
      else
      {
        *(_OWORD *)&values.start.unsigned int value = *(_OWORD *)&keys.start.value;
        values.start.epoch = keys.start.epoch;
        CFStringRef DictionaryRepresentation = (CFStringRef)CMTimeCopyAsDictionary(&values.start, a3);
      }
      goto LABEL_37;
    }
    if (CFEqual(a2, @"EndTime"))
    {
      if ((*(_DWORD *)(DerivedStorage + 152) & 0x1D) == 1)
      {
        *(_OWORD *)&keys.start.unsigned int value = *(_OWORD *)(DerivedStorage + 140);
        CMTimeEpoch v49 = *(void *)(DerivedStorage + 156);
LABEL_100:
        keys.start.epoch = v49;
        p_CMTimeRange keys = &keys;
LABEL_101:
        CFAllocatorRef v51 = a3;
LABEL_102:
        CFStringRef DictionaryRepresentation = (CFStringRef)CMTimeCopyAsDictionary(&p_keys->start, v51);
        goto LABEL_36;
      }
      goto LABEL_53;
    }
    if (CFEqual(a2, @"ReverseEndTime"))
    {
      if ((*(_DWORD *)(DerivedStorage + 176) & 0x1D) == 1)
      {
        *(_OWORD *)&keys.start.unsigned int value = *(_OWORD *)(DerivedStorage + 164);
        CMTimeEpoch v49 = *(void *)(DerivedStorage + 180);
        goto LABEL_100;
      }
LABEL_53:
      uint64_t Duration = 0;
      goto LABEL_65;
    }
    if (CFEqual(a2, @"AdvanceTimeForOverlappedPlayback"))
    {
      if ((*(_DWORD *)(DerivedStorage + 200) & 0x1D) == 1)
      {
        *(_OWORD *)&keys.start.unsigned int value = *(_OWORD *)(DerivedStorage + 188);
        CMTimeEpoch v49 = *(void *)(DerivedStorage + 204);
        goto LABEL_100;
      }
      goto LABEL_53;
    }
    if (CFEqual(a2, @"MaximumTimePlayedToSinceLastSeek"))
    {
      *(_OWORD *)&keys.start.unsigned int value = *MEMORY[0x1E4F1F9F8];
      keys.start.epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      FigPlaybackItemGetCurrentTime_0((uint64_t)a1, (uint64_t)&keys);
      if ((keys.start.flags & 0x1D) != 1)
      {
        CFStringRef DictionaryRepresentation = 0;
        goto LABEL_36;
      }
      *(_OWORD *)&values.start.unsigned int value = *(_OWORD *)&keys.start.value;
      values.start.epoch = keys.start.epoch;
      p_CMTimeRange keys = &values;
      goto LABEL_101;
    }
    if (CFEqual(a2, @"LoopTimeRange"))
    {
      if ((*(_DWORD *)(DerivedStorage + 248) & 0x1D) == 1)
      {
        long long v52 = *(_OWORD *)(DerivedStorage + 252);
        *(_OWORD *)&keys.start.unsigned int value = *(_OWORD *)(DerivedStorage + 236);
        *(_OWORD *)&keys.start.epoch = v52;
        *(_OWORD *)&keys.duration.timescale = *(_OWORD *)(DerivedStorage + 268);
        CFStringRef DictionaryRepresentation = (CFStringRef)CMTimeRangeCopyAsDictionary(&keys, a3);
        goto LABEL_36;
      }
      goto LABEL_53;
    }
    if (CFEqual(a2, @"ReversesMoreVideoFramesInMemory"))
    {
      uint64_t v53 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v54 = *(unsigned __int8 *)(DerivedStorage + 284);
      goto LABEL_116;
    }
    if (CFEqual(a2, @"AggressivelyCachesVideoFrames"))
    {
      uint64_t v53 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v54 = *(unsigned __int8 *)(DerivedStorage + 285);
      goto LABEL_116;
    }
    if (CFEqual(a2, @"DecodeAllFramesDuringOrdinaryPlayback"))
    {
      uint64_t v53 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v54 = *(unsigned __int8 *)(DerivedStorage + 286);
      goto LABEL_116;
    }
    if (CFEqual(a2, @"CleanApertureRectangle"))
    {
      if (!*(void *)(DerivedStorage + 656))
      {
        keys.start.unsigned int value = 0;
        uint64_t Duration = itemfig_copyVideoFormatDescription((uint64_t)a1, &keys.start.value);
        if (Duration) {
          goto LABEL_46;
        }
        unsigned int value = (const void *)keys.start.value;
        if (keys.start.value)
        {
          CGRect CleanAperture = CMVideoFormatDescriptionGetCleanAperture((CMVideoFormatDescriptionRef)keys.start.value, 0);
          CGFloat x = CleanAperture.origin.x;
          CGFloat y = CleanAperture.origin.y;
          CGFloat width = CleanAperture.size.width;
          CGFloat height = CleanAperture.size.height;
          CFRelease(value);
        }
        else
        {
          CGFloat height = 0.0;
          CGFloat width = 0.0;
          CGFloat y = 0.0;
          CGFloat x = 0.0;
        }
        v121.origin.CGFloat x = x;
        v121.origin.CGFloat y = y;
        v121.size.CGFloat width = width;
        v121.size.CGFloat height = height;
        CFStringRef DictionaryRepresentation = (CFStringRef)CGRectCreateDictionaryRepresentation(v121);
        goto LABEL_37;
      }
      double v55 = *(float *)(DerivedStorage + 736);
      v119.size.CGFloat width = *(double *)(DerivedStorage + 720) * v55;
      v119.size.CGFloat height = *(double *)(DerivedStorage + 728) * v55;
      v119.origin.CGFloat x = 0.0;
      v119.origin.CGFloat y = 0.0;
      CFStringRef DictionaryRepresentation = (CFStringRef)CGRectCreateDictionaryRepresentation(v119);
      goto LABEL_36;
    }
    if (CFEqual(a2, @"EncodedDimensions"))
    {
      if (!*(void *)(DerivedStorage + 656))
      {
        keys.start.unsigned int value = 0;
        uint64_t Duration = itemfig_copyVideoFormatDescription((uint64_t)a1, &keys.start.value);
        if (Duration) {
          goto LABEL_46;
        }
        __int16 v66 = (const void *)keys.start.value;
        if (keys.start.value)
        {
          CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions((CMVideoFormatDescriptionRef)keys.start.value);
          double v68 = (double)Dimensions.width;
          double v69 = (double)Dimensions.height;
          CFRelease(v66);
        }
        else
        {
          double v68 = 0.0;
          double v69 = 0.0;
        }
        v118.CGFloat width = v68;
        v118.CGFloat height = v69;
        CFStringRef DictionaryRepresentation = (CFStringRef)CGSizeCreateDictionaryRepresentation(v118);
        goto LABEL_37;
      }
      double v56 = *(float *)(DerivedStorage + 736);
      v117.CGFloat width = *(double *)(DerivedStorage + 720) * v56;
      v117.CGFloat height = *(double *)(DerivedStorage + 728) * v56;
      CFStringRef DictionaryRepresentation = (CFStringRef)CGSizeCreateDictionaryRepresentation(v117);
      goto LABEL_36;
    }
    if (CFEqual(a2, @"ApertureMode"))
    {
      if (*(unsigned char *)(DerivedStorage + 1152))
      {
        CMTime v62 = (CFStringRef *)&kFigPlaybackItemApertureMode_CleanAperture;
        int v63 = *(unsigned __int8 *)(DerivedStorage + 1153);
        __int16 v64 = (CFStringRef *)&kFigPlaybackItemApertureMode_ProductionAperture;
LABEL_132:
        BOOL v65 = v63 == 0;
        goto LABEL_133;
      }
      CMTime v62 = (CFStringRef *)&kFigPlaybackItemApertureMode_EncodedPixels;
LABEL_144:
      CFStringRef DictionaryRepresentation = *v62;
      goto LABEL_35;
    }
    if (CFEqual(a2, @"VideoTrackMatrix"))
    {
      uint64_t PlayabilityMetricsDictionary = itemfig_copyVideoTrackMatrix(a3, (uint64_t)a1, a4);
      goto LABEL_70;
    }
    if (CFEqual(a2, @"TrackIDArray"))
    {
      keys.start.unsigned int value = 0;
      TrackIDArraCGFloat y = itemfig_createTrackIDArray(a1, (CFArrayRef *)&keys);
      goto LABEL_151;
    }
    if (CFEqual(a2, @"ChosenTrackIDArray"))
    {
      keys.start.unsigned int value = 0;
      TrackIDArraCGFloat y = itemfig_createChosenTrackIDArray(a1, (CFArrayRef *)&keys);
LABEL_151:
      uint64_t Duration = TrackIDArray;
      CMTimeValue v71 = keys.start.value;
      if (TrackIDArray) {
        CMTimeValue v71 = 0;
      }
LABEL_153:
      *a4 = (__CFDictionary *)v71;
      goto LABEL_46;
    }
    if (CFEqual(a2, @"EQPreset"))
    {
      CFAllocatorRef v72 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v73 = (CMTimeRange *)(DerivedStorage + 936);
      CFNumberType v74 = kCFNumberIntType;
LABEL_156:
      CFStringRef DictionaryRepresentation = (CFStringRef)CFNumberCreate(v72, v74, v73);
      goto LABEL_36;
    }
    if (CFEqual(a2, @"VideoSlotArray"))
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 1120));
      CFArrayRef v75 = *(const __CFArray **)(DerivedStorage + 1112);
      if (v75)
      {
        uint64_t Duration = 0;
        *a4 = CFArrayCreateCopy(a3, v75);
      }
      else
      {
        uint64_t Duration = 4294954513;
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 1120));
      goto LABEL_46;
    }
    if (CFEqual(a2, @"HasEnqueuedFirstVideoFrame"))
    {
      unsigned int VideoFrame = itemfig_hasEnqueuedFirstVideoFrame((uint64_t)a1);
      uint64_t Duration = 0;
      uint64_t v77 = (CMTimeValue *)MEMORY[0x1E4F1CFD0];
      if (!VideoFrame) {
        uint64_t v77 = (CMTimeValue *)MEMORY[0x1E4F1CFC8];
      }
      CMTimeValue v71 = *v77;
      goto LABEL_153;
    }
    if (CFEqual(a2, @"BlendsVideoFrames"))
    {
      CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v63 = *(unsigned __int8 *)(DerivedStorage + 1136);
LABEL_170:
      __int16 v64 = (CFStringRef *)MEMORY[0x1E4F1CFC8];
      goto LABEL_132;
    }
    if (CFEqual(a2, @"PropagatePerFrameHDRDisplayMetadata"))
    {
      CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v63 = *(unsigned __int8 *)(DerivedStorage + 1137);
      goto LABEL_170;
    }
    if (CFEqual(a2, @"ImageQueueInterpolationCurve"))
    {
      CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1128);
      goto LABEL_35;
    }
    if (CFEqual(a2, @"ReadBandwidth"))
    {
      uint64_t v78 = *(void *)(DerivedStorage + 128);
      if (v78)
      {
        double v79 = (__CFString **)MEMORY[0x1E4F1FB68];
LABEL_182:
        uint64_t PlayabilityMetricsDictionary = CMByteStreamCopyProperty(v78, (uint64_t)*v79, 0, (uint64_t)a4);
        goto LABEL_70;
      }
      goto LABEL_390;
    }
    if (CFEqual(a2, @"FileSize"))
    {
      uint64_t v78 = *(void *)(DerivedStorage + 128);
      if (v78)
      {
        double v79 = (__CFString **)MEMORY[0x1E4F1EC50];
        goto LABEL_182;
      }
LABEL_390:
      uint64_t Duration = 4294954513;
      goto LABEL_46;
    }
    if (CFEqual(a2, @"AvailableFileSize"))
    {
      uint64_t v78 = *(void *)(DerivedStorage + 128);
      if (v78)
      {
        double v79 = (__CFString **)MEMORY[0x1E4F1EC48];
        goto LABEL_182;
      }
      goto LABEL_390;
    }
    if (CFEqual(a2, @"AudioDeviceChannelMap"))
    {
      *a4 = *(__CFDictionary **)(DerivedStorage + 944);
      uint64_t v80 = *(const void **)(DerivedStorage + 944);
      if (v80) {
        CFRetain(v80);
      }
      goto LABEL_58;
    }
    if (CFEqual(a2, @"MovieMatrix"))
    {
      uint64_t Duration = itemfig_assureFormatReader(a1);
      if (Duration) {
        goto LABEL_46;
      }
      uint64_t v46 = *(void *)(DerivedStorage + 968);
      uint64_t v47 = kFigFormatReaderProperty_MovieMatrix;
LABEL_69:
      uint64_t PlayabilityMetricsDictionary = FigFormatReaderCopyProperty(v46, (uint64_t)*v47, (uint64_t)a3, (uint64_t)a4);
LABEL_70:
      uint64_t Duration = PlayabilityMetricsDictionary;
      goto LABEL_46;
    }
    if (CFEqual(a2, @"IsReadyForPlayback"))
    {
      CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v63 = *(unsigned __int8 *)(DerivedStorage + 1266);
      goto LABEL_170;
    }
    if (CFEqual(a2, @"BasicsReadyForInspection"))
    {
      CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v63 = *(unsigned __int8 *)(DerivedStorage + 1240);
      goto LABEL_170;
    }
    if (CFEqual(a2, @"ReadAheadAllowBackfill"))
    {
      if (*(unsigned char *)(DerivedStorage + 1382))
      {
        CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
        int v63 = *(unsigned __int8 *)(DerivedStorage + 1381);
        goto LABEL_170;
      }
      if (*(void *)(DerivedStorage + 128))
      {
        CMByteStreamGetCMBaseObject();
        FigCRABSGetClassID();
        if (CMBaseObjectIsMemberOfClass())
        {
          uint64_t v78 = *(void *)(DerivedStorage + 128);
          double v79 = kFigCachedReadAheadByteStreamProperty_ReadAheadAllowBackfill;
          goto LABEL_182;
        }
      }
      goto LABEL_390;
    }
    if (CFEqual(a2, @"SaveDownloadedDataToDiskWhenDone"))
    {
      if (*(void *)(DerivedStorage + 128))
      {
        CMByteStreamGetCMBaseObject();
        FigCRABSGetClassID();
        if (CMBaseObjectIsMemberOfClass())
        {
          uint64_t v78 = *(void *)(DerivedStorage + 128);
          double v79 = kFigCachedReadAheadByteStreamProperty_SaveMemoryCacheToDiskWhenDone;
          goto LABEL_182;
        }
      }
      goto LABEL_390;
    }
    if (CFEqual(a2, @"RequiresExternalProtection"))
    {
      CMTimeValue v81 = *MEMORY[0x1E4F1CFC8];
      keys.start.unsigned int value = *MEMORY[0x1E4F1CFC8];
      CFNumberRef v82 = *(const __CFNumber **)(DerivedStorage + 1168);
      if (!v82) {
        goto LABEL_208;
      }
      values.start.unsigned int value = 0;
      CFNumberGetValue(v82, kCFNumberSInt64Type, &values);
      CMTimeValue v71 = *MEMORY[0x1E4F1CFD0];
      if (!values.start.value) {
        CMTimeValue v71 = v81;
      }
      keys.start.unsigned int value = v71;
      if (v71 == v81)
      {
LABEL_208:
        itemfig_assureContentProtectionReadyForInspection(a1);
        uint64_t v83 = *(void *)(DerivedStorage + 1160);
        if (v83)
        {
          uint64_t Duration = FigCPECryptorCopyProperty(v83, @"ExternalProtectionRequiredForPlayback", (uint64_t)a3, (uint64_t)&keys);
          if (Duration) {
            goto LABEL_46;
          }
          CMTimeValue v71 = keys.start.value;
        }
        else
        {
          CMTimeValue v71 = v81;
        }
      }
      uint64_t Duration = 0;
      goto LABEL_153;
    }
    if (CFEqual(a2, @"CPEProtector"))
    {
      itemfig_assureContentProtectionReadyForInspection(a1);
      CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1160);
      if (!DictionaryRepresentation) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    if (CFEqual(a2, @"IsAuthorizationRequired"))
    {
      itemfig_assureContentProtectionReadyForInspection(a1);
      CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      __int16 v64 = (CFStringRef *)MEMORY[0x1E4F1CFC8];
      BOOL v65 = *(void *)(DerivedStorage + 1160) == 0;
LABEL_133:
      if (v65) {
        CMTime v62 = v64;
      }
      goto LABEL_144;
    }
    if (CFEqual(a2, @"IsAuthorized"))
    {
      itemfig_assureContentProtectionReadyForInspection(a1);
      uint64_t v84 = *(void *)(DerivedStorage + 1160);
      if (v84)
      {
        LODWORD(keys.start.value) = 0;
        uint64_t Duration = FigCPEProtectorIsApplicationAuthorized(v84, (uint64_t)&keys);
        if (!Duration)
        {
          if (keys.start.value)
          {
            uint64_t Duration = FigCPEProtectorIsContentAuthorized(*(void *)(DerivedStorage + 1160), (uint64_t)&keys);
            if (!Duration && (keys.start.value & 1) != 0)
            {
              unsigned int v87 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
              goto LABEL_232;
            }
          }
          else
          {
            uint64_t Duration = 0;
          }
        }
        unsigned int v87 = (CFStringRef *)MEMORY[0x1E4F1CFC8];
LABEL_232:
        CFStringRef DictionaryRepresentation = *v87;
LABEL_64:
        CFStringRef DictionaryRepresentation = (CFStringRef)CFRetain(DictionaryRepresentation);
        goto LABEL_37;
      }
LABEL_394:
      CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      goto LABEL_144;
    }
    if (CFEqual(a2, @"Metadata"))
    {
      uint64_t PlayabilityMetricsDictionary = itemfig_copyMetadata(a1, a3, a4);
      goto LABEL_70;
    }
    if (CFEqual(a2, @"VideoCompositionInstructionArray"))
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 672));
      v85 = *(void **)(DerivedStorage + 680);
      if (v85) {
        v85 = (void *)CFRetain(v85);
      }
      *a4 = (__CFDictionary *)v85;
      uint64_t v86 = *(void *)(DerivedStorage + 672);
      goto LABEL_237;
    }
    if (CFEqual(a2, @"VideoCompositorSourceSampleDataTrackIDs"))
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 776));
      unsigned int v88 = *(__CFDictionary **)(DerivedStorage + 784);
      if (!v88)
      {
LABEL_236:
        *a4 = v88;
        uint64_t v86 = *(void *)(DerivedStorage + 776);
        goto LABEL_237;
      }
LABEL_235:
      unsigned int v88 = (__CFDictionary *)CFRetain(v88);
      goto LABEL_236;
    }
    if (CFEqual(a2, @"VideoCompositorSourceVideoTrackWindows"))
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 776));
      unsigned int v88 = *(__CFDictionary **)(DerivedStorage + 792);
      if (!v88) {
        goto LABEL_236;
      }
      goto LABEL_235;
    }
    if (CFEqual(a2, @"VideoCompositorSourceSampleDataTrackWindows"))
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 776));
      unsigned int v88 = *(__CFDictionary **)(DerivedStorage + 800);
      if (!v88) {
        goto LABEL_236;
      }
      goto LABEL_235;
    }
    if (CFEqual(a2, @"UsesMinimalLatencyForVideoCompositionRendering"))
    {
      CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
      int v63 = *(unsigned __int8 *)(DerivedStorage + 688);
      goto LABEL_170;
    }
    if (CFEqual(a2, @"VideoCompositor"))
    {
      switch(*(_DWORD *)(DerivedStorage + 664))
      {
        case 1:
          CMTime v62 = (CFStringRef *)&kFigPlaybackItemVideoCompositor_Basic;
          goto LABEL_144;
        case 2:
          CMTime v62 = (CFStringRef *)&kFigPlaybackItemVideoCompositor_OpenGL;
          goto LABEL_144;
        case 3:
          CMTime v62 = (CFStringRef *)&kFigPlaybackItemVideoCompositor_vImage;
          goto LABEL_144;
        case 4:
          CMTime v62 = (CFStringRef *)&kFigPlaybackItemVideoCompositor_Metal;
          goto LABEL_144;
        default:
          CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 656);
          if (DictionaryRepresentation) {
            goto LABEL_35;
          }
          break;
      }
      goto LABEL_36;
    }
    if (CFEqual(a2, @"SynchronizedLayers"))
    {
      CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 864);
      if (!DictionaryRepresentation) {
        goto LABEL_36;
      }
      goto LABEL_35;
    }
    if (CFEqual(a2, @"BufferState"))
    {
      MEMORY[0x19970E290](*(void *)(DerivedStorage + 1400));
      v89 = (CFTypeRef *)&kFigPlaybackItemBufferState_Filling;
      int v90 = *(_DWORD *)(DerivedStorage + 1408);
      unsigned int v91 = (CFTypeRef *)&kFigPlaybackItemBufferState_Full;
    }
    else
    {
      if (!CFEqual(a2, @"WillKeepUpPrediction"))
      {
        if (CFEqual(a2, @"LikelyToKeepUpTrigger"))
        {
          if (*(_DWORD *)(DerivedStorage + 1352)) {
            CMTime v62 = (CFStringRef *)&kFigPlaybackItemLikelyToKeepUpTrigger_Live;
          }
          else {
            CMTime v62 = (CFStringRef *)&kFigPlaybackItemLikelyToKeepUpTrigger_Default;
          }
          goto LABEL_144;
        }
        if (!CFEqual(a2, @"ConnectionState"))
        {
          if (CFEqual(a2, @"ProgressToPlayThrough"))
          {
            LODWORD(keys.start.value) = 0;
            MEMORY[0x19970E290](*(void *)(DerivedStorage + 616));
            uint64_t v93 = *(void *)(DerivedStorage + 600);
            if (v93) {
              FigPlayabilityMonitorGetProgressToPlayThrough(v93, &keys);
            }
            MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 616));
            CFAllocatorRef v72 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            uint64_t v73 = &keys;
          }
          else
          {
            if (CFEqual(a2, @"ContinuePlayingDuringPrerollForSeek"))
            {
              CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
              int v63 = *(unsigned __int8 *)(DerivedStorage + 287);
              goto LABEL_170;
            }
            if (CFEqual(a2, @"ContinuePlayingDuringPrerollForRateChange"))
            {
              CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
              int v63 = *(unsigned __int8 *)(DerivedStorage + 288);
              goto LABEL_170;
            }
            if (CFEqual(a2, @"IFrameOnlySpeedThreshold"))
            {
              if (!*(unsigned char *)(DerivedStorage + 290))
              {
                uint64_t v94 = *(void *)(DerivedStorage + 352);
                if (v94) {
                  *(float *)(DerivedStorage + 292) = FigPlaybackBossGetIFrameOnlySpeedThreshold(v94);
                }
              }
              CFAllocatorRef v72 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              uint64_t v73 = (CMTimeRange *)(DerivedStorage + 292);
            }
            else
            {
              if (CFEqual(a2, @"UseIFrameOnlyPlaybackForHighRateScaledEdits"))
              {
                CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                int v63 = *(unsigned __int8 *)(DerivedStorage + 289);
                goto LABEL_170;
              }
              if (CFEqual(a2, @"MinimumIntervalForIFrameOnlyPlayback"))
              {
                CFAllocatorRef v51 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                keys.start.epoch = *(void *)(DerivedStorage + 312);
                *(_OWORD *)&keys.start.unsigned int value = *(_OWORD *)(DerivedStorage + 296);
                p_CMTimeRange keys = &keys;
                goto LABEL_102;
              }
              if (CFEqual(a2, @"ThoroughlyRefreshClosedCaptionsWhenSeeking"))
              {
                CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                int v63 = *(unsigned __int8 *)(DerivedStorage + 320);
                goto LABEL_170;
              }
              if (CFEqual(a2, @"PlayabilityMetrics"))
              {
                if (*(void *)(DerivedStorage + 600))
                {
                  uint64_t PlayabilityMetricsDictionary = itemfig_createPlayabilityMetricsDictionary((uint64_t)a1, a3, a4);
                  goto LABEL_70;
                }
                goto LABEL_92;
              }
              if (CFEqual(a2, @"EnableDownloadWhenInPlayQueue"))
              {
                CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                int v63 = *(unsigned __int8 *)(DerivedStorage + 1328);
                goto LABEL_170;
              }
              if (CFEqual(a2, @"EnableDownloadWhenNotInPlayQueue"))
              {
                CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                int v63 = *(unsigned __int8 *)(DerivedStorage + 1329);
                goto LABEL_170;
              }
              if (CFEqual(a2, @"AccessLog"))
              {
                if (*(unsigned char *)(DerivedStorage + 1697))
                {
                  keys.start.unsigned int value = 0;
                  uint64_t v95 = CMBaseObjectGetDerivedStorage();
                  MEMORY[0x19970E290](*(void *)(v95 + 496));
                  MutableCopCGFloat y = (__CFArray *)FigCFArrayCreateMutableCopy();
                  if (MutableCopy)
                  {
                    AccessLogEntrCGFloat y = itemfig_createAccessLogEntry((uint64_t)v10, (uint64_t)a1, (CFMutableDictionaryRef *)&keys);
                    unsigned int v98 = (const void *)keys.start.value;
                    if (!AccessLogEntry)
                    {
                      CFArrayAppendValue(MutableCopy, (const void *)keys.start.value);
                      unsigned int v98 = (const void *)keys.start.value;
                    }
                    *a4 = MutableCopy;
                    if (v98) {
                      CFRelease(v98);
                    }
                    uint64_t Duration = 0;
                  }
                  else
                  {
                    uint64_t Duration = FigSignalErrorAt();
                    *a4 = 0;
                  }
                  MEMORY[0x19970E2B0](*(void *)(v95 + 496));
                  goto LABEL_46;
                }
                goto LABEL_390;
              }
              if (CFEqual(a2, @"CanPlayFastForward")
                || CFEqual(a2, @"CanPlayFastReverse")
                || CFEqual(a2, @"CanPlayReverse")
                || CFEqual(a2, @"SupportsFrameStepping"))
              {
                goto LABEL_394;
              }
              if (CFEqual(a2, @"SoundCheckVolumeNormalization"))
              {
                CFAllocatorRef v72 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                uint64_t v73 = (CMTimeRange *)(DerivedStorage + 1440);
              }
              else
              {
                if (!CFEqual(a2, @"Volume"))
                {
                  if (CFEqual(a2, @"MediaKind"))
                  {
                    CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1448);
                    if (!DictionaryRepresentation) {
                      goto LABEL_36;
                    }
                    goto LABEL_35;
                  }
                  if (CFEqual(a2, @"LoudnessInfo"))
                  {
                    CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1456);
                    if (!DictionaryRepresentation) {
                      goto LABEL_36;
                    }
                    goto LABEL_35;
                  }
                  if (CFEqual(a2, @"VisualContextArray"))
                  {
                    MEMORY[0x19970E910](*(void *)(DerivedStorage + 1736));
                    CFArrayRef v99 = *(const __CFArray **)(DerivedStorage + 1728);
                    if (v99) {
                      CopCGFloat y = CFArrayCreateCopy(a3, v99);
                    }
                    else {
                      CopCGFloat y = 0;
                    }
                    *a4 = Copy;
                    uint64_t v86 = *(void *)(DerivedStorage + 1736);
                    goto LABEL_237;
                  }
                  if (CFEqual(a2, @"TextMarkupArray"))
                  {
                    CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1832);
                    if (!DictionaryRepresentation) {
                      goto LABEL_36;
                    }
                    goto LABEL_35;
                  }
                  if (CFEqual(a2, @"TextHighlightArray"))
                  {
                    CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1840);
                    if (!DictionaryRepresentation) {
                      goto LABEL_36;
                    }
                    goto LABEL_35;
                  }
                  if (CFEqual(a2, @"LegibleOutputs"))
                  {
                    CFDictionaryRef v101 = *(const __CFDictionary **)(DerivedStorage + 1752);
                    if (!v101) {
                      goto LABEL_53;
                    }
                  }
                  else if (CFEqual(a2, @"MetadataOutputs"))
                  {
                    CFStringRef DictionaryRepresentation = (CFStringRef)FigXMLNodeGetTag(*(void *)(DerivedStorage + 1760));
                    if (!DictionaryRepresentation) {
                      goto LABEL_36;
                    }
                    CFDictionaryRef v101 = (const __CFDictionary *)DictionaryRepresentation;
                  }
                  else
                  {
                    if (!CFEqual(a2, @"RenderedLegibleOutputs"))
                    {
                      if (CFEqual(a2, @"MediaSelectionArray"))
                      {
                        uint64_t Duration = itemfig_assureBasicsReadyForInspection(a1);
                        CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1792);
                        if (!DictionaryRepresentation) {
                          goto LABEL_37;
                        }
                        goto LABEL_64;
                      }
                      if (CFEqual(a2, @"SelectedMediaArray"))
                      {
                        uint64_t PlayabilityMetricsDictionary = itemfig_createSelectedMediaArray(a3, a1, a4);
                        goto LABEL_70;
                      }
                      if (CFEqual(a2, @"SeekingWaitsForVideoCompositionRendering"))
                      {
                        uint64_t v53 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                        int v54 = *(unsigned __int8 *)(DerivedStorage + 545);
                      }
                      else
                      {
                        if (CFEqual(a2, @"AudioProcessingTap"))
                        {
                          CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1432);
                          if (!DictionaryRepresentation) {
                            goto LABEL_36;
                          }
                          goto LABEL_35;
                        }
                        if (CFEqual(a2, @"TimePitchAlgorithm"))
                        {
                          uint64_t Duration = itemfig_assureBasicsReadyForInspection(a1);
                          CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1464);
                          goto LABEL_64;
                        }
                        if (CFEqual(a2, @"AudioProcessingUnits"))
                        {
                          CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1480);
                          if (!DictionaryRepresentation) {
                            goto LABEL_36;
                          }
                          goto LABEL_35;
                        }
                        if (CFEqual(a2, @"AudioCurves"))
                        {
                          CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1472);
                          if (!DictionaryRepresentation) {
                            goto LABEL_36;
                          }
                          goto LABEL_35;
                        }
                        if (CFEqual(a2, @"DisplayNonForcedSubtitles"))
                        {
                          uint64_t v53 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                          int v54 = *(unsigned __int8 *)(DerivedStorage + 1020);
                        }
                        else
                        {
                          if (CFEqual(a2, @"AutomaticallyLoadedAssetProperties"))
                          {
                            CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1224);
                            if (!DictionaryRepresentation) {
                              goto LABEL_36;
                            }
                            goto LABEL_35;
                          }
                          if (CFEqual(a2, @"AutomaticallyLoadedAssetTrackProperties"))
                          {
                            CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1232);
                            if (!DictionaryRepresentation) {
                              goto LABEL_36;
                            }
                            goto LABEL_35;
                          }
                          if (CFEqual(a2, @"CanPlayUpTo2xForward")) {
                            goto LABEL_394;
                          }
                          if (CFEqual(a2, @"HasEnabledAudio"))
                          {
                            uint64_t v53 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                            int v54 = *(unsigned __int8 *)(DerivedStorage + 2017);
                          }
                          else if (CFEqual(a2, @"HasEnabledVideo"))
                          {
                            uint64_t v53 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                            int v54 = *(unsigned __int8 *)(DerivedStorage + 2018);
                          }
                          else if (CFEqual(a2, @"HasDiscoveredVideo"))
                          {
                            uint64_t v53 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                            int v54 = *(unsigned __int8 *)(DerivedStorage + 2019);
                          }
                          else if (CFEqual(a2, @"PlayHapticTracks"))
                          {
                            uint64_t v53 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                            int v54 = *(unsigned __int8 *)(DerivedStorage + 1023);
                          }
                          else
                          {
                            if (CFEqual(a2, @"HapticPlaybackLocality"))
                            {
                              CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 1032);
                              if (!DictionaryRepresentation) {
                                goto LABEL_36;
                              }
                              goto LABEL_35;
                            }
                            if (CFEqual(a2, @"AudioSpatializationAllowed"))
                            {
                              uint64_t v53 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                              int v54 = *(unsigned __int8 *)(DerivedStorage + 1392);
                            }
                            else
                            {
                              if (!CFEqual(a2, @"StereoAudioSpatializationAllowed"))
                              {
                                if (CFEqual(a2, @"CoordinationIdentifier"))
                                {
                                  CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 2032);
                                  if (DictionaryRepresentation) {
                                    goto LABEL_35;
                                  }
                                  v102 = (CFStringRef *)(DerivedStorage + 2032);
                                  FPSupport_CreateDefaultCoordinationIdentifierForPlaybackItem((uint64_t)a1, v102);
                                  CFStringRef DictionaryRepresentation = *v102;
                                  if (*v102) {
                                    goto LABEL_35;
                                  }
                                  goto LABEL_390;
                                }
                                if (CFEqual(a2, @"ParticipatesInCoordinatedPlayback"))
                                {
                                  CMTime v62 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                                  int v63 = *(unsigned __int8 *)(DerivedStorage + 2040);
                                  goto LABEL_170;
                                }
                                if (CFEqual(a2, @"IsCoordinatedPlaybackSupported")) {
                                  goto LABEL_394;
                                }
                                if (!CFEqual(a2, @"ReportingAgent"))
                                {
                                  if (CFEqual(a2, @"ArtificiallyDelayPreparingItemForTestingOnly"))
                                  {
                                    CFStringRef DictionaryRepresentation = (CFStringRef)FigCFNumberCreateFloat64();
                                    goto LABEL_36;
                                  }
                                  if (CFEqual(a2, @"SpeedRampData"))
                                  {
                                    CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 2072);
                                    if (!DictionaryRepresentation) {
                                      goto LABEL_36;
                                    }
                                    goto LABEL_35;
                                  }
                                  if (CFEqual(a2, @"OverlapRange"))
                                  {
                                    CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 2080);
                                    if (!DictionaryRepresentation) {
                                      goto LABEL_36;
                                    }
                                    goto LABEL_35;
                                  }
                                  if (!CFEqual(a2, @"UniqueInstanceIdentifier"))
                                  {
                                    if (CFEqual(a2, @"ImageQueueGauge"))
                                    {
                                      CFStringRef DictionaryRepresentation = (CFStringRef)itemfig_copyImageQueueGauge((uint64_t)a1, (uint64_t)a3);
                                      goto LABEL_36;
                                    }
                                    if (!CFEqual(a2, @"PriorImageQueueGauge"))
                                    {
                                      uint64_t Duration = 4294954512;
                                      goto LABEL_46;
                                    }
                                    CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 2144);
                                    if (!DictionaryRepresentation) {
                                      goto LABEL_36;
                                    }
                                    goto LABEL_35;
                                  }
                                  CFStringRef v104 = *(const __CFString **)(DerivedStorage + 2136);
                                  if (v104)
                                  {
                                    CFStringRef DictionaryRepresentation = CFStringCreateCopy(a3, v104);
                                    goto LABEL_36;
                                  }
                                  goto LABEL_53;
                                }
                                MEMORY[0x19970E910](*(void *)(DerivedStorage + 1896));
                                unsigned int v103 = *(void **)(DerivedStorage + 1904);
                                if (v103) {
                                  unsigned int v103 = (void *)CFRetain(v103);
                                }
                                *a4 = (__CFDictionary *)v103;
                                uint64_t v86 = *(void *)(DerivedStorage + 1896);
LABEL_237:
                                MEMORY[0x19970E930](v86);
                                goto LABEL_58;
                              }
                              uint64_t v53 = (CFStringRef *)MEMORY[0x1E4F1CFD0];
                              int v54 = *(unsigned __int8 *)(DerivedStorage + 1393);
                            }
                          }
                        }
                      }
LABEL_116:
                      if (!v54) {
                        uint64_t v53 = (CFStringRef *)MEMORY[0x1E4F1CFC8];
                      }
                      CFStringRef DictionaryRepresentation = *v53;
                      if (!*v53) {
                        goto LABEL_36;
                      }
                      goto LABEL_35;
                    }
                    CFDictionaryRef v101 = *(const __CFDictionary **)(DerivedStorage + 1784);
                    if (!v101) {
                      goto LABEL_53;
                    }
                  }
                  CFStringRef DictionaryRepresentation = (CFStringRef)CFDictionaryCreateCopy(a3, v101);
                  goto LABEL_36;
                }
                CFAllocatorRef v72 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                uint64_t v73 = (CMTimeRange *)(DerivedStorage + 1428);
              }
            }
          }
          CFNumberType v74 = kCFNumberFloat32Type;
          goto LABEL_156;
        }
        MEMORY[0x19970E290](*(void *)(DerivedStorage + 1400));
        unsigned int v92 = *(__CFDictionary **)(DerivedStorage + 1416);
        if (!v92)
        {
LABEL_266:
          *a4 = v92;
          MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 1400));
          goto LABEL_58;
        }
LABEL_265:
        unsigned int v92 = (__CFDictionary *)CFRetain(v92);
        goto LABEL_266;
      }
      MEMORY[0x19970E290](*(void *)(DerivedStorage + 1400));
      v89 = (CFTypeRef *)&kFigPlaybackItemWillKeepUpPrediction_LikelyToKeepUp;
      int v90 = *(_DWORD *)(DerivedStorage + 1424);
      unsigned int v91 = (CFTypeRef *)&kFigPlaybackItemWillKeepUpPrediction_UnlikelyToKeepUp;
    }
    if (v90) {
      v89 = v91;
    }
    unsigned int v92 = (__CFDictionary *)*v89;
    goto LABEL_265;
  }
  CFStringRef DictionaryRepresentation = *(CFStringRef *)(DerivedStorage + 336);
  if (DictionaryRepresentation) {
LABEL_35:
  }
    CFStringRef DictionaryRepresentation = (CFStringRef)CFRetain(DictionaryRepresentation);
LABEL_36:
  uint64_t Duration = 0;
LABEL_37:
  *a4 = (__CFDictionary *)DictionaryRepresentation;
LABEL_46:
  CFRelease(v10);
  return Duration;
}

uint64_t itemasync_GetDuration(const void *a1, uint64_t a2)
{
  uint64_t v13 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a2
    && (uint64_t v5 = MEMORY[0x1E4F1F9F8],
        *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8],
        *(void *)(a2 + 16) = *(void *)(v5 + 16),
        !*DerivedStorage))
  {
    uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v7)
    {
      uint64_t v8 = (const void *)v7;
      if (*(_DWORD *)CMBaseObjectGetDerivedStorage())
      {
        uint64_t v11 = FigSignalErrorAt();
        uint64_t v10 = 0;
      }
      else
      {
        uint64_t v9 = playerasync_createCommand(v8, 29, a1, &v13);
        uint64_t v10 = (_DWORD *)v13;
        if (v9)
        {
          uint64_t v11 = v9;
        }
        else
        {
          *(void *)(v13 + 32) = a2;
          playerasync_runSynchronousCommand((uint64_t)v8, v10);
          uint64_t v11 = v10[7];
        }
      }
      fpa_releaseCommand(v10);
      CFRelease(v8);
      return v11;
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
      fpa_releaseCommand(0);
      return v12;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemfig_GetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef dictionaryRepresentation = 0;
  if (*(unsigned char *)DerivedStorage || !a2)
  {
    return FigSignalErrorAt();
  }
  uint64_t v7 = v5;
  uint64_t v8 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
  *(void *)(a2 + 16) = *(void *)(v8 + 16);
  if ((*(_DWORD *)(DerivedStorage + 248) & 0x1D) != 1) {
    goto LABEL_11;
  }
  CMTime time1 = *(CMTime *)(DerivedStorage + 236);
  long long v26 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&time2.unsigned int value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  time2.CMTimeEpoch epoch = v9;
  if (CMTimeCompare(&time1, &time2) < 0) {
    goto LABEL_11;
  }
  if ((*(_DWORD *)(DerivedStorage + 272) & 0x1D) == 1
    && (CMTime time1 = *(CMTime *)(DerivedStorage + 260),
        *(_OWORD *)&time2.unsigned int value = v26,
        time2.CMTimeEpoch epoch = v9,
        CMTimeCompare(&time1, &time2) >= 1))
  {
    uint64_t v10 = 0;
    uint64_t v11 = MEMORY[0x1E4F1FA10];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA10];
    CMTimeEpoch epoch = *(void *)(v11 + 16);
  }
  else
  {
LABEL_11:
    int v13 = *(unsigned __int8 *)(v7 + 78);
    uint64_t v14 = *MEMORY[0x1E4F1CF80];
    if (v13
      || ((uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1), (v20 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
        ? (uint64_t v21 = 0)
        : (uint64_t v21 = v20),
          (long long v25 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v21 + 48)) == 0
       || v25(FigBaseObject, @"EstimatedDuration", v14, &dictionaryRepresentation)
       || !dictionaryRepresentation))
    {
      CFNumberRef v15 = (CMTime *)CMBaseObjectGetDerivedStorage();
      time2.unsigned int value = 0;
      uint64_t CMBaseObject = FigAssetGetCMBaseObject(v15[50].epoch);
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      CFArrayRef v22 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v18 + 48);
      if (v22)
      {
        uint64_t v10 = v22(CMBaseObject, @"Duration", v14, &time2);
        unsigned int value = (const void *)time2.value;
        if (!v10)
        {
          CMTimeMakeFromDictionary(&time1, (CFDictionaryRef)time2.value);
          v15[49] = time1;
          unsigned int value = (const void *)time2.value;
        }
        if (value) {
          CFRelease(value);
        }
        if (!v10)
        {
          long long v24 = *(_OWORD *)(DerivedStorage + 1176);
          *(void *)(a2 + 16) = *(void *)(DerivedStorage + 1192);
          *(_OWORD *)a2 = v24;
        }
      }
      else
      {
        uint64_t v10 = 4294954514;
      }
      goto LABEL_32;
    }
    CMTimeMakeFromDictionary(&time1, dictionaryRepresentation);
    uint64_t v10 = 0;
    *(_OWORD *)a2 = *(_OWORD *)&time1.value;
    CMTimeEpoch epoch = time1.epoch;
  }
  *(void *)(a2 + 16) = epoch;
LABEL_32:
  if (dictionaryRepresentation) {
    CFRelease(dictionaryRepresentation);
  }
  return v10;
}

uint64_t playerasync_AddToPlayQueue(void *a1, const void *a2, const void *a3)
{
  CFDictionaryRef v19 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v7 = (_DWORD *)CMBaseObjectGetDerivedStorage();
    if (a3)
    {
LABEL_3:
      uint64_t v8 = (_DWORD *)CMBaseObjectGetDerivedStorage();
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (a3) {
      goto LABEL_3;
    }
  }
  uint64_t v8 = 0;
LABEL_6:
  if (*DerivedStorage || !a2 || *v7) {
    goto LABEL_7;
  }
  if (!v8)
  {
    uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    if ((void *)v10 == a1)
    {
      uint64_t v12 = 0;
LABEL_20:
      uint64_t v16 = playerasync_createCommand(a1, 6, a2, &v19);
      if (v16)
      {
        uint64_t v14 = v16;
        CFNumberRef v15 = v19;
      }
      else
      {
        if (a3) {
          CFTypeRef v17 = CFRetain(a3);
        }
        else {
          CFTypeRef v17 = 0;
        }
        uint64_t v18 = v19;
        v19[4] = v17;
        playerasync_runAsynchronousCommand(a1, v18);
        CFNumberRef v15 = 0;
        uint64_t v14 = 0;
      }
      goto LABEL_25;
    }
LABEL_30:
    a1 = (void *)v10;
    uint64_t v14 = FigSignalErrorAt();
    CFNumberRef v15 = 0;
    uint64_t v12 = 0;
    goto LABEL_25;
  }
  if (*v8)
  {
LABEL_7:
    return FigSignalErrorAt();
  }
  uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
  if ((void *)v10 != a1) {
    goto LABEL_30;
  }
  uint64_t v11 = FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v12 = a1;
  if ((void *)v11 == a1) {
    goto LABEL_20;
  }
  int v13 = (const void *)v11;
  uint64_t v14 = FigSignalErrorAt();
  CFNumberRef v15 = 0;
  uint64_t v12 = v13;
LABEL_25:
  fpa_releaseCommand(v15);
  if (a1) {
    CFRelease(a1);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v14;
}

uint64_t playercentral_AddToPlayQueue(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  if (a3) {
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v7 = 0;
  }
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v9 = *(void *)(DerivedStorage + 16);
    if (v9)
    {
      if (!*(unsigned char *)(v6 + 16))
      {
        if (!v7)
        {
          uint64_t v10 = 0;
          goto LABEL_15;
        }
        if (!*(unsigned char *)(v7 + 16))
        {
          uint64_t v10 = *(void *)(v7 + 8);
LABEL_15:
          uint64_t v11 = *(void *)(v6 + 8);
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v12) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = 0;
          }
          uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
          if (v14 && !v14(v9, v11, v10))
          {
            MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
            CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 80), a2);
            MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
          }
          return 0;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t playerfig_AddToPlayQueue(const void *a1, __CFString *a2, const void *a3)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BF0)
  {
    unsigned int v64 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v8 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a1) {
      uint64_t v9 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    }
    else {
      uint64_t v9 = "";
    }
    strncpy(__dst, v9, 8uLL);
    if (a2) {
      uint64_t v10 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    }
    else {
      uint64_t v10 = "";
    }
    strncpy(__dst, v10, 8uLL);
    if (a3) {
      uint64_t v11 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    }
    else {
      uint64_t v11 = "";
    }
    strncpy(__dst, v11, 8uLL);
    kdebug_trace();
  }
  if (*(unsigned char *)DerivedStorage) {
    return FigSignalErrorAt();
  }
  if (!a2) {
    return FigSignalErrorAt();
  }
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)v12) {
    return FigSignalErrorAt();
  }
  uint64_t v13 = v12;
  if (*(const void **)(v12 + 8) != a1) {
    return FigSignalErrorAt();
  }
  if (a3)
  {
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)v16) {
      return FigSignalErrorAt();
    }
    uint64_t v17 = v16;
    if (*(const void **)(v16 + 8) != a1) {
      return FigSignalErrorAt();
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  if (*(unsigned char *)(v13 + 1240)
    || *(unsigned char *)(v13 + 1242)
    || (*(unsigned char *)(v13 + 1242) = 1,
        AssetBasicsIfReadCGFloat y = itemfig_retrieveAssetBasicsIfReady(a2),
        !AssetBasicsIfReady))
  {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    if (!*(unsigned char *)(v13 + 1) && (!a3 || *(unsigned char *)(v17 + 1)))
    {
      CFDictionaryRef v19 = *(__CFArray **)(v13 + 1512);
      if (v19) {
        CFArrayRemoveAllValues(v19);
      }
      if (*(unsigned char *)(DerivedStorage + 813) && dword_1E9350BF0)
      {
        unsigned int v64 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        char v61 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *(unsigned char *)(DerivedStorage + 813) = 0;
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
      if (a3)
      {
        v74.location = 0;
        v74.length = Count;
        CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v74, a3);
        if (FirstIndexOfValue != -1)
        {
          CFIndex v22 = FirstIndexOfValue + 1;
          if (FirstIndexOfValue + 1 < Count)
          {
            CFNumberRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), v22);
            playerfig_maybeUndoQueueingForItem((uint64_t)a1, ValueAtIndex);
          }
LABEL_44:
          long long v25 = *(const void **)(DerivedStorage + 512);
          CFIndex v62 = v22;
          if (v25)
          {
            v75.location = 0;
            v75.length = Count;
            CFIndex v26 = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v75, v25);
            if (v26 == -1)
            {
              unsigned int v64 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              CFNumberRef v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
              char v59 = 1;
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              char v60 = 0;
              uint64_t v58 = 0;
              *(void *)(DerivedStorage + 512) = 0;
              goto LABEL_59;
            }
            if (v22 > v26)
            {
              if (v22 == v26 + 1)
              {
                uint64_t v58 = CMBaseObjectGetDerivedStorage();
                if (*(unsigned char *)(v58 + 496))
                {
                  if (dword_1E9350BF0)
                  {
                    unsigned int v64 = 0;
                    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                    CFNumberRef v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
                    char v60 = 1;
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    char v59 = 0;
                  }
                  else
                  {
                    char v59 = 0;
                    char v60 = 1;
                  }
LABEL_59:
                  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 504), v22, a2);
                  *(unsigned char *)(v13 + 1) = 1;
                  itemfig_reportingAgentReportEnqueueTime();
                  CFNumberRef v30 = *(const void **)(v13 + 1384);
                  if (v30)
                  {
                    CFRelease(v30);
                    *(void *)(v13 + 1384) = 0;
                  }
                  if (*(void *)(v13 + 128))
                  {
                    CMByteStreamGetCMBaseObject();
                    FigCRABSGetClassID();
                    if (CMBaseObjectIsMemberOfClass()) {
                      CMByteStreamCopyProperty(*(void *)(v13 + 128), @"CRABS_InteractivePlaybackAssertion", 0, v13 + 1384);
                    }
                  }
                  *(unsigned char *)(v13 + 1288) = 0;
                  if (v22)
                  {
                    *(void *)(v13 + 1552) = 0;
                    *(unsigned char *)(v13 + 1696) = 0;
LABEL_90:
                    uint64_t v39 = fp_copyPlayQueueDescription();
                    if (dword_1E9350BF0)
                    {
                      unsigned int v64 = 0;
                      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                      uint64_t v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      unsigned int v41 = v64;
                      if (os_log_type_enabled(v40, type)) {
                        unsigned int v42 = v41;
                      }
                      else {
                        unsigned int v42 = v41 & 0xFFFFFFFE;
                      }
                      if (v42)
                      {
                        if (a1) {
                          uint64_t v43 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
                        }
                        else {
                          uint64_t v43 = "";
                        }
                        *(_DWORD *)BOOL v65 = 136315906;
                        *(void *)&v65[4] = "playerfig_AddToPlayQueue";
                        *(_WORD *)&v65[12] = 2048;
                        *(void *)&v65[14] = a1;
                        *(_WORD *)&v65[22] = 2082;
                        __int16 v66 = v43;
                        __int16 v67 = 2114;
                        double v68 = v39;
                        _os_log_send_and_compose_impl();
                      }
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                      CFIndex v22 = v62;
                    }
                    if (v39) {
                      CFRelease(v39);
                    }
                    if (v60)
                    {
                      uint64_t v44 = *(const void **)(DerivedStorage + 512);
                      if (v44)
                      {
                        if ((v59 & 1) == 0)
                        {
                          *(unsigned char *)(v58 + 496) = 0;
                          playerfig_prepareNextItemForTransition(a1, v44);
                        }
                      }
                      else
                      {
                        *(void *)(DerivedStorage + 512) = a2;
                        *(void *)(DerivedStorage + 520) = 0;
                        int v50 = playerfig_prepareWorkingItem(a1, 0, 0);
                        if (v50)
                        {
                          int v51 = v50;
                          unsigned int v64 = 0;
                          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                          long long v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                          unsigned int v53 = v64;
                          if (os_log_type_enabled(v52, type)) {
                            unsigned int v54 = v53;
                          }
                          else {
                            unsigned int v54 = v53 & 0xFFFFFFFE;
                          }
                          if (v54)
                          {
                            *(_DWORD *)BOOL v65 = 136315394;
                            *(void *)&v65[4] = "playerfig_AddToPlayQueue";
                            *(_WORD *)&v65[12] = 1024;
                            *(_DWORD *)&v65[14] = v51;
                            _os_log_send_and_compose_impl();
                          }
                          fig_log_call_emit_and_clean_up_after_send_and_compose();
                          CFIndex v22 = v62;
                        }
                      }
                      playerfig_updateStartHostTimeEstimatesOfItemAtIndexAndFollowingItems((uint64_t)a1, v22);
                      MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
                    }
                    else
                    {
                      MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
                      *(_OWORD *)__dst = *MEMORY[0x1E4F1F9F8];
                      uint64_t v72 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
                      *(_OWORD *)BOOL v65 = *(_OWORD *)__dst;
                      *(void *)&v65[16] = v72;
                      int v45 = playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)__dst, (uint64_t)v65, 0);
                      if (v45)
                      {
                        int v46 = v45;
                        unsigned int v64 = 0;
                        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                        uint64_t v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        unsigned int v48 = v64;
                        if (os_log_type_enabled(v47, type)) {
                          unsigned int v49 = v48;
                        }
                        else {
                          unsigned int v49 = v48 & 0xFFFFFFFE;
                        }
                        if (v49)
                        {
                          *(_DWORD *)BOOL v65 = 136315394;
                          *(void *)&v65[4] = "playerfig_AddToPlayQueue";
                          *(_WORD *)&v65[12] = 1024;
                          *(_DWORD *)&v65[14] = v46;
                          _os_log_send_and_compose_impl();
                        }
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        CFIndex v22 = v62;
                      }
                    }
                    playerfig_configureDownloadInPlayQueue();
                    if (!v22)
                    {
                      playerfig_applyEQPreset((uint64_t)a1);
                      CMNotificationCenterGetDefaultLocalCenter();
                      FigDispatchAsyncPostNotification();
                      CMNotificationCenterGetDefaultLocalCenter();
                      FigDispatchAsyncPostNotification();
                      playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(a1, @"ReasonAddToPlayQueue");
                      playerfig_updatePlaybackStateAndBossRate(a1, 7, 0);
                    }
                    uint64_t v14 = 0;
                    goto LABEL_125;
                  }
                  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                  *(CFAbsoluteTime *)(v13 + 1552) = CFAbsoluteTimeGetCurrent();
                  *(unsigned char *)(v13 + 1696) = 1;
                  itemfig_makePlaybackPrerequisitePropertiesReady((uint64_t)a2, &type);
                  if (type)
                  {
                    *(unsigned char *)(v13 + 1288) = 1;
                    if (*(_DWORD *)(DerivedStorage + 60) == 2)
                    {
                      itemfig_becameBothCurrentAndReadyForInspection((uint64_t)a2, 0);
LABEL_89:
                      CFIndex v22 = v62;
                      goto LABEL_90;
                    }
                    if (!dword_1E9350BF0) {
                      goto LABEL_89;
                    }
                    unsigned int v64 = 0;
                    CFDictionaryRef v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v35 = v64;
                    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v36 = v35;
                    }
                    else {
                      unsigned int v36 = v35 & 0xFFFFFFFE;
                    }
                    if (v36)
                    {
                      if (!a1)
                      {
                        unsigned int v37 = "";
                        goto LABEL_87;
                      }
                      goto LABEL_82;
                    }
                  }
                  else
                  {
                    if (!dword_1E9350BF0) {
                      goto LABEL_89;
                    }
                    unsigned int v64 = 0;
                    CFDictionaryRef v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v32 = v64;
                    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v33 = v32;
                    }
                    else {
                      unsigned int v33 = v32 & 0xFFFFFFFE;
                    }
                    if (v33)
                    {
                      if (!a1)
                      {
                        unsigned int v37 = "";
                        goto LABEL_87;
                      }
LABEL_82:
                      unsigned int v37 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
LABEL_87:
                      uint64_t v38 = CMBaseObjectGetDerivedStorage();
                      *(_DWORD *)BOOL v65 = 136316162;
                      *(void *)&v65[4] = "playerfig_AddToPlayQueue";
                      *(_WORD *)&v65[12] = 2048;
                      *(void *)&v65[14] = a1;
                      *(_WORD *)&v65[22] = 2082;
                      __int16 v66 = v37;
                      __int16 v67 = 2048;
                      double v68 = a2;
                      __int16 v69 = 2082;
                      uint64_t v70 = v38 + 2048;
                      _os_log_send_and_compose_impl();
                    }
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  goto LABEL_89;
                }
LABEL_53:
                char v59 = 1;
                char v60 = 1;
                goto LABEL_59;
              }
LABEL_52:
              uint64_t v58 = 0;
              goto LABEL_53;
            }
            if (dword_1E9350BF0)
            {
LABEL_56:
              unsigned int v64 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              CFNumberRef v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
              char v59 = 1;
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              char v60 = 0;
              uint64_t v58 = 0;
              goto LABEL_59;
            }
          }
          else
          {
            if (Count) {
              goto LABEL_52;
            }
            if (dword_1E9350BF0) {
              goto LABEL_56;
            }
          }
          uint64_t v58 = 0;
          char v59 = 1;
          char v60 = 0;
          goto LABEL_59;
        }
        unsigned int v64 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        long long v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a3 = 0;
      }
      CFIndex v22 = Count;
      goto LABEL_44;
    }
    uint64_t v14 = FigSignalErrorAt();
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 496));
  }
  else
  {
    uint64_t v14 = AssetBasicsIfReady;
  }
LABEL_125:
  if (*v8 == 1)
  {
    if (a1) {
      double v55 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    }
    else {
      double v55 = "";
    }
    strncpy(__dst, v55, 8uLL);
    uint64_t v56 = CMBaseObjectGetDerivedStorage();
    strncpy(__dst, (const char *)(v56 + 2048), 8uLL);
    if (a3) {
      CFTypeRef v57 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    }
    else {
      CFTypeRef v57 = "";
    }
    strncpy(__dst, v57, 8uLL);
    kdebug_trace();
  }
  return v14;
}

uint64_t itemfig_copyFormatDescription(uint64_t a1, uint64_t *a2)
{
  CFArrayRef theArray = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v5 + 48);
  if (v6)
  {
    uint64_t v7 = v6(FigBaseObject, @"TrackFormatDescriptionArray", *MEMORY[0x1E4F1CF80], &theArray);
    if (!v7)
    {
      if (!theArray) {
        return 4294954513;
      }
      if (CFArrayGetCount(theArray))
      {
        CFArrayGetValueAtIndex(theArray, 0);
        uint64_t v8 = 0;
        *a2 = FigFormatDescriptionRetain();
        goto LABEL_10;
      }
      uint64_t v7 = FigSignalErrorAt();
    }
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v8 = 4294954514;
  }
LABEL_10:
  if (theArray) {
    CFRelease(theArray);
  }
  return v8;
}

uint64_t FigMetadataReaderGetClassID()
{
  return sFigMetadataReaderClassID;
}

uint64_t RegisterFigMetadataReaderBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigMetadataValidateHandlerType(uint64_t a1, unint64_t a2)
{
  if (a2 < 0x18) {
    return 4294954687;
  }
  else {
    return FigAtomStreamReadCurrentAtomData();
  }
}

uint64_t FigiTunesMetadataCopyValue(uint64_t a1, CFTypeRef cf1, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6, CFTypeRef *a7)
{
  CFTypeRef v28 = 0;
  CFTypeRef cf = 0;
  if (a1)
  {
    if (a3 && cf1 && a6 && (CFEqual(cf1, @"comn") || CFEqual(cf1, @"itsk") || CFEqual(cf1, @"itlk")))
    {
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t))(v15 + 40);
      if (!v16 || (uint64_t v17 = v16(a1, cf1, a3), v17 < 1))
      {
        int v25 = 0;
        unsigned int v24 = 0;
        goto LABEL_24;
      }
      uint64_t v18 = v17;
      uint64_t v19 = 0;
      while (1)
      {
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v21 = v20 ? v20 : 0;
        CFIndex v22 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, CFTypeRef *, CFTypeRef *))(v21 + 48);
        if (!v22) {
          break;
        }
        unsigned int v23 = v22(a1, cf1, a3, v19, a5, &cf, &v28);
        if (v23)
        {
          unsigned int v24 = v23;
LABEL_36:
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_38;
        }
        if (!a4 || CFGetTypeID(cf) == a4)
        {
          *a6 = cf;
          CFTypeRef cf = 0;
          unsigned int v24 = 0;
          if (a7)
          {
            *a7 = v28;
            int v25 = 1;
            goto LABEL_26;
          }
          int v25 = 1;
          goto LABEL_24;
        }
        CFRelease(cf);
        CFTypeRef cf = 0;
        CFRelease(v28);
        CFTypeRef v28 = 0;
        if (v18 == ++v19)
        {
          unsigned int v24 = 0;
          goto LABEL_36;
        }
      }
      unsigned int v24 = -12782;
      goto LABEL_36;
    }
    unsigned int v24 = FigSignalErrorAt();
LABEL_38:
    int v25 = 0;
LABEL_24:
    if (v28) {
      CFRelease(v28);
    }
  }
  else
  {
    unsigned int v24 = FigSignalErrorAt();
    int v25 = 0;
  }
LABEL_26:
  if (a4) {
    unsigned int v26 = -12608;
  }
  else {
    unsigned int v26 = -12607;
  }
  if (v25 | v24) {
    return v24;
  }
  else {
    return v26;
  }
}

char *FigiTunesMetadataGetItemCount(const void *a1, const void *a2, const __CFString *a3)
{
  CFNumberRef v27 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t CommonKeyToShortKeyMapping = FigiTunesMetadataGetCommonKeyToShortKeyMapping();
  if (!DerivedStorage) {
    goto LABEL_53;
  }
  memset(v26, 0, sizeof(v26));
  memset(v25, 0, sizeof(v25));
  uint64_t valuePtr = 0;
  if (a2)
  {
    CFDictionaryRef v8 = (const __CFDictionary *)CommonKeyToShortKeyMapping;
    if (CFEqual(a2, @"comn"))
    {
      if (a3)
      {
        CFTypeID v9 = CFGetTypeID(a3);
        if (v9 == CFStringGetTypeID())
        {
          HIDWORD(valuePtr) = CFDictionaryGetValue(v8, a3);
          if (!HIDWORD(valuePtr)) {
            return 0;
          }
          goto LABEL_22;
        }
      }
    }
    else if (CFEqual(a2, @"itsk"))
    {
      if (!a3) {
        goto LABEL_22;
      }
      CFTypeID v12 = CFGetTypeID(a3);
      if (v12 == CFStringGetTypeID())
      {
        if (!FigiTunesMetadataShortStringKeyToOSTypeKey(a3, (unsigned int *)&valuePtr + 1)) {
          goto LABEL_53;
        }
      }
      else
      {
        CFTypeID v14 = CFGetTypeID(a3);
        if (v14 != CFNumberGetTypeID()
          || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (char *)&valuePtr + 4))
        {
          goto LABEL_53;
        }
      }
      if (HIDWORD(valuePtr) != 757935405)
      {
LABEL_22:
        int v10 = 0;
        int v11 = 1;
LABEL_23:
        if (*(uint64_t *)(DerivedStorage + 24) < 1
          || FigiTunesMetadataGetItemListAtomStream(DerivedStorage, (uint64_t)v26, 0))
        {
          return 0;
        }
        uint64_t v15 = 0;
        if (!a2)
        {
          int v11 = 1;
          int v10 = 1;
        }
        while (1)
        {
          if (FigAtomStreamGetCurrentAtomTypeAndDataLength()) {
            return 0;
          }
          if (valuePtr == 757935405)
          {
            if (v10)
            {
              if (!a3)
              {
                CFStringRef theString2 = 0;
                DataAtomCFIndex Count = FigiTunesMetadataGetDataAtomCount((uint64_t)v25, &theString2);
                uint64_t v15 = (char *)theString2 + (void)v15;
                CFNumberRef v27 = v15;
                goto LABEL_39;
              }
              CFStringRef theString2 = 0;
              CFAllocatorRef v16 = CFGetAllocator(a1);
              int v17 = FigiTunesMetadataCopyLongKey((uint64_t)v25, v16, &theString2);
              if (v17) {
                goto LABEL_54;
              }
              CFStringRef v18 = theString2;
              if (theString2)
              {
                if (CFEqual(a3, theString2))
                {
                  DataAtomCFIndex Count = FigiTunesMetadataGetDataAtomCount((uint64_t)v25, &v27);
                  CFRelease(v18);
                  goto LABEL_48;
                }
                CFRelease(v18);
              }
            }
          }
          else if (v11 && (!a3 || HIDWORD(valuePtr) == valuePtr))
          {
            CFStringRef theString2 = 0;
            DataAtomCFIndex Count = FigiTunesMetadataGetDataAtomCount((uint64_t)v25, &theString2);
            if (a3) {
              uint64_t v21 = 0;
            }
            else {
              uint64_t v21 = v15;
            }
            uint64_t v15 = (char *)theString2 + (void)v21;
            CFNumberRef v27 = (char *)theString2 + (void)v21;
            if (a3) {
              goto LABEL_48;
            }
            goto LABEL_39;
          }
          DataAtomCFIndex Count = 0;
LABEL_39:
          int Atom = FigAtomStreamAdvanceToNextAtom();
          if (Atom)
          {
            if (Atom != -12890) {
              return 0;
            }
            goto LABEL_48;
          }
        }
      }
    }
    else if (CFEqual(a2, @"itlk"))
    {
      if (!a3 || (CFTypeID v13 = CFGetTypeID(a3), v13 == CFStringGetTypeID()))
      {
        int v11 = 0;
        int v10 = 1;
        goto LABEL_23;
      }
    }
  }
  else if (!a3)
  {
    int v10 = 0;
    int v11 = 0;
    goto LABEL_23;
  }
LABEL_53:
  int v17 = FigSignalErrorAt();
LABEL_54:
  DataAtomCFIndex Count = v17;
LABEL_48:
  if (DataAtomCount) {
    return 0;
  }
  else {
    return v27;
  }
}

uint64_t FigiTunesMetadataGetCommonKeyToShortKeyMapping()
{
  return giTunesMetadataCommonKeyToShortKeyDict;
}

CFDictionaryRef FigiTunesMetadataSetUpCommonKeyMapping()
{
  keys[12] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"title";
  keys[1] = @"description";
  keys[2] = @"publisher";
  keys[3] = @"contributor";
  keys[4] = @"type";
  keys[5] = @"source";
  keys[6] = @"copyrights";
  keys[7] = @"albumName";
  keys[8] = @"author";
  keys[9] = @"artist";
  keys[10] = @"artwork";
  keys[11] = @"software";
  v2[0] = @"title";
  v2[1] = @"description";
  v2[2] = @"publisher";
  v2[3] = @"contributor";
  v2[4] = @"contributor";
  v2[5] = @"contributor";
  v2[6] = @"contributor";
  v2[7] = @"type";
  v2[8] = @"source";
  v2[9] = @"copyrights";
  v2[10] = @"albumName";
  v2[11] = @"author";
  v2[12] = @"artist";
  v2[13] = @"artwork";
  v2[14] = @"software";
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  giTunesMetadataCommonKeyToShortKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&FigiTunesMetadataSetUpCommonKeyMapping_toShortKeys, 12, MEMORY[0x1E4F1D530], 0);
  CFDictionaryRef result = CFDictionaryCreate(v0, (const void **)&FigiTunesMetadataSetUpCommonKeyMapping_fromShortKeys, v2, 15, 0, MEMORY[0x1E4F1D540]);
  giTunesMetadataShortKeyToCommonKeyDict = (uint64_t)result;
  return result;
}

CFIndex FigiTunesMetadataShortStringKeyToOSTypeKey(const __CFString *a1, unsigned int *a2)
{
  MEMORY[0x19970EE10](&FigiTunesMetadataSetUpStringKeyMappingOnce_sCreateKeyArrayOnce, FigiTunesMetadataSetUpStringKeyMapping);
  unsigned int Value = CFDictionaryGetValue((CFDictionaryRef)giTunesMetadataShortStringKeyToOSTypeKeyDict, a1);
  *(_DWORD *)buffer = Value;
  if (Value) {
    goto LABEL_2;
  }
  if (CFStringGetLength(a1) != 4) {
    return 0;
  }
  v7.location = 0;
  v7.length = 4;
  CFIndex result = CFStringGetBytes(a1, v7, 0, 0, 0, buffer, 4, 0);
  if (result)
  {
    unsigned int Value = bswap32(*(unsigned int *)buffer);
LABEL_2:
    *a2 = Value;
    return 1;
  }
  return result;
}

CFDictionaryRef FigiTunesMetadataSetUpStringKeyMapping()
{
  keys[50] = *(void **)MEMORY[0x1E4F143B8];
  keys[0] = @"@alb";
  keys[1] = @"@ART";
  keys[2] = @"@cmt";
  keys[3] = @"covr";
  keys[4] = @"cprt";
  keys[5] = @"@day";
  keys[6] = @"@enc";
  keys[7] = @"gnre";
  keys[8] = @"@gen";
  keys[9] = @"@nam";
  keys[10] = @"@st3";
  keys[11] = @"@too";
  keys[12] = @"@wrt";
  keys[13] = @"aART";
  keys[14] = @"akID";
  keys[15] = @"apID";
  keys[16] = @"atID";
  keys[17] = @"cnID";
  keys[18] = @"cpil";
  keys[19] = @"disk";
  keys[20] = @"geID";
  keys[21] = @"grup";
  keys[22] = @"plID";
  keys[23] = @"rtng";
  keys[24] = @"tmpo";
  keys[25] = @"trkn";
  keys[26] = @"stik";
  keys[27] = @"purd";
  keys[28] = @"@ard";
  keys[29] = @"@arg";
  keys[30] = @"@aut";
  keys[31] = @"@lyr";
  keys[32] = @"@cak";
  keys[33] = @"@con";
  keys[34] = @"@des";
  keys[35] = @"@dir";
  keys[36] = @"@equ";
  keys[37] = @"@lnt";
  keys[38] = @"@mak";
  keys[39] = @"@ope";
  keys[40] = @"@phg";
  keys[41] = @"@prd";
  keys[42] = @"@prf";
  keys[43] = @"@pub";
  keys[44] = @"@sne";
  keys[45] = @"@sol";
  keys[46] = @"@src";
  keys[47] = @"@thx";
  keys[48] = @"@url";
  keys[49] = @"@xpd";
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  giTunesMetadataShortStringKeyToOSTypeKeyDict = (uint64_t)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&FigiTunesMetadataSetUpStringKeyMapping_iTunesShortOSTypeKeys, 50, MEMORY[0x1E4F1D530], 0);
  CFDictionaryRef result = CFDictionaryCreate(v0, (const void **)&FigiTunesMetadataSetUpStringKeyMapping_iTunesShortOSTypeKeys, (const void **)keys, 50, 0, MEMORY[0x1E4F1D540]);
  giTunesMetadataOSTypeKeyToShortStringKeyDict = (uint64_t)result;
  return result;
}

uint64_t FigiTunesMetadataGetItemListAtomStream(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(uint64_t *)(a1 + 24) < 1) {
    return 0;
  }
  uint64_t result = FigAtomStreamInitWithByteStream();
  if (!result)
  {
    if (a3 < 0)
    {
      return FigSignalErrorAt();
    }
    else
    {
      return FigAtomStreamInitWithParent();
    }
  }
  return result;
}

uint64_t itemfig_antiprepare(const void *a1)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BF0 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  itemfig_unregisterPlayabilityMonitor();
  uint64_t v4 = *(__CFSet **)(DerivedStorage + 360);
  if (v4)
  {
    CFSetRemoveAllValues(v4);
    CFRelease(*(CFTypeRef *)(DerivedStorage + 360));
    *(void *)(DerivedStorage + 360) = 0;
  }
  uint64_t v5 = 0;
  uint64_t v6 = DerivedStorage + 368;
  do
  {
    CFRange v7 = *(const void **)(v6 + v5);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(v6 + v5) = 0;
    }
    v5 += 8;
  }
  while (v5 != 112);
  CFDictionaryRef v8 = *(const void **)(DerivedStorage + 1864);
  if (v8)
  {
    FigSyncMomentSourceDestroy(v8);
    *(void *)(DerivedStorage + 1864) = 0;
  }
  uint64_t v9 = *(void *)(DerivedStorage + 1856);
  if (v9)
  {
    FigOutOfBandTrackControllerInvalidate(v9);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    int v10 = *(const void **)(DerivedStorage + 1856);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(DerivedStorage + 1856) = 0;
    }
  }
  if (*(unsigned char *)(DerivedStorage + 1697)) {
    itemfig_accumulateFrameDropCountFromAllVideoPipelines((uint64_t)a1);
  }
  itemfig_storeItemPerformanceDataIfGathering(a1);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 640));
  uint64_t v11 = *(void *)(DerivedStorage + 648);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 640));
  if (v11)
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 648));
    if (Count >= 1)
    {
      CFIndex v13 = Count;
      for (CFIndex i = 0; i != v13; ++i)
      {
        CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), i);
        CFAllocatorRef v16 = ValueAtIndex;
        int v17 = (const void *)ValueAtIndex[2];
        if (v17)
        {
          int v18 = *((_DWORD *)ValueAtIndex + 1);
          BOOL v19 = v18 == 1986618469 || v18 == 1635088502;
          if (!v19 || (FigStopForwardingMediaServicesProcessDeathNotification(), (int v17 = (const void *)v16[2]) != 0))
          {
            CFRelease(v17);
            v16[2] = 0;
          }
        }
        uint64_t v20 = (const void *)v16[31];
        if (v20)
        {
          CFRelease(v20);
          v16[31] = 0;
        }
        uint64_t v21 = (const void *)v16[32];
        if (v21)
        {
          CFRelease(v21);
          v16[32] = 0;
        }
        CFArrayRef v22 = (const __CFArray *)v16[21];
        if (v22)
        {
          CFIndex v23 = CFArrayGetCount(v22);
          if (v23 >= 1)
          {
            CFIndex v24 = v23;
            for (CFIndex j = 0; j != v24; ++j)
            {
              unsigned int v26 = CFArrayGetValueAtIndex((CFArrayRef)v16[21], j);
              CFNumberRef v27 = (const void *)v26[6];
              if (v27)
              {
                CFRelease(v27);
                v26[6] = 0;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v28 = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(v28 + 848));
  uint64_t v29 = *(void *)(v28 + 856);
  if (v29) {
    FigLayerSynchronizerSetLayerArrayWithDeferredTransaction(v29, 0, 0);
  }
  MEMORY[0x19970E930](*(void *)(v28 + 848));
  uint64_t v30 = *(void *)(v28 + 352);
  if (v30)
  {
    uint64_t v31 = *(void *)(v28 + 352);
    if (!*(unsigned char *)(v28 + 480))
    {
      FigPlaybackBossSetRate(*(void *)(v28 + 352), 0, 0.0);
      uint64_t v31 = *(void *)(v28 + 352);
    }
    FigPlaybackBossGetTime(v31, &time);
    *(CMTime *)(v28 + 24) = time;
    CMNotificationCenterGetDefaultLocalCenter();
    FigPlaybackBossGetTimebase(*(void *)(v28 + 352));
    FigNotificationCenterRemoveWeakListener();
    itemfig_removeBossListeners();
    FigPlaybackBossInvalidate(*(void *)(v28 + 352));
    CFRelease(*(CFTypeRef *)(v28 + 352));
    *(void *)(v28 + 352) = 0;
    *(unsigned char *)(v28 + 480) = 0;
    unsigned int v32 = *(OpaqueCMTimebase **)(v28 + 328);
    HostTimeClock = CMClockGetHostTimeClock();
    CMTimebaseSetSourceClock(v32, HostTimeClock);
    CMTimebaseSetRate(*(CMTimebaseRef *)(v28 + 328), 0.0);
    CFDictionaryRef v34 = *(OpaqueCMTimebase **)(v28 + 328);
    CMTime time = *(CMTime *)(v28 + 24);
    CMTimebaseSetTime(v34, &time);
  }
  unsigned int v35 = *(const void **)(v28 + 840);
  if (v35)
  {
    FigSyncMomentSourceDestroy(v35);
    *(void *)(v28 + 840) = 0;
  }
  MEMORY[0x19970E910](*(void *)(v28 + 848));
  unsigned int v36 = *(const void **)(v28 + 856);
  if (v36)
  {
    CFRelease(v36);
    *(void *)(v28 + 856) = 0;
  }
  MEMORY[0x19970E930](*(void *)(v28 + 848));
  if (v30) {
    itemfig_cancelPreroll();
  }
  if (*(void *)(DerivedStorage + 1160))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(unsigned char *)(DerivedStorage + 875))
  {
    uint64_t v37 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v37)
    {
      uint64_t v38 = (const void *)v37;
      CMBaseObjectGetDerivedStorage();
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      CFRelease(v38);
    }
    *(unsigned char *)(DerivedStorage + 875) = 0;
  }
  *(unsigned char *)(DerivedStorage + 876) = 0;
  uint64_t v39 = *(const void **)(DerivedStorage + 1024);
  if (v39)
  {
    CFRelease(v39);
    *(void *)(DerivedStorage + 1024) = 0;
  }
  uint64_t v40 = *(const void **)(DerivedStorage + 488);
  if (v40)
  {
    CFRelease(v40);
    *(void *)(DerivedStorage + 488) = 0;
  }
  return itemfig_updateStartHostTimeEstimate(a1, 0);
}

uint64_t FigAudioQueueRenderPipelineCreate(const __CFAllocator *a1, const __CFDictionary *a2, void *a3)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3)
  {
    CFTypeRef cf = 0;
    FigRenderPipelineGetClassID();
    uint64_t v6 = CMDerivedObjectCreate();
    if (v6) {
      return v6;
    }
    CFTypeRef v7 = cf;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)(DerivedStorage + 220) = 0;
    uint64_t v9 = (char *)(DerivedStorage + 220);
    if (FigCFDictionaryGetValueIfPresent()) {
      CFStringGetCString(0, v9, 10, 0x600u);
    }
    uint64_t v10 = FigReentrantMutexCreate();
    *(void *)(DerivedStorage + 8) = v10;
    if (v10)
    {
      uint64_t v11 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 48) = v11;
      if (v11)
      {
        snprintf(__str, 0x80uLL, "com.apple.coremedia.faqrp.notification.%s", v9);
        dispatch_queue_t v12 = dispatch_queue_create(__str, 0);
        *(void *)(DerivedStorage + 16) = v12;
        if (v12)
        {
          LOBYTE(cf) = 0;
          FigCFDictionaryGetBooleanIfPresent();
          LOBYTE(cf) = 0;
          FigCFDictionaryGetBooleanIfPresent();
          snprintf(__str, 0x80uLL, "com.apple.coremedia.faqrp.asyncQueue.%s", v9);
          *(void *)(DerivedStorage + 24) = FigDispatchQueueCreateWithPriority();
          LOBYTE(cf) = 0;
          int BooleanIfPresent = FigCFDictionaryGetBooleanIfPresent();
          char v14 = (char)cf;
          if (!BooleanIfPresent) {
            char v14 = 0;
          }
          *(unsigned char *)(DerivedStorage + 67) = v14;
          *(_DWORD *)(DerivedStorage + 216) = 1065353216;
          *(_WORD *)(DerivedStorage + 100) = 256;
          uint64_t v15 = CMBaseObjectGetDerivedStorage();
          if (!a2)
          {
            uint64_t v50 = FigSignalErrorAt();
            if (v50) {
              return v50;
            }
            goto LABEL_101;
          }
          uint64_t v16 = v15;
          CMBaseObjectGetDerivedStorage();
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFTypeRef cf = 0;
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          FigCFDictionarySetValueFromKeyInDict();
          FigDispatchQueueHolderCreateWithDispatchQueue();
          FigCFDictionarySetValue();
          if (cf) {
            CFRelease(cf);
          }
          unsigned int Value = (const opaqueCMFormatDescription *)CFDictionaryGetValue(a2, @"FormatDescription");
          if (Value)
          {
            BOOL v19 = Value;
            LOBYTE(cf) = 0;
            int v20 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v21 = v20 == 0;
            }
            else {
              BOOL v21 = 1;
            }
            if (v21) {
              int v22 = 0;
            }
            else {
              int v22 = 32;
            }
            LOBYTE(cf) = 0;
            int v23 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v24 = v23 == 0;
            }
            else {
              BOOL v24 = 1;
            }
            if (!v24) {
              v22 |= 0x10u;
            }
            LOBYTE(cf) = 0;
            int v25 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v26 = v25 == 0;
            }
            else {
              BOOL v26 = 1;
            }
            if (!v26) {
              v22 |= 2u;
            }
            LOBYTE(cf) = 0;
            int v27 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v28 = v27 == 0;
            }
            else {
              BOOL v28 = 1;
            }
            if (!v28) {
              v22 |= 0x8000u;
            }
            LOBYTE(cf) = 0;
            int v29 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v30 = v29 == 0;
            }
            else {
              BOOL v30 = 1;
            }
            if (!v30) {
              v22 |= 4u;
            }
            LOBYTE(cf) = 0;
            int v31 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v32 = v31 == 0;
            }
            else {
              BOOL v32 = 1;
            }
            if (!v32) {
              v22 |= 0x40u;
            }
            LOBYTE(cf) = 0;
            int v33 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v34 = v33 == 0;
            }
            else {
              BOOL v34 = 1;
            }
            if (!v34) {
              v22 |= 0x80u;
            }
            LOBYTE(cf) = 0;
            int v35 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v36 = 1;
            }
            else {
              BOOL v36 = v35 == 0;
            }
            if (v36) {
              v22 |= 0x200u;
            }
            LOBYTE(cf) = 0;
            int v37 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v38 = v37 == 0;
            }
            else {
              BOOL v38 = 1;
            }
            if (!v38) {
              v22 |= 0x100u;
            }
            LOBYTE(cf) = 0;
            int v39 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v40 = v39 == 0;
            }
            else {
              BOOL v40 = 1;
            }
            if (!v40) {
              v22 |= 0x800u;
            }
            LOBYTE(cf) = 0;
            int v41 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v42 = v41 == 0;
            }
            else {
              BOOL v42 = 1;
            }
            if (!v42) {
              v22 |= 0x402u;
            }
            LOBYTE(cf) = 0;
            int v43 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v44 = v43 == 0;
            }
            else {
              BOOL v44 = 1;
            }
            if (!v44) {
              v22 |= 0x2000u;
            }
            LOBYTE(cf) = 0;
            int v45 = FigCFDictionaryGetBooleanIfPresent();
            if ((_BYTE)cf) {
              BOOL v46 = v45 == 0;
            }
            else {
              BOOL v46 = 1;
            }
            int v47 = v22 | 0x4000;
            if (v46) {
              int v47 = v22;
            }
            *(_DWORD *)(v16 + 96) = v47;
            *(unsigned char *)(v16 + 66) = v47 & 2;
            CFAllocatorRef v48 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
            uint64_t v50 = CMBufferQueueCreate(v48, 0, CallbacksForUnsortedSampleBuffers, (CMBufferQueueRef *)(v16 + 32));
            if (v50)
            {
LABEL_82:
              if (Mutable) {
                CFRelease(Mutable);
              }
              if (v50) {
                return v50;
              }
LABEL_101:
              *a3 = v7;
              return v50;
            }
            uint64_t v52 = CMBaseObjectGetDerivedStorage();
            CFTypeRef v58 = 0;
            CFAllocatorRef v53 = CFGetAllocator(v7);
            uint64_t v54 = FigAudioQueueCreateWithOptions(v53, v19, *(void *)(v52 + 32), *(_DWORD *)(v52 + 96), Mutable, (uint64_t *)&v58);
            if (v54)
            {
              uint64_t v50 = v54;
              FigSignalErrorAt();
              goto LABEL_91;
            }
            CMNotificationCenterGetDefaultLocalCenter();
            uint64_t v55 = FigNotificationCenterAddWeakListeners();
            if (v55)
            {
              uint64_t v50 = v55;
LABEL_91:
              if (v58) {
                CFRelease(v58);
              }
              goto LABEL_82;
            }
            if (dword_1E9350DF8)
            {
              os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            *(void *)(v16 + 40) = v58;
            uint64_t updated = faqrp_updateTimePitchBypass();
          }
          else
          {
            uint64_t updated = FigSignalErrorAt();
          }
          uint64_t v50 = updated;
          goto LABEL_82;
        }
      }
    }
    return 4294954510;
  }

  return FigSignalErrorAt();
}

uint64_t FigRenderPipelineGetClassID()
{
  return sFigRenderPipelineClassID;
}

uint64_t RegisterFigRenderPipelineType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAudioQueueCreate(uint64_t a1, const opaqueCMFormatDescription *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t *a8)
{
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetValue();
  uint64_t v14 = FigAudioQueueCreateWithOptions(v12, a2, a4, a7, Mutable, a8);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v14;
}

uint64_t figAudioQueueRenderPipelineSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_2;
  }
  if (CFEqual(@"Timebase", a2))
  {
    if (!a3 || (CFTypeID TypeID = CMTimebaseGetTypeID(), TypeID == CFGetTypeID(a3)))
    {
      faqrp_setTimebase(a1, (uint64_t)a3);
      goto LABEL_9;
    }
LABEL_2:
    uint64_t v7 = FigSignalErrorAt();
LABEL_3:
    uint64_t v8 = v7;
    goto LABEL_4;
  }
  if (CFEqual(@"SoftwareVolume1", a2))
  {
    if (!a3) {
      goto LABEL_2;
    }
    CFTypeID v11 = CFNumberGetTypeID();
    if (v11 != CFGetTypeID(a3)) {
      goto LABEL_2;
    }
    float valuePtr = 1.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    AudioQueueParameterValue v12 = valuePtr;
    *(float *)(DerivedStorage + 104) = valuePtr;
    if (*(unsigned char *)(DerivedStorage + 103)) {
      goto LABEL_9;
    }
    uint64_t v13 = *(void *)(DerivedStorage + 40);
    AudioQueueParameterID v14 = 1;
LABEL_39:
    uint64_t v7 = FigAudioQueueSetParameter(v13, v14, v12);
    goto LABEL_3;
  }
  if (CFEqual(@"SoftwareVolume1RampDuration", a2))
  {
    if (!a3) {
      goto LABEL_2;
    }
    CFTypeID v15 = CFNumberGetTypeID();
    if (v15 != CFGetTypeID(a3)) {
      goto LABEL_2;
    }
    float valuePtr = 0.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    uint64_t v13 = *(void *)(DerivedStorage + 40);
    AudioQueueParameterValue v12 = valuePtr;
    AudioQueueParameterID v14 = 4;
    goto LABEL_39;
  }
  if (CFEqual(@"SoftwareVolume2", a2))
  {
    if (!a3) {
      goto LABEL_2;
    }
    CFTypeID v16 = CFNumberGetTypeID();
    if (v16 != CFGetTypeID(a3)) {
      goto LABEL_2;
    }
    float valuePtr = 1.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    uint64_t v13 = *(void *)(DerivedStorage + 40);
    AudioQueueParameterValue v12 = valuePtr;
    AudioQueueParameterID v14 = 5;
    goto LABEL_39;
  }
  if (CFEqual(@"SoftwareVolume3", a2))
  {
    if (!a3) {
      goto LABEL_2;
    }
    CFTypeID v17 = CFNumberGetTypeID();
    if (v17 != CFGetTypeID(a3)) {
      goto LABEL_2;
    }
    float valuePtr = 1.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    uint64_t v13 = *(void *)(DerivedStorage + 40);
    AudioQueueParameterValue v12 = valuePtr;
    AudioQueueParameterID v14 = 9;
    goto LABEL_39;
  }
  if (CFEqual(@"SoftwareVolume5", a2))
  {
    if (!a3) {
      goto LABEL_2;
    }
    CFTypeID v18 = CFNumberGetTypeID();
    if (v18 != CFGetTypeID(a3)) {
      goto LABEL_2;
    }
    float valuePtr = 1.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    uint64_t v13 = *(void *)(DerivedStorage + 40);
    AudioQueueParameterValue v12 = valuePtr;
    AudioQueueParameterID v14 = 14;
    goto LABEL_39;
  }
  if (CFEqual(@"SoftwareVolume2RampDuration", a2))
  {
    if (!a3) {
      goto LABEL_2;
    }
    CFTypeID v19 = CFNumberGetTypeID();
    if (v19 != CFGetTypeID(a3)) {
      goto LABEL_2;
    }
    float valuePtr = 0.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    uint64_t v13 = *(void *)(DerivedStorage + 40);
    AudioQueueParameterValue v12 = valuePtr;
    AudioQueueParameterID v14 = 6;
    goto LABEL_39;
  }
  if (CFEqual(@"Pan", a2))
  {
    if (!a3) {
      goto LABEL_2;
    }
    CFTypeID v20 = CFNumberGetTypeID();
    if (v20 != CFGetTypeID(a3)) {
      goto LABEL_2;
    }
    float valuePtr = 0.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
    uint64_t v13 = *(void *)(DerivedStorage + 40);
    AudioQueueParameterValue v12 = valuePtr;
    AudioQueueParameterID v14 = 13;
    goto LABEL_39;
  }
  if (CFEqual(@"EQPreset", a2))
  {
    if (!a3) {
      goto LABEL_2;
    }
    CFTypeID v21 = CFNumberGetTypeID();
    if (v21 != CFGetTypeID(a3)) {
      goto LABEL_2;
    }
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    int v23 = kFigAudioQueueProperty_EQPreset;
    goto LABEL_44;
  }
  if (CFEqual(@"Muted", a2))
  {
    if (a3)
    {
      CFTypeID v24 = CFBooleanGetTypeID();
      if (v24 == CFGetTypeID(a3))
      {
        int Value = CFBooleanGetValue((CFBooleanRef)a3);
        faqrp_setMuted(a1, Value);
        goto LABEL_9;
      }
    }
    goto LABEL_2;
  }
  if (CFEqual(@"Suspended", a2))
  {
    if (a3)
    {
      CFTypeID v26 = CFBooleanGetTypeID();
      if (v26 == CFGetTypeID(a3))
      {
        int v27 = CFBooleanGetValue((CFBooleanRef)a3);
        faqrp_setSuspended(a1, v27);
        goto LABEL_9;
      }
    }
    goto LABEL_2;
  }
  if (CFEqual(@"ClientName", a2))
  {
    BOOL v28 = *(const void **)(DerivedStorage + 56);
    *(void *)(DerivedStorage + 56) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v28) {
      CFRelease(v28);
    }
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    int v23 = kFigAudioQueueProperty_ClientName;
    goto LABEL_44;
  }
  if (CFEqual(@"OfflineMixer", a2))
  {
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    int v23 = kFigAudioQueueProperty_OfflineMixer;
    goto LABEL_44;
  }
  if (CFEqual(@"AudioDeviceUID", a2))
  {
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    int v23 = kFigAudioQueueProperty_DeviceUID;
    goto LABEL_44;
  }
  if (CFEqual(@"AudioQueueClockDevice", a2))
  {
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    int v23 = kFigAudioQueueProperty_ClockDevice;
    goto LABEL_44;
  }
  if (CFEqual(@"AudioDeviceChannelMap", a2))
  {
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    int v23 = kFigAudioQueueProperty_DeviceChannelMap;
    goto LABEL_44;
  }
  if (CFEqual(@"STSLabel", a2))
  {
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    int v23 = kFigAudioQueueProperty_STSLabel;
    goto LABEL_44;
  }
  if (CFEqual(@"MATOriginalSourceFormat", a2))
  {
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    int v23 = kFigAudioQueueProperty_MATOriginalSourceFormat;
    goto LABEL_44;
  }
  if (CFEqual(@"IsTimebaseStarter", a2))
  {
    if (a3)
    {
      CFTypeID v29 = CFBooleanGetTypeID();
      if (v29 == CFGetTypeID(a3))
      {
        uint64_t v8 = 0;
        *(unsigned char *)(DerivedStorage + 65) = *MEMORY[0x1E4F1CFD0] == (void)a3;
        goto LABEL_4;
      }
    }
    goto LABEL_9;
  }
  if (CFEqual(@"AudioProcessingUnits", a2))
  {
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    int v23 = kFigAudioQueueProperty_AudioProcessingUnits;
    goto LABEL_44;
  }
  if (CFEqual(@"AudioCurves", a2))
  {
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    int v23 = kFigAudioQueueProperty_AudioCurves;
    goto LABEL_44;
  }
  if (CFEqual(@"SecondaryAudioCurves", a2))
  {
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    int v23 = kFigAudioQueueProperty_SecondaryAudioCurves;
    goto LABEL_44;
  }
  if (CFEqual(@"AllowedToUseHardware", a2))
  {
    uint64_t v22 = *(void *)(DerivedStorage + 40);
    int v23 = kFigAudioQueueProperty_AllowedToUseHardware;
    goto LABEL_44;
  }
  if (!CFEqual(@"HandleFormatDescriptionChanges", a2))
  {
    if (CFEqual(@"TimePitchAlgorithm", a2))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      int v23 = kFigAudioQueueProperty_TimePitchAlgorithm;
    }
    else if (CFEqual(@"TrackID", a2))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      int v23 = kFigAudioQueueProperty_TrackID;
    }
    else if (CFEqual(@"AudioProcessingTap", a2))
    {
      uint64_t v22 = *(void *)(DerivedStorage + 40);
      int v23 = kFigAudioQueueProperty_AudioProcessingTap;
    }
    else
    {
      if (CFEqual(@"PipelineRate", a2))
      {
        if (a3)
        {
          CFTypeID v31 = CFNumberGetTypeID();
          if (v31 == CFGetTypeID(a3))
          {
            CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, (void *)(DerivedStorage + 216));
            goto LABEL_9;
          }
        }
        goto LABEL_2;
      }
      if (CFEqual(@"FAQRate2", a2))
      {
        uint64_t v22 = *(void *)(DerivedStorage + 40);
        int v23 = kFigAudioQueueProperty_Rate2;
      }
      else if (CFEqual(@"LoudnessInfo", a2))
      {
        uint64_t v22 = *(void *)(DerivedStorage + 40);
        int v23 = kFigAudioQueueProperty_LoudnessInfo;
      }
      else if (CFEqual(@"CinematicAudioParameters", a2))
      {
        uint64_t v22 = *(void *)(DerivedStorage + 40);
        int v23 = kFigAudioQueueProperty_CinematicAudioParameters;
      }
      else if (CFEqual(@"AudioDynamicRangeCompression", a2))
      {
        uint64_t v22 = *(void *)(DerivedStorage + 40);
        int v23 = kFigAudioQueueProperty_AudioDynamicRangeCompression;
      }
      else if (CFEqual(@"AdjustTargetLevel", a2))
      {
        uint64_t v22 = *(void *)(DerivedStorage + 40);
        int v23 = kFigAudioQueueProperty_AdjustTargetLevel;
      }
      else if (CFEqual(@"AdjustCompressionProfile", a2))
      {
        uint64_t v22 = *(void *)(DerivedStorage + 40);
        int v23 = kFigAudioQueueProperty_AdjustCompressionProfile;
      }
      else if (CFEqual(@"ExpectScaledEdits", a2))
      {
        if (!a3) {
          goto LABEL_9;
        }
        CFTypeID v32 = CFBooleanGetTypeID();
        if (v32 != CFGetTypeID(a3)) {
          goto LABEL_9;
        }
        *(unsigned char *)(DerivedStorage + 100) = CFBooleanGetValue((CFBooleanRef)a3);
        faqrp_updateTimePitchBypass();
        uint64_t v22 = *(void *)(DerivedStorage + 40);
        int v23 = kFigAudioQueueProperty_ExpectScaledEdits;
      }
      else if (CFEqual(@"ShouldCompensateForNeroScreenLatency", a2))
      {
        uint64_t v22 = *(void *)(DerivedStorage + 40);
        int v23 = kFigAudioQueueProperty_ShouldCompensateForNeroScreenLatency;
      }
      else
      {
        if (CFEqual(@"SweepFilterSweepValue", a2))
        {
          float valuePtr = 0.0;
          CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
          uint64_t v13 = *(void *)(DerivedStorage + 40);
          AudioQueueParameterValue v12 = valuePtr;
          AudioQueueParameterID v14 = 22;
          goto LABEL_39;
        }
        if (CFEqual(@"SweepFilterConfiguration", a2))
        {
          uint64_t v22 = *(void *)(DerivedStorage + 40);
          int v23 = kFigAudioQueueProperty_SweepFilterConfiguration;
        }
        else if (CFEqual(@"EnableSweepFilter", a2))
        {
          uint64_t v22 = *(void *)(DerivedStorage + 40);
          int v23 = kFigAudioQueueProperty_EnableSweepFilter;
        }
        else if (CFEqual(@"CodecProgramTargetLevel", a2))
        {
          uint64_t v22 = *(void *)(DerivedStorage + 40);
          int v23 = kFigAudioQueueProperty_CodecProgramTargetLevel;
        }
        else
        {
          if (CFEqual(@"OfflineAudioQueueRate", a2))
          {
            if (!*(unsigned char *)(DerivedStorage + 66))
            {
              uint64_t v8 = 4294954444;
              goto LABEL_4;
            }
            float valuePtr = 0.0;
            if (!a3) {
              goto LABEL_2;
            }
            CFTypeID v33 = CFGetTypeID(a3);
            if (v33 != CFNumberGetTypeID()) {
              goto LABEL_2;
            }
            CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &valuePtr);
            BOOL v34 = valuePtr == 1.0 || valuePtr == 0.0;
            *(unsigned char *)(DerivedStorage + 101) = v34;
            if (v34 && !*(unsigned char *)(DerivedStorage + 100)) {
              int v35 = (const __CFNumber **)MEMORY[0x1E4F1CFD0];
            }
            else {
              int v35 = (const __CFNumber **)MEMORY[0x1E4F1CFC8];
            }
            CFNumberRef v37 = *v35;
            if (*v35 == (const __CFNumber *)*MEMORY[0x1E4F1CFD0]) {
              CFNumberRef v38 = (const __CFNumber *)*MEMORY[0x1E4F1CFC8];
            }
            else {
              CFNumberRef v38 = (const __CFNumber *)*MEMORY[0x1E4F1CFD0];
            }
            FigAudioQueueSetProperty(*(void *)(DerivedStorage + 40), @"EnableTimePitch", v38);
            FigAudioQueueSetProperty(*(void *)(DerivedStorage + 40), @"TimePitchBypass", v37);
            FigAudioQueueSetParameter(*(void *)(DerivedStorage + 40), 2u, valuePtr);
LABEL_9:
            uint64_t v8 = 0;
            goto LABEL_4;
          }
          if (CFEqual(@"DisconnectOfflineMixerWhileResetting", a2))
          {
            uint64_t v22 = *(void *)(DerivedStorage + 40);
            int v23 = kFigAudioQueueProperty_DisconnectOfflineMixerWhileResetting;
          }
          else
          {
            if (CFEqual(@"OfflineRenderPriority", a2))
            {
              if (a3)
              {
                CFTypeID v36 = CFStringGetTypeID();
                if (v36 == CFGetTypeID(a3)
                  && (CFEqual(a3, @"BufferedAirPlayUrgent")
                   || CFEqual(a3, @"BufferedAirPlayDefault")
                   || CFEqual(a3, @"BufferedAirPlayRelaxed")))
                {
                  CFNumberRef SInt32 = (const __CFNumber *)FigCFNumberCreateSInt32();
                  if (SInt32)
                  {
                    CFNumberRef v40 = SInt32;
                    uint64_t v8 = FigAudioQueueSetProperty(*(void *)(DerivedStorage + 40), @"RenderThreadPriority", SInt32);
                    CFRelease(v40);
                    goto LABEL_4;
                  }
                }
              }
              goto LABEL_2;
            }
            if (CFEqual(@"MXSession", a2))
            {
              uint64_t v22 = *(void *)(DerivedStorage + 40);
              int v23 = kFigAudioQueueProperty_MXSession;
            }
            else if (CFEqual(@"BestAvailableContentType", a2))
            {
              uint64_t v22 = *(void *)(DerivedStorage + 40);
              int v23 = kFigAudioQueueProperty_BestAvailableContentType;
            }
            else
            {
              if (!CFEqual(@"SceneCompositionPreset", a2))
              {
                uint64_t v8 = 4294954446;
                goto LABEL_4;
              }
              uint64_t v22 = *(void *)(DerivedStorage + 40);
              int v23 = kFigAudioQueueProperty_SceneCompositionPreset;
            }
          }
        }
      }
    }
LABEL_44:
    uint64_t v7 = FigAudioQueueSetProperty(v22, *v23, (const __CFNumber *)a3);
    goto LABEL_3;
  }
  if (!a3) {
    goto LABEL_2;
  }
  CFTypeID v30 = CFBooleanGetTypeID();
  if (v30 != CFGetTypeID(a3)) {
    goto LABEL_2;
  }
  uint64_t v8 = 0;
  *(unsigned char *)(DerivedStorage + 92) = (const void *)*MEMORY[0x1E4F1CFD0] == a3;
LABEL_4:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  return v8;
}

uint64_t FigAudioQueueSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  if (a1)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 24));
    if (!*(unsigned char *)(a1 + 16))
    {
      if (CFEqual(a2, @"TimebaseRate"))
      {
        if (a3)
        {
          CFTypeID TypeID = CFNumberGetTypeID();
          if (TypeID == CFGetTypeID(a3))
          {
            CFNumberGetValue(a3, kCFNumberFloat32Type, (void *)(a1 + 416));
            goto LABEL_91;
          }
        }
        goto LABEL_89;
      }
      if (CFEqual(a2, @"AudioProcessingUnits"))
      {
        if (!a3 || (CFTypeID v8 = CFGetTypeID(a3), v8 == CFArrayGetTypeID()))
        {
          if (*(unsigned char *)(a1 + 16)) {
            CFNumberRef ValueAtIndex = 0;
          }
          else {
            CFNumberRef ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
          }
          uint64_t v10 = *(const void **)(a1 + 688);
          *(void *)(a1 + 688) = a3;
          if (a3) {
            CFRetain(a3);
          }
          if (v10) {
            CFRelease(v10);
          }
          if (!ValueAtIndex) {
            goto LABEL_91;
          }
          uint64_t v11 = subaq_buildAudioProcssingUnits(a1, ValueAtIndex);
LABEL_90:
          uint64_t v27 = v11;
          if (!v11) {
            goto LABEL_91;
          }
LABEL_97:
          MEMORY[0x19970E2B0](*(void *)(a1 + 24));
          return v27;
        }
LABEL_89:
        uint64_t v11 = FigSignalErrorAt();
        goto LABEL_90;
      }
      if (CFEqual(a2, @"AudioCurves"))
      {
        if (a3)
        {
          CFTypeID v12 = CFDictionaryGetTypeID();
          if (v12 != CFGetTypeID(a3)) {
            goto LABEL_89;
          }
        }
        uint64_t v13 = a1;
        unint64_t v14 = 0;
LABEL_26:
        uint64_t v11 = faq_setAudioCurves(v13, v14, a3);
        goto LABEL_90;
      }
      if (CFEqual(a2, @"SecondaryAudioCurves"))
      {
        if (a3)
        {
          CFTypeID v15 = CFDictionaryGetTypeID();
          if (v15 != CFGetTypeID(a3)) {
            goto LABEL_89;
          }
        }
        uint64_t v13 = a1;
        unint64_t v14 = 1;
        goto LABEL_26;
      }
      if (CFEqual(a2, @"ExpectScaledEdits"))
      {
        if (!a3
          || (CFTypeID v16 = CFBooleanGetTypeID(), v16 != CFGetTypeID(a3))
          || (int Value = CFBooleanGetValue(a3), Value == *(unsigned __int8 *)(a1 + 680)))
        {
LABEL_91:
          CFDictionaryRef Mutable = *(__CFDictionary **)(a1 + 240);
          if (Mutable
            || (CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*(void *)(a1 + 240) = Mutable) != 0))
          {
            if (a3) {
              CFNumberRef v38 = a3;
            }
            else {
              CFNumberRef v38 = (const __CFNumber *)*MEMORY[0x1E4F1D260];
            }
            CFDictionarySetValue(Mutable, a2, v38);
            uint64_t v27 = 0;
          }
          else
          {
            uint64_t v27 = 4294954355;
          }
          goto LABEL_97;
        }
        *(unsigned char *)(a1 + 680) = Value;
        goto LABEL_32;
      }
      if (CFEqual(a2, @"OfflineMixer"))
      {
        if ((*(unsigned char *)(a1 + 48) & 2) != 0)
        {
          if (a3)
          {
            uint64_t v18 = FigAudioQueueOfflineMixerGetTypeID();
            if (v18 != CFGetTypeID(a3)) {
              goto LABEL_89;
            }
          }
          if (*(unsigned char *)(a1 + 16))
          {
            CFTypeID v21 = (const __CFNumber **)(a1 + 720);
            if (!*(void *)(a1 + 720))
            {
              *CFTypeID v21 = a3;
              if (!a3) {
                goto LABEL_91;
              }
              goto LABEL_117;
            }
            uint64_t v20 = 0;
          }
          else
          {
            CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
            uint64_t v20 = Count;
            CFTypeID v21 = (const __CFNumber **)(a1 + 720);
            if (!*(void *)(a1 + 720)) {
              goto LABEL_106;
            }
            if (Count >= 1)
            {
              CFIndex v22 = 0;
              do
              {
                if (*(unsigned char *)(a1 + 16)) {
                  int v23 = 0;
                }
                else {
                  int v23 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v22);
                }
                faq_disconnectFromOfflineMixer(a1, (uint64_t)v23);
                ++v22;
              }
              while (v20 != v22);
            }
          }
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
LABEL_106:
          *CFTypeID v21 = a3;
          if (!a3) {
            goto LABEL_91;
          }
          if (v20 >= 1)
          {
            CFIndex v39 = 0;
            do
            {
              CFNumberRef v40 = *(unsigned char *)(a1 + 16) ? 0 : CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v39);
              uint64_t v26 = faq_connectToOfflineMixer((void *)a1, (uint64_t)v40);
              if (v26) {
                goto LABEL_58;
              }
            }
            while (v20 != ++v39);
          }
LABEL_117:
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          goto LABEL_91;
        }
      }
      else
      {
        if (CFEqual(a2, @"AllowedToUseHardware")) {
          goto LABEL_91;
        }
        if (CFEqual(a2, @"MXSession"))
        {
          CFNumberRef v24 = *(const __CFNumber **)(a1 + 256);
          if (v24 != a3)
          {
            *(void *)(a1 + 256) = a3;
            if (a3) {
              CFRetain(a3);
            }
            if (v24) {
              CFRelease(v24);
            }
            faq_setPropertyOnAllSubAudioQueues(a1, a2, (const __CFString *)a3);
          }
          goto LABEL_91;
        }
        if (CFEqual(a2, @"AudioProcessingTap"))
        {
          if (a3)
          {
            CFTypeID v28 = MTAudioProcessingTapGetTypeID();
            if (v28 != CFGetTypeID(a3)) {
              goto LABEL_89;
            }
          }
          if (*(const __CFNumber **)(a1 + 736) == a3) {
            goto LABEL_91;
          }
          *(unsigned char *)(a1 + 744) = 0;
          faq_removeAudioProcessingTapListeners(a1);
          CFTypeID v29 = *(const void **)(a1 + 736);
          *(void *)(a1 + 736) = a3;
          if (a3) {
            CFRetain(a3);
          }
          if (v29) {
            CFRelease(v29);
          }
          uint64_t v26 = faq_addAudioProcessingTapListeners(a1);
          if (!v26)
          {
            uint64_t v26 = faq_setPropertyOnAllSubAudioQueues(a1, a2, (const __CFString *)a3);
            if (!v26)
            {
              LastSubAudioQueue = faq_GetLastSubAudioQueue(a1);
              uint64_t v31 = LastSubAudioQueue[74];
              if (v31) {
                MTAudioProcessingTapInitializeTap(v31, LastSubAudioQueue[75]);
              }
              goto LABEL_91;
            }
          }
LABEL_58:
          uint64_t v27 = v26;
          goto LABEL_97;
        }
        if (CFEqual(a2, @"DiscardSampleBuffers"))
        {
          if (a3)
          {
            CFTypeID v32 = CFBooleanGetTypeID();
            if (v32 == CFGetTypeID(a3))
            {
              CFNumberRef v33 = (const __CFNumber *)*MEMORY[0x1E4F1CFD0];
              int v34 = *MEMORY[0x1E4F1CFD0] == (void)a3;
              if (*(unsigned __int8 *)(a1 + 312) != v34)
              {
                *(unsigned char *)(a1 + 312) = v34;
                FigAtomicCompareAndSwap32();
                int v35 = *(NSObject **)(a1 + 344);
                if (v33 == a3)
                {
                  dispatch_source_set_timer(v35, 0, 0x1DCD6500uLL, 0x4C4B40uLL);
                }
                else
                {
                  dispatch_source_set_timer(v35, 0xFFFFFFFFFFFFFFFFLL, 0, 0);
                  if (*(void *)(a1 + 296)) {
                    FigSemaphoreSignal();
                  }
                }
              }
            }
          }
          goto LABEL_91;
        }
        if (CFEqual(a2, @"ShouldCompensateForNeroScreenLatency"))
        {
          *(unsigned char *)(a1 + 746) = *MEMORY[0x1E4F1CFD0] == (void)a3;
          goto LABEL_91;
        }
        if (CFEqual(a2, @"DisconnectOfflineMixerWhileResetting"))
        {
          *(unsigned char *)(a1 + 760) = *MEMORY[0x1E4F1CFD0] == (void)a3;
          goto LABEL_91;
        }
        if (!CFEqual(a2, @"RenderThreadPriority"))
        {
          if (!CFEqual(a2, @"Rate2Rate"))
          {
            uint64_t v11 = faq_setPropertyOnAllSubAudioQueues(a1, a2, (const __CFString *)a3);
            goto LABEL_90;
          }
          CFNumberGetValue(a3, kCFNumberFloat32Type, (void *)(a1 + 764));
LABEL_32:
          faq_updateRate2Enable(a1);
          goto LABEL_91;
        }
        if ((*(unsigned char *)(a1 + 49) & 4) != 0)
        {
          if (a3)
          {
            CFTypeID v36 = CFNumberGetTypeID();
            if (v36 == CFGetTypeID(a3))
            {
              if (!*(void *)(a1 + 288)) {
                goto LABEL_91;
              }
              uint64_t v11 = FigThreadSetProperty();
              goto LABEL_90;
            }
          }
          goto LABEL_89;
        }
      }
    }
    uint64_t v26 = FigSignalErrorAt();
    goto LABEL_58;
  }
  return FigSignalErrorAt();
}

uint64_t FigPlaybackBossCreate(const __CFAllocator *a1, const void *a2, uint64_t a3, _DWORD *a4, const void **a5, uint64_t a6, const void *a7, const void *a8, OpaqueCMClock *a9, char a10, const __CFDictionary *a11, uint64_t *a12)
{
  uint64_t v116 = *MEMORY[0x1E4F143B8];
  unsigned int value = 0;
  CFBooleanRef BOOLean = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a2 && a7 && a12)
  {
    CFTypeID v15 = a2;
    CFTypeID v16 = a5;
    uint64_t v17 = a3;
    uint64_t v18 = a4;
    if (a3 >= 1)
    {
      if (a4 && a5)
      {
        uint64_t v19 = a3;
        uint64_t v20 = a5;
        while (*v20)
        {
          ++v20;
          if (!--v19) {
            goto LABEL_10;
          }
        }
      }
      goto LABEL_23;
    }
LABEL_10:
    if (FigPlaybackBossGetTypeID_oneTimeOnly != -1) {
      dispatch_once_f(&FigPlaybackBossGetTypeID_oneTimeOnly, 0, (dispatch_function_t)figPlaybackBossClassInitialize);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    CFIndex v22 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    if (!Instance)
    {
      uint64_t v76 = FigSignalErrorAt();
LABEL_135:
      if (v76) {
        BOOL v99 = *((_DWORD *)v22 + 870) == 0;
      }
      else {
        BOOL v99 = 1;
      }
      if (!v99)
      {
        int v108 = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v101 = v108;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v102 = v101;
        }
        else {
          unsigned int v102 = v101 & 0xFFFFFFFE;
        }
        if (v102)
        {
          int v111 = 136315394;
          unsigned int v112 = "FigPlaybackBossCreate";
          __int16 v113 = 1024;
          LODWORD(v114) = v76;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      return v76;
    }
    uint64_t v23 = Instance;
    uint64_t v24 = FigSimpleMutexCreate();
    *(void *)(v23 + 24) = v24;
    if (!v24
      || (uint64_t v25 = FigSimpleMutexCreate(), (*(void *)(v23 + 576) = v25) == 0)
      || (uint64_t v26 = FigSimpleMutexCreate(), (*(void *)(v23 + 64) = v26) == 0)
      || (uint64_t v27 = FigDispatchQueueCreateWithPriority(), (*(void *)(v23 + 32) = v27) == 0))
    {
      uint64_t v76 = FigSignalErrorAt();
      goto LABEL_134;
    }
    FigThreadMakeDispatchQueueAbortable();
    *(_DWORD *)(v23 + 544) = 1000000;
    *(unsigned char *)(v23 + 841) = 0;
    if (a11 && CFDictionaryGetValueIfPresent(a11, @"Boss_ItemIdentifier", (const void **)&value)) {
      CFStringGetCString((CFStringRef)value, (char *)(v23 + 841), 10, 0x600u);
    }
    *(void *)(v23 + 48) = a7;
    CFRetain(a7);
    uint64_t v28 = FigSampleGeneratorDataSourceCacheCreate((uint64_t)a1, (void *)(v23 + 56));
    if (!v28)
    {
      *(void *)(v23 + 40) = v15;
      CFRetain(v15);
      *(unsigned char *)(v23 + 121) = (a10 & 8) != 0;
      uint64_t v29 = *MEMORY[0x1E4F1CF80];
      uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(*(void *)(v23 + 40));
      uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v31) {
        uint64_t v32 = v31;
      }
      else {
        uint64_t v32 = 0;
      }
      int v34 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFBooleanRef *))(v32 + 48);
      if (v34)
      {
        if (!v34(FigBaseObject, @"AccurateDurationIsKnown", v29, &BOOLean))
        {
          *(unsigned char *)(v23 + 123) = CFBooleanGetValue(BOOLean);
          if (BOOLean)
          {
            CFRelease(BOOLean);
            CFBooleanRef BOOLean = 0;
          }
        }
      }
      uint64_t v35 = FigFormatReaderGetFigBaseObject(*(void *)(v23 + 40));
      uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v36) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 0;
      }
      CFNumberRef v38 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFBooleanRef *))(v37 + 48);
      if (v38)
      {
        if (!v38(v35, @"SampleCursorTimeAccuracyIsExact", v29, &BOOLean))
        {
          *(unsigned char *)(v23 + 124) = CFBooleanGetValue(BOOLean);
          if (BOOLean)
          {
            CFRelease(BOOLean);
            CFBooleanRef BOOLean = 0;
          }
        }
      }
      uint64_t v39 = FigFormatReaderGetFigBaseObject(*(void *)(v23 + 40));
      uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v40) {
        uint64_t v41 = v40;
      }
      else {
        uint64_t v41 = 0;
      }
      BOOL v42 = *(void (**)(uint64_t, __CFString *, uint64_t, CFBooleanRef *))(v41 + 48);
      if (v42) {
        v42(v39, @"CouldContainFragments", v29, &BOOLean);
      }
      if (BOOLean)
      {
        *(unsigned char *)(v23 + 125) = CFBooleanGetValue(BOOLean);
        if (BOOLean)
        {
          CFRelease(BOOLean);
          CFBooleanRef BOOLean = 0;
        }
      }
      CFAllocatorRef v43 = a1;
      if (*(unsigned char *)(v23 + 125))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        *(unsigned char *)(v23 + 126) = 1;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
      *(void *)(v23 + 72) = Mutable;
      if (Mutable)
      {
        uint64_t v45 = MEMORY[0x1E4F1F9F8];
        long long v46 = *MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(v23 + 168) = *MEMORY[0x1E4F1F9F8];
        uint64_t v47 = *(void *)(v45 + 16);
        *(void *)(v23 + 184) = v47;
        *(_OWORD *)(v23 + 288) = v46;
        *(void *)(v23 + 304) = v47;
        *(_OWORD *)(v23 + 336) = v46;
        *(void *)(v23 + 352) = v47;
        *(unsigned char *)(v23 + 122) = a10 & 1;
        *(_WORD *)(v23 + 392) = 0;
        *(unsigned char *)(v23 + 404) = 1;
        *(unsigned char *)(v23 + 135) = 0;
        *(_DWORD *)(v23 + 136) = 0x40000000;
        *(unsigned char *)(v23 + 140) = 1;
        *(void *)(v23 + 144) = 0x300000003;
        *(_DWORD *)(v23 + 152) = 0;
        *(_DWORD *)(v23 + 130) = 257;
        *(_DWORD *)(v23 + 776) = 0;
        *(unsigned char *)(v23 + 780) = 0;
        *(unsigned char *)(v23 + 468) = 0;
        *(_OWORD *)(v23 + 792) = v46;
        *(void *)(v23 + 808) = v47;
        *(_OWORD *)(v23 + 816) = v46;
        *(void *)(v23 + 832) = v47;
        *(void *)(v23 + 96) = -1;
        if (a11 && (CFDictionaryRef v48 = (const __CFDictionary *)CFDictionaryGetValue(a11, @"Boss_LoopTimeRange")) != 0)
        {
          CMTimeRangeMakeFromDictionary(&v115, v48);
          long long v49 = *(_OWORD *)&v115.start.epoch;
          *(_OWORD *)(v23 + 192) = *(_OWORD *)&v115.start.value;
          *(_OWORD *)(v23 + 208) = v49;
          long long v50 = *(_OWORD *)&v115.duration.timescale;
        }
        else
        {
          uint64_t v51 = MEMORY[0x1E4F1FA20];
          long long v52 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
          *(_OWORD *)(v23 + 192) = *MEMORY[0x1E4F1FA20];
          *(_OWORD *)(v23 + 208) = v52;
          long long v50 = *(_OWORD *)(v51 + 32);
        }
        *(_OWORD *)(v23 + 224) = v50;
        MEMORY[0x19970E910](*(void *)(v23 + 64));
        if (*(unsigned char *)(v23 + 840))
        {
          int v108 = 0;
          CFAllocatorRef v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v17 = a3;
          CFAllocatorRef v43 = a1;
        }
        if (v17 >= 1)
        {
          uint64_t v54 = *MEMORY[0x1E4F1CFD0];
          uint64_t v55 = *MEMORY[0x1E4F1CFC8];
          uint64_t v56 = v17;
          while (1)
          {
            v115.start.unsigned int value = 0;
            if (FigPlaybackBossTrackGetTypeID_oneTimeOnly != -1) {
              dispatch_once_f(&FigPlaybackBossTrackGetTypeID_oneTimeOnly, 0, (dispatch_function_t)figPlaybackBossTrackClassInitialize);
            }
            CFTypeRef v57 = (char *)_CFRuntimeCreateInstance();
            if (!v57) {
              break;
            }
            CFTypeRef v58 = v57;
            CFArrayAppendValue(*(CFMutableArrayRef *)(v23 + 72), v57);
            CFRelease(v58);
            ++*(void *)(v23 + 80);
            uint64_t v59 = FigCFWeakReferenceHolderCreateWithReferencedObject();
            *((void *)v58 + 2) = v59;
            if (!v59) {
              break;
            }
            *((_DWORD *)v58 + 6) = *v18;
            uint64_t v60 = *(void *)(v23 + 40);
            uint64_t v61 = *v18;
            uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v62) {
              uint64_t v63 = v62;
            }
            else {
              uint64_t v63 = 0;
            }
            unsigned int v64 = *(uint64_t (**)(uint64_t, uint64_t, char *, char *))(v63 + 56);
            if (!v64)
            {
              uint64_t v76 = 4294954514;
              goto LABEL_132;
            }
            uint64_t v65 = v64(v60, v61, v58 + 32, v58 + 72);
            if (v65) {
              goto LABEL_131;
            }
            __int16 v66 = *v16;
            *((void *)v58 + 10) = *v16;
            CFRetain(v66);
            if (*(unsigned char *)(v23 + 127)) {
              uint64_t v67 = v54;
            }
            else {
              uint64_t v67 = v55;
            }
            uint64_t v68 = FigRenderPipelineGetFigBaseObject(*((void *)v58 + 10));
            uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v69) {
              uint64_t v70 = v69;
            }
            else {
              uint64_t v70 = 0;
            }
            CMTimeValue v71 = *(void (**)(uint64_t, __CFString *, uint64_t))(v70 + 56);
            if (v71) {
              v71(v68, @"ThrottleForBackground", v67);
            }
            uint64_t v72 = FigRenderPipelineGetFigBaseObject(*((void *)v58 + 10));
            uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v73) {
              uint64_t v74 = v73;
            }
            else {
              uint64_t v74 = 0;
            }
            CFAllocatorRef v43 = a1;
            CFRange v75 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CMTimeRange *))(v74 + 48);
            if (v75 && !v75(v72, @"NeedsToFlushWhenRateChanges", a1, &v115) && v115.start.value == v54)
            {
              v58[88] = 1;
              *(unsigned char *)(v23 + 107) = 1;
            }
            v58[89] = 1;
            ++v16;
            ++v18;
            --v56;
            uint64_t v17 = a3;
            if (!v56) {
              goto LABEL_82;
            }
          }
          uint64_t v65 = FigSignalErrorAt();
          goto LABEL_131;
        }
LABEL_82:
        uint64_t v65 = bossSetCursorServiceInTrackList(*(const __CFArray **)(v23 + 72), a6);
        if (v65)
        {
LABEL_131:
          uint64_t v76 = v65;
LABEL_132:
          CFIndex v22 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
          goto LABEL_133;
        }
        bossElectNewTimebaseStarter((_DWORD *)v23);
        CFIndex v22 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
        if (a8)
        {
          if (a8 == (const void *)1)
          {
            *(void *)(v23 + 112) = 0;
            *(unsigned char *)(v23 + 120) = 1;
            goto LABEL_97;
          }
          *(void *)(v23 + 112) = a8;
          CFRetain(a8);
        }
        else
        {
          HostTimeClock = CMClockGetHostTimeClock();
          uint64_t v78 = CMTimebaseCreateWithSourceClock(v43, HostTimeClock, (CMTimebaseRef *)(v23 + 112));
          if (v78)
          {
LABEL_129:
            uint64_t v76 = v78;
LABEL_133:
            MEMORY[0x19970E930](*(void *)(v23 + 64));
LABEL_134:
            CFRelease((CFTypeRef)v23);
            goto LABEL_135;
          }
        }
        if (a9)
        {
          *(void *)(v23 + 88) = -1;
          uint64_t v78 = CMTimebaseSetSourceClock(*(CMTimebaseRef *)(v23 + 112), a9);
          if (v78) {
            goto LABEL_129;
          }
        }
        else
        {
          *(void *)(v23 + 88) = -2;
          bossElectNewPreferredClock(v23);
        }
        int v108 = 0x40000000;
        if (bossGetVideoDecoderMaxSpeedThreshold(v23, (float *)&v108))
        {
          *(_DWORD *)(v23 + 136) = v108;
          *(unsigned char *)(v23 + 140) = 0;
          if (dword_1E9350D98)
          {
            double v79 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
LABEL_97:
        v115.start.unsigned int value = 0;
        if (v17 <= 0)
        {
LABEL_119:
          if (!*(void *)(v23 + 112)
            || (CMNotificationCenterGetDefaultLocalCenter(), uint64_t v78 = CMNotificationCenterAddListener(), !v78))
          {
            bossSetExpectScaledEdits(*(const __CFArray **)(v23 + 72), (char *)(v23 + 104), (char *)(v23 + 105));
            MEMORY[0x19970E930](*(void *)(v23 + 64));
            *(_DWORD *)(v23 + 424) = 1634624887;
            *(void *)(v23 + 784) = voucher_copy();
            *a12 = v23;
            if (dword_1E9350D98)
            {
              int v108 = 0;
              uint64_t v95 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v96 = v108;
              if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT)) {
                unsigned int v97 = v96;
              }
              else {
                unsigned int v97 = v96 & 0xFFFFFFFE;
              }
              if (v97)
              {
                uint64_t v98 = *a12;
                int v111 = 136315394;
                unsigned int v112 = "FigPlaybackBossCreate";
                __int16 v113 = 2048;
                uint64_t v114 = v98;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            return 0;
          }
        }
        else
        {
          for (CFIndex i = 0; i != v17; ++i)
          {
            CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v23 + 72), i);
            uint64_t v82 = FigRenderPipelineGetFigBaseObject(ValueAtIndex[10]);
            uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v83) {
              uint64_t v84 = v83;
            }
            else {
              uint64_t v84 = 0;
            }
            v85 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTimeRange *))(v84 + 48);
            if (v85) {
              v85(v82, @"Timebase", v43, &v115);
            }
            if (v115.start.value)
            {
              CFRelease((CFTypeRef)v115.start.value);
              goto LABEL_115;
            }
          }
          for (CFIndex j = 0; j != v17; ++j)
          {
            unsigned int v87 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v23 + 72), j);
            uint64_t v88 = *(void *)(v23 + 112);
            uint64_t v89 = FigRenderPipelineGetFigBaseObject(v87[10]);
            uint64_t v90 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v90) {
              uint64_t v91 = v90;
            }
            else {
              uint64_t v91 = 0;
            }
            unsigned int v92 = *(void (**)(uint64_t, __CFString *, uint64_t))(v91 + 56);
            if (v92) {
              v92(v89, @"Timebase", v88);
            }
          }
LABEL_115:
          CFIndex v93 = 0;
          while (1)
          {
            uint64_t v94 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v23 + 72), v93);
            uint64_t v78 = bossBuildMentorForTrack(v23, (uint64_t)v94, v43, *(const __CFDictionary **)(a6 + 8 * v93));
            if (v78) {
              break;
            }
            v94[52] = 1000 * FigAtomicIncrement32();
            uint64_t v78 = bossAddNotificationListenersForTrack(v23, (uint64_t)v94);
            if (v78) {
              break;
            }
            if (v17 == ++v93) {
              goto LABEL_119;
            }
          }
        }
        goto LABEL_129;
      }
      uint64_t v28 = FigSignalErrorAt();
    }
    uint64_t v76 = v28;
    CFIndex v22 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    goto LABEL_134;
  }
LABEL_23:

  return FigSignalErrorAt();
}

uint64_t FigPlaybackBossGetTypeID()
{
  if (FigPlaybackBossGetTypeID_oneTimeOnly != -1) {
    dispatch_once_f(&FigPlaybackBossGetTypeID_oneTimeOnly, 0, (dispatch_function_t)figPlaybackBossClassInitialize);
  }
  return gFigPlaybackBossTypeID;
}

uint64_t figPlaybackBossClassInitialize()
{
  uint64_t result = _CFRuntimeRegisterClass();
  gFigPlaybackBossCFTypeID TypeID = result;
  return result;
}

void figPlaybackBossInit(uint64_t a1)
{
}

uint64_t figAudioQueueRenderPipelineCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_3:
    uint64_t Parameter = v8;
    goto LABEL_8;
  }
  if (CFEqual(@"SourceSampleBufferQueue", a2))
  {
    *a4 = *(void *)(DerivedStorage + 32);
    uint64_t v10 = *(const void **)(DerivedStorage + 32);
    if (!v10)
    {
LABEL_7:
      uint64_t Parameter = 0;
      goto LABEL_8;
    }
LABEL_6:
    CFRetain(v10);
    goto LABEL_7;
  }
  if (CFEqual(@"Timebase", a2))
  {
    *a4 = *(void *)(DerivedStorage + 112);
    uint64_t v10 = *(const void **)(DerivedStorage + 112);
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (!CFEqual(@"PerformanceDictionary", a2))
  {
    if (CFEqual(@"SoftwareVolume1", a2))
    {
      LODWORD(valuePtr) = 1065353216;
      if (*(unsigned char *)(DerivedStorage + 103))
      {
        LODWORD(valuePtr) = *(_DWORD *)(DerivedStorage + 104);
      }
      else
      {
        uint64_t Parameter = FigAudioQueueGetParameter(*(void *)(DerivedStorage + 40), 1u, &valuePtr);
        if (Parameter) {
          goto LABEL_8;
        }
      }
      uint64_t v13 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloatType, &valuePtr);
      goto LABEL_19;
    }
    if (CFEqual(@"EQPreset", a2))
    {
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      uint64_t v17 = kFigAudioQueueProperty_EQPreset;
LABEL_24:
      uint64_t v8 = FigAudioQueueCopyProperty(v16, *v17, a3, a4);
      goto LABEL_3;
    }
    if (CFEqual(@"Muted", a2))
    {
      CFTypeID v21 = (const void **)MEMORY[0x1E4F1CFD0];
      int v22 = *(unsigned __int8 *)(DerivedStorage + 103);
LABEL_35:
      if (!v22) {
        CFTypeID v21 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      uint64_t v13 = *v21;
LABEL_38:
      uint64_t v13 = CFRetain(v13);
      goto LABEL_19;
    }
    if (CFEqual(@"PreferredClock", a2))
    {
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      uint64_t v17 = kFigAudioQueueProperty_Clock;
      goto LABEL_24;
    }
    if (CFEqual(@"IsRunning", a2))
    {
      CFTypeID v21 = (const void **)MEMORY[0x1E4F1CFD0];
      int v22 = *(unsigned __int8 *)(DerivedStorage + 64);
      goto LABEL_35;
    }
    if (CFEqual(@"PipelineLatency", a2))
    {
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      uint64_t v17 = kFigAudioQueueProperty_PipelineLatency;
      goto LABEL_24;
    }
    if (CFEqual(@"UnpauseLatencyEstimate", a2))
    {
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      uint64_t v17 = kFigAudioQueueProperty_UnpauseLatencyEstimate;
      goto LABEL_24;
    }
    if (CFEqual(@"EndPresentationTimeForQueuedSamples", a2))
    {
      long long valuePtr = 0uLL;
      *(void *)&long long v39 = 0;
      CMBufferQueueGetEndPresentationTimeStamp((CMTime *)&valuePtr, *(CMBufferQueueRef *)(DerivedStorage + 32));
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      if (v16 && (BYTE12(valuePtr) & 1) == 0)
      {
        uint64_t v17 = kFigAudioQueueProperty_EndPresentationTimeForQueuedSamples;
        goto LABEL_24;
      }
      *(_OWORD *)CMTimeRange values = valuePtr;
      *(void *)&long long v29 = v39;
      uint64_t v13 = CMTimeCopyAsDictionary((CMTime *)values, a3);
LABEL_19:
      uint64_t Parameter = 0;
      *a4 = v13;
      goto LABEL_8;
    }
    if (CFEqual(@"EndPresentationTimeForDecodedSamples", a2))
    {
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      if (v16)
      {
        uint64_t v17 = kFigAudioQueueProperty_EndPresentationTimeForDecodedSamples;
        goto LABEL_24;
      }
LABEL_95:
      uint64_t Parameter = 4294954446;
      goto LABEL_8;
    }
    if (CFEqual(@"OfflineMixer", a2))
    {
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      uint64_t v17 = kFigAudioQueueProperty_OfflineMixer;
      goto LABEL_24;
    }
    if (CFEqual(@"AudioDeviceUID", a2))
    {
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      uint64_t v17 = kFigAudioQueueProperty_DeviceUID;
      goto LABEL_24;
    }
    if (CFEqual(@"AudioDeviceChannelMap", a2))
    {
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      uint64_t v17 = kFigAudioQueueProperty_DeviceChannelMap;
      goto LABEL_24;
    }
    if (CFEqual(@"STSLabel", a2))
    {
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      uint64_t v17 = kFigAudioQueueProperty_STSLabel;
      goto LABEL_24;
    }
    if (CFEqual(@"IsTimebaseStarter", a2))
    {
      CFTypeID v21 = (const void **)MEMORY[0x1E4F1CFD0];
      int v22 = *(unsigned __int8 *)(DerivedStorage + 65);
      goto LABEL_35;
    }
    if (CFEqual(@"AudioProcessingUnits", a2))
    {
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      uint64_t v17 = kFigAudioQueueProperty_AudioProcessingUnits;
      goto LABEL_24;
    }
    if (CFEqual(@"AudioCurves", a2))
    {
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      uint64_t v17 = kFigAudioQueueProperty_AudioCurves;
      goto LABEL_24;
    }
    if (CFEqual(@"SecondaryAudioCurves", a2))
    {
      uint64_t v16 = *(void *)(DerivedStorage + 40);
      uint64_t v17 = kFigAudioQueueProperty_SecondaryAudioCurves;
      goto LABEL_24;
    }
    if (CFEqual(@"HandleFormatDescriptionChanges", a2))
    {
      CFTypeID v21 = (const void **)MEMORY[0x1E4F1CFD0];
      int v22 = *(unsigned __int8 *)(DerivedStorage + 92);
      goto LABEL_35;
    }
    if (CFEqual(@"ExpectScaledEdits", a2))
    {
      uint64_t v25 = (const void **)MEMORY[0x1E4F1CFD0];
      if (!*(unsigned char *)(DerivedStorage + 100)) {
        uint64_t v25 = (const void **)MEMORY[0x1E4F1CFC8];
      }
    }
    else
    {
      if (CFEqual(@"IsPausedForConfigurationChange", a2))
      {
        uint64_t v16 = *(void *)(DerivedStorage + 40);
        uint64_t v17 = kFigAudioQueueProperty_IsPausedForConfigurationChange;
        goto LABEL_24;
      }
      if (!CFEqual(@"SpatializationEnabled", a2))
      {
        if (CFEqual(@"MXSession", a2))
        {
          uint64_t v16 = *(void *)(DerivedStorage + 40);
          uint64_t v17 = kFigAudioQueueProperty_MXSession;
          goto LABEL_24;
        }
        if (CFEqual(@"WillTrimShortDurationSamples", a2))
        {
          uint64_t v16 = *(void *)(DerivedStorage + 40);
          uint64_t v17 = kFigAudioQueueProperty_WillTrimShortDurationSamples;
          goto LABEL_24;
        }
        if (CFEqual(@"EmploysHardwarePassthrough", a2))
        {
          uint64_t v16 = *(void *)(DerivedStorage + 40);
          uint64_t v17 = kFigAudioQueueProperty_EmploysHardwarePassthrough;
          goto LABEL_24;
        }
        goto LABEL_95;
      }
      uint64_t v25 = (const void **)MEMORY[0x1E4F1CFD0];
      if ((*(unsigned char *)(DerivedStorage + 97) & 1) == 0) {
        uint64_t v25 = (const void **)MEMORY[0x1E4F1CFC8];
      }
    }
    uint64_t v13 = *v25;
    if (!*v25) {
      goto LABEL_19;
    }
    goto LABEL_38;
  }
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  memset(v27, 0, sizeof(v27));
  if (*(unsigned char *)v12)
  {
    uint64_t Parameter = 4294954444;
  }
  else
  {
    uint64_t v14 = *(void *)(v12 + 40);
    if (v14) {
      BOOL v15 = FigAudioQueueCopyPerformanceDictionary(v14, (CFDictionaryRef *)v27) == 0;
    }
    else {
      BOOL v15 = 0;
    }
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long valuePtr = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    *(_OWORD *)CMTimeRange values = 0u;
    long long v29 = 0u;
    if (*(unsigned char *)v18)
    {
      uint64_t Parameter = FigCFCreateCombinedDictionary();
      if (!v15) {
        goto LABEL_8;
      }
      uint64_t v19 = 1;
    }
    else
    {
      if (*(unsigned char *)(v18 + 204))
      {
        CMTime v26 = *(CMTime *)(v18 + 192);
        v26.unsigned int value = CMTimeGetSeconds(&v26);
        *(void *)&long long valuePtr = @"MaxStartDelay";
        values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &v26);
        CFDictionaryRef v20 = CFDictionaryCreate(a3, (const void **)&valuePtr, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFRelease(values[0]);
      }
      else
      {
        CFDictionaryRef v20 = CFDictionaryCreate(a3, (const void **)&valuePtr, (const void **)values, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      *(void *)((unint64_t)v27 | (8 * v15)) = v20;
      uint64_t v19 = v15 + 1;
      uint64_t Parameter = FigCFCreateCombinedDictionary();
    }
    uint64_t v23 = (const void **)v27;
    do
    {
      uint64_t v24 = *v23++;
      CFRelease(v24);
      --v19;
    }
    while (v19);
  }
LABEL_8:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  return Parameter;
}

uint64_t FigAudioQueueCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  if (a1 && a4)
  {
    *a4 = 0;
    MEMORY[0x19970E290](*(void *)(a1 + 24));
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t AudioQueueLatencyFigTime = FigSignalErrorAt();
      goto LABEL_12;
    }
    CFNumberRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
    if (CFEqual(a2, @"EndPresentationTimeForQueuedSamples"))
    {
      *(_OWORD *)&time.unsigned int value = *(_OWORD *)(ValueAtIndex + 484);
      CMTimeEpoch epoch = *(void *)(ValueAtIndex + 500);
LABEL_6:
      time.CMTimeEpoch epoch = epoch;
      p_CMTime time = &time;
LABEL_7:
      uint64_t v11 = CMTimeCopyAsDictionary(p_time, a3);
LABEL_8:
      uint64_t AudioQueueLatencyFigTime = 0;
LABEL_9:
      *a4 = v11;
LABEL_12:
      MEMORY[0x19970E2B0](*(void *)(a1 + 24));
      return AudioQueueLatencyFigTime;
    }
    if (CFEqual(a2, @"EndPresentationTimeForDecodedSamples"))
    {
      MEMORY[0x19970E910](*((void *)ValueAtIndex + 67));
      CMTime time = *(CMTime *)(ValueAtIndex + 508);
      *a4 = CMTimeCopyAsDictionary(&time, a3);
      MEMORY[0x19970E930](*((void *)ValueAtIndex + 67));
      uint64_t AudioQueueLatencyFigTime = 0;
      goto LABEL_12;
    }
    if (CFEqual(a2, @"Clock"))
    {
      uint64_t v11 = (const void *)*((void *)ValueAtIndex + 72);
      if (!v11)
      {
        uint64_t AudioQueueLatencyFigTime = 4294954356;
        goto LABEL_12;
      }
      goto LABEL_15;
    }
    if (CFEqual(a2, @"PipelineLatency"))
    {
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      if (*(_DWORD *)(*((void *)ValueAtIndex + 8) + 8) == 1819304813)
      {
        int64_t v14 = 1;
        int32_t v15 = 10;
      }
      else
      {
        int64_t v14 = 25;
        int32_t v15 = 100;
      }
      CMTimeMake(&time, v14, v15);
      if (ValueAtIndex[120])
      {
        CMTime lhs = time;
        CMTime rhs = *(CMTime *)(ValueAtIndex + 108);
        CMTimeAdd(&v29, &lhs, &rhs);
        CMTime time = v29;
      }
      CMTime v29 = time;
      p_CMTime time = &v29;
      goto LABEL_7;
    }
    if (CFEqual(a2, @"UnpauseLatencyEstimate"))
    {
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      uint64_t AudioQueueLatencyFigTime = subaq_getAudioQueueLatencyFigTime(a1, (uint64_t)ValueAtIndex, &time);
      CMTime v29 = time;
      uint64_t v11 = CMTimeCopyAsDictionary(&v29, a3);
      goto LABEL_9;
    }
    if (CFEqual(a2, @"DynamicLatency"))
    {
      CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      if (!*(unsigned char *)(a1 + 768) || !ValueAtIndex[721]) {
        goto LABEL_49;
      }
      rhs.unsigned int value = 0;
      UInt32 v26 = 8;
      if (FigAudioQueueTimingShimGetProperty(*((void *)ValueAtIndex + 5), 0x7164646Cu, &rhs, &v26))
      {
        if (dword_1E9350B70 < 5)
        {
LABEL_49:
          *(_OWORD *)&time.unsigned int value = *(_OWORD *)&lhs.value;
          CMTimeEpoch epoch = lhs.epoch;
          goto LABEL_6;
        }
      }
      else
      {
        CMTimeMakeWithSeconds(&lhs, *(Float64 *)&rhs.value, 1000000000);
        if (dword_1E9350B70 < 5) {
          goto LABEL_49;
        }
      }
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_49;
    }
    if (CFEqual(a2, @"OfflineMixer"))
    {
      uint64_t v11 = *(const void **)(a1 + 720);
      if (!v11) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
    if (CFEqual(a2, @"DeviceUID"))
    {
      time.unsigned int value = 0;
      LODWORD(v29.value) = 8;
      uint64_t v17 = *((void *)ValueAtIndex + 5);
      AudioQueuePropertyID v18 = 1634820964;
      goto LABEL_44;
    }
    if (CFEqual(a2, @"STSLabel"))
    {
      time.unsigned int value = 0;
      LODWORD(v29.value) = 8;
      uint64_t v17 = *((void *)ValueAtIndex + 5);
      AudioQueuePropertyID v18 = 1937011564;
LABEL_44:
      uint64_t AudioQueueLatencyFigTime = FigAudioQueueTimingShimGetProperty(v17, v18, &time, (UInt32 *)&v29);
      if (!AudioQueueLatencyFigTime) {
        *a4 = time.value;
      }
      goto LABEL_12;
    }
    if (CFEqual(a2, @"AllowedToUseHardware"))
    {
      uint64_t v19 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_48:
      uint64_t v11 = *v19;
LABEL_15:
      uint64_t v11 = CFRetain(v11);
      goto LABEL_8;
    }
    if (CFEqual(a2, @"MXSession"))
    {
      uint64_t v11 = *(const void **)(a1 + 256);
      if (!v11) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
    if (CFEqual(a2, @"TimebaseRate"))
    {
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFTypeID v21 = (CMTime *)(a1 + 416);
      CFNumberType v22 = kCFNumberFloat32Type;
LABEL_56:
      uint64_t v11 = CFNumberCreate(v20, v22, v21);
      goto LABEL_8;
    }
    if (CFEqual(a2, @"AudioProcessingUnits"))
    {
      uint64_t v11 = *(const void **)(a1 + 688);
      if (!v11) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
    if (CFEqual(a2, @"AudioCurves"))
    {
      uint64_t v11 = *(const void **)(a1 + 656);
      if (!v11) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
    if (CFEqual(a2, @"SecondaryAudioCurves"))
    {
      uint64_t v11 = *(const void **)(a1 + 664);
      if (!v11) {
        goto LABEL_8;
      }
      goto LABEL_15;
    }
    if (CFEqual(a2, @"DiscardSampleBuffers"))
    {
      uint64_t v19 = (const void **)MEMORY[0x1E4F1CFD0];
      int v23 = *(unsigned __int8 *)(a1 + 312);
    }
    else if (CFEqual(a2, @"IsPausedForConfigurationChange"))
    {
      uint64_t v19 = (const void **)MEMORY[0x1E4F1CFD0];
      int v23 = *(unsigned __int8 *)(a1 + 761);
    }
    else
    {
      if (CFEqual(a2, @"EQPreset"))
      {
        LODWORD(time.value) = -1;
        subaq_getEQPreset(a1, (uint64_t)ValueAtIndex, (int *)&time);
        CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFTypeID v21 = &time;
        CFNumberType v22 = kCFNumberIntType;
        goto LABEL_56;
      }
      if (!CFEqual(a2, @"WillTrimShortDurationSamples"))
      {
        if (!CFEqual(a2, @"EmploysHardwarePassthrough"))
        {
          uint64_t AudioQueueLatencyFigTime = 4294954353;
          goto LABEL_12;
        }
        uint64_t v19 = (const void **)MEMORY[0x1E4F1CFD0];
        uint64_t v24 = (const void **)MEMORY[0x1E4F1CFC8];
        BOOL v25 = (*(_DWORD *)(a1 + 48) & 4) == 0;
        goto LABEL_71;
      }
      uint64_t v19 = (const void **)MEMORY[0x1E4F1CFD0];
      int v23 = ValueAtIndex[544];
    }
    uint64_t v24 = (const void **)MEMORY[0x1E4F1CFC8];
    BOOL v25 = v23 == 0;
LABEL_71:
    if (v25) {
      uint64_t v19 = v24;
    }
    goto LABEL_48;
  }

  return FigSignalErrorAt();
}

uint64_t FigSampleBufferConsumerCreateForBufferQueue(uint64_t a1, long long *a2, long long *a3, void *a4)
{
  long long v7 = *a2;
  uint64_t v8 = *((void *)a2 + 2);
  long long v5 = *a3;
  uint64_t v6 = *((void *)a3 + 2);
  return FigSampleBufferConsumerCreateForBufferQueue2(a1, (uint64_t)&v7, 0, (uint64_t)&v5, 0, a4);
}

uint64_t FigSampleBufferConsumerGetClassID()
{
  return sFigSampleBufferConsumerClassID;
}

uint64_t RegisterFigSampleBufferConsumerType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t figSampleGeneratorCreateForFormatReaderCommon(const void *a1, const void *a2, const void *a3, int a4, char a5, const void *a6, uint64_t a7, CMTime *a8, char a9, const void *a10, void *a11)
{
  CFDictionaryRef v55 = 0;
  CFTypeRef v56 = 0;
  CFAllocatorRef v53 = 0;
  CFTypeRef v54 = 0;
  if (a11)
  {
    CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    FigSampleGeneratorGetClassID();
    uint64_t v18 = CMDerivedObjectCreate();
    if (v18) {
      goto LABEL_3;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)uint64_t DerivedStorage = a1;
    if (a1) {
      CFRetain(a1);
    }
    if (a2) {
      CFTypeRef v21 = CFRetain(a2);
    }
    else {
      CFTypeRef v21 = 0;
    }
    *(void *)(DerivedStorage + 16) = v21;
    CFTypeRef v22 = a3;
    if (a3) {
      CFTypeRef v22 = CFRetain(a3);
    }
    *(void *)(DerivedStorage + 24) = v22;
    *(unsigned char *)(DerivedStorage + 32) = a5;
    if (a6) {
      *(void *)(DerivedStorage + 40) = CFRetain(a6);
    }
    *(void *)(DerivedStorage + 56) = a7;
    CMTime time = *a8;
    CMTimeConvertScale(&v52, &time, 1000000000, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    *(CMTime *)(DerivedStorage + 64) = v52;
    int v23 = *(const void **)(DerivedStorage + 56);
    if (v23) {
      CFRetain(v23);
    }
    if (a4) {
      *(unsigned char *)(DerivedStorage + 33) = 1;
    }
    if (a10)
    {
      *(void *)(DerivedStorage + 48) = CFRetain(a10);
      CFAllocatorRef v24 = v17;
    }
    else
    {
      uint64_t v25 = FigSampleGeneratorDataSourceCacheCreate((uint64_t)a1, (void *)(DerivedStorage + 48));
      CFAllocatorRef v24 = v17;
      if (v25)
      {
        uint64_t v18 = v25;
LABEL_3:
        if (v56) {
          CFRelease(v56);
        }
        return v18;
      }
    }
    if (!*(unsigned char *)(DerivedStorage + 32))
    {
      if (gSGFFRCommonMemoryPool != -1) {
        dispatch_once_f(&gSGFFRCommonMemoryPool, 0, (dispatch_function_t)sgffr_initializeSharedMemoryPoolManagement);
      }
      MEMORY[0x19970E910](qword_1E934D880);
      CMMemoryPoolRef v26 = (CMMemoryPoolRef)MEMORY[0x19970C720](&unk_1E934D888);
      if (!v26 && byte_1E934D890)
      {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v24, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21788], @"SampleGeneratorForFormatReader-SampleData");
        CMMemoryPoolRef v26 = CMMemoryPoolCreate(Mutable);
        if (Mutable) {
          CFRelease(Mutable);
        }
        FigCFWeakReferenceStore();
      }
      MEMORY[0x19970E930](qword_1E934D880);
      *(void *)(DerivedStorage + 8) = v26;
    }
    uint64_t v28 = MEMORY[0x1E4F1FA48];
    long long v29 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)(DerivedStorage + 88) = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v30 = *(void *)(v28 + 16);
    *(void *)(DerivedStorage + 104) = v30;
    *(_OWORD *)(DerivedStorage + 112) = v29;
    *(void *)(DerivedStorage + 128) = v30;
    if ((a9 & 2) != 0) {
      *(unsigned char *)(DerivedStorage + 34) = 1;
    }
    if (a3)
    {
      long long v48 = v29;
      uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a3);
      uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v32) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      long long v35 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, const __CFDictionary **))(v33 + 48);
      if (v35)
      {
        v35(FigBaseObject, @"AdvanceDecodeDelta", v24, &v55);
        if (v55)
        {
          CMTimeMakeFromDictionary(&v52, v55);
          CFRelease(v55);
          CMTime time = v52;
          *(_OWORD *)&time2.unsigned int value = v48;
          time2.CMTimeEpoch epoch = v30;
          if (CMTimeCompare(&time, &time2) >= 1)
          {
            long long v36 = (CMTime *)(DerivedStorage + 88);
            if ((a9 & 1) == 0) {
              long long v36 = (CMTime *)(DerivedStorage + 112);
            }
            CMTime *v36 = v52;
          }
        }
      }
      uint64_t v37 = FigTrackReaderGetFigBaseObject(a3);
      uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v38) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = 0;
      }
      long long v40 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v39 + 48);
      if (v40)
      {
        v40(v37, @"HasAudioSampleDependencyInformation", v24, &v54);
        CFTypeRef v41 = v54;
      }
      else
      {
        CFTypeRef v41 = 0;
      }
      long long v42 = (const void *)*MEMORY[0x1E4F1CFD0];
      if (v41 == (CFTypeRef)*MEMORY[0x1E4F1CFD0]) {
        *(unsigned char *)(DerivedStorage + 35) = 1;
      }
      uint64_t v43 = FigTrackReaderGetFigBaseObject(a3);
      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v44) {
        uint64_t v45 = v44;
      }
      else {
        uint64_t v45 = 0;
      }
      long long v46 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, const void **))(v45 + 48);
      if (v46)
      {
        v46(v43, @"HasSeamSamples", v24, &v53);
        long long v34 = v53;
      }
      else
      {
        long long v34 = 0;
      }
      if (v34 == v42)
      {
        *(unsigned char *)(DerivedStorage + 36) = 1;
        long long v34 = v42;
      }
    }
    else
    {
      long long v34 = 0;
    }
    *a11 = v56;
    CFTypeRef v56 = 0;
    if (v54)
    {
      CFRelease(v54);
      long long v34 = v53;
    }
    if (v34) {
      CFRelease(v34);
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigSampleGeneratorGetClassID()
{
  return sFigSampleGeneratorClassID;
}

uint64_t RegisterFigSampleGeneratorType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t AudioMentorNew(const void *a1, const void *a2, const void *a3, const __CFDictionary *a4, void *a5)
{
  CMTimeRange values = @"com.apple.coremedia.audiomentor";
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a5)
        {
          fig_note_initialize_category_with_default_work_cf();
          fig_note_initialize_category_with_default_work_cf();
          uint64_t v10 = malloc_type_calloc(0x160uLL, 1uLL, 0x9705882BuLL);
          if (v10)
          {
            uint64_t v11 = v10;
            v10[1] = CFRetain(a1);
            v11[2] = CFRetain(a2);
            v11[3] = CFRetain(a3);
            *((unsigned char *)v11 + 41) = 0;
            if (a4)
            {
              int Value = CFDictionaryGetValue(a4, @"SampleBufferCryptor");
              v11[6] = Value;
              if (Value) {
                CFRetain(Value);
              }
              if (_os_feature_enabled_impl())
              {
                uint64_t v13 = (const void *)*MEMORY[0x1E4F1CFD0];
                BOOL v14 = v13 == CFDictionaryGetValue(a4, @"OptimizeSampleCursorIPCForPower");
              }
              else
              {
                BOOL v14 = 0;
              }
              *((unsigned char *)v11 + 41) = v14;
            }
            FigCFDictionaryGetInt32IfPresent();
            v11[10] = FigSemaphoreCreate();
            v11[11] = FigSemaphoreCreate();
            v11[12] = FigSimpleMutexCreate();
            v11[9] = FigSimpleMutexCreate();
            v11[15] = FigSemaphoreCreate();
            *((_DWORD *)v11 + 11) = 0;
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterAddListener();
            uint64_t v16 = v11[3];
            uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v17) {
              uint64_t v18 = v17;
            }
            else {
              uint64_t v18 = 0;
            }
            uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t (*)(), void *, void *))(v18 + 32);
            if (v19)
            {
              uint64_t v20 = v19(v16, audioMentorLowWaterTrigger, v11, v11 + 4);
              if (!v20)
              {
                *((unsigned char *)v11 + 40) = 1;
                *((_DWORD *)v11 + 28) = 0;
                CFDictionaryRef v21 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21EA8], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                uint64_t v20 = FigThreadCreate();
                if (!v20)
                {
                  *a5 = v11;
                  uint64_t v11 = 0;
                }
                if (v21) {
                  CFRelease(v21);
                }
                goto LABEL_28;
              }
            }
            else
            {
              uint64_t v20 = 4294954514;
            }
            FigSignalErrorAt();
LABEL_28:
            AudioMentorDispose(v11);
            return v20;
          }
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t sbcbq_installLowWaterTrigger(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = DerivedStorage;
  if ((*(_DWORD *)(DerivedStorage + 60) & 0x1D) == 1)
  {
    uint64_t v10 = (_OWORD *)(DerivedStorage + 48);
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 104));
    *(void *)(v9 + 112) = a2;
    *(void *)(v9 + 120) = a3;
    MEMORY[0x19970E930](*(void *)(v9 + 104));
    uint64_t v11 = *(opaqueCMBufferQueue **)(v9 + 136);
    if (*(void *)(v9 + 72))
    {
      *(_OWORD *)&v13.unsigned int value = *v10;
      v13.CMTimeEpoch epoch = *(void *)(v9 + 64);
      uint64_t result = FigBufferQueueInstallTriggerWithTimeAndIntegerThresholds();
    }
    else
    {
      *(_OWORD *)&v13.unsigned int value = *v10;
      v13.CMTimeEpoch epoch = *(void *)(v9 + 64);
      uint64_t result = CMBufferQueueInstallTrigger(v11, (CMBufferQueueTriggerCallback)sbcbq_LowWater, a1, 2, &v13, (CMBufferQueueTriggerToken *)(v9 + 128));
    }
  }
  else
  {
    uint64_t result = 0;
  }
  *a4 = v9 + 104;
  return result;
}

uint64_t sbcbq_LowWater()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(result + 8))
  {
    uint64_t v1 = result;
    MEMORY[0x19970E910](*(void *)(result + 104));
    uint64_t v2 = *(void (**)(void))(v1 + 112);
    if (v2) {
      v2(*(void *)(v1 + 120));
    }
    JUMPOUT(0x19970E930);
  }
  return result;
}

uint64_t audioMentorLowWaterTrigger()
{
  return FigSemaphoreSignal();
}

uint64_t audioMentorThread(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a1 + 41)) {
    FigFormatReaderXPCRemoteEnsureEfficientIPCFromCurrentThread(*(unsigned int *)(a1 + 44), &cf);
  }
  if (*(_DWORD *)(a1 + 112) == 4) {
    goto LABEL_4;
  }
  v283 = (_OWORD *)(a1 + 300);
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  v282 = (_OWORD *)(a1 + 324);
  CFTypeRef v273 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  keCGFloat y = (const __CFString *)*MEMORY[0x1E4F1F2C0];
  v270 = (void *)(a1 + 268);
  uint64_t v261 = *MEMORY[0x1E4F1F348];
  uint64_t v262 = *MEMORY[0x1E4F1F340];
  v277 = (CFTypeRef *)(a1 + 288);
  CFStringRef v264 = (const __CFString *)*MEMORY[0x1E4F1F298];
  CFStringRef v265 = (const __CFString *)*MEMORY[0x1E4F1F290];
  v260 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFStringRef v266 = (const __CFString *)*MEMORY[0x1E4F1F2B8];
  CFStringRef v263 = (const __CFString *)*MEMORY[0x1E4F1F278];
  CFStringRef v259 = (const __CFString *)*MEMORY[0x1E4F1F238];
  do
  {
    MEMORY[0x19970E910](*(void *)(a1 + 96));
    int v4 = *(_DWORD *)(a1 + 112);
    long long v5 = *(const void **)(a1 + 128);
    CMTime v295 = *(CMTime *)(a1 + 136);
    v286 = *(const void **)(a1 + 160);
    v287 = v5;
    CMTime v294 = *(CMTime *)(a1 + 168);
    int v7 = *(_DWORD *)(a1 + 192);
    int v6 = *(_DWORD *)(a1 + 196);
    int v9 = *(_DWORD *)(a1 + 200);
    int v8 = *(_DWORD *)(a1 + 204);
    uint64_t v10 = *(int *)(a1 + 208);
    long long v11 = *(_OWORD *)(a1 + 212);
    uint64_t v293 = *(void *)(a1 + 228);
    long long v292 = v11;
    int v12 = *(unsigned __int8 *)(a1 + 236);
    char v13 = *(unsigned char *)(a1 + 237);
    int v284 = *(unsigned __int8 *)(a1 + 238);
    int v14 = *(unsigned __int8 *)(a1 + 239);
    int32_t v15 = *(const void **)(a1 + 248);
    v285 = *(const void **)(a1 + 240);
    uint64_t v16 = *(const void **)(a1 + 256);
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 280) = 0;
    *(unsigned char *)(a1 + 116) = 0;
    *(void *)(a1 + 248) = 0;
    *(void *)(a1 + 256) = 0;
    *(void *)(a1 + 240) = 0;
    if (!v4)
    {
      if (*(unsigned char *)(a1 + 117))
      {
        *(unsigned char *)(a1 + 117) = 0;
        FigSemaphoreSignal();
      }
      FigMemoryBarrier();
      MEMORY[0x19970E930](*(void *)(a1 + 96));
      CFDictionaryRef v21 = v286;
      uint64_t v18 = v287;
      CFTypeRef v22 = v285;
      if (v15) {
        audioMentorEnqueueBufferConsumedMarker(a1, v15);
      }
      goto LABEL_549;
    }
    int v280 = v6;
    char v278 = v13;
    FigMemoryBarrier();
    MEMORY[0x19970E930](*(void *)(a1 + 96));
    if ((v4 - 1) >= 2)
    {
      BOOL v221 = v4 == 3;
      CFDictionaryRef v21 = v286;
      uint64_t v18 = v287;
      CFTypeRef v22 = v285;
      if (!v221) {
        goto LABEL_549;
      }
      *(void *)&v303[0] = 0;
      *(_DWORD *)(a1 + 264) = v7;
      if ((v280 - 3) >= 0xFFFFFFFE)
      {
        uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
        int v23 = v284;
        if (v27) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = 0;
        }
        if (*(void *)(v28 + 72))
        {
          uint64_t v51 = *(void *)(a1 + 24);
          uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v53 = v52 ? v52 : 0;
          uint64_t v67 = *(void (**)(uint64_t))(v53 + 72);
          if (v67) {
            v67(v51);
          }
        }
        *(unsigned char *)(a1 + 297) = 1;
        values[0] = 0;
        OSStatus v68 = CMSampleBufferCreate(allocator, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)v303);
        if (v68)
        {
          int v55 = v68;
          goto LABEL_139;
        }
        ++*(_DWORD *)(a1 + 268);
        values[0] = CFNumberCreate(allocator, kCFNumberIntType, v270);
        CFDictionaryRef v69 = CFDictionaryCreate(allocator, MEMORY[0x1E4F1F328], (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CMSetAttachment(*(CMAttachmentBearerRef *)&v303[0], key, values[0], 1u);
        uint64_t v70 = *(void *)(a1 + 24);
        uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v71) {
          uint64_t v72 = v71;
        }
        else {
          uint64_t v72 = 0;
        }
        uint64_t v73 = *(void (**)(uint64_t, uint64_t, CFDictionaryRef, void))(v72 + 64);
        if (v73) {
          v73(v70, v262, v69, 0);
        }
        uint64_t v74 = *(void *)(a1 + 24);
        uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v75) {
          uint64_t v76 = v75;
        }
        else {
          uint64_t v76 = 0;
        }
        uint64_t v77 = *(void (**)(uint64_t, uint64_t, void, void))(v76 + 64);
        if (v77) {
          v77(v74, v261, 0, 0);
        }
        if (values[0]) {
          CFRelease(values[0]);
        }
        if (v69) {
          CFRelease(v69);
        }
        if (v284) {
          FigSemaphoreSignal();
        }
        uint64_t v78 = *(void *)(a1 + 24);
        uint64_t v79 = *(void *)&v303[0];
        uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v80) {
          uint64_t v81 = v80;
        }
        else {
          uint64_t v81 = 0;
        }
        uint64_t v82 = *(uint64_t (**)(uint64_t, uint64_t))(v81 + 8);
        if (!v82)
        {
          int v23 = 0;
          goto LABEL_138;
        }
        int v83 = v82(v78, v79);
        if (v83)
        {
          int v55 = v83;
          int v23 = 0;
          goto LABEL_139;
        }
        int v23 = 0;
        if (!v285)
        {
LABEL_82:
          if (v15) {
            int v55 = audioMentorEnqueueBufferConsumedMarker(a1, v15);
          }
          else {
            int v55 = 0;
          }
          CFTypeRef v56 = 0;
          if (!v23) {
            goto LABEL_141;
          }
          goto LABEL_140;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 297) = 1;
        int v23 = v284;
        if (!v285) {
          goto LABEL_82;
        }
      }
      uint64_t v24 = *(void *)(a1 + 24);
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v25) {
        uint64_t v26 = v25;
      }
      else {
        uint64_t v26 = 0;
      }
      CFTypeRef v54 = *(uint64_t (**)(uint64_t, const void *))(v26 + 8);
      if (v54)
      {
        int v55 = v54(v24, v285);
        if (!v55) {
          goto LABEL_82;
        }
LABEL_139:
        FigSignalErrorAt();
        CFTypeRef v56 = v15;
        if (!v23)
        {
LABEL_141:
          audioMentorThreadFinishPreroll(a1, 0, v16);
          if (!*(unsigned char *)a1)
          {
            uint64_t v84 = @"MentorStoppingDueToCompletion";
            if (v55) {
              uint64_t v84 = @"MentorStoppingDueToError";
            }
            if (v55 == -1) {
              int v85 = 0;
            }
            else {
              int v85 = v55;
            }
            if (v55 == -1) {
              uint64_t v86 = @"MentorResettingDueToModeSwitch";
            }
            else {
              uint64_t v86 = v84;
            }
            unsigned int v87 = FigMentorNotificationPayloadCreate((uint64_t)v86, v16, v85, *(unsigned __int8 *)(a1 + 280), v56, 0);
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            if (v87) {
              CFRelease(v87);
            }
          }
          if (*(void *)&v303[0]) {
            CFRelease(*(CFTypeRef *)&v303[0]);
          }
          goto LABEL_549;
        }
LABEL_140:
        FigSemaphoreSignal();
        goto LABEL_141;
      }
LABEL_138:
      int v55 = -12782;
      goto LABEL_139;
    }
    CMTime v291 = v295;
    CMTime v290 = v294;
    long long v288 = v292;
    uint64_t v289 = v293;
    CFTypeRef v311 = v286;
    v312[0] = v287;
    int valuePtr = v9;
    CMSampleBufferRef v309 = 0;
    uint64_t v301 = 0;
    CFNumberRef v302 = 0;
    int v17 = *MEMORY[0x1E4F1EBA8];
    if ((v7 & 0xFFFFFFFD) == 1 && v17 == 1)
    {
      kdebug_trace();
      int v17 = *MEMORY[0x1E4F1EBA8];
    }
    uint64_t v18 = v287;
    if (v17 == 1) {
      kdebug_trace();
    }
    *(_DWORD *)(a1 + 284) = 0;
    *(_DWORD *)(a1 + 264) = v7;
    uint64_t v19 = *(const void **)(a1 + 272);
    *(void *)(a1 + 272) = v16;
    if (v16) {
      CFRetain(v16);
    }
    if (v19) {
      CFRelease(v19);
    }
    values[0] = 0;
    values[1] = 0;
    uint64_t v308 = 0;
    memset(v303, 0, sizeof(v303));
    long long v304 = 0u;
    memset(v305, 0, sizeof(v305));
    CFTypeRef v20 = v287;
    uint64_t v306 = 0;
    if (v14)
    {
      CMTime time1 = v291;
      *(_OWORD *)&time2.CFNumberRef value = *v283;
      time2.CMTimeEpoch epoch = *(void *)(a1 + 316);
      if (CMTimeCompare(&time1, &time2))
      {
        CFTypeRef v20 = v312[0];
        goto LABEL_39;
      }
      CFTypeRef v20 = v312[0];
      if ((*(_DWORD *)(a1 + 336) & 0x1D) == 1)
      {
        if (v312[0]) {
          goto LABEL_40;
        }
        *(_OWORD *)&v291.CFNumberRef value = *v282;
        v291.CMTimeEpoch epoch = *(void *)(a1 + 340);
LABEL_48:
        CMTime time1 = v291;
        int CursorForPresentationTimeStamp = audioMentorCreateCursorForPresentationTimeStamp(a1, v12, (long long *)&time1.value, (uint64_t)v312);
        if (CursorForPresentationTimeStamp) {
          goto LABEL_49;
        }
        if (v4 == 2)
        {
          memset(&time1, 0, sizeof(time1));
          CFTypeRef v31 = v312[0];
          uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v40) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = 0;
          }
          uint64_t v88 = *(uint64_t (**)(CFTypeRef, CMTime *))(v41 + 40);
          if (v88)
          {
            LODWORD(v31) = v88(v31, &time1);
            if (v31) {
              goto LABEL_468;
            }
            if ((time1.flags & 0x1D) == 1)
            {
              CMTime time2 = time1;
              CMTime lhs = v291;
              if (!CMTimeCompare(&time2, &lhs))
              {
                CFTypeRef v31 = v312[0];
                uint64_t v225 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v225) {
                  uint64_t v226 = v225;
                }
                else {
                  uint64_t v226 = 0;
                }
                v229 = *(uint64_t (**)(CFTypeRef, uint64_t, void))(v226 + 168);
                if (!v229) {
                  goto LABEL_467;
                }
                LODWORD(v31) = v229(v31, -1, 0);
                if (v31) {
                  goto LABEL_468;
                }
              }
              goto LABEL_159;
            }
            int CursorForPresentationTimeStamp = FigSignalErrorAt();
LABEL_49:
            LODWORD(v31) = CursorForPresentationTimeStamp;
          }
          else
          {
LABEL_467:
            LODWORD(v31) = -12782;
LABEL_468:
            FigSignalErrorAt();
          }
          uint64_t v60 = 0;
          int v29 = 0;
          goto LABEL_511;
        }
LABEL_159:
        int v29 = 1;
        goto LABEL_41;
      }
    }
LABEL_39:
    if (!v20) {
      goto LABEL_48;
    }
LABEL_40:
    int v29 = 0;
LABEL_41:
    if ((v291.flags & 0x1D) != 1)
    {
      CFTypeRef v31 = v312[0];
      uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v35) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      long long v42 = *(uint64_t (**)(CFTypeRef, CMTime *))(v36 + 40);
      if (!v42)
      {
LABEL_508:
        LODWORD(v31) = -12782;
        goto LABEL_509;
      }
      LODWORD(v31) = v42(v31, &v291);
      if (v31) {
        goto LABEL_509;
      }
      if ((v291.flags & 0x1D) != 1) {
        goto LABEL_460;
      }
      if (v4 == 2)
      {
        int v276 = v29;
        long long v271 = *MEMORY[0x1E4F1FA48];
        *(_OWORD *)&time1.CFNumberRef value = *MEMORY[0x1E4F1FA48];
        CMTimeEpoch v43 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        time1.CMTimeEpoch epoch = v43;
        CFTypeRef v44 = v312[0];
        uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v45) {
          uint64_t v46 = v45;
        }
        else {
          uint64_t v46 = 0;
        }
        v223 = *(uint64_t (**)(CFTypeRef, CMTime *))(v46 + 56);
        if (v223)
        {
          int v224 = v223(v44, &time1);
          if (!v224)
          {
            int v29 = v276;
            if ((time1.flags & 0x1D) != 1) {
              goto LABEL_460;
            }
            goto LABEL_450;
          }
          LODWORD(v31) = v224;
          if (v224 != -12782)
          {
            FigSignalErrorAt();
            int v29 = v276;
            goto LABEL_510;
          }
        }
        *(_OWORD *)&time1.CFNumberRef value = v271;
        time1.CMTimeEpoch epoch = v43;
        int v29 = v276;
LABEL_450:
        CMTime lhs = v291;
        CMTime rhs = time1;
        CMTimeAdd(&time2, &lhs, &rhs);
        CMTime v291 = time2;
      }
    }
    if (v311 || (v290.flags & 0x1D) != 1)
    {
      int v275 = 0;
    }
    else
    {
      CMTime time1 = v290;
      int v30 = audioMentorCreateCursorForPresentationTimeStamp(a1, v12, (long long *)&time1.value, (uint64_t)&v311);
      if (v30) {
        goto LABEL_461;
      }
      if (v4 == 1)
      {
        memset(&time1, 0, sizeof(time1));
        CFTypeRef v31 = v311;
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v32) {
          uint64_t v33 = v32;
        }
        else {
          uint64_t v33 = 0;
        }
        CFStringRef v211 = *(uint64_t (**)(CFTypeRef, CMTime *))(v33 + 40);
        if (!v211) {
          goto LABEL_508;
        }
        LODWORD(v31) = v211(v31, &time1);
        if (v31) {
          goto LABEL_509;
        }
        if ((time1.flags & 0x1D) != 1)
        {
LABEL_460:
          int v30 = FigSignalErrorAt();
LABEL_461:
          LODWORD(v31) = v30;
          goto LABEL_510;
        }
        CMTime time2 = time1;
        CMTime lhs = v290;
        if (!CMTimeCompare(&time2, &lhs))
        {
          CFTypeRef v31 = v311;
          uint64_t v234 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v234) {
            uint64_t v235 = v234;
          }
          else {
            uint64_t v235 = 0;
          }
          CFTypeRef v241 = *(uint64_t (**)(CFTypeRef, uint64_t, void))(v235 + 168);
          if (!v241) {
            goto LABEL_508;
          }
          LODWORD(v31) = v241(v31, -1, 0);
          if (v31) {
            goto LABEL_509;
          }
        }
        if (v10)
        {
          CFTypeRef v31 = v311;
          if (v311)
          {
            uint64_t v212 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v212) {
              uint64_t v213 = v212;
            }
            else {
              uint64_t v213 = 0;
            }
            int v242 = *(uint64_t (**)(CFTypeRef, CMTime *))(v213 + 40);
            if (!v242) {
              goto LABEL_508;
            }
            LODWORD(v31) = v242(v31, &time1);
            if (v31) {
              goto LABEL_509;
            }
            if ((time1.flags & 0x1D) != 1) {
              goto LABEL_460;
            }
            CFTypeRef v31 = v311;
            uint64_t v243 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v243) {
              uint64_t v244 = v243;
            }
            else {
              uint64_t v244 = 0;
            }
            uint64_t v255 = *(uint64_t (**)(CFTypeRef, uint64_t, void))(v244 + 168);
            if (!v255)
            {
              LODWORD(v31) = -12782;
              uint64_t v18 = v287;
LABEL_509:
              FigSignalErrorAt();
LABEL_510:
              uint64_t v60 = 0;
LABEL_511:
              int v109 = 0;
              goto LABEL_512;
            }
            LODWORD(v31) = v255(v31, v10, 0);
            uint64_t v18 = v287;
            if (v31) {
              goto LABEL_509;
            }
          }
        }
      }
      int v275 = 1;
    }
    uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(v312[0]);
    uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v38) {
      uint64_t v39 = v38;
    }
    else {
      uint64_t v39 = 0;
    }
    long long v47 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, const __CFNumber **))(v39 + 48);
    if (v47) {
      v47(FigBaseObject, @"GradualDecoderRefresh", allocator, &v302);
    }
    CFNumberRef v48 = v302;
    if (v302)
    {
      CFNumberGetValue(v302, kCFNumberSInt32Type, &valuePtr);
      CFNumberRef v49 = v302;
      if (v4 == 2)
      {
        int valuePtr = 0;
        if (v302)
        {
          CFRelease(v302);
          CFNumberRef v49 = 0;
          int v8 = 0;
          CFNumberRef v302 = 0;
        }
        else
        {
          int v8 = 0;
        }
        goto LABEL_89;
      }
      int v50 = 0;
    }
    else
    {
      if (v4 == 2)
      {
        CFNumberRef v49 = 0;
        int v8 = 0;
        int valuePtr = 0;
LABEL_89:
        int v50 = 1;
        goto LABEL_90;
      }
      int v50 = 0;
      CFNumberRef v49 = 0;
    }
LABEL_90:
    if (valuePtr)
    {
      if (!v49)
      {
        CFNumberRef v302 = CFNumberCreate(allocator, kCFNumberSInt32Type, &valuePtr);
        if (!v302)
        {
          FigSignalErrorAt();
          uint64_t v60 = 0;
          LODWORD(v31) = 0;
          goto LABEL_487;
        }
      }
    }
    CFNumberRef value = v48;
    if (v4 != 1 || !v311) {
      goto LABEL_165;
    }
    CFTypeRef v57 = v312[0];
    time1.CFNumberRef value = 0;
    uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v59 = v58 ? v58 : 0;
    uint64_t v61 = *(void (**)(CFTypeRef, CMTime *))(v59 + 160);
    if (!v61) {
      goto LABEL_165;
    }
    v61(v57, &time1);
    if (!time1.value) {
      goto LABEL_165;
    }
    if (CMFormatDescriptionGetMediaType((CMFormatDescriptionRef)time1.value) == 1936684398)
    {
      time2.CFNumberRef value = 0;
      FormatList = CMAudioFormatDescriptionGetFormatList((CMAudioFormatDescriptionRef)time1.value, (size_t *)&time2);
      if (FormatList)
      {
        if (time2.value >= 0x30uLL)
        {
          unint64_t v214 = time2.value / 0x30uLL;
          p_mFormatID = (int *)&FormatList->mASBD.mFormatID;
          while (1)
          {
            int v217 = *p_mFormatID;
            p_mFormatID += 12;
            int v216 = v217;
            int v63 = 1;
            if (v217 > 1885430639) {
              break;
            }
            if (v216 > 1667326823)
            {
              if (v216 > 1668641632)
              {
                if (v216 == 1668641633) {
                  goto LABEL_105;
                }
                int v222 = 1885430632;
              }
              else
              {
                if (v216 == 1667326824) {
                  goto LABEL_105;
                }
                int v222 = 1667326832;
              }
LABEL_442:
              if (v216 == v222) {
                goto LABEL_105;
              }
              goto LABEL_443;
            }
            unsigned int v218 = v216 - 1633772389;
            BOOL v219 = v218 > 0xB;
            int v220 = (1 << v218) & 0x80F;
            BOOL v221 = v219 || v220 == 0;
            if (!v221) {
              goto LABEL_105;
            }
LABEL_443:
            int v63 = 0;
            if (!--v214) {
              goto LABEL_105;
            }
          }
          if (v216 <= 1903522656)
          {
            if (v216 > 1902207847)
            {
              if (v216 == 1902207848) {
                goto LABEL_105;
              }
              int v222 = 1902207856;
            }
            else
            {
              if (v216 == 1885430640) {
                goto LABEL_105;
              }
              int v222 = 1886745441;
            }
          }
          else if (v216 <= 2053202791)
          {
            if (v216 == 1903522657) {
              goto LABEL_105;
            }
            int v222 = 1970495843;
          }
          else
          {
            if (v216 == 2053202792 || v216 == 2053202800) {
              goto LABEL_105;
            }
            int v222 = 2054517601;
          }
          goto LABEL_442;
        }
      }
    }
    int v63 = 0;
LABEL_105:
    if (time1.value) {
      CFRelease((CFTypeRef)time1.value);
    }
    if (!v63) {
      goto LABEL_165;
    }
    CFTypeRef v64 = v311;
    uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v65) {
      uint64_t v66 = v65;
    }
    else {
      uint64_t v66 = 0;
    }
    uint64_t v89 = *(uint64_t (**)(CFTypeRef, uint64_t, void))(v66 + 168);
    if (!v89)
    {
      LODWORD(v31) = -12782;
LABEL_232:
      FigSignalErrorAt();
      uint64_t v60 = 0;
LABEL_487:
      uint64_t v210 = v15;
      int v109 = v275;
      goto LABEL_513;
    }
    LODWORD(v31) = v89(v64, 1, 0);
    if (v31) {
      goto LABEL_232;
    }
LABEL_165:
    CFTypeRef v90 = v312[0];
    time1.CFNumberRef value = 0;
    int v272 = v50;
    if (!v8
      || ((uint64_t v91 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v92 = 0) : (v92 = v91),
          (CFIndex v93 = *(uint64_t (**)(CFTypeRef, CMTime *))(v92 + 8)) == 0))
    {
      int v98 = v29;
LABEL_174:
      int v8 = 0;
      goto LABEL_175;
    }
    int v94 = v93(v90, &time1);
    uint64_t v95 = (const void *)time1.value;
    if (v94)
    {
      BOOL v128 = 0;
    }
    else
    {
      time2.CFNumberRef value = 0;
      uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v96) {
        uint64_t v97 = v96;
      }
      else {
        uint64_t v97 = 0;
      }
      CMTimeValue v110 = *(void *)(v97 + 168);
      if (v110)
      {
        BOOL v111 = ((uint64_t (*)(const void *, void, CMTime *))v110)(v95, ~v8, &time2) == 0;
        CMTimeValue v110 = time2.value;
      }
      else
      {
        BOOL v111 = 0;
      }
      BOOL v128 = v110 != ~v8 && v111;
      uint64_t v95 = (const void *)time1.value;
    }
    int v98 = v29;
    if (v95) {
      CFRelease(v95);
    }
    if (!v128) {
      goto LABEL_174;
    }
LABEL_175:
    CFTypeRef v99 = v312[0];
    int v100 = valuePtr;
    time1.CFNumberRef value = 0;
    uint64_t v101 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v101) {
      uint64_t v102 = v101;
    }
    else {
      uint64_t v102 = 0;
    }
    unsigned int v103 = *(uint64_t (**)(CFTypeRef, CMTime *))(v102 + 8);
    if (!v103)
    {
      LODWORD(v31) = -12782;
LABEL_187:
      int v29 = v98;
LABEL_188:
      int v109 = v275;
      if (time1.value) {
        CFRelease((CFTypeRef)time1.value);
      }
      uint64_t v60 = 0;
      goto LABEL_512;
    }
    int v104 = v103(v99, &time1);
    if (v104)
    {
      LODWORD(v31) = v104;
      goto LABEL_187;
    }
    if (v100 <= v8) {
      int v105 = v8;
    }
    else {
      int v105 = v100;
    }
    int v29 = v98;
    if (v105 >= 1)
    {
      CMTimeValue v106 = time1.value;
      uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v108 = v107 ? v107 : 0;
      unsigned int v112 = *(void (**)(CMTimeValue, void, void))(v108 + 168);
      if (v112) {
        v112(v106, -v105, 0);
      }
    }
    uint64_t v113 = FigSampleCursorGetFigBaseObject(time1.value);
    uint64_t v114 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v114) {
      uint64_t v115 = v114;
    }
    else {
      uint64_t v115 = 0;
    }
    uint64_t v116 = *(void (**)(uint64_t, __CFString *, CFTypeRef))(v115 + 56);
    if (v116) {
      v116(v113, @"EagerlyFetchSampleDependencyAttributes", v273);
    }
    if (audioMentorGetDecodeWalkCatchupStatusForSteps(time1.value, 0) != 2)
    {
      uint64_t v117 = 0;
      do
      {
        time2.CFNumberRef value = 0;
        CMTimeValue v118 = time1.value;
        uint64_t v119 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v119) {
          uint64_t v120 = v119;
        }
        else {
          uint64_t v120 = 0;
        }
        CGRect v121 = *(uint64_t (**)(CMTimeValue, uint64_t, CMTime *))(v120 + 168);
        if (v121) {
          LODWORD(v31) = v121(v118, -1, &time2);
        }
        else {
          LODWORD(v31) = -12782;
        }
        if (!time2.value) {
          break;
        }
        if (v31) {
          goto LABEL_188;
        }
        v117 += time2.value;
      }
      while (audioMentorGetDecodeWalkCatchupStatusForSteps(time1.value, -v117) != 2);
    }
    uint64_t v60 = (const void *)time1.value;
    if ((v280 - 1) > 1)
    {
      char v124 = 1;
      int v109 = v275;
    }
    else
    {
      uint64_t v122 = *(void *)(CMBaseObjectGetVTable() + 16);
      int v109 = v275;
      if (v122) {
        uint64_t v123 = v122;
      }
      else {
        uint64_t v123 = 0;
      }
      if (*(void *)(v123 + 72))
      {
        uint64_t v125 = *(void *)(a1 + 24);
        uint64_t v126 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v126) {
          uint64_t v127 = v126;
        }
        else {
          uint64_t v127 = 0;
        }
        v129 = *(void (**)(uint64_t))(v127 + 72);
        if (v129) {
          v129(v125);
        }
        char v124 = 0;
      }
      else
      {
        char v124 = 1;
      }
    }
    uint64_t v130 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4 == 1)
    {
      if (v130) {
        uint64_t v131 = v130;
      }
      else {
        uint64_t v131 = 0;
      }
      uint64_t v133 = *(uint64_t (**)(const void *, void **))(v131 + 56);
      if (v133)
      {
        int v134 = v133(v60, values);
        if (!v134)
        {
          if ((BYTE4(values[1]) & 0x1D) != 1) {
            goto LABEL_377;
          }
          goto LABEL_247;
        }
        LODWORD(v31) = v134;
        if (v134 != -12782) {
          goto LABEL_402;
        }
      }
      *(_OWORD *)CMTimeRange values = *MEMORY[0x1E4F1FA48];
      uint64_t v308 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
LABEL_247:
      char v135 = 0;
      if (values[0])
      {
        uint64_t v281 = 2 * LODWORD(values[1]) / SLODWORD(values[0]);
        unsigned int v258 = 1;
        unsigned int v136 = &v290;
        v137 = &v291;
        int v138 = 3 * LODWORD(values[1]) / SLODWORD(values[0]);
      }
      else
      {
        int v138 = 0;
        uint64_t v281 = 1;
        unsigned int v136 = &v290;
        v137 = &v291;
        unsigned int v258 = 1;
      }
      goto LABEL_258;
    }
    if (v130) {
      uint64_t v132 = v130;
    }
    else {
      uint64_t v132 = 0;
    }
    v139 = *(uint64_t (**)(const void *, void **))(v132 + 56);
    if (v139)
    {
      int v140 = v139(v60, values);
      if (!v140)
      {
        if ((BYTE4(values[1]) & 0x1D) != 1)
        {
LABEL_377:
          LODWORD(v31) = FigSignalErrorAt();
          goto LABEL_403;
        }
        goto LABEL_254;
      }
      LODWORD(v31) = v140;
      if (v140 != -12782) {
        goto LABEL_402;
      }
    }
    *(_OWORD *)CMTimeRange values = *MEMORY[0x1E4F1FA48];
    uint64_t v308 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
LABEL_254:
    if (values[0])
    {
      uint64_t v281 = SLODWORD(values[1]) / (4 * LODWORD(values[0]));
      unsigned int v258 = -1;
      char v135 = 1;
      unsigned int v136 = &v291;
      v137 = &v290;
      int v138 = SLODWORD(values[1]) / (4 * LODWORD(values[0]));
      int v109 = v275;
    }
    else
    {
      int v138 = 0;
      unsigned int v258 = -1;
      char v135 = 1;
      unsigned int v136 = &v291;
      v137 = &v290;
      uint64_t v281 = 1;
    }
LABEL_258:
    *(void *)&v303[0] = a1;
    *(_OWORD *)((char *)v303 + 8) = *(_OWORD *)&v137->value;
    *((void *)&v303[1] + 1) = v137->epoch;
    long long v304 = *(_OWORD *)&v136->value;
    *(void *)&v305[0] = v136->epoch;
    BYTE1(v306) = v135;
    *(_OWORD *)((char *)v305 + 8) = v288;
    *((void *)&v305[1] + 1) = v289;
    LOBYTE(v306) = v278;
    if ((v124 & 1) == 0)
    {
      time1.CFNumberRef value = 0;
      LODWORD(v31) = CMSampleBufferCreate(allocator, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, &v309);
      if (v31) {
        goto LABEL_402;
      }
      ++*(_DWORD *)(a1 + 268);
      time1.CFNumberRef value = (CMTimeValue)CFNumberCreate(allocator, kCFNumberIntType, v270);
      CFDictionaryRef v146 = CFDictionaryCreate(allocator, MEMORY[0x1E4F1F328], (const void **)&time1, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CMSetAttachment(v309, key, (CFTypeRef)time1.value, 1u);
      uint64_t v147 = *(void *)(a1 + 24);
      uint64_t v148 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v148) {
        uint64_t v149 = v148;
      }
      else {
        uint64_t v149 = 0;
      }
      unsigned int v201 = *(void (**)(uint64_t, uint64_t, CFDictionaryRef, void))(v149 + 64);
      if (v201) {
        v201(v147, v262, v146, 0);
      }
      uint64_t v202 = *(void *)(a1 + 24);
      uint64_t v203 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v203) {
        uint64_t v204 = v203;
      }
      else {
        uint64_t v204 = 0;
      }
      uint64_t v205 = *(void (**)(uint64_t, uint64_t, void, void))(v204 + 64);
      if (v205) {
        v205(v202, v261, 0, 0);
      }
      if (time1.value) {
        CFRelease((CFTypeRef)time1.value);
      }
      if (v146) {
        CFRelease(v146);
      }
      CFTypeRef v31 = *(CFTypeRef *)(a1 + 24);
      CMSampleBufferRef v206 = v309;
      uint64_t v207 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v207) {
        uint64_t v208 = v207;
      }
      else {
        uint64_t v208 = 0;
      }
      uint64_t v209 = *(uint64_t (**)(CFTypeRef, CMSampleBufferRef))(v208 + 8);
      if (v209)
      {
        LODWORD(v31) = v209(v31, v206);
        if (v31) {
          goto LABEL_402;
        }
        if (v309)
        {
          CFRelease(v309);
          CMSampleBufferRef v309 = 0;
        }
        uint64_t v18 = v287;
        if (v284) {
          FigSemaphoreSignal();
        }
        int v284 = 0;
        goto LABEL_260;
      }
      LODWORD(v31) = -12782;
LABEL_402:
      FigSignalErrorAt();
LABEL_403:
      uint64_t v210 = v15;
      uint64_t v18 = v287;
      goto LABEL_513;
    }
    uint64_t v18 = v287;
LABEL_260:
    uint64_t v141 = 1;
    if (v4 != 1) {
      uint64_t v141 = -1;
    }
    uint64_t v256 = v141;
    CFTypeRef v142 = v311;
    if (v311)
    {
      int v143 = v29;
      uint64_t v144 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v144) {
        uint64_t v145 = v144;
      }
      else {
        uint64_t v145 = 0;
      }
      if (v145 == *(void *)(CMBaseObjectGetVTable() + 16)
        && (v200 = *(uint64_t (**)(const void *, CFTypeRef))(v145 + 32)) != 0)
      {
        uint64_t v279 = v200(v60, v142);
        int v29 = v143;
        if (v279 == v256) {
          goto LABEL_484;
        }
      }
      else
      {
        uint64_t v279 = 0;
        int v29 = v143;
      }
    }
    else
    {
      uint64_t v279 = 0;
    }
    uint64_t v257 = v138;
    CFTypeRef v150 = v273;
    if (!value) {
      CFTypeRef v150 = v260;
    }
    CFTypeRef valuea = v150;
    while (1)
    {
      if (*(unsigned char *)(a1 + 116))
      {
        LODWORD(v31) = -1;
        goto LABEL_487;
      }
      int v109 = v275;
      if ((*(_DWORD *)(a1 + 264) | 2) != 3) {
        goto LABEL_293;
      }
      uint64_t v151 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v152 = v151 ? v151 : 0;
      if (*(void *)(v152 + 104))
      {
        uint64_t v153 = *(void *)(a1 + 24);
        uint64_t v154 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v154) {
          uint64_t v155 = v154;
        }
        else {
          uint64_t v155 = 0;
        }
        uint64_t v160 = *(unsigned int (**)(uint64_t))(v155 + 104);
        if (!v160 || !v160(v153)) {
          goto LABEL_292;
        }
      }
      else
      {
        uint64_t v156 = *(void *)(a1 + 24);
        uint64_t v157 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v157) {
          uint64_t v158 = v157;
        }
        else {
          uint64_t v158 = 0;
        }
        v159 = *(unsigned int (**)(uint64_t))(v158 + 24);
        if (!v159 || !v159(v156)) {
LABEL_292:
        }
          audioMentorThreadFinishPreroll(a1, 2, v16);
      }
LABEL_293:
      uint64_t v161 = *(void *)(a1 + 24);
      uint64_t v162 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v162) {
        uint64_t v163 = v162;
      }
      else {
        uint64_t v163 = 0;
      }
      v164 = *(unsigned int (**)(uint64_t))(v163 + 16);
      if (v164 && v164(v161))
      {
        if (!*(unsigned char *)a1)
        {
          uint64_t v165 = FigMentorNotificationPayloadCreate(@"MentorPausingDueToHighWaterLevel", v16, 0, *(unsigned __int8 *)(a1 + 280), 0, 0);
          CMNotificationCenterGetDefaultLocalCenter();
          int v109 = v275;
          CMNotificationCenterPostNotification();
          if (v165) {
            CFRelease(v165);
          }
        }
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        do
        {
          FigSemaphoreWaitRelative();
          if (*(unsigned char *)(a1 + 116))
          {
            LODWORD(v31) = -1;
            goto LABEL_512;
          }
          uint64_t v166 = *(void *)(a1 + 24);
          uint64_t v167 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v167) {
            uint64_t v168 = v167;
          }
          else {
            uint64_t v168 = 0;
          }
          uint64_t v169 = *(unsigned int (**)(uint64_t))(v168 + 16);
        }
        while (v169 && v169(v166));
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        *(_DWORD *)(a1 + 284) = 0;
        if (!*(unsigned char *)a1)
        {
          v170 = FigMentorNotificationPayloadCreate(@"MentorResumingAfterHighWaterLevel", v16, 0, *(unsigned __int8 *)(a1 + 280), 0, 0);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v170) {
            CFRelease(v170);
          }
        }
      }
      uint64_t v171 = *(void *)(a1 + 16);
      CFTypeRef v172 = v311;
      uint64_t v173 = *(unsigned int *)(a1 + 264);
      uint64_t v174 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v174) {
        uint64_t v175 = v174;
      }
      else {
        uint64_t v175 = 0;
      }
      float v176 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t, void, CFTypeRef, uint64_t, void, uint64_t (*)(uint64_t *, uint64_t, opaqueCMSampleBuffer *), _OWORD *, const void *, CMSampleBufferRef *))(v175 + 8);
      if (!v176)
      {
        LODWORD(v31) = -12782;
        uint64_t v18 = v287;
LABEL_452:
        FigSignalErrorAt();
        goto LABEL_487;
      }
      int v177 = v176(v171, v60, v281, v257, v258, v172, v173, 0, audioMentorRemapSBufTiming, v303, v16, &v309);
      if (v177)
      {
        LODWORD(v31) = v177;
        uint64_t v18 = v287;
        if (v177 == -12840) {
          goto LABEL_484;
        }
        goto LABEL_452;
      }
      uint64_t v18 = v287;
      if (v302)
      {
        CMSetAttachment(v309, v265, v302, 1u);
        CMSetAttachment(v309, v264, valuea, 1u);
      }
      if (*(void *)(a1 + 48)) {
        FigSampleBufferSetDecryptor();
      }
      CFTypeRef v178 = *v277;
      if (*v277)
      {
        uint64_t v179 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v180 = v179 ? v179 : 0;
        if (v180 == *(void *)(CMBaseObjectGetVTable() + 16))
        {
          v194 = *(uint64_t (**)(const void *, CFTypeRef))(v180 + 32);
          if (v194)
          {
            if (v194(v60, v178))
            {
              *(unsigned char *)(a1 + 296) = 1;
LABEL_329:
              CMSetAttachment(v309, v266, v273, 1u);
              *(unsigned char *)(a1 + 296) = 0;
              goto LABEL_330;
            }
          }
        }
      }
      if (*(unsigned char *)(a1 + 296)) {
        goto LABEL_329;
      }
LABEL_330:
      int v109 = v275;
      if (*(unsigned char *)(a1 + 297))
      {
        CMSetAttachment(v309, v263, v273, 1u);
        *(unsigned char *)(a1 + 297) = 0;
      }
      uint64_t v181 = *(void *)(a1 + 24);
      CMSampleBufferRef v182 = v309;
      uint64_t v183 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v183) {
        uint64_t v184 = v183;
      }
      else {
        uint64_t v184 = 0;
      }
      CFArrayRef v185 = *(uint64_t (**)(uint64_t, CMSampleBufferRef))(v184 + 8);
      if (!v185) {
        goto LABEL_370;
      }
      int v186 = v185(v181, v182);
      if (v186) {
        goto LABEL_406;
      }
      ++*(_DWORD *)(a1 + 284);
      *(unsigned char *)(a1 + 280) = 1;
      CMItemCount NumSamples = CMSampleBufferGetNumSamples(v309);
      CMItemCount v188 = v272 ? -NumSamples : NumSamples;
      uint64_t v189 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v190 = v189 ? v189 : 0;
      v191 = *(uint64_t (**)(const void *, CMItemCount, uint64_t *))(v190 + 168);
      if (!v191)
      {
LABEL_370:
        LODWORD(v31) = -12782;
LABEL_407:
        FigSignalErrorAt();
        goto LABEL_512;
      }
      int v186 = v191(v60, v188, &v301);
      if (v186) {
        goto LABEL_406;
      }
      if (v188 != v301) {
        break;
      }
      if (*v277)
      {
        CFRelease(*v277);
        CFTypeRef *v277 = 0;
      }
      if (v4 == 1)
      {
        uint64_t v192 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v192) {
          uint64_t v193 = v192;
        }
        else {
          uint64_t v193 = 0;
        }
        unsigned int v195 = *(uint64_t (**)(const void *, CFTypeRef *))(v193 + 8);
        if (!v195) {
          goto LABEL_370;
        }
        int v186 = v195(v60, v277);
        if (v186)
        {
LABEL_406:
          LODWORD(v31) = v186;
          goto LABEL_407;
        }
      }
      else
      {
        *(unsigned char *)(a1 + 296) = 1;
      }
      CFTypeRef v196 = v311;
      if (v311)
      {
        uint64_t v197 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v197) {
          uint64_t v198 = v197;
        }
        else {
          uint64_t v198 = 0;
        }
        if (v198 == *(void *)(CMBaseObjectGetVTable() + 16)
          && (v199 = *(uint64_t (**)(const void *, CFTypeRef))(v198 + 32)) != 0)
        {
          uint64_t v279 = v199(v60, v196);
        }
        else
        {
          uint64_t v279 = 0;
        }
      }
      if (v309)
      {
        CFRelease(v309);
        CMSampleBufferRef v309 = 0;
      }
      if (v279 == v256) {
        goto LABEL_484;
      }
    }
    CFTypeRef v31 = v311;
    if (!v311) {
      goto LABEL_479;
    }
    uint64_t v227 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v227) {
      uint64_t v228 = v227;
    }
    else {
      uint64_t v228 = 0;
    }
    uint64_t v230 = *(void *)(CMBaseObjectGetVTable() + 16);
    v231 = (CFTypeRef *)(a1 + 288);
    if (v228 != v230)
    {
      LODWORD(v31) = 0;
      int v232 = 1;
      goto LABEL_481;
    }
    long long v233 = *(uint64_t (**)(const void *, CFTypeRef))(v228 + 32);
    if (!v233 || !v233(v60, v31))
    {
      LODWORD(v31) = 0;
LABEL_479:
      int v232 = 1;
      goto LABEL_480;
    }
    FigSignalErrorAt();
    int v232 = 0;
    LODWORD(v31) = -12840;
LABEL_480:
    v231 = (CFTypeRef *)(a1 + 288);
LABEL_481:
    if (*v231)
    {
      v236 = v231;
      CFRelease(*v231);
      CFTypeRef *v236 = 0;
    }
    *(unsigned char *)(a1 + 296) = 1;
    if (!v232) {
      goto LABEL_487;
    }
LABEL_484:
    time1.CFNumberRef value = 0;
    LODWORD(v31) = CMSampleBufferCreate(allocator, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&time1);
    if (!v31)
    {
      CMSetAttachment((CMAttachmentBearerRef)time1.value, v259, v273, 1u);
      CFTypeRef v31 = *(CFTypeRef *)(a1 + 24);
      CMTimeValue v237 = time1.value;
      uint64_t v238 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v238) {
        uint64_t v239 = v238;
      }
      else {
        uint64_t v239 = 0;
      }
      CMTime v240 = *(uint64_t (**)(CFTypeRef, CMTimeValue))(v239 + 8);
      if (v240) {
        LODWORD(v31) = v240(v31, v237);
      }
      else {
        LODWORD(v31) = -12782;
      }
      CFRelease((CFTypeRef)time1.value);
    }
    if (*v277)
    {
      CFRelease(*v277);
      CFTypeRef *v277 = 0;
    }
    *(unsigned char *)(a1 + 296) = 1;
    int v109 = v275;
    if (v15 && !v31)
    {
      LODWORD(v31) = audioMentorEnqueueBufferConsumedMarker(a1, v15);
      uint64_t v210 = 0;
      goto LABEL_513;
    }
LABEL_512:
    uint64_t v210 = v15;
LABEL_513:
    if (v284) {
      FigSemaphoreSignal();
    }
    audioMentorThreadFinishPreroll(a1, 0, v16);
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    if (!*(unsigned char *)a1)
    {
      unsigned __int8 v245 = @"MentorStoppingDueToCompletion";
      if (v31) {
        unsigned __int8 v245 = @"MentorStoppingDueToError";
      }
      if (v31 == -1) {
        int v246 = 0;
      }
      else {
        int v246 = (int)v31;
      }
      if (v31 == -1) {
        v247 = @"MentorResettingDueToModeSwitch";
      }
      else {
        v247 = v245;
      }
      __int16 v248 = FigMentorNotificationPayloadCreate((uint64_t)v247, v16, v246, *(unsigned __int8 *)(a1 + 280), v210, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v18 = v287;
      CMNotificationCenterPostNotification();
      if (v248) {
        CFRelease(v248);
      }
    }
    if ((v31 - 1) <= 0xFFFFFFFD)
    {
      if (*v277)
      {
        CFRelease(*v277);
        CFTypeRef *v277 = 0;
      }
      *(unsigned char *)(a1 + 296) = 1;
    }
    if (v29 && v312[0])
    {
      CFRelease(v312[0]);
      v312[0] = 0;
    }
    if (v109 && v311)
    {
      CFRelease(v311);
      CFTypeRef v311 = 0;
    }
    if (v309) {
      CFRelease(v309);
    }
    if (v302) {
      CFRelease(v302);
    }
    if (v60) {
      CFRelease(v60);
    }
    CFStringRef v249 = *(const void **)(a1 + 272);
    if (v249)
    {
      CFRelease(v249);
      *(void *)(a1 + 272) = 0;
    }
    BOOL v221 = v4 == 1;
    CFTypeRef v22 = v285;
    CFDictionaryRef v21 = v286;
    if (v221)
    {
      uint64_t v250 = a1 + 300;
      _OWORD *v283 = *(_OWORD *)&v294.value;
      CMTimeEpoch epoch = v294.epoch;
    }
    else
    {
LABEL_549:
      uint64_t v252 = MEMORY[0x1E4F1F9F8];
      long long v253 = *MEMORY[0x1E4F1F9F8];
      _OWORD *v283 = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch epoch = *(void *)(v252 + 16);
      *(void *)(a1 + 316) = epoch;
      uint64_t v250 = a1 + 324;
      _OWORD *v282 = v253;
    }
    *(void *)(v250 + 16) = epoch;
    if (v18) {
      CFRelease(v18);
    }
    if (v21) {
      CFRelease(v21);
    }
    if (v22) {
      CFRelease(v22);
    }
    if (v15) {
      CFRelease(v15);
    }
    if (v16) {
      CFRelease(v16);
    }
    int v254 = *(_DWORD *)(a1 + 112);
    if (v254 == 4) {
      break;
    }
    if (!*(unsigned char *)(a1 + 116))
    {
      do
      {
        FigSemaphoreWaitRelative();
        FigMemoryBarrier();
      }
      while (!*(unsigned char *)(a1 + 116));
      int v254 = *(_DWORD *)(a1 + 112);
    }
  }
  while (v254 != 4);
LABEL_4:
  uint64_t v2 = *(const void **)(a1 + 288);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 288) = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

void AudioMentorDispose(void *a1)
{
  if (a1)
  {
    AudioMentorInvalidate((uint64_t)a1);
    if (a1[10])
    {
      FigSemaphoreDestroy();
      a1[10] = 0;
    }
    if (a1[11])
    {
      FigSemaphoreDestroy();
      a1[11] = 0;
    }
    if (a1[12])
    {
      FigSimpleMutexDestroy();
      a1[12] = 0;
    }
    if (a1[9])
    {
      FigSimpleMutexDestroy();
      a1[9] = 0;
    }
    if (a1[15])
    {
      FigSemaphoreDestroy();
      a1[15] = 0;
    }
    uint64_t v2 = (const void *)a1[16];
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = (const void *)a1[20];
    if (v3) {
      CFRelease(v3);
    }
    int v4 = (const void *)a1[30];
    if (v4) {
      CFRelease(v4);
    }
    long long v5 = (const void *)a1[31];
    if (v5) {
      CFRelease(v5);
    }
    int v6 = (const void *)a1[32];
    if (v6) {
      CFRelease(v6);
    }
    int v7 = (const void *)a1[1];
    if (v7) {
      CFRelease(v7);
    }
    int v8 = (const void *)a1[2];
    if (v8) {
      CFRelease(v8);
    }
    int v9 = (const void *)a1[3];
    if (v9) {
      CFRelease(v9);
    }
    uint64_t v10 = (const void *)a1[6];
    if (v10) {
      CFRelease(v10);
    }
    free(a1);
  }
}

uint64_t EditMentorNewWithChildAudioMentorAndSingleEditSegment(void *a1, uint64_t a2, void *a3)
{
  return editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(a1, 0, 0, 0, a2, 0, 0, a3);
}

uint64_t editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, const void *a6, char a7, void *a8)
{
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  char v13 = (char *)malloc_type_calloc(0x2B0uLL, 1uLL, 0x79A2EA5CuLL);
  int v14 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v13)
  {
    int32_t v15 = (void **)v13;
    *((_DWORD *)v13 + 80) = 0;
    uint64_t v16 = MEMORY[0x1E4F1FA48];
    long long v17 = *MEMORY[0x1E4F1FA48];
    *((_OWORD *)v13 + 12) = *MEMORY[0x1E4F1FA48];
    uint64_t v18 = *(void *)(v16 + 16);
    *((void *)v13 + 26) = v18;
    uint64_t v19 = MEMORY[0x1E4F1FA10];
    long long v20 = *MEMORY[0x1E4F1FA10];
    *(_OWORD *)(v13 + 216) = *MEMORY[0x1E4F1FA10];
    uint64_t v21 = *(void *)(v19 + 16);
    *((void *)v13 + 29) = v21;
    *((_OWORD *)v13 + 9) = v17;
    *((void *)v13 + 20) = v18;
    *((void *)v13 + 23) = v21;
    *(_OWORD *)(v13 + 168) = v20;
    *((void *)v13 + 39) = FigSimpleMutexCreate();
    *((_DWORD *)v15 + 81) = 1000 * FigAtomicIncrement32() + 10000;
    v15[34] = (void *)FigSimpleMutexCreate();
    uint64_t v22 = FigSimpleMutexCreate();
    v15[43] = (void *)v22;
    if (v22)
    {
      uint64_t v23 = FigSimpleMutexCreate();
      v15[45] = (void *)v23;
      if (v23)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*v14, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        v15[36] = Mutable;
        if (Mutable)
        {
          uint64_t v25 = FigSimpleMutexCreate();
          v15[35] = (void *)v25;
          if (v25)
          {
            v15[15] = dispatch_queue_create("com.apple.coremedia.editmentor.notification", 0);
            EditMentorDispose(0);
            goto LABEL_7;
          }
        }
      }
    }
    uint64_t v32 = FigSignalErrorAt();
    EditMentorDispose(v15);
    if (v32) {
      return v32;
    }
LABEL_13:
    int32_t v15 = 0;
LABEL_7:
    *int32_t v15 = a2;
    v15[1] = a1;
    v15[2] = a3;
    if (a4)
    {
      *((unsigned char *)v15 + 24) = 1;
      long long v26 = *(_OWORD *)(a4 + 16);
      *((_OWORD *)v15 + 2) = *(_OWORD *)a4;
      *((_OWORD *)v15 + 3) = v26;
      long long v27 = *(_OWORD *)(a4 + 32);
      long long v28 = *(_OWORD *)(a4 + 48);
      long long v29 = *(_OWORD *)(a4 + 64);
      v15[14] = *(void **)(a4 + 80);
      *((_OWORD *)v15 + 5) = v28;
      *((_OWORD *)v15 + 6) = v29;
      *((_OWORD *)v15 + 4) = v27;
    }
    if (a6)
    {
      v15[17] = CFRetain(a6);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterAddListener();
      CFTypeRef cf = 0;
      uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v30) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v38 = *(void (**)(const void *, uint64_t, CFAllocatorRef, CFTypeRef *))(v31 + 48);
      if (v38)
      {
        v38(a6, 0x1EE57F738, *v14, &cf);
        CFTypeRef v39 = cf;
        *((unsigned char *)v15 + 297) = cf == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
        if (v39) {
          CFRelease(v39);
        }
      }
      else
      {
        *((unsigned char *)v15 + 297) = *MEMORY[0x1E4F1CFD0] == 0;
      }
      char v33 = 1;
    }
    else if (a5)
    {
      if ((*(_DWORD *)(a5 + 12) & 0x1D) != 1
        || (*(_DWORD *)(a5 + 60) & 0x1D) != 1
        || ((*(_DWORD *)(a5 + 36) & 0x1D) != 1 || (*(_DWORD *)(a5 + 84) & 0x1D) != 1)
        && ((~*(_DWORD *)(a5 + 36) & 5) != 0 || (~*(_DWORD *)(a5 + 84) & 5) != 0))
      {
        uint64_t v32 = FigSignalErrorAt();
LABEL_42:
        EditMentorDispose(v15);
        return v32;
      }
      char v33 = 0;
      long long v34 = *(_OWORD *)(a5 + 16);
      *((_OWORD *)v15 + 9) = *(_OWORD *)a5;
      *((_OWORD *)v15 + 10) = v34;
      long long v35 = *(_OWORD *)(a5 + 32);
      long long v36 = *(_OWORD *)(a5 + 48);
      long long v37 = *(_OWORD *)(a5 + 80);
      *((_OWORD *)v15 + 13) = *(_OWORD *)(a5 + 64);
      *((_OWORD *)v15 + 14) = v37;
      *((_OWORD *)v15 + 11) = v35;
      *((_OWORD *)v15 + 12) = v36;
    }
    else
    {
      char v33 = 0;
    }
    *((unsigned char *)v15 + 128) = v33;
    if (a7) {
      *((unsigned char *)v15 + 240) = 1;
    }
    if (!*v15 && !v15[1] && !v15[2] && (!*((unsigned char *)v15 + 24) || !v15[6])) {
      goto LABEL_39;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterAddListener();
    if (*v15)
    {
      uint64_t v40 = VideoMentorSetTimeRemapCallback(*v15, (uint64_t)editMentorRemapSampleBufferTiming, (uint64_t)editMentorRemapTimeInterval, (uint64_t)v15);
    }
    else
    {
LABEL_39:
      uint64_t v41 = v15[1];
      if (v41)
      {
        uint64_t v40 = AudioMentorSetTimeRemapCallback(v41, (uint64_t)editMentorRemapSampleBufferTiming, (uint64_t)editMentorRemapTimeInterval, (uint64_t)v15);
      }
      else
      {
        long long v42 = v15[2];
        if (v42)
        {
          MEMORY[0x19970E910](v42[34]);
          v42[31] = editMentorRemapSampleBufferTiming;
          v42[32] = editMentorRemapTimeInterval;
          v42[33] = v15;
          MEMORY[0x19970E930](v42[34]);
          goto LABEL_45;
        }
        if (!*((unsigned char *)v15 + 24)) {
          goto LABEL_45;
        }
        uint64_t v40 = ((uint64_t (*)(void *, uint64_t (*)(uint64_t, const void *, opaqueCMSampleBuffer *), uint64_t (*)(void *, const void *, uint64_t, uint64_t, uint64_t), void **))v15[7])(v15[5], editMentorRemapSampleBufferTiming, editMentorRemapTimeInterval, v15);
      }
    }
    uint64_t v32 = v40;
    if (v40) {
      goto LABEL_42;
    }
LABEL_45:
    uint64_t v32 = 0;
    *a8 = v15;
    return v32;
  }
  uint64_t v32 = FigSignalErrorAt();
  if (!v32) {
    goto LABEL_13;
  }
  return v32;
}

void EditMentorDispose(void **a1)
{
  if (a1)
  {
    if (!*a1 && !a1[1] && !a1[2] && (!*((unsigned char *)a1 + 24) || !a1[6])) {
      goto LABEL_10;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    if (*a1)
    {
      VideoMentorSetTimeRemapCallback(*a1, 0, 0, 0);
    }
    else
    {
LABEL_10:
      uint64_t v2 = a1[1];
      if (v2)
      {
        AudioMentorSetTimeRemapCallback(v2, 0, 0, 0);
      }
      else
      {
        uint64_t v3 = a1[2];
        if (v3)
        {
          MEMORY[0x19970E910](v3[34]);
          v3[32] = 0;
          v3[33] = 0;
          v3[31] = 0;
          MEMORY[0x19970E930](v3[34]);
        }
        else if (*((unsigned char *)a1 + 24))
        {
          ((void (*)(void *, void, void, void))a1[7])(a1[5], 0, 0, 0);
        }
      }
    }
    if (a1[17])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      int v4 = a1[17];
      long long v5 = *(void **)(CMBaseObjectGetVTable() + 8);
      if (v5) {
        int v6 = v5;
      }
      else {
        int v6 = 0;
      }
      if (*v6 >= 2uLL)
      {
        int v7 = (void (*)(void *))v6[8];
        if (v7) {
          v7(v4);
        }
      }
      int v8 = a1[17];
      if (v8)
      {
        CFRelease(v8);
        a1[17] = 0;
      }
    }
    int v9 = a1[15];
    if (v9)
    {
      dispatch_sync_f(v9, 0, (dispatch_function_t)editMentorNoop);
      dispatch_release((dispatch_object_t)a1[15]);
      a1[15] = 0;
    }
    uint64_t v10 = a1[44];
    if (v10)
    {
      CFRelease(v10);
      a1[44] = 0;
    }
    long long v11 = a1[41];
    if (v11)
    {
      CFRelease(v11);
      a1[41] = 0;
    }
    int v12 = a1[71];
    if (v12)
    {
      CFRelease(v12);
      a1[71] = 0;
    }
    char v13 = a1[75];
    if (v13)
    {
      CFRelease(v13);
      a1[75] = 0;
    }
    int v14 = a1[76];
    if (v14)
    {
      CFRelease(v14);
      a1[76] = 0;
    }
    int32_t v15 = a1[84];
    if (v15)
    {
      CFRelease(v15);
      a1[84] = 0;
    }
    uint64_t v16 = a1[42];
    if (v16)
    {
      CFRelease(v16);
      a1[42] = 0;
    }
    long long v17 = a1[36];
    if (v17)
    {
      CFRelease(v17);
      a1[36] = 0;
    }
    uint64_t v18 = a1[38];
    if (v18)
    {
      CFRelease(v18);
      a1[38] = 0;
    }
    if (a1[39])
    {
      FigSimpleMutexDestroy();
      a1[39] = 0;
    }
    if (a1[34])
    {
      FigSimpleMutexDestroy();
      a1[34] = 0;
    }
    if (a1[35])
    {
      FigSimpleMutexDestroy();
      a1[35] = 0;
    }
    if (a1[43])
    {
      FigSimpleMutexDestroy();
      a1[43] = 0;
    }
    if (a1[45]) {
      FigSimpleMutexDestroy();
    }
    free(a1);
  }
}

uint64_t AudioMentorSetTimeRemapCallback(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[7] = a2;
  a1[8] = a4;
  MEMORY[0x19970E930](a1[9]);
  return 0;
}

uint64_t EditMentorNewWithChildEditMentor(void *a1, const void *a2, char a3, void *a4)
{
  return editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(0, 0, a1, 0, 0, a2, a3, a4);
}

uint64_t EditMentorSetTimeRemapCallback(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[31] = a2;
  a1[32] = a3;
  a1[33] = a4;
  MEMORY[0x19970E930](a1[34]);
  return 0;
}

uint64_t FigPlaybackBossSetTimeWithRange(uint64_t a1, CMTime *a2, unsigned int a3, CMTime *a4, CMTime *a5, const void *a6, int a7)
{
  int v7 = a7;
  uint64_t v10 = a1;
  uint64_t v76 = *MEMORY[0x1E4F143B8];
  memset(&v70, 0, sizeof(v70));
  __n128 v68 = 0uLL;
  CMTimeEpoch v69 = 0;
  int v11 = *(unsigned __int8 *)(a1 + 130);
  char v67 = 0;
  if (dword_1E9350D98)
  {
    LODWORD(v65.value) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v7 = a7;
    uint64_t v10 = a1;
  }
  if (*(unsigned char *)(v10 + 16) || *(unsigned char *)(v10 + 120)) {
    return FigSignalErrorAt();
  }
  FigPlaybackBossGetDuration(v10, &v68);
  CMTime time = *a2;
  long long v17 = (__n128 *)MEMORY[0x1E4F1FA48];
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if ((CMTimeCompare(&time, &time2) & 0x80000000) == 0)
  {
    CMTime time = *a2;
    *(__n128 *)&time2.unsigned int value = v68;
    time2.CMTimeEpoch epoch = v69;
    if (CMTimeCompare(&time, &time2) < 1) {
      goto LABEL_11;
    }
    long long v17 = &v68;
  }
  __n128 v18 = *v17;
  a2->CMTimeEpoch epoch = v17[1].n128_i64[0];
  *(__n128 *)&a2->unsigned int value = v18;
LABEL_11:
  CMTime v70 = *a2;
  if ((_BYTE)a3)
  {
    CMTime time = *a2;
    CMTime time2 = *a4;
    CMTime v65 = *a5;
    bossSnapTimeToIFrameWithRange(v10, &time, a3, &time2, &v65, (uint64_t)&v70);
  }
  *(unsigned char *)(v10 + 128) = 0;
  int v19 = *(_DWORD *)(v10 + 424);
  if (v19 == 1886151033 || v19 == 1886530416 || v19 == 1886154860)
  {
    CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    float v20 = *(float *)(v10 + 432);
    CMTime time2 = v70;
    if (bossCheckTimeWithEndTimes(v10, &time2, (uint64_t)&time, v20)) {
      CMTime v70 = time;
    }
  }
  MEMORY[0x19970E910](*(void *)(v10 + 576));
  int v21 = *(_DWORD *)(v10 + 424);
  if (v21 != 1634624887 && v21 != 1886151033 && v21 != 1886154860)
  {
    memset(&time, 0, sizeof(time));
    if (*(unsigned char *)(v10 + 484)) {
      CMTime time = *(CMTime *)(v10 + 472);
    }
    else {
      CMTimebaseGetTime(&time, *(CMTimebaseRef *)(v10 + 112));
    }
    CMTime time2 = v70;
    CMTime v65 = time;
    if (!CMTimeCompare(&time2, &v65))
    {
      uint64_t v15 = 0;
      int v33 = 1;
      goto LABEL_120;
    }
  }
  if (v7)
  {
    *(unsigned char *)(v10 + 780) = 1;
    *(_DWORD *)(v10 + 776) = v7;
  }
  bossBumpCurrentMasterOrder(v10);
  MEMORY[0x19970E910](*(void *)(v10 + 64));
  if (*(unsigned char *)(v10 + 840))
  {
    LODWORD(v65.value) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int value = v65.value;
    if (os_log_type_enabled(v22, type)) {
      unsigned int v24 = value;
    }
    else {
      unsigned int v24 = value & 0xFFFFFFFE;
    }
    if (v24)
    {
      LODWORD(time2.value) = 136315394;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
      LOWORD(time2.flags) = 2048;
      *(void *)((char *)&time2.flags + 2) = v10;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  bossSetMentorModesToDoNothing(v10, 0, *(void *)(v10 + 80), 0);
  MEMORY[0x19970E930](*(void *)(v10 + 64));
  int v25 = *(_DWORD *)(v10 + 424);
  if (v25 == 1886154860 || (char v26 = 0, v25 == 1886151033))
  {
    if (v11)
    {
      char v26 = 1;
    }
    else
    {
      long long v27 = (CMTime *)MEMORY[0x1E4F1F9F8];
      *(_OWORD *)(v10 + 444) = *MEMORY[0x1E4F1F9F8];
      *(void *)(v10 + 460) = v27->epoch;
      bossStopTimebaseAndAudioContext(v10, 0, v27);
      char v26 = 0;
    }
  }
  if (*(void *)(v10 + 592)
    && *(unsigned char *)(v10 + 468)
    && ((int v28 = *(_DWORD *)(v10 + 424), v28 == 1885435251) || v28 == 1919247481 || v28 == 1886545266))
  {
    int v29 = v11;
    uint64_t v15 = 0;
    *(CMTime *)(v10 + 472) = v70;
    char v30 = 1;
  }
  else
  {
    int v29 = v11;
    uint64_t v31 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v10 + 472) = *MEMORY[0x1E4F1F9F8];
    *(void *)(v10 + 488) = *(void *)(v31 + 16);
    if (v26)
    {
      char v30 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      uint64_t v32 = *(OpaqueCMTimebase **)(v10 + 112);
      CMTime time = v70;
      uint64_t v15 = CMTimebaseSetTime(v32, &time);
      char v30 = 0;
    }
  }
  int v33 = 0;
  ++*(_DWORD *)(v10 + 724);
  int v34 = *(_DWORD *)(v10 + 424);
  int v35 = 3;
  if (v34 <= 1886530415)
  {
    if (v34 <= 1886151032)
    {
      if (v34 == 1634624887)
      {
LABEL_65:
        long long v37 = *(const void **)(v10 + 416);
        *(void *)(v10 + 416) = a6;
        if (a6) {
          CFRetain(a6);
        }
        if (v37) {
          CFRelease(v37);
        }
        bossBumpCurrentMasterOrder(v10);
        MEMORY[0x19970E910](*(void *)(v10 + 64));
        if (*(unsigned char *)(v10 + 840))
        {
          LODWORD(v65.value) = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v39 = v65.value;
          if (os_log_type_enabled(v38, type)) {
            unsigned int v40 = v39;
          }
          else {
            unsigned int v40 = v39 & 0xFFFFFFFE;
          }
          if (v40)
          {
            LODWORD(time2.value) = 136315394;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
            LOWORD(time2.flags) = 2048;
            *(void *)((char *)&time2.flags + 2) = v10;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v50 = *(void *)(v10 + 80);
        CMTime time = v70;
        uint64_t v15 = bossSetMentorModesToScrub(v10, 0, v50, &time, 0, &v67);
        MEMORY[0x19970E930](*(void *)(v10 + 64));
        int v33 = 0;
        if (v67) {
          char v51 = 1;
        }
        else {
          char v51 = v30;
        }
        if ((v51 & 1) == 0)
        {
          *(unsigned char *)(v10 + 780) = 0;
          *(_DWORD *)(v10 + 776) = 0;
          int v33 = 1;
        }
        *(_DWORD *)(v10 + 424) = 1885435251;
        if (dword_1E9350D98)
        {
          LODWORD(v65.value) = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v53 = v65.value;
          if (os_log_type_enabled(v52, type)) {
            unsigned int v54 = v53;
          }
          else {
            unsigned int v54 = v53 & 0xFFFFFFFE;
          }
          if (v54)
          {
            LODWORD(time2.value) = 136315650;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
            LOWORD(time2.flags) = 2048;
            *(void *)((char *)&time2.flags + 2) = v10;
            HIWORD(time2.epoch) = 2082;
            uint64_t v72 = v10 + 841;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        goto LABEL_120;
      }
      if (v34 != 1768189029)
      {
        int v36 = 1885435251;
        goto LABEL_64;
      }
LABEL_80:
      LODWORD(v65.value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CFTypeRef v44 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v45 = v65.value;
      if (os_log_type_enabled(v44, type)) {
        unsigned int v46 = v45;
      }
      else {
        unsigned int v46 = v45 & 0xFFFFFFFE;
      }
      if (!v46) {
        goto LABEL_85;
      }
      goto LABEL_84;
    }
    if (v34 != 1886151033)
    {
      if (v34 == 1886154860)
      {
        bossBumpCurrentMasterOrder(v10);
        MEMORY[0x19970E910](*(void *)(v10 + 64));
        if (*(unsigned char *)(v10 + 840))
        {
          LODWORD(v65.value) = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          long long v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v48 = v65.value;
          if (os_log_type_enabled(v47, type)) {
            unsigned int v49 = v48;
          }
          else {
            unsigned int v49 = v48 & 0xFFFFFFFE;
          }
          if (v49)
          {
            LODWORD(time2.value) = 136315394;
            *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
            LOWORD(time2.flags) = 2048;
            *(void *)((char *)&time2.flags + 2) = v10;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        int v35 = 2;
        bossSetMentorModesToDoNothing(v10, 0, *(void *)(v10 + 80), 2);
        bossResetSideQueuesAndSwitchMentorsToMainQueues(v10);
        MEMORY[0x19970E930](*(void *)(v10 + 64));
      }
      else if (v34 != 1886155888)
      {
        goto LABEL_120;
      }
    }
LABEL_108:
    if (v29)
    {
      bossBumpCurrentMasterOrder(v10);
      MEMORY[0x19970E910](*(void *)(v10 + 64));
      if (*(unsigned char *)(v10 + 840))
      {
        LODWORD(v65.value) = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        int v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v56 = v65.value;
        if (os_log_type_enabled(v55, type)) {
          unsigned int v57 = v56;
        }
        else {
          unsigned int v57 = v56 & 0xFFFFFFFE;
        }
        if (v57)
        {
          LODWORD(time2.value) = 136315394;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = v10;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      bossSetMentorModesToDoNothing(v10, 0, *(void *)(v10 + 80), 2);
      bossSwitchMentorsToSideQueues(v10, 0);
      MEMORY[0x19970E930](*(void *)(v10 + 64));
      CMTime time = v70;
      uint64_t started = figPlaybackBossStartPrerollAndSetPlayState(v10, &time, *(void *)(v10 + 432), *(_DWORD *)(v10 + 440), 2, 1886154860, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], a6);
    }
    else
    {
      CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      uint64_t started = figPlaybackBossStartPrerollAndSetPlayState(v10, &time, *(void *)(v10 + 432), *(_DWORD *)(v10 + 440), v35, 1886530416, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], a6);
    }
    uint64_t v15 = started;
    goto LABEL_119;
  }
  if (v34 <= 1919247480)
  {
    if (v34 == 1886530416) {
      goto LABEL_108;
    }
    if (v34 != 1886544244)
    {
      int v36 = 1886545266;
      goto LABEL_64;
    }
LABEL_75:
    LODWORD(v65.value) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v42 = v65.value;
    if (os_log_type_enabled(v41, type)) {
      unsigned int v43 = v42;
    }
    else {
      unsigned int v43 = v42 & 0xFFFFFFFE;
    }
    if (!v43) {
      goto LABEL_85;
    }
LABEL_84:
    LODWORD(time2.value) = 136315650;
    *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
    LOWORD(time2.flags) = 2048;
    *(void *)((char *)&time2.flags + 2) = v10;
    HIWORD(time2.epoch) = 2082;
    uint64_t v72 = v10 + 841;
    _os_log_send_and_compose_impl();
LABEL_85:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_119:
    int v33 = 0;
    goto LABEL_120;
  }
  if (v34 == 2003853684) {
    goto LABEL_75;
  }
  if (v34 == 1920298606) {
    goto LABEL_80;
  }
  int v36 = 1919247481;
LABEL_64:
  if (v34 == v36) {
    goto LABEL_65;
  }
LABEL_120:
  MEMORY[0x19970E930](*(void *)(v10 + 576));
  if (v7 && v33)
  {
    if (dword_1E9350D98)
    {
      LODWORD(v65.value) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v60 = v65.value;
      if (os_log_type_enabled(v59, type)) {
        unsigned int v61 = v60;
      }
      else {
        unsigned int v61 = v60 & 0xFFFFFFFE;
      }
      if (v61)
      {
        LODWORD(time2.value) = 136315906;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"FigPlaybackBossSetTimeWithRange";
        LOWORD(time2.flags) = 2048;
        *(void *)((char *)&time2.flags + 2) = v10;
        HIWORD(time2.epoch) = 2082;
        uint64_t v72 = v10 + 841;
        __int16 v73 = 1024;
        int v74 = v7;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    figPlaybackBossPostSeekDidComplete(v10, v7, 0);
  }
  return v15;
}

__n128 FigPlaybackBossGetDuration@<Q0>(uint64_t a1@<X0>, __n128 *a2@<X8>)
{
  if (a1)
  {
    if ((*(unsigned char *)(a1 + 204) & 1) == 0
      || (*(unsigned char *)(a1 + 228) & 1) == 0
      || *(void *)(a1 + 232)
      || (*(void *)(a1 + 216) & 0x8000000000000000) != 0)
    {
      bossGetContentDuration(a1, (uint64_t)a2);
      return result;
    }
    uint64_t v3 = (__n128 *)MEMORY[0x1E4F1FA10];
  }
  else
  {
    uint64_t v3 = (__n128 *)MEMORY[0x1E4F1F9F8];
  }
  __n128 result = *v3;
  *a2 = *v3;
  a2[1].n128_u64[0] = v3[1].n128_u64[0];
  return result;
}

void bossSetMentorModesToDoNothing(uint64_t a1, CFIndex a2, uint64_t a3, int a4)
{
  if (a4)
  {
    keys.unsigned int value = (CMTimeValue)@"AbortReading";
    if (a4 == 2) {
      keys.unsigned int value = (CMTimeValue)@"SynchronouslyAbortReading";
    }
    CFDictionaryRef v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, MEMORY[0x1E4F1CFD0], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else
  {
    CFDictionaryRef v8 = 0;
  }
  bossBumpEveryTrackCurrentOrder(a1, a2, a3, 0);
  *(unsigned char *)(a1 + 600) = 0;
  uint64_t v9 = *(void *)(a1 + 592);
  if (v9)
  {
    int v10 = *(_DWORD *)(a1 + 544);
    CMTime keys = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime v15 = keys;
    FigVideoCompositionProcessorSetPlaybackTimeRange(v9, &keys, (uint64_t)&v15, v10, 0);
  }
  if (a2 < FigCFRangeGetLimit())
  {
    int v11 = 0;
    CFIndex v12 = a2;
    do
    {
      uint64_t v13 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v12) + 24);
      if (v13)
      {
        int v14 = EditMentorSetModeToDoNothing(v13, v8, 0);
        if (!v11) {
          int v11 = v14;
        }
      }
      ++v12;
    }
    while (v12 < FigCFRangeGetLimit());
  }
  if (a4) {
    FigThreadAbortQueue();
  }
  if (v8) {
    CFRelease(v8);
  }
}

uint64_t bossBumpEveryTrackCurrentOrder(uint64_t a1, CFIndex a2, uint64_t a3, char a4)
{
  *(unsigned char *)(a1 + 601) = 0;
  uint64_t result = FigCFRangeGetLimit();
  if (a2 < result)
  {
    CFIndex v8 = a2;
    do
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v8);
      bossBumpTrackCurrentOrder(ValueAtIndex);
      if ((a4 & 2) != 0) {
        ValueAtIndex[212] = 1;
      }
      if (a4)
      {
        ValueAtIndex[213] = 1;
        *(unsigned char *)(a1 + 601) = 1;
      }
      ++v8;
      uint64_t result = FigCFRangeGetLimit();
    }
    while (v8 < result);
  }
  return result;
}

uint64_t EditMentorSetModeToDoNothing(uint64_t a1, const __CFDictionary *a2, const void *a3)
{
  if (dword_1E9350D58)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  editMentorStartNewParentOrder(a1, 0, 0);
  *(_DWORD *)(a1 + 320) = 0;
  int v7 = *(const void **)(a1 + 672);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 672) = 0;
  }
  return editMentorSetChildMentorModeToDoNothing(a1, a2, a3);
}

uint64_t editMentorStartNewParentOrder(uint64_t a1, const void *a2, const void *a3)
{
  MEMORY[0x19970E910](*(void *)(a1 + 312));
  *(unsigned char *)(a1 + 296) = 0;
  int v6 = *(const void **)(a1 + 608);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 608) = 0;
  }
  int v7 = *(const void **)(a1 + 600);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 600) = 0;
  }
  if (a2) {
    CFTypeRef v8 = CFRetain(a2);
  }
  else {
    CFTypeRef v8 = 0;
  }
  *(void *)(a1 + 600) = v8;
  MutableCopCGFloat y = (const __CFDictionary *)FigCFDictionaryCreateMutableCopy();
  *(void *)(a1 + 608) = MutableCopy;
  *(unsigned char *)(a1 + 680) = 0;
  if (MutableCopy)
  {
    int Value = CFDictionaryGetValue(MutableCopy, @"PrerollPolicy");
    if (Value)
    {
      int v11 = Value;
      if (CFEqual(Value, @"PrerollUntilOutputReachesLowWater")
        || CFEqual(v11, @"PrerollUntilOutputReachesLowWaterOrSampleNotImmediatelyAvailable"))
      {
        *(unsigned char *)(a1 + 680) = 1;
      }
    }
  }
  CFIndex v12 = (const void *)*MEMORY[0x1E4F1CFC8];
  *(unsigned char *)(a1 + 616) = v12 != CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 608), @"SendPermanentEmptyMediaMarkers");
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 608), @"SendPermanentEmptyMediaMarkers", v12);
  uint64_t v13 = (const void *)*MEMORY[0x1E4F1CFD0];
  *(unsigned char *)(a1 + 617) = v13 == CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 608), @"OKToWaitForTrackToGrow");
  *(unsigned char *)(a1 + 681) = v13 == CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 608), @"ConsolidateContinuousEdits");
  *(unsigned char *)(a1 + 682) = v13 == CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 608), @"RoundUpStartPTS");
  int v14 = *(const void **)(a1 + 568);
  *(void *)(a1 + 568) = a3;
  if (a3) {
    CFRetain(a3);
  }
  if (v14) {
    CFRelease(v14);
  }
  editMentorBumpChildOrder(a1);
  if (dword_1E9350D58)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return MEMORY[0x19970E930](*(void *)(a1 + 312));
}

CFNumberRef editMentorBumpChildOrder(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 328);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 328) = 0;
  }
  ++*(_DWORD *)(a1 + 324);
  CFNumberRef result = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, (const void *)(a1 + 324));
  *(void *)(a1 + 328) = result;
  return result;
}

uint64_t editMentorSetChildMentorModeToDoNothing(uint64_t a1, const __CFDictionary *a2, const void *a3)
{
  if (*(void *)a1) {
    return VideoMentorSetModeToDoNothing(*(void *)a1, a2, a3);
  }
  if (*(void *)(a1 + 8)) {
    return AudioMentorSetModeToDoNothing(*(void *)(a1 + 8), a2, a3);
  }
  if (*(void *)(a1 + 16)) {
    return EditMentorSetModeToDoNothing(*(void *)(a1 + 16));
  }
  if (*(unsigned char *)(a1 + 24)) {
    return (*(uint64_t (**)(void))(a1 + 64))(*(void *)(a1 + 40));
  }
  return 0;
}

uint64_t AudioMentorSetModeToDoNothing(uint64_t a1, CFDictionaryRef theDict, const void *a3)
{
  CFDictionaryRef v4 = theDict;
  if (theDict)
  {
    int v6 = (const void *)*MEMORY[0x1E4F1CFD0];
    int Value = CFDictionaryGetValue(theDict, @"AbortReading");
    LODWORD(v4) = v6 == CFDictionaryGetValue(v4, @"SynchronouslyAbortReading");
    if (v6 == Value) {
      int v8 = 1;
    }
    else {
      int v8 = (int)v4;
    }
  }
  else
  {
    int v8 = 0;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 96));
  if (!*(unsigned char *)a1)
  {
    uint64_t v9 = *(const void **)(a1 + 248);
    if (v9) {
      CFRelease(v9);
    }
    *(void *)(a1 + 248) = a3;
    if (a3) {
      CFRetain(a3);
    }
    *(_DWORD *)(a1 + 112) = 0;
    *(unsigned char *)(a1 + 116) = 1;
    *(unsigned char *)(a1 + 117) = v8;
    FigMemoryBarrier();
  }
  MEMORY[0x19970E930](*(void *)(a1 + 96));
  FigSemaphoreSignal();
  if (v8)
  {
    unsigned int v10 = 0;
    do
    {
      if (!*(unsigned char *)(a1 + 116)) {
        break;
      }
      FigThreadAbort();
      if (*(unsigned char *)(a1 + 116)) {
        FigSemaphoreWaitRelative();
      }
      BOOL v11 = v10++ >= 4;
      char v12 = v11 ? (char)v4 : 1;
    }
    while ((v12 & 1) != 0);
  }
  return 0;
}

uint64_t bossSetMentorModesToScrub(uint64_t a1, CFIndex a2, uint64_t a3, CMTime *a4, int a5, unsigned char *a6)
{
  uint64_t v7 = a3;
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350D98)
  {
    LODWORD(lhs.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v7 = a3;
  }
  bossBumpEveryTrackCurrentOrder(a1, a2, v7, 2 * (a5 != 0));
  *(unsigned char *)(a1 + 600) = 0;
  uint64_t v11 = *(void *)(a1 + 592);
  if (v11)
  {
    int v12 = *(_DWORD *)(a1 + 544);
    CMTime time = *a4;
    CMTime v49 = *a4;
    FigVideoCompositionProcessorSetPlaybackTimeRange(v11, &time, (uint64_t)&v49, v12, 0);
  }
  if (a2 >= FigCFRangeGetLimit())
  {
    LOBYTE(v13) = 0;
    uint64_t v14 = 0;
  }
  else
  {
    int v13 = 0;
    uint64_t v14 = 0;
    CFDictionaryRef cf = 0;
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTimeEpoch v39 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    CMTimeFlags v40 = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 12);
    int v37 = v40 & 0x1F;
    CFIndex v15 = a2;
    do
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v15);
      if (*((void *)ValueAtIndex + 24))
      {
        long long v17 = ValueAtIndex;
        if (*(unsigned char *)(a1 + 133) && ValueAtIndex[18] == 1668047728)
        {
          CMTimeMakeWithSeconds(&v43, 10.0, 1);
          CFDictionaryRef value = CMTimeCopyAsDictionary(&v43, allocator);
        }
        else
        {
          CFDictionaryRef value = 0;
        }
        int v19 = bossCopyOptionsDictionaryForMentors(a1, 3, 0, 0, 0, 0, 0, 0, 0.0, 0, 0, 0, 0, 0, value, 0);
        float v20 = (const void *)bossCopyRenderPipelineCachedVideoFrames(a1, *((void *)v17 + 10));
        unsigned int v42 = v14;
        if (v13)
        {
          int v41 = 1;
        }
        else if (v17[18] == 1986618469)
        {
          int v41 = 1;
          CFDictionaryRef cf = CFDictionaryCreate(allocator, (const void **)kFigPlaybackBoss_ScrubOrder, (const void **)(a1 + 536), 1, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]);
        }
        else
        {
          int v41 = 0;
        }
        if (!*((unsigned char *)v17 + 400)) {
          goto LABEL_30;
        }
        int v21 = (CMTimeValue *)(v17 + 113);
        CMTimeScale v48 = v17[115];
        CMTimeValue v47 = *(void *)(v17 + 113);
        CMTimeFlags v22 = v17[116];
        CMTimeEpoch v23 = *(void *)(v17 + 117);
        if ((v22 & 0x1F) != 3 && v37 != 3) {
          goto LABEL_49;
        }
        memset(&time, 0, sizeof(time));
        lhs.CFDictionaryRef value = *v21;
        lhs.timescale = v17[115];
        lhs.flags = v22;
        lhs.CMTimeEpoch epoch = v23;
        type.CFDictionaryRef value = *MEMORY[0x1E4F1FA48];
        type.timescale = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
        type.flags = v40;
        type.CMTimeEpoch epoch = v39;
        CMTimeSubtract(&v49, &lhs, &type);
        CMTimeAbsoluteValue(&time, &v49);
        CMTimeMake(&time2, 1, 1000000000);
        CMTime lhs = time;
        if (CMTimeCompare(&lhs, &time2) > 0)
        {
LABEL_49:
          time.CFDictionaryRef value = v47;
          time.timescale = v48;
          time.flags = v22;
          time.CMTimeEpoch epoch = v23;
          lhs.CFDictionaryRef value = *MEMORY[0x1E4F1FA48];
          lhs.timescale = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
          lhs.flags = v40;
          lhs.CMTimeEpoch epoch = v39;
          if (CMTimeCompare(&time, &lhs) > 0) {
            goto LABEL_29;
          }
        }
        CMTimeScale v48 = v17[121];
        CMTimeValue v47 = *(void *)(v17 + 119);
        CMTimeFlags v25 = v17[122];
        CMTimeEpoch v26 = *(void *)(v17 + 123);
        if ((v25 & 0x1F) == 3 || v37 == 3)
        {
          memset(&time, 0, sizeof(time));
          lhs.CFDictionaryRef value = *(void *)(v17 + 119);
          lhs.timescale = v17[121];
          lhs.flags = v25;
          lhs.CMTimeEpoch epoch = v26;
          type.CFDictionaryRef value = *MEMORY[0x1E4F1FA48];
          type.timescale = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
          type.flags = v40;
          type.CMTimeEpoch epoch = v39;
          CMTimeSubtract(&v49, &lhs, &type);
          CMTimeAbsoluteValue(&time, &v49);
          CMTimeMake(&time2, 1, 1000000000);
          CMTime lhs = time;
          if (CMTimeCompare(&lhs, &time2) <= 0) {
            goto LABEL_30;
          }
        }
        time.CFDictionaryRef value = v47;
        time.timescale = v48;
        time.flags = v25;
        time.CMTimeEpoch epoch = v26;
        lhs.CFDictionaryRef value = *MEMORY[0x1E4F1FA48];
        lhs.timescale = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
        lhs.flags = v40;
        lhs.CMTimeEpoch epoch = v39;
        if (CMTimeCompare(&time, &lhs) < 1)
        {
LABEL_30:
          uint64_t v30 = *((void *)v17 + 24);
          uint64_t v31 = (const void *)*((void *)v17 + 25);
          CMTime time = *a4;
          unsigned int v29 = EditMentorSetModeToScrub(v30, (uint64_t)&time, v19, v20, cf, v31);
        }
        else
        {
LABEL_29:
          memset(&time, 0, sizeof(time));
          CMTime v49 = *a4;
          *(_OWORD *)&lhs.CFDictionaryRef value = *(_OWORD *)v21;
          lhs.CMTimeEpoch epoch = *(void *)(v17 + 117);
          CMTimeSubtract(&time, &v49, &lhs);
          memset(&v49, 0, sizeof(v49));
          CMTime lhs = *a4;
          CMTime type = *(CMTime *)(v17 + 119);
          CMTimeAdd(&v49, &lhs, &type);
          uint64_t v27 = *((void *)v17 + 24);
          int v28 = (const void *)*((void *)v17 + 25);
          CMTime lhs = time;
          CMTime type = v49;
          unsigned int v29 = EditMentorSetModeToForwardPlayback(v27, (uint64_t)&lhs, (long long *)&type.value, v19, v20, 0, v28);
        }
        if (v42) {
          uint64_t v14 = v42;
        }
        else {
          uint64_t v14 = v29;
        }
        if (value) {
          CFRelease(value);
        }
        if (v19) {
          CFRelease(v19);
        }
        int v13 = v41;
        if (v20) {
          CFRelease(v20);
        }
      }
      ++v15;
    }
    while (v15 < FigCFRangeGetLimit());
    if (cf) {
      CFRelease(cf);
    }
  }
  if (a6) {
    *a6 = v13;
  }
  return v14;
}

__CFDictionary *bossCopyOptionsDictionaryForMentors(uint64_t a1, int a2, const void *a3, const void *a4, const void *a5, const void *a6, int a7, int a8, float a9, char a10, char a11, char a12, int a13, char a14, void *value, char a16)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 20, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CMTimeEpoch v26 = Mutable;
  if (*(_DWORD *)(a1 + 152) == 1) {
    uint64_t v27 = kVideoMentorScrubPolicy_BlendFrames;
  }
  else {
    uint64_t v27 = kVideoMentorScrubPolicy_FrameAccurate;
  }
  CFDictionarySetValue(Mutable, @"ScrubPolicy", *v27);
  if (a10)
  {
    int v28 = (const void **)&kMentorPrerollPolicy_PrerollUntilOutputReachesLowWaterOrSampleNotImmediatelyAvailable;
    if (a9 <= 1.0) {
      int v28 = (const void **)&kMentorPrerollPolicy_PrerollUntilOutputReachesLowWater;
    }
    CFDictionarySetValue(v26, @"PrerollPolicy", *v28);
  }
  if (a2 == 2) {
    unsigned int v29 = (const void **)&kMentorModeChangePolicy_CancelPreviousOutput;
  }
  else {
    unsigned int v29 = (const void **)&kMentorModeChangePolicy_RepurposeOrCancelPreviousOutput;
  }
  if (a2 == 1) {
    unsigned int v29 = (const void **)&kMentorModeChangePolicy_PreservePreviousOutput;
  }
  CFDictionarySetValue(v26, @"ModeChangePolicy", *v29);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  if (a3) {
    CFDictionarySetValue(v26, @"DefaultGradualDecoderRefresh", a3);
  }
  if (a4) {
    CFDictionarySetValue(v26, @"BonusAudioPrimingPacketCountAtStart", a4);
  }
  if (a5) {
    CFDictionarySetValue(v26, @"PostDecoderDrain", a5);
  }
  if (a6) {
    CFDictionarySetValue(v26, @"TrimDurationAtEOF", a6);
  }
  uint64_t v30 = (const void **)&kMentorCursorAccuracy_Exact;
  if (!*(unsigned char *)(a1 + 122)) {
    uint64_t v30 = (const void **)&kMentorCursorAccuracy_Approximate;
  }
  CFDictionarySetValue(v26, @"CursorAccuracy", *v30);
  uint64_t v31 = (const void **)MEMORY[0x1E4F1CFC8];
  if (a7) {
    CFDictionarySetValue(v26, @"TrimSampleBufferDurations", (const void *)*MEMORY[0x1E4F1CFC8]);
  }
  uint64_t v32 = (const void **)MEMORY[0x1E4F1CFD0];
  if (a8) {
    CFDictionarySetValue(v26, @"SynchronouslyResetOutput", (const void *)*MEMORY[0x1E4F1CFD0]);
  }
  if (!*(unsigned char *)(a1 + 135) && *(unsigned char *)(a1 + 140))
  {
    if (!*(unsigned char *)(a1 + 120))
    {
      int v36 = 0x40000000;
      if (bossGetVideoDecoderMaxSpeedThreshold(a1, (float *)&v36))
      {
        if (dword_1E9350D98)
        {
          os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(_DWORD *)(a1 + 136) = v36;
      }
    }
    *(unsigned char *)(a1 + 140) = 0;
  }
  if (*(unsigned char *)(a1 + 132))
  {
    FigCFDictionarySetFloat32();
    FigCFDictionarySetFloat32();
  }
  else if (!*(unsigned char *)(a1 + 120) && *(float *)(a1 + 136) < a9)
  {
    CFDictionarySetValue(v26, @"PlayIFramesOnly", *v32);
  }
  if (a13) {
    FigCFDictionarySetInt32();
  }
  if (*(unsigned char *)(a1 + 120) || *(void *)(a1 + 592)) {
    CFDictionarySetValue(v26, @"PostUpcomingOutputPTSRangeChangeNotifications", *v32);
  }
  if (*(_DWORD *)(a1 + 424) == 1920298606 && *(unsigned char *)(a1 + 429)) {
    CFDictionarySetValue(v26, @"SendPermanentEmptyMediaMarkers", *v31);
  }
  if (a11) {
    CFDictionarySetValue(v26, @"OKToWaitForTrackToGrow", *v32);
  }
  if (a12) {
    CFDictionarySetValue(v26, @"ConsolidateContinuousEdits", *v32);
  }
  if (a14) {
    CFDictionarySetValue(v26, @"RoundUpStartPTS", *v32);
  }
  if (value) {
    CFDictionarySetValue(v26, @"ExtendedCatchUpDuration", value);
  }
  if (a16) {
    int v34 = v32;
  }
  else {
    int v34 = v31;
  }
  CFDictionarySetValue(v26, @"RemoveExcessFramesInRefreshIntervals", *v34);
  FigCFDictionarySetInt32();
  return v26;
}

uint64_t EditMentorSetModeToScrub(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5, const void *a6)
{
  int v8 = a4;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  CMTimeScale timescale = 0;
  CMTimeValue value = 0;
  if (dword_1E9350D58)
  {
    LODWORD(v49.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v8 = a4;
  }
  editMentorStartNewParentOrder(a1, a3, a6);
  *(_DWORD *)(a1 + 320) = 1;
  int v13 = *(const void **)(a1 + 672);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 672) = 0;
  }
  *(_OWORD *)&v46.CMTimeValue value = *(_OWORD *)a2;
  v46.CMTimeEpoch epoch = *(void *)(a2 + 16);
  MEMORY[0x19970E910](*(void *)(a1 + 344));
  uint64_t v14 = *(const void **)(a1 + 336);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 336) = 0;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 344));
  CFIndex v15 = (_OWORD *)(a1 + 368);
  long long v52 = 0u;
  memset(&v53, 0, sizeof(v53));
  memset(time, 0, sizeof(time));
  memset(&v49, 0, sizeof(v49));
  CFTypeRef cf = 0;
  uint64_t v16 = *(void *)(a1 + 136);
  if (v16)
  {
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    CMTimeFlags v22 = *(unsigned int (**)(uint64_t, CMTimeRange *, CFTypeRef *))(v18 + 8);
    if (!v22
      || (*(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)&v46.value, time1.start.epoch = v46.epoch, v22(v16, &time1, &cf))
      || ((v23 = cf, (uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v25 = 0) : (v25 = v24),
          (CMTimeEpoch v26 = *(unsigned int (**)(CFTypeRef, unsigned char *))(v25 + 24)) == 0 || v26(v23, time)))
    {
      FigSignalErrorAt();
      goto LABEL_24;
    }
  }
  else
  {
    long long v19 = *(_OWORD *)(a1 + 192);
    long long v52 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)&v53.start.CMTimeValue value = v19;
    long long v20 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)&v53.start.CMTimeEpoch epoch = *(_OWORD *)(a1 + 208);
    *(_OWORD *)&v53.duration.CMTimeScale timescale = v20;
    long long v21 = *(_OWORD *)(a1 + 160);
    *(_OWORD *)CMTime time = *(_OWORD *)(a1 + 144);
    *(_OWORD *)&time[16] = v21;
  }
  *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)&v46.value;
  time1.start.CMTimeEpoch epoch = v46.epoch;
  CMTime type = v53.start;
  if ((CMTimeCompare(&time1.start, &type) & 0x80000000) == 0)
  {
    CMTimeRange time1 = v53;
    CMTimeRangeGetEnd(&v49, &time1);
    time1.start = v49;
    CMTime type = v46;
    if ((CMTimeCompare(&time1.start, &type) & 0x80000000) == 0 && (time[12] & 0x1D) == 1)
    {
      char v27 = 0;
      long long v28 = *(_OWORD *)&v53.start.value;
      *(_OWORD *)(a1 + 400) = v52;
      *(_OWORD *)(a1 + 416) = v28;
      long long v29 = *(_OWORD *)&v53.duration.timescale;
      *(_OWORD *)(a1 + 432) = *(_OWORD *)&v53.start.epoch;
      *(_OWORD *)(a1 + 448) = v29;
      long long v30 = *(_OWORD *)&time[16];
      *CFIndex v15 = *(_OWORD *)time;
      *(_OWORD *)(a1 + 384) = v30;
      goto LABEL_25;
    }
  }
LABEL_24:
  char v27 = 1;
LABEL_25:
  if (cf) {
    CFRelease(cf);
  }
  if (v27)
  {
    CMTime v49 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  }
  else
  {
    *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)&v46.value;
    time1.start.CMTimeEpoch epoch = v46.epoch;
    long long v31 = *(_OWORD *)(a1 + 416);
    long long v52 = *(_OWORD *)(a1 + 400);
    *(_OWORD *)&v53.start.CMTimeValue value = v31;
    long long v32 = *(_OWORD *)(a1 + 448);
    *(_OWORD *)&v53.start.CMTimeEpoch epoch = *(_OWORD *)(a1 + 432);
    *(_OWORD *)&v53.duration.CMTimeScale timescale = v32;
    long long v33 = *(_OWORD *)(a1 + 384);
    *(_OWORD *)CMTime time = *v15;
    *(_OWORD *)&time[16] = v33;
    editMentorMapTrackTimeToMediaTimeUsingEditSegment(&time1.start, (CMTime *)time, (uint64_t)&v49);
  }
  CMTimeValue value = v49.value;
  CMTimeFlags flags = v49.flags;
  CMTimeScale timescale = v49.timescale;
  if ((v49.flags & 0x1D) != 1)
  {
    *(_OWORD *)CMTime time = *(_OWORD *)a2;
    *(void *)&time[16] = *(void *)(a2 + 16);
    return editMentorSetChildMentorModeToEmptyEdit(a1, 0, (uint64_t)time, 0, (uint64_t)a6, a5);
  }
  CMTimeEpoch epoch = v49.epoch;
  time1.start.CMTimeValue value = 0;
  int v36 = (const void *)editMentorRetainCurrentChildOrderAndOptionsDictionary(a1, (__CFDictionary **)&time1);
  uint64_t v37 = *(void *)a1;
  if (*(void *)a1)
  {
    *(void *)CMTime time = value;
    *(void *)&time[8] = __PAIR64__(flags, timescale);
    *(void *)&time[16] = epoch;
    uint64_t v38 = VideoMentorSetModeToScrub(v37, 0, (long long *)time, (CFDictionaryRef)time1.start.value, v8, a5, v36);
    goto LABEL_40;
  }
  uint64_t v40 = *(void *)(a1 + 8);
  if (v40)
  {
    uint64_t v38 = AudioMentorSetModeToDoNothing(v40, 0, a5);
    goto LABEL_40;
  }
  uint64_t v41 = *(void *)(a1 + 16);
  if (v41)
  {
    *(void *)CMTime time = value;
    *(void *)&time[8] = __PAIR64__(flags, timescale);
    *(void *)&time[16] = epoch;
    uint64_t v38 = EditMentorSetModeToScrub(v41, time, time1.start.value, v8, a5, v36);
    goto LABEL_40;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    unsigned int v42 = *(uint64_t (**)(uint64_t, unsigned char *, CMTimeValue, const void *, const void *, const void *))(a1 + 72);
    uint64_t v43 = *(void *)(a1 + 40);
    *(void *)CMTime time = value;
    *(void *)&time[8] = __PAIR64__(flags, timescale);
    *(void *)&time[16] = epoch;
    uint64_t v38 = v42(v43, time, time1.start.value, v8, a5, v36);
LABEL_40:
    uint64_t v39 = v38;
    if (!v36) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
  uint64_t v39 = 0;
  if (v36) {
LABEL_41:
  }
    CFRelease(v36);
LABEL_42:
  if (time1.start.value) {
    CFRelease((CFTypeRef)time1.start.value);
  }
  return v39;
}

uint64_t FigTrackReaderGetTrackEditWithIndex(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

__n128 editMentorMapTrackTimeToMediaTimeUsingEditSegment@<Q0>(CMTime *a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X8>)
{
  CMTime time1 = *a2;
  CMTime time2 = a2[2];
  int32_t v6 = CMTimeCompare(&time1, &time2);
  CMTime time1 = a2[3];
  CMTime time2 = a2[1];
  int32_t v7 = CMTimeCompare(&time1, &time2);
  if (v6 | v7)
  {
    int32_t v8 = v7;
    CMTime time2 = *a1;
    CMTime rhs = a2[2];
    CMTimeSubtract(&time1, &time2, &rhs);
    *a1 = time1;
    if (v8)
    {
      CMTime time2 = *a1;
      CMTime rhs = a2[1];
      CMTimeMultiplyTimeByTimeRatio();
      *a1 = time1;
    }
    CMTime time2 = *a1;
    CMTime rhs = *a2;
    CMTimeAdd(&time1, &time2, &rhs);
    *a1 = time1;
  }
  __n128 result = *(__n128 *)&a1->value;
  *(_OWORD *)a3 = *(_OWORD *)&a1->value;
  *(void *)(a3 + 16) = a1->epoch;
  return result;
}

uint64_t editMentorRetainCurrentChildOrderAndOptionsDictionary(uint64_t a1, __CFDictionary **a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 312));
  uint64_t v4 = *(void *)(a1 + 328);
  if (v4) {
    CFRetain(*(CFTypeRef *)(a1 + 328));
  }
  if (a2)
  {
    MutableCopCGFloat y = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    if ((*(_DWORD *)(a1 + 380) & 0x1D) == 1 && (*(_DWORD *)(a1 + 404) & 0x1D) == 1)
    {
      int32_t v6 = (_OWORD *)(a1 + 392);
      CMTime time1 = *(CMTime *)(a1 + 392);
      long long v10 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      time2.CMTimeEpoch epoch = v7;
      if (CMTimeCompare(&time1, &time2))
      {
        int32_t v8 = (_OWORD *)(a1 + 440);
        CMTime time1 = *(CMTime *)(a1 + 440);
        *(_OWORD *)&time2.CMTimeValue value = v10;
        time2.CMTimeEpoch epoch = v7;
        if (CMTimeCompare(&time1, &time2))
        {
          *(_OWORD *)&time1.CMTimeValue value = *v8;
          time1.CMTimeEpoch epoch = *(void *)(a1 + 456);
          *(_OWORD *)&time2.CMTimeValue value = *v6;
          time2.CMTimeEpoch epoch = *(void *)(a1 + 408);
          if (CMTimeCompare(&time1, &time2))
          {
            FigCFDictionaryGetFloat32IfPresent();
            *(_OWORD *)&time1.CMTimeValue value = *v6;
            time1.CMTimeEpoch epoch = *(void *)(a1 + 408);
            *(_OWORD *)&time2.CMTimeValue value = *v8;
            time2.CMTimeEpoch epoch = *(void *)(a1 + 456);
            CMTimeGetSeconds(&time1);
            CMTime time1 = time2;
            CMTimeGetSeconds(&time1);
            FigCFDictionarySetFloat32();
          }
        }
      }
    }
    if (*(unsigned char *)(a1 + 682)) {
      CFDictionarySetValue(MutableCopy, @"RoundUpStartPTS", (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    *a2 = MutableCopy;
  }
  MEMORY[0x19970E930](*(void *)(a1 + 312));
  return v4;
}

uint64_t FigPlaybackBossSetEndTime(uint64_t a1, long long *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)a2 + 3) & 0x1D) != 1)
  {
    uint64_t v4 = MEMORY[0x1E4F1F9F8];
    *a2 = *MEMORY[0x1E4F1F9F8];
    *((void *)a2 + 2) = *(void *)(v4 + 16);
  }
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  long long v6 = *a2;
  *(void *)(a1 + 184) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 168) = v6;
  if (*(_DWORD *)(a1 + 424) == 1886151033)
  {
    CMTimeEpoch v7 = *(OpaqueCMTimebase **)(a1 + 112);
    if (v7) {
      float EffectiveRate = CMTimebaseGetEffectiveRate(v7);
    }
    else {
      float EffectiveRate = 1.0;
    }
    bossScheduleReachedEndCallbackForRate(a1, EffectiveRate);
  }
  return 0;
}

uint64_t FigPlaybackBossSetReverseEndTime(uint64_t a1, long long *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if ((*((_DWORD *)a2 + 3) & 0x1D) != 1)
  {
    uint64_t v4 = MEMORY[0x1E4F1F9F8];
    *a2 = *MEMORY[0x1E4F1F9F8];
    *((void *)a2 + 2) = *(void *)(v4 + 16);
  }
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  long long v6 = *a2;
  *(void *)(a1 + 304) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 288) = v6;
  if (*(_DWORD *)(a1 + 424) == 1886151033)
  {
    CMTimeEpoch v7 = *(OpaqueCMTimebase **)(a1 + 112);
    if (v7) {
      float EffectiveRate = CMTimebaseGetEffectiveRate(v7);
    }
    else {
      float EffectiveRate = 1.0;
    }
    bossScheduleReachedEndCallbackForRate(a1, EffectiveRate);
  }
  return 0;
}

uint64_t FigPlaybackBossSetStopAtEnd(unsigned char *a1, char a2)
{
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!a1 || a1[16]) {
    return FigSignalErrorAt();
  }
  if (a1[840])
  {
    long long v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t result = 0;
  a1[129] = a2;
  return result;
}

uint64_t FigPlaybackBossGetTimebase(uint64_t result)
{
  if (result)
  {
    if (*(unsigned char *)(result + 16)) {
      return 0;
    }
    else {
      return *(void *)(result + 112);
    }
  }
  return result;
}

uint64_t FigPlayabilityMonitorCreate(const void *a1, _DWORD *a2, CFTypeRef *a3, int64_t a4, const void *a5, const void *a6, int a7, UInt8 **a8)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  CMTime v125 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t valuePtr = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8648);
  if (Mutable)
  {
    CFIndex v15 = Mutable;
    CFDataSetLength(Mutable, 8648);
    MutableBytePtr = CFDataGetMutableBytePtr(v15);
    bzero(MutableBytePtr, 0x21C8uLL);
    *(void *)MutableBytePtr = v15;
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    if (*(void *)(v18 + 80))
    {
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      long long v21 = *(uint64_t (**)(const void *, UInt8 *))(v20 + 80);
      if (!v21)
      {
        uint64_t v32 = 4294954514;
LABEL_25:
        FigPlayabilityMonitorDestroy((uint64_t)MutableBytePtr);
        return v32;
      }
      uint64_t v22 = v21(a1, MutableBytePtr + 8);
      if (v22) {
        goto LABEL_190;
      }
    }
    else
    {
      *((void *)MutableBytePtr + 1) = CFRetain(a1);
    }
    *((void *)MutableBytePtr + 2) = CFRetain(a5);
    *((void *)MutableBytePtr + 3) = CFRetain(a6);
    uint64_t v23 = FigReentrantMutexCreate();
    *((void *)MutableBytePtr + 6) = v23;
    if (!v23) {
      goto LABEL_188;
    }
    uint64_t v24 = FigReentrantMutexCreate();
    *((void *)MutableBytePtr + 7) = v24;
    if (!v24) {
      goto LABEL_188;
    }
    uint64_t v25 = FigReentrantMutexCreate();
    *((void *)MutableBytePtr + 1079) = v25;
    if (!v25) {
      goto LABEL_188;
    }
    uint64_t v26 = FigConditionVariableCreate();
    *((void *)MutableBytePtr + 9) = v26;
    if (!v26) {
      goto LABEL_188;
    }
    uint64_t v22 = FigRetainProxyCreate();
    if (!v22)
    {
      HostTimeClock = CMClockGetHostTimeClock();
      uint64_t v22 = CMTimebaseCreateWithSourceClock(v13, HostTimeClock, (CMTimebaseRef *)MutableBytePtr + 4);
      if (!v22)
      {
        uint64_t v22 = CMTimebaseCreateWithSourceTimebase(v13, *((CMTimebaseRef *)MutableBytePtr + 4), (CMTimebaseRef *)MutableBytePtr + 5);
        if (!v22)
        {
          CMTimebaseSetRate(*((CMTimebaseRef *)MutableBytePtr + 4), 1.0);
          long long v28 = malloc_type_calloc(a4, 0x30uLL, 0x10200403DD621CEuLL);
          *((void *)MutableBytePtr + 11) = v28;
          if (!v28) {
            goto LABEL_188;
          }
          *((void *)MutableBytePtr + 10) = 0;
          *((_DWORD *)MutableBytePtr + 24) = 1;
          MutableBytePtr[314] = 0;
          if (*((void *)MutableBytePtr + 2))
          {
            CMByteStreamGetCMBaseObject();
            FigCRABSGetClassID();
            if (CMBaseObjectIsMemberOfClass())
            {
              BOOLean[0].CMTimeValue value = 0;
              uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
              uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v30) {
                uint64_t v31 = v30;
              }
              else {
                uint64_t v31 = 0;
              }
              long long v33 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v31 + 48);
              if (v33 && !v33(CMBaseObject, @"CRABS_ReadAheadActive", v13, BOOLean))
              {
                MutableBytePtr[314] = CFBooleanGetValue((CFBooleanRef)BOOLean[0].value) == 0;
                CFRelease((CFTypeRef)BOOLean[0].value);
              }
              uint64_t v34 = CMByteStreamGetCMBaseObject();
              uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v35) {
                uint64_t v36 = v35;
              }
              else {
                uint64_t v36 = 0;
              }
              uint64_t v37 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, UInt8 *))(v36 + 48);
              if (v37) {
                v37(v34, @"CRABS_ReportingAgent", v13, MutableBytePtr + 8568);
              }
            }
          }
          *((_DWORD *)MutableBytePtr + 26) = 0;
          *((void *)MutableBytePtr + 33) = 0x7FFFFFFFFFFFFFFFLL;
          MutableBytePtr[8554] = 1;
          if (a7)
          {
            if (a7 != 1)
            {
LABEL_40:
              CMTimeMakeWithSeconds(BOOLean, 5.0, 1000);
              *(CMTime *)(MutableBytePtr + 160) = BOOLean[0];
              uint64_t v39 = *((int *)MutableBytePtr + 28);
              if (v39 == 1)
              {
                if (*((float *)MutableBytePtr + 29) == 0.0) {
                  *((_DWORD *)MutableBytePtr + 29) = 1067869798;
                }
                if (*((float *)MutableBytePtr + 30) == 0.0) {
                  *((_DWORD *)MutableBytePtr + 30) = 1066611507;
                }
                if (*((float *)MutableBytePtr + 31) == 0.0) {
                  *((_DWORD *)MutableBytePtr + 31) = 1066192077;
                }
                if (*((float *)MutableBytePtr + 32) == 0.0) {
                  *((_DWORD *)MutableBytePtr + 32) = 1067869798;
                }
                if (*((float *)MutableBytePtr + 33) == 0.0) {
                  *((_DWORD *)MutableBytePtr + 33) = 1077936128;
                }
                if (*((double *)MutableBytePtr + 17) == 0.0) {
                  *((void *)MutableBytePtr + 17) = 0x404E000000000000;
                }
                if (*((double *)MutableBytePtr + 18) == 0.0) {
                  *((void *)MutableBytePtr + 18) = 0x4024000000000000;
                }
                if (*((double *)MutableBytePtr + 19) == 0.0) {
                  *((void *)MutableBytePtr + 19) = 0x3FF0000000000000;
                }
              }
              uint64_t v40 = *((void *)MutableBytePtr + 1071);
              if (v40)
              {
                uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v42 = v41 ? v41 : 0;
                uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v42 + 56);
                if (v43) {
                  v43(v40, 0x1EE582C38, 0x1EE55E2D8, v39, 0);
                }
              }
              uint64_t v44 = FigDispatchQueueCreateWithPriority();
              *((void *)MutableBytePtr + 40) = v44;
              if (!v44) {
                goto LABEL_188;
              }
              *((void *)MutableBytePtr + 1070) = voucher_copy();
              unsigned int v45 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *((dispatch_queue_t *)MutableBytePtr + 40));
              *((void *)MutableBytePtr + 37) = v45;
              if (!v45) {
                goto LABEL_188;
              }
              dispatch_set_context(v45, *((void **)MutableBytePtr + 41));
              dispatch_source_set_timer(*((dispatch_source_t *)MutableBytePtr + 37), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
              dispatch_source_set_event_handler_f(*((dispatch_source_t *)MutableBytePtr + 37), (dispatch_function_t)fpm_UpdateTimerProc);
              dispatch_resume(*((dispatch_object_t *)MutableBytePtr + 37));
              CMTime v46 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *((dispatch_queue_t *)MutableBytePtr + 40));
              *((void *)MutableBytePtr + 38) = v46;
              if (!v46) {
                goto LABEL_188;
              }
              uint64_t v117 = MutableBytePtr + 8552;
              dispatch_set_context(v46, *((void **)MutableBytePtr + 41));
              dispatch_source_set_timer(*((dispatch_source_t *)MutableBytePtr + 38), 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
              dispatch_source_set_event_handler_f(*((dispatch_source_t *)MutableBytePtr + 38), (dispatch_function_t)fpm_StallWarningProc);
              dispatch_resume(*((dispatch_object_t *)MutableBytePtr + 38));
              uint64_t v22 = CMTimebaseAddTimerDispatchSource(*((CMTimebaseRef *)MutableBytePtr + 3), *((dispatch_source_t *)MutableBytePtr + 38));
              if (!v22)
              {
                LODWORD(BOOLean[0].value) = 32;
                CFNumberRef v47 = CFNumberCreate(v13, kCFNumberSInt32Type, BOOLean);
                uint64_t v48 = CMByteStreamGetCMBaseObject();
                uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v49) {
                  uint64_t v50 = v49;
                }
                else {
                  uint64_t v50 = 0;
                }
                uint64_t v51 = *(void (**)(uint64_t, void, CFNumberRef))(v50 + 56);
                if (v51) {
                  v51(v48, *MEMORY[0x1E4F1FB28], v47);
                }
                CFRelease(v47);
                if (a4 >= 1)
                {
                  long long v52 = a3;
                  while (1)
                  {
                    v126.CMTimeValue value = 0;
                    v120.CMTimeValue value = 0;
                    CFTypeRef v122 = 0;
                    CFTypeRef v123 = 0;
                    int v121 = 0;
                    uint64_t v53 = *((void *)MutableBytePtr + 1);
                    uint64_t v54 = *a2;
                    uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
                    uint64_t v56 = v55 ? v55 : 0;
                    unsigned int v57 = *(unsigned int (**)(uint64_t, uint64_t, CMTime *, int *))(v56 + 56);
                    if (v57)
                    {
                      if (!v57(v53, v54, &v126, &v121)) {
                        break;
                      }
                    }
LABEL_119:
                    if (v123)
                    {
                      CFRelease(v123);
                      CFTypeRef v123 = 0;
                    }
                    if (v122)
                    {
                      CFRelease(v122);
                      CFTypeRef v122 = 0;
                    }
                    if (v120.value) {
                      CFRelease((CFTypeRef)v120.value);
                    }
                    ++v52;
                    ++a2;
                    if (!--a4) {
                      goto LABEL_126;
                    }
                  }
                  if (v121 == 1952807028 || v121 == 1668310898)
                  {
                    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v126.value);
                    uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v59) {
                      uint64_t v60 = v59;
                    }
                    else {
                      uint64_t v60 = 0;
                    }
                    int v63 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CMTime *))(v60 + 48);
                    if (v63) {
                      int v64 = v63(FigBaseObject, @"CaptionSampleCursorService", v13, &v120);
                    }
                    else {
                      int v64 = -12782;
                    }
                    CMTimeValue value = v120.value;
                    if (v64) {
                      BOOL v65 = 1;
                    }
                    else {
                      BOOL v65 = v120.value == 0;
                    }
                    char v61 = !v65;
                    if (v120.value) {
                      goto LABEL_96;
                    }
                  }
                  else
                  {
                    char v61 = 0;
                    CMTimeValue value = v120.value;
                    if (v120.value) {
                      goto LABEL_96;
                    }
                  }
                  CMTimeValue v68 = v126.value;
                  uint64_t v69 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v69) {
                    uint64_t v70 = v69;
                  }
                  else {
                    uint64_t v70 = 0;
                  }
                  uint64_t v75 = *(unsigned int (**)(CMTimeValue, CMTime *))(v70 + 32);
                  if (!v75 || v75(v68, &v120))
                  {
LABEL_117:
                    if (v126.value)
                    {
                      CFRelease((CFTypeRef)v126.value);
                      v126.CMTimeValue value = 0;
                    }
                    goto LABEL_119;
                  }
                  CMTimeValue value = v120.value;
LABEL_96:
                  uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v66) {
                    uint64_t v67 = v66;
                  }
                  else {
                    uint64_t v67 = 0;
                  }
                  uint64_t v71 = *(unsigned int (**)(CMTimeValue, CMTime *, CFTypeRef *, void, void))(v67 + 8);
                  if (v71)
                  {
                    BOOLean[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
                    if (!v71(value, BOOLean, &v123, 0, 0))
                    {
                      CMTimeValue v72 = v120.value;
                      uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 16);
                      uint64_t v74 = v73 ? v73 : 0;
                      uint64_t v76 = *(unsigned int (**)(CMTimeValue, CMTime *, uint64_t, CFTypeRef *, void, void))(v74 + 16);
                      if (v76)
                      {
                        BOOLean[0] = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
                        if (!v76(v72, BOOLean, 1, &v122, 0, 0))
                        {
                          *(_DWORD *)(*((void *)MutableBytePtr + 11) + 48 * *((void *)MutableBytePtr + 10)) = *a2;
                          *(void *)(*((void *)MutableBytePtr + 11) + 48 * *((void *)MutableBytePtr + 10) + 8) = CFRetain((CFTypeRef)v126.value);
                          *(void *)(*((void *)MutableBytePtr + 11) + 48 * *((void *)MutableBytePtr + 10) + 16) = CFRetain(v123);
                          CFTypeRef v77 = CFRetain(v122);
                          uint64_t v79 = *((void *)MutableBytePtr + 10);
                          uint64_t v78 = *((void *)MutableBytePtr + 11);
                          *(void *)(v78 + 48 * v79 + 24) = v77;
                          if (a3)
                          {
                            CFTypeRef v80 = *v52;
                            if (*v52)
                            {
                              CFTypeRef v80 = CFRetain(v80);
                              uint64_t v79 = *((void *)MutableBytePtr + 10);
                              uint64_t v78 = *((void *)MutableBytePtr + 11);
                            }
                          }
                          else
                          {
                            CFTypeRef v80 = 0;
                          }
                          uint64_t v81 = v78 + 48 * v79;
                          *(void *)(v81 + 32) = v80;
                          *(unsigned char *)(v81 + 40) = v61;
                          *((void *)MutableBytePtr + 10) = v79 + 1;
                        }
                      }
                    }
                  }
                  goto LABEL_117;
                }
LABEL_126:
                if (*((void *)MutableBytePtr + 10))
                {
                  FigFormatReaderUtilityGetDuration(*((void *)MutableBytePtr + 1), 1, &v125);
                  if (dword_1E9350B30)
                  {
                    LODWORD(v120.value) = 0;
                    LOBYTE(v123) = 0;
                    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v83 = v120.value;
                    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)v123)) {
                      unsigned int v84 = v83;
                    }
                    else {
                      unsigned int v84 = v83 & 0xFFFFFFFE;
                    }
                    if (v84)
                    {
                      BOOLean[0] = v125;
                      Float64 Seconds = CMTimeGetSeconds(BOOLean);
                      LODWORD(v126.value) = 136315650;
                      *(CMTimeValue *)((char *)&v126.value + 4) = (CMTimeValue)"FigPlayabilityMonitorCreate";
                      LOWORD(v126.flags) = 2048;
                      *(void *)((char *)&v126.flags + 2) = MutableBytePtr;
                      HIWORD(v126.epoch) = 2048;
                      double v127 = Seconds;
                      _os_log_send_and_compose_impl();
                    }
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  if ((v125.flags & 0x1D) == 1)
                  {
                    BOOLean[0] = v125;
                    CMTime v126 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
                    if (CMTimeCompare(BOOLean, &v126) >= 1)
                    {
                      if (!*((void *)MutableBytePtr + 2)) {
                        goto LABEL_166;
                      }
                      CMByteStreamGetCMBaseObject();
                      FigCRABSGetClassID();
                      if (CMBaseObjectIsMemberOfClass())
                      {
                        uint64_t v86 = CMByteStreamGetCMBaseObject();
                        uint64_t v87 = *(void *)(CMBaseObjectGetVTable() + 8);
                        uint64_t v88 = v87 ? v87 : 0;
                        uint64_t v89 = *(uint64_t (**)(uint64_t, uint64_t, const __CFAllocator *, CMTime *))(v88 + 48);
                        if (v89)
                        {
                          uint64_t v90 = *MEMORY[0x1E4F1EC50];
                          BOOLean[0].CMTimeValue value = 0;
                          int v91 = v89(v86, v90, v13, BOOLean);
                          if (v91 || !BOOLean[0].value)
                          {
                            if (v91) {
                              goto LABEL_160;
                            }
                          }
                          else
                          {
                            CFNumberGetValue((CFNumberRef)BOOLean[0].value, kCFNumberSInt64Type, &valuePtr);
                            CFRelease((CFTypeRef)BOOLean[0].value);
                          }
                          v120.CMTimeValue value = 0;
                          double v92 = (double)valuePtr;
                          BOOLean[0] = v125;
                          v120.CMTimeValue value = (uint64_t)(v92 / CMTimeGetSeconds(BOOLean));
                          CFNumberRef v93 = CFNumberCreate(v13, kCFNumberSInt64Type, &v120);
                          if (dword_1E9350B30)
                          {
                            LODWORD(v123) = 0;
                            LOBYTE(v122) = 0;
                            int v94 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            unsigned int v95 = v123;
                            if (os_log_type_enabled(v94, (os_log_type_t)v122)) {
                              unsigned int v96 = v95;
                            }
                            else {
                              unsigned int v96 = v95 & 0xFFFFFFFE;
                            }
                            if (v96)
                            {
                              LODWORD(v126.value) = 136315650;
                              *(CMTimeValue *)((char *)&v126.value + 4) = (CMTimeValue)"FigPlayabilityMonitorCreate";
                              LOWORD(v126.flags) = 2048;
                              *(void *)((char *)&v126.flags + 2) = MutableBytePtr;
                              HIWORD(v126.epoch) = 2048;
                              double v127 = (double)(8 * v120.value) / 1000.0;
                              _os_log_send_and_compose_impl();
                            }
                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                          }
                          uint64_t v97 = CMByteStreamGetCMBaseObject();
                          uint64_t v98 = *(void *)(CMBaseObjectGetVTable() + 8);
                          if (v98) {
                            uint64_t v99 = v98;
                          }
                          else {
                            uint64_t v99 = 0;
                          }
                          int v100 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v99 + 56);
                          if (v100) {
                            v100(v97, @"CRABS_DataConsumptionRateHint", v93);
                          }
                          if (v93) {
                            CFRelease(v93);
                          }
                        }
                      }
                    }
                  }
LABEL_160:
                  if (*((void *)MutableBytePtr + 2))
                  {
                    BOOLean[0].CMTimeValue value = 0;
                    uint64_t v101 = CMByteStreamGetCMBaseObject();
                    uint64_t v102 = *(void *)(CMBaseObjectGetVTable() + 8);
                    uint64_t v103 = v102 ? v102 : 0;
                    int v104 = *(unsigned int (**)(uint64_t, void, const __CFAllocator *, CMTime *))(v103 + 48);
                    if (v104)
                    {
                      if (!v104(v101, *MEMORY[0x1E4F1EC58], v13, BOOLean))
                      {
                        int v115 = CFBooleanGetValue((CFBooleanRef)BOOLean[0].value);
                        CFRelease((CFTypeRef)BOOLean[0].value);
                        unsigned char *v117 = 0;
                        if (v115)
                        {
LABEL_168:
                          CMByteStreamGetCMBaseObject();
                          FigCRABSGetClassID();
                          if (CMBaseObjectIsMemberOfClass() && *((void *)MutableBytePtr + 3))
                          {
                            int v105 = (uint64_t *)(MutableBytePtr + 8640);
                            uint64_t v106 = CMByteStreamGetCMBaseObject();
                            uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 8);
                            if (v107) {
                              uint64_t v108 = v107;
                            }
                            else {
                              uint64_t v108 = 0;
                            }
                            int v109 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, UInt8 *))(v108 + 48);
                            if (v109) {
                              v109(v106, @"CRABS_NetworkUrgencyMonitor", v13, MutableBytePtr + 8640);
                            }
                            if (*v105) {
                              FigNetworkUrgencyMonitorSetTimebase(*v105, *((void *)MutableBytePtr + 3));
                            }
                          }
                          FigRetainProxyLockMutex();
                          MutableBytePtr[313] = 1;
                          CMTimebaseGetTime(BOOLean, *((CMTimebaseRef *)MutableBytePtr + 3));
                          CMTime v126 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
                          CMTimeMaximum(&v120, BOOLean, &v126);
                          *((_OWORD *)MutableBytePtr + 15) = *(_OWORD *)&v120.value;
                          CMTimeEpoch epoch = v120.epoch;
                          *((void *)MutableBytePtr + 32) = v120.epoch;
                          *(_OWORD *)(MutableBytePtr + 216) = *((_OWORD *)MutableBytePtr + 15);
                          *((void *)MutableBytePtr + 29) = epoch;
                          fpm_ensureUpdatePrimed((uint64_t)MutableBytePtr);
                          CMNotificationCenterGetDefaultLocalCenter();
                          FigNotificationCenterAddWeakListener();
                          CMNotificationCenterGetDefaultLocalCenter();
                          FigNotificationCenterAddWeakListener();
                          CMNotificationCenterGetDefaultLocalCenter();
                          FigNotificationCenterAddWeakListener();
                          CMNotificationCenterGetDefaultLocalCenter();
                          FigNotificationCenterAddWeakListener();
                          FigRetainProxyUnlockMutex();
                          if (dword_1E9350B30)
                          {
                            LODWORD(v120.value) = 0;
                            LOBYTE(v123) = 0;
                            BOOL v111 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            unsigned int v112 = v120.value;
                            if (os_log_type_enabled(v111, (os_log_type_t)v123)) {
                              unsigned int v113 = v112;
                            }
                            else {
                              unsigned int v113 = v112 & 0xFFFFFFFE;
                            }
                            if (v113)
                            {
                              LODWORD(v126.value) = 136315650;
                              *(CMTimeValue *)((char *)&v126.value + 4) = (CMTimeValue)"FigPlayabilityMonitorCreate";
                              LOWORD(v126.flags) = 2048;
                              *(void *)((char *)&v126.flags + 2) = MutableBytePtr;
                              HIWORD(v126.epoch) = 2048;
                              double v127 = *(double *)&a5;
                              _os_log_send_and_compose_impl();
                            }
                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                          }
                          uint64_t v32 = 0;
                          *a8 = MutableBytePtr;
                          return v32;
                        }
LABEL_167:
                        fpm_prepareDataRateProfile((uint64_t)MutableBytePtr);
                        goto LABEL_168;
                      }
                    }
                  }
LABEL_166:
                  unsigned char *v117 = 0;
                  goto LABEL_167;
                }
LABEL_188:
                uint64_t v32 = FigSignalErrorAt();
                if (!v32) {
                  return v32;
                }
                goto LABEL_25;
              }
              goto LABEL_190;
            }
            int v38 = 3;
          }
          else
          {
            int v38 = 2;
          }
          *((_DWORD *)MutableBytePtr + 28) = v38;
          goto LABEL_40;
        }
      }
    }
LABEL_190:
    uint64_t v32 = v22;
    goto LABEL_25;
  }

  return FigSignalErrorAt();
}

uint64_t FigCachedFileByteStreamSetProperty(uint64_t a1, const void *a2, void *a3)
{
  CMTimeRange values = a3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"CFBS_EnableCaching")) {
    return 4294954512;
  }
  long long v6 = (void *)*MEMORY[0x1E4F1CFD0];
  int v7 = *MEMORY[0x1E4F1CFD0] == (void)a3;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 112));
  if (*(unsigned __int8 *)(DerivedStorage + 120) == v7) {
    goto LABEL_10;
  }
  *(unsigned char *)(DerivedStorage + 120) = v7;
  uint64_t v8 = *(void *)(DerivedStorage + 24);
  if (v6 == a3) {
    FigReadCacheContainerShowInterestInCaching(v8);
  }
  else {
    FigReadCacheContainerShowDisinterestInCaching(v8);
  }
  if (!FigServer_IsMediaserverd())
  {
LABEL_10:
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 112));
  }
  else
  {
    CFDictionaryRef v10 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigCachedFileByteStreamProperty_EnableCaching, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v10) {
      return FigSignalErrorAt();
    }
    CFDictionaryRef v11 = v10;
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 112));
    CFRelease(v11);
  }
  return 0;
}

void fpm_ensureUpdatePrimed(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 312) || fpm_shouldUpdateAggressively(a1))
  {
    dispatch_time_t v2 = dispatch_time(0, 0);
    int64_t v3 = 0;
    unint64_t v4 = *(void *)(a1 + 192) + 500000000;
    int64_t v5 = v4 - v2;
    if (v4 >= v2)
    {
      if (fpm_shouldUpdateAggressively(a1)) {
        int64_t v3 = 0;
      }
      else {
        int64_t v3 = v5;
      }
    }
    *(unsigned char *)(a1 + 312) = 1;
    long long v6 = *(NSObject **)(a1 + 296);
    dispatch_time_t v7 = dispatch_time(0, v3);
    dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0);
  }
}

uint64_t FigSyncMomentSourceSetTimebase(void *a1, const void *a2)
{
  if (a1)
  {
    CFRetain(a1);
    MEMORY[0x19970E290](a1[3]);
    int64_t v5 = (const void *)a1[8];
    if (v5 == a2) {
      goto LABEL_12;
    }
    if (v5)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      long long v6 = (const void *)a1[8];
      if (v6) {
        CFRelease(v6);
      }
      a1[8] = 0;
    }
    if (!a2)
    {
LABEL_12:
      MEMORY[0x19970E2B0](a1[3]);
    }
    else
    {
      uint64_t v18 = 0;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      a1[8] = CFRetain(a2);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      figSyncMomentSource_UpdateToCurrentTimebaseRate((uint64_t)a1);
      __n128 SyncMoment = figSyncMomentSource_getSyncMoment((uint64_t)a1, 3, (uint64_t)&v11);
      MEMORY[0x19970E2B0](a1[3], SyncMoment);
      v9[4] = v15;
      v9[5] = v16;
      v9[6] = v17;
      uint64_t v10 = v18;
      v9[0] = v11;
      v9[1] = v12;
      v9[2] = v13;
      v9[3] = v14;
      figSyncMomentSource_SendMoment((dispatch_queue_t *)a1, (uint64_t)v9, 0);
    }
    CFRelease(a1);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figSyncMomentSource_SendMoment(dispatch_queue_t *cf, uint64_t a2, int a3)
{
  long long v4 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)&v13[64] = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v13[80] = v4;
  *(_OWORD *)&v13[96] = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v13 = *(_OWORD *)a2;
  *(_OWORD *)&v13[16] = v5;
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v13[32] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v13[48] = v6;
  *(void *)&v13[112] = *(void *)(a2 + 112);
  uint64_t v14 = 0;
  context = cf;
  if (!a3)
  {
    dispatch_sync_f(cf[10], &context, (dispatch_function_t)figSyncMomentSource_updatePendingMoment);
    if (!(_BYTE)v14) {
      return;
    }
    goto LABEL_5;
  }
  int v7 = *(_DWORD *)&v13[4];
  if (*((unsigned char *)cf + 208)) {
    int v7 = *((_DWORD *)cf + 23) | *(_DWORD *)&v13[4];
  }
  BOOL v8 = *((unsigned __int8 *)cf + 208) == 0;
  *((_DWORD *)cf + 22) = *(_DWORD *)v13;
  *((_DWORD *)cf + 23) = v7;
  long long v9 = *(_OWORD *)&v13[88];
  *((_OWORD *)cf + 10) = *(_OWORD *)&v13[72];
  *((_OWORD *)cf + 11) = v9;
  *((_OWORD *)cf + 12) = *(_OWORD *)&v13[104];
  long long v10 = *(_OWORD *)&v13[24];
  *((_OWORD *)cf + 6) = *(_OWORD *)&v13[8];
  *((_OWORD *)cf + 7) = v10;
  long long v11 = *(_OWORD *)&v13[56];
  *((_OWORD *)cf + 8) = *(_OWORD *)&v13[40];
  *((_OWORD *)cf + 9) = v11;
  LOBYTE(v14) = v8;
  *((unsigned char *)cf + 208) = 1;
  if (v8)
  {
LABEL_5:
    CFRetain(cf);
    dispatch_async_f(cf[27], cf, (dispatch_function_t)figSyncMomentSource_sendMomentInternal);
  }
}

double FigTimebaseGetSyncMoment(OpaqueCMTimebase *a1, uint64_t a2)
{
  uint64_t v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  long long v6 = 0u;
  if (!figtimebase_getSyncMomentInternal(a1, 0, (uint64_t)&v6))
  {
    long long v4 = v7;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = v4;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(void *)(a2 + 8) = *((void *)&v6 + 1);
    unsigned int v5 = DWORD1(v6) & 0xFFFFFFF7;
    *(_DWORD *)a2 = 72;
    *(_DWORD *)(a2 + 4) = v5;
    *(void *)(a2 + 32) = *(void *)&v8[0];
    *(void *)(a2 + 56) = *((void *)&v8[1] + 1);
    *(void *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)v8 + 8);
    double result = *(double *)&v9;
    *(void *)(a2 + 64) = v9;
  }
  return result;
}

uint64_t playerfig_doingGapless()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 77))
  {
    if (dword_1E9350BF0) {
      goto LABEL_12;
    }
    return 0;
  }
  if (*(float *)(DerivedStorage + 48) != 1.0)
  {
    if (dword_1E9350BF0) {
      goto LABEL_12;
    }
    return 0;
  }
  if (*(_DWORD *)(DerivedStorage + 776))
  {
    if (dword_1E9350BF0) {
      goto LABEL_12;
    }
    return 0;
  }
  if (*(unsigned char *)(DerivedStorage + 800))
  {
    if (dword_1E9350BF0)
    {
LABEL_12:
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 0;
  }
  if (!dword_1E9350BF0) {
    return 1;
  }
  uint64_t v2 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  uint64_t v4 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v4;
}

uint64_t FigPlaybackBossSetRate(uint64_t a1, const void *a2, float a3)
{
  return FigPlaybackBossSetRateAndAnchorTime(a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], a2, a3);
}

uint64_t bossScheduleReachedEndCallbackForTime(uint64_t a1, CMTime *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  unsigned int v5 = *(NSObject **)(a1 + 160);
  if (v5) {
    goto LABEL_4;
  }
  long long v9 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(a1 + 32));
  *(void *)(a1 + 160) = v9;
  if (!v9) {
    return FigSignalErrorAt();
  }
  dispatch_set_context(v9, (void *)a1);
  dispatch_source_set_event_handler_f(*(dispatch_source_t *)(a1 + 160), (dispatch_function_t)figPlaybackBossReachedEndWithContext);
  dispatch_resume(*(dispatch_object_t *)(a1 + 160));
  uint64_t result = CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(a1 + 112), *(dispatch_source_t *)(a1 + 160));
  if (!result)
  {
    unsigned int v5 = *(NSObject **)(a1 + 160);
LABEL_4:
    long long v6 = *(_OWORD *)&a2->value;
    *(void *)(a1 + 328) = a2->epoch;
    *(_OWORD *)(a1 + 312) = v6;
    long long v7 = *(OpaqueCMTimebase **)(a1 + 112);
    CMTime time = *a2;
    return CMTimebaseSetTimerDispatchSourceNextFireTime(v7, v5, &time, 1u);
  }
  return result;
}

void bossConfigureRatePlan(int a1, uint64_t a2, float *a3, uint64_t a4, float a5)
{
  int v7 = *(unsigned __int8 *)a3;
  if (*(unsigned char *)a3) {
    float v8 = 2.1;
  }
  else {
    float v8 = a3[2];
  }
  float v9 = fabs(a5);
  *(_WORD *)(a4 + 8) = 0;
  if (!a1)
  {
    *(float *)a4 = a5;
    *(float *)(a4 + 4) = v9;
    goto LABEL_22;
  }
  if (*(unsigned char *)a2 && *(float *)(a2 + 4) > a5 || *(unsigned char *)(a2 + 1) && *(float *)(a2 + 8) < a5) {
    goto LABEL_9;
  }
  if (v8 < v9)
  {
    if ((getPlaybackBossSnippetRate_preferencesChecked & 1) == 0)
    {
      CFNumberRef v10 = (const __CFNumber *)CFPreferencesCopyAppValue(@"snippet_rate", @"com.apple.coremedia");
      getPlaybackBossSnippetRate_preferencesChecked = 1;
      if (v10)
      {
        CFNumberRef v11 = v10;
        CFTypeID v12 = CFGetTypeID(v10);
        if (v12 == CFNumberGetTypeID()) {
          CFNumberGetValue(v11, kCFNumberFloat32Type, &getPlaybackBossSnippetRate_playbackBossSnippetRate);
        }
        CFRelease(v11);
      }
    }
    *(_DWORD *)(a4 + 4) = getPlaybackBossSnippetRate_playbackBossSnippetRate;
    goto LABEL_20;
  }
  if (a5 == 0.0)
  {
    *(_DWORD *)(a4 + 4) = 1065353216;
LABEL_20:
    *(float *)a4 = a5;
LABEL_21:
    *(unsigned char *)(a4 + 8) = 1;
    goto LABEL_22;
  }
  if (v7)
  {
    FPSupport_ConfigSnapRateForLQZL((float *)(a4 + 4), (float *)a4, a5);
  }
  else
  {
    if (a3[1] > v9)
    {
LABEL_9:
      *(unsigned char *)(a4 + 9) = 1;
      *(_DWORD *)(a4 + 4) = 1065353216;
      *(float *)a4 = a5;
      goto LABEL_22;
    }
    *(float *)a4 = a5;
    *(float *)(a4 + 4) = v9;
  }
  if (a5 <= 0.0) {
    goto LABEL_21;
  }
LABEL_22:
  if (dword_1E9350D98)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

uint64_t bossCheckTimeWithEndTimes(uint64_t a1, CMTime *a2, uint64_t a3, float a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if ((a2->flags & 0x1D) != 1 || a4 == 0.0) {
    return 0;
  }
  if (a4 > 0.0)
  {
    if ((*(_DWORD *)(a1 + 180) & 0x1D) == 1)
    {
      int v7 = (long long *)(a1 + 168);
      CMTime time1 = *a2;
      CMTime time2 = *(CMTime *)(a1 + 168);
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
      {
        if (dword_1E9350D98) {
          goto LABEL_12;
        }
        goto LABEL_13;
      }
    }
    return 0;
  }
  if ((*(_DWORD *)(a1 + 300) & 0x1D) != 1) {
    return 0;
  }
  int v7 = (long long *)(a1 + 288);
  CMTime time1 = *a2;
  CMTime time2 = *(CMTime *)(a1 + 288);
  if (CMTimeCompare(&time1, &time2) > 0) {
    return 0;
  }
  if (dword_1E9350D98)
  {
LABEL_12:
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_13:
  if (a3)
  {
    long long v9 = *v7;
    *(void *)(a3 + 16) = *((void *)v7 + 2);
    *(_OWORD *)a3 = v9;
  }
  if (dword_1E9350D98)
  {
    CFNumberRef v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v11 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 312) = *MEMORY[0x1E4F1F9F8];
  *(void *)(a1 + 328) = *(void *)(v11 + 16);
  CMTimebaseSetTimerDispatchSourceToFireImmediately(*(CMTimebaseRef *)(a1 + 112), *(dispatch_source_t *)(a1 + 160));
  return 1;
}

uint64_t figPlaybackBossStartPrerollAndSetPlayState(uint64_t a1, CMTime *a2, uint64_t a3, __int16 a4, int a5, int a6, CMTime *a7, long long *a8, const void *a9)
{
  int v11 = a6;
  uint64_t v12 = a3;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  float v15 = *(float *)&a3;
  BOOL v46 = (*((_DWORD *)a8 + 3) & 0x1D) == 1;
  if (dword_1E9350D98)
  {
    unsigned int v50 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v11 = a6;
    uint64_t v12 = a3;
  }
  uint64_t v18 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    CMTime time = *a7;
    CMTimeGetSeconds(&time);
    kdebug_trace();
    if (*v18 == 1)
    {
      strncpy((char *)&time, (const char *)(a1 + 841), 8uLL);
      kdebug_trace();
    }
  }
  ++*(_DWORD *)(a1 + 640);
  HostTimeClock = CMClockGetHostTimeClock();
  CMClockGetTime(&time, HostTimeClock);
  *(CMTime *)(a1 + 616) = time;
  uint64_t v20 = *(const void **)(a1 + 416);
  *(void *)(a1 + 416) = a9;
  if (a9) {
    CFRetain(a9);
  }
  if (v20) {
    CFRelease(v20);
  }
  *(_DWORD *)(a1 + 424) = v11;
  long long v21 = *(_OWORD *)&a7->value;
  *(void *)(a1 + 808) = a7->epoch;
  *(_OWORD *)(a1 + 792) = v21;
  long long v22 = *a8;
  *(void *)(a1 + 832) = *((void *)a8 + 2);
  *(_OWORD *)(a1 + 816) = v22;
  *(_DWORD *)(a1 + 504) = v12;
  *(unsigned char *)(a1 + 106) = 0;
  if ((a2->flags & 0x1D) == 1)
  {
    long long v23 = *(_OWORD *)&a2->value;
    *(void *)(a1 + 460) = a2->epoch;
    *(_OWORD *)(a1 + 444) = v23;
  }
  else if ((a7->flags & 0x1D) == 1)
  {
    long long v24 = *(_OWORD *)&a7->value;
    a2->CMTimeEpoch epoch = a7->epoch;
    *(_OWORD *)&a2->CMTimeValue value = v24;
  }
  else
  {
    CMTimebaseGetTime(&time, *(CMTimebaseRef *)(a1 + 112));
    *a2 = time;
  }
  long long v25 = *(_OWORD *)&a2->value;
  *(void *)(a1 + 524) = a2->epoch;
  *(_OWORD *)(a1 + 508) = v25;
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    uint64_t v26 = v12;
    int v27 = v11;
    unsigned int v50 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    long long v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v29 = v50;
    if (os_log_type_enabled(v28, type)) {
      unsigned int v30 = v29;
    }
    else {
      unsigned int v30 = v29 & 0xFFFFFFFE;
    }
    if (v30)
    {
      LODWORD(v51.value) = 136315394;
      *(CMTimeValue *)((char *)&v51.value + 4) = (CMTimeValue)"figPlaybackBossStartPrerollAndSetPlayState";
      LOWORD(v51.flags) = 2048;
      *(void *)((char *)&v51.flags + 2) = a1;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v11 = v27;
    uint64_t v12 = v26;
  }
  uint64_t v31 = *(void *)(a1 + 80);
  bossBroadcastPrerollRateToRenderPipelines(a1, 0, v15);
  bossBumpCurrentMasterOrder(a1);
  uint64_t v32 = *(void *)(a1 + 80);
  CMTime time = *a2;
  uint64_t v33 = bossSetMentorModesForTimeAndRate(a1, 0, v32, &time, v12, a4, a5, v46);
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  if (v11 == 1886151033)
  {
    float v34 = *(float *)(a1 + 432);
    float v35 = *(float *)(a1 + 436);
    CMTime time = *a7;
    CMTime v51 = *(CMTime *)a8;
    uint64_t started = bossStartTimebaseAndAudioContext(a1, (long long *)&time.value, &v51, v34, v35);
    if (started)
    {
      uint64_t v33 = started;
      *(_DWORD *)(a1 + 424) = 1885435251;
    }
    else
    {
      *(_DWORD *)(a1 + 424) = 1886151033;
      ++*(_DWORD *)(a1 + 712);
      ++*(_DWORD *)(a1 + 720);
      uint64_t v40 = CMClockGetHostTimeClock();
      CMClockGetTime(&time, v40);
      *(CMTime *)(a1 + 656) = time;
      uint64_t v41 = *(OpaqueCMTimebase **)(a1 + 112);
      if (v41)
      {
        CMTimebaseGetTime(&time, v41);
        uint64_t v33 = 0;
        *(CMTime *)(a1 + 688) = time;
      }
      else
      {
        return 0;
      }
    }
  }
  else if (!v31)
  {
    if (dword_1E9350D98)
    {
      unsigned int v50 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v38 = v50;
      if (os_log_type_enabled(v37, type)) {
        unsigned int v39 = v38;
      }
      else {
        unsigned int v39 = v38 & 0xFFFFFFFE;
      }
      if (v39)
      {
        LODWORD(v51.value) = 136315650;
        *(CMTimeValue *)((char *)&v51.value + 4) = (CMTimeValue)"figPlaybackBossStartPrerollAndSetPlayState";
        LOWORD(v51.flags) = 2048;
        *(void *)((char *)&v51.flags + 2) = a1;
        HIWORD(v51.epoch) = 2082;
        uint64_t v52 = a1 + 841;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v42 = malloc_type_calloc(1uLL, 0x10uLL, 0xE0040E685C293uLL);
    void *v42 = CFRetain((CFTypeRef)a1);
    CFTypeRef v43 = *(CFTypeRef *)(a1 + 536);
    if (v43) {
      CFTypeRef v43 = CFRetain(v43);
    }
    v42[1] = v43;
    dispatch_async_f(*(dispatch_queue_t *)(a1 + 32), v42, (dispatch_function_t)figPlaybackBoss_AllMentorsPrerollCompleteWithContext);
  }
  return v33;
}

uint64_t bossSetMentorModesForTimeAndRate(uint64_t a1, CFIndex a2, uint64_t a3, CMTime *a4, uint64_t a5, __int16 a6, int a7, int a8)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  if (*(float *)&a5 == 0.0)
  {
    CMTime time = *a4;
    return bossSetMentorModesToScrub(a1, a2, a3, &time, 0, 0);
  }
  float v14 = *((float *)&a5 + 1);
  if (*(float *)&a5 > 0.0)
  {
    CMTime time = *a4;
    CMTime lhs = *(CMTime *)(a1 + 168);
    return bossSetMentorModesToForwardPlayback(a1, a2, a3, &time, &lhs, HIBYTE(a6), a6, a7, *(float *)&a5, *((float *)&a5 + 1), 0, a8, 1);
  }
  float v17 = -*(float *)&a5;
  *(_OWORD *)&v38.CMTimeValue value = *(_OWORD *)&a4->value;
  v38.CMTimeEpoch epoch = a4->epoch;
  *(_OWORD *)&v37.CMTimeValue value = *(_OWORD *)(a1 + 288);
  v37.CMTimeEpoch epoch = *(void *)(a1 + 304);
  if (dword_1E9350D98)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  bossBumpEveryTrackCurrentOrder(a1, a2, a3, 3);
  *(unsigned char *)(a1 + 600) = 0;
  uint64_t v19 = *(void *)(a1 + 592);
  if (v19)
  {
    int v20 = *(_DWORD *)(a1 + 544);
    CMTime time = v38;
    CMTime lhs = v37;
    uint64_t v15 = FigVideoCompositionProcessorRequestPreroll(v19, (long long *)&time.value, (long long *)&lhs.value, v20, -1);
    if (!v15) {
      *(unsigned char *)(a1 + 600) = 1;
    }
    uint64_t v21 = *(void *)(a1 + 592);
    int v22 = *(_DWORD *)(a1 + 544);
    CMTime time = v38;
    CMTime lhs = v37;
    FigVideoCompositionProcessorSetPlaybackTimeRange(v21, &time, (uint64_t)&lhs, v22, -1);
  }
  else
  {
    uint64_t v15 = 0;
  }
  if (a2 < FigCFRangeGetLimit())
  {
    int v23 = a7;
    int v24 = HIBYTE(a6);
    if ((_BYTE)a6) {
      float v25 = v17 / v14;
    }
    else {
      float v25 = 1.0;
    }
    CFIndex v26 = a2;
    do
    {
      CFNumberRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v26);
      uint64_t v28 = *((void *)ValueAtIndex + 20);
      if (v28) {
        bossSetUpSnippetPlaybackForRate(a1, (uint64_t)ValueAtIndex, v28, 0, v25);
      }
      if (*((void *)ValueAtIndex + 24))
      {
        unsigned int v29 = bossCopyOptionsDictionaryForMentors(a1, v23, *((const void **)ValueAtIndex + 27), *((const void **)ValueAtIndex + 28), *((const void **)ValueAtIndex + 29), *((const void **)ValueAtIndex + 30), 0, a8, v17, 1, 0, *((_DWORD *)ValueAtIndex + 18) == 1986618469, *((_DWORD *)ValueAtIndex + 86), ValueAtIndex[399], 0, 0);
        unsigned int v30 = (const void *)bossCopyRenderPipelineCachedVideoFrames(a1, *((void *)ValueAtIndex + 10));
        if (v24 && *((_DWORD *)ValueAtIndex + 18) == 1936684398)
        {
          unsigned int v31 = EditMentorSetModeToEmptyEdit(*((void *)ValueAtIndex + 24), 0, v29, 0, *((const void **)ValueAtIndex + 25));
        }
        else
        {
          if (ValueAtIndex[400])
          {
            memset(&time, 0, sizeof(time));
            CMTime lhs = v38;
            CMTime rhs = *(CMTime *)(ValueAtIndex + 428);
            CMTimeAdd(&time, &lhs, &rhs);
            memset(&lhs, 0, sizeof(lhs));
            CMTime rhs = v37;
            CMTime type = *(CMTime *)(ValueAtIndex + 404);
            CMTimeSubtract(&lhs, &rhs, &type);
            uint64_t v32 = *((void *)ValueAtIndex + 24);
            uint64_t v33 = (const void *)*((void *)ValueAtIndex + 25);
            CMTime rhs = time;
            CMTime type = lhs;
            p_CMTime rhs = (long long *)&rhs;
            p_CMTime type = &type;
          }
          else
          {
            uint64_t v32 = *((void *)ValueAtIndex + 24);
            uint64_t v33 = (const void *)*((void *)ValueAtIndex + 25);
            CMTime time = v38;
            CMTime lhs = v37;
            p_CMTime rhs = (long long *)&time;
            p_CMTime type = &lhs;
          }
          unsigned int v31 = EditMentorSetModeToReversePlayback(v32, p_rhs, (long long *)&p_type->value, v29, v30, 0, v33);
        }
        if (v15) {
          uint64_t v15 = v15;
        }
        else {
          uint64_t v15 = v31;
        }
        if (v29) {
          CFRelease(v29);
        }
        if (v30) {
          CFRelease(v30);
        }
      }
      ++v26;
    }
    while (v26 < FigCFRangeGetLimit());
  }
  return v15;
}

uint64_t bossSetMentorModesToForwardPlayback(uint64_t a1, CFIndex a2, uint64_t a3, CMTime *a4, CMTime *a5, int a6, int a7, int a8, float a9, float a10, char a11, unsigned __int8 a12, char a13)
{
  long long v16 = a4;
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  if (dword_1E9350D98)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(type.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    long long v16 = a4;
  }
  bossBumpEveryTrackCurrentOrder(a1, a2, a3, 3);
  *(unsigned char *)(a1 + 600) = 0;
  uint64_t v21 = (uint64_t *)MEMORY[0x1E4F1CF80];
  if (!*(void *)(a1 + 592)) {
    goto LABEL_13;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    FigSignalErrorAt();
LABEL_13:
    uint64_t v30 = 0;
    goto LABEL_14;
  }
  CFArrayRef v23 = Mutable;
  uint64_t Limit = FigCFRangeGetLimit();
  if (a2 < Limit)
  {
    uint64_t v25 = Limit;
    CFIndex v26 = a2;
    do
    {
      CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v26);
      FigCFArrayAppendInt32();
      ++v26;
    }
    while (v25 != v26);
  }
  HasAnySourceTracksInArraCGFloat y = FigVideoCompositionProcessorHasAnySourceTracksInArray(*(void *)(a1 + 592), v23);
  CFRelease(v23);
  if (!HasAnySourceTracksInArray) {
    goto LABEL_13;
  }
  uint64_t v28 = *(void *)(a1 + 592);
  int v29 = *(_DWORD *)(a1 + 544);
  CMTime time = *v16;
  CMTime lhs = *a5;
  uint64_t v30 = FigVideoCompositionProcessorRequestPreroll(v28, (long long *)&time.value, (long long *)&lhs.value, v29, 1);
  if (!v30) {
    *(unsigned char *)(a1 + 600) = 1;
  }
  uint64_t v31 = *(void *)(a1 + 592);
  int v32 = *(_DWORD *)(a1 + 544);
  CMTime time = *v16;
  CMTime lhs = *a5;
  FigVideoCompositionProcessorSetPlaybackTimeRange(v31, &time, (uint64_t)&lhs, v32, 1);
LABEL_14:
  if (a2 < FigCFRangeGetLimit())
  {
    uint64_t v56 = *v21;
    if (a7) {
      float v33 = a9 / a10;
    }
    else {
      float v33 = 1.0;
    }
    CFIndex v34 = a2;
    while (1)
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v34);
      uint64_t v36 = (uint64_t)ValueAtIndex;
      if (*(_DWORD *)(a1 + 424) != 1920298606) {
        goto LABEL_27;
      }
      time.CMTimeValue value = 0;
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(ValueAtIndex[10]);
      uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v39 = v38 ? v38 : 0;
      uint64_t v40 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTime *))(v39 + 48);
      if (!v40) {
        goto LABEL_27;
      }
      int v41 = v40(FigBaseObject, @"SourceSampleBufferQueue", v56, &time);
      CMTimeValue value = (const void *)time.value;
      if (!v41) {
        break;
      }
      if (time.value) {
        goto LABEL_26;
      }
LABEL_27:
      uint64_t v43 = *(void *)(v36 + 160);
      if (v43) {
        bossSetUpSnippetPlaybackForRate(a1, v36, v43, 1, v33);
      }
      char v44 = *(_DWORD *)(v36 + 72) == 1986618469;
      if (*(void *)(v36 + 192))
      {
        char v45 = bossTrackShouldRemoveExcessFramesInRefreshIntervals(a1, v36, a9);
        if (a11) {
          BOOL v46 = 1;
        }
        else {
          BOOL v46 = *(unsigned char *)(v36 + 248) != 0;
        }
        CFNumberRef v47 = bossCopyOptionsDictionaryForMentors(a1, a8, *(const void **)(v36 + 216), *(const void **)(v36 + 224), *(const void **)(v36 + 232), *(const void **)(v36 + 240), v46, a12, a9, 1, a13, v44, *(_DWORD *)(v36 + 344), *(unsigned char *)(v36 + 399), 0, v45);
        uint64_t v48 = (const void *)bossCopyRenderPipelineCachedVideoFrames(a1, *(void *)(v36 + 80));
        if (a6 && *(_DWORD *)(v36 + 72) == 1936684398)
        {
          unsigned int v49 = EditMentorSetModeToEmptyEdit(*(void *)(v36 + 192), 0, v47, 0, *(const void **)(v36 + 200));
        }
        else
        {
          if (*(unsigned char *)(v36 + 400))
          {
            memset(&time, 0, sizeof(time));
            CMTime lhs = *a4;
            CMTime rhs = *(CMTime *)(v36 + 404);
            CMTimeSubtract(&time, &lhs, &rhs);
            memset(&lhs, 0, sizeof(lhs));
            CMTime rhs = *a5;
            CMTime type = *(CMTime *)(v36 + 428);
            CMTimeAdd(&lhs, &rhs, &type);
            uint64_t v50 = *(void *)(v36 + 192);
            CMTime v51 = *(const void **)(v36 + 200);
            CMTime rhs = time;
            CMTime type = lhs;
            p_CMTime rhs = &rhs;
            p_CMTime type = &type;
          }
          else
          {
            uint64_t v50 = *(void *)(v36 + 192);
            CMTime v51 = *(const void **)(v36 + 200);
            CMTime time = *a4;
            CMTime lhs = *a5;
            p_CMTime rhs = &time;
            p_CMTime type = &lhs;
          }
          unsigned int v49 = EditMentorSetModeToForwardPlayback(v50, (uint64_t)p_rhs, (long long *)&p_type->value, v47, v48, 0, v51);
        }
        if (v30) {
          uint64_t v30 = v30;
        }
        else {
          uint64_t v30 = v49;
        }
        if (v47) {
          CFRelease(v47);
        }
        if (v48) {
          CFRelease(v48);
        }
      }
      if (++v34 >= FigCFRangeGetLimit()) {
        return v30;
      }
    }
    CMBufferQueueReset((CMBufferQueueRef)time.value);
    CMTimeValue value = (const void *)time.value;
    if (!time.value) {
      goto LABEL_27;
    }
LABEL_26:
    CFRelease(value);
    goto LABEL_27;
  }
  return v30;
}

uint64_t bossSetUpSnippetPlaybackForRate(uint64_t a1, uint64_t a2, uint64_t a3, char a4, float a5)
{
  CMTime v17 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v16 = v17;
  if (a5 == 1.0) {
    goto LABEL_8;
  }
  double v9 = a5;
  if ((getPlaybackBossSnippetDuration_preferencesChecked & 1) == 0)
  {
    CFPropertyListRef v10 = CFPreferencesCopyAppValue(@"snippet_duration", @"com.apple.coremedia");
    getPlaybackBossSnippetDuration_preferencesChecked = 1;
    CMTimeMake(&time, 1, 1);
    *(CMTime *)getPlaybackBossSnippetDuration_playbackBossSnippetuint64_t Duration = time;
    if (v10)
    {
      CFTypeID v11 = CFGetTypeID(v10);
      if (v11 == CFNumberGetTypeID())
      {
        seconds.CMTimeValue value = 0x3FF0000000000000;
        CFNumberGetValue((CFNumberRef)v10, kCFNumberFloat64Type, &seconds);
        CMTimeMakeWithSeconds(&time, *(Float64 *)&seconds.value, 1000);
        *(CMTime *)getPlaybackBossSnippetDuration_playbackBossSnippetuint64_t Duration = time;
      }
      CFRelease(v10);
    }
  }
  CMTime v17 = *(CMTime *)getPlaybackBossSnippetDuration_playbackBossSnippetDuration;
  CMTime time = *(CMTime *)getPlaybackBossSnippetDuration_playbackBossSnippetDuration;
  CMTimeMultiplyByFloat64(&v16, &time, v9);
  if (*(unsigned char *)(a2 + 168)) {
    goto LABEL_8;
  }
  uint64_t v13 = *(void *)(a2 + 160);
  bossGetContentDuration(a1, (uint64_t)v15);
  uint64_t result = FigSnippetEditCursorServiceSetTrackDuration(v13, (uint64_t)v15);
  if (!result)
  {
    *(unsigned char *)(a2 + 168) = 1;
LABEL_8:
    CMTime time = v17;
    CMTime seconds = v16;
    return FigSnippetEditCursorServiceSetSnippetDurationAndStep(a3, &time, &seconds, a4);
  }
  return result;
}

CMTime *snippet_updateSnippetCount(CMTime *result)
{
  uint64_t v1 = result;
  if ((result[2].flags & 0x1D) == 1)
  {
    memset(&v5, 0, sizeof(v5));
    int32_t timescale = result[2].timescale;
    CMTime v4 = *result;
    uint64_t result = CMTimeConvertScale(&v5, &v4, timescale, kCMTimeRoundingMethod_RoundAwayFromZero);
    CMTimeValue v3 = (v5.value + v1[2].value - 1) / v1[2].value;
  }
  else
  {
    CMTimeValue v3 = 1;
  }
  *(void *)&v1[3].int32_t timescale = v3;
  return result;
}

uint64_t EditMentorSetModeToForwardPlayback(uint64_t a1, uint64_t a2, long long *a3, const void *a4, const void *a5, const void *a6, const void *a7)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  char v24 = 1;
  if (dword_1E9350D58)
  {
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  editMentorStartNewParentOrder(a1, a4, a7);
  *(_DWORD *)(a1 + 320) = 2;
  long long v14 = *(_OWORD *)a2;
  *(void *)(a1 + 636) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 620) = v14;
  long long v15 = *a3;
  *(void *)(a1 + 660) = *((void *)a3 + 2);
  *(_OWORD *)(a1 + 644) = v15;
  CMTime v16 = *(const void **)(a1 + 672);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 672) = 0;
  }
  long long v29 = 0u;
  memset(time, 0, sizeof(time));
  long long v17 = *(_OWORD *)(a1 + 636);
  long long v25 = *(_OWORD *)(a1 + 620);
  long long v26 = v17;
  long long v27 = *(_OWORD *)(a1 + 652);
  if (!editMentorSelectFirstEditSegmentForParentRange(a1, (uint64_t)&v25, &v24, (uint64_t)time))
  {
    long long v25 = *(_OWORD *)a2;
    *(void *)&long long v26 = *(void *)(a2 + 16);
    uint64_t v18 = a1;
    int v19 = 1;
    uint64_t v20 = (uint64_t)a7;
    uint64_t v21 = a6;
    return editMentorSetChildMentorModeToEmptyEdit(v18, 0, (uint64_t)&v25, v19, v20, v21);
  }
  *(void *)(a1 + 672) = a6;
  if (a6) {
    CFRetain(a6);
  }
  if (v24)
  {
    long long v25 = *(_OWORD *)a2;
    *(void *)&long long v26 = *(void *)(a2 + 16);
    uint64_t v18 = a1;
    int v19 = 0;
    uint64_t v20 = (uint64_t)a7;
    uint64_t v21 = 0;
    return editMentorSetChildMentorModeToEmptyEdit(v18, 0, (uint64_t)&v25, v19, v20, v21);
  }
  long long v25 = time[0];
  long long v26 = time[1];
  long long v27 = v29;
  return editMentorSetChildMentorModeToForwardPlayback(a1, &v25, a5);
}

uint64_t editMentorSelectFirstEditSegmentForParentRange(uint64_t a1, uint64_t a2, unsigned char *a3, uint64_t a4)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  float v8 = (unsigned char *)(a1 + 560);
  *(_DWORD *)(a1 + 563) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  MEMORY[0x19970E910](*(void *)(a1 + 344));
  double v9 = (uint64_t *)(a1 + 336);
  CFPropertyListRef v10 = *(const void **)(a1 + 336);
  if (v10)
  {
    CFRelease(v10);
    uint64_t *v9 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 136);
  if (!v11)
  {
    long long v15 = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a1 + 400) = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a1 + 416) = v15;
    long long v16 = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a1 + 448) = v16;
    long long v17 = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(a1 + 368) = *(_OWORD *)(a1 + 144);
    *(_OWORD *)(a1 + 384) = v17;
    goto LABEL_10;
  }
  if (*(_DWORD *)(a1 + 320) == 3) {
    uint64_t v12 = a2 + 24;
  }
  else {
    uint64_t v12 = a2;
  }
  *(_OWORD *)CMTime time2 = *(_OWORD *)v12;
  *(void *)&time2[16] = *(void *)(v12 + 16);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  CFArrayRef v23 = *(unsigned int (**)(uint64_t, CMTimeRange *, uint64_t))(v14 + 8);
  if (v23)
  {
    *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)time2;
    time1.start.CMTimeEpoch epoch = *(void *)&time2[16];
    if (!v23(v11, &time1, a1 + 336))
    {
      uint64_t v24 = *(void *)(a1 + 336);
      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v26 = v25 ? v25 : 0;
      uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t))(v26 + 24);
      if (v39)
      {
        if (!v39(v24, a1 + 368))
        {
          if (*(_DWORD *)(a1 + 320) != 3) {
            goto LABEL_41;
          }
          *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)(a1 + 416);
          time1.start.CMTimeEpoch epoch = *(void *)(a1 + 432);
          CMTime v51 = *(CMTime *)(a2 + 24);
          if (CMTimeCompare(&time1.start, &v51)) {
            goto LABEL_41;
          }
          uint64_t v41 = *v9;
          uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v42) {
            uint64_t v43 = v42;
          }
          else {
            uint64_t v43 = 0;
          }
          char v44 = *(void (**)(uint64_t, uint64_t))(v43 + 16);
          if (v44) {
            v44(v41, 0xFFFFFFFFLL);
          }
          uint64_t v45 = *v9;
          uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v47 = v46 ? v46 : 0;
          uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t))(v47 + 24);
          if (v48)
          {
            if (!v48(v45, a1 + 368))
            {
LABEL_41:
              long long v40 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)a2;
              *(_OWORD *)&time1.start.CMTimeEpoch epoch = v40;
              *(_OWORD *)&time1.duration.int32_t timescale = *(_OWORD *)(a2 + 32);
              if (editMentorConsolidateCurrentEdit(a1, &time1)) {
                goto LABEL_56;
              }
LABEL_10:
              MEMORY[0x19970E930](*(void *)(a1 + 344));
              long long v18 = *(_OWORD *)(a1 + 416);
              *(_OWORD *)&time1.duration.int32_t timescale = *(_OWORD *)(a1 + 400);
              long long v53 = v18;
              long long v19 = *(_OWORD *)(a1 + 448);
              long long v54 = *(_OWORD *)(a1 + 432);
              long long v55 = v19;
              long long v20 = *(_OWORD *)(a1 + 384);
              *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)(a1 + 368);
              *(_OWORD *)&time1.start.CMTimeEpoch epoch = v20;
              long long v21 = *(_OWORD *)(a2 + 16);
              *(_OWORD *)CMTime time2 = *(_OWORD *)a2;
              *(_OWORD *)&time2[16] = v21;
              long long v57 = *(_OWORD *)(a2 + 32);
              uint64_t result = editMentorDoesEditSegmentIntersectTrackRange((uint64_t)&time1, (uint64_t)time2);
              if (!result)
              {
                *(unsigned char *)(a1 + 562) = 1;
                return result;
              }
              if (*(unsigned char *)(a1 + 380))
              {
                long long v27 = *(_OWORD *)(a2 + 16);
                *(_OWORD *)CMTime time2 = *(_OWORD *)a2;
                *(_OWORD *)&time2[16] = v27;
                long long v57 = *(_OWORD *)(a2 + 32);
                long long v28 = *(_OWORD *)(a1 + 416);
                *(_OWORD *)&time1.duration.int32_t timescale = *(_OWORD *)(a1 + 400);
                long long v53 = v28;
                long long v29 = *(_OWORD *)(a1 + 448);
                long long v54 = *(_OWORD *)(a1 + 432);
                long long v55 = v29;
                long long v30 = *(_OWORD *)(a1 + 384);
                *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)(a1 + 368);
                *(_OWORD *)&time1.start.CMTimeEpoch epoch = v30;
                editMentorIntersectTrackRangeWithEditSegmentAndMapToMediaRange(a1, (long long *)time2, (long long *)&time1.start.value, a4);
                editMentorUpdateChildMentorProperties(a1);
                *a3 = 0;
                *(unsigned char *)(a1 + 565) = editMentorCurrentEditIsLastOpenEndedEdit(a1);
              }
              else
              {
                *a3 = 1;
              }
              if (*(_DWORD *)(a1 + 320) == 2)
              {
                *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)a2;
                time1.start.CMTimeEpoch epoch = *(void *)(a2 + 16);
                *(_OWORD *)CMTime time2 = *(_OWORD *)(a1 + 416);
                *(void *)&time2[16] = *(void *)(a1 + 432);
                if (CMTimeCompare(&time1.start, (CMTime *)time2) < 0)
                {
                  if (dword_1E9350D58)
                  {
                    LODWORD(v51.value) = 0;
                    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int value = v51.value;
                    if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
                      unsigned int v33 = value;
                    }
                    else {
                      unsigned int v33 = value & 0xFFFFFFFE;
                    }
                    if (!v33) {
                      goto LABEL_43;
                    }
                    goto LABEL_34;
                  }
                  goto LABEL_44;
                }
              }
              else
              {
                long long v34 = *(_OWORD *)(a1 + 432);
                *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)(a1 + 416);
                *(_OWORD *)&time1.start.CMTimeEpoch epoch = v34;
                *(_OWORD *)&time1.duration.int32_t timescale = *(_OWORD *)(a1 + 448);
                CMTimeRangeGetEnd(&v49, &time1);
                *(_OWORD *)&time1.start.unsigned int value = *(_OWORD *)(a2 + 24);
                time1.start.CMTimeEpoch epoch = *(void *)(a2 + 40);
                if (CMTimeCompare(&time1.start, &v49) >= 1)
                {
                  if (dword_1E9350D58)
                  {
                    LODWORD(v51.value) = 0;
                    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                    float v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    unsigned int v36 = v51.value;
                    if (os_log_type_enabled(v35, type)) {
                      unsigned int v37 = v36;
                    }
                    else {
                      unsigned int v37 = v36 & 0xFFFFFFFE;
                    }
                    if (!v37) {
                      goto LABEL_43;
                    }
LABEL_34:
                    uint64_t v38 = *(void *)(a1 + 304);
                    *(_DWORD *)CMTime time2 = 136315650;
                    *(void *)&time2[4] = "editMentorSelectFirstEditSegmentForParentRange";
                    *(_WORD *)&time2[12] = 2048;
                    *(void *)&time2[14] = a1;
                    *(_WORD *)&time2[22] = 2114;
                    *(void *)&time2[24] = v38;
                    _os_log_send_and_compose_impl();
LABEL_43:
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
LABEL_44:
                  uint64_t result = 1;
                  *a3 = 1;
                  *float v8 = 1;
                  return result;
                }
              }
              return 1;
            }
          }
        }
      }
    }
  }
  FigSignalErrorAt();
LABEL_56:
  MEMORY[0x19970E930](*(void *)(a1 + 344));
  return 0;
}

void editMentorIntersectTrackRangeWithEditSegmentAndMapToMediaRange(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  if ((*((_DWORD *)a2 + 3) & 0x1D) == 1
    && (*(_OWORD *)&time1.start.unsigned int value = *a2,
        time1.start.CMTimeEpoch epoch = *((void *)a2 + 2),
        *(_OWORD *)&v16.start.unsigned int value = a3[3],
        v16.start.CMTimeEpoch epoch = *((void *)a3 + 8),
        CMTimeCompare(&time1.start, &v16.start) > 0))
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    memset(&time1, 0, sizeof(time1));
    *(_OWORD *)&v16.start.unsigned int value = *a2;
    v16.start.CMTimeEpoch epoch = *((void *)a2 + 2);
    editMentorSelectEditForTimeInConsolidatedEdit(a1, (uint64_t)&v16, 0, &time1);
    long long v8 = *a2;
    v20.CMTimeEpoch epoch = *((void *)a2 + 2);
    CMTimeRange v16 = time1;
    long long v17 = v24;
    long long v18 = v25;
    long long v19 = v26;
    *(_OWORD *)&v20.unsigned int value = v8;
    editMentorMapTrackTimeToMediaTimeUsingEditSegment(&v20, &v16.start, (uint64_t)&v21);
    *(_OWORD *)a4 = v21;
    *(void *)(a4 + 16) = v22;
  }
  else
  {
    long long v9 = *a3;
    *(void *)(a4 + 16) = *((void *)a3 + 2);
    *(_OWORD *)a4 = v9;
  }
  long long v10 = a3[4];
  *(_OWORD *)&time1.start.unsigned int value = a3[3];
  *(_OWORD *)&time1.start.CMTimeEpoch epoch = v10;
  *(_OWORD *)&time1.duration.int32_t timescale = a3[5];
  CMTimeRangeGetEnd(&v28, &time1);
  if ((*((_DWORD *)a2 + 9) & 0x1D) == 1
    && (time1.start = v28,
        long long v12 = *(long long *)((char *)a2 + 24),
        uint64_t v11 = (long long *)((char *)a2 + 24),
        *(_OWORD *)&v16.start.unsigned int value = v12,
        v16.start.CMTimeEpoch epoch = *((void *)v11 + 2),
        CMTimeCompare(&time1.start, &v16.start) > 0))
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v24 = 0u;
    memset(&time1, 0, sizeof(time1));
    *(_OWORD *)&v16.start.unsigned int value = *v11;
    v16.start.CMTimeEpoch epoch = *((void *)v11 + 2);
    editMentorSelectEditForTimeInConsolidatedEdit(a1, (uint64_t)&v16, 0, &time1);
    long long v13 = *v11;
    v20.CMTimeEpoch epoch = *((void *)v11 + 2);
    CMTimeRange v16 = time1;
    long long v17 = v24;
    long long v18 = v25;
    long long v19 = v26;
    *(_OWORD *)&v20.unsigned int value = v13;
    editMentorMapTrackTimeToMediaTimeUsingEditSegment(&v20, &v16.start, (uint64_t)&v21);
    *(_OWORD *)(a4 + 24) = v21;
    CMTimeEpoch epoch = v22;
  }
  else
  {
    long long v15 = a3[1];
    *(_OWORD *)&time1.start.unsigned int value = *a3;
    *(_OWORD *)&time1.start.CMTimeEpoch epoch = v15;
    *(_OWORD *)&time1.duration.int32_t timescale = a3[2];
    CMTimeRangeGetEnd(&v27, &time1);
    *(_OWORD *)(a4 + 24) = *(_OWORD *)&v27.value;
    CMTimeEpoch epoch = v27.epoch;
  }
  *(void *)(a4 + 40) = epoch;
}

uint64_t editMentorSetChildMentorModeToForwardPlayback(uint64_t a1, long long *a2, const void *a3)
{
  long long v19 = 0;
  long long v6 = (const void *)editMentorRetainCurrentChildOrderAndOptionsDictionary(a1, &v19);
  uint64_t v7 = *(void *)a1;
  if (*(void *)a1)
  {
    long long v17 = *a2;
    uint64_t v18 = *((void *)a2 + 2);
    long long v15 = *(long long *)((char *)a2 + 24);
    uint64_t v16 = *((void *)a2 + 5);
    uint64_t v8 = VideoMentorSetModeToForwardPlayback(v7, 0, (uint64_t)&v17, 0, &v15, v19, a3, 0, v6);
    goto LABEL_9;
  }
  uint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    long long v17 = *a2;
    uint64_t v18 = *((void *)a2 + 2);
    long long v15 = *(long long *)((char *)a2 + 24);
    uint64_t v16 = *((void *)a2 + 5);
    uint64_t v8 = AudioMentorSetModeToForwardPlayback(v9, 0, (uint64_t)&v17, 0, (uint64_t)&v15, v19, 0, v6);
    goto LABEL_9;
  }
  uint64_t v10 = *(void *)(a1 + 16);
  if (v10)
  {
    long long v17 = *a2;
    uint64_t v18 = *((void *)a2 + 2);
    long long v15 = *(long long *)((char *)a2 + 24);
    uint64_t v16 = *((void *)a2 + 5);
    uint64_t v8 = EditMentorSetModeToForwardPlayback(v10, &v17, &v15, v19, a3, 0, v6);
    goto LABEL_9;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v11 = *(uint64_t (**)(uint64_t, long long *, long long *, __CFDictionary *, const void *, void, const void *))(a1 + 80);
    uint64_t v12 = *(void *)(a1 + 40);
    long long v17 = *a2;
    uint64_t v18 = *((void *)a2 + 2);
    long long v15 = *(long long *)((char *)a2 + 24);
    uint64_t v16 = *((void *)a2 + 5);
    uint64_t v8 = v11(v12, &v17, &v15, v19, a3, 0, v6);
LABEL_9:
    uint64_t v13 = v8;
    if (!v6) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v13 = 0;
  if (v6) {
LABEL_10:
  }
    CFRelease(v6);
LABEL_11:
  if (v19) {
    CFRelease(v19);
  }
  return v13;
}

uint64_t AudioMentorSetModeToForwardPlayback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const __CFDictionary *a6, const void *a7, const void *a8)
{
  long long v11 = *(_OWORD *)a3;
  uint64_t v12 = *(void *)(a3 + 16);
  long long v9 = *(_OWORD *)a5;
  uint64_t v10 = *(void *)(a5 + 16);
  return audioMentorSetModeToForwardOrReversePlayback(a1, a2, &v11, a4, &v9, a6, a7, a8, 1);
}

uint64_t audioMentorSetModeToForwardOrReversePlayback(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, long long *a5, const __CFDictionary *a6, const void *a7, const void *a8, int a9)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  CFTypeRef v48 = 0;
  CFTypeRef v49 = 0;
  PolicyFromPrerollPolicCGFloat y = audioMentorGetInitialReadPolicyFromPrerollPolicy((uint64_t)a6);
  unsigned int v13 = audioMentorGetModeChangePolicy(a6);
  valuePtr[0] = 0;
  if (a6 && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a6, @"DefaultGradualDecoderRefresh")) != 0)
  {
    CFNumberGetValue(Value, kCFNumberSInt32Type, valuePtr);
    int v41 = valuePtr[0];
  }
  else
  {
    int v41 = 0;
  }
  valuePtr[0] = 0;
  FigCFDictionaryGetInt32IfPresent();
  int v40 = valuePtr[0];
  valuePtr[0] = 0;
  long long v15 = (CMTime *)MEMORY[0x1E4F1F9F8];
  if (a6)
  {
    CFNumberRef v16 = (const __CFNumber *)CFDictionaryGetValue(a6, @"PostDecoderDrain");
    if (v16)
    {
      CFNumberGetValue(v16, kCFNumberSInt32Type, valuePtr);
      int v17 = valuePtr[0];
    }
    else
    {
      int v17 = 0;
    }
    CMTime v47 = *v15;
    CFDictionaryRef v19 = (const __CFDictionary *)CFDictionaryGetValue(a6, @"TrimDurationAtEOF");
    if (v19) {
      CMTimeMakeFromDictionary(&v47, v19);
    }
    CMTime v20 = CFDictionaryGetValue(a6, @"CursorAccuracy");
    BOOL v18 = v20 && CFEqual(@"Exact", v20);
    long long v21 = CFDictionaryGetValue(a6, @"TrimSampleBufferDurations");
    if (v21 && CFEqual((CFTypeRef)*MEMORY[0x1E4F1CFC8], v21))
    {
      char v22 = 0;
      goto LABEL_20;
    }
  }
  else
  {
    BOOL v18 = 0;
    int v17 = 0;
    CMTime v47 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  }
  char v22 = 1;
LABEL_20:
  if (a9 == 1)
  {
    LOBYTE(valuePtr[0]) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    char v23 = valuePtr[0];
    if (v13) {
      goto LABEL_22;
    }
  }
  else
  {
    char v23 = 0;
    if (v13)
    {
LABEL_22:
      BOOL ShouldSynchronouslyResetOutput = audioMentorShouldSynchronouslyResetOutput(a6);
      if (!a2) {
        goto LABEL_31;
      }
      goto LABEL_26;
    }
  }
  BOOL ShouldSynchronouslyResetOutput = 0;
  if (!a2) {
    goto LABEL_31;
  }
LABEL_26:
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  CMTime v27 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v26 + 8);
  if (!v27) {
    goto LABEL_54;
  }
  uint64_t v28 = v27(a2, &v49);
  if (v28) {
    goto LABEL_55;
  }
LABEL_31:
  if (a4)
  {
    uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v29) {
      uint64_t v30 = v29;
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v31 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v30 + 8);
    if (v31)
    {
      uint64_t v28 = v31(a4, &v48);
      if (!v28) {
        goto LABEL_37;
      }
LABEL_55:
      FigSignalErrorAt();
      goto LABEL_57;
    }
LABEL_54:
    uint64_t v28 = 4294954514;
    goto LABEL_55;
  }
LABEL_37:
  MEMORY[0x19970E910](*(void *)(a1 + 96));
  if (!*(unsigned char *)a1)
  {
    int v32 = *(const void **)(a1 + 128);
    if (v32) {
      CFRelease(v32);
    }
    *(void *)(a1 + 128) = v49;
    CFTypeRef v49 = 0;
    long long v33 = *a3;
    *(void *)(a1 + 152) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 136) = v33;
    long long v34 = *(const void **)(a1 + 160);
    if (v34) {
      CFRelease(v34);
    }
    *(void *)(a1 + 160) = v48;
    CFTypeRef v48 = 0;
    long long v35 = *a5;
    *(void *)(a1 + 184) = *((void *)a5 + 2);
    *(_OWORD *)(a1 + 168) = v35;
    *(_DWORD *)(a1 + 192) = PolicyFromPrerollPolicy;
    *(_DWORD *)(a1 + 196) = v13;
    *(_DWORD *)(a1 + 200) = v41;
    *(_DWORD *)(a1 + 204) = v40;
    *(_DWORD *)(a1 + 208) = v17;
    *(CMTime *)(a1 + 212) = v47;
    *(unsigned char *)(a1 + 236) = v18;
    *(unsigned char *)(a1 + 237) = v22;
    *(unsigned char *)(a1 + 238) = ShouldSynchronouslyResetOutput;
    *(unsigned char *)(a1 + 239) = v23;
    unsigned int v36 = *(const void **)(a1 + 248);
    if (v36) {
      CFRelease(v36);
    }
    *(void *)(a1 + 248) = a7;
    if (a7) {
      CFRetain(a7);
    }
    unsigned int v37 = *(const void **)(a1 + 256);
    if (v37) {
      CFRelease(v37);
    }
    *(void *)(a1 + 256) = a8;
    if (a8) {
      CFRetain(a8);
    }
    *(_DWORD *)(a1 + 112) = a9;
    *(unsigned char *)(a1 + 116) = 1;
    FigMemoryBarrier();
  }
  MEMORY[0x19970E930](*(void *)(a1 + 96));
  FigSemaphoreSignal();
  if (ShouldSynchronouslyResetOutput && FigSemaphoreWaitRelative())
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v28 = 0;
LABEL_57:
  if (v49) {
    CFRelease(v49);
  }
  if (v48) {
    CFRelease(v48);
  }
  return v28;
}

CFDictionaryRef audioMentorGetModeChangePolicy(const __CFDictionary *result)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, @"ModeChangePolicy");
    if (result)
    {
      uint64_t v1 = result;
      if (CFEqual(result, @"PreservePreviousOutput"))
      {
        return 0;
      }
      else if (CFEqual(v1, @"CancelPreviousOutput"))
      {
        return (const __CFDictionary *)1;
      }
      else
      {
        return (const __CFDictionary *)(2 * (CFEqual(v1, @"RepurposeOrCancelPreviousOutput") != 0));
      }
    }
  }
  return result;
}

uint64_t audioMentorCreateCursorForPresentationTimeStamp(uint64_t a1, int a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (a2)
  {
    long long v15 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, long long *, uint64_t, void, void))(v7 + 8);
    if (v10)
    {
      long long v19 = v15;
      uint64_t v20 = v17;
      uint64_t v11 = v10(v5, &v19, a4, 0, 0);
      goto LABEL_12;
    }
  }
  else
  {
    long long v16 = *a3;
    uint64_t v18 = *((void *)a3 + 2);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t, void, void))(v9 + 16);
    if (v12)
    {
      long long v19 = v16;
      uint64_t v20 = v18;
      uint64_t v11 = v12(v5, &v19, 1, a4, 0, 0);
LABEL_12:
      uint64_t v13 = v11;
      if (!v11) {
        return v13;
      }
      goto LABEL_15;
    }
  }
  uint64_t v13 = 4294954514;
LABEL_15:
  FigSignalErrorAt();
  return v13;
}

uint64_t sbcbq_flush()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v1 = 17;
  if (!*((unsigned char *)DerivedStorage + 8)) {
    uint64_t v1 = 18;
  }
  MEMORY[0x199709540](DerivedStorage[v1], sbcbq_invalidateSampleBuffer, 0);
  if (!*((unsigned char *)DerivedStorage + 8)) {
    *((unsigned char *)DerivedStorage + 152) = 1;
  }
  MEMORY[0x19970E930](*DerivedStorage);
  return 0;
}

BOOL sbcbq_isQueueBelowLowWater()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = 136;
  if (!*(unsigned char *)(DerivedStorage + 8)) {
    uint64_t v2 = 144;
  }
  CMBufferQueueGetDuration(&v7, *(CMBufferQueueRef *)(DerivedStorage + v2));
  CMTime time1 = v7;
  CMTime v5 = *(CMTime *)(v1 + 48);
  if (CMTimeCompare(&time1, &v5) > 0) {
    return 0;
  }
  if (!*(void *)(v1 + 72)) {
    return 1;
  }
  uint64_t v4 = 136;
  if (!*(unsigned char *)(v1 + 8)) {
    uint64_t v4 = 144;
  }
  return CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(v1 + v4)) < *(void *)(v1 + 72);
}

BOOL sbcbq_isQueueAtOrAboveHighWater()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  CMTime v8 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t v2 = 136;
  if (!*(unsigned char *)(DerivedStorage + 8)) {
    uint64_t v2 = 144;
  }
  CMBufferQueueGetDuration(&v8, *(CMBufferQueueRef *)(DerivedStorage + v2));
  CMTime time1 = v8;
  long long v3 = *(_OWORD *)(v1 + 12);
  v6.CMTimeEpoch epoch = *(void *)(v1 + 28);
  *(_OWORD *)&v6.unsigned int value = v3;
  if ((CMTimeCompare(&time1, &v6) & 0x80000000) == 0) {
    return 1;
  }
  if (!*(void *)(v1 + 40)) {
    return 0;
  }
  uint64_t v5 = 136;
  if (!*(unsigned char *)(v1 + 8)) {
    uint64_t v5 = 144;
  }
  return CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(v1 + v5)) >= *(void *)(v1 + 40);
}

uint64_t locateChunk(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 80);
  uint64_t v7 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v7 + 432) != 1)
  {
    unsigned int v14 = *(_DWORD *)(a1 + 140);
    BOOL v15 = *(void *)(*(void *)a1 + 24) != 0;
    unsigned int v16 = *(_DWORD *)(a1 + 80);
    unsigned int v17 = v14;
    while (v17 > v16 || *(int *)(a1 + 144) * (uint64_t)*(int *)(a1 + 148) + (int)v17 <= (unint64_t)v16)
    {
      if (!v15) {
        goto LABEL_18;
      }
      int v18 = *(_DWORD *)(a1 + 144);
      uint64_t v19 = *(int *)(a1 + 136) + 1;
      uint64_t v20 = *(void *)(a1 + 8);
      if (v19 == *(_DWORD *)(v20 + 432))
      {
        unsigned int v21 = (*(uint64_t (**)(void))(v20 + 624))() + 1;
      }
      else
      {
        unsigned int v59 = 0;
        uint64_t v58 = 0;
        CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v20 + 440), 12 * v19, 0xCuLL, &v58);
        unsigned int v21 = bswap32(v58);
      }
      *(_DWORD *)(a1 + 144) = v21;
      uint64_t v22 = *(void *)(a1 + 8);
      uint64_t v23 = *(int *)(a1 + 136);
      unsigned int v59 = 0;
      uint64_t v58 = 0;
      CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v22 + 440), 12 * v23, 0xCuLL, &v58);
      unsigned int v24 = *(_DWORD *)(a1 + 144) - bswap32(v58);
      *(_DWORD *)(a1 + 144) = v24;
      if (v18 == v24)
      {
LABEL_18:
        uint64_t v25 = *(int *)(a1 + 136);
        if (v6 >= v14)
        {
          uint64_t v37 = v25 + 1;
          uint64_t v38 = *(void *)(a1 + 8);
          if ((int)v37 >= *(_DWORD *)(v38 + 432)) {
            return FigSignalErrorAt();
          }
          int v39 = *(_DWORD *)(a1 + 140) + *(_DWORD *)(a1 + 144) * *(_DWORD *)(a1 + 148);
          *(_DWORD *)(a1 + 140) = v39;
          if (v39 < 1 || v39 > *(_DWORD *)(v38 + 288)) {
            return FigSignalErrorAt();
          }
          *(_DWORD *)(a1 + 136) = v37;
          unsigned int v59 = 0;
          uint64_t v58 = 0;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v38 + 440), 12 * v37, 0xCuLL, &v58);
          signed int v40 = bswap32(HIDWORD(v58));
          *(_DWORD *)(a1 + 148) = v40;
          uint64_t v41 = *(void *)(a1 + 8);
          int v42 = *(_DWORD *)(v41 + 244);
          if (v42) {
            *(_DWORD *)(a1 + 148) = v40 / v42;
          }
          uint64_t v43 = *(int *)(a1 + 136) + 1;
          if (v43 == *(_DWORD *)(v41 + 432))
          {
            unsigned int v44 = (*(uint64_t (**)(void))(v41 + 624))() + 1;
          }
          else
          {
            unsigned int v59 = 0;
            uint64_t v58 = 0;
            CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v41 + 440), 12 * v43, 0xCuLL, &v58);
            unsigned int v44 = bswap32(v58);
          }
          *(_DWORD *)(a1 + 144) = v44;
          uint64_t v45 = *(void *)(a1 + 8);
          uint64_t v46 = *(int *)(a1 + 136);
          unsigned int v59 = 0;
          uint64_t v58 = 0;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v45 + 440), 12 * v46, 0xCuLL, &v58);
          int v32 = *(_DWORD *)(a1 + 148);
          *(_DWORD *)(a1 + 144) -= bswap32(v58);
          if (v32 < 1) {
            return FigSignalErrorAt();
          }
          int v36 = *(_DWORD *)(*(void *)(a1 + 8) + 288);
        }
        else
        {
          if ((int)v25 < 1) {
            return FigSignalErrorAt();
          }
          *(_DWORD *)(a1 + 136) = v25 - 1;
          uint64_t v26 = *(void *)(a1 + 8);
          unsigned int v59 = 0;
          uint64_t v58 = 0;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v26 + 440), 12 * v25, 0xCuLL, &v58);
          unsigned int v27 = bswap32(v58);
          uint64_t v28 = *(void *)(a1 + 8);
          uint64_t v29 = *(int *)(a1 + 136);
          unsigned int v59 = 0;
          uint64_t v58 = 0;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v28 + 440), 12 * v29, 0xCuLL, &v58);
          *(_DWORD *)(a1 + 144) = v27 - bswap32(v58);
          uint64_t v30 = *(void *)(a1 + 8);
          uint64_t v31 = *(int *)(a1 + 136);
          unsigned int v59 = 0;
          uint64_t v58 = 0;
          CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v30 + 440), 12 * v31, 0xCuLL, &v58);
          int v32 = bswap32(HIDWORD(v58));
          *(_DWORD *)(a1 + 148) = v32;
          uint64_t v33 = *(void *)(a1 + 8);
          int v34 = *(_DWORD *)(v33 + 244);
          if (v34)
          {
            v32 /= v34;
            *(_DWORD *)(a1 + 148) = v32;
          }
          int v35 = *(_DWORD *)(a1 + 140) - *(_DWORD *)(a1 + 144) * v32;
          *(_DWORD *)(a1 + 140) = v35;
          if (v35 < 1) {
            return FigSignalErrorAt();
          }
          int v36 = *(_DWORD *)(v33 + 288);
          if (v35 > v36 || v32 < 1) {
            return FigSignalErrorAt();
          }
        }
        if (v32 > v36) {
          return FigSignalErrorAt();
        }
      }
      BOOL v15 = 0;
      unsigned int v17 = *(_DWORD *)(a1 + 140);
      unsigned int v16 = *(_DWORD *)(a1 + 80);
    }
    uint64_t v47 = *(void *)(a1 + 8);
    uint64_t v48 = *(int *)(a1 + 136);
    unsigned int v59 = 0;
    uint64_t v58 = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v47 + 440), 12 * v48, 0xCuLL, &v58);
    unsigned int v49 = v58;
    int v50 = *(_DWORD *)(a1 + 80);
    int v51 = *(_DWORD *)(a1 + 140);
    unsigned int v52 = *(_DWORD *)(a1 + 148);
    if (!a3) {
      goto LABEL_45;
    }
    uint64_t v53 = *(void *)(a1 + 8);
    uint64_t v54 = *(int *)(a1 + 136);
    unsigned int v59 = 0;
    uint64_t v58 = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v53 + 440), 12 * v54, 0xCuLL, &v58);
    uint64_t v55 = bswap32(v59);
    *a3 = v55;
    if ((int)v55 >= 1)
    {
      CFArrayRef Count = *(const __CFArray **)(*(void *)(a1 + 8) + 56);
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if ((uint64_t)Count >= v55)
      {
LABEL_45:
        signed int v57 = bswap32(v49) + (v50 - v51) / v52 - 1;
        if ((v57 & 0x80000000) == 0
          && v57 < (*(int (**)(void))(*(void *)(a1 + 8) + 624))()
          && *(_DWORD *)(a1 + 80) <= *(_DWORD *)(*(void *)(a1 + 8) + 288))
        {
          uint64_t result = 0;
          *a2 = v57;
          return result;
        }
      }
    }
    return FigSignalErrorAt();
  }
  unsigned int v8 = (v6 - 1) / *(_DWORD *)(a1 + 148);
  *a2 = v8;
  int v9 = *(_DWORD *)(a1 + 148) * v8;
  *(_DWORD *)(a1 + 140) = v9 + 1;
  if ((v9 & 0x80000000) == 0 && v9 < *(_DWORD *)(v7 + 288))
  {
    if (!a3) {
      return 0;
    }
    uint64_t v10 = *(int *)(a1 + 136);
    unsigned int v59 = 0;
    uint64_t v58 = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v7 + 440), 12 * v10, 0xCuLL, &v58);
    uint64_t v11 = bswap32(v59);
    *a3 = v11;
    if ((int)v11 >= 1)
    {
      CFArrayRef v12 = *(const __CFArray **)(*(void *)(a1 + 8) + 56);
      if (v12) {
        CFArrayRef v12 = (const __CFArray *)CFArrayGetCount(v12);
      }
      if ((uint64_t)v12 >= v11) {
        return 0;
      }
    }
    return FigSignalErrorAt();
  }

  return FigSignalErrorAt();
}

uint64_t CheckChunkNumber(uint64_t a1, int a2)
{
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v2 = vars8;
    if ((*(int (**)(void))(a1 + 624))() > a2) {
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t sgffr_getContiguousSampleOffsetAndSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned int v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void))(v7 + 144);
  if (v8)
  {
    uint64_t v9 = v8(a1, a2, a3, 0, 0);
    if (!v9) {
      return v9;
    }
  }
  else
  {
    uint64_t v9 = 4294954514;
  }
  FigSignalErrorAt();
  return v9;
}

uint64_t sgffr_getPTSAndDTSAndDuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  unsigned int v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 40);
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t v9 = v8(a2, a3 + 24);
  if (v9) {
    goto LABEL_24;
  }
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  if (!*(void *)(v11 + 48))
  {
    uint64_t v14 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(a3 + 48) = *MEMORY[0x1E4F1F9F8];
    *(void *)(a3 + 64) = *(void *)(v14 + 16);
    goto LABEL_13;
  }
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v13 = v12 ? v12 : 0;
  int v18 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 48);
  if (!v18)
  {
LABEL_23:
    uint64_t v9 = 4294954514;
    goto LABEL_24;
  }
  uint64_t v19 = (_OWORD *)(a3 + 48);
  uint64_t v9 = v18(a2, a3 + 48);
  if (!v9)
  {
    *(_OWORD *)&lhs.unsigned int value = *v19;
    lhs.CMTimeEpoch epoch = *(void *)(a3 + 64);
    CMTime v21 = *(CMTime *)(a1 + 88);
    CMTimeSubtract(&v23, &lhs, &v21);
    *uint64_t v19 = *(_OWORD *)&v23.value;
    *(void *)(a3 + 64) = v23.epoch;
LABEL_13:
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    unsigned int v17 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 56);
    if (v17)
    {
      uint64_t v9 = v17(a2, a3);
      if (!v9) {
        return v9;
      }
      goto LABEL_24;
    }
    goto LABEL_23;
  }
LABEL_24:
  FigSignalErrorAt();
  return v9;
}

uint64_t audioMentorRemapSBufTiming(uint64_t *a1, uint64_t a2, opaqueCMSampleBuffer *target)
{
  uint64_t v6 = *a1;
  memset(&v37, 0, sizeof(v37));
  memset(&v36, 0, sizeof(v36));
  memset(&v35, 0, sizeof(v35));
  unsigned int valuePtr = -1;
  CMTime v33 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v32 = v33;
  CMTime v31 = v33;
  if (!*((unsigned char *)a1 + 80)) {
    goto LABEL_28;
  }
  CMSampleBufferGetOutputPresentationTimeStamp(&v37, target);
  CMSampleBufferGetOutputDuration(&v35, target);
  lhs.duration = v37;
  CMTime rhs = v35;
  CMTimeAdd(&v36, &lhs.duration, &rhs);
  CFDictionaryRef v7 = (const __CFDictionary *)CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F21A18], 0);
  if (v7)
  {
    CFDictionaryRef v8 = v7;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v7, (const void *)*MEMORY[0x1E4F21AA0]);
    CFDictionaryRef v10 = (const __CFDictionary *)CFDictionaryGetValue(v8, (const void *)*MEMORY[0x1E4F21A98]);
    if (Value)
    {
      CFDictionaryRef v11 = v10;
      if (v10)
      {
        CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
        CMTimeMakeFromDictionary(&v33, v11);
        if ((*((_DWORD *)a1 + 17) & 0x1D) == 1)
        {
          memset(&lhs, 0, sizeof(lhs));
          memset(&rhs, 0, sizeof(rhs));
          CMItemCount NumSamples = CMSampleBufferGetNumSamples(target);
          if ((valuePtr & 0x80000000) == 0 && NumSamples > valuePtr)
          {
            CMSampleBufferGetSampleTimingInfo(target, valuePtr, &lhs);
            CMTime presentationTimeStamp = lhs.presentationTimeStamp;
            CMTime v27 = v33;
            CMTimeAdd(&rhs, &presentationTimeStamp, &v27);
            CMTime v27 = rhs;
            CMTime v26 = *(CMTime *)(a1 + 7);
            CMTimeSubtract(&presentationTimeStamp, &v27, &v26);
            CMTimeEpoch epoch = presentationTimeStamp.epoch;
            CMTime rhs = presentationTimeStamp;
            *((_OWORD *)a1 + 2) = *(_OWORD *)&presentationTimeStamp.value;
            a1[6] = epoch;
          }
        }
      }
    }
  }
  uint64_t v14 = a1 + 1;
  if ((*((_DWORD *)a1 + 5) & 0x1D) == 1
    && (lhs.duration = v37, *(_OWORD *)&rhs.unsigned int value = *v14, rhs.epoch = a1[3], CMTimeCompare(&lhs.duration, &rhs) < 0))
  {
    char v16 = 0;
    BOOL v15 = 0;
  }
  else
  {
    if ((*((_DWORD *)a1 + 11) & 0x1D) == 1)
    {
      *(_OWORD *)&lhs.duration.unsigned int value = *((_OWORD *)a1 + 2);
      lhs.duration.CMTimeEpoch epoch = a1[6];
      CMTime rhs = v37;
      BOOL v15 = CMTimeCompare(&lhs.duration, &rhs) < 1;
    }
    else
    {
      BOOL v15 = 0;
    }
    char v16 = 1;
  }
  unsigned int v17 = a1 + 4;
  if ((*((_DWORD *)a1 + 11) & 0x1D) == 1
    && (*(_OWORD *)&lhs.duration.unsigned int value = *v17,
        lhs.duration.CMTimeEpoch epoch = a1[6],
        CMTime rhs = v36,
        CMTimeCompare(&lhs.duration, &rhs) < 0))
  {
    char v18 = 0;
    if (v15) {
      goto LABEL_20;
    }
  }
  else if ((*((_DWORD *)a1 + 5) & 0x1D) == 1 {
         && (lhs.duration = v36, *(_OWORD *)&rhs.unsigned int value = *v14, rhs.epoch = a1[3], CMTimeCompare(&lhs.duration, &rhs) < 1)
  }
         || (char v18 = 1, v15))
  {
LABEL_20:
    CFStringRef v19 = (const __CFString *)*MEMORY[0x1E4F1F308];
    lhs.duration = v35;
    audioMentorSetAttachmentAsFigTimeDictionary(target, v19, &lhs.duration);
    lhs.duration = v37;
    *(_OWORD *)&rhs.unsigned int value = *v14;
    rhs.CMTimeEpoch epoch = a1[3];
    if (CMTimeCompare(&lhs.duration, &rhs) <= 0)
    {
      *(_OWORD *)&lhs.duration.unsigned int value = *v14;
      lhs.duration.CMTimeEpoch epoch = a1[3];
      CMSampleBufferSetOutputPresentationTimeStamp(target, &lhs.duration);
    }
    goto LABEL_28;
  }
  if ((v16 & 1) == 0)
  {
    CFStringRef v20 = (const __CFString *)*MEMORY[0x1E4F1F308];
    *(_OWORD *)&lhs.duration.unsigned int value = *v14;
    lhs.duration.CMTimeEpoch epoch = a1[3];
    CMTime rhs = v37;
    CMTimeSubtract(&v25, &lhs.duration, &rhs);
    audioMentorSetAttachmentAsFigTimeDictionary(target, v20, &v25);
  }
  if ((v18 & 1) == 0)
  {
    CFStringRef v21 = (const __CFString *)*MEMORY[0x1E4F1F300];
    lhs.duration = v36;
    *(_OWORD *)&rhs.unsigned int value = *v17;
    rhs.CMTimeEpoch epoch = a1[6];
    CMTimeSubtract(&v24, &lhs.duration, &rhs);
    audioMentorSetAttachmentAsFigTimeDictionary(target, v21, &v24);
  }
LABEL_28:
  if (*((unsigned char *)a1 + 81)) {
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F2C8], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
  }
  CMSampleBufferGetOutputPresentationTimeStamp(&v32, target);
  CMSampleBufferGetOutputDuration(&v31, target);
  CMTime rhs = v32;
  CMTime presentationTimeStamp = v31;
  CMTimeAdd(&lhs.duration, &rhs, &presentationTimeStamp);
  *(_OWORD *)(v6 + 324) = *(_OWORD *)&lhs.duration.value;
  *(void *)(v6 + 340) = lhs.duration.epoch;
  MEMORY[0x19970E910](*(void *)(v6 + 72));
  uint64_t v22 = *(void (**)(void, uint64_t, opaqueCMSampleBuffer *))(v6 + 56);
  if (v22) {
    v22(*(void *)(v6 + 64), a2, target);
  }
  MEMORY[0x19970E930](*(void *)(v6 + 72));
  return 0;
}

void audioMentorSetAttachmentAsFigTimeDictionary(const void *a1, const __CFString *a2, CMTime *a3)
{
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime v8 = *a3;
  CFDictionaryRef v6 = CMTimeCopyAsDictionary(&v8, v5);
  if (v6)
  {
    CFDictionaryRef v7 = v6;
    CMSetAttachment(a1, a2, v6, 1u);
    CFRelease(v7);
  }
}

uint64_t editMentorRemapSampleBufferTiming(uint64_t a1, const void *a2, opaqueCMSampleBuffer *a3)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  if (editMentorChildOrderRefIsCurrent_RetainParentOrder(a1, a2, &cf, 0, 0))
  {
    int v54 = *(unsigned __int8 *)(a1 + 240);
    CMTime v69 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime v68 = v69;
    CMTime v67 = v69;
    CMTime v66 = v69;
    CMTime v65 = v69;
    CMTime v64 = v69;
    CMTime v63 = v69;
    CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)time1, a3);
    long long v70 = *(_OWORD *)time1;
    CMTimeEpoch v6 = *(void *)&time1[16];
    CMSampleBufferGetOutputDuration(&v69, a3);
    *(_OWORD *)CMSampleTimingInfo lhs = v70;
    *(void *)&lhs[16] = v6;
    rhs.start = v69;
    CMTimeAdd((CMTime *)time1, (CMTime *)lhs, &rhs.start);
    *(_OWORD *)&rhs.start.unsigned int value = *(_OWORD *)time1;
    CMTimeEpoch v7 = *(void *)&time1[16];
    *(_OWORD *)CMSampleTimingInfo lhs = v70;
    *(void *)&lhs[16] = v6;
    editMentorSelectEditForTimeInConsolidatedEdit(a1, (uint64_t)lhs, 1, time1);
    long long v76 = *(_OWORD *)time1;
    long long v94 = *(_OWORD *)&time1[24];
    *(_OWORD *)unsigned int v95 = *(_OWORD *)&time1[40];
    uint64_t v8 = *(void *)&time1[16];
    *(void *)&v95[16] = v88;
    long long v74 = v90;
    CMTimeEpoch v9 = v89;
    uint64_t v75 = v91;
    rhs.start.CMTimeEpoch epoch = v7;
    editMentorSelectEditForTimeInConsolidatedEdit(a1, (uint64_t)&rhs, 1, time1);
    long long v73 = *(_OWORD *)time1;
    long long v92 = *(_OWORD *)&time1[24];
    *(_OWORD *)CFNumberRef v93 = *(_OWORD *)&time1[40];
    *(void *)&v93[16] = v88;
    long long v71 = v90;
    uint64_t v72 = v91;
    if (v8 == v6) {
      CMTimeEpoch v10 = v9;
    }
    else {
      CMTimeEpoch v10 = v6;
    }
    if (*(void *)&time1[16] == v7) {
      CMTimeEpoch v11 = v89;
    }
    else {
      CMTimeEpoch v11 = v7;
    }
    *(_OWORD *)CMTime time1 = v76;
    *(void *)&time1[16] = v6;
    *(_OWORD *)CMSampleTimingInfo lhs = *(_OWORD *)&v95[8];
    CMTimeEpoch v55 = v10;
    *(void *)&lhs[16] = v10;
    int32_t v57 = CMTimeCompare((CMTime *)time1, (CMTime *)lhs);
    long long v60 = v76;
    *(_OWORD *)&v77.unsigned int value = v94;
    v77.CMTimeEpoch epoch = *(void *)v95;
    *(_OWORD *)CMTime time1 = v73;
    *(_OWORD *)&time1[24] = v92;
    *(void *)&time1[16] = v7;
    *(void *)&time1[40] = *(void *)v93;
    CMTimeRangeGetEnd(&v62, (CMTimeRange *)time1);
    *(_OWORD *)CMTime time1 = v76;
    *(void *)&time1[16] = v6;
    CMTimeSubtract(&v77, &v62, (CMTime *)time1);
    *(_OWORD *)CMTime time1 = *(_OWORD *)&v93[8];
    *(_OWORD *)&time1[24] = v71;
    *(void *)&time1[16] = v11;
    *(void *)&time1[40] = v72;
    CMTimeRangeGetEnd(&v61, (CMTimeRange *)time1);
    *(_OWORD *)CMSampleTimingInfo lhs = *(_OWORD *)&v93[8];
    CMTimeEpoch v56 = v11;
    *(void *)&lhs[16] = v11;
    CMTimeSubtract((CMTime *)time1, &v61, (CMTime *)lhs);
    CMTime v59 = v77;
    memset(time1, 0, 48);
    CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)lhs, a3);
    long long v85 = *(_OWORD *)lhs;
    CMTimeEpoch v12 = *(void *)&lhs[16];
    CMSampleBufferGetOutputDuration(&v84, a3);
    CFTypeRef v13 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    CFTypeRef v14 = CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E4F1F2C8], 0);
    CFTypeRef v53 = v13;
    if (v13 == v14)
    {
      *(_OWORD *)&rhs.start.unsigned int value = v85;
      rhs.start.CMTimeEpoch epoch = v12;
      v82.start = v84;
      CMTimeSubtract((CMTime *)lhs, &rhs.start, &v82.start);
      long long v85 = *(_OWORD *)lhs;
      CMTimeEpoch v12 = *(void *)&lhs[16];
    }
    *(_OWORD *)CMSampleTimingInfo lhs = v85;
    *(void *)&lhs[16] = v12;
    rhs.start = v84;
    CMTimeRangeMake((CMTimeRange *)time1, (CMTime *)lhs, &rhs.start);
    rhs.duration = v59;
    rhs.start.CMTimeEpoch epoch = v12;
    CMTimeRange v82 = *(CMTimeRange *)time1;
    *(_OWORD *)&rhs.start.unsigned int value = v60;
    CMTimeRangeGetIntersection((CMTimeRange *)lhs, &rhs, &v82);
    uint64_t v96 = *(void *)lhs;
    int v15 = *(_DWORD *)&lhs[12];
    int v97 = *(_DWORD *)&lhs[8];
    if (lhs[12])
    {
      int v52 = *(_DWORD *)&lhs[36];
      if ((lhs[36] & 1) != 0 && !*(void *)&lhs[40])
      {
        uint64_t v51 = *(void *)&lhs[24];
        if ((*(void *)&lhs[24] & 0x8000000000000000) == 0)
        {
          uint64_t v49 = *(void *)&lhs[16];
          int v50 = *(_DWORD *)&lhs[32];
          *(_OWORD *)CMSampleTimingInfo lhs = v60;
          *(CMTime *)&lhs[24] = v59;
          *(void *)&lhs[16] = v12;
          CMTimeRange rhs = *(CMTimeRange *)time1;
          if (!CMTimeRangeContainsTimeRange((CMTimeRange *)lhs, &rhs))
          {
            *(void *)CMSampleTimingInfo lhs = v51;
            *(_DWORD *)&lhs[8] = v50;
            *(_DWORD *)&lhs[12] = v52;
            *(void *)&lhs[16] = 0;
            *(_OWORD *)&rhs.start.unsigned int value = *MEMORY[0x1E4F1FA48];
            rhs.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
            if (CMTimeCompare((CMTime *)lhs, &rhs.start))
            {
              memset(&rhs, 0, 24);
              *(void *)CMSampleTimingInfo lhs = v96;
              *(_DWORD *)&lhs[8] = v97;
              *(_DWORD *)&lhs[12] = v15;
              *(void *)&lhs[16] = v49;
              *(_OWORD *)&v82.start.unsigned int value = *(_OWORD *)time1;
              v82.start.CMTimeEpoch epoch = *(void *)&time1[16];
              CMTimeSubtract(&rhs.start, (CMTime *)lhs, &v82.start);
              memset(&v82, 0, 24);
              *(_OWORD *)CMSampleTimingInfo lhs = *(_OWORD *)time1;
              *(_OWORD *)&lhs[16] = *(_OWORD *)&time1[16];
              *(_OWORD *)&lhs[32] = *(_OWORD *)&time1[32];
              CMTimeRangeGetEnd(&v81, (CMTimeRange *)lhs);
              *(void *)CMSampleTimingInfo lhs = v96;
              *(_DWORD *)&lhs[8] = v97;
              *(_DWORD *)&lhs[12] = v15;
              *(void *)&lhs[16] = v49;
              *(void *)&lhs[24] = v51;
              *(_DWORD *)&lhs[32] = v50;
              *(_DWORD *)&lhs[36] = v52;
              *(void *)&lhs[40] = 0;
              CMTimeRangeGetEnd(&v80, (CMTimeRange *)lhs);
              CMTimeSubtract(&v82.start, &v81, &v80);
              double valuePtr = 1.0;
              CFNumberRef v16 = (const __CFNumber *)CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E4F1F2E8], 0);
              if (v16)
              {
                CFNumberRef v17 = v16;
                CFTypeID TypeID = CFNumberGetTypeID();
                if (TypeID == CFGetTypeID(v17))
                {
                  CFNumberGetValue(v17, kCFNumberDoubleType, &valuePtr);
                  rhs.start.unsigned int value = (uint64_t)(valuePtr * (double)rhs.start.value);
                  v82.start.unsigned int value = (uint64_t)(valuePtr * (double)v82.start.value);
                }
              }
              if (v53 == v14)
              {
                if (rhs.start.value >= 1)
                {
                  CFStringRef v33 = (const __CFString *)*MEMORY[0x1E4F1F300];
                  *(_OWORD *)CMSampleTimingInfo lhs = *(_OWORD *)&rhs.start.value;
                  *(void *)&lhs[16] = rhs.start.epoch;
                  editMentorAddToTrimAttachment(a3, (CMTime *)lhs, v33);
                }
                if (v82.start.value >= 1)
                {
                  CFStringRef v34 = (const __CFString *)*MEMORY[0x1E4F1F308];
                  *(_OWORD *)CMSampleTimingInfo lhs = *(_OWORD *)&v82.start.value;
                  *(void *)&lhs[16] = v82.start.epoch;
                  editMentorAddToTrimAttachment(a3, (CMTime *)lhs, v34);
                }
                *(void *)CMSampleTimingInfo lhs = v96;
                *(_DWORD *)&lhs[8] = v97;
                *(_DWORD *)&lhs[12] = v15;
                *(void *)&lhs[16] = v49;
                *(void *)&lhs[24] = v51;
                *(_DWORD *)&lhs[32] = v50;
                *(_DWORD *)&lhs[36] = v52;
                *(void *)&lhs[40] = 0;
                CMTimeRangeGetEnd(&outputPresentationTimeStamp, (CMTimeRange *)lhs);
                p_CMTime outputPresentationTimeStamp = &outputPresentationTimeStamp;
              }
              else
              {
                if (rhs.start.value >= 1)
                {
                  CFStringRef v18 = (const __CFString *)*MEMORY[0x1E4F1F308];
                  *(_OWORD *)CMSampleTimingInfo lhs = *(_OWORD *)&rhs.start.value;
                  *(void *)&lhs[16] = rhs.start.epoch;
                  editMentorAddToTrimAttachment(a3, (CMTime *)lhs, v18);
                }
                if (v82.start.value >= 1)
                {
                  CFStringRef v19 = (const __CFString *)*MEMORY[0x1E4F1F300];
                  *(_OWORD *)CMSampleTimingInfo lhs = *(_OWORD *)&v82.start.value;
                  *(void *)&lhs[16] = v82.start.epoch;
                  editMentorAddToTrimAttachment(a3, (CMTime *)lhs, v19);
                }
                *(void *)CMSampleTimingInfo lhs = v96;
                *(_DWORD *)&lhs[8] = v97;
                *(_DWORD *)&lhs[12] = v15;
                *(void *)&lhs[16] = v49;
                p_CMTime outputPresentationTimeStamp = (CMTime *)lhs;
              }
              CMSampleBufferSetOutputPresentationTimeStamp(a3, p_outputPresentationTimeStamp);
            }
          }
        }
      }
    }
    CMSampleBufferGetOutputPresentationTimeStamp(&v68, a3);
    CMSampleBufferGetOutputDuration(&v67, a3);
    *(CMTime *)CMTime time1 = v68;
    *(CMTime *)CMSampleTimingInfo lhs = v67;
    CMTimeAdd(&v66, (CMTime *)time1, (CMTime *)lhs);
    CMTime v65 = v68;
    rhs.start = v68;
    *(_OWORD *)CMTime time1 = v76;
    *(_OWORD *)&time1[24] = v94;
    *(void *)&time1[16] = v6;
    *(void *)&time1[40] = *(void *)v95;
    *(_OWORD *)CMSampleTimingInfo lhs = *(_OWORD *)&v95[8];
    *(_OWORD *)&lhs[24] = v74;
    *(void *)&lhs[16] = v55;
    *(void *)&lhs[40] = v75;
    editMentorMapTimeFromRangeToRange(&rhs.start, (uint64_t)time1, (uint64_t)lhs, &v65);
    CMTime v63 = v66;
    rhs.start = v66;
    *(_OWORD *)CMTime time1 = v73;
    *(_OWORD *)&time1[24] = v92;
    *(void *)&time1[16] = v7;
    *(void *)&time1[40] = *(void *)v93;
    *(_OWORD *)CMSampleTimingInfo lhs = *(_OWORD *)&v93[8];
    *(_OWORD *)&lhs[24] = v71;
    *(void *)&lhs[16] = v56;
    *(void *)&lhs[40] = v72;
    editMentorMapTimeFromRangeToRange(&rhs.start, (uint64_t)time1, (uint64_t)lhs, &v63);
    *(CMTime *)CMTime time1 = v63;
    *(CMTime *)CMSampleTimingInfo lhs = v65;
    CMTimeSubtract(&v64, (CMTime *)time1, (CMTime *)lhs);
    *(CMTime *)CMTime time1 = v64;
    *(_OWORD *)CMSampleTimingInfo lhs = *MEMORY[0x1E4F1FA48];
    *(void *)&lhs[16] = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    if (CMTimeCompare((CMTime *)time1, (CMTime *)lhs))
    {
      *(CMTime *)CMTime time1 = v64;
      *(CMTime *)CMSampleTimingInfo lhs = v67;
      BOOL v35 = CMTimeCompare((CMTime *)time1, (CMTime *)lhs) != 0;
    }
    else
    {
      BOOL v35 = 0;
    }
    if (v57 || v35)
    {
      char v36 = !v35;
      if (v54) {
        char v36 = 1;
      }
      if ((v36 & 1) == 0)
      {
        rhs.start.unsigned int value = 0x3FF0000000000000;
        *(CMTime *)CMTime time1 = v64;
        *(CMTime *)CMSampleTimingInfo lhs = v67;
        double Seconds = CMTimeGetSeconds((CMTime *)time1);
        *(_OWORD *)CMTime time1 = *(_OWORD *)lhs;
        *(void *)&time1[16] = *(void *)&lhs[16];
        Float64 v38 = CMTimeGetSeconds((CMTime *)time1);
        CFStringRef v39 = (const __CFString *)*MEMORY[0x1E4F1F2E8];
        double v40 = Seconds / v38;
        CFNumberRef v41 = (const __CFNumber *)CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E4F1F2E8], 0);
        if (v41)
        {
          CFNumberRef v42 = v41;
          CFTypeID v43 = CFGetTypeID(v41);
          if (v43 == CFNumberGetTypeID()) {
            CFNumberGetValue(v42, kCFNumberDoubleType, &rhs);
          }
        }
        *(double *)&rhs.start.unsigned int value = *(double *)&rhs.start.value / v40;
        CFNumberRef v44 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &rhs);
        if (v44)
        {
          CFNumberRef v45 = v44;
          CMSetAttachment(a3, v39, v44, 1u);
          CFRelease(v45);
        }
      }
      *(CMTime *)CMTime time1 = v65;
      CMSampleBufferSetOutputPresentationTimeStamp(a3, (CMTime *)time1);
    }
    MEMORY[0x19970E910](*(void *)(a1 + 272));
    uint64_t v46 = *(uint64_t (**)(void, CFTypeRef, opaqueCMSampleBuffer *))(a1 + 248);
    if (v46) {
      uint64_t v32 = v46(*(void *)(a1 + 264), cf, a3);
    }
    else {
      uint64_t v32 = 0;
    }
    MEMORY[0x19970E930](*(void *)(a1 + 272));
  }
  else
  {
    SampleAttachmentsArraCGFloat y = CMSampleBufferGetSampleAttachmentsArray(a3, 1u);
    if (SampleAttachmentsArray)
    {
      CFArrayRef v22 = SampleAttachmentsArray;
      CFIndex Count = CFArrayGetCount(SampleAttachmentsArray);
      if (dword_1E9350D58)
      {
        LODWORD(rhs.start.value) = 0;
        LOBYTE(v82.start.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int value = rhs.start.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, v82.start.value)) {
          unsigned int v26 = value;
        }
        else {
          unsigned int v26 = value & 0xFFFFFFFE;
        }
        if (v26)
        {
          uint64_t v27 = *(void *)(a1 + 304);
          *(_DWORD *)CMSampleTimingInfo lhs = 136316162;
          *(void *)&lhs[4] = "editMentorRemapSampleBufferTiming";
          *(_WORD *)&lhs[12] = 2048;
          *(void *)&lhs[14] = a1;
          *(_WORD *)&lhs[22] = 2114;
          *(void *)&lhs[24] = v27;
          *(_WORD *)&lhs[32] = 2048;
          *(void *)&lhs[34] = a2;
          *(_WORD *)&lhs[42] = 2048;
          *(void *)&lhs[44] = a3;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (Count >= 1)
      {
        CFIndex v28 = 0;
        uint64_t v29 = (const void *)*MEMORY[0x1E4F1F1B8];
        uint64_t v30 = (const void *)*MEMORY[0x1E4F1CFD0];
        do
        {
          CFNumberRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(v22, v28);
          CFDictionarySetValue(ValueAtIndex, v29, v30);
          ++v28;
        }
        while (Count != v28);
      }
    }
    uint64_t v32 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v32;
}

uint64_t editMentorChildOrderRefIsCurrent_RetainParentOrder(uint64_t a1, const void *a2, CFTypeRef *a3, _DWORD *a4, void (*a5)(uint64_t))
{
  *a3 = 0;
  MEMORY[0x19970E910](*(void *)(a1 + 312));
  if (!a2 || (CMTimeEpoch v10 = *(const void **)(a1 + 328)) == 0 || !CFEqual(a2, v10))
  {
    uint64_t v12 = 0;
    if (!a4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  CMTimeEpoch v11 = *(const void **)(a1 + 568);
  if (v11) {
    *a3 = CFRetain(v11);
  }
  uint64_t v12 = 1;
  if (a4) {
LABEL_9:
  }
    *a4 = *(_DWORD *)(a1 + 320);
LABEL_10:
  char v13 = v12 ^ 1;
  if (!a5) {
    char v13 = 1;
  }
  if ((v13 & 1) == 0) {
    a5(a1);
  }
  if (a5 && dword_1E9350D58 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  MEMORY[0x19970E930](*(void *)(a1 + 312));
  return v12;
}

uint64_t sbcbq_postNotification(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (*((unsigned char *)DerivedStorage + 8))
  {
    MEMORY[0x19970E930](*DerivedStorage);
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  else
  {
    CFArrayAppendValue((CFMutableArrayRef)DerivedStorage[20], a2);
    if (a3) {
      CMTimeEpoch v7 = a3;
    }
    else {
      CMTimeEpoch v7 = (const void *)*MEMORY[0x1E4F1D260];
    }
    CFArrayAppendValue((CFMutableArrayRef)DerivedStorage[20], v7);
    MEMORY[0x19970E930](*DerivedStorage);
    return 0;
  }
}

uint64_t FigPlayerCopyPlayQueueItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  CMTimeEpoch v6 = *(uint64_t (**)(uint64_t, void, uint64_t))(v5 + 32);
  if (!v6) {
    return 4294954514;
  }

  return v6(a1, 0, a2);
}

uint64_t fpm_UpdateTimerProc()
{
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (__CFData *)FigRetainProxyGetOwner();
    MutableBytePtr = CFDataGetMutableBytePtr(Owner);
    MEMORY[0x19970E290](*((void *)MutableBytePtr + 6));
    os_retain(*((void **)MutableBytePtr + 1070));
    voucher_adopt();
    fpm_updateCacheAndNotify((uint64_t)MutableBytePtr);
    uint64_t v2 = (void *)voucher_adopt();
    os_release(v2);
    MEMORY[0x19970E2B0](*((void *)MutableBytePtr + 6));
  }

  return FigRetainProxyUnlockMutex();
}

uint64_t itemasync_CopyProperty(const void *a1, const void *a2, const void *a3, uint64_t *a4)
{
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  uint64_t v27 = 0;
  if (a4 && (CMTimeEpoch v9 = DerivedStorage, *a4 = 0, !*DerivedStorage) && a2)
  {
    uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v10)
    {
      CMTimeEpoch v11 = (const void *)v10;
      uint64_t v12 = (_DWORD *)CMBaseObjectGetDerivedStorage();
      if (*v12)
      {
        uint64_t v14 = FigSignalErrorAt();
LABEL_18:
        uint64_t v18 = 0;
LABEL_34:
        fpa_releaseCommand((void *)v18);
        CFRelease(v11);
        return v14;
      }
      char v13 = v12;
      if (CFEqual(a2, @"Status"))
      {
        MEMORY[0x19970E910](*((void *)v13 + 17));
        if (*((void *)v9 + 2) || v9[2])
        {
          uint64_t v14 = 0;
          *a4 = FigCFNumberCreateSInt32();
        }
        else
        {
          uint64_t v14 = 4294954513;
        }
        MEMORY[0x19970E930](*((void *)v13 + 17));
        goto LABEL_18;
      }
      uint64_t v16 = playerasync_createCommand(v11, 25, a1, &v27);
      if (v16)
      {
        uint64_t v14 = v16;
        uint64_t v18 = v27;
        goto LABEL_34;
      }
      CFTypeRef v17 = CFRetain(a2);
      uint64_t v18 = v27;
      *(void *)(v27 + 32) = v17;
      if (a3) {
        CFTypeRef v19 = CFRetain(a3);
      }
      else {
        CFTypeRef v19 = 0;
      }
      *(void *)(v18 + 40) = v19;
      *(void *)(v18 + 48) = a4;
      int v20 = *((unsigned __int8 *)v13 + 4);
      int v21 = CFEqual(a2, @"PlayableTimeIntervals");
      if (v20 && v21)
      {
        if (!*((void *)v9 + 2))
        {
          uint64_t v14 = FigSignalErrorAt();
          goto LABEL_34;
        }
        CFArrayRef v22 = v11;
        uint64_t v23 = v18;
        int v24 = 1;
      }
      else
      {
        int v25 = CFEqual(a2, @"BasicsReadyForInspection");
        if ((!v20 || !v25) && !CFEqual(a2, @"Timebase"))
        {
          playerasync_runSynchronousCommand((uint64_t)v11, (_DWORD *)v18);
          goto LABEL_33;
        }
        MEMORY[0x19970E910](*((void *)v13 + 17));
        while (!*((void *)v9 + 2) && !v9[2])
          FigConditionVariableWaitRelative();
        MEMORY[0x19970E930](*((void *)v13 + 17));
        CFArrayRef v22 = v11;
        uint64_t v23 = v18;
        int v24 = 0;
      }
      playerasync_runImmediateCommand(v22, v23, v24);
LABEL_33:
      uint64_t v14 = *(unsigned int *)(v18 + 28);
      goto LABEL_34;
    }
    uint64_t v26 = FigSignalErrorAt();
    fpa_releaseCommand(0);
    return v26;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fpm_updateCache(uint64_t a1)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  memset(&v54, 0, sizeof(v54));
  memset(&v55, 0, sizeof(v55));
  CMTimebaseGetTime(&v54, *(CMTimebaseRef *)(a1 + 24));
  CMTime v53 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F0];
  CMTime v52 = v53;
  CFBooleanRef v51 = 0;
  char v50 = 1;
  int v2 = *(_DWORD *)(a1 + 96);
  CMTimeValue v48 = 0x7FFFFFFFFFFFFFFFLL;
  memset(&v49, 0, sizeof(v49));
  CMTime v46 = *(CMTime *)(a1 + 240);
  CMTimeValue v47 = 0;
  int v3 = *(unsigned __int8 *)(a1 + 313);
  *(unsigned char *)(a1 + 313) = 0;
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = (_OWORD *)(a1 + 240);
  CMTimeEpoch v9 = *(unsigned int (**)(uint64_t, void, uint64_t, const __CFBoolean **))(v7 + 48);
  if (v9
    && !v9(CMBaseObject, *MEMORY[0x1E4F1EC58], v4, &v51)
    && (int Value = CFBooleanGetValue(v51), CFRelease(v51), Value))
  {
    CMTime v55 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTimeEpoch epoch = v55.epoch;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)&v55.value;
    *(void *)(a1 + 232) = epoch;
    int v10 = 1;
  }
  else
  {
    int v10 = 0;
    if (v3)
    {
      *(_OWORD *)&v55.unsigned int value = *(_OWORD *)(a1 + 216);
      CMTimeEpoch v11 = *(void *)(a1 + 232);
    }
    else
    {
      *(_OWORD *)&v55.unsigned int value = *v8;
      CMTimeEpoch v11 = *(void *)(a1 + 256);
    }
    v55.CMTimeEpoch epoch = v11;
  }
  int Duration = FigFormatReaderUtilityGetDuration(*(void *)(a1 + 8), v10, &v52);
  if (v10 && !Duration && (v52.flags & 0x1D) == 1)
  {
    *uint64_t v8 = *(_OWORD *)&v52.value;
    CMTimeEpoch v13 = v52.epoch;
  }
  else
  {
    CMTime time1 = v55;
    uint64_t result = fpm_getPlayableDurationFromTime(a1, &time1, (uint64_t)&v53, &v50, &v48, &v47);
    if (result) {
      return result;
    }
    CMTime lhs = v55;
    CMTime rhs = v53;
    CMTimeAdd(&time1, &lhs, &rhs);
    *uint64_t v8 = *(_OWORD *)&time1.value;
    CMTimeEpoch v13 = time1.epoch;
  }
  *(void *)(a1 + 256) = v13;
  *(void *)(a1 + 192) = dispatch_time(0, 0);
  *(_DWORD *)(a1 + 184) = v2;
  if ((v52.flags & 0x1D) == 1)
  {
    *(_OWORD *)&time1.unsigned int value = *v8;
    time1.CMTimeEpoch epoch = *(void *)(a1 + 256);
    CMTime lhs = v52;
    if (CMTimeCompare(&time1, &lhs) >= 1)
    {
      *uint64_t v8 = *(_OWORD *)&v52.value;
      *(void *)(a1 + 256) = v52.epoch;
    }
    *(_OWORD *)&lhs.unsigned int value = *v8;
    lhs.CMTimeEpoch epoch = *(void *)(a1 + 256);
    CMTimeConvertScale(&time1, &lhs, v52.timescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    *uint64_t v8 = *(_OWORD *)&time1.value;
    *(void *)(a1 + 256) = time1.epoch;
  }
  uint64_t v15 = *(void *)(a1 + 8568);
  *(_OWORD *)&time1.unsigned int value = *v8;
  time1.CMTimeEpoch epoch = *(void *)(a1 + 256);
  CMTime lhs = *(CMTime *)(a1 + 216);
  CMTimeSubtract(&time, &time1, &lhs);
  double Seconds = CMTimeGetSeconds(&time);
  if (v15)
  {
    double v17 = Seconds;
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v19 = v18 ? v18 : 0;
    int v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v19 + 56);
    if (v20) {
      v20(v15, 0x1EE582C38, 0x1EE55E2F8, (uint64_t)(v17 * 1000.0), 0);
    }
  }
  if (*(_DWORD *)(a1 + 104) == 3
    || v50
    || (*(_OWORD *)&time1.unsigned int value = *v8,
        time1.CMTimeEpoch epoch = *(void *)(a1 + 256),
        CMTime lhs = v52,
        (CMTimeCompare(&time1, &lhs) & 0x80000000) == 0))
  {
    int v21 = *(OpaqueCMTimebase **)(a1 + 24);
    CFArrayRef v22 = *(NSObject **)(a1 + 304);
    *(_OWORD *)&time1.unsigned int value = *MEMORY[0x1E4F1F9F8];
    CMTimeEpoch v23 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
LABEL_30:
    time1.CMTimeEpoch epoch = v23;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v21, v22, &time1, 0);
    goto LABEL_31;
  }
  CMTimeMake(&v43, 100, 1000);
  *(_OWORD *)&time1.unsigned int value = *v8;
  time1.CMTimeEpoch epoch = *(void *)(a1 + 256);
  CMTimeSubtract(&v49, &time1, &v43);
  CMTime time1 = v54;
  CMTime lhs = v49;
  int32_t v24 = CMTimeCompare(&time1, &lhs);
  int v21 = *(OpaqueCMTimebase **)(a1 + 24);
  if (v24 < 0)
  {
    CFArrayRef v22 = *(NSObject **)(a1 + 304);
    *(_OWORD *)&time1.unsigned int value = *(_OWORD *)&v49.value;
    CMTimeEpoch v23 = v49.epoch;
    goto LABEL_30;
  }
  if (CMTimebaseGetRate(v21) > 0.0)
  {
    *(void *)(a1 + 104) = 3;
    if (dword_1E9350B30)
    {
      LODWORD(rhs.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v26 = rhs.value;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v27 = v26;
      }
      else {
        unsigned int v27 = v26 & 0xFFFFFFFE;
      }
      if (v27)
      {
        double v28 = *(float *)(a1 + 108);
        LODWORD(lhs.value) = 136315650;
        *(CMTimeValue *)((char *)&lhs.value + 4) = (CMTimeValue)"fpm_updateCache";
        LOWORD(lhs.flags) = 2048;
        *(void *)((char *)&lhs.flags + 2) = a1;
        HIWORD(lhs.epoch) = 2048;
        double v57 = v28;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    FigRetainProxyRetain();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDeferNotificationToDispatchQueue();
  }
LABEL_31:
  if (*(unsigned char *)(a1 + 312))
  {
    *(unsigned char *)(a1 + 312) = 0;
    fpm_ensureUpdatePrimed(a1);
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    CMByteStreamGetCMBaseObject();
    FigCRABSGetClassID();
    uint64_t result = CMBaseObjectIsMemberOfClass();
    if (result)
    {
      CMTime time1 = v46;
      *(_OWORD *)&lhs.unsigned int value = *v8;
      lhs.CMTimeEpoch epoch = *(void *)(a1 + 256);
      uint64_t result = CMTimeCompare(&time1, &lhs);
      if (result) {
        return 0;
      }
      if (*(_DWORD *)(a1 + 104) != 1)
      {
        CMTimeValue v31 = v48;
        if (v48 != 0x7FFFFFFFFFFFFFFFLL)
        {
          uint64_t v32 = *(void *)(a1 + 264);
          if (v48 == v32) {
            return 0;
          }
          if (v32 != 0x7FFFFFFFFFFFFFFFLL)
          {
            uint64_t v33 = *(void *)(a1 + 272);
            time1.unsigned int value = *(void *)(a1 + 264);
            *(void *)&time1.int32_t timescale = v33;
            uint64_t v34 = *(void *)(a1 + 16);
            uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 24);
            if (v35) {
              uint64_t v36 = v35;
            }
            else {
              uint64_t v36 = 0;
            }
            CMTime v37 = *(void (**)(uint64_t, uint64_t, CMTime *))(v36 + 16);
            if (v37) {
              v37(v34, 1, &time1);
            }
            CMTimeValue v31 = v48;
          }
          time1.unsigned int value = v31;
          *(void *)&time1.int32_t timescale = v47;
          uint64_t v38 = *(void *)(a1 + 16);
          uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 24);
          if (v39) {
            uint64_t v40 = v39;
          }
          else {
            uint64_t v40 = 0;
          }
          CFNumberRef v41 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTime *))(v40 + 8);
          if (v41) {
            v41(v38, 16, 1, &time1);
          }
          uint64_t result = 0;
          CMTimeValue v42 = v47;
          *(void *)(a1 + 264) = v48;
          *(void *)(a1 + 272) = v42;
        }
      }
    }
  }
  return result;
}

uint64_t sbcbq_sendSampleBuffer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v4 = 17;
  if (!*((unsigned char *)DerivedStorage + 8)) {
    uint64_t v4 = 18;
  }
  uint64_t v5 = CMBufferQueueEnqueue((CMBufferQueueRef)DerivedStorage[v4], a2);
  MEMORY[0x19970E930](*DerivedStorage);
  return v5;
}

void audioMentorThreadFinishPreroll(uint64_t a1, uint64_t a2, const void *a3)
{
  if ((*(_DWORD *)(a1 + 264) | 2) != 3) {
    return;
  }
  uint64_t v4 = FigMentorPrerollCompletePayloadCreate(a3);
  uint64_t v5 = v4;
  if (*(unsigned char *)a1)
  {
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v5) {
LABEL_4:
  }
    CFRelease(v5);
LABEL_5:
  *(_DWORD *)(a1 + 264) = 0;
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    kdebug_trace();
  }
}

__CFDictionary *FigMentorPrerollCompletePayloadCreate(const void *a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v3 = Mutable;
  if (a1) {
    CFDictionarySetValue(Mutable, @"MentorPrerollComplete_Order", a1);
  }
  FigCFDictionarySetInt32();
  return v3;
}

void editMentorChildMentorPrerollComplete(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  int v12 = 0;
  CFTypeRef cf = 0;
  if (theDict
    && (int Value = CFDictionaryGetValue(theDict, @"MentorPrerollComplete_Order"),
        FigCFDictionaryGetInt32IfPresent(),
        (v12 - 1) < 2))
  {
    if (editMentorChildOrderRefIsCurrent_RetainParentOrder(a2, Value, &cf, 0, editMentorAdjustSettingsFollowingChildPrerollComplete))
    {
      uint64_t v7 = FigMentorPrerollCompletePayloadCreate(cf);
      if (dword_1E9350D58)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (v7) {
        CFRelease(v7);
      }
    }
    else if (dword_1E9350D58)
    {
      int v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (cf) {
      CFRelease(cf);
    }
  }
  else if (dword_1E9350D58 >= 2)
  {
    CMTimeEpoch v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
}

void editMentorAdjustSettingsFollowingChildPrerollComplete(uint64_t a1)
{
  *(unsigned char *)(a1 + 680) = 0;
  uint64_t v1 = *(__CFDictionary **)(a1 + 608);
  if (v1) {
    CFDictionarySetValue(v1, @"PrerollPolicy", @"NoPreroll");
  }
}

uint64_t FigSampleCursorCompareInDecodeOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v4)
  {
    uint64_t v5 = 0;
    if (a2) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  uint64_t v5 = v4;
  if (!a2) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v9 = v5;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v5 = v9;
LABEL_6:
  if (v5 != v6) {
    return 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (!v8) {
    return 0;
  }

  return v8(a1, a2);
}

void editMentorForwardNotificationFromChildMentor(int a1, uint64_t a2, uint64_t a3, int a4, CFDictionaryRef theDict)
{
  CFDictionaryRef v5 = theDict;
  CFTypeRef cf = 0;
  if (theDict)
  {
    int Value = CFDictionaryGetValue(theDict, @"Mentor_Order");
    FigCFDictionaryGetInt32IfPresent();
    uint64_t v9 = CFDictionaryGetValue(v5, @"Mentor_NotificationThatWasRequestedButDropped");
    LODWORD(v5) = CFDictionaryGetValue(v5, @"Mentor_SamplesWereGenerated") == (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else
  {
    int Value = 0;
    uint64_t v9 = 0;
  }
  int IsCurrent_RetainParentOrder = editMentorChildOrderRefIsCurrent_RetainParentOrder(a2, Value, &cf, 0, 0);
  CFTypeRef v11 = cf;
  if (IsCurrent_RetainParentOrder)
  {
    int v12 = FigMentorNotificationPayloadCreate(a3, cf, 0, (int)v5, v9, 0);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    if (v12) {
      CFRelease(v12);
    }
  }
  if (v11) {
    CFRelease(v11);
  }
}

uint64_t FigCachedFileByteStreamGetAvailableLengthAtOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v6 = *(void *)(DerivedStorage + 8);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 24);
    if (v9)
    {
      return v9(v6, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t itemfig_PlayableRangeChanged(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  if (a5) {
    int Value = CFDictionaryGetValue(a5, @"FPM_IsFilling");
  }
  else {
    int Value = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  if ((const void *)*MEMORY[0x1E4F1CFD0] == Value)
  {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 1400));
    *(_DWORD *)(DerivedStorage + 1408) = 0;
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 1400));
  }
  CFRetain(a2);

  return FigDeferNotificationToDispatchQueue();
}

uint64_t itemfig_LikelyToKeepUp(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 1400));
  if (*(_DWORD *)(DerivedStorage + 1424)) {
    BOOL v4 = *MEMORY[0x1E4F1EBA8] == 1;
  }
  else {
    BOOL v4 = 0;
  }
  if (v4)
  {
    if (a2) {
      CFDictionaryRef v5 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    }
    else {
      CFDictionaryRef v5 = "";
    }
    strncpy(__dst, v5, 8uLL);
    kdebug_trace();
  }
  *(_DWORD *)(DerivedStorage + 1424) = 0;
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 1400));
  CFRetain(a2);
  return FigDeferNotificationToDispatchQueue();
}

void itemfig_PrerollComplete(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  CMBaseObjectGetDerivedStorage();
  CMTimeRange values = 0;
  if (!a5) {
    goto LABEL_7;
  }
  int Value = CFDictionaryGetValue(a5, @"PrerollToken");
  int valuePtr = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 504));
  if (*(const void **)(DerivedStorage + 512) == Value)
  {
    p_int valuePtr = (int *)(DerivedStorage + 540);
    int valuePtr = *(_DWORD *)(DerivedStorage + 540);
  }
  else
  {
    p_int valuePtr = &valuePtr;
  }
  *p_int valuePtr = 0;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 504));
  if (valuePtr)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTimeRange values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    CFDictionaryRef v10 = CFDictionaryCreate(v9, (const void **)&kFigPlayerParameter_PrerollID, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else
  {
LABEL_7:
    CFDictionaryRef v10 = 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (values) {
    CFRelease(values);
  }
  if (v10) {
    CFRelease(v10);
  }
}

uint64_t bossStartTimebaseAndAudioContext(uint64_t a1, long long *a2, CMTime *a3, float a4, float a5)
{
  long long v10 = *a2;
  uint64_t v11 = *((void *)a2 + 2);
  CMTime v9 = *a3;
  uint64_t v7 = bossSetPossiblyOutsourcedTimebaseRate(a1, (uint64_t)&v10, &v9, a4, a5);
  if (!v7)
  {
    bossScheduleReachedEndCallbackForRate(a1, a4);
    bossScheduleAdvanceForOverlappedPlaybackCallbackForRate(a1, a4);
  }
  return v7;
}

uint64_t bossSetPossiblyOutsourcedTimebaseRate(uint64_t a1, uint64_t a2, CMTime *a3, float a4, float a5)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  float valuePtr = a5;
  memset(&v40, 0, sizeof(v40));
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    LODWORD(v50.value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    strncpy((char *)&__dst, (const char *)(a1 + 841), 8uLL);
    kdebug_trace();
  }
  if ((*(void *)(a1 + 96) & 0x8000000000000000) != 0)
  {
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    v50.unsigned int value = *(void *)a2;
    CMTimeFlags flags = *(_DWORD *)(a2 + 12);
    v50.int32_t timescale = *(_DWORD *)(a2 + 8);
    CMTimeEpoch epoch = *(void *)(a2 + 16);
    if (a4 != 0.0 && (flags & 0x1D) != 1 && (a3->flags & 0x1D) == 1)
    {
      CMTimebaseGetTime(&__dst, *(CMTimebaseRef *)(a1 + 112));
      v50.unsigned int value = __dst.value;
      CMTimeFlags flags = __dst.flags;
      v50.int32_t timescale = __dst.timescale;
      CMTimeEpoch epoch = __dst.epoch;
      if (dword_1E9350D98)
      {
        uint64_t v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    if ((flags & 0x1D) != 1)
    {
      CMTime __dst = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMTime immediateSourceTime = __dst;
      return CMTimebaseSetRateAndAnchorTimeWithFlags();
    }
    CMClockOrTimebaseRef v32 = CMTimebaseCopySource(*(CMTimebaseRef *)(a1 + 112));
    uint64_t v33 = v32;
    if ((a3->flags & 0x1D) == 1)
    {
      CMClockRef HostTimeClock = CMClockGetHostTimeClock();
      CMTime __dst = *a3;
      CMSyncConvertTime(&v40, &__dst, HostTimeClock, v33);
      if (!v33) {
        goto LABEL_45;
      }
    }
    else
    {
      CMSyncGetTime(&v40, v32);
      if (!v33)
      {
LABEL_45:
        uint64_t v36 = *(OpaqueCMTimebase **)(a1 + 112);
        __dst.unsigned int value = v50.value;
        __dst.int32_t timescale = v50.timescale;
        __dst.CMTimeFlags flags = flags;
        __dst.CMTimeEpoch epoch = epoch;
        CMTime immediateSourceTime = v40;
        return CMTimebaseSetRateAndAnchorTime(v36, a4, &__dst, &immediateSourceTime);
      }
    }
    CFRelease(v33);
    goto LABEL_45;
  }
  CFNumberRef v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
  CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), *(void *)(a1 + 96));
  int v12 = ValueAtIndex;
  if (ValueAtIndex) {
    CFRetain(ValueAtIndex);
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    CFIndex v13 = 0;
    do
    {
      uint64_t v14 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v13);
      uint64_t v15 = v14[10];
      if (v15 && v13 != *(void *)(a1 + 96) && *((_DWORD *)v14 + 18) == 1936684398)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v15);
        uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v18 = v17 ? v17 : 0;
        uint64_t v19 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v18 + 56);
        if (v19) {
          v19(FigBaseObject, @"PipelineRate", v10);
        }
      }
      ++v13;
    }
    while (*(void *)(a1 + 80) > v13);
  }
  MEMORY[0x19970E930](*(void *)(a1 + 64));
  CFRelease(v10);
  uint64_t v20 = v12[10];
  float v21 = valuePtr;
  CMTime v50 = *(CMTime *)a2;
  *(_OWORD *)&type.unsigned int value = *(_OWORD *)&a3->value;
  type.CMTimeEpoch epoch = a3->epoch;
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  unsigned int v26 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *, float, float))(v23 + 8);
  if (!v26)
  {
    uint64_t v27 = 4294954514;
    goto LABEL_31;
  }
  CMTime __dst = v50;
  CMTime immediateSourceTime = type;
  uint64_t v27 = v26(v20, &__dst, &immediateSourceTime, a4, v21);
  if (v27)
  {
LABEL_31:
    LODWORD(v50.value) = 0;
    double v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int value = v50.value;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v30 = value;
    }
    else {
      unsigned int v30 = value & 0xFFFFFFFE;
    }
    if (v30)
    {
      uint64_t v31 = v12[10];
      LODWORD(immediateSourceTime.value) = 136316418;
      *(CMTimeValue *)((char *)&immediateSourceTime.value + 4) = (CMTimeValue)"bossSetPossiblyOutsourcedTimebaseRate";
      LOWORD(immediateSourceTime.flags) = 2048;
      *(void *)((char *)&immediateSourceTime.flags + 2) = a1;
      HIWORD(immediateSourceTime.epoch) = 2048;
      uint64_t v43 = v31;
      __int16 v44 = 2048;
      double v45 = a4;
      __int16 v46 = 2048;
      double v47 = valuePtr;
      __int16 v48 = 1024;
      int v49 = v27;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFRelease(v12);
  return v27;
}

uint64_t FigAudioQueueSetParameter(uint64_t a1, AudioQueueParameterID a2, AudioQueueParameterValue a3)
{
  if (a1)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 24));
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v9 = FigSignalErrorAt();
    }
    else
    {
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
      if (Count >= 1)
      {
        CFIndex v7 = Count;
        CFIndex v8 = 0;
        uint64_t v9 = 0;
        while (1)
        {
          CFNumberRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v8);
          if (ValueAtIndex[689])
          {
LABEL_6:
            if (!v9)
            {
              uint64_t v9 = FigAudioQueueTimingShimSetParameter(*((void *)ValueAtIndex + 5), a2, a3);
              if (v9) {
                goto LABEL_39;
              }
            }
          }
          else
          {
            switch(a2)
            {
              case 1u:
                if (!*(unsigned char *)(a1 + 248) || *((float *)ValueAtIndex + 173) <= 0.0) {
                  goto LABEL_6;
                }
                uint64_t v11 = (float *)(ValueAtIndex + 696);
                goto LABEL_17;
              case 4u:
                *((AudioQueueParameterValue *)ValueAtIndex + 173) = a3;
                goto LABEL_19;
              case 5u:
                if (!*(unsigned char *)(a1 + 249) || *((float *)ValueAtIndex + 175) <= 0.0) {
                  goto LABEL_6;
                }
                uint64_t v11 = (float *)(ValueAtIndex + 704);
LABEL_17:
                float *v11 = a3;
                goto LABEL_20;
              case 6u:
                *((AudioQueueParameterValue *)ValueAtIndex + 175) = a3;
LABEL_19:
                if (a3 <= 0.0) {
                  goto LABEL_6;
                }
LABEL_20:
                uint64_t v9 = 1;
                break;
              default:
                goto LABEL_6;
            }
          }
          if (v7 == ++v8) {
            goto LABEL_24;
          }
        }
      }
      uint64_t v9 = 0;
LABEL_24:
      switch(a2)
      {
        case 1u:
          *(unsigned char *)(a1 + 248) = 0;
          break;
        case 4u:
          *(unsigned char *)(a1 + 248) = a3 > 0.0;
          break;
        case 5u:
          *(unsigned char *)(a1 + 249) = 0;
          break;
        case 6u:
          *(unsigned char *)(a1 + 249) = a3 > 0.0;
          break;
        default:
          break;
      }
      if (v9)
      {
        uint64_t v9 = 0;
      }
      else
      {
        switch(a2)
        {
          case 1u:
            uint64_t v9 = 0;
            *(AudioQueueParameterValue *)(a1 + 200) = a3;
            *(unsigned char *)(a1 + 204) = 1;
            break;
          case 2u:
            uint64_t v9 = 0;
            *(AudioQueueParameterValue *)(a1 + 232) = a3;
            *(unsigned char *)(a1 + 236) = 1;
            break;
          case 3u:
          case 4u:
          case 6u:
          case 7u:
          case 8u:
            break;
          case 5u:
            uint64_t v9 = 0;
            *(AudioQueueParameterValue *)(a1 + 208) = a3;
            *(unsigned char *)(a1 + 212) = 1;
            break;
          case 9u:
            uint64_t v9 = 0;
            *(AudioQueueParameterValue *)(a1 + 216) = a3;
            *(unsigned char *)(a1 + 220) = 1;
            break;
          default:
            if (a2 == 14)
            {
              uint64_t v9 = 0;
              *(AudioQueueParameterValue *)(a1 + 224) = a3;
              *(unsigned char *)(a1 + 228) = 1;
            }
            else if (a2 == 22)
            {
              uint64_t v9 = 0;
              *(AudioQueueParameterValue *)(a1 + 712) = a3;
              *(unsigned char *)(a1 + 716) = 1;
            }
            break;
        }
      }
    }
LABEL_39:
    MEMORY[0x19970E2B0](*(void *)(a1 + 24));
  }
  else
  {
    uint64_t v9 = FigSignalErrorAt();
  }
  if (a2 == 2)
  {
    if (v9 && (*(unsigned char *)(a1 + 48) & 4) != 0 && *(float *)(a1 + 280) != a3)
    {
      FigAudioQueuePause(a1);
      double v12 = MEMORY[0x19970E290](*(void *)(a1 + 24));
      double v13 = faq_reset(a1, v12);
      MEMORY[0x19970E2B0](*(void *)(a1 + 24), v13);
    }
    *(AudioQueueParameterValue *)(a1 + 280) = a3;
  }
  return v9;
}

uint64_t FigAudioQueuePrime(uint64_t a1, CMTime *a2, uint64_t a3, CMTime *a4, float a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  value[0] = 0;
  if (a1 && (a2->flags & 0x1D) == 1)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 24));
    if (*(unsigned char *)(a1 + 16)) {
      goto LABEL_59;
    }
    if ((*(_DWORD *)(a1 + 540) & 0x1D) == 1)
    {
      if (dword_1E9350B70) {
        goto LABEL_8;
      }
    }
    else if (dword_1E9350B70)
    {
LABEL_8:
      value[1] = 0;
      LOBYTE(type.value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (!*(unsigned char *)(a1 + 16))
    {
      CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
      if (ValueAtIndex)
      {
        double v12 = ValueAtIndex;
        if (ValueAtIndex[5])
        {
          *(float *)(a1 + 416) = a5;
          int v13 = *(unsigned __int8 *)(a1 + 578);
          CMTime time2 = *a2;
          memset(&time1, 0, sizeof(time1));
          subaq_getCurrentQueueTime((uint64_t)ValueAtIndex, &time1);
          *(CMTime *)(a1 + 432) = time1;
          if (!v13 || (*(_DWORD *)(a1 + 468) & 1) == 0) {
            *(CMTime *)(a1 + 456) = time1;
          }
          uint64_t v14 = MEMORY[0x1E4F1F9F8];
          if ((*(_DWORD *)(a1 + 540) & 0x1D) == 1)
          {
            if (*(unsigned char *)(a1 + 312)) {
              *((unsigned char *)v12 + 545) = 1;
            }
          }
          else
          {
            *(CMTime *)(a1 + 504) = time1;
            CMTimeEpoch epoch = time2.epoch;
            *(void *)(a1 + 568) = time2.epoch;
            long long v16 = *(_OWORD *)&time2.value;
            *(_OWORD *)(a1 + 552) = *(_OWORD *)&time2.value;
            *(_OWORD *)(a1 + 528) = v16;
            *(void *)(a1 + 544) = epoch;
            *(void *)(a1 + 496) = *(void *)(v14 + 16);
            *(_OWORD *)(a1 + 480) = *(_OWORD *)v14;
            *((unsigned char *)v12 + 546) = 1;
            v12[69] = 0;
          }
          *(unsigned char *)(a1 + 305) = 1;
          BOOL v17 = (*(unsigned char *)(a1 + 48) & 4) != 0 && *(unsigned char *)(a1 + 312) && *(float *)(a1 + 280) != 1.0;
          faq_enqueueSourceData(a1, v17);
          if (*(unsigned char *)(a1 + 16)) {
            uint64_t v18 = 0;
          }
          else {
            uint64_t v18 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
          }
          if (*(unsigned char *)(a3 + 12))
          {
            CMTime time1 = *(CMTime *)a3;
            CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
            if (CMTimeCompare(&time1, &time2))
            {
              int32_t v26 = *((_DWORD *)v18 + 25);
              CMTime time1 = *(CMTime *)a3;
              CMTimeConvertScale(&v33, &time1, v26, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
              UInt32 v25 = v33.value;
            }
            else
            {
              UInt32 v25 = 0;
            }
          }
          else
          {
            LODWORD(time1.value) = 0;
            LODWORD(time2.value) = 4;
            if (FigAudioQueueTimingShimGetProperty(*((void *)v18 + 5), 0x64766266u, &time1, (UInt32 *)&time2))goto LABEL_54; {
            int v19 = *(_DWORD *)(*((void *)v18 + 8) + 8);
            }
            if (v19 == 1634492771) {
              char v20 = 2;
            }
            else {
              char v20 = 3;
            }
            unsigned int v21 = LODWORD(time1.value) << v20;
            if (v19 == 1633772400 || v19 == 1633772392)
            {
              unsigned int v22 = FigUInt32NearestPowerOfTwo();
              if (v22 >= 0x20000) {
                unsigned int v23 = 0x20000;
              }
              else {
                unsigned int v23 = v22;
              }
              unsigned int v24 = v23 >> 2;
              if (v24 >= 0x4000) {
                unsigned int v24 = 0x4000;
              }
              if (v21 <= v24) {
                unsigned int v21 = v24;
              }
            }
            UInt32 v25 = v21 >= 0x4000 ? 0x4000 : v21;
            if (!v25) {
              goto LABEL_54;
            }
          }
          int v27 = *((_DWORD *)v18 + 120);
          uint64_t v28 = FigAudioQueueTimingShimPrime(*((void *)v18 + 5), v25, value);
          if (v28)
          {
            uint64_t v29 = v28;
            CMTime type = *(CMTime *)v14;
            int v30 = *((_DWORD *)v18 + 120);
            if (v30 <= 0) {
              int v30 = v27;
            }
            CMTimeMake(&type, v30, *((_DWORD *)v18 + 25));
            *(CMTime *)&value[1] = type;
            CMTime time2 = *(CMTime *)(a1 + 528);
            CMTimeAdd(&time1, &time2, (CMTime *)&value[1]);
            *(CMTime *)(a1 + 528) = time1;
            *((_DWORD *)v18 + 120) = 0;
            goto LABEL_55;
          }
          if (a4)
          {
            CMTimeMake(&time1, value[0], 0);
            uint64_t v29 = 0;
            *a4 = time1;
LABEL_55:
            MEMORY[0x19970E2B0](*(void *)(a1 + 24));
            return v29;
          }
LABEL_54:
          uint64_t v29 = 0;
          goto LABEL_55;
        }
      }
    }
LABEL_59:
    uint64_t v29 = FigSignalErrorAt();
    goto LABEL_55;
  }

  return FigSignalErrorAt();
}

CFDictionaryRef faq_getFigTimeAttachment(const void *a1, const __CFString *a2, CMTime *a3)
{
  CFDictionaryRef result = (const __CFDictionary *)CMGetAttachment(a1, a2, 0);
  if (result)
  {
    CMTimeMakeFromDictionary(&v5, result);
    *a3 = v5;
    return (const __CFDictionary *)1;
  }
  return result;
}

uint64_t FigAudioQueueStart(uint64_t a1, CMTime *a2, CMTime *a3, uint64_t a4, uint64_t a5, int a6, float a7)
{
  CMTime v9 = *a2;
  CMTime v8 = *a3;
  return figAudioQueueStartCommon(a1, &v9, &v8, a4, a5, 0, 0, a6, a7);
}

void faqrp_startTimebaseAtAnchorAudioTimeStamp(uint64_t a1, int a2, CMTime *a3, CMTime *a4, float a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  uint64_t v11 = *(OpaqueCMTimebase **)(DerivedStorage + 120);
  *(void *)(DerivedStorage + 120) = 0;
  CMTime v19 = *(CMTime *)(DerivedStorage + 128);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 48));
  if (a2)
  {
    LODWORD(rhs.value) = 0;
    LOBYTE(value) = 0;
    os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    *(unsigned char *)(DerivedStorage + 64) = 0;
    if (Mutable) {
      CFRelease(Mutable);
    }
    if (v11) {
      goto LABEL_10;
    }
  }
  else
  {
    int v13 = *(const void **)(DerivedStorage + 112);
    CMClockRef HostTimeClock = CMClockGetHostTimeClock();
    CMTime time = *a3;
    CMSyncConvertTime(&lhs, &time, v13, HostTimeClock);
    CMTimeValue value = lhs.value;
    CMTimeFlags flags = lhs.flags;
    CMTimeScale timescale = lhs.timescale;
    if (lhs.flags)
    {
      CMTimeEpoch epoch = lhs.epoch;
      CMTimeMake(&v18, 1, 1000);
      CMTime lhs = *a4;
      rhs.CMTimeValue value = value;
      rhs.CMTimeScale timescale = timescale;
      rhs.CMTimeFlags flags = flags;
      rhs.CMTimeEpoch epoch = epoch;
      CMTimeSubtract(&time, &lhs, &rhs);
      CMTimeAbsoluteValue(&lhs, &time);
      CMTime rhs = v18;
      CMTimeCompare(&lhs, &rhs);
    }
    if (v11)
    {
      CMTime lhs = *a3;
      CMTime time = v19;
      CMTime rhs = *a4;
      faqrp_startTimebaseCommon(a5, a1, v11, &lhs, &time, &rhs);
LABEL_10:
      CFRelease(v11);
    }
  }
}

void figSyncMomentSource_TimebaseRateOrTimeChangedCallback(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  if (a2)
  {
    MEMORY[0x19970E290](*(void *)(a2 + 24));
    if (*(unsigned char *)(a2 + 236) || *(void *)(a2 + 64) != a4)
    {
      JUMPOUT(0x19970E2B0);
    }
    if (CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1FA58]))
    {
      figSyncMomentSource_UpdateToCurrentTimebaseRate(a2);
      int v7 = 1;
    }
    else
    {
      int v7 = 2;
    }
    uint64_t v18 = 0;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v11 = 0u;
    __n128 SyncMoment = figSyncMomentSource_getSyncMoment(a2, v7, (uint64_t)&v11);
    MEMORY[0x19970E2B0](*(void *)(a2 + 24), SyncMoment);
    v9[4] = v15;
    v9[5] = v16;
    v9[6] = v17;
    uint64_t v10 = v18;
    v9[0] = v11;
    v9[1] = v12;
    v9[2] = v13;
    v9[3] = v14;
    figSyncMomentSource_SendMoment((dispatch_queue_t *)a2, (uint64_t)v9, 0);
  }
  else
  {
    FigSignalErrorAt();
  }
}

void figPlaybackBoss_timebaseRateChanged(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v3 = *(_DWORD *)(a2 + 424);
  if (v3 == 2003853684)
  {
    if (dword_1E9350D98)
    {
      int v8 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    unsigned __int16 v6 = 24953;
    goto LABEL_12;
  }
  if (v3 == 1886544244)
  {
    if (dword_1E9350D98)
    {
      int v8 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      BOOL v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    unsigned __int16 v6 = 29808;
LABEL_12:
    *(_DWORD *)(a2 + 424) = v6 | 0x706C0000;
    return;
  }

  FigDeferNotificationToDispatchQueue();
}

void itemfig_TimeJumped(uint64_t a1, void *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    BOOL v4 = DerivedStorage;
    if (a2) {
      CFRetain(a2);
    }
    CMTime v5 = *((void *)v4 + 12);
    dispatch_async_f(v5, a2, (dispatch_function_t)itemfig_deferredTimeJumped_f);
  }
}

uint64_t fpm_timebaseJumpedCallback()
{
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (__CFData *)FigRetainProxyGetOwner();
    MutableBytePtr = CFDataGetMutableBytePtr(Owner);
    MEMORY[0x19970E290](*((void *)MutableBytePtr + 6));
    MutableBytePtr[313] = 1;
    CMTimebaseGetTime(&time1, *((CMTimebaseRef *)MutableBytePtr + 3));
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CMTimeMaximum(&v11, &time1, &time2);
    *((CMTime *)MutableBytePtr + 9) = v11;
    Float64 Rate = CMTimebaseGetRate(*((CMTimebaseRef *)MutableBytePtr + 3));
    int v3 = (void *)MEMORY[0x1E4F1CF80];
    if (Rate == 0.0)
    {
      BOOL v8 = 0;
      if (*((void *)MutableBytePtr + 2))
      {
        time1.CMTimeValue value = 0;
        uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
        uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v6 = v5 ? v5 : 0;
        int v7 = *(unsigned int (**)(uint64_t, void, void, CMTime *))(v6 + 48);
        if (v7)
        {
          if (!v7(CMBaseObject, *MEMORY[0x1E4F1EC58], *v3, &time1))
          {
            int Value = CFBooleanGetValue((CFBooleanRef)time1.value);
            CFRelease((CFTypeRef)time1.value);
            if (Value) {
              BOOL v8 = 1;
            }
          }
        }
      }
      *((_DWORD *)MutableBytePtr + 26) = v8;
      *((_DWORD *)MutableBytePtr + 27) = 0;
    }
    FigRetainProxyRetain();
    CMNotificationCenterGetDefaultLocalCenter();
    FigDeferNotificationToDispatchQueue();
    MEMORY[0x19970E2B0](*((void *)MutableBytePtr + 6));
  }
  return FigRetainProxyUnlockMutex();
}

void bossScheduleReachedEndCallbackForRate(uint64_t a1, float a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (a2 <= 0.0)
  {
    CMTimeValue value = *(void *)(a1 + 288);
    CMTimeScale timescale = *(_DWORD *)(a1 + 296);
    CMTimeFlags flags = *(_DWORD *)(a1 + 300);
    if ((flags & 0x1D) == 1)
    {
      int v4 = 0;
      CMTimeEpoch epoch = *(void *)(a1 + 304);
    }
    else if (*(unsigned char *)(a1 + 122) || *(unsigned char *)(a1 + 124))
    {
      CMTimeValue value = *MEMORY[0x1E4F1FA48];
      CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 12);
      CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
      CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      if (dword_1E9350D98)
      {
        LODWORD(v17.value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      int v4 = 0;
    }
    else
    {
      CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
      CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
      CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      if (dword_1E9350D98)
      {
        LODWORD(v17.value) = 0;
        long long v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        int v4 = 1;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        int v4 = 1;
      }
    }
    if ((flags & 0x1D) != 1) {
      goto LABEL_25;
    }
    memset(&v17, 0, sizeof(v17));
    CMTimebaseGetTime(&v17, *(CMTimebaseRef *)(a1 + 112));
    time.CMTimeValue value = value;
    time.CMTimeScale timescale = timescale;
    time.CMTimeFlags flags = flags;
    time.CMTimeEpoch epoch = epoch;
    CMTime time2 = v17;
    if (CMTimeCompare(&time, &time2) < 0) {
      goto LABEL_25;
    }
    if (!dword_1E9350D98) {
      goto LABEL_38;
    }
LABEL_21:
    uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    int v14 = 1;
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_26;
  }
  CMTimeValue value = *(void *)(a1 + 168);
  CMTimeFlags flags = *(_DWORD *)(a1 + 180);
  CMTimeScale timescale = *(_DWORD *)(a1 + 176);
  if ((flags & 0x1D) == 1)
  {
    int v4 = 0;
    CMTimeEpoch epoch = *(void *)(a1 + 184);
  }
  else if (*(unsigned char *)(a1 + 122) || *(unsigned char *)(a1 + 123) && *(unsigned char *)(a1 + 124))
  {
    FigPlaybackBossGetDuration(a1, (__n128 *)&time);
    CMTimeValue value = time.value;
    CMTimeFlags flags = time.flags;
    CMTimeScale timescale = time.timescale;
    CMTimeEpoch epoch = time.epoch;
    if (dword_1E9350D98)
    {
      LODWORD(v17.value) = 0;
      uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v4 = 0;
  }
  else
  {
    CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
    CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
    CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    if (dword_1E9350D98)
    {
      LODWORD(v17.value) = 0;
      BOOL v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      int v4 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    else
    {
      int v4 = 1;
    }
  }
  if ((flags & 0x1D) != 1
    || (memset(&v17, 0, sizeof(v17)),
        CMTimebaseGetTime(&v17, *(CMTimebaseRef *)(a1 + 112)),
        time.CMTimeValue value = value,
        time.CMTimeScale timescale = timescale,
        time.CMTimeFlags flags = flags,
        time.CMTimeEpoch epoch = epoch,
        CMTime time2 = v17,
        CMTimeCompare(&time, &time2) > 0))
  {
LABEL_25:
    int v14 = 0;
    goto LABEL_26;
  }
  if (dword_1E9350D98) {
    goto LABEL_21;
  }
LABEL_38:
  int v14 = 1;
LABEL_26:
  *(unsigned char *)(a1 + 128) = 0;
  time.CMTimeValue value = value;
  time.CMTimeScale timescale = timescale;
  time.CMTimeFlags flags = flags;
  time.CMTimeEpoch epoch = epoch;
  bossScheduleReachedEndCallbackForTime(a1, &time);
  if (v14)
  {
    uint64_t v10 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(a1 + 312) = *MEMORY[0x1E4F1F9F8];
    *(void *)(a1 + 328) = *(void *)(v10 + 16);
    CMTimebaseSetTimerDispatchSourceToFireImmediately(*(CMTimebaseRef *)(a1 + 112), *(dispatch_source_t *)(a1 + 160));
  }
  if (v4)
  {
    CFRetain((CFTypeRef)a1);
    if (!*(unsigned char *)(a1 + 16))
    {
      MEMORY[0x19970E910](*(void *)(a1 + 64));
      if (*(unsigned char *)(a1 + 840))
      {
        LODWORD(v17.value) = 0;
        CMTime v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v12 = v17.value;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v13 = v12;
        }
        else {
          unsigned int v13 = v12 & 0xFFFFFFFE;
        }
        if (v13)
        {
          LODWORD(time2.value) = 136315394;
          *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"bossScheduleReachedEndCallbackWhenMentorsIdle";
          LOWORD(time2.flags) = 2048;
          *(void *)((char *)&time2.flags + 2) = a1;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (*(uint64_t *)(a1 + 80) < 1)
      {
LABEL_44:
        MEMORY[0x19970E930](*(void *)(a1 + 64));
        bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS(a1);
      }
      else
      {
        CFIndex v15 = 0;
        while (!*((unsigned char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v15) + 212))
        {
          if (*(void *)(a1 + 80) <= ++v15) {
            goto LABEL_44;
          }
        }
        MEMORY[0x19970E930](*(void *)(a1 + 64));
        *(unsigned char *)(a1 + 584) = 1;
      }
    }
    CFRelease((CFTypeRef)a1);
  }
  else
  {
    *(unsigned char *)(a1 + 584) = 0;
  }
}

void itemfig_invalidateRampOutTimer()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 1304);
  if (v1)
  {
    uint64_t v2 = DerivedStorage;
    CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 328), v1);
    dispatch_source_cancel(*(dispatch_source_t *)(v2 + 1304));
    dispatch_release(*(dispatch_object_t *)(v2 + 1304));
    *(void *)(v2 + 1304) = 0;
  }
}

uint64_t figPlaybackBossSetRateToZero(uint64_t a1, int a2, CMTime *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = (CMTime *)MEMORY[0x1E4F1F9F8];
  bossScheduleReachedEndCallbackForTime(a1, MEMORY[0x1E4F1F9F8]);
  bossScheduleAdvanceForOverlappedPlaybackCallbackForTime(a1, v6);
  MEMORY[0x19970E910](*(void *)(a1 + 576));
  int v7 = *(_DWORD *)(a1 + 424);
  if (v7 <= 1886530415)
  {
    if (v7 > 1886154859)
    {
      if (v7 == 1886154860) {
        goto LABEL_14;
      }
      unsigned __int16 v8 = 29808;
      goto LABEL_10;
    }
    if (v7 != 1768189029)
    {
      unsigned __int16 v8 = 24953;
LABEL_10:
      int v9 = v8 | 0x706C0000;
      goto LABEL_13;
    }
LABEL_24:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_33;
  }
  if (v7 > 1920298605)
  {
    if (v7 == 1920298606) {
      goto LABEL_24;
    }
    int v9 = 2003853684;
  }
  else
  {
    if (v7 == 1886530416)
    {
      *(_DWORD *)(a1 + 424) = 1886545266;
      goto LABEL_33;
    }
    int v9 = 1886544244;
  }
LABEL_13:
  if (v7 != v9) {
    goto LABEL_33;
  }
LABEL_14:
  CMTime time = *a3;
  bossStopTimebaseAndAudioContext(a1, a2, &time);
  int v10 = *(_DWORD *)(a1 + 424);
  if (v10 > 1886155887)
  {
    int v11 = 1885435251;
    if (v10 == 1886155888 || v10 == 1886544244) {
      goto LABEL_26;
    }
    if (v10 != 2003853684) {
      goto LABEL_27;
    }
LABEL_25:
    int v11 = 1919247481;
LABEL_26:
    *(_DWORD *)(a1 + 424) = v11;
    goto LABEL_27;
  }
  if (v10 == 1886151033) {
    goto LABEL_25;
  }
  if (v10 == 1886154860)
  {
    if ((*(_DWORD *)(a1 + 456) & 0x1D) == 1)
    {
      unsigned int v12 = *(OpaqueCMTimebase **)(a1 + 112);
      CMTime time = *(CMTime *)(a1 + 444);
      CMTimebaseSetTime(v12, &time);
      *(_OWORD *)(a1 + 444) = *(_OWORD *)&v6->value;
      *(void *)(a1 + 460) = v6->epoch;
    }
    bossReplaceMainQueuesWithSideQueuesAndSwitchMentorsToMainQueues(a1);
    int v11 = 1886545266;
    goto LABEL_26;
  }
LABEL_27:
  *(int32x2_t *)(a1 + 716) = vadd_s32(*(int32x2_t *)(a1 + 716), (int32x2_t)0x100000001);
  if (*(unsigned char *)(a1 + 668))
  {
    CMClockRef HostTimeClock = CMClockGetHostTimeClock();
    CMClockGetTime(&lhs, HostTimeClock);
    CMTime time = *(CMTime *)(a1 + 656);
    CMTimeSubtract(&v20, &lhs, &time);
    *(double *)(a1 + 648) = *(double *)(a1 + 648) + fabs(CMTimeGetSeconds(&v20));
    *(_OWORD *)(a1 + 656) = *(_OWORD *)&v6->value;
    *(void *)(a1 + 672) = v6->epoch;
  }
  CFIndex v15 = *(OpaqueCMTimebase **)(a1 + 112);
  if (v15 && (*(unsigned char *)(a1 + 700) & 1) != 0)
  {
    CMTimebaseGetTime(&v17, v15);
    CMTime time = *(CMTime *)(a1 + 688);
    CMTimeSubtract(&v18, &v17, &time);
    *(double *)(a1 + 680) = *(double *)(a1 + 680) + fabs(CMTimeGetSeconds(&v18));
    *(_OWORD *)(a1 + 688) = *(_OWORD *)&v6->value;
    *(void *)(a1 + 704) = v6->epoch;
  }
LABEL_33:
  *(_DWORD *)(a1 + 432) = 0;
  return MEMORY[0x19970E930](*(void *)(a1 + 576));
}

void bossStopTimebaseAndAudioContext(uint64_t a1, int a2, CMTime *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CMTime v15 = *a3;
  CFDictionaryRef dictionaryRepresentation = 0;
  if (a2 == 1)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 64));
    if (*(unsigned char *)(a1 + 840))
    {
      LODWORD(time.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(uint64_t *)(a1 + 80) >= 1)
    {
      CFIndex v5 = 0;
      uint64_t v6 = *MEMORY[0x1E4F1CF80];
      do
      {
        uint64_t v7 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v5) + 10);
        if (v7)
        {
          uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
          uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v10 = v9 ? v9 : 0;
          int v11 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFDictionaryRef *))(v10 + 48);
          if (v11)
          {
            if (!v11(FigBaseObject, @"NextNonJerkyStopTime", v6, &dictionaryRepresentation)
              && dictionaryRepresentation != 0)
            {
              break;
            }
          }
        }
        ++v5;
      }
      while (*(void *)(a1 + 80) > v5);
    }
    MEMORY[0x19970E930](*(void *)(a1 + 64));
    CFDictionaryRef v13 = dictionaryRepresentation;
    if (dictionaryRepresentation)
    {
      if (dword_1E9350D98)
      {
        *(_DWORD *)os_log_type_t type = 0;
        os_log_type_t v17 = OS_LOG_TYPE_DEFAULT;
        int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        CFDictionaryRef v13 = dictionaryRepresentation;
      }
      CMTimeMakeFromDictionary(&v15, v13);
    }
  }
  CMTime v20 = v15;
  bossSetPossiblyOutsourcedTimebaseRate(a1, (uint64_t)&v20, MEMORY[0x1E4F1F9F8], 0.0, 1.0);
  if (dictionaryRepresentation) {
    CFRelease(dictionaryRepresentation);
  }
}

uint64_t FigAudioQueuePause(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    MEMORY[0x19970E290](*(void *)(a1 + 24));
    if (*(unsigned char *)(a1 + 16))
    {
      uint64_t v10 = FigSignalErrorAt();
    }
    else
    {
      if (!*(unsigned char *)(a1 + 73) && !*(unsigned char *)(a1 + 576))
      {
        uint64_t v12 = 0;
LABEL_31:
        MEMORY[0x19970E2B0](*(void *)(a1 + 24));
        return v12;
      }
      CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 176));
      if (Count < 1)
      {
LABEL_20:
        if (*(unsigned char *)(a1 + 16)) {
          CFNumberRef ValueAtIndex = 0;
        }
        else {
          CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), 0);
        }
        *(unsigned char *)(a1 + 73) = 0;
        *(unsigned char *)(a1 + 578) = 1;
        *(unsigned char *)(a1 + 761) = 0;
        *(unsigned char *)(a1 + 648) = 0;
        subaq_getCurrentQueueTime((uint64_t)ValueAtIndex, &v14);
        if (*(unsigned char *)(a1 + 468)) {
          *(CMTime *)(a1 + 480) = v14;
        }
        uint64_t v12 = 0;
        *(unsigned char *)(a1 + 305) = 0;
        *(unsigned char *)(a1 + 576) = 0;
        *(unsigned char *)(a1 + 649) = 0;
        *(unsigned char *)(a1 + 745) = 0;
        goto LABEL_31;
      }
      CFIndex v3 = Count;
      CFIndex v4 = 0;
      while (1)
      {
        if (*(unsigned char *)(a1 + 16)) {
          CFIndex v5 = 0;
        }
        else {
          CFIndex v5 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), v4);
        }
        if (dword_1E9350B70)
        {
          unsigned int v17 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v7 = v17;
          if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
            unsigned int v8 = v7;
          }
          else {
            unsigned int v8 = v7 & 0xFFFFFFFE;
          }
          if (v8)
          {
            subaq_getCurrentQueueTime((uint64_t)v5, &time);
            Float64 Seconds = CMTimeGetSeconds(&time);
            int v18 = 136316162;
            CMTime v19 = "FigAudioQueuePause";
            __int16 v20 = 2048;
            uint64_t v21 = a1;
            __int16 v22 = 2048;
            unsigned int v23 = v5;
            __int16 v24 = 2082;
            uint64_t v25 = a1 + 776;
            __int16 v26 = 2048;
            Float64 v27 = Seconds;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v10 = FigAudioQueueTimingShimPause(v5[5]);
        if (v10) {
          break;
        }
        if (v3 == ++v4) {
          goto LABEL_20;
        }
      }
    }
    uint64_t v12 = v10;
    goto LABEL_31;
  }

  return FigSignalErrorAt();
}

uint64_t playerasync_RemoveFromPlayQueue(void *a1, const void *a2)
{
  uint64_t v12 = 0;
  uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
  CFIndex v5 = DerivedStorage;
  if (!a2)
  {
    if (*DerivedStorage) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
  uint64_t v6 = (_DWORD *)CMBaseObjectGetDerivedStorage();
  if (*v5) {
    goto LABEL_8;
  }
  if (!v6)
  {
LABEL_11:
    unsigned int v8 = 0;
    goto LABEL_12;
  }
  if (!*v6)
  {
    uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
    unsigned int v8 = a1;
    if ((void *)v7 != a1)
    {
      unsigned int v8 = (const void *)v7;
      uint64_t v9 = FigSignalErrorAt();
      goto LABEL_14;
    }
LABEL_12:
    uint64_t v9 = playerasync_createCommand(a1, 7, a2, &v12);
    int v11 = v12;
    if (v9)
    {
LABEL_15:
      fpa_releaseCommand(v11);
      if (v8) {
        CFRelease(v8);
      }
      return v9;
    }
    playerasync_runAsynchronousCommand(a1, v12);
LABEL_14:
    int v11 = 0;
    goto LABEL_15;
  }
LABEL_8:

  return FigSignalErrorAt();
}

uint64_t playercentral_RemoveFromPlayQueue(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
  }
  else {
    uint64_t v4 = 0;
  }
  if (!*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v6 = *(void *)(DerivedStorage + 16);
    if (v6)
    {
      if (!v4)
      {
        uint64_t v7 = 0;
LABEL_14:
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t))(v9 + 24);
        if (!v10 || v10(v6, v7)) {
          return 0;
        }
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
        int v11 = *(__CFSet **)(DerivedStorage + 80);
        if (a2)
        {
          if (!CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 80), a2))
          {
            MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
            return 0;
          }
          int v11 = (__CFSet *)CFRetain(a2);
          CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 80), a2);
          MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
          if (!v11) {
            return 0;
          }
        }
        else
        {
          CFAllocatorRef v12 = CFGetAllocator(*(CFTypeRef *)(DerivedStorage + 80));
          *(void *)(DerivedStorage + 80) = CFSetCreateMutable(v12, 0, MEMORY[0x1E4F1D548]);
          MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
          CFSetRemoveAllValues(v11);
        }
        CFRelease(v11);
        return 0;
      }
      if (!*(unsigned char *)(v4 + 16))
      {
        uint64_t v7 = *(void *)(v4 + 8);
        goto LABEL_14;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t playerfig_RemoveFromPlayQueue(const void *a1, __CFString *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v34 = 0;
  CFIndex v5 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFIndex v5 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  }
  uint64_t v7 = (_DWORD *)MEMORY[0x1E4F1EBA8];
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    if (a1) {
      uint64_t v8 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    }
    else {
      uint64_t v8 = "";
    }
    strncpy(__dst, v8, 8uLL);
    if (a2) {
      uint64_t v9 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    }
    else {
      uint64_t v9 = "";
    }
    strncpy(__dst, v9, 8uLL);
    kdebug_trace();
  }
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_67;
  }
  if (!a2)
  {
    CMTime v14 = (void *)(DerivedStorage + 496);
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
    playeritemfig_releaseRenderPipelines(a1, 0, 0);
    if (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) < 1)
    {
      BOOL v15 = 0;
    }
    else
    {
      int v20 = 1;
      BOOL v15 = 1;
      do
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
        playerfig_gracefullyRemoveItemFromPlayQueue(a1, ValueAtIndex, v20, 1, 1, 0);
        int v20 = 2;
      }
      while (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504)) > 0);
    }
    if (dword_1E9350BF0 < 2)
    {
      CFDictionaryRef v13 = 0;
      char v25 = 0;
    }
    else
    {
      unsigned int v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      CFDictionaryRef v13 = 0;
      char v25 = 0;
      uint64_t v7 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      CFIndex v5 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
    }
    goto LABEL_42;
  }
  uint64_t v10 = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*v10 || (v11 = v10, (uint64_t v12 = FigCFWeakReferenceHolderCopyReferencedObject()) == 0))
  {
LABEL_67:
    uint64_t v30 = FigSignalErrorAt();
    goto LABEL_58;
  }
  CFDictionaryRef v13 = (const void *)v12;
  if ((const void *)v12 != a1)
  {
    uint64_t v24 = FigSignalErrorAt();
LABEL_57:
    CFRelease(v13);
    uint64_t v30 = v24;
    goto LABEL_58;
  }
  CMTime v14 = (void *)(DerivedStorage + 496);
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 496));
  if (!v11[1])
  {
    if (dword_1E9350BF0)
    {
      __int16 v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19970E2B0](*v14);
    uint64_t v24 = 4294954516;
    CFDictionaryRef v13 = a1;
    goto LABEL_57;
  }
  BOOL v15 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0) == a2;
  int v16 = playerfig_maybeUndoQueueingForItem((uint64_t)a1, a2);
  unsigned int v17 = *(__CFString **)(DerivedStorage + 512);
  if (v17)
  {
    if (v17 == a2)
    {
      uint64_t v18 = *(void *)(CMBaseObjectGetDerivedStorage() + 352);
      if (v18) {
        FigPlaybackBossSetRate(v18, 0, 0.0);
      }
    }
  }
  playerfig_gracefullyRemoveItemFromPlayQueue(a1, a2, 0, 1, 1, &v34);
  if (v16) {
    char v34 = 1;
  }
  if (dword_1E9350BF0 >= 2)
  {
    CMTime v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v7 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    CFIndex v5 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  }
  if (v34)
  {
    MEMORY[0x19970E2B0](*v14);
    *(_OWORD *)CMTime __dst = *MEMORY[0x1E4F1F9F8];
    uint64_t v38 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    long long v35 = *(_OWORD *)__dst;
    uint64_t v36 = v38;
    playerfig_stopResetDisturbReprepareAndResumeWithTransaction(a1, (uint64_t)__dst, (uint64_t)&v35, 0);
    char v25 = 1;
  }
  else
  {
    if (*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 496)) {
      playerfig_prepareNextItemForTransition(a1, *(const void **)(DerivedStorage + 512));
    }
    char v25 = 0;
  }
  CFDictionaryRef v13 = a1;
LABEL_42:
  if (*(unsigned char *)(DerivedStorage + 813)
    || (CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504))) != 0
    && ((uint64_t v29 = *(const void **)(DerivedStorage + 512)) == 0
     || (v40.location = 0,
         v40.length = Count,
         CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v40, v29) + 1 != Count)))
  {
    char v26 = 1;
    if (v25) {
      goto LABEL_45;
    }
    goto LABEL_44;
  }
  char v26 = 0;
  *(unsigned char *)(DerivedStorage + 813) = 1;
  if ((v25 & 1) == 0) {
LABEL_44:
  }
    MEMORY[0x19970E2B0](*v14);
LABEL_45:
  if (v15)
  {
    playerfig_postDeferredCurrentItemDidChangeNotificationWithReason(a1, @"ReasonRemoveFromPlayqueue");
    playerfig_updatePlaybackStateAndBossRate(a1, 7, 0);
  }
  if ((v26 & 1) == 0)
  {
    if (*((_DWORD *)v5 + 764))
    {
      Float64 v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
  }
  uint64_t v24 = 0;
  uint64_t v30 = 0;
  if (v13) {
    goto LABEL_57;
  }
LABEL_58:
  if (*v7 == 1)
  {
    if (a1) {
      uint64_t v31 = (const char *)(CMBaseObjectGetDerivedStorage() + 944);
    }
    else {
      uint64_t v31 = "";
    }
    strncpy(__dst, v31, 8uLL);
    if (a2) {
      CMClockOrTimebaseRef v32 = (const char *)(CMBaseObjectGetDerivedStorage() + 2048);
    }
    else {
      CMClockOrTimebaseRef v32 = "";
    }
    strncpy(__dst, v32, 8uLL);
    kdebug_trace();
  }
  return v30;
}

void playerfig_gracefullyRemoveItemFromPlayQueue(const void *a1, const __CFString *a2, int a3, int a4, int a5, unsigned char *a6)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  uint64_t Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 504));
  v39.location = 0;
  v39.length = Count;
  CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v39, a2);
  CFRetain(a2);
  if (FirstIndexOfValue == -1)
  {
    os_log_type_t v37 = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_52;
  }
  os_log_type_t v37 = OS_LOG_TYPE_DEFAULT;
  BOOL v15 = *(const void **)(DerivedStorage + 512);
  if (!v15)
  {
    BOOL v16 = 1;
    if (!a6) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  v40.location = 0;
  v40.length = Count;
  BOOL v16 = FirstIndexOfValue <= CFArrayGetFirstIndexOfValue(*(CFArrayRef *)(DerivedStorage + 504), v40, v15);
  if (a6) {
LABEL_4:
  }
    *a6 = v16;
LABEL_5:
  BOOL v34 = v16;
  int v17 = a3;
  if (!FirstIndexOfValue)
  {
    if (*(unsigned char *)(DerivedStorage + 544))
    {
      *(unsigned char *)(DerivedStorage + 544) = 0;
      playerfig_postDeferredPrerollWasCancelledNotification((uint64_t)a1, *(_DWORD *)(DerivedStorage + 552));
    }
    uint64_t v18 = MEMORY[0x1E4F1F9F8];
    long long v19 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v12 + 548) = *MEMORY[0x1E4F1F9F8];
    uint64_t v20 = *(void *)(v18 + 16);
    *(void *)(v12 + 564) = v20;
    *(_OWORD *)(v12 + 572) = v19;
    *(void *)(v12 + 588) = v20;
  }
  int v21 = *(_DWORD *)(v12 + 524);
  if (v21)
  {
    *(_DWORD *)(v12 + 524) = 0;
    *(_DWORD *)(v12 + 536) = 0;
    itemfig_postSeekWasCanceledNotification((uint64_t)a1, (uint64_t)a2, v21, 1);
  }
  int v35 = a5;
  __int16 v22 = *(const void **)(v12 + 1384);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(v12 + 1384) = 0;
  }
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 504), FirstIndexOfValue);
  *(unsigned char *)(v12 + 1) = 0;
  *(unsigned char *)(v12 + 1288) = 0;
  *(unsigned char *)(v12 + 993) = 0;
  itemfig_configureDownloadForItem((uint64_t)a2, *(unsigned __int8 *)(v12 + 1329));
  if (a3 != 2 && !FirstIndexOfValue)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigDispatchAsyncPostNotification();
    if (dword_1E9350BF0)
    {
      unsigned int v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    int v17 = a3;
    if (!a3 && Count >= 2)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), 0);
      uint64_t v26 = CMBaseObjectGetDerivedStorage();
      if (*(double *)(v26 + 1552) == 0.0) {
        *(CFAbsoluteTime *)(v26 + 1552) = CFAbsoluteTimeGetCurrent();
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
      if (dword_1E9350BF0)
      {
        CMTime v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      itemfig_makePlaybackPrerequisitePropertiesReady((uint64_t)ValueAtIndex, &v37);
      int v17 = 0;
      if (v37)
      {
        *(unsigned char *)(v12 + 1288) = 1;
      }
      else if (dword_1E9350BF0)
      {
        Float64 v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v17 = 0;
      }
    }
  }
  --Count;
  playerfig_configureDownloadInPlayQueue();
  a5 = v35;
  if (*(const __CFString **)(DerivedStorage + 512) == a2)
  {
    if (FirstIndexOfValue >= Count) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 504), FirstIndexOfValue);
    }
    *(void *)(DerivedStorage + 512) = v28;
  }
  itemfig_antiprepare(a2);
  if (!v17 && !FirstIndexOfValue)
  {
    if (v37)
    {
      if (*(_DWORD *)(DerivedStorage + 60) == 2)
      {
        playerfig_UpdateAudioSessionPreferredDeviceFormat();
        playerfig_UpdateAudioSessionPreferredDeviceSampleRate();
        playerfig_UpdateAudioSessionPreferredNumberOfAudioOutputChannels((uint64_t)a1);
      }
      else if (dword_1E9350BF0)
      {
        uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        a5 = v35;
        int v17 = a3;
      }
      itemfig_InformStakeholdersOfBestAvailableAudioContentType((uint64_t)a2);
    }
    playerfig_applyEQPreset((uint64_t)a1);
  }
  if (!v17 && !v34) {
    playerfig_updateStartHostTimeEstimatesOfItemAtIndexAndFollowingItems((uint64_t)a1, FirstIndexOfValue);
  }
  itemfig_vendAccessLogWhenItemStopsBeingCurrent((uint64_t)a2);
  if (a4) {
    CFDictionaryRef v30 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigPlaybackItemParameter_AsRequested, MEMORY[0x1E4F1CFD0], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else {
    CFDictionaryRef v30 = 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigDispatchAsyncPostNotification();
  if (v30) {
    CFRelease(v30);
  }
LABEL_52:
  if (a5 != 1) {
    goto LABEL_55;
  }
  itemfig_removeAllImageQueues((uint64_t)a2);
  if (*(void *)(DerivedStorage + 512))
  {
    if (Count) {
      goto LABEL_55;
    }
  }
  else
  {
    playerfig_freeTransitionImageQueueAndSlot();
    if (Count) {
      goto LABEL_55;
    }
  }
  playerfig_scheduleVideoTargetImageQueueConfigurationTransitionForItem(a1, a2, MEMORY[0x1E4F1F9F8]);
LABEL_55:
  if (!*(void *)(DerivedStorage + 512))
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 224));
    playerfig_clearVideoLayers(*(const __CFArray **)(DerivedStorage + 208), 0, 0);
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 224));
  }
  playeritemfig_releaseVideoCompositionObjects((uint64_t)a2);
  itemfig_ExternalProtectionStatusChangedGuts((uint64_t)a2);
  itemfig_clearCoordinatedPlaybackSynchronizationTimebase();
  itemfig_releaseAIMEDataAndAllAIMEDataChannelResources();
  CFRelease(a2);
  uint64_t v31 = fp_copyPlayQueueDescription();
  if (dword_1E9350BF0)
  {
    os_log_type_t v37 = OS_LOG_TYPE_DEFAULT;
    CMClockOrTimebaseRef v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v32, v37);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v31) {
    CFRelease(v31);
  }
}

void FigPlayabilityMonitorDestroy(uint64_t a1)
{
  if (*(void *)(a1 + 328)) {
    FigRetainProxyInvalidate();
  }
  uint64_t v2 = *(const void **)(a1 + 8640);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 8640) = 0;
  }
  if (*(void *)(a1 + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(void *)(a1 + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    if (*(unsigned char *)(a1 + 8553))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
    }
  }
  if (*(void *)(a1 + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(void *)(a1 + 48))
  {
    MEMORY[0x19970E290]();
    if (*(int *)(a1 + 64) >= 1)
    {
      do
        FigConditionVariableWaitRelative();
      while (*(int *)(a1 + 64) > 0);
    }
  }
  CFIndex v3 = *(NSObject **)(a1 + 304);
  if (v3)
  {
    uint64_t v4 = *(OpaqueCMTimebase **)(a1 + 24);
    if (v4)
    {
      CMTimebaseRemoveTimerDispatchSource(v4, v3);
      CFIndex v3 = *(NSObject **)(a1 + 304);
    }
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 304));
    *(void *)(a1 + 304) = 0;
  }
  CFIndex v5 = *(NSObject **)(a1 + 296);
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(*(dispatch_object_t *)(a1 + 296));
    *(void *)(a1 + 296) = 0;
  }
  uint64_t v6 = *(NSObject **)(a1 + 320);
  if (v6)
  {
    dispatch_sync_f(v6, 0, (dispatch_function_t)fpm_EmptyDispatchFunc);
    dispatch_release(*(dispatch_object_t *)(a1 + 320));
  }
  uint64_t v7 = *(void **)(a1 + 8560);
  if (v7)
  {
    os_release(v7);
    *(void *)(a1 + 8560) = 0;
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    do
    {
      uint64_t v10 = *(void *)(a1 + 88);
      int v11 = *(const void **)(v10 + v8 + 16);
      if (v11)
      {
        CFRelease(v11);
        uint64_t v10 = *(void *)(a1 + 88);
      }
      uint64_t v12 = *(const void **)(v10 + v8 + 24);
      if (v12)
      {
        CFRelease(v12);
        uint64_t v10 = *(void *)(a1 + 88);
      }
      CFDictionaryRef v13 = *(const void **)(v10 + v8 + 8);
      if (v13)
      {
        CFRelease(v13);
        uint64_t v10 = *(void *)(a1 + 88);
      }
      CMTime v14 = *(const void **)(v10 + v8 + 32);
      if (v14) {
        CFRelease(v14);
      }
      ++v9;
      v8 += 48;
    }
    while (v9 < *(void *)(a1 + 80));
  }
  free(*(void **)(a1 + 88));
  BOOL v15 = *(const void **)(a1 + 24);
  if (v15) {
    CFRelease(v15);
  }
  BOOL v16 = *(const void **)(a1 + 32);
  if (v16) {
    CFRelease(v16);
  }
  int v17 = *(const void **)(a1 + 40);
  if (v17) {
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(a1 + 8568);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 8568) = 0;
  }
  long long v19 = *(const void **)(a1 + 16);
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(a1 + 8);
  if (v20) {
    CFRelease(v20);
  }
  if (*(void *)(a1 + 8632)) {
    MEMORY[0x19970E290]();
  }
  int v21 = *(const void **)(a1 + 8624);
  if (v21) {
    CFRelease(v21);
  }
  if (*(void *)(a1 + 8632)) {
    MEMORY[0x19970E2B0]();
  }
  if (*(void *)(a1 + 328))
  {
    FigRetainProxyRelease();
    *(void *)(a1 + 328) = 0;
  }
  if (*(void *)(a1 + 56))
  {
    FigSimpleMutexDestroy();
    *(void *)(a1 + 56) = 0;
  }
  if (*(void *)(a1 + 8632))
  {
    FigSimpleMutexDestroy();
    *(void *)(a1 + 8632) = 0;
  }
  if (*(void *)(a1 + 72))
  {
    FigConditionVariableDestroy();
    *(void *)(a1 + 72) = 0;
  }
  if (*(void *)(a1 + 48))
  {
    MEMORY[0x19970E2B0]();
    FigSimpleMutexDestroy();
    *(void *)(a1 + 48) = 0;
  }
  __int16 v22 = *(const void **)a1;

  CFRelease(v22);
}

uint64_t FigPlaybackBossGetTime@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (!result || *(unsigned char *)(result + 16) || *(unsigned char *)(result + 120))
  {
    uint64_t v2 = MEMORY[0x1E4F1F9F8];
  }
  else
  {
    if ((*(_DWORD *)(result + 456) & 0x1D) != 1)
    {
      a2[1] = 0;
      a2[2] = 0;
      *a2 = 0;
      return CMTimebaseGetTimeClampedAboveAnchorTime();
    }
    uint64_t v2 = result + 444;
  }
  *(_OWORD *)a2 = *(_OWORD *)v2;
  a2[2] = *(void *)(v2 + 16);
  return result;
}

void FigPlaybackBossInvalidate(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    figPlaybackBossPrerollCompleted(a1, 1);
    MEMORY[0x19970E910](*(void *)(a1 + 576));
    bossBumpCurrentMasterOrder(a1);
    if (*(void *)(a1 + 64)) {
      MEMORY[0x19970E910]();
    }
    bossSetMentorModesToDoNothing(a1, 0, *(void *)(a1 + 80), 1);
    if (*(void *)(a1 + 32)) {
      FigThreadAbortQueueForTeardown();
    }
    if (*(void *)(a1 + 64)) {
      MEMORY[0x19970E930]();
    }
    MEMORY[0x19970E930](*(void *)(a1 + 576));
    if (*(void *)(a1 + 64)) {
      MEMORY[0x19970E910]();
    }
    CFArrayRef v2 = *(const __CFArray **)(a1 + 72);
    if (v2) {
      CopCGFloat y = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2);
    }
    else {
      CopCGFloat y = 0;
    }
    if (*(void *)(a1 + 64)) {
      MEMORY[0x19970E930]();
    }
    if (CFArrayGetCount(Copy) >= 1)
    {
      CFIndex v4 = 0;
      do
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(Copy, v4);
        uint64_t v6 = (void *)ValueAtIndex[15];
        if (v6) {
          VideoMentorInvalidate(v6);
        }
        uint64_t v7 = ValueAtIndex[13];
        if (v7) {
          AudioMentorInvalidate(v7);
        }
        ++v4;
      }
      while (CFArrayGetCount(Copy) > v4);
    }
    MEMORY[0x19970E910](*(void *)(a1 + 24));
    *(unsigned char *)(a1 + 16) = 1;
    FigMemoryBarrier();
    MEMORY[0x19970E930](*(void *)(a1 + 24));
    if (*(void *)(a1 + 112))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    bossRemoveVideoCompositionProcessorNotificationListenersForPrerollForBoss(a1);
    if (*(unsigned char *)(a1 + 126))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      *(unsigned char *)(a1 + 126) = 0;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    uint64_t v8 = *(NSObject **)(a1 + 160);
    if (v8)
    {
      CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(a1 + 112), v8);
      dispatch_source_cancel(*(dispatch_source_t *)(a1 + 160));
      dispatch_release(*(dispatch_object_t *)(a1 + 160));
      *(void *)(a1 + 160) = 0;
    }
    uint64_t v9 = *(NSObject **)(a1 + 360);
    if (v9)
    {
      CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(a1 + 112), v9);
      dispatch_source_cancel(*(dispatch_source_t *)(a1 + 360));
      dispatch_release(*(dispatch_object_t *)(a1 + 360));
      *(void *)(a1 + 360) = 0;
    }
    if (*(void *)(a1 + 64)) {
      MEMORY[0x19970E910]();
    }
    if (*(uint64_t *)(a1 + 80) >= 1)
    {
      CFIndex v10 = 0;
      do
      {
        int v11 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v10);
        uint64_t v12 = (const void *)v11[6];
        if (v12)
        {
          CFRelease(v12);
          v11[6] = 0;
        }
        CFDictionaryRef v13 = (const void *)v11[12];
        if (v13)
        {
          CFRelease(v13);
          v11[12] = 0;
        }
        CMTime v14 = (const void *)v11[32];
        if (v14)
        {
          CFRelease(v14);
          v11[32] = 0;
        }
        ++v10;
      }
      while (*(void *)(a1 + 80) > v10);
    }
    figPlaybackBossTeardownTracks(a1, 1);
    if (*(void *)(a1 + 64)) {
      MEMORY[0x19970E930]();
    }
    if (Copy) {
      CFRelease(Copy);
    }
    BOOL v15 = *(NSObject **)(a1 + 32);
    if (v15)
    {
      dispatch_sync_f(v15, 0, (dispatch_function_t)figPlaybackBossNOOP);
      dispatch_release(*(dispatch_object_t *)(a1 + 32));
      *(void *)(a1 + 32) = 0;
    }
    BOOL v16 = *(const void **)(a1 + 40);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(a1 + 40) = 0;
    }
    int v17 = *(const void **)(a1 + 48);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a1 + 48) = 0;
    }
    uint64_t v18 = *(const void **)(a1 + 56);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(a1 + 56) = 0;
    }
    long long v19 = *(const void **)(a1 + 112);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(a1 + 112) = 0;
    }
    uint64_t v20 = *(const void **)(a1 + 496);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(a1 + 496) = 0;
    }
    int v21 = *(const void **)(a1 + 416);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(a1 + 416) = 0;
    }
    __int16 v22 = *(const void **)(a1 + 536);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(a1 + 536) = 0;
    }
    unsigned int v23 = *(const void **)(a1 + 552);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(a1 + 552) = 0;
    }
    uint64_t v24 = *(const void **)(a1 + 568);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(a1 + 568) = 0;
    }
    if (*(unsigned char *)(a1 + 468) && *(void *)(a1 + 592)) {
      bossRemoveVideoCompositionProcessorNotificationListenersForSeekForBoss(a1);
    }
    char v25 = *(const void **)(a1 + 592);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(a1 + 592) = 0;
    }
  }
}

void figPlaybackBossTeardownTracks(uint64_t a1, int a2)
{
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    CFIndex v4 = 0;
    do
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v4);
      uint64_t v6 = (uint64_t)ValueAtIndex;
      if (a2)
      {
        uint64_t v7 = ValueAtIndex[10];
        if (v7)
        {
          uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v7);
          uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v10 = v9 ? v9 : 0;
          int v11 = *(void (**)(uint64_t, __CFString *, void))(v10 + 56);
          if (v11) {
            v11(FigBaseObject, @"Timebase", 0);
          }
        }
      }
      bossRemoveNotificationListenersForTrack(v6);
      ++v4;
    }
    while (*(void *)(a1 + 80) > v4);
  }
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 72));
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = -1;
  if (*(void *)(a1 + 88) != -1) {
    *(void *)(a1 + 88) = -2;
  }
}

uint64_t AudioMentorInvalidate(uint64_t result)
{
  if (!*(unsigned char *)result)
  {
    uint64_t v1 = result;
    *(unsigned char *)CFDictionaryRef result = 1;
    if (*(void *)(result + 104))
    {
      MEMORY[0x19970E910](*(void *)(result + 96));
      *(_DWORD *)(v1 + 112) = 4;
      *(unsigned char *)(v1 + 116) = 1;
      FigMemoryBarrier();
      MEMORY[0x19970E930](*(void *)(v1 + 96));
      FigSemaphoreSignal();
      FigThreadAbortForTeardown();
      CFDictionaryRef result = FigThreadJoin();
      *(void *)(v1 + 104) = 0;
    }
    uint64_t v2 = *(void *)(v1 + 24);
    if (v2 && *(unsigned char *)(v1 + 40))
    {
      uint64_t v3 = *(void *)(v1 + 32);
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v6 = *(void *)(VTable + 16);
      CFDictionaryRef result = VTable + 16;
      uint64_t v5 = v6;
      uint64_t v7 = v6 ? v5 : 0;
      uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 40);
      if (v8) {
        CFDictionaryRef result = v8(v2, v3);
      }
    }
    if (*(void *)(v1 + 16))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return CMNotificationCenterRemoveListener();
    }
  }
  return result;
}

uint64_t sbcbq_removeLowWaterTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex v4 = (void *)DerivedStorage;
  if (a2) {
    CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(DerivedStorage + 136), *(CMBufferQueueTriggerToken *)(DerivedStorage + 128));
  }
  MEMORY[0x19970E910](v4[13]);
  v4[14] = 0;
  v4[15] = 0;
  MEMORY[0x19970E930](v4[13]);
  v4[16] = 0;
  return 0;
}

void sgffr_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  if (*(void *)(DerivedStorage + 56) && *(unsigned char *)(DerivedStorage + 32))
  {
    sgffr_finishPrerollBatch(a1, 0);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  if (*(void *)v3)
  {
    CFRelease(*(CFTypeRef *)v3);
    *(void *)uint64_t v3 = 0;
  }
  CFIndex v4 = *(const void **)(v3 + 8);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(v3 + 8) = 0;
  }
  uint64_t v5 = *(const void **)(v3 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(v3 + 24) = 0;
  }
  uint64_t v6 = *(const void **)(v3 + 16);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(v3 + 16) = 0;
  }
  uint64_t v7 = *(const void **)(v3 + 40);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(v3 + 40) = 0;
  }
  uint64_t v8 = *(const void **)(v3 + 48);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(v3 + 48) = 0;
  }
  uint64_t v9 = *(const void **)(v3 + 136);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(v3 + 136) = 0;
  }
  uint64_t v10 = *(const void **)(v3 + 56);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(v3 + 56) = 0;
  }
}

uint64_t sbcbq_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  FigBufferQueueRelease();
  FigBufferQueueRelease();
  uint64_t v1 = (const void *)DerivedStorage[20];
  if (v1) {
    CFRelease(v1);
  }
  if (*DerivedStorage) {
    FigSimpleMutexDestroy();
  }
  uint64_t result = DerivedStorage[13];
  if (result)
  {
    return FigSimpleMutexDestroy();
  }
  return result;
}

void *figPlaybackBossFinalize(void *a1)
{
  FigPlaybackBossInvalidate((uint64_t)a1);
  FigSimpleMutexDestroy();
  a1[72] = 0;
  FigSimpleMutexDestroy();
  a1[3] = 0;
  FigSimpleMutexDestroy();
  a1[8] = 0;
  uint64_t v2 = (const void *)a1[9];
  if (v2)
  {
    CFRelease(v2);
    a1[9] = 0;
  }
  uint64_t v3 = (void *)a1[98];
  if (v3) {
    os_release(v3);
  }

  return memset(a1 + 2, 85, 0x348uLL);
}

void FigSyncMomentSourceDestroy(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void playercentral_removeItemFromPlayQueueWithoutInformingSubPlayer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  if (!CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 80), a2))
  {
    JUMPOUT(0x19970E930);
  }
  CFTypeRef v4 = CFRetain(a2);
  CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 80), a2);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  if (v4)
  {
    CFRelease(v4);
  }
}

void figAudioQueueRenderPipelineFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  figAudioQueueRenderPipelineInvalidate(a1);
  uint64_t v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  CFTypeRef v4 = (const void *)DerivedStorage[4];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[4] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[15];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[15] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[23];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[23] = 0;
  }
  uint64_t v7 = (const void *)DerivedStorage[7];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[7] = 0;
  }
  if (DerivedStorage[6])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[6] = 0;
  }
  if (DerivedStorage[1])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[1] = 0;
  }
  uint64_t v8 = DerivedStorage[2];
  if (v8)
  {
    dispatch_release(v8);
    DerivedStorage[2] = 0;
  }
  uint64_t v9 = DerivedStorage[3];
  if (v9)
  {
    dispatch_release(v9);
    DerivedStorage[3] = 0;
  }
}

uint64_t figAudioQueueRenderPipelineInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  uint64_t v3 = *(NSObject **)(DerivedStorage + 24);
  if (v3 && v3 != dispatch_get_current_queue()) {
    dispatch_sync_f(v3, 0, (dispatch_function_t)faqrp_noop);
  }
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = *(void *)(DerivedStorage + 40);
    if (v4)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
      FigAudioQueueInvalidate(v4);
    }
    faqrp_setTimebase(a1, 0);
    *(unsigned char *)uint64_t DerivedStorage = 1;
  }
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  return 0;
}

void FigAudioQueueInvalidate(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 24))
    {
      MEMORY[0x19970E290]();
      if (*(unsigned char *)(a1 + 16))
      {
        JUMPOUT(0x19970E2B0);
      }
      *(unsigned char *)(a1 + 16) = 1;
      FigMemoryBarrier();
      MEMORY[0x19970E2B0](*(void *)(a1 + 24));
    }
    else
    {
      if (*(unsigned char *)(a1 + 16)) {
        return;
      }
      *(unsigned char *)(a1 + 16) = 1;
      FigMemoryBarrier();
    }
    if (*(void *)(a1 + 288))
    {
      *(unsigned char *)(a1 + 304) = 1;
      FigMemoryBarrier();
      FigSemaphoreSignal();
      FigThreadJoin();
      *(void *)(a1 + 288) = 0;
    }
    uint64_t v2 = *(NSObject **)(a1 + 344);
    if (v2) {
      dispatch_source_cancel(v2);
    }
    uint64_t v3 = *(NSObject **)(a1 + 32);
    if (v3) {
      dispatch_sync_f(v3, 0, (dispatch_function_t)faq_noop);
    }
    uint64_t v4 = *(NSObject **)(a1 + 344);
    if (v4)
    {
      dispatch_release(v4);
      *(void *)(a1 + 344) = 0;
    }
    uint64_t v5 = *(void *)(a1 + 24);
    if (v5) {
      MEMORY[0x19970E290](*(void *)(a1 + 24));
    }
    CFArrayRef v6 = *(const __CFArray **)(a1 + 176);
    if (v6)
    {
      CFIndex Count = CFArrayGetCount(v6);
      if (Count >= 1)
      {
        CFIndex v8 = Count;
        for (CFIndex i = 0; i != v8; ++i)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 176), i);
          uint64_t v11 = ValueAtIndex[5];
          if (v11)
          {
            if (*(void *)(a1 + 720))
            {
              faq_disconnectFromOfflineMixer(a1, (uint64_t)ValueAtIndex);
              uint64_t v11 = ValueAtIndex[5];
            }
            FigAudioQueueTimingShimStop(v11, 1u);
          }
        }
      }
      uint64_t v12 = *(const void **)(a1 + 176);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(a1 + 176) = 0;
      }
    }
    if (v5) {
      MEMORY[0x19970E2B0](*(void *)(a1 + 24));
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(void *)(a1 + 720) = 0;
    uint64_t v13 = *(void *)(a1 + 24);
    if (v13) {
      MEMORY[0x19970E290](*(void *)(a1 + 24));
    }
    while (1)
    {
      CMTime v14 = *(void **)(a1 + 184);
      if (!v14) {
        break;
      }
      *(void *)(a1 + 184) = *v14;
      faq_destroyTransitionRecord(v14);
    }
    if (v13) {
      MEMORY[0x19970E2B0](*(void *)(a1 + 24));
    }
    BOOL v15 = *(const void **)(a1 + 104);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(a1 + 104) = 0;
    }
    BOOL v16 = *(opaqueCMBufferQueue **)(a1 + 64);
    if (v16)
    {
      int v17 = *(opaqueCMBufferQueueTriggerToken **)(a1 + 88);
      if (v17)
      {
        CMBufferQueueRemoveTrigger(v16, v17);
        *(void *)(a1 + 88) = 0;
      }
      uint64_t v18 = *(opaqueCMBufferQueueTriggerToken **)(a1 + 96);
      if (v18)
      {
        CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(a1 + 64), v18);
        *(void *)(a1 + 96) = 0;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CFRelease(*(CFTypeRef *)(a1 + 80));
      FigBufferQueueRelease();
      *(void *)(a1 + 64) = 0;
    }
    faq_removeAudioProcessingTapListeners(a1);
    *(unsigned char *)(a1 + 236) = 0;
    *(unsigned char *)(a1 + 204) = 0;
    *(unsigned char *)(a1 + 212) = 0;
    *(unsigned char *)(a1 + 220) = 0;
    *(unsigned char *)(a1 + 228) = 0;
    long long v19 = *(const void **)(a1 + 240);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(a1 + 240) = 0;
    }
    uint64_t v20 = *(const void **)(a1 + 256);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(a1 + 256) = 0;
    }
    int v21 = *(const void **)(a1 + 264);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(a1 + 264) = 0;
    }
    __int16 v22 = *(const void **)(a1 + 272);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(a1 + 272) = 0;
    }
    unsigned int v23 = *(const void **)(a1 + 656);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(a1 + 656) = 0;
    }
    uint64_t v24 = *(const void **)(a1 + 664);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(a1 + 664) = 0;
    }
    char v25 = *(const void **)(a1 + 56);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(a1 + 56) = 0;
    }
    uint64_t v26 = *(const void **)(a1 + 736);
    if (v26)
    {
      CFRelease(v26);
      *(void *)(a1 + 736) = 0;
    }
    Float64 v27 = *(const void **)(a1 + 704);
    if (v27)
    {
      CFRelease(v27);
      *(void *)(a1 + 704) = 0;
    }
    faq_clearSeamHandlingState((__n128 *)a1);
    uint64_t v28 = *(void **)(a1 + 752);
    if (v28)
    {
      os_release(v28);
      *(void *)(a1 + 752) = 0;
    }
  }
}

uint64_t itemasync_Invalidate(void *a1)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    uint64_t v3 = (const void *)v2;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (FigAtomicCompareAndSwap32())
    {
      CFRetain(a1);
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 56), a1, (dispatch_function_t)itemasync_InvalidateOnQueue);
    }
    CFRelease(v3);
  }
  return 0;
}

uint64_t itemfig_Invalidate(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    uint64_t v4 = (const void *)v3;
    if (!*(unsigned char *)DerivedStorage)
    {
      uint64_t v5 = CMBaseObjectGetDerivedStorage();
      if (dword_1E9350BF0)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      itemfig_invalidateRampOutTimer();
      MEMORY[0x19970E290](*(void *)(v5 + 496));
      int v7 = *(unsigned __int8 *)(DerivedStorage + 1);
      if (*(unsigned char *)(DerivedStorage + 1))
      {
        CFRetain(a1);
        MEMORY[0x19970E2B0](*(void *)(v5 + 496));
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(void (**)(const void *, const void *))(v9 + 24);
        if (v10) {
          v10(v4, a1);
        }
      }
      else
      {
        MEMORY[0x19970E2B0](*(void *)(v5 + 496));
      }
      *(unsigned char *)uint64_t DerivedStorage = 1;
      if (*(_DWORD *)(DerivedStorage + 524))
      {
        uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v12 = *(const void **)(DerivedStorage + 1384);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(DerivedStorage + 1384) = 0;
      }
      if (*(void *)(DerivedStorage + 1344))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        uint64_t v13 = *(const void **)(DerivedStorage + 1344);
        if (v13)
        {
          CFRelease(v13);
          *(void *)(DerivedStorage + 1344) = 0;
        }
      }
      if (*(void *)(CMBaseObjectGetDerivedStorage() + 1216))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListeners();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListeners();
      }
      itemfig_updateListenersForVideoTrack((uint64_t)a1, 0);
      CMTime v14 = *(const void **)(DerivedStorage + 960);
      if (v14) {
        CFRelease(v14);
      }
      BOOL v15 = *(const void **)(DerivedStorage + 944);
      if (v15) {
        CFRelease(v15);
      }
      BOOL v16 = *(const void **)(DerivedStorage + 1280);
      if (v16)
      {
        CFRelease(v16);
        *(void *)(DerivedStorage + 1280) = 0;
      }
      int v17 = *(const void **)(DerivedStorage + 1224);
      if (v17)
      {
        CFRelease(v17);
        *(void *)(DerivedStorage + 1224) = 0;
      }
      uint64_t v18 = *(const void **)(DerivedStorage + 1232);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(DerivedStorage + 1232) = 0;
      }
      itemfig_removeAllImageQueues((uint64_t)a1);
      long long v19 = *(const void **)(DerivedStorage + 864);
      if (v19)
      {
        CFRelease(v19);
        *(void *)(DerivedStorage + 864) = 0;
      }
      uint64_t v20 = *(const void **)(DerivedStorage + 1128);
      if (v20)
      {
        CFRelease(v20);
        *(void *)(DerivedStorage + 1128) = 0;
      }
      playeritemfig_releaseVideoCompositionObjects((uint64_t)a1);
      int v21 = *(const void **)(DerivedStorage + 656);
      if (v21)
      {
        CFRelease(v21);
        *(void *)(DerivedStorage + 656) = 0;
      }
      __int16 v22 = *(const void **)(DerivedStorage + 744);
      if (v22)
      {
        CFRelease(v22);
        *(void *)(DerivedStorage + 744) = 0;
      }
      unsigned int v23 = *(const void **)(DerivedStorage + 752);
      if (v23)
      {
        CFRelease(v23);
        *(void *)(DerivedStorage + 752) = 0;
      }
      uint64_t v24 = *(const void **)(DerivedStorage + 760);
      if (v24)
      {
        CFRelease(v24);
        *(void *)(DerivedStorage + 760) = 0;
      }
      char v25 = *(const void **)(DerivedStorage + 768);
      if (v25)
      {
        CFRelease(v25);
        *(void *)(DerivedStorage + 768) = 0;
      }
      uint64_t v26 = *(const void **)(DerivedStorage + 920);
      if (v26)
      {
        CFRelease(v26);
        *(void *)(DerivedStorage + 920) = 0;
      }
      Float64 v27 = *(const void **)(DerivedStorage + 928);
      if (v27)
      {
        CFRelease(v27);
        *(void *)(DerivedStorage + 928) = 0;
      }
      uint64_t v28 = *(const void **)(DerivedStorage + 1448);
      if (v28)
      {
        CFRelease(v28);
        *(void *)(DerivedStorage + 1448) = 0;
      }
      uint64_t v29 = *(const void **)(DerivedStorage + 1456);
      if (v29)
      {
        CFRelease(v29);
        *(void *)(DerivedStorage + 1456) = 0;
      }
      CFDictionaryRef v30 = *(const void **)(DerivedStorage + 2032);
      if (v30)
      {
        CFRelease(v30);
        *(void *)(DerivedStorage + 2032) = 0;
      }
      uint64_t v31 = *(const void **)(DerivedStorage + 2136);
      if (v31)
      {
        CFRelease(v31);
        *(void *)(DerivedStorage + 2136) = 0;
      }
      if (*(void *)(DerivedStorage + 968))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      CMClockOrTimebaseRef v32 = *(const void **)(DerivedStorage + 976);
      if (v32)
      {
        CFRelease(v32);
        *(void *)(DerivedStorage + 976) = 0;
      }
      CMTime v33 = *(const void **)(DerivedStorage + 1336);
      if (v33)
      {
        CFRelease(v33);
        *(void *)(DerivedStorage + 1336) = 0;
      }
      if (*(void *)(DerivedStorage + 128))
      {
        CMByteStreamGetCMBaseObject();
        FigCRABSGetClassID();
        if (CMBaseObjectIsMemberOfClass())
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterRemoveWeakListener();
        }
      }
      BOOL v34 = *(const void **)(DerivedStorage + 632);
      if (v34)
      {
        CFRelease(v34);
        *(void *)(DerivedStorage + 632) = 0;
      }
      int v35 = *(const void **)(DerivedStorage + 112);
      if (v35)
      {
        CFRelease(v35);
        *(void *)(DerivedStorage + 112) = 0;
      }
      CFArrayRef v36 = *(const __CFArray **)(DerivedStorage + 648);
      if (v36)
      {
        CFIndex Count = CFArrayGetCount(v36);
        if (Count >= 1)
        {
          CFIndex v38 = Count;
          for (CFIndex i = 0; i != v38; ++i)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), i);
            if (ValueAtIndex[1] == 1986618469) {
              itemfig_clearTrackImageQueueTable((uint64_t)a1, (uint64_t)ValueAtIndex);
            }
          }
        }
      }
      CFNumberRef v41 = *(const void **)(DerivedStorage + 680);
      if (v41)
      {
        CFRelease(v41);
        *(void *)(DerivedStorage + 680) = 0;
      }
      CMTimeValue v42 = *(const void **)(DerivedStorage + 784);
      if (v42)
      {
        CFRelease(v42);
        *(void *)(DerivedStorage + 784) = 0;
      }
      uint64_t v43 = *(const void **)(DerivedStorage + 792);
      if (v43)
      {
        CFRelease(v43);
        *(void *)(DerivedStorage + 792) = 0;
      }
      __int16 v44 = *(const void **)(DerivedStorage + 800);
      if (v44)
      {
        CFRelease(v44);
        *(void *)(DerivedStorage + 800) = 0;
      }
      double v45 = *(const void **)(DerivedStorage + 1792);
      if (v45)
      {
        CFRelease(v45);
        *(void *)(DerivedStorage + 1792) = 0;
      }
      __int16 v46 = *(const void **)(DerivedStorage + 1816);
      if (v46)
      {
        CFRelease(v46);
        *(void *)(DerivedStorage + 1816) = 0;
      }
      double v47 = *(const void **)(DerivedStorage + 1832);
      if (v47)
      {
        CFRelease(v47);
        *(void *)(DerivedStorage + 1832) = 0;
      }
      __int16 v48 = *(const void **)(DerivedStorage + 1840);
      if (v48)
      {
        CFRelease(v48);
        *(void *)(DerivedStorage + 1840) = 0;
      }
      int v49 = *(const void **)(DerivedStorage + 1848);
      if (v49)
      {
        CFRelease(v49);
        *(void *)(DerivedStorage + 1848) = 0;
      }
      CMTime v50 = *(const void **)(DerivedStorage + 1160);
      if (v50)
      {
        CFRelease(v50);
        *(void *)(DerivedStorage + 1160) = 0;
      }
      itemfig_reportingAgentTeardown();
      CFBooleanRef v51 = *(const void **)(DerivedStorage + 2008);
      if (v51)
      {
        CFRelease(v51);
        *(void *)(DerivedStorage + 2008) = 0;
      }
      uint64_t v52 = *(const void **)(DerivedStorage + 1168);
      if (v52)
      {
        CFRelease(v52);
        *(void *)(DerivedStorage + 1168) = 0;
      }
      CMTime v53 = *(NSObject **)(DerivedStorage + 104);
      if (v53)
      {
        dispatch_release(v53);
        *(void *)(DerivedStorage + 104) = 0;
      }
      CMTime v54 = *(const void **)(DerivedStorage + 1512);
      if (v54)
      {
        CFRelease(v54);
        *(void *)(DerivedStorage + 1512) = 0;
      }
      CMTime v55 = *(const void **)(DerivedStorage + 1704);
      if (v55)
      {
        CFRelease(v55);
        *(void *)(DerivedStorage + 1704) = 0;
      }
      CMTimeEpoch v56 = *(const void **)(DerivedStorage + 1712);
      if (v56)
      {
        CFRelease(v56);
        *(void *)(DerivedStorage + 1712) = 0;
      }
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      itemfig_unregisterAndDestroyPlayabilityMonitorNotification();
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 1736));
      double v57 = *(const void **)(DerivedStorage + 1728);
      if (v57)
      {
        CFRelease(v57);
        *(void *)(DerivedStorage + 1728) = 0;
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 1736));
      uint64_t v58 = *(const void **)(DerivedStorage + 1752);
      if (v58)
      {
        CFRelease(v58);
        *(void *)(DerivedStorage + 1752) = 0;
      }
      uint64_t v59 = *(const void **)(DerivedStorage + 1432);
      if (v59)
      {
        CFRelease(v59);
        *(void *)(DerivedStorage + 1432) = 0;
      }
      long long v60 = *(const void **)(DerivedStorage + 1464);
      if (v60)
      {
        CFRelease(v60);
        *(void *)(DerivedStorage + 1464) = 0;
      }
      CMTime v61 = *(const void **)(DerivedStorage + 1472);
      if (v61)
      {
        CFRelease(v61);
        *(void *)(DerivedStorage + 1472) = 0;
      }
      CMTime v62 = *(const void **)(DerivedStorage + 1480);
      if (v62)
      {
        CFRelease(v62);
        *(void *)(DerivedStorage + 1480) = 0;
      }
      CMTime v63 = *(const void **)(DerivedStorage + 1488);
      if (v63)
      {
        CFRelease(v63);
        *(void *)(DerivedStorage + 1488) = 0;
      }
      CMTime v64 = *(const void **)(DerivedStorage + 1496);
      if (v64)
      {
        CFRelease(v64);
        *(void *)(DerivedStorage + 1496) = 0;
      }
      CMTime v65 = *(const void **)(DerivedStorage + 1504);
      if (v65)
      {
        CFRelease(v65);
        *(void *)(DerivedStorage + 1504) = 0;
      }
      FPSupport_InvalidateMetadataStorage(*(void **)(DerivedStorage + 1760));
      CMTime v66 = *(void **)(DerivedStorage + 2024);
      if (v66)
      {

        *(void *)(DerivedStorage + 2024) = 0;
      }
      CMTime v67 = *(const void **)(DerivedStorage + 344);
      if (v67)
      {
        CFRelease(v67);
        *(void *)(DerivedStorage + 344) = 0;
      }
      CMTime v68 = *(const void **)(DerivedStorage + 528);
      if (v68)
      {
        CFRelease(v68);
        *(void *)(DerivedStorage + 528) = 0;
      }
      CMTime v69 = *(const void **)(DerivedStorage + 1024);
      if (v69)
      {
        CFRelease(v69);
        *(void *)(DerivedStorage + 1024) = 0;
      }
      long long v70 = *(const void **)(DerivedStorage + 2088);
      if (v70)
      {
        CFRelease(v70);
        *(void *)(DerivedStorage + 2088) = 0;
      }
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 2096));
      long long v71 = *(const void **)(DerivedStorage + 2104);
      if (v71)
      {
        CFRelease(v71);
        *(void *)(DerivedStorage + 2104) = 0;
      }
      uint64_t v72 = *(const void **)(DerivedStorage + 2112);
      if (v72)
      {
        CFRelease(v72);
        *(void *)(DerivedStorage + 2112) = 0;
      }
      long long v73 = *(const void **)(DerivedStorage + 2120);
      if (v73)
      {
        CFRelease(v73);
        *(void *)(DerivedStorage + 2120) = 0;
      }
      MEMORY[0x19970E930](*(void *)(DerivedStorage + 2096));
      if (v7) {
        CFRelease(a1);
      }
      MEMORY[0x19970E910](*(void *)(v5 + 40));
      CFSetRemoveValue(*(CFMutableSetRef *)(v5 + 32), a1);
      MEMORY[0x19970E930](*(void *)(v5 + 40));
    }
    CFRelease(v4);
  }
  return 0;
}

void ReleaseSampleDescriptionInfoArray(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 56);
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
      {
        CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), i);
        free(ValueAtIndex);
      }
    }
    int v7 = *(const void **)(a1 + 56);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 56) = 0;
    }
  }
  uint64_t v8 = *(const void **)(a1 + 40);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 40) = 0;
  }
}

void ReleaseDataReferenceInfoArray(uint64_t a1)
{
  CFArrayRef v2 = *(const __CFArray **)(a1 + 64);
  if (v2)
  {
    CFIndex Count = CFArrayGetCount(v2);
    if (Count >= 1)
    {
      CFIndex v4 = Count;
      for (CFIndex i = 0; i != v4; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), i);
        int v7 = (const void *)ValueAtIndex[1];
        if (v7) {
          CFRelease(v7);
        }
        uint64_t v8 = (const void *)ValueAtIndex[2];
        if (v8) {
          CFRelease(v8);
        }
        free(ValueAtIndex);
      }
    }
    uint64_t v9 = *(const void **)(a1 + 64);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 64) = 0;
    }
  }
}

void FigiTunesMetadataFinalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    *uint64_t DerivedStorage = 0;
  }
}

uint64_t FigCachedFileByteStreamFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v2 = *(void *)(DerivedStorage + 24);
  if (v2)
  {
    if (*(unsigned char *)(DerivedStorage + 120))
    {
      FigReadCacheContainerShowDisinterestInCaching(v2);
      uint64_t v2 = *(void *)(DerivedStorage + 24);
    }
    FigReadCacheReleaseContainer(v2);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v3 = *(void **)(DerivedStorage + 32);
  if (v3)
  {
    FigReadCacheDisposeRequestCompletion(v3);
    *(void *)(DerivedStorage + 32) = 0;
  }
  FigSimpleMutexDestroy();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  CFIndex v4 = *(const void **)(DerivedStorage + 16);
  if (v4) {
    CFRelease(v4);
  }

  return FigByteStreamStatsTeardownWorker();
}

uint64_t FigReadCacheReleaseContainer(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = malloc_type_calloc(1uLL, 0x40uLL, 0x1062040E84F1957uLL);
    v2[4] = 4;
    *((void *)v2 + 3) = a1;
    IssueFigReadCacheRequest(v2);
  }
  return 0;
}

void FigReadCacheDisposeRequestCompletion(void *a1)
{
  if (a1)
  {
    FigSimpleMutexDestroy();
    FigSemaphoreDestroy();
    free(a1);
  }
}

void itemfig_Finalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  itemfig_Invalidate(a1);
  CFIndex v4 = *(const void **)(DerivedStorage + 1744);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 1776);
  if (v5) {
    CFRelease(v5);
  }
  CFArrayRef v6 = *(const void **)(DerivedStorage + 16);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 16) = 0;
  }
  FigStopForwardingMediaServicesProcessDeathNotification();
  FigStopForwardingMediaServicesProcessDeathNotification();
  int v7 = *(const void **)(DerivedStorage + 824);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = 0;
  uint64_t v9 = DerivedStorage + 368;
  do
  {
    uint64_t v10 = *(const void **)(v9 + v8);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(v9 + v8) = 0;
    }
    v8 += 8;
  }
  while (v8 != 112);
  uint64_t v11 = *(const void **)(DerivedStorage + 1760);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 1760) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 1768);
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 128);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 128) = 0;
  }
  CMTime v14 = *(const void **)(DerivedStorage + 968);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 968) = 0;
  }
  BOOL v15 = *(const void **)(DerivedStorage + 1216);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 1216) = 0;
  }
  BOOL v16 = *(const void **)(DerivedStorage + 1248);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 1248) = 0;
  }
  int v17 = *(const void **)(DerivedStorage + 1272);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(DerivedStorage + 1272) = 0;
  }
  CFArrayRef v18 = *(const __CFArray **)(DerivedStorage + 648);
  if (v18)
  {
    CFIndex Count = CFArrayGetCount(v18);
    if (Count >= 1)
    {
      CFIndex v20 = Count;
      for (CFIndex i = 0; i != v20; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 648), i);
        unsigned int v23 = ValueAtIndex;
        uint64_t v24 = (const void *)ValueAtIndex[2];
        if (v24)
        {
          int v25 = *((_DWORD *)ValueAtIndex + 1);
          BOOL v26 = v25 == 1986618469 || v25 == 1635088502;
          if (!v26 || (FigStopForwardingMediaServicesProcessDeathNotification(), (uint64_t v24 = (const void *)v23[2]) != 0))
          {
            CFRelease(v24);
            v23[2] = 0;
          }
        }
        Float64 v27 = (const void *)v23[3];
        if (v27)
        {
          CFRelease(v27);
          v23[3] = 0;
        }
        uint64_t v28 = (const void *)v23[4];
        if (v28)
        {
          CFRelease(v28);
          v23[4] = 0;
        }
        uint64_t v29 = (const void *)v23[5];
        if (v29)
        {
          CFRelease(v29);
          v23[5] = 0;
        }
        CFDictionaryRef v30 = (const void *)v23[6];
        if (v30)
        {
          CFRelease(v30);
          v23[6] = 0;
        }
        uint64_t v31 = (const void *)v23[7];
        if (v31)
        {
          CFRelease(v31);
          v23[7] = 0;
        }
        CMClockOrTimebaseRef v32 = (const void *)v23[10];
        if (v32)
        {
          CFRelease(v32);
          v23[10] = 0;
        }
        CMTime v33 = (const void *)v23[12];
        if (v33)
        {
          CFRelease(v33);
          v23[12] = 0;
        }
        BOOL v34 = (const void *)v23[11];
        if (v34)
        {
          CFRelease(v34);
          v23[11] = 0;
        }
        int v35 = (const void *)v23[13];
        if (v35)
        {
          CFRelease(v35);
          v23[13] = 0;
        }
        CFArrayRef v36 = (const void *)v23[14];
        if (v36)
        {
          CFRelease(v36);
          v23[14] = 0;
        }
        os_log_type_t v37 = (const void *)v23[16];
        if (v37)
        {
          CFRelease(v37);
          v23[16] = 0;
        }
        CFIndex v38 = (const void *)v23[18];
        if (v38)
        {
          CFRelease(v38);
          v23[18] = 0;
        }
        CFRange v39 = (const void *)v23[19];
        if (v39)
        {
          CFRelease(v39);
          v23[19] = 0;
        }
        CFRange v40 = (const void *)v23[22];
        if (v40)
        {
          CFRelease(v40);
          v23[22] = 0;
        }
        CFNumberRef v41 = (const void *)v23[23];
        if (v41)
        {
          CFRelease(v41);
          v23[23] = 0;
        }
        CMTimeValue v42 = (const void *)v23[24];
        if (v42)
        {
          CFRelease(v42);
          v23[24] = 0;
        }
        uint64_t v43 = (const void *)v23[26];
        if (v43)
        {
          CFRelease(v43);
          v23[26] = 0;
        }
        __int16 v44 = (const void *)v23[25];
        if (v44)
        {
          CFRelease(v44);
          v23[25] = 0;
        }
        double v45 = (const void *)v23[27];
        if (v45)
        {
          CFRelease(v45);
          v23[27] = 0;
        }
        __int16 v46 = (const void *)v23[28];
        if (v46)
        {
          CFRelease(v46);
          v23[28] = 0;
        }
        double v47 = (const void *)v23[29];
        if (v47)
        {
          CFRelease(v47);
          v23[29] = 0;
        }
        __int16 v48 = (const void *)v23[31];
        if (v48)
        {
          CFRelease(v48);
          v23[31] = 0;
        }
        int v49 = (const void *)v23[30];
        if (v49)
        {
          CFRelease(v49);
          v23[30] = 0;
        }
        CMTime v50 = (const void *)v23[32];
        if (v50)
        {
          CFRelease(v50);
          v23[32] = 0;
        }
        CFBooleanRef v51 = (const void *)v23[33];
        if (v51)
        {
          CFRelease(v51);
          v23[33] = 0;
        }
        uint64_t v52 = (const void *)v23[34];
        if (v52)
        {
          CFRelease(v52);
          v23[34] = 0;
        }
        CMTime v53 = (const void *)v23[35];
        if (v53)
        {
          CFRelease(v53);
          v23[35] = 0;
        }
        CMTime v54 = (const void *)v23[36];
        if (v54)
        {
          CFRelease(v54);
          v23[36] = 0;
        }
        CMTime v55 = (const void *)v23[37];
        if (v55)
        {
          CFRelease(v55);
          v23[37] = 0;
        }
        CMTimeEpoch v56 = (const void *)v23[21];
        if (v56) {
          CFRelease(v56);
        }
        free(v23);
      }
    }
    double v57 = *(const void **)(DerivedStorage + 648);
    if (v57)
    {
      CFRelease(v57);
      *(void *)(DerivedStorage + 648) = 0;
    }
  }
  if (*(void *)(DerivedStorage + 640))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 640) = 0;
  }
  uint64_t v58 = *(const void **)(DerivedStorage + 1048);
  if (v58)
  {
    CFRelease(v58);
    *(void *)(DerivedStorage + 1048) = 0;
  }
  uint64_t v59 = *(const void **)(DerivedStorage + 1088);
  if (v59)
  {
    CFRelease(v59);
    *(void *)(DerivedStorage + 1088) = 0;
  }
  itemfig_releaseAIMEDataAndAllAIMEDataChannelResources();
  long long v60 = *(const void **)(DerivedStorage + 1096);
  if (v60)
  {
    CFRelease(v60);
    *(void *)(DerivedStorage + 1096) = 0;
  }
  if (*(void *)(DerivedStorage + 1120))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 1120) = 0;
  }
  if (*(void *)(DerivedStorage + 504))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 504) = 0;
  }
  CMTime v61 = *(const void **)(DerivedStorage + 512);
  if (v61)
  {
    CFRelease(v61);
    *(void *)(DerivedStorage + 512) = 0;
  }
  if (*(void *)(DerivedStorage + 1208)) {
    FigSimpleMutexDestroy();
  }
  if (*(void *)(DerivedStorage + 616)) {
    FigSimpleMutexDestroy();
  }
  if (*(void *)(DerivedStorage + 1736)) {
    FigSimpleMutexDestroy();
  }
  if (*(void *)(DerivedStorage + 1400)) {
    FigSimpleMutexDestroy();
  }
  if (*(void *)(DerivedStorage + 672))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 672) = 0;
  }
  if (*(void *)(DerivedStorage + 776))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 776) = 0;
  }
  if (*(void *)(DerivedStorage + 848))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 848) = 0;
  }
  CMTime v62 = *(const void **)(DerivedStorage + 1144);
  if (v62)
  {
    CFRelease(v62);
    *(void *)(DerivedStorage + 1144) = 0;
  }
  CMTime v63 = *(const void **)(DerivedStorage + 328);
  if (v63)
  {
    CFRelease(v63);
    *(void *)(DerivedStorage + 328) = 0;
  }
  CMTime v64 = *(const void **)(DerivedStorage + 336);
  if (v64)
  {
    CFRelease(v64);
    *(void *)(DerivedStorage + 336) = 0;
  }
  CMTime v65 = *(const void **)(DerivedStorage + 1032);
  if (v65)
  {
    CFRelease(v65);
    *(void *)(DerivedStorage + 1032) = 0;
  }
  if (*(void *)(DerivedStorage + 1896))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 1896) = 0;
  }
  CMTime v66 = *(const void **)(DerivedStorage + 2072);
  if (v66)
  {
    CFRelease(v66);
    *(void *)(DerivedStorage + 2072) = 0;
  }
  CMTime v67 = *(const void **)(DerivedStorage + 2080);
  if (v67)
  {
    CFRelease(v67);
    *(void *)(DerivedStorage + 2080) = 0;
  }
  if (*(void *)(DerivedStorage + 2096))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 2096) = 0;
  }
  CMTime v68 = *(const void **)(DerivedStorage + 2152);
  if (v68)
  {
    CFRelease(v68);
    *(void *)(DerivedStorage + 2152) = 0;
  }
  CMTime v69 = *(const void **)(DerivedStorage + 2144);
  if (v69)
  {
    CFRelease(v69);
    *(void *)(DerivedStorage + 2144) = 0;
  }
  long long v70 = *(const void **)(DerivedStorage + 984);
  if (v70)
  {
    CFRelease(v70);
    *(void *)(DerivedStorage + 984) = 0;
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

void playerasync_removeItemFromPlayQueueWithoutInformingSubPlayer(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFSetContainsValue(*(CFSetRef *)(DerivedStorage + 48), a2))
  {
    CFRetain(a2);
    CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 48), a2);
    CFRelease(a2);
  }
}

void itemasync_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 4))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(unsigned char *)(DerivedStorage + 4) = 0;
  }
  if (*(void *)(DerivedStorage + 24))
  {
    if (*(void *)(DerivedStorage + 16))
    {
      uint64_t v1 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (v1)
      {
        uint64_t v2 = (const void *)v1;
        CMBaseObjectGetDerivedStorage();
        FigCFWeakReferenceTableRemoveValue();
        CFRelease(v2);
      }
    }
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 16) = 0;
  }
  CFIndex v4 = *(const void **)(DerivedStorage + 24);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 24) = 0;
  }
}

uint64_t FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(CFTypeRef *a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    *a1 = 0;
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFURLRef v5 = (const __CFURL *)FigCFURLCreateFromSystemTemporaryDirectory();
    if (v5)
    {
      CFURLRef v6 = v5;
      if (!CFURLGetFileSystemRepresentation(v5, 0, buffer, 1024))
      {
        uint64_t v9 = FigSignalErrorAt();
        goto LABEL_10;
      }
      CFRelease(v6);
      __strlcat_chk();
      size_t v7 = strlen((const char *)buffer);
      CFURLRef v8 = CFURLCreateFromFileSystemRepresentation(v4, buffer, v7, 1u);
      if (v8)
      {
        CFURLRef v6 = v8;
        if (!a2 || (uint64_t v9 = FigCFURLCreateDirectory(), !v9))
        {
          CFStringRef v10 = CFURLGetString(v6);
          if (v10)
          {
            uint64_t v11 = 0;
            *a1 = CFRetain(v10);
          }
          else
          {
            *a1 = 0;
            uint64_t v11 = 4294954669;
          }
          goto LABEL_13;
        }
LABEL_10:
        uint64_t v11 = v9;
LABEL_13:
        CFRelease(v6);
        return v11;
      }
    }
    return 4294954669;
  }

  return FigSignalErrorAt();
}

uint64_t FigCreateCacheMemoryAllocatorForCRABS(uint64_t a1, CFAllocatorRef *a2)
{
  CFAllocatorRef v4 = malloc_type_malloc(0x20uLL, 0x1020040D49128EBuLL);
  context.version = 0;
  context.info = v4;
  context.retain = 0;
  context.release = (CFAllocatorReleaseCallBack)QTMovieCacheMemReleaseCallBack;
  context.copyDescription = 0;
  context.allocate = (CFAllocatorAllocateCallBack)QTMovieCacheMemAllocateCallBack;
  context.reallocate = (CFAllocatorReallocateCallBack)QTMovieCacheMemReallocateCallBack;
  context.deallocate = (CFAllocatorDeallocateCallBack)QTMovieCacheMemDeallocateCallBack;
  context.preferredSize = (CFAllocatorPreferredSizeCallBack)QTMovieCacheMemPreferredSizeCallBack;
  *CFAllocatorRef v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a1;
  CFAllocatorRef v5 = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &context);
  *a2 = v5;
  if (v5) {
    return 0;
  }
  else {
    return 4294967188;
  }
}

uint64_t FigShared_CopyDiskCacheParams(const __CFString *cf, int64_t *a2, int64_t *a3, int64_t *a4, BOOL *a5, void *a6)
{
  CFStringRef v11 = cf;
  CFTypeRef v16 = 0;
  CFTypeRef cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if (sDiskCacheIsRemote)
    {
      uint64_t DirectoryAtPath = fs_CreateDirectoryAtPath(v11);
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v14 = FigSharedRemote_CopyDiskCacheParams(v11, a2, a3, a4, a5, (uint64_t)a6);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  uint64_t v13 = DirectoryAtPath;
  if (DirectoryAtPath) {
    goto LABEL_14;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    CFStringRef v11 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19970EE10](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  uint64_t v13 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    uint64_t v13 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v16);
    if (!v13)
    {
      uint64_t v14 = FigDiskCacheRepositoryCopyInfo(v16, (unint64_t)a2, (unint64_t)a3, (unint64_t)a4, a6);
LABEL_13:
      uint64_t v13 = v14;
    }
  }
LABEL_14:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v13;
}

uint64_t InitDiskCache()
{
  sDiskCacheLock = FigSimpleMutexCreate();
  if (sDiskCacheLock
    && (sDiskCacheList = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
  {
    uint64_t result = 0;
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
  sDiskInitStatus = result;
  return result;
}

uint64_t FigDiskCacheRepositoryCreate(const __CFURL *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a1 && a4)
  {
    *a4 = 0;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (sRegisterFigDiskCacheRepositoryTypeOnce != -1) {
      dispatch_once_f(&sRegisterFigDiskCacheRepositoryTypeOnce, 0, (dispatch_function_t)RegisterFigDiskCacheRepositoryType);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      uint64_t v10 = Instance;
      uint64_t v11 = FigSimpleMutexCreate();
      *(void *)(v10 + 16) = v11;
      if (!v11)
      {
        CFStringRef v12 = 0;
        CFURLRef v15 = 0;
        goto LABEL_31;
      }
      *(void *)(v10 + 24) = 0;
      CFStringRef v12 = CFURLCopyFileSystemPath(a1, kCFURLPOSIXPathStyle);
      if (v12)
      {
        CFURLRef v13 = CFURLCreateWithFileSystemPath(v8, v12, kCFURLPOSIXPathStyle, 1u);
        *(void *)(v10 + 24) = v13;
        if (v13)
        {
LABEL_9:
          *(void *)(v10 + 32) = 0;
          CFURLRef v14 = (const __CFURL *)MEMORY[0x199708740](v8, @"diskcacherepository.plist", 0, 0);
          CFURLRef v15 = v14;
          if (v14)
          {
            CFURLRef v16 = CFURLCopyAbsoluteURL(v14);
            *(void *)(v10 + 32) = v16;
            if (!v16) {
              goto LABEL_31;
            }
          }
          else if (!*(void *)(v10 + 32))
          {
            goto LABEL_31;
          }
          *(void *)(v10 + 64) = 0;
          *(void *)(v10 + 40) = a2;
          *(void *)(v10 + 48) = a3;
          int v17 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
          CFArrayRef v18 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
          *(void *)(v10 + 72) = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          *(void *)(v10 + 80) = CFDictionaryCreateMutable(v8, 0, v17, v18);
          *(void *)(v10 + 88) = CFDictionaryCreateMutable(v8, 0, v17, v18);
          *(void *)(v10 + 96) = CFDictionaryCreateMutable(v8, 0, v17, v18);
          *(void *)(v10 + 104) = CFDictionaryCreateMutable(v8, 0, v17, v18);
          *(_DWORD *)(v10 + 128) = getpid();
          if (*(void *)(v10 + 72)
            && *(void *)(v10 + 80)
            && *(void *)(v10 + 96)
            && *(void *)(v10 + 88)
            && *(void *)(v10 + 104))
          {
            if (!FigCFURLCreateDirectory())
            {
              if (!FigFileForkOpenMainByCFURL())
              {
                fdcr_ReadRepositoryPlist(v10);
                fdcr_WriteRepositoryPlist(v10, 0, 1, 1);
                FigFileForkClose();
              }
              uint64_t v19 = 0;
              *(unsigned char *)(v10 + 112) = 1;
              *a4 = v10;
              goto LABEL_33;
            }
            uint64_t v19 = 4294954675;
LABEL_32:
            CFRelease((CFTypeRef)v10);
LABEL_33:
            if (v15) {
              CFRelease(v15);
            }
            if (v12) {
              CFRelease(v12);
            }
            return v19;
          }
LABEL_31:
          uint64_t v19 = FigSignalErrorAt();
          goto LABEL_32;
        }
      }
      else if (*(void *)(v10 + 24))
      {
        goto LABEL_9;
      }
      CFURLRef v15 = 0;
      goto LABEL_31;
    }
  }

  return FigSignalErrorAt();
}

void fdcr_RemoveFilePathInListFromArray(const __CFArray *a1, const __CFDictionary *a2, int a3)
{
  if (a1 && a2 && (CFMutableSetRef Mutable = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548])) != 0)
  {
    CFSetRef v7 = Mutable;
    CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)fdcr_CopyFilenameFromPathDictionaryApplierFunction, Mutable);
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      unint64_t v9 = Count + 1;
      do
      {
        CFURLRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(a1, v9 - 2);
        CFStringRef PathComponent = CFURLCopyLastPathComponent(ValueAtIndex);
        if (CFSetContainsValue(v7, PathComponent))
        {
          if (!a3 || (char v12 = 0, !fdcr_IsResourceInUse((uint64_t)ValueAtIndex, &v12)) && v12) {
            CFArrayRemoveValueAtIndex(a1, v9 - 2);
          }
        }
        if (PathComponent) {
          CFRelease(PathComponent);
        }
        --v9;
      }
      while (v9 > 1);
    }
    CFRelease(v7);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigDiskCacheRepositorySetTarget(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a1)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v8 = FigCFURLCreateDirectory();
    if (v8)
    {
      uint64_t v9 = v8;
    }
    else if (FigFileForkOpenMainByCFURL())
    {
      uint64_t v9 = 0;
    }
    else
    {
      fdcr_ReadRepositoryPlist(a1);
      if (a4)
      {
        *(unsigned char *)(a1 + 56) = 1;
      }
      else
      {
        if (a2 >= 1) {
          *(void *)(a1 + 40) = a2;
        }
        if (a3 >= 1) {
          *(void *)(a1 + 48) = a3;
        }
      }
      uint64_t v9 = fdcr_WriteRepositoryPlist(a1, 0, 1, 0);
      FigFileForkClose();
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fdcr_WriteRepositoryPlist(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  CFNumberRef v68 = 0;
  long long v66 = 0u;
  long long v67 = 0u;
  *(_OWORD *)CMTimeRange values = 0u;
  *(_OWORD *)CMTime keys = xmmword_1E5794EE0;
  long long v62 = *(_OWORD *)&off_1E5794EF0;
  long long v63 = xmmword_1E5794F00;
  CMTime v64 = @"automaticallyManagesSize";
  uint64_t v8 = FigCFURLCreateDirectory();
  if (!v8)
  {
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (a3)
    {
      CFURLRef v10 = *(const __CFURL **)(a1 + 24);
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        char v12 = Mutable;
        if (CFURLGetFileSystemRepresentation(v10, 1u, (UInt8 *)buffer, 1024))
        {
          CFURLRef v13 = opendir((const char *)buffer);
          if (v13)
          {
            CFURLRef v14 = v13;
            char v57 = a4;
            CFURLRef url = v10;
            CFURLRef v15 = readdir(v13);
            if (v15)
            {
              CFURLRef v16 = ".";
              int v17 = "..";
              do
              {
                d_name = v15->d_name;
                if (v15->d_name[0])
                {
                  d_os_log_type_t type = v15->d_type;
                  BOOL v20 = d_type > 8;
                  int v21 = (1 << d_type) & 0x111;
                  if (!v20 && v21 != 0)
                  {
                    if (strcmp(v15->d_name, v16))
                    {
                      if (strcmp(d_name, v17))
                      {
                        if (strcmp(d_name, "diskcacherepository.plist"))
                        {
                          CFStringRef v23 = CFStringCreateWithCString(v9, d_name, 0x8000100u);
                          if (v23)
                          {
                            CFStringRef v24 = v23;
                            int v25 = v17;
                            BOOL v26 = v16;
                            uint64_t v27 = a2;
                            CFURLRef v28 = CFURLCreateCopyAppendingPathComponent(v9, url, v23, 0);
                            if (v28)
                            {
                              CFURLRef v29 = v28;
                              CFArrayAppendValue(v12, v28);
                              CFRelease(v29);
                            }
                            CFRelease(v24);
                            a2 = v27;
                            CFURLRef v16 = v26;
                            int v17 = v25;
                          }
                        }
                      }
                    }
                  }
                }
                CFURLRef v15 = readdir(v14);
              }
              while (v15);
            }
            closedir(v14);
            a4 = v57;
LABEL_24:
            fdcr_RemoveFilePathInListFromArray(v12, *(const __CFDictionary **)(a1 + 72), 0);
            fdcr_RemoveFilePathInListFromArray(v12, *(const __CFDictionary **)(a1 + 80), a4 & 1);
            CFIndex Count = CFArrayGetCount(v12);
            if (Count >= 1)
            {
              CFIndex v32 = Count;
              CFIndex v33 = 0;
              CFStringRef v34 = (const __CFString *)*MEMORY[0x1E4F1D678];
              CFArrayRef v35 = (const __CFArray *)*MEMORY[0x1E4F1CFD0];
              do
              {
                CFURLRef ValueAtIndex = (const __CFURL *)CFArrayGetValueAtIndex(v12, v33);
                buffer[0] = 0;
                char v59 = 0;
                CFArrayRef propertyValueTypeRefPtr = 0;
                CFURLCopyResourcePropertyForKey(ValueAtIndex, v34, &propertyValueTypeRefPtr, 0);
                if (propertyValueTypeRefPtr == v35) {
                  fdcr_GetDirectoryStats(ValueAtIndex, 0, (unint64_t)buffer);
                }
                else {
                  FigCFURLGetFileStats();
                }
                if (propertyValueTypeRefPtr)
                {
                  CFRelease(propertyValueTypeRefPtr);
                  CFArrayRef propertyValueTypeRefPtr = 0;
                }
                fdcr_IsResourceInUse((uint64_t)ValueAtIndex, &v59);
                if (!v59 && buffer[0] >= 1) {
                  fdcr_DeleteResource(ValueAtIndex);
                }
                ++v33;
              }
              while (v32 != v33);
            }
            if (v12) {
              CFRelease(v12);
            }
            if (!fdcr_CleanCacheFileList(a1, *(const __CFDictionary **)(a1 + 72))
              && !fdcr_CleanCacheFileList(a1, *(const __CFDictionary **)(a1 + 80)))
            {
              if (*(unsigned char *)(a1 + 56)) {
                CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)markDiskCacheRepositoryPurgeable, 0);
              }
              CFArrayRef propertyValueTypeRefPtr = 0;
              if (!fdcr_CopySortedCacheFileListCheckedIn(a1, &propertyValueTypeRefPtr))
              {
                CFArrayRef v37 = propertyValueTypeRefPtr;
                buffer[0] = 0;
                if (propertyValueTypeRefPtr)
                {
                  CFIndex v38 = CFArrayGetCount(propertyValueTypeRefPtr);
                  if (v38 >= 1)
                  {
                    unint64_t v39 = v38 + 1;
                    do
                    {
                      CFRange v40 = (void *)CFArrayGetValueAtIndex(v37, v39 - 2);
                      if (v40)
                      {
                        CFNumberRef v41 = v40;
                        if (FigCFDictionaryGetInt64IfPresent())
                        {
                          if (buffer[0] > *(void *)(a1 + 48))
                          {
                            fdcr_DeleteCacheEntry(a1, *(const __CFString **)v41, *((const __CFURL **)v41 + 1));
                            CFArrayRemoveValueAtIndex(v37, v39 - 2);
                            free(v41);
                          }
                        }
                      }
                      --v39;
                    }
                    while (v39 > 1);
                  }
                }
                while (*(void *)(a1 + 64) > *(void *)(a1 + 40))
                {
                  if (!CFArrayGetCount(propertyValueTypeRefPtr))
                  {
                    FigSignalErrorAt();
                    break;
                  }
                  CMTimeValue v42 = (void *)CFArrayGetValueAtIndex(propertyValueTypeRefPtr, 0);
                  fdcr_DeleteCacheEntry(a1, *(const __CFString **)v42, *((const __CFURL **)v42 + 1));
                  CFArrayRemoveValueAtIndex(propertyValueTypeRefPtr, 0);
                  free(v42);
                }
                CFIndex v43 = CFArrayGetCount(propertyValueTypeRefPtr);
                if (v43 >= 1)
                {
                  unint64_t v44 = v43 + 1;
                  do
                  {
                    double v45 = (void *)CFArrayGetValueAtIndex(propertyValueTypeRefPtr, v44 - 2);
                    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 88), *(const void **)v45))
                    {
                      fdcr_DeleteCacheEntry(a1, *(const __CFString **)v45, *((const __CFURL **)v45 + 1));
                      CFArrayRemoveValueAtIndex(propertyValueTypeRefPtr, v44 - 2);
                      free(v45);
                    }
                    --v44;
                  }
                  while (v44 > 1);
                }
                if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 80))) {
                  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 88));
                }
              }
              fdcr_PurgeFileInfoList(propertyValueTypeRefPtr);
            }
            goto LABEL_64;
          }
        }
        int v30 = FigSignalErrorAt();
        CFRelease(v12);
        if (!v30)
        {
LABEL_23:
          char v12 = 0;
          goto LABEL_24;
        }
      }
      else if (!FigSignalErrorAt())
      {
        goto LABEL_23;
      }
    }
LABEL_64:
    __int16 v46 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    double v47 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFMutableDictionaryRef v48 = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFMutableDictionaryRef v49 = CFDictionaryCreateMutable(v9, 0, v46, v47);
    if (!v48) {
      goto LABEL_69;
    }
    CFMutableDictionaryRef v50 = v49;
    if (!v49) {
      goto LABEL_69;
    }
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)fdcr_ConvertValueFromCFURLToCFStringApplierFunction, v48);
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 80), (CFDictionaryApplierFunction)fdcr_ConvertValueFromCFURLToCFStringApplierFunction, v50);
    *(CFAbsoluteTime *)(a1 + 120) = CFAbsoluteTimeGetCurrent();
    uint64_t v51 = a1 + 120;
    values[0] = CFNumberCreate(v9, kCFNumberSInt64Type, (const void *)(v51 - 80));
    values[1] = CFNumberCreate(v9, kCFNumberSInt64Type, (const void *)(v51 - 72));
    *(void *)&long long v66 = CFNumberCreate(v9, kCFNumberSInt32Type, (const void *)(v51 + 8));
    *((void *)&v66 + 1) = CFNumberCreate(v9, kCFNumberDoubleType, (const void *)v51);
    *(void *)&long long v67 = v48;
    *((void *)&v67 + 1) = v50;
    CFNumberRef v68 = CFNumberCreate(v9, kCFNumberSInt8Type, (const void *)(v51 - 64));
    CFDictionaryRef v52 = CFDictionaryCreate(v9, (const void **)keys, (const void **)values, 7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v52)
    {
      CFDictionaryRef v53 = v52;
      if (FigCFPropertyListWriteToFigFileFork()) {
        uint64_t v8 = 0;
      }
      else {
        uint64_t v8 = FigSignalErrorAt();
      }
      CFRelease(v53);
    }
    else
    {
LABEL_69:
      uint64_t v8 = FigSignalErrorAt();
    }
  }
  for (uint64_t i = 0; i != 7; ++i)
  {
    CMTime v55 = values[i];
    if (v55) {
      CFRelease(v55);
    }
  }
  return v8;
}

uint64_t FigDiskCacheRepositoryCopyInfo(void *a1, unint64_t a2, unint64_t a3, unint64_t a4, void *a5)
{
  if (a1 && ((unint64_t v10 = a2 | a3 | a4, v11 = v10 != 0, v10) || a5))
  {
    MEMORY[0x19970E910](a1[2]);
    if (v11)
    {
      if (!FigFileForkOpenMainByCFURL())
      {
        fdcr_ReadRepositoryPlist((uint64_t)a1);
        FigFileForkClose();
      }
      if (a2) {
        *(void *)a2 = a1[8];
      }
      if (a3) {
        *(void *)a3 = a1[5];
      }
      if (a4) {
        *(void *)a4 = a1[6];
      }
    }
    if (a5)
    {
      CFTypeRef v13 = (CFTypeRef)a1[3];
      if (v13) {
        CFTypeRef v13 = CFRetain(v13);
      }
      *a5 = v13;
    }
    MEMORY[0x19970E930](a1[2]);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigShared_CheckOutOfDiskCache(const __CFString *cf, const void *a2, CFTypeRef *a3, const void **a4)
{
  CFStringRef v7 = cf;
  CFTypeRef v12 = 0;
  CFTypeRef cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if (sDiskCacheIsRemote)
    {
      uint64_t DirectoryAtPath = fs_CreateDirectoryAtPath(v7);
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v10 = FigSharedRemote_CheckOutOfDiskCache(v7, (uint64_t)a2, a3, a4);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  uint64_t v9 = DirectoryAtPath;
  if (DirectoryAtPath) {
    goto LABEL_14;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    CFStringRef v7 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19970EE10](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  uint64_t v9 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    uint64_t v9 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v12);
    if (!v9)
    {
      uint64_t v10 = FigDiskCacheRepositoryCheckOut((uint64_t)v12, a2, a3, a4);
LABEL_13:
      uint64_t v9 = v10;
    }
  }
LABEL_14:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v9;
}

uint64_t FigDiskCacheRepositoryCheckOut(uint64_t a1, const void *a2, CFTypeRef *a3, const void **a4)
{
  if (a1 && a2 && a3 && a4)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v8 = FigCFURLCreateDirectory();
    if (v8)
    {
      uint64_t v9 = v8;
    }
    else
    {
      if (FigFileForkOpenMainByCFURL())
      {
        uint64_t v9 = 0;
      }
      else
      {
        fdcr_ReadRepositoryPlist(a1);
        uint64_t v11 = fdcr_CheckOutResource((CFDictionaryRef *)a1, a2, a3, a4);
        if (!v11) {
          uint64_t v11 = fdcr_WriteRepositoryPlist(a1, 0, 1, 0);
        }
        uint64_t v9 = v11;
        FigFileForkClose();
      }
      if (*(unsigned char *)(a1 + 56)) {
        FigFileMarkPurgeable();
      }
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigByteFlumeGetClassID()
{
  return sFigByteFlumeClassID;
}

uint64_t RegisterFigByteFlumeBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigByteRateHistoryCreate(void *a1)
{
  uint64_t v2 = malloc_type_calloc(1uLL, 0x40uLL, 0x10200403C164FF8uLL);
  if (v2)
  {
    *a1 = v2;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigByteRateHistoryAllocSampleArray(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 8) == a2) {
    return 0;
  }
  CFAllocatorRef v4 = malloc_type_calloc(1uLL, 16 * a2, 0x1000040D9A13B51uLL);
  if (v4)
  {
    CFAllocatorRef v5 = v4;
    CFURLRef v6 = *(void **)a1;
    if (*(void *)a1)
    {
      int v7 = *(_DWORD *)(a1 + 8);
      int v8 = *(_DWORD *)(a1 + 12);
      if (v7 >= a2) {
        int v7 = a2;
      }
      *(void *)(a1 + 24) = 0;
      *(void *)(a1 + 32) = 0;
      if (v7 >= 1)
      {
        int v9 = v8 + 1;
        uint64_t v10 = (uint64_t)v5 + 16 * a2 - 16;
        do
        {
          int v9 = (v9 + *(_DWORD *)(a1 + 8) - 1) % *(_DWORD *)(a1 + 8);
          *(_OWORD *)uint64_t v10 = *(_OWORD *)(*(void *)a1 + 16 * v9);
          uint64_t v11 = *(void *)(a1 + 32) + *(int *)(v10 + 8);
          *(void *)(a1 + 24) += *(void *)v10;
          *(void *)(a1 + 32) = v11;
          v10 -= 16;
          --v7;
        }
        while (v7);
        CFURLRef v6 = *(void **)a1;
      }
      free(v6);
    }
    *(void *)a1 = v5;
    *(_DWORD *)(a1 + 8) = a2;
    *(_DWORD *)(a1 + 12) = 0;
    return 0;
  }

  return FigSignalErrorAt();
}

CFTypeRef FigCFHTTPCreateUserAgent()
{
  MEMORY[0x19970EE10](&FigCFHTTPCreateUserAgent_sUserAgentInitOnce, FigCFHTTPCreateUserAgentOnce);
  CFTypeRef result = (CFTypeRef)gFigCFHTTPUserAgent;
  if (gFigCFHTTPUserAgent)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t FigCFHTTPSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  int valuePtr = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v6 = 4294954511;
    goto LABEL_14;
  }
  if (CFEqual(a2, @"FBF_BandwidthSampleCount"))
  {
    if (CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr))
    {
      FigByteRateHistoryAllocSampleArray(*(void *)(DerivedStorage + 344), valuePtr);
      uint64_t v6 = 0;
      goto LABEL_14;
    }
LABEL_10:
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_14;
  }
  if (!CFEqual(a2, @"FBF_InactivityTimeout"))
  {
    uint64_t v6 = 4294954512;
    goto LABEL_14;
  }
  int v9 = 0;
  if (!CFNumberGetValue(a3, kCFNumberSInt32Type, &v9) || v9 < -1) {
    goto LABEL_10;
  }
  uint64_t v6 = 0;
  if (v9 < 0) {
    uint64_t v7 = 60000000000;
  }
  else {
    uint64_t v7 = 1000000 * v9;
  }
  *(void *)(DerivedStorage + 464) = v7;
LABEL_14:
  FigRetainProxyUnlockMutex();
  return v6;
}

uint64_t FigCFHTTPOpenResponse(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  char v48 = 0;
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_63;
  }
  FigRetainProxyGetOwner();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v13 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 96) != a2)
  {
    a8 = FigSignalErrorAt();
    fbf_ReleaseAndCreateLastError(v13, -12934, @"CoreMediaErrorDomain", @"Invalid request Id");
    if (!a8) {
      goto LABEL_63;
    }
    goto LABEL_7;
  }
  if (!*(unsigned char *)(DerivedStorage + 385))
  {
    CFTypeRef cf = 0;
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    int v25 = *(unsigned int (**)(uint64_t, uint64_t, void, CFTypeRef *))(v15 + 48);
    if (v25)
    {
      if (!v25(a1, 0x1EE57B6B8, *MEMORY[0x1E4F1CF80], &cf))
      {
        *(_DWORD *)(v13 + 388) = FigNetworkInterfaceGetInterfaceTypeFromCFNStats((uint64_t)cf);
        if (cf) {
          CFRelease(cf);
        }
      }
    }
    *(unsigned char *)(v13 + 385) = 1;
    fbf_ConfigurePathEvaluator(v13, *(void *)v13);
  }
  if (!*(_DWORD *)(v13 + 72))
  {
    fbf_GetResponseProperties(a1, (void *)v13);
    fbf_ReportingAgentSetCDNHeaders(v13, a1);
  }
  if (a8)
  {
    fbf_ReleaseAndSetLastErrorFromHTTPRequest(v13, a1, a8, &v48);
LABEL_7:
    FigRetainProxyRetainOwner();
    *(_DWORD *)(v13 + 72) = 2;
    int v16 = *(_DWORD *)(v13 + 44);
    if (*(unsigned char *)(v13 + 40)) {
      BOOL v17 = v16 == 1;
    }
    else {
      BOOL v17 = 0;
    }
    int v19 = v17 || v16 == 2;
    FigNetworkInterfaceReporterSamplePhysicalStatistics(*(void *)(v13 + 592), a1, *(void *)(v13 + 32), 0x1EE582C18, v19);
    *(unsigned char *)(v13 + 608) = 1;
    fbf_ReportingAgentReportErrorEvent(v13, @"CoreMediaErrorDomain", @"Failed without successful flume open", 1u, (int)a8);
    uint64_t v20 = *(void *)(v13 + 88);
    if (v20)
    {
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v22 = v21 ? v21 : 0;
      CFStringRef v23 = *(void (**)(uint64_t))(v22 + 24);
      if (v23) {
        v23(v20);
      }
    }
    CFStringRef v24 = *(void (**)(void, void, uint64_t))(v13 + 104);
    *(void *)(v13 + 104) = 0;
    v24(*(void *)(v13 + 120), 0, a8);
    FigCFHTTPStopAllReads(v13, a8);
    FigRetainProxyReleaseOwner();
    goto LABEL_63;
  }
  if (a7)
  {
    BOOL v26 = fbf_httpRequestHandlesNetworkTransitions(a1);
    fbf_UpdateAndReportMultiPathActivity(v13, v26);
  }
  if ((a7 & 2) != 0)
  {
    int v27 = *(_DWORD *)(v13 + 44);
    BOOL v28 = *(unsigned char *)(v13 + 40) && v27 == 1;
    BOOL v29 = v28 || v27 == 2;
    int v30 = v29;
    FigNetworkInterfaceReporterSamplePhysicalStatistics(*(void *)(v13 + 592), a1, *(void *)(v13 + 32), 0x1EE582C18, v30);
    if (!*(_DWORD *)(v13 + 72))
    {
      uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v31) {
        uint64_t v32 = v31;
      }
      else {
        uint64_t v32 = 0;
      }
      CFIndex v33 = (void *)(v13 + 336);
      CFStringRef v34 = *(unsigned int (**)(uint64_t, void, uint64_t, void))(v32 + 24);
      if (v34 && !v34(a1, 0, v13 + 336, 0))
      {
        unint64_t v35 = *v33 / 0xF4240uLL;
      }
      else
      {
        unint64_t v35 = 0;
        void *v33 = 0;
      }
      uint64_t v36 = *(void *)(v13 + 32);
      if (v36)
      {
        uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v38 = v37 ? v37 : 0;
        unint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v38 + 56);
        if (v39) {
          v39(v36, 0x1EE582C18, 0x1EE55E078, v35, 0);
        }
      }
      FigReportingAgentUpdateFinalTransactionMetrics(*(void *)(v13 + 32), a1, 0, 1);
      BOOL v40 = !FigCFHTTPIsDataURL(*(const __CFURL **)(v13 + 168));
      uint64_t Error = fbf_ParseResponseHeadersAndSetLastError(a1, v13, v40);
      if (!Error)
      {
        *(_DWORD *)(v13 + 72) = 1;
        if (!*(void *)(v13 + 128))
        {
          CFTypeRef v42 = *(CFTypeRef *)(v13 + 88);
          if (v42) {
            CFTypeRef v42 = CFRetain(v42);
          }
          *(void *)(v13 + 128) = v42;
        }
        CFIndex v43 = *(void (**)(uint64_t, uint64_t, void))(v13 + 104);
        uint64_t v44 = *(void *)(v13 + 120);
        *(void *)(v13 + 104) = 0;
        uint64_t v45 = *(unsigned __int8 *)(v13 + 280);
        FigRetainProxyUnlockMutex();
        v43(v44, v45, 0);
        FigRetainProxyLockMutex();
        FigRetainProxyIsInvalidated();
        goto LABEL_63;
      }
      a8 = Error;
      goto LABEL_7;
    }
  }
LABEL_63:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

CFStringRef FigCFHTTPCopyMimeTypeFromHTTPResponse(__CFHTTPMessage *a1)
{
  CFStringRef v1 = CFHTTPMessageCopyHeaderFieldValue(a1, @"Content-Type");
  CFStringRef v2 = v1;
  if (v1)
  {
    uint64_t location = CFStringFind(v1, @";", 0).location;
    if (location >= 1)
    {
      v7.length = location;
      v7.uint64_t location = 0;
      CFStringRef v4 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v2, v7);
      if (v4)
      {
        CFStringRef v5 = v4;
        CFRelease(v2);
        return v5;
      }
    }
  }
  return v2;
}

uint64_t FigCFHTTPCopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  keys[16] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t valuePtr = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigRetainProxyIsInvalidated()) {
    return 4294954511;
  }
  if (CFEqual(a2, @"FBF_EntireLength"))
  {
    if (*(_DWORD *)(DerivedStorage + 72) == 1)
    {
      int Value = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, (const void *)(DerivedStorage + 216));
LABEL_14:
      uint64_t v9 = 0;
LABEL_15:
      *a4 = Value;
      return v9;
    }
    return 4294954513;
  }
  if (CFEqual(a2, @"FBF_URL"))
  {
    int Value = *(__CFDictionary **)(DerivedStorage + 176);
    if (!Value) {
      int Value = *(__CFDictionary **)(DerivedStorage + 168);
    }
    goto LABEL_13;
  }
  if (CFEqual(a2, @"FBF_MIMEType"))
  {
    CFDictionaryRef v11 = *(const __CFDictionary **)(DerivedStorage + 264);
    if (!v11) {
      return 4294954513;
    }
    CFTypeRef v12 = @"MIME Type";
    goto LABEL_12;
  }
  int ArraySize = 0;
  if (CFEqual(a2, @"FBF_BandwidthSample"))
  {
    uint64_t v9 = FigCFHTTPCopyBandwidthInfo(DerivedStorage, (double *)&v32, 0, 0);
    if (v9) {
      return v9;
    }
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_uint64_t valuePtr = &v32;
    goto LABEL_25;
  }
  if (CFEqual(a2, @"FBF_BandwidthMovingAverage"))
  {
    uint64_t v9 = FigCFHTTPCopyBandwidthInfo(DerivedStorage, 0, 0, (double *)&v31);
    if (v9) {
      return v9;
    }
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_uint64_t valuePtr = &v31;
    goto LABEL_25;
  }
  if (CFEqual(a2, @"FBF_BandwidthStandardDeviation"))
  {
    uint64_t v9 = FigCFHTTPCopyBandwidthInfo(DerivedStorage, 0, (double *)&valuePtr, 0);
    if (v9) {
      return v9;
    }
    CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_uint64_t valuePtr = &valuePtr;
LABEL_25:
    int Value = CFNumberCreate(v13, kCFNumberDoubleType, p_valuePtr);
    goto LABEL_15;
  }
  if (CFEqual(a2, @"FBF_BandwidthInfo"))
  {
    uint64_t v9 = FigCFHTTPCopyBandwidthInfo(DerivedStorage, (double *)&v32, (double *)&valuePtr, (double *)&v31);
    if (v9) {
      return v9;
    }
    keys[0] = @"FBF_BandwidthSample";
    keys[1] = @"FBF_BandwidthMovingAverage";
    keys[2] = @"FBF_BandwidthStandardDeviation";
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    values[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, &v32);
    values[1] = CFNumberCreate(v15, kCFNumberDoubleType, &v31);
    values[2] = CFNumberCreate(v15, kCFNumberDoubleType, &valuePtr);
    uint64_t v16 = 0;
    *a4 = CFDictionaryCreate(a3, (const void **)keys, (const void **)values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    do
    {
      BOOL v17 = values[v16];
      if (v17) {
        CFRelease(v17);
      }
      ++v16;
    }
    while (v16 != 3);
    return 0;
  }
  if (CFEqual(a2, @"FBF_BandwidthSampleCount"))
  {
    FigRetainProxyLockMutex();
    if (FigRetainProxyIsInvalidated())
    {
      uint64_t v9 = 4294954511;
LABEL_41:
      FigRetainProxyUnlockMutex();
      return v9;
    }
    int ArraySize = FigByteRateHistoryGetArraySize(*(void *)(DerivedStorage + 344));
    CFArrayRef v18 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &ArraySize);
LABEL_40:
    uint64_t v9 = 0;
    *a4 = v18;
    goto LABEL_41;
  }
  if (CFEqual(a2, @"FBF_HTTPResponseHeaders"))
  {
    int Value = *(__CFDictionary **)(DerivedStorage + 256);
    if (!Value) {
      return 4294954513;
    }
    goto LABEL_13;
  }
  if (CFEqual(a2, @"FBF_RemoteIPAddress"))
  {
    CFDataRef v19 = *(const __CFData **)(DerivedStorage + 136);
    if (v19)
    {
      int Value = FigCFHTTPCreateAddressString(v19);
      if (!Value) {
        return 4294954363;
      }
      goto LABEL_14;
    }
    return 4294954513;
  }
  if (CFEqual(a2, @"FBF_SuggestedFileName"))
  {
    int Value = *(__CFDictionary **)(DerivedStorage + 208);
    if (!Value) {
      return 4294954513;
    }
    goto LABEL_13;
  }
  if (CFEqual(a2, @"FBF_PlaybackSessionID"))
  {
    CFDictionaryRef v11 = *(const __CFDictionary **)(DerivedStorage + 224);
    if (!v11) {
      return 4294954513;
    }
    CFTypeRef v12 = @"X-Playback-Session-Id";
LABEL_12:
    int Value = (__CFDictionary *)CFDictionaryGetValue(v11, v12);
    if (!Value) {
      return 4294954513;
    }
LABEL_13:
    int Value = (__CFDictionary *)CFRetain(Value);
    goto LABEL_14;
  }
  if (!CFEqual(a2, @"FBF_AccessLog"))
  {
    if (CFEqual(a2, @"FBF_NoCache"))
    {
      int Value = *(__CFDictionary **)(DerivedStorage + 264);
      if (Value) {
        int Value = (__CFDictionary *)CFDictionaryGetValue(Value, @"no-cache");
      }
      if (Value != (__CFDictionary *)*MEMORY[0x1E4F1CFD0]) {
        return 4294954513;
      }
      goto LABEL_13;
    }
    if (CFEqual(a2, @"FBF_StorageSession"))
    {
      int Value = *(__CFDictionary **)(DerivedStorage + 232);
      if (!Value) {
        return 4294954513;
      }
      goto LABEL_13;
    }
    if (CFEqual(a2, @"FBF_LastError"))
    {
      int Value = *(__CFDictionary **)(DerivedStorage + 24);
      if (Value) {
        goto LABEL_13;
      }
      return 0;
    }
    if (CFEqual(a2, @"FBF_networkInterfaceStats"))
    {
      FigRetainProxyLockMutex();
      uint64_t v21 = *(void *)(DerivedStorage + 592);
      if (v21 && (CFMutableArrayRef Mutable = FigNetworkInterfaceReporterCopyPhysicalStatistics(v21)) != 0
        || (CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
      {
        InterfaceType = fbf_GetInterfaceType(DerivedStorage);
        CFDictionarySetValue(Mutable, @"cs-iftype", InterfaceType);
        FigRetainProxyUnlockMutex();
        uint64_t v9 = 0;
        *a4 = Mutable;
      }
      else
      {
        FigRetainProxyUnlockMutex();
        return 4294954510;
      }
      return v9;
    }
    if (CFEqual(a2, @"FBF_ReportingAgent"))
    {
      int Value = *(__CFDictionary **)(DerivedStorage + 32);
      if (!Value) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
    if (CFEqual(a2, @"FBF_InteractivePlaybackAssertion"))
    {
      BOOL v28 = 0;
      FigRetainProxyLockMutex();
      uint64_t v9 = FigPlaybackAssertionCreate((uint64_t)a3, (uint64_t)a1, (uint64_t)fbf_releaseInteractivePlaybackAssertion, &v28);
      if (!v9)
      {
        if (dword_1E9350E58)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        CFRetain(a1);
        ++*(_DWORD *)(DerivedStorage + 380);
      }
      FigRetainProxyUnlockMutex();
      *a4 = v28;
      return v9;
    }
    if (CFEqual(a2, @"FBF_NetworkUrgencyMonitor"))
    {
      FigRetainProxyLockMutex();
      int v25 = *(const void **)(DerivedStorage + 624);
      if (v25)
      {
        CFRetain(v25);
        uint64_t v9 = 0;
        BOOL v26 = *(__CFDictionary **)(DerivedStorage + 624);
      }
      else
      {
        BOOL v26 = 0;
        uint64_t v9 = 4294954513;
      }
      FigRetainProxyUnlockMutex();
      *a4 = v26;
      return v9;
    }
    if (CFEqual(a2, @"FBF_EntireLengthAvailableOnDemand"))
    {
      int Value = (__CFDictionary *)*MEMORY[0x1E4F1CFC8];
      goto LABEL_13;
    }
    if (!CFEqual(a2, @"FBF_ClientNetworkActivity")) {
      return 4294954512;
    }
    FigRetainProxyLockMutex();
    int v27 = *(const void **)(DerivedStorage + 640);
    if (!v27)
    {
      uint64_t v9 = 4294954513;
      goto LABEL_41;
    }
    CFArrayRef v18 = (__CFDictionary *)CFRetain(v27);
    goto LABEL_40;
  }

  return fbf_CreateAccessLog(DerivedStorage, a3, a4);
}

uint64_t FigCRABSCreate(const void *a1, uint64_t a2, const void *a3, const void *a4, int a5, CFTypeRef *a6)
{
  cf[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  CFDictionaryRef v11 = a6;
  fig_note_initialize_category_with_default_work_cf();
  if (a1 && a3 && a6)
  {
    CFTypeRef v57 = 0;
    MEMORY[0x19970EE10](&FigCRABSGetClassID_sRegisterFigCRABSOnce, RegisterFigCRABS);
    uint64_t v12 = CMDerivedObjectCreate();
    if (!v12)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v14 = FigReentrantMutexCreate();
      *(void *)(DerivedStorage + 72) = v14;
      if (!v14) {
        goto LABEL_62;
      }
      uint64_t v15 = FigReentrantMutexCreate();
      *(void *)(DerivedStorage + 384) = v15;
      if (!v15) {
        goto LABEL_62;
      }
      *(_DWORD *)(DerivedStorage + 504) = a5;
      *(unsigned char *)(DerivedStorage + 132) = a5 & 1;
      if (crabsUpdateLength(DerivedStorage, (uint64_t)a1))
      {
        *(void *)(DerivedStorage + 96) = 0x4000;
        *(void *)(DerivedStorage + 56) = -1;
      }
      *(void *)(DerivedStorage + 224) = 0;
      *(void *)(DerivedStorage + 184) = 10;
      uint64_t v16 = malloc_type_malloc(0x50uLL, 0x100004000313F17uLL);
      *(void *)(DerivedStorage + 192) = v16;
      if (!v16) {
        goto LABEL_62;
      }
      *(void *)(DerivedStorage + 248) = 0;
      *(void *)(DerivedStorage + 200) = 0;
      *(void *)(DerivedStorage + 264) = 0;
      *(void *)(DerivedStorage + 272) = DerivedStorage + 264;
      *(void *)(DerivedStorage + 280) = 0;
      *(void *)(DerivedStorage + 288) = DerivedStorage + 280;
      *(void *)(DerivedStorage + 296) = 0;
      *(void *)(DerivedStorage + 304) = DerivedStorage + 296;
      *(void *)(DerivedStorage + 312) = 0;
      *(void *)(DerivedStorage + 320) = DerivedStorage + 312;
      *(void *)(DerivedStorage + 328) = 0;
      *(void *)(DerivedStorage + 256) = DerivedStorage + 248;
      *(void *)(DerivedStorage + 336) = DerivedStorage + 328;
      *(void *)(DerivedStorage + 368) = 0;
      *(void *)(DerivedStorage + 376) = DerivedStorage + 368;
      uint64_t v17 = FigConditionVariableCreate();
      *(void *)(DerivedStorage + 552) = v17;
      if (!v17) {
        goto LABEL_62;
      }
      uint64_t v18 = FigConditionVariableCreate();
      *(void *)(DerivedStorage + 656) = v18;
      if (v18)
      {
        uint64_t v19 = FigRetainProxyCreate();
        if (!v19)
        {
          *(void *)(DerivedStorage + 8) = FigDiskCacheProviderRetain(a4);
          *(void *)(DerivedStorage + 16) = 0;
          crabsDiskBackingIsBusy(DerivedStorage, 1);
          cf[0] = 0;
          uint64_t FigBaseObject = FigByteFlumeGetFigBaseObject(a1);
          uint64_t v21 = *MEMORY[0x1E4F1CF80];
          uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v22) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = 0;
          }
          CFStringRef v24 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v23 + 48);
          if (v24) {
            v24(FigBaseObject, @"FBF_URL", v21, cf);
          }
          *(void *)(DerivedStorage + 936) = FigOSTransactionCreate();
          if (cf[0]) {
            CFRelease(cf[0]);
          }
          CFTypeRef v25 = CFRetain(a1);
          CFTypeRef v26 = v57;
          *(void *)(DerivedStorage + 32) = v25;
          *(void *)(DerivedStorage + 40) = v26;
          *(_DWORD *)(DerivedStorage + 48) = 9000;
          *(void *)uint64_t DerivedStorage = CFRetain(a3);
          *(unsigned char *)(DerivedStorage + 104) = 1;
          *(unsigned char *)(DerivedStorage + 112) = 1;
          *(_DWORD *)(DerivedStorage + 108) = 0;
          *(void *)(DerivedStorage + 832) = 0;
          *(_OWORD *)(DerivedStorage + 840) = 0u;
          *(_OWORD *)(DerivedStorage + 856) = 0u;
          *(_OWORD *)(DerivedStorage + 872) = 0u;
          *(_OWORD *)(DerivedStorage + 888) = 0u;
          *(_OWORD *)(DerivedStorage + 904) = 0u;
          uint64_t v27 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
          uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v28) {
            uint64_t v29 = v28;
          }
          else {
            uint64_t v29 = 0;
          }
          int v30 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v29 + 48);
          if (v30) {
            v30(v27, @"FBF_NetworkUrgencyMonitor", a2, DerivedStorage + 968);
          }
          uint64_t v19 = crabsInitialize(DerivedStorage);
          if (!v19)
          {
            FigByteStreamStatsSetupWorker();
            uint64_t v31 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
            uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v32) {
              uint64_t v33 = v32;
            }
            else {
              uint64_t v33 = 0;
            }
            CFStringRef v34 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v33 + 48);
            if (v34) {
              v34(v31, @"FBF_ReportingAgent", v21, DerivedStorage + 920);
            }
            *(_DWORD *)(DerivedStorage + 928) = 0;
            uint64_t v35 = *(void *)(DerivedStorage + 920);
            if (v35)
            {
              uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v36) {
                uint64_t v37 = v36;
              }
              else {
                uint64_t v37 = 0;
              }
              uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t, __CFString *, void))(v37 + 48);
              if (v38) {
                v38(v35, 0x1EE582BF8, 0x1EE583C58, @"FILE", 0);
              }
              uint64_t v39 = *(void *)(DerivedStorage + 920);
              if (v39)
              {
                int v40 = *(_DWORD *)(DerivedStorage + 504);
                uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v42 = v41 ? v41 : 0;
                CFIndex v43 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v42 + 56);
                if (v43) {
                  v43(v39, 0x1EE582BF8, 0x1EE55E058, v40 & 1, 0);
                }
              }
              uint64_t v44 = *(void *)(DerivedStorage + 920);
              if (v44)
              {
                uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v46 = v45 ? v45 : 0;
                double v47 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v46 + 56);
                if (v47) {
                  v47(v44, 0x1EE582BF8, 0x1EE583C98, 0, 0);
                }
              }
            }
            CMNotificationCenterGetDefaultLocalCenter();
            uint64_t v19 = FigNotificationCenterAddWeakListeners();
            if (!v19)
            {
              if (dword_1E9350B10)
              {
                CFTypeRef v56 = 0;
                uint64_t v48 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
                uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 8);
                uint64_t v50 = v49 ? v49 : 0;
                uint64_t v51 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v50 + 48);
                if (v51)
                {
                  if (!v51(v48, @"FBF_URL", v21, &v56))
                  {
                    FigIsItOKToLogURLs();
                    if (dword_1E9350B10)
                    {
                      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    if (v56) {
                      CFRelease(v56);
                    }
                  }
                }
              }
              uint64_t v53 = 0;
              CFTypeRef *v11 = v57;
              return v53;
            }
          }
        }
      }
      else
      {
LABEL_62:
        uint64_t v19 = FigSignalErrorAt();
      }
      uint64_t v53 = v19;
      if (v57) {
        CFRelease(v57);
      }
      return v53;
    }
    return v12;
  }

  return FigSignalErrorAt();
}

uint64_t FigCRABSCopyProperty(const void *a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  value[16] = *(void **)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC50]))
  {
    uint64_t v9 = crabsEnsureInitialized(a1);
    if (v9) {
      return v9;
    }
    SInt64 = (const void *)FigCFNumberCreateSInt64();
LABEL_4:
    *a4 = SInt64;
    return v9;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC48]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC78]))
    {
      uint64_t v12 = crabsEnsureInitialized(a1);
      if (!v12)
      {
        uint64_t FigBaseObject = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
        uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v15) {
          uint64_t v16 = v15;
        }
        else {
          uint64_t v16 = 0;
        }
        uint64_t v17 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, void *))(v16 + 48);
        if (!v17) {
          return 4294954514;
        }
        return v17(FigBaseObject, @"FBF_URL", a3, a4);
      }
      return v12;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB40])) {
      return 4294954512;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB58]))
    {
      uint64_t v12 = crabsEnsureInitialized(a1);
      if (v12) {
        return v12;
      }
      uint64_t v18 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      uint64_t v19 = kFigByteFlumeProperty_MIMEType;
LABEL_28:
      uint64_t v20 = (uint64_t)*v19;
      return FigCPECryptorCopyProperty(v18, v20, (uint64_t)a3, (uint64_t)a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB88]))
    {
      CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v22 = (const void *)(DerivedStorage + 48);
LABEL_33:
      CFNumberType v23 = kCFNumberSInt32Type;
LABEL_34:
      SInt64 = CFNumberCreate(v21, v23, v22);
LABEL_35:
      uint64_t v9 = 0;
      goto LABEL_4;
    }
    CFStringRef v24 = (const void *)*MEMORY[0x1E4F1FB68];
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB68]))
    {
      uint64_t v18 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      uint64_t v19 = kFigByteFlumeProperty_BandwidthSample;
      goto LABEL_28;
    }
    CFTypeRef v25 = (const void *)*MEMORY[0x1E4F1FB70];
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB70]))
    {
      uint64_t v18 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      uint64_t v19 = kFigByteFlumeProperty_BandwidthStandardDeviation;
      goto LABEL_28;
    }
    CFTypeRef v26 = (const void *)*MEMORY[0x1E4F1EC88];
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC88]))
    {
      uint64_t v18 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      uint64_t v19 = kFigByteFlumeProperty_BandwidthMovingAverage;
      goto LABEL_28;
    }
    if (CFEqual(a2, @"CRABS_ReadAheadActive"))
    {
      uint64_t v9 = FigRetainProxyLockMutex();
      if (v9) {
        return v9;
      }
      uint64_t v27 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      if (*(_DWORD *)(DerivedStorage + 560) != 1 && *(_DWORD *)(DerivedStorage + 664) != 1) {
        uint64_t v27 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
      }
      *a4 = CFRetain(*v27);
      FigRetainProxyUnlockMutex();
      return 0;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB28]))
    {
      uint64_t v18 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      uint64_t v19 = kFigByteFlumeProperty_BandwidthSampleCount;
      goto LABEL_28;
    }
    if (CFEqual(a2, @"CRABS_ReadAheadAssertion"))
    {
      CFTypeRef cf = 0;
      uint64_t v28 = FigRetainProxyLockMutex();
      if (v28)
      {
        uint64_t v9 = v28;
        *a4 = 0;
        return v9;
      }
      uint64_t v31 = *(const void **)(DerivedStorage + 760);
      if (v31) {
        CFTypeRef v32 = CFRetain(v31);
      }
      else {
        CFTypeRef v32 = 0;
      }
      uint64_t v9 = FigReadAheadAssertionCreate((uint64_t)a3, (uint64_t)a1, (uint64_t)crabsReleaseReadAheadAssertion, &cf);
      if (v9) {
        goto LABEL_88;
      }
      if (dword_1E9350B10)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFRetain(a1);
      int v40 = *(_DWORD *)(DerivedStorage + 116);
      *(_DWORD *)(DerivedStorage + 116) = v40 + 1;
      if (v40 != -1)
      {
        if (dword_1E9350B10)
        {
          uint64_t v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (*(double *)(DerivedStorage + 120) == 0.0) {
          *(CFAbsoluteTime *)(DerivedStorage + 120) = CFAbsoluteTimeGetCurrent();
        }
        uint64_t v9 = 4294954511;
        if (crabsStartIdleRead(DerivedStorage) == -12785) {
          goto LABEL_88;
        }
        crabsReportingIssueIRATEventIfNeeded(DerivedStorage, 800);
      }
      uint64_t v9 = 0;
LABEL_88:
      crabsRetainProxyUnlockWithActions();
      if (v32) {
        CFRelease(v32);
      }
      SInt64 = cf;
      if (!v9) {
        goto LABEL_4;
      }
      *a4 = 0;
      if (!SInt64) {
        return v9;
      }
LABEL_92:
      CFRelease(SInt64);
      return v9;
    }
    if (CFEqual(a2, @"CRABS_ReportingAgent"))
    {
      uint64_t v29 = *(const void **)(DerivedStorage + 920);
      if (v29)
      {
        CFRetain(v29);
        uint64_t v30 = *(void *)(DerivedStorage + 920);
      }
      else
      {
        uint64_t v30 = 0;
      }
      uint64_t v9 = 0;
      goto LABEL_64;
    }
    if (CFEqual(a2, @"CRABS_ReadAheadStartTime"))
    {
      double v34 = *(double *)(DerivedStorage + 120);
      uint64_t v33 = (const void *)(DerivedStorage + 120);
      if (v34 > 0.0)
      {
        CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFNumberType v23 = kCFNumberDoubleType;
        uint64_t v22 = v33;
        goto LABEL_34;
      }
      *a4 = 0;
      return 4294954513;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC70]))
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable) {
        return 4294954510;
      }
      uint64_t v37 = Mutable;
      value[0] = 0;
      CFDictionaryRef theDict = 0;
      uint64_t v38 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      int v39 = 0;
      if (!FigCPECryptorCopyProperty(v38, @"FBF_BandwidthInfo", (uint64_t)a3, (uint64_t)&theDict)&& theDict)
      {
        if (CFDictionaryGetValueIfPresent(theDict, @"FBF_BandwidthSample", (const void **)value))
        {
          CFDictionaryAddValue(v37, v24, value[0]);
          int v39 = 1;
        }
        else
        {
          int v39 = 0;
        }
        if (CFDictionaryGetValueIfPresent(theDict, @"FBF_BandwidthMovingAverage", (const void **)value))
        {
          CFDictionaryAddValue(v37, v26, value[0]);
          int v39 = 1;
        }
        if (CFDictionaryGetValueIfPresent(theDict, @"FBF_BandwidthStandardDeviation", (const void **)value))
        {
          CFDictionaryAddValue(v37, v25, value[0]);
          int v39 = 1;
        }
        CFRelease(theDict);
      }
      uint64_t v42 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      if (FigCPECryptorCopyProperty(v42, @"FBF_RemoteIPAddress", (uint64_t)a3, (uint64_t)value)|| !value[0])
      {
        if (!v39)
        {
          CFRelease(v37);
          return 4294954513;
        }
      }
      else
      {
        CFDictionaryAddValue(v37, (const void *)*MEMORY[0x1E4F1FB80], value[0]);
        if (value[0]) {
          CFRelease(value[0]);
        }
      }
      uint64_t v9 = 0;
      *a4 = v37;
      return v9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB60]))
    {
      uint64_t v18 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      uint64_t v19 = kFigByteFlumeProperty_NetworkInterfaceStatistics;
      goto LABEL_28;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB80]))
    {
      uint64_t v18 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      uint64_t v19 = kFigByteFlumeProperty_RemoteIPAddress;
      goto LABEL_28;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB90]))
    {
      CFIndex v43 = *(const void **)(DerivedStorage + 40);
      return FigCRABSScheduledIOCreate(v43, (uint64_t)a3, a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FBA0]))
    {
      uint64_t v18 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      uint64_t v19 = kFigByteFlumeProperty_SuggestedFileName;
      goto LABEL_28;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC58]))
    {
      value[0] = 0;
      uint64_t v9 = crabsEnsureInitialized(a1);
      if (v9) {
        return v9;
      }
      uint64_t v44 = (void *)*MEMORY[0x1E4F1CFC8];
      if (FigRetainProxyLockMutex())
      {
        uint64_t v45 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else
      {
        BOOL IsEntireLengthAvailableInCache = crabsIsEntireLengthAvailableInCache(DerivedStorage);
        uint64_t v45 = (const void *)*MEMORY[0x1E4F1CFD0];
        if (IsEntireLengthAvailableInCache) {
          uint64_t v44 = (void *)*MEMORY[0x1E4F1CFD0];
        }
        FigRetainProxyUnlockMutex();
      }
      if (v44 == v45)
      {
        SInt64 = 0;
      }
      else
      {
        uint64_t v47 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
        int v48 = FigCPECryptorCopyProperty(v47, @"FBF_EntireLengthAvailableOnDemand", (uint64_t)a3, (uint64_t)value);
        SInt64 = value[0];
        uint64_t v45 = v48 ? v44 : value[0];
      }
      if (v45)
      {
        CFTypeRef v49 = CFRetain(v45);
        SInt64 = value[0];
      }
      else
      {
        CFTypeRef v49 = 0;
      }
      *a4 = v49;
      if (!SInt64) {
        return v9;
      }
      goto LABEL_92;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB78]))
    {
      return crabsCreateReadStatsDictionary(DerivedStorage, (uint64_t)a3, a4);
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB18]))
    {
      uint64_t v18 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      uint64_t v19 = kFigByteFlumeProperty_AccessLog;
      goto LABEL_28;
    }
    if (CFEqual(a2, @"CRABS_PlaybackSessionID"))
    {
      uint64_t v18 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      uint64_t v19 = kFigByteFlumeProperty_PlaybackSessionID;
      goto LABEL_28;
    }
    if (CFEqual(a2, @"CRABS_CacheIsVolatile"))
    {
      if ((*(unsigned char *)(DerivedStorage + 504) & 3) != 0 || !*(unsigned char *)(DerivedStorage + 133)) {
        uint64_t v50 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      else {
        uint64_t v50 = (const void **)MEMORY[0x1E4F1CFD0];
      }
    }
    else
    {
      if (CFEqual(a2, @"CRABS_CacheIsDiskBacked"))
      {
        uint64_t v50 = (const void **)MEMORY[0x1E4F1CFD0];
        uint64_t v51 = (const void **)MEMORY[0x1E4F1CFC8];
        BOOL v52 = (*(_DWORD *)(DerivedStorage + 504) & 1) == 0;
      }
      else
      {
        if (CFEqual(a2, @"CRABS_ReadAheadAllowBackfill"))
        {
          uint64_t v50 = (const void **)MEMORY[0x1E4F1CFD0];
          int v53 = *(unsigned __int8 *)(DerivedStorage + 132);
        }
        else
        {
          if (!CFEqual(a2, @"CRABS_SaveMemoryCacheToDiskWhenDone"))
          {
            if (CFEqual(a2, @"CRABS_StorageSession"))
            {
              uint64_t v55 = *(void *)(DerivedStorage + 32);
              if (v55)
              {
                uint64_t v18 = FigByteFlumeGetFigBaseObject(v55);
                uint64_t v19 = kFigByteFlumeProperty_StorageSession;
                goto LABEL_28;
              }
              return 4294954513;
            }
            if (CFEqual(a2, @"CRABS_ConnectionState"))
            {
              CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              uint64_t v22 = (const void *)(DerivedStorage + 108);
              goto LABEL_33;
            }
            if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB50]))
            {
              uint64_t v56 = *(void *)(DerivedStorage + 32);
              if (v56)
              {
                uint64_t v18 = FigByteFlumeGetFigBaseObject(v56);
                uint64_t v19 = kFigByteFlumeProperty_LastError;
                goto LABEL_28;
              }
              return 4294954513;
            }
            if (CFEqual(a2, @"CRABS_InteractivePlaybackAssertion"))
            {
              uint64_t v57 = *(void *)(DerivedStorage + 32);
              if (v57)
              {
                uint64_t v18 = FigByteFlumeGetFigBaseObject(v57);
                uint64_t v19 = kFigByteFlumeProperty_InteractivePlaybackAssertion;
                goto LABEL_28;
              }
              return 4294954513;
            }
            if (CFEqual(a2, @"CRABS_NetworkUrgencyMonitor"))
            {
              uint64_t v58 = *(const void **)(DerivedStorage + 968);
              if (v58)
              {
                CFRetain(v58);
                uint64_t v9 = 0;
                uint64_t v30 = *(void *)(DerivedStorage + 968);
LABEL_64:
                *a4 = v30;
                return v9;
              }
              return 4294954513;
            }
            if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB98]))
            {
              if (!CFEqual(a2, @"CRABS_ClientNetworkActivity")) {
                return 4294954512;
              }
              uint64_t v59 = *(void *)(DerivedStorage + 32);
              if (v59)
              {
                uint64_t v18 = FigByteFlumeGetFigBaseObject(v59);
                uint64_t v19 = kFigByteFlumeProperty_ClientNetworkActivity;
                goto LABEL_28;
              }
              return 4294954513;
            }
            CMTime v54 = *(const void **)(DerivedStorage + 960);
            if (!v54) {
              return 4294954513;
            }
LABEL_154:
            SInt64 = CFRetain(v54);
            goto LABEL_35;
          }
          uint64_t v50 = (const void **)MEMORY[0x1E4F1CFD0];
          int v53 = *(unsigned __int8 *)(DerivedStorage + 136);
        }
        uint64_t v51 = (const void **)MEMORY[0x1E4F1CFC8];
        BOOL v52 = v53 == 0;
      }
      if (v52) {
        uint64_t v50 = v51;
      }
    }
    CMTime v54 = *v50;
    goto LABEL_154;
  }
  uint64_t v12 = crabsEnsureInitialized(a1);
  if (v12) {
    return v12;
  }
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 72));
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 72));
  uint64_t v13 = FigCFNumberCreateSInt64();
  *a4 = v13;
  if (v13) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigCRABSSetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB28]))
  {
    uint64_t v10 = (const void *)*MEMORY[0x1E4F1FB88];
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB88]))
    {
      uint64_t FigBaseObject = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      uint64_t v16 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v13 + 56);
      if (!v16) {
        return 4294954514;
      }
      uint64_t v17 = v16(FigBaseObject, @"FBF_InactivityTimeout", a3);
      if (v17) {
        return v17;
      }
    }
    if (CFEqual(a2, @"CRABS_DataConsumptionRateHint") || CFEqual(a2, @"CRABS_AllowCacheMemoryToBeVolatile"))
    {
      uint64_t v17 = crabsEnsureInitialized(a1);
      if (v17) {
        return v17;
      }
    }
    uint64_t v17 = FigRetainProxyLockMutex();
    if (v17) {
      return v17;
    }
    uint64_t v18 = *(const void **)(DerivedStorage + 760);
    if (v18) {
      CFTypeRef v19 = CFRetain(v18);
    }
    else {
      CFTypeRef v19 = 0;
    }
    if (CFEqual(a2, v10))
    {
      int valuePtr = -1;
      CFTypeID v21 = CFGetTypeID(a3);
      if (v21 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr >= -1)
        {
          uint64_t v20 = 0;
          *(_DWORD *)(DerivedStorage + 48) = valuePtr;
          goto LABEL_64;
        }
      }
      goto LABEL_62;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB48]))
    {
      if (*(void *)(DerivedStorage + 8) && CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
      {
        uint64_t v22 = FigDiskCacheProviderGetFigBaseObject(*(void *)(DerivedStorage + 8));
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        uint64_t v33 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v24 + 56);
        if (!v33)
        {
          uint64_t v20 = 4294954514;
          goto LABEL_64;
        }
        uint64_t v20 = v33(v22, @"CacheIsComplete", a3);
        if (v20) {
          goto LABEL_64;
        }
        uint64_t v32 = crabsSyncCache(DerivedStorage);
        goto LABEL_63;
      }
      goto LABEL_62;
    }
    if (CFEqual(a2, @"CRABS_DataConsumptionRateHint"))
    {
      uint64_t v40 = 0;
      CFTypeID v25 = CFGetTypeID(a3);
      if (v25 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &v40);
        if (v40 >= 1)
        {
          uint64_t v26 = (uint64_t)(((double)*(uint64_t *)(DerivedStorage + 96) + (double)v40 * 2.5 + -1.0)
                        / (double)*(uint64_t *)(DerivedStorage + 96));
          if (*(void *)(DerivedStorage + 184) < v26)
          {
            uint64_t v27 = malloc_type_realloc(*(void **)(DerivedStorage + 192), 8 * v26, 0x100004000313F17uLL);
            if (v27)
            {
              if (*(void *)(DerivedStorage + 184) < v26)
              {
                uint64_t v28 = v26;
                do
                  v27[--v28] = *(void *)(DerivedStorage + 88);
                while (v28 > *(void *)(DerivedStorage + 184));
              }
              uint64_t v20 = 0;
              *(void *)(DerivedStorage + 184) = v26;
              *(void *)(DerivedStorage + 192) = v27;
              goto LABEL_64;
            }
            goto LABEL_62;
          }
          goto LABEL_73;
        }
      }
LABEL_62:
      uint64_t v32 = FigSignalErrorAt();
      goto LABEL_63;
    }
    if (CFEqual(a2, @"CRABS_ReadAheadAllowBackfill"))
    {
      int v29 = *(unsigned __int8 *)(DerivedStorage + 132);
      CFTypeID v30 = CFGetTypeID(a3);
      if (v30 != CFBooleanGetTypeID()) {
        goto LABEL_62;
      }
      int v31 = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      uint64_t v20 = 0;
      *(unsigned char *)(DerivedStorage + 132) = v31;
      if (v31 && !v29)
      {
        *(_WORD *)(DerivedStorage + 130) = 0;
        uint64_t v32 = crabsStartIdleRead(DerivedStorage);
LABEL_63:
        uint64_t v20 = v32;
      }
LABEL_64:
      crabsRetainProxyUnlockWithActions();
      if (v19) {
        CFRelease(v19);
      }
      return v20;
    }
    if (CFEqual(a2, @"CRABS_AllowCacheMemoryToBeVolatile"))
    {
      int v34 = *(unsigned __int8 *)(DerivedStorage + 133);
      CFTypeID v35 = CFGetTypeID(a3);
      if (v35 != CFBooleanGetTypeID()) {
        goto LABEL_62;
      }
      uint64_t v20 = 0;
      uint64_t v36 = (const void *)*MEMORY[0x1E4F1CFD0];
      int v37 = *MEMORY[0x1E4F1CFD0] == (void)a3;
      *(unsigned char *)(DerivedStorage + 133) = v37;
      if ((*(unsigned char *)(DerivedStorage + 504) & 3) != 0 || v34 == v37) {
        goto LABEL_64;
      }
      if (v36 == a3) {
        crabsMakeCacheInFrontListVolatile((void *)DerivedStorage);
      }
      else {
        crabsMakeCacheInFrontListNonvolatile((void *)DerivedStorage);
      }
    }
    else
    {
      if (CFEqual(a2, @"CRABS_SaveMemoryCacheToDiskWhenDone"))
      {
        CFTypeID v38 = CFGetTypeID(a3);
        if (v38 == CFBooleanGetTypeID())
        {
          uint64_t v20 = 0;
          *(unsigned char *)(DerivedStorage + 136) = *MEMORY[0x1E4F1CFD0] == (void)a3;
          goto LABEL_64;
        }
        goto LABEL_62;
      }
      if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB98]))
      {
        uint64_t v20 = 4294954512;
        goto LABEL_64;
      }
      int v39 = *(const void **)(DerivedStorage + 960);
      *(void *)(DerivedStorage + 960) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v39) {
        CFRelease(v39);
      }
    }
LABEL_73:
    uint64_t v20 = 0;
    goto LABEL_64;
  }
  uint64_t v7 = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, __CFString *, const void *))(v9 + 56);
  if (!v14) {
    return 4294954514;
  }

  return v14(v7, @"FBF_BandwidthSampleCount", a3);
}

uint64_t crabsUnlockWithActions(uint64_t a1)
{
  if (*(_WORD *)(a1 + 176)) {
    BOOL v2 = (*(_WORD *)(a1 + 176) & 0x10) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v2)
  {
    FigRetainProxyRetain();
    Owner = (const void *)FigRetainProxyGetOwner();
    if (Owner) {
      CFRetain(Owner);
    }
    *(_WORD *)(a1 + 176) |= 0x10u;
    CMNotificationCenterGetDefaultLocalCenter();
    FigThreadGetGlobalNetworkBufferingQueue();
    FigDeferNotificationToDispatchQueue();
  }

  return FigRetainProxyUnlockMutex();
}

uint64_t FigCRABSRead(const void *a1, size_t a2, uint64_t a3, char *a4, void *a5)
{
  uint64_t v12 = 0;
  CMBaseObjectGetDerivedStorage();
  FigGetUpTimeNanoseconds();
  uint64_t v10 = readOrRef(a1, a2, a3, a4, 0, &v12, -1);
  if (a5) {
    *a5 = v12;
  }
  FigGetUpTimeNanoseconds();
  FigByteStreamStatsLogOneRead();
  return v10;
}

uint64_t readOrRef(const void *a1, size_t a2, uint64_t a3, char *a4, CMBlockBufferRef *a5, uint64_t *a6, int a7)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v97 = 0;
  uint64_t v14 = *(const void **)(DerivedStorage + 760);
  if (!v14)
  {
    CFTypeRef v15 = 0;
    if (!a1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  CFTypeRef v15 = CFRetain(v14);
  if (a1) {
LABEL_3:
  }
    CFRetain(a1);
LABEL_4:
  if (a5) {
    *a5 = 0;
  }
  if (a3 < 0)
  {
    uint64_t v24 = FigSignalErrorAt();
    goto LABEL_228;
  }
  blockBufferOut = a5;
  uint64_t v16 = 0;
  if (!a4) {
    goto LABEL_10;
  }
  uint64_t v17 = a3;
  if (*(void *)(DerivedStorage + 96) < a2) {
    goto LABEL_24;
  }
  uint64_t v16 = 0;
  if (FigReadWriteLockLockForRead())
  {
LABEL_10:
    uint64_t v17 = a3;
    goto LABEL_24;
  }
  uint64_t v18 = *(void *)(DerivedStorage + 160);
  if (v18 < 0)
  {
LABEL_22:
    uint64_t v17 = a3;
    goto LABEL_23;
  }
  uint64_t v17 = a3;
  uint64_t v19 = a3 - v18;
  if (a3 >= v18)
  {
    uint64_t v20 = *(void *)(DerivedStorage + 96) + v18;
    size_t v21 = v20 - a3;
    if (v20 > a3)
    {
      uint64_t v22 = a3;
      if (v21 >= a2) {
        size_t v23 = a2;
      }
      else {
        size_t v23 = v20 - a3;
      }
      memcpy(a4, (const void *)(*(void *)(DerivedStorage + 152) + v19), v23);
      if (v21 >= a2)
      {
        size_t v85 = v23;
        FigReadWriteLockUnlockForRead();
        uint64_t v30 = 0;
        if (a6) {
          *a6 = v85;
        }
        goto LABEL_210;
      }
      uint64_t v17 = v23 + v22;
      uint64_t v16 = v23;
      a3 = v22;
      goto LABEL_23;
    }
    uint64_t v16 = 0;
    goto LABEL_22;
  }
LABEL_23:
  FigReadWriteLockUnlockForRead();
LABEL_24:
  uint64_t v90 = a3;
  uint64_t v24 = FigRetainProxyLockMutex();
  if (v24)
  {
LABEL_228:
    uint64_t v30 = v24;
    goto LABEL_210;
  }
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v30 = 4294954511;
    goto LABEL_210;
  }
  unint64_t v94 = a2;
  unsigned int v95 = a4;
  CMTimeEpoch v89 = a6;
  if ((*(void *)(DerivedStorage + 56) == -1 || !*(void *)(DerivedStorage + 80))
    && !crabsUpdateLength(DerivedStorage, *(void *)(DerivedStorage + 32)))
  {
    unsigned int v25 = crabsInitialize(DerivedStorage);
    if (v25)
    {
      unsigned int v29 = v25;
      goto LABEL_163;
    }
    if (dword_1E9350B10)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (*(void *)(DerivedStorage + 56) != -1 && *(void *)(DerivedStorage + 80)) {
    goto LABEL_44;
  }
  uint64_t v27 = v16;
  if (*(_DWORD *)(DerivedStorage + 560) == 1)
  {
    uint64_t v28 = (uint64_t *)(DerivedStorage + 512);
LABEL_37:
    unsigned int v29 = crabsWaitForLoad(DerivedStorage, v28, 0, 0, a7);
    goto LABEL_38;
  }
  uint64_t v28 = (uint64_t *)(DerivedStorage + 616);
  if (*(_DWORD *)(DerivedStorage + 664) == 1) {
    goto LABEL_37;
  }
  if (!*(_DWORD *)(DerivedStorage + 116)
    || (*(unsigned char *)(DerivedStorage + 504) & 8) != 0
    && *(void *)(DerivedStorage + 360) == *(void *)(DerivedStorage + 88))
  {
    uint64_t v34 = *(void *)(DerivedStorage + 96);
    if (v34 == 0x4000)
    {
      uint64_t v35 = v17 >> 14;
    }
    else if (v34 == 0x10000)
    {
      uint64_t v35 = v17 >> 16;
    }
    else
    {
      uint64_t v35 = v17 / v34;
    }
    unsigned int v29 = crabsIssueImmedLoad(DerivedStorage, v17, v34 - v17 + v35 * v34);
    if (!v29) {
      goto LABEL_37;
    }
  }
  else
  {
    unsigned int v29 = crabsMoveFirehose(DerivedStorage, v17);
    uint64_t v28 = (uint64_t *)(DerivedStorage + 512);
    if (!v29) {
      goto LABEL_37;
    }
  }
LABEL_38:
  if (v29 == -12930) {
    uint64_t v30 = 0;
  }
  else {
    uint64_t v30 = v29;
  }
  uint64_t v16 = v27;
  if (v30)
  {
    if (v30 == -12785) {
      goto LABEL_209;
    }
    FigSignalErrorAt();
    goto LABEL_163;
  }
LABEL_44:
  size_t v31 = v94;
  if (*(unsigned char *)(DerivedStorage + 129))
  {
    uint64_t v32 = *(void *)(DerivedStorage + 96);
    if (v32 == 0x4000)
    {
      uint64_t v33 = v17 >> 14;
    }
    else if (v32 == 0x10000)
    {
      uint64_t v33 = v17 >> 16;
    }
    else
    {
      uint64_t v33 = v17 / v32;
    }
    if (*(uint64_t *)(DerivedStorage + 184) >= 1)
    {
      uint64_t v36 = 0;
      uint64_t v37 = *(void *)(DerivedStorage + 192);
      do
        *(void *)(v37 + 8 * v36++) = v33;
      while (v36 < *(void *)(DerivedStorage + 184));
    }
    crabsMoveAnchor(DerivedStorage, v33);
    *(unsigned char *)(DerivedStorage + 129) = 0;
  }
  CFTypeRef cf = a1;
  IsBusCGFloat y = crabsDiskBackingIsBusy(DerivedStorage, 0);
  if (v16 >= v94)
  {
    CFTypeID v38 = 0;
LABEL_160:
    int v97 = v38;
    if (*(_DWORD *)(DerivedStorage + 560) == 1)
    {
      unsigned int v29 = 0;
      goto LABEL_162;
    }
    a1 = cf;
    long long v74 = (CFTypeRef *)blockBufferOut;
    if (!*(_DWORD *)(DerivedStorage + 116)) {
      goto LABEL_169;
    }
    int v75 = *(_DWORD *)(DerivedStorage + 504);
    if ((v75 & 8) != 0 && *(void *)(DerivedStorage + 360) == *(void *)(DerivedStorage + 88)) {
      goto LABEL_169;
    }
    if ((v75 & 3) == 0)
    {
      UpTimeNanoCMTime seconds = FigGetUpTimeNanoseconds();
      if (*(void *)(DerivedStorage + 496) > UpTimeNanoseconds)
      {
LABEL_169:
        unsigned int v29 = 0;
        goto LABEL_181;
      }
      *(void *)(DerivedStorage + 496) = UpTimeNanoseconds + 50000000;
    }
    unsigned int v29 = 0;
    if (!crabsSelectNextFill(DerivedStorage, &v97))
    {
      uint64_t v77 = v16;
      uint64_t v78 = v97;
      if (v97)
      {
        if (crabsShouldStartFirehose(DerivedStorage, *v97))
        {
          uint64_t v30 = 4294954511;
          if (crabsMoveFirehose(DerivedStorage, *(void *)(DerivedStorage + 96) * *v78) == -12785) {
            goto LABEL_209;
          }
        }
        unsigned int v29 = 0;
      }
      uint64_t v16 = v77;
    }
    goto LABEL_181;
  }
  CFTypeID v38 = 0;
  CFAllocatorRef v86 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeRef v93 = v15;
  while (1)
  {
    uint64_t v39 = *(void *)(DerivedStorage + 96);
    uint64_t v96 = v16;
    if (v39 == 0x4000)
    {
      uint64_t v40 = v17 >> 14;
    }
    else if (v39 == 0x10000)
    {
      uint64_t v40 = v17 >> 16;
    }
    else
    {
      uint64_t v40 = v17 / v39;
    }
    if (v40 >= *(void *)(DerivedStorage + 88) || !*(unsigned char *)(DerivedStorage + 104))
    {
      uint64_t v16 = v96;
      goto LABEL_160;
    }
    CFTypeID v38 = *(int **)(*(void *)(DerivedStorage + 80) + 8 * v40);
    if (!v38
      && (crabsInitBlock(DerivedStorage, v40)
       || (CFTypeID v38 = *(int **)(*(void *)(DerivedStorage + 80) + 8 * v40)) == 0))
    {
      uint64_t v30 = FigSignalErrorAt();
      goto LABEL_173;
    }
    if ((~*((unsigned __int16 *)v38 + 4) & 0x14) != 0)
    {
      uint64_t v41 = *(uint64_t **)(DerivedStorage + 192);
      uint64_t v42 = *(void *)(DerivedStorage + 200);
      if (v41[v42] != v40)
      {
        uint64_t v43 = (v42 + 1) % *(void *)(DerivedStorage + 184);
        *(void *)(DerivedStorage + 200) = v43;
        uint64_t v44 = *(void *)(DerivedStorage + 224);
        uint64_t v45 = v41[v43];
        v41[v43] = v40;
        uint64_t v46 = *(void *)(DerivedStorage + 216);
        BOOL v47 = v46 < 1;
        uint64_t v48 = v46 - 1;
        if (!v47) {
          *(void *)(DerivedStorage + 216) = v48;
        }
        if (v44 == v45)
        {
          uint64_t v49 = *(void *)(DerivedStorage + 88);
          uint64_t v50 = *(void *)(DerivedStorage + 184);
          if (v50 >= 1)
          {
            do
            {
              uint64_t v52 = *v41++;
              uint64_t v51 = v52;
              if (v49 >= v52) {
                uint64_t v49 = v51;
              }
              --v50;
            }
            while (v50);
          }
          if (*(void *)(DerivedStorage + 224) != v49) {
            crabsMoveAnchor(DerivedStorage, v49);
          }
        }
      }
    }
    uint64_t v53 = v40 * v39;
    uint64_t v54 = v17 - v40 * v39;
    if (*(void *)(DerivedStorage + 96) - v54 >= v31 - v96) {
      uint64_t v55 = v31 - v96;
    }
    else {
      uint64_t v55 = *(void *)(DerivedStorage + 96) - v54;
    }
    int64_t v56 = v55 + v17;
    if (v95 && (*(unsigned char *)(DerivedStorage + 504) & 1) != 0 && !IsBusy && v56 == v53 + v38[1])
    {
      unsigned int v57 = *((unsigned __int16 *)v38 + 4);
      if ((v57 & 0x200) != 0)
      {
        if (((v57 >> 8) & 1) == 0) {
          goto LABEL_95;
        }
      }
      else if (!*((void *)v38 + 11))
      {
        goto LABEL_95;
      }
      if (!*((void *)v38 + 10))
      {
        *(void *)&customBlockSource.version = v55;
        uint64_t v16 = v96;
        FigFileForkRead();
        int64_t v67 = *(void *)&customBlockSource.version;
        CFTypeRef v15 = v93;
        goto LABEL_152;
      }
    }
LABEL_95:
    if (*((void *)v38 + 10))
    {
      if ((*(unsigned char *)(DerivedStorage + 504) & 1) != 0 && v38 == *(int **)(DerivedStorage + 744)) {
        crabsCompleteLazyPagein(DerivedStorage, 1);
      }
      goto LABEL_109;
    }
    BOOL v58 = (v38[2] & 0x80) != 0
       && crabsMakeBackingNonvolatile((void *)DerivedStorage, (uint64_t)v38, *(void *)(DerivedStorage + 224) <= *v38) != 0;
    if (!crabAllocWorkingSet(DerivedStorage, (uint64_t)v38))
    {
      uint64_t v59 = crabsSwipeUnusedWorking(DerivedStorage, (uint64_t)v38);
      if (v59)
      {
        uint64_t v30 = v59;
        if (!v58) {
          goto LABEL_231;
        }
        CFTypeRef v15 = v93;
        if ((*(unsigned char *)(DerivedStorage + 504) & 3) == 0) {
          crabsMakeBlockVolatileRelativeToAnchor((void *)DerivedStorage, v38);
        }
LABEL_173:
        a1 = cf;
        goto LABEL_209;
      }
    }
    unsigned int v60 = *((unsigned __int16 *)v38 + 4);
    if ((v60 & 0x200) != 0) {
      int v61 = (v60 >> 8) & 1;
    }
    else {
      int v61 = *((void *)v38 + 11) != 0;
    }
    size_t v31 = v94;
    if (v61) {
      crabsPageInBlock(DerivedStorage, v38);
    }
LABEL_109:
    if ((v38[2] & 4) != 0 || v56 <= (unint64_t)(v53 + v38[1])) {
      goto LABEL_127;
    }
    LOBYTE(customBlockSource.version) = 0;
    *(_WORD *)(DerivedStorage + 176) |= 4u;
    crabsRetainWorking((void *)DerivedStorage, (uint64_t)v38);
    if (*(_DWORD *)(DerivedStorage + 664) == 1)
    {
      uint64_t v62 = *(void *)(DerivedStorage + 632);
      if (v62 <= v17 && *(void *)(DerivedStorage + 640) + v62 >= v56)
      {
        long long v63 = (uint64_t *)(DerivedStorage + 616);
        if (*(void *)(DerivedStorage + 648) + v62 < v56) {
          goto LABEL_122;
        }
      }
    }
    if ((*(unsigned char *)(DerivedStorage + 504) & 8) == 0
      || *(_DWORD *)(DerivedStorage + 116) && *(void *)(DerivedStorage + 360) != *(void *)(DerivedStorage + 88))
    {
      int v64 = crabsEvaluateFirehose(DerivedStorage, v38, 0, &customBlockSource);
      if (v64 | LOBYTE(customBlockSource.version))
      {
        long long v63 = (uint64_t *)(DerivedStorage + 512);
        if (!LOBYTE(customBlockSource.version)) {
          goto LABEL_122;
        }
        int v65 = crabsMoveFirehose(DerivedStorage, v17);
        long long v63 = (uint64_t *)(DerivedStorage + 512);
        if (!v65) {
          goto LABEL_122;
        }
      }
    }
    unsigned int v29 = crabsIssueImmedLoad(DerivedStorage, v17, v55);
    long long v63 = (uint64_t *)(DerivedStorage + 616);
    if (!v29) {
LABEL_122:
    }
      unsigned int v29 = crabsWaitForLoad(DerivedStorage, v63, v17, v55, a7);
    if (v29 == -12785) {
      break;
    }
    crabsReleaseWorking((void *)DerivedStorage, v38, 1, 1);
    if (v29 && v29 != -12930)
    {
      FigSignalErrorAt();
      a1 = cf;
      long long v74 = (CFTypeRef *)blockBufferOut;
      CFTypeRef v15 = v93;
      uint64_t v16 = v96;
      goto LABEL_181;
    }
    size_t v31 = v94;
LABEL_127:
    int64_t v66 = v53 + v38[1];
    if (v56 <= v66) {
      int64_t v67 = v55;
    }
    else {
      int64_t v67 = v66 - v17;
    }
    if (v67 < 1)
    {
      CFTypeRef v15 = v93;
LABEL_134:
      uint64_t v16 = v96;
      goto LABEL_152;
    }
    CFTypeRef v15 = v93;
    if (v95)
    {
      uint64_t v68 = -(v40 * v39);
      uint64_t v16 = v96;
      memcpy(&v95[v96], (const void *)(*(void *)(*((void *)v38 + 10) + 16) + v90 + v96 + v68), v67);
      crabsRetainWorking((void *)DerivedStorage, (uint64_t)v38);
      crabsReleaseWorking((void *)DerivedStorage, v38, 1, 1);
    }
    else
    {
      if (!blockBufferOut) {
        goto LABEL_134;
      }
      HIDWORD(customBlockSource.AllocateBlock) = 0;
      *(void *)&customBlockSource.version = 0;
      customBlockSource.FreeBlock = (void (__cdecl *)(void *, void *, size_t))crabsBBufRefReleaseFn;
      customBlockSource.refCon = (void *)*((void *)v38 + 10);
      uint64_t v16 = v96;
      if (!*blockBufferOut)
      {
        EmptCGFloat y = CMBlockBufferCreateEmpty(v86, (v94 - 1 + *(void *)(DerivedStorage + 96)) / *(void *)(DerivedStorage + 96) + 1, 0, blockBufferOut);
        if (Empty)
        {
LABEL_221:
          unsigned int v29 = Empty;
          long long v74 = (CFTypeRef *)blockBufferOut;
          a1 = cf;
          if (*blockBufferOut)
          {
            CFRelease(*blockBufferOut);
            CMBlockBufferRef *blockBufferOut = 0;
          }
          goto LABEL_181;
        }
      }
      if (v96 + v90 - v53 < 0)
      {
        unsigned int v29 = FigSignalErrorAt();
LABEL_162:
        a1 = cf;
LABEL_163:
        long long v74 = (CFTypeRef *)blockBufferOut;
LABEL_181:
        if (v16 > 0 && v29 == -12930) {
          unsigned int v80 = 0;
        }
        else {
          unsigned int v80 = v29;
        }
        if (v89) {
          uint64_t *v89 = v16;
        }
        if (v80) {
          BOOL v81 = 0;
        }
        else {
          BOOL v81 = v16 == 0;
        }
        if (v81 && v94 != 0) {
          unsigned int v80 = -12930;
        }
        if (v80 == -12930) {
          uint64_t v30 = 4294954423;
        }
        else {
          uint64_t v30 = v80;
        }
        if (v74 && v30 && *v74)
        {
          CFRelease(*v74);
          CFTypeRef *v74 = 0;
        }
        if (v30 != -12873 && v30 != 0) {
          *(_WORD *)(DerivedStorage + 176) |= 4u;
        }
        goto LABEL_209;
      }
      EmptCGFloat y = CMBlockBufferAppendMemoryBlock(*blockBufferOut, *(void **)(*((void *)v38 + 10) + 16), *(void *)(DerivedStorage + 96), 0, &customBlockSource, v96 + v90 - v53, v67, 0);
      if (Empty) {
        goto LABEL_221;
      }
      crabsRetainWorking((void *)DerivedStorage, (uint64_t)v38);
      CFRetain(cf);
      ++gCRABS_Stats_4;
      ++*(void *)(DerivedStorage + 872);
      uint64_t v70 = *(void *)(DerivedStorage + 96);
      gCRABS_Stats_2 += v70;
      *(void *)(DerivedStorage + 856) += v70;
      size_t v31 = v94;
    }
    if (!FigReadWriteLockLockForWrite())
    {
      if ((v38[2] & 4) != 0)
      {
        size_t v72 = *(void *)(DerivedStorage + 96);
        uint64_t v71 = *(void *)(DerivedStorage + 160);
        if (v72 >= v31)
        {
          if (v71 != v53)
          {
            memcpy(*(void **)(DerivedStorage + 152), *(const void **)(*((void *)v38 + 10) + 16), v72);
            goto LABEL_150;
          }
LABEL_151:
          FigReadWriteLockUnlockForWrite();
          goto LABEL_152;
        }
      }
      else
      {
        uint64_t v71 = *(void *)(DerivedStorage + 160);
      }
      if (v71 != v53)
      {
        uint64_t v53 = -1;
LABEL_150:
        *(void *)(DerivedStorage + 160) = v53;
        goto LABEL_151;
      }
      goto LABEL_151;
    }
LABEL_152:
    v16 += v67;
    v17 += v67;
    if (v67 < v55 || v16 >= v31) {
      goto LABEL_160;
    }
  }
  uint64_t v30 = 4294954511;
LABEL_231:
  a1 = cf;
  CFTypeRef v15 = v93;
LABEL_209:
  crabsUnlockWithActions(DerivedStorage);
LABEL_210:
  if (v15) {
    CFRelease(v15);
  }
  if (a1) {
    CFRelease(a1);
  }
  return v30;
}

uint64_t crabsInitBlock(uint64_t a1, int a2)
{
  CFStringRef v4 = malloc_type_calloc(1uLL, 0x68uLL, 0x10B0040C2E76BD9uLL);
  if (v4)
  {
    if (*(unsigned char *)(a1 + 504)) {
      v4[4] |= 0x200u;
    }
    *(_DWORD *)CFStringRef v4 = a2;
    *((void *)v4 + 12) = -1;
    *(void *)(*(void *)(a1 + 80) + 8 * a2) = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t crabAllocWorkingSet(uint64_t a1, uint64_t a2)
{
  if (*(uint64_t *)(a1 + 344) > 15) {
    return 0;
  }
  CFStringRef v5 = CFAllocatorAllocate(*(CFAllocatorRef *)a1, *(void *)(a1 + 96), 0);
  if (v5) {
    goto LABEL_4;
  }
  if (*(unsigned char *)(a1 + 504)) {
    return 0;
  }
  uint64_t v13 = 0;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  __int16 v9 = *(_WORD *)(a2 + 8);
  *(_WORD *)(a2 + 8) = v9 | 0x400;
  int v10 = crabsSwipeBacking(a1, (uint64_t)v11, 0);
  uint64_t v2 = 0;
  CFStringRef v5 = (void *)*((void *)&v12 + 1);
  *(_WORD *)(a2 + 8) = *(_WORD *)(a2 + 8) & 0xFBFF | v9 & 0x400;
  if (!v10)
  {
    if (v5)
    {
LABEL_4:
      unint64_t v6 = *(void *)(a1 + 96);
      gCRABS_Stats_0 += v6;
      gCRABS_Stats_1 += v6;
      *(int64x2_t *)(a1 + 840) = vaddq_s64(*(int64x2_t *)(a1 + 840), vdupq_n_s64(v6));
      uint64_t v7 = malloc_type_malloc(0x20uLL, 0x10300405ED1140EuLL);
      *(void *)(a2 + 80) = v7;
      if (v7)
      {
        *uint64_t v7 = a2;
        v7[1] = a1;
        *((_DWORD *)v7 + 6) = 0;
        v7[2] = v5;
        uint64_t v2 = 1;
        addToWorkingSet((void *)a1, a2, 1, 1);
        return v2;
      }
      CFAllocatorDeallocate(*(CFAllocatorRef *)a1, v5);
      return 0;
    }
  }
  return v2;
}

vm_address_t QTMovieCacheMemAllocateCallBack(vm_size_t size, uint64_t a2, uint64_t a3)
{
  vm_address_t result = 0;
  vm_size_t valuePtr = size;
  vm_address_t address = 0;
  if (*(void *)(a3 + 16) + size <= *(void *)(a3 + 24))
  {
    unint64_t v6 = (unsigned int *)MEMORY[0x1E4F14960];
    if (vm_allocate(*MEMORY[0x1E4F14960], &address, size, 1610612739)) {
      return 0;
    }
    uint64_t v7 = *(void *)(a3 + 16);
    if (!v7)
    {
      *(void *)a3 = size;
      goto LABEL_12;
    }
    if (*(void *)a3 != size)
    {
      CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (*(void *)(a3 + 8)
        || (memset(&v12, 0, sizeof(v12)),
            CFMutableDictionaryRef v9 = CFDictionaryCreateMutable(v8, 0, &v12, MEMORY[0x1E4F1D540]),
            (*(void *)(a3 + 8) = v9) != 0))
      {
        CFNumberRef v10 = CFNumberCreate(v8, kCFNumberSInt64Type, &valuePtr);
        if (v10)
        {
          CFNumberRef v11 = v10;
          CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a3 + 8), (const void *)address, v10);
          CFRelease(v11);
          size = valuePtr;
          if (*(void *)(a3 + 8))
          {
            uint64_t v7 = *(void *)(a3 + 16);
            goto LABEL_12;
          }
        }
        else
        {
          size = valuePtr;
        }
      }
      MEMORY[0x199712230](*v6, address, size);
      return 0;
    }
LABEL_12:
    *(void *)(a3 + 16) = v7 + size;
    return address;
  }
  return result;
}

uint64_t addToWorkingSet(void *a1, uint64_t a2, int a3, int a4)
{
  MEMORY[0x19970E290](a1[48]);
  uint64_t v8 = *(void *)(a2 + 64);
  CFMutableDictionaryRef v9 = *(void **)(a2 + 72);
  if (v8)
  {
    *(void *)(v8 + 72) = v9;
    CFMutableDictionaryRef v9 = *(void **)(a2 + 72);
LABEL_5:
    void *v9 = v8;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    goto LABEL_6;
  }
  if (v9)
  {
    a1[47] = v9;
    goto LABEL_5;
  }
LABEL_6:
  uint64_t result = MEMORY[0x19970E2B0](a1[48]);
  uint64_t v11 = a2 + 32;
  if (!*(void *)(a2 + 32) && !*(void *)(a2 + 40))
  {
    if (a3)
    {
      if (!a4)
      {
        uint64_t v17 = (void *)a1[40];
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = v17;
        *uint64_t v17 = a2;
        a1[40] = v11;
        goto LABEL_22;
      }
      CFDictionaryKeyCallBacks v12 = a1 + 39;
      uint64_t v13 = a1[39];
      *(void *)(a2 + 32) = v13;
      if (v13) {
        uint64_t v14 = (void *)(v13 + 40);
      }
      else {
        uint64_t v14 = a1 + 40;
      }
      void *v14 = v11;
      a1[39] = a2;
    }
    else
    {
      ++a1[44];
      *(_WORD *)(a2 + 8) |= 0x20u;
      if (!a4)
      {
        uint64_t v18 = (void *)a1[42];
        *(void *)(a2 + 32) = 0;
        *(void *)(a2 + 40) = v18;
        *uint64_t v18 = a2;
        a1[42] = v11;
        goto LABEL_22;
      }
      CFDictionaryKeyCallBacks v12 = a1 + 41;
      uint64_t v15 = a1[41];
      *(void *)(a2 + 32) = v15;
      if (v15) {
        uint64_t v16 = (void *)(v15 + 40);
      }
      else {
        uint64_t v16 = a1 + 42;
      }
      *uint64_t v16 = v11;
      a1[41] = a2;
    }
    *(void *)(a2 + 40) = v12;
LABEL_22:
    ++a1[43];
  }
  return result;
}

void *crabsRetainWorking(void *a1, uint64_t a2)
{
  uint64_t result = (void *)FigAtomicIncrement32();
  if (result == 1 && (*(void *)(a2 + 32) || *(void *)(a2 + 40)))
  {
    uint64_t v5 = a1[12];
    gCRABS_Stats_1 -= v5;
    a1[106] -= v5;
    return removeFromWorkingSet(a1, a2);
  }
  return result;
}

void *removeFromWorkingSet(void *result, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 8);
  if ((v2 & 0x20) != 0)
  {
    --result[44];
    uint64_t v5 = *(void *)(a2 + 32);
    unint64_t v6 = *(void **)(a2 + 40);
    if (v5)
    {
      *(void *)(v5 + 40) = v6;
      unint64_t v6 = *(void **)(a2 + 40);
    }
    else
    {
      if (!v6)
      {
LABEL_12:
        *(_WORD *)(a2 + 8) = v2 & 0xFFDF;
        goto LABEL_13;
      }
      result[42] = v6;
    }
    *unint64_t v6 = v5;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    goto LABEL_12;
  }
  uint64_t v3 = *(void *)(a2 + 32);
  CFStringRef v4 = *(void **)(a2 + 40);
  if (v3)
  {
    *(void *)(v3 + 40) = v4;
    CFStringRef v4 = *(void **)(a2 + 40);
LABEL_8:
    *CFStringRef v4 = v3;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    goto LABEL_13;
  }
  if (v4)
  {
    result[40] = v4;
    goto LABEL_8;
  }
LABEL_13:
  --result[43];
  return result;
}

uint64_t removeFromList(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  CFStringRef v4 = (void *)(a3 + 32);
  uint64_t v5 = 32;
  if (!a4)
  {
    uint64_t v5 = 48;
    CFStringRef v4 = (void *)(a3 + 48);
  }
  if (*(void *)(a3 + v5) || v4[1])
  {
    if (a4)
    {
      uint64_t v6 = *(void *)(a3 + 32);
      uint64_t v7 = *(void **)(a3 + 40);
      if (v6)
      {
        *(void *)(v6 + 40) = v7;
        uint64_t v7 = *(void **)(a3 + 40);
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v6 = *(void *)(a3 + 48);
      uint64_t v7 = *(void **)(a3 + 56);
      if (v6)
      {
        *(void *)(v6 + 56) = v7;
        uint64_t v7 = *(void **)(a3 + 56);
        goto LABEL_11;
      }
    }
    *(void *)(a2 + 8) = v7;
LABEL_11:
    *uint64_t v7 = v6;
    *CFStringRef v4 = 0;
    v4[1] = 0;
    if (result + 264 == a2) {
      *(_WORD *)(a3 + 8) &= ~0x1000u;
    }
  }
  return result;
}

uint64_t crabsEvaluateFirehose(uint64_t a1, int *a2, int a3, unsigned char *a4)
{
  *a4 = 1;
  if (*(_DWORD *)(a1 + 560) != 1 || *(void *)(a1 + 56) == -1 || !*(void *)(a1 + 80)) {
    return 0;
  }
  uint64_t v4 = *(void *)(a1 + 528);
  uint64_t v5 = *(void *)(a1 + 544);
  uint64_t v6 = v5 + v4;
  uint64_t v7 = *(void *)(a1 + 96);
  if (v7 == 0x4000)
  {
    uint64_t v8 = v6 >> 14;
  }
  else
  {
    uint64_t v8 = v6 / v7;
    if (v7 == 0x10000) {
      uint64_t v8 = v6 >> 16;
    }
  }
  uint64_t v9 = *a2;
  uint64_t v10 = v7 * v9;
  if (v4 <= v7 * v9 + a2[1] && *(void *)(a1 + 536) + v4 >= v10 + v7 && v6 < v10 + v7)
  {
    if (v5 < 1)
    {
      if (v7 == 0x4000)
      {
        uint64_t v12 = v4 >> 14;
      }
      else if (v7 == 0x10000)
      {
        uint64_t v12 = v4 >> 16;
      }
      else
      {
        uint64_t v12 = v4 / v7;
      }
      if (v12 > v9 || v12 + 2 < v9) {
        goto LABEL_26;
      }
    }
    else if (*(void *)(a1 + 584) / *(uint64_t *)(a1 + 600) + v6 < v10)
    {
      goto LABEL_26;
    }
    uint64_t v13 = 1;
LABEL_61:
    *a4 = 0;
    return v13;
  }
LABEL_26:
  if (!a3)
  {
    int v16 = 1;
LABEL_38:
    if (*(uint64_t *)(a1 + 568) >= 1)
    {
      int v16 = 0;
      *a4 = 0;
    }
    goto LABEL_40;
  }
  uint64_t v14 = v8 + 2;
  if (__OFSUB__(v8, v8 + 2)) {
    uint64_t v14 = v8;
  }
  uint64_t v15 = v14 + 1;
  int v16 = 1;
  uint64_t v17 = v8;
  do
  {
    if (v17 >= *(void *)(a1 + 88)) {
      break;
    }
    uint64_t v18 = *(void *)(*(void *)(a1 + 80) + 8 * v17);
    if (v18 && (*(_WORD *)(v18 + 8) & 1) != 0)
    {
      int v16 = 0;
      *a4 = 0;
    }
    ++v17;
  }
  while (v15 != v17);
  if (v16) {
    goto LABEL_38;
  }
LABEL_40:
  if (*(uint64_t *)(a1 + 216) <= 0)
  {
    uint64_t v23 = *(void *)(a1 + 184);
    if (v23 >= 1)
    {
      uint64_t v24 = 0;
      uint64_t v25 = v8 - 8;
      uint64_t v26 = v8 + 2;
      while (v16 && *(_DWORD *)(a1 + 116))
      {
        uint64_t v27 = *(void *)(*(void *)(a1 + 192) + 8 * v24);
        if (v27 >= v25 && v27 <= v26)
        {
          int v16 = 0;
          *a4 = 0;
          uint64_t v23 = *(void *)(a1 + 184);
        }
        uint64_t v22 = 0;
        if (++v24 >= v23) {
          return v22;
        }
      }
    }
    return 0;
  }
  uint64_t v19 = *(void *)(a1 + 208);
  uint64_t v20 = *(void *)(a1 + 88);
  if (v19 >= v20) {
    return 0;
  }
  while (1)
  {
    uint64_t v21 = *(void *)(*(void *)(a1 + 80) + 8 * v19);
    if (!v21 || (*(_WORD *)(v21 + 8) & 4) == 0) {
      break;
    }
    uint64_t v22 = 0;
    if (v20 == ++v19) {
      return v22;
    }
  }
  uint64_t v13 = 0;
  uint64_t v22 = 0;
  if (*a2 != v19) {
    goto LABEL_61;
  }
  return v22;
}

uint64_t crabsMoveFirehose(uint64_t a1, uint64_t a2)
{
  IsBusCGFloat y = crabsDiskBackingIsBusy(a1, 0);
  uint64_t v5 = *(const void **)(a1 + 760);
  if (v5) {
    CFTypeRef v6 = CFRetain(v5);
  }
  else {
    CFTypeRef v6 = 0;
  }
  if (*(_DWORD *)(a1 + 560) == 1)
  {
    uint64_t v7 = *(void *)(a1 + 512);
    int v8 = 1;
  }
  else
  {
    int v8 = 0;
    uint64_t v7 = 0;
  }
  if (*(void *)(a1 + 56) == -1 || (uint64_t v9 = *(void *)(a1 + 80)) == 0)
  {
    if (dword_1E9350B10)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v13 = crabsIssueLoad(a1, a1 + 512, a2, 0, v8, v7);
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)(a1 + 96);
  if (v10 == 0x4000)
  {
    uint64_t v11 = a2 >> 14;
  }
  else if (v10 == 0x10000)
  {
    uint64_t v11 = a2 >> 16;
  }
  else
  {
    uint64_t v11 = a2 / v10;
  }
  uint64_t v15 = *(void *)(a1 + 88);
  if (v11 < v15)
  {
    while (1)
    {
      uint64_t v16 = *(void *)(v9 + 8 * v11);
      if (!v16)
      {
        if (crabsInitBlock(a1, v11)) {
          break;
        }
        uint64_t v9 = *(void *)(a1 + 80);
        uint64_t v16 = *(void *)(v9 + 8 * v11);
        if (!v16) {
          break;
        }
      }
      if ((*(_WORD *)(v16 + 8) & 4) != 0 && (!IsBusy || *(void *)(v16 + 80)) && ++v11 < *(void *)(a1 + 88)) {
        continue;
      }
      uint64_t v15 = *(void *)(a1 + 88);
      goto LABEL_28;
    }
    uint64_t v13 = FigSignalErrorAt();
LABEL_15:
    uint64_t v14 = v13;
    if (!v6) {
      return v14;
    }
    goto LABEL_49;
  }
LABEL_28:
  if (v11 >= v15)
  {
    uint64_t v14 = 4294954366;
    if (!v6) {
      return v14;
    }
    goto LABEL_49;
  }
  uint64_t v17 = v11 + 1;
  if (v11 + 1 < v15)
  {
    while (1)
    {
      uint64_t v18 = *(void *)(v9 + 8 * v17);
      if (v18)
      {
        if ((*(_WORD *)(v18 + 8) & 4) != 0 && (!IsBusy || *(void *)(v18 + 80))) {
          break;
        }
      }
      if (v15 == ++v17)
      {
        uint64_t v17 = v15;
        break;
      }
    }
  }
  uint64_t v19 = *(void *)(a1 + 96);
  uint64_t v20 = v19 * v11;
  uint64_t v21 = v19 * v17;
  if (dword_1E9350B10)
  {
    uint64_t v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v22 = *(void *)(a1 + 920);
  if (v22)
  {
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v24 = v23 ? v23 : 0;
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 32);
    if (v25) {
      v25(v22, 0x1EE582BF8, 0x1EE55E178, 1);
    }
  }
  uint64_t v14 = crabsIssueLoad(a1, a1 + 512, v20, v21 - v20, v8, v7);
  if (!v14) {
    *(unsigned char *)(a1 + 112) = 1;
  }
  if (v6) {
LABEL_49:
  }
    CFRelease(v6);
  return v14;
}

uint64_t crabsIssueLoad(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v12 = *(const void **)(a1 + 760);
  if (v12) {
    CFTypeRef v13 = CFRetain(v12);
  }
  else {
    CFTypeRef v13 = 0;
  }
  uint64_t v14 = *(const void **)(a1 + 32);
  if (v14) {
    CFTypeRef v15 = CFRetain(v14);
  }
  else {
    CFTypeRef v15 = 0;
  }
  uint64_t v16 = *(const void **)(a1 + 920);
  uint64_t v82 = a6;
  CFTypeRef v83 = v13;
  if (v16)
  {
    CFTypeRef v17 = CFRetain(v16);
    if (!a5) {
      goto LABEL_28;
    }
  }
  else
  {
    CFTypeRef v17 = 0;
    if (!a5) {
      goto LABEL_28;
    }
  }
  UpTimeNanoCMTime seconds = FigGetUpTimeNanoseconds();
  uint64_t v19 = UpTimeNanoseconds - *(void *)(a2 + 64);
  if (v19 >= 1 && v17)
  {
    uint64_t v20 = UpTimeNanoseconds;
    uint64_t v81 = *(void *)(a2 + 32);
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(void (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v22 + 32);
    if (v23) {
      v23(v17, 0x1EE582BF8, 0x1EE55E138, v81);
    }
    uint64_t v24 = *(void *)(a2 + 64);
    uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v25) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    uint64_t v27 = *(void (**)(CFTypeRef, uint64_t, uint64_t, unint64_t))(v26 + 32);
    if (v27) {
      v27(v17, 0x1EE582BF8, 0x1EE55E158, (v20 - v24) / 0xF4240uLL);
    }
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = *(void (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v29 + 40);
    if (v30) {
      v30(v17, 0x1EE582BF8, 0x1EE55E098, (uint64_t)((double)v81 * 8.0 / ((double)v19 / 1000000000.0)));
    }
  }
LABEL_28:
  uint64_t v84 = 0;
  uint64_t v31 = *(void *)(a1 + 56);
  if (v31 == -1 || (uint64_t v32 = *(void *)(a1 + 80)) == 0)
  {
    uint64_t v42 = *(void *)(a1 + 96);
    uint64_t v35 = a3 / v42 * v42;
    uint64_t v43 = a3 % v42 + a4;
    uint64_t v44 = (a4 + a3) % v42;
    uint64_t v45 = v43 + v42 - v44;
    if (!v44) {
      uint64_t v45 = v43;
    }
    if (a4) {
      uint64_t v38 = v45;
    }
    else {
      uint64_t v38 = 0;
    }
LABEL_49:
    *(void *)(a2 + 16) = v35;
    *(void *)(a2 + 24) = v38;
    *(void *)(a2 + 32) = 0;
    *(_DWORD *)(a2 + 48) = 1;
    *(void *)a2 = 1;
    *(void *)(a2 + 64) = FigGetUpTimeNanoseconds();
    *(unsigned char *)(a2 + 96) = 0;
    int v46 = FigAtomicIncrement32();
    *(_DWORD *)(a2 + 8) = v46;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v48 = a1 + 512;
    FigCFDictionarySetInt();
    FigRetainProxyUnlockMutex();
    if (a5)
    {
      uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v49) {
        uint64_t v50 = v49;
      }
      else {
        uint64_t v50 = 0;
      }
      uint64_t v51 = *(void (**)(CFTypeRef, uint64_t))(v50 + 16);
      if (v51) {
        v51(v15, v82);
      }
      if (v17)
      {
        uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v52) {
          uint64_t v53 = v52;
        }
        else {
          uint64_t v53 = 0;
        }
        uint64_t v54 = *(void (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v53 + 32);
        if (v54) {
          v54(v17, 0x1EE582BF8, 0x1EE583C18, 1);
        }
        uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v55) {
          uint64_t v56 = v55;
        }
        else {
          uint64_t v56 = 0;
        }
        unsigned int v57 = *(void (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v56 + 32);
        if (v57) {
          v57(v17, 0x1EE582BF8, 0x1EE55E1B8, 1);
        }
      }
    }
    uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v58) {
      uint64_t v59 = v58;
    }
    else {
      uint64_t v59 = 0;
    }
    unsigned int v60 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, CFMutableDictionaryRef, void (*)(const void *, uint64_t, uint64_t, uint64_t, OpaqueCMBlockBuffer *, char, int), CFTypeRef, void, uint64_t *))(v59 + 8);
    if (v60)
    {
      uint64_t v61 = v35;
      uint64_t v62 = v83;
      uint64_t v63 = v60(v15, v61, v38, Mutable, crabsIncrementalReadCallback, v83, v46, &v84);
    }
    else
    {
      uint64_t v63 = 4294954514;
      uint64_t v62 = v83;
    }
    FigRetainProxyLockMutex();
    if (!FigRetainProxyIsInvalidated())
    {
      if (v63)
      {
        *(_DWORD *)(a2 + 48) = v63;
        *(void *)a2 = 1;
        goto LABEL_93;
      }
      if (v46 == *(_DWORD *)(a2 + 8) && *(void *)a2 == 1)
      {
        *(void *)a2 = v84;
        if (v17)
        {
          uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v64) {
            uint64_t v65 = v64;
          }
          else {
            uint64_t v65 = 0;
          }
          long long v74 = *(void (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v65 + 32);
          if (v74) {
            v74(v17, 0x1EE582BF8, 0x1EE583BF8, 1);
          }
          if (v48 != a2)
          {
            uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v75) {
              uint64_t v76 = v75;
            }
            else {
              uint64_t v76 = 0;
            }
            uint64_t v79 = *(void (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v76 + 32);
            if (v79) {
              v79(v17, 0x1EE582BF8, 0x1EE55E238, 1);
            }
            goto LABEL_115;
          }
          uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v77) {
            uint64_t v78 = v77;
          }
          else {
            uint64_t v78 = 0;
          }
          unsigned int v80 = *(void (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v78 + 32);
          if (v80) {
            v80(v17, 0x1EE582BF8, 0x1EE55E198, 1);
          }
        }
        else if (v48 != a2)
        {
LABEL_115:
          uint64_t v63 = 0;
          ++*(_DWORD *)(a1 + 836);
          goto LABEL_93;
        }
        uint64_t v63 = 0;
        ++*(_DWORD *)(a1 + 832);
LABEL_93:
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v17) {
          goto LABEL_96;
        }
        goto LABEL_97;
      }
      FigRetainProxyUnlockMutex();
      uint64_t v66 = v84;
      uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v67) {
        uint64_t v68 = v67;
      }
      else {
        uint64_t v68 = 0;
      }
      CMTime v69 = *(void (**)(CFTypeRef, uint64_t))(v68 + 16);
      if (v69) {
        v69(v15, v66);
      }
      FigRetainProxyLockMutex();
      if (!FigRetainProxyIsInvalidated())
      {
        if (v17)
        {
          uint64_t v70 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v71 = v70 ? v70 : 0;
          size_t v72 = *(void (**)(CFTypeRef, uint64_t, uint64_t, uint64_t))(v71 + 32);
          if (v72) {
            v72(v17, 0x1EE582BF8, 0x1EE583C18, 1);
          }
        }
        uint64_t v63 = FigSignalErrorAt();
        goto LABEL_93;
      }
    }
    uint64_t v63 = 4294954511;
    goto LABEL_93;
  }
  uint64_t v33 = *(void *)(a1 + 96);
  uint64_t v34 = a3 / v33;
  uint64_t v35 = a3 / v33 * v33;
  uint64_t v36 = (a4 + a3) % v33;
  if (v36) {
    uint64_t v37 = v33 - v36;
  }
  else {
    uint64_t v37 = 0;
  }
  if (a3 % v33 + a4 + v37 + v35 <= v31) {
    uint64_t v38 = a3 % v33 + a4 + v37;
  }
  else {
    uint64_t v38 = v31 - v35;
  }
  uint64_t v39 = v35 >> 14;
  if (v33 == 0x10000) {
    uint64_t v34 = v35 >> 16;
  }
  if (v33 != 0x4000) {
    uint64_t v39 = v34;
  }
  uint64_t v40 = *(void *)(v32 + 8 * v39);
  if (!v40) {
    goto LABEL_49;
  }
  uint64_t v41 = *(int *)(v40 + 4);
  if (!v41) {
    goto LABEL_49;
  }
  v38 -= v41;
  if (v38)
  {
    v35 += v41;
    goto LABEL_49;
  }
  uint64_t v63 = 0;
  *(_DWORD *)(a2 + 48) = 0;
  uint64_t v62 = v83;
  if (v17) {
LABEL_96:
  }
    CFRelease(v17);
LABEL_97:
  if (v15) {
    CFRelease(v15);
  }
  if (v62) {
    CFRelease(v62);
  }
  return v63;
}

uint64_t FigCFHTTPRead(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, const void *a6, uint64_t a7, void *a8)
{
  return FigCFHTTPReadWithAdditionalHeaders(a1, 0, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t crabsWaitForLoad(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(const void **)(a1 + 760);
  if (v10) {
    CFTypeRef v11 = CFRetain(v10);
  }
  else {
    CFTypeRef v11 = 0;
  }
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner) {
    CFTypeRef v13 = CFRetain(Owner);
  }
  else {
    CFTypeRef v13 = 0;
  }
  uint64_t v14 = a3;
  CFTypeRef v67 = v11;
  uint64_t v68 = 0;
  uint64_t v66 = a2[5];
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  uint64_t v65 = 0;
  ++a2[7];
  clock = HostTimeClock;
  if (a5 == -1)
  {
    uint64_t v19 = *(void *)(a1 + 968);
    CMTimeMake(&v62, *(int *)(a1 + 48), 1000);
    uint64_t v18 = FigNetworkUrgencyAssertDeadline(v19, &v62);
    uint64_t v16 = 0;
  }
  else
  {
    CMClockGetTime(&time, HostTimeClock);
    uint64_t v16 = (uint64_t)((double)a5 * 1000000.0 + CMTimeGetSeconds(&time) * 1000000000.0);
    uint64_t v17 = *(void *)(a1 + 968);
    CMTimeMake(&v63, a5, 1000);
    uint64_t v18 = FigNetworkUrgencyAssertDeadline(v17, &v63);
  }
  FigRetainProxyUnlockMutex();
  uint64_t v20 = FigThreadRegisterAbortAction();
  FigRetainProxyLockMutex();
  if (!v20)
  {
    uint64_t v55 = v18;
    if (FigRetainProxyIsInvalidated() || !*(unsigned char *)(a1 + 104))
    {
LABEL_95:
      uint64_t v20 = 4294954425;
    }
    else
    {
      uint64_t v21 = v14;
      if (*(void *)(a1 + 56) != -1)
      {
        if (a4)
        {
          uint64_t v22 = *(void *)(a1 + 80);
          if (v22)
          {
            uint64_t v23 = *(void *)(a1 + 96);
            if (v23 == 0x4000) {
              uint64_t v24 = v14 >> 14;
            }
            else {
              uint64_t v24 = v23 == 0x10000 ? v14 >> 16 : v14 / v23;
            }
            uint64_t v25 = *(int **)(v22 + 8 * v24);
            if (v25)
            {
              uint64_t v26 = v25[1] + v23 * *v25;
              BOOL v27 = v26 <= v14;
              uint64_t v28 = v26 - v14;
              if (!v27)
              {
                if (v28 >= a4) {
                  uint64_t v28 = a4;
                }
                uint64_t v21 = v28 + v14;
                a4 -= v28;
              }
            }
          }
        }
      }
      uint64_t v57 = 0;
      uint64_t v29 = v21 + a4;
      double v30 = (double)v16;
      uint64_t v58 = v21;
      if (!a4) {
        goto LABEL_33;
      }
LABEL_27:
      uint64_t v20 = *((unsigned int *)a2 + 12);
      if (v20 == 1
        && (uint64_t v31 = a2[2], v31 <= v21)
        && a2[3] + v31 >= v29
        && a2[4] + v31 < v29
        && !crabsRangeInBlockIsCached(a1, v21, a4))
      {
        while (1)
        {
          uint64_t v20 = v68;
          if (v68) {
            break;
          }
          if (a5 == -1)
          {
            uint64_t v57 = *(void *)(a1 + 400);
          }
          else
          {
            CMClockGetTime(&v59, clock);
            if ((uint64_t)(v30 + CMTimeGetSeconds(&v59) * -1000000000.0) < 1)
            {
              uint64_t v20 = 4294966295;
              goto LABEL_88;
            }
          }
          uint64_t v20 = FigRetainProxyConditionVariableWaitRelative();
          if (FigRetainProxyIsInvalidated()) {
            goto LABEL_80;
          }
          if (v20 == -12792)
          {
            crabsReportingReportError(a1, @"CoreMediaErrorDomain", @"CRABS Timed out", -1001);
            unsigned int v61 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v33 = v61;
            if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
              unsigned int v34 = v33;
            }
            else {
              unsigned int v34 = v33 & 0xFFFFFFFE;
            }
            if (v34)
            {
              uint64_t v35 = *a2;
              int v69 = 136316162;
              uint64_t v70 = "crabsWaitForLoad";
              __int16 v71 = 2048;
              uint64_t v72 = a1;
              __int16 v73 = 2048;
              uint64_t v74 = v35;
              __int16 v75 = 1024;
              int v76 = -1001;
              __int16 v77 = 1024;
              LODWORD(v78) = a5;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v20 = 4294966295;
            uint64_t v21 = v58;
          }
          if (a5 == -1 && v20 && v57 != *(void *)(a1 + 400))
          {
            if (dword_1E9350B10)
            {
              CFTypeRef v54 = v13;
              unsigned int v61 = 0;
              os_log_type_t type = OS_LOG_TYPE_DEFAULT;
              uint64_t v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v42 = v61;
              if (os_log_type_enabled(v41, type)) {
                unsigned int v43 = v42;
              }
              else {
                unsigned int v43 = v42 & 0xFFFFFFFE;
              }
              if (v43)
              {
                uint64_t v44 = *a2;
                uint64_t v45 = *(void *)(a1 + 400);
                int v69 = 136316418;
                uint64_t v70 = "crabsWaitForLoad";
                __int16 v71 = 2048;
                uint64_t v72 = a1;
                __int16 v73 = 2048;
                uint64_t v74 = v44;
                __int16 v75 = 1024;
                int v76 = v20;
                __int16 v77 = 2048;
                uint64_t v78 = v57;
                __int16 v79 = 2048;
                uint64_t v80 = v45;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              CFTypeRef v13 = v54;
              uint64_t v21 = v58;
            }
          }
          else if (v20)
          {
            goto LABEL_88;
          }
          int v36 = *(unsigned __int8 *)(a1 + 104);
          if (!*(unsigned char *)(a1 + 104) && dword_1E9350B10)
          {
            unsigned int v61 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            uint64_t v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v38 = v61;
            if (os_log_type_enabled(v37, type)) {
              unsigned int v39 = v38;
            }
            else {
              unsigned int v39 = v38 & 0xFFFFFFFE;
            }
            if (v39)
            {
              uint64_t v40 = *a2;
              int v69 = 136315650;
              uint64_t v70 = "crabsWaitForLoad";
              __int16 v71 = 2048;
              uint64_t v72 = a1;
              __int16 v73 = 2048;
              uint64_t v74 = v40;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            int v36 = *(unsigned __int8 *)(a1 + 104);
            uint64_t v21 = v58;
          }
          if (!v36) {
            goto LABEL_95;
          }
          uint64_t v20 = *((unsigned int *)a2 + 12);
          if (v20 > 1) {
            goto LABEL_88;
          }
          ++gCRABS_Stats_7;
          ++*(void *)(a1 + 896);
          if (a4) {
            goto LABEL_27;
          }
LABEL_33:
          if (*(void *)(a1 + 56) != -1 && *(void *)(a1 + 80)) {
            goto LABEL_80;
          }
        }
        if (dword_1E9350B10)
        {
          unsigned int v61 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v50 = v61;
          if (os_log_type_enabled(v49, type)) {
            unsigned int v51 = v50;
          }
          else {
            unsigned int v51 = v50 & 0xFFFFFFFE;
          }
          if (v51)
          {
            uint64_t v52 = *a2;
            int v69 = 136315650;
            uint64_t v70 = "crabsWaitForLoad";
            __int16 v71 = 2048;
            uint64_t v72 = a1;
            __int16 v73 = 2048;
            uint64_t v74 = v52;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v20 = v68;
        }
      }
      else
      {
        uint64_t v46 = *(void *)(a1 + 96);
        if (v46 == 0x4000)
        {
          uint64_t v47 = v21 >> 14;
        }
        else if (v46 == 0x10000)
        {
          uint64_t v47 = v21 >> 16;
        }
        else
        {
          uint64_t v47 = v21 / v46;
        }
        uint64_t v48 = *(int **)(*(void *)(a1 + 80) + 8 * v47);
        if (v48 && v48[1] + v46 * *v48 >= v29)
        {
LABEL_80:
          uint64_t v20 = 0;
        }
        else if (v20 <= 1)
        {
          uint64_t v20 = FigSignalErrorAt();
        }
      }
    }
LABEL_88:
    FigRetainProxyUnlockMutex();
    FigThreadUnregisterAbortAction();
    FigRetainProxyLockMutex();
    uint64_t v18 = v55;
    if (FigRetainProxyIsInvalidated()) {
      uint64_t v20 = 4294954425;
    }
  }
  FigNetworkUrgencyCancelDeadline(*(void *)(a1 + 968), v18);
  --a2[7];
  if (v13) {
    CFRelease(v13);
  }
  if (v11) {
    CFRelease(v11);
  }
  return v20;
}

uint64_t FigCFHTTPReadResponse(uint64_t a1, int a2, uint64_t a3, void *a4, size_t a5, size_t a6, char a7, int a8)
{
  v100[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v98 = 0;
  uint64_t v99 = 0;
  char v97 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated()) {
    goto LABEL_122;
  }
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner) {
    CFTypeRef v15 = CFRetain(Owner);
  }
  else {
    CFTypeRef v15 = 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = *(void *)(DerivedStorage + 56);
  if (v17)
  {
    uint64_t v18 = DerivedStorage;
    while (*(void *)(v17 + 24) != a1 || *(_DWORD *)(v17 + 32) != a2)
    {
      uint64_t v17 = *(void *)(v17 + 128);
      if (!v17) {
        goto LABEL_118;
      }
    }
    if (!*(unsigned char *)(v17 + 125))
    {
      FigAtomicIncrement32();
      if (*(unsigned char *)(v17 + 104)) {
        goto LABEL_27;
      }
      v100[0] = 0;
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, void, CFTypeRef *))(v20 + 48);
      if (v21 && !v21(a1, 0x1EE57B6B8, *MEMORY[0x1E4F1CF80], v100))
      {
        LODWORD(v22) = FigNetworkInterfaceGetInterfaceTypeFromCFNStats((uint64_t)v100[0]);
        *(_DWORD *)(v18 + 388) = v22;
        if (!v100[0]) {
          goto LABEL_21;
        }
        CFRelease(v100[0]);
      }
      LODWORD(v22) = *(_DWORD *)(v18 + 388);
LABEL_21:
      if (!v22)
      {
        uint64_t v22 = *(void *)(v18 + 408);
        if (v22)
        {
          LODWORD(v22) = FigNetworkPathInformationGetInterfaceType();
          *(_DWORD *)(v18 + 388) = v22;
        }
      }
      if (FigNetworkInterfaceIsCellular(v22)) {
        ++*(void *)(v18 + 360);
      }
      fbf_ConfigurePathEvaluator(v18, *(void *)v18);
      *(unsigned char *)(v17 + 104) = 1;
LABEL_27:
      CFTypeRef v93 = v15;
      if (*(_DWORD *)(v18 + 72))
      {
        if (!a8)
        {
          if (a7)
          {
            v100[0] = 0;
            BOOL v23 = fbf_httpRequestHandlesNetworkTransitions(a1);
            *(unsigned char *)(v17 + 124) = v23;
            fbf_UpdateAndReportMultiPathActivity(v18, v23);
            uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v25 = v24 ? v24 : 0;
            int v36 = *(unsigned int (**)(uint64_t, uint64_t, void, CFTypeRef *))(v25 + 48);
            if (v36)
            {
              if (!v36(a1, 0x1EE57B698, *MEMORY[0x1E4F1CF80], v100))
              {
                uint64_t v37 = *(const void **)(v18 + 136);
                if (v37)
                {
                  if (CFEqual(v37, v100[0]))
                  {
                    CFRelease(v100[0]);
                  }
                  else
                  {
                    FigReportingAgentStatsAddToCountValue_0(*(void *)(v18 + 32), 0x1EE582C18, 0x1EE583DD8);
                    CFRelease(*(CFTypeRef *)(v18 + 136));
                    uint64_t v38 = *(void *)(v18 + 144) + 1;
                    *(CFTypeRef *)(v18 + 136) = v100[0];
                    *(void *)(v18 + 144) = v38;
                  }
                }
                else
                {
                  *(CFTypeRef *)(v18 + 136) = v100[0];
                }
                fbf_ReportingAgentSetServerAddress(v18);
              }
            }
          }
          goto LABEL_58;
        }
      }
      else
      {
        uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v26) {
          uint64_t v27 = v26;
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v28 = *(unsigned int (**)(uint64_t, void, uint64_t, void))(v27 + 24);
        if (!v28 || v28(a1, 0, v18 + 336, 0)) {
          *(void *)(v18 + 336) = 0;
        }
        fbf_GetResponseProperties(a1, (void *)v18);
        uint64_t v29 = *(void *)(v18 + 32);
        if (v29)
        {
          unint64_t v30 = *(void *)(v18 + 336);
          uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v32 = v31 ? v31 : 0;
          unsigned int v33 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v32 + 56);
          if (v33) {
            v33(v29, 0x1EE582C18, 0x1EE55E078, v30 / 0xF4240, 0);
          }
        }
        fbf_ReportingAgentSetCDNHeaders(v18, a1);
        CFTypeRef v15 = v93;
        if (!a8)
        {
          int Error = fbf_ParseResponseHeadersAndSetLastError(a1, v18, 0);
          if (Error)
          {
            int v67 = Error;
            goto LABEL_127;
          }
          BOOL v35 = fbf_httpRequestHandlesNetworkTransitions(a1);
          *(unsigned char *)(v17 + 124) = v35;
          fbf_UpdateAndReportMultiPathActivity(v18, v35);
          if (!*(void *)(v17 + 8)) {
            *(void *)(v17 + 8) = *(void *)(v18 + 216) - *(void *)v17;
          }
          *(_DWORD *)(v18 + 72) = 1;
LABEL_58:
          if (!a4 || !a6)
          {
LABEL_94:
            if ((a7 & 2) != 0)
            {
              FigReportingAgentUpdateFinalTransactionMetrics(*(void *)(v18 + 32), a1, 0, 1);
              *(_DWORD *)(v17 + 120) = -12930;
              if (!*(unsigned char *)(v17 + 125))
              {
                FigCFHTTPFinishReadRequest(v18, v17, 1);
                FigRetainProxyIsInvalidated();
              }
              goto LABEL_117;
            }
            int HTTPRequestFlags = fbf_CreateHTTPRequestFlags(v18);
            int v54 = *(_DWORD *)(v17 + 36);
            if (((v54 ^ HTTPRequestFlags) & 0xFFFFFE7F) == 0)
            {
              if (!FigNetworkInterfaceIsCellular(*(_DWORD *)(v18 + 388)))
              {
                if (!*(unsigned char *)(v17 + 105))
                {
                  if (dword_1E9350E58)
                  {
                    LODWORD(v95) = 0;
                    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  *(unsigned char *)(v17 + 105) = 1;
                }
                goto LABEL_117;
              }
              int v54 = *(_DWORD *)(v17 + 36);
            }
            if (HTTPRequestFlags != v54)
            {
              uint64_t v55 = *(void *)(v17 + 112);
              uint64_t v56 = v55 + *(void *)v17;
              uint64_t v57 = *(void *)(v17 + 8) - v55;
              if (dword_1E9350E58)
              {
                LODWORD(v95) = 0;
                uint64_t v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              unsigned int v60 = *(const void **)(v17 + 24);
              int v61 = *(_DWORD *)(v17 + 32);
              *(void *)(v17 + 24) = 0;
              *(_DWORD *)(v17 + 32) = 0;
              *(_DWORD *)(v17 + 36) = HTTPRequestFlags;
              int HTTPRequest = fbf_CreateHTTPRequest(v18, v17, v56, v57);
              if (HTTPRequest)
              {
                *(void *)(v17 + 24) = v60;
                *(_DWORD *)(v17 + 32) = v61;
                *(_DWORD *)(v17 + 120) = HTTPRequest;
                CFTypeRef v15 = v93;
                if (!*(unsigned char *)(v17 + 125)) {
                  FigCFHTTPFinishReadRequest(v18, v17, 0);
                }
              }
              else
              {
                CFTypeRef v15 = v93;
                if (v60)
                {
                  uint64_t v63 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v63) {
                    uint64_t v64 = v63;
                  }
                  else {
                    uint64_t v64 = 0;
                  }
                  uint64_t v65 = *(void (**)(const void *))(v64 + 24);
                  if (v65) {
                    v65(v60);
                  }
                  CFRelease(v60);
                }
              }
            }
LABEL_117:
            ReadRequestRelease(v17);
            goto LABEL_118;
          }
          UpTimeNanoCMTime seconds = FigGetUpTimeNanoseconds();
          uint64_t v98 = UpTimeNanoseconds - *(void *)(v18 + 320);
          LODWORD(v99) = a6;
          ++*(_DWORD *)(v18 + 284);
          FigByteRateHistoryAddToSample(*(void *)(v18 + 344), (uint64_t)&v98);
          if (FigByteRateHistoryGetCurrentSampleDuration(*(void *)(v18 + 344)) >= 100000000) {
            FigByteRateHistoryNextSample(*(uint64_t **)(v18 + 344));
          }
          uint64_t v40 = *(void *)(v18 + 312) + v98;
          *(void *)(v18 + 312) = v40;
          *(void *)(v18 + 320) = UpTimeNanoseconds;
          uint64_t v92 = *(void *)(v18 + 288) + a6;
          *(void *)(v18 + 288) = v92;
          if (v40 >= 1)
          {
            uint64_t v41 = *(void *)(v18 + 32);
            if (v41)
            {
              uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v42) {
                uint64_t v43 = v42;
              }
              else {
                uint64_t v43 = 0;
              }
              uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, unint64_t, void))(v43 + 56);
              if (v44) {
                v44(v41, 0x1EE582C18, 0x1EE583958, v40 / 0xF4240uLL, 0);
              }
              uint64_t v45 = *(void *)(v18 + 32);
              if (v45)
              {
                uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v47 = v46 ? v46 : 0;
                uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 40);
                if (v48) {
                  v48(v45, 0x1EE582C18, 0x1EE582E58, (uint64_t)((double)v92 * 8.0 / ((double)v40 / 1000000000.0)));
                }
              }
            }
          }
          if ((a7 & 4) != 0) {
            *(void *)(v18 + 296) += a6;
          }
          CFTypeRef v15 = v93;
          if ((a7 & 8) != 0) {
            *(void *)(v18 + 304) += a6;
          }
          if (!a5 && CMBlockBufferGetDataLength((CMBlockBufferRef)a4) == a6)
          {
            CFRetain(a4);
            CMBlockBufferRef blockBufferOut = (CMBlockBufferRef)a4;
            goto LABEL_83;
          }
          if (!CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CMBlockBufferRef)a4, 0, 0, a5, a6, 0, &blockBufferOut))
          {
LABEL_83:
            uint64_t v49 = *(void *)(v17 + 112);
            *(void *)(v17 + 112) = v49 + a6;
            if ((int64_t)(v49 + a6) >= *(void *)(v17 + 8))
            {
              uint64_t v50 = 1;
              *(unsigned char *)(v17 + 127) = 1;
            }
            else
            {
              uint64_t v50 = 0;
            }
            unsigned int v51 = *(const void **)(v18 + 24);
            if (v51)
            {
              CFRelease(v51);
              *(void *)(v18 + 24) = 0;
            }
            *(void *)(v18 + 328) = 0;
            if (*(unsigned char *)(v18 + 17) == 1)
            {
              if (dword_1E9350E58)
              {
                LODWORD(v95) = 0;
                uint64_t v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
                CFTypeRef v15 = v93;
              }
              *(_WORD *)(v18 + 17) = 0;
              *(_DWORD *)(v18 + 496) = 0;
              if (FigByteFlumePostHostAvailableNotification(v18)) {
                fbf_ReportingAgentResetErrorStats(v18);
              }
            }
            (*(void (**)(void, void, void, uint64_t, CMBlockBufferRef, uint64_t, void))(v17 + 16))(*(void *)(v17 + 40), *(void *)(v17 + 48), *(void *)(v17 + 64), v49, blockBufferOut, v50, 0);
            if (FigRetainProxyIsInvalidated()) {
              goto LABEL_117;
            }
            goto LABEL_94;
          }
          int v67 = FigSignalErrorAt();
          if (!v67) {
            goto LABEL_117;
          }
LABEL_127:
          uint64_t v95 = 0;
          int v68 = *(_DWORD *)(v18 + 44);
          if (*(unsigned char *)(v18 + 40)) {
            BOOL v69 = v68 == 1;
          }
          else {
            BOOL v69 = 0;
          }
          int v71 = v69 || v68 == 2;
          FigNetworkInterfaceReporterSamplePhysicalStatistics(*(void *)(v18 + 592), a1, *(void *)(v18 + 32), 0x1EE582C18, v71);
          int v72 = *(_DWORD *)(v18 + 72);
          if (v72)
          {
            CFTypeRef v73 = v15;
            if (*(unsigned char *)(v18 + 152))
            {
              uint64_t v74 = *(__CFError **)(v18 + 24);
              if (v74)
              {
                if (*(void *)(v18 + 216) > *(void *)(v18 + 160)
                  && CFErrorGetCode(*(CFErrorRef *)(v18 + 24)) == -1009)
                {
                  CFErrorGetDomain(v74);
                  if (FigCFEqual() || (CFErrorGetDomain(v74), FigCFEqual()))
                  {
                    int v75 = -17760;
                    fbf_ReleaseAndCreateLastError(v18, -17760, @"CoreMediaErrorDomain", @"File exceeds max size allowed over cellular.");
                    fbf_FailImmediately(v18);
LABEL_162:
                    char v84 = 1;
LABEL_167:
                    FigByteFlumePostHostUnavailableNotification(v18);
                    FigRetainProxyRetainOwner();
                    FigCFHTTPStopAllReads(v18, v75);
                    FigRetainProxyReleaseOwner();
                    if (FigRetainProxyIsInvalidated()) {
                      goto LABEL_186;
                    }
                    if (!v72)
                    {
                      if (dword_1E9350E58)
                      {
                        CFAllocatorRef v86 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT);
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                      }
                      *(unsigned char *)(v18 + 608) = 1;
                      fbf_FailImmediately(v18);
                      int v88 = a8;
                      if (!a8) {
                        int v88 = v67;
                      }
                      fbf_ReportingAgentReportErrorEvent(v18, @"CoreMediaErrorDomain", @"Failed without successful flume open", 1u, v88);
                      goto LABEL_186;
                    }
                    if (v84)
                    {
LABEL_186:
                      CFTypeRef v15 = v73;
                      goto LABEL_117;
                    }
                    *(unsigned char *)(v18 + 17) = 1;
                    if (a8 == -12421 || v97)
                    {
                      unint64_t v87 = *(void *)(v18 + 328) + 300000000000;
                      if (v87 >= FigGetUpTimeNanoseconds())
                      {
                        uint64_t v89 = v95;
                        if (v95)
                        {
                          if (dword_1E9350E58)
                          {
                            uint64_t v90 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT);
                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                          }
                          fbf_SetRetryAttemptTimer((void *)v18, v89);
                        }
                        else
                        {
                          if (dword_1E9350E58)
                          {
                            uint64_t v91 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT);
                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                          }
                          fbf_TryReconnect(v18);
                        }
                        goto LABEL_186;
                      }
                      if (!dword_1E9350E58) {
                        goto LABEL_185;
                      }
                    }
                    else if (!dword_1E9350E58)
                    {
LABEL_185:
                      *(void *)(v18 + 512) = 0;
                      fbf_postConnectionToHostLostNotification(v18);
                      goto LABEL_186;
                    }
                    size_t v85 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                    goto LABEL_185;
                  }
                }
              }
            }
            if (!*(_DWORD *)(v18 + 380))
            {
              if (dword_1E9350E58)
              {
                uint64_t v80 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              fbf_FailImmediately(v18);
              goto LABEL_161;
            }
            FigCFHTTPGoInactiveIfUnreachable(v18, &v95);
            if (*(unsigned char *)(v18 + 392))
            {
              if (dword_1E9350E58)
              {
                int v76 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              FigHTTPRescheduleTimer(8073216000.0, *(void *)(v18 + 48), *(NSObject **)(v18 + 456));
              fbf_CancelReconnect(v18);
              goto LABEL_161;
            }
            if (*(unsigned char *)(v18 + 17))
            {
              if (!dword_1E9350E58)
              {
LABEL_161:
                int v75 = -12935;
                goto LABEL_162;
              }
              uint64_t v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT);
              char v84 = 1;
              fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_166:
              int v75 = -12935;
              goto LABEL_167;
            }
            if (dword_1E9350E58)
            {
              CFTypeRef v83 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
          }
          else
          {
            CFTypeRef v73 = v15;
            *(_DWORD *)(v18 + 72) = 2;
            uint64_t v77 = *(void *)(v18 + 88);
            if (v77)
            {
              uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 8);
              uint64_t v79 = v78 ? v78 : 0;
              uint64_t v82 = *(void (**)(uint64_t))(v79 + 24);
              if (v82) {
                v82(v77);
              }
            }
          }
          char v84 = 0;
          goto LABEL_166;
        }
      }
      int v67 = a8;
      fbf_ReleaseAndSetLastErrorFromHTTPRequest(v18, a1, a8, &v97);
      goto LABEL_127;
    }
  }
LABEL_118:
  if (v15) {
    CFRelease(v15);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
LABEL_122:
  FigRetainProxyUnlockMutex();
  return FigRetainProxyRelease();
}

BOOL FigByteRateHistoryHasCompleteSample(uint64_t a1)
{
  return *(_DWORD *)(a1 + 16) >= *(_DWORD *)(a1 + 8);
}

double FigByteRateHistoryNextSample(uint64_t *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v1 = a1[4];
  double v3 = (double)v1 * 1000000000.0 / (double)v2;
  int v4 = *((_DWORD *)a1 + 4) + 1;
  int v5 = *((_DWORD *)a1 + 2);
  if (v4 >= v5)
  {
    double v6 = *((double *)a1 + 5);
    if (v6 == 0.0) {
      double v7 = (double)v1 * 1000000000.0 / (double)v2;
    }
    else {
      double v7 = v3 * 0.1 + v6 * 0.9;
    }
    *((double *)a1 + 5) = v7;
  }
  uint64_t v8 = *((int *)a1 + 3);
  uint64_t v9 = *a1;
  double v10 = (double)*(int *)(*a1 + 16 * v8 + 8) * 1000000000.0 / (double)*(uint64_t *)(*a1 + 16 * v8) - v3;
  double v11 = v10 * v10;
  double v12 = *((double *)a1 + 6);
  if (1.79769313e308 - v11 >= v12)
  {
    uint64_t v13 = a1[7] + 1;
  }
  else
  {
    double v12 = 0.0;
    uint64_t v13 = 1;
  }
  double result = v11 + v12;
  *((double *)a1 + 6) = result;
  a1[7] = v13;
  int v15 = ((int)v8 + 1) % v5;
  *((_DWORD *)a1 + 3) = v15;
  *((_DWORD *)a1 + 4) = v4;
  uint64_t v16 = v9 + 16 * v15;
  uint64_t v17 = v1 - *(int *)(v16 + 8);
  a1[3] = v2 - *(void *)v16;
  a1[4] = v17;
  *(void *)uint64_t v16 = 0;
  *(void *)(v16 + 8) = 0;
  return result;
}

void crabsIncrementalReadCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, OpaqueCMBlockBuffer *a5, char a6, int a7)
{
  v114[21] = *(int **)MEMORY[0x1E4F143B8];
  if (a1) {
    CFTypeRef v10 = CFRetain(a1);
  }
  else {
    CFTypeRef v10 = 0;
  }
  v114[0] = 0;
  FigMemoryBarrier();
  if (a7 == -12932 || !v10)
  {
LABEL_230:
    if (!v10) {
      return;
    }
    goto LABEL_231;
  }
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (const void *)FigRetainProxyGetOwner();
    if (Owner) {
      Owner = CFRetain(Owner);
    }
    CFTypeRef cf = Owner;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(DerivedStorage + 104)) {
      goto LABEL_228;
    }
    uint64_t v14 = DerivedStorage;
    int v15 = (uint64_t *)(DerivedStorage + 512);
    uint64_t v16 = *(int *)(DerivedStorage + 520);
    if (v16 == a2)
    {
      uint64_t v17 = (uint64_t *)(DerivedStorage + 528);
      uint64_t v18 = (uint64_t *)(DerivedStorage + 544);
      uint64_t v19 = (uint64_t *)(DerivedStorage + 568);
      uint64_t v20 = (uint64_t *)(DerivedStorage + 512);
    }
    else
    {
      if (*(_DWORD *)(DerivedStorage + 624) != a2)
      {
        uint64_t v38 = *(void *)(DerivedStorage + 32);
        uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v39) {
          uint64_t v40 = v39;
        }
        else {
          uint64_t v40 = 0;
        }
        uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v40 + 16);
        if (v42) {
          v42(v38, a3);
        }
        uint64_t v43 = *(void *)(v14 + 920);
        if (v43)
        {
          uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v45 = v44 ? v44 : 0;
          uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 32);
          if (v46) {
            v46(v43, 0x1EE582BF8, 0x1EE583C18, 1);
          }
        }
        goto LABEL_228;
      }
      uint64_t v20 = (uint64_t *)(DerivedStorage + 616);
      uint64_t v17 = (uint64_t *)(DerivedStorage + 632);
      uint64_t v18 = (uint64_t *)(DerivedStorage + 648);
      uint64_t v19 = (uint64_t *)(DerivedStorage + 672);
    }
    uint64_t v21 = *v17;
    uint64_t v22 = *v18;
    uint64_t v107 = *v19;
    unsigned int v113 = v20;
    if (*(void *)(DerivedStorage + 56) == -1 || !*(void *)(DerivedStorage + 80))
    {
      int updated = a7;
      if (a7) {
        goto LABEL_44;
      }
      int updated = crabsUpdateLength(DerivedStorage, *(void *)(DerivedStorage + 32));
      if (updated) {
        goto LABEL_44;
      }
      if (!v20[3]) {
        v20[3] = *(void *)(v14 + 56) - v20[2];
      }
      int updated = crabsInitialize(v14);
      if (updated)
      {
LABEL_44:
        int v41 = crabsCancelRead((void *)v14, v20, updated);
        goto LABEL_226;
      }
    }
    int v109 = v15;
    if ((*(unsigned char *)(v14 + 504) & 1) != 0 && !*(void *)(v14 + 720))
    {
      FigRetainProxyUnlockMutex();
      CFRunLoopRef Current = CFRunLoopGetCurrent();
      FigAIOClientCreate((uint64_t)Current, (uint64_t)crabsAIOCallback, *(const void **)(v14 + 760), (void *)(v14 + 720));
      FigRetainProxyLockMutex();
      if (FigRetainProxyIsInvalidated() || !*(unsigned char *)(v14 + 104)) {
        goto LABEL_228;
      }
    }
    int v25 = 0;
    uint64_t v26 = 0;
    if (a7) {
      BOOL v27 = a7 == -12930;
    }
    else {
      BOOL v27 = 1;
    }
    int v28 = v27;
    if (a5)
    {
      uint64_t v102 = v21;
      size_t DataLength = 0;
      BOOL v104 = 0;
      int v105 = 0;
      int v30 = 0;
      if (v28)
      {
        size_t DataLength = CMBlockBufferGetDataLength(a5);
        if (DataLength)
        {
          UpTimeNanoCMTime seconds = FigGetUpTimeNanoseconds();
          uint64_t v32 = UpTimeNanoseconds - v113[8];
          if (v32 >= 1)
          {
            uint64_t v33 = *(void *)(v14 + 920);
            unsigned int v34 = v16 == a2
                ? &kFigReportingEventKey_SampleFirehoseObservedBitrate
                : (uint64_t *)kFigReportingEventKey_SampleImmediateObservedBitrate;
            if (v33)
            {
              uint64_t v35 = v113[4];
              uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v37 = v36 ? v36 : 0;
              uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 40);
              if (v47) {
                v47(v33, 0x1EE582BF8, *v34, (uint64_t)((double)v35 * 8.0 / ((double)v32 / 1000000000.0)));
              }
            }
          }
          uint64_t v48 = v113[4];
          uint64_t v49 = v113[8];
          if (v48)
          {
            unint64_t v50 = (UpTimeNanoseconds - (v49 + v113[9])) / (v48 + DataLength - v113[10]);
          }
          else
          {
            uint64_t v51 = UpTimeNanoseconds - v49;
            v113[9] = v51;
            v113[10] = DataLength;
            unint64_t v50 = v51 / (uint64_t)DataLength;
          }
          if (v50 <= 1) {
            unint64_t v50 = 1;
          }
          v113[11] = v50;
          if (v48 + DataLength <= v113[3])
          {
            int v103 = 0;
            goto LABEL_68;
          }
          FigLogBacktrace();
          uint64_t v52 = v113[3];
          uint64_t v53 = v113[4];
          size_t DataLength = v52 - v53;
          if (v52 != v53)
          {
            int v103 = 1;
LABEL_68:
            size_t v54 = 0;
            int v112 = 0;
            BOOL v104 = 0;
            int v25 = 0;
            uint64_t v26 = 0;
            uint64_t v106 = v22 + v102;
            while (1)
            {
              uint64_t v55 = v106 + v54;
              uint64_t v56 = *(void *)(v14 + 96);
              if (v56 == 0x4000)
              {
                uint64_t v57 = v55 >> 14;
              }
              else if (v56 == 0x10000)
              {
                uint64_t v57 = v55 >> 16;
              }
              else
              {
                uint64_t v57 = v55 / v56;
              }
              uint64_t v58 = *(void *)(v14 + 88);
              if (v57 >= v58)
              {
                FigLogBacktrace();
                uint64_t v58 = *(void *)(v14 + 88);
                int v103 = 1;
              }
              if (v57 >= v58)
              {
                v114[0] = v26;
                FigSignalErrorAt();
                int v105 = 0;
                goto LABEL_148;
              }
              uint64_t v26 = *(int **)(*(void *)(v14 + 80) + 8 * v57);
              if (!v26
                && (crabsInitBlock(v14, v57) || (uint64_t v26 = *(int **)(*(void *)(v14 + 80) + 8 * v57)) == 0))
              {
                FigSignalErrorAt();
                goto LABEL_227;
              }
              if (*((void *)v26 + 10))
              {
                if ((*(unsigned char *)(v14 + 504) & 1) != 0 && v26 == *(int **)(v14 + 744)) {
                  crabsCompleteLazyPagein(v14, 1);
                }
              }
              else
              {
                if (v107 <= 0)
                {
                  __int16 v60 = *((_WORD *)v26 + 4);
                  int v59 = (v60 & 1) != 0 && (v60 & 0x800) == 0;
                }
                else
                {
                  int v59 = 1;
                }
                crabsReadyBlockForLoad(v14, v26, v59);
                if (!*((void *)v26 + 10))
                {
                  v114[0] = v26;
                  if ((v26[2] & 0x800) != 0) {
                    crabsUnhint(v14, (uint64_t)v26);
                  }
                  int v105 = 1;
                  *(unsigned char *)(v14 + 134) = 1;
                  int v25 = -12876;
                  goto LABEL_145;
                }
              }
              uint64_t v61 = *(void *)(v14 + 96);
              uint64_t v62 = v26[1];
              uint64_t v63 = v55 - v61 * *v26;
              if (v62 > v63)
              {
                v54 += v62 - v63;
                if (v54 >= DataLength) {
                  goto LABEL_137;
                }
                uint64_t v63 = v26[1];
              }
              int64_t v64 = v61 - v63;
              if ((uint64_t)(DataLength - v54) >= v64) {
                size_t v65 = v64;
              }
              else {
                size_t v65 = DataLength - v54;
              }
              if (v63 <= v62 && (v26[2] & 4) == 0)
              {
                if (v25 || (uint64_t v67 = *((void *)v26 + 10)) == 0)
                {
                  v114[0] = v26;
                  int v105 = 1;
                  *(unsigned char *)(v14 + 134) = 1;
                  int v25 = -12876;
                  crabsReportingReportError(v14, @"CoreMediaErrorDomain", @"No space for load", -12876);
LABEL_145:
                  char v79 = v112;
                  goto LABEL_146;
                }
                if ((v54 & 0x8000000000000000) != 0 || (v65 & 0x8000000000000000) != 0)
                {
                  FigSignalErrorAt();
                  goto LABEL_228;
                }
                OSStatus v68 = CMBlockBufferCopyDataBytes(a5, v54, v65, (void *)(*(void *)(v67 + 16) + v63));
                if (v68)
                {
                  int v25 = v68;
                }
                else
                {
                  __int16 v69 = *((_WORD *)v26 + 4);
                  *((_WORD *)v26 + 4) = v69 | 8;
                  ++*(void *)(v14 + 400);
                  if ((*(unsigned char *)(v14 + 504) & 1) == 0 && (v69 & 0x100) != 0) {
                    *((_WORD *)v26 + 4) = v69 | 0x48;
                  }
                  int64_t v70 = v26[1];
                  int64_t v71 = v65 + v63;
                  if (v71 > v70)
                  {
                    MEMORY[0x19970E290](*(void *)(v14 + 72));
                    uint64_t v72 = *(void *)(v14 + 64) - v26[1];
                    v26[1] = v71;
                    uint64_t v73 = v72 + (int)v71;
                    *(void *)(v14 + 64) = v73;
                    FigReportingAgentStatsSetIntValue(*(void *)(v14 + 920), 0x1EE582BF8, 0x1EE583C98, v73);
                    MEMORY[0x19970E2B0](*(void *)(v14 + 72));
                    int64_t v70 = v26[1];
                  }
                  if (a7 == -12930
                    || (uint64_t v74 = *(void *)(v14 + 96), v74 == v70)
                    || (uint64_t v75 = *v26, v76 = *(void *)(v14 + 88) - 1, (a6 & 1) != 0) && v76 == v75
                    || v76 == v75 && v70 + v74 * v75 >= *(void *)(v14 + 56))
                  {
                    __int16 v77 = *((_WORD *)v26 + 4);
                    *((_WORD *)v26 + 4) = v77 | 4;
                    if (v77)
                    {
                      crabsUnhint(v14, (uint64_t)v26);
                      BOOL v104 = *(void *)(v14 + 248) == 0;
                    }
                    else if (!v107 && (*((void *)v26 + 4) || *((void *)v26 + 5)))
                    {
                      removeFromWorkingSet((void *)v14, (uint64_t)v26);
                      addToWorkingSet((void *)v14, (uint64_t)v26, 1, 0);
                    }
                  }
                  if ((v26[2] & 0x20) != 0)
                  {
                    crabsRetainWorking((void *)v14, (uint64_t)v26);
                    crabsReleaseWorking((void *)v14, v26, 1, 1);
                  }
                  int v25 = 0;
                  *(_WORD *)(v14 + 176) |= 1u;
                }
              }
              v54 += v65;
              if (v54 >= DataLength)
              {
LABEL_137:
                char v79 = v112;
                goto LABEL_140;
              }
              if (v113 == v109
                && *(_DWORD *)(v14 + 664) == 1
                && crabsRangeInBlockIsCached(v14, *(void *)(v14 + 632), *(void *)(v14 + 640)))
              {
                MEMORY[0x19970CC00](*(void *)(v14 + 656));
              }
              FigRetainProxyUnlockMutex();
              FigRetainProxyLockMutex();
              if (FigRetainProxyIsInvalidated() || !*(unsigned char *)(v14 + 104)) {
                goto LABEL_228;
              }
              int v78 = v112;
              if (*((_DWORD *)v113 + 2) != a2) {
                int v78 = 1;
              }
              int v112 = v78;
            }
          }
          int v103 = 1;
          BOOL v104 = 0;
          uint64_t v26 = 0;
          int v25 = 0;
          char v79 = 0;
LABEL_140:
          int v105 = 0;
          v114[0] = v26;
LABEL_146:
          if (v79) {
            goto LABEL_228;
          }
          v113[4] += DataLength;
LABEL_148:
          int v30 = v103;
        }
        else
        {
          uint64_t v26 = 0;
          int v25 = 0;
          BOOL v104 = 0;
          int v105 = 0;
          int v30 = 0;
        }
      }
    }
    else
    {
      size_t DataLength = 0;
      BOOL v104 = 0;
      int v105 = 0;
      int v30 = 0;
    }
    if (v30) {
      int v80 = -12870;
    }
    else {
      int v80 = v25;
    }
    if (v80) {
      a7 = v80;
    }
    if (v30 | a7)
    {
      if (crabsCancelRead((void *)v14, v113, a7) == -12785) {
        goto LABEL_228;
      }
    }
    else if ((a6 & 1) != 0 || v113[4] == v113[3])
    {
      *((_DWORD *)v113 + 12) = 0;
    }
    if ((!*(_DWORD *)(v14 + 116) || *(unsigned char *)(v14 + 135)) && v113 == v109 && *(_DWORD *)(v14 + 560) == 1)
    {
      uint64_t v81 = *(void *)(v14 + 544) + *(void *)(v14 + 528);
      uint64_t v82 = v81 - DataLength;
      uint64_t v83 = *(void *)(v14 + 96);
      if (v83 == 0x4000)
      {
        uint64_t v84 = v82 >> 14;
        uint64_t v85 = v81 >> 14;
      }
      else if (v83 == 0x10000)
      {
        uint64_t v84 = v82 >> 16;
        uint64_t v85 = v81 >> 16;
      }
      else
      {
        uint64_t v84 = v82 / v83;
        uint64_t v85 = v81 / v83;
      }
      if (v84 > v85)
      {
LABEL_174:
        v114[0] = v26;
        if (!*(void *)(v14 + 568) && crabsCancelRead((void *)v14, v109, -12932) == -12785) {
          goto LABEL_228;
        }
      }
      else
      {
        uint64_t v86 = v85 - v84 + 1;
        unint64_t v87 = (int **)(*(void *)(v14 + 80) + 8 * v84);
        while (1)
        {
          uint64_t v26 = *v87;
          if (*v87)
          {
            if (v26[2]) {
              break;
            }
          }
          ++v87;
          if (!--v86) {
            goto LABEL_174;
          }
        }
        v114[0] = *v87;
      }
    }
    if ((*(unsigned char *)(v14 + 504) & 3) == 0) {
      v13.n128_f32[0] = crabsPurgeCompletionSweep((void *)v14);
    }
    if (*(_DWORD *)(v14 + 560) != 1)
    {
LABEL_220:
      if (*(unsigned char *)(v14 + 104)) {
        crabsRebalanceWorkingSet(v14);
      }
      if (a7 == -12935)
      {
        if (!v113[7])
        {
          crabsReportingReportError(v14, @"CoreMediaErrorDomain", @"Network error with no clients", -12935);
LABEL_227:
          MEMORY[0x19970CC00](v113[5]);
LABEL_228:
          crabsRetainProxyUnlockWithActions();
          if (cf) {
            CFRelease(cf);
          }
          goto LABEL_230;
        }
      }
      else if (!a7 || a7 == -12930)
      {
        int v41 = crabsStartIdleRead(v14, v13);
LABEL_226:
        if (v41 == -12785) {
          goto LABEL_228;
        }
        goto LABEL_227;
      }
      if (v105)
      {
        if (*(unsigned char *)(v14 + 112))
        {
          *(unsigned char *)(v14 + 112) = 0;
          *(_WORD *)(v14 + 176) |= 8u;
          if (dword_1E9350B10)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
      }
      else
      {
        char v97 = *(const void **)(v14 + 952);
        if (v97)
        {
          CFRelease(v97);
          *(void *)(v14 + 952) = 0;
        }
        uint64_t FigBaseObject = FigByteFlumeGetFigBaseObject(*(void *)(v14 + 32));
        uint64_t v99 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v99) {
          uint64_t v100 = v99;
        }
        else {
          uint64_t v100 = 0;
        }
        uint64_t v101 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v100 + 48);
        if (v101) {
          v101(FigBaseObject, @"FBF_LastError", *MEMORY[0x1E4F1CF80], v14 + 952);
        }
        *(_DWORD *)(v14 + 944) = a7;
        *(_WORD *)(v14 + 176) |= 0x20u;
      }
      goto LABEL_227;
    }
    uint64_t v88 = *(void *)(v14 + 544) + *(void *)(v14 + 528);
    uint64_t v89 = *(void *)(v14 + 96);
    if (v89 == 0x4000)
    {
      uint64_t v90 = v88 >> 14;
    }
    else if (v89 == 0x10000)
    {
      uint64_t v90 = v88 >> 16;
    }
    else
    {
      uint64_t v90 = v88 / v89;
    }
    if (*(void *)(v14 + 416) != *(void *)(v14 + 408) || v104)
    {
      BOOL v91 = 0;
      if (!crabsSelectNextFill(v14, v114) && v114[0]) {
        BOOL v91 = v90 > *v114[0];
      }
      *(void *)(v14 + 416) = *(void *)(v14 + 408);
    }
    else
    {
      BOOL v91 = 0;
    }
    uint64_t v92 = *(int **)(*(void *)(v14 + 80) + 8 * v90);
    if (v92)
    {
      if (v91) {
        goto LABEL_195;
      }
    }
    else if (crabsInitBlock(v14, v90))
    {
      uint64_t v92 = 0;
      if (v91) {
        goto LABEL_195;
      }
    }
    else
    {
      uint64_t v92 = *(int **)(*(void *)(v14 + 80) + 8 * v90);
      if (v91) {
        goto LABEL_195;
      }
    }
    if ((*(unsigned char *)(v14 + 504) & 3) != 0 || (v92[2] & 0x10) != 0) {
      goto LABEL_210;
    }
    uint64_t v93 = *(void *)(v14 + 224);
    uint64_t v94 = *v92;
    if (*(unsigned char *)(v14 + 133))
    {
      if (v93 <= v94 && *(void *)(v14 + 472) + v93 > v94) {
        goto LABEL_210;
      }
    }
    else if (v93 <= v94)
    {
      goto LABEL_210;
    }
    if (crabsEnsureSafetyMargin((void *)v14, v90)) {
      goto LABEL_210;
    }
    *(unsigned char *)(v14 + 134) = 1;
LABEL_195:
    if (!*(void *)(v14 + 568) && (v92[2] & 1) == 0)
    {
LABEL_219:
      if (crabsCancelRead((void *)v14, v109, -12932) == -12785) {
        goto LABEL_228;
      }
      goto LABEL_220;
    }
LABEL_210:
    uint64_t v95 = *(void *)(v14 + 568);
    if (*(unsigned char *)(v14 + 132))
    {
      if (v95) {
        goto LABEL_220;
      }
    }
    else
    {
      if (v95) {
        goto LABEL_220;
      }
      if (v90 < *(void *)(v14 + 224) && (v92[2] & 1) == 0) {
        goto LABEL_219;
      }
    }
    if (*(_DWORD *)(v14 + 560) != 1 || !*(unsigned char *)(v14 + 608)) {
      goto LABEL_220;
    }
    *(unsigned char *)(v14 + 608) = 0;
    FigReportingAgentStatsAddToCountValue(*(void *)(v14 + 920), 0x1EE582BF8, 0x1EE55E1D8, 1);
    goto LABEL_219;
  }
  crabsRetainProxyUnlockWithActions();
LABEL_231:
  CFRelease(v10);
}

float crabsPurgeCompletionSweep(void *a1)
{
  crabsEnsureCanary((uint64_t)a1);
  uint64_t v3 = **(void **)(a1[36] + 8);
  int v4 = (unsigned int *)MEMORY[0x1E4F14960];
  uint64_t v5 = 0;
  if (v3)
  {
    do
    {
      uint64_t v6 = **(void **)(*(void *)(v3 + 56) + 8);
      if ((*(_WORD *)(v3 + 8) & 0x80) != 0)
      {
        uint64_t v7 = *(void *)(v3 + 88);
        int v13 = 0;
        if (MEMORY[0x199712240](*v4, v7, 1, &v13)) {
          BOOL v8 = 0;
        }
        else {
          BOOL v8 = (v13 & 3) == 2;
        }
        if (!v8) {
          goto LABEL_19;
        }
        crabsRemovePurgedBacking((uint64_t)a1, (int *)v3, 0);
        crabsCleanupOrphan(a1, (int *)v3);
        ++v5;
      }
      uint64_t v3 = v6;
    }
    while (v6);
  }
  uint64_t v9 = **(void **)(a1[34] + 8);
  if (v9)
  {
    do
    {
      uint64_t v10 = **(void **)(*(void *)(v9 + 56) + 8);
      if ((*(_WORD *)(v9 + 8) & 0x80) != 0)
      {
        uint64_t v11 = *(void *)(v9 + 88);
        int v14 = 0;
        if (MEMORY[0x199712240](*v4, v11, 1, &v14)) {
          BOOL v12 = 0;
        }
        else {
          BOOL v12 = (v14 & 3) == 2;
        }
        if (!v12) {
          break;
        }
        crabsRemovePurgedBacking((uint64_t)a1, (int *)v9, 1);
        crabsCleanupOrphan(a1, (int *)v9);
        ++v5;
      }
      uint64_t v9 = v10;
    }
    while (v10);
  }
LABEL_19:
  if (v5 >= 1)
  {
    float result = (float)((float)(uint64_t)a1[60] * 0.5) + (double)v5 * 0.5 + 0.5;
    a1[60] = (uint64_t)result;
  }
  return result;
}

BOOL crabsEnsureCanary(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 456);
  uint64_t v3 = (unsigned int *)MEMORY[0x1E4F14960];
  if (!v2) {
    goto LABEL_8;
  }
  int v8 = 0;
  uint64_t v4 = 1;
  if (MEMORY[0x199712240](*MEMORY[0x1E4F14960], v2, 1, &v8)) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = (v8 & 3) == 2;
  }
  if (v5)
  {
    CFAllocatorDeallocate(*(CFAllocatorRef *)a1, *(void **)(a1 + 456));
    *(void *)(a1 + 456) = 0;
LABEL_8:
    uint64_t v6 = CFAllocatorAllocate(*(CFAllocatorRef *)a1, *(void *)(a1 + 96), 0);
    *(void *)(a1 + 456) = v6;
    if (v6)
    {
      int v9 = 33;
      MEMORY[0x199712240](*v3, v6, 0, &v9);
      return *(void *)(a1 + 456) != 0;
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

BOOL crabsMakeVolatile(uint64_t a1, int a2, int a3)
{
  int v8 = 1;
  switch(a2)
  {
    case 0:
      BOOL v3 = a3 == 1;
      int v4 = 1089;
      int v5 = 1281;
      goto LABEL_4;
    case 1:
      BOOL v3 = a3 == 1;
      int v4 = 577;
      int v5 = 769;
LABEL_4:
      if (v3) {
        int v4 = v5;
      }
      goto LABEL_10;
    case 2:
      int v4 = 257;
      goto LABEL_10;
    case 3:
      int v4 = 1537;
      goto LABEL_10;
    case 4:
      int v4 = 33;
LABEL_10:
      int v8 = v4;
      break;
    default:
      break;
  }
  if (MEMORY[0x199712240](*MEMORY[0x1E4F14960], a1, 0, &v8)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = (v8 & 3) == 2;
  }
  return !v6;
}

uint64_t crabsStartIdleRead(uint64_t a1)
{
  v7[20] = *(int **)MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(a1 + 104) || *(_DWORD *)(a1 + 108) || *(unsigned char *)(a1 + 135)) {
    return 0;
  }
  if (*(void *)(a1 + 56) == -1 || !*(void *)(a1 + 80))
  {
    if (*(_DWORD *)(a1 + 560) == 1
      || (*(unsigned char *)(a1 + 504) & 8) != 0 && (!*(_DWORD *)(a1 + 116) || *(void *)(a1 + 360) == *(void *)(a1 + 88)))
    {
      return 0;
    }
    if (crabsMoveFirehose(a1, 0) == -12785) {
      return 4294954511;
    }
    else {
      return 0;
    }
  }
  else
  {
    char v6 = 0;
    uint64_t result = crabsTaskHints(a1, &v6);
    if (result == -12785) {
      return 4294954511;
    }
    if ((*(unsigned char *)(a1 + 504) & 8) != 0)
    {
      if (!*(_DWORD *)(a1 + 116)) {
        return result;
      }
      BOOL v3 = *(void *)(a1 + 360) != *(void *)(a1 + 88);
    }
    else
    {
      BOOL v3 = 1;
    }
    if (!result && v3)
    {
      uint64_t result = 0;
      if (*(_DWORD *)(a1 + 116))
      {
        if (!v6)
        {
          if (*(_DWORD *)(a1 + 560) != 1)
          {
            v7[0] = 0;
            if (crabsSelectNextFill(a1, v7)
              || (int v4 = v7[0]) == 0
              || !crabsShouldStartFirehose(a1, *v7[0]))
            {
              if (*(unsigned char *)(a1 + 112))
              {
                *(unsigned char *)(a1 + 112) = 0;
                *(_WORD *)(a1 + 176) |= 8u;
                if (dword_1E9350B10)
                {
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
              }
              return 0;
            }
            if (crabsMoveFirehose(a1, *(void *)(a1 + 96) * *v4) == -12785) {
              return 4294954511;
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

uint64_t crabsTaskHints(uint64_t a1, char *a2)
{
  IsBusCGFloat y = crabsDiskBackingIsBusy(a1, 0);
  int v5 = *(const void **)(a1 + 760);
  if (v5) {
    CFTypeRef v6 = CFRetain(v5);
  }
  else {
    CFTypeRef v6 = 0;
  }
  if (*(unsigned char *)(a1 + 504))
  {
    crabsCompleteLazyPagein(a1, 0);
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
  }
  BOOL v8 = !*(void *)(a1 + 568) && !*(void *)(a1 + 672);
  int v9 = *(int **)(a1 + 248);
  if (v9)
  {
    char v10 = 0;
    uint64_t v11 = 0;
    while (1)
    {
      if (!v8 && !v7) {
        goto LABEL_58;
      }
      if ((v9[2] & 4) != 0 && !IsBusy)
      {
        if ((*(unsigned char *)(a1 + 504) & 1) != 0 && !*((void *)v9 + 10))
        {
          if (v7
            && !*(void *)(a1 + 744)
            && *(void *)(a1 + 720)
            && (crabAllocWorkingSet(a1, (uint64_t)v9)
             || !crabsSwipeUnusedWorking(a1, (uint64_t)v9)))
          {
            uint64_t v11 = FigAIOIssueRead(*(void *)(a1 + 720), *(void *)(a1 + 16), *((void *)v9 + 12), v9[1], *(void *)(*((void *)v9 + 10) + 16), (uint64_t *)(a1 + 752));
            if (v11)
            {
              crabsReleaseWorkingBlock((CFAllocatorRef *)a1, (uint64_t)v9);
              BOOL v20 = v11 == 35;
              if (v11 == 35) {
                uint64_t v11 = 0;
              }
              else {
                uint64_t v11 = v11;
              }
              if (v20) {
                char v7 = 0;
              }
            }
            else
            {
              *(void *)(a1 + 744) = v9;
              crabsRetainWorking((void *)a1, (uint64_t)v9);
            }
          }
          else
          {
            char v7 = 0;
          }
        }
        goto LABEL_25;
      }
      char v22 = 0;
      if (v8 && !crabsEvaluateFirehose(a1, v9, 1, &v22))
      {
        uint64_t v13 = *(void *)(a1 + 96);
        uint64_t v14 = v13 * *v9;
        BOOL v17 = *(_DWORD *)(a1 + 664) == 1
           && (uint64_t v15 = *(void *)(a1 + 632), v15 <= v14 + v9[1])
           && (uint64_t v16 = v14 + v13, *(void *)(a1 + 640) + v15 >= v16)
           && *(void *)(a1 + 648) + v15 < v16;
        if (v22 && !v17 && !crabsMoveFirehose(a1, v14, "crabsTaskHints", 5499)) {
          char v10 = 1;
        }
        if (v10) {
          char v18 = 1;
        }
        else {
          char v18 = v17;
        }
        if (v18) {
          goto LABEL_43;
        }
        if (*(_DWORD *)(a1 + 664) != 1)
        {
          uint64_t v19 = crabsIssueImmedLoad(a1, *(void *)(a1 + 96) * *v9, *(void *)(a1 + 96));
          if (v19 == -12785)
          {
            char v10 = 0;
            uint64_t v11 = 4294954511;
            if (a2) {
              goto LABEL_59;
            }
            goto LABEL_60;
          }
          uint64_t v11 = v19;
          char v10 = 1;
LABEL_43:
          int v12 = 1;
          goto LABEL_24;
        }
        char v10 = 0;
      }
      int v12 = 0;
LABEL_24:
      BOOL v8 = v12;
LABEL_25:
      int v9 = (int *)*((void *)v9 + 6);
      if (!v9) {
        goto LABEL_58;
      }
    }
  }
  uint64_t v11 = 0;
  char v10 = 0;
LABEL_58:
  if (a2) {
LABEL_59:
  }
    *a2 = v10;
LABEL_60:
  if (v6) {
    CFRelease(v6);
  }
  return v11;
}

uint64_t crabsReleaseWorking(void *a1, void *a2, int a3, int a4)
{
  uint64_t result = FigAtomicDecrement32();
  if (!result)
  {
    if (!a4)
    {
      uint64_t result = FigRetainProxyTryLockMutex();
      if (!result)
      {
        MEMORY[0x19970E290](a1[48]);
        if (!a2[8] && !a2[9])
        {
          uint64_t v10 = a1[46];
          a2[8] = v10;
          if (v10) {
            uint64_t v11 = (void *)(v10 + 72);
          }
          else {
            uint64_t v11 = a1 + 47;
          }
          void *v11 = a2 + 8;
          a1[46] = a2;
          a2[9] = a1 + 46;
        }
        JUMPOUT(0x19970E2B0);
      }
    }
    if (*(_DWORD *)(a2[10] + 24))
    {
      if (a4) {
        return result;
      }
    }
    else
    {
      uint64_t result = addToWorkingSet(a1, (uint64_t)a2, a3, 1);
      uint64_t v9 = a1[12];
      gCRABS_Stats_1 += v9;
      a1[106] += v9;
      if (a4) {
        return result;
      }
    }
    return crabsUnlockWithActions((uint64_t)a1);
  }
  return result;
}

uint64_t crabsCancelRead(void *a1, uint64_t *a2, int a3)
{
  CFTypeRef v6 = (const void *)a1[95];
  if (v6) {
    CFTypeRef v7 = CFRetain(v6);
  }
  else {
    CFTypeRef v7 = 0;
  }
  if (*((_DWORD *)a2 + 12) != 1)
  {
    uint64_t v19 = 0;
    goto LABEL_77;
  }
  uint64_t v8 = *a2;
  int v9 = *((_DWORD *)a2 + 2);
  *a2 = 0;
  *((_DWORD *)a2 + 12) = a3;
  UpTimeNanoCMTime seconds = FigGetUpTimeNanoseconds();
  uint64_t v11 = UpTimeNanoseconds - a2[8];
  if (v11 >= 1)
  {
    uint64_t v12 = UpTimeNanoseconds;
    int v13 = v9;
    uint64_t v52 = a2[4];
    uint64_t v53 = v8;
    uint64_t v14 = a1[115];
    uint64_t v15 = a1 + 64;
    if (a1 + 64 == a2) {
      uint64_t v16 = &kFigReportingEventKey_FirehoseRequestBytes;
    }
    else {
      uint64_t v16 = &kFigReportingEventKey_ImmediateRequestBytes;
    }
    if (v14)
    {
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v18 = v17 ? v17 : 0;
      BOOL v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 32);
      if (v20) {
        v20(v14, 0x1EE582BF8, *v16, v52);
      }
    }
    uint64_t v21 = a1[115];
    if (v15 == a2) {
      char v22 = &kFigReportingEventKey_FirehoseRequestTimeMilliseconds;
    }
    else {
      char v22 = &kFigReportingEventKey_ImmediateRequestTimeMilliseconds;
    }
    if (v21)
    {
      uint64_t v23 = a2[8];
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v25 = v24 ? v24 : 0;
      uint64_t v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 32);
      if (v26) {
        v26(v21, 0x1EE582BF8, *v22, (uint64_t)((double)(v12 - v23) / 1000000.0));
      }
    }
    uint64_t v27 = a1[115];
    if (v15 == a2) {
      int v28 = &kFigReportingEventKey_SampleFirehoseObservedBitrate;
    }
    else {
      int v28 = (uint64_t *)kFigReportingEventKey_SampleImmediateObservedBitrate;
    }
    int v9 = v13;
    uint64_t v8 = v53;
    if (v27)
    {
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v30 = v29 ? v29 : 0;
      uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 40);
      if (v31) {
        v31(v27, 0x1EE582BF8, *v28, (uint64_t)((double)v52 * 8.0 / ((double)v11 / 1000000000.0)));
      }
    }
  }
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner) {
    CFTypeRef v33 = CFRetain(Owner);
  }
  else {
    CFTypeRef v33 = 0;
  }
  unsigned int v34 = (const void *)a1[4];
  if (v34) {
    CFTypeRef v35 = CFRetain(v34);
  }
  else {
    CFTypeRef v35 = 0;
  }
  FigRetainProxyUnlockMutex();
  uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v36) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = 0;
  }
  uint64_t v38 = *(uint64_t (**)(CFTypeRef, uint64_t))(v37 + 16);
  if (v38) {
    uint64_t v19 = v38(v35, v8);
  }
  else {
    uint64_t v19 = 4294954514;
  }
  FigRetainProxyLockMutex();
  if (v35) {
    CFRelease(v35);
  }
  if (!FigRetainProxyIsInvalidated())
  {
    if (*((_DWORD *)a2 + 2) != v9) {
      goto LABEL_75;
    }
    if (v19)
    {
      if (v19 != -12934) {
        goto LABEL_75;
      }
      if (*a2)
      {
        uint64_t v19 = 4294954362;
        if (!v33) {
          goto LABEL_77;
        }
LABEL_76:
        CFRelease(v33);
        goto LABEL_77;
      }
    }
    uint64_t v39 = a1[115];
    if (v39)
    {
      uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v41 = v40 ? v40 : 0;
      uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 32);
      if (v42) {
        v42(v39, 0x1EE582BF8, 0x1EE583C18, 1);
      }
    }
    uint64_t v43 = a1 + 64;
    uint64_t v44 = a1[115];
    if (v43 == a2)
    {
      if (v44)
      {
        uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v48 = v47 ? v47 : 0;
        uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 32);
        if (v49)
        {
          uint64_t v50 = 0x1EE55E1B8;
          goto LABEL_74;
        }
      }
    }
    else if (v44)
    {
      uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v46 = v45 ? v45 : 0;
      uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 32);
      if (v49)
      {
        uint64_t v50 = 0x1EE55E258;
LABEL_74:
        v49(v44, 0x1EE582BF8, v50, 1);
      }
    }
LABEL_75:
    if (!v33) {
      goto LABEL_77;
    }
    goto LABEL_76;
  }
  uint64_t v19 = 4294954511;
  if (v33) {
    goto LABEL_76;
  }
LABEL_77:
  if (v7) {
    CFRelease(v7);
  }
  return v19;
}

uint64_t FigCFHTTPCancel(uint64_t a1, uint64_t a2)
{
  FigByteFlumeGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyRetain();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  else
  {
    FigRetainProxyRetainOwner();
    uint64_t v4 = *(void *)(DerivedStorage + 56);
    if (v4)
    {
      while (*(void *)(v4 + 64) != a2)
      {
        uint64_t v4 = *(void *)(v4 + 128);
        if (!v4) {
          goto LABEL_5;
        }
      }
      *(_DWORD *)(v4 + 120) = -12932;
      FigCFHTTPFinishReadRequest(DerivedStorage, v4, 1);
      uint64_t v5 = 0;
    }
    else
    {
LABEL_5:
      uint64_t v5 = 4294954362;
    }
    FigRetainProxyReleaseOwner();
  }
  FigRetainProxyUnlockMutex();
  FigRetainProxyRelease();
  return v5;
}

uint64_t FigCFHTTPFinishReadRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigRetainProxyRetainOwner();
  CFTypeRef v6 = (unsigned char *)(a2 + 125);
  if (*(unsigned char *)(a2 + 125)) {
    goto LABEL_45;
  }
  if (*(unsigned char *)(a2 + 126)) {
    RemoveReadRequestFromQueue(a1, a2);
  }
  int v7 = *(_DWORD *)(a1 + 44);
  if (*(unsigned char *)(a1 + 40)) {
    BOOL v8 = v7 == 1;
  }
  else {
    BOOL v8 = 0;
  }
  int v10 = v8 || v7 == 2;
  FigNetworkInterfaceReporterSamplePhysicalStatistics(*(void *)(a1 + 592), *(void *)(a2 + 24), *(void *)(a1 + 32), 0x1EE582C18, v10);
  if (!*(unsigned char *)(a2 + 127) && !*v6)
  {
    if (*(unsigned char *)(a1 + 377))
    {
      *CFTypeRef v6 = 1;
    }
    else
    {
      int IsInvalidated = FigRetainProxyIsInvalidated();
      *CFTypeRef v6 = 1;
      if (IsInvalidated) {
        goto LABEL_20;
      }
    }
    (*(void (**)(void, void, void, void, void, uint64_t, void))(a2 + 16))(*(void *)(a2 + 40), *(void *)(a2 + 48), *(void *)(a2 + 64), *(void *)(a2 + 112), 0, a3, *(unsigned int *)(a2 + 120));
    CFTypeRef v6 = (unsigned char *)(a2 + 127);
  }
  *CFTypeRef v6 = 1;
LABEL_20:
  int v12 = *(_DWORD *)(a2 + 120);
  if (v12 && v12 != -12930)
  {
    char v16 = 0;
    char v15 = 1;
  }
  else
  {
    int v13 = *(const void **)(a1 + 128);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a1 + 128) = 0;
    }
    CFTypeRef v14 = *(CFTypeRef *)(a2 + 24);
    if (v14) {
      CFTypeRef v14 = CFRetain(v14);
    }
    char v15 = 0;
    *(void *)(a1 + 128) = v14;
    char v16 = 1;
  }
  uint64_t v17 = *(const void **)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  FigRetainProxyUnlockMutex();
  if ((v16 & 1) == 0 && v17)
  {
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v19 = v18 ? v18 : 0;
    BOOL v20 = *(void (**)(const void *))(v19 + 24);
    if (v20) {
      v20(v17);
    }
  }
  char v21 = v15 ^ 1;
  if (v17 != *(const void **)(a1 + 88)) {
    char v21 = 1;
  }
  if ((v21 & 1) == 0 && !*(_DWORD *)(a1 + 72))
  {
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a1 + 88) = 0;
    }
    *(_DWORD *)(a1 + 96) = -1;
  }
  if (v17) {
    CFRelease(v17);
  }
  FigRetainProxyLockMutex();
  ReadRequestRelease(a2);
LABEL_45:

  return FigRetainProxyReleaseOwner();
}

void ReadRequestRelease(uint64_t a1)
{
  if (!FigAtomicDecrement32())
  {
    uint64_t v2 = *(const void **)(a1 + 24);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 24) = 0;
    }
    if (*(unsigned char *)(a1 + 126))
    {
      FigRetainProxyLockMutex();
      if (!FigRetainProxyIsInvalidated())
      {
        FigRetainProxyGetOwner();
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        RemoveReadRequestFromQueue(DerivedStorage, a1);
      }
      FigRetainProxyUnlockMutex();
    }
    uint64_t v4 = *(const void **)(a1 + 40);
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = *(const void **)(a1 + 80);
    if (v5) {
      CFRelease(v5);
    }
    CFTypeRef v6 = *(const void **)(a1 + 88);
    if (v6) {
      CFRelease(v6);
    }
    int v7 = *(const void **)(a1 + 96);
    if (v7) {
      CFRelease(v7);
    }
    BOOL v8 = *(const void **)(a1 + 72);
    if (v8) {
      CFRelease(v8);
    }
    FigRetainProxyRelease();
    free((void *)a1);
  }
}

void crabsBBufRefReleaseFn(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  crabsReleaseWorking((void *)v4, *(void **)a1, 1, 0);
  --gCRABS_Stats_4;
  --*(void *)(v4 + 872);
  gCRABS_Stats_2 -= a3;
  *(void *)(v4 + 856) -= a3;
  if ((*(unsigned char *)(v4 + 504) & 1) == 0 && FigRetainProxyTryLockMutex())
  {
    if (*(uint64_t *)(v4 + 344) >= 49)
    {
      do
      {
        uint64_t v7 = 0;
        memset(v6, 0, sizeof(v6));
        if (crabsSwipeUnusedWorking(v4, (uint64_t)v6)) {
          break;
        }
        removeFromWorkingSet((void *)v4, (uint64_t)v6);
        crabsReleaseWorkingBlock((CFAllocatorRef *)v4, (uint64_t)v6);
      }
      while (*(uint64_t *)(v4 + 344) >= 17);
    }
    crabsUnlockWithActions(v4);
  }
  uint64_t v5 = *(const void **)(v4 + 40);
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t FigByteRateHistoryAddToSample(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)result + 16 * *(int *)(result + 12);
  *(void *)v2 += *(void *)a2;
  *(_DWORD *)(v2 + 8) += *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(result + 32) + *(int *)(a2 + 8);
  *(void *)(result + 24) += *(void *)a2;
  *(void *)(result + 32) = v3;
  return result;
}

uint64_t crabsIssueImmedLoad(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef v6 = *(const void **)(a1 + 760);
  if (v6) {
    CFTypeRef v7 = CFRetain(v6);
  }
  else {
    CFTypeRef v7 = 0;
  }
  BOOL v8 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
  do
  {
    while (*(_DWORD *)(a1 + 664) != 1)
    {
LABEL_9:
      if (*((_DWORD *)v8 + 708) >= 2u)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        BOOL v8 = &PerformOneTimeAssetTableInitialization_sAssetTableInit;
      }
      uint64_t v14 = crabsIssueLoad(a1, a1 + 616, a2, a3, 0, 0);
      if (v14 != -12871)
      {
        if (!v7) {
          return v14;
        }
        goto LABEL_19;
      }
    }
    if (*(void *)(a1 + 56) == -1)
    {
      uint64_t v9 = *(void *)(a1 + 632);
      uint64_t v10 = *(void *)(a1 + 640);
    }
    else
    {
      uint64_t v9 = *(void *)(a1 + 632);
      uint64_t v10 = *(void *)(a1 + 640);
      if (*(void *)(a1 + 80) && crabsRangeInBlockIsCached(a1, *(void *)(a1 + 632), *(void *)(a1 + 640))) {
        goto LABEL_9;
      }
    }
    uint64_t v12 = crabsWaitForLoad(a1, (uint64_t *)(a1 + 616), v9, v10, -1);
    if (v12) {
      BOOL v13 = v12 == -12930;
    }
    else {
      BOOL v13 = 1;
    }
  }
  while (v13);
  uint64_t v14 = v12;
  if (v7) {
LABEL_19:
  }
    CFRelease(v7);
  return v14;
}

uint64_t crabsReadyBlockForLoad(uint64_t a1, int *a2, int a3)
{
  BOOL v6 = (a2[2] & 0x80) != 0 && crabsMakeBackingNonvolatile((void *)a1, (uint64_t)a2, *(void *)(a1 + 224) <= *a2) != 0;
  if (crabAllocWorkingSet(a1, (uint64_t)a2))
  {
    LODWORD(v7) = 0;
    goto LABEL_6;
  }
  if (a3) {
    goto LABEL_22;
  }
  unsigned int v12 = *((unsigned __int16 *)a2 + 4);
  if ((v12 & 0x200) != 0)
  {
    if ((v12 >> 8)) {
      goto LABEL_22;
    }
  }
  else if (*((void *)a2 + 11))
  {
LABEL_22:
    LODWORD(v7) = 0;
    goto LABEL_23;
  }
  if (crabsAllocBacking(a1, a2))
  {
    LODWORD(v7) = 1;
  }
  else
  {
    uint64_t v7 = 0;
    if (!crabsBlockIsAKeeper((void *)a1, a2))
    {
      int v10 = 1;
      goto LABEL_27;
    }
  }
LABEL_23:
  if (!crabsSwipeUnusedWorking(a1, (uint64_t)a2))
  {
LABEL_6:
    unsigned int v8 = *((unsigned __int16 *)a2 + 4);
    if ((v8 & 0x200) != 0)
    {
      int v9 = (v8 >> 8) & 1;
      if (v7) {
        goto LABEL_12;
      }
    }
    else
    {
      int v9 = *((void *)a2 + 11) != 0;
      if (v7) {
        goto LABEL_12;
      }
    }
    if (v9)
    {
      crabsPageInBlock(a1, a2);
      unsigned int v8 = *((unsigned __int16 *)a2 + 4);
    }
LABEL_12:
    if ((v8 & 0x200) != 0)
    {
      if ((v8 >> 8)) {
        goto LABEL_14;
      }
    }
    else if (*((void *)a2 + 11))
    {
LABEL_14:
      int v10 = 0;
LABEL_15:
      uint64_t v11 = 1;
      goto LABEL_25;
    }
    if (crabsAllocBacking(a1, a2))
    {
      int v10 = 0;
      uint64_t v11 = 1;
LABEL_26:
      crabsAddBlockToBackedList((uint64_t *)a1, a2);
      uint64_t v7 = v11;
      goto LABEL_27;
    }
    int v10 = 0;
    LODWORD(v7) = crabsSwipeBacking(a1, (uint64_t)a2, 0) == 0;
    goto LABEL_15;
  }
  uint64_t v11 = 0;
  int v10 = 1;
LABEL_25:
  int v13 = v7;
  uint64_t v7 = v11;
  if (v13) {
    goto LABEL_26;
  }
LABEL_27:
  if ((v6 & v10) == 1 && (*(unsigned char *)(a1 + 504) & 3) == 0) {
    crabsMakeBlockVolatileRelativeToAnchor((void *)a1, a2);
  }
  return v7;
}

BOOL crabsAllocBacking(uint64_t a1, int *a2)
{
  kern_return_t v16;
  unint64_t v17;
  int v18;
  void *v19;
  void *v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v26;
  void *v27;
  size_t v28;
  unint64_t v29;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[4];
  long long v32;
  _DWORD v33[7];

  int v4 = *(_DWORD *)(a1 + 504);
  if (v4)
  {
    *(void *)host_info_out = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 96);
      uint64_t v7 = a2 + 24;
      uint64_t v8 = *a2;
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v10 = v9 ? v9 : 0;
      unsigned int v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, integer_t *, int *))(v10 + 8);
      if (v12)
      {
        if (v12(v5, v6, v6 * v8, host_info_out, a2 + 24))
        {
          uint64_t v13 = *(void *)(a1 + 16);
          if (v13)
          {
            if (v13 != *(void *)host_info_out)
            {
              FigSignalErrorAt();
              BOOL result = 0;
              *uint64_t v7 = -1;
              return result;
            }
          }
          else
          {
            *(void *)(a1 + 16) = *(void *)host_info_out;
          }
          *((_WORD *)a2 + 4) |= 0x100u;
        }
      }
    }
  }
  else if ((v4 & 3) != 0)
  {
    *((void *)a2 + 11) = CFAllocatorAllocate(*(CFAllocatorRef *)a1, *(void *)(a1 + 96), 0);
  }
  else
  {
    BOOL v11 = *(void *)(a1 + 464) >= *(void *)(a1 + 472) && (a2[2] & 0x10) == 0;
    uint64_t v32 = 0u;
    memset(v33, 0, sizeof(v33));
    *(_OWORD *)host_info_out = 0u;
    host_info_outCnt = 60;
    int v28 = 8;
    uint64_t v29 = 0;
    host_t v15 = MEMORY[0x199711480]();
    char v16 = host_statistics(v15, 2, host_info_out, &host_info_outCnt);
    uint64_t v17 = 0;
    if (!v16)
    {
      uint64_t v18 = sysctlbyname("vm.vm_page_free_target", &v29, &v28, 0, 0);
      uint64_t v17 = 0;
      if (!v18)
      {
        if (host_info_out[0] <= v29) {
          uint64_t v17 = 0;
        }
        else {
          uint64_t v17 = *MEMORY[0x1E4F14B00] * (host_info_out[0] - v29);
        }
      }
    }
    if (!v11 || v17 > *(void *)(a1 + 96) && crabsEnsureCanary(a1))
    {
      uint64_t v19 = CFAllocatorAllocate(*(CFAllocatorRef *)a1, *(void *)(a1 + 96), 0);
      if (v19)
      {
        BOOL v20 = v19;
        if (*(void *)(a1 + 96))
        {
          char v21 = 0;
          char v22 = (void *)MEMORY[0x1E4F14B00];
          do
          {
            *((unsigned char *)v19 + v21) = 0;
            v21 += *v22;
          }
          while (v21 < *(void *)(a1 + 96));
        }
        if (v11
          && ((uint64_t v23 = *(void *)(a1 + 456),
               host_info_out[0] = 0,
               !MEMORY[0x199712240](*MEMORY[0x1E4F14960], v23, 1, host_info_out))
            ? (uint64_t v24 = (host_info_out[0] & 3) == 2)
            : (uint64_t v24 = 0),
              v24))
        {
          CFAllocatorDeallocate(*(CFAllocatorRef *)a1, v20);
        }
        else
        {
          *((void *)a2 + 11) = v20;
          if ((a2[2] & 0x10) == 0) {
            ++*(void *)(a1 + 464);
          }
        }
      }
    }
  }
  uint64_t v25 = *((unsigned __int16 *)a2 + 4);
  BOOL result = (v25 >> 8) & 1;
  if ((v25 & 0x200) != 0)
  {
    if (!result) {
      goto LABEL_46;
    }
LABEL_42:
    uint64_t v26 = *(void *)(a1 + 96);
    if (*(unsigned char *)(a1 + 504))
    {
      gCRABS_Stats_5 += v26;
      uint64_t v27 = (void *)(a1 + 880);
    }
    else
    {
      gCRABS_Stats_0 += v26;
      uint64_t v27 = (void *)(a1 + 840);
    }
    *v27 += v26;
    goto LABEL_46;
  }
  if (*((void *)a2 + 11)) {
    goto LABEL_42;
  }
LABEL_46:
  if ((v25 & 0x200) == 0) {
    return *((void *)a2 + 11) != 0;
  }
  return result;
}

uint64_t *crabsAddBlockToBackedList(uint64_t *result, int *a2)
{
  __int16 v2 = *((_WORD *)a2 + 4);
  if ((v2 & 1) == 0)
  {
    if ((v2 & 0x10) != 0)
    {
      uint64_t v6 = result[37];
      *((void *)a2 + 6) = v6;
      if (v6) {
        uint64_t v7 = (void *)(v6 + 56);
      }
      else {
        uint64_t v7 = result + 38;
      }
      *uint64_t v7 = a2 + 12;
      uint64_t v5 = result + 37;
      result[37] = (uint64_t)a2;
    }
    else
    {
      if (result[28] <= *a2) {
        return addToAscendingBackedBlockList(result, result + 33, a2);
      }
      uint64_t v3 = result[35];
      *((void *)a2 + 6) = v3;
      if (v3) {
        int v4 = (void *)(v3 + 56);
      }
      else {
        int v4 = result + 36;
      }
      *int v4 = a2 + 12;
      uint64_t v5 = result + 35;
      result[35] = (uint64_t)a2;
    }
    *((void *)a2 + 7) = v5;
  }
  return result;
}

void *addToAscendingBackedBlockList(void *result, uint64_t *a2, int *a3)
{
  uint64_t v3 = *a2;
  if (!*a2)
  {
    *((void *)a3 + 6) = 0;
    a2[1] = (uint64_t)(a3 + 12);
    goto LABEL_5;
  }
  int v4 = *a3;
  if (*a3 < *(_DWORD *)v3)
  {
    *((void *)a3 + 6) = v3;
    *(void *)(v3 + 56) = a3 + 12;
LABEL_5:
    *a2 = (uint64_t)a3;
    *((void *)a3 + 7) = a2;
    goto LABEL_6;
  }
  uint64_t v5 = a2[1];
  if (v4 <= ***(_DWORD ***)(v5 + 8))
  {
    uint64_t v6 = *(void *)(result[10] + 8 * (v4 - 1));
    if (!v6 || (*(_WORD *)(v6 + 8) & 0x1000) == 0 || (uint64_t v7 = *(void *)(v6 + 48)) == 0)
    {
      while (v4 > *(_DWORD *)v3)
      {
        uint64_t v3 = *(void *)(v3 + 48);
        if (!v3) {
          goto LABEL_18;
        }
      }
      uint64_t v7 = v3;
    }
    *((void *)a3 + 7) = *(void *)(v7 + 56);
    *((void *)a3 + 6) = v7;
    **(void **)(v7 + 56) = a3;
    *(void *)(v7 + 56) = a3 + 12;
LABEL_18:
    ++gCRABS_Stats_6;
    ++result[111];
  }
  else
  {
    *((void *)a3 + 6) = 0;
    *((void *)a3 + 7) = v5;
    *(void *)uint64_t v5 = a3;
    a2[1] = (uint64_t)(a3 + 12);
  }
LABEL_6:
  if (result + 33 == a2) {
    *((_WORD *)a3 + 4) |= 0x1000u;
  }
  return result;
}

uint64_t crabsSyncBlock(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a1 + 504);
  if ((v3 & 1) == 0 || *(void *)(a1 + 728) != a2)
  {
    unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
    if ((v4 & 8) == 0) {
      return 0;
    }
    if ((v4 & 0x200) != 0)
    {
      if ((v4 >> 8)) {
        goto LABEL_7;
      }
    }
    else if (*(void *)(a2 + 88))
    {
LABEL_7:
      if ((v3 & 1) == 0)
      {
        memcpy(*(void **)(a2 + 88), *(const void **)(*(void *)(a2 + 80) + 16), *(int *)(a2 + 4));
        uint64_t result = 0;
LABEL_9:
        *(_WORD *)(a2 + 8) &= ~8u;
        return result;
      }
      if (*(unsigned char *)(a1 + 135)) {
        return 4294954755;
      }
      uint64_t v6 = *(int *)(a2 + 4);
      if (crabsDiskBackingIsBusy(a1, 0)) {
        return 4294954754;
      }
      uint64_t result = FigFileForkWrite();
      if (!v6) {
        goto LABEL_9;
      }
      return FigSignalErrorAt();
    }
    return FigSignalErrorAt();
  }

  return crabsCompleteLazySync(a1, 1);
}

uint64_t FigCRABSHintActiveRanges(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, 1, a3);
}

uint64_t FigCRABS_HintActiveRanges(const void *a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1) {
    CFRetain(a1);
  }
  uint64_t v9 = crabsEnsureInitialized(a1);
  if (v9) {
    goto LABEL_172;
  }
  if (a3 < 1)
  {
    BOOL v18 = 1;
    if (a2) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  uint64_t v10 = 0;
  uint64_t v11 = *(void *)(DerivedStorage + 96);
  char v12 = 1;
  do
  {
    uint64_t v13 = a4[2 * v10];
    if (v11 == 0x4000)
    {
      uint64_t v14 = v13 >> 14;
    }
    else if (v11 == 0x10000)
    {
      uint64_t v14 = v13 >> 16;
    }
    else
    {
      uint64_t v14 = v13 / v11;
    }
    if (v14 < 0 || (uint64_t v15 = *(void *)(DerivedStorage + 88), v14 >= v15))
    {
      uint64_t v9 = FigSignalErrorAt();
      goto LABEL_172;
    }
    uint64_t v16 = v13 + a4[2 * v10 + 1] - 1;
    while (1)
    {
      uint64_t v17 = v16 >> 16;
      if (v11 != 0x10000)
      {
        uint64_t v17 = v16 >> 14;
        if (v11 != 0x4000) {
          uint64_t v17 = v16 / v11;
        }
      }
      if (v14 >= v15 || v14 > v17) {
        break;
      }
      if (v14 != *(void *)(DerivedStorage + 360)) {
        char v12 = 0;
      }
      ++v14;
    }
    ++v10;
    BOOL v18 = v12 != 0;
  }
  while (v10 < a3 && v12);
  if (!a2)
  {
LABEL_27:
    if (!v18) {
      goto LABEL_28;
    }
    uint64_t v51 = 0;
LABEL_173:
    CFTypeRef v20 = 0;
    if (a1) {
      goto LABEL_153;
    }
    goto LABEL_154;
  }
LABEL_28:
  uint64_t v9 = FigRetainProxyLockMutex();
  if (v9)
  {
LABEL_172:
    uint64_t v51 = v9;
    goto LABEL_173;
  }
  if (!*(unsigned char *)(DerivedStorage + 104))
  {
    uint64_t v51 = FigSignalErrorAt();
    CFTypeRef v20 = 0;
    goto LABEL_152;
  }
  uint64_t v19 = *(const void **)(DerivedStorage + 760);
  if (v19) {
    CFTypeRef v20 = CFRetain(v19);
  }
  else {
    CFTypeRef v20 = 0;
  }
  if (a3 < 1)
  {
    if ((a2 & 2) == 0)
    {
      if ((a2 & 0x10) != 0)
      {
        uint64_t v44 = *(void *)(DerivedStorage + 88);
        goto LABEL_141;
      }
      goto LABEL_150;
    }
    char v50 = 0;
    uint64_t v44 = *(void *)(DerivedStorage + 88);
    goto LABEL_146;
  }
  CFTypeRef v59 = v20;
  uint64_t v21 = 0;
  uint64_t v60 = a3;
  char v22 = (int **)(DerivedStorage + 248);
  uint64_t v23 = *(void *)(DerivedStorage + 96);
  while (2)
  {
    uint64_t v24 = &a4[2 * v21];
    uint64_t v25 = *v24;
    if (v23 == 0x4000)
    {
      uint64_t v26 = v25 >> 14;
    }
    else if (v23 == 0x10000)
    {
      uint64_t v26 = v25 >> 16;
    }
    else
    {
      uint64_t v26 = v25 / v23;
    }
    while (2)
    {
      uint64_t v27 = v25 + a4[2 * v21 + 1] - 1;
      if (v23 == 0x4000)
      {
        uint64_t v28 = v27 >> 14;
      }
      else if (v23 == 0x10000)
      {
        uint64_t v28 = v27 >> 16;
      }
      else
      {
        uint64_t v28 = v27 / v23;
      }
      if (v26 <= v28 && v26 < *(void *)(DerivedStorage + 88))
      {
        uint64_t v29 = *(int **)(*(void *)(DerivedStorage + 80) + 8 * v26);
        if (!v29
          && (crabsInitBlock(DerivedStorage, v26)
           || (uint64_t v29 = *(int **)(*(void *)(DerivedStorage + 80) + 8 * v26)) == 0))
        {
LABEL_143:
          uint64_t v30 = FigSignalErrorAt();
LABEL_144:
          uint64_t v51 = v30;
          CFTypeRef v20 = v59;
          goto LABEL_152;
        }
        if ((a2 & 4) != 0 && *(void *)(DerivedStorage + 232) > v26) {
          *(void *)(DerivedStorage + 232) = v26;
        }
        *(void *)(DerivedStorage + 360) = v26;
        if ((a2 & 8) != 0)
        {
          if (*(unsigned char *)(DerivedStorage + 504))
          {
            if (v29 == *(int **)(DerivedStorage + 728))
            {
              uint64_t v30 = crabsCompleteLazySync(DerivedStorage, 1);
              if (v30) {
                goto LABEL_144;
              }
            }
            if (v29 == *(int **)(DerivedStorage + 744)) {
              crabsCompleteLazyPagein(DerivedStorage, 1);
            }
          }
          uint64_t v31 = *((void *)v29 + 10);
          if (v31 && *(int *)(v31 + 24) >= 1) {
            goto LABEL_143;
          }
          if ((v29[2] & 4) != 0 || v29[1]) {
            crabsMarkBlockUnfilled(DerivedStorage, (uint64_t)v29);
          }
        }
        if ((*(unsigned char *)(DerivedStorage + 504) & 3) != 0)
        {
          if ((a2 & 1) == 0) {
            goto LABEL_70;
          }
LABEL_68:
          if ((v29[2] & 0x80) != 0) {
            crabsMakeBackingNonvolatile((void *)DerivedStorage, (uint64_t)v29, *(void *)(DerivedStorage + 224) <= *v29);
          }
        }
        else
        {
          crabsCleanupBlockIfPurged(DerivedStorage, v29);
          if (a2) {
            goto LABEL_68;
          }
        }
LABEL_70:
        unsigned int v32 = *((unsigned __int16 *)v29 + 4);
        if ((v32 & 1) == 0 && ((v32 & 4) == 0 || (*(unsigned char *)(DerivedStorage + 504) & 1) != 0 && !*((void *)v29 + 10)))
        {
          if ((v32 & 0x80) != 0)
          {
            crabsMakeBackingNonvolatile((void *)DerivedStorage, (uint64_t)v29, *(void *)(DerivedStorage + 224) <= *v29);
            unsigned int v32 = *((unsigned __int16 *)v29 + 4);
          }
          if ((v32 & 0x200) != 0)
          {
            if (((v32 >> 8) & 1) == 0) {
              goto LABEL_86;
            }
          }
          else if (!*((void *)v29 + 11))
          {
            goto LABEL_86;
          }
          uint64_t v33 = DerivedStorage + 296;
          if ((v32 & 0x10) == 0)
          {
            if (*(void *)(DerivedStorage + 224) <= *v29) {
              uint64_t v33 = DerivedStorage + 264;
            }
            else {
              uint64_t v33 = DerivedStorage + 280;
            }
          }
          removeFromList(DerivedStorage, v33, (uint64_t)v29, 0);
LABEL_86:
          int v34 = *((unsigned __int16 *)v29 + 4);
          unsigned int v35 = v34 & 0xFFFFF7FF;
          int v36 = ~(v34 << 11) & 0x800 | v34;
          if ((a2 & 0x10) == 0) {
            int v36 = v35;
          }
          unsigned int v32 = v36 | 1;
          *((_WORD *)v29 + 4) = v32;
          uint64_t v37 = *v22;
          if (*v22)
          {
            int v38 = *v29;
            if (*v29 < *v37)
            {
              *((void *)v29 + 2) = v37;
              *((void *)v37 + 3) = v29 + 4;
              goto LABEL_92;
            }
            uint64_t v40 = *(void *)(DerivedStorage + 256);
            if (v38 <= ***(_DWORD ***)(v40 + 8))
            {
              uint64_t v42 = *(void *)(*(void *)(DerivedStorage + 80) + 8 * (v38 - 1));
              if (!v42 || (*(_WORD *)(v42 + 8) & 1) == 0 || (uint64_t v43 = *(int **)(v42 + 16)) == 0)
              {
                while (v38 > *v37)
                {
                  uint64_t v37 = (int *)*((void *)v37 + 2);
                  if (!v37) {
                    goto LABEL_120;
                  }
                }
                uint64_t v43 = v37;
              }
              *((void *)v29 + 3) = *((void *)v43 + 3);
              *((void *)v29 + 2) = v43;
              **((void **)v43 + 3) = v29;
              *((void *)v43 + 3) = v29 + 4;
LABEL_120:
              ++gCRABS_Stats_6;
              ++*(void *)(DerivedStorage + 888);
            }
            else
            {
              *((void *)v29 + 2) = 0;
              *((void *)v29 + 3) = v40;
              *(void *)uint64_t v40 = v29;
              *(void *)(DerivedStorage + 256) = v29 + 4;
            }
          }
          else
          {
            *((void *)v29 + 2) = 0;
            *(void *)(DerivedStorage + 256) = v29 + 4;
LABEL_92:
            *char v22 = v29;
            *((void *)v29 + 3) = v22;
          }
        }
        if ((a2 & 1) == 0 || (v32 & 0x10) != 0)
        {
          LOBYTE(v39) = v32;
        }
        else
        {
          if ((v32 & 0x80) != 0)
          {
            crabsMakeBackingNonvolatile((void *)DerivedStorage, (uint64_t)v29, *(void *)(DerivedStorage + 224) <= *v29);
            unsigned int v32 = *((unsigned __int16 *)v29 + 4);
          }
          LOBYTE(v39) = v32 | 0x10;
          *((_WORD *)v29 + 4) = v32 | 0x10;
          if (v32) {
            goto LABEL_102;
          }
          if ((v32 & 0x200) == 0)
          {
            if (!*((void *)v29 + 11)) {
              goto LABEL_102;
            }
LABEL_108:
            if (*(void *)(DerivedStorage + 224) <= *v29) {
              uint64_t v41 = DerivedStorage + 264;
            }
            else {
              uint64_t v41 = DerivedStorage + 280;
            }
            removeFromList(DerivedStorage, v41, (uint64_t)v29, 0);
            crabsAddBlockToBackedList((uint64_t *)DerivedStorage, v29);
            __int16 v39 = *((_WORD *)v29 + 4);
            goto LABEL_102;
          }
          if ((v32 >> 8)) {
            goto LABEL_108;
          }
        }
LABEL_102:
        if ((v39 & 0x20) != 0)
        {
          removeFromWorkingSet((void *)DerivedStorage, (uint64_t)v29);
          addToWorkingSet((void *)DerivedStorage, (uint64_t)v29, 1, 1);
        }
        ++v26;
        uint64_t v25 = *v24;
        uint64_t v23 = *(void *)(DerivedStorage + 96);
        continue;
      }
      break;
    }
    ++v21;
    a3 = v60;
    if (v21 != v60) {
      continue;
    }
    break;
  }
  if ((a2 & 2) != 0)
  {
    uint64_t v44 = *(void *)(DerivedStorage + 88);
    uint64_t v54 = *(void *)(DerivedStorage + 96);
    uint64_t v55 = v60;
    CFTypeRef v20 = v59;
    do
    {
      uint64_t v57 = *a4;
      a4 += 2;
      uint64_t v56 = v57;
      if (v54 == 0x4000)
      {
        uint64_t v58 = v56 >> 14;
      }
      else if (v54 == 0x10000)
      {
        uint64_t v58 = v56 >> 16;
      }
      else
      {
        uint64_t v58 = v56 / v54;
      }
      if (v44 > v58)
      {
        if (v54 == 0x4000)
        {
          uint64_t v44 = v56 >> 14;
        }
        else if (v54 == 0x10000)
        {
          uint64_t v44 = v56 >> 16;
        }
        else
        {
          uint64_t v44 = v56 / v54;
        }
      }
      --v55;
    }
    while (v55);
    char v50 = 0;
    goto LABEL_146;
  }
  CFTypeRef v20 = v59;
  if ((a2 & 0x10) == 0) {
    goto LABEL_150;
  }
  uint64_t v44 = *(void *)(DerivedStorage + 88);
  uint64_t v45 = *(void *)(DerivedStorage + 96);
  uint64_t v46 = v60;
  do
  {
    uint64_t v48 = *a4;
    a4 += 2;
    uint64_t v47 = v48;
    if (v45 == 0x4000)
    {
      uint64_t v49 = v47 >> 14;
    }
    else if (v45 == 0x10000)
    {
      uint64_t v49 = v47 >> 16;
    }
    else
    {
      uint64_t v49 = v47 / v45;
    }
    if (v44 > v49)
    {
      if (v45 == 0x4000)
      {
        uint64_t v44 = v47 >> 14;
      }
      else if (v45 == 0x10000)
      {
        uint64_t v44 = v47 >> 16;
      }
      else
      {
        uint64_t v44 = v47 / v45;
      }
    }
    --v46;
  }
  while (v46);
LABEL_141:
  char v50 = 1;
  if (*(void *)(DerivedStorage + 224) > v44)
  {
LABEL_146:
    uint64_t v52 = crabsDoJump(DerivedStorage, v44);
    if (!v52) {
      goto LABEL_147;
    }
    goto LABEL_151;
  }
LABEL_147:
  if ((v50 & 1) == 0 && !a3)
  {
    uint64_t v51 = 0;
    goto LABEL_152;
  }
LABEL_150:
  uint64_t v52 = crabsStartIdleRead(DerivedStorage);
LABEL_151:
  uint64_t v51 = v52;
LABEL_152:
  crabsRetainProxyUnlockWithActions();
  if (a1) {
LABEL_153:
  }
    CFRelease(a1);
LABEL_154:
  if (v20) {
    CFRelease(v20);
  }
  return v51;
}

void crabsCleanupBlockIfPurged(uint64_t a1, int *a2)
{
  if ((a2[2] & 0x80) != 0)
  {
    uint64_t v4 = *((void *)a2 + 11);
    int v6 = 0;
    if (MEMORY[0x199712240](*MEMORY[0x1E4F14960], v4, 1, &v6)) {
      BOOL v5 = 0;
    }
    else {
      BOOL v5 = (v6 & 3) == 2;
    }
    if (v5) {
      crabsRemovePurgedBacking(a1, a2, *(void *)(a1 + 224) <= *a2);
    }
  }
}

uint64_t fpSupport_copyFormatDescription(uint64_t a1, void *a2)
{
  CFArrayRef theArray = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }
  uint64_t v7 = v6(FigBaseObject, @"TrackFormatDescriptionArray", *MEMORY[0x1E4F1CF80], &theArray);
  CFArrayRef v8 = theArray;
  if (v7) {
    goto LABEL_11;
  }
  if (!theArray) {
    return 4294954513;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  CFArrayRef v8 = theArray;
  if (Count)
  {
    CFURLRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
    if (ValueAtIndex) {
      CFURLRef ValueAtIndex = CFRetain(ValueAtIndex);
    }
    uint64_t v7 = 0;
    *a2 = ValueAtIndex;
    CFArrayRef v8 = theArray;
LABEL_11:
    if (!v8) {
      return v7;
    }
    goto LABEL_16;
  }
  uint64_t v7 = 4294954513;
  if (theArray) {
LABEL_16:
  }
    CFRelease(v8);
  return v7;
}

void crabsUnhint(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a2 + 8);
  *(_WORD *)(a2 + 8) = v4 & 0xF7FE;
  if (*(void *)(a1 + 360) == *(_DWORD *)a2) {
    *(void *)(a1 + 360) = *(void *)(a1 + 88);
  }
  uint64_t v5 = *(void *)(a2 + 16);
  int v6 = *(void **)(a2 + 24);
  if (v5)
  {
    *(void *)(v5 + 24) = v6;
    int v6 = *(void **)(a2 + 24);
  }
  else
  {
    if (!v6) {
      goto LABEL_8;
    }
    *(void *)(a1 + 256) = v6;
  }
  *int v6 = v5;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
LABEL_8:
  if ((v4 & 0x200) != 0)
  {
    if (((v4 >> 8) & 1) == 0) {
      return;
    }
  }
  else if (!*(void *)(a2 + 88))
  {
    return;
  }
  crabsAddBlockToBackedList((uint64_t *)a1, (int *)a2);
  if ((*(unsigned char *)(a1 + 504) & 3) == 0 && !*(void *)(a2 + 80) && (*(_WORD *)(a2 + 8) & 0x10) == 0)
  {
    crabsMakeBlockVolatileRelativeToAnchor((void *)a1, (int *)a2);
  }
}

uint64_t crabsSelectNextFill(uint64_t a1, int **a2)
{
  if ((*(unsigned char *)(a1 + 504) & 3) == 0) {
    crabsPurgeCompletionSweep((void *)a1);
  }
  *a2 = 0;
  if (*(unsigned char *)(a1 + 131)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 88);
  if (v5 < 1)
  {
    uint64_t v6 = 0;
LABEL_21:
    if (*(void *)(a1 + 56) != -1 && *(void *)(a1 + 80))
    {
      *(unsigned char *)(a1 + 131) = 1;
      if (v6 == *(void *)(a1 + 88)) {
        *(unsigned char *)(a1 + 130) = 1;
      }
      if (dword_1E9350B10)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    return 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    uint64_t v7 = (v6 + *(void *)(a1 + 240)) % v5;
    CFArrayRef v8 = *(int **)(*(void *)(a1 + 80) + 8 * v7);
    if (!v8 && (crabsInitBlock(a1, v7) || (CFArrayRef v8 = *(int **)(*(void *)(a1 + 80) + 8 * v7)) == 0))
    {
      return FigSignalErrorAt();
    }
    if ((*(unsigned char *)(a1 + 504) & 3) == 0 && *(void *)(a1 + 224) > *v8) {
      crabsCleanupBlockIfPurged(a1, v8);
    }
    if ((v8[2] & 4) == 0)
    {
      uint64_t v9 = *v8;
      if (*(_DWORD *)(a1 + 664) != 1) {
        break;
      }
      uint64_t v10 = *(void *)(a1 + 96);
      uint64_t v11 = *(void *)(a1 + 632);
      if (v11 > v10 * v9 + v8[1]) {
        break;
      }
      uint64_t v12 = v10 * v9 + v10;
      if (*(void *)(a1 + 640) + v11 < v12 || *(void *)(a1 + 648) + v11 >= v12) {
        break;
      }
    }
    ++v6;
    uint64_t v5 = *(void *)(a1 + 88);
    if (v6 >= v5) {
      goto LABEL_21;
    }
  }
  if (*(void *)(a1 + 224) > v9 && !*(unsigned char *)(a1 + 132)) {
    goto LABEL_21;
  }
  *(void *)(a1 + 240) = (int)v7;
  if (!*((void *)v8 + 10))
  {
    crabsReadyBlockForLoad(a1, v8, 0);
    if (!*((void *)v8 + 10)) {
      return 4294954420;
    }
  }
  uint64_t result = 0;
  *a2 = v8;
  return result;
}

uint64_t crabsSwipeUnusedWorking(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 336); ; uint64_t i = *(void *)(a1 + 336))
  {
    uint64_t v5 = *(uint64_t **)(i + 8);
    uint64_t v6 = *v5;
    if (!*v5) {
      break;
    }
    removeFromWorkingSet((void *)a1, *v5);
    if ((*(_WORD *)(v6 + 8) & 8) == 0 || !crabsBlockIsAKeeper((void *)a1, (int *)v6))
    {
      char v8 = 0;
      goto LABEL_9;
    }
    addToWorkingSet((void *)a1, v6, 1, 1);
  }
  flushPendingReleaseSet((void *)a1);
  uint64_t v7 = *(uint64_t **)(*(void *)(a1 + 320) + 8);
  uint64_t v6 = *v7;
  if (*v7)
  {
    removeFromWorkingSet((void *)a1, *v7);
    char v8 = 1;
LABEL_9:
    if ((*(unsigned char *)(a1 + 504) & 1) != 0 && v6 == *(void *)(a1 + 728))
    {
      uint64_t v9 = crabsCompleteLazySync(a1, 0);
      if (v9)
      {
        uint64_t v23 = v9;
        addToWorkingSet((void *)a1, v6, 1, 1);
        return v23;
      }
    }
    unsigned int v10 = *(unsigned __int16 *)(v6 + 8);
    if ((v10 & 8) == 0)
    {
LABEL_37:
      CFTypeRef v20 = *(uint64_t **)(v6 + 80);
      *(void *)(a2 + 80) = v20;
      *CFTypeRef v20 = a2;
      *(void *)(v6 + 80) = 0;
      if ((*(unsigned char *)(a1 + 504) & 3) == 0)
      {
        unsigned int v21 = *(unsigned __int16 *)(v6 + 8);
        if ((v21 & 0x200) != 0) {
          int v22 = (v21 >> 8) & 1;
        }
        else {
          int v22 = *(void *)(v6 + 88) != 0;
        }
        if ((v21 & 0x11) == 0)
        {
          if (v22) {
            crabsMakeBlockVolatileRelativeToAnchor((void *)a1, (int *)v6);
          }
        }
      }
      crabsCleanupOrphan((void *)a1, (int *)v6);
      addToWorkingSet((void *)a1, a2, 1, 1);
      return 0;
    }
    if ((v10 & 0x200) != 0) {
      int v11 = (v10 >> 8) & 1;
    }
    else {
      int v11 = *(void *)(v6 + 88) != 0;
    }
    BOOL v13 = v11 == 0;
    char v14 = v8 ^ 1;
    if (!v13) {
      char v14 = 1;
    }
    if (v14)
    {
      BOOL v15 = 0;
      if ((v10 & 0x200) != 0) {
        goto LABEL_23;
      }
    }
    else
    {
      BOOL v15 = crabsAllocBacking(a1, (int *)v6);
      unsigned int v10 = *(unsigned __int16 *)(v6 + 8);
      if ((v10 & 0x200) != 0)
      {
LABEL_23:
        int v16 = (v10 >> 8) & 1;
        goto LABEL_26;
      }
    }
    int v16 = *(void *)(v6 + 88) != 0;
LABEL_26:
    BOOL v13 = v16 == 0;
    char v17 = v8 ^ 1;
    if (!v13) {
      char v17 = 1;
    }
    if ((v17 & 1) == 0 && crabsBlockIsAKeeper((void *)a1, (int *)v6))
    {
      __int16 v18 = *(_WORD *)(a2 + 8);
      *(_WORD *)(a2 + 8) = v18 | 0x400;
      BOOL v15 = crabsSwipeBacking(a1, v6, 0) == 0;
      *(_WORD *)(a2 + 8) = *(_WORD *)(a2 + 8) & 0xFBFF | v18 & 0x400;
      unsigned int v10 = *(unsigned __int16 *)(v6 + 8);
    }
    if ((v10 & 0x200) != 0)
    {
      if ((v10 >> 8))
      {
LABEL_33:
        int v19 = crabsSyncBlock(a1, v6);
        if (!v15) {
          goto LABEL_35;
        }
        goto LABEL_34;
      }
    }
    else if (*(void *)(v6 + 88))
    {
      goto LABEL_33;
    }
    int v19 = 0;
    if (!v15)
    {
LABEL_35:
      if (v19) {
        crabsMarkBlockUnfilled(a1, v6);
      }
      goto LABEL_37;
    }
LABEL_34:
    crabsAddBlockToBackedList((uint64_t *)a1, (int *)v6);
    goto LABEL_35;
  }

  return FigSignalErrorAt();
}

void crabsMakeBlockVolatileRelativeToAnchor(void *a1, int *a2)
{
  if (!*((void *)a2 + 11)) {
    return;
  }
  __int16 v2 = a2;
  if ((a2[2] & 0x91) != 0) {
    return;
  }
  int v3 = a1;
  uint64_t v4 = a1[28];
  uint64_t v5 = *a2;
  if (*((unsigned char *)a1 + 133))
  {
    if (v4 <= v5 && a1[59] + v4 > v5) {
      return;
    }
  }
  else if (v4 <= v5)
  {
    return;
  }
  if (v4 > v5)
  {
    if (crabsChangeBlockVolatility(a1, a2, 2, 1) && (v2[2] & 0x80) == 0)
    {
      uint64_t v6 = v3[12];
      gCRABS_Stats_3 += v6;
      v3[108] += v6;
    }
    return;
  }
  uint64_t v7 = a1[53];
  if (v7 < v5)
  {
    uint64_t v8 = a1[54];
    if (v8 > v5)
    {
      int v9 = 0;
      int v10 = 0;
      uint64_t v11 = a1[10];
      uint64_t v12 = *(int **)(v11 + 8 * v7);
      BOOL v13 = *(int **)(v11 + 8 * v8);
      uint64_t v14 = 16;
      BOOL v15 = v12;
      int v16 = v13;
      while (1)
      {
        if (v10)
        {
LABEL_24:
          if (v9 == 1)
          {
            if (*v12 < (int)v5)
            {
              do
              {
                char v17 = (int *)*((void *)v12 + 6);
                if ((v12[2] & 0x80) != 0 && !crabsChangeBlockVolatility(v3, v12, 3, 1)) {
                  crabsRemovePurgedBacking((uint64_t)v3, v12, 1);
                }
                uint64_t v12 = v17;
              }
              while (*v17 < *v2);
            }
            BOOL v18 = crabsChangeBlockVolatility(v3, v2, 0, 1);
            int v19 = **(int ***)(*((void *)v2 + 7) + 8);
            while (v19 && v7 <= *v19)
            {
              CFTypeRef v20 = v19;
              int v19 = **(int ***)(*((void *)v19 + 7) + 8);
              if ((v20[2] & 0x80) != 0 && !crabsChangeBlockVolatility(v3, v20, 0, 1)) {
                crabsRemovePurgedBacking((uint64_t)v3, v20, 1);
              }
            }
            goto LABEL_77;
          }
          if (*v13 > (int)v5)
          {
            do
            {
              int v36 = **(int ***)(*((void *)v13 + 7) + 8);
              if ((v13[2] & 0x80) != 0 && !crabsChangeBlockVolatility(v3, v13, 1, 1)) {
                crabsRemovePurgedBacking((uint64_t)v3, v13, 1);
              }
              BOOL v13 = v36;
            }
            while (*v36 > *v2);
          }
LABEL_74:
          a1 = v3;
          a2 = v2;
          int v34 = 1;
LABEL_75:
          int v35 = 1;
          goto LABEL_76;
        }
        BOOL v15 = (int *)*((void *)v15 + 6);
        int v16 = **(int ***)(*((void *)v16 + 7) + 8);
        if (v15 == a2) {
          break;
        }
        if (v16 == a2)
        {
          int v9 = 2;
          goto LABEL_22;
        }
        int v10 = 0;
LABEL_23:
        if (!--v14) {
          goto LABEL_24;
        }
      }
      int v9 = 1;
LABEL_22:
      int v10 = v9;
      goto LABEL_23;
    }
  }
  uint64_t v21 = a1[55];
  if (v21 >= v5 || (uint64_t v22 = a1[56], v22 <= v5))
  {
    if (v7 > v5)
    {
      int v34 = 0;
      goto LABEL_75;
    }
    if (a1[56] >= v5) {
      goto LABEL_74;
    }
    int v34 = 1;
    int v35 = 2;
LABEL_76:
    BOOL v18 = crabsChangeBlockVolatility(a1, a2, v34, v35);
    goto LABEL_77;
  }
  int v23 = 0;
  int v24 = 0;
  uint64_t v25 = a1[10];
  uint64_t v26 = *(int **)(v25 + 8 * v21);
  uint64_t v27 = *(int **)(v25 + 8 * v22);
  uint64_t v28 = 16;
  uint64_t v29 = v26;
  uint64_t v30 = v27;
  while (!v24)
  {
    uint64_t v29 = (int *)*((void *)v29 + 6);
    uint64_t v30 = **(int ***)(*((void *)v30 + 7) + 8);
    if (v29 == a2)
    {
      int v23 = 1;
LABEL_45:
      int v24 = v23;
      goto LABEL_46;
    }
    if (v30 == a2)
    {
      int v23 = 2;
      goto LABEL_45;
    }
    int v24 = 0;
LABEL_46:
    if (!--v28) {
      break;
    }
  }
  if (v23 != 2)
  {
    if (*v26 < (int)v5)
    {
      do
      {
        uint64_t v37 = (int *)*((void *)v26 + 6);
        if ((v26[2] & 0x80) != 0 && !crabsChangeBlockVolatility(v3, v26, 0, 2)) {
          crabsRemovePurgedBacking((uint64_t)v3, v26, 1);
        }
        uint64_t v26 = v37;
      }
      while (*v37 < *v2);
    }
    goto LABEL_74;
  }
  if (*v27 > (int)v5)
  {
    do
    {
      uint64_t v31 = **(int ***)(*((void *)v27 + 7) + 8);
      if ((v27[2] & 0x80) != 0 && !crabsChangeBlockVolatility(v3, v27, 3, 1)) {
        crabsRemovePurgedBacking((uint64_t)v3, v27, 1);
      }
      uint64_t v27 = v31;
    }
    while (*v31 > *v2);
  }
  BOOL v18 = crabsChangeBlockVolatility(v3, v2, 1, 2);
  unsigned int v32 = (int *)*((void *)v2 + 6);
  while (v32 && v22 >= *v32)
  {
    uint64_t v33 = v32;
    unsigned int v32 = (int *)*((void *)v32 + 6);
    if ((v33[2] & 0x80) != 0 && !crabsChangeBlockVolatility(v3, v33, 1, 2)) {
      crabsRemovePurgedBacking((uint64_t)v3, v33, 1);
    }
  }
LABEL_77:
  if (v18)
  {
    *((_WORD *)v2 + 4) &= ~0x80u;
    crabsPurgeCompletionSweep(v3);
    *((_WORD *)v2 + 4) |= 0x80u;
  }
}

void crabsCleanupOrphan(void *a1, int *a2)
{
  if (!*((void *)a2 + 10))
  {
    unsigned int v4 = *((unsigned __int16 *)a2 + 4);
    if ((v4 & 0x200) != 0)
    {
      int v5 = (v4 >> 8) & 1;
      if ((v4 & 0x400) != 0) {
        return;
      }
    }
    else
    {
      int v5 = *((void *)a2 + 11) != 0;
      if ((v4 & 0x400) != 0) {
        return;
      }
    }
    if (!v5)
    {
      crabsMarkBlockUnfilled((uint64_t)a1, (uint64_t)a2);
      if ((a2[2] & 1) == 0)
      {
        uint64_t v6 = *a2;
        if (a1[45] == v6) {
          a1[45] = a1[11];
        }
        *(void *)(a1[10] + 8 * v6) = 0;
        free(a2);
      }
    }
  }
}

void crabsPageInBlock(uint64_t a1, int *a2)
{
  int v4 = *(_DWORD *)(a1 + 504);
  if ((v4 & 1) != 0 && *(int **)(a1 + 744) == a2)
  {
    crabsCompleteLazyPagein(a1, 1);
  }
  else
  {
    uint64_t v5 = *((void *)a2 + 10);
    if (v5)
    {
      unsigned int v6 = *((unsigned __int16 *)a2 + 4);
      if ((v6 & 0x200) != 0) {
        int v7 = (v6 >> 8) & 1;
      }
      else {
        int v7 = *((void *)a2 + 11) != 0;
      }
      int v8 = a2[1];
      if (v7)
      {
        if (v8)
        {
          if (v4)
          {
            if (crabsDiskBackingIsBusy(a1, 0))
            {
              crabsMarkBlockUnbacked(a1, a2, *(void *)(a1 + 224) <= *a2);
            }
            else
            {
              FigFileForkRead();
              crabsMarkBlockUnbacked(a1, a2, *(void *)(a1 + 224) <= *a2);
              __error();
              FigSignalErrorAt();
            }
          }
          else
          {
            memcpy(*(void **)(v5 + 16), *((const void **)a2 + 11), a2[1]);
            if ((~*((unsigned __int16 *)a2 + 4) & 5) == 0) {
              crabsUnhint(a1, (uint64_t)a2);
            }
          }
        }
        return;
      }
      if (!v8) {
        return;
      }
    }
    FigSignalErrorAt();
  }
}

void crabsReleaseWorkingBlock(CFAllocatorRef *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 80);
  if (v2)
  {
    CFAllocatorDeallocate(*a1, *(void **)(v2 + 16));
    free(*(void **)(a2 + 80));
    *(void *)(a2 + 80) = 0;
  }
}

uint64_t QTMovieCacheMemDeallocateCallBack(void *key, uint64_t *a2)
{
  uint64_t valuePtr = 0;
  CFDictionaryRef v4 = (const __CFDictionary *)a2[1];
  if (v4 && (CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, key)) != 0)
  {
    CFNumberGetValue(Value, kCFNumberCFIndexType, &valuePtr);
    uint64_t v6 = valuePtr;
  }
  else
  {
    uint64_t v6 = *a2;
    uint64_t valuePtr = *a2;
  }
  uint64_t result = MEMORY[0x199712230](*MEMORY[0x1E4F14960], key, v6);
  a2[2] -= valuePtr;
  return result;
}

uint64_t itemfig_CopyTrackProperty(void *a1, uint64_t a2, const void *a3, const __CFAllocator *a4, CFDictionaryRef *a5)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v50 = 0;
  int valuePtr = 0;
  uint64_t v48 = 0;
  if (*DerivedStorage || !a5)
  {
    return FigSignalErrorAt();
  }
  uint64_t v12 = DerivedStorage;
  BOOL v13 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v13) {
    goto LABEL_87;
  }
  uint64_t TrackStorage = itemfig_assureBasicsReadyForInspection(a1);
  if (TrackStorage) {
    goto LABEL_43;
  }
  uint64_t v15 = *((void *)v12 + 121);
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  BOOL v18 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *, int *))(v17 + 56);
  if (!v18) {
    goto LABEL_34;
  }
  uint64_t TrackStorage = v18(v15, a2, &v50, &valuePtr);
  if (TrackStorage)
  {
LABEL_43:
    uint64_t v24 = TrackStorage;
    goto LABEL_35;
  }
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a3, @"MediaType"))
  {
    if (CFEqual(a3, @"FormatDescriptionArray"))
    {
      uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v50);
      uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v26) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v30 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFDictionaryRef *))(v27 + 48);
      if (v30)
      {
        uint64_t v31 = kFigTrackProperty_FormatDescriptionArray;
LABEL_33:
        uint64_t TrackStorage = v30(FigBaseObject, *v31, a4, a5);
        goto LABEL_43;
      }
      goto LABEL_34;
    }
    if (CFEqual(a3, @"Dimensions"))
    {
      uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v50);
      uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFDictionaryRef *))(v29 + 48);
      if (v30)
      {
        uint64_t v31 = kFigTrackProperty_Dimensions;
        goto LABEL_33;
      }
LABEL_34:
      uint64_t v24 = 4294954514;
      goto LABEL_35;
    }
    if (CFEqual(a3, @"EstimatedDataRate"))
    {
      uint64_t v32 = (uint64_t)v50;
      uint64_t v33 = kFigTrackProperty_EstimatedDataRate;
LABEL_42:
      uint64_t TrackStorage = FigTrackReaderCopyProperty(v32, (uint64_t)*v33, (uint64_t)a4, (uint64_t)a5);
      goto LABEL_43;
    }
    if (CFEqual(a3, @"NominalFrameRate"))
    {
      uint64_t v32 = (uint64_t)v50;
      uint64_t v33 = kFigTrackProperty_NominalFrameRate;
      goto LABEL_42;
    }
    if (CFEqual(a3, @"CurrentVideoFrameRate"))
    {
      uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
      if (TrackStorage) {
        goto LABEL_43;
      }
      MEMORY[0x19970E290](*(void *)(v19 + 496));
      if (valuePtr == 1986618469)
      {
        uint64_t v34 = *(void *)(v48 + 16);
        if (v34)
        {
          int v35 = kFigRenderPipelineProperty_CurrentVideoFrameRate;
LABEL_49:
          uint64_t v24 = FigRenderPipelineCopyProperty(v34, (uint64_t)*v35, (uint64_t)a4, (uint64_t)a5);
LABEL_118:
          MEMORY[0x19970E2B0](*(void *)(v19 + 496));
          goto LABEL_35;
        }
      }
      goto LABEL_117;
    }
    if (CFEqual(a3, @"Matrix"))
    {
      uint64_t v32 = (uint64_t)v50;
      uint64_t v33 = kFigTrackProperty_Matrix;
      goto LABEL_42;
    }
    if (CFEqual(a3, @"FormatDetails"))
    {
      uint64_t TrackStorage = itemfig_createTrackFormatDetailsDictionary(v12, (uint64_t)v50, a4, a5);
      goto LABEL_43;
    }
    if (CFEqual(a3, @"HasMultipleNonEmptyEdits"))
    {
      if (FigTrackReaderImplementsGetTrackEditCount()
        && (TrackEditCFIndex Count = FigTrackReaderGetTrackEditCount((uint64_t)v50), TrackEditCount >= 1))
      {
        uint64_t v37 = TrackEditCount;
        uint64_t v38 = 0;
        uint64_t v39 = 0;
        uint64_t v40 = (const void **)MEMORY[0x1E4F1CFD0];
        uint64_t v41 = (const void **)MEMORY[0x1E4F1CFC8];
        do
        {
          memset(v47, 0, sizeof(v47));
          if (!FigTrackReaderGetTrackEditWithIndex((uint64_t)v50, v38, (uint64_t)v47)
            && (BYTE12(v47[0]) & 1) != 0)
          {
            if (v39 > 0) {
              goto LABEL_65;
            }
            ++v39;
          }
          ++v38;
        }
        while (v37 != v38);
        uint64_t v40 = v41;
      }
      else
      {
        uint64_t v40 = (const void **)MEMORY[0x1E4F1CFC8];
      }
LABEL_65:
      uint64_t v42 = *v40;
      *a5 = (CFDictionaryRef)*v40;
      CFRetain(v42);
      uint64_t v24 = 0;
      goto LABEL_35;
    }
    if (CFEqual(a3, @"AudioCurves"))
    {
      uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
      if (TrackStorage) {
        goto LABEL_43;
      }
      if (valuePtr == 1936684398)
      {
        CopCGFloat y = *(const void **)(v48 + 80);
        if (!Copy) {
          goto LABEL_17;
        }
        goto LABEL_75;
      }
LABEL_87:
      uint64_t TrackStorage = FigSignalErrorAt();
      goto LABEL_43;
    }
    if (CFEqual(a3, @"AudioProcessingUnits"))
    {
      uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
      if (TrackStorage) {
        goto LABEL_43;
      }
      if (valuePtr != 1936684398) {
        goto LABEL_87;
      }
      CopCGFloat y = *(const void **)(v48 + 96);
      if (!Copy) {
        goto LABEL_17;
      }
    }
    else
    {
      if (CFEqual(a3, @"Enabled"))
      {
        uint64_t v24 = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
        if (v24) {
          goto LABEL_35;
        }
        if (*(unsigned char *)(v48 + 8)) {
          uint64_t v43 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v43 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
        }
        CopCGFloat y = CFRetain(*v43);
        goto LABEL_18;
      }
      if (!CFEqual(a3, @"VideoFieldMode"))
      {
        if (CFEqual(a3, @"AudioProcessingTap"))
        {
          uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
          if (TrackStorage) {
            goto LABEL_43;
          }
          if (valuePtr != 1936684398) {
            goto LABEL_87;
          }
          CopCGFloat y = *(const void **)(v48 + 88);
          if (!Copy) {
            goto LABEL_17;
          }
          goto LABEL_75;
        }
        if (CFEqual(a3, @"LoudnessInfo"))
        {
          uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
          if (TrackStorage) {
            goto LABEL_43;
          }
          if (valuePtr != 1936684398) {
            goto LABEL_87;
          }
          CopCGFloat y = *(const void **)(v48 + 104);
          if (!Copy) {
            goto LABEL_17;
          }
          goto LABEL_75;
        }
        if (CFEqual(a3, @"EffectiveLoudnessInfo"))
        {
          uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
          if (TrackStorage) {
            goto LABEL_43;
          }
          if (valuePtr == 1936684398)
          {
            uint64_t TrackStorage = itemfig_copyCombinedLoudnessInfoDictionary((uint64_t)a1, a2, a5);
            goto LABEL_43;
          }
          goto LABEL_87;
        }
        if (CFEqual(a3, @"EffectiveEQPreset"))
        {
          uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
          if (TrackStorage) {
            goto LABEL_43;
          }
          MEMORY[0x19970E290](*(void *)(v19 + 496));
          if (valuePtr == 1936684398)
          {
            uint64_t v34 = *(void *)(v48 + 16);
            if (v34)
            {
              int v35 = kFigAudioRenderPipelineProperty_EQPreset;
              goto LABEL_49;
            }
          }
LABEL_117:
          uint64_t v24 = 4294954513;
          goto LABEL_118;
        }
        if (CFEqual(a3, @"WillTrimShortDurationAudioSamples"))
        {
          uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
          if (TrackStorage) {
            goto LABEL_43;
          }
          MEMORY[0x19970E290](*(void *)(v19 + 496));
          if (valuePtr == 1936684398)
          {
            uint64_t v34 = *(void *)(v48 + 16);
            if (!v34)
            {
              CFTypeRef v44 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
              if (*MEMORY[0x1E4F1CFD0]) {
                CFTypeRef v44 = CFRetain(v44);
              }
              uint64_t v24 = 0;
              *a5 = (CFDictionaryRef)v44;
              goto LABEL_118;
            }
            int v35 = kFigAudioRenderPipelineProperty_WillTrimShortDurationSamples;
            goto LABEL_49;
          }
          goto LABEL_117;
        }
        if (CFEqual(a3, @"EmploysHardwarePassthrough"))
        {
          uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
          if (TrackStorage) {
            goto LABEL_43;
          }
          MEMORY[0x19970E290](*(void *)(v19 + 496));
          if (valuePtr == 1936684398)
          {
            uint64_t v34 = *(void *)(v48 + 16);
            if (v34)
            {
              int v35 = kFigAudioRenderPipelineProperty_EmploysHardwarePassthrough;
              goto LABEL_49;
            }
          }
          goto LABEL_117;
        }
        if (CFEqual(a3, @"TimePitchAlgorithm"))
        {
          uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
          if (TrackStorage) {
            goto LABEL_43;
          }
          if (valuePtr != 1936684398) {
            goto LABEL_87;
          }
          CopCGFloat y = *(const void **)(v48 + 112);
          if (!Copy) {
            goto LABEL_17;
          }
          goto LABEL_75;
        }
        if (CFEqual(a3, @"SweepFilterConfiguration"))
        {
          uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
          if (TrackStorage) {
            goto LABEL_43;
          }
          if (valuePtr != 1936684398) {
            goto LABEL_87;
          }
          CFDictionaryRef v45 = *(const __CFDictionary **)(v48 + 128);
          if (!v45)
          {
            CopCGFloat y = CFDictionaryCreate(a4, (const void **)&kFigPlaybackItemTrackSweepFilterConfigurationKey_Enabled, MEMORY[0x1E4F1CFC8], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            goto LABEL_17;
          }
        }
        else
        {
          if (CFEqual(a3, @"SweepFilterSweepValue"))
          {
            uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
            if (TrackStorage) {
              goto LABEL_43;
            }
            if (valuePtr == 1936684398)
            {
              CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              p_int valuePtr = (int *)(v48 + 136);
              CFNumberType v22 = kCFNumberFloat32Type;
              goto LABEL_16;
            }
            goto LABEL_87;
          }
          if (CFEqual(a3, @"CinematicAudioParameters"))
          {
            uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
            if (TrackStorage) {
              goto LABEL_43;
            }
            if (valuePtr == 1936684398)
            {
              CFDataRef v46 = *(const __CFData **)(v48 + 152);
              if (v46) {
                CopCGFloat y = CFDataCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v46);
              }
              else {
                CopCGFloat y = 0;
              }
              goto LABEL_17;
            }
            goto LABEL_87;
          }
          if (!CFEqual(a3, @"VideoEnhancementFilterOptions"))
          {
            if (!CFEqual(a3, @"DisableColorMatching"))
            {
              uint64_t v24 = 4294954512;
              goto LABEL_35;
            }
            uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
            if (TrackStorage) {
              goto LABEL_43;
            }
            if (valuePtr != 1986618469) {
              goto LABEL_87;
            }
            CopCGFloat y = *(const void **)(v48 + 64);
            if (!Copy) {
              goto LABEL_17;
            }
            goto LABEL_75;
          }
          uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
          if (TrackStorage) {
            goto LABEL_43;
          }
          if (valuePtr != 1986618469) {
            goto LABEL_87;
          }
          CFDictionaryRef v45 = *(const __CFDictionary **)(v48 + 56);
          if (!v45)
          {
            uint64_t v24 = 0;
            *a5 = 0;
            goto LABEL_35;
          }
        }
        CopCGFloat y = CFDictionaryCreateCopy(a4, v45);
        goto LABEL_17;
      }
      uint64_t TrackStorage = itemfig_getTrackStorage((uint64_t)a1, a2, &v48);
      if (TrackStorage) {
        goto LABEL_43;
      }
      if (valuePtr != 1986618469) {
        goto LABEL_87;
      }
      CopCGFloat y = *(const void **)(v48 + 24);
      if (!Copy) {
        goto LABEL_17;
      }
    }
LABEL_75:
    CopCGFloat y = CFRetain(Copy);
    goto LABEL_17;
  }
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  p_int valuePtr = &valuePtr;
  CFNumberType v22 = kCFNumberSInt32Type;
LABEL_16:
  CopCGFloat y = CFNumberCreate(v20, v22, p_valuePtr);
LABEL_17:
  uint64_t v24 = 0;
LABEL_18:
  *a5 = (CFDictionaryRef)Copy;
LABEL_35:
  if (v50) {
    CFRelease(v50);
  }
  if (v13) {
    CFRelease(v13);
  }
  return v24;
}

CFArrayRef FigMatrixToCFArray(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = 0;
  memset(v14, 0, sizeof(v14));
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    for (uint64_t i = 0; i != 12; i += 4)
    {
      uint64_t v8 = v4;
      CFNumberRef v9 = CFNumberCreate(v6, kCFNumberFloat32Type, (const void *)(a2 + i));
      uint64_t v4 = v8 + 1;
      *((void *)v14 + v8) = v9;
    }
    ++v5;
    a2 += 12;
  }
  while (v5 != 3);
  CFArrayRef v10 = CFArrayCreate(a1, (const void **)v14, 9, MEMORY[0x1E4F1D510]);
  for (uint64_t j = 0; j != 72; j += 8)
  {
    uint64_t v12 = *(const void **)((char *)v14 + j);
    if (v12) {
      CFRelease(v12);
    }
  }
  return v10;
}

uint64_t FPSupport_CreateDestinationPixelBufferAttributes(int a1, int a2, char *valuePtr, int a4, char a5, int a6, int a7, int a8, int a9, CFDictionaryRef *a10)
{
  int v12 = a6;
  char v13 = a5;
  uint64_t v14 = valuePtr;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  int v36 = a2;
  int valuePtra = a1;
  int v34 = a8;
  int v35 = a7;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  *(_OWORD *)CMTime keys = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  *(_OWORD *)uint64_t v38 = 0u;
  long long v39 = 0u;
  uint64_t v17 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a4 == 1)
  {
    keys[0] = *(void **)MEMORY[0x1E4F24D70];
    v38[0] = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
    CFIndex v18 = 1;
    if (!a1) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (a4 < 2)
  {
    CFIndex v18 = 0;
    if (!a1) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  unint64_t v19 = 0;
  keys[0] = *(void **)MEMORY[0x1E4F24D70];
  CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v56 = 0uLL;
  long long v57 = 0uLL;
  long long v54 = 0uLL;
  long long v55 = 0uLL;
  long long v52 = 0uLL;
  long long v53 = 0uLL;
  long long v50 = 0uLL;
  long long v51 = 0uLL;
  *(_OWORD *)CMTimeRange values = 0uLL;
  long long v49 = 0uLL;
  CFIndex v21 = a4;
  uint64_t v22 = 8 * a4;
  do
  {
    values[v19 / 8] = CFNumberCreate(v20, kCFNumberSInt32Type, v14);
    v19 += 8;
    v14 += 4;
  }
  while (v22 != v19);
  CFArrayRef v23 = CFArrayCreate(v20, (const void **)values, v21, MEMORY[0x1E4F1D510]);
  for (uint64_t i = 0; i != v21; ++i)
  {
    uint64_t v25 = values[i];
    if (v25) {
      CFRelease(v25);
    }
  }
  v38[0] = v23;
  CFIndex v18 = 1;
  char v13 = a5;
  int v12 = a6;
  uint64_t v17 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a1)
  {
LABEL_14:
    *(void *)((unint64_t)keys | (8 * v18)) = *MEMORY[0x1E4F24E10];
    *(void *)((unint64_t)v38 & 0xFFFFFFFFFFFFFFF7 | (8 * (v18++ & 1))) = CFNumberCreate(*v17, kCFNumberIntType, &valuePtra);
  }
LABEL_15:
  if (a2)
  {
    keys[v18] = (void *)*MEMORY[0x1E4F24D08];
    v38[v18++] = CFNumberCreate(*v17, kCFNumberIntType, &v36);
  }
  uint64_t v26 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
  if (v13)
  {
    keys[v18] = (void *)*MEMORY[0x1E4F24D50];
    v38[v18++] = (void *)CFRetain(*v26);
  }
  if (a7 >= 2)
  {
    keys[v18] = (void *)*MEMORY[0x1E4F24D78];
    v38[v18++] = CFNumberCreate(*v17, kCFNumberSInt32Type, &v35);
  }
  if (a8 >= 2)
  {
    keys[v18] = (void *)*MEMORY[0x1E4F24C98];
    v38[v18++] = CFNumberCreate(*v17, kCFNumberSInt32Type, &v34);
  }
  if ((v13 & 2) != 0)
  {
    keys[v18] = (void *)*MEMORY[0x1E4F24D30];
    v38[v18++] = (void *)*v26;
  }
  CFDictionaryRef v27 = CFDictionaryCreate(*v17, (const void **)keys, (const void **)v38, v18, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v12)
  {
    values[0] = 0;
    uint64_t PixelBufferAttributesWithIOSurfaceSupport = FigCreatePixelBufferAttributesWithIOSurfaceSupport();
    if (PixelBufferAttributesWithIOSurfaceSupport)
    {
      uint64_t v29 = PixelBufferAttributesWithIOSurfaceSupport;
      if (!v18) {
        goto LABEL_35;
      }
      goto LABEL_31;
    }
    if (v27) {
      CFRelease(v27);
    }
    CFDictionaryRef v27 = (CFDictionaryRef)values[0];
  }
  uint64_t v29 = 0;
  *a10 = v27;
  CFDictionaryRef v27 = 0;
  if (!v18) {
    goto LABEL_35;
  }
LABEL_31:
  uint64_t v30 = v38;
  do
  {
    if (*v30) {
      CFRelease(*v30);
    }
    ++v30;
    --v18;
  }
  while (v18);
LABEL_35:
  if (v27) {
    CFRelease(v27);
  }
  return v29;
}

void FPSupport_EnsureCAImageQueue(CFTypeRef *a1, _DWORD *a2, int a3, int a4)
{
  uint64_t v8 = (void *)MEMORY[0x199711A30]();
  if (*a1)
  {
    if (CAImageQueueGetWidth() != a3 || CAImageQueueGetHeight() != a4) {
      CAImageQueueSetSize();
    }
  }
  else
  {
    CFPreferencesGetAppIntegerValue(@"caiq_capacity", @"com.apple.coremedia", 0);
    uint64_t v9 = CAImageQueueCreate();
    if (*a1) {
      CFRelease(*a1);
    }
    *a1 = (CFTypeRef)v9;
    if (v9)
    {
      uint64_t v10 = CAImageQueueSetFlags();
      if (a2)
      {
        uint64_t v11 = (void *)MEMORY[0x199711A30](v10);
        Context = (void *)fpSupport_getContext();
        [MEMORY[0x1E4F39CF8] begin];
        if (!pthread_main_np()) {
          [MEMORY[0x1E4F39CF8] activateBackground:1];
        }
        uint64_t v13 = *a2;
        if (!v13)
        {
          uint64_t v14 = [Context createSlot];
          *a2 = v14;
          if (v14)
          {
            uint64_t v13 = v14;
          }
          else if ([Context valid])
          {
            uint64_t v13 = *a2;
          }
          else
          {
            Context = (void *)fpSupport_getContext();
            uint64_t v13 = [Context createSlot];
            *a2 = v13;
          }
        }
        [Context setObject:*a1 forSlot:v13];
        [MEMORY[0x1E4F39CF8] commit];
        [MEMORY[0x1E4F39CF8] synchronize];
      }
    }
  }
}

uint64_t fpSupport_getContext()
{
  CFAllocatorRef v0 = (void *)MEMORY[0x199711A30]();
  if (fpSupport_getContext_onceToken != -1) {
    dispatch_once(&fpSupport_getContext_onceToken, &__block_literal_global_198);
  }
  MEMORY[0x19970E910](fpSupport_getContext_contextMutex);
  if (fpSupport_getContext_sContext)
  {
    [MEMORY[0x1E4F39CF8] synchronize];
    if (([(id)fpSupport_getContext_sContext valid] & 1) == 0)
    {
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      CFRelease((CFTypeRef)fpSupport_getContext_sContext);
      fpSupport_getContext_sContext = 0;
      [MEMORY[0x1E4F39CF8] commit];
    }
    uint64_t v1 = (const void *)fpSupport_getContext_sContext;
    if (fpSupport_getContext_sContext) {
      goto LABEL_14;
    }
  }
  uint64_t v2 = (const void *)(CARenderServerIsRunning()
                    ? [MEMORY[0x1E4F39B58] localContext]
                    : [MEMORY[0x1E4F39B58] remoteContext]);
  fpSupport_getContext_sContext = (uint64_t)v2;
  if (v2)
  {
    CFRetain(v2);
    uint64_t v1 = (const void *)fpSupport_getContext_sContext;
    if (fpSupport_getContext_sContext)
    {
LABEL_14:
      CFRetain(v1);
      CFAutorelease((CFTypeRef)fpSupport_getContext_sContext);
    }
  }
  MEMORY[0x19970E930](fpSupport_getContext_contextMutex);
  return fpSupport_getContext_sContext;
}

uint64_t FigVideoRenderPipelineCreateWithLKImageQueue(const __CFAllocator *a1, const void *a2, const void *a3, uint64_t a4, const void *a5, const __CFDictionary *a6, void *a7)
{
  CMTimeRange values = 0;
  FigImageQueueCreateForCoreAnimation(0, a5, &values);
  CFArrayRef v12 = CFArrayCreate(a1, (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  uint64_t v14 = FigVideoRenderPipelineCreateWithFigImageQueueArray(a1, a2, a3, 0, v13, v12, 0, a6, a7);
  if (v12) {
    CFRelease(v12);
  }
  if (values) {
    CFRelease(values);
  }
  return v14;
}

uint64_t FigImageQueueCreateForCoreAnimation(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigKTraceInit();
  if (a3)
  {
    FigImageQueueGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (v5) {
      return v5;
    }
    MEMORY[0x19970EE10](&sPIQCACreateRegistrationDictionaryMutexOnce, piqca_createRegistrationDictionaryMutex);
    MEMORY[0x19970EE10](&sCAImageQueueSetEDRDeadlineMutexOnce, piqca_loadCAImageQueueSetEDRDeadline);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v8 = FigOSTransactionCreate();
    *(void *)(DerivedStorage + 2864) = v8;
    if (!v8) {
      return FigSignalErrorAt();
    }
    *(void *)(DerivedStorage + 8) = FigSimpleMutexCreate();
    uint64_t v9 = malloc_type_calloc(0x18uLL, 1uLL, 0xA75EA56AuLL);
    *(void *)(DerivedStorage + 16) = v9;
    *(void *)uint64_t v9 = 0;
    v9[4] = 1;
    *(void *)(*(void *)(DerivedStorage + 16) + 8) = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 2776) = FigSimpleMutexCreate();
    CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
    *(void *)(DerivedStorage + 120) = Mutable;
    if (!Mutable) {
      return FigSignalErrorAt();
    }
    CFArrayRef v12 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 120), 0, v12);
    *(void *)uint64_t DerivedStorage = a2;
    CFRetain(a2);
    *(unsigned char *)(DerivedStorage + 49) = 1;
    *(_WORD *)(DerivedStorage + 137) = 0;
    *(void *)(DerivedStorage + 212) = 0x100000001;
    *(_DWORD *)(DerivedStorage + 56) = 0;
    CAImageQueueSetFlags();
    *(unsigned char *)(DerivedStorage + 88) = 0;
    *(void *)(DerivedStorage + 96) = 0x404E000000000000;
    *(_DWORD *)(DerivedStorage + 2880) = 4;
    *(unsigned char *)(DerivedStorage + 2884) = 0;
    CAImageQueueSetEnhancementMode();
    uint64_t v13 = CAImageQueueSetFlags();
    if (defaultDisableColorMatching_alreadyChecked == 1)
    {
      if (!defaultDisableColorMatching_result)
      {
LABEL_15:
        if (defaultEnableDisplayTracking_alreadyChecked == 1)
        {
          if (!defaultEnableDisplayTracking_result)
          {
LABEL_20:
            FigBytePumpGetFigBaseObject(v13);
            *(unsigned char *)(DerivedStorage + 132) = 1;
            *(unsigned char *)(DerivedStorage + 2920) = 0;
            *(void *)(DerivedStorage + 2928) = FigDispatchQueueCreateWithPriority();
            if (piqca_getSharedPollingThreadContext_initSharedPollingThreadOnce != -1) {
              dispatch_once_f(&piqca_getSharedPollingThreadContext_initSharedPollingThreadOnce, &piqca_getSharedPollingThreadContext_sharedPollingContext, (dispatch_function_t)piqca_initSharedPollingThread);
            }
            uint64_t v14 = FigCFWeakReferenceHolderCreateWithReferencedObject();
            if (v14)
            {
              uint64_t v15 = (const void *)v14;
              MEMORY[0x19970E910](qword_1E934E210);
              CFDictionarySetValue((CFMutableDictionaryRef)qword_1E934E218, 0, v15);
              MEMORY[0x19970E930](qword_1E934E210);
              CFRelease(v15);
            }
            else
            {
              FigSignalErrorAt();
            }
            piqca_WakeupSharedPollingThread();
            uint64_t v16 = FigImageQueueDisplayCountHistory_Create((uint64_t *)(DerivedStorage + 2848));
            if (!v16)
            {
              FigImageQueueDisplayCountHistory_StartTracingDisplayCount(*(void *)(DerivedStorage + 2848), 0, "imagequeue");
              uint64_t v17 = FigSimpleMutexCreate();
              *(void *)(DerivedStorage + 3048) = v17;
              if (v17)
              {
                uint64_t v18 = FigSimpleMutexCreate();
                *(void *)(DerivedStorage + 3024) = v18;
                if (v18)
                {
                  dispatch_queue_t v19 = dispatch_queue_create("com.apple.coremedia.fiq4ca.notificationQueue", 0);
                  *(void *)(DerivedStorage + 3072) = v19;
                  if (v19)
                  {
                    *(_DWORD *)(DerivedStorage + 2456) = 0;
                    *(void *)(DerivedStorage + 2896) = 0x41CDCD6500000000;
                    *(_DWORD *)(DerivedStorage + 2888) = 0;
                    *(void *)(DerivedStorage + 2912) = 0;
                    *(void *)(DerivedStorage + 2904) = 0;
                    long long v25 = 0u;
                    memset(v26, 0, sizeof(v26));
                    uint64_t AdoptedVoucherProcessIDAndUUIDString = FigDebugGetAdoptedVoucherProcessIDAndUUIDString();
                    pid_t v21 = AdoptedVoucherProcessIDAndUUIDString;
                    *(void *)(DerivedStorage + 3008) = CFStringCreateWithFormat(v10, 0, @"com.apple.coremedia.iq.ca.client%d", AdoptedVoucherProcessIDAndUUIDString);
                    *(unsigned char *)(DerivedStorage + 3016) = 1;
                    int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
                    CMTimeMake(&v24, CFPreferenceNumberWithDefault, 1000);
                    *(CMTime *)(DerivedStorage + 224) = v24;
                    *(_DWORD *)(DerivedStorage + 248) = FigGetCFPreferenceNumberWithDefault();
                    *(void *)(DerivedStorage + 2464) = FigSimpleMutexCreate();
                    if (v21 <= 0) {
                      pid_t v21 = getpid();
                    }
                    *(_DWORD *)(DerivedStorage + 2480) = v21;
                    FigServer_CopyProcessName();
                    if (dword_1E934E1F0)
                    {
                      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                      fig_log_call_emit_and_clean_up_after_send_and_compose();
                    }
                    uint64_t v5 = 0;
                    *a3 = 0;
                    if (!v12) {
                      return v5;
                    }
LABEL_33:
                    CFRelease(v12);
                    return v5;
                  }
                }
              }
              uint64_t v16 = FigSignalErrorAt();
            }
            uint64_t v5 = v16;
            if (!v12) {
              return v5;
            }
            goto LABEL_33;
          }
        }
        else
        {
          uint64_t v13 = FigGetCFPreferenceNumberWithDefault();
          defaultEnableDisplayTracking_uint64_t result = v13;
          defaultEnableDisplayTracking_alreadyChecked = 1;
          if (!(_BYTE)v13) {
            goto LABEL_20;
          }
        }
        uint64_t v13 = CAImageQueueSetFlags();
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v13 = MGGetBoolAnswer();
      defaultDisableColorMatching_uint64_t result = v13 ^ 1;
      defaultDisableColorMatching_alreadyChecked = 1;
      if (v13 == 1) {
        goto LABEL_15;
      }
    }
    uint64_t v13 = CAImageQueueSetFlags();
    goto LABEL_15;
  }

  return FigSignalErrorAt();
}

uint64_t FigImageQueueGetClassID()
{
  return sFigImageQueueClassID;
}

uint64_t RegisterFigImageQueueType()
{
  CMBaseGetClassID();
  FigBaseClassRegisterClass();
  fig_note_initialize_category_with_default_work_cf();

  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t VMC2CreateWithQueues(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, const void *a3, const void *a4, const void *a5, const void *a6, uint64_t a7, void *a8, long long *a9, long long *a10, const void *a11, const void *a12, const __CFDictionary *a13, uint64_t *a14)
{
  CMTimeRange values = a8;
  CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v18 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFArrayRef v19 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&values, 1, MEMORY[0x1E4F1D510]);
  CFArrayRef v20 = CFArrayCreate(v17, MEMORY[0x1E4F1D260], 1, v18);
  long long v29 = *a9;
  uint64_t v30 = *((void *)a9 + 2);
  long long v27 = *a10;
  uint64_t v28 = *((void *)a10 + 2);
  uint64_t v21 = VMC2CreateWithQueues2(a1, a2, a3, a4, a5, a6, a7, v19, v20, (uint64_t)&v29, (uint64_t)&v27, a11, a12, a13, a14);
  CFRelease(v19);
  CFRelease(v20);
  return v21;
}

uint64_t FigSampleBufferProviderCreateForBufferQueue(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  CFTypeRef cf = 0;
  if (a2 && a3)
  {
    FigSampleBufferProviderGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)(DerivedStorage + 8) = a2;
      CFRetain(a2);
      *(void *)(DerivedStorage + 32) = FigSimpleMutexCreate();
      *(unsigned char *)(DerivedStorage + 40) = 0;
      uint64_t v8 = *(opaqueCMBufferQueue **)(DerivedStorage + 8);
      long long v12 = *MEMORY[0x1E4F1FA48];
      *(_OWORD *)&time.CMTimeValue value = *MEMORY[0x1E4F1FA48];
      CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
      time.CMTimeEpoch epoch = v9;
      uint64_t v10 = CMBufferQueueInstallTrigger(v8, (CMBufferQueueTriggerCallback)sbp_bq_minOrMaxPTSChanged_orEndOfDataReached, (void *)cf, 8, &time, (CMBufferQueueTriggerToken *)(DerivedStorage + 16));
      if (v10) {
        goto LABEL_17;
      }
      uint64_t v11 = *(opaqueCMBufferQueue **)(DerivedStorage + 8);
      *(_OWORD *)&time.CMTimeValue value = v12;
      time.CMTimeEpoch epoch = v9;
      uint64_t v10 = CMBufferQueueInstallTrigger(v11, (CMBufferQueueTriggerCallback)sbp_bq_dataBecameReady, (void *)cf, 7, &time, (CMBufferQueueTriggerToken *)(DerivedStorage + 24));
      if (v10
        || (CMNotificationCenterGetDefaultLocalCenter(), uint64_t v10 = CMNotificationCenterAddListener(), v10)
        || (CMNotificationCenterGetDefaultLocalCenter(), uint64_t v10 = CMNotificationCenterAddListener(), v10)
        || (CMNotificationCenterGetDefaultLocalCenter(), uint64_t v10 = CMNotificationCenterAddListener(), v10))
      {
LABEL_17:
        uint64_t v5 = v10;
      }
      else
      {
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t v5 = CMNotificationCenterAddListener();
        if (!v5)
        {
          *a3 = cf;
          return v5;
        }
      }
    }
    if (cf) {
      CFRelease(cf);
    }
    return v5;
  }

  return FigSignalErrorAt();
}

uint64_t FigSampleBufferProviderGetClassID()
{
  return sFigSampleBufferProviderClassID;
}

uint64_t RegisterFigSampleBufferProviderType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigActivitySchedulerCreateForNewThread(uint64_t a1, int a2, void *a3, void *a4)
{
  CMTimeRange values = a3;
  if (a4)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    FigActivitySchedulerGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (v8) {
      return v8;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v10 = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 48) = v10;
    if (v10
      && (uint64_t v11 = FigSemaphoreCreate(), (*(void *)(DerivedStorage + 24) = v11) != 0)
      && (uint64_t v12 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 16) = v12) != 0))
    {
      if (!a3) {
        CMTimeRange values = @"com.apple.coremedia.activityscheduler";
      }
      CFDictionaryRef v13 = CFDictionaryCreate(v7, MEMORY[0x1E4F21EA8], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(_DWORD *)(DerivedStorage + 60) = a2;
      uint64_t v14 = FigThreadCreate();
      if (!v14) {
        *a4 = 0;
      }
      if (v13) {
        CFRelease(v13);
      }
    }
    else
    {
      uint64_t v14 = 4294954510;
      FigSignalErrorAt();
    }
    return v14;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigActivitySchedulerGetClassID()
{
  return sFigActivitySchedulerClassID;
}

uint64_t RegisterFigActivitySchedulerType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t VMC2CreateWithCallbacks(int a1, const opaqueCMFormatDescription *a2, const void *a3, const void *a4, const void *a5, const void *a6, uint64_t a7, void *a8, CFTypeRef cf, long long *a10, long long *a11, const void *a12, const void *a13, const __CFDictionary *a14, uint64_t *a15)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  if (!a6) {
    goto LABEL_27;
  }
  if (!a8)
  {
    uint64_t v25 = FigSignalErrorAt();
    uint64_t v22 = 0;
    goto LABEL_33;
  }
  if (!a8[2]
    || !a8[3]
    || !a8[4]
    || !a8[5]
    || !a8[6]
    || !a8[7]
    || !a8[8]
    || !a8[9]
    || !a8[11]
    || !a12
    || !a15
    || (MEMORY[0x19970EE10](&sRegisterVMCTypeOnce, RegisterVMC2Type), (uint64_t Instance = _CFRuntimeCreateInstance()) == 0))
  {
LABEL_27:
    uint64_t v25 = FigSignalErrorAt();
    uint64_t v22 = 0;
    goto LABEL_28;
  }
  uint64_t v22 = Instance;
  CFTypeRef v23 = cf;
  if (cf) {
    CFTypeRef v23 = CFRetain(cf);
  }
  *(void *)(v22 + 256) = v23;
  vmc2SetVideoFormatDescription(v22, a2);
  *(void *)(v22 + 48) = a4;
  if (a4) {
    CFRetain(a4);
  }
  *(void *)(v22 + 56) = a5;
  if (a5) {
    CFRetain(a5);
  }
  *(void *)(v22 + 88) = a6;
  CFRetain(a6);
  *(void *)(v22 + 800) = 0;
  vmc2UpdateDisplayMode(v22);
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v24 = CMNotificationCenterAddListener();
  if (!v24)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v24 = CMNotificationCenterAddListener();
    if (!v24)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t v24 = CMNotificationCenterAddListener();
      if (!v24)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t v24 = CMNotificationCenterAddListener();
        if (!v24)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          FPSupport_GetDisplayVideoRangeNotificationSingleton();
          uint64_t v24 = CMNotificationCenterAddListener();
          if (!v24)
          {
            if (a7) {
              __copy_assignment_8_8_t0w16_pa0_323_16_pa0_24722_24_pa0_38677_32(v22 + 96, a7);
            }
            *(void *)(v22 + 136) = FigReadWriteLockCreate();
            __copy_assignment_8_8_t0w16_pa0_37031_16_pa0_15589_24_pa0_48845_32_pa0_31235_40_pa0_15173_48_pa0_1637_56_pa0_22919_64_pa0_52647_72_pa0_36147_80_pa0_30122_88(v22 + 144, (uint64_t)a8);
            *(_WORD *)(v22 + 248) = 256;
            *(void *)(v22 + 240) = 0;
            long long v29 = *a11;
            *(void *)(v22 + 512) = *((void *)a11 + 2);
            *(_OWORD *)(v22 + 496) = v29;
            long long v30 = *a10;
            *(void *)(v22 + 488) = *((void *)a10 + 2);
            *(_OWORD *)(v22 + 472) = v30;
            *(void *)(v22 + 264) = a12;
            CFRetain(a12);
            valuePtr[0] = 0;
            CFNumberRef v31 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
            FigActivitySchedulerSetProperty(*(void *)(v22 + 264), @"ClientPID", (uint64_t)v31);
            CFRelease(v31);
            uint64_t v32 = (const void *)*MEMORY[0x1E4F1CFC8];
            FigActivitySchedulerSetProperty(*(void *)(v22 + 264), @"ThrottleForBackground", *MEMORY[0x1E4F1CFC8]);
            uint64_t v33 = FigActivitySchedulerSetProcessingCallback(*(void *)(v22 + 264), (uint64_t)vmc2DecodeUntilHighWaterMet, v22);
            if (!v33)
            {
              CFTypeRef v34 = a13;
              *(unsigned char *)(v22 + 272) = 1;
              uint64_t v35 = MEMORY[0x1E4F1F9F8];
              *(_OWORD *)(v22 + 392) = *MEMORY[0x1E4F1F9F8];
              *(void *)(v22 + 408) = *(void *)(v35 + 16);
              if (a13) {
                CFTypeRef v34 = CFRetain(a13);
              }
              *(void *)(v22 + 584) = v34;
              *(_WORD *)(v22 + 857) = 1;
              *(_WORD *)(v22 + 861) = 0;
              *(unsigned char *)(v22 + 863) = 1;
              if (a14)
              {
                LOBYTE(valuePtr[0]) = 0;
                CFNumberRef Value = CFDictionaryGetValue(a14, @"SharePixelBufferPool");
                *(void *)(v22 + 976) = Value;
                if (Value) {
                  CFRetain(Value);
                }
                uint64_t v37 = CFDictionaryGetValue(a14, @"AllowClientProcessDecode");
                *(void *)(v22 + 984) = v37;
                if (v37) {
                  CFRetain(v37);
                }
                *(unsigned char *)(v22 + 857) = CFDictionaryGetValue(a14, @"RealTime") != v32;
                FigCFDictionaryGetBooleanIfPresent();
                *(unsigned char *)(v22 + 858) = valuePtr[0];
                FigCFDictionaryGetBooleanIfPresent();
                *(unsigned char *)(v22 + 859) = 0;
                FigCFDictionaryGetBooleanIfPresent();
                *(unsigned char *)(v22 + 860) = 0;
                FigCFDictionaryGetInt32IfPresent();
                uint64_t v38 = CFDictionaryGetValue(a14, @"LoggingIdentifier");
                *(void *)(v22 + 848) = v38;
                if (v38) {
                  CFRetain(v38);
                }
                FigCFDictionaryGetBooleanIfPresent();
              }
              if (a3) {
                CFTypeRef v39 = CFRetain(a3);
              }
              else {
                CFTypeRef v39 = 0;
              }
              *(void *)(v22 + 24) = v39;
              if (*(void *)(v22 + 32))
              {
                if (!*(unsigned char *)(v22 + 40))
                {
                  MEMORY[0x19970E910](*(void *)(v22 + 72));
                  uint64_t v43 = vmc2BuildDecompressionSession(v22);
                  MEMORY[0x19970E930](*(void *)(v22 + 72));
                  if (v43)
                  {
                    uint64_t v25 = v43;
                    goto LABEL_37;
                  }
                }
              }
              uint64_t v33 = VTPixelBufferConformerCreateWithAttributes();
              if (!v33)
              {
                long long v40 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, *(dispatch_queue_t *)(v22 + 816));
                *(void *)(v22 + 824) = v40;
                dispatch_source_set_timer(v40, 0, 0x3B9ACA00uLL, 0x1DCD6500uLL);
                dispatch_set_context(*(dispatch_object_t *)(v22 + 824), (void *)v22);
                dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v22 + 824), (dispatch_function_t)vmc2UpdateExternalProtectionStatus);
                *(void *)(v22 + 1392) = voucher_copy();
                uint64_t v33 = vmc2InvokeOutputCallback_InstallOccupancyChangedCallback(v22);
                if (!v33)
                {
                  long long v47 = 0u;
                  memset(v48, 0, sizeof(v48));
                  int AdoptedVoucherProcessIDAndUUIDString = FigDebugGetAdoptedVoucherProcessIDAndUUIDString();
                  *(_DWORD *)(v22 + 1176) = AdoptedVoucherProcessIDAndUUIDString;
                  if (AdoptedVoucherProcessIDAndUUIDString <= 0) {
                    *(_DWORD *)(v22 + 1176) = getpid();
                  }
                  if (dword_1E934D4F0)
                  {
                    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                    fig_log_call_emit_and_clean_up_after_send_and_compose();
                  }
                  long long v44 = *(const opaqueCMFormatDescription **)(v22 + 32);
                  if (v44) {
                    *(_DWORD *)(v22 + 1180) = CMFormatDescriptionGetMediaSubType(v44);
                  }
                  uint64_t v25 = 0;
                  *a15 = v22;
                  return v25;
                }
              }
            }
            uint64_t v25 = v33;
LABEL_37:
            CFRelease((CFTypeRef)v22);
            return v25;
          }
        }
      }
    }
  }
  uint64_t v25 = v24;
LABEL_28:
  if (a8)
  {
    if (v25)
    {
      uint64_t v26 = (void (*)(void))a8[9];
      if (v26) {
        v26(a8[1]);
      }
    }
  }
LABEL_33:
  if (a7)
  {
    long long v27 = *(void (**)(void))(a7 + 24);
    if (v27) {
      v27(*(void *)(a7 + 8));
    }
  }
  if (v22) {
    goto LABEL_37;
  }
  return v25;
}

uint64_t RegisterVMC2Type()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sVMC2ID = result;
  return result;
}

uint64_t vmc2Init(uint64_t a1)
{
  bzero((void *)(a1 + 16), 0x5C8uLL);
  *(void *)(a1 + 280) = FigReentrantMutexCreate();
  *(void *)(a1 + 296) = FigSimpleMutexCreate();
  *(void *)(a1 + 304) = FigSemaphoreCreate();
  *(void *)(a1 + 632) = FigSimpleMutexCreate();
  *(void *)(a1 + 536) = FigSimpleMutexCreate();
  *(void *)(a1 + 776) = FigSimpleMutexCreate();
  *(void *)(a1 + 72) = FigSimpleMutexCreate();
  *(void *)(a1 + 1480) = FigSimpleMutexCreate();
  *(void *)(a1 + 448) = dispatch_queue_create("com.apple.coremedia.videomediaconverter.inbound", 0);
  *(void *)(a1 + 464) = dispatch_queue_create("com.apple.coremedia.videomediaconverter.outbound", 0);
  *(void *)(a1 + 456) = FigDispatchQueueCreateWithPriority();
  *(void *)(a1 + 816) = dispatch_queue_create("com.apple.coremedia.videomediaconverter.cpec", 0);
  FigDispatchQueueSetPriorityAndClientPID();
  *(void *)(a1 + 824) = 0;
  *(unsigned char *)(a1 + 832) = 0;
  *(_DWORD *)(a1 + 836) = 1;
  *(void *)(a1 + 704) = FigSimpleMutexCreate();
  *(void *)(a1 + 968) = dispatch_queue_create("com.apple.coremedia.videomediaconverter.filter", 0);
  *(_OWORD *)(a1 + 872) = *MEMORY[0x1E4F1DB30];
  *(unsigned char *)(a1 + 624) = 1;
  *(void *)(a1 + 576) = FigSimpleMutexCreate();
  *(_DWORD *)(a1 + 792) = 1;
  *(void *)(a1 + 1160) = FigSimpleMutexCreate();
  int CFPreferenceNumberWithDefault = FigGetCFPreferenceNumberWithDefault();
  CMTimeMake(&v4, CFPreferenceNumberWithDefault, 1000);
  *(CMTime *)(a1 + 1420) = v4;
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  *(_DWORD *)(a1 + 1444) = result;
  return result;
}

uint64_t FigActivitySchedulerSetProcessingCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t activityOnThread_setProcessingCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v7 = (void *)DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
    v7[4] = a3;
    v7[5] = a2;
    MEMORY[0x19970E930](v7[6]);
    return 0;
  }
}

uint64_t activitySchedulerOnThread(uint64_t a1)
{
  while (!*(unsigned char *)(a1 + 57))
  {
    if (*(unsigned char *)(a1 + 56))
    {
      uint64_t v2 = MEMORY[0x19970E910](*(void *)(a1 + 48));
      if (*(void *)(a1 + 40))
      {
        int v3 = (void *)MEMORY[0x199711A30](v2);
        (*(void (**)(void))(a1 + 40))(*(void *)(a1 + 32));
      }
      MEMORY[0x19970E930](*(void *)(a1 + 48));
    }
    FigSemaphoreWaitRelative();
  }
  return 0;
}

uint64_t VMC2Go(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    ++*(_DWORD *)(a1 + 524);
    vmc2ResetTroubleMonitorTimers(a1);
    *(unsigned char *)(a1 + 288) = 1;
    FigMemoryBarrier();
    uint64_t v3 = *(void *)(a1 + 264);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(void (**)(uint64_t))(v5 + 16);
    if (v6) {
      v6(v3);
    }
    return 0;
  }
}

uint64_t activityOnThread_triggerScheduling()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v2 = DerivedStorage;
    DerivedStorage[56] = 1;
    FigMemoryBarrier();
    if (*((void *)v2 + 3)) {
      FigSemaphoreSignal();
    }
    return 0;
  }
}

uint64_t figVideoRenderPipelineSetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  if (!DerivedStorage || (uint64_t v7 = DerivedStorage, *DerivedStorage))
  {
    return FigSignalErrorAt();
  }
  if (CFEqual(@"Timebase", a2))
  {
    if (!a3 || (CFTypeID TypeID = CMTimebaseGetTypeID(), TypeID == CFGetTypeID(a3)))
    {
      videopipelineSetTimebase(a1, a3);
      goto LABEL_10;
    }
    goto LABEL_155;
  }
  if (CFEqual(@"PrerollRate", a2))
  {
    if (a3)
    {
      CFTypeID v11 = CFNumberGetTypeID();
      if (v11 == CFGetTypeID(a3))
      {
        float valuePtr = 1.0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberFloatType, &valuePtr);
        CFArrayRef v12 = (const __CFArray *)*((void *)v7 + 5);
        if (v12)
        {
          CFIndex Count = CFArrayGetCount(v12);
          if (Count >= 1)
          {
            CFIndex v14 = Count;
            for (CFIndex i = 0; i != v14; ++i)
            {
              CFURLRef ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v7 + 5), i);
              float v17 = valuePtr;
              uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v18) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = 0;
              }
              CFArrayRef v20 = *(void (**)(const void *, float))(v19 + 48);
              if (v20) {
                v20(ValueAtIndex, v17);
              }
            }
          }
        }
        figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, 0);
        if (theArray)
        {
          CFIndex v21 = CFArrayGetCount(theArray);
          if (v21 >= 1)
          {
            CFIndex v22 = v21;
            for (CFIndex j = 0; j != v22; ++j)
            {
              uint64_t v24 = CFArrayGetValueAtIndex(theArray, j);
              float v25 = valuePtr;
              uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v26) {
                uint64_t v27 = v26;
              }
              else {
                uint64_t v27 = 0;
              }
              uint64_t v28 = *(void (**)(const void *, float))(v27 + 48);
              if (v28) {
                v28(v24, v25);
              }
            }
          }
        }
        uint64_t v29 = *((void *)v7 + 4);
        if (v29)
        {
          if (valuePtr < 0.0) {
            unsigned int v30 = -1;
          }
          else {
            unsigned int v30 = 0;
          }
          if (valuePtr <= 0.0) {
            uint64_t v31 = v30;
          }
          else {
            uint64_t v31 = 1;
          }
          FigSampleAttachmentCollectorSetDirection(v29, v31);
        }
        goto LABEL_10;
      }
    }
    goto LABEL_155;
  }
  if (CFEqual(@"PreventDisplaySleepDuringVideoPlayback", a2))
  {
    if (a3)
    {
      CFTypeID v32 = CFBooleanGetTypeID();
      if (v32 == CFGetTypeID(a3))
      {
        v7[80] = CFBooleanGetValue((CFBooleanRef)a3);
LABEL_53:
        FigImageQueueArraySetProperty();
        goto LABEL_10;
      }
    }
LABEL_155:
    uint64_t updated = FigSignalErrorAt();
    goto LABEL_156;
  }
  if (CFEqual(@"VideoEnqueueResetsSystemSleepTimer", a2))
  {
    if (!a3) {
      goto LABEL_155;
    }
    CFTypeID v33 = CFBooleanGetTypeID();
    if (v33 != CFGetTypeID(a3)) {
      goto LABEL_155;
    }
LABEL_47:
    figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, 0);
    goto LABEL_53;
  }
  if (CFEqual(@"CAImageQueueCaptionsMayAppearHint", a2))
  {
    if (!a3) {
      goto LABEL_155;
    }
    CFTypeID v34 = CFBooleanGetTypeID();
    if (v34 != CFGetTypeID(a3)) {
      goto LABEL_155;
    }
    goto LABEL_47;
  }
  if (CFEqual(@"DurationAllowedForCachedVideoFrames", a2)) {
    goto LABEL_53;
  }
  if (CFEqual(@"ObeyEmptyMediaMarkers", a2))
  {
    uint64_t v35 = *((void *)v7 + 2);
    if (!v35) {
      goto LABEL_10;
    }
    int v36 = kVideoMediaConverter2Property_ObeyEmptyMediaMarkers;
    goto LABEL_57;
  }
  if (CFEqual(@"AttachmentCollectorMetadataSourceBuffers", a2))
  {
    uint64_t v38 = *((void *)v7 + 4);
    if (!v38) {
      goto LABEL_155;
    }
    CFTypeRef v39 = kFigSampleAttachmentCollectorProperty_MetadataSourceBufferQueues;
    goto LABEL_61;
  }
  if (CFEqual(@"SampleAttachmentCollectionRules", a2))
  {
    uint64_t v40 = *((void *)v7 + 4);
    if (v40)
    {
      uint64_t v10 = FigCPECryptorSetProperty(v40, @"SampleAttachmentCollectionRules", (uint64_t)a3);
      uint64_t v41 = *((void *)v7 + 2);
      if (v41) {
        VMC2SetProperty(v41, @"CollectionRules", (const __CFBoolean *)a3);
      }
      goto LABEL_157;
    }
    goto LABEL_155;
  }
  if (CFEqual(@"RenderEmptyMedia", a2))
  {
    uint64_t v35 = *((void *)v7 + 2);
    if (!v35) {
      goto LABEL_10;
    }
    int v36 = kVideoMediaConverter2Property_RenderEmptyMedia;
    goto LABEL_57;
  }
  if (!CFEqual(@"ClientPID", a2))
  {
    if (CFEqual(@"ThrottleForBackground", a2))
    {
      uint64_t v35 = *((void *)v7 + 2);
      if (!v35) {
        goto LABEL_10;
      }
      int v36 = kVideoMediaConverter2Property_ThrottleForBackground;
      goto LABEL_57;
    }
    if (CFEqual(@"FieldMode", a2))
    {
      uint64_t v35 = *((void *)v7 + 2);
      if (!v35) {
        goto LABEL_10;
      }
      int v36 = kVideoMediaConverter2Property_FieldMode;
      goto LABEL_57;
    }
    if (CFEqual(@"AllowVideoQualityOfServiceAdjustments", a2))
    {
      uint64_t v35 = *((void *)v7 + 2);
      if (!v35) {
        goto LABEL_10;
      }
      int v36 = kVideoMediaConverter2Property_AllowVideoQualityOfServiceAdjustments;
      goto LABEL_57;
    }
    if (CFEqual(@"VideoDecoderUsage", a2))
    {
      uint64_t v35 = *((void *)v7 + 2);
      if (!v35) {
        goto LABEL_10;
      }
      int v36 = kVideoMediaConverter2Property_DecoderUsage;
      goto LABEL_57;
    }
    if (CFEqual(@"VideoDecoderPriority", a2))
    {
      uint64_t v35 = *((void *)v7 + 2);
      if (!v35) {
        goto LABEL_10;
      }
      int v36 = kVideoMediaConverter2Property_DecoderPriority;
      goto LABEL_57;
    }
    if (CFEqual(@"VideoDecoderThreadCount", a2))
    {
      uint64_t v35 = *((void *)v7 + 2);
      if (!v35) {
        goto LABEL_10;
      }
      int v36 = kVideoMediaConverter2Property_DecoderThreadCount;
      goto LABEL_57;
    }
    if (CFEqual(@"Suspended", a2))
    {
      if (!a3) {
        goto LABEL_155;
      }
      CFTypeID v43 = CFBooleanGetTypeID();
      if (v43 != CFGetTypeID(a3)) {
        goto LABEL_155;
      }
      int Value = CFBooleanGetValue((CFBooleanRef)a3);
      uint64_t v45 = *((void *)v7 + 2);
      if (v45)
      {
        uint64_t v46 = Value ? VMC2Stop(v45) : VMC2Go(v45);
        uint64_t v10 = v46;
        if (v46) {
          goto LABEL_157;
        }
      }
      uint64_t v49 = *((void *)v7 + 4);
      if (!v49) {
        goto LABEL_10;
      }
      if (Value) {
        uint64_t updated = FigSampleAttachmentCollectorStop(v49);
      }
      else {
        uint64_t updated = FigSampleAttachmentCollectorGo(v49);
      }
    }
    else
    {
      if (CFEqual(@"MaxAgeForOutputBufferPool", a2))
      {
        if (a3)
        {
          CFTypeID v47 = CFNumberGetTypeID();
          if (v47 != CFGetTypeID(a3)) {
            goto LABEL_155;
          }
        }
        uint64_t v35 = *((void *)v7 + 2);
        if (!v35) {
          goto LABEL_10;
        }
        int v36 = kVideoMediaConverter2Property_MaxAgeForOutputPixelBufferPool;
        goto LABEL_57;
      }
      if (CFEqual(@"VideoDecoderIsSecondary", a2))
      {
        uint64_t v35 = *((void *)v7 + 2);
        if (!v35) {
          goto LABEL_10;
        }
        int v36 = kVideoMediaConverter2Property_VideoDecoderIsSecondary;
        goto LABEL_57;
      }
      if (CFEqual(@"PropagatePerFrameHDRDisplayMetadata", a2))
      {
        uint64_t v48 = *((void *)v7 + 2);
        if (v48)
        {
          uint64_t v10 = VMC2SetProperty(v48, @"PropagatePerFrameHDRDisplayMetadata", (const __CFBoolean *)a3);
          if (v10) {
            goto LABEL_157;
          }
        }
        uint64_t v38 = *((void *)v7 + 4);
        if (!v38) {
          goto LABEL_10;
        }
        CFTypeRef v39 = kFigSampleAttachmentCollectorProperty_PropagatePerFrameHDRDisplayMetadata;
LABEL_61:
        uint64_t updated = FigCPECryptorSetProperty(v38, (uint64_t)*v39, (uint64_t)a3);
        goto LABEL_156;
      }
      if (CFEqual(@"ForceFullPowerDecode", a2))
      {
        uint64_t v35 = *((void *)v7 + 2);
        if (!v35) {
          goto LABEL_10;
        }
        int v36 = kVideoMediaConverter2Property_ForceFullPowerDecode;
        goto LABEL_57;
      }
      if (CFEqual(@"EnableIOFenceDecode", a2))
      {
        uint64_t v35 = *((void *)v7 + 2);
        if (!v35) {
          goto LABEL_10;
        }
        int v36 = kVideoMediaConverter2Property_EnableIOFenceDecode;
        goto LABEL_57;
      }
      if (CFEqual(@"EnhancementFilterOptions", a2))
      {
        uint64_t v35 = *((void *)v7 + 2);
        if (!v35) {
          goto LABEL_10;
        }
        int v36 = kVideoMediaConverter2Property_EnhancementFilterOptions;
        goto LABEL_57;
      }
      if (CFEqual(@"VideoEnhancementMode", a2))
      {
        if (a3)
        {
          CFTypeID v50 = CFStringGetTypeID();
          if (v50 != CFGetTypeID(a3)) {
            goto LABEL_155;
          }
          long long v51 = (const void *)*((void *)v7 + 11);
          *((void *)v7 + 11) = a3;
          CFRetain(a3);
        }
        else
        {
          long long v51 = (const void *)*((void *)v7 + 11);
          *((void *)v7 + 11) = 0;
        }
        if (v51) {
          CFRelease(v51);
        }
        goto LABEL_53;
      }
      if (CFEqual(@"Rotation", a2))
      {
        uint64_t v52 = *((void *)v7 + 16);
        if (!v52) {
          goto LABEL_10;
        }
        uint64_t updated = FigTransformUtilitySetRotation(v52, (CFNumberRef)a3);
      }
      else if (CFEqual(@"MinImageBounds", a2))
      {
        uint64_t v53 = *((void *)v7 + 16);
        if (!v53) {
          goto LABEL_10;
        }
        uint64_t updated = FigTransformUtilitySetMinImageBounds(v53, (CFDictionaryRef)a3);
      }
      else if (CFEqual(@"MaxImageBounds", a2))
      {
        uint64_t v54 = *((void *)v7 + 16);
        if (!v54) {
          goto LABEL_10;
        }
        uint64_t updated = FigTransformUtilitySetMaxImageBounds(v54, (CFDictionaryRef)a3);
      }
      else if (CFEqual(a2, @"NeroVideoGravity"))
      {
        uint64_t v55 = *((void *)v7 + 16);
        if (!v55) {
          goto LABEL_10;
        }
        uint64_t updated = FigTransformUtilitySetVideoGravity(v55);
      }
      else
      {
        if (CFEqual(@"DisableColorMatching", a2))
        {
          if (a3)
          {
            CFTypeID v56 = CFBooleanGetTypeID();
            if (v56 != CFGetTypeID(a3)) {
              goto LABEL_155;
            }
          }
          goto LABEL_47;
        }
        if (!CFEqual(@"FigImageQueueArray", a2))
        {
          if (CFEqual(@"ColorPrimaries", a2))
          {
            uint64_t v35 = *((void *)v7 + 2);
            if (!v35) {
              goto LABEL_10;
            }
            int v36 = kVideoMediaConverter2Property_ColorPrimaries;
          }
          else if (CFEqual(@"TransferFunction", a2))
          {
            uint64_t v35 = *((void *)v7 + 2);
            if (!v35) {
              goto LABEL_10;
            }
            int v36 = kVideoMediaConverter2Property_TransferFunction;
          }
          else if (CFEqual(@"YCbCrMatrix", a2))
          {
            uint64_t v35 = *((void *)v7 + 2);
            if (!v35) {
              goto LABEL_10;
            }
            int v36 = kVideoMediaConverter2Property_YCbCrMatrix;
          }
          else if (CFEqual(@"PreserveSyncFrames", a2))
          {
            uint64_t v35 = *((void *)v7 + 2);
            if (!v35) {
              goto LABEL_10;
            }
            int v36 = kVideoMediaConverter2Property_PreserveSyncFrames;
          }
          else if (CFEqual(@"PlaybackSessionID", a2))
          {
            uint64_t v35 = *((void *)v7 + 2);
            if (!v35) {
              goto LABEL_10;
            }
            int v36 = kVideoMediaConverter2Property_PlaybackSessionID;
          }
          else if (CFEqual(@"HDRCrossTalker", a2))
          {
            uint64_t v35 = *((void *)v7 + 2);
            if (!v35) {
              goto LABEL_10;
            }
            int v36 = kVideoMediaConverter2Property_HDRCrossTalker;
          }
          else
          {
            if (!CFEqual(@"PriorImageQueueGauge", a2))
            {
              uint64_t v10 = 4294954446;
              goto LABEL_157;
            }
            uint64_t v35 = *((void *)v7 + 2);
            if (!v35) {
              goto LABEL_10;
            }
            int v36 = kVideoMediaConverter2Property_PriorImageQueueGauge;
          }
          goto LABEL_57;
        }
        if (a3)
        {
          CFTypeID v57 = CFArrayGetTypeID();
          if (v57 != CFGetTypeID(a3)) {
            goto LABEL_155;
          }
        }
        uint64_t updated = figVideoRenderPipelineUpdateImageQueues(a1, (const __CFArray *)a3);
      }
    }
LABEL_156:
    uint64_t v10 = updated;
    goto LABEL_157;
  }
  if (a3)
  {
    CFTypeID v42 = CFGetTypeID(a3);
    if (v42 == CFNumberGetTypeID())
    {
      float valuePtr = 0.0;
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr);
      uint64_t v10 = 0;
      if (LODWORD(valuePtr) == *((_DWORD *)v7 + 1)) {
        goto LABEL_157;
      }
      *((float *)v7 + 1) = valuePtr;
      videopipelineUpdateVideoPlaybackStateForClient();
      uint64_t v35 = *((void *)v7 + 2);
      if (v35)
      {
        int v36 = kVideoMediaConverter2Property_ClientPID;
LABEL_57:
        uint64_t updated = VMC2SetProperty(v35, *v36, (const __CFBoolean *)a3);
        goto LABEL_156;
      }
    }
  }
LABEL_10:
  uint64_t v10 = 0;
LABEL_157:
  if (theArray) {
    CFRelease(theArray);
  }
  return v10;
}

uint64_t piqca_setProperty(uint64_t a1, const void *a2, const __CFBoolean *a3)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(@"PreventDisplaySleepDuringVideoPlayback", a2))
  {
    if (a3)
    {
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        Boolean Value = CFBooleanGetValue(a3);
        uint64_t result = 0;
        *(unsigned char *)(DerivedStorage + 132) = Value;
        return result;
      }
    }
    goto LABEL_68;
  }
  if (CFEqual(@"EnableImageQueueTiming", a2))
  {
    if (a3)
    {
      CFTypeID v10 = CFBooleanGetTypeID();
      if (v10 == CFGetTypeID(a3))
      {
        int v11 = *(unsigned __int8 *)(DerivedStorage + 2920);
        int v12 = CFBooleanGetValue(a3);
        *(unsigned char *)(DerivedStorage + 2920) = v12;
        if (v11 != v12)
        {
          CFDictionaryRef v13 = *(NSObject **)(DerivedStorage + 2928);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 0x40000000;
          block[2] = __piqca_setProperty_block_invoke;
          block[3] = &__block_descriptor_tmp_41;
          block[4] = a1;
          dispatch_sync(v13, block);
        }
        return 0;
      }
    }
LABEL_68:
    return FigSignalErrorAt();
  }
  if (CFEqual(@"Duration", a2))
  {
    if (a3)
    {
      CFTypeID v14 = CFDictionaryGetTypeID();
      if (v14 == CFGetTypeID(a3))
      {
        CMTimeMakeFromDictionary(v38, a3);
        uint64_t result = 0;
        *(CMTime *)(DerivedStorage + 2984) = v38[0];
        return result;
      }
    }
    goto LABEL_68;
  }
  if (CFEqual(@"FigImageQueueProperty_BlendsVideoFrames", a2))
  {
    if (a3)
    {
      CFTypeID v15 = CFBooleanGetTypeID();
      if (v15 != CFGetTypeID(a3)) {
        goto LABEL_68;
      }
    }
    int v16 = *MEMORY[0x1E4F1CFD0] == (void)a3;
    if (*(unsigned __int8 *)(DerivedStorage + 133) != v16)
    {
      *(unsigned char *)(DerivedStorage + 133) = v16;
LABEL_19:
      CAImageQueueSetFlags();
    }
    return 0;
  }
  if (CFEqual(@"FigImageQueueProperty_ImageQueueInterpolationCurve", a2))
  {
    if (!a3 || (CFTypeID v17 = CFGetTypeID(a3), v17 == CFArrayGetTypeID()))
    {
      *(_OWORD *)&v38[0].CMTimeValue value = xmmword_194997120;
      *(_OWORD *)&v38[0].CMTimeEpoch epoch = unk_194997130;
      if (!piqca_setProperty_sFigCAImageQueueSetInterpolationCurve)
      {
        uint64_t v18 = dlopen("/System/Library/Frameworks/QuartzCore.framework/QuartzCore", 1);
        if (v18) {
          piqca_setProperty_sFigCAImageQueueSetInterpolationCurve = dlsym(v18, "CAImageQueueSetInterpolationCurve");
        }
      }
      if (a3)
      {
        FigCFArrayGetDoubleAtIndex();
        FigCFArrayGetDoubleAtIndex();
        FigCFArrayGetDoubleAtIndex();
        FigCFArrayGetDoubleAtIndex();
      }
      if (piqca_setProperty_sFigCAImageQueueSetInterpolationCurve) {
        ((void (*)(void, double, double, double, double))piqca_setProperty_sFigCAImageQueueSetInterpolationCurve)(*(void *)DerivedStorage, *(double *)&v38[0].value, *(double *)&v38[0].timescale, *(double *)&v38[0].epoch, *(double *)&v38[1].value);
      }
      return 0;
    }
    goto LABEL_68;
  }
  if (CFEqual(@"FigImageQueueProperty_EnqueueResetsSystemSleepTimer", a2))
  {
    if (a3)
    {
      CFTypeID v19 = CFBooleanGetTypeID();
      if (v19 == CFGetTypeID(a3))
      {
        Boolean v20 = CFBooleanGetValue(a3);
        uint64_t result = 0;
        *(unsigned char *)(DerivedStorage + 134) = v20;
        return result;
      }
    }
    goto LABEL_68;
  }
  if (CFEqual(@"FigImageQueueProperty_Timebase", a2))
  {
    if (a3)
    {
      CFTypeID v21 = CMTimebaseGetTypeID();
      if (v21 != CFGetTypeID(a3)) {
        goto LABEL_68;
      }
    }
    piqca_setTimebase(a1, (uint64_t)a3);
    return 0;
  }
  if (CFEqual(@"FigImageQueueProperty_CAImageQueueCaptionsMayAppearHint", a2))
  {
    if (!a3) {
      goto LABEL_68;
    }
    CFTypeID v22 = CFBooleanGetTypeID();
    if (v22 != CFGetTypeID(a3)) {
      goto LABEL_68;
    }
    *(unsigned char *)(DerivedStorage + 136) = CFBooleanGetValue(a3);
    goto LABEL_19;
  }
  if (CFEqual(@"FigImageQueueProperty_DisableColorMatching", a2))
  {
    if (a3)
    {
      CFTypeID v23 = CFBooleanGetTypeID();
      if (v23 != CFGetTypeID(a3)) {
        goto LABEL_68;
      }
      *(void *)(DerivedStorage + 2872) = a3;
      if (!CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1CFD0])) {
        CFEqual(*(CFTypeRef *)(DerivedStorage + 2872), (CFTypeRef)*MEMORY[0x1E4F1CFC8]);
      }
    }
    else
    {
      *(void *)(DerivedStorage + 2872) = 0;
      if (defaultDisableColorMatching_alreadyChecked != 1)
      {
        defaultDisableColorMatching_uint64_t result = MGGetBoolAnswer() ^ 1;
        defaultDisableColorMatching_alreadyChecked = 1;
      }
    }
    goto LABEL_19;
  }
  if (CFEqual(@"VideoEnhancementMode", a2))
  {
    piqca_setEnhancementMode(DerivedStorage, (const __CFString *)a3);
    return 0;
  }
  if (CFEqual(@"CAImageQueueAlwaysSync", a2))
  {
    BOOL v24 = *MEMORY[0x1E4F1CFD0] == (void)a3;
    *(unsigned char *)(DerivedStorage + 137) = v24;
    if (!v24) {
      return 0;
    }
    goto LABEL_19;
  }
  if (CFEqual(@"UseLowLatencyModeForImmediateFrames", a2))
  {
    uint64_t result = 0;
    *(unsigned char *)(DerivedStorage + 138) = *MEMORY[0x1E4F1CFD0] == (void)a3;
    return result;
  }
  if (CFEqual(@"ForScrubbingOnly", a2))
  {
    BOOL v24 = *MEMORY[0x1E4F1CFD0] == (void)a3;
    *(unsigned char *)(DerivedStorage + 221) = v24;
    if (v24) {
      FigImageQueueDisplayCountHistory_CancelTracingDisplayCount(*(void *)(DerivedStorage + 2848));
    }
    return 0;
  }
  if (CFEqual(@"EnablePSEMitigation", a2))
  {
    if (a3)
    {
      CFTypeID v25 = CFGetTypeID(a3);
      if (v25 == CFBooleanGetTypeID())
      {
        uint64_t result = 0;
        *(unsigned char *)(DerivedStorage + 3016) = *MEMORY[0x1E4F1CFD0] == (void)a3;
        return result;
      }
    }
    goto LABEL_68;
  }
  if (CFEqual(@"RendererPreparationInfo", a2))
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 3048));
    os_log_type_t v36 = OS_LOG_TYPE_DEFAULT;
    int v26 = *(unsigned __int8 *)(DerivedStorage + 3056);
    uint64_t v27 = (const void *)FigCFDictionaryGetValue();
    FigCFDictionaryGetBooleanIfPresent();
    if (v26)
    {
      *(unsigned char *)(DerivedStorage + 3056) = 0;
      uint64_t v28 = *(const void **)(DerivedStorage + 3064);
      *(void *)(DerivedStorage + 3064) = v27;
      if (v27) {
        CFRetain(v27);
      }
      if (v28) {
        CFRelease(v28);
      }
      if (v36 == OS_LOG_TYPE_DEFAULT)
      {
        if (dword_1E9350FC0)
        {
          int v35 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        MEMORY[0x19970E930](*(void *)(DerivedStorage + 3048));
        piqca_postRendererPreparationCompletedIfPreviouslyRequestedAndRecordNewRequest(a1, 0, 0);
        return 0;
      }
      if (dword_1E9350FC0)
      {
        int v35 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 3048));
    return 0;
  }
  if (!CFEqual(@"ImageQueueGauge", a2)) {
    return 4294954512;
  }
  CFBooleanRef v30 = *(const __CFBoolean **)(DerivedStorage + 3080);
  if (!v30 || v30 == a3)
  {
    if (v30)
    {
      CFRelease(v30);
      *(void *)(DerivedStorage + 3080) = 0;
    }
    if (a3) {
      a3 = (const __CFBoolean *)CFRetain(a3);
    }
    *(void *)(DerivedStorage + 3080) = a3;
    FigImageQueueGetSafeDisplayDuration(a1, (uint64_t)&v33);
    return FigImageQueueGaugeSetSafeDisplayDuration((uint64_t)a3, &v33);
  }
  else
  {
    int v35 = 0;
    os_log_type_t v36 = OS_LOG_TYPE_DEFAULT;
    uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return FigSignalErrorAt();
  }
}

uint64_t FigCRABSScheduledIOCreate(const void *a1, uint64_t a2, void *a3)
{
  FigScheduledIOGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5) {
    return v5;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)uint64_t DerivedStorage = CFRetain(a1);
  *(void *)(DerivedStorage + 24) = 0;
  *(void *)(DerivedStorage + 32) = DerivedStorage + 24;
  uint64_t v7 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 16) = v7;
  if (v7)
  {
    uint64_t v8 = 0;
    *a3 = 0;
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
    CFRelease(*(CFTypeRef *)DerivedStorage);
    CFRelease(0);
  }
  return v8;
}

uint64_t figVideoRenderPipelineCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (DerivedStorage)
  {
    CMTimeEpoch v9 = DerivedStorage;
    if (!*DerivedStorage)
    {
      if (CFEqual(@"SourceSampleBufferQueue", a2))
      {
        *a4 = (CFDictionaryRef)*((void *)v9 + 1);
        int v11 = (const void *)*((void *)v9 + 1);
        if (!v11) {
          goto LABEL_12;
        }
        goto LABEL_11;
      }
      if (CFEqual(@"Timebase", a2))
      {
        *a4 = (CFDictionaryRef)*((void *)v9 + 15);
        int v11 = (const void *)*((void *)v9 + 15);
        if (!v11)
        {
LABEL_12:
          uint64_t v12 = 0;
          goto LABEL_13;
        }
LABEL_11:
        CFRetain(v11);
        goto LABEL_12;
      }
      if (CFEqual(@"FigImageQueueArray", a2))
      {
        figVideoRenderPipelineCopyVideoImageQueueArray(a1, a4, 0);
        goto LABEL_12;
      }
      if (CFEqual(@"PerformanceDictionary", a2))
      {
        uint64_t NonJerkyStopTime = videopipelineCopyPerformanceDictionary(a1);
LABEL_32:
        uint64_t v12 = NonJerkyStopTime;
        goto LABEL_13;
      }
      if (CFEqual(@"NextNonJerkyStopTime", a2))
      {
        uint64_t NonJerkyStopTime = videopipelineCopyNextNonJerkyStopTime(a1, (uint64_t)a3, (uint64_t)a4);
        goto LABEL_32;
      }
      if (CFEqual(@"CachedTimeRange", a2))
      {
        CFArrayRef v14 = (const __CFArray *)*((void *)v9 + 5);
        if (v14 && CFArrayGetCount(v14) == 1)
        {
          CFURLRef ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v9 + 5), 0);
          int v16 = kFigImageQueueProperty_CachedTimeRange;
LABEL_30:
          uint64_t NonJerkyStopTime = FigImageQueueCopyProperty((uint64_t)ValueAtIndex, (uint64_t)*v16, (uint64_t)a3, (uint64_t)a4);
          goto LABEL_32;
        }
        goto LABEL_31;
      }
      if (CFEqual(@"CachedVideoFrames", a2))
      {
        CFArrayRef v17 = (const __CFArray *)*((void *)v9 + 5);
        if (v17 && CFArrayGetCount(v17) == 1)
        {
          CFURLRef ValueAtIndex = CFArrayGetValueAtIndex(*((CFArrayRef *)v9 + 5), 0);
          int v16 = kFigImageQueueProperty_CachedVideoFrames;
          goto LABEL_30;
        }
LABEL_31:
        uint64_t NonJerkyStopTime = FigSignalErrorAt();
        goto LABEL_32;
      }
      if (CFEqual(@"EndPresentationTimeForQueuedSamples", a2))
      {
        memset(&v36, 0, sizeof(v36));
        CMBufferQueueGetEndPresentationTimeStamp(&v36, *((CMBufferQueueRef *)v9 + 1));
        CMTime time = v36;
        CFDictionaryRef v18 = CMTimeCopyAsDictionary(&time, a3);
LABEL_35:
        uint64_t v12 = 0;
        *a4 = v18;
        goto LABEL_13;
      }
      if (CFEqual(@"CurrentVideoFrameRate", a2))
      {
        figVideoRenderPipelineCopyVideoImageQueueArray(a1, &cf, 0);
        if (cf)
        {
          CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
          if (Count >= 1)
          {
            CFIndex v20 = Count;
            CFNumberRef v21 = 0;
            for (CFIndex i = 0; i != v20; ++i)
            {
              v36.CMTimeValue value = 0;
              CFTypeID v23 = CFArrayGetValueAtIndex((CFArrayRef)cf, i);
              uint64_t v12 = FigImageQueueCopyProperty((uint64_t)v23, @"FigImageQueueProperty_CurrentFrameRate", (uint64_t)a3, (uint64_t)&v36);
              CMTimeValue value = (const void *)v36.value;
              if (!v12)
              {
                float valuePtr = 0.0;
                LODWORD(time.value) = 0;
                if (v36.value) {
                  CFNumberGetValue((CFNumberRef)v36.value, kCFNumberFloat32Type, &time);
                }
                if (v21) {
                  CFNumberGetValue(v21, kCFNumberFloat32Type, &valuePtr);
                }
                if (*(float *)&time.value <= valuePtr)
                {
                  CMTimeValue v25 = (CMTimeValue)v21;
                }
                else
                {
                  CMTimeValue v25 = v36.value;
                  if (v36.value) {
                    CFRetain((CFTypeRef)v36.value);
                  }
                  if (v21) {
                    CFRelease(v21);
                  }
                }
                CMTimeValue value = (const void *)v36.value;
                CFNumberRef v21 = (const __CFNumber *)v25;
              }
              if (value) {
                CFRelease(value);
              }
            }
            if (v21)
            {
              uint64_t v12 = 0;
              *a4 = v21;
            }
            goto LABEL_13;
          }
LABEL_62:
          uint64_t v12 = 4294954513;
          goto LABEL_13;
        }
        return 4294954513;
      }
      if (CFEqual(@"VideoEnqueueResetsSystemSleepTimer", a2))
      {
        figVideoRenderPipelineCopyVideoImageQueueArray(a1, &cf, 0);
        if (cf)
        {
          if (CFArrayGetCount((CFArrayRef)cf) >= 1)
          {
            CFURLRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, 0);
            int v16 = kFigImageQueueProperty_EnqueueResetsSystemSleepTimer;
            goto LABEL_30;
          }
          goto LABEL_62;
        }
        return 4294954513;
      }
      if (CFEqual(@"ObeyEmptyMediaMarkers", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_ObeyEmptyMediaMarkers;
        goto LABEL_93;
      }
      if (CFEqual(@"EndPresentationTimeForDecodedSamples", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_EndPresentationTimeForDecodedSamples;
        goto LABEL_93;
      }
      if (CFEqual(@"RenderEmptyMedia", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_RenderEmptyMedia;
        goto LABEL_93;
      }
      if (CFEqual(@"OutputPixelBufferPool", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_OutputPixelBufferPool;
        goto LABEL_93;
      }
      if (CFEqual(@"FieldMode", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_FieldMode;
        goto LABEL_93;
      }
      if (CFEqual(@"AllowVideoQualityOfServiceAdjustments", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_AllowVideoQualityOfServiceAdjustments;
        goto LABEL_93;
      }
      if (CFEqual(@"VideoQualityOfServiceTier", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_QualityOfServiceTier;
        goto LABEL_93;
      }
      if (CFEqual(@"VideoDecoderUsage", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_DecoderUsage;
        goto LABEL_93;
      }
      if (CFEqual(@"VideoDecoderPriority", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_DecoderPriority;
        goto LABEL_93;
      }
      if (CFEqual(@"VideoDecoderThreadCount", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_DecoderThreadCount;
        goto LABEL_93;
      }
      if (CFEqual(@"SupportsSavingFrames", a2))
      {
        uint64_t v28 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
        uint64_t v29 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
        BOOL v30 = *((void *)v9 + 2) == 0;
        goto LABEL_96;
      }
      if (CFEqual(@"ForceFullPowerDecode", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_ForceFullPowerDecode;
      }
      else if (CFEqual(@"EnableIOFenceDecode", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_EnableIOFenceDecode;
      }
      else if (CFEqual(@"EnhancementFilterOptions", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_EnhancementFilterOptions;
      }
      else if (CFEqual(@"ColorPrimaries", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_ColorPrimaries;
      }
      else if (CFEqual(@"TransferFunction", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_TransferFunction;
      }
      else if (CFEqual(@"YCbCrMatrix", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_YCbCrMatrix;
      }
      else if (CFEqual(@"PreserveSyncFrames", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_PreserveSyncFrames;
      }
      else if (CFEqual(@"PlaybackSessionID", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_PlaybackSessionID;
      }
      else if (CFEqual(@"PropagatePerFrameHDRDisplayMetadata", a2))
      {
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_PropagatePerFrameHDRDisplayMetadata;
      }
      else
      {
        if (!CFEqual(@"HDRCrossTalker", a2))
        {
          if (CFEqual(@"VetoFigReadCacheUsage", a2))
          {
            uint64_t v28 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
            int v31 = v9[136];
          }
          else
          {
            if (CFEqual(@"Suspended", a2))
            {
              uint64_t v32 = *((void *)v9 + 2);
              if (v32)
              {
                v36.CMTimeValue value = 0;
                uint64_t v12 = VMC2CopyProperty(v32, @"IsRunning", a3, (CFDictionaryRef *)&v36);
                if (!v12)
                {
                  long long v33 = (const void *)(v36.value == *MEMORY[0x1E4F1CFC8] ? *MEMORY[0x1E4F1CFD0] : *MEMORY[0x1E4F1CFC8]);
                  *a4 = (CFDictionaryRef)CFRetain(v33);
                  if (v36.value) {
                    CFRelease((CFTypeRef)v36.value);
                  }
                }
                goto LABEL_13;
              }
              goto LABEL_12;
            }
            if (!CFEqual(@"UsingAV1FilmGrainDeferMode", a2))
            {
              uint64_t v12 = 4294954446;
LABEL_13:
              if (cf) {
                CFRelease(cf);
              }
              return v12;
            }
            uint64_t v28 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
            int v31 = v9[145];
          }
          uint64_t v29 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
          BOOL v30 = v31 == 0;
LABEL_96:
          if (v30) {
            uint64_t v28 = v29;
          }
          CFDictionaryRef v18 = (const __CFDictionary *)CFRetain(*v28);
          goto LABEL_35;
        }
        uint64_t v26 = *((void *)v9 + 2);
        if (!v26) {
          goto LABEL_12;
        }
        uint64_t v27 = kVideoMediaConverter2Property_HDRCrossTalker;
      }
LABEL_93:
      uint64_t NonJerkyStopTime = VMC2CopyProperty(v26, *v27, a3, a4);
      goto LABEL_32;
    }
  }

  return FigSignalErrorAt();
}

void videopipelineSetTimebase(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 120))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CFRelease(*(CFTypeRef *)(DerivedStorage + 120));
  }
  *(void *)(DerivedStorage + 120) = a2;
  if (a2)
  {
    CFRetain(a2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  FigImageQueueArraySetProperty();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = *(void *)(DerivedStorage + 16);
    if (v4) {
      VMC2SetTimebase(v4, *(const void **)(DerivedStorage + 120));
    }
  }

  videopipelineUpdateVideoPlaybackStateForClient();
}

uint64_t VMC2SetTimebase(uint64_t a1, const void *a2)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    MEMORY[0x19970E910](*(void *)(a1 + 72));
    MEMORY[0x19970E910](*(void *)(a1 + 576));
    uint64_t v5 = *(const void **)(a1 + 584);
    *(void *)(a1 + 584) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = *(void *)(a1 + 584);
    if (v6)
    {
      uint64_t v6 = *(void *)(a1 + 600);
      if (v6) {
        LOBYTE(v6) = *(unsigned char *)(a1 + 624) != 0;
      }
    }
    *(unsigned char *)(a1 + 625) = v6;
    MEMORY[0x19970E930](*(void *)(a1 + 576));
    MEMORY[0x19970E930](*(void *)(a1 + 72));
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t EditMentorNewWithChildAudioMentor(void *a1, const void *a2, void *a3)
{
  return editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(a1, 0, 0, 0, 0, a2, 0, a3);
}

uint64_t VideoMentorNew(const void *a1, const void *a2, const void *a3, const __CFDictionary *a4, void *a5)
{
  CMTimeRange values = @"com.apple.coremedia.videomentor";
  if (VideoMentorNew_onceToken == -1)
  {
    if (!a1) {
      goto LABEL_28;
    }
  }
  else
  {
    dispatch_once_f(&VideoMentorNew_onceToken, 0, (dispatch_function_t)videoMentorRegisterCFTypes);
    if (!a1) {
      goto LABEL_28;
    }
  }
  if (a2)
  {
    if (a3)
    {
      if (a5)
      {
        CFTypeID v10 = malloc_type_calloc(0x3C0uLL, 1uLL, 0xFB4FCBA0uLL);
        if (v10)
        {
          int v11 = v10;
          v10[1] = CFRetain(a1);
          v11[2] = CFRetain(a2);
          v11[3] = CFRetain(a3);
          *((unsigned char *)v11 + 41) = 0;
          if (a4)
          {
            uint64_t v12 = (const void *)*MEMORY[0x1E4F1CFD0];
            if (v12 == CFDictionaryGetValue(a4, @"SpeculativelySaveFrames")) {
              *((unsigned char *)v11 + 549) = 1;
            }
            if (_os_feature_enabled_impl()) {
              BOOL v13 = v12 == CFDictionaryGetValue(a4, @"OptimizeSampleCursorIPCForPower");
            }
            else {
              BOOL v13 = 0;
            }
            *((unsigned char *)v11 + 41) = v13;
            Boolean Value = CFDictionaryGetValue(a4, @"SampleBufferCryptor");
            v11[6] = Value;
            if (Value) {
              CFRetain(Value);
            }
          }
          FigCFDictionaryGetInt32IfPresent();
          v11[11] = FigSemaphoreCreate();
          v11[12] = FigSimpleMutexCreate();
          v11[10] = FigSimpleMutexCreate();
          v11[33] = FigSimpleMutexCreate();
          v11[15] = FigSemaphoreCreate();
          *((_DWORD *)v11 + 11) = 0;
          v11[69] = 0;
          *((_DWORD *)v11 + 92) = 1065353216;
          fig_note_initialize_category_with_default_work_cf();
          fig_note_initialize_category_with_default_work_cf();
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterAddListener();
          uint64_t v15 = v11[3];
          uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v16) {
            uint64_t v17 = v16;
          }
          else {
            uint64_t v17 = 0;
          }
          CFDictionaryRef v18 = *(unsigned int (**)(uint64_t, uint64_t (*)(), void *, void *))(v17 + 32);
          if (!v18 || v18(v15, videoMentorLowWaterTrigger, v11, v11 + 4))
          {
            uint64_t v20 = FigSignalErrorAt();
          }
          else
          {
            *((unsigned char *)v11 + 40) = 1;
            *((_DWORD *)v11 + 136) = -2;
            *((_DWORD *)v11 + 28) = 0;
            CFDictionaryRef v19 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21EA8], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            uint64_t v20 = FigThreadCreate();
            if (!v20)
            {
              *a5 = v11;
              int v11 = 0;
            }
            if (v19) {
              CFRelease(v19);
            }
          }
          VideoMentorDispose(v11);
          return v20;
        }
      }
    }
  }
LABEL_28:

  return FigSignalErrorAt();
}

uint64_t videoMentorLowWaterTrigger()
{
  return FigSemaphoreSignal();
}

uint64_t videoMentorThread(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a1 + 41)) {
    FigFormatReaderXPCRemoteEnsureEfficientIPCFromCurrentThread(*(unsigned int *)(a1 + 44), &cf);
  }
  if (*(_DWORD *)(a1 + 112) == 5) {
    goto LABEL_4;
  }
  uint64_t v156 = (long long *)(a1 + 176);
  uint64_t v155 = (long long *)(a1 + 208);
  int v143 = (uint64_t *)(a1 + 744);
  v139 = (uint64_t **)(a1 + 552);
  uint64_t v148 = a1 + 584;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  keCGFloat y = (const __CFString *)*MEMORY[0x1E4F1F2C0];
  uint64_t v142 = *MEMORY[0x1E4F1F340];
  uint64_t v141 = *MEMORY[0x1E4F1F348];
  CFStringRef v144 = (const __CFString *)*MEMORY[0x1E4F1F2A0];
  CFTypeRef v146 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  CFStringRef v140 = (const __CFString *)*MEMORY[0x1E4F1F260];
  long long v158 = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v157 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  do
  {
    MEMORY[0x19970E910](*(void *)(a1 + 96));
    int v5 = *(_DWORD *)(a1 + 112);
    uint64_t v6 = *(const void **)(a1 + 128);
    long long v175 = *(_OWORD *)(a1 + 136);
    CMTimeEpoch v176 = *(void *)(a1 + 152);
    int v7 = *(_DWORD *)(a1 + 160);
    CFTypeRef v161 = v6;
    CFTypeRef v162 = *(CFTypeRef *)(a1 + 168);
    long long v173 = *v156;
    CMTimeEpoch v174 = *(void *)(a1 + 192);
    *(void *)(a1 + 192) = v157;
    *uint64_t v156 = v158;
    CFTypeRef v163 = *(CFTypeRef *)(a1 + 200);
    long long v8 = *v155;
    CMTimeEpoch v172 = *(void *)(a1 + 224);
    long long v171 = v8;
    *(void *)(a1 + 224) = v157;
    *uint64_t v155 = v158;
    int v9 = *(_DWORD *)(a1 + 232);
    int v10 = *(_DWORD *)(a1 + 236);
    int v12 = *(_DWORD *)(a1 + 240);
    int v11 = *(_DWORD *)(a1 + 244);
    int v13 = *(unsigned __int8 *)(a1 + 248);
    float v14 = *(float *)(a1 + 252);
    float v15 = *(float *)(a1 + 256);
    int v16 = *(_DWORD *)(a1 + 260);
    int v17 = *(unsigned __int8 *)(a1 + 372);
    int v18 = *(unsigned __int8 *)(a1 + 373);
    int v19 = *(unsigned __int8 *)(a1 + 374);
    unsigned __int8 v20 = *(unsigned char *)(a1 + 377);
    unsigned __int8 v21 = *(unsigned char *)(a1 + 378);
    uint64_t v160 = *(opaqueCMSampleBuffer **)(a1 + 456);
    CFTypeRef v159 = *(CFTypeRef *)(a1 + 464);
    CFTypeRef v170 = v159;
    char v22 = *(unsigned char *)(a1 + 375);
    long long v23 = *(_OWORD *)(a1 + 428);
    CMTimeEpoch v169 = *(void *)(a1 + 444);
    long long v168 = v23;
    char v24 = *(unsigned char *)(a1 + 376);
    CFTypeRef v165 = *(CFTypeRef *)(a1 + 472);
    CFTypeRef v164 = *(CFTypeRef *)(a1 + 480);
    *(_DWORD *)(a1 + 488) = *(_DWORD *)(a1 + 452);
    *(unsigned char *)(a1 + 492) = 0;
    *(void *)(a1 + 128) = 0;
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 200) = 0;
    *(unsigned char *)(a1 + 520) = 0;
    *(unsigned char *)(a1 + 116) = 0;
    *(_DWORD *)(a1 + 484) = 0;
    *(_OWORD *)(a1 + 452) = 0u;
    *(_OWORD *)(a1 + 468) = 0u;
    if (!v5)
    {
      if (*(unsigned char *)(a1 + 117))
      {
        *(unsigned char *)(a1 + 117) = 0;
        FigSemaphoreSignal();
      }
      FigMemoryBarrier();
      MEMORY[0x19970E930](*(void *)(a1 + 96));
      uint64_t v26 = v164;
      if (v159)
      {
        CFRelease(v159);
        CFTypeRef v170 = 0;
      }
      if (v165) {
        audioMentorEnqueueBufferConsumedMarker(a1, v165);
      }
      goto LABEL_271;
    }
    int v149 = v7;
    int v150 = v13;
    int v152 = v17;
    int v153 = v19;
    int v154 = v11;
    int v151 = v18;
    FigMemoryBarrier();
    MEMORY[0x19970E930](*(void *)(a1 + 96));
    int v25 = v5 - 1;
    uint64_t v26 = v164;
    switch(v25)
    {
      case 0:
        int v27 = 0;
        v167.CMTimeEpoch epoch = v176;
        v166.CMTimeEpoch epoch = v169;
        ++*(_DWORD *)(a1 + 916);
        *(unsigned char *)(a1 + 492) = *(_DWORD *)(a1 + 488) != 0;
        *(_OWORD *)&v167.CMTimeValue value = v175;
        *(_OWORD *)&v166.CMTimeValue value = v168;
        int v186 = 0;
        uint64_t v187 = v161;
        unsigned __int8 v185 = 1;
        char v184 = 0;
        uint64_t v183 = 0;
        *(_DWORD *)(a1 + 496) = 2;
        if (v161) {
          goto LABEL_15;
        }
        *(_OWORD *)&time1.duration.CMTimeValue value = v175;
        time1.duration.CMTimeEpoch epoch = v176;
        int CursorForPresentationTimeStamp = audioMentorCreateCursorForPresentationTimeStamp(a1, v152, (long long *)&time1.duration.value, (uint64_t)&v187);
        if (CursorForPresentationTimeStamp)
        {
          int CursorPTSRange = CursorForPresentationTimeStamp;
          uint64_t v40 = 0;
          int v27 = 0;
          goto LABEL_245;
        }
        int v27 = 1;
LABEL_15:
        if ((v167.flags & 0x1D) == 1) {
          goto LABEL_16;
        }
        int v35 = v187;
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v36) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0;
        }
        long long v44 = *(uint64_t (**)(const void *, CMTime *))(v37 + 40);
        if (!v44)
        {
LABEL_233:
          int CursorPTSRange = -12782;
LABEL_234:
          FigSignalErrorAt();
          goto LABEL_244;
        }
        int CursorPTSRange = v44(v35, &v167);
        if (CursorPTSRange) {
          goto LABEL_234;
        }
        if ((v167.flags & 0x1D) != 1)
        {
LABEL_49:
          int NodeForCursor = FigSignalErrorAt();
          goto LABEL_50;
        }
LABEL_16:
        if (v149 != 2) {
          goto LABEL_116;
        }
        *(_OWORD *)&v182.CMTimeValue value = v158;
        v182.CMTimeEpoch epoch = v157;
        uint64_t v28 = v187;
        uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v29) {
          uint64_t v30 = v29;
        }
        else {
          uint64_t v30 = 0;
        }
        uint64_t v46 = *(uint64_t (**)(const void *, CMTime *))(v30 + 40);
        if (!v46) {
          goto LABEL_243;
        }
        int CursorPTSRange = v46(v28, &v182);
        if (CursorPTSRange) {
          goto LABEL_244;
        }
        time1.duration = v182;
        time2.start = v167;
        if (CMTimeCompare(&time1.duration, &time2.start))
        {
          *(_OWORD *)&values.CMTimeValue value = v158;
          values.CMTimeEpoch epoch = v157;
          *(_OWORD *)&rhs.CMTimeValue value = v158;
          rhs.CMTimeEpoch epoch = v157;
          long long v47 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
          *(_OWORD *)&time1.duration.CMTimeValue value = *MEMORY[0x1E4F1FA20];
          *(_OWORD *)&time1.duration.CMTimeEpoch epoch = v47;
          *(_OWORD *)&time1.presentationTimeStamp.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
          uint64_t v48 = v187;
          uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v49) {
            uint64_t v50 = v49;
          }
          else {
            uint64_t v50 = 0;
          }
          int v103 = *(uint64_t (**)(const void *, CMTime *))(v50 + 40);
          if (!v103) {
            goto LABEL_243;
          }
          int CursorPTSRange = v103(v48, &values);
          if (!CursorPTSRange)
          {
            BOOL v104 = v187;
            uint64_t v105 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v105) {
              uint64_t v106 = v105;
            }
            else {
              uint64_t v106 = 0;
            }
            uint64_t v133 = *(uint64_t (**)(const void *, uint64_t, uint64_t *))(v106 + 176);
            if (v133)
            {
              int CursorPTSRange = v133(v104, 1, &v183);
              if (!CursorPTSRange)
              {
                int CursorPTSRange = videoMentorGetCursorPTSRange(v187, &time1);
                if (!CursorPTSRange)
                {
                  *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)&time1.duration.value;
                  *(_OWORD *)&time2.start.CMTimeEpoch epoch = *(_OWORD *)&time1.duration.epoch;
                  *(_OWORD *)&time2.duration.CMTimeScale timescale = *(_OWORD *)&time1.presentationTimeStamp.timescale;
                  CMTimeRangeGetEnd(&rhs, &time2);
                  time2.start = values;
                  CMTime v178 = rhs;
                  videoMentorThreadForwardPlayback(a1, 0, &time2.start, 0, &v178, 2, v154, 0, 0.0, 0.0, 0, v152, v151, 0, 0, 0, 1, (CFArrayRef *)&v170, v165,
                    0,
                    0,
                    v164);
                  uint64_t v40 = 0;
                  ++*(_DWORD *)(a1 + 920);
                  goto LABEL_263;
                }
              }
              goto LABEL_244;
            }
LABEL_243:
            int CursorPTSRange = -12782;
          }
LABEL_244:
          uint64_t v40 = 0;
          goto LABEL_245;
        }
        uint64_t v26 = v164;
LABEL_116:
        if (*MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        if (v159)
        {
          if (CFArrayGetCount((CFArrayRef)v159) >= 1
            && ((uint64_t v76 = v187, (v77 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v78 = 0) : (v78 = v77),
                (char v79 = *(unsigned int (**)(const void *, const void **))(v78 + 8)) != 0 && !v79(v76, &v186)))
          {
            CachedVideoFrameForCursor = videoMentorGetCachedVideoFrameForCursor((void *)a1, v186, (CFArrayRef)v159, (uint64_t)v26);
            uint64_t v40 = CachedVideoFrameForCursor;
            if (CachedVideoFrameForCursor)
            {
              CFRetain(CachedVideoFrameForCursor);
              uint64_t v100 = v187;
              uint64_t v187 = v186;
              if (v186) {
                CFRetain(v186);
              }
              if (v100) {
                CFRelease(v100);
              }
            }
            if (v186)
            {
              CFRelease(v186);
              int v186 = 0;
            }
          }
          else
          {
            uint64_t v40 = 0;
          }
          CFRelease(v159);
          CFTypeRef v170 = 0;
        }
        else
        {
          uint64_t v40 = 0;
        }
        int started = videoMentorDependencyStateStartNewOrder((void *)a1, v143);
        if (started) {
          goto LABEL_130;
        }
        LOBYTE(v178.value) = 0;
        time1.duration = v167;
        time2.start = v167;
        CMTime v182 = v167;
        CMTime values = v166;
        int started = videoMentorDependencyStateCopyCursorForDecodeWalk(a1, (uint64_t)v143, 1, (uint64_t)v164, v154, (uint64_t)&time1, &time2.start, (long long *)&v182.value, 0, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], v187, 0, &values.value, &v178, &v184, (char *)&v185, 0,
                    &v186);
        if (started) {
          goto LABEL_130;
        }
        BOOL v81 = LOBYTE(v178.value) == 0;
        if (v184)
        {
          memset(&time1, 0, 24);
          memset(&time2, 0, 24);
          memset(&v182, 0, sizeof(v182));
          uint64_t v82 = v187;
          uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v83) {
            uint64_t v84 = v83;
          }
          else {
            uint64_t v84 = 0;
          }
          unint64_t v87 = *(uint64_t (**)(const void *, CMSampleTimingInfo *))(v84 + 40);
          if (!v87)
          {
            int CursorPTSRange = -12782;
            goto LABEL_147;
          }
          int CursorPTSRange = v87(v82, &time1);
          if (CursorPTSRange) {
            goto LABEL_147;
          }
          if ((time1.duration.flags & 0x1D) != 1) {
            goto LABEL_297;
          }
          uint64_t v88 = v187;
          uint64_t v89 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v89) {
            uint64_t v90 = v89;
          }
          else {
            uint64_t v90 = 0;
          }
          int v109 = *(uint64_t (**)(const void *, CMTimeRange *))(v90 + 56);
          if (v109)
          {
            int v110 = v109(v88, &time2);
            if (v110)
            {
              int CursorPTSRange = v110;
              if (v110 == -12782) {
                goto LABEL_185;
              }
LABEL_147:
              FigSignalErrorAt();
LABEL_245:
              int v112 = v165;
              goto LABEL_246;
            }
            if ((time2.start.flags & 0x1D) != 1)
            {
LABEL_297:
              int started = FigSignalErrorAt();
LABEL_130:
              int CursorPTSRange = started;
              goto LABEL_245;
            }
          }
          else
          {
LABEL_185:
            *(_OWORD *)&time2.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
            time2.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          }
          CMTime values = time1.duration;
          CMTime rhs = time2.start;
          CMTimeAdd(&v182, &values, &rhs);
          MEMORY[0x19970E910](*(void *)(a1 + 80));
          BOOL v111 = *(void (**)(void, CFTypeRef, void, CMSampleTimingInfo *, CMTime *))(a1 + 64);
          if (v111) {
            v111(*(void *)(a1 + 72), v164, 0, &time1, &v182);
          }
          MEMORY[0x19970E930](*(void *)(a1 + 80));
          CMTime values = time1.duration;
          CMTime rhs = v182;
          videoMentorEnqueueTimestampIntervalMarker(a1);
LABEL_189:
          int CursorPTSRange = 0;
          goto LABEL_190;
        }
        CMTime v182 = v167;
        uint64_t v85 = a1 + 552;
        break;
      case 1:
        *(_OWORD *)&time1.duration.CMTimeValue value = v173;
        time1.duration.CMTimeEpoch epoch = v174;
        *(_OWORD *)&time2.start.CMTimeValue value = v171;
        time2.start.CMTimeEpoch epoch = v172;
        videoMentorThreadForwardPlayback(a1, v162, &time1.duration, v163, &time2.start, v12, v154, v150, v14, v15, v16, v152, v151, v153, v20, v21, 0, (CFArrayRef *)&v170, v165,
          v22,
          v24,
          v164);
        goto LABEL_271;
      case 2:
        *(_OWORD *)&time1.duration.CMTimeValue value = v173;
        time1.duration.CMTimeEpoch epoch = v174;
        *(_OWORD *)&time2.start.CMTimeValue value = v171;
        time2.start.CMTimeEpoch epoch = v172;
        videoMentorThreadReversePlayback(a1, v162, &time1.duration, v163, &time2.start, v9, v10, v12, v154, v150, v152, v151, v153, (CFArrayRef *)&v170, v165, v164);
        goto LABEL_271;
      case 3:
        if (v159)
        {
          CFRelease(v159);
          CFTypeRef v170 = 0;
        }
        v182.CMTimeValue value = 0;
        *(_DWORD *)(a1 + 496) = v12;
        *(unsigned char *)(a1 + 492) = *(_DWORD *)(a1 + 488) != 0;
        int v31 = v165;
        if ((v12 & 0xFFFFFFFD) == 1 && *MEMORY[0x1E4F1EBA8] == 1) {
          kdebug_trace();
        }
        *(_DWORD *)(a1 + 524) = 0;
        uint64_t v32 = *(const void **)(a1 + 536);
        if (v32)
        {
          CFRelease(v32);
          *(void *)(a1 + 536) = 0;
        }
        *(_OWORD *)(a1 + 560) = v158;
        *(void *)(a1 + 576) = v157;
        *(void *)(a1 + 680) = 0;
        videoMentorThrottlingStateStartNewOrder(v148, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], 0);
        if ((v154 - 3) >= 0xFFFFFFFE)
        {
          uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v33) {
            uint64_t v34 = v33;
          }
          else {
            uint64_t v34 = 0;
          }
          if (*(void *)(v34 + 72))
          {
            uint64_t v41 = *(void *)(a1 + 24);
            uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v43 = v42 ? v42 : 0;
            long long v51 = *(void (**)(uint64_t))(v43 + 72);
            if (v51) {
              v51(v41);
            }
          }
          uint64_t v52 = *(const void **)(a1 + 528);
          if (v52)
          {
            CFRelease(v52);
            *(void *)(a1 + 528) = 0;
          }
          *(_DWORD *)(a1 + 544) = -2;
          ++*(_DWORD *)(a1 + 504);
          values.CMTimeValue value = (CMTimeValue)CFNumberCreate(allocator, kCFNumberIntType, (const void *)(a1 + 504));
          CFDictionaryRef v53 = CFDictionaryCreate(allocator, MEMORY[0x1E4F1F328], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          *(_OWORD *)&time1.duration.CMTimeValue value = *MEMORY[0x1E4F1FA48];
          time1.duration.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          *(_OWORD *)&time1.presentationTimeStamp.CMTimeValue value = v158;
          time1.presentationTimeStamp.CMTimeEpoch epoch = v157;
          *(_OWORD *)&time1.decodeTimeStamp.CMTimeValue value = v158;
          time1.decodeTimeStamp.CMTimeEpoch epoch = v157;
          if (v160)
          {
            CMSampleBufferGetOutputPresentationTimeStamp(&time2.start, v160);
            time1.CMTime presentationTimeStamp = time2.start;
          }
          if (CMSampleBufferCreate(allocator, 0, 1u, 0, 0, 0, 0, 1, &time1, 0, 0, (CMSampleBufferRef *)&v182))
          {
            goto LABEL_95;
          }
          CMSetAttachment((CMAttachmentBearerRef)v182.value, key, (CFTypeRef)values.value, 1u);
          uint64_t v54 = *(void *)(a1 + 24);
          uint64_t v55 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v55) {
            uint64_t v56 = v55;
          }
          else {
            uint64_t v56 = 0;
          }
          CFTypeID v57 = *(void (**)(uint64_t, uint64_t, CFDictionaryRef, void))(v56 + 64);
          if (v57) {
            v57(v54, v142, v53, 0);
          }
          uint64_t v58 = *(void *)(a1 + 24);
          uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v59) {
            uint64_t v60 = v59;
          }
          else {
            uint64_t v60 = 0;
          }
          uint64_t v61 = *(void (**)(uint64_t, uint64_t, void, void))(v60 + 64);
          if (v61) {
            v61(v58, v141, 0, 0);
          }
          if (values.value) {
            CFRelease((CFTypeRef)values.value);
          }
          if (v53) {
            CFRelease(v53);
          }
          uint64_t v62 = *(void *)(a1 + 24);
          CMTimeValue value = v182.value;
          uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v65 = v64 ? v64 : 0;
          uint64_t v66 = *(unsigned int (**)(uint64_t, CMTimeValue))(v65 + 8);
          if (!v66 || v66(v62, value)) {
            goto LABEL_95;
          }
        }
        if (v160
          && (CMGetAttachment(v160, v144, 0) == v146
           && (CMGetAttachment(v160, v140, 0),
               CMSampleBufferGetOutputPresentationTimeStamp(&time1.duration, v160),
               videoMentorEnqueueTimestampIntervalMarker(a1))
           || ((uint64_t v67 = *(void *)(a1 + 24), (v68 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
             ? (uint64_t v69 = 0)
             : (uint64_t v69 = v68),
               (int64_t v70 = *(unsigned int (**)(uint64_t, opaqueCMSampleBuffer *))(v69 + 8)) == 0
            || v70(v67, v160))))
        {
LABEL_95:
          int v71 = FigSignalErrorAt();
        }
        else if (v165)
        {
          int v71 = audioMentorEnqueueBufferConsumedMarker(a1, v165);
          int v31 = 0;
        }
        else
        {
          int v71 = 0;
        }
        if (*(unsigned char *)(a1 + 492))
        {
          videoMentorPostCollectorCoherenceConduitNotification(a1);
          *(unsigned char *)(a1 + 492) = 0;
        }
        if (v153 && (v71 + 1) <= 1) {
          videoMentorPostMinAndMaxUpcomingOutputPTS(a1, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8]);
        }
        videoMentorThreadFinishPreroll(a1, 0, v164);
        if (!*(unsigned char *)a1)
        {
          uint64_t v72 = @"MentorStoppingDueToCompletion";
          if (v71) {
            uint64_t v72 = @"MentorStoppingDueToError";
          }
          if (v71 == -1) {
            int v73 = 0;
          }
          else {
            int v73 = v71;
          }
          if (v71 == -1) {
            uint64_t v74 = @"MentorResettingDueToModeSwitch";
          }
          else {
            uint64_t v74 = v72;
          }
          uint64_t v75 = FigMentorNotificationPayloadCreate((uint64_t)v74, v164, v73, *(unsigned __int8 *)(a1 + 520), v31, 0);
          CMNotificationCenterGetDefaultLocalCenter();
          uint64_t v26 = v164;
          CMNotificationCenterPostNotification();
          if (v75) {
            CFRelease(v75);
          }
        }
        videoMentorThrottlingStateFree(v148);
        if (v182.value) {
          CFRelease((CFTypeRef)v182.value);
        }
        goto LABEL_271;
      default:
        goto LABEL_271;
    }
    do
    {
      uint64_t v85 = *(void *)v85;
      if (!v85)
      {
        BOOL v91 = *v139;
        if (*v139)
        {
          uint64_t v92 = *(void *)(a1 + 528);
          if (v92)
          {
            while (1)
            {
              uint64_t v93 = v91[1];
              uint64_t v94 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v94)
              {
                uint64_t v95 = v94;
                if (v92) {
                  goto LABEL_152;
                }
              }
              else
              {
                uint64_t v95 = 0;
                if (v92)
                {
LABEL_152:
                  uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
                  goto LABEL_155;
                }
              }
              uint64_t v96 = 0;
LABEL_155:
              if (v95 != v96
                || (uint64_t v98 = *(uint64_t (**)(uint64_t, uint64_t))(v95 + 32)) == 0
                || v98(v93, v92) != 1)
              {
                long long v97 = *((_OWORD *)v91 + 2);
                *(_OWORD *)&time1.duration.CMTimeValue value = *((_OWORD *)v91 + 1);
                *(_OWORD *)&time1.duration.CMTimeEpoch epoch = v97;
                *(_OWORD *)&time1.presentationTimeStamp.CMTimeScale timescale = *((_OWORD *)v91 + 3);
                CMTimeRangeGetEnd(&v182, (CMTimeRange *)&time1);
                time1.duration = v167;
                if (CMTimeCompare(&v182, &time1.duration) > 0) {
                  goto LABEL_170;
                }
              }
              BOOL v91 = (uint64_t *)*v91;
              if (!v91) {
                break;
              }
              uint64_t v92 = *(void *)(a1 + 528);
            }
          }
          videoMentorResetSavedListAndEnqueueMarker(a1);
        }
LABEL_170:
        uint64_t v101 = v186;
        if (!v186) {
          goto LABEL_189;
        }
        uint64_t v102 = v187;
        if (!v40)
        {
          uint64_t v107 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v107) {
            uint64_t v108 = v107;
          }
          else {
            uint64_t v108 = 0;
          }
          if (v102) {
            uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 16);
          }
          else {
            uint64_t v113 = 0;
          }
          if (v108 == v113 && (uint64_t v132 = *(uint64_t (**)(const void *, const void *))(v108 + 32)) != 0)
          {
            uint64_t v114 = v132(v101, v102);
            if (v114 == 1)
            {
LABEL_237:
              int CursorPTSRange = 0;
LABEL_293:
              videoMentorEnqueueDrainAfterDecodingMarker(a1);
              if (v165) {
                goto LABEL_191;
              }
LABEL_294:
              int v112 = v165;
              goto LABEL_295;
            }
          }
          else
          {
            uint64_t v114 = 0;
          }
          uint64_t v115 = a1 + 744;
          while (1)
          {
            rhs.CMTimeValue value = 0;
            int NodeForCursor = videoMentorDependencyStateGetNodeForCursor((void *)a1, v115, (uint64_t)v186, (uint64_t)v164, 0, &rhs);
            if (NodeForCursor) {
              break;
            }
            CMTimeValue v116 = rhs.value;
            if (!rhs.value) {
              goto LABEL_49;
            }
            if (*(_DWORD *)(rhs.value + 76) == 2)
            {
              BOOL v117 = 0;
              if (v114 && *(unsigned char *)(a1 + 549))
              {
                long long v118 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
                *(_OWORD *)&time1.duration.CMTimeValue value = *MEMORY[0x1E4F1FA20];
                *(_OWORD *)&time1.duration.CMTimeEpoch epoch = v118;
                *(_OWORD *)&time1.presentationTimeStamp.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
                if (videoMentorGetCursorPTSRange(v186, &time1))
                {
                  BOOL v117 = 0;
                }
                else
                {
                  *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)&time1.duration.value;
                  *(_OWORD *)&time2.start.CMTimeEpoch epoch = *(_OWORD *)&time1.duration.epoch;
                  *(_OWORD *)&time2.duration.CMTimeScale timescale = *(_OWORD *)&time1.presentationTimeStamp.timescale;
                  CMTimeRangeGetEnd(&values, &time2);
                  time2.start = v167;
                  BOOL v117 = CMTimeCompare(&values, &time2.start) > 0;
                }
              }
              if (v114) {
                int v120 = 2;
              }
              else {
                int v120 = 3;
              }
              int NodeForCursor = videoMentorThreadGenerateAndEnqueueFrame(a1, v186, v120, v117, v185, 1, 0, v81, v151, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], v164);
              if (NodeForCursor) {
                break;
              }
              LOBYTE(v81) = 0;
              unsigned __int8 v185 = 0;
              int v119 = 1;
            }
            else
            {
              int v119 = 0;
            }
            videoMentorUpdateDecoderState(a1, v116, v119);
            if (!v114) {
              goto LABEL_237;
            }
            int v121 = v186;
            uint64_t v122 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v122) {
              uint64_t v123 = v122;
            }
            else {
              uint64_t v123 = 0;
            }
            char v124 = *(uint64_t (**)(const void *, uint64_t, uint64_t *))(v123 + 168);
            if (!v124) {
              goto LABEL_233;
            }
            int v125 = v124(v121, 1, &v183);
            if (v125)
            {
              int CursorPTSRange = v125;
              goto LABEL_234;
            }
            if (v183 != 1)
            {
              int CursorPTSRange = FigSignalErrorAt();
              goto LABEL_293;
            }
            CMTime v126 = v186;
            double v127 = v187;
            uint64_t v128 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v128) {
              uint64_t v129 = v128;
            }
            else {
              uint64_t v129 = 0;
            }
            if (v127) {
              uint64_t v130 = *(void *)(CMBaseObjectGetVTable() + 16);
            }
            else {
              uint64_t v130 = 0;
            }
            if (v129 == v130 && (uint64_t v131 = *(uint64_t (**)(const void *, const void *))(v129 + 32)) != 0) {
              uint64_t v114 = v131(v126, v127);
            }
            else {
              uint64_t v114 = 0;
            }
            uint64_t v115 = a1 + 744;
            if (v114 == 1) {
              goto LABEL_237;
            }
          }
LABEL_50:
          int CursorPTSRange = NodeForCursor;
          goto LABEL_244;
        }
        int CursorPTSRange = videoMentorThreadResendCachedSampleBuffer(a1, v187, v40, 3, v185, 0, v151, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], v164);
        if (CursorPTSRange) {
          goto LABEL_245;
        }
LABEL_190:
        if (!v165) {
          goto LABEL_294;
        }
        goto LABEL_191;
      }
      long long v86 = *(_OWORD *)(v85 + 32);
      *(_OWORD *)&time1.duration.CMTimeValue value = *(_OWORD *)(v85 + 16);
      *(_OWORD *)&time1.duration.CMTimeEpoch epoch = v86;
      *(_OWORD *)&time1.presentationTimeStamp.CMTimeScale timescale = *(_OWORD *)(v85 + 48);
      time2.start = v182;
    }
    while (!CMTimeRangeContainsTime((CMTimeRange *)&time1, &time2.start));
    int CursorPTSRange = videoMentorThreadGenerateAndEnqueueFrame(a1, *(const void **)(v85 + 8), 3, 2, v185, 1, 0, v81, v151, MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], MEMORY[0x1E4F1F9F8], v164);
    if (CursorPTSRange) {
      goto LABEL_245;
    }
    unsigned __int8 v185 = 0;
    if (!v165) {
      goto LABEL_294;
    }
LABEL_191:
    int v112 = v165;
    if (!CursorPTSRange)
    {
      int CursorPTSRange = audioMentorEnqueueBufferConsumedMarker(a1, v165);
      int v112 = 0;
    }
LABEL_295:
    ++*(_DWORD *)(a1 + 920);
LABEL_246:
    if (*(unsigned char *)(a1 + 492))
    {
      videoMentorPostCollectorCoherenceConduitNotification(a1);
      *(unsigned char *)(a1 + 492) = 0;
    }
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    if (v170)
    {
      CFRelease(v170);
      CFTypeRef v170 = 0;
    }
    if (!*(unsigned char *)a1)
    {
      int v134 = @"MentorStoppingDueToCompletion";
      if (CursorPTSRange) {
        int v134 = @"MentorStoppingDueToError";
      }
      if (CursorPTSRange == -1) {
        int v135 = 0;
      }
      else {
        int v135 = CursorPTSRange;
      }
      if (CursorPTSRange == -1) {
        unsigned int v136 = @"MentorResettingDueToModeSwitch";
      }
      else {
        unsigned int v136 = v134;
      }
      v137 = FigMentorNotificationPayloadCreate((uint64_t)v136, v164, v135, *(unsigned __int8 *)(a1 + 520), v112, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (v137) {
        CFRelease(v137);
      }
    }
LABEL_263:
    if (v27 && v187)
    {
      CFRelease(v187);
      uint64_t v187 = 0;
    }
    if (v186)
    {
      CFRelease(v186);
      int v186 = 0;
    }
    if (v40) {
      CFRelease(v40);
    }
    uint64_t v26 = v164;
LABEL_271:
    *(_OWORD *)(a1 + 380) = v173;
    *(void *)(a1 + 396) = v174;
    *(_OWORD *)(a1 + 404) = v171;
    *(void *)(a1 + 420) = v172;
    if (v161) {
      CFRelease(v161);
    }
    if (v162) {
      CFRelease(v162);
    }
    if (v163) {
      CFRelease(v163);
    }
    if (v160) {
      CFRelease(v160);
    }
    if (v170) {
      CFRelease(v170);
    }
    if (v165) {
      CFRelease(v165);
    }
    if (v26) {
      CFRelease(v26);
    }
    int v138 = *(_DWORD *)(a1 + 112);
    if (v138 == 5) {
      break;
    }
    if (!*(unsigned char *)(a1 + 116))
    {
      do
        FigSemaphoreWaitRelative();
      while (!*(unsigned char *)(a1 + 116));
      int v138 = *(_DWORD *)(a1 + 112);
    }
  }
  while (v138 != 5);
LABEL_4:
  uint64_t v2 = *(const void **)(a1 + 528);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 528) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 536);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 536) = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return 0;
}

void VideoMentorDispose(void *a1)
{
  if (a1)
  {
    VideoMentorInvalidate(a1);
    if (a1[11])
    {
      FigSemaphoreDestroy();
      a1[11] = 0;
    }
    if (a1[12])
    {
      FigSimpleMutexDestroy();
      a1[12] = 0;
    }
    if (a1[10])
    {
      FigSimpleMutexDestroy();
      a1[10] = 0;
    }
    if (a1[33])
    {
      FigSimpleMutexDestroy();
      a1[33] = 0;
    }
    if (a1[15])
    {
      FigSemaphoreDestroy();
      a1[15] = 0;
    }
    uint64_t v2 = (const void *)a1[16];
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = (const void *)a1[21];
    if (v3) {
      CFRelease(v3);
    }
    uint64_t v4 = (const void *)a1[25];
    if (v4) {
      CFRelease(v4);
    }
    int v5 = (const void *)a1[57];
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = (const void *)a1[58];
    if (v6) {
      CFRelease(v6);
    }
    int v7 = (const void *)a1[59];
    if (v7) {
      CFRelease(v7);
    }
    long long v8 = (const void *)a1[60];
    if (v8) {
      CFRelease(v8);
    }
    videoMentorDependencyStateReset((uint64_t)(a1 + 93));
    int v9 = (const void *)a1[1];
    if (v9) {
      CFRelease(v9);
    }
    int v10 = (const void *)a1[2];
    if (v10) {
      CFRelease(v10);
    }
    int v11 = (const void *)a1[3];
    if (v11) {
      CFRelease(v11);
    }
    int v12 = (const void *)a1[6];
    if (v12) {
      CFRelease(v12);
    }
    free(a1);
  }
}

uint64_t EditMentorNewWithChildVideoMentor(void *a1, const void *a2, void *a3)
{
  return editMentorNewWithChildAudioVideoEditOrCallbacksMentorAndSingleEditSegmentOrTrack(0, a1, 0, 0, 0, a2, 0, a3);
}

uint64_t VideoMentorSetTimeRemapCallback(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  a1[7] = a2;
  a1[8] = a3;
  a1[9] = a4;
  MEMORY[0x19970E930](a1[10]);
  return 0;
}

void vmc2DecodeUntilHighWaterMet(uint64_t a1)
{
  int valuePtr = 0;
  CFNumberRef propertyValueOut = 0;
  MEMORY[0x19970E910](*(void *)(a1 + 296));
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  if (!*(unsigned char *)(a1 + 288)) {
    goto LABEL_339;
  }
  int v2 = 0;
  propertyKeCGFloat y = (const __CFString *)*MEMORY[0x1E4F44C70];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v3 = (uint64_t (**)(void))(a1 + 192);
  keCGFloat y = (void *)*MEMORY[0x1E4F1F200];
  double v127 = (void *)*MEMORY[0x1E4F1F208];
  CFTypeRef v140 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  CMTime v126 = (void *)*MEMORY[0x1E4F1F1E0];
  CFStringRef v139 = (const __CFString *)*MEMORY[0x1E4F1F258];
  CFStringRef v124 = (const __CFString *)*MEMORY[0x1E4F1F2A0];
  CFStringRef v138 = (const __CFString *)*MEMORY[0x1E4F1F238];
  CFStringRef v137 = (const __CFString *)*MEMORY[0x1E4F21A30];
  CFStringRef v136 = (const __CFString *)*MEMORY[0x1E4F21A50];
  CFStringRef v135 = (const __CFString *)*MEMORY[0x1E4F21A38];
  int v125 = (void *)*MEMORY[0x1E4F219F8];
  int v150 = (_OWORD *)(a1 + 392);
  uint64_t v123 = (_OWORD *)(a1 + 320);
  int v121 = (_OWORD *)(a1 + 368);
  uint64_t v122 = (_OWORD *)(a1 + 344);
  CFStringRef v134 = (const __CFString *)*MEMORY[0x1E4F1F2C0];
  CFStringRef v146 = (const __CFString *)*MEMORY[0x1E4F1F2A8];
  uint64_t v142 = *MEMORY[0x1E4F1F358];
  uint64_t v133 = (void (**)(void, uint64_t, CFTypeRef))(a1 + 224);
  CFStringRef v145 = (const __CFString *)*MEMORY[0x1E4F21A40];
  while (vmc2GetWaterLevelState(a1) != 2)
  {
    uint64_t v4 = *(const void **)(a1 + 64);
    if (v4) {
      VTSessionCopyProperty(v4, propertyKey, allocator, &propertyValueOut);
    }
    if (propertyValueOut)
    {
      CFNumberGetValue(propertyValueOut, kCFNumberSInt32Type, &valuePtr);
      if (propertyValueOut)
      {
        CFRelease(propertyValueOut);
        CFNumberRef propertyValueOut = 0;
      }
    }
    else
    {
      int valuePtr = 0;
    }
    FigReadWriteLockLockForRead();
    if (*(unsigned char *)(a1 + 249))
    {
      if (*v3)
      {
        int v5 = (*v3)(*(void *)(a1 + 152));
        goto LABEL_17;
      }
    }
    else
    {
      FigSignalErrorAt();
    }
    int v5 = 99;
LABEL_17:
    FigReadWriteLockUnlockForRead();
    int v6 = valuePtr;
    int v7 = *(unsigned __int8 *)(a1 + 592);
    int WaterLevelState = vmc2GetWaterLevelState(a1);
    if (v5 <= v6)
    {
      int v114 = WaterLevelState == 2 && *(unsigned char *)(a1 + 440) == 0;
      uint64_t v117 = a1;
      int v118 = v7;
      int v119 = 0;
      goto LABEL_338;
    }
    if (WaterLevelState) {
      BOOL v9 = *(unsigned char *)(a1 + 440) != 0;
    }
    else {
      BOOL v9 = 1;
    }
    BOOL v10 = vmc2GetWaterLevelState(a1) != 2 || *(unsigned char *)(a1 + 440) != 0;
    vmc2UpdateTroubleMonitor(a1, v7, v9, !v10, 1);
    CFTypeRef v159 = 0;
    CVPixelBufferRef pixelBufferOut = 0;
    CFTypeRef cf = 0;
    if (*(unsigned char *)(a1 + 864)) {
      VTDecodeFrameFlags v11 = 8;
    }
    else {
      VTDecodeFrameFlags v11 = 9;
    }
    MEMORY[0x19970E290](*(void *)(a1 + 280));
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t context = 0;
    CMTimeEpoch v157 = 0;
    float v15 = *(uint64_t (**)(uint64_t))(v14 + 8);
    if (v15) {
      int v16 = v15(v12);
    }
    else {
      int v16 = 0;
    }
    *(unsigned char *)(a1 + 312) = v16 == 0;
    uint64_t v17 = *(void *)(a1 + 88);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    unsigned __int8 v20 = *(uint64_t (**)(uint64_t))(v19 + 24);
    if (v20)
    {
      unsigned __int8 v21 = (opaqueCMSampleBuffer *)v20(v17);
      BOOL v22 = v21 != 0;
      *(unsigned char *)(a1 + 592) = v22;
      if (v21)
      {
        long long v23 = v21;
        SampleAttachmentsArraCGFloat y = CMSampleBufferGetSampleAttachmentsArray(v21, 0);
        if (SampleAttachmentsArray)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
          CFTypeRef v26 = v140;
          if (ValueAtIndex)
          {
            CFDictionaryRef v27 = ValueAtIndex;
            CFTypeRef v28 = CFDictionaryGetValue(ValueAtIndex, key);
            CFTypeRef v29 = CFDictionaryGetValue(v27, v127);
            BOOL v31 = v28 != v140 || v29 == v140;
            value.CMTime value = 0;
            LODWORD(v164.value) = 0;
            CFDictionaryGetValueIfPresent(v27, v126, (const void **)&value);
            LODWORD(time1.value) = 0;
            FigCFDictionaryGetIntIfPresent();
            if (value.value) {
              FigCFDictionaryGetIntIfPresent();
            }
            int v32 = v164.value;
            int v33 = *(_DWORD *)(a1 + 620);
            if (SLODWORD(v164.value) > v33)
            {
              *(_DWORD *)(a1 + 620) = v164.value;
              int v33 = v32;
            }
            if (v31)
            {
              int v34 = *(_DWORD *)(a1 + 616);
              if (v33 < v34) {
                int v33 = v34 - 1;
              }
              *(_DWORD *)(a1 + 616) = v33;
              *(_DWORD *)(a1 + 620) = 0;
            }
            BOOL v129 = v28 != v140;
            if (v28 != v140 && (LODWORD(time1.value) == 21 || LODWORD(time1.value) == 16)) {
              *(unsigned char *)(a1 + 1065) = 1;
            }
          }
          else
          {
            BOOL v129 = 0;
          }
        }
        else
        {
          BOOL v129 = 0;
          CFTypeRef v26 = v140;
        }
        if (*(unsigned char *)(a1 + 440))
        {
          int CompressedFrameOutputMode = vmcGetCompressedFrameOutputMode(v23);
          if ((CompressedFrameOutputMode & 3) != 1) {
            *(unsigned char *)(a1 + 441) = 1;
          }
        }
        else
        {
          int CompressedFrameOutputMode = 0;
        }
        if (CMGetAttachment(v23, v139, 0) == v26)
        {
          BOOL v53 = CMGetAttachment(v23, v124, 0) == v26;
          char v141 = v53;
        }
        else
        {
          BOOL v53 = 0;
          char v141 = 1;
        }
        CFTypeRef v130 = CMGetAttachment(v23, v138, 0);
        CFTypeRef v132 = CMGetAttachment(v23, v137, 0);
        CFTypeRef v54 = CMGetAttachment(v23, v136, 0);
        BOOL v143 = CMGetAttachment(v23, v135, 0) == v26;
        CFArrayRef v55 = CMSampleBufferGetSampleAttachmentsArray(v23, 0);
        CFTypeRef v131 = v54;
        if (v55
          && (CFDictionaryRef v56 = (const __CFDictionary *)CFArrayGetValueAtIndex(v55, 0)) != 0
          && CFDictionaryGetValue(v56, v125))
        {
          uint64_t v57 = a1 + 800;
          do
            uint64_t v57 = *(void *)v57;
          while (v57 && !FigCFEqual());
        }
        else
        {
          uint64_t v57 = 0;
        }
        uint64_t context = a1;
        CMTimeEpoch v157 = v23;
        dispatch_sync_f(*(dispatch_queue_t *)(a1 + 816), &context, (dispatch_function_t)vmc2UpdateCPECryptor);
        *(unsigned char *)(a1 + 730) = v53;
        if (v53) {
          vmc2RecalculateUpcomingImageTimes(a1);
        }
        CMItemCount NumSamples = CMSampleBufferGetNumSamples(v23);
        if (NumSamples < 1)
        {
          int v60 = 0;
        }
        else
        {
          int CompressedFrameOutputMode = vmcGetCompressedFrameOutputMode(v23);
          memset(&value, 0, sizeof(value));
          CMSampleBufferGetOutputPresentationTimeStamp(&value, v23);
          if ((CompressedFrameOutputMode & 3) == 1)
          {
            uint64_t v59 = MEMORY[0x1E4F1F9F8];
            *int v150 = *MEMORY[0x1E4F1F9F8];
            *(void *)(a1 + 408) = *(void *)(v59 + 16);
          }
          else
          {
            *int v150 = *(_OWORD *)&value.value;
            *(void *)(a1 + 408) = value.epoch;
            if (*(void *)(a1 + 64))
            {
              memset(&v164, 0, sizeof(v164));
              CMSampleBufferGetOutputDuration(&v164, v23);
              CMTime time1 = value;
              *(_OWORD *)&time2.CMTime value = *v123;
              time2.CMTimeEpoch epoch = *(void *)(a1 + 336);
              if (CMTimeCompare(&time1, &time2) < 0)
              {
                *uint64_t v123 = *(_OWORD *)&value.value;
                *(void *)(a1 + 336) = value.epoch;
                int v61 = 1;
              }
              else
              {
                int v61 = 0;
              }
              if (value.flags)
              {
                CMTime time1 = value;
                *(_OWORD *)&time2.CMTime value = *v122;
                time2.CMTimeEpoch epoch = *(void *)(a1 + 360);
                if (CMTimeCompare(&time1, &time2) > 0 || (*(unsigned char *)(a1 + 356) & 1) == 0)
                {
                  *uint64_t v122 = *(_OWORD *)&value.value;
                  *(void *)(a1 + 360) = value.epoch;
                  int v61 = 1;
                }
              }
              if (value.flags)
              {
                if ((v164.flags & 1) == 0
                  || (time2 = value, rhs = v164, CMTimeAdd(&time1, &time2, &rhs), CMTime value = time1, (time1.flags & 1) != 0))
                {
                  if ((*(unsigned char *)(a1 + 380) & 1) == 0
                    || (CMTime time1 = value,
                        *(_OWORD *)&time2.CMTime value = *v121,
                        time2.CMTimeEpoch epoch = *(void *)(a1 + 384),
                        CMTimeCompare(&time1, &time2) >= 1))
                  {
                    *int v121 = *(_OWORD *)&value.value;
                    *(void *)(a1 + 384) = value.epoch;
                  }
                }
              }
              if (v61)
              {
                ++*(_DWORD *)(a1 + 316);
                vmc2RecalculateUpcomingImageTimes(a1);
              }
            }
          }
          *(unsigned char *)(a1 + 312) = 0;
          int v60 = 1;
        }
        int v144 = v60;
        MEMORY[0x19970E2B0](*(void *)(a1 + 280));
        CFTypeRef v62 = CMGetAttachment(v23, v134, 0);
        if (v62)
        {
          uint64_t v63 = *(OpaqueVTDecompressionSession **)(a1 + 64);
          if (v63) {
            VTDecompressionSessionWaitForAsynchronousFrames(v63);
          }
        }
        MEMORY[0x19970E910](*(void *)(a1 + 776));
        int v64 = *(_DWORD *)(a1 + 792);
        uint64_t v65 = *(const void **)(a1 + 784);
        if (v65) {
          int v66 = 0;
        }
        else {
          int v66 = *(_DWORD *)(a1 + 792);
        }
        int v147 = v66;
        if (v62 && v65)
        {
          if (CFEqual(v62, v65))
          {
            uint64_t v67 = *(const void **)(a1 + 784);
            if (v67)
            {
              CFRelease(v67);
              *(void *)(a1 + 784) = 0;
            }
            int v147 = v64;
          }
          else
          {
            int v147 = 0;
          }
        }
        MEMORY[0x19970E930](*(void *)(a1 + 776));
        if (!*(unsigned char *)(a1 + 728)) {
          goto LABEL_164;
        }
        if (v141)
        {
          int v68 = v144;
          if (v53) {
            int v68 = 1;
          }
          int v144 = v68;
LABEL_164:
          int v40 = v147;
          if (NumSamples < 1)
          {
            SourceFrameInfo = 0;
            goto LABEL_182;
          }
          SourceFrameInfo = vmcCreateSourceFrameInfo(CompressedFrameOutputMode, v23, v147);
          vmcCreateAttachmentsDictionaryForSourceFrameInfo(a1, (uint64_t)SourceFrameInfo, (uint64_t)v23);
          if ((CompressedFrameOutputMode & 7) == 1) {
            v11 |= 2u;
          }
          MEMORY[0x19970E910](*(void *)(a1 + 576));
          uint64_t v69 = *(const void **)(a1 + 584);
          if (v69) {
            int64_t v70 = (void *)CFRetain(v69);
          }
          else {
            int64_t v70 = 0;
          }
          MEMORY[0x19970E930](*(void *)(a1 + 576));
          if ((CompressedFrameOutputMode & 3) != 0 || *(_DWORD *)(a1 + 608) || !v70)
          {
            if (v70) {
              goto LABEL_179;
            }
          }
          else
          {
            if (!*(unsigned char *)(a1 + 861)
              && CMTimebaseGetRate((CMTimebaseRef)v70) > 0.9
              && CMTimebaseGetRate((CMTimebaseRef)v70) < 1.1)
            {
              CFRelease(v70);
              v11 |= 4u;
              ++*(_DWORD *)(a1 + 1116);
LABEL_181:
              int v40 = v147;
LABEL_182:
              ImageBuffer = CMSampleBufferGetImageBuffer(v23);
              CVPixelBufferRef pixelBufferOut = ImageBuffer;
              if (ImageBuffer)
              {
                CFRetain(ImageBuffer);
                if (!VTPixelBufferConformerCopyConformedPixelBuffer())
                {
                  CVPixelBufferRef v75 = pixelBufferOut;
                  CVPixelBufferRef pixelBufferOut = (CVPixelBufferRef)cf;
                  if (cf) {
                    CFRetain(cf);
                  }
                  if (v75) {
                    CFRelease(v75);
                  }
                  char v35 = 1;
                  if ((v11 & 2) == 0)
                  {
                    vmc2UpdateSessionMinAndMaxOutputPTS(a1);
                    CVPixelBufferRef v76 = pixelBufferOut;
                    CMSampleBufferGetOutputPresentationTimeStamp(&value, v23);
                    CMSampleBufferGetOutputDuration(&v164, v23);
                    vmc2OutputFrameInternal(a1, SourceFrameInfo, 0, 0, (uint64_t)v76, 0, &value, (long long *)&v164.value, 1);
                  }
                  uint64_t v36 = 0;
                  SourceFrameInfo = 0;
LABEL_210:
                  BOOL v22 = 1;
                  BOOL v39 = v143;
LABEL_211:
                  int v38 = v144;
                  goto LABEL_62;
                }
LABEL_263:
                uint64_t v36 = 0;
LABEL_209:
                char v35 = 1;
                goto LABEL_210;
              }
              TaggedBufferGroup = (const void *)FigSampleBufferGetTaggedBufferGroup();
              if (TaggedBufferGroup)
              {
                uint64_t v36 = TaggedBufferGroup;
                CFRetain(TaggedBufferGroup);
                if (VTPixelBufferConformerCopyConformedTaggedBufferGroup()) {
                  goto LABEL_209;
                }
                CFRelease(v36);
                if ((v11 & 2) == 0)
                {
                  vmc2UpdateSessionMinAndMaxOutputPTS(a1);
                  uint64_t v78 = (uint64_t)v159;
                  CMSampleBufferGetOutputPresentationTimeStamp(&value, v23);
                  CMSampleBufferGetOutputDuration(&v164, v23);
                  vmc2OutputFrameInternal(a1, SourceFrameInfo, 0, 0, 0, v78, &value, (long long *)&v164.value, 1);
                }
                if (v159)
                {
                  CFRelease(v159);
                  uint64_t v36 = 0;
                  SourceFrameInfo = 0;
                  CFTypeRef v159 = 0;
                  goto LABEL_209;
                }
LABEL_208:
                uint64_t v36 = 0;
                SourceFrameInfo = 0;
                goto LABEL_209;
              }
              if (v57)
              {
                int v79 = vmcGetCompressedFrameOutputMode(v23);
                if (!SourceFrameInfo)
                {
                  SourceFrameInfo = vmcCreateSourceFrameInfo(v79, v23, v40);
                  vmcCreateAttachmentsDictionaryForSourceFrameInfo(a1, (uint64_t)SourceFrameInfo, (uint64_t)v23);
                }
                vmc2UpdateSessionMinAndMaxOutputPTS(a1);
                int v80 = *(_DWORD *)(v57 + 16);
                unsigned int v81 = *(_DWORD *)(v57 + 20);
                uint64_t v82 = *(void *)(v57 + 24);
                uint64_t v83 = *(void *)(v57 + 32);
                CMTime value = *(CMTime *)(v57 + 40);
                CMTime v164 = *(CMTime *)(v57 + 64);
                vmc2OutputFrameInternal(a1, SourceFrameInfo, v80, v81, v82, v83, &value, (long long *)&v164.value, 0);
                goto LABEL_208;
              }
              if (NumSamples < 1)
              {
                BOOL v39 = v143;
                goto LABEL_291;
              }
              FormatDescription = CMSampleBufferGetFormatDescription(v23);
              if (*(const opaqueCMFormatDescription **)(a1 + 32) != FormatDescription && FigCFEqual()) {
                vmc2SetVideoFormatDescription(a1, FormatDescription);
              }
              if (*(void *)(a1 + 64) && *(const opaqueCMFormatDescription **)(a1 + 32) == FormatDescription) {
                goto LABEL_260;
              }
              *(unsigned char *)(a1 + 1065) = 0;
              MEMORY[0x19970E910](*(void *)(a1 + 1160));
              *(_DWORD *)(a1 + 1180) = CMFormatDescriptionGetMediaSubType(FormatDescription);
              MEMORY[0x19970E930](*(void *)(a1 + 1160));
              uint64_t v98 = *(OpaqueVTDecompressionSession **)(a1 + 64);
              if (v98)
              {
                if (VTDecompressionSessionCanAcceptFormatDescription(v98, FormatDescription))
                {
                  vmc2SetVideoFormatDescription(a1, FormatDescription);
                  vmc2BroadcastHDRStatus(a1);
                  goto LABEL_260;
                }
                uint64_t v99 = *(OpaqueVTDecompressionSession **)(a1 + 64);
                if (v99) {
                  VTDecompressionSessionWaitForAsynchronousFrames(v99);
                }
              }
              MEMORY[0x19970E910](*(void *)(a1 + 72));
              vmc2RemoveDecompressionSession(a1);
              *(unsigned char *)(a1 + 1064) = 0;
              vmc2SetVideoFormatDescription(a1, FormatDescription);
              vmc2BroadcastHDRStatus(a1);
              if (!*(void *)(a1 + 32))
              {
                MEMORY[0x19970E930](*(void *)(a1 + 72));
                goto LABEL_260;
              }
              int v100 = vmc2BuildDecompressionSession(a1);
              MEMORY[0x19970E930](*(void *)(a1 + 72));
              if (!v100)
              {
LABEL_260:
                if (*(unsigned char *)(a1 + 1034)) {
                  goto LABEL_261;
                }
                if (!*(unsigned char *)(a1 + 1033))
                {
                  if (v129 && !*(void *)(a1 + 64)) {
                    goto LABEL_269;
                  }
                  goto LABEL_271;
                }
                if (!v129) {
                  goto LABEL_271;
                }
LABEL_269:
                if (*(unsigned char *)(a1 + 1065) && !*(void *)(a1 + 808))
                {
LABEL_271:
                  DataBuffer = CMSampleBufferGetDataBuffer(v23);
                  if (DataBuffer)
                  {
                    if (CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0)) {
                      ++*(_DWORD *)(a1 + 1148);
                    }
                    else {
                      ++*(_DWORD *)(a1 + 1152);
                    }
                  }
                  OSStatus v102 = VTDecompressionSessionDecodeFrame(*(VTDecompressionSessionRef *)(a1 + 64), v23, v11, SourceFrameInfo, 0);
                  if (v102)
                  {
                    BOOL v39 = v143;
                    if (v102 == -17690)
                    {
                      int v103 = *(const void **)(a1 + 1056);
                      BOOL v104 = *(const void **)(a1 + 1048);
                      *(void *)(a1 + 1056) = v104;
                      if (v104) {
                        CFRetain(v104);
                      }
                      if (v103) {
                        CFRelease(v103);
                      }
                      uint64_t v105 = *(const void **)(a1 + 1040);
                      if (v105)
                      {
                        CFRelease(v105);
                        *(void *)(a1 + 1040) = 0;
                      }
                      uint64_t v106 = *(const void **)(a1 + 1048);
                      if (v106)
                      {
                        CFRelease(v106);
                        *(void *)(a1 + 1048) = 0;
                      }
                      if (vmc2RebuildDecompressionSession(a1))
                      {
                        CMSampleBufferGetOutputPresentationTimeStamp(&value, v23);
                        vmc2PostDecodeError(a1);
                        uint64_t v36 = 0;
                        SourceFrameInfo = 0;
LABEL_313:
                        char v35 = 1;
                        BOOL v22 = 1;
                        goto LABEL_211;
                      }
                      SourceFrameInfo = 0;
                    }
                    else
                    {
                      CMSampleBufferGetOutputPresentationTimeStamp(&v164, v23);
                      vmc2PostDecodeError(a1);
                    }
                  }
                  else
                  {
                    SourceFrameInfo = 0;
                    BOOL v39 = v143;
                  }
                  vmc2UpdateSessionMinAndMaxOutputPTS(a1);
LABEL_291:
                  if (*(void *)(a1 + 64))
                  {
                    if (v130 == v140 || v132 == v140 || v131)
                    {
                      MEMORY[0x19970E910](*(void *)(a1 + 72));
                      VTDecompressionSessionFinishDelayedFrames(*(VTDecompressionSessionRef *)(a1 + 64));
                      if (v132 == v140 || v131) {
                        VTDecompressionSessionWaitForAsynchronousFrames(*(VTDecompressionSessionRef *)(a1 + 64));
                      }
                      if (v132 == v140) {
                        vmc2RemoveDecompressionSession(a1);
                      }
                      MEMORY[0x19970E930](*(void *)(a1 + 72));
                      goto LABEL_301;
                    }
                  }
                  else
                  {
LABEL_301:
                    if (v131)
                    {
                      value.CMTime value = 0;
                      *(void *)&value.CMTimeScale timescale = &value;
                      value.CMTimeEpoch epoch = 0x2000000000;
                      uint64_t v155 = 0;
                      uint64_t v107 = *(NSObject **)(a1 + 968);
                      block[0] = MEMORY[0x1E4F143A8];
                      block[1] = 0x40000000;
                      block[2] = __vmc2DequeueAndDecodeFrame_block_invoke;
                      block[3] = &unk_1E578C688;
                      block[4] = &value;
                      void block[5] = a1;
                      dispatch_sync(v107, block);
                      if (*(void *)(*(void *)&value.timescale + 24)) {
                        VTTemporalFilterSessionCompleteFrames();
                      }
                      uint64_t v108 = *(void *)(CMBaseObjectGetVTable() + 16);
                      if (v108) {
                        uint64_t v109 = v108;
                      }
                      else {
                        uint64_t v109 = 0;
                      }
                      int v110 = *(void (**)(CFTypeRef, uint64_t))(v109 + 24);
                      if (v110) {
                        v110(v131, 1);
                      }
                      BOOL v111 = *(const void **)(*(void *)&value.timescale + 24);
                      if (v111) {
                        CFRelease(v111);
                      }
                      _Block_object_dispose(&value, 8);
                    }
                  }
LABEL_312:
                  uint64_t v36 = 0;
                  goto LABEL_313;
                }
LABEL_261:
                if (!vmc2RebuildDecompressionSession(a1)) {
                  goto LABEL_271;
                }
              }
              CMSampleBufferGetOutputPresentationTimeStamp(&value, v23);
              vmc2PostDecodeError(a1);
              goto LABEL_263;
            }
LABEL_179:
            CFRelease(v70);
          }
          ++*(_DWORD *)(a1 + 1112);
          goto LABEL_181;
        }
        int v71 = vmcGetCompressedFrameOutputMode(v23);
        int v40 = v147;
        SourceFrameInfo = vmcCreateSourceFrameInfo(v71, v23, v147);
        vmcCreateAttachmentsDictionaryForSourceFrameInfo(a1, (uint64_t)SourceFrameInfo, (uint64_t)v23);
        uint64_t v72 = *(OpaqueVTDecompressionSession **)(a1 + 64);
        if (v72) {
          VTDecompressionSessionWaitForAsynchronousFrames(v72);
        }
        BOOL v39 = v143;
        if (*(unsigned char *)(a1 + 729))
        {
          int v73 = *(OpaqueVTDecompressionSession **)(a1 + 64);
          if (v73)
          {
            if (VTDecompressionSessionCopyBlackPixelBuffer(v73, &pixelBufferOut)) {
              goto LABEL_312;
            }
          }
          else if (*(void *)(a1 + 80))
          {
            VTPixelBufferConformerCopyBlackPixelBuffer();
          }
          ++*(_DWORD *)(a1 + 1128);
        }
        else
        {
          FigCreateNullPixelBuffer(allocator, &pixelBufferOut);
        }
        CFArrayRef v84 = *(const __CFArray **)(a1 + 256);
        if (v84 && CFArrayGetCount(v84) >= 1)
        {
          CVPixelBufferRef v85 = pixelBufferOut;
          CFArrayRef v86 = *(const __CFArray **)(a1 + 256);
          v164.CMTime value = 0;
          time1.CMTime value = 0;
          unint64_t v87 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          CFMutableDictionaryRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
          CFMutableArrayRef v89 = CFArrayCreateMutable(allocator, 0, v87);
          uint64_t v90 = v89;
          if (!Mutable || !v89) {
            goto LABEL_314;
          }
          if (v86 && (CFIndex Count = CFArrayGetCount(v86), Count >= 1))
          {
            CFIndex v92 = Count;
            uint64_t v93 = 0;
            while (1)
            {
              LODWORD(time2.value) = 0;
              FigCFArrayGetInt32AtIndex();
              value.CMTime value = 0;
              *(void *)&value.CMTimeScale timescale = 0;
              value.CMTime value = FigTagMakeWithSInt64Value();
              *(void *)&value.CMTimeScale timescale = v94;
              FigTagCollectionCreate();
              if (!time1.value) {
                break;
              }
              CFArrayAppendValue(Mutable, (const void *)time1.value);
              CFArrayAppendValue(v90, v85);
              if (time1.value)
              {
                CFRelease((CFTypeRef)time1.value);
                time1.CMTime value = 0;
              }
              if (v92 == ++v93) {
                goto LABEL_226;
              }
            }
LABEL_314:
            int v95 = FigSignalErrorAt();
            uint64_t v36 = 0;
            BOOL v39 = v143;
          }
          else
          {
LABEL_226:
            int v95 = MEMORY[0x19970EBC0](allocator, Mutable, v90, &v164);
            BOOL v39 = v143;
            if (v95)
            {
              uint64_t v36 = 0;
            }
            else
            {
              uint64_t v36 = (const void *)v164.value;
              v164.CMTime value = 0;
            }
          }
          if (time1.value) {
            CFRelease((CFTypeRef)time1.value);
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (v90) {
            CFRelease(v90);
          }
          if (v164.value) {
            CFRelease((CFTypeRef)v164.value);
          }
          if (v95)
          {
            char v35 = 1;
            BOOL v22 = 1;
            int v40 = v147;
            goto LABEL_211;
          }
          CMSampleBufferGetOutputPresentationTimeStamp(&v164, v23);
          CMTime value = v164;
          vmc2OutputFrameInternal(a1, SourceFrameInfo, 0, 0, 0, (uint64_t)v36, &value, MEMORY[0x1E4F1F9F8], 0);
          int v40 = v147;
          if (v36) {
            CFRelease(v36);
          }
        }
        else
        {
          CVPixelBufferRef v96 = pixelBufferOut;
          CMSampleBufferGetOutputPresentationTimeStamp(&v164, v23);
          CMTime value = v164;
          vmc2OutputFrameInternal(a1, SourceFrameInfo, 0, 0, (uint64_t)v96, 0, &value, MEMORY[0x1E4F1F9F8], 0);
        }
        if (pixelBufferOut)
        {
          CFRelease(pixelBufferOut);
          uint64_t v36 = 0;
          SourceFrameInfo = 0;
          CVPixelBufferRef pixelBufferOut = 0;
        }
        else
        {
          uint64_t v36 = 0;
          SourceFrameInfo = 0;
        }
        char v35 = 1;
        BOOL v22 = 1;
        int v38 = 1;
        goto LABEL_62;
      }
    }
    else
    {
      BOOL v22 = 0;
      *(unsigned char *)(a1 + 592) = 0;
    }
    *(unsigned char *)(a1 + 312) = 0;
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    MEMORY[0x19970E910](*(void *)(a1 + 1160));
    ++*(_DWORD *)(a1 + 1384);
    MEMORY[0x19970E930](*(void *)(a1 + 1160));
    MEMORY[0x19970E2B0](*(void *)(a1 + 280));
    vmc2CheckForEnd(a1);
    char v35 = 0;
    long long v23 = 0;
    uint64_t v36 = 0;
    SourceFrameInfo = 0;
    int v38 = 0;
    BOOL v39 = 0;
    int v40 = 0;
LABEL_62:
    MEMORY[0x19970E290](*(void *)(a1 + 280));
    *(unsigned char *)(a1 + 312) = 0;
    uint64_t v41 = MEMORY[0x1E4F1F9F8];
    *int v150 = *MEMORY[0x1E4F1F9F8];
    *(void *)(a1 + 408) = *(void *)(v41 + 16);
    MEMORY[0x19970E2B0](*(void *)(a1 + 280));
    if (v38) {
      vmc2RecalculateUpcomingImageTimes(a1);
    }
    if (v39)
    {
      vmc2ClearSavedList(a1);
      if (!v22)
      {
LABEL_66:
        if (!SourceFrameInfo) {
          goto LABEL_95;
        }
LABEL_80:
        uint64_t v45 = (const void *)*((void *)SourceFrameInfo + 1);
        if (v45) {
          CFRelease(v45);
        }
        uint64_t v46 = (const void *)*((void *)SourceFrameInfo + 2);
        if (v46) {
          CFRelease(v46);
        }
        long long v47 = (const void *)*((void *)SourceFrameInfo + 3);
        if (v47) {
          CFRelease(v47);
        }
        uint64_t v48 = (const void *)*((void *)SourceFrameInfo + 4);
        if (v48) {
          CFRelease(v48);
        }
        uint64_t v49 = (const void *)*((void *)SourceFrameInfo + 5);
        if (v49) {
          CFRelease(v49);
        }
        uint64_t v50 = (const void *)*((void *)SourceFrameInfo + 6);
        if (v50) {
          CFRelease(v50);
        }
        long long v51 = (const void *)*((void *)SourceFrameInfo + 7);
        if (v51) {
          CFRelease(v51);
        }
        free(SourceFrameInfo);
        goto LABEL_95;
      }
    }
    else if (!v22)
    {
      goto LABEL_66;
    }
    CFTypeRef v42 = CMGetAttachment(v23, v146, 0);
    if (v42)
    {
      CFTypeRef v43 = v42;
      long long v44 = *(OpaqueVTDecompressionSession **)(a1 + 64);
      if (v44) {
        VTDecompressionSessionWaitForAsynchronousFrames(v44);
      }
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (v40 == *(_DWORD *)(a1 + 792))
      {
        FigReadWriteLockLockForRead();
        if (*(unsigned char *)(a1 + 249))
        {
          if (*v133) {
            (*v133)(*(void *)(a1 + 152), v142, v43);
          }
        }
        else
        {
          FigSignalErrorAt();
        }
        FigReadWriteLockUnlockForRead();
      }
    }
    if (CMGetAttachment(v23, v145, 0))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    CFRelease(v23);
    if (SourceFrameInfo) {
      goto LABEL_80;
    }
LABEL_95:
    if (cf) {
      CFRelease(cf);
    }
    if (pixelBufferOut) {
      CFRelease(pixelBufferOut);
    }
    if (v36) {
      CFRelease(v36);
    }
    if (v159) {
      CFRelease(v159);
    }
    uint64_t v3 = (uint64_t (**)(void))(a1 + 192);
    if ((v35 & 1) == 0)
    {
      int v115 = *(unsigned __int8 *)(a1 + 592);
      if (vmc2GetWaterLevelState(a1)) {
        BOOL v116 = *(unsigned char *)(a1 + 440) != 0;
      }
      else {
        BOOL v116 = 1;
      }
      int v114 = vmc2GetWaterLevelState(a1) == 2 && *(unsigned char *)(a1 + 440) == 0;
      uint64_t v117 = a1;
      int v118 = v115;
      int v119 = v116;
      goto LABEL_338;
    }
    ++v2;
    if (!*(unsigned char *)(a1 + 288)) {
      goto LABEL_339;
    }
  }
  int v112 = *(unsigned __int8 *)(a1 + 592);
  if (vmc2GetWaterLevelState(a1)) {
    BOOL v113 = *(unsigned char *)(a1 + 440) != 0;
  }
  else {
    BOOL v113 = 1;
  }
  int v120 = vmc2GetWaterLevelState(a1) == 2 && *(unsigned char *)(a1 + 440) == 0;
  vmc2UpdateTroubleMonitor(a1, v112, v113, v120, 1);
  int v118 = *(unsigned __int8 *)(a1 + 592);
  uint64_t v117 = a1;
  int v119 = 0;
  int v114 = 1;
LABEL_338:
  vmc2UpdateTroubleMonitor(v117, v118, v119, v114, 1);
LABEL_339:
  if (*MEMORY[0x1E4F1EBA8] == 1) {
    kdebug_trace();
  }
  MEMORY[0x19970E930](*(void *)(a1 + 296));
  FigSemaphoreSignal();
  vmc2PostCompletedDecodeForPrerollIfPreviouslyRequestedAndMaybeRecordNewRequest(a1, 0, 0);
}

CMTime *piqca_getSafeDisplayDuration@<X0>(CMTime *a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v5 = *(_DWORD *)(DerivedStorage + 216);
  int v6 = *(_DWORD *)(DerivedStorage + 160);
  CMTime time = *(CMTime *)(DerivedStorage + 164);
  CMTime v8 = *(CMTime *)(DerivedStorage + 188);
  uint64_t result = FigImageQueueCalculateSafeDisplayDuration(a1, v5, v6, &time, &v8, (uint64_t)a2);
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    CMTime time = *a2;
    CMTimeGetSeconds(&time);
    return (CMTime *)kdebug_trace();
  }
  return result;
}

CMTime *FigImageQueueCalculateSafeDisplayDuration@<X0>(CMTime *result@<X0>, int a2@<W1>, int a3@<W2>, CMTime *a4@<X3>, CMTime *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  *(_OWORD *)&v29.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  v29.CMTimeEpoch epoch = epoch;
  *(_OWORD *)&v28.CMTimeValue value = *(_OWORD *)&v29.value;
  v28.CMTimeEpoch epoch = epoch;
  if (result)
  {
    uint64_t v12 = result;
    CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v16 = *(void *)(VTable + 16);
    uint64_t result = (CMTime *)(VTable + 16);
    uint64_t v15 = v16;
    if (v16) {
      uint64_t v17 = v15;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v19 = *(uint64_t (**)(CMTime *, int *, CMTime *, CMTime *))(v17 + 64);
    if (v19)
    {
      int v30 = 0;
      uint64_t result = (CMTime *)v19(v12, &v30, &v29, &v28);
      if (!result)
      {
        unsigned __int8 v20 = (CMTime *)MEMORY[0x1E4F1FA48];
        if (v30)
        {
          if (a3 == 2)
          {
            if (a2 < 1)
            {
              CMTime time1 = v29;
              CMTime time2 = *a5;
              CMTimeMaximum(&rhs, &time1, &time2);
              CMTime time2 = v28;
              p_CMTime time2 = &time2;
              p_CMTime rhs = &rhs;
            }
            else
            {
              CMTime time1 = *a4;
              CMTime time2 = v28;
              CMTimeMinimum(&v26, &time1, &time2);
              CMTime time2 = v29;
              p_CMTime time2 = &v26;
              p_CMTime rhs = &time2;
            }
          }
          else
          {
            CMTime time2 = v28;
            CMTime v23 = v29;
            p_CMTime time2 = &time2;
            p_CMTime rhs = &v23;
          }
          uint64_t result = CMTimeSubtract(&time1, p_time2, p_rhs);
          CMTimeValue value = time1.value;
          CMTimeFlags flags = time1.flags;
          CMTimeScale timescale = time1.timescale;
          CMTimeEpoch epoch = time1.epoch;
        }
        else
        {
          CMTimeValue value = *MEMORY[0x1E4F1FA48];
          CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 12);
          CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
          CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        }
        if ((flags & 0x1D) != 1
          || (time1.CMTimeValue value = value,
              time1.CMTimeScale timescale = timescale,
              time1.CMTimeFlags flags = flags,
              time1.CMTimeEpoch epoch = epoch,
              CMTime time2 = *v20,
              uint64_t result = (CMTime *)CMTimeCompare(&time1, &time2),
              (result & 0x80000000) != 0))
        {
          CMTimeValue value = v20->value;
          CMTimeFlags flags = v20->flags;
          CMTimeScale timescale = v20->timescale;
          CMTimeEpoch epoch = v20->epoch;
        }
      }
    }
    *(void *)a6 = value;
    *(_DWORD *)(a6 + 8) = timescale;
    *(_DWORD *)(a6 + 12) = flags;
    *(void *)(a6 + 16) = epoch;
  }
  else
  {
    uint64_t v18 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)a6 = *MEMORY[0x1E4F1FA48];
    *(void *)(a6 + 16) = *(void *)(v18 + 16);
  }
  return result;
}

uint64_t piqca_getOccupancyInfo(uint64_t a1, _DWORD *a2, CMTime *a3, CMTime *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v10 = v11;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)(DerivedStorage + 50))
  {
    UnconsumedImageCFIndex Count = 0;
  }
  else
  {
    UnconsumedImageCFIndex Count = CAImageQueueGetUnconsumedImageCount();
    CMTimeMakeWithSeconds(&v11, 0.0 + 0.000833333333, 600);
    CMTimeMakeWithSeconds(&v10, 0.0 + 0.000833333333, 600);
  }
  ++*(_DWORD *)(DerivedStorage + 2400);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
  if (a2) {
    *a2 = UnconsumedImageCount;
  }
  if (a3) {
    *a3 = v11;
  }
  if (a4) {
    *a4 = v10;
  }
  return 0;
}

uint64_t piqca_canEnqueueImage()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  piqca_evictExpiredFramesFromCAImageQueueIfEvictionNotDoneRecently();
  if (*(unsigned char *)(DerivedStorage + 50)) {
    return 99;
  }
  uint64_t v2 = *(void *)(DerivedStorage + 64);
  if (v2) {
    return (v2 - 1);
  }
  else {
    return 0;
  }
}

void vmc2UpdateTroubleMonitor(uint64_t a1, int a2, int a3, int a4, int a5)
{
  if (*(unsigned char *)(a1 + 626))
  {
    if (FigSimpleMutexTryLock())
    {
      vmc2UpdateTroubleMonitor2(a1, a2, a3, a4, a5);
      JUMPOUT(0x19970E930);
    }
    if (*(void *)(a1 + 456))
    {
      CMTime v10 = malloc_type_malloc(0x10uLL, 0x10200405F07FB98uLL);
      if (v10)
      {
        CMTime v11 = v10;
        CFRetain((CFTypeRef)a1);
        *(void *)CMTime v11 = a1;
        v11[8] = a5;
        uint64_t v12 = *(NSObject **)(a1 + 456);
        dispatch_async_f(v12, v11, (dispatch_function_t)vmc2WhileHoldingSessionVTMutexUpdateTroubleMonitor);
      }
    }
  }
}

CMBufferRef sbp_bq_getAndRetainNextSampleBufferIfReady()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    uint64_t v2 = *(opaqueCMBufferQueue **)(DerivedStorage + 8);
    return CMBufferQueueDequeueIfDataReadyAndRetain(v2);
  }
}

uint64_t vmc2CheckForEnd(uint64_t result)
{
  if (!*(unsigned char *)(result + 520))
  {
    uint64_t v1 = result;
    uint64_t result = VMC2IsAtEndOfOutputData(result);
    if (result)
    {
      if (!*(unsigned char *)(v1 + 312))
      {
        vmc2RecalculateUpcomingImageTimes(v1);
        MEMORY[0x19970E290](*(void *)(v1 + 280));
        *(unsigned char *)(v1 + 520) = 1;
        MEMORY[0x19970E2B0](*(void *)(v1 + 280));
        CMNotificationCenterGetDefaultLocalCenter();
        return CMNotificationCenterPostNotification();
      }
    }
  }
  return result;
}

uint64_t VMC2IsAtEndOfOutputData(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  int v5 = *(uint64_t (**)(uint64_t))(v4 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t result = v5(v2);
  if (!result) {
    return result;
  }
  int v7 = *(const void **)(a1 + 64);
  if (v7
    && (CFNumberRef propertyValueOut = 0,
        VTSessionCopyProperty(v7, (CFStringRef)*MEMORY[0x1E4F44C70], (CFAllocatorRef)*MEMORY[0x1E4F1CF80], &propertyValueOut), propertyValueOut)&& (int valuePtr = 0, CFNumberGetValue(propertyValueOut, kCFNumberIntType, &valuePtr), CFRelease(propertyValueOut), valuePtr > 0))
  {
    return 0;
  }
  else
  {
    return 1;
  }
}

uint64_t sbp_bq_isAtEndOfData()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    FigSignalErrorAt();
    return 1;
  }
  else
  {
    uint64_t v2 = *(opaqueCMBufferQueue **)(DerivedStorage + 8);
    return CMBufferQueueIsAtEndOfData(v2);
  }
}

uint64_t FigPlaybackBossSnapTimeToIFrame(uint64_t a1, OpaqueCMTimebase *a2, CMTime *a3, unsigned int a4, uint64_t a5)
{
  CMTime v6 = *a3;
  return FigPlaybackBossSnapTimeToIFrameWithRange(a1, a2, &v6, a4, MEMORY[0x1E4F1FA08], MEMORY[0x1E4F1FA10], a5);
}

uint64_t bossGetTimeOfNextIFrameInDirection(uint64_t a1, CMTime *a2, int a3, int a4, int a5, CMTime *a6, char *a7, BOOL *a8)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  CMTime v72 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CFTypeRef v71 = 0;
  __int16 v70 = 0;
  long long v16 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 48);
  *(_OWORD *)&v68.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 32);
  *(_OWORD *)&v69.start.CMTimeValue value = v16;
  long long v17 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 80);
  *(_OWORD *)&v69.start.CMTimeEpoch epoch = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 64);
  *(_OWORD *)&v69.duration.CMTimeScale timescale = v17;
  long long v18 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 16);
  *(_OWORD *)&v68.start.CMTimeValue value = *MEMORY[0x1E4F1FA00];
  *(_OWORD *)&v68.start.CMTimeEpoch epoch = v18;
  CMTime v67 = v72;
  *(_OWORD *)&v65.duration.CMTimeScale timescale = *(_OWORD *)&v68.duration.timescale;
  *(_OWORD *)&v66.start.CMTimeValue value = v16;
  *(_OWORD *)&v66.start.CMTimeEpoch epoch = *(_OWORD *)&v69.start.epoch;
  *(_OWORD *)&v66.duration.CMTimeScale timescale = v17;
  *(_OWORD *)&v65.start.CMTimeValue value = *(_OWORD *)&v68.start.value;
  *(_OWORD *)&v65.start.CMTimeEpoch epoch = v18;
  CFTypeRef v64 = 0;
  __int16 v63 = 0;
  CMTime v62 = v72;
  CMTime v61 = v72;
  if (a3 < 1) {
    unsigned int v19 = -1;
  }
  else {
    unsigned int v19 = 1;
  }
  *(_OWORD *)&fromRange.start.CMTimeValue value = *(_OWORD *)&a2->value;
  fromRange.start.CMTimeEpoch epoch = a2->epoch;
  uint64_t PresentationTimeStamp = bossScanForEditSegmentContainingTrackTime(a1, (uint64_t)&fromRange, (unsigned char *)&v70 + 1, &v70, (uint64_t)&v68, v19, (uint64_t)&v67, (unint64_t)&v65);
  if (PresentationTimeStamp) {
    goto LABEL_61;
  }
  CFArrayRef v55 = a7;
  if (HIBYTE(v70) && !(_BYTE)v70) {
    goto LABEL_7;
  }
  if (!HIBYTE(v70) || !(_BYTE)v70)
  {
    CMTime v72 = *a2;
    goto LABEL_13;
  }
  if ((v68.start.flags & 0x1D) == 1)
  {
    CMTime v60 = *a2;
    CMTimeRange fromRange = v69;
    CMTimeRange toRange = v68;
    CMTimeMapTimeFromRangeToRange(&v72, &v60, &fromRange, &toRange);
LABEL_13:
    int v21 = 1;
    goto LABEL_14;
  }
  if (a4 != 1 && !a5 || (v67.flags & 0x1D) != 1) {
    goto LABEL_7;
  }
  int v21 = 0;
  CMTime v72 = v67;
  CMTimeRange v68 = v65;
  CMTimeRange v69 = v66;
LABEL_14:
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  char v24 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v23 + 32);
  if (!v24) {
    goto LABEL_60;
  }
  int v54 = v21;
  uint64_t PresentationTimeStamp = v24(a1, &v71);
  if (PresentationTimeStamp) {
    goto LABEL_61;
  }
  CFTypeRef v25 = v71;
  toRange.start = v72;
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v27 = v26 ? v26 : 0;
  CMTime v28 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, CFTypeRef *, char *, __int16 *))(v27 + 8);
  if (!v28)
  {
LABEL_60:
    uint64_t PresentationTimeStamp = 4294954514;
    goto LABEL_61;
  }
  *(_OWORD *)&fromRange.start.CMTimeValue value = *(_OWORD *)&toRange.start.value;
  fromRange.start.CMTimeEpoch epoch = toRange.start.epoch;
  uint64_t PresentationTimeStamp = v28(v25, &fromRange, &v64, (char *)&v63 + 1, &v63);
  if (PresentationTimeStamp) {
    goto LABEL_61;
  }
  if (a4 == 1)
  {
    fromRange.start.CMTimeValue value = 0;
    uint64_t v29 = a3;
    uint64_t PresentationTimeStamp = FigSampleCursorStepInPresentationOrderAndReportStepsTaken((uint64_t)v64, a3, (uint64_t)&fromRange);
    if (PresentationTimeStamp || fromRange.start.value != a3) {
      goto LABEL_61;
    }
    char v30 = 0;
  }
  else
  {
    uint64_t v29 = a3;
    char v30 = 1;
  }
  uint64_t v53 = v29;
  for (int i = 10001; ; --i)
  {
    __int16 v59 = 0;
    v60.CMTimeValue value = 0;
    CFTypeRef v32 = v64;
    uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v34 = v33 ? v33 : 0;
    char v35 = *(uint64_t (**)(CFTypeRef, char *, __int16 *, void, void))(v34 + 64);
    if (v35)
    {
      uint64_t PresentationTimeStamp = v35(v32, (char *)&v59 + 1, &v59, 0, 0);
      if (!PresentationTimeStamp)
      {
        int v36 = v59;
        goto LABEL_51;
      }
    }
    else
    {
      uint64_t PresentationTimeStamp = 4294954514;
    }
    LOBYTE(fromRange.start.value) = 0;
    uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v37) {
      uint64_t v38 = v37;
    }
    else {
      uint64_t v38 = 0;
    }
    if (!*(void *)(v38 + 72)) {
      goto LABEL_61;
    }
    CFTypeRef v39 = v64;
    uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v40) {
      uint64_t v41 = v40;
    }
    else {
      uint64_t v41 = 0;
    }
    CFTypeRef v42 = *(uint64_t (**)(CFTypeRef, CMTimeRange *, void, void))(v41 + 72);
    if (!v42) {
      goto LABEL_60;
    }
    uint64_t v43 = v42(v39, &fromRange, 0, 0);
    if (v43)
    {
LABEL_79:
      uint64_t PresentationTimeStamp = v43;
      goto LABEL_61;
    }
    int v36 = LOBYTE(fromRange.start.value) == 73;
    LOBYTE(v59) = LOBYTE(fromRange.start.value) == 73;
LABEL_51:
    if (HIBYTE(v59) | v36) {
      break;
    }
    CFTypeRef v44 = v64;
    uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v45) {
      uint64_t v46 = v45;
    }
    else {
      uint64_t v46 = 0;
    }
    long long v47 = *(uint64_t (**)(CFTypeRef, uint64_t, CMTime *))(v46 + 176);
    if (!v47) {
      goto LABEL_60;
    }
    uint64_t v43 = v47(v44, v53, &v60);
    if (v43) {
      goto LABEL_79;
    }
    if (v60.value != v53) {
      goto LABEL_7;
    }
    if (!i)
    {
      int v58 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t PresentationTimeStamp = 4294954923;
      goto LABEL_61;
    }
    char v30 = 0;
  }
  if (v54) {
    char v49 = v30;
  }
  else {
    char v49 = 0;
  }
  if (HIBYTE(v63) | v63) {
    char v50 = 0;
  }
  else {
    char v50 = v49;
  }
  if (a4 == 2 || !v50)
  {
    uint64_t PresentationTimeStamp = FigSampleCursorGetPresentationTimeStamp((uint64_t)v64, (uint64_t)&v62);
    if (!PresentationTimeStamp)
    {
      BOOL v51 = v70;
      if ((_BYTE)v70)
      {
        toRange.start = v62;
        CMTimeRange fromRange = v68;
        CMTimeClampToRange(&v56, &toRange.start, &fromRange);
        CMTimeRange fromRange = v68;
        CMTimeRange toRange = v69;
        CMTimeMapTimeFromRangeToRange(&v61, &v56, &fromRange, &toRange);
        if ((v62.flags & 0x1D) == 1)
        {
          CMTimeRange fromRange = v68;
          toRange.start = v62;
          BOOL v51 = CMTimeRangeContainsTime(&fromRange, &toRange.start) != 0;
        }
        else
        {
          BOOL v51 = 0;
        }
      }
      else
      {
        CMTime v61 = v62;
      }
      if (a6) {
        *a6 = v61;
      }
      goto LABEL_75;
    }
  }
  else
  {
    BOOL v51 = 1;
LABEL_75:
    if (v55) {
      char *v55 = v50;
    }
    if (a8)
    {
      uint64_t PresentationTimeStamp = 0;
      *a8 = v51;
      goto LABEL_61;
    }
LABEL_7:
    uint64_t PresentationTimeStamp = 0;
  }
LABEL_61:
  if (v64) {
    CFRelease(v64);
  }
  if (v71) {
    CFRelease(v71);
  }
  return PresentationTimeStamp;
}

uint64_t bossScanForEditSegmentContainingTrackTime(uint64_t a1, uint64_t a2, unsigned char *a3, unsigned char *a4, uint64_t a5, unsigned int a6, uint64_t a7, unint64_t a8)
{
  v37[2] = *MEMORY[0x1E4F143B8];
  char v36 = 0;
  v37[0] = 0;
  v37[1] = 0;
  uint64_t v15 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  unsigned int v19 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v18 + 48);
  if (v19)
  {
    v19(FigBaseObject, @"SecondaryEditCursorService", v15, v37);
    BOOL v20 = v37[0] != 0;
  }
  else
  {
    BOOL v20 = 0;
  }
  uint64_t v21 = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  char v24 = &v37[v20];
  CFTypeRef v25 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v23 + 48);
  if (v25) {
    v25(v21, @"EditCursorService", v15, v24);
  }
  if (v20) {
    unsigned int v26 = 2;
  }
  else {
    unsigned int v26 = 1;
  }
  if (*v24) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = v20;
  }
  if (!v27)
  {
    uint64_t v30 = 0;
    LOBYTE(v29) = 0;
    if (!a3) {
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  long long v34 = *(_OWORD *)a2;
  uint64_t v35 = *(void *)(a2 + 16);
  uint64_t EditSegmentContainingTrackTime = bossUsingEditCursorServiceArrayFindEditSegmentContainingTrackTime(v37, v27, (uint64_t)&v34, &v36, (_OWORD *)a5);
  if (EditSegmentContainingTrackTime) {
    goto LABEL_35;
  }
  int v29 = *(_DWORD *)(a5 + 12) & 0x1D;
  if (v29 == 1)
  {
    uint64_t v30 = 0;
    if (!a3) {
      goto LABEL_25;
    }
LABEL_24:
    *a3 = v29;
    goto LABEL_25;
  }
  if (a7 | a8)
  {
    long long v34 = *(_OWORD *)a2;
    uint64_t v35 = *(void *)(a2 + 16);
    uint64_t EditSegmentContainingTrackTime = bossUsingEditCursorServiceArrayFindNextNonEmptyTrackTime(v37, v27, &v34, a6, MEMORY[0x1E4F1F9F8], a7, (_OWORD *)a8);
LABEL_35:
    uint64_t v30 = EditSegmentContainingTrackTime;
    goto LABEL_37;
  }
  uint64_t v30 = 0;
LABEL_37:
  LOBYTE(v29) = 1;
  if (a3) {
    goto LABEL_24;
  }
LABEL_25:
  if (a4) {
    *a4 = v36;
  }
  if (v27)
  {
    BOOL v31 = (CFTypeRef *)v37;
    do
    {
      if (*v31)
      {
        CFRelease(*v31);
        *BOOL v31 = 0;
      }
      ++v31;
      --v27;
    }
    while (v27);
  }
  return v30;
}

uint64_t VideoMentorSetModeToDoNothing(uint64_t a1, CFDictionaryRef theDict, const void *a3)
{
  if (theDict)
  {
    CMTime v6 = (const void *)*MEMORY[0x1E4F1CFD0];
    Boolean Value = CFDictionaryGetValue(theDict, @"AbortReading");
    BOOL v8 = v6 == CFDictionaryGetValue(theDict, @"SynchronouslyAbortReading");
    int v9 = v6 == Value || v8;
  }
  else
  {
    int v9 = 0;
    LOBYTE(v8) = 0;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 96));
  if (!*(unsigned char *)a1)
  {
    CMTime v10 = *(const void **)(a1 + 472);
    *(void *)(a1 + 472) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (v10) {
      CFRelease(v10);
    }
    *(_DWORD *)(a1 + 112) = 0;
    *(unsigned char *)(a1 + 116) = 1;
    *(unsigned char *)(a1 + 117) = v9;
    FigMemoryBarrier();
  }
  MEMORY[0x19970E930](*(void *)(a1 + 96));
  FigSemaphoreSignal();
  if (v9)
  {
    unsigned int v11 = 0;
    do
    {
      if (!*(unsigned char *)(a1 + 116)) {
        break;
      }
      FigThreadAbort();
      if (*(unsigned char *)(a1 + 116)) {
        FigSemaphoreWaitRelative();
      }
      BOOL v12 = v11++ >= 4;
    }
    while (!v12 || v8);
  }
  return 0;
}

uint64_t VideoMentorSetModeToScrub(uint64_t a1, uint64_t a2, long long *a3, CFDictionaryRef theDict, const void *a5, const void *a6, const void *a7)
{
  CFTypeRef cf = 0;
  if (theDict
    && (Boolean Value = CFDictionaryGetValue(theDict, @"ScrubPolicy")) != 0
    && (uint64_t v13 = Value, !CFEqual(Value, @"FrameAccurate")))
  {
    if (CFEqual(v13, @"NearestIFrame")) {
      int v14 = 1;
    }
    else {
      int v14 = 2 * (CFEqual(v13, @"BlendFrames") != 0);
    }
  }
  else
  {
    int v14 = 0;
  }
  unsigned int v15 = audioMentorGetModeChangePolicy(theDict);
  BOOL IsCursorAccuracyExact = videoMentorIsCursorAccuracyExact(theDict);
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetInt32IfPresent();
  long long v30 = *MEMORY[0x1E4F1F9F8];
  uint64_t v31 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  if (theDict) {
    FigCFDictionaryGetCMTimeIfPresent();
  }
  if (a2
    && ((uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v18 = 0) : (v18 = v17),
        (unsigned int v19 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v18 + 8)) == 0 || v19(a2, &cf)))
  {
    uint64_t v26 = FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(a1 + 96));
    if (!*(unsigned char *)a1)
    {
      BOOL v20 = *(const void **)(a1 + 128);
      CFTypeRef v21 = cf;
      *(void *)(a1 + 128) = cf;
      if (v21) {
        CFRetain(v21);
      }
      if (v20) {
        CFRelease(v20);
      }
      long long v22 = *a3;
      *(void *)(a1 + 152) = *((void *)a3 + 2);
      *(_OWORD *)(a1 + 136) = v22;
      *(_DWORD *)(a1 + 160) = v14;
      *(_DWORD *)(a1 + 244) = v15;
      *(unsigned char *)(a1 + 372) = IsCursorAccuracyExact;
      *(unsigned char *)(a1 + 373) = 1;
      *(_OWORD *)(a1 + 428) = v30;
      *(void *)(a1 + 444) = v31;
      *(_DWORD *)(a1 + 452) = 0;
      uint64_t v23 = *(const void **)(a1 + 464);
      *(void *)(a1 + 464) = a5;
      if (a5) {
        CFRetain(a5);
      }
      if (v23) {
        CFRelease(v23);
      }
      char v24 = *(const void **)(a1 + 472);
      *(void *)(a1 + 472) = a6;
      if (a6) {
        CFRetain(a6);
      }
      if (v24) {
        CFRelease(v24);
      }
      CFTypeRef v25 = *(const void **)(a1 + 480);
      *(void *)(a1 + 480) = a7;
      if (a7) {
        CFRetain(a7);
      }
      if (v25) {
        CFRelease(v25);
      }
      *(_DWORD *)(a1 + 112) = 1;
      *(unsigned char *)(a1 + 116) = 1;
      FigMemoryBarrier();
    }
    MEMORY[0x19970E930](*(void *)(a1 + 96));
    FigSemaphoreSignal();
    uint64_t v26 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v26;
}

BOOL videoMentorIsCursorAccuracyExact(const __CFDictionary *a1)
{
  BOOL result = 0;
  if (a1)
  {
    CFDictionaryGetValue(a1, @"CursorAccuracy");
    if (FigCFEqual()) {
      return 1;
    }
  }
  return result;
}

uint64_t FigSampleCursorGetDependencyInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  BOOL v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64);
  if (!v12) {
    return 4294954514;
  }

  return v12(a1, a2, a3, a4, a5);
}

uint64_t videoMentorSimulateFrame(uint64_t a1, unsigned char *a2, uint64_t a3, unsigned char *a4, unsigned char *a5)
{
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  __int16 v32 = 0;
  __int16 v31 = 0;
  BOOL v30 = 0;
  if (*(void *)(v11 + 72))
  {
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    unsigned int v19 = *(uint64_t (**)(uint64_t, char *, __int16 *, void))(v13 + 72);
    if (!v19) {
      goto LABEL_44;
    }
    uint64_t v17 = v19(a1, (char *)&v32 + 1, &v32, 0);
    if (v17) {
      goto LABEL_45;
    }
    int v20 = HIBYTE(v32);
    switch(HIBYTE(v32))
    {
      case 'B':
        goto LABEL_30;
      case 'I':
        if ((_BYTE)v32) {
          CFTypeRef v21 = a2;
        }
        else {
          CFTypeRef v21 = a5;
        }
        break;
      case 'P':
        CFTypeRef v21 = a5;
        if (!*a2) {
          goto LABEL_30;
        }
        break;
      default:
        return FigSignalErrorAt();
    }
    *CFTypeRef v21 = 1;
LABEL_30:
    BOOL v30 = v20 == 66;
    goto LABEL_31;
  }
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  long long v16 = *(uint64_t (**)(uint64_t, char *, __int16 *, void, BOOL *))(v15 + 64);
  if (!v16) {
    goto LABEL_44;
  }
  uint64_t v17 = v16(a1, (char *)&v31 + 1, &v31, 0, &v30);
  if (v17) {
    goto LABEL_45;
  }
  if (HIBYTE(v31))
  {
    if (*a5) {
      goto LABEL_42;
    }
    if (!videoMentorSyncFrameIsOpenGOP(a1)) {
      goto LABEL_17;
    }
    if ((*(_DWORD *)(a3 + 12) & 0x1D) == 1)
    {
      uint64_t v18 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)a3 = *MEMORY[0x1E4F1F9F8];
      *(void *)(a3 + 16) = *(void *)(v18 + 16);
LABEL_17:
      *a5 = 1;
      goto LABEL_42;
    }
    uint64_t PresentationTimeStamp = FigSampleCursorGetPresentationTimeStamp(a1, a3);
    if (PresentationTimeStamp)
    {
      uint64_t v17 = PresentationTimeStamp;
      goto LABEL_45;
    }
    if ((*(_DWORD *)(a3 + 12) & 0x1D) != 1) {
      return FigSignalErrorAt();
    }
  }
LABEL_31:
  if (!*a5 && (*(_DWORD *)(a3 + 12) & 0x1D) == 1)
  {
    CMTime v29 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v22) {
      uint64_t v23 = v22;
    }
    else {
      uint64_t v23 = 0;
    }
    CFTypeRef v25 = *(uint64_t (**)(uint64_t, CMTime *))(v23 + 40);
    if (v25)
    {
      uint64_t v17 = v25(a1, &v29);
      if (!v17)
      {
        if ((v29.flags & 0x1D) == 1)
        {
          CMTime time1 = v29;
          CMTime v27 = *(CMTime *)a3;
          if (CMTimeCompare(&time1, &v27) < 0)
          {
            uint64_t v17 = 0;
            *a4 = 0;
            return v17;
          }
          goto LABEL_42;
        }
        return FigSignalErrorAt();
      }
LABEL_45:
      FigSignalErrorAt();
      return v17;
    }
LABEL_44:
    uint64_t v17 = 4294954514;
    goto LABEL_45;
  }
LABEL_42:
  uint64_t v17 = 0;
  if (!v30) {
    *a4 = 1;
  }
  return v17;
}

uint64_t videoMentorThreadGenerateAndEnqueueFrame(uint64_t a1, const void *a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13)
{
  CMTime v29 = 0;
  if (videoMentorThreadWaitForOutputQueueToDropBelowHighWater(a1, a13)) {
    return 0xFFFFFFFFLL;
  }
  long long v27 = *(_OWORD *)a10;
  uint64_t v28 = *(void *)(a10 + 16);
  long long v25 = *(_OWORD *)a11;
  uint64_t v26 = *(void *)(a11 + 16);
  long long v23 = *(_OWORD *)a12;
  uint64_t v24 = *(void *)(a12 + 16);
  uint64_t v21 = videoMentorThreadCreateSampleBuffer(a1, (uint64_t)a2, a3, a9, &v27, &v25, &v23, a7, (uint64_t)a13, (uint64_t)&v29);
  if (!v21)
  {
    if (a7) {
      CMSetAttachment(v29, (CFStringRef)*MEMORY[0x1E4F1F2C8], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
    }
    uint64_t v21 = videoMentorThreadSendSampleBuffer(a1, (CMSampleBufferRef)v29, a2, a3, a4, a5, a6, a8);
    if (!v21) {
      ++*(_DWORD *)(a1 + 524);
    }
  }
  if (v29) {
    CFRelease(v29);
  }
  return v21;
}

uint64_t videoMentorThreadWaitForOutputQueueToDropBelowHighWater(uint64_t a1, const void *a2)
{
  if (*(unsigned char *)(a1 + 116)) {
    return 0xFFFFFFFFLL;
  }
  if ((*(_DWORD *)(a1 + 496) | 2) == 3)
  {
    uint64_t v5 = *(void *)(a1 + 24);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v7 = v6 ? v6 : 0;
    BOOL v8 = *(unsigned int (**)(uint64_t))(v7 + 24);
    if (!v8 || !v8(v5)) {
      videoMentorThreadFinishPreroll(a1, 2, a2);
    }
  }
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t))(v11 + 16);
  if (!v12) {
    return 0;
  }
  uint64_t result = v12(v9);
  if (result)
  {
    if (!*(unsigned char *)a1)
    {
      uint64_t v13 = FigMentorNotificationPayloadCreate(@"MentorPausingDueToHighWaterLevel", a2, 0, *(unsigned __int8 *)(a1 + 520), 0, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      if (v13) {
        CFRelease(v13);
      }
    }
    uint64_t v14 = (_DWORD *)MEMORY[0x1E4F1EBA8];
    if (*MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    while (1)
    {
      FigSemaphoreWaitRelative();
      if (*(unsigned char *)(a1 + 116)) {
        break;
      }
      uint64_t v15 = *(void *)(a1 + 24);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = *(unsigned int (**)(uint64_t))(v17 + 16);
      if (!v18 || !v18(v15))
      {
        if (*v14 == 1) {
          kdebug_trace();
        }
        uint64_t result = 0;
        *(_DWORD *)(a1 + 524) = 0;
        if (!*(unsigned char *)a1)
        {
          unsigned int v19 = FigMentorNotificationPayloadCreate(@"MentorResumingAfterHighWaterLevel", a2, 0, *(unsigned __int8 *)(a1 + 520), 0, 0);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v19) {
            CFRelease(v19);
          }
          return 0;
        }
        return result;
      }
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t videoMentorThreadCreateSampleBuffer(uint64_t a1, uint64_t a2, int a3, int a4, long long *a5, long long *a6, long long *a7, char a8, uint64_t a9, uint64_t a10)
{
  if (*(unsigned char *)(a1 + 116)) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v20 = a1;
  BOOL v13 = a3 == 1;
  if (!a4) {
    BOOL v13 = 0;
  }
  uint64_t v26 = *((void *)a7 + 2);
  BOOL v27 = v13;
  if (a4) {
    BOOL v14 = a3 == 0;
  }
  else {
    BOOL v14 = 0;
  }
  BYTE1(v27) = v14;
  long long v21 = *a5;
  uint64_t v22 = *((void *)a5 + 2);
  long long v23 = *a6;
  uint64_t v24 = *((void *)a6 + 2);
  long long v25 = *a7;
  BYTE2(v27) = a8;
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = *(unsigned int *)(a1 + 496);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  unsigned int v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, void, uint64_t (*)(uint64_t, uint64_t, void *), uint64_t *, uint64_t, uint64_t))(v18 + 8);
  if (!v19 || v19(v15, a2, 1, 1, 0, 0, v16, 0, videoMentorRemapSBufTiming, &v20, a9, a10)) {
    return FigSignalErrorAt();
  }
  if (*(void *)(a1 + 48)) {
    FigSampleBufferSetDecryptor();
  }
  uint64_t result = 0;
  ++*(_DWORD *)(a1 + 896);
  return result;
}

uint64_t sgffr_generateSingleSampleBuffer(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t (*a5)(uint64_t, uint64_t, CMSampleBufferRef), uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  v122[0] = a3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v120 = 0;
  CMTimeValue v121 = 0;
  memset(&sampleTimingArray, 0, sizeof(sampleTimingArray));
  size_t v117 = 0;
  size_t v118 = 0;
  int v115 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CMSampleBufferRef v113 = 0;
  CMBlockBufferRef v114 = 0;
  int v111 = 0;
  CFTypeRef v109 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v107 = 0;
  CFTypeRef v108 = 0;
  unsigned __int8 v106 = 0;
  CFTypeRef v105 = 0;
  int v17 = *(unsigned __int8 *)(DerivedStorage + 32);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v112 = 0;
  uint64_t v20 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v19 + 160);
  if (!v20)
  {
    PTSAndDTSAndint Duration = 4294954514;
    goto LABEL_20;
  }
  uint64_t v101 = a7;
  PTSAndDTSAndint Duration = v20(a2, &v109);
  if (PTSAndDTSAndDuration)
  {
LABEL_20:
    FigSignalErrorAt();
    goto LABEL_21;
  }
  uint64_t v99 = a8;
  char v100 = a4;
  if (!*(unsigned char *)(DerivedStorage + 33)
    && *(unsigned char *)(DerivedStorage + 34)
    && CMFormatDescriptionGetMediaType((CMFormatDescriptionRef)v109) == 1986618469
    && (CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)v109),
        (CFDictionaryRef DescriptionWithPixelFormatType = (const __CFDictionary *)CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()) != 0))
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(DescriptionWithPixelFormatType, (const void *)*MEMORY[0x1E4F24EE0]);
    if (Value)
    {
      CFArrayRef v30 = Value;
      CFTypeID v31 = CFGetTypeID(Value);
      if (v31 == CFArrayGetTypeID() && CFArrayGetCount(v30) == 2)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v30, 0);
        if (ValueAtIndex)
        {
          CFTypeID v33 = CFGetTypeID(ValueAtIndex);
          if (v33 == CFDictionaryGetTypeID())
          {
            long long v34 = CFArrayGetValueAtIndex(v30, 1);
            if (v34)
            {
              CFTypeID v35 = CFGetTypeID(v34);
              if (v35 == CFDictionaryGetTypeID())
              {
                LODWORD(destination.duration.value) = 0;
                FigCFDictionaryGetInt32IfPresent();
                FigCFDictionaryGetInt32IfPresent();
                int v22 = 0;
                char v23 = 0;
                goto LABEL_9;
              }
            }
          }
        }
      }
    }
    int v22 = 0;
  }
  else
  {
    int v22 = 1;
  }
  char v23 = 1;
LABEL_9:
  PTSAndDTSAndint Duration = sgffr_copyCursorSampleLocationAndDataSource(a1, a2, v22, &v121, &v118, (char *)&v106, &v120, &v117, &cf, &v107, &v108);
  if (!PTSAndDTSAndDuration)
  {
    size_t v97 = v118;
    CMTimeValue v98 = v121;
    PTSAndDTSAndint Duration = sgffr_getPTSAndDTSAndDuration(DerivedStorage, a2, (uint64_t)&sampleTimingArray);
    if (!PTSAndDTSAndDuration)
    {
      if (!*(unsigned char *)(DerivedStorage + 33))
      {
        uint64_t BlockBuffer = sgffr_checkByteRangeForByteStream(DerivedStorage, (uint64_t)v107, v98, v97);
        if (BlockBuffer) {
          goto LABEL_157;
        }
      }
      if (a3 == 3) {
        sgffr_checkDataAvailability(a1, (uint64_t)v108, (uint64_t)v107, v98, v97, v122);
      }
      if (v22)
      {
        if (v17)
        {
          PTSAndDTSAndint Duration = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)DerivedStorage, 0, 0, &blockBufferOut);
          if (PTSAndDTSAndDuration) {
            goto LABEL_21;
          }
          Boolean v25 = 0;
          int v26 = v106 != 0;
          goto LABEL_119;
        }
        if (*(unsigned char *)(DerivedStorage + 33))
        {
          int v26 = v106;
          if (!v106)
          {
LABEL_118:
            Boolean v25 = 1;
LABEL_119:
            BOOL v71 = v26 == 0;
            CMItemCount v72 = v26 == 0;
            if (v71) {
              int v73 = blockBufferOut;
            }
            else {
              int v73 = 0;
            }
            sampleSizeArraCGFloat y = &v118;
            if (!v71) {
              sampleSizeArraCGFloat y = 0;
            }
            PTSAndDTSAndint Duration = CMSampleBufferCreate(*(CFAllocatorRef *)DerivedStorage, v73, v25, 0, 0, (CMFormatDescriptionRef)v109, 1, 1, &sampleTimingArray, v72, sampleSizeArray, &v113);
            if (PTSAndDTSAndDuration) {
              goto LABEL_21;
            }
            goto LABEL_127;
          }
          size_t v103 = 0;
          destination.duration.CMTimeValue value = 0;
          uint64_t BlockBuffer = CMByteStreamReadAndCreateBlockBuffer((uint64_t)v107, v117, v120, (uint64_t)&v115);
          if (BlockBuffer) {
            goto LABEL_157;
          }
          uint64_t BlockBuffer = sgffr_refineAndVerifySampleLocation(a2, 0, v115, v121, v118, v120, v117, &destination, &v103);
          if (BlockBuffer) {
            goto LABEL_157;
          }
        }
        else
        {
          uint64_t v69 = sgffr_readFromByteStreamCreatingBlockBuffer(DerivedStorage, (uint64_t)v107, v97, v98, &blockBufferOut);
          if (!v106)
          {
            PTSAndDTSAndint Duration = v69;
            if (v69) {
              goto LABEL_20;
            }
            int v26 = 0;
            goto LABEL_118;
          }
          size_t v103 = 0;
          destination.duration.CMTimeValue value = 0;
          uint64_t BlockBuffer = sgffr_refineAndVerifySampleLocation(a2, blockBufferOut, 0, v121, v118, v120, v117, &destination, &v103);
          if (BlockBuffer) {
            goto LABEL_157;
          }
          uint64_t BlockBuffer = sgffr_createBlockBufferWithBufferReference(*(const __CFAllocator **)DerivedStorage, blockBufferOut, destination.duration.value - v121, v103, &v114);
          if (BlockBuffer) {
            goto LABEL_157;
          }
          CMBlockBufferRef v70 = blockBufferOut;
          CMBlockBufferRef blockBufferOut = v114;
          if (v114) {
            CFRetain(v114);
          }
          if (v70) {
            CFRelease(v70);
          }
        }
        int v26 = 0;
        CMTimeValue v98 = destination.duration.value;
        CMTimeValue v121 = destination.duration.value;
        size_t v97 = v103;
        size_t v118 = v103;
        goto LABEL_118;
      }
      if (v106)
      {
        uint64_t BlockBuffer = FigSignalErrorAt();
        if (BlockBuffer) {
          goto LABEL_157;
        }
      }
      if (v23)
      {
        if (v17)
        {
          CMSampleTimingInfo destination = sampleTimingArray;
          uint64_t BlockBuffer = createSampleBufferForUncompressed(a1, v97, (const opaqueCMFormatDescription *)v109, 0, &destination, &v113, &blockBufferOut);
          if (!BlockBuffer)
          {
            int v17 = 1;
            goto LABEL_127;
          }
LABEL_157:
          PTSAndDTSAndint Duration = BlockBuffer;
          goto LABEL_21;
        }
        CMSampleTimingInfo destination = sampleTimingArray;
        uint64_t BlockBuffer = createSampleBufferForUncompressed(a1, v97, (const opaqueCMFormatDescription *)v109, 1u, &destination, &v113, 0);
        if (BlockBuffer) {
          goto LABEL_157;
        }
        ImageBuffer = CMSampleBufferGetImageBuffer(v113);
        if (ImageBuffer)
        {
          uint64_t v40 = ImageBuffer;
          uint64_t BlockBuffer = CVPixelBufferLockBaseAddress(ImageBuffer, 0);
          if (BlockBuffer) {
            goto LABEL_157;
          }
          BaseAddress = CVPixelBufferGetBaseAddress(v40);
          if (!BaseAddress)
          {
            PTSAndDTSAndint Duration = 4294954744;
            goto LABEL_71;
          }
          uint64_t v42 = CMByteStreamRead((uint64_t)v107, v97, v98, (uint64_t)BaseAddress);
          if (v42)
          {
            PTSAndDTSAndint Duration = v42;
            FigSignalErrorAt();
LABEL_71:
            CVPixelBufferUnlockBaseAddress(v40, 0);
            goto LABEL_21;
          }
          CVPixelBufferUnlockBaseAddress(v40, 0);
          int v17 = 0;
LABEL_127:
          if (a5)
          {
            uint64_t v75 = a5(a6, v101, v113);
            if (v75)
            {
              PTSAndDTSAndint Duration = v75;
              goto LABEL_20;
            }
          }
          if (!v17) {
            goto LABEL_150;
          }
          uint64_t TimeNeededInNanosecondsAndReadSchedulerFlags = sgffr_getTimeNeededInNanosecondsAndReadSchedulerFlags(DerivedStorage, v113, v122[0], v100, a2, &v111);
          uint64_t v77 = malloc_type_calloc(1uLL, 0x40uLL, 0x1020040A1797456uLL);
          if (v77)
          {
            uint64_t v78 = v77;
            int v79 = v113;
            *uint64_t v78 = v113;
            v78[1] = CMSampleBufferGetImageBuffer(v79);
            int v80 = v106;
            unsigned int v81 = (CFTypeRef *)(v78 + 2);
            *((unsigned char *)v78 + 24) = v106;
            size_t v82 = v117;
            v78[4] = v120;
            v78[5] = v82;
            size_t v83 = v118;
            v78[6] = v121;
            v78[7] = v83;
            if (v80)
            {
              uint64_t v84 = FigSampleCursorCopy(a2, (uint64_t)(v78 + 2));
              if (v84)
              {
                PTSAndDTSAndint Duration = v84;
LABEL_148:
                free(v78);
                goto LABEL_21;
              }
            }
            if (*v78) {
              CFRetain((CFTypeRef)*v78);
            }
            CVPixelBufferRef v85 = (const void *)v78[1];
            if (v85) {
              CFRetain(v85);
            }
            sgffr_rememberScheduledIOForSampleBuffer(v108, v113);
            if (v99) {
              uint64_t v86 = FigScheduledIOBatchAddRead(v99, v98, v97, (uint64_t)blockBufferOut, a1, (uint64_t)v78, TimeNeededInNanosecondsAndReadSchedulerFlags, v111, (uint64_t)&v112);
            }
            else {
              uint64_t v86 = FigScheduledIORequestRead((uint64_t)v108, v98, v97, (uint64_t)blockBufferOut, a1, (uint64_t)v78, TimeNeededInNanosecondsAndReadSchedulerFlags, v111, (uint64_t)&v112);
            }
            PTSAndDTSAndint Duration = v86;
            if (v86)
            {
              FigSignalErrorAt();
              sgffr_forgetScheduledIOForSampleBuffer(v113);
              if (*v78) {
                CFRelease((CFTypeRef)*v78);
              }
              unint64_t v87 = (const void *)v78[1];
              if (v87) {
                CFRelease(v87);
              }
              if (*v81) {
                CFRelease(*v81);
              }
              goto LABEL_148;
            }
            CMSampleBufferSetInvalidateCallback(v113, (CMSampleBufferInvalidateCallback)sgffr_invalidateSampleBuffer, v112);
LABEL_150:
            sgffr_attachMediaSampleAttachmentsToSampleBuffer(DerivedStorage, a2, v113, 0);
            sgffr_setSampleBufferAttachments(DerivedStorage, v113, cf, v98);
            PTSAndDTSAndint Duration = 0;
            *a9 = v113;
            CMSampleBufferRef v113 = 0;
            goto LABEL_23;
          }
          uint64_t BlockBuffer = FigSignalErrorAt();
          goto LABEL_157;
        }
      }
      else
      {
        CFTypeRef v36 = v107;
        uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v37) {
          uint64_t v38 = v37;
        }
        else {
          uint64_t v38 = 0;
        }
        uint64_t v43 = *(uint64_t (**)(CFTypeRef, size_t, CMTimeValue, CFTypeRef *, void))(v38 + 32);
        if (!v43)
        {
          PTSAndDTSAndint Duration = 4294954514;
          goto LABEL_21;
        }
        uint64_t BlockBuffer = v43(v36, v97, v98, &v105, 0);
        if (BlockBuffer) {
          goto LABEL_157;
        }
        CMSampleTimingInfo destination = sampleTimingArray;
        uint64_t BlockBuffer = createSampleBufferForUncompressed(a1, v97, (const opaqueCMFormatDescription *)v109, 1u, &destination, &v113, 0);
        if (BlockBuffer) {
          goto LABEL_157;
        }
        CVImageBufferRef v44 = CMSampleBufferGetImageBuffer(v113);
        if (v44)
        {
          uint64_t v45 = v44;
          theSourceBuffer = (OpaqueCMBlockBuffer *)v105;
          size_t DataLength = CMBlockBufferGetDataLength((CMBlockBufferRef)v105);
          CVPixelBufferRef pixelBuffer = (CVPixelBufferRef)CVPixelBufferGetWidthOfPlane(v45, 0);
          size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v45, 0);
          size_t v48 = CVPixelBufferGetHeightOfPlane(v45, 1uLL);
          size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v45, 0);
          size_t v95 = CVPixelBufferGetBytesPerRowOfPlane(v45, 1uLL);
          if (DataLength < 0x10) {
            goto LABEL_153;
          }
          *(_OWORD *)&destination.duration.CMTimeValue value = 0uLL;
          uint64_t BlockBuffer = CMBlockBufferCopyDataBytes(theSourceBuffer, 0, 0x10uLL, &destination);
          if (BlockBuffer) {
            goto LABEL_157;
          }
          size_t v49 = bswap32(destination.duration.value);
          if (v49 < 0x10) {
            goto LABEL_153;
          }
          unint64_t v50 = bswap32(HIDWORD(destination.duration.value));
          if ((unint64_t)pixelBuffer > v50) {
            goto LABEL_153;
          }
          size_t v51 = DataLength;
          size_t v52 = bswap32(destination.duration.timescale);
          if (v52 < 0x10 || v51 <= v49 || v51 <= v52) {
            goto LABEL_153;
          }
          BOOL v53 = !is_mul_ok(HeightOfPlane, v50);
          uint64_t v54 = (uint64_t)(HeightOfPlane * v50) >> 63;
          uint64_t v55 = HeightOfPlane * v50 + v49;
          if (__CFADD__(HeightOfPlane * v50, v49)) {
            LOBYTE(v54) = v54 + 1;
          }
          if (v53
            || ((HeightOfPlane * v50) & 0x8000000000000000) != 0
            || ((v54 ^ (v55 >> 63)) & 1) != 0
            || v55 > v52)
          {
            goto LABEL_153;
          }
          unint64_t v56 = bswap32(destination.duration.flags);
          BOOL v57 = !is_mul_ok(v48, v56);
          uint64_t v58 = (uint64_t)(v48 * v56) >> 63;
          uint64_t v59 = v48 * v56 + v52;
          if (__CFADD__(v48 * v56, v52)) {
            LOBYTE(v58) = v58 + 1;
          }
          if (v57
            || ((v48 * v56) & 0x8000000000000000) != 0
            || ((v58 ^ (v59 >> 63)) & 1) != 0
            || v51 < v59)
          {
LABEL_153:
            uint64_t BlockBuffer = FigSignalErrorAt();
            int v17 = 0;
            if (BlockBuffer) {
              goto LABEL_157;
            }
          }
          else
          {
            size_t v88 = v48;
            unint64_t v91 = v50;
            CFIndex v92 = a5;
            if (BytesPerRowOfPlane >= v50) {
              size_t v60 = v50;
            }
            else {
              size_t v60 = BytesPerRowOfPlane;
            }
            size_t v61 = v95;
            if (v95 >= v56) {
              size_t v61 = v56;
            }
            size_t v89 = v61;
            unint64_t v90 = v56;
            uint64_t BlockBuffer = CVPixelBufferLockBaseAddress(v45, 0);
            if (BlockBuffer) {
              goto LABEL_157;
            }
            BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v45, 0);
            unint64_t v63 = v91;
            if (HeightOfPlane)
            {
              CFTypeRef v64 = BaseAddressOfPlane;
              do
              {
                unint64_t v65 = v63;
                CMBlockBufferCopyDataBytes(theSourceBuffer, v49, v60, v64);
                unint64_t v63 = v65;
                v49 += v65;
                v64 += BytesPerRowOfPlane;
                --HeightOfPlane;
              }
              while (HeightOfPlane);
            }
            CMTimeRange v66 = (char *)CVPixelBufferGetBaseAddressOfPlane(v45, 1uLL);
            size_t v67 = v88;
            if (v88)
            {
              CMTimeRange v68 = v66;
              do
              {
                CMBlockBufferCopyDataBytes(theSourceBuffer, v52, v89, v68);
                v52 += v90;
                v68 += v95;
                --v67;
              }
              while (v67);
            }
            CVPixelBufferUnlockBaseAddress(v45, 0);
            int v17 = 0;
            a5 = v92;
          }
          goto LABEL_127;
        }
      }
      PTSAndDTSAndint Duration = 4294954744;
    }
  }
LABEL_21:
  if (v113) {
    CFRelease(v113);
  }
LABEL_23:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v114) {
    CFRelease(v114);
  }
  if (v115) {
    CFRelease(v115);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v107) {
    CFRelease(v107);
  }
  if (v108) {
    CFRelease(v108);
  }
  if (v109) {
    CFRelease(v109);
  }
  if (v105) {
    CFRelease(v105);
  }
  return PTSAndDTSAndDuration;
}

uint64_t videoMentorRemapSBufTiming(uint64_t a1, uint64_t a2, void *target)
{
  uint64_t v6 = *(void **)a1;
  memset(&v29, 0, sizeof(v29));
  memset(&v28, 0, sizeof(v28));
  memset(&v27, 0, sizeof(v27));
  uint64_t v7 = (const void **)MEMORY[0x1E4F1CFD0];
  BOOL v8 = (CFStringRef *)MEMORY[0x1E4F1F2C8];
  if (*(unsigned char *)(a1 + 82)) {
    CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F2C8], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
  }
  if ((*(_DWORD *)(a1 + 68) & 0x1D) == 1)
  {
    CMTime time1 = *(CMTime *)(a1 + 56);
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &time2))
    {
      memset(&time1, 0, sizeof(time1));
      CMSampleBufferGetOutputPresentationTimeStamp(&time1, (CMSampleBufferRef)target);
      CMTime lhs = time1;
      videoMentorRemapTime(v6, a2, 0, (long long *)&lhs.value, (uint64_t)&time2);
      CMTime time1 = time2;
      CMTime lhs = time2;
      CMTime rhs = *(CMTime *)(a1 + 56);
      CMTimeAdd(&time2, &lhs, &rhs);
      CMTime time1 = time2;
      CMTime lhs = time2;
      videoMentorRemapTime(v6, a2, 1, (long long *)&lhs.value, (uint64_t)&time2);
      CMTime time1 = time2;
      CMSampleBufferSetOutputPresentationTimeStamp((CMSampleBufferRef)target, &time2);
    }
  }
  if (!*(unsigned char *)(a1 + 81))
  {
    if (!*(unsigned char *)(a1 + 80)) {
      goto LABEL_25;
    }
    CMSampleBufferGetOutputDuration(&v27, (CMSampleBufferRef)target);
    goto LABEL_23;
  }
  CMSampleBufferGetOutputDuration(&v27, (CMSampleBufferRef)target);
  CFTypeRef v9 = *v7;
  if (v9 == CMGetAttachment(target, *v8, 0))
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v28, (CMSampleBufferRef)target);
    CMTime time1 = v28;
    CMTime time2 = v27;
    CMTimeSubtract(&v29, &time1, &time2);
  }
  else
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v29, (CMSampleBufferRef)target);
    CMTime time1 = v29;
    CMTime time2 = v27;
    CMTimeAdd(&v28, &time1, &time2);
  }
  uint64_t v10 = (_OWORD *)(a1 + 8);
  if ((*(_DWORD *)(a1 + 20) & 0x1D) == 1
    && (CMTime time1 = v29,
        *(_OWORD *)&time2.CMTimeValue value = *v10,
        time2.CMTimeEpoch epoch = *(void *)(a1 + 24),
        CMTimeCompare(&time1, &time2) < 0))
  {
    char v12 = 0;
    BOOL v11 = 0;
  }
  else
  {
    if ((*(_DWORD *)(a1 + 44) & 0x1D) == 1)
    {
      CMTime time1 = *(CMTime *)(a1 + 32);
      CMTime time2 = v29;
      BOOL v11 = CMTimeCompare(&time1, &time2) < 1;
    }
    else
    {
      BOOL v11 = 0;
    }
    char v12 = 1;
  }
  if ((*(_DWORD *)(a1 + 44) & 0x1D) == 1
    && (time1 = *(CMTime *)(a1 + 32), CMTime time2 = v28, CMTimeCompare(&time1, &time2) < 0))
  {
    char v13 = 0;
    if (v11)
    {
LABEL_23:
      CFStringRef v14 = (const __CFString *)*MEMORY[0x1E4F1F308];
      CMTime time1 = v27;
      p_CMTime time1 = &time1;
      CMAttachmentBearerRef v16 = target;
LABEL_24:
      audioMentorSetAttachmentAsFigTimeDictionary(v16, v14, p_time1);
      goto LABEL_25;
    }
  }
  else
  {
    if ((*(_DWORD *)(a1 + 20) & 0x1D) == 1)
    {
      CMTime time1 = v28;
      *(_OWORD *)&time2.CMTimeValue value = *v10;
      time2.CMTimeEpoch epoch = *(void *)(a1 + 24);
      if (CMTimeCompare(&time1, &time2) < 1) {
        goto LABEL_23;
      }
    }
    char v13 = 1;
    if (v11) {
      goto LABEL_23;
    }
  }
  if ((v12 & 1) == 0)
  {
    CFStringRef v19 = (const __CFString *)*MEMORY[0x1E4F1F308];
    *(_OWORD *)&time1.CMTimeValue value = *v10;
    time1.CMTimeEpoch epoch = *(void *)(a1 + 24);
    CMTime time2 = v29;
    CMTimeSubtract(&v22, &time1, &time2);
    audioMentorSetAttachmentAsFigTimeDictionary(target, v19, &v22);
  }
  if ((v13 & 1) == 0)
  {
    CFStringRef v20 = (const __CFString *)*MEMORY[0x1E4F1F300];
    CMTime time1 = v28;
    CMTime time2 = *(CMTime *)(a1 + 32);
    CMTimeSubtract(&v21, &time1, &time2);
    p_CMTime time1 = &v21;
    CMAttachmentBearerRef v16 = target;
    CFStringRef v14 = v20;
    goto LABEL_24;
  }
LABEL_25:
  MEMORY[0x19970E910](v6[10]);
  int v17 = (void (*)(void, uint64_t, void *))v6[7];
  if (v17) {
    v17(v6[9], a2, target);
  }
  MEMORY[0x19970E930](v6[10]);
  return 0;
}

uint64_t FigScheduledIORequestRead(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  CFStringRef v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void (*)(int, void *, OpaqueCMBlockBuffer *, int, OSStatus), uint64_t, uint64_t, uint64_t, int, uint64_t))(v18 + 16);
  if (v19) {
    return v19(a1, a2, a3, a4, sgffr_markSampleBufferReady, a5, a6, a7, a8, a9);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCRABSScheduledIORequestRead(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, void *a10)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v25[0] = a2;
  v25[1] = a3;
  uint64_t v17 = *(void *)DerivedStorage;
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  CFStringRef v20 = *(uint64_t (**)(uint64_t, void, uint64_t, void *))(v19 + 8);
  if (!v20) {
    return 4294954514;
  }
  uint64_t result = v20(v17, 4 * ((a9 & 0xC) != 0), 1, v25);
  if (!result)
  {
    CMTime v22 = malloc_type_calloc(1uLL, 0x50uLL, 0x10A0040CC388DE2uLL);
    if (v22)
    {
      uint64_t v23 = (uint64_t)v22;
      int v24 = FigAtomicIncrement32();
      *(_DWORD *)(v23 + 8) = v24;
      *(void *)uint64_t v23 = DerivedStorage;
      *(void *)(v23 + 24) = a2;
      *(void *)(v23 + 32) = a3;
      *(void *)(v23 + 40) = a5;
      *(void *)(v23 + 48) = a6;
      *(void *)(v23 + 56) = a7;
      *(_DWORD *)(v23 + 64) = a9;
      *(void *)(v23 + 72) = a4;
      if (a4)
      {
        CFRetain(a4);
        int v24 = *(_DWORD *)(v23 + 8);
      }
      *a10 = v24;
      if ((a9 & 0xC) != 0)
      {
        uint64_t result = MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
        if (!result)
        {
          *(void *)(v23 + 16) = 0;
          **(void **)(DerivedStorage + 32) = v23;
          *(void *)(DerivedStorage + 32) = v23 + 16;
          *(unsigned char *)(DerivedStorage + 12) = 1;
          MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
          return 0;
        }
      }
      else
      {
        siocrabsFinishUnlocked(DerivedStorage, 0, 0);
        return siocrabsFinish((uint64_t *)DerivedStorage, v23, 0, 0);
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t siocrabsFinish(uint64_t *a1, uint64_t a2, int a3, int a4)
{
  size_t lengthAtOffsetOut = 0;
  size_t dataLength = 0;
  CMBlockBufferRef targetBBuf = 0;
  dataPointerOut = 0;
  if (a3)
  {
    long long v40 = *(_OWORD *)(a2 + 24);
    uint64_t v8 = *a1;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 24);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    CMTime v21 = *(uint64_t (**)(uint64_t, uint64_t, long long *))(v10 + 16);
    if (v21)
    {
      OSStatus DataPointer = v21(v8, 1, &v40);
LABEL_18:
      unsigned int appended = DataPointer;
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  uint64_t v11 = FigCRABSGetByteStream(*a1);
  char v12 = *(OpaqueCMBlockBuffer **)(a2 + 72);
  if (!v12 || CMBlockBufferIsEmpty(v12))
  {
    while (1)
    {
      uint64_t v14 = *(void *)(a2 + 24);
      uint64_t v13 = *(void *)(a2 + 32);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v16 = v15 ? v15 : 0;
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, size_t *))(v16 + 32);
      if (!v17) {
        break;
      }
      unsigned int v18 = v17(v11, v13, v14, &targetBBuf, &dataLength);
      if (v18 != -12792)
      {
        unsigned int appended = v18;
        if (!v18)
        {
          CFStringRef v20 = *(OpaqueCMBlockBuffer **)(a2 + 72);
          if (v20)
          {
            unsigned int appended = CMBlockBufferAppendBufferReference(v20, targetBBuf, 0, dataLength, 0);
            if (targetBBuf) {
              CFRelease(targetBBuf);
            }
          }
          else
          {
            unsigned int appended = 0;
            *(void *)(a2 + 72) = targetBBuf;
          }
        }
        goto LABEL_34;
      }
    }
LABEL_33:
    unsigned int appended = -12782;
    goto LABEL_34;
  }
  unsigned int appended = CMBlockBufferAssureBlockMemory(*(CMBlockBufferRef *)(a2 + 72));
  if (appended) {
    goto LABEL_34;
  }
  if (*(void *)(a2 + 32))
  {
    size_t v23 = 0;
LABEL_22:
    OSStatus DataPointer = CMBlockBufferGetDataPointer(*(CMBlockBufferRef *)(a2 + 72), v23, &lengthAtOffsetOut, 0, &dataPointerOut);
    if (DataPointer) {
      goto LABEL_18;
    }
    if (lengthAtOffsetOut > *(void *)(a2 + 32) - v23) {
      size_t lengthAtOffsetOut = *(void *)(a2 + 32) - v23;
    }
    while (1)
    {
      Boolean v25 = dataPointerOut;
      size_t v24 = lengthAtOffsetOut;
      uint64_t v26 = *(void *)(a2 + 24);
      uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v28 = v27 ? v27 : 0;
      CMTime v29 = *(uint64_t (**)(uint64_t, size_t, size_t, char *, void))(v28 + 8);
      if (!v29) {
        goto LABEL_33;
      }
      unsigned int v30 = v29(v11, v24, v23 + v26, v25, 0);
      if (v30 != -12792)
      {
        unsigned int appended = v30;
        if (!v30)
        {
          v23 += lengthAtOffsetOut;
          size_t dataLength = v23;
          if (v23 < *(void *)(a2 + 32)) {
            goto LABEL_22;
          }
        }
        goto LABEL_34;
      }
    }
  }
  unsigned int appended = 0;
LABEL_34:
  if (appended) {
    BOOL v31 = 1;
  }
  else {
    BOOL v31 = a3 == 0;
  }
  if (v31) {
    uint64_t v32 = appended;
  }
  else {
    uint64_t v32 = 4294954425;
  }
  uint64_t v33 = *(void *)(a2 + 48);
  uint64_t v34 = *(void *)(a2 + 56);
  CFTypeID v35 = *(const void **)(a2 + 72);
  if (v35)
  {
    CFTypeRef v36 = (OpaqueCMBlockBuffer *)CFRetain(v35);
    uint64_t v37 = *(const void **)(a2 + 72);
    CMBlockBufferRef targetBBuf = v36;
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, OpaqueCMBlockBuffer *, size_t, uint64_t))(a2 + 40);
    if (v37)
    {
      CFRelease(v37);
      CFTypeRef v36 = targetBBuf;
    }
  }
  else
  {
    CFTypeRef v36 = 0;
    CMBlockBufferRef targetBBuf = 0;
    uint64_t v38 = *(void (**)(uint64_t, uint64_t, OpaqueCMBlockBuffer *, size_t, uint64_t))(a2 + 40);
  }
  free((void *)a2);
  if (a4 || !v32)
  {
    v38(v33, v34, v36, dataLength, v32);
    CFTypeRef v36 = targetBBuf;
  }
  if (v36) {
    CFRelease(v36);
  }
  if (!MEMORY[0x19970E910](a1[2]))
  {
    if (!a1[3]) {
      *((unsigned char *)a1 + 12) = 0;
    }
    MEMORY[0x19970E930](a1[2]);
  }
  return v32;
}

void sgffr_markSampleBufferReady(int a1, void *a2, OpaqueCMBlockBuffer *a3, int a4, OSStatus status)
{
  uint64_t v9 = *(opaqueCMSampleBuffer **)a2;
  uint64_t v8 = (__CVBuffer *)*((void *)a2 + 1);
  CMBlockBufferRef dataBuffer = 0;
  if (v8) {
    CVPixelBufferUnlockBaseAddress(v8, 0);
  }
  if (status == -19283)
  {
    uint64_t v10 = v9;
    OSStatus v11 = -16751;
LABEL_16:
    CMSampleBufferSetDataFailed(v10, v11);
    goto LABEL_17;
  }
  if (status) {
    goto LABEL_15;
  }
  if (v8)
  {
LABEL_6:
    CMSampleBufferSetDataReady(v9);
    goto LABEL_17;
  }
  if (!CMSampleBufferIsValid(v9)) {
    goto LABEL_17;
  }
  if (!*((unsigned char *)a2 + 24)) {
    goto LABEL_6;
  }
  size_t v13 = 0;
  uint64_t v14 = 0;
  if (CMSampleBufferGetNumSamples(v9) != 1)
  {
    if (!FigSignalErrorAt()) {
      goto LABEL_17;
    }
LABEL_15:
    uint64_t v10 = v9;
    OSStatus v11 = status;
    goto LABEL_16;
  }
  if (sgffr_refineAndVerifySampleLocation(*((void *)a2 + 2), a3, 0, *((void *)a2 + 6), *((void *)a2 + 7), *((void *)a2 + 4), *((void *)a2 + 5), &v14, &v13)|| sgffr_createBlockBufferWithBufferReference((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a3, v14 - *((void *)a2 + 6), v13, &dataBuffer)|| CMSampleBufferSetDataBuffer(v9, dataBuffer)|| CMSampleBufferSetDataReadyWithNewSize())
  {
    goto LABEL_15;
  }
LABEL_17:
  sgffr_forgetScheduledIOForSampleBuffer(v9);
  if (v9) {
    CFRelease(v9);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (dataBuffer) {
    CFRelease(dataBuffer);
  }
  char v12 = (const void *)*((void *)a2 + 2);
  if (v12) {
    CFRelease(v12);
  }
  free(a2);
}

uint64_t videoMentorThreadSendSampleBuffer(uint64_t a1, CMSampleBufferRef sbuf, const void *a3, int a4, int a5, int a6, int a7, int a8)
{
  CMTime values = 0;
  SampleAttachmentsArraCGFloat y = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
  if (SampleAttachmentsArray
    && (CFArrayRef v16 = SampleAttachmentsArray, CFArrayGetCount(SampleAttachmentsArray) >= 1)
    && (CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, 0)) != 0
    && (const void *)*MEMORY[0x1E4F1CFD0] == CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F1F1B8]))
  {
    if (a5 == 1) {
      a5 = 0;
    }
    a4 = 4;
  }
  else
  {
    if ((a4 - 1) < 2)
    {
      unsigned int v18 = (const void **)MEMORY[0x1E4F1F1B8];
      goto LABEL_11;
    }
    if (a4 == 3)
    {
      unsigned int v18 = (const void **)MEMORY[0x1E4F1F1B0];
      goto LABEL_11;
    }
    if (a4 == 5)
    {
      unsigned int v18 = (const void **)MEMORY[0x1E4F219F0];
LABEL_11:
      videoMentorSetAttachmentOnSample(sbuf, *v18, (const void *)*MEMORY[0x1E4F1CFD0]);
    }
  }
  uint64_t v19 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if ((a5 - 1) <= 1)
  {
    CMTime v58 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMSampleBufferGetPresentationTimeStamp(&v58, sbuf);
    CFAllocatorRef v20 = *v19;
    CMTime time = v58;
    CFDictionaryRef v21 = CMTimeCopyAsDictionary(&time, v20);
    if (v21)
    {
      CFDictionaryRef v22 = v21;
      if (a5 == 1)
      {
        if (a3)
        {
          size_t v23 = malloc_type_calloc(1uLL, 0x40uLL, 0x1020040038FC326uLL);
          if (!v23) {
            goto LABEL_40;
          }
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v24) {
            uint64_t v25 = v24;
          }
          else {
            uint64_t v25 = 0;
          }
          CFTypeRef v36 = *(unsigned int (**)(const void *, void *))(v25 + 8);
          if (v36 && !v36(a3, v23 + 1) && !videoMentorGetCursorPTSRange(a3, (_OWORD *)v23 + 1))
          {
            videoMentorSetAttachmentOnSample(sbuf, (const void *)*MEMORY[0x1E4F21A00], v22);
LABEL_40:
            CFRelease(v22);
            if (!a6) {
              goto LABEL_41;
            }
            goto LABEL_20;
          }
          videoMentorSavedFrameDestroy(v23);
        }
      }
      else
      {
        videoMentorSetAttachmentOnSample(sbuf, (const void *)*MEMORY[0x1E4F219F8], v21);
      }
      size_t v23 = 0;
      goto LABEL_40;
    }
  }
  size_t v23 = 0;
  if (!a6)
  {
LABEL_41:
    CFDictionaryRef v27 = 0;
    goto LABEL_42;
  }
LABEL_20:
  ++*(_DWORD *)(a1 + 504);
  CFAllocatorRef v26 = *v19;
  CMTime values = CFNumberCreate(*v19, kCFNumberIntType, (const void *)(a1 + 504));
  CFDictionaryRef v27 = CFDictionaryCreate(v26, MEMORY[0x1E4F1F328], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CMSetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F2C0], values, 1u);
  uint64_t v28 = *(void *)(a1 + 24);
  uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v29) {
    uint64_t v30 = v29;
  }
  else {
    uint64_t v30 = 0;
  }
  BOOL v31 = *(void (**)(uint64_t, void, CFDictionaryRef, void))(v30 + 64);
  if (v31) {
    v31(v28, *MEMORY[0x1E4F1F340], v27, 0);
  }
  uint64_t v32 = *(void *)(a1 + 24);
  uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v33) {
    uint64_t v34 = v33;
  }
  else {
    uint64_t v34 = 0;
  }
  CFTypeID v35 = *(void (**)(uint64_t, void, void, void))(v34 + 64);
  if (v35) {
    v35(v32, *MEMORY[0x1E4F1F348], 0, 0);
  }
LABEL_42:
  if (*(unsigned char *)(a1 + 492))
  {
    videoMentorPostCollectorCoherenceConduitNotification(a1);
    *(unsigned char *)(a1 + 492) = 0;
  }
  if (a8) {
    CMSetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F2B8], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
  }
  uint64_t v37 = *(void *)(a1 + 24);
  uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v38) {
    uint64_t v39 = v38;
  }
  else {
    uint64_t v39 = 0;
  }
  long long v40 = *(unsigned int (**)(uint64_t, CMSampleBufferRef))(v39 + 8);
  if (!v40 || v40(v37, sbuf))
  {
    uint64_t v42 = FigSignalErrorAt();
  }
  else
  {
    *(unsigned char *)(a1 + 520) = 1;
    ++*(_DWORD *)(a1 + 900);
    if (v23)
    {
      void *v23 = *(void *)(a1 + 552);
      *(void *)(a1 + 552) = v23;
      ++*(_DWORD *)(a1 + 904);
    }
    if (a5 == 2) {
      ++*(_DWORD *)(a1 + 908);
    }
    if (a4 != 3) {
      goto LABEL_59;
    }
    memset(&v58, 0, sizeof(v58));
    CMSampleBufferGetOutputPresentationTimeStamp(&v58, sbuf);
    memset(&time, 0, sizeof(time));
    CMSampleBufferGetOutputDuration(&rhs, sbuf);
    CMTime lhs = v58;
    CMTimeAdd(&time, &lhs, &rhs);
    CMTime lhs = v58;
    uint64_t v41 = videoMentorEnqueueTimestampIntervalMarker(a1);
    if (v41)
    {
      uint64_t v42 = v41;
    }
    else
    {
LABEL_59:
      uint64_t v43 = *(const void **)(a1 + 536);
      if (v43)
      {
        CFRelease(v43);
        *(void *)(a1 + 536) = 0;
      }
      if (a3) {
        BOOL v44 = a7 == 0;
      }
      else {
        BOOL v44 = 1;
      }
      int v45 = !v44;
      if (!v44 && (a4 == 3 || !a4))
      {
        uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v47 = v46 ? v46 : 0;
        size_t v48 = *(void (**)(const void *, uint64_t))(v47 + 8);
        if (v48) {
          v48(a3, a1 + 536);
        }
      }
      if ((a5 - 4) <= 0xFFFFFFFD)
      {
        size_t v49 = *(const void **)(a1 + 528);
        if (v49)
        {
          CFRelease(v49);
          *(void *)(a1 + 528) = 0;
        }
        if (v45)
        {
          uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v51 = v50 ? v50 : 0;
          size_t v52 = *(void (**)(const void *, uint64_t))(v51 + 8);
          if (v52) {
            v52(a3, a1 + 528);
          }
        }
      }
      uint64_t v42 = 0;
    }
    size_t v23 = 0;
  }
  if (values) {
    CFRelease(values);
  }
  if (v27) {
    CFRelease(v27);
  }
  videoMentorSavedFrameDestroy(v23);
  return v42;
}

void videoMentorSetAttachmentOnSample(opaqueCMSampleBuffer *a1, const void *a2, const void *a3)
{
  SampleAttachmentsArraCGFloat y = CMSampleBufferGetSampleAttachmentsArray(a1, 1u);
  if (SampleAttachmentsArray)
  {
    CFDictionaryRef ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex(SampleAttachmentsArray, 0);
    if (ValueAtIndex)
    {
      CFDictionarySetValue(ValueAtIndex, a2, a3);
    }
  }
}

unsigned char *sbp_bq_InhibitOutputUntil()
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (unsigned char *)CMNotificationCenterPostNotification();
  }
  return result;
}

void vmc2InhibitOutputUntil(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  if (!*(unsigned char *)(a2 + 16))
  {
    MEMORY[0x19970E910](*(void *)(a2 + 776));
    uint64_t v7 = *(const void **)(a2 + 784);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a2 + 784) = 0;
    }
    if (a5)
    {
      CFArrayRef Value = CFDictionaryGetValue(a5, (const void *)*MEMORY[0x1E4F1F328]);
      if (Value)
      {
        ++*(_DWORD *)(a2 + 792);
        *(void *)(a2 + 784) = Value;
        CFRetain(Value);
      }
    }
    JUMPOUT(0x19970E930);
  }
}

unsigned char *sbp_bq_ResetOutput()
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (unsigned char *)CMNotificationCenterPostNotification();
  }
  return result;
}

void vmc2ResetOutput(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16))
  {
    vmc2InvokeOutputCallback_FlushOutput(a2);
    ++*(_DWORD *)(a2 + 524);
    MEMORY[0x19970E290](*(void *)(a2 + 280));
    uint64_t v3 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(a2 + 368) = *MEMORY[0x1E4F1F9F8];
    *(void *)(a2 + 384) = *(void *)(v3 + 16);
    MEMORY[0x19970E2B0](*(void *)(a2 + 280));
    vmc2ResetTroubleMonitorTimers(a2);
  }
}

uint64_t piqca_flush(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  ++*(_DWORD *)(DerivedStorage + 24);
  *(unsigned char *)(DerivedStorage + 135) = 0;
  if (*(unsigned char *)(DerivedStorage + 52)) {
    CAImageQueueFlush();
  }
  *(unsigned char *)(DerivedStorage + 50) = 1;
  piqca_postOccupancyChanged(a1);
  return 0;
}

unsigned char *sbp_bq_dataBecameReady()
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (unsigned char *)CMNotificationCenterPostNotification();
  }
  return result;
}

void vmc2InputDataBecameReady(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a2 + 16))
  {
    *(unsigned char *)(a2 + 592) = 1;
    vmc2TriggerSchedulingIfOutputIsLow(a2);
  }
}

uint64_t vmc2TriggerSchedulingIfOutputIsLow(uint64_t a1)
{
  uint64_t result = vmc2GetWaterLevelState(a1);
  if (!result || *(unsigned char *)(a1 + 440))
  {
    uint64_t v3 = *(void *)(a1 + 264);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v6 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v5 = v6;
    uint64_t v7 = v6 ? v5 : 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t))(v7 + 16);
    if (v8)
    {
      return v8(v3);
    }
  }
  return result;
}

void editMentorChildMentorStoppedDueToCompletion(int a1, uint64_t a2, int a3, int a4, CFDictionaryRef theDict)
{
  CFDictionaryRef v5 = theDict;
  v14[26] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  v14[0] = 0;
  int v13 = 1;
  if (theDict)
  {
    CFArrayRef Value = CFDictionaryGetValue(theDict, @"Mentor_Order");
    uint64_t v8 = CFDictionaryGetValue(v5, @"Mentor_SamplesWereGenerated");
    uint64_t v9 = (const void *)*MEMORY[0x1E4F1CFD0];
    BOOL v10 = v8 == (const void *)*MEMORY[0x1E4F1CFD0];
    LODWORD(v5) = CFDictionaryGetValue(v5, @"Mentor_LastsForever") == v9;
  }
  else
  {
    BOOL v10 = 0;
    CFArrayRef Value = 0;
  }
  if (dword_1E9350D58)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (editMentorChildOrderRefIsCurrent_RetainParentOrder(a2, Value, v14, &v13, editMentorSetModeChangePolicyToPreservePreviousOutput))
  {
    *(unsigned char *)(a2 + 296) = (v10 | *(unsigned __int8 *)(a2 + 296)) != 0;
    CFTypeRef v12 = v14[0];
    editMentorAdvanceToNextEdit(a2, v14[0], v13, !v10, (int)v5);
    if (!v12) {
      return;
    }
  }
  else
  {
    CFTypeRef v12 = v14[0];
    if (!v14[0]) {
      return;
    }
  }
  CFRelease(v12);
}

void editMentorSetModeChangePolicyToPreservePreviousOutput(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = *(__CFDictionary **)(a1 + 608);
  if (Mutable
    || (CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*(void *)(a1 + 608) = Mutable) != 0)|| (FigSignalErrorAt(), (CFMutableDictionaryRef Mutable = *(__CFDictionary **)(a1 + 608)) != 0))
  {
    CFDictionarySetValue(Mutable, @"ModeChangePolicy", @"PreservePreviousOutput");
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 608), @"SynchronouslyResetOutput", (const void *)*MEMORY[0x1E4F1CFC8]);
    uint64_t v3 = *(__CFDictionary **)(a1 + 608);
    CFDictionaryRemoveValue(v3, @"CollectorCoherenceToken");
  }
}

uint64_t editMentorStartNewChildOrder(uint64_t a1, uint64_t a2)
{
  MEMORY[0x19970E910](*(void *)(a1 + 312));
  if (*(void *)(a1 + 568) == a2) {
    editMentorBumpChildOrder(a1);
  }
  if (dword_1E9350D58)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return MEMORY[0x19970E930](*(void *)(a1 + 312));
}

void editMentorPostOrderCompletionNotification(uint64_t a1, const void *a2, int a3)
{
  CFDictionaryRef v5 = FigMentorNotificationPayloadCreate(@"MentorStoppingDueToCompletion", a2, 0, *(unsigned __int8 *)(a1 + 296), 0, a3);
  if (dword_1E9350D58)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(a1 + 680)) {
    editMentorPostSyntheticPrerollCompleteNotification(a1, a2);
  }
  uint64_t v7 = *(const void **)(a1 + 672);
  if (v7)
  {
    editMentorSetChildMentorModeToDoNothing(a1, 0, v7);
    uint64_t v8 = *(const void **)(a1 + 672);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 672) = 0;
    }
  }
  if (dword_1E9350D58 >= 2)
  {
    uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v5) {
    CFRelease(v5);
  }
}

uint64_t vmc2RecalculateUpcomingImageTimes(uint64_t a1)
{
  CMTime v23 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  CMTime v22 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
  MEMORY[0x19970E290](*(void *)(a1 + 280));
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFDictionaryRef v5 = *(unsigned int (**)(uint64_t))(v4 + 8);
  if (v5 && v5(v2))
  {
    uint64_t v6 = *(void *)(a1 + 88);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v19 = *(unsigned int (**)(uint64_t))(v8 + 16);
    BOOL v9 = v19 && v19(v6) || *(unsigned char *)(a1 + 730) != 0;
  }
  else
  {
    BOOL v9 = 0;
  }
  LOBYTE(v21.value) = 0;
  memset(&time1, 0, sizeof(time1));
  memset(&time2, 0, sizeof(time2));
  uint64_t v10 = *(void *)(a1 + 88);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  int v13 = *(void (**)(uint64_t, CMTime *, CMTime *, CMTime *))(v12 + 32);
  if (v13 && (v13(v10, &v21, &time1, &time2), LOBYTE(v21.value)) && (time1.flags & 1) != 0)
  {
    uint64_t v14 = 0;
    CMTime v23 = time1;
    CMTime v22 = time2;
  }
  else
  {
    uint64_t v14 = 1;
  }
  if ((*(_DWORD *)(a1 + 332) & 0x1D) == 1)
  {
    CMTime time1 = v23;
    CMTime time2 = *(CMTime *)(a1 + 320);
    CMTimeMinimum(&v23, &time1, &time2);
    CMTime time1 = v22;
    CMTime time2 = *(CMTime *)(a1 + 320);
    CMTimeMaximum(&v22, &time1, &time2);
    uint64_t v14 = 0;
    BOOL v9 = 0;
  }
  if ((*(_DWORD *)(a1 + 356) & 0x1D) == 1)
  {
    CMTime time2 = v23;
    CMTime v21 = *(CMTime *)(a1 + 344);
    CMTimeMinimum(&time1, &time2, &v21);
    CMTime v23 = time1;
    CMTime time2 = v22;
    CMTime v21 = *(CMTime *)(a1 + 344);
    CMTimeMaximum(&time1, &time2, &v21);
    CMTime v22 = time1;
    if ((*(_DWORD *)(a1 + 404) & 0x1D) != 1)
    {
      uint64_t v14 = 0;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if ((*(_DWORD *)(a1 + 404) & 0x1D) == 1)
  {
LABEL_22:
    CMTime time2 = v23;
    CMTime v21 = *(CMTime *)(a1 + 392);
    CMTimeMinimum(&time1, &time2, &v21);
    CMTime v23 = time1;
    CMTime time2 = v22;
    CMTime v21 = *(CMTime *)(a1 + 392);
    CMTimeMaximum(&time1, &time2, &v21);
    uint64_t v14 = 0;
    CMTime v22 = time1;
    goto LABEL_23;
  }
  if (!v9)
  {
LABEL_23:
    if ((*(_DWORD *)(a1 + 428) & 0x1D) == 1)
    {
      CMTime time2 = v23;
      CMTime v21 = *(CMTime *)(a1 + 416);
      CMTimeMinimum(&time1, &time2, &v21);
      CMTime v23 = time1;
      CMTime time2 = v22;
      CMTime v21 = *(CMTime *)(a1 + 416);
      CMTimeMaximum(&time1, &time2, &v21);
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      CMTime v22 = time1;
    }
    else
    {
      uint64_t v15 = 0;
    }
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 312)) {
    goto LABEL_30;
  }
  uint64_t v15 = 1;
LABEL_26:
  CMTime v21 = v23;
  CMTime v20 = v22;
  FigReadWriteLockLockForRead();
  if (*(unsigned char *)(a1 + 249))
  {
    CFArrayRef v16 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTime *, CMTime *))(a1 + 160);
    if (v16)
    {
      uint64_t v17 = *(void *)(a1 + 152);
      CMTime time1 = v21;
      CMTime time2 = v20;
      v16(v17, v14, v15, &time1, &time2);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  FigReadWriteLockUnlockForRead();
  ++*(_DWORD *)(a1 + 524);
LABEL_30:
  MEMORY[0x19970E2B0](*(void *)(a1 + 280));
  return vmc2TriggerSchedulingIfOutputIsLow(a1);
}

uint64_t sbp_bq_isEmpty()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    FigSignalErrorAt();
    return 1;
  }
  else
  {
    uint64_t v2 = *(opaqueCMBufferQueue **)(DerivedStorage + 8);
    return CMBufferQueueIsEmpty(v2);
  }
}

uint64_t piqca_setUpcomingImageInfo(uint64_t a1, unsigned int a2, long long *a3, long long *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 < 4 && (a2 != 2 || (*((_DWORD *)a3 + 3) & 0x1D) == 1 && (*((_DWORD *)a4 + 3) & 0x1D) == 1))
  {
    long long v9 = *a3;
    *(void *)(DerivedStorage + 180) = *((void *)a3 + 2);
    *(_OWORD *)(DerivedStorage + 164) = v9;
    long long v10 = *a4;
    *(void *)(DerivedStorage + 204) = *((void *)a4 + 2);
    *(_OWORD *)(DerivedStorage + 188) = v10;
    *(_DWORD *)(DerivedStorage + 160) = a2;
    piqca_updateReducedPollingTimeRange(a1);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figPlaybackBoss_MentorStopping(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v64 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = FigCFWeakReferenceHolderCopyReferencedObject();
  int v8 = FigCFEqual();
  if (a5)
  {
    CFArrayRef Value = CFDictionaryGetValue(a5, @"Mentor_Order");
    CFNumberRef v10 = (const __CFNumber *)CFDictionaryGetValue(a5, @"Mentor_OSStatus");
    CFNumberRef v11 = v10;
    if (v10) {
      CFRetain(v10);
    }
    a5 = (const __CFDictionary *)CFDictionaryGetValue(a5, @"Mentor_NotificationThatWasRequestedButDropped");
    if (!v7) {
      goto LABEL_10;
    }
  }
  else
  {
    CFNumberRef v11 = 0;
    CFArrayRef Value = 0;
    if (!v7)
    {
LABEL_10:
      uint64_t v12 = 0;
      goto LABEL_11;
    }
  }
  if (*(unsigned char *)(v7 + 16)) {
    goto LABEL_10;
  }
  MEMORY[0x19970E910](*(void *)(v7 + 576));
  if (*(const void **)(a2 + 200) != Value) {
    goto LABEL_9;
  }
  if (a5)
  {
    CFTypeID v13 = CFGetTypeID(a5);
    if (v13 == CFDictionaryGetTypeID())
    {
      if (CFDictionaryGetValue(a5, @"BossScrubOrder"))
      {
        if (FigCFEqual())
        {
          int v14 = *(_DWORD *)(v7 + 776);
          if (v14)
          {
            *(unsigned char *)(v7 + 780) = 0;
            *(_DWORD *)(v7 + 776) = 0;
            MEMORY[0x19970E930](*(void *)(v7 + 576));
            int v15 = -1;
            LODWORD(valuePtr[0].start.value) = -1;
            if (v11)
            {
              CFNumberGetValue(v11, kCFNumberSInt32Type, valuePtr);
              int v15 = valuePtr[0].start.value;
            }
            figPlaybackBossPostSeekDidComplete(v7, v14, v15);
            goto LABEL_10;
          }
        }
        goto LABEL_9;
      }
    }
  }
  if (!*(unsigned char *)(a2 + 212))
  {
LABEL_9:
    MEMORY[0x19970E930](*(void *)(v7 + 576));
    goto LABEL_10;
  }
  if (v8) {
    BOOL v16 = dword_1E9350D98 == 0;
  }
  else {
    BOOL v16 = 1;
  }
  if (!v16)
  {
    LODWORD(end.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v18 = *(_DWORD *)(v7 + 424);
  if (v18 == 1886151033)
  {
    int v19 = 0;
    char v57 = 0;
    BOOL v20 = 0;
  }
  else
  {
    if (v18 == 1920298606)
    {
      int v19 = *(unsigned __int8 *)(v7 + 428);
      BOOL v20 = *(unsigned char *)(v7 + 428) == 0;
    }
    else
    {
      int v19 = 0;
      BOOL v20 = 0;
    }
    char v57 = 1;
  }
  *(unsigned char *)(a2 + 212) = 0;
  MEMORY[0x19970E910](*(void *)(v7 + 64));
  if (*(unsigned char *)(v7 + 840))
  {
    LODWORD(end.value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    CMTime v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(v7 + 80) < 1)
  {
LABEL_44:
    MEMORY[0x19970E930](*(void *)(v7 + 64));
    char v23 = 0;
    uint64_t v24 = *(const void **)(v7 + 416);
    *(void *)(v7 + 416) = 0;
  }
  else
  {
    CFIndex v22 = 0;
    while (!*((unsigned char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 72), v22) + 212))
    {
      if (*(void *)(v7 + 80) <= ++v22) {
        goto LABEL_44;
      }
    }
    MEMORY[0x19970E930](*(void *)(v7 + 64));
    uint64_t v24 = 0;
    char v23 = 1;
  }
  uint64_t v25 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v8)
  {
    if (v11)
    {
      *(unsigned char *)(v7 + 548) = 1;
      CFAllocatorRef v26 = *(const void **)(v7 + 552);
      *(void *)(v7 + 552) = v11;
    }
    else
    {
      LODWORD(valuePtr[0].start.value) = -12373;
      CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, valuePtr);
      *(unsigned char *)(v7 + 548) = 1;
      CFAllocatorRef v26 = *(const void **)(v7 + 552);
      *(void *)(v7 + 552) = v11;
      if (!v11) {
        goto LABEL_51;
      }
    }
    CFRetain(v11);
LABEL_51:
    if (v26) {
      CFRelease(v26);
    }
  }
  MEMORY[0x19970E930](*(void *)(v7 + 576));
  if (v19)
  {
    CMAttachmentBearerRef target = 0;
    *(void *)os_log_type_t type = 0;
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(a2 + 80));
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    uint64_t v30 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, os_log_type_t *))(v29 + 48);
    if (v30)
    {
      BOOL v31 = v25;
      CFAllocatorRef v32 = *v25;
      if (v30(FigBaseObject, @"SourceSampleBufferQueue", v32, type))
      {
        CFDictionaryRef v33 = 0;
      }
      else
      {
        CMTime start = *(CMTime *)(v7 + 240);
        CMTime end = *(CMTime *)(v7 + 264);
        CMTimeRangeFromTimeToTime(valuePtr, &start, &end);
        CFDictionaryRef v33 = CMTimeRangeCopyAsDictionary(valuePtr, v32);
        if (!CMSampleBufferCreate(v32, 0, 1u, 0, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&target))
        {
          CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F21A40], v33, 1u);
          CMBufferQueueEnqueue(*(CMBufferQueueRef *)type, target);
        }
      }
      uint64_t v25 = v31;
    }
    else
    {
      CFDictionaryRef v33 = 0;
    }
    if (*(void *)type) {
      CFRelease(*(CFTypeRef *)type);
    }
    if (target) {
      CFRelease(target);
    }
    if (v33) {
      CFRelease(v33);
    }
  }
  if (v20)
  {
    valuePtr[0].start.CMTimeValue value = 0;
    uint64_t v34 = FigRenderPipelineGetFigBaseObject(*(void *)(a2 + 80));
    uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v36 = v35 ? v35 : 0;
    uint64_t v37 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CMTimeRange *))(v36 + 48);
    if (v37)
    {
      int v38 = v37(v34, @"SourceSampleBufferQueue", *v25, valuePtr);
      uint64_t v39 = (const void *)valuePtr[0].start.value;
      if (!v38)
      {
        CMBufferQueueMarkEndOfData((CMBufferQueueRef)valuePtr[0].start.value);
        uint64_t v39 = (const void *)valuePtr[0].start.value;
      }
      if (v39) {
        CFRelease(v39);
      }
    }
  }
  if ((v57 & 1) == 0)
  {
    valuePtr[0].start.CMTimeValue value = 0;
    start.CMTimeValue value = 0;
    uint64_t v40 = FigRenderPipelineGetFigBaseObject(*(void *)(a2 + 80));
    uint64_t v41 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v41) {
      uint64_t v42 = v41;
    }
    else {
      uint64_t v42 = 0;
    }
    uint64_t v43 = *(unsigned int (**)(uint64_t, __CFString *, CFAllocatorRef, CMTimeRange *))(v42 + 48);
    if (v43)
    {
      CFAllocatorRef v44 = *v25;
      if (!v43(v40, @"SourceSampleBufferQueue", *v25, valuePtr)
        && !CMSampleBufferCreateReady(v44, 0, 0, 0, 0, 0, 0, 0, (CMSampleBufferRef *)&start))
      {
        CMSetAttachment((CMAttachmentBearerRef)start.value, (CFStringRef)*MEMORY[0x1E4F21A28], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
        CMBufferQueueEnqueue((CMBufferQueueRef)valuePtr[0].start.value, (CMBufferRef)start.value);
      }
    }
    if (valuePtr[0].start.value) {
      CFRelease((CFTypeRef)valuePtr[0].start.value);
    }
    if (start.value) {
      CFRelease((CFTypeRef)start.value);
    }
  }
  if ((v23 & 1) == 0)
  {
    if (dword_1E9350D98)
    {
      int v45 = v25;
      LODWORD(end.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v47 = end.value;
      if (os_log_type_enabled(v46, type[0])) {
        unsigned int v48 = v47;
      }
      else {
        unsigned int v48 = v47 & 0xFFFFFFFE;
      }
      if (v48)
      {
        LODWORD(start.value) = 136315650;
        *(CMTimeValue *)((char *)&start.value + 4) = (CMTimeValue)"figPlaybackBoss_MentorStopping";
        LOWORD(start.flags) = 2048;
        *(void *)((char *)&start.flags + 2) = v7;
        HIWORD(start.epoch) = 2082;
        uint64_t v62 = v7 + 841;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v25 = v45;
    }
    if (*(unsigned char *)(v7 + 584))
    {
      *(unsigned char *)(v7 + 584) = 0;
      if (*(float *)(v7 + 432) != 0.0) {
        bossScheduleReachedEndCallbackUsingRenderPipelineQueueEndPTS(v7);
      }
    }
    if (*(_DWORD *)(v7 + 424) == 1920298606) {
      *(_DWORD *)(v7 + 424) = 1768189029;
    }
    if (v24)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*v25, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v12 = Mutable;
      if (!Mutable) {
        goto LABEL_113;
      }
      CFDictionarySetValue(Mutable, @"ControlToken", v24);
    }
    else
    {
      if (!*(void *)(v7 + 552))
      {
        uint64_t v12 = 0;
        goto LABEL_113;
      }
      uint64_t v12 = CFDictionaryCreateMutable(*v25, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!v12) {
        goto LABEL_113;
      }
    }
    uint64_t v50 = *(const void **)(v7 + 552);
    if (v50)
    {
      CFDictionarySetValue(v12, @"OSStatus", v50);
      uint64_t v51 = *(const void **)(v7 + 552);
      if (v51)
      {
        CFRelease(v51);
        *(void *)(v7 + 552) = 0;
      }
    }
LABEL_113:
    MEMORY[0x19970E910](*(void *)(v7 + 576));
    MEMORY[0x19970E910](*(void *)(v7 + 64));
    if (*(unsigned char *)(v7 + 840))
    {
      LODWORD(end.value) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      size_t v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v53 = end.value;
      if (os_log_type_enabled(v52, type[0])) {
        unsigned int v54 = v53;
      }
      else {
        unsigned int v54 = v53 & 0xFFFFFFFE;
      }
      if (v54)
      {
        LODWORD(start.value) = 136315394;
        *(CMTimeValue *)((char *)&start.value + 4) = (CMTimeValue)"figPlaybackBoss_MentorStopping";
        LOWORD(start.flags) = 2048;
        *(void *)((char *)&start.flags + 2) = v7;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(uint64_t *)(v7 + 80) < 1)
    {
LABEL_124:
      MEMORY[0x19970E930](*(void *)(v7 + 64));
      MEMORY[0x19970E930](*(void *)(v7 + 576));
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
    }
    else
    {
      CFIndex v55 = 0;
      while (!*((unsigned char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v7 + 72), v55) + 214))
      {
        if (*(void *)(v7 + 80) <= ++v55) {
          goto LABEL_124;
        }
      }
      MEMORY[0x19970E930](*(void *)(v7 + 64));
      *(unsigned char *)(v7 + 560) = 1;
      if (v12) {
        CFTypeRef v56 = CFRetain(v12);
      }
      else {
        CFTypeRef v56 = 0;
      }
      *(void *)(v7 + 568) = v56;
      MEMORY[0x19970E930](*(void *)(v7 + 576));
    }
    goto LABEL_129;
  }
  uint64_t v12 = 0;
LABEL_129:
  if (v24) {
    CFRelease(v24);
  }
LABEL_11:
  if (v11) {
    CFRelease(v11);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v7) {
    CFRelease((CFTypeRef)v7);
  }
}

uint64_t FigCRABS_GetRangeInCache(const void *a1, unint64_t a2, unint64_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    if ((a2 & 0x8000000000000000) != 0
      || (uint64_t v7 = DerivedStorage, *(void *)(DerivedStorage + 56) <= (int64_t)a2))
    {
      uint64_t result = FigSignalErrorAt();
    }
    else
    {
      uint64_t result = crabsEnsureInitialized(a1);
      if (!result)
      {
        uint64_t result = FigRetainProxyLockMutex();
        if (!result)
        {
          uint64_t v9 = *(void *)(v7 + 96);
          if (v9 == 0x4000)
          {
            int64_t v10 = a2 >> 14;
          }
          else if (v9 == 0x10000)
          {
            int64_t v10 = a2 >> 16;
          }
          else
          {
            int64_t v10 = (uint64_t)a2 / v9;
          }
          if (v10 < *(void *)(v7 + 88))
          {
            CFNumberRef v11 = *(int **)(*(void *)(v7 + 80) + 8 * v10);
            if (v11)
            {
              char v19 = 0;
              if ((*(unsigned char *)(v7 + 504) & 3) == 0) {
                crabsEnsureBlockNotPurged((void *)v7, v11, &v19);
              }
              if (v10 < *(void *)(v7 + 224)) {
                *(unsigned char *)(v7 + 128) = 1;
              }
              unint64_t v12 = v11[1];
              uint64_t v13 = *(void *)(v7 + 96);
              unint64_t v14 = a2 - v13 * *v11;
              unint64_t v15 = v12 - v14;
              if (v12 <= v14)
              {
                unint64_t v15 = 0;
              }
              else if (v13 == v12)
              {
                uint64_t v16 = v10 + 1;
                do
                {
                  if (v16 >= *(void *)(v7 + 88)) {
                    break;
                  }
                  uint64_t v17 = *(int **)(*(void *)(v7 + 80) + 8 * v16);
                  if (!v17) {
                    break;
                  }
                  if ((*(unsigned char *)(v7 + 504) & 3) == 0)
                  {
                    crabsEnsureBlockNotPurged((void *)v7, v17, &v19);
                    unint64_t v12 = *(void *)(v7 + 96);
                  }
                  uint64_t v18 = v17[1];
                  v15 += v18;
                  ++v16;
                }
                while (v12 == v18);
              }
              crabsUnlockWithActions(v7);
              uint64_t result = 0;
              goto LABEL_30;
            }
          }
          crabsUnlockWithActions(v7);
          uint64_t result = 0;
        }
      }
    }
    unint64_t v15 = 0;
LABEL_30:
    *a3 = v15;
    return result;
  }

  return FigSignalErrorAt();
}

void crabsEnsureBlockNotPurged(void *a1, int *a2, unsigned char *a3)
{
  if (a1[28] > *a2 || *a3)
  {
    crabsCleanupBlockIfPurged((uint64_t)a1, a2);
  }
  else
  {
    __int16 v5 = *((_WORD *)a2 + 4);
    *((_WORD *)a2 + 4) = v5 | 0x400;
    crabsPurgeCompletionSweep(a1);
    *a3 = 1;
    *((_WORD *)a2 + 4) = a2[2] & 0xFBFF | v5 & 0x400;
  }
}

uint64_t stepDownEntry(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 120))
  {
    int v2 = *(_DWORD *)(a1 + 112);
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = *(int *)(a1 + 88);
    uint64_t destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v3 + 416), 8 * v4, 8uLL, &destination);
    unsigned int v5 = bswap32(destination);
    *(_DWORD *)(a1 + 112) = v5;
    int v6 = *(_DWORD *)(a1 + 88) + 1;
    uint64_t v7 = *(void *)(a1 + 8);
    int v8 = *(_DWORD *)(v7 + 408);
    *(unsigned char *)(a1 + 120) = v6 == v8;
    unsigned int v9 = *(_DWORD *)(v7 + 244);
    if (v9)
    {
      v5 /= v9;
      *(_DWORD *)(a1 + 112) = v5;
    }
    if (v2 != v5) {
      return 0;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a1 + 8);
    int v8 = *(_DWORD *)(v7 + 408);
    int v6 = *(_DWORD *)(a1 + 88) + 1;
  }
  if (v6 == v8) {
    return 4294954456;
  }
  uint64_t v11 = *(unsigned int *)(a1 + 112);
  int v12 = *(_DWORD *)(a1 + 116);
  *(void *)(a1 + 96) += *(void *)(a1 + 104) * v11;
  *(_DWORD *)(a1 + 116) = v12 + v11;
  *(_DWORD *)(a1 + 88) = v6;
  uint64_t destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v7 + 416), 8 * v6, 8uLL, &destination);
  unsigned int v13 = bswap32(destination);
  *(_DWORD *)(a1 + 112) = v13;
  uint64_t v14 = *(void *)(a1 + 8);
  uint64_t v15 = *(void *)(*(void *)a1 + 24);
  if (v15) {
    LOBYTE(v15) = *(_DWORD *)(a1 + 88) + 1 == *(_DWORD *)(v14 + 408);
  }
  *(unsigned char *)(a1 + 120) = v15;
  uint64_t v16 = *(int *)(v14 + 244);
  if (v16)
  {
    *(_DWORD *)(a1 + 112) = v13 / v16;
  }
  else
  {
    uint64_t v17 = *(int *)(a1 + 88);
    uint64_t destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v14 + 416), 8 * v17, 8uLL, &destination);
    uint64_t v16 = bswap32(HIDWORD(destination));
  }
  uint64_t result = 0;
  *(void *)(a1 + 104) = v16;
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a1 + 116);
  return result;
}

uint64_t FigByteRateHistoryReportAverage(uint64_t result, double *a2, double *a3)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(result + 24);
    uint64_t v4 = *(void *)(result + 32);
    double v5 = 0.0;
    if (v3 > 499999999 || v4 >= 1000000) {
      double v5 = (double)v4 * 1000000000.0 / (double)v3;
    }
    *a2 = v5;
  }
  if (a3)
  {
    uint64_t v7 = *(void *)(result + 56);
    if (v7) {
      double v8 = sqrt(*(double *)(result + 48) / (double)v7);
    }
    else {
      double v8 = 0.0;
    }
    *a3 = v8;
  }
  return result;
}

uint64_t FigPlayabilityMonitorGetPlayableRange(uint64_t a1, uint64_t a2, CMTime *a3)
{
  MEMORY[0x19970E290](*(void *)(a1 + 48));
  CMTimebaseGetTime(&time1, *(CMTimebaseRef *)(a1 + 24));
  long long v10 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  time2.CMTimeEpoch epoch = v6;
  CMTimeMaximum(&v12, &time1, &time2);
  if (*(_DWORD *)(a1 + 184) == *(_DWORD *)(a1 + 96)
    && !*(unsigned char *)(a1 + 313)
    && (time1 = v12, CMTime time2 = *(CMTime *)(a1 + 216), (CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
    && (time1 = v12, CMTime time2 = *(CMTime *)(a1 + 240), CMTimeCompare(&time1, &time2) < 1)
    || (uint64_t updated = fpm_updateCacheAndNotify(a1), !updated))
  {
    long long v8 = *(_OWORD *)(a1 + 216);
    *(void *)(a2 + 16) = *(void *)(a1 + 232);
    *(_OWORD *)a2 = v8;
    CMTime time1 = *(CMTime *)(a1 + 216);
    CMTime time2 = *(CMTime *)(a1 + 240);
    if (CMTimeCompare(&time1, &time2) < 0)
    {
      CMTime time2 = *(CMTime *)(a1 + 240);
      CMTime rhs = *(CMTime *)(a1 + 216);
      CMTimeSubtract(&time1, &time2, &rhs);
      uint64_t updated = 0;
      *a3 = time1;
    }
    else
    {
      uint64_t updated = 0;
      *(_OWORD *)&a3->CMTimeValue value = v10;
      a3->CMTimeEpoch epoch = v6;
    }
  }
  MEMORY[0x19970E2B0](*(void *)(a1 + 48));
  return updated;
}

void vmc2OutputFrame(uint64_t a1, _DWORD *a2, int a3, unsigned int a4, uint64_t a5, CMTime *a6, uint64_t a7)
{
  CMTime v9 = *a6;
  long long v7 = *(_OWORD *)a7;
  uint64_t v8 = *(void *)(a7 + 16);
  vmc2OutputFrameInternal(a1, a2, a3, a4, a5, 0, &v9, &v7, 0);
}

uint64_t piqca_enqueueImage(uint64_t a1, __CVBuffer *a2, const void *a3, long long *a4, char a5)
{
  long long v6 = *a4;
  uint64_t v7 = *((void *)a4 + 2);
  return piqca_enqueueImageWithRotation(a1, a2, a3, (uint64_t *)&v6, 0, a5);
}

uint64_t piqca_postOccupancyChanged(uint64_t a1)
{
  void (*v7)(long long *__return_ptr, uint64_t);
  uint64_t VTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, long long *);
  long long v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;

  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t result = CMNotificationCenterPostNotification();
  uint64_t v4 = *(void *)(DerivedStorage + 3080);
  if (v4)
  {
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(void (**)(long long *__return_ptr, uint64_t))(v6 + 80);
    if (v7)
    {
      v7(&v13, a1);
    }
    else
    {
      unsigned int v13 = *MEMORY[0x1E4F1F9F8];
      uint64_t v14 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    }
    uint64_t VTable = CMBaseObjectGetVTable();
    long long v10 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    CMTime v9 = v10;
    if (v10) {
      uint64_t v11 = v9;
    }
    else {
      uint64_t v11 = 0;
    }
    CMTime v12 = *(uint64_t (**)(uint64_t, long long *))(v11 + 8);
    if (v12)
    {
      uint64_t v15 = v13;
      uint64_t v16 = v14;
      return v12(v4, &v15);
    }
  }
  return result;
}

uint64_t vmc2OutputOccupancyChanged(uint64_t result)
{
  if (!*(unsigned char *)(result + 16))
  {
    uint64_t v1 = result;
    ++*(_DWORD *)(result + 524);
    int v2 = *(unsigned __int8 *)(result + 592);
    if (vmc2GetWaterLevelState(result)) {
      BOOL v3 = *(unsigned char *)(v1 + 440) != 0;
    }
    else {
      BOOL v3 = 1;
    }
    int v4 = vmc2GetWaterLevelState(v1) == 2 && *(unsigned char *)(v1 + 440) == 0;
    vmc2UpdateTroubleMonitor(v1, v2, v3, v4, 0);
    return vmc2TriggerSchedulingIfOutputIsLow(v1);
  }
  return result;
}

uint64_t vmc2FrameDecodeCompleted(uint64_t a1, uint64_t a2)
{
  vmc2UpdateSessionMinAndMaxOutputPTS(a2);

  return vmc2CheckForEnd(a2);
}

uint64_t piqca_setDirection(uint64_t a1, float a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  if (a2 >= 0.0) {
    int v6 = 0;
  }
  else {
    int v6 = -1;
  }
  if (a2 > 0.0) {
    int v6 = 1;
  }
  *(_DWORD *)(DerivedStorage + 212) = v6;
  if (v6 && *(_DWORD *)(DerivedStorage + 216) != v6)
  {
    *(_DWORD *)(DerivedStorage + 216) = v6;
    CAImageQueueSetFlags();
    bzero((void *)(v5 + 296), 0x4B0uLL);
  }
  *(unsigned char *)(v5 + 220) = a2 == 1.0;
  piqca_updateReducedPollingTimeRange(a1);
  return 0;
}

uint64_t VideoMentorSetModeToForwardPlayback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, const __CFDictionary *a6, const void *a7, const void *a8, CFTypeRef a9)
{
  CFTypeRef v37 = 0;
  CFTypeRef cf = 0;
  PolicyFromPrerollPolicCGFloat y = audioMentorGetInitialReadPolicyFromPrerollPolicy((uint64_t)a6);
  unsigned int v33 = audioMentorGetModeChangePolicy(a6);
  BOOL IsCursorAccuracyExact = videoMentorIsCursorAccuracyExact(a6);
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  FigCFDictionaryGetBooleanIfPresent();
  int v39 = 0;
  FigCFDictionaryGetInt32IfPresent();
  if (a6)
  {
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetFloat32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetFloat32IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
  }
  if (a2
    && ((uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (v16 = 0) : (v16 = v15),
        (uint64_t v17 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v16 + 8)) == 0 || v17(a2, &cf))
    || a4
    && ((v18 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (uint64_t v19 = 0) : (uint64_t v19 = v18),
        (BOOL v20 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v19 + 8)) == 0 || v20(a4, &v37)))
  {
    uint64_t v30 = FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(a1 + 96));
    if (!*(unsigned char *)a1)
    {
      CMTime v21 = *(const void **)(a1 + 168);
      CFTypeRef v22 = cf;
      *(void *)(a1 + 168) = cf;
      if (v22) {
        CFRetain(v22);
      }
      if (v21) {
        CFRelease(v21);
      }
      uint64_t v23 = *(void *)(a3 + 16);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)a3;
      uint64_t v24 = *(const void **)(a1 + 200);
      CFTypeRef v25 = v37;
      *(void *)(a1 + 192) = v23;
      *(void *)(a1 + 200) = v25;
      if (v25) {
        CFRetain(v25);
      }
      if (v24) {
        CFRelease(v24);
      }
      long long v26 = *a5;
      *(void *)(a1 + 224) = *((void *)a5 + 2);
      *(_OWORD *)(a1 + 208) = v26;
      *(_DWORD *)(a1 + 240) = PolicyFromPrerollPolicy;
      *(_DWORD *)(a1 + 244) = v33;
      *(unsigned char *)(a1 + 248) = 0;
      *(_DWORD *)(a1 + 260) = 0;
      *(_DWORD *)(a1 + 252) = 0;
      *(_DWORD *)(a1 + 256) = 1065353216;
      *(unsigned char *)(a1 + 372) = IsCursorAccuracyExact;
      *(unsigned char *)(a1 + 373) = 1;
      *(unsigned char *)(a1 + 374) = 0;
      *(unsigned char *)(a1 + 375) = v39;
      *(unsigned char *)(a1 + 376) = 1;
      *(_DWORD *)(a1 + 452) = 0;
      *(unsigned char *)(a1 + 377) = 0;
      *(unsigned char *)(a1 + 378) = 0;
      CFDictionaryRef v27 = *(const void **)(a1 + 464);
      *(void *)(a1 + 464) = a7;
      if (a7) {
        CFRetain(a7);
      }
      if (v27) {
        CFRelease(v27);
      }
      uint64_t v28 = *(const void **)(a1 + 472);
      *(void *)(a1 + 472) = a8;
      if (a8) {
        CFRetain(a8);
      }
      if (v28) {
        CFRelease(v28);
      }
      uint64_t v29 = *(const void **)(a1 + 480);
      *(void *)(a1 + 480) = a9;
      if (a9) {
        CFRetain(a9);
      }
      if (v29) {
        CFRelease(v29);
      }
      *(_DWORD *)(a1 + 112) = 2;
      *(unsigned char *)(a1 + 116) = 1;
      FigMemoryBarrier();
    }
    MEMORY[0x19970E930](*(void *)(a1 + 96));
    FigSemaphoreSignal();
    uint64_t v30 = 0;
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v37) {
    CFRelease(v37);
  }
  return v30;
}

uint64_t sbcbq_getPendingSampleBufferCount()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t refcon = 0;
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v1 = 17;
  if (!*((unsigned char *)DerivedStorage + 8)) {
    uint64_t v1 = 18;
  }
  CMBufferQueueCallForEachBuffer((CMBufferQueueRef)DerivedStorage[v1], (OSStatus (__cdecl *)(CMBufferRef, void *))sbcbq_countNonMarkerOnlySampleBuffers, &refcon);
  MEMORY[0x19970E930](*DerivedStorage);
  return refcon;
}

uint64_t sbcbq_setAttachmentOnPendingSampleBuffersInPTSRange(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  v13[0] = a2;
  v13[1] = a3;
  long long v14 = *a4;
  uint64_t v15 = *((void *)a4 + 2);
  long long v16 = *a5;
  uint64_t v17 = *((void *)a5 + 2);
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v10 = 17;
  if (!*((unsigned char *)DerivedStorage + 8)) {
    uint64_t v10 = 18;
  }
  uint64_t v11 = CMBufferQueueCallForEachBuffer((CMBufferQueueRef)DerivedStorage[v10], (OSStatus (__cdecl *)(CMBufferRef, void *))sbcbq_setAttachmentIfSampleBufferInPTSRange, v13);
  MEMORY[0x19970E930](*DerivedStorage);
  return v11;
}

void sgffr_appendAttributesToDictionary(void *key, void *value, CFMutableDictionaryRef theDict)
{
}

void videoMentorThreadFinishPreroll(uint64_t a1, uint64_t a2, const void *a3)
{
  if ((*(_DWORD *)(a1 + 496) | 2) != 3) {
    return;
  }
  int v4 = FigMentorPrerollCompletePayloadCreate(a3);
  uint64_t v5 = v4;
  if (*(unsigned char *)a1)
  {
    if (!v4) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (v5) {
LABEL_4:
  }
    CFRelease(v5);
LABEL_5:
  *(_DWORD *)(a1 + 496) = *(_DWORD *)(a1 + 500);
  if (*MEMORY[0x1E4F1EBA8] == 1)
  {
    kdebug_trace();
  }
}

uint64_t FigCRABS_ResolveActiveHints(const void *a1, CMTime *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CMClockRef HostTimeClock = CMClockGetHostTimeClock();
  memset(&v22, 0, sizeof(v22));
  int v6 = (const void *)DerivedStorage[95];
  if (!v6)
  {
    CFTypeRef v7 = 0;
    if (!a1) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  CFTypeRef v7 = CFRetain(v6);
  if (a1) {
LABEL_3:
  }
    CFRetain(a1);
LABEL_4:
  uint64_t v8 = crabsEnsureInitialized(a1);
  if (v8
    || (CMClockGetTime(&lhs, HostTimeClock),
        CMTime rhs = *a2,
        CMTimeAdd(&v22, &lhs, &rhs),
        uint64_t v8 = FigRetainProxyLockMutex(),
        v8))
  {
    uint64_t v10 = v8;
  }
  else if (FigRetainProxyIsInvalidated())
  {
    uint64_t v10 = 4294954511;
  }
  else
  {
    uint64_t v9 = DerivedStorage[29];
    if (v9 >= DerivedStorage[11])
    {
      crabsUnlockWithActions((uint64_t)DerivedStorage);
    }
    else
    {
      uint64_t v10 = crabsDoJump((uint64_t)DerivedStorage, v9);
      DerivedStorage[29] = DerivedStorage[11];
      crabsUnlockWithActions((uint64_t)DerivedStorage);
      if (v10) {
        goto LABEL_24;
      }
    }
    uint64_t v11 = (CMTime *)MEMORY[0x1E4F1FA48];
    do
    {
      memset(&rhs, 0, sizeof(rhs));
      uint64_t v10 = FigRetainProxyLockMutex();
      if (v10) {
        break;
      }
      CMTime v12 = (int *)DerivedStorage[31];
      if (!v12)
      {
        FigRetainProxyUnlockMutex();
        break;
      }
      uint64_t v13 = DerivedStorage[12] * *v12;
      FigRetainProxyUnlockMutex();
      if (v13 == -1) {
        break;
      }
      CMClockGetTime(&v19, HostTimeClock);
      CMTime time1 = v22;
      CMTimeSubtract(&rhs, &time1, &v19);
      CMTime time1 = rhs;
      CMTime cf = *v11;
      if (CMTimeCompare(&time1, &cf) <= 0)
      {
        uint64_t v10 = 4294954421;
        break;
      }
      cf.CMTimeValue value = 0;
      size_t v14 = DerivedStorage[12];
      CMTime time1 = rhs;
      Float64 Seconds = CMTimeGetSeconds(&time1);
      uint64_t v10 = readOrRef(a1, v14, v13, 0, (CMBlockBufferRef *)&cf, 0, (int)(Seconds * 1000.0));
      if (cf.value) {
        CFRelease((CFTypeRef)cf.value);
      }
    }
    while (!v10);
  }
LABEL_24:
  if (a1) {
    CFRelease(a1);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v10;
}

uint64_t crabsDoJump(uint64_t a1, uint64_t a2)
{
  char v15 = 0;
  int v4 = *(const void **)(a1 + 760);
  if (v4) {
    CFTypeRef v5 = CFRetain(v4);
  }
  else {
    CFTypeRef v5 = 0;
  }
  if (*(void *)(a1 + 88) == a2)
  {
    if (*(_DWORD *)(a1 + 560) == 1 && !*(void *)(a1 + 568))
    {
      uint64_t v6 = 4294954511;
      if (crabsCancelRead((void *)a1, (uint64_t *)(a1 + 512), -12932) == -12785) {
        goto LABEL_25;
      }
    }
    *(unsigned char *)(a1 + 129) = 1;
  }
  else
  {
    *(void *)(a1 + 200) = 0;
    CFTypeRef v7 = *(uint64_t **)(a1 + 192);
    *CFTypeRef v7 = a2;
    uint64_t v8 = *(void *)(a1 + 184);
    if (v8 >= 2)
    {
      for (uint64_t i = 1; i < v8; ++i)
      {
        v7[i] = *(void *)(a1 + 88);
        uint64_t v8 = *(void *)(a1 + 184);
      }
    }
    *(void *)(a1 + 208) = a2;
    *(void *)(a1 + 216) = v8;
    if (*(void *)(a1 + 224) != a2)
    {
      long long v16 = 0;
      crabsMoveAnchor(a1, a2);
      if (!crabsSelectNextFill(a1, &v16))
      {
        uint64_t v10 = v16;
        if (v16)
        {
          if (!crabsEvaluateFirehose(a1, v16, 0, &v15))
          {
            if (v15)
            {
              int v11 = crabsMoveFirehose(a1, *(void *)(a1 + 96) * *v10);
              uint64_t v6 = 4294954511;
              if (v11 == -12785) {
                goto LABEL_25;
              }
            }
          }
        }
      }
    }
  }
  CMTime v12 = *(int **)(a1 + 248);
  while (v12)
  {
    while (1)
    {
      uint64_t v13 = v12;
      CMTime v12 = (int *)*((void *)v12 + 2);
      if (*v13 < a2 && (v13[2] & 0x810) == 0) {
        break;
      }
      if (!v12) {
        goto LABEL_24;
      }
    }
    crabsUnhint(a1, (uint64_t)v13);
  }
LABEL_24:
  uint64_t v6 = 0;
  *(unsigned char *)(a1 + 128) = 0;
LABEL_25:
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

void crabsMoveAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 224);
  if (v4 >= a2)
  {
    if (!*(unsigned char *)(a1 + 130)) {
      *(unsigned char *)(a1 + 131) = 0;
    }
    if (v4 <= a2)
    {
LABEL_77:
      *(void *)(a1 + 240) = (int)a2;
      goto LABEL_78;
    }
    uint64_t v15 = v4 - 1;
    while (1)
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 80) + 8 * v15);
      if (v16)
      {
        unsigned int v17 = *(unsigned __int16 *)(v16 + 8);
        BOOL v18 = (v17 & 0x200) != 0 ? (v17 >> 8) & 1 : *(void *)(v16 + 88) != 0;
        if ((v17 & 0x11) == 0 && v18) {
          break;
        }
      }
LABEL_50:
      if ((*(unsigned char *)(a1 + 504) & 3) == 0)
      {
        if (*(unsigned char *)(a1 + 133))
        {
          uint64_t v23 = v15 + *(void *)(a1 + 472);
          if (v23 < *(void *)(a1 + 88))
          {
            uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8 * v23);
            if (v24)
            {
              if (!*(void *)(v24 + 80))
              {
                unsigned int v25 = *(unsigned __int16 *)(v24 + 8);
                BOOL v26 = (v25 & 0x200) != 0 ? (v25 >> 8) & 1 : *(void *)(v24 + 88) != 0;
                BOOL v27 = (v25 & 0x11) != 0 || !v26;
                if (!v27 && !crabsChangeBlockVolatility((void *)a1, (int *)v24, 0, 1)) {
                  crabsRemovePurgedBacking(a1, (int *)v24, 1);
                }
              }
            }
          }
        }
      }
      if (v15-- <= a2) {
        goto LABEL_77;
      }
    }
    uint64_t v20 = *(void *)(v16 + 48);
    CMTime v21 = *(void **)(v16 + 56);
    if (v20)
    {
      *(void *)(v20 + 56) = v21;
      CMTime v21 = *(void **)(v16 + 56);
    }
    else
    {
      if (!v21) {
        goto LABEL_48;
      }
      *(void *)(a1 + 288) = v21;
    }
    *CMTime v21 = v20;
    *(void *)(v16 + 48) = 0;
    *(void *)(v16 + 56) = 0;
LABEL_48:
    addToAscendingBackedBlockList((void *)a1, (uint64_t *)(a1 + 264), (int *)v16);
    if ((*(_WORD *)(v16 + 8) & 0x80) != 0) {
      crabsMakeBackingNonvolatile((void *)a1, v16, 1);
    }
    goto LABEL_50;
  }
  CFTypeRef v5 = *(int **)(a1 + 264);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)(a1 + 280);
    do
    {
      if (*v5 >= a2) {
        break;
      }
      if ((*(unsigned char *)(a1 + 504) & 3) == 0)
      {
        if (!*((void *)v5 + 10))
        {
          unsigned int v13 = *((unsigned __int16 *)v5 + 4);
          BOOL v14 = (v13 & 0x200) != 0 ? (v13 >> 8) & 1 : *((void *)v5 + 11) != 0;
          if ((v13 & 0x11) == 0 && v14 && !crabsChangeBlockVolatility((void *)a1, v5, 2, 1)) {
            crabsRemovePurgedBacking(a1, v5, 1);
          }
        }
        if ((v5[2] & 0x80) != 0) {
          crabsAdjustGroupBoundariesToRemoval((void *)a1, v5);
        }
      }
      unsigned int v7 = *((unsigned __int16 *)v5 + 4);
      if ((v7 & 0x200) != 0)
      {
        if ((v7 >> 8))
        {
LABEL_13:
          uint64_t v9 = *((void *)v5 + 6);
          uint64_t v10 = (void *)*((void *)v5 + 7);
          uint64_t v8 = v5 + 12;
          if (v9)
          {
            *(void *)(v9 + 56) = v10;
            uint64_t v10 = (void *)*((void *)v5 + 7);
            goto LABEL_17;
          }
          if (v10)
          {
            *(void *)(a1 + 272) = v10;
LABEL_17:
            *uint64_t v10 = v9;
            *uint64_t v8 = 0;
            *((void *)v5 + 7) = 0;
            *((_WORD *)v5 + 4) = v7 & 0xEFFF;
          }
          uint64_t v11 = *v6;
          *((void *)v5 + 6) = *v6;
          if (v11) {
            CMTime v12 = (void *)(v11 + 56);
          }
          else {
            CMTime v12 = (void *)(a1 + 288);
          }
          *CMTime v12 = v8;
          *uint64_t v6 = (uint64_t)v5;
          *((void *)v5 + 7) = v6;
        }
      }
      else if (*((void *)v5 + 11))
      {
        goto LABEL_13;
      }
      CFTypeRef v5 = *(int **)(a1 + 264);
    }
    while (v5);
  }
  if ((*(unsigned char *)(a1 + 504) & 3) == 0)
  {
    uint64_t v28 = *(void *)(a1 + 224);
    if (v28 < a2)
    {
      uint64_t v29 = *(void *)(a1 + 472);
      uint64_t v30 = v29 + v28;
      do
      {
        if (v30 >= *(void *)(a1 + 88)) {
          break;
        }
        uint64_t v31 = *(void *)(*(void *)(a1 + 80) + 8 * v30);
        if (v31 && (*(_WORD *)(v31 + 8) & 0x80) != 0)
        {
          crabsMakeBackingNonvolatile((void *)a1, v31, 1);
          uint64_t v29 = *(void *)(a1 + 472);
        }
        ++v30;
      }
      while (v30 < v29 + a2);
    }
  }
  uint64_t v32 = *(void *)(a1 + 240);
  if (v32 < a2 && v32 >= *(void *)(a1 + 224)) {
    goto LABEL_77;
  }
LABEL_78:
  *(void *)(a1 + 224) = a2;
}

uint64_t sbp_bq_getUpcomingPTSInfo(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeValue v42 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v43 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeValue v40 = v42;
  CMTimeScale v41 = v43;
  CMTimeValue value = v42;
  CMTimeScale timescale = v43;
  CMTimeValue v36 = v42;
  CMTimeScale v37 = v43;
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v9 = DerivedStorage;
    CMTimeFlags v10 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
    CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    uint64_t v28 = a2;
    if (CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(DerivedStorage + 8)) {
      || (unsigned int v13 = *(opaqueCMBufferQueue **)(v9 + 8),
    }
          LOBYTE(refcon.CFDictionarySetValue(theDict, key, value) = 0,
          CMBufferQueueCallForEachBuffer(v13, (OSStatus (__cdecl *)(CMBufferRef, void *))sbp_bq_scanForSampleBufferThatWillBeDisplayed, &refcon), !LOBYTE(refcon.value)))
    {
      char v12 = 1;
      CMTimeFlags flags = v10;
      CMTimeEpoch epoch = v11;
      CMTimeFlags v27 = v10;
      CMTimeEpoch v26 = v11;
    }
    else
    {
      CMBufferQueueGetMinPresentationTimeStamp(&refcon, *(CMBufferQueueRef *)(v9 + 8));
      CMTimeValue value = refcon.value;
      CMTimeFlags flags = refcon.flags;
      CMTimeScale timescale = refcon.timescale;
      CMTimeEpoch epoch = refcon.epoch;
      CMBufferQueueGetMaxPresentationTimeStamp(&refcon, *(CMBufferQueueRef *)(v9 + 8));
      char v12 = 0;
      CMTimeValue v36 = refcon.value;
      CMTimeFlags v27 = refcon.flags;
      CMTimeScale v37 = refcon.timescale;
      CMTimeEpoch v26 = refcon.epoch;
    }
    MEMORY[0x19970E910](*(void *)(v9 + 32));
    int v14 = *(unsigned __int8 *)(v9 + 40);
    CMTimeValue v34 = *(void *)(v9 + 44);
    CMTimeFlags v15 = *(_DWORD *)(v9 + 56);
    CMTimeScale v35 = *(_DWORD *)(v9 + 52);
    CMTimeEpoch v16 = *(void *)(v9 + 60);
    CMTimeValue v32 = *(void *)(v9 + 68);
    CMTimeFlags v17 = *(_DWORD *)(v9 + 80);
    CMTimeScale v33 = *(_DWORD *)(v9 + 76);
    CMTimeEpoch v23 = *(void *)(v9 + 84);
    MEMORY[0x19970E930](*(void *)(v9 + 32));
    if (v12)
    {
      if (v14)
      {
        BOOL v18 = &v34;
        if (v15)
        {
          CMTimeFlags v10 = v15;
        }
        else
        {
          BOOL v18 = &v32;
          CMTimeFlags v10 = v17;
        }
        if (v15) {
          CMTimeEpoch v11 = v16;
        }
        else {
          CMTimeEpoch v11 = v23;
        }
        CMTimeValue v42 = *v18;
        CMTimeScale v43 = *((_DWORD *)v18 + 2);
        if (v17)
        {
          CMTimeValue v40 = v32;
          CMTimeScale v41 = v33;
          char v19 = 1;
          CMTimeFlags v20 = v17;
          CMTimeEpoch v21 = v23;
        }
        else
        {
          CMTimeValue v40 = v34;
          CMTimeScale v41 = v35;
          char v19 = 1;
          CMTimeFlags v20 = v15;
          CMTimeEpoch v21 = v16;
        }
      }
      else
      {
        char v19 = 0;
        CMTimeFlags v20 = v10;
        CMTimeEpoch v21 = v11;
      }
    }
    else
    {
      if (v14)
      {
        CMTimeFlags v20 = v10;
        CMTimeEpoch v21 = v11;
        if (v15)
        {
          time2.CMTimeEpoch epoch = v16;
          time1.CMTimeValue value = value;
          time1.CMTimeScale timescale = timescale;
          time1.CMTimeFlags flags = flags;
          time1.CMTimeEpoch epoch = epoch;
          time2.CMTimeValue value = v34;
          time2.CMTimeScale timescale = v35;
          time2.CMTimeFlags flags = v15;
          CMTimeMinimum(&refcon, &time1, &time2);
          CMTimeValue v42 = refcon.value;
          CMTimeFlags v10 = refcon.flags;
          CMTimeScale v43 = refcon.timescale;
          CMTimeEpoch v11 = refcon.epoch;
          time2.CMTimeEpoch epoch = v16;
          time1.CMTimeValue value = v36;
          time1.CMTimeScale timescale = v37;
          time1.CMTimeFlags flags = v27;
          time1.CMTimeEpoch epoch = v26;
          time2.CMTimeValue value = v34;
          time2.CMTimeScale timescale = v35;
          time2.CMTimeFlags flags = v15;
          CMTimeMaximum(&refcon, &time1, &time2);
          CMTimeValue v40 = refcon.value;
          CMTimeFlags v20 = refcon.flags;
          CMTimeScale v41 = refcon.timescale;
          CMTimeEpoch v21 = refcon.epoch;
        }
        CMTime v22 = v28;
        if (v17)
        {
          time1.CMTimeScale timescale = timescale;
          time1.CMTimeFlags flags = flags;
          time1.CMTimeEpoch epoch = epoch;
          time2.CMTimeValue value = v32;
          time2.CMTimeScale timescale = v33;
          time2.CMTimeFlags flags = v17;
          time2.CMTimeEpoch epoch = v23;
          time1.CMTimeValue value = value;
          CMTimeMinimum(&refcon, &time1, &time2);
          CMTimeValue v42 = refcon.value;
          CMTimeFlags v10 = refcon.flags;
          CMTimeScale v43 = refcon.timescale;
          time2.CMTimeEpoch epoch = v23;
          time1.CMTimeValue value = v36;
          time1.CMTimeScale timescale = v37;
          time1.CMTimeFlags flags = v27;
          time1.CMTimeEpoch epoch = v26;
          CMTimeEpoch v11 = refcon.epoch;
          time2.CMTimeValue value = v32;
          time2.CMTimeScale timescale = v33;
          time2.CMTimeFlags flags = v17;
          CMTimeMaximum(&refcon, &time1, &time2);
          CMTimeValue v40 = refcon.value;
          CMTimeFlags v20 = refcon.flags;
          CMTimeScale v41 = refcon.timescale;
          CMTimeEpoch v21 = refcon.epoch;
        }
        char v19 = 1;
        goto LABEL_29;
      }
      CMTimeValue v42 = value;
      CMTimeScale v43 = timescale;
      CMTimeValue v40 = v36;
      char v19 = 1;
      CMTimeScale v41 = v37;
      CMTimeFlags v10 = flags;
      CMTimeEpoch v11 = epoch;
      CMTimeFlags v20 = v27;
      CMTimeEpoch v21 = v26;
    }
    CMTime v22 = v28;
LABEL_29:
    *CMTime v22 = v19;
    *(void *)a3 = v42;
    *(_DWORD *)(a3 + 8) = v43;
    *(_DWORD *)(a3 + 12) = v10;
    *(void *)(a3 + 16) = v11;
    *(void *)a4 = v40;
    *(_DWORD *)(a4 + 8) = v41;
    *(_DWORD *)(a4 + 12) = v20;
    *(void *)(a4 + 16) = v21;
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigCRABSScheduledIOFinish(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 == 4) {
    int v6 = 0;
  }
  else {
    int v6 = a3;
  }

  return siocrabsFinishUnlocked(DerivedStorage, a2, v6);
}

void videopipelineTimebaseRateChanged()
{
}

uint64_t piqca_setAsync(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (a2)
  {
    *(void *)(DerivedStorage + 72) = 0x400000000;
    *(unsigned char *)(DerivedStorage + 49) = 1;
    CAImageQueueSetFlags();
    FigMemoryBarrier();
    piqca_WakeupSharedPollingThread();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    uint64_t DerivedStorage = v4;
    int v5 = 0;
  }
  else
  {
    *(void *)(DerivedStorage + 72) = 300;
    int v5 = 1;
  }
  piqca_updateEDRDeadline((void *)DerivedStorage, v5);
  return 0;
}

uint64_t videopipelineSynchronousFrameEnqueued()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

void playerfig_SynchronousFrameEnqueued(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage || !*DerivedStorage)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRetain(a2);
      uint64_t v4 = MEMORY[0x1E4F14428];
      dispatch_async_f(v4, a2, (dispatch_function_t)playerfig_DeferredSynchronousFrameEnqueued);
    }
  }
}

uint64_t sgffr_timebaseNotifierRateOrTimeChanged()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigReadWriteLockLockForRead();
  CFDictionaryRef v1 = *(const __CFDictionary **)(*(void *)(DerivedStorage + 48) + 40);
  if (v1) {
    CFDictionaryApplyFunction(v1, (CFDictionaryApplierFunction)sgffr_expediteAllClientRequestsForScheduledIO, 0);
  }

  return FigReadWriteLockUnlockForRead();
}

uint64_t FigCRABSScheduledIOExpediteAllClientRequests()
{
  return 0;
}

void FigImageQueueFrameRateIncrementCounter(uint64_t a1)
{
  UpTimeNanoCMTime seconds = FigGetUpTimeNanoseconds();
  MEMORY[0x19970E910](*(void *)a1);
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3 + 1000000000 >= UpTimeNanoseconds)
  {
    int v4 = *(_DWORD *)(a1 + 32) + 1;
  }
  else
  {
    *(void *)(a1 + 8) = v3;
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a1 + 32);
    *(void *)(a1 + 24) = UpTimeNanoseconds;
    int v4 = 1;
  }
  *(_DWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 40) = UpTimeNanoseconds;

  JUMPOUT(0x19970E930);
}

void piqca_decrementSnapLatchCount(void **a1)
{
  if (!FigAtomicDecrement32())
  {
    FigSimpleMutexDestroy();
    free(*a1);
    *a1 = 0;
  }
}

uint64_t videopipelineCopyNextNonJerkyStopTime(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFArrayRef theArray = 0;
  figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, 0);
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count >= 1)
  {
    CFIndex v6 = Count;
    CFIndex v7 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
      uint64_t FigBaseObject = FigImageQueueGetFigBaseObject(ValueAtIndex);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      char v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v11 + 48);
      if (v12)
      {
        uint64_t v13 = v12(FigBaseObject, @"FigImageQueueProperty_NextNonJerkyStopTime", a2, a3);
        uint64_t v14 = v13;
        if (v13 == -12783 || v13 == 0) {
          goto LABEL_19;
        }
      }
      else
      {
        uint64_t v14 = 4294954514;
      }
      if (v6 == ++v7) {
        goto LABEL_19;
      }
    }
  }
  uint64_t v14 = 0;
LABEL_19:
  if (theArray) {
    CFRelease(theArray);
  }
  return v14;
}

BOOL crabsChangeBlockVolatility(void *a1, int *a2, int a3, int a4)
{
  if (!*((void *)a2 + 11) || (a2[2] & 0x11) != 0) {
    return 0;
  }
  crabsAdjustGroupBoundariesToRemoval(a1, a2);
  if ((a3 & 0xFFFFFFFE) == 2)
  {
    BOOL result = crabsMakeVolatile(*((void *)a2 + 11), a3, a4);
    if (!result) {
      return result;
    }
LABEL_32:
    *((_WORD *)a2 + 4) |= 0x80u;
    return 1;
  }
  uint64_t v9 = *((void *)a2 + 11);
  if (a3)
  {
    if (a4 == 1) {
      int v10 = 769;
    }
    else {
      int v10 = 577;
    }
    int v19 = v10;
    int v11 = MEMORY[0x199712240](*MEMORY[0x1E4F14960], v9, 0, &v19);
    BOOL result = 0;
    if (v11) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = (v19 & 3) == 2;
    }
    if (!v12)
    {
      uint64_t v13 = *a2;
      if (a1[55] == -1)
      {
        a1[56] = v13;
      }
      else if (a4 != 1)
      {
        a1[56] = v13;
        goto LABEL_32;
      }
      a1[55] = v13;
      goto LABEL_32;
    }
  }
  else
  {
    if (a4 == 1) {
      int v14 = 1281;
    }
    else {
      int v14 = 1089;
    }
    int v18 = v14;
    int v15 = MEMORY[0x199712240](*MEMORY[0x1E4F14960], v9, 0, &v18);
    BOOL result = 0;
    if (v15) {
      BOOL v16 = 1;
    }
    else {
      BOOL v16 = (v18 & 3) == 2;
    }
    if (!v16)
    {
      uint64_t v17 = *a2;
      if (a1[53] == -1)
      {
        a1[54] = v17;
      }
      else if (a4 != 1)
      {
        a1[54] = v17;
        goto LABEL_32;
      }
      a1[53] = v17;
      goto LABEL_32;
    }
  }
  return result;
}

void *crabsAdjustGroupBoundariesToRemoval(void *result, int *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = result + 53;
  uint64_t v4 = result[53];
  uint64_t v5 = result[54];
  if (v5 == v2)
  {
    if (v4 < v2)
    {
      do
      {
        if (v2 <= v4) {
          break;
        }
        a2 = **(int ***)(*((void *)a2 + 7) + 8);
        uint64_t v2 = *a2;
        result[54] = v2;
      }
      while ((a2[2] & 0x80) == 0);
      return result;
    }
LABEL_15:
    *uint64_t v3 = -1;
    v3[1] = -1;
    return result;
  }
  if (v4 == v2)
  {
    do
    {
      if (v2 >= v5) {
        break;
      }
      a2 = (int *)*((void *)a2 + 6);
      uint64_t v2 = *a2;
      *uint64_t v3 = v2;
    }
    while ((a2[2] & 0x80) == 0);
  }
  else
  {
    uint64_t v3 = result + 55;
    uint64_t v6 = result[55];
    uint64_t v7 = result[56];
    if (v7 == v2)
    {
      if (v6 >= v2) {
        goto LABEL_15;
      }
      do
      {
        if (v2 <= v6) {
          break;
        }
        a2 = **(int ***)(*((void *)a2 + 7) + 8);
        uint64_t v2 = *a2;
        result[56] = v2;
      }
      while ((a2[2] & 0x80) == 0);
    }
    else if (v6 == v2)
    {
      do
      {
        if (v2 >= v7) {
          break;
        }
        a2 = (int *)*((void *)a2 + 6);
        uint64_t v2 = *a2;
        *uint64_t v3 = v2;
      }
      while ((a2[2] & 0x80) == 0);
    }
  }
  return result;
}

uint64_t bossSwitchMentorsToSideQueues(uint64_t a1, CFIndex a2)
{
  uint64_t result = FigCFRangeGetLimit();
  if (a2 < result)
  {
    CFIndex v5 = a2;
    do
    {
      uint64_t v6 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v5) + 12);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(void (**)(uint64_t))(v8 + 80);
      if (v9) {
        v9(v6);
      }
      ++v5;
      uint64_t result = FigCFRangeGetLimit();
    }
    while (v5 < result);
  }
  return result;
}

uint64_t sbcbq_switchToSideQueue()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  *((unsigned char *)DerivedStorage + 8) = 0;
  *((unsigned char *)DerivedStorage + 152) = 0;
  MEMORY[0x19970E930](*DerivedStorage);
  MEMORY[0x19970E910](DerivedStorage[13]);
  CFDictionaryRef v1 = (void (*)(void))DerivedStorage[14];
  if (v1) {
    v1(DerivedStorage[15]);
  }
  MEMORY[0x19970E930](DerivedStorage[13]);
  return 0;
}

void crabsRemovePurgedBacking(uint64_t a1, int *a2, int a3)
{
  int v6 = a2[1];
  *((_WORD *)a2 + 4) &= ~0x80u;
  crabsAdjustGroupBoundariesToRemoval((void *)a1, a2);
  CFAllocatorDeallocate(*(CFAllocatorRef *)a1, *((void **)a2 + 11));
  *((void *)a2 + 11) = 0;
  if (!*((void *)a2 + 10)) {
    crabsMarkBlockUnfilled(a1, (uint64_t)a2);
  }
  uint64_t v7 = *(void *)(a1 + 96);
  gCRABS_Stats_3 -= v7;
  *(void *)(a1 + 864) -= v7;
  ++*(void *)(a1 + 408);
  if ((a2[2] & 0x11) == 0)
  {
    if (a3) {
      uint64_t v8 = a1 + 264;
    }
    else {
      uint64_t v8 = a1 + 280;
    }
    removeFromList(a1, v8, (uint64_t)a2, 0);
  }
  uint64_t v9 = *a2;
  uint64_t v10 = *(void *)(a1 + 224);
  if (v10 <= v9)
  {
    uint64_t v11 = *(void *)(a1 + 240);
    if (v11 < v10 || v11 > v9) {
      *(void *)(a1 + 240) = v9;
    }
  }
  if (v6)
  {
    if (*(unsigned char *)(a1 + 128)) {
      BOOL v12 = 1;
    }
    else {
      BOOL v12 = v10 <= v9;
    }
    if (v12) {
      __int16 v13 = 2;
    }
    else {
      __int16 v13 = 1;
    }
    *(_WORD *)(a1 + 176) |= v13;
    *(unsigned char *)(a1 + 128) = 0;
  }
}

uint64_t crabsMarkBlockUnfilled(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a2 + 8) &= 0xFFB3u;
  MEMORY[0x19970E290](*(void *)(a1 + 72));
  uint64_t v4 = *(void *)(a1 + 64) - *(int *)(a2 + 4);
  *(void *)(a1 + 64) = v4;
  uint64_t v5 = *(void *)(a1 + 920);
  if (v5)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v7 + 56);
    if (v8) {
      v8(v5, 0x1EE582BF8, 0x1EE583C98, v4, 0);
    }
  }
  uint64_t result = MEMORY[0x19970E2B0](*(void *)(a1 + 72));
  *(_DWORD *)(a2 + 4) = 0;
  *(_WORD *)(a1 + 130) = 0;
  return result;
}

uint64_t fpm_streamCacheChangedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (__CFData *)FigRetainProxyGetOwner();
    MutableBytePtr = CFDataGetMutableBytePtr(Owner);
    MEMORY[0x19970E290](*((void *)MutableBytePtr + 6));
    ++*((_DWORD *)MutableBytePtr + 24);
    if (!a5)
    {
      MutableBytePtr[313] = 1;
      CMTimebaseGetTime(&time1, *((CMTimebaseRef *)MutableBytePtr + 3));
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      CMTimeMaximum(&v10, &time1, &time2);
      *((CMTime *)MutableBytePtr + 9) = v10;
    }
    int v8 = *((_DWORD *)MutableBytePtr + 28);
    if (v8)
    {
      if (v8 != 3 || !a5 || *((_DWORD *)MutableBytePtr + 26) == 1)
      {
LABEL_11:
        fpm_ensureUpdatePrimed((uint64_t)MutableBytePtr);
LABEL_13:
        MEMORY[0x19970E2B0](*((void *)MutableBytePtr + 6));
        return FigRetainProxyUnlockMutex();
      }
    }
    else if (*((_DWORD *)MutableBytePtr + 26) == 1 || MutableBytePtr[8555] | (a5 == 0))
    {
      goto LABEL_11;
    }
    fpm_updateCacheAndNotify((uint64_t)MutableBytePtr);
    goto LABEL_13;
  }
  return FigRetainProxyUnlockMutex();
}

uint64_t bossReplaceMainQueuesWithSideQueuesAndSwitchMentorsToMainQueues(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 64));
  if (*(unsigned char *)(a1 + 840))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(uint64_t *)(a1 + 80) >= 1)
  {
    CFIndex v3 = 0;
    do
    {
      uint64_t v4 = *((void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v3) + 12);
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v5) {
        uint64_t v6 = v5;
      }
      else {
        uint64_t v6 = 0;
      }
      uint64_t v7 = *(void (**)(uint64_t))(v6 + 88);
      if (v7) {
        v7(v4);
      }
      ++v3;
    }
    while (v3 < *(void *)(a1 + 80));
  }
  return MEMORY[0x19970E930](*(void *)(a1 + 64));
}

uint64_t sbcbq_replaceMainQueueWithSideQueueAndSwitchToMainQueue()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (*((unsigned char *)DerivedStorage + 152)) {
    CMBufferQueueReset((CMBufferQueueRef)DerivedStorage[17]);
  }
  MEMORY[0x19970E930](*DerivedStorage);
  CFDictionaryRef v1 = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*v1);
  if (CFArrayGetCount((CFArrayRef)v1[20]) <= 0)
  {
    MEMORY[0x19970E930](*v1);
  }
  else
  {
    CFArrayRef v2 = (const __CFArray *)v1[20];
    v1[20] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    MEMORY[0x19970E930](*v1);
    if (v2)
    {
      CFIndex Count = CFArrayGetCount(v2);
      if (Count >= 2)
      {
        CFIndex v4 = 0;
        CFIndex v5 = Count - 1;
        do
        {
          CFArrayGetValueAtIndex(v2, v4);
          CFArrayGetValueAtIndex(v2, v4 + 1);
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          v4 += 2;
        }
        while (v4 < v5);
      }
      CFRelease(v2);
    }
  }
  MEMORY[0x19970E910](*DerivedStorage);
  CMBufferRef v6 = CMBufferQueueDequeueAndRetain((CMBufferQueueRef)DerivedStorage[18]);
  if (v6)
  {
    CMBufferRef v7 = v6;
    do
    {
      CMBufferQueueEnqueue((CMBufferQueueRef)DerivedStorage[17], v7);
      CFRelease(v7);
      CMBufferRef v7 = CMBufferQueueDequeueAndRetain((CMBufferQueueRef)DerivedStorage[18]);
    }
    while (v7);
  }
  *((unsigned char *)DerivedStorage + 8) = 1;
  MEMORY[0x19970E930](*DerivedStorage);
  MEMORY[0x19970E910](DerivedStorage[13]);
  int v8 = (void (*)(void))DerivedStorage[14];
  if (v8) {
    v8(DerivedStorage[15]);
  }
  MEMORY[0x19970E930](DerivedStorage[13]);
  return 0;
}

uint64_t crabsMakeBackingNonvolatile(void *a1, uint64_t a2, int a3)
{
  uint64_t v6 = *(void *)(a2 + 88);
  int v11 = 0;
  if (MEMORY[0x199712240](*MEMORY[0x1E4F14960], v6, 0, &v11)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = (v11 & 3) == 2;
  }
  uint64_t v8 = !v7;
  if (v7)
  {
    crabsRemovePurgedBacking((uint64_t)a1, (int *)a2, a3);
  }
  else
  {
    *(_WORD *)(a2 + 8) &= ~0x80u;
    crabsAdjustGroupBoundariesToRemoval(a1, (int *)a2);
    uint64_t v9 = a1[12];
    gCRABS_Stats_3 -= v9;
    a1[108] -= v9;
  }
  return v8;
}

uint64_t stepUpEntry(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 88);
  if (!v1) {
    return 4294954456;
  }
  int v3 = v1 - 1;
  *(_DWORD *)(a1 + 88) = v3;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t destination = 0;
  CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v4 + 416), 8 * v3, 8uLL, &destination);
  unsigned int v5 = bswap32(destination);
  *(_DWORD *)(a1 + 112) = v5;
  *(unsigned char *)(a1 + 120) = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(int *)(v6 + 244);
  if (v7)
  {
    unsigned int v8 = v5 / v7;
    *(_DWORD *)(a1 + 112) = v8;
  }
  else
  {
    uint64_t v10 = *(int *)(a1 + 88);
    uint64_t destination = 0;
    CMBlockBufferCopyDataBytes(*(CMBlockBufferRef *)(v6 + 416), 8 * v10, 8uLL, &destination);
    uint64_t v7 = bswap32(HIDWORD(destination));
    unsigned int v8 = *(_DWORD *)(a1 + 112);
  }
  uint64_t result = 0;
  *(void *)(a1 + 96) -= v7 * v8;
  *(void *)(a1 + 104) = v7;
  int v11 = *(_DWORD *)(a1 + 116);
  *(_DWORD *)(a1 + 116) = v11 - v8;
  *(_DWORD *)(a1 + 80) = v11 - 1;
  return result;
}

void *VideoMentorInvalidate(void *result)
{
  if (!*(unsigned char *)result)
  {
    int v1 = result;
    *(unsigned char *)uint64_t result = 1;
    if (result[13])
    {
      MEMORY[0x19970E910](result[12]);
      *((_DWORD *)v1 + 28) = 5;
      *((unsigned char *)v1 + 116) = 1;
      FigMemoryBarrier();
      MEMORY[0x19970E930](v1[12]);
      FigSemaphoreSignal();
      FigThreadAbortForTeardown();
      FigThreadJoin();
      v1[13] = 0;
    }
    uint64_t v2 = v1[3];
    if (v2 && *((unsigned char *)v1 + 40))
    {
      uint64_t v3 = v1[4];
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v5 = v4 ? v4 : 0;
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 40);
      if (v6) {
        v6(v2, v3);
      }
    }
    if (v1[2])
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
    }
    uint64_t result = (void *)v1[69];
    v1[69] = 0;
    if (result)
    {
      do
      {
        uint64_t v7 = (void *)*result;
        videoMentorSavedFrameDestroy(result);
        uint64_t result = v7;
      }
      while (v7);
    }
  }
  return result;
}

void figVideoRenderPipelineFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  figVideoRenderPipelineInvalidate(a1);
  uint64_t v3 = *(const void **)(DerivedStorage + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 40);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 48);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 56);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 64);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 64) = 0;
  }
  unsigned int v8 = *(const void **)(DerivedStorage + 8);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 24);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 32);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 32) = 0;
  }
  int v11 = *(const void **)(DerivedStorage + 104);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 104) = 0;
  }
  BOOL v12 = *(const void **)(DerivedStorage + 112);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 112) = 0;
  }
  __int16 v13 = *(const void **)(DerivedStorage + 88);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 88) = 0;
  }
  if (*(void *)(DerivedStorage + 72))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 72) = 0;
  }
  int v14 = *(NSObject **)(DerivedStorage + 192);
  if (v14)
  {
    dispatch_release(v14);
    *(void *)(DerivedStorage + 192) = 0;
  }
  FigSimpleMutexDestroy();
  int v15 = *(const void **)(DerivedStorage + 184);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 184) = 0;
  }
  BOOL v16 = *(const void **)(DerivedStorage + 168);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 168) = 0;
  }
  *(_DWORD *)(DerivedStorage + 4) = 0;

  videopipelineUpdateVideoPlaybackStateForClient();
}

uint64_t figVideoRenderPipelineInvalidate(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  CFTypeRef cf = 0;
  if (DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    if (!*(unsigned char *)DerivedStorage)
    {
      *(unsigned char *)uint64_t DerivedStorage = 1;
      if (*(void *)(DerivedStorage + 16))
      {
        FigStopForwardingMediaServicesProcessDeathNotification();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListeners();
        VMC2Invalidate(*(void *)(v3 + 16));
        uint64_t v4 = *(void *)(v3 + 32);
        if (v4)
        {
          uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v6 = v5 ? v5 : 0;
          uint64_t v7 = *(void (**)(uint64_t))(v6 + 24);
          if (v7) {
            v7(v4);
          }
        }
      }
      figVideoRenderPipelineCopyVideoImageQueueArray(a1, &theArray, &cf);
      if (theArray)
      {
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count >= 1)
        {
          CFIndex v9 = Count;
          for (CFIndex i = 0; i != v9; ++i)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
            videopipelineRemoveListenersOnImageQueue(a1, (uint64_t)ValueAtIndex, i == 0);
          }
        }
      }
      CFArrayRef v12 = *(const __CFArray **)(v3 + 40);
      if (v12)
      {
        CFIndex v13 = CFArrayGetCount(v12);
        if (v13 >= 1)
        {
          CFIndex v14 = v13;
          for (CFIndex j = 0; j != v14; ++j)
          {
            CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 40), j);
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListeners();
          }
        }
      }
      videopipelineSetTimebase(a1, 0);
      MEMORY[0x19970E910](*(void *)(v3 + 72));
      BOOL v16 = *(const void **)(v3 + 56);
      if (v16)
      {
        CFRelease(v16);
        *(void *)(v3 + 56) = 0;
      }
      uint64_t v17 = *(const void **)(v3 + 64);
      if (v17)
      {
        CFRelease(v17);
        *(void *)(v3 + 64) = 0;
      }
      MEMORY[0x19970E930](*(void *)(v3 + 72));
      if (theArray) {
        CFRelease(theArray);
      }
      if (cf) {
        CFRelease(cf);
      }
      int v18 = *(const void **)(v3 + 128);
      if (v18)
      {
        CFRelease(v18);
        *(void *)(v3 + 128) = 0;
      }
    }
  }
  return 0;
}

void VMC2Invalidate(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    VMC2Stop(a1);
    VMC2WaitUntilCompletelyStopped(a1);
    *(unsigned char *)(a1 + 16) = 1;
    vmc2FinishAndDestroyImageEnhancementFilter(a1);
    MEMORY[0x19970E910](*(void *)(a1 + 1480));
    if (*(void *)(a1 + 1488))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v2 = *(const void **)(a1 + 1488);
      if (v2)
      {
        CFRelease(v2);
        *(void *)(a1 + 1488) = 0;
      }
    }
    MEMORY[0x19970E930](*(void *)(a1 + 1480));
    uint64_t v3 = *(NSObject **)(a1 + 448);
    if (v3)
    {
      dispatch_sync_f(v3, 0, (dispatch_function_t)vmc2noop);
      dispatch_release(*(dispatch_object_t *)(a1 + 448));
      *(void *)(a1 + 448) = 0;
    }
    if (*(void *)(a1 + 72))
    {
      MEMORY[0x19970E910]();
      vmc2RemoveDecompressionSession(a1);
      MEMORY[0x19970E930](*(void *)(a1 + 72));
    }
    *(unsigned char *)(a1 + 626) = 0;
    if (*(unsigned char *)(a1 + 248))
    {
      FigReadWriteLockLockForRead();
      if (*(unsigned char *)(a1 + 249))
      {
        uint64_t v4 = *(void (**)(void, void))(a1 + 184);
        if (v4) {
          v4(*(void *)(a1 + 152), *(void *)(a1 + 240));
        }
        *(void *)(a1 + 184) = 0;
        *(void *)(a1 + 240) = 0;
        *(unsigned char *)(a1 + 248) = 0;
      }
      else
      {
        FigSignalErrorAt();
      }
      FigReadWriteLockUnlockForRead();
    }
    uint64_t v5 = *(void *)(a1 + 264);
    if (v5)
    {
      if (!*(unsigned char *)(a1 + 272)) {
        goto LABEL_25;
      }
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      unsigned int v8 = *(void (**)(uint64_t, void, void))(v7 + 8);
      if (v8) {
        v8(v5, 0, 0);
      }
      *(unsigned char *)(a1 + 272) = 0;
      uint64_t v5 = *(void *)(a1 + 264);
      if (v5)
      {
LABEL_25:
        uint64_t FigBaseObject = FigActivitySchedulerGetFigBaseObject(v5);
        if (FigBaseObject)
        {
          uint64_t v10 = FigBaseObject;
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v12 = v11 ? v11 : 0;
          CFIndex v13 = *(void (**)(uint64_t))(v12 + 24);
          if (v13) {
            v13(v10);
          }
        }
      }
    }
    if (*(void *)(a1 + 88))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      uint64_t v14 = FigSampleBufferProviderGetFigBaseObject(*(void *)(a1 + 88));
      if (v14)
      {
        uint64_t v15 = v14;
        uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v17 = v16 ? v16 : 0;
        int v18 = *(void (**)(uint64_t))(v17 + 24);
        if (v18) {
          v18(v15);
        }
      }
    }
    CMNotificationCenterGetDefaultLocalCenter();
    FPSupport_GetDisplayVideoRangeNotificationSingleton();
    CMNotificationCenterRemoveListener();
    int v19 = *(void (**)(void))(a1 + 120);
    if (v19)
    {
      v19(*(void *)(a1 + 104));
      *(void *)(a1 + 120) = 0;
    }
    FigReadWriteLockLockForWrite();
    CMTimeFlags v20 = *(void (**)(void))(a1 + 216);
    if (v20)
    {
      v20(*(void *)(a1 + 152));
      *(void *)(a1 + 216) = 0;
    }
    *(unsigned char *)(a1 + 249) = 0;
    FigReadWriteLockUnlockForWrite();
    CMTimeEpoch v21 = *(NSObject **)(a1 + 824);
    if (v21)
    {
      if (!*(unsigned char *)(a1 + 832))
      {
        dispatch_resume(v21);
        CMTimeEpoch v21 = *(NSObject **)(a1 + 824);
      }
      dispatch_source_cancel(v21);
      dispatch_release(*(dispatch_object_t *)(a1 + 824));
      *(void *)(a1 + 824) = 0;
    }
    CMTime v22 = *(NSObject **)(a1 + 816);
    if (v22)
    {
      dispatch_sync_f(v22, 0, (dispatch_function_t)vmc2noop);
      dispatch_release(*(dispatch_object_t *)(a1 + 816));
      *(void *)(a1 + 816) = 0;
    }
    vmc2ClearSavedList(a1);
  }
}

uint64_t VMC2Stop(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *(unsigned char *)(a1 + 288) = 0;
    FigMemoryBarrier();
    return 0;
  }
}

uint64_t VMC2WaitUntilCompletelyStopped(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(a1 + 296));
    MEMORY[0x19970E930](*(void *)(a1 + 296));
    uint64_t v3 = *(OpaqueVTDecompressionSession **)(a1 + 64);
    if (v3) {
      VTDecompressionSessionWaitForAsynchronousFrames(v3);
    }
    return 0;
  }
}

uint64_t activityOnThread_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)uint64_t DerivedStorage = 1;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  uint64_t v2 = *(void *)(DerivedStorage + 8);
  uint64_t v1 = *(void *)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 8) = 0;
  MEMORY[0x19970E930](v1);
  if (v2)
  {
    *(_WORD *)(DerivedStorage + 56) = 256;
    FigMemoryBarrier();
    FigSemaphoreSignal();
    FigThreadJoin();
  }
  return 0;
}

uint64_t activityOnThread_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(void (**)(uint64_t))(v4 + 24);
    if (v5) {
      v5(a1);
    }
  }
  FigSimpleMutexDestroy();
  DerivedStorage[6] = 0;
  FigSemaphoreDestroy();
  DerivedStorage[3] = 0;
  uint64_t result = FigSimpleMutexDestroy();
  DerivedStorage[2] = 0;
  return result;
}

uint64_t sbp_bq_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 1;
    uint64_t v2 = *(opaqueCMBufferQueueTriggerToken **)(DerivedStorage + 16);
    if (v2)
    {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(DerivedStorage + 8), v2);
      *(void *)(v1 + 16) = 0;
    }
    uint64_t v3 = *(opaqueCMBufferQueueTriggerToken **)(v1 + 24);
    if (v3)
    {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(v1 + 8), v3);
      *(void *)(v1 + 24) = 0;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
  }
  return 0;
}

uint64_t sbp_bq_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t))(v4 + 24);
    if (v5) {
      v5(a1);
    }
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 8);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t result = *(void *)(DerivedStorage + 32);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 32) = 0;
  }
  return result;
}

void vmc2Finalize(void *a1)
{
  VMC2Invalidate((uint64_t)a1);
  uint64_t v2 = a1[57];
  if (v2)
  {
    dispatch_release(v2);
    a1[57] = 0;
  }
  if (a1[9])
  {
    FigSimpleMutexDestroy();
    a1[9] = 0;
  }
  uint64_t v3 = (const void *)a1[10];
  if (v3)
  {
    CFRelease(v3);
    a1[10] = 0;
  }
  uint64_t v4 = (const void *)a1[90];
  if (v4)
  {
    CFRelease(v4);
    a1[90] = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v5 = (const void *)a1[75];
  if (v5)
  {
    CFRelease(v5);
    a1[75] = 0;
  }
  FigSimpleMutexDestroy();
  a1[79] = 0;
  uint64_t v6 = (const void *)a1[33];
  if (v6)
  {
    CFRelease(v6);
    a1[33] = 0;
  }
  uint64_t v7 = (const void *)a1[11];
  if (v7)
  {
    CFRelease(v7);
    a1[11] = 0;
  }
  FigSimpleMutexDestroy();
  a1[35] = 0;
  FigSimpleMutexDestroy();
  a1[37] = 0;
  FigSemaphoreDestroy();
  a1[38] = 0;
  FigSimpleMutexDestroy();
  a1[67] = 0;
  FigReadWriteLockDestroy();
  unsigned int v8 = (const void *)a1[3];
  if (v8)
  {
    CFRelease(v8);
    a1[3] = 0;
  }
  CFIndex v9 = (const void *)a1[4];
  if (v9)
  {
    CFRelease(v9);
    a1[4] = 0;
  }
  uint64_t v10 = (const void *)a1[6];
  if (v10)
  {
    CFRelease(v10);
    a1[6] = 0;
  }
  uint64_t v11 = (const void *)a1[7];
  if (v11)
  {
    CFRelease(v11);
    a1[7] = 0;
  }
  uint64_t v12 = (const void *)a1[73];
  if (v12)
  {
    CFRelease(v12);
    a1[73] = 0;
  }
  CFIndex v13 = (const void *)a1[92];
  if (v13)
  {
    CFRelease(v13);
    a1[92] = 0;
  }
  uint64_t v14 = (const void *)a1[93];
  if (v14)
  {
    CFRelease(v14);
    a1[93] = 0;
  }
  uint64_t v15 = (const void *)a1[94];
  if (v15)
  {
    CFRelease(v15);
    a1[94] = 0;
  }
  uint64_t v16 = (const void *)a1[95];
  if (v16)
  {
    CFRelease(v16);
    a1[95] = 0;
  }
  uint64_t v17 = (const void *)a1[122];
  if (v17)
  {
    CFRelease(v17);
    a1[122] = 0;
  }
  int v18 = (const void *)a1[123];
  if (v18)
  {
    CFRelease(v18);
    a1[123] = 0;
  }
  int v19 = (const void *)a1[124];
  if (v19)
  {
    CFRelease(v19);
    a1[124] = 0;
  }
  CMTimeFlags v20 = (const void *)a1[96];
  if (v20)
  {
    CFRelease(v20);
    a1[96] = 0;
  }
  CMTimeEpoch v21 = (const void *)a1[125];
  if (v21)
  {
    CFRelease(v21);
    a1[125] = 0;
  }
  CMTime v22 = (const void *)a1[126];
  if (v22)
  {
    CFRelease(v22);
    a1[126] = 0;
  }
  CMTimeEpoch v23 = (const void *)a1[127];
  if (v23)
  {
    CFRelease(v23);
    a1[127] = 0;
  }
  uint64_t v24 = (const void *)a1[128];
  if (v24)
  {
    CFRelease(v24);
    a1[128] = 0;
  }
  unsigned int v25 = (const void *)a1[130];
  if (v25)
  {
    CFRelease(v25);
    a1[130] = 0;
  }
  CMTimeEpoch v26 = (const void *)a1[131];
  if (v26)
  {
    CFRelease(v26);
    a1[131] = 0;
  }
  CMTimeFlags v27 = (const void *)a1[132];
  if (v27)
  {
    CFRelease(v27);
    a1[132] = 0;
  }
  uint64_t v28 = (const void *)a1[106];
  if (v28)
  {
    CFRelease(v28);
    a1[106] = 0;
  }
  uint64_t v29 = (const void *)a1[176];
  if (v29)
  {
    CFRelease(v29);
    a1[176] = 0;
  }
  uint64_t v30 = a1[121];
  if (v30)
  {
    dispatch_release(v30);
    a1[121] = 0;
  }
  uint64_t v31 = (const void *)a1[112];
  if (v31)
  {
    CFRelease(v31);
    a1[112] = 0;
  }
  CMTimeValue v32 = (const void *)a1[32];
  if (v32)
  {
    CFRelease(v32);
    a1[32] = 0;
  }
  FigSimpleMutexDestroy();
  a1[185] = 0;
  CMTimeScale v33 = (const void *)a1[186];
  if (v33)
  {
    CFRelease(v33);
    a1[186] = 0;
  }
  if (a1[72])
  {
    FigSimpleMutexDestroy();
    a1[72] = 0;
  }
  if (dword_1E934D4F0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1[145])
  {
    FigSimpleMutexDestroy();
    a1[145] = 0;
  }
  if (a1[97])
  {
    FigSimpleMutexDestroy();
    a1[97] = 0;
  }
  CMTimeScale v35 = (const void *)a1[98];
  if (v35)
  {
    CFRelease(v35);
    a1[98] = 0;
  }
  CMTimeValue v36 = (const void *)a1[101];
  if (v36)
  {
    CFRelease(v36);
    a1[101] = 0;
  }
  CMTimeScale v37 = (void *)a1[174];
  if (v37)
  {
    os_release(v37);
    a1[174] = 0;
  }
  int v38 = (const void *)a1[134];
  if (v38)
  {
    CFRelease(v38);
    a1[134] = 0;
  }
  int v39 = a1[58];
  if (v39)
  {
    dispatch_release(v39);
    a1[58] = 0;
  }
}

void piqca_finalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 2472) = mach_absolute_time();
  piqca_gmstats_dump();
  if (piqca_getSharedPollingThreadContext_initSharedPollingThreadOnce != -1) {
    dispatch_once_f(&piqca_getSharedPollingThreadContext_initSharedPollingThreadOnce, &piqca_getSharedPollingThreadContext_sharedPollingContext, (dispatch_function_t)piqca_initSharedPollingThread);
  }
  MEMORY[0x19970E910](qword_1E934E210);
  if (CFDictionaryGetValue((CFDictionaryRef)qword_1E934E218, a1)) {
    CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1E934E218, a1);
  }
  MEMORY[0x19970E930](qword_1E934E210);
  if (*(void *)(DerivedStorage + 3080))
  {
    uint64_t CMBaseObject = FigImageQueueGaugeGetCMBaseObject();
    if (CMBaseObject)
    {
      uint64_t v4 = CMBaseObject;
      uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v6 = v5 ? v5 : 0;
      uint64_t v7 = *(void (**)(uint64_t))(v6 + 24);
      if (v7) {
        v7(v4);
      }
    }
    unsigned int v8 = *(const void **)(DerivedStorage + 3080);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(DerivedStorage + 3080) = 0;
    }
  }
  if (*(void *)DerivedStorage)
  {
    MEMORY[0x19970E910](*(void *)(*(void *)(DerivedStorage + 16) + 8));
    CFIndex v9 = *(void **)(DerivedStorage + 16);
    void *v9 = 0;
    MEMORY[0x19970E930](v9[1]);
    piqca_decrementSnapLatchCount((void **)(DerivedStorage + 16));
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 3064);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 3064) = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v11 = *(const void **)(DerivedStorage + 3040);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 3040) = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v12 = *(NSObject **)(DerivedStorage + 3072);
  if (v12)
  {
    dispatch_release(v12);
    *(void *)(DerivedStorage + 3072) = 0;
  }
  FigImageQueueDisplayCountHistory_FinishTracingDisplayCount(*(void *)(DerivedStorage + 2848));
  CFIndex v13 = *(const void **)(DerivedStorage + 2848);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 2848) = 0;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 120);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 120) = 0;
  }
  if (*(void *)(DerivedStorage + 8)) {
    FigSimpleMutexDestroy();
  }
  if (*(void *)(DerivedStorage + 2776)) {
    FigSimpleMutexDestroy();
  }
  if (*(void *)(DerivedStorage + 2464))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 2464) = 0;
  }
  if (dword_1E934E1F0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 2488);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 2488) = 0;
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 2936);
  if (v17)
  {
    FigSyncMomentSourceDestroy(v17);
    *(void *)(DerivedStorage + 2936) = 0;
  }
  int v18 = *(NSObject **)(DerivedStorage + 2928);
  if (v18) {
    dispatch_release(v18);
  }
  int v19 = *(void **)(DerivedStorage + 2864);
  if (v19)
  {
    os_release(v19);
    *(void *)(DerivedStorage + 2864) = 0;
  }
  CMTimeFlags v20 = *(const void **)(DerivedStorage + 3008);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(DerivedStorage + 3008) = 0;
  }
  CMTimeEpoch v21 = *(const void **)(DerivedStorage + 144);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(DerivedStorage + 144) = 0;
  }
}

void FigCRABSScheduledIOFinalize()
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  siocrabsFinishUnlocked(v1, 0, 1);
  FigSimpleMutexDestroy();
  uint64_t v2 = *DerivedStorage;

  CFRelease(v2);
}

void FPSupport_DeleteCASlot(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x199711A30]();
  if (a1)
  {
    Context = (void *)fpSupport_getContext();
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [Context deleteSlot:a1];
    [MEMORY[0x1E4F39CF8] commit];
  }
}

uint64_t FigCRABSInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 760);
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  uint64_t v3 = FigRetainProxyLockMutex();
  if (v3)
  {
    uint64_t v4 = v3;
    if (!v2) {
      return v4;
    }
    goto LABEL_12;
  }
  if (*(unsigned char *)(DerivedStorage + 104) == 1)
  {
    *(unsigned char *)(DerivedStorage + 104) = 0;
    FigRetainProxyInvalidate();
    FigMemoryBarrier();
    if (*(void *)(DerivedStorage + 32))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListeners();
    }
    crabsCancelRead((void *)DerivedStorage, (uint64_t *)(DerivedStorage + 512), -12932);
    crabsCancelRead((void *)DerivedStorage, (uint64_t *)(DerivedStorage + 616), -12932);
    crabsWaitForReadCancel(DerivedStorage, DerivedStorage + 512);
    crabsWaitForReadCancel(DerivedStorage, DerivedStorage + 616);
    if (*(unsigned char *)(DerivedStorage + 504))
    {
      crabsCompleteLazySync(DerivedStorage, 1);
      crabsCompleteLazyPagein(DerivedStorage, 1);
    }
    uint64_t v4 = crabsSyncCache(DerivedStorage);
    uint64_t v5 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
    void *v5 = *(void *)(DerivedStorage + 8);
    v5[1] = os_retain(*(void **)(DerivedStorage + 936));
    global_queue = dispatch_get_global_queue(0, 0);
    dispatch_async_f(global_queue, v5, (dispatch_function_t)crabsReleaseDiskCacheProviderAsync);
    *(void *)(DerivedStorage + 8) = 0;
  }
  else
  {
    uint64_t v4 = 0;
  }
  crabsRetainProxyUnlockWithActions();
  if (v2) {
LABEL_12:
  }
    CFRelease(v2);
  return v4;
}

uint64_t crabsWaitForReadCancel(uint64_t a1, uint64_t a2)
{
  if (*(uint64_t *)(a2 + 56) >= 1)
  {
    do
    {
      MEMORY[0x19970CC00](*(void *)(a2 + 40));
      FigRetainProxyLockMutex();
      usleep(0x2710u);
      uint64_t result = FigRetainProxyUnlockMutex();
    }
    while (*(uint64_t *)(a2 + 56) > 0);
  }
  return result;
}

uint64_t FigCFHTTPCopyIdentifier(uint64_t a1, const __CFDictionary **a2)
{
  if (!a2) {
    goto LABEL_13;
  }
  FigByteFlumeGetFigBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 72) != 1) {
    return 4294954513;
  }
  uint64_t v4 = DerivedStorage;
  if (*(void *)(DerivedStorage + 264)
    && (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        (MutableCopCGFloat y = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, *(CFDictionaryRef *)(v4 + 264))) != 0))
  {
    CFDictionaryRef v7 = MutableCopy;
    if (!CFDictionaryContainsKey(MutableCopy, @"URL")) {
      goto LABEL_12;
    }
    if (!CFDictionaryContainsKey(v7, @"MIME Type"))
    {
      FigCFHTTPIsDataURL(*(const __CFURL **)(v4 + 168));
      FigCFDictionarySetValue();
    }
    if (CFDictionaryContainsKey(*(CFDictionaryRef *)(v4 + 264), @"Size"))
    {
      uint64_t result = 0;
      *a2 = v7;
    }
    else
    {
LABEL_12:
      uint64_t v9 = FigSignalErrorAt();
      CFRelease(v7);
      return v9;
    }
  }
  else
  {
LABEL_13:
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigShared_CheckIntoDiskCache(const __CFString *cf, const __CFString *a2, const void *a3)
{
  CFStringRef v5 = cf;
  CFTypeRef v10 = 0;
  CFTypeRef cfa = cf;
  if (cf)
  {
    CFRetain(cf);
    if (sDiskCacheIsRemote)
    {
      uint64_t DirectoryAtPath = fs_CreateDirectoryAtPath(v5);
      goto LABEL_6;
    }
LABEL_12:
    uint64_t v8 = FigSharedRemote_CheckIntoDiskCache(v5, (uint64_t)a2, (uint64_t)a3);
    goto LABEL_13;
  }
  if ((sDiskCacheIsRemote & 1) == 0) {
    goto LABEL_12;
  }
  uint64_t DirectoryAtPath = FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask(&cfa, 0);
LABEL_6:
  uint64_t v7 = DirectoryAtPath;
  if (DirectoryAtPath) {
    goto LABEL_14;
  }
  if ((sDiskCacheIsRemote & 1) == 0)
  {
    CFStringRef v5 = (const __CFString *)cfa;
    goto LABEL_12;
  }
  MEMORY[0x19970EE10](&fmp_EnsureDiskCache_sInitDiskCacheOnce, InitDiskCache);
  uint64_t v7 = sDiskInitStatus;
  if (!sDiskInitStatus)
  {
    uint64_t v7 = fs_CopyRepositoryByParent((const __CFString *)cfa, 1, (void **)&v10);
    if (!v7)
    {
      uint64_t v8 = FigDiskCacheRepositoryCheckIn((uint64_t)v10, a2, a3);
LABEL_13:
      uint64_t v7 = v8;
    }
  }
LABEL_14:
  if (cfa) {
    CFRelease(cfa);
  }
  if (v10) {
    CFRelease(v10);
  }
  return v7;
}

uint64_t FigDiskCacheRepositoryCheckIn(uint64_t a1, const __CFString *a2, const void *a3)
{
  if (a1 && a2 && a3)
  {
    MEMORY[0x19970E910](*(void *)(a1 + 16));
    uint64_t v6 = FigCFURLCreateDirectory();
    if (v6)
    {
      uint64_t v7 = v6;
    }
    else
    {
      if (FigFileForkOpenMainByCFURL())
      {
        uint64_t v7 = 0;
      }
      else
      {
        fdcr_ReadRepositoryPlist(a1);
        unsigned int v9 = fdcr_CheckInResource(a1, a2, a3, 0);
        char v10 = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 80)) == 0;
        unsigned int v11 = fdcr_WriteRepositoryPlist(a1, 0, 1, v10);
        if (v9) {
          uint64_t v7 = v9;
        }
        else {
          uint64_t v7 = v11;
        }
        FigFileForkClose();
      }
      if (*(unsigned char *)(a1 + 56)) {
        CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 72), (CFDictionaryApplierFunction)markDiskCacheRepositoryPurgeable, 0);
      }
    }
    MEMORY[0x19970E930](*(void *)(a1 + 16));
    return v7;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void *FigCRABSFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350B10)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)(DerivedStorage + 760))
  {
    FigCRABSInvalidate();
    uint64_t v2 = *(void *)(DerivedStorage + 920);
    if (v2)
    {
      uint64_t v3 = *(void *)(DerivedStorage + 840);
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v5 = v4 ? v4 : 0;
      uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v5 + 56);
      if (v6) {
        v6(v2, 0x1EE582BF8, 0x1EE55E358, v3, 0);
      }
    }
    uint64_t v7 = *(void *)(DerivedStorage + 920);
    if (v7)
    {
      uint64_t v8 = *(void *)(DerivedStorage + 848);
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      unsigned int v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v10 + 56);
      if (v11) {
        v11(v7, 0x1EE582BF8, 0x1EE55E378, v8, 0);
      }
      uint64_t v12 = *(void *)(DerivedStorage + 920);
      if (v12)
      {
        uint64_t v13 = *(void *)(DerivedStorage + 856);
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v15 + 56);
        if (v16) {
          v16(v12, 0x1EE582BF8, 0x1EE55E398, v13, 0);
        }
        uint64_t v17 = *(void *)(DerivedStorage + 920);
        if (v17)
        {
          uint64_t v18 = *(void *)(DerivedStorage + 864);
          uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v19) {
            uint64_t v20 = v19;
          }
          else {
            uint64_t v20 = 0;
          }
          CMTimeEpoch v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v20 + 56);
          if (v21) {
            v21(v17, 0x1EE582BF8, 0x1EE55E3B8, v18, 0);
          }
          uint64_t v22 = *(void *)(DerivedStorage + 920);
          if (v22)
          {
            uint64_t v23 = *(void *)(DerivedStorage + 872);
            uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v24) {
              uint64_t v25 = v24;
            }
            else {
              uint64_t v25 = 0;
            }
            CMTimeEpoch v26 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v25 + 56);
            if (v26) {
              v26(v22, 0x1EE582BF8, 0x1EE55E3D8, v23, 0);
            }
            uint64_t v27 = *(void *)(DerivedStorage + 920);
            if (v27)
            {
              uint64_t v28 = *(void *)(DerivedStorage + 880);
              uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v29) {
                uint64_t v30 = v29;
              }
              else {
                uint64_t v30 = 0;
              }
              uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v30 + 56);
              if (v31) {
                v31(v27, 0x1EE582BF8, 0x1EE55E3F8, v28, 0);
              }
              uint64_t v32 = *(void *)(DerivedStorage + 920);
              if (v32)
              {
                uint64_t v33 = *(void *)(DerivedStorage + 888);
                uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v34) {
                  uint64_t v35 = v34;
                }
                else {
                  uint64_t v35 = 0;
                }
                CMTimeValue v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v35 + 56);
                if (v36) {
                  v36(v32, 0x1EE582BF8, 0x1EE55E418, v33, 0);
                }
                uint64_t v37 = *(void *)(DerivedStorage + 920);
                if (v37)
                {
                  uint64_t v38 = *(void *)(DerivedStorage + 896);
                  uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v40 = v39 ? v39 : 0;
                  CMTimeScale v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v40 + 56);
                  if (v41) {
                    v41(v37, 0x1EE582BF8, 0x1EE55E438, v38, 0);
                  }
                }
              }
            }
          }
        }
      }
    }
    uint64_t StatsDictionary = (const void *)FigByteStreamStatsCreateStatsDictionary();
    if (FigCFDictionaryGetInt32IfPresent())
    {
      uint64_t v43 = *(void *)(DerivedStorage + 920);
      if (v43)
      {
        uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v45 = v44 ? v44 : 0;
        uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v45 + 56);
        if (v46) {
          v46(v43, 0x1EE582BF8, 0x1EE55E498, 0, 0);
        }
      }
    }
    if (FigCFDictionaryGetInt64IfPresent())
    {
      uint64_t v47 = *(void *)(DerivedStorage + 920);
      if (v47)
      {
        uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v49 = v48 ? v48 : 0;
        uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v49 + 56);
        if (v50) {
          v50(v47, 0x1EE582BF8, 0x1EE55E4B8, 0, 0);
        }
      }
    }
    if (FigCFDictionaryGetInt32IfPresent())
    {
      uint64_t v51 = *(void *)(DerivedStorage + 920);
      if (v51)
      {
        uint64_t v52 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v53 = v52 ? v52 : 0;
        unsigned int v54 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v53 + 56);
        if (v54) {
          v54(v51, 0x1EE582BF8, 0x1EE542C78, 0, 0);
        }
      }
    }
    if (FigCFDictionaryGetInt32IfPresent())
    {
      uint64_t v55 = *(void *)(DerivedStorage + 920);
      if (v55)
      {
        uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v57 = v56 ? v56 : 0;
        CMTime v58 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v57 + 56);
        if (v58) {
          v58(v55, 0x1EE582BF8, 0x1EE55E4D8, 0, 0);
        }
      }
    }
    if (FigCFDictionaryGetDoubleIfPresent())
    {
      uint64_t v59 = *(void *)(DerivedStorage + 920);
      if (v59)
      {
        uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v61 = v60 ? v60 : 0;
        uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v61 + 56);
        if (v62) {
          v62(v59, 0x1EE582BF8, 0x1EE55E4F8, (uint64_t)(0.0 * 1000.0), 0);
        }
      }
    }
    if (FigCFDictionaryGetDoubleIfPresent())
    {
      uint64_t v63 = *(void *)(DerivedStorage + 920);
      if (v63)
      {
        uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v65 = v64 ? v64 : 0;
        CMTimeRange v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v65 + 56);
        if (v66) {
          v66(v63, 0x1EE582BF8, 0x1EE55E518, (uint64_t)(0.0 * 1000.0), 0);
        }
      }
    }
    if (FigCFDictionaryGetDoubleIfPresent())
    {
      uint64_t v67 = *(void *)(DerivedStorage + 920);
      if (v67)
      {
        uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v69 = v68 ? v68 : 0;
        CMBlockBufferRef v70 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v69 + 56);
        if (v70) {
          v70(v67, 0x1EE582BF8, 0x1EE55E538, (uint64_t)(0.0 * 1000.0), 0);
        }
      }
    }
    if (FigCFDictionaryGetInt32IfPresent())
    {
      uint64_t v71 = *(void *)(DerivedStorage + 920);
      if (v71)
      {
        uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v73 = v72 ? v72 : 0;
        uint64_t v74 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v73 + 56);
        if (v74) {
          v74(v71, 0x1EE582BF8, 0x1EE55E558, 0, 0);
        }
      }
    }
    if (FigCFDictionaryGetInt32IfPresent())
    {
      uint64_t v75 = *(void *)(DerivedStorage + 920);
      if (v75)
      {
        uint64_t v76 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v77 = v76 ? v76 : 0;
        uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t, void, void))(v77 + 56);
        if (v78) {
          v78(v75, 0x1EE582BF8, 0x1EE55E578, 0, 0);
        }
      }
    }
    if (StatsDictionary) {
      CFRelease(StatsDictionary);
    }
    int v79 = *(const void **)(DerivedStorage + 920);
    if (v79)
    {
      CFRelease(v79);
      *(void *)(DerivedStorage + 920) = 0;
    }
    int v80 = *(void **)(DerivedStorage + 936);
    if (v80)
    {
      os_release(v80);
      *(void *)(DerivedStorage + 936) = 0;
    }
    uint64_t FigBaseObject = FigByteFlumeGetFigBaseObject(*(void *)(DerivedStorage + 32));
    if (FigBaseObject)
    {
      uint64_t v82 = FigBaseObject;
      uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v84 = v83 ? v83 : 0;
      CVPixelBufferRef v85 = *(void (**)(uint64_t))(v84 + 24);
      if (v85) {
        v85(v82);
      }
    }
    FigRetainProxyLockMutex();
    uint64_t v86 = *(void *)(DerivedStorage + 88);
    if (v86 >= 1)
    {
      for (uint64_t i = 0; i < v86; ++i)
      {
        uint64_t v88 = *(void *)(DerivedStorage + 80);
        size_t v89 = *(void **)(v88 + 8 * i);
        if (v89)
        {
          crabsReleaseWorkingBlock((CFAllocatorRef *)DerivedStorage, *(void *)(v88 + 8 * i));
          unint64_t v90 = (void *)v89[11];
          if (v90) {
            CFAllocatorDeallocate(*(CFAllocatorRef *)DerivedStorage, v90);
          }
          free(v89);
          uint64_t v86 = *(void *)(DerivedStorage + 88);
        }
      }
    }
    unint64_t v91 = *(void **)(DerivedStorage + 456);
    if (v91) {
      CFAllocatorDeallocate(*(CFAllocatorRef *)DerivedStorage, v91);
    }
    free(*(void **)(DerivedStorage + 80));
    free(*(void **)(DerivedStorage + 192));
    free(*(void **)(DerivedStorage + 152));
    FigReadWriteLockDestroy();
    CFIndex v92 = *(const void **)(DerivedStorage + 960);
    if (v92) {
      CFRelease(v92);
    }
    if (*(void *)DerivedStorage) {
      CFRelease(*(CFTypeRef *)DerivedStorage);
    }
    uint64_t v93 = *(const void **)(DerivedStorage + 952);
    if (v93) {
      CFRelease(v93);
    }
    uint64_t v94 = *(const void **)(DerivedStorage + 968);
    if (v94) {
      CFRelease(v94);
    }
    FigRetainProxyUnlockMutex();
    size_t v95 = *(const void **)(DerivedStorage + 144);
    if (v95) {
      CFRelease(v95);
    }
    CVPixelBufferRef v96 = *(const void **)(DerivedStorage + 32);
    if (v96) {
      CFRelease(v96);
    }
    uint64_t v97 = *(void *)(DerivedStorage + 720);
    if (v97) {
      FigAIOClientRelease(v97);
    }
    if (*(void *)(DerivedStorage + 656)) {
      FigConditionVariableDestroy();
    }
    if (*(void *)(DerivedStorage + 552)) {
      FigConditionVariableDestroy();
    }
    if (*(void *)(DerivedStorage + 72)) {
      FigSimpleMutexDestroy();
    }
    if (*(void *)(DerivedStorage + 384)) {
      FigSimpleMutexDestroy();
    }
    FigByteStreamStatsTeardownWorker();
    FigRetainProxyRelease();
  }
  return memset((void *)DerivedStorage, 70, 0x3D0uLL);
}

uint64_t FigCFHTTPInvalidate()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    uint64_t v1 = (uint64_t)DerivedStorage;
    FigRetainProxyLockMutex();
    if (*(unsigned char *)(v1 + 376))
    {
      FigRetainProxyUnlockMutex();
    }
    else
    {
      FigRetainProxyInvalidate();
      *(_WORD *)(v1 + 376) = 257;
      FigCFHTTPStopAllReads(v1, -12932);
      uint64_t v2 = *(const void **)(v1 + 88);
      *(void *)(v1 + 88) = 0;
      uint64_t v3 = *(void (**)(uint64_t, void, uint64_t))(v1 + 104);
      uint64_t v4 = *(void *)(v1 + 120);
      *(void *)(v1 + 104) = 0;
      uint64_t v5 = *(OpaqueCMMemoryPool **)(v1 + 368);
      if (v5) {
        CMMemoryPoolInvalidate(v5);
      }
      fbf_CancelReconnect(v1);
      if (*(void *)(v1 + 456))
      {
        FigHTTPStopAndReleaseTimer((dispatch_object_t *)(v1 + 456));
        *(void *)(v1 + 456) = 0;
      }
      FigByteFlumeBaseInvalidate(v1);
      int v6 = *(_DWORD *)(v1 + 44);
      if (*(unsigned char *)(v1 + 40)) {
        BOOL v7 = v6 == 1;
      }
      else {
        BOOL v7 = 0;
      }
      int v9 = v7 || v6 == 2;
      FigNetworkInterfaceReporterSamplePhysicalStatistics(*(void *)(v1 + 592), (uint64_t)v2, *(void *)(v1 + 32), 0x1EE582C18, v9);
      if (*(void *)(v1 + 600))
      {
        nw_activity_complete_with_reason();
        uint64_t v10 = *(const void **)(v1 + 600);
        if (v10)
        {
          CFRelease(v10);
          *(void *)(v1 + 600) = 0;
        }
      }
      unsigned int v11 = *(const void **)(v1 + 624);
      if (v11)
      {
        CFRelease(v11);
        *(void *)(v1 + 624) = 0;
      }
      uint64_t v12 = *(const void **)(v1 + 640);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(v1 + 640) = 0;
      }
      *(unsigned char *)(v1 + 377) = 0;
      FigRetainProxyUnlockMutex();
      if (v2)
      {
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(void (**)(const void *))(v14 + 24);
        if (v15) {
          v15(v2);
        }
        CFRelease(v2);
      }
      if (v3) {
        v3(v4, 0, 4294954364);
      }
    }
  }
  return 0;
}

void QTMovieCacheMemReleaseCallBack(void *a1)
{
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    CFRelease(v2);
  }

  free(a1);
}

uint64_t FigCFHTTPStopAllReads(uint64_t result, int a2)
{
  uint64_t v3 = result;
  if (dword_1E9350E58)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v5 = *(void *)(v3 + 56);
  if (v5)
  {
    while (1)
    {
      if (!*(_DWORD *)(v5 + 120)) {
        *(_DWORD *)(v5 + 120) = a2;
      }
      if (!*(unsigned char *)(v5 + 125))
      {
        uint64_t result = FigCFHTTPFinishReadRequest(v3, v5, 1);
        uint64_t v5 = *(void *)(v3 + 56);
        if (!v5) {
          break;
        }
      }
    }
  }
  return result;
}

void FigCFHTTPFinalize()
{
  FigCFHTTPInvalidate();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 408);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 408) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 400);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 400) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 168);
  if (v3)
  {
    *(void *)(DerivedStorage + 168) = 0;
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 176);
  if (v4)
  {
    *(void *)(DerivedStorage + 176) = 0;
    CFRelease(v4);
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 192);
  if (v5)
  {
    *(void *)(DerivedStorage + 192) = 0;
    CFRelease(v5);
  }
  int v6 = *(const void **)(DerivedStorage + 224);
  if (v6)
  {
    *(void *)(DerivedStorage + 224) = 0;
    CFRelease(v6);
  }
  BOOL v7 = *(const void **)(DerivedStorage + 232);
  if (v7)
  {
    *(void *)(DerivedStorage + 232) = 0;
    CFRelease(v7);
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 240);
  if (v8)
  {
    *(void *)(DerivedStorage + 240) = 0;
    CFRelease(v8);
  }
  int v9 = *(const void **)(DerivedStorage + 200);
  if (v9)
  {
    *(void *)(DerivedStorage + 200) = 0;
    CFRelease(v9);
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 112);
  if (v10)
  {
    *(void *)(DerivedStorage + 112) = 0;
    CFRelease(v10);
  }
  unsigned int v11 = *(const void **)(DerivedStorage + 272);
  if (v11)
  {
    *(void *)(DerivedStorage + 272) = 0;
    CFRelease(v11);
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 264);
  if (v12)
  {
    *(void *)(DerivedStorage + 264) = 0;
    CFRelease(v12);
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 256);
  if (v13)
  {
    *(void *)(DerivedStorage + 256) = 0;
    CFRelease(v13);
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 128);
  if (v14)
  {
    *(void *)(DerivedStorage + 128) = 0;
    CFRelease(v14);
  }
  uint64_t v15 = *(const void **)(DerivedStorage + 136);
  if (v15)
  {
    *(void *)(DerivedStorage + 136) = 0;
    CFRelease(v15);
  }
  FigHTTPSchedulerRelease(*(dispatch_object_t *)(DerivedStorage + 48));
  uint64_t v16 = *(const void **)(DerivedStorage + 368);
  if (v16)
  {
    *(void *)(DerivedStorage + 368) = 0;
    CFRelease(v16);
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 208);
  if (v17)
  {
    *(void *)(DerivedStorage + 208) = 0;
    CFRelease(v17);
  }
  uint64_t v18 = *(const void **)(DerivedStorage + 536);
  if (v18)
  {
    *(void *)(DerivedStorage + 536) = 0;
    CFRelease(v18);
  }
  uint64_t v19 = *(const void **)(DerivedStorage + 560);
  if (v19)
  {
    *(void *)(DerivedStorage + 560) = 0;
    CFRelease(v19);
  }
  uint64_t v20 = *(const void **)(DerivedStorage + 544);
  if (v20)
  {
    *(void *)(DerivedStorage + 544) = 0;
    CFRelease(v20);
  }
  CMTimeEpoch v21 = *(const void **)(DerivedStorage + 552);
  if (v21)
  {
    *(void *)(DerivedStorage + 552) = 0;
    CFRelease(v21);
  }
  uint64_t v22 = *(const void **)(DerivedStorage + 568);
  if (v22)
  {
    *(void *)(DerivedStorage + 568) = 0;
    CFRelease(v22);
  }
  uint64_t v23 = *(void ***)(DerivedStorage + 344);
  if (v23)
  {
    FigByteRateHistoryDispose(v23);
    *(void *)(DerivedStorage + 344) = 0;
  }
  FigNetworkInterfaceReporterDestroy(*(void **)(DerivedStorage + 592));

  FigByteFlumeBaseDispose(DerivedStorage);
}

uint64_t FigByteRateHistoryDispose(void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    free(v2);
  }
  free(a1);
  return 0;
}

uint64_t playerfig_Invalidate(uint64_t a1)
{
  cf[22] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t v2 = (void *)MEMORY[0x199711A30]();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (dword_1E9350BF0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_4;
  }
  FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)cf);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(void (**)(uint64_t, void))(v7 + 24);
  if (v8) {
    v8(a1, 0);
  }
  *(unsigned char *)uint64_t DerivedStorage = 1;
  playerfig_cleanupOverlappedOutroComponents(a1, 0);
  if (*(unsigned char *)(DerivedStorage + 761))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigGetNotifyingObjectForSelectionCriteriaChanged();
    FigNotificationCenterRemoveWeakListener();
    *(unsigned char *)(DerivedStorage + 761) = 0;
  }
  if (*(unsigned char *)(DerivedStorage + 859))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    JNvfYIDgz();
    FigNotificationCenterRemoveWeakListener();
    *(unsigned char *)(DerivedStorage + 859) = 0;
  }
  if (FPSupport_GetAudioSpatializationPreferencesMonitor())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FPSupport_GetAudioSpatializationPreferencesMonitor();
    FigNotificationCenterRemoveWeakListener();
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 40));
  int v9 = *(const void **)(DerivedStorage + 32);
  if (v9)
  {
    CFAllocatorRef v10 = CFGetAllocator(v9);
    CopCGFloat y = CFSetCreateCopy(v10, *(CFSetRef *)(DerivedStorage + 32));
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 40));
    if (Copy)
    {
      CFSetApplyFunction(Copy, (CFSetApplierFunction)playerfig_InvalidateItem, 0);
      CFRelease(Copy);
    }
  }
  else
  {
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 40));
  }
  uint64_t v12 = *(void *)(DerivedStorage + 560);
  if (v12)
  {
    playerfig_removeAudioRenderPipelineListeners(a1, v12);
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(DerivedStorage + 560));
    if (FigBaseObject)
    {
      uint64_t v14 = FigBaseObject;
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v16 = v15 ? v15 : 0;
      uint64_t v17 = *(void (**)(uint64_t))(v16 + 24);
      if (v17) {
        v17(v14);
      }
    }
  }
  FPSupport_ReleasePassthroughHelper();
  *(void *)(DerivedStorage + 912) = 0;
  CFArrayRef v18 = *(const __CFArray **)(DerivedStorage + 632);
  if (v18 && CFArrayGetCount(v18) >= 1)
  {
    do
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 632), 0);
      playerfig_removeAudioRenderPipelineListeners(a1, (uint64_t)ValueAtIndex);
      uint64_t v20 = FigRenderPipelineGetFigBaseObject(ValueAtIndex);
      if (v20)
      {
        uint64_t v21 = v20;
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v23 = v22 ? v22 : 0;
        uint64_t v24 = *(void (**)(uint64_t))(v23 + 24);
        if (v24) {
          v24(v21);
        }
      }
    }
    while (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 632)) > 0);
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 176));
  uint64_t v25 = *(const void **)(DerivedStorage + 168);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(DerivedStorage + 168) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 176));
  uint64_t v26 = *(void *)(DerivedStorage + 568);
  if (v26)
  {
    uint64_t v27 = FigRenderPipelineGetFigBaseObject(v26);
    if (v27)
    {
      uint64_t v28 = v27;
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v30 = v29 ? v29 : 0;
      uint64_t v31 = *(void (**)(uint64_t))(v30 + 24);
      if (v31) {
        v31(v28);
      }
    }
  }
  CFArrayRef v32 = *(const __CFArray **)(DerivedStorage + 640);
  if (v32)
  {
    if (CFArrayGetCount(v32) >= 1)
    {
      do
      {
        uint64_t v33 = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 640), 0);
        uint64_t v34 = FigRenderPipelineGetFigBaseObject(v33);
        if (v34)
        {
          uint64_t v35 = v34;
          uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v37 = v36 ? v36 : 0;
          uint64_t v38 = *(void (**)(uint64_t))(v37 + 24);
          if (v38) {
            v38(v35);
          }
        }
        CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 640), 0);
      }
      while (CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 640)) > 0);
    }
    uint64_t v39 = *(const void **)(DerivedStorage + 640);
    if (v39)
    {
      CFRelease(v39);
      *(void *)(DerivedStorage + 640) = 0;
    }
  }
  uint64_t v40 = *(void *)(DerivedStorage + 576);
  if (v40)
  {
    uint64_t v41 = FigRenderPipelineGetFigBaseObject(v40);
    if (v41)
    {
      uint64_t v42 = v41;
      uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v44 = v43 ? v43 : 0;
      uint64_t v45 = *(void (**)(uint64_t))(v44 + 24);
      if (v45) {
        v45(v42);
      }
    }
    CFRelease(*(CFTypeRef *)(DerivedStorage + 576));
    *(void *)(DerivedStorage + 576) = 0;
  }
  uint64_t v46 = *(void *)(DerivedStorage + 584);
  if (v46)
  {
    uint64_t v47 = FigRenderPipelineGetFigBaseObject(v46);
    if (v47)
    {
      uint64_t v48 = v47;
      uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v50 = v49 ? v49 : 0;
      uint64_t v51 = *(void (**)(uint64_t))(v50 + 24);
      if (v51) {
        v51(v48);
      }
    }
    CFRelease(*(CFTypeRef *)(DerivedStorage + 584));
    *(void *)(DerivedStorage + 584) = 0;
  }
  uint64_t v52 = *(const void **)(DerivedStorage + 648);
  if (v52)
  {
    CFRelease(v52);
    *(void *)(DerivedStorage + 648) = 0;
  }
  uint64_t v53 = *(const void **)(DerivedStorage + 656);
  if (v53)
  {
    CFRelease(v53);
    *(void *)(DerivedStorage + 656) = 0;
  }
  unsigned int v54 = *(const void **)(DerivedStorage + 664);
  if (v54)
  {
    CFRelease(v54);
    *(void *)(DerivedStorage + 664) = 0;
  }
  uint64_t v55 = *(const void **)(DerivedStorage + 672);
  if (v55)
  {
    CFRelease(v55);
    *(void *)(DerivedStorage + 672) = 0;
  }
  uint64_t v56 = *(const void **)(DerivedStorage + 192);
  if (v56)
  {
    CFRelease(v56);
    *(void *)(DerivedStorage + 192) = 0;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 752));
  uint64_t v57 = *(const void **)(DerivedStorage + 728);
  if (v57)
  {
    CFTypeRef v58 = CFRetain(v57);
    uint64_t v59 = *(const void **)(DerivedStorage + 728);
    if (v59)
    {
      CFRelease(v59);
      *(void *)(DerivedStorage + 728) = 0;
    }
    if (v58) {
      CFRelease(v58);
    }
  }
  uint64_t v60 = *(const void **)(DerivedStorage + 736);
  if (v60)
  {
    CFTypeRef v61 = CFRetain(v60);
    uint64_t v62 = *(const void **)(DerivedStorage + 736);
    if (v62)
    {
      CFRelease(v62);
      *(void *)(DerivedStorage + 736) = 0;
    }
    if (v61) {
      CFRelease(v61);
    }
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 752));
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 712));
  uint64_t v63 = *(const void **)(DerivedStorage + 720);
  if (v63)
  {
    CFRelease(v63);
    *(void *)(DerivedStorage + 720) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 712));
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 488));
  uint64_t v64 = *(const void **)(DerivedStorage + 480);
  if (v64)
  {
    CFRelease(v64);
    *(void *)(DerivedStorage + 480) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 488));
  uint64_t v65 = *(const void **)(DerivedStorage + 864);
  if (v65)
  {
    CFRelease(v65);
    *(void *)(DerivedStorage + 864) = 0;
  }
  playerfig_freeTransitionImageQueueAndSlot();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 224));
  CFArrayRef v66 = *(const __CFArray **)(DerivedStorage + 208);
  if (v66)
  {
    if (CFArrayGetCount(v66) < 1)
    {
      uint64_t v67 = *(const void **)(DerivedStorage + 208);
      if (!v67) {
        goto LABEL_104;
      }
      CFRelease(v67);
    }
    else
    {
      FPSupport_AppendDeferredTransactionChangeForClearingFigVideoLayers(cf[0], *(CFArrayRef *)(DerivedStorage + 208), 1, (uint64_t)"playerfig_Invalidate");
      FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], *(void *)(DerivedStorage + 208), (uint64_t)"playerfig_Invalidate");
    }
    *(void *)(DerivedStorage + 208) = 0;
  }
LABEL_104:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 224));
  uint64_t v68 = *(void *)(DerivedStorage + 200);
  if (v68)
  {
    FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], v68, (uint64_t)"playerfig_Invalidate");
    *(void *)(DerivedStorage + 200) = 0;
  }
  uint64_t v69 = *(void *)(DerivedStorage + 288);
  if (v69)
  {
    FPSupport_AppendDeferredTransactionChangeToRelease(cf[0], v69, (uint64_t)"playerfig_Invalidate");
    *(void *)(DerivedStorage + 288) = 0;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 240));
  CFArrayRef v70 = *(const __CFArray **)(DerivedStorage + 248);
  if (v70)
  {
    CFIndex Count = CFArrayGetCount(v70);
    if (Count >= 1)
    {
      CFIndex v72 = Count;
      for (CFIndex i = 0; i != v72; ++i)
      {
        CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 248), i);
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
    }
  }
  uint64_t v74 = *(const void **)(DerivedStorage + 256);
  if (v74)
  {
    CFRelease(v74);
    *(void *)(DerivedStorage + 256) = 0;
  }
  uint64_t v75 = *(const void **)(DerivedStorage + 264);
  if (v75)
  {
    CFRelease(v75);
    *(void *)(DerivedStorage + 264) = 0;
  }
  playerfig_sendEmptyConfigurationToEachVideoTarget(a1, *(CFArrayRef *)(DerivedStorage + 248));
  uint64_t v76 = *(const void **)(DerivedStorage + 248);
  if (v76)
  {
    CFRelease(v76);
    *(void *)(DerivedStorage + 248) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 240));
  uint64_t v77 = *(const void **)(DerivedStorage + 816);
  if (v77)
  {
    CFRelease(v77);
    *(void *)(DerivedStorage + 816) = 0;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 456));
  uint64_t v78 = *(const void **)(DerivedStorage + 464);
  if (v78)
  {
    CFRelease(v78);
    *(void *)(DerivedStorage + 464) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 456));
  int v79 = *(const void **)(DerivedStorage + 848);
  if (v79)
  {
    CFRelease(v79);
    *(void *)(DerivedStorage + 848) = 0;
  }
  int v80 = *(const void **)(DerivedStorage + 144);
  if (v80)
  {
    CFRelease(v80);
    *(void *)(DerivedStorage + 144) = 0;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 152));
  unsigned int v81 = *(const void **)(DerivedStorage + 160);
  if (v81)
  {
    CFRelease(v81);
    *(void *)(DerivedStorage + 160) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 152));
  uint64_t v83 = *(const void **)(DerivedStorage + 936);
  if (v83)
  {
    CFRelease(v83);
    *(void *)(DerivedStorage + 936) = 0;
  }
  uint64_t v84 = *(void *)(DerivedStorage + 872);
  if (v84)
  {
    MEMORY[0x19970E910](v84, v82);
    CVPixelBufferRef v85 = *(const void **)(DerivedStorage + 880);
    if (v85)
    {
      CFRelease(v85);
      *(void *)(DerivedStorage + 880) = 0;
    }
    uint64_t v86 = *(const void **)(DerivedStorage + 888);
    if (v86)
    {
      CFRelease(v86);
      *(void *)(DerivedStorage + 888) = 0;
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 872));
  }
  FigDeferredTransactionCommit((uint64_t)cf[0]);
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  unint64_t v87 = *(const void **)(DerivedStorage + 792);
  if (v87)
  {
    CFRelease(v87);
    *(void *)(DerivedStorage + 792) = 0;
  }
  CFArrayRef v88 = *(const __CFArray **)(DerivedStorage + 1112);
  if (v88)
  {
    while (1)
    {
      CFIndex v89 = CFArrayGetCount(v88);
      CFArrayRef v90 = *(const __CFArray **)(DerivedStorage + 1112);
      if (v89 < 1) {
        break;
      }
      CFArrayGetValueAtIndex(v90, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 1112), 0);
      CFArrayRef v88 = *(const __CFArray **)(DerivedStorage + 1112);
      if (!v88) {
        goto LABEL_4;
      }
    }
    if (v90)
    {
      CFRelease(v90);
      *(void *)(DerivedStorage + 1112) = 0;
    }
  }
LABEL_4:
  return 0;
}

uint64_t playerfig_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  playerfig_Invalidate(a1);
  uint64_t v3 = (const void *)DerivedStorage[105];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[105] = 0;
  }
  uint64_t v4 = (const void *)DerivedStorage[70];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[70] = 0;
  }
  uint64_t v5 = (const void *)DerivedStorage[79];
  if (v5)
  {
    CFRelease(v5);
    DerivedStorage[79] = 0;
  }
  uint64_t v6 = (const void *)DerivedStorage[71];
  if (v6)
  {
    CFRelease(v6);
    DerivedStorage[71] = 0;
  }
  uint64_t v7 = (const void *)DerivedStorage[75];
  if (v7)
  {
    CFRelease(v7);
    DerivedStorage[75] = 0;
  }
  uint64_t v8 = (const void *)DerivedStorage[76];
  if (v8)
  {
    CFRelease(v8);
    DerivedStorage[76] = 0;
  }
  int v9 = (const void *)DerivedStorage[77];
  if (v9)
  {
    CFRelease(v9);
    DerivedStorage[77] = 0;
  }
  CFAllocatorRef v10 = (const void *)DerivedStorage[11];
  if (v10)
  {
    CFRelease(v10);
    DerivedStorage[11] = 0;
  }
  unsigned int v11 = (const void *)DerivedStorage[67];
  if (v11)
  {
    CFRelease(v11);
    DerivedStorage[67] = 0;
  }
  uint64_t v12 = (const void *)DerivedStorage[85];
  if (v12)
  {
    CFRelease(v12);
    DerivedStorage[85] = 0;
  }
  MEMORY[0x19970E910](DerivedStorage[5]);
  uint64_t v13 = (const void *)DerivedStorage[4];
  if (v13)
  {
    CFRelease(v13);
    DerivedStorage[4] = 0;
  }
  MEMORY[0x19970E930](DerivedStorage[5]);
  FigSimpleMutexDestroy();
  if (DerivedStorage[22]) {
    FigSimpleMutexDestroy();
  }
  if (DerivedStorage[89]) {
    FigSimpleMutexDestroy();
  }
  if (DerivedStorage[94]) {
    FigSimpleMutexDestroy();
  }
  if (DerivedStorage[28]) {
    FigSimpleMutexDestroy();
  }
  if (DerivedStorage[30]) {
    FigSimpleMutexDestroy();
  }
  if (DerivedStorage[61]) {
    FigSimpleMutexDestroy();
  }
  if (DerivedStorage[109])
  {
    MEMORY[0x19970E910]();
    uint64_t v14 = (const void *)DerivedStorage[110];
    if (v14)
    {
      CFRelease(v14);
      DerivedStorage[110] = 0;
    }
    uint64_t v15 = (const void *)DerivedStorage[111];
    if (v15)
    {
      CFRelease(v15);
      DerivedStorage[111] = 0;
    }
    MEMORY[0x19970E930](DerivedStorage[109]);
    FigSimpleMutexDestroy();
  }
  FigSimpleMutexDestroy();
  uint64_t v16 = DerivedStorage[12];
  if (v16)
  {
    dispatch_release(v16);
    DerivedStorage[12] = 0;
  }
  uint64_t v17 = DerivedStorage[13];
  if (v17)
  {
    dispatch_release(v17);
    DerivedStorage[13] = 0;
  }
  CFArrayRef v18 = (const void *)DerivedStorage[2];
  if (v18) {
    CFRelease(v18);
  }
  FigSimpleMutexDestroy();
  uint64_t v19 = (const void *)DerivedStorage[87];
  if (v19) {
    CFRelease(v19);
  }
  uint64_t v20 = (const void *)DerivedStorage[74];
  if (v20) {
    CFRelease(v20);
  }
  uint64_t v21 = (const void *)DerivedStorage[113];
  if (v21)
  {
    CFRelease(v21);
    DerivedStorage[113] = 0;
  }
  FPSupport_releaseClosedCaptions(DerivedStorage + 37);
  uint64_t v22 = (const void *)DerivedStorage[63];
  if (v22)
  {
    CFRelease(v22);
    DerivedStorage[63] = 0;
  }
  if (DerivedStorage[62])
  {
    FigSimpleMutexDestroy();
    DerivedStorage[62] = 0;
  }
  uint64_t v23 = (const void *)DerivedStorage[1];
  if (v23)
  {
    CFRelease(v23);
    DerivedStorage[1] = 0;
  }
  if (DerivedStorage[19]) {
    FigSimpleMutexDestroy();
  }
  uint64_t result = DerivedStorage[34];
  if (result)
  {
    return FigSimpleMutexDestroy();
  }
  return result;
}

uint64_t FigMediaValidatorCreate(unint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, void *a5)
{
  uint64_t v13 = 0;
  uint64_t v10 = FigMediaValidatorCreateInternal(&v13);
  if (!v10)
  {
    unsigned int v11 = v13;
    if (v13)
    {
      uint64_t v10 = FigMediaValidatorValidateAsyncInternal((uint64_t)v13, a1, a2, a3, a4, 0);
      if (v10) {
        free(v11);
      }
      else {
        *a5 = v11;
      }
    }
  }
  return v10;
}

uint64_t mv_thread(uint64_t a1)
{
  CFStringRef URLString = 0;
  *(void *)(a1 + 200) = MEMORY[0x19970ED80]();
  FigSemaphoreSignal();
  if (*(void *)(a1 + 48))
  {
    uint64_t v2 = *MEMORY[0x1E4F1CF80];
  }
  else
  {
    FigDiskCacheRepositoryCopyDefaultParentURLForCurrentTask((CFTypeRef *)&URLString, 1);
    uint64_t v2 = *MEMORY[0x1E4F1CF80];
    if (URLString)
    {
      *(void *)(a1 + 48) = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], URLString, 0);
      CFRelease(URLString);
    }
  }
  int StreamFromURL = 0;
  unsigned int v4 = 0;
  uint64_t v5 = (CFTypeRef *)(a1 + 80);
  uint64_t v6 = (CFTypeRef *)(a1 + 8);
  uint64_t v7 = (CFTypeRef *)(a1 + 16);
  uint64_t v8 = *MEMORY[0x1E4F1EC78];
  while (1)
  {
    if (*v5)
    {
      CFRelease(*v5);
      CFTypeRef *v5 = 0;
    }
    if (*v6)
    {
      CFRelease(*v6);
      *uint64_t v6 = 0;
    }
    if (*v7)
    {
      CFRelease(*v7);
      *uint64_t v7 = 0;
    }
    uint64_t v9 = *(void *)(a1 + 56);
    if (!v9) {
      break;
    }
    *(void *)(a1 + 80) = v9;
    *(void *)(a1 + 56) = 0;
    if (StreamFromURL) {
      goto LABEL_43;
    }
LABEL_16:
    if (*(unsigned char *)(a1 + 44)) {
      goto LABEL_48;
    }
    CFTypeRef v10 = *v5;
    if (*v5)
    {
      BOOL v25 = 0;
      int StreamFromURL = IsReferenceMovie((uint64_t)v10, &v25);
      if (!StreamFromURL && v25)
      {
        CFURLRef v23 = 0;
        CFTypeRef cf = 0;
        uint64_t v11 = *(void *)(a1 + 192);
        *(void *)(a1 + 192) = v11 + 1;
        if (v11 < 5)
        {
          uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v15) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v16 + 48);
          if (v17) {
            v17(CMBaseObject, v8, v2, &cf);
          }
          int StreamFromURL = ResolveReferenceMovieWithOptions(*(void *)(a1 + 80), (const __CFURL *)cf, *(_DWORD *)(a1 + 184), &v23);
          if (cf) {
            CFRelease(cf);
          }
          if (StreamFromURL)
          {
            int v13 = 1;
            *(unsigned char *)(a1 + 44) = 1;
            *(_DWORD *)(a1 + 40) = StreamFromURL;
          }
          else
          {
            if (*v6)
            {
              CFRelease(*v6);
              *uint64_t v6 = 0;
            }
            if (*(void *)a1) {
              CFRelease(*(CFTypeRef *)a1);
            }
            int StreamFromURL = 0;
            *(void *)a1 = v23;
            int v13 = *(unsigned __int8 *)(a1 + 44);
          }
          goto LABEL_41;
        }
        int v12 = FigSignalErrorAt();
        int StreamFromURL = 0;
        goto LABEL_28;
      }
      if (!mv_IsStreaming(*(const __CFURL **)a1, *(const __CFURL **)(a1 + 8), *(__CFHTTPMessage **)(a1 + 16)))
      {
        int v12 = mv_ValidateFileFromByteStream(a1 + 64, 0);
        int StreamFromURL = v12;
LABEL_28:
        int v13 = 1;
        *(unsigned char *)(a1 + 44) = 1;
        *(_DWORD *)(a1 + 40) = v12;
        goto LABEL_41;
      }
      int v13 = 1;
      *(unsigned char *)(a1 + 107) = 1;
      *(_WORD *)(a1 + 105) = 257;
      *(unsigned char *)(a1 + 44) = 1;
      *(_DWORD *)(a1 + 40) = 0;
    }
    else
    {
      int v13 = 0;
      int StreamFromURL = 0;
    }
LABEL_41:
    if (v13) {
      goto LABEL_48;
    }
  }
  v4 |= FigByteStreamFactoryTranslateReferenceSecurityOptions(*(_DWORD *)(a1 + 184));
  int StreamFromURL = FigByteStreamFactoryCreateStreamFromURL(*(const __CFURL **)a1, v4, *(const void **)(a1 + 48), 0, 0, 0, (void *)(a1 + 80), (void *)(a1 + 8), (void *)(a1 + 16), 0);
  if (!StreamFromURL) {
    goto LABEL_16;
  }
LABEL_43:
  if (FigMediaValidatorIsNonByteStreamURLStreaming(StreamFromURL, *(const __CFURL **)a1, *(const __CFURL **)(a1 + 8), *(__CFHTTPMessage **)(a1 + 16), 0))
  {
    *(unsigned char *)(a1 + 107) = 1;
    goto LABEL_46;
  }
  if (StreamFromURL == -12662)
  {
LABEL_46:
    int StreamFromURL = 0;
    *(_WORD *)(a1 + 105) = 257;
  }
  *(unsigned char *)(a1 + 44) = 1;
  *(_DWORD *)(a1 + 40) = StreamFromURL;
LABEL_48:
  CFArrayRef v18 = *(void (**)(uint64_t, void, uint64_t, uint64_t, void, void))(a1 + 24);
  if (v18)
  {
    uint64_t v19 = (*(unsigned char *)(a1 + 107) != 0) | (2 * (*(unsigned char *)(a1 + 104) != 0));
    uint64_t v20 = *(unsigned int *)(a1 + 40);
    if (!v20)
    {
      if (*(unsigned char *)(a1 + 105))
      {
        uint64_t v20 = 0;
      }
      else
      {
        uint64_t v20 = 4294954346;
        *(_DWORD *)(a1 + 40) = -12950;
      }
    }
    v18(a1, *(void *)(a1 + 32), v20, v19, *(void *)(a1 + 88), *(void *)(a1 + 96));
  }
  MEMORY[0x19970E290](*(void *)(a1 + 208));
  *(void *)(a1 + 200) = 0;
  int v21 = *(unsigned __int8 *)(a1 + 224);
  MEMORY[0x19970E2B0](*(void *)(a1 + 208));
  if (v21) {
    FigMediaValidatorRelease((CFTypeRef *)a1);
  }
  return 0;
}

uint64_t FigSharedRemote_CopyDiskCacheParams(CFStringRef URLString, int64_t *a2, int64_t *a3, int64_t *a4, BOOL *a5, uint64_t a6)
{
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v12 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    uint64_t v12 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      uint64_t v13 = FigXPCCreateBasicMessage();
      if (v13
        || (xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1), uint64_t v13 = FigXPCMessageSetCFString(), v13)
        || (uint64_t v13 = FigXPCRemoteClientSendSyncMessageCreatingReply(), v13)
        || a6 && (uint64_t v13 = FigXPCMessageCopyCFURL(), v13))
      {
        uint64_t v12 = v13;
      }
      else
      {
        if (a2) {
          *a2 = xpc_dictionary_get_int64(0, "UsedFileSize");
        }
        if (a3) {
          *a3 = xpc_dictionary_get_int64(0, "TargetSize");
        }
        if (a4) {
          *a4 = xpc_dictionary_get_int64(0, "TargetFileSize");
        }
        uint64_t v12 = 0;
        if (a5) {
          *a5 = xpc_dictionary_get_BOOL(0, "AutomaticallyManagesSize");
        }
      }
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v12;
}

uint64_t FigSharedRemote_CheckOutOfDiskCache(CFStringRef URLString, uint64_t a2, void *a3, void *a4)
{
  if (!a2 || !a3 || !a4)
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_17;
  }
  if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
  }
  uint64_t v7 = remoteXPCPlayerClient_EnsureClientEstablished_err;
  if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
  {
    uint64_t v7 = 4294949788;
    if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
    {
      uint64_t v8 = FigXPCCreateBasicMessage();
      if (!v8)
      {
        xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1);
        uint64_t v8 = FigXPCMessageSetCFString();
        if (!v8)
        {
          uint64_t v8 = FigXPCMessageSetCFString();
          if (!v8)
          {
            uint64_t v8 = FigXPCRemoteClientSendSyncMessageCreatingReply();
            if (!v8)
            {
              uint64_t v8 = FigXPCMessageCopyCFURL();
              if (!v8)
              {
                uint64_t v7 = FigXPCMessageCopyCFString();
                if (!v7)
                {
                  *a3 = 0;
                  *a4 = 0;
                }
                goto LABEL_15;
              }
            }
          }
        }
      }
LABEL_17:
      uint64_t v7 = v8;
    }
  }
LABEL_15:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v7;
}

uint64_t ResolveReferenceMovieWithOptions(uint64_t a1, const __CFURL *a2, int a3, CFURLRef *a4)
{
  uint64_t result = ResolveReferenceMovie(a1, a2, a4);
  if (!result && a3 && *a4)
  {
    if (FigIsReferenceAllowedBySecurityPolicy())
    {
      return 0;
    }
    else
    {
      uint64_t v7 = FigSignalErrorAt();
      CFRelease(*a4);
      *a4 = 0;
      return v7;
    }
  }
  return result;
}

uint64_t ResolveReferenceMovie(uint64_t a1, const __CFURL *a2, CFURLRef *a3)
{
  dataPointerOut[2] = *(char **)MEMORY[0x1E4F143B8];
  memset(v77, 0, sizeof(v77));
  dataPointerOut[1] = (char *)0x726D72616D6F6F76;
  v75[1] = 0;
  CFTypeRef cf = 0;
  v75[0] = 0;
  uint64_t BBuf = FigAtomStreamInitWithByteStream();
  uint64_t v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (BBuf
    || (uint64_t BBuf = FigAtomStreamPositionViaAtomPath(), BBuf)
    || (uint64_t BBuf = FigAtomStreamReadCurrentAtomAndCreateBBuf(), BBuf)
    || (uint64_t BBuf = FigAtomStreamInitWithBBuf(), BBuf)
    || (uint64_t BBuf = ParseDescriptorAtoms((uint64_t)v77, (uint64_t)ChooseReferenceMovie_descriptorDispatch, 1, (uint64_t)v75),
        BBuf))
  {
    uint64_t v55 = BBuf;
    goto LABEL_98;
  }
  uint64_t v7 = v75[0];
  if (!v75[0])
  {
    CFStringRef v54 = 0;
    uint64_t v55 = 0;
    uint64_t v52 = 0;
    goto LABEL_83;
  }
  CFURLRef v67 = a2;
  uint64_t v68 = a3;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  CFAllocatorRef v11 = *v6;
  CFStringRef domain = (const __CFString *)*MEMORY[0x1E4F41AC8];
  keCGFloat y = (void *)*MEMORY[0x1E4F41AD0];
  entitCGFloat y = (const __CFString *)*MEMORY[0x1E4F41B10];
  do
  {
    uint64_t v12 = v8;
    CFArrayRef v13 = (const __CFArray *)*((void *)v7 + 2);
    if (v13)
    {
      CFIndex Count = CFArrayGetCount(v13);
      if (Count >= 1)
      {
        CFIndex v15 = Count;
        CFIndex v16 = 0;
        while (1)
        {
          CFDictionaryRef ValueAtIndex = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(*((CFArrayRef *)v7 + 2), v16);
          *(_WORD *)totalLengthOut = 0;
          dataPointerOut[0] = 0;
          uint64_t DataPointer = CMBlockBufferGetDataPointer(ValueAtIndex, 0, 0, 0, dataPointerOut);
          if (DataPointer) {
            goto LABEL_79;
          }
          uint64_t v19 = dataPointerOut[0];
          int v20 = bswap32(*((_DWORD *)dataPointerOut[0] + 1));
          if (v20 <= 1836016232) {
            break;
          }
          switch(v20)
          {
            case 1836016233:
              MEMORY[0x19970EE10](&sMobiGestaltInit, InitMobiGestaltOnce);
              unsigned int v21 = sMobiGestaltValue;
              if (!sMobiGestaltValue) {
                goto LABEL_34;
              }
              goto LABEL_27;
            case 1836281974:
              unsigned int v21 = 3;
              break;
            case 1903454573:
              unsigned int v21 = 118489088;
              break;
            default:
              goto LABEL_69;
          }
LABEL_29:
          if (*((_WORD *)v19 + 8) == 256)
          {
            if ((bswap32(*((_DWORD *)v19 + 3)) & v21) != bswap32(*((_DWORD *)v19 + 2))) {
              goto LABEL_69;
            }
          }
          else if (*((_WORD *)v19 + 8) || bswap32(*((_DWORD *)v19 + 2)) > v21)
          {
            goto LABEL_69;
          }
LABEL_34:
          if (v15 == ++v16) {
            goto LABEL_35;
          }
        }
        switch(v20)
        {
          case 1635148576:
            CelestialGetSupportedAVCProfileAndLevel();
            unsigned int v21 = (totalLengthOut[1] << 24) | (totalLengthOut[0] << 16);
            if (!v21) {
              goto LABEL_34;
            }
            break;
          case 1635148652:
            CelestialGetSupportedAVCProfileAndLevel();
            unsigned int v21 = totalLengthOut[0];
            if (!totalLengthOut[0]) {
              goto LABEL_34;
            }
            break;
          case 1635148656:
            CelestialGetSupportedAVCProfileAndLevel();
            unsigned int v21 = totalLengthOut[1];
            if (!totalLengthOut[1]) {
              goto LABEL_34;
            }
            break;
          default:
            goto LABEL_69;
        }
LABEL_27:
        uint64_t v19 = dataPointerOut[0];
        goto LABEL_29;
      }
    }
LABEL_35:
    uint64_t v22 = (OpaqueCMBlockBuffer *)*((void *)v7 + 1);
    if (v22)
    {
      dataPointerOut[0] = 0;
      uint64_t DataPointer = CMBlockBufferGetDataPointer(v22, 0, 0, 0, dataPointerOut);
      if (DataPointer)
      {
LABEL_79:
        uint64_t v55 = DataPointer;
        CFStringRef v54 = 0;
        uint64_t v52 = 0;
        goto LABEL_80;
      }
      unsigned int v23 = *((_DWORD *)dataPointerOut[0] + 1);
      uint64_t v24 = v10;
      if (!v10)
      {
        SCDynamicStoreRef v25 = SCDynamicStoreCreate(v11, @"com.apple.celestial", 0, 0);
        if (v25)
        {
          uint64_t v26 = v25;
          CFStringRef NetworkInterface = SCDynamicStoreKeyCreateNetworkInterface(v11, domain);
          if (NetworkInterface)
          {
            CFStringRef v28 = NetworkInterface;
            CFDictionaryRef v29 = (const __CFDictionary *)SCDynamicStoreCopyValue(v26, NetworkInterface);
            if (v29)
            {
              CFDictionaryRef v30 = v29;
              CFTypeID v31 = CFGetTypeID(v29);
              CFDictionaryRef v69 = v30;
              store = v26;
              if (v31 == CFDictionaryGetTypeID()
                && (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v30, key)) != 0
                && (CFArrayRef theArray = Value, v33 = CFGetTypeID(Value), v33 == CFArrayGetTypeID())
                && (CFIndex v72 = CFArrayGetCount(theArray), v72 >= 1))
              {
                CFArrayRef v34 = theArray;
                CFIndex v35 = 0;
                unsigned int v74 = 11200;
                CFStringRef v64 = v28;
                CFAllocatorRef v65 = v11;
                do
                {
                  CFArrayRef v36 = v34;
                  CFStringRef v37 = (const __CFString *)CFArrayGetValueAtIndex(v34, v35);
                  if (!CFStringHasPrefix(v37, @"lo"))
                  {
                    NetworkInterfaceEntitCGFloat y = SCDynamicStoreKeyCreateNetworkInterfaceEntity(v11, domain, v37, entity);
                    if (NetworkInterfaceEntity)
                    {
                      CFStringRef v39 = NetworkInterfaceEntity;
                      CFArrayRef v40 = SCDynamicStoreCopyKeyList(store, NetworkInterfaceEntity);
                      CFRelease(v39);
                      if (v40)
                      {
                        CFIndex v41 = CFArrayGetCount(v40);
                        CFRelease(v40);
                        if (v41 >= 1)
                        {
                          HasPrefiCGFloat x = CFStringHasPrefix(v37, @"en");
                          int v43 = v74;
                          if (HasPrefix) {
                            int v43 = 150000;
                          }
                          unsigned int v74 = v43;
                        }
                      }
                      CFStringRef v28 = v64;
                      CFAllocatorRef v11 = v65;
                    }
                    else
                    {
                      CFAllocatorRef v11 = v65;
                    }
                  }
                  ++v35;
                  CFArrayRef v34 = v36;
                }
                while (v72 != v35);
              }
              else
              {
                unsigned int v74 = 11200;
              }
              CFRelease(v28);
              uint64_t v45 = v69;
              uint64_t v26 = store;
            }
            else
            {
              unsigned int v74 = 11200;
              uint64_t v45 = v28;
            }
            CFRelease(v45);
          }
          else
          {
            unsigned int v74 = 11200;
          }
          CFRelease(v26);
          uint64_t v24 = v74;
        }
        else
        {
          uint64_t v24 = 11200;
        }
      }
      uint64_t v44 = bswap32(v23);
      uint64_t v10 = v24;
      BOOL v46 = v44 >= v9 && v24 >= v44;
      uint64_t v8 = (OpaqueCMBlockBuffer **)v7;
      if (!v46)
      {
LABEL_69:
        uint64_t v44 = v9;
        uint64_t v8 = v12;
      }
    }
    else
    {
      uint64_t v44 = v9;
      uint64_t v8 = (OpaqueCMBlockBuffer **)v7;
    }
    uint64_t v7 = *(void **)v7;
    uint64_t v9 = v44;
  }
  while (v7);
  if (!v8)
  {
    CFStringRef v54 = 0;
    uint64_t v52 = 0;
    uint64_t v55 = 0;
LABEL_80:
    a2 = v67;
    a3 = v68;
    uint64_t v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    goto LABEL_81;
  }
  uint64_t v47 = v8[3];
  *(void *)&totalLengthOut[1] = 0;
  dataPointerOut[0] = 0;
  uint64_t v48 = CMBlockBufferGetDataPointer(v47, 0, 0, (size_t *)&totalLengthOut[1], dataPointerOut);
  a2 = v67;
  a3 = v68;
  if (v48)
  {
    uint64_t v55 = v48;
    uint64_t v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    goto LABEL_98;
  }
  CFAllocatorRef v49 = v11;
  signed int v50 = bswap32(*((_DWORD *)dataPointerOut[0] + 2));
  uint64_t v6 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (*(void *)&totalLengthOut[1] - 12 < (unint64_t)v50)
  {
    uint64_t v55 = FigSignalErrorAt();
    uint64_t v52 = 0;
    CFStringRef v54 = 0;
    if (!v55) {
      goto LABEL_75;
    }
  }
  else
  {
    size_t v51 = v50;
    uint64_t v52 = malloc_type_calloc(1uLL, v50 + 1, 0x914D6C55uLL);
    uint64_t v53 = CMBlockBufferCopyDataBytes(v47, 0xCuLL, v51, v52);
    if (!v53)
    {
LABEL_75:
      CFStringRef v54 = CFStringCreateWithCString(v49, (const char *)v52, 0x600u);
      if (v54) {
        uint64_t v55 = 0;
      }
      else {
        uint64_t v55 = FigSignalErrorAt();
      }
      goto LABEL_81;
    }
    uint64_t v55 = v53;
    if (v52) {
      free(v52);
    }
LABEL_98:
    CFStringRef v54 = 0;
    uint64_t v52 = 0;
  }
LABEL_81:
  uint64_t v56 = v75[0];
  if (v75[0])
  {
    do
    {
      uint64_t v57 = (void *)*v56;
      DisposeReferenceMovieAlternate(v56);
      uint64_t v56 = v57;
    }
    while (v57);
  }
LABEL_83:
  if (cf) {
    CFRelease(cf);
  }
  if (v52)
  {
    free(v52);
    if (v55)
    {
LABEL_94:
      if (v54) {
        goto LABEL_95;
      }
      return v55;
    }
  }
  else
  {
    uint64_t v55 = FigSignalErrorAt();
    if (v55) {
      goto LABEL_94;
    }
  }
  if (!a3
    || (CFAllocatorRef v58 = *v6, v59 = CFURLCreateWithString(*v6, v54, a2), (*a3 = v59) != 0)
    || (CFStringRef v60 = CFURLCreateStringByAddingPercentEscapes(v58, v54, 0, 0, 0x8000100u)) == 0
    || (CFStringRef v61 = v60, *a3 = CFURLCreateWithString(v58, v60, a2), CFRelease(v61), *a3))
  {
    uint64_t v55 = 0;
    goto LABEL_94;
  }
  uint64_t v55 = FigSignalErrorAt();
  if (v54) {
LABEL_95:
  }
    CFRelease(v54);
  return v55;
}

uint64_t FigSharedRemote_CheckIntoDiskCache(CFStringRef URLString, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    if (remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce != -1) {
      dispatch_once(&remoteXPCPlayerClient_EnsureClientEstablished_gPlayerRemoteClientSetupOnce, &__block_literal_global_22);
    }
    uint64_t v4 = remoteXPCPlayerClient_EnsureClientEstablished_err;
    if (!remoteXPCPlayerClient_EnsureClientEstablished_err)
    {
      uint64_t v4 = 4294949788;
      if (fsr_SandboxRegisterDirectoryURLStringAndRetainSandboxRegistrationForever(URLString) != -17508)
      {
        uint64_t v5 = FigXPCCreateBasicMessage();
        if (v5
          || (xpc_dictionary_set_BOOL(0, "IsFigSharedMessage", 1), uint64_t v5 = FigXPCMessageSetCFString(), v5)
          || (uint64_t v5 = FigXPCMessageSetCFString(), v5)
          || (uint64_t v5 = FigXPCMessageSetCFURL(), v5))
        {
          uint64_t v4 = v5;
        }
        else
        {
          uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t mv_IsStreaming(const __CFURL *a1, const __CFURL *a2, __CFHTTPMessage *a3)
{
  if (a2) {
    a1 = a2;
  }
  if (!a1) {
    return 0;
  }
  if (mv_IsMimeTypeInList(a3, (CFStringRef **)streamingMimeType, 0)) {
    return 1;
  }

  return mv_IsExtensionInList(a1, a3, (CFStringRef **)streamingExtensions, 0);
}

uint64_t mv_IsMimeTypeInList(__CFHTTPMessage *a1, CFStringRef **a2, unsigned char *a3)
{
  if (!a1) {
    return 0;
  }
  CFStringRef v5 = FigCFHTTPCopyMimeTypeFromHTTPResponse(a1);
  if (!v5)
  {
    if (a3) {
      *a3 = 0;
    }
    return 0;
  }
  CFStringRef v6 = v5;
  if (a3) {
    *a3 = 1;
  }
  uint64_t IsStringInCArrayList = mv_IsStringInCArrayList(v5, a2);
  CFRelease(v6);
  return IsStringInCArrayList;
}

uint64_t mv_IsExtensionInList(CFURLRef url, __CFHTTPMessage *a2, CFStringRef **a3, unsigned char *a4)
{
  if (a4)
  {
    *a4 = 0;
    CFStringRef v8 = CFURLCopyPathExtension(url);
    CFTypeRef cf = v8;
    if (v8)
    {
      CFStringRef v9 = v8;
      *a4 = 1;
      goto LABEL_5;
    }
LABEL_7:
    if (CFURLCanBeDecomposed(url))
    {
      CFStringRef v12 = CFURLCopyHostName(url);
      if (v12)
      {
        CFStringRef v13 = v12;
        CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12, @".");
        CFRelease(v13);
        if (ArrayBySeparatingStrings)
        {
          CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
          if (Count <= 1)
          {
            CFRelease(ArrayBySeparatingStrings);
          }
          else
          {
            CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, Count - 1);
            int IsStringInCArrayList = mv_IsStringInCArrayList(ValueAtIndex, a3);
            int v18 = IsStringInCArrayList;
            if (a4 && IsStringInCArrayList)
            {
              uint64_t v11 = 1;
              *a4 = 1;
              CFTypeRef v19 = ArrayBySeparatingStrings;
              goto LABEL_21;
            }
            CFRelease(ArrayBySeparatingStrings);
            if (v18) {
              return 1;
            }
          }
        }
      }
    }
LABEL_15:
    if (!a2 || FigCFHTTPCopyFilenameFromContentDisposition(a2, 1, (CFStringRef *)&cf)) {
      return 0;
    }
    if (a4) {
      *a4 = 1;
    }
    uint64_t v11 = mv_IsStringInCArrayList((CFStringRef)cf, a3);
    CFTypeRef v19 = cf;
LABEL_21:
    CFRelease(v19);
    return v11;
  }
  CFStringRef v9 = CFURLCopyPathExtension(url);
  CFTypeRef cf = v9;
  if (!v9) {
    goto LABEL_7;
  }
LABEL_5:
  int v10 = mv_IsStringInCArrayList(v9, a3);
  CFRelease(v9);
  if (!v10) {
    goto LABEL_15;
  }
  return 1;
}

CFStringRef mv_CreateCFStringFrom4CC(unsigned int a1)
{
  unsigned int v1 = bswap32(a1);
  *(_DWORD *)bytes = v1;
  if ((v1 & 0x80) != 0) {
    int v2 = __maskrune(v1, 0x40000uLL);
  }
  else {
    int v2 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v1 + 60) & 0x40000;
  }
  if (!v2) {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"0x%02x%02x%02x%02x", v1, BYTE1(v1), BYTE2(v1), HIBYTE(v1));
  }
  if ((v1 & 0x8000) != 0)
  {
    if (!__maskrune(BYTE1(v1), 0x40000uLL)) {
      return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"0x%02x%02x%02x%02x", v1, BYTE1(v1), BYTE2(v1), HIBYTE(v1));
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * BYTE1(v1) + 60) & 0x40000) == 0)
  {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"0x%02x%02x%02x%02x", v1, BYTE1(v1), BYTE2(v1), HIBYTE(v1));
  }
  if ((v1 & 0x800000) != 0)
  {
    if (!__maskrune(BYTE2(v1), 0x40000uLL)) {
      return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"0x%02x%02x%02x%02x", v1, BYTE1(v1), BYTE2(v1), HIBYTE(v1));
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * BYTE2(v1) + 60) & 0x40000) == 0)
  {
    return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"0x%02x%02x%02x%02x", v1, BYTE1(v1), BYTE2(v1), HIBYTE(v1));
  }
  if ((v1 & 0x80000000) != 0)
  {
    if (__maskrune(HIBYTE(v1), 0x40000uLL)) {
      return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 4, 0x600u, 0);
    }
  }
  else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * HIBYTE(v1) + 60) & 0x40000) != 0)
  {
    return CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, 4, 0x600u, 0);
  }
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"0x%02x%02x%02x%02x", v1, BYTE1(v1), BYTE2(v1), HIBYTE(v1));
}

uint64_t mv_GetTrackBoolean(uint64_t a1, uint64_t a2, uint64_t Value)
{
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFStringRef v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFBooleanRef *))(v7 + 48);
  if (v8)
  {
    uint64_t v9 = *MEMORY[0x1E4F1CF80];
    CFBooleanRef BOOLean = 0;
    if (v8(FigBaseObject, a2, v9, &BOOLean)) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = BOOLean == 0;
    }
    if (!v10)
    {
      CFArrayRef Value = CFBooleanGetValue(BOOLean);
      CFRelease(BOOLean);
    }
  }
  return Value;
}

uint64_t mv_IsValueInArrayInDictionary(const __CFDictionary *a1, const void *a2, void *key, Boolean *a4, unsigned char *a5)
{
  if (a4 && a5)
  {
    *a5 = 0;
    *a4 = 0;
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a1, key);
    if (!Value) {
      return 0;
    }
    CFArrayRef v9 = Value;
    CFTypeID v10 = CFGetTypeID(Value);
    if (v10 == CFArrayGetTypeID())
    {
      *a5 = 1;
      uint64_t Count = CFArrayGetCount(v9);
      if (Count >= 1)
      {
        v14.length = Count;
        v14.uint64_t location = 0;
        *a4 = CFArrayContainsValue(v9, v14, a2);
      }
      return 0;
    }
  }

  return FigSignalErrorAt();
}

uint64_t mv_GetCodecProperty(const __CFDictionary *a1, const void *a2, void *key, const void *a4, uint64_t a5, const void **a6)
{
  if (!a6) {
    goto LABEL_13;
  }
  *a6 = 0;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(a1, key);
  if (Value)
  {
    CFDictionaryRef v12 = Value;
    CFTypeID v13 = CFGetTypeID(Value);
    if (v13 != CFDictionaryGetTypeID()) {
      goto LABEL_13;
    }
    CFDictionaryRef v14 = (const __CFDictionary *)CFDictionaryGetValue(v12, a2);
    if (v14)
    {
      CFDictionaryRef v15 = v14;
      CFTypeID v16 = CFGetTypeID(v14);
      if (v16 != CFDictionaryGetTypeID()) {
        goto LABEL_13;
      }
      uint64_t v17 = CFDictionaryGetValue(v15, a4);
      *a6 = v17;
      if (v17) {
        goto LABEL_10;
      }
      goto LABEL_9;
    }
  }
  uint64_t v17 = *a6;
  if (!*a6)
  {
LABEL_9:
    uint64_t v17 = CFDictionaryGetValue(a1, a4);
    *a6 = v17;
    if (!v17) {
      return 0;
    }
  }
LABEL_10:
  if (CFGetTypeID(v17) == a5) {
    return 0;
  }
  *a6 = 0;
LABEL_13:

  return FigSignalErrorAt();
}

uint64_t FigMediaValidatorCopyByteStream(uint64_t a1, void *a2)
{
  if (!a1) {
    return 4294954511;
  }
  if (!*(unsigned char *)(a1 + 44)) {
    return 4294954513;
  }
  int v2 = *(const void **)(a1 + 80);
  if (!v2) {
    return 4294954513;
  }
  CFTypeRef v4 = CFRetain(v2);
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

uint64_t FigMediaValidatorCopyResolvedURL(uint64_t a1, void *a2)
{
  if (!a1) {
    return 4294954511;
  }
  if (!*(unsigned char *)(a1 + 44)) {
    return 4294954513;
  }
  CFTypeRef v3 = *(CFTypeRef *)(a1 + 8);
  if (v3 || (CFTypeRef v3 = *(CFTypeRef *)a1) != 0) {
    CFTypeRef v3 = CFRetain(v3);
  }
  uint64_t result = 0;
  *a2 = v3;
  return result;
}

uint64_t FigRemote_SetSerializedCookies(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (a2)
  {
    MEMORY[0x19970E350](a3, a4, *MEMORY[0x1E4F1CF80], &cf);
    if (!cf) {
      return FigSignalErrorAt();
    }
    CFTypeID v6 = CFGetTypeID(cf);
    if (v6 == CFArrayGetTypeID())
    {
      CFTypeRef v7 = cf;
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      CFTypeID v10 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v9 + 8);
      if (!v10)
      {
        uint64_t v12 = 4294954514;
LABEL_11:
        if (cf) {
          CFRelease(cf);
        }
        return v12;
      }
      uint64_t v11 = v10(a1, a2, v7);
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
    }
    uint64_t v12 = v11;
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

uint64_t FigMediaValidatorRelease(CFTypeRef *a1)
{
  if (!a1) {
    return 4294954511;
  }
  if (a1[10])
  {
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    if (CMBaseObject)
    {
      uint64_t v3 = CMBaseObject;
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v5 = v4 ? v4 : 0;
      CFTypeRef v7 = *(void (**)(uint64_t))(v5 + 24);
      if (v7) {
        v7(v3);
      }
    }
  }
  if (!a1[26]) {
    goto LABEL_14;
  }
  MEMORY[0x19970E290]();
  a1[3] = 0;
  if (!a1[25])
  {
    MEMORY[0x19970E2B0](a1[26]);
    FigSimpleMutexDestroy();
    a1[26] = 0;
LABEL_14:
    CFTypeRef v8 = a1[22];
    if (v8)
    {
      CFRelease(v8);
      a1[22] = 0;
    }
    CFTypeRef v9 = a1[10];
    if (v9)
    {
      CFRelease(v9);
      a1[10] = 0;
    }
    if (*a1)
    {
      CFRelease(*a1);
      *a1 = 0;
    }
    CFTypeRef v10 = a1[1];
    if (v10)
    {
      CFRelease(v10);
      a1[1] = 0;
    }
    CFTypeRef v11 = a1[2];
    if (v11)
    {
      CFRelease(v11);
      a1[2] = 0;
    }
    CFTypeRef v12 = a1[6];
    if (v12)
    {
      CFRelease(v12);
      a1[6] = 0;
    }
    CFTypeRef v13 = a1[7];
    if (v13)
    {
      CFRelease(v13);
      a1[7] = 0;
    }
    if (a1[27]) {
      FigSemaphoreDestroy();
    }
    free(a1);
    return 0;
  }
  *((unsigned char *)a1 + 224) = 1;
  FigThreadAbort();
  MEMORY[0x19970E2B0](a1[26]);
  return 0;
}

uint64_t fpm_streamPausedCallback()
{
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    Owner = (__CFData *)FigRetainProxyGetOwner();
    MutableBytePtr = CFDataGetMutableBytePtr(Owner);
    MEMORY[0x19970E290](*((void *)MutableBytePtr + 6));
    *((_WORD *)MutableBytePtr + 157) = 257;
    fpm_ensureUpdatePrimed((uint64_t)MutableBytePtr);
    MEMORY[0x19970E2B0](*((void *)MutableBytePtr + 6));
  }

  return FigRetainProxyUnlockMutex();
}

void itemfig_BossBecameIdle(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9350BF0 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v9)
    {
      CFTypeRef v10 = (const void *)v9;
      CFTypeRef v11 = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
      if (*(unsigned char *)v11) {
        goto LABEL_18;
      }
      if (!a5) {
        goto LABEL_9;
      }
      CFTypeRef v12 = v11;
      if (CFDictionaryGetValue(a5, @"ControlToken") != *(const void **)(DerivedStorage + 512))
      {
        if (dword_1E9350BF0 >= 2)
        {
LABEL_9:
          CFTypeRef v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
LABEL_17:
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_18:
        CFRelease(v10);
        return;
      }
      CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a5, @"OSStatus");
      if (Value)
      {
        CFNumberRef v15 = Value;
        CFTypeID TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(v15))
        {
          valuePtr[0] = 0;
          CFNumberGetValue(v15, kCFNumberSInt32Type, valuePtr);
          int v17 = valuePtr[0];
          if (valuePtr[0])
          {
            *(unsigned char *)(DerivedStorage + 994) = 1;
            if (v17 == 561606517)
            {
              FailedNotificationPayload = itemfig_createFailedNotificationPayload(0, v15);
            }
            else
            {
              if (v17 != -12551) {
                goto LABEL_23;
              }
              FailedNotificationPayload = itemfig_createFailedNotificationPayloadWithContentStream(*(CFTypeRef *)(DerivedStorage + 128), v15);
              CFTypeRef v19 = (__CFError *)CFDictionaryGetValue(FailedNotificationPayload, @"CFError");
              itemfig_reportingAgentReportError((uint64_t)a2, v19, @"CoreMediaErrorDomain", @"Failed to play to end due to sample out of range", valuePtr[0]);
            }
            CMNotificationCenterGetDefaultLocalCenter();
            FigDispatchAsyncPostNotification();
            if (FailedNotificationPayload) {
              CFRelease(FailedNotificationPayload);
            }
          }
        }
      }
LABEL_23:
      if ((*(_DWORD *)(DerivedStorage + 200) & 0x1D) != 1)
      {
        if (a2) {
          CFRetain(a2);
        }
        dispatch_async_f(v12[12], a2, (dispatch_function_t)itemfig_BossBecameIdle_prepareNextItemForTransition_f);
        goto LABEL_18;
      }
      if (dword_1E9350BF0)
      {
        int v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
}

void itemfig_ReachedEnd(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    uint64_t v4 = DerivedStorage;
    uint64_t v5 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v5)
    {
      CFTypeID v6 = (const void *)v5;
      CFTypeRef v7 = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
      if (!*(unsigned char *)v7)
      {
        if (v4[1312])
        {
          if (dword_1E9350BF0 >= 2)
          {
            os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
        }
        else
        {
          uint64_t v9 = v7;
          CFTypeRef v10 = malloc_type_calloc(1uLL, 0x18uLL, 0x20040960023A9uLL);
          if (v10)
          {
            CFTypeRef v11 = v10;
            *CFTypeRef v10 = CFRetain(v6);
            if (a2) {
              CFTypeRef v12 = CFRetain(a2);
            }
            else {
              CFTypeRef v12 = 0;
            }
            v11[1] = v12;
            Timebase = (const void *)FigPlaybackBossGetTimebase(*((void *)v4 + 44));
            if (Timebase) {
              Timebase = CFRetain(Timebase);
            }
            v11[2] = Timebase;
            dispatch_async_f(v9[12], v11, (dispatch_function_t)itemfig_ReachedEnd_ReachedEndGuts_f);
          }
        }
      }
      CFRelease(v6);
    }
  }
}

void itemfig_ReachedEndGuts(const void *a1)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  if (!*DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      uint64_t v5 = (const void *)v4;
      CFTypeID v6 = (unsigned char *)CMBaseObjectGetDerivedStorage();
      if (*v6)
      {
        CFRelease(v5);
      }
      else
      {
        CFTypeRef v7 = v6;
        CFRetain(a1);
        if (!FigDeferredTransactionCreate(*MEMORY[0x1E4F1CF80], (uint64_t *)cf))
        {
          MEMORY[0x19970E290](*((void *)v7 + 62));
          if (*((void *)v3 + 44))
          {
            itemfig_UpdateLastPlayedOutOrLastPlayedDateIfNecessary((uint64_t)a1);
            uint64_t v8 = *((unsigned int *)v7 + 194);
            CFIndex Count = CFArrayGetCount(*((CFArrayRef *)v7 + 63));
            if (FigPlaybackGetEffectiveActionAtEnd(v8, Count) == 1)
            {
              if (dword_1E9350BF0)
              {
                os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                fig_log_call_emit_and_clean_up_after_send_and_compose();
              }
              playerfig_pauseForInternalReason(v5, 1);
            }
            else
            {
              uint64_t v11 = *((unsigned int *)v7 + 194);
              CFIndex v12 = CFArrayGetCount(*((CFArrayRef *)v7 + 63));
              if (FigPlaybackGetEffectiveActionAtEnd(v11, v12))
              {
                if (dword_1E9350BF0)
                {
                  CFTypeRef v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
              }
              else
              {
                itemfig_advanceToNextItem((uint64_t)a1, cf[0]);
              }
            }
          }
          MEMORY[0x19970E2B0](*((void *)v7 + 62));
        }
        FigDeferredTransactionCommit((uint64_t)cf[0]);
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        playerfig_updatePlaybackStateAndBossRate(v5, 7, 0);
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(a1);
        CFRelease(v5);
      }
    }
  }
}

uint64_t playerasync_Invalidate(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32())
  {
    CFRetain(a1);
    dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 56), a1, (dispatch_function_t)playerasync_InvalidateOnQueue);
  }
  return 0;
}

void playerasync_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 5))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    *(unsigned char *)(DerivedStorage + 5) = 0;
  }
  unsigned int v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
  int v2 = *(const void **)(DerivedStorage + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 32);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 32) = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v4 = *(const void **)(DerivedStorage + 48);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 56);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(DerivedStorage + 56) = 0;
  }
  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();
  FigSimpleMutexDestroy();
  CFTypeID v6 = *(const void **)(DerivedStorage + 88);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 88) = 0;
  }
  FigConditionVariableDestroy();
  FigSimpleMutexDestroy();
  CFTypeRef v7 = *(const void **)(DerivedStorage + 96);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 96) = 0;
  }
}

uint64_t FigSampleBufferProcessorGetClassID()
{
  return sFigSampleBufferProcessorClassID;
}

uint64_t RegisterFigSampleBufferProcessorType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigSampleBufferProcessorGetTypeID()
{
  MEMORY[0x19970EE10](&FigSampleBufferProcessorGetClassID_sRegisterFigSampleBufferProcessorTypeOnce, RegisterFigSampleBufferProcessorType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigMovieFormatWriterCreateWithByteStream(const __CFAllocator *a1, const void *a2, const __CFDictionary *a3, void *a4)
{
  CFTypeRef v18 = 0;
  if (a2 && a4)
  {
    uint64_t v6 = createFigMovieFormatWriterObject(a1, 0, a3, &v18);
    CFTypeRef v7 = v18;
    if (v6)
    {
      uint64_t v14 = v6;
      if (v18) {
        CFRelease(v18);
      }
      return v14;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    CFIndex v12 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v11 + 48);
    if (v12 && !v12(CMBaseObject, *MEMORY[0x1E4F1EC78], *MEMORY[0x1E4F1CF80], &cf))
    {
      CFURLRef v16 = CFURLCopyAbsoluteURL((CFURLRef)cf);
      if (v16)
      {
        CFURLRef v17 = v16;
        int IsFileOnExternalStorageDevice = FigFileIsFileOnExternalStorageDevice();
        CFRelease(v17);
        goto LABEL_10;
      }
      FigSignalErrorAt();
    }
    int IsFileOnExternalStorageDevice = 0;
LABEL_10:
    if (cf) {
      CFRelease(cf);
    }
    *(unsigned char *)(DerivedStorage + 17) = IsFileOnExternalStorageDevice != 0;
    uint64_t v14 = 0;
    *(void *)(DerivedStorage + 8) = CFRetain(a2);
    *a4 = v7;
    return v14;
  }

  return FigSignalErrorAt();
}

uint64_t FigFormatWriterGetClassID()
{
  return sFigFormatWriterClassID;
}

uint64_t RegisterFigFormatWriterType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t figMovieWriter_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    goto LABEL_3;
  }
  uint64_t v7 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 335)) {
    goto LABEL_3;
  }
  uint64_t v9 = *(uint64_t **)(DerivedStorage + 728);
  if (CFEqual(@"MovieTimeScale", a2))
  {
    LODWORD(v60) = 0;
    if (a3)
    {
      CFTypeID v10 = CFGetTypeID(a3);
      if (v10 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &v60);
        uint64_t result = MovieInformationSetMovieTimeScale((uint64_t)v9, v60);
        if (!result) {
          *(_DWORD *)(v7 + 20) = v60;
        }
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"ByteCountToReserveForHeader", a2))
  {
    if (!a3) {
      goto LABEL_3;
    }
    CFTypeID v11 = CFGetTypeID(a3);
    if (v11 != CFNumberGetTypeID()) {
      goto LABEL_3;
    }
    CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(v7 + 268));
    return 0;
  }
  if (CFEqual(@"InterleavingPeriod", a2))
  {
    if (!a3) {
      goto LABEL_3;
    }
    long long v60 = 0uLL;
    *(void *)&long long v61 = 0;
    CMTimeMakeFromDictionary((CMTime *)&v60, (CFDictionaryRef)a3);
    if ((BYTE12(v60) & 0x1D) == 1)
    {
      uint64_t result = 0;
      *(_OWORD *)(v7 + 48) = v60;
      *(void *)(v7 + 64) = v61;
      return result;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"InterleavingOverflowThreshold", a2))
  {
    if (!a3) {
      goto LABEL_3;
    }
    long long v60 = 0uLL;
    *(void *)&long long v61 = 0;
    CMTimeMakeFromDictionary((CMTime *)&v60, (CFDictionaryRef)a3);
    if ((BYTE12(v60) & 0x1D) == 1)
    {
      uint64_t result = 0;
      *(_OWORD *)(v7 + 72) = v60;
      *(void *)(v7 + 88) = v61;
      return result;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"MovieFragmentCheckpointInterval", a2))
  {
    if (*(unsigned char *)(v7 + 384) || !a3) {
      goto LABEL_3;
    }
    long long v60 = 0uLL;
    *(void *)&long long v61 = 0;
    CMTimeMakeFromDictionary((CMTime *)&v60, (CFDictionaryRef)a3);
    if ((BYTE12(v60) & 0x1D) == 1)
    {
      long long v12 = v60;
      *(_OWORD *)(v7 + 96) = v60;
      CMTimeEpoch v13 = v61;
      *(void *)(v7 + 112) = v61;
      *(_OWORD *)&time1.CMTimeValue value = v12;
      time1.CMTimeEpoch epoch = v13;
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      uint64_t result = CMTimeCompare(&time1, &time2);
      if (result)
      {
        uint64_t result = 0;
        *(unsigned char *)(v7 + 329) = 1;
      }
      else
      {
        *(unsigned char *)(v7 + 329) = 0;
      }
      return result;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"InitialMovieFragmentCheckpoint", a2))
  {
    long long v60 = 0uLL;
    *(void *)&long long v61 = 0;
    CMTimeMakeFromDictionary((CMTime *)&v60, (CFDictionaryRef)a3);
    if ((BYTE12(v60) & 1) == 0
      || (BYTE12(v60) & 0x1D) == 1
      && (CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48],
          *(_OWORD *)&time2.CMTimeValue value = v60,
          time2.CMTimeEpoch epoch = v61,
          CMTimeCompare(&time1, &time2) < 0))
    {
      uint64_t result = 0;
      *(_OWORD *)(v7 + 120) = v60;
      *(void *)(v7 + 136) = v61;
      return result;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"PreferredOutputSegmentInterval", a2))
  {
    if (*(unsigned char *)(v7 + 384) != 1) {
      goto LABEL_3;
    }
    long long v60 = 0uLL;
    *(void *)&long long v61 = 0;
    CMTimeMakeFromDictionary((CMTime *)&v60, (CFDictionaryRef)a3);
    char v14 = BYTE12(v60);
    if ((~HIDWORD(v60) & 0x11) != 0)
    {
      if ((BYTE12(v60) & 0x1D) != 1) {
        return FigSignalErrorAt();
      }
      CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      *(_OWORD *)&time2.CMTimeValue value = v60;
      time2.CMTimeEpoch epoch = v61;
      if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0) {
        return FigSignalErrorAt();
      }
      char v14 = BYTE12(v60);
    }
    *(_OWORD *)(v7 + 196) = v60;
    *(void *)(v7 + 212) = v61;
    if ((v14 & 0x1D) == 1
      && (CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48],
          *(_OWORD *)&time2.CMTimeValue value = v60,
          time2.CMTimeEpoch epoch = v61,
          CMTimeCompare(&time1, &time2) < 0))
    {
      uint64_t result = 0;
      *(unsigned char *)(v7 + 168) = 1;
    }
    else
    {
      uint64_t result = 0;
      *(unsigned char *)(v7 + 168) = 0;
    }
    return result;
  }
  if (CFEqual(@"InitialSegmentStartTime", a2))
  {
    if (*(unsigned char *)(v7 + 384) != 1) {
      goto LABEL_3;
    }
    long long v60 = 0uLL;
    *(void *)&long long v61 = 0;
    CMTimeMakeFromDictionary((CMTime *)&v60, (CFDictionaryRef)a3);
    if ((BYTE12(v60) & 0x1D) == 1)
    {
      uint64_t result = 0;
      *(_OWORD *)(v7 + 172) = v60;
      *(void *)(v7 + 188) = v61;
      return result;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"NextMovieFragmentSequenceNumber", a2))
  {
    if (!a3) {
      goto LABEL_3;
    }
    CFTypeID v15 = CFGetTypeID(a3);
    if (v15 != CFNumberGetTypeID()) {
      goto LABEL_3;
    }
    LODWORD(v60) = 0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &v60);
    if ((int)v60 > 0)
    {
      uint64_t result = 0;
      *(_DWORD *)(v7 + 376) = v60;
      return result;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"ProduceCombinableMovieFragments", a2))
  {
    if (a3)
    {
      CFTypeID v16 = CFGetTypeID(a3);
      if (v16 == CFBooleanGetTypeID())
      {
        Boolean Value = CFBooleanGetValue((CFBooleanRef)a3);
        uint64_t result = 0;
        *(unsigned char *)(v7 + 533) = Value;
        return result;
      }
    }
    goto LABEL_3;
  }
  if (CFEqual(@"AllowNonSyncSampleAtBeginningOfSegment", a2))
  {
    if (a3)
    {
      CFTypeID v18 = CFGetTypeID(a3);
      if (v18 == CFBooleanGetTypeID())
      {
        Boolean v19 = CFBooleanGetValue((CFBooleanRef)a3);
        uint64_t result = 0;
        *(unsigned char *)(v7 + 534) = v19;
        return result;
      }
    }
    goto LABEL_3;
  }
  if (CFEqual(@"ConsolidateMovieFragments", a2))
  {
    if (a3)
    {
      CFTypeID TypeID = CFBooleanGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        Boolean v21 = CFBooleanGetValue((CFBooleanRef)a3);
        uint64_t result = 0;
        *(unsigned char *)(v7 + 531) = v21;
        return result;
      }
    }
    goto LABEL_3;
  }
  if (CFEqual(@"MovieExtendsHeaderFragmentDuration", a2))
  {
    if (a3)
    {
      CFTypeID v22 = CFGetTypeID(a3);
      if (v22 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary((CMTime *)&v60, (CFDictionaryRef)a3);
        time2.CMTimeValue value = v60;
        CMTimeFlags v23 = HIDWORD(v60);
        time2.CMTimeScale timescale = DWORD2(v60);
        CMTimeEpoch v24 = v61;
        if ((BYTE12(v60) & 1) == 0
          || (BYTE12(v60) & 0x1D) == 1
          && (long long v60 = *MEMORY[0x1E4F1FA48],
              *(void *)&long long v61 = *(void *)(MEMORY[0x1E4F1FA48] + 16),
              time1.CMTimeValue value = time2.value,
              time1.CMTimeScale timescale = time2.timescale,
              time1.CMTimeFlags flags = v23,
              time1.CMTimeEpoch epoch = v24,
              CMTimeCompare((CMTime *)&v60, &time1) < 1))
        {
          uint64_t result = 0;
          *(void *)(v7 + 244) = time2.value;
          uint64_t v25 = v7 + 244;
          *(_DWORD *)(v25 + 8) = time2.timescale;
          *(_DWORD *)(v25 + 12) = v23;
          *(void *)(v25 + 16) = v24;
          return result;
        }
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"WriteNoSamplesInMovieHeader", a2))
  {
    if (a3)
    {
      CFTypeID v26 = CFGetTypeID(a3);
      if (v26 == CFBooleanGetTypeID())
      {
        Boolean v27 = CFBooleanGetValue((CFBooleanRef)a3);
        uint64_t result = 0;
        *(unsigned char *)(v7 + 332) = v27;
        return result;
      }
    }
    goto LABEL_3;
  }
  if (CFEqual(@"WriteBaseMediaDecodeTimeInTrackFragments", a2))
  {
    if (a3)
    {
      CFTypeID v28 = CFGetTypeID(a3);
      if (v28 == CFBooleanGetTypeID())
      {
        Boolean v29 = CFBooleanGetValue((CFBooleanRef)a3);
        uint64_t result = 0;
        *(unsigned char *)(v7 + 333) = v29;
        return result;
      }
    }
    goto LABEL_3;
  }
  if (CFEqual(@"FileTypeMajorBrand", a2))
  {
    uint64_t v30 = *(void *)(v7 + 744);
    return MovieSampleDataWriterSetMajorBrand(v30, a3);
  }
  if (CFEqual(@"FileTypeMinorVersion", a2))
  {
    uint64_t v31 = *(void *)(v7 + 744);
    return MovieSampleDataWriterSetMinorVersion(v31, a3);
  }
  if (CFEqual(@"FileTypeCompatibleBrands", a2))
  {
    uint64_t v32 = *(void *)(v7 + 744);
    return MovieSampleDataWriterSetCompatibleBrands(v32, a3);
  }
  if (CFEqual(@"EnableWriting", a2))
  {
    if (a3)
    {
      CFTypeID v33 = CFBooleanGetTypeID();
      if (v33 == CFGetTypeID(a3))
      {
        Boolean v34 = CFBooleanGetValue((CFBooleanRef)a3);
        uint64_t result = 0;
        *(unsigned char *)(v7 + 334) = v34;
        return result;
      }
    }
    goto LABEL_3;
  }
  if (CFEqual(@"EnableExtendedLanguageTag", a2))
  {
    if (a3)
    {
      CFTypeID v35 = CFBooleanGetTypeID();
      if (v35 == CFGetTypeID(a3))
      {
        Boolean v36 = CFBooleanGetValue((CFBooleanRef)a3);
        uint64_t result = 0;
        *(unsigned char *)(v7 + 328) = v36;
        return result;
      }
    }
    goto LABEL_3;
  }
  if (CFEqual(@"TrackReference", a2))
  {
    if (a3)
    {
      CFTypeID v37 = CFGetTypeID(a3);
      if (v37 != CFDictionaryGetTypeID()) {
        goto LABEL_3;
      }
    }
    return setTrackReferences(v9, (const __CFDictionary *)a3);
  }
  if (CFEqual(@"MovieMatrix", a2))
  {
    int v62 = 0;
    long long v60 = 0u;
    long long v61 = 0u;
    if (!a3) {
      return FigSignalErrorAt();
    }
    CFTypeID v38 = CFGetTypeID(a3);
    if (v38 != CFArrayGetTypeID()) {
      return FigSignalErrorAt();
    }
    uint64_t result = getFigMatrixFromArray((const __CFArray *)a3, (uint64_t)&v60);
    if (!result) {
      return MovieInformationSetMovieMatrix((uint64_t)v9, (uint64_t)&v60);
    }
    return result;
  }
  if (CFEqual(@"PreferredRate", a2))
  {
    LODWORD(v60) = 0;
    if (a3)
    {
      CFTypeID v39 = CFGetTypeID(a3);
      if (v39 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &v60);
        return MovieInformationSetPreferredRate((uint64_t)v9, *(float *)&v60);
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"PreferredVolume", a2))
  {
    LODWORD(v60) = 0;
    if (a3)
    {
      CFTypeID v40 = CFGetTypeID(a3);
      if (v40 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberFloat32Type, &v60);
        return MovieInformationSetPreferredVolume((uint64_t)v9, *(float *)&v60);
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"iTunesGaplessInfo", a2))
  {
    if (a3)
    {
      CFTypeID v41 = CFGetTypeID(a3);
      if (v41 != CFDictionaryGetTypeID()) {
        goto LABEL_3;
      }
      uint64_t v42 = *(const void **)(v7 + 688);
      *(void *)(v7 + 688) = a3;
LABEL_128:
      CFRetain(a3);
      if (!v42) {
        return 0;
      }
      goto LABEL_136;
    }
    uint64_t v42 = *(const void **)(v7 + 688);
    *(void *)(v7 + 688) = 0;
    if (!v42) {
      return 0;
    }
    goto LABEL_136;
  }
  if (CFEqual(@"MetadataToTransfer", a2))
  {
    if (a3)
    {
      CFTypeID v43 = CFDictionaryGetTypeID();
      if (v43 != CFGetTypeID(a3))
      {
        CFTypeID v44 = CFArrayGetTypeID();
        if (v44 != CFGetTypeID(a3)) {
          return 0;
        }
      }
      uint64_t v45 = *(const void **)(v7 + 296);
      *(void *)(v7 + 296) = a3;
      CFRetain(a3);
    }
    else
    {
      uint64_t v45 = *(const void **)(v7 + 296);
      *(void *)(v7 + 296) = 0;
    }
    if (v45) {
      CFRelease(v45);
    }
    uint64_t result = *(void *)(v7 + 304);
    if (result)
    {
      CFRelease((CFTypeRef)result);
      uint64_t result = 0;
      *(void *)(v7 + 304) = 0;
    }
  }
  else
  {
    if (!CFEqual(@"MetadataToWrite", a2))
    {
      if (!CFEqual(@"MetadataWhitelist", a2))
      {
        if (CFEqual(@"ClientPID", a2))
        {
          if (!a3) {
            goto LABEL_3;
          }
          CFTypeID v50 = CFNumberGetTypeID();
          if (v50 != CFGetTypeID(a3)) {
            goto LABEL_3;
          }
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(v7 + 536));
          uint64_t result = *(void *)(v7 + 552);
          if (result)
          {
            return FigThreadSetProperty();
          }
        }
        else if (CFEqual(@"ThreadPriority", a2))
        {
          if (!a3) {
            goto LABEL_3;
          }
          CFTypeID v51 = CFGetTypeID(a3);
          if (v51 != CFNumberGetTypeID()) {
            goto LABEL_3;
          }
          CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(v7 + 544));
          int v52 = *(_DWORD *)(v7 + 544);
          return ffr_updateThreadPriority(a1, v52);
        }
        else
        {
          if (CFEqual(@"JoinWritingThreadToNewWorkgroup", a2))
          {
            if (a3)
            {
              CFTypeID v53 = CFGetTypeID(a3);
              if (v53 == CFBooleanGetTypeID())
              {
                Boolean v54 = CFBooleanGetValue((CFBooleanRef)a3);
                uint64_t result = 0;
                *(unsigned char *)(v7 + 600) = v54;
                return result;
              }
            }
            goto LABEL_3;
          }
          if (CFEqual(@"WriteInSinglePassUsingPredeterminedSizes", a2))
          {
            if (a3)
            {
              CFTypeID v55 = CFGetTypeID(a3);
              if (v55 != CFDictionaryGetTypeID()) {
                goto LABEL_3;
              }
            }
            return setPredeterminedSizes(v7, (uint64_t)a3);
          }
          else if (CFEqual(@"WriteInSinglePassUsingMediaDataCheckpointInterval", a2))
          {
            if (a3)
            {
              CFTypeID v56 = CFGetTypeID(a3);
              if (v56 != CFDictionaryGetTypeID()) {
                goto LABEL_3;
              }
            }
            return setMediaDataCheckpointInterval(v7, (uint64_t)a3);
          }
          else
          {
            if (!CFEqual(@"EncryptionConfig", a2))
            {
              if (!CFEqual(@"MaximizePowerEfficiency", a2)) {
                return 4294954666;
              }
              if (a3)
              {
                CFTypeID v59 = CFGetTypeID(a3);
                if (v59 == CFBooleanGetTypeID())
                {
                  uint64_t result = 0;
                  *(unsigned char *)(v7 + 760) = *MEMORY[0x1E4F1CFD0] == (void)a3;
                  return result;
                }
              }
              goto LABEL_3;
            }
            if (!a3
              || (CFTypeID v57 = CFGetTypeID(a3), v57 != EncryptionConfigGetTypeID())
              && (CFTypeID v58 = CFGetTypeID(a3), v58 != CFDictionaryGetTypeID()))
            {
LABEL_3:
              return FigSignalErrorAt();
            }
            return setPSSHDataEntries(v7, a3);
          }
        }
        return result;
      }
      if (a3)
      {
        CFTypeID v49 = CFGetTypeID(a3);
        if (v49 != CFDictionaryGetTypeID()) {
          goto LABEL_3;
        }
        uint64_t v42 = *(const void **)(v7 + 312);
        *(void *)(v7 + 312) = a3;
        goto LABEL_128;
      }
      uint64_t v42 = *(const void **)(v7 + 312);
      *(void *)(v7 + 312) = 0;
      if (!v42) {
        return 0;
      }
LABEL_136:
      CFRelease(v42);
      return 0;
    }
    if (a3)
    {
      CFTypeID v46 = CFDictionaryGetTypeID();
      if (v46 != CFGetTypeID(a3))
      {
        CFTypeID v47 = CFArrayGetTypeID();
        if (v47 != CFGetTypeID(a3)) {
          return 0;
        }
      }
      uint64_t v48 = *(const void **)(v7 + 304);
      *(void *)(v7 + 304) = a3;
      CFRetain(a3);
    }
    else
    {
      uint64_t v48 = *(const void **)(v7 + 304);
      *(void *)(v7 + 304) = 0;
    }
    if (v48) {
      CFRelease(v48);
    }
    uint64_t result = *(void *)(v7 + 296);
    if (result)
    {
      CFRelease((CFTypeRef)result);
      uint64_t result = 0;
      *(void *)(v7 + 296) = 0;
    }
  }
  return result;
}

uint64_t figMovieWriter_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFMutableArrayRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a4 || (uint64_t v8 = DerivedStorage, *(unsigned char *)(DerivedStorage + 335)))
  {
    return FigSignalErrorAt();
  }
  uint64_t v10 = *(void *)(DerivedStorage + 728);
  if (CFEqual(@"MovieTimeScale", a2))
  {
    LODWORD(v35) = 0;
    uint64_t BasicMetrics = MovieInformationGetBasicMetrics(v10, 0, 0, &v35, 0);
    if (BasicMetrics) {
      return BasicMetrics;
    }
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_CMTime time = (CMTime *)&v35;
    goto LABEL_10;
  }
  if (CFEqual(@"HeaderByteCount", a2))
  {
    *(void *)&long long v35 = 0;
    uint64_t BasicMetrics = calculateHeaderByteCount(v8, (unint64_t *)&v35);
    if (BasicMetrics) {
      return BasicMetrics;
    }
    LODWORD(time.CFDictionarySetValue(theDict, key, value) = v35;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_CMTime time = &time;
LABEL_10:
    CFNumberType v14 = kCFNumberSInt32Type;
LABEL_11:
    SInt64 = CFNumberCreate(v12, v14, p_time);
LABEL_12:
    *a4 = SInt64;
    return BasicMetrics;
  }
  if (CFEqual(@"TotalMovieAndMovieFragmentHeaderByteCountWritten", a2))
  {
    SInt64 = (__CFArray *)FigCFNumberCreateSInt64();
LABEL_19:
    uint64_t BasicMetrics = 0;
    goto LABEL_12;
  }
  if (CFEqual(@"MediaDataLocation", a2))
  {
    return createMediaDataLocation(a3, v8, a4);
  }
  if (CFEqual(@"EstimatedFileByteCount", a2))
  {
    *(void *)&long long v35 = 0;
    uint64_t BasicMetrics = estimateResultFileSize(v8, &v35);
    if (BasicMetrics) {
      return BasicMetrics;
    }
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_CMTime time = (CMTime *)&v35;
    CFNumberType v14 = kCFNumberSInt64Type;
    goto LABEL_11;
  }
  if (CFEqual(@"LongestMediaDecodeDuration", a2))
  {
    long long v35 = 0uLL;
    *(void *)&long long v36 = 0;
    getLongestMediaDecodeDuration(v8, (uint64_t)&v35);
    *(_OWORD *)&time.CMTimeValue value = v35;
    time.CMTimeEpoch epoch = v36;
    CFTypeID v16 = &time;
LABEL_29:
    SInt64 = CMTimeCopyAsDictionary(v16, a3);
    goto LABEL_19;
  }
  if (CFEqual(@"ByteCountToReserveForHeader", a2))
  {
    SInt64 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, (const void *)(v8 + 268));
    goto LABEL_19;
  }
  if (CFEqual(@"InterleavingPeriod", a2))
  {
    long long v35 = *(_OWORD *)(v8 + 48);
    uint64_t v17 = *(void *)(v8 + 64);
LABEL_43:
    *(void *)&long long v36 = v17;
    CFTypeID v16 = (CMTime *)&v35;
    goto LABEL_29;
  }
  if (CFEqual(@"InterleavingOverflowThreshold", a2))
  {
    long long v35 = *(_OWORD *)(v8 + 72);
    uint64_t v17 = *(void *)(v8 + 88);
    goto LABEL_43;
  }
  if (CFEqual(@"MovieFragmentCheckpointInterval", a2))
  {
    long long v35 = *(_OWORD *)(v8 + 96);
    uint64_t v17 = *(void *)(v8 + 112);
    goto LABEL_43;
  }
  if (CFEqual(@"InitialMovieFragmentCheckpoint", a2))
  {
    long long v35 = *(_OWORD *)(v8 + 120);
    uint64_t v17 = *(void *)(v8 + 136);
    goto LABEL_43;
  }
  if (CFEqual(@"PreferredOutputSegmentInterval", a2) || CFEqual(@"InitialSegmentStartTime", a2))
  {
    long long v35 = *(_OWORD *)(v8 + 196);
    uint64_t v17 = *(void *)(v8 + 212);
    goto LABEL_43;
  }
  if (CFEqual(@"ProduceCombinableMovieFragments", a2))
  {
    CFTypeID v18 = (const void **)MEMORY[0x1E4F1CFD0];
    int v19 = *(unsigned __int8 *)(v8 + 533);
LABEL_50:
    if (!v19) {
      CFTypeID v18 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    SInt64 = (__CFArray *)*v18;
LABEL_53:
    SInt64 = (__CFArray *)CFRetain(SInt64);
    goto LABEL_19;
  }
  if (CFEqual(@"AllowNonSyncSampleAtBeginningOfSegment", a2))
  {
    CFTypeID v18 = (const void **)MEMORY[0x1E4F1CFD0];
    int v19 = *(unsigned __int8 *)(v8 + 534);
    goto LABEL_50;
  }
  if (CFEqual(@"ConsolidateMovieFragments", a2))
  {
    CFTypeID v18 = (const void **)MEMORY[0x1E4F1CFD0];
    int v19 = *(unsigned __int8 *)(v8 + 531);
    goto LABEL_50;
  }
  if (CFEqual(@"MovieExtendsHeaderFragmentDuration", a2))
  {
    long long v35 = *(_OWORD *)(v8 + 244);
    uint64_t v17 = *(void *)(v8 + 260);
    goto LABEL_43;
  }
  if (CFEqual(@"WriteNoSamplesInMovieHeader", a2))
  {
    CFTypeID v18 = (const void **)MEMORY[0x1E4F1CFD0];
    int v19 = *(unsigned __int8 *)(v8 + 332);
    goto LABEL_50;
  }
  if (CFEqual(@"WriteBaseMediaDecodeTimeInTrackFragments", a2))
  {
    CFTypeID v18 = (const void **)MEMORY[0x1E4F1CFD0];
    int v19 = *(unsigned __int8 *)(v8 + 333);
    goto LABEL_50;
  }
  if (CFEqual(@"FileTypeMajorBrand", a2))
  {
    uint64_t v20 = *(void *)(v8 + 744);
    return MovieSampleDataWriterCopyMajorBrand(v20, a4);
  }
  if (CFEqual(@"FileTypeMinorVersion", a2))
  {
    uint64_t v21 = *(void *)(v8 + 744);
    return MovieSampleDataWriterCopyMinorVersion(v21, a4);
  }
  if (CFEqual(@"FileTypeCompatibleBrands", a2))
  {
    uint64_t v22 = *(void *)(v8 + 744);
    return MovieSampleDataWriterCopyCompatibleBrands(v22, a4);
  }
  if (CFEqual(@"EnableWriting", a2))
  {
    CFTypeID v18 = (const void **)MEMORY[0x1E4F1CFD0];
    int v19 = *(unsigned __int8 *)(v8 + 334);
    goto LABEL_50;
  }
  if (CFEqual(@"EnableExtendedLanguageTag", a2))
  {
    CFTypeID v18 = (const void **)MEMORY[0x1E4F1CFD0];
    int v19 = *(unsigned __int8 *)(v8 + 328);
    goto LABEL_50;
  }
  if (CFEqual(@"TrackReference", a2))
  {
    return MovieInformationCreateTrackReferenceDictionary(a3, v10, a4);
  }
  if (CFEqual(@"MovieMatrix", a2))
  {
    int v37 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    uint64_t v23 = MovieInformationGetBasicMetrics(v10, 0, 0, 0, (uint64_t)&v35);
    if (!v23) {
      return copyFigMatrixAsArray(a3, (uint64_t)&v35, a4);
    }
    return v23;
  }
  if (CFEqual(@"MetadataWriter", a2))
  {
    *(void *)&long long v35 = 0;
    int v24 = *(_DWORD *)(v8 + 684);
    uint64_t v25 = (CFTypeRef *)&kFigMetadataFormat_QuickTimeUserData;
    if (v24) {
      uint64_t v25 = (CFTypeRef *)&kFigMetadataFormat_ISOUserData;
    }
    if ((v24 & 4) != 0) {
      CFTypeID v26 = (CFTypeRef *)&kFigMetadataFormat_iTunes;
    }
    else {
      CFTypeID v26 = v25;
    }
    uint64_t BasicMetrics = getMetadataSerializer((uint64_t)a3, v8, *v26, &v35);
    if (BasicMetrics) {
      return BasicMetrics;
    }
    SInt64 = (__CFArray *)FigMetadataSerializerGetFigMetadataWriter(v35);
    if (SInt64) {
      SInt64 = (__CFArray *)CFRetain(SInt64);
    }
    goto LABEL_12;
  }
  if (CFEqual(@"MetadataWriters", a2))
  {
    return createMetadataWritersDictionary(a3, v8, a4);
  }
  if (CFEqual(@"PreferredRate", a2))
  {
    LODWORD(v35) = 0;
    Boolean v27 = &v35;
    uint64_t v28 = v10;
    Boolean v29 = 0;
LABEL_101:
    uint64_t BasicMetrics = MovieInformationGetBasicMetrics(v28, v27, v29, 0, 0);
    if (BasicMetrics) {
      return BasicMetrics;
    }
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_CMTime time = (CMTime *)&v35;
    CFNumberType v14 = kCFNumberFloat32Type;
    goto LABEL_11;
  }
  if (CFEqual(@"PreferredVolume", a2))
  {
    LODWORD(v35) = 0;
    Boolean v29 = &v35;
    uint64_t v28 = v10;
    Boolean v27 = 0;
    goto LABEL_101;
  }
  if (CFEqual(@"iTunesGaplessInfo", a2))
  {
    SInt64 = *(__CFArray **)(v8 + 688);
    if (!SInt64) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
  if (CFEqual(@"MetadataToTransfer", a2))
  {
    uint64_t v30 = *(const void **)(v8 + 296);
    if (v30)
    {
LABEL_108:
      SInt64 = (__CFArray *)CFPropertyListCreateDeepCopy(a3, v30, 0);
      goto LABEL_19;
    }
LABEL_111:
    uint64_t BasicMetrics = 0;
    *a4 = 0;
    return BasicMetrics;
  }
  if (CFEqual(@"MetadataToWrite", a2))
  {
    uint64_t v30 = *(const void **)(v8 + 304);
    if (v30) {
      goto LABEL_108;
    }
    goto LABEL_111;
  }
  if (CFEqual(@"MetadataWhitelist", a2))
  {
    SInt64 = *(__CFArray **)(v8 + 312);
    if (!SInt64) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
  if (CFEqual(@"JoinWritingThreadToNewWorkgroup", a2))
  {
    uint64_t v31 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!*(unsigned char *)(v8 + 600)) {
      uint64_t v31 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    SInt64 = (__CFArray *)*v31;
    if (!*v31) {
      goto LABEL_19;
    }
    goto LABEL_53;
  }
  if (!CFEqual(@"PictureCollectionWriter", a2))
  {
    if (CFEqual(@"WriteInSinglePassUsingPredeterminedSizes", a2))
    {
      *(void *)&long long v35 = 0;
      uint64_t v34 = copyPredeterminedSizesAsDictionary(v8, a3, (CFMutableDictionaryRef *)&v35);
    }
    else
    {
      if (!CFEqual(@"WriteInSinglePassUsingMediaDataCheckpointInterval", a2))
      {
        if (!CFEqual(@"MaximizePowerEfficiency", a2)) {
          return 4294954666;
        }
        CFTypeID v18 = (const void **)MEMORY[0x1E4F1CFD0];
        int v19 = *(unsigned __int8 *)(v8 + 760);
        goto LABEL_50;
      }
      *(void *)&long long v35 = 0;
      uint64_t v34 = copyMediaDataCheckpointIntervalAsDictionary(v8, a3, (CFMutableDictionaryRef *)&v35);
    }
    uint64_t BasicMetrics = v34;
    if (!v34) {
      *a4 = (CFMutableArrayRef)v35;
    }
    return BasicMetrics;
  }
  uint64_t v32 = *(const void **)(v8 + 744);
  CFTypeID v33 = *(const void **)(v8 + 712);

  return FigIFFPictureCollectionWriterCreateWithMovieSampleDataWriter(v32, v33, 0, a3, (CFTypeRef *)a4);
}

uint64_t getMetadataSerializer(uint64_t a1, uint64_t a2, CFTypeRef cf1, void *a4)
{
  if (cf1 && a4)
  {
    if (CFEqual(cf1, @"com.apple.quicktime.udta"))
    {
      if ((*(unsigned char *)(a2 + 684) & 1) == 0)
      {
        uint64_t v8 = *(void *)(a2 + 280);
        if (!v8)
        {
          uint64_t v9 = (uint64_t *)(a2 + 280);
          uint64_t result = FigMetadataSerializerCreateForQuickTimeUserData(a1, v9);
          if (result) {
            return result;
          }
LABEL_21:
          uint64_t v8 = *v9;
          goto LABEL_22;
        }
        goto LABEL_22;
      }
      return 0;
    }
    if (CFEqual(cf1, @"org.mp4ra"))
    {
      if (*(unsigned char *)(a2 + 684))
      {
        uint64_t v8 = *(void *)(a2 + 280);
        if (!v8)
        {
          uint64_t v9 = (uint64_t *)(a2 + 280);
          uint64_t result = FigMetadataSerializerCreateForISOUserData(a1, v9);
          if (result) {
            return result;
          }
          goto LABEL_21;
        }
        goto LABEL_22;
      }
      return 0;
    }
    if (CFEqual(cf1, @"com.apple.quicktime.mdta"))
    {
      uint64_t v8 = *(void *)(a2 + 272);
      if (!v8)
      {
        uint64_t v9 = (uint64_t *)(a2 + 272);
        uint64_t result = FigMetadataSerializerCreateForQuickTimeMetadata(a1, v9);
        if (result) {
          return result;
        }
        goto LABEL_21;
      }
LABEL_22:
      uint64_t result = 0;
      *a4 = v8;
      return result;
    }
    if (CFEqual(cf1, @"com.apple.itunes"))
    {
      uint64_t v8 = *(void *)(a2 + 288);
      if (!v8)
      {
        uint64_t v9 = (uint64_t *)(a2 + 288);
        uint64_t result = FigMetadataSerializerCreateForiTunes(a1, v9);
        if (result) {
          return result;
        }
        goto LABEL_21;
      }
      goto LABEL_22;
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigMetadataSerializerCreateForQuickTimeUserData(uint64_t a1, void *a2)
{
  return FigMetadataSerializerCreateUserDataCommon(a1, 1, a2);
}

uint64_t FigMetadataSerializerGetClassID()
{
  return sFigMetadataSerializerClassID;
}

uint64_t RegisterFigMetadataSerializerBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigUserDataSerializerSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    if (CFEqual(@"freeAtomSize", a2))
    {
      if (a3)
      {
        CFTypeID TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(a3))
        {
          int valuePtr = 0;
          if (CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr))
          {
            uint64_t result = 0;
            *(_DWORD *)(v6 + 8) = valuePtr;
            return result;
          }
          return FigSignalErrorAt();
        }
      }
    }
    else
    {
      if (!CFEqual(@"minimumSize", a2)) {
        return 4294954710;
      }
      if (a3)
      {
        CFTypeID v9 = CFNumberGetTypeID();
        if (v9 == CFGetTypeID(a3))
        {
          int v10 = 0;
          if (CFNumberGetValue(a3, kCFNumberSInt32Type, &v10))
          {
            uint64_t result = 0;
            *(_DWORD *)(v6 + 12) = v10;
            return result;
          }
          return FigSignalErrorAt();
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t figMovieWriter_AddTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMBufferQueueRef v50 = 0;
  CMBufferQueueRef queueOut = 0;
  CMBufferQueueTriggerToken triggerToken = 0;
  CMBufferQueueTriggerToken triggerTokenOut = 0;
  CFTypeID v46 = 0;
  CMBufferQueueTriggerToken v47 = 0;
  CFTypeRef cf = 0;
  ptr = 0;
  int v43 = 0;
  if (a4)
  {
    uint64_t v7 = DerivedStorage;
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 488));
    CFTypeID v9 = (char *)malloc_type_calloc(1uLL, 0x3B0uLL, 0x10E0040FD3C06F9uLL);
    uint64_t v10 = (uint64_t)v9;
    if (!v9)
    {
      uint64_t v19 = FigSignalErrorAt();
      goto LABEL_84;
    }
    uint64_t v11 = MEMORY[0x1E4F1FA70];
    long long v12 = *MEMORY[0x1E4F1FA70];
    *(_OWORD *)(v9 + 200) = *(_OWORD *)(MEMORY[0x1E4F1FA70] + 16);
    long long v13 = *(_OWORD *)(v11 + 48);
    *(_OWORD *)(v9 + 216) = *(_OWORD *)(v11 + 32);
    *((void *)v9 + 1) = Count;
    *((void *)v9 + 2) = v7;
    *(_DWORD *)CFTypeID v9 = a2;
    CFNumberType v14 = (long long *)MEMORY[0x1E4F1FA48];
    *(_OWORD *)(v9 + 232) = v13;
    long long v15 = *v14;
    *(_OWORD *)(v9 + 136) = *v14;
    CMTimeEpoch v16 = *((void *)v14 + 2);
    *((void *)v9 + 19) = v16;
    *((_OWORD *)v9 + 10) = v15;
    *((void *)v9 + 22) = v16;
    *((void *)v9 + 31) = *(void *)(v11 + 64);
    *(_OWORD *)(v9 + 184) = v12;
    *((_OWORD *)v9 + 16) = v15;
    *((void *)v9 + 34) = v16;
    uint64_t v17 = MEMORY[0x1E4F1FA10];
    *(_OWORD *)(v9 + 280) = *MEMORY[0x1E4F1FA10];
    *((void *)v9 + 37) = *(void *)(v17 + 16);
    uint64_t v18 = MEMORY[0x1E4F1FA08];
    *((_OWORD *)v9 + 19) = *MEMORY[0x1E4F1FA08];
    *((void *)v9 + 40) = *(void *)(v18 + 16);
    *((void *)v9 + 42) = 0x800000007FFFFFFFLL;
    long long v41 = v15;
    *((_OWORD *)v9 + 27) = v15;
    *((void *)v9 + 56) = v16;
    *((_DWORD *)v9 + 26) = 0;
    v9[352] = 1;
    *((_WORD *)v9 + 16) = 257;
    v9[35] = 1;
    v9[37] = 1;
    uint64_t v19 = MovieInformationCreateTrack(*(void *)(v7 + 728), a2, 0, &v43, &cf);
    if (v19) {
      goto LABEL_84;
    }
    uint64_t v20 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
    long long v21 = v41;
    if (a2 != 1986618469)
    {
      if (a2 > 1835365472)
      {
        if (a2 <= 1936684397)
        {
          if (a2 != 1835365473 && a2 != 1885954932) {
            goto LABEL_26;
          }
          goto LABEL_18;
        }
        if (a2 != 1953325924)
        {
          if (a2 != 1936684398) {
            goto LABEL_26;
          }
          uint64_t v23 = (_OWORD *)(v10 + 108);
          if (*(unsigned char *)(v7 + 18))
          {
            _OWORD *v23 = v41;
            *(void *)(v10 + 124) = v16;
          }
          else
          {
            CMTimeMakeWithSeconds(&time, 2.0, 1);
            _OWORD *v23 = *(_OWORD *)&time.value;
            *(void *)(v10 + 124) = time.epoch;
          }
          *(_DWORD *)(v10 + 344) = 1;
          if ((*(_DWORD *)(v7 + 324) - 6) < 0xFFFFFFFB)
          {
LABEL_27:
            CFAllocatorRef v24 = *v20;
            CFMutableArrayRef Mutable = CFArrayCreateMutable(v24, 0, 0);
            if (Mutable)
            {
              CallbacksForUnsortedSampleBuffers = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
              uint64_t v27 = CMBufferQueueCreate(v24, 0, CallbacksForUnsortedSampleBuffers, &queueOut);
              if (!v27)
              {
                uint64_t v27 = CMBufferQueueSetValidationCallback(queueOut, (CMBufferValidationCallback)validateSampleBufferForTrackCallback, (void *)v10);
                if (!v27)
                {
                  *(_OWORD *)&time.CMTimeValue value = v41;
                  time.CMTimeEpoch epoch = v16;
                  uint64_t v27 = CMBufferQueueInstallTrigger(queueOut, (CMBufferQueueTriggerCallback)wakeupWritingThreadForDataReady, (void *)v10, 7, &time, &triggerTokenOut);
                  if (!v27)
                  {
                    *(_OWORD *)&time.CMTimeValue value = v41;
                    time.CMTimeEpoch epoch = v16;
                    uint64_t v27 = CMBufferQueueInstallTrigger(queueOut, (CMBufferQueueTriggerCallback)wakeupWritingThreadForEndOfDataReached, (void *)v10, 8, &time, &triggerToken);
                    if (!v27)
                    {
                      CMTime time = *(CMTime *)(v7 + 72);
                      uint64_t v27 = FigBufferQueueInstallTriggerWithTimeAndIntegerThresholds();
                      if (!v27)
                      {
                        CFTypeID v33 = CMBufferQueueGetCallbacksForUnsortedSampleBuffers();
                        uint64_t v27 = CMBufferQueueCreate(v24, 0, v33, &v50);
                        if (!v27)
                        {
                          *(void *)(v10 + 608) = queueOut;
                          *(void *)(v10 + 616) = v50;
                          *(void *)(v10 + 624) = triggerTokenOut;
                          *(void *)(v10 + 632) = triggerToken;
                          *(void *)(v10 + 640) = v47;
                          long long v34 = *(_OWORD *)(v7 + 48);
                          *(void *)(v10 + 664) = *(void *)(v7 + 64);
                          *(_OWORD *)(v10 + 648) = v34;
                          *(_OWORD *)&time.CMTimeValue value = v41;
                          time.CMTimeEpoch epoch = v16;
                          if (*(unsigned char *)(v7 + 329))
                          {
                            long long v35 = (CMTime *)(v7 + 96);
                          }
                          else
                          {
                            if (!*(unsigned char *)(v7 + 330))
                            {
LABEL_66:
                              *(CMTime *)(v10 + 672) = time;
                              *(void *)(v10 + 424) = Mutable;
                              *(void *)(v10 + 496) = v46;
                              CFTypeRef v36 = cf;
                              *(void *)(v10 + 536) = ptr;
                              *(void *)(v10 + 736) = v36;
                              *(_DWORD *)(v10 + 732) = v43;
                              uint64_t v27 = MovieHeaderMakerAddTrack(*(void *)(v7 + 736), v36, (void *)(v10 + 744));
                              if (!v27)
                              {
                                uint64_t v27 = MovieSampleDataWriterAddTrack(*(void *)(v7 + 744), a2, (uint64_t)chunkCallback, v10, (void *)(v10 + 760));
                                if (!v27)
                                {
                                  uint64_t v27 = MovieSampleDataWriterTrackSetPreferredChunkAlignment(*(void *)(v7 + 744), *(void *)(v10 + 760), 512);
                                  if (!v27)
                                  {
                                    uint64_t v27 = MediaSampleTimingGeneratorCreate(v24, a2, *(_DWORD *)(v10 + 344), (void *)(v10 + 752));
                                    if (!v27)
                                    {
                                      if (!*(unsigned char *)(v7 + 384))
                                      {
LABEL_76:
                                        CFArrayAppendValue(*(CFMutableArrayRef *)(v7 + 488), (const void *)v10);
                                        uint64_t v38 = *(void *)(v7 + 496);
                                        if (v38)
                                        {
                                          uint64_t v39 = *(void *)(v7 + 496);
                                          do
                                          {
                                            uint64_t v40 = v39;
                                            uint64_t v39 = *(void *)(v39 + 24);
                                          }
                                          while (v39);
                                          *(void *)(v40 + 24) = v10;
                                        }
                                        else
                                        {
                                          uint64_t v38 = v10;
                                        }
                                        uint64_t v28 = 0;
                                        uint64_t v10 = 0;
                                        CFMutableArrayRef Mutable = 0;
                                        *(void *)(v7 + 496) = v38;
                                        ptr = 0;
                                        CFTypeID v46 = 0;
                                        CMBufferQueueRef v50 = 0;
                                        CMBufferQueueRef queueOut = 0;
                                        CMBufferQueueTriggerToken triggerToken = 0;
                                        CMBufferQueueTriggerToken triggerTokenOut = 0;
                                        CMBufferQueueTriggerToken v47 = 0;
                                        CFTypeRef cf = 0;
                                        *a4 = v43;
                                        goto LABEL_34;
                                      }
                                      int v37 = FigCFEqual();
                                      if (a2 == 1986618469 && v37) {
                                        *(unsigned char *)(v10 + 912) = 1;
                                      }
                                      uint64_t v27 = setNegativeCompositionOffsetsInISOFilePolicy(v7, v10);
                                      if (!v27)
                                      {
                                        *(unsigned char *)(v10 + 729) = 1;
                                        goto LABEL_76;
                                      }
                                    }
                                  }
                                }
                              }
                              goto LABEL_33;
                            }
                            long long v35 = (CMTime *)(v7 + 144);
                          }
                          CMTime time = *v35;
                          goto LABEL_66;
                        }
                      }
                    }
                  }
                }
              }
            }
            else
            {
              uint64_t v27 = FigSignalErrorAt();
            }
LABEL_33:
            uint64_t v28 = v27;
LABEL_34:
            FigCEA608DataInspectorRelease((CFAllocatorRef *)ptr);
            editBuilderRelease(v46);
            if (Mutable) {
              CFRelease(Mutable);
            }
            Boolean v29 = queueOut;
            if (queueOut)
            {
              if (triggerTokenOut)
              {
                CMBufferQueueRemoveTrigger(queueOut, triggerTokenOut);
                Boolean v29 = queueOut;
              }
              if (triggerToken)
              {
                CMBufferQueueRemoveTrigger(v29, triggerToken);
                Boolean v29 = queueOut;
              }
              if (v47) {
                CMBufferQueueRemoveTrigger(v29, v47);
              }
              FigBufferQueueRelease();
            }
            if (v50) {
              CFRelease(v50);
            }
            if (cf) {
              CFRelease(cf);
            }
            if (v10) {
              free((void *)v10);
            }
            return v28;
          }
          *(unsigned char *)(v10 + 492) = 1;
          CFAllocatorRef v30 = *v20;
          uint64_t v19 = editBuilderCreate(*v20, &v46);
          if (!v19)
          {
            int v31 = *(_DWORD *)(v7 + 324);
            if (v31 == 5)
            {
              uint64_t v32 = (_OWORD *)(v10 + 508);
              if (*(__CFString **)(v7 + 712) != @"com.apple.m4a-audio")
              {
                *(_DWORD *)(v10 + 768) = 5;
                *(unsigned char *)(v10 + 504) = 0;
                *uint64_t v32 = v41;
                *(void *)(v10 + 524) = v16;
                goto LABEL_61;
              }
              *(_DWORD *)(v10 + 768) = 2;
              *(unsigned char *)(v10 + 504) = 0;
              *uint64_t v32 = v41;
              *(void *)(v10 + 524) = v16;
            }
            else
            {
              *(_DWORD *)(v10 + 768) = v31;
              *(unsigned char *)(v10 + 504) = 0;
              *(_OWORD *)(v10 + 508) = v41;
              *(void *)(v10 + 524) = v16;
              if (v31 != 2)
              {
LABEL_61:
                if (!*(unsigned char *)(v7 + 384)) {
                  goto LABEL_27;
                }
              }
            }
            uint64_t v19 = editBoundaryDetectorCreate(v30, &ptr);
            if (!v19) {
              goto LABEL_27;
            }
          }
LABEL_84:
          uint64_t v28 = v19;
          CFMutableArrayRef Mutable = 0;
          goto LABEL_34;
        }
        uint64_t v19 = MovieTrackSetTimecodeSpecifics((uint64_t)cf, 0);
LABEL_25:
        long long v21 = v41;
        if (!v19) {
          goto LABEL_26;
        }
        goto LABEL_84;
      }
      switch(a2)
      {
        case 1635088502:
LABEL_18:
          *(unsigned char *)(v10 + 352) = 0;
          break;
        case 1668047728:
          uint64_t v19 = MovieTrackSetLayer((uint64_t)cf, -1);
          goto LABEL_25;
        case 1751216244:
          *(_OWORD *)(v10 + 108) = v41;
          *(void *)(v10 + 124) = v16;
          *(_DWORD *)(v10 + 344) = 1;
          *(unsigned char *)(v10 + 492) = 1;
          uint64_t v19 = editBuilderCreate(*v20, &v46);
          if (!v19) {
            goto LABEL_27;
          }
          goto LABEL_84;
      }
    }
LABEL_26:
    *(_OWORD *)(v10 + 108) = v21;
    *(void *)(v10 + 124) = v16;
    *(_DWORD *)(v10 + 344) = 2;
    goto LABEL_27;
  }

  return FigSignalErrorAt();
}

uint64_t figMovieWriter_SetTrackProperty(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3 || (uint64_t v8 = DerivedStorage) == 0 || *(unsigned char *)(DerivedStorage + 335))
  {
LABEL_4:
    return FigSignalErrorAt();
  }
  uint64_t v86 = 0;
  uint64_t result = getTrackInfoForTrackID(DerivedStorage, a2, &v86);
  if (result) {
    return result;
  }
  uint64_t v10 = v86;
  uint64_t v11 = *(void *)(v86 + 736);
  if (CFEqual(@"MediaTimeScale", a3))
  {
    LODWORD(valuePtr) = 0;
    if (a4)
    {
      CFTypeID v12 = CFGetTypeID(a4);
      if (v12 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
        uint64_t result = MediaSampleTimingGeneratorSetMediaTimeScale(*(void *)(v10 + 752), valuePtr);
        if (!result)
        {
          uint64_t result = MovieTrackSetMediaTimeScale(v11, valuePtr);
          if (!result) {
            *(_DWORD *)(v10 + 104) = valuePtr;
          }
        }
        return result;
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"QTLoadSettings", a3))
  {
    if (!a4)
    {
      uint64_t result = 0;
      *(unsigned char *)(v10 + 40) = 0;
      return result;
    }
    CFTypeID v13 = CFGetTypeID(a4);
    if (v13 != CFDictionaryGetTypeID()) {
      goto LABEL_4;
    }
    uint64_t v85 = 0;
    long long v83 = 0u;
    long long v84 = 0u;
    long long valuePtr = 0u;
    uint64_t result = getFigTrackLoadSettingsFromDictionary(a4, (uint64_t)&valuePtr);
    if (!result)
    {
      long long v14 = v83;
      *(_OWORD *)(v10 + 44) = valuePtr;
      *(_OWORD *)(v10 + 60) = v14;
      *(_OWORD *)(v10 + 76) = v84;
      *(void *)(v10 + 92) = v85;
      *(unsigned char *)(v10 + 40) = 1;
    }
    return result;
  }
  if (CFEqual(@"MediaDataPrecedence", a3))
  {
    if (!a4) {
      goto LABEL_4;
    }
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID != CFGetTypeID(a4)) {
      goto LABEL_4;
    }
    LODWORD(valuePtr) = 0;
    CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
    if ((valuePtr & 0x80000000) == 0)
    {
      uint64_t result = 0;
      *(_DWORD *)(v10 + 100) = valuePtr;
      return result;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"InterleavingAdvance", a3))
  {
    if (!a4) {
      goto LABEL_4;
    }
    long long valuePtr = 0uLL;
    *(void *)&long long v83 = 0;
    CMTimeMakeFromDictionary((CMTime *)&valuePtr, (CFDictionaryRef)a4);
    if ((BYTE12(valuePtr) & 0x1D) == 1)
    {
      uint64_t result = 0;
      *(_OWORD *)(v10 + 108) = valuePtr;
      *(void *)(v10 + 124) = v83;
      return result;
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"InterleavingOrder", a3))
  {
    if (a4)
    {
      CFTypeID v16 = CFGetTypeID(a4);
      if (v16 == CFNumberGetTypeID())
      {
        int SInt32 = FigCFNumberGetSInt32();
        uint64_t result = 0;
        *(_DWORD *)(v10 + 132) = SInt32;
        return result;
      }
    }
LABEL_87:
    FigSignalErrorAt();
    return 0;
  }
  if (CFEqual(@"PreferredChunkAlignment", a3))
  {
    LODWORD(valuePtr) = 0;
    if (a4)
    {
      CFTypeID v18 = CFGetTypeID(a4);
      if (v18 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
        return MovieSampleDataWriterTrackSetPreferredChunkAlignment(*(void *)(v8 + 744), *(void *)(v10 + 760), valuePtr);
      }
    }
    goto LABEL_87;
  }
  if (CFEqual(@"PreferredChunkSize", a3))
  {
    LODWORD(valuePtr) = 0;
    if (a4)
    {
      CFTypeID v19 = CFGetTypeID(a4);
      if (v19 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
        return MovieSampleDataWriterTrackSetPreferredChunkSize(*(void *)(v8 + 744), *(void *)(v10 + 760), valuePtr);
      }
    }
    goto LABEL_87;
  }
  if (CFEqual(@"PreferredChunkDuration", a3))
  {
    long long valuePtr = *MEMORY[0x1E4F1F9F8];
    *(void *)&long long v83 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    if (a4)
    {
      CFTypeID v20 = CFGetTypeID(a4);
      if (v20 == CFDictionaryGetTypeID())
      {
        CMTimeMakeFromDictionary((CMTime *)&valuePtr, (CFDictionaryRef)a4);
        uint64_t v21 = *(void *)(v8 + 744);
        uint64_t v22 = *(void *)(v10 + 760);
        *(_OWORD *)&v81.CMTimeValue value = valuePtr;
        v81.CMTimeEpoch epoch = v83;
        return MovieSampleDataWriterTrackSetPreferredChunkDuration(v21, v22, &v81);
      }
    }
    goto LABEL_87;
  }
  if (CFEqual(@"AlternateGroupID", a3))
  {
    LOWORD(valuePtr) = 0;
    if (a4)
    {
      CFTypeID v23 = CFGetTypeID(a4);
      if (v23 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
        return MovieTrackSetAlternateGroupID(v11, valuePtr);
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"DefaultAlternateGroupID", a3))
  {
    LOWORD(valuePtr) = 0;
    if (a4)
    {
      CFTypeID v24 = CFGetTypeID(a4);
      if (v24 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
        return MovieTrackSetDefaultAlternateGroupID(v11, valuePtr);
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"ProvisionalAlternateGroupID", a3))
  {
    LOWORD(valuePtr) = 0;
    if (a4)
    {
      CFTypeID v25 = CFGetTypeID(a4);
      if (v25 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
        return MovieTrackSetProvisionalAlternateGroupID(v11, valuePtr);
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"TrackVolume", a3))
  {
    LODWORD(valuePtr) = 0;
    if (a4)
    {
      CFTypeID v26 = CFGetTypeID(a4);
      if (v26 == CFNumberGetTypeID())
      {
        CFNumberGetValue((CFNumberRef)a4, kCFNumberFloat32Type, &valuePtr);
        return MovieTrackSetVolume(v11, *(float *)&valuePtr);
      }
    }
    return FigSignalErrorAt();
  }
  if (CFEqual(@"EditList", a3))
  {
    if (a4)
    {
      CFTypeID v27 = CFGetTypeID(a4);
      if (v27 != CFArrayGetTypeID()) {
        goto LABEL_4;
      }
      uint64_t v28 = *(const void **)(v10 + 400);
      *(void *)(v10 + 400) = a4;
      CFRetain(a4);
    }
    else
    {
      uint64_t v28 = *(const void **)(v10 + 400);
      *(void *)(v10 + 400) = 0;
    }
    if (v28) {
      CFRelease(v28);
    }
    if (*(unsigned char *)(v8 + 329))
    {
      uint64_t result = 0;
      *(unsigned char *)(v10 + 353) = 1;
      return result;
    }
    return 0;
  }
  if (CFEqual(@"LanguageTag", a3))
  {
    if (a4)
    {
      CFTypeID v29 = CFGetTypeID(a4);
      if (v29 != CFStringGetTypeID()) {
        goto LABEL_4;
      }
      CFAllocatorRef v30 = *(const void **)(v10 + 408);
      *(void *)(v10 + 408) = a4;
      goto LABEL_79;
    }
    CFAllocatorRef v30 = *(const void **)(v10 + 408);
    *(void *)(v10 + 408) = 0;
LABEL_90:
    if (v30) {
      CFRelease(v30);
    }
    return 0;
  }
  if (CFEqual(@"ExtendedLanguageTag", a3))
  {
    if (!a4)
    {
      CFAllocatorRef v30 = *(const void **)(v10 + 416);
      *(void *)(v10 + 416) = 0;
      goto LABEL_90;
    }
    CFTypeID v31 = CFGetTypeID(a4);
    if (v31 != CFStringGetTypeID()) {
      goto LABEL_4;
    }
    CFAllocatorRef v30 = *(const void **)(v10 + 416);
    *(void *)(v10 + 416) = a4;
    goto LABEL_79;
  }
  if (CFEqual(@"EnableTrack", a3))
  {
    if (a4)
    {
      CFTypeID v32 = CFGetTypeID(a4);
      if (v32 == CFBooleanGetTypeID())
      {
        Boolean Value = CFBooleanGetValue((CFBooleanRef)a4);
        return MovieTrackSetEnabled(v11, Value);
      }
    }
    goto LABEL_87;
  }
  if (CFEqual(@"InterleaveTrack", a3))
  {
    if (a4)
    {
      CFTypeID v34 = CFBooleanGetTypeID();
      if (v34 == CFGetTypeID(a4))
      {
        Boolean v35 = CFBooleanGetValue((CFBooleanRef)a4);
        uint64_t result = 0;
        *(unsigned char *)(v10 + 352) = v35;
        return result;
      }
    }
    goto LABEL_4;
  }
  if (CFEqual(@"TrackDimensions", a3))
  {
    if (a4)
    {
      CFTypeID v36 = CFGetTypeID(a4);
      if (v36 != CFDictionaryGetTypeID()) {
        goto LABEL_4;
      }
      long long valuePtr = 0uLL;
      uint64_t result = getDimensionsFromDictionary(a4, &valuePtr);
      if (result) {
        return result;
      }
      float v37 = *(double *)&valuePtr;
      float v38 = *((double *)&valuePtr + 1);
      uint64_t result = MovieTrackSetTrackDimensions(v11, v37, v38);
      if (result) {
        return result;
      }
      char v39 = 0;
    }
    else
    {
      char v39 = 1;
    }
    uint64_t result = 0;
    *(unsigned char *)(v10 + 32) = v39;
    return result;
  }
  if (CFEqual(@"CleanApertureDimensions", a3))
  {
    if (a4)
    {
      CFTypeID v40 = CFGetTypeID(a4);
      if (v40 == CFDictionaryGetTypeID())
      {
        long long valuePtr = 0uLL;
        uint64_t result = getDimensionsFromDictionary(a4, &valuePtr);
        if (result) {
          return result;
        }
        float v41 = *(double *)&valuePtr;
        float v42 = *((double *)&valuePtr + 1);
        uint64_t result = MovieTrackSetCleanApertureDimensions(v11, v41, v42);
        if (result) {
          return result;
        }
        char v43 = 0;
        char v44 = 1;
      }
      else
      {
        if (!CFEqual(@"NoDimensions", a4)) {
          goto LABEL_4;
        }
        char v43 = 0;
        char v44 = 0;
      }
    }
    else
    {
      char v44 = 0;
      char v43 = 1;
    }
    uint64_t result = 0;
    *(unsigned char *)(v10 + 33) = v43;
    *(unsigned char *)(v10 + 34) = v44;
    return result;
  }
  if (CFEqual(@"ProductionApertureDimensions", a3))
  {
    if (a4)
    {
      CFTypeID v45 = CFGetTypeID(a4);
      if (v45 == CFDictionaryGetTypeID())
      {
        long long valuePtr = 0uLL;
        uint64_t result = getDimensionsFromDictionary(a4, &valuePtr);
        if (result) {
          return result;
        }
        float v46 = *(double *)&valuePtr;
        float v47 = *((double *)&valuePtr + 1);
        uint64_t result = MovieTrackSetProductionApertureDimensions(v11, v46, v47);
        if (result) {
          return result;
        }
        char v48 = 0;
        char v49 = 1;
      }
      else
      {
        if (!CFEqual(@"NoDimensions", a4)) {
          goto LABEL_4;
        }
        char v48 = 0;
        char v49 = 0;
      }
    }
    else
    {
      char v49 = 0;
      char v48 = 1;
    }
    uint64_t result = 0;
    *(unsigned char *)(v10 + 35) = v48;
    *(unsigned char *)(v10 + 36) = v49;
    return result;
  }
  if (CFEqual(@"EncodedPixelsDimensions", a3))
  {
    if (a4)
    {
      CFTypeID v50 = CFGetTypeID(a4);
      if (v50 == CFDictionaryGetTypeID())
      {
        long long valuePtr = 0uLL;
        uint64_t result = getDimensionsFromDictionary(a4, &valuePtr);
        if (result) {
          return result;
        }
        float v51 = *(double *)&valuePtr;
        float v52 = *((double *)&valuePtr + 1);
        uint64_t result = MovieTrackSetEncodedPixelsDimensions(v11, v51, v52);
        if (result) {
          return result;
        }
        char v53 = 0;
        char v54 = 1;
      }
      else
      {
        if (!CFEqual(@"NoDimensions", a4)) {
          goto LABEL_4;
        }
        char v53 = 0;
        char v54 = 0;
      }
    }
    else
    {
      char v54 = 0;
      char v53 = 1;
    }
    uint64_t result = 0;
    *(unsigned char *)(v10 + 37) = v53;
    *(unsigned char *)(v10 + 38) = v54;
    return result;
  }
  if (!CFEqual(@"TrackMatrix", a3))
  {
    if (CFEqual(@"FormatDescriptionArray", a3))
    {
      if (a4)
      {
        CFTypeID v56 = CFGetTypeID(a4);
        if (v56 != CFArrayGetTypeID()) {
          goto LABEL_4;
        }
        MovieTrackRemoveAllSampleDescriptions(v11);
        CFIndex Count = CFArrayGetCount((CFArrayRef)a4);
        if (Count >= 1)
        {
          CFIndex v58 = Count;
          CFIndex v59 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a4, v59);
            uint64_t result = MovieTrackFindOrAddSampleDescription(*(void *)(v10 + 736), ValueAtIndex, 0, 0);
            if (result) {
              break;
            }
            if (v58 == ++v59)
            {
              uint64_t result = setDefaultTrackDimensionsIfNecessary(v10);
              if (!result) {
                return 0;
              }
              return result;
            }
          }
          return result;
        }
      }
      else
      {
        MovieTrackRemoveAllSampleDescriptions(v11);
      }
      return 0;
    }
    if (CFEqual(@"ReplacementFormatDescriptionArray", a3))
    {
      if (!a4) {
        goto LABEL_4;
      }
      CFTypeID v61 = CFGetTypeID(a4);
      if (v61 != CFArrayGetTypeID()) {
        goto LABEL_4;
      }
      uint64_t result = MovieTrackReplaceFormatDescriptionArray(v11, (CFArrayRef)a4);
      if (!result)
      {
        return setDefaultTrackDimensionsIfNecessary(v10);
      }
      return result;
    }
    if (CFEqual(@"TrackMetadataToTransfer", a3))
    {
      if (a4)
      {
        CFTypeID v62 = CFDictionaryGetTypeID();
        if (v62 != CFGetTypeID(a4))
        {
          CFTypeID v63 = CFArrayGetTypeID();
          if (v63 != CFGetTypeID(a4)) {
            return 0;
          }
        }
        CFStringRef v64 = *(const void **)(v10 + 560);
        *(void *)(v10 + 560) = a4;
        CFRetain(a4);
      }
      else
      {
        CFStringRef v64 = *(const void **)(v10 + 560);
        *(void *)(v10 + 560) = 0;
      }
      if (v64) {
        CFRelease(v64);
      }
      uint64_t result = *(void *)(v10 + 568);
      if (result)
      {
        CFRelease((CFTypeRef)result);
        uint64_t result = 0;
        *(void *)(v10 + 568) = 0;
      }
      return result;
    }
    if (CFEqual(@"TrackMetadataToWrite", a3))
    {
      if (a4)
      {
        CFTypeID v65 = CFDictionaryGetTypeID();
        if (v65 != CFGetTypeID(a4))
        {
          CFTypeID v66 = CFArrayGetTypeID();
          if (v66 != CFGetTypeID(a4)) {
            return 0;
          }
        }
        CFURLRef v67 = *(const void **)(v10 + 568);
        *(void *)(v10 + 568) = a4;
        CFRetain(a4);
      }
      else
      {
        CFURLRef v67 = *(const void **)(v10 + 568);
        *(void *)(v10 + 568) = 0;
      }
      if (v67) {
        CFRelease(v67);
      }
      uint64_t result = *(void *)(v10 + 560);
      if (result)
      {
        CFRelease((CFTypeRef)result);
        uint64_t result = 0;
        *(void *)(v10 + 560) = 0;
      }
      return result;
    }
    if (CFEqual(@"TrackMetadataWhitelist", a3))
    {
      if (!a4)
      {
        CFAllocatorRef v30 = *(const void **)(v10 + 576);
        *(void *)(v10 + 576) = 0;
        goto LABEL_90;
      }
      CFTypeID v68 = CFDictionaryGetTypeID();
      if (v68 != CFGetTypeID(a4)) {
        goto LABEL_4;
      }
      CFAllocatorRef v30 = *(const void **)(v10 + 576);
      *(void *)(v10 + 576) = a4;
    }
    else
    {
      if (CFEqual(@"ExcludeFromAutoSelection", a3))
      {
        if (!a4) {
          goto LABEL_4;
        }
        CFTypeID v69 = CFGetTypeID(a4);
        if (v69 != CFBooleanGetTypeID()) {
          goto LABEL_4;
        }
        Boolean v70 = CFBooleanGetValue((CFBooleanRef)a4);
        return MovieTrackSetExcludeFromAutoSelection(v11, v70);
      }
      if (CFEqual(@"WriteCompactSampleSizeIfPossible", a3))
      {
        if (a4)
        {
          CFTypeID v71 = CFGetTypeID(a4);
          if (v71 == CFBooleanGetTypeID())
          {
            Boolean v72 = CFBooleanGetValue((CFBooleanRef)a4);
            uint64_t result = 0;
            *(unsigned char *)(v10 + 584) = v72;
            return result;
          }
        }
        goto LABEL_4;
      }
      if (CFEqual(@"WriteQTSoundSampleTableLieIfPossible", a3))
      {
        if (a4)
        {
          CFTypeID v73 = CFGetTypeID(a4);
          if (v73 == CFBooleanGetTypeID())
          {
            Boolean v74 = CFBooleanGetValue((CFBooleanRef)a4);
            uint64_t result = 0;
            *(unsigned char *)(v10 + 585) = v74;
            return result;
          }
        }
        goto LABEL_4;
      }
      if (CFEqual(@"Layer", a3))
      {
        LOWORD(valuePtr) = 0;
        if (a4)
        {
          CFTypeID v75 = CFGetTypeID(a4);
          if (v75 == CFNumberGetTypeID())
          {
            CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
            return MovieTrackSetLayer(v11, valuePtr);
          }
        }
        return FigSignalErrorAt();
      }
      if (!CFEqual(@"SampleReferenceBaseURL", a3))
      {
        if (CFEqual(@"NegativeCompositionOffsetsInISOFilePolicy", a3))
        {
          if (!a4) {
            goto LABEL_4;
          }
          CFTypeID v77 = CFGetTypeID(a4);
          if (v77 != CFStringGetTypeID()) {
            goto LABEL_4;
          }
          return setNegativeCompositionOffsetsInISOFilePolicy(v8, v10);
        }
        else if (CFEqual(@"HEVCSyncSampleNALUnitTypes", a3))
        {
          uint64_t result = MovieTrackRemoveSampleGroupInfoForGroupingType(*(void *)(v10 + 736), 1937337955);
          if (a4 && !result)
          {
            uint64_t v78 = *(void **)(v10 + 736);
            return MovieTrackAppendSyncSampleCombinations(v78, (const __CFArray *)a4);
          }
        }
        else if (CFEqual(@"HEVCTemporalLevelInfoCombinations", a3))
        {
          uint64_t result = MovieTrackRemoveSampleGroupInfoForGroupingType(*(void *)(v10 + 736), 1953719148);
          if (a4 && !result)
          {
            int v79 = *(const void **)(v10 + 736);
            return MovieTrackAppendTemporalLevelCombinations(v79, (const __CFArray *)a4);
          }
        }
        else if (CFEqual(@"SampleGroupDescriptions", a3))
        {
          uint64_t result = MovieTrackRemoveAllSampleGroups(*(void *)(v10 + 736));
          if (a4 && !result)
          {
            int v80 = *(void **)(v10 + 736);
            return MovieTrackAppendSampleGroupDescriptions(v80, (const __CFDictionary *)a4);
          }
        }
        else
        {
          return 4294954666;
        }
        return result;
      }
      if (!a4)
      {
        CFAllocatorRef v30 = *(const void **)(v10 + 456);
        *(void *)(v10 + 456) = 0;
        goto LABEL_90;
      }
      CFTypeID v76 = CFGetTypeID(a4);
      if (v76 != CFURLGetTypeID()) {
        goto LABEL_4;
      }
      CFAllocatorRef v30 = *(const void **)(v10 + 456);
      *(void *)(v10 + 456) = a4;
    }
LABEL_79:
    CFRetain(a4);
    goto LABEL_90;
  }
  LODWORD(v84) = 0;
  long long valuePtr = 0u;
  long long v83 = 0u;
  if (!a4) {
    return FigSignalErrorAt();
  }
  CFTypeID v55 = CFGetTypeID(a4);
  if (v55 != CFArrayGetTypeID()) {
    return FigSignalErrorAt();
  }
  uint64_t result = getFigMatrixFromArray((const __CFArray *)a4, (uint64_t)&valuePtr);
  if (!result) {
    return MovieTrackSetTrackMatrix(v11, (uint64_t)&valuePtr);
  }
  return result;
}

uint64_t getTrackInfoArrayIndexFromFigTrackID(uint64_t a1, int a2, void *a3)
{
  CFArrayRef v3 = *(const __CFArray **)(a1 + 40);
  if (!v3
    || ((Count = CFArrayGetCount(v3), Count >= a2) ? (BOOL v7 = a2 < 1) : (BOOL v7 = 1), !v7 ? (v8 = Count == 0) : (v8 = 1), v8))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a3 = a2 - 1;
    return 0;
  }
}

uint64_t getFigMatrixFromArray(const __CFArray *a1, uint64_t a2)
{
  int v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  if (a1)
  {
    CFTypeID TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(a1) && CFArrayGetCount(a1) == 9)
    {
      uint64_t v5 = 0;
      uint64_t v6 = 0;
      BOOL v7 = &v14;
LABEL_5:
      uint64_t v8 = 0;
      CFTypeID v9 = (char *)v7;
      while (1)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v5 + v8);
        CFTypeID v11 = CFNumberGetTypeID();
        if (v11 != CFGetTypeID(ValueAtIndex)) {
          break;
        }
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberFloat32Type, v9);
        ++v8;
        v9 += 4;
        if (v8 == 3)
        {
          ++v6;
          v5 += 3;
          BOOL v7 = (long long *)((char *)v7 + 12);
          if (v6 != 3) {
            goto LABEL_5;
          }
          uint64_t result = 0;
          long long v13 = v15;
          *(_OWORD *)a2 = v14;
          *(_OWORD *)(a2 + 16) = v13;
          *(_DWORD *)(a2 + 32) = v16;
          return result;
        }
      }
    }
  }
  return 4294954516;
}

uint64_t FigAudioCompressionOptionsGetPreset(const void *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  MEMORY[0x19970EE10](&gCreatePresetGetterDictionaryOnce, createPresetGetterDictionaryOnce);
  if (!a2) {
    a2 = &v16;
  }
  if (!a3) {
    a3 = &v15;
  }
  if (!a4) {
    a4 = &v14;
  }
  if (!a5) {
    a5 = &v13;
  }
  if (a1
    && gPresetGetterDictionary
    && (Boolean Value = CFDictionaryGetValue((CFDictionaryRef)gPresetGetterDictionary, a1)) != 0
    && (CFTypeID v11 = (uint64_t (*)(uint64_t *, uint64_t *, uint64_t *, uint64_t *))Value[1]) != 0)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    return v11(a2, a3, a4, a5);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFDictionaryRef createPresetGetterDictionaryOnce()
{
  uint64_t v0 = 0;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)CMTime keys = 0u;
  uint64_t v4 = 0;
  unsigned int v1 = (void ***)&createPresetGetterDictionaryOnce_presetGetterPairs;
  memset(v3, 0, sizeof(v3));
  do
  {
    keys[v0] = **v1;
    *(void *)((char *)v3 + v0 * 8) = v1;
    ++v0;
    v1 += 2;
  }
  while (v0 != 27);
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)v3, 27, MEMORY[0x1E4F1D530], 0);
  gPresetGetterDictionarCGFloat y = (uint64_t)result;
  return result;
}

uint64_t getpreset_AAC(void *a1, void *a2, void *a3, void *a4)
{
  *a1 = &getpreset_AAC_asbd;
  *a2 = 0;
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t FigMediaProcessorCreateForVideoCompressionWithFormatWriter(const __CFAllocator *a1, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const void *a7, void *a8, long long *a9, long long *a10, const void *a11, unsigned int a12, uint64_t a13, uint64_t a14, const void *a15, int a16, uint64_t *a17)
{
  long long v17 = *a9;
  uint64_t v26 = *((void *)a9 + 2);
  long long v18 = a10[1];
  v24[0] = *a10;
  v24[1] = v18;
  v24[2] = a10[2];
  long long v25 = v17;
  long long v22 = *(_OWORD *)a13;
  uint64_t v23 = *(void *)(a13 + 16);
  long long v20 = *(_OWORD *)a14;
  uint64_t v21 = *(void *)(a14 + 16);
  return FigMediaProcessorCreateForVideoCompressionWithFormatWriter2(a1, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v25, v24, a11, a12, &v22, 0, &v20, 0, a15, a16, a17);
}

uint64_t FigSampleBufferProcessorCreateWithVTCompressionSession(const __CFAllocator *a1, int32_t a2, int32_t a3, CMVideoCodecType a4, const __CFDictionary *a5, const __CFDictionary *a6, const __CFAllocator *Allocator, int a8, void *a9)
{
  int valuePtr = a8;
  if (a9)
  {
    CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    FigSampleBufferProcessorGetClassID();
    uint64_t v17 = CMDerivedObjectCreate();
    if (!v17)
    {
      CFDictionaryRef v24 = a6;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (!Allocator || v16 == Allocator)
      {
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v16, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFStringRef v20 = CFStringCreateWithFormat(v16, 0, @"SampleBufferProcessor-VideoCompression-%p", 0);
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21788], v20);
        *(void *)uint64_t DerivedStorage = CMMemoryPoolCreate(Mutable);
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (v20) {
          CFRelease(v20);
        }
        Allocator = CMMemoryPoolGetAllocator(*(CMMemoryPoolRef *)DerivedStorage);
      }
      uint64_t v21 = VTCompressionSessionCreate(a1, a2, a3, a4, a5, v24, Allocator, (VTCompressionOutputCallback)sbp_vtcs_outputFrame, 0, (VTCompressionSessionRef *)(DerivedStorage + 16));
      if (v21)
      {
        return v21;
      }
      else
      {
        *(_DWORD *)(DerivedStorage + 8) = a2;
        *(_DWORD *)(DerivedStorage + 12) = a3;
        CFNumberRef v22 = CFNumberCreate(v16, kCFNumberSInt32Type, &valuePtr);
        VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 16), (CFStringRef)*MEMORY[0x1E4F44900], v22);
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterAddWeakListener();
        *a9 = 0;
        if (v22)
        {
          CFRelease(v22);
          return 0;
        }
        else
        {
          return 0;
        }
      }
    }
    return v17;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigSampleBufferConsumerCreateForFormatWriter(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  if (a1 && a7)
  {
    uint64_t v14 = *MEMORY[0x1E4F1CF80];
    FigSampleBufferConsumerGetClassID();
    uint64_t v15 = CMDerivedObjectCreate();
    if (!v15)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)uint64_t DerivedStorage = a1;
      uint64_t v18 = *(void *)(a3 + 16);
      *(_OWORD *)(DerivedStorage + 24) = *(_OWORD *)a3;
      *(void *)(DerivedStorage + 40) = v18;
      *(void *)(DerivedStorage + 48) = a4;
      uint64_t v19 = *(void *)(a5 + 16);
      *(_OWORD *)(DerivedStorage + 56) = *(_OWORD *)a5;
      *(void *)(DerivedStorage + 72) = v19;
      *(void *)(DerivedStorage + 80) = a6;
      CFRetain(a1);
      *(_DWORD *)(DerivedStorage + 8) = a2;
      if (*(unsigned char *)(DerivedStorage + 36) & 1) != 0 && (*(unsigned char *)(DerivedStorage + 68))
      {
        uint64_t v22 = *(void *)DerivedStorage;
        uint64_t v20 = DerivedStorage + 16;
        uint64_t v21 = v22;
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        long long v25 = *(void (**)(uint64_t, uint64_t, __CFString *, uint64_t, uint64_t))(v24 + 16);
        if (v25) {
          v25(v21, a2, @"SourceSampleBufferQueue", v14, v20);
        }
      }
      uint64_t v15 = 0;
      *a7 = 0;
    }
    return v15;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMediaProcessorCreate(uint64_t a1, const void *a2, const void *a3, const void *a4, const void *a5, uint64_t *a6)
{
  if (a2)
  {
    if (a3)
    {
      if (a4)
      {
        if (a5)
        {
          if (a6)
          {
            MEMORY[0x19970EE10](&sRegisterMediaProcessorTypeOnce, RegisterFigMediaProcessorType);
            uint64_t Instance = _CFRuntimeCreateInstance();
            if (Instance)
            {
              uint64_t v12 = Instance;
              *(void *)(Instance + 24) = a2;
              CFRetain(a2);
              *(void *)(v12 + 32) = a3;
              CFRetain(a3);
              *(void *)(v12 + 40) = a4;
              CFRetain(a4);
              *(void *)(v12 + 64) = a5;
              CFRetain(a5);
              uint64_t FigBaseObject = FigActivitySchedulerGetFigBaseObject(*(void *)(v12 + 64));
              uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v14) {
                uint64_t v15 = v14;
              }
              else {
                uint64_t v15 = 0;
              }
              uint64_t v17 = *(void (**)(uint64_t, __CFString *, void))(v15 + 56);
              if (v17) {
                v17(FigBaseObject, @"ThrottleForBackground", *MEMORY[0x1E4F1CFC8]);
              }
              uint64_t v18 = *(void *)(v12 + 24);
              uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v19) {
                uint64_t v20 = v19;
              }
              else {
                uint64_t v20 = 0;
              }
              uint64_t v21 = *(uint64_t (**)(uint64_t, void, uint64_t))(v20 + 8);
              if (v21)
              {
                uint64_t v22 = v21(v18, mediaprocessor_OutputSampleBuffer, v12);
                if (v22) {
                  goto LABEL_39;
                }
                uint64_t v23 = *(void *)(v12 + 64);
                uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v24) {
                  uint64_t v25 = v24;
                }
                else {
                  uint64_t v25 = 0;
                }
                uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t (*)(uint64_t), uint64_t))(v25 + 8);
                if (v26)
                {
                  uint64_t v22 = v26(v23, mediaprocessor_ProcessUntilHighWaterMet, v12);
                  if (v22) {
                    goto LABEL_39;
                  }
                  *(unsigned char *)(v12 + 72) = 1;
                  uint64_t v27 = *(void *)(v12 + 40);
                  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v29 = v28 ? v28 : 0;
                  CFAllocatorRef v30 = *(uint64_t (**)(uint64_t, uint64_t (*)(), uint64_t, uint64_t))(v29 + 32);
                  if (v30)
                  {
                    uint64_t v22 = v30(v27, mediaprocessor_OutputBelowLowWater, v12, v12 + 48);
                    if (!v22)
                    {
                      *(unsigned char *)(v12 + 56) = 1;
                      CMNotificationCenterGetDefaultLocalCenter();
                      uint64_t v22 = CMNotificationCenterAddListener();
                      if (!v22)
                      {
                        CMNotificationCenterGetDefaultLocalCenter();
                        uint64_t v22 = CMNotificationCenterAddListener();
                        if (!v22)
                        {
                          CMNotificationCenterGetDefaultLocalCenter();
                          uint64_t v22 = CMNotificationCenterAddListener();
                          if (!v22)
                          {
                            CMNotificationCenterGetDefaultLocalCenter();
                            uint64_t v31 = CMNotificationCenterAddListener();
                            if (!v31)
                            {
                              CMNotificationCenterGetDefaultLocalCenter();
                              FigNotificationCenterAddWeakListener();
                              *a6 = v12;
                              return v31;
                            }
LABEL_37:
                            CFRelease((CFTypeRef)v12);
                            return v31;
                          }
                        }
                      }
                    }
LABEL_39:
                    uint64_t v31 = v22;
                    goto LABEL_37;
                  }
                }
              }
              uint64_t v31 = 4294954514;
              goto LABEL_37;
            }
          }
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t RegisterFigMediaProcessorType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigMediaProcessorCFTypeID TypeID = result;
  return result;
}

uint64_t mediaprocessor_Init(_OWORD *a1)
{
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  uint64_t result = FigReentrantMutexCreate();
  *((void *)a1 + 10) = result;
  return result;
}

uint64_t sbp_vtcs_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 24) = a2;
  *(void *)(DerivedStorage + 40) = a3;
  return 0;
}

uint64_t otfw_installLowWaterTrigger(void *a1, uint64_t a2, uint64_t a3, CMBufferQueueTriggerToken *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t result = DerivedStorage[2];
  if (result)
  {
    DerivedStorage[11] = a2;
    DerivedStorage[12] = a3;
    long long v10 = DerivedStorage + 7;
    long long v11 = (CMBufferQueueTriggerToken *)(DerivedStorage + 13);
    if (DerivedStorage[10])
    {
      *(_OWORD *)&v13.CMTimeValue value = *v10;
      v13.CMTimeEpoch epoch = DerivedStorage[9];
      uint64_t result = FigBufferQueueInstallTriggerWithTimeAndIntegerThresholds();
    }
    else
    {
      *(_OWORD *)&v13.CMTimeValue value = *v10;
      v13.CMTimeEpoch epoch = DerivedStorage[9];
      uint64_t result = CMBufferQueueInstallTrigger((CMBufferQueueRef)result, (CMBufferQueueTriggerCallback)otfw_LowWater, a1, 2, &v13, v11);
    }
    CMBufferQueueTriggerToken v12 = *v11;
  }
  else
  {
    CMBufferQueueTriggerToken v12 = 0;
  }
  *a4 = v12;
  return result;
}

uint64_t FigMediaProcessorGetVTCompressionSession(uint64_t a1)
{
  FigMediaProcessorGetSampleBufferProcessor(a1);

  return FigSampleBufferProcessorGetVTCompressionSession();
}

uint64_t FigMediaProcessorGetSampleBufferProcessor(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 16)) {
    return *(void *)(a1 + 24);
  }
  FigSignalErrorAt();
  return 0;
}

uint64_t FigSampleBufferProcessorGetVTCompressionSession()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    if (*(unsigned char *)(result + 39)) {
      return 0;
    }
    else {
      return *(void *)(result + 16);
    }
  }
  return result;
}

uint64_t FigMediaProcessorCreateForAudioCompressionWithFormatWriter(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, uint64_t a3, size_t a4, AudioChannelLayout *a5, const __CFDictionary *a6, const void *a7, const void *a8, unsigned int a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, const void *a14, int a15, uint64_t *a16)
{
  long long v19 = *(_OWORD *)a10;
  uint64_t v20 = *(void *)(a10 + 16);
  long long v17 = *(_OWORD *)a12;
  uint64_t v18 = *(void *)(a12 + 16);
  return FigMediaProcessorCreateForAudioCompressionCommon(a1, a2, a3, a4, a5, a6, a7, a8, a9, 0, &v19, a11, &v17, a13, a14, a15, a16);
}

uint64_t FigSampleBufferProcessorCreateWithAudioCompression(const __CFAllocator *a1, const opaqueCMFormatDescription *a2, uint64_t a3, size_t a4, AudioChannelLayout *a5, const __CFDictionary *a6, const void *a7, void *a8)
{
  CMTime values = 0;
  CFTypeRef v105 = 0;
  *(_WORD *)outWritable = 0;
  uint64_t v99 = 0;
  int v97 = 0;
  char v96 = 0;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  __int16 valuePtr = 0;
  size_t sizeOut = 0;
  int v90 = 75;
  int inPropertyData = 0;
  int v88 = 3;
  int v89 = 3;
  if (a8)
  {
    memset(&inSourceFormat, 0, sizeof(inSourceFormat));
    memset(&outPropertyData, 0, sizeof(outPropertyData));
    UInt32 ioPropertyDataSize = 0;
    *(void *)&inClassDescriptions.mType = 0;
    inClassDescriptions.mManufacturer = 0;
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    FigSampleBufferProcessorGetClassID();
    uint64_t v16 = CMDerivedObjectCreate();
    if (v16)
    {
LABEL_60:
      uint64_t v30 = v16;
LABEL_61:
      uint64_t v27 = 0;
      goto LABEL_62;
    }
    CFTypeRef cf = a7;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!a2) {
      return FigSignalErrorAt();
    }
    uint64_t v18 = DerivedStorage;
    CMTimeMakeWithSeconds(&v87, 0.5, 1000);
    *(CMTime *)(v18 + 304) = v87;
    uint64_t v19 = MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v18 + 232) = *MEMORY[0x1E4F1F9F8];
    *(void *)(v18 + 248) = *(void *)(v19 + 16);
    uint64_t v20 = (const opaqueCMFormatDescription *)FigFormatDescriptionRetain();
    *(void *)(v18 + 24) = v20;
    StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(v20);
    if (!StreamBasicDescription)
    {
      uint64_t v27 = 0;
      uint64_t v30 = 4294954586;
      goto LABEL_62;
    }
    if (StreamBasicDescription->mFormatID != 1819304813) {
      goto LABEL_59;
    }
    long long v22 = *(_OWORD *)&StreamBasicDescription->mSampleRate;
    long long v23 = *(_OWORD *)&StreamBasicDescription->mBytesPerPacket;
    *(void *)&inSourceFormat.mBitsPerChannel = *(void *)&StreamBasicDescription->mBitsPerChannel;
    *(_OWORD *)&inSourceFormat.mSampleFloat64 Rate = v22;
    *(_OWORD *)&inSourceFormat.mBytesPerPacket = v23;
    long long v24 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&outPropertyData.mSampleFloat64 Rate = *(_OWORD *)a3;
    *(_OWORD *)&outPropertyData.mBytesPerPacket = v24;
    *(void *)&outPropertyData.mBitsPerChannel = *(void *)(a3 + 32);
    *(void *)uint64_t v82 = StreamBasicDescription;
    if (outPropertyData.mFormatID && *(void *)&outPropertyData.mFormatID != 1819304813)
    {
      if (!outPropertyData.mChannelsPerFrame) {
        facPickBestDestinationNumberOfChannels((uint64_t)StreamBasicDescription, &outPropertyData);
      }
      UInt32 ioPropertyDataSize = 40;
      if (AudioFormatGetProperty(0x666D7469u, 0, 0, &ioPropertyDataSize, &outPropertyData)) {
        goto LABEL_59;
      }
    }
    else
    {
      *(unsigned char *)(v18 + 17) = 1;
    }
    ChannelLayout = CMAudioFormatDescriptionGetChannelLayout(a2, &sizeOut);
    uint64_t v26 = *(_DWORD **)v82;
    if (*(_DWORD *)(*(void *)v82 + 28) != outPropertyData.mChannelsPerFrame)
    {
      FigCFDictionaryGetBooleanIfPresent();
      uint64_t v26 = *(_DWORD **)v82;
    }
    if (*(unsigned char *)(v18 + 17))
    {
      *(void *)(v18 + 32) = FigFormatDescriptionRetain();
      uint64_t v27 = 0;
      *(unsigned char *)(v18 + 164) = FigAudioFormatDescriptionEmploysDependentPackets();
      goto LABEL_13;
    }
    if (outWritable[1])
    {
      CMTime v81 = (AudioChannelLayout *)ChannelLayout;
    }
    else
    {
      UInt32 v39 = v26[7];
      if (v39 == 2 && outPropertyData.mChannelsPerFrame == 1)
      {
        int v40 = v26[3];
        if ((v40 & 4) != 0)
        {
          int v41 = v26[8];
          if (v41 != 32 && v41 != 16) {
            goto LABEL_59;
          }
        }
        if (v40)
        {
          if ((v40 & 0x20) != 0 || v26[8] != 32) {
            goto LABEL_59;
          }
        }
        else if ((v40 & 0x20) != 0)
        {
          goto LABEL_59;
        }
        inSourceFormat.mChannelsPerFrame = 1;
        inSourceFormat.mBytesPerFrame >>= 1;
        inSourceFormat.mBytesPerPacket >>= 1;
        size_t sizeOut = a4;
        if ((v40 & 2) != 0 || v26[2] != 1819304813) {
          inSourceFormat.mFormatFlags ^= 2u;
        }
        char v44 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
        *(void *)(v18 + 176) = v44;
        CMTime v81 = a5;
        if (v44)
        {
          *char v44 = 1;
          v44[2] = outPropertyData.mChannelsPerFrame;
          CMTime v81 = a5;
        }
      }
      else
      {
        CMTime v81 = (AudioChannelLayout *)ChannelLayout;
        if (v39 > outPropertyData.mChannelsPerFrame) {
          goto LABEL_59;
        }
      }
    }
    BOOL v32 = 1;
    if (a5 && !outWritable[1] && v81) {
      BOOL v32 = (v81->mChannelLayoutTag != -266338299 || a5->mChannelLayoutTag != -266338299)
    }
         && outPropertyData.mFormatID != 1634754915
         && outPropertyData.mFormatID != 1902211171
         && outPropertyData.mFormatID != 1667330147;
    BOOL v80 = v32;
    if (!a6)
    {
      int Int32IfPresent = 0;
      int v79 = 0;
      int v42 = 0;
      BOOL v43 = 1;
      goto LABEL_86;
    }
    CMTimeValue value = 0;
    CFNumberRef v33 = (const __CFNumber *)CFDictionaryGetValue(a6, @"FigAudioCompressionOption_AudioConverterEncodeBitRate");
    if (v33)
    {
      CFNumberRef v34 = v33;
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(v34)) {
        CFNumberGetValue(v34, kCFNumberIntType, &v97);
      }
    }
    FigCFDictionaryGetBooleanIfPresent();
    CFNumberRef v36 = (const __CFNumber *)CFDictionaryGetValue(a6, @"FigAudioCompressionOption_BitRateControlMode");
    if (v36 && (v37 = v36, CFTypeID v38 = CFNumberGetTypeID(), v38 == CFGetTypeID(v37)))
    {
      CFNumberGetValue(v37, kCFNumberIntType, &v95);
      if (v95 == 3) {
        int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
      }
      else {
        int Int32IfPresent = 0;
      }
      int v79 = 1;
    }
    else
    {
      int Int32IfPresent = 0;
      int v79 = 0;
    }
    FigCFDictionaryGetInt32IfPresent();
    CFTypeID v45 = CFDictionaryGetValue(a6, @"kFigAudioCompressionOption_UseHardwareEncoderIfPresent");
    float v46 = (const void **)MEMORY[0x1E4F1CFD0];
    if (v45)
    {
      float v47 = v45;
      CFTypeID v48 = CFBooleanGetTypeID();
      CFTypeID v49 = CFGetTypeID(v47);
      CFTypeID v50 = *v46;
      if (v48 == v49)
      {
        BOOL v43 = v47 == v50;
LABEL_81:
        float v51 = CFDictionaryGetValue(a6, @"FigAudioCompressionOption_TrimSampleBufferDurations");
        *(unsigned char *)(v18 + 225) = v51 == v50;
        if (v51 == v50) {
          *(void *)(v18 + 264) = CFArrayCreateMutable(v15, 0, MEMORY[0x1E4F1D510]);
        }
        FigCFDictionaryGetInt32IfPresent();
        int v42 = FigCFDictionaryGetInt32IfPresent();
        if (CFDictionaryGetValueIfPresent(a6, @"FigAudioCompressionOption_PreferredOutputBufferDuration", (const void **)&value))
        {
          CMTimeMakeFromDictionary(&v87, (CFDictionaryRef)value);
          *(CMTime *)(v18 + 304) = v87;
        }
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
LABEL_86:
        if (findCodecs(outPropertyData.mFormatID, (_DWORD *)&v99 + 1, &v99)) {
          goto LABEL_59;
        }
        inClassDescriptions.mType = 1634037347;
        inClassDescriptions.mSubType = outPropertyData.mFormatID;
        OSType v52 = HIDWORD(v99);
        if (HIDWORD(v99)) {
          BOOL v53 = !v43;
        }
        else {
          BOOL v53 = 1;
        }
        if (v53) {
          OSType v52 = v99;
        }
        inClassDescriptions.mManufacturer = v52;
        char v54 = (AudioConverterRef *)(v18 + 64);
        if (AudioConverterNewSpecific(&inSourceFormat, &outPropertyData, 1u, &inClassDescriptions, (AudioConverterRef *)(v18 + 64)))
        {
          goto LABEL_59;
        }
        if (!inPropertyData)
        {
          int v55 = *(_DWORD *)(*(void *)v82 + 32);
          int inPropertyData = v55;
          if (*(unsigned char *)(*(void *)v82 + 12)) {
            int inPropertyData = -v55;
          }
        }
        AudioConverterSetProperty(*v54, 0x61636264u, 4u, &inPropertyData);
        if (v81)
        {
          if (AudioConverterSetProperty(*v54, 0x69636C20u, sizeOut, v81)
            || !v80 && AudioConverterSetProperty(*v54, 0x6F636C20u, a4, a5))
          {
            goto LABEL_59;
          }
        }
        if (v97 >= 1)
        {
          if (v96)
          {
            LODWORD(v87.CFDictionarySetValue(theDict, key, value) = 0;
            if (!AudioConverterGetPropertyInfo(*v54, 0x62727472u, (UInt32 *)&v87, 0))
            {
              CFTypeID v56 = (double *)malloc_type_malloc(LODWORD(v87.value), 0x3C1DFA19uLL);
              if (!AudioConverterGetProperty(*v54, 0x62727472u, (UInt32 *)&v87, v56))
              {
                if (LODWORD(v87.value) >= 0x10)
                {
                  unint64_t v58 = (unint64_t)LODWORD(v87.value) >> 4;
                  CFIndex v59 = v56 + 1;
                  double v57 = (double)v97;
                  do
                  {
                    double v60 = *v59;
                    v59 += 2;
                    double v61 = v60;
                    if (v60 < (double)v97) {
                      double v57 = v61;
                    }
                    --v58;
                  }
                  while (v58);
                }
                else
                {
                  double v57 = (double)v97;
                }
                int v97 = (int)v57;
              }
              free(v56);
            }
          }
          if (AudioConverterSetProperty(*v54, 0x62726174u, 4u, &v97)) {
            goto LABEL_59;
          }
        }
        if (HIDWORD(v95) && AudioConverterSetProperty(*v54, 0x73726361u, 4u, (char *)&v95 + 4)
          || v79
          && (AudioConverterSetProperty(*v54, 0x61636266u, 4u, &v95)
           || Int32IfPresent && AudioConverterSetProperty(*v54, 0x76627271u, 4u, (char *)&v94 + 4)))
        {
          goto LABEL_59;
        }
        Extension = (void *)CMFormatDescriptionGetExtension(*(CMFormatDescriptionRef *)(v18 + 24), (CFStringRef)*MEMORY[0x1E4F1EE20]);
        CMTime values = Extension;
        if (Extension)
        {
          CFTypeID v63 = CFGetTypeID(Extension);
          if (v63 == CFDictionaryGetTypeID()
            && CFDictionaryGetCount((CFDictionaryRef)values) >= 1
            && !AudioConverterGetPropertyInfo(*v54, 0x69736F65u, &ioPropertyDataSize, outWritable)
            && ioPropertyDataSize
            && outWritable[0]
            && !AudioConverterSetProperty(*v54, 0x69736F65u, 8u, &values))
          {
            CMTime values = 0;
          }
        }
        if (v42 && AudioConverterSetProperty(*v54, 0x63647175u, 4u, &v94)) {
          goto LABEL_59;
        }
        if (!outWritable[1])
        {
LABEL_141:
          UInt32 ioPropertyDataSize = 40;
          if (!AudioConverterGetProperty(*v54, 0x61636F64u, &ioPropertyDataSize, &outPropertyData))
          {
            UInt32 ioPropertyDataSize = 0;
            outWritable[0] = 0;
            if (!AudioConverterGetPropertyInfo(*v54, 0x67707072u, &ioPropertyDataSize, outWritable)
              && ioPropertyDataSize == 1
              && outWritable[0])
            {
              LOBYTE(v87.CFDictionarySetValue(theDict, key, value) = 0;
              UInt32 ioPropertyDataSize = 1;
              AudioConverterSetProperty(*v54, 0x67707072u, 1u, &v87);
            }
            UInt32 v67 = 0;
            uint64_t v27 = 0;
            if (!AudioConverterGetPropertyInfo(*v54, 0x636D6763u, &ioPropertyDataSize, 0) && ioPropertyDataSize)
            {
              uint64_t v27 = malloc_type_malloc(ioPropertyDataSize, 0x1C04B8F9uLL);
              if (AudioConverterGetProperty(*v54, 0x636D6763u, &ioPropertyDataSize, v27)) {
                goto LABEL_162;
              }
              UInt32 v67 = ioPropertyDataSize;
            }
            if (values) {
              CFDictionaryRef v68 = CFDictionaryCreate(a1, MEMORY[0x1E4F1EE20], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            }
            else {
              CFDictionaryRef v68 = 0;
            }
            if (v80) {
              size_t v69 = a4;
            }
            else {
              size_t v69 = 0;
            }
            if (v80) {
              Boolean v70 = a5;
            }
            else {
              Boolean v70 = 0;
            }
            OSStatus v71 = CMAudioFormatDescriptionCreate(a1, &outPropertyData, v69, v70, v67, v27, v68, (CMAudioFormatDescriptionRef *)(v18 + 32));
            if (v68) {
              CFRelease(v68);
            }
            if (!v71)
            {
              int v72 = FigAudioFormatDescriptionEmploysDependentPackets();
              *(unsigned char *)(v18 + 164) = v72;
              *(void *)(v18 + 168) = 0;
              if (v72)
              {
                if (!AudioConverterGetPropertyInfo(*v54, 0x61737066u, &ioPropertyDataSize, outWritable)
                  && ioPropertyDataSize == 4
                  && outWritable[0])
                {
                  AudioConverterSetProperty(*v54, 0x61737066u, 4u, &v90);
                }
                if (!AudioConverterGetPropertyInfo(*v54, 0x63647263u, &ioPropertyDataSize, outWritable)
                  && ioPropertyDataSize == 4
                  && outWritable[0])
                {
                  AudioConverterSetProperty(*v54, 0x63647263u, 4u, &v89);
                }
                if (!AudioConverterGetPropertyInfo(*v54, 0x63737263u, &ioPropertyDataSize, outWritable)
                  && ioPropertyDataSize == 4
                  && outWritable[0])
                {
                  AudioConverterSetProperty(*v54, 0x63737263u, 4u, &v88);
                }
              }
              if (outPropertyData.mBytesPerPacket
                || (UInt32 ioPropertyDataSize = 4,
                    !AudioConverterGetProperty(*(AudioConverterRef *)(v18 + 64), 0x70616B62u, &ioPropertyDataSize, (void *)(v18 + 40))))
              {
                UInt32 ioPropertyDataSize = 8;
                if (AudioConverterGetProperty(*(AudioConverterRef *)(v18 + 64), 0x6877727Au, &ioPropertyDataSize, (void *)(v18 + 72)))
                {
                  *(void *)(v18 + 72) = 0;
                }
                if ((*(unsigned char *)(*(void *)v82 + 12) & 0x20) != 0)
                {
                  size_t v74 = 16 * (*(_DWORD *)(*(void *)v82 + 28) - 1) + 24;
                  *(void *)(v18 + 112) = v74;
                  CFTypeID v75 = malloc_type_calloc(1uLL, v74, 0xA338E0E6uLL);
                  *(void *)(v18 + 104) = v75;
                  if (v75)
                  {
                    uint64_t v76 = *(unsigned int *)(*(void *)v82 + 28);
                    *CFTypeID v75 = v76;
                    if (v76)
                    {
                      CFTypeID v77 = v75 + 2;
                      do
                      {
                        *CFTypeID v77 = 1;
                        v77 += 4;
                        --v76;
                      }
                      while (v76);
                    }
                  }
                }
                else
                {
                  *(void *)(v18 + 112) = 24;
                  CFTypeID v73 = malloc_type_calloc(1uLL, 0x18uLL, 0xB149BB3FuLL);
                  *(void *)(v18 + 104) = v73;
                  if (v73)
                  {
                    *CFTypeID v73 = 1;
                    v73[2] = *(_DWORD *)(*(void *)v82 + 28);
                  }
                }
LABEL_13:
                if (*(unsigned char *)(v18 + 164)
                  || (GDRCountForFormatID = getGDRCountForFormatID(*(OpaqueAudioConverter **)(v18 + 64), *(CMAudioFormatDescriptionRef *)(v18 + 32), (char *)(v18 + 224)), valuePtr = GDRCountForFormatID, !GDRCountForFormatID)|| (CFNumberRef v29 = CFNumberCreate(v15, kCFNumberSInt16Type, &valuePtr), (*(void *)(v18 + 216) = v29) != 0))
                {
                  if (*(unsigned char *)(v18 + 225)) {
                    *(_DWORD *)(v18 + 228) = (int)CMAudioFormatDescriptionGetMostCompatibleFormat(*(CMAudioFormatDescriptionRef *)(v18 + 32))->mASBD.mSampleRate;
                  }
                  if (cf)
                  {
                    *(void *)(v18 + 280) = cf;
                    CFRetain(cf);
                  }
                  uint64_t v30 = 0;
                  *a8 = v105;
                  CFTypeRef v105 = 0;
LABEL_64:
                  if (v27) {
                    free(v27);
                  }
                  return v30;
                }
              }
            }
LABEL_162:
            uint64_t v30 = FigSignalErrorAt();
LABEL_62:
            if (v105) {
              CFRelease(v105);
            }
            goto LABEL_64;
          }
LABEL_59:
          uint64_t v16 = FigSignalErrorAt();
          goto LABEL_60;
        }
        if (inSourceFormat.mChannelsPerFrame <= outPropertyData.mChannelsPerFrame)
        {
          if (inSourceFormat.mChannelsPerFrame != 1) {
            goto LABEL_141;
          }
          CFTypeID v66 = malloc_type_calloc(outPropertyData.mChannelsPerFrame, 4uLL, 0x100004052888210uLL);
          uint64_t v30 = AudioConverterSetProperty(*v54, 0x63686D70u, 4 * outPropertyData.mChannelsPerFrame, v66);
          CFTypeID v65 = v66;
        }
        else
        {
          LODWORD(CFDictionarySetValue(theDict, key, value) = 1;
          uint64_t v64 = AudioConverterSetProperty(*v54, 0x646D6978u, 4u, &value);
          if (v64)
          {
            uint64_t v30 = v64;
            goto LABEL_191;
          }
          UInt32 inPropertyDataSize = 0;
          v87.CMTimeValue value = 0;
          uint64_t v16 = facCopyMixMapForInputs(inSourceFormat.mChannelsPerFrame, v81, sizeOut, outPropertyData.mChannelsPerFrame, a5, (float **)&v87, &inPropertyDataSize);
          if (v16) {
            goto LABEL_60;
          }
          uint64_t v30 = AudioConverterSetProperty(*v54, 0x6D6D6170u, inPropertyDataSize, (const void *)v87.value);
          CFTypeID v65 = (void *)v87.value;
        }
        free(v65);
        if (!v30) {
          goto LABEL_141;
        }
LABEL_191:
        FigSignalErrorAt();
        goto LABEL_61;
      }
    }
    else
    {
      CFTypeID v50 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    BOOL v43 = 1;
    goto LABEL_81;
  }

  return FigSignalErrorAt();
}

uint64_t sbp_fac_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 48) = a2;
  *(void *)(DerivedStorage + 56) = a3;
  return 0;
}

uint64_t FigMediaProcessorGo(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *(unsigned char *)(a1 + 73) = 1;
    FigMemoryBarrier();
    uint64_t v3 = *(void *)(a1 + 64);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    long long v6 = *(void (**)(uint64_t))(v5 + 16);
    if (v6) {
      v6(v3);
    }
    return 0;
  }
}

uint64_t mediaprocessor_ProcessUntilHighWaterMet(uint64_t a1)
{
  int valuePtr = 0;
  MEMORY[0x19970E290](*(void *)(a1 + 80));
  if (*(unsigned char *)(a1 + 73))
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    uint64_t v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    do
    {
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      long long v8 = *(unsigned int (**)(uint64_t))(v7 + 16);
      if (v8 && v8(v5)) {
        break;
      }
      char v15 = 0;
      int v9 = mediaprocessor_DequeueAndProcessSampleBuffer(a1, &v15);
      int valuePtr = v9;
      if (v15) {
        break;
      }
      if (v9)
      {
        CFTypeRef cf = 0;
        CFTypeRef cf = CFNumberCreate(v2, kCFNumberIntType, &valuePtr);
        if (cf)
        {
          CFAllocatorRef v10 = CFGetAllocator((CFTypeRef)a1);
          CFDictionaryRef v11 = CFDictionaryCreate(v10, (const void **)&kFigMediaProcessorParameter_Result, &cf, 1, v3, v4);
          if (v11)
          {
            CFDictionaryRef v12 = v11;
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterPostNotification();
            CFRelease(v12);
          }
          if (cf) {
            CFRelease(cf);
          }
        }
      }
    }
    while (*(unsigned char *)(a1 + 73));
  }
  return MEMORY[0x19970E2B0](*(void *)(a1 + 80));
}

uint64_t otfw_isQueueAtOrAboveHighWater()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v4 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t result = *(void *)(DerivedStorage + 16);
  if (result)
  {
    CMBufferQueueGetDuration(&v4, (CMBufferQueueRef)result);
    CMTime time1 = v4;
    CMTime v2 = *(CMTime *)(DerivedStorage + 24);
    if (CMTimeCompare(&time1, &v2) < 0) {
      return *(void *)(DerivedStorage + 48)
    }
          && CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(DerivedStorage + 16)) >= *(void *)(DerivedStorage + 48);
    else {
      return 1;
    }
  }
  return result;
}

uint64_t FigMediaProcessorIsAtEndOfOutputData(uint64_t a1)
{
  uint64_t result = FigMediaProcessorIsAtEndOfInputData(a1);
  if (result) {
    return *(unsigned char *)(a1 + 89) != 0;
  }
  return result;
}

uint64_t figMovieWriter_BeginSession(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 335)
    || (uint64_t v4 = DerivedStorage,
        CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 488)),
        (*(unsigned char *)(v4 + 36) & 1) != 0))
  {
    return FigSignalErrorAt();
  }
  else
  {
    CFIndex v6 = Count;
    if (Count < 1)
    {
LABEL_7:
      uint64_t result = 0;
      *(void *)(v4 + 504) = *(void *)(v4 + 496);
      uint64_t v10 = *(void *)(a2 + 16);
      *(_OWORD *)(v4 + 24) = *(_OWORD *)a2;
      *(void *)(v4 + 40) = v10;
    }
    else
    {
      CFIndex v7 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 488), v7);
        long long v11 = *(_OWORD *)a2;
        uint64_t v12 = *(void *)(a2 + 16);
        uint64_t result = trackBeginSession((uint64_t)ValueAtIndex, &v11, 1);
        if (result) {
          break;
        }
        if (v6 == ++v7) {
          goto LABEL_7;
        }
      }
    }
  }
  return result;
}

double getMediaDecodeDuration@<D0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 424));
  uint64_t v5 = MEMORY[0x1E4F1FA48];
  long long v6 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&a2->CMTimeValue value = *MEMORY[0x1E4F1FA48];
  a2->CMTimeEpoch epoch = *(void *)(v5 + 16);
  if (Count)
  {
    CFStringRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 424), Count - 1);
    CMTime lhs = *(CMTime *)(ValueAtIndex + 248);
    CMTime rhs = *(CMTime *)(ValueAtIndex + 176);
    CMTimeAdd(a2, &lhs, &rhs);
  }
  if (*(unsigned char *)(a1 + 480))
  {
    CMTime rhs = *(CMTime *)(a1 + 136);
    int32_t v8 = *(_DWORD *)(a1 + 104);
    if (v8)
    {
      CMTime lhs = *(CMTime *)(a1 + 136);
      CMTimeConvertScale(&rhs, &lhs, v8, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
    }
    CMTime v11 = *a2;
    CMTime v10 = rhs;
    CMTimeAdd(&lhs, &v11, &v10);
    *(void *)&long long v6 = lhs.value;
    *a2 = lhs;
  }
  return *(double *)&v6;
}

uint64_t mediaprocessor_InputDataBecameReady(uint64_t a1, uint64_t a2)
{
  return mediaprocessor_TriggerSchedulingIfOutputIsLow(a2);
}

uint64_t mediaprocessor_TriggerSchedulingIfOutputIsLow(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v6 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v5 = v6;
  if (v6) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0;
  }
  int32_t v8 = *(uint64_t (**)(uint64_t))(v7 + 24);
  if (v8)
  {
    uint64_t result = v8(v2);
    if (result)
    {
      uint64_t v9 = *(void *)(a1 + 64);
      uint64_t v10 = CMBaseObjectGetVTable();
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t result = v10 + 16;
      uint64_t v11 = v12;
      uint64_t v13 = v12 ? v11 : 0;
      uint64_t v14 = *(uint64_t (**)(uint64_t))(v13 + 16);
      if (v14)
      {
        return v14(v9);
      }
    }
  }
  return result;
}

BOOL otfw_isQueueBelowLowWater()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v5, 0, sizeof(v5));
  unsigned int v1 = *(opaqueCMBufferQueue **)(DerivedStorage + 16);
  if (!v1) {
    return 1;
  }
  CMBufferQueueGetDuration(&v5, v1);
  CMTime time1 = v5;
  CMTime v3 = *(CMTime *)(DerivedStorage + 56);
  if (CMTimeCompare(&time1, &v3) > 0) {
    return 0;
  }
  return !*(void *)(DerivedStorage + 80)
      || CMBufferQueueGetTotalSize(*(CMBufferQueueRef *)(DerivedStorage + 16)) < *(void *)(DerivedStorage + 80);
}

uint64_t sbp_vtcs_processSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  ImageBuffer = CMSampleBufferGetImageBuffer(a2);
  uint64_t TaggedBufferGroup = FigSampleBufferGetTaggedBufferGroup();
  memset(&v81, 0, sizeof(v81));
  CMSampleBufferGetPresentationTimeStamp(&v81, a2);
  if (ImageBuffer) {
    goto LABEL_7;
  }
  FormatDescription = CMSampleBufferGetFormatDescription(a2);
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  CFDictionaryRef v8 = CVPixelFormatDescriptionCreateWithPixelFormatType(0, MediaSubType);
  if (!v8
    || (CFRelease(v8),
        *(void *)&long long propertyValueOut = 0,
        v89.CMTimeValue value = 0,
        size_t totalLengthOut = 0,
        uint64_t v9 = (void *)*MEMORY[0x1E4F24D20],
        CMTime values = 0,
        CMTime keys = v9,
        !a2))
  {
    ImageBuffer = 0;
    goto LABEL_7;
  }
  uint64_t v10 = CMSampleBufferGetImageBuffer(a2);
  *(void *)CMTime lhs = v10;
  if (v10)
  {
    ImageBuffer = v10;
    CVBufferRetain(v10);
    goto LABEL_7;
  }
  DataBuffer = CMSampleBufferGetDataBuffer(a2);
  if (!DataBuffer || (CFTypeID v45 = DataBuffer, !CMBlockBufferGetDataLength(DataBuffer)))
  {
    uint64_t Contiguous = FigSignalErrorAt();
LABEL_113:
    uint64_t v35 = Contiguous;
    ImageBuffer = 0;
    CFDictionaryRef pixelBufferAttributes = 0;
    goto LABEL_103;
  }
  CFAllocatorRef v46 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t Contiguous = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v45, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, (CMBlockBufferRef *)&propertyValueOut);
  if (Contiguous) {
    goto LABEL_113;
  }
  uint64_t Contiguous = CMBlockBufferGetDataPointer((CMBlockBufferRef)propertyValueOut, 0, 0, &totalLengthOut, (char **)&v89);
  if (Contiguous) {
    goto LABEL_113;
  }
  CFTypeID v48 = CMSampleBufferGetFormatDescription(a2);
  CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(v48);
  FourCharCode v50 = CMFormatDescriptionGetMediaSubType(v48);
  CFNumberRef Extension = (const __CFNumber *)CMFormatDescriptionGetExtension(v48, (CFStringRef)*MEMORY[0x1E4F1ED48]);
  uint64_t v78 = TaggedBufferGroup;
  if (Extension && (CFNumberRef v52 = Extension, v53 = CFGetTypeID(Extension), v53 == CFNumberGetTypeID()))
  {
    size_t valuePtr = 0;
    CFNumberGetValue(v52, kCFNumberCFIndexType, &valuePtr);
    size_t v54 = valuePtr;
    if ((valuePtr & 0x8000000000000000) != 0)
    {
      uint64_t v35 = FigSignalErrorAt();
      ImageBuffer = 0;
      CFDictionaryRef pixelBufferAttributes = 0;
LABEL_115:
      uint64_t TaggedBufferGroup = v78;
      goto LABEL_103;
    }
  }
  else if (HIDWORD(*(unint64_t *)&Dimensions))
  {
    size_t v54 = totalLengthOut / (*(uint64_t *)&Dimensions >> 32);
  }
  else
  {
    size_t v54 = 0;
  }
  CFTypeID v56 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  double v57 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CMTime values = CFDictionaryCreate(v46, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef pixelBufferAttributes = CFDictionaryCreate(v46, (const void **)&keys, (const void **)&values, 1, v56, v57);
  uint64_t v58 = CVPixelBufferCreateWithBytes(v46, Dimensions.width, *(uint64_t *)&Dimensions >> 32, v50, (void *)v89.value, v54, (CVPixelBufferReleaseBytesCallback)sbp_vtcs_releaseCMBlockBuffer, (void *)propertyValueOut, pixelBufferAttributes, (CVPixelBufferRef *)lhs);
  if (v58)
  {
    uint64_t v35 = v58;
    ImageBuffer = 0;
    goto LABEL_115;
  }
  *(void *)&long long propertyValueOut = 0;
  CFDictionaryRef v59 = CMCopyDictionaryOfAttachments(v46, a2, 0);
  uint64_t TaggedBufferGroup = v78;
  if (v59)
  {
    CFDictionaryRef v60 = v59;
    CVBufferSetAttachments(*(CVBufferRef *)lhs, v59, kCVAttachmentMode_ShouldNotPropagate);
    CFRelease(v60);
  }
  CFDictionaryRef v61 = CMCopyDictionaryOfAttachments(v46, a2, 1u);
  if (v61)
  {
    CFDictionaryRef v62 = v61;
    CVBufferSetAttachments(*(CVBufferRef *)lhs, v61, kCVAttachmentMode_ShouldPropagate);
    CFRelease(v62);
  }
  CFStringRef v63 = (const __CFString *)*MEMORY[0x1E4F24A90];
  if (sbp_CVBufferAttachmentEmpty(*(__CVBuffer **)lhs, (const __CFString *)*MEMORY[0x1E4F24A90]))
  {
    CFPropertyListRef v64 = CMFormatDescriptionGetExtension(v48, v63);
    if (v64)
    {
      CFTypeID v65 = v64;
      CFTypeID v66 = CFGetTypeID(v64);
      if (v66 == CFStringGetTypeID()) {
        CVBufferSetAttachment(*(CVBufferRef *)lhs, v63, v65, kCVAttachmentMode_ShouldPropagate);
      }
    }
  }
  CFStringRef v67 = (const __CFString *)*MEMORY[0x1E4F24BC8];
  if (sbp_CVBufferAttachmentEmpty(*(__CVBuffer **)lhs, (const __CFString *)*MEMORY[0x1E4F24BC8]))
  {
    CFPropertyListRef v68 = CMFormatDescriptionGetExtension(v48, v67);
    if (v68)
    {
      size_t v69 = v68;
      CFTypeID v70 = CFGetTypeID(v68);
      if (v70 == CFStringGetTypeID()) {
        CVBufferSetAttachment(*(CVBufferRef *)lhs, v67, v69, kCVAttachmentMode_ShouldPropagate);
      }
    }
  }
  CFStringRef v71 = (const __CFString *)*MEMORY[0x1E4F24C18];
  if (sbp_CVBufferAttachmentEmpty(*(__CVBuffer **)lhs, (const __CFString *)*MEMORY[0x1E4F24C18]))
  {
    CFPropertyListRef v72 = CMFormatDescriptionGetExtension(v48, v71);
    if (v72)
    {
      CFTypeID v73 = v72;
      CFTypeID v74 = CFGetTypeID(v72);
      if (v74 == CFStringGetTypeID()) {
        CVBufferSetAttachment(*(CVBufferRef *)lhs, v71, v73, kCVAttachmentMode_ShouldPropagate);
      }
    }
  }
  uint64_t v35 = 0;
  ImageBuffer = *(__CVBuffer **)lhs;
LABEL_103:
  if (values) {
    CFRelease(values);
  }
  if (pixelBufferAttributes) {
    CFRelease(pixelBufferAttributes);
  }
  if ((void)propertyValueOut) {
    CFRelease((CFTypeRef)propertyValueOut);
  }
  if (v35) {
    return v35;
  }
LABEL_7:
  if (*(unsigned char *)(DerivedStorage + 34))
  {
    if (!*(unsigned char *)(DerivedStorage + 35))
    {
      CMFormatDescriptionRef v11 = CMSampleBufferGetFormatDescription(a2);
      if (v11)
      {
        uint64_t v12 = v11;
        uint64_t v77 = TaggedBufferGroup;
        uint64_t v13 = 0;
        uint64_t v14 = *(const void **)(DerivedStorage + 16);
        CFStringRef v15 = (const __CFString *)*MEMORY[0x1E4F44BB0];
        CFStringRef v16 = (const __CFString *)*MEMORY[0x1E4F44868];
        *(void *)CMTime lhs = *MEMORY[0x1E4F44BB0];
        *(void *)&lhs[8] = v16;
        propertyKeCGFloat y = (const __CFString *)*MEMORY[0x1E4F44B58];
        CFStringRef v76 = (const __CFString *)*MEMORY[0x1E4F44978];
        *(void *)&lhs[16] = *MEMORY[0x1E4F44B58];
        *(void *)&lhs[24] = v76;
        CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        while (1)
        {
          *(void *)&long long propertyValueOut = 0;
          VTSessionCopyProperty(v14, *(CFStringRef *)&lhs[v13], v17, &propertyValueOut);
          if ((void)propertyValueOut)
          {
            CFRelease((CFTypeRef)propertyValueOut);
            if ((void)propertyValueOut) {
              break;
            }
          }
          v13 += 8;
          if (v13 == 32)
          {
            CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(v12);
            if (Extensions)
            {
              CFDictionaryRef v19 = Extensions;
              Boolean Value = CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F24C18]);
              if (Value) {
                VTSessionSetProperty(v14, v15, Value);
              }
              uint64_t v21 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F24A90]);
              if (v21) {
                VTSessionSetProperty(v14, v16, v21);
              }
              long long v22 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F24BC8]);
              if (v22)
              {
                long long v23 = v22;
                VTSessionSetProperty(v14, propertyKey, v22);
                if (CFEqual(v23, (CFTypeRef)*MEMORY[0x1E4F24C08]))
                {
                  long long v24 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F24B28]);
                  if (v24) {
                    VTSessionSetProperty(v14, (CFStringRef)*MEMORY[0x1E4F44918], v24);
                  }
                }
              }
              uint64_t v25 = CFDictionaryGetValue(v19, (const void *)*MEMORY[0x1E4F1EDF0]);
              if (v25) {
                VTSessionSetProperty(v14, v76, v25);
              }
            }
            break;
          }
        }
        *(unsigned char *)(DerivedStorage + 35) = 1;
        uint64_t TaggedBufferGroup = v77;
      }
    }
  }
  if (*(unsigned char *)(DerivedStorage + 36) && !*(unsigned char *)(DerivedStorage + 37) && ImageBuffer)
  {
    v89.CMTimeValue value = 0;
    size_t totalLengthOut = 0;
    CFStringRef v26 = (const __CFString *)*MEMORY[0x1E4F44858];
    VTSessionCopyProperty(*(VTSessionRef *)(DerivedStorage + 16), (CFStringRef)*MEMORY[0x1E4F44858], (CFAllocatorRef)*MEMORY[0x1E4F1CF80], &totalLengthOut);
    uint64_t v27 = (const void *)totalLengthOut;
    if (totalLengthOut) {
      goto LABEL_73;
    }
    if (!sbp_CVBufferAttachmentEmpty(ImageBuffer, (const __CFString *)*MEMORY[0x1E4F24A78]))
    {
      CVPixelBufferGetPixelFormatType(ImageBuffer);
      *(_OWORD *)CMTime lhs = 0uLL;
      *(int64x2_t *)&lhs[16] = vdupq_n_s64(0x7FFFFFFFFFFFFFFFuLL);
      uint64_t v93 = 0;
      uint64_t v94 = 0;
      long long propertyValueOut = 0uLL;
      long long v86 = *(_OWORD *)&lhs[16];
      uint64_t v87 = 0;
      uint64_t v88 = 0;
      VTPixelTransferSessionCreateScalingParameters();
      if (v89.value)
      {
        CFTypeID v43 = CFGetTypeID((CFTypeRef)v89.value);
        if (v43 == CFDictionaryGetTypeID()) {
          VTSessionSetProperty(*(VTSessionRef *)(DerivedStorage + 16), v26, (CFTypeRef)v89.value);
        }
        uint64_t v27 = (const void *)v89.value;
        if (v89.value) {
LABEL_73:
        }
          CFRelease(v27);
      }
    }
    *(unsigned char *)(DerivedStorage + 37) = 1;
  }
  CFTypeRef v28 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F288], 0);
  CFTypeRef v29 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
  if (v28 == (CFTypeRef)*MEMORY[0x1E4F1CFD0]) {
    *(unsigned char *)(DerivedStorage + 32) = 1;
  }
  if (CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F2B0], 0) == v29) {
    *(unsigned char *)(DerivedStorage + 33) = 1;
  }
  if (CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F280], 0) == v29) {
    *(unsigned char *)(DerivedStorage + 38) = 1;
  }
  if (!((unint64_t)ImageBuffer | TaggedBufferGroup)) {
    return 0;
  }
  size_t totalLengthOut = v81.value;
  CMTimeScale timescale = v81.timescale;
  if (*(unsigned char *)(DerivedStorage + 84) & 1) != 0 && (*(unsigned char *)(DerivedStorage + 60))
  {
    CMTimeFlags flags = v81.flags;
    if (v81.flags)
    {
      CMTimeEpoch epoch = v81.epoch;
      BOOL v32 = (_OWORD *)(DerivedStorage + 96);
      if ((*(unsigned char *)(DerivedStorage + 108) & 1) == 0)
      {
        long long propertyValueOut = *(_OWORD *)&v81.value;
        *(void *)&long long v86 = v81.epoch;
        sbp_vtcs_calculateNextCumulatedForceSyncSampleInterval(DerivedStorage, (CMTime *)&propertyValueOut, (uint64_t)lhs);
        *BOOL v32 = *(_OWORD *)lhs;
        *(void *)(DerivedStorage + 112) = *(void *)&lhs[16];
      }
      memset(&v89, 0, sizeof(v89));
      *(void *)CMTime lhs = totalLengthOut;
      *(void *)&lhs[8] = __PAIR64__(flags, timescale);
      *(void *)&lhs[16] = epoch;
      long long propertyValueOut = *(_OWORD *)(DerivedStorage + 48);
      *(void *)&long long v86 = *(void *)(DerivedStorage + 64);
      CMTimeSubtract(&v89, (CMTime *)lhs, (CMTime *)&propertyValueOut);
      *(_OWORD *)CMTime lhs = *v32;
      *(void *)&lhs[16] = *(void *)(DerivedStorage + 112);
      long long propertyValueOut = *(_OWORD *)&v89.value;
      *(void *)&long long v86 = v89.epoch;
      if (CMTimeCompare((CMTime *)lhs, (CMTime *)&propertyValueOut) <= 0)
      {
        *(void *)&long long propertyValueOut = totalLengthOut;
        *((void *)&propertyValueOut + 1) = __PAIR64__(flags, timescale);
        *(void *)&long long v86 = epoch;
        sbp_vtcs_calculateNextCumulatedForceSyncSampleInterval(DerivedStorage, (CMTime *)&propertyValueOut, (uint64_t)lhs);
        *BOOL v32 = *(_OWORD *)lhs;
        *(void *)(DerivedStorage + 112) = *(void *)&lhs[16];
        goto LABEL_49;
      }
    }
  }
  int v33 = *(unsigned __int8 *)(DerivedStorage + 32);
  if (*(unsigned char *)(DerivedStorage + 32))
  {
LABEL_49:
    char v34 = 0;
    *(unsigned char *)(DerivedStorage + 32) = 0;
    int v33 = 1;
    goto LABEL_50;
  }
  char v34 = 1;
LABEL_50:
  int v36 = *(unsigned __int8 *)(DerivedStorage + 33);
  if (*(unsigned char *)(DerivedStorage + 33)) {
    *(unsigned char *)(DerivedStorage + 33) = 0;
  }
  int v37 = *(unsigned __int8 *)(DerivedStorage + 38);
  if (*(unsigned char *)(DerivedStorage + 38)) {
    *(unsigned char *)(DerivedStorage + 38) = 0;
  }
  if ((((v37 | v36) == 0) & ~v33) != 0)
  {
    UInt32 v39 = 0;
  }
  else
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      return 4294954510;
    }
    UInt32 v39 = Mutable;
    if ((v34 & 1) == 0) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44ED8], v29);
    }
    if (v36) {
      CFDictionarySetValue(v39, (const void *)*MEMORY[0x1E4F44F48], v29);
    }
    if (v37) {
      CFDictionarySetValue(v39, (const void *)*MEMORY[0x1E4F44EB8], v29);
    }
  }
  int v40 = *(OpaqueVTCompressionSession **)(DerivedStorage + 16);
  if (ImageBuffer)
  {
    CMSampleBufferGetDuration(&duration, a2);
    *(CMTime *)CMTime lhs = v81;
    uint64_t v41 = VTCompressionSessionEncodeFrame(v40, ImageBuffer, (CMTime *)lhs, &duration, v39, 0, 0);
  }
  else
  {
    CMSampleBufferGetDuration(&v79, a2);
    *(CMTime *)CMTime lhs = v81;
    uint64_t v41 = VTCompressionSessionEncodeMultiImageFrame(v40, (CMTaggedBufferGroupRef)TaggedBufferGroup, (CMTime *)lhs, &v79, v39, 0, 0);
  }
  uint64_t v35 = v41;
  if (v39) {
    CFRelease(v39);
  }
  return v35;
}

uint64_t sbp_fac_processSampleBuffer(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CMSampleBufferGetNumSamples(a2)) {
    return 0;
  }
  if (*(_DWORD *)(DerivedStorage + 196) == 2)
  {
    uint64_t v4 = *(OpaqueAudioConverter **)(DerivedStorage + 64);
    if (v4) {
      AudioConverterReset(v4);
    }
    *(_DWORD *)(DerivedStorage + 196) = 0;
    *(void *)(DerivedStorage + 200) = 0;
    uint64_t v5 = MEMORY[0x1E4F1F9F8];
    *(unsigned char *)(DerivedStorage + 208) = 0;
    *(_OWORD *)(DerivedStorage + 232) = *(_OWORD *)v5;
    *(void *)(DerivedStorage + 248) = *(void *)(v5 + 16);
    *(unsigned char *)(DerivedStorage + 144) = 0;
  }
  if (*(unsigned char *)(DerivedStorage + 17))
  {
    uint64_t v6 = *(void (**)(void, void, opaqueCMSampleBuffer *))(DerivedStorage + 48);
    if (v6) {
      v6(*(void *)(DerivedStorage + 56), 0, a2);
    }
    return 0;
  }

  return RunConverter(DerivedStorage, (uint64_t)a2);
}

uint64_t RunConverter(uint64_t a1, uint64_t a2)
{
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = acquireHardware(a1);
  if (v4) {
    return v4;
  }
  if (!CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a1 + 24))) {
    return 4294954516;
  }
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a1 + 32));
  if (!StreamBasicDescription) {
    return 4294954516;
  }
  uint64_t v6 = StreamBasicDescription;
  *(void *)(a1 + 88) = a2;
  if (StreamBasicDescription->mFramesPerPacket
    && (mSampleFloat64 Rate = StreamBasicDescription->mSampleRate,
        CMTime time = *(CMTime *)(a1 + 304),
        Float64 Seconds = CMTimeGetSeconds(&time),
        LODWORD(v9) = v6->mFramesPerPacket,
        UInt32 v10 = (mSampleRate * Seconds / (double)v9),
        (UInt32 ioOutputDataPacketSize = v10) != 0))
  {
    if (v10 < 0x81 || v6->mFormatID == 1819304813) {
      goto LABEL_12;
    }
    UInt32 v11 = 128;
  }
  else
  {
    UInt32 v11 = 1;
  }
  UInt32 ioOutputDataPacketSize = v11;
LABEL_12:
  CFAllocatorRef blockAllocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF90];
  CFDictionaryRef v61 = (__CFString *)(a1 + 232);
  uint64_t v12 = (_OWORD *)(a1 + 120);
  keCGFloat y = (const __CFString *)*MEMORY[0x1E4F1F290];
  CFStringRef v56 = (const __CFString *)*MEMORY[0x1E4F1F298];
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v58 = (const __CFString *)*MEMORY[0x1E4F1F308];
  uint64_t v13 = (CMTime *)MEMORY[0x1E4F1FA48];
  while (1)
  {
    memset(&outOutputData, 0, sizeof(outOutputData));
    dataPointerOut = 0;
    CMBlockBufferRef theBuffer = 0;
    UInt32 mBytesPerPacket = *(_DWORD *)(a1 + 40);
    if (!mBytesPerPacket) {
      UInt32 mBytesPerPacket = v6->mBytesPerPacket;
    }
    UInt32 v15 = ioOutputDataPacketSize * mBytesPerPacket;
    uint64_t DataPointer = CMBlockBufferCreateWithMemoryBlock(*(CFAllocatorRef *)(a1 + 280), 0, v15, blockAllocator, 0, 0, v15, 1u, &theBuffer);
    if (DataPointer
      || (uint64_t DataPointer = CMBlockBufferGetDataPointer(theBuffer, 0, 0, 0, &dataPointerOut), DataPointer))
    {
      uint64_t v4 = DataPointer;
      goto LABEL_99;
    }
    UInt32 mChannelsPerFrame = v6->mChannelsPerFrame;
    outOutputData.mNumberBuffers = 1;
    outOutputData.mBuffers[0].mNumberChannels = mChannelsPerFrame;
    outOutputData.mBuffers[0].mDataByteSize = v15;
    outOutputData.mBuffers[0].mData = dataPointerOut;
    if ((!v6->mBytesPerPacket || !v6->mFramesPerPacket) && ioOutputDataPacketSize > *(_DWORD *)(a1 + 160))
    {
      free(*(void **)(a1 + 152));
      *(void *)(a1 + 152) = malloc_type_malloc(16 * ioOutputDataPacketSize, 0x1000040451B5BE8uLL);
      *(_DWORD *)(a1 + 160) = ioOutputDataPacketSize;
      if (!*(unsigned char *)(a1 + 164)) {
        goto LABEL_24;
      }
      free(*(void **)(a1 + 168));
      *(void *)(a1 + 168) = malloc_type_malloc(16 * ioOutputDataPacketSize, 0x1000040451B5BE8uLL);
    }
    if (*(unsigned char *)(a1 + 164))
    {
      uint64_t v18 = AudioConverterFillComplexBufferWithPacketDependencyInfo();
      goto LABEL_25;
    }
LABEL_24:
    uint64_t v18 = AudioConverterFillComplexBuffer(*(AudioConverterRef *)(a1 + 64), (AudioConverterComplexInputDataProc)facEncoderInputProc, (void *)a1, &ioOutputDataPacketSize, &outOutputData, *(AudioStreamPacketDescription **)(a1 + 152));
LABEL_25:
    uint64_t v4 = v18;
    if (v18)
    {
      CFDictionaryRef v19 = (CMTime *)(a1 + 232);
      if (v18 != 3)
      {
        if (theBuffer) {
          CFRelease(theBuffer);
        }
        goto LABEL_99;
      }
    }
    else
    {
      CFDictionaryRef v19 = (CMTime *)(a1 + 232);
    }
    CMItemCount v20 = ioOutputDataPacketSize;
    uint64_t v21 = theBuffer;
    if (!ioOutputDataPacketSize) {
      break;
    }
    uint64_t v22 = *(void *)(a1 + 152);
    uint64_t v23 = *(void *)(a1 + 168);
    uint64_t v74 = 0;
    memset(&time1, 0, sizeof(time1));
    CMSampleBufferRef sbuf = 0;
    CMBlockBufferRef dataBuffer = 0;
    if (!*(unsigned char *)(a1 + 225)) {
      goto LABEL_42;
    }
    if ((*(unsigned char *)(a1 + 244) & 1) == 0)
    {
      outPropertyData.CMTimeValue value = 0;
      LODWORD(ioPropertyDataSize.CFDictionarySetValue(theDict, key, value) = 8;
      if (AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 64), 0x7072696Du, (UInt32 *)&ioPropertyDataSize, &outPropertyData))
      {
        CFDictionaryRef v19 = (CMTime *)(a1 + 232);
        *(_OWORD *)&v61->isa = *(_OWORD *)&v13->value;
        *(void *)(a1 + 248) = v13->epoch;
      }
      else
      {
        CMTimeMake(&time, LODWORD(outPropertyData.value), *(_DWORD *)(a1 + 228));
        *(_OWORD *)&v61->isa = *(_OWORD *)&time.value;
        *(void *)(a1 + 248) = time.epoch;
        *(_OWORD *)&lhs.CMTimeValue value = *v12;
        lhs.CMTimeEpoch epoch = *(void *)(a1 + 136);
        *(_OWORD *)&rhs.CMTimeValue value = *(_OWORD *)&v61->isa;
        rhs.CMTimeEpoch epoch = *(void *)(a1 + 248);
        CMTimeSubtract(&time, &lhs, &rhs);
        CFDictionaryRef v19 = (CMTime *)(a1 + 232);
        *uint64_t v12 = *(_OWORD *)&time.value;
        *(void *)(a1 + 136) = time.epoch;
        *(unsigned char *)(a1 + 256) = 1;
      }
      if (!*(unsigned char *)(a1 + 225)) {
        goto LABEL_42;
      }
    }
    if (v19->value)
    {
      CMTime time = *v19;
      CMTime lhs = *v13;
      BOOL v24 = CMTimeCompare(&time, &lhs) > 0;
    }
    else
    {
LABEL_42:
      BOOL v24 = 0;
    }
    CMTimeMake(&time, v6->mFramesPerPacket, (int)v6->mSampleRate);
    sampleTimingArray.CMTime duration = time;
    *(_OWORD *)&sampleTimingArray.presentationTimeStamp.CMTimeValue value = *v12;
    sampleTimingArray.presentationTimeStamp.CMTimeEpoch epoch = *(void *)(a1 + 136);
    sampleTimingArray.decodeTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTimeMake(&time1, (v6->mFramesPerPacket * v20), (int)v6->mSampleRate);
    *(_OWORD *)&lhs.CMTimeValue value = *v12;
    lhs.CMTimeEpoch epoch = *(void *)(a1 + 136);
    CMTime rhs = time1;
    CMTimeAdd(&time, &lhs, &rhs);
    *uint64_t v12 = *(_OWORD *)&time.value;
    *(void *)(a1 + 136) = time.epoch;
    if (v22)
    {
      unsigned int v25 = 0;
      CFStringRef v26 = (unsigned int *)(v22 + 12);
      p_CMTime time = &time;
      CMItemCount v28 = v20;
      do
      {
        unsigned int v29 = *v26;
        v26 += 4;
        p_time->CMTimeValue value = v29;
        p_CMTime time = (CMTime *)((char *)p_time + 8);
        v25 += v29;
        --v28;
      }
      while (v28);
    }
    else
    {
      uint64_t v74 = v6->mBytesPerPacket;
      unsigned int v25 = v74 * v20;
    }
    OSStatus v30 = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(a1 + 280), v21, 0, v25, 0, &dataBuffer);
    CFDictionaryRef v31 = 0;
    if (!v30)
    {
      if (v22) {
        CMItemCount v32 = v20;
      }
      else {
        CMItemCount v32 = 1;
      }
      sampleSizeArraCGFloat y = &time;
      if (!v22) {
        sampleSizeArraCGFloat y = (CMTime *)&v74;
      }
      if (CMSampleBufferCreate(*(CFAllocatorRef *)(a1 + 280), dataBuffer, 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 32), v20, 1, &sampleTimingArray, v32, (const size_t *)sampleSizeArray, &sbuf))
      {
        if (dataBuffer) {
          CFRelease(dataBuffer);
        }
        CFDictionaryRef v31 = 0;
        goto LABEL_85;
      }
      if (!v23 && *(unsigned char *)(a1 + 164))
      {
        FigSignalErrorAt();
        CFDictionaryRef v31 = 0;
        uint64_t v13 = (CMTime *)MEMORY[0x1E4F1FA48];
      }
      else
      {
        if (v23)
        {
          if (*(unsigned char *)(a1 + 164))
          {
            SampleAttachmentsArraCGFloat y = CMSampleBufferGetSampleAttachmentsArray(sbuf, 1u);
            CFIndex Count = CFArrayGetCount(SampleAttachmentsArray);
            if (Count >= 1)
            {
              CFIndex v36 = Count;
              CFIndex v37 = 0;
              while (1)
              {
                CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(SampleAttachmentsArray, v37);
                lhs.CMTimeValue value = 0;
                if (FigAudioStreamPacketDependencyInfoCopyAsSampleDependencyAttributeDictionary()
                  || !FigCFDictionaryGetCount())
                {
                  break;
                }
                CFDictionaryApplyFunction((CFDictionaryRef)lhs.value, (CFDictionaryApplierFunction)appendAttributesToDictionary_0, ValueAtIndex);
                if (lhs.value) {
                  CFRelease((CFTypeRef)lhs.value);
                }
                ++v37;
                v23 += 16;
                if (v36 == v37) {
                  goto LABEL_69;
                }
              }
              if (lhs.value) {
                CFRelease((CFTypeRef)lhs.value);
              }
              CFDictionaryRef v31 = 0;
              uint64_t v13 = (CMTime *)MEMORY[0x1E4F1FA48];
              goto LABEL_85;
            }
          }
        }
LABEL_69:
        UInt32 v39 = *(const void **)(a1 + 216);
        uint64_t v13 = (CMTime *)MEMORY[0x1E4F1FA48];
        if (v39 && *(unsigned char *)(a1 + 225) && !*(unsigned char *)(a1 + 164))
        {
          CMSetAttachment(sbuf, key, v39, 1u);
          if (!*(unsigned char *)(a1 + 256) || (int v40 = (CFTypeRef *)MEMORY[0x1E4F1CFD0], !*(unsigned char *)(a1 + 224))) {
            int v40 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
          }
          CMSetAttachment(sbuf, v56, *v40, 1u);
        }
        if (!v24) {
          goto LABEL_79;
        }
        memset(&lhs, 0, sizeof(lhs));
        CMTime rhs = time1;
        *(_OWORD *)&outPropertyData.CMTimeValue value = *(_OWORD *)&v61->isa;
        outPropertyData.CMTimeEpoch epoch = *(void *)(a1 + 248);
        CMTimeMinimum(&lhs, &rhs, &outPropertyData);
        *(_OWORD *)&outPropertyData.CMTimeValue value = *(_OWORD *)&v61->isa;
        outPropertyData.CMTimeEpoch epoch = *(void *)(a1 + 248);
        CMTime ioPropertyDataSize = lhs;
        CMTimeSubtract(&rhs, &outPropertyData, &ioPropertyDataSize);
        *(_OWORD *)&v61->isa = *(_OWORD *)&rhs.value;
        *(void *)(a1 + 248) = rhs.epoch;
        CMTime rhs = lhs;
        CFDictionaryRef v31 = CMTimeCopyAsDictionary(&rhs, allocator);
        if (v31)
        {
          CMSetAttachment(sbuf, v58, v31, 1u);
          CFRelease(v31);
LABEL_79:
          CFDictionaryRef v31 = sbuf;
          goto LABEL_80;
        }
        FigSignalErrorAt();
      }
LABEL_80:
      if (dataBuffer) {
        CFRelease(dataBuffer);
      }
    }
LABEL_85:
    if (*(_DWORD *)(a1 + 196) == 1 && *(unsigned char *)(a1 + 225))
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 264), v31);
    }
    else
    {
      uint64_t v41 = *(void (**)(void, void, CFDictionaryRef))(a1 + 48);
      if (v41) {
        v41(*(void *)(a1 + 56), 0, v31);
      }
    }
    if (v31) {
      CFRelease(v31);
    }
    if (theBuffer) {
      CFRelease(theBuffer);
    }
LABEL_94:
    if (v4 == 3) {
      return 0;
    }
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (*(_DWORD *)(a1 + 196) != 1) {
    goto LABEL_94;
  }
  if (*(unsigned char *)(a1 + 225))
  {
    outPropertyData.CMTimeValue value = 0;
    LODWORD(ioPropertyDataSize.CFDictionarySetValue(theDict, key, value) = 8;
    CMTimeValue value = *MEMORY[0x1E4F1F9F8];
    CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
    CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 12);
    CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    CFIndex v49 = CFArrayGetCount(*(CFArrayRef *)(a1 + 264));
    if (!AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 64), 0x7072696Du, (UInt32 *)&ioPropertyDataSize, &outPropertyData)&& HIDWORD(outPropertyData.value))
    {
      CMTimeMake(&time, HIDWORD(outPropertyData.value), *(_DWORD *)(a1 + 228));
      CMTimeValue value = time.value;
      CMTimeScale timescale = time.timescale;
      CMTimeFlags flags = time.flags;
      CMTimeEpoch epoch = time.epoch;
    }
    if (flags)
    {
      if (v49 >= 1)
      {
        CFStringRef v62 = (const __CFString *)*MEMORY[0x1E4F1F300];
        CFIndex v50 = v49 + 1;
        while (1)
        {
          float v51 = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), v50 - 2);
          memset(&time, 0, sizeof(time));
          CMSampleBufferGetDuration(&time, v51);
          memset(&sampleTimingArray, 0, 24);
          CMTime time1 = time;
          lhs.CMTimeValue value = value;
          lhs.CMTimeScale timescale = timescale;
          lhs.CMTimeFlags flags = flags;
          lhs.CMTimeEpoch epoch = epoch;
          CMTimeMinimum(&sampleTimingArray.duration, &time1, &lhs);
          CMTime time1 = sampleTimingArray.duration;
          CFDictionaryRef v52 = CMTimeCopyAsDictionary(&time1, allocator);
          if (!v52) {
            break;
          }
          CFDictionaryRef v53 = v52;
          CMSetAttachment(v51, v62, v52, 1u);
          CFRelease(v53);
          lhs.CMTimeValue value = value;
          lhs.CMTimeScale timescale = timescale;
          lhs.CMTimeFlags flags = flags;
          lhs.CMTimeEpoch epoch = epoch;
          CMTime rhs = sampleTimingArray.duration;
          CMTimeSubtract(&time1, &lhs, &rhs);
          CMTimeValue value = time1.value;
          CMTimeScale timescale = time1.timescale;
          CMTimeFlags flags = time1.flags;
          CMTimeEpoch epoch = time1.epoch;
          if (time1.value > 0 || (CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48], CMTimeCompare(&time1, &lhs) > 0))
          {
            if ((unint64_t)--v50 > 1) {
              continue;
            }
          }
          goto LABEL_121;
        }
        FigSignalErrorAt();
      }
    }
    else
    {
LABEL_121:
      if (v49 >= 1)
      {
        do
        {
          size_t v54 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), 0);
          int v55 = *(void (**)(void, void, const void *))(a1 + 48);
          if (v55) {
            v55(*(void *)(a1 + 56), 0, v54);
          }
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), 0);
          --v49;
        }
        while (v49);
      }
    }
  }
LABEL_99:
  if (v4) {
    BOOL v42 = v4 == 3;
  }
  else {
    BOOL v42 = 1;
  }
  if (v42) {
    return 0;
  }
  char v44 = *(void (**)(void, uint64_t, void))(a1 + 48);
  if (v44) {
    v44(*(void *)(a1 + 56), v4, 0);
  }
  return v4;
}

CMItemCount RunConverter_0(uint64_t a1, CMSampleBufferRef sbuf)
{
  v80[1] = *MEMORY[0x1E4F143B8];
  if (!sbuf)
  {
    if (*(_DWORD *)(a1 + 272) != 1) {
      return 0;
    }
    uint64_t v6 = (CMAudioFormatDescriptionRef *)(a1 + 24);
    if (*(void *)(a1 + 24))
    {
      CMItemCount v5 = 10;
      goto LABEL_11;
    }
    return FigSignalErrorAt();
  }
  CMItemCount result = CMSampleBufferGetNumSamples(sbuf);
  if (!result) {
    return result;
  }
  CMItemCount v5 = result;
  uint64_t v6 = (CMAudioFormatDescriptionRef *)(a1 + 24);
  if (*(void *)(a1 + 24)) {
    goto LABEL_11;
  }
  v76.CMTimeValue value = 0;
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  RichestDecodableFormat = CMAudioFormatDescriptionGetRichestDecodableFormat(FormatDescription);
  if (!RichestDecodableFormat) {
    return FigSignalErrorAt();
  }
  unint64_t v9 = RichestDecodableFormat;
  UInt32 v10 = (AudioConverterRef *)(a1 + 136);
  if (!AudioConverterNew(&RichestDecodableFormat->mASBD, (const AudioStreamBasicDescription *)(a1 + 40), (AudioConverterRef *)(a1 + 136)))
  {
    LODWORD(v75.CFDictionarySetValue(theDict, key, value) = 0;
    if (!CMAudioFormatDescriptionGetMagicCookie(FormatDescription, (size_t *)&v76)
      || !HIDWORD(v76.value)
      && (MagicCookie = CMAudioFormatDescriptionGetMagicCookie(FormatDescription, (size_t *)&v76),
          !AudioConverterSetProperty(*v10, 0x646D6763u, v76.value, MagicCookie)))
    {
      if (v9->mASBD.mFormatID == 1819304813 {
        || (LODWORD(v75.CFDictionarySetValue(theDict, key, value) = 4,
      }
            AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 136), 0x74627566u, (UInt32 *)&v75, (void *)(a1 + 88)),
            LODWORD(v75.CFDictionarySetValue(theDict, key, value) = 4,
            !AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 136), 0x70616B66u, (UInt32 *)&v75, (void *)(a1 + 92)))
        && (LODWORD(v75.CFDictionarySetValue(theDict, key, value) = 4,
            !AudioConverterGetProperty(*(AudioConverterRef *)(a1 + 136), 0x70616B62u, (UInt32 *)&v75, (void *)(a1 + 96))))
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
        *(void *)(a1 + 264) = Mutable;
        if (Mutable)
        {
          double v57 = *v10;
          if (*v10)
          {
            inPropertyData.duration.CMTimeValue value = 0;
            AudioConverterSetProperty(v57, 0x7072696Du, 8u, &inPropertyData);
            double v57 = *v10;
          }
          LODWORD(v75.CFDictionarySetValue(theDict, key, value) = 8;
          CFStringRef v58 = (void *)(a1 + 144);
          if (AudioConverterGetProperty(v57, 0x6877727Au, (UInt32 *)&v75, (void *)(a1 + 144)) || !*v58) {
            *CFStringRef v58 = 0;
          }
          if ((*(unsigned char *)(a1 + 52) & 0x20) != 0)
          {
            CFDictionaryRef v60 = malloc_type_calloc(1uLL, 16 * (*(_DWORD *)(a1 + 68) - 1) + 24, 0x6F5B84CFuLL);
            *(void *)(a1 + 80) = v60;
            if (v60)
            {
              uint64_t v61 = *(unsigned int *)(a1 + 68);
              _DWORD *v60 = v61;
              if (v61)
              {
                CFStringRef v62 = v60 + 2;
                do
                {
                  *CFStringRef v62 = 1;
                  v62 += 4;
                  --v61;
                }
                while (v61);
              }
              goto LABEL_7;
            }
          }
          else
          {
            CFDictionaryRef v59 = malloc_type_calloc(1uLL, 0x18uLL, 0x10800404ACF7207uLL);
            *(void *)(a1 + 80) = v59;
            if (v59)
            {
              *CFDictionaryRef v59 = 1;
              v59[2] = *(_DWORD *)(a1 + 68);
              goto LABEL_7;
            }
          }
        }
      }
    }
  }
  if (FigSignalErrorAt()) {
    return FigSignalErrorAt();
  }
LABEL_7:
  CMFormatDescriptionRef v11 = CMSampleBufferGetFormatDescription(sbuf);
  *uint64_t v6 = v11;
  CFRetain(v11);
LABEL_11:
  CMItemCount result = acquireHardware_0(a1);
  if (result) {
    return result;
  }
  uint64_t v12 = CMAudioFormatDescriptionGetRichestDecodableFormat(*v6);
  if (!v12) {
    return 4294954516;
  }
  uint64_t v13 = v12;
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a1 + 32));
  if (!StreamBasicDescription) {
    return 4294954516;
  }
  UInt32 v15 = StreamBasicDescription;
  CFStringRef v16 = *(const void **)(a1 + 160);
  *(void *)(a1 + 160) = sbuf;
  if (sbuf) {
    CFRetain(sbuf);
  }
  if (v16) {
    CFRelease(v16);
  }
  unsigned int appended = 0;
  uint64_t v18 = 0;
  CFTypeID v70 = (_OWORD *)(a1 + 192);
LABEL_19:
  size_t v19 = v5 - v18;
  while (1)
  {
    if (appended == 3 || v5 <= v18) {
      goto LABEL_95;
    }
    CMBlockBufferRef theBuffer = 0;
    size_t v20 = (v13->mASBD.mFramesPerPacket * v19 * *(_DWORD *)(a1 + 56));
    UInt32 ioOutputDataPacketSize = v13->mASBD.mFramesPerPacket * v19;
    if ((v15->mFormatFlags & 0x20) == 0)
    {
      uint64_t v21 = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 296), v20, 0);
      uint64_t v22 = *(void *)(a1 + 80);
      *(void *)(v22 + 16) = v21;
      if (v21)
      {
        *(_DWORD *)(v22 + 12) = v20;
        goto LABEL_31;
      }
      CFAllocatorRef v54 = *(const __CFAllocator **)(a1 + 296);
      uint64_t v27 = (unsigned int *)v22;
LABEL_94:
      deallocateAndZeroBufferListDataPointers(v27, v54);
      unsigned int appended = -12786;
      goto LABEL_95;
    }
    size_t v23 = v19;
    if (*(_DWORD *)(a1 + 68))
    {
      uint64_t v24 = 0;
      unint64_t v25 = 0;
      while (1)
      {
        CFStringRef v26 = CFAllocatorAllocate(*(CFAllocatorRef *)(a1 + 296), v20, 0);
        uint64_t v27 = *(unsigned int **)(a1 + 80);
        *(void *)&v27[v24 + 4] = v26;
        if (!v26) {
          break;
        }
        v27[v24 + 3] = v20;
        ++v25;
        v24 += 4;
        if (v25 >= *(unsigned int *)(a1 + 68)) {
          goto LABEL_29;
        }
      }
      CFAllocatorRef v54 = *(const __CFAllocator **)(a1 + 296);
      goto LABEL_94;
    }
LABEL_29:
    if (appended) {
      goto LABEL_95;
    }
    uint64_t v22 = *(void *)(a1 + 80);
    size_t v19 = v23;
LABEL_31:
    OSStatus v28 = AudioConverterFillComplexBuffer(*(AudioConverterRef *)(a1 + 136), (AudioConverterComplexInputDataProc)fadDecoderInputProc, (void *)a1, &ioOutputDataPacketSize, (AudioBufferList *)v22, 0);
    unsigned int appended = v28;
    if (v28 && v28 != 3) {
      goto LABEL_123;
    }
    if (ioOutputDataPacketSize) {
      break;
    }
    deallocateAndZeroBufferListDataPointers(*(unsigned int **)(a1 + 80), *(CFAllocatorRef *)(a1 + 296));
    if (*(_DWORD *)(a1 + 272) == 1) {
      goto LABEL_95;
    }
  }
  CFAllocatorRef v29 = *(const __CFAllocator **)(a1 + 296);
  int v64 = v19;
  if ((v15->mFormatFlags & 0x20) != 0)
  {
    OSStatus v31 = CMBlockBufferCreateEmpty(v29, *(_DWORD *)(a1 + 68), 0, &theBuffer);
    if (v31)
    {
      unsigned int appended = v31;
LABEL_123:
      uint64_t v30 = *(void *)(a1 + 80);
      goto LABEL_124;
    }
    if (*(_DWORD *)(a1 + 68))
    {
      uint64_t v32 = 0;
      unint64_t v33 = 0;
      char v34 = *(unsigned int **)(a1 + 80);
      while (1)
      {
        unsigned int appended = CMBlockBufferAppendMemoryBlock(theBuffer, *(void **)&v34[v32 + 4], v20, *(CFAllocatorRef *)(a1 + 296), 0, 0, v15->mBytesPerPacket * ioOutputDataPacketSize, 0);
        char v34 = *(unsigned int **)(a1 + 80);
        if (appended) {
          break;
        }
        uint64_t v35 = &v34[v32];
        *((void *)v35 + 2) = 0;
        v35[3] = 0;
        ++v33;
        v32 += 4;
        if (v33 >= *(unsigned int *)(a1 + 68))
        {
          unsigned int appended = 0;
          goto LABEL_47;
        }
      }
      deallocateAndZeroBufferListDataPointers(v34, *(CFAllocatorRef *)(a1 + 296));
      CFRelease(theBuffer);
LABEL_47:
      LODWORD(v19) = v64;
    }
    else
    {
      unsigned int appended = 0;
    }
LABEL_48:
    CMBlockBufferRef v36 = theBuffer;
    uint64_t v37 = ioOutputDataPacketSize;
    if (!ioOutputDataPacketSize)
    {
      uint64_t v37 = 0;
      goto LABEL_82;
    }
    bufferReference = theBuffer;
    unsigned int v38 = 0;
    uint64_t v63 = ioOutputDataPacketSize;
    uint64_t v65 = v18;
    while (1)
    {
      unsigned int v39 = v37 - v38;
      if (CFArrayGetCount(*(CFArrayRef *)(a1 + 264)) >= 1)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 264), 0);
        unint64_t v41 = *(void *)ValueAtIndex;
        uint64_t v42 = *(void *)(a1 + 256);
        uint64_t v43 = v42 + v38;
        if (*(void *)ValueAtIndex == v43)
        {
          unsigned int v44 = ValueAtIndex[2] - v41;
          if (v39 < v44)
          {
            *(void *)CFStringRef ValueAtIndex = v41 + v39;
            goto LABEL_80;
          }
          free(ValueAtIndex);
          CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(a1 + 264), 0);
          uint64_t v18 = v65;
          goto LABEL_67;
        }
        unsigned int v45 = v41 - v43;
        if (v42 + v37 > v41) {
          unsigned int v39 = v45;
        }
      }
      CMSampleBufferRef v78 = 0;
      CMBlockBufferRef v79 = 0;
      memset(&inPropertyData, 0, sizeof(inPropertyData));
      CMTime v76 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      long long v67 = *(_OWORD *)&v76.value;
      CMTimeEpoch epoch = v76.epoch;
      CMTimeMake(&inPropertyData.duration, *(unsigned int *)(a1 + 60), (int)*(double *)(a1 + 40));
      *(_OWORD *)&inPropertyData.presentationTimeStamp.CMTimeValue value = *v70;
      inPropertyData.presentationTimeStamp.CMTimeEpoch epoch = *(void *)(a1 + 208);
      *(_OWORD *)&inPropertyData.decodeTimeStamp.CMTimeValue value = v67;
      inPropertyData.decodeTimeStamp.CMTimeEpoch epoch = epoch;
      CMItemCount v68 = v39;
      CMTimeMake(&v76, v39, (int)*(double *)(a1 + 40));
      *(_OWORD *)&lhs.CMTimeValue value = *v70;
      lhs.CMTimeEpoch epoch = *(void *)(a1 + 208);
      CMTime rhs = v76;
      CMTimeAdd(&v75, &lhs, &rhs);
      *CFTypeID v70 = *(_OWORD *)&v75.value;
      *(void *)(a1 + 208) = v75.epoch;
      unsigned int v47 = *(_DWORD *)(a1 + 56);
      size_t v19 = v47 * v38;
      size_t v66 = v47;
      size_t v48 = v47 * v39;
      unsigned int v44 = v39;
      if ((*(unsigned char *)(a1 + 52) & 0x20) != 0 && *(_DWORD *)(a1 + 68) != 1)
      {
        v75.CMTimeValue value = 0;
        if (CMBlockBufferGetDataPointer(bufferReference, 0, (size_t *)&v75, 0, 0)
          || CMBlockBufferCreateEmpty(*(CFAllocatorRef *)(a1 + 296), *(_DWORD *)(a1 + 68), 0, &v79))
        {
          goto LABEL_79;
        }
        if (*(_DWORD *)(a1 + 68))
        {
          uint64_t v53 = 0;
          while (!CMBlockBufferAppendBufferReference(v79, bufferReference, v19 + v75.value * v53, v48, 0))
          {
            if (++v53 >= (unint64_t)*(unsigned int *)(a1 + 68)) {
              goto LABEL_75;
            }
          }
          if (v79) {
            CFRelease(v79);
          }
LABEL_79:
          uint64_t v37 = v63;
          LODWORD(v19) = v64;
LABEL_80:
          uint64_t v18 = v65;
          goto LABEL_81;
        }
LABEL_75:
        sampleSizeArraCGFloat y = 0;
        CMItemCount v51 = 0;
        uint64_t v37 = v63;
        LODWORD(v19) = v64;
        unsigned int v44 = v39;
        uint64_t v18 = v65;
      }
      else
      {
        OSStatus v49 = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(a1 + 296), bufferReference, v19, v48, 0, &v79);
        uint64_t v37 = v63;
        LODWORD(v19) = v64;
        uint64_t v18 = v65;
        if (v49) {
          goto LABEL_81;
        }
        sampleSizeArraCGFloat y = v80;
        CMItemCount v51 = 1;
      }
      v80[0] = v66;
      if (CMSampleBufferCreate(*(CFAllocatorRef *)(a1 + 296), v79, 1u, 0, 0, *(CMFormatDescriptionRef *)(a1 + 32), v68, 1, &inPropertyData, v51, sampleSizeArray, &v78))
      {
        if (v79) {
          CFRelease(v79);
        }
LABEL_81:
        CMBlockBufferRef v36 = theBuffer;
LABEL_82:
        *(void *)(a1 + 256) += v37;
        if (v36) {
          CFRelease(v36);
        }
        if (*(_DWORD *)(a1 + 272) == 1)
        {
          CMItemCount v5 = 10;
          uint64_t v18 = 0;
        }
        else
        {
          v18 += v19;
        }
        goto LABEL_19;
      }
      CFDictionaryRef v52 = *(void (**)(void, void, CMSampleBufferRef))(a1 + 120);
      if (v52) {
        v52(*(void *)(a1 + 128), 0, v78);
      }
      if (v79) {
        CFRelease(v79);
      }
      if (v78) {
        CFRelease(v78);
      }
LABEL_67:
      v38 += v44;
      if (v38 >= v37) {
        goto LABEL_81;
      }
    }
  }
  unsigned int appended = CMBlockBufferCreateWithMemoryBlock(v29, *(void **)(*(void *)(a1 + 80) + 16), v20, v29, 0, 0, v15->mBytesPerPacket * ioOutputDataPacketSize, 0, &theBuffer);
  uint64_t v30 = *(void *)(a1 + 80);
  if (!appended)
  {
    *(void *)(v30 + 16) = 0;
    *(_DWORD *)(v30 + 12) = 0;
    goto LABEL_48;
  }
LABEL_124:
  deallocateAndZeroBufferListDataPointers((unsigned int *)v30, *(CFAllocatorRef *)(a1 + 296));
LABEL_95:
  if (appended == 3) {
    return 0;
  }
  else {
    return appended;
  }
}

uint64_t sbp_vtcs_outputFrame(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  CFDictionaryRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 24);
  if (v8)
  {
    uint64_t v9 = *(void *)(result + 40);
    return v8(v9, a3, a5);
  }
  return result;
}

void mediaprocessor_OutputSampleBuffer(uint64_t a1, int a2, uint64_t a3)
{
  int valuePtr = a2;
  if (a2)
  {
    CFTypeRef cf = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (cf)
    {
      CFAllocatorRef v5 = CFGetAllocator((CFTypeRef)a1);
      CFDictionaryRef v6 = CFDictionaryCreate(v5, (const void **)&kFigMediaProcessorParameter_Result, &cf, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v6)
      {
        CFDictionaryRef v7 = v6;
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v7);
      }
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  if (a3)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    CMFormatDescriptionRef v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    if (v11) {
      v11(v8, a3);
    }
    ++*(_DWORD *)(a1 + 92);
  }
}

uint64_t otfw_sendSampleBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)DerivedStorage;
  uint64_t v5 = *(unsigned int *)(DerivedStorage + 8);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }

  return v8(v4, v5, a2);
}

uint64_t figMovieWriter_AddSampleBufferToTrack(uint64_t a1, int a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && !*(unsigned char *)(DerivedStorage + 335) && a3)
  {
    uint64_t v8 = 0;
    uint64_t result = getTrackInfoForTrackID(DerivedStorage, a2, &v8);
    if (!result)
    {
      uint64_t v7 = *(opaqueCMBufferQueue **)(v8 + 608);
      return CMBufferQueueEnqueue(v7, a3);
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

CMItemCount validateSampleBufferForTrackCallback(int a1, CMSampleBufferRef sbuf, uint64_t a3)
{
  CMItemCount result = CMSampleBufferGetNumSamples(sbuf);
  if (!result) {
    return result;
  }
  FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  CMMediaType MediaType = CMFormatDescriptionGetMediaType(FormatDescription);
  int v9 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 == 1635088502 || v9 == 1885954932 || v9 == 1986618469) {
    int v12 = 1986618469;
  }
  else {
    int v12 = *(_DWORD *)a3;
  }
  if (!ImageBuffer || (CFTypeID TypeID = CVPixelBufferGetTypeID(), TypeID == CFGetTypeID(ImageBuffer)))
  {
    if (FormatDescription)
    {
      if (v12 == MediaType)
      {
        CFTypeRef v14 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F2C8], 0);
        if (!v14 || !CFEqual(v14, (CFTypeRef)*MEMORY[0x1E4F1CFD0]))
        {
          if (MediaType != 1936684398) {
            return 0;
          }
          char v26 = 0;
          unsigned __int8 v22 = 0;
          CMItemCount result = FigMovieIsNonInterleavedPCMAudioSample(sbuf, &v26);
          if (result) {
            return result;
          }
          if (!v26)
          {
            memset(&v25, 0, sizeof(v25));
            double v23 = 0.0;
            memset(&v24, 0, sizeof(v24));
            getTrimDurationsAndSpeedMultiplierFromSbuf(sbuf, &v25, &v24, (char *)&v22, &v23);
            CMTime time1 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
            long long v19 = *(_OWORD *)&time1.value;
            CMTimeEpoch epoch = time1.epoch;
            CMTime time2 = v25;
            int32_t v16 = CMTimeCompare(&time1, &time2);
            *(_OWORD *)&time1.CMTimeValue value = v19;
            time1.CMTimeEpoch epoch = epoch;
            CMTime time2 = v24;
            int32_t v17 = CMTimeCompare(&time1, &time2);
            uint64_t v18 = *(void *)(a3 + 16);
            if ((*(_DWORD *)(v18 + 324) - 6) < 0xFFFFFFFB)
            {
              if (v16 || v17 || v23 != 1.0) {
                goto LABEL_31;
              }
              return 0;
            }
            if (*(_DWORD *)(a3 + 768) != 2 && !*(unsigned char *)(v18 + 384)
              || !editBoundaryDetectorDetectBoundary(*(void *)(a3 + 536), v22, v16 != 0, v17 != 0, v23))
            {
              return 0;
            }
          }
LABEL_31:
          CMItemCount result = FigSignalErrorAt();
          if (result) {
            return result;
          }
          return 0;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t wakeupWritingThreadForDataReady(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  MEMORY[0x19970E910](*(void *)(v1 + 336));
  if (*(unsigned char *)(v1 + 335)) {
    return MEMORY[0x19970E930](*(void *)(v1 + 336));
  }
  if (!*(unsigned char *)(v1 + 528))
  {
    MEMORY[0x19970E910](*(void *)(v1 + 520));
    if (*(unsigned char *)(v1 + 528))
    {
LABEL_28:
      MEMORY[0x19970E930](*(void *)(v1 + 520));
      goto LABEL_29;
    }
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v1 + 488));
    CFIndex v3 = Count;
    CMTime values = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    int v4 = *(unsigned __int8 *)(v1 + 329);
    if (*(unsigned char *)(v1 + 329))
    {
      if (*(unsigned char *)(v1 + 132)) {
        uint64_t v5 = (CMTime *)(v1 + 120);
      }
      else {
        uint64_t v5 = (CMTime *)(v1 + 96);
      }
    }
    else
    {
      if (!*(unsigned char *)(v1 + 330))
      {
LABEL_11:
        *(_OWORD *)(v1 + 220) = *(_OWORD *)(v1 + 196);
        *(void *)(v1 + 236) = *(void *)(v1 + 212);
        uint64_t v6 = MEMORY[0x1E4F1FA48];
        if (Count >= 1)
        {
          CFIndex v7 = 0;
          long long v19 = *MEMORY[0x1E4F1FA48];
          CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          do
          {
            CFStringRef ValueAtIndex = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 488), v7);
            uint64_t v10 = ValueAtIndex + 108;
            CMTime time1 = *(CMTime *)(ValueAtIndex + 108);
            *(_OWORD *)&time2.CMTimeValue value = v19;
            time2.CMTimeEpoch epoch = v8;
            int32_t v11 = CMTimeCompare(&time1, &time2);
            int v12 = ValueAtIndex + 648;
            if (v11)
            {
              *int v12 = *v10;
              *((void *)ValueAtIndex + 83) = *(void *)(ValueAtIndex + 124);
            }
            else
            {
              long long v13 = *(_OWORD *)(v1 + 48);
              *((void *)ValueAtIndex + 83) = *(void *)(v1 + 64);
              *int v12 = v13;
            }
            CMTime time2 = values;
            *(_OWORD *)&rhs.CMTimeValue value = *v10;
            rhs.CMTimeEpoch epoch = *(void *)(ValueAtIndex + 124);
            CMTimeAdd(&time1, &time2, &rhs);
            *((CMTime *)ValueAtIndex + 28) = time1;
            setTrackHeaderDataCompleteFlagIfCumulatedInterleavingDurationReachesCumulatedMovieFragmentDuration((uint64_t)ValueAtIndex);
            ++v7;
          }
          while (v3 != v7);
          int v4 = *(unsigned __int8 *)(v1 + 329);
        }
        if (v4)
        {
          LOBYTE(v4) = *(unsigned char *)(v1 + 16);
          if ((_BYTE)v4) {
            LOBYTE(v4) = *(unsigned char *)(v1 + 17) != 0;
          }
        }
        *(unsigned char *)(v1 + 331) = v4;
        uint64_t v14 = sortTrackInfoLikedList(*(void *)(v1 + 496));
        *(void *)(v1 + 496) = v14;
        *(void *)(v1 + 504) = v14;
        if ((*(unsigned char *)(v1 + 36) & 1) == 0)
        {
          *(_OWORD *)(v1 + 24) = *(_OWORD *)v6;
          *(void *)(v1 + 40) = *(void *)(v6 + 16);
        }
        values.CMTimeValue value = (CMTimeValue)@"com.apple.coremedia.formatwriter.qtmovie";
        CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFDictionaryRef v16 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21EA8], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        FigThreadCreate();
        if (*(_DWORD *)(v1 + 536))
        {
          CFNumberRef v17 = CFNumberCreate(v15, kCFNumberSInt32Type, (const void *)(v1 + 536));
          FigThreadSetProperty();
          CFRelease(v17);
        }
        if (v16) {
          CFRelease(v16);
        }
        FigMemoryBarrier();
        *(unsigned char *)(v1 + 528) = 1;
        goto LABEL_28;
      }
      uint64_t v5 = (CMTime *)(v1 + 144);
    }
    CMTime values = *v5;
    goto LABEL_11;
  }
LABEL_29:
  if ((*(unsigned char *)(v1 + 36) & 1) == 0) {
    FigSignalErrorAt();
  }
  if (*(void *)(v1 + 552)) {
    FigSemaphoreSignal();
  }
  return MEMORY[0x19970E930](*(void *)(v1 + 336));
}

uint64_t sortTrackInfoLikedList(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = *(void *)(result + 24);
    if (v1)
    {
      uint64_t v2 = *(void *)(v1 + 24);
      uint64_t v3 = result;
      if (v2)
      {
        uint64_t v3 = result;
        do
        {
          uint64_t v3 = *(void *)(v3 + 24);
          uint64_t v4 = *(void *)(v2 + 24);
          if (!v4) {
            break;
          }
          uint64_t v2 = *(void *)(v4 + 24);
        }
        while (v2);
        uint64_t v1 = *(void *)(v3 + 24);
      }
      *(void *)(v3 + 24) = 0;
      uint64_t v5 = ((uint64_t (*)(void))sortTrackInfoLikedList)();
      uint64_t v6 = sortTrackInfoLikedList(v1);
      return mergeTrackInfoLinkedList(v5, v6);
    }
  }
  return result;
}

uint64_t writingThread(uint64_t a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(a1 + 329) && *(unsigned char *)(a1 + 330)) {
    goto LABEL_115;
  }
  if (*(unsigned char *)(a1 + 384) || *(unsigned char *)(a1 + 330))
  {
    int BlockBufferByteStreamForMovieSampleDataWriter = createBlockBufferByteStreamForMovieSampleDataWriter(a1);
    if (BlockBufferByteStreamForMovieSampleDataWriter)
    {
LABEL_112:
      int v5 = BlockBufferByteStreamForMovieSampleDataWriter;
      goto LABEL_14;
    }
  }
  else
  {
    int BlockBufferByteStreamForMovieSampleDataWriter = MovieSampleDataWriterSetDefaultByteStream(*(void *)(a1 + 744), *(const void **)(a1 + 8));
    if (BlockBufferByteStreamForMovieSampleDataWriter) {
      goto LABEL_112;
    }
  }
  int BlockBufferByteStreamForMovieSampleDataWriter = MovieSampleDataWriterSetThreadPriorityAndClientPID(*(void *)(a1 + 744));
  if (BlockBufferByteStreamForMovieSampleDataWriter) {
    goto LABEL_112;
  }
  memset(&token_out, 0, sizeof(token_out));
  if (!*(unsigned char *)(a1 + 600))
  {
    int v5 = 0;
    goto LABEL_13;
  }
  memset((char *)&v38[2] + 4, 0, 28);
  memset((char *)v38 + 4, 0, 32);
  LODWORD(v38[0]) = 799564724;
  if (os_workgroup_attr_set_flags()) {
    goto LABEL_115;
  }
  uint64_t v3 = (OS_os_workgroup *)os_workgroup_create();
  if (!v3)
  {
    __error();
LABEL_115:
    int v5 = FigSignalErrorAt();
    goto LABEL_13;
  }
  uint64_t v4 = v3;
  if (os_workgroup_join(v3, &token_out))
  {
    int v5 = FigSignalErrorAt();
    os_release(v4);
  }
  else
  {
    int v5 = 0;
    *(void *)(a1 + 608) = v4;
    *(void *)(a1 + 648) = *(void *)&token_out.opaque[28];
    long long v6 = *(_OWORD *)&token_out.opaque[12];
    *(_OWORD *)(a1 + 616) = *(_OWORD *)&token_out.sig;
    *(_OWORD *)(a1 + 632) = v6;
  }
LABEL_13:
  if (v5) {
LABEL_14:
  }
    setWritingThreadErrorAndPostErrorOccurredNotification(a1, v5);
  if (*(unsigned char *)(a1 + 563)) {
    goto LABEL_16;
  }
  uint64_t v9 = *MEMORY[0x1E4F1CF80];
  uint64_t v10 = MEMORY[0x1E4F1F9F8];
  do
  {
    if (*(unsigned char *)(a1 + 560))
    {
      int v11 = flushAllSampleBufferQueues(a1);
      if (v11)
      {
        int v12 = v11;
      }
      else
      {
        int v12 = MovieSampleDataWriterFlush(*(uint64_t **)(a1 + 744));
        if (!v12)
        {
LABEL_24:
          *(unsigned char *)(a1 + 560) = 0;
LABEL_101:
          FigSemaphoreSignal();
          goto LABEL_102;
        }
      }
      setWritingThreadErrorAndPostErrorOccurredNotification(a1, v12);
      goto LABEL_24;
    }
    if (*(unsigned char *)(a1 + 562))
    {
      int v13 = writeMovieHeader(a1, *(unsigned char *)(a1 + 17) != 0, 0);
      if (v13)
      {
        int v17 = v13;
      }
      else
      {
        if (!*(unsigned char *)(a1 + 329) || !*(unsigned char *)(a1 + 531)) {
          goto LABEL_44;
        }
        uint64_t v14 = *(void *)(a1 + 360);
        CMBlockBufferRef theBuffer = 0;
        *(void *)&v38[0] = 0;
        *(void *)&token_out.sig = 0;
        int FirstMediaDataAtomOffset = MovieSampleDataWriterGetFirstMediaDataAtomOffset(*(void *)(a1 + 744), 0, v38);
        if (FirstMediaDataAtomOffset) {
          goto LABEL_109;
        }
        int FirstMediaDataAtomOffset = MovieSampleDataWriterCopyURLOfDefaultByteStream(*(void *)(a1 + 744), v9, &token_out);
        if (FirstMediaDataAtomOffset) {
          goto LABEL_109;
        }
        int FirstMediaDataAtomOffset = createMovieAtomBBuf(a1, 0, *(const __CFURL **)&token_out.sig, (CFTypeRef *)&theBuffer);
        if (FirstMediaDataAtomOffset
          || (CFDictionaryRef v16 = theBuffer,
              *(void *)(a1 + 368) = CMBlockBufferGetDataLength(theBuffer),
              (int FirstMediaDataAtomOffset = MovieSampleDataWriterAppendHeader(*(void *)(a1 + 744), v16, (void *)(a1 + 360))) != 0)|| (MovieSampleDataWriterSynchronizeDefaultByteStream(*(void *)(a1 + 744), 1, 0), (int FirstMediaDataAtomOffset = MovieSampleDataWriterWriteData(*(void *)(a1 + 744), 1, v14 + 4, (uint64_t)"h")) != 0)|| (*(unsigned char *)(a1 + 352) = 0, (int FirstMediaDataAtomOffset = MovieSampleDataWriterPatchFirstMediaDataAtomSize(*(void *)(a1 + 744), *(void *)(a1 + 360) - *(void *)&v38[0])) != 0))
        {
LABEL_109:
          int v17 = FirstMediaDataAtomOffset;
        }
        else
        {
          if (*(unsigned char *)(a1 + 17)) {
            MovieSampleDataWriterSynchronizeDefaultByteStream(*(void *)(a1 + 744), 1, 0);
          }
          int v17 = 0;
          *(unsigned char *)(a1 + 532) = 1;
        }
        if (*(void *)&token_out.sig) {
          CFRelease(*(CFTypeRef *)&token_out.sig);
        }
        if (theBuffer) {
          CFRelease(theBuffer);
        }
        if (!v17) {
          goto LABEL_44;
        }
      }
      setWritingThreadErrorAndPostErrorOccurredNotification(a1, v17);
LABEL_44:
      *(unsigned char *)(a1 + 562) = 0;
      goto LABEL_101;
    }
    if (*(unsigned char *)(a1 + 561))
    {
      CFArrayRef v18 = *(const __CFArray **)(a1 + 488);
      if (v18)
      {
        CFIndex Count = CFArrayGetCount(v18);
        int v20 = flushAllSampleBufferQueues(a1);
        if (!v20)
        {
          if (Count >= 1)
          {
            CFIndex v21 = 0;
            do
            {
              CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v21);
              v38[0] = *(_OWORD *)(a1 + 656);
              *(void *)&v38[1] = *(void *)(a1 + 672);
              int v20 = trackEndSession((uint64_t)ValueAtIndex, v38, 2);
              if (v20) {
                goto LABEL_106;
              }
            }
            while (Count != ++v21);
          }
LABEL_99:
          *(_OWORD *)(a1 + 24) = *(_OWORD *)v10;
          *(void *)(a1 + 40) = *(void *)(v10 + 16);
LABEL_100:
          *(unsigned char *)(a1 + 561) = 0;
          goto LABEL_101;
        }
      }
      else
      {
        int v20 = flushAllSampleBufferQueues(a1);
        if (!v20) {
          goto LABEL_99;
        }
      }
LABEL_106:
      setWritingThreadErrorAndPostErrorOccurredNotification(a1, v20);
      goto LABEL_100;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v31 = *(void *)(a1 + 504);
        if (isReadyToWriteTrackHeaderWithNoSamples(v31))
        {
          int v28 = 0;
          int v30 = 0;
          int v29 = 6;
          goto LABEL_86;
        }
        if (reachedInterleavingPeriod(v31))
        {
          int v28 = 0;
          int v30 = 0;
          int v29 = 1;
          goto LABEL_86;
        }
        if (trackBufferQueueIsSampleAvailable(v31))
        {
          int v28 = 0;
          int v30 = 0;
          int v29 = 2;
          goto LABEL_86;
        }
        if (trackBufferQueueIsAtEndOfData(v31)) {
          break;
        }
        if (!*(unsigned char *)(v31 + 352) && !*(_DWORD *)(v31 + 100))
        {
          int v28 = 0;
          int v29 = 5;
          int v30 = 1;
          goto LABEL_86;
        }
        uint64_t v26 = *(void *)(a1 + 504);
        if (!v26) {
          goto LABEL_102;
        }
        while (!CMBufferQueueTestTrigger(*(CMBufferQueueRef *)(v26 + 608), *(CMBufferQueueTriggerToken *)(v26 + 640)))
        {
          if (*(void *)(v26 + 24)) {
            uint64_t v26 = *(void *)(v26 + 24);
          }
          else {
            uint64_t v26 = *(void *)(a1 + 496);
          }
          if (v26 == *(void *)(a1 + 504)) {
            goto LABEL_102;
          }
        }
        uint64_t v27 = *(void *)(a1 + 504);
        if (!*(_DWORD *)(v27 + 100))
        {
          uint64_t v27 = *(void *)(v27 + 24) ? *(void *)(v27 + 24) : *(void *)(a1 + 496);
          if (v27 == v26)
          {
            if (*(void *)(v26 + 24)) {
              uint64_t v27 = *(void *)(v26 + 24);
            }
            else {
              uint64_t v27 = *(void *)(a1 + 496);
            }
          }
        }
        setNextCumulatedInterleavingDuration((CMTime *)v31);
        *(void *)(a1 + 504) = v26;
        *(void *)(a1 + 512) = v27;
      }
      int v30 = 0;
      int v29 = 3;
      int v28 = 1;
LABEL_86:
      LOBYTE(v38[0]) = 1;
      LOBYTE(token_out.sig) = 1;
      int v32 = handleWritingThreadEvent(v31, v29, (BOOL *)v38, (char *)&token_out);
      if (v32) {
        break;
      }
      if (LOBYTE(v38[0]))
      {
        uint64_t v33 = *(void *)(a1 + 512);
        if (v33)
        {
          *(void *)(a1 + 504) = v33;
          *(void *)(a1 + 512) = 0;
        }
        else
        {
          uint64_t v34 = *(void *)(a1 + 496);
          if (*(void *)(v31 + 24)) {
            uint64_t v34 = *(void *)(v31 + 24);
          }
          *(void *)(a1 + 504) = v34;
        }
      }
      if (LOBYTE(token_out.sig)) {
        setNextCumulatedInterleavingDuration((CMTime *)v31);
      }
      if ((v28 | v30) == 1)
      {
        CFIndex v35 = CFArrayGetCount(*(CFArrayRef *)(a1 + 488));
        if (v35 < 1) {
          goto LABEL_102;
        }
        CFIndex v23 = v35;
        CFIndex v24 = 0;
        while (1)
        {
          CMTime v25 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 488), v24);
          if (!trackBufferQueueIsAtEndOfData((uint64_t)v25)
            && (v25[352] || trackBufferQueueIsSampleAvailable((uint64_t)v25)))
          {
            break;
          }
          if (v23 == ++v24) {
            goto LABEL_102;
          }
        }
      }
    }
    setWritingThreadErrorAndPostErrorOccurredNotification(a1, v32);
LABEL_102:
    int v36 = MovieSampleDataWriterFlush(*(uint64_t **)(a1 + 744));
    if (v36) {
      setWritingThreadErrorAndPostErrorOccurredNotification(a1, v36);
    }
    FigSemaphoreWaitRelative();
  }
  while (!*(unsigned char *)(a1 + 563));
LABEL_16:
  CFIndex v7 = *(OS_os_workgroup **)(a1 + 608);
  if (v7) {
    os_workgroup_leave(v7, (os_workgroup_join_token_t)(a1 + 616));
  }
  return 0;
}

BOOL reachedInterleavingPeriod(uint64_t a1)
{
  memset(&v5, 0, sizeof(v5));
  getMediaDecodeDuration(a1, &v5);
  if ((v5.flags & 1) == 0) {
    FigSignalErrorAt();
  }
  if (*(_DWORD *)(a1 + 100)) {
    return 0;
  }
  CMTime time1 = *(CMTime *)(a1 + 648);
  CMTime v3 = v5;
  return CMTimeCompare(&time1, &v3) < 1;
}

uint64_t facEncoderInputProc(uint64_t a1, unsigned int *a2, unsigned int *a3, uint64_t a4, uint64_t a5)
{
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a5 + 24));
  uint64_t v9 = CMAudioFormatDescriptionGetStreamBasicDescription(*(CMAudioFormatDescriptionRef *)(a5 + 32));
  uint64_t v10 = *(const void **)(a5 + 96);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a5 + 96) = 0;
  }
  int v11 = *(opaqueCMSampleBuffer **)(a5 + 88);
  *(void *)(a5 + 88) = 0;
  if (!v11)
  {
    *a2 = 0;
    if (*(_DWORD *)(a5 + 196) == 1) {
      return 0;
    }
    else {
      return 3;
    }
  }
  if (!*(unsigned char *)(a5 + 144))
  {
    CMSampleBufferGetPresentationTimeStamp(&v57, v11);
    *(CMTime *)(a5 + 120) = v57;
    *(unsigned char *)(a5 + 144) = 1;
  }
  if (CMSampleBufferGetAudioBufferListWithRetainedBlockBuffer(v11, 0, *(AudioBufferList **)(a5 + 104), *(void *)(a5 + 112), (CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CMBlockBufferRef *)(a5 + 96)))
  {
    *a2 = 0;
    return FigSignalErrorAt();
  }
  int v13 = *(_DWORD **)(a5 + 104);
  unsigned int NumSamples = CMSampleBufferGetNumSamples(v11);
  unsigned int v15 = NumSamples;
  CFDictionaryRef v16 = *(unsigned int **)(a5 + 176);
  if (v16)
  {
    if (StreamBasicDescription->mChannelsPerFrame != 2 || v9->mChannelsPerFrame != 1)
    {
LABEL_70:
      int v13 = *(_DWORD **)(a5 + 176);
      goto LABEL_71;
    }
    unint64_t v17 = *v16;
    size_t v18 = NumSamples * (unint64_t)(StreamBasicDescription->mBytesPerPacket >> 1);
    if (v17 == 1)
    {
      v18 *= v16[2];
      long long v19 = (size_t *)(a5 + 184);
      if (v18 <= *(void *)(a5 + 184))
      {
        unint64_t v17 = 1;
LABEL_31:
        uint64_t v25 = 3;
        do
        {
          v16[v25] = v18;
          v25 += 4;
          --v17;
        }
        while (v17);
LABEL_33:
        AudioFormatFlags mFormatFlags = StreamBasicDescription->mFormatFlags;
        if (mFormatFlags)
        {
          if (v15)
          {
            CFIndex v35 = (float *)*((void *)v16 + 2);
            int v36 = *(float **)(*(void *)(a5 + 104) + 16);
            unsigned int v37 = v15;
            do
            {
              float v38 = *v36;
              float v39 = v36[1];
              v36 += 2;
              *v35++ = (float)(v39 * 0.707) + (float)(v38 * 0.707);
              --v37;
            }
            while (v37);
          }
        }
        else
        {
          UInt32 mBitsPerChannel = StreamBasicDescription->mBitsPerChannel;
          if ((mFormatFlags & 2) != 0 || StreamBasicDescription->mFormatID != 1819304813)
          {
            uint64_t v40 = *(unsigned __int16 **)(*(void *)(a5 + 104) + 16);
            unint64_t v41 = (__int16 *)*((void *)v16 + 2);
            if (mBitsPerChannel == 16) {
              StereoMonoDownMix16SwappedEndian(v40, v41, v15);
            }
            else {
              StereoMonoDownMix32SwappedEndian((unsigned int *)v40, (unsigned int *)v41, v15);
            }
          }
          else if (mBitsPerChannel == 16)
          {
            if (v15)
            {
              int v28 = (__int16 *)*((void *)v16 + 2);
              int v29 = *(__int16 **)(*(void *)(a5 + 104) + 16);
              unsigned int v30 = v15;
              do
              {
                int v31 = ((2896 * v29[1]) >> 12) + ((2896 * *v29) >> 12);
                if (v31 >= 0x7FFF) {
                  __int16 v32 = 0x7FFF;
                }
                else {
                  __int16 v32 = ((2896 * v29[1]) >> 12) + ((2896 * *v29) >> 12);
                }
                if (v31 <= -32768) {
                  __int16 v33 = 0x8000;
                }
                else {
                  __int16 v33 = ((2896 * v29[1]) >> 12) + ((2896 * *v29) >> 12);
                }
                if (v31 <= 0) {
                  __int16 v34 = v33;
                }
                else {
                  __int16 v34 = v32;
                }
                *v28++ = v34;
                v29 += 2;
                --v30;
              }
              while (v30);
            }
          }
          else if (v15)
          {
            uint64_t v42 = (unsigned int *)*((void *)v16 + 2);
            uint64_t v43 = *(int **)(*(void *)(a5 + 104) + 16);
            unsigned int v44 = v15;
            do
            {
              int v45 = *v43;
              int v46 = v43[1];
              v43 += 2;
              uint64_t v47 = ((11863283 * v46) >> 24) + ((11863283 * v45) >> 24);
              if (v47 >= 0x7FFFFFFF) {
                int v48 = 0x7FFFFFFF;
              }
              else {
                int v48 = v47;
              }
              if (v47 <= (uint64_t)0xFFFFFFFF80000000) {
                unsigned int v49 = 0x80000000;
              }
              else {
                unsigned int v49 = v47;
              }
              if (v47 <= 0) {
                unsigned int v50 = v49;
              }
              else {
                unsigned int v50 = v48;
              }
              *v42++ = v50;
              --v44;
            }
            while (v44);
          }
        }
        goto LABEL_70;
      }
    }
    else
    {
      long long v19 = (size_t *)(a5 + 184);
      if (v18 <= *(void *)(a5 + 184)) {
        goto LABEL_30;
      }
      if (!*v16)
      {
LABEL_29:
        *long long v19 = v18;
LABEL_30:
        if (!v17) {
          goto LABEL_33;
        }
        goto LABEL_31;
      }
    }
    unint64_t v20 = 0;
    CFIndex v21 = (void **)(v16 + 4);
    do
    {
      if (*v21)
      {
        free(*v21);
        *CFIndex v21 = 0;
        unint64_t v17 = *v16;
      }
      *((_DWORD *)v21 - 1) = 0;
      ++v20;
      v21 += 2;
    }
    while (v20 < v17);
    CFDictionaryRef v16 = *(unsigned int **)(a5 + 176);
    if (*v16)
    {
      unint64_t v22 = 0;
      uint64_t v23 = 4;
      while (1)
      {
        CFIndex v24 = malloc_type_malloc(v18, 0x35D0D8F5uLL);
        CFDictionaryRef v16 = *(unsigned int **)(a5 + 176);
        *(void *)&v16[v23] = v24;
        if (!v24) {
          goto LABEL_33;
        }
        ++v22;
        unint64_t v17 = *v16;
        v23 += 4;
        if (v22 >= v17) {
          goto LABEL_29;
        }
      }
    }
    unint64_t v17 = 0;
    goto LABEL_29;
  }
LABEL_71:
  uint64_t v51 = *a3;
  if (v51)
  {
    unint64_t v52 = 0;
    unsigned int v55 = *v13;
    CFAllocatorRef v54 = v13 + 4;
    unint64_t v53 = v55;
    CFStringRef v56 = a3 + 4;
    do
    {
      if (v52 < v53)
      {
        *(v56 - 1) = *(v54 - 1);
        *CFStringRef v56 = *v54;
      }
      ++v52;
      v54 += 2;
      v56 += 2;
    }
    while (v51 != v52);
  }
  uint64_t result = 0;
  *a2 = v15;
  *(void *)(a5 + 200) += v15;
  return result;
}

uint64_t handleWritingThreadEvent(uint64_t a1, int a2, BOOL *a3, char *a4)
{
  uint64_t v7 = *(void *)(a1 + 16);
  switch(a2)
  {
    case 1:
      if (!*(unsigned char *)(v7 + 329) && !*(unsigned char *)(v7 + 330) || !*(unsigned char *)(a1 + 601)) {
        goto LABEL_34;
      }
      uint64_t v12 = setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible(a1);
      if (!v12)
      {
        *(unsigned char *)(a1 + 601) = 0;
        goto LABEL_34;
      }
      return v12;
    case 2:
      CMSampleBufferRef sbuf = 0;
      if (*(unsigned char *)(v7 + 329))
      {
        if (*(unsigned char *)(v7 + 332))
        {
          if (!*(unsigned char *)(v7 + 352) && !*(unsigned char *)(a1 + 600))
          {
            Head = (opaqueCMSampleBuffer *)CMBufferQueueGetHead(*(CMBufferQueueRef *)(a1 + 608));
            CMSampleBufferRef sbuf = Head;
            if (CMSampleBufferGetNumSamples(Head))
            {
              CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(Head);
              uint64_t started = MovieTrackFindOrAddSampleDescription(*(void *)(a1 + 736), FormatDescription, 0, 0);
              if (started) {
                return started;
              }
              goto LABEL_74;
            }
          }
        }
      }
      if (!*(unsigned char *)(v7 + 168))
      {
        CMTime v50 = *(CMTime *)(v7 + 48);
        uint64_t started = trackBufferQueueDequeueAndRetain(a1, &v50, &sbuf);
        if (started) {
          return started;
        }
        CFIndex v21 = sbuf;
        goto LABEL_78;
      }
      uint64_t v43 = 0;
      uint64_t v13 = *(void *)(a1 + 16);
      long long v40 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)&v44.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v14 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      v44.CMTimeEpoch epoch = v14;
      if (*(_DWORD *)a1 != 1936684398) {
        goto LABEL_60;
      }
      if (*(void *)(a1 + 776)) {
        goto LABEL_60;
      }
      unsigned int v15 = (opaqueCMSampleBuffer *)trackBufferQueueGetHead(a1);
      if (!v15) {
        goto LABEL_60;
      }
      CFDictionaryRef v16 = v15;
      if (!CMSampleBufferGetNumSamples(v15)) {
        goto LABEL_60;
      }
      unint64_t v17 = (_OWORD *)(a1 + 784);
      int v18 = *(unsigned __int8 *)(a1 + 810);
      if (*(unsigned char *)(a1 + 810)) {
        goto LABEL_49;
      }
      if (*(unsigned char *)(a1 + 808))
      {
        if (*(unsigned char *)(a1 + 809)) {
          goto LABEL_26;
        }
        goto LABEL_47;
      }
      unint64_t v22 = CMSampleBufferGetFormatDescription(v16);
      if (v22)
      {
        memset(&v50, 0, sizeof(v50));
        FigGaplessInfoGetDefaultAudioPrimingDuration(v22, &v50);
        if (v50.flags)
        {
          CMTime v49 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
          CMTime time1 = v50;
          unsigned int v23 = CMTimeCompare(&v49, &time1) >> 31;
        }
        else
        {
          unsigned int v23 = 0;
        }
        *(unsigned char *)(a1 + 809) = v23;
        *(unsigned char *)(a1 + 808) = 1;
        if (v23)
        {
LABEL_26:
          CFDictionaryRef v19 = (const __CFDictionary *)CMGetAttachment(v16, (CFStringRef)*MEMORY[0x1E4F1F308], 0);
          memset(&v50, 0, sizeof(v50));
          CMSampleBufferGetDuration(&v50, v16);
          memset(&v49, 0, sizeof(v49));
          CMTimeMakeFromDictionary(&v49, v19);
          if ((v49.flags & 1) == 0) {
            CMTime v49 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
          }
          if (*(unsigned char *)(a1 + 796))
          {
            *(_OWORD *)&lhs.CMTimeValue value = *v17;
            lhs.CMTimeEpoch epoch = *(void *)(a1 + 800);
            CMTime rhs = v49;
            CMTimeAdd(&time1, &lhs, &rhs);
            *unint64_t v17 = *(_OWORD *)&time1.value;
            CMTimeEpoch epoch = time1.epoch;
          }
          else
          {
            *unint64_t v17 = *(_OWORD *)&v49.value;
            CMTimeEpoch epoch = v49.epoch;
          }
          *(void *)(a1 + 800) = epoch;
          CMTime time1 = v49;
          CMTime lhs = v50;
          if ((CMTimeCompare(&time1, &lhs) & 0x80000000) == 0)
          {
            int v18 = *(unsigned __int8 *)(a1 + 810);
LABEL_49:
            int v25 = *(unsigned __int8 *)(a1 + 809);
            *(_OWORD *)&v45.CMTimeValue value = *v17;
            v45.CMTimeEpoch epoch = *(void *)(a1 + 800);
            goto LABEL_50;
          }
LABEL_48:
          int v18 = 1;
          *(unsigned char *)(a1 + 810) = 1;
          goto LABEL_49;
        }
LABEL_47:
        uint64_t v24 = MEMORY[0x1E4F1FA48];
        *unint64_t v17 = *MEMORY[0x1E4F1FA48];
        *(void *)(a1 + 800) = *(void *)(v24 + 16);
        goto LABEL_48;
      }
      uint64_t v12 = FigSignalErrorAt();
      int v25 = *(unsigned __int8 *)(a1 + 809);
      int v18 = *(unsigned __int8 *)(a1 + 810);
      *(_OWORD *)&v45.CMTimeValue value = *v17;
      v45.CMTimeEpoch epoch = *(void *)(a1 + 800);
      if (v12) {
        return v12;
      }
LABEL_50:
      if (v18 == 1)
      {
        uint64_t v26 = (uint64_t *)(a1 + 776);
        uint64_t started = AudioSampleBufferSplitterCreate((void *)(a1 + 776));
        if (started) {
          return started;
        }
        CMSampleBufferGetFormatDescription(v16);
        int v27 = FigAudioFormatDescriptionEmploysDependentPackets() ? 2 : 1;
        uint64_t started = AudioSampleBufferSplitterSetSplitMethod((_DWORD *)*v26, v27);
        if (started) {
          return started;
        }
        int v28 = (_OWORD *)(v13 + 172);
        if (v25)
        {
          *(_OWORD *)&v50.CMTimeValue value = *v28;
          v50.CMTimeEpoch epoch = *(void *)(v13 + 188);
          CMTime v49 = v45;
          CMTimeSubtract(&v44, &v50, &v49);
        }
        else
        {
          *(_OWORD *)&v44.CMTimeValue value = *v28;
          v44.CMTimeEpoch epoch = *(void *)(v13 + 188);
        }
        uint64_t v29 = *v26;
        CMTime v50 = v44;
        CMTime v49 = *(CMTime *)(v13 + 196);
        uint64_t started = AudioSampleBufferSplitterSetInitialSegmentStartTimeAndSegmentInterval(v29, (long long *)&v50.value, (long long *)&v49.value);
        if (started) {
          return started;
        }
      }
LABEL_60:
      uint64_t v30 = *(void *)(a1 + 16);
      *(_OWORD *)&v50.CMTimeValue value = v40;
      v50.CMTimeEpoch epoch = v14;
      *(_OWORD *)&v49.CMTimeValue value = v40;
      v49.CMTimeEpoch epoch = v14;
      int v31 = *(_DWORD *)(a1 + 344);
      if (v31 == 2)
      {
        __int16 v33 = *(opaqueCMSampleBuffer **)(a1 + 328);
        if (!v33) {
          goto LABEL_76;
        }
        CMSampleBufferGetOutputPresentationTimeStamp(&v50, v33);
        __int16 v32 = *(opaqueCMSampleBuffer **)(a1 + 328);
        goto LABEL_66;
      }
      if (v31 == 1)
      {
        __int16 v32 = (opaqueCMSampleBuffer *)trackBufferQueueGetHead(a1);
        if (!CMSampleBufferGetNumSamples(v32)) {
          goto LABEL_76;
        }
        CMSampleBufferGetOutputPresentationTimeStamp(&v50, v32);
LABEL_66:
        SampleAttachmentsArraCGFloat y = CMSampleBufferGetSampleAttachmentsArray(v32, 0);
        int SampleAttachmentSync = isFirstSampleAttachmentSync(SampleAttachmentsArray);
        goto LABEL_68;
      }
      int SampleAttachmentSync = 0;
LABEL_68:
      uint64_t v36 = *(void *)(a1 + 776);
      if (v36)
      {
        uint64_t started = AudioSampleBufferSplitterGetInitialSegmentStartTimeAndSegmentInterval(v36, (uint64_t)&v49, 0);
        if (started) {
          return started;
        }
      }
      else
      {
        CMTime v49 = *(CMTime *)(v30 + 172);
      }
      memset(&time1, 0, sizeof(time1));
      CMTime lhs = v50;
      CMTime rhs = v49;
      CMTimeSubtract(&time1, &lhs, &rhs);
      CMTime lhs = *(CMTime *)(v30 + 220);
      CMTime rhs = time1;
      if (CMTimeCompare(&lhs, &rhs) <= 0 && SampleAttachmentSync)
      {
LABEL_74:
        uint64_t started = setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible(a1);
        if (started) {
          return started;
        }
        BOOL v9 = 1;
        goto LABEL_82;
      }
LABEL_76:
      CMTime v50 = *(CMTime *)(*(void *)(a1 + 16) + 48);
      uint64_t started = trackBufferQueueDequeueAndRetain(a1, &v50, &v43);
      if (started) {
        return started;
      }
      CFIndex v21 = v43;
LABEL_78:
      uint64_t v12 = addSampleBufferToTrack(a1, v21);
      if (v21) {
        CFRelease(v21);
      }
      if (!v12) {
        goto LABEL_81;
      }
      return v12;
    case 3:
    case 4:
      BOOL v9 = *(void *)(a1 + 328) == 0;
      MediaSampleTimingGeneratorGetDefaultLastSampleDuration(*(CMTime **)(a1 + 752), &v41);
      uint64_t started = flushSampleBufferToTrack(a1, (uint64_t)&v41);
      if (!started)
      {
        if (a2 == 3)
        {
          if (!*(unsigned char *)(v7 + 329) && !*(unsigned char *)(v7 + 330))
          {
            char v11 = *(unsigned char *)(v7 + 168);
            if (!v11) {
              goto LABEL_83;
            }
          }
          uint64_t v12 = setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible(a1);
          if (v12) {
            return v12;
          }
        }
LABEL_82:
        char v11 = 0;
LABEL_83:
        uint64_t v12 = 0;
        *a3 = v9;
        *a4 = v11;
        return v12;
      }
      return started;
    case 5:
      if (*(unsigned char *)(v7 + 329) || *(unsigned char *)(v7 + 330))
      {
        if (doesTrackHaveFormatDescriptionAndNonZeroMediaTimeScale(a1))
        {
          uint64_t v12 = setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible(a1);
          if (v12) {
            return v12;
          }
        }
      }
LABEL_34:
      BOOL v9 = 1;
      char v11 = 1;
      goto LABEL_83;
    case 6:
      uint64_t v12 = setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible(a1);
      if (v12) {
        return v12;
      }
      char v11 = 0;
      BOOL v9 = 1;
      goto LABEL_83;
    default:
LABEL_81:
      BOOL v9 = 0;
      goto LABEL_82;
  }
}

uint64_t addSampleBufferWithSampleMediaTimingToTrack(uint64_t a1, CMSampleBufferRef sbuf, uint64_t a3, CMTime *a4, uint64_t a5, uint64_t a6, int a7, double a8)
{
  v112[100] = *MEMORY[0x1E4F143B8];
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  CVImageBufferRef ImageBuffer = CMSampleBufferGetImageBuffer(sbuf);
  CMItemCount NumSamples = CMSampleBufferGetNumSamples(sbuf);
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
  ptr = 0;
  CMItemCount v94 = 0;
  uint64_t valuePtr = 0;
  CFTypeRef cf = 0;
  CFNumberRef v17 = (const __CFNumber *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F2D0], 0);
  CFNumberRef v18 = v17;
  if (v17)
  {
    CFNumberGetValue(v17, kCFNumberSInt64Type, &valuePtr);
    CFTypeRef v19 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F2D8], 0);
    if (DataBuffer) {
      goto LABEL_6;
    }
  }
  else
  {
    CFTypeRef v19 = 0;
    if (DataBuffer) {
      goto LABEL_6;
    }
  }
  DataBuffer = ImageBuffer;
  if (!((unint64_t)ImageBuffer | (unint64_t)v18))
  {
    int v22 = 0;
    uint64_t v21 = 0;
    goto LABEL_145;
  }
LABEL_6:
  uint64_t SampleSizeArrayFromSbuf = getSampleSizeArrayFromSbuf(sbuf, 100, v112, &v94);
  if (SampleSizeArrayFromSbuf != -12737)
  {
    uint64_t v21 = SampleSizeArrayFromSbuf;
    if (!SampleSizeArrayFromSbuf)
    {
      int v22 = 0;
      ptr = v112;
      goto LABEL_9;
    }
LABEL_21:
    int v22 = 0;
    goto LABEL_145;
  }
  if ((unint64_t)(v94 - 0x2000000000000000) <= 0xE000000000000000
    || (CMTime v49 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8 * v94, 0), (ptr = v49) == 0))
  {
    uint64_t v21 = FigSignalErrorAt();
    goto LABEL_21;
  }
  uint64_t v21 = getSampleSizeArrayFromSbuf(sbuf, v94, (size_t *)v49, 0);
  int v22 = 1;
  if (v21) {
    goto LABEL_145;
  }
LABEL_9:
  int v83 = v22;
  if (!NumSamples || v94 || v18 || *(_DWORD *)a1 != 1936684398)
  {
LABEL_15:
    SampleAttachmentsArraCGFloat y = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
    CFArrayRef v25 = SampleAttachmentsArray;
    if (SampleAttachmentsArray)
    {
      if (CFArrayGetCount(SampleAttachmentsArray) != NumSamples)
      {
        uint64_t v23 = FigSignalErrorAt();
        if (v23) {
          goto LABEL_18;
        }
      }
    }
    CFArrayRef v81 = v25;
    CFDictionaryRef v82 = CMCopyDictionaryOfAttachments((CFAllocatorRef)*MEMORY[0x1E4F1CF80], sbuf, 1u);
    uint64_t v26 = *(void *)(a1 + 16);
    if (*(unsigned char *)(v26 + 384) || *(unsigned char *)(v26 + 533))
    {
      setTrackExtendsDefaultValuesIfNeeded(a1);
      goto LABEL_25;
    }
    if (!*(unsigned char *)(a1 + 728))
    {
      if (a3 && v94)
      {
        int v50 = *(_DWORD *)a1;
        int value = a4->value;
        int v52 = *(_DWORD *)ptr;
        int v53 = 16842752;
        if (*(int *)a1 <= 1936684397)
        {
          if (v50 == 1635088502 || v50 == 1885954932) {
            goto LABEL_151;
          }
          goto LABEL_150;
        }
        if (v50 != 1986618469)
        {
          if (v50 != 1936684398)
          {
LABEL_150:
            int v53 = 0;
            goto LABEL_151;
          }
          int v53 = (FigAudioFormatDescriptionEmploysDependentPackets() != 0) << 16;
        }
LABEL_151:
        uint64_t LengthOfDefaultByteStream = MovieTrackSetTrackExtendsDefaultValues(*(_DWORD **)(a1 + 736), 1, value, v52, v53);
        if (LengthOfDefaultByteStream) {
          goto LABEL_155;
        }
        *(unsigned char *)(a1 + 728) = 1;
        goto LABEL_25;
      }
      uint64_t LengthOfDefaultByteStream = FigSignalErrorAt();
      if (LengthOfDefaultByteStream) {
        goto LABEL_155;
      }
    }
LABEL_25:
    int v27 = (uint64_t *)ptr;
    CMItemCount v28 = v94;
    BOOL v80 = (unint64_t *)ptr;
    if (v94 == 1)
    {
      unint64_t v29 = *(void *)ptr * NumSamples;
    }
    else
    {
      unint64_t v29 = 0;
      if (v94 >= 1)
      {
        CMItemCount v30 = v94;
        do
        {
          uint64_t v31 = *v27++;
          v29 += v31;
          --v30;
        }
        while (v30);
      }
    }
    unint64_t v32 = *(void *)(a1 + 696);
    if (v32 <= v29) {
      unint64_t v32 = v29;
    }
    *(void *)(a1 + 696) = v32;
    uint64_t v33 = *(void *)(a1 + 16);
    if (*(void *)(v33 + 696) > v29) {
      unint64_t v29 = *(void *)(v33 + 696);
    }
    *(void *)(v33 + 696) = v29;
    uint64_t v79 = valuePtr;
    *(_OWORD *)&v90.int value = *(_OWORD *)a5;
    v90.CMTimeEpoch epoch = *(void *)(a5 + 16);
    *(_OWORD *)&v89.int value = *(_OWORD *)a6;
    v89.CMTimeEpoch epoch = *(void *)(a6 + 16);
    if (*(unsigned char *)(v33 + 529) && !*(unsigned char *)(v33 + 530))
    {
      uint64_t LengthOfDefaultByteStream = MovieInformationBeginBuildingMovieFragment(*(void *)(v33 + 728), *(unsigned char *)(v33 + 531), *(unsigned char *)(v33 + 533) == 0);
      if (LengthOfDefaultByteStream) {
        goto LABEL_155;
      }
      *(unsigned char *)(v33 + 530) = 1;
    }
    unsigned int v97 = 0;
    unsigned int NumFormatDescriptions = MovieTrackGetNumFormatDescriptions(*(void *)(a1 + 736));
    uint64_t LengthOfDefaultByteStream = MovieTrackFindOrAddSampleDescription(*(void *)(a1 + 736), FormatDescription, v19, &v97);
    if (LengthOfDefaultByteStream)
    {
LABEL_155:
      uint64_t v21 = LengthOfDefaultByteStream;
      CFDictionaryRef v36 = v82;
      if (!v82) {
        goto LABEL_144;
      }
      goto LABEL_143;
    }
    uint64_t v86 = v28;
    CFDictionaryRef v36 = v82;
    if (!NumFormatDescriptions)
    {
      uint64_t appended = setDefaultTrackDimensionsIfNecessary(a1);
      if (appended)
      {
LABEL_71:
        uint64_t v21 = appended;
        if (!v36) {
          goto LABEL_144;
        }
        goto LABEL_143;
      }
    }
    float v38 = (CMTime *)MEMORY[0x1E4F1FA48];
    if (a3 == 1 && NumSamples > 1)
    {
      CMTime time1 = *a4;
      CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
      if (!CMTimeCompare(&time1, &time2)) {
        goto LABEL_45;
      }
    }
    else if (a3 < 1)
    {
      goto LABEL_53;
    }
    float v39 = a4;
    uint64_t v40 = a3;
    while (!*(unsigned char *)(a1 + 940))
    {
      CMTime time1 = *v39;
      CMTime time2 = *v38;
      if (!CMTimeCompare(&time1, &time2)) {
        *(unsigned char *)(a1 + 940) = 1;
      }
      v39 += 3;
      if (!--v40) {
        goto LABEL_53;
      }
    }
LABEL_45:
    uint64_t appended = FigSignalErrorAt();
    if (appended) {
      goto LABEL_71;
    }
LABEL_53:
    if (!DataBuffer)
    {
      uint64_t appended = MovieSampleDataWriterTrackAppendSampleReference(*(void *)(v33 + 744), *(void *)(a1 + 760), v79, v97, NumSamples, a3, (uint64_t)a4, v86, v80, v81, (uint64_t)v82);
      if (appended) {
        goto LABEL_71;
      }
LABEL_96:
      CMTime v96 = v90;
      CMTime v95 = v89;
      CMTime lhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      long long v87 = *(_OWORD *)&v38->value;
      *(_OWORD *)&v107.int value = *(_OWORD *)&v38->value;
      CMTimeEpoch epoch = v38->epoch;
      v107.CMTimeEpoch epoch = epoch;
      CMTime v106 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
      CMTime v105 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA08];
      CMTime v104 = lhs;
      if (a3 == 1)
      {
        CMTime time1 = *a4;
        CMTime time2 = a4[2];
        CMTime rhs = a4[1];
        memset(&v103, 0, sizeof(v103));
        CMTime time = *a4;
        CMTimeMultiply(&v102, &time, NumSamples - 1);
        CMTime time = rhs;
        CMTimeAdd(&v103, &time, &v102);
        memset(&time, 0, sizeof(time));
        CMTime v100 = a4[1];
        CMTime v99 = a4[2];
        CMTimeSubtract(&time, &v100, &v99);
        CMTime v99 = time1;
        CMTimeMultiply(&v100, &v99, NumSamples);
        CMTime v99 = time2;
        CMTimeAdd(&lhs, &v99, &v100);
        CMTime v99 = time1;
        CMTimeMultiply(&v107, &v99, NumSamples);
        CMTime v106 = rhs;
        CMTime v105 = v103;
        CMTime v99 = v103;
        CMTime v98 = time1;
        CMTimeAdd(&v104, &v99, &v98);
        int v58 = time.value;
        int v59 = time.value;
      }
      else if (a3 < 1)
      {
        int v59 = 0x80000000;
        int v58 = 0x7FFFFFFF;
      }
      else
      {
        CFDictionaryRef v60 = a4 + 1;
        int v58 = 0x7FFFFFFF;
        int v59 = 0x80000000;
        do
        {
          CMTime time1 = v60[-1];
          CMTime time2 = v60[1];
          CMTime rhs = *v60;
          memset(&v103, 0, sizeof(v103));
          CMTime v102 = *v60;
          CMTime time = v60[1];
          CMTimeSubtract(&v103, &v102, &time);
          CMTime v102 = time2;
          CMTime time = time1;
          CMTimeAdd(&lhs, &v102, &time);
          CMTime v102 = v107;
          CMTime time = time1;
          CMTimeAdd(&v107, &v102, &time);
          CMTime v102 = rhs;
          CMTime time = v106;
          CMTimeMinimum(&v106, &v102, &time);
          CMTime v102 = v105;
          CMTime time = rhs;
          if (CMTimeCompare(&v102, &time) < 0)
          {
            CMTime v105 = rhs;
            CMTime v102 = rhs;
            CMTime time = time1;
            CMTimeAdd(&v104, &v102, &time);
          }
          if (v58 >= SLODWORD(v103.value)) {
            int v58 = v103.value;
          }
          if (v59 <= SLODWORD(v103.value)) {
            int v59 = v103.value;
          }
          v60 += 3;
          --a3;
        }
        while (a3);
      }
      *(CMTime *)(a1 + 256) = lhs;
      CMTime time2 = *(CMTime *)(a1 + 136);
      CMTime rhs = v107;
      CMTimeAdd(&time1, &time2, &rhs);
      *(CMTime *)(a1 + 136) = time1;
      CMTime time2 = v106;
      CMTime rhs = *(CMTime *)(a1 + 280);
      CMTimeMinimum(&time1, &time2, &rhs);
      *(CMTime *)(a1 + 280) = time1;
      CMTime time1 = *(CMTime *)(a1 + 304);
      CMTime time2 = v105;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        *(CMTime *)(a1 + 304) = v105;
        *(CMTime *)(a1 + 160) = v104;
      }
      int v61 = *(_DWORD *)(a1 + 336);
      if (v58 < v61) {
        int v61 = v58;
      }
      *(_DWORD *)(a1 + 336) = v61;
      int v62 = *(_DWORD *)(a1 + 340);
      if (v59 > v62) {
        int v62 = v59;
      }
      *(_DWORD *)(a1 + 340) = v62;
      if (*(unsigned char *)(a1 + 492))
      {
        CMTime v103 = v106;
        CMTime time = v96;
        CMTime v99 = v104;
        CMTime v98 = v95;
        uint64_t v63 = *(void *)(a1 + 496);
        *(_OWORD *)&time1.int value = v87;
        time1.CMTimeEpoch epoch = epoch;
        CMTime time2 = v96;
        BOOL v64 = CMTimeCompare(&time1, &time2) != 0;
        *(_OWORD *)&time1.int value = v87;
        time1.CMTimeEpoch epoch = epoch;
        CMTime time2 = v95;
        int32_t v65 = CMTimeCompare(&time1, &time2);
        int v66 = editBoundaryDetectorDetectBoundary(*(void *)(v63 + 8), a7, v64, v65 != 0, a8);
        if (a7 && !v65 && *(_DWORD *)(*(void *)(v63 + 8) + 8) == 3)
        {
          CMTime v98 = v96;
          *(_OWORD *)&time.int value = v87;
          time.CMTimeEpoch epoch = epoch;
        }
        if (!v66 || !editBuilderResetCurrentEditMediaTime(v63))
        {
          uint64_t v67 = *(void *)(v63 + 16);
          CMItemCount v68 = (long long *)(v67 + 12);
          if ((*(unsigned char *)(v67 + 24) & 1) == 0
            || (CMTime time1 = v103,
                long long v69 = *v68,
                time2.CMTimeEpoch epoch = *(void *)(v67 + 28),
                *(_OWORD *)&time2.int value = v69,
                CMTimeCompare(&time1, &time2) < 0))
          {
            *CMItemCount v68 = *(_OWORD *)&v103.value;
            *(void *)(v67 + 28) = v103.epoch;
          }
          CFTypeID v70 = (_OWORD *)(v67 + 60);
          if (*(unsigned char *)(v67 + 72))
          {
            *(_OWORD *)&time2.int value = *v70;
            time2.CMTimeEpoch epoch = *(void *)(v67 + 76);
            CMTime rhs = time;
            CMTimeAdd(&time1, &time2, &rhs);
            *CFTypeID v70 = *(_OWORD *)&time1.value;
            CMTimeEpoch v71 = time1.epoch;
          }
          else
          {
            *CFTypeID v70 = *(_OWORD *)&time.value;
            CMTimeEpoch v71 = time.epoch;
          }
          *(void *)(v67 + 76) = v71;
          CFPropertyListRef v72 = (_OWORD *)(v67 + 36);
          if ((*(unsigned char *)(v67 + 48) & 1) == 0
            || (*(_OWORD *)&time1.int value = *v72,
                time1.CMTimeEpoch epoch = *(void *)(v67 + 52),
                CMTime time2 = v99,
                CMTimeCompare(&time1, &time2) < 0))
          {
            *CFPropertyListRef v72 = *(_OWORD *)&v99.value;
            *(void *)(v67 + 52) = v99.epoch;
          }
          CFTypeID v73 = (_OWORD *)(v67 + 84);
          if (*(unsigned char *)(v67 + 96))
          {
            *(_OWORD *)&time2.int value = *v73;
            time2.CMTimeEpoch epoch = *(void *)(v67 + 100);
            CMTime rhs = v98;
            CMTimeAdd(&time1, &time2, &rhs);
            *CFTypeID v73 = *(_OWORD *)&time1.value;
            CMTimeEpoch v74 = time1.epoch;
          }
          else
          {
            *CFTypeID v73 = *(_OWORD *)&v98.value;
            CMTimeEpoch v74 = v98.epoch;
          }
          *(void *)(v67 + 100) = v74;
          double v75 = *(double *)(v67 + 112);
          if (v75 == -1.0 || v75 != a8) {
            *(double *)(v67 + 112) = a8;
          }
          uint64_t v76 = *(void *)(a1 + 16);
          if (*(unsigned char *)(v76 + 329))
          {
            if (*(unsigned char *)(v76 + 352))
            {
              CMTime time1 = v96;
              *(_OWORD *)&time2.int value = v87;
              time2.CMTimeEpoch epoch = epoch;
              if (CMTimeCompare(&time1, &time2)
                || (time1 = v95, *(_OWORD *)&time2.int value = v87, time2.epoch = epoch, CMTimeCompare(&time1, &time2)))
              {
                *(unsigned char *)(a1 + 353) = 1;
              }
            }
          }
        }
      }
      uint64_t v21 = 0;
      if (!v36) {
        goto LABEL_144;
      }
LABEL_143:
      CFRelease(v36);
      goto LABEL_144;
    }
    if (!*(unsigned char *)(v33 + 329) || !*(unsigned char *)(v33 + 530) || !*(unsigned char *)(a1 + 905)) {
      goto LABEL_95;
    }
    LODWORD(time2.CFDictionarySetValue(theDict, key, value) = 0;
    time1.int value = 0;
    uint64_t LengthOfDefaultByteStream = MovieSampleDataWriterGetLengthOfDefaultByteStream(*(uint64_t **)(v33 + 744), &time1);
    if (LengthOfDefaultByteStream) {
      goto LABEL_155;
    }
    uint64_t LengthOfDefaultByteStream = MovieSampleDataWriterTrackGetPreferredChunkAlignment(*(void *)(v33 + 744), *(void *)(a1 + 760), &time2);
    if (LengthOfDefaultByteStream) {
      goto LABEL_155;
    }
    CMTimeValue v41 = 0xFFFFFFFF80000000;
    if (LODWORD(time2.value) >= 2 && time1.value % SLODWORD(time2.value)) {
      CMTimeValue v41 = SLODWORD(time2.value) - time1.value % SLODWORD(time2.value) - 0x80000000;
    }
    if ((unint64_t)(v41 + time1.value - *(void *)(a1 + 888)) > 0xFFFFFFFEFFFFFFFFLL)
    {
LABEL_95:
      uint64_t appended = MovieSampleDataWriterTrackAppendSampleData(*(uint64_t **)(v33 + 744), *(uint64_t **)(a1 + 760), (uint64_t)DataBuffer, v97, NumSamples, a3, (uint64_t)a4, v86, v80, v81, (uint64_t)v36);
      if (appended) {
        goto LABEL_71;
      }
      goto LABEL_96;
    }
    CFArrayRef v42 = *(const __CFArray **)(v33 + 488);
    if (v42)
    {
      CFIndex Count = CFArrayGetCount(v42);
      if (Count >= 1)
      {
        CFIndex v44 = Count;
        CFIndex v45 = 0;
        do
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v33 + 488), v45);
          uint64_t LengthOfDefaultByteStream = setTrackHeaderDataCompleteFlagAndWriteCheckpointIfPossible((uint64_t)ValueAtIndex);
          if (LengthOfDefaultByteStream) {
            goto LABEL_155;
          }
          ValueAtIndex[601] = 0;
        }
        while (v44 != ++v45);
      }
    }
    clearAllTracksHeaderDataCompleteFlag(v33);
    CFArrayRef v47 = *(const __CFArray **)(v33 + 488);
    if (v47) {
      CFIndex v48 = CFArrayGetCount(v47);
    }
    else {
      CFIndex v48 = 0;
    }
    memset(&time1, 0, sizeof(time1));
    CMTime time2 = *(CMTime *)(a1 + 648);
    CMTime rhs = *(CMTime *)(a1 + 108);
    CMTimeSubtract(&time1, &time2, &rhs);
    CMTime time2 = *v38;
    CFDictionaryRef v36 = v82;
    if (*(unsigned char *)(v33 + 329))
    {
      CFAllocatorRef v54 = (CMTime *)(v33 + 96);
    }
    else
    {
      if (!*(unsigned char *)(v33 + 330)) {
        goto LABEL_92;
      }
      CFAllocatorRef v54 = (CMTime *)(v33 + 144);
    }
    CMTime time2 = *v54;
LABEL_92:
    memset(&rhs, 0, sizeof(rhs));
    CMTime lhs = time1;
    CMTime v107 = time2;
    CMTimeAdd(&rhs, &lhs, &v107);
    if (v48 >= 1)
    {
      for (CFIndex i = 0; i != v48; ++i)
      {
        CFStringRef v56 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v33 + 488), i);
        CMTime v107 = rhs;
        CMTime v106 = *(CMTime *)(v56 + 108);
        CMTimeAdd(&lhs, &v107, &v106);
        *((CMTime *)v56 + 28) = lhs;
      }
    }
    goto LABEL_95;
  }
  uint64_t v23 = FigMovieCreateContiguousBBufFromNonContiguousAudioSample(sbuf, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], (CMBlockBufferRef *)&cf, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], &v94, &ptr);
  if (!v23)
  {
    int v83 = 1;
    DataBuffer = (void *)cf;
    goto LABEL_15;
  }
LABEL_18:
  uint64_t v21 = v23;
LABEL_144:
  int v22 = v83;
LABEL_145:
  if (cf)
  {
    int v77 = v22;
    CFRelease(cf);
    int v22 = v77;
  }
  if (v22) {
    CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], ptr);
  }
  return v21;
}

double setNextCumulatedInterleavingDuration(CMTime *a1)
{
  CMTimeEpoch epoch = a1->epoch;
  CMTime v3 = a1 + 27;
  CMTime lhs = a1[27];
  CMTime v5 = *(CMTime *)(epoch + 48);
  CMTimeAdd(&v7, &lhs, &v5);
  *CMTime v3 = v7;
  return setTrackHeaderDataCompleteFlagIfCumulatedInterleavingDurationReachesCumulatedMovieFragmentDuration((uint64_t)a1);
}

unsigned char *sbp_bq_minOrMaxPTSChanged_orEndOfDataReached()
{
  uint64_t result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*result)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return (unsigned char *)CMNotificationCenterPostNotification();
  }
  return result;
}

uint64_t sbp_vtcs_finishPendingProcessing()
{
  uint64_t v0 = *(OpaqueVTCompressionSession **)(CMBaseObjectGetDerivedStorage() + 16);
  CMTime v2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  return VTCompressionSessionCompleteFrames(v0, &v2);
}

uint64_t sbp_fac_finishPendingProcessing()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  *(_DWORD *)(DerivedStorage + 196) = 1;
  if (*(unsigned char *)(DerivedStorage + 17)) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = RunConverter(DerivedStorage, 0);
  }
  *(_DWORD *)(v1 + 196) = 2;
  *(unsigned char *)(v1 + 208) = 1;
  if (*(unsigned char *)(v1 + 80))
  {
    AudioConverterReleaseHardwareCodec();
    *(unsigned char *)(v1 + 80) = 0;
  }
  return v2;
}

uint64_t figMovieWriter_EndSession(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 336));
  if (*(unsigned char *)(DerivedStorage + 335) || (*(unsigned char *)(DerivedStorage + 36) & 1) == 0)
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  else if (*(void *)(DerivedStorage + 552))
  {
    long long v4 = *a2;
    *(void *)(DerivedStorage + 672) = *((void *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 656) = v4;
    *(unsigned char *)(DerivedStorage + 561) = 1;
    FigSemaphoreSignal();
    FigSemaphoreWaitRelative();
    uint64_t v5 = *(unsigned int *)(DerivedStorage + 680);
  }
  else
  {
    uint64_t v5 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 336));
  return v5;
}

uint64_t figMovieWriter_Flush()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 336));
  if (*(unsigned char *)(DerivedStorage + 335))
  {
    uint64_t v2 = FigSignalErrorAt();
LABEL_6:
    uint64_t v1 = v2;
    goto LABEL_8;
  }
  if (!*(void *)(DerivedStorage + 552)
    || (*(unsigned char *)(DerivedStorage + 560) = 1,
        FigSemaphoreSignal(),
        FigSemaphoreWaitRelative(),
        uint64_t v1 = *(unsigned int *)(DerivedStorage + 680),
        !v1))
  {
    if (!*(unsigned char *)(DerivedStorage + 384))
    {
      uint64_t v1 = 0;
      goto LABEL_8;
    }
    uint64_t v2 = callFragmentCallback(DerivedStorage);
    goto LABEL_6;
  }
LABEL_8:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 336));
  return v1;
}

CMTime *getSessionMediaDisplayStartTime@<X0>(CMTime *result@<X0>, CMTime *a2@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)&a2->int value = *MEMORY[0x1E4F1FA48];
  a2->CMTimeEpoch epoch = *(void *)(v2 + 16);
  if ((~HIDWORD(result[12].value) & 5) != 0)
  {
    a2->CMTimeEpoch epoch = *(void *)&result[12].timescale;
    *(_OWORD *)&a2->int value = *(_OWORD *)&result[11].epoch;
  }
  int32_t timescale = result[4].timescale;
  if (timescale)
  {
    CMTime v4 = *a2;
    return CMTimeConvertScale(a2, &v4, timescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
  }
  return result;
}

uint64_t figMovieWriter_WriteHeader()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 336));
  if (*(unsigned char *)(DerivedStorage + 335))
  {
    uint64_t v1 = FigSignalErrorAt();
  }
  else if (*(void *)(DerivedStorage + 552))
  {
    *(unsigned char *)(DerivedStorage + 562) = 1;
    FigSemaphoreSignal();
    FigSemaphoreWaitRelative();
    uint64_t v1 = *(unsigned int *)(DerivedStorage + 680);
  }
  else
  {
    uint64_t v1 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 336));
  return v1;
}

uint64_t writeMovieHeader(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 329))
  {
    uint64_t v6 = *(void *)(a1 + 360);
    unint64_t v7 = *(void *)(a1 + 368);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 360);
    unint64_t v7 = *(void *)(a1 + 368);
    if (!*(unsigned char *)(a1 + 384))
    {
      uint64_t appended = writeMovieAtom(a1, a2, a3);
      if (!appended)
      {
        if (!*(unsigned char *)(a1 + 352)
          || (uint64_t appended = MovieSampleDataWriterWriteFreeAtom(*(void *)(a1 + 744), v6, v7), !appended))
        {
          *(unsigned char *)(a1 + 352) = 1;
          goto LABEL_24;
        }
      }
      return appended;
    }
  }
  if (*(unsigned char *)(a1 + 352))
  {
    if (!*(unsigned char *)(a1 + 530))
    {
LABEL_24:
      clearAllTracksFirstSampleInfoInFragment(a1);
      return 0;
    }
    CMBlockBufferRef theBuffer = 0;
    uint64_t v8 = createMovieFragmentAtomBBuf(a1, &theBuffer);
    BOOL v9 = theBuffer;
    if (v8)
    {
      uint64_t appended = v8;
    }
    else
    {
      size_t DataLength = CMBlockBufferGetDataLength(theBuffer);
      if (DataLength)
      {
        size_t v11 = DataLength;
        *(void *)(a1 + 344) += DataLength;
        uint64_t appended = MovieSampleDataWriterAppendHeader(*(void *)(a1 + 744), v9, 0);
        if (!appended)
        {
          MovieSampleDataWriterSynchronizeDefaultByteStream(*(void *)(a1 + 744), a2, a3);
          char v13 = 0;
          size_t v14 = *(void *)(a1 + 704);
          if (v14 <= v11) {
            size_t v14 = v11;
          }
          *(void *)(a1 + 704) = v14;
          if (v9) {
            goto LABEL_12;
          }
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t appended = 0;
      }
    }
    char v13 = 1;
    if (v9) {
LABEL_12:
    }
      CFRelease(v9);
LABEL_13:
    if (!appended)
    {
      MovieInformationReleaseMovieFragmentSampleTables(*(void *)(a1 + 728));
      if (v13) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
    return appended;
  }
  uint64_t appended = writeMovieAtom(a1, a2, a3);
  if (!appended)
  {
    if (*(unsigned char *)(a1 + 532))
    {
      uint64_t appended = MovieSampleDataWriterWriteFreeAtom(*(void *)(a1 + 744), v6, v7);
      if (appended) {
        return appended;
      }
      *(unsigned char *)(a1 + 532) = 0;
    }
    if (!*(unsigned char *)(a1 + 531)) {
      MovieInformationReleaseMovieHeaderSampleTables(*(void *)(a1 + 728));
    }
    *(unsigned char *)(a1 + 529) = 1;
    *(unsigned char *)(a1 + 352) = 1;
LABEL_23:
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    goto LABEL_24;
  }
  return appended;
}

uint64_t writeData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v9 + 16);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a4, a2, a3, 0);
}

uint64_t writeMovieAtom(uint64_t a1, uint64_t a2, int a3)
{
  CMBlockBufferRef theBuffer = 0;
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a1 + 329)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = *(unsigned char *)(a1 + 384) != 0;
  }
  MovieAtomuint64_t BBuf = MovieSampleDataWriterCopyURLOfDefaultByteStream(*(void *)(a1 + 744), *MEMORY[0x1E4F1CF80], &cf);
  if (MovieAtomBBuf) {
    goto LABEL_16;
  }
  MovieAtomuint64_t BBuf = createMovieAtomBBuf(a1, v6, (const __CFURL *)cf, (CFTypeRef *)&theBuffer);
  if (MovieAtomBBuf) {
    goto LABEL_16;
  }
  uint64_t v8 = theBuffer;
  size_t DataLength = CMBlockBufferGetDataLength(theBuffer);
  *(void *)(a1 + 368) = DataLength;
  *(void *)(a1 + 344) += DataLength;
  if (*(unsigned char *)(a1 + 330))
  {
    CMBlockBufferGetDataLength(v8);
    uint64_t v16 = 0;
    MovieAtomuint64_t BBuf = CMByteStreamAppendBlockBuffer();
    if (MovieAtomBBuf) {
      goto LABEL_16;
    }
  }
  else
  {
    MovieAtomuint64_t BBuf = MovieSampleDataWriterAppendHeader(*(void *)(a1 + 744), v8, (void *)(a1 + 360));
    if (MovieAtomBBuf) {
      goto LABEL_16;
    }
    MovieSampleDataWriterSynchronizeDefaultByteStream(*(void *)(a1 + 744), a2, a3);
  }
  uint64_t v16 = 0;
  if (!*(unsigned char *)(a1 + 448)) {
    goto LABEL_22;
  }
  MovieAtomuint64_t BBuf = MovieSampleDataWriterGetLengthOfDefaultByteStream(*(uint64_t **)(a1 + 744), &v16);
  if (MovieAtomBBuf)
  {
LABEL_16:
    uint64_t v12 = MovieAtomBBuf;
    goto LABEL_17;
  }
  uint64_t v10 = *(void *)(a1 + 464);
  int64_t v11 = v10 - v16;
  if (v10 != v16)
  {
    if (v11 < 8) {
      MovieAtomuint64_t BBuf = FigSignalErrorAt();
    }
    else {
      MovieAtomuint64_t BBuf = MovieSampleDataWriterAppendFreeAtom(*(void *)(a1 + 744), v11);
    }
    goto LABEL_16;
  }
LABEL_22:
  uint64_t v12 = 0;
LABEL_17:
  if (cf) {
    CFRelease(cf);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v12;
}

uint64_t createDefaultTrackEditSegmentArray(CFAllocatorRef allocator, uint64_t a2, CFMutableArrayRef *a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(unsigned char *)(v6 + 384))
  {
    long long v7 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)&time.CMTimeValue value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v8 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    time.CMTimeEpoch epoch = v8;
    v82.CMTimeValue value = 0;
    if (*(_DWORD *)a2 == 1936684398)
    {
      long long v60 = v7;
      int v9 = FigCFEqual();
      long long v7 = v60;
      if (*(unsigned char *)(a2 + 492))
      {
        if (v9)
        {
          uint64_t FirstEditBuilder = getFirstEditBuilder(a2);
          CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(FirstEditBuilder + 24));
          BOOL IsValid = editMediaTimeIsValid(*(void *)(FirstEditBuilder + 16));
          long long v7 = v60;
          if (Count + IsValid)
          {
            EditMediaTimeAtIndeCGFloat x = (char *)editBuilderGetEditMediaTimeAtIndex(FirstEditBuilder, 0);
            long long v7 = v60;
            CMTime time = *(CMTime *)(EditMediaTimeAtIndex + 60);
          }
        }
      }
    }
    long long v67 = *(_OWORD *)&time.value;
    *(_OWORD *)&v68[8] = v7;
    *(void *)CMItemCount v68 = time.epoch;
    *(void *)&v68[24] = v8;
    long long v69 = v7;
    long long v71 = v7;
    CMTimeEpoch v70 = v8;
    CMTimeEpoch v72 = v8;
    uint64_t v14 = copyFigTimeMappingAsDictionary(allocator, (uint64_t)&v67, (CFDictionaryRef *)&v82);
    if (!v14)
    {
      CFArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        CFMutableArrayRef v16 = Mutable;
        CMTimeValue value = v82.value;
        appendTrackEditSegmentDictionary(Mutable, (const __CFDictionary *)v82.value);
        uint64_t v19 = v18;
        if (!v18)
        {
          if (!value) {
            goto LABEL_13;
          }
          goto LABEL_11;
        }
        CFRelease(v16);
        goto LABEL_80;
      }
      uint64_t v14 = FigSignalErrorAt();
    }
    uint64_t v19 = v14;
LABEL_80:
    CFMutableArrayRef v16 = 0;
    CMTimeValue value = v82.value;
    if (v82.value)
    {
LABEL_11:
      unint64_t v20 = (const void *)value;
LABEL_12:
      CFRelease(v20);
    }
LABEL_13:
    if (v19) {
      return v19;
    }
    goto LABEL_35;
  }
  if (!*(unsigned char *)(a2 + 492))
  {
    CFArrayRef v33 = *(const __CFArray **)(v6 + 488);
    if (v33) {
      CFIndex v34 = CFArrayGetCount(v33);
    }
    else {
      CFIndex v34 = 0;
    }
    time2.CMTimeValue value = 0;
    CFIndex v35 = CFArrayGetCount(*(CFArrayRef *)(a2 + 424));
    CMTime v82 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    CFArrayRef v36 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    if (v36)
    {
      int v61 = a3;
      if (v35 >= 1)
      {
        CFIndex v37 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 424), v37);
          int v39 = *(_DWORD *)(a2 + 344);
          int v41 = v39 == 2 && ValueAtIndex[37] == 2 && v34 == 1;
          int32_t v42 = *(_DWORD *)(a2 + 104);
          int32_t v43 = *(_DWORD *)(*(void *)(a2 + 16) + 20);
          long long v67 = *(_OWORD *)&v82.value;
          *(void *)CMItemCount v68 = v82.epoch;
          uint64_t TrackEditSegmentArrayFromSessionTime = createTrackEditSegmentArrayFromSessionTime(allocator, v41, v39, (CMTime *)&v67, v42, v43, (uint64_t)ValueAtIndex, (const __CFArray **)&time2, (uint64_t)&v82);
          if (TrackEditSegmentArrayFromSessionTime)
          {
            uint64_t v19 = TrackEditSegmentArrayFromSessionTime;
            CFMutableArrayRef v16 = 0;
            goto LABEL_58;
          }
          CFIndex v45 = (const void *)time2.value;
          appendTrackEditSegmentArray(v36, (CFArrayRef)time2.value);
          if (v46) {
            break;
          }
          if (v45)
          {
            CFRelease(v45);
            time2.CMTimeValue value = 0;
          }
          if (v35 == ++v37) {
            goto LABEL_56;
          }
        }
        uint64_t v19 = v46;
        CFMutableArrayRef v16 = 0;
        a3 = v61;
        if (!v45)
        {
LABEL_69:
          if (v36)
          {
            unint64_t v20 = v36;
            goto LABEL_12;
          }
          goto LABEL_13;
        }
LABEL_68:
        CFRelease(v45);
        goto LABEL_69;
      }
LABEL_56:
      if ((*(unsigned char *)(a2 + 480) & 1) == 0)
      {
        uint64_t v19 = 0;
        CFMutableArrayRef v16 = v36;
        CFArrayRef v36 = 0;
LABEL_58:
        a3 = v61;
LABEL_67:
        CFIndex v45 = (const void *)time2.value;
        if (!time2.value) {
          goto LABEL_69;
        }
        goto LABEL_68;
      }
      CMTimeEpoch v70 = *(void *)(a2 + 248);
      long long v47 = *(_OWORD *)(a2 + 232);
      *(_OWORD *)&v68[16] = *(_OWORD *)(a2 + 216);
      long long v69 = v47;
      long long v48 = *(_OWORD *)(a2 + 200);
      long long v67 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)CMItemCount v68 = v48;
      uint64_t v49 = *(void *)(a2 + 16);
      CMTimeEpoch v50 = *(void *)(v49 + 40);
      long long v71 = *(_OWORD *)(v49 + 24);
      CMTimeEpoch v72 = v50;
      long long v81 = 0u;
      long long v80 = 0u;
      memset(v79, 0, sizeof(v79));
      long long v78 = 0u;
      long long v77 = 0u;
      long long v76 = 0u;
      v75[1] = 0u;
      v75[0] = 0u;
      uint64_t v51 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      long long v73 = *MEMORY[0x1E4F1F9F8];
      *(void *)((char *)&v75[1] + 4) = *(void *)(a2 + 484);
      *(_OWORD *)((char *)v75 + 4) = *(_OWORD *)(a2 + 468);
      uint64_t v74 = v51;
      *(void *)&long long v77 = v51;
      long long v76 = v73;
      long long v52 = *(_OWORD *)(a2 + 432);
      *(void *)&long long v81 = *(void *)(a2 + 448);
      long long v80 = v52;
      getSessionMediaDisplayStartTime((CMTime *)a2, v79);
      CMTime time1 = *(CMTime *)(a2 + 160);
      int32_t v53 = *(_DWORD *)(a2 + 104);
      a3 = v61;
      if (v53)
      {
        CMTime time = *(CMTime *)(a2 + 160);
        CMTimeConvertScale(&time1, &time, v53, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        int32_t v54 = *(_DWORD *)(a2 + 104);
      }
      else
      {
        int32_t v54 = 0;
      }
      v79[1] = time1;
      int v55 = *(_DWORD *)(a2 + 344);
      int32_t v56 = *(_DWORD *)(*(void *)(a2 + 16) + 20);
      CMTime time = v82;
      uint64_t v57 = createTrackEditSegmentArrayFromSessionTime(allocator, 0, v55, &time, v54, v56, (uint64_t)&v67, (const __CFArray **)&time2, 0);
      if (!v57)
      {
        int v58 = (const void *)time2.value;
        appendTrackEditSegmentArray(v36, (CFArrayRef)time2.value);
        if (!v57)
        {
          if (v58)
          {
            CFRelease(v58);
            time2.CMTimeValue value = 0;
          }
          uint64_t v19 = 0;
          CFMutableArrayRef v16 = v36;
          CFArrayRef v36 = 0;
          goto LABEL_67;
        }
      }
    }
    else
    {
      uint64_t v57 = FigSignalErrorAt();
    }
    uint64_t v19 = v57;
    CFMutableArrayRef v16 = 0;
    goto LABEL_67;
  }
  CFTypeRef cf = 0;
  CFIndex v21 = CFArrayGetCount(*(CFArrayRef *)(a2 + 424));
  long long v67 = 0uLL;
  *(void *)CMItemCount v68 = 0;
  memset(&time, 0, sizeof(time));
  CMTime v82 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CFMutableArrayRef v16 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
  if (!v16)
  {
    uint64_t v59 = FigSignalErrorAt();
    if (v59) {
      return v59;
    }
    goto LABEL_35;
  }
  int v22 = a3;
  if (v21 >= 1)
  {
    for (CFIndex i = 0; v21 != i; ++i)
    {
      uint64_t v24 = (char *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 424), i);
      CMTime time1 = *(CMTime *)(v24 + 124);
      CMTime time2 = *(CMTime *)(v24 + 3);
      CMTimeMaximum((CMTime *)&v67, &time1, &time2);
      CMTime time1 = *(CMTime *)(v24 + 152);
      CMTime time2 = *(CMTime *)(v24 + 4);
      CMTimeMinimum(&time, &time1, &time2);
      *(_OWORD *)&time1.CMTimeValue value = v67;
      time1.CMTimeEpoch epoch = *(void *)v68;
      CMTime time2 = time;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        if (v24[36])
        {
          *(_OWORD *)&time2.CMTimeValue value = v67;
          time2.CMTimeEpoch epoch = *(void *)v68;
          CMTime rhs = *(CMTime *)(v24 + 1);
          CMTimeSubtract(&time1, &time2, &rhs);
          long long v67 = *(_OWORD *)&time1.value;
          *(void *)CMItemCount v68 = time1.epoch;
          CMTime time2 = time;
          CMTime rhs = *(CMTime *)(v24 + 1);
          CMTimeSubtract(&time1, &time2, &rhs);
          CMTime time = time1;
        }
        int32_t v25 = *(_DWORD *)(*(void *)(a2 + 16) + 20);
        *(_OWORD *)&time1.CMTimeValue value = v67;
        time1.CMTimeEpoch epoch = *(void *)v68;
        CMTime time2 = time;
        *(_OWORD *)&rhs.CMTimeValue value = *(_OWORD *)(v24 + 248);
        uint64_t v26 = *((void *)v24 + 34);
        rhs.CMTimeEpoch epoch = *((void *)v24 + 33);
        CMTime v62 = v82;
        uint64_t v27 = editBuilderCreateTimeMappingArray(v26, v25, (uint64_t)&time1, (uint64_t)&time2, &rhs, &v62, allocator, (const __CFArray **)&cf, (uint64_t)&v82);
        CFTypeRef v28 = cf;
        if (v27) {
          goto LABEL_71;
        }
        appendTrackEditSegmentArray(v16, (CFArrayRef)cf);
        if (v27) {
          goto LABEL_71;
        }
        if (v28)
        {
          CFRelease(v28);
          CFTypeRef cf = 0;
        }
      }
    }
  }
  if ((*(unsigned char *)(a2 + 480) & 1) == 0) {
    goto LABEL_34;
  }
  unint64_t v29 = *(CMTime **)(a2 + 16);
  CMTime time2 = *(CMTime *)(a2 + 468);
  CMTime rhs = v29[1];
  CMTimeMaximum(&time1, &time2, &rhs);
  long long v67 = *(_OWORD *)&time1.value;
  *(void *)CMItemCount v68 = time1.epoch;
  if (*(unsigned char *)(a2 + 220))
  {
    *(_OWORD *)&time2.CMTimeValue value = v67;
    time2.CMTimeEpoch epoch = *(void *)v68;
    CMTime rhs = *(CMTime *)(a2 + 208);
    CMTimeSubtract(&time1, &time2, &rhs);
    long long v67 = *(_OWORD *)&time1.value;
    *(void *)CMItemCount v68 = time1.epoch;
  }
  CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  uint64_t v30 = *(void *)(a2 + 496);
  int32_t v31 = *(_DWORD *)(*(void *)(a2 + 16) + 20);
  *(_OWORD *)&time1.CMTimeValue value = v67;
  time1.CMTimeEpoch epoch = *(void *)v68;
  CMTime time2 = *(CMTime *)(a2 + 432);
  CMTime rhs = v82;
  uint64_t v27 = editBuilderCreateTimeMappingArray(v30, v31, (uint64_t)&time1, MEMORY[0x1E4F1F9F8], &time2, &rhs, allocator, (const __CFArray **)&cf, 0);
  CFTypeRef v28 = cf;
  if (!v27)
  {
    appendTrackEditSegmentArray(v16, (CFArrayRef)cf);
    if (!v27)
    {
      if (v28) {
        CFRelease(v28);
      }
LABEL_34:
      a3 = v22;
LABEL_35:
      uint64_t v19 = 0;
      *a3 = v16;
      return v19;
    }
  }
LABEL_71:
  uint64_t v19 = v27;
  if (v28) {
    CFRelease(v28);
  }
  CFRelease(v16);
  return v19;
}

uint64_t createTrackEditSegmentArrayFromSessionTime(const __CFAllocator *a1, int a2, int a3, CMTime *a4, int32_t a5, int32_t a6, uint64_t a7, const __CFArray **a8, uint64_t a9)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  uint64_t v14 = MEMORY[0x1E4F1F9F8];
  CMTimeValue v76 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale v77 = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CMTimeEpoch v15 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CMTimeValue v74 = v76;
  CMTimeScale v75 = v77;
  *(_OWORD *)&v66.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v16 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  v66.CMTimeEpoch epoch = v16;
  *(_OWORD *)&v65.CMTimeValue value = *(_OWORD *)&v66.value;
  v65.CMTimeEpoch epoch = v16;
  long long v55 = *(_OWORD *)&v66.value;
  *(_OWORD *)&v64.CMTimeValue value = *(_OWORD *)&v66.value;
  v64.CMTimeEpoch epoch = v16;
  CMTimeValue v72 = v76;
  CMTimeScale v73 = v77;
  CMTimeValue v70 = v76;
  CMTimeScale v71 = v77;
  CFTypeRef cf = 0;
  long long v17 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 48);
  *(_OWORD *)&v60[16] = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 32);
  long long v61 = v17;
  long long v18 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 80);
  *(_OWORD *)CMTime v62 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 64);
  *(_OWORD *)&v62[16] = v18;
  long long v19 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 16);
  long long v59 = *MEMORY[0x1E4F1FA00];
  *(_OWORD *)long long v60 = v19;
  int v20 = *(_DWORD *)(a7 + 60);
  long long v53 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v58.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v21 = v15;
  v58.CMTimeEpoch epoch = v15;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFArrayRef v23 = Mutable;
    int v47 = a3;
    int v48 = a2;
    CMTimeFlags v24 = *(_DWORD *)(v14 + 12);
    CMTime time1 = *(CMTime *)(a7 + 124);
    CMTime time2 = *(CMTime *)(a7 + 72);
    CMTimeMaximum(&v58, &time1, &time2);
    CMTime time2 = *(CMTime *)(a7 + 152);
    CMTime rhs = *(CMTime *)(a7 + 96);
    CMTimeMinimum(&time1, &time2, &rhs);
    CMTimeFlags flags = time1.flags;
    CMTimeScale timescale = time1.timescale;
    CMTimeValue value = time1.value;
    CMTimeEpoch epoch = time1.epoch;
    CMTime time2 = v58;
    if (CMTimeCompare(&time1, &time2) >= 1)
    {
      CMTimeFlags v49 = v24;
      if (v20)
      {
        uint64_t v46 = a8;
        CMTime time2 = v58;
        CMTime rhs = *(CMTime *)(a7 + 48);
        CMTimeSubtract(&time1, &time2, &rhs);
        CMTimeScale v77 = time1.timescale;
        CMTimeValue v76 = time1.value;
        CMTime time2 = time1;
        CMTimeConvertScale(&time1, &time2, a5, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        CMTimeValue v76 = time1.value;
        CMTimeFlags v24 = time1.flags;
        CMTimeScale v77 = time1.timescale;
        CMTimeEpoch v45 = time1.epoch;
        if (flags)
        {
          time2.CMTimeValue value = value;
          time2.CMTimeScale timescale = timescale;
          time2.CMTimeFlags flags = flags;
          time2.CMTimeEpoch epoch = epoch;
          CMTime rhs = *(CMTime *)(a7 + 48);
          CMTimeSubtract(&time1, &time2, &rhs);
          CMTimeScale v75 = time1.timescale;
          CMTimeValue v74 = time1.value;
          CMTime time2 = time1;
          CMTimeConvertScale(&time1, &time2, a5, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          CMTimeValue v74 = time1.value;
          CMTimeFlags v35 = time1.flags;
          CMTimeScale v75 = time1.timescale;
          CMTimeEpoch v36 = time1.epoch;
        }
        else
        {
          CMTimeValue v74 = *(void *)(a7 + 224);
          CMTimeFlags v35 = *(_DWORD *)(a7 + 236);
          CMTimeScale v75 = *(_DWORD *)(a7 + 232);
          CMTimeEpoch v36 = *(void *)(a7 + 240);
        }
        time1.CMTimeValue value = v76;
        time1.CMTimeScale timescale = v77;
        time1.CMTimeFlags flags = v24;
        CMTimeEpoch v37 = v45;
        time1.CMTimeEpoch epoch = v45;
        CMTime time2 = *(CMTime *)(a7 + 200);
        CMTimeFlags v44 = v24;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          time1.CMTimeValue value = v74;
          time1.CMTimeScale timescale = v75;
          time1.CMTimeFlags flags = v35;
          time1.CMTimeEpoch epoch = v36;
          CMTime time2 = *(CMTime *)(a7 + 200);
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            rhs.CMTimeValue value = v74;
            rhs.CMTimeScale timescale = v75;
            CMTimeFlags v38 = v35;
            CMTimeEpoch v39 = v36;
            CMTimeFlags v24 = v49;
            CMTimeEpoch v27 = v21;
          }
          else
          {
            rhs.CMTimeValue value = *(void *)(a7 + 200);
            rhs.CMTimeScale timescale = *(_DWORD *)(a7 + 208);
            CMTimeFlags v38 = *(_DWORD *)(a7 + 212);
            CMTimeEpoch v39 = *(void *)(a7 + 216);
            CMTimeValue v72 = rhs.value;
            CMTimeScale v73 = rhs.timescale;
            CMTimeFlags v24 = v38;
            CMTimeEpoch v27 = v39;
          }
          time1.CMTimeValue value = rhs.value;
          time1.CMTimeScale timescale = rhs.timescale;
          time1.CMTimeFlags flags = v38;
          time1.CMTimeEpoch epoch = v39;
          time2.CMTimeValue value = v76;
          time2.CMTimeScale timescale = v77;
          time2.CMTimeFlags flags = v44;
          time2.CMTimeEpoch epoch = v45;
          CMTimeSubtract(&v66, &time1, &time2);
          CMTime time2 = v66;
          CMTimeConvertScale(&time1, &time2, a6, kCMTimeRoundingMethod_QuickTime);
          CMTime v66 = time1;
        }
        else
        {
          CMTimeValue v72 = v76;
          CMTimeScale v73 = v77;
          CMTimeEpoch v27 = v45;
        }
        CMTime time1 = *(CMTime *)(a7 + 224);
        time2.CMTimeValue value = v74;
        time2.CMTimeScale timescale = v75;
        time2.CMTimeFlags flags = v35;
        time2.CMTimeEpoch epoch = v36;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          *(void *)uint64_t v51 = v36;
          CMTimeEpoch v43 = v27;
          CMTime time1 = *(CMTime *)(a7 + 224);
          time2.CMTimeValue value = v76;
          CMTimeFlags v40 = v44;
          time2.CMTimeScale timescale = v77;
          time2.CMTimeFlags flags = v44;
          time2.CMTimeEpoch epoch = v45;
          if (CMTimeCompare(&time1, &time2) < 0)
          {
            rhs.CMTimeValue value = v76;
            rhs.CMTimeScale timescale = v77;
            CMTimeEpoch v42 = v21;
          }
          else
          {
            BOOL v41 = v47 == 2 && *(_DWORD *)(a7 + 148) != 2;
            if (v48 || v41)
            {
              rhs.CMTimeValue value = v74;
              rhs.CMTimeScale timescale = v75;
              CMTimeValue v70 = v74;
              CMTimeScale v71 = v75;
              CMTimeFlags v40 = v35;
              CMTimeEpoch v42 = *(void *)v51;
              CMTimeEpoch v37 = *(void *)v51;
              CMTimeFlags v49 = v35;
            }
            else
            {
              rhs.CMTimeValue value = *(void *)(a7 + 224);
              rhs.CMTimeScale timescale = *(_DWORD *)(a7 + 232);
              CMTimeFlags v40 = *(_DWORD *)(a7 + 236);
              CMTimeEpoch v37 = *(void *)(a7 + 240);
              CMTimeValue v70 = rhs.value;
              CMTimeScale v71 = rhs.timescale;
              CMTimeFlags v49 = v40;
              CMTimeEpoch v42 = v37;
            }
          }
          time1.CMTimeValue value = v74;
          time1.CMTimeScale timescale = v75;
          time1.CMTimeFlags flags = v35;
          time1.CMTimeEpoch epoch = *(void *)v51;
          time2.CMTimeValue value = rhs.value;
          time2.CMTimeScale timescale = rhs.timescale;
          time2.CMTimeFlags flags = v40;
          time2.CMTimeEpoch epoch = v37;
          CMTimeSubtract(&v65, &time1, &time2);
          CMTime time2 = v65;
          CMTimeConvertScale(&time1, &time2, a6, kCMTimeRoundingMethod_QuickTime);
          CMTime v65 = time1;
          CMTimeFlags v35 = v49;
          CMTimeEpoch v36 = v42;
          CMTimeEpoch v27 = v43;
        }
        else
        {
          CMTimeValue v70 = v74;
          CMTimeScale v71 = v75;
        }
        a8 = v46;
        long long v28 = v55;
        if (v24 & 1) != 0 && (v35)
        {
          time1.CMTimeValue value = v70;
          time1.CMTimeScale timescale = v71;
          time1.CMTimeFlags flags = v35;
          time1.CMTimeEpoch epoch = v36;
          time2.CMTimeValue value = v72;
          time2.CMTimeScale timescale = v73;
          time2.CMTimeFlags flags = v24;
          time2.CMTimeEpoch epoch = v27;
          CMTimeSubtract(&v64, &time1, &time2);
          CMTime time2 = v64;
          CMTimeConvertScale(&time1, &time2, a6, kCMTimeRoundingMethod_QuickTime);
          CMTime v64 = time1;
          long long v28 = v55;
        }
LABEL_7:
        *(_OWORD *)&time1.CMTimeValue value = v28;
        time1.CMTimeEpoch epoch = v16;
        CMTime time2 = v66;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          long long v59 = v53;
          *(void *)long long v60 = v21;
          *(_OWORD *)&v60[8] = v53;
          *(void *)&v60[24] = v21;
          long long v61 = *(_OWORD *)&a4->value;
          *(void *)CMTime v62 = a4->epoch;
          *(CMTime *)&v62[8] = v66;
          uint64_t v29 = copyFigTimeMappingAsDictionary(a1, (uint64_t)&v59, (CFDictionaryRef *)&cf);
          CFTypeRef v30 = cf;
          if (v29) {
            goto LABEL_52;
          }
          appendTrackEditSegmentDictionary(v23, (const __CFDictionary *)cf);
          if (v29) {
            goto LABEL_52;
          }
          if (v30)
          {
            CFRelease(v30);
            CFTypeRef cf = 0;
          }
          CMTime time2 = *a4;
          CMTime rhs = *(CMTime *)&v62[8];
          CMTimeAdd(&time1, &time2, &rhs);
          *a4 = time1;
        }
        *(_OWORD *)&time1.CMTimeValue value = v55;
        time1.CMTimeEpoch epoch = v16;
        CMTime time2 = v64;
        if (CMTimeCompare(&time1, &time2) < 0)
        {
          time1.CMTimeValue value = v72;
          time1.CMTimeScale timescale = v73;
          time1.CMTimeFlags flags = v24;
          time1.CMTimeEpoch epoch = v27;
          CMTime time2 = *(CMTime *)(a7 + 248);
          CMTimeAdd((CMTime *)&v59, &time1, &time2);
          *(CMTime *)&v60[8] = v64;
          long long v61 = *(_OWORD *)&a4->value;
          CMTimeEpoch v31 = a4->epoch;
          *(CMTime *)&v62[8] = v64;
          *(void *)CMTime v62 = v31;
          uint64_t v29 = copyFigTimeMappingAsDictionary(a1, (uint64_t)&v59, (CFDictionaryRef *)&cf);
          CFTypeRef v30 = cf;
          if (v29) {
            goto LABEL_52;
          }
          appendTrackEditSegmentDictionary(v23, (const __CFDictionary *)cf);
          if (v29) {
            goto LABEL_52;
          }
          if (v30)
          {
            CFRelease(v30);
            CFTypeRef cf = 0;
          }
          CMTime time2 = *a4;
          CMTime rhs = *(CMTime *)&v62[8];
          CMTimeAdd(&time1, &time2, &rhs);
          *a4 = time1;
        }
        *(_OWORD *)&time1.CMTimeValue value = v55;
        time1.CMTimeEpoch epoch = v16;
        CMTime time2 = v65;
        if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
        {
LABEL_25:
          *a8 = v23;
          uint64_t v32 = 0;
          if (a9)
          {
            long long v33 = *(_OWORD *)&a4->value;
            *(void *)(a9 + 16) = a4->epoch;
            *(_OWORD *)a9 = v33;
          }
          return v32;
        }
        long long v59 = v53;
        *(void *)long long v60 = v21;
        *(_OWORD *)&v60[8] = v53;
        *(void *)&v60[24] = v21;
        long long v61 = *(_OWORD *)&a4->value;
        *(void *)CMTime v62 = a4->epoch;
        *(CMTime *)&v62[8] = v65;
        uint64_t v29 = copyFigTimeMappingAsDictionary(a1, (uint64_t)&v59, (CFDictionaryRef *)&cf);
        CFTypeRef v30 = cf;
        if (!v29)
        {
          appendTrackEditSegmentDictionary(v23, (const __CFDictionary *)cf);
          if (!v29)
          {
            if (v30) {
              CFRelease(v30);
            }
            CMTime time2 = *a4;
            CMTime rhs = *(CMTime *)&v62[8];
            CMTimeAdd(&time1, &time2, &rhs);
            *a4 = time1;
            goto LABEL_25;
          }
        }
LABEL_52:
        uint64_t v32 = v29;
        if (v30) {
          CFRelease(v30);
        }
        CFRelease(v23);
        return v32;
      }
      if (flags)
      {
        time2.CMTimeValue value = value;
        time2.CMTimeScale timescale = timescale;
        time2.CMTimeFlags flags = flags;
        time2.CMTimeEpoch epoch = epoch;
        CMTime rhs = v58;
        CMTimeSubtract(&time1, &time2, &rhs);
        CMTime v66 = time1;
        CMTime time2 = time1;
        CMTimeConvertScale(&time1, &time2, a6, kCMTimeRoundingMethod_QuickTime);
        CMTime v66 = time1;
      }
    }
    CMTimeEpoch v27 = v21;
    long long v28 = v55;
    goto LABEL_7;
  }

  return FigSignalErrorAt();
}

void appendTrackEditSegmentDictionary(const __CFArray *a1, const __CFDictionary *a2)
{
  CFIndex Count = CFArrayGetCount(a1);
  if (!Count) {
    goto LABEL_6;
  }
  memset(v25, 0, sizeof(v25));
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  memset(v20, 0, sizeof(v20));
  long long v18 = 0u;
  long long v19 = 0u;
  CFIndex v5 = Count - 1;
  long long v16 = 0u;
  long long v17 = 0u;
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, Count - 1);
  getFigTimeMappingFromDictionary(ValueAtIndex, &v21);
  if (!v7)
  {
    getFigTimeMappingFromDictionary(a2, &v16);
    if (!v8)
    {
      *(_OWORD *)&time1.CMTimeValue value = v21;
      time1.CMTimeEpoch epoch = v22;
      long long v12 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      time2.CMTimeEpoch epoch = v9;
      if (CMTimeCompare(&time1, &time2)
        || (*(_OWORD *)&time1.CMTimeValue value = v16,
            time1.CMTimeEpoch epoch = v17,
            *(_OWORD *)&time2.CMTimeValue value = v12,
            time2.CMTimeEpoch epoch = v9,
            CMTimeCompare(&time1, &time2)))
      {
LABEL_6:
        if (a2) {
          CFArrayAppendValue(a1, a2);
        }
        return;
      }
      CMTimeValue value = 0;
      CMTime time1 = *(CMTime *)&v25[1];
      CMTime time2 = *(CMTime *)&v20[1];
      CMTimeAdd((CMTime *)&v25[1], &time1, &time2);
      CFAllocatorRef v10 = CFGetAllocator(ValueAtIndex);
      if (!copyFigTimeMappingAsDictionary(v10, (uint64_t)&v21, (CFDictionaryRef *)&value))
      {
        int64_t v11 = value;
        CFArraySetValueAtIndex(a1, v5, value);
        CFRelease(v11);
      }
    }
  }
}

void appendTrackEditSegmentArray(const __CFArray *a1, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count)
  {
    CFIndex v5 = Count;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, 0);
    appendTrackEditSegmentDictionary(a1, ValueAtIndex);
    if (!v7)
    {
      v8.length = v5 - 1;
      v8.uint64_t location = 1;
      CFArrayAppendArray(a1, theArray, v8);
    }
  }
}

uint64_t figMatrixToBigEndianMatrixRecord(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = result;
  do
  {
    for (uint64_t i = 0; i != 12; i += 4)
    {
      CFIndex v5 = (float *)(v3 + i);
      if (i == 8) {
        CFIndex v5 = (float *)(result + 12 * v2 + 8);
      }
      double v6 = 65536.0;
      if (i == 8) {
        double v6 = 1073741820.0;
      }
      *(_DWORD *)(a2 + i) = bswap32((int)(v6 * *v5));
    }
    ++v2;
    a2 += 12;
    v3 += 12;
  }
  while (v2 != 3);
  return result;
}

uint64_t appendEditAtom(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  uint64_t v35 = 0;
  uint64_t BasicMetrics = MovieInformationGetBasicMetrics(*(void *)(a1 + 8), 0, 0, (_DWORD *)&v35 + 1, 0);
  if (BasicMetrics
    || (uint64_t BasicMetrics = getTimeValueToAddToCompositionOffsets(a1, (uint64_t)a2, a3, (int *)&v35, 0, 0),
        BasicMetrics))
  {
    uint64_t appended = BasicMetrics;
    FigAtomWriterEndAtom();
    return appended;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int32_t v33 = HIDWORD(v35);
  uint64_t v32 = (int)v35;
  uint64_t v8 = *a2;
  int32_t newTimescale = MovieTrackGetMediaTimeScale(*a2);
  CFTypeRef v49 = 0;
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v29 = a2;
  int v34 = a3;
  if (a3) {
    EditSegmentCFIndex Count = MovieTrackGetEditSegmentCount(v8);
  }
  else {
    EditSegmentCFIndex Count = MovieTrackFragmentGetEditSegmentCount(v8);
  }
  uint64_t v10 = EditSegmentCount;
  uint64_t v31 = EditSegmentCount - 1;
  int v11 = -1;
  CFAllocatorRef v28 = v7;
LABEL_7:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v49) {
    CFRelease(v49);
  }
  WritableForuint64_t BlockBuffer = CMBlockBufferCreateEmpty(v7, 0, 0, &blockBufferOut);
  if (WritableForBlockBuffer
    || (WritableForuint64_t BlockBuffer = CMByteStreamCreateWritableForBlockBuffer(), WritableForBlockBuffer))
  {
LABEL_66:
    uint64_t appended = WritableForBlockBuffer;
  }
  else
  {
    if (v10 < 1)
    {
      unsigned int v13 = 0;
LABEL_48:
      uint64_t appended = 0;
      long long v24 = blockBufferOut;
      CMBlockBufferRef blockBufferOut = 0;
      goto LABEL_49;
    }
    unsigned int v13 = 0;
    uint64_t v14 = 0;
    while (1)
    {
      memset(v48, 0, sizeof(v48));
      long long v47 = 0u;
      long long v45 = 0u;
      memset(v46, 0, sizeof(v46));
      uint64_t v15 = v34
          ? MovieTrackGetEditSegmentWithIndex(v8, v14, &v45)
          : MovieTrackFragmentGetEditSegmentWithIndex(v8, v14, &v45);
      uint64_t appended = v15;
      if (v15) {
        break;
      }
      float v17 = 1.0;
      if (BYTE12(v45))
      {
        *(_OWORD *)&time.CMTimeValue value = v45;
        time.CMTimeEpoch epoch = v46[0];
        CMTimeConvertScale(&v44, &time, newTimescale, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
        CMTimeValue value = v44.value;
        CMTime time = *(CMTime *)&v46[1];
        CMTime time2 = *(CMTime *)&v48[1];
        if (CMTimeCompare(&time, &time2))
        {
          float v19 = (float)v46[1];
          CMTime time = *(CMTime *)&v48[1];
          CMTimeConvertScale(&v41, &time, v46[2], kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          float v17 = v19 / (float)v41.value;
        }
      }
      else
      {
        CMTimeValue value = -1;
      }
      if (value == -1 && v31 == v14) {
        goto LABEL_48;
      }
      CMTime time = *(CMTime *)&v48[1];
      CMTimeConvertScale(&v40, &time, v33, kCMTimeRoundingMethod_QuickTime);
      if (v40.value || (unint64_t)(value - 1) <= 0xFFFFFFFFFFFFFFFDLL && *((unsigned char *)v29 + 39))
      {
        time2.CMTimeScale timescale = 0;
        time2.CMTimeValue value = 0;
        memset(&time, 0, 20);
        unint64_t v20 = value + v32;
        if (value == -1) {
          unint64_t v20 = -1;
        }
        if (HIDWORD(v40.value)) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v20 - 0x80000000 >= 0xFFFFFFFF7FFFFFFFLL;
        }
        int v22 = !v21;
        if (v11 == -1)
        {
          int v11 = v22;
        }
        else if (v11 < v22)
        {
          int v11 = v22;
          CFAllocatorRef v7 = v28;
          goto LABEL_7;
        }
        CMTimeScale v23 = bswap32(vcvtd_n_s64_f64(v17, 0x10uLL));
        if (v11 == 1)
        {
          time.CMTimeValue value = bswap64(v40.value);
          *(void *)&time.CMTimeScale timescale = bswap64(v20);
          LODWORD(time.epoch) = v23;
        }
        else
        {
          time2.CMTimeValue value = _byteswap_uint64(__PAIR64__(v40.value, v20));
          time2.CMTimeScale timescale = v23;
        }
        WritableForuint64_t BlockBuffer = CMByteStreamAppend();
        if (WritableForBlockBuffer) {
          goto LABEL_66;
        }
        ++v13;
      }
      if (v10 == ++v14) {
        goto LABEL_48;
      }
    }
  }
  unsigned int v13 = 0;
  long long v24 = 0;
LABEL_49:
  if (v49) {
    CFRelease(v49);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (!appended && v13)
  {
    uint64_t v25 = FigAtomWriterInitWithParent();
    if (v25 || (uint64_t v25 = FigAtomWriterBeginAtom(), v25))
    {
      uint64_t appended = v25;
    }
    else
    {
      *(void *)&long long v47 = 0;
      memset(v46, 0, sizeof(v46));
      long long v45 = 0u;
      CMBlockBufferGetDataLength(v24);
      uint64_t v26 = FigAtomWriterInitWithParent();
      if (v26
        || (uint64_t v26 = FigAtomWriterBeginAtom(), v26)
        || (uint64_t v26 = FigAtomWriterAppendVersionAndFlags(), v26)
        || (LODWORD(v44.value) = bswap32(v13), uint64_t v26 = FigAtomWriterAppendData(), v26))
      {
        uint64_t appended = v26;
        FigAtomWriterEndAtom();
      }
      else
      {
        uint64_t appended = FigAtomWriterAppendBlockBufferData();
        FigAtomWriterEndAtom();
        if (!appended) {
          *((unsigned char *)v29 + 41) = 1;
        }
      }
    }
  }
  FigAtomWriterEndAtom();
  if (v24) {
    CFRelease(v24);
  }
  return appended;
}

uint64_t FigUserDataSerializerCreateBBuf(const void *a1, CMBlockBufferRef *a2)
{
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  uint64_t DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v10 = FigSignalErrorAt();
LABEL_33:
    uint64_t appended = v10;
    int v11 = 0;
    goto LABEL_23;
  }
  if (!a2)
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_35;
  }
  CFIndex v5 = DerivedStorage;
  CFDictionaryRef v6 = *DerivedStorage;
  if ((!v6 || !CFDictionaryGetCount(v6)) && !*((_DWORD *)v5 + 2) && !*((_DWORD *)v5 + 3))
  {
    int v11 = 0;
    uint64_t appended = 0;
    goto LABEL_23;
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  uint64_t v8 = CMBlockBufferCreateEmpty(v7, 8u, 0, &blockBufferOut);
  if (v8 || (uint64_t v8 = FigAtomWriterInitWithBlockBuffer(), v8))
  {
LABEL_35:
    uint64_t appended = v8;
    goto LABEL_28;
  }
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  uint64_t v22 = 0;
  memset(context, 0, sizeof(context));
  uint64_t v10 = FigAtomWriterBeginAtom();
  if (v10) {
    goto LABEL_33;
  }
  uint64_t v10 = FigAtomWriterInitWithParent();
  if (v10) {
    goto LABEL_33;
  }
  LOBYTE(v22) = *(unsigned char *)(v9 + 16);
  if (*(void *)v9)
  {
    CFDictionaryApplyFunction(*(CFDictionaryRef *)v9, (CFDictionaryApplierFunction)FigUserDataWriteItemAtom, context);
    int v11 = LOBYTE(context[0]);
  }
  else
  {
    int v11 = 0;
  }
  unint64_t v12 = *(unsigned int *)(v9 + 8);
  if (*(_DWORD *)(v9 + 12))
  {
    unint64_t v20 = 0;
    uint64_t AtomSize = FigAtomWriterGetAtomSize();
    if (AtomSize)
    {
      uint64_t appended = AtomSize;
      goto LABEL_23;
    }
    unint64_t v14 = *(unsigned int *)(v9 + 12);
    if (v14 > v20 && v14 - v20 > *(unsigned int *)(v9 + 8)) {
      unint64_t v12 = v14 - v20;
    }
  }
  uint64_t appended = FigAtomWriterEndAtom();
  if (!appended)
  {
    if (v12)
    {
      uint64_t appended = FigMetadataAppendFreeAtom((uint64_t)v17, v12);
      if (!appended) {
        int v11 = 1;
      }
    }
  }
LABEL_23:
  if (a2 && !appended)
  {
    uint64_t appended = 0;
    if (v11)
    {
      *a2 = blockBufferOut;
      return appended;
    }
    *a2 = 0;
  }
LABEL_28:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return appended;
}

uint64_t FigMetadataAppendFreeAtom(uint64_t a1, unint64_t a2)
{
  CMBlockBufferRef destinationBuffer = 0;
  size_t v2 = a2 - 8;
  if (a2 < 8) {
    return 0;
  }
  uint64_t appended = FigAtomWriterBeginAtom();
  if (!appended)
  {
    if (!v2
      || (uint64_t appended = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v2, 1u, &destinationBuffer), !appended)&& (uint64_t appended = CMBlockBufferFillDataBytes(0, destinationBuffer, 0, 0), !appended)&& (uint64_t appended = FigAtomWriterAppendBlockBufferData(), !appended))
    {
      uint64_t appended = FigAtomWriterEndAtom();
    }
  }
  uint64_t v4 = appended;
  if (destinationBuffer) {
    CFRelease(destinationBuffer);
  }
  return v4;
}

void FigMetadataSerializerRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t figMovieWriter_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 336));
    int v2 = *(unsigned __int8 *)(v1 + 335);
    *(unsigned char *)(v1 + 335) = 1;
    MEMORY[0x19970E930](*(void *)(v1 + 336));
    if (!v2)
    {
      if (*(void *)(v1 + 552))
      {
        *(unsigned char *)(v1 + 563) = 1;
        FigSemaphoreSignal();
        FigThreadJoin();
        *(void *)(v1 + 552) = 0;
      }
      MovieSampleDataWriterFlushPendingAsynchronousTasks(*(void *)(v1 + 744));
    }
  }
  return 0;
}

void FigUserDataSerializerFinalize()
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    int v2 = *DerivedStorage;
    if (v2)
    {
      CFRelease(v2);
      *uint64_t v1 = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigMediaProcessorInvalidate(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    if (!*(unsigned char *)(result + 16))
    {
      FigMediaProcessorStop(result);
      FigMediaProcessorWaitUntilCompletelyStopped(v1);
      *(unsigned char *)(v1 + 16) = 1;
      uint64_t v2 = *(void *)(v1 + 40);
      if (v2 && *(unsigned char *)(v1 + 56))
      {
        uint64_t v3 = *(void *)(v1 + 48);
        uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v4) {
          uint64_t v5 = v4;
        }
        else {
          uint64_t v5 = 0;
        }
        CFDictionaryRef v6 = *(void (**)(uint64_t, uint64_t))(v5 + 40);
        if (v6) {
          v6(v2, v3);
        }
        *(void *)(v1 + 48) = 0;
        *(unsigned char *)(v1 + 56) = 0;
      }
      if (*(void *)(v1 + 32))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
      }
      uint64_t v7 = *(void *)(v1 + 64);
      if (v7)
      {
        if (!*(unsigned char *)(v1 + 72)) {
          goto LABEL_22;
        }
        uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v8) {
          uint64_t v9 = v8;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v10 = *(void (**)(uint64_t, void, void))(v9 + 8);
        if (v10) {
          v10(v7, 0, 0);
        }
        *(unsigned char *)(v1 + 72) = 0;
        uint64_t v7 = *(void *)(v1 + 64);
        if (v7)
        {
LABEL_22:
          uint64_t FigBaseObject = FigActivitySchedulerGetFigBaseObject(v7);
          if (FigBaseObject)
          {
            uint64_t v12 = FigBaseObject;
            uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v14 = v13 ? v13 : 0;
            uint64_t v15 = *(void (**)(uint64_t))(v14 + 24);
            if (v15) {
              v15(v12);
            }
          }
        }
      }
      if (*(void *)(v1 + 24))
      {
        uint64_t v16 = FigSampleBufferProcessorGetFigBaseObject();
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v19 = v18 ? v18 : 0;
          unint64_t v20 = *(void (**)(uint64_t))(v19 + 24);
          if (v20) {
            v20(v17);
          }
        }
      }
      uint64_t result = *(void *)(v1 + 32);
      if (result)
      {
        uint64_t result = FigSampleBufferProviderGetFigBaseObject(result);
        if (result)
        {
          uint64_t v21 = result;
          uint64_t VTable = CMBaseObjectGetVTable();
          uint64_t v24 = *(void *)(VTable + 8);
          uint64_t result = VTable + 8;
          uint64_t v23 = v24;
          uint64_t v25 = v24 ? v23 : 0;
          uint64_t v26 = *(uint64_t (**)(uint64_t))(v25 + 24);
          if (v26)
          {
            return v26(v21);
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigMediaProcessorStop(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16)) {
    return FigSignalErrorAt();
  }
  *(unsigned char *)(a1 + 73) = 0;
  return 0;
}

uint64_t FigMediaProcessorWaitUntilCompletelyStopped(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    return FigSignalErrorAt();
  }
  else
  {
    MEMORY[0x19970E290](*(void *)(a1 + 80));
    MEMORY[0x19970E2B0](*(void *)(a1 + 80));
    return 0;
  }
}

uint64_t otfw_removeLowWaterTrigger(uint64_t a1, opaqueCMBufferQueueTriggerToken *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = (opaqueCMBufferQueue *)DerivedStorage[2];
  if (v4)
  {
    CMBufferQueueRemoveTrigger(v4, a2);
    DerivedStorage[12] = 0;
    DerivedStorage[13] = 0;
    DerivedStorage[11] = 0;
  }
  return 0;
}

uint64_t facInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigAudioCompressorInvalidate(DerivedStorage);
  return 0;
}

void FigAudioCompressorInvalidate(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    if (*(void *)(a1 + 64))
    {
      if (*(unsigned char *)(a1 + 80))
      {
        AudioConverterReleaseHardwareCodec();
        *(unsigned char *)(a1 + 80) = 0;
      }
      uint64_t v2 = *(const void **)(a1 + 72);
      if (v2)
      {
        CFRelease(v2);
        *(void *)(a1 + 72) = 0;
      }
      AudioConverterDispose(*(AudioConverterRef *)(a1 + 64));
      *(void *)(a1 + 64) = 0;
    }
    uint64_t v3 = *(void **)(a1 + 104);
    if (v3)
    {
      free(v3);
      *(void *)(a1 + 104) = 0;
    }
    uint64_t v4 = *(const void **)(a1 + 96);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 96) = 0;
    }
    uint64_t v5 = *(void ***)(a1 + 176);
    if (v5)
    {
      unint64_t v6 = *(unsigned int *)v5;
      if (v6)
      {
        unint64_t v7 = 0;
        uint64_t v8 = v5 + 2;
        do
        {
          if (*v8)
          {
            free(*v8);
            *uint64_t v8 = 0;
            unint64_t v6 = *(unsigned int *)v5;
          }
          *((_DWORD *)v8 - 1) = 0;
          ++v7;
          v8 += 2;
        }
        while (v7 < v6);
        uint64_t v5 = *(void ***)(a1 + 176);
      }
      free(v5);
      *(void *)(a1 + 176) = 0;
    }
    uint64_t v9 = *(void **)(a1 + 152);
    if (v9)
    {
      free(v9);
      *(void *)(a1 + 152) = 0;
      *(_DWORD *)(a1 + 160) = 0;
    }
    free(*(void **)(a1 + 168));
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
    uint64_t v10 = *(const void **)(a1 + 24);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 24) = 0;
    }
    int v11 = *(const void **)(a1 + 32);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 32) = 0;
    }
    uint64_t v12 = *(const void **)(a1 + 288);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a1 + 288) = 0;
    }
    uint64_t v13 = *(const void **)(a1 + 296);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(a1 + 296) = 0;
    }
    uint64_t v14 = *(const void **)(a1 + 280);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(a1 + 280) = 0;
    }
    uint64_t v15 = *(const void **)(a1 + 264);
    if (v15)
    {
      CFRelease(v15);
      *(void *)(a1 + 264) = 0;
    }
    uint64_t v16 = *(const void **)(a1 + 216);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(a1 + 216) = 0;
    }
    *(unsigned char *)(a1 + 16) = 1;
  }
}

void facFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();

  FigAudioCompressorInvalidate(DerivedStorage);
}

void otfw_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
  }
}

uint64_t mediaprocessor_Finalize(void *a1)
{
  FigMediaProcessorInvalidate((uint64_t)a1);
  uint64_t v2 = (const void *)a1[8];
  if (v2)
  {
    CFRelease(v2);
    a1[8] = 0;
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  uint64_t v5 = (const void *)a1[5];
  if (v5)
  {
    CFRelease(v5);
    a1[5] = 0;
  }
  uint64_t result = FigSimpleMutexDestroy();
  a1[10] = 0;
  return result;
}

uint64_t sbp_vtcs_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 39) = 1;
  *(void *)(DerivedStorage + 24) = 0;
  VTCompressionSessionInvalidate(*(VTCompressionSessionRef *)(DerivedStorage + 16));
  if (*(void *)DerivedStorage) {
    CMMemoryPoolInvalidate(*(CMMemoryPoolRef *)DerivedStorage);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  return 0;
}

void sbp_vtcs_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

void figMovieWriter_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  figMovieWriter_Invalidate();
  if (DerivedStorage)
  {
    CFArrayRef v1 = *(const __CFArray **)(DerivedStorage + 488);
    if (v1)
    {
      CFIndex Count = CFArrayGetCount(v1);
      if (Count >= 1)
      {
        CFIndex v3 = Count;
        for (CFIndex i = 0; i != v3; ++i)
        {
          CFDictionaryRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 488), i);
          unint64_t v6 = (const void *)*((void *)ValueAtIndex + 50);
          if (v6)
          {
            CFRelease(v6);
            *((void *)ValueAtIndex + 50) = 0;
          }
          unint64_t v7 = (const void *)*((void *)ValueAtIndex + 51);
          if (v7)
          {
            CFRelease(v7);
            *((void *)ValueAtIndex + 51) = 0;
          }
          uint64_t v8 = (const void *)*((void *)ValueAtIndex + 52);
          if (v8)
          {
            CFRelease(v8);
            *((void *)ValueAtIndex + 52) = 0;
          }
          uint64_t v9 = (const void *)*((void *)ValueAtIndex + 68);
          if (v9)
          {
            CFRelease(v9);
            *((void *)ValueAtIndex + 68) = 0;
          }
          uint64_t v10 = (const void *)*((void *)ValueAtIndex + 69);
          if (v10)
          {
            CFRelease(v10);
            *((void *)ValueAtIndex + 69) = 0;
          }
          int v11 = (const void *)*((void *)ValueAtIndex + 70);
          if (v11)
          {
            CFRelease(v11);
            *((void *)ValueAtIndex + 70) = 0;
          }
          uint64_t v12 = (const void *)*((void *)ValueAtIndex + 71);
          if (v12)
          {
            CFRelease(v12);
            *((void *)ValueAtIndex + 71) = 0;
          }
          uint64_t v13 = (const void *)*((void *)ValueAtIndex + 72);
          if (v13)
          {
            CFRelease(v13);
            *((void *)ValueAtIndex + 72) = 0;
          }
          uint64_t v14 = (const void *)*((void *)ValueAtIndex + 57);
          if (v14)
          {
            CFRelease(v14);
            *((void *)ValueAtIndex + 57) = 0;
          }
          uint64_t v15 = (opaqueCMBufferQueue *)*((void *)ValueAtIndex + 76);
          if (v15)
          {
            uint64_t v16 = (opaqueCMBufferQueueTriggerToken *)*((void *)ValueAtIndex + 78);
            if (v16)
            {
              CMBufferQueueRemoveTrigger(v15, v16);
              *((void *)ValueAtIndex + 78) = 0;
              uint64_t v15 = (opaqueCMBufferQueue *)*((void *)ValueAtIndex + 76);
            }
            uint64_t v17 = (opaqueCMBufferQueueTriggerToken *)*((void *)ValueAtIndex + 79);
            if (v17)
            {
              CMBufferQueueRemoveTrigger(v15, v17);
              *((void *)ValueAtIndex + 79) = 0;
              uint64_t v15 = (opaqueCMBufferQueue *)*((void *)ValueAtIndex + 76);
            }
            uint64_t v18 = (opaqueCMBufferQueueTriggerToken *)*((void *)ValueAtIndex + 80);
            if (v18)
            {
              CMBufferQueueRemoveTrigger(v15, v18);
              *((void *)ValueAtIndex + 80) = 0;
            }
            FigBufferQueueRelease();
            *((void *)ValueAtIndex + 76) = 0;
          }
          uint64_t v19 = (const void *)*((void *)ValueAtIndex + 77);
          if (v19)
          {
            CFRelease(v19);
            *((void *)ValueAtIndex + 77) = 0;
          }
          CFArrayRef v20 = (const __CFArray *)*((void *)ValueAtIndex + 53);
          if (v20)
          {
            CFIndex v21 = CFArrayGetCount(v20);
            if (v21 >= 1)
            {
              CFIndex v22 = v21;
              for (CFIndex j = 0; j != v22; ++j)
              {
                uint64_t v24 = (void **)CFArrayGetValueAtIndex(*((CFArrayRef *)ValueAtIndex + 53), j);
                editBuilderRelease(v24[34]);
                free(v24);
              }
            }
            CFRelease(*((CFTypeRef *)ValueAtIndex + 53));
            *((void *)ValueAtIndex + 53) = 0;
          }
          uint64_t v25 = (void *)*((void *)ValueAtIndex + 62);
          if (v25)
          {
            editBuilderRelease(v25);
            *((void *)ValueAtIndex + 62) = 0;
          }
          uint64_t v26 = (CFAllocatorRef *)*((void *)ValueAtIndex + 67);
          if (v26)
          {
            FigCEA608DataInspectorRelease(v26);
            *((void *)ValueAtIndex + 67) = 0;
          }
          CMTimeEpoch v27 = (const void *)*((void *)ValueAtIndex + 41);
          if (v27)
          {
            CFRelease(v27);
            *((void *)ValueAtIndex + 41) = 0;
          }
          CFAllocatorRef v28 = (const void *)*((void *)ValueAtIndex + 92);
          if (v28)
          {
            CFRelease(v28);
            *((void *)ValueAtIndex + 92) = 0;
          }
          MediaSampleTimingGeneratorRelease(*((void **)ValueAtIndex + 94));
          *((void *)ValueAtIndex + 94) = 0;
          MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(*((void **)ValueAtIndex + 97));
          free(ValueAtIndex);
        }
      }
      CFRelease(*(CFTypeRef *)(DerivedStorage + 488));
      *(void *)(DerivedStorage + 488) = 0;
    }
    if (*(void *)(DerivedStorage + 520))
    {
      FigSimpleMutexDestroy();
      *(void *)(DerivedStorage + 520) = 0;
    }
    if (*(void *)(DerivedStorage + 568))
    {
      FigSemaphoreDestroy();
      *(void *)(DerivedStorage + 568) = 0;
    }
    if (*(void *)(DerivedStorage + 576))
    {
      FigSemaphoreDestroy();
      *(void *)(DerivedStorage + 576) = 0;
    }
    if (*(void *)(DerivedStorage + 584))
    {
      FigSemaphoreDestroy();
      *(void *)(DerivedStorage + 584) = 0;
    }
    if (*(void *)(DerivedStorage + 592))
    {
      FigSemaphoreDestroy();
      *(void *)(DerivedStorage + 592) = 0;
    }
    uint64_t v29 = *(void **)(DerivedStorage + 608);
    if (v29)
    {
      os_release(v29);
      *(void *)(DerivedStorage + 608) = 0;
    }
    CFTypeRef v30 = *(const void **)(DerivedStorage + 688);
    if (v30)
    {
      CFRelease(v30);
      *(void *)(DerivedStorage + 688) = 0;
    }
    uint64_t v31 = *(const void **)(DerivedStorage + 272);
    if (v31)
    {
      CFRelease(v31);
      *(void *)(DerivedStorage + 272) = 0;
    }
    uint64_t v32 = *(const void **)(DerivedStorage + 280);
    if (v32)
    {
      CFRelease(v32);
      *(void *)(DerivedStorage + 280) = 0;
    }
    int32_t v33 = *(const void **)(DerivedStorage + 288);
    if (v33)
    {
      CFRelease(v33);
      *(void *)(DerivedStorage + 288) = 0;
    }
    int v34 = *(const void **)(DerivedStorage + 296);
    if (v34)
    {
      CFRelease(v34);
      *(void *)(DerivedStorage + 296) = 0;
    }
    uint64_t v35 = *(const void **)(DerivedStorage + 304);
    if (v35)
    {
      CFRelease(v35);
      *(void *)(DerivedStorage + 304) = 0;
    }
    long long v36 = *(const void **)(DerivedStorage + 312);
    if (v36)
    {
      CFRelease(v36);
      *(void *)(DerivedStorage + 312) = 0;
    }
    long long v37 = *(void **)(DerivedStorage + 472);
    if (v37)
    {
      free(v37);
      *(void *)(DerivedStorage + 472) = 0;
    }
    if (*(void *)(DerivedStorage + 336))
    {
      FigSimpleMutexDestroy();
      *(void *)(DerivedStorage + 336) = 0;
    }
    long long v38 = *(const void **)(DerivedStorage + 440);
    if (v38)
    {
      CFRelease(v38);
      *(void *)(DerivedStorage + 440) = 0;
    }
    uint64_t v39 = *(const void **)(DerivedStorage + 712);
    if (v39)
    {
      CFRelease(v39);
      *(void *)(DerivedStorage + 712) = 0;
    }
    CMTime v40 = *(const void **)(DerivedStorage + 720);
    if (v40)
    {
      CFRelease(v40);
      *(void *)(DerivedStorage + 720) = 0;
    }
    CMTime v41 = *(const void **)(DerivedStorage + 728);
    if (v41)
    {
      CFRelease(v41);
      *(void *)(DerivedStorage + 728) = 0;
    }
    CMTimeEpoch v42 = *(const void **)(DerivedStorage + 744);
    if (v42)
    {
      CFRelease(v42);
      *(void *)(DerivedStorage + 744) = 0;
    }
    CMTimeEpoch v43 = *(const void **)(DerivedStorage + 8);
    if (v43)
    {
      CFRelease(v43);
      *(void *)(DerivedStorage + 8) = 0;
    }
    MovieHeaderMakerRelease(*(const __CFAllocator ***)(DerivedStorage + 736));
    *(void *)(DerivedStorage + 736) = 0;
  }
}

void playerasync_InvalidateItem(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (FigAtomicCompareAndSwap32())
  {
    itemasync_InvalidateInternal(a1);
  }
}

uint64_t FigTTMLDocumentWriterCreateForiTT(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  CFTypeRef v9 = 0;
  CFTypeRef cf = 0;
  if (!a2 || !a3)
  {
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_8;
  }
  FigTTMLDocumentWriterGetClassID();
  uint64_t v5 = CMDerivedObjectCreate();
  if (v5)
  {
LABEL_8:
    uint64_t v6 = v5;
    goto LABEL_9;
  }
  uint64_t v6 = FigTTMLDocumentWriterStateCreate(*MEMORY[0x1E4F1CF80], &v9);
  if (!v6)
  {
    FigTTMLDocumentWriterGetCMBaseObject(cf);
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    *uint64_t DerivedStorage = CFRetain(a2);
    DerivedStorage[1] = v9;
    *a3 = cf;
    return v6;
  }
  if (v9) {
    CFRelease(v9);
  }
LABEL_9:
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t figTTMLDocumentWriterForiTT_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterForiTT_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
  }
}

CFStringRef figTTMLDocumentWriterForiTT_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"FigTTMLDocumentWriterForiTT[%p]", a1);
}

uint64_t figTTMLDocumentWriterForiTT_StartElement(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  int v6 = 0;
  switch((int)a2)
  {
    case 2:
      if (*(unsigned char *)(DerivedStorage + 16)) {
        goto LABEL_8;
      }
      uint64_t started = FigTTMLDocumentWriterStartElement(a1, 8);
      if (!started)
      {
        uint64_t started = FigTTMLDocumentWriterEndElement(a1);
        if (!started) {
          goto LABEL_8;
        }
      }
      return started;
    case 3:
      FigTTMLDocumentWriterGetCMBaseObject(a1);
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        uint64_t v10 = Mutable;
        CFDictionaryAddValue(Mutable, @"style", @"normal");
        CFDictionaryAddValue(v10, @"region", @"bottom");
        context.CMTimeValue value = 0;
        *(void *)&context.CMTimeScale timescale = FigTTMLDocumentWriterStateGetAttributes(*(void *)(v8 + 8));
        context.CMTimeEpoch epoch = a1;
        CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)writeAttributeIfNotWrittenYet, &context);
        uint64_t value_low = LODWORD(context.value);
        CFRelease(v10);
        if (value_low) {
          return value_low;
        }
        goto LABEL_8;
      }
      uint64_t value_low = FigSignalErrorAt();
      if (!value_low)
      {
LABEL_8:
        int v6 = 0;
        goto LABEL_26;
      }
      return value_low;
    case 8:
      FigTTMLDocumentWriterGetCMBaseObject(a1);
      uint64_t v12 = CMBaseObjectGetDerivedStorage();
      uint64_t v13 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v13)
      {
        uint64_t v14 = v13;
        CFDictionaryAddValue(v13, @"xmlns:xsi", @"http://www.w3.org/2001/XMLSchema-instance");
        CFDictionaryAddValue(v14, @"xmlns:tt", @"http://www.w3.org/ns/ttml");
        CFDictionaryAddValue(v14, @"http://www.w3.org/ns/ttml#parameter timeBase", @"smpte");
        uint64_t v15 = FigCFDictionarySetInt32();
        if (v15 || (CMTimeMake(&context, 999, 1000), uint64_t v15 = FigCFDictionarySetCMTime(), v15))
        {
          uint64_t value_low = v15;
        }
        else
        {
          CFDictionaryAddValue(v14, @"http://www.w3.org/ns/ttml#parameter dropMode", @"nonDrop");
          v20[0] = 0;
          v20[1] = FigTTMLDocumentWriterStateGetAttributes(*(void *)(v12 + 8));
          v20[2] = a1;
          CFDictionaryApplyFunction(v14, (CFDictionaryApplierFunction)writeAttributeIfNotWrittenYet, v20);
          uint64_t value_low = LODWORD(v20[0]);
        }
        CFRelease(v14);
        if (value_low) {
          return value_low;
        }
      }
      else
      {
        uint64_t value_low = FigSignalErrorAt();
        if (value_low) {
          return value_low;
        }
      }
      uint64_t started = FigTTMLDocumentWriterStartElement(*(void *)v5, a2);
      if (started) {
        return started;
      }
      *(unsigned char *)(v5 + 16) = 1;
      return FigTTMLDocumentWriterStateStartElement(*(void *)(v5 + 8), a2);
    case 9:
      if (*(unsigned char *)(DerivedStorage + 17)) {
        goto LABEL_25;
      }
      uint64_t started = FigTTMLDocumentWriterStartElement(a1, 12);
      if (started) {
        return started;
      }
      CFMutableDictionaryRef v16 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = FigTTMLDocumentWriterStartElement(a1, 13);
        if (!v18)
        {
          CFDictionaryAddValue(v17, @"http://www.w3.org/XML/1998/namespace id", @"normal");
          CFDictionaryAddValue(v17, @"http://www.w3.org/ns/ttml#styling fontFamily", @"sansSerif");
          CFDictionaryAddValue(v17, @"http://www.w3.org/ns/ttml#styling fontWeight", @"normal");
          CFDictionaryAddValue(v17, @"http://www.w3.org/ns/ttml#styling fontStyle", @"normal");
          CFDictionaryAddValue(v17, @"http://www.w3.org/ns/ttml#styling color", @"white");
          CFDictionaryAddValue(v17, @"http://www.w3.org/ns/ttml#styling fontSize", @"100%");
          context.CMTimeValue value = 0;
          *(void *)&context.CMTimeScale timescale = 0;
          context.CMTimeEpoch epoch = a1;
          CFDictionaryApplyFunction(v17, (CFDictionaryApplierFunction)writeAttributeIfNotWrittenYet, &context);
          uint64_t value_low = LODWORD(context.value);
          if (LODWORD(context.value)) {
            goto LABEL_23;
          }
          uint64_t v18 = FigTTMLDocumentWriterEndElement(a1);
        }
        uint64_t value_low = v18;
LABEL_23:
        CFRelease(v17);
        if (value_low) {
          return value_low;
        }
LABEL_24:
        uint64_t started = FigTTMLDocumentWriterEndElement(a1);
        if (started) {
          return started;
        }
LABEL_25:
        int v6 = 1;
LABEL_26:
        uint64_t started = FigTTMLDocumentWriterStartElement(*(void *)v5, a2);
        if (started) {
          return started;
        }
        if (a2 == 12)
        {
          *(unsigned char *)(v5 + 17) = 1;
          if ((v6 & 1) == 0) {
            return FigTTMLDocumentWriterStateStartElement(*(void *)(v5 + 8), a2);
          }
        }
        else if (!v6)
        {
          return FigTTMLDocumentWriterStateStartElement(*(void *)(v5 + 8), a2);
        }
        *(unsigned char *)(v5 + 18) = 1;
        return FigTTMLDocumentWriterStateStartElement(*(void *)(v5 + 8), a2);
      }
      uint64_t value_low = FigSignalErrorAt();
      if (!value_low) {
        goto LABEL_24;
      }
      return value_low;
    default:
      goto LABEL_26;
  }
}

uint64_t figTTMLDocumentWriterForiTT_EndElement(uint64_t a1)
{
  context[7] = *MEMORY[0x1E4F143B8];
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (FigTTMLDocumentWriterStateGetCurrentElementType(*(void *)(DerivedStorage + 8)) != 8
    || *(unsigned char *)(DerivedStorage + 18))
  {
    goto LABEL_26;
  }
  uint64_t started = FigTTMLDocumentWriterStartElement(a1, 9);
  if (!started)
  {
    uint64_t v4 = 0;
    context[3] = @"top";
    _OWORD context[4] = @"bottom";
    context[5] = @"right";
    context[6] = @"left";
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!Mutable)
      {
        uint64_t v14 = FigSignalErrorAt();
        goto LABEL_21;
      }
      int v6 = Mutable;
      uint64_t v7 = FigTTMLDocumentWriterStartElement(a1, 10);
      if (v7) {
        goto LABEL_19;
      }
      if (FigCFEqual())
      {
        uint64_t v8 = @"top";
        CFTypeRef v9 = @"0% 0%";
        uint64_t v10 = @"100% 15%";
        int v11 = kFigTTML_AttributeValue_tts_textAlign_center;
        uint64_t v12 = kFigTTML_AttributeKey_tts_displayAlign;
        uint64_t v13 = kFigTTML_AttributeValue_tts_displayAlign_before;
      }
      else if (FigCFEqual())
      {
        uint64_t v8 = @"bottom";
        CFTypeRef v9 = @"0% 85%";
        uint64_t v10 = @"100% 15%";
        int v11 = kFigTTML_AttributeValue_tts_textAlign_center;
        uint64_t v12 = kFigTTML_AttributeKey_tts_displayAlign;
        uint64_t v13 = kFigTTML_AttributeValue_tts_displayAlign_after;
      }
      else
      {
        if (FigCFEqual())
        {
          uint64_t v8 = @"right";
          CFTypeRef v9 = @"85% 0%";
        }
        else
        {
          if (!FigCFEqual()) {
            goto LABEL_17;
          }
          uint64_t v8 = @"left";
          CFTypeRef v9 = @"15% 0%";
        }
        uint64_t v10 = @"15% 100%";
        int v11 = kFigTTML_AttributeValue_tts_textAlign_start;
        uint64_t v12 = kFigTTML_AttributeKey_tts_writingMode;
        uint64_t v13 = kFigTTML_AttributeValue_tts_writingMode_TopToBottomAndRightToLeft;
      }
      CFDictionaryAddValue(v6, @"http://www.w3.org/XML/1998/namespace id", v8);
      CFDictionaryAddValue(v6, @"http://www.w3.org/ns/ttml#styling origin", v9);
      CFDictionaryAddValue(v6, @"http://www.w3.org/ns/ttml#styling extent", v10);
      CFDictionaryAddValue(v6, @"http://www.w3.org/ns/ttml#styling textAlign", *v11);
      CFDictionaryAddValue(v6, *v12, *v13);
LABEL_17:
      context[0] = 0;
      context[1] = 0;
      context[2] = a1;
      CFDictionaryApplyFunction(v6, (CFDictionaryApplierFunction)writeAttributeIfNotWrittenYet, context);
      uint64_t v14 = LODWORD(context[0]);
      if (!LODWORD(context[0]))
      {
        uint64_t v7 = FigTTMLDocumentWriterEndElement(a1);
LABEL_19:
        uint64_t v14 = v7;
      }
      CFRelease(v6);
LABEL_21:
      if (v14) {
        return v14;
      }
      v4 += 8;
      if (v4 == 32)
      {
        uint64_t started = FigTTMLDocumentWriterEndElement(a1);
        if (!started)
        {
LABEL_26:
          uint64_t started = FigTTMLDocumentWriterEndElement(*(void *)DerivedStorage);
          if (!started) {
            return FigTTMLDocumentWriterStateEndElement(*(void *)(DerivedStorage + 8));
          }
        }
        return started;
      }
    }
  }
  return started;
}

uint64_t figTTMLDocumentWriterForiTT_AddCaptionData(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterAddCaptionData(v3, a2);
}

uint64_t figTTMLDocumentWriterForiTT_SetAttribute(uint64_t a1, const __CFString *a2, __CFString *a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970EE10](&getAttributeValidatorDict_sOnce, initAttributeValidatorDict);
  CFDictionaryRef v7 = (const __CFDictionary *)sAttributeValidatorDict;
  if (FigTTMLDocumentWriterStateGetCurrentElementType(DerivedStorage[1]) == 10)
  {
    CFDictionaryRef Attributes = (const __CFDictionary *)FigTTMLDocumentWriterStateGetAttributes(DerivedStorage[1]);
    CFDictionaryGetValue(Attributes, @"http://www.w3.org/XML/1998/namespace id");
    if (FigCFEqual())
    {
      if (FigCFEqual() && FigCFEqual()) {
        a3 = @"15% 0%";
      }
    }
  }
  if (!CFDictionaryContainsKey(v7, a2))
  {
    uint64_t result = CFStringHasPrefix(a2, @"xmlns:");
    if (!result) {
      return result;
    }
    goto LABEL_11;
  }
  Boolean Value = (uint64_t (*)(uint64_t, __CFString *))CFDictionaryGetValue(v7, a2);
  if (!Value || (uint64_t result = Value(a1, a3), result))
  {
LABEL_11:
    uint64_t result = FigTTMLDocumentWriterSetAttribute(*DerivedStorage, (uint64_t)a2, (uint64_t)a3);
    if (!result)
    {
      FigTTMLDocumentWriterStateSetAttribute(DerivedStorage[1], a2, a3);
      return 0;
    }
  }
  return result;
}

uint64_t figTTMLDocumentWriterForiTT_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterFlush(v1);
}

uint64_t writeAttributeIfNotWrittenYet(uint64_t key, uint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)a3)
  {
    uint64_t v5 = (const void *)key;
    CFDictionaryRef v6 = *(const __CFDictionary **)(a3 + 8);
    if (!v6 || (keCGFloat y = CFDictionaryContainsKey(v6, v5), !key))
    {
      keCGFloat y = FigTTMLDocumentWriterSetAttribute(*(void *)(a3 + 16), (uint64_t)v5, a2);
      if (key) {
        *(_DWORD *)a3 = key;
      }
    }
  }
  return key;
}

void initAttributeValidatorDict()
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  uint64_t v1 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, @"begin", 0);
    CFDictionaryAddValue(v1, @"dur", 0);
    CFDictionaryAddValue(v1, @"end", 0);
    CFDictionaryAddValue(v1, @"region", 0);
    CFDictionaryAddValue(v1, @"timeContainer", validateTimeContainer);
    CFDictionaryAddValue(v1, @"style", 0);
    CFDictionaryAddValue(v1, @"use", prohibited);
    CFDictionaryAddValue(v1, @"value", prohibited);
    CFDictionaryAddValue(v1, @"http://www.w3.org/XML/1998/namespace id", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/XML/1998/namespace space", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/XML/1998/namespace lang", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/XML/1998/namespace base", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#parameter clockMode", prohibited);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#parameter dropMode", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#parameter frameRate", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#parameter frameRateMultiplier", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#parameter markerMode", prohibited);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#parameter pixelAspectRatio", prohibited);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#parameter profile", prohibited);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#parameter subFrameRate", prohibited);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#parameter tickRate", prohibited);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#parameter timeBase", validateTimeBase);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#parameter cellResolution", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml/profile/imsc1#parameter aspectRatio", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling backgroundColor", validateBackgroundColor);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling color", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling direction", validateDirection);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling display", validateDisplay);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling displayAlign", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling extent", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling fontFamily", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling fontSize", validateFontSize);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling fontStyle", validateFontStyle);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling fontWeight", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling lineHeight", prohibited);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling opacity", prohibited);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling origin", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling overflow", validateOverflow);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling padding", prohibited);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling showBackground", validateShowBackground);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling textAlign", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling textDecoration", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling textOutline", prohibited);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling unicodeBidi", validateUnicodeBidi);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling visibility", validateVisibility);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling wrapOption", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling writingMode", 0);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml#styling zIndex", prohibited);
    CFDictionaryAddValue(v1, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby kind", 0);
    CFDictionaryAddValue(v1, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby position", 0);
    CFDictionaryAddValue(v1, @"http://namespace.itunes.apple.com/itt/ttml-extension#ruby align", 0);
    CFDictionaryAddValue(v1, @"http://namespace.itunes.apple.com/itt/ttml-extension#vertical combine", validateTextCombine);
    CFDictionaryAddValue(v1, @"http://www.w3.org/ns/ttml/profile/imsc1#styling forcedDisplay", 0);
    CFDictionaryAddValue(v1, @"urn:ebu:tt:style linePadding", prohibited);
    CFDictionaryAddValue(v1, @"urn:ebu:tt:style multiRowAlign", prohibited);
  }
  else
  {
    FigSignalErrorAt();
  }
  sAttributeValidatorDict = (uint64_t)v1;
}

uint64_t validateTimeContainer()
{
  return FigCFEqual();
}

uint64_t prohibited()
{
  return 0;
}

uint64_t validateTimeBase()
{
  return FigCFEqual();
}

BOOL validateBackgroundColor()
{
  return FigCFEqual() != 0;
}

uint64_t validateDirection()
{
  return FigCFEqual();
}

uint64_t validateDisplay()
{
  return FigCFEqual();
}

BOOL validateFontSize()
{
  return FigCFEqual() || FigCFEqual() != 0;
}

BOOL validateFontStyle()
{
  return FigCFEqual() || FigCFEqual() != 0;
}

BOOL validateOverflow()
{
  return FigCFEqual() || FigCFEqual() != 0;
}

uint64_t validateShowBackground()
{
  return FigCFEqual();
}

uint64_t validateUnicodeBidi()
{
  return FigCFEqual();
}

uint64_t validateVisibility()
{
  return FigCFEqual();
}

BOOL validateTextCombine()
{
  return FigCFEqual() || FigCFEqual() != 0;
}

uint64_t FigSampleBufferConsumerOPTSAutoOrderCreate(const __CFAllocator *a1, const void *a2, const char *a3, void *a4)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t v8 = 4294954535;
  if (a2)
  {
    if (a4)
    {
      FigSampleBufferConsumerGetClassID();
      uint64_t v8 = CMDerivedObjectCreate();
      if (!v8)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        CFTypeRef v10 = CFRetain(a2);
        int v11 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
        *(void *)uint64_t DerivedStorage = v10;
        if (a3) {
          uint64_t v12 = a3;
        }
        else {
          uint64_t v12 = "-";
        }
        *(void *)(DerivedStorage + 48) = CFStringCreateWithCString(*v11, v12, 0x8000100u);
        uint64_t v13 = FigSimpleMutexCreate();
        *(void *)(DerivedStorage + 16) = v13;
        if (v13)
        {
          uint64_t v14 = MEMORY[0x1E4F1F9F8];
          *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x1E4F1F9F8];
          *(void *)(DerivedStorage + 40) = *(void *)(v14 + 16);
          CallbacksForSampleBuffersSortedByOutputPTS = CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS();
          uint64_t v8 = CMBufferQueueCreate(a1, 0, CallbacksForSampleBuffersSortedByOutputPTS, (CMBufferQueueRef *)(DerivedStorage + 8));
          if (!v8) {
            *a4 = 0;
          }
        }
        else
        {
          return 4294954510;
        }
      }
    }
  }
  return v8;
}

uint64_t sbcAutoOrder_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 48) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t result = FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 16) = 0;
  return result;
}

__CFString *sbcAutoOrder_copyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferConsumerOPTSAutoOrder %p>", a1);
  return Mutable;
}

uint64_t sbcAutoOrder_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t sbcAutoOrder_SendSampleBuffer(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (!a2) {
    goto LABEL_20;
  }
  FigEndpointStreamAudioEngineSbufTracerDebugPrint(a2);
  CMSampleBufferGetOutputPresentationTimeStamp((CMTime *)time1, (CMSampleBufferRef)a2);
  uint64_t v24 = *(void *)time1;
  unsigned int v5 = *(_DWORD *)&time1[12];
  unsigned int v25 = *(_DWORD *)&time1[8];
  uint64_t v6 = *(void *)&time1[16];
  CMSampleBufferGetOutputDuration((CMTime *)time1, (CMSampleBufferRef)a2);
  *(void *)CMTime time1 = v24;
  *(void *)&time1[8] = __PAIR64__(v5, v25);
  *(void *)&time1[16] = v6;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  if (!CMTimeCompare((CMTime *)time1, &time2))
  {
    if (dword_1E93509B0)
    {
      LODWORD(lhs.CFDictionarySetValue(theDict, key, value) = 0;
      os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    sbcAutoOrder_SendAllPendingSampleBuffer();
    goto LABEL_20;
  }
  if (CMGetAttachment(a2, @"SBUFForAutoOrder", 0) == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
  {
    if ((v5 & 1) == 0
      || (*(unsigned char *)(DerivedStorage + 36) & 1) != 0
      && (*(void *)CMTime time1 = v24,
          *(void *)&time1[8] = __PAIR64__(v5, v25),
          *(void *)&time1[16] = v6,
          CMTime time2 = *(CMTime *)(DerivedStorage + 24),
          CMTimeCompare((CMTime *)time1, &time2) <= 0))
    {
      uint64_t updated = sbcAutoOrder_SendSbufAndUpdateLastOPTS(a1, (opaqueCMSampleBuffer *)a2);
LABEL_13:
      uint64_t v10 = updated;
      goto LABEL_33;
    }
    if (dword_1E93509B0)
    {
      LODWORD(lhs.CFDictionarySetValue(theDict, key, value) = 0;
      int v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMBufferQueueEnqueue(*(CMBufferQueueRef *)(DerivedStorage + 8), a2);
    CMRemoveAttachment(a2, @"SBUFForAutoOrder");
LABEL_20:
    uint64_t v10 = 0;
    goto LABEL_33;
  }
  if (v5 & 1) != 0 && (*(unsigned char *)(DerivedStorage + 36))
  {
    *(void *)CMTime time1 = v24;
    *(void *)&time1[8] = __PAIR64__(v5, v25);
    *(void *)&time1[16] = v6;
    CMTime time2 = *(CMTime *)(DerivedStorage + 24);
    if (CMTimeCompare((CMTime *)time1, &time2))
    {
      if (dword_1E93509B0)
      {
        LODWORD(lhs.CFDictionarySetValue(theDict, key, value) = 0;
        uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t updated = sbcAutoOrder_SendAllPendingSampleBuffer();
      if (updated) {
        goto LABEL_13;
      }
    }
  }
  uint64_t updated = sbcAutoOrder_SendSbufAndUpdateLastOPTS(a1, (opaqueCMSampleBuffer *)a2);
  if (updated) {
    goto LABEL_13;
  }
  *(_OWORD *)&type.CMTimeValue value = *(_OWORD *)(DerivedStorage + 24);
  type.CMTimeEpoch epoch = *(void *)(DerivedStorage + 40);
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  memset(time1, 0, sizeof(time1));
  if (CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(v12 + 8)))
  {
LABEL_30:
    uint64_t v10 = 0;
    goto LABEL_31;
  }
  *(void *)CMTime time1 = *(void *)v12;
  CMTimeMake(&time2, 10, 1000);
  CMTime lhs = type;
  CMTimeAdd((CMTime *)&time1[8], &lhs, &time2);
  CFTypeRef cf = 0;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CallbacksForSampleBuffersSortedByOutputPTS = CMBufferQueueGetCallbacksForSampleBuffersSortedByOutputPTS();
  uint64_t v15 = CMBufferQueueCreate(v13, 0, CallbacksForSampleBuffersSortedByOutputPTS, (CMBufferQueueRef *)&cf);
  if (!v15)
  {
    uint64_t v15 = CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(v12 + 8), (OSStatus (__cdecl *)(CMBufferRef, void *))sbcAutoOrder_SendStashedBufferIfLesserOrEqualToOPTS, time1);
    if (!v15)
    {
      CFMutableDictionaryRef v16 = *(const void **)(v12 + 8);
      CFTypeRef v17 = cf;
      *(void *)(v12 + 8) = cf;
      if (v17) {
        CFRetain(v17);
      }
      if (v16) {
        CFRelease(v16);
      }
      goto LABEL_30;
    }
  }
  uint64_t v10 = v15;
LABEL_31:
  if (cf) {
    CFRelease(cf);
  }
LABEL_33:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v10;
}

uint64_t sbcAutoOrder_IsQueueAtOrAboveHighWater()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 16);
  if (!v3) {
    return 0;
  }

  return v3(v0);
}

uint64_t sbcAutoOrder_IsQueueBelowLowWater()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 24);
  if (!v3) {
    return 0;
  }

  return v3(v0);
}

uint64_t sbcAutoOrder_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 32);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t sbcAutoOrder_RemoveLowWaterTrigger(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t sbcAutoOrder_GetPendingSampleBufferCount()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  BufferCFIndex Count = CMBufferQueueGetBufferCount(*(CMBufferQueueRef *)(DerivedStorage + 8));
  uint64_t v2 = *(void *)DerivedStorage;
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 48);
  if (v5) {
    uint64_t v6 = v5(v2);
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = v6 + BufferCount;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  return v7;
}

uint64_t sbcAutoOrder_PostNotification(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 64);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t sbcAutoOrder_Flush()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)DerivedStorage;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void (**)(uint64_t))(v3 + 72);
  if (v4) {
    v4(v1);
  }
  sbcAutoOrder_SendAllPendingSampleBuffer();
  CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 8));
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 24) = *MEMORY[0x1E4F1F9F8];
  *(void *)(DerivedStorage + 40) = *(void *)(v5 + 16);
  return 0;
}

uint64_t sbcAutoOrder_SendAllPendingSampleBuffer()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(DerivedStorage + 8)))
  {
    uint64_t refcon = *(void *)DerivedStorage;
    long long v3 = *MEMORY[0x1E4F1FA10];
    uint64_t v4 = *(void *)(MEMORY[0x1E4F1FA10] + 16);
    uint64_t v5 = 0;
    uint64_t result = CMBufferQueueCallForEachBuffer(*(CMBufferQueueRef *)(DerivedStorage + 8), (OSStatus (__cdecl *)(CMBufferRef, void *))sbcAutoOrder_SendStashedBufferIfLesserOrEqualToOPTS, &refcon);
    if (result) {
      return result;
    }
    CMBufferQueueReset(*(CMBufferQueueRef *)(DerivedStorage + 8));
  }
  return 0;
}

uint64_t sbcAutoOrder_SendSbufAndUpdateLastOPTS(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (CMTime *)CMBaseObjectGetDerivedStorage();
  CMSampleBufferGetOutputPresentationTimeStamp(&v16, a2);
  CMTimeValue value = v16.value;
  CMTimeFlags flags = v16.flags;
  CMTimeScale timescale = v16.timescale;
  CMTimeEpoch epoch = v16.epoch;
  CMSampleBufferGetOutputDuration(&v16, a2);
  CMTimeValue v17 = v16.value;
  CMTimeFlags v6 = v16.flags;
  CMTimeScale v18 = v16.timescale;
  CMTimeEpoch v7 = v16.epoch;
  CMTimeValue v8 = DerivedStorage->value;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  int v11 = *(uint64_t (**)(CMTimeValue, opaqueCMSampleBuffer *))(v10 + 8);
  if (!v11) {
    return 4294954514;
  }
  uint64_t v12 = v11(v8, a2);
  if (!v12 && (flags & 1) != 0 && (v6 & 1) != 0)
  {
    v14.CMTimeEpoch epoch = v7;
    lhs.CMTimeValue value = value;
    lhs.CMTimeScale timescale = timescale;
    lhs.CMTimeFlags flags = flags;
    lhs.CMTimeEpoch epoch = epoch;
    v14.CMTimeValue value = v17;
    v14.CMTimeScale timescale = v18;
    v14.CMTimeFlags flags = v6;
    CMTimeAdd(&v16, &lhs, &v14);
    DerivedStorage[1] = v16;
  }
  return v12;
}

uint64_t sbcAutoOrder_SendStashedBufferIfLesserOrEqualToOPTS(opaqueCMSampleBuffer *a1, uint64_t *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  CMSampleBufferGetOutputPresentationTimeStamp(&v13, a1);
  if ((v13.flags & 1) == 0
    || (*((unsigned char *)a2 + 20) & 1) != 0
    && (CMSampleBufferGetOutputPresentationTimeStamp(&time1, a1),
        CMTime time2 = *(CMTime *)(a2 + 1),
        CMTimeCompare(&time1, &time2) <= 0))
  {
    if (dword_1E93509B0)
    {
      int v11 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v6 = *a2;
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t, opaqueCMSampleBuffer *))(v8 + 8);
    if (v9) {
      return v9(v6, a1);
    }
    else {
      return 4294954514;
    }
  }
  else
  {
    uint64_t result = a2[4];
    if (result)
    {
      CMBufferQueueEnqueue((CMBufferQueueRef)result, a1);
      return 0;
    }
  }
  return result;
}

uint64_t FigCDSIntervalCreate(void *a1)
{
  *a1 = 0;
  MEMORY[0x19970EE10](&FigCDSIntervalGetClassID_sRegisterFigCDSIntervalBaseTypeOnce, RegisterFigCDSIntervalBaseType);
  uint64_t v2 = CMDerivedObjectCreate();
  if (!v2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(double *)uint64_t DerivedStorage = FigBytePumpGetFigBaseObject(DerivedStorage);
    *(void *)(DerivedStorage + 8) = v4;
    *a1 = 0;
  }
  return v2;
}

uint64_t FigCDSParentIntervalCreate(void *a1)
{
  *a1 = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigCDSParentIntervalGetClassID_sRegisterFigCDSParentIntervalBaseTypeOnce, RegisterFigCDSParentIntervalBaseType);
  uint64_t v3 = CMDerivedObjectCreate();
  if (v3) {
    return v3;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = 0;
  DerivedStorage[2] = 0;
  DerivedStorage[3] = 0x4018000000000000;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  DerivedStorage[2] = Mutable;
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  FigCDSIntervalCreate(DerivedStorage);
  uint64_t v6 = 0;
  *a1 = 0;
  return v6;
}

__CFString *FigCDSIntervalCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSInterval: <%p>", a1);
  return Mutable;
}

__CFString *FigCDSInterval_FigCDSIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSInterval <FigCDSIntervalProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSInterval_FigCDSIntervalProtocol_GetRange(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)CMBaseObjectGetDerivedStorage();
  return 0;
}

uint64_t FigCDSInterval_FigCDSIntervalProtocol_SetRange(double a1, double a2)
{
  uint64_t DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  *uint64_t DerivedStorage = a1;
  DerivedStorage[1] = a2;
  return 0;
}

uint64_t RegisterFigCDSIntervalBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSIntervalBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCDSInterval]");
}

void FigCDSParentIntervalFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
  }
}

__CFString *FigCDSParentIntervalCopyDebugDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSParentInterval: <%p>", DerivedStorage);
  return Mutable;
}

__CFString *FigCDSParentInterval_FigCDSIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSParentInterval <FigCDSIntervalProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSParentInterval_FigCDSIntervalProtocol_GetRange(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v5 = *(void *)(ProtocolVTable + 16);
    if (v5)
    {
      uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      if (v6) {
        v6(v3, a2);
      }
    }
  }
  return 0;
}

uint64_t FigCDSParentInterval_FigCDSIntervalProtocol_SetRange(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, double, double))(v6 + 16);
      if (v7) {
        v7(v4, a1, a2);
      }
    }
  }
  return 0;
}

__CFString *FigCDSParentInterval_FigCDSParentIntervalProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCDSParentInterval <FigCDSParentIntervalProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCDSParentInterval_FigCDSParentIntervalProtocol_AddChildInterval(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double FigBaseObject = FigBytePumpGetFigBaseObject(DerivedStorage);
  double v19 = v4;
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable
    || (uint64_t v6 = *(void *)(ProtocolVTable + 16)) == 0
    || (uint64_t v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) == 0
    || v7(a2, &FigBaseObject))
  {
    FigSignalErrorAt();
    return 0;
  }
  double v8 = *(double *)(DerivedStorage + 24);
  uint64_t v9 = (uint64_t)(FigBaseObject / v8);
  uint64_t v10 = (uint64_t)((FigBaseObject + v19) / v8);
  if (v9 <= v10)
  {
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v12 = v10 + 1;
    CMTime v13 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      CFStringRef v14 = CFStringCreateWithFormat(v11, 0, @"%ld", v9);
      Boolean Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v14);
      if (!Value)
      {
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v11, 0, v13);
        if (!Mutable)
        {
          FigSignalErrorAt();
          if (v14) {
            CFRelease(v14);
          }
          return 0;
        }
        Boolean Value = Mutable;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), v14, Mutable);
        CFRelease(Value);
      }
      CFArrayAppendValue((CFMutableArrayRef)Value, a2);
      if (v14) {
        CFRelease(v14);
      }
      ++v9;
    }
    while (v12 != v9);
  }
  return 0;
}

uint64_t FigCDSParentInterval_FigCDSParentIntervalProtocol_RemoveChildInterval(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  double FigBaseObject = FigBytePumpGetFigBaseObject(DerivedStorage);
  double v19 = v4;
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (uint64_t v6 = *(void *)(ProtocolVTable + 16)) != 0
    && (uint64_t v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
    && !v7(a2, &FigBaseObject))
  {
    double v8 = *(double *)(DerivedStorage + 24);
    uint64_t v9 = (uint64_t)(FigBaseObject / v8);
    uint64_t v10 = (uint64_t)((FigBaseObject + v19) / v8);
    if (v9 <= v10)
    {
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v12 = v10 + 1;
      do
      {
        CFStringRef v13 = CFStringCreateWithFormat(v11, 0, @"%ld", v9);
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v13);
        if (Value)
        {
          CFArrayRef v15 = Value;
          v20.length = CFArrayGetCount(Value);
          v20.uint64_t location = 0;
          CFIndex FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v15, v20, a2);
          if ((FirstIndexOfValue & 0x8000000000000000) == 0) {
            CFArrayRemoveValueAtIndex(v15, FirstIndexOfValue);
          }
          if (!CFArrayGetCount(v15)) {
            CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(DerivedStorage + 16), v13);
          }
        }
        if (v13) {
          CFRelease(v13);
        }
        ++v9;
      }
      while (v12 != v9);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return 0;
}

uint64_t FigCDSParentInterval_FigCDSParentIntervalProtocol_RemoveAllChildIntervals()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 16));
  return 0;
}

uint64_t FigCDSParentInterval_FigCDSParentIntervalProtocol_GetChildIntervalsAt(double a1, double a2, uint64_t a3, __CFArray **a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (a2 >= 0.0)
  {
    CFArrayRef v10 = copySubIntervalsAt(a1);
    if (v10)
    {
      CFArrayRef v11 = v10;
      v30.length = CFArrayGetCount(v10);
      v30.uint64_t location = 0;
      CFArrayAppendArray(Mutable, v11, v30);
      CFRelease(v11);
    }
    CFArrayRef v12 = copySubIntervalsAt(a1 + a2);
    if (v12)
    {
      CFArrayRef v13 = v12;
      v31.length = CFArrayGetCount(v12);
      v31.uint64_t location = 0;
      CFArrayAppendArray(Mutable, v13, v31);
      CFRelease(v13);
    }
    CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(DerivedStorage + 16));
    double v15 = *(double *)(DerivedStorage + 24);
    uint64_t v16 = (uint64_t)(a1 / v15);
    double v17 = (a1 + a2) / v15;
    uint64_t v18 = (uint64_t)v17;
    if ((uint64_t)v17 - v16 + 1 >= Count)
    {
      context[1] = (uint64_t)v17;
      context[2] = Mutable;
      context[0] = v16;
      *(double *)&context[3] = a1;
      *(double *)&_OWORD context[4] = a2;
      CFDictionaryApplyFunction(*(CFDictionaryRef *)(DerivedStorage + 16), (CFDictionaryApplierFunction)cdsi_getIntervalsByRange, context);
    }
    else if (v18 - 1 > v16)
    {
      uint64_t v19 = v16 + 1;
      do
      {
        CFStringRef v20 = CFStringCreateWithFormat(v8, 0, @"%ld", v19);
        CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v20);
        if (Value)
        {
          CFArrayRef v22 = Value;
          v32.length = CFArrayGetCount(Value);
          v32.uint64_t location = 0;
          CFArrayAppendArray(Mutable, v22, v32);
        }
        if (v20) {
          CFRelease(v20);
        }
        ++v19;
      }
      while (v18 != v19);
    }
    do
    {
      if (CFArrayGetCount(Mutable) < 1) {
        break;
      }
      CFIndex v23 = 0;
      int v24 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v23);
        v29.length = CFArrayGetCount(Mutable);
        v29.uint64_t location = 0;
        LastIndexOfCFArrayRef Value = CFArrayGetLastIndexOfValue(Mutable, v29, ValueAtIndex);
        if (LastIndexOfValue > v23)
        {
          CFArrayRemoveValueAtIndex(Mutable, LastIndexOfValue);
          int v24 = 1;
        }
        ++v23;
      }
      while (CFArrayGetCount(Mutable) > v23);
    }
    while (v24);
  }
  *a4 = Mutable;
  return 0;
}

CFMutableArrayRef copySubIntervalsAt(double a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFStringRef v5 = CFStringCreateWithFormat(v3, 0, @"%ld", (uint64_t)(a1 / *(double *)(DerivedStorage + 24)));
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 16), v5);
  if (Value)
  {
    CFArrayRef v7 = Value;
    *(double *)CMTime context = a1;
    context[1] = Mutable;
    v10.length = CFArrayGetCount(Value);
    v10.uint64_t location = 0;
    CFArrayApplyFunction(v7, v10, (CFArrayApplierFunction)findAndSaveCoveringIntervalsApplier, context);
  }
  else if (Mutable)
  {
    CFRelease(Mutable);
    CFMutableArrayRef Mutable = 0;
  }
  if (v5) {
    CFRelease(v5);
  }
  return Mutable;
}

void cdsi_getIntervalsByRange(const __CFString *a1, const __CFArray *a2, uint64_t a3)
{
  IntCFArrayRef Value = CFStringGetIntValue(a1);
  if (*(void *)a3 <= IntValue && a2 && *(void *)(a3 + 8) >= IntValue)
  {
    long long v6 = *(_OWORD *)(a3 + 24);
    uint64_t v7 = *(void *)(a3 + 16);
    v8.length = CFArrayGetCount(a2);
    v8.uint64_t location = 0;
    CFArrayApplyFunction(a2, v8, (CFArrayApplierFunction)findAndSaveOverlappingIntervalsApplier, &v6);
  }
}

void findAndSaveCoveringIntervalsApplier(const void *a1, uint64_t a2)
{
  double FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  double v9 = v4;
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (uint64_t v6 = *(void *)(ProtocolVTable + 16)) != 0
    && (uint64_t v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
    && !v7(a1, &FigBaseObject))
  {
    if (FigBaseObject <= *(double *)a2 && *(double *)a2 <= FigBaseObject + v9) {
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 8), a1);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void findAndSaveOverlappingIntervalsApplier(const void *a1, uint64_t a2)
{
  double FigBaseObject = FigBytePumpGetFigBaseObject(a1);
  double v16 = v4;
  FigCDSIntervalProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable
    && (uint64_t v6 = *(void *)(ProtocolVTable + 16)) != 0
    && (uint64_t v7 = *(unsigned int (**)(const void *, double *))(v6 + 8)) != 0
    && !v7(a1, &FigBaseObject))
  {
    double v8 = FigBaseObject + v16;
    double v9 = *(double *)a2;
    if (FigBaseObject <= *(double *)a2 && v9 <= v8) {
      goto LABEL_18;
    }
    BOOL v10 = v9 > v8;
    double v11 = v9 + *(double *)(a2 + 8);
    BOOL v12 = v9 > FigBaseObject;
    BOOL v13 = FigBaseObject > v11;
    if (FigBaseObject > v11) {
      BOOL v12 = 1;
    }
    if (v11 > v8) {
      BOOL v13 = 1;
    }
    if (v8 > v11) {
      BOOL v10 = 1;
    }
    BOOL v14 = !v13 || !v12;
    if (v14 || !v10) {
LABEL_18:
    }
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 16), a1);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t RegisterFigCDSParentIntervalBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCDSParentIntervalBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCDSParentInterval]");
}

uint64_t FigStreamPlaylistParserCopySerializedRepresentationForMediaGroupAsXPCObject(uint64_t a1, const __CFDictionary *a2)
{
  CFAllocatorRef v2 = (const void *)FigStreamPlaylistParserCopySerializedRepresentationForMediaGroup(a1, a2);
  uint64_t v3 = _CFXPCCreateXPCObjectFromCFObject();
  if (v2) {
    CFRelease(v2);
  }
  return v3;
}

uint64_t FigStreamPlaylistParserCopySerializedRepresentationForMediaGroup(uint64_t a1, const __CFDictionary *a2)
{
  if (FigCFDictionaryGetCount() < 1) {
    return 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  v6[0] = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  if (!v6[0])
  {
    FigSignalErrorAt();
    return 0;
  }
  v6[1] = a1;
  CFDictionaryApplyFunction(a2, (CFDictionaryApplierFunction)streamPlaylistParser_copySerializedRepresentationForMediaGroupApplier, v6);
  return v6[0];
}

uint64_t FigStreamPlaylistParserCreateMediaGroupFromXPCDictionary(uint64_t a1, void *a2, __CFDictionary **a3)
{
  CFArrayRef v5 = (const __CFArray *)_CFXPCCreateCFObjectFromXPCObject();
  if (v5)
  {
    CFArrayRef v6 = v5;
    uint64_t MediaGroup = FigStreamPlaylistParserCreateMediaGroup(v5, a2, a3);
    CFRelease(v6);
    return MediaGroup;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigStreamPlaylistParserCreateMediaGroup(const __CFArray *a1, void *a2, __CFDictionary **a3)
{
  if (!a1) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(a1);
  if (!a3 || Count < 1) {
    return 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    double v9 = Mutable;
    CFIndex v10 = CFArrayGetCount(a1);
    if (v10 < 1)
    {
      if (!a2)
      {
LABEL_25:
        *a3 = v9;
        return 0;
      }
      BOOL v13 = 0;
    }
    else
    {
      CFIndex v11 = v10;
      CFIndex v23 = a2;
      int v24 = a3;
      CFIndex v12 = 0;
      BOOL v13 = 0;
      BOOL v14 = (const void *)*MEMORY[0x1E4F21C98];
      double v15 = (const void *)*MEMORY[0x1E4F21B80];
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v12);
        CFDictionaryRef v17 = ValueAtIndex;
        if (ValueAtIndex) {
          CFTypeRef v18 = CFRetain(ValueAtIndex);
        }
        else {
          CFTypeRef v18 = 0;
        }
        CFArrayRef Value = CFDictionaryGetValue(v17, v14);
        CFStringRef v20 = Value;
        if (Value)
        {
          CFRetain(Value);
          CFDictionarySetValue(v9, v20, v18);
        }
        if (!v13)
        {
          uint64_t v21 = CFDictionaryGetValue(v17, v15);
          BOOL v13 = v21;
          if (v21) {
            CFRetain(v21);
          }
        }
        if (v20) {
          CFRelease(v20);
        }
        if (v18) {
          CFRelease(v18);
        }
        ++v12;
      }
      while (v11 != v12);
      a2 = v23;
      if (!v23)
      {
        *int v24 = v9;
        if (v13) {
          CFRelease(v13);
        }
        return 0;
      }
      a3 = v24;
    }
    *a2 = v13;
    goto LABEL_25;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamPlaylistParserSerializeDateRangeSpecifiers(uint64_t a1, __CFArray **a2)
{
  CFArrayRef DateRangeSpecifiers = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers(a1);

  return streamPlaylistParser_serializeTaggedRangeEntries(DateRangeSpecifiers, a2);
}

uint64_t streamPlaylistParser_serializeTaggedRangeEntries(const __CFArray *a1, __CFArray **a2)
{
  if (!a2) {
    return 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    return FigSignalErrorAt();
  }
  long long v38 = a2;
  CFIndex v5 = 0;
  CFArrayRef v6 = (const void *)*MEMORY[0x1E4F21D98];
  CMTimeEpoch v50 = (const void *)*MEMORY[0x1E4F21D78];
  uint64_t v51 = (const void *)*MEMORY[0x1E4F21D88];
  int v48 = (const void *)*MEMORY[0x1E4F21D80];
  CFTypeRef v49 = (const void *)*MEMORY[0x1E4F21D90];
  *(void *)uint64_t v46 = *MEMORY[0x1E4F21B48];
  *(void *)long long v47 = *MEMORY[0x1E4F21D38];
  keCGFloat y = (void *)*MEMORY[0x1E4F21B50];
  uint64_t v7 = *MEMORY[0x1E4F1CFD0];
  uint64_t v8 = *MEMORY[0x1E4F1CFC8];
  CMTime v44 = (void *)*MEMORY[0x1E4F21B58];
  CMTimeEpoch v42 = (const void *)*MEMORY[0x1E4F21DD8];
  CMTimeEpoch v43 = (const void *)*MEMORY[0x1E4F21DD0];
  CMTime v41 = (const void *)*MEMORY[0x1E4F21DE0];
  CMTime v40 = (const void *)*MEMORY[0x1E4F21DA0];
  *(void *)uint64_t v39 = *MEMORY[0x1E4F21B30];
  uint64_t v9 = *MEMORY[0x1E4F21C58];
  CFIndex v10 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  while (1)
  {
    CFIndex v11 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    if (a1) {
      CFIndex Count = CFArrayGetCount(a1);
    }
    else {
      CFIndex Count = 0;
    }
    if (v5 >= Count)
    {
      uint64_t v35 = 0;
      *long long v38 = Mutable;
      return v35;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v5);
    CFAllocatorRef v14 = (const __CFAllocator *)FigGetAllocatorForMedia();
    double v15 = v10;
    CFMutableDictionaryRef v16 = CFDictionaryCreateMutable(v14, 0, v10, v11);
    if (!v16) {
      break;
    }
    CFDictionaryRef v17 = v16;
    MetadataDict = (const void *)FigDateRangeSpecifierGetMetadataDict((uint64_t)ValueAtIndex);
    uint64_t v19 = v6;
    uint64_t v20 = FigWireDictionarySetCFDictionary(v17, v6, MetadataDict);
    if (v20) {
      goto LABEL_33;
    }
    Identifier = (const void *)FigDateRangeSpecifierGetIdentifier((uint64_t)ValueAtIndex);
    uint64_t v20 = FigWireDictionarySetCFString(v17, v51, Identifier);
    if (v20) {
      goto LABEL_33;
    }
    TaggedRangeClass = (const void *)FigDateRangeSpecifierGetTaggedRangeClass((uint64_t)ValueAtIndex);
    uint64_t v20 = FigWireDictionarySetCFString(v17, v50, TaggedRangeClass);
    if (v20) {
      goto LABEL_33;
    }
    TaggedRangeLine = (const void *)FigDateRangeSpecifierGetTaggedRangeLine((uint64_t)ValueAtIndex);
    uint64_t v20 = FigWireDictionarySetCFString(v17, v49, TaggedRangeLine);
    if (v20) {
      goto LABEL_33;
    }
    TaggedRangeCue = (const void *)FigDateRangeSpecifierGetTaggedRangeCue((uint64_t)ValueAtIndex);
    uint64_t v20 = FigWireDictionarySetCFString(v17, v48, TaggedRangeCue);
    if (v20) {
      goto LABEL_33;
    }
    StartDate = (const void *)FigDateRangeSpecifierGetStartDate((uint64_t)ValueAtIndex);
    uint64_t v20 = FigWireDictionarySetCFDate((int)v17, v47[0], StartDate);
    if (v20) {
      goto LABEL_33;
    }
    EndDate = (const void *)FigDateRangeSpecifierGetEndDate((uint64_t)ValueAtIndex);
    uint64_t v20 = FigWireDictionarySetCFDate((int)v17, v46[0], EndDate);
    if (v20) {
      goto LABEL_33;
    }
    CMTimeEpoch v27 = (const void *)(FigDateRangeSpecifierGetEndOnNext((uint64_t)ValueAtIndex) ? v7 : v8);
    CFDictionarySetValue(v17, key, v27);
    CFAllocatorRef v28 = (const void *)(FigDateRangeSpecifierGetEndOnNextSet((uint64_t)ValueAtIndex) ? v7 : v8);
    CFDictionarySetValue(v17, v44, v28);
    Scte35cmd = (const void *)FigDateRangeSpecifierGetScte35cmd((uint64_t)ValueAtIndex);
    uint64_t v20 = FigWireDictionarySetCFData(v17, v43, Scte35cmd);
    if (v20) {
      goto LABEL_33;
    }
    Scte35in = (const void *)FigDateRangeSpecifierGetScte35in((uint64_t)ValueAtIndex);
    uint64_t v20 = FigWireDictionarySetCFData(v17, v42, Scte35in);
    if (v20) {
      goto LABEL_33;
    }
    Scte35out = (const void *)FigDateRangeSpecifierGetScte35out((uint64_t)ValueAtIndex);
    uint64_t v20 = FigWireDictionarySetCFData(v17, v41, Scte35out);
    if (v20) {
      goto LABEL_33;
    }
    FigDateRangeSpecifierGetDuration((uint64_t)ValueAtIndex);
    FigCFDictionarySetDouble();
    FigDateRangeSpecifierGetPlannedDuration((uint64_t)ValueAtIndex);
    FigCFDictionarySetDouble();
    TagsFirstFoundDateDict = (const void *)FigDateRangeSpecifierGetTagsFirstFoundDateDict((uint64_t)ValueAtIndex);
    uint64_t v20 = FigWireDictionarySetCFDictionary(v17, v40, TagsFirstFoundDateDict);
    if (v20
      || (DiscoveryTimestamp = (const void *)FigDateRangeSpecifierGetDiscoveryTimestamp((uint64_t)ValueAtIndex),
          uint64_t v20 = FigWireDictionarySetCFDate((int)v17, v39[0], DiscoveryTimestamp),
          v20))
    {
LABEL_33:
      uint64_t v35 = v20;
LABEL_34:
      CFRelease(v17);
      goto LABEL_35;
    }
    ModificationTimestamp = (const void *)FigDateRangeSpecifierGetModificationTimestamp((uint64_t)ValueAtIndex);
    uint64_t v35 = FigWireDictionarySetCFDate((int)v17, v9, ModificationTimestamp);
    if (v35) {
      goto LABEL_34;
    }
    CFArrayAppendValue(Mutable, v17);
    CFRelease(v17);
LABEL_29:
    CFIndex v10 = v15;
    ++v5;
    CFArrayRef v6 = v19;
  }
  uint64_t v19 = v6;
  uint64_t v36 = FigSignalErrorAt();
  if (!v36)
  {
    CFArrayAppendValue(Mutable, 0);
    goto LABEL_29;
  }
  uint64_t v35 = v36;
LABEL_35:
  CFRelease(Mutable);
  return v35;
}

uint64_t streamPlaylistParser_deserializeTaggedRangeEntries(uint64_t a1, const __CFArray *a2)
{
  FigMediaPlaylistSetDateRangeSpecifiers(a1);
  CFArrayRef v48 = a2;
  CFIndex Count = CFArrayGetCount(a2);
  if (!Count) {
    return 0;
  }
  CFIndex v3 = 0;
  CMTime v44 = (void *)*MEMORY[0x1E4F21D88];
  keCGFloat y = (void *)*MEMORY[0x1E4F21D98];
  CMTimeEpoch v42 = (void *)*MEMORY[0x1E4F21D90];
  CMTimeEpoch v43 = (void *)*MEMORY[0x1E4F21D78];
  uint64_t v40 = *MEMORY[0x1E4F21D38];
  CMTime v41 = (void *)*MEMORY[0x1E4F21D80];
  uint64_t v39 = *MEMORY[0x1E4F21B48];
  long long v38 = (void *)*MEMORY[0x1E4F21DD0];
  uint64_t v36 = (void *)*MEMORY[0x1E4F21DE0];
  long long v37 = (void *)*MEMORY[0x1E4F21DD8];
  uint64_t v34 = *MEMORY[0x1E4F21B30];
  uint64_t v35 = (void *)*MEMORY[0x1E4F21DA0];
  uint64_t v33 = *MEMORY[0x1E4F21C58];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v48, v3);
    CFDateRef v58 = 0;
    CFTypeRef v59 = 0;
    CFDateRef v56 = 0;
    CFDateRef v57 = 0;
    CFDateRef v55 = 0;
    if (!ValueAtIndex)
    {
      CFRange v31 = 0;
      MutableCopCGFloat y = 0;
      uint64_t v30 = 0;
      uint64_t v26 = 0;
      CFArrayRef v22 = 0;
      uint64_t v20 = 0;
      CFTypeRef v18 = 0;
      goto LABEL_39;
    }
    CFDictionaryRef v5 = ValueAtIndex;
    CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, key);
    uint64_t v7 = Value;
    if (Value) {
      CFRetain(Value);
    }
    long long v52 = v7;
    uint64_t v8 = CFDictionaryGetValue(v5, v44);
    uint64_t v9 = v8;
    if (v8) {
      CFRetain(v8);
    }
    CFIndex v53 = v3;
    int32_t v54 = v9;
    CFIndex v10 = CFDictionaryGetValue(v5, v43);
    CFIndex v11 = v10;
    if (v10) {
      CFRetain(v10);
    }
    CFIndex v12 = CFDictionaryGetValue(v5, v42);
    BOOL v13 = v12;
    if (v12) {
      CFRetain(v12);
    }
    CFAllocatorRef v14 = CFDictionaryGetValue(v5, v41);
    double v15 = v14;
    if (v14) {
      CFRetain(v14);
    }
    uint64_t v16 = FigWireDictionaryCopyCFDate((uint64_t)v5, v40, &v58);
    if (v16 || (uint64_t v16 = FigWireDictionaryCopyCFDate((uint64_t)v5, v39, &v57), v16))
    {
      uint64_t v30 = v16;
      CFTypeRef v51 = 0;
      CFTypeRef v18 = 0;
      uint64_t v20 = 0;
      CFArrayRef v22 = 0;
      uint64_t v26 = 0;
      MutableCopCGFloat y = 0;
    }
    else
    {
      LOBYTE(v60) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      char v50 = LOBYTE(v60);
      LOBYTE(v60) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      char v49 = LOBYTE(v60);
      CFDictionaryRef v17 = CFDictionaryGetValue(v5, v38);
      CFTypeRef v18 = v17;
      if (v17) {
        CFRetain(v17);
      }
      uint64_t v19 = CFDictionaryGetValue(v5, v37);
      uint64_t v20 = v19;
      if (v19) {
        CFRetain(v19);
      }
      uint64_t v21 = CFDictionaryGetValue(v5, v36);
      CFArrayRef v22 = v21;
      if (v21) {
        CFRetain(v21);
      }
      double v60 = 0.0;
      FigCFDictionaryGetDoubleIfPresent();
      double v23 = v60;
      double v60 = 0.0;
      FigCFDictionaryGetDoubleIfPresent();
      double v24 = v60;
      unsigned int v25 = CFDictionaryGetValue(v5, v35);
      uint64_t v26 = v25;
      if (v25) {
        CFRetain(v25);
      }
      FigGetAllocatorForMedia();
      MutableCopCGFloat y = (const void *)FigCFDictionaryCreateMutableCopy();
      uint64_t v28 = FigWireDictionaryCopyCFDate((uint64_t)v5, v34, &v56);
      if (!v28)
      {
        uint64_t v28 = FigWireDictionaryCopyCFDate((uint64_t)v5, v33, &v55);
        if (!v28)
        {
          CFRange v29 = v52;
          uint64_t v30 = FigDateRangeSpecifierCreate(v52, v54, v11, v13, v15, v58, v57, v50, v23, v24, 0.0, 0.0, v49, v18, v20, v22, MutableCopy, 0, 0,
                  v56,
                  v55,
                  (uint64_t *)&v59);
          if (v30)
          {
            CFTypeRef v51 = 0;
          }
          else
          {
            CFTypeRef v51 = v59;
            CFTypeRef v59 = 0;
          }
          goto LABEL_28;
        }
      }
      uint64_t v30 = v28;
      CFTypeRef v51 = 0;
    }
    CFRange v29 = v52;
LABEL_28:
    if (v29) {
      CFRelease(v29);
    }
    if (v54) {
      CFRelease(v54);
    }
    if (v11) {
      CFRelease(v11);
    }
    if (v13) {
      CFRelease(v13);
    }
    if (v15) {
      CFRelease(v15);
    }
    CFIndex v3 = v53;
    CFRange v31 = (void *)v51;
LABEL_39:
    if (v58) {
      CFRelease(v58);
    }
    if (v57) {
      CFRelease(v57);
    }
    if (v18) {
      CFRelease(v18);
    }
    if (v20) {
      CFRelease(v20);
    }
    if (v22) {
      CFRelease(v22);
    }
    if (v26) {
      CFRelease(v26);
    }
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    if (v56) {
      CFRelease(v56);
    }
    if (v55) {
      CFRelease(v55);
    }
    if (v59) {
      CFRelease(v59);
    }
    if (v30) {
      break;
    }
    FigMediaPlaylistAddDateRangeSpecifier(a1, v31);
    if (v31) {
      CFRelease(v31);
    }
    if (Count == ++v3) {
      return 0;
    }
  }
  if (v31) {
    CFRelease(v31);
  }
  return v30;
}

uint64_t FigStreamPlaylistParserSerializeMultivariantPlaylist(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v60 = FigSignalErrorAt();
    goto LABEL_56;
  }
  CFDictionaryRef v5 = Mutable;
  CFArrayRef v6 = (const void *)*MEMORY[0x1E4F21C60];
  PlaylistVariables = (const void *)FigMultivariantPlaylistGetPlaylistVariables(v2);
  if (!FigWireDictionarySetCFDictionary(v5, v6, PlaylistVariables))
  {
    CFArrayRef Alternates = (const __CFArray *)FigMultivariantPlaylistGetAlternates(v2);
    if (Alternates && CFArrayGetCount(Alternates) >= 1)
    {
      CFAllocatorRef v9 = (const __CFAllocator *)FigGetAllocatorForMedia();
      CMTimeValue value = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
      if (value)
      {
        FigMultivariantPlaylistGetAlternates(v2);
        FigCFArrayApplyFunction();
        CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E4F21B60], value);
        CFRelease(value);
      }
      else if (FigSignalErrorAt())
      {
        goto LABEL_33;
      }
    }
    CFIndex v10 = (const void *)*MEMORY[0x1E4F21C48];
    MediaSelectionArraCGFloat y = (const void *)FigMultivariantPlaylistGetMediaSelectionArray(v2);
    if (!FigWireDictionarySetCFArray(v5, v10, MediaSelectionArray))
    {
      if (FigMultivariantPlaylistGetAudioGroups(v2))
      {
        CFDictionaryRef AudioGroups = (const __CFDictionary *)FigMultivariantPlaylistGetAudioGroups(v2);
        CFMutableArrayRef v13 = streamPlaylistParser_copySerializedRepresentationForMediaGroups(AudioGroups);
        if (v13)
        {
          CFMutableArrayRef v14 = v13;
          CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E4F21AB8], v13);
          CFRelease(v14);
        }
      }
      if (FigMultivariantPlaylistGetVideoGroups(v2))
      {
        CFDictionaryRef VideoGroups = (const __CFDictionary *)FigMultivariantPlaylistGetVideoGroups(v2);
        CFMutableArrayRef v16 = streamPlaylistParser_copySerializedRepresentationForMediaGroups(VideoGroups);
        if (v16)
        {
          CFMutableArrayRef v17 = v16;
          CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E4F21DC8], v16);
          CFRelease(v17);
        }
      }
      if (FigMultivariantPlaylistGetSubtitleGroups(v2))
      {
        CFDictionaryRef SubtitleGroups = (const __CFDictionary *)FigMultivariantPlaylistGetSubtitleGroups(v2);
        CFMutableArrayRef v19 = streamPlaylistParser_copySerializedRepresentationForMediaGroups(SubtitleGroups);
        if (v19)
        {
          CFMutableArrayRef v20 = v19;
          CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E4F21D60], v19);
          CFRelease(v20);
        }
      }
      if (FigMultivariantPlaylistGetClosedCaptionGroups(v2))
      {
        CFDictionaryRef ClosedCaptionGroups = (const __CFDictionary *)FigMultivariantPlaylistGetClosedCaptionGroups(v2);
        CFMutableArrayRef v22 = streamPlaylistParser_copySerializedRepresentationForMediaGroups(ClosedCaptionGroups);
        if (v22)
        {
          CFMutableArrayRef v23 = v22;
          CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E4F21AE0], v22);
          CFRelease(v23);
        }
      }
      double v24 = (const void *)*MEMORY[0x1E4F21D58];
      ContentSteeringServerURL = (const void *)FigMultivariantPlaylistGetContentSteeringServerURL(v2);
      if (!FigWireDictionarySetCFURL(v5, v24, ContentSteeringServerURL))
      {
        uint64_t v26 = (const void *)*MEMORY[0x1E4F21BD8];
        ContentSteeringInitPathwayID = (const void *)FigMultivariantPlaylistGetContentSteeringInitPathwayID(v2);
        if (!FigWireDictionarySetCFString(v5, v26, ContentSteeringInitPathwayID))
        {
          uint64_t v28 = (const void *)*MEMORY[0x1E4F21BB8];
          int HasStartTime = FigMultivariantPlaylistHasStartTime(v2);
          uint64_t v30 = (const void *)*MEMORY[0x1E4F1CFD0];
          CFRange v31 = (const void *)*MEMORY[0x1E4F1CFC8];
          if (HasStartTime) {
            CFRange v32 = (const void *)*MEMORY[0x1E4F1CFD0];
          }
          else {
            CFRange v32 = (const void *)*MEMORY[0x1E4F1CFC8];
          }
          CFDictionarySetValue(v5, v28, v32);
          uint64_t v33 = (const void *)*MEMORY[0x1E4F21D48];
          if (FigMultivariantPlaylistIsStartTimePrecise(v2)) {
            uint64_t v34 = v30;
          }
          else {
            uint64_t v34 = v31;
          }
          CFDictionarySetValue(v5, v33, v34);
          uint64_t v35 = (const void *)*MEMORY[0x1E4F21D30];
          if (FigMultivariantPlaylistHasIndependentSegments(v2)) {
            uint64_t v36 = v30;
          }
          else {
            uint64_t v36 = v31;
          }
          CFDictionarySetValue(v5, v35, v36);
          FigMultivariantPlaylistGetVersion(v2);
          FigCFDictionarySetInt64();
          FigMultivariantPlaylistGetStartTimeValue(v2);
          FigCFDictionarySetDouble();
        }
      }
    }
  }
LABEL_33:
  CFArrayRef SessionDataSpecifiers = (const __CFArray *)FigMultivariantPlaylistGetSessionDataSpecifiers(v2);
  CFAllocatorRef v38 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef theArray = CFArrayCreateMutable(v38, 0, MEMORY[0x1E4F1D510]);
  if (!theArray)
  {
    uint64_t v60 = FigSignalErrorAt();
    goto LABEL_62;
  }
  if (!SessionDataSpecifiers || (CFIndex Count = CFArrayGetCount(SessionDataSpecifiers), Count < 1))
  {
LABEL_48:
    CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E4F21D00], theArray);
    CFRelease(theArray);
    CFTypeRef cf = 0;
    goto LABEL_49;
  }
  CFIndex v40 = Count;
  uint64_t v61 = v2;
  CMTime v62 = v5;
  CFIndex v41 = 0;
  uint64_t v63 = (const void *)*MEMORY[0x1E4F21D10];
  CMTimeEpoch v42 = (const void *)*MEMORY[0x1E4F21CB8];
  CMTimeEpoch v43 = (const void *)*MEMORY[0x1E4F21D20];
  CMTime v44 = (const void *)*MEMORY[0x1E4F21D18];
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(SessionDataSpecifiers, v41);
    if (!ValueAtIndex)
    {
      uint64_t v60 = 0;
      goto LABEL_61;
    }
    uint64_t v46 = (uint64_t)ValueAtIndex;
    CFAllocatorRef v47 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef v48 = CFDictionaryCreateMutable(v47, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v48) {
      break;
    }
    char v49 = v48;
    Identifier = (const void *)FigSessionDataSpecifierGetIdentifier(v46);
    uint64_t v51 = FigWireDictionarySetCFString(v49, v63, Identifier);
    if (v51
      || (URL = (const void *)FigSessionDataSpecifierGetURL(v46),
          uint64_t v51 = FigWireDictionarySetCFURL(v49, v42, URL),
          v51)
      || (CFIndex v53 = (const void *)FigSessionDataSpecifierGetValue(v46),
          uint64_t v51 = FigWireDictionarySetCFString(v49, v43, v53),
          v51)
      || (Language = (const void *)FigSessionDataSpecifierGetLanguage(v46),
          uint64_t v51 = FigWireDictionarySetCFString(v49, v44, Language),
          v51))
    {
      uint64_t v60 = v51;
      CFRelease(v49);
      goto LABEL_61;
    }
    FigSessionDataSpecifierGetFormatType(v46);
    FigCFDictionarySetInt64();
    CFArrayAppendValue(theArray, v49);
    CFRelease(v49);
LABEL_44:
    if (v40 == ++v41)
    {
      CFTypeRef cf = theArray;
      CFDictionaryRef v5 = v62;
      uint64_t v2 = v61;
      goto LABEL_48;
    }
  }
  uint64_t v55 = FigSignalErrorAt();
  if (!v55)
  {
    CFArrayAppendValue(theArray, 0);
    goto LABEL_44;
  }
  uint64_t v60 = v55;
LABEL_61:
  CFDictionaryRef v5 = v62;
  uint64_t v2 = v61;
  CFRelease(theArray);
LABEL_62:
  if (!v60)
  {
LABEL_49:
    CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMultivariantPlaylistGetContentKeySpecifiers(v2);
    uint64_t v57 = streamPlaylistParser_serializeContentKeySpecifiers(0, ContentKeySpecifiers, 0, (__CFArray **)&cf);
    if (v57)
    {
      uint64_t v60 = v57;
    }
    else
    {
      if (cf)
      {
        CFDictionarySetValue(v5, (const void *)*MEMORY[0x1E4F21AE8], cf);
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
      FigGetAllocatorForMedia();
      uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType = FigRemote_CreateSerializedAtomDataBlockBufferWithFlagsForCFType();
      if (SerializedAtomDataBlockBufferWithFlagsForCFType) {
        uint64_t v60 = SerializedAtomDataBlockBufferWithFlagsForCFType;
      }
      else {
        uint64_t v60 = 0;
      }
    }
  }
  CFRelease(v5);
LABEL_56:
  if (cf) {
    CFRelease(cf);
  }
  return v60;
}

uint64_t FigStreamPlaylistParserSerializeMediaPlaylist(uint64_t a1, uint64_t a2)
{
  CMTimeValue value = 0;
  if (!a2) {
    return 0;
  }
  uint64_t v2 = a2;
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t v64 = FigSignalErrorAt();
    CFMutableArrayRef v6 = 0;
LABEL_105:
    CFMutableArrayRef v8 = 0;
    goto LABEL_89;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef v6 = CFArrayCreateMutable(v5, 0, MEMORY[0x1E4F1D510]);
  if (!v6)
  {
    uint64_t v64 = FigSignalErrorAt();
    goto LABEL_105;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef v8 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
  if (!v8)
  {
    uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType = FigSignalErrorAt();
    goto LABEL_88;
  }
  CFAllocatorRef v9 = (const void *)*MEMORY[0x1E4F21B10];
  DateEntryArraCGFloat y = (const void *)FigMediaPlaylistGetDateEntryArray(v2);
  uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType = FigWireDictionarySetCFArray(Mutable, v9, DateEntryArray);
  if (SerializedAtomDataBlockBufferWithFlagsForCFType) {
    goto LABEL_88;
  }
  FigMediaPlaylistGetPlaylistActiveDurationSecs(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetTargetDuration(v2);
  FigCFDictionarySetInt64();
  FigMediaPlaylistGetPartTargetDuration(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetHoldBackDuration(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetPartHoldBackDuration(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetSkipDeltaBoundary(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetPlaylistType(v2);
  FigCFDictionarySetInt64();
  CFIndex v12 = (const void *)*MEMORY[0x1E4F21B90];
  int HasEndTag = FigMediaPlaylistHasEndTag(v2);
  CFMutableArrayRef v14 = (const void *)*MEMORY[0x1E4F1CFD0];
  double v15 = (const void *)*MEMORY[0x1E4F1CFC8];
  CFMutableArrayRef v16 = (const void *)(HasEndTag ? *MEMORY[0x1E4F1CFD0] : *MEMORY[0x1E4F1CFC8]);
  CFDictionarySetValue(Mutable, v12, v16);
  CFMutableArrayRef v17 = (const void *)*MEMORY[0x1E4F21BA0];
  CFTypeRef v18 = FigMediaPlaylistHasMediaSequence(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v17, v18);
  CFMutableArrayRef v19 = (const void *)*MEMORY[0x1E4F21BA8];
  CFMutableArrayRef v20 = FigMediaPlaylistHasOnlyIFrames(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v19, v20);
  uint64_t v21 = (const void *)*MEMORY[0x1E4F21BB8];
  CFMutableArrayRef v22 = FigMediaPlaylistHasStartTime(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v21, v22);
  CFMutableArrayRef v23 = (const void *)*MEMORY[0x1E4F21D48];
  double v24 = FigMediaPlaylistIsStartTimePrecise(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v23, v24);
  unsigned int v25 = (const void *)*MEMORY[0x1E4F21D30];
  uint64_t v26 = FigMediaPlaylistHasIndependentSegments(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v25, v26);
  CMTimeEpoch v27 = (const void *)*MEMORY[0x1E4F21B98];
  uint64_t v28 = FigMediaPlaylistHasIndependentParts(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v27, v28);
  CFRange v29 = (const void *)*MEMORY[0x1E4F21B88];
  uint64_t v30 = FigMediaPlaylistHasDiscontinuitySequence(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v29, v30);
  CFRange v31 = (const void *)*MEMORY[0x1E4F21BB0];
  CFRange v32 = FigMediaPlaylistHasPartTag(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v31, v32);
  uint64_t v33 = (const void *)*MEMORY[0x1E4F21D70];
  uint64_t v34 = FigMediaPlaylistDoesServerSupportsBlockingReload(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v33, v34);
  uint64_t v35 = (const void *)*MEMORY[0x1E4F21AD8];
  long long v69 = v15;
  CMTimeValue v70 = v14;
  uint64_t v36 = FigMediaPlaylistCanSkipDATERANGES(v2) ? v14 : v15;
  CFDictionarySetValue(Mutable, v35, v36);
  FigMediaPlaylistGetVersion(v2);
  FigCFDictionarySetInt64();
  FigMediaPlaylistGetStartTimeValue(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetDateStampCount(v2);
  FigCFDictionarySetInt64();
  FigMediaPlaylistGetAvgSegmentDuration(v2);
  FigCFDictionarySetDouble();
  FigMediaPlaylistGetMaxSegmentDuration(v2);
  FigCFDictionarySetDouble();
  uint64_t v37 = *MEMORY[0x1E4F21C68];
  ParseDate = (const void *)FigMediaPlaylistGetParseDate(v2);
  uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType = FigWireDictionarySetCFDate((int)Mutable, v37, ParseDate);
  if (SerializedAtomDataBlockBufferWithFlagsForCFType) {
    goto LABEL_88;
  }
  CFArrayRef ContentKeySpecifiers = (const __CFArray *)FigMediaPlaylistGetContentKeySpecifiers(v2);
  uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType = streamPlaylistParser_serializeContentKeySpecifiers(v2, ContentKeySpecifiers, (uint64_t)v8, (__CFArray **)&value);
  if (SerializedAtomDataBlockBufferWithFlagsForCFType) {
    goto LABEL_88;
  }
  if (value)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21AE8], value);
    if (value)
    {
      CFRelease(value);
      CMTimeValue value = 0;
    }
  }
  CFArrayRef MapSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMapSegmentSpecifiers(v2);
  uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType = streamPlaylistParser_serializeMediaSegmentSpecifiers(v2, MapSegmentSpecifiers, (uint64_t)v6, (__CFArray **)&value);
  if (SerializedAtomDataBlockBufferWithFlagsForCFType) {
    goto LABEL_88;
  }
  if (value)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21C10], value);
    if (value)
    {
      CFRelease(value);
      CMTimeValue value = 0;
    }
  }
  CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(v2);
  uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType = streamPlaylistParser_serializeMediaSegmentSpecifiers(v2, MediaSegmentSpecifiers, (uint64_t)v6, (__CFArray **)&value);
  if (SerializedAtomDataBlockBufferWithFlagsForCFType) {
    goto LABEL_88;
  }
  if (value)
  {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21C30], value);
    if (value)
    {
      CFRelease(value);
      CMTimeValue value = 0;
    }
  }
  CFArrayRef RenditionReportSpecifiers = (const __CFArray *)FigMediaPlaylistGetRenditionReportSpecifiers(v2);
  CFAllocatorRef v43 = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef v44 = CFArrayCreateMutable(v43, 0, MEMORY[0x1E4F1D510]);
  if (!v44)
  {
    uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType = FigSignalErrorAt();
    if (!SerializedAtomDataBlockBufferWithFlagsForCFType)
    {
      long long v45 = value;
      if (value)
      {
LABEL_71:
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21CF0], v45);
        if (value)
        {
          CFRelease(value);
          CMTimeValue value = 0;
        }
      }
      CFArrayRef DateRangeSpecifiers = (const __CFArray *)FigMediaPlaylistGetDateRangeSpecifiers(v2);
      uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType = streamPlaylistParser_serializeTaggedRangeEntries(DateRangeSpecifiers, (__CFArray **)&value);
      if (!SerializedAtomDataBlockBufferWithFlagsForCFType)
      {
        if (value)
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21B08], value);
          if (value)
          {
            CFRelease(value);
            CMTimeValue value = 0;
          }
        }
        CMTimeScale v73 = 0;
        PreloadHint = (const void *)FigMediaPlaylistGetPreloadHint(v2);
        uint64_t v62 = streamPlaylistParser_serializeMediaSegmentSpecifier(v2, PreloadHint, (uint64_t)v6, &v73);
        if (v62) {
          goto LABEL_100;
        }
        if (v73)
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21CC8], v73);
          if (v73)
          {
            CFRelease(v73);
            CMTimeScale v73 = 0;
          }
        }
        PreloadMapHint = (const void *)FigMediaPlaylistGetPreloadMapHint(v2);
        uint64_t v62 = streamPlaylistParser_serializeMediaSegmentSpecifier(v2, PreloadMapHint, (uint64_t)v6, &v73);
        if (v62)
        {
LABEL_100:
          uint64_t v64 = v62;
          if (v73) {
            CFRelease(v73);
          }
          goto LABEL_89;
        }
        if (v73)
        {
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21CD0], v73);
          if (v73) {
            CFRelease(v73);
          }
        }
        uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType = FigWireDictionarySetCFArray(Mutable, (const void *)*MEMORY[0x1E4F21CE8], v6);
        if (!SerializedAtomDataBlockBufferWithFlagsForCFType)
        {
          uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType = FigWireDictionarySetCFArray(Mutable, (const void *)*MEMORY[0x1E4F21CE0], v8);
          if (!SerializedAtomDataBlockBufferWithFlagsForCFType)
          {
            FigGetAllocatorForMedia();
            uint64_t SerializedAtomDataBlockBufferWithFlagsForCFType = FigRemote_CreateSerializedAtomDataBlockBufferWithFlagsForCFType();
            if (!SerializedAtomDataBlockBufferWithFlagsForCFType)
            {
              uint64_t v64 = 0;
              goto LABEL_90;
            }
          }
        }
      }
    }
LABEL_88:
    uint64_t v64 = SerializedAtomDataBlockBufferWithFlagsForCFType;
    goto LABEL_89;
  }
  long long v45 = v44;
  uint64_t v66 = v2;
  long long v67 = v8;
  CMItemCount v68 = Mutable;
  CFIndex v46 = 0;
  CMTimeScale v71 = (const void *)*MEMORY[0x1E4F21CF8];
  CFAllocatorRef v47 = (const void *)*MEMORY[0x1E4F21B78];
  CFMutableDictionaryRef v48 = (const void *)*MEMORY[0x1E4F21CD8];
  if (!RenditionReportSpecifiers) {
    goto LABEL_55;
  }
LABEL_54:
  for (CFIndex i = CFArrayGetCount(RenditionReportSpecifiers); ; CFIndex i = 0)
  {
    if (v46 >= i)
    {
      CMTimeValue value = v45;
      CFMutableDictionaryRef Mutable = v68;
      uint64_t v2 = v66;
      CFMutableArrayRef v8 = v67;
      goto LABEL_71;
    }
    char v50 = v45;
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(RenditionReportSpecifiers, v46);
    CFAllocatorRef v52 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef v53 = CFDictionaryCreateMutable(v52, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v53) {
      break;
    }
    int32_t v54 = v53;
    URL = (const void *)FigRenditionReportSpecifierGetURL((uint64_t)ValueAtIndex);
    uint64_t v56 = FigWireDictionarySetCFURL(v54, v71, URL);
    if (v56)
    {
      uint64_t v64 = v56;
      CFRelease(v54);
      goto LABEL_99;
    }
    FigRenditionReportSpecifierGetLastMediaSequenceNumber((uint64_t)ValueAtIndex);
    FigCFDictionarySetInt64();
    FigRenditionReportSpecifierGetLastIndependentMediaSequenceNumber((uint64_t)ValueAtIndex);
    FigCFDictionarySetInt64();
    FigRenditionReportSpecifierGetLastPart((uint64_t)ValueAtIndex);
    FigCFDictionarySetInt64();
    FigRenditionReportSpecifierGetLastIndependentPart((uint64_t)ValueAtIndex);
    FigCFDictionarySetInt64();
    if (FigRenditionReportSpecifierIsGapAtLive((uint64_t)ValueAtIndex)) {
      uint64_t v57 = v70;
    }
    else {
      uint64_t v57 = v69;
    }
    CFDictionarySetValue(v54, v47, v57);
    if (FigRenditionReportSpecifierIsReadInCurrent((uint64_t)ValueAtIndex)) {
      CFDateRef v58 = v70;
    }
    else {
      CFDateRef v58 = v69;
    }
    CFDictionarySetValue(v54, v48, v58);
    CFArrayAppendValue((CFMutableArrayRef)v45, v54);
    CFRelease(v54);
LABEL_66:
    ++v46;
    if (RenditionReportSpecifiers) {
      goto LABEL_54;
    }
LABEL_55:
    ;
  }
  uint64_t v59 = FigSignalErrorAt();
  if (!v59)
  {
    CFArrayAppendValue((CFMutableArrayRef)v45, 0);
    goto LABEL_66;
  }
  uint64_t v64 = v59;
LABEL_99:
  CFRelease(v50);
  CFMutableDictionaryRef Mutable = v68;
  CFMutableArrayRef v8 = v67;
LABEL_89:
  if (Mutable) {
LABEL_90:
  }
    CFRelease(Mutable);
  if (v8) {
    CFRelease(v8);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (value) {
    CFRelease(value);
  }
  return v64;
}

uint64_t streamPlaylistParser_serializeContentKeySpecifiers(uint64_t a1, const __CFArray *a2, uint64_t a3, __CFArray **a4)
{
  if (!a4) {
    return 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef theArray = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  if (!theArray)
  {
    return FigSignalErrorAt();
  }
  CFIndex v9 = 0;
  CMTimeEpoch v27 = (const void *)*MEMORY[0x1E4F21D68];
  uint64_t v28 = (const void *)*MEMORY[0x1E4F21B00];
  CFIndex v10 = (const void *)*MEMORY[0x1E4F21CC0];
  uint64_t v26 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFIndex v11 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (!a2) {
    goto LABEL_5;
  }
LABEL_4:
  for (CFIndex i = CFArrayGetCount(a2); ; CFIndex i = 0)
  {
    if (v9 >= i)
    {
      uint64_t v24 = 0;
      *a4 = theArray;
      return v24;
    }
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v9);
    CFMutableArrayRef v14 = ValueAtIndex;
    if (a3 && FigContentKeySpecifierGetIsReadInCurrent((uint64_t)ValueAtIndex))
    {
      FigContentKeySpecifierGetCryptKeyParsedIndex((uint64_t)v14);
      FigCFArrayAppendInt64();
    }
    if (!FigContentKeySpecifierGetIsChangedInCurrent((uint64_t)v14)) {
      goto LABEL_21;
    }
    CFAllocatorRef v15 = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      break;
    }
    CFMutableArrayRef v17 = Mutable;
    FigContentKeySpecifierGetKeySystem((uint64_t)v14);
    FigCFDictionarySetInt64();
    FigContentKeySpecifierGetEncryptionMethod((uint64_t)v14);
    FigCFDictionarySetInt64();
    Identifier = (const void *)FigContentKeySpecifierGetIdentifier((uint64_t)v14);
    uint64_t v19 = FigWireDictionarySetCFString(v17, v28, Identifier);
    if (v19
      || (SupportedProtocolVersions = (const void *)FigContentKeySpecifierGetSupportedProtocolVersions((uint64_t)v14),
          uint64_t v19 = FigWireDictionarySetCFArray(v17, v27, SupportedProtocolVersions),
          v19))
    {
      uint64_t v24 = v19;
      CFRelease(v17);
      goto LABEL_28;
    }
    if (FigContentKeySpecifierGetIsPrefetchKey((uint64_t)v14)) {
      uint64_t v21 = v26;
    }
    else {
      uint64_t v21 = v11;
    }
    CFDictionarySetValue(v17, v10, v21);
    FigContentKeySpecifierGetCryptKeyParsedIndex((uint64_t)v14);
    FigCFDictionarySetInt64();
    if (a1)
    {
      if (FigContentKeySpecifierGetCryptKeyParsedIndex((uint64_t)v14))
      {
        CryptKeyParsedIndeCGFloat x = (const void *)FigContentKeySpecifierGetCryptKeyParsedIndex((uint64_t)v14);
        FigMediaPlaylistAddToCryptKeyParsedIndexToEntryMap(a1, CryptKeyParsedIndex, v14);
      }
    }
    CFArrayAppendValue(theArray, v17);
    CFRelease(v17);
LABEL_21:
    ++v9;
    if (a2) {
      goto LABEL_4;
    }
LABEL_5:
    ;
  }
  uint64_t v23 = FigSignalErrorAt();
  if (!v23)
  {
    CFArrayAppendValue(theArray, 0);
    goto LABEL_21;
  }
  uint64_t v24 = v23;
LABEL_28:
  CFRelease(theArray);
  return v24;
}

uint64_t streamPlaylistParser_serializeMediaSegmentSpecifiers(uint64_t a1, const __CFArray *a2, uint64_t a3, __CFArray **a4)
{
  CMTimeValue value = 0;
  if (!a4) {
    return 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    CFIndex v10 = 0;
    if (!a2) {
      goto LABEL_5;
    }
LABEL_4:
    for (CFIndex i = CFArrayGetCount(a2); v10 < i; CFIndex i = 0)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v10);
      if (FigMediaSegmentSpecifierIsReadInCurrent((uint64_t)ValueAtIndex))
      {
        FigMediaSegmentSpecifierGetMediaParsedIndex((uint64_t)ValueAtIndex);
        FigCFArrayAppendInt64();
      }
      if (FigMediaSegmentSpecifierIsChangedInCurrent((uint64_t)ValueAtIndex))
      {
        uint64_t v13 = streamPlaylistParser_serializeMediaSegmentSpecifier(a1, ValueAtIndex, a3, (__CFDictionary **)&value);
        if (v13) {
          goto LABEL_23;
        }
        CFArrayAppendValue(Mutable, value);
        if (value)
        {
          CFRelease(value);
          CMTimeValue value = 0;
        }
      }
      ++v10;
      if (a2) {
        goto LABEL_4;
      }
LABEL_5:
      ;
    }
    uint64_t v14 = 0;
    *a4 = Mutable;
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    uint64_t v13 = FigSignalErrorAt();
LABEL_23:
    uint64_t v14 = v13;
  }
  if (value) {
    CFRelease(value);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v14;
}

uint64_t FigWireDictionarySetCFArray(__CFDictionary *a1, const void *a2, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFArrayGetTypeID())
  {
    CFDictionarySetValue(a1, a2, cf);
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigStreamPlaylistParserDeserializeMultivariantPlaylist(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v69 = 0;
  if (a2)
  {
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t BlockBufferData = FigMultivariantPlaylistCreateEmpty(AllocatorForMedia, &v69);
    if (BlockBufferData
      || (FigGetAllocatorForMedia(), uint64_t BlockBufferData = FigXPCMessageCreateBlockBufferData(), BlockBufferData)
      || (FigGetAllocatorForMedia(),
          uint64_t BlockBufferData = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer(),
          BlockBufferData))
    {
      uint64_t v31 = BlockBufferData;
    }
    else
    {
      CFTypeRef v5 = v69;
      CFArrayRef Value = CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E4F21C60]);
      CFAllocatorRef v7 = Value;
      if (Value) {
        CFRetain(Value);
      }
      FigMultivariantPlaylistSetPlaylistVariables((uint64_t)v5, v7);
      CFMutableArrayRef v8 = CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E4F21C48]);
      CFIndex v9 = v8;
      if (v8) {
        CFRetain(v8);
      }
      FigMultivariantPlaylistSetMediaSelectionArray((uint64_t)v5, v9);
      v75[0] = 0;
      ArraCGFloat y = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E4F21AB8]);
      streamPlaylistParser_copyDeserializedRepresentationForMediaGroups(Array, v75);
      FigMultivariantPlaylistSetAudioGroups((uint64_t)v5, v75[0]);
      if (v75[0])
      {
        CFRelease(v75[0]);
        v75[0] = 0;
      }
      CFArrayRef v11 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E4F21DC8]);
      streamPlaylistParser_copyDeserializedRepresentationForMediaGroups(v11, v75);
      FigMultivariantPlaylistSetVideoGroups((uint64_t)v5, v75[0]);
      if (v75[0])
      {
        CFRelease(v75[0]);
        v75[0] = 0;
      }
      CFArrayRef v12 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E4F21D60]);
      streamPlaylistParser_copyDeserializedRepresentationForMediaGroups(v12, v75);
      FigMultivariantPlaylistSetSubtitleGroups((uint64_t)v5, v75[0]);
      if (v75[0])
      {
        CFRelease(v75[0]);
        v75[0] = 0;
      }
      *(void *)long long v67 = v7;
      uint64_t v63 = a2;
      CFArrayRef v13 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E4F21AE0]);
      streamPlaylistParser_copyDeserializedRepresentationForMediaGroups(v13, v75);
      FigMultivariantPlaylistSetClosedCaptionGroups((uint64_t)v5, v75[0]);
      if (v75[0]) {
        CFRelease(v75[0]);
      }
      CFArrayRef v14 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E4F21B60]);
      if (v14)
      {
        CFArrayRef v15 = v14;
        if (CFArrayGetCount(v14) >= 1)
        {
          CFIndex Count = CFArrayGetCount(v15);
          if (Count >= 1)
          {
            CFIndex v17 = Count;
            for (CFIndex i = 0; v17 != i; ++i)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v15, i);
              if (!ValueAtIndex)
              {
                FigSignalErrorAt();
                break;
              }
              uint64_t v20 = (uint64_t)ValueAtIndex;
              CMTimeValue v74 = 0;
              v75[0] = 0;
              uint64_t v72 = 0;
              uint64_t v73 = 0;
              uint64_t v70 = 0;
              uint64_t v71 = 0;
              uint64_t v21 = FigGetAllocatorForMedia();
              uint64_t SelectionGroup = FigAlternateCreateWithSerializedRepresentation(v21, v20, 0, v75);
              if (SelectionGroup) {
                goto LABEL_38;
              }
              uint64_t AudioGroupIDString = FigAlternateGetAudioGroupIDString((uint64_t)v75[0]);
              CFDictionaryRef AudioGroups = (const __CFDictionary *)FigMultivariantPlaylistGetAudioGroups((uint64_t)v5);
              uint64_t SelectionGroup = FigStreamPlaylistGetSelectionGroup(AudioGroupIDString, 1936684398, AudioGroups, &v73);
              if (SelectionGroup) {
                goto LABEL_38;
              }
              uint64_t VideoGroupIDString = FigAlternateGetVideoGroupIDString((uint64_t)v75[0]);
              CFDictionaryRef VideoGroups = (const __CFDictionary *)FigMultivariantPlaylistGetVideoGroups((uint64_t)v5);
              uint64_t SelectionGroup = FigStreamPlaylistGetSelectionGroup(VideoGroupIDString, 1986618469, VideoGroups, &v72);
              if (SelectionGroup
                || (uint64_t SubtitleGroupIDString = FigAlternateGetSubtitleGroupIDString((uint64_t)v75[0]),
                    CFDictionaryRef SubtitleGroups = (const __CFDictionary *)FigMultivariantPlaylistGetSubtitleGroups((uint64_t)v5),
                    SelectionGroup = FigStreamPlaylistGetSelectionGroup(SubtitleGroupIDString, 1935832172, SubtitleGroups, &v71), SelectionGroup)|| (ClosedCaptionGroupIDString = FigAlternateGetClosedCaptionGroupIDString((uint64_t)v75[0]), CFDictionaryRef ClosedCaptionGroups = (const __CFDictionary *)FigMultivariantPlaylistGetClosedCaptionGroups((uint64_t)v5), SelectionGroup = FigStreamPlaylistGetSelectionGroup(ClosedCaptionGroupIDString, 1668047728, ClosedCaptionGroups, &v70), SelectionGroup))
              {
LABEL_38:
                uint64_t v31 = SelectionGroup;
              }
              else
              {
                uint64_t v31 = FigAlternateCopy((uint64_t)v75[0], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, v73, v72, v71, v70,
                        &v74);
                if (!v31)
                {
                  CFRange v32 = v74;
                  CMTimeValue v74 = 0;
                  goto LABEL_29;
                }
              }
              CFRange v32 = 0;
LABEL_29:
              if (v75[0]) {
                CFRelease(v75[0]);
              }
              if (v74) {
                CFRelease(v74);
              }
              if (v31)
              {
                uint64_t v36 = *(const void **)v67;
                if (!v32) {
                  goto LABEL_49;
                }
LABEL_48:
                CFRelease(v32);
                goto LABEL_49;
              }
              FigMultivariantPlaylistAddAlternate((uint64_t)v5, v32);
              if (v32) {
                CFRelease(v32);
              }
            }
          }
        }
      }
      uint64_t v33 = CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E4F21D58]);
      uint64_t v34 = v33;
      if (v33) {
        CFRetain(v33);
      }
      FigMultivariantPlaylistSetContentSteeringServerURL((uint64_t)v5, v34);
      uint64_t v35 = (void *)CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E4F21BD8]);
      CFRange v32 = v35;
      uint64_t v36 = *(const void **)v67;
      if (v35) {
        CFRetain(v35);
      }
      FigMultivariantPlaylistSetContentSteeringInitPathwayID((uint64_t)v5, v32);
      v75[0] = 0;
      FigCFDictionaryGetInt64IfPresent();
      FigMultivariantPlaylistSetVersion((uint64_t)v5, (int)v75[0]);
      LOBYTE(v75[0]) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigMultivariantPlaylistSetHasIndependentSegments((uint64_t)v5, (char)v75[0]);
      LOBYTE(v75[0]) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigMultivariantPlaylistSetHasStartTime((uint64_t)v5, (char)v75[0]);
      v75[0] = 0;
      FigCFDictionaryGetDoubleIfPresent();
      FigMultivariantPlaylistSetStartTimeValue((uint64_t)v5, *(double *)v75);
      LOBYTE(v75[0]) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigMultivariantPlaylistSetIsStartTimePrecise((uint64_t)v5, (char)v75[0]);
      if (v34) {
        CFRelease(v34);
      }
      uint64_t v31 = 0;
      if (v32) {
        goto LABEL_48;
      }
LABEL_49:
      if (v36) {
        CFRelease(v36);
      }
      if (v9) {
        CFRelease(v9);
      }
      if (!v31)
      {
        CFArrayRef v37 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E4F21AE8]);
        if (v37 && (CFArrayRef v38 = v37, v39 = v69, v75[0] = 0, (v40 = CFArrayGetCount(v37)) != 0))
        {
          CFIndex v41 = v40;
          CFIndex v42 = 0;
          while (1)
          {
            CFDictionaryRef v43 = (const __CFDictionary *)CFArrayGetValueAtIndex(v38, v42);
            uint64_t v44 = streamPlaylistParser_deserializeContentKeySpecifier(0, v43, (CFTypeRef *)v75);
            if (v44) {
              break;
            }
            FigMultivariantPlaylistAddContentKeySpecifier((uint64_t)v39, v75[0]);
            if (v75[0])
            {
              CFRelease(v75[0]);
              v75[0] = 0;
            }
            if (v41 == ++v42) {
              goto LABEL_61;
            }
          }
          uint64_t v31 = v44;
          if (v75[0])
          {
            uint64_t v62 = v75[0];
LABEL_93:
            CFRelease(v62);
          }
        }
        else
        {
LABEL_61:
          CFArrayRef v45 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E4F21D00]);
          if (!v45 || (CFArrayRef v46 = v45, v68 = v69, v74 = 0, (v47 = CFArrayGetCount(v45)) == 0))
          {
LABEL_85:
            uint64_t v31 = 0;
            *uint64_t v63 = v69;
            CFTypeRef v69 = 0;
            goto LABEL_86;
          }
          CFIndex v48 = v47;
          CFIndex v49 = 0;
          keCGFloat y = (void *)*MEMORY[0x1E4F21D10];
          CMTime v65 = (void *)*MEMORY[0x1E4F21CB8];
          uint64_t v64 = (void *)*MEMORY[0x1E4F21D20];
          char v50 = (const void *)*MEMORY[0x1E4F21D18];
          while (1)
          {
            CFDictionaryRef v51 = (const __CFDictionary *)CFArrayGetValueAtIndex(v46, v49);
            if (v51)
            {
              CFDictionaryRef v52 = v51;
              CFMutableDictionaryRef v53 = CFDictionaryGetValue(v51, key);
              int32_t v54 = v53;
              if (v53) {
                CFRetain(v53);
              }
              uint64_t v55 = CFDictionaryGetValue(v52, v65);
              uint64_t v56 = v55;
              if (v55) {
                CFRetain(v55);
              }
              uint64_t v57 = CFDictionaryGetValue(v52, v64);
              CFDateRef v58 = v57;
              if (v57) {
                CFRetain(v57);
              }
              uint64_t v59 = CFDictionaryGetValue(v52, v50);
              uint64_t v60 = v59;
              if (v59) {
                CFRetain(v59);
              }
              v75[0] = 0;
              FigCFDictionaryGetInt64IfPresent();
              uint64_t v31 = FigSessionDataSpecifierCreate(v54, v56, v58, v60, (int)v75[0], (uint64_t *)&v74);
              if (v54) {
                CFRelease(v54);
              }
              if (v56) {
                CFRelease(v56);
              }
              if (v58) {
                CFRelease(v58);
              }
              if (v60) {
                CFRelease(v60);
              }
              if (v31) {
                break;
              }
            }
            FigMultivariantPlaylistAddSessionDataSpecifier((uint64_t)v68, v74);
            if (v74)
            {
              CFRelease(v74);
              CMTimeValue v74 = 0;
            }
            if (v48 == ++v49) {
              goto LABEL_85;
            }
          }
          uint64_t v62 = (__CFDictionary *)v74;
          if (v74) {
            goto LABEL_93;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v31 = 0;
  }
LABEL_86:
  if (v69) {
    CFRelease(v69);
  }
  return v31;
}

const void *FigWireDictionaryGetArray(const __CFDictionary *a1, const void *a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, a2);
  CFIndex v3 = Value;
  if (Value)
  {
    CFTypeID v4 = CFGetTypeID(Value);
    if (v4 != CFArrayGetTypeID())
    {
      FigSignalErrorAt();
      return 0;
    }
  }
  return v3;
}

uint64_t FigStreamPlaylistParserDeserializeMediaPlaylist(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v83 = 0;
  if (!a2)
  {
    uint64_t v58 = 0;
    goto LABEL_109;
  }
  if (*a2)
  {
    CFTypeRef v3 = CFRetain(*a2);
    CFTypeRef v83 = v3;
  }
  else
  {
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    uint64_t BlockBufferData = FigMediaPlaylistCreateEmpty(AllocatorForMedia, &v83);
    if (BlockBufferData) {
      goto LABEL_120;
    }
    CFTypeRef v3 = v83;
  }
  FigStreamPlaylistInitializeIndexValidation((uint64_t)v3);
  FigGetAllocatorForMedia();
  uint64_t BlockBufferData = FigXPCMessageCreateBlockBufferData();
  if (BlockBufferData) {
    goto LABEL_120;
  }
  FigGetAllocatorForMedia();
  uint64_t BlockBufferData = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
  if (BlockBufferData) {
    goto LABEL_120;
  }
  CFTypeRef v6 = v83;
  CFDateRef v84 = 0;
  CFArrayRef Value = CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E4F21B10]);
  CFMutableArrayRef v8 = Value;
  if (!Value)
  {
    FigMediaPlaylistSetDateEntryArray((uint64_t)v6, 0);
LABEL_15:
    CFDateRef v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetPlaylistActiveDurationSecs((uint64_t)v6, *(double *)&v85);
    CFDateRef v85 = 0;
    FigCFDictionaryGetInt64IfPresent();
    FigMediaPlaylistSetTargetDuration((uint64_t)v6, (int)v85);
    CFDateRef v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetPartTargetDuration((uint64_t)v6, *(double *)&v85);
    CFDateRef v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetHoldBackDuration((uint64_t)v6, *(double *)&v85);
    CFDateRef v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetPartHoldBackDuration((uint64_t)v6, *(double *)&v85);
    CFDateRef v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetSkipDeltaBoundary((uint64_t)v6, *(double *)&v85);
    CFDateRef v85 = 0;
    FigCFDictionaryGetInt64IfPresent();
    FigMediaPlaylistSetPlaylistType((uint64_t)v6, (int)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetHasEndTag((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetHasMediaSequence((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetHasOnlyIFrames((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetHasIndependentParts((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetHasDiscontinuitySequence((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetHasPartTag((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetDoesServerSupportsBlockingReload((uint64_t)v6, (char)v85);
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    FigMediaPlaylistSetCanSkipDATERANGES((uint64_t)v6, (char)v85);
    CFDateRef v85 = 0;
    FigCFDictionaryGetInt64IfPresent();
    if (v85)
    {
      CFDateRef v85 = 0;
      FigCFDictionaryGetInt64IfPresent();
      FigMediaPlaylistSetVersion((uint64_t)v6, (int)v85);
    }
    LOBYTE(v85) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    if ((_BYTE)v85)
    {
      LOBYTE(v85) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigMediaPlaylistSetHasStartTime((uint64_t)v6, (char)v85);
      CFDateRef v85 = 0;
      FigCFDictionaryGetDoubleIfPresent();
      FigMediaPlaylistSetStartTimeValue((uint64_t)v6, *(double *)&v85);
      LOBYTE(v85) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigMediaPlaylistSetIsStartTimePrecise((uint64_t)v6, (char)v85);
    }
    CFDateRef v85 = 0;
    FigCFDictionaryGetInt64IfPresent();
    FigMediaPlaylistSetDateStampCount((uint64_t)v6, (uint64_t)v85);
    if (!FigMediaPlaylistHasIndependentSegments((uint64_t)v6))
    {
      LOBYTE(v85) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      FigMediaPlaylistSetHasIndependentSegments((uint64_t)v6, (char)v85);
    }
    CFDateRef v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetAvgSegmentDuration((uint64_t)v6, *(double *)&v85);
    CFDateRef v85 = 0;
    FigCFDictionaryGetDoubleIfPresent();
    FigMediaPlaylistSetMaxSegmentDuration((uint64_t)v6, *(double *)&v85);
    int v16 = FigWireDictionaryCopyCFDate(0, *MEMORY[0x1E4F21C68], &v84);
    CFDateRef v17 = v84;
    if (!v16)
    {
      FigMediaPlaylistSetParseDate((uint64_t)v6, v84);
      CFDateRef v17 = v84;
    }
    if (v17) {
      CFRelease(v17);
    }
    if (!v8) {
      goto LABEL_27;
    }
LABEL_26:
    CFRelease(v8);
    goto LABEL_27;
  }
  CFRetain(Value);
  FigMediaPlaylistSetDateEntryArray((uint64_t)v6, 0);
  CFIndex Count = CFArrayGetCount((CFArrayRef)v8);
  if (Count < 1) {
    goto LABEL_15;
  }
  CFIndex v10 = Count;
  CFIndex v11 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v8, v11);
    CFAllocatorRef v13 = (const __CFAllocator *)FigGetAllocatorForMedia();
    MutableCopCGFloat y = CFDictionaryCreateMutableCopy(v13, 0, ValueAtIndex);
    if (!MutableCopy) {
      break;
    }
    CFMutableDictionaryRef v15 = MutableCopy;
    FigMediaPlaylistAddDateEntryArray((uint64_t)v6, MutableCopy);
    CFRelease(v15);
    if (v10 == ++v11) {
      goto LABEL_15;
    }
  }
  FigSignalErrorAt();
  if (v8) {
    goto LABEL_26;
  }
LABEL_27:
  ArraCGFloat y = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E4F21AE8]);
  if (Array)
  {
    CFArrayRef v19 = Array;
    CFTypeRef v20 = v83;
    CFDateRef v85 = 0;
    CFIndex v21 = CFArrayGetCount(Array);
    if (v21)
    {
      CFIndex v22 = v21;
      for (CFIndex i = 0; i != v22; ++i)
      {
        CFDictionaryRef v24 = (const __CFDictionary *)CFArrayGetValueAtIndex(v19, i);
        uint64_t v25 = streamPlaylistParser_deserializeContentKeySpecifier((uint64_t)v20, v24, (CFTypeRef *)&v85);
        CFDateRef v26 = v85;
        if (v25)
        {
LABEL_112:
          uint64_t v58 = v25;
          goto LABEL_116;
        }
        FigMediaPlaylistAddContentKeySpecifier((uint64_t)v20, v85);
        if (v85)
        {
          CFRelease(v85);
          CFDateRef v85 = 0;
        }
      }
    }
  }
  uint64_t v78 = a2;
  CFArrayRef v27 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E4F21C10]);
  if (v27)
  {
    CFArrayRef v28 = v27;
    CFTypeRef v29 = v83;
    CFDateRef v84 = 0;
    CFIndex v30 = CFArrayGetCount(v27);
    if (v30)
    {
      CFIndex v31 = v30;
      for (CFIndex j = 0; v31 != j; ++j)
      {
        CFDictionaryRef v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(v28, j);
        CFDateRef v85 = 0;
        FigCFDictionaryGetInt64IfPresent();
        CFDateRef v34 = v85;
        CFDictionaryRef MediaParsedIndexToEntryMap = (const __CFDictionary *)FigMediaPlaylistGetMediaParsedIndexToEntryMap((uint64_t)v29);
        CFDateRef v36 = (const __CFDate *)CFDictionaryGetValue(MediaParsedIndexToEntryMap, v34);
        CFDateRef v84 = v36;
        if (v36 && (CFRetain(v36), v84))
        {
          uint64_t v37 = streamPlaylistParser_deserializeMediaFileEntry((uint64_t)v29, v33, (CFTypeRef *)&v84);
          if (v37)
          {
LABEL_115:
            uint64_t v58 = v37;
            CFDateRef v26 = v84;
LABEL_116:
            if (v26)
            {
              CFDateRef v77 = v26;
              goto LABEL_118;
            }
            goto LABEL_119;
          }
        }
        else
        {
          uint64_t v25 = streamPlaylistParser_deserializeMediaFileEntry((uint64_t)v29, v33, (CFTypeRef *)&v84);
          CFDateRef v26 = v84;
          if (v25) {
            goto LABEL_112;
          }
          FigMediaPlaylistAddMapSegmentSpecifier((uint64_t)v29, v84);
        }
        if (v84)
        {
          CFRelease(v84);
          CFDateRef v84 = 0;
        }
      }
    }
  }
  CFArrayRef v38 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E4F21C30]);
  if (v38)
  {
    CFArrayRef v39 = v38;
    CFTypeRef v40 = v83;
    CFDateRef v84 = 0;
    CFIndex v41 = CFArrayGetCount(v38);
    if (v41)
    {
      CFIndex v42 = v41;
      for (CFIndex k = 0; k != v42; ++k)
      {
        CFDictionaryRef v44 = (const __CFDictionary *)CFArrayGetValueAtIndex(v39, k);
        CFDateRef v85 = 0;
        FigCFDictionaryGetInt64IfPresent();
        CFDateRef v45 = v85;
        CFDictionaryRef v46 = (const __CFDictionary *)FigMediaPlaylistGetMediaParsedIndexToEntryMap((uint64_t)v40);
        CFDateRef v47 = (const __CFDate *)CFDictionaryGetValue(v46, v45);
        CFDateRef v84 = v47;
        if (v47 && (CFRetain(v47), v84))
        {
          uint64_t v37 = streamPlaylistParser_deserializeMediaFileEntry((uint64_t)v40, v44, (CFTypeRef *)&v84);
          if (v37) {
            goto LABEL_115;
          }
        }
        else
        {
          uint64_t v25 = streamPlaylistParser_deserializeMediaFileEntry((uint64_t)v40, v44, (CFTypeRef *)&v84);
          CFDateRef v26 = v84;
          if (v25) {
            goto LABEL_112;
          }
          FigMediaPlaylistAddMediaSegmentSpecifier((uint64_t)v40, v84);
        }
        if (v84)
        {
          CFRelease(v84);
          CFDateRef v84 = 0;
        }
      }
    }
  }
  CFArrayRef theArray = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E4F21CF0]);
  if (theArray)
  {
    CFTypeRef v81 = v83;
    FigMediaPlaylistSetRenditionReportSpecifiers((uint64_t)v83, 0);
    CFIndex v80 = CFArrayGetCount(theArray);
    if (v80)
    {
      CFIndex v48 = 0;
      keCGFloat y = (void *)*MEMORY[0x1E4F21CF8];
      while (1)
      {
        CFDictionaryRef v49 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v48);
        CFDateRef v84 = 0;
        if (!v49)
        {
          FigMediaPlaylistAddRenditionReportSpecifier((uint64_t)v81, 0);
          goto LABEL_72;
        }
        char v50 = CFDictionaryGetValue(v49, key);
        CFDictionaryRef v51 = v50;
        if (v50) {
          CFRetain(v50);
        }
        CFDateRef v85 = 0;
        FigCFDictionaryGetInt64IfPresent();
        uint64_t v52 = (uint64_t)v85;
        CFDateRef v85 = 0;
        FigCFDictionaryGetInt64IfPresent();
        uint64_t v53 = (uint64_t)v85;
        CFDateRef v85 = 0;
        FigCFDictionaryGetInt64IfPresent();
        int v54 = (int)v85;
        CFDateRef v85 = 0;
        FigCFDictionaryGetInt64IfPresent();
        int v55 = (int)v85;
        LOBYTE(v85) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        char v56 = (char)v85;
        LOBYTE(v85) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        char v57 = (char)v85;
        uint64_t v58 = FigRenditionReportSpecifierCreate(v51, v52, v53, v54, v55, 1, v56, (uint64_t *)&v84);
        if (v58) {
          break;
        }
        FigRenditionReportSpecifierSetReadInCurrent((uint64_t)v84, v57);
        CFDateRef v59 = v84;
        CFDateRef v84 = 0;
        if (v51) {
          goto LABEL_66;
        }
LABEL_67:
        if (v84) {
          CFRelease(v84);
        }
        if (v58)
        {
          if (v59)
          {
            CFDateRef v77 = v59;
LABEL_118:
            CFRelease(v77);
          }
LABEL_119:
          CFArrayRef v66 = 0;
          CFArrayRef v68 = 0;
          goto LABEL_105;
        }
        FigMediaPlaylistAddRenditionReportSpecifier((uint64_t)v81, v59);
        if (v59) {
          CFRelease(v59);
        }
LABEL_72:
        if (v80 == ++v48) {
          goto LABEL_77;
        }
      }
      CFDateRef v59 = 0;
      if (!v51) {
        goto LABEL_67;
      }
LABEL_66:
      CFRelease(v51);
      goto LABEL_67;
    }
  }
LABEL_77:
  CFArrayRef v60 = (const __CFArray *)FigWireDictionaryGetArray(0, (const void *)*MEMORY[0x1E4F21B08]);
  if (v60)
  {
    uint64_t BlockBufferData = streamPlaylistParser_deserializeTaggedRangeEntries((uint64_t)v83, v60);
    if (BlockBufferData)
    {
LABEL_120:
      uint64_t v58 = BlockBufferData;
      goto LABEL_119;
    }
  }
  CFTypeRef v61 = v83;
  CFDateRef v85 = 0;
  DictionarCGFloat y = (const __CFDictionary *)FigWireDictionaryGetDictionary(0, (const void *)*MEMORY[0x1E4F21CC8]);
  uint64_t v63 = streamPlaylistParser_deserializeMediaFileEntry((uint64_t)v61, Dictionary, (CFTypeRef *)&v85);
  if (v63) {
    goto LABEL_121;
  }
  FigMediaPlaylistSetPreloadHint((uint64_t)v61, v85);
  if (v85)
  {
    CFRelease(v85);
    CFDateRef v85 = 0;
  }
  CFDictionaryRef v64 = (const __CFDictionary *)FigWireDictionaryGetDictionary(0, (const void *)*MEMORY[0x1E4F21CD0]);
  uint64_t v63 = streamPlaylistParser_deserializeMediaFileEntry((uint64_t)v61, v64, (CFTypeRef *)&v85);
  if (v63)
  {
LABEL_121:
    uint64_t v58 = v63;
    CFDateRef v77 = v85;
    if (v85) {
      goto LABEL_118;
    }
    goto LABEL_119;
  }
  FigMediaPlaylistSetPreloadMapHint((uint64_t)v61, v85);
  if (v85) {
    CFRelease(v85);
  }
  CFArrayRef v65 = (const __CFArray *)CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E4F21CE8]);
  CFArrayRef v66 = v65;
  if (v65) {
    CFRetain(v65);
  }
  CFArrayRef v67 = (const __CFArray *)CFDictionaryGetValue(0, (const void *)*MEMORY[0x1E4F21CE0]);
  CFArrayRef v68 = v67;
  if (v67) {
    CFRetain(v67);
  }
  CFTypeRef v69 = v83;
  CFDateRef v84 = 0;
  CFDateRef v85 = 0;
  if (v66 && CFArrayGetCount(v66) >= 1)
  {
    CFIndex v70 = 0;
    do
    {
      FigCFArrayGetInt64AtIndex();
      if (v85)
      {
        CFDictionaryRef v71 = (const __CFDictionary *)FigMediaPlaylistGetMediaParsedIndexToEntryMap((uint64_t)v69);
        uint64_t v72 = CFDictionaryGetValue(v71, v85);
        if (v72) {
          FigMediaSegmentSpecifierSetIsReadInCurrent((uint64_t)v72, 1);
        }
      }
      ++v70;
    }
    while (CFArrayGetCount(v66) > v70);
  }
  if (v68 && CFArrayGetCount(v68) >= 1)
  {
    CFIndex v73 = 0;
    do
    {
      FigCFArrayGetInt64AtIndex();
      if (v84)
      {
        CFDictionaryRef CryptKeyParsedIndexToEntryMap = (const __CFDictionary *)FigMediaPlaylistGetCryptKeyParsedIndexToEntryMap((uint64_t)v69);
        CMTimeScale v75 = CFDictionaryGetValue(CryptKeyParsedIndexToEntryMap, v84);
        if (v75) {
          FigContentKeySpecifierSetIsReadInCurrent((uint64_t)v75, 1);
        }
      }
      ++v73;
    }
    while (CFArrayGetCount(v68) > v73);
  }
  uint64_t v58 = 0;
  if (!*v78)
  {
    *uint64_t v78 = v83;
    CFTypeRef v83 = 0;
  }
LABEL_105:
  if (v66) {
    CFRelease(v66);
  }
  if (v68) {
    CFRelease(v68);
  }
LABEL_109:
  if (v83) {
    CFRelease(v83);
  }
  return v58;
}

void streamPlaylistParser_copySerializedRepresentationForMediaGroupApplier(const void *a1, const __CFDictionary *a2, uint64_t a3)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  MutableCopCGFloat y = CFDictionaryCreateMutableCopy(AllocatorForMedia, 0, a2);
  if (MutableCopy)
  {
    CFMutableArrayRef v8 = MutableCopy;
    FigWireDictionarySetCFString(MutableCopy, (const void *)*MEMORY[0x1E4F21B80], *(CFTypeRef *)(a3 + 8));
    if (a1)
    {
      CFTypeID v9 = CFGetTypeID(a1);
      if (v9 == CFNumberGetTypeID()) {
        CFDictionarySetValue(v8, (const void *)*MEMORY[0x1E4F21C98], a1);
      }
      else {
        FigSignalErrorAt();
      }
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)a3, v8);
    CFRelease(v8);
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t FigWireDictionarySetCFString(__CFDictionary *a1, const void *a2, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFStringGetTypeID())
  {
    CFDictionarySetValue(a1, a2, cf);
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigWireDictionarySetCFDictionary(__CFDictionary *a1, const void *a2, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFDictionaryGetTypeID())
  {
    CFDictionarySetValue(a1, a2, cf);
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigWireDictionarySetCFDate(int a1, int a2, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v4 = CFGetTypeID(cf);
  if (v4 == CFDateGetTypeID())
  {
    MEMORY[0x199707BD0](cf);
    return FigCFDictionarySetDouble();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigWireDictionarySetCFData(__CFDictionary *a1, const void *a2, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFDataGetTypeID())
  {
    CFDictionarySetValue(a1, a2, cf);
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigWireDictionaryCopyCFDate(uint64_t a1, uint64_t a2, CFDateRef *a3)
{
  if (!a3) {
    return 0;
  }
  uint64_t result = FigCFDictionaryGetDoubleIfPresent();
  if (result)
  {
    CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
    CFDateRef v6 = CFDateCreate(AllocatorForMedia, 0.0);
    *a3 = v6;
    if (v6) {
      return 0;
    }
    else {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t FigWireDictionarySetCFURL(__CFDictionary *a1, const void *a2, CFTypeRef cf)
{
  if (!cf) {
    return 0;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 == CFURLGetTypeID())
  {
    CFDictionarySetValue(a1, a2, cf);
    return 0;
  }

  return FigSignalErrorAt();
}

void streamPlaylistParser_serializeAlternateApplier(__CFArray *a1, CFMutableArrayRef *a2)
{
  CFMutableDictionaryRef v3 = FigAlternateCopyAsSerializedRepresentation(a1, 0);
  if (v3)
  {
    CFMutableDictionaryRef v4 = v3;
    CFArrayAppendValue(*a2, v3);
    CFRelease(v4);
  }
}

CFMutableArrayRef streamPlaylistParser_copySerializedRepresentationForMediaGroups(const __CFDictionary *a1)
{
  if (FigCFDictionaryGetCount() < 1) {
    return 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]);
  if (Mutable) {
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)streamPlaylistParser_copySerializedRepresentationForMediaGroupsApplier, Mutable);
  }
  else {
    FigSignalErrorAt();
  }
  return Mutable;
}

void streamPlaylistParser_copySerializedRepresentationForMediaGroupsApplier(uint64_t a1, const __CFDictionary *a2, __CFArray *a3)
{
  CFMutableDictionaryRef v4 = (const void *)FigStreamPlaylistParserCopySerializedRepresentationForMediaGroup(a1, a2);
  if (v4)
  {
    CFTypeRef v5 = v4;
    CFArrayAppendValue(a3, v4);
    CFRelease(v5);
  }
}

uint64_t streamPlaylistParser_serializeMediaSegmentSpecifier(uint64_t a1, const void *a2, uint64_t a3, __CFDictionary **a4)
{
  CMTimeValue value = 0;
  if (!a2) {
    return 0;
  }
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFIndex v10 = Mutable;
    if (FigMediaSegmentSpecifierGetURLString((uint64_t)a2))
    {
      CFIndex v11 = (const void *)*MEMORY[0x1E4F21C70];
      CFStringRef URLString = (const void *)FigMediaSegmentSpecifierGetURLString((uint64_t)a2);
      FigWireDictionarySetCFString(v10, v11, URLString);
    }
    if (FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a2))
    {
      uint64_t ContentKeySpecifier = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)a2);
      FigContentKeySpecifierGetCryptKeyParsedIndex(ContentKeySpecifier);
      FigCFDictionarySetInt64();
    }
    if (FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a2))
    {
      uint64_t MapSegmentSpecifier = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)a2);
      FigMediaSegmentSpecifierGetMediaParsedIndex(MapSegmentSpecifier);
      FigCFDictionarySetInt64();
    }
    CFArrayRef PartialSegments = (const __CFArray *)FigMediaSegmentSpecifierGetPartialSegments((uint64_t)a2);
    if (PartialSegments)
    {
      CFArrayRef v16 = PartialSegments;
      if (CFArrayGetCount(PartialSegments) >= 1)
      {
        uint64_t v17 = streamPlaylistParser_serializeMediaSegmentSpecifiers(a1, v16, a3, &value);
        if (v17) {
          goto LABEL_35;
        }
        if (value) {
          CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E4F21C90], value);
        }
      }
    }
    FigMediaSegmentSpecifierGetMediaSequence((uint64_t)a2);
    FigCFDictionarySetInt64();
    FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)a2);
    FigCFDictionarySetInt64();
    FigMediaSegmentSpecifierGetStartOffset((uint64_t)a2);
    FigCFDictionarySetInt64();
    FigMediaSegmentSpecifierGetBytesToRead((uint64_t)a2);
    FigCFDictionarySetInt64();
    FigMediaSegmentSpecifierGetTimeInSeconds((uint64_t)a2);
    FigCFDictionarySetDouble();
    FigMediaSegmentSpecifierGetBitRate((uint64_t)a2);
    FigCFDictionarySetDouble();
    CFTypeRef v18 = (const void *)*MEMORY[0x1E4F21BC8];
    IV = (const void *)FigMediaSegmentSpecifierGetIV((uint64_t)a2);
    uint64_t v17 = FigWireDictionarySetCFData(v10, v18, IV);
    if (!v17)
    {
      uint64_t v20 = *MEMORY[0x1E4F21B18];
      DateStamp = (const void *)FigMediaSegmentSpecifierGetDateStamp((uint64_t)a2);
      uint64_t v17 = FigWireDictionarySetCFDate((int)v10, v20, DateStamp);
      if (!v17)
      {
        FigMediaSegmentSpecifierGetImputedDate((uint64_t)a2);
        FigCFDictionarySetDouble();
        FigMediaSegmentSpecifierGetType((uint64_t)a2);
        FigCFDictionarySetInt64();
        CFIndex v22 = (const void *)*MEMORY[0x1E4F21C20];
        int IsMarkedIndependent = FigMediaSegmentSpecifierIsMarkedIndependent((uint64_t)a2);
        CFDictionaryRef v24 = (const void *)*MEMORY[0x1E4F1CFD0];
        uint64_t v25 = (const void *)*MEMORY[0x1E4F1CFC8];
        if (IsMarkedIndependent) {
          CFDateRef v26 = (const void *)*MEMORY[0x1E4F1CFD0];
        }
        else {
          CFDateRef v26 = (const void *)*MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v10, v22, v26);
        CFArrayRef v27 = (const void *)*MEMORY[0x1E4F21BE0];
        if (FigMediaSegmentSpecifierIsDiscontinuity((uint64_t)a2)) {
          CFArrayRef v28 = v24;
        }
        else {
          CFArrayRef v28 = v25;
        }
        CFDictionarySetValue(v10, v27, v28);
        CFTypeRef v29 = (const void *)*MEMORY[0x1E4F21C18];
        if (FigMediaSegmentSpecifierIsMarkedAsGap((uint64_t)a2)) {
          CFIndex v30 = v24;
        }
        else {
          CFIndex v30 = v25;
        }
        CFDictionarySetValue(v10, v29, v30);
        CFIndex v31 = (const void *)*MEMORY[0x1E4F21B68];
        if (FigMediaSegmentSpecifierIsFragment((uint64_t)a2)) {
          CFRange v32 = v24;
        }
        else {
          CFRange v32 = v25;
        }
        CFDictionarySetValue(v10, v31, v32);
        CFDictionaryRef v33 = (const void *)*MEMORY[0x1E4F21B70];
        if (FigMediaSegmentSpecifierAreFragmentsExpired((uint64_t)a2)) {
          CFDateRef v34 = v24;
        }
        else {
          CFDateRef v34 = v25;
        }
        CFDictionarySetValue(v10, v33, v34);
        FigMediaSegmentSpecifierGetMediaParsedIndex((uint64_t)a2);
        FigCFDictionarySetInt64();
        if (FigMediaSegmentSpecifierGetMediaParsedIndex((uint64_t)a2))
        {
          MediaParsedIndeCGFloat x = (const void *)FigMediaSegmentSpecifierGetMediaParsedIndex((uint64_t)a2);
          FigMediaPlaylistAddToMediaParsedIndexToEntryMap(a1, MediaParsedIndex, a2);
        }
        uint64_t v36 = 0;
        if (a4)
        {
          *a4 = v10;
          goto LABEL_37;
        }
        goto LABEL_36;
      }
    }
LABEL_35:
    uint64_t v36 = v17;
LABEL_36:
    CFRelease(v10);
    goto LABEL_37;
  }
  uint64_t v36 = FigSignalErrorAt();
LABEL_37:
  if (value) {
    CFRelease(value);
  }
  return v36;
}

void streamPlaylistParser_copyDeserializedRepresentationForMediaGroups(const __CFArray *a1, __CFDictionary **a2)
{
  CFTypeRef cf = 0;
  CFTypeRef v16 = 0;
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (a2)
    {
      if (Count >= 1)
      {
        CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFAllocatorRef v7 = Mutable;
          CFIndex v8 = CFArrayGetCount(a1);
          if (v8 < 1)
          {
            *a2 = v7;
          }
          else
          {
            CFIndex v9 = v8;
            for (CFIndex i = 0; i != v9; ++i)
            {
              CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(a1, i);
              FigStreamPlaylistParserCreateMediaGroup(ValueAtIndex, &cf, (__CFDictionary **)&v16);
              CFTypeRef v12 = v16;
              if (v16) {
                BOOL v13 = cf == 0;
              }
              else {
                BOOL v13 = 1;
              }
              if (!v13)
              {
                CFDictionarySetValue(v7, cf, v16);
                CFTypeRef v12 = v16;
              }
              if (v12)
              {
                CFRelease(v12);
                CFTypeRef v16 = 0;
              }
              if (cf)
              {
                CFRelease(cf);
                CFTypeRef cf = 0;
              }
            }
            CFTypeRef v14 = v16;
            *a2 = v7;
            if (v14)
            {
              CFRelease(v14);
              if (cf) {
                CFRelease(cf);
              }
            }
          }
        }
        else
        {
          FigSignalErrorAt();
        }
      }
    }
  }
}

uint64_t streamPlaylistParser_deserializeContentKeySpecifier(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  uint64_t v3 = 0;
  CFTypeRef cf = 0;
  if (a2 && a3)
  {
    FigCFDictionaryGetInt64IfPresent();
    uint64_t v12 = 0;
    FigCFDictionaryGetInt64IfPresent();
    CFArrayRef Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21B00]);
    CFAllocatorRef v7 = Value;
    if (Value) {
      CFRetain(Value);
    }
    CFIndex v8 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21D68]);
    CFIndex v9 = v8;
    if (v8) {
      CFRetain(v8);
    }
    FigCFDictionaryGetBooleanIfPresent();
    uint64_t v12 = 0;
    FigCFDictionaryGetInt64IfPresent();
    uint64_t v3 = FigContentKeySpecifierCreate(0, v7, 0, v9, (uint64_t *)&cf);
    if (v3)
    {
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      FigContentKeySpecifierSetIsReadInCurrent((uint64_t)cf, 1);
      FigContentKeySpecifierSetIsChangedInCurrent((uint64_t)cf, 0);
      FigContentKeySpecifierSetCryptKeyParsedIndex((uint64_t)cf, 0);
      FigContentKeySpecifierSetIsPrefetchKey((uint64_t)cf, 0);
      *a3 = cf;
      CFTypeRef cf = 0;
    }
    if (v7) {
      CFRelease(v7);
    }
    if (v9) {
      CFRelease(v9);
    }
  }
  return v3;
}

uint64_t streamPlaylistParser_deserializeMediaFileEntry(uint64_t a1, const __CFDictionary *a2, CFTypeRef *a3)
{
  uint64_t v3 = 0;
  CFTypeRef v53 = 0;
  CFTypeRef v54 = 0;
  if (a2)
  {
    CFMutableDictionaryRef v4 = a3;
    if (a3)
    {
      CFTypeRef v7 = *a3;
      if (*a3)
      {
        CFTypeRef v54 = *a3;
        FigMediaSegmentSpecifierSetURLString((uint64_t)v7, 0);
        FigMediaSegmentSpecifierSetIV((uint64_t)v7, 0);
        FigMediaSegmentSpecifierSetDateStamp((uint64_t)v7, 0);
        int v8 = 0;
      }
      else
      {
        uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
        EmptCGFloat y = FigMediaSegmentSpecifierCreateEmpty(AllocatorForMedia, (uint64_t *)&v54);
        int v8 = 1;
        if (Empty)
        {
          uint64_t v3 = Empty;
          uint64_t v12 = 0;
          goto LABEL_34;
        }
      }
      CFArrayRef Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21C70]);
      uint64_t v12 = Value;
      if (Value) {
        CFRetain(Value);
      }
      FigMediaSegmentSpecifierSetURLString((uint64_t)v54, v12);
      char v56 = 0;
      FigCFDictionaryGetInt64IfPresent();
      BOOL v13 = v56;
      char v56 = 0;
      FigCFDictionaryGetInt64IfPresent();
      CFTypeRef v14 = v56;
      CFDictionaryRef CryptKeyParsedIndexToEntryMap = (const __CFDictionary *)FigMediaPlaylistGetCryptKeyParsedIndexToEntryMap(a1);
      CFTypeRef v16 = CFDictionaryGetValue(CryptKeyParsedIndexToEntryMap, v13);
      if (v16) {
        FigMediaSegmentSpecifierSetContentKeySpecifier((uint64_t)v54, v16);
      }
      CFDictionaryRef MediaParsedIndexToEntryMap = (const __CFDictionary *)FigMediaPlaylistGetMediaParsedIndexToEntryMap(a1);
      CFTypeRef v18 = CFDictionaryGetValue(MediaParsedIndexToEntryMap, v14);
      if (v18) {
        FigMediaSegmentSpecifierSetMapSegmentSpecifier((uint64_t)v54, v18);
      }
      ArraCGFloat y = (const __CFArray *)FigWireDictionaryGetArray(a2, (const void *)*MEMORY[0x1E4F21C90]);
      if (Array)
      {
        CFArrayRef v20 = Array;
        CFDictionaryRef v51 = v12;
        CFIndex v21 = v4;
        int v52 = v8;
        CFTypeRef v22 = v54;
        CFTypeRef cf = 0;
        CFIndex Count = CFArrayGetCount(Array);
        if (Count)
        {
          CFIndex v24 = Count;
          for (CFIndex i = 0; v24 != i; ++i)
          {
            CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(v20, i);
            char v56 = 0;
            FigCFDictionaryGetInt64IfPresent();
            CFArrayRef v27 = v56;
            CFDictionaryRef v28 = (const __CFDictionary *)FigMediaPlaylistGetMediaParsedIndexToEntryMap(a1);
            CFTypeRef v29 = CFDictionaryGetValue(v28, v27);
            CFTypeRef cf = v29;
            if (v29 && (CFRetain(v29), cf))
            {
              uint64_t v30 = streamPlaylistParser_deserializeMediaFileEntry(a1, ValueAtIndex, &cf);
              if (v30)
              {
                uint64_t v3 = v30;
                CFTypeRef v50 = cf;
                goto LABEL_43;
              }
            }
            else
            {
              uint64_t v31 = streamPlaylistParser_deserializeMediaFileEntry(a1, ValueAtIndex, &cf);
              CFTypeRef v50 = cf;
              if (v31)
              {
                uint64_t v3 = v31;
LABEL_43:
                int v8 = v52;
                uint64_t v12 = v51;
                if (v50)
                {
                  CFIndex v48 = v50;
LABEL_33:
                  CFRelease(v48);
                }
                goto LABEL_34;
              }
              FigMediaSegmentSpecifierAddPartialSegment((uint64_t)v22, cf);
            }
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
          }
        }
        int v8 = v52;
        CFMutableDictionaryRef v4 = v21;
        uint64_t v12 = v51;
      }
      CFTypeRef v32 = v54;
      char v56 = 0;
      FigCFDictionaryGetInt64IfPresent();
      FigMediaSegmentSpecifierSetMediaSequence((uint64_t)v32, (uint64_t)v56);
      CFTypeRef v33 = v54;
      char v56 = 0;
      FigCFDictionaryGetInt64IfPresent();
      FigMediaSegmentSpecifierSetIsDiscontinuityDomain((uint64_t)v33, (uint64_t)v56);
      CFTypeRef v34 = v54;
      char v56 = 0;
      FigCFDictionaryGetInt64IfPresent();
      FigMediaSegmentSpecifierSetStartOffset((uint64_t)v34, (uint64_t)v56);
      CFTypeRef v35 = v54;
      char v56 = 0;
      FigCFDictionaryGetInt64IfPresent();
      FigMediaSegmentSpecifierSetBytesToRead((uint64_t)v35, (uint64_t)v56);
      CFTypeRef v36 = v54;
      char v56 = 0;
      FigCFDictionaryGetDoubleIfPresent();
      FigMediaSegmentSpecifierSetTimeInSeconds((uint64_t)v36, *(double *)&v56);
      CFTypeRef v37 = v54;
      char v56 = 0;
      FigCFDictionaryGetDoubleIfPresent();
      FigMediaSegmentSpecifierSetBitRate((uint64_t)v37, *(double *)&v56);
      CFArrayRef v38 = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F21BC8]);
      CFArrayRef v39 = v38;
      if (v38) {
        CFRetain(v38);
      }
      FigMediaSegmentSpecifierSetIV((uint64_t)v54, v39);
      uint64_t v3 = FigWireDictionaryCopyCFDate((uint64_t)a2, *MEMORY[0x1E4F21B18], (CFDateRef *)&v53);
      if (!v3)
      {
        FigMediaSegmentSpecifierSetDateStamp((uint64_t)v54, v53);
        CFTypeRef v40 = v54;
        char v56 = 0;
        FigCFDictionaryGetDoubleIfPresent();
        FigMediaSegmentSpecifierSetImputedDate((uint64_t)v40, *(double *)&v56);
        CFTypeRef v41 = v54;
        char v56 = 0;
        FigCFDictionaryGetInt64IfPresent();
        FigMediaSegmentSpecifierSetType((uint64_t)v41, (int)v56);
        CFTypeRef v42 = v54;
        LOBYTE(v56) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        FigMediaSegmentSpecifierSetIsIndependent((uint64_t)v42, (char)v56);
        CFTypeRef v43 = v54;
        LOBYTE(v56) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        FigMediaSegmentSpecifierSetIsDiscontinuity((uint64_t)v43, (char)v56);
        CFTypeRef v44 = v54;
        LOBYTE(v56) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        FigMediaSegmentSpecifierSetIsMarkedAsGap((uint64_t)v44, (char)v56);
        CFTypeRef v45 = v54;
        LOBYTE(v56) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        FigMediaSegmentSpecifierSetIsFragment((uint64_t)v45, (char)v56);
        CFTypeRef v46 = v54;
        LOBYTE(v56) = 0;
        FigCFDictionaryGetBooleanIfPresent();
        FigMediaSegmentSpecifierSetAreFragmentsExpired((uint64_t)v46, (char)v56);
        FigMediaSegmentSpecifierSetIsReadInCurrent((uint64_t)v54, 1);
        char v56 = 0;
        FigCFDictionaryGetInt64IfPresent();
        CFDateRef v47 = v56;
        FigMediaSegmentSpecifierSetMediaParsedIndex((uint64_t)v54, (uint64_t)v56);
        if (v47) {
          FigMediaPlaylistAddToMediaParsedIndexToEntryMap(a1, v47, v54);
        }
        *CFMutableDictionaryRef v4 = v54;
        CFTypeRef v54 = 0;
      }
      if (v39)
      {
        CFIndex v48 = v39;
        goto LABEL_33;
      }
LABEL_34:
      if (v53) {
        CFRelease(v53);
      }
      if (v12) {
        CFRelease(v12);
      }
      if (v8 && v54) {
        CFRelease(v54);
      }
    }
  }
  return v3;
}

const void *FigWireDictionaryGetDictionary(const __CFDictionary *a1, const void *a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, a2);
  uint64_t v3 = Value;
  if (Value)
  {
    CFTypeID v4 = CFGetTypeID(Value);
    if (v4 != CFDictionaryGetTypeID())
    {
      FigSignalErrorAt();
      return 0;
    }
  }
  return v3;
}

uint64_t FigImageQueueGaugeGetClassID()
{
  return sFigImageQueueGaugeClassID;
}

uint64_t RegisterFigImageQueueGaugeType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigImageQueueGaugeGetTypeID()
{
  MEMORY[0x19970EE10](&FigImageQueueGaugeGetClassID_sRegisterFigImageQueueGaugeTypeOnce, RegisterFigImageQueueGaugeType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigImageQueueGaugeCreate(uint64_t a1, uint64_t a2, void *a3)
{
  if (a3)
  {
    MEMORY[0x19970EE10](&FigImageQueueGaugeGetClassID_sRegisterFigImageQueueGaugeTypeOnce, RegisterFigImageQueueGaugeType);
    uint64_t v4 = CMDerivedObjectCreate();
    if (!v4)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)uint64_t DerivedStorage = FigSimpleMutexCreate();
      uint64_t v6 = MEMORY[0x1E4F1FA48];
      *(_OWORD *)(DerivedStorage + 8) = *MEMORY[0x1E4F1FA48];
      *(void *)(DerivedStorage + 24) = *(void *)(v6 + 16);
      *a3 = 0;
    }
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFStringRef FigImageQueueGaugeCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigImageQueueGauge %p]", a1);
}

uint64_t imageQueueGauge_Invalidate()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v1 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)(DerivedStorage + 1) = *MEMORY[0x1E4F1FA48];
  DerivedStorage[3] = *(void *)(v1 + 16);
  *((_WORD *)DerivedStorage + 16) = 257;
  MEMORY[0x19970E930](*DerivedStorage);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  return 0;
}

uint64_t imageQueueGauge_Finalize()
{
  CMBaseObjectGetDerivedStorage();

  return FigSimpleMutexDestroy();
}

uint64_t imageQueueGauge_SetSafeDisplayDuration(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (*((unsigned char *)DerivedStorage + 33)) {
    goto LABEL_2;
  }
  long long v4 = *(_OWORD *)(DerivedStorage + 1);
  time1.CMTimeEpoch epoch = DerivedStorage[3];
  *(_OWORD *)&time1.CMTimeValue value = v4;
  CMTime v8 = *a2;
  int32_t v5 = CMTimeCompare(&time1, &v8);
  long long v6 = *(_OWORD *)&a2->value;
  DerivedStorage[3] = a2->epoch;
  *(_OWORD *)(DerivedStorage + 1) = v6;
  if (!v5)
  {
LABEL_2:
    MEMORY[0x19970E930](*DerivedStorage);
  }
  else
  {
    MEMORY[0x19970E930](*DerivedStorage);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return 0;
}

void imageQueueGauge_GetSafeDisplayDuration(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)DerivedStorage);
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 8);
  *(void *)(a1 + 16) = *(void *)(DerivedStorage + 24);

  JUMPOUT(0x19970E930);
}

uint64_t imageQueueGauge_SetEnqueueingComplete(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  if (*((unsigned char *)DerivedStorage + 33)
    || (int v4 = *((unsigned __int8 *)DerivedStorage + 32), *((unsigned char *)DerivedStorage + 32) = a2, v4 == a2))
  {
    MEMORY[0x19970E930](*DerivedStorage);
  }
  else
  {
    MEMORY[0x19970E930](*DerivedStorage);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return 0;
}

uint64_t imageQueueGauge_GetEnqueueingComplete()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*DerivedStorage);
  uint64_t v1 = *((unsigned __int8 *)DerivedStorage + 32);
  MEMORY[0x19970E930](*DerivedStorage);
  return v1;
}

uint64_t FigCaptionRendererCGOutputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a1 && a2 && a3 && a6)
  {
    *a6 = 0;
    FigCaptionRendererOutputGetClassID();
    CMDerivedObjectCreate();
  }
  return FigSignalErrorAt();
}

uint64_t FigCaptionRendererCGOutputUpdateCGContext(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    (*(void (**)(uint64_t, void))(DerivedStorage + 88))(a2, *(void *)(DerivedStorage + 72));
  }
  return 0;
}

void FigCaptionRendererCGOutput_Finalize()
{
  uint64_t v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *FigCaptionRendererCGOutput_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptionRendererCGOutput %p>", a1);
  return Mutable;
}

uint64_t transactionBegin()
{
  return 0;
}

uint64_t transactionFlush()
{
  return 0;
}

uint64_t transactionCommit()
{
  return 0;
}

uint64_t setNeedsDisplayInRect()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    (*(void (**)(void, void))(DerivedStorage + 88))(*(void *)DerivedStorage, *(void *)(DerivedStorage + 72));
  }
  return 0;
}

double getBounds()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t setBounds(double a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 8) = a1;
  *(double *)(DerivedStorage + 16) = a2;
  *(double *)(DerivedStorage + 24) = a3;
  *(double *)(DerivedStorage + 32) = a4;
  (*(void (**)(void, uint64_t, double, double, double, double))(DerivedStorage + 80))(*(void *)(DerivedStorage + 72), a6, a1, a2, a3, a4);
  return 0;
}

uint64_t setVideoBounds(double a1, double a2, double a3, double a4)
{
  uint64_t DerivedStorage = (double *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[5] = a1;
  DerivedStorage[6] = a2;
  DerivedStorage[7] = a3;
  DerivedStorage[8] = a4;
  return 0;
}

int clear(void)
{
  CGFloat v4 = v3;
  CGFloat v5 = v2;
  CGFloat v6 = v1;
  CGFloat v7 = v0;
  uint64_t DerivedStorage = (CGContextRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFIndex v9 = DerivedStorage;
    v11.origin.CGFloat x = v7;
    v11.origin.CGFloat y = v6;
    v11.size.CGFloat width = v5;
    v11.size.CGFloat height = v4;
    if (CGRectEqualToRect(v11, *MEMORY[0x1E4F1DB20]))
    {
      CGContextClear();
    }
    else
    {
      v12.origin.CGFloat x = v7;
      v12.origin.CGFloat y = v6;
      v12.size.CGFloat width = v5;
      v12.size.CGFloat height = v4;
      CGContextClearRect(*v9, v12);
    }
  }
  return 0;
}

double FigCPEOctaviaPKDMovieIDInit(_OWORD *a1)
{
  double result = 0.0;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void FigCPEOctaviaPKDMovieIDFinalize(uint64_t a1)
{
  double v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __FigCPEOctaviaPKDMovieIDFinalize_block_invoke;
    block[3] = &__block_descriptor_tmp_7;
    block[4] = a1;
    dispatch_sync(v2, block);
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
  }
  double v3 = *(const void **)(a1 + 88);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 88) = 0;
  }
}

uint64_t __FigCPEOctaviaPKDMovieIDGetTypeID_block_invoke()
{
  uint64_t result = _CFRuntimeRegisterClass();
  FigCPEOctaviaPKDMovieIDGetTypeID_typeID = result;
  return result;
}

uint64_t FigCPEOctaviaPKDMovieIDCreateCommon(uint64_t a1, unint64_t a2, unint64_t a3, const void *a4, void *a5)
{
  if (a2 | a3 && a5)
  {
    *a5 = 0;
    if (FigCPEOctaviaPKDMovieIDGetTypeID_once != -1) {
      dispatch_once(&FigCPEOctaviaPKDMovieIDGetTypeID_once, &__block_literal_global);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (Instance)
    {
      CFIndex v10 = (void *)Instance;
      dispatch_queue_t v11 = dispatch_queue_create("com.apple.FigCPEOctaviaPKDMovieID", 0);
      v10[2] = v11;
      if (v11)
      {
        if (a3) {
          CGRect v12 = Qt84D4aopGP;
        }
        else {
          CGRect v12 = pduR7VAgOpwwTZi6E;
        }
        BOOL v13 = f5dnLMQHpqo6KM9x;
        if (a3) {
          BOOL v13 = at7Z1NwMd;
        }
        v10[8] = v12;
        v10[9] = v13;
        CFTypeRef v14 = n2qn70S3cN6uyWbw;
        if (a3) {
          CFTypeRef v14 = mfGhVpprP0qip8G;
        }
        v10[10] = v14;
        if (a3)
        {
          v10[7] = CFRetain((CFTypeRef)a3);
          if (a4)
          {
LABEL_16:
            CFTypeRef v15 = CFRetain(a4);
LABEL_22:
            v10[11] = v15;
            NeroTransportRegisterObjectWithFlags();
            uint64_t result = 0;
            *a5 = v10;
            return result;
          }
        }
        else
        {
          if (a2) {
            CFTypeRef v16 = CFRetain((CFTypeRef)a2);
          }
          else {
            CFTypeRef v16 = 0;
          }
          v10[3] = v16;
          if (a4) {
            goto LABEL_16;
          }
        }
        CFTypeRef v15 = 0;
        goto LABEL_22;
      }
      CFRelease(v10);
    }
    return 4294955145;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void __FigCPEOctaviaPKDMovieIDCreateCommon_block_invoke(uint64_t a1, int a2)
{
  if (a2 == 1684628836)
  {
    uint64_t v8 = *(void *)(a1 + 32);
    if (*(unsigned char *)(v8 + 48))
    {
      (*(void (**)(void))(v8 + 80))(*(void *)(v8 + 32));
      uint64_t v8 = *(void *)(a1 + 32);
      *(unsigned char *)(v8 + 48) = 0;
    }
    *(void *)(v8 + 40) = 0;
  }
  else if (a2 == 1651470958)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(v3 + 56);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CGFloat v6 = Mutable;
      CGFloat v7 = (const void **)MEMORY[0x1E4F1CFC8];
      if (v4) {
        CGFloat v7 = (const void **)MEMORY[0x1E4F1CFD0];
      }
      CFDictionarySetValue(Mutable, @"IsProtectionSchemePKDMSE", *v7);
      if (!FigRemote_CreateSerializedAtomDataBlockBufferForCFType())
      {
        FigTransportGetRemoteRootObject();
        if (!NeroTransportSendSyncMessageCreatingReply()) {
          CMBlockBufferCopyDataBytes(0, 0, 8uLL, (void *)(v3 + 40));
        }
      }
      CFRelease(v6);
    }
    else
    {
      FigSignalErrorAt();
    }
  }
}

void FigCFRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigCPEOctaviaPKDMovieIDCreate(uint64_t a1, unint64_t a2, const void *a3, void *a4)
{
  return FigCPEOctaviaPKDMovieIDCreateCommon(a1, a2, 0, a3, a4);
}

uint64_t FigCPEOctaviaPKDMovieIDCreateForMSE(uint64_t a1, unint64_t a2, const void *a3, void *a4)
{
  return FigCPEOctaviaPKDMovieIDCreateCommon(a1, 0, a2, a3, a4);
}

uint64_t FigCPEOctaviaPKDMovieIDGetValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  uint64_t v8 = &v7;
  uint64_t v9 = 0x2000000000;
  int v10 = 0;
  uint64_t v3 = *(NSObject **)(a1 + 16);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  void v6[2] = __FigCPEOctaviaPKDMovieIDGetValue_block_invoke;
  v6[3] = &unk_1E5789C68;
  v6[4] = &v7;
  v6[5] = a1;
  _OWORD v6[6] = a2;
  v6[7] = a3;
  dispatch_sync(v3, v6);
  uint64_t v4 = *((unsigned int *)v8 + 6);
  _Block_object_dispose(&v7, 8);
  return v4;
}

uint64_t __FigCPEOctaviaPKDMovieIDGetValue_block_invoke(uint64_t a1)
{
  uint64_t v19 = 0;
  double v2 = *(uint64_t **)(a1 + 40);
  if (!v2[5])
  {
    uint64_t v7 = 0;
    uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
    int v18 = -12158;
LABEL_29:
    *(_DWORD *)(v17 + 24) = v18;
    goto LABEL_21;
  }
  uint64_t v3 = (void *)v2[7];
  if (v3)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = PKDKeyManagerGetMovieID(v3, *(CFDictionaryRef *)(a1 + 48), &v19);
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      goto LABEL_26;
    }
    CFDictionaryRef v4 = *(const __CFDictionary **)(a1 + 48);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = PKDMovieIDGetValue(v2[3], *(CFDictionaryRef *)(a1 + 48), &v19);
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      goto LABEL_26;
    }
    CFDictionaryRef v4 = (const __CFDictionary *)PKDMovieIDGetInfo(*(void *)(*(void *)(a1 + 40) + 24));
  }
  uint64_t v5 = *(void *)(a1 + 40);
  *(void *)(v5 + 32) = v19;
  if (*(unsigned char *)(v5 + 48))
  {
    CFDataRef v6 = 0;
    uint64_t v7 = 0;
    goto LABEL_17;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(void))(v5 + 64))();
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
LABEL_26:
    uint64_t v7 = 0;
    goto LABEL_21;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDataRef v9 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
  if (!v9)
  {
    uint64_t v7 = 0;
    uint64_t v17 = *(void *)(*(void *)(a1 + 32) + 8);
    int v18 = -12151;
    goto LABEL_29;
  }
  CFDataRef v6 = v9;
  MutableCopCGFloat y = CFDictionaryCreateMutableCopy(v8, 0, v4);
  uint64_t v7 = MutableCopy;
  if (!MutableCopy)
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = -12151;
LABEL_20:
    CFRelease(v6);
    goto LABEL_21;
  }
  CFDictionarySetValue(MutableCopy, @"DIM", v6);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigRemote_CreateSerializedAtomDataBlockBufferForCFType();
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_20;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = NeroTransportSendSyncMessageCreatingReply();
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_20;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigRemote_CreateCFTypeFromSerializedAtomDataBlockBuffer();
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_20;
  }
  dispatch_queue_t v11 = *(uint64_t (**)(uint64_t, const UInt8 *, CFIndex))(*(void *)(a1 + 40) + 72);
  uint64_t v12 = v19;
  BytePtr = CFDataGetBytePtr(0);
  CFIndex Length = CFDataGetLength(0);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v11(v12, BytePtr, Length);
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    goto LABEL_20;
  }
  *(unsigned char *)(*(void *)(a1 + 40) + 48) = 1;
LABEL_17:
  CFTypeRef v15 = *(void **)(a1 + 56);
  if (v15) {
    *CFTypeRef v15 = v19;
  }
  if (v6) {
    goto LABEL_20;
  }
LABEL_21:
  if (v7) {
    CFRelease(v7);
  }
  uint64_t result = 0;
  if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)(a1 + 40) + 80))(v19);
    *(unsigned char *)(*(void *)(a1 + 40) + 48) = 0;
  }
  return result;
}

uint64_t FigCPEOctaviaPKDMovieIDGetSerializationToken(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2000000000;
  int v9 = 0;
  if (a2)
  {
    double v2 = *(NSObject **)(a1 + 16);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __FigCPEOctaviaPKDMovieIDGetSerializationToken_block_invoke;
    block[3] = &unk_1E5789C90;
    void block[5] = a1;
    void block[6] = a2;
    block[4] = &v6;
    dispatch_sync(v2, block);
    uint64_t v3 = *((unsigned int *)v7 + 6);
  }
  else
  {
    uint64_t v3 = 4294955146;
    int v9 = -12150;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t __FigCPEOctaviaPKDMovieIDGetSerializationToken_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 40);
  if (v1) {
    **(void **)(result + 48) = v1;
  }
  else {
    *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = -12158;
  }
  return result;
}

uint64_t RegisterFigPKDOctaviaCPECryptorType()
{
  FigCPECryptorGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigCPEOctaviaPKDCryptorCreate(const void *a1, unint64_t *a2, void *a3, const __CFDictionary *a4, const void *a5, const void *a6, CFTypeRef *a7)
{
  CFDictionaryRef v7 = 0;
  uint64_t v33 = 0;
  CFTypeRef cf = 0;
  CMTime values = 0;
  uint64_t v8 = 4294955146;
  if (!a4 || !a6 || !a1 || !a2 || !a3 || !a7) {
    goto LABEL_34;
  }
  MEMORY[0x19970EE10](&FigCPEOctaviaPKDCryptorGetClassID_sRegisterFigPKDOctaviaCPECryptorTypeOnce, RegisterFigPKDOctaviaCPECryptorType);
  uint64_t CFNumberFromRemoteObjectRef = CMDerivedObjectCreate();
  if (CFNumberFromRemoteObjectRef) {
    goto LABEL_43;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage
    || (uint64_t v18 = DerivedStorage,
        uint64_t v19 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
        (*(void *)(v18 + 40) = v19) == 0)
    || (uint64_t v20 = FigSimpleMutexCreate(), (*(void *)(v18 + 32) = v20) == 0))
  {
    CFDictionaryRef v7 = 0;
    goto LABEL_42;
  }
  uint64_t v31 = a7;
  *(void *)uint64_t v18 = CFRetain(a1);
  *(_DWORD *)(v18 + 96) = 1;
  *(void *)(v18 + 104) = CFRetain(@"com.apple.pkd");
  *(void *)(v18 + 112) = CFRetain(a3);
  CFTypeRef v21 = a5 ? CFRetain(a5) : 0;
  *(void *)(v18 + 120) = v21;
  *(void *)(v18 + 48) = CFRetain(a2);
  uint64_t CFNumberFromRemoteObjectRef = FigCPEOctaviaPKDMovieIDGetSerializationToken((uint64_t)a2, (uint64_t)&v33);
  if (CFNumberFromRemoteObjectRef
    || (uint64_t CFNumberFromRemoteObjectRef = FigTransportCreateCFNumberFromRemoteObjectRef(),
        CFNumberFromRemoteObjectRef))
  {
LABEL_43:
    uint64_t v8 = CFNumberFromRemoteObjectRef;
    CFDictionaryRef v7 = 0;
    goto LABEL_34;
  }
  CFDictionaryRef v7 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigCPENeroKey_MovieIDSerializationToken, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v7)
  {
LABEL_42:
    uint64_t v8 = 4294955145;
    goto LABEL_34;
  }
  uint64_t v22 = FigPKDCPECryptorCreate(a1, a2[3], 0, a3, (const __CFAllocator *)a5, a4, (CFTypeRef *)(v18 + 16));
  if (v22) {
    goto LABEL_33;
  }
  uint64_t v22 = FigPKDOctaviaCPECryptorAddListenerOnLocalCryptor();
  if (v22) {
    goto LABEL_33;
  }
  uint64_t v22 = FigOctaviaCPECryptorCreate(a1, @"com.apple.pkd", a3, v7, (uint64_t)a5, a6, (void *)(v18 + 8));
  if (v22) {
    goto LABEL_33;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v22 = CMNotificationCenterAddListener();
  if (v22) {
    goto LABEL_33;
  }
  CFArrayRef Value = CFDictionaryGetValue(a4, @"AuditToken");
  if (Value)
  {
    CFIndex v24 = Value;
    CFTypeID v25 = CFGetTypeID(Value);
    if (v25 == CFDataGetTypeID()) {
      *(void *)(v18 + 64) = CFRetain(v24);
    }
  }
  CFDateRef v26 = CFDictionaryGetValue(a4, @"CryptKeyAttributes");
  if (!v26)
  {
    *(void *)(v18 + 152) = 0;
    goto LABEL_32;
  }
  CFTypeRef v27 = CFRetain(v26);
  *(void *)(v18 + 152) = v27;
  if (!v27)
  {
LABEL_32:
    uint64_t v22 = FigSignalErrorAt();
LABEL_33:
    uint64_t v8 = v22;
    goto LABEL_34;
  }
  CFDictionaryRef v28 = CFDictionaryGetValue(a4, @"iTunesRentalID");
  if (v28) {
    CFDictionaryRef v28 = CFRetain(v28);
  }
  *(void *)(v18 + 80) = v28;
  CFTypeRef v29 = CFDictionaryGetValue(a4, @"iTunesAccountID");
  if (v29) {
    CFTypeRef v29 = CFRetain(v29);
  }
  uint64_t v8 = 0;
  *(void *)(v18 + 88) = v29;
  *uint64_t v31 = cf;
  CFTypeRef cf = 0;
LABEL_34:
  if (values) {
    CFRelease(values);
  }
  if (v7) {
    CFRelease(v7);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t FigPKDOctaviaCPECryptorAddListenerOnLocalCryptor()
{
  CMNotificationCenterGetDefaultLocalCenter();
  LODWORD(result) = FigNotificationCenterAddWeakListener();
  if (result == -12724) {
    return 0;
  }
  else {
    return result;
  }
}

uint64_t ExternalProtectionStatusChangedCallback()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t FigCPEOctaviaPKDCryptorCreateForMSE(const void *a1, const void *a2, const void *a3, void *a4, const __CFDictionary *a5, const void *a6, const void *a7, CFTypeRef *a8)
{
  CFDictionaryRef v8 = 0;
  uint64_t v35 = 0;
  CFTypeRef cf = 0;
  CMTime values = 0;
  uint64_t v9 = 4294955146;
  if (!a5 || !a7 || !a4 || !a2 || !a1 || !a3 || !a8) {
    goto LABEL_34;
  }
  MEMORY[0x19970EE10](&FigCPEOctaviaPKDCryptorGetClassID_sRegisterFigPKDOctaviaCPECryptorTypeOnce, RegisterFigPKDOctaviaCPECryptorType);
  uint64_t CFNumberFromRemoteObjectRef = CMDerivedObjectCreate();
  if (CFNumberFromRemoteObjectRef) {
    goto LABEL_43;
  }
  uint64_t v33 = a7;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage
    || (uint64_t v20 = DerivedStorage, v21 = FigSimpleMutexCreate(), (*(void *)(v20 + 32) = v21) == 0)
    || (uint64_t v22 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (*(void *)(v20 + 40) = v22) == 0))
  {
    CFDictionaryRef v8 = 0;
    goto LABEL_42;
  }
  CFTypeRef v32 = a8;
  *(void *)uint64_t v20 = CFRetain(a1);
  *(_DWORD *)(v20 + 96) = 1;
  CFTypeRef v23 = @"com.apple.pkdmse" ? CFRetain(@"com.apple.pkdmse") : 0;
  *(void *)(v20 + 104) = v23;
  *(void *)(v20 + 112) = CFRetain(a4);
  CFTypeRef v24 = a6 ? CFRetain(a6) : 0;
  *(void *)(v20 + 120) = v24;
  *(void *)(v20 + 56) = CFRetain(a3);
  *(void *)(v20 + 48) = CFRetain(a2);
  uint64_t CFNumberFromRemoteObjectRef = FigCPEOctaviaPKDMovieIDGetSerializationToken((uint64_t)a2, (uint64_t)&v35);
  if (CFNumberFromRemoteObjectRef
    || (uint64_t CFNumberFromRemoteObjectRef = FigTransportCreateCFNumberFromRemoteObjectRef(),
        CFNumberFromRemoteObjectRef))
  {
LABEL_43:
    uint64_t v9 = CFNumberFromRemoteObjectRef;
    CFDictionaryRef v8 = 0;
    goto LABEL_34;
  }
  CFDictionaryRef v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigCPENeroKey_MovieIDSerializationToken, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v8)
  {
LABEL_42:
    uint64_t v9 = 4294955145;
    goto LABEL_34;
  }
  uint64_t v25 = FigPKDMSECPECryptorCreate(a1, a3, a4, (const __CFAllocator *)a6, a5, (CFTypeRef *)(v20 + 16));
  if (!v25)
  {
    uint64_t v25 = FigPKDOctaviaCPECryptorAddListenerOnLocalCryptor();
    if (!v25)
    {
      uint64_t v25 = FigOctaviaCPECryptorCreate(a1, @"com.apple.pkdmse", a4, v8, (uint64_t)a6, v33, (void *)(v20 + 8));
      if (!v25)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t v25 = CMNotificationCenterAddListener();
        if (!v25)
        {
          CFArrayRef Value = CFDictionaryGetValue(a5, @"AuditToken");
          if (Value)
          {
            CFTypeRef v27 = Value;
            CFTypeID v28 = CFGetTypeID(Value);
            if (v28 == CFDataGetTypeID()) {
              *(void *)(v20 + 64) = CFRetain(v27);
            }
          }
          CFTypeRef v29 = CFDictionaryGetValue(a5, @"CryptKeyAttributes");
          if (v29)
          {
            CFTypeRef v30 = CFRetain(v29);
            *(void *)(v20 + 152) = v30;
            if (v30)
            {
              uint64_t v9 = 0;
              *CFTypeRef v32 = cf;
              CFTypeRef cf = 0;
              goto LABEL_34;
            }
          }
          else
          {
            *(void *)(v20 + 152) = 0;
          }
          uint64_t v25 = FigSignalErrorAt();
        }
      }
    }
  }
  uint64_t v9 = v25;
LABEL_34:
  if (values) {
    CFRelease(values);
  }
  if (v8) {
    CFRelease(v8);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

void __FigCPEOctaviaPKDMovieIDFinalize_block_invoke(uint64_t a1)
{
  NeroTransportSendAsyncMessage();
  NeroTransportUnregisterObject();
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(const void **)(v2 + 56);
  if (v3)
  {
    CFRelease(v3);
    uint64_t v2 = *(void *)(a1 + 32);
  }
  CFDictionaryRef v4 = *(const void **)(v2 + 24);
  if (v4)
  {
    CFRelease(v4);
  }
}

CFTypeRef FigPKDOctaviaCPECryptorCopyFormattingDesc()
{
  return CFRetain(@"[FigPKDOctaviaCPECryptor]");
}

BOOL FigPKDOctaviaCPECryptorEqual(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t FigPKDOctaviaCPECryptorInvalidate(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  *(unsigned char *)(DerivedStorage + 24) = 1;
  *(_DWORD *)(DerivedStorage + 96) = 0;
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 128));
  uint64_t v3 = *(const void **)(DerivedStorage + 48);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 48) = 0;
  }
  CFDictionaryRef v4 = *(const void **)(DerivedStorage + 56);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 56) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 64);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 64) = 0;
  }
  if (*(void *)(DerivedStorage + 8))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterRemoveListener();
  }
  if (*(void *)(DerivedStorage + 16))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  CFDictionaryRef v7 = *(const void **)DerivedStorage;
  uint64_t v6 = *(const void **)(DerivedStorage + 8);
  *(void *)uint64_t DerivedStorage = 0;
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 8) = 0;
  }
  CFDictionaryRef v8 = *(const void **)(DerivedStorage + 16);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 80);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 80) = 0;
  }
  int v10 = *(const void **)(DerivedStorage + 88);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 88) = 0;
  }
  dispatch_queue_t v11 = *(const void **)(DerivedStorage + 40);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 120);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 120) = 0;
  }
  BOOL v13 = *(const void **)(DerivedStorage + 112);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 112) = 0;
  }
  CFTypeRef v14 = *(const void **)(DerivedStorage + 104);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 104) = 0;
  }
  CFTypeRef v15 = *(const void **)(DerivedStorage + 144);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 144) = 0;
  }
  CFTypeRef v16 = *(const void **)(DerivedStorage + 152);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 152) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  if (v7)
  {
    FigPKDCPEProtectorCryptorWasInvalidated((uint64_t)v7, a1);
    CFRelease(v7);
  }
  return 0;
}

uint64_t FigPKDOctaviaCPECryptorFinalize(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigPKDOctaviaCPECryptorInvalidate(a1);
  uint64_t result = *(void *)(DerivedStorage + 32);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 32) = 0;
  }
  return result;
}

__CFString *FigPKDOctaviaCPECryptorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  if (*(unsigned char *)(DerivedStorage + 24)) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = Mutable == 0;
  }
  if (!v5) {
    CFStringAppendFormat(Mutable, 0, @"<FigPKDOctaviaCPECryptor: protectorParent<%@> >", *(void *)DerivedStorage);
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  return Mutable;
}

uint64_t FigPKDOctaviaCPECryptorCopyProperty(const void *a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 4294955146;
  if (a2 && a4)
  {
    uint64_t v10 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
    if (*(unsigned char *)(v10 + 24))
    {
      uint64_t v9 = 4294954511;
LABEL_19:
      MEMORY[0x19970E930](*(void *)(v10 + 32));
      return v9;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD80]))
    {
      uint64_t v9 = 4294951076;
      goto LABEL_19;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDC8]))
    {
      int SInt32 = (const void *)FigCFNumberCreateSInt32();
LABEL_9:
      uint64_t v9 = 0;
      *a4 = (uint64_t)SInt32;
      goto LABEL_19;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDD0]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE18]))
    {
      uint64_t v12 = *(void *)(v10 + 16);
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      CFTypeRef v15 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t *))(v14 + 48);
      if (!v15)
      {
        uint64_t v9 = 4294954514;
        goto LABEL_19;
      }
      uint64_t v16 = v15(v12, a2, a3, a4);
      goto LABEL_17;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE10]))
    {
      uint64_t v16 = EnsureUUID(a1);
      if (!v16)
      {
        int SInt32 = *(const void **)(v10 + 144);
        if (!SInt32) {
          goto LABEL_9;
        }
LABEL_24:
        int SInt32 = CFRetain(SInt32);
        goto LABEL_9;
      }
    }
    else if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD98]))
    {
      uint64_t v16 = CopyCurrentRequestID(v10, a4);
    }
    else
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FD90]))
      {
        int SInt32 = *(const void **)(v10 + 152);
        if (!SInt32) {
          goto LABEL_9;
        }
        goto LABEL_24;
      }
      uint64_t v16 = FigCPECryptorCopyProperty(*(void *)(v10 + 8), (uint64_t)a2, a3, (uint64_t)a4);
    }
LABEL_17:
    uint64_t v9 = v16;
    goto LABEL_19;
  }
  return v9;
}

uint64_t FigPKDOctaviaCPECryptorSetProperty(const void *a1, const void *a2, void *a3)
{
  CFAllocatorRef v3 = a3;
  CMTime values = a3;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v7 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  if (!*(unsigned char *)(v7 + 24))
  {
    uint64_t v9 = *MEMORY[0x1E4F1FDE8];
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDE8]))
    {
      uint64_t v10 = *(void *)(v7 + 16);
      uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v11) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = 0;
      }
      uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v12 + 56);
      if (v17)
      {
        uint64_t v18 = v17(v10, v9, v3);
        if (v18)
        {
LABEL_50:
          uint64_t v8 = v18;
          goto LABEL_41;
        }
        uint64_t v19 = *(void *)(v7 + 8);
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        CFTypeRef v30 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v21 + 56);
        if (v30)
        {
          uint64_t v18 = v30(v19, v9, v3);
          goto LABEL_50;
        }
      }
LABEL_40:
      uint64_t v8 = 4294954514;
      goto LABEL_41;
    }
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDC0]))
    {
      if (v3)
      {
        CFTypeID v13 = CFGetTypeID(v3);
        if (v13 == CFErrorGetTypeID())
        {
          *(_DWORD *)(v7 + 96) = 1;
          uint64_t v14 = *(void *)(v7 + 16);
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v15) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v31 = *(uint64_t (**)(uint64_t, const void *, const void *))(v16 + 56);
          if (v31)
          {
            uint64_t v18 = v31(v14, a2, v3);
            if (v18) {
              goto LABEL_50;
            }
            uint64_t v32 = *(void *)(v7 + 8);
            uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v33) {
              uint64_t v34 = v33;
            }
            else {
              uint64_t v34 = 0;
            }
            CFTypeRef v37 = *(uint64_t (**)(uint64_t, const void *, const void *))(v34 + 56);
            if (v37)
            {
              uint64_t v18 = v37(v32, a2, v3);
              if (!v18)
              {
                CFDictionaryRef v38 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F1FD00], (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (v38)
                {
                  CFDictionaryRef v39 = v38;
                  dispatch_get_global_queue(0, 0);
                  CMNotificationCenterGetDefaultLocalCenter();
                  FigDispatchAsyncPostNotification();
                  CFRelease(v39);
                  uint64_t v8 = 0;
                }
                else
                {
                  uint64_t v8 = 4294955145;
                }
                goto LABEL_41;
              }
              goto LABEL_50;
            }
          }
          goto LABEL_40;
        }
      }
LABEL_128:
      uint64_t v8 = 4294955136;
      goto LABEL_41;
    }
    uint64_t v22 = *MEMORY[0x1E4F1FDD0];
    if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FDD0]))
    {
      if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FE18]))
      {
        if (!v3) {
          goto LABEL_128;
        }
        CFTypeID v35 = CFGetTypeID(v3);
        if (v35 != CFBooleanGetTypeID()) {
          goto LABEL_128;
        }
        *(unsigned char *)(v7 + 72) = CFBooleanGetValue((CFBooleanRef)v3);
        uint64_t v36 = *(void *)(v7 + 16);
      }
      else
      {
        uint64_t v36 = *(void *)(v7 + 8);
      }
      uint64_t v18 = FigCPECryptorSetProperty(v36, (uint64_t)a2, (uint64_t)v3);
      goto LABEL_50;
    }
    uint64_t v92 = 0;
    CFTypeRef cf = 0;
    uint64_t v23 = CMBaseObjectGetDerivedStorage();
    if (!*(void *)(v23 + 48)) {
      goto LABEL_129;
    }
    if (!v3)
    {
      uint64_t v53 = FigSignalErrorAt();
      goto LABEL_132;
    }
    CFTypeRef v24 = (void *)v23;
    CFTypeID v25 = CFGetTypeID(v3);
    if (v25 != CFDataGetTypeID())
    {
LABEL_129:
      uint64_t v42 = FigSignalErrorAt();
      goto LABEL_130;
    }
    CFDataRef v26 = *(const __CFData **)(v24[6] + 56);
    uint64_t v27 = v24[2];
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    CFTypeRef v41 = *(uint64_t (**)(uint64_t, uint64_t, const void *))(v29 + 56);
    if (v41)
    {
      uint64_t v42 = v41(v27, v22, v3);
      if (v42) {
        goto LABEL_130;
      }
      uint64_t v43 = v24[2];
      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v44) {
        uint64_t v45 = v44;
      }
      else {
        uint64_t v45 = 0;
      }
      CFTypeRef v46 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v45 + 48);
      if (v46)
      {
        uint64_t v47 = *MEMORY[0x1E4F1FDD8];
        CFAllocatorRef v48 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v42 = v46(v43, *MEMORY[0x1E4F1FDD8], *MEMORY[0x1E4F1CF80], &cf);
        if (!v42)
        {
          CFAllocatorRef allocator = v48;
          uint64_t v86 = v47;
          if (v26)
          {
            CFPropertyListRef v49 = CFPropertyListCreateWithData(v48, (CFDataRef)v3, 0, 0, 0);
            if (v49)
            {
              CFAllocatorRef v3 = v49;
              CFTypeID v50 = CFGetTypeID(v49);
              if (v50 == CFDictionaryGetTypeID()) {
                goto LABEL_71;
              }
              uint64_t v8 = FigSignalErrorAt();
              CFRelease(v3);
            }
            else
            {
              uint64_t v8 = FigSignalErrorAt();
            }
            CFAllocatorRef v3 = 0;
            CFTypeRef v51 = 0;
            CFDataRef v52 = 0;
            if (v8) {
              goto LABEL_60;
            }
          }
          else
          {
            CFAllocatorRef v3 = 0;
          }
LABEL_71:
          uint64_t v53 = FigCPEOctaviaPKDMovieIDGetValue(v24[6], (uint64_t)v3, (uint64_t)&v92);
          if (!v53)
          {
            CFTypeRef v54 = cf;
            uint64_t v55 = CMBaseObjectGetDerivedStorage();
            CFTypeRef v94 = 0;
            CFDataRef v88 = v26;
            if (v26) {
              char v56 = uZOxRFTqHPWsyRz;
            }
            else {
              char v56 = kNsH5DWSn1J;
            }
            CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
            if (Mutable)
            {
              uint64_t v58 = Mutable;
              CFDictionaryRef v89 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
              if (v89)
              {
                UInt64 = (const void *)FigCFNumberCreateUInt64();
                CFTypeRef v87 = UInt64;
                if (UInt64)
                {
                  CFDictionarySetValue(v58, @"aMII4QYJ", UInt64);
                  CFDictionarySetValue(v58, @"igoeg", v54);
                  CFDictionarySetValue(v58, @"lGxB4ky", *(const void **)(v55 + 64));
                  FigCFDictionarySetInt32();
                  uint64_t v60 = v56((uint64_t)v58, (uint64_t)v89);
                  if (!v60)
                  {
                    CFArrayRef Value = CFDictionaryGetValue(v89, @"CBQGVxY");
                    if (Value) {
                      CFTypeRef v51 = CFRetain(Value);
                    }
                    else {
                      CFTypeRef v51 = 0;
                    }
                    uint64_t v62 = CFDictionaryGetValue(v89, @"igoeg");
                    if (v62)
                    {
                      CFTypeRef v63 = CFRetain(v62);
                      if (v63)
                      {
                        uint64_t v64 = *(void *)(v55 + 16);
                        CFArrayRef v65 = *(void **)(CMBaseObjectGetVTable() + 16);
                        if (v65) {
                          CFArrayRef v66 = v65;
                        }
                        else {
                          CFArrayRef v66 = 0;
                        }
                        if (*v66 >= 6uLL
                          && (CFTypeRef v69 = (uint64_t (*)(uint64_t, CFTypeRef, CFTypeRef *))v66[21]) != 0)
                        {
                          uint64_t v70 = v69(v64, v63, &v94);
                          if (!v70)
                          {
                            CFDictionaryRef v71 = CFDictionaryCreate(allocator, MEMORY[0x1E4F1FD68], &v94, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                            if (v71)
                            {
                              CFDictionaryRef v67 = v71;
                              dispatch_get_global_queue(0, 0);
                              CMNotificationCenterGetDefaultLocalCenter();
                              FigDispatchAsyncPostNotification();
                              uint64_t v8 = 0;
LABEL_90:
                              CFRelease(v58);
                              CFRelease(v89);
                              CFArrayRef v68 = v87;
                              if (!v87)
                              {
LABEL_103:
                                CFDataRef v52 = v88;
                                if (v63) {
                                  CFRelease(v63);
                                }
LABEL_105:
                                if (v94) {
                                  CFRelease(v94);
                                }
                                if (v67) {
                                  CFRelease(v67);
                                }
                                if (!v8)
                                {
                                  if (!v52)
                                  {
LABEL_121:
                                    uint64_t v82 = v24[1];
                                    uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 8);
                                    if (v83) {
                                      uint64_t v84 = v83;
                                    }
                                    else {
                                      uint64_t v84 = 0;
                                    }
                                    CFDateRef v85 = *(uint64_t (**)(uint64_t, uint64_t, CFTypeRef))(v84 + 56);
                                    if (v85)
                                    {
                                      uint64_t v81 = v85(v82, v86, v51);
                                      goto LABEL_126;
                                    }
LABEL_59:
                                    uint64_t v8 = 4294954514;
LABEL_60:
                                    if (cf) {
                                      CFRelease(cf);
                                    }
                                    if (v51) {
                                      CFRelease(v51);
                                    }
                                    if (v3) {
                                      CFRelease(v3);
                                    }
                                    if (v52) {
                                      CFRelease(v52);
                                    }
                                    if (!v8) {
                                      *(unsigned char *)(v7 + 72) = 1;
                                    }
                                    goto LABEL_41;
                                  }
                                  uint64_t v72 = CMBaseObjectGetDerivedStorage();
                                  uint64_t v73 = EnsureUUID(a1);
                                  if (!v73)
                                  {
                                    uint64_t BytesFromCFString = FigCreateBytesFromCFString();
                                    if (BytesFromCFString)
                                    {
                                      CMTimeScale v75 = (UInt8 *)BytesFromCFString;
                                      CFIndex Length = CFStringGetLength(*(CFStringRef *)(v72 + 144));
                                      CFDataRef v52 = CFDataCreate(allocator, v75, Length);
                                      if (v52) {
                                        uint64_t v8 = 0;
                                      }
                                      else {
                                        uint64_t v8 = FigSignalErrorAt();
                                      }
                                      CFAllocatorDeallocate(allocator, v75);
                                      if (v8) {
                                        goto LABEL_60;
                                      }
                                    }
                                    else
                                    {
                                      uint64_t v8 = FigSignalErrorAt();
                                      CFDataRef v52 = 0;
                                      if (v8) {
                                        goto LABEL_60;
                                      }
                                    }
                                    uint64_t v77 = v24[1];
                                    uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 8);
                                    if (v78) {
                                      uint64_t v79 = v78;
                                    }
                                    else {
                                      uint64_t v79 = 0;
                                    }
                                    CFIndex v80 = *(uint64_t (**)(uint64_t, void, CFDataRef))(v79 + 56);
                                    if (!v80) {
                                      goto LABEL_59;
                                    }
                                    uint64_t v81 = v80(v77, *MEMORY[0x1E4F1FD70], v52);
                                    if (v81)
                                    {
LABEL_126:
                                      uint64_t v8 = v81;
                                      goto LABEL_60;
                                    }
                                    goto LABEL_121;
                                  }
                                  uint64_t v8 = v73;
                                }
LABEL_133:
                                CFDataRef v52 = 0;
                                goto LABEL_60;
                              }
LABEL_102:
                              CFRelease(v68);
                              goto LABEL_103;
                            }
                            uint64_t v70 = FigSignalErrorAt();
                          }
                          uint64_t v8 = v70;
                        }
                        else
                        {
                          uint64_t v8 = 4294954514;
                        }
                        if (v51) {
                          CFRelease(v51);
                        }
                        CFRelease(v58);
                        CFRelease(v89);
                        CFTypeRef v51 = 0;
                        CFDictionaryRef v67 = 0;
                        CFArrayRef v68 = v87;
                        goto LABEL_102;
                      }
                      uint64_t v8 = 0;
LABEL_89:
                      CFDictionaryRef v67 = 0;
                      goto LABEL_90;
                    }
                    uint64_t v8 = 0;
LABEL_87:
                    CFTypeRef v63 = 0;
                    goto LABEL_89;
                  }
                }
                else
                {
                  uint64_t v60 = FigSignalErrorAt();
                }
                uint64_t v8 = v60;
                CFTypeRef v51 = 0;
                goto LABEL_87;
              }
              uint64_t v8 = FigSignalErrorAt();
              CFRelease(v58);
            }
            else
            {
              uint64_t v8 = FigSignalErrorAt();
            }
            CFTypeRef v51 = 0;
            CFDictionaryRef v67 = 0;
            CFDataRef v52 = v88;
            goto LABEL_105;
          }
LABEL_132:
          uint64_t v8 = v53;
          CFTypeRef v51 = 0;
          goto LABEL_133;
        }
LABEL_130:
        uint64_t v8 = v42;
        CFTypeRef v51 = 0;
        CFDataRef v52 = 0;
        CFAllocatorRef v3 = 0;
        goto LABEL_60;
      }
    }
    CFTypeRef v51 = 0;
    CFDataRef v52 = 0;
    CFAllocatorRef v3 = 0;
    goto LABEL_59;
  }
  uint64_t v8 = 4294954511;
LABEL_41:
  MEMORY[0x19970E930](*(void *)(v7 + 32));
  return v8;
}

void StopAndReleaseTimer(dispatch_object_t *a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2)
    {
      dispatch_source_cancel(v2);
      dispatch_release(*a1);
      *a1 = 0;
    }
  }
}

uint64_t FigPKDOctaviaCPECryptorLocalCryptorUpdatedPersistentKeyCallback()
{
  dispatch_get_global_queue(0, 0);
  CMNotificationCenterGetDefaultLocalCenter();

  return FigDispatchAsyncPostNotification();
}

uint64_t FigCPECryptorCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4);
}

uint64_t EnsureUUID(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 144)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  CFAllocatorRef v4 = CFGetAllocator(a1);
  CFUUIDRef v5 = CFUUIDCreate(v4);
  if (v5)
  {
    CFUUIDRef v6 = v5;
    CFAllocatorRef v7 = CFGetAllocator(a1);
    CFStringRef v8 = CFUUIDCreateString(v7, v6);
    *(void *)(v3 + 144) = v8;
    if (v8) {
      uint64_t v9 = 0;
    }
    else {
      uint64_t v9 = FigSignalErrorAt();
    }
    CFRelease(v6);
    return v9;
  }

  return FigSignalErrorAt();
}

uint64_t CopyCurrentRequestID(uint64_t a1, uint64_t *a2)
{
  uint64_t SInt64 = FigCFNumberCreateSInt64();
  *a2 = SInt64;
  if (SInt64) {
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigCPECryptorSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFStringRef v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

uint64_t FigPKDOctaviaCPECryptorGetExternalProtectionMethods(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  if (*(unsigned char *)(v4 + 24))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 16);
    if (v9) {
      v9(v6, a2);
    }
    uint64_t v5 = 0;
  }
  MEMORY[0x19970E930](*(void *)(v4 + 32));
  return v5;
}

uint64_t FigPKDOctaviaCPECryptorGetAggregateExternalProtectionStatus(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    return 4294955146;
  }
  uint64_t v6 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  if (*(unsigned char *)(v6 + 24))
  {
    uint64_t v7 = 4294954511;
  }
  else
  {
    uint64_t v8 = *(void *)(v6 + 8);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 24);
    if (v11) {
      v11(v8, a2, a3);
    }
    uint64_t v7 = 0;
  }
  MEMORY[0x19970E930](*(void *)(v6 + 32));
  return v7;
}

uint64_t FigPKDOctaviaCPECryptorCreateKeyRequest(uint64_t a1, const __CFDictionary *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 4294955146;
  if (!a2 || !a4) {
    return v8;
  }
  uint64_t v9 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  if (*(unsigned char *)(v9 + 24))
  {
    uint64_t v8 = 4294954511;
LABEL_5:
    MEMORY[0x19970E930](*(void *)(v9 + 32));
    return v8;
  }
  if (!PKDKeyRequestIDsMatch((uint64_t)a2, *(void *)(v9 + 136)))
  {
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_5;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCopCGFloat y = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a2);
  if (!MutableCopy)
  {
LABEL_51:
    uint64_t v8 = 4294955145;
    goto LABEL_5;
  }
  uint64_t v12 = MutableCopy;
  CFTypeID v13 = (const void *)*MEMORY[0x1E4F21910];
  CFDictionaryRemoveValue(MutableCopy, (const void *)*MEMORY[0x1E4F21910]);
  uint64_t v14 = CFDictionaryCreateMutableCopy(v10, 0, a2);
  if (!v14)
  {
    CFRelease(v12);
    goto LABEL_51;
  }
  uint64_t v15 = v14;
  CFDictionaryRemoveValue(v14, v13);
  if (*(unsigned char *)(v9 + 72))
  {
    uint64_t v16 = *(void *)(v9 + 16);
    uint64_t v17 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    if (*v18 >= 4uLL && (uint64_t v29 = (uint64_t (*)(uint64_t, __CFDictionary *, uint64_t, void *))v18[11]) != 0)
    {
      uint64_t v8 = v29(v16, v12, a3, a4);
      CFArrayRef Value = 0;
      int v26 = 0;
    }
    else
    {
      CFArrayRef Value = 0;
      int v26 = 0;
      uint64_t v8 = 4294954514;
    }
    goto LABEL_43;
  }
  group = dispatch_group_create();
  uint64_t v44 = 0;
  uint64_t v45 = &v44;
  uint64_t v46 = 0x2000000000;
  int v47 = 0;
  uint64_t v40 = 0;
  CFTypeRef v41 = &v40;
  uint64_t v42 = 0x2000000000;
  uint64_t v43 = 0;
  CFArrayRef Value = CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F218F0]);
  if (!Value)
  {
    int v26 = 0;
    goto LABEL_53;
  }
  CFTypeID v35 = v12;
  uint64_t v20 = *(const void **)(v9 + 80);
  uint64_t v21 = *(const void **)(v9 + 88);
  uint64_t v48 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v23 = Mutable;
    CFMutableDictionaryRef v24 = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v24)
    {
      CFDictionaryRef v25 = v24;
      FigCFDictionarySetInt32();
      if (v20) {
        CFDictionarySetValue(v23, @"lK1", v20);
      }
      if (v21) {
        CFDictionarySetValue(v23, @"DhpWkh3rnR", v21);
      }
      CFDictionarySetValue(v23, @"Y7bdIsnh7", Value);
      if (nS1Q9ljw9esy9((uint64_t)v23, (uint64_t)v25))
      {
        int v26 = 0;
      }
      else
      {
        FigCFDictionaryGetInt64IfPresent();
        int v26 = v48;
        uint64_t v27 = CFDictionaryGetValue(v25, @"xNJu5eepP");
        if (v27)
        {
          CFTypeRef v28 = CFRetain(v27);
          if (v28)
          {
            CFArrayRef Value = v28;
            uint64_t v8 = 0;
LABEL_29:
            CFRelease(v23);
            CFRelease(v25);
            goto LABEL_30;
          }
        }
      }
      uint64_t v8 = FigSignalErrorAt();
      CFArrayRef Value = 0;
      goto LABEL_29;
    }
    uint64_t v8 = FigSignalErrorAt();
    CFRelease(v23);
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  CFArrayRef Value = 0;
  int v26 = 0;
LABEL_30:
  uint64_t v12 = v35;
  if (v8)
  {
LABEL_53:
    int v33 = 0;
    goto LABEL_42;
  }
  CFDictionaryAddValue(v15, (const void *)*MEMORY[0x1E4F21938], Value);
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigPKDOctaviaCPECryptorCreateKeyRequest_block_invoke;
  block[3] = &unk_1E5789CD8;
  void block[6] = v9;
  void block[7] = v15;
  block[8] = a3;
  block[4] = &v44;
  void block[5] = &v40;
  int v39 = v26;
  dispatch_group_async(group, global_queue, block);
  v37[0] = MEMORY[0x1E4F143A8];
  v37[1] = 0x40000000;
  v37[2] = __FigPKDOctaviaCPECryptorCreateKeyRequest_block_invoke_2;
  uint64_t v37[3] = &__block_descriptor_tmp_29;
  v37[4] = v9;
  v37[5] = v35;
  v37[6] = a3;
  dispatch_group_async(group, global_queue, v37);
  dispatch_group_wait(group, 0xFFFFFFFFFFFFFFFFLL);
  if (*(_DWORD *)(v9 + 76))
  {
    uint64_t v31 = v41;
  }
  else
  {
    uint64_t v31 = v41;
    if (!*((_DWORD *)v45 + 6))
    {
      *a4 = v41[3];
      v31[3] = 0;
    }
  }
  uint64_t v32 = (const void *)v31[3];
  if (v32) {
    CFRelease(v32);
  }
  if (group) {
    dispatch_release(group);
  }
  uint64_t v8 = *((unsigned int *)v45 + 6);
  if (!v8) {
    uint64_t v8 = *(unsigned int *)(v9 + 76);
  }
  int v33 = 1;
LABEL_42:
  _Block_object_dispose(&v40, 8);
  _Block_object_dispose(&v44, 8);
  if (v33) {
LABEL_43:
  }
    MEMORY[0x19970E930](*(void *)(v9 + 32));
  CFRelease(v12);
  CFRelease(v15);
  if (Value) {
    CFRelease(Value);
  }
  if (v26) {
    qo0PLbO2vEnVix1GkQeB8LR(v26);
  }
  return v8;
}

uint64_t FigPKDOctaviaCPECryptorSetKeyRequestResponse(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    BOOL v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 4294955146;
    goto LABEL_8;
  }
  uint64_t v7 = DerivedStorage;
  if (a3)
  {
    CFDateRef Value = (const __CFDate *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F21950]);
    BOOL v9 = CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F21958]) == (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else
  {
    CFDateRef Value = 0;
    BOOL v9 = 0;
  }
  MEMORY[0x19970E910](*(void *)(v7 + 32));
  uint64_t v10 = *(void *)(v7 + 136);
  if (*(unsigned char *)(v7 + 24))
  {
    uint64_t v11 = 4294954511;
  }
  else
  {
    if (*(unsigned char *)(v7 + 72)) {
      uint64_t v13 = *(void *)(v7 + 16);
    }
    else {
      uint64_t v13 = *(void *)(v7 + 8);
    }
    uint64_t v14 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    if (*v15 >= 4uLL && (uint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, const __CFDictionary *))v15[12]) != 0)
    {
      uint64_t v11 = v16(v13, a2, a3);
      if (!Value) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v11 = 4294954514;
      if (!Value) {
        goto LABEL_7;
      }
    }
    CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v19 = CFDateCreate(v17, Current);
    double TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(Value, v19);
    if (TimeIntervalSinceDate > 0.0
      && (double v21 = TimeIntervalSinceDate,
          uint64_t v22 = (dispatch_source_t *)(v7 + 128),
          StopAndReleaseTimer((dispatch_object_t *)(v7 + 128)),
          global_queue = dispatch_get_global_queue(0, 0),
          CFMutableDictionaryRef v24 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, global_queue),
          (*(void *)(v7 + 128) = v24) != 0))
    {
      if (*(void *)(v7 + 40))
      {
        CFRetain(*(CFTypeRef *)(v7 + 40));
        CFMutableDictionaryRef v24 = *(NSObject **)(v7 + 128);
        CFDictionaryRef v25 = *(void **)(v7 + 40);
      }
      else
      {
        CFDictionaryRef v25 = 0;
      }
      dispatch_set_context(v24, v25);
      int v26 = *v22;
      dispatch_time_t v27 = dispatch_time(0, (uint64_t)(v21 * 1000000000.0));
      dispatch_source_set_timer(v26, v27, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
      dispatch_source_set_event_handler_f(*v22, (dispatch_function_t)RenewalTimerCallback);
      dispatch_source_set_cancel_handler_f(*v22, (dispatch_function_t)FigCFRelease);
      dispatch_resume(*v22);
      uint64_t v11 = 0;
      if (!v19) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
      if (!v19) {
        goto LABEL_7;
      }
    }
    CFRelease(v19);
  }
LABEL_7:
  MEMORY[0x19970E930](*(void *)(v7 + 32));
LABEL_8:
  PKDDispatchKeyResponseNotification(a1, v11, v10, v9);
  return v11;
}

uint64_t FigPKDOctaviaCPECryptorGetSerializationToken(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 4294955146;
  }
  uint64_t v4 = DerivedStorage;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  if (*(unsigned char *)(v4 + 24))
  {
    uint64_t v5 = 4294954511;
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t v7 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    if (*v8 >= 4uLL && (BOOL v9 = (uint64_t (*)(uint64_t, uint64_t))v8[13]) != 0) {
      uint64_t v5 = v9(v6, a2);
    }
    else {
      uint64_t v5 = 4294954514;
    }
  }
  MEMORY[0x19970E930](*(void *)(v4 + 32));
  return v5;
}

uint64_t FigPKDOctaviaCPECryptorTestAndSetKeyRequestState(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = 0;
  char v30 = 0;
  uint64_t v11 = 4294955136;
  if (a2 && a3)
  {
    uint64_t v12 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
    if (*(unsigned char *)(v12 + 24))
    {
      uint64_t v10 = 0;
      uint64_t v11 = 4294954511;
      goto LABEL_37;
    }
    if (*(unsigned char *)(v12 + 72))
    {
      uint64_t v13 = *(void *)(v12 + 16);
      uint64_t v14 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      if (*v15 < 6uLL || (CFDateRef v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, void))v15[20]) == 0)
      {
        uint64_t v10 = 0;
        uint64_t v11 = 4294954514;
        goto LABEL_37;
      }
      uint64_t v11 = v19(v13, a2, a3, &v30, 0);
    }
    else
    {
      uint64_t v16 = *(void *)(v12 + 8);
      CFAllocatorRef v17 = *(void **)(CMBaseObjectGetVTable() + 16);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      if (*v18 < 6uLL
        || (uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, char *, void))v18[20]) == 0
        || (uint64_t v21 = v20(v16, a2, a3, &v30, 0), v21 == -12036)
        || (uint64_t v11 = v21, v21 == -12782))
      {
        if (*(_DWORD *)(v12 + 96) == a2)
        {
          *(_DWORD *)(v12 + 96) = a3;
          char v30 = 1;
        }
        if (a3 >= a2) {
          goto LABEL_33;
        }
        CFTypeRef cf = 0;
        uint64_t v22 = *(void *)(v12 + 8);
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        CFDictionaryRef v25 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v24 + 48);
        if (v25)
        {
          int v26 = v25(v22, *MEMORY[0x1E4F1FDF0], *MEMORY[0x1E4F1CF80], &cf);
          uint64_t v11 = 0;
          CFTypeRef v27 = cf;
          if (!v26 && cf == (CFTypeRef)*MEMORY[0x1E4F1CFC8])
          {
            uint64_t v11 = ResetRemoteCryptor();
            CFTypeRef v27 = cf;
          }
          if (v27) {
            CFRelease(v27);
          }
        }
        else
        {
          uint64_t v11 = 0;
        }
      }
    }
    if (!v11)
    {
LABEL_33:
      if (v30)
      {
        *(_DWORD *)(v12 + 96) = a3;
        if (a3 == 2)
        {
          *(void *)(v12 + 136) = PKDGetNewRequestID();
          StopAndReleaseTimer((dispatch_object_t *)(v12 + 128));
        }
      }
      uint64_t v11 = 0;
      uint64_t v10 = *(void *)(v12 + 136);
      goto LABEL_37;
    }
    uint64_t v10 = 0;
LABEL_37:
    MEMORY[0x19970E930](*(void *)(v12 + 32));
  }
  if (a4) {
    *a4 = v30;
  }
  if (a5) {
    *a5 = v10;
  }
  return v11;
}

void __FigPKDOctaviaCPECryptorCreateKeyRequest_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v6 = *(void **)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  if (*v7 >= 4uLL && (uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v7[11]) != 0) {
    int v9 = v8(v2, v4, v3, v5 + 24);
  }
  else {
    int v9 = -12782;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v9;
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    int v10 = *(_DWORD *)(a1 + 72);
    CFDataRef v11 = *(const __CFData **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    memset(length, 0, sizeof(length));
    if (v10
      && v11
      && (BytePtr = CFDataGetBytePtr(v11),
          int v13 = CFDataGetLength(v11),
          !f5zGmdURga6BZ(v10, (uint64_t)BytePtr, v13, (uint64_t)&length[1], (uint64_t)length)))
    {
      CFDataRef v14 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(const UInt8 **)&length[1], length[0]);
      Ud5PNQt99i(*(uint64_t *)&length[1]);
      if (v14) {
        int v15 = 0;
      }
      else {
        int v15 = FigSignalErrorAt();
      }
    }
    else
    {
      int v15 = FigSignalErrorAt();
      CFDataRef v14 = 0;
    }
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v15;
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
      CFAllocatorRef v17 = *(const void **)(v16 + 24);
      *(void *)(v16 + 24) = v14;
      if (v14) {
        CFRetain(v14);
      }
      if (v17) {
        CFRelease(v17);
      }
    }
    if (v14) {
      CFRelease(v14);
    }
  }
}

void __FigPKDOctaviaCPECryptorCreateKeyRequest_block_invoke_2(void *a1)
{
  uint64_t v1 = a1[4];
  if (!*(unsigned char *)(v1 + 73))
  {
    CFTypeRef cf = 0;
    uint64_t v3 = *(void *)(v1 + 16);
    uint64_t v4 = a1[5];
    uint64_t v5 = a1[6];
    uint64_t v6 = *(void **)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    if (*v7 >= 4uLL && (uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, CFTypeRef *))v7[11]) != 0)
    {
      int v9 = v8(v3, v4, v5, &cf);
      CFTypeRef v10 = cf;
      uint64_t v11 = a1[4];
      *(_DWORD *)(v11 + 76) = v9;
      *(unsigned char *)(v11 + 73) = 1;
      if (v10) {
        CFRelease(v10);
      }
    }
    else
    {
      uint64_t v12 = a1[4];
      *(_DWORD *)(v12 + 76) = -12782;
      *(unsigned char *)(v12 + 73) = 1;
    }
  }
}

void RenewalTimerCallback()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    uint64_t v1 = (const void *)v0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
    if (!*(unsigned char *)(DerivedStorage + 24))
    {
      StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 128));
      dispatch_get_global_queue(0, 0);
      CMNotificationCenterGetDefaultLocalCenter();
      FigDispatchAsyncPostNotification();
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
    CFRelease(v1);
  }
}

uint64_t ResetRemoteCryptor()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime values = 0;
  uint64_t v9 = 0;
  CFTypeRef cf = 0;
  uint64_t CFNumberFromRemoteObjectRef = FigCPEOctaviaPKDMovieIDGetSerializationToken(*(void *)(DerivedStorage + 48), (uint64_t)&v9);
  if (CFNumberFromRemoteObjectRef
    || (uint64_t CFNumberFromRemoteObjectRef = FigTransportCreateCFNumberFromRemoteObjectRef(),
        CFNumberFromRemoteObjectRef))
  {
    uint64_t v5 = CFNumberFromRemoteObjectRef;
    CFDictionaryRef v2 = 0;
  }
  else
  {
    CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kFigCPENeroKey_MovieIDSerializationToken, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v2)
    {
      uint64_t v3 = FigOctaviaCPECryptorCreate(*(const void **)DerivedStorage, *(const void **)(DerivedStorage + 104), *(void **)(DerivedStorage + 112), v2, *(void *)(DerivedStorage + 120), *(const void **)(*(void *)(DerivedStorage + 48) + 88), &cf);
      if (!v3)
      {
        CMNotificationCenterGetDefaultLocalCenter();
        uint64_t v3 = CMNotificationCenterAddListener();
        if (!v3)
        {
          if (*(void *)(DerivedStorage + 8))
          {
            CMNotificationCenterGetDefaultLocalCenter();
            CMNotificationCenterRemoveListener();
            uint64_t v4 = *(const void **)(DerivedStorage + 8);
            if (v4) {
              CFRelease(v4);
            }
          }
          uint64_t v5 = 0;
          *(void *)(DerivedStorage + 8) = cf;
          CFTypeRef cf = 0;
          goto LABEL_10;
        }
      }
      uint64_t v5 = v3;
    }
    else
    {
      uint64_t v5 = 4294955145;
    }
  }
  if (cf) {
    CFRelease(cf);
  }
LABEL_10:
  if (values) {
    CFRelease(values);
  }
  if (v2) {
    CFRelease(v2);
  }
  return v5;
}

uint64_t RegisterFigReportingSessionStatsBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigReportingSessionStatsCreate(void *a1)
{
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a1) {
    return 4294955296;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigReportingSessionStatsGetClassID_sRegisterFigReportingSessionStatsOnce, RegisterFigReportingSessionStatsBaseType);
  uint64_t v3 = CMDerivedObjectCreate();
  if (v3) {
    return v3;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955295;
  }
  uint64_t v5 = (void *)DerivedStorage;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v2, 0, MEMORY[0x1E4F1D530], 0);
  void *v5 = Mutable;
  if (!Mutable) {
    return 4294955295;
  }
  uint64_t v3 = FigReportingStatsCreate(v5 + 2);
  if (v3) {
    return v3;
  }
  uint64_t v7 = FigReportingStatsCreate(v5 + 1);
  if (!v7) {
    *a1 = 0;
  }
  return v7;
}

CFStringRef FigReportingSessionStatsCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigReportingSessionStats %p]", a1);
}

void sessionStatsFinalize()
{
  uint64_t DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    CFDictionaryRef v2 = *DerivedStorage;
    if (v2)
    {
      CFDictionaryApplyFunction(v2, (CFDictionaryApplierFunction)fss_releaseStatDictionaryApplier, 0);
      CFRelease(*v1);
    }
    FigReportingStatsDestroy((uint64_t)v1[2]);
    uint64_t v3 = (uint64_t)v1[1];
    FigReportingStatsDestroy(v3);
  }
}

__CFString *sessionStatsCopyDebugDescription()
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigReportingSessionStats : ");
  return Mutable;
}

void fss_releaseStatDictionaryApplier(uint64_t a1, uint64_t a2)
{
  if (a2) {
    FigReportingStatsDestroy(a2);
  }
}

uint64_t sessionStatsCopyPeriodicStatsValuesForKeys(uint64_t a1, const __CFArray *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955296;
  if (a3 && a2)
  {
    if (DerivedStorage)
    {
      fss_copyAggregatedStats(*(void *)(DerivedStorage + 16), a2, a3);
      return 0;
    }
  }
  return result;
}

uint64_t sessionStatsCopySessionAggregateStatsValuesForKeys(uint64_t a1, const __CFArray *a2, const __CFArray *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955296;
  if (a3 && a2)
  {
    if (DerivedStorage)
    {
      fss_copyAggregatedStats(*(void *)(DerivedStorage + 8), a2, a3);
      return 0;
    }
  }
  return result;
}

uint64_t sessionStatsCopySessionArraysForKeys(uint64_t a1, const __CFArray *a2, __CFDictionary *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955296;
  if (a3 && a2 && DerivedStorage)
  {
    if (CFArrayGetCount(a2) >= 1)
    {
      CFIndex v7 = 0;
      do
      {
        CFArrayRef ValueAtIndex = (const __CFString **)CFArrayGetValueAtIndex(a2, v7);
        if (ValueAtIndex) {
          FigReportingStatsCopyArrayAndSetInDictionary(*(void *)(DerivedStorage + 8), *ValueAtIndex, a3);
        }
        ++v7;
      }
      while (v7 < CFArrayGetCount(a2));
    }
    return 0;
  }
  return result;
}

uint64_t sessionStatsCopyValuesForKeys(uint64_t a1, const __CFArray *a2, const __CFArray *a3, __CFDictionary *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955296;
  if (a4 && a2 && DerivedStorage)
  {
    v15[0] = a2;
    v15[1] = a4;
    CFDictionaryApplyFunction(*(CFDictionaryRef *)DerivedStorage, (CFDictionaryApplierFunction)fss_fetchEventStatsAndSetInDictionary, v15);
    if (a3 && CFArrayGetCount(a2) >= 1)
    {
      CFIndex v9 = 0;
      while (1)
      {
        CFArrayRef ValueAtIndex = (const void **)CFArrayGetValueAtIndex(a2, v9);
        if (ValueAtIndex)
        {
          uint64_t v11 = (__CFString **)ValueAtIndex;
          if (!CFDictionaryContainsKey(a4, *ValueAtIndex))
          {
            CFStringRef v12 = *v11;
            if (CFArrayGetCount(a3) >= 1)
            {
              CFIndex v13 = 0;
              while (1)
              {
                CFDataRef v14 = (CFStringRef *)CFArrayGetValueAtIndex(a3, v13);
                if (v14)
                {
                  if (CFEqual(*v14, v12)) {
                    break;
                  }
                }
                if (++v13 >= CFArrayGetCount(a3)) {
                  goto LABEL_9;
                }
              }
              uint64_t result = FigReportingStatsCopyAsCFTypeAndSetInDictionary(*(void *)(DerivedStorage + 8), *v11, a4);
              if (result)
              {
                if (result != -12005) {
                  break;
                }
              }
            }
          }
        }
LABEL_9:
        if (++v9 >= CFArrayGetCount(a2)) {
          return 0;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sessionStatsGetAggregatedIntValue(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955296;
  }
  if (!a2)
  {
    uint64_t v8 = (uint64_t *)(DerivedStorage + 16);
    goto LABEL_7;
  }
  if (a2 != 1) {
    return 4294955296;
  }
  uint64_t v8 = (uint64_t *)(DerivedStorage + 8);
LABEL_7:
  uint64_t v10 = *v8;

  return FigReportingStatsGetIntValue(v10, a3, a4);
}

uint64_t sessionStatsGetAggregatedCountValue(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955296;
  }
  if (!a2)
  {
    uint64_t v8 = (uint64_t *)(DerivedStorage + 16);
    goto LABEL_7;
  }
  if (a2 != 1) {
    return 4294955296;
  }
  uint64_t v8 = (uint64_t *)(DerivedStorage + 8);
LABEL_7:
  uint64_t v10 = *v8;

  return FigReportingStatsGetCountValue(v10, a3, a4);
}

uint64_t sessionStatsCopyAggregatedCFTypeValue(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t result = 4294955296;
  if (a4 && DerivedStorage)
  {
    if (a2)
    {
      if (a2 != 1) {
        return result;
      }
      CFIndex v9 = (uint64_t *)(DerivedStorage + 8);
    }
    else
    {
      CFIndex v9 = (uint64_t *)(DerivedStorage + 16);
    }
    uint64_t result = FigReportingStatsGetCFTypeValue(*v9, a3, &cf);
    if (!result)
    {
      if (cf) {
        CFTypeRef v10 = CFRetain(cf);
      }
      else {
        CFTypeRef v10 = 0;
      }
      uint64_t result = 0;
      *a4 = v10;
    }
  }
  return result;
}

uint64_t sessionStatsAddToCountValue(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 0;
  *(void *)CFTypeRef v10 = 0;
  if (a3)
  {
    if (DerivedStorage)
    {
      uint64_t result = fss_getOrCreateNewReportingStatsForReportingStatsKey((CFDictionaryRef *)DerivedStorage, a2, v10);
      if (!result)
      {
        uint64_t result = FigReportingStatsAddToCountValue(*(uint64_t *)v10, a3, a4);
        if (!result)
        {
          uint64_t result = FigReportingStatsAddToCountValue(*(void *)(DerivedStorage + 16), a3, a4);
          if (!result)
          {
            uint64_t v9 = *(void *)(DerivedStorage + 8);
            return FigReportingStatsAddToCountValue(v9, a3, a4);
          }
        }
      }
    }
  }
  return result;
}

CFDictionaryRef *sessionStatsUpdateSampleValue(uint64_t a1, void *a2, void *a3, unint64_t a4)
{
  uint64_t result = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  *(void *)CFTypeRef v10 = 0;
  if (result)
  {
    uint64_t v8 = result;
    uint64_t result = (CFDictionaryRef *)fss_getOrCreateNewReportingStatsForReportingStatsKey(result, a2, v10);
    if (!result)
    {
      uint64_t result = (CFDictionaryRef *)FigReportingStatsUpdateSampleValue(*(uint64_t *)v10, a3, a4);
      if (!result)
      {
        uint64_t result = (CFDictionaryRef *)FigReportingStatsUpdateSampleValue((uint64_t)v8[2], a3, a4);
        if (!result)
        {
          uint64_t v9 = (uint64_t)v8[1];
          return (CFDictionaryRef *)FigReportingStatsUpdateSampleValue(v9, a3, a4);
        }
      }
    }
  }
  return result;
}

CFDictionaryRef *sessionStatsSetCFTypeValue(uint64_t a1, void *a2, void *a3, const void *a4)
{
  *(void *)uint64_t v9 = 0;
  uint64_t result = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v8 = (uint64_t)result;
    uint64_t result = (CFDictionaryRef *)fss_getOrCreateNewReportingStatsForReportingStatsKey(result, a2, v9);
    if (!result)
    {
      uint64_t result = (CFDictionaryRef *)FigReportingStatsSetCFTypeValue(*(uint64_t *)v9, a3, a4);
      if (!result)
      {
        return (CFDictionaryRef *)fss_updateAggregatedCFTypeStat(v8, a3, a4);
      }
    }
  }
  return result;
}

CFDictionaryRef *sessionStatsSetIntValue(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t result = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  *(void *)CFTypeRef v10 = 0;
  if (result)
  {
    uint64_t v8 = result;
    uint64_t result = (CFDictionaryRef *)fss_getOrCreateNewReportingStatsForReportingStatsKey(result, a2, v10);
    if (!result)
    {
      uint64_t result = (CFDictionaryRef *)FigReportingStatsSetValue(*(uint64_t *)v10, a3, a4);
      if (!result)
      {
        uint64_t result = (CFDictionaryRef *)FigReportingStatsSetValue((uint64_t)v8[2], a3, a4);
        if (!result)
        {
          uint64_t v9 = (uint64_t)v8[1];
          return (CFDictionaryRef *)FigReportingStatsSetValue(v9, a3, a4);
        }
      }
    }
  }
  return result;
}

uint64_t sessionStatsAppendValuesToArrays(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955296;
  if (a2 && DerivedStorage)
  {
    if (CFArrayGetCount(a2) >= 1)
    {
      CFIndex v5 = 0;
      do
      {
        CFArrayRef ValueAtIndex = (__CFString **)CFArrayGetValueAtIndex(a2, v5);
        if (ValueAtIndex) {
          FigReportingStatsCopyAsCFTypeAndAppendToArray(*(void *)(DerivedStorage + 8), *ValueAtIndex);
        }
        ++v5;
      }
      while (v5 < CFArrayGetCount(a2));
    }
    return 0;
  }
  return result;
}

uint64_t sessionStatsResetValue(uint64_t a1, const void *a2, void *a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    if (a2 && (CFDictionaryRef v6 = *(const __CFDictionary **)result) != 0)
    {
      CFDateRef Value = CFDictionaryGetValue(v6, a2);
      if (Value)
      {
        FigReportingStatsResetValue((uint64_t)Value, a3);
        return 0;
      }
      else
      {
        return 4294955291;
      }
    }
    else
    {
      return 4294955296;
    }
  }
  return result;
}

uint64_t sessionStatsResetArray(uint64_t a1, const __CFString *a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v4 = *(void *)(result + 8);
    return FigReportingStatsResetArray(v4, a2);
  }
  return result;
}

uint64_t sessionStatsGetArrayCount(uint64_t a1, const __CFString *a2, void *a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  CFIndex v6 = 0;
  *a3 = 0;
  if (result)
  {
    uint64_t result = FigReportingStatsGetArrayCount(*(void *)(result + 8), a2, &v6);
    if (!result) {
      *a3 = v6;
    }
  }
  return result;
}

uint64_t sessionStatsPeriodicStatsResetValue(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955296;
  }
  FigReportingStatsResetValue(*(void *)(DerivedStorage + 16), a2);
  return 0;
}

uint64_t sessionStatsPeriodicStatsResetValuesForKeys(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = 4294955296;
  if (a2 && DerivedStorage)
  {
    uint64_t v5 = *(void *)(DerivedStorage + 16);
    if (CFArrayGetCount(a2) >= 1)
    {
      CFIndex v6 = 0;
      do
      {
        CFArrayRef ValueAtIndex = (void **)CFArrayGetValueAtIndex(a2, v6);
        if (ValueAtIndex) {
          FigReportingStatsResetValue(v5, *ValueAtIndex);
        }
        ++v6;
      }
      while (v6 < CFArrayGetCount(a2));
    }
    return 0;
  }
  return result;
}

uint64_t sessionStatsGetIntValue(uint64_t a1, const void *a2, void *a3, void *a4)
{
  context[1] = a4;
  uint64_t v12 = 0;
  context[0] = a3;
  uint64_t DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  uint64_t result = 0;
  if (a4 && DerivedStorage)
  {
    CFDictionaryRef v9 = *DerivedStorage;
    if (a2)
    {
      if (v9)
      {
        CFDateRef Value = CFDictionaryGetValue(v9, a2);
        if (Value)
        {
          return FigReportingStatsGetIntValue((uint64_t)Value, a3, a4);
        }
        else
        {
          return 4294955291;
        }
      }
      else
      {
        return 4294955296;
      }
    }
    else
    {
      CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)fss_getIntValueDictApplier, context);
      return HIDWORD(v12);
    }
  }
  return result;
}

uint64_t sessionStatsGetCFTypeValue(uint64_t a1, const void *a2, void *a3, void *a4)
{
  context[1] = a4;
  uint64_t v12 = 0;
  context[0] = a3;
  uint64_t DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  uint64_t result = 0;
  if (a4 && DerivedStorage)
  {
    CFDictionaryRef v9 = *DerivedStorage;
    if (a2)
    {
      if (v9)
      {
        CFDateRef Value = CFDictionaryGetValue(v9, a2);
        if (Value)
        {
          return FigReportingStatsGetCFTypeValue((uint64_t)Value, a3, a4);
        }
        else
        {
          return 4294955291;
        }
      }
      else
      {
        return 4294955296;
      }
    }
    else
    {
      CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)fss_getCFTypeValueDictApplier, context);
      return HIDWORD(v12);
    }
  }
  return result;
}

uint64_t sessionStatsGetCountValue(uint64_t a1, const void *a2, void *a3, void *a4)
{
  context[1] = a4;
  uint64_t v12 = 0;
  context[0] = a3;
  uint64_t DerivedStorage = (const __CFDictionary **)CMBaseObjectGetDerivedStorage();
  uint64_t result = 0;
  if (a4 && DerivedStorage)
  {
    CFDictionaryRef v9 = *DerivedStorage;
    if (a2)
    {
      if (v9)
      {
        CFDateRef Value = CFDictionaryGetValue(v9, a2);
        if (Value)
        {
          return FigReportingStatsGetCountValue((uint64_t)Value, a3, a4);
        }
        else
        {
          return 4294955291;
        }
      }
      else
      {
        return 4294955296;
      }
    }
    else
    {
      CFDictionaryApplyFunction(v9, (CFDictionaryApplierFunction)fss_getCountValueDictApplier, context);
      return HIDWORD(v12);
    }
  }
  return result;
}

uint64_t sessionStatsResetAll(uint64_t a1, const void *a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    if (a2 && (CFDictionaryRef v4 = *(const __CFDictionary **)result) != 0)
    {
      CFDateRef Value = CFDictionaryGetValue(v4, a2);
      if (Value)
      {
        FigReportingStatsResetAll((uint64_t)Value);
        return 0;
      }
      else
      {
        return 4294955291;
      }
    }
    else
    {
      return 4294955296;
    }
  }
  return result;
}

uint64_t sessionStatsAggregateStatsResetValue(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955296;
  }
  FigReportingStatsResetValue(*(void *)(DerivedStorage + 8), a2);
  return 0;
}

uint64_t sessionStatsCopy(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  *(void *)CFDictionaryRef v9 = 0;
  uint64_t result = 4294955296;
  if (a3 && DerivedStorage && v5)
  {
    if (!*(void *)v5) {
      return 4294955296;
    }
    CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)v5, a3);
    if (Value)
    {
      *(void *)CFDictionaryRef v9 = Value;
    }
    else
    {
      uint64_t result = fss_getOrCreateNewReportingStatsForReportingStatsKey((CFDictionaryRef *)v5, a3, v9);
      if (result) {
        return result;
      }
    }
    if (*(void *)DerivedStorage) {
      uint64_t v8 = (const __CFDictionary **)CFDictionaryGetValue(*(CFDictionaryRef *)DerivedStorage, a3);
    }
    else {
      uint64_t v8 = 0;
    }
    FigReportingStatsCopy(*(void **)v9, v8);
    FigReportingStatsCopy(*(void **)(v5 + 8), *(const __CFDictionary ***)(DerivedStorage + 8));
    FigReportingStatsCopy(*(void **)(v5 + 16), *(const __CFDictionary ***)(DerivedStorage + 16));
    return 0;
  }
  return result;
}

uint64_t sessionStatsAppendValueToArray(uint64_t a1, void *a2, void *a3, const void *a4, int a5)
{
  CFArrayRef theArray = 0;
  uint64_t v22 = 0;
  uint64_t DerivedStorage = (CFDictionaryRef *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294955296;
  }
  uint64_t v10 = (uint64_t)DerivedStorage;
  uint64_t v11 = fss_getOrCreateNewReportingStatsForReportingStatsKey(DerivedStorage, a2, &v22);
  if (v11) {
    return v11;
  }
  uint64_t v12 = v22;
  CFTypeCFDateRef Value = FigReportingStatsGetCFTypeValue(v22, a3, &theArray);
  CFArrayRef v14 = theArray;
  if (a5 >= 1)
  {
    if (theArray) {
      CFIndex Count = CFArrayGetCount(theArray);
    }
    else {
      CFIndex Count = 0;
    }
    if (Count >= a5) {
      return CFTypeValue;
    }
    CFArrayRef v14 = theArray;
  }
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v14) {
    MutableCopCGFloat y = CFArrayCreateMutableCopy(v16, 0, v14);
  }
  else {
    MutableCopCGFloat y = CFArrayCreateMutable(v16, 0, MEMORY[0x1E4F1D510]);
  }
  uint64_t v18 = MutableCopy;
  if (MutableCopy)
  {
    CFArrayAppendValue(MutableCopy, a4);
    uint64_t updated = FigReportingStatsSetCFTypeValue(v12, a3, v18);
    if (!updated) {
      uint64_t updated = fss_updateAggregatedCFTypeStat(v10, a3, v18);
    }
    CFTypeCFDateRef Value = updated;
    CFRelease(v18);
  }
  return CFTypeValue;
}

uint64_t sessionStatsFreezeKeys(uint64_t a1, const void *a2, const __CFSet *a3)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    if (a2 && (CFDictionaryRef v6 = *(const __CFDictionary **)result) != 0)
    {
      CFDateRef Value = CFDictionaryGetValue(v6, a2);
      if (Value)
      {
        return FigReportingStatsFreezeKeys((uint64_t)Value, a3);
      }
      else
      {
        return 4294955291;
      }
    }
    else
    {
      return 4294955296;
    }
  }
  return result;
}

double fss_copyAggregatedStats(uint64_t a1, const __CFArray *a2, const __CFArray *a3)
{
  v6[0] = a2;
  v6[1] = a3;
  FigBytePumpGetFigBaseObject(a1);
  fss_fetchEventStatsAndSetInDictionary(v4, a1, v6);

  return FigBytePumpGetFigBaseObject(a1);
}

void fss_fetchEventStatsAndSetInDictionary(uint64_t a1, uint64_t a2, CFArrayRef *a3)
{
  CFArrayRef v3 = *a3;
  if (*a3 && CFArrayGetCount(*a3) >= 1)
  {
    CFIndex v6 = 0;
    do
    {
      CFArrayRef ValueAtIndex = (__CFString **)CFArrayGetValueAtIndex(v3, v6);
      if (ValueAtIndex) {
        FigReportingStatsCopyAsCFTypeAndSetInDictionary(a2, *ValueAtIndex, a3[1]);
      }
      ++v6;
    }
    while (v6 < CFArrayGetCount(v3));
  }
}

uint64_t fss_getOrCreateNewReportingStatsForReportingStatsKey(CFDictionaryRef *a1, void *key, void *a3)
{
  CMTimeValue value = 0;
  uint64_t result = 4294955296;
  if (a1 && key)
  {
    if (!*a1) {
      return 4294955296;
    }
    CFIndex v7 = (void *)CFDictionaryGetValue(*a1, key);
    if (v7)
    {
LABEL_5:
      uint64_t result = 0;
      *a3 = v7;
      return result;
    }
    uint64_t result = FigReportingStatsCreate(&value);
    if (!result)
    {
      if (!value) {
        return 4294955294;
      }
      CFDictionarySetValue(*a1, key, value);
      CFIndex v7 = value;
      goto LABEL_5;
    }
  }
  return result;
}

uint64_t fss_updateAggregatedCFTypeStat(uint64_t a1, void *a2, const void *a3)
{
  uint64_t result = FigReportingStatsSetCFTypeValue(*(void *)(a1 + 16), a2, a3);
  if (!result)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    return FigReportingStatsSetCFTypeValue(v7, a2, a3);
  }
  return result;
}

void fss_getIntValueDictApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 && !*(unsigned char *)(a3 + 16))
  {
    IntCFDateRef Value = FigReportingStatsGetIntValue(a2, *(void **)a3, *(void **)(a3 + 8));
    *(_DWORD *)(a3 + 20) = IntValue;
    if (!IntValue) {
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
}

void fss_getCFTypeValueDictApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 && !*(unsigned char *)(a3 + 16))
  {
    CFTypeCFDateRef Value = FigReportingStatsGetCFTypeValue(a2, *(void **)a3, *(void **)(a3 + 8));
    *(_DWORD *)(a3 + 20) = CFTypeValue;
    if (!CFTypeValue) {
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
}

void fss_getCountValueDictApplier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 && !*(unsigned char *)(a3 + 16))
  {
    CountCFDateRef Value = FigReportingStatsGetCountValue(a2, *(void **)a3, *(void **)(a3 + 8));
    *(_DWORD *)(a3 + 20) = CountValue;
    if (!CountValue) {
      *(unsigned char *)(a3 + 16) = 1;
    }
  }
}

uint64_t BVCUtilityGetVectorsFromTransform(double *a1, _DWORD *a2, _DWORD *a3)
{
  double v4 = *a1;
  double v3 = a1[1];
  double v6 = a1[2];
  double v5 = a1[3];
  double v8 = a1[4];
  double v7 = a1[5];
  double v9 = v8 + v6 * 0.0 + *a1 * 0.0;
  double v10 = v7 + v5 * 0.0 + v3 * 0.0;
  if (a2)
  {
    double v11 = v8 + v4 + v6 * 0.0;
    if (vabdd_f64(v11, v9) > 32767.0) {
      return FigSignalErrorAt();
    }
    double v12 = v7 + v3 + v5 * 0.0;
    if (vabdd_f64(v12, v10) > 32767.0) {
      return FigSignalErrorAt();
    }
    *a2 = vcvtd_n_s64_f64(v11 - v9, 0x10uLL);
    a2[1] = vcvtd_n_s64_f64(v12 - v10, 0x10uLL);
  }
  if (!a3) {
    return 0;
  }
  double v13 = v8 + v6 + v4 * 0.0;
  if (vabdd_f64(v13, v9) <= 32767.0)
  {
    double v14 = v7 + v5 + v3 * 0.0;
    if (vabdd_f64(v14, v10) <= 32767.0)
    {
      *a3 = vcvtd_n_s64_f64(v13 - v9, 0x10uLL);
      a3[1] = vcvtd_n_s64_f64(v14 - v10, 0x10uLL);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t BVCUtilityCreateEdgeLists(float64x2_t *a1, char **a2, void *a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, double a11)
{
  uint64_t v122 = *MEMORY[0x1E4F143B8];
  BOOL v116 = 0;
  size_t v117 = 0;
  float64x2_t v20 = a1[1];
  float64x2_t v118 = *a1;
  float64x2_t v119 = v20;
  float64x2_t v120 = a1[2];
  if (!BVCUtilityIsAffineTransformInvertible(v118.f64))
  {
    CFTypeRef v61 = 0;
    CFTypeRef v63 = 0;
    uint64_t v24 = 0;
    if (a2) {
      goto LABEL_154;
    }
    goto LABEL_155;
  }
  uint64_t v112 = a2;
  CMSampleBufferRef v113 = a3;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  float64x2_t v25 = *a1;
  float64x2_t v26 = a1[1];
  float64x2_t v27 = a1[2];
  float64x2_t v28 = vmulq_n_f64(v26, a5);
  float64x2_t v29 = vaddq_f64(v27, vmlaq_n_f64(v28, *a1, a4));
  float64x2_t v30 = vaddq_f64(v27, vmlaq_n_f64(v28, *a1, a4 + a6));
  float64x2_t v118 = v29;
  float64x2_t v119 = v30;
  int v31 = 0x7FFFFFFF;
  float64x2_t v120 = vaddq_f64(v27, vmlaq_n_f64(vmulq_n_f64(v26, a5 + a7), v25, a4 + a6));
  float64x2_t v121 = vsubq_f64(vaddq_f64(v29, v120), v30);
  uint64_t v32 = 1;
  do
  {
    int v33 = v22;
    uint64_t v22 = (char *)malloc_type_calloc(1uLL, 0x1CuLL, 0x102004076C0B35AuLL);
    if (!v22)
    {
      BOOL v116 = v24;
LABEL_108:
      uint64_t v87 = FigSignalErrorAt();
      CFTypeRef v63 = 0;
      uint64_t v24 = 0;
      goto LABEL_109;
    }
    uint64_t v34 = v22;
    if (v23)
    {
      *(void *)(v33 + 20) = v22;
      uint64_t v34 = v23;
    }
    uint64_t v23 = v34;
    double v35 = v118.f64[v32];
    uint64_t v36 = v21 + 1;
    LODWORD(v37) = (v21 + 1) & 3;
    double v38 = v118.f64[2 * ((v21 + 1) & 3) + 1];
    if (v35 <= v38) {
      uint64_t v39 = v21;
    }
    else {
      uint64_t v39 = v37;
    }
    if (v35 <= v38) {
      uint64_t v37 = v37;
    }
    else {
      uint64_t v37 = v21;
    }
    uint64_t v40 = &v118.f64[2 * v39];
    double v41 = *v40;
    signed int v42 = vcvtd_n_s64_f64(v40[1], 0x10uLL);
    unsigned int v43 = vcvtd_n_s64_f64(v118.f64[2 * v37 + 1], 0x10uLL);
    *(_DWORD *)uint64_t v22 = v42;
    *((_DWORD *)v22 + 1) = v43;
    *((_DWORD *)v22 + 2) = vcvtd_n_s64_f64(v41, 0x10uLL);
    int v44 = v43 - v42;
    if (v44 >= 0) {
      unsigned int v45 = v44;
    }
    else {
      unsigned int v45 = -v44;
    }
    if (v45 > 0x3F) {
      *((_DWORD *)v22 + 3) = (uint64_t)(v41 * -4294967300.0 + v118.f64[2 * v37] * 4294967300.0) / v44;
    }
    else {
      v22[16] = 1;
    }
    if (v31 > v42)
    {
      uint64_t v46 = v37 - 3;
      if (v37 < 3) {
        uint64_t v46 = v37 + 1;
      }
      if (v46 != v39)
      {
        uint64_t v47 = v39 < 3 ? v39 + 1 : v39 - 3;
        if (v47 == v37)
        {
          uint64_t v24 = v22;
          int v31 = v42;
        }
      }
    }
    v32 += 2;
    ++v21;
  }
  while (v36 != 4);
  BOOL v116 = v24;
  *(void *)(v22 + 20) = v23;
  if (!v24) {
    goto LABEL_108;
  }
  uint64_t v48 = *(void *)(v24 + 20);
  if (!v48) {
    goto LABEL_108;
  }
  uint64_t v49 = *(void *)(v48 + 20);
  if (!v49) {
    goto LABEL_108;
  }
  CFTypeID v50 = *(char **)(v49 + 20);
  if (!v50 || *(char **)(v50 + 20) != v24) {
    goto LABEL_108;
  }
  size_t v117 = *(char **)(v49 + 20);
  *(void *)(v50 + 20) = v49;
  *(void *)(*(void *)(v24 + 20) + 20) = 0;
  *(void *)(*(void *)(v50 + 20) + 20) = 0;
  double v51 = (a9 + a11) * 65536.0;
  CFDataRef v52 = (void **)&v117;
  char v53 = 1;
  do
  {
    char v54 = v53;
    if (v50)
    {
      uint64_t v55 = 0;
      do
      {
        while (1)
        {
          int v56 = *((_DWORD *)v50 + 1);
          double v57 = (double)*(int *)v50;
          if (a9 * 65536.0 >= v57) {
            double v57 = a9 * 65536.0;
          }
          int v58 = (int)v57;
          *((_DWORD *)v50 + 2) += (unint64_t)(*((int *)v50 + 3) * (uint64_t)((int)v57 - *(_DWORD *)v50)) >> 16;
          double v59 = (double)v56;
          if (v51 <= (double)v56) {
            double v59 = v51;
          }
          *(_DWORD *)CFTypeID v50 = v58;
          *((_DWORD *)v50 + 1) = (int)v59;
          if (v58 >= (int)v59 || v50[16]) {
            break;
          }
          uint64_t v55 = v50;
          CFTypeID v50 = *(char **)(v50 + 20);
          if (!v50) {
            goto LABEL_48;
          }
        }
        uint64_t v60 = *(char **)(v50 + 20);
        if (v55)
        {
          *(void *)(v55 + 20) = v60;
          uint64_t v60 = *(char **)(v50 + 20);
        }
        else
        {
          *CFDataRef v52 = v60;
        }
        free(v50);
        CFTypeID v50 = v60;
      }
      while (v60);
LABEL_48:
      uint64_t v24 = (char *)v116;
    }
    char v53 = 0;
    CFDataRef v52 = &v116;
    CFTypeID v50 = v24;
  }
  while ((v54 & 1) != 0);
  CFTypeRef v61 = v117;
  if (v117) {
    BOOL v62 = v24 == 0;
  }
  else {
    BOOL v62 = 1;
  }
  if (v62)
  {
    uint64_t v24 = 0;
    CFTypeRef v63 = 0;
    goto LABEL_153;
  }
  int v64 = *((_DWORD *)v117 + 2);
  int v65 = *((_DWORD *)v24 + 2);
  BOOL v66 = v64 <= v65;
  if (v64 == v65) {
    BOOL v66 = *((_DWORD *)v117 + 3) <= *((_DWORD *)v24 + 3);
  }
  int v67 = !v66;
  CFArrayRef v68 = 0;
  if (v67) {
    CFTypeRef v63 = v117;
  }
  else {
    CFTypeRef v63 = v24;
  }
  if (!v67) {
    uint64_t v24 = v117;
  }
  BOOL v116 = 0;
  size_t v117 = 0;
  signed int v69 = vcvtd_n_s64_f64(a8, 0x10uLL);
  signed int v70 = vcvtd_n_s64_f64(a8 + a10, 0x10uLL);
  CFDictionaryRef v71 = v24;
  while (2)
  {
    uint64_t v72 = *(char **)(v71 + 20);
    uint64_t v73 = *((int *)v71 + 3);
    if (!v73)
    {
      if (*((_DWORD *)v71 + 2) < v69) {
        *((_DWORD *)v71 + 2) = v69;
      }
      goto LABEL_86;
    }
    int v74 = *((_DWORD *)v71 + 2);
    uint64_t v75 = ((uint64_t)(v69 - v74) << 16) / v73;
    if ((v75 & 0x80000000) != 0 || (int v76 = *((_DWORD *)v71 + 1), v77 = *(_DWORD *)v71 + v75, v77 > v76))
    {
      if (v69 > v74)
      {
        *((_DWORD *)v71 + 2) = v69;
        *((_DWORD *)v71 + 3) = 0;
        signed int v78 = v69;
        goto LABEL_92;
      }
LABEL_86:
      uint64_t v82 = *((int *)v71 + 3);
      if (v82)
      {
        int v83 = *((_DWORD *)v71 + 2);
        uint64_t v84 = ((uint64_t)(v70 - v83) << 16) / v82;
        if ((v84 & 0x80000000) == 0)
        {
          int v85 = *(_DWORD *)v71 + v84;
          if (v85 <= *((_DWORD *)v71 + 1))
          {
            if ((v82 & 0x80000000) != 0)
            {
              *(_DWORD *)CFDictionaryRef v71 = v85;
              *((_DWORD *)v71 + 2) = v70;
            }
            else
            {
              *((_DWORD *)v71 + 1) = v85;
            }
            goto LABEL_97;
          }
        }
        if (v70 >= v83)
        {
LABEL_97:
          if (v68) {
            uint64_t v86 = v68;
          }
          else {
            uint64_t v86 = v24;
          }
          do
          {
            CFArrayRef v68 = v86;
            if (!v86) {
              break;
            }
            uint64_t v86 = *(char **)(v86 + 20);
          }
          while (v86 != v72);
          CFDictionaryRef v71 = v72;
          if (!v72) {
            goto LABEL_112;
          }
          continue;
        }
      }
      else
      {
        signed int v78 = *((_DWORD *)v71 + 2);
LABEL_92:
        if (v78 <= v70) {
          goto LABEL_97;
        }
      }
      if (v68) {
        *(void *)(v68 + 20) = *(void *)(v71 + 20);
      }
      else {
        uint64_t v24 = *(char **)(v71 + 20);
      }
      free(v71);
      goto LABEL_97;
    }
    break;
  }
  if ((int)v73 >= 1 && v75)
  {
    uint64_t v79 = (char *)malloc_type_calloc(1uLL, 0x1CuLL, 0x102004076C0B35AuLL);
    if (!v79) {
      goto LABEL_111;
    }
    *((_DWORD *)v79 + 2) = v69;
    *((_DWORD *)v79 + 3) = 0;
    *(_DWORD *)uint64_t v79 = *(_DWORD *)v71;
    *((_DWORD *)v79 + 1) = v77;
    *(_DWORD *)CFDictionaryRef v71 = v77;
    *((_DWORD *)v71 + 2) = v69;
    CFIndex v80 = v79;
    if (v68)
    {
      *(void *)(v68 + 20) = v79;
      CFIndex v80 = v24;
    }
    *(void *)(v79 + 20) = v71;
    uint64_t v24 = v80;
    goto LABEL_86;
  }
  if ((v73 & 0x80000000) == 0 || v76 == v77) {
    goto LABEL_86;
  }
  uint64_t v81 = (char *)malloc_type_calloc(1uLL, 0x1CuLL, 0x102004076C0B35AuLL);
  if (v81)
  {
    *((_DWORD *)v81 + 2) = v69;
    *((_DWORD *)v81 + 3) = 0;
    *(_DWORD *)uint64_t v81 = v77;
    *((_DWORD *)v81 + 1) = *((_DWORD *)v71 + 1);
    *((_DWORD *)v71 + 1) = v77;
    *(void *)(v81 + 20) = *(void *)(v71 + 20);
    *(void *)(v71 + 20) = v81;
    goto LABEL_86;
  }
LABEL_111:
  uint64_t v88 = FigSignalErrorAt();
  if (v88)
  {
    uint64_t v87 = v88;
    uint64_t v23 = 0;
    goto LABEL_109;
  }
LABEL_112:
  if (!v63)
  {
LABEL_152:
    CFTypeRef v61 = 0;
    goto LABEL_153;
  }
  CFDictionaryRef v89 = 0;
  CMTime v90 = v63;
  while (2)
  {
    unint64_t v91 = *(char **)(v90 + 20);
    uint64_t v92 = *((int *)v90 + 3);
    if (!v92)
    {
      if (*((_DWORD *)v90 + 2) > v70) {
        *((_DWORD *)v90 + 2) = v70;
      }
      goto LABEL_131;
    }
    int v93 = *((_DWORD *)v90 + 2);
    uint64_t v94 = ((uint64_t)(v70 - v93) << 16) / v92;
    if ((v94 & 0x80000000) != 0 || (int v95 = *((_DWORD *)v90 + 1), v96 = *(_DWORD *)v90 + v94, v96 > v95))
    {
      if (v70 < v93)
      {
        *((_DWORD *)v90 + 2) = v70;
        *((_DWORD *)v90 + 3) = 0;
        signed int v97 = v70;
        goto LABEL_137;
      }
LABEL_131:
      uint64_t v101 = *((int *)v90 + 3);
      if (v101)
      {
        int v102 = *((_DWORD *)v90 + 2);
        uint64_t v103 = ((uint64_t)(v69 - v102) << 16) / v101;
        if ((v103 & 0x80000000) == 0)
        {
          int v104 = *(_DWORD *)v90 + v103;
          if (v104 <= *((_DWORD *)v90 + 1))
          {
            if ((int)v101 < 1)
            {
              *((_DWORD *)v90 + 1) = v104;
            }
            else
            {
              *(_DWORD *)CMTime v90 = v104;
              *((_DWORD *)v90 + 2) = v69;
            }
            goto LABEL_142;
          }
        }
        if (v69 <= v102)
        {
LABEL_142:
          if (v89) {
            CMTime v105 = v89;
          }
          else {
            CMTime v105 = v63;
          }
          do
          {
            CFDictionaryRef v89 = v105;
            if (!v105) {
              break;
            }
            CMTime v105 = *(char **)(v105 + 20);
          }
          while (v105 != v91);
          CMTime v90 = v91;
          if (!v91) {
            goto LABEL_152;
          }
          continue;
        }
      }
      else
      {
        signed int v97 = *((_DWORD *)v90 + 2);
LABEL_137:
        if (v97 >= v69) {
          goto LABEL_142;
        }
      }
      if (v89) {
        *(void *)(v89 + 20) = *(void *)(v90 + 20);
      }
      else {
        CFTypeRef v63 = *(char **)(v90 + 20);
      }
      free(v90);
      goto LABEL_142;
    }
    break;
  }
  if ((v92 & 0x80000000) != 0 && v94)
  {
    CMTime v98 = (char *)malloc_type_calloc(1uLL, 0x1CuLL, 0x102004076C0B35AuLL);
    if (!v98) {
      goto LABEL_166;
    }
    *((_DWORD *)v98 + 2) = v70;
    *((_DWORD *)v98 + 3) = 0;
    *(_DWORD *)CMTime v98 = *(_DWORD *)v90;
    *((_DWORD *)v98 + 1) = v96;
    *(_DWORD *)CMTime v90 = v96;
    *((_DWORD *)v90 + 2) = v70;
    CMTime v99 = v98;
    if (v89)
    {
      *(void *)(v89 + 20) = v98;
      CMTime v99 = v63;
    }
    *(void *)(v98 + 20) = v90;
    CFTypeRef v63 = v99;
    goto LABEL_131;
  }
  if ((int)v92 < 1 || v95 == v96) {
    goto LABEL_131;
  }
  CMTime v100 = (char *)malloc_type_calloc(1uLL, 0x1CuLL, 0x102004076C0B35AuLL);
  if (v100)
  {
    *((_DWORD *)v100 + 2) = v70;
    *((_DWORD *)v100 + 3) = 0;
    *(_DWORD *)CMTime v100 = v96;
    *((_DWORD *)v100 + 1) = *((_DWORD *)v90 + 1);
    *((_DWORD *)v90 + 1) = v96;
    *(void *)(v100 + 20) = *(void *)(v90 + 20);
    *(void *)(v90 + 20) = v100;
    goto LABEL_131;
  }
LABEL_166:
  uint64_t v87 = FigSignalErrorAt();
  uint64_t v23 = 0;
  CFTypeRef v61 = 0;
  if (v87)
  {
LABEL_109:
    CFTypeRef v61 = v23;
    goto LABEL_157;
  }
LABEL_153:
  a2 = v112;
  a3 = v113;
  if (v112)
  {
LABEL_154:
    *a2 = v24;
    uint64_t v24 = 0;
  }
LABEL_155:
  uint64_t v87 = 0;
  if (a3)
  {
    *a3 = v63;
    CFTypeRef v63 = 0;
  }
LABEL_157:
  if (v61)
  {
    do
    {
      CMTime v106 = *(char **)(v61 + 20);
      free(v61);
      CFTypeRef v61 = v106;
    }
    while (v106);
  }
  CMTime v107 = (char *)v116;
  if (v116)
  {
    do
    {
      CFTypeRef v108 = *(char **)(v107 + 20);
      free(v107);
      CMTime v107 = v108;
    }
    while (v108);
  }
  if (v24)
  {
    do
    {
      CFTypeRef v109 = *(char **)(v24 + 20);
      free(v24);
      uint64_t v24 = v109;
    }
    while (v109);
  }
  if (v63)
  {
    do
    {
      int v110 = *(char **)(v63 + 20);
      free(v63);
      CFTypeRef v63 = v110;
    }
    while (v110);
  }
  return v87;
}

BOOL BVCUtilityIsAffineTransformInvertible(double *a1)
{
  BOOL result = 0;
  if (fabs(*a1) != INFINITY)
  {
    BOOL result = 0;
    double v3 = a1[1];
    if (fabs(v3) != INFINITY)
    {
      BOOL result = 0;
      double v4 = a1[2];
      if (fabs(v4) != INFINITY)
      {
        BOOL result = 0;
        double v5 = a1[3];
        if (fabs(v5) != INFINITY)
        {
          BOOL result = 0;
          if (fabs(a1[4]) != INFINITY)
          {
            BOOL result = 0;
            if (fabs(a1[5]) != INFINITY) {
              return fabs(*a1 * v5 - v3 * v4) >= 0.000001;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t BVCUtilityDestroyEdgeList(uint64_t result)
{
  if (result)
  {
    do
    {
      uint64_t v1 = *(void *)(result + 20);
      free((void *)result);
      BOOL result = v1;
    }
    while (v1);
  }
  return result;
}

uint64_t FigMetadataReaderGetTypeID()
{
  MEMORY[0x19970EE10](&FigMetadataReaderGetClassID_sRegisterFigMetadataReaderBaseTypeOnce, RegisterFigMetadataReaderBaseType);

  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigMetadataReaderRetain(CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  return cf;
}

void FigMetadataReaderRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFStringRef FigMetadataReaderBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigMetadataReader %p]", a1);
}

void FigEndpointStreamAudioEngineSbufTracerDebugPrint(CMAttachmentBearerRef target)
{
  if (FigEndpointStreamAudioEngineSbufTracerDebugPrint_sSetupLoggingOnce == -1)
  {
    if (!target) {
      return;
    }
  }
  else
  {
    dispatch_once(&FigEndpointStreamAudioEngineSbufTracerDebugPrint_sSetupLoggingOnce, &__block_literal_global_0);
    if (!target) {
      return;
    }
  }
  CFDictionaryRef v2 = (const __CFDictionary *)CMGetAttachment(target, @"SbufTracer", 0);
  if (v2)
  {
    CFDictionaryRef v3 = v2;
    CFDictionaryGetValue(v2, @"SbufTracerOption_UniqueID");
    CFDictionaryGetValue(v3, @"SbufTracerOption_SourceID");
  }
}

uint64_t __FigEndpointStreamAudioEngineSbufTracerDebugPrint_block_invoke()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();

  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t FigEndpointStreamAudioEngineGetClassID()
{
  if (FigEndpointStreamAudioEngineGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&FigEndpointStreamAudioEngineGetClassID_sRegisterOnce, &FigEndpointStreamAudioEngineGetClassID_sClassID, (dispatch_function_t)audioEngine_registerBaseClass);
  }
  return FigEndpointStreamAudioEngineGetClassID_sClassID;
}

uint64_t audioEngine_registerBaseClass()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigEndpointStreamAudioEngineGetTypeID()
{
  if (FigEndpointStreamAudioEngineGetClassID_sRegisterOnce != -1) {
    dispatch_once_f(&FigEndpointStreamAudioEngineGetClassID_sRegisterOnce, &FigEndpointStreamAudioEngineGetClassID_sClassID, (dispatch_function_t)audioEngine_registerBaseClass);
  }

  return CMBaseClassGetCFTypeID();
}

CFStringRef audioEngine_copyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigEndpointStreamAudioEngine %p]", a1);
}

uint64_t FigTimedMetadataRenderPipelineCreate(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  if (a2)
  {
    if (a4)
    {
      FigRenderPipelineGetClassID();
      uint64_t v8 = CMDerivedObjectCreate();
      if (v8) {
        goto LABEL_20;
      }
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      DerivedStorage[4] = a2;
      DerivedStorage[5] = a3;
      uint64_t v10 = FigReentrantMutexCreate();
      DerivedStorage[1] = v10;
      if (v10)
      {
        long long v17 = *MEMORY[0x1E4F1FA48];
        uint64_t v18 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        uint64_t v8 = FigSimpleRenderPipelineCreateWithCallback(a1, (uint64_t)tdrp_pipelineCallback, 0, (uint64_t)cf, (uint64_t)&v17, 0, DerivedStorage + 2);
        if (!v8)
        {
          uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(DerivedStorage[2]);
          uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v12) {
            uint64_t v13 = v12;
          }
          else {
            uint64_t v13 = 0;
          }
          double v14 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void *))(v13 + 48);
          if (v14)
          {
            uint64_t v15 = v14(FigBaseObject, @"SourceSampleBufferQueue", a1, DerivedStorage + 3);
            if (!v15)
            {
              CMNotificationCenterGetDefaultLocalCenter();
              CMNotificationCenterAddListener();
              *a4 = cf;
              return v15;
            }
          }
          else
          {
            uint64_t v15 = 4294954514;
          }
LABEL_13:
          if (cf) {
            CFRelease(cf);
          }
          return v15;
        }
LABEL_20:
        uint64_t v15 = v8;
        goto LABEL_13;
      }
    }
    uint64_t v8 = FigSignalErrorAt();
    goto LABEL_20;
  }

  return FigSignalErrorAt();
}

void tdrp_pipelineCallback(const void *a1, opaqueCMSampleBuffer *target)
{
  CFDictionaryRef v2 = target;
  if (CMGetAttachment(target, (CFStringRef)*MEMORY[0x1E4F1F258], 0)) {
    return;
  }
  SampleAttachmentsArraCGFloat y = CMSampleBufferGetSampleAttachmentsArray(v2, 0);
  LOBYTE(value[0]) = 0;
  if (SampleAttachmentsArray)
  {
    CFArrayRef v5 = SampleAttachmentsArray;
    if (CFArrayGetCount(SampleAttachmentsArray) > 0)
    {
      CFArrayGetValueAtIndex(v5, 0);
      FigCFDictionaryGetBooleanIfPresent();
    }
  }
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(v2);
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  if (MediaSubType <= 1768174367)
  {
    if (MediaSubType == 1701671783)
    {
      value[0] = 0;
      theArray.CMTimeValue value = 0;
      if (!v2) {
        return;
      }
      CFArrayRef v13 = CMSampleBufferGetSampleAttachmentsArray(v2, 0);
      if (!v13) {
        return;
      }
      CFArrayRef v14 = v13;
      if (CFArrayGetCount(v13) < 1) {
        return;
      }
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v14, 0);
      if (!ValueAtIndex) {
        return;
      }
      if (!CFDictionaryGetValueIfPresent(ValueAtIndex, (const void *)*MEMORY[0x1E4F219E8], (const void **)value)) {
        return;
      }
      if (!value[0]) {
        return;
      }
      CFDictionaryGetValueIfPresent((CFDictionaryRef)value[0], (const void *)*MEMORY[0x1E4F215C0], (const void **)&theArray);
      if (!theArray.value
        || CFStringCompare((CFStringRef)theArray.value, @"https://developer.apple.com/streaming/emsg-id3", 0)
        && CFStringCompare((CFStringRef)theArray.value, @"https://aomedia.org/emsg/ID3", 0))
      {
        return;
      }
LABEL_33:
      tdrp_ParseID3(a1, v2);
      return;
    }
    if (MediaSubType != 1768126752) {
      return;
    }
    theArray.CMTimeValue value = 0;
    value[0] = 0;
    value[1] = 0;
    if (!FigIcyMetadataParseSampleBuffer(v2, (CFTypeRef *)&theArray, (CFTypeRef *)value))
    {
      if (!theArray.value) {
        goto LABEL_92;
      }
      if (CFArrayGetCount((CFArrayRef)theArray.value) >= 1 && FigCFDictionaryGetCount() >= 1)
      {
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFIndex v10 = theArray.value ? CFArrayGetCount((CFArrayRef)theArray.value) : 0;
        value[1] = CFArrayCreateMutable(v9, v10, MEMORY[0x1E4F1D510]);
        FigCFArrayApplyFunction();
        if (value[1])
        {
          if (CFArrayGetCount((CFArrayRef)value[1]) >= 1)
          {
            int v33 = value[1];
            uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
            MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
            if (*(unsigned char *)DerivedStorage)
            {
              MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
            }
            else
            {
              uint64_t v36 = *(void (**)(void *, uint64_t))(DerivedStorage + 32);
              uint64_t v35 = *(void *)(DerivedStorage + 40);
              MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
              if (v36) {
                v36(v33, v35);
              }
            }
          }
        }
      }
    }
    if (theArray.value) {
      CFRelease((CFTypeRef)theArray.value);
    }
LABEL_92:
    if (value[0]) {
      CFRelease(value[0]);
    }
    uint64_t v32 = value[1];
    if (!value[1]) {
      return;
    }
LABEL_95:
    CFRelease(v32);
    return;
  }
  if (MediaSubType == 1768174368) {
    goto LABEL_33;
  }
  if (MediaSubType != 1835360888)
  {
    if (MediaSubType != 1886155636) {
      return;
    }
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    value[0] = 0;
    if (!FigMetadataCreateMetadataItemsFromFigMetadataPropertyListSampleBuffer(v2, value))
    {
      MEMORY[0x19970E290](*(void *)(v8 + 8));
      if (*(unsigned char *)v8)
      {
        MEMORY[0x19970E2B0](*(void *)(v8 + 8));
      }
      else
      {
        int v31 = *(void (**)(void *, uint64_t))(v8 + 32);
        uint64_t v30 = *(void *)(v8 + 40);
        MEMORY[0x19970E2B0](*(void *)(v8 + 8));
        if (v31) {
          v31(value[0], v30);
        }
      }
    }
    uint64_t v32 = value[0];
    if (!value[0]) {
      return;
    }
    goto LABEL_95;
  }
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  double v51 = 0;
  MEMORY[0x19970E290](*(void *)(v11 + 8));
  if (*(unsigned char *)v11)
  {
    FigSignalErrorAt();
    goto LABEL_23;
  }
  if (!v2)
  {
LABEL_68:
    uint64_t v12 = 0;
    goto LABEL_69;
  }
  long long v49 = 0u;
  long long v50 = 0u;
  long long v48 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  *(_OWORD *)CMTimeValue value = 0u;
  long long v45 = 0u;
  OSType localKeyID = 0;
  uint64_t v42 = 0;
  CMSampleBufferGetPresentationTimeStamp(&theArray, v2);
  CFAllocatorRef v16 = CFGetAllocator(a1);
  CMTime time = theArray;
  CFDictionaryRef cf = CMTimeCopyAsDictionary(&time, v16);
  if (!cf)
  {
LABEL_23:
    uint64_t v12 = 0;
    CFDictionaryRef v2 = 0;
LABEL_69:
    CFDataRef v25 = 0;
    goto LABEL_70;
  }
  if (!CMSampleBufferGetDataBuffer(v2) || FigAtomStreamInitWithBBuf())
  {
    CFRelease(cf);
    goto LABEL_23;
  }
  CFDictionaryRef v2 = 0;
  keCGFloat y = (void *)*MEMORY[0x1E4F1F0F0];
  while (1)
  {
    size_t totalLengthOut = 0;
    time.CMTimeValue value = 0;
    if (FigAtomStreamGetCurrentAtomTypeAndDataLength()) {
      goto LABEL_67;
    }
    CFDictionaryRef KeyWithLocalID = CMMetadataFormatDescriptionGetKeyWithLocalID(FormatDescription, localKeyID);
    if (!KeyWithLocalID)
    {
      uint64_t v12 = 0;
      CFDataRef v25 = 0;
      goto LABEL_56;
    }
    unsigned int KeyNamespaceUInt32 = FigMetadataKeyGetKeyNamespaceUInt32();
    if (KeyNamespaceUInt32)
    {
      unsigned int v19 = KeyNamespaceUInt32;
      float64x2_t v20 = CFDictionaryGetValue(KeyWithLocalID, key);
      if (v20) {
        break;
      }
    }
    uint64_t v12 = 0;
    CFDataRef v25 = 0;
    CFDictionaryRef KeyWithLocalID = 0;
LABEL_56:
    if (v51)
    {
      CFRelease(v51);
      double v51 = 0;
    }
    if (v25) {
      CFRelease(v25);
    }
    if (KeyWithLocalID) {
      CFRelease(KeyWithLocalID);
    }
    if (v12) {
      CFRelease(v12);
    }
    if (FigAtomStreamAdvanceToNextAtom())
    {
      if (v2) {
        (*(void (**)(opaqueCMSampleBuffer *, void))(v11 + 32))(v2, *(void *)(v11 + 40));
      }
      goto LABEL_67;
    }
  }
  uint64_t v21 = v20;
  if (FigAtomStreamReadCurrentAtomDataAndCreateBBuf()
    || CMBlockBufferGetDataPointer((CMBlockBufferRef)v51, 0, 0, &totalLengthOut, (char **)&time))
  {
    goto LABEL_67;
  }
  CFAllocatorRef v22 = CFGetAllocator(a1);
  CFStringRef v23 = CFStringCreateWithFormat(v22, 0, @"%c%c%c%c", HIBYTE(v19), BYTE2(v19), BYTE1(v19), v19);
  if (!v23)
  {
    FigSignalErrorAt();
LABEL_67:
    CFRelease(cf);
    goto LABEL_68;
  }
  CFDictionaryRef KeyWithLocalID = (const __CFDictionary *)v23;
  if (!time.value)
  {
    uint64_t v12 = 0;
    CFDataRef v25 = 0;
    goto LABEL_97;
  }
  CFAllocatorRef v24 = CFGetAllocator(a1);
  CFDataRef v25 = CFDataCreate(v24, (const UInt8 *)time.value, totalLengthOut);
  if (v25)
  {
    CFAllocatorRef v26 = CFGetAllocator(a1);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v26, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v12 = Mutable;
    if (!Mutable) {
      goto LABEL_97;
    }
    CFDictionaryAddValue(Mutable, @"value", v25);
    CFDictionaryAddValue(v12, @"keyspace", KeyWithLocalID);
    CFDictionaryAddValue(v12, @"key", v21);
    CFDictionaryAddValue(v12, @"timestamp", cf);
    DataTypeForLocalID = (const void *)FigMetadataFormatDescriptionGetDataTypeForLocalID();
    if (DataTypeForLocalID)
    {
      CFDictionaryAddValue(v12, @"dataType", DataTypeForLocalID);
      CFDictionaryAddValue(v12, @"dataTypeNamespace", @"com.apple.coremedia");
    }
    if (!v2)
    {
      CFAllocatorRef v29 = CFGetAllocator(a1);
      CFDictionaryRef v2 = CFArrayCreateMutable(v29, 0, MEMORY[0x1E4F1D510]);
      if (!v2) {
        goto LABEL_97;
      }
    }
    CFArrayAppendValue(v2, v12);
    goto LABEL_56;
  }
  uint64_t v12 = 0;
LABEL_97:
  FigSignalErrorAt();
  CFRelease(cf);
  CFRelease(KeyWithLocalID);
LABEL_70:
  if (v51) {
    CFRelease(v51);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v12) {
    CFRelease(v12);
  }
  if (v2) {
    CFRelease(v2);
  }
  MEMORY[0x19970E2B0](*(void *)(v11 + 8));
}

uint64_t tdrp_resetOutput()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)DerivedStorage)
  {
    JUMPOUT(0x19970E2B0);
  }
  uint64_t v1 = *(void *)(DerivedStorage + 40);
  CFDictionaryRef v3 = *(uint64_t (**)(void, uint64_t))(DerivedStorage + 32);
  uint64_t result = MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  if (v3)
  {
    return v3(0, v1);
  }
  return result;
}

uint64_t FigTimedMetadataRenderPipelineInvalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = DerivedStorage;
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
    if (!*(unsigned char *)v1)
    {
      *(unsigned char *)uint64_t v1 = 1;
      if (*(void *)(v1 + 24))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CFRelease(*(CFTypeRef *)(v1 + 24));
        *(void *)(v1 + 24) = 0;
      }
      uint64_t v2 = *(void *)(v1 + 16);
      if (v2)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v2);
        if (FigBaseObject)
        {
          uint64_t v4 = FigBaseObject;
          uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v5) {
            uint64_t v6 = v5;
          }
          else {
            uint64_t v6 = 0;
          }
          double v7 = *(void (**)(uint64_t))(v6 + 24);
          if (v7) {
            v7(v4);
          }
        }
        CFRelease(*(CFTypeRef *)(v1 + 16));
        *(void *)(v1 + 16) = 0;
      }
    }
    MEMORY[0x19970E2B0](*(void *)(v1 + 8));
  }
  return 0;
}

uint64_t FigTimedMetadataRenderPipelineFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigTimedMetadataRenderPipelineInvalidate();
  uint64_t result = *(void *)(DerivedStorage + 8);
  if (result)
  {
    uint64_t result = FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 8) = 0;
  }
  return result;
}

__CFString *FigTimedMetadataRenderPipelineCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigTimedMetadataRenderPipeline %p>", a1);
  return Mutable;
}

uint64_t FigTimedMetadataRenderPipelineCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && !*(unsigned char *)DerivedStorage)
  {
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(DerivedStorage + 16));
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (v12)
    {
      return v12(FigBaseObject, a2, a3, a4);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigTimedMetadataRenderPipelineSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && !*(unsigned char *)DerivedStorage)
  {
    uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(DerivedStorage + 16));
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 56);
    if (v10)
    {
      return v10(FigBaseObject, a2, a3);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void tdrp_ParseID3(const void *a1, CMSampleBufferRef sbuf)
{
  CMBlockBufferRef blockBufferOut = 0;
  CFDictionaryRef theDict = 0;
  dataPointerOut = 0;
  uint64_t outPropertyData = 0;
  memset(&v31, 0, sizeof(v31));
  CMSampleBufferGetOutputPresentationTimeStamp(&v31, sbuf);
  DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  if (!CMBlockBufferCreateContiguous(0, DataBuffer, 0, 0, 0, 0, 0, &blockBufferOut))
  {
    size_t DataLength = CMBlockBufferGetDataLength(blockBufferOut);
    if (DataLength >= 0xB)
    {
      unint64_t v6 = DataLength;
      if (!CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &dataPointerOut))
      {
        LODWORD(outPropertyData) = 4;
        if (!AudioFormatGetProperty(0x69643373u, 0xAu, dataPointerOut, (UInt32 *)&outPropertyData, (char *)&outPropertyData + 4)&& v6 >= HIDWORD(outPropertyData))
        {
          LODWORD(outPropertyData) = 8;
          if (!AudioFormatGetProperty(0x69643364u, HIDWORD(outPropertyData), dataPointerOut, (UInt32 *)&outPropertyData, &theDict))
          {
            CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
            CFIndex Count = CFDictionaryGetCount(theDict);
            uint64_t v9 = (const void **)malloc_type_calloc(2 * Count, 8uLL, 0xC0040B8AA526DuLL);
            if (v9)
            {
              uint64_t v10 = v9;
              uint64_t v11 = &v9[Count];
              CFDictionaryGetKeysAndValues(theDict, v9, v11);
              if (Count >= 1)
              {
                uint64_t v12 = 0;
                CMTimeValue value = 0;
                CFIndex v29 = Count;
                do
                {
                  CFTypeID TypeID = CFDictionaryGetTypeID();
                  if (TypeID == CFGetTypeID(v11[v12]))
                  {
                    CFIndex v14 = CFDictionaryGetCount((CFDictionaryRef)v11[v12]);
                    uint64_t v15 = (const void **)malloc_type_calloc(2 * v14, 8uLL, 0xC0040B8AA526DuLL);
                    if (v15)
                    {
                      CFAllocatorRef v16 = v15;
                      long long v17 = (const __CFDictionary **)&v15[v14];
                      CFDictionaryGetKeysAndValues((CFDictionaryRef)v11[v12], v16, &v16[v14]);
                      if (v14 >= 1)
                      {
                        do
                        {
                          CFStringRef v18 = (const __CFString *)v10[v12];
                          CFDictionaryRef v19 = *v17;
                          CFAllocatorRef v20 = CFGetAllocator(a1);
                          CMTime v30 = v31;
                          if (!tdrp_BuildID3Dictionary(v18, v19, &v30, v20, (__CFDictionary **)&value))
                          {
                            uint64_t v21 = value;
                            CFArrayAppendValue(Mutable, value);
                            CFRelease(v21);
                          }
                          ++v17;
                          --v14;
                        }
                        while (v14);
                      }
                      free(v16);
                      CFIndex Count = v29;
                    }
                  }
                  else
                  {
                    CFStringRef v22 = (const __CFString *)v10[v12];
                    CFDictionaryRef v23 = (const __CFDictionary *)v11[v12];
                    CFAllocatorRef v24 = CFGetAllocator(a1);
                    CMTime v30 = v31;
                    if (!tdrp_BuildID3Dictionary(v22, v23, &v30, v24, (__CFDictionary **)&value))
                    {
                      CFDataRef v25 = value;
                      CFArrayAppendValue(Mutable, value);
                      CFRelease(v25);
                    }
                  }
                  ++v12;
                }
                while (v12 != Count);
              }
              free(v10);
              if (CFArrayGetCount(Mutable) >= 1)
              {
                uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
                MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
                if (*(unsigned char *)DerivedStorage)
                {
                  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
                }
                else
                {
                  float64x2_t v28 = *(void (**)(__CFArray *, uint64_t))(DerivedStorage + 32);
                  uint64_t v27 = *(void *)(DerivedStorage + 40);
                  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
                  if (v28 && CFArrayGetCount(Mutable) >= 1) {
                    v28(Mutable, v27);
                  }
                }
              }
            }
            if (Mutable) {
              CFRelease(Mutable);
            }
          }
        }
      }
    }
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
}

void tdrp_CopyIcyItem(void *key, CFDictionaryRef *a2)
{
  CMTimeValue value = 0;
  if (CFDictionaryGetValueIfPresent(*a2, key, (const void **)&value)) {
    CFArrayAppendValue(a2[1], value);
  }
}

uint64_t tdrp_BuildID3Dictionary(const __CFString *a1, const __CFDictionary *Value, CMTime *a3, const __CFAllocator *a4, __CFDictionary **a5)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(Value)) {
    CFDictionaryRef v11 = Value;
  }
  else {
    CFDictionaryRef v11 = 0;
  }
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a4, 7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFArrayRef v13 = Mutable;
    CFDictionaryAddValue(Mutable, @"keyspace", @"org.id3");
    CFDictionaryAddValue(v13, @"key", a1);
    CMTime v31 = *a3;
    CFDictionaryRef v14 = CMTimeCopyAsDictionary(&v31, a4);
    if (v14)
    {
      CFDictionaryRef v15 = v14;
      CFDictionaryAddValue(v13, @"timestamp", v14);
      CFRelease(v15);
      if (v11)
      {
        CFDateRef Value = (const __CFDictionary *)CFDictionaryGetValue(v11, @"data");
        if (!Value) {
          CFDateRef Value = (const __CFDictionary *)CFDictionaryGetValue(v11, @"text");
        }
        CFAllocatorRef v16 = CFDictionaryGetValue(v11, @"identifier");
        if (v16) {
          CFDictionaryAddValue(v13, @"info", v16);
        }
        long long v17 = CFDictionaryGetValue(v11, @"language");
        if (v17) {
          CFDictionaryAddValue(v13, @"languageCode", v17);
        }
        CFStringRef v18 = (const __CFString *)CFDictionaryGetValue(v11, @"MIME");
        if (v18)
        {
          CFDictionaryAddValue(v13, @"dataType", v18);
          CFDictionaryAddValue(v13, @"dataTypeNamespace", @"org.iana.media-type");
        }
        CFDictionaryRef v19 = CFDictionaryGetValue(v11, @"picturetype");
        if (v19) {
          CFDictionaryAddValue(v13, @"pictureType", v19);
        }
        CFAllocatorRef v20 = CFDictionaryGetValue(v11, @"filename");
        if (v20) {
          CFDictionaryAddValue(v13, @"name", v20);
        }
        if (Value) {
          goto LABEL_20;
        }
      }
      else
      {
        CFStringRef v18 = 0;
        if (Value)
        {
LABEL_20:
          CFTypeID v21 = CFURLGetTypeID();
          if (v21 == CFGetTypeID(Value) && (CFURLRef v22 = CFURLCopyAbsoluteURL(Value)) != 0)
          {
            CFURLRef v23 = v22;
            CFStringRef v24 = CFURLGetString(v22);
            if (v24)
            {
              CFDateRef Value = (const __CFDictionary *)CFRetain(v24);
              CFDictionaryRef v25 = Value;
            }
            else
            {
              CFDictionaryRef v25 = 0;
            }
            CFRelease(v23);
          }
          else
          {
            CFDictionaryRef v25 = 0;
          }
          CFComparisonResult v26 = CFStringCompare(a1, @"GEOB", 0);
          if (v18)
          {
            if (v26 == kCFCompareEqualTo && CFStringCompare(v18, @"application/xml", 1uLL) == kCFCompareEqualTo)
            {
              CFStringRef v28 = (const __CFString *)CFDictionaryGetValue(v13, @"name");
              if (v28)
              {
                if (CFStringHasSuffix(v28, @".plist"))
                {
                  CFTypeID v29 = CFDataGetTypeID();
                  if (v29 == CFGetTypeID(Value))
                  {
                    CFDictionaryRef v30 = (const __CFDictionary *)CFPropertyListCreateWithData(a4, Value, 0, 0, 0);
                    if (v30)
                    {
                      CFDateRef Value = v30;
                      CFDictionaryRef v25 = v30;
                    }
                  }
                }
              }
            }
          }
          CFDictionaryAddValue(v13, @"value", Value);
          *a5 = v13;
          if (v25) {
            CFRelease(v25);
          }
          return 0;
        }
      }
      *a5 = v13;
    }
    else
    {
      CFDateRef Value = (const __CFDictionary *)FigSignalErrorAt();
      CFRelease(v13);
    }
    return (uint64_t)Value;
  }

  return FigSignalErrorAt();
}

uint64_t FigDataChannelResourceGetClassID()
{
  return sFigDataChannelResourceClassID;
}

uint64_t RegisterFigDataChannelResourceType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigDataChannelResourceGetTypeID()
{
  MEMORY[0x19970EE10](&FigDataChannelResourceGetClassID_sRegisterFigDataChannelResourceTypeOnce, RegisterFigDataChannelResourceType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigDataChannelResourceCreate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3 && MEMORY[0x19970EAF0](a3) > 0 && a4)
  {
    MEMORY[0x19970EE10](&FigDataChannelResourceGetClassID_sRegisterFigDataChannelResourceTypeOnce, RegisterFigDataChannelResourceType);
    CopCGFloat y = CMDerivedObjectCreate();
    if (!Copy)
    {
      uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
      DerivedStorage[2] = 0;
      DerivedStorage[6] = 0;
      DerivedStorage[8] = 0;
      CFGetAllocator(0);
      CopCGFloat y = FigTagCollectionCreateCopy();
      if (!Copy) {
        *a4 = 0;
      }
    }
    return Copy;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFStringRef FigDataChannelResourceCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigDataChannelResource %p]", a1);
}

BOOL dataChannelResource_equal(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

void dataChannelResource_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 16);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 16) = 0;
  }
}

CFStringRef dataChannelResource_copyDebugDesc(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (DerivedStorage) {
    return CFStringCreateWithFormat(v3, 0, @"[DataChannelResource %p]: resourceID: %d", a1, *(unsigned int *)(DerivedStorage + 8));
  }
  else {
    return CFStringCreateWithFormat(v3, 0, @"[DataChannelResource %p]", a1);
  }
}

uint64_t dataChannelResource_GetState(uint64_t a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
    uint64_t v2 = DerivedStorage + 8;
    os_unfair_lock_lock(DerivedStorage + 8);
    uint64_t os_unfair_lock_opaque = DerivedStorage[6]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v2);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return os_unfair_lock_opaque;
}

uint64_t dataChannelResource_CopyPayload(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v4 = (os_unfair_lock_s *)(DerivedStorage + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 32));
    if (*(void *)DerivedStorage) {
      CFTypeRef v5 = CFRetain(*(CFTypeRef *)DerivedStorage);
    }
    else {
      CFTypeRef v5 = 0;
    }
    os_unfair_lock_unlock(v4);
    *a2 = v5;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t dataChannelResource_CopyTagCollection(const void *a1, uint64_t a2)
{
  if (a1 && a2)
  {
    CMBaseObjectGetDerivedStorage();
    CFGetAllocator(a1);
    return FigTagCollectionCreateCopy();
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t dataChannelResource_ProvidePayload(uint64_t a1, const void *a2)
{
  if (dword_1E9350A10)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1 && a2 && (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), !*(void *)DerivedStorage))
  {
    unint64_t v6 = (void *)DerivedStorage;
    double v7 = (os_unfair_lock_s *)(DerivedStorage + 32);
    os_unfair_lock_lock((os_unfair_lock_t)(DerivedStorage + 32));
    *unint64_t v6 = CFRetain(a2);
    os_unfair_lock_unlock(v7);
    uint64_t v8 = dataChannelResource_setResourceStateAndPostNotification(a1, 1u);
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v9;
}

uint64_t dataChannelResource_SetFailedToLoad(uint64_t a1)
{
  if (dword_1E9350A10)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1) {
    return dataChannelResource_setResourceStateAndPostNotification(a1, 2u);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t dataChannelResource_SetCancelled(uint64_t a1)
{
  if (dword_1E9350A10)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1) {
    return dataChannelResource_setResourceStateAndPostNotification(a1, 3u);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t dataChannelResource_SetProcessingState(uint64_t a1, unsigned int a2)
{
  if (dword_1E9350A10)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a1)
  {
    uint64_t DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
    unint64_t v6 = DerivedStorage + 8;
    os_unfair_lock_lock(DerivedStorage + 8);
    if (a2 >= 3)
    {
      os_unfair_lock_unlock(v6);
      return 4294948214;
    }
    uint32_t os_unfair_lock_opaque = DerivedStorage[7]._os_unfair_lock_opaque;
    if (dword_1E9350A10)
    {
      uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    DerivedStorage[7]._uint32_t os_unfair_lock_opaque = a2;
    os_unfair_lock_unlock(v6);
    if (os_unfair_lock_opaque == a2) {
      return 0;
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v11 = Mutable;
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterPostNotification();
      CFRelease(v11);
      return 0;
    }
  }
  return FigSignalErrorAt();
}

uint64_t dataChannelResource_GetProcessingState(uint64_t a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
    uint64_t v2 = DerivedStorage + 8;
    os_unfair_lock_lock(DerivedStorage + 8);
    uint64_t os_unfair_lock_opaque = DerivedStorage[7]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v2);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return os_unfair_lock_opaque;
}

uint64_t dataChannelResource_setResourceStateAndPostNotification(uint64_t a1, uint32_t a2)
{
  uint64_t DerivedStorage = (os_unfair_lock_s *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage + 8;
  os_unfair_lock_lock(DerivedStorage + 8);
  unsigned int os_unfair_lock_opaque = DerivedStorage[6]._os_unfair_lock_opaque;
  unsigned int v6 = a2 - 1;
  if (os_unfair_lock_opaque) {
    unsigned int v7 = -19082;
  }
  else {
    unsigned int v7 = 0;
  }
  BOOL v8 = os_unfair_lock_opaque < 2;
  if (os_unfair_lock_opaque >= 2) {
    int v9 = -19082;
  }
  else {
    int v9 = 0;
  }
  if (a2 == 3)
  {
    unsigned int v10 = v9;
  }
  else
  {
    BOOL v8 = 0;
    unsigned int v10 = -19082;
  }
  if (v6 >= 2) {
    BOOL v11 = v8;
  }
  else {
    BOOL v11 = os_unfair_lock_opaque == 0;
  }
  if (v6 >= 2) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = v7;
  }
  if (os_unfair_lock_opaque == a2 && dword_1E9350A10 != 0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v12 = v12;
  }
  if (v11)
  {
    if (dword_1E9350A10)
    {
      CFDictionaryRef v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    DerivedStorage[6]._unsigned int os_unfair_lock_opaque = a2;
    os_unfair_lock_unlock(v4);
    if (os_unfair_lock_opaque != a2)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFMutableDictionaryRef v17 = Mutable;
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterPostNotification();
        CFRelease(v17);
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
  }
  else
  {
    os_unfair_lock_unlock(v4);
  }
  return v12;
}

uint64_t FigSessionDataSpecifierGetTypeID()
{
  long long v1 = xmmword_1E5789FF0;
  if (sds_getTypeID_once != -1) {
    dispatch_once_f(&sds_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass);
  }
  return sds_getTypeID_typeID;
}

uint64_t FigSessionDataSpecifierCreate(const void *a1, const void *a2, const void *a3, const void *a4, int a5, uint64_t *a6)
{
  MEMORY[0x19970EE10](&sFigPlaylistSpecifiersRegisterAttachmentOnce, _figAttachmentsRegisterStreamPlaylistSpecifiers);
  if (a6
    && (FigGetAllocatorForMedia(), FigSessionDataSpecifierGetTypeID(), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v13 = Instance;
    if (a1) {
      CFTypeRef v14 = CFRetain(a1);
    }
    else {
      CFTypeRef v14 = 0;
    }
    *(void *)(v13 + 16) = v14;
    if (a2) {
      CFTypeRef v15 = CFRetain(a2);
    }
    else {
      CFTypeRef v15 = 0;
    }
    *(void *)(v13 + 24) = v15;
    if (a3) {
      CFTypeRef v16 = CFRetain(a3);
    }
    else {
      CFTypeRef v16 = 0;
    }
    *(void *)(v13 + 32) = v16;
    if (a4) {
      CFTypeRef v17 = CFRetain(a4);
    }
    else {
      CFTypeRef v17 = 0;
    }
    *(void *)(v13 + 40) = v17;
    *(_DWORD *)(v13 + 48) = a5;
    *a6 = v13;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigSessionDataSpecifierGetIdentifier(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t FigSessionDataSpecifierGetURL(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void FigSessionDataSpecifierSetURL(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  *(void *)(a1 + 24) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigSessionDataSpecifierGetValue(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t FigSessionDataSpecifierGetLanguage(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t FigSessionDataSpecifierGetFormatType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t FigRenditionReportSpecifierGetTypeID()
{
  long long v1 = xmmword_1E578A000;
  if (rrs_getTypeID_once != -1) {
    dispatch_once_f(&rrs_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass);
  }
  return rrs_getTypeID_typeID;
}

uint64_t FigRenditionReportSpecifierCreate(const void *a1, uint64_t a2, uint64_t a3, int a4, int a5, char a6, char a7, uint64_t *a8)
{
  MEMORY[0x19970EE10](&sFigPlaylistSpecifiersRegisterAttachmentOnce, _figAttachmentsRegisterStreamPlaylistSpecifiers);
  if (a8
    && (FigGetAllocatorForMedia(), FigRenditionReportSpecifierGetTypeID(), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v17 = Instance;
    if (a1) {
      CFTypeRef v18 = CFRetain(a1);
    }
    else {
      CFTypeRef v18 = 0;
    }
    *(void *)(v17 + 16) = v18;
    *(void *)(v17 + 24) = a2;
    *(void *)(v17 + 32) = a3;
    *(_DWORD *)(v17 + 40) = a4;
    *(_DWORD *)(v17 + 44) = a5;
    *(unsigned char *)(v17 + 48) = a6;
    *(unsigned char *)(v17 + 49) = a7;
    *a8 = v17;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigRenditionReportSpecifierGetURL(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t FigRenditionReportSpecifierGetLastMediaSequenceNumber(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t FigRenditionReportSpecifierGetLastIndependentMediaSequenceNumber(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t FigRenditionReportSpecifierGetLastPart(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t FigRenditionReportSpecifierGetLastIndependentPart(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t FigRenditionReportSpecifierIsReadInCurrent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t FigRenditionReportSpecifierSetReadInCurrent(uint64_t result, char a2)
{
  *(unsigned char *)(result + 48) = a2;
  return result;
}

uint64_t FigRenditionReportSpecifierIsGapAtLive(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 49);
}

uint64_t FigDateRangeSpecifierGetTypeID()
{
  long long v1 = xmmword_1E578A010;
  if (drs_getTypeID_once != -1) {
    dispatch_once_f(&drs_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass);
  }
  return drs_getTypeID_typeID;
}

uint64_t FigDateRangeSpecifierCreate(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, const void *a7, char a8, double a9, double a10, double a11, double a12, char a13, const void *a14, const void *a15, const void *a16, const void *a17, char a18, const void *a19, const void *a20,const void *a21,uint64_t *a22)
{
  MEMORY[0x19970EE10](&sFigPlaylistSpecifiersRegisterAttachmentOnce, _figAttachmentsRegisterStreamPlaylistSpecifiers);
  if (a22
    && (FigGetAllocatorForMedia(), FigDateRangeSpecifierGetTypeID(), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v34 = Instance;
    if (a1) {
      CFTypeRef v35 = CFRetain(a1);
    }
    else {
      CFTypeRef v35 = 0;
    }
    *(void *)(v34 + 16) = v35;
    if (a2) {
      CFTypeRef v36 = CFRetain(a2);
    }
    else {
      CFTypeRef v36 = 0;
    }
    *(void *)(v34 + 24) = v36;
    if (a3) {
      CFTypeRef v37 = CFRetain(a3);
    }
    else {
      CFTypeRef v37 = 0;
    }
    *(void *)(v34 + 32) = v37;
    if (a4) {
      CFTypeRef v38 = CFRetain(a4);
    }
    else {
      CFTypeRef v38 = 0;
    }
    *(void *)(v34 + 40) = v38;
    if (a5) {
      CFTypeRef v39 = CFRetain(a5);
    }
    else {
      CFTypeRef v39 = 0;
    }
    *(void *)(v34 + 48) = v39;
    if (a6) {
      CFTypeRef v40 = CFRetain(a6);
    }
    else {
      CFTypeRef v40 = 0;
    }
    *(void *)(v34 + 56) = v40;
    if (a7) {
      CFTypeRef v41 = CFRetain(a7);
    }
    else {
      CFTypeRef v41 = 0;
    }
    *(void *)(v34 + 64) = v41;
    *(unsigned char *)(v34 + 160) = a8;
    *(unsigned char *)(v34 + 161) = a13;
    if (a14) {
      CFTypeRef v42 = CFRetain(a14);
    }
    else {
      CFTypeRef v42 = 0;
    }
    *(void *)(v34 + 72) = v42;
    if (a15) {
      CFTypeRef v43 = CFRetain(a15);
    }
    else {
      CFTypeRef v43 = 0;
    }
    *(void *)(v34 + 80) = v43;
    CFTypeRef v44 = a16;
    if (a16) {
      CFTypeRef v44 = CFRetain(a16);
    }
    *(void *)(v34 + 88) = v44;
    *(double *)(v34 + 96) = a9;
    *(double *)(v34 + 104) = a10;
    CFTypeRef v45 = a17;
    if (a17) {
      CFTypeRef v45 = CFRetain(a17);
    }
    *(void *)(v34 + 112) = v45;
    *(unsigned char *)(v34 + 162) = a18;
    *(double *)(v34 + 120) = a11;
    *(double *)(v34 + 128) = a12;
    CFTypeRef v46 = a19;
    if (a19) {
      CFTypeRef v46 = CFRetain(a19);
    }
    *(void *)(v34 + 136) = v46;
    CFTypeRef v47 = a20;
    if (a20) {
      CFTypeRef v47 = CFRetain(a20);
    }
    *(void *)(v34 + 144) = v47;
    CFTypeRef v48 = a21;
    if (a21) {
      CFTypeRef v48 = CFRetain(a21);
    }
    *(void *)(v34 + 152) = v48;
    if (!*(void *)(v34 + 16))
    {
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      *(void *)(v34 + 16) = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    if (!*(void *)(v34 + 112))
    {
      CFAllocatorRef v50 = (const __CFAllocator *)FigGetAllocatorForMedia();
      *(void *)(v34 + 112) = CFDictionaryCreateMutable(v50, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    }
    *a22 = v34;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigDateRangeSpecifierGetMetadataDict(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void FigDateRangeSpecifierSetMetadataDict(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

void FigDateRangeSpecifierSetValueForMetadataDict(uint64_t a1, const void *a2, const void *a3)
{
}

uint64_t FigDateRangeSpecifierGetIdentifier(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void FigDateRangeSpecifierSetIdentifier(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  *(void *)(a1 + 24) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigDateRangeSpecifierGetTaggedRangeClass(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void FigDateRangeSpecifierSetTaggedRangeClass(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigDateRangeSpecifierGetTaggedRangeLine(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

void FigDateRangeSpecifierSetTaggedRangeLine(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigDateRangeSpecifierGetTaggedRangeCue(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

void FigDateRangeSpecifierSetTaggedRangeCue(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  *(void *)(a1 + 48) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigDateRangeSpecifierGetStartDate(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

void FigDateRangeSpecifierSetStartDate(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  *(void *)(a1 + 56) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigDateRangeSpecifierGetEndDate(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

void FigDateRangeSpecifierSetEndDate(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 64);
  *(void *)(a1 + 64) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigDateRangeSpecifierGetEndOnNext(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 160);
}

uint64_t FigDateRangeSpecifierSetEndOnNext(uint64_t result, char a2)
{
  *(unsigned char *)(result + 160) = a2;
  return result;
}

uint64_t FigDateRangeSpecifierGetEndOnNextSet(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 161);
}

uint64_t FigDateRangeSpecifierSetEndOnNextSet(uint64_t result, char a2)
{
  *(unsigned char *)(result + 161) = a2;
  return result;
}

uint64_t FigDateRangeSpecifierGetScte35cmd(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void FigDateRangeSpecifierSetScte35cmd(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 72);
  *(void *)(a1 + 72) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigDateRangeSpecifierGetScte35in(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

void FigDateRangeSpecifierSetScte35in(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 80);
  *(void *)(a1 + 80) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigDateRangeSpecifierGetScte35out(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

void FigDateRangeSpecifierSetScte35out(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 88);
  *(void *)(a1 + 88) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

double FigDateRangeSpecifierGetDuration(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

uint64_t FigDateRangeSpecifierSetDuration(uint64_t result, double a2)
{
  *(double *)(result + 96) = a2;
  return result;
}

double FigDateRangeSpecifierGetPlannedDuration(uint64_t a1)
{
  return *(double *)(a1 + 104);
}

uint64_t FigDateRangeSpecifierSetPlannedDuration(uint64_t result, double a2)
{
  *(double *)(result + 104) = a2;
  return result;
}

uint64_t FigDateRangeSpecifierGetTagsFirstFoundDateDict(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

void FigDateRangeSpecifierSetValueForTagsFirstFoundDateDict(uint64_t a1, const void *a2, const void *a3)
{
}

uint64_t FigDateRangeSpecifierGetReadInCurrent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 162);
}

uint64_t FigDateRangeSpecifierSetReadInCurrent(uint64_t result, char a2)
{
  *(unsigned char *)(result + 162) = a2;
  return result;
}

double FigDateRangeSpecifierGetTempDuration(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

uint64_t FigDateRangeSpecifierSetTempDuration(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  return result;
}

double FigDateRangeSpecifierGetTempPlannedDuration(uint64_t a1)
{
  return *(double *)(a1 + 128);
}

uint64_t FigDateRangeSpecifierSetTempPlannedDuration(uint64_t result, double a2)
{
  *(double *)(result + 128) = a2;
  return result;
}

uint64_t FigDateRangeSpecifierGetTempEndDate(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

void FigDateRangeSpecifierSetTempEndDate(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 136);
  *(void *)(a1 + 136) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigDateRangeSpecifierGetDiscoveryTimestamp(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

uint64_t FigDateRangeSpecifierGetModificationTimestamp(uint64_t a1)
{
  return *(void *)(a1 + 152);
}

void FigDateRangeSpecifierSetModificationTimestamp(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 152);
  *(void *)(a1 + 152) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigContentKeySpecifierGetTypeID()
{
  long long v1 = xmmword_1E578A020;
  if (cks_getTypeID_once != -1) {
    dispatch_once_f(&cks_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass);
  }
  return cks_getTypeID_typeID;
}

uint64_t FigContentKeySpecifierCreate(int a1, const void *a2, int a3, const void *a4, uint64_t *a5)
{
  MEMORY[0x19970EE10](&sFigPlaylistSpecifiersRegisterAttachmentOnce, _figAttachmentsRegisterStreamPlaylistSpecifiers);
  if (a5
    && (FigGetAllocatorForMedia(), FigContentKeySpecifierGetTypeID(), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v11 = Instance;
    *(_DWORD *)(Instance + 16) = a1;
    if (a2) {
      CFTypeRef v12 = CFRetain(a2);
    }
    else {
      CFTypeRef v12 = 0;
    }
    *(void *)(v11 + 24) = v12;
    *(_DWORD *)(v11 + 32) = a3;
    if (a4) {
      CFTypeRef v13 = CFRetain(a4);
    }
    else {
      CFTypeRef v13 = 0;
    }
    *(void *)(v11 + 40) = v13;
    *a5 = v11;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigContentKeySpecifierGetKeySystem(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t FigContentKeySpecifierGetIdentifier(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t FigContentKeySpecifierGetEncryptionMethod(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t FigContentKeySpecifierGetSupportedProtocolVersions(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t FigContentKeySpecifierGetIsPrefetchKey(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t FigContentKeySpecifierSetIsPrefetchKey(uint64_t result, char a2)
{
  *(unsigned char *)(result + 48) = a2;
  return result;
}

uint64_t FigContentKeySpecifierGetIsReadInCurrent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 49);
}

uint64_t FigContentKeySpecifierSetIsReadInCurrent(uint64_t result, char a2)
{
  *(unsigned char *)(result + 49) = a2;
  return result;
}

uint64_t FigContentKeySpecifierGetCryptKeyParsedIndex(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t FigContentKeySpecifierSetCryptKeyParsedIndex(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = a2;
  return result;
}

uint64_t FigContentKeySpecifierGetIsChangedInCurrent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

uint64_t FigContentKeySpecifierSetIsChangedInCurrent(uint64_t result, char a2)
{
  *(unsigned char *)(result + 64) = a2;
  return result;
}

uint64_t FigContentKeySpecifierGetRawKeyFormat(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

void FigContentKeySpecifierSetRawKeyFormat(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 72);
  *(void *)(a1 + 72) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigContentKeySpecifierGetNextKey(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t FigContentKeySpecifierSetNextKey(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

uint64_t FigContentKeySpecifierGetPreviousKey(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t FigContentKeySpecifierSetPreviousKey(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  return result;
}

uint64_t FigContentKeySpecifierGetCryptKeySize(uint64_t a1)
{
  uint64_t v1 = *(int *)(a1 + 32);
  if (v1 > 5) {
    return 16;
  }
  else {
    return qword_1949926F0[v1];
  }
}

uint64_t FigContentKeySpecifierGetCryptBlockSize(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 32);
  if (v1) {
    BOOL v2 = v1 == 5;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2) {
    return 0;
  }
  else {
    return 16;
  }
}

uint64_t FigMediaSegmentSpecifierGetTypeID()
{
  long long v1 = xmmword_1E578A030;
  if (mss_getTypeID_once != -1) {
    dispatch_once_f(&mss_getTypeID_once, &v1, (dispatch_function_t)spptUtil_registerClass);
  }
  return mss_getTypeID_typeID;
}

uint64_t FigMediaSegmentSpecifierCreate(double a1, double a2, double a3, uint64_t a4, const void *a5, const void *a6, const void *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, const void *a13, int a14, char a15, char a16, char a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t *a23)
{
  MEMORY[0x19970EE10](&sFigPlaylistSpecifiersRegisterAttachmentOnce, _figAttachmentsRegisterStreamPlaylistSpecifiers);
  if (a23 && (FigMediaSegmentSpecifierGetTypeID(), (uint64_t Instance = _CFRuntimeCreateInstance()) != 0))
  {
    uint64_t v33 = Instance;
    if (a5) {
      CFTypeRef v34 = CFRetain(a5);
    }
    else {
      CFTypeRef v34 = 0;
    }
    *(void *)(v33 + 16) = v34;
    if (a6) {
      CFTypeRef v35 = CFRetain(a6);
    }
    else {
      CFTypeRef v35 = 0;
    }
    *(void *)(v33 + 24) = v35;
    if (a7) {
      CFTypeRef v36 = CFRetain(a7);
    }
    else {
      CFTypeRef v36 = 0;
    }
    *(void *)(v33 + 32) = v36;
    *(void *)(v33 + 48) = a8;
    *(void *)(v33 + 64) = a9;
    *(void *)(v33 + 72) = a10;
    *(void *)(v33 + 80) = a11;
    *(double *)(v33 + 88) = a1;
    *(double *)(v33 + 96) = a2;
    if (a12) {
      CFTypeRef v37 = CFRetain(a12);
    }
    else {
      CFTypeRef v37 = 0;
    }
    *(void *)(v33 + 104) = v37;
    if (a13) {
      CFTypeRef v38 = CFRetain(a13);
    }
    else {
      CFTypeRef v38 = 0;
    }
    *(void *)(v33 + 112) = v38;
    *(double *)(v33 + 120) = a3;
    *(_DWORD *)(v33 + 160) = a14;
    *(unsigned char *)(v33 + 152) = a15;
    *(unsigned char *)(v33 + 153) = a16;
    *(unsigned char *)(v33 + 154) = a17;
    *(unsigned char *)(v33 + 155) = a18;
    *(unsigned char *)(v33 + 156) = a19;
    *(unsigned char *)(v33 + 157) = a20;
    *(void *)(v33 + 56) = a21;
    *(unsigned char *)(v33 + 158) = a22;
    *a23 = v33;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMediaSegmentSpecifierCreateEmpty(uint64_t a1, uint64_t *a2)
{
  return FigMediaSegmentSpecifierCreate(0.0, 0.0, 0.0, a1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
           0,
           0,
           0,
           a2);
}

uint64_t FigMediaSegmentSpecifierGetURLString(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void FigMediaSegmentSpecifierSetURLString(uint64_t a1, CFTypeRef cf)
{
  BOOL v2 = *(const void **)(a1 + 16);
  *(void *)(a1 + 16) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMediaSegmentSpecifierGetContentKeySpecifier(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

void FigMediaSegmentSpecifierSetContentKeySpecifier(uint64_t a1, CFTypeRef cf)
{
  BOOL v2 = *(const void **)(a1 + 24);
  *(void *)(a1 + 24) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMediaSegmentSpecifierGetMapSegmentSpecifier(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

void FigMediaSegmentSpecifierSetMapSegmentSpecifier(uint64_t a1, CFTypeRef cf)
{
  BOOL v2 = *(const void **)(a1 + 32);
  *(void *)(a1 + 32) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMediaSegmentSpecifierGetPartialSegments(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t FigMediaSegmentSpecifierAddPartialSegment(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 40)
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableArrayRef Mutable = CFArrayCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(a1 + 40) = Mutable) != 0))
  {
    LastCFDateRef Value = FigCFArrayGetLastValue();
    if (LastValue)
    {
      *(void *)(LastValue + 128) = a2;
      a2[16] = 0;
      a2[17] = LastValue;
    }
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), a2);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMediaSegmentSpecifierSetNextSegment(uint64_t result, uint64_t a2)
{
  *(void *)(result + 128) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierSetPreviousSegment(uint64_t result, uint64_t a2)
{
  *(void *)(result + 136) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierRemovePartialSegment(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 128);
  uint64_t v2 = *(void *)(a2 + 136);
  if (v2) {
    *(void *)(v2 + 128) = v3;
  }
  if (v3) {
    *(void *)(v3 + 136) = v2;
  }
  FigCFArrayRemoveLastElementOfValue();
  return 0;
}

uint64_t FigMediaSegmentSpecifierGetPreviousSegment(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

uint64_t FigMediaSegmentSpecifierGetNextSegment(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

void FigMediaSegmentSpecifierSetPartialSegments(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  *(void *)(a1 + 40) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMediaSegmentSpecifierGetMediaSequence(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t FigMediaSegmentSpecifierSetMediaSequence(uint64_t result, uint64_t a2)
{
  *(void *)(result + 48) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetMediaParsedIndex(uint64_t a1)
{
  return *(void *)(a1 + 56);
}

uint64_t FigMediaSegmentSpecifierSetMediaParsedIndex(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetDiscontinuityDomain(uint64_t a1)
{
  return *(void *)(a1 + 64);
}

uint64_t FigMediaSegmentSpecifierSetIsDiscontinuityDomain(uint64_t result, uint64_t a2)
{
  *(void *)(result + 64) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetStartOffset(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t FigMediaSegmentSpecifierSetStartOffset(uint64_t result, uint64_t a2)
{
  *(void *)(result + 72) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetBytesToRead(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t FigMediaSegmentSpecifierSetBytesToRead(uint64_t result, uint64_t a2)
{
  *(void *)(result + 80) = a2;
  return result;
}

double FigMediaSegmentSpecifierGetTimeInSeconds(uint64_t a1)
{
  return *(double *)(a1 + 88);
}

uint64_t FigMediaSegmentSpecifierSetTimeInSeconds(uint64_t result, double a2)
{
  *(double *)(result + 88) = a2;
  return result;
}

double FigMediaSegmentSpecifierGetBitRate(uint64_t a1)
{
  return *(double *)(a1 + 96);
}

uint64_t FigMediaSegmentSpecifierSetBitRate(uint64_t result, double a2)
{
  *(double *)(result + 96) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetIV(uint64_t a1)
{
  return *(void *)(a1 + 104);
}

void FigMediaSegmentSpecifierSetIV(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 104);
  *(void *)(a1 + 104) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t FigMediaSegmentSpecifierGetDateStamp(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

void FigMediaSegmentSpecifierSetDateStamp(uint64_t a1, CFTypeRef cf)
{
  uint64_t v2 = *(const void **)(a1 + 112);
  *(void *)(a1 + 112) = cf;
  if (cf) {
    CFRetain(cf);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

double FigMediaSegmentSpecifierGetImputedDate(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

uint64_t FigMediaSegmentSpecifierSetImputedDate(uint64_t result, double a2)
{
  *(double *)(result + 120) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierGetType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 160);
}

uint64_t FigMediaSegmentSpecifierSetType(uint64_t result, int a2)
{
  *(_DWORD *)(result + 160) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierIsMarkedIndependent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 152);
}

uint64_t FigMediaSegmentSpecifierSetIsIndependent(uint64_t result, char a2)
{
  *(unsigned char *)(result + 152) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierIsDiscontinuity(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 153);
}

uint64_t FigMediaSegmentSpecifierSetIsDiscontinuity(uint64_t result, char a2)
{
  *(unsigned char *)(result + 153) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierIsReadInCurrent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 154);
}

uint64_t FigMediaSegmentSpecifierSetIsReadInCurrent(uint64_t result, char a2)
{
  *(unsigned char *)(result + 154) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierIsMarkedAsGap(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 155);
}

uint64_t FigMediaSegmentSpecifierSetIsMarkedAsGap(uint64_t result, char a2)
{
  *(unsigned char *)(result + 155) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierIsFragment(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 156);
}

uint64_t FigMediaSegmentSpecifierSetIsFragment(uint64_t result, char a2)
{
  *(unsigned char *)(result + 156) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierAreFragmentsExpired(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 157);
}

uint64_t FigMediaSegmentSpecifierSetAreFragmentsExpired(uint64_t result, char a2)
{
  *(unsigned char *)(result + 157) = a2;
  return result;
}

uint64_t FigMediaSegmentSpecifierIsChangedInCurrent(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 158);
}

uint64_t FigMediaSegmentSpecifierSetChangedInCurrent(uint64_t result, char a2)
{
  *(unsigned char *)(result + 158) = a2;
  return result;
}

void sds_finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
  unsigned int v6 = (const void *)a1[7];
  if (v6)
  {
    CFRelease(v6);
  }
}

CFStringRef sds_copyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"<FigSessionDataSpecifier %p %@-%@-%@-%@-%d>", a1, *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

uint64_t spptUtil_registerClass(uint64_t a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  **(void **)(a1 + 8) = result;
  return result;
}

uint64_t _figAttachmentsRegisterStreamPlaylistSpecifiers()
{
  FigSessionDataSpecifierGetTypeID();
  FigRuntimeRegisterAttachmentBearerWithTypeID();
  FigContentKeySpecifierGetTypeID();
  FigRuntimeRegisterAttachmentBearerWithTypeID();
  FigMediaSegmentSpecifierGetTypeID();

  return FigRuntimeRegisterAttachmentBearerWithTypeID();
}

void sds_setAttachment(uint64_t a1, void *a2, void *a3)
{
}

uint64_t sds_getAttachment()
{
  return FigCFDictionaryGetValue();
}

void sds_removeAttachment(uint64_t a1, const void *a2)
{
}

void sds_removeAllAttachments(uint64_t a1)
{
}

CFTypeRef sds_copyDictionaryOfAttachments(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 56);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void spptUtil_createAttachmentDictionaryIfNecessaryAndSetAttachment(__CFDictionary **a1, void *key, void *value)
{
  CFMutableArrayRef Mutable = *a1;
  if (Mutable
    || (CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia(),
        CFMutableArrayRef Mutable = CFDictionaryCreateMutable(AllocatorForMedia, 0, MEMORY[0x1E4F1D048], MEMORY[0x1E4F1D540]),
        (*a1 = Mutable) != 0))
  {
    if (value)
    {
      CFDictionarySetValue(Mutable, key, value);
    }
    else
    {
      CFDictionaryRemoveValue(Mutable, key);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void cks_setAttachment(uint64_t a1, void *a2, void *a3)
{
}

uint64_t cks_getAttachment()
{
  return FigCFDictionaryGetValue();
}

void cks_removeAttachment(uint64_t a1, const void *a2)
{
}

void cks_removeAllAttachments(uint64_t a1)
{
}

CFTypeRef cks_copyDictionaryOfAttachments(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 96);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void mss_setAttachment(uint64_t a1, void *a2, void *a3)
{
}

uint64_t mss_getAttachment()
{
  return FigCFDictionaryGetValue();
}

void mss_removeAttachment(uint64_t a1, const void *a2)
{
}

void mss_removeAllAttachments(uint64_t a1)
{
}

CFTypeRef mss_copyDictionaryOfAttachments(uint64_t a1, uint64_t a2)
{
  CFTypeRef result = *(CFTypeRef *)(a2 + 144);
  if (result) {
    return CFRetain(result);
  }
  return result;
}

void rrs_finalize(uint64_t a1)
{
  long long v1 = *(const void **)(a1 + 16);
  if (v1) {
    CFRelease(v1);
  }
}

CFStringRef rrs_copyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"<FigRenditionReportSpecifier %p %@-%lld-%lld-%d-%d-%d-%d>", a1, *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44), *(unsigned __int8 *)(a1 + 48), *(unsigned __int8 *)(a1 + 49));
}

void drs_finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
  unsigned int v6 = (const void *)a1[6];
  if (v6) {
    CFRelease(v6);
  }
  unsigned int v7 = (const void *)a1[7];
  if (v7) {
    CFRelease(v7);
  }
  BOOL v8 = (const void *)a1[8];
  if (v8) {
    CFRelease(v8);
  }
  int v9 = (const void *)a1[9];
  if (v9) {
    CFRelease(v9);
  }
  unsigned int v10 = (const void *)a1[10];
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = (const void *)a1[11];
  if (v11) {
    CFRelease(v11);
  }
  CFTypeRef v12 = (const void *)a1[14];
  if (v12) {
    CFRelease(v12);
  }
  CFTypeRef v13 = (const void *)a1[17];
  if (v13) {
    CFRelease(v13);
  }
  CFTypeRef v14 = (const void *)a1[18];
  if (v14) {
    CFRelease(v14);
  }
  CFTypeRef v15 = (const void *)a1[19];
  if (v15)
  {
    CFRelease(v15);
  }
}

CFStringRef drs_copyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"<FigDateRangeSpecifier %p %@>", a1, *(void *)(a1 + 24));
}

void cks_finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[3];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[5];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[9];
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = (const void *)a1[12];
  if (v5) {
    CFRelease(v5);
  }
  a1[10] = 0;
  a1[11] = 0;
}

uint64_t cks_equal(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigCFEqual();
  if (result) {
    return *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16) && *(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32);
  }
  return result;
}

CFHashCode cks_hash(uint64_t a1)
{
  return CFHash(*(CFTypeRef *)(a1 + 24));
}

CFStringRef cks_copyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"<FigContentKeySpecifier %p %@>", a1, *(void *)(a1 + 24));
}

void mss_finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4) {
    CFRelease(v4);
  }
  CFTypeRef v5 = (const void *)a1[5];
  if (v5) {
    CFRelease(v5);
  }
  unsigned int v6 = (const void *)a1[13];
  if (v6) {
    CFRelease(v6);
  }
  unsigned int v7 = (const void *)a1[14];
  if (v7) {
    CFRelease(v7);
  }
  BOOL v8 = (const void *)a1[18];
  if (v8) {
    CFRelease(v8);
  }
  a1[16] = 0;
  a1[17] = 0;
}

CFStringRef mss_copyDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"<FigMediaSegmentSpecifier %p %@>", a1, *(void *)(a1 + 16));
}

uint64_t FigBufferedAirPlayOutputProxyGetClassID()
{
  if (FigBufferedAirPlayOutputProxyGetClassID_sRegisterFigBufferedAirPlayOutputProxyBaseTypeOnce != -1) {
    dispatch_once(&FigBufferedAirPlayOutputProxyGetClassID_sRegisterFigBufferedAirPlayOutputProxyBaseTypeOnce, &__block_literal_global_1);
  }
  return FigBufferedAirPlayOutputProxyGetClassID_sFigBufferedAirPlayOutputProxyClassID;
}

CFStringRef FigBufferedAirPlayOutputProxyBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigBufferedAirPlayOutputProxy %p]", a1);
}

uint64_t __FigBufferedAirPlayOutputProxyGetClassID_block_invoke()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigBufferedAirPlayOutputProxyGetTypeID()
{
  if (FigBufferedAirPlayOutputProxyGetClassID_sRegisterFigBufferedAirPlayOutputProxyBaseTypeOnce != -1) {
    dispatch_once(&FigBufferedAirPlayOutputProxyGetClassID_sRegisterFigBufferedAirPlayOutputProxyBaseTypeOnce, &__block_literal_global_1);
  }

  return CMBaseClassGetCFTypeID();
}

uint64_t FigBufferedAirPlayOutputProxyCreate(uint64_t a1, const void *a2, CFTypeRef *a3)
{
  CFStringRef theString = 0;
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a3)
  {
    uint64_t v6 = FigSignalErrorAt();
    goto LABEL_26;
  }
  if (FigBufferedAirPlayOutputProxyGetClassID_sRegisterFigBufferedAirPlayOutputProxyBaseTypeOnce != -1) {
    dispatch_once(&FigBufferedAirPlayOutputProxyGetClassID_sRegisterFigBufferedAirPlayOutputProxyBaseTypeOnce, &__block_literal_global_1);
  }
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6) {
    goto LABEL_26;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 32) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &FigBufferedAirPlayOutputProxyCreate_perRenderPipelineStateDictCallbacks);
  *(void *)(DerivedStorage + 24) = CFRetain(a2);
  *(void *)(DerivedStorage + 64) = FigSimpleMutexCreate();
  uint64_t v8 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 48) = v8;
  if (!v8)
  {
    uint64_t v17 = 4294954510;
    goto LABEL_20;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v6 = FigNotificationCenterAddWeakListeners();
  if (v6) {
    goto LABEL_26;
  }
  uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(*(void *)(DerivedStorage + 24));
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CFTypeRef v12 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFStringRef *))(v11 + 48);
  if (!v12) {
    goto LABEL_19;
  }
  uint64_t v6 = v12(CMBaseObject, @"LoggingID", a1, &theString);
  if (v6)
  {
LABEL_26:
    uint64_t v17 = v6;
    goto LABEL_20;
  }
  *(unsigned char *)uint64_t DerivedStorage = 0;
  CFStringGetCString(theString, (char *)DerivedStorage, 20, 0x8000100u);
  uint64_t v13 = FigBufferedAirPlayOutputGetCMBaseObject(*(void *)(DerivedStorage + 24));
  uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v14) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  CFTypeRef v16 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v15 + 48);
  if (!v16)
  {
LABEL_19:
    uint64_t v17 = 4294954514;
    goto LABEL_20;
  }
  uint64_t v17 = v16(v13, @"SourceSampleBufferConsumer", a1, DerivedStorage + 40);
  if (!v17)
  {
    ++FigBufferedAirPlayOutputProxyCreate_idNumber;
    *(void *)(DerivedStorage + 56) = FigCFNumberCreateUInt32();
    *a3 = cf;
    CFTypeRef cf = 0;
    goto LABEL_22;
  }
LABEL_20:
  if (cf) {
    CFRelease(cf);
  }
LABEL_22:
  if (theString) {
    CFRelease(theString);
  }
  return v17;
}

char *fbapop_perRenderPipelineStateDictRetainCallBack(const __CFAllocator *a1, uint64_t a2)
{
  uint64_t v3 = (char *)CFAllocatorAllocate(a1, 112, 0);
  CFTypeRef v4 = *(CFTypeRef *)(a2 + 16);
  if (v4) {
    CFTypeRef v4 = CFRetain(v4);
  }
  *((void *)v3 + 2) = v4;
  CFTypeRef v5 = *(CFTypeRef *)a2;
  if (*(void *)a2) {
    CFTypeRef v5 = CFRetain(v5);
  }
  *(void *)uint64_t v3 = v5;
  *((_DWORD *)v3 + 6) = *(_DWORD *)(a2 + 24);
  CFTypeRef v6 = *(CFTypeRef *)(a2 + 8);
  if (v6) {
    CFTypeRef v6 = CFRetain(v6);
  }
  *((void *)v3 + 1) = v6;
  v3[28] = *(unsigned char *)(a2 + 28);
  *(_WORD *)(v3 + 29) = *(_WORD *)(a2 + 29);
  *((void *)v3 + 13) = 0;
  *((_OWORD *)v3 + 2) = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 64);
  long long v9 = *(_OWORD *)(a2 + 80);
  uint64_t v10 = *(const void **)(a2 + 96);
  *((void *)v3 + 12) = v10;
  *((_OWORD *)v3 + 4) = v8;
  *((_OWORD *)v3 + 5) = v9;
  *((_OWORD *)v3 + 3) = v7;
  if (v10) {
    CFRetain(v10);
  }
  if (*(void *)(a2 + 104))
  {
    uint64_t v11 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, 0);
    *((void *)v3 + 13) = v11;
    unsigned char *v11 = **(unsigned char **)(a2 + 104);
  }
  return v3;
}

void fbapop_perRenderPipelineStateDictReleaseCallBack(const __CFAllocator *a1, void *a2)
{
  fbapop_renderPipelineStateRelease((uint64_t)a2);

  CFAllocatorDeallocate(a1, a2);
}

void fbapop_renderPipelineStateRelease(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v4 = v3 ? v3 : 0;
      CFTypeRef v5 = *(void (**)(uint64_t, __CFString *, void))(v4 + 56);
      if (v5) {
        v5(v2, @"DownstreamConsumer", 0);
      }
    }
    CFTypeRef v6 = *(const void **)(a1 + 16);
    if (v6) {
      CFRelease(v6);
    }
    if (*(void *)a1) {
      CFRelease(*(CFTypeRef *)a1);
    }
    long long v7 = *(const void **)(a1 + 8);
    if (v7) {
      CFRelease(v7);
    }
    long long v8 = *(const void **)(a1 + 96);
    if (v8) {
      CFRelease(v8);
    }
    long long v9 = *(void **)(a1 + 104);
    if (v9)
    {
      CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v9);
      *(void *)(a1 + 104) = 0;
    }
  }
}

uint64_t fbapop_invalidate()
{
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListeners();
  if (dword_1E9350A30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return 0;
}

uint64_t fbapop_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  fbapop_invalidate();
  long long v1 = (const void *)DerivedStorage[3];
  if (v1)
  {
    CFRelease(v1);
    DerivedStorage[3] = 0;
  }
  uint64_t v2 = (const void *)DerivedStorage[4];
  if (v2)
  {
    CFRelease(v2);
    DerivedStorage[4] = 0;
  }
  uint64_t v3 = (const void *)DerivedStorage[5];
  if (v3)
  {
    CFRelease(v3);
    DerivedStorage[5] = 0;
  }
  uint64_t v4 = (const void *)DerivedStorage[7];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[7] = 0;
  }
  CFTypeRef v5 = DerivedStorage[6];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[6] = 0;
  }
  uint64_t result = FigSimpleMutexDestroy();
  DerivedStorage[8] = 0;
  if (dword_1E9350A30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return result;
}

__CFString *fbapop_copyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigBufferedAirPlayOutputProxy %p>", a1);
  return Mutable;
}

uint64_t fbapop_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[8]);
  if (CFEqual(a2, @"NumberOfRegisteredRenderPipelines"))
  {
    FigCFDictionaryGetCount();
    uint64_t SInt64 = (const void *)FigCFNumberCreateSInt64();
LABEL_6:
    uint64_t v9 = 0;
    *a4 = SInt64;
    goto LABEL_7;
  }
  if (CFEqual(a2, @"UniqueID"))
  {
    uint64_t SInt64 = (const void *)DerivedStorage[7];
    if (!SInt64) {
      goto LABEL_6;
    }
LABEL_5:
    uint64_t SInt64 = CFRetain(SInt64);
    goto LABEL_6;
  }
  if (CFEqual(a2, @"ConnectedRenderPipelineID"))
  {
    uint64_t SInt64 = (const void *)fbapop_getConnectedRenderPipelineID();
    if (!SInt64) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(DerivedStorage[3]);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v13 + 48);
  if (v14) {
    uint64_t v9 = v14(CMBaseObject, a2, a3, a4);
  }
  else {
    uint64_t v9 = 4294954514;
  }
LABEL_7:
  MEMORY[0x19970E930](DerivedStorage[8]);
  return v9;
}

uint64_t fbapop_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  uint64_t CMBaseObject = FigBufferedAirPlayOutputGetCMBaseObject(*(void *)(DerivedStorage + 24));
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 56);
  if (v9) {
    uint64_t v10 = v9(CMBaseObject, a2, a3);
  }
  else {
    uint64_t v10 = 4294954514;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v10;
}

uint64_t fbapop_getConnectedRenderPipelineID()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2000000000;
  uint64_t v5 = 0;
  FigCFDictionaryApplyBlock();
  uint64_t v0 = v3[3];
  _Block_object_dispose(&v2, 8);
  return v0;
}

void __fbapop_getConnectedRenderPipelineID_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    uint64_t v5 = *(void *)(a3 + 8);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v7 + 48);
    if (v8)
    {
      v8(v5, @"DownstreamConsumer", *MEMORY[0x1E4F1CF80], &cf);
      CFTypeRef v9 = cf;
      if (cf)
      {
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(a3 + 16);
        CFRelease(v9);
      }
    }
  }
}

uint64_t fbapop_setRenderPipelineState(const void *a1, unsigned int *a2, const void *a3, const void *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v25 = 0;
  CFComparisonResult v26 = &v25;
  uint64_t v27 = 0x2000000000;
  char v28 = 0;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid((uint64_t)a1, a2)) {
    goto LABEL_28;
  }
  if (!a2)
  {
LABEL_22:
    uint64_t v15 = 0;
    goto LABEL_23;
  }
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  CFDateRef Value = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken((uint64_t)a1, a2);
  if (!Value)
  {
LABEL_28:
    uint64_t SynchronizedToTimebaseRenderPipeline = FigSignalErrorAt();
LABEL_17:
    uint64_t v15 = SynchronizedToTimebaseRenderPipeline;
    goto LABEL_23;
  }
  if (CFEqual(@"RenderPipelineStateAllowsPrebuffering", a3))
  {
    CFTypeID TypeID = CFBooleanGetTypeID();
    if (TypeID != CFGetTypeID(a4)) {
      goto LABEL_22;
    }
    FigCFDictionaryApplyBlock();
    if (*((unsigned char *)v26 + 24)) {
      goto LABEL_22;
    }
    Value[28] = *MEMORY[0x1E4F1CFD0] == (void)a4;
    if (!dword_1E9350A30) {
      goto LABEL_22;
    }
    goto LABEL_8;
  }
  if (!CFEqual(@"RenderPipelineStateIsTimebaseStarter", a3))
  {
    if (!CFEqual(@"RenderPipelineStateEndOfTrackReached", a3))
    {
      if (!CFEqual(@"RenderPipelineStateSynchronizeToTimebase", a3)) {
        goto LABEL_22;
      }
      CFTypeID v18 = CFBooleanGetTypeID();
      if (v18 != CFGetTypeID(a4)) {
        goto LABEL_22;
      }
      if (CFBooleanGetValue((CFBooleanRef)a4) == 1)
      {
        uint64_t v19 = fbapop_setRenderPipelineState_sCurrentSynchronizeToTimebaseOrderIndex++;
        *((void *)Value + 4) = v19;
      }
      else
      {
        *((void *)Value + 4) = 0xFFFFFFFLL;
        *((void *)Value + 5) = 0;
        uint64_t v21 = MEMORY[0x1E4F1F9F8];
        long long v22 = *MEMORY[0x1E4F1F9F8];
        *((_OWORD *)Value + 3) = *MEMORY[0x1E4F1F9F8];
        uint64_t v23 = *(void *)(v21 + 16);
        *((void *)Value + 8) = v23;
        *(_OWORD *)(Value + 72) = v22;
        *((void *)Value + 11) = v23;
        CFStringRef v24 = (const void *)*((void *)Value + 12);
        if (v24)
        {
          CFRelease(v24);
          *((void *)Value + 12) = 0;
        }
      }
      if (!dword_1E9350A30) {
        goto LABEL_22;
      }
LABEL_8:
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_22;
    }
    CFTypeID v16 = CFBooleanGetTypeID();
    if (v16 != CFGetTypeID(a4)) {
      goto LABEL_22;
    }
    Value[30] = *MEMORY[0x1E4F1CFD0] == (void)a4;
    uint64_t SynchronizedToTimebaseRenderPipeline = fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline(a1);
    goto LABEL_17;
  }
  CFTypeID v13 = CFBooleanGetTypeID();
  if (v13 != CFGetTypeID(a4)) {
    goto LABEL_22;
  }
  int v14 = CFBooleanGetValue((CFBooleanRef)a4);
  CMBaseObjectGetDerivedStorage();
  if (v14) {
    FigCFDictionaryApplyBlock();
  }
  uint64_t v15 = 0;
  Value[29] = v14;
LABEL_23:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  _Block_object_dispose(&v25, 8);
  return v15;
}

uint64_t fbapop_setRateAndAnchorTime(const void *a1, unsigned int *a2, uint64_t a3, long long *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid((uint64_t)a1, a2)) {
    goto LABEL_19;
  }
  if (!a2)
  {
LABEL_17:
    uint64_t v25 = 0;
    goto LABEL_18;
  }
  uint64_t v19 = CMBaseObjectGetDerivedStorage();
  CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v19 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken((uint64_t)a1, a2);
  if (Value)
  {
    if (dword_1E9350A30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v22 = Value[4];
    if (a9 == 0.0 || (v22 != 0xFFFFFFF ? (BOOL v23 = *((unsigned char *)Value + 29) == 0) : (BOOL v23 = 1), v23))
    {
      if (v22 != 0xFFFFFFF) {
        goto LABEL_17;
      }
      int IsConsumerConnected = fbapop_ruleIsConsumerConnected((uint64_t)Value);
      if (a9 <= 0.0 && IsConsumerConnected && !*((unsigned char *)Value + 29)) {
        goto LABEL_17;
      }
    }
    long long v30 = *(_OWORD *)a3;
    uint64_t v31 = *(void *)(a3 + 16);
    long long v28 = *a4;
    uint64_t v29 = *((void *)a4 + 2);
    uint64_t v24 = fbapop_callSetRateOnBAO(a1, a2, &v30, (uint64_t)&v28, a5, a6, a7, a8, a9);
  }
  else
  {
LABEL_19:
    uint64_t v24 = FigSignalErrorAt();
  }
  uint64_t v25 = v24;
LABEL_18:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v25;
}

uint64_t fbapop_flush(uint64_t a1, unsigned int *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2)) {
    goto LABEL_16;
  }
  if (a2)
  {
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 32), (const void *)*a2);
    fbapop_getIdStringFromToken(a1, a2);
    if (Value)
    {
      if (dword_1E9350A30)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (fbapop_ruleIsConsumerConnected((uint64_t)Value)) {
        goto LABEL_7;
      }
      uint64_t v9 = *(void *)(DerivedStorage + 24);
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(uint64_t (**)(uint64_t))(v11 + 16);
      if (!v12)
      {
        uint64_t v8 = 4294954514;
        goto LABEL_15;
      }
      uint64_t v13 = v12(v9);
LABEL_13:
      uint64_t v8 = v13;
      goto LABEL_15;
    }
LABEL_16:
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v8 = 0;
LABEL_15:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v8;
}

uint64_t fbapop_flushWithinTimeRange(uint64_t a1, unsigned int *a2, long long *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2)) {
    goto LABEL_16;
  }
  if (a2)
  {
    uint64_t v7 = CMBaseObjectGetDerivedStorage();
    CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 32), (const void *)*a2);
    fbapop_getIdStringFromToken(a1, a2);
    if (Value)
    {
      if (dword_1E9350A30)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (fbapop_ruleIsConsumerConnected((uint64_t)Value)) {
        goto LABEL_7;
      }
      uint64_t v11 = *(void *)(DerivedStorage + 24);
      long long v17 = *a3;
      long long v18 = a3[1];
      long long v19 = a3[2];
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      int v14 = *(uint64_t (**)(uint64_t, _OWORD *))(v13 + 24);
      if (!v14)
      {
        uint64_t v10 = 4294954514;
        goto LABEL_15;
      }
      v20[0] = v17;
      v20[1] = v18;
      v20[2] = v19;
      uint64_t v15 = v14(v11, v20);
LABEL_13:
      uint64_t v10 = v15;
      goto LABEL_15;
    }
LABEL_16:
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_13;
  }
LABEL_7:
  uint64_t v10 = 0;
LABEL_15:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v10;
}

uint64_t fbapop_reset(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2)) {
    goto LABEL_21;
  }
  if (!a2)
  {
    uint64_t v15 = 0;
    goto LABEL_18;
  }
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v8 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (!Value)
  {
LABEL_21:
    uint64_t v15 = FigSignalErrorAt();
    goto LABEL_18;
  }
  uint64_t v10 = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = CFDictionaryGetValue(*(CFDictionaryRef *)(v10 + 32), (const void *)*a2);
  if (fbapop_ruleIsConsumerConnected((uint64_t)v11))
  {
    if (v11)
    {
      uint64_t v12 = (void *)v11[13];
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (v12)
      {
        CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12);
        v11[13] = 0;
      }
    }
    else
    {
      CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    }
    int v14 = CFAllocatorAllocate(v13, 1, 0);
    uint64_t v15 = 0;
    v11[13] = v14;
    unsigned char *v14 = a4;
  }
  else
  {
    uint64_t v16 = *(void *)(DerivedStorage + 24);
    uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v17) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    long long v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 32);
    if (v19) {
      uint64_t v15 = v19(v16, a4);
    }
    else {
      uint64_t v15 = 4294954514;
    }
    if (v11)
    {
      CFAllocatorRef v20 = (void *)v11[13];
      if (v20)
      {
        CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v20);
        v11[13] = 0;
      }
    }
  }
LABEL_18:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v15;
}

uint64_t fbapop_setConnectionActive(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2)) {
    goto LABEL_16;
  }
  if (!a2)
  {
    uint64_t v19 = 0;
    goto LABEL_13;
  }
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v11 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (Value)
  {
    if (dword_1E9350A30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v14 = *(void *)(DerivedStorage + 24);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v15) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 40);
    if (!v17)
    {
      uint64_t v19 = 4294954514;
      goto LABEL_13;
    }
    uint64_t v18 = v17(v14, a3, a4, a5);
  }
  else
  {
LABEL_16:
    uint64_t v18 = FigSignalErrorAt();
  }
  uint64_t v19 = v18;
LABEL_13:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v19;
}

uint64_t fbapop_stopForReconfiguration(uint64_t a1, unsigned int *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2)) {
    goto LABEL_16;
  }
  if (!a2)
  {
    uint64_t v13 = 0;
    goto LABEL_13;
  }
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (Value)
  {
    if (dword_1E9350A30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v8 = *(void *)(DerivedStorage + 24);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t))(v10 + 48);
    if (!v11)
    {
      uint64_t v13 = 4294954514;
      goto LABEL_13;
    }
    uint64_t v12 = v11(v8);
  }
  else
  {
LABEL_16:
    uint64_t v12 = FigSignalErrorAt();
  }
  uint64_t v13 = v12;
LABEL_13:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v13;
}

uint64_t fbapop_setEndOfSiriTTSUtteranceMediaTime(uint64_t a1, unsigned int *a2, long long *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2)) {
    goto LABEL_16;
  }
  if (!a2)
  {
    uint64_t v15 = 0;
    goto LABEL_13;
  }
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v7 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (Value)
  {
    if (dword_1E9350A30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v10 = *(void *)(DerivedStorage + 24);
    long long v17 = *a3;
    uint64_t v18 = *((void *)a3 + 2);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t, long long *))(v12 + 56);
    if (!v13)
    {
      uint64_t v15 = 4294954514;
      goto LABEL_13;
    }
    long long v19 = v17;
    uint64_t v20 = v18;
    uint64_t v14 = v13(v10, &v19);
  }
  else
  {
LABEL_16:
    uint64_t v14 = FigSignalErrorAt();
  }
  uint64_t v15 = v14;
LABEL_13:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v15;
}

uint64_t fbapop_applyVolumeFade(uint64_t a1, unsigned int *a2, uint64_t a3, long long *a4)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2)) {
    goto LABEL_16;
  }
  if (!a2)
  {
    uint64_t v17 = 0;
    goto LABEL_13;
  }
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (Value)
  {
    if (dword_1E9350A30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v12 = *(void *)(DerivedStorage + 24);
    long long v19 = *a4;
    uint64_t v20 = *((void *)a4 + 2);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, long long *))(v14 + 64);
    if (!v15)
    {
      uint64_t v17 = 4294954514;
      goto LABEL_13;
    }
    long long v21 = v19;
    uint64_t v22 = v20;
    uint64_t v16 = v15(v12, a3, &v21);
  }
  else
  {
LABEL_16:
    uint64_t v16 = FigSignalErrorAt();
  }
  uint64_t v17 = v16;
LABEL_13:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v17;
}

uint64_t fbapop_copyTransportFormatDescriptionForSourceContentFormatDescription(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2)) {
    goto LABEL_16;
  }
  if (!a2)
  {
    uint64_t v17 = 0;
    goto LABEL_13;
  }
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (Value)
  {
    if (dword_1E9350A30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v12 = *(void *)(DerivedStorage + 24);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 72);
    if (!v15)
    {
      uint64_t v17 = 4294954514;
      goto LABEL_13;
    }
    uint64_t v16 = v15(v12, a3, a4);
  }
  else
  {
LABEL_16:
    uint64_t v16 = FigSignalErrorAt();
  }
  uint64_t v17 = v16;
LABEL_13:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v17;
}

uint64_t fbapop_doesSupportPassthroughOfFormatDescription(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2)) {
    goto LABEL_16;
  }
  if (!a2)
  {
    uint64_t v17 = 0;
    goto LABEL_13;
  }
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v9 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken(a1, a2);
  if (Value)
  {
    if (dword_1E9350A30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v12 = *(void *)(DerivedStorage + 24);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 80);
    if (!v15)
    {
      uint64_t v17 = 4294954514;
      goto LABEL_13;
    }
    uint64_t v16 = v15(v12, a3, a4);
  }
  else
  {
LABEL_16:
    uint64_t v16 = FigSignalErrorAt();
  }
  uint64_t v17 = v16;
LABEL_13:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v17;
}

uint64_t fbapop_registerRenderPipeline(uint64_t a1, uint64_t a2, const void *a3, const void *a4, unsigned int **a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = DerivedStorage;
  if (!a3 || !a2 || !a4)
  {
    uint64_t v24 = FigSignalErrorAt();
    goto LABEL_23;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  uint64_t v12 = CMBaseObjectGetDerivedStorage();
  long long v38 = 0u;
  memset(value, 0, sizeof(value));
  if (!a5)
  {
    uint64_t v24 = FigSignalErrorAt();
    fbapop_renderPipelineStateRelease((uint64_t)value);
    if (v24) {
      goto LABEL_23;
    }
    goto LABEL_11;
  }
  uint64_t v13 = v12;
  CMBaseObjectGetDerivedStorage();
  uint64_t v27 = 0;
  long long v28 = &v27;
  uint64_t v29 = 0x2000000000;
  uint64_t v30 = 0;
  uint64_t v31 = MEMORY[0x1E4F143A8];
  uint64_t v32 = 0x40000000;
  uint64_t v33 = __fbapop_findRenderPipelineStateWithID_block_invoke;
  CFTypeRef v34 = &unk_1E578A180;
  CFTypeRef v35 = &v27;
  CFTypeRef v36 = a4;
  FigCFDictionaryApplyBlock();
  uint64_t v14 = v28[3];
  _Block_object_dispose(&v27, 8);
  if (!v14)
  {
    unint64_t v15 = fbapop_createAndSaveRenderPipelineState_tokenNumber++;
    *(void *)&value[1] = CFRetain(a4);
    *(void *)&value[0] = FigCFWeakReferenceHolderCreateWithReferencedObject();
    DWORD2(value[1]) = v15;
    *((void *)&value[0] + 1) = CFRetain(a3);
    value[2] = 0xFFFFFFFuLL;
    value[3] = *MEMORY[0x1E4F1F9F8];
    *(void *)&value[4] = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
    *(_OWORD *)((char *)&value[4] + 8) = value[3];
    *((void *)&value[5] + 1) = *(void *)&value[4];
    if ((void)v38)
    {
      CFRelease((CFTypeRef)v38);
      *(void *)&long long v38 = 0;
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v13 + 32), (const void *)v15, value);
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    *a5 = (unsigned int *)((char *)CFDictionaryGetValue(*(CFDictionaryRef *)(v16 + 32), (const void *)v15) + 24);
    if (dword_1E9350A30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fbapop_renderPipelineStateRelease((uint64_t)value);
LABEL_11:
    IdStringFromToken = fbapop_getIdStringFromToken(a1, *a5);
    if (dword_1E9350A30)
    {
      long long v19 = IdStringFromToken;
      LODWORD(v27) = 0;
      uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v21 = v27;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v22 = v21;
      }
      else {
        unsigned int v22 = v21 & 0xFFFFFFFE;
      }
      if (v22)
      {
        if (a1) {
          uint64_t v23 = (const char *)CMBaseObjectGetDerivedStorage();
        }
        else {
          uint64_t v23 = "";
        }
        LODWORD(value[0]) = 136316162;
        *(void *)((char *)value + 4) = "fbapop_registerRenderPipeline";
        WORD6(value[0]) = 2048;
        *(void *)((char *)value + 14) = a1;
        WORD3(value[1]) = 2082;
        *((void *)&value[1] + 1) = v23;
        LOWORD(value[2]) = 2048;
        *(void *)((char *)&value[2] + 2) = a2;
        WORD5(value[2]) = 2112;
        *(void *)((char *)&value[2] + 12) = v19;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v24 = 0;
    goto LABEL_23;
  }
  if (dword_1E9350A30)
  {
    CFComparisonResult v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fbapop_renderPipelineStateRelease((uint64_t)value);
  uint64_t v24 = 4294947886;
LABEL_23:
  MEMORY[0x19970E930](*(void *)(v11 + 64));
  return v24;
}

uint64_t fbapop_deRegisterRenderPipeline(uint64_t a1, unsigned int *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!fbapop_tokenIsValid(a1, a2))
  {
    uint64_t v21 = FigSignalErrorAt();
LABEL_19:
    uint64_t v15 = v21;
    goto LABEL_21;
  }
  unsigned int v23 = *a2;
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 32), (const void *)v23);
  if (Value)
  {
    uint64_t v7 = Value;
    if (dword_1E9350A30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v9 = v7[1];
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void (**)(uint64_t, __CFString *, void))(v11 + 56);
    if (v12) {
      v12(v9, @"DownstreamConsumer", 0);
    }
    uint64_t v13 = CMBaseObjectGetDerivedStorage();
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v13 + 32), (const void *)v23);
  }
  CMBaseObjectGetDerivedStorage();
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2000000000;
  LODWORD(v27) = 0;
  uint64_t v28 = MEMORY[0x1E4F143A8];
  uint64_t v29 = 0x40000000;
  uint64_t v30 = __fbapop_ruleNoConnectedRP_block_invoke;
  uint64_t v31 = &unk_1E578A1A8;
  uint64_t v32 = &v24;
  FigCFDictionaryApplyBlock();
  int v14 = *((_DWORD *)v25 + 6);
  _Block_object_dispose(&v24, 8);
  uint64_t v15 = 0;
  if (v14 != 1)
  {
    if (dword_1E9350A30)
    {
      uint64_t v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v17 = *(void *)(DerivedStorage + 24);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(uint64_t (**)(uint64_t))(v19 + 16);
    if (!v20)
    {
      uint64_t v15 = 4294954514;
      goto LABEL_21;
    }
    uint64_t v21 = v20(v17);
    goto LABEL_19;
  }
LABEL_21:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v15;
}

uint64_t fbapop_preparePrebuffering(const void *a1, unsigned int *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (a2)
  {
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    CFDateRef Value = (unsigned __int8 *)CFDictionaryGetValue(*(CFDictionaryRef *)(v5 + 32), (const void *)*a2);
    fbapop_getIdStringFromToken((uint64_t)a1, a2);
    if (!Value)
    {
      uint64_t v10 = FigSignalErrorAt();
LABEL_10:
      uint64_t v9 = v10;
      goto LABEL_11;
    }
    CMBaseObjectGetDerivedStorage();
    uint64_t v12 = 0;
    uint64_t v13 = &v12;
    uint64_t v14 = 0x2000000000;
    LOBYTE(v15) = 1;
    uint64_t v16 = MEMORY[0x1E4F143A8];
    uint64_t v17 = 0x40000000;
    uint64_t v18 = __ruleNoConsumerConnected_and_PipelineAllowsPrebuffering_block_invoke;
    uint64_t v19 = &unk_1E578A1D0;
    uint64_t v20 = &v12;
    FigCFDictionaryApplyBlock();
    if (*((unsigned char *)v13 + 24))
    {
      int v7 = Value[28];
      _Block_object_dispose(&v12, 8);
      if (v7)
      {
        fbapop_renderPipelineHandleDeferResetIfNeeded((uint64_t)a1, (uint64_t)Value);
        if (dword_1E9350A30)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v10 = fbapop_connectRenderPipelineToBAO(a1, (uint64_t)Value);
        goto LABEL_10;
      }
    }
    else
    {
      _Block_object_dispose(&v12, 8);
    }
  }
  uint64_t v9 = 0;
LABEL_11:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v9;
}

uint64_t fbapop_prepareForSynchronizeToTimebase(const void *a1, unsigned int *a2, long long *a3, long long *a4, const void *a5, double a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  if (!a2) {
    goto LABEL_15;
  }
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v13 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken((uint64_t)a1, a2);
  if (!Value) {
    goto LABEL_17;
  }
  uint64_t v15 = CMBaseObjectGetDerivedStorage();
  uint64_t v16 = (char *)CFDictionaryGetValue(*(CFDictionaryRef *)(v15 + 32), (const void *)*a2);
  if (dword_1E9350A30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a5 && v16 && *((void *)v16 + 4) != 0xFFFFFFFLL)
  {
    fbapop_getConnectedRenderPipelineID();
    if (FigCFEqual())
    {
      if (dword_1E9350A30)
      {
        uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *((void *)v16 + 4) = 0xFFFFFFFLL;
      *((void *)v16 + 5) = 0;
      uint64_t v23 = MEMORY[0x1E4F1F9F8];
      long long v24 = *MEMORY[0x1E4F1F9F8];
      *((_OWORD *)v16 + 3) = *MEMORY[0x1E4F1F9F8];
      uint64_t v25 = *(void *)(v23 + 16);
      *((void *)v16 + 8) = v25;
      *(_OWORD *)(v16 + 72) = v24;
      *((void *)v16 + 11) = v25;
      uint64_t v26 = (const void *)*((void *)v16 + 12);
      if (v26)
      {
        CFRelease(v26);
        uint64_t v22 = 0;
        *((void *)v16 + 12) = 0;
        goto LABEL_16;
      }
LABEL_15:
      uint64_t v22 = 0;
      goto LABEL_16;
    }
    *((double *)v16 + 5) = a6;
    long long v19 = *a3;
    *((void *)v16 + 8) = *((void *)a3 + 2);
    *((_OWORD *)v16 + 3) = v19;
    long long v20 = *a4;
    *((void *)v16 + 11) = *((void *)a4 + 2);
    *(_OWORD *)(v16 + 72) = v20;
    *((void *)v16 + 12) = CFRetain(a5);
    uint64_t SynchronizedToTimebaseRenderPipeline = fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline(a1);
  }
  else
  {
LABEL_17:
    uint64_t SynchronizedToTimebaseRenderPipeline = FigSignalErrorAt();
  }
  uint64_t v22 = SynchronizedToTimebaseRenderPipeline;
LABEL_16:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  return v22;
}

BOOL fbapop_tokenIsValid(uint64_t a1, unsigned int *a2)
{
  CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  return CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), (const void *)*a2) != 0;
}

void *fbapop_getIdStringFromToken(uint64_t a1, unsigned int *a2)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = CFDictionaryGetValue(*(CFDictionaryRef *)(DerivedStorage + 32), (const void *)*a2);
  if (result) {
    return (void *)result[2];
  }
  return result;
}

uint64_t __fbapop_setRenderPipelineState_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + 28)) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

uint64_t fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v29 = 0;
  uint64_t v30 = &v29;
  uint64_t v31 = 0x2000000000;
  uint64_t v32 = 0;
  v28[0] = 0;
  v28[1] = v28;
  v28[2] = 0x2000000000;
  v28[3] = 0xFFFFFFFLL;
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x2000000000;
  char v27 = 0;
  uint64_t v18 = MEMORY[0x1E4F143A8];
  uint64_t v19 = 0x40000000;
  long long v20 = __fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline_block_invoke;
  uint64_t v21 = &unk_1E578A110;
  uint64_t v22 = &v24;
  uint64_t v23 = DerivedStorage;
  FigCFDictionaryApplyBlock();
  if (*((unsigned char *)v25 + 24)) {
    goto LABEL_4;
  }
  uint64_t v12 = MEMORY[0x1E4F143A8];
  uint64_t v13 = 0x40000000;
  uint64_t v14 = __fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline_block_invoke_2;
  uint64_t v15 = &unk_1E578A138;
  uint64_t v16 = v28;
  uint64_t v17 = &v29;
  FigCFDictionaryApplyBlock();
  uint64_t v3 = v30[3];
  if (!v3)
  {
LABEL_4:
    uint64_t v6 = 0;
  }
  else
  {
    double v4 = *(double *)(v3 + 40);
    long long v10 = *(_OWORD *)(v3 + 48);
    uint64_t v11 = *(void *)(v3 + 64);
    long long v8 = *(_OWORD *)(v3 + 72);
    uint64_t v5 = *(void *)(v3 + 96);
    uint64_t v9 = *(void *)(v3 + 88);
    uint64_t v6 = fbapop_callSetRateOnBAO(a1, (unsigned int *)(v3 + 24), &v10, (uint64_t)&v8, v5, 0, 0, 0, v4);
    fbapop_clearRenderPipelineSynchronizeToTimebaseContext(v30[3]);
  }
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(v28, 8);
  _Block_object_dispose(&v29, 8);
  return v6;
}

void fbapop_clearRenderPipelineSynchronizeToTimebaseContext(uint64_t a1)
{
  if (a1)
  {
    *(void *)(a1 + 32) = 0xFFFFFFFLL;
    *(void *)(a1 + 40) = 0;
    uint64_t v2 = MEMORY[0x1E4F1F9F8];
    long long v3 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(a1 + 48) = *MEMORY[0x1E4F1F9F8];
    uint64_t v4 = *(void *)(v2 + 16);
    *(void *)(a1 + 64) = v4;
    *(_OWORD *)(a1 + 72) = v3;
    *(void *)(a1 + 88) = v4;
    uint64_t v5 = *(const void **)(a1 + 96);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 96) = 0;
    }
  }
}

void __fbapop_setTimebaseStarter_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(a3 + 29) = 0;
}

void __fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf1 = 0;
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  long long v8 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v7 + 48);
  if (v8)
  {
    v8(v5, @"DownstreamConsumer", *MEMORY[0x1E4F1CF80], &cf1);
    if (cf1)
    {
      if (CFEqual(cf1, *(CFTypeRef *)(*(void *)(a1 + 40) + 40)) && !*(unsigned char *)(a3 + 30)) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      }
      if (cf1) {
        CFRelease(cf1);
      }
    }
  }
}

uint64_t __fbapop_attempConnectNextSynchronizedToTimebaseRenderPipeline_block_invoke_2(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (*(double *)(a3 + 40) > 0.0 && (*(unsigned char *)(a3 + 60) & 1) != 0)
  {
    uint64_t v3 = *(void *)(a3 + 32);
    uint64_t v4 = *(void *)(*(void *)(result + 32) + 8);
    if (v3 < *(void *)(v4 + 24))
    {
      *(void *)(v4 + 24) = v3;
      *(void *)(*(void *)(*(void *)(result + 40) + 8) + 24) = a3;
    }
  }
  return result;
}

uint64_t fbapop_callSetRateOnBAO(const void *a1, unsigned int *a2, long long *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 0;
  }
  uint64_t v17 = DerivedStorage;
  uint64_t v18 = CMBaseObjectGetDerivedStorage();
  CFDateRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(v18 + 32), (const void *)*a2);
  fbapop_getIdStringFromToken((uint64_t)a1, a2);
  if (Value)
  {
    if (dword_1E9350A30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    fbapop_renderPipelineHandleDeferResetIfNeeded((uint64_t)a1, (uint64_t)Value);
    if (Value[30])
    {
      uint64_t v21 = 0;
    }
    else
    {
      uint64_t result = fbapop_connectRenderPipelineToBAO(a1, (uint64_t)Value);
      if (result) {
        return result;
      }
      uint64_t v21 = 1;
    }
    uint64_t v23 = *(void *)(v17 + 24);
    long long v31 = *a3;
    uint64_t v32 = *((void *)a3 + 2);
    *(_OWORD *)os_log_type_t type = *(_OWORD *)a4;
    uint64_t v30 = *(void *)(a4 + 16);
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, long long *, long long *, uint64_t, uint64_t, uint64_t, uint64_t, double))(v25 + 8);
    if (v26)
    {
      long long v35 = v31;
      uint64_t v36 = v32;
      long long v33 = *(_OWORD *)type;
      uint64_t v34 = v30;
      return v26(v23, v21, &v35, &v33, a5, a6, a7, a8, a9);
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fbapop_renderPipelineHandleDeferResetIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(unsigned __int8 **)(a2 + 104);
  if (v4)
  {
    uint64_t v5 = DerivedStorage;
    if (dword_1E9350A30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v4 = *(unsigned __int8 **)(a2 + 104);
    }
    uint64_t v7 = *(void *)(v5 + 24);
    uint64_t v8 = *v4;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 32);
    if (v11) {
      v11(v7, v8);
    }
    uint64_t v12 = *(void **)(a2 + 104);
    if (v12)
    {
      CFAllocatorDeallocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v12);
      *(void *)(a2 + 104) = 0;
    }
  }
}

uint64_t fbapop_connectRenderPipelineToBAO(const void *a1, uint64_t a2)
{
  cf[26] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cf[0] = 0;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v7 + 48);
  if (!v8)
  {
LABEL_15:
    uint64_t v16 = 4294954514;
    goto LABEL_16;
  }
  uint64_t v9 = v8(v5, @"DownstreamConsumer", *MEMORY[0x1E4F1CF80], cf);
  if (v9)
  {
LABEL_14:
    uint64_t v16 = v9;
    goto LABEL_16;
  }
  if (!FigCFEqual())
  {
    CMBaseObjectGetDerivedStorage();
    cf[10] = (CFTypeRef)MEMORY[0x1E4F143A8];
    cf[11] = (CFTypeRef)0x40000000;
    cf[12] = __fbapop_disconnectAllRPConsumer_block_invoke;
    cf[13] = &__block_descriptor_tmp_44;
    cf[14] = a1;
    FigCFDictionaryApplyBlock();
    if (dword_1E9350A30)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v11 = *(void *)(a2 + 8);
    uint64_t v12 = *(void *)(DerivedStorage + 40);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v14 + 56);
    if (v15)
    {
      uint64_t v9 = v15(v11, @"DownstreamConsumer", v12);
      goto LABEL_14;
    }
    goto LABEL_15;
  }
  uint64_t v16 = 0;
LABEL_16:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v16;
}

uint64_t __fbapop_disconnectAllRPConsumer_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (dword_1E9350A30)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v5 = *(void *)(a3 + 8);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v9 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v8 = v9;
  if (v9) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, __CFString *, void))(v10 + 56);
  if (v11) {
    return v11(v5, @"DownstreamConsumer", 0);
  }
  return result;
}

uint64_t fbapop_ruleIsConsumerConnected(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (!v4)
  {
    BOOL v5 = 0;
    goto LABEL_8;
  }
  BOOL v5 = v4(v1, @"DownstreamConsumer", *MEMORY[0x1E4F1CF80], &cf) == 0;
  if (!cf)
  {
LABEL_8:
    int v6 = 0;
    return v5 & v6 ^ 1u;
  }
  CFRelease(cf);
  int v6 = 1;
  return v5 & v6 ^ 1u;
}

uint64_t __fbapop_findRenderPipelineStateWithID_block_invoke(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(const void **)(a3 + 16);
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t result = CFEqual(*(CFTypeRef *)(result + 40), v3);
    if (result) {
      *(void *)(*(void *)(*(void *)(v5 + 32) + 8) + 24) = a3;
    }
  }
  return result;
}

void __fbapop_ruleNoConnectedRP_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (v7)
  {
    v7(v4, @"DownstreamConsumer", *MEMORY[0x1E4F1CF80], &cf);
    CFTypeRef v8 = cf;
    if (cf)
    {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      CFRelease(v8);
    }
  }
}

uint64_t fbapop_baoNotificationCallForward(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4, const void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = CFEqual(a3, @"GoActive");
  if (result)
  {
    if (a5)
    {
      CFTypeID v9 = CFGetTypeID(a5);
      uint64_t result = CFDictionaryGetTypeID();
      if (v9 == result)
      {
        FigCFDictionaryGetBooleanIfPresent();
        MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
        CMBaseObjectGetDerivedStorage();
        FigCFDictionaryApplyBlock();
        return MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
      }
    }
  }
  else
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return CMNotificationCenterPostNotification();
  }
  return result;
}

void __fbapop_setGoActiveOnConnectedRP_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFTypeRef cf = 0;
  uint64_t v4 = *(void *)(a3 + 8);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (v7)
  {
    v7(v4, @"DownstreamConsumer", *MEMORY[0x1E4F1CF80], &cf);
    if (cf)
    {
      CFTypeRef v8 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      if (v8)
      {
        char v9 = *(unsigned char *)(a1 + 40);
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        CFRetain(v8);
        uint64_t v11 = *(NSObject **)(DerivedStorage + 48);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __fbapop_setGoActiveOnRPAsync_block_invoke;
        block[3] = &__block_descriptor_tmp_56;
        block[4] = v8;
        char v14 = v9;
        dispatch_async(v11, block);
      }
      if (cf) {
        CFRelease(cf);
      }
      if (v8) {
        CFRelease(v8);
      }
    }
  }
}

void __fbapop_setGoActiveOnRPAsync_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v3 = (void *)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v3 = (void *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v2);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, __CFString *, void))(v6 + 56);
  if (v7) {
    v7(FigBaseObject, @"GoActive", *v3);
  }
  CFTypeRef v8 = *(const void **)(a1 + 32);
  if (v8)
  {
    CFRelease(v8);
  }
}

uint64_t FigContentKeySessionRemoteCreateSessionForID(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2 && a3)
  {
    *a3 = 0;
    uint64_t v3 = fcks_remote_ensureClientEstablished();
    if (v3) {
      return v3;
    }
    FigContentKeySessionGetClassID();
    uint64_t v4 = CMDerivedObjectCreate();
    if (!v4) {
      return FigSignalErrorAt();
    }
    return v4;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fcks_remote_ensureClientEstablished()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fcks_remote_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E578A238;
  block[4] = &v3;
  if (fcks_remote_ensureClientEstablished_sFigContentKeySessionRemoteClientSetupOnce != -1) {
    dispatch_once(&fcks_remote_ensureClientEstablished_sFigContentKeySessionRemoteClientSetupOnce, block);
  }
  FigXPCRemoteClientKillServerOnTimeout();
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigContentKeySessionRemoteCreateSession(uint64_t a1, const __CFDictionary *a2, uint64_t a3, NSObject *a4, uint64_t a5, CFTypeRef *a6)
{
  xpc_object_t xdict = 0;
  uint64_t v21 = 0;
  CFTypeRef v19 = 0;
  if (!a6) {
    goto LABEL_17;
  }
  *a6 = 0;
  uint64_t v12 = fcks_remote_ensureClientEstablished();
  if (v12) {
    goto LABEL_18;
  }
  uint64_t v12 = FigXPCCreateBasicMessage();
  if (v12) {
    goto LABEL_18;
  }
  if (a2)
  {
    if (CFDictionaryGetValue(a2, (const void *)*MEMORY[0x1E4F1FC00]))
    {
      uint64_t v12 = FigSandboxRegisterURLWithProcessAndCopyRegistration();
      if (v12) {
        goto LABEL_18;
      }
    }
  }
  uint64_t v12 = FigXPCMessageSetCFDictionary();
  if (v12) {
    goto LABEL_18;
  }
  uint64_t v12 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v12) {
    goto LABEL_18;
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
LABEL_17:
    uint64_t v12 = FigSignalErrorAt();
LABEL_18:
    uint64_t v14 = v12;
    goto LABEL_16;
  }
  uint64_t v14 = FigContentKeySessionRemoteCreateSessionForID(a1, uint64, &v19);
  CFTypeRef v15 = v19;
  if (!v14)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (!a3
      || !a4
      || !a5
      || (dispatch_retain(a4),
          DerivedStorage[2] = a4,
          __copy_assignment_8_8_t0w4_pa0_52572_8_pa0_57120_16_pa0_14239_24_pa0_30190_32_pa0_41757_40((uint64_t)(DerivedStorage + 3), a5), uint64_t v17 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (DerivedStorage[9] = v17) != 0))
    {
      uint64_t v14 = 0;
      DerivedStorage[10] = 0;
      *a6 = v19;
      CFTypeRef v19 = 0;
      goto LABEL_16;
    }
    uint64_t v14 = FigSignalErrorAt();
    CFTypeRef v15 = v19;
  }
  if (v15) {
    CFRelease(v15);
  }
LABEL_16:
  FigXPCRelease();
  FigXPCRelease();
  return v14;
}

uint64_t __copy_assignment_8_8_t0w4_pa0_52572_8_pa0_57120_16_pa0_14239_24_pa0_30190_32_pa0_41757_40(uint64_t result, uint64_t a2)
{
  *(_DWORD *)uint64_t result = *(_DWORD *)a2;
  *(void *)(result + 8) = *(void *)(a2 + 8);
  *(void *)(result + 16) = *(void *)(a2 + 16);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  return result;
}

void __fcks_remote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v3 = Mutable;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"FigContentKeySession_ServerConnectionDied");
    FigRemote_ShouldConnectToMediaparserdForFileParsing();
    FigRemote_ShouldConnectToMediaplaybackd();
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
    CFRelease(v3);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigSignalErrorAt();
  }
}

uint64_t fcks_remote_deadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 1) = 1;
  return result;
}

uint64_t fcks_remote_handleServerMessage()
{
  uint64_t OpCode = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

void __fcks_remote_handleKeyResponseErrorCallback_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void, void))(a1 + 32))(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 64);
  if (v4)
  {
    CFRelease(v4);
  }
}

void __fcks_remote_handleKeyResponseSuccessfullyProcessedCallback_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void))(a1 + 32))(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
  }
}

void __fcks_remote_handlePersistentKeyUpdatedCallback_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void, void))(a1 + 32))(*(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(a1 + 56);
  if (v4)
  {
    CFRelease(v4);
  }
}

void __fcks_remote_handleSecureStopDidFinalizeRecordCallback_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(a1 + 32))(*(void *)(a1 + 40));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

void __fcks_remote_externalProtectionStateChangedCallback_block_invoke(uint64_t a1)
{
  (*(void (**)(void, void))(a1 + 32))(*(void *)(a1 + 40), *(void *)(a1 + 48));
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t fcks_remote_invalidate(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t ObjectID = fcks_remote_getObjectID(a1, &v6);
  if (ObjectID || (uint64_t ObjectID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
    if (!v4) {
      *uint64_t DerivedStorage = 1;
    }
  }
  FigXPCRelease();
  return v4;
}

uint64_t fcks_remote_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(DerivedStorage + 1) && !FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendAsyncMessage();
  }
  FigXPCRelease();
  uint64_t v1 = *(NSObject **)(DerivedStorage + 16);
  if (v1) {
    dispatch_release(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 72);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 72) = 0;
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 80);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 80) = 0;
  }
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *fcks_remote_copyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*DerivedStorage) {
    uint64_t v6 = " (invalidated)";
  }
  else {
    uint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigContentKeySession_Remote %p retainCount: %ld%s allocator: %p, ", a1, v5, v6, v7);
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t fcks_remote_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = 0;
  if (a2 && a4)
  {
    *a4 = 0;
    uint64_t result = fcks_remote_getObjectID(a1, &v5);
    if (!result) {
      return FigXPCSendStdCopyPropertyMessage();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fcks_remote_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = 0;
  if (a2 && a3)
  {
    uint64_t result = fcks_remote_getObjectID(a1, &v4);
    if (!result) {
      return FigXPCSendStdSetPropertyMessage();
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fcks_remote_getObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || *(unsigned char *)DerivedStorage || *(unsigned char *)(DerivedStorage + 1))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
}

uint64_t fcks_remote_addChildSession(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (!a2) {
    goto LABEL_10;
  }
  uint64_t ObjectID = fcks_remote_getObjectID(a1, &v10);
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t ObjectID = fcks_remote_getObjectID(a2, &v9);
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_11;
  }
  uint64_t UInt64 = FigCFNumberCreateUInt64();
  if (!UInt64)
  {
LABEL_10:
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_11:
    uint64_t v7 = ObjectID;
    FigXPCRelease();
    return v7;
  }
  uint64_t v5 = (const void *)UInt64;
  uint64_t v6 = FigXPCMessageSetCFNumber();
  if (!v6) {
    uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  }
  uint64_t v7 = v6;
  FigXPCRelease();
  CFRelease(v5);
  return v7;
}

uint64_t fcks_remote_copyCryptor(uint64_t a1, const __CFAllocator *a2, const __CFDictionary *a3, uint64_t a4, void *a5)
{
  uint64_t v14 = 0;
  if (!a3 || !a5)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_20:
    uint64_t v12 = ObjectID;
    goto LABEL_18;
  }
  *a5 = 0;
  uint64_t ObjectID = fcks_remote_getObjectID(a1, &v14);
  if (ObjectID) {
    goto LABEL_20;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_20;
  }
  CFTypeRef v8 = (const void *)*MEMORY[0x1E4F1FC30];
  CFDictionaryGetValue(a3, (const void *)*MEMORY[0x1E4F1FC30]);
  FigXPCMessageSetFormatDescription();
  if (CFDictionaryGetValue(a3, v8))
  {
    MutableCopCGFloat y = CFDictionaryCreateMutableCopy(a2, 0, a3);
    if (MutableCopy)
    {
      CFTypeRef v10 = MutableCopy;
      CFDictionaryRemoveValue(MutableCopy, v8);
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
      if (v12) {
        goto LABEL_18;
      }
      CFTypeRef v10 = 0;
    }
  }
  else
  {
    CFTypeRef v10 = CFRetain(a3);
  }
  uint64_t v11 = FigXPCMessageSetCFDictionary();
  if (v11) {
    goto LABEL_14;
  }
  uint64_t v11 = FigXPCMessageSetCFBoolean();
  if (v11) {
    goto LABEL_14;
  }
  uint64_t v11 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v11) {
    goto LABEL_14;
  }
  if (xpc_dictionary_get_uint64(0, "CryptorID"))
  {
    uint64_t v11 = FigCPECryptorRemoteRetainCopiedCryptor();
LABEL_14:
    uint64_t v12 = v11;
    if (!v10) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  uint64_t v12 = 0;
  if (v10) {
LABEL_17:
  }
    CFRelease(v10);
LABEL_18:
  FigXPCRelease();
  FigXPCRelease();
  return v12;
}

uint64_t fcks_remote_setAuthorizationToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = 0;
  if (!a2 || !a3)
  {
    uint64_t ObjectID = FigSignalErrorAt();
    goto LABEL_11;
  }
  uint64_t ObjectID = fcks_remote_getObjectID(a1, &v7);
  if (ObjectID)
  {
LABEL_11:
    uint64_t v5 = ObjectID;
    goto LABEL_8;
  }
  uint64_t v4 = FigXPCCreateBasicMessage();
  if (v4 || (uint64_t v4 = FigXPCMessageSetCFString(), v4) || (uint64_t v4 = FigXPCMessageSetCFData(), v4)) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = FigXPCRemoteClientSendSyncMessage();
  }
LABEL_8:
  FigXPCRelease();
  return v5;
}

uint64_t fcsk_remote_externalProtectionStatusForCryptor(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t v8 = 0;
  if (!a1 || !a2 || !a3 || !a4)
  {
    uint64_t ObjectID = FigSignalErrorAt();
LABEL_13:
    uint64_t v6 = ObjectID;
    goto LABEL_11;
  }
  uint64_t ObjectID = fcks_remote_getObjectID(a1, &v8);
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t ObjectID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t ObjectID = FigCPECryptorRemoteGetID();
  if (ObjectID) {
    goto LABEL_13;
  }
  xpc_dictionary_set_uint64(0, "CryptorID", 0);
  uint64_t ObjectID = FigXPCMessageSetCFArray();
  if (ObjectID) {
    goto LABEL_13;
  }
  uint64_t v6 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (!v6) {
    *a4 = FigXPCMessageGetUInt32();
  }
LABEL_11:
  FigXPCRelease();
  FigXPCRelease();
  return v6;
}

uint64_t FigPhotoScaleAndRotateSessionGetTypeID()
{
  return MEMORY[0x1F410DB58]();
}

uint64_t FigPhotoScaleAndRotateSessionCreate()
{
  return MEMORY[0x1F410DB48]();
}

uint64_t FigPhotoScaleAndRotateSessionTransformForSize(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7)
{
  return MEMORY[0x1F410DB68](a1, a2, a3, a4, a5, a6, a7);
}

uint64_t FigPhotoScaleAndRotateSessionTransformForMaxSideLength()
{
  return MEMORY[0x1F410DB60]();
}

uint64_t FigPhotoScaleAndRotateSessionTransformIntoCanvas()
{
  return MEMORY[0x1F410DB70]();
}

uint64_t FigPhotoScaleAndRotateSessionDiscardCaches()
{
  return MEMORY[0x1F410DB50]();
}

uint64_t FigCaptionRendererCellStackLayoutRegionCreate(void *a1)
{
  *a1 = 0;
  *(void *)&long long v8 = 0;
  MEMORY[0x19970EE10](&FigCaptionRendererCellStackLayoutRegionGetClassID_sRegisterFigCaptionRendererCellStackLayoutRegionBaseTypeOnce, RegisterFigCaptionRendererCellStackLayoutRegionBaseType);
  uint64_t v2 = CMDerivedObjectCreate();
  if (!v2)
  {
    uint64_t v3 = v8;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigGeometryDimensionMake();
    FigGeometryDimensionMake();
    FigGeometryPointMake();
    long long v5 = v8;
    *(_OWORD *)(DerivedStorage + 24) = v9;
    *(_OWORD *)(DerivedStorage + 8) = v5;
    uint64_t v7 = 0;
    FigCaptionRendererStackLayoutRegionCreate(&v7);
    *(void *)uint64_t DerivedStorage = v7;
    *a1 = v3;
  }
  return v2;
}

uint64_t FigCaptionRendererCellStackLayoutRegionSetPosition(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v4 = a2[1];
  *(_OWORD *)(DerivedStorage + 8) = *a2;
  *(_OWORD *)(DerivedStorage + 24) = v4;
  return 0;
}

uint64_t FigCaptionRendererCellStackLayoutRegionGetPosition(uint64_t a1, _OWORD *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    long long v4 = *(_OWORD *)(DerivedStorage + 24);
    *a2 = *(_OWORD *)(DerivedStorage + 8);
    a2[1] = v4;
  }
  return 0;
}

uint64_t FigCaptionRendererCellStackLayoutRegionDigestLayoutInfo(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v33 = 0u;
  long long v34 = 0u;
  long long v5 = *(_OWORD *)(DerivedStorage + 24);
  long long v31 = *(_OWORD *)(DerivedStorage + 8);
  long long v32 = v5;
  FigGeometryMappingConvertPointToPoint();
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  long long v31 = *MEMORY[0x1E4F1DB28];
  long long v32 = v6;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v8 = *(void *)(ProtocolVTable + 16);
    if (v8)
    {
      long long v9 = *(void (**)(uint64_t, long long *))(v8 + 72);
      if (v9) {
        v9(a1, &v31);
      }
    }
  }
  FCRGetCEA608CellSize(*(void *)(a2 + 696));
  double v11 = v10;
  double v13 = v12;
  long long v14 = v32;
  FigCaptionRendererRegionProtocolGetProtocolID();
  uint64_t v15 = CMBaseObjectGetProtocolVTable();
  if (v15)
  {
    uint64_t v16 = *(void *)(v15 + 16);
    if (v16)
    {
      uint64_t v17 = *(void (**)(uint64_t, double, double))(v16 + 56);
      if (v17) {
        v17(a1, 0.0, 0.0);
      }
    }
  }
  double v18 = *(double *)&v33;
  double v19 = *(double *)&v34;
  FigCaptionRendererRegionProtocolGetProtocolID();
  uint64_t v20 = CMBaseObjectGetProtocolVTable();
  if (v20)
  {
    uint64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      uint64_t v22 = *(void (**)(uint64_t, double, double))(v21 + 72);
      if (v22) {
        v22(a1, v18, 95.0 - v19);
      }
    }
  }
  FigCaptionRendererRegionProtocolGetProtocolID();
  uint64_t v23 = CMBaseObjectGetProtocolVTable();
  if (v23)
  {
    uint64_t v25 = *(void *)(v23 + 16);
    if (v25)
    {
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v25 + 24);
      if (v26)
      {
        LODWORD(v24) = vcvtd_n_s64_f64(v11 * 100.0 / *(double *)&v14, 5uLL);
        v26(a1, v24);
      }
    }
  }
  FigCaptionRendererStackLayoutRegionProtocolGetProtocolID();
  uint64_t v27 = CMBaseObjectGetProtocolVTable();
  if (v27)
  {
    uint64_t v28 = *(void *)(v27 + 16);
    if (v28)
    {
      uint64_t v29 = *(void (**)(uint64_t, double))(v28 + 16);
      if (v29) {
        v29(a1, v13 * 100.0 / *((double *)&v14 + 1) / 100.0);
      }
    }
  }
  return 0;
}

void FigCaptionRendererCellStackLayoutRegionFinalize()
{
  uint64_t v0 = *(const void **)CMBaseObjectGetDerivedStorage();

  CFRelease(v0);
}

__CFString *FigCaptionRendererCellStackLayoutRegionCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererCellStackLayoutRegion: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererCellStackLayoutRegion <FigCaptionRendererBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCaptionRendererCellStackLayoutRegion";
  return 0;
}

__CFString *FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererCellStackLayoutRegion <FigCaptionRendererNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2, a3);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 96);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  long long v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 112);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954508;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v15 = *(void *)(ProtocolVTable + 16);
  if (!v15) {
    return 4294954508;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (!v16) {
    return 4294954514;
  }

  return v16(v13, a2, a3, a4, a5, a6, a7);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, __n128))(v5 + 256);
  if (!v6) {
    return 4294954514;
  }
  v4.n128_f64[0] = a1;

  return v6(v2, v4);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_Draw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 280);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererCellStackLayoutRegionDigestLayoutInfo(a1, a2);
  uint64_t v5 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v7 = *(void *)(ProtocolVTable + 16);
  if (!v7) {
    return 4294954508;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 288);
  if (!v8) {
    return 4294954514;
  }

  return v8(v5, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __int16 v25 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, char *))(v6 + 248);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            uint64_t v9 = *(void *)(v8 + 16);
            if (v9)
            {
              __n128 v10 = *(void (**)(uint64_t, uint64_t))(v9 + 296);
              if (v10) {
                v10(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      uint64_t v13 = *(void (**)(uint64_t, __int16 *))(v12 + 240);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 16);
            if (v15)
            {
              uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 288);
              if (v16) {
                v16(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      double v19 = *(void (**)(uint64_t, uint64_t))(v18 + 280);
      if (v19) {
        v19(a1, a2);
      }
    }
  }
  uint64_t v20 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (!v21) {
    return 4294954508;
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22) {
    return 4294954508;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 304);
  if (v23) {
    return v23(v20, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  uint64_t v10 = *((void *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 312);
  if (!v6) {
    return 4294954514;
  }
  v11[0] = v8;
  v11[1] = v9;
  uint64_t v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 352);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 360);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

__CFString *FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererCellStackLayoutRegion <FigCaptionRendererRegionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_SetRegionID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_GetRegionID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_SetWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_GetWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 32);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_SetLines(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_GetLines(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  __n128 v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 56);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_GetRegionAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 64);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  __n128 v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 72);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererRegionProtocol_GetViewportAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererRegionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

__CFString *FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererStackLayoutRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererCellStackLayoutRegion <FigCaptionRendererStackLayoutRegionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererCellStackLayoutRegion_FigCaptionRendererStackLayoutRegionProtocol_SetAnimationEnabled(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererStackLayoutRegionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t RegisterFigCaptionRendererCellStackLayoutRegionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererCellStackLayoutRegionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererCellStackLayoutRegion]");
}

uint64_t FigCreateClosedCaptionRenderPipeline(const opaqueCMFormatDescription *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, const __CFDictionary *a7, CFTypeRef *a8)
{
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a3) {
    BOOL v13 = a2 != 0;
  }
  else {
    BOOL v13 = 0;
  }
  if ((a2 != 0) != (a3 != 0) || (a5 ? (BOOL v14 = a4 != 0) : (BOOL v14 = 0), (a4 != 0) != (a5 != 0)))
  {
LABEL_29:
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_26;
  }
  uint64_t v15 = *MEMORY[0x1E4F1CF80];
  FigRenderPipelineGetClassID();
  uint64_t v16 = CMDerivedObjectCreate();
  if (!v16)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(unsigned char *)(DerivedStorage + 1) = 1;
    *(void *)(DerivedStorage + 8) = FigSimpleMutexCreate();
    uint64_t v16 = FigCEA608CaptionDecoderCreate(v15, a1, (uint64_t)ccrp_closedCaptionCallbackFromClosedCaptionRenderPipeline, (uint64_t)cf, 0, DerivedStorage + 16);
    if (!v16)
    {
      if (a1) {
        CFTypeRef v18 = CFRetain(a1);
      }
      else {
        CFTypeRef v18 = 0;
      }
      *(void *)(DerivedStorage + 32) = v18;
      if (!v13
        || (*(void *)(DerivedStorage + 40) = a2,
            uint64_t v19 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
            (*(void *)(DerivedStorage + 48) = v19) != 0))
      {
        *(_DWORD *)(DerivedStorage + 24) = 1681272888;
        long long v20 = *a6;
        *(void *)(DerivedStorage + 96) = *((void *)a6 + 2);
        *(_OWORD *)(DerivedStorage + 80) = v20;
        long long v30 = *a6;
        uint64_t v31 = *((void *)a6 + 2);
        uint64_t v16 = FigSimpleRenderPipelineCreateWithCallback(v15, (uint64_t)ccrp_feedClosedCaptionSampleToParserAndRenderIfNecessary, 0, (uint64_t)cf, (uint64_t)&v30, a7, (void *)(DerivedStorage + 56));
        if (v16) {
          goto LABEL_26;
        }
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*(void *)(DerivedStorage + 56));
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        uint64_t v24 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v23 + 48);
        if (!v24)
        {
          uint64_t v16 = 4294954514;
          goto LABEL_26;
        }
        uint64_t v16 = v24(FigBaseObject, @"SourceSampleBufferQueue", v15, DerivedStorage + 64);
        if (v16) {
          goto LABEL_26;
        }
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterAddListener();
        if (!v14
          || (*(void *)(DerivedStorage + 128) = a4,
              uint64_t v25 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
              (*(void *)(DerivedStorage + 136) = v25) != 0))
        {
          uint64_t v16 = 0;
          *a8 = cf;
          return v16;
        }
      }
      goto LABEL_29;
    }
  }
LABEL_26:
  if (cf) {
    CFRelease(cf);
  }
  return v16;
}

void ccrp_closedCaptionCallbackFromClosedCaptionRenderPipeline(uint64_t a1, const __CFDictionary *a2, CMTime *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 40))
  {
    uint64_t v9 = DerivedStorage;
    uint64_t v10 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v10)
    {
      uint64_t v11 = (const void *)v10;
      CFTypeRef cf = 0;
      uint64_t v12 = *(void *)(CMBaseObjectGetDerivedStorage() + 144);
      if (!v12) {
        goto LABEL_21;
      }
      uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v12);
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v15 = v14 ? v14 : 0;
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v15 + 48);
      if (!v16) {
        goto LABEL_21;
      }
      int v17 = v16(FigBaseObject, 0x1EE56ACD8, *MEMORY[0x1E4F1CF80], &cf);
      CFTypeRef v18 = cf;
      if (v17) {
        BOOL v19 = 0;
      }
      else {
        BOOL v19 = *MEMORY[0x1E4F1CFD0] == (void)cf;
      }
      char v20 = v19;
      if (cf) {
        CFRelease(cf);
      }
      char v21 = v20 ^ 1;
      if (!a2) {
        char v21 = 1;
      }
      if ((v21 & 1) == 0)
      {
        MutableCopCGFloat y = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
        CFDictionarySetValue(MutableCopy, @"H", v18);
        uint64_t v23 = *(void (**)(const void *, uint64_t, __CFDictionary *, long long *, const void *))(v9 + 40);
        long long v27 = *(_OWORD *)&a3->value;
        CMTimeEpoch epoch = a3->epoch;
        v23(a4, a1, MutableCopy, &v27, v11);
        if (MutableCopy) {
          CFRelease(MutableCopy);
        }
      }
      else
      {
LABEL_21:
        uint64_t v24 = *(void (**)(const void *, uint64_t, const __CFDictionary *, long long *, const void *))(v9 + 40);
        long long v25 = *(_OWORD *)&a3->value;
        CMTimeEpoch v26 = a3->epoch;
        v24(a4, a1, a2, &v25, v11);
      }
      CFRelease(v11);
    }
  }
}

uint64_t ccrp_feedClosedCaptionSampleToParserAndRenderIfNecessary(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v19, 0, sizeof(v19));
  CMTimebaseGetTime(&v19, *(CMTimebaseRef *)(DerivedStorage + 72));
  if (*(unsigned char *)DerivedStorage) {
    return FigSignalErrorAt();
  }
  CFTypeRef v5 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F258], 0);
  CFTypeRef v6 = CMGetAttachment(a2, (CFStringRef)*MEMORY[0x1E4F1F2B8], 0);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  uint64_t v7 = *(void *)(DerivedStorage + 16);
  if (v7)
  {
    if (v5)
    {
      CMTime v18 = v19;
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v12 = *(void (**)(uint64_t, CMTime *))(v9 + 24);
      if (v12)
      {
        CMTime v20 = v18;
        v12(v7, &v20);
      }
    }
    else
    {
      if (v6)
      {
        CMTime v17 = v19;
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        BOOL v13 = *(void (**)(uint64_t, CMTime *))(v11 + 24);
        if (v13)
        {
          CMTime v20 = v17;
          v13(v7, &v20);
        }
        uint64_t v7 = *(void *)(DerivedStorage + 16);
      }
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(unsigned int (**)(uint64_t, opaqueCMSampleBuffer *))(v15 + 8);
      if (v16 && !v16(v7, a2)) {
        ccrp_feedCaptionDataToParser();
      }
    }
  }
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
}

uint64_t ccrp_resetOutput(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 128))
  {
    uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      CFTypeRef v5 = (const void *)v4;
      (*(void (**)(uint64_t, uint64_t))(DerivedStorage + 128))(a2, v4);
      CFRelease(v5);
    }
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
  uint64_t v6 = *(void *)(DerivedStorage + 16);
  if (v6)
  {
    CMTimebaseGetTime(&v11, *(CMTimebaseRef *)(DerivedStorage + 72));
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(void (**)(uint64_t, CMTime *))(v8 + 24);
    if (v9)
    {
      CMTime v12 = v11;
      v9(v6, &v12);
    }
  }
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
}

uint64_t figClosedCaptionRenderPipelineInvalidate()
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage)
  {
    uint64_t v1 = (CFTypeRef *)DerivedStorage;
    if (!*DerivedStorage)
    {
      *uint64_t DerivedStorage = 1;
      ccrp_tearDownFeedingSource();
      if (v1[8])
      {
        CMNotificationCenterGetDefaultLocalCenter();
        CMNotificationCenterRemoveListener();
        CFRelease(v1[8]);
        v1[8] = 0;
      }
      CFTypeRef v2 = v1[7];
      if (v2)
      {
        uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(v2);
        if (FigBaseObject)
        {
          uint64_t v4 = FigBaseObject;
          uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v6 = v5 ? v5 : 0;
          uint64_t v7 = *(void (**)(uint64_t))(v6 + 24);
          if (v7) {
            v7(v4);
          }
        }
        CFRelease(v1[7]);
        v1[7] = 0;
      }
      MEMORY[0x19970E910](v1[1]);
      CFTypeRef v8 = v1[1];
      CFTypeRef v9 = v1[2];
      v1[2] = 0;
      MEMORY[0x19970E930](v8);
      if (v9) {
        CFRelease(v9);
      }
      CFTypeRef v10 = v1[9];
      if (v10)
      {
        CFRelease(v10);
        v1[9] = 0;
      }
      CFTypeRef v11 = v1[4];
      if (v11)
      {
        CFRelease(v11);
        v1[4] = 0;
      }
    }
  }
  return 0;
}

void figClosedCaptionRenderPipelineFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 1) = 1;
  figClosedCaptionRenderPipelineInvalidate();
  uint64_t v1 = *(const void **)(DerivedStorage + 48);
  if (v1) {
    CFRelease(v1);
  }
  CFTypeRef v2 = *(const void **)(DerivedStorage + 136);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 144);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 144) = 0;
  }
  if (*(void *)(DerivedStorage + 8))
  {
    FigSimpleMutexDestroy();
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v4 = *(void **)(DerivedStorage + 120);
  if (v4)
  {
    os_release(v4);
    *(void *)(DerivedStorage + 120) = 0;
  }
}

__CFString *figClosedCaptionRenderPipelineCopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigClosedCaptionRenderPipeline %p>", a1);
  return Mutable;
}

uint64_t figClosedCaptionRenderPipelineCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (CFTypeRef v8 = DerivedStorage, !*DerivedStorage))
  {
    if (CFEqual(@"HDRCrossTalker", a2))
    {
      CFTypeRef v10 = (const void *)*((void *)v8 + 18);
      if (v10) {
        CFTypeRef v11 = CFRetain(v10);
      }
      else {
        CFTypeRef v11 = 0;
      }
      uint64_t result = 0;
      *a4 = v11;
    }
    else
    {
      uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*((void *)v8 + 7));
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = *(uint64_t (**)(uint64_t, const void *, uint64_t, void *))(v14 + 48);
      if (v15)
      {
        return v15(FigBaseObject, a2, a3, a4);
      }
      else
      {
        return 4294954514;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figClosedCaptionRenderPipelineSetProperty(uint64_t a1, const void *a2, __CFString *a3)
{
  CFStringRef v3 = a3;
  CMTime values = a3;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (uint64_t v7 = DerivedStorage, *DerivedStorage))
  {
LABEL_3:
    return FigSignalErrorAt();
  }
  if (CFEqual(@"Timebase", a2))
  {
    if (v3)
    {
      CFTypeID TypeID = CMTimebaseGetTypeID();
      if (TypeID != CFGetTypeID(v3)) {
        goto LABEL_24;
      }
    }
    if (*((void *)v7 + 9))
    {
      ccrp_tearDownFeedingSource();
      CFRelease(*((CFTypeRef *)v7 + 9));
    }
    *((void *)v7 + 9) = v3;
    if (v3)
    {
      CFRetain(v3);
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      CFTypeRef v11 = dispatch_queue_create("com.apple.coremedia.ccrenderpipeline", 0);
      *(void *)(v10 + 104) = v11;
      if (!v11) {
        goto LABEL_24;
      }
      dispatch_source_t v12 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v11);
      *(void *)(v10 + 112) = v12;
      if (!v12
        || (uint64_t v13 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject(),
            dispatch_set_context(*(dispatch_object_t *)(v10 + 112), v13),
            dispatch_source_set_cancel_handler_f(*(dispatch_source_t *)(v10 + 112), (dispatch_function_t)ccrp_cancelFeedingHandler), dispatch_source_set_event_handler_f(*(dispatch_source_t *)(v10 + 112), (dispatch_function_t)ccrp_feedingSourceHandler), *(void *)(v10 + 120) = voucher_copy(), dispatch_resume(*(dispatch_object_t *)(v10 + 112)), CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(v10 + 72), *(dispatch_source_t *)(v10 + 112))))
      {
LABEL_24:
        FigSignalErrorAt();
      }
    }
    goto LABEL_25;
  }
  if (!CFEqual(@"CCRPP_ClosedCaptionType", a2))
  {
    if (CFEqual(a2, @"CCRPP_TextHighlightArray"))
    {
      if (v3)
      {
        CFTypeID v20 = CFGetTypeID(v3);
        if (v20 != CFArrayGetTypeID()) {
          goto LABEL_3;
        }
        CFStringRef v3 = (const __CFString *)CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&kQTClosedCaptionTextHighlightArrayKey, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
      uint64_t v21 = FigCFWeakReferenceHolderCopyReferencedObject();
      memset(&v30, 0, sizeof(v30));
      CMTimebaseGetTime(&v30, *((CMTimebaseRef *)v7 + 9));
      uint64_t v22 = (void (*)(uint64_t, uint64_t, const __CFString *, CMTime *, uint64_t))*((void *)v7 + 5);
      CMTime v29 = v30;
      v22(a1, 8, v3, &v29, v21);
      if (v3)
      {
        CFStringRef v23 = v3;
LABEL_39:
        CFRelease(v23);
      }
    }
    else
    {
      if (!CFEqual(a2, @"HDRCrossTalker")) {
        goto LABEL_25;
      }
      if (!v3) {
        goto LABEL_3;
      }
      CFTypeID v24 = CFGetTypeID(v3);
      if (v24 != FigCrossTalkerGetTypeID()) {
        goto LABEL_3;
      }
      CFStringRef v25 = (const __CFString *)*((void *)v7 + 18);
      *((void *)v7 + 18) = v3;
      CFRetain(v3);
      if (v25)
      {
        CFStringRef v23 = v25;
        goto LABEL_39;
      }
    }
    return 0;
  }
  if (v3)
  {
    CFTypeID v14 = CFGetTypeID(v3);
    if (v14 == CFStringGetTypeID())
    {
      uint64_t valuePtr = 0;
      if (FigClosedCaptionGetClosedCaptionTypeAndChannelNumber(v3, (int *)&valuePtr + 1, (SInt32 *)&valuePtr))
      {
        MEMORY[0x19970E910](*((void *)v7 + 1));
        if (*((_DWORD *)v7 + 6) == HIDWORD(valuePtr))
        {
LABEL_56:
          CFNumberRef v28 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
          FigCaptionDecoderSetProperty(*((void *)v7 + 2), 0x1EE562E98, (uint64_t)v28);
          if (v28) {
            CFRelease(v28);
          }
          goto LABEL_58;
        }
        v30.CMTimeValue value = 0;
        if (HIDWORD(valuePtr) == 1681272888)
        {
          int v15 = FigCEA608CaptionDecoderCreate(*MEMORY[0x1E4F1CF80], *((CMFormatDescriptionRef *)v7 + 4), (uint64_t)ccrp_closedCaptionCallbackFromClosedCaptionRenderPipeline, a1, 0, (uint64_t)&v30);
        }
        else
        {
          if (HIDWORD(valuePtr) != 1681338424)
          {
            CMTimeEpoch v26 = (const void *)*((void *)v7 + 2);
            *((void *)v7 + 2) = 0;
LABEL_52:
            if (v26) {
              CFRelease(v26);
            }
            *((_DWORD *)v7 + 6) = HIDWORD(valuePtr);
            if (v30.value) {
              CFRelease((CFTypeRef)v30.value);
            }
            goto LABEL_56;
          }
          int v15 = FigCEA708CaptionDecoderCreate(*MEMORY[0x1E4F1CF80], *((CMFormatDescriptionRef *)v7 + 4), (uint64_t)ccrp_closedCaptionCallbackFromClosedCaptionRenderPipeline, a1, 0, &v30);
        }
        if (v15)
        {
          FigSignalErrorAt();
LABEL_58:
          MEMORY[0x19970E930](*((void *)v7 + 1));
          goto LABEL_25;
        }
        CMTimeValue value = (const void *)v30.value;
        CMTimeEpoch v26 = (const void *)*((void *)v7 + 2);
        *((void *)v7 + 2) = v30.value;
        if (value) {
          CFRetain(value);
        }
        goto LABEL_52;
      }
    }
  }
LABEL_25:
  uint64_t FigBaseObject = FigRenderPipelineGetFigBaseObject(*((void *)v7 + 7));
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  CMTime v19 = *(uint64_t (**)(uint64_t, const void *, const __CFString *))(v18 + 56);
  if (!v19) {
    return 4294954514;
  }
  LODWORD(result) = v19(FigBaseObject, a2, v3);
  if (result == -12850) {
    return 0;
  }
  else {
    return result;
  }
}

void ccrp_tearDownFeedingSource()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  CFTypeRef v2 = *(NSObject **)(DerivedStorage + 112);
  if (v2)
  {
    CMTimebaseRemoveTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 72), v2);
    dispatch_source_cancel(*(dispatch_source_t *)(v1 + 112));
    CFStringRef v3 = *(NSObject **)(v1 + 112);
    if (v3)
    {
      dispatch_release(v3);
      *(void *)(v1 + 112) = 0;
    }
    uint64_t v4 = *(void **)(v1 + 120);
    if (v4)
    {
      os_release(v4);
      *(void *)(v1 + 120) = 0;
    }
  }
  uint64_t v5 = *(NSObject **)(v1 + 104);
  if (v5)
  {
    dispatch_release(v5);
    *(void *)(v1 + 104) = 0;
  }
}

uint64_t FigCaptionDecoderSetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  FigBytePumpGetFigBaseObject(a1);
  uint64_t v6 = v5;
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v10 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v9 = v10;
  if (v10) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = 0;
  }
  dispatch_source_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 56);
  if (v12)
  {
    return v12(v6, a2, a3);
  }
  return result;
}

void ccrp_cancelFeedingHandler(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void ccrp_feedingSourceHandler(void *a1)
{
  uint64_t v1 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v1)
  {
    CFTypeRef v2 = (const void *)v1;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    os_retain(*(void **)(DerivedStorage + 120));
    voucher_adopt();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 8));
    if (*(void *)(DerivedStorage + 16)) {
      ccrp_feedCaptionDataToParser();
    }
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 8));
    uint64_t v4 = (void *)voucher_adopt();
    os_release(v4);
    CFRelease(v2);
  }
}

uint64_t ccrp_feedCaptionDataToParser()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  CMTime v21 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v20 = v21;
  if (*(unsigned char *)(DerivedStorage + 1))
  {
    *(unsigned char *)(DerivedStorage + 1) = 0;
    CMFormatDescriptionGetMediaType(*(CMFormatDescriptionRef *)(DerivedStorage + 32));
    CMFormatDescriptionGetMediaSubType(*(CMFormatDescriptionRef *)(v1 + 32));
    if (dword_1E9350A50)
    {
      int v19 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  CMTimebaseGetTime(&lhs, *(CMTimebaseRef *)(v1 + 72));
  CMTime rhs = *(CMTime *)(v1 + 80);
  CMTimeAdd(&v21, &lhs, &rhs);
  uint64_t v3 = *(void *)(v1 + 16);
  CMTime v15 = v21;
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v7 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v6 = v7;
  if (v7) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *))(v8 + 16);
  if (v9)
  {
    CMTime v22 = v15;
    uint64_t result = v9(v3, &v22, &v20);
    if (!result && (v20.flags & 1) != 0)
    {
      CMTime v14 = v20;
      CMTime v13 = *(CMTime *)(v1 + 80);
      CMTimeSubtract(&v22, &v14, &v13);
      CMTime v20 = v22;
      uint64_t v10 = *(OpaqueCMTimebase **)(v1 + 72);
      uint64_t v11 = *(NSObject **)(v1 + 112);
      CMTime fireTime = v22;
      uint64_t result = CMTimebaseSetTimerDispatchSourceNextFireTime(v10, v11, &fireTime, 0);
      if (result) {
        return FigSignalErrorAt();
      }
    }
  }
  return result;
}

uint64_t FigCaptionCommandCreatePropertyList(int a1, const __CFDictionary *a2, CFDictionaryRef *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  int valuePtr = a1;
  CFDictionaryRef v15 = 0;
  CMTime keys = @"command";
  uint64_t v17 = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CMTime values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  if (!values) {
    return FigSignalErrorAt();
  }
  if (a2)
  {
    uint64_t v17 = @"data";
    uint64_t v6 = fcc_CommandDictToPropertyList(a2, &v15);
    if (v6)
    {
      uint64_t v7 = v6;
      unsigned int v8 = 1;
      goto LABEL_11;
    }
    unsigned int v8 = 2;
  }
  else
  {
    unsigned int v8 = 1;
  }
  CFDictionaryRef v9 = CFDictionaryCreate(v5, (const void **)&keys, (const void **)&values, v8, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *a3 = v9;
  if (v9) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = FigSignalErrorAt();
  }
LABEL_11:
  uint64_t v10 = v8;
  p_CMTime values = &values;
  do
  {
    if (*p_values) {
      CFRelease(*p_values);
    }
    ++p_values;
    --v10;
  }
  while (v10);
  return v7;
}

uint64_t fcc_CommandDictToPropertyList(const __CFDictionary *a1, CFDictionaryRef *a2)
{
  CFIndex Count = CFDictionaryGetCount(a1);
  CFAllocatorRef v5 = (const void **)malloc_type_calloc(8uLL, Count, 0xCB23FBB2uLL);
  uint64_t v6 = (const void **)malloc_type_calloc(8uLL, Count, 0x306CE7A9uLL);
  uint64_t v7 = malloc_type_calloc(1uLL, Count, 0xF1C850EBuLL);
  unsigned int v8 = v7;
  uint64_t v9 = 0;
  if (v5 && v6 && v7)
  {
    CFDictionaryGetKeysAndValues(a1, v5, v6);
    if (Count >= 1)
    {
      uint64_t v10 = v6;
      uint64_t v11 = v8;
      CFIndex v12 = Count;
      do
      {
        uint64_t v13 = fcc_CommandItemToPropertyList(v10, v11);
        if (v13) {
          goto LABEL_11;
        }
        ++v11;
        ++v10;
      }
      while (--v12);
    }
    CFDictionaryRef v14 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, v6, Count, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *a2 = v14;
    if (!v14)
    {
      uint64_t v13 = FigSignalErrorAt();
LABEL_11:
      uint64_t v9 = v13;
      goto LABEL_12;
    }
    uint64_t v9 = 0;
  }
LABEL_12:
  if (v6 && v8 && Count >= 1)
  {
    CFDictionaryRef v15 = v8;
    uint64_t v16 = v6;
    do
    {
      if (*v15++) {
        CFRelease(*v16);
      }
      ++v16;
      --Count;
    }
    while (Count);
  }
  free(v5);
  free(v6);
  free(v8);
  return v9;
}

uint64_t FigSubtitleSampleCreatePropertyList(const __CFDictionary *a1, int a2, int a3, CFDictionaryRef *a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)CMTime keys = 0u;
  long long v46 = 0u;
  *(_OWORD *)CMTime values = 0u;
  long long v44 = 0u;
  CFDictionaryRef v15 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!a1
    || (CFArrayRef v17 = (const __CFArray *)CFDictionaryGetValue(a1, @"SubtitleContent"),
        CFDictionaryGetValue(a1, @"SubtitleSerializedCaptionGroup"),
        FigCFDictionaryGetCount() < 1))
  {
    unsigned int v30 = 0;
    uint64_t v23 = 0;
    goto LABEL_16;
  }
  if (!v17)
  {
    MutableCopCGFloat y = CFDictionaryCreateMutableCopy(*v15, 0, a1);
    uint64_t v23 = 0;
    if (MutableCopy) {
      goto LABEL_15;
    }
    goto LABEL_33;
  }
  CFTypeRef v41 = a4;
  CFIndex Count = CFArrayGetCount(v17);
  int v19 = v15;
  uint64_t v20 = Count;
  CFAllocatorRef v21 = *v19;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(*v19, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v23 = Mutable;
    if (v20 >= 1)
    {
      CFIndex v24 = 0;
      while (1)
      {
        CMTimeValue value = 0;
        CFAttributedStringRef ValueAtIndex = (const __CFAttributedString *)CFArrayGetValueAtIndex(v17, v24);
        uint64_t v26 = fcc_CommandAttributedStringToPropertyList(ValueAtIndex, (CFDictionaryRef *)&value);
        if (v26) {
          break;
        }
        long long v27 = value;
        CFArrayAppendValue(v23, value);
        if (v27) {
          CFRelease(v27);
        }
        if (v20 == ++v24) {
          goto LABEL_11;
        }
      }
LABEL_34:
      uint64_t v37 = v26;
      unsigned int v35 = 0;
      if (!v23) {
        goto LABEL_27;
      }
      goto LABEL_26;
    }
LABEL_11:
    CFNumberRef v28 = CFDictionaryCreateMutableCopy(v21, 0, a1);
    if (v28)
    {
      MutableCopCGFloat y = v28;
      CFDictionarySetValue(v28, @"SubtitleContent", v23);
      a4 = v41;
      CFDictionaryRef v15 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
LABEL_15:
      keys[0] = @"subtitleSample";
      values[0] = MutableCopy;
      unsigned int v30 = 1;
LABEL_16:
      *(void *)((unint64_t)keys | (8 * v30)) = @"forcedSubtitle";
      uint64_t v31 = (const void *)*MEMORY[0x1E4F1CFD0];
      long long v32 = (const void *)*MEMORY[0x1E4F1CFC8];
      if (a2) {
        long long v33 = (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else {
        long long v33 = (const void *)*MEMORY[0x1E4F1CFC8];
      }
      *(void *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v30 & 1))) = CFRetain(v33);
      keys[v30 + 1] = @"obeySubtitleFormatting";
      if (a3) {
        long long v34 = v31;
      }
      else {
        long long v34 = v32;
      }
      values[v30 + 1] = (void *)CFRetain(v34);
      keys[v30 | 2] = @"textBox";
      v49.origin.CGFloat x = a5;
      v49.origin.CGFloat y = a6;
      v49.size.CGFloat width = a7;
      v49.size.CGFloat height = a8;
      values[v30 | 2] = CGRectCreateDictionaryRepresentation(v49);
      unsigned int v35 = v30 + 3;
      CFDictionaryRef v36 = CFDictionaryCreate(*v15, (const void **)keys, (const void **)values, v30 + 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *a4 = v36;
      if (v36)
      {
        uint64_t v37 = 0;
        if (!v23) {
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v37 = FigSignalErrorAt();
        if (!v23)
        {
LABEL_27:
          if (v35)
          {
            uint64_t v38 = v35;
            uint64_t v39 = values;
            do
            {
              if (*v39) {
                CFRelease(*v39);
              }
              ++v39;
              --v38;
            }
            while (v38);
          }
          return v37;
        }
      }
LABEL_26:
      CFRelease(v23);
      goto LABEL_27;
    }
LABEL_33:
    uint64_t v26 = FigSignalErrorAt();
    goto LABEL_34;
  }

  return FigSignalErrorAt();
}

uint64_t fcc_CommandAttributedStringToPropertyList(const __CFAttributedString *a1, CFDictionaryRef *a2)
{
  keys[3] = *(void **)MEMORY[0x1E4F143B8];
  CFIndex Length = CFAttributedStringGetLength(a1);
  values[0] = @"isCFAttributedString";
  keys[0] = @"isCFAttributedString";
  keys[1] = @"string";
  values[1] = (void *)CFAttributedStringGetString(a1);
  keys[2] = @"attributedTriplets";
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  values[2] = Mutable;
  if (Length >= 1)
  {
    CFIndex v7 = 0;
    do
    {
      longestEffectiveRange.uint64_t location = 0;
      longestEffectiveRange.length = 0;
      v23.uint64_t location = 0;
      v23.length = Length;
      CFDictionaryRef AttributesAndLongestEffectiveRange = CFAttributedStringGetAttributesAndLongestEffectiveRange(a1, v7, v23, &longestEffectiveRange);
      CMTimeValue value = AttributesAndLongestEffectiveRange;
      if (AttributesAndLongestEffectiveRange)
      {
        CFDictionaryRef v9 = AttributesAndLongestEffectiveRange;
        CFNumberRef v10 = CFNumberCreate(v5, kCFNumberCFIndexType, &longestEffectiveRange);
        if (!v10) {
          goto LABEL_12;
        }
        CFNumberRef v11 = v10;
        CFArrayAppendValue(Mutable, v10);
        CFRelease(v11);
        CFNumberRef v12 = CFNumberCreate(v5, kCFNumberCFIndexType, &longestEffectiveRange.length);
        if (!v12) {
          goto LABEL_12;
        }
        CFNumberRef v13 = v12;
        CFArrayAppendValue(Mutable, v12);
        CFRelease(v13);
        uint64_t v14 = fcc_CommandDictToPropertyList(v9, (CFDictionaryRef *)&value);
        if (v14) {
          goto LABEL_13;
        }
        CFDictionaryRef v15 = value;
        CFArrayAppendValue(Mutable, value);
        CFRelease(v15);
      }
      CFIndex v7 = longestEffectiveRange.length + longestEffectiveRange.location;
    }
    while (longestEffectiveRange.length + longestEffectiveRange.location < Length);
  }
  CFDictionaryRef v16 = CFDictionaryCreate(v5, (const void **)keys, (const void **)values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *a2 = v16;
  if (v16)
  {
    uint64_t v17 = 0;
    if (!Mutable) {
      return v17;
    }
    goto LABEL_14;
  }
LABEL_12:
  uint64_t v14 = FigSignalErrorAt();
LABEL_13:
  uint64_t v17 = v14;
  if (Mutable) {
LABEL_14:
  }
    CFRelease(Mutable);
  return v17;
}

CFDictionaryRef FigCaptionCommandCreateFromPropertyList(const void *a1, void *a2, CGColorRef *a3)
{
  if (!a2) {
    goto LABEL_12;
  }
  if (!a3) {
    goto LABEL_12;
  }
  *a3 = 0;
  if (!a1) {
    goto LABEL_12;
  }
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID != CFGetTypeID(a1)) {
    goto LABEL_12;
  }
  CFDateRef Value = CFDictionaryGetValue((CFDictionaryRef)a1, @"command");
  if (!Value) {
    goto LABEL_12;
  }
  unsigned int v8 = Value;
  CFTypeID v9 = CFNumberGetTypeID();
  if (v9 != CFGetTypeID(v8)) {
    goto LABEL_12;
  }
  CFNumberGetValue((CFNumberRef)v8, kCFNumberSInt32Type, a2);
  CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a1, @"data");
  if (!result)
  {
    *a3 = 0;
    return result;
  }
  CFDictionaryRef v11 = result;
  CFTypeID v12 = CFDictionaryGetTypeID();
  if (v12 == CFGetTypeID(v11))
  {
    return (const __CFDictionary *)fcc_CommandPropertyListToDict(v11, a3);
  }
  else
  {
LABEL_12:
    return (const __CFDictionary *)FigSignalErrorAt();
  }
}

uint64_t fcc_CommandPropertyListToDict(const __CFDictionary *a1, CGColorRef *a2)
{
  v37[1] = *MEMORY[0x1E4F143B8];
  CFDateRef Value = CFDictionaryGetValue(a1, @"isCGColor");
  if (Value && CFEqual(Value, @"isCGColor"))
  {
    if (!fcc_CommandPropertyListToColor_sColorspace) {
      fcc_CommandPropertyListToColor_sColorspace = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
    }
    CFAllocatorRef v5 = CFDictionaryGetValue(a1, @"red");
    if (!v5) {
      return FigSignalErrorAt();
    }
    uint64_t v6 = v5;
    CFTypeID TypeID = CFNumberGetTypeID();
    if (TypeID != CFGetTypeID(v6)) {
      return FigSignalErrorAt();
    }
    CFNumberGetValue((CFNumberRef)v6, kCFNumberDoubleType, &valuePtr);
    unsigned int v8 = CFDictionaryGetValue(a1, @"green");
    if (!v8) {
      return FigSignalErrorAt();
    }
    CFTypeID v9 = v8;
    CFTypeID v10 = CFNumberGetTypeID();
    if (v10 != CFGetTypeID(v9)) {
      return FigSignalErrorAt();
    }
    CFNumberGetValue((CFNumberRef)v9, kCFNumberDoubleType, &v35);
    CFDictionaryRef v11 = CFDictionaryGetValue(a1, @"blue");
    if (!v11) {
      return FigSignalErrorAt();
    }
    CFTypeID v12 = v11;
    CFTypeID v13 = CFNumberGetTypeID();
    if (v13 != CFGetTypeID(v12)) {
      return FigSignalErrorAt();
    }
    CFNumberGetValue((CFNumberRef)v12, kCFNumberDoubleType, &v36);
    uint64_t v14 = CFDictionaryGetValue(a1, @"alpha");
    if (v14
      && (CFDictionaryRef v15 = v14, v16 = CFNumberGetTypeID(), v16 == CFGetTypeID(v15))
      && (CFNumberGetValue((CFNumberRef)v15, kCFNumberDoubleType, v37),
          CGColorRef v17 = CGColorCreate((CGColorSpaceRef)fcc_CommandPropertyListToColor_sColorspace, &valuePtr),
          (*a2 = v17) != 0))
    {
      return 0;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  int v19 = CFDictionaryGetValue(a1, @"isCFAttributedString");
  if (!v19 || !CFEqual(v19, @"isCFAttributedString"))
  {
    CFIndex Count = CFDictionaryGetCount(a1);
    CMTime v22 = (const void **)malloc_type_calloc(8uLL, Count, 0x6081EDB3uLL);
    CFRange v23 = (const void **)malloc_type_calloc(8uLL, Count, 0xA4A47022uLL);
    CFIndex v24 = malloc_type_calloc(1uLL, Count, 0x33BA1C08uLL);
    CFStringRef v25 = v24;
    uint64_t v18 = 0;
    if (!v22 || !v23 || !v24) {
      goto LABEL_32;
    }
    CFDictionaryGetKeysAndValues(a1, v22, v23);
    if (Count < 1)
    {
LABEL_28:
      CFDictionaryRef v30 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v22, v23, Count, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *a2 = v30;
      if (v30)
      {
        uint64_t v18 = 0;
        goto LABEL_32;
      }
      uint64_t v29 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v26 = v23;
      long long v27 = v25;
      CFIndex v28 = Count;
      while (1)
      {
        uint64_t v29 = fcc_CommandPropertyListToItem(v26, v27);
        if (v29) {
          break;
        }
        ++v27;
        ++v26;
        if (!--v28) {
          goto LABEL_28;
        }
      }
    }
    uint64_t v18 = v29;
LABEL_32:
    if (v23 && v25 && Count >= 1)
    {
      uint64_t v31 = v25;
      long long v32 = v23;
      do
      {
        if (*v31++) {
          CFRelease(*v32);
        }
        ++v32;
        --Count;
      }
      while (Count);
    }
    free(v22);
    free(v23);
    free(v25);
    return v18;
  }

  return fcc_CommandPropertyListToAttributedString(a1, a2);
}

uint64_t FigSubtitleSampleCreateFromPropertyList(const __CFDictionary *a1, const __CFDictionary **a2, Boolean *a3, Boolean *a4, CGRect *a5)
{
  if (a1)
  {
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID == CFGetTypeID(a1))
    {
      CFBooleanRef v11 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"forcedSubtitle");
      if (a3)
      {
        CFBooleanRef v12 = v11;
        if (v11)
        {
          CFTypeID v13 = CFBooleanGetTypeID();
          if (v13 == CFGetTypeID(v12)) {
            *a3 = CFBooleanGetValue(v12);
          }
        }
      }
      CFBooleanRef v14 = (const __CFBoolean *)CFDictionaryGetValue(a1, @"obeySubtitleFormatting");
      if (a4)
      {
        CFBooleanRef v15 = v14;
        if (v14)
        {
          CFTypeID v16 = CFBooleanGetTypeID();
          if (v16 == CFGetTypeID(v15)) {
            *a4 = CFBooleanGetValue(v15);
          }
        }
      }
      CFDictionaryRef v17 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"textBox");
      if (a5)
      {
        CFDictionaryRef v18 = v17;
        if (v17)
        {
          CFTypeID v19 = CFDictionaryGetTypeID();
          if (v19 == CFGetTypeID(v18)) {
            CGRectMakeWithDictionaryRepresentation(v18, a5);
          }
        }
      }
      CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(a1, @"subtitleSample");
      uint64_t v21 = 0;
      if (!a2 || !v20) {
        return v21;
      }
      CFAllocatorRef v22 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      MutableCopCGFloat y = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v20);
      if (MutableCopy)
      {
        CFDictionaryRef v24 = MutableCopy;
        CFArrayRef v25 = (const __CFArray *)CFDictionaryGetValue(MutableCopy, @"SubtitleContent");
        if (v25)
        {
          CFArrayRef v26 = v25;
          CFIndex Count = CFArrayGetCount(v25);
          CFMutableArrayRef Mutable = CFArrayCreateMutable(v22, 0, MEMORY[0x1E4F1D510]);
          if (!Mutable)
          {
            uint64_t v21 = FigSignalErrorAt();
            goto LABEL_32;
          }
          uint64_t v29 = Mutable;
          if (Count >= 1)
          {
            CFIndex v30 = 0;
            while (1)
            {
              CMTimeValue value = 0;
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v26, v30);
              uint64_t v32 = fcc_CommandPropertyListToAttributedString(ValueAtIndex, (__CFAttributedString **)&value);
              if (v32) {
                break;
              }
              long long v33 = value;
              CFArrayAppendValue(v29, value);
              CFRelease(v33);
              if (Count == ++v30) {
                goto LABEL_24;
              }
            }
            uint64_t v21 = v32;
LABEL_30:
            CFRelease(v29);
LABEL_31:
            if (!v24) {
              return v21;
            }
LABEL_32:
            CFRelease(v24);
            return v21;
          }
LABEL_24:
          CFDictionarySetValue(v24, @"SubtitleContent", v29);
        }
        else
        {
          uint64_t v29 = 0;
        }
        uint64_t v21 = 0;
        *a2 = v24;
        CFDictionaryRef v24 = 0;
        if (!v29) {
          goto LABEL_31;
        }
        goto LABEL_30;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t fcc_CommandPropertyListToAttributedString(const __CFDictionary *a1, __CFAttributedString **a2)
{
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1, @"string");
  if (Value
    && (v5 = Value, CFTypeID v6 = CFStringGetTypeID(), v6 == CFGetTypeID(v5))
    && (CFArrayRef v7 = (const __CFArray *)CFDictionaryGetValue(a1, @"attributedTriplets")) != 0
    && (CFArrayRef v8 = v7, v9 = CFArrayGetTypeID(), v9 == CFGetTypeID(v8))
    && (CFMutableArrayRef Mutable = CFAttributedStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0)) != 0)
  {
    CFBooleanRef v11 = Mutable;
    CFAttributedStringBeginEditing(Mutable);
    v29.uint64_t location = 0;
    v29.length = 0;
    CFAttributedStringReplaceString(v11, v29, v5);
    CFIndex Count = CFArrayGetCount(v8);
    if (Count < 3)
    {
LABEL_16:
      CFAttributedStringEndEditing(v11);
      uint64_t v24 = 0;
      *a2 = v11;
    }
    else
    {
      uint64_t v13 = Count / 3;
      CFIndex v14 = 2;
      while (1)
      {
        uint64_t valuePtr = 0;
        CFTypeRef cf = 0;
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v8, v14 - 2);
        if (!ValueAtIndex) {
          break;
        }
        CFTypeID v16 = ValueAtIndex;
        CFTypeID TypeID = CFNumberGetTypeID();
        if (TypeID != CFGetTypeID(v16)) {
          break;
        }
        CFNumberGetValue((CFNumberRef)v16, kCFNumberIntType, (char *)&valuePtr + 4);
        CFDictionaryRef v18 = CFArrayGetValueAtIndex(v8, v14 - 1);
        if (!v18) {
          break;
        }
        CFTypeID v19 = v18;
        CFTypeID v20 = CFNumberGetTypeID();
        if (v20 != CFGetTypeID(v19)) {
          break;
        }
        CFNumberGetValue((CFNumberRef)v19, kCFNumberIntType, &valuePtr);
        CFTypeRef cf = CFArrayGetValueAtIndex(v8, v14);
        if (!cf) {
          break;
        }
        CFTypeID v21 = CFDictionaryGetTypeID();
        if (v21 != CFGetTypeID(cf)) {
          break;
        }
        uint64_t v22 = fcc_CommandPropertyListToDict((const __CFDictionary *)cf, (CGColorRef *)&cf);
        if (v22) {
          goto LABEL_22;
        }
        v30.length = (int)valuePtr;
        v30.uint64_t location = SHIDWORD(valuePtr);
        CFTypeRef v23 = cf;
        CFAttributedStringSetAttributes(v11, v30, (CFDictionaryRef)cf, 0);
        CFRelease(v23);
        v14 += 3;
        if (!--v13) {
          goto LABEL_16;
        }
      }
      uint64_t v22 = FigSignalErrorAt();
LABEL_22:
      uint64_t v24 = v22;
      CFRelease(v11);
    }
    return v24;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigSubtitleSampleInsertInfoForRenderer(__CFDictionary *a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8, CGFloat a9, uint64_t a10, int a11)
{
  if (!a1) {
    goto LABEL_9;
  }
  if (!a11 || (CGFloat v20 = a2, CGRectIsNull(*(CGRect *)&a2)))
  {
    CGFloat v20 = a6;
    a3 = a7;
    a4 = a8;
    a5 = a9;
  }
  v26.origin.CGFloat x = v20;
  v26.origin.CGFloat y = a3;
  v26.size.CGFloat width = a4;
  v26.size.CGFloat height = a5;
  CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v26);
  if (DictionaryRepresentation)
  {
    CFDictionaryRef v22 = DictionaryRepresentation;
    CFDictionarySetValue(a1, @"kFigSubtitleRenderer_TextBox", DictionaryRepresentation);
    CFTypeRef v23 = (const void **)MEMORY[0x1E4F1CFC8];
    if (a11) {
      CFTypeRef v23 = (const void **)MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(a1, @"kFigSubtitleRenderer_ObeySubtitleFormatting", *v23);
    CFRelease(v22);
    return 0;
  }
  else
  {
LABEL_9:
    return FigSignalErrorAt();
  }
}

uint64_t FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(const __CFDictionary *a1, __CFDictionary **a2, unsigned char *a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  CFDictionaryRef theDict = 0;
  __int16 v21 = 0;
  CGSize v13 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v20.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v20.size = v13;
  uint64_t v14 = FigSubtitleSampleCreateFromPropertyList(a1, &theDict, (Boolean *)&v21 + 1, (Boolean *)&v21, &v20);
  if (v14)
  {
    uint64_t v18 = v14;
    CFTypeID v16 = 0;
    goto LABEL_9;
  }
  if (theDict)
  {
    MutableCopCGFloat y = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
    CFTypeID v16 = MutableCopy;
    if (MutableCopy)
    {
      uint64_t inserted = FigSubtitleSampleInsertInfoForRenderer(MutableCopy, v20.origin.x, v20.origin.y, v20.size.width, v20.size.height, a4, a5, a6, a7, 0, v21);
      if (!inserted)
      {
        if (!a2) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t inserted = FigSignalErrorAt();
    }
    uint64_t v18 = inserted;
    goto LABEL_9;
  }
  CFTypeID v16 = 0;
  if (a2)
  {
LABEL_6:
    *a2 = v16;
    CFTypeID v16 = 0;
  }
LABEL_7:
  uint64_t v18 = 0;
  if (a3) {
    *a3 = HIBYTE(v21);
  }
LABEL_9:
  if (theDict) {
    CFRelease(theDict);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v18;
}

uint64_t fcc_CommandItemToPropertyList(CFTypeRef *a1, unsigned char *a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(*a1))
  {
    uint64_t v5 = fcc_CommandDictToPropertyList(*a1, a1);
LABEL_3:
    uint64_t v6 = v5;
    if (!v5) {
      goto LABEL_40;
    }
    return v6;
  }
  CFTypeID v7 = CFArrayGetTypeID();
  if (v7 == CFGetTypeID(*a1))
  {
    CFArrayRef v8 = (const __CFArray *)*a1;
    CFIndex Count = CFArrayGetCount((CFArrayRef)*a1);
    CFTypeID v10 = (char *)malloc_type_calloc(8uLL, Count, 0xEAD35C01uLL);
    CFBooleanRef v11 = (unsigned __int8 *)malloc_type_calloc(1uLL, Count, 0xB6AFEE03uLL);
    CFBooleanRef v12 = v11;
    uint64_t v6 = 0;
    if (!v10 || !v11)
    {
LABEL_38:
      free(v10);
      free(v12);
      goto LABEL_39;
    }
    v41.uint64_t location = 0;
    v41.length = Count;
    CFArrayGetValues(v8, v41, (const void **)v10);
    if (Count < 1)
    {
LABEL_12:
      CFArrayRef v17 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)v10, Count, MEMORY[0x1E4F1D510]);
      *a1 = v17;
      if (v17)
      {
        uint64_t v6 = 0;
        goto LABEL_33;
      }
      uint64_t v16 = FigSignalErrorAt();
    }
    else
    {
      CFIndex v13 = Count;
      uint64_t v14 = v12;
      CFBooleanRef v15 = v10;
      while (1)
      {
        uint64_t v16 = fcc_CommandItemToPropertyList(v15, v14);
        if (v16) {
          break;
        }
        v15 += 8;
        ++v14;
        if (!--v13) {
          goto LABEL_12;
        }
      }
    }
    uint64_t v6 = v16;
LABEL_33:
    if (Count >= 1)
    {
      CFRange v30 = (CFTypeRef *)v10;
      uint64_t v31 = v12;
      do
      {
        if (*v31++) {
          CFRelease(*v30);
        }
        ++v30;
        --Count;
      }
      while (Count);
    }
    goto LABEL_38;
  }
  CFTypeID v18 = CGColorGetTypeID();
  if (v18 != CFGetTypeID(*a1))
  {
    CFTypeID v27 = CFAttributedStringGetTypeID();
    if (v27 != CFGetTypeID(*a1)) {
      return 0;
    }
    uint64_t v5 = fcc_CommandAttributedStringToPropertyList(*a1, a1);
    goto LABEL_3;
  }
  CFTypeID v19 = (CGColor *)*a1;
  size_t NumberOfComponents = CGColorGetNumberOfComponents((CGColorRef)*a1);
  Components = CGColorGetComponents(v19);
  long long v39 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  CMTime keys = @"isCGColor";
  CMTime values = @"isCGColor";
  if (NumberOfComponents == 4)
  {
    CFDictionaryRef v22 = Components;
    uint64_t v23 = 0;
    *(void *)&long long v38 = @"red";
    *((void *)&v38 + 1) = @"green";
    *(void *)&long long v39 = @"blue";
    *((void *)&v39 + 1) = @"alpha";
    CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      CFNumberRef v25 = CFNumberCreate(v24, kCFNumberDoubleType, &v22[v23]);
      *(void **)((char *)&values + v23 * 8 + 8) = v25;
      if (!v25) {
        break;
      }
      if (++v23 == 4)
      {
        CFDictionaryRef v26 = CFDictionaryCreate(v24, (const void **)&keys, (const void **)&values, 5, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        *a1 = v26;
        if (!v26) {
          break;
        }
        uint64_t v6 = 0;
        goto LABEL_26;
      }
    }
  }
  uint64_t v6 = FigSignalErrorAt();
LABEL_26:
  for (uint64_t i = 8; i != 40; i += 8)
  {
    CFRange v29 = *(void **)((char *)&values + i);
    if (v29) {
      CFRelease(v29);
    }
  }
LABEL_39:
  if (!v6)
  {
LABEL_40:
    uint64_t v6 = 0;
    *a2 = 1;
  }
  return v6;
}

uint64_t fcc_CommandPropertyListToItem(CFTypeRef *a1, unsigned char *a2)
{
  CFTypeID TypeID = CFDictionaryGetTypeID();
  if (TypeID == CFGetTypeID(*a1))
  {
    uint64_t v5 = fcc_CommandPropertyListToDict(*a1, a1);
    if (!v5) {
      goto LABEL_22;
    }
    return v5;
  }
  CFTypeID v6 = CFArrayGetTypeID();
  if (v6 != CFGetTypeID(*a1)) {
    return 0;
  }
  CFArrayRef v7 = (const __CFArray *)*a1;
  CFIndex Count = CFArrayGetCount((CFArrayRef)*a1);
  CFTypeID v9 = (const void **)malloc_type_calloc(8uLL, Count, 0xCEEDCD4EuLL);
  CFTypeID v10 = (unsigned __int8 *)malloc_type_calloc(1uLL, Count, 0x76BB9806uLL);
  CFBooleanRef v11 = v10;
  uint64_t v5 = 0;
  if (v9 && v10)
  {
    v21.uint64_t location = 0;
    v21.length = Count;
    CFArrayGetValues(v7, v21, v9);
    if (Count < 1)
    {
LABEL_11:
      CFArrayRef v16 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v9, Count, MEMORY[0x1E4F1D510]);
      *a1 = v16;
      if (v16)
      {
        uint64_t v5 = 0;
        goto LABEL_16;
      }
      uint64_t v15 = FigSignalErrorAt();
    }
    else
    {
      CFIndex v12 = Count;
      CFIndex v13 = v11;
      uint64_t v14 = v9;
      while (1)
      {
        uint64_t v15 = fcc_CommandPropertyListToItem(v14, v13);
        if (v15) {
          break;
        }
        ++v14;
        ++v13;
        if (!--v12) {
          goto LABEL_11;
        }
      }
    }
    uint64_t v5 = v15;
LABEL_16:
    if (Count >= 1)
    {
      CFArrayRef v17 = v9;
      CFTypeID v18 = v11;
      do
      {
        if (*v18++) {
          CFRelease(*v17);
        }
        ++v17;
        --Count;
      }
      while (Count);
    }
  }
  free(v9);
  free(v11);
  if (!v5)
  {
LABEL_22:
    uint64_t v5 = 0;
    *a2 = 1;
  }
  return v5;
}

uint64_t FigCaptionRendererBasicInputCreate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (a1 && a2 && a3 && a5)
  {
    *a5 = 0;
    FigCaptionRendererInputGetClassID();
    uint64_t v9 = CMDerivedObjectCreate();
    if (!v9)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      DerivedStorage[2] = a1;
      DerivedStorage[3] = a2;
      DerivedStorage[4] = a3;
      DerivedStorage[7] = 0;
      DerivedStorage[5] = 0;
      uint64_t v9 = FigCaptionSerializerCreate();
      if (!v9)
      {
        snprintf(__str, 0x100uLL, "com.apple.coremedia.ckmediainput.messagequeue<%p>", 0);
        dispatch_queue_t v11 = dispatch_queue_create(__str, 0);
        *uint64_t DerivedStorage = v11;
        uint64_t v9 = 0;
        if (v11) {
          *a5 = 0;
        }
      }
    }
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCaptionRendererBasicInputAddSample(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFRetain(a2);
  }
  v5[0] = DerivedStorage;
  v5[1] = a2;
  if (*DerivedStorage) {
    dispatch_sync_f(*DerivedStorage, v5, (dispatch_function_t)digestSubtitleSampleDo);
  }
  return 0;
}

uint64_t FigCaptionRendererBasicInputSetLayoutContext(uint64_t a1, uint64_t a2)
{
  v4[0] = CMBaseObjectGetDerivedStorage();
  v4[1] = a2;
  if (*(void *)v4[0]) {
    dispatch_sync_f(*(dispatch_queue_t *)v4[0], v4, (dispatch_function_t)setLayoutContextDo);
  }
  return 0;
}

void setLayoutContextDo(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v1 = (const void *)a1[1];
  uint64_t v3 = *(const void **)(v2 + 56);
  *(void *)(v2 + 56) = v1;
  if (v1) {
    CFRetain(v1);
  }
  if (v3)
  {
    CFRelease(v3);
  }
}

void figFCRBasicInput_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 56);
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

__CFString *figFCRBasicInput_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptionRendererBasicInput %p>", a1);
  return Mutable;
}

uint64_t start()
{
  return 0;
}

uint64_t stop()
{
  return 0;
}

void digestSubtitleSampleDo(uint64_t *a1)
{
  uint64_t v1 = *a1;
  CFDictionaryRef v2 = (const __CFDictionary *)a1[1];
  CFDictionaryRef theDict = 0;
  char v79 = 0;
  CFTypeRef cf = 0;
  if (FigSubtitleSampleCreateFromPropertyListAndInsertInfoForRenderer(v2, &theDict, &v79, *MEMORY[0x1E4F1DB20], *(CGFloat *)(MEMORY[0x1E4F1DB20] + 8), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 16), *(CGFloat *)(MEMORY[0x1E4F1DB20] + 24)))goto LABEL_81; {
  if (!theDict)
  }
    goto LABEL_80;
  CMTimeValue value = 0;
  uint64_t v3 = (const void **)&unk_1E5793000;
  if (!CFDictionaryGetValueIfPresent(theDict, @"SubtitleSerializedCaptionGroup", (const void **)&value)) {
    goto LABEL_25;
  }
  if (FigCaptionSerializerCreateCaptionGroupFromCFData()) {
    goto LABEL_81;
  }
  if (!cf) {
    goto LABEL_25;
  }
  CFDictionaryRef v4 = theDict;
  CFDictionaryRef v89 = 0;
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable) {
    goto LABEL_25;
  }
  CFArrayRef v7 = Mutable;
  CFDictionaryRef v74 = v2;
  memset(&v88, 0, sizeof(v88));
  CMTimeMake(&v88, 0, 0);
  memset(&v87, 0, sizeof(v87));
  CMTimeMake(&v87, 0, 0);
  CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(v4, @"SubtitleTimeRange");
  if (v8)
  {
    CFArrayRef v9 = v8;
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v8, 0);
    CFDictionaryRef v11 = (const __CFDictionary *)CFArrayGetValueAtIndex(v9, 1);
    memset(&v86, 0, sizeof(v86));
    CMTimeMakeFromDictionary(&v86, ValueAtIndex);
    memset(&v85, 0, sizeof(v85));
    CMTimeMakeFromDictionary(&v85, v11);
    CMTime v88 = v86;
    CMTime v87 = v85;
  }
  Sliceint64_t Count = FigCaptionGroupGetSliceCount();
  CFDictionaryRef v13 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (v13 && (CFMutableDictionaryRef v14 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540])) != 0)
  {
    CFDictionaryRef v15 = v14;
    uint64_t v73 = v4;
    if (SliceCount >= 1)
    {
      for (uint64_t i = 0; i != SliceCount; ++i)
      {
        uint64_t CaptionData = FigCaptionGroupGetCaptionData();
        if (CaptionData)
        {
          uint64_t v18 = CaptionData;
          if (v89)
          {
            CFRelease(v89);
            CFDictionaryRef v89 = 0;
          }
          memset(&v86, 0, sizeof(v86));
          FigCaptionGroupGetDurationBeforeSlice();
          memset(&v85, 0, sizeof(v85));
          FigCaptionGroupGetDurationAfterSlice();
          CMTime v84 = v88;
          CMTime v83 = v87;
          CMTime valuePtr = v86;
          CMTime v81 = v85;
          FigCaptionDataToMarkupBasedAttributedString(v5, v18, (uint64_t)&v84, &v83, &valuePtr, (uint64_t)&v81, &v89, v13, v15);
          CFArrayAppendValue(v7, v89);
        }
      }
    }
    uint64_t v3 = (const void **)&unk_1E5793000;
    CFDictionarySetValue(v73, @"SubtitleContent", v7);
  }
  else
  {
    CFDictionaryRef v15 = 0;
    uint64_t v3 = (const void **)&unk_1E5793000;
    if (!v13) {
      goto LABEL_20;
    }
  }
  CFRelease(v13);
LABEL_20:
  if (v15) {
    CFRelease(v15);
  }
  if (v89) {
    CFRelease(v89);
  }
  CFRelease(v7);
  CFDictionaryRef v2 = v74;
LABEL_25:
  uint64_t v19 = *(void *)(v1 + 56);
  if (v19) {
    FigCaptionRendererLayoutContextSetSubtitleSample(v19, theDict);
  }
  CFDictionaryRef v20 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"SubtitleContentMetadata");
  if (v20)
  {
    CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue(v20, (const void *)*MEMORY[0x1E4F1F818]);
    int64_t Count = CFDictionaryGetCount(v21);
    if (Count >= 1)
    {
      size_t v23 = Count;
      CFDictionaryRef v75 = v2;
      CFAllocatorRef v24 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
      CFNumberRef v25 = (const void **)malloc_type_calloc(v23, 8uLL, 0xC0040B8AA526DuLL);
      CFDictionaryGetKeysAndValues(v21, v24, v25);
      uint64_t v26 = 0;
      CFDictionaryRef v71 = (void *)*MEMORY[0x1E4F1F8A0];
      keCGFloat y = (void *)*MEMORY[0x1E4F1F888];
      signed int v70 = (void *)*MEMORY[0x1E4F1F890];
      do
      {
        CFTypeID v27 = v25[v26];
        if (v27)
        {
          CFTypeID v28 = CFGetTypeID(v27);
          if (v28 == CFDictionaryGetTypeID())
          {
            CFRange v29 = v24[v26];
            if (v29)
            {
              CFTypeID v30 = CFGetTypeID(v29);
              if (v30 == CFStringGetTypeID())
              {
                uint64_t v31 = v24[v26];
                CFDictionaryRef v32 = (const __CFDictionary *)v25[v26];
                v88.CMTimeValue value = 0;
                FigCaptionRendererStackLayoutRegionCreate(&v88);
                v87.CMTimeValue value = 0;
                LODWORD(valuePtr.CFDictionarySetValue(theDict, key, value) = 0;
                v86.CMTimeValue value = 0;
                v85.CMTimeValue value = 0;
                v84.CMTimeValue value = 0;
                v83.CMTimeValue value = 0;
                CMTimeValue v33 = v88.value;
                FigCaptionRendererRegionProtocolGetProtocolID();
                Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
                if (ProtocolVTable)
                {
                  uint64_t v35 = *(void *)(ProtocolVTable + 16);
                  if (v35)
                  {
                    long long v36 = *(void (**)(CMTimeValue, const void *))(v35 + 8);
                    if (v36) {
                      v36(v33, v31);
                    }
                  }
                }
                if (FigCFDictionaryGetCGFloatIfPresent())
                {
                  CMTimeValue v37 = v88.value;
                  double v38 = *(double *)&v87.value;
                  FigCaptionRendererRegionProtocolGetProtocolID();
                  uint64_t v39 = CMBaseObjectGetProtocolVTable();
                  if (v39)
                  {
                    uint64_t v40 = *(void *)(v39 + 16);
                    if (v40)
                    {
                      CFRange v41 = *(void (**)(CMTimeValue, void))(v40 + 24);
                      if (v41) {
                        v41(v37, (int)v38);
                      }
                    }
                  }
                  CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(v32, key);
                  if (v42)
                  {
                    CFNumberGetValue(v42, kCFNumberIntType, &valuePtr);
                    CMTimeValue v43 = v88.value;
                    uint64_t value_low = LODWORD(valuePtr.value);
                    FigCaptionRendererRegionProtocolGetProtocolID();
                    uint64_t v45 = CMBaseObjectGetProtocolVTable();
                    if (v45)
                    {
                      uint64_t v46 = *(void *)(v45 + 16);
                      if (v46)
                      {
                        uint64_t v47 = *(void (**)(CMTimeValue, uint64_t))(v46 + 40);
                        if (v47) {
                          v47(v43, value_low);
                        }
                      }
                    }
                    if (CFDictionaryGetValue(v32, v71)
                      && FigCFDictionaryGetCGFloatIfPresent()
                      && FigCFDictionaryGetCGFloatIfPresent())
                    {
                      CMTimeValue v48 = v88.value;
                      double v49 = *(double *)&v86.value;
                      double v50 = *(double *)&v85.value;
                      FigCaptionRendererRegionProtocolGetProtocolID();
                      uint64_t v51 = CMBaseObjectGetProtocolVTable();
                      if (v51)
                      {
                        uint64_t v52 = *(void *)(v51 + 16);
                        if (v52)
                        {
                          char v53 = *(void (**)(CMTimeValue, double, double))(v52 + 72);
                          if (v53) {
                            v53(v48, v49, 100.0 - v50);
                          }
                        }
                      }
                      if (CFDictionaryGetValue(v32, v70)
                        && FigCFDictionaryGetCGFloatIfPresent()
                        && FigCFDictionaryGetCGFloatIfPresent())
                      {
                        CMTimeValue v54 = v88.value;
                        double v55 = *(double *)&v84.value;
                        double v56 = *(double *)&v83.value;
                        FigCaptionRendererRegionProtocolGetProtocolID();
                        uint64_t v57 = CMBaseObjectGetProtocolVTable();
                        if (v57)
                        {
                          uint64_t v58 = *(void *)(v57 + 16);
                          if (v58)
                          {
                            double v59 = *(void (**)(CMTimeValue, double, double))(v58 + 56);
                            if (v59) {
                              v59(v54, v55, v56);
                            }
                          }
                        }
                        uint64_t v60 = *(void *)(v1 + 56);
                        if (v60) {
                          FigCaptionRendererLayoutContextSetMapping(v60, (const void *)v88.value, v32);
                        }
                        (*(void (**)(CMTimeValue, void))(v1 + 24))(v88.value, *(void *)(v1 + 32));
                      }
                    }
                  }
                }
              }
            }
          }
        }
        ++v26;
      }
      while (v23 != v26);
      free(v24);
      free(v25);
      CFDictionaryRef v2 = v75;
      uint64_t v3 = (const void **)&unk_1E5793000;
    }
  }
  int v76 = 0;
  CFNumberRef v61 = (const __CFNumber *)CFDictionaryGetValue(theDict, @"SubtitleFormat");
  CFNumberGetValue(v61, kCFNumberSInt32Type, &v76);
  uint64_t v62 = 4;
  if (v76 != 1937142900 && v76 != 2004251764 && v76 != 2021028980) {
    uint64_t v62 = 3;
  }
  CFArrayRef v63 = (const __CFArray *)CFDictionaryGetValue(theDict, v3[7]);
  if (v63)
  {
    CFArrayRef v64 = v63;
    CFIndex v65 = CFArrayGetCount(v63);
    if (v65)
    {
      CFIndex v66 = v65;
      if (v65 >= 1)
      {
        for (CFIndex j = 0; j != v66; ++j)
        {
          CFAttributedStringRef v68 = (const __CFAttributedString *)CFArrayGetValueAtIndex(v64, j);
          if (v68)
          {
            CFAttributedStringRef v69 = v68;
            if (CFAttributedStringGetLength(v68)) {
              outputCueAsFigCaptionRendererCaption(v1, v62, v69, theDict);
            }
          }
        }
      }
      goto LABEL_81;
    }
LABEL_80:
    outputCueAsFigCaptionRendererCaption(v1, 5, 0, 0);
  }
LABEL_81:
  if (v2) {
    CFRelease(v2);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (cf) {
    CFRelease(cf);
  }
}

void outputCueAsFigCaptionRendererCaption(uint64_t a1, uint64_t a2, const __CFAttributedString *a3, CFDictionaryRef theDict)
{
  CFTypeRef cf = 0;
  if (theDict)
  {
    CFStringRef Value = CFDictionaryGetValue(theDict, @"kFigSubtitleRenderer_TextBox");
    CFArrayRef v9 = CFDictionaryGetValue(theDict, @"SubtitleExtendedLanguageTag");
    CFDictionaryGetValue(theDict, @"kFigSubtitleRenderer_ObeySubtitleFormatting");
  }
  else
  {
    CFStringRef Value = 0;
    CFArrayRef v9 = 0;
  }
  effectiveRange.uint64_t location = 0;
  effectiveRange.length = 0;
  FigCaptionRendererCaptionCreate(&cf);
  CFTypeRef v10 = cf;
  FigCaptionRendererCaptionProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v12 = *(void *)(ProtocolVTable + 16);
    if (v12)
    {
      CFDictionaryRef v13 = *(void (**)(CFTypeRef, uint64_t))(v12 + 40);
      if (v13) {
        v13(v10, a2);
      }
    }
  }
  if (a2 == 5)
  {
    (*(void (**)(CFTypeRef, void))(a1 + 16))(cf, *(void *)(a1 + 32));
LABEL_10:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_44;
  }
  if (!a3) {
    goto LABEL_10;
  }
  CFTypeRef v15 = cf;
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t v16 = CMBaseObjectGetProtocolVTable();
  if (v16)
  {
    uint64_t v17 = *(void *)(v16 + 16);
    if (v17)
    {
      uint64_t v18 = *(void (**)(CFTypeRef, const void *))(v17 + 56);
      if (v18) {
        v18(v15, v9);
      }
    }
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFTypeRef v19 = cf;
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t v20 = CMBaseObjectGetProtocolVTable();
  if (v20)
  {
    uint64_t v21 = *(void *)(v20 + 16);
    if (v21)
    {
      CFDictionaryRef v22 = *(void (**)(CFTypeRef, __CFDictionary *))(v21 + 8);
      if (v22) {
        v22(v19, Mutable);
      }
    }
  }
  CFTypeRef Attribute = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F690], &effectiveRange);
  if (Attribute) {
    CFDictionarySetValue(Mutable, @"region", Attribute);
  }
  if (Value) {
    CFDictionarySetValue(Mutable, @"textbox", Value);
  }
  if (a2 == 4)
  {
    CFAllocatorRef v24 = (const void *)*MEMORY[0x1E4F1F720];
    CFTypeRef v25 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F720], &effectiveRange);
    if (v25) {
      CFDictionarySetValue(Mutable, v24, v25);
    }
    uint64_t v26 = (const void *)*MEMORY[0x1E4F1F700];
    CFTypeRef v27 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F700], &effectiveRange);
    if (v27) {
      CFDictionarySetValue(Mutable, v26, v27);
    }
    CFTypeID v28 = (const void *)*MEMORY[0x1E4F1F668];
    CFTypeRef v29 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F668], &effectiveRange);
    if (v29) {
      CFDictionarySetValue(Mutable, v28, v29);
    }
    CFTypeID v30 = (const void *)*MEMORY[0x1E4F1F660];
    CFTypeRef v31 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F660], &effectiveRange);
    if (v31) {
      CFDictionarySetValue(Mutable, v30, v31);
    }
    CFDictionaryRef v32 = (const void *)*MEMORY[0x1E4F1F5B8];
    CFTypeRef v33 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F5B8], &effectiveRange);
    if (v33) {
      CFDictionarySetValue(Mutable, v32, v33);
    }
    long long v34 = (const void *)*MEMORY[0x1E4F1F5C0];
    CFTypeRef v35 = CFAttributedStringGetAttribute(a3, 0, (CFStringRef)*MEMORY[0x1E4F1F5C0], &effectiveRange);
    if (v35) {
      CFDictionarySetValue(Mutable, v34, v35);
    }
  }
  CFTypeRef v36 = cf;
  FigCaptionRendererCaptionProtocolGetProtocolID();
  uint64_t v37 = CMBaseObjectGetProtocolVTable();
  if (v37)
  {
    uint64_t v38 = *(void *)(v37 + 16);
    if (v38)
    {
      uint64_t v39 = *(void (**)(CFTypeRef, const __CFAttributedString *))(v38 + 24);
      if (v39) {
        v39(v36, a3);
      }
    }
  }
  uint64_t v40 = *(void *)(a1 + 56);
  if (v40) {
    FigCaptionRendererLayoutContextSetMapping(v40, cf, a3);
  }
  (*(void (**)(CFTypeRef, void))(a1 + 16))(cf, *(void *)(a1 + 32));
LABEL_44:
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

uint64_t FigPhotoCreateIntegerPixelBufferFromFullPrecisionSource()
{
  return MEMORY[0x1F410D648]();
}

uint64_t FigPhotoCreateCompressionCompatiblePixelBuffer()
{
  return MEMORY[0x1F410D638]();
}

uint64_t FigPhotoCreateFractionalPixelBuffer()
{
  return MEMORY[0x1F410D640]();
}

uint64_t FigPhotoAuxiliaryImageMetadataCreateXMPData()
{
  return MEMORY[0x1F410D4D0]();
}

uint64_t FigPhotoAuxiliaryImageMetadataCreateFromXMPData()
{
  return MEMORY[0x1F410D4C8]();
}

uint64_t captionRendererDidChangeCaptionsNotification(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return [a2 updateDisplay:a4];
}

void __getDisplayScale_block_invoke()
{
  CFNumberRef v0 = (const __CFNumber *)MGCopyAnswer();
  if (v0)
  {
    CFNumberRef v1 = v0;
    CFTypeID v2 = CFGetTypeID(v0);
    if (v2 == CFNumberGetTypeID()) {
      CFNumberGetValue(v1, kCFNumberCGFloatType, &sMaxDisplayScale);
    }
    CFRelease(v1);
  }
}

uint64_t FigIFFPictureCollectionWriterCreateWithMovieSampleDataWriter(const void *a1, const void *a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  if (a1)
  {
    if (a2 && a5)
    {
      FigPictureCollectionWriterGetClassID();
      uint64_t v10 = CMDerivedObjectCreate();
      if (v10)
      {
        uint64_t v14 = v10;
        FigSignalErrorAt();
        goto LABEL_19;
      }
      char v16 = 0;
      uint64_t v11 = iffpcwGetWriteFileTypeOptions(a3, 0, &v16);
      if (!v11)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        CFTypeRef v13 = a4 ? CFRetain(a4) : 0;
        *(void *)uint64_t DerivedStorage = v13;
        *(void *)(DerivedStorage + 8) = CFRetain(a1);
        *(void *)(DerivedStorage + 16) = CFRetain(a2);
        *(unsigned char *)(DerivedStorage + 40) = v16;
        uint64_t v11 = IFFItemInformationCreate((uint64_t)a4, (uint64_t *)(DerivedStorage + 24));
        if (!v11)
        {
          uint64_t v14 = IFFItemHeaderMakerCreateWithIFFItemInformation(a4, *(const void **)(DerivedStorage + 24), (void *)(DerivedStorage + 32));
          if (!v14)
          {
            *a5 = cf;
            return v14;
          }
LABEL_19:
          if (cf) {
            CFRelease(cf);
          }
          return v14;
        }
      }
    }
    else
    {
      uint64_t v11 = FigSignalErrorAt();
    }
    uint64_t v14 = v11;
    goto LABEL_19;
  }

  return FigSignalErrorAt();
}

uint64_t iffpcwGetWriteFileTypeOptions(const void *a1, char *a2, char *a3)
{
  if (!a1) {
    goto LABEL_8;
  }
  CFTypeID v6 = CFGetTypeID(a1);
  if (v6 == CFDictionaryGetTypeID())
  {
    CMTimeValue value = 0;
    if (CFDictionaryGetValueIfPresent((CFDictionaryRef)a1, @"WriteFileType", (const void **)&value))
    {
      if (FigCFEqual())
      {
        char v7 = 0;
        char v8 = 0;
        if (!a2)
        {
LABEL_10:
          uint64_t result = 0;
          if (a3) {
            *a3 = v8;
          }
          return result;
        }
LABEL_9:
        *a2 = v7;
        goto LABEL_10;
      }
      if (!FigCFEqual())
      {
        if (!FigCFEqual()) {
          return FigSignalErrorAt();
        }
        char v7 = 0;
        char v8 = 1;
        if (!a2) {
          goto LABEL_10;
        }
        goto LABEL_9;
      }
    }
LABEL_8:
    char v8 = 0;
    char v7 = 1;
    if (!a2) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }

  return FigSignalErrorAt();
}

uint64_t FigIFFPictureCollectionWriterCreateWithByteStream(const void *a1, const void *a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  if (a1 && a2 && a5)
  {
    char v14 = 0;
    uint64_t v10 = iffpcwGetWriteFileTypeOptions(a3, &v14, 0);
    if (v10) {
      return v10;
    }
    uint64_t v11 = MovieSampleDataWriterCreate(a4, a2, 0, 0, v14 != 0, 3u, (uint64_t *)&cf);
    CFTypeRef v12 = cf;
    if (!v11)
    {
      uint64_t v11 = MovieSampleDataWriterSetDefaultByteStream((uint64_t)cf, a1);
      CFTypeRef v12 = cf;
      if (!v11)
      {
        uint64_t v11 = FigIFFPictureCollectionWriterCreateWithMovieSampleDataWriter(cf, a2, a3, a4, a5);
        CFTypeRef v12 = cf;
      }
    }
    if (v12) {
      CFRelease(v12);
    }
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void iffpcw_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFNumberRef v1 = *(const void **)(DerivedStorage + 8);
  if (v1) {
    CFRelease(v1);
  }
  CFTypeID v2 = *(const void **)(DerivedStorage + 16);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 24);
  if (v3) {
    CFRelease(v3);
  }
  IFFItemHeaderMakerRelease(*(const __CFAllocator ***)(DerivedStorage + 32));
  CFDictionaryRef v4 = *(const void **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    CFRelease(v4);
  }
}

__CFString *iffpcw_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<IFFPictureCollectionWriter %p>", a1);
  return Mutable;
}

uint64_t iffpcw_CopyProperty(uint64_t a1, uint64_t a2, const __CFAllocator *a3, CFMutableArrayRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v8 = DerivedStorage;
    if (FigCFEqual())
    {
      uint64_t v9 = *(void *)(v8 + 8);
      return MovieSampleDataWriterCopyMajorBrand(v9, a4);
    }
    if (FigCFEqual())
    {
      uint64_t v11 = *(void *)(v8 + 8);
      return MovieSampleDataWriterCopyMinorVersion(v11, a4);
    }
    if (FigCFEqual())
    {
      uint64_t v12 = *(void *)(v8 + 8);
      return MovieSampleDataWriterCopyCompatibleBrands(v12, a4);
    }
    if (FigCFEqual())
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t FirstMediaDataAtomOffset = MovieSampleDataWriterGetFirstMediaDataAtomOffset(*(void *)(v8 + 8), 1, &v19);
      if (!FirstMediaDataAtomOffset)
      {
        uint64_t FirstMediaDataAtomOffset = MovieSampleDataWriterGetLengthOfDefaultByteStream(*(uint64_t **)(v8 + 8), &v18);
        if (!FirstMediaDataAtomOffset)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 2, MEMORY[0x1E4F1D510]);
          if (Mutable)
          {
            CFMutableArrayRef v15 = Mutable;
            uint64_t appended = FigCFArrayAppendInt64();
            if (appended)
            {
              uint64_t v17 = appended;
            }
            else
            {
              uint64_t v17 = FigCFArrayAppendInt64();
              if (!v17)
              {
                *a4 = v15;
                return v17;
              }
            }
            CFRelease(v15);
            return v17;
          }
          return FigSignalErrorAt();
        }
      }
      return FirstMediaDataAtomOffset;
    }
    return 4294954512;
  }

  return FigSignalErrorAt();
}

uint64_t iffpcw_SetProperty(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v6 = DerivedStorage;
    if (FigCFEqual())
    {
      uint64_t v7 = *(void *)(v6 + 8);
      return MovieSampleDataWriterSetMajorBrand(v7, a3);
    }
    else if (FigCFEqual())
    {
      uint64_t v9 = *(void *)(v6 + 8);
      return MovieSampleDataWriterSetMinorVersion(v9, a3);
    }
    else if (FigCFEqual())
    {
      uint64_t v10 = *(void *)(v6 + 8);
      return MovieSampleDataWriterSetCompatibleBrands(v10, a3);
    }
    else
    {
      return 4294954512;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t iffpcw_AppendHeader()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t v1 = IFFItemHeaderMakerCopyGlobalMetadataAtomAsBlockBuffer(*(void *)(DerivedStorage + 32), *(const __CFAllocator **)DerivedStorage, *(void *)(DerivedStorage + 16), (CMBlockBufferRef *)&cf);
  if (v1)
  {
    uint64_t appended = v1;
  }
  else
  {
    uint64_t appended = MovieSampleDataWriterAppendHeader(*(void *)(DerivedStorage + 8), (OpaqueCMBlockBuffer *)cf, 0);
    if (!appended) {
      MovieSampleDataWriterSynchronizeDefaultByteStream(*(void *)(DerivedStorage + 8), 0, 0);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  return appended;
}

uint64_t iffpcw_WriteHeaderToByteStream()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v8 = 0;
  CFTypeRef cf = 0;
  CMBlockBufferRef blockBufferOut = 0;
  CMBlockBufferRef v5 = 0;
  FigCFDictionaryGetBooleanIfPresent();
  uint64_t appended = MovieSampleDataWriterPatchMediaDataAtomSizeIfNeeded(*(uint64_t **)(DerivedStorage + 8));
  if (!appended)
  {
    uint64_t appended = CMBlockBufferCreateEmpty(*(CFAllocatorRef *)DerivedStorage, 0, 0, &blockBufferOut);
    if (!appended)
    {
      if (!*(unsigned char *)(DerivedStorage + 40)
        || (uint64_t appended = MovieSampleDataWriterCopyFileTypeAtomAsBlockBuffer(*(const __CFNumber ***)(DerivedStorage + 8), *(const __CFAllocator **)DerivedStorage, (CMBlockBufferRef *)&cf), !appended)&& (uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, (CMBlockBufferRef)cf, 0, 0, 0), !appended))
      {
        uint64_t appended = IFFItemHeaderMakerCopyGlobalMetadataAtomAsBlockBuffer(*(void *)(DerivedStorage + 32), *(const __CFAllocator **)DerivedStorage, *(void *)(DerivedStorage + 16), &v5);
        if (!appended)
        {
          uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, v5, 0, 0, 0);
          if (!appended)
          {
            size_t DataLength = CMBlockBufferGetDataLength(blockBufferOut);
            uint64_t appended = CMByteStreamWriteBlockBuffer();
            if (!appended)
            {
              if (DataLength) {
                uint64_t appended = FigSignalErrorAt();
              }
              else {
                uint64_t appended = IFFItemHeaderMakerSetByteCountToAddToItemLocationExtentOffsets(*(void *)(DerivedStorage + 32), 0);
              }
            }
          }
        }
      }
    }
  }
  uint64_t v3 = appended;
  if (v5) {
    CFRelease(v5);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v3;
}

uint64_t iffpcw_AddPicture(uint64_t a1, int a2, const opaqueCMFormatDescription *a3, const __CFDictionary *a4, _DWORD *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3 && a5)
  {
    uint64_t v10 = DerivedStorage;
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    long long v27 = *MEMORY[0x1E4F1DB30];
    int CGSizeIfPresent = FigCFDictionaryGetCGSizeIfPresent();
    int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    int v13 = FigCFDictionaryGetInt32IfPresent();
    uint64_t v26 = a3;
    int v25 = a2;
    CFAllocatorRef v24 = a5;
    uint64_t v14 = v10;
    if (a4) {
      CFStringRef Value = CFDictionaryGetValue(a4, @"PixelInformation");
    }
    else {
      CFStringRef Value = 0;
    }
    int Int16IfPresent = FigCFDictionaryGetInt16IfPresent();
    CFArrayRef v17 = (const __CFArray *)FigCFDictionaryGetValue();
    FigCFDictionaryGetBooleanIfPresent();
    uint64_t v18 = FigCFDictionaryGetValue();
    uint64_t v19 = FigCFDictionaryGetValue();
    if ((v18 == 0) == (v19 == 0))
    {
      uint64_t v20 = v19;
      if (!v18 || !Int16IfPresent)
      {
        if (!FigCFDictionaryGetCFIndexIfPresent())
        {
          int v21 = 0;
          goto LABEL_14;
        }
        if (!v18 && !Int16IfPresent)
        {
          int v21 = 256;
LABEL_14:
          *((void *)&v23 + 1) = v18;
          *(void *)&long long v23 = Value;
          return IFFInformationAddPicture(*(CFArrayRef **)(v14 + 24), v25, v26, (4 * (CGSizeIfPresent != 0)) | (8 * (Int32IfPresent != 0)) | (16 * (v13 != 0)) | ((Int16IfPresent != 0) << 6) | ((v18 != 0) << 7) | v21 | 2u, 0, v17, 0, 0, *(double *)&v27, *((double *)&v27 + 1), v23, (unint64_t)v20, v24);
        }
      }
    }
  }
  else if (((vars8 ^ (2 * vars8)) & 0x4000000000000000) != 0)
  {
    __break(0xC471u);
  }
  return FigSignalErrorAt();
}

uint64_t iffpcw_CopyPictureProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 && a5) {
    return 4294954512;
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t iffpcw_SetPictureProperty(uint64_t a1, int a2, uint64_t a3, const __CFDictionary *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)uint64_t v10 = 0;
  if (a3)
  {
    uint64_t result = IFFInformationGetPictureByID(*(void *)(DerivedStorage + 24), a2, v10);
    if (!result)
    {
      if (FigCFEqual())
      {
        if (a4 && (CFTypeID v9 = CFGetTypeID(a4), v9 == CFDictionaryGetTypeID())) {
          return (uint64_t)IFFPictureSetStereoMetadataProperties(*(uint64_t *)v10, a4);
        }
        else {
          return FigSignalErrorAt();
        }
      }
      else
      {
        return 4294954512;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t iffpcw_AddThumbnailToPicture(uint64_t a1, int a2, int a3, const opaqueCMFormatDescription *a4, const __CFDictionary *a5, _DWORD *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4 && a6)
  {
    uint64_t v12 = DerivedStorage;
    FigCFDictionaryGetBooleanIfPresent();
    int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
    int v14 = FigCFDictionaryGetInt32IfPresent();
    if (a5) {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(a5, @"PixelInformation");
    }
    else {
      CFArrayRef Value = 0;
    }
    return IFFInformationAddThumbnailToPicture(*(CFArrayRef **)(v12 + 24), a2, a3, a4, (8 * (Int32IfPresent != 0)) | (16 * (v14 != 0)) | 2u, 0, 0, Value, a6);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t iffpcw_AddAuxiliaryImageToPicture(uint64_t a1, int a2, int a3, const opaqueCMFormatDescription *a4, const __CFDictionary *a5, _DWORD *a6)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a4 || !a6) {
    goto LABEL_21;
  }
  uint64_t v12 = DerivedStorage;
  int v32 = a2;
  int v33 = a3;
  CFTypeRef v31 = a6;
  if (!a5)
  {
    CFTypeID v30 = 0;
LABEL_15:
    BytePtr = 0;
    size_t Length = 0;
    goto LABEL_16;
  }
  if (CFDictionaryContainsKey(a5, @"AuxiliaryImageType"))
  {
    CFArrayRef Value = CFDictionaryGetValue(a5, @"AuxiliaryImageType");
    if (!Value) {
      goto LABEL_21;
    }
    CFTypeID v14 = CFGetTypeID(Value);
    if (v14 != CFStringGetTypeID()) {
      goto LABEL_21;
    }
    uint64_t CStringPtrAndBufferToFree = FigCFStringGetCStringPtrAndBufferToFree();
    if (!CStringPtrAndBufferToFree) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t CStringPtrAndBufferToFree = 0;
  }
  CFTypeID v30 = (const char *)CStringPtrAndBufferToFree;
  if (!CFDictionaryContainsKey(a5, @"AuxiliaryImageSubType")) {
    goto LABEL_15;
  }
  CFDataRef v16 = (const __CFData *)CFDictionaryGetValue(a5, @"AuxiliaryImageSubType");
  if (!v16 || (CFDataRef v17 = v16, v18 = CFGetTypeID(v16), v18 != CFDataGetTypeID()))
  {
LABEL_21:
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_20;
  }
  BytePtr = CFDataGetBytePtr(v17);
  size_t Length = CFDataGetLength(v17);
LABEL_16:
  long long v34 = *MEMORY[0x1E4F1DB30];
  int CGSizeIfPresent = FigCFDictionaryGetCGSizeIfPresent();
  int Int16IfPresent = FigCFDictionaryGetInt16IfPresent();
  CFArrayRef v23 = (const __CFArray *)FigCFDictionaryGetValue();
  int Int32IfPresent = FigCFDictionaryGetInt32IfPresent();
  int v25 = FigCFDictionaryGetInt32IfPresent();
  if (a5) {
    CFArrayRef v26 = (const __CFArray *)CFDictionaryGetValue(a5, @"PixelInformation");
  }
  else {
    CFArrayRef v26 = 0;
  }
  uint64_t v27 = IFFInformationAddAuxiliaryImageToPicture(*(CFArrayRef **)(v12 + 24), v32, v33, a4, (4 * (CGSizeIfPresent != 0)) | ((Int16IfPresent != 0) << 6) | (8 * (Int32IfPresent != 0)) | (16 * (v25 != 0)), 0, v23, 0, *(double *)&v34, *((double *)&v34 + 1), 0, v30, BytePtr, Length, v26, v31);
LABEL_20:
  uint64_t v28 = v27;
  free(0);
  return v28;
}

uint64_t iffpcw_AddSampleBufferToPicture(uint64_t a1, int a2, const __CFDictionary *a3, opaqueCMSampleBuffer *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)CFDictionaryRef v22 = 0;
  if (a4 && (uint64_t v8 = DerivedStorage, (DataBuffer = CMSampleBufferGetDataBuffer(a4)) != 0))
  {
    uint64_t v10 = DataBuffer;
    CGPoint point = (CGPoint)*MEMORY[0x1E4F1DAD8];
    unsigned __int16 v20 = 0;
    CGPoint v19 = point;
    if (a3)
    {
      CMTimeValue value = 0;
      if (CFDictionaryGetValueIfPresent(a3, @"TileGridPosition", (const void **)&value)) {
        BOOL v11 = CGPointMakeWithDictionaryRepresentation((CFDictionaryRef)value, &point);
      }
      else {
        BOOL v11 = 0;
      }
      if (FigCFDictionaryGetInt16IfPresent()
        && (CFDictionaryRef dict = 0, CFDictionaryGetValueIfPresent(a3, @"OverlayItemOffset", (const void **)&dict)))
      {
        BOOL v12 = CGPointMakeWithDictionaryRepresentation(dict, &v19);
        LODWORD(a3) = v12;
        if (v11 && v12) {
          return FigSignalErrorAt();
        }
      }
      else
      {
        LODWORD(a3) = 0;
      }
    }
    else
    {
      BOOL v11 = 0;
    }
    CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(a4);
    uint64_t result = IFFInformationAddAndGetPictureItemFromPicture(*(CFArrayRef **)(v8 + 24), a2, v11, (int)a3, v20, FormatDescription, (uint64_t *)v22, point.x, point.y, v19.x, v19.y);
    if (!result)
    {
      *(_OWORD *)sizeArrayOut = 0u;
      long long v24 = 0u;
      unint64_t NumSamples = CMSampleBufferGetNumSamples(a4);
      if (NumSamples >= 5) {
        return FigSignalErrorAt();
      }
      unint64_t v16 = NumSamples;
      uint64_t result = CMSampleBufferGetSampleSizeArray(a4, NumSamples, sizeArrayOut, 0);
      if (!result) {
        return iffpcwAppendPictureDataBlockBuffer(v8, *(uint64_t *)v22, v10, v16, sizeArrayOut);
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t iffpcw_AddExifToPicture(uint64_t a1, int a2, const __CFData *a3, unsigned int a4)
{
  return iffpcw_AddExifToPictureWithIDOut(a1, a2, a3, a4, 0, 0);
}

uint64_t iffpcw_AddXMPToPicture(uint64_t a1, int a2, uint64_t a3)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 1u, a3, 0, 0, 0, 0, 0);
}

uint64_t iffpcw_AddDebugMetadataToPicture(uint64_t a1, int a2, uint64_t a3)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 2u, a3, 0, 0, 0, 0, 0);
}

uint64_t iffpcw_AddGroup(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v10 = 0;
  if (a2)
  {
    uint64_t v7 = DerivedStorage;
    if (FigCFEqual())
    {
      int v8 = 1937007986;
      goto LABEL_6;
    }
    if (FigCFEqual())
    {
      int v8 = 1634497650;
LABEL_6:
      uint64_t result = IFFInformationAddGroup(*(void *)(v7 + 24), v8, &v10);
      if (a4)
      {
        if (!result) {
          *a4 = v10;
        }
      }
      return result;
    }
  }

  return FigSignalErrorAt();
}

uint64_t iffpcw_AddPictureToGroup(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);

  return IFFInformationAddPictureToGroup(v5, a2, a3);
}

uint64_t iffpcw_AddCustomMetadataToPicture(uint64_t a1, int a2, uint64_t a3, const __CFString *a4, const __CFString *a5)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 3u, a3, 0, a4, a5, 0, 0);
}

uint64_t iffpcw_AddExifWithEncodingToPicture(uint64_t a1, int a2, const __CFData *a3, unsigned int a4, uint64_t a5)
{
  return iffpcw_AddExifToPictureWithIDOut(a1, a2, a3, a4, a5, 0);
}

uint64_t iffpcw_AddXMPWithEncodingToPicture(uint64_t a1, int a2, uint64_t a3, const __CFString *a4)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 1u, a3, 0, 0, 0, a4, 0);
}

uint64_t iffpcw_AddItemReference(uint64_t a1, int a2, const void *a3, int a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3 || (uint64_t v8 = DerivedStorage, v9 = CFGetTypeID(a3), v9 != CFArrayGetTypeID()))
  {
    CFDataRef v17 = 0;
LABEL_33:
    uint64_t v16 = 4294949526;
    goto LABEL_31;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)a3);
  if (Count < 1)
  {
LABEL_36:
    uint64_t v16 = 0;
    goto LABEL_21;
  }
  size_t v11 = Count;
  uint64_t v24 = 0;
  uint64_t ItemByID = IFFInformationGetItemByID(*(void *)(v8 + 24), a2, &v24);
  if (!ItemByID)
  {
    if (a4 > 1684630886)
    {
      if (a4 == 1684630887 || a4 == 1953000802 && *(_DWORD *)(v24 + 64) != 1)
      {
LABEL_19:
        uint64_t ItemByID = FigSignalErrorAt();
        goto LABEL_20;
      }
    }
    else
    {
      if (a4 != 1635088492)
      {
        if (a4 != 1667527523) {
          goto LABEL_23;
        }
        BOOL v13 = 0;
        for (uint64_t i = 0; ; ++i)
        {
          CFArrayRef v15 = *(const __CFArray **)(v24 + 520);
          if (v15) {
            CFArrayRef v15 = (const __CFArray *)CFArrayGetCount(v15);
          }
          if (i >= (uint64_t)v15 || v13) {
            break;
          }
          BOOL v13 = *(_DWORD *)FigCFArrayGetValueAtIndex() != 1667527523;
        }
        if (!v13) {
          goto LABEL_23;
        }
        FigSignalErrorAt();
        goto LABEL_36;
      }
      if (*(_DWORD *)(v24 + 64) != 2) {
        goto LABEL_19;
      }
    }
LABEL_23:
    CFDataRef v17 = (uint64_t *)malloc_type_calloc(v11, 8uLL, 0x2004093837F09uLL);
    if (!v17)
    {
      uint64_t v16 = 4294954450;
      goto LABEL_31;
    }
    uint64_t v18 = 0;
    while (1)
    {
      uint64_t v23 = 0;
      int v22 = 0;
      if (!FigCFArrayGetInt32AtIndex()) {
        goto LABEL_33;
      }
      uint64_t PictureByID = IFFInformationGetPictureByID(*(void *)(v8 + 24), v22, &v23);
      if (PictureByID) {
        goto LABEL_30;
      }
      uint64_t v21 = 0;
      uint64_t PictureByID = IFFInformationGetPictureItem(v23, &v21);
      if (PictureByID) {
        goto LABEL_30;
      }
      v17[v18++] = v21;
      if (v11 == v18)
      {
        uint64_t PictureByID = IFFInformationAddItemReference(*(void *)(v8 + 24), v24, a4, v11, v17);
LABEL_30:
        uint64_t v16 = PictureByID;
        goto LABEL_31;
      }
    }
  }
LABEL_20:
  uint64_t v16 = ItemByID;
LABEL_21:
  CFDataRef v17 = 0;
LABEL_31:
  free(v17);
  return v16;
}

uint64_t iffpcw_AddGroupProperties(uint64_t a1, int a2)
{
  uint64_t v3 = *(CFArrayRef **)(CMBaseObjectGetDerivedStorage() + 24);

  return IFFInformationAddPropertiesToGroup(v3, a2);
}

uint64_t iffpcw_AddGroupToGroup(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = *(void *)(CMBaseObjectGetDerivedStorage() + 24);

  return IFFInformationAddGroupToGroup(v5, a2, a3);
}

uint64_t iffpcw_AddExifToPictureWithIDOut(uint64_t a1, int a2, const __CFData *a3, unsigned int a4, uint64_t a5, _DWORD *a6)
{
  unsigned int sourceBytes = a4;
  CFAllocatorRef v12 = *(const __CFAllocator **)CMBaseObjectGetDerivedStorage();
  CMBlockBufferRef destinationBuffer = 0;
  if (a5)
  {
    uint64_t v14 = FigSignalErrorAt();
  }
  else
  {
    if (a3 && CFDataGetLength(a3) > a4)
    {
      BlockBufferWithCFDataNoCopCGFloat y = CMBlockBufferCreateWithMemoryBlock(v12, 0, 4uLL, v12, 0, 0, 4uLL, 1u, &destinationBuffer);
      if (!BlockBufferWithCFDataNoCopy)
      {
        unsigned int sourceBytes = bswap32(a4);
        BlockBufferWithCFDataNoCopCGFloat y = CMBlockBufferReplaceDataBytes(&sourceBytes, destinationBuffer, 0, 4uLL);
        if (!BlockBufferWithCFDataNoCopy)
        {
          BlockBufferWithCFDataNoCopCGFloat y = FigCreateBlockBufferWithCFDataNoCopy();
          if (!BlockBufferWithCFDataNoCopy)
          {
            BlockBufferWithCFDataNoCopCGFloat y = CMBlockBufferAppendBufferReference(destinationBuffer, 0, 0, 0, 0);
            if (!BlockBufferWithCFDataNoCopy) {
              BlockBufferWithCFDataNoCopCGFloat y = iffpcwAddGenericMetadataToPicture(a1, a2, 0, 0, (unint64_t)destinationBuffer, 0, 0, 0, a6);
            }
          }
        }
      }
    }
    else
    {
      BlockBufferWithCFDataNoCopCGFloat y = FigSignalErrorAt();
    }
    uint64_t v14 = BlockBufferWithCFDataNoCopy;
  }
  if (destinationBuffer) {
    CFRelease(destinationBuffer);
  }
  return v14;
}

uint64_t iffpcw_AddXMPToPictureWithIDOut(uint64_t a1, int a2, uint64_t a3, const __CFString *a4, _DWORD *a5)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 1u, a3, 0, 0, 0, a4, a5);
}

uint64_t iffpcw_AddDebugMetadataToPictureWithIDOut(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 2u, a3, 0, 0, 0, 0, a4);
}

uint64_t iffpcw_AddCustomMetadataToPictureWithIDOut(uint64_t a1, int a2, uint64_t a3, const __CFString *a4, const __CFString *a5, _DWORD *a6)
{
  return iffpcwAddGenericMetadataToPicture(a1, a2, 3u, a3, 0, a4, a5, 0, a6);
}

uint64_t iffpcwAppendPictureDataBlockBuffer(uint64_t a1, uint64_t a2, CMBlockBufferRef theBuffer, unint64_t a4, size_t *a5)
{
  int v27 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  size_t v22 = 0;
  size_t DataLength = CMBlockBufferGetDataLength(theBuffer);
  size_t v21 = DataLength;
  if (a4 <= 1) {
    size_t v11 = 1;
  }
  else {
    size_t v11 = a4;
  }
  if (!a4) {
    a5 = &v21;
  }
  uint64_t result = IFFInformationGetItemExtents(a2, &v27, &v26, &v25, &v24, &v23);
  if (!result)
  {
    uint64_t v13 = v24;
    if (!v24)
    {
      uint64_t result = IFFInformationReserveItemExtentTable(*(void *)(a2 + 24), *(_DWORD *)(a2 + 40), 0, 0, v11, 0, 0);
      if (result) {
        return result;
      }
      uint64_t result = IFFInformationGetItemExtents(a2, &v27, &v26, &v25, &v24, &v23);
      if (result) {
        return result;
      }
      uint64_t v13 = v24;
    }
    if (v13 != v11 || v27 || v26)
    {
      return FigSignalErrorAt();
    }
    else if (a4 > 1 || DataLength == *a5)
    {
      uint64_t result = MovieSampleDataWriterAppendBlockBuffer(*(uint64_t **)(a1 + 8), theBuffer, &v22);
      if (!result)
      {
        size_t v14 = v22;
        CFArrayRef v15 = v23;
        size_t *v23 = v22;
        size_t v16 = *a5;
        v15[1] = *a5;
        if (a4 >= 2)
        {
          CFDataRef v17 = v15 + 3;
          uint64_t v18 = a5 + 1;
          size_t v19 = v11 - 1;
          do
          {
            size_t v20 = *v18++;
            v14 += v16;
            *(v17 - 1) = v14;
            *CFDataRef v17 = v20;
            v17 += 2;
            size_t v16 = v20;
            --v19;
          }
          while (v19);
        }
        return 0;
      }
    }
    else
    {
      return 4294950145;
    }
  }
  return result;
}

uint64_t iffpcwAddGenericMetadataToPicture(uint64_t a1, int a2, unsigned int a3, uint64_t a4, unint64_t a5, const __CFString *a6, const __CFString *a7, const __CFString *a8, _DWORD *a9)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  *(void *)uint64_t v24 = 0;
  if (!(a4 | a5)
    || (uint64_t v17 = DerivedStorage, a4) && a5
    || a3 == 3
    && (!a6
     || !CFStringHasPrefix(a6, @"http:")
     && !CFStringHasPrefix(a6, @"https:")
     && !CFStringHasPrefix(a6, @"urn:")
     && !CFStringHasPrefix(a6, @"tag:")))
  {
    uint64_t MetadataItemFromPicture = FigSignalErrorAt();
    goto LABEL_27;
  }
  uint64_t MetadataItemFromPicture = IFFInformationAddAndGetMetadataItemFromPicture(*(void *)(v17 + 24), a2, a3, a6, a8, v24);
  if (MetadataItemFromPicture) {
    goto LABEL_27;
  }
  if (a7)
  {
    uint64_t MetadataItemFromPicture = IFFInformationSetItemName(*(uint64_t *)v24, 0, a7);
    if (MetadataItemFromPicture) {
      goto LABEL_27;
    }
  }
  if (a4)
  {
    uint64_t MetadataItemFromPicture = FigCreateBlockBufferWithCFDataNoCopy();
    if (!MetadataItemFromPicture)
    {
      size_t v19 = 0;
      goto LABEL_20;
    }
LABEL_27:
    uint64_t v21 = MetadataItemFromPicture;
    goto LABEL_23;
  }
  if (a5) {
    size_t v19 = (OpaqueCMBlockBuffer *)CFRetain((CFTypeRef)a5);
  }
  else {
    size_t v19 = 0;
  }
  CFTypeRef cf = v19;
LABEL_20:
  uint64_t appended = iffpcwAppendPictureDataBlockBuffer(v17, *(uint64_t *)v24, v19, 0, 0);
  uint64_t v21 = appended;
  if (a9 && !appended) {
    *a9 = *(_DWORD *)(*(void *)v24 + 40);
  }
LABEL_23:
  if (cf) {
    CFRelease(cf);
  }
  return v21;
}

uint64_t FigXPCPlaybackCoordinatorServerAssociateCopiedNeighborPlaybackCoordinator(uint64_t a1, const void *a2)
{
  uint64_t v3 = malloc_type_calloc(1uLL, 0x20uLL, 0x10200407DCD39BEuLL);
  CFDictionaryRef v4 = v3;
  if (v3)
  {
    v3[2] = 1;
    v3[3] = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
  }
  else
  {
    uint64_t v6 = FigSignalErrorAt();
    if (v6)
    {
LABEL_7:
      disposeServedPlaybackCoordinatorState((uint64_t)v4);
      return v6;
    }
  }
  if (a2) {
    CFTypeRef v5 = CFRetain(a2);
  }
  else {
    CFTypeRef v5 = 0;
  }
  *CFDictionaryRef v4 = v5;
  uint64_t v6 = FigXPCServerAssociateCopiedObjectWithNeighborProcess();
  if (v6) {
    goto LABEL_7;
  }
  return v6;
}

void disposeServedPlaybackCoordinatorState(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)a1;
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFTypeRef v5 = *(void (**)(CFTypeRef))(v4 + 104);
  if (v5) {
    v5(v2);
  }
  if (*(void *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(void *)a1 = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 8);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v7 = *(const void **)(a1 + 24);
  if (v7) {
    CFRelease(v7);
  }

  free((void *)a1);
}

BOOL FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(const void *a1)
{
  BOOL result = 0;
  if (a1)
  {
    CFTypeID v1 = CFGetTypeID(a1);
    if (v1 == FigPlaybackCoordinatorGetTypeID()) {
      return 1;
    }
  }
  return result;
}

uint64_t FigXPCPlaybackCoordinatorServerHandleMessage(const void *a1)
{
  if (FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(a1)
    && a1
    && (CFTypeID v2 = CFGetTypeID(a1), v2 == FigPlaybackCoordinatorGetTypeID()))
  {
    uint64_t result = FigXPCMessageGetOpCode();
    if (!result) {
      return 4294951138;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t serverXPCCoordinator_handleCopyProperty()
{
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t serverXPCCoordinator_handleSetProperty()
{
  uint64_t result = FigXPCMessageCopyCFString();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t serverXPCCoordinator_handleBeginSuspension(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = FigXPCMessageCopyTimelineCoordinatorSuspension();
  if (v7) {
    return v7;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(uint64_t (**)(uint64_t, void))(v9 + 8);
  if (!v10) {
    return 4294954514;
  }
  uint64_t v11 = v10(a1, 0);
  if (!v11)
  {
    uint64_t v13 = *(char **)(a2 + 16);
    CFAllocatorRef v12 = *(__CFDictionary **)(a2 + 24);
    *(void *)(a2 + 16) = v13 + 1;
    CFDictionarySetValue(v12, v13, 0);
    xpc_dictionary_set_int64(a4, "SuspensionID", (int64_t)v13);
  }
  return v11;
}

uint64_t serverXPCCoordinator_handleEndSuspensionProposingNewTime(uint64_t a1, uint64_t a2, xpc_object_t xdict)
{
  long long v13 = *MEMORY[0x1E4F1F9F8];
  uint64_t v14 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  int64 = (const void *)xpc_dictionary_get_int64(xdict, "SuspensionID");
  FigXPCMessageGetCMTime();
  CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 24), int64);
  if (!Value) {
    return FigSignalErrorAt();
  }
  uint64_t v7 = Value;
  CFRetain(Value);
  CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 24), int64);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  int v10 = *(uint64_t (**)(uint64_t, const void *, long long *))(v9 + 24);
  if (v10)
  {
    long long v15 = v13;
    uint64_t v16 = v14;
    uint64_t v11 = v10(a1, v7, &v15);
  }
  else
  {
    uint64_t v11 = 4294954514;
  }
  CFRelease(v7);
  return v11;
}

uint64_t serverXPCCoordinator_handleSetWeakMediumAndCallbacks(uint64_t a1, uint64_t a2, void *a3, xpc_object_t xdict)
{
  uint64_t uint64 = xpc_dictionary_get_uint64(xdict, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v8 = *(const void **)(a2 + 8);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a2 + 8) = 0;
  }
  if (FigPlaybackCoordinatorServerMediumGetTypeID_sRegisterFigPlaybackCoordinatorServerMediumTypeOnce != -1) {
    dispatch_once_f(&FigPlaybackCoordinatorServerMediumGetTypeID_sRegisterFigPlaybackCoordinatorServerMediumTypeOnce, 0, (dispatch_function_t)registerFigPlaybackCoordinatorServerMediumType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  int v10 = (void *)Instance;
  if (Instance)
  {
    *(void *)(Instance + 32) = 1;
    *(void *)(Instance + 40) = FigSimpleMutexCreate();
    int v10[2] = xpc_retain(a3);
    v10[3] = uint64;
  }
  else
  {
    uint64_t v14 = FigSignalErrorAt();
    if (v14) {
      return v14;
    }
  }
  v16[0] = 0;
  v16[1] = 0;
  v16[2] = coordinatorServerMedium_broadcastTimelineState;
  v16[3] = coordinatorServerMedium_broadcastParticipantState;
  v16[4] = coordinatorServerMedium_asynchronouslyReloadTimelineState;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  long long v13 = *(uint64_t (**)(uint64_t, void *, void *))(v12 + 32);
  if (v13)
  {
    uint64_t v14 = v13(a1, v10, v16);
    if (!v14)
    {
      *(void *)(a2 + 8) = v10;
      return v14;
    }
  }
  else
  {
    uint64_t v14 = 4294954514;
  }
  if (v10) {
    CFRelease(v10);
  }
  return v14;
}

uint64_t serverXPCCoordinator_handleHandleAssignmentOfUUIDToLocalParticipantByMedium(uint64_t a1)
{
  uint64_t v2 = FigXPCMessageCopyCFObject();
  if (!v2)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    CFTypeRef v5 = *(uint64_t (**)(uint64_t, void))(v4 + 40);
    if (!v5) {
      return 4294954514;
    }
    return v5(a1, 0);
  }
  return v2;
}

uint64_t serverXPCCoordinator_handleCopyParticipantSnapshotForUUID(uint64_t a1)
{
  CFTypeRef v8 = 0;
  CFTypeRef cf = 0;
  uint64_t v2 = FigXPCMessageCopyCFObject();
  if (v2)
  {
LABEL_8:
    uint64_t v6 = v2;
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CFTypeRef v5 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(v4 + 48);
  if (v5)
  {
    uint64_t v2 = v5(a1, cf, &v8);
    if (!v2) {
      uint64_t v2 = FigXPCMessageSetTimelineCoordinatorParticipantSnapshot();
    }
    goto LABEL_8;
  }
  uint64_t v6 = 4294954514;
LABEL_10:
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v6;
}

uint64_t serverXPCCoordinator_handleCopyParticipantSnapshots(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v3 + 56);
  if (!v4) {
    return 4294954514;
  }
  uint64_t v5 = v4(a1, &cf);
  CFTypeRef v6 = cf;
  if (v5)
  {
    uint64_t v7 = v5;
    if (!cf) {
      return v7;
    }
    goto LABEL_7;
  }
  uint64_t v7 = FigXPCMessageSetTimelineCoordinatorParticipantSnapshots();
  CFTypeRef v6 = cf;
  if (cf) {
LABEL_7:
  }
    CFRelease(v6);
  return v7;
}

uint64_t serverXPCCoordinator_handleHandleRemovalOfParticipantStateFromMedium(uint64_t a1)
{
  uint64_t v2 = FigXPCMessageCopyCFObject();
  if (!v2)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, void))(v4 + 64);
    if (!v5) {
      return 4294954514;
    }
    return v5(a1, 0);
  }
  return v2;
}

uint64_t serverXPCCoordinator_handleGetExpectedTimeAtHostTime(uint64_t a1)
{
  long long v8 = *MEMORY[0x1E4F1F9F8];
  uint64_t v9 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  long long v6 = v8;
  uint64_t v7 = v9;
  uint64_t result = FigXPCMessageGetCMTime();
  if (!result)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, long long *, long long *))(v4 + 72);
    if (v5)
    {
      long long v10 = v8;
      uint64_t v11 = v9;
      uint64_t result = v5(a1, &v10, &v6);
      if (!result)
      {
        long long v10 = v6;
        uint64_t v11 = v7;
        return FigXPCMessageSetCMTime();
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t serverXPCCoordinator_handleHandleUpdatedTimelineStateFromMedium(uint64_t a1)
{
  uint64_t v2 = FigXPCMessageCopyCFDictionary();
  if (!v2)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, void))(v4 + 80);
    if (!v5) {
      return 4294954514;
    }
    return v5(a1, 0);
  }
  return v2;
}

uint64_t serverXPCCoordinator_handleHandleReplacementOfAllParticipantStatesFromMedium(uint64_t a1)
{
  uint64_t v2 = FigXPCMessageCopyCFArray();
  if (!v2)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, void))(v4 + 88);
    if (!v5) {
      return 4294954514;
    }
    return v5(a1, 0);
  }
  return v2;
}

uint64_t serverXPCCoordinator_handleHandleUpdatedParticipantStateFromMedium(uint64_t a1)
{
  uint64_t v2 = FigXPCMessageCopyCFDictionary();
  if (!v2)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    uint64_t v5 = *(uint64_t (**)(uint64_t, void))(v4 + 96);
    if (!v5) {
      return 4294954514;
    }
    return v5(a1, 0);
  }
  return v2;
}

uint64_t serverXPCCoordinator_handleDisconnectFromMedium(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 104);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t serverXPCCoordinator_handleAsyncReloadCompletion(uint64_t a1, xpc_object_t xdict)
{
  int64_t int64 = xpc_dictionary_get_int64(xdict, "FetchID");
  if (int64 && (uint64_t v4 = *(void *)(a1 + 8)) != 0)
  {
    int64_t v5 = int64;
    MEMORY[0x19970E910](*(void *)(v4 + 40));
    long long v6 = *(void **)(a1 + 8);
    if (v5 == v6[6])
    {
      uint64_t v7 = v6[7];
      long long v8 = (void (*)(uint64_t))v6[8];
      _OWORD v6[6] = 0;
      v6[7] = 0;
      void v6[8] = 0;
      MEMORY[0x19970E930](v6[5]);
      if (v8) {
        v8(v7);
      }
    }
    else
    {
      MEMORY[0x19970E930](v6[5]);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t serverXPCCoordinator_handleResetGroupTimelineExpectations(uint64_t a1)
{
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v3 + 120);
  if (!v4) {
    return 4294954514;
  }

  return v4(a1);
}

uint64_t FigXPCPlaybackCoordinatorServerHandleNoReplyMessage(const void *a1)
{
  if (FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(a1)
    && a1
    && (CFTypeID v2 = CFGetTypeID(a1), v2 == FigPlaybackCoordinatorGetTypeID()))
  {
    uint64_t result = FigXPCMessageGetOpCode();
    if (!result) {
      return 4294951138;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigXPCPlaybackCoordinatorServerStartAsSubserver(uint64_t a1)
{
  if (gPlaybackCoordinatorServer || !a1)
  {
    return FigSignalErrorAt();
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __FigXPCPlaybackCoordinatorServerStartAsSubserver_block_invoke;
    block[3] = &__block_descriptor_tmp_3;
    block[4] = a1;
    if (FigXPCPlaybackCoordinatorServerStartAsSubserver_onceToken != -1) {
      dispatch_once(&FigXPCPlaybackCoordinatorServerStartAsSubserver_onceToken, block);
    }
    return 0;
  }
}

uint64_t __FigXPCPlaybackCoordinatorServerStartAsSubserver_block_invoke(uint64_t result)
{
  gPlaybackCoordinatorServer = *(void *)(result + 32);
  return result;
}

uint64_t coordinatorServerMedium_broadcastTimelineState(uint64_t a1)
{
  if (!FigXPCCreateBasicMessage() && !FigXPCMessageSetCFDictionary()) {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t coordinatorServerMedium_broadcastParticipantState(uint64_t a1)
{
  if (!FigXPCCreateBasicMessage() && !FigXPCMessageSetCFDictionary()) {
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), 0);
  }
  return FigXPCRelease();
}

uint64_t coordinatorServerMedium_asynchronouslyReloadTimelineState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int64_t v8 = 0;
  xpc_object_t message = 0;
  if (!FigXPCCreateBasicMessage())
  {
    coordinatorServerMedium_cancelOutstandingFetchAndRecordNewCallback((void *)a1, a3, a4, &v8);
    xpc_dictionary_set_int64(message, "FetchID", v8);
    FigXPCMessageSetCFString();
    xpc_connection_send_message(*(xpc_connection_t *)(a1 + 16), message);
  }
  return FigXPCRelease();
}

uint64_t registerFigPlaybackCoordinatorServerMediumType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigPlaybackCoordinatorServerMediumID = result;
  return result;
}

double FigPlaybackCoordinatorServerMedium_Init(uint64_t a1)
{
  *(void *)(a1 + 64) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t FigPlaybackCoordinatorServerMedium_Finalize(void *a1)
{
  coordinatorServerMedium_cancelOutstandingFetchAndRecordNewCallback(a1, 0, 0, 0);
  FigXPCRelease();

  return FigSimpleMutexDestroy();
}

uint64_t coordinatorServerMedium_cancelOutstandingFetchAndRecordNewCallback(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  MEMORY[0x19970E910](a1[5]);
  if (a1[8]) {
    uint64_t v8 = a1[7];
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v11 = (uint64_t (*)(uint64_t))a1[8];
  a1[7] = a2;
  a1[8] = a3;
  uint64_t v9 = a1[4];
  a1[4] = v9 + 1;
  a1[6] = v9;
  if (a4) {
    *a4 = v9;
  }
  uint64_t result = MEMORY[0x19970E930](a1[5]);
  if (v11)
  {
    return v11(v8);
  }
  return result;
}

__CFString *FigPlaybackCoordinatorServerMedium_CopyDescription(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v2, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigPlaybackCoordinatorServerMedium %p>", a1);
  return Mutable;
}

void CEA608CustomRenderer::CEA608CustomRenderer(CEA608CustomRenderer *this)
{
}

void sub_193F193B0(_Unwind_Exception *a1)
{
  CEA608Renderer::~CEA608Renderer(v1);
  _Unwind_Resume(a1);
}

void CEA608CustomRenderer::~CEA608CustomRenderer(CEA608CustomRenderer *this)
{
  *(void *)this = &unk_1EE4FF1F0;
  CFAllocatorRef v2 = (const void *)*((void *)this + 13);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)*((void *)this + 15);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)*((void *)this + 14);
  if (v4) {
    CFRelease(v4);
  }
  int64_t v5 = (const void *)*((void *)this + 16);
  if (v5) {
    CFRelease(v5);
  }
  long long v6 = (const void *)*((void *)this + 18);
  if (v6) {
    CFRelease(v6);
  }
  uint64_t v7 = (const void *)*((void *)this + 17);
  if (v7) {
    CFRelease(v7);
  }
  uint64_t v8 = (const void *)*((void *)this + 12);
  if (v8) {
    CFRelease(v8);
  }

  CEA608Renderer::~CEA608Renderer(this);
}

{
  uint64_t vars8;

  CEA608CustomRenderer::~CEA608CustomRenderer(this);

  JUMPOUT(0x199710860);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t CEA608CustomRenderer::SetProperty(CEA608CustomRenderer *this, CFTypeRef cf1, const __CFData *a3)
{
  if (CFEqual(cf1, @"RenderCallback"))
  {
    BytePtr = CFDataGetBytePtr(a3);
    if (BytePtr && *(void *)BytePtr)
    {
      if (*((void *)BytePtr + 1))
      {
        *((void *)this + 11) = *(void *)BytePtr;
        *((void *)this + 12) = FigCFWeakReferenceHolderCreateWithReferencedObject();
      }
    }
    return 0;
  }
  else
  {
    return TextRendererBase::SetProperty(this, cf1, a3);
  }
}

uint64_t CEA608CustomRenderer::Render(CEA608CustomRenderer *this, CGContext *a2, const CGRect *a3, const CGRect *a4)
{
  long long v5 = *MEMORY[0x1E4F1F9F8];
  uint64_t v6 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  return (*(uint64_t (**)(CEA608CustomRenderer *, CGContext *, long long *, const CGRect *, const CGRect *))(*(void *)this + 216))(this, a2, &v5, a3, a4);
}

void CEA608CustomRenderer::CallRenderCallback(CEA608CustomRenderer *this, uint64_t a2, const __CFDictionary *a3, CMTime *a4)
{
  if (*((void *)this + 11))
  {
    uint64_t v8 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v8)
    {
      uint64_t v9 = (const void *)v8;
      long long v10 = (void (*)(uint64_t, const __CFDictionary *, long long *, uint64_t))*((void *)this + 11);
      long long v11 = *(_OWORD *)&a4->value;
      CMTimeEpoch epoch = a4->epoch;
      v10(a2, a3, &v11, v8);
      CFRelease(v9);
    }
  }
}

uint64_t CEA608CustomRenderer::RenderAtTime(CEA608CustomRenderer *this, CGContext *a2, CMTime *a3, const CGRect *a4, const CGRect *a5)
{
  char v6 = *((unsigned char *)this + 8);
  if (v6)
  {
    int v27 = 0;
    uint64_t v28 = 0;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, @"F", *((const void **)this + 13));
    CFDictionarySetValue(Mutable, @"B", *((const void **)this + 15));
    CFDictionarySetValue(Mutable, @"U", *((const void **)this + 14));
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    CMTime v26 = *a3;
    CEA608CustomRenderer::CallRenderCallback(this, 0, Mutable, &v26);
    if (Mutable) {
      CFRelease(Mutable);
    }
    CEA608CustomRenderer::BuildRowCommandArray(this);
    CEA608CustomRenderer::DetectCaptionElements(this, &v28, &v27);
    long long v10 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
    long long v11 = v28;
    if (v28 && CFArrayGetCount(v28) >= 1)
    {
      CFIndex v12 = 0;
      do
      {
        long long v13 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v11, v12);
        FigCFDictionarySetInt32();
        CFDictionaryAddValue(v13, @"R", ValueAtIndex);
        CFDictionarySetValue(v13, @"U", *((const void **)this + 14));
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFArrayAppendValue(v10, v13);
        if (v13) {
          CFRelease(v13);
        }
        ++v12;
      }
      while (CFArrayGetCount(v11) > v12);
    }
    long long v15 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(v15, @"F", *((const void **)this + 13));
    CFDictionaryAddValue(v15, @"W", v10);
    if (v10) {
      CFRelease(v10);
    }
    CMTime v25 = *a3;
    CEA608CustomRenderer::CallRenderCallback(this, 6, v15, &v25);
    if (v15) {
      CFRelease(v15);
    }
    uint64_t v16 = CFArrayCreateMutable(v8, 0, MEMORY[0x1E4F1D510]);
    uint64_t v17 = v27;
    if (v27 && CFArrayGetCount(v27) >= 1)
    {
      CFIndex v18 = 0;
      do
      {
        size_t v19 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        size_t v20 = CFArrayGetValueAtIndex(v17, v18);
        FigCFDictionarySetInt32();
        CFDictionaryAddValue(v19, @"R", v20);
        CFArrayAppendValue(v16, v19);
        if (v19) {
          CFRelease(v19);
        }
        ++v18;
      }
      while (CFArrayGetCount(v17) > v18);
    }
    uint64_t v21 = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(v21, @"F", *((const void **)this + 13));
    CFDictionaryAddValue(v21, @"C", v16);
    if (v16) {
      CFRelease(v16);
    }
    CMTime v24 = *a3;
    CEA608CustomRenderer::CallRenderCallback(this, 7, v21, &v24);
    if (v21) {
      CFRelease(v21);
    }
    if (v17) {
      CFRelease(v17);
    }
    if (v11) {
      CFRelease(v11);
    }
    CEA608Renderer::Memory::SetDirty(*((void *)this + 4), 0);
    CMTime v23 = *a3;
    CEA608CustomRenderer::CallRenderCallback(this, 1, 0, &v23);
    char v6 = *((unsigned char *)this + 8);
  }
  *((unsigned char *)this + 72) = v6;
  return 0;
}

void CEA608CustomRenderer::BuildRowCommandArray(CEA608CustomRenderer *this)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  unsigned __int8 v2 = 1;
  signed __int8 valuePtr = 1;
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v4 = (const void *)*MEMORY[0x1E4F1CFD0];
  long long v5 = (const void *)*MEMORY[0x1E4F1CFC8];
  char v6 = @"a";
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  do
  {
    if (CEA608Renderer::MemoryRow::IsDirty(*(CEA608Renderer::MemoryRow **)(*((void *)this + 4) + 8 * v2 + 8)))
    {
      CEA608CustomRenderer::EraseRow((CFArrayRef *)this, valuePtr);
      if (CEA608Renderer::MemoryRow::IsDisplayable(*(CEA608Renderer::MemoryRow **)(*((void *)this + 4)
                                                                                  + 8 * valuePtr
                                                                                  + 8)))
      {
        CFMutableArrayRef Mutable = CFAttributedStringCreateMutable(v3, 0);
        if (Mutable)
        {
          CFAllocatorRef v8 = Mutable;
          CFAttributedStringBeginEditing(Mutable);
          CFStringRef v9 = CFStringCreateWithCharacters(v3, *(const UniChar **)(*(void *)(*((void *)this + 4) + 8 * valuePtr + 8) + 256), 32);
          if (v9)
          {
            CFStringRef v10 = v9;
            v44.uint64_t location = 0;
            v44.length = 0;
            CFAttributedStringReplaceString(v8, v44, v9);
            CFRelease(v10);
          }
          long long v11 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          char v12 = 1;
          do
          {
            CFRange longestEffectiveRange = (CFRange)0;
            long long v39 = 0u;
            __int16 v37 = 0;
            CEA608Renderer::MemoryRow::GetStyleForCell(*(void *)(*((void *)this + 4) + 8 * valuePtr + 8), v12, (uint64_t)&longestEffectiveRange, (unsigned char *)&v37 + 1, (BOOL *)&v37);
            char v13 = CEA608Renderer::MemoryRow::GetNextStyleChange(*(CEA608Renderer::MemoryRow **)(*((void *)this + 4) + 8 * valuePtr + 8), v12);
            CFDictionaryRemoveAllValues(v11);
            if (HIBYTE(v37)) {
              uint64_t v14 = v4;
            }
            else {
              uint64_t v14 = v5;
            }
            CFDictionarySetValue(v11, @"d", v14);
            if ((_BYTE)v37) {
              long long v15 = v4;
            }
            else {
              long long v15 = v5;
            }
            CFDictionarySetValue(v11, v6, v15);
            if (HIBYTE(v37))
            {
              if (longestEffectiveRange.location)
              {
                *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)longestEffectiveRange.location);
                float64x2_t v42 = vcvtq_f64_f32(*(float32x2_t *)(longestEffectiveRange.location + 8));
                CGColorRef v16 = CGColorCreate(*((CGColorSpaceRef *)this + 16), components);
                if (v16)
                {
                  uint64_t v17 = v16;
                  CFDictionarySetValue(v11, @"t", v16);
                  CGColorRelease(v17);
                }
              }
              if (longestEffectiveRange.length)
              {
                *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)longestEffectiveRange.length);
                float64x2_t v42 = vcvtq_f64_f32(*(float32x2_t *)(longestEffectiveRange.length + 8));
                CGColorRef v18 = CGColorCreate(*((CGColorSpaceRef *)this + 16), components);
                if (v18)
                {
                  size_t v19 = v18;
                  CFDictionarySetValue(v11, @"b", v18);
                  CGColorRelease(v19);
                }
              }
              if (DWORD1(v39) == 1) {
                size_t v20 = v4;
              }
              else {
                size_t v20 = v5;
              }
              CFDictionarySetValue(v11, @"i", v20);
              if (v39 == 1) {
                uint64_t v21 = v4;
              }
              else {
                uint64_t v21 = v5;
              }
              CFDictionarySetValue(v11, @"u", v21);
              if (DWORD2(v39) == 1) {
                size_t v22 = v4;
              }
              else {
                size_t v22 = v5;
              }
              CFDictionarySetValue(v11, @"f", v22);
            }
            v45.uint64_t location = v12 - 1;
            v45.length = v13 - v12;
            CFAttributedStringSetAttributes(v8, v45, v11, 1u);
            char v12 = v13;
          }
          while (v13 < 33);
          CFAttributedStringEndEditing(v8);
          if (v11) {
            CFRelease(v11);
          }
          CFAllocatorRef v3 = allocator;
          CFNumberRef value = CFNumberCreate(allocator, kCFNumberSInt8Type, &valuePtr);
          if (value)
          {
            CFIndex Length = CFAttributedStringGetLength(v8);
            CFIndex v24 = 0;
            do
            {
              longestEffectiveRange.uint64_t location = 0;
              longestEffectiveRange.length = 0;
              v46.length = Length - v24;
              v46.uint64_t location = v24;
              CFBooleanRef AttributeAndLongestEffectiveRange = (const __CFBoolean *)CFAttributedStringGetAttributeAndLongestEffectiveRange(v8, v24, @"d", v46, &longestEffectiveRange);
              if (CFBooleanGetValue(AttributeAndLongestEffectiveRange))
              {
                CFMutableDictionaryRef v26 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                if (v26)
                {
                  int v27 = v26;
                  uint64_t v28 = v6;
                  CFMutableDictionaryRef v29 = CFDictionaryCreateMutable(v3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  if (v29)
                  {
                    CFTypeID v30 = v29;
                    CFDictionarySetValue(v27, @"F", *((const void **)this + 13));
                    CFDictionarySetValue(v27, @"B", *((const void **)this + 15));
                    CFDictionarySetValue(v27, @"U", *((const void **)this + 14));
                    FigCFDictionarySetInt32();
                    FigCFDictionarySetInt32();
                    CFAttributedStringRef v31 = CFAttributedStringCreateWithSubstring(v3, v8, longestEffectiveRange);
                    CFDictionarySetValue(v27, @"S", v31);
                    CFRelease(v31);
                    ++longestEffectiveRange.location;
                    CFNumberRef v32 = CFNumberCreate(allocator, kCFNumberCFIndexType, &longestEffectiveRange);
                    CFDictionarySetValue(v30, @"x", v32);
                    CFNumberRef v33 = v32;
                    CFAllocatorRef v3 = allocator;
                    CFRelease(v33);
                    CFDictionarySetValue(v30, @"y", value);
                    CFDictionarySetValue(v27, @"L", v30);
                    CFRelease(v30);
                    CFDictionaryRef ValueAtIndex = (__CFArray *)CFArrayGetValueAtIndex(*((CFArrayRef *)this + 17), valuePtr - 1);
                    CFArrayAppendValue(ValueAtIndex, v27);
                  }
                  CFRelease(v27);
                  char v6 = v28;
                }
              }
              v24 += longestEffectiveRange.length;
            }
            while (v24 < Length);
            CFSetAddValue(*((CFMutableSetRef *)this + 18), value);
            CFRelease(value);
          }
          CFRelease(v8);
        }
      }
    }
    unsigned __int8 v2 = ++valuePtr;
  }
  while (valuePtr < 16);
}

void CEA608CustomRenderer::DetectCaptionElements(CEA608CustomRenderer *this, const __CFArray **a2, const __CFArray **a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](this, a2, a3);
  CFRange v44 = v4;
  CFRange v45 = v5;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v51 = v3;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 136));
  bzero(v52, 0x3C00uLL);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  if (Count >= 1)
  {
    CFIndex v9 = 0;
    int v10 = 0;
    do
    {
      CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v51 + 136), v9);
      CFIndex v12 = CFArrayGetCount(ValueAtIndex);
      if (v12 >= 1)
      {
        CFIndex v13 = v12;
        CFIndex v14 = 0;
        long long v15 = (CGRect *)&v52[2 * v10];
        do
        {
          CGColorRef v16 = (CEA608CustomRenderer *)CFArrayGetValueAtIndex(ValueAtIndex, v14);
          v54.origin.CGFloat x = CEA608CustomRenderer::GetCellRectFromCommandData(v16, v16);
          *long long v15 = v54;
          if (!CGRectIsNull(v54)) {
            CFArrayAppendValue(Mutable, v15);
          }
          ++v14;
          ++v15;
        }
        while (v13 != v14);
        v10 += v14;
      }
      ++v9;
    }
    while (v9 != Count);
  }
  CFIndex v17 = CFArrayGetCount(Mutable);
  if (v17 > 1)
  {
    for (CFIndex i = v17; i > 1; CFIndex i = CFArrayGetCount(Mutable))
    {
      CFIndex v19 = 0;
      while (1)
      {
        size_t v20 = (CGRect *)CFArrayGetValueAtIndex(Mutable, v19++);
        if (v19 < i) {
          break;
        }
LABEL_17:
        if (v19 >= i - 1) {
          goto LABEL_20;
        }
      }
      uint64_t v21 = v20;
      CFIndex v22 = v19;
      while (1)
      {
        CMTime v23 = (CEA608CustomRenderer *)CFArrayGetValueAtIndex(Mutable, v22);
        if (CEA608CustomRenderer::DoesRectIntersectOrTounchRect(v23, *v21, *(CGRect *)v23)) {
          break;
        }
        if (++v22 >= i) {
          goto LABEL_17;
        }
      }
      *uint64_t v21 = CGRectUnion(*v21, *(CGRect *)v23);
      CFArrayRemoveValueAtIndex(Mutable, v22);
    }
  }
LABEL_20:
  CFIndex v24 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CMTime theArray = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
  uint64_t v47 = CFArrayCreateMutable(v7, 0, v24);
  CFIndex v46 = CFArrayGetCount(Mutable);
  if (v46 >= 1)
  {
    CFIndex v25 = 0;
    CFMutableDictionaryRef v26 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
    do
    {
      int v27 = CFArrayCreateMutable(v7, 0, v26);
      CFIndex v50 = v25;
      uint64_t v28 = (CGFloat *)CFArrayGetValueAtIndex(Mutable, v25);
      CGFloat v29 = *v28;
      CGFloat v30 = v28[1];
      CGFloat v31 = v28[2];
      CGFloat v32 = v28[3];
      v55.origin.CGFloat x = *v28;
      v55.origin.CGFloat y = v30;
      v55.size.CGFloat width = v31;
      v55.size.CGFloat height = v32;
      CFDictionaryRef DictionaryRepresentation = CGRectCreateDictionaryRepresentation(v55);
      CFArrayAppendValue(theArray, DictionaryRepresentation);
      v56.origin.CGFloat x = v29;
      v56.origin.CGFloat y = v30;
      v56.size.CGFloat width = v31;
      v56.size.CGFloat height = v32;
      for (CFIndex j = (uint64_t)CGRectGetMinY(v56); ; ++j)
      {
        v57.origin.CGFloat x = v29;
        v57.origin.CGFloat y = v30;
        v57.size.CGFloat width = v31;
        v57.size.CGFloat height = v32;
        if (j >= (uint64_t)CGRectGetMaxY(v57)) {
          break;
        }
        long long v34 = CFArrayCreateMutable(v7, 0, v26);
        CFArrayRef v35 = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v51 + 136), j);
        CFIndex v36 = CFArrayGetCount(v35);
        if (v36 >= 1)
        {
          CFIndex v37 = v36;
          for (CFIndex k = 0; k != v37; ++k)
          {
            long long v39 = (CEA608CustomRenderer *)CFArrayGetValueAtIndex(v35, k);
            v58.origin.CGFloat x = CEA608CustomRenderer::GetCellRectFromCommandData(v39, v39);
            CGFloat x = v58.origin.x;
            CGFloat y = v58.origin.y;
            CGFloat width = v58.size.width;
            CGFloat height = v58.size.height;
            if (!CGRectIsNull(v58))
            {
              v59.origin.CGFloat x = v29;
              v59.origin.CGFloat y = v30;
              v59.size.CGFloat width = v31;
              v59.size.CGFloat height = v32;
              v60.origin.CGFloat x = x;
              v60.origin.CGFloat y = y;
              v60.size.CGFloat width = width;
              v60.size.CGFloat height = height;
              if (CGRectContainsRect(v59, v60)) {
                CFArrayAppendValue(v34, v39);
              }
            }
          }
        }
        CFArrayAppendValue(v27, v34);
        if (v34) {
          CFRelease(v34);
        }
      }
      CFArrayAppendValue(v47, v27);
      if (v27) {
        CFRelease(v27);
      }
      if (DictionaryRepresentation) {
        CFRelease(DictionaryRepresentation);
      }
      CFIndex v25 = v50 + 1;
    }
    while (v50 + 1 != v46);
  }
  *CFRange v44 = theArray;
  *CFRange v45 = v47;
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void CEA608CustomRenderer::EraseRow(CFArrayRef *this, unsigned __int8 a2)
{
  unsigned __int8 valuePtr = a2;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt8Type, &valuePtr);
  if (CFSetContainsValue(this[18], v3))
  {
    CFArrayRef ValueAtIndex = (__CFArray *)CFArrayGetValueAtIndex(this[17], valuePtr - 1);
    CFArrayRemoveAllValues(ValueAtIndex);
    CFSetRemoveValue(this[18], v3);
  }
  CFRelease(v3);
}

double CEA608CustomRenderer::GetCellRectFromCommandData(CEA608CustomRenderer *this, CFDictionaryRef theDict)
{
  double v3 = *MEMORY[0x1E4F1DB20];
  if (CFDictionaryGetValue(theDict, @"L"))
  {
    if (FigCFDictionaryGetInt32IfPresent())
    {
      if (FigCFDictionaryGetInt32IfPresent())
      {
        CFAttributedStringRef Value = (const __CFAttributedString *)CFDictionaryGetValue(theDict, @"S");
        if (Value)
        {
          if (CFAttributedStringGetLength(Value)) {
            return (double)-1;
          }
        }
      }
    }
  }
  return v3;
}

BOOL CEA608CustomRenderer::DoesRectIntersectOrTounchRect(CEA608CustomRenderer *this, CGRect a2, CGRect a3)
{
  CGFloat height = a3.size.height;
  CGFloat width = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  CGFloat v7 = a2.size.height;
  CGFloat v8 = a2.size.width;
  CGFloat v9 = a2.origin.y;
  CGFloat v10 = a2.origin.x;
  if (CGRectIsNull(a2)) {
    return 0;
  }
  v26.origin.CGFloat x = x;
  v26.origin.CGFloat y = y;
  v26.size.CGFloat width = width;
  v26.size.CGFloat height = height;
  if (CGRectIsNull(v26)) {
    return 0;
  }
  v27.origin.CGFloat x = v10;
  v27.origin.CGFloat y = v9;
  v27.size.CGFloat width = v8;
  v27.size.CGFloat height = v7;
  CGFloat MinX = CGRectGetMinX(v27);
  v28.size.CGFloat height = height;
  double v12 = MinX;
  v28.origin.CGFloat x = x;
  v28.origin.CGFloat y = y;
  v28.size.CGFloat width = width;
  CGFloat rect = v28.size.height;
  if (v12 >= CGRectGetMinX(v28))
  {
    v30.origin.CGFloat x = x;
    v30.origin.CGFloat y = y;
    v30.size.CGFloat width = width;
    v30.size.CGFloat height = rect;
    double MaxX = CGRectGetMaxX(v30);
    CGFloat v14 = v10;
    CGFloat v15 = v9;
    CGFloat v16 = v8;
    CGFloat v17 = v7;
  }
  else
  {
    v29.origin.CGFloat x = v10;
    v29.origin.CGFloat y = v9;
    v29.size.CGFloat width = v8;
    v29.size.CGFloat height = v7;
    double MaxX = CGRectGetMaxX(v29);
    CGFloat v14 = x;
    CGFloat v15 = y;
    CGFloat v16 = width;
    CGFloat v17 = rect;
  }
  if (MaxX < CGRectGetMinX(*(CGRect *)&v14)) {
    return 0;
  }
  v31.origin.CGFloat x = v10;
  v31.origin.CGFloat y = v9;
  v31.size.CGFloat width = v8;
  v31.size.CGFloat height = v7;
  double MinY = CGRectGetMinY(v31);
  v32.origin.CGFloat x = x;
  v32.origin.CGFloat y = y;
  v32.size.CGFloat width = width;
  v32.size.CGFloat height = rect;
  if (MinY >= CGRectGetMinY(v32))
  {
    v34.origin.CGFloat x = x;
    v34.origin.CGFloat y = y;
    v34.size.CGFloat width = width;
    v34.size.CGFloat height = rect;
    double MaxY = CGRectGetMaxY(v34);
    CGFloat v20 = v10;
    CGFloat v21 = v9;
    CGFloat v22 = v8;
    CGFloat v23 = v7;
  }
  else
  {
    v33.origin.CGFloat x = v10;
    v33.origin.CGFloat y = v9;
    v33.size.CGFloat width = v8;
    v33.size.CGFloat height = v7;
    double MaxY = CGRectGetMaxY(v33);
    CGFloat v20 = x;
    CGFloat v21 = y;
    CGFloat v22 = width;
    CGFloat v23 = rect;
  }
  return MaxY >= CGRectGetMinY(*(CGRect *)&v20);
}

uint64_t CEA608Renderer::GetCurrentTime(CEA608Renderer *this)
{
  return *((void *)this + 2);
}

uint64_t CEA608Renderer::GetTimeScale(CEA608Renderer *this)
{
  return 30000;
}

uint64_t cea708IsThereValidRowData(uint64_t a1)
{
  uint64_t v1 = 0;
  uint64_t v2 = a1 + 74;
  while (2)
  {
    for (uint64_t i = 0; i != 1008; i += 24)
    {
      if (*(unsigned char *)(v2 + i)) {
        return 1;
      }
    }
    ++v1;
    v2 += 1010;
    if (v1 != 15) {
      continue;
    }
    break;
  }
  return 0;
}

uint64_t FigCEA708CaptionDecoderCreate(int a1, CMFormatDescriptionRef desc, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  if (a4) {
    BOOL v6 = a3 != 0;
  }
  else {
    BOOL v6 = 0;
  }
  if ((a3 != 0) == (a4 != 0)
    && desc
    && a6
    && ((MediaSubType = CMFormatDescriptionGetMediaSubType(desc), FourCharCode v10 = MediaSubType, MediaSubType == 1635017571)
     || MediaSubType == 1664561208))
  {
    FigCaptionDecoderGetClassID();
    uint64_t v11 = CMDerivedObjectCreate();
    if (!v11)
    {
      uint64_t DerivedStorage = (_DWORD *)CMBaseObjectGetDerivedStorage();
      bzero(DerivedStorage, 0x7516A8uLL);
      *uint64_t DerivedStorage = v10;
      if (v6
        && (*((void *)DerivedStorage + 1) = a3,
            uint64_t v13 = FigCFWeakReferenceHolderCreateWithReferencedObject(),
            (*((void *)DerivedStorage + 2) = v13) == 0))
      {
        return FigSignalErrorAt();
      }
      else
      {
        DerivedStorage[6] = 0;
        *((void *)DerivedStorage + 4) = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
        cea708Initialize((uint64_t)DerivedStorage);
        uint64_t v11 = 0;
        *a6 = 0;
      }
    }
    return v11;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void cea708Initialize(uint64_t a1)
{
  uint64_t v2 = 0;
  double v3 = (char *)(a1 + 120);
  do
  {
    *(unsigned char *)(a1 + 121800 * v2 + 113) = -1;
    uint64_t v4 = v3;
    uint64_t v5 = 8;
    do
    {
      bzero(v4, 0x3B78uLL);
      v4 += 15224;
      --v5;
    }
    while (v5);
    ++v2;
    v3 += 121800;
  }
  while (v2 != 63);
  *(unsigned char *)(a1 + 88) = -1;
  *(void *)(a1 + 96) = 0;
  BOOL v6 = *(const void **)(a1 + 104);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 104) = 0;
  }
  uint64_t v7 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(a1 + 40) = *MEMORY[0x1E4F1F9F8];
  *(void *)(a1 + 56) = *(void *)(v7 + 16);
  *(void *)(a1 + 64) = 0;
  CGFloat v8 = *(const void **)(a1 + 72);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 72) = 0;
  }
  *(void *)(a1 + 80) = 0x41F0000000000000;
}

void cea708_Finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)DerivedStorage[4];
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = (const void *)DerivedStorage[13];
  if (v2) {
    CFRelease(v2);
  }
  double v3 = (const void *)DerivedStorage[9];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)DerivedStorage[2];
  if (v4)
  {
    CFRelease(v4);
  }
}

__CFString *cea708_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<CEA708CaptionDecoder %p>", a1);
  return Mutable;
}

uint64_t cea708_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && (uint64_t v7 = DerivedStorage, FigCFEqual()))
  {
    int valuePtr = *(_DWORD *)(v7 + 24) + 1;
    *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t cea708_SetProperty(uint64_t a1, uint64_t a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2
    && (uint64_t v6 = DerivedStorage, FigCFEqual())
    && (int valuePtr = 0, a3)
    && (CFTypeID v7 = CFGetTypeID(a3), v7 == CFNumberGetTypeID()))
  {
    CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
    if (*(_DWORD *)(v6 + 24) != valuePtr - 1) {
      *(_DWORD *)(v6 + 24) = valuePtr - 1;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t cea708_PushSample(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  size_t totalLengthOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  dataPointerOut = 0;
  uint64_t DataPointer = cea708_RenderToTime(a1, MEMORY[0x1E4F1FA10], 0);
  if (DataPointer) {
    goto LABEL_68;
  }
  if (!a2) {
    goto LABEL_62;
  }
  if (!CMSampleBufferGetNumSamples(a2)) {
    goto LABEL_62;
  }
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(a2);
  if (!FormatDescription) {
    goto LABEL_62;
  }
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(FormatDescription);
  if (*(_DWORD *)DerivedStorage != MediaSubType)
  {
    uint64_t DataPointer = FigSignalErrorAt();
    goto LABEL_68;
  }
  FourCharCode v8 = MediaSubType;
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a2);
  uint64_t v10 = (uint64_t)DataBuffer;
  if (!DataBuffer) {
    goto LABEL_63;
  }
  if (!CMBlockBufferIsRangeContiguous(DataBuffer, 0, 0))
  {
    uint64_t DataPointer = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CMBlockBufferRef)v10, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &blockBufferOut);
    if (DataPointer) {
      goto LABEL_68;
    }
    uint64_t v10 = (uint64_t)blockBufferOut;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer((CMBlockBufferRef)v10, 0, 0, &totalLengthOut, &dataPointerOut);
  if (!DataPointer)
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v39, a2);
    *(CMTime *)(DerivedStorage + 40) = v39;
    if (v8 != 1664561208)
    {
      if (v8 == 1635017571)
      {
        uint64_t v11 = dataPointerOut;
        size_t v12 = totalLengthOut;
        v39.CFNumberRef value = 0;
        if (totalLengthOut >= 8)
        {
          uint64_t v43 = 0;
          CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          CGFloat v14 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
          do
          {
            if (*v11 == 71 && v11[1] == 65 && v11[2] == 57 && v11[3] == 52 && v11[4] == 3)
            {
              CGFloat v15 = v11 + 5;
              size_t v16 = v12 - 5;
              uint64_t DataPointer = cea708CreateDTVCCDataPacketBBufArray(DerivedStorage, v11 + 5, v12 - 5, (__CFArray **)&v39, &v43);
              if (DataPointer) {
                goto LABEL_68;
              }
              CFNumberRef value = (const void *)v39.value;
              if (v39.value)
              {
                CFMutableArrayRef Mutable = *(__CFArray **)(DerivedStorage + 72);
                if (!Mutable)
                {
                  CFMutableArrayRef Mutable = CFArrayCreateMutable(v13, 0, v14);
                  *(void *)(DerivedStorage + 72) = Mutable;
                }
                CFArrayAppendValue(Mutable, value);
                CFRelease(value);
                v39.CFNumberRef value = 0;
              }
              uint64_t v11 = &v15[v43];
              size_t v12 = v16 - v43;
            }
            else
            {
              ++v11;
              --v12;
            }
          }
          while (v12 > 7);
        }
      }
      goto LABEL_62;
    }
    size_t v19 = totalLengthOut;
    if (totalLengthOut >= 9)
    {
      uint64_t v10 = 0;
      CGFloat v20 = (unsigned int *)dataPointerOut;
      CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      while (1)
      {
        size_t v21 = bswap32(*v20);
        BOOL v23 = v19 >= v21;
        v19 -= v21;
        if (!v23)
        {
LABEL_66:
          uint64_t v10 = 4294950853;
          goto LABEL_63;
        }
        unint64_t v22 = v21 - 8;
        BOOL v23 = v20[1] == 1885627235 && v22 >= 0xC;
        if (v23) {
          break;
        }
LABEL_60:
        CGFloat v20 = (unsigned int *)((char *)v20 + v21);
        if (v19 <= 8) {
          goto LABEL_63;
        }
      }
      CFIndex v24 = (unsigned __int8 *)(v20 + 2);
      while (1)
      {
        if (*v24 != 150) {
          goto LABEL_66;
        }
        if (v24[1] != 105) {
          goto LABEL_66;
        }
        unint64_t v25 = v24[2];
        unint64_t v26 = v22 - v25;
        if (v22 < v25) {
          goto LABEL_66;
        }
        unsigned int v27 = v24[3];
        signed __int8 v28 = v24[4];
        if (*(_DWORD *)(DerivedStorage + 80) != v27 >> 4)
        {
          uint64_t v29 = v27 >> 4;
          if ((v29 - 1) > 7)
          {
            uint64_t v10 = 4294950853;
            if ((v24[4] & 0x40) == 0) {
              goto LABEL_59;
            }
            goto LABEL_48;
          }
          uint64_t v10 = 0;
          int v30 = dword_1949928C8[v29 - 1];
          *(_DWORD *)(DerivedStorage + 80) = v29;
          *(_DWORD *)(DerivedStorage + 84) = v30;
        }
        if ((v28 & 0x40) == 0) {
          goto LABEL_59;
        }
LABEL_48:
        v39.CFNumberRef value = 0;
        BOOL v31 = v28 < 0;
        uint64_t v32 = 12;
        if (!v31) {
          uint64_t v32 = 7;
        }
        CGRect v33 = (char *)&v24[v32];
        if (v31) {
          uint64_t v34 = -12;
        }
        else {
          uint64_t v34 = -7;
        }
        uint64_t DataPointer = cea708CreateDTVCCDataPacketBBufArray(DerivedStorage, v33, v34 + v22, (__CFArray **)&v39, 0);
        if (DataPointer) {
          goto LABEL_68;
        }
        CFArrayRef v35 = (const void *)v39.value;
        if (v39.value)
        {
          CFIndex v36 = *(__CFArray **)(DerivedStorage + 72);
          if (!v36)
          {
            CFIndex v36 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
            *(void *)(DerivedStorage + 72) = v36;
          }
          CFArrayAppendValue(v36, v35);
          CFRelease(v35);
        }
        uint64_t v10 = 0;
LABEL_59:
        v24 += v25;
        unint64_t v22 = v26;
        if (v26 <= 0xB) {
          goto LABEL_60;
        }
      }
    }
LABEL_62:
    uint64_t v10 = 0;
    goto LABEL_63;
  }
LABEL_68:
  uint64_t v10 = DataPointer;
LABEL_63:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v10;
}

uint64_t cea708_RenderToTime(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v5 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v142.CFNumberRef value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v6 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v142.CMTimeEpoch epoch = v6;
  CFArrayRef v7 = *(const __CFArray **)(DerivedStorage + 72);
  if (v7)
  {
    int v125 = (_OWORD *)(DerivedStorage + 40);
    *(_OWORD *)&v141.CFNumberRef value = v5;
    v141.CMTimeEpoch epoch = v6;
    long long v121 = v5;
    *(_OWORD *)&v140.CFNumberRef value = v5;
    CMTimeEpoch v120 = v6;
    v140.CMTimeEpoch epoch = v6;
    CFIndex Count = CFArrayGetCount(v7);
    uint64_t v8 = Count;
    if ((~a2->flags & 5) != 0)
    {
      CMTime lhs = *a2;
      *(_OWORD *)&rhs.CFNumberRef value = *v125;
      rhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 56);
      CMTimeSubtract(&time, &lhs, &rhs);
      uint64_t v8 = (uint64_t)(CMTimeGetSeconds(&time) * *(float *)(DerivedStorage + 84));
    }
    CFIndex v9 = *(void *)(DerivedStorage + 64);
    if (v8 <= v9 + 1) {
      uint64_t v8 = v9 + 1;
    }
    if (v8 >= Count) {
      uint64_t v8 = Count;
    }
    CFIndex v124 = v8;
    if (v9 < v8)
    {
      while (1)
      {
        CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 72), v9);
        CFArrayRef theArray = ValueAtIndex;
        CFIndex v11 = ValueAtIndex ? CFArrayGetCount(ValueAtIndex) : 0;
        CMTimeMakeWithSeconds(&v141, (float)((float)*(uint64_t *)(DerivedStorage + 64) / *(float *)(DerivedStorage + 84)), *(_DWORD *)(DerivedStorage + 48));
        *(_OWORD *)&lhs.CFNumberRef value = *v125;
        lhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 56);
        CMTime rhs = v141;
        CMTimeAdd(&v140, &lhs, &rhs);
        if (v11 >= 1) {
          break;
        }
LABEL_145:
        CFIndex v9 = *(void *)(DerivedStorage + 64) + 1;
        *(void *)(DerivedStorage + 64) = v9;
        if (v9 >= v124) {
          goto LABEL_146;
        }
      }
      CFIndex v12 = 0;
      CFIndex v126 = v11;
      while (1)
      {
        CFIndex v128 = v12;
        CFAllocatorRef v13 = (OpaqueCMBlockBuffer *)CFArrayGetValueAtIndex(theArray, v12);
        dataPointerOut = 0;
        size_t totalLengthOut = 0;
        uint64_t result = CMBlockBufferGetDataPointer(v13, 0, 0, &totalLengthOut, &dataPointerOut);
        if (result) {
          return result;
        }
        if ((uint64_t)totalLengthOut >= 1) {
          break;
        }
LABEL_142:
        if (*(unsigned char *)(DerivedStorage + 121800 * *(int *)(DerivedStorage + 24) + 112))
        {
          CMTime lhs = v140;
          cea708Render(DerivedStorage, (long long *)&lhs.value);
        }
        CFIndex v12 = v128 + 1;
        if (v128 + 1 == v126) {
          goto LABEL_145;
        }
      }
      CGFloat v15 = dataPointerOut;
      CFTypeRef v132 = &dataPointerOut[totalLengthOut];
      while (1)
      {
        CGFloat v17 = (unsigned __int8 *)(v15 + 1);
        unsigned int v16 = *v15;
        unsigned int v18 = v16 >> 5;
        if (v16 >> 5 == 7)
        {
          unsigned int v18 = v15[1] & 0x3F;
          CGFloat v17 = (unsigned __int8 *)(v15 + 2);
        }
        if (!v18) {
          goto LABEL_142;
        }
        uint64_t v19 = v16 & 0x1F;
        if ((v16 & 0x1F) != 0) {
          break;
        }
        uint64_t v114 = 0;
LABEL_141:
        CGFloat v15 = (char *)&v17[v114];
        if (&v17[v114] >= (unsigned __int8 *)v132) {
          goto LABEL_142;
        }
      }
      unsigned __int8 v20 = 0;
      unsigned __int8 v21 = v18 - 1;
      unint64_t v22 = &v17[v19];
      v145[0] = 0;
      unsigned int v23 = (v18 - 1);
      CFIndex v24 = (char *)(DerivedStorage + 121800 * (v18 - 1));
      unint64_t v25 = v24 + 112;
      unsigned int v130 = v23;
      CFTypeRef v131 = v24;
      unint64_t v26 = v24 + 113;
      uint64_t v129 = DerivedStorage + 121 + 121800 * v23;
      uint64_t v133 = v19;
      CFStringRef v134 = v17;
      int v27 = v19;
      CFStringRef v135 = v24 + 113;
      CFStringRef v136 = v24 + 120;
      while (1)
      {
        if (v20)
        {
          unsigned int v39 = v21;
          int v40 = v20;
          uint64_t v41 = DerivedStorage;
          float64x2_t v42 = v17;
          int v43 = v27;
        }
        else
        {
          unsigned int v28 = *v17;
          if (v28 <= 0x1F)
          {
            uint64_t v29 = (char)*v26;
            if (v29 != -1)
            {
              unsigned __int8 v20 = 0;
              switch(*v17)
              {
                case 8u:
                  int v30 = &v136[15224 * (char)*v26];
                  unsigned int v33 = *((unsigned __int16 *)v30 + 34);
                  uint64_t v32 = v30 + 68;
                  unsigned __int8 v31 = v33;
                  __int16 v34 = v33 - 256;
                  if (v33 < 0x100) {
                    goto LABEL_48;
                  }
                  uint64_t v35 = 0;
                  *uint64_t v32 = v34;
                  CFIndex v36 = &v136[15224 * (int)v29];
                  v36[70] = 1;
                  v36 += 72;
                  uint64_t v37 = (uint64_t)&v36[1010 * v34 + 24 * HIBYTE(v34)];
                  *(void *)(v37 + 2) = 0;
                  *(void *)(v37 + 18) = 0;
                  *(void *)(v37 + 10) = 0;
                  uint64_t v38 = &v36[1010 * v31];
                  while (!v38[v35 + 2])
                  {
                    v35 += 24;
                    if (v35 == 1008) {
                      goto LABEL_63;
                    }
                  }
                  *uint64_t v38 = 0;
                  goto LABEL_63;
                case 0xCu:
                  cea708ClearWindow((uint64_t)&v136[15224 * (char)*v26]);
                  goto LABEL_63;
                case 0xDu:
                  CFRange v44 = v25;
                  CFRange v45 = v136;
                  CFIndex v46 = &v136[15224 * (int)v29];
                  __int16 v49 = *((_WORD *)v46 + 34);
                  uint64_t v47 = v46 + 68;
                  unsigned __int8 v48 = v49;
                  LOBYTE(v50) = v49 + 1;
                  *(_WORD *)uint64_t v47 = (v49 + 1);
                  int v47[2] = 1;
                  if (*(v47 - 61) < (v49 + 1))
                  {
                    int v47[2] = 1;
                    int v50 = v48;
                    *(_WORD *)uint64_t v47 = v48;
                    if (v48)
                    {
                      uint64_t v51 = &v131[15224 * (int)v29];
                      uint64_t v52 = v48;
                      do
                      {
                        memcpy(v51 + 192, v51 + 1202, 0x3F2uLL);
                        v51 += 1010;
                        --v52;
                      }
                      while (v52);
                      int v53 = v50;
                    }
                    else
                    {
                      int v53 = 0;
                    }
                    CFRange v45 = v136;
                    bzero(&v136[15224 * (int)v29 + 72 + 1010 * v53], 0x3F2uLL);
                  }
                  unsigned __int8 v20 = 0;
                  v45[15224 * (int)v29 + 72 + 1010 * v50] = 1;
                  unint64_t v25 = v44;
                  *CFRange v44 = 1;
                  unint64_t v26 = v135;
                  goto LABEL_68;
                case 0xEu:
                  CGRect v54 = &v136[15224 * (char)*v26];
                  unsigned int v57 = *((unsigned __int16 *)v54 + 34);
                  CGRect v55 = v54 + 68;
                  unsigned __int8 v56 = v57;
                  if (v57 < 0x100) {
                    goto LABEL_48;
                  }
                  CGRect v58 = &v136[15224 * (char)*v26];
                  _WORD *v55 = v56;
                  v58[70] = 1;
                  bzero(&v58[1010 * v56 + 72], 0x3F2uLL);
LABEL_63:
                  unsigned __int8 v20 = 0;
                  goto LABEL_64;
                case 0x10u:
                  unsigned __int8 v20 = 1;
                  goto LABEL_68;
                default:
                  goto LABEL_68;
              }
            }
            goto LABEL_40;
          }
          if ((v28 & 0x80) != 0 && v28 <= 0x9F)
          {
            unsigned __int8 v20 = 0;
            switch(*v17)
            {
              case 0x80u:
              case 0x81u:
              case 0x82u:
              case 0x83u:
              case 0x84u:
              case 0x85u:
              case 0x86u:
              case 0x87u:
                if (v27 < 1) {
                  goto LABEL_40;
                }
                unsigned __int8 v20 = *(unsigned char *)(DerivedStorage + 121800 * v130 + 15224 * (v28 & 7) + 120);
                if (v20)
                {
                  unsigned __int8 v20 = 0;
                  *unint64_t v26 = v28 & 7;
                }
                goto LABEL_69;
              case 0x88u:
                if (v27 < 2) {
                  goto LABEL_40;
                }
                char v79 = v25;
                uint64_t v80 = 0;
                char v81 = 0;
                unsigned int v82 = v17[1];
                uint64_t v83 = (uint64_t)v136;
                do
                {
                  if ((v82 >> v80))
                  {
                    cea708ClearWindow(v83);
                    char v81 = 1;
                  }
                  ++v80;
                  v83 += 15224;
                }
                while (v80 != 8);
                goto LABEL_112;
              case 0x89u:
                if (v27 < 2) {
                  goto LABEL_40;
                }
                uint64_t v84 = 0;
                char v85 = 0;
                unsigned int v86 = v17[1];
                CMTime v87 = (unsigned char *)v129;
                do
                {
                  if ((v86 >> v84))
                  {
                    char v85 = 1;
                    *CMTime v87 = 1;
                  }
                  ++v84;
                  v87 += 15224;
                }
                while (v84 != 8);
                unsigned __int8 v20 = 0;
                *unint64_t v25 = v85;
                goto LABEL_115;
              case 0x8Au:
                if (v27 < 2) {
                  goto LABEL_40;
                }
                uint64_t v88 = 0;
                char v89 = 0;
                unsigned int v90 = v17[1];
                unint64_t v91 = (unsigned char *)v129;
                do
                {
                  if ((v90 >> v88))
                  {
                    *unint64_t v91 = 0;
                    char v89 = 1;
                  }
                  ++v88;
                  v91 += 15224;
                }
                while (v88 != 8);
                goto LABEL_104;
              case 0x8Bu:
                if (v27 < 2) {
                  goto LABEL_40;
                }
                uint64_t v92 = 0;
                char v89 = 0;
                unsigned int v93 = v17[1];
                uint64_t v94 = (unsigned char *)v129;
                do
                {
                  if ((v93 >> v92))
                  {
                    unsigned char *v94 = *v94 == 0;
                    char v89 = 1;
                  }
                  ++v92;
                  v94 += 15224;
                }
                while (v92 != 8);
LABEL_104:
                unsigned __int8 v20 = 0;
                *unint64_t v25 = v89;
                goto LABEL_115;
              case 0x8Cu:
                if (v27 < 2) {
                  goto LABEL_40;
                }
                char v79 = v25;
                uint64_t v95 = 0;
                char v81 = 0;
                unsigned int v96 = v17[1];
                signed int v97 = v136;
                do
                {
                  if ((v96 >> v95))
                  {
                    bzero(v97, 0x3B78uLL);
                    if (v95 == *v135) {
                      *CFStringRef v135 = -1;
                    }
                    char v81 = 1;
                  }
                  ++v95;
                  v97 += 15224;
                }
                while (v95 != 8);
LABEL_112:
                unsigned __int8 v20 = 0;
                unint64_t v25 = v79;
                *char v79 = v81;
                v145[0] = 1;
                unint64_t v26 = v135;
                goto LABEL_69;
              case 0x8Du:
                if (v27 < 2) {
                  goto LABEL_40;
                }
                unsigned __int8 v20 = 0;
LABEL_115:
                v145[0] = 1;
                goto LABEL_69;
              case 0x8Eu:
                if (v27 < 1) {
                  goto LABEL_40;
                }
LABEL_48:
                unsigned __int8 v20 = 0;
                goto LABEL_68;
              case 0x8Fu:
                if (v27 < 1) {
                  goto LABEL_40;
                }
                *unint64_t v26 = -1;
                CMTime v98 = v136;
                uint64_t v99 = 8;
                do
                {
                  bzero(v98, 0x3B78uLL);
                  v98 += 15224;
                  --v99;
                }
                while (v99);
                unsigned __int8 v20 = 0;
LABEL_64:
                *unint64_t v25 = 1;
LABEL_68:
                v145[0] = 0;
                goto LABEL_69;
              case 0x90u:
                if (v27 < 3 || (char)*v26 == -1) {
                  goto LABEL_40;
                }
                unsigned __int8 v20 = 0;
                unsigned int v100 = v17[1];
                unsigned int v101 = v17[2];
                int v102 = &v136[15224 * (char)*v26];
                v102[48] = v100 & 3;
                v102[49] = v101 & 7;
                v102[50] = (v100 >> 2) & 3;
                v102[51] = v101 >> 7;
                v102[52] = (v101 & 0x40) != 0;
                v102[53] = (v101 >> 3) & 7;
                v102[54] = v100 >> 4;
                v102[67] = 1;
                goto LABEL_135;
              case 0x91u:
                if (v27 < 4 || (char)*v26 == -1) {
                  goto LABEL_40;
                }
                unsigned __int8 v20 = 0;
                unsigned int v103 = v17[2];
                unsigned int v104 = v17[3];
                CMTime v105 = &v136[15224 * (char)*v26];
                *(_DWORD *)(v105 + 55) = (v17[1] << 18) & 0x3000000 | ((v17[1] & 3) << 16) | (((v17[1] >> 2) & 3) << 8) | (v17[1] >> 4) & 3;
                *(_DWORD *)(v105 + 59) = (v103 << 18) & 0x3000000 | ((v103 & 3) << 16) | (((v103 >> 2) & 3) << 8) | (v103 >> 4) & 3;
                *(_DWORD *)(v105 + 63) = (((v104 >> 2) & 3) << 8) & 0xFFFCFFFC | ((v104 & 3) << 16) | (v104 >> 4) & 3;
                v105[67] = 1;
                int v106 = 3;
                goto LABEL_139;
              case 0x92u:
                if (v27 < 3 || (char)*v26 == -1) {
                  goto LABEL_40;
                }
                unsigned __int8 v20 = 0;
                unsigned int v107 = v17[1] & 0xF;
                unsigned int v108 = v17[2] & 0x3F;
                CFTypeRef v109 = &v136[15224 * (char)*v26];
                if (v109[7] < v107) {
                  LOWORD(v107) = v109[7];
                }
                if (v109[8] < v108) {
                  LOWORD(v108) = v109[8];
                }
                *((_WORD *)v109 + 34) = v107 | ((_WORD)v108 << 8);
                v109[70] = 1;
LABEL_135:
                int v106 = 2;
                goto LABEL_139;
              case 0x97u:
                if (v27 < 5 || (char)*v26 == -1) {
                  goto LABEL_40;
                }
                unsigned __int8 v20 = 0;
                unsigned int v110 = v17[2];
                unsigned int v111 = v17[3];
                unsigned int v112 = v17[4];
                CMSampleBufferRef v113 = &v136[15224 * (char)*v26];
                *((_DWORD *)v113 + 10) = (v17[1] << 18) & 0x3000000 | ((v17[1] & 3) << 16) | (((v17[1] >> 2) & 3) << 8) | (v17[1] >> 4) & 3;
                *((_DWORD *)v113 + 11) = (((v110 >> 2) & 3) << 8) & 0xFFFCFFFC | ((v110 & 3) << 16) | (v110 >> 4) & 3;
                *((void *)v113 + 4) = ((unint64_t)(v112 >> 4) << 48) | ((unint64_t)((v111 >> 5) & 4 | (v110 >> 6)) << 56) | ((unint64_t)((v112 >> 2) & 3) << 40) | ((unint64_t)(v112 & 3) << 32) | ((unint64_t)((v111 >> 6) & 1) << 24) | ((unint64_t)((v111 >> 2) & 3) << 16) | ((unint64_t)((v111 >> 4) & 3) << 8) | v111 & 3;
                int v106 = 4;
LABEL_139:
                v145[0] = v106;
                break;
              case 0x98u:
              case 0x99u:
              case 0x9Au:
              case 0x9Bu:
              case 0x9Cu:
              case 0x9Du:
              case 0x9Eu:
              case 0x9Fu:
                if (v27 >= 7)
                {
                  unsigned __int8 v59 = v17[1];
                  unsigned int v60 = v17[2];
                  unsigned int v61 = v17[3];
                  unsigned int v62 = v17[4];
                  unsigned int v63 = v17[6];
                  unsigned int v64 = v62 >> 4;
                  unsigned int v65 = v17[5] & 0x3F;
                  unsigned int v66 = (v63 >> 3) & 7;
                  if ((v62 & 0xF) == 0xF) {
                    char v67 = 14;
                  }
                  else {
                    char v67 = v62 & 0xF;
                  }
                  if (v65 >= 0x29) {
                    unsigned int v65 = 41;
                  }
                  double v68 = (double)((v65 + 1) >> 1);
                  if (v64 != 1) {
                    double v68 = 0.0;
                  }
                  CFAttributedStringRef v69 = &v136[15224 * (v28 & 7)];
                  int v70 = *v69;
                  if (v66 || !*v69)
                  {
                    if (v66 <= 1) {
                      unsigned int v66 = 1;
                    }
                    long long v71 = kPREDEFINED_WINDOW_STYLES[v66 - 1];
                  }
                  else
                  {
                    long long v71 = *(_OWORD *)&v136[15224 * (v28 & 7) + 32];
                  }
                  *(_OWORD *)&rhs.CFNumberRef value = v71;
                  unsigned int v73 = v63 & 7;
                  if (v73 || !v70)
                  {
                    if (v73 <= 1) {
                      unsigned int v73 = 1;
                    }
                    int v77 = (char *)&kPREDEFINED_PEN_STYLES + 19 * v73;
                    *(_OWORD *)&lhs.CFNumberRef value = *(_OWORD *)(v77 - 19);
                    *(CMTimeFlags *)((char *)&lhs.flags + 3) = *((_DWORD *)v77 - 1);
                    char v74 = 1;
                    CFDictionaryRef v75 = v136;
                  }
                  else
                  {
                    char v74 = 0;
                    CFDictionaryRef v75 = v136;
                    int v76 = &v136[15224 * (v28 & 7)];
                    *(_OWORD *)&lhs.CFNumberRef value = *((_OWORD *)v76 + 3);
                    *(CMTimeFlags *)((char *)&lhs.flags + 3) = *(_DWORD *)(v76 + 63);
                  }
                  *CFAttributedStringRef v69 = 1;
                  signed int v78 = &v75[15224 * (v28 & 7)];
                  v78[1] = (v59 & 0x20) != 0;
                  v78[2] = v59 & 7;
                  v78[3] = v64;
                  v78[4] = v60 >> 7;
                  v78[5] = v60 & 0x7F;
                  v78[6] = v61;
                  v78[7] = v67;
                  v78[8] = v65;
                  v78[9] = (v59 & 8) != 0;
                  v78[10] = (v59 & 0x10) != 0;
                  *((_OWORD *)v78 + 2) = *(_OWORD *)&rhs.value;
                  *((_OWORD *)v78 + 3) = *(_OWORD *)&lhs.value;
                  *(_DWORD *)(v78 + 63) = *(CMTimeFlags *)((char *)&lhs.flags + 3);
                  v78[67] = v74;
                  v78[70] = 1;
                  *((_DWORD *)v78 + 3) = v65 > 0x1F;
                  *((double *)v78 + 2) = floor((double)v61 / 5.0 + 0.5) - v68;
                  *((double *)v78 + 3) = floor((double)(v60 & 0x7F) / 5.0 + 0.5);
                  *unint64_t v26 = v28 & 7;
                  v145[0] = 6;
                }
                goto LABEL_40;
              default:
                goto LABEL_69;
            }
            goto LABEL_69;
          }
          unsigned int v39 = v21;
          uint64_t v41 = DerivedStorage;
          float64x2_t v42 = v17;
          int v43 = v27;
          int v40 = 0;
        }
        cea708ProcessCharacters(v41, v39, v42, v43, v40, v145);
LABEL_40:
        unsigned __int8 v20 = 0;
LABEL_69:
        uint64_t v72 = v145[0] + 1;
        v17 += v72;
        v27 -= v72;
        if (v17 >= v22)
        {
          uint64_t v114 = v133;
          CGFloat v17 = v134;
          goto LABEL_141;
        }
      }
    }
LABEL_146:
    if (Count == v9)
    {
      long long v115 = v121;
      *int v125 = v121;
      CMTimeEpoch v116 = v120;
      *(void *)(DerivedStorage + 56) = v120;
      *(void *)(DerivedStorage + 64) = 0;
      size_t v117 = *(const void **)(DerivedStorage + 72);
      if (v117)
      {
        CFRelease(v117);
        CMTimeEpoch v116 = v120;
        long long v115 = v121;
        *(void *)(DerivedStorage + 72) = 0;
      }
      *(void *)(DerivedStorage + 80) = 0x41F0000000000000;
      *(_OWORD *)&v142.CFNumberRef value = v115;
      v142.CMTimeEpoch epoch = v116;
    }
    else
    {
      CMTimeMakeWithSeconds(&lhs, (float)((float)v9 / *(float *)(DerivedStorage + 84)), *(_DWORD *)(DerivedStorage + 48));
      CMTimeEpoch epoch = lhs.epoch;
      CMTime v141 = lhs;
      long long v119 = *(_OWORD *)&lhs.value;
      *(_OWORD *)&lhs.CFNumberRef value = *v125;
      lhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 56);
      *(_OWORD *)&rhs.CFNumberRef value = v119;
      rhs.CMTimeEpoch epoch = epoch;
      CMTimeAdd(&v142, &lhs, &rhs);
    }
  }
  uint64_t result = 0;
  if (a3) {
    *a3 = v142;
  }
  return result;
}

uint64_t cea708_ResetAtTime(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  cea708Initialize(DerivedStorage);
  if (*(unsigned char *)(DerivedStorage + 121800 * *(int *)(DerivedStorage + 24) + 112))
  {
    long long v5 = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
    cea708Render(DerivedStorage, &v5);
  }
  return 0;
}

uint64_t cea708CreateDTVCCDataPacketBBufArray(uint64_t a1, char *a2, uint64_t a3, __CFArray **a4, void *a5)
{
  char v5 = *a2;
  unsigned int v6 = *a2 & 0x1F;
  unint64_t v7 = 3 * (*a2 & 0x1F);
  if (a3 - 2 < v7) {
    return 4294950853;
  }
  if (a5)
  {
    *a5 = (v7 + 2);
    char v5 = *a2;
  }
  if ((v5 & 0x40) == 0) {
    return 0;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!v6)
  {
LABEL_35:
    uint64_t v25 = 0;
    *a4 = Mutable;
    return v25;
  }
  unsigned int v12 = 0;
  CFAllocatorRef v13 = (CMBlockBufferRef *)(a1 + 104);
  CGFloat v14 = a2 + 4;
  while (1)
  {
    unsigned int v15 = *(v14 - 2);
    unsigned int v16 = v15 & 3;
    if (v15 < 0xFC || v16 < 2) {
      goto LABEL_34;
    }
    if (v16 == 3) {
      break;
    }
    if (!*v13)
    {
      *(unsigned char *)(a1 + 88) = -1;
      goto LABEL_33;
    }
    uint64_t v22 = CMBlockBufferReplaceDataBytes(v14 - 1, *v13, *(void *)(a1 + 96), 2uLL);
    if (v22) {
      goto LABEL_37;
    }
    uint64_t v23 = *(void *)(a1 + 96) + 2;
LABEL_28:
    *(void *)(a1 + 96) = v23;
    CFIndex v24 = *(OpaqueCMBlockBuffer **)(a1 + 104);
    if (!v24 || CMBlockBufferGetDataLength(v24) != *(void *)(a1 + 96)) {
      goto LABEL_34;
    }
    CFArrayAppendValue(Mutable, *v13);
    if (*v13)
    {
      CFRelease(*v13);
      *CFAllocatorRef v13 = 0;
    }
LABEL_33:
    *(void *)(a1 + 96) = 0;
LABEL_34:
    ++v12;
    v14 += 3;
    if (v12 >= v6) {
      goto LABEL_35;
    }
  }
  unsigned int v18 = *(v14 - 1);
  unsigned int v19 = v18 >> 6;
  int v20 = *(unsigned __int8 *)(a1 + 88);
  if (v20 == 255)
  {
    CMBlockBufferRef v21 = *v13;
  }
  else
  {
    if (v20 == 3) {
      LOBYTE(v20) = -1;
    }
    CMBlockBufferRef v21 = *v13;
    if ((char)v20 + 1 != v19)
    {
      *(unsigned char *)(a1 + 88) = -1;
      *(void *)(a1 + 96) = 0;
      if (!v21) {
        goto LABEL_26;
      }
      goto LABEL_25;
    }
  }
  if (v21)
  {
    *(unsigned char *)(a1 + 88) = -1;
    *(void *)(a1 + 96) = 0;
LABEL_25:
    CFRelease(v21);
    *CFAllocatorRef v13 = 0;
  }
LABEL_26:
  *(unsigned char *)(a1 + 88) = v19;
  uint64_t v22 = CMBlockBufferCreateWithMemoryBlock(v10, 0, 2 * (v18 & 0x3F) - 1, v10, 0, 0, 2 * (v18 & 0x3F) - 1, 1u, (CMBlockBufferRef *)(a1 + 104));
  if (!v22)
  {
    uint64_t v22 = CMBlockBufferReplaceDataBytes(v14, *v13, 0, 1uLL);
    uint64_t v23 = 1;
    if (!v22) {
      goto LABEL_28;
    }
  }
LABEL_37:
  uint64_t v25 = v22;
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v25;
}

void cea708Render(uint64_t a1, long long *a2)
{
  uint64_t v2 = a1;
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  int v54 = *(_DWORD *)(a1 + 24);
  uint64_t v3 = a1 + 121800 * v54;
  uint64_t v66 = v3 + 120;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  char v5 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 8, MEMORY[0x1E4F1D510]);
  CFAllocatorRef allocator = v4;
  uint64_t v6 = 0;
  unsigned int v57 = CFArrayCreateMutable(v4, 8, v5);
  unsigned __int8 v56 = (const void *)*MEMORY[0x1E4F1CFD0];
  CGRect v55 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v7 = v3 + 199;
  uint64_t v8 = (unsigned __int8 *)(v3 + 194);
  uint64_t v62 = v2;
  do
  {
    if (*(unsigned char *)(v66 + 15224 * v6 + 1))
    {
      uint64_t v9 = v66 + 15224 * v6;
      unsigned int v64 = (double *)(v9 + 16);
      unsigned int v63 = (double *)(v9 + 24);
      uint64_t v60 = v7;
      CFArrayRef theArray = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
      uint64_t v10 = 0;
      int v11 = 0x7FFFFFFF;
      int v12 = 0x80000000;
      unsigned __int8 v59 = v8;
      unsigned int v13 = 0x80000000;
      uint64_t v65 = v6;
      do
      {
        if (*(unsigned char *)(v66 + 15224 * v6 + 1010 * v10 + 72))
        {
          int v67 = v13;
          int v68 = v11;
          int v69 = v12;
          int v14 = (int)(*v64 + 1.0);
          unsigned int v70 = (int)(*v63 + (double)(int)v10 + 1.0);
          unsigned int v15 = *(CGColorSpace **)(v2 + 32);
          int v76 = 0;
          memset(v75, 0, sizeof(v75));
          bzero(&v73, 0x31EuLL);
          bzero(v72, 0x2A0uLL);
          unsigned int v16 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
          uint64_t v17 = 0;
          int v18 = 0;
          int v19 = 0;
          int v20 = 0;
          uint64_t v21 = v7;
          do
          {
            if (*(unsigned char *)(v21 - 5))
            {
              if (!v19) {
                int v20 = v17;
              }
              if (*(unsigned char *)(v21 - 1))
              {
                uint64_t v22 = v19;
                if (v18) {
                  v72[2 * v18 - 1] = v19 - v72[2 * v18 - 2];
                }
                uint64_t v23 = (char *)&v73 + 19 * v18;
                *(_OWORD *)uint64_t v23 = *(_OWORD *)v21;
                *(_DWORD *)(v23 + 15) = *(_DWORD *)(v21 + 15);
                v72[2 * v18++] = v19;
              }
              else
              {
                uint64_t v22 = v19;
              }
              *((_WORD *)v75 + v22) = *(_WORD *)(v21 - 3);
              ++v19;
            }
            else if (v19)
            {
              v72[2 * v18 - 1] = v19 - v72[2 * v18 - 2];
              CommandData = cea708CreateCommandData(allocator, (const UniChar *)v75, v19, v18, (uint64_t)&v73, (uint64_t)v72, (v20 + v14), v70, v15);
              CFArrayAppendValue(v16, CommandData);
              if (CommandData) {
                CFRelease(CommandData);
              }
              int v19 = 0;
              int v18 = 0;
            }
            ++v17;
            v21 += 24;
          }
          while (v17 != 42);
          if (v19)
          {
            v72[2 * v18 - 1] = v19 - v72[2 * v18 - 2];
            uint64_t v25 = cea708CreateCommandData(allocator, (const UniChar *)v75, v19, v18, (uint64_t)&v73, (uint64_t)v72, (v20 + v14), v70, v15);
            CFArrayAppendValue(v16, v25);
            if (v25) {
              CFRelease(v25);
            }
          }
          uint64_t v2 = v62;
          uint64_t v6 = v65;
          int v12 = v69;
          unsigned int v13 = v67;
          if (v16)
          {
            if (CFArrayGetCount(v16)) {
              CFArrayAppendValue(theArray, v16);
            }
            CFRelease(v16);
          }
          uint64_t v26 = 0;
          char v27 = 0;
          int v28 = 0x7FFFFFFF;
          int v29 = 0x80000000;
          int v30 = v8;
          do
          {
            int v32 = *v30;
            v30 += 24;
            int v31 = v32;
            if (v28 >= (int)v26) {
              int v33 = v26;
            }
            else {
              int v33 = v28;
            }
            if (v29 <= (int)v26) {
              int v34 = v26;
            }
            else {
              int v34 = v29;
            }
            if (v31)
            {
              int v28 = v33;
              int v29 = v34;
              char v27 = 1;
            }
            ++v26;
          }
          while (v26 != 42);
          int v11 = v68;
          if (v68 < v28) {
            int v28 = v68;
          }
          if (v67 > v29) {
            int v29 = v67;
          }
          if (v27)
          {
            int v11 = v28;
            unsigned int v13 = v29;
          }
          if (v12 <= (int)v10) {
            int v12 = v10;
          }
        }
        ++v10;
        v7 += 1010;
        v8 += 1010;
      }
      while (v10 != 15);
      uint64_t v8 = v59;
      uint64_t v7 = v60;
      if (theArray && CFArrayGetCount(theArray))
      {
        uint64_t v35 = *(CGColorSpace **)(v2 + 32);
        CFIndex v36 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        uint64_t v37 = (unsigned char *)(v66 + 15224 * v6);
        CGColorRef CGColor = cea708CreateCGColor(v35, v37 + 40);
        CGColorRef v39 = cea708CreateCGColor(v35, v37 + 44);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFDictionaryAddValue(v36, @"U", @"cells");
        FigCFDictionarySetCGRect();
        CFDictionaryAddValue(v36, @"C", CGColor);
        FigCFDictionarySetInt32();
        CFDictionaryAddValue(v36, @"G", v39);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        if (v37[35]) {
          int v40 = v56;
        }
        else {
          int v40 = v55;
        }
        CFDictionarySetValue(v36, @"O", v40);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        if (v39) {
          CFRelease(v39);
        }
        if (CGColor) {
          CFRelease(CGColor);
        }
        CFArrayAppendValue(v57, v36);
        if (v36) {
          CFRelease(v36);
        }
        uint64_t v41 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        FigCFDictionarySetInt32();
        CFDictionaryAddValue(v41, @"R", theArray);
        CFRelease(theArray);
        CFArrayAppendValue(Mutable, v41);
        uint64_t v7 = v60;
        if (v41) {
          CFRelease(v41);
        }
      }
    }
    ++v6;
    v7 += 15224;
    v8 += 15224;
  }
  while (v6 != 8);
  CFArrayGetCount(v57);
  float64x2_t v42 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(v42, @"F", @"c708");
  CFDictionaryAddValue(v42, @"W", v57);
  if (*(void *)(v2 + 8))
  {
    uint64_t v43 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v43)
    {
      CFRange v44 = (const void *)v43;
      CFRange v45 = *(void (**)(uint64_t, __CFDictionary *, long long *, uint64_t))(v2 + 8);
      long long v73 = *a2;
      uint64_t v74 = *((void *)a2 + 2);
      v45(6, v42, &v73, v43);
      CFRelease(v44);
    }
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v57) {
    CFRelease(v57);
  }
  if (Mutable) {
    CFArrayGetCount(Mutable);
  }
  CFIndex v46 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(v46, @"F", @"c708");
  CFDictionaryAddValue(v46, @"C", Mutable);
  if (*(void *)(v2 + 8))
  {
    uint64_t v47 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v47)
    {
      unsigned __int8 v48 = (const void *)v47;
      __int16 v49 = *(void (**)(uint64_t, __CFDictionary *, long long *, uint64_t))(v2 + 8);
      long long v73 = *a2;
      uint64_t v74 = *((void *)a2 + 2);
      v49(7, v46, &v73, v47);
      CFRelease(v48);
    }
  }
  if (v46) {
    CFRelease(v46);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (*(void *)(v2 + 8))
  {
    uint64_t v50 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v50)
    {
      uint64_t v51 = (const void *)v50;
      uint64_t v52 = *(void (**)(uint64_t, void, long long *, uint64_t))(v2 + 8);
      long long v73 = *a2;
      uint64_t v74 = *((void *)a2 + 2);
      v52(1, 0, &v73, v50);
      CFRelease(v51);
    }
  }
  *(unsigned char *)(v2 + 121800 * v54 + 112) = 0;
}

uint64_t cea708ProcessCharacters(uint64_t result, unsigned int a2, unsigned __int8 *a3, int a4, int a5, _DWORD *a6)
{
  if (a4 >= 1)
  {
    uint64_t v6 = *(char *)(result + 121800 * a2 + 113);
    if (v6 != -1)
    {
      uint64_t v7 = result + 121800 * a2;
      uint64_t v8 = v7 + 120;
      uint64_t v9 = v7 + 120 + 15224 * *(char *)(v7 + 113);
      unsigned int v11 = *(unsigned __int8 *)(v9 + 69);
      uint64_t v10 = (unsigned char *)(v9 + 69);
      if (v11 <= *(v10 - 61))
      {
        uint64_t v12 = v8 + 15224 * *(char *)(result + 121800 * a2 + 113);
        unint64_t v13 = *(unsigned __int16 *)(v12 + 68);
        unint64_t v14 = v13 >> 8;
        unsigned int v15 = *(_WORD *)(v12 + 68);
        int v16 = *a3;
        *(unsigned char *)(v12 + 1010 * *(_WORD *)(v12 + 68) + 24 * (v13 >> 8) + 74) = 1;
        if (a5)
        {
          __int16 v17 = 95;
          switch(v16)
          {
            case ' ':
              __int16 v17 = 32;
              break;
            case '!':
              __int16 v17 = 160;
              break;
            case '""':
            case '#':
            case '$':
            case '&':
            case '\'':
            case '(':
            case ')':
            case '+':
            case '-':
            case '.':
            case '/':
            case '6':
            case '7':
            case '8':
            case ';':
            case '>':
              break;
            case '%':
              __int16 v17 = 8230;
              break;
            case '*':
              __int16 v17 = 352;
              break;
            case ',':
              __int16 v17 = 338;
              break;
            case '0':
              __int16 v17 = 9608;
              break;
            case '1':
              __int16 v17 = 8216;
              break;
            case '2':
              __int16 v17 = 8217;
              break;
            case '3':
              __int16 v17 = 8220;
              break;
            case '4':
              __int16 v17 = 8221;
              break;
            case '5':
              __int16 v17 = 8226;
              break;
            case '9':
              __int16 v17 = 8482;
              break;
            case ':':
              __int16 v17 = 353;
              break;
            case '<':
              __int16 v17 = 339;
              break;
            case '=':
              __int16 v17 = 8480;
              break;
            case '?':
              __int16 v17 = 376;
              break;
            default:
              switch(v16)
              {
                case 'v':
                  __int16 v17 = 8539;
                  break;
                case 'w':
                  __int16 v17 = 8540;
                  break;
                case 'x':
                  __int16 v17 = 8541;
                  break;
                case 'y':
                  __int16 v17 = 8542;
                  break;
                case 'z':
                  __int16 v17 = 9474;
                  break;
                case '{':
                  __int16 v17 = 9488;
                  break;
                case '|':
                  __int16 v17 = 9492;
                  break;
                case '}':
                  __int16 v17 = 9472;
                  break;
                case '~':
                  __int16 v17 = 9496;
                  break;
                case '\x7F':
                  __int16 v17 = 9484;
                  break;
                default:
                  goto LABEL_10;
              }
              break;
          }
        }
        else if (v16 == 127)
        {
          __int16 v17 = 9834;
        }
        else
        {
          __int16 v17 = v16;
        }
LABEL_10:
        int v18 = (unsigned char *)(v7 + 112);
        uint64_t v19 = v8 + 15224 * (int)v6;
        uint64_t result = 24;
        uint64_t v20 = v19 + 1010 * v15 + 24 * v14;
        *(_WORD *)(v20 + 76) = v17;
        *(_OWORD *)(v20 + 79) = *(_OWORD *)(v19 + 48);
        *(_DWORD *)(v20 + 94) = *(_DWORD *)(v19 + 63);
        int v22 = *(unsigned __int8 *)(v19 + 67);
        uint64_t v21 = (unsigned char *)(v19 + 67);
        if (v22 || *(unsigned char *)(v8 + 15224 * (int)v6 + 70)) {
          *(unsigned char *)(v8 + 15224 * (int)v6 + 1010 * v15 + 24 * v14 + 78) = 1;
        }
        *uint64_t v10 = BYTE1(v13) + 1;
        *uint64_t v21 = 0;
        uint64_t v23 = v8 + 15224 * (int)v6;
        *(unsigned char *)(v23 + 70) = 0;
        *(unsigned char *)(v23 + 1010 * v13 + 72) = 1;
        *int v18 = 1;
        *a6 = 0;
      }
    }
  }
  return result;
}

void cea708ClearWindow(uint64_t a1)
{
  uint64_t v2 = (char *)(a1 + 72);
  uint64_t v3 = 15;
  do
  {
    bzero(v2, 0x3F2uLL);
    v2 += 1010;
    --v3;
  }
  while (v3);
  *(_WORD *)(a1 + 68) = 0;
  *(unsigned char *)(a1 + 70) = 1;
}

__CFDictionary *cea708CreateCommandData(const __CFAllocator *a1, const UniChar *a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, CGColorSpace *a9)
{
  CFIndex v13 = a3;
  CFStringRef v14 = CFStringCreateWithCharacters(a1, a2, a3);
  CFAllocatorRef allocator = a1;
  CFMutableArrayRef Mutable = CFAttributedStringCreateMutable(a1, v13);
  CFAttributedStringBeginEditing(Mutable);
  int v33 = Mutable;
  v34.uint64_t location = 0;
  v34.length = 0;
  CFAttributedStringReplaceString(Mutable, v34, v14);
  if (v14) {
    CFRelease(v14);
  }
  if (a4 >= 1)
  {
    int v16 = (const void *)*MEMORY[0x1E4F1CFD0];
    __int16 v17 = (const void *)*MEMORY[0x1E4F1CFC8];
    uint64_t v18 = a4;
    uint64_t v19 = (unsigned __int8 *)(a5 + 7);
    uint64_t v20 = a6 + 8;
    do
    {
      CGColorRef CGColor = cea708CreateCGColor(a9, v19);
      CGColorRef v22 = cea708CreateCGColor(a9, v19 + 4);
      CGColorRef v23 = cea708CreateCGColor(a9, v19 + 8);
      CFIndex v24 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v24, @"t", CGColor);
      CFDictionarySetValue(v24, @"b", v22);
      CFDictionarySetValue(v24, @"e", v23);
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (*(v19 - 3)) {
        uint64_t v25 = v16;
      }
      else {
        uint64_t v25 = v17;
      }
      CFDictionarySetValue(v24, @"u", v25);
      if (*(v19 - 4)) {
        uint64_t v26 = v16;
      }
      else {
        uint64_t v26 = v17;
      }
      CFDictionarySetValue(v24, @"i", v26);
      CFDictionarySetValue(v24, @"d", v16);
      CGColorRelease(v23);
      CGColorRelease(v22);
      CGColorRelease(CGColor);
      CFAttributedStringSetAttributes(v33, *(CFRange *)(v20 - 8), v24, 1u);
      if (v24) {
        CFRelease(v24);
      }
      v19 += 19;
      v20 += 16;
      --v18;
    }
    while (v18);
  }
  CFAttributedStringEndEditing(v33);
  char v27 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  int v28 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef v29 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  int v30 = CFDictionaryCreateMutable(allocator, 0, v27, v28);
  CFDictionarySetValue(v30, @"S", v33);
  CFDictionarySetValue(v30, @"L", v29);
  if (v29) {
    CFRelease(v29);
  }
  if (v33) {
    CFRelease(v33);
  }
  return v30;
}

CGColorRef cea708CreateCGColor(CGColorSpace *a1, unsigned __int8 *a2)
{
  components[4] = *(CGFloat *)MEMORY[0x1E4F143B8];
  double v2 = (double)(a2[1] >> 1);
  components[0] = (double)(*a2 >> 1);
  components[1] = v2;
  int v3 = a2[3];
  double v4 = 1.0;
  if (v3 == 2) {
    double v4 = 0.5;
  }
  if (v3 == 3) {
    double v4 = 0.0;
  }
  CGFloat components[2] = (double)(a2[2] >> 1);
  components[3] = v4;
  return CGColorCreate(a1, components);
}