uint64_t bapspManager_invalidate(uint64_t a1)
{
  uint64_t DerivedStorage;
  NSObject *os_log_and_send_and_compose_flags_and_os_log_type;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, __CFString *, void);
  NSObject *v9;
  opaqueCMBufferQueueTriggerToken *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  void block[6];
  os_log_type_t type;
  int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E4F143B8];
  v31 = 0;
  v32 = &v31;
  v33 = 0x2000000000;
  v34 = 0;
  DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351208)
  {
    v30 = 0;
    type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)(DerivedStorage + 178))
  {
    *(unsigned char *)(DerivedStorage + 178) = 1;
    v4 = *(NSObject **)(DerivedStorage + 72);
    if (v4) {
      dispatch_sync(v4, &__block_literal_global_115);
    }
    v5 = *(void *)(DerivedStorage + 88);
    v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      v7 = v6;
    }
    else {
      v7 = 0;
    }
    v8 = *(void (**)(uint64_t, __CFString *, void))(v7 + 56);
    if (v8) {
      v8(v5, @"DownstreamConsumer", 0);
    }
    *((_DWORD *)v32 + 6) = 0;
    v9 = *(NSObject **)(DerivedStorage + 72);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __bapspManager_invalidate_block_invoke_2;
    block[3] = &unk_1E579F308;
    block[4] = &v31;
    block[5] = a1;
    dispatch_sync(v9, block);
    v10 = *(opaqueCMBufferQueueTriggerToken **)(DerivedStorage + 120);
    if (v10)
    {
      CMBufferQueueRemoveTrigger(*(CMBufferQueueRef *)(DerivedStorage + 112), v10);
      *(void *)(DerivedStorage + 120) = 0;
    }
    v11 = *(void *)(DerivedStorage + 128);
    if (v11)
    {
      v12 = *(void *)(DerivedStorage + 88);
      v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        v14 = v13;
      }
      else {
        v14 = 0;
      }
      v15 = *(void (**)(uint64_t, uint64_t))(v14 + 40);
      if (v15) {
        v15(v12, v11);
      }
      *(void *)(DerivedStorage + 128) = 0;
    }
    v16 = *(const void **)(DerivedStorage + 40);
    if (v16)
    {
      CFRelease(v16);
      *(void *)(DerivedStorage + 40) = 0;
    }
    v17 = *(const void **)(DerivedStorage + 48);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(DerivedStorage + 48) = 0;
    }
    v18 = *(const void **)(DerivedStorage + 144);
    if (v18)
    {
      CFRelease(v18);
      *(void *)(DerivedStorage + 144) = 0;
    }
    v19 = *(const void **)(DerivedStorage + 152);
    if (v19)
    {
      CFRelease(v19);
      *(void *)(DerivedStorage + 152) = 0;
    }
    v20 = *(const void **)(DerivedStorage + 80);
    if (v20)
    {
      CFRelease(v20);
      *(void *)(DerivedStorage + 80) = 0;
    }
    v21 = *(const void **)(DerivedStorage + 112);
    if (v21)
    {
      CFRelease(v21);
      *(void *)(DerivedStorage + 112) = 0;
    }
    v22 = *(const void **)(DerivedStorage + 88);
    if (v22)
    {
      CFRelease(v22);
      *(void *)(DerivedStorage + 88) = 0;
    }
    v23 = *(const void **)(DerivedStorage + 96);
    if (v23)
    {
      CFRelease(v23);
      *(void *)(DerivedStorage + 96) = 0;
    }
    v24 = *(const void **)(DerivedStorage + 160);
    if (v24)
    {
      CFRelease(v24);
      *(void *)(DerivedStorage + 160) = 0;
    }
    v25 = *(const void **)(DerivedStorage + 64);
    if (v25)
    {
      CFRelease(v25);
      *(void *)(DerivedStorage + 64) = 0;
    }
    v26 = *(const void **)(DerivedStorage + 168);
    if (v26)
    {
      CFRelease(v26);
      *(void *)(DerivedStorage + 168) = 0;
    }
  }
  _Block_object_dispose(&v31, 8);
  return 0;
}

void bapspManager_finalize(uint64_t a1)
{
  DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (dword_1E9351208)
  {
    os_log_and_send_and_compose_flags_and_os_log_type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  bapspManager_invalidate(a1);
  v4 = DerivedStorage[9];
  if (v4)
  {
    dispatch_release(v4);
    DerivedStorage[9] = 0;
  }
  v5 = DerivedStorage[4];
  if (v5)
  {
    dispatch_release(v5);
    DerivedStorage[4] = 0;
  }
  v6 = (const void *)DerivedStorage[3];
  if (v6) {
    CFRelease(v6);
  }
}

__CFString *bapspManager_copyDebugDescription(uint64_t a1)
{
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigBufferedAirPlaySubPipeManagerForRenderPipelinet %p>", a1);
  return Mutable;
}

uint64_t bapspManager_copyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v13 = 0;
  v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 178))
  {
    v9 = *(NSObject **)(DerivedStorage + 72);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __bapspManager_copyProperty_block_invoke;
    block[3] = &unk_1E579F400;
    block[4] = &v13;
    block[5] = a1;
    block[6] = a2;
    block[7] = a3;
    block[8] = a4;
    dispatch_sync(v9, block);
  }
  uint64_t v10 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v10;
}

uint64_t bapspManager_setProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v11 = 0;
  v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  v7 = *(NSObject **)(DerivedStorage + 72);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __bapspManager_setProperty_block_invoke;
  block[3] = &unk_1E579F428;
  block[6] = a2;
  block[7] = a3;
  block[4] = &v11;
  block[5] = DerivedStorage;
  block[8] = a1;
  dispatch_sync(v7, block);
  uint64_t v8 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v8;
}

uint64_t __bapspManager_invalidate_block_invoke_2(uint64_t a1)
{
  uint64_t result = bapspManager_clearCurrentSubPipe(*(void *)(a1 + 40));
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  return result;
}

uint64_t bapspManager_clearCurrentSubPipe(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = *(void *)(DerivedStorage + 104);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v6 + 16);
  if (!v8) {
    return 4294954514;
  }
  uint64_t result = v8(v3);
  if (result) {
    return result;
  }
  uint64_t v9 = *(void *)(v4 + 104);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v11 = v10 ? v10 : 0;
  v12 = *(uint64_t (**)(uint64_t))(v11 + 32);
  if (!v12) {
    return 4294954514;
  }
  uint64_t result = v12(v9);
  if (result) {
    return result;
  }
  uint64_t result = bapspManager_removeListenersForSubPipe(a1, *(void *)(v4 + 104));
  if (result) {
    return result;
  }
  uint64_t CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(*(void *)(v4 + 104));
  if (!CMBaseObject) {
    return 4294954516;
  }
  uint64_t v14 = CMBaseObject;
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v16 = v15 ? v15 : 0;
  v17 = *(uint64_t (**)(uint64_t))(v16 + 24);
  if (!v17) {
    return 4294954514;
  }
  uint64_t result = v17(v14);
  if (!result)
  {
    uint64_t result = *(void *)(v4 + 104);
    if (result)
    {
      CFRelease((CFTypeRef)result);
      uint64_t result = 0;
      *(void *)(v4 + 104) = 0;
    }
  }
  return result;
}

uint64_t bapspManager_removeListenersForSubPipe(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterRemoveWeakListeners();
}

void bapspManager_subPipeDecoderError(uint64_t a1, const void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  int v11 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 178))
  {
    uint64_t v4 = DerivedStorage;
    if (dword_1E9351208)
    {
      int v9 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(unsigned char *)(v4 + 136))
    {
      if (a2) {
        CFRetain(a2);
      }
      uint64_t v6 = *(NSObject **)(v4 + 72);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __bapspManager_subPipeDecoderError_block_invoke;
      block[3] = &unk_1E579F330;
      block[4] = v10;
      block[5] = a2;
      dispatch_async(v6, block);
    }
  }
  _Block_object_dispose(v10, 8);
}

uint64_t bapspManager_notificationsFromSubPipe()
{
  uint64_t result = FigCFEqual();
  if (result)
  {
    uint64_t result = FigCFEqual();
    if (result)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      return CMNotificationCenterPostNotification();
    }
  }
  return result;
}

void bapspManager_subPipeFinishedProcessingData(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  v12[0] = 0;
  v12[1] = v12;
  v12[2] = 0x2000000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 178))
  {
    uint64_t v6 = DerivedStorage;
    if (dword_1E9351208)
    {
      int v11 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (a2) {
      CFRetain(a2);
    }
    uint64_t v8 = *(NSObject **)(v6 + 72);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __bapspManager_subPipeFinishedProcessingData_block_invoke;
    block[3] = &unk_1E579F3D8;
    block[5] = a3;
    void block[6] = a2;
    block[4] = v12;
    dispatch_async(v8, block);
  }
  _Block_object_dispose(v12, 8);
}

void __bapspManager_subPipeDecoderError_block_invoke(uint64_t a1)
{
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = bapspManager_disconnectSbufBridge();
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = bapspManager_clearCurrentSubPipe(*(void *)(a1 + 40));
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      bapspManager_setSubPipeTerminationInFlight(*(void *)(a1 + 40), 0);
      bapspManager_scheduleProcessingDataIfPossible(*(const void **)(a1 + 40));
    }
  }
  uint64_t v2 = *(void *)(a1 + 40);

  bapspManager_releaseAsync(v2);
}

uint64_t bapspManager_disconnectSbufBridge()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E9351208)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(unsigned char *)(DerivedStorage + 178)) {
    return 0;
  }
  uint64_t v2 = *(void *)(DerivedStorage + 88);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, __CFString *, void))(v4 + 56);
  if (v5) {
    return v5(v2, @"DownstreamConsumer", 0);
  }
  else {
    return 4294954514;
  }
}

uint64_t bapspManager_setSubPipeTerminationInFlight(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 136) != a2)
  {
    *(unsigned char *)(result + 136) = a2;
    return CMBaseObjectGetDerivedStorage();
  }
  return result;
}

void bapspManager_scheduleProcessingDataIfPossible(const void *a1)
{
  CMBaseObjectGetDerivedStorage();
  if (bapspManager_dataFlowIsAllowed())
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (a1) {
      CFRetain(a1);
    }
    uint64_t v3 = *(NSObject **)(DerivedStorage + 72);
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 0x40000000;
    v4[2] = __bapspManager_dequeueInspectSendSampleBuffer_block_invoke;
    v4[3] = &__block_descriptor_tmp_119_0;
    v4[4] = DerivedStorage;
    v4[5] = a1;
    dispatch_async(v3, v4);
  }
}

BOOL bapspManager_dataFlowIsAllowed()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = *(void *)(DerivedStorage + 104);
  if (v2)
  {
    uint64_t v3 = *(void *)(DerivedStorage + 88);
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 16);
    if (v6) {
      LODWORD(v2) = v6(v3) != 0;
    }
    else {
      LODWORD(v2) = 0;
    }
  }
  BOOL v7 = *(double *)(v1 + 56) != -999999.875 && *(unsigned char *)(v1 + 136) == 0;
  return !v2 && v7;
}

void __bapspManager_dequeueInspectSendSampleBuffer_block_invoke(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v220 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 178))
  {
    uint64_t v2 = 0;
    CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F21A28];
    CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F21A30];
    CFStringRef key = (const __CFString *)*MEMORY[0x1E4F1F258];
    CFTypeRef value = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    CFStringRef v199 = (const __CFString *)*MEMORY[0x1E4F21A30];
    uint64_t v194 = *MEMORY[0x1E4F1FE08];
    CFStringRef v195 = (const __CFString *)*MEMORY[0x1E4F21A40];
    CFStringRef v202 = (const __CFString *)*MEMORY[0x1E4F21A28];
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      uint64_t v6 = (opaqueCMSampleBuffer *)CMBufferQueueCopyHead(*(CMBufferQueueRef *)(*(void *)(v1 + 32) + 112));
      if (!v6) {
        goto LABEL_340;
      }
      BOOL v7 = v6;
      CMSampleBufferGetOutputPresentationTimeStamp(&block, v6);
      uint64_t v8 = *(const void **)(v1 + 40);
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      long long v10 = *MEMORY[0x1E4F1F9F8];
      *(_OWORD *)&v205.CFTypeRef value = *MEMORY[0x1E4F1F9F8];
      CMTimeEpoch v11 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
      v205.epoch = v11;
      CFTypeRef v204 = 0;
      if (!*(unsigned char *)(DerivedStorage + 178)) {
        break;
      }
LABEL_306:
      uint64_t v184 = *(void *)(*(void *)(v1 + 32) + 88);
      uint64_t v185 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v185) {
        uint64_t v186 = v185;
      }
      else {
        uint64_t v186 = 0;
      }
      v187 = *(void (**)(uint64_t, opaqueCMSampleBuffer *))(v186 + 8);
      if (v187) {
        v187(v184, v7);
      }
      CMBufferRef v188 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(*(void *)(v1 + 32) + 112));
      if (v188) {
        CFRelease(v188);
      }
LABEL_313:
      CFRelease(v7);
      if (!bapspManager_dataFlowIsAllowed()) {
        goto LABEL_340;
      }
      if (++v2 == 5)
      {
        bapspManager_scheduleProcessingDataIfPossible(*(void *)(v1 + 40));
        goto LABEL_340;
      }
    }
    uint64_t v12 = DerivedStorage;
    if (*(double *)(DerivedStorage + 56) == -999999.875)
    {
      FigSignalErrorAt();
      goto LABEL_108;
    }
    long long v200 = v10;
    CMSampleBufferGetOutputPresentationTimeStamp(&v205, v7);
    uint64_t v13 = *(void *)(v12 + 104);
    if (v13)
    {
      uint64_t CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(v13);
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v16 = v15 ? v15 : 0;
      v17 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v16 + 48);
      if (!v17 || v17(CMBaseObject, @"SubPipeType", v3, &v204)) {
        goto LABEL_108;
      }
    }
    CMBaseObjectGetDerivedStorage();
    CMSampleBufferGetOutputPresentationTimeStamp(&block, v7);
    CFTypeRef v18 = CMGetAttachment(v7, v4, 0);
    CFTypeRef v19 = CMGetAttachment(v7, v5, 0);
    if (v18) {
      bapspManager_setSubPipeTerminationInFlight((uint64_t)v8, 1);
    }
    if (v19) {
      bapspManager_setSubPipeTerminationInFlight((uint64_t)v8, 1);
    }
    uint64_t v20 = CMBaseObjectGetDerivedStorage();
    CMAudioFormatDescriptionRef formatDescription = 0;
    cf.CFTypeRef value = 0;
    CFTypeRef v209 = 0;
    CFTypeRef v210 = 0;
    CFTypeRef v207 = 0;
    CFBooleanRef BOOLean = 0;
    char v206 = 0;
    if (bapspManager_isMarkerSbuf(v7) || CMGetAttachment(v7, key, 0) == value)
    {
      char v54 = 1;
      v55 = @"SubPipeTypeTranscode";
      goto LABEL_63;
    }
    v21 = CMSampleBufferGetFormatDescription(v7);
    if (v21)
    {
      if (FigEndpointStreamAudioFormatDescriptionCreateWithCMFormatDescription())
      {
        char v54 = 1;
        v55 = @"SubPipeTypeTranscode";
        goto LABEL_62;
      }
      uint64_t v22 = *(void *)(v20 + 40);
      CMTimeValue v23 = cf.value;
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      v27 = *(unsigned int (**)(uint64_t, CMTimeValue, char *))(v25 + 80);
      if (!v27 || v27(v22, v23, &v206) || (uint64_t ASBD = FigEndpointStreamAudioFormatDescriptionGetASBD()) == 0)
      {
LABEL_61:
        char v54 = 1;
        v55 = @"SubPipeTypeTranscode";
        CFAllocatorRef v3 = allocator;
LABEL_62:
        CFStringRef v5 = v199;
        goto LABEL_63;
      }
    }
    else
    {
      uint64_t ASBD = 0;
    }
    uint64_t v28 = *(void *)(v20 + 104);
    if (v28)
    {
      uint64_t v29 = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(v28);
      uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v30) {
        uint64_t v31 = v30;
      }
      else {
        uint64_t v31 = 0;
      }
      v33 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v31 + 48);
      if (v33) {
        v33(v29, @"SubPipeType", allocator, &v207);
      }
      uint64_t v34 = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(*(void *)(v20 + 104));
      uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v35) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 0;
      }
      v37 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMAudioFormatDescriptionRef *))(v36 + 48);
      if (v37) {
        v37(v34, @"CurrentFormatDescription", allocator, &formatDescription);
      }
      BOOL v32 = CMAudioFormatDescriptionEqual(formatDescription, v21, 7u, 0) == 0;
    }
    else
    {
      BOOL v32 = 0;
    }
    uint64_t Decryptor = FigSampleBufferGetDecryptor();
    BOOL v43 = 1;
    if (Decryptor)
    {
      uint64_t v39 = Decryptor;
      uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v41 = v40 ? v40 : 0;
      v42 = *(unsigned int (**)(uint64_t, uint64_t, const __CFAllocator *, CFTypeRef *))(v41 + 48);
      if (!v42 || v42(v39, v194, allocator, &v210) || v210 != value) {
        BOOL v43 = 0;
      }
    }
    uint64_t v44 = FigBufferedAirPlayOutputGetCMBaseObject(*(void *)(v20 + 40));
    uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v45) {
      uint64_t v46 = v45;
    }
    else {
      uint64_t v46 = 0;
    }
    v47 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFBooleanRef *))(v46 + 48);
    if (v47 && !v47(v44, @"ALACIsAllowed", allocator, &BOOLean))
    {
      uint64_t v48 = FigBufferedAirPlayOutputGetCMBaseObject(*(void *)(v20 + 40));
      uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v50 = v49 ? v49 : 0;
      v51 = *(unsigned int (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v50 + 48);
      if (v51)
      {
        if (!v51(v48, @"SupportsReceiverSideSoundCheck", allocator, &v209))
        {
          int v52 = *(unsigned __int8 *)(v20 + 177);
          BOOL v191 = v32;
          if (v52 == CFBooleanGetValue(BOOLean)
            || (*(unsigned char *)(v20 + 177) = CFBooleanGetValue(BOOLean),
                uint64_t v83 = CMBaseObjectGetDerivedStorage(),
                block.CFTypeRef value = 0,
                !*(void *)(v83 + 104)))
          {
            BOOL v53 = 0;
            goto LABEL_173;
          }
          uint64_t v84 = v83;
          if (!CMSampleBufferGetFormatDescription(v7)
            || FigEndpointStreamAudioFormatDescriptionCreateWithCMFormatDescription()
            || (uint64_t v85 = FigEndpointStreamAudioFormatDescriptionGetASBD()) == 0
            || (uint64_t v86 = v85, (v87 = FigEndpointStreamAudioFormatDescriptionGetASBD()) == 0))
          {
            BOOL v53 = 0;
LABEL_171:
            if (block.value) {
              CFRelease((CFTypeRef)block.value);
            }
LABEL_173:
            *(unsigned char *)(v20 + 176) = CFBooleanGetValue((CFBooleanRef)v209);
            double v112 = *(double *)(v20 + 56);
            int v113 = CFBooleanGetValue(BOOLean);
            int v114 = 1;
            if (ASBD && !v113)
            {
              int v114 = 0;
              int v115 = *(_DWORD *)(ASBD + 8);
              if (v115 > 1902928226)
              {
                if (v115 != 1902928227)
                {
                  int v116 = 2053923171;
LABEL_180:
                  if (v115 != v116) {
                    int v114 = 1;
                  }
                }
              }
              else if (v115 != 1634492771)
              {
                int v116 = 1668047203;
                goto LABEL_180;
              }
            }
            BOOL v119 = v112 == 1.0 && v206 != 0 && v43 && *(void *)(v20 + 64) == 0;
            CFAllocatorRef v3 = allocator;
            CFStringRef v5 = v199;
            int v120 = v114 & v119;
            if (!v207
              || FigCFEqual()
              || v53
              || (v55 = @"SubPipeTypeTranscode", char v54 = 1, FigCFEqual()) && v191)
            {
              char v54 = 0;
              if (v120) {
                v55 = @"SubPipeTypePassthrough";
              }
              else {
                v55 = @"SubPipeTypeTranscode";
              }
            }
LABEL_63:
            if (formatDescription) {
              CFRelease(formatDescription);
            }
            CFStringRef v4 = v202;
            if (cf.value) {
              CFRelease((CFTypeRef)cf.value);
            }
            if (v207) {
              CFRelease(v207);
            }
            if (v210) {
              CFRelease(v210);
            }
            if (v209) {
              CFRelease(v209);
            }
            if (BOOLean) {
              CFRelease(BOOLean);
            }
            if (v54) {
              goto LABEL_284;
            }
            if (*(void *)(v12 + 104))
            {
              uint64_t v56 = CMBaseObjectGetDerivedStorage();
              if (!*(void *)(v56 + 104))
              {
                uint64_t v1 = a1;
LABEL_322:
                int v76 = 0;
                goto LABEL_303;
              }
              uint64_t v57 = v56;
              CMSampleBufferGetOutputPresentationTimeStamp(&cf, v7);
              CMAudioFormatDescriptionRef formatDescription = 0;
              if (cf.flags)
              {
                v68 = (CMSampleTimingInfo *)CFAllocatorAllocate(v3, 72, 0);
                if (!v68)
                {
                  int v70 = FigSignalErrorAt();
                  CFTypeRef v71 = 0;
                  goto LABEL_96;
                }
                sampleTimingArray = v68;
                CMTimeMake(&block, 0, 1);
                long long v69 = *(_OWORD *)&block.value;
                sampleTimingArray->duration.epoch = block.epoch;
                *(_OWORD *)&sampleTimingArray->duration.CFTypeRef value = v69;
                sampleTimingArray->presentationTimeStamp = cf;
                *(_OWORD *)&sampleTimingArray->decodeTimeStamp.CFTypeRef value = v200;
                sampleTimingArray->decodeTimeStamp.epoch = v11;
                CMItemCount v59 = 1;
              }
              else
              {
                sampleTimingArray = 0;
                CMItemCount v59 = 0;
              }
              int v70 = CMSampleBufferCreate(v3, 0, 1u, 0, 0, 0, 0, v59, sampleTimingArray, 0, 0, &formatDescription);
              if (v70) {
                goto LABEL_94;
              }
              if (v202) {
                CMSetAttachment(formatDescription, v202, value, 1u);
              }
              if (!formatDescription)
              {
LABEL_94:
                CFTypeRef v71 = 0;
                if (!sampleTimingArray) {
                  goto LABEL_96;
                }
              }
              else
              {
                CFTypeRef v71 = CFRetain(formatDescription);
                if (!sampleTimingArray)
                {
LABEL_96:
                  CFStringRef v5 = v199;
                  if (formatDescription) {
                    CFRelease(formatDescription);
                  }
                  if (!v70)
                  {
                    bapspManager_setSubPipeTerminationInFlight((uint64_t)v8, 1);
                    uint64_t v72 = *(void *)(v57 + 88);
                    uint64_t v73 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v73) {
                      uint64_t v74 = v73;
                    }
                    else {
                      uint64_t v74 = 0;
                    }
                    v75 = *(uint64_t (**)(uint64_t, CFTypeRef))(v74 + 8);
                    if (!v75)
                    {
                      int v70 = -12782;
                      if (!v71)
                      {
LABEL_107:
                        uint64_t v1 = a1;
                        if (v70)
                        {
LABEL_108:
                          int v76 = 1;
                          goto LABEL_303;
                        }
                        goto LABEL_322;
                      }
LABEL_106:
                      CFRelease(v71);
                      goto LABEL_107;
                    }
                    int v70 = v75(v72, v71);
                    if (!v70) {
                      bapspManager_postNotification(v8, @"FinishingSubPipe", 0);
                    }
                  }
                  if (!v71) {
                    goto LABEL_107;
                  }
                  goto LABEL_106;
                }
              }
              CFAllocatorDeallocate(v3, sampleTimingArray);
              goto LABEL_96;
            }
            uint64_t v60 = CMBaseObjectGetDerivedStorage();
            if (*(void *)(v60 + 104))
            {
              uint64_t v1 = a1;
              if (FigSignalErrorAt()) {
                goto LABEL_108;
              }
              goto LABEL_238;
            }
            uint64_t v61 = v60;
            int v62 = CFEqual(v55, @"SubPipeTypePassthrough");
            uint64_t v63 = CMBaseObjectGetDerivedStorage();
            uint64_t v201 = v61;
            if (v62)
            {
              CMAudioFormatDescriptionRef formatDescription = 0;
              CMFormatDescriptionRef v64 = CMSampleBufferGetFormatDescription(v7);
              int v65 = FigEndpointStreamAudioFormatDescriptionCreateWithCMFormatDescription();
              if (v65)
              {
                int v101 = v65;
                MutableCopy = 0;
                CFStringRef v193 = 0;
              }
              else
              {
                MutableCopy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
                if (MutableCopy)
                {
                  if (v8) {
                    v67 = (const char *)CMBaseObjectGetDerivedStorage();
                  }
                  else {
                    v67 = "";
                  }
                  CFStringRef v193 = CFStringCreateWithCString(v3, v67, 0x8000100u);
                  CFDictionarySetValue(MutableCopy, @"LoggingID", v193);
                  uint64_t v91 = (uint64_t)v3;
                  v92 = (uint64_t *)(v63 + 104);
                  int v93 = FigBufferedAirPlayAudioChainSubPipePassthroughCreate(v91, *(const void **)(v63 + 96), (uint64_t)v64, MutableCopy, (uint64_t *)(v63 + 104));
                  if (v93)
                  {
                    int v101 = v93;
                    uint64_t v1 = a1;
                  }
                  else
                  {
                    int v94 = bapspManager_addListenersForSubPipe((uint64_t)v8, *v92);
                    uint64_t v1 = a1;
                    if (!v94)
                    {
                      v95 = *(const void **)(v63 + 152);
                      CMAudioFormatDescriptionRef v96 = formatDescription;
                      *(void *)(v63 + 152) = formatDescription;
                      if (v96) {
                        CFRetain(v96);
                      }
                      if (v95) {
                        CFRelease(v95);
                      }
                      if (dword_1E9351208)
                      {
                        LODWORD(v210) = 0;
                        LOBYTE(v209) = 0;
                        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        unsigned int v98 = v210;
                        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)v209)) {
                          unsigned int v99 = v98;
                        }
                        else {
                          unsigned int v99 = v98 & 0xFFFFFFFE;
                        }
                        if (v99)
                        {
                          if (v8) {
                            v100 = (const char *)CMBaseObjectGetDerivedStorage();
                          }
                          else {
                            v100 = "";
                          }
                          uint64_t v107 = *v92;
                          LODWORD(cf.value) = 136315906;
                          *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"bapspManager_createAndConfigurePipeForPassthrough";
                          LOWORD(cf.flags) = 2048;
                          *(void *)((char *)&cf.flags + 2) = v8;
                          HIWORD(cf.epoch) = 2082;
                          v213 = v100;
                          *(_WORD *)v214 = 2048;
                          *(void *)&v214[2] = v107;
                          _os_log_send_and_compose_impl();
                        }
                        CFAllocatorRef v3 = allocator;
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        int v101 = 0;
                        uint64_t v1 = a1;
                      }
                      else
                      {
                        int v101 = 0;
                        CFAllocatorRef v3 = allocator;
                      }
                      CFStringRef v4 = v202;
LABEL_151:
                      CFStringRef v5 = v199;
                      if (formatDescription) {
                        CFRelease(formatDescription);
                      }
                      if (MutableCopy) {
                        CFRelease(MutableCopy);
                      }
                      if (v193) {
                        CFRelease(v193);
                      }
                      v108 = kFigBufferedAirPlaySubPipeManagerForRenderPipelineProcessingMode_Passthrough;
                      if (v101) {
                        goto LABEL_108;
                      }
LABEL_229:
                      CFDictionaryRef v137 = CFDictionaryCreate(v3, (const void **)kFigBufferedAirPlaySubPipeManagerForRenderPipelineProperty_ProcessingMode, (const void **)v108, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                      bapspManager_postNotification(v8, @"ProcessingModeChanged", v137);
                      bapspManager_setLoudnessInfoOnSubPipe();
                      bapspManager_setAudioProcessingTapOnSubPipe();
                      uint64_t v138 = *(void *)(v201 + 88);
                      uint64_t v139 = *(void *)(CMBaseObjectGetVTable() + 16);
                      if (v139) {
                        uint64_t v140 = v139;
                      }
                      else {
                        uint64_t v140 = 0;
                      }
                      v141 = *(uint64_t (**)(uint64_t))(v140 + 72);
                      if (v141)
                      {
                        int v142 = v141(v138);
                        if (!v137)
                        {
LABEL_237:
                          CFAllocatorRef v3 = allocator;
                          if (v142) {
                            goto LABEL_108;
                          }
LABEL_238:
                          uint64_t v143 = CMBaseObjectGetDerivedStorage();
                          CMAudioFormatDescriptionRef formatDescription = 0;
                          if (dword_1E9351208)
                          {
                            LODWORD(v210) = 0;
                            LOBYTE(v209) = 0;
                            v144 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                            unsigned int v145 = v210;
                            if (os_log_type_enabled(v144, (os_log_type_t)v209)) {
                              unsigned int v146 = v145;
                            }
                            else {
                              unsigned int v146 = v145 & 0xFFFFFFFE;
                            }
                            if (v146)
                            {
                              if (v8) {
                                v147 = (const char *)CMBaseObjectGetDerivedStorage();
                              }
                              else {
                                v147 = "";
                              }
                              uint64_t v148 = *(void *)(v143 + 88);
                              uint64_t v149 = *(void *)(v143 + 104);
                              LODWORD(cf.value) = 136316162;
                              *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"bapspManager_connectSbufBridge";
                              LOWORD(cf.flags) = 2048;
                              *(void *)((char *)&cf.flags + 2) = v8;
                              HIWORD(cf.epoch) = 2082;
                              v213 = v147;
                              *(_WORD *)v214 = 2048;
                              *(void *)&v214[2] = v148;
                              __int16 v215 = 2048;
                              uint64_t v216 = v149;
                              _os_log_send_and_compose_impl();
                            }
                            fig_log_call_emit_and_clean_up_after_send_and_compose();
                            CFStringRef v4 = v202;
                            CFAllocatorRef v3 = allocator;
                          }
                          if (*(unsigned char *)(v143 + 178))
                          {
                            int v160 = 0;
                          }
                          else
                          {
                            uint64_t v150 = *(void *)(v143 + 104);
                            if (v150)
                            {
                              uint64_t v151 = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(v150);
                              uint64_t v152 = *(void *)(CMBaseObjectGetVTable() + 8);
                              if (v152) {
                                uint64_t v153 = v152;
                              }
                              else {
                                uint64_t v153 = 0;
                              }
                              v154 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CMAudioFormatDescriptionRef *))(v153 + 48);
                              if (!v154)
                              {
                                int v160 = -12782;
                                goto LABEL_265;
                              }
                              int v155 = v154(v151, @"SourceSampleBufferConsumer", v3, &formatDescription);
                              if (!v155)
                              {
                                uint64_t v156 = *(void *)(v143 + 88);
                                CMAudioFormatDescriptionRef v157 = formatDescription;
                                uint64_t v158 = *(void *)(CMBaseObjectGetVTable() + 8);
                                if (v158) {
                                  uint64_t v159 = v158;
                                }
                                else {
                                  uint64_t v159 = 0;
                                }
                                v161 = *(uint64_t (**)(uint64_t, __CFString *, CMAudioFormatDescriptionRef))(v159 + 56);
                                if (!v161)
                                {
                                  int v160 = -12782;
                                  goto LABEL_264;
                                }
                                int v155 = v161(v156, @"DownstreamConsumer", v157);
                              }
                              int v160 = v155;
LABEL_264:
                              CFAllocatorRef v3 = allocator;
                              goto LABEL_265;
                            }
                            int v160 = FigSignalErrorAt();
                          }
LABEL_265:
                          if (formatDescription) {
                            CFRelease(formatDescription);
                          }
                          if (v160) {
                            goto LABEL_320;
                          }
                          uint64_t v162 = CMBaseObjectGetDerivedStorage();
                          if (*(void *)(v162 + 104))
                          {
                            uint64_t v163 = v162;
                            if (!CMBufferQueueIsEmpty(*(CMBufferQueueRef *)(v162 + 160)))
                            {
                              CMBufferRef v164 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(v163 + 160));
                              if (v164)
                              {
                                CMBufferRef v165 = v164;
                                do
                                {
                                  if (!CMGetAttachment(v165, v4, 0)
                                    && !CMGetAttachment(v165, v5, 0)
                                    && !CMGetAttachment(v165, v195, 0))
                                  {
                                    uint64_t v166 = *(void *)(v163 + 88);
                                    uint64_t v167 = *(void *)(CMBaseObjectGetVTable() + 16);
                                    uint64_t v168 = v167 ? v167 : 0;
                                    v169 = *(void (**)(uint64_t, CMBufferRef))(v168 + 8);
                                    if (v169) {
                                      v169(v166, v165);
                                    }
                                  }
                                  CFRelease(v165);
                                  CMBufferRef v165 = CMBufferQueueDequeueAndRetain(*(CMBufferQueueRef *)(v163 + 160));
                                }
                                while (v165);
                              }
                              CMBufferQueueReset(*(CMBufferQueueRef *)(v163 + 160));
                            }
                          }
                          double v170 = *(double *)(v12 + 56);
                          CMTime block = v205;
                          if (bapspManager_startAudioChainForSubPipe(v170, (uint64_t)v8, (long long *)&block.value, MEMORY[0x1E4F1F9F8]))
                          {
LABEL_320:
                            int v76 = 1;
                            uint64_t v1 = a1;
                            goto LABEL_303;
                          }
LABEL_284:
                          v171 = (void *)CMBaseObjectGetDerivedStorage();
                          CFTypeRef v172 = CMGetAttachment(v7, v4, 0);
                          CFTypeRef v173 = CMGetAttachment(v7, v5, 0);
                          CFTypeRef v174 = v173;
                          if (v172 && !v171[13])
                          {
                            if (v8) {
                              CFRetain(v8);
                            }
                            v176 = v171[4];
                            block.CFTypeRef value = MEMORY[0x1E4F143A8];
                            *(void *)&block.timescale = 0x40000000;
                            block.epoch = (CMTimeEpoch)__bapspManager_PostInspectSampleBuffer_block_invoke;
                            v218 = &__block_descriptor_tmp_121_0;
                            v219 = v8;
                            dispatch_async(v176, &block);
                            if (!v174) {
                              goto LABEL_294;
                            }
                          }
                          else if (!v173)
                          {
LABEL_294:
                            uint64_t v177 = CMBaseObjectGetDerivedStorage();
                            BOOL isMarkerSbuf = bapspManager_isMarkerSbuf(v7);
                            v179 = *(opaqueCMBufferQueue **)(v177 + 160);
                            if (isMarkerSbuf) {
                              CMBufferQueueEnqueue(v179, v7);
                            }
                            else {
                              CMBufferQueueReset(v179);
                            }
                            v180 = CMSampleBufferGetFormatDescription(v7);
                            if (v180)
                            {
                              v181 = v180;
                              v182 = (const opaqueCMFormatDescription *)v171[18];
                              if (v182)
                              {
                                if (!CMAudioFormatDescriptionEqual(v180, v182, 0xFu, 0))
                                {
                                  v183 = (const void *)v171[18];
                                  v171[18] = v181;
                                  CFRetain(v181);
                                  if (v183) {
                                    CFRelease(v183);
                                  }
                                }
                              }
                              else
                              {
                                v171[18] = v180;
                                CFRetain(v180);
                              }
                            }
                            int v76 = 1;
                            uint64_t v1 = a1;
                            CFStringRef v4 = v202;
LABEL_303:
                            if (v204) {
                              CFRelease(v204);
                            }
                            if (!v76) {
                              goto LABEL_313;
                            }
                            goto LABEL_306;
                          }
                          if (!v171[13])
                          {
                            bapspManager_postNotification(v8, @"PlayResourceReleased", 0);
                            if (v8) {
                              CFRetain(v8);
                            }
                            v175 = v171[4];
                            cf.CFTypeRef value = MEMORY[0x1E4F143A8];
                            *(void *)&cf.timescale = 0x40000000;
                            cf.epoch = (CMTimeEpoch)__bapspManager_PostInspectSampleBuffer_block_invoke_2;
                            v213 = (const char *)&__block_descriptor_tmp_122_0;
                            *(void *)v214 = v8;
                            dispatch_async(v175, &cf);
                          }
                          goto LABEL_294;
                        }
                      }
                      else
                      {
                        int v142 = -12782;
                        if (!v137) {
                          goto LABEL_237;
                        }
                      }
                      CFRelease(v137);
                      goto LABEL_237;
                    }
                    int v101 = v94;
                  }
                  CFAllocatorRef v3 = allocator;
                  goto LABEL_151;
                }
                CFStringRef v193 = 0;
                int v101 = -12786;
              }
              uint64_t v1 = a1;
              goto LABEL_151;
            }
            CFTypeRef v210 = 0;
            CMAudioFormatDescriptionRef formatDescription = 0;
            v192 = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
            CMFormatDescriptionRef v77 = CMSampleBufferGetFormatDescription(v7);
            int v78 = FigEndpointStreamAudioFormatDescriptionCreateWithCMFormatDescription();
            if (v78)
            {
              int v106 = v78;
              CFStringRef v105 = 0;
              uint64_t v1 = a1;
            }
            else
            {
              uint64_t v79 = *(void *)(v63 + 40);
              CMAudioFormatDescriptionRef v80 = formatDescription;
              uint64_t v81 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v81) {
                uint64_t v82 = v81;
              }
              else {
                uint64_t v82 = 0;
              }
              v102 = *(uint64_t (**)(uint64_t, CMAudioFormatDescriptionRef, CFTypeRef *))(v82 + 72);
              if (v102)
              {
                int v103 = v102(v79, v80, &v210);
                if (!v103)
                {
                  if (v8) {
                    v104 = (const char *)CMBaseObjectGetDerivedStorage();
                  }
                  else {
                    v104 = "";
                  }
                  CFStringRef v190 = CFStringCreateWithCString(allocator, v104, 0x8000100u);
                  CFDictionarySetValue(v192, @"LoggingID", v190);
                  v121 = *(const void **)(v63 + 96);
                  CFTypeRef v122 = v210;
                  char v123 = *(unsigned char *)(v63 + 176);
                  AllocatorForMedia = (const void *)FigGetAllocatorForMedia();
                  v125 = v122;
                  v126 = (uint64_t *)(v63 + 104);
                  int v127 = FigBufferedAirPlayAudioChainSubPipeTranscodeCreate(allocator, v121, v77, v125, v123, AllocatorForMedia, v192, (void *)(v63 + 104));
                  if (v127)
                  {
                    int v106 = v127;
                    uint64_t v1 = a1;
                  }
                  else
                  {
                    int v128 = bapspManager_addListenersForSubPipe((uint64_t)v8, *v126);
                    uint64_t v1 = a1;
                    if (!v128)
                    {
                      v129 = *(const void **)(v63 + 152);
                      CFTypeRef v130 = v210;
                      *(void *)(v63 + 152) = v210;
                      CFAllocatorRef v3 = allocator;
                      if (v130) {
                        CFRetain(v130);
                      }
                      CFStringRef v5 = v199;
                      if (v129) {
                        CFRelease(v129);
                      }
                      if (dword_1E9351208)
                      {
                        v131 = v126;
                        LODWORD(v209) = 0;
                        LOBYTE(BOOLean) = 0;
                        v132 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        unsigned int v133 = v209;
                        if (os_log_type_enabled(v132, (os_log_type_t)BOOLean)) {
                          unsigned int v134 = v133;
                        }
                        else {
                          unsigned int v134 = v133 & 0xFFFFFFFE;
                        }
                        if (v134)
                        {
                          if (v8) {
                            v135 = (const char *)CMBaseObjectGetDerivedStorage();
                          }
                          else {
                            v135 = "";
                          }
                          uint64_t v136 = *v131;
                          LODWORD(cf.value) = 136315906;
                          *(CMTimeValue *)((char *)&cf.value + 4) = (CMTimeValue)"bapspManager_createAndConfigurePipeForTranscode";
                          LOWORD(cf.flags) = 2048;
                          *(void *)((char *)&cf.flags + 2) = v8;
                          HIWORD(cf.epoch) = 2082;
                          v213 = v135;
                          *(_WORD *)v214 = 2048;
                          *(void *)&v214[2] = v136;
                          _os_log_send_and_compose_impl();
                        }
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        int v106 = 0;
                        uint64_t v1 = a1;
                        CFAllocatorRef v3 = allocator;
                      }
                      else
                      {
                        int v106 = 0;
                      }
                      CFStringRef v4 = v202;
                      goto LABEL_219;
                    }
                    int v106 = v128;
                  }
                  CFStringRef v4 = v202;
                  CFAllocatorRef v3 = allocator;
                  CFStringRef v5 = v199;
LABEL_219:
                  CFStringRef v105 = v190;
LABEL_220:
                  if (v192) {
                    CFRelease(v192);
                  }
                  if (v105) {
                    CFRelease(v105);
                  }
                  if (formatDescription) {
                    CFRelease(formatDescription);
                  }
                  if (v210) {
                    CFRelease(v210);
                  }
                  v108 = kFigBufferedAirPlaySubPipeManagerForRenderPipelineProcessingMode_Transcode;
                  if (v106) {
                    goto LABEL_108;
                  }
                  goto LABEL_229;
                }
                int v106 = v103;
                CFStringRef v105 = 0;
              }
              else
              {
                CFStringRef v105 = 0;
                int v106 = -12782;
              }
              uint64_t v1 = a1;
              CFAllocatorRef v3 = allocator;
            }
            CFStringRef v5 = v199;
            goto LABEL_220;
          }
          int v88 = *(unsigned __int8 *)(v84 + 177);
          if (*(unsigned char *)(v84 + 177))
          {
            int v89 = *(_DWORD *)(v86 + 8);
            int v88 = 1;
            if (v89 > 1902928226)
            {
              if (v89 == 1902928227) {
                goto LABEL_163;
              }
              int v90 = 2053923171;
            }
            else
            {
              if (v89 == 1634492771) {
                goto LABEL_163;
              }
              int v90 = 1668047203;
            }
            if (v89 != v90) {
              int v88 = 0;
            }
          }
LABEL_163:
          int v109 = *(_DWORD *)(v87 + 8);
          int v110 = 1;
          if (v109 > 1902928226)
          {
            if (v109 != 1902928227)
            {
              int v111 = 2053923171;
LABEL_168:
              if (v109 != v111) {
                int v110 = 0;
              }
            }
          }
          else if (v109 != 1634492771)
          {
            int v111 = 1668047203;
            goto LABEL_168;
          }
          BOOL v53 = v88 != v110;
          goto LABEL_171;
        }
      }
    }
    goto LABEL_61;
  }
LABEL_340:
  v189 = *(const void **)(v1 + 40);
  if (v189) {
    CFRelease(v189);
  }
}

uint64_t bapspManager_startAudioChainForSubPipe(double a1, uint64_t a2, long long *a3, long long *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int isSubPipeStarted = bapspManager_isSubPipeStarted();
  uint64_t v9 = *(void *)(DerivedStorage + 104);
  if (v9) {
    BOOL v10 = isSubPipeStarted == 0;
  }
  else {
    BOOL v10 = 0;
  }
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t))(v12 + 24);
  if (!v13) {
    return 4294954514;
  }
  uint64_t result = v13(v9);
  if (result) {
    return result;
  }
  uint64_t v15 = *(void *)(DerivedStorage + 104);
  if (a1 != 0.0)
  {
    long long v25 = *a3;
    uint64_t v26 = *((void *)a3 + 2);
    long long v23 = *a4;
    uint64_t v24 = *((void *)a4 + 2);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    v21 = *(void (**)(uint64_t, long long *, long long *, float))(v19 + 8);
    if (v21)
    {
      float v22 = a1;
      long long v29 = v25;
      uint64_t v30 = v26;
      long long v27 = v23;
      uint64_t v28 = v24;
      v21(v15, &v29, &v27, v22);
    }
    return 0;
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v17 = v16 ? v16 : 0;
  uint64_t v20 = *(uint64_t (**)(uint64_t))(v17 + 16);
  if (!v20) {
    return 4294954514;
  }

  return v20(v15);
}

BOOL bapspManager_isMarkerSbuf(opaqueCMSampleBuffer *a1)
{
  CMSampleBufferGetOutputPresentationTimeStamp(&v6, a1);
  char flags = v6.flags;
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(a1);
  return (flags & 1) == 0 && FormatDescription == 0;
}

void bapspManager_postNotification(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3) {
    CFRetain(a3);
  }
  if (a1) {
    CFRetain(a1);
  }
  BOOL v7 = *(NSObject **)(DerivedStorage + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __bapspManager_postNotification_block_invoke;
  block[3] = &__block_descriptor_tmp_120_0;
  block[4] = a2;
  block[5] = a1;
  void block[6] = a3;
  dispatch_async(v7, block);
}

void __bapspManager_postNotification_block_invoke(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(void *)(a1 + 40);

  bapspManager_releaseAsync(v3);
}

uint64_t bapspManager_setLoudnessInfoOnSubPipe()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = *(void *)(DerivedStorage + 104);
  if (result)
  {
    uint64_t v2 = *(void *)(DerivedStorage + 168);
    if (v2)
    {
      uint64_t CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject();
      uint64_t VTable = CMBaseObjectGetVTable();
      uint64_t v6 = *(void *)(VTable + 8);
      uint64_t result = VTable + 8;
      uint64_t v5 = v6;
      uint64_t v7 = v6 ? v5 : 0;
      uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v7 + 56);
      if (v8)
      {
        return v8(CMBaseObject, @"LoudnessInfo", v2);
      }
    }
  }
  return result;
}

uint64_t bapspManager_setAudioProcessingTapOnSubPipe()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = *(void *)(DerivedStorage + 104);
  if (result)
  {
    uint64_t v2 = *(void *)(DerivedStorage + 64);
    uint64_t CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject();
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v6 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v5 = v6;
    uint64_t v7 = v6 ? v5 : 0;
    uint64_t v8 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v7 + 56);
    if (v8)
    {
      return v8(CMBaseObject, @"AudioProcessingTap", v2);
    }
  }
  return result;
}

uint64_t bapspManager_addListenersForSubPipe(uint64_t a1, uint64_t a2)
{
  if (!a2) {
    return 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterAddWeakListeners();
}

uint64_t bapspManager_isSubPipeStarted()
{
  CFBooleanRef BOOLean = 0;
  if (!*(void *)(CMBaseObjectGetDerivedStorage() + 104)) {
    return 0;
  }
  uint64_t CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject();
  uint64_t v1 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v2 = v1 ? v1 : 0;
  uint64_t v3 = *(uint64_t (**)(uint64_t, __CFString *, void, CFBooleanRef *))(v2 + 48);
  if (!v3) {
    return 0;
  }
  int v4 = v3(CMBaseObject, @"IsStarted", *MEMORY[0x1E4F1CF80], &BOOLean);
  CFBooleanRef v5 = BOOLean;
  if (v4)
  {
    uint64_t Value = 0;
    if (!BOOLean) {
      return Value;
    }
    goto LABEL_8;
  }
  uint64_t Value = CFBooleanGetValue(BOOLean);
  CFBooleanRef v5 = BOOLean;
  if (BOOLean) {
LABEL_8:
  }
    CFRelease(v5);
  return Value;
}

void __bapspManager_subPipeFinishedProcessingData_block_invoke(uint64_t a1)
{
  if (FigCFEqual()) {
    bapspManager_postNotification(*(const void **)(a1 + 48), @"PlayResourceReleased", 0);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = bapspManager_disconnectSbufBridge();
  if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = bapspManager_clearCurrentSubPipe(*(void *)(a1 + 48));
    if (!*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24))
    {
      bapspManager_setSubPipeTerminationInFlight(*(void *)(a1 + 48), 0);
      bapspManager_scheduleProcessingDataIfPossible(*(void *)(a1 + 48));
    }
  }
  uint64_t v2 = *(void *)(a1 + 48);

  bapspManager_releaseAsync(v2);
}

uint64_t __bapspManager_copyProperty_block_invoke(void *a1)
{
  uint64_t v3 = (const void *)a1[6];
  uint64_t v2 = a1[7];
  int v4 = (uint64_t *)a1[8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 178))
  {
LABEL_21:
    uint64_t result = 0;
    goto LABEL_10;
  }
  uint64_t v6 = DerivedStorage;
  if (CFEqual(v3, @"SourceSampleBufferConsumer"))
  {
    uint64_t v7 = *(const void **)(v6 + 80);
    if (!v7)
    {
      uint64_t v9 = 0;
      goto LABEL_9;
    }
    uint64_t Float64 = (uint64_t)CFRetain(v7);
LABEL_7:
    uint64_t v9 = Float64;
LABEL_9:
    uint64_t result = 0;
    uint64_t *v4 = v9;
    goto LABEL_10;
  }
  if (CFEqual(v3, @"CurrentRate"))
  {
    uint64_t Float64 = FigCFNumberCreateFloat64();
    goto LABEL_7;
  }
  int v11 = CFEqual(v3, @"CurrentSubpipeType");
  uint64_t result = *(void *)(v6 + 104);
  if (v11)
  {
    if (!result)
    {
      uint64_t *v4 = 0;
      goto LABEL_10;
    }
    uint64_t CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(result);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v18 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v14 + 48);
    if (v18) {
      v18(CMBaseObject, @"SubPipeType", v2, v4);
    }
    goto LABEL_21;
  }
  if (result)
  {
    uint64_t v15 = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(result);
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v16) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    uint64_t v19 = *(uint64_t (**)(uint64_t, const void *, uint64_t, uint64_t *))(v17 + 48);
    if (v19) {
      uint64_t result = v19(v15, v3, v2, v4);
    }
    else {
      uint64_t result = 4294954514;
    }
  }
LABEL_10:
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void __bapspManager_setProperty_block_invoke(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 40) + 178)) {
    return;
  }
  if (CFEqual(@"ThreadPriority", *(CFTypeRef *)(a1 + 48)))
  {
    uint64_t v2 = *(const void **)(a1 + 56);
    if (v2)
    {
      CFTypeID v3 = CFGetTypeID(v2);
      if (v3 == CFNumberGetTypeID())
      {
        uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 104);
        if (!v4) {
          return;
        }
        uint64_t v5 = *(void *)(a1 + 56);
        uint64_t CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(v4);
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v7) {
          uint64_t v8 = v7;
        }
        else {
          uint64_t v8 = 0;
        }
        uint64_t v18 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t))(v8 + 56);
        if (v18) {
          int v17 = v18(CMBaseObject, @"ThreadPriority", v5);
        }
        else {
          int v17 = -12782;
        }
        goto LABEL_25;
      }
    }
LABEL_24:
    int v17 = FigSignalErrorAt();
LABEL_25:
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v17;
    return;
  }
  if (CFEqual(@"DecodeForPrerollRate", *(CFTypeRef *)(a1 + 48)))
  {
    uint64_t v9 = *(const void **)(a1 + 56);
    if (!v9) {
      goto LABEL_24;
    }
    CFTypeID v10 = CFGetTypeID(v9);
    if (v10 != CFNumberGetTypeID()) {
      goto LABEL_24;
    }
    CFNumberGetValue(*(CFNumberRef *)(a1 + 56), kCFNumberFloat64Type, (void *)(*(void *)(a1 + 40) + 56));
    int v11 = *(const void **)(a1 + 64);
    bapspManager_startDataFlowIfRateIsValid(v11);
    return;
  }
  if (CFEqual(@"PipelineRate", *(CFTypeRef *)(a1 + 48)))
  {
    uint64_t v12 = *(const void **)(a1 + 56);
    if (v12)
    {
      CFTypeID v13 = CFGetTypeID(v12);
      if (v13 == CFNumberGetTypeID())
      {
        CFNumberGetValue(*(CFNumberRef *)(a1 + 56), kCFNumberFloat64Type, (void *)(*(void *)(a1 + 40) + 56));
        if (dword_1E9351208)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        bapspManager_startDataFlowIfRateIsValid(*(const void **)(a1 + 64));
        return;
      }
    }
LABEL_23:
    if (*(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      return;
    }
    goto LABEL_24;
  }
  if (CFEqual(@"LoudnessInfo", *(CFTypeRef *)(a1 + 48)))
  {
    uint64_t v15 = *(const void **)(a1 + 56);
    if (!v15 || (CFTypeID v16 = CFGetTypeID(v15), v16 == CFDictionaryGetTypeID()) || !*(void *)(a1 + 56))
    {
      uint64_t v19 = *(const void **)(*(void *)(a1 + 40) + 168);
      if (v19)
      {
        CFRelease(v19);
        *(void *)(*(void *)(a1 + 40) + 168) = 0;
      }
      uint64_t v20 = *(const void **)(a1 + 56);
      if (v20)
      {
        *(void *)(*(void *)(a1 + 40) + 168) = CFRetain(v20);
      }
      else
      {
        *(void *)(*(void *)(a1 + 40) + 168) = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (!*(void *)(*(void *)(a1 + 40) + 168)) {
          goto LABEL_24;
        }
      }
      bapspManager_setLoudnessInfoOnSubPipe();
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
      return;
    }
    goto LABEL_23;
  }
  if (!CFEqual(@"AudioProcessingTap", *(CFTypeRef *)(a1 + 48))) {
    return;
  }
  if (*(void *)(a1 + 56))
  {
    CFTypeID TypeID = MTAudioProcessingTapGetTypeID();
    if (TypeID != CFGetTypeID(*(CFTypeRef *)(a1 + 56))) {
      return;
    }
    float v22 = *(const void **)(a1 + 56);
    uint64_t v23 = *(void *)(a1 + 40);
    uint64_t v24 = *(const void **)(v23 + 64);
    *(void *)(v23 + 64) = v22;
    if (v22) {
      CFRetain(v22);
    }
  }
  else
  {
    uint64_t v25 = *(void *)(a1 + 40);
    uint64_t v24 = *(const void **)(v25 + 64);
    *(void *)(v25 + 64) = 0;
  }
  if (v24) {
    CFRelease(v24);
  }

  bapspManager_setAudioProcessingTapOnSubPipe();
}

void bapspManager_startDataFlowIfRateIsValid(const void *a1)
{
  if (*(double *)(CMBaseObjectGetDerivedStorage() + 56) != -999999.875)
  {
    CMBaseObjectGetDerivedStorage();
    bapspManager_scheduleProcessingDataIfPossible(a1);
  }
}

uint64_t bapspManager_setRateAndAnchorTime(const void *a1, long long *a2, long long *a3, double a4)
{
  if (!*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 178))
  {
    long long v15 = *a2;
    uint64_t v16 = *((void *)a2 + 2);
    long long v13 = *a3;
    uint64_t v14 = *((void *)a3 + 2);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    uint64_t v9 = (char *)CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 64, 0);
    if (v9)
    {
      CFTypeID v10 = v9;
      if (a1) {
        CFTypeRef v11 = CFRetain(a1);
      }
      else {
        CFTypeRef v11 = 0;
      }
      *(void *)CFTypeID v10 = v11;
      *((double *)v10 + 7) = a4;
      *(_OWORD *)(v10 + 8) = v15;
      *((void *)v10 + 3) = v16;
      *((_OWORD *)v10 + 2) = v13;
      *((void *)v10 + 6) = v14;
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 72), v10, (dispatch_function_t)bapspManager_setRateAndAnchorTimeDispatch);
    }
  }
  return 0;
}

uint64_t bapspManager_reset(uint64_t a1, char a2)
{
  uint64_t v10 = 0;
  CFTypeRef v11 = &v10;
  uint64_t v12 = 0x2000000000;
  int v13 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(NSObject **)(DerivedStorage + 72);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = __bapspManager_reset_block_invoke;
  v8[3] = &unk_1E579F450;
  v8[4] = &v10;
  v8[5] = DerivedStorage;
  v8[6] = a1;
  char v9 = a2;
  dispatch_sync(v5, v8);
  uint64_t v6 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  return v6;
}

uint64_t bapspManager_flush(uint64_t a1, long long *a2)
{
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2000000000;
  int v14 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(NSObject **)(DerivedStorage + 72);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = __bapspManager_flush_block_invoke;
  v8[3] = &unk_1E579F478;
  v8[4] = &v11;
  v8[5] = DerivedStorage;
  v8[6] = a1;
  uint64_t v10 = *((void *)a2 + 2);
  long long v9 = *a2;
  dispatch_sync(v5, v8);
  uint64_t v6 = *((unsigned int *)v12 + 6);
  _Block_object_dispose(&v11, 8);
  return v6;
}

void bapspManager_setRateAndAnchorTimeDispatch(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  double v3 = *(double *)(a1 + 56);
  long long v16 = *(_OWORD *)(a1 + 8);
  uint64_t v17 = *(void *)(a1 + 24);
  long long v14 = *(_OWORD *)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 178))
  {
    uint64_t v5 = DerivedStorage;
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    uint64_t v7 = v6;
    if (!*(void *)(v6 + 104) && *(double *)(v6 + 56) != -999999.875) {
      goto LABEL_20;
    }
    if (!bapspManager_isSubPipeStarted())
    {
      double v8 = *(double *)(v7 + 56);
      if (v3 != 0.0 || v8 != -999999.875)
      {
        if (v3 != 0.0 && v8 == -999999.875
          || (v3 != 0.0 || v8 != 0.0)
          && ((v9 = v3 == 0.0, v8 != 0.0) ? (BOOL v10 = 1) : (v9 = 0, BOOL v10 = v3 == 0.0), v10 ? (v11 = !v9) : (v11 = 0), !v11))
        {
LABEL_20:
          *(double *)(v5 + 56) = v3;
          bapspManager_startDataFlowIfRateIsValid(v2);
          double v12 = *(double *)(v5 + 56);
          long long v20 = v16;
          uint64_t v21 = v17;
          long long v18 = v14;
          uint64_t v19 = v15;
          bapspManager_startAudioChainForSubPipe(v12, (uint64_t)v2, &v20, &v18);
        }
      }
    }
  }
  bapspManager_releaseAsync(*(void *)a1);
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];

  CFAllocatorDeallocate(v13, (void *)a1);
}

uint64_t __bapspManager_reset_block_invoke(uint64_t result)
{
  if (!*(unsigned char *)(*(void *)(result + 40) + 178))
  {
    uint64_t v1 = result;
    uint64_t result = bapspManager_disconnectSbufBridge();
    *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
    if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24))
    {
      if (!*(unsigned char *)(v1 + 56)) {
        goto LABEL_14;
      }
      uint64_t result = bapspManager_flushAllSampleBufferConsumers();
      *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
      if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24))
      {
        if (!*(unsigned char *)(v1 + 56)) {
          goto LABEL_14;
        }
        uint64_t v2 = *(void *)(*(void *)(v1 + 40) + 104);
        if (!v2) {
          goto LABEL_14;
        }
        uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v4 = v3 ? v3 : 0;
        uint64_t v5 = *(uint64_t (**)(uint64_t, long long *))(v4 + 40);
        if (v5)
        {
          long long v20 = *MEMORY[0x1E4F1FA48];
          uint64_t v21 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          uint64_t result = v5(v2, &v20);
        }
        else
        {
          uint64_t result = 4294954514;
        }
        *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
        if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24))
        {
LABEL_14:
          uint64_t v6 = *(void *)(*(void *)(v1 + 40) + 104);
          if (!v6) {
            return bapspManager_setSubPipeTerminationInFlight(*(void *)(v1 + 48), 0);
          }
          uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v7) {
            uint64_t v8 = v7;
          }
          else {
            uint64_t v8 = 0;
          }
          BOOL v9 = *(uint64_t (**)(uint64_t))(v8 + 16);
          if (v9) {
            uint64_t result = v9(v6);
          }
          else {
            uint64_t result = 4294954514;
          }
          *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
          if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24))
          {
            uint64_t v10 = *(void *)(*(void *)(v1 + 40) + 104);
            uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v12 = v11 ? v11 : 0;
            CFAllocatorRef v13 = *(uint64_t (**)(uint64_t))(v12 + 32);
            uint64_t result = v13 ? v13(v10) : 4294954514;
            *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
            if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24))
            {
              uint64_t result = bapspManager_removeListenersForSubPipe(*(void *)(v1 + 48), *(void *)(*(void *)(v1 + 40) + 104));
              *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
              if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24))
              {
                uint64_t CMBaseObject = FigBufferedAirPlayAudioChainSubPipeGetCMBaseObject(*(void *)(*(void *)(v1 + 40)
                                                                                            + 104));
                if (CMBaseObject)
                {
                  uint64_t v15 = CMBaseObject;
                  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v16) {
                    uint64_t v17 = v16;
                  }
                  else {
                    uint64_t v17 = 0;
                  }
                  long long v18 = *(void (**)(uint64_t))(v17 + 24);
                  if (v18) {
                    v18(v15);
                  }
                }
                uint64_t v19 = *(const void **)(*(void *)(v1 + 40) + 104);
                if (v19)
                {
                  CFRelease(v19);
                  *(void *)(*(void *)(v1 + 40) + 104) = 0;
                }
                return bapspManager_setSubPipeTerminationInFlight(*(void *)(v1 + 48), 0);
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t bapspManager_flushAllSampleBufferConsumers()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 178)) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  uint64_t v2 = *(void *)(DerivedStorage + 80);
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v4 + 72);
  if (!v5) {
    return 4294954514;
  }
  uint64_t result = v5(v2);
  if (result) {
    return result;
  }
  uint64_t v7 = *(void *)(v1 + 88);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v9 = v8 ? v8 : 0;
  uint64_t v10 = *(uint64_t (**)(uint64_t))(v9 + 72);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7);
}

uint64_t __bapspManager_flush_block_invoke(uint64_t result)
{
  if (!*(unsigned char *)(*(void *)(result + 40) + 178))
  {
    uint64_t v1 = result;
    uint64_t result = bapspManager_flushAllSampleBufferConsumers();
    *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
    if (!*(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24))
    {
      uint64_t v2 = *(void *)(*(void *)(v1 + 40) + 104);
      if (v2)
      {
        long long v6 = *(_OWORD *)(v1 + 56);
        uint64_t v7 = *(void *)(v1 + 72);
        uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v3) {
          uint64_t v4 = v3;
        }
        else {
          uint64_t v4 = 0;
        }
        uint64_t v5 = *(uint64_t (**)(uint64_t, long long *))(v4 + 40);
        if (v5)
        {
          long long v8 = v6;
          uint64_t v9 = v7;
          uint64_t result = v5(v2, &v8);
        }
        else
        {
          uint64_t result = 4294954514;
        }
        *(_DWORD *)(*(void *)(*(void *)(v1 + 32) + 8) + 24) = result;
      }
    }
  }
  return result;
}

void __bapspManager_sourceDataBecameReady_block_invoke(uint64_t a1)
{
  bapspManager_scheduleProcessingDataIfPossible(*(const void **)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 32);

  bapspManager_releaseAsync(v2);
}

void __bapspManager_mediatorLowWaterTriggerCallback_block_invoke(uint64_t a1)
{
  bapspManager_scheduleProcessingDataIfPossible(*(const void **)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 32);

  bapspManager_releaseAsync(v2);
}

void __bapspManager_releaseAsync_block_invoke(uint64_t a1)
{
}

uint64_t FigPhotoDecompressionCreateNativePixelFormatArray()
{
  return MEMORY[0x1F410D928]();
}

uint64_t FigPhotoDecompressionDetectContainerFormat()
{
  return MEMORY[0x1F410D938]();
}

uint64_t FigPhotoDecompressionGetImageCount()
{
  return MEMORY[0x1F410D950]();
}

uint64_t FigPhotoDecompressionDetectSourceIsMIAF()
{
  return MEMORY[0x1F410D940]();
}

uint64_t FigPhotoDecompressionGetImageGeometryForIndex()
{
  return MEMORY[0x1F410D958]();
}

uint64_t FigPhotoDecompressionCreateCGImageForIndex()
{
  return MEMORY[0x1F410D918]();
}

uint64_t FigPhotoDecompressionCreateCVPixelBufferForIndex()
{
  return MEMORY[0x1F410D920]();
}

uint64_t FigPhotoDecompressionDecodeIntoRGBSurfaceForIndex()
{
  return MEMORY[0x1F410D930]();
}

uint64_t FigMediaProcessorCreateForVideoRotation(const __CFAllocator *a1, int a2, int a3, int a4, const void *a5, const void *a6, void *a7, uint64_t a8, long long *a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, int a14, uint64_t *a15)
{
  uint64_t v35 = 0;
  CFTypeRef v33 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v32 = 0;
  if ((a6 == 0) != (a7 != 0) || !a10) {
    goto LABEL_13;
  }
  if (a2 > 179)
  {
    if (a2 == 180 || a2 == 270) {
      goto LABEL_11;
    }
LABEL_13:
    return FigSignalErrorAt();
  }
  if (a2)
  {
    if (a2 != 90) {
      goto LABEL_13;
    }
  }
  else if (!(a4 | a3))
  {
    goto LABEL_13;
  }
LABEL_11:
  if (a3 && a4) {
    goto LABEL_13;
  }
  uint64_t v19 = FigSampleBufferProcessorCreateForVideoRotation((uint64_t)a1, a2, a3, a4, a5, &v35);
  if (!v19)
  {
    CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (a6)
    {
      uint64_t v21 = FigSampleBufferProviderCreateForBufferQueue((uint64_t)v20, a6, &cf);
    }
    else
    {
      long long v22 = *(_OWORD *)a8;
      uint64_t v31 = *(void *)(a8 + 16);
      long long v23 = a9[1];
      long long v27 = *a9;
      long long v28 = v23;
      long long v29 = a9[2];
      long long v30 = v22;
      uint64_t v21 = FigSampleBufferProviderCreateForVisualContext(v20, a7, &v30, &v27, &cf);
    }
    uint64_t v24 = v21;
    if (v21) {
      goto LABEL_28;
    }
    long long v27 = *(_OWORD *)a11;
    *(void *)&long long v28 = *(void *)(a11 + 16);
    long long v30 = *(_OWORD *)a12;
    uint64_t v31 = *(void *)(a12 + 16);
    uint64_t v24 = FigSampleBufferConsumerCreateForBufferQueue(a10, &v27, &v30, &v33);
    if (v24) {
      goto LABEL_28;
    }
    uint64_t v25 = a13
        ? FigActivitySchedulerCreateForCFRunLoop(a1, a13, &v32)
        : FigActivitySchedulerCreateForNewThread((uint64_t)a1, a14, @"com.apple.coremedia.mediaprocessor.videorotation", &v32);
    uint64_t v24 = v25;
    if (v25) {
      goto LABEL_28;
    }
    uint64_t v19 = FigMediaProcessorCreate((uint64_t)a1, v35, cf, v33, v32, a15);
  }
  uint64_t v24 = v19;
LABEL_28:
  if (cf) {
    CFRelease(cf);
  }
  if (v32) {
    CFRelease(v32);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (v33) {
    CFRelease(v33);
  }
  return v24;
}

uint64_t FigAlternateFilterMonitorTriggerSetBoss(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  if (!a2)
  {
    uint64_t v5 = *(const void **)(DerivedStorage + 32);
    *(void *)(DerivedStorage + 32) = 0;
    if (!v5) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  uint64_t v4 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (v4)
  {
    a2 = v4;
    uint64_t v5 = *(const void **)(DerivedStorage + 32);
    *(void *)(DerivedStorage + 32) = v4;
    CFRetain(v4);
    if (!v5)
    {
LABEL_5:
      MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
      if (a2) {
        CFRelease(a2);
      }
      return 0;
    }
LABEL_4:
    CFRelease(v5);
    goto LABEL_5;
  }

  return FigSignalErrorAt();
}

uint64_t FigAlternateFilterMonitorTriggerInvoke(const void *a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  if (*(void *)(DerivedStorage + 32)) {
    uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  }
  else {
    uint64_t v5 = 0;
  }
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
  CFArrayRef v6 = famt_copyObserverEntries(a1);
  if (!v6)
  {
    uint64_t v13 = FigSignalErrorAt();
    if (!v5) {
      return v13;
    }
    goto LABEL_13;
  }
  CFArrayRef v7 = v6;
  uint64_t v8 = FigAlternateSelectionBossLockForConfiguration((uint64_t)v5);
  if (!v8)
  {
    if (CFArrayGetCount(v7) >= 1)
    {
      CFIndex v9 = 0;
      do
      {
        ValueAtIndex = (void (**)(const void *, uint64_t, uint64_t, void))CFArrayGetValueAtIndex(v7, v9);
        uint64_t v11 = FigCFWeakReferenceHolderCopyReferencedObject();
        if (v11)
        {
          uint64_t v12 = (const void *)v11;
          ValueAtIndex[1](a1, v11, a2, ValueAtIndex[2]);
          CFRelease(v12);
        }
        ++v9;
      }
      while (v9 < CFArrayGetCount(v7));
    }
    uint64_t v8 = (uint64_t)FigAlternateSelectionBossUnlockForConfiguration(v5);
  }
  uint64_t v13 = v8;
  CFRelease(v7);
  if (v5) {
LABEL_13:
  }
    CFRelease(v5);
  return v13;
}

CFArrayRef famt_copyObserverEntries(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFArrayRef Copy = CFArrayCreateCopy(v3, *(CFArrayRef *)(DerivedStorage + 40));
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
  return Copy;
}

uint64_t FigAlternateFilterMonitorTriggerAddObserver(uint64_t a1, uint64_t a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  value[0] = (CFTypeRef)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (value[0])
  {
    value[1] = a3;
    value[2] = a4;
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
    CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 40), value);
    MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
    if (value[0]) {
      CFRelease(value[0]);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigAlternateFilterMonitorTriggerRemoveObserver()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 24));
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(DerivedStorage + 40);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count)
    {
      MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
      return 0;
    }
    CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 40), i);
    CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (FigCFEqual()) {
      break;
    }
    if (v3) {
      CFRelease(v3);
    }
  }
  CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(DerivedStorage + 40), i);
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 24));
  if (v3) {
    CFRelease(v3);
  }
  return 0;
}

uint64_t FigAlternateFilterMonitorTriggerCreateForNotification(const __CFAllocator *a1, const void *a2, uint64_t a3, void *a4)
{
  MEMORY[0x19970EE10](&FigAlternateFilterMonitorTriggerGetClassID_sRegisterFigAlternateFilterMonitorTriggerTypeOnce, RegisterFigAlternateFilterMonitorTriggerType);
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8) {
    return v8;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2) {
    CFTypeRef v10 = CFRetain(a2);
  }
  else {
    CFTypeRef v10 = 0;
  }
  void *DerivedStorage = v10;
  uint64_t v11 = FigReentrantMutexCreate();
  DerivedStorage[3] = v11;
  if (!v11) {
    return FigSignalErrorAt();
  }
  uint64_t v12 = a3 ? FigCFWeakReferenceHolderCreateWithReferencedObject() : 0;
  DerivedStorage[1] = v12;
  dispatch_queue_t v13 = dispatch_queue_create("com.apple.coremedia.alternateFilterMonitorTrigger.callback", 0);
  DerivedStorage[2] = v13;
  if (!v13) {
    return FigSignalErrorAt();
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, &kObserverEntryCFArrayValueCallbacks);
  DerivedStorage[5] = Mutable;
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v15 = FigNotificationCenterAddWeakListener();
  if (!v15) {
    *a4 = 0;
  }
  return v15;
}

uint64_t famt_notificationHandler(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return FigAlternateFilterMonitorTriggerInvoke(a2, a5);
}

uint64_t famt_equal()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual()) {
    return 0;
  }
  if (*(void *)(DerivedStorage + 8)) {
    uint64_t v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  }
  else {
    uint64_t v2 = 0;
  }
  if (*(void *)(v1 + 8)) {
    uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v3 = FigCFEqual();
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return v3;
}

uint64_t famt_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(CMBaseObjectGetDerivedStorage() + 8)) {
    uint64_t v1 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  }
  else {
    uint64_t v1 = 0;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  if (v1) {
    CFRelease(v1);
  }
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 8);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = *(const void **)(DerivedStorage + 40);
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 32);
  if (v4) {
    CFRelease(v4);
  }
  uint64_t v5 = *(NSObject **)(DerivedStorage + 16);
  if (v5) {
    dispatch_release(v5);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef famt_copyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFArrayRef v3 = famt_copyObserverEntries(a1);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v5 = *DerivedStorage;
  if (!v3) {
    return CFStringCreateWithFormat(v4, 0, @"[FigAlternateFilterMonitorTrigger<%p> \"%@\" numObservers:%d]", a1, v5, 0);
  }
  CFArrayRef v6 = v3;
  CFIndex Count = CFArrayGetCount(v3);
  CFStringRef v8 = CFStringCreateWithFormat(v4, 0, @"[FigAlternateFilterMonitorTrigger<%p> \"%@\" numObservers:%d]", a1, v5, Count);
  CFRelease(v6);
  return v8;
}

uint64_t RegisterFigAlternateFilterMonitorTriggerType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef FigAlternateFilterMonitorTriggerCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAlternateFilterMonitorTrigger <%p>]", a1);
}

void *famt_observerEntryCFArrayRetainCallBack(const __CFAllocator *a1, long long *a2)
{
  CFArrayRef v3 = CFAllocatorAllocate(a1, 24, 0);
  if (*(void *)a2) {
    CFRetain(*(CFTypeRef *)a2);
  }
  CFAllocatorRef v4 = (const void *)*((void *)a2 + 2);
  if (v4) {
    CFRetain(v4);
  }
  long long v5 = *a2;
  v3[2] = *((void *)a2 + 2);
  *(_OWORD *)CFArrayRef v3 = v5;
  return v3;
}

void famt_observerEntryCFArrayReleaseCallBack(CFAllocatorRef allocator, CFTypeRef *ptr)
{
  if (*ptr) {
    CFRelease(*ptr);
  }
  CFTypeRef v4 = ptr[2];
  if (v4) {
    CFRelease(v4);
  }

  CFAllocatorDeallocate(allocator, ptr);
}

uint64_t FigCPERemoteInitializeWithOptions()
{
  uint64_t v0 = remoteXPCCPEClient_EnsureClientEstablished();
  if (v0
    || (uint64_t v0 = FigXPCCreateBasicMessage(), v0)
    || (uint64_t v0 = FigXPCMessageSetCFString(), v0)
    || (uint64_t v0 = FigXPCMessageSetCFDictionary(), v0))
  {
    uint64_t v1 = v0;
  }
  else
  {
    uint64_t v1 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v1) {
      uint64_t v1 = FigXPCMessageCopyCFString();
    }
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v1;
}

uint64_t remoteXPCCPEClient_EnsureClientEstablished()
{
  uint64_t v3 = 0;
  CFTypeRef v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __remoteXPCCPEClient_EnsureClientEstablished_block_invoke;
  block[3] = &unk_1E579F520;
  block[4] = &v3;
  if (remoteXPCCPEClient_EnsureClientEstablished_gCPERemoteClientSetupOnce != -1) {
    dispatch_once(&remoteXPCCPEClient_EnsureClientEstablished_gCPERemoteClientSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t FigCPERemoteUninitialize()
{
  uint64_t v0 = remoteXPCCPEClient_EnsureClientEstablished();
  if (v0)
  {
    uint64_t v2 = v0;
  }
  else
  {
    uint64_t v1 = FigXPCCreateBasicMessage();
    if (v1 || (uint64_t v1 = FigXPCMessageSetCFString(), v1) || (uint64_t v1 = FigXPCMessageSetCFString(), v1)) {
      uint64_t v2 = v1;
    }
    else {
      uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t FigCPERemoteSetStorageLocation()
{
  if (FigCPERemoteSetStorageLocation_onceToken != -1) {
    dispatch_once(&FigCPERemoteSetStorageLocation_onceToken, &__block_literal_global_48);
  }
  uint64_t v0 = remoteXPCCPEClient_EnsureClientEstablished();
  if (v0
    || (uint64_t v0 = FigSandboxRegisterURLWithProcessAndCopyRegistration(), v0)
    || (uint64_t v0 = FigXPCCreateBasicMessage(), v0)
    || (uint64_t v0 = FigXPCMessageSetCFData(), v0)
    || (uint64_t v0 = FigXPCMessageSetCFURL(), v0))
  {
    uint64_t v1 = v0;
  }
  else
  {
    uint64_t v1 = FigXPCRemoteClientSendSyncMessage();
    if (!v1) {
      FigCFDictionarySetValue();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v1;
}

CFMutableDictionaryRef __FigCPERemoteSetStorageLocation_block_invoke()
{
  CFMutableDictionaryRef result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCPERemoteSetStorageLocation_serverSandboxRegistrations = (uint64_t)result;
  return result;
}

uint64_t FigCPERemoteCopySessionRecords()
{
  uint64_t v0 = remoteXPCCPEClient_EnsureClientEstablished();
  if (!v0)
  {
    uint64_t v0 = FigXPCCreateBasicMessage();
    if (!v0)
    {
      uint64_t v0 = FigXPCMessageSetCFData();
      if (!v0)
      {
        uint64_t v0 = FigXPCRemoteClientSendSyncMessageCreatingReply();
        if (!v0) {
          uint64_t v0 = FigXPCMessageCopyCFDictionary();
        }
      }
    }
  }
  uint64_t v1 = v0;
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v1;
}

uint64_t FigCPERemoteRemoveSessionRecords()
{
  uint64_t v0 = remoteXPCCPEClient_EnsureClientEstablished();
  if (v0)
  {
    uint64_t v2 = v0;
  }
  else
  {
    uint64_t v1 = FigXPCCreateBasicMessage();
    if (v1 || (uint64_t v1 = FigXPCMessageSetCFData(), v1) || (uint64_t v1 = FigXPCMessageSetCFArray(), v1)) {
      uint64_t v2 = v1;
    }
    else {
      uint64_t v2 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t FigAlternateSelectionBossGetClassID()
{
  if (sRegisterFigAlternateSelectionBossClassIDOnce != -1) {
    dispatch_once_f(&sRegisterFigAlternateSelectionBossClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateSelectionBossType);
  }
  return sFigAlternateSelectionBossClassID;
}

uint64_t RegisterFigAlternateSelectionBossType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigAlternateSelectionBossGetTypeID()
{
  if (sRegisterFigAlternateSelectionBossClassIDOnce != -1) {
    dispatch_once_f(&sRegisterFigAlternateSelectionBossClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateSelectionBossType);
  }

  return CMBaseClassGetCFTypeID();
}

uint64_t FigAlternateSelectionBossAddFilter(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    uint64_t v6 = fasb_addFilterGuts(a1, a2);
    MEMORY[0x19970E2B0](*v5);
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fasb_addFilterGuts(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void (**)(const void *))(v5 + 8);
  if (v6) {
    v6(a2);
  }
  uint64_t result = fasb_removeFilter();
  if (!result)
  {
    uint64_t v8 = *(void *)(DerivedStorage + 48);
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v10 = v9 ? v9 : 0;
    uint64_t v11 = *(uint64_t (**)(const void *))(v10 + 16);
    int v12 = v11 ? v11(a2) : -1;
    uint64_t result = FigAlternateFilterTreeInsertLeaf(v8, a2, v12);
    if (!result)
    {
      return fasb_rebuildFilterTree();
    }
  }
  return result;
}

uint64_t FigAlternateSelectionBossRemoveFilter(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    uint64_t v5 = fasb_removeFilter();
    MEMORY[0x19970E2B0](*v4);
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fasb_removeFilter()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t result = FigAlternateFilterTreeRemoveLeaf();
  if (!result)
  {
    return fasb_rebuildFilterTree();
  }
  return result;
}

uint64_t FigAlternateSelectionBossHasFilter(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v4 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    CFIndex v5 = 0;
    while (1)
    {
      CFArrayRef Count = (const __CFArray *)v4[5];
      if (Count) {
        CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
      }
      if (v5 >= (uint64_t)Count) {
        break;
      }
      ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v4[5], v5);
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v10 = *(void (**)(const void *))(v9 + 8);
      if (v10) {
        v10(ValueAtIndex);
      }
      ++v5;
      if (FigCFEqual())
      {
        a2 = 1;
        goto LABEL_14;
      }
    }
    a2 = 0;
LABEL_14:
    MEMORY[0x19970E2B0](*v4);
  }
  else
  {
    FigSignalErrorAt();
  }
  return a2;
}

uint64_t FigAlternateSelectionBossCopyProperty(uint64_t a1, __CFString *a2, uint64_t a3, const __CFArray **a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (CFEqual(a2, @"AlternateList"))
  {
    CFTypeRef v7 = (CFTypeRef)DerivedStorage[3];
    if (!v7) {
      goto LABEL_3;
    }
LABEL_13:
    CFTypeRef v7 = CFRetain(v7);
LABEL_14:
    uint64_t v9 = 0;
    *a4 = (const __CFArray *)v7;
    goto LABEL_15;
  }
  if (CFEqual(a2, @"FilteredAlternateList"))
  {
    uint64_t v10 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(v10 + 24))
    {
      uint64_t v11 = v10;
      while (*(_DWORD *)(v11 + 80) && !*(unsigned char *)(v11 + 122))
      {
        uint64_t v8 = FigConditionVariableWaitRelative();
        if (v8) {
          goto LABEL_4;
        }
      }
      CFTypeRef v7 = *(CFTypeRef *)(v11 + 32);
      if (!v7) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
  else
  {
    if (!CFEqual(a2, @"MediaSelectionArray"))
    {
      if (CFEqual(a2, @"HasHDRAlternates")
        || CFEqual(a2, @"HasAtmosAlternates")
        || CFEqual(a2, @"HasMultiChannelAudio")
        || CFEqual(a2, @"HasPlayableMultiChannelAudio")
        || CFEqual(a2, @"HighestVideoResolutionAlternateWithMultiChannelAudio")
        || CFEqual(a2, @"HasLosslessAudio")
        || CFEqual(a2, @"HasBinauralAudio"))
      {
        fasb_copyInitialAlternateListProperty((const __CFArray *)DerivedStorage[3], a2, a4);
        uint64_t v9 = 0;
      }
      else if (CFEqual(a2, @"Paused"))
      {
        uint64_t v9 = 0;
        if (*((unsigned char *)DerivedStorage + 122)) {
          dispatch_queue_t v13 = (const __CFArray **)MEMORY[0x1E4F1CFD0];
        }
        else {
          dispatch_queue_t v13 = (const __CFArray **)MEMORY[0x1E4F1CFC8];
        }
        *a4 = *v13;
      }
      else
      {
        uint64_t v9 = 4294954509;
      }
      goto LABEL_15;
    }
    if (DerivedStorage[3])
    {
      CFTypeRef v7 = (CFTypeRef)DerivedStorage[2];
      if (!v7) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
  }
LABEL_3:
  uint64_t v8 = FigSignalErrorAt();
LABEL_4:
  uint64_t v9 = v8;
LABEL_15:
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v9;
}

CFArrayRef fasb_copyInitialAlternateListProperty(const __CFArray *result, __CFString *a2, const __CFArray **a3)
{
  if (a2 == @"HasHDRAlternates")
  {
    int HasHDRAlternate = FigAlternateSelectionUtility_AlternateListHasHDRAlternate(result);
LABEL_14:
    CFIndex v5 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (!HasHDRAlternate) {
      CFIndex v5 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    uint64_t result = (const __CFArray *)CFRetain(*v5);
    goto LABEL_17;
  }
  if (a2 == @"HasAtmosAlternates")
  {
    int HasHDRAlternate = FigAlternateSelectionUtility_AlternateListHasATMOSAlternate(result);
    goto LABEL_14;
  }
  if (a2 == @"HasMultiChannelAudio") {
    goto LABEL_11;
  }
  if (a2 == @"HasLosslessAudio")
  {
    int HasHDRAlternate = FigAlternateSelectionUtility_AlternateListHasLosslessAudioAlternate(result);
    goto LABEL_14;
  }
  if (a2 == @"HasBinauralAudio")
  {
    int HasHDRAlternate = FigAlternateSelectionUtility_AlternateListHasBinauralAudioAlternate(result);
    goto LABEL_14;
  }
  if (a2 == @"HasPlayableMultiChannelAudio")
  {
LABEL_11:
    int HasHDRAlternate = FigAlternateSelectionUtility_AlternateListHasMultiChannelAudioAlternate(result);
    goto LABEL_14;
  }
  if (a2 != @"HighestVideoResolutionAlternateWithMultiChannelAudio") {
    return result;
  }
  uint64_t result = FigAlternateSelectionUtility_HighestVideoResolutionAlternateWithMultiChannelAudio(result);
LABEL_17:
  *a3 = result;
  return result;
}

uint64_t FigAlternateSelectionBossSetProperty(const void *a1, uint64_t a2, const void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFTypeRef v7 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    if (FigCFEqual())
    {
      uint64_t v8 = v7[13];
      v7[13] = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (!v8) {
        goto LABEL_16;
      }
      CFRelease((CFTypeRef)v8);
    }
    else
    {
      if (!FigCFEqual())
      {
        uint64_t v8 = 4294954509;
        goto LABEL_16;
      }
      uint64_t v9 = (const void *)*MEMORY[0x1E4F1CFD0];
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      if (v9 == a3)
      {
        if (!*(unsigned char *)(v10 + 122))
        {
          FigAlternateSelectionBossLockForConfiguration((uint64_t)a1);
          uint64_t v8 = 0;
          *(unsigned char *)(v10 + 122) = 1;
          goto LABEL_16;
        }
      }
      else if (*(unsigned char *)(v10 + 122))
      {
        uint64_t v8 = (uint64_t)FigAlternateSelectionBossUnlockForConfiguration(a1);
        if (!v8) {
          *(unsigned char *)(v10 + 122) = 0;
        }
        goto LABEL_16;
      }
    }
    uint64_t v8 = 0;
LABEL_16:
    MEMORY[0x19970E2B0](*v7);
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t FigAlternateSelectionBossAddMonitor(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef v29 = 0;
  if (a2)
  {
    CFIndex v5 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    uint64_t v6 = CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    CFTypeRef v31 = 0;
    CFAllocatorRef v7 = CFGetAllocator(a1);
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v10 = *(uint64_t (**)(const void *, __CFString *, CFAllocatorRef, CFTypeRef *))(v9 + 48);
    if (v10)
    {
      uint64_t v11 = v10(a2, @"AlternateFilterMonitorProperty_Trigger", v7, &v31);
      if (v31)
      {
        if (v11)
        {
LABEL_23:
          if (cf) {
            CFRelease(cf);
          }
          if (v31) {
            CFRelease(v31);
          }
          if (!v11)
          {
            CFArrayAppendValue((CFMutableArrayRef)v5[8], a2);
            CMNotificationCenterGetDefaultLocalCenter();
            uint64_t v20 = FigNotificationCenterAddWeakListener();
            if (v20
              || (CMNotificationCenterGetDefaultLocalCenter(), uint64_t v20 = FigNotificationCenterAddWeakListener(), v20))
            {
              uint64_t v11 = v20;
            }
            else
            {
              uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v21) {
                uint64_t v22 = v21;
              }
              else {
                uint64_t v22 = 0;
              }
              long long v23 = *(uint64_t (**)(const void *, CFTypeRef *))(v22 + 24);
              if (v23)
              {
                uint64_t v11 = v23(a2, &v29);
                if (!v11 && v29)
                {
                  fasb_addFilterGuts((uint64_t)a1, v29);
                  uint64_t v11 = 0;
                }
              }
              else
              {
                uint64_t v11 = 4294954514;
              }
            }
          }
          MEMORY[0x19970E2B0](*v5);
          if (v29) {
            CFRelease(v29);
          }
          return v11;
        }
        uint64_t v12 = FigAlternateFilterMonitorTriggerSetBoss((uint64_t)v31, a1);
        if (v12)
        {
LABEL_46:
          uint64_t v11 = v12;
          goto LABEL_23;
        }
        for (CFIndex i = 0; ; ++i)
        {
          CFArrayRef Count = *(const __CFArray **)(v6 + 64);
          if (Count) {
            CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
          }
          if (i >= (uint64_t)Count) {
            break;
          }
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 64), i);
          CFAllocatorRef v16 = CFGetAllocator(a1);
          uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v17) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = 0;
          }
          uint64_t v19 = *(unsigned int (**)(const void *, __CFString *, CFAllocatorRef, CFTypeRef *))(v18 + 48);
          if (v19
            && !v19(ValueAtIndex, @"AlternateFilterMonitorProperty_Trigger", v16, &cf)
            && FigCFEqual())
          {
            CFTypeRef v25 = cf;
            uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v26) {
              uint64_t v27 = v26;
            }
            else {
              uint64_t v27 = 0;
            }
            long long v28 = *(uint64_t (**)(const void *, __CFString *, CFTypeRef))(v27 + 56);
            if (v28)
            {
              uint64_t v12 = v28(a2, @"AlternateFilterMonitorProperty_Trigger", v25);
              goto LABEL_46;
            }
            uint64_t v11 = 4294954514;
            goto LABEL_23;
          }
          if (cf)
          {
            CFRelease(cf);
            CFTypeRef cf = 0;
          }
        }
      }
    }
    uint64_t v11 = 0;
    goto LABEL_23;
  }

  return FigSignalErrorAt();
}

void fasb_monitorStateChangedNotificationHandler(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t Value = CFDictionaryGetValue(a5, @"AlternateFilterMonitorParameter_OldFilter");
  uint64_t v9 = CFDictionaryGetValue(a5, @"AlternateFilterMonitorParameter_NewFilter");
  MEMORY[0x19970E290](*DerivedStorage);
  if (v9 != Value)
  {
    if (Value)
    {
      uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v10) {
        uint64_t v11 = v10;
      }
      else {
        uint64_t v11 = 0;
      }
      uint64_t v12 = *(void (**)(const void *))(v11 + 8);
      if (v12) {
        v12(Value);
      }
      fasb_removeFilter();
    }
    if (v9) {
      fasb_addFilterGuts((uint64_t)a2, v9);
    }
    fasb_applyFiltersGuts(a2);
  }

  JUMPOUT(0x19970E2B0);
}

void fasb_monitorExpandersAddedNotificationHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v15 = 0;
  uint64_t v12 = 0;
  CFTypeRef v13 = 0;
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v8 + 48);
  if (v9 && !v9(a4, @"AlternateFilterMonitorProperty_Expanders", *MEMORY[0x1E4F1CF80], &v15))
  {
    MEMORY[0x19970E290](*DerivedStorage);
    if (!fasb_applyExpandersGuts(a2, (const __CFArray *)v15, (__CFArray **)&cf))
    {
      uint64_t v12 = a2;
      CFTypeRef v13 = cf;
      CFArrayRef v10 = (const __CFArray *)DerivedStorage[1];
      if (v10) {
        v11.length = CFArrayGetCount((CFArrayRef)DerivedStorage[1]);
      }
      else {
        v11.length = 0;
      }
      v11.location = 0;
      CFArrayApplyFunction(v10, v11, (CFArrayApplierFunction)fasb_dispatchAlternatesAddedDelegateFn, &v12);
    }
    MEMORY[0x19970E2B0](*DerivedStorage);
    if (cf) {
      CFRelease(cf);
    }
  }
  if (v15) {
    CFRelease(v15);
  }
}

uint64_t FigAlternateSelectionBossApplyFilters(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v3 = fasb_applyFiltersGuts(a1);
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v3;
}

uint64_t fasb_applyFiltersGuts(const void *a1)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  CFTypeRef v62 = 0;
  CFArrayRef v63 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  context = 0;
  CFArrayRef v60 = 0;
  uint64_t v61 = 0;
  if (*(_DWORD *)(DerivedStorage + 80))
  {
    CFMutableArrayRef Mutable = 0;
    CFArrayRef Copy = 0;
    uint64_t v16 = 0;
    *(unsigned char *)(DerivedStorage + 96) = 1;
    goto LABEL_85;
  }
  context = a1;
  CFMutableArrayRef Mutable = *(__CFDictionary **)(DerivedStorage + 24);
  if (!Mutable)
  {
    CFArrayRef Copy = 0;
    goto LABEL_36;
  }
  CFArrayRef v60 = 0;
  uint64_t v61 = 0;
  uint64_t v5 = *(void *)(DerivedStorage + 56);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, __CFDictionary *, CFArrayRef *, CFTypeRef *))(v7 + 32);
  if (v9)
  {
    v9(v5, Mutable, &v63, &v62);
  }
  else
  {
    uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    uint64_t v12 = *(void (**)(uint64_t, __CFDictionary *, CFArrayRef *))(v11 + 24);
    if (v12) {
      v12(v5, Mutable, &v63);
    }
  }
  theArray[0] = 0;
  memset(v66, 0, sizeof(v66));
  FigAlternateFilterApplyInfoGetStorage((const __CFData *)v62, (uint64_t)v66);
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    for (CFIndex i = 0; ; ++i)
    {
      CFArrayRef Count = theArray[0];
      if (theArray[0]) {
        CFArrayRef Count = (CFArrayRef)CFArrayGetCount(theArray[0]);
      }
      if (i >= (uint64_t)Count) {
        break;
      }
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray[0], i);
      uint64_t v70 = 0;
      *(_OWORD *)CFStringRef key = 0u;
      long long v69 = 0u;
      FigAlternateFilterApplyInfoGetStorage(ValueAtIndex, (uint64_t)key);
      CFDictionarySetValue(Mutable, key[0], ValueAtIndex);
    }
  }
  else
  {
    uint64_t v17 = FigSignalErrorAt();
    if (v17)
    {
      uint64_t v16 = v17;
      CFMutableArrayRef Mutable = 0;
      CFArrayRef Copy = 0;
      goto LABEL_85;
    }
  }
  CFAllocatorRef v18 = CFGetAllocator(a1);
  CFArrayRef Copy = CFArrayCreateCopy(v18, v63);
  if (Copy)
  {
    if (v62)
    {
      theArray[0] = 0;
      memset(v66, 0, sizeof(v66));
      FigAlternateFilterApplyInfoGetStorage((const __CFData *)v62, (uint64_t)v66);
      CFArrayRef v19 = theArray[0];
      uint64_t v61 = 0;
      if (theArray[0])
      {
        CFIndex v20 = CFArrayGetCount(theArray[0]);
        if (v20 >= 1)
        {
          uint64_t v21 = 0;
          unint64_t v22 = v20 + 1;
          do
          {
            if (v21) {
              break;
            }
            CFDataRef v23 = (const __CFData *)CFArrayGetValueAtIndex(v19, v22 - 2);
            uint64_t v70 = 0;
            *(_OWORD *)CFStringRef key = 0u;
            long long v69 = 0u;
            FigAlternateFilterApplyInfoGetStorage(v23, (uint64_t)key);
            uint64_t v21 = key[1];
            if (key[1])
            {
              uint64_t v21 = key[0];
              uint64_t v61 = key[0];
            }
            --v22;
          }
          while (v22 > 1);
        }
      }
    }
    uint64_t v24 = *(const void **)(v3 + 112);
    *(void *)(v3 + 112) = Mutable;
    if (Mutable) {
      CFRetain(Mutable);
    }
    if (v24) {
      CFRelease(v24);
    }
LABEL_36:
    int v25 = FigCFEqual();
    if (!v25)
    {
      uint64_t v26 = *(const void **)(v3 + 32);
      *(void *)(v3 + 32) = Copy;
      if (Copy) {
        CFRetain(Copy);
      }
      if (v26) {
        CFRelease(v26);
      }
    }
    CFArrayRef v27 = *(const __CFArray **)(v3 + 40);
    if (!v27 || CFArrayGetCount(v27) < 1)
    {
LABEL_78:
      if (!v25) {
        goto LABEL_80;
      }
      goto LABEL_79;
    }
    if (v25 && *(unsigned char *)(v3 + 120) && !*(unsigned char *)(v3 + 121) && !*(unsigned char *)(v3 + 123))
    {
LABEL_79:
      if (!*(unsigned char *)(v3 + 97))
      {
LABEL_84:
        uint64_t v16 = 0;
        goto LABEL_85;
      }
LABEL_80:
      *(unsigned char *)(v3 + 97) = 0;
      CFArrayRef v60 = Copy;
      CFArrayRef v51 = *(const __CFArray **)(v3 + 8);
      if (v51) {
        v52.length = CFArrayGetCount(*(CFArrayRef *)(v3 + 8));
      }
      else {
        v52.length = 0;
      }
      v52.location = 0;
      CFArrayApplyFunction(v51, v52, (CFArrayApplierFunction)fasb_dispatchAlternateChangedDelegateFn, &context);
      goto LABEL_84;
    }
    BOOL v28 = *(unsigned __int8 *)(v3 + 120) == 0;
    uint64_t v56 = CMBaseObjectGetDerivedStorage();
    CFTypeRef v29 = fasb_copyVerboseDescriptionInternal(a1, v28);
    if (!v29)
    {
      FigSignalErrorAt();
LABEL_77:
      *(_WORD *)(v3 + 120) = 1;
      goto LABEL_78;
    }
    CFStringRef v30 = v29;
    CFAllocatorRef v31 = CFGetAllocator(a1);
    CFTypeRef v32 = CFArrayCreateMutable(v31, 0, MEMORY[0x1E4F1D510]);
    int v55 = v25;
    if (v32)
    {
      CFAllocatorRef v33 = CFGetAllocator(a1);
      CFMutableStringRef v34 = CFStringCreateMutable(v33, 0);
      if (v34)
      {
        CFAllocatorRef v35 = CFGetAllocator(a1);
        CFStringRef theString = CFStringCreateWithFormat(v35, 0, @"[%p:%@]", a1, *(void *)(v56 + 104));
        if (theString)
        {
          CFStringRef cf = v30;
          CFStringRef LineFromString = fasb_copyNextLineFromString(v30, 0);
          if (LineFromString)
          {
            CFStringRef v37 = LineFromString;
            uint64_t v38 = 0;
            while (1)
            {
              CFIndex Length = CFStringGetLength(v37);
              CFIndex v40 = CFStringGetLength(v34);
              CFIndex v41 = CFStringGetLength(v37) + v40;
              if (v41 + CFStringGetLength(theString) >= 980 && CFStringGetLength(v34) >= 1)
              {
                CFArrayAppendValue(v32, v34);
                CFRelease(v34);
                CFAllocatorRef v42 = CFGetAllocator(a1);
                CFMutableStringRef v34 = CFStringCreateMutable(v42, 0);
                if (!v34) {
                  break;
                }
              }
              v38 += Length;
              CFStringAppend(v34, v37);
              CFRelease(v37);
              CFStringRef v37 = fasb_copyNextLineFromString(cf, v38);
              if (!v37) {
                goto LABEL_57;
              }
            }
            FigSignalErrorAt();
          }
          else
          {
LABEL_57:
            uint64_t v54 = v3;
            if (CFStringGetLength(v34) >= 1)
            {
              CFStringAppend(v34, @"\nLOG COMPLETE");
              CFArrayAppendValue(v32, v34);
              CFRelease(v34);
              CFMutableStringRef v34 = 0;
            }
            if (CFArrayGetCount(v32) < 1)
            {
              CFStringRef v37 = 0;
            }
            else
            {
              CFIndex v43 = 0;
              do
              {
                CFArrayRef v44 = (const __CFArray *)CFArrayGetValueAtIndex(v32, v43);
                if (dword_1E9351230)
                {
                  CFArrayRef v45 = v44;
                  unsigned int v65 = 0;
                  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v47 = v65;
                  if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type)) {
                    unsigned int v48 = v47;
                  }
                  else {
                    unsigned int v48 = v47 & 0xFFFFFFFE;
                  }
                  if (v48)
                  {
                    uint64_t v49 = *(void *)(v56 + 104);
                    LODWORD(v66[0]) = 136315906;
                    *(void *)((char *)v66 + 4) = "fasb_log";
                    WORD6(v66[0]) = 2048;
                    *(void *)((char *)v66 + 14) = a1;
                    WORD3(v66[1]) = 2114;
                    *((void *)&v66[1] + 1) = v49;
                    LOWORD(theArray[0]) = 2114;
                    *(CFArrayRef *)((char *)theArray + 2) = v45;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                ++v43;
              }
              while (v43 < CFArrayGetCount(v32));
              CFStringRef v37 = 0;
              uint64_t v3 = v54;
            }
          }
          CFRelease(cf);
          CFRelease(theString);
          CFStringRef v50 = v37;
          if (!v37) {
            goto LABEL_73;
          }
          goto LABEL_72;
        }
      }
    }
    else
    {
      CFMutableStringRef v34 = 0;
    }
    FigSignalErrorAt();
    CFStringRef v50 = v30;
LABEL_72:
    CFRelease(v50);
LABEL_73:
    if (v32) {
      CFRelease(v32);
    }
    int v25 = v55;
    if (v34) {
      CFRelease(v34);
    }
    goto LABEL_77;
  }
  uint64_t v16 = FigSignalErrorAt();
LABEL_85:
  if (v62) {
    CFRelease(v62);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v63) {
    CFRelease(v63);
  }
  if (Copy) {
    CFRelease(Copy);
  }
  return v16;
}

uint64_t FigAlternateSelectionLogNextFilterOperation()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  *((unsigned char *)DerivedStorage + 121) = 1;
  MEMORY[0x19970E2B0](*DerivedStorage);
  return 0;
}

uint64_t FigAlternateSelectionBossInitializeAlternateList(void *a1, const __CFArray *a2, const __CFArray *a3, const __CFArray *a4, CFTypeRef *a5)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v11 = DerivedStorage[3];
  CFTypeRef cf = 0;
  if (a2)
  {
    uint64_t v12 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    *((unsigned char *)v12 + 97) = 1;
    CFTypeRef v13 = (const void *)v12[3];
    if (v13)
    {
      CFRelease(v13);
      void v12[3] = 0;
    }
    CFAllocatorRef v14 = CFGetAllocator(a1);
    MutableCFArrayRef Copy = CFArrayCreateMutableCopy(v14, 0, a2);
    void v12[3] = MutableCopy;
    if (MutableCopy)
    {
      if (a4)
      {
        if (CFArrayGetCount(a4) >= 1)
        {
          uint64_t v16 = fasb_applyExpandersGuts((uint64_t)a1, a4, (__CFArray **)&cf);
          if (v16) {
            goto LABEL_26;
          }
        }
      }
      if (!a3)
      {
        BOOL v17 = 0;
        if (!v11)
        {
LABEL_16:
          CFArrayRef v21 = (const __CFArray *)v12[1];
          if (v21) {
            v22.length = CFArrayGetCount((CFArrayRef)v12[1]);
          }
          else {
            v22.length = 0;
          }
          v22.location = 0;
          CFArrayApplyFunction(v21, v22, (CFArrayApplierFunction)fasb_dispatchMediaSelectionArrayChangedDelegateFn, a1);
LABEL_20:
          uint64_t v23 = fasb_applyFiltersGuts(a1);
          if (a5)
          {
            *a5 = cf;
            CFTypeRef cf = 0;
          }
          goto LABEL_22;
        }
LABEL_15:
        if (!v17) {
          goto LABEL_20;
        }
        goto LABEL_16;
      }
      BOOL v17 = FigCFEqual() == 0;
      CFAllocatorRef v18 = (const void *)v12[2];
      if (v18)
      {
        CFRelease(v18);
        v12[2] = 0;
      }
      CFAllocatorRef v19 = CFGetAllocator(a1);
      CFArrayRef Copy = CFArrayCreateCopy(v19, a3);
      v12[2] = Copy;
      if (Copy)
      {
        if (!v11) {
          goto LABEL_16;
        }
        goto LABEL_15;
      }
    }
    uint64_t v16 = FigSignalErrorAt();
LABEL_26:
    uint64_t v23 = v16;
LABEL_22:
    MEMORY[0x19970E2B0](*v12);
    if (cf) {
      CFRelease(cf);
    }
    return v23;
  }

  return FigSignalErrorAt();
}

uint64_t fasb_applyExpandersGuts(uint64_t a1, const __CFArray *a2, __CFArray **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  if (!a3)
  {
    uint64_t v22 = FigSignalErrorAt();
    MutableCFArrayRef Copy = 0;
LABEL_28:
    CFMutableArrayRef Mutable = 0;
    goto LABEL_30;
  }
  uint64_t v6 = DerivedStorage;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCFArrayRef Copy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFArrayRef *)(DerivedStorage + 24));
  if (!MutableCopy)
  {
    uint64_t v22 = FigSignalErrorAt();
    goto LABEL_28;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v10 = FigCFArrayCopyValuesAsCFSet();
    if (!v10)
    {
      CFIndex v11 = 0;
      if (!a2) {
        goto LABEL_7;
      }
LABEL_6:
      for (CFIndex i = CFArrayGetCount(a2); v11 < i; CFIndex i = 0)
      {
        CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v11);
        if (!CFSetContainsValue(0, ValueAtIndex))
        {
          uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v14) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v16 = *(uint64_t (**)(const void *, __CFArray *, CFArrayRef *))(v15 + 16);
          if (!v16)
          {
            uint64_t v22 = 4294954514;
            goto LABEL_30;
          }
          uint64_t v10 = v16(ValueAtIndex, MutableCopy, &theArray);
          if (v10) {
            goto LABEL_40;
          }
          CFArrayRef v17 = theArray;
          if (theArray) {
            v18.length = CFArrayGetCount(theArray);
          }
          else {
            v18.length = 0;
          }
          v18.location = 0;
          CFArrayAppendArray(MutableCopy, v17, v18);
          CFArrayRef v19 = theArray;
          if (theArray) {
            v20.length = CFArrayGetCount(theArray);
          }
          else {
            v20.length = 0;
          }
          v20.location = 0;
          CFArrayAppendArray(Mutable, v19, v20);
          CFArrayAppendValue(*(CFMutableArrayRef *)(v6 + 72), ValueAtIndex);
          if (theArray)
          {
            CFRelease(theArray);
            CFArrayRef theArray = 0;
          }
        }
        ++v11;
        if (a2) {
          goto LABEL_6;
        }
LABEL_7:
        ;
      }
      CFArrayRef v21 = *(const void **)(v6 + 24);
      *(void *)(v6 + 24) = MutableCopy;
      CFRetain(MutableCopy);
      if (v21) {
        CFRelease(v21);
      }
      uint64_t v22 = 0;
      *a3 = Mutable;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v10 = FigSignalErrorAt();
  }
LABEL_40:
  uint64_t v22 = v10;
LABEL_30:
  if (theArray) {
    CFRelease(theArray);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v22;
}

void fasb_dispatchMediaSelectionArrayChangedDelegateFn(uint64_t *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1[2])
  {
    uint64_t v5 = DerivedStorage;
    uint64_t v6 = malloc_type_calloc(1uLL, 0x38uLL, 0xE004067E9EE1AuLL);
    if (v6)
    {
      CFAllocatorRef v7 = v6;
      uint64_t v10 = *a1;
      __copy_constructor_8_8_pa0_38126_0_pa0_35993_8_pa0_4849_16(v11, a1 + 1);
      v11[3] = a1[4];
      fasb_copyDelegateEntryValues((uint64_t)&v10, v7 + 1);
      CFTypeRef v8 = *(CFTypeRef *)(v5 + 16);
      if (v8) {
        CFTypeRef v8 = CFRetain(v8);
      }
      v7[6] = v8;
      if (a2) {
        CFTypeRef v9 = CFRetain(a2);
      }
      else {
        CFTypeRef v9 = 0;
      }
      void *v7 = v9;
      dispatch_async_f((dispatch_queue_t)a1[4], v7, (dispatch_function_t)fasb_mediaSelectionArrayChangedDispatchFn);
    }
  }
}

uint64_t FigAlternateSelectionBossAddDelegate(const void *a1, uint64_t a2, void *a3, NSObject *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFTypeRef v9 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    CFAllocatorRef v10 = CFGetAllocator(a1);
    CFIndex v11 = (uint64_t *)CFAllocatorAllocate(v10, 40, 0);
    if (v11 && (v12 = v11, uint64_t v13 = FigCFWeakReferenceHolderCreateWithReferencedObject(), (*v12 = v13) != 0))
    {
      __copy_constructor_8_8_pa0_38126_0_pa0_35993_8_pa0_4849_16(v12 + 1, a3);
      if (a4) {
        dispatch_retain(a4);
      }
      else {
        a4 = FigDispatchQueueCreateWithPriority();
      }
      v12[4] = (uint64_t)a4;
      CFArrayAppendValue((CFMutableArrayRef)v9[1], v12);
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = FigSignalErrorAt();
    }
    MEMORY[0x19970E2B0](*v9);
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
  return v14;
}

uint64_t FigAlternateSelectionBossLockForConfiguration(uint64_t a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    ++*((_DWORD *)v3 + 20);
    MEMORY[0x19970E2B0](*v3);
  }
  return 0;
}

const void *FigAlternateSelectionBossUnlockForConfiguration(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    int v4 = *((_DWORD *)v3 + 20);
    if (v4 <= 0)
    {
      uint64_t v6 = FigSignalErrorAt();
    }
    else
    {
      int v5 = v4 - 1;
      *((_DWORD *)v3 + 20) = v5;
      if (v5)
      {
        a1 = 0;
LABEL_9:
        MEMORY[0x19970E2B0](*v3);
        return a1;
      }
      if (!*((unsigned char *)v3 + 96) || (*((unsigned char *)v3 + 96) = 0, uint64_t v6 = fasb_applyFiltersGuts(a1), !v6)) {
        uint64_t v6 = MEMORY[0x19970CC00](v3[11]);
      }
    }
    a1 = (const void *)v6;
    goto LABEL_9;
  }
  return a1;
}

__CFString *FigAlternateSelectionBossCopyVerboseDescription(const void *a1)
{
  return fasb_copyVerboseDescriptionInternal(a1, 1);
}

__CFString *fasb_copyVerboseDescriptionInternal(const void *a1, int a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFRange v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  MEMORY[0x19970E290](*DerivedStorage);
  context = a1;
  int v5 = fasb_copyDesc(a1);
  if (v5)
  {
    uint64_t v6 = v5;
    CFAllocatorRef v7 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFStringCreateMutable(v7, 0);
    CFTypeRef v9 = Mutable;
    if (Mutable)
    {
      CFRange v20 = Mutable;
      CFStringAppendFormat(Mutable, 0, @"%@", v6);
      CFStringAppendFormat(v9, 0, @"\n%sMonitors:\n%s{", "  ", "  ");
      CFArrayRef v10 = (const __CFArray *)DerivedStorage[8];
      if (v10) {
        v11.length = CFArrayGetCount((CFArrayRef)DerivedStorage[8]);
      }
      else {
        v11.length = 0;
      }
      v11.location = 0;
      CFArrayApplyFunction(v10, v11, (CFArrayApplierFunction)fasb_appendDescriptionApplierFn, &context);
      CFStringAppendFormat(v9, 0, @"\n%s}", "  ");
      CFStringAppendFormat(v9, 0, @"\n%sFilters:\n%s{", "  ", "  ");
      CFStringAppendFormat(v9, 0, @"\n%s%sTo decode base64 encoded filter output, run:\n%s%s%% B64=\"ENCODEDVALUE\";python3 -c\"import base64,sys;n=int.from_bytes(base64.b64decode(sys.argv[1]),'little');print([i for i in range(0,n.bit_length())if 0!=(n&(1<<i))])\" $B64",
        "  ",
        "  ",
        "  ",
        "  ",
        context);
      CFArrayRef v12 = (const __CFArray *)DerivedStorage[5];
      if (v12) {
        v13.length = CFArrayGetCount((CFArrayRef)DerivedStorage[5]);
      }
      else {
        v13.length = 0;
      }
      v13.location = 0;
      CFArrayApplyFunction(v12, v13, (CFArrayApplierFunction)fasb_appendDescriptionApplierFn, &context);
      CFStringAppendFormat(v9, 0, @"\n%s}", "  ");
      if (a2)
      {
        CFStringAppendFormat(v9, 0, @"\n%sAlternates:\n%s{", "  ", "  ");
        CFArrayRef v14 = (const __CFArray *)DerivedStorage[3];
        if (v14) {
          v15.length = CFArrayGetCount((CFArrayRef)DerivedStorage[3]);
        }
        else {
          v15.length = 0;
        }
        v15.location = 0;
        CFArrayApplyFunction(v14, v15, (CFArrayApplierFunction)fasb_appendDescriptionApplierFn, &context);
        CFStringAppendFormat(v9, 0, @"\n%s}", "  ");
      }
      CFStringAppendFormat(v9, 0, @"\n%sFiltered Alternates:\n%s{", "  ", "  ");
      CFArrayRef v16 = (const __CFArray *)DerivedStorage[4];
      if (v16) {
        v17.length = CFArrayGetCount((CFArrayRef)DerivedStorage[4]);
      }
      else {
        v17.length = 0;
      }
      v17.location = 0;
      CFArrayApplyFunction(v16, v17, (CFArrayApplierFunction)fasb_appendDescriptionApplierFn, &context);
      CFStringAppendFormat(v9, 0, @"\n%s}", "  ");
    }
    MEMORY[0x19970E2B0](*DerivedStorage);
    CFRelease(v6);
  }
  else
  {
    MEMORY[0x19970E2B0](*DerivedStorage);
    return 0;
  }
  return v9;
}

uint64_t FigAlternateSelectionBossCreate(const __CFAllocator *a1, void *a2)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2) {
    return FigSignalErrorAt();
  }
  if (sRegisterFigAlternateSelectionBossClassIDOnce != -1) {
    dispatch_once_f(&sRegisterFigAlternateSelectionBossClassIDOnce, 0, (dispatch_function_t)RegisterFigAlternateSelectionBossType);
  }
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4) {
    return v4;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = FigReentrantMutexCreate();
  *(void *)uint64_t DerivedStorage = v6;
  if (!v6) {
    return FigSignalErrorAt();
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, &kDelegateEntryCFArrayValueCallbacks);
  *(void *)(DerivedStorage + 8) = Mutable;
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t v4 = FigAlternateFilterTreeCreate(AllocatorForMedia, (void *)(DerivedStorage + 48));
  if (v4) {
    return v4;
  }
  uint64_t v4 = fasb_rebuildFilterTree();
  if (v4) {
    return v4;
  }
  CFMutableArrayRef v9 = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 64) = v9;
  if (!v9) {
    return FigSignalErrorAt();
  }
  CFMutableArrayRef v10 = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 72) = v10;
  if (!v10) {
    return FigSignalErrorAt();
  }
  CFDictionaryRef v11 = CFDictionaryCreate(a1, 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  *(void *)(DerivedStorage + 112) = v11;
  if (!v11) {
    return FigSignalErrorAt();
  }
  *(void *)(DerivedStorage + 104) = &stru_1EE53F4B8;
  uint64_t v12 = FigConditionVariableCreate();
  *(void *)(DerivedStorage + 88) = v12;
  if (!v12) {
    return FigSignalErrorAt();
  }
  uint64_t v13 = 0;
  *(unsigned char *)(DerivedStorage + 123) = FigGetCFPreferenceNumberWithDefault();
  *a2 = 0;
  return v13;
}

uint64_t fasb_rebuildFilterTree()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = (__CFArray **)(DerivedStorage + 40);
  uint64_t v1 = *(const void **)(DerivedStorage + 40);
  if (v1)
  {
    CFRelease(v1);
    *uint64_t v2 = 0;
  }
  uint64_t result = FigAlternateFilterTreeCopyLeaves(*(const void **)(DerivedStorage + 48), v2);
  if (!result)
  {
    uint64_t v4 = *(const void **)(DerivedStorage + 56);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(DerivedStorage + 56) = 0;
    }
    int v5 = *(const void **)(DerivedStorage + 48);
    return FigAlternateFilterTreeCreateFilter(v5, @"FigAlternateSelectionBoss", -1, (void *)(DerivedStorage + 56));
  }
  return result;
}

BOOL FigAlternateSelectionUtility_AlternateListHasIFrameAlternate(BOOL a1)
{
  BOOL v1 = a1;
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  if (!a1) {
    return v1;
  }
  if (FigAlternateIFramesOnlyFilterCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], &cf)
    || ((v2 = cf, (uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v4 = 0) : (v4 = v3),
        (int v5 = *(uint64_t (**)(CFTypeRef, BOOL, CFArrayRef *))(v4 + 24)) == 0))
  {
LABEL_11:
    BOOL v1 = 0;
    goto LABEL_12;
  }
  int v6 = v5(v2, v1, &theArray);
  CFArrayRef v7 = theArray;
  if (!v6)
  {
    if (theArray)
    {
      BOOL v1 = CFArrayGetCount(theArray) > 0;
      CFArrayRef v7 = theArray;
      if (!theArray) {
        goto LABEL_12;
      }
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  BOOL v1 = 0;
  if (theArray) {
LABEL_10:
  }
    CFRelease(v7);
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  return v1;
}

BOOL FigAlternateSelectionUtility_AlternateListHasOnlyAudioOnly(CFArrayRef theArray)
{
  if (theArray) {
    BOOL v2 = CFArrayGetCount(theArray) > 0;
  }
  else {
    BOOL v2 = 0;
  }
  CFIndex v3 = 0;
  while (1)
  {
    CFIndex v4 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v3 >= v4) {
      break;
    }
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v3++);
    if (!FigAlternateIsAudioOnly((uint64_t)ValueAtIndex)) {
      return 0;
    }
  }
  return v2;
}

CFIndex FigAlternateSelectionUtility_GetLowestRequiredHDCPLevel(const __CFArray *a1, char *a2, int *a3, char *a4, int *a5)
{
  CFIndex result = CFArrayGetCount(a1);
  if (result < 1)
  {
    char v8 = 0;
    char v7 = 0;
    int v11 = -2;
    int v10 = -2;
  }
  else
  {
    char v7 = 0;
    char v8 = 0;
    CFIndex v9 = 0;
    int v10 = -2;
    int v11 = -2;
    do
    {
      CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v9);
      uint64_t CodecString = FigAlternateGetCodecString((uint64_t)ValueAtIndex);
      if (FigAlternateHasVideo((uint64_t)ValueAtIndex) || !CodecString)
      {
        int HDCPLevel = FigAlternateGetHDCPLevel((uint64_t)ValueAtIndex);
        int IsIFrameOnly = FigAlternateIsIFrameOnly((uint64_t)ValueAtIndex);
        if (HDCPLevel < v11 || v11 == -2) {
          int v17 = HDCPLevel;
        }
        else {
          int v17 = v11;
        }
        if (HDCPLevel < v10 || v10 == -2) {
          int v19 = HDCPLevel;
        }
        else {
          int v19 = v10;
        }
        if (IsIFrameOnly)
        {
          char v7 = 1;
        }
        else
        {
          char v8 = 1;
          int v11 = v17;
        }
        if (IsIFrameOnly) {
          int v10 = v19;
        }
      }
      ++v9;
      CFIndex result = CFArrayGetCount(a1);
    }
    while (v9 < result);
  }
  *a2 = v8;
  *a4 = v7;
  *a3 = v11;
  *a5 = v10;
  return result;
}

uint64_t FigAlternateSelectionUtility_AlternateListHasHDRAlternate(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  while (1)
  {
    CFIndex v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v3) {
      break;
    }
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
    if (FigAlternateGetVideoRange((uint64_t)ValueAtIndex) >= 2) {
      return 1;
    }
  }
  return 0;
}

uint64_t FigAlternateSelectionUtility_AlternateListHasMultiChannelAudioAlternate(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  while (1)
  {
    CFIndex v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v3) {
      break;
    }
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
    if ((int)FigAlternateGetMaxAudioChannelCount(ValueAtIndex) >= 3) {
      return 1;
    }
  }
  return 0;
}

CFDictionaryRef FigAlternateSelectionUtility_HighestVideoResolutionAlternateWithMultiChannelAudio(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  double v3 = *MEMORY[0x1E4F1DB30];
  double v4 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  double v5 = *MEMORY[0x1E4F1DB30];
  double v6 = v4;
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(theArray); v2 < i; CFIndex i = 0)
  {
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2);
    if ((int)FigAlternateGetMaxAudioChannelCount(ValueAtIndex) >= 3)
    {
      double Resolution = FigAlternateGetResolution((uint64_t)ValueAtIndex);
      if (Resolution > v5 && v10 > v6)
      {
        double v5 = Resolution;
        double v6 = v10;
      }
    }
    ++v2;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  if (v3 == v5 && v4 == v6) {
    return 0;
  }
  double v12 = v5;
  double v13 = v6;

  return CGSizeCreateDictionaryRepresentation(*(CGSize *)&v12);
}

uint64_t FigAlternateSelectionUtility_AlternateListHasPlayableMultiChannelAudioAlternate(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  while (1)
  {
    CFIndex v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v3) {
      break;
    }
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
    if ((int)FigAlternateGetMaxPlayableAudioChannelCount(ValueAtIndex) >= 3) {
      return 1;
    }
  }
  return 0;
}

uint64_t FigAlternateSelectionUtility_AlternateListHasLosslessAudioAlternate(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  while (1)
  {
    CFIndex v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v3) {
      break;
    }
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
    if (FigAlternateHasLosslessAudio((uint64_t)ValueAtIndex)) {
      return 1;
    }
  }
  return 0;
}

uint64_t FigAlternateSelectionUtility_AlternateListHasBinauralAudioAlternate(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  while (1)
  {
    CFIndex v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v3) {
      break;
    }
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
    if (FigAlternateHasBinauralAudio(ValueAtIndex)) {
      return 1;
    }
  }
  return 0;
}

uint64_t FigAlternateSelectionUtility_AlternateListHasATMOSAlternate(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  while (1)
  {
    CFIndex v3 = theArray ? CFArrayGetCount(theArray) : 0;
    if (v2 >= v3) {
      break;
    }
    CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v2++);
    if (FigAlternateHasAudioFormat((uint64_t)ValueAtIndex, 7)) {
      return 1;
    }
  }
  return 0;
}

__CFString *figAlternateSelectionBossCopyFormattingDesc(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  CFIndex v3 = fasb_copyDesc(a1);
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v3;
}

__CFString *fasb_copyDesc(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFArrayRef v5 = (const __CFArray *)DerivedStorage[5];
  if (v5) {
    CFIndex Count = CFArrayGetCount(v5);
  }
  else {
    CFIndex Count = 0;
  }
  CFArrayRef v7 = (const __CFArray *)DerivedStorage[3];
  if (v7) {
    CFIndex v8 = CFArrayGetCount(v7);
  }
  else {
    CFIndex v8 = 0;
  }
  CFArrayRef v9 = (const __CFArray *)DerivedStorage[4];
  if (v9) {
    CFIndex v10 = CFArrayGetCount(v9);
  }
  else {
    CFIndex v10 = 0;
  }
  CFArrayRef v11 = (const __CFArray *)DerivedStorage[2];
  if (v11) {
    CFArrayRef v11 = (const __CFArray *)CFArrayGetCount(v11);
  }
  CFStringAppendFormat(Mutable, 0, @"<FigAlternateSelectionBoss:%p [filterCount %d] [alternateCount %d] [filteredAlternateCount %d] [mediaSelectionArrayCount %d]>", a1, Count, v8, v10, v11);
  return Mutable;
}

void fasb_dispatchAlternatesAddedDelegateFn(uint64_t *a1, uint64_t a2)
{
  if (a1[3])
  {
    double v4 = malloc_type_calloc(1uLL, 0x38uLL, 0xE004067E9EE1AuLL);
    if (v4)
    {
      CFArrayRef v5 = v4;
      uint64_t v8 = *a1;
      __copy_constructor_8_8_pa0_38126_0_pa0_35993_8_pa0_4849_16(v9, a1 + 1);
      v9[3] = a1[4];
      fasb_copyDelegateEntryValues((uint64_t)&v8, v5 + 1);
      CFTypeRef v6 = *(CFTypeRef *)(a2 + 8);
      if (v6) {
        CFTypeRef v6 = CFRetain(v6);
      }
      v5[6] = v6;
      CFTypeRef v7 = *(CFTypeRef *)a2;
      if (*(void *)a2) {
        CFTypeRef v7 = CFRetain(v7);
      }
      void *v5 = v7;
      dispatch_async_f((dispatch_queue_t)a1[4], v5, (dispatch_function_t)fasb_alternatesAddedDispatchFn);
    }
  }
}

void fasb_copyDelegateEntryValues(uint64_t a1, void *a2)
{
  CFTypeRef v4 = *(CFTypeRef *)a1;
  if (v4) {
    CFTypeRef v4 = CFRetain(v4);
  }
  *a2 = v4;
  __copy_constructor_8_8_pa0_38126_0_pa0_35993_8_pa0_4849_16(a2 + 1, (void *)(a1 + 8));
  CFArrayRef v5 = *(NSObject **)(a1 + 32);
  a2[4] = v5;
  if (v5)
  {
    dispatch_retain(v5);
  }
}

void fasb_alternatesAddedDispatchFn(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3) {
    (*(void (**)(void, const void *, void))(a1 + 32))(*(void *)a1, v3, *(void *)(a1 + 48));
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CFTypeRef v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
  fasb_delegateEntryReleaseAndClearValues(v2);

  free((void *)a1);
}

void fasb_delegateEntryReleaseAndClearValues(uint64_t a1)
{
  uint64_t v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(void *)a1 = 0;
  }
  CFAllocatorRef v3 = *(NSObject **)(a1 + 32);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(a1 + 32) = 0;
  }
}

void fasb_dispatchAlternateChangedDelegateFn(uint64_t *a1, uint64_t a2)
{
  CFTypeRef v4 = *(const void **)(a2 + 8);
  if (v4 && CFArrayGetCount(*(CFArrayRef *)(a2 + 8)))
  {
    CFErrorRef v5 = 0;
  }
  else
  {
    CFErrorRef v5 = *(CFErrorRef *)(a2 + 16);
    CFErrorRef v17 = 0;
    if (v5)
    {
      if (CFEqual(v5, @"OfflinePlayable"))
      {
        uint64_t v6 = 4294951781;
      }
      else if (CFEqual(v5, @"SupportedAudioFormat"))
      {
        uint64_t v6 = 4294951780;
      }
      else if (CFEqual(v5, @"NeroSupportedVideoFormat") {
             || CFEqual(v5, @"SupportedVideoRange")
      }
             || CFEqual(v5, @"HDCP")
             || CFEqual(v5, @"VideoRangeAndFrameRateBucket"))
      {
        uint64_t v6 = 4294950073;
      }
      else if (CFEqual(v5, @"AllowedCPC"))
      {
        uint64_t v6 = 4294950068;
      }
      else if (CFEqual(v5, @"MediaValidation"))
      {
        uint64_t v6 = 4294951779;
      }
      else if (CFEqual(v5, @"MediaSelectionAudible"))
      {
        uint64_t v6 = 4294951778;
      }
      else if (CFEqual(v5, @"NetworkPermanentError") || CFEqual(v5, @"NetworkTemporaryError"))
      {
        uint64_t v6 = 4294951777;
      }
      else if (CFEqual(v5, @"CombinedAudioPreference"))
      {
        uint64_t v6 = 4294951486;
      }
      else if (CFEqual(v5, @"PreferBestFormatForVideoRange") {
             || CFEqual(v5, @"DisplaySize")
      }
             || CFEqual(v5, @"PreferredVideoFormat"))
      {
        uint64_t v6 = 4294951485;
      }
      else
      {
        uint64_t v6 = 4294951485;
        if (!CFEqual(v5, @"ResolutionCap"))
        {
          if (CFEqual(v5, @"ResolutionFloor")) {
            uint64_t v6 = 4294951485;
          }
          else {
            uint64_t v6 = 4294954371;
          }
        }
      }
      FigCreateErrorForOSStatus(v6, &v17);
      CFErrorRef v5 = v17;
    }
  }
  if (a1[1] && (CFTypeRef v7 = malloc_type_calloc(1uLL, 0x40uLL, 0xE0040B50938B4uLL)) != 0)
  {
    uint64_t v8 = v7;
    uint64_t v15 = *a1;
    __copy_constructor_8_8_pa0_38126_0_pa0_35993_8_pa0_4849_16(v16, a1 + 1);
    v16[3] = a1[4];
    fasb_copyDelegateEntryValues((uint64_t)&v15, v8 + 1);
    if (v4) {
      CFTypeRef v9 = CFRetain(v4);
    }
    else {
      CFTypeRef v9 = 0;
    }
    v8[6] = v9;
    CFTypeRef v11 = *(CFTypeRef *)a2;
    if (*(void *)a2) {
      CFTypeRef v11 = CFRetain(v11);
    }
    *uint64_t v8 = v11;
    CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFIndex v10 = Mutable;
    CFArrayRef v14 = *(const void **)(a2 + 16);
    if (v14) {
      CFDictionarySetValue(Mutable, @"FASBFIK_StoppedAtFilterName", v14);
    }
    if (v5) {
      CFDictionarySetValue(v10, @"FASBFIK_StoppedFilterError", v5);
    }
    void v8[7] = CFDictionaryCreateCopy(v12, v10);
    dispatch_async_f((dispatch_queue_t)a1[4], v8, (dispatch_function_t)fasb_alternateChangedDispatchFn);
    if (v5) {
      goto LABEL_29;
    }
  }
  else
  {
    CFIndex v10 = 0;
    if (v5) {
LABEL_29:
    }
      CFRelease(v5);
  }
  if (v10) {
    CFRelease(v10);
  }
}

CFStringRef fasb_copyNextLineFromString(const __CFString *a1, uint64_t a2)
{
  CFIndex v4 = CFStringGetLength(a1) - a2;
  if (v4 < 1) {
    return 0;
  }
  v7.location = 0;
  v7.length = 0;
  v8.location = a2;
  v8.length = v4;
  if (CFStringFindWithOptions(a1, @"\n", v8, 0, &v7)) {
    CFIndex v4 = v7.location - a2 + 1;
  }
  CFAllocatorRef v5 = CFGetAllocator(a1);
  v9.location = a2;
  v9.length = v4;
  return CFStringCreateWithSubstring(v5, a1, v9);
}

void fasb_alternateChangedDispatchFn(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3) {
    (*(void (**)(void, const void *, void, void))(a1 + 16))(*(void *)a1, v3, *(void *)(a1 + 48), *(void *)(a1 + 56));
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  if (v3) {
    CFRelease(v3);
  }
  CFIndex v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
  CFAllocatorRef v5 = *(const void **)(a1 + 56);
  if (v5) {
    CFRelease(v5);
  }
  fasb_delegateEntryReleaseAndClearValues(v2);

  free((void *)a1);
}

void fasb_mediaSelectionArrayChangedDispatchFn(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3) {
    (*(void (**)(void, const void *, void))(a1 + 24))(*(void *)a1, v3, *(void *)(a1 + 48));
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  CFIndex v4 = *(const void **)(a1 + 48);
  if (v4) {
    CFRelease(v4);
  }
  if (v3) {
    CFRelease(v3);
  }
  fasb_delegateEntryReleaseAndClearValues(v2);

  free((void *)a1);
}

void fasb_appendDescriptionApplierFn(CFTypeRef cf, uint64_t a2)
{
  CFAllocatorRef v3 = *(__CFString **)(a2 + 8);
  if (!cf || (CFAllocatorRef v5 = *(const void **)a2, v6 = CFGetTypeID(cf), v6 != FigAlternateFilterGetTypeID()))
  {
    MutableCFArrayRef Copy = (__CFString *)CFCopyDescription(cf);
    if (!MutableCopy) {
      return;
    }
    goto LABEL_17;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  CFStringRef v8 = CFCopyDescription(cf);
  if (v8)
  {
    CFStringRef v9 = v8;
    MutableCFArrayRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v8);
    if (MutableCopy)
    {
      CFDictionaryRef v11 = *(const __CFDictionary **)(DerivedStorage + 112);
      uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v12) {
        uint64_t v13 = v12;
      }
      else {
        uint64_t v13 = 0;
      }
      CFArrayRef v14 = (CFIndex *)(a2 + 16);
      uint64_t v15 = (uint64_t *)(a2 + 24);
      CFArrayRef v16 = *(uint64_t (**)(CFTypeRef))(v13 + 8);
      if (v16) {
        CFErrorRef v17 = (__CFString *)v16(cf);
      }
      else {
        CFErrorRef v17 = &stru_1EE53F4B8;
      }
      CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v11, v17);
      if (Value) {
        FigAlternateFilterApplyInfoGetStorage(Value, (uint64_t)&v21);
      }
      v24[0] = v21;
      v24[1] = v22;
      uint64_t v25 = v23;
      CFIndex v26 = 0;
      fasb_insertFilteringInfoToDescriptionHelper(v5, MutableCopy, (uint64_t)v24, &v26, v14, v15, 1);
    }
    CFRelease(v9);
    if (MutableCopy)
    {
LABEL_17:
      uint64_t v19 = FigCFStringCopyWithIndent();
      if (v19)
      {
        CFRange v20 = (const void *)v19;
        CFStringAppendFormat(v3, 0, @"\n%@", v19);
        CFRelease(v20);
      }
      CFRelease(MutableCopy);
    }
  }
}

uint64_t fasb_insertFilteringInfoToDescriptionHelper(const void *a1, __CFString *a2, uint64_t a3, CFIndex *a4, CFIndex *a5, uint64_t *a6, int a7)
{
  if (*(uint64_t *)(a3 + 8) < 1)
  {
    BOOL v14 = 0;
  }
  else
  {
    CFArrayRef v13 = *(const __CFArray **)(a3 + 32);
    if (v13) {
      BOOL v14 = CFArrayGetCount(v13) == 0;
    }
    else {
      BOOL v14 = 1;
    }
  }
  uint64_t Count = *a6;
  if (*a6)
  {
LABEL_9:
    if (v14) {
      goto LABEL_10;
    }
    goto LABEL_26;
  }
  CFBitVectorRef v16 = *(const __CFBitVector **)(a3 + 24);
  if (v16)
  {
    uint64_t Count = CFBitVectorGetCount(v16);
    *a6 = Count;
    goto LABEL_9;
  }
  uint64_t Count = 0;
  if (v14)
  {
LABEL_10:
    BOOL v33 = v14;
    CFBitVectorRef v17 = *(const __CFBitVector **)(a3 + 24);
    cf[0] = &stru_1EE53F4B8;
    if (CFBitVectorGetCount(v17) >= Count) {
      uint64_t Count = CFBitVectorGetCount(v17);
    }
    CFRange v18 = 0;
    CFStringRef v19 = &stru_1EE53F4B8;
    if (v17 && Count >= 1)
    {
      unint64_t v20 = (unint64_t)(Count - 1) >> 3;
      if (v20 >= 0x41) {
        unint64_t v20 = 65;
      }
      CFRange v18 = (UInt8 *)malloc_type_calloc(1uLL, v20 + 1, 0xC13B0B56uLL);
      if (v18)
      {
        if ((unint64_t)CFBitVectorGetCount(v17) <= 0x210) {
          v21.length = CFBitVectorGetCount(v17);
        }
        else {
          v21.length = 528;
        }
        v21.location = 0;
        CFBitVectorGetBits(v17, v21, v18);
        FigCreateBase64EncodedStringFromBytes();
        CFStringRef v19 = (const __CFString *)cf[0];
      }
    }
    free(v18);
    MutableCFArrayRef Copy = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v19);
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    BOOL v14 = v33;
    if (!MutableCopy) {
      return FigSignalErrorAt();
    }
LABEL_27:
    CFIndex v25 = *a5;
    if (!*a5)
    {
      CFIndex v25 = CFStringGetLength(MutableCopy) + 4;
      *a5 = v25;
    }
    CFStringPad(MutableCopy, @" ", v25, 0);
    if (v14)
    {
      CFStringAppendFormat(MutableCopy, 0, @"%3ld ->%3ld: ", *(void *)(a3 + 8), *(void *)(a3 + 16));
    }
    else
    {
      CFIndex v26 = *a5;
      CFIndex Length = CFStringGetLength(@"000 ->000: ");
      CFStringPad(MutableCopy, @" ", Length + v26, 0);
    }
    CFStringInsert(a2, *a4, MutableCopy);
    CFIndex v28 = 0;
    *a4 += CFStringGetLength(MutableCopy);
    while (1)
    {
      CFArrayRef v29 = *(const __CFArray **)(a3 + 32);
      if (v29) {
        CFArrayRef v29 = (const __CFArray *)CFArrayGetCount(v29);
      }
      if (v28 >= (uint64_t)v29) {
        break;
      }
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a3 + 32), v28);
      uint64_t v39 = 0;
      *(_OWORD *)CFTypeRef cf = 0u;
      long long v38 = 0u;
      FigAlternateFilterApplyInfoGetStorage(ValueAtIndex, (uint64_t)cf);
      if (!fasb_insertFilteringInfo_iterateToNextNewLine(a2, a4)) {
        break;
      }
      v35[0] = *(_OWORD *)cf;
      v35[1] = v38;
      uint64_t v36 = v39;
      uint64_t inserted = fasb_insertFilteringInfoToDescriptionHelper(a1, a2, v35, a4, a5, a6, 0);
      if (inserted)
      {
LABEL_42:
        uint64_t v23 = inserted;
        goto LABEL_44;
      }
      ++v28;
    }
    if (a7)
    {
      while (fasb_insertFilteringInfo_iterateToNextNewLine(a2, a4))
      {
        uint64_t v39 = 0;
        *(_OWORD *)CFTypeRef cf = 0u;
        long long v38 = 0u;
        uint64_t inserted = fasb_insertFilteringInfoToDescriptionHelper(a1, a2, cf, a4, a5, a6, 0);
        if (inserted) {
          goto LABEL_42;
        }
      }
    }
    uint64_t v23 = 0;
LABEL_44:
    CFRelease(MutableCopy);
    return v23;
  }
LABEL_26:
  CFAllocatorRef v24 = CFGetAllocator(a1);
  MutableCFArrayRef Copy = CFStringCreateMutable(v24, 0);
  if (MutableCopy) {
    goto LABEL_27;
  }

  return FigSignalErrorAt();
}

uint64_t fasb_insertFilteringInfo_iterateToNextNewLine(const __CFString *a1, CFIndex *a2)
{
  v6.location = 0;
  v6.length = 0;
  CFIndex v4 = *a2;
  v7.length = CFStringGetLength(a1) - *a2;
  v7.location = v4;
  uint64_t result = CFStringFindWithOptions(a1, @"\n", v7, 0, &v6);
  if (result)
  {
    *a2 = v6.location + 1;
    return 1;
  }
  return result;
}

uint64_t fasb_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  for (CFIndex i = 0; ; ++i)
  {
    CFArrayRef Count = *(const __CFArray **)(v1 + 64);
    if (Count) {
      CFArrayRef Count = (const __CFArray *)CFArrayGetCount(Count);
    }
    if (i >= (uint64_t)Count) {
      break;
    }
    CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 64), i);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  CFIndex v4 = (const void *)DerivedStorage[3];
  if (v4) {
    CFRelease(v4);
  }
  CFAllocatorRef v5 = (const void *)DerivedStorage[2];
  if (v5) {
    CFRelease(v5);
  }
  CFRange v6 = (const void *)DerivedStorage[4];
  if (v6) {
    CFRelease(v6);
  }
  CFRange v7 = (const void *)DerivedStorage[5];
  if (v7) {
    CFRelease(v7);
  }
  CFStringRef v8 = (const void *)DerivedStorage[6];
  if (v8) {
    CFRelease(v8);
  }
  CFStringRef v9 = (const void *)DerivedStorage[7];
  if (v9) {
    CFRelease(v9);
  }
  CFIndex v10 = (const void *)DerivedStorage[8];
  if (v10) {
    CFRelease(v10);
  }
  CFDictionaryRef v11 = (const void *)DerivedStorage[9];
  if (v11) {
    CFRelease(v11);
  }
  uint64_t v12 = (const void *)DerivedStorage[1];
  if (v12) {
    CFRelease(v12);
  }
  CFArrayRef v13 = (const void *)DerivedStorage[13];
  if (v13) {
    CFRelease(v13);
  }
  BOOL v14 = (const void *)DerivedStorage[14];
  if (v14) {
    CFRelease(v14);
  }
  FigConditionVariableDestroy();

  return FigSimpleMutexDestroy();
}

__CFString *fasb_copyDebugDesc(const void *a1)
{
  return fasb_copyVerboseDescriptionInternal(a1, 1);
}

void fasb_delegateEntryCFArrayReleaseCallBack(const __CFAllocator *a1, void *a2)
{
  fasb_delegateEntryReleaseAndClearValues((uint64_t)a2);

  CFAllocatorDeallocate(a1, a2);
}

uint64_t FigSampleBufferProcessorCreateForVideoRotation(uint64_t a1, int a2, int a3, int a4, const void *a5, void *a6)
{
  if (!a6) {
    goto LABEL_16;
  }
  if (a2 > 179)
  {
    if (a2 == 180 || a2 == 270) {
      goto LABEL_11;
    }
    goto LABEL_16;
  }
  if (!a2)
  {
    if (a4 | a3) {
      goto LABEL_11;
    }
LABEL_16:
    return FigSignalErrorAt();
  }
  if (a2 != 90) {
    goto LABEL_16;
  }
LABEL_11:
  if (a3 && a4 || !a5) {
    goto LABEL_16;
  }
  CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  FigSampleBufferProcessorGetClassID();
  uint64_t v12 = CMDerivedObjectCreate();
  if (v12) {
    return v12;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)uint64_t DerivedStorage = a2;
  *(void *)(DerivedStorage + 40) = a5;
  CFRetain(a5);
  *(void *)(DerivedStorage + 16) = 0;
  int v55 = (void *)(DerivedStorage + 16);
  *(void *)(DerivedStorage + 24) = 0;
  uint64_t v15 = CMBaseObjectGetDerivedStorage();
  CFBitVectorRef v16 = (const void *)*MEMORY[0x1E4F24D70];
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(*(CFDictionaryRef *)(v15 + 40), (const void *)*MEMORY[0x1E4F24D70]);
  CFArrayRef v18 = Value;
  int valuePtr = 0;
  uint64_t v57 = DerivedStorage;
  if (!Value)
  {
LABEL_40:
    CFTypeRef v56 = 0;
    goto LABEL_41;
  }
  CFTypeID v19 = CFGetTypeID(Value);
  if (v19 != CFArrayGetTypeID() || CFArrayGetCount(v18) < 1)
  {
    CFTypeID v31 = CFGetTypeID(v18);
    if (v31 == CFNumberGetTypeID())
    {
      CFTypeRef v56 = CFRetain(v18);
      CFNumberGetValue(v18, kCFNumberSInt32Type, &valuePtr);
      uint64_t v32 = 0;
      while (*(_DWORD *)&kSupportedPixelFormats[v32] != valuePtr)
      {
        v32 += 4;
        if (v32 == 40) {
          goto LABEL_72;
        }
      }
      CFArrayRef v18 = 0;
      goto LABEL_41;
    }
    CFArrayRef v18 = 0;
    goto LABEL_40;
  }
  uint64_t Count = CFArrayGetCount(v18);
  CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v18, 0);
  CFTypeRef v56 = CFRetain(ValueAtIndex);
  MutableCFArrayRef Copy = CFArrayCreateMutableCopy(v11, 0, v18);
  if (!MutableCopy) {
    goto LABEL_84;
  }
  CFArrayRef v18 = MutableCopy;
  if (Count < 1)
  {
    if (CFArrayGetCount(MutableCopy))
    {
      uint64_t DerivedStorage = v57;
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v53 = v15;
    int v23 = 0;
    do
    {
      uint64_t v24 = Count--;
      CFNumberRef v25 = (const __CFNumber *)CFArrayGetValueAtIndex(v18, Count);
      CFNumberGetValue(v25, kCFNumberSInt32Type, &valuePtr);
      uint64_t v26 = 0;
      while (*(_DWORD *)&kSupportedPixelFormats[v26] != valuePtr)
      {
        v26 += 4;
        if (v26 == 40)
        {
          CFArrayRemoveValueAtIndex(v18, Count);
          int v23 = 1;
          break;
        }
      }
    }
    while (v24 > 1);
    uint64_t v15 = v53;
    if (CFArrayGetCount(v18))
    {
      uint64_t DerivedStorage = v57;
      if (v23)
      {
        CFArrayRef v27 = CFDictionaryCreateMutableCopy(v11, 0, *(CFDictionaryRef *)(v53 + 40));
        if (!v27)
        {
          uint64_t v12 = FigSignalErrorAt();
          BOOL v33 = 0;
          goto LABEL_52;
        }
        CFIndex v28 = v27;
        CFDictionarySetValue(v27, v16, v18);
        CFRelease(*(CFTypeRef *)(v53 + 40));
        *(void *)(v53 + 40) = v28;
        CFAllocatorRef v29 = v11;
        CFDictionaryRef v30 = v28;
        goto LABEL_42;
      }
LABEL_41:
      CFDictionaryRef v30 = *(const __CFDictionary **)(v15 + 40);
      CFAllocatorRef v29 = v11;
LABEL_42:
      BOOL v33 = CFDictionaryCreateMutableCopy(v29, 0, v30);
      if (!v33) {
        goto LABEL_83;
      }
LABEL_43:
      uint64_t v34 = v15;
      if (*(_DWORD *)v15 == 270 || *(_DWORD *)v15 == 90)
      {
        CFDictionaryRef v35 = *(const __CFDictionary **)(v15 + 40);
        uint64_t v36 = (const void *)*MEMORY[0x1E4F24E10];
        CFStringRef v37 = CFDictionaryGetValue(v35, (const void *)*MEMORY[0x1E4F24E10]);
        long long v38 = (const void *)*MEMORY[0x1E4F24D08];
        uint64_t v39 = CFDictionaryGetValue(*(CFDictionaryRef *)(v34 + 40), (const void *)*MEMORY[0x1E4F24D08]);
        if (v37 && v39 != 0)
        {
          CFDictionarySetValue(v33, v36, v39);
          CFDictionarySetValue(v33, v38, v37);
        }
      }
      CFDictionaryRemoveValue(v33, (const void *)*MEMORY[0x1E4F24CE0]);
      CFDictionaryRemoveValue(v33, (const void *)*MEMORY[0x1E4F24CF0]);
      CFDictionaryRemoveValue(v33, (const void *)*MEMORY[0x1E4F24CE8]);
      CFDictionaryRemoveValue(v33, (const void *)*MEMORY[0x1E4F24CD0]);
      CFDictionaryRemoveValue(v33, (const void *)*MEMORY[0x1E4F24C98]);
      CFDictionaryRemoveValue(v33, (const void *)*MEMORY[0x1E4F24CC8]);
      uint64_t v12 = 0;
      *(void *)(v34 + 32) = CFRetain(v33);
LABEL_51:
      uint64_t DerivedStorage = v57;
      goto LABEL_52;
    }
  }
  CFRelease(v18);
LABEL_72:
  CFStringRef key = (void *)v16;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v11, 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
LABEL_84:
    uint64_t v12 = FigSignalErrorAt();
    uint64_t DerivedStorage = v57;
    goto LABEL_56;
  }
  CFArrayRef v18 = Mutable;
  for (uint64_t i = 0; i != 40; i += 4)
  {
    int valuePtr = *(_DWORD *)&kSupportedPixelFormats[i];
    CFNumberRef v46 = CFNumberCreate(v11, kCFNumberSInt32Type, &valuePtr);
    if (!v46)
    {
      uint64_t v49 = FigSignalErrorAt();
      goto LABEL_81;
    }
    CFNumberRef v47 = v46;
    CFArrayAppendValue(v18, v46);
    CFRelease(v47);
  }
  CFAllocatorRef v48 = CFGetAllocator(0);
  uint64_t v49 = VTPixelTransferSessionCreate(v48, (VTPixelTransferSessionRef *)(v15 + 16));
  if (v49)
  {
LABEL_81:
    uint64_t v12 = v49;
    BOOL v33 = 0;
    goto LABEL_51;
  }
  CFStringRef v50 = CFDictionaryCreateMutableCopy(v11, 0, *(CFDictionaryRef *)(v15 + 40));
  BOOL v33 = v50;
  uint64_t DerivedStorage = v57;
  if (v50)
  {
    CFDictionarySetValue(v50, key, v18);
    CFArrayRef v51 = CFDictionaryCreateMutableCopy(v11, 0, *(CFDictionaryRef *)(v15 + 40));
    if (v51)
    {
      CFRange v52 = v51;
      CFDictionarySetValue(v51, key, v56);
      CFRelease(*(CFTypeRef *)(v15 + 40));
      *(void *)(v15 + 40) = v52;
      goto LABEL_43;
    }
  }
LABEL_83:
  uint64_t v12 = FigSignalErrorAt();
LABEL_52:
  if (v18) {
    CFRelease(v18);
  }
  if (v33) {
    CFRelease(v33);
  }
LABEL_56:
  if (v56) {
    CFRelease(v56);
  }
  if (!v12)
  {
    if (*v55)
    {
      uint64_t v41 = sbp_vrot_ensurePoolUpToDate(0, 0);
      if (v41) {
        return v41;
      }
    }
    CFAllocatorRef v42 = (VTSessionRef *)(DerivedStorage + 8);
    uint64_t v41 = VTImageRotationSessionCreate();
    if (v41) {
      return v41;
    }
    CFIndex v43 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    if (a4)
    {
      uint64_t v41 = VTSessionSetProperty(*v42, (CFStringRef)*MEMORY[0x1E4F44FF8], (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      if (v41) {
        return v41;
      }
    }
    if (a3 && (uint64_t v41 = VTSessionSetProperty(*v42, (CFStringRef)*MEMORY[0x1E4F45000], *v43), v41))
    {
      return v41;
    }
    else
    {
      uint64_t v12 = 0;
      *a6 = 0;
    }
  }
  return v12;
}

uint64_t sbp_vrot_ensurePoolUpToDate(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFRange v6 = (CVPixelBufferPoolRef *)(DerivedStorage + 48);
  CFAllocatorRef v5 = *(const void **)(DerivedStorage + 48);
  if (v5)
  {
    if (!a2 || *(_DWORD *)(DerivedStorage + 56) == a2) {
      return 0;
    }
    CFRelease(v5);
    CVPixelBufferPoolRef *v6 = 0;
  }
  if (VTAvoidIOSurfaceBackings())
  {
    if (a2)
    {
LABEL_8:
      CFDictionaryRef v8 = 0;
      char v9 = 1;
      goto LABEL_9;
    }
LABEL_15:
    CFArrayRef v13 = *(const void **)(DerivedStorage + 40);
    if (v13)
    {
      MutableCFArrayRef Copy = (__CFDictionary *)CFRetain(v13);
      a2 = 0;
      CFDictionaryRef v8 = 0;
    }
    else
    {
      a2 = 0;
      CFDictionaryRef v8 = 0;
      MutableCFArrayRef Copy = 0;
    }
    goto LABEL_20;
  }
  if (CFDictionaryContainsKey(*(CFDictionaryRef *)(DerivedStorage + 40), (const void *)*MEMORY[0x1E4F24D20]))
  {
    if (a2) {
      goto LABEL_8;
    }
    goto LABEL_15;
  }
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef v8 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a2)
  {
    char v9 = 0;
LABEL_9:
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, *(CFDictionaryRef *)(DerivedStorage + 40));
    int valuePtr = a2;
    CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    if (v11)
    {
      CFNumberRef v12 = v11;
      CFDictionarySetValue(MutableCopy, (const void *)*MEMORY[0x1E4F24D70], v11);
      CFRelease(v12);
    }
    if (v9) {
      goto LABEL_20;
    }
    goto LABEL_12;
  }
  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(v14, 0, *(CFDictionaryRef *)(DerivedStorage + 40));
LABEL_12:
  FigCFDictionarySetValue();
LABEL_20:
  *(_DWORD *)(DerivedStorage + 56) = a2;
  CFAllocatorRef v15 = CFGetAllocator(a1);
  uint64_t v7 = CVPixelBufferPoolCreate(v15, 0, MutableCopy, v6);
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v7;
}

uint64_t sbp_vrot_invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 72) = 0;
  MEMORY[0x199710530](*(void *)(DerivedStorage + 8));
  return 0;
}

void sbp_vrot_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v2 = *(OpaqueVTPixelTransferSession **)(DerivedStorage + 16);
  if (v2)
  {
    VTPixelTransferSessionInvalidate(v2);
    CFRelease(*(CFTypeRef *)(DerivedStorage + 16));
    *(void *)(DerivedStorage + 16) = 0;
  }
  CFAllocatorRef v3 = *(const void **)(DerivedStorage + 24);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 24) = 0;
  }
  CFIndex v4 = *(const void **)(DerivedStorage + 40);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 40) = 0;
  }
  CFAllocatorRef v5 = *(const void **)(DerivedStorage + 48);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 48) = 0;
  }
  if (*(void *)(DerivedStorage + 64))
  {
    FigFormatDescriptionRelease();
    *(void *)(DerivedStorage + 64) = 0;
  }
  CFRange v6 = *(const void **)(DerivedStorage + 32);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 32) = 0;
  }
}

__CFString *sbp_vrot_copyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigSampleBufferProcessor_VideoRotation %p>", a1);
  return Mutable;
}

uint64_t sbp_vrot_copyProperty(const void *a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, @"SampleBufferProcessor_SourcePixelBufferAttributes"))
  {
    CFDictionaryRef v8 = *(const void **)(DerivedStorage + 32);
    if (v8)
    {
LABEL_3:
      CFTypeRef v9 = CFRetain(v8);
LABEL_7:
      uint64_t result = 0;
      *a4 = v9;
      return result;
    }
LABEL_6:
    CFTypeRef v9 = 0;
    goto LABEL_7;
  }
  if (CFEqual(a2, @"SampleBufferProcessor_OutputPixelBufferPool"))
  {
    sbp_vrot_ensurePoolUpToDate(a1, 0);
    CFDictionaryRef v8 = *(const void **)(DerivedStorage + 48);
    if (v8) {
      goto LABEL_3;
    }
    goto LABEL_6;
  }
  return 4294954512;
}

uint64_t sbp_vrot_setOutputCallback(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 72) = a2;
  *(void *)(DerivedStorage + 80) = a3;
  return 0;
}

uint64_t sbp_vrot_processSampleBuffer(const void *a1, opaqueCMSampleBuffer *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  ImageBuffer = CMSampleBufferGetImageBuffer(a2);
  CVPixelBufferRef pixelBufferOut = 0;
  memset(&timingArrayOut, 0, sizeof(timingArrayOut));
  CMSampleBufferRef sampleBufferOut = 0;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(ImageBuffer);
  if (!ImageBuffer) {
    goto LABEL_28;
  }
  int v7 = PixelFormatType;
  uint64_t OutputSampleTimingInfoArray = CMSampleBufferGetOutputSampleTimingInfoArray(a2, 1, &timingArrayOut, 0);
  if (OutputSampleTimingInfoArray) {
    goto LABEL_37;
  }
  if (!*(void *)(DerivedStorage + 16)) {
    sbp_vrot_ensurePoolUpToDate(a1, v7);
  }
  CFAllocatorRef v9 = CFGetAllocator(a1);
  uint64_t OutputSampleTimingInfoArray = CVPixelBufferPoolCreatePixelBuffer(v9, *(CVPixelBufferPoolRef *)(DerivedStorage + 48), &pixelBufferOut);
  if (OutputSampleTimingInfoArray)
  {
LABEL_37:
    uint64_t IOSurfaceBackedCVPixelBuffer = OutputSampleTimingInfoArray;
    goto LABEL_31;
  }
  if (!*(void *)(DerivedStorage + 16)) {
    goto LABEL_18;
  }
  size_t Width = CVPixelBufferGetWidth(pixelBufferOut);
  size_t Height = CVPixelBufferGetHeight(pixelBufferOut);
  CFArrayRef v13 = (CFTypeRef *)(DerivedStorage + 24);
  CFNumberRef v12 = *(__CVBuffer **)(DerivedStorage + 24);
  if (v12)
  {
    BOOL v14 = CVPixelBufferGetIOSurface(v12) == 0;
    BOOL v15 = CVPixelBufferGetIOSurface(pixelBufferOut) == 0;
    if (CVPixelBufferGetPixelFormatType((CVPixelBufferRef)*v13) == v7
      && CVPixelBufferGetWidth((CVPixelBufferRef)*v13) == Width
      && ((int v16 = v14 ^ v15, CVPixelBufferGetHeight((CVPixelBufferRef)*v13) != Height) ? (v17 = 1) : (v17 = v16), v17 != 1))
    {
      if (*v13) {
        goto LABEL_18;
      }
    }
    else
    {
      CFRelease(*v13);
      *CFArrayRef v13 = 0;
    }
  }
  if (Width >> 31 || Height >> 31)
  {
    uint64_t OutputSampleTimingInfoArray = FigSignalErrorAt();
    goto LABEL_37;
  }
  uint64_t IOSurfaceBackedCVPixelBuffer = FigCreateIOSurfaceBackedCVPixelBuffer();
  if (IOSurfaceBackedCVPixelBuffer) {
    goto LABEL_31;
  }
LABEL_18:
  p_CVPixelBufferRef pixelBufferOut = &pixelBufferOut;
  if (*(void *)(DerivedStorage + 16)) {
    p_CVPixelBufferRef pixelBufferOut = (CVPixelBufferRef *)(DerivedStorage + 24);
  }
  uint64_t OutputSampleTimingInfoArray = MEMORY[0x199710550](*(void *)(DerivedStorage + 8), ImageBuffer, *p_pixelBufferOut);
  if (OutputSampleTimingInfoArray) {
    goto LABEL_37;
  }
  unint64_t v20 = *(OpaqueVTPixelTransferSession **)(DerivedStorage + 16);
  if (v20)
  {
    uint64_t OutputSampleTimingInfoArray = VTPixelTransferSessionTransferImage(v20, *(CVPixelBufferRef *)(DerivedStorage + 24), pixelBufferOut);
    if (OutputSampleTimingInfoArray) {
      goto LABEL_37;
    }
  }
  long long v22 = (CMVideoFormatDescriptionRef *)(DerivedStorage + 64);
  CFRange v21 = *(const opaqueCMFormatDescription **)(DerivedStorage + 64);
  if (!v21 || !CMVideoFormatDescriptionMatchesImageBuffer(v21, pixelBufferOut))
  {
    FigFormatDescriptionRelease();
    *long long v22 = 0;
    CFAllocatorRef v23 = CFGetAllocator(a1);
    uint64_t OutputSampleTimingInfoArray = CMVideoFormatDescriptionCreateForImageBuffer(v23, pixelBufferOut, (CMVideoFormatDescriptionRef *)(DerivedStorage + 64));
    if (OutputSampleTimingInfoArray) {
      goto LABEL_37;
    }
  }
  CFAllocatorRef v24 = CFGetAllocator(a1);
  uint64_t OutputSampleTimingInfoArray = CMSampleBufferCreateForImageBuffer(v24, pixelBufferOut, 1u, 0, 0, *v22, &timingArrayOut, &sampleBufferOut);
  if (OutputSampleTimingInfoArray) {
    goto LABEL_37;
  }
  CMPropagateAttachments(a2, sampleBufferOut);
LABEL_28:
  CFNumberRef v25 = *(void (**)(void, void, CMSampleBufferRef))(DerivedStorage + 72);
  if (v25) {
    v25(*(void *)(DerivedStorage + 80), 0, sampleBufferOut);
  }
  uint64_t IOSurfaceBackedCVPixelBuffer = 0;
LABEL_31:
  CVPixelBufferRelease(pixelBufferOut);
  if (sampleBufferOut) {
    CFRelease(sampleBufferOut);
  }
  return IOSurfaceBackedCVPixelBuffer;
}

uint64_t sbp_vrot_finishPendingProcessing()
{
  return 0;
}

uint64_t FigSCCParserCreate(const void *a1, _OWORD *a2, uint64_t a3, int a4, CFAllocatorRef allocator, void *a6)
{
  if (!a1 || !a2 || !a6)
  {
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_10;
  }
  CFNumberRef v12 = CFAllocatorAllocate(allocator, 184, 0);
  CFArrayRef v13 = v12;
  if (!v12)
  {
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_11;
  }
  *((void *)v12 + 22) = 0;
  v12[9] = 0u;
  v12[10] = 0u;
  v12[7] = 0u;
  v12[8] = 0u;
  v12[5] = 0u;
  v12[6] = 0u;
  void v12[3] = 0u;
  v12[4] = 0u;
  v12[1] = 0u;
  v12[2] = 0u;
  _OWORD *v12 = 0u;
  if (allocator) {
    CFTypeRef v14 = CFRetain(allocator);
  }
  else {
    CFTypeRef v14 = 0;
  }
  *CFArrayRef v13 = v14;
  v13[2] = CFRetain(a1);
  long long v15 = a2[1];
  *((_OWORD *)v13 + 9) = *a2;
  *((_OWORD *)v13 + 10) = v15;
  v13[22] = a3;
  *((_DWORD *)v13 + 2) = a4;
  uint64_t v16 = FigCEA608DataInspectorCreate(allocator, v13 + 14);
  if (!v16)
  {
    *a6 = v13;
LABEL_10:
    CFArrayRef v13 = 0;
  }
LABEL_11:
  FigSCCParserRelease(v13);
  return v16;
}

void FigSCCParserRelease(void *a1)
{
  if (a1)
  {
    CFAllocatorRef v2 = *(const __CFAllocator **)a1;
    CFAllocatorRef v3 = (const void *)*((void *)a1 + 2);
    if (v3) {
      CFRelease(v3);
    }
    CFIndex v4 = (const void *)*((void *)a1 + 15);
    if (v4) {
      CFRelease(v4);
    }
    FigCEA608DataInspectorRelease(*((CFAllocatorRef **)a1 + 14));
    sccParserMalformedDataInfoRelease(v2, *((void **)a1 + 17));
    CFAllocatorDeallocate(v2, a1);
    if (v2)
    {
      CFRelease(v2);
    }
  }
}

void sccParserMalformedDataInfoRelease(CFAllocatorRef allocator, void *ptr)
{
  if (ptr)
  {
    CFIndex v4 = (const void *)ptr[1];
    if (v4) {
      CFRelease(v4);
    }
    CFAllocatorRef v5 = (const void *)ptr[2];
    if (v5) {
      CFRelease(v5);
    }
    CFAllocatorDeallocate(allocator, ptr);
  }
}

uint64_t FigSCCParserSetFrameDuration(uint64_t a1, long long *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a1 && (*((_DWORD *)a2 + 3) & 0x1D) == 1)
  {
    CMTimeValue v4 = *(void *)a2;
    CMTimeScale v5 = *((_DWORD *)a2 + 2);
    uint64_t v14 = *(void *)((char *)a2 + 12);
    int v15 = *((_DWORD *)a2 + 5);
    CMTimeMake(&time1, 1001, 30000);
    time2.CFTypeRef value = v4;
    time2.timescale = v5;
    *(void *)&time2.char flags = v14;
    HIDWORD(time2.epoch) = v15;
    if (CMTimeCompare(&time1, &time2)
      && (CMTimeMake(&v11, 100, 2997),
          time2.CFTypeRef value = v4,
          time2.timescale = v5,
          *(void *)&time2.char flags = v14,
          HIDWORD(time2.epoch) = v15,
          CMTimeCompare(&v11, &time2)))
    {
      LODWORD(time2.value) = 0;
      float v6 = modff((float)v5 / (float)v4, (float *)&time2);
      unsigned int v7 = (int)*(float *)&time2.value;
      if (v6 != 0.0 || v7 == 0)
      {
        uint64_t result = FigSignalErrorAt();
        if (result) {
          return result;
        }
        goto LABEL_11;
      }
      if (v7 > 0x1E || ((1 << v7) & 0x43000000) == 0)
      {
LABEL_11:
        uint64_t result = FigSignalErrorAt();
        if (result) {
          return result;
        }
        goto LABEL_15;
      }
    }
    else
    {
      unsigned int v7 = 30;
    }
    *(_DWORD *)(a1 + 104) = v7;
LABEL_15:
    uint64_t result = 0;
    long long v10 = *a2;
    *(void *)(a1 + 96) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 80) = v10;
    return result;
  }

  return FigSignalErrorAt();
}

uint64_t FigSCCParserParse(uint64_t a1)
{
  uint64_t v128 = *MEMORY[0x1E4F143B8];
  size_t valuePtr = 0;
  CFNumberRef number = 0;
  uint64_t v112 = 0;
  if (!a1) {
    goto LABEL_179;
  }
  uint64_t v1 = a1;
  if ((*(unsigned char *)(a1 + 92) & 1) == 0 || *(unsigned char *)(a1 + 12)) {
    goto LABEL_179;
  }
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  CMTimeScale v5 = *(uint64_t (**)(uint64_t, void, void, CFNumberRef *))(v4 + 48);
  if (!v5)
  {
    CFDictionaryRef v8 = 0;
    uint64_t v9 = 4294954514;
    goto LABEL_176;
  }
  uint64_t v6 = v5(CMBaseObject, *MEMORY[0x1E4F1EC50], *MEMORY[0x1E4F1CF80], &number);
  if (v6) {
    goto LABEL_180;
  }
  CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
  if ((valuePtr & 0x8000000000000000) != 0
    || (!valuePtr ? (v7 = 1270757447) : (v7 = 1556728742), (long long v10 = malloc_type_malloc(valuePtr, v7)) == 0))
  {
LABEL_179:
    uint64_t v6 = FigSignalErrorAt();
LABEL_180:
    uint64_t v9 = v6;
    CFDictionaryRef v8 = 0;
    goto LABEL_176;
  }
  int v101 = v10;
  uint64_t v11 = *(void *)(v1 + 16);
  size_t v12 = valuePtr;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  int v15 = *(unsigned int (**)(uint64_t, size_t, void, void *, uint64_t *))(v14 + 8);
  if (!v15 || v15(v11, v12, 0, v101, &v112) || (uint64_t v16 = v112, v112 != valuePtr))
  {
    uint64_t v91 = FigSignalErrorAt();
    goto LABEL_171;
  }
  uint64_t v17 = 0;
  int v18 = 0;
  *(void *)(v1 + 24) = v101;
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 32) = v16;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0;
  *(_DWORD *)(v1 + 64) = 0;
  v100 = (const void *)*MEMORY[0x1E4F1CFD0];
  unsigned int v99 = (const void *)*MEMORY[0x1E4F1CFC8];
  uint64_t v107 = (void *)(v1 + 24);
  int v103 = (CMTime *)(v1 + 80);
  uint64_t v111 = v1;
LABEL_22:
  uint64_t v19 = v16 - v17;
  if (v16 == v17)
  {
    uint64_t v20 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = *v107 + v17;
    while (1)
    {
      int v22 = *(unsigned __int8 *)(v21 + v20);
      if (v22 == 10) {
        break;
      }
      if (v22 == 13)
      {
        if ((unint64_t)(v19 - v20) >= 2 && *(unsigned char *)(v21 + v20 + 1) == 10)
        {
          uint64_t v23 = 2;
          goto LABEL_33;
        }
        break;
      }
      if (v19 == ++v20)
      {
        uint64_t v23 = 0;
        uint64_t v20 = v19;
        goto LABEL_33;
      }
    }
    uint64_t v23 = 1;
  }
LABEL_33:
  *(void *)(v1 + 48) = v17;
  *(void *)(v1 + 56) = v17;
  *(void *)(v1 + 40) = v20;
  int v24 = *(_DWORD *)(v1 + 64);
  *(_DWORD *)(v1 + 64) = v24 + 1;
  *(void *)(v1 + 72) = v20 + v17 + v23;
  if (v24 <= -2)
  {
    uint64_t v91 = FigSignalErrorAt();
    if (v91) {
      goto LABEL_171;
    }
LABEL_36:
    if (!v18)
    {
      __dst.CFTypeRef value = 0;
      *(void *)&__dst.uint64_t timescale = 0;
      *(CMTimeFlags *)((char *)&__dst.flags + 3) = 0;
      time.CFTypeRef value = 0;
      sccLineStreamSkipSpaces(v107);
      sccLineStreamReadData(v107, 0x12uLL, &__dst, (size_t *)&time);
      if (time.value == 18
        && (__dst.value == 0x736972616E656353
          ? (BOOL v37 = *(void *)&__dst.timescale == 0x3156204343535F74)
          : (BOOL v37 = 0),
            v37 ? (BOOL v38 = *(void *)((char *)&__dst.timescale + 3) == 0x302E3156204343) : (BOOL v38 = 0),
            v38 && !sccLineStreamSkipSpaces(v107))
        || (uint64_t v91 = FigSignalErrorAt(), !v91))
      {
        int v18 = 1;
        goto LABEL_141;
      }
      goto LABEL_171;
    }
    sccLineStreamSkipSpaces(v107);
    int v25 = *(_DWORD *)(v1 + 64);
    uint64_t v26 = *(void *)(v1 + 48);
    uint64_t v27 = *(void *)(v1 + 56);
    time.uint64_t timescale = 0;
    time.CFTypeRef value = 0;
    __dst.uint64_t timescale = 0;
    __dst.CFTypeRef value = 0;
    size_t v120 = 0;
    sccLineStreamReadData(v107, 0xBuLL, &__dst, &v120);
    size_t v28 = v120;
    int v102 = v18;
    int v109 = v25;
    if (v120 == 11)
    {
      __str[2] = 0;
      __endptr = 0;
      *(_WORD *)__str = __dst.value;
      unsigned __int8 v29 = strtoul(__str, &__endptr, 10);
      uint64_t v30 = 0;
      if (&__str[2] != __endptr) {
        goto LABEL_161;
      }
      LOBYTE(v9) = v29;
      size_t v28 = 2;
      if (v29 <= 0x63u)
      {
        if (BYTE2(__dst.value) != 58)
        {
          uint64_t v30 = 2;
          goto LABEL_159;
        }
        __str[2] = 0;
        __endptr = 0;
        *(_WORD *)__str = *(_WORD *)((char *)&__dst.value + 3);
        unsigned __int8 v31 = strtoul(__str, &__endptr, 10);
        if (&__str[2] != __endptr)
        {
          uint64_t v30 = 3;
          goto LABEL_161;
        }
        unsigned __int8 v32 = v31;
        uint64_t v30 = 3;
        size_t v28 = 2;
        if (v31 <= 0x3Bu)
        {
          if (BYTE5(__dst.value) != 58)
          {
            uint64_t v30 = 5;
            goto LABEL_159;
          }
          __str[2] = 0;
          __endptr = 0;
          *(_WORD *)__str = HIWORD(__dst.value);
          unsigned __int8 v33 = strtoul(__str, &__endptr, 10);
          if (&__str[2] != __endptr)
          {
            uint64_t v30 = 6;
            goto LABEL_161;
          }
          unsigned __int8 v34 = v33;
          uint64_t v30 = 6;
          size_t v28 = 2;
          if (v33 <= 0x3Bu)
          {
            if (LOBYTE(__dst.timescale) - 60 < 0xFFFFFFFE)
            {
LABEL_49:
              uint64_t v30 = 8;
LABEL_159:
              size_t v28 = 1;
              goto LABEL_162;
            }
            BOOL v35 = LOBYTE(__dst.timescale) == 59;
            CFBooleanRef v36 = *(const __CFBoolean **)(v111 + 120);
            if (v36)
            {
              if (CFBooleanGetValue(v36) != v35) {
                goto LABEL_49;
              }
            }
            else
            {
              if (LOBYTE(__dst.timescale) == 59) {
                CFTypeRef v39 = v100;
              }
              else {
                CFTypeRef v39 = v99;
              }
              if (v39) {
                CFTypeRef v39 = CFRetain(v39);
              }
              *(void *)(v111 + 120) = v39;
            }
            __str[2] = 0;
            __endptr = 0;
            *(_WORD *)__str = *(_WORD *)((char *)&__dst.timescale + 1);
            LOBYTE(v40) = strtoul(__str, &__endptr, 10);
            if (&__str[2] == __endptr)
            {
              int v41 = *(_DWORD *)(v111 + 104);
              if (v41 > v40)
              {
                time.CFTypeRef value = __dst.value;
                time.uint64_t timescale = __dst.timescale;
                goto LABEL_70;
              }
            }
            uint64_t v30 = 9;
LABEL_161:
            size_t v28 = 2;
          }
        }
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
LABEL_162:
    uint64_t v40 = FigSignalErrorAt();
    uint64_t v9 = v40;
    if (v40)
    {
      CFIndex v98 = v28;
      uint64_t v1 = v111;
      sccParserMalformedDataInfoCreateIfNeeded(v111, v40, "The timecode is malformed.", (uint64_t)&__dst, v25, v26, v27, v92, v30, v98, 0);
      int v52 = 0;
LABEL_164:
      size_t v93 = strlen((const char *)&time);
      sccParserMalformedDataInfoCreateIfNeeded(v1, v9, "The timecode overlaps the previous closed caption data.", (uint64_t)&time, v25, v26, v27, v94, 0, v93, v52);
      int v43 = 0;
LABEL_83:
      if (*(void *)(v1 + 136) && sccParserCallMalformedDataCallback(v1))
      {
        int v43 = *(_DWORD *)(v1 + 132);
      }
      else if (v9)
      {
        goto LABEL_175;
      }
      int v108 = 0;
      int32_t v110 = v43;
      uint64_t v54 = 0;
      *(void *)__str = 0;
      int v106 = *(_DWORD *)(v1 + 8);
      int v55 = __str;
      if (v106) {
        int v55 = 0;
      }
      v104 = (__CFString **)v55;
      uint64_t v105 = 0;
      uint64_t v56 = 0xFFFFFFFFLL;
      for (uint64_t i = 0xFFFFFFFFLL; ; uint64_t i = flags)
      {
        *(_WORD *)bytes = 0;
        CMTime __dst = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
        sccLineStreamSkipSpaces(v107);
        int v58 = *(_DWORD *)(v1 + 64);
        uint64_t v61 = v1 + 48;
        uint64_t v59 = *(void *)(v1 + 48);
        uint64_t v60 = *(void *)(v61 + 8);
        __int16 v119 = 0;
        char v118 = 0;
        *(_DWORD *)__s = 0;
        time.CFTypeRef value = 0;
        *(void *)&time.uint64_t timescale = 0;
        char v122 = 0;
        int v121 = 0;
        size_t v120 = 0;
        sccLineStreamReadData(v107, 4uLL, &v121, &v120);
        size_t v62 = v120;
        if (v120 == 2 || v120 == 4)
        {
          v125[0] = 0;
          __endptr = 0;
          *(_WORD *)v124 = v121;
          unsigned __int8 v74 = strtoul(v124, &__endptr, 16);
          if (v125 == __endptr)
          {
            unsigned __int8 v75 = v74;
            if (v62 != 4)
            {
              unsigned __int8 v77 = 0;
              unint64_t v70 = 1;
              goto LABEL_101;
            }
            v125[0] = 0;
            __endptr = 0;
            *(_WORD *)v124 = HIWORD(v121);
            unsigned __int8 v76 = strtoul(v124, &__endptr, 16);
            if (v125 == __endptr)
            {
              unsigned __int8 v77 = v76;
              unint64_t v70 = 2;
LABEL_101:
              __int16 v119 = v75 | (v77 << 8);
              *(_DWORD *)__s = v121;
              char v118 = v122;
              goto LABEL_102;
            }
            uint64_t v63 = 2;
          }
          else
          {
            uint64_t v63 = 0;
          }
          size_t v62 = 2;
        }
        else
        {
          uint64_t v63 = 0;
          if (!v120)
          {
            if (!v54)
            {
              uint64_t v9 = 0;
              int v18 = v102;
              uint64_t v1 = v111;
              goto LABEL_138;
            }
            *((void *)v54 + 3) = v105 - *((void *)v54 + 2);
            int v86 = v108;
            *((_DWORD *)v54 + 15) = v108;
            uint64_t v1 = v111;
            uint64_t v87 = *(uint64_t (**)(_OWORD *, void))(v111 + 152);
            int v18 = v102;
            if (v87)
            {
              uint64_t v88 = v87(v54, *(void *)(v111 + 176));
              if (v88)
              {
                uint64_t v9 = v88;
                goto LABEL_138;
              }
              int v86 = *((_DWORD *)v54 + 15);
            }
            *(_DWORD *)(v111 + 132) = *((_DWORD *)v54 + 8) + v86;
            sccParserCaptionDataInfoRelease(*(CFAllocatorRef *)v111, v54);
            uint64_t v54 = 0;
            uint64_t v9 = 0;
            goto LABEL_138;
          }
        }
        uint64_t v64 = FigSignalErrorAt();
        if (v64)
        {
          uint64_t v9 = v64;
          CFIndex v97 = v62;
          uint64_t v66 = v111;
          sccParserMalformedDataInfoCreateIfNeeded(v111, v64, "The byte characters are malformed.", (uint64_t)&v121, v58, v59, v60, v65, v63, v97, 0);
          goto LABEL_95;
        }
        unint64_t v70 = 0;
LABEL_102:
        uint64_t v9 = FigCEA608DataInspectorInspectBytePair(*(void *)(v111 + 112), &v119, v70, (uint64_t)&time, v104);
        if (!v9)
        {
          uint64_t v68 = v60;
          *(_WORD *)bytes = v119;
          int value_high = HIDWORD(time.value);
          uint64_t timescale = time.timescale;
          uint64_t flags = time.flags;
          goto LABEL_104;
        }
        uint64_t v66 = v111;
LABEL_95:
        size_t v67 = strlen(__s);
        uint64_t v68 = v60;
        sccParserMalformedDataInfoCreateIfNeeded(v66, v9, "The byte characters are not valid.", (uint64_t)__s, v58, v59, v60, v69, 0, v67, 0);
        unint64_t v70 = 0;
        int value_high = 0;
        uint64_t timescale = 0;
        uint64_t flags = 0;
LABEL_104:
        uint64_t v1 = v111;
        if (*(void *)(v111 + 136) && sccParserCallMalformedDataCallback(v111))
        {
          uint64_t timescale = 0xFFFFFFFFLL;
          uint64_t flags = 0xFFFFFFFFLL;
          int32_t v78 = v110;
        }
        else
        {
          if (v9) {
            goto LABEL_148;
          }
          if (v56 == timescale && i == flags)
          {
            uint64_t flags = i;
            uint64_t timescale = v56;
            int v79 = v108;
            int32_t v78 = v110;
            if (!v54) {
              goto LABEL_146;
            }
          }
          else
          {
            if (v54)
            {
              *((void *)v54 + 3) = v105 - *((void *)v54 + 2);
              int32_t v78 = v110;
              *((_DWORD *)v54 + 15) = v108;
              CMAudioFormatDescriptionRef v80 = *(uint64_t (**)(_OWORD *, void))(v111 + 152);
              if (v80)
              {
                uint64_t v81 = v80(v54, *(void *)(v111 + 176));
                if (v81)
                {
                  uint64_t v9 = v81;
                  goto LABEL_148;
                }
              }
              sccParserCaptionDataInfoRelease(*(CFAllocatorRef *)v111, v54);
              int v79 = 0;
            }
            else
            {
              int v79 = v108;
              int32_t v78 = v110;
            }
            CMTime time = *v103;
            CMTimeMultiply(&__dst, &time, v78);
            CFAllocatorRef v82 = *(const __CFAllocator **)v111;
            CMTime time = __dst;
            uint64_t v83 = CFAllocatorAllocate(v82, 80, 0);
            uint64_t v54 = v83;
            if (!v83) {
              goto LABEL_145;
            }
            v83[3] = 0u;
            v83[4] = 0u;
            v83[1] = 0u;
            v83[2] = 0u;
            *uint64_t v83 = 0u;
            CFMutableDataRef Mutable = CFDataCreateMutable(v82, 0);
            *((void *)v54 + 8) = Mutable;
            if (!Mutable
              || (v106 & 1) == 0
              && (CFMutableArrayRef v85 = CFArrayCreateMutable(v82, 0, MEMORY[0x1E4F1D510]), (*((void *)v54 + 9) = v85) == 0))
            {
LABEL_145:
              uint64_t v9 = FigSignalErrorAt();
              sccParserCaptionDataInfoRelease(v82, v54);
              uint64_t v1 = v111;
              if (!v9) {
LABEL_146:
              }
                uint64_t v9 = FigSignalErrorAt();
              uint64_t v54 = 0;
LABEL_148:
              int v18 = v102;
LABEL_138:
              sccParserCaptionDataInfoRelease(*(CFAllocatorRef *)v1, v54);
              if (*(void *)__str) {
                CFRelease(*(CFTypeRef *)__str);
              }
              if (v9) {
                goto LABEL_175;
              }
LABEL_141:
              uint64_t v17 = *(void *)(v1 + 72);
              uint64_t v16 = *(void *)(v1 + 32);
              goto LABEL_22;
            }
            *(_DWORD *)uint64_t v54 = value_high;
            *((_DWORD *)v54 + 1) = timescale;
            *((_DWORD *)v54 + 2) = flags;
            *((void *)v54 + 2) = v68;
            *((_DWORD *)v54 + 8) = v78;
            *(CMTime *)((char *)v54 + 36) = time;
            uint64_t v1 = v111;
          }
          CFDataAppendBytes(*((CFMutableDataRef *)v54 + 8), bytes, v70);
          if ((v106 & 1) == 0)
          {
            CFArrayAppendValue(*((CFMutableArrayRef *)v54 + 9), *(const void **)__str);
            if (*(void *)__str)
            {
              CFRelease(*(CFTypeRef *)__str);
              *(void *)__str = 0;
            }
          }
          uint64_t v105 = *(void *)(v1 + 56);
          int v108 = v79 + 1;
        }
        int32_t v110 = v78 + 1;
        uint64_t v56 = timescale;
      }
    }
    BOOL v35 = 0;
    unsigned __int8 v32 = 0;
    unsigned __int8 v34 = 0;
    int v41 = *(_DWORD *)(v111 + 104);
LABEL_70:
    int v42 = 60 * v41;
    int v43 = v41 * v34 + v40 + (60 * v9 + v32) * 60 * v41;
    if (v35)
    {
      int v44 = 600 * v41;
      int v45 = v43 / (600 * v41);
      int v46 = -18 * v45;
      int v47 = v43 - v45 * v44;
      int v48 = v47 / v42;
      if (v47 >= 2 && v48 >= 1)
      {
        int v89 = v46 - 2 * v48 + 2;
        unsigned int v90 = v47 % v42;
        if (v90 < 2) {
          int v46 = v89 + ~v90;
        }
        else {
          int v46 = v89 - 2;
        }
      }
      uint64_t v50 = v26;
      v43 += v46;
    }
    else
    {
      uint64_t v50 = v26;
    }
    uint64_t v51 = v111;
    int v52 = *(_DWORD *)(v111 + 132) - v43;
    if (v52 >= 1)
    {
      uint64_t v40 = FigSignalErrorAt();
      uint64_t v9 = v40;
      if (v40)
      {
        uint64_t v1 = v111;
        int v25 = v109;
        uint64_t v26 = v50;
        goto LABEL_164;
      }
      int v43 = 0;
      BOOL v35 = 0;
      unsigned __int8 v32 = 0;
      unsigned __int8 v34 = 0;
      uint64_t v51 = v111;
    }
    uint64_t v53 = *(uint64_t (**)(void, void, void, void, BOOL, void))(v51 + 144);
    if (v53) {
      uint64_t v9 = v53(v9, v32, v34, v40, v35, *(void *)(v51 + 176));
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v1 = v51;
    goto LABEL_83;
  }
  if (v20 + v23)
  {
    if (!v20) {
      goto LABEL_141;
    }
    goto LABEL_36;
  }
  v95 = *(uint64_t (**)(void))(v1 + 160);
  if (!v95 || (uint64_t v91 = v95(*(void *)(v1 + 176)), !v91))
  {
    uint64_t v9 = 0;
    *(unsigned char *)(v1 + 12) = 1;
    goto LABEL_175;
  }
LABEL_171:
  uint64_t v9 = v91;
LABEL_175:
  CFDictionaryRef v8 = v101;
LABEL_176:
  free(v8);
  if (number) {
    CFRelease(number);
  }
  return v9;
}

uint64_t FigSCCParserCaptionDataInfoGetChannel(_DWORD *a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  if (a2) {
    *a2 = *a1;
  }
  if (a3) {
    *a3 = a1[1];
  }
  if (a4) {
    *a4 = a1[2];
  }
  return 0;
}

uint64_t FigSCCParserCaptionDataInfoGetFrame(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 32);
  }
  if (a3) {
    *a3 = *(_DWORD *)(a1 + 60);
  }
  return 0;
}

uint64_t FigSCCParserCaptionDataInfoGetDTS(uint64_t a1, uint64_t a2)
{
  if (!a1) {
    return FigSignalErrorAt();
  }
  if (a2)
  {
    long long v2 = *(_OWORD *)(a1 + 36);
    *(void *)(a2 + 16) = *(void *)(a1 + 52);
    *(_OWORD *)a2 = v2;
  }
  return 0;
}

uint64_t FigSCCParserCaptionDataInfoGetCaptionData(uint64_t a1, void *a2)
{
  if (!a1 || !a2) {
    return FigSignalErrorAt();
  }
  *a2 = *(void *)(a1 + 64);
  return 0;
}

uint64_t sccLineStreamSkipSpaces(void *a1)
{
  uint64_t v1 = a1;
  char __dst = 0;
  size_t v3 = 0;
  while (1)
  {
    sccLineStreamReadData(a1, 1uLL, &__dst, &v3);
    if (!v3) {
      return 0;
    }
    if (__dst != 9 && __dst != 32) {
      break;
    }
    char __dst = 0;
    size_t v3 = 0;
    a1 = v1;
  }
  v1[4] -= v3;
  return 1;
}

void *sccLineStreamReadData(void *result, size_t a2, void *__dst, size_t *a4)
{
  uint64_t v5 = result[4];
  if (result[3] - v5 + result[2] >= a2) {
    size_t v6 = a2;
  }
  else {
    size_t v6 = result[3] - v5 + result[2];
  }
  if (v6)
  {
    malloc_type_id_t v7 = result;
    uint64_t result = memcpy(__dst, (const void *)(*result + v5), v6);
    v7[4] += v6;
  }
  *a4 = v6;
  return result;
}

uint64_t sccParserCallMalformedDataCallback(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 136);
  if (!v1) {
    return 1;
  }
  size_t v3 = *(uint64_t (**)(void, void, void, void, void, void, void, void, void))(a1 + 168);
  if (v3)
  {
    uint64_t v4 = v3(*v1, *((void *)v1 + 1), *((void *)v1 + 2), v1[6], *((void *)v1 + 4), *((void *)v1 + 5), *((void *)v1 + 6), v1[14], *(void *)(a1 + 176));
    uint64_t v1 = *(unsigned int **)(a1 + 136);
  }
  else
  {
    uint64_t v4 = 1;
  }
  sccParserMalformedDataInfoRelease(*(CFAllocatorRef *)a1, v1);
  *(void *)(a1 + 136) = 0;
  return v4;
}

void sccParserMalformedDataInfoCreateIfNeeded(uint64_t a1, int a2, const char *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, CFIndex a10, int a11)
{
  if ((a2 + 16563) >= 0xFFFFFFFE && !*(void *)(a1 + 136))
  {
    CFAllocatorRef v17 = *(const __CFAllocator **)a1;
    int v18 = CFAllocatorAllocate(*(CFAllocatorRef *)a1, 64, 0);
    uint64_t v19 = v18;
    if (!v18) {
      goto LABEL_10;
    }
    v18[2] = 0u;
    v18[3] = 0u;
    *int v18 = 0u;
    v18[1] = 0u;
    CFStringRef v20 = CFStringCreateWithCString(v17, a3, 0x8000100u);
    *((void *)v19 + 1) = v20;
    if (!v20) {
      goto LABEL_10;
    }
    CFStringRef v21 = CFStringCreateWithBytes(v17, (const UInt8 *)(a4 + a9), a10, 0x8000100u, 0);
    *((void *)v19 + 2) = v21;
    if (v21)
    {
      *(_DWORD *)uint64_t v19 = a2;
      *((_DWORD *)v19 + 6) = a5;
      *((void *)v19 + 4) = a6;
      *((void *)v19 + 5) = a9 + a7;
      *((void *)v19 + 6) = a10;
      *((_DWORD *)v19 + 14) = a11;
      *(void *)(a1 + 136) = v19;
      uint64_t v19 = 0;
    }
    else
    {
LABEL_10:
      FigSignalErrorAt();
    }
    sccParserMalformedDataInfoRelease(v17, v19);
  }
}

void sccParserCaptionDataInfoRelease(CFAllocatorRef allocator, void *ptr)
{
  if (ptr)
  {
    uint64_t v4 = (const void *)ptr[8];
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = (const void *)ptr[9];
    if (v5) {
      CFRelease(v5);
    }
    CFAllocatorDeallocate(allocator, ptr);
  }
}

uint64_t FigVenueDescriptionMetadataSupplierCreate(uint64_t a1, const void *a2, const void *a3, void *a4)
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (!a2 || !a4) {
    goto LABEL_17;
  }
  FigStaticMetadataSupplierGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7)
  {
LABEL_18:
    uint64_t v15 = v7;
    goto LABEL_14;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v11 = CFDateCreate(v9, Current);
  *(void *)(DerivedStorage + 88) = v11;
  if (!v11
    || (uint64_t v12 = FigSimpleMutexCreate(), (*(void *)(DerivedStorage + 32) = v12) == 0)
    || (uint64_t v13 = FigDispatchQueueCreateWithPriority(), (*(void *)(DerivedStorage + 40) = v13) == 0))
  {
LABEL_17:
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_18;
  }
  *(void *)(DerivedStorage + 48) = 0;
  *(void *)(DerivedStorage + 56) = DerivedStorage + 48;
  *(void *)uint64_t DerivedStorage = CFRetain(a2);
  if (a3) {
    CFTypeRef v14 = CFRetain(a3);
  }
  else {
    CFTypeRef v14 = 0;
  }
  *(void *)(DerivedStorage + 8) = v14;
  uint64_t v7 = FigRetainProxyCreate();
  if (v7) {
    goto LABEL_18;
  }
  *(_DWORD *)(DerivedStorage + 16) = 1;
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  if (!FigNotificationCenterAddWeakListener())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  vdms_reevaluateProcessingStateAndNotify(0, 0);
  uint64_t v15 = 0;
  *a4 = 0;
LABEL_14:
  if (dword_1E9351250)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v15;
}

void vdms_reevaluateProcessingStateAndNotify(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  int v6 = *(_DWORD *)(DerivedStorage + 16);
  if (a2 && v6 == 6) {
    *(_DWORD *)(DerivedStorage + 16) = 4;
  }
  uint64_t v7 = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (2)
  {
    int v9 = *(_DWORD *)(v5 + 16);
    switch(v9)
    {
      case 1:
        LOBYTE(theArray) = 0;
        uint64_t v10 = *(void *)v5;
        uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v11) {
          uint64_t v12 = v11;
        }
        else {
          uint64_t v12 = 0;
        }
        int v22 = *(uint64_t (**)(uint64_t, __CFString *, CFArrayRef *))(v12 + 24);
        if (!v22)
        {
          uint64_t v23 = 4294954514;
LABEL_21:
          CFTypeRef cf = 0;
          FigCreateErrorForOSStatus(v23, (CFErrorRef *)&cf);
          uint64_t v7 = (__CFError *)cf;
          vdms_RTCReportingUpdatePayloadTransferError(a1, (__CFError *)cf);
          int v24 = 1;
          int v25 = 7;
          goto LABEL_65;
        }
        uint64_t v23 = v22(v10, @"assetProperty_HLSMetadata", &theArray);
        if (v23) {
          goto LABEL_21;
        }
        if (!(_BYTE)theArray) {
          goto LABEL_73;
        }
        int v24 = 0;
        int v25 = 4;
        goto LABEL_65;
      case 3:
        if (!*(void *)(v5 + 64)) {
          goto LABEL_76;
        }
        CFTypeRef cf = 0;
        MEMORY[0x19970E930](*(void *)(v5 + 32));
        uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(*(void *)(v5 + 64));
        uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v14) {
          uint64_t v15 = v14;
        }
        else {
          uint64_t v15 = 0;
        }
        unsigned __int8 v29 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v15 + 48);
        if (v29) {
          v29(FigBaseObject, @"FBSP_Metadata", v8, &cf);
        }
        MEMORY[0x19970E910](*(void *)(v5 + 32));
        *(_DWORD *)(v5 + 16) = 4;
        if (cf) {
          CFRelease(cf);
        }
        continue;
      case 4:
        uint64_t v64 = 0;
        CFArrayRef theArray = 0;
        uint64_t v16 = CMBaseObjectGetDerivedStorage();
        if (*(_DWORD *)(v16 + 16) != 4) {
          goto LABEL_41;
        }
        CFAllocatorRef v17 = (void *)v16;
        uint64_t v18 = *(void *)(v16 + 64);
        if (v18)
        {
          uint64_t v19 = FigBytePumpGetFigBaseObject(v18);
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v20) {
            uint64_t v21 = v20;
          }
          else {
            uint64_t v21 = 0;
          }
          uint64_t v30 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFArrayRef *))(v21 + 48);
          if (!v30) {
            goto LABEL_56;
          }
          uint64_t v31 = v30(v19, @"FBSP_Metadata", v8, &theArray);
          if (v31) {
            goto LABEL_57;
          }
        }
        else
        {
          uint64_t v26 = *v17;
          uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v27) {
            uint64_t v28 = v27;
          }
          else {
            uint64_t v28 = 0;
          }
          BOOL v38 = *(uint64_t (**)(uint64_t, __CFString *, char *, uint64_t *, void))(v28 + 8);
          if (!v38)
          {
LABEL_56:
            uint64_t v31 = 4294954514;
LABEL_57:
            CFTypeRef cf = 0;
            goto LABEL_58;
          }
          uint64_t v31 = v38(v26, @"assetProperty_HLSMetadata", (char *)&v64 + 4, &v64, 0);
          if (v31) {
            goto LABEL_57;
          }
          uint64_t v31 = v64;
          if (v64) {
            goto LABEL_57;
          }
          if (HIDWORD(v64) != 2)
          {
            CFTypeRef cf = 0;
            uint64_t v31 = 4294951443;
            goto LABEL_58;
          }
          uint64_t CMBaseObject = FigAssetGetCMBaseObject(*v17);
          uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v40) {
            uint64_t v41 = v40;
          }
          else {
            uint64_t v41 = 0;
          }
          int v42 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFArrayRef *))(v41 + 48);
          if (!v42) {
            goto LABEL_56;
          }
          uint64_t v31 = v42(CMBaseObject, @"assetProperty_HLSMetadata", v8, &theArray);
          if (v31) {
            goto LABEL_57;
          }
          if (!theArray) {
            goto LABEL_77;
          }
        }
        CFIndex v32 = 0;
        do
        {
          CFIndex Count = (CFIndex)theArray;
          if (theArray) {
            CFIndex Count = CFArrayGetCount(theArray);
          }
          if (v32 >= Count)
          {
LABEL_41:
            uint64_t v7 = 0;
            goto LABEL_59;
          }
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v32);
          CFDictionaryGetValue(ValueAtIndex, @"key");
          ++v32;
        }
        while (!FigCFEqual());
        CFArrayRef Value = CFDictionaryGetValue(ValueAtIndex, @"value");
        if (Value)
        {
          CFTypeID v36 = CFGetTypeID(Value);
          if (v36 == CFDataGetTypeID())
          {
            char v37 = 0;
            uint64_t v7 = 0;
            goto LABEL_60;
          }
        }
        CFTypeRef cf = 0;
        uint64_t v31 = 4294951441;
LABEL_58:
        FigCreateErrorForOSStatus(v31, (CFErrorRef *)&cf);
        uint64_t v7 = (__CFError *)cf;
LABEL_59:
        char v37 = 1;
LABEL_60:
        if (theArray) {
          CFRelease(theArray);
        }
        if (!v7)
        {
          if (v37)
          {
LABEL_77:
            uint64_t v7 = 0;
LABEL_78:
            int v9 = 6;
            goto LABEL_79;
          }
          vdms_updateResourcesAndTransferMetadata(a1);
          uint64_t v7 = 0;
          int v24 = 0;
          int v25 = 5;
LABEL_65:
          *(_DWORD *)(v5 + 16) = v25;
          if (v24)
          {
LABEL_73:
            int v9 = *(_DWORD *)(v5 + 16);
            goto LABEL_80;
          }
          continue;
        }
        if (*(void *)(v5 + 64)
          || !FigCFErrorIsEqualToOSStatus(v7, @"CoreMediaErrorDomain", -12785))
        {
LABEL_75:
          vdms_RTCReportingUpdatePayloadTransferError(a1, v7);
          goto LABEL_76;
        }
        FigRetainProxyRetain();
        uint64_t v59 = *(void *)v5;
        uint64_t v60 = *(void *)(v5 + 72);
        uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v61) {
          uint64_t v62 = v61;
        }
        else {
          uint64_t v62 = 0;
        }
        uint64_t v63 = *(unsigned int (**)(uint64_t, void, uint64_t))(v62 + 72);
        if (v63 && !v63(v59, vdms_pumpTransferCallback, v60))
        {
          int v9 = 2;
        }
        else
        {
          FigRetainProxyRelease();
LABEL_76:
          int v9 = 7;
        }
LABEL_79:
        *(_DWORD *)(v5 + 16) = v9;
LABEL_80:
        if (v6 == v9) {
          goto LABEL_100;
        }
        if (v9 == 7) {
          int v44 = 2;
        }
        else {
          int v44 = v9 == 6;
        }
        BOOL v45 = v44 == (v6 == 6);
        if (v6 == 7) {
          BOOL v45 = v9 == 7;
        }
        if (v45) {
          goto LABEL_100;
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v8, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        if (Mutable)
        {
          CFMutableDictionaryRef v47 = Mutable;
          FigCFDictionarySetInt32();
          FigCFDictionarySetValue();
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
          if (v9 != 6) {
            goto LABEL_99;
          }
          uint64_t v48 = CMBaseObjectGetDerivedStorage();
          if (!a1) {
            goto LABEL_113;
          }
          uint64_t v49 = v48;
          if (!*(void *)(v48 + 80)) {
            goto LABEL_99;
          }
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFDateRef v51 = CFDateCreate(v8, Current);
          if (v51)
          {
            CFDateRef v52 = v51;
            double TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v51, *(CFDateRef *)(v49 + 96));
            uint64_t v54 = *(void *)(v49 + 80);
            if (v54)
            {
              double v55 = TimeIntervalSinceDate;
              uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v56) {
                uint64_t v57 = v56;
              }
              else {
                uint64_t v57 = 0;
              }
              int v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v57 + 56);
              if (v58) {
                v58(v54, 0x1EE582D38, 0x1EE585718, (uint64_t)(v55 * 1000.0), 0);
              }
            }
            CFRelease(v52);
          }
          else
          {
LABEL_113:
            FigSignalErrorAt();
          }
LABEL_99:
          CFRelease(v47);
LABEL_100:
          if (v7) {
LABEL_101:
          }
            CFRelease(v7);
        }
        else
        {
          FigSignalErrorAt();
          if (v7) {
            goto LABEL_101;
          }
        }
        return;
      case 5:
        vdms_updateResourcesAndTransferMetadata(a1);
        int AllDataChannelResourceProcessingStatus = vdms_getAllDataChannelResourceProcessingStatus();
        if (AllDataChannelResourceProcessingStatus == 2) {
          goto LABEL_78;
        }
        if (AllDataChannelResourceProcessingStatus != 3) {
          goto LABEL_73;
        }
        CFTypeRef cf = 0;
        FigCreateErrorForOSStatus(4294951440, (CFErrorRef *)&cf);
        uint64_t v7 = (__CFError *)cf;
        goto LABEL_75;
      case 6:
        if (vdms_getAllDataChannelResourceProcessingStatus() != 1) {
          goto LABEL_73;
        }
        int v9 = 5;
        goto LABEL_79;
      default:
        goto LABEL_80;
    }
  }
}

void vdms_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  vdms_removeFVTNotificationListeners(*(CFArrayRef *)(DerivedStorage + 24));
  CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  if (!FigNotificationCenterRemoveWeakListener())
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  uint64_t v3 = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void **)(v3 + 48);
  if (v4)
  {
    uint64_t v5 = (void *)*v4;
    if (*v4)
    {
      do
      {
        int v6 = v5;
        v5[1] = v4[1];
        *(void *)v4[1] = v5;
        vdms_destroyResourceEntry(v4);
        uint64_t v5 = (void *)*v6;
        uint64_t v4 = v6;
      }
      while (*v6);
    }
    else
    {
      int v6 = *(void **)(v3 + 48);
    }
    uint64_t v7 = (void *)v6[1];
    *(void *)(v3 + 56) = v7;
    void *v7 = 0;
    vdms_destroyResourceEntry(v6);
  }
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(const void **)(v8 + 80);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(v9 + 80) = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 24);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 96);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 96) = 0;
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 88);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 88) = 0;
  }
  FigBytePumpGetFigBaseObject(*(void *)(DerivedStorage + 64));
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v17 = v16 ? v16 : 0;
    uint64_t v18 = *(void (**)(uint64_t))(v17 + 24);
    if (v18) {
      v18(v15);
    }
  }
  FigBytePumpRelease(*(CFTypeRef *)(DerivedStorage + 64));
  FigRetainProxyRelease();
  *(void *)(DerivedStorage + 72) = 0;
  uint64_t v19 = *(const void **)(DerivedStorage + 8);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(DerivedStorage + 8) = 0;
  }
  FigSimpleMutexDestroy();
  uint64_t v20 = *(NSObject **)(DerivedStorage + 40);
  if (v20)
  {
    dispatch_release(v20);
    *(void *)(DerivedStorage + 40) = 0;
  }
}

__CFString *vdms_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigVenueDescriptionMetadataSupplier %p: ", a1);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  CFStringAppendFormat(Mutable, 0, @"VideoTargetArray %@,", *(void *)(DerivedStorage + 24), 0);
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  CFStringAppendFormat(Mutable, 0, @">");
  return Mutable;
}

uint64_t vdms_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFArrayRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  if (CFEqual(@"SMS_VideoTargetArray", a2))
  {
    CFArrayRef v8 = *(const __CFArray **)(DerivedStorage + 24);
    if (!v8)
    {
      uint64_t v12 = 0;
      *a4 = 0;
      goto LABEL_12;
    }
    CFArrayRef Copy = CFArrayCreateCopy(a3, v8);
  }
  else
  {
    if (!CFEqual(@"SMS_ProcessingStatus", a2))
    {
      uint64_t v12 = 4294951446;
      goto LABEL_12;
    }
    int v10 = *(_DWORD *)(DerivedStorage + 16);
    if (v10 == 7) {
      int v11 = 2;
    }
    else {
      int v11 = v10 == 6;
    }
    int valuePtr = v11;
    CFArrayRef Copy = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  }
  uint64_t v12 = 0;
  *a4 = Copy;
LABEL_12:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  return v12;
}

uint64_t vdms_setProperty(const void *a1, const void *a2, CFArrayRef Copy)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  if (!CFEqual(@"SMS_VideoTargetArray", a2))
  {
    if (!CFEqual(@"SMS_ReportingAgent", a2))
    {
      uint64_t v17 = 4294951446;
      goto LABEL_73;
    }
    if (Copy)
    {
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      if (v10)
      {
        uint64_t v11 = v10;
        if (!*(void *)(v10 + 80))
        {
          CFTypeRef v12 = CFRetain(Copy);
          *(void *)(v11 + 80) = v12;
          if (!v12)
          {
            uint64_t v17 = 4294955296;
            goto LABEL_73;
          }
          CFTypeRef v13 = v12;
          uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v14) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v28 = *(uint64_t (**)(CFTypeRef, void))(v15 + 104);
          if (!v28)
          {
            uint64_t v17 = 4294954514;
            goto LABEL_73;
          }
          uint64_t v16 = v28(v13, 0);
          goto LABEL_13;
        }
      }
      else
      {
        FigSignalErrorAt();
      }
      uint64_t v17 = 0;
      goto LABEL_73;
    }
LABEL_12:
    uint64_t v16 = FigSignalErrorAt();
LABEL_13:
    uint64_t v17 = v16;
    goto LABEL_73;
  }
  if (Copy)
  {
    CFTypeID v7 = CFGetTypeID(Copy);
    if (v7 == CFArrayGetTypeID())
    {
      uint64_t v47 = DerivedStorage;
      uint64_t v8 = CMBaseObjectGetDerivedStorage();
      CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFArrayRef Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Copy);
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  uint64_t v47 = DerivedStorage;
  uint64_t v8 = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
LABEL_15:
  CFArrayRef v18 = *(const __CFArray **)(v8 + 24);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v20 = Mutable;
    CFMutableArrayRef v21 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
    if (v21)
    {
      uint64_t v17 = (uint64_t)v21;
      if (!FigCFEqual())
      {
        CFIndex v22 = 0;
        if (!v18) {
          goto LABEL_20;
        }
LABEL_19:
        for (CFIndex i = CFArrayGetCount(v18); v22 < i; CFIndex i = 0)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v18, v22);
          if (!FigCFArrayContainsValue()) {
            CFArrayAppendValue(v20, ValueAtIndex);
          }
          ++v22;
          if (v18) {
            goto LABEL_19;
          }
LABEL_20:
          ;
        }
        CFIndex v25 = 0;
        if (!Copy) {
          goto LABEL_28;
        }
LABEL_27:
        for (CFIndex j = CFArrayGetCount(Copy); v25 < j; CFIndex j = 0)
        {
          uint64_t v27 = CFArrayGetValueAtIndex(Copy, v25);
          if (!FigCFArrayContainsValue()) {
            CFArrayAppendValue((CFMutableArrayRef)v17, v27);
          }
          ++v25;
          if (Copy) {
            goto LABEL_27;
          }
LABEL_28:
          ;
        }
      }
LABEL_43:
      vdms_removeFVTNotificationListeners(v20);
      if (!v17) {
        goto LABEL_60;
      }
      if (CFArrayGetCount((CFArrayRef)v17) >= 1)
      {
        CFIndex v29 = 0;
        do
        {
          CFArrayGetValueAtIndex((CFArrayRef)v17, v29);
          CMNotificationCenterGetDefaultLocalCenter();
          FigNotificationCenterAddWeakListener();
          ++v29;
        }
        while (v29 < CFArrayGetCount((CFArrayRef)v17));
      }
      if (!CFArrayGetCount((CFArrayRef)v17)) {
        goto LABEL_60;
      }
      uint64_t v30 = *(const void **)(v8 + 96);
      if (v30)
      {
        CFRelease(v30);
        *(void *)(v8 + 96) = 0;
      }
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(void *)(v8 + 96) = CFDateCreate(v9, Current);
      uint64_t v32 = CMBaseObjectGetDerivedStorage();
      if (a1)
      {
        uint64_t v33 = v32;
        if (!*(void *)(v32 + 80))
        {
LABEL_60:
          int v43 = *(const void **)(v8 + 24);
          *(void *)(v8 + 24) = Copy;
          if (Copy) {
            CFRetain(Copy);
          }
          if (v43) {
            CFRelease(v43);
          }
          BOOL v44 = *(_DWORD *)(v8 + 16) == 6;
          if (a1) {
            CFRetain(a1);
          }
          BOOL v45 = *(NSObject **)(v8 + 40);
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 0x40000000;
          block[2] = __vdms_gracefullySetVideoTargetArray_block_invoke;
          block[3] = &__block_descriptor_tmp_64;
          block[4] = v8;
          void block[5] = a1;
          BOOL v49 = v44;
          dispatch_async(v45, block);
          if (v20) {
            CFRelease(v20);
          }
          if (v17)
          {
            CFRelease((CFTypeRef)v17);
            uint64_t v17 = 0;
          }
          goto LABEL_70;
        }
        CFAbsoluteTime v34 = CFAbsoluteTimeGetCurrent();
        CFDateRef v35 = CFDateCreate(v9, v34);
        if (v35)
        {
          CFDateRef v36 = v35;
          double TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v35, *(CFDateRef *)(v33 + 88));
          uint64_t v38 = *(void *)(v33 + 80);
          if (v38)
          {
            double v39 = TimeIntervalSinceDate;
            uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v41 = v40 ? v40 : 0;
            int v42 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v41 + 56);
            if (v42) {
              v42(v38, 0x1EE582D38, 0x1EE5856B8, (uint64_t)(v39 * 1000.0), 0);
            }
          }
          CFRelease(v36);
          goto LABEL_60;
        }
      }
      FigSignalErrorAt();
      goto LABEL_60;
    }
    uint64_t v17 = FigSignalErrorAt();
    CFRelease(v20);
  }
  else
  {
    uint64_t v17 = FigSignalErrorAt();
  }
  if (!v17)
  {
    uint64_t v17 = 0;
    uint64_t v20 = 0;
    goto LABEL_43;
  }
LABEL_70:
  if (Copy) {
    CFRelease(Copy);
  }
  uint64_t DerivedStorage = v47;
LABEL_73:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 32));
  return v17;
}

CFIndex vdms_removeFVTNotificationListeners(CFArrayRef theArray)
{
  CFIndex v2 = 0;
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex result = CFArrayGetCount(theArray); v2 < result; CFIndex result = 0)
  {
    CFArrayGetValueAtIndex(theArray, v2);
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    ++v2;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return result;
}

uint64_t vdms_deferredFVTPreferredDataChannelGroupsChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
  uint64_t result = FigCFArrayContainsValue();
  if (result)
  {
    vdms_reevaluateProcessingStateAndNotify(a2, *(_DWORD *)(DerivedStorage + 16) == 6);
    JUMPOUT(0x19970E930);
  }
  return result;
}

uint64_t vdms_deferredAssetPropertyLoadedCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && ((uint64_t v9 = DerivedStorage, FigCFEqual()) || FigCFEqual()) && *(void *)v9 == a4)
  {
    CFDictionaryGetValue(a5, @"assetPayload_Property");
    uint64_t result = FigCFEqual();
    if (result)
    {
      MEMORY[0x19970E910](*(void *)(v9 + 32));
      if (*(_DWORD *)(v9 + 16) == 1)
      {
        if (FigCFEqual())
        {
          uint64_t v11 = CMBaseObjectGetDerivedStorage();
          if (*(void *)(v11 + 80))
          {
            uint64_t v12 = v11;
            CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
            CFDateRef v15 = CFDateCreate(v13, Current);
            if (v15)
            {
              CFDateRef v16 = v15;
              double TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v15, *(CFDateRef *)(v12 + 96));
              uint64_t v18 = *(void *)(v12 + 80);
              if (v18)
              {
                double v19 = TimeIntervalSinceDate;
                uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
                uint64_t v21 = v20 ? v20 : 0;
                CFIndex v22 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v21 + 56);
                if (v22) {
                  v22(v18, 0x1EE582D38, 0x1EE5856D8, (uint64_t)(v19 * 1000.0), 0);
                }
              }
              CFRelease(v16);
            }
            else
            {
              FigSignalErrorAt();
            }
          }
        }
        vdms_reevaluateProcessingStateAndNotify(a2, 0);
      }
      JUMPOUT(0x19970E930);
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void vdms_destroyResourceEntry(void *a1)
{
  if (a1)
  {
    CFIndex v2 = (const void *)a1[3];
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = (const void *)a1[2];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

void __vdms_gracefullySetVideoTargetArray_block_invoke(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(*(void *)(a1 + 32) + 32));
  vdms_reevaluateProcessingStateAndNotify(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  MEMORY[0x19970E930](*(void *)(*(void *)(a1 + 32) + 32));
  CFIndex v2 = *(const void **)(a1 + 40);
  if (v2)
  {
    CFRelease(v2);
  }
}

uint64_t vdms_updateDataChannelConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a3 && a5)
  {
    uint64_t v9 = DerivedStorage;
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
    if (*(int *)(v9 + 16) < 4)
    {
      uint64_t v12 = 4294951442;
    }
    else
    {
      DataChannelResourceEntryByTarget = vdms_findDataChannelResourceEntryByTarget();
      if (DataChannelResourceEntryByTarget && (uint64_t v11 = DataChannelResourceEntryByTarget[3]) != 0) {
        uint64_t v12 = FigDataChannelConfigurationAddDataChannelResource(a3, v11);
      }
      else {
        uint64_t v12 = 0;
      }
    }
    MEMORY[0x19970E930](*(void *)(v9 + 32));
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void *vdms_findDataChannelResourceEntryByTarget()
{
  uint64_t v0 = (void *)(CMBaseObjectGetDerivedStorage() + 48);
  do
    uint64_t v0 = (void *)*v0;
  while (v0 && !FigCFEqual());
  return v0;
}

void vdms_RTCReportingUpdatePayloadTransferError(uint64_t a1, __CFError *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    if (a2)
    {
      uint64_t v5 = DerivedStorage;
      if (*(void *)(DerivedStorage + 80))
      {
        CFErrorDomain Domain = CFErrorGetDomain(a2);
        CFStringRef v7 = CFErrorCopyDescription(a2);
        CFIndex Code = CFErrorGetCode(a2);
        uint64_t v9 = *(void *)(v5 + 80);
        if (v9)
        {
          CFIndex v10 = Code;
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          CFAllocatorRef v13 = *(void (**)(uint64_t, uint64_t, uint64_t, CFErrorDomain, void))(v12 + 48);
          if (v13) {
            v13(v9, 0x1EE582D38, 0x1EE585738, Domain, 0);
          }
          uint64_t v14 = *(void *)(v5 + 80);
          if (v14)
          {
            uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v15) {
              uint64_t v16 = v15;
            }
            else {
              uint64_t v16 = 0;
            }
            uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, CFStringRef, void))(v16 + 48);
            if (v17) {
              v17(v14, 0x1EE582D38, 0x1EE585758, v7, 0);
            }
            uint64_t v18 = *(void *)(v5 + 80);
            if (v18)
            {
              uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
              uint64_t v20 = v19 ? v19 : 0;
              uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, CFIndex, void))(v20 + 56);
              if (v21) {
                v21(v18, 0x1EE582D38, 0x1EE585778, v10, 0);
              }
            }
          }
        }
        if (v7)
        {
          CFRelease(v7);
        }
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void vdms_updateResourcesAndTransferMetadata(uint64_t a1)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(DerivedStorage + 16) - 7) < 0xFFFFFFFD) {
    return;
  }
  CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 24);
  uint64_t v4 = *(uint64_t **)(CMBaseObjectGetDerivedStorage() + 48);
  int v5 = 0;
  while (v4)
  {
    int v6 = v4;
    uint64_t v4 = (uint64_t *)*v4;
    if (!vdms_supportsVenueDescriptionDataDelivery(v6[2]) || !FigCFArrayContainsValue())
    {
      uint64_t v7 = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = v6[3];
      if (!v8
        || ((v9 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0 ? (uint64_t v10 = 0) : (uint64_t v10 = v9),
            (uint64_t v11 = *(unsigned int (**)(uint64_t))(v10 + 48)) != 0 && !v11(v8)))
      {
        CMNotificationCenterGetDefaultLocalCenter();
        FigNotificationCenterRemoveWeakListener();
        uint64_t v12 = *v6;
        CFAllocatorRef v13 = (void *)v6[1];
        if (*v6)
        {
          *(void *)(v12 + 8) = v13;
          CFAllocatorRef v13 = (void *)v6[1];
        }
        else
        {
          *(void *)(v7 + 56) = v13;
        }
        *CFAllocatorRef v13 = v12;
        vdms_destroyResourceEntry(v6);
      }
      int v5 = 1;
    }
  }
  CFIndex v14 = 0;
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v16 = (_OWORD *)MEMORY[0x1E4F21E50];
  if (!v3) {
    goto LABEL_19;
  }
LABEL_18:
  for (CFIndex i = CFArrayGetCount(v3); v14 < i; CFIndex i = 0)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v3, v14);
    if (!vdms_supportsVenueDescriptionDataDelivery((uint64_t)ValueAtIndex)
      || vdms_findDataChannelResourceEntryByTarget())
    {
      goto LABEL_42;
    }
    uint64_t v19 = CMBaseObjectGetDerivedStorage();
    CFTypeRef cf = 0;
    *(_OWORD *)CFArrayRef theArray = *v16;
    int v20 = FigTagCollectionCreate();
    if (v20)
    {
LABEL_44:
      int v26 = v20;
      int v24 = 0;
      goto LABEL_38;
    }
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(uint64_t (**)(const void *, void, void, CFTypeRef *))(v22 + 40);
    if (v23)
    {
      int v20 = v23(ValueAtIndex, 0, 0, &cf);
      if (v20) {
        goto LABEL_44;
      }
      int v24 = malloc_type_calloc(1uLL, 0x28uLL, 0x10A004003E9C36BuLL);
      if (v24)
      {
        if (ValueAtIndex) {
          CFTypeRef v25 = CFRetain(ValueAtIndex);
        }
        else {
          CFTypeRef v25 = 0;
        }
        _OWORD v24[2] = v25;
        CFTypeRef v27 = cf;
        if (cf) {
          CFTypeRef v27 = CFRetain(cf);
        }
        int v26 = 0;
        v24[3] = v27;
        *((_DWORD *)v24 + 9) = 0;
        goto LABEL_38;
      }
    }
    else
    {
      int v24 = 0;
    }
    int v26 = -12782;
LABEL_38:
    if (cf) {
      CFRelease(cf);
    }
    if (v26)
    {
      vdms_destroyResourceEntry(v24);
      return;
    }
    *int v24 = 0;
    uint64_t v28 = *(void **)(v19 + 56);
    v24[1] = v28;
    *uint64_t v28 = v24;
    *(void *)(v19 + 56) = v24;
    CMBaseObjectGetDerivedStorage();
    CMNotificationCenterGetDefaultLocalCenter();
    int v5 = 1;
    FigNotificationCenterAddWeakListener();
LABEL_42:
    ++v14;
    if (v3) {
      goto LABEL_18;
    }
LABEL_19:
    ;
  }
  if (!v5) {
    return;
  }
  theArray[0] = 0;
  CFIndex v29 = (void *)CMBaseObjectGetDerivedStorage();
  if (!v29[8])
  {
    uint64_t CMBaseObject = FigAssetGetCMBaseObject(*v29);
    uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v33) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0;
    }
    CFDateRef v35 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFArrayRef *))(v34 + 48);
    if (v35)
    {
      CFDateRef v36 = @"assetProperty_HLSMetadata";
      goto LABEL_57;
    }
    goto LABEL_65;
  }
  uint64_t CMBaseObject = FigBytePumpGetFigBaseObject(v29[8]);
  uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v31) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  CFDateRef v35 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFArrayRef *))(v32 + 48);
  if (!v35)
  {
LABEL_65:
    CFTypeRef v42 = 0;
    int v43 = -12782;
    goto LABEL_68;
  }
  CFDateRef v36 = @"FBSP_Metadata";
LABEL_57:
  int v37 = v35(CMBaseObject, v36, v15, theArray);
  if (v37)
  {
    int v43 = v37;
    CFTypeRef v42 = 0;
  }
  else
  {
    CFIndex v38 = 0;
    while (1)
    {
      CFArrayRef Count = theArray[0];
      if (theArray[0]) {
        CFArrayRef Count = (CFArrayRef)CFArrayGetCount(theArray[0]);
      }
      if (v38 >= (uint64_t)Count) {
        break;
      }
      CFDictionaryRef v40 = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray[0], v38);
      CFDictionaryGetValue(v40, @"key");
      ++v38;
      if (FigCFEqual())
      {
        CFArrayRef Value = CFDictionaryGetValue(v40, @"value");
        if (Value)
        {
          CFTypeRef v42 = CFRetain(Value);
          goto LABEL_67;
        }
        break;
      }
    }
    CFTypeRef v42 = 0;
LABEL_67:
    int v43 = 0;
  }
LABEL_68:
  if (theArray[0]) {
    CFRelease(theArray[0]);
  }
  if (v43)
  {
LABEL_99:
    if (!v42) {
      return;
    }
    goto LABEL_100;
  }
  uint64_t v44 = CMBaseObjectGetDerivedStorage();
  if (!v42) {
    goto LABEL_88;
  }
  uint64_t v45 = v44;
  theArray[0] = 0;
  CFTypeID v46 = CFGetTypeID(v42);
  if (v46 != CFDataGetTypeID())
  {
LABEL_100:
    CFRelease(v42);
    return;
  }
  CFDataGetLength((CFDataRef)v42);
  BlockBufferWithCFDataNoCFArrayRef Copy = FigCreateBlockBufferWithCFDataNoCopy();
  CFArrayRef v48 = theArray[0];
  if (BlockBufferWithCFDataNoCopy)
  {
    if (theArray[0]) {
      CFRelease(theArray[0]);
    }
    goto LABEL_100;
  }
  BOOL v49 = *(uint64_t **)(v45 + 48);
  if (!v49)
  {
LABEL_84:
    int v55 = 0;
    goto LABEL_85;
  }
  while (2)
  {
    uint64_t v50 = v49[3];
    if (!v50 || *((unsigned char *)v49 + 32))
    {
LABEL_83:
      BOOL v49 = (uint64_t *)*v49;
      if (!v49) {
        goto LABEL_84;
      }
      continue;
    }
    break;
  }
  uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v51) {
    uint64_t v52 = v51;
  }
  else {
    uint64_t v52 = 0;
  }
  uint64_t v53 = *(uint64_t (**)(uint64_t, CFArrayRef))(v52 + 32);
  if (!v53)
  {
    int v55 = -12782;
    goto LABEL_85;
  }
  int v54 = v53(v50, v48);
  if (!v54)
  {
    *((unsigned char *)v49 + 32) = 1;
    goto LABEL_83;
  }
  int v55 = v54;
LABEL_85:
  if (v48) {
    CFRelease(v48);
  }
  if (v55) {
    goto LABEL_99;
  }
LABEL_88:
  CMNotificationCenterGetDefaultLocalCenter();
  if (CMNotificationCenterPostNotification()) {
    goto LABEL_99;
  }
  uint64_t v56 = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v57 = v56;
    if (!*(void *)(v56 + 80)) {
      goto LABEL_99;
    }
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    CFDateRef v59 = CFDateCreate(v15, Current);
    if (v59)
    {
      CFDateRef v60 = v59;
      double TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v59, *(CFDateRef *)(v57 + 96));
      uint64_t v62 = *(void *)(v57 + 80);
      if (v62)
      {
        double v63 = TimeIntervalSinceDate;
        uint64_t v64 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v65 = v64 ? v64 : 0;
        uint64_t v66 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v65 + 56);
        if (v66) {
          v66(v62, 0x1EE582D38, 0x1EE5856F8, (uint64_t)(v63 * 1000.0), 0);
        }
      }
      CFRelease(v60);
      goto LABEL_99;
    }
  }
  FigSignalErrorAt();
  if (v42) {
    goto LABEL_100;
  }
}

void vdms_pumpTransferCallback(uint64_t a1, const void *a2, const void *a3)
{
  Owner = (const void *)FigRetainProxyGetOwner();
  if (Owner) {
    CFTypeRef v7 = CFRetain(Owner);
  }
  else {
    CFTypeRef v7 = 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 16) == 2)
  {
    uint64_t v9 = DerivedStorage;
    if (a3) {
      CFRetain(a3);
    }
    FigBytePumpRetain(a2);
    FigRetainProxyRetain();
    FigRetainProxyRetainOwner();
    uint64_t v10 = *(NSObject **)(v9 + 40);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __vdms_pumpTransferCallback_block_invoke;
    block[3] = &unk_1E579F5D8;
    void block[6] = a3;
    void block[7] = a2;
    block[8] = v7;
    block[4] = a1;
    void block[5] = v9;
    dispatch_async(v10, block);
  }
  FigRetainProxyRelease();
  if (v7) {
    CFRelease(v7);
  }
}

uint64_t vdms_getAllDataChannelResourceProcessingStatus()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if ((*(_DWORD *)(DerivedStorage + 16) - 7) < 0xFFFFFFFE) {
    return 1;
  }
  uint64_t v1 = *(uint64_t **)(DerivedStorage + 48);
  if (!v1) {
    return 2;
  }
  char v2 = 0;
  LOBYTE(v3) = 1;
  do
  {
    int v4 = *((_DWORD *)v1 + 9);
    int v3 = (v4 == 1) & v3;
    v2 |= v4 == 2;
    uint64_t v1 = (uint64_t *)*v1;
  }
  while (v1);
  if (v2) {
    return 3;
  }
  if (v3) {
    return 2;
  }
  return 1;
}

uint64_t vdms_supportsVenueDescriptionDataDelivery(uint64_t a1)
{
  CFArrayRef theArray = 0;
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  int v4 = *(unsigned int (**)(uint64_t, void, CFArrayRef *))(v3 + 48);
  if (!v4 || v4(a1, *MEMORY[0x1E4F1CF80], &theArray))
  {
    unsigned __int8 v6 = 0;
  }
  else
  {
    CFIndex v5 = 0;
    unsigned __int8 v6 = 0;
    uint64_t v7 = *MEMORY[0x1E4F21E50];
    CMTagValue v8 = *(void *)(MEMORY[0x1E4F21E50] + 8);
    while (1)
    {
      CFIndex Count = (CFIndex)theArray;
      if (theArray) {
        CFIndex Count = CFArrayGetCount(theArray);
      }
      if (v5 >= Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v5);
      if (FigDataChannelGroupGetCountOfDataChannels((uint64_t)ValueAtIndex) >= 1)
      {
        CFIndex v11 = 0;
        while (1)
        {
          DataChannelByIndex = (const OpaqueCMTagCollection *)FigDataChannelGroupGetDataChannelByIndex((uint64_t)ValueAtIndex, v11);
          *(void *)&v15.category = v7;
          v15.CFTypeRef value = v8;
          if (CMTagCollectionContainsTag(DataChannelByIndex, v15)) {
            break;
          }
          if (++v11 >= FigDataChannelGroupGetCountOfDataChannels((uint64_t)ValueAtIndex)) {
            goto LABEL_16;
          }
        }
        unsigned __int8 v6 = 1;
      }
LABEL_16:
      ++v5;
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return v6;
}

uint64_t vdms_dataChannelResourceProcessingStateChangedNotificationHandler(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (a2)
  {
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
    if ((*(_DWORD *)(v4 + 16) - 7) >= 0xFFFFFFFE)
    {
      FigCFDictionaryGetInt32IfPresent();
      CFIndex v5 = (void *)(CMBaseObjectGetDerivedStorage() + 48);
      do
        CFIndex v5 = (void *)*v5;
      while (v5 && !FigCFEqual());
      vdms_reevaluateProcessingStateAndNotify(a2, 0);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  return MEMORY[0x19970E930](*(void *)(v4 + 32));
}

void __vdms_pumpTransferCallback_block_invoke(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(*(void *)(a1 + 40) + 32));
  uint64_t v2 = *(void *)(a1 + 48);
  *(_DWORD *)(*(void *)(a1 + 40) + 16) = 3;
  if (!v2)
  {
    *(void *)(*(void *)(a1 + 40) + 64) = FigBytePumpRetain(*(CFTypeRef *)(a1 + 56));
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 64);
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v6 = v5 ? v5 : 0;
    uint64_t v7 = *(void (**)(uint64_t))(v6 + 64);
    if (v7) {
      v7(v4);
    }
  }
  vdms_reevaluateProcessingStateAndNotify(*(void *)(a1 + 64), 0);
  MEMORY[0x19970E930](*(void *)(*(void *)(a1 + 40) + 32));
  FigRetainProxyReleaseOwner();
  FigRetainProxyRelease();
  FigBytePumpRelease(*(CFTypeRef *)(a1 + 56));
  uint64_t v3 = *(const void **)(a1 + 48);
  if (v3)
  {
    CFRelease(v3);
  }
}

uint64_t FigMediaValidatorMIMETypeIsShoutcastAudio(const __CFString *a1)
{
  return mv_IsStringInCArrayList(a1, (CFStringRef **)audioMimeTypes);
}

uint64_t mv_IsStringInCArrayList(CFStringRef theString1, CFStringRef **a2)
{
  uint64_t v2 = *a2;
  if (!*a2) {
    return 0;
  }
  for (CFIndex i = a2 + 1; ; ++i)
  {
    uint64_t v5 = 1;
    if (CFStringCompare(theString1, *v2, 1uLL) == kCFCompareEqualTo) {
      break;
    }
    uint64_t v6 = *i;
    uint64_t v2 = v6;
    if (!v6) {
      return 0;
    }
  }
  return v5;
}

uint64_t FigMediaValidatorUTIIsShoutcastAudio(const __CFString *a1)
{
  return mv_IsStringInCArrayList(a1, (CFStringRef **)audioUTIs);
}

uint64_t FigMediaValidatorIsNonByteStreamURLStreaming(int a1, const __CFURL *a2, const __CFURL *a3, __CFHTTPMessage *a4, unsigned char *a5)
{
  if (a5) {
    *a5 = 0;
  }
  if (a1 == -12939)
  {
    if (mv_IsStreaming(a2, a3, a4)) {
      return 1;
    }
    if (a4)
    {
      ResponseStatusCFIndex Code = CFHTTPMessageGetResponseStatusCode(a4);
      if (ResponseStatusCode == 200 || ResponseStatusCode == 416 || ResponseStatusCode == 206)
      {
        __int16 v12 = 0;
        if (mv_IsMimeTypeInList(a4, (CFStringRef **)audioMimeTypes, &v12)) {
          goto LABEL_11;
        }
        CFURLRef v11 = a3 ? a3 : a2;
        if (v11)
        {
          if (mv_IsExtensionInList(v11, a4, (CFStringRef **)audioExtensions, (unsigned char *)&v12 + 1))
          {
LABEL_11:
            if (a5) {
              *a5 = 1;
            }
            return 1;
          }
          if (!(v12 | HIBYTE(v12))) {
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t FigMediaValidatorValidateByteStream(unint64_t a1, const void *a2, const __CFDictionary *a3)
{
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v6 = 0u;
  v5[0] = 0u;
  v5[1] = a1;
  CFDictionaryRef v11 = a3;
  LODWORD(result) = mv_GetValidationType(a3, (int *)&v10 + 2);
  if (!result) {
    LODWORD(result) = mv_ValidateFileFromByteStream((uint64_t)v5, a2);
  }
  if (result | BYTE9(v6)) {
    return result;
  }
  else {
    return 4294954346;
  }
}

uint64_t mv_GetValidationType(const __CFDictionary *a1, int *a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, @"ValidationType");
  if (Value)
  {
    uint64_t v4 = Value;
    if (CFEqual(Value, @"RejectIfUnrecognized"))
    {
      int v5 = 0;
LABEL_8:
      uint64_t result = 0;
      *a2 = v5;
      return result;
    }
    if (CFEqual(v4, @"RequireOneRecognized"))
    {
      int v5 = 1;
      goto LABEL_8;
    }
    if (CFEqual(v4, @"IgnoreUnrecognized"))
    {
      int v5 = 2;
      goto LABEL_8;
    }
  }
  return 4294954334;
}

uint64_t mv_ValidateFileFromByteStream(uint64_t a1, const void *a2)
{
  CFTypeRef v2 = a2;
  CFTypeRef v34 = 0;
  if (!a2)
  {
    uint64_t v4 = FigFormatReaderCreateForStream(*(void *)(a1 + 16), (const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, &v34);
    if (v4)
    {
LABEL_71:
      uint64_t v16 = v4;
      goto LABEL_66;
    }
    CFTypeRef v2 = v34;
  }
  CFTypeRef v37 = 0;
  uint64_t v38 = 0;
  uint64_t v4 = mv_CheckIfFormatReaderIsSupported(a1, (uint64_t)v2);
  if (v4) {
    goto LABEL_71;
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  long long v7 = *(uint64_t (**)(CFTypeRef, uint64_t *))(v6 + 8);
  if (!v7)
  {
LABEL_39:
    uint64_t v16 = 4294954514;
    goto LABEL_40;
  }
  uint64_t v8 = v7(v2, &v38);
  if (v8) {
    goto LABEL_73;
  }
  if (v38 <= 0)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_73:
    uint64_t v16 = v8;
    goto LABEL_40;
  }
  CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), @"MaxMovieMatrixType");
  if (!Value)
  {
LABEL_24:
    uint64_t v18 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), @"AllowMultipleEdits");
    if (v18) {
      BOOL v19 = CFEqual(v18, (CFTypeRef)*MEMORY[0x1E4F1CFC8]) == 0;
    }
    else {
      BOOL v19 = 1;
    }
    if (v38 < 1)
    {
LABEL_38:
      uint64_t v16 = 0;
      goto LABEL_40;
    }
    uint64_t v20 = 0;
    while (1)
    {
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v22 = v21 ? v21 : 0;
      uint64_t v23 = *(uint64_t (**)(CFTypeRef, uint64_t, CFTypeRef *, void, void))(v22 + 48);
      if (!v23) {
        goto LABEL_39;
      }
      uint64_t v8 = v23(v2, v20, &v37, 0, 0);
      if (v8) {
        goto LABEL_73;
      }
      uint64_t v8 = mv_ValidateTrackWithTrackReader(a1, (uint64_t)v2, (uint64_t)v37, v19, 0, 0);
      if (v8) {
        goto LABEL_73;
      }
      if (v37)
      {
        CFRelease(v37);
        CFTypeRef v37 = 0;
      }
      if (++v20 >= v38) {
        goto LABEL_38;
      }
    }
  }
  long long v10 = Value;
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(v2);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  CFIndex v14 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v13 + 48);
  if (!v14)
  {
    uint64_t v16 = 0;
    goto LABEL_20;
  }
  int v15 = v14(FigBaseObject, @"MovieMatrix", *MEMORY[0x1E4F1CF80], &cf);
  uint64_t v16 = 0;
  CFTypeRef v17 = cf;
  if (!v15 && cf)
  {
    uint64_t v16 = mv_CheckIfMatrixIsSupported(v10, (CFArrayRef)cf);
LABEL_20:
    CFTypeRef v17 = cf;
  }
  if (v17) {
    CFRelease(v17);
  }
  if (!v16) {
    goto LABEL_24;
  }
LABEL_40:
  if (v37) {
    CFRelease(v37);
  }
  if (!v16)
  {
    if (!*(unsigned char *)(a1 + 41) || *(_DWORD *)(a1 + 104) != 1)
    {
LABEL_54:
      CFTypeRef cf = 0;
      uint64_t v27 = FigFormatReaderGetFigBaseObject(v2);
      uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v28) {
        uint64_t v29 = v28;
      }
      else {
        uint64_t v29 = 0;
      }
      uint64_t v30 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v29 + 48);
      if (v30 && !v30(v27, @"ImportantResourceLocation", *MEMORY[0x1E4F1CF80], &cf) && cf)
      {
        uint64_t valuePtr = 0;
        CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"LocationOffset");
        if (v31)
        {
          CFNumberGetValue(v31, kCFNumberSInt64Type, &valuePtr);
          *(void *)(a1 + 24) = valuePtr;
        }
        uint64_t valuePtr = 0;
        CFNumberRef v32 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)cf, @"LocationSize");
        if (v32)
        {
          CFNumberGetValue(v32, kCFNumberSInt64Type, &valuePtr);
          *(void *)(a1 + 32) = valuePtr;
        }
        CFRelease(cf);
      }
      uint64_t v16 = 0;
      goto LABEL_66;
    }
    CFBooleanRef v24 = *(const __CFBoolean **)(a1 + 8);
    if (v24)
    {
      int v25 = CFBooleanGetValue(v24);
      uint64_t v26 = *(void *)(a1 + 48);
      if (v25 == 1)
      {
        if (v26 && *(void *)(a1 + 56)) {
          goto LABEL_52;
        }
      }
      else if (v26 < 1)
      {
        goto LABEL_52;
      }
      uint64_t v16 = FigSignalErrorAt();
      if (v16) {
        goto LABEL_66;
      }
    }
LABEL_52:
    if (*(uint64_t *)(a1 + 48) >= 1 && !*(void *)(a1 + 56))
    {
      uint64_t v16 = FigSignalErrorAt();
      if (v16) {
        goto LABEL_66;
      }
    }
    goto LABEL_54;
  }
LABEL_66:
  if (v34) {
    CFRelease(v34);
  }
  return v16;
}

uint64_t FigMediaValidatorValidateIndividualTrack(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  return mv_ValidateIndividualTrack(a1, a2, a3, 0);
}

uint64_t mv_ValidateIndividualTrack(uint64_t a1, uint64_t a2, const __CFDictionary *a3, int a4)
{
  memset(v11, 0, sizeof(v11));
  CFDictionaryRef v12 = a3;
  uint64_t result = mv_CheckIfFormatReaderIsSupported((uint64_t)v11, a1);
  if (!result)
  {
    CFArrayRef Value = CFDictionaryGetValue(a3, @"AllowMultipleEdits");
    if (Value) {
      BOOL v10 = CFEqual(Value, (CFTypeRef)*MEMORY[0x1E4F1CFC8]) == 0;
    }
    else {
      BOOL v10 = 1;
    }
    return mv_ValidateTrackWithTrackReader((uint64_t)v11, a1, a2, v10, 1, a4);
  }
  return result;
}

uint64_t FigMediaValidatorValidateIndividualTrackForDecoding(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  return mv_ValidateIndividualTrack(a1, a2, a3, 1);
}

uint64_t FigMediaValidatorValidateFormatDescription(const opaqueCMFormatDescription *a1, const __CFDictionary *a2)
{
  __int16 v16 = 0;
  Boolean v15 = 0;
  memset(v17, 0, sizeof(v17));
  CFDictionaryRef v18 = a2;
  signed int MediaType = CMFormatDescriptionGetMediaType(a1);
  CFStringRef CFStringFrom4CC = mv_CreateCFStringFrom4CC(MediaType);
  if (CFStringFrom4CC)
  {
    uint64_t v6 = (__CFString *)CFStringFrom4CC;
    unsigned int IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(a2, CFStringFrom4CC, @"TrackTypes", &v15, &v16);
    if (IsValueInArrayInDictionary)
    {
LABEL_21:
      unsigned int v11 = IsValueInArrayInDictionary;
LABEL_22:
      CFRelease(v6);
      BOOL v13 = HIBYTE(v16) != 0;
      goto LABEL_23;
    }
    if ((_BYTE)v16 && v15)
    {
      if (MediaType <= 1936684397)
      {
        if (MediaType == 1668047728)
        {
          unsigned int IsValueInArrayInDictionary = mv_CheckIfClosedCaptionsPlayable((uint64_t)v17, v6, a1, 0, (char *)&v16 + 1);
          goto LABEL_21;
        }
        if (MediaType == 1935832172)
        {
          unsigned int IsValueInArrayInDictionary = mv_CheckIfSubTitlesPlayable((uint64_t)v17, v6, a1, 0, (char *)&v16 + 1);
          goto LABEL_21;
        }
        goto LABEL_20;
      }
      if (MediaType == 1936684398)
      {
        unsigned int IsValueInArrayInDictionary = mv_CheckIfAudioPlayable((uint64_t)v17, v6, a1, 0, 0, (BOOL *)&v16 + 1);
        goto LABEL_21;
      }
      if (MediaType != 1953325924)
      {
        if (MediaType == 1986618469)
        {
          unsigned int IsValueInArrayInDictionary = mv_CheckIfVideoPresentable((uint64_t)v17, v6, a1, 0, 0, 0, 0, (BOOL *)&v16 + 1);
          goto LABEL_21;
        }
LABEL_20:
        unsigned int IsValueInArrayInDictionary = mv_CheckIfOtherMediaTypePlayable((uint64_t)v17, v6, a1, (char *)&v16 + 1);
        goto LABEL_21;
      }
      FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a1);
      CFStringRef v9 = mv_CreateCFStringFrom4CC(MediaSubType);
      if (v9)
      {
        CFStringRef v10 = v9;
        __int16 v19 = 0;
        unsigned int v11 = mv_IsValueInArrayInDictionary(a2, v9, v6, (Boolean *)&v19 + 1, &v19);
        if (!v11)
        {
          if ((_BYTE)v19)
          {
            char v12 = 0;
            if (!HIBYTE(v19))
            {
              unsigned int v11 = FigSignalErrorAt();
              char v12 = 1;
            }
          }
          else
          {
            char v12 = 0;
          }
          HIBYTE(v16) = v12;
        }
        CFRelease(v10);
        goto LABEL_22;
      }
    }
    unsigned int IsValueInArrayInDictionary = FigSignalErrorAt();
    goto LABEL_21;
  }
  unsigned int v11 = FigSignalErrorAt();
  BOOL v13 = 0;
LABEL_23:
  if (v11 == 0 && v13) {
    return 4294954346;
  }
  else {
    return v11;
  }
}

uint64_t mv_CheckIfVideoPresentable(uint64_t a1, void *a2, CMFormatDescriptionRef desc, uint64_t a4, uint64_t a5, int a6, unsigned char *a7, BOOL *a8)
{
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  if (a7) {
    *a7 = FigCPEIsSupportedFormatDescription((uint64_t)desc);
  }
  CFStringRef CFStringFrom4CC = mv_CreateCFStringFrom4CC(MediaSubType);
  if (CFStringFrom4CC)
  {
    CFStringRef v18 = CFStringFrom4CC;
    __int16 v149 = 0;
    uint64_t IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), CFStringFrom4CC, a2, (Boolean *)&v149 + 1, &v149);
    if (IsValueInArrayInDictionary
      || !(_BYTE)v149
      && (uint64_t IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), v18, @"VideoCodecs", (Boolean *)&v149 + 1, &v149), IsValueInArrayInDictionary))
    {
      uint64_t v29 = IsValueInArrayInDictionary;
      goto LABEL_155;
    }
    CFDictionaryRef resolvedDictionaryOut = 0;
    values[0] = 0;
    CFTypeRef value = 0;
    uint64_t v147 = a5;
    if (CMFormatDescriptionGetMediaType(desc) != 1986618469)
    {
LABEL_32:
      if (!(_BYTE)v149)
      {
        uint64_t v29 = FigSignalErrorAt();
        goto LABEL_152;
      }
      if (HIBYTE(v149))
      {
        unsigned int v146 = a8;
        signed int v30 = CMFormatDescriptionGetMediaSubType(desc);
        CFStringRef v31 = mv_CreateCFStringFrom4CC(v30);
        uint64_t v153 = 0;
        CFArrayRef v154 = 0;
        CFNumberRef v151 = 0;
        CFNumberRef v152 = 0;
        if (v31)
        {
          CFStringRef v32 = v31;
          uint64_t v33 = *MEMORY[0x1E4F1CF80];
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F455D0], (const void *)*MEMORY[0x1E4F1CFD0]);
          int VideoDecoderInstance = VTSelectAndCreateVideoDecoderInstance();
          if (Mutable) {
            CFRelease(Mutable);
          }
          CFNumberRef number = 0;
          CFBooleanRef valuePtr = 0;
          *(void *)uint64_t v156 = 0;
          int32_t v155 = 0;
          if (VideoDecoderInstance) {
            goto LABEL_38;
          }
          CMVideoDimensions Dimensions = CMVideoFormatDescriptionGetDimensions(desc);
          CFDictionaryRef v40 = *(const __CFDictionary **)(a1 + 112);
          CFTypeID TypeID = CFNumberGetTypeID();
          unsigned int CodecProperty = mv_GetCodecProperty(v40, v32, @"VideoCodecProfiles", @"VideoMaxWidth", TypeID, (const void **)&number);
          if (CodecProperty) {
            goto LABEL_39;
          }
          if (number && CFNumberGetValue(number, kCFNumberSInt32Type, &v155) && v155 < Dimensions.width) {
            goto LABEL_38;
          }
          uint64_t v145 = v33;
          CFDictionaryRef v42 = *(const __CFDictionary **)(a1 + 112);
          CFTypeID v43 = CFNumberGetTypeID();
          unsigned int CodecProperty = mv_GetCodecProperty(v42, v32, @"VideoCodecProfiles", @"VideoMaxHeight", v43, (const void **)&number);
          if (CodecProperty) {
            goto LABEL_39;
          }
          if (number && CFNumberGetValue(number, kCFNumberSInt32Type, &v155) && v155 < Dimensions.height) {
            goto LABEL_38;
          }
          CFDictionaryRef v44 = *(const __CFDictionary **)(a1 + 112);
          CFTypeID v45 = CFNumberGetTypeID();
          unsigned int CodecProperty = mv_GetCodecProperty(v44, v32, @"VideoCodecProfiles", @"VideoMaxPixelsPerFrame", v45, (const void **)&number);
          if (CodecProperty) {
            goto LABEL_39;
          }
          if (number
            && CFNumberGetValue(number, kCFNumberSInt32Type, &v155)
            && v155 < Dimensions.height * Dimensions.width)
          {
            goto LABEL_38;
          }
          uint64_t v46 = v147;
          if (v147)
          {
            CFDictionaryRef v47 = *(const __CFDictionary **)(a1 + 112);
            CFTypeID v48 = CFBooleanGetTypeID();
            mv_GetCodecProperty(v47, v32, @"VideoCodecProfiles", @"VideoNoFrameReordering", v48, (const void **)&valuePtr);
            if (valuePtr)
            {
              if (CFBooleanGetValue(valuePtr))
              {
                values[0] = 0;
                uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v147);
                uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v50) {
                  uint64_t v51 = v50;
                }
                else {
                  uint64_t v51 = 0;
                }
                uint64_t v52 = *(void (**)(uint64_t, __CFString *, uint64_t, void **))(v51 + 48);
                if (v52) {
                  v52(FigBaseObject, @"TrackFrameReorderingRequired", v145, values);
                }
                if (values[0])
                {
                  int v53 = CFBooleanGetValue((CFBooleanRef)values[0]);
                  CFRelease(values[0]);
                  if (v53) {
                    goto LABEL_38;
                  }
                }
              }
            }
          }
          CFStringRef cf = v18;
          unsigned int VideoProfileAndLevelConstraints = mv_GetVideoProfileAndLevelConstraints(*(const __CFDictionary **)(a1 + 112), v32, &v154, 0, &v153, &v152, &v151, 0);
          if (VideoProfileAndLevelConstraints) {
            goto LABEL_264;
          }
          CFNumberRef v55 = v151;
          if (v151 && (unint64_t)v154 | (unint64_t)v152)
          {
            uint64_t v150 = 0;
            if (v152)
            {
              CFNumberGetValue(v152, kCFNumberSInt32Type, (char *)&v150 + 4);
              CFNumberRef v55 = v151;
            }
            CFNumberGetValue(v55, kCFNumberSInt32Type, &v150);
            if (v30 > 1752589104)
            {
              if (v30 == 1752589105)
              {
                CFArrayRef v144 = v154;
                CFTypeRef v138 = v153;
                int v140 = HIDWORD(v150);
                int v142 = v150;
                CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F1EE20]);
                if (!Extension) {
                  goto LABEL_159;
                }
                CFDictionaryRef v82 = Extension;
                CFTypeID v83 = CFGetTypeID(Extension);
                if (v83 != CFDictionaryGetTypeID()) {
                  goto LABEL_159;
                }
                CFArrayRef v84 = (const __CFArray *)CFDictionaryGetValue(v82, @"hvcC");
                if (!v84) {
                  goto LABEL_159;
                }
                CFArrayRef v85 = v84;
                CFTypeID v86 = CFGetTypeID(v84);
                if (v86 == CFArrayGetTypeID())
                {
                  if (!CFArrayGetValueAtIndex(v85, 0)) {
                    goto LABEL_159;
                  }
                }
                else
                {
                  CFTypeID v100 = CFGetTypeID(v85);
                  if (v100 != CFDataGetTypeID()) {
                    goto LABEL_159;
                  }
                }
                CFDictionaryRef resolvedDictionaryOut = 0;
                CFTypeRef value = 0;
                __int16 v160 = 0;
                unsigned __int8 v159 = 0;
                if (FigHEVCBridge_GetHEVCParameterSetAtIndex()
                  || FigHEVCBridge_GetSPSProfileTierLevel())
                {
                  goto LABEL_159;
                }
                uint64_t v101 = HIBYTE(v160);
                int v102 = v159;
                values[0] = 0;
                if (v144) {
                  int IsIntInCFArray = mv_IsIntInCFArray(HIBYTE(v160), v144);
                }
                else {
                  int IsIntInCFArray = v140 >= HIBYTE(v160);
                }
                if (!IsIntInCFArray) {
                  goto LABEL_158;
                }
                if (!a6)
                {
                  if (v147 && v138 && mv_isMovieFamilyFormatReader(a4))
                  {
                    int v162 = v142;
                    int v105 = mv_EvaluateProfileConstraints(v101, v138, v147, (uint64_t)&v162, (double *)values);
                    if (a4 && !v105)
                    {
                      if (!mv_isMovieFamilyFormatReader(a4)) {
                        goto LABEL_158;
                      }
                      CMVideoFormatDescriptionGetDimensions(desc);
                      int v105 = mv_CheckIfDroppingHEVCTemporalLevelsEnablesPlayability(v147, 0.0, *(double *)values);
                    }
                    int v106 = v142;
                    if (v162 < v142) {
                      int v106 = v162;
                    }
                    int v142 = v106;
                    uint64_t v46 = v147;
                    if (!v105) {
                      goto LABEL_158;
                    }
                  }
                  if (v142 < v102)
                  {
                    if (!a4 || !v46 || !mv_isMovieFamilyFormatReader(a4)) {
                      goto LABEL_158;
                    }
                    CMVideoDimensions v112 = CMVideoFormatDescriptionGetDimensions(desc);
                    double v113 = 0.0;
                    if (v142 <= 122)
                    {
                      if (v142 > 89)
                      {
                        switch(v142)
                        {
                          case 'Z':
                            double v113 = 16588800.0;
                            break;
                          case ']':
                            double v113 = 33177600.0;
                            break;
                          case 'x':
                            double v113 = 66846720.0;
                            break;
                        }
                      }
                      else
                      {
                        switch(v142)
                        {
                          case 30:
                            double v113 = 552960.0;
                            break;
                          case 60:
                            double v113 = 3686400.0;
                            break;
                          case 63:
                            double v113 = 7372800.0;
                            break;
                        }
                      }
                    }
                    else if (v142 <= 155)
                    {
                      switch(v142)
                      {
                        case 123:
                          double v113 = 133693440.0;
                          break;
                        case 150:
                          double v113 = 267386880.0;
                          break;
                        case 153:
                          double v113 = 534773760.0;
                          break;
                      }
                    }
                    else if (v142 > 182)
                    {
                      if (v142 == 183)
                      {
                        double v113 = 2139095040.0;
                      }
                      else if (v142 == 186)
                      {
                        double v113 = 4278190080.0;
                      }
                    }
                    else if (v142 == 156 || v142 == 180)
                    {
                      double v113 = 1069547520.0;
                    }
                    uint64_t v46 = v147;
                    if (!mv_CheckIfDroppingHEVCTemporalLevelsEnablesPlayability(v147, v113 / (double)(v112.height * v112.width), 0.0))goto LABEL_158; {
                  }
                    }
                }
                goto LABEL_237;
              }
              if (v30 != 1836070006) {
                goto LABEL_237;
              }
              CFArrayRef v65 = v154;
              int v66 = v150;
              int v67 = HIDWORD(v150);
              CFPropertyListRef v68 = CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F1EE20]);
              if (!v68) {
                goto LABEL_159;
              }
              uint64_t v69 = v68;
              CFTypeID v70 = CFDictionaryGetTypeID();
              if (v70 != CFGetTypeID(v69)) {
                goto LABEL_159;
              }
              CFArrayRef v71 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v69, @"esds");
              if (!v71) {
                goto LABEL_159;
              }
              CFArrayRef ValueAtIndex = v71;
              CFTypeID v73 = CFArrayGetTypeID();
              if (v73 == CFGetTypeID(ValueAtIndex))
              {
                CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
                if (!ValueAtIndex) {
                  goto LABEL_159;
                }
              }
              else
              {
                CFTypeID v91 = CFDataGetTypeID();
                if (v91 != CFGetTypeID(ValueAtIndex)) {
                  goto LABEL_159;
                }
              }
              BytePtr = CFDataGetBytePtr(ValueAtIndex);
              CFIndex v93 = CFDataGetLength(ValueAtIndex) - 4;
              if (!BytePtr) {
                CFIndex v93 = -4;
              }
              if (v93 < 1) {
                goto LABEL_158;
              }
              uint64_t v94 = BytePtr + 2;
              while (*(v94 - 2) || *(v94 - 1) || *v94 != 1 || v94[1] != 176)
              {
                ++v94;
                if (!--v93) {
                  goto LABEL_158;
                }
              }
              uint64_t v114 = 0;
              while (v94[2] != MPEG4ProfileCheck[v114])
              {
                v114 += 3;
                if (v114 == 45) {
                  goto LABEL_159;
                }
              }
              int v115 = MPEG4ProfileCheck[v114 + 1];
              if (v65)
              {
                if (!mv_IsIntInCFArray(v115, v65)) {
                  goto LABEL_158;
                }
              }
              else if (v67 < v115)
              {
                goto LABEL_158;
              }
              if (v66 < MPEG4ProfileCheck[v114 + 2]) {
                goto LABEL_158;
              }
              uint64_t v46 = v147;
              goto LABEL_237;
            }
            if (v30 != 1635148593)
            {
              if (v30 != 1748121139) {
                goto LABEL_237;
              }
              CFArrayRef v56 = v154;
              int v57 = v150;
              int v58 = HIDWORD(v150);
              CFPropertyListRef v59 = CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F1EE20]);
              if (!v59) {
                goto LABEL_159;
              }
              CFDateRef v60 = v59;
              CFTypeID v61 = CFDictionaryGetTypeID();
              if (v61 != CFGetTypeID(v60)) {
                goto LABEL_159;
              }
              CFArrayRef v62 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)v60, @"d263");
              if (!v62) {
                goto LABEL_159;
              }
              CFArrayRef v63 = v62;
              CFTypeID v64 = CFArrayGetTypeID();
              if (v64 == CFGetTypeID(v63))
              {
                CFArrayRef v63 = (const __CFArray *)CFArrayGetValueAtIndex(v63, 0);
                if (!v63) {
                  goto LABEL_159;
                }
              }
              else
              {
                CFTypeID v87 = CFDataGetTypeID();
                if (v87 != CFGetTypeID(v63)) {
                  goto LABEL_159;
                }
              }
              if (CFDataGetLength(v63) >= 7)
              {
                uint64_t v88 = CFDataGetBytePtr(v63);
                int v89 = v88[6];
                int v90 = v88[5];
                if (v56)
                {
                  uint64_t v46 = v147;
                  if (!mv_IsIntInCFArray(v89, v56)) {
                    goto LABEL_158;
                  }
                }
                else
                {
                  uint64_t v46 = v147;
                  if (v58 < v89)
                  {
LABEL_158:
                    FigSignalErrorAt();
                    goto LABEL_159;
                  }
                }
                if (v57 < v90) {
                  goto LABEL_158;
                }
                goto LABEL_237;
              }
LABEL_159:
              unsigned int v37 = -12955;
              goto LABEL_40;
            }
            CFArrayRef v74 = v154;
            CFTypeRef v139 = v153;
            int v141 = HIDWORD(v150);
            int v143 = v150;
            CFDictionaryRef v75 = (const __CFDictionary *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F1EE20]);
            if (v75)
            {
              CFDictionaryRef v76 = v75;
              CFTypeID v77 = CFDictionaryGetTypeID();
              if (v77 == CFGetTypeID(v76))
              {
                CFArrayRef v78 = (const __CFArray *)CFDictionaryGetValue(v76, @"avcC");
                if (v78)
                {
                  CFArrayRef v79 = v78;
                  CFTypeID v80 = CFArrayGetTypeID();
                  if (v80 == CFGetTypeID(v79))
                  {
                    CFArrayRef v79 = (const __CFArray *)CFArrayGetValueAtIndex(v79, 0);
                    if (!v79) {
                      goto LABEL_237;
                    }
                  }
                  else
                  {
                    CFTypeID v95 = CFDataGetTypeID();
                    if (v95 != CFGetTypeID(v79)) {
                      goto LABEL_237;
                    }
                  }
                  if (CFDataGetLength(v79) < 5) {
                    goto LABEL_237;
                  }
                  CMAudioFormatDescriptionRef v96 = CFDataGetBytePtr(v79);
                  uint64_t v97 = v96[1];
                  int v98 = v96[3];
                  if (v74) {
                    int v99 = mv_IsIntInCFArray(v96[1], v74);
                  }
                  else {
                    int v99 = v141 >= (int)v97;
                  }
                  if (v99)
                  {
                    if (a6) {
                      goto LABEL_237;
                    }
                    if (!v147 || !v139 || !mv_isMovieFamilyFormatReader(a4)) {
                      goto LABEL_169;
                    }
                    int v107 = v143;
                    LODWORD(values[0]) = v143;
                    BOOL v108 = mv_EvaluateProfileConstraints(v97, v139, v147, (uint64_t)values, 0);
                    if (SLODWORD(values[0]) < v143) {
                      int v107 = (int)values[0];
                    }
                    int v143 = v107;
                    if (v108)
                    {
LABEL_169:
                      uint64_t v46 = v147;
                      if (v143 >= v98) {
                        goto LABEL_237;
                      }
                      if (a4 && v147 && mv_isMovieFamilyFormatReader(a4))
                      {
                        CMVideoDimensions v109 = CMVideoFormatDescriptionGetDimensions(desc);
                        double v110 = 0.0;
                        switch(v143)
                        {
                          case 30:
                            double v110 = 40500.0;
                            goto LABEL_232;
                          case 31:
                            double v110 = 108000.0;
                            goto LABEL_232;
                          case 32:
                            double v110 = 216000.0;
                            goto LABEL_232;
                          case 33:
                          case 34:
                          case 35:
                          case 36:
                          case 37:
                          case 38:
                          case 39:
                            goto LABEL_232;
                          case 40:
                          case 41:
                            uint64_t v111 = 0x410E000000000000;
                            goto LABEL_231;
                          case 42:
                            double v110 = 522240.0;
                            goto LABEL_232;
                          default:
                            if (v143 == 50)
                            {
                              uint64_t v111 = 0x4122000000000000;
                            }
                            else
                            {
                              if (v143 != 51) {
                                goto LABEL_232;
                              }
                              uint64_t v111 = 0x412E000000000000;
                            }
LABEL_231:
                            double v110 = *(double *)&v111;
LABEL_232:
                            int v116 = v109.height + 30;
                            if (v109.height >= -15) {
                              int v116 = v109.height + 15;
                            }
                            int v117 = v116 >> 4;
                            int v118 = v109.width + 15;
                            if (v109.width < -15) {
                              int v118 = v109.width + 30;
                            }
                            uint64_t v46 = v147;
                            if (mv_CheckIfDroppingFramesEnablesPlayability(v147, v110 / (double)(v117 * (v118 >> 4)), 0.0))goto LABEL_237; {
                            break;
                            }
                        }
                      }
                    }
                  }
                  unsigned int v37 = -12955;
                  FigSignalErrorAt();
LABEL_265:
                  a8 = v146;
                  CFStringRef v18 = cf;
                  goto LABEL_41;
                }
              }
            }
          }
LABEL_237:
          CFDictionaryRef v119 = *(const __CFDictionary **)(a1 + 112);
          CFTypeID v120 = CFBooleanGetTypeID();
          unsigned int VideoProfileAndLevelConstraints = mv_GetCodecProperty(v119, v32, @"VideoCodecProfiles", @"VideoNoInterlacing", v120, (const void **)&valuePtr);
          if (!VideoProfileAndLevelConstraints)
          {
            CFStringRef v18 = cf;
            if (!valuePtr) {
              goto LABEL_251;
            }
            int v121 = CFBooleanGetValue(valuePtr);
            if (v30 != 1635148593 || !v121) {
              goto LABEL_251;
            }
            LOBYTE(value) = 0;
            CFDictionaryRef resolvedDictionaryOut = 0;
            values[0] = 0;
            CFDictionaryRef Extensions = CMFormatDescriptionGetExtensions(desc);
            if (Extensions)
            {
              CFDictionaryRef v123 = (const __CFDictionary *)CFDictionaryGetValue(Extensions, (const void *)*MEMORY[0x1E4F1EE20]);
              if (v123)
              {
                CFDictionaryRef v124 = v123;
                CFTypeID v125 = CFDictionaryGetTypeID();
                if (v125 == CFGetTypeID(v124))
                {
                  CFDataRef v126 = (const __CFData *)CFDictionaryGetValue(v124, @"avcC");
                  if (v126)
                  {
                    CFDataRef v127 = v126;
                    CFTypeID v128 = CFArrayGetTypeID();
                    if (v128 != CFGetTypeID(v127)
                      || (CFDataRef v127 = (const __CFData *)CFArrayGetValueAtIndex(v127, 0)) != 0)
                    {
                      CFTypeID v129 = CFDataGetTypeID();
                      if (v129 == CFGetTypeID(v127))
                      {
                        CFDataGetBytePtr(v127);
                        CFDataGetLength(v127);
                        if (!FigH264Bridge_GetSPSFromAVCC()
                          && !FigH264Bridge_GetSPSIsInterlaced()
                          && !(_BYTE)value)
                        {
LABEL_251:
                          CFDictionaryRef v130 = *(const __CFDictionary **)(a1 + 112);
                          CFTypeID v131 = CFStringGetTypeID();
                          unsigned int v37 = mv_GetCodecProperty(v130, v32, @"VideoCodecProfiles", @"MaxVideoTrackMatrixType", v131, (const void **)v156);
                          if (v37) {
                            goto LABEL_40;
                          }
                          a8 = v146;
                          if (*(void *)v156)
                          {
                            values[0] = 0;
                            uint64_t v132 = FigTrackReaderGetFigBaseObject(v46);
                            uint64_t v133 = *(void *)(CMBaseObjectGetVTable() + 8);
                            if (v133) {
                              uint64_t v134 = v133;
                            }
                            else {
                              uint64_t v134 = 0;
                            }
                            v135 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void **))(v134 + 48);
                            if (v135)
                            {
                              int v136 = v135(v132, @"TrackMatrix", v145, values);
                              unsigned int v37 = 0;
                              CFDictionaryRef v137 = values[0];
                              if (!v136 && values[0])
                              {
                                unsigned int v37 = mv_CheckIfMatrixIsSupported(*(const void **)v156, (CFArrayRef)values[0]);
                                CFDictionaryRef v137 = values[0];
                              }
                              if (v137) {
                                CFRelease(v137);
                              }
                            }
                            else
                            {
                              unsigned int v37 = 0;
                            }
                          }
LABEL_41:
                          CFRelease(v32);
                          if (!v37) {
                            goto LABEL_151;
                          }
LABEL_45:
                          BOOL v38 = *(_DWORD *)(a1 + 104) == 1;
                          if (*(_DWORD *)(a1 + 104) == 1) {
                            uint64_t v29 = 0;
                          }
                          else {
                            uint64_t v29 = v37;
                          }
                          if (!a8) {
                            goto LABEL_155;
                          }
                          goto LABEL_153;
                        }
                      }
                    }
                  }
                }
              }
            }
LABEL_38:
            unsigned int CodecProperty = FigSignalErrorAt();
LABEL_39:
            unsigned int v37 = CodecProperty;
LABEL_40:
            a8 = v146;
            goto LABEL_41;
          }
LABEL_264:
          unsigned int v37 = VideoProfileAndLevelConstraints;
          goto LABEL_265;
        }
        unsigned int v37 = FigSignalErrorAt();
        a8 = v146;
        if (v37) {
          goto LABEL_45;
        }
      }
      else
      {
        unsigned int v37 = FigSignalErrorAt();
        if (v37) {
          goto LABEL_45;
        }
      }
LABEL_151:
      uint64_t v29 = 0;
LABEL_152:
      BOOL v38 = 0;
      if (!a8) {
        goto LABEL_155;
      }
LABEL_153:
      if (!v29) {
        *a8 = v38;
      }
      goto LABEL_155;
    }
    FourCharCode v20 = CMFormatDescriptionGetMediaSubType(desc);
    CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFDictionaryRef v22 = CVPixelFormatDescriptionCreateWithPixelFormatType((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v20);
    if (!v22)
    {
      BOOL v26 = 0;
      goto LABEL_28;
    }
    CFDictionaryRef v23 = v22;
    values[0] = CFDictionaryCreateMutable(v21, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFDictionarySetValue((CFMutableDictionaryRef)values[0], (const void *)*MEMORY[0x1E4F24D18], (const void *)*MEMORY[0x1E4F1CFD0]);
    CFArrayRef v24 = CFArrayCreate(v21, (const void **)values, 1, MEMORY[0x1E4F1D510]);
    CVPixelBufferCreateResolvedAttributesDictionary(v21, v24, &resolvedDictionaryOut);
    if (resolvedDictionaryOut)
    {
      CFDictionaryGetValueIfPresent(resolvedDictionaryOut, (const void *)*MEMORY[0x1E4F24D70], (const void **)&value);
      if (value)
      {
        CFTypeID v25 = CFGetTypeID(value);
        if (v25 == CFNumberGetTypeID())
        {
          LODWORD(valuePtr) = 0;
          if (CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &valuePtr))
          {
            BOOL v26 = VTPixelTransferSessionCanTransfer() != 0;
LABEL_24:
            CFRelease(v23);
            if (values[0])
            {
              CFRelease(values[0]);
              values[0] = 0;
            }
            if (v24) {
              CFRelease(v24);
            }
LABEL_28:
            if (resolvedDictionaryOut) {
              CFRelease(resolvedDictionaryOut);
            }
            if (v26)
            {
              uint64_t v29 = 0;
LABEL_155:
              CFRelease(v18);
              return v29;
            }
            goto LABEL_32;
          }
        }
        else if (value)
        {
          CFTypeID v27 = CFGetTypeID(value);
          if (v27 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)value) >= 1)
          {
            CFIndex v28 = 0;
            while (1)
            {
              LODWORD(valuePtr) = 0;
              if (FigCFArrayGetInt32AtIndex())
              {
                if (VTPixelTransferSessionCanTransfer()) {
                  break;
                }
              }
              ++v28;
              BOOL v26 = 0;
              if (CFArrayGetCount((CFArrayRef)value) <= v28) {
                goto LABEL_24;
              }
            }
            BOOL v26 = 1;
            goto LABEL_24;
          }
        }
      }
    }
    BOOL v26 = 0;
    goto LABEL_24;
  }

  return FigSignalErrorAt();
}

uint64_t mv_CheckIfAudioPlayable(uint64_t a1, void *a2, CMFormatDescriptionRef desc, unsigned char *a4, unsigned char *a5, BOOL *a6)
{
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  if (a5) {
    *a5 = FigCPEIsSupportedFormatDescription((uint64_t)desc);
  }
  CFStringRef CFStringFrom4CC = mv_CreateCFStringFrom4CC(MediaSubType);
  if (CFStringFrom4CC)
  {
    CFStringRef v14 = CFStringFrom4CC;
    __int16 v32 = 0;
    uint64_t IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), CFStringFrom4CC, a2, (Boolean *)&v32 + 1, &v32);
    if (!IsValueInArrayInDictionary)
    {
      if ((_BYTE)v32) {
        goto LABEL_8;
      }
      uint64_t IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), v14, @"AudioCodecs", (Boolean *)&v32 + 1, &v32);
      if (!IsValueInArrayInDictionary)
      {
        if (!(_BYTE)v32)
        {
          uint64_t v30 = FigSignalErrorAt();
LABEL_37:
          BOOL v29 = 0;
          if (a6)
          {
LABEL_38:
            if (!v30) {
              *a6 = v29;
            }
          }
LABEL_40:
          CFRelease(v14);
          return v30;
        }
LABEL_8:
        if (MediaSubType == 1634754915)
        {
          CFNumberRef number = 0;
          AudioCodecStringFromCMFormatDescriptionRef FormatDescription = FigCreateAudioCodecStringFromFormatDescription();
          if (!AudioCodecStringFromFormatDescription) {
            AudioCodecStringFromCMFormatDescriptionRef FormatDescription = mv_ValidateAudioCodecsParameterValue((uint64_t)number);
          }
          unsigned int v17 = AudioCodecStringFromFormatDescription;
          CFNumberRef v18 = number;
          if (!number)
          {
LABEL_28:
            if (v17) {
              goto LABEL_29;
            }
LABEL_35:
            uint64_t v30 = 0;
            goto LABEL_37;
          }
LABEL_27:
          CFRelease(v18);
          goto LABEL_28;
        }
        if (!HIBYTE(v32)
          || (FourCharCode v19 = CMFormatDescriptionGetMediaSubType(desc), (v20 = mv_CreateCFStringFrom4CC(v19)) == 0))
        {
          unsigned int v17 = FigSignalErrorAt();
          if (v17)
          {
LABEL_29:
            BOOL v29 = *(_DWORD *)(a1 + 104) == 1;
            if (*(_DWORD *)(a1 + 104) == 1) {
              uint64_t v30 = 0;
            }
            else {
              uint64_t v30 = v17;
            }
            if (!a6) {
              goto LABEL_40;
            }
            goto LABEL_38;
          }
          goto LABEL_35;
        }
        CFStringRef v21 = v20;
        CFBooleanRef BOOLean = 0;
        CFNumberRef number = 0;
        double valuePtr = 0.0;
        StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(desc);
        if (StreamBasicDescription)
        {
          p_mSampleRate = &StreamBasicDescription->mSampleRate;
          CFDictionaryRef v24 = *(const __CFDictionary **)(a1 + 112);
          CFTypeID TypeID = CFNumberGetTypeID();
          unsigned int CodecProperty = mv_GetCodecProperty(v24, v21, @"AudioCodecProfiles", @"AudioMaxSampleRate", TypeID, (const void **)&number);
          if (!CodecProperty)
          {
            if (!number || !CFNumberGetValue(number, kCFNumberFloat64Type, &valuePtr) || *p_mSampleRate <= valuePtr)
            {
              if (!a4) {
                goto LABEL_25;
              }
              CFDictionaryRef v27 = *(const __CFDictionary **)(a1 + 112);
              CFTypeID v28 = CFBooleanGetTypeID();
              unsigned int v17 = mv_GetCodecProperty(v27, v21, @"AudioCodecProfiles", @"TrackMustBeDisabled", v28, (const void **)&BOOLean);
              if (v17 || !BOOLean) {
                goto LABEL_26;
              }
              if (!*a4 || !CFBooleanGetValue(BOOLean))
              {
LABEL_25:
                unsigned int v17 = 0;
LABEL_26:
                CFNumberRef v18 = (CFNumberRef)v21;
                goto LABEL_27;
              }
            }
            unsigned int CodecProperty = FigSignalErrorAt();
          }
          unsigned int v17 = CodecProperty;
          goto LABEL_26;
        }
        unsigned int v17 = -12957;
        goto LABEL_26;
      }
    }
    uint64_t v30 = IsValueInArrayInDictionary;
    goto LABEL_40;
  }

  return FigSignalErrorAt();
}

uint64_t mv_CheckIfSubTitlesPlayable(uint64_t a1, void *a2, CMFormatDescriptionRef desc, unsigned char *a4, char *a5)
{
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  if (a4) {
    *a4 = FigCPEIsSupportedFormatDescription((uint64_t)desc);
  }
  CFStringRef CFStringFrom4CC = mv_CreateCFStringFrom4CC(MediaSubType);
  if (CFStringFrom4CC)
  {
    CFStringRef v12 = CFStringFrom4CC;
    __int16 v16 = 0;
    uint64_t IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), CFStringFrom4CC, a2, (Boolean *)&v16 + 1, &v16);
    if (!IsValueInArrayInDictionary)
    {
      if ((_BYTE)v16)
      {
        char v14 = 0;
        if (!HIBYTE(v16))
        {
          if (*(_DWORD *)(a1 + 104)) {
            uint64_t IsValueInArrayInDictionary = 0;
          }
          else {
            uint64_t IsValueInArrayInDictionary = FigSignalErrorAt();
          }
          char v14 = 1;
        }
      }
      else
      {
        char v14 = 0;
      }
      if (a5) {
        *a5 = v14;
      }
    }
    CFRelease(v12);
    return IsValueInArrayInDictionary;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t mv_CheckIfClosedCaptionsPlayable(uint64_t a1, void *a2, CMFormatDescriptionRef desc, BOOL *a4, char *a5)
{
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  FourCharCode v10 = MediaSubType;
  if (a4) {
    *a4 = MediaSubType == 1882599480;
  }
  CFStringRef CFStringFrom4CC = mv_CreateCFStringFrom4CC(MediaSubType);
  if (CFStringFrom4CC)
  {
    CFStringRef v12 = CFStringFrom4CC;
    __int16 v16 = 0;
    uint64_t IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), CFStringFrom4CC, a2, (Boolean *)&v16 + 1, &v16);
    if (!IsValueInArrayInDictionary)
    {
      if ((_BYTE)v16)
      {
        char v14 = 0;
        if (!HIBYTE(v16))
        {
          if (*(_DWORD *)(a1 + 104)) {
            uint64_t IsValueInArrayInDictionary = 0;
          }
          else {
            uint64_t IsValueInArrayInDictionary = FigSignalErrorAt();
          }
          char v14 = 1;
        }
      }
      else
      {
        char v14 = 0;
      }
      if (v10 != 1664495672 && v10 != 1664561208 && v10 != 1882599480)
      {
        uint64_t IsValueInArrayInDictionary = FigSignalErrorAt();
        char v14 = 1;
      }
      if (a5) {
        *a5 = v14;
      }
    }
    CFRelease(v12);
    return IsValueInArrayInDictionary;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t mv_CheckIfOtherMediaTypePlayable(uint64_t a1, void *a2, CMFormatDescriptionRef desc, char *a4)
{
  FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  CFStringRef CFStringFrom4CC = mv_CreateCFStringFrom4CC(MediaSubType);
  if (CFStringFrom4CC)
  {
    CFStringRef v9 = CFStringFrom4CC;
    __int16 v13 = 0;
    uint64_t IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), CFStringFrom4CC, a2, (Boolean *)&v13 + 1, &v13);
    if (!IsValueInArrayInDictionary)
    {
      if ((_BYTE)v13)
      {
        char v11 = 0;
        if (!HIBYTE(v13))
        {
          if (*(_DWORD *)(a1 + 104)) {
            uint64_t IsValueInArrayInDictionary = 0;
          }
          else {
            uint64_t IsValueInArrayInDictionary = FigSignalErrorAt();
          }
          char v11 = 1;
        }
      }
      else
      {
        char v11 = 0;
      }
      if (a4) {
        *a4 = v11;
      }
    }
    CFRelease(v9);
    return IsValueInArrayInDictionary;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMediaValidatorCreateInternal(void *a1)
{
  CFTypeRef v2 = malloc_type_calloc(1uLL, 0xE8uLL, 0x10E00405F25D67FuLL);
  if (v2 && (uint64_t v3 = FigReentrantMutexCreate(), (v2[26] = v3) != 0))
  {
    uint64_t v4 = 0;
    v2[8] = v2;
    *a1 = v2;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
    if (v4) {
      free(v2);
    }
  }
  return v4;
}

uint64_t FigMediaValidatorValidateAsyncInternal(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, const __CFDictionary *a5, unint64_t a6)
{
  v25[0] = @"com.apple.coremedia.mediavalidator";
  v25[1] = 0;
  CFDictionaryRef v12 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], MEMORY[0x1E4F21EA8], v25, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!a3
    || !a5
    || !(a2 | a6)
    || !CFDictionaryGetValue(a5, @"TrackTypes")
    || (!CFDictionaryGetValue(a5, @"vide")
      ? (BOOL v13 = CFDictionaryGetValue(a5, @"VideoCodecs") != 0)
      : (BOOL v13 = 1),
        !CFDictionaryGetValue(a5, @"soun")
      ? (BOOL v14 = CFDictionaryGetValue(a5, @"AudioCodecs") != 0)
      : (BOOL v14 = 1),
        !v14 || !v13))
  {
    uint64_t v21 = FigSignalErrorAt();
    if (!v12) {
      return v21;
    }
    goto LABEL_37;
  }
  CFArrayRef Value = CFDictionaryGetValue(a5, @"DiskCacheURL");
  if (Value) {
    CFArrayRef Value = CFRetain(Value);
  }
  *(void *)(a1 + 48) = Value;
  *(void *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = a4;
  *(void *)(a1 + 176) = CFRetain(a5);
  if (a6) {
    *(void *)(a1 + 56) = CFRetain((CFTypeRef)a6);
  }
  uint64_t ValidationType = mv_GetValidationType(a5, (int *)(a1 + 168));
  if (!ValidationType)
  {
    if (a2) {
      *(void *)a1 = CFRetain((CFTypeRef)a2);
    }
    CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(a5, @"RefMovieSecurityPolicy");
    if (v17
      && ((CFNumberRef v18 = v17, v19 = CFGetTypeID(v17), v19 != CFNumberGetTypeID())
       || !CFNumberGetValue(v18, kCFNumberSInt32Type, (void *)(a1 + 184)))
      || (*(void *)(a1 + 72) = CFDictionaryGetValue(a5, @"VideoTrackPresent"),
          uint64_t v20 = FigSemaphoreCreate(),
          (*(void *)(a1 + 216) = v20) == 0))
    {
LABEL_25:
      uint64_t v21 = FigSignalErrorAt();
      if (!v21) {
        goto LABEL_36;
      }
      goto LABEL_26;
    }
    uint64_t ValidationType = FigThreadCreate();
    if (!ValidationType)
    {
      if (!FigSemaphoreWaitRelative())
      {
        uint64_t v21 = 0;
        goto LABEL_36;
      }
      goto LABEL_25;
    }
  }
  uint64_t v21 = ValidationType;
LABEL_26:
  if (*(void *)(a1 + 216)) {
    FigSemaphoreDestroy();
  }
  if (*(void *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(void *)a1 = 0;
  }
  CFDictionaryRef v22 = *(const void **)(a1 + 176);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(a1 + 176) = 0;
  }
  CFDictionaryRef v23 = *(const void **)(a1 + 56);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(a1 + 56) = 0;
    if (!v12) {
      return v21;
    }
    goto LABEL_37;
  }
LABEL_36:
  if (v12) {
LABEL_37:
  }
    CFRelease(v12);
  return v21;
}

uint64_t FigMediaValidatorCreateSync(void *a1)
{
  uint64_t v3 = 0;
  uint64_t result = FigMediaValidatorCreateInternal(&v3);
  *a1 = v3;
  return result;
}

uint64_t FigMediaValidatorValidateURL(uint64_t a1, unint64_t a2, const __CFDictionary *a3, _DWORD *a4, _OWORD *a5)
{
  if (!a1) {
    return 4294954511;
  }
  if (*(void *)(a1 + 200) || *(unsigned char *)(a1 + 44) || *(_DWORD *)(a1 + 40)) {
    return 4294954342;
  }
  uint64_t v12 = 0;
  long long v13 = 0uLL;
  uint64_t v14 = FigSemaphoreCreate();
  uint64_t v6 = FigMediaValidatorValidateAsyncInternal(a1, a2, (uint64_t)completeSync, (uint64_t)&v12, a3, 0);
  if (!v6)
  {
    FigSemaphoreWaitRelative();
    uint64_t v6 = v12;
    *a4 = HIDWORD(v12);
    *a5 = v13;
  }
  FigSemaphoreDestroy();
  return v6;
}

uint64_t completeSync(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  *(_DWORD *)a2 = a3;
  *(_DWORD *)(a2 + 4) = a4;
  *(void *)(a2 + 8) = a5;
  *(void *)(a2 + 16) = a6;
  return FigSemaphoreSignal();
}

uint64_t FigMediaValidatorCreateWithByteStream(unint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4, void *a5)
{
  Boolean v15 = 0;
  uint64_t v10 = FigMediaValidatorCreateInternal(&v15);
  uint64_t v11 = v10;
  uint64_t v12 = v15;
  if (v15) {
    BOOL v13 = v10 == 0;
  }
  else {
    BOOL v13 = 0;
  }
  if (v13)
  {
    uint64_t v11 = FigMediaValidatorValidateAsyncInternal((uint64_t)v15, 0, a2, a3, a4, a1);
    if (v11) {
      free(v12);
    }
    else {
      *a5 = v12;
    }
  }
  return v11;
}

uint64_t FigMediaValidatorGetStatus(uint64_t a1, float *a2)
{
  if (!a1) {
    return 4294954511;
  }
  float v2 = 1.0;
  if (!*(unsigned char *)(a1 + 44))
  {
    float v2 = 0.3;
    if (!*(void *)(a1 + 80)) {
      float v2 = 0.0;
    }
  }
  uint64_t result = 0;
  *a2 = v2;
  return result;
}

uint64_t FigMediaValidatorValidateRFC4281ExtendedMIMEType(const __CFString *a1, const __CFArray *a2, const __CFDictionary *a3)
{
  CFTypeRef cf = 0;
  uint64_t v3 = mv_validateRFC4281ExtendedMIMETypeAndCopyStandardMIMEType(a1, a2, a3, 0, &cf);
  if (cf) {
    CFRelease(cf);
  }
  return v3;
}

uint64_t mv_validateRFC4281ExtendedMIMETypeAndCopyStandardMIMEType(const __CFString *a1, const __CFArray *a2, const __CFDictionary *a3, int a4, CFTypeRef *a5)
{
  uint64_t v5 = 0;
  if (a1)
  {
    if (a2)
    {
      unint64_t Length = CFStringGetLength(a1);
      uint64_t v5 = (char *)malloc_type_calloc(Length + 1, 1uLL, 0x100004077774924uLL);
      if (v5)
      {
        if (CFStringGetCString(a1, v5, Length + 1, 0x8000100u))
        {
          CFIndex v12 = 0;
          if (Length)
          {
            uint64_t v13 = MEMORY[0x1E4F14390];
            do
            {
              unsigned int v14 = v5[v12];
              if ((v14 & 0x80000000) != 0)
              {
                if (!__maskrune(v14, 0x4000uLL)) {
                  goto LABEL_13;
                }
              }
              else if ((*(_DWORD *)(v13 + 4 * v14 + 60) & 0x4000) == 0)
              {
                goto LABEL_13;
              }
              ++v12;
            }
            while (Length != v12);
            goto LABEL_35;
          }
LABEL_13:
          if (v12 != Length)
          {
            int v45 = a4;
            uint64_t v15 = 0;
            __int16 v16 = &v5[v12];
            do
            {
              uint64_t v17 = v15;
              if (v12 + v15 + 1 >= Length) {
                break;
              }
              unsigned int v18 = v16[v15 + 1];
              int v19 = (v18 & 0x80000000) != 0
                  ? __maskrune(v16[v15 + 1], 0x4000uLL)
                  : *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v18 + 60) & 0x4000;
              uint64_t v15 = v17 + 1;
            }
            while (v18 != 59 && v19 == 0);
            CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            v48.length = v17 + 1;
            v48.location = v12;
            CFStringRef v22 = CFStringCreateWithSubstring((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, v48);
            if (v22)
            {
              CFStringRef v23 = v22;
              if (a5) {
                *a5 = CFRetain(v22);
              }
              if (mv_IsStringInCFArrayList(v23, a2))
              {
                CFAllocatorRef alloc = v21;
                unint64_t v24 = v12 + v17 + 2;
                if (v24 >= Length)
                {
                  unsigned __int8 v25 = 0;
                }
                else
                {
                  unsigned __int8 v25 = 0;
                  do
                  {
                    int v26 = v5[v24];
                    if (v26 == 42)
                    {
                      unsigned __int8 v25 = 1;
                    }
                    else if (v26 == 61)
                    {
                      goto LABEL_39;
                    }
                    ++v24;
                  }
                  while (v24 < Length);
                  unint64_t v24 = Length;
                }
LABEL_39:
                unint64_t v29 = v24 + 1;
                while (1)
                {
                  unint64_t v30 = v29;
                  if (v29 >= Length) {
                    break;
                  }
                  unsigned int v31 = v5[v29];
                  if ((v31 & 0x80000000) != 0) {
                    int v32 = __maskrune(v31, 0x4000uLL);
                  }
                  else {
                    int v32 = *(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v31 + 60) & 0x4000;
                  }
                  unint64_t v29 = v30 + 1;
                  if (!v32)
                  {
                    if (v25)
                    {
                      CFStringRef v33 = v23;
                      int v46 = 0;
                      int v43 = 0;
                      int v44 = 0;
                      char v34 = 0;
                      unint64_t v35 = v30;
                      while (1)
                      {
                        unsigned int v36 = v5[v35];
                        if ((v36 & 0x80000000) != 0)
                        {
                          if (__maskrune(v5[v35], 0x4000uLL)) {
                            goto LABEL_60;
                          }
                        }
                        else if ((*(_DWORD *)(MEMORY[0x1E4F14390] + 4 * v36 + 60) & 0x4000) != 0)
                        {
                          goto LABEL_60;
                        }
                        if (v36 == 39)
                        {
                          int v37 = v46;
                          if (v44) {
                            int v37 = 1;
                          }
                          int v46 = v37;
                          int v44 = 1;
                        }
                        else if (v36 == 34)
                        {
                          if (v43)
                          {
                            char v34 = 1;
                            goto LABEL_66;
                          }
                          unint64_t v30 = v35 + 1;
                          int v43 = 1;
                        }
                        else if (v34 == 0 && v46 != 0)
                        {
                          char v34 = 1;
                          unint64_t v30 = v35;
                        }
LABEL_60:
                        if (++v35 >= Length) {
                          goto LABEL_65;
                        }
                      }
                    }
LABEL_64:
                    CFStringRef v33 = v23;
                    char v34 = 1;
LABEL_65:
                    unint64_t v35 = Length;
LABEL_66:
                    uint64_t v27 = 0;
                    if (v34 && v30 < Length)
                    {
                      v39.length = v35 - v30;
                      BOOL v38 = v35 > v30;
                      CFStringRef v23 = v33;
                      if (v38)
                      {
                        v39.location = v30;
                        CFStringRef v40 = CFStringCreateWithSubstring(alloc, a1, v39);
                        if (v40)
                        {
                          CFStringRef v41 = v40;
                          int v47 = 0;
                          uint64_t v27 = FigMediaValidatorValidateRFC4281Codecs(v33, v40, v25, a3, v45, &v47);
                          CFRelease(v41);
                        }
                        else
                        {
                          uint64_t v27 = 4294954344;
                        }
                      }
                    }
                    else
                    {
                      CFStringRef v23 = v33;
                    }
                    goto LABEL_74;
                  }
                }
                if (!v25) {
                  goto LABEL_64;
                }
                uint64_t v27 = 0;
LABEL_74:
                free(v5);
              }
              else
              {
                free(v5);
                uint64_t v27 = 4294954344;
              }
              CFRelease(v23);
              return v27;
            }
          }
        }
      }
    }
  }
LABEL_35:
  free(v5);
  return 4294954344;
}

uint64_t FigMediaValidatorValidateRFC4281ExtendedMIMETypeForStreaming(const __CFString *a1, const __CFArray *a2, const __CFDictionary *a3)
{
  return mv_validateRFC4281ExtendedMIMETypeAndCopyStandardMIMEType(a1, a2, a3, 1, 0);
}

uint64_t FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(CFStringRef theString, const __CFDictionary *a2, _DWORD *a3, const __CFDictionary **a4)
{
  int v51 = 1;
  if (FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming_onceToken == -1)
  {
    if (!a2) {
      goto LABEL_4;
    }
  }
  else
  {
    dispatch_once(&FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming_onceToken, &__block_literal_global_49);
    if (!a2) {
      goto LABEL_4;
    }
  }
  if (mv_GetValidationType(a2, &v51))
  {
LABEL_195:
    return FigSignalErrorAt();
  }
LABEL_4:
  if (!theString) {
    goto LABEL_195;
  }
  CFIndex v8 = CFStringGetLength(theString) + 1;
  CFStringRef v9 = (char *)malloc_type_malloc(v8, 0x65F103C6uLL);
  if (!v9) {
    goto LABEL_195;
  }
  uint64_t v10 = v9;
  if (!CFStringGetCString(theString, v9, v8, 0x600u))
  {
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_191;
  }
  __stringp = v10;
  if (*v10 == 34)
  {
    __stringp = v10 + 1;
    uint64_t v11 = strchr(v10 + 1, 34);
    if (!v11 || !*v11)
    {
      uint64_t v27 = 4294954344;
      goto LABEL_191;
    }
    *uint64_t v11 = 0;
  }
  CFIndex v12 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (a4) {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  else {
    CFDictionaryRef Mutable = 0;
  }
  BOOL v49 = a4;
  uint64_t v50 = v10;
  if (a3) {
    *a3 = 0;
  }
  uint64_t v14 = MEMORY[0x1E4F14390];
  CFAllocatorRef allocator = *v12;
  qmemcpy(v47, "tcaarcaamcaa", sizeof(v47));
  do
  {
    uint64_t v15 = strsep(&__stringp, ",");
    __int16 v16 = v15;
    int v17 = v51;
    if (FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming_enableRefactoring)
    {
      char v18 = *v15;
      if (*v15)
      {
        do
        {
          if (v18 < 0)
          {
            if (!__maskrune(v18, 0x4000uLL)) {
              break;
            }
          }
          else if ((*(_DWORD *)(v14 + 4 * v18 + 60) & 0x4000) == 0)
          {
            break;
          }
          int v19 = *++v16;
          char v18 = v19;
        }
        while (v19);
      }
      int v54 = v16;
      if (*v16)
      {
        uint64_t v20 = strsep(&v54, ".");
        CFDictionaryRef v21 = a2;
        if (a2)
        {
          CFDictionaryRef v21 = a2;
          if (v17 == 2)
          {
            if (mv_IsPlistRequiredforRFC4281IdValidation(a2, v20)) {
              CFDictionaryRef v21 = a2;
            }
            else {
              CFDictionaryRef v21 = 0;
            }
          }
        }
        if (strlen(v20) == 4) {
          signed int v22 = bswap32(*(_DWORD *)v20);
        }
        else {
          signed int v22 = 0;
        }
        uint64_t v26 = mv_ValidateRFC4281IdEvaluationFn(v22, (uint64_t)v54, 2, 1u, v21, a3, Mutable);
      }
      else
      {
LABEL_39:
        uint64_t v26 = FigSignalErrorAt();
      }
      uint64_t v27 = v26;
      goto LABEL_43;
    }
    int v54 = v15;
    int v53 = 0;
    char v23 = *v15;
    if (!*v15) {
      goto LABEL_39;
    }
    unint64_t v24 = v15 + 1;
    while ((v23 & 0x80) == 0)
    {
      if ((*(_DWORD *)(v14 + 4 * v23 + 60) & 0x4000) == 0) {
        goto LABEL_46;
      }
LABEL_38:
      int v54 = v24;
      int v25 = *v24++;
      char v23 = v25;
      if (!v25) {
        goto LABEL_39;
      }
    }
    if (__maskrune(v23, 0x4000uLL)) {
      goto LABEL_38;
    }
LABEL_46:
    if (!*(v24 - 1)) {
      goto LABEL_39;
    }
    CFTypeID v28 = strsep(&v54, ".");
    uint64_t v27 = (uint64_t)a2;
    if (a2)
    {
      uint64_t v27 = (uint64_t)a2;
      if (v17 == 2)
      {
        if (mv_IsPlistRequiredforRFC4281IdValidation(a2, v28)) {
          uint64_t v27 = (uint64_t)a2;
        }
        else {
          uint64_t v27 = 0;
        }
      }
    }
    if (!strcmp("mp4a", v28))
    {
      if (!v54) {
        goto LABEL_108;
      }
      uint64_t v56 = 0;
      char v55 = 0;
      if (sscanf(v54, "%x.%d%c", (char *)&v56 + 4, &v56, &v55) != 2) {
        goto LABEL_123;
      }
      if (HIDWORD(v56) == 64)
      {
        switch((int)v56)
        {
          case 29:
LABEL_94:
            CFDictionaryRef v31 = (const __CFDictionary *)v27;
            unsigned int v32 = 1633772320;
            goto LABEL_121;
          case 30:
          case 31:
          case 35:
          case 36:
          case 37:
          case 38:
          case 40:
          case 41:
            goto LABEL_108;
          case 32:
            CFDictionaryRef v31 = (const __CFDictionary *)v27;
            unsigned int v32 = 778924081;
            goto LABEL_121;
          case 33:
            unsigned int v32 = 778924082;
            goto LABEL_116;
          case 34:
            unsigned int v32 = 778924083;
            goto LABEL_116;
          case 39:
            int v37 = 69;
            goto LABEL_115;
          case 42:
            CFDictionaryRef v31 = (const __CFDictionary *)v27;
            unsigned int v32 = 1970495843;
            goto LABEL_121;
          default:
            switch((int)v56)
            {
              case 1:
                CFDictionaryRef v31 = (const __CFDictionary *)v27;
                unsigned int v32 = v47[2];
                goto LABEL_121;
              case 2:
              case 5:
                goto LABEL_94;
              case 3:
                CFDictionaryRef v31 = (const __CFDictionary *)v27;
                unsigned int v32 = v47[1];
                goto LABEL_121;
              case 4:
                CFDictionaryRef v31 = (const __CFDictionary *)v27;
                unsigned int v32 = v47[0];
                goto LABEL_121;
              default:
                if (v56 != 23) {
                  goto LABEL_108;
                }
                int v37 = 76;
                break;
            }
LABEL_115:
            unsigned int v32 = v37 | 0x61616320;
LABEL_116:
            CFDictionaryRef v31 = (const __CFDictionary *)v27;
LABEL_121:
            uint64_t v38 = mv_ValidateRFC4281AudioFromCodecType(v31, v32);
            break;
        }
      }
      else
      {
LABEL_108:
        uint64_t v38 = FigSignalErrorAt();
      }
      uint64_t v27 = v38;
      if (v38)
      {
LABEL_128:
        unsigned int v29 = 0;
        goto LABEL_129;
      }
LABEL_123:
      uint64_t v56 = 0;
      char v55 = 0;
      if (!v54) {
        goto LABEL_39;
      }
      if (sscanf(v54, "%x.%d%c", (char *)&v56 + 4, &v56, &v55) == 2)
      {
        if (HIDWORD(v56) == 64) {
          uint64_t v27 = 0;
        }
        else {
          uint64_t v27 = FigSignalErrorAt();
        }
        unsigned int v29 = 0;
        if ((int)v56 <= 28)
        {
          switch(v56)
          {
            case 2:
              unsigned int v29 = 1633772320;
              break;
            case 5:
              unsigned int v29 = 1633772392;
              break;
            case 0x17:
              int v42 = 76;
LABEL_154:
              unsigned int v29 = v42 | 0x61616320;
              break;
          }
        }
        else
        {
          switch((int)v56)
          {
            case 29:
              int v42 = 80;
              goto LABEL_154;
            case 32:
              unsigned int v29 = 778924081;
              break;
            case 33:
              unsigned int v29 = 778924082;
              break;
            case 34:
              unsigned int v29 = 778924083;
              break;
            case 39:
              int v42 = 69;
              goto LABEL_154;
            case 42:
              unsigned int v29 = 1970495843;
              break;
            default:
              goto LABEL_129;
          }
        }
        goto LABEL_129;
      }
      uint64_t v27 = 0;
      goto LABEL_128;
    }
    if (!strcmp("avc1", v28) || !strcmp("avc3", v28))
    {
      if (v27) {
        uint64_t v27 = mv_ValidateRFC4281_avc1_avc3(v54, (const __CFDictionary *)v27);
      }
      unsigned int v29 = bswap32(*(_DWORD *)v28);
      goto LABEL_78;
    }
    if (!strcmp("hvc1", v28) || !strcmp("hev1", v28))
    {
      if (v27)
      {
        unsigned int v33 = mv_ValidateRFC4281_hvc1_hev1(v54, (const __CFDictionary *)v27, &v53);
LABEL_86:
        if (v33 == -16055) {
          uint64_t v27 = 4294954341;
        }
        else {
          uint64_t v27 = v33;
        }
      }
      if (v53 == 1) {
        int v30 = 26;
      }
      else {
        int v30 = 18;
      }
      unsigned int v29 = bswap32(*(_DWORD *)v28);
      goto LABEL_130;
    }
    if (!strcmp("av01", v28))
    {
      unsigned int v29 = 1635135537;
      unsigned int v34 = mv_ValidateRFC4281_av01(v54, (const __CFDictionary *)v27, &v53);
LABEL_96:
      if (v34 == -16055) {
        uint64_t v27 = 4294954341;
      }
      else {
        uint64_t v27 = v34;
      }
      if (v53)
      {
        if (v53 == 1) {
          int v30 = 26;
        }
        else {
          int v30 = 18;
        }
        goto LABEL_130;
      }
LABEL_78:
      int v30 = 2;
      goto LABEL_130;
    }
    if (!strcmp("ac-3", v28))
    {
      unsigned int v29 = 1633889587;
      if (v27)
      {
        CFDictionaryRef v35 = (const __CFDictionary *)v27;
        unsigned int v36 = 1633889587;
        goto LABEL_162;
      }
LABEL_129:
      int v30 = 1;
      goto LABEL_130;
    }
    if (!strcmp("ec-3", v28))
    {
      unsigned int v29 = 1700998451;
      if (!v27) {
        goto LABEL_129;
      }
      CFDictionaryRef v35 = (const __CFDictionary *)v27;
      unsigned int v36 = 1700998451;
      goto LABEL_162;
    }
    if (!strcmp("fLaC", v28))
    {
      unsigned int v29 = 1718378851;
      if (!v27) {
        goto LABEL_129;
      }
      CFDictionaryRef v35 = (const __CFDictionary *)v27;
      unsigned int v36 = 1718378851;
      goto LABEL_162;
    }
    if (!strcmp("Opus", v28))
    {
      unsigned int v29 = 1869641075;
      if (!v27) {
        goto LABEL_129;
      }
      CFDictionaryRef v35 = (const __CFDictionary *)v27;
      unsigned int v36 = 1869641075;
LABEL_162:
      uint64_t v43 = mv_ValidateRFC4281AudioFromCodecType(v35, v36);
LABEL_163:
      uint64_t v27 = v43;
      goto LABEL_129;
    }
    if (!strcmp("alac", v28))
    {
      unsigned int v29 = 1634492771;
      if (!v27) {
        goto LABEL_129;
      }
      CFDictionaryRef v35 = (const __CFDictionary *)v27;
      unsigned int v36 = 1634492771;
      goto LABEL_162;
    }
    if (!strcmp("apac", v28))
    {
      unsigned int v29 = 1634754915;
      uint64_t v43 = mv_ValidateRFC4281_apac(0x61706163u, (uint64_t)v54);
      goto LABEL_163;
    }
    if (!strcmp("wvtt", v28))
    {
      uint64_t v27 = 0;
      int v30 = 0;
      unsigned int v29 = 2004251764;
      goto LABEL_130;
    }
    if (!strcmp("xvtt", v28))
    {
      uint64_t v27 = (uint64_t)mv_ValidateRFC4281_xvtt(v54);
      int v30 = 0;
      unsigned int v29 = 2021028980;
      goto LABEL_130;
    }
    if (!strcmp("stpp", v28))
    {
      uint64_t v27 = mv_ValidateRFC4281_ttml(v54);
      int v30 = 0;
      unsigned int v29 = 1937010800;
      goto LABEL_130;
    }
    if (!strcmp("dvhe", v28) || !strcmp("dvh1", v28))
    {
      unsigned int v33 = mv_ValidateRFC4281_dvhe_dvh1(v54, (const __CFDictionary *)v27, &v53);
      goto LABEL_86;
    }
    if (!strcmp("dav1", v28))
    {
      unsigned int v29 = 1684108849;
      unsigned int v34 = mv_ValidateRFC4281_dav1(v54, (const __CFDictionary *)v27, &v53);
      goto LABEL_96;
    }
    if (!strcmp("vp09", v28))
    {
      if (v27)
      {
        unsigned int v44 = mv_ValidateRFC4281_vp9(v54, (const __CFDictionary *)v27, (BOOL *)&v53);
        if (v44 == -16055) {
          uint64_t v27 = 4294954341;
        }
        else {
          uint64_t v27 = v44;
        }
      }
      if (v53 == 1) {
        int v30 = 26;
      }
      else {
        int v30 = 18;
      }
      unsigned int v29 = 1987063865;
      goto LABEL_130;
    }
    unsigned int v29 = 1785750887;
    if (!strcmp("jpeg", v28) || !strcmp("mjpg", v28)) {
      goto LABEL_184;
    }
    if (strcmp("mp4v", v28)) {
      goto LABEL_74;
    }
    HIDWORD(v56) = 0;
    LOBYTE(v56) = 0;
    if (!v54) {
      goto LABEL_39;
    }
    int v45 = sscanf(v54, "%x%c", (char *)&v56 + 4, &v56);
    if (HIDWORD(v56) == 108)
    {
      if (v45 != 1) {
        goto LABEL_39;
      }
LABEL_184:
      uint64_t v27 = 0;
      goto LABEL_78;
    }
    if (HIDWORD(v56) == 32)
    {
      if (v45 != 2) {
        goto LABEL_39;
      }
LABEL_74:
      uint64_t v27 = 0;
      unsigned int v29 = 0;
      int v30 = 4;
    }
    else
    {
      uint64_t v27 = FigSignalErrorAt();
      int v30 = 0;
      unsigned int v29 = 0;
    }
LABEL_130:
    if (a3) {
      *a3 |= v30;
    }
    if (Mutable)
    {
      CFRange v39 = @"soun";
      if ((v30 & 1) != 0 || (CFRange v39 = @"vide", (v30 & 2) != 0))
      {
        if (CFDictionaryContainsKey(Mutable, v39))
        {
          CFArrayRef Value = CFDictionaryGetValue(Mutable, v39);
          if (!Value) {
            goto LABEL_43;
          }
        }
        else
        {
          CFMutableArrayRef v41 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
          if (!v41) {
            goto LABEL_43;
          }
          CFArrayRef Value = v41;
          CFDictionarySetValue(Mutable, v39, v41);
          CFRelease(Value);
        }
        if (!mv_IsIntInCFArray(v29, (const __CFArray *)Value)) {
          FigCFArrayAppendInt32();
        }
      }
    }
LABEL_43:
    if (v27) {
      goto LABEL_188;
    }
  }
  while (__stringp);
  if (v49)
  {
    uint64_t v27 = 0;
    *BOOL v49 = Mutable;
    goto LABEL_190;
  }
LABEL_188:
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_190:
  uint64_t v10 = (char *)v50;
LABEL_191:
  free(v10);
  return v27;
}

uint64_t __FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming_block_invoke()
{
  uint64_t result = FigGetCFPreferenceNumberWithDefault();
  FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming_enableRefactoring = result;
  return result;
}

uint64_t FigMediaValidatorValidateRFC4281CodecsForStreaming(const __CFString *a1, const __CFDictionary *a2, _DWORD *a3)
{
  return FigMediaValidatorValidateAndTranslateRFC4281CodecsForStreaming(a1, a2, a3, 0);
}

uint64_t FigCopySetOfAudioSupportedMIMETypes(const __CFAllocator *a1, __CFSet **a2)
{
  if (a2 && (CFMutableSetRef Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E4F20258])) != 0)
  {
    uint64_t v4 = Mutable;
    uint64_t v5 = (const void **)audioMimeTypes[0];
    if (audioMimeTypes[0])
    {
      uint64_t v6 = off_1E9335A40;
      do
      {
        CFSetAddValue(v4, *v5);
        long long v7 = (const void **)*v6++;
        uint64_t v5 = v7;
      }
      while (v7);
    }
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCopySetOfPlaylistSupportedMIMETypes(const __CFAllocator *a1, __CFSet **a2)
{
  if (a2 && (CFMutableSetRef Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E4F20258])) != 0)
  {
    uint64_t v4 = Mutable;
    uint64_t v5 = (const void **)streamingMimeType[0];
    if (streamingMimeType[0])
    {
      uint64_t v6 = off_1E9335AD0;
      do
      {
        CFSetAddValue(v4, *v5);
        long long v7 = (const void **)*v6++;
        uint64_t v5 = v7;
      }
      while (v7);
    }
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCopySetOfStreamingSupportedMIMETypes(const __CFAllocator *a1, __CFSet **a2)
{
  if (a2 && (CFMutableSetRef Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E4F20258])) != 0)
  {
    uint64_t v4 = Mutable;
    uint64_t v5 = (const void **)streamingMimeType[0];
    if (streamingMimeType[0])
    {
      uint64_t v6 = off_1E9335AD0;
      do
      {
        CFSetAddValue(v4, *v5);
        long long v7 = (const void **)*v6++;
        uint64_t v5 = v7;
      }
      while (v7);
    }
    CFIndex v8 = (const void **)audioMimeTypes[0];
    if (audioMimeTypes[0])
    {
      CFStringRef v9 = off_1E9335A40;
      do
      {
        CFSetAddValue(v4, *v8);
        uint64_t v10 = (const void **)*v9++;
        CFIndex v8 = v10;
      }
      while (v10);
    }
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigCopySetOfStreamingSupportedUTIs(const __CFAllocator *a1, __CFSet **a2)
{
  if (a2 && (CFMutableSetRef Mutable = CFSetCreateMutable(a1, 0, MEMORY[0x1E4F20258])) != 0)
  {
    uint64_t v4 = Mutable;
    for (uint64_t i = 0; i != 2; ++i)
      CFSetAddValue(v4, *streamingUTIs[i]);
    uint64_t v6 = (const void **)audioUTIs[0];
    if (audioUTIs[0])
    {
      long long v7 = &off_1E9335A98;
      do
      {
        CFSetAddValue(v4, *v6);
        CFIndex v8 = (const void **)*v7++;
        uint64_t v6 = v8;
      }
      while (v8);
    }
    *a2 = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFDictionaryRef FigMediaValidatorGetMaxFrameRate(const __CFDictionary *result)
{
  if (result) {
    return (const __CFDictionary *)CFDictionaryGetValue(result, @"MaxFrameRate");
  }
  return result;
}

uint64_t FigMediaValidatorCreateMediaValidatorPropertyList(uint64_t a1, void *a2)
{
  if (a1 && a2)
  {
    *a2 = MEMORY[0x19970CE00](*MEMORY[0x1E4F1CF80], @"com.apple.MediaToolbox", a1);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t mv_CheckIfFormatReaderIsSupported(uint64_t a1, uint64_t a2)
{
  uint64_t result = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 112), @"AllowedFormatReaders");
  if (result)
  {
    CFArrayRef v4 = (const __CFArray *)result;
    CFTypeRef value = 0;
    uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(a2);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    CFIndex v8 = *(uint64_t (**)(uint64_t, __CFString *, void, void **))(v7 + 48);
    if (v8)
    {
      uint64_t result = v8(FigBaseObject, @"Identifier", *MEMORY[0x1E4F1CF80], &value);
      if (!result)
      {
        v11.length = CFArrayGetCount(v4);
        v11.location = 0;
        int v9 = CFArrayContainsValue(v4, v11, value);
        if (value) {
          CFRelease(value);
        }
        if (v9) {
          return 0;
        }
        else {
          return FigSignalErrorAt();
        }
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

uint64_t mv_CheckIfMatrixIsSupported(const void *a1, CFArrayRef theArray)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  float v21 = 0.0;
  long long v19 = 0u;
  long long v20 = 0u;
  if (CFArrayGetCount(theArray) != 9) {
    return 4294954344;
  }
  CFIndex v4 = 0;
  uint64_t v5 = &v19;
  do
  {
    CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(theArray, v4);
    CFNumberGetValue(ValueAtIndex, kCFNumberFloat32Type, v5);
    ++v4;
    uint64_t v5 = (long long *)((char *)v5 + 4);
  }
  while (v4 != 9);
  int v7 = 8;
  if (*((float *)&v19 + 2) == 0.0 && *((float *)&v20 + 1) == 0.0 && v21 == 1.0)
  {
    int v9 = *((float *)&v20 + 2) != 0.0;
    if (*((float *)&v20 + 3) != 0.0) {
      int v9 = 1;
    }
    float v10 = *((float *)&v19 + 1);
    if (*(float *)&v19 == 0.0)
    {
      float v12 = *((float *)&v19 + 3);
      float v11 = *(float *)&v20;
      BOOL v13 = *((float *)&v19 + 1) == 1.0 && *((float *)&v19 + 3) == -1.0;
      if (v13 && *(float *)&v20 == 0.0) {
        goto LABEL_29;
      }
      if (*((float *)&v19 + 1) == -1.0)
      {
        BOOL v14 = 0;
        float v10 = -1.0;
        if (*((float *)&v19 + 3) != 1.0 || *(float *)&v20 != 0.0) {
          goto LABEL_35;
        }
        goto LABEL_29;
      }
    }
    else
    {
      float v12 = *((float *)&v19 + 3);
      float v11 = *(float *)&v20;
    }
    BOOL v14 = *((float *)&v19 + 1) == 0.0;
    if (*(float *)&v19 != -1.0 || *((float *)&v19 + 1) != 0.0 || v11 != -1.0 || v12 != 0.0)
    {
      if (*(float *)&v19 != 0.0) {
        goto LABEL_37;
      }
      if (*((float *)&v19 + 1) > 0.0 && v12 < 0.0 && v11 == 0.0)
      {
LABEL_41:
        if (*(float *)&v19 != v11 || v10 != (float)-v12) {
          v9 |= 0x20u;
        }
        int v7 = v9 | 0x50;
        goto LABEL_63;
      }
      if (*((float *)&v19 + 1) >= 0.0) {
        goto LABEL_37;
      }
LABEL_35:
      if (v12 <= 0.0 || v11 != 0.0)
      {
LABEL_37:
        if (*(float *)&v19 >= 0.0 || !v14 || v11 >= 0.0 || v12 != 0.0)
        {
          if (v10 == 0.0 && v12 == 0.0)
          {
            if (*(float *)&v19 != v11) {
              v9 |= 0x20u;
            }
            if (*(float *)&v19 <= 0.0 || v11 <= 0.0 || *(float *)&v19 == 1.0 && v11 == 1.0)
            {
              if (v11 == 1.0 && *(float *)&v19 == 1.0) {
                int v7 = v9;
              }
              else {
                int v7 = v9 | 2;
              }
            }
            else
            {
              int v7 = v9 | 0x10;
            }
          }
          else
          {
            int v7 = v9 | 4;
          }
          goto LABEL_63;
        }
        goto LABEL_41;
      }
      goto LABEL_41;
    }
LABEL_29:
    int v7 = v9 | 0x40;
  }
LABEL_63:
  if (CFEqual(a1, @"Identity"))
  {
    int v18 = -1;
  }
  else if (CFEqual(a1, @"UprightUniformScale"))
  {
    int v18 = -18;
  }
  else if (CFEqual(a1, @"UprightScale"))
  {
    int v18 = -50;
  }
  else if (CFEqual(a1, @"Scale"))
  {
    int v18 = -52;
  }
  else if (CFEqual(a1, @"OrthogonalRotationAndUniformScale"))
  {
    int v18 = -82;
  }
  else if (CFEqual(a1, @"OrthogonalRotationAndUprightScale"))
  {
    int v18 = -114;
  }
  else if (CFEqual(a1, @"OrthogonalRotationAndScale"))
  {
    int v18 = -116;
  }
  else if (CFEqual(a1, @"OrthogonalRotation"))
  {
    int v18 = -66;
  }
  else if (CFEqual(a1, @"Linear"))
  {
    int v18 = -120;
  }
  else
  {
    int v18 = -1;
  }
  if ((v18 & v7) != 0) {
    return FigSignalErrorAt();
  }
  else {
    return 0;
  }
}

uint64_t mv_ValidateTrackWithTrackReader(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  int v73 = 0;
  char v70 = 0;
  CFTypeRef cf = 0;
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  Boolean v74 = 0;
  int v72 = 0;
  char v71 = 0;
  BOOL v14 = *(uint64_t (**)(uint64_t, int *, int *))(v13 + 8);
  if (!v14)
  {
    CFStringRef CFStringFrom4CC = 0;
    goto LABEL_11;
  }
  uint64_t v15 = v14(a3, &v72, &v73);
  CFStringRef CFStringFrom4CC = 0;
  if (v15 || v73 == 1751740020) {
    goto LABEL_12;
  }
  if (!a4)
  {
    CFTypeRef v81 = 0;
    CFDictionaryRef v82 = 0;
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a3);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v22 = *(void (**)(uint64_t, __CFString *, void, int **))(v19 + 48);
    if (v22)
    {
      v22(FigBaseObject, @"EditCursorService", *MEMORY[0x1E4F1CF80], &v82);
      char v23 = v82;
      if (!v82)
      {
        uint64_t v26 = 0;
        goto LABEL_44;
      }
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v24) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = 0;
      }
      uint64_t v27 = *(void (**)(int *, CFArrayRef *, CFTypeRef *))(v25 + 8);
      if (v27)
      {
        *(_OWORD *)CFArrayRef theArray = *MEMORY[0x1E4F1FA08];
        *(void *)&long long v76 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
        v27(v23, theArray, &v81);
        if (v81)
        {
          uint64_t v26 = 0;
          while (1)
          {
            long long v79 = 0u;
            long long v80 = 0u;
            long long v77 = 0u;
            long long v78 = 0u;
            *(_OWORD *)CFArrayRef theArray = 0u;
            long long v76 = 0u;
            CFTypeRef v28 = v81;
            uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v29) {
              uint64_t v30 = v29;
            }
            else {
              uint64_t v30 = 0;
            }
            CFDictionaryRef v31 = *(unsigned int (**)(CFTypeRef, CFArrayRef *))(v30 + 24);
            if (v31 && !v31(v28, theArray) && (BYTE4(theArray[1]) & 1) != 0)
            {
              if (v26 > 0)
              {
                uint64_t v26 = 2;
                goto LABEL_42;
              }
              ++v26;
            }
            CFTypeRef v32 = v81;
            uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v33) {
              uint64_t v34 = v33;
            }
            else {
              uint64_t v34 = 0;
            }
            CFDictionaryRef v35 = *(unsigned int (**)(CFTypeRef, uint64_t))(v34 + 16);
            if (!v35 || v35(v32, 1)) {
              goto LABEL_42;
            }
          }
        }
      }
    }
    uint64_t v26 = 0;
LABEL_42:
    if (v82)
    {
      CFRelease(v82);
      CFDictionaryRef v82 = 0;
    }
LABEL_44:
    if (v81) {
      CFRelease(v81);
    }
    if (v26 >= 2)
    {
      uint64_t v15 = FigSignalErrorAt();
      goto LABEL_59;
    }
  }
  int TrackBoolean = mv_GetTrackBoolean(a3, @"TrackEnabled", 1);
  if (!TrackBoolean && !a5 && *(_DWORD *)(a1 + 104) == 1)
  {
    uint64_t v15 = 0;
LABEL_59:
    CFStringRef CFStringFrom4CC = 0;
    goto LABEL_12;
  }
  unsigned int v37 = v73;
  if (v73 == 1952807028)
  {
    theArray[0] = 0;
    CFDictionaryRef v82 = 0;
    CFStringRef CFStringFrom4CC = 0;
    if (!FCSupport_GetListOfChapterTitleTrackIDs(a2, (uint64_t *)theArray, &v82, 0))
    {
      CFArrayRef v38 = theArray[0];
      if ((uint64_t)theArray[0] < 1)
      {
LABEL_54:
        CFStringRef CFStringFrom4CC = 0;
      }
      else
      {
        CFRange v39 = v82;
        while (1)
        {
          int v40 = *v39++;
          if (v40 == v72) {
            break;
          }
          CFArrayRef v38 = (CFArrayRef)((char *)v38 - 1);
          if (!v38) {
            goto LABEL_54;
          }
        }
        CFStringRef CFStringFrom4CC = (void *)CFRetain(@"ChapterName");
      }
    }
    if (v82) {
      free(v82);
    }
    if (CFStringFrom4CC) {
      goto LABEL_66;
    }
    unsigned int v37 = v73;
  }
  CFStringRef CFStringFrom4CC = (void *)mv_CreateCFStringFrom4CC(v37);
  if (!CFStringFrom4CC) {
    goto LABEL_92;
  }
LABEL_66:
  uint64_t IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*(const __CFDictionary **)(a1 + 112), CFStringFrom4CC, @"TrackTypes", &v74, &v71);
  if (IsValueInArrayInDictionary)
  {
LABEL_93:
    uint64_t v15 = IsValueInArrayInDictionary;
    goto LABEL_12;
  }
  if (!v71) {
    goto LABEL_92;
  }
  if (!v74 && (a5 || !*(_DWORD *)(a1 + 104)))
  {
    if (!CFEqual(CFStringFrom4CC, @"ChapterName"))
    {
      uint64_t v15 = 4294954335;
      goto LABEL_12;
    }
    goto LABEL_92;
  }
  FigCFDictionaryGetBooleanIfPresent();
  int v42 = mv_GetTrackBoolean(a3, @"TrackIsSelfContained", 1);
  uint64_t v43 = (void *)MEMORY[0x1E4F1CF80];
  if (!v42)
  {
LABEL_92:
    uint64_t IsValueInArrayInDictionary = FigSignalErrorAt();
    goto LABEL_93;
  }
  uint64_t v44 = FigTrackReaderGetFigBaseObject(a3);
  uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v45) {
    uint64_t v46 = v45;
  }
  else {
    uint64_t v46 = 0;
  }
  int v47 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v46 + 48);
  if (!v47)
  {
LABEL_11:
    uint64_t v15 = 4294954514;
    goto LABEL_12;
  }
  uint64_t IsValueInArrayInDictionary = v47(v44, @"TrackFormatDescriptionArray", *v43, &cf);
  if (IsValueInArrayInDictionary) {
    goto LABEL_93;
  }
  if (!cf) {
    goto LABEL_92;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
  if (!Count) {
    goto LABEL_92;
  }
  uint64_t v49 = Count;
  if (v73 <= 1936684397)
  {
    if (v73 == 1668047728)
    {
      CFArrayRef v63 = (const __CFArray *)cf;
      LOBYTE(theArray[0]) = 0;
      LOBYTE(v82) = 0;
      if (Count >= 1)
      {
        CFIndex v64 = 0;
        char v56 = 0;
        while (1)
        {
          CFNumberRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v63, v64);
          uint64_t IsValueInArrayInDictionary = mv_CheckIfClosedCaptionsPlayable(a1, CFStringFrom4CC, ValueAtIndex, (BOOL *)theArray, (char *)&v82);
          if (IsValueInArrayInDictionary) {
            goto LABEL_93;
          }
          if ((_BYTE)v82) {
            goto LABEL_149;
          }
          if (LOBYTE(theArray[0])) {
            char v56 = 1;
          }
          if (v49 == ++v64) {
            goto LABEL_143;
          }
        }
      }
      char v56 = 0;
LABEL_143:
      if (!TrackBoolean) {
        goto LABEL_149;
      }
      uint64_t v67 = *(void *)(a1 + 88);
      *(void *)(a1 + 88) = v67 + 1;
    }
    else
    {
      if (v73 != 1935832172) {
        goto LABEL_114;
      }
      CFArrayRef v54 = (const __CFArray *)cf;
      LOBYTE(theArray[0]) = 0;
      LOBYTE(v82) = 0;
      if (Count >= 1)
      {
        CFIndex v55 = 0;
        char v56 = 0;
        while (1)
        {
          int v57 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v54, v55);
          uint64_t IsValueInArrayInDictionary = mv_CheckIfSubTitlesPlayable(a1, CFStringFrom4CC, v57, &v82, (char *)theArray);
          if (IsValueInArrayInDictionary) {
            goto LABEL_93;
          }
          if (LOBYTE(theArray[0])) {
            goto LABEL_149;
          }
          if ((_BYTE)v82) {
            char v56 = 1;
          }
          if (v49 == ++v55) {
            goto LABEL_137;
          }
        }
      }
      char v56 = 0;
LABEL_137:
      if (!TrackBoolean) {
        goto LABEL_149;
      }
      uint64_t v67 = *(void *)(a1 + 80);
      *(void *)(a1 + 80) = v67 + 1;
    }
    if (v67 < 1 || *(_DWORD *)(a1 + 104))
    {
      uint64_t v15 = 0;
      goto LABEL_148;
    }
    goto LABEL_92;
  }
  switch(v73)
  {
    case 1936684398:
      CFArrayRef v58 = (const __CFArray *)cf;
      LOBYTE(theArray[0]) = TrackBoolean;
      LOBYTE(v82) = 0;
      LOBYTE(v81) = 0;
      ++*(void *)(a1 + 64);
      if (Count >= 1)
      {
        CFIndex v59 = 0;
        char v56 = 0;
        while (1)
        {
          CFDateRef v60 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v58, v59);
          uint64_t IsValueInArrayInDictionary = mv_CheckIfAudioPlayable(a1, CFStringFrom4CC, v60, theArray, &v82, (BOOL *)&v81);
          if (IsValueInArrayInDictionary) {
            goto LABEL_93;
          }
          if ((_BYTE)v81) {
            goto LABEL_149;
          }
          if ((_BYTE)v82) {
            char v56 = 1;
          }
          if (v49 == ++v59)
          {
            int TrackBoolean = LOBYTE(theArray[0]);
            goto LABEL_140;
          }
        }
      }
      char v56 = 0;
LABEL_140:
      if (!TrackBoolean) {
        goto LABEL_149;
      }
      uint64_t v15 = 0;
      ++*(void *)(a1 + 72);
      *(_WORD *)(a1 + 41) = 257;
LABEL_148:
      *(unsigned char *)(a1 + 40) = v56;
      goto LABEL_12;
    case 1952807028:
      if (CFEqual(CFStringFrom4CC, @"ChapterName")) {
        goto LABEL_149;
      }
      break;
    case 1986618469:
      int v68 = TrackBoolean;
      CFArrayRef v50 = (const __CFArray *)cf;
      LOBYTE(theArray[0]) = 0;
      LOBYTE(v82) = 0;
      ++*(void *)(a1 + 48);
      if (Count >= 1)
      {
        CFIndex v51 = 0;
        char v52 = 0;
        while (1)
        {
          int v53 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v50, v51);
          uint64_t IsValueInArrayInDictionary = mv_CheckIfVideoPresentable(a1, CFStringFrom4CC, v53, a2, a3, a6, theArray, (BOOL *)&v82);
          if (IsValueInArrayInDictionary) {
            goto LABEL_93;
          }
          if ((_BYTE)v82) {
            goto LABEL_149;
          }
          if (LOBYTE(theArray[0])) {
            char v52 = 1;
          }
          if (v49 == ++v51) {
            goto LABEL_130;
          }
        }
      }
      char v52 = 0;
LABEL_130:
      if (v68)
      {
        uint64_t v66 = *(void *)(a1 + 56);
        *(void *)(a1 + 56) = v66 + 1;
        if (v66 < 1 || *(_DWORD *)(a1 + 104))
        {
          *(unsigned char *)(a1 + 42) = 1;
          if (!a6) {
            *(unsigned char *)(a1 + 41) = 1;
          }
          uint64_t v15 = 0;
          *(unsigned char *)(a1 + 40) = v52;
LABEL_12:
          CFArrayRef v20 = (const __CFArray *)cf;
          if (!cf) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
        goto LABEL_92;
      }
LABEL_149:
      uint64_t v15 = 0;
      goto LABEL_12;
  }
LABEL_114:
  CFArrayRef v20 = (const __CFArray *)cf;
  if (v49 >= 1)
  {
    CFIndex v61 = 0;
    while (1)
    {
      LOBYTE(theArray[0]) = 0;
      CFArrayRef v62 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v20, v61);
      uint64_t IsValueInArrayInDictionary = mv_CheckIfOtherMediaTypePlayable(a1, CFStringFrom4CC, v62, (char *)theArray);
      if (IsValueInArrayInDictionary) {
        goto LABEL_93;
      }
      if (v49 == ++v61) {
        goto LABEL_149;
      }
    }
  }
  uint64_t v15 = 0;
  if (cf)
  {
LABEL_13:
    CFRelease(v20);
    CFTypeRef cf = 0;
  }
LABEL_14:
  if (CFStringFrom4CC) {
    CFRelease(CFStringFrom4CC);
  }
  return v15;
}

uint64_t mv_GetVideoProfileAndLevelConstraints(const __CFDictionary *a1, const void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v27 = 0;
  CFTypeRef v28 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  CFTypeID TypeID = CFArrayGetTypeID();
  uint64_t CodecProperty = mv_GetCodecProperty(a1, a2, @"VideoCodecProfiles", @"SupportedProfiles", TypeID, &v30);
  if (!CodecProperty)
  {
    if (v30
      || (CFTypeID v18 = CFNumberGetTypeID(),
          uint64_t CodecProperty = mv_GetCodecProperty(a1, a2, @"VideoCodecProfiles", @"MaxProfile", v18, &v27),
          !CodecProperty))
    {
      CFTypeID v19 = CFDictionaryGetTypeID();
      uint64_t CodecProperty = mv_GetCodecProperty(a1, a2, @"VideoCodecProfiles", @"PerProfileConstraints", v19, &v28);
      if (!CodecProperty)
      {
        CFTypeID v20 = CFArrayGetTypeID();
        uint64_t CodecProperty = mv_GetCodecProperty(a1, a2, @"VideoCodecProfiles", @"SupportedLevels", v20, &v29);
        if (!CodecProperty)
        {
          if (v29
            || (CFTypeID v21 = CFNumberGetTypeID(),
                uint64_t CodecProperty = mv_GetCodecProperty(a1, a2, @"VideoCodecProfiles", @"MaxLevel", v21, &v26),
                !CodecProperty))
          {
            CFTypeID v22 = CFNumberGetTypeID();
            uint64_t CodecProperty = mv_GetCodecProperty(a1, a2, @"VideoCodecProfiles", @"MaxTier", v22, &v25);
          }
        }
      }
    }
  }
  uint64_t v23 = CodecProperty;
  if (!CodecProperty && !v27 && !v30) {
    FigCFDictionaryGetBooleanIfPresent();
  }
  if (a5) {
    *a5 = v28;
  }
  if (a3) {
    *a3 = v30;
  }
  if (a6) {
    *a6 = v27;
  }
  if (a4) {
    *a4 = v29;
  }
  if (a7) {
    *a7 = v26;
  }
  if (a8) {
    *a8 = v25;
  }
  return v23;
}

uint64_t mv_IsIntInCFArray(int a1, const __CFArray *a2)
{
  int valuePtr = a1;
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  if (!v3) {
    return 0;
  }
  CFNumberRef v4 = v3;
  v8.length = CFArrayGetCount(a2);
  v8.location = 0;
  uint64_t v5 = CFArrayContainsValue(a2, v8, v4);
  CFRelease(v4);
  return v5;
}

uint64_t mv_isMovieFamilyFormatReader(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(a1);
  uint64_t v2 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v2) {
    uint64_t v3 = v2;
  }
  else {
    uint64_t v3 = 0;
  }
  CFNumberRef v4 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v3 + 48);
  if (v4) {
    v4(FigBaseObject, @"Identifier", *MEMORY[0x1E4F1CF80], &cf);
  }
  uint64_t v5 = FigCFEqual();
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

BOOL mv_EvaluateProfileConstraints(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, double *a5)
{
  CFTypeID v10 = CFGetTypeID(cf);
  if (v10 != CFDictionaryGetTypeID()) {
    return 1;
  }
  uint64_t v11 = *MEMORY[0x1E4F1CF80];
  CFStringRef v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", a1);
  if (!v12) {
    return 1;
  }
  CFStringRef v13 = v12;
  CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)cf, v12);
  if (Value && (v25 = 0, CFTypeID v15 = CFGetTypeID(Value), v15 == CFDictionaryGetTypeID()))
  {
    if (!FigCFDictionaryGetInt32IfPresent()) {
      goto LABEL_16;
    }
    CFNumberRef number = 0;
    float v16 = (double)v25 * 1000000.0;
    if (a5) {
      *a5 = v16;
    }
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a3);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v19 = v18 ? v18 : 0;
    CFTypeID v21 = *(void (**)(uint64_t, __CFString *, uint64_t, CFNumberRef *))(v19 + 48);
    if (v21 && (v21(FigBaseObject, @"EstimatedDataRate", v11, &number), number))
    {
      float valuePtr = 0.0;
      CFNumberGetValue(number, kCFNumberFloat32Type, &valuePtr);
      BOOL v20 = (float)(valuePtr * 8.0) <= v16;
      if (number) {
        CFRelease(number);
      }
    }
    else
    {
LABEL_16:
      BOOL v20 = 1;
    }
    if (a4) {
      FigCFDictionaryGetInt32IfPresent();
    }
  }
  else
  {
    BOOL v20 = 1;
  }
  CFRelease(v13);
  return v20;
}

uint64_t mv_CheckIfDroppingFramesEnablesPlayability(uint64_t a1, double a2, double a3)
{
  memset(&v12, 0, sizeof(v12));
  CMTimeMake(&v12, 2, 1);
  if (a2 <= 0.0 && a3 <= 0.0) {
    return 0;
  }
  double v10 = 0.0;
  double v11 = 0.0;
  CMTime v9 = v12;
  if (mv_ComputeDroppableFrameRate(a1, &v9, -1, &v11, &v10)) {
    return 0;
  }
  BOOL v7 = a3 > 0.0;
  BOOL v8 = a2 > 0.0;
  if (v11 > a2) {
    BOOL v8 = 0;
  }
  if (v10 > a3) {
    BOOL v7 = 0;
  }
  return v7 | v8;
}

uint64_t mv_ComputeDroppableFrameRate(uint64_t a1, CMTime *a2, int a3, double *a4, double *a5)
{
  CFTypeRef v61 = 0;
  CMTime v62 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CFTypeRef cf = 0;
  CFTypeRef v60 = 0;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  CMTime v12 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v11 + 32);
  if (!v12) {
    goto LABEL_58;
  }
  uint64_t v13 = v12(a1, &v61);
  if (v13) {
    goto LABEL_70;
  }
  CFTypeRef v14 = v61;
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v16 = v15 ? v15 : 0;
  int v17 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v16 + 24);
  if (!v17)
  {
LABEL_58:
    uint64_t v48 = 4294954514;
    goto LABEL_59;
  }
  uint64_t v13 = v17(v14, &v60);
  if (!v13)
  {
    uint64_t v18 = 0;
    uint64_t v52 = 0;
    uint64_t v19 = *MEMORY[0x1E4F1CF80];
    BOOL v20 = (const void *)*MEMORY[0x1E4F1F1E0];
    uint64_t v21 = 1;
    while (1)
    {
      uint64_t v22 = v21;
      memset(&time1, 0, sizeof(time1));
      uint64_t v57 = 0;
      BOOL v56 = 0;
      CFTypeRef value = 0;
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      uint64_t FigBaseObject = FigSampleCursorGetFigBaseObject(v60);
      uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v25 = v24 ? v24 : 0;
      uint64_t v26 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v25 + 48);
      if (v26
        && !v26(FigBaseObject, @"SampleDependencyAttributes", v19, &cf)
        && cf
        && (CFTypeID v27 = CFGetTypeID(cf), v27 == CFDictionaryGetTypeID()))
      {
        LODWORD(lhs.value) = -1;
        if (a3 == -1 || !CFDictionaryGetValueIfPresent((CFDictionaryRef)cf, v20, (const void **)&value))
        {
          BOOL v28 = v56;
        }
        else
        {
          FigCFDictionaryGetIntIfPresent();
          BOOL v28 = SLODWORD(lhs.value) > 0;
          BOOL v56 = SLODWORD(lhs.value) > 0;
        }
        if (!v28)
        {
          LOBYTE(rhs.value) = 1;
          FigCFDictionaryGetBooleanIfPresent();
          BOOL v28 = LOBYTE(rhs.value) == 0;
          BOOL v56 = LOBYTE(rhs.value) == 0;
        }
      }
      else
      {
        CFTypeRef v29 = v60;
        uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v30) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = 0;
        }
        CFTypeRef v32 = *(uint64_t (**)(CFTypeRef, void, void, void, BOOL *))(v31 + 64);
        if (!v32) {
          goto LABEL_58;
        }
        uint64_t v13 = v32(v29, 0, 0, 0, &v56);
        if (v13) {
          break;
        }
        BOOL v28 = v56;
      }
      if (v28)
      {
        ++v18;
      }
      else
      {
        lhs.CFTypeRef value = 0;
        uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v36) {
          uint64_t v37 = v36;
        }
        else {
          uint64_t v37 = 0;
        }
        if (*(void *)(v37 + 144))
        {
          CFTypeRef v44 = v60;
          uint64_t v45 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v46 = v45 ? v45 : 0;
          int v47 = *(unsigned int (**)(CFTypeRef, void, CMTime *, void, void))(v46 + 144);
          if (v47)
          {
            if (!v47(v44, 0, &lhs, 0, 0)) {
              v52 += 8 * lhs.value;
            }
          }
        }
      }
      CFTypeRef v33 = v60;
      uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v35 = v34 ? v34 : 0;
      CFArrayRef v38 = *(uint64_t (**)(CFTypeRef, CMTime *))(v35 + 56);
      if (!v38) {
        goto LABEL_58;
      }
      uint64_t v13 = v38(v33, &time1);
      if (v13) {
        break;
      }
      CMTime lhs = v62;
      CMTime rhs = time1;
      CMTimeAdd(&v62, &lhs, &rhs);
      CFTypeRef v39 = v60;
      uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v41 = v40 ? v40 : 0;
      int v42 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v41 + 168);
      if (!v42) {
        goto LABEL_58;
      }
      uint64_t v13 = v42(v39, 1, &v57);
      if (v13) {
        break;
      }
      if (v57 == 1)
      {
        CMTime time1 = v62;
        CMTime lhs = *a2;
        int32_t v43 = CMTimeCompare(&time1, &lhs);
        uint64_t v21 = v22 + 1;
        if (v43 < 0) {
          continue;
        }
      }
      CMTime time1 = v62;
      double Seconds = CMTimeGetSeconds(&time1);
      CMTime time1 = v62;
      double v51 = CMTimeGetSeconds(&time1);
      if (a4) {
        *a4 = (double)(v22 - v18) / Seconds;
      }
      uint64_t v48 = 0;
      if (a5) {
        *a5 = (double)v52 / v51;
      }
      goto LABEL_59;
    }
  }
LABEL_70:
  uint64_t v48 = v13;
LABEL_59:
  if (v61) {
    CFRelease(v61);
  }
  if (v60) {
    CFRelease(v60);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v48;
}

uint64_t mv_CheckIfDroppingHEVCTemporalLevelsEnablesPlayability(uint64_t a1, double a2, double a3)
{
  memset(&v18, 0, sizeof(v18));
  CMTimeMake(&v18, 2, 1);
  CFArrayRef theArray = 0;
  if (a2 <= 0.0 && a3 <= 0.0) {
    return 0;
  }
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(unsigned int (**)(uint64_t, __CFString *, void, CFArrayRef *))(v9 + 48);
  if (!v10 || v10(FigBaseObject, @"HEVCTemporalLevelInfoCombinations", *MEMORY[0x1E4F1CF80], &theArray))
  {
LABEL_17:
    uint64_t v6 = 0;
    goto LABEL_19;
  }
  if (theArray && CFArrayGetCount(theArray) >= 1)
  {
    double v15 = 0.0;
    double v16 = 0.0;
    CMTime v14 = v18;
    if (!mv_ComputeDroppableFrameRate(a1, &v14, 0, &v16, &v15))
    {
      BOOL v11 = a3 > 0.0;
      BOOL v12 = a2 > 0.0;
      if (v16 > a2) {
        BOOL v12 = 0;
      }
      if (v15 > a3) {
        BOOL v11 = 0;
      }
      uint64_t v6 = v11 | v12;
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  uint64_t v6 = mv_CheckIfDroppingFramesEnablesPlayability(a1, a2, a3);
LABEL_19:
  if (theArray) {
    CFRelease(theArray);
  }
  return v6;
}

uint64_t mv_ValidateAudioCodecsParameterValue(uint64_t a1)
{
  UInt32 ioPropertyDataSize = 4;
  int outPropertyData = 0;
  inSpecifier[0] = a1;
  inSpecifier[1] = 1836069990;
  LODWORD(result) = AudioFormatGetProperty(*(AudioFormatPropertyID *)TEMP_kAudioFormatProperty_CanDecodeAudioFormatIndicatedByCodecsParameterValue, 0x10u, inSpecifier, &ioPropertyDataSize, &outPropertyData);
  if (outPropertyData) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = -12957;
  }
  if (result) {
    return result;
  }
  else {
    return v2;
  }
}

BOOL mv_IsStringInCFArrayList(const __CFString *a1, CFArrayRef theArray)
{
  CFIndex v4 = 0;
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(theArray); v4 < i; CFIndex i = 0)
  {
    CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(theArray, v4);
    if (ValueAtIndex)
    {
      CFStringRef v7 = ValueAtIndex;
      CFTypeID v8 = CFGetTypeID(ValueAtIndex);
      if (v8 == CFStringGetTypeID() && CFStringCompare(v7, a1, 1uLL) == kCFCompareEqualTo) {
        break;
      }
    }
    ++v4;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return v4 < i;
}

uint64_t FigMediaValidatorValidateRFC4281Codecs(const __CFString *a1, CFStringRef theString, int a3, const __CFDictionary *a4, int a5, _DWORD *a6)
{
  CFIndex v11 = CFStringGetLength(theString) + 1;
  BOOL v12 = (char *)malloc_type_malloc(v11, 0x7718C2ABuLL);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v37 = v12;
    if (CFStringGetCString(theString, v12, v11, 0x8000100u))
    {
      __stringp = v13;
      if (*v13 != 34)
      {
LABEL_7:
        if (a6) {
          *a6 = 0;
        }
        if (a5) {
          int v15 = 3;
        }
        else {
          int v15 = 1;
        }
        int v40 = v15;
        int v39 = a3;
        while (1)
        {
          double v16 = strsep(&__stringp, ", \t");
          uint64_t v17 = (uint64_t)v16;
          if (!v16) {
            goto LABEL_48;
          }
          if (!*v16)
          {
            uint64_t v17 = 0;
            goto LABEL_48;
          }
          CFTypeRef value = 0;
          __s = v16;
          if (!CFDictionaryGetValueIfPresent(a4, @"MIMETypesToTreatAsISOBMFFMediaFormatContainers", (const void **)&value)|| !value|| (CFTypeID v18 = CFGetTypeID(value), v18 != CFArrayGetTypeID())|| !mv_IsStringInCFArrayList(a1, (CFArrayRef)value)|| !@"video/mp4"|| (v19 = CFRetain(@"video/mp4")) == 0)
          {
            uint64_t v19 = FigFormatReaderUtilityCopyRepresentativeMIMETypeForMIMEType(a1);
            if (!v19 && (!a1 || (uint64_t v19 = CFRetain(a1)) == 0))
            {
              uint64_t v17 = FigSignalErrorAt();
              uint64_t v21 = 0;
              goto LABEL_47;
            }
          }
          if (a3)
          {
            unint64_t v43 = 0;
            size_t v20 = strlen((const char *)v17);
            uint64_t v21 = (unsigned int *)malloc_type_calloc(v20 + 1, 1uLL, 0x100004077774924uLL);
            if (!__s || !*__s)
            {
              uint64_t v33 = FigSignalErrorAt();
              goto LABEL_45;
            }
            uint64_t v22 = strsep(&__s, ".");
            if (!v22)
            {
              uint64_t v17 = 0;
              goto LABEL_46;
            }
            uint64_t v23 = (uint64_t)v22;
            size_t v24 = strlen(v22);
            mv_ConvertTokenToCString(v23, v24, (uint64_t)v21, v20 + 1, &v43);
            unint64_t v25 = v43;
            if (v43 == 4) {
              int v26 = bswap32(*v21);
            }
            else {
              int v26 = 0;
            }
            if (__s)
            {
              size_t v28 = strlen(__s);
              mv_ConvertTokenToCString((uint64_t)__s, v28, (uint64_t)v21 + v43 + 1, v20 - v43, 0);
              __s = (char *)v21 + v25 + 1;
            }
            CFTypeID v27 = v21;
            a3 = v39;
          }
          else
          {
            CFTypeID v27 = (unsigned int *)strsep(&__s, ".");
            uint64_t v21 = 0;
            if (strlen((const char *)v27) == 4) {
              int v26 = bswap32(*v27);
            }
            else {
              int v26 = 0;
            }
          }
          if (FigCFEqual())
          {
            CFTypeRef v29 = __s;
            signed int v30 = v26;
            int v31 = v40;
            unsigned int v32 = 1;
          }
          else if (FigCFEqual())
          {
            CFTypeRef v29 = __s;
            signed int v30 = v26;
            int v31 = v40;
            unsigned int v32 = 2;
          }
          else if (FigCFEqual())
          {
            if (!a5)
            {
              uint64_t v17 = 4294954332;
              goto LABEL_46;
            }
            CFTypeRef v29 = __s;
            signed int v30 = v26;
            int v31 = 3;
            unsigned int v32 = 4;
          }
          else
          {
            if (!FigCFEqual())
            {
              int v42 = 0;
              LODWORD(v43) = 0;
              int v34 = FigFormatReaderUtilityConvertCodecElementsToMediaSubType((uint64_t)v19, v26, (char *)v27, (uint64_t)__s, 0, (int *)&v43, &v42);
              if (v34) {
                uint64_t v17 = 0;
              }
              else {
                uint64_t v17 = 4294954346;
              }
              if (v34)
              {
                if (a4)
                {
                  CFStringRef CFStringFrom4CC = mv_CreateCFStringFrom4CC(v43);
                  uint64_t v17 = mv_LookupCodecSupport(CFStringFrom4CC, a4, a6);
                  if (CFStringFrom4CC) {
                    CFRelease(CFStringFrom4CC);
                  }
                }
              }
              goto LABEL_46;
            }
            CFTypeRef v29 = __s;
            signed int v30 = v26;
            int v31 = v40;
            unsigned int v32 = 8;
          }
          uint64_t v33 = mv_ValidateRFC4281IdEvaluationFn(v30, (uint64_t)v29, v31, v32, a4, a6, 0);
LABEL_45:
          uint64_t v17 = v33;
LABEL_46:
          CFRelease(v19);
LABEL_47:
          free(v21);
LABEL_48:
          if (v17 || !__stringp) {
            goto LABEL_71;
          }
        }
      }
      __stringp = v13 + 1;
      CMTime v14 = strchr(v13 + 1, 34);
      if (v14 && *v14)
      {
        char *v14 = 0;
        goto LABEL_7;
      }
      uint64_t v17 = 4294954344;
    }
    else
    {
      uint64_t v17 = FigSignalErrorAt();
    }
LABEL_71:
    free(v37);
    return v17;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t mv_ConvertTokenToCString(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, unint64_t *a5)
{
  if (a3)
  {
    unint64_t v5 = 0;
    if (a2)
    {
      for (unint64_t i = 0; i < a2; ++i)
      {
        int v7 = *(unsigned __int8 *)(result + i);
        if (*(unsigned char *)(result + i)) {
          BOOL v8 = v5 >= a4;
        }
        else {
          BOOL v8 = 1;
        }
        if (v8) {
          break;
        }
        if (v7 == 37)
        {
          unint64_t v9 = i + 2;
          if (i + 2 < a2
            && (int v10 = *(char *)(i + result + 1), *(unsigned char *)(i + result + 1))
            && (int v11 = *(char *)(result + v9), *(unsigned char *)(result + v9)))
          {
            unsigned int v12 = v10 - 48;
            unsigned int v13 = v10 - 65;
            if ((v10 - 97) >= 6) {
              int v14 = -1;
            }
            else {
              int v14 = v10 - 87;
            }
            int v15 = v10 - 55;
            if (v13 > 5) {
              int v15 = v14;
            }
            if (v12 < 0xA) {
              int v15 = v12;
            }
            unsigned int v16 = v11 - 48;
            unsigned int v17 = v11 - 65;
            if ((v11 - 97) >= 6) {
              int v18 = -1;
            }
            else {
              int v18 = v11 - 87;
            }
            int v19 = v11 - 55;
            if (v17 > 5) {
              int v19 = v18;
            }
            if (v16 < 0xA) {
              int v19 = v16;
            }
            BOOL v20 = v19 >= 0;
            if (v19 >= 0) {
              char v21 = v19 + 16 * v15;
            }
            else {
              char v21 = 63;
            }
            if (v20) {
              unint64_t v22 = i + 2;
            }
            else {
              unint64_t v22 = i;
            }
            if (v15 >= 0) {
              LOBYTE(v7) = v21;
            }
            else {
              LOBYTE(v7) = 63;
            }
            if (v15 >= 0) {
              unint64_t i = v22;
            }
          }
          else
          {
            LOBYTE(v7) = 63;
          }
        }
        *(unsigned char *)(a3 + v5++) = v7;
      }
    }
    if (v5 >= a4) {
      unint64_t v5 = a4 - 1;
    }
    *(unsigned char *)(a3 + v5) = 0;
    if (a5) {
      *a5 = v5;
    }
  }
  return result;
}

uint64_t mv_ValidateRFC4281IdEvaluationFn(signed int a1, uint64_t a2, int a3, unsigned int a4, const __CFDictionary *a5, _DWORD *a6, CFDictionaryRef theDict)
{
  int v30 = 0;
  int v29 = 0;
  if (!a1)
  {
    uint64_t v11 = FigSignalErrorAt();
    int v30 = 4;
    if (!a6) {
      return v11;
    }
    goto LABEL_32;
  }
  uint64_t v10 = 0;
  uint64_t v27 = a2;
  uint64_t v28 = 0;
  CFDictionaryRef v23 = a5;
  signed int v24 = a1;
  int v25 = a3;
  uint64_t v26 = a4;
  do
  {
    if (*(_DWORD *)&mv_ISO_CodecsTable[v10] == a1 && (a4 & ~*(_DWORD *)&mv_ISO_CodecsTable[v10 + 4]) == 0)
    {
      int v22 = 0;
      int v13 = *(_DWORD *)&mv_ISO_CodecsTable[v10 + 16];
      LODWORD(v28) = v13;
      if (v10 == 816)
      {
        int v14 = 0;
        uint64_t v11 = 0;
        int v29 = v13;
      }
      else
      {
        uint64_t v11 = (*(uint64_t (**)(const __CFDictionary **, int *, int *))&mv_ISO_CodecsTable[v10 + 8])(&v23, &v29, &v22);
        int v14 = v22;
      }
      int v12 = v14 | *(_DWORD *)&mv_ISO_CodecsTable[v10 + 20];
      goto LABEL_18;
    }
    v10 += 24;
  }
  while (v10 != 888);
  if (a3 == 2)
  {
    uint64_t v11 = 0;
    int v12 = 4;
LABEL_18:
    int v30 = v12;
    goto LABEL_19;
  }
  if ((a4 & 2) != 0) {
    goto LABEL_41;
  }
  uint64_t v11 = 4294954346;
  if (a1 <= 1634743415)
  {
    if (a1 != 1634742376 && a1 != 1634742888)
    {
      unsigned __int16 v15 = 13416;
LABEL_37:
      if (a1 != (v15 | 0x61700000)) {
        goto LABEL_19;
      }
    }
  }
  else if (((a1 - 1634755432) > 0xB || ((1 << (a1 - 104)) & 0x8C1) == 0) {
         && ((a1 - 1634759272) > 6 || ((1 << (a1 - 104)) & 0x51) == 0))
  }
  {
    unsigned __int16 v15 = 13432;
    goto LABEL_37;
  }
  if ((a4 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_41:
  uint64_t v11 = 4294954346;
  if (a1 > 1752589104)
  {
    if (a1 <= 1902207855)
    {
      if (a1 > 1885430639)
      {
        if (a1 == 1885430640 || a1 == 1886745441) {
          goto LABEL_19;
        }
        int v20 = 1902207848;
      }
      else
      {
        if (a1 == 1752589105 || a1 == 1885430115) {
          goto LABEL_19;
        }
        int v20 = 1885430632;
      }
    }
    else if (a1 <= 1987063864)
    {
      if (a1 == 1902207856 || a1 == 1903522657) {
        goto LABEL_19;
      }
      int v20 = 1970495843;
    }
    else if (a1 > 2053202799)
    {
      if (a1 == 2053202800) {
        goto LABEL_19;
      }
      int v20 = 2054517601;
    }
    else
    {
      if (a1 == 1987063865) {
        goto LABEL_19;
      }
      int v20 = 2053202792;
    }
  }
  else if (a1 > 1635135536)
  {
    if (a1 > 1668641632)
    {
      if (a1 == 1668641633 || a1 == 1684108849) {
        goto LABEL_19;
      }
      int v20 = 1685481521;
    }
    else
    {
      if (a1 == 1635135537 || a1 == 1667326824) {
        goto LABEL_19;
      }
      int v20 = 1667326832;
    }
  }
  else
  {
    if ((a1 - 1633772389) <= 0xB && ((1 << (a1 - 101)) & 0x80F) != 0 || a1 == 1633771875) {
      goto LABEL_19;
    }
    int v20 = 1633772320;
  }
  if (a1 != v20)
  {
    CFStringRef CFStringFrom4CC = mv_CreateCFStringFrom4CC(a1);
    uint64_t v11 = mv_LookupCodecSupport(CFStringFrom4CC, a5, &v30);
    if (CFStringFrom4CC) {
      CFRelease(CFStringFrom4CC);
    }
  }
LABEL_19:
  if (!theDict) {
    goto LABEL_31;
  }
  if (v30)
  {
    unsigned int v16 = @"soun";
  }
  else
  {
    if ((v30 & 2) == 0) {
      goto LABEL_31;
    }
    unsigned int v16 = @"vide";
  }
  if (CFDictionaryContainsKey(theDict, v16))
  {
    CFArrayRef Value = CFDictionaryGetValue(theDict, v16);
    if (!Value) {
      goto LABEL_31;
    }
  }
  else
  {
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    if (!Mutable) {
      goto LABEL_31;
    }
    CFArrayRef Value = Mutable;
    CFDictionarySetValue(theDict, v16, Mutable);
    CFRelease(Value);
  }
  if (!mv_IsIntInCFArray(v29, (const __CFArray *)Value)) {
    FigCFArrayAppendInt32();
  }
LABEL_31:
  if (a6) {
LABEL_32:
  }
    *a6 |= v30;
  return v11;
}

uint64_t mv_LookupCodecSupport(const void *a1, const __CFDictionary *a2, _DWORD *a3)
{
  __int16 v16 = 0;
  uint64_t result = 4294954344;
  if (!a1) {
    return result;
  }
  if (!a2) {
    return result;
  }
  uint64_t result = mv_IsValueInArrayInDictionary(a2, a1, @"vide", (Boolean *)&v16, (unsigned char *)&v16 + 1);
  if (result) {
    return result;
  }
  if ((_BYTE)v16 && HIBYTE(v16)) {
    goto LABEL_8;
  }
  uint64_t result = mv_IsValueInArrayInDictionary(a2, a1, @"VideoCodecs", (Boolean *)&v16, (unsigned char *)&v16 + 1);
  if (result) {
    return result;
  }
  if ((_BYTE)v16)
  {
LABEL_8:
    if (a3)
    {
      int v7 = 2;
LABEL_10:
      *a3 |= v7;
    }
  }
  else
  {
    uint64_t result = mv_IsValueInArrayInDictionary(a2, a1, @"soun", (Boolean *)&v16, (unsigned char *)&v16 + 1);
    if (result) {
      return result;
    }
    int v9 = v16;
    if (!(_BYTE)v16 || !HIBYTE(v16))
    {
      uint64_t result = mv_IsValueInArrayInDictionary(a2, a1, @"AudioCodecs", (Boolean *)&v16, (unsigned char *)&v16 + 1);
      if (result) {
        return result;
      }
      int v9 = v16;
    }
    if (a3 && v9)
    {
      int v7 = 1;
      goto LABEL_10;
    }
    if (!v9) {
      return 4294954344;
    }
  }
  uint64_t v14 = 0;
  CFArrayRef v15 = 0;
  CFNumberRef v12 = 0;
  CFNumberRef number = 0;
  int v10 = -1;
  int valuePtr = -1;
  mv_GetVideoProfileAndLevelConstraints(a2, a1, &v15, 0, &v14, &number, &v12, 0);
  uint64_t result = 0;
  if ((unint64_t)number | (unint64_t)v15)
  {
    CFNumberRef v8 = v12;
    if (v12)
    {
      if (number)
      {
        if (!v15)
        {
          CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
          CFNumberRef v8 = v12;
        }
      }
      CFNumberGetValue(v8, kCFNumberSInt32Type, &v10);
      if (v10 < 0) {
        return 4294954344;
      }
      if (v15)
      {
        if (!mv_IsIntInCFArray(0, v15)) {
          return 4294954344;
        }
        return 0;
      }
      if (valuePtr >= 0) {
        return 0;
      }
      return 4294954344;
    }
  }
  return result;
}

uint64_t mv_ValidateRFC4281_avc1_avc3_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  if (*(_DWORD *)(a1 + 32) != 1635148595 || (*(_DWORD *)(a1 + 12) & 0xFFFFFFFE) == 2)
  {
    CFIndex v4 = *(const char **)(a1 + 24);
    if (v4)
    {
      uint64_t result = mv_ValidateRFC4281_avc1_avc3(v4, *(const __CFDictionary **)a1);
      if (result != -16055)
      {
        if (result)
        {
LABEL_8:
          *a2 = *(_DWORD *)(a1 + 8);
          return result;
        }
        if (*(_DWORD *)(a1 + 32) != 1635148595)
        {
          uint64_t result = 0;
          goto LABEL_8;
        }
      }
    }
    uint64_t result = CheckVideoCodecAvailable((const __CFDictionary **)a1, 0x61766331u);
    goto LABEL_8;
  }
  return 4294954340;
}

uint64_t mv_ValidateRFC4281_hvc1_hev1_evaluation_fn(uint64_t a1, _DWORD *a2, int *a3)
{
  int v9 = 0;
  if (*(_DWORD *)(a1 + 32) == 1751479857 && (*(_DWORD *)(a1 + 12) & 0xFFFFFFFE) != 2) {
    return 4294954340;
  }
  uint64_t v6 = *(const char **)(a1 + 24);
  if (!v6 || (uint64_t result = mv_ValidateRFC4281_hvc1_hev1(v6, *(const __CFDictionary **)a1, &v9), result == -16055))
  {
LABEL_7:
    uint64_t result = CheckVideoCodecAvailable((const __CFDictionary **)a1, 0x68766331u);
    goto LABEL_8;
  }
  if (!result)
  {
    if (*(_DWORD *)(a1 + 32) != 1751479857)
    {
      uint64_t result = 0;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  int v8 = *a3;
  *a3 |= 0x10u;
  if (v9 == 1) {
    *a3 = v8 | 0x18;
  }
  *a2 = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t mv_ValidateRFC4281_dvhe_dvh1_evaluation_fn(uint64_t a1, _DWORD *a2, int *a3)
{
  int v9 = 0;
  if (*(_DWORD *)(a1 + 32) == 1685481573 && (*(_DWORD *)(a1 + 12) & 0xFFFFFFFE) != 2) {
    return 4294954340;
  }
  uint64_t v6 = *(char **)(a1 + 24);
  if (!v6 || (uint64_t result = mv_ValidateRFC4281_dvhe_dvh1(v6, *(const __CFDictionary **)a1, &v9), result == -16055))
  {
LABEL_7:
    uint64_t result = CheckVideoCodecAvailable((const __CFDictionary **)a1, 0x64766831u);
    goto LABEL_8;
  }
  if (!result)
  {
    if (*(_DWORD *)(a1 + 32) != 1685481573)
    {
      uint64_t result = 0;
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_8:
  int v8 = *a3;
  *a3 |= 0x10u;
  if (v9 == 1) {
    *a3 = v8 | 0x18;
  }
  *a2 = *(_DWORD *)(a1 + 8);
  return result;
}

uint64_t mv_ValidateRFC4281_av01_evaluation_fn(uint64_t a1, _DWORD *a2, int *a3)
{
  int v10 = 0;
  uint64_t v6 = *(const char **)(a1 + 24);
  if (!v6 || (uint64_t result = mv_ValidateRFC4281_av01(v6, *(const __CFDictionary **)a1, &v10), result == -16055)) {
    uint64_t result = CheckVideoCodecAvailable((const __CFDictionary **)a1, 0x61763031u);
  }
  int v8 = v10;
  if (v10)
  {
    int v9 = *a3;
    *a3 |= 0x10u;
    if (v8 == 1) {
      *a3 = v9 | 0x18;
    }
  }
  *a2 = 1635135537;
  return result;
}

uint64_t mv_ValidateRFC4281_dav1_evaluation_fn(uint64_t a1, _DWORD *a2, int *a3)
{
  int v10 = 0;
  uint64_t v6 = *(const char **)(a1 + 24);
  if (!v6 || (uint64_t result = mv_ValidateRFC4281_dav1(v6, *(const __CFDictionary **)a1, &v10), result == -16055)) {
    uint64_t result = CheckVideoCodecAvailable((const __CFDictionary **)a1, 0x64617631u);
  }
  int v8 = v10;
  if (v10)
  {
    int v9 = *a3;
    *a3 |= 0x10u;
    if (v8 == 1) {
      *a3 = v9 | 0x18;
    }
  }
  *a2 = 1684108849;
  return result;
}

CFDictionaryRef mv_ValidateRFC4281_video_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  CFDictionaryRef result = *(const __CFDictionary **)a1;
  if (result) {
    CFDictionaryRef result = (const __CFDictionary *)mv_ValidateRFC4281VideoFromCodecType(result, *(_DWORD *)(a1 + 32));
  }
  *a2 = *(_DWORD *)(a1 + 32);
  return result;
}

CFDictionaryRef mv_ValidateRFC4281_restricted_video_evaluation_fn(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*(_DWORD *)(a1 + 12) == 2)
  {
    CFDictionaryRef result = 0;
    *a2 = *(_DWORD *)(a1 + 32);
    *a3 |= 4u;
  }
  else
  {
    CFDictionaryRef result = *(const __CFDictionary **)a1;
    if (*(void *)a1) {
      CFDictionaryRef result = (const __CFDictionary *)mv_ValidateRFC4281VideoFromCodecType(result, *(_DWORD *)(a1 + 32));
    }
    *a2 = *(_DWORD *)(a1 + 32);
  }
  return result;
}

uint64_t mv_ValidateRFC4281_mp2v_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  int v9 = 0;
  CFIndex v4 = *(const char **)(a1 + 24);
  if (v4)
  {
    char v8 = 0;
    int v5 = sscanf(v4, "%x%c", &v9, &v8);
    if ((v9 - 96) > 5 || ((1 << (v9 - 96)) & 0x23) == 0) {
      return 4294954340;
    }
    if (v5 >= 2) {
      return FigSignalErrorAt();
    }
  }
  else
  {
    int v9 = 97;
  }
  *a2 = 1836069494;
  return mv_ValidateRFC4281VideoFromCodecType(*(const __CFDictionary **)a1, 0x6D703276u);
}

uint64_t mv_ValidateRFC4281_mp4v_evaluation_fn(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v18 = 0;
  uint64_t v6 = *(const char **)(a1 + 24);
  if (!v6)
  {
    unsigned int v8 = 1836070006;
    HIDWORD(v18) = 32;
    *a3 |= 4u;
    goto LABEL_30;
  }
  LOBYTE(v22) = 0;
  int v7 = sscanf(v6, "%x.%d%c", (char *)&v18 + 4, &v18, &v22);
  if (HIDWORD(v18) == 108)
  {
    if (v7 != 1) {
      return FigSignalErrorAt();
    }
    if ((*(unsigned char *)(a1 + 16) & 2) != 0) {
      goto LABEL_34;
    }
    unsigned int v8 = 1785750887;
LABEL_30:
    uint64_t result = CheckVideoCodecAvailable((const __CFDictionary **)a1, v8);
    goto LABEL_31;
  }
  if (HIDWORD(v18) == 32)
  {
    if (v7 < 3)
    {
      unsigned int v8 = 1836070006;
      *a3 |= 4u;
      if (v7 == 2)
      {
        int v9 = *(const char **)(a1 + 24);
        CFDictionaryRef v10 = *(const __CFDictionary **)a1;
        uint64_t v24 = 0;
        char v23 = 0;
        uint64_t v21 = 0;
        CFArrayRef v22 = 0;
        CFNumberRef v19 = 0;
        CFNumberRef number = 0;
        int v11 = sscanf(v9, "%x.%d%c", (char *)&v24 + 4, &v24, &v23);
        uint64_t result = 0;
        if (v10)
        {
          if (v11 == 2)
          {
            uint64_t result = mv_GetVideoProfileAndLevelConstraints(v10, @"mp4v", &v22, 0, &v21, &number, &v19, 0);
            if (!result)
            {
              CFArrayRef v13 = v22;
              if ((unint64_t)number | (unint64_t)v22 && v19)
              {
                int v14 = v24;
                if (v22)
                {
                  int v15 = 0;
                }
                else
                {
                  uint64_t v16 = 0;
                  while (v24 != MPEG4ProfileCheck[v16])
                  {
                    v16 += 3;
                    if (v16 == 45)
                    {
                      uint64_t result = FigSignalErrorAt();
                      goto LABEL_31;
                    }
                  }
                  unsigned int v17 = &MPEG4ProfileCheck[v16];
                  int v14 = v17[1];
                  int v15 = v17[2];
                  CFArrayRef v13 = 0;
                }
                uint64_t result = mv_ValidateVideoProfileLevelTier(v13, number, v19, 0, v14, v15, 0);
              }
              else
              {
                uint64_t result = 0;
              }
            }
          }
        }
        goto LABEL_31;
      }
      goto LABEL_30;
    }
    return FigSignalErrorAt();
  }
  if (*(_DWORD *)(a1 + 12) == 2)
  {
LABEL_18:
    LODWORD(result) = FigSignalErrorAt();
    unsigned int v8 = 0;
    if (result) {
      uint64_t result = result;
    }
    else {
      uint64_t result = 4294954340;
    }
    goto LABEL_31;
  }
  if ((HIDWORD(v18) - 96) < 2 || HIDWORD(v18) == 101)
  {
    if (v7 != 1) {
      return FigSignalErrorAt();
    }
    if ((*(unsigned char *)(a1 + 16) & 2) == 0)
    {
      unsigned int v8 = 1836069494;
      goto LABEL_30;
    }
  }
  else
  {
    if (HIDWORD(v18) != 106) {
      goto LABEL_18;
    }
    if (v7 != 1) {
      return FigSignalErrorAt();
    }
    if ((*(unsigned char *)(a1 + 16) & 2) == 0)
    {
      unsigned int v8 = 1836069238;
      goto LABEL_30;
    }
  }
LABEL_34:
  unsigned int v8 = 0;
  uint64_t result = 4294954340;
LABEL_31:
  if (a2) {
    *a2 = v8;
  }
  return result;
}

uint64_t mv_ValidateRFC4281_vp9_evaluation_fn(uint64_t a1, _DWORD *a2, int *a3)
{
  BOOL v10 = 0;
  uint64_t v6 = *(const char **)(a1 + 24);
  if (!v6
    || (uint64_t result = (uint64_t)mv_ValidateRFC4281_vp9(v6, *(const __CFDictionary **)a1, &v10), result == -16055))
  {
    uint64_t result = CheckVideoCodecAvailable((const __CFDictionary **)a1, 0x76703039u);
  }
  BOOL v8 = v10;
  if (v10)
  {
    int v9 = *a3;
    *a3 |= 0x10u;
    if (v8) {
      *a3 = v9 | 0x18;
    }
  }
  *a2 = 1987063865;
  return result;
}

uint64_t mv_ValidateRFC4281_mp4a_evaluation_fn(uint64_t a1, int *a2)
{
  uint64_t v3 = *(const char **)(a1 + 24);
  if (!v3)
  {
    return FigSignalErrorAt();
  }
  int v5 = *(_DWORD *)(a1 + 12);
  int v12 = 0;
  int v11 = 0;
  char v10 = 0;
  int v6 = sscanf(v3, "%x.%d%c", &v12, &v11, &v10);
  if (v6 == 2)
  {
    if (v12 != 107 && v12 != 105)
    {
      if (v12 != 64) {
        goto LABEL_58;
      }
      if (v11 <= 28)
      {
        switch(v11)
        {
          case 2:
            int v7 = 1633772320;
            goto LABEL_48;
          case 5:
            int v7 = 1633772392;
            goto LABEL_48;
          case 23:
            int v7 = 1633772396;
            goto LABEL_48;
        }
      }
      else if (v11 > 38)
      {
        if (v11 == 39)
        {
          int v7 = 1633772389;
          goto LABEL_48;
        }
        if (v11 == 42)
        {
          int v7 = 1970495843;
          goto LABEL_48;
        }
      }
      else
      {
        if (v11 == 29)
        {
          int v7 = 1633772400;
          goto LABEL_48;
        }
        if (v11 == 34)
        {
          if (v5 == 2) {
            int v7 = 778924083;
          }
          else {
            int v7 = 1836069684;
          }
          goto LABEL_48;
        }
      }
      if (v5 != 2)
      {
        int v7 = 1633772397;
        switch(v11)
        {
          case 1:
            goto LABEL_48;
          case 2:
          case 5:
          case 6:
            goto LABEL_58;
          case 3:
            int v7 = 1633772402;
            goto LABEL_48;
          case 4:
            int v7 = 1633772404;
            goto LABEL_48;
          case 7:
            int v7 = 1953986161;
            goto LABEL_48;
          case 8:
            int v7 = 1667591280;
            goto LABEL_48;
          case 9:
            int v7 = 1752594531;
            goto LABEL_48;
          default:
            switch(v11)
            {
              case ' ':
                int v7 = 778924081;
                goto LABEL_48;
              case '!':
                int v7 = 778924082;
                goto LABEL_48;
              case '$':
                int v7 = 1634497332;
                goto LABEL_48;
              case '&':
                int v7 = 1936487278;
                goto LABEL_48;
              default:
                goto LABEL_58;
            }
        }
      }
      goto LABEL_58;
    }
    if ((*(unsigned char *)(a1 + 16) & 1) == 0)
    {
LABEL_20:
      int v7 = 0;
      uint64_t result = 4294954339;
      if (!a2) {
        return result;
      }
      goto LABEL_55;
    }
    int v7 = 778924081;
    if (v11 == 3)
    {
      int v7 = 778924083;
    }
    else
    {
      if (v5 == 2) {
        goto LABEL_58;
      }
      if (v11 != 1)
      {
        if (v11 != 2) {
          goto LABEL_58;
        }
        int v7 = 778924082;
      }
    }
LABEL_48:
    uint64_t result = *(void *)a1;
    if (*(void *)a1)
    {
      unsigned int v9 = 1633772320;
      if (v7 != 1633772320 && v7 != 1633772392 && v7 != 1633772400) {
        unsigned int v9 = v7;
      }
      uint64_t result = mv_ValidateRFC4281AudioFromCodecType((const __CFDictionary *)result, v9);
    }
    if (a2) {
      goto LABEL_55;
    }
    return result;
  }
  if (v6 != 1) {
    goto LABEL_20;
  }
  int v7 = 1633772320;
  switch(v12)
  {
    case 103:
      goto LABEL_48;
    case 166:
      if (v5 == 2)
      {
        int v7 = 1700998451;
        goto LABEL_48;
      }
      break;
    case 165:
      if (v5 == 2)
      {
        int v7 = 1633889587;
        goto LABEL_48;
      }
      break;
    default:
      if (v5 == 2) {
        goto LABEL_58;
      }
      break;
  }
  switch(v11)
  {
    case 102:
      int v7 = 1633772397;
      goto LABEL_48;
    case 225:
      int v7 = 1365470320;
      goto LABEL_48;
    case 104:
      int v7 = 1633772402;
      goto LABEL_48;
  }
LABEL_58:
  LODWORD(result) = FigSignalErrorAt();
  int v7 = 0;
  if (result) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 4294954339;
  }
  if (a2) {
LABEL_55:
  }
    *a2 = v7;
  return result;
}

uint64_t mv_ValidateRFC4281_audio_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  uint64_t result = mv_ValidateRFC4281AudioFromCodecType(*(const __CFDictionary **)a1, *(_DWORD *)(a1 + 32));
  *a2 = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t mv_ValidateRFC4281_restricted_audio_evaluation_fn(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (*(_DWORD *)(a1 + 12) == 2)
  {
    *a2 = *(_DWORD *)(a1 + 32);
    *a3 |= 4u;
    return 0;
  }
  else
  {
    uint64_t result = mv_ValidateRFC4281AudioFromCodecType(*(const __CFDictionary **)a1, *(_DWORD *)(a1 + 32));
    *a2 = *(_DWORD *)(a1 + 32);
  }
  return result;
}

uint64_t mv_ValidateRFC4281_mp1a_mp2a_evaluation_fn(uint64_t a1)
{
  unsigned int v2 = *(const char **)(a1 + 24);
  if (v2)
  {
    uint64_t v13 = 0;
    char v12 = 0;
    int v3 = sscanf(v2, "%x.%x%c", (char *)&v13 + 4, &v13, &v12);
    if (v3 < 1)
    {
      return 4294954339;
    }
    else
    {
      unsigned int v4 = v3;
      int v5 = *(_DWORD *)(a1 + 8);
      BOOL v7 = v3 == 1 && v5 == 1836069473;
      uint64_t result = 4294954339;
      switch(HIDWORD(v13))
      {
        case 'f':
          if (v7)
          {
            int v11 = 77;
            goto LABEL_29;
          }
          break;
        case 'g':
          if (v7)
          {
            unsigned int v9 = 1633772320;
            goto LABEL_30;
          }
          break;
        case 'h':
          if (v7)
          {
            int v11 = 82;
LABEL_29:
            unsigned int v9 = v11 | 0x61616320;
            goto LABEL_30;
          }
          break;
        case 'i':
        case 'k':
          if (v4 <= 2
            && (*(unsigned char *)(a1 + 16) & 4) != 0
            && (v5 == 1836069473 && HIDWORD(v13) == 105 || v5 == 1836069217 && HIDWORD(v13) == 107))
          {
            unsigned int v9 = 778924083;
            if (v4 == 2)
            {
              int v10 = 778924082;
              if (v13 != 2) {
                int v10 = 778924083;
              }
              if (v13 == 1) {
                unsigned int v9 = 778924081;
              }
              else {
                unsigned int v9 = v10;
              }
            }
LABEL_30:
            uint64_t result = *(void *)a1;
            if (*(void *)a1) {
              uint64_t result = mv_ValidateRFC4281AudioFromCodecType((const __CFDictionary *)result, v9);
            }
          }
          break;
        default:
          return result;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t mv_ValidateRFC4281_apac_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  uint64_t result = mv_ValidateRFC4281_apac(*(_DWORD *)(a1 + 8), *(void *)(a1 + 24));
  *a2 = 1634754915;
  return result;
}

char *mv_ValidateRFC4281_xvtt_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  uint64_t result = mv_ValidateRFC4281_xvtt(*(char **)(a1 + 24));
  *a2 = 2021028980;
  return result;
}

uint64_t mv_ValidateRFC4281_stpp_evaluation_fn(uint64_t a1, _DWORD *a2)
{
  uint64_t result = mv_ValidateRFC4281_ttml(*(char **)(a1 + 24));
  *a2 = 1937010800;
  return result;
}

uint64_t mv_ValidateRFC4281_avc1_avc3(const char *a1, const __CFDictionary *a2)
{
  if (a1)
  {
    int v13 = 0;
    char v12 = 0;
    uint64_t v10 = 0;
    CFArrayRef v11 = 0;
    CFNumberRef v8 = 0;
    CFNumberRef number = 0;
    __int16 v7 = 0;
    if (strlen(a1) == 6 && sscanf(a1, "%x%c", &v13, &v12) == 1)
    {
      HIBYTE(v7) = BYTE2(v13);
      LOBYTE(v7) = v13;
      if (!a2) {
        return 0;
      }
    }
    else
    {
      int v5 = sscanf(a1, "%hhu.%hhu%c", (char *)&v7 + 1, &v7, &v12);
      uint64_t result = 0;
      if (!a2 || v5 != 2) {
        return result;
      }
    }
    uint64_t result = mv_GetVideoProfileAndLevelConstraints(a2, @"avc1", &v11, 0, &v10, &number, &v8, 0);
    if (!result)
    {
      if (!((unint64_t)number | (unint64_t)v11) || !v8) {
        return 0;
      }
      return mv_ValidateVideoProfileLevelTier(v11, number, v8, 0, HIBYTE(v7), v7, 0);
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t CheckVideoCodecAvailable(const __CFDictionary **a1, unsigned int a2)
{
  if (!*a1) {
    return 0;
  }
  CFStringRef CFStringFrom4CC = mv_CreateCFStringFrom4CC(a2);
  __int16 v9 = 0;
  unsigned int IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*a1, CFStringFrom4CC, @"vide", (Boolean *)&v9 + 1, &v9);
  int v5 = HIBYTE(v9);
  if (HIBYTE(v9)) {
    BOOL v6 = v9 == 0;
  }
  else {
    BOOL v6 = 1;
  }
  if (v6)
  {
    unsigned int IsValueInArrayInDictionary = mv_IsValueInArrayInDictionary(*a1, CFStringFrom4CC, @"VideoCodecs", (Boolean *)&v9 + 1, &v9);
    int v5 = HIBYTE(v9);
  }
  if (v5) {
    uint64_t v7 = IsValueInArrayInDictionary;
  }
  else {
    uint64_t v7 = 4294954344;
  }
  if (CFStringFrom4CC) {
    CFRelease(CFStringFrom4CC);
  }
  return v7;
}

uint64_t mv_ValidateVideoProfileLevelTier(const __CFArray *a1, CFNumberRef number, const __CFNumber *a3, const __CFNumber *a4, int a5, int a6, int a7)
{
  if (!((unint64_t)a1 | (unint64_t)number)) {
    return 0;
  }
  int valuePtr = 0;
  if (!a1 && number)
  {
    CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
    int v13 = valuePtr;
LABEL_8:
    int IsIntInCFArray = v13 >= a5;
    goto LABEL_9;
  }
  if (!a1)
  {
    int v13 = 0;
    goto LABEL_8;
  }
  int IsIntInCFArray = mv_IsIntInCFArray(a5, a1);
LABEL_9:
  if (!IsIntInCFArray) {
    return FigSignalErrorAt();
  }
  int v17 = 0;
  if (a3)
  {
    CFNumberGetValue(a3, kCFNumberSInt32Type, &v17);
    if (v17 < a6) {
      return FigSignalErrorAt();
    }
    if (a1)
    {
      if (!mv_IsIntInCFArray(a5, a1)) {
        return FigSignalErrorAt();
      }
    }
    else if (valuePtr < a5)
    {
      return FigSignalErrorAt();
    }
  }
  int v16 = 0;
  if (a4)
  {
    CFNumberGetValue(a4, kCFNumberSInt32Type, &v16);
    if (v16 < a7) {
      return FigSignalErrorAt();
    }
  }
  return 0;
}

uint64_t mv_ValidateRFC4281_hvc1_hev1(const char *a1, const __CFDictionary *a2, int *a3)
{
  if (!a1) {
    goto LABEL_8;
  }
  int v4 = *(unsigned __int8 *)a1;
  if ((v4 - 65) < 3) {
    goto LABEL_8;
  }
  if ((v4 - 48) >= 0xA) {
    goto LABEL_8;
  }
  uint64_t v20 = 0;
  unsigned int v19 = 0;
  char v18 = 0;
  CFDictionaryRef theDict = 0;
  *(void *)int v17 = 0;
  CFNumberRef v14 = 0;
  CFNumberRef number = 0;
  CFNumberRef v13 = 0;
  if (sscanf(a1, "%u.%x.%c%d*", &v19, (char *)&v20 + 4, &v18, &v20) != 4) {
    goto LABEL_8;
  }
  if (v18 != 76)
  {
    if (v18 == 72)
    {
      int v6 = 1;
      goto LABEL_14;
    }
LABEL_8:
    uint64_t result = FigSignalErrorAt();
    goto LABEL_9;
  }
  int v6 = 0;
LABEL_14:
  if (!a2)
  {
    uint64_t result = 0;
    goto LABEL_9;
  }
  uint64_t result = mv_GetVideoProfileAndLevelConstraints(a2, @"hvc1", v17, 0, &theDict, &number, &v14, &v13);
  if (result)
  {
LABEL_9:
    int v8 = 0;
    goto LABEL_10;
  }
  if (!theDict || !*(void *)v17 || !mv_IsIntInCFArray(v19, *(const __CFArray **)v17)) {
    goto LABEL_25;
  }
  CFStringRef v9 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", v19);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v9);
  int BooleanIfPresent = FigCFDictionaryGetBooleanIfPresent();
  int v8 = 1;
  if (Value)
  {
    CFNumberRef v12 = (const __CFNumber *)CFDictionaryGetValue(Value, @"MaxLevel");
    if (v12) {
      CFNumberRef v14 = v12;
    }
  }
  if (v9) {
    CFRelease(v9);
  }
  if (!BooleanIfPresent)
  {
LABEL_25:
    if (mv_IsHEVCDecoderHardwareAccelerated_hevcHardwareCheckOnce != -1) {
      dispatch_once(&mv_IsHEVCDecoderHardwareAccelerated_hevcHardwareCheckOnce, &__block_literal_global_291);
    }
    if (sHEVCDecoderIsHardwareAccelerated) {
      int v8 = 2;
    }
    else {
      int v8 = 1;
    }
  }
  if ((unint64_t)number | *(void *)v17) {
    uint64_t result = mv_ValidateVideoProfileLevelTier(*(const __CFArray **)v17, number, v14, v13, v19, v20, v6);
  }
  else {
    uint64_t result = FigSignalErrorAt();
  }
LABEL_10:
  if (a3) {
    *a3 = v8;
  }
  return result;
}

uint64_t mv_ValidateRFC4281_dvhe_dvh1(char *a1, const __CFDictionary *a2, int *a3)
{
  CFArrayRef v29 = 0;
  CFArrayRef theArray = 0;
  CFDictionaryRef theDict = 0;
  if (!a1)
  {
    uint64_t v19 = FigSignalErrorAt();
LABEL_65:
    CFStringRef v14 = 0;
    CFTypeRef v16 = 0;
LABEL_69:
    int v24 = 0;
    goto LABEL_42;
  }
  __stringp = a1;
  int v5 = strsep(&__stringp, ".");
  int v6 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (!v5 || (uint64_t v7 = v5, !*v5))
  {
    uint64_t v19 = FigSignalErrorAt();
    CFTypeRef v16 = 0;
    int v15 = 0;
    CFStringRef v14 = 0;
    int v24 = 0;
    if (v19) {
      goto LABEL_42;
    }
    goto LABEL_22;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v9 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v5, 0x8000100u);
  CFStringRef v10 = v9;
  if (!__stringp)
  {
    CFNumberRef v12 = 0;
    CFStringRef v13 = 0;
    if (v9) {
      goto LABEL_11;
    }
    goto LABEL_50;
  }
  CFArrayRef v11 = strsep(&__stringp, ".");
  CFNumberRef v12 = v11;
  if (v11 && *v11) {
    CFStringRef v13 = CFStringCreateWithCString(v8, v11, 0x8000100u);
  }
  else {
    CFStringRef v13 = 0;
  }
  if (!__stringp)
  {
    if (v10)
    {
LABEL_11:
      if (CFStringGetLength(v10) == 2
        && (*v7 - 48) <= 9
        && (v7[1] - 48) <= 9
        && v13
        && CFStringGetLength(v13) == 2
        && (*v12 - 48) <= 9
        && (v12[1] - 48) <= 9)
      {
        CFStringRef v14 = (const __CFString *)CFRetain(v10);
        int v15 = 1;
LABEL_19:
        CFTypeRef v16 = CFRetain(v13);
        CFRelease(v10);
LABEL_20:
        CFStringRef v10 = v13;
LABEL_21:
        CFRelease(v10);
        goto LABEL_22;
      }
      goto LABEL_52;
    }
LABEL_50:
    uint64_t v26 = FigSignalErrorAt();
    if (v26)
    {
      uint64_t v19 = v26;
LABEL_55:
      if (v13) {
        CFRelease(v13);
      }
      goto LABEL_65;
    }
    goto LABEL_62;
  }
LABEL_52:
  uint64_t v27 = FigSignalErrorAt();
  if (v27)
  {
    uint64_t v19 = v27;
    if (v10) {
      CFRelease(v10);
    }
    goto LABEL_55;
  }
  if (v10)
  {
    CFStringRef v14 = (const __CFString *)CFRetain(v10);
    int v15 = 0;
    if (!v13)
    {
      CFTypeRef v16 = 0;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
LABEL_62:
  if (v13)
  {
    CFTypeRef v16 = CFRetain(v13);
    CFStringRef v14 = 0;
    int v15 = 0;
    goto LABEL_20;
  }
  CFTypeRef v16 = 0;
  int v15 = 0;
  CFStringRef v14 = 0;
LABEL_22:
  if (!a2)
  {
    int v24 = 0;
    uint64_t v19 = 0;
    goto LABEL_42;
  }
  uint64_t VideoProfileAndLevelConstraints = mv_GetVideoProfileAndLevelConstraints(a2, @"dvh1", &theArray, &v29, &theDict, 0, 0, 0);
  if (VideoProfileAndLevelConstraints) {
    goto LABEL_68;
  }
  CFArrayRef v18 = theArray;
  if (!theArray)
  {
    uint64_t VideoProfileAndLevelConstraints = FigSignalErrorAt();
LABEL_68:
    uint64_t v19 = VideoProfileAndLevelConstraints;
    goto LABEL_69;
  }
  v32.length = CFArrayGetCount(theArray);
  v32.location = 0;
  if (!CFArrayContainsValue(v18, v32, v14))
  {
    __stringp = 0;
    FigCFStringGetCStringPtrAndBufferToFree();
    uint64_t v19 = FigSignalErrorAt();
    free(__stringp);
    if (v19) {
      goto LABEL_69;
    }
  }
  if (!v15
    || v16
    && (CFArrayRef v20 = v29) != 0
    && (v33.length = CFArrayGetCount(v29), v33.location = 0, CFArrayContainsValue(v20, v33, v16)))
  {
    uint64_t v19 = 0;
  }
  else
  {
    __stringp = 0;
    FigCFStringGetCStringPtrAndBufferToFree();
    uint64_t v19 = FigSignalErrorAt();
    free(__stringp);
  }
  if (theDict)
  {
    if (v14)
    {
      CFAllocatorRef v21 = *v6;
      IntCFDictionaryRef Value = CFStringGetIntValue(v14);
      CFStringRef v23 = CFStringCreateWithFormat(v21, 0, @"%d", IntValue);
      CFDictionaryGetValue(theDict, v23);
      LOBYTE(__stringp) = 0;
      FigCFDictionaryGetBooleanIfPresent();
      if (v23) {
        CFRelease(v23);
      }
    }
  }
  if (mv_IsHEVCDecoderHardwareAccelerated_hevcHardwareCheckOnce != -1) {
    dispatch_once(&mv_IsHEVCDecoderHardwareAccelerated_hevcHardwareCheckOnce, &__block_literal_global_291);
  }
  if (sHEVCDecoderIsHardwareAccelerated) {
    int v24 = 2;
  }
  else {
    int v24 = 1;
  }
LABEL_42:
  if (a3) {
    *a3 = v24;
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v16) {
    CFRelease(v16);
  }
  return v19;
}

uint64_t mv_ValidateRFC4281_av01(const char *a1, const __CFDictionary *a2, int *a3)
{
  uint64_t v27 = 0;
  char v26 = 32;
  unsigned int v24 = 0;
  unsigned int v25 = 0;
  int v23 = 272;
  if (!a1) {
    goto LABEL_4;
  }
  CFDictionaryRef v31 = 0;
  CFArrayRef v32 = 0;
  CFNumberRef v30 = 0;
  CFNumberRef v28 = 0;
  CFNumberRef v29 = 0;
  int v5 = sscanf(a1, "%1u.%2u%c.%2u.%1d.%03x", (char *)&v27 + 4, &v27, &v26, &v25, &v24, &v23);
  if (v5 < 4 || HIDWORD(v27) >= 3 || (v25 & 0xFFFFFFFD) != 8 && (HIDWORD(v27) != 2 || v25 != 12)) {
    goto LABEL_4;
  }
  if (v26 == 77)
  {
    int v8 = 0;
  }
  else
  {
    if (v26 != 72) {
      goto LABEL_4;
    }
    int v8 = 1;
  }
  if (v5 >= 5 && v24 >= 2) {
    goto LABEL_4;
  }
  if (v5 < 6) {
    goto LABEL_37;
  }
  if ((v23 & 0xFFFFFF00) > 0x100
    || (v23 & 0xF0u) > 0x10
    || (v23 & 0xFu) > 3
    || ((v23 & 0xFF0) != 0x110 ? (BOOL v9 = (v23 & 0xF) == 0) : (BOOL v9 = 1),
        v9 ? (int v10 = 0) : (int v10 = 1),
        (v23 & 0xFF0) == 0x10 || v10 || v24 && (v23 & 0xFFF) != 0x110))
  {
LABEL_4:
    uint64_t result = FigSignalErrorAt();
    goto LABEL_5;
  }
  if (!HIDWORD(v27))
  {
    if ((v23 & 0xFFFFFEFF) != 0) {
      goto LABEL_37;
    }
    goto LABEL_4;
  }
  if (HIDWORD(v27) == 1 && v23 == 256) {
    goto LABEL_4;
  }
LABEL_37:
  if (!a2)
  {
    int v7 = 0;
    goto LABEL_60;
  }
  uint64_t result = mv_GetVideoProfileAndLevelConstraints(a2, @"av01", &v32, 0, &v31, &v30, &v29, &v28);
  if (result)
  {
LABEL_5:
    int v7 = 0;
    goto LABEL_6;
  }
  int v7 = 0;
  if (v31 && v32)
  {
    if (!mv_IsIntInCFArray(SHIDWORD(v27), v32)) {
      goto LABEL_56;
    }
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v12 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", HIDWORD(v27));
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v31, v12);
    if (v12) {
      CFRelease(v12);
    }
    if (Value)
    {
      int v7 = FigCFDictionaryGetBooleanIfPresent() != 0;
      CFNumberRef v14 = (const __CFNumber *)CFDictionaryGetValue(Value, @"MaxLevel");
      if (v14) {
        CFNumberRef v29 = v14;
      }
      CFArrayRef v15 = (const __CFArray *)CFDictionaryGetValue(Value, @"ChromaSubsampling");
      if (v15)
      {
        CFArrayRef v16 = v15;
        CFStringRef v17 = CFStringCreateWithFormat(v11, 0, @"%03x", v23 & 0xFF0 | v24);
        v33.length = CFArrayGetCount(v16);
        v33.location = 0;
        int v18 = CFArrayContainsValue(v16, v33, v17);
        if (v17) {
          CFRelease(v17);
        }
        if (!v18) {
          goto LABEL_67;
        }
      }
      CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(Value, @"ColorDepth");
      if (v19)
      {
        CFArrayRef v20 = v19;
        CFStringRef v21 = CFStringCreateWithFormat(v11, 0, @"%02d", v25);
        v34.length = CFArrayGetCount(v20);
        v34.location = 0;
        int v22 = CFArrayContainsValue(v20, v34, v21);
        if (v21) {
          CFRelease(v21);
        }
        if (!v22) {
          goto LABEL_67;
        }
      }
    }
    else
    {
LABEL_56:
      int v7 = 0;
    }
  }
  if (!((unint64_t)v30 | (unint64_t)v32))
  {
LABEL_67:
    uint64_t result = FigSignalErrorAt();
    goto LABEL_6;
  }
  uint64_t result = mv_ValidateVideoProfileLevelTier(v32, v30, v29, v28, SHIDWORD(v27), v27, v8);
  if (result) {
    goto LABEL_6;
  }
  if (v7)
  {
LABEL_60:
    uint64_t result = 0;
    goto LABEL_6;
  }
  if (mv_IsAV1DecoderHardwareAccelerated_av1HardwareCheckOnce != -1) {
    dispatch_once(&mv_IsAV1DecoderHardwareAccelerated_av1HardwareCheckOnce, &__block_literal_global_302);
  }
  uint64_t result = 0;
  if (sAV1DecoderIsHardwareAccelerated) {
    int v7 = 2;
  }
  else {
    int v7 = 1;
  }
LABEL_6:
  if (a3) {
    *a3 = v7;
  }
  return result;
}

uint64_t mv_ValidateRFC4281_dav1(const char *a1, const __CFDictionary *a2, int *a3)
{
  uint64_t v17 = 0;
  CFArrayRef v15 = 0;
  CFArrayRef theArray = 0;
  CFDictionaryRef theDict = 0;
  if (!a1 || sscanf(a1, "%02u.%02u", (char *)&v17 + 4, &v17) != 2 || HIDWORD(v17) != 10 || v17 >= 0xE) {
    goto LABEL_15;
  }
  if (!a2)
  {
    int v11 = 0;
    CFStringRef v8 = 0;
    goto LABEL_13;
  }
  uint64_t VideoProfileAndLevelConstraints = mv_GetVideoProfileAndLevelConstraints(a2, @"dav1", &theArray, &v15, &theDict, 0, 0, 0);
  if (VideoProfileAndLevelConstraints) {
    goto LABEL_16;
  }
  if (!theArray)
  {
LABEL_15:
    uint64_t VideoProfileAndLevelConstraints = FigSignalErrorAt();
LABEL_16:
    uint64_t v12 = VideoProfileAndLevelConstraints;
    int v11 = 0;
    CFStringRef v8 = 0;
    a2 = 0;
    if (a3) {
      goto LABEL_21;
    }
    goto LABEL_22;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  a2 = (const __CFDictionary *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%d", HIDWORD(v17));
  CFArrayRef v7 = theArray;
  v18.length = CFArrayGetCount(theArray);
  v18.location = 0;
  if (!CFArrayContainsValue(v7, v18, a2))
  {
    uint64_t v12 = FigSignalErrorAt();
    int v11 = 0;
    CFStringRef v8 = 0;
    if (!a3) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  CFStringRef v8 = CFStringCreateWithFormat(v6, 0, @"%02d", v17);
  CFArrayRef v9 = v15;
  if (v15 && (v19.length = CFArrayGetCount(v15), v19.location = 0, CFArrayContainsValue(v9, v19, v8)))
  {
    if (theDict)
    {
      CFDictionaryGetValue(theDict, a2);
      int BooleanIfPresent = FigCFDictionaryGetBooleanIfPresent();
      int v11 = 1;
      if (BooleanIfPresent)
      {
LABEL_13:
        uint64_t v12 = 0;
        if (!a3) {
          goto LABEL_22;
        }
LABEL_21:
        *a3 = v11;
        goto LABEL_22;
      }
    }
    if (mv_IsAV1DecoderHardwareAccelerated_av1HardwareCheckOnce != -1) {
      dispatch_once(&mv_IsAV1DecoderHardwareAccelerated_av1HardwareCheckOnce, &__block_literal_global_302);
    }
    uint64_t v12 = 0;
    if (sAV1DecoderIsHardwareAccelerated) {
      int v11 = 2;
    }
    else {
      int v11 = 1;
    }
    if (a3) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v12 = FigSignalErrorAt();
    int v11 = 0;
    if (a3) {
      goto LABEL_21;
    }
  }
LABEL_22:
  if (a2) {
    CFRelease(a2);
  }
  if (v8) {
    CFRelease(v8);
  }
  return v12;
}

uint64_t mv_ValidateRFC4281VideoFromCodecType(const __CFDictionary *a1, unsigned int a2)
{
  CFDictionaryRef IsValueInArrayInDictionary = a1;
  __int16 v7 = 0;
  if (!a1) {
    return (uint64_t)IsValueInArrayInDictionary;
  }
  CFStringRef CFStringFrom4CC = mv_CreateCFStringFrom4CC(a2);
  if (CFStringFrom4CC)
  {
    CFStringRef v4 = CFStringFrom4CC;
    if (!mv_IsValueInArrayInDictionary(IsValueInArrayInDictionary, CFStringFrom4CC, @"vide", (Boolean *)&v7 + 1, &v7))
    {
      if (HIBYTE(v7))
      {
        int v5 = v7;
        if ((_BYTE)v7) {
          goto LABEL_8;
        }
      }
    }
    CFDictionaryRef IsValueInArrayInDictionary = (const __CFDictionary *)mv_IsValueInArrayInDictionary(IsValueInArrayInDictionary, v4, @"VideoCodecs", (Boolean *)&v7 + 1, &v7);
    if (IsValueInArrayInDictionary)
    {
LABEL_11:
      CFRelease(v4);
      return (uint64_t)IsValueInArrayInDictionary;
    }
    int v5 = v7;
    if (HIBYTE(v7))
    {
LABEL_8:
      if (v5)
      {
        CFDictionaryRef IsValueInArrayInDictionary = 0;
        goto LABEL_11;
      }
    }
    CFDictionaryRef IsValueInArrayInDictionary = (const __CFDictionary *)FigSignalErrorAt();
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

CFDictionaryRef mv_ValidateRFC4281_vp9(const char *a1, const __CFDictionary *a2, BOOL *a3)
{
  unsigned int v25 = 0;
  unsigned int v24 = 0;
  CFArrayRef theArray = 0;
  uint64_t valuePtr = 0;
  CFDictionaryRef theDict = 0;
  CFArrayRef v21 = 0;
  if (!a1 || sscanf(a1, "%u.%u.%u", (char *)&valuePtr + 4, &v24, &v25) != 3) {
    goto LABEL_12;
  }
  if (!a2) {
    goto LABEL_13;
  }
  uint64_t VideoProfileAndLevelConstraints = mv_GetVideoProfileAndLevelConstraints(a2, @"vp09", &theArray, &v21, &theDict, 0, 0, 0);
  if (!theArray)
  {
LABEL_12:
    a2 = (const __CFDictionary *)FigSignalErrorAt();
LABEL_13:
    BOOL v11 = 0;
    CFStringRef v15 = 0;
    CFStringRef v16 = 0;
    CFStringRef v14 = 0;
    CFStringRef v7 = 0;
    if (!a3) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  a2 = (const __CFDictionary *)VideoProfileAndLevelConstraints;
  if (!theDict) {
    goto LABEL_13;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%02d", HIDWORD(valuePtr));
  CFArrayRef v8 = theArray;
  v26.length = CFArrayGetCount(theArray);
  v26.location = 0;
  if (!CFArrayContainsValue(v8, v26, v7))
  {
    a2 = (const __CFDictionary *)FigSignalErrorAt();
    BOOL v11 = 0;
    CFStringRef v15 = 0;
    CFStringRef v16 = 0;
    CFStringRef v14 = 0;
    if (!a3) {
      goto LABEL_21;
    }
LABEL_20:
    *a3 = v11;
    goto LABEL_21;
  }
  CFStringRef v9 = CFStringCreateWithFormat(v6, 0, @"%d", HIDWORD(valuePtr));
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v9);
  if (v9) {
    CFRelease(v9);
  }
  BOOL v11 = FigCFDictionaryGetBooleanIfPresent() != 0;
  CFArrayRef v12 = (const __CFArray *)CFDictionaryGetValue(Value, @"ColorDepth");
  if (v12)
  {
    CFArrayRef v13 = v12;
    CFStringRef v14 = CFStringCreateWithFormat(v6, 0, @"%02d", v25);
    v27.length = CFArrayGetCount(v13);
    v27.location = 0;
    if (!CFArrayContainsValue(v13, v27, v14))
    {
      CFStringRef v15 = 0;
      CFStringRef v16 = 0;
      goto LABEL_32;
    }
  }
  else
  {
    CFStringRef v14 = 0;
  }
  CFNumberRef v17 = (const __CFNumber *)CFDictionaryGetValue(Value, @"MaxLevel");
  CFNumberGetValue(v17, kCFNumberIntType, &valuePtr);
  CFStringRef v15 = CFStringCreateWithFormat(v6, 0, @"%02d", valuePtr);
  CFStringRef v16 = CFStringCreateWithFormat(v6, 0, @"%02d", v24);
  CFArrayRef v18 = v21;
  v28.length = CFArrayGetCount(v21);
  v28.location = 0;
  v29.length = CFArrayGetFirstIndexOfValue(v18, v28, v15) + 1;
  v29.location = 0;
  if (CFArrayContainsValue(v21, v29, v16))
  {
    if (!a3) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
LABEL_32:
  a2 = (const __CFDictionary *)FigSignalErrorAt();
  if (a3) {
    goto LABEL_20;
  }
LABEL_21:
  if (v7) {
    CFRelease(v7);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (v16) {
    CFRelease(v16);
  }
  return a2;
}

uint64_t mv_ValidateRFC4281AudioFromCodecType(const __CFDictionary *a1, unsigned int a2)
{
  CFDictionaryRef IsValueInArrayInDictionary = a1;
  __int16 v7 = 0;
  if (!a1) {
    return (uint64_t)IsValueInArrayInDictionary;
  }
  CFStringRef CFStringFrom4CC = mv_CreateCFStringFrom4CC(a2);
  if (CFStringFrom4CC)
  {
    CFStringRef v4 = CFStringFrom4CC;
    if (!mv_IsValueInArrayInDictionary(IsValueInArrayInDictionary, CFStringFrom4CC, @"soun", (Boolean *)&v7 + 1, &v7))
    {
      if (HIBYTE(v7))
      {
        int v5 = v7;
        if ((_BYTE)v7) {
          goto LABEL_8;
        }
      }
    }
    CFDictionaryRef IsValueInArrayInDictionary = (const __CFDictionary *)mv_IsValueInArrayInDictionary(IsValueInArrayInDictionary, v4, @"AudioCodecs", (Boolean *)&v7 + 1, &v7);
    if (IsValueInArrayInDictionary)
    {
LABEL_11:
      CFRelease(v4);
      return (uint64_t)IsValueInArrayInDictionary;
    }
    int v5 = v7;
    if (HIBYTE(v7))
    {
LABEL_8:
      if (v5)
      {
        CFDictionaryRef IsValueInArrayInDictionary = 0;
        goto LABEL_11;
      }
    }
    CFDictionaryRef IsValueInArrayInDictionary = (const __CFDictionary *)FigSignalErrorAt();
    goto LABEL_11;
  }

  return FigSignalErrorAt();
}

uint64_t mv_ValidateRFC4281_apac(unsigned int a1, uint64_t a2)
{
  uint64_t v3 = HIBYTE(a1);
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (a2) {
    CFStringRef v5 = CFStringCreateWithFormat(v4, 0, @"%c%c%c%c.%s", v3, BYTE2(a1), BYTE1(a1), a1, a2);
  }
  else {
    CFStringRef v5 = CFStringCreateWithFormat(v4, 0, @"%c%c%c%c", v3, BYTE2(a1), BYTE1(a1), a1);
  }
  CFStringRef v6 = v5;
  uint64_t v7 = mv_ValidateAudioCodecsParameterValue((uint64_t)v5);
  if (v6) {
    CFRelease(v6);
  }
  return v7;
}

char *mv_ValidateRFC4281_xvtt(char *result)
{
  __stringp = result;
  if (result)
  {
    uint64_t v1 = result;
    strsep(&__stringp, ".");
    if (__stringp) {
      return (char *)FigSignalErrorAt();
    }
    while (1)
    {
      int v2 = *v1;
      if ((v2 - 114) > 6 || ((1 << (v2 - 114)) & 0x53) == 0) {
        break;
      }
      ++v1;
    }
    if (*v1) {
      return (char *)FigSignalErrorAt();
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t mv_ValidateRFC4281_ttml(char *a1)
{
  __int16 v11 = 0;
  if (!a1)
  {
    return FigSignalErrorAt();
  }
  __stringp = a1;
  strsep(&__stringp, ".");
  if (strcmp(a1, "ttml") || !__stringp) {
    return FigSignalErrorAt();
  }
  CFArrayRef v12 = __stringp;
  strsep(&v12, ".");
  unsigned int v2 = 0;
  uint64_t v3 = __stringp;
  uint64_t v4 = MEMORY[0x1E4F14390];
  while (1)
  {
    int v5 = *v3;
    if (v5 == 43)
    {
      if (v2)
      {
        BOOL v6 = v2 == 1768763764;
        unsigned int v2 = 0;
        if (v6) {
          uint64_t v7 = (__int16 *)((char *)&v11 + 1);
        }
        else {
          uint64_t v7 = &v11;
        }
        *(unsigned char *)uint64_t v7 = 1;
      }
      goto LABEL_27;
    }
    if (v5 != 124) {
      break;
    }
    if (v2)
    {
      if (v2 == 1768763764) {
        CFArrayRef v8 = (__int16 *)((char *)&v11 + 1);
      }
      else {
        CFArrayRef v8 = &v11;
      }
      *(unsigned char *)CFArrayRef v8 = 1;
    }
    if (HIBYTE(v11) && !(_BYTE)v11) {
      goto LABEL_32;
    }
    unsigned int v2 = 0;
    __int16 v11 = 0;
LABEL_27:
    uint64_t v3 = ++__stringp;
  }
  if (!v5) {
    goto LABEL_28;
  }
  if (((char)v5 & 0x80000000) == 0)
  {
    if ((*(_DWORD *)(v4 + 4 * (char)v5 + 60) & 0x4000) != 0) {
      goto LABEL_28;
    }
    goto LABEL_25;
  }
  if (!__maskrune((char)v5, 0x4000uLL))
  {
LABEL_25:
    if (HIBYTE(v2)) {
      goto LABEL_32;
    }
    unsigned int v2 = *__stringp | (v2 << 8);
    goto LABEL_27;
  }
LABEL_28:
  if (v2)
  {
    CFStringRef v9 = (__int16 *)((char *)&v11 + 1);
    if (v2 != 1768763764) {
      CFStringRef v9 = &v11;
    }
    *(unsigned char *)CFStringRef v9 = 1;
  }
LABEL_32:
  ++__stringp;
  if (!(_BYTE)v11 && HIBYTE(v11)) {
    return 0;
  }
  return FigSignalErrorAt();
}

BOOL mv_IsPlistRequiredforRFC4281IdValidation(const __CFDictionary *a1, const char *a2)
{
  if (!strcmp("mp4a", a2))
  {
    unsigned int v5 = 1633772320;
LABEL_26:
    CFStringRef CFStringFrom4CC = mv_CreateCFStringFrom4CC(v5);
    if (!CFStringFrom4CC) {
      return 0;
    }
    CFStringRef v7 = CFStringFrom4CC;
    __int16 v14 = 0;
    if (!mv_IsValueInArrayInDictionary(a1, CFStringFrom4CC, @"soun", (Boolean *)&v14 + 1, &v14)
      && HIBYTE(v14)
      && (_BYTE)v14
      || !mv_IsValueInArrayInDictionary(a1, v7, @"AudioCodecs", (Boolean *)&v14 + 1, &v14))
    {
      goto LABEL_37;
    }
    if (strcmp("mp4a", a2))
    {
      BOOL v8 = 0;
LABEL_41:
      CFRelease(v7);
      return v8;
    }
    CFRelease(v7);
    CFStringRef v9 = mv_CreateCFStringFrom4CC(0x2E6D7033u);
    if (!v9) {
      return 0;
    }
    CFStringRef v7 = v9;
    if (!mv_IsValueInArrayInDictionary(a1, v9, @"soun", (Boolean *)&v14 + 1, &v14)
      && HIBYTE(v14)
      && (_BYTE)v14)
    {
LABEL_37:
      BOOL v10 = 1;
    }
    else
    {
      BOOL v10 = mv_IsValueInArrayInDictionary(a1, v7, @"AudioCodecs", (Boolean *)&v14 + 1, &v14) == 0;
    }
    BOOL v8 = 0;
    if (v10 && (_BYTE)v14) {
      BOOL v8 = HIBYTE(v14) != 0;
    }
    goto LABEL_41;
  }
  if (!strcmp("ac-3", a2))
  {
    unsigned int v5 = 1633889587;
    goto LABEL_26;
  }
  if (!strcmp("ec-3", a2))
  {
    unsigned int v5 = 1700998451;
    goto LABEL_26;
  }
  if (!strcmp("fLaC", a2))
  {
    unsigned int v5 = 1718378851;
    goto LABEL_26;
  }
  if (!strcmp("Opus", a2))
  {
    unsigned int v5 = 1869641075;
    goto LABEL_26;
  }
  if (!strcmp("alac", a2))
  {
    unsigned int v5 = 1634492771;
    goto LABEL_26;
  }
  if (!strcmp("avc1", a2) || !strcmp("avc3", a2))
  {
    uint64_t v4 = @"avc1";
    goto LABEL_48;
  }
  if (!strcmp("hvc1", a2) || !strcmp("hev1", a2))
  {
    uint64_t v4 = @"hvc1";
    goto LABEL_48;
  }
  if (!strcmp("dvhe", a2) || !strcmp("dvh1", a2))
  {
    uint64_t v4 = @"dvh1";
    goto LABEL_48;
  }
  if (!strcmp("jpeg", a2) || !strcmp("mjpg", a2))
  {
    uint64_t v4 = @"jpeg";
    goto LABEL_48;
  }
  if (!strcmp("av01", a2) || !strcmp("dav1", a2)) {
    return 1;
  }
  if (strcmp("mp4v", a2)) {
    return 0;
  }
  uint64_t v4 = @"mp4v";
LABEL_48:
  CFStringRef v15 = 0;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (mv_GetCodecProperty(a1, v4, @"VideoCodecProfiles", @"SupportedProfiles", TypeID, &v15)) {
    BOOL v13 = 1;
  }
  else {
    BOOL v13 = v15 == 0;
  }
  return !v13;
}

uint64_t FigMetadataRewriterSetValues(const __CFURL *a1, const __CFDictionary *a2)
{
  CFNumberRef v17 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  if (a1)
  {
    memset(v16, 0, sizeof(v16));
    if (!a2)
    {
      uint64_t v8 = 0;
      goto LABEL_37;
    }
    CFStringRef v3 = CFURLCopyPathExtension(a1);
    BYTE8(v15) = FigCFStringIsISOExtension(v3);
    uint64_t v4 = *MEMORY[0x1E4F1CF80];
    uint64_t v5 = CMByteStreamCreateForFileURL();
    if (v5
      || (uint64_t v5 = FigAtomStreamInitWithByteStream(), v5)
      || (uint64_t v5 = figMDRW_ParseChildAtoms((uint64_t)v16, 2, (uint64_t)&FigMetadataRewriterSetValues_atomDispatch, (uint64_t)&v10), v5))
    {
      uint64_t v8 = v5;
      if (!v3) {
        goto LABEL_37;
      }
      goto LABEL_36;
    }
    if ((!BYTE9(v15) || BYTE10(v15)) && (BYTE9(v15) || !BYTE8(v15)))
    {
      CFTypeRef v20 = 0;
      CFTypeRef v21 = 0;
      CFArrayRef v18 = v17;
      uint64_t v19 = 0;
      int v22 = @"udta";
      uint64_t v23 = *((void *)&v10 + 1);
      uint64_t v24 = *((void *)&v13 + 1);
      if (!*((void *)&v13 + 1)
        || (uint64_t v9 = FigMetadataReaderCreateForQuickTimeUserData(v4, (uint64_t)v17, *((uint64_t *)&v10 + 1), (uint64_t)&v20),
            !v9))
      {
        uint64_t v9 = FigMetadataSerializerCreateForQuickTimeUserData(v4, &v21);
        if (!v9) {
          uint64_t v9 = figMDRW_WriteMetadata((uint64_t)&v18, a2);
        }
      }
      uint64_t v8 = v9;
      if (v20) {
        CFRelease(v20);
      }
      if (v21) {
        CFRelease(v21);
      }
      if (v8)
      {
LABEL_35:
        if (v3) {
LABEL_36:
        }
          CFRelease(v3);
LABEL_37:
        if (v17) {
          CFRelease(v17);
        }
        return v8;
      }
      CFTypeRef v20 = 0;
      CFTypeRef v21 = 0;
      CFArrayRef v18 = v17;
      uint64_t v19 = 0;
      int v22 = @"mdta";
      uint64_t v23 = v11;
      uint64_t v24 = v14;
      if ((void)v14 && (uint64_t v6 = FigMetadataReaderCreateForQuickTimeMetadata(v4, v17, v11, &v20), v6)
        || (uint64_t v6 = FigMetadataSerializerCreateForQuickTimeMetadata(v4, &v21), v6))
      {
LABEL_31:
        uint64_t v8 = v6;
        if (v20) {
          CFRelease(v20);
        }
        if (v21) {
          CFRelease(v21);
        }
        goto LABEL_35;
      }
    }
    else
    {
      CFTypeRef v20 = 0;
      CFTypeRef v21 = 0;
      CFArrayRef v18 = v17;
      uint64_t v19 = 0;
      int v22 = @"uiso";
      uint64_t v23 = *((void *)&v10 + 1);
      uint64_t v24 = *((void *)&v13 + 1);
      if (*((void *)&v13 + 1))
      {
        uint64_t v6 = FigMetadataReaderCreateForISOUserData(v4, (uint64_t)v17, *((uint64_t *)&v10 + 1), (uint64_t)&v20);
        if (v6) {
          goto LABEL_31;
        }
      }
      uint64_t v6 = FigMetadataSerializerCreateForISOUserData(v4, &v21);
      if (v6) {
        goto LABEL_31;
      }
    }
    uint64_t v6 = figMDRW_WriteMetadata((uint64_t)&v18, a2);
    goto LABEL_31;
  }

  return FigSignalErrorAt();
}

uint64_t figMDRW_ParseChildAtoms(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8 = 0;
  uint64_t v9 = (uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
  while (1)
  {
    uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
    if (result) {
      return result;
    }
    if (a2 >= 1)
    {
      int v11 = 0;
      long long v12 = v9;
      long long v13 = v9;
      while (*((_DWORD *)v12 - 2))
      {
        ++v11;
        v13 += 2;
        v12 += 2;
        if (a2 == v11) {
          goto LABEL_12;
        }
      }
      int v14 = 1 << v11;
      if ((*((unsigned char *)v12 - 4) & 1) != 0 && (v14 & v8) != 0) {
        return FigSignalErrorAt();
      }
      v8 |= v14;
      uint64_t result = (*v12)(a1, a4);
      if (result == 1937010544)
      {
        uint64_t result = 0;
        goto LABEL_17;
      }
      if (result) {
        return result;
      }
    }
LABEL_12:
    LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
    if (result)
    {
      if (result == -12890) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = result;
      }
LABEL_17:
      if (a2 >= 1)
      {
        int v15 = 0;
        CFStringRef v16 = (char *)(a3 + 4);
        do
        {
          char v17 = *v16;
          v16 += 16;
          if ((v17 & 2) != 0 && ((v8 >> v15) & 1) == 0) {
            uint64_t result = FigSignalErrorAt();
          }
          ++v15;
        }
        while (a2 != v15);
      }
      return result;
    }
  }
}

uint64_t FigRewriteMetadata(const __CFURL *a1, const __CFDictionary *a2, uint64_t a3, char *a4)
{
  CFTypeRef cf = 0;
  CFTypeRef v96 = 0;
  *(_OWORD *)CFIndex v93 = 0u;
  memset(v94, 0, sizeof(v94));
  long long v91 = 0u;
  long long v92 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  long long v87 = 0u;
  long long v88 = 0u;
  if (!a1 || !a2)
  {
    uint64_t v11 = FigSignalErrorAt();
    goto LABEL_198;
  }
  CFStringRef v8 = CFURLCopyPathExtension(a1);
  BYTE8(v92) = FigCFStringIsISOExtension(v8);
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v10 = CMByteStreamCreateForFileURL();
  if (v10
    || (uint64_t v10 = FigAtomStreamInitWithByteStream(), v10)
    || (uint64_t v10 = figMDRW_ParseChildAtoms((uint64_t)v94, 3, (uint64_t)&FigRewriteMetadata_atomDispatch, (uint64_t)&v87),
        v10))
  {
LABEL_12:
    uint64_t v11 = v10;
    if (!v8) {
      goto LABEL_198;
    }
LABEL_197:
    CFRelease(v8);
    goto LABEL_198;
  }
  if (!LOBYTE(v93[0]))
  {
    if (BYTE9(v92))
    {
      if (BYTE10(v92))
      {
LABEL_16:
        long long v12 = (void **)&kFigMetadataFormat_QuickTimeUserData;
        goto LABEL_19;
      }
    }
    else if (!BYTE8(v92))
    {
      goto LABEL_16;
    }
    long long v12 = (void **)&kFigMetadataFormat_ISOUserData;
LABEL_19:
    long long v13 = *v12;
    CFTypeID v100 = 0;
    uint64_t v101 = 0;
    int v98 = 0;
    int v99 = 0;
    char v97 = 0;
    if (*((void *)&v89 + 1)) {
      BOOL v14 = (void)v92 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    char v16 = v14 || (uint64_t)v89 >= (uint64_t)v87;
    char v86 = v16;
    CFDictionaryRef Value = CFDictionaryGetValue(a2, v13);
    if (Value) {
      CFArrayRef v18 = (__CFArray *)CFRetain(Value);
    }
    else {
      CFArrayRef v18 = 0;
    }
    int v102 = v18;
    uint64_t v19 = CFDictionaryGetValue(a2, @"com.apple.quicktime.mdta");
    if (v19) {
      CFArrayRef v20 = (const __CFArray *)CFRetain(v19);
    }
    else {
      CFArrayRef v20 = 0;
    }
    CFTypeRef v21 = CFDictionaryGetValue(a2, @"com.apple.itunes");
    CFArrayRef v85 = v13;
    if (!v21)
    {
      uint64_t v101 = 0;
      if (!v18)
      {
        CFTypeRef v27 = 0;
        unsigned int v25 = 0;
        CFArrayRef v23 = 0;
        goto LABEL_56;
      }
      goto LABEL_39;
    }
    int v22 = (__CFArray *)CFRetain(v21);
    CFArrayRef v23 = v22;
    uint64_t v101 = v22;
    if (v18)
    {
      if (!v22)
      {
LABEL_39:
        uint64_t UserDataBBufWithiTunes = figMDRW_CopyMetadataArrayFromByteStream((uint64_t *)&cf, @"com.apple.itunes", &v101);
        if (UserDataBBufWithiTunes) {
          goto LABEL_218;
        }
        CFArrayRef v23 = v101;
      }
LABEL_41:
      uint64_t UserDataBBufWithiTunes = figMDRW_CreateUserDataBBufWithiTunes(v18, *((uint64_t *)&v90 + 1), v23, v13, (CFTypeRef *)&v100);
      if (UserDataBBufWithiTunes) {
        goto LABEL_218;
      }
      unsigned int v25 = v100;
      if (v100)
      {
        Dataunint64_t Length = CMBlockBufferGetDataLength(v100);
        CFTypeRef v27 = 0;
        BOOL v28 = DataLength == *((void *)&v90 + 1);
LABEL_57:
        CFNumberRef v30 = 0;
        BOOL v31 = 1;
        if (v28 && v20)
        {
          uint64_t UserDataBBufWithiTunes = figMDRW_CreateMetadataBBufFromMetadataArray(v20, @"com.apple.quicktime.mdta", v91, (CFTypeRef *)&v98);
          if (UserDataBBufWithiTunes) {
            goto LABEL_218;
          }
          CFNumberRef v30 = v98;
          if (v98)
          {
            size_t v32 = CMBlockBufferGetDataLength(v98);
            BOOL v31 = v32 == (void)v91;
          }
          else
          {
            BOOL v31 = 1;
          }
        }
        if (v28 && v31)
        {
          uint64_t v115 = 0;
          if (!v30 || (uint64_t UserDataBBufWithiTunes = CMByteStreamWriteBlockBuffer(), !UserDataBBufWithiTunes))
          {
            if (v25 || v27) {
              uint64_t v11 = CMByteStreamWriteBlockBuffer();
            }
            else {
              uint64_t v11 = 0;
            }
            char v40 = v86;
            if (a4 && !v11)
            {
              uint64_t v41 = 0;
LABEL_181:
              uint64_t v11 = 0;
              *a4 = v40;
              goto LABEL_182;
            }
            goto LABEL_184;
          }
LABEL_218:
          uint64_t v11 = UserDataBBufWithiTunes;
          goto LABEL_184;
        }
        v104 = 0;
        int v105 = 0;
        unsigned int sourceBytes = 0;
        if (v20) {
          CFRange v33 = (__CFArray *)CFRetain(v20);
        }
        else {
          CFRange v33 = 0;
        }
        BOOL v108 = v33;
        if (v18) {
          CFRange v34 = (__CFArray *)CFRetain(v18);
        }
        else {
          CFRange v34 = 0;
        }
        int v107 = v34;
        if (v23) {
          uint64_t v35 = (__CFArray *)CFRetain(v23);
        }
        else {
          uint64_t v35 = 0;
        }
        int v106 = v35;
        v116[0] = 0;
        uint64_t v115 = 0;
        uint64_t v111 = 0;
        CMBlockBufferRef blockBufferOut = 0;
        CMVideoDimensions v109 = 0;
        double v110 = 0;
        if (!*((void *)&v89 + 1)) {
          goto LABEL_177;
        }
        CFTypeRef v36 = cf;
        uint64_t v37 = v87;
        uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v38) {
          uint64_t v39 = v38;
        }
        else {
          uint64_t v39 = 0;
        }
        int v42 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, unsigned int *, uint64_t *))(v39 + 8);
        if (!v42) {
          goto LABEL_132;
        }
        uint64_t v43 = v42(v36, 4, v37, v116, &v115);
        if (v43) {
          goto LABEL_228;
        }
        uint64_t v44 = bswap32(v116[0]);
        v116[0] = v44;
        uint64_t v113 = 0;
        uint64_t v114 = 0;
        uint64_t v45 = v91;
        if (*((void *)&v90 + 1))
        {
          uint64_t v46 = *((void *)&v87 + 1);
          if ((void)v91)
          {
            if (*((uint64_t *)&v87 + 1) <= (uint64_t)v88) {
              uint64_t v47 = v88;
            }
            else {
              uint64_t v47 = *((void *)&v87 + 1);
            }
            uint64_t v84 = v47;
            if (*((uint64_t *)&v87 + 1) < (uint64_t)v88)
            {
              uint64_t v48 = *((void *)&v90 + 1);
            }
            else
            {
              uint64_t v46 = v88;
              uint64_t v48 = v91;
            }
            uint64_t v114 = v48;
            if (*((uint64_t *)&v87 + 1) >= (uint64_t)v88) {
              uint64_t v45 = *((void *)&v90 + 1);
            }
            uint64_t v49 = &v113;
          }
          else
          {
            uint64_t v84 = 0;
            uint64_t v49 = &v114;
            uint64_t v45 = *((void *)&v90 + 1);
          }
        }
        else
        {
          if (!(void)v91)
          {
            uint64_t v50 = 0;
            uint64_t v46 = 0;
            uint64_t v84 = 0;
LABEL_104:
            uint64_t v51 = v87;
            if (v50) {
              uint64_t v52 = v46 - v87;
            }
            else {
              uint64_t v52 = v44;
            }
            CFTypeRef v53 = cf;
            uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v54) {
              uint64_t v55 = v54;
            }
            else {
              uint64_t v55 = 0;
            }
            BOOL v56 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, OpaqueCMBlockBuffer **, uint64_t *))(v55 + 32);
            if (!v56) {
              goto LABEL_132;
            }
            uint64_t v43 = v56(v53, v52, v51, &v111, &v115);
            if (v43) {
              goto LABEL_228;
            }
            uint64_t v57 = v113;
            uint64_t v58 = v44;
            if (v50)
            {
              uint64_t v83 = v113;
              if (v113) {
                uint64_t v59 = v84;
              }
              else {
                uint64_t v59 = v87 + v44;
              }
              CFTypeRef v60 = cf;
              uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v61) {
                uint64_t v62 = v61;
              }
              else {
                uint64_t v62 = 0;
              }
              CFArrayRef v63 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, OpaqueCMBlockBuffer **, uint64_t *))(v62 + 32);
              if (!v63) {
                goto LABEL_132;
              }
              uint64_t v51 = v46 + v50;
              uint64_t v58 = v59 - (v46 + v50);
              uint64_t v43 = v63(v60, v58, v46 + v50, &v110, &v115);
              uint64_t v57 = v83;
              if (v43) {
                goto LABEL_228;
              }
            }
            if (!v57)
            {
LABEL_128:
              if (!v111)
              {
                int v72 = 0;
                char v71 = v85;
                goto LABEL_208;
              }
              uint64_t v43 = CMBlockBufferCreateEmpty(v9, 8u, 1u, &blockBufferOut);
              if (!v43)
              {
                uint64_t appended = CMBlockBufferAppendBufferReference(blockBufferOut, v111, 0, 0, 0);
                char v71 = v85;
                if (appended) {
                  goto LABEL_226;
                }
                int v72 = blockBufferOut;
LABEL_208:
                if (v110)
                {
                  uint64_t appended = CMBlockBufferAppendBufferReference(v72, v110, 0, 0, 0);
                  if (appended) {
                    goto LABEL_226;
                  }
                  int v72 = blockBufferOut;
                }
                if (v109)
                {
                  uint64_t appended = CMBlockBufferAppendBufferReference(v72, v109, 0, 0, 0);
                  if (appended) {
                    goto LABEL_226;
                  }
                  int v72 = blockBufferOut;
                }
                size_t v82 = CMBlockBufferGetDataLength(v72);
                if (!HIDWORD(v82))
                {
                  v116[0] = bswap32(v82);
                  uint64_t v11 = CMBlockBufferReplaceDataBytes(v116, blockBufferOut, 0, 4uLL);
                  if (!v11)
                  {
                    int v73 = blockBufferOut;
                    CMBlockBufferRef blockBufferOut = 0;
                    goto LABEL_134;
                  }
LABEL_227:
                  int v73 = 0;
LABEL_134:
                  if (v109) {
                    CFRelease(v109);
                  }
                  if (v110) {
                    CFRelease(v110);
                  }
                  if (v111) {
                    CFRelease(v111);
                  }
                  if (blockBufferOut) {
                    CFRelease(blockBufferOut);
                  }
                  if (v11) {
                    goto LABEL_224;
                  }
                  if (v73)
                  {
                    CFArrayRef v74 = v108;
                    if (v108) {
                      goto LABEL_147;
                    }
                    uint64_t MetadataBBufFromMetadataArray = figMDRW_CopyMetadataArrayFromByteStream((uint64_t *)&cf, @"com.apple.quicktime.mdta", &v108);
                    if (MetadataBBufFromMetadataArray) {
                      goto LABEL_223;
                    }
                    CFArrayRef v74 = v108;
                    if (v108)
                    {
LABEL_147:
                      uint64_t MetadataBBufFromMetadataArray = figMDRW_CreateMetadataBBufFromMetadataArray(v74, @"com.apple.quicktime.mdta", 0, (CFTypeRef *)&v105);
                      if (MetadataBBufFromMetadataArray) {
                        goto LABEL_223;
                      }
                    }
                    CFMutableArrayRef Mutable = v107;
                    if (!v107)
                    {
                      uint64_t MetadataBBufFromMetadataArray = figMDRW_CopyMetadataArrayFromByteStream((uint64_t *)&cf, v71, &v107);
                      if (MetadataBBufFromMetadataArray) {
                        goto LABEL_223;
                      }
                      CFMutableArrayRef Mutable = v107;
                      if (!v107)
                      {
                        CFMutableArrayRef Mutable = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
                        int v107 = Mutable;
                        if (!Mutable)
                        {
                          uint64_t MetadataBBufFromMetadataArray = FigSignalErrorAt();
                          goto LABEL_223;
                        }
                      }
                    }
                    CFArrayRef v77 = v106;
                    if (!v106)
                    {
                      uint64_t MetadataBBufFromMetadataArray = figMDRW_CopyMetadataArrayFromByteStream((uint64_t *)&cf, @"com.apple.itunes", &v106);
                      if (MetadataBBufFromMetadataArray) {
                        goto LABEL_223;
                      }
                      CFArrayRef v77 = v106;
                    }
                    figMDRW_CreateUserDataBBufWithiTunes(Mutable, 0, v77, v71, (CFTypeRef *)&v104);
                    if (!v105
                      || (uint64_t MetadataBBufFromMetadataArray = CMBlockBufferAppendBufferReference(v73, (CMBlockBufferRef)v105, 0, 0, 0), !MetadataBBufFromMetadataArray))
                    {
                      long long v78 = v104;
                      if (v104)
                      {
                        uint64_t v79 = CMBlockBufferAppendBufferReference(v73, v104, 0, 0, 0);
                        if (v79)
                        {
                          uint64_t v11 = v79;
                          uint64_t v41 = 0;
LABEL_162:
                          CFRelease(v78);
LABEL_163:
                          if (v105) {
                            CFRelease(v105);
                          }
                          if (v73) {
                            CFRelease(v73);
                          }
                          if (v106) {
                            CFRelease(v106);
                          }
                          if (v107) {
                            CFRelease(v107);
                          }
                          if (v108) {
                            CFRelease(v108);
                          }
                          if (v11)
                          {
LABEL_182:
                            if (!v41) {
                              goto LABEL_184;
                            }
                            goto LABEL_183;
                          }
                          if (v41)
                          {
                            uint64_t v80 = figMDRW_RewriteMovieHeader((uint64_t)cf, v87, *((uint64_t *)&v89 + 1));
                            if (v80)
                            {
                              uint64_t v11 = v80;
                              goto LABEL_183;
                            }
                          }
LABEL_178:
                          char v40 = v86;
                          if (v97) {
                            char v40 = 0;
                          }
                          if (a4) {
                            goto LABEL_181;
                          }
                          uint64_t v11 = 0;
                          if (!v41)
                          {
LABEL_184:
                            if (v100) {
                              CFRelease(v100);
                            }
                            if (v99) {
                              CFRelease(v99);
                            }
                            if (v98) {
                              CFRelease(v98);
                            }
                            if (v101) {
                              CFRelease(v101);
                            }
                            if (v102) {
                              CFRelease(v102);
                            }
                            if (v20) {
                              CFRelease(v20);
                            }
                            if (v8) {
                              goto LABEL_197;
                            }
                            goto LABEL_198;
                          }
LABEL_183:
                          CFRelease(v41);
                          goto LABEL_184;
                        }
                      }
                      unsigned int sourceBytes = bswap32(CMBlockBufferGetDataLength(v73));
                      uint64_t v11 = CMBlockBufferReplaceDataBytes(&sourceBytes, v73, 0, 4uLL);
                      if (!v11)
                      {
                        uint64_t v41 = v73;
                        int v73 = 0;
                        goto LABEL_161;
                      }
LABEL_224:
                      uint64_t v41 = 0;
LABEL_161:
                      long long v78 = v104;
                      if (!v104) {
                        goto LABEL_163;
                      }
                      goto LABEL_162;
                    }
LABEL_223:
                    uint64_t v11 = MetadataBBufFromMetadataArray;
                    goto LABEL_224;
                  }
LABEL_177:
                  uint64_t v41 = 0;
                  goto LABEL_178;
                }
                uint64_t appended = FigSignalErrorAt();
LABEL_226:
                uint64_t v11 = appended;
                goto LABEL_227;
              }
              goto LABEL_228;
            }
            uint64_t v64 = v57;
            uint64_t v65 = v87;
            CFTypeRef v66 = cf;
            uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v67) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = 0;
            }
            uint64_t v69 = *(uint64_t (**)(CFTypeRef, uint64_t))(v68 + 32);
            if (v69)
            {
              uint64_t v43 = v69(v66, v44 - (v51 + v64 + v58) + v65);
              if (!v43) {
                goto LABEL_128;
              }
LABEL_228:
              uint64_t v11 = v43;
              int v73 = 0;
              goto LABEL_133;
            }
LABEL_132:
            int v73 = 0;
            uint64_t v11 = 4294954514;
LABEL_133:
            char v71 = v85;
            goto LABEL_134;
          }
          uint64_t v84 = 0;
          uint64_t v49 = &v114;
          uint64_t v46 = v88;
        }
        *uint64_t v49 = v45;
        uint64_t v50 = v114;
        goto LABEL_104;
      }
      CFTypeRef v27 = 0;
LABEL_56:
      BOOL v28 = 1;
      goto LABEL_57;
    }
    if (v22)
    {
      uint64_t UserDataBBufWithiTunes = figMDRW_CreateMetadataBBufFromMetadataArray(v22, @"com.apple.itunes", *((uint64_t *)&v91 + 1), (CFTypeRef *)&v99);
      if (UserDataBBufWithiTunes) {
        goto LABEL_218;
      }
      CFTypeRef v27 = v99;
      if (v99)
      {
        size_t v29 = CMBlockBufferGetDataLength((CMBlockBufferRef)v99);
        if (v29 != *((void *)&v91 + 1))
        {
          CFRelease(v27);
          int v99 = 0;
          uint64_t UserDataBBufWithiTunes = figMDRW_CopyMetadataArrayFromByteStream((uint64_t *)&cf, v13, &v102);
          if (UserDataBBufWithiTunes) {
            goto LABEL_218;
          }
          CFArrayRef v18 = v102;
          if (!v102)
          {
            CFArrayRef v18 = CFArrayCreateMutable(v9, 0, MEMORY[0x1E4F1D510]);
            int v102 = v18;
            if (!v18)
            {
              uint64_t UserDataBBufWithiTunes = FigSignalErrorAt();
              goto LABEL_218;
            }
          }
          goto LABEL_41;
        }
      }
    }
    else
    {
      CFTypeRef v27 = 0;
    }
    unsigned int v25 = 0;
    CFArrayRef v18 = 0;
    goto LABEL_56;
  }
  if (v93[1])
  {
    uint64_t v10 = figMDRW_RewriteMovieHeader((uint64_t)cf, v87, *((uint64_t *)&v89 + 1));
    if (!v10)
    {
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      uint64_t v10 = FigRewriteMetadata(a1, a2, a3, a4);
    }
    goto LABEL_12;
  }
  uint64_t v11 = 4294954709;
  if (v8) {
    goto LABEL_197;
  }
LABEL_198:
  if (v93[1]) {
    CFRelease(v93[1]);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v96) {
    CFRelease(v96);
  }
  return v11;
}

uint64_t GetMovieDataAtom()
{
  return FigAtomStreamGetCurrentAtomGlobalOffset();
}

uint64_t figMDRW_RewriteMovieHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = MEMORY[0x1F4188790](a1, a2, a3);
  uint64_t v5 = v4;
  CFStringRef v7 = v6;
  uint64_t v9 = v8;
  unint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v14 = v3;
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  CMBlockBufferRef theBuffer = 0;
  CMBlockBufferRef blockBufferOut = 0;
  uint64_t valuePtr = 0;
  CFNumberRef number = 0;
  uint64_t i = 0;
  Dataunint64_t Length = CMBlockBufferGetDataLength(v6);
  CFAllocatorRef v16 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  unint64_t v17 = v11 - DataLength;
  if (v11 > DataLength && v17 >= 8)
  {
    uint64_t v42 = 0;
    memset(v41, 0, sizeof(v41));
    uint64_t appended = CMBlockBufferCreateEmpty(v16, 8u, 1u, &blockBufferOut);
    if (appended) {
      goto LABEL_44;
    }
    uint64_t appended = FigAtomWriterInitWithBlockBuffer();
    if (appended) {
      goto LABEL_44;
    }
    uint64_t appended = FigMetadataAppendFreeAtom((uint64_t)v41, v17);
    if (appended) {
      goto LABEL_44;
    }
    uint64_t appended = CMBlockBufferCreateWithBufferReference(v16, v7, 0, DataLength, 0, &theBuffer);
    if (appended) {
      goto LABEL_44;
    }
    uint64_t appended = CMBlockBufferAppendBufferReference(theBuffer, blockBufferOut, 0, 0, 0);
    if (appended) {
      goto LABEL_44;
    }
    Dataunint64_t Length = CMBlockBufferGetDataLength(theBuffer);
  }
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  int v22 = *(uint64_t (**)(uint64_t, void, const __CFAllocator *, CFNumberRef *))(v21 + 48);
  if (!v22) {
    goto LABEL_36;
  }
  uint64_t appended = v22(CMBaseObject, *MEMORY[0x1E4F1EC50], v16, &number);
  if (appended) {
    goto LABEL_44;
  }
  CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
  if (DataLength != v11 && v11 + v13 != valuePtr)
  {
    int v35 = 1701147238;
    uint64_t appended = CMByteStreamAppendBlockBuffer();
    if (appended) {
      goto LABEL_44;
    }
    uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v23) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = 0;
    }
    CFTypeRef v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, uint64_t *))(v24 + 16);
    if (v27)
    {
      uint64_t appended = v27(v14, 4, v13 + 4, &v35, &i);
      if (!appended)
      {
        bzero(v41, 0x1000uLL);
        uint64_t v28 = v9 + v13;
        uint64_t v29 = v13 + 8;
        for (uint64_t i = 0; v29 < v28; v29 += i)
        {
          uint64_t v30 = v28 - v29 >= 4096 ? 4096 : v28 - v29;
          uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v32 = v31 ? v31 : 0;
          CFRange v33 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t *))(v32 + 16);
          if (!v33) {
            goto LABEL_36;
          }
          uint64_t appended = v33(v14, v30, v29, v41, &i);
          if (appended) {
            goto LABEL_44;
          }
        }
        char v25 = 1;
LABEL_21:
        uint64_t v26 = 0;
        char *v5 = v25;
        goto LABEL_37;
      }
      goto LABEL_44;
    }
LABEL_36:
    uint64_t v26 = 4294954514;
    goto LABEL_37;
  }
  uint64_t appended = CMByteStreamWriteBlockBuffer();
  if (!appended)
  {
    char v25 = 0;
    goto LABEL_21;
  }
LABEL_44:
  uint64_t v26 = appended;
LABEL_37:
  if (number) {
    CFRelease(number);
  }
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v26;
}

CFDictionaryRef FigMetadataRewriterDictionaryCreateFromFigMetadataPropertyArray(const __CFArray *a1)
{
  v25[2] = *MEMORY[0x1E4F143B8];
  if (!a1) {
    return 0;
  }
  uint64_t Count = CFArrayGetCount(a1);
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Count >= 1)
  {
    CFIndex v4 = 0;
    CFArrayRef v5 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, v4);
      CFDictionaryRef Value = CFDictionaryGetValue(ValueAtIndex, @"format");
      CFArrayRef v8 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, @"items");
      CFArrayRef v9 = v8;
      if (Value)
      {
        unint64_t v10 = (__CFArray *)CFDictionaryGetValue(Mutable, Value);
        if (v10)
        {
          if (!v9) {
            goto LABEL_11;
          }
LABEL_10:
          v26.length = CFArrayGetCount(v9);
          v26.location = 0;
          CFArrayAppendArray(v10, v9, v26);
          goto LABEL_11;
        }
        unint64_t v10 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
        CFDictionaryAddValue(Mutable, Value, v10);
        CFRelease(v10);
        if (v9) {
          goto LABEL_10;
        }
      }
      else
      {
        CFArrayRef v5 = v8;
      }
LABEL_11:
      if (Count == ++v4)
      {
        if (v5)
        {
          CFIndex v11 = CFArrayGetCount(v5);
          if (v11 >= 1)
          {
            CFIndex v12 = v11;
            for (CFIndex i = 0; i != v12; ++i)
            {
              CFDictionaryRef v14 = (const __CFDictionary *)CFArrayGetValueAtIndex(v5, i);
              if (v14)
              {
                CFDictionaryRef v15 = v14;
                CFAllocatorRef v16 = CFDictionaryGetValue(v14, @"key");
                if (v16)
                {
                  unint64_t v17 = v16;
                  uint64_t v18 = 0;
                  v25[0] = @"com.apple.quicktime.mdta";
                  v25[1] = @"com.apple.quicktime.udta";
                  char v19 = 1;
                  while (1)
                  {
                    char v20 = v19;
                    uint64_t v21 = (const void *)v25[v18];
                    if (FigIsCommonKeyMappedToMetadataFormat(v17, (uint64_t)v21)) {
                      break;
                    }
                    char v19 = 0;
                    uint64_t v18 = 1;
                    if ((v20 & 1) == 0) {
                      goto LABEL_24;
                    }
                  }
                  int v22 = (void *)CFDictionaryGetValue(Mutable, v21);
                  if (!v22)
                  {
                    int v22 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
                    CFDictionaryAddValue(Mutable, v21, v22);
                    CFRelease(v22);
                  }
                  CFArrayAppendValue((CFMutableArrayRef)v22, v15);
                }
              }
LABEL_24:
              ;
            }
          }
        }
        return Mutable;
      }
    }
  }
  return Mutable;
}

uint64_t GetMovieMetaDataAtom()
{
  return FigAtomStreamGetCurrentAtomGlobalOffset();
}

uint64_t GetCompressedMovieAtom(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 96))
  {
    return FigSignalErrorAt();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
    *(unsigned char *)(a2 + 96) = 1;
    uint64_t result = FigAtomStreamInitWithParent();
    if (!result) {
      return figMDRW_ParseChildAtoms((uint64_t)v4, 2, (uint64_t)&GetCompressedMovieAtom_atomDispatch, a2);
    }
  }
  return result;
}

uint64_t GetDataCompressionAtom(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigAtomStreamReadCurrentAtomData();
  *(_DWORD *)(a2 + 100) = bswap32(0);
  return result;
}

uint64_t GetCompressedMovieDataAtom(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef blockBufferOut = 0;
  CMBlockBufferRef theBuffer = 0;
  dataPointerOut = 0;
  size_t totalLengthOut = 0;
  CFIndex v11 = 0;
  if (*(_DWORD *)(a2 + 100) != 2053925218)
  {
    uint64_t BBuf = FigSignalErrorAt();
LABEL_28:
    uint64_t v8 = BBuf;
    goto LABEL_22;
  }
  uint64_t BBuf = FigAtomStreamReadCurrentAtomDataAndCreateBBuf();
  if (BBuf) {
    goto LABEL_28;
  }
  CMBlockBufferGetDataPointer(theBuffer, 0, 0, &totalLengthOut, &dataPointerOut);
  signed int v4 = bswap32(*(_DWORD *)dataPointerOut);
  uint64_t BBuf = CMBlockBufferCreateWithMemoryBlock((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v4, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v4, 1u, &blockBufferOut);
  if (BBuf) {
    goto LABEL_28;
  }
  CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, 0, &v11);
  CFArrayRef v5 = dataPointerOut;
  int v6 = totalLengthOut - 4;
  CFStringRef v7 = v11;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  if ((totalLengthOut - 4) >> 32 || v4 < 0) {
    goto LABEL_12;
  }
  MEMORY[0x19970EE10](&gFigInitInflatorLibOnce, InitInflatorLibrary);
  if (!s_inflateInit_ || !s_inflate || !s_inflateEnd)
  {
    uint64_t v8 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  if (s_inflateInit_(&v16, "1.2.12", 112))
  {
LABEL_12:
    uint64_t v8 = FigSignalErrorAt();
    if (v8) {
      goto LABEL_22;
    }
  }
  else
  {
    *(void *)&long long v16 = v5 + 4;
    DWORD2(v16) = v6;
    *(void *)&long long v17 = 0;
    *((void *)&v17 + 1) = v7;
    LODWORD(v18) = v4;
    *((void *)&v18 + 1) = 0;
    if (s_inflate(&v16, 4) == 1) {
      uint64_t v8 = 0;
    }
    else {
      uint64_t v8 = FigSignalErrorAt();
    }
    s_inflateEnd(&v16);
    if (v8) {
      goto LABEL_22;
    }
  }
  uint64_t v8 = *(void *)(a2 + 104);
  CMBlockBufferRef v9 = blockBufferOut;
  *(void *)(a2 + 104) = blockBufferOut;
  if (v9) {
    CFRetain(v9);
  }
  if (v8)
  {
    CFRelease((CFTypeRef)v8);
    uint64_t v8 = 0;
  }
LABEL_22:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return v8;
}

void *InitInflatorLibrary()
{
  uint64_t result = dlopen("/usr/lib/libz.dylib", 6);
  if (result)
  {
    uint64_t v1 = result;
    s_inflateInit_ = dlsym(result, "inflateInit_");
    s_inflate = dlsym(v1, "inflate");
    uint64_t result = dlsym(v1, "inflateEnd");
    s_inflateEnd = result;
  }
  return result;
}

uint64_t figMDRW_WriteMetadata(uint64_t a1, const __CFDictionary *a2)
{
  CMBlockBufferRef theBuffer = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  if (v4)
  {
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    CFStringRef v7 = *(uint64_t (**)(uint64_t, void, void))(v6 + 40);
    if (v7 && (uint64_t v8 = v7(v4, 0, 0), v8 >= 1))
    {
      uint64_t v9 = v8;
      CFDictionaryRef Mutable = 0;
      uint64_t v11 = 0;
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      while (1)
      {
        CFDictionaryRef theDict = 0;
        CFTypeRef value = 0;
        CFTypeRef cf = 0;
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        CFDictionaryRef v15 = *(uint64_t (**)(uint64_t, void, void, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *))(v14 + 48);
        if (!v15)
        {
          uint64_t v40 = 4294954514;
          goto LABEL_54;
        }
        uint64_t v16 = v15(v4, 0, 0, v11, v12, &value, &theDict);
        if (v16) {
          goto LABEL_64;
        }
        if (!Mutable)
        {
          CFDictionaryRef Mutable = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
          if (!Mutable) {
            break;
          }
        }
        if (theDict)
        {
          MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(v12, 0, theDict);
          if (!MutableCopy) {
            break;
          }
          long long v18 = MutableCopy;
          long long v19 = CFDictionaryGetValue(MutableCopy, @"key");
          if (v19)
          {
            long long v20 = v19;
            CFDictionaryAddValue(v18, @"value", value);
            if (CFDictionaryGetValueIfPresent(Mutable, v20, &cf))
            {
              CFTypeID v21 = CFGetTypeID(cf);
              if (v21 == CFArrayGetTypeID())
              {
                CFArrayAppendValue((CFMutableArrayRef)cf, v18);
              }
              else
              {
                long long v22 = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
                if (!v22) {
                  break;
                }
                uint64_t v23 = v22;
                CFArrayAppendValue(v22, cf);
                CFArrayAppendValue(v23, v18);
                CFDictionarySetValue(Mutable, v20, v23);
                CFRelease(v23);
              }
            }
            else
            {
              CFDictionaryAddValue(Mutable, v20, v18);
            }
          }
        }
        else
        {
          long long v18 = 0;
        }
        if (value) {
          CFRelease(value);
        }
        if (theDict) {
          CFRelease(theDict);
        }
        if (v18) {
          CFRelease(v18);
        }
        if (v9 == ++v11) {
          goto LABEL_34;
        }
      }
      uint64_t v16 = FigSignalErrorAt();
      if (v16) {
        goto LABEL_64;
      }
    }
    else
    {
      CFDictionaryRef Mutable = 0;
LABEL_34:
      *(void *)(a1 + 8) = Mutable;
    }
  }
  if (!*(void *)(a1 + 8))
  {
    CFMutableDictionaryRef v24 = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(a1 + 8) = v24;
    if (!v24) {
      goto LABEL_63;
    }
  }
  int v25 = CFEqual(*(CFTypeRef *)(a1 + 32), @"udta");
  CFRange v26 = (void (__cdecl *)(const void *, const void *, void *))figMDRW_MergeQuickTimeUserDataApplierFunc;
  if (!v25)
  {
    int v27 = CFEqual(*(CFTypeRef *)(a1 + 32), @"mdta");
    CFRange v26 = (void (__cdecl *)(const void *, const void *, void *))figMDRW_MergeQuickTimeMetadataApplierFunc;
    if (!v27)
    {
      int v28 = CFEqual(*(CFTypeRef *)(a1 + 32), @"uiso");
      CFRange v26 = (void (__cdecl *)(const void *, const void *, void *))figMDRW_MergeISOUserDataApplierFunc;
      if (!v28)
      {
LABEL_63:
        uint64_t v16 = FigSignalErrorAt();
LABEL_64:
        uint64_t v40 = v16;
        goto LABEL_54;
      }
    }
  }
  CFDictionaryApplyFunction(a2, v26, (void *)a1);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 8), (CFDictionaryApplierFunction)figMDRW_WriteMetadataApplierFunc, (void *)a1);
  uint64_t FigMetadataWriter = FigMetadataSerializerGetFigMetadataWriter(*(void *)(a1 + 24));
  CFNumberRef v30 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, (const void *)(a1 + 48));
  uint64_t FigBaseObject = FigMetadataWriterGetFigBaseObject(FigMetadataWriter);
  uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v32) {
    uint64_t v33 = v32;
  }
  else {
    uint64_t v33 = 0;
  }
  CFRange v34 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v33 + 56);
  if (!v34) {
    goto LABEL_52;
  }
  uint64_t v35 = v34(FigBaseObject, @"minimumSize", v30);
  if (v35) {
    goto LABEL_61;
  }
  uint64_t v36 = *(void *)(a1 + 24);
  uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 24);
  uint64_t v38 = v37 ? v37 : 0;
  uint64_t v39 = *(uint64_t (**)(uint64_t, CMBlockBufferRef *))(v38 + 8);
  if (!v39)
  {
LABEL_52:
    uint64_t v40 = 4294954514;
    if (!v30) {
      goto LABEL_54;
    }
    goto LABEL_53;
  }
  uint64_t v35 = v39(v36, &theBuffer);
  if (!v35)
  {
    if (CMBlockBufferGetDataLength(theBuffer) == *(void *)(a1 + 48)) {
      uint64_t v35 = CMByteStreamWriteBlockBuffer();
    }
    else {
      uint64_t v35 = FigSignalErrorAt();
    }
  }
LABEL_61:
  uint64_t v40 = v35;
  if (v30) {
LABEL_53:
  }
    CFRelease(v30);
LABEL_54:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  uint64_t v41 = *(const void **)(a1 + 8);
  if (v41) {
    CFRelease(v41);
  }
  return v40;
}

void figMDRW_MergeQuickTimeUserDataApplierFunc(void *a1, void *a2, uint64_t a3)
{
  CFArrayRef theArray = 0;
  if (!FigUserDataCopyOSTypeKeysFromCommonKey(a1, &theArray)) {
    figMDRW_MergeUserData(a2, a3, theArray);
  }
}

void figMDRW_MergeQuickTimeMetadataApplierFunc(const void *a1, CFMutableDictionaryRef MutableCopy, uint64_t a3)
{
  CFTypeRef value = 0;
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  if (!FigQuickTimeMetadataCopyNativeKeysFromCommonKey(a1, &theArray))
  {
    if (!theArray) {
      return;
    }
    if (CFArrayGetCount(theArray))
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
      if (CFEqual(MutableCopy, (CFTypeRef)*MEMORY[0x1E4F1D260]))
      {
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a3 + 8), ValueAtIndex);
        goto LABEL_34;
      }
      CFTypeID v6 = CFGetTypeID(MutableCopy);
      if (v6 != CFDictionaryGetTypeID())
      {
        CFTypeID v11 = CFGetTypeID(MutableCopy);
        CFTypeID TypeID = CFStringGetTypeID();
        ItemFromCFDictionaryRef Value = figMDRW_CreateItemFromValue(MutableCopy, v11 == TypeID);
        MutableCFArrayRef Copy = ItemFromValue;
        if (v11 == TypeID)
        {
          char v10 = 0;
          CFTypeRef value = (void *)CFDictionaryGetValue(ItemFromValue, @"locale");
        }
        else
        {
          char v10 = 1;
        }
        goto LABEL_18;
      }
      CFStringRef v7 = CFDictionaryGetValue(MutableCopy, @"value");
      if (v7)
      {
        CFTypeID v8 = CFGetTypeID(v7);
        if (v8 != CFStringGetTypeID())
        {
          CFMutableDictionaryRef v9 = 0;
          char v10 = 1;
          goto LABEL_19;
        }
        CFTypeRef value = (void *)CFDictionaryGetValue(MutableCopy, @"locale");
        if (value)
        {
          CFMutableDictionaryRef v9 = 0;
          char v10 = 0;
          if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a3 + 8), ValueAtIndex, &cf)) {
            goto LABEL_29;
          }
LABEL_19:
          CFTypeID v14 = CFGetTypeID(cf);
          CFTypeID v15 = CFArrayGetTypeID();
          uint64_t v16 = (__CFArray *)cf;
          if (v14 == v15)
          {
            if ((v10 & 1) != 0 || (CFIndex Count = CFArrayGetCount((CFArrayRef)cf), Count < 1))
            {
LABEL_26:
              CFArrayAppendValue(v16, MutableCopy);
            }
            else
            {
              CFIndex v18 = Count;
              CFIndex v19 = 0;
              while (1)
              {
                CFDictionaryRef v20 = (const __CFDictionary *)CFArrayGetValueAtIndex(v16, v19);
                CFLocaleRef v21 = (const __CFLocale *)CFDictionaryGetValue(v20, @"locale");
                if (figMDRW_LocaleIsEqual(v21, (const __CFLocale *)value, 0)) {
                  break;
                }
                if (v18 == ++v19) {
                  goto LABEL_26;
                }
              }
              CFArraySetValueAtIndex(v16, v19, MutableCopy);
            }
            goto LABEL_32;
          }
          CFLocaleRef v22 = (const __CFLocale *)CFDictionaryGetValue((CFDictionaryRef)cf, @"locale");
          if ((v10 & 1) != 0 || !figMDRW_LocaleIsEqual(v22, (const __CFLocale *)value, 0))
          {
            CFDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
            if (Mutable)
            {
              CFMutableDictionaryRef v24 = Mutable;
              CFArrayAppendValue(Mutable, v16);
              CFArrayAppendValue(v24, MutableCopy);
              CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 8), ValueAtIndex, v24);
              CFRelease(v24);
            }
            else
            {
              FigSignalErrorAt();
            }
          }
          else
          {
LABEL_29:
            CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 8), ValueAtIndex, MutableCopy);
          }
LABEL_32:
          if (v9) {
            CFRelease(v9);
          }
          goto LABEL_34;
        }
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MutableCopy);
        FigMetadataCopyCurrentLocaleAndLangCode((CFTypeRef *)&value, 0);
        if (value)
        {
          CFDictionaryAddValue(MutableCopy, @"locale", value);
          CFRelease(value);
        }
        char v10 = 0;
LABEL_18:
        CFMutableDictionaryRef v9 = MutableCopy;
        goto LABEL_19;
      }
      FigSignalErrorAt();
    }
  }
LABEL_34:
  if (theArray) {
    CFRelease(theArray);
  }
}

void figMDRW_MergeISOUserDataApplierFunc(void *a1, void *a2, uint64_t a3)
{
  CFArrayRef theArray = 0;
  if (!FigISOUserDataCopyOSTypeKeysFromCommonKey(a1, &theArray)) {
    figMDRW_MergeUserData(a2, a3, theArray);
  }
}

uint64_t figMDRW_WriteMetadataApplierFunc(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t FigMetadataWriter = FigMetadataSerializerGetFigMetadataWriter(*(void *)(a3 + 24));
  CFTypeID v7 = CFGetTypeID(a2);
  if (v7 == CFArrayGetTypeID())
  {
    uint64_t result = CFArrayGetCount((CFArrayRef)a2);
    if (result >= 1)
    {
      uint64_t v9 = result;
      for (CFIndex i = 0; i != v9; ++i)
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a2, i);
        uint64_t result = (uint64_t)CFDictionaryGetValue(ValueAtIndex, @"value");
        if (result)
        {
          uint64_t v12 = result;
          uint64_t v13 = *(void *)(a3 + 32);
          uint64_t VTable = CMBaseObjectGetVTable();
          uint64_t v16 = *(void *)(VTable + 16);
          uint64_t result = VTable + 16;
          uint64_t v15 = v16;
          if (v16) {
            uint64_t v17 = v15;
          }
          else {
            uint64_t v17 = 0;
          }
          CFIndex v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const __CFDictionary *))(v17 + 8);
          if (v18) {
            uint64_t result = v18(FigMetadataWriter, v13, a1, v12, ValueAtIndex);
          }
        }
      }
    }
  }
  else
  {
    uint64_t result = (uint64_t)CFDictionaryGetValue((CFDictionaryRef)a2, @"value");
    if (result)
    {
      uint64_t v19 = result;
      uint64_t v20 = *(void *)(a3 + 32);
      uint64_t v21 = CMBaseObjectGetVTable();
      uint64_t v23 = *(void *)(v21 + 16);
      uint64_t result = v21 + 16;
      uint64_t v22 = v23;
      uint64_t v24 = v23 ? v22 : 0;
      int v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, const void *))(v24 + 8);
      if (v25)
      {
        return v25(FigMetadataWriter, v20, a1, v19, a2);
      }
    }
  }
  return result;
}

void figMDRW_MergeUserData(void *a1, uint64_t a2, CFArrayRef theArray)
{
  CFTypeRef value = 0;
  CFNumberRef number = 0;
  CFTypeRef cf = 0;
  unsigned int valuePtr = 0;
  if (!theArray) {
    return;
  }
  CFArrayRef v3 = theArray;
  if (CFArrayGetCount(theArray) < 1) {
    goto LABEL_58;
  }
  CFIndex v6 = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFTypeID v8 = (const void *)*MEMORY[0x1E4F1D260];
  uint64_t v32 = a2;
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFRange v34 = (const void *)*MEMORY[0x1E4F1D260];
  while (1)
  {
    unsigned int valuePtr = CFArrayGetValueAtIndex(v3, v6);
    CFNumberRef v9 = CFNumberCreate(v7, kCFNumberSInt32Type, &valuePtr);
    if (!v9)
    {
      FigSignalErrorAt();
      goto LABEL_58;
    }
    CFNumberRef v10 = v9;
    int v11 = HIBYTE(valuePtr) << 24;
    if (!CFEqual(a1, v8)) {
      break;
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a2 + 8), v10);
LABEL_33:
    CFRelease(v10);
    if (++v6 >= CFArrayGetCount(v3)) {
      goto LABEL_58;
    }
  }
  CFTypeID v12 = CFGetTypeID(a1);
  if (v12 != CFDictionaryGetTypeID())
  {
    ItemFromCFDictionaryRef Value = figMDRW_CreateItemFromValue(a1, v11 == -1459617792);
    MutableCFArrayRef Copy = ItemFromValue;
    if (v11 == -1459617792) {
      CFTypeRef cf = CFDictionaryGetValue(ItemFromValue, @"locale");
    }
    CFTypeID v14 = MutableCopy;
    goto LABEL_16;
  }
  if (v11 != -1459617792)
  {
    CFTypeID v14 = 0;
    MutableCFArrayRef Copy = (__CFDictionary *)a1;
LABEL_16:
    CFTypeID v8 = v34;
    goto LABEL_17;
  }
  CFTypeRef cf = CFDictionaryGetValue((CFDictionaryRef)a1, @"locale");
  CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)a1, @"languageCode");
  CFNumberRef number = v13;
  CFTypeID v8 = v34;
  if (cf && v13)
  {
    CFTypeID v14 = 0;
    MutableCFArrayRef Copy = (__CFDictionary *)a1;
    goto LABEL_17;
  }
  MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(v7, 0, (CFDictionaryRef)a1);
  uint64_t v28 = a2;
  if ((unint64_t)cf | (unint64_t)number)
  {
    if (cf)
    {
      CFNumberRef v29 = FigMetadataCopyLangCodeFromLocale((const __CFLocale *)cf);
      CFNumberRef v30 = 0;
      CFNumberRef number = v29;
    }
    else
    {
      if (number && (__int16 v35 = 0, CFNumberGetValue(number, kCFNumberSInt16Type, &v35)))
      {
        CFNumberRef v30 = (const void *)FigCFLocaleCreateWithMovieLangCode();
        CFTypeRef cf = v30;
      }
      else
      {
        CFNumberRef v30 = 0;
      }
      CFNumberRef v29 = 0;
    }
    CFTypeRef v31 = cf;
    if (!cf) {
      goto LABEL_47;
    }
  }
  else
  {
    FigMetadataCopyCurrentLocaleAndLangCode(&cf, &number);
    CFTypeRef v31 = cf;
    CFNumberRef v29 = number;
    CFNumberRef v30 = cf;
    if (!cf) {
      goto LABEL_47;
    }
  }
  CFDictionaryAddValue(MutableCopy, @"locale", v31);
LABEL_47:
  if (number) {
    CFDictionaryAddValue(MutableCopy, @"languageCode", number);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v29) {
    CFRelease(v29);
  }
  CFTypeID v14 = MutableCopy;
  a2 = v28;
LABEL_17:
  if (!CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)(a2 + 8), v10, (const void **)&value))
  {
LABEL_28:
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 8), v10, MutableCopy);
LABEL_31:
    CFAllocatorRef v7 = allocator;
    if (v14) {
      CFRelease(v14);
    }
    goto LABEL_33;
  }
  CFTypeID v17 = CFGetTypeID(value);
  CFTypeID TypeID = CFArrayGetTypeID();
  uint64_t v19 = value;
  if (v17 != TypeID)
  {
    CFLocaleRef v25 = (const __CFLocale *)CFDictionaryGetValue((CFDictionaryRef)value, @"locale");
    if (v11 != -1459617792 || !figMDRW_LocaleIsEqual(v25, (const __CFLocale *)cf, 1))
    {
      CFDictionaryRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
      if (!Mutable)
      {
        FigSignalErrorAt();
        goto LABEL_55;
      }
      int v27 = Mutable;
      CFArrayAppendValue(Mutable, v19);
      CFArrayAppendValue(v27, MutableCopy);
      a2 = v32;
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v32 + 8), v10, v27);
      CFRelease(v27);
      goto LABEL_31;
    }
    a2 = v32;
    goto LABEL_28;
  }
  if (v11 != -1459617792 || (CFIndex Count = CFArrayGetCount((CFArrayRef)value), Count < 1))
  {
LABEL_24:
    CFArrayAppendValue((CFMutableArrayRef)v19, MutableCopy);
    a2 = v32;
    CFTypeID v8 = v34;
    goto LABEL_31;
  }
  CFIndex v21 = Count;
  CFIndex v22 = 0;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v19, v22);
    CFLocaleRef v24 = (const __CFLocale *)CFDictionaryGetValue(ValueAtIndex, @"locale");
    if (figMDRW_LocaleIsEqual(v24, (const __CFLocale *)cf, 1)) {
      break;
    }
    if (v21 == ++v22) {
      goto LABEL_24;
    }
  }
  CFArraySetValueAtIndex((CFMutableArrayRef)v19, v22, MutableCopy);
LABEL_55:
  CFRelease(v3);
  if (v14) {
    CFRelease(v14);
  }
  CFArrayRef v3 = v10;
LABEL_58:
  CFRelease(v3);
}

__CFDictionary *figMDRW_CreateItemFromValue(const void *a1, int a2)
{
  CFTypeRef cf = 0;
  CFTypeRef value = 0;
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v5 = Mutable;
  if (Mutable)
  {
    CFDictionaryAddValue(Mutable, @"value", a1);
    if (a2)
    {
      FigMetadataCopyCurrentLocaleAndLangCode((CFTypeRef *)&value, (CFNumberRef *)&cf);
      if (value) {
        CFDictionaryAddValue(v5, @"locale", value);
      }
      if (cf) {
        CFDictionaryAddValue(v5, @"languageCode", cf);
      }
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

BOOL figMDRW_LocaleIsEqual(const __CFLocale *a1, const __CFLocale *a2, int a3)
{
  if (!a1 || !a2) {
    return ((unint64_t)a1 | (unint64_t)a2) == 0;
  }
  if (a3)
  {
    CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F1D218];
    CFTypeRef Value = CFLocaleGetValue(a1, (CFLocaleKey)*MEMORY[0x1E4F1D218]);
    CFTypeRef v6 = CFLocaleGetValue(a2, v4);
  }
  else
  {
    CFTypeRef Value = (CFTypeRef)MEMORY[0x199707EB0]();
    CFTypeRef v6 = (CFTypeRef)MEMORY[0x199707EB0](a2);
  }
  return CFEqual(Value, v6) != 0;
}

uint64_t figMDRW_CopyMetadataArrayFromByteStream(uint64_t *a1, void *key, __CFArray **a3)
{
  CFDictionaryRef theDict = 0;
  CFTypeRef value = 0;
  CFDictionaryRef v6 = (const __CFDictionary *)a1[1];
  if (!v6)
  {
    uint64_t v7 = *a1;
    CFArrayRef theArray = 0;
    CFTypeRef cf = 0;
    keya = 0;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      uint64_t v10 = FigFormatReaderCreateForStream(v7, v8, 0, &cf);
      if (!v10)
      {
        uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(cf);
        uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v12) {
          uint64_t v13 = v12;
        }
        else {
          uint64_t v13 = 0;
        }
        CFTypeID v14 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFArrayRef *))(v13 + 48);
        if (!v14)
        {
          uint64_t v24 = 4294954514;
LABEL_22:
          if (theArray) {
            CFRelease(theArray);
          }
          if (cf) {
            CFRelease(cf);
          }
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (v24) {
            goto LABEL_54;
          }
          CFDictionaryRef v6 = (const __CFDictionary *)a1[1];
          goto LABEL_30;
        }
        uint64_t v10 = v14(FigBaseObject, @"MetadataReaders", v8, &theArray);
        if (!v10)
        {
          if (theArray && (CFIndex Count = CFArrayGetCount(theArray), Count >= 1))
          {
            CFIndex v16 = Count;
            CFIndex v17 = 0;
            while (1)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v17);
              uint64_t v19 = FigMetadataReaderGetFigBaseObject(ValueAtIndex);
              uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v20) {
                uint64_t v21 = v20;
              }
              else {
                uint64_t v21 = 0;
              }
              CFIndex v22 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v21 + 48);
              if (!v22)
              {
                uint64_t v24 = 4294954514;
                goto LABEL_63;
              }
              uint64_t v23 = v22(v19, @"format", v8, &keya);
              if (v23) {
                break;
              }
              CFDictionaryAddValue(Mutable, keya, ValueAtIndex);
              if (keya)
              {
                CFRelease(keya);
                keya = 0;
              }
              if (v16 == ++v17) {
                goto LABEL_20;
              }
            }
            uint64_t v24 = v23;
LABEL_63:
            if (keya) {
              CFRelease(keya);
            }
          }
          else
          {
LABEL_20:
            uint64_t v24 = 0;
            a1[1] = (uint64_t)Mutable;
            CFMutableDictionaryRef Mutable = 0;
          }
          goto LABEL_22;
        }
      }
    }
    else
    {
      uint64_t v10 = FigSignalErrorAt();
    }
    uint64_t v24 = v10;
    goto LABEL_22;
  }
LABEL_30:
  CFLocaleRef v25 = CFDictionaryGetValue(v6, key);
  if (!v25
    || ((v26 = v25, (v27 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (uint64_t v28 = 0) : (uint64_t v28 = v27),
        (CFNumberRef v29 = *(uint64_t (**)(const void *, void, void))(v28 + 40)) == 0
     || (uint64_t v30 = v29(v26, 0, 0), v30 < 1)))
  {
    uint64_t v33 = 0;
LABEL_53:
    uint64_t v24 = 0;
    *a3 = v33;
    goto LABEL_54;
  }
  uint64_t v31 = v30;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  CFAllocatorRef v34 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  __int16 v35 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  while (1)
  {
    uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v36) {
      uint64_t v37 = v36;
    }
    else {
      uint64_t v37 = 0;
    }
    uint64_t v38 = *(uint64_t (**)(const void *, void, void, uint64_t, const __CFAllocator *, void **, CFDictionaryRef *))(v37 + 48);
    if (!v38)
    {
      uint64_t v24 = 4294954514;
      if (!v33) {
        goto LABEL_54;
      }
LABEL_60:
      uint64_t v43 = v33;
LABEL_61:
      CFRelease(v43);
      goto LABEL_54;
    }
    uint64_t v39 = v38(v26, 0, 0, v32, v34, &value, &theDict);
    if (v39) {
      goto LABEL_66;
    }
    if (!theDict) {
      break;
    }
    MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy(v34, 0, theDict);
    if (!MutableCopy) {
      break;
    }
    uint64_t v41 = MutableCopy;
    CFDictionaryAddValue(MutableCopy, @"value", value);
    if (!v33)
    {
      uint64_t v33 = CFArrayCreateMutable(v34, 0, v35);
      if (!v33)
      {
        uint64_t v24 = FigSignalErrorAt();
        uint64_t v43 = v41;
        goto LABEL_61;
      }
    }
    CFArrayAppendValue(v33, v41);
    if (value)
    {
      CFRelease(value);
      CFTypeRef value = 0;
    }
    if (theDict)
    {
      CFRelease(theDict);
      CFDictionaryRef theDict = 0;
    }
    CFRelease(v41);
    if (v31 == ++v32) {
      goto LABEL_53;
    }
  }
  uint64_t v39 = FigSignalErrorAt();
LABEL_66:
  uint64_t v24 = v39;
  if (v33) {
    goto LABEL_60;
  }
LABEL_54:
  if (theDict) {
    CFRelease(theDict);
  }
  if (value) {
    CFRelease(value);
  }
  return v24;
}

uint64_t figMDRW_CreateUserDataBBufWithiTunes(CFArrayRef theArray, uint64_t a2, const __CFArray *a3, const void *a4, CFTypeRef *a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  CFTypeRef v27 = 0;
  CMBlockBufferRef theBuffer = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCFArrayRef Copy = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theArray);
  if (!MutableCopy)
  {
    uint64_t MetadataBBufFromMetadataArray = FigSignalErrorAt();
    goto LABEL_45;
  }
  if (!a3) {
    goto LABEL_33;
  }
  uint64_t MetadataBBufFromMetadataArray = figMDRW_CreateMetadataBBufFromMetadataArray(a3, @"com.apple.itunes", 0, (CFTypeRef *)&theBuffer);
  if (MetadataBBufFromMetadataArray)
  {
LABEL_45:
    uint64_t v16 = MetadataBBufFromMetadataArray;
    goto LABEL_37;
  }
  a3 = theBuffer;
  if (!theBuffer) {
    goto LABEL_33;
  }
  uint64_t v25 = a2;
  CFRange v26 = a5;
  CFTypeRef cf = 0;
  CMBlockBufferRef blockBufferOut = 0;
  values = 0;
  __int16 v35 = 0;
  CFTypeRef v36 = 0;
  keys = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  Dataunint64_t Length = CMBlockBufferGetDataLength(theBuffer);
  if (!CMBlockBufferIsRangeContiguous(a3, 0, DataLength))
  {
    CFDataWithBlockBufferNoCFArrayRef Copy = CMBlockBufferCreateContiguous(v9, a3, v9, 0, 0, DataLength, 0, &blockBufferOut);
    if (CFDataWithBlockBufferNoCopy) {
      goto LABEL_43;
    }
  }
  CFDataWithBlockBufferNoCFArrayRef Copy = FigCreateCFDataWithBlockBufferNoCopy();
  if (CFDataWithBlockBufferNoCopy) {
    goto LABEL_43;
  }
  keys = @"keyspace";
  if (CFEqual(@"com.apple.quicktime.udta", a4))
  {
    CFTypeID v14 = kFigUserDataKeyspace;
  }
  else
  {
    if (!CFEqual(@"org.mp4ra", a4))
    {
LABEL_42:
      CFDataWithBlockBufferNoCFArrayRef Copy = FigSignalErrorAt();
LABEL_43:
      uint64_t v16 = CFDataWithBlockBufferNoCopy;
      a3 = 0;
      goto LABEL_14;
    }
    CFTypeID v14 = kFigISOUserDataKeyspace;
  }
  values = *v14;
  __int16 v35 = @"meta";
  uint64_t v32 = @"key";
  uint64_t v33 = @"value";
  CFTypeRef v36 = cf;
  CFDictionaryRef v15 = CFDictionaryCreate(v9, (const void **)&keys, (const void **)&values, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v15) {
    goto LABEL_42;
  }
  a3 = v15;
  uint64_t v16 = 0;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (v16) {
    goto LABEL_35;
  }
  CFIndex Count = CFArrayGetCount(MutableCopy);
  if (Count >= 1)
  {
    unint64_t v18 = Count + 1;
    do
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(MutableCopy, v18 - 2);
      CFTypeRef Value = CFDictionaryGetValue(ValueAtIndex, @"keyspace");
      uint64_t v21 = CFDictionaryGetValue(ValueAtIndex, @"key");
      if (Value)
      {
        CFIndex v22 = v21;
        if (v21)
        {
          if (CFEqual(@"uiso", Value) && CFEqual(a4, @"org.mp4ra")
            || CFEqual(@"udta", Value) && CFEqual(a4, @"com.apple.quicktime.udta"))
          {
            if (CFEqual(@"meta", v22)
              || (CFTypeID TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(v22))
              && (LODWORD(values) = 0,
                  CFNumberGetValue((CFNumberRef)v22, kCFNumberSInt32Type, &values),
                  values == 1835365473))
            {
              CFArrayRemoveValueAtIndex(MutableCopy, v18 - 2);
            }
          }
        }
      }
      --v18;
    }
    while (v18 > 1);
  }
  CFArrayAppendValue(MutableCopy, a3);
  a2 = v25;
  a5 = v26;
LABEL_33:
  uint64_t v16 = figMDRW_CreateMetadataBBufFromMetadataArray(MutableCopy, a4, a2, &v27);
  if (v16)
  {
    if (v27) {
      CFRelease(v27);
    }
  }
  else
  {
    *a5 = v27;
    CFTypeRef v27 = 0;
  }
LABEL_35:
  if (a3) {
    CFRelease(a3);
  }
LABEL_37:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v16;
}

uint64_t figMDRW_CreateMetadataBBufFromMetadataArray(const __CFArray *a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef v39 = 0;
  CFTypeRef cf = 0;
  if (CFEqual(@"com.apple.quicktime.mdta", a2))
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v7 = FigMetadataSerializerCreateForQuickTimeMetadata(*MEMORY[0x1E4F1CF80], &cf);
    if (v7) {
      goto LABEL_43;
    }
  }
  else if (CFEqual(@"com.apple.quicktime.udta", a2))
  {
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v7 = FigMetadataSerializerCreateForQuickTimeUserData(*MEMORY[0x1E4F1CF80], &cf);
    if (v7) {
      goto LABEL_43;
    }
  }
  else
  {
    if (!CFEqual(@"com.apple.itunes", a2))
    {
      if (CFEqual(@"org.mp4ra", a2))
      {
        CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t v7 = FigMetadataSerializerCreateForISOUserData(*MEMORY[0x1E4F1CF80], &cf);
        if (!v7) {
          goto LABEL_12;
        }
      }
      else
      {
        uint64_t v7 = FigSignalErrorAt();
      }
LABEL_43:
      uint64_t v22 = v7;
      goto LABEL_39;
    }
    CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t v7 = FigMetadataSerializerCreateForiTunes(*MEMORY[0x1E4F1CF80], &cf);
    if (v7) {
      goto LABEL_43;
    }
  }
LABEL_12:
  CFAllocatorRef allocator = v6;
  uint64_t v37 = a3;
  CFTypeRef v8 = cf;
  CFIndex Count = CFArrayGetCount(a1);
  uint64_t FigMetadataWriter = FigMetadataSerializerGetFigMetadataWriter(v8);
  if (Count >= 1)
  {
    uint64_t v11 = FigMetadataWriter;
    for (CFIndex i = 0; Count != i; ++i)
    {
      CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a1, i);
      CFTypeRef Value = CFDictionaryGetValue(ValueAtIndex, @"keyspace");
      CFDictionaryRef v15 = CFDictionaryGetValue(ValueAtIndex, @"key");
      uint64_t v16 = CFDictionaryGetValue(ValueAtIndex, @"value");
      if (Value)
      {
        if (v15)
        {
          CFIndex v17 = v16;
          if (v16)
          {
            uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v18) {
              uint64_t v19 = v18;
            }
            else {
              uint64_t v19 = 0;
            }
            uint64_t v20 = *(uint64_t (**)(uint64_t, const void *, const void *, const void *, const __CFDictionary *))(v19 + 8);
            if (!v20) {
              goto LABEL_38;
            }
            uint64_t v21 = v20(v11, Value, v15, v17, ValueAtIndex);
            if (v21)
            {
              uint64_t v22 = v21;
              if (v21 != -12583) {
                goto LABEL_39;
              }
            }
          }
        }
      }
    }
  }
  uint64_t valuePtr = v37;
  uint64_t v23 = FigMetadataSerializerGetFigMetadataWriter(cf);
  CFNumberRef v24 = CFNumberCreate(allocator, kCFNumberSInt64Type, &valuePtr);
  if (v24)
  {
    CFNumberRef v25 = v24;
    uint64_t FigBaseObject = FigMetadataWriterGetFigBaseObject(v23);
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    CFNumberRef v29 = *(uint64_t (**)(uint64_t, __CFString *, CFNumberRef))(v28 + 56);
    if (v29) {
      uint64_t v22 = v29(FigBaseObject, @"minimumSize", v25);
    }
    else {
      uint64_t v22 = 4294954514;
    }
    CFRelease(v25);
    if (v22) {
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v22 = FigSignalErrorAt();
    if (v22) {
      goto LABEL_39;
    }
  }
  CFTypeRef v30 = cf;
  uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 24);
  if (v31) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  uint64_t v33 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v32 + 8);
  if (v33)
  {
    uint64_t v22 = v33(v30, &v39);
    if (v22)
    {
      if (v39) {
        CFRelease(v39);
      }
    }
    else
    {
      *a4 = v39;
      CFTypeRef v39 = 0;
    }
  }
  else
  {
LABEL_38:
    uint64_t v22 = 4294954514;
  }
LABEL_39:
  if (cf) {
    CFRelease(cf);
  }
  return v22;
}

uint64_t FigMetadataReaderCreateForID3(const __CFAllocator *a1, const void *a2, uint64_t a3, void *a4)
{
  return figID3CreateMetadataReaderCommon(a1, a2, a3, 1, a4);
}

uint64_t figID3CreateMetadataReaderCommon(CFAllocatorRef Default, const void *a2, uint64_t a3, char a4, void *a5)
{
  if (a2 && a5 && (a3 & 0x8000000000000000) == 0)
  {
    FigMetadataReaderGetClassID();
    uint64_t Property = CMDerivedObjectCreate();
    if (Property) {
      return Property;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!Default) {
      Default = CFAllocatorGetDefault();
    }
    *(void *)uint64_t DerivedStorage = CFRetain(Default);
    *(void *)(DerivedStorage + 8) = CFRetain(a2);
    *(void *)(DerivedStorage + 16) = a3;
    uint64_t Property = ID3ParserOpen();
    if (Property) {
      return Property;
    }
    uint64_t Property = ID3ParserGetProperty();
    if (Property) {
      return Property;
    }
    *(void *)(DerivedStorage + 32) = 0;
    *(unsigned char *)(DerivedStorage + 65) = a4;
    uint64_t v12 = ID3ParserGetProperty();
    if (!v12)
    {
      *(_DWORD *)(DerivedStorage + 40) = 0;
      *a5 = 0;
    }
    return v12;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMetadataReaderCreateForID3WithBackwardCompatibility(const __CFAllocator *a1, const void *a2, uint64_t a3, void *a4)
{
  return figID3CreateMetadataReaderCommon(a1, a2, a3, 0, a4);
}

uint64_t FigMetadataReaderCreateForTimedID3(const __CFAllocator *a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v5 = CMByteStreamCreateForBlockBuffer();
    if (v5) {
      return v5;
    }
    else {
      return figID3CreateMetadataReaderCommon(a1, 0, 0, 1, a3);
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigID3MetadataCallbackProc(uint64_t a1, int a2, unsigned int a3, unsigned int a4, char **a5, unsigned int *a6)
{
  uint64_t DerivedStorage = (CFAllocatorRef *)CMBaseObjectGetDerivedStorage();
  uint64_t v12 = DerivedStorage;
  CMBlockBufferRef blockBufferOut = 0;
  CMBlockBufferRef theBuffer = 0;
  CFAllocatorRef v13 = DerivedStorage[2];
  dataunint64_t Length = 0;
  if (a2 == 1)
  {
    CFAllocatorRef v14 = DerivedStorage[6];
    if (v14)
    {
      CFRelease(v14);
      uint64_t DataPointer = 0;
      v12[6] = 0;
    }
    else
    {
      uint64_t DataPointer = 0;
    }
    goto LABEL_19;
  }
  CFAllocatorRef v16 = DerivedStorage[1];
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(uint64_t (**)(CFAllocatorRef, void, char *, CMBlockBufferRef *, size_t *))(v18 + 32);
  if (!v19)
  {
    uint64_t DataPointer = 4294954514;
    goto LABEL_19;
  }
  uint64_t v20 = v19(v16, a4, (char *)v13 + a3, &theBuffer, &dataLength);
  if (v20) {
    goto LABEL_23;
  }
  if (dataLength != a4)
  {
    uint64_t v20 = FigSignalErrorAt();
    goto LABEL_23;
  }
  if (!CMBlockBufferIsRangeContiguous(theBuffer, 0, a4))
  {
    uint64_t v20 = CMBlockBufferCreateContiguous(*v12, theBuffer, *v12, 0, 0, dataLength, 0, &blockBufferOut);
    if (!v20)
    {
      CFRelease(theBuffer);
      uint64_t v21 = blockBufferOut;
      CMBlockBufferRef blockBufferOut = 0;
      CMBlockBufferRef theBuffer = v21;
      goto LABEL_14;
    }
LABEL_23:
    uint64_t DataPointer = v20;
    goto LABEL_19;
  }
LABEL_14:
  CFAllocatorRef v22 = v12[6];
  if (v22) {
    CFRelease(v22);
  }
  uint64_t v23 = theBuffer;
  v12[6] = theBuffer;
  uint64_t DataPointer = CMBlockBufferGetDataPointer(v23, 0, 0, 0, a5);
  if (!DataPointer) {
    *a6 = a4;
  }
LABEL_19:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return DataPointer;
}

void FigID3MetadataFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 24)) {
    ID3ParserClose();
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 48);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 48) = 0;
  }
  unsigned int v2 = *(const void **)(DerivedStorage + 8);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 8) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

__CFString *FigID3MetadataCopyDebugDescription(uint64_t a1)
{
  uint64_t v2 = *MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @" FigID3MetadataReader %p\n", DerivedStorage);
  CFStringRef v5 = CFCopyDescription(*(CFTypeRef *)(DerivedStorage + 8));
  if (v5)
  {
    CFStringRef v6 = v5;
    CFStringAppendFormat(Mutable, 0, @"  ByteStream = %@\n", v5);
    CFRelease(v6);
  }
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  CFAllocatorRef v9 = *(uint64_t (**)(uint64_t, void, void))(v8 + 40);
  if (v9)
  {
    uint64_t v10 = v9(a1, 0, 0);
    if (v10 >= 1)
    {
      uint64_t v11 = v10;
      CFStringAppendFormat(Mutable, 0, @"  Item CFIndex Count = %d\n", v10);
      for (uint64_t i = 0; i != v11; ++i)
      {
        CFDictionaryRef theDict = 0;
        CFTypeRef cf = 0;
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        CFDictionaryRef v15 = *(unsigned int (**)(uint64_t, void, void, uint64_t, uint64_t, CFTypeRef *, CFDictionaryRef *))(v14 + 48);
        if (!v15 || v15(a1, 0, 0, i, v2, &cf, &theDict)) {
          break;
        }
        CFStringAppendFormat(Mutable, 0, @"   [%d]:\n", i);
        if (cf)
        {
          CFStringRef v16 = CFCopyDescription(cf);
          if (v16)
          {
            CFStringRef v17 = v16;
            CFStringAppendFormat(Mutable, 0, @"    CFTypeRef Value = %@\n", v16);
            CFRelease(v17);
          }
          CFRelease(cf);
        }
        if (theDict)
        {
          CFStringAppendFormat(Mutable, 0, @"    Properties:\n");
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)metadataPropertiesCallback_2, Mutable);
          CFRelease(theDict);
        }
      }
    }
  }
  return Mutable;
}

uint64_t FigID3MetadataCopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"complete"))
  {
    if (CFEqual(a2, @"format"))
    {
      uint64_t v11 = (void *)CFRetain(@"org.id3");
    }
    else
    {
      if (CFEqual(a2, @"formatVersion"))
      {
        LODWORD(valuePtr) = 0;
        uint64_t Property = ID3ParserGetProperty();
        if (Property) {
          return Property;
        }
        uint64_t v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
LABEL_18:
        *a4 = v11;
        return Property;
      }
      if (!CFEqual(a2, @"size")) {
        return 4294954512;
      }
      unint64_t valuePtr = DerivedStorage[4];
      uint64_t v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    }
    uint64_t Property = 0;
    goto LABEL_18;
  }
  unint64_t valuePtr = 0;
  uint64_t v7 = DerivedStorage[1];
  uint64_t v8 = DerivedStorage[2];
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t *))(v10 + 24);
  if (!v13) {
    return 4294954514;
  }
  uint64_t Property = v13(v7, v8, &valuePtr);
  if (!Property)
  {
    if (valuePtr >= DerivedStorage[4]) {
      uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    }
    else {
      uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
    }
    uint64_t v11 = (void *)CFRetain(*v14);
    goto LABEL_18;
  }
  return Property;
}

void metadataPropertiesCallback_2(const void *a1, const void *a2, __CFString *a3)
{
  if (CFEqual(a1, @"key"))
  {
    CFTypeID v5 = CFGetTypeID(a2);
    if (v5 == CFNumberGetTypeID())
    {
      signed int valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)a2, kCFNumberSInt32Type, &valuePtr))
      {
        signed int valuePtr = bswap32(valuePtr);
        CFStringAppendFormat(a3, 0, @"     Key = %c%c%c%c\n", (char)valuePtr, ((__int16)valuePtr >> 8), (valuePtr << 8 >> 24), (valuePtr >> 24));
      }
    }
    else
    {
      CFTypeID v6 = CFGetTypeID(a2);
      if (v6 == CFStringGetTypeID()) {
        CFStringAppendFormat(a3, 0, @"     Key = %@\n", a2);
      }
    }
  }
}

uint64_t FigID3MetadataCopyValue(uint64_t a1, CFTypeRef cf1, uint64_t a3, uint64_t a4, uint64_t a5, CFTypeRef *a6, CFTypeRef *a7)
{
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  if (!a1 || !a3 || !cf1 || !a6 || !CFEqual(cf1, @"comn") && !CFEqual(cf1, @"org.id3")) {
    goto LABEL_25;
  }
  if (a7) {
    uint64_t v14 = &v21;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  CFStringRef v17 = *(uint64_t (**)(uint64_t, CFTypeRef, uint64_t, void, uint64_t, CFTypeRef *, CFTypeRef *))(v16 + 48);
  if (!v17)
  {
    uint64_t v19 = 4294954514;
    goto LABEL_20;
  }
  uint64_t v18 = v17(a1, cf1, a3, 0, a5, &cf, v14);
  if (v18)
  {
LABEL_26:
    uint64_t v19 = v18;
LABEL_20:
    if (cf) {
      CFRelease(cf);
    }
    goto LABEL_22;
  }
  if (a4 && CFGetTypeID(cf) != a4)
  {
LABEL_25:
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_26;
  }
  *a6 = cf;
  CFTypeRef cf = 0;
  uint64_t v19 = 0;
  if (a7)
  {
    *a7 = v21;
    return v19;
  }
LABEL_22:
  if (v21) {
    CFRelease(v21);
  }
  return v19;
}

uint64_t FigID3MetadataHasKey(uint64_t a1, const void *a2, const __CFString *a3)
{
  unsigned int valuePtr = 0;
  int v9 = 0;
  if (!CMBaseObjectGetDerivedStorage() || !a3 || !a2) {
    goto LABEL_18;
  }
  if (CFEqual(a2, @"comn"))
  {
    uint64_t result = FigID3MetadataCommonKeyToOSTypeKey(a3, &valuePtr);
    if (!result) {
      return result;
    }
    goto LABEL_13;
  }
  if (!CFEqual(a2, @"org.id3")) {
    goto LABEL_18;
  }
  CFTypeID v6 = CFGetTypeID(a3);
  if (v6 != CFStringGetTypeID())
  {
    CFTypeID v7 = CFGetTypeID(a3);
    if (v7 == CFNumberGetTypeID() && CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr)) {
      goto LABEL_13;
    }
LABEL_18:
    FigSignalErrorAt();
    return 0;
  }
  if (!FigID3MetadataStringKeyToOSTypeKey(a3, &valuePtr)) {
    goto LABEL_18;
  }
LABEL_13:
  int Property = ID3ParserGetProperty();
  uint64_t result = 0;
  if (!Property)
  {
    while (valuePtr)
    {
      ++v9;
      if (ID3ParserGetProperty()) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

CFIndex FigID3MetadataGetKeyCount(const void *a1, const void *a2)
{
  int v10 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage || (uint64_t v5 = DerivedStorage, a2) && !CFEqual(a2, @"org.id3"))
  {
    FigSignalErrorAt();
    return 0;
  }
  if (!*(unsigned char *)(v5 + 64))
  {
    if (!ID3ParserGetProperty())
    {
      CFMutableDictionaryRef Mutable = 0;
      do
      {
        if (!Mutable)
        {
          CFAllocatorRef v8 = CFGetAllocator(a1);
          CFMutableDictionaryRef Mutable = CFSetCreateMutable(v8, 0, 0);
        }
        CFSetAddValue(Mutable, 0);
        ++v10;
      }
      while (!ID3ParserGetProperty());
      if (Mutable)
      {
        CFIndex Count = CFSetGetCount(Mutable);
        *(void *)(v5 + 56) = Count;
        *(unsigned char *)(v5 + 64) = 1;
        CFRelease(Mutable);
        return Count;
      }
    }
    return 0;
  }
  return *(void *)(v5 + 56);
}

uint64_t FigID3MetadataCopyKeyAtIndex(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, CFNumberRef *a5)
{
  uint64_t v11 = 0;
  if (CMBaseObjectGetDerivedStorage() && a5 && (!a2 || CFEqual(a2, @"org.id3")))
  {
    int v10 = 0;
    uint64_t valuePtr = 0;
    while (!ID3ParserGetProperty())
    {
      if (HIDWORD(v11) == a3)
      {
        *a5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        return 0;
      }
      ++HIDWORD(v11);
      int v10 = 0;
      uint64_t valuePtr = 0;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

CFStringRef FigID3MetadataGetItemCount(uint64_t a1, const void *a2, const __CFString *a3)
{
  unsigned int valuePtr = 0;
  if (!CMBaseObjectGetDerivedStorage()) {
    goto LABEL_20;
  }
  if (!a2)
  {
    if (a3) {
      goto LABEL_20;
    }
    goto LABEL_11;
  }
  if (CFEqual(a2, @"comn"))
  {
    if (!a3)
    {
      FigSignalErrorAt();
      return a3;
    }
    if (FigID3MetadataCommonKeyToOSTypeKey(a3, &valuePtr)) {
      goto LABEL_6;
    }
    return 0;
  }
  if (!CFEqual(a2, @"org.id3"))
  {
LABEL_20:
    FigSignalErrorAt();
    return 0;
  }
  if (!a3)
  {
LABEL_11:
    a3 = 0;
    ID3ParserGetProperty();
    return a3;
  }
  CFTypeID v6 = CFGetTypeID(a3);
  if (v6 == CFStringGetTypeID())
  {
    if (!FigID3MetadataStringKeyToOSTypeKey(a3, &valuePtr)) {
      goto LABEL_20;
    }
  }
  else
  {
    CFTypeID v7 = CFGetTypeID(a3);
    if (v7 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &valuePtr)) {
      goto LABEL_20;
    }
  }
LABEL_6:
  uint64_t v8 = valuePtr;
  a3 = 0;
  if (!ID3ParserGetProperty())
  {
    a3 = 0;
    do
    {
      ++HIDWORD(v8);
      a3 = (const __CFString *)((char *)a3 + 1);
    }
    while (!ID3ParserGetProperty());
  }
  return a3;
}

uint64_t FigID3MetadataCopyItemWithKeyAndIndex(uint64_t a1, const void *a2, const __CFString *a3, uint64_t a4, const __CFAllocator *a5, CFTypeRef *a6, unint64_t a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!((unint64_t)a6 | a7))
  {
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_92;
  }
  uint64_t v14 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 65)) {
    p_CFTypeRef cf = &cf;
  }
  else {
    p_CFTypeRef cf = a6;
  }
  unsigned int v58 = 0;
  uint64_t v57 = 0;
  if (!CMBaseObjectGetDerivedStorage()) {
    goto LABEL_52;
  }
  if (!a2)
  {
    if (a3) {
      goto LABEL_52;
    }
    goto LABEL_12;
  }
  if (!CFEqual(a2, @"comn"))
  {
    if (!CFEqual(a2, @"org.id3")) {
      goto LABEL_52;
    }
    if (a3)
    {
      CFTypeID v17 = CFGetTypeID(a3);
      if (v17 == CFStringGetTypeID())
      {
        if (!FigID3MetadataStringKeyToOSTypeKey(a3, &v58)) {
          goto LABEL_52;
        }
      }
      else
      {
        CFTypeID v38 = CFGetTypeID(a3);
        if (v38 != CFNumberGetTypeID() || !CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &v58)) {
          goto LABEL_52;
        }
      }
LABEL_10:
      LODWORD(v57) = v58;
    }
LABEL_12:
    int v56 = 0;
    uint64_t valuePtr = 0;
    int v54 = 12;
    int v16 = 0;
    if (!ID3ParserGetProperty())
    {
      while (HIDWORD(v57) != a4)
      {
        ++HIDWORD(v57);
        int v56 = 0;
        uint64_t valuePtr = 0;
        int v54 = 12;
        if (ID3ParserGetProperty())
        {
          int v16 = 0;
          goto LABEL_26;
        }
      }
      if (p_cf)
      {
        CFTypeRef v53 = 0;
        int v52 = 8;
        if (ID3ParserGetProperty()) {
          goto LABEL_52;
        }
        *p_CFTypeRef cf = v53;
      }
      int v16 = valuePtr;
    }
    goto LABEL_26;
  }
  if (a3)
  {
    if (!FigID3MetadataCommonKeyToOSTypeKey(a3, &v58))
    {
      uint64_t v27 = 4294954691;
      goto LABEL_92;
    }
    goto LABEL_10;
  }
LABEL_52:
  uint64_t v27 = FigSignalErrorAt();
  int v16 = 0;
  if (v27) {
    goto LABEL_92;
  }
LABEL_26:
  if (!*(unsigned char *)(v14 + 65))
  {
    LODWORD(valuePtr) = v16;
    if (a7)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      *(void *)a7 = Mutable;
      if (!Mutable
        || (CFNumberRef v24 = Mutable,
            (CFNumberRef v25 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr)) == 0))
      {
LABEL_96:
        uint64_t v27 = FigSignalErrorAt();
        if (!a6) {
          goto LABEL_92;
        }
        goto LABEL_88;
      }
      CFNumberRef v26 = v25;
      CFDictionaryAddValue(v24, @"key", v25);
      CFRelease(v26);
      CFDictionaryAddValue(v24, @"keyspace", @"org.id3");
    }
    uint64_t v27 = 0;
    if (!a6) {
      goto LABEL_92;
    }
    goto LABEL_88;
  }
  CFTypeRef v18 = cf;
  int v19 = *(_DWORD *)(v14 + 40);
  CFMutableDictionaryRef v20 = CFDictionaryCreateMutable(a5, 7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v20) {
    goto LABEL_96;
  }
  CFTypeRef v21 = v20;
  if (v19 == 2) {
    CFStringFor3CCCFTypeRef Value = FigGetCFStringFor3CCValue();
  }
  else {
    CFStringFor3CCCFTypeRef Value = FigGetCFStringForOSTypeValue();
  }
  CFStringRef v28 = (const __CFString *)CFStringFor3CCValue;
  if (!CFStringFor3CCValue)
  {
    uint64_t v27 = FigSignalErrorAt();
    goto LABEL_87;
  }
  CFDictionaryAddValue(v21, @"keyspace", @"org.id3");
  CFDictionaryAddValue(v21, @"key", v28);
  if (!v18)
  {
    CFTypeRef Value = 0;
    goto LABEL_77;
  }
  CFTypeID v29 = CFGetTypeID(v18);
  if (v29 != CFDictionaryGetTypeID())
  {
    CFTypeRef Value = CFRetain(v18);
    CFStringRef v36 = 0;
    CFStringRef v37 = 0;
    goto LABEL_64;
  }
  CFTypeRef Value = CFDictionaryGetValue((CFDictionaryRef)v18, @"data");
  if (Value || (CFTypeRef Value = CFDictionaryGetValue((CFDictionaryRef)v18, @"text")) != 0) {
    CFRetain(Value);
  }
  uint64_t v31 = CFDictionaryGetValue((CFDictionaryRef)v18, @"identifier");
  if (v31) {
    CFDictionaryAddValue(v21, @"info", v31);
  }
  CFStringRef v32 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v18, @"language");
  if (v32)
  {
    CFStringRef v33 = v32;
    CFTypeID v34 = CFGetTypeID(v32);
    if (v34 == CFNumberGetTypeID())
    {
      __int16 v35 = CFRetain(v33);
      goto LABEL_56;
    }
    CFTypeID v39 = CFGetTypeID(v33);
    if (v39 == CFStringGetTypeID())
    {
      LOWORD(valuePtr) = FigMetadataGetPackedISO639_2T(v33);
      __int16 v35 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt16Type, &valuePtr);
LABEL_56:
      uint64_t v40 = v35;
      if (v35)
      {
        CFDictionaryAddValue(v21, @"languageCode", v35);
        CFRelease(v40);
      }
    }
  }
  CFStringRef v36 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v18, @"MIME");
  if (v36)
  {
    CFDictionaryAddValue(v21, @"dataType", v36);
    CFDictionaryAddValue(v21, @"dataTypeNamespace", @"org.iana.media-type");
  }
  uint64_t v41 = CFDictionaryGetValue((CFDictionaryRef)v18, @"picturetype");
  if (v41) {
    CFDictionaryAddValue(v21, @"pictureType", v41);
  }
  CFStringRef v37 = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)v18, @"filename");
  if (v37) {
    CFDictionaryAddValue(v21, @"name", v37);
  }
LABEL_64:
  if (Value)
  {
    CFTypeID v42 = CFURLGetTypeID();
    if (v42 != CFGetTypeID(Value))
    {
      CFTypeID TypeID = CFDataGetTypeID();
      if (TypeID != CFGetTypeID(Value)) {
        goto LABEL_77;
      }
      CFComparisonResult v47 = CFStringCompare(v28, @"GEOB", 0);
      if (!v36) {
        goto LABEL_77;
      }
      if (v47) {
        goto LABEL_77;
      }
      CFComparisonResult v48 = CFStringCompare(v36, @"application/xml", 1uLL);
      if (!v37) {
        goto LABEL_77;
      }
      if (v48) {
        goto LABEL_77;
      }
      if (!CFStringHasSuffix(v37, @".plist")) {
        goto LABEL_77;
      }
      CFURLRef v45 = (const __CFURL *)CFPropertyListCreateWithData(a5, (CFDataRef)Value, 0, 0, 0);
      CFURLRef v44 = v45;
      if (!v45) {
        goto LABEL_77;
      }
      goto LABEL_68;
    }
    CFURLRef v43 = CFURLCopyAbsoluteURL((CFURLRef)Value);
    if (v43)
    {
      CFURLRef v44 = v43;
      CFURLRef v45 = (const __CFURL *)CFURLGetString(v43);
      if (!v45)
      {
LABEL_69:
        CFRelease(v44);
        goto LABEL_77;
      }
LABEL_68:
      CFRetain(v45);
      CFRelease(Value);
      CFTypeRef Value = v45;
      goto LABEL_69;
    }
  }
LABEL_77:
  if (a6)
  {
    if (Value) {
      CFTypeRef v49 = CFRetain(Value);
    }
    else {
      CFTypeRef v49 = 0;
    }
    *a6 = v49;
  }
  if (a7) {
    *(void *)a7 = CFRetain(v21);
  }
  if (Value) {
    CFRelease(Value);
  }
  uint64_t v27 = 0;
LABEL_87:
  CFRelease(v21);
  if (!a6) {
    goto LABEL_92;
  }
LABEL_88:
  if (!v27)
  {
    if (*a6) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = 4294954689;
    }
  }
LABEL_92:
  if (cf) {
    CFRelease(cf);
  }
  return v27;
}

uint64_t FigPlayerServerStart()
{
  FigPlayerCelesteOneTimeInitialization();
  if (FigServer_IsMediaparserd()) {
    return FigSignalErrorAt();
  }
  FigServer_IsMediaplaybackd();
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFMutableDictionaryRef v2 = Mutable;
  FigCFDictionarySetValue();
  uint64_t v3 = FigXPCServerStart();
  if (v3 || (uint64_t v3 = FigXPCPlaybackCoordinatorServerStartAsSubserver(gPlayerServer), v3))
  {
    uint64_t started = v3;
  }
  else
  {
    uint64_t started = FigXPCImageQueueGaugeServerStartAsSubserver(gPlayerServer);
    if (!started) {
      FigXPCServerActivate();
    }
  }
  CFRelease(v2);
  return started;
}

uint64_t HandlePlayerServerMessage(_xpc_connection_s *a1, void *a2, void *a3)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  uint64_t v108 = 0;
  CMVideoDimensions v109 = &v108;
  uint64_t v110 = 0x2000000000;
  int v111 = 0;
  int v107 = 0;
  uint64_t v103 = 0;
  v104 = &v103;
  uint64_t v105 = 0x2000000000;
  uint64_t v106 = 0;
  uint64_t v102 = 0;
  if (!a2 || !a3) {
    goto LABEL_243;
  }
  OpCFIndex Code = FigXPCMessageGetOpCode();
  *((_DWORD *)v109 + 6) = OpCode;
  if (OpCode) {
    goto LABEL_245;
  }
  if (xpc_dictionary_get_BOOL(a2, "IsFigSharedMessage"))
  {
    LODWORD(v120) = 0;
    int v7 = FigXPCMessageGetOpCode();
    if (v7)
    {
      int CacheFileSize = v7;
      goto LABEL_237;
    }
    int CacheFileSize = -16158;
    if ((int)v120 <= 1399157346)
    {
      if ((int)v120 <= 1399025523)
      {
        if ((int)v120 <= 1399023981)
        {
          if (v120 != 1398961507)
          {
            if (v120 == 1399023219)
            {
              *(void *)&long long __str = 0;
              *(void *)&cf[0] = 0;
              value[0] = 0;
              int v9 = FigXPCMessageCopyCFString();
              if (v9) {
                goto LABEL_196;
              }
              if (!(void)__str || (CFTypeID v10 = CFGetTypeID((CFTypeRef)__str), v10 == CFStringGetTypeID()))
              {
                int v9 = FigXPCMessageCopyCFString();
                if (!v9)
                {
                  if (*(void *)&cf[0])
                  {
                    CFTypeID v11 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
                    if (v11 == CFStringGetTypeID())
                    {
                      int CacheFileSize = FigShared_GetCacheFileSize((const __CFString *)__str, *(uint64_t *)&cf[0], (int64_t *)value);
                      if (!CacheFileSize) {
                        xpc_dictionary_set_int64(a3, "UsedFileSize", (int64_t)value[0]);
                      }
LABEL_197:
                      if ((void)__str) {
                        CFRelease((CFTypeRef)__str);
                      }
                      CFDictionaryRef v36 = *(CFDictionaryRef *)&cf[0];
                      if (!*(void *)&cf[0]) {
                        goto LABEL_237;
                      }
                      goto LABEL_236;
                    }
                  }
                  goto LABEL_258;
                }
LABEL_196:
                int CacheFileSize = v9;
                goto LABEL_197;
              }
LABEL_258:
              int v9 = FigSignalErrorAt();
              goto LABEL_196;
            }
            goto LABEL_237;
          }
          int v29 = CMBeginUpdatingIncrementalCodeCoverageData();
          int v58 = MXBeginUpdatingIncrementalCodeCoverageData();
          if (!v29) {
            int v29 = v58;
          }
          int v59 = VTBeginUpdatingIncrementalCodeCoverageData();
          if (!v29) {
            int v29 = v59;
          }
          int v32 = MTBeginUpdatingIncrementalCodeCoverageData();
LABEL_134:
          if (v29) {
            int CacheFileSize = v29;
          }
          else {
            int CacheFileSize = v32;
          }
          goto LABEL_237;
        }
        if (v120 != 1399023982)
        {
          if (v120 != 1399023983) {
            goto LABEL_237;
          }
          *(void *)&long long __str = 0;
          *(void *)&cf[0] = 0;
          value[0] = 0;
          *(void *)v116.val = 0;
          int v42 = FigXPCMessageCopyCFString();
          if (v42) {
            goto LABEL_163;
          }
          if (!(void)__str || (CFTypeID v43 = CFGetTypeID((CFTypeRef)__str), v43 == CFStringGetTypeID()))
          {
            int v42 = FigXPCMessageCopyCFString();
            if (v42) {
              goto LABEL_163;
            }
            if (*(void *)&cf[0])
            {
              CFTypeID v44 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
              if (v44 == CFStringGetTypeID())
              {
                int v42 = FigXPCMessageCopyCFURL();
                if (v42) {
                  goto LABEL_163;
                }
                if (value[0])
                {
                  CFTypeID v45 = CFGetTypeID(value[0]);
                  if (v45 == CFURLGetTypeID())
                  {
                    int v42 = FigShared_CheckIntoAndOutOfDiskCache((const __CFString *)__str, *(const __CFString **)&cf[0], value[0], (const void **)&v116);
                    if (v42) {
                      goto LABEL_163;
                    }
                    goto LABEL_162;
                  }
                }
              }
            }
          }
          goto LABEL_262;
        }
        *(void *)&long long __str = 0;
        *(void *)&cf[0] = 0;
        value[0] = 0;
        int v73 = FigXPCMessageCopyCFString();
        if (v73) {
          goto LABEL_188;
        }
        if ((void)__str)
        {
          CFTypeID v74 = CFGetTypeID((CFTypeRef)__str);
          if (v74 != CFStringGetTypeID()) {
            goto LABEL_263;
          }
        }
        int v73 = FigXPCMessageCopyCFString();
        if (v73) {
          goto LABEL_188;
        }
        if (!*(void *)&cf[0]) {
          goto LABEL_263;
        }
        CFTypeID v75 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
        if (v75 != CFStringGetTypeID()) {
          goto LABEL_263;
        }
        int v73 = FigXPCMessageCopyCFURL();
        if (v73) {
          goto LABEL_188;
        }
        if (value[0] && (CFTypeID v76 = CFGetTypeID(value[0]), v76 == CFURLGetTypeID())) {
          int v73 = FigShared_CheckIntoDiskCache((const __CFString *)__str, *(const __CFString **)&cf[0], value[0]);
        }
        else {
LABEL_263:
        }
          int v73 = FigSignalErrorAt();
LABEL_188:
        int CacheFileSize = v73;
        if ((void)__str) {
          CFRelease((CFTypeRef)__str);
        }
        goto LABEL_233;
      }
      if ((int)v120 <= 1399025777)
      {
        if (v120 == 1399025524)
        {
          *(void *)&long long __str = 0;
          *(void *)&cf[0] = 0;
          value[0] = 0;
          *(void *)v116.val = 0;
          int v42 = FigXPCMessageCopyCFString();
          if (v42) {
            goto LABEL_163;
          }
          if (!(void)__str || (CFTypeID v68 = CFGetTypeID((CFTypeRef)__str), v68 == CFStringGetTypeID()))
          {
            int v42 = FigXPCMessageCopyCFString();
            if (v42) {
              goto LABEL_163;
            }
            if (*(void *)&cf[0])
            {
              CFTypeID v69 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
              if (v69 == CFStringGetTypeID())
              {
                int v42 = FigShared_CheckOutOfDiskCache((const __CFString *)__str, *(const void **)&cf[0], (CFTypeRef *)value, (const void **)&v116);
                if (v42 || (int v42 = FigXPCMessageSetCFURL()) != 0)
                {
LABEL_163:
                  int CacheFileSize = v42;
                  if ((void)__str) {
                    CFRelease((CFTypeRef)__str);
                  }
                  if (*(void *)&cf[0]) {
                    CFRelease(*(CFTypeRef *)&cf[0]);
                  }
                  if (value[0]) {
                    CFRelease(value[0]);
                  }
                  CFDictionaryRef v36 = *(CFDictionaryRef *)v116.val;
                  if (!*(void *)v116.val) {
                    goto LABEL_237;
                  }
                  goto LABEL_236;
                }
LABEL_162:
                int v42 = FigXPCMessageSetCFString();
                goto LABEL_163;
              }
            }
          }
LABEL_262:
          int v42 = FigSignalErrorAt();
          goto LABEL_163;
        }
        if (v120 != 1399025761) {
          goto LABEL_237;
        }
        *(void *)&long long __str = 0;
        *(void *)&cf[0] = 0;
        value[0] = 0;
        *(void *)v116.val = 0;
        LOBYTE(v118) = 0;
        *(void *)bytes.val = 0;
        int v33 = FigXPCMessageCopyCFString();
        if (v33) {
          goto LABEL_270;
        }
        CFStringRef v34 = (const __CFString *)__str;
        if ((void)__str)
        {
          CFTypeID v35 = CFGetTypeID((CFTypeRef)__str);
          if (v35 != CFStringGetTypeID())
          {
            int v33 = FigSignalErrorAt();
            goto LABEL_270;
          }
          CFStringRef v34 = (const __CFString *)__str;
        }
        int v33 = FigShared_CopyDiskCacheParams(v34, (int64_t *)cf, (int64_t *)value, (int64_t *)&v116, (BOOL *)&v118, &bytes);
        if (!v33)
        {
          int CacheFileSize = FigXPCMessageSetCFURL();
          if (!CacheFileSize)
          {
            xpc_dictionary_set_int64(a3, "UsedFileSize", *(int64_t *)&cf[0]);
            xpc_dictionary_set_int64(a3, "TargetSize", (int64_t)value[0]);
            xpc_dictionary_set_int64(a3, "TargetFileSize", *(int64_t *)v116.val);
            xpc_dictionary_set_BOOL(a3, "AutomaticallyManagesSize", (_BYTE)v118 != 0);
          }
LABEL_64:
          if ((void)__str) {
            CFRelease((CFTypeRef)__str);
          }
          CFDictionaryRef v36 = *(CFDictionaryRef *)bytes.val;
          if (!*(void *)bytes.val) {
            goto LABEL_237;
          }
LABEL_236:
          CFRelease(v36);
          goto LABEL_237;
        }
LABEL_270:
        int CacheFileSize = v33;
        goto LABEL_64;
      }
      if (v120 != 1399025778)
      {
        if (v120 == 1399088739)
        {
          *(void *)&long long __str = 0;
          *(void *)&cf[0] = 0;
          int v9 = FigXPCMessageCopyCFString();
          if (v9) {
            goto LABEL_196;
          }
          if (!(void)__str || (CFTypeID v49 = CFGetTypeID((CFTypeRef)__str), v49 == CFStringGetTypeID()))
          {
            int v9 = FigXPCMessageCopyCFString();
            if (v9) {
              goto LABEL_196;
            }
            if (*(void *)&cf[0])
            {
              CFTypeID v50 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
              if (v50 == CFStringGetTypeID())
              {
                int v9 = FigShared_DeleteFromDiskCache((const __CFString *)__str, *(const __CFString **)&cf[0]);
                goto LABEL_196;
              }
            }
          }
          goto LABEL_258;
        }
LABEL_237:
        *((_DWORD *)v109 + 6) = CacheFileSize;
        goto LABEL_245;
      }
      *(void *)&long long __str = 0;
      *(void *)&cf[0] = 0;
      value[0] = 0;
      *(void *)v116.val = 0;
      int v79 = FigXPCMessageCopyCFString();
      if (v79) {
        goto LABEL_265;
      }
      if ((void)__str)
      {
        CFTypeID v80 = CFGetTypeID((CFTypeRef)__str);
        if (v80 != CFStringGetTypeID()) {
          goto LABEL_264;
        }
      }
      int v79 = FigXPCMessageCopyCFString();
      if (!v79)
      {
        if (!*(void *)&cf[0] || (CFTypeID v81 = CFGetTypeID(*(CFTypeRef *)&cf[0]), v81 != CFStringGetTypeID()))
        {
LABEL_264:
          int v79 = FigSignalErrorAt();
          goto LABEL_265;
        }
        int v79 = FigXPCMessageCopyCFString();
        if (!v79)
        {
          if (*(void *)&cf[0])
          {
            CFTypeID v82 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
            if (v82 == CFStringGetTypeID())
            {
              int v83 = FigShared_CopyCacheProperty((const __CFString *)__str, *(const void **)&cf[0], value[0], (const __CFAllocator *)*MEMORY[0x1E4F1CF80], (CFNumberRef *)&v116);
              uint64_t v84 = *(const void **)v116.val;
              if (v83)
              {
                int CacheFileSize = v83;
                if (!*(void *)v116.val) {
                  goto LABEL_213;
                }
              }
              else
              {
                int CacheFileSize = FigXPCMessageSetCFObject();
                uint64_t v84 = *(const void **)v116.val;
                if (!*(void *)v116.val)
                {
LABEL_213:
                  if (value[0]) {
                    CFRelease(value[0]);
                  }
                  if (*(void *)&cf[0]) {
                    CFRelease(*(CFTypeRef *)&cf[0]);
                  }
                  goto LABEL_217;
                }
              }
              CFRelease(v84);
              goto LABEL_213;
            }
          }
          goto LABEL_264;
        }
      }
LABEL_265:
      int CacheFileSize = v79;
      goto LABEL_213;
    }
    if ((int)v120 <= 1400005473)
    {
      if ((int)v120 > 1399415922)
      {
        if (v120 == 1399415923)
        {
          *(void *)&long long __str = 0;
          *(void *)&cf[0] = 0;
          int v9 = FigXPCMessageCopyCFString();
          if (v9) {
            goto LABEL_196;
          }
          CFStringRef v77 = (const __CFString *)__str;
          if ((void)__str)
          {
            CFTypeID v78 = CFGetTypeID((CFTypeRef)__str);
            if (v78 != CFStringGetTypeID()) {
              goto LABEL_258;
            }
            CFStringRef v77 = (const __CFString *)__str;
          }
          int v9 = FigShared_CopyDiskCacheCheckedInIDs(v77, (CFMutableArrayRef *)cf);
          if (!v9) {
            int v9 = FigXPCMessageSetCFArray();
          }
          goto LABEL_196;
        }
        if (v120 != 1399679858) {
          goto LABEL_237;
        }
        *(void *)&long long __str = 0;
        *(void *)&cf[0] = 0;
        int v46 = FigXPCMessageCopyCFString();
        if (v46) {
          goto LABEL_125;
        }
        if (!(void)__str || (CFTypeID v47 = CFGetTypeID((CFTypeRef)__str), v47 == CFStringGetTypeID()))
        {
          BOOL v48 = xpc_dictionary_get_BOOL(a2, "AllAvailable");
          int CacheFileSize = FigShared_MakeRoomInDiskCache((const __CFString *)__str, v48, (int64_t *)cf);
          if (!CacheFileSize) {
            xpc_dictionary_set_int64(a3, "BytesMadeAvailable", *(int64_t *)&cf[0]);
          }
LABEL_217:
          CFDictionaryRef v36 = (CFDictionaryRef)__str;
          if (!(void)__str) {
            goto LABEL_237;
          }
          goto LABEL_236;
        }
      }
      else
      {
        if (v120 != 1399157347)
        {
          if (v120 != 1399223651) {
            goto LABEL_237;
          }
          int v29 = CMFinishUpdatingIncrementalCodeCoverageData();
          int v30 = MXFinishUpdatingIncrementalCodeCoverageData();
          if (!v29) {
            int v29 = v30;
          }
          int v31 = VTFinishUpdatingIncrementalCodeCoverageData();
          if (!v29) {
            int v29 = v31;
          }
          int v32 = MTFinishUpdatingIncrementalCodeCoverageData();
          goto LABEL_134;
        }
        *(void *)&long long __str = 0;
        int v46 = FigXPCMessageCopyCFString();
        if (v46) {
          goto LABEL_125;
        }
        if ((void)__str)
        {
          int v60 = CMSetCodeCoverageFilePathPattern();
          int v61 = MXSetCodeCoverageFilePathPattern();
          if (!v60) {
            int v60 = v61;
          }
          int v62 = VTSetCodeCoverageFilePathPattern();
          if (!v60) {
            int v60 = v62;
          }
          int v63 = MTSetCodeCoverageFilePathPattern();
          if (!v60) {
            int v60 = v63;
          }
          int v64 = CMEnsureReadyToCollectIncrementalCoverageData();
          if (!v60) {
            int v60 = v64;
          }
          int v65 = MXEnsureReadyToCollectIncrementalCoverageData();
          if (!v60) {
            int v60 = v65;
          }
          int v66 = VTEnsureReadyToCollectIncrementalCoverageData();
          if (!v60) {
            int v60 = v66;
          }
          int v67 = MTEnsureReadyToCollectIncrementalCoverageData();
          if (v60) {
            int CacheFileSize = v60;
          }
          else {
            int CacheFileSize = v67;
          }
          goto LABEL_217;
        }
      }
      goto LABEL_266;
    }
    if ((int)v120 > 1400074336)
    {
      if (v120 != 1400267632)
      {
        if (v120 != 1400074337) {
          goto LABEL_237;
        }
        *(void *)&long long __str = 0;
        int v46 = FigXPCMessageCopyCFString();
        if (v46) {
          goto LABEL_125;
        }
        if (!(void)__str || (CFTypeID v51 = CFGetTypeID((CFTypeRef)__str), v51 == CFStringGetTypeID()))
        {
          int64_t int64 = xpc_dictionary_get_int64(a2, "TargetSize");
          int64_t v53 = xpc_dictionary_get_int64(a2, "TargetFileSize");
          BOOL v54 = xpc_dictionary_get_BOOL(a2, "AutomaticallyManagesSize");
          int v46 = FigShared_SetDiskCacheParams((const __CFString *)__str, int64, v53, v54);
LABEL_125:
          int CacheFileSize = v46;
          goto LABEL_217;
        }
LABEL_266:
        int v46 = FigSignalErrorAt();
        goto LABEL_125;
      }
      *(void *)&cf[0] = 0;
      value[0] = 0;
      int v37 = FigXPCMessageCopyCFDictionary();
      if (!v37)
      {
        uint64_t int64 = xpc_dictionary_get_uint64(a2, "VideoCodecType");
        int v86 = xpc_dictionary_get_int64(a2, "Width");
        int v87 = xpc_dictionary_get_int64(a2, "Height");
        *(void *)&long long __str = 0;
        if (v86 <= 0) {
          int32_t v88 = 100;
        }
        else {
          int32_t v88 = v86;
        }
        if (v87 <= 0) {
          int32_t v89 = 100;
        }
        else {
          int32_t v89 = v87;
        }
        OSStatus v90 = VTCompressionSessionCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v88, v89, uint64, 0, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], (VTCompressionOutputCallback)fs_dummyEncodedFrameCallback, 0, (VTCompressionSessionRef *)&__str);
        if (!v90) {
          OSStatus v90 = VTSessionCopySupportedPropertyDictionary((VTSessionRef)__str, value);
        }
        int CacheFileSize = v90;
        VTCompressionSessionInvalidate((VTCompressionSessionRef)__str);
        if ((void)__str) {
          CFRelease((CFTypeRef)__str);
        }
        if (CacheFileSize)
        {
LABEL_233:
          if (*(void *)&cf[0]) {
            CFRelease(*(CFTypeRef *)&cf[0]);
          }
          CFDictionaryRef v36 = value[0];
          if (!value[0]) {
            goto LABEL_237;
          }
          goto LABEL_236;
        }
        int v37 = FigXPCMessageSetCFDictionary();
      }
    }
    else
    {
      if (v120 == 1400005474)
      {
        *(void *)&long long __str = 0;
        *(void *)&cf[0] = 0;
        int v9 = FigXPCMessageCopyCFString();
        if (v9) {
          goto LABEL_196;
        }
        if (!(void)__str || (CFTypeID v70 = CFGetTypeID((CFTypeRef)__str), v70 == CFStringGetTypeID()))
        {
          int v9 = FigXPCMessageCopyCFString();
          if (v9) {
            goto LABEL_196;
          }
          if (*(void *)&cf[0])
          {
            CFTypeID v71 = CFGetTypeID(*(CFTypeRef *)&cf[0]);
            if (v71 == CFStringGetTypeID())
            {
              int64_t v72 = xpc_dictionary_get_int64(a2, "DesiredByteSize");
              int v9 = FigShared_ReserveDiskCacheBacking((const __CFString *)__str, *(const void **)&cf[0], v72);
              goto LABEL_196;
            }
          }
        }
        goto LABEL_258;
      }
      if (v120 != 1400009836) {
        goto LABEL_237;
      }
      *(void *)&cf[0] = 0;
      value[0] = 0;
      long long __str = 0uLL;
      int v37 = FigXPCMessageCopyCFString();
      if (!v37)
      {
        FigIsItOKToLogURLs();
        int v37 = ObtainSinfInfoFromMedia(*(CFStringRef *)&cf[0], (uint64_t)value);
        if (!v37)
        {
          int CacheFileSize = PPGetRentalInfoFromSinfInfo(value[0], (uint64_t)&__str);
          if (!CacheFileSize)
          {
            xpc_dictionary_set_uint64(a3, "RentalStartTime", __str);
            xpc_dictionary_set_uint64(a3, "RentalDuration", DWORD1(__str));
            xpc_dictionary_set_uint64(a3, "PlaybackStartTime", DWORD2(__str));
            xpc_dictionary_set_uint64(a3, "PlaybackDuration", HIDWORD(__str));
          }
          goto LABEL_233;
        }
      }
    }
    int CacheFileSize = v37;
    goto LABEL_233;
  }
  if (v107 != 1668441400)
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    int v25 = FigXPCServerLookupAndRetainAssociatedObject();
    *((_DWORD *)v109 + 6) = v25;
    if (v25) {
      goto LABEL_245;
    }
    BOOL v26 = FigXPCPlaybackCoordinatorServerHandlesMessagesForObject((const void *)v104[3]);
    uint64_t v27 = (const void *)v104[3];
    if (v26)
    {
      int v28 = FigXPCPlaybackCoordinatorServerHandleMessage(v27);
LABEL_244:
      *((_DWORD *)v109 + 6) = v28;
      goto LABEL_245;
    }
    unsigned int v38 = FigXPCImageQueueGaugeServerHandlesMessagesForObject(v27);
    CFTypeID v39 = (const void *)v104[3];
    if (v38)
    {
      int v28 = FigXPCImageQueueGaugeServerHandleMessage(v39);
      goto LABEL_244;
    }
    if (v39)
    {
      CFTypeID v55 = CFGetTypeID(v39);
      if (v55 == FigPlayerGetTypeID())
      {
        uint64_t v56 = v102;
        uint64_t v57 = (NSObject **)(v102 + 24);
        goto LABEL_241;
      }
      long long v91 = (const void *)v104[3];
      if (v91)
      {
        CFTypeID v92 = CFGetTypeID(v91);
        if (v92 == FigPlaybackItemGetTypeID())
        {
          uint64_t v56 = v102;
          uint64_t v57 = (NSObject **)(v102 + 56);
LABEL_241:
          CFIndex v93 = *v57;
          if (*v57)
          {
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 0x40000000;
            block[2] = __HandlePlayerServerMessage_block_invoke;
            block[3] = &unk_1E57A0078;
            int v101 = v107;
            block[4] = &v108;
            void block[5] = &v103;
            void block[6] = v56;
            void block[7] = a1;
            block[8] = a2;
            void block[9] = a3;
            dispatch_sync(v93, block);
            goto LABEL_245;
          }
        }
      }
    }
LABEL_243:
    int v28 = FigSignalErrorAt();
    goto LABEL_244;
  }
  CFTypeRef v117 = 0;
  uint64_t v118 = 0;
  memset(&v116, 0, sizeof(v116));
  CFStringRef theString = 0;
  CFDictionaryRef theDict = 0;
  CFTypeRef v113 = 0;
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long __str = 0u;
  memset(cf, 0, sizeof(cf));
  uint64_t v12 = malloc_type_calloc(1uLL, 0x68uLL, 0x10600403C6B92DCuLL);
  if (!v12)
  {
    int v97 = FigSignalErrorAt();
    if (v97)
    {
      int v21 = v97;
      uint64_t v12 = 0;
      CFDictionaryRef v22 = 0;
      goto LABEL_81;
    }
  }
  FigXPCMessageCopyCFDictionary();
  v12[80] = 0;
  if (theDict && CFDictionaryGetValueIfPresent(theDict, @"LoggingIdentifier", (const void **)&theString)) {
    CFStringGetCString(theString, v12 + 80, 10, 0x600u);
  }
  snprintf((char *)&__str, 0x50uLL, "com.apple.coremedia.playerserver.invalidation.%s", v12 + 80);
  if (serverXPCPlayer_getSharedInvalidationQueue_onceToken != -1) {
    dispatch_once(&serverXPCPlayer_getSharedInvalidationQueue_onceToken, &__block_literal_global_50);
  }
  dispatch_queue_t v13 = dispatch_queue_create_with_target_V2((const char *)&__str, 0, (dispatch_queue_t)serverXPCPlayer_getSharedInvalidationQueue_sharedInvalidationQueue);
  *((void *)v12 + 2) = v13;
  if (!v13
    || (snprintf((char *)&__str, 0x50uLL, "com.apple.coremedia.playerserver.asynccontrol.%s", v12 + 80),
        uint64_t TargetingWorkloopWithPriority = FigDispatchQueueCreateTargetingWorkloopWithPriority(),
        (*((void *)v12 + 3) = TargetingWorkloopWithPriority) == 0))
  {
    CFDictionaryRef v22 = 0;
    goto LABEL_251;
  }
  xpc_object_t xdict = a3;
  int v99 = xpc_dictionary_get_uint64(a2, "EngineTopology");
  xpc_dictionary_get_BOOL(a2, "ClientSDKVersion2015AndLater");
  xpc_connection_get_audit_token();
  FigXPCMessageCopyCFString();
  audit_token_t bytes = v116;
  CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MutableCFArrayRef Copy = FigCFDictionaryCreateMutableCopy();
  CFTypeRef v120 = 0;
  if (MutableCopy)
  {
    CFTypeID v17 = (__CFDictionary *)MutableCopy;
    FigCFDictionarySetBoolean();
    CFDataRef v18 = CFDataCreate(v15, (const UInt8 *)&bytes, 32);
    if (!v18)
    {
      int v21 = FigSignalErrorAt();
      SecTaskRef v20 = v17;
      CFTypeID v17 = 0;
      goto LABEL_35;
    }
    CFDataRef v19 = v18;
    CFDictionarySetValue(v17, @"ClientAuditToken", v18);
    *(audit_token_t *)CFTypeRef value = bytes;
    FigServer_GetClientPIDFromAuditToken();
    FigCFDictionarySetInt32();
    FigCFDictionarySetValue();
    *(audit_token_t *)CFTypeRef value = bytes;
    SecTaskRef v20 = SecTaskCreateWithAuditToken(v15, (audit_token_t *)value);
    if (v20)
    {
      CFDictionarySetValue(v17, @"ClientSecTask", v20);
      FigCFDictionarySetBoolean();
      if (VTIsSecTaskEntitledForVP9Decode()) {
        CFDictionarySetValue(v17, @"AllowAlternateDecoderSelection", (const void *)*MEMORY[0x1E4F1CFD0]);
      }
      int v21 = FigDispatchQueueHolderCreateWithDispatchQueue();
      if (!v21)
      {
        CFDictionarySetValue(v17, @"AsynchronousControlQueueHolder", v120);
        CFRelease(v19);
        goto LABEL_35;
      }
    }
    else
    {
      int v21 = FigSignalErrorAt();
    }
    CFRelease(v17);
    CFRelease(v19);
    CFTypeID v17 = 0;
    CFDictionaryRef v22 = 0;
    if (!v20)
    {
LABEL_36:
      if (v120) {
        CFRelease(v120);
      }
      if (v21) {
        goto LABEL_81;
      }
      goto LABEL_39;
    }
LABEL_35:
    CFRelease(v20);
    CFDictionaryRef v22 = v17;
    goto LABEL_36;
  }
  int v21 = FigSignalErrorAt();
  CFDictionaryRef v22 = 0;
  if (v21) {
    goto LABEL_81;
  }
LABEL_39:
  int v23 = FigSharedPlayerCreateWithOptions(v15, v99 | 0x810u, v22, &v117);
  if (v23) {
    goto LABEL_252;
  }
  CFTypeRef v24 = v117;
  if (v117) {
    CFTypeRef v24 = CFRetain(v117);
  }
  *((void *)v12 + 1) = v24;
  int v23 = FigXPCServerAssociateObjectWithConnection();
  if (v23) {
    goto LABEL_252;
  }
  *((void *)v12 + 7) = FigSimpleMutexCreate();
  *((void *)v12 + 8) = CFDictionaryCreateMutable(v15, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v40 = v118;
  *(void *)uint64_t v12 = v118;
  xpc_dictionary_set_uint64(xdict, (const char *)*MEMORY[0x1E4F20280], v40);
  if (_os_feature_enabled_impl())
  {
    snprintf((char *)cf, 0x50uLL, "Create %s", v12 + 80);
    xpc_connection_get_pid(a1);
    uint64_t v41 = FigOSTransactionCreateWithProcessName();
    *((void *)v12 + 12) = v41;
    if (!v41)
    {
LABEL_251:
      int v23 = FigSignalErrorAt();
LABEL_252:
      int v21 = v23;
      goto LABEL_81;
    }
  }
  uint64_t v12 = 0;
  int v21 = 0;
LABEL_81:
  DisposeServedPlayerState(v12);
  if (v117) {
    CFRelease(v117);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  if (v113) {
    CFRelease(v113);
  }
  *((_DWORD *)v109 + 6) = v21;
LABEL_245:
  uint64_t v94 = (const void *)v104[3];
  if (v94) {
    CFRelease(v94);
  }
  uint64_t v95 = *((unsigned int *)v109 + 6);
  _Block_object_dispose(&v103, 8);
  _Block_object_dispose(&v108, 8);
  return v95;
}

uint64_t HandlePlayerServerNoReplyMessage(uint64_t a1, void *a2)
{
  int v9 = 0;
  v7[5] = 0;
  CFTypeRef cf = 0;
  OpCFIndex Code = FigXPCMessageGetOpCode();
  if (OpCode) {
    goto LABEL_7;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  OpCFIndex Code = FigXPCServerLookupAndRetainAssociatedObject();
  if (OpCode) {
    goto LABEL_7;
  }
  if (FigXPCPlaybackCoordinatorServerHandlesMessagesForObject(cf))
  {
    OpCFIndex Code = FigXPCPlaybackCoordinatorServerHandleNoReplyMessage(cf);
LABEL_7:
    uint64_t v4 = OpCode;
    goto LABEL_8;
  }
  if (FigXPCImageQueueGaugeServerHandlesMessagesForObject(cf))
  {
    OpCFIndex Code = FigXPCImageQueueGaugeServerHandleNoReplyMessage(cf);
    goto LABEL_7;
  }
  uint64_t v4 = 4294951138;
LABEL_8:
  if (serverXPCPlayer_getSharedInvalidationQueue_onceToken != -1) {
    dispatch_once(&serverXPCPlayer_getSharedInvalidationQueue_onceToken, &__block_literal_global_50);
  }
  uint64_t v5 = serverXPCPlayer_getSharedInvalidationQueue_sharedInvalidationQueue;
  dispatch_retain((dispatch_object_t)serverXPCPlayer_getSharedInvalidationQueue_sharedInvalidationQueue);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  v7[2] = __HandlePlayerServerNoReplyMessage_block_invoke;
  v7[3] = &__block_descriptor_tmp_143;
  v7[4] = cf;
  dispatch_async(v5, v7);
  dispatch_release(v5);
  return v4;
}

void __HandlePlayerServerMessage_block_invoke(uint64_t a1)
{
  uint64_t v372 = *MEMORY[0x1E4F143B8];
  int v2 = *(_DWORD *)(a1 + 80);
  if (v2 <= 1232303215)
  {
    if (v2 > 1231320433)
    {
      if (v2 <= 1232300899)
      {
        if (v2 <= 1232103782)
        {
          if (v2 == 1231320434)
          {
            uint64_t v102 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
            uint64_t v104 = *(void *)(a1 + 64);
            uint64_t v103 = *(void *)(a1 + 72);
            *(_OWORD *)long long __str = *MEMORY[0x1E4F1F9F8];
            *(void *)&long long v365 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
            if (!v102) {
              goto LABEL_574;
            }
            CFTypeID v105 = CFGetTypeID(v102);
            if (v105 != FigPlaybackItemGetTypeID() || !v104 || !v103) {
              goto LABEL_574;
            }
            uint64_t v106 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v106) {
              uint64_t v107 = v106;
            }
            else {
              uint64_t v107 = 0;
            }
            v284 = *(uint64_t (**)(const void *, char *))(v107 + 16);
            if (!v284) {
              goto LABEL_518;
            }
            int CMTime = v284(v102, __str);
            if (CMTime) {
              goto LABEL_479;
            }
            *(_OWORD *)CFTypeRef cf = *(_OWORD *)__str;
            *(void *)&long long v349 = v365;
LABEL_459:
            int CMTime = FigXPCMessageSetCMTime();
            goto LABEL_479;
          }
          if (v2 != 1231515252)
          {
            if (v2 != 1231647079) {
              goto LABEL_349;
            }
            CFTypeID v10 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
            CFTypeID v11 = (uint64_t *)&kFigPlaybackItemProperty_ImageQueueGauge;
LABEL_188:
            int CMTime = serverXPCItem_HandleCopyImageQueueGaugeMessage(v10, *v11, *(_xpc_connection_s **)(a1 + 56), *(void *)(a1 + 64), *(void **)(a1 + 72));
            goto LABEL_479;
          }
          uint64_t v108 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          uint64_t v110 = *(void **)(a1 + 64);
          uint64_t v109 = *(void *)(a1 + 72);
          *(_OWORD *)CFTypeRef cf = *MEMORY[0x1E4F1F9F8];
          *(void *)&long long v349 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          long long v362 = *(_OWORD *)cf;
          uint64_t v363 = v349;
          if (!v108) {
            goto LABEL_574;
          }
          CFTypeID v111 = CFGetTypeID(v108);
          if (v111 != FigPlaybackItemGetTypeID() || !v110 || !v109) {
            goto LABEL_574;
          }
          int CMTime = FigXPCMessageGetCMTime();
          if (!CMTime)
          {
            uint64_t int64 = xpc_dictionary_get_uint64(v110, "ThumbnailFlags");
            *(_OWORD *)CFDictionaryRef theDict = *(_OWORD *)cf;
            uint64_t v361 = v349;
            uint64_t v113 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v113) {
              uint64_t v114 = v113;
            }
            else {
              uint64_t v114 = 0;
            }
            v317 = *(uint64_t (**)(const void *, char *, uint64_t, long long *))(v114 + 80);
            if (!v317) {
              goto LABEL_518;
            }
            *(_OWORD *)long long __str = *(_OWORD *)theDict;
            *(void *)&long long v365 = v361;
            int CMTime = v317(v108, __str, uint64, &v362);
            if (CMTime) {
              goto LABEL_479;
            }
            *(_OWORD *)long long __str = v362;
            *(void *)&long long v365 = v363;
            goto LABEL_459;
          }
LABEL_479:
          int v125 = CMTime;
          goto LABEL_573;
        }
        if (v2 == 1232103783)
        {
          CFTypeID v10 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          CFTypeID v11 = (uint64_t *)&kFigPlaybackItemProperty_PriorImageQueueGauge;
          goto LABEL_188;
        }
        if (v2 != 1232233593)
        {
          if (v2 != 1232298598) {
            goto LABEL_349;
          }
          int64_t v53 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          BOOL v54 = *(void **)(a1 + 64);
          uint64_t v55 = *(void *)(a1 + 72);
          *(void *)long long __str = 0;
          cf[0] = 0;
          *(void *)&long long v362 = 0;
          if (v53)
          {
            CFTypeID v56 = CFGetTypeID(v53);
            if (v56 == FigPlaybackItemGetTypeID() && v54 && v55)
            {
              int v57 = FigXPCServerLookupAndRetainAssociatedObject();
              if (v57) {
                goto LABEL_491;
              }
              if (*((void *)cf[0] + 4))
              {
                uint64_t v58 = xpc_dictionary_get_uint64(v54, "TrackID");
                uint64_t v59 = xpc_dictionary_get_uint64(v54, "ExtractionID");
                uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v60) {
                  uint64_t v61 = v60;
                }
                else {
                  uint64_t v61 = 0;
                }
                v326 = *(uint64_t (**)(const void *, uint64_t, uint64_t, long long *))(v61 + 168);
                if (!v326)
                {
                  int v125 = -12782;
LABEL_493:
                  CFDictionaryRef v327 = *(CFDictionaryRef *)__str;
                  if (!*(void *)__str) {
                    goto LABEL_563;
                  }
                  goto LABEL_562;
                }
                int v57 = v326(v53, v58, v59, &v362);
                if (!v57) {
                  int v57 = FigXPCMessageAddCMSampleBuffer();
                }
LABEL_491:
                int v125 = v57;
                goto LABEL_493;
              }
            }
          }
          int v57 = FigSignalErrorAt();
          goto LABEL_491;
        }
        long long v126 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        uint64_t v128 = *(void *)(a1 + 64);
        uint64_t v127 = *(void **)(a1 + 72);
        *(void *)long long __str = 0;
        LOBYTE(cf[0]) = 0;
        if (!v126) {
          goto LABEL_575;
        }
        CFTypeID v129 = CFGetTypeID(v126);
        if (v129 != FigPlaybackItemGetTypeID() || !v128 || !v127) {
          goto LABEL_575;
        }
        int IDByAssociatingWithClientConnection = FigXPCMessageCopyCFArray();
        if (IDByAssociatingWithClientConnection) {
          goto LABEL_454;
        }
        uint64_t v130 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v130) {
          uint64_t v131 = v130;
        }
        else {
          uint64_t v131 = 0;
        }
        v318 = *(uint64_t (**)(const void *, void, CFTypeRef *))(v131 + 48);
        if (!v318) {
          goto LABEL_464;
        }
        int IDByAssociatingWithClientConnection = v318(v126, *(void *)__str, cf);
        if (IDByAssociatingWithClientConnection) {
          goto LABEL_454;
        }
        xpc_dictionary_set_BOOL(v127, "AlreadyReady", LOBYTE(cf[0]) != 0);
LABEL_543:
        int v125 = 0;
        goto LABEL_544;
      }
      if (v2 > 1232302696)
      {
        switch(v2)
        {
          case 1232302697:
            uint64_t v27 = *(void *)(a1 + 48);
            int v28 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
            uint64_t v132 = *(void **)(a1 + 64);
            int v29 = *(void **)(a1 + 72);
            *(_OWORD *)CFDictionaryRef theDict = *MEMORY[0x1E4F1F9F8];
            uint64_t v361 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
            *(_OWORD *)CFTypeRef value = *(_OWORD *)theDict;
            uint64_t v359 = v361;
            long long v356 = *(_OWORD *)theDict;
            uint64_t v357 = v361;
            if (!v28) {
              goto LABEL_574;
            }
            CFTypeID v133 = CFGetTypeID(v28);
            if (v133 != FigPlaybackItemGetTypeID() || !v132 || !v29) {
              goto LABEL_574;
            }
            int CMTime = FigXPCMessageGetCMTime();
            if (CMTime) {
              goto LABEL_479;
            }
            uint64_t v134 = xpc_dictionary_get_uint64(v132, "TimeFlags");
            int CMTime = FigXPCMessageGetCMTime();
            if (CMTime) {
              goto LABEL_479;
            }
            int CMTime = FigXPCMessageGetCMTime();
            if (CMTime) {
              goto LABEL_479;
            }
            int64_t int64 = xpc_dictionary_get_int64(v132, "SeekID");
            *(_OWORD *)v354 = *(_OWORD *)theDict;
            uint64_t v355 = v361;
            long long v352 = *(_OWORD *)value;
            uint64_t v353 = v359;
            long long v350 = v356;
            uint64_t v351 = v357;
            uint64_t v136 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v136) {
              uint64_t v137 = v136;
            }
            else {
              uint64_t v137 = 0;
            }
            v337 = *(uint64_t (**)(const void *, char *, uint64_t, CFTypeRef *, long long *, int64_t))(v137 + 144);
            if (!v337) {
              goto LABEL_518;
            }
            *(_OWORD *)long long __str = *(_OWORD *)v354;
            *(void *)&long long v365 = v355;
            *(_OWORD *)CFTypeRef cf = v352;
            *(void *)&long long v349 = v353;
            long long v362 = v350;
            uint64_t v363 = v351;
            int CMTime = v337(v28, __str, v134, cf, &v362, int64);
            if (CMTime) {
              goto LABEL_479;
            }
            break;
          case 1232303213:
            uint64_t v27 = *(void *)(a1 + 48);
            int v28 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
            CFTypeRef v138 = *(void **)(a1 + 64);
            int v29 = *(void **)(a1 + 72);
            *(_OWORD *)CFTypeRef cf = *MEMORY[0x1E4F1F9F8];
            *(void *)&long long v349 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
            if (!v28) {
              goto LABEL_574;
            }
            CFTypeID v139 = CFGetTypeID(v28);
            if (v139 != FigPlaybackItemGetTypeID() || !v138 || !v29) {
              goto LABEL_574;
            }
            int CMTime = FigXPCMessageGetCMTime();
            if (CMTime) {
              goto LABEL_479;
            }
            uint64_t v140 = xpc_dictionary_get_uint64(v138, "TimeFlags");
            long long v362 = *(_OWORD *)cf;
            uint64_t v363 = v349;
            uint64_t v141 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v141) {
              uint64_t v142 = v141;
            }
            else {
              uint64_t v142 = 0;
            }
            v319 = *(uint64_t (**)(const void *, char *, uint64_t))(v142 + 24);
            if (!v319) {
              goto LABEL_518;
            }
            *(_OWORD *)long long __str = v362;
            *(void *)&long long v365 = v363;
            int CMTime = v319(v28, __str, v140);
            if (CMTime) {
              goto LABEL_479;
            }
            break;
          case 1232303215:
            uint64_t v62 = *(void *)(a1 + 48);
            int v63 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
            uint64_t v65 = *(void *)(a1 + 64);
            int v64 = *(void **)(a1 + 72);
            *(_OWORD *)CFTypeRef cf = *MEMORY[0x1E4F1F9F8];
            *(void *)&long long v349 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
            theDict[0] = 0;
            if (v63 && (CFTypeID v66 = CFGetTypeID(v63), v66 == FigPlaybackItemGetTypeID()) && v65 && v64)
            {
              int v67 = FigXPCMessageGetCMTime();
              if (!v67)
              {
                int v67 = FigXPCMessageCopyCFDictionary();
                if (!v67)
                {
                  long long v362 = *(_OWORD *)cf;
                  uint64_t v363 = v349;
                  uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v68) {
                    uint64_t v69 = v68;
                  }
                  else {
                    uint64_t v69 = 0;
                  }
                  v328 = *(uint64_t (**)(const void *, char *, CFDictionaryRef))(v69 + 176);
                  if (!v328)
                  {
                    int v125 = -12782;
                    goto LABEL_571;
                  }
                  *(_OWORD *)long long __str = v362;
                  *(void *)&long long v365 = v363;
                  int v67 = v328(v63, __str, theDict[0]);
                  if (!v67)
                  {
                    serverXPCItem_addTimeSyncUpdateToMessage(v63, v62, v64);
                    int v125 = 0;
                    goto LABEL_571;
                  }
                }
              }
            }
            else
            {
              int v67 = FigSignalErrorAt();
            }
            int v125 = v67;
LABEL_571:
            CFDictionaryRef v231 = theDict[0];
            if (!theDict[0]) {
              goto LABEL_573;
            }
            goto LABEL_572;
          default:
            goto LABEL_349;
        }
      }
      else
      {
        if (v2 == 1232300900)
        {
          uint64_t v115 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          audit_token_t v116 = *(void **)(a1 + 64);
          *(void *)long long __str = 0;
          if (!v115) {
            goto LABEL_574;
          }
          CFTypeID v117 = CFGetTypeID(v115);
          if (v117 != FigPlaybackItemGetTypeID() || !v116) {
            goto LABEL_574;
          }
          int CMTime = FigXPCMessageCopyCFDate();
          if (!CMTime)
          {
            int64_t v118 = xpc_dictionary_get_int64(v116, "SeekID");
            uint64_t v119 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v119) {
              uint64_t v120 = v119;
            }
            else {
              uint64_t v120 = 0;
            }
            v285 = *(uint64_t (**)(const void *, void, int64_t))(v120 + 128);
            if (v285)
            {
              int CMTime = v285(v115, *(void *)__str, v118);
              goto LABEL_479;
            }
            goto LABEL_518;
          }
          goto LABEL_479;
        }
        if (v2 == 1232302195)
        {
          int v121 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          uint64_t v123 = *(void *)(a1 + 64);
          uint64_t v122 = *(void *)(a1 + 72);
          LOBYTE(v356) = 0;
          *(void *)long long __str = 0;
          cf[0] = 0;
          *(void *)&long long v362 = 0;
          theDict[0] = 0;
          value[0] = 0;
          if (v121)
          {
            CFTypeID v124 = CFGetTypeID(v121);
            if (v124 == FigPlaybackItemGetTypeID())
            {
              if (v123)
              {
                if (v122)
                {
                  int v85 = FigXPCMessageCopyCFDictionary();
                  if (v85) {
                    goto LABEL_186;
                  }
                }
              }
            }
          }
          goto LABEL_576;
        }
        if (v2 != 1232302695) {
          goto LABEL_349;
        }
        uint64_t v27 = *(void *)(a1 + 48);
        int v28 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        int v30 = *(void **)(a1 + 64);
        int v29 = *(void **)(a1 + 72);
        *(_OWORD *)CFDictionaryRef theDict = *MEMORY[0x1E4F1F9F8];
        uint64_t v361 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        *(_OWORD *)CFTypeRef value = *(_OWORD *)theDict;
        uint64_t v359 = v361;
        long long v356 = *(_OWORD *)theDict;
        uint64_t v357 = v361;
        if (!v28) {
          goto LABEL_574;
        }
        CFTypeID v31 = CFGetTypeID(v28);
        if (v31 != FigPlaybackItemGetTypeID() || !v30 || !v29) {
          goto LABEL_574;
        }
        int CMTime = FigXPCMessageGetCMTime();
        if (CMTime) {
          goto LABEL_479;
        }
        uint64_t v32 = xpc_dictionary_get_uint64(v30, "TimeFlags");
        int CMTime = FigXPCMessageGetCMTime();
        if (CMTime) {
          goto LABEL_479;
        }
        int CMTime = FigXPCMessageGetCMTime();
        if (CMTime) {
          goto LABEL_479;
        }
        *(_OWORD *)v354 = *(_OWORD *)theDict;
        uint64_t v355 = v361;
        long long v352 = *(_OWORD *)value;
        uint64_t v353 = v359;
        long long v350 = v356;
        uint64_t v351 = v357;
        uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v33) {
          uint64_t v34 = v33;
        }
        else {
          uint64_t v34 = 0;
        }
        v338 = *(uint64_t (**)(const void *, char *, uint64_t, CFTypeRef *, long long *))(v34 + 104);
        if (!v338) {
          goto LABEL_518;
        }
        *(_OWORD *)long long __str = *(_OWORD *)v354;
        *(void *)&long long v365 = v355;
        *(_OWORD *)CFTypeRef cf = v352;
        *(void *)&long long v349 = v353;
        long long v362 = v350;
        uint64_t v363 = v351;
        int CMTime = v338(v28, __str, v32, cf, &v362);
        if (CMTime) {
          goto LABEL_479;
        }
      }
      serverXPCItem_addTimeSyncUpdateToMessage(v28, v27, v29);
LABEL_517:
      int v125 = 0;
      goto LABEL_573;
    }
    if (v2 > 1231250284)
    {
      if (v2 <= 1231253604)
      {
        if (v2 != 1231250285)
        {
          if (v2 != 1231250804)
          {
            if (v2 != 1231251058) {
              goto LABEL_349;
            }
            SecTaskRef v20 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
            int v21 = *(_xpc_connection_s **)(a1 + 56);
            uint64_t v22 = *(void *)(a1 + 64);
            int v23 = *(void **)(a1 + 72);
            *(void *)long long __str = 0;
            cf[0] = 0;
            if (!v20) {
              goto LABEL_575;
            }
            CFTypeID v24 = CFGetTypeID(v20);
            if (v24 != FigPlaybackItemGetTypeID() || !v22 || !v23) {
              goto LABEL_575;
            }
            uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v25) {
              uint64_t v26 = v25;
            }
            else {
              uint64_t v26 = 0;
            }
            v297 = *(uint64_t (**)(const void *, char *))(v26 + 120);
            if (!v297) {
              goto LABEL_464;
            }
            int IDByAssociatingWithClientConnection = v297(v20, __str);
            if (IDByAssociatingWithClientConnection) {
              goto LABEL_454;
            }
            if (FigRemote_ShouldConnectToMediaparserdForFileParsing()
              && FigFormatReaderIsRemote(*(BOOL *)__str))
            {
              uint64_t v298 = *(void *)__str;
              pid_t pid = xpc_connection_get_pid(v21);
              int v125 = FigFormatReaderXPCRemoteObtainObjectIDForOtherProcess(v298, pid, (uint64_t *)cf);
            }
            else
            {
              int IDByAssociatingWithClientConnection = FigXPCFormatReaderServerAssociateCopiedNeighborFormatReader(v21, *(uint64_t *)__str);
              if (IDByAssociatingWithClientConnection) {
                goto LABEL_454;
              }
              int v125 = 0;
            }
            xpc_dictionary_set_uint64(v23, "FormatReaderObjectID", (uint64_t)cf[0]);
            goto LABEL_544;
          }
          unsigned __int8 v159 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          uint64_t v160 = *(void *)(a1 + 64);
          uint64_t v148 = *(void **)(a1 + 72);
          *(void *)long long __str = 0;
          cf[0] = 0;
          if (!v159) {
            goto LABEL_575;
          }
          CFTypeID v161 = CFGetTypeID(v159);
          if (v161 != FigPlaybackItemGetTypeID() || !v160 || !v148) {
            goto LABEL_575;
          }
          uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v159);
          uint64_t v163 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v163) {
            uint64_t v164 = v163;
          }
          else {
            uint64_t v164 = 0;
          }
          v295 = *(uint64_t (**)(uint64_t, __CFString *, void, char *))(v164 + 48);
          if (!v295) {
            goto LABEL_464;
          }
          int IDByAssociatingWithClientConnection = v295(FigBaseObject, @"MetricEventTimeline", *MEMORY[0x1E4F1CF80], __str);
          if (IDByAssociatingWithClientConnection) {
            goto LABEL_454;
          }
          if (*(void *)__str)
          {
            int IDByAssociatingWithClientConnection = FigMetricEventTimelineGetIDByAssociatingWithClientConnection();
            if (IDByAssociatingWithClientConnection) {
              goto LABEL_454;
            }
            CFTypeRef v287 = cf[0];
          }
          else
          {
            CFTypeRef v287 = 0;
          }
          v288 = (const char *)*MEMORY[0x1E4F20280];
          goto LABEL_542;
        }
        double v170 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        uint64_t v172 = *(void *)(a1 + 64);
        uint64_t v171 = *(void *)(a1 + 72);
        *(void *)long long __str = 0;
        cf[0] = 0;
        *(void *)&long long v362 = 0;
        if (v170 && (CFTypeID v173 = CFGetTypeID(v170), v173 == FigPlaybackItemGetTypeID()) && v172 && v171)
        {
          int CommonMetadataBinaryPListData = FigXPCMessageCopyCFArray();
          if (!CommonMetadataBinaryPListData)
          {
            uint64_t v175 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v175) {
              uint64_t v176 = v175;
            }
            else {
              uint64_t v176 = 0;
            }
            v320 = *(uint64_t (**)(const void *, void, void, CFTypeRef *))(v176 + 64);
            if (!v320)
            {
              int v125 = -12782;
LABEL_559:
              if (*(void *)__str) {
                CFRelease(*(CFTypeRef *)__str);
              }
LABEL_561:
              CFDictionaryRef v327 = (CFDictionaryRef)cf[0];
              if (!cf[0]) {
                goto LABEL_563;
              }
              goto LABEL_562;
            }
            CFAllocatorRef v321 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            int CommonMetadataBinaryPListData = v320(v170, *(void *)__str, *MEMORY[0x1E4F1CF80], cf);
            if (!CommonMetadataBinaryPListData)
            {
              int CommonMetadataBinaryPListData = FigRemote_CreateCommonMetadataBinaryPListData((const __CFDictionary *)cf[0], v321, (uint64_t)&v362);
              if (!CommonMetadataBinaryPListData) {
                int CommonMetadataBinaryPListData = FigXPCMessageSetCFData();
              }
            }
          }
        }
        else
        {
          int CommonMetadataBinaryPListData = FigSignalErrorAt();
        }
        int v125 = CommonMetadataBinaryPListData;
        goto LABEL_559;
      }
      if (v2 != 1231253605)
      {
        if (v2 == 1231254640)
        {
          CMBufferRef v165 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          uint64_t v167 = *(void **)(a1 + 64);
          uint64_t v166 = *(void *)(a1 + 72);
          *(void *)long long __str = 0;
          cf[0] = 0;
          if (v165)
          {
            CFTypeID v168 = CFGetTypeID(v165);
            if (v168 == FigPlaybackItemGetTypeID())
            {
              if (v167)
              {
                if (v166)
                {
                  xpc_dictionary_get_uint64(v167, "TrackID");
                  int v169 = FigXPCMessageCopyCFString();
                  if (v169) {
                    goto LABEL_539;
                  }
                }
              }
            }
          }
          goto LABEL_595;
        }
        if (v2 != 1231317357) {
          goto LABEL_349;
        }
        CFTypeID v70 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        uint64_t v72 = *(void *)(a1 + 64);
        CFTypeID v71 = *(void **)(a1 + 72);
        *(_DWORD *)long long __str = 0;
        LODWORD(cf[0]) = 0;
        if (!v70) {
          goto LABEL_574;
        }
        CFTypeID v73 = CFGetTypeID(v70);
        if (v73 != FigPlaybackItemGetTypeID() || !v72 || !v71) {
          goto LABEL_574;
        }
        uint64_t v74 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v74) {
          uint64_t v75 = v74;
        }
        else {
          uint64_t v75 = 0;
        }
        v300 = *(uint64_t (**)(const void *, char *, CFTypeRef *))(v75 + 8);
        if (!v300) {
          goto LABEL_518;
        }
        int CMTime = v300(v70, __str, cf);
        if (CMTime) {
          goto LABEL_479;
        }
        xpc_dictionary_set_double(v71, "Width", *(float *)__str);
        xpc_dictionary_set_double(v71, "Height", *(float *)cf);
        goto LABEL_517;
      }
      uint64_t v177 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      v178 = *(_xpc_connection_s **)(a1 + 56);
      uint64_t v179 = *(void *)(a1 + 64);
      uint64_t v148 = *(void **)(a1 + 72);
      *(void *)long long __str = 0;
      cf[0] = 0;
      if (!v177) {
        goto LABEL_575;
      }
      CFTypeID v180 = CFGetTypeID(v177);
      if (v180 != FigPlaybackItemGetTypeID() || !v179 || !v148) {
        goto LABEL_575;
      }
      uint64_t v181 = FigPlaybackItemGetFigBaseObject(v177);
      uint64_t v182 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v182) {
        uint64_t v183 = v182;
      }
      else {
        uint64_t v183 = 0;
      }
      v296 = *(uint64_t (**)(uint64_t, __CFString *, void, char *))(v183 + 48);
      if (!v296) {
        goto LABEL_464;
      }
      int IDByAssociatingWithClientConnection = v296(v181, @"CPEProtector", *MEMORY[0x1E4F1CF80], __str);
      if (IDByAssociatingWithClientConnection) {
        goto LABEL_454;
      }
      int IDByAssociatingWithClientConnection = FigXPCCPEProtectorServerAssociateCopiedNeighborCPEProtector(v178);
      if (IDByAssociatingWithClientConnection) {
        goto LABEL_454;
      }
      v288 = (const char *)*MEMORY[0x1E4F20280];
      CFTypeRef v287 = cf[0];
LABEL_542:
      xpc_dictionary_set_uint64(v148, v288, (uint64_t)v287);
      goto LABEL_543;
    }
    if (v2 > 1230268003)
    {
      if (v2 == 1230268004)
      {
        CFNumberRef v152 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        CFArrayRef v154 = *(void **)(a1 + 64);
        uint64_t v153 = *(void *)(a1 + 72);
        *(void *)long long __str = 0;
        if (!v152) {
          goto LABEL_574;
        }
        CFTypeID v155 = CFGetTypeID(v152);
        if (v155 != FigPlaybackItemGetTypeID() || !v154 || !v153) {
          goto LABEL_574;
        }
        uint64_t v156 = xpc_dictionary_get_uint64(v154, "TrackID");
        uint64_t v157 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v157) {
          uint64_t v158 = v157;
        }
        else {
          uint64_t v158 = 0;
        }
        v289 = *(uint64_t (**)(const void *, uint64_t, __CFString *, void, char *))(v158 + 40);
        if (!v289) {
          goto LABEL_518;
        }
        int v290 = v289(v152, v156, @"FormatDescriptionArray", *MEMORY[0x1E4F1CF80], __str);
        CFDictionaryRef v291 = *(const __CFDictionary **)__str;
        if (v290)
        {
          int v125 = v290;
          if (!*(void *)__str) {
            goto LABEL_573;
          }
        }
        else
        {
          int v125 = FigXPCMessageSetFormatDescriptionArray();
          CFDictionaryRef v291 = *(const __CFDictionary **)__str;
          if (!*(void *)__str) {
            goto LABEL_573;
          }
        }
        CFDictionaryRef v231 = v291;
        goto LABEL_572;
      }
      if (v2 == 1231249779)
      {
        uint64_t v145 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        unsigned int v146 = *(_xpc_connection_s **)(a1 + 56);
        uint64_t v147 = *(void *)(a1 + 64);
        uint64_t v148 = *(void **)(a1 + 72);
        *(void *)long long __str = 0;
        cf[0] = 0;
        if (!v145) {
          goto LABEL_575;
        }
        CFTypeID v149 = CFGetTypeID(v145);
        if (v149 != FigPlaybackItemGetTypeID() || !v147 || !v148) {
          goto LABEL_575;
        }
        uint64_t v150 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v150) {
          uint64_t v151 = v150;
        }
        else {
          uint64_t v151 = 0;
        }
        v286 = *(uint64_t (**)(const void *, char *))(v151 + 152);
        if (!v286) {
          goto LABEL_464;
        }
        int IDByAssociatingWithClientConnection = v286(v145, __str);
        if (IDByAssociatingWithClientConnection) {
          goto LABEL_454;
        }
        int IDByAssociatingWithClientConnection = FigXPCAssetServerAssociateCopiedNeighborAsset(v146);
        if (IDByAssociatingWithClientConnection) {
          goto LABEL_454;
        }
        CFTypeRef v287 = cf[0];
        v288 = "AssetObjectID";
        goto LABEL_542;
      }
      if (v2 != 1231250281) {
        goto LABEL_349;
      }
      CFTypeID v45 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      CFTypeID v47 = *(void **)(a1 + 64);
      uint64_t v46 = *(void *)(a1 + 72);
      *(void *)long long __str = 0;
      cf[0] = 0;
      if (v45 && (CFTypeID v48 = CFGetTypeID(v45), v48 == FigPlaybackItemGetTypeID()) && v47 && v46)
      {
        int64_t v49 = xpc_dictionary_get_int64(v47, "ChapterImageID");
        if (xpc_dictionary_get_BOOL(v47, "WantChapterImageFormatDesc")) {
          CFTypeID v50 = cf;
        }
        else {
          CFTypeID v50 = 0;
        }
        uint64_t v51 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v51) {
          uint64_t v52 = v51;
        }
        else {
          uint64_t v52 = 0;
        }
        v292 = *(uint64_t (**)(const void *, int64_t, char *, CFTypeRef *))(v52 + 72);
        if (!v292)
        {
          int v125 = -12782;
          goto LABEL_388;
        }
        int v293 = v292(v45, v49, __str, v50);
        if (!v293)
        {
          int v125 = FigXPCMessageSetCFData();
          CFTypeRef v294 = cf[0];
          if (v125 || !cf[0])
          {
LABEL_389:
            if (v294) {
              CFRelease(v294);
            }
            goto LABEL_544;
          }
          int v293 = FigXPCMessageSetFormatDescription();
        }
      }
      else
      {
        int v293 = FigSignalErrorAt();
      }
      int v125 = v293;
LABEL_388:
      CFTypeRef v294 = cf[0];
      goto LABEL_389;
    }
    if (v2 == 778268793)
    {
      uint64_t v143 = *(void *)(a1 + 64);
      uint64_t v144 = *(void *)(a1 + 72);
      *(void *)&long long v362 = 0;
      theDict[0] = 0;
      if (v143)
      {
        if (v144)
        {
          int v101 = FigXPCMessageCopyCFString();
          if (v101) {
            goto LABEL_569;
          }
        }
      }
    }
    else
    {
      if (v2 != 779314548) {
        goto LABEL_349;
      }
      uint64_t v100 = *(void *)(a1 + 64);
      *(void *)&long long v362 = 0;
      theDict[0] = 0;
      if (v100)
      {
        int v101 = FigXPCMessageCopyCFString();
        if (v101) {
          goto LABEL_569;
        }
      }
    }
    int v101 = FigSignalErrorAt();
LABEL_569:
    int v125 = v101;
    goto LABEL_571;
  }
  if (v2 > 1349676907)
  {
    if (v2 <= 1349743205)
    {
      if (v2 <= 1349739370)
      {
        if (v2 == 1349676908)
        {
          uint64_t v235 = *(void *)(*(void *)(a1 + 40) + 8);
          uint64_t v236 = *(void *)(v235 + 24);
          if (v236)
          {
            v237 = *(void **)(a1 + 64);
            CFTypeID v238 = CFGetTypeID(*(CFTypeRef *)(v235 + 24));
            if (v238 == FigPlayerGetTypeID())
            {
              if (v237)
              {
                double v239 = xpc_dictionary_get_double(v237, "Rate");
                int64_t v240 = xpc_dictionary_get_int64(v237, "PrerollID");
                uint64_t v241 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v241) {
                  uint64_t v242 = v241;
                }
                else {
                  uint64_t v242 = 0;
                }
                v278 = *(uint64_t (**)(uint64_t, int64_t, float))(v242 + 64);
                if (v278)
                {
                  float v279 = v239;
                  int CMTime = v278(v236, v240, v279);
                  goto LABEL_479;
                }
                goto LABEL_518;
              }
            }
          }
          goto LABEL_574;
        }
        if (v2 != 1349677940)
        {
          if (v2 == 1349739361)
          {
            uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
            uint64_t v13 = *(void *)(v12 + 24);
            if (!v13) {
              goto LABEL_574;
            }
            uint64_t v14 = *(void **)(a1 + 64);
            CFTypeID v15 = CFGetTypeID(*(CFTypeRef *)(v12 + 24));
            if (v15 != FigPlayerGetTypeID() || !v14) {
              goto LABEL_574;
            }
            int64_t v16 = xpc_dictionary_get_BOOL(v14, "Active");
            uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 24);
            if (!v17) {
              goto LABEL_518;
            }
            CFDataRef v18 = *(uint64_t (**)(uint64_t, int64_t))(v17 + 24);
            if (!v18) {
              goto LABEL_518;
            }
LABEL_32:
            int CMTime = v18(v13, v16);
            goto LABEL_479;
          }
LABEL_349:
          int v125 = -16158;
          goto LABEL_573;
        }
        uint64_t v190 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v191 = *(void *)(v190 + 24);
        if (!v191) {
          goto LABEL_574;
        }
        uint64_t v192 = *(void *)(a1 + 48);
        CFStringRef v193 = *(void **)(a1 + 64);
        CFTypeID v194 = CFGetTypeID(*(CFTypeRef *)(v190 + 24));
        if (v194 != FigPlayerGetTypeID() || !v193) {
          goto LABEL_574;
        }
        xpc_dictionary_get_int64(v193, "ExternalStartupTaskID");
        SInt64 = (const void *)FigCFNumberCreateSInt64();
        MEMORY[0x19970E910](*(void *)(v192 + 56));
        CFStringRef v195 = CFDictionaryGetValue(*(CFDictionaryRef *)(v192 + 64), SInt64);
        if (!v195)
        {
          int v125 = FigSignalErrorAt();
          MEMORY[0x19970E930](*(void *)(v192 + 56));
          if (!SInt64) {
            goto LABEL_573;
          }
LABEL_450:
          CFDictionaryRef v231 = (CFDictionaryRef)SInt64;
          goto LABEL_572;
        }
        v196 = v195;
        CFRetain(v195);
        CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v192 + 64), SInt64);
        MEMORY[0x19970E930](*(void *)(v192 + 56));
        uint64_t v197 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v197) {
          uint64_t v198 = v197;
        }
        else {
          uint64_t v198 = 0;
        }
        v301 = *(uint64_t (**)(uint64_t, const void *))(v198 + 136);
        if (v301) {
          int v125 = v301(v191, v196);
        }
        else {
          int v125 = -12782;
        }
        CFTypeRef v302 = v196;
        goto LABEL_448;
      }
      if (v2 != 1349739371)
      {
        if (v2 != 1349739381)
        {
          if (v2 != 1349742707) {
            goto LABEL_349;
          }
          CFTypeID v81 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          uint64_t v82 = *(void *)(a1 + 64);
          uint64_t v83 = *(void *)(a1 + 72);
          LOBYTE(v356) = 0;
          *(void *)long long __str = 0;
          cf[0] = 0;
          *(void *)&long long v362 = 0;
          theDict[0] = 0;
          value[0] = 0;
          if (v81)
          {
            CFTypeID v84 = CFGetTypeID(v81);
            if (v84 == FigPlayerGetTypeID())
            {
              if (v82)
              {
                if (v83)
                {
                  int v85 = FigXPCMessageCopyCFDictionary();
                  if (v85) {
                    goto LABEL_186;
                  }
                }
              }
            }
          }
LABEL_576:
          int v85 = FigSignalErrorAt();
LABEL_186:
          int v125 = v85;
          goto LABEL_559;
        }
        uint64_t v213 = *(void *)(a1 + 48);
        v214 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        uint64_t v215 = *(void *)(a1 + 64);
        *(void *)long long __str = 0;
        cf[0] = 0;
        if (v214 && (CFTypeID v216 = CFGetTypeID(v214), v216 == FigPlayerGetTypeID()) && v215)
        {
          int v217 = FigXPCMessageCopyCFURL();
          if (!v217)
          {
            int v217 = FigXPCMessageCopySandboxRegistration();
            if (!v217) {
              int v217 = serverXPCPlayer_handlePlayerSetProperty(v214, v213, @"NetworkCacheURL", (uint64_t)cf[0]);
            }
          }
        }
        else
        {
          int v217 = FigSignalErrorAt();
        }
        int v125 = v217;
LABEL_544:
        CFDictionaryRef v231 = *(CFDictionaryRef *)__str;
        if (!*(void *)__str) {
          goto LABEL_573;
        }
        goto LABEL_572;
      }
      v260 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      v261 = *(void **)(a1 + 64);
      *(void *)&long long v362 = 0;
      theDict[0] = 0;
      if (v260)
      {
        CFTypeID v262 = CFGetTypeID(v260);
        if (v262 == FigPlayerGetTypeID())
        {
          if (v261)
          {
            int v263 = xpc_dictionary_get_int64(v261, "MasterClockType");
            if (v263 == 3)
            {
              int v339 = FigXPCMessageCopyCFObject();
              if (v339) {
                goto LABEL_532;
              }
              *(_OWORD *)long long __str = 0u;
              long long v365 = 0u;
              xpc_connection_get_audit_token();
              uint64_t v340 = *MEMORY[0x1E4F1CF80];
              *(_OWORD *)CFTypeRef cf = 0u;
              long long v349 = 0u;
              int v125 = FigAudioSessionClockCreateFromClockConfigurationAndAuditToken(v340, v362, cf, theDict);
              if (v125) {
                goto LABEL_534;
              }
LABEL_527:
              CFDictionaryRef v341 = theDict[0];
              uint64_t v342 = FigPlayerGetFigBaseObject(v260);
              uint64_t v343 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v343) {
                uint64_t v344 = v343;
              }
              else {
                uint64_t v344 = 0;
              }
              v345 = *(uint64_t (**)(uint64_t, __CFString *, CFDictionaryRef))(v344 + 56);
              if (!v345)
              {
                int v125 = -12782;
LABEL_534:
                CFDictionaryRef v327 = theDict[0];
                if (!theDict[0])
                {
LABEL_563:
                  CFDictionaryRef v231 = (CFDictionaryRef)v362;
                  if (!(void)v362) {
                    goto LABEL_573;
                  }
                  goto LABEL_572;
                }
LABEL_562:
                CFRelease(v327);
                goto LABEL_563;
              }
              int v339 = v345(v342, @"MasterClock", v341);
LABEL_532:
              int v125 = v339;
              goto LABEL_534;
            }
            if (v263 != 2)
            {
              if (v263 == 1)
              {
                HostTimeClock = CMClockGetHostTimeClock();
                if (HostTimeClock) {
                  HostTimeClock = CFRetain(HostTimeClock);
                }
                theDict[0] = (CFDictionaryRef)HostTimeClock;
              }
              else
              {
                theDict[0] = 0;
              }
              goto LABEL_527;
            }
            if (xpc_dictionary_get_uint64(v261, "MasterClockObjectID"))
            {
              int v339 = FigXPCAudioDeviceClockServerCopyClockForID();
              if (v339) {
                goto LABEL_532;
              }
              goto LABEL_527;
            }
          }
        }
      }
      int v339 = FigSignalErrorAt();
      goto LABEL_532;
    }
    if (v2 <= 1349743219)
    {
      if (v2 == 1349743206)
      {
        v250 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        v251 = *(void **)(a1 + 64);
        *(_OWORD *)CFTypeRef cf = *MEMORY[0x1E4F1F9F8];
        *(void *)&long long v349 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        if (v250)
        {
          CFTypeID v252 = CFGetTypeID(v250);
          if (v252 == FigPlayerGetTypeID())
          {
            if (v251)
            {
              double v253 = xpc_dictionary_get_double(v251, "Rate");
              int CMTime = FigXPCMessageGetCMTime();
              if (CMTime) {
                goto LABEL_479;
              }
              long long v362 = *(_OWORD *)cf;
              uint64_t v363 = v349;
              uint64_t v254 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v254) {
                uint64_t v255 = v254;
              }
              else {
                uint64_t v255 = 0;
              }
              v309 = *(uint64_t (**)(const void *, char *, float))(v255 + 56);
              if (v309)
              {
                float v310 = v253;
                *(_OWORD *)long long __str = v362;
                *(void *)&long long v365 = v363;
                int CMTime = v309(v250, __str, v310);
                goto LABEL_479;
              }
              goto LABEL_518;
            }
          }
        }
LABEL_574:
        int CMTime = FigSignalErrorAt();
        goto LABEL_479;
      }
      if (v2 == 1349743211)
      {
        char v206 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        CFTypeRef v207 = *(void **)(a1 + 64);
        long long v362 = *MEMORY[0x1E4F1F9F8];
        uint64_t v363 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        *(_OWORD *)CFDictionaryRef theDict = v362;
        uint64_t v361 = v363;
        if (v206)
        {
          CFTypeID v208 = CFGetTypeID(v206);
          if (v208 == FigPlayerGetTypeID())
          {
            if (v207)
            {
              double v209 = xpc_dictionary_get_double(v207, "Rate");
              int CMTime = FigXPCMessageGetCMTime();
              if (CMTime) {
                goto LABEL_479;
              }
              int CMTime = FigXPCMessageGetCMTime();
              if (CMTime) {
                goto LABEL_479;
              }
              uint64_t v210 = xpc_dictionary_get_uint64(v207, "Flags");
              *(_OWORD *)CFTypeRef value = v362;
              uint64_t v359 = v363;
              long long v356 = *(_OWORD *)theDict;
              uint64_t v357 = v361;
              uint64_t v211 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v211) {
                uint64_t v212 = v211;
              }
              else {
                uint64_t v212 = 0;
              }
              v322 = *(uint64_t (**)(const void *, char *, CFTypeRef *, uint64_t, float))(v212 + 88);
              if (v322)
              {
                float v323 = v209;
                *(_OWORD *)long long __str = *(_OWORD *)value;
                *(void *)&long long v365 = v359;
                *(_OWORD *)CFTypeRef cf = v356;
                *(void *)&long long v349 = v357;
                int CMTime = v322(v206, __str, cf, v210, v323);
                goto LABEL_479;
              }
              goto LABEL_518;
            }
          }
        }
        goto LABEL_574;
      }
      if (v2 != 1349743215) {
        goto LABEL_349;
      }
      CFTypeID v39 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      uint64_t v40 = *(void **)(a1 + 64);
      *(void *)long long __str = 0;
      if (!v39) {
        goto LABEL_575;
      }
      CFTypeID v41 = CFGetTypeID(v39);
      if (v41 != FigPlayerGetTypeID() || !v40) {
        goto LABEL_575;
      }
      double v42 = xpc_dictionary_get_double(v40, "Rate");
      int IDByAssociatingWithClientConnection = FigXPCMessageCopyCFDictionary();
      if (IDByAssociatingWithClientConnection) {
        goto LABEL_454;
      }
      uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v43) {
        uint64_t v44 = v43;
      }
      else {
        uint64_t v44 = 0;
      }
      v311 = *(uint64_t (**)(const void *, void, float))(v44 + 104);
      if (v311)
      {
        float v312 = v42;
        int IDByAssociatingWithClientConnection = v311(v39, *(void *)__str, v312);
        goto LABEL_454;
      }
      goto LABEL_464;
    }
    if (v2 == 1349743220)
    {
      uint64_t v269 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v270 = *(void *)(v269 + 24);
      if (v270)
      {
        v271 = *(void **)(a1 + 64);
        CFTypeID v272 = CFGetTypeID(*(CFTypeRef *)(v269 + 24));
        if (v272 == FigPlayerGetTypeID())
        {
          if (v271)
          {
            double v273 = xpc_dictionary_get_double(v271, "Rate");
            uint64_t v274 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v274) {
              uint64_t v275 = v274;
            }
            else {
              uint64_t v275 = 0;
            }
            v280 = *(uint64_t (**)(uint64_t, float))(v275 + 40);
            if (v280)
            {
              float v281 = v273;
              int CMTime = v280(v270, v281);
              goto LABEL_479;
            }
            goto LABEL_518;
          }
        }
      }
      goto LABEL_574;
    }
    if (v2 != 1349744225)
    {
      if (v2 != 1668429889) {
        goto LABEL_349;
      }
      int32_t v88 = *(void **)(a1 + 48);
      int32_t v89 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      long long v91 = *(_xpc_connection_s **)(a1 + 56);
      OSStatus v90 = *(void **)(a1 + 64);
      CFTypeID v92 = *(void **)(a1 + 72);
      cf[0] = 0;
      *(void *)&long long v362 = 0;
      theDict[0] = 0;
      value[0] = 0;
      if (v89 && (CFTypeID v93 = CFGetTypeID(v89), v93 == FigPlayerGetTypeID()) && v90 && v92)
      {
        xpc_dictionary_get_uint64(v90, "AssetObjectID");
        uint64_t v94 = xpc_dictionary_get_uint64(v90, "ItemCreateFlags");
        int v95 = FigXPCMessageCopyCFDictionary();
        if (!v95)
        {
          int v95 = FigXPCAssetServerCopyAssetForID();
          if (!v95)
          {
            uint64_t v96 = v362;
            CFDictionaryRef v97 = theDict[0];
            uint64_t v98 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v98) {
              uint64_t v99 = v98;
            }
            else {
              uint64_t v99 = 0;
            }
            v329 = *(uint64_t (**)(const void *, uint64_t, uint64_t, CFDictionaryRef, CFTypeRef *))(v99 + 96);
            if (!v329)
            {
              int v125 = -12782;
LABEL_555:
              if ((void)v362) {
                CFRelease((CFTypeRef)v362);
              }
              if (cf[0]) {
                CFRelease(cf[0]);
              }
              goto LABEL_571;
            }
            int v95 = v329(v89, v96, v94, v97, cf);
            if (!v95)
            {
              CFTypeRef v330 = cf[0];
              CFStringRef v331 = (const __CFString *)value[0];
              long long v367 = 0u;
              long long v368 = 0u;
              long long v365 = 0u;
              long long v366 = 0u;
              *(_OWORD *)long long __str = 0u;
              v332 = (char *)malloc_type_calloc(1uLL, 0x68uLL, 0x10200404BD2C637uLL);
              v333 = v332;
              if (!v332) {
                goto LABEL_606;
              }
              v332[88] = 0;
              if (v331) {
                CFStringGetCString(v331, v332 + 88, 10, 0x600u);
              }
              v334 = v88[2];
              *((void *)v333 + 10) = v334;
              dispatch_retain(v334);
              *((void *)v333 + 1) = *v88;
              v335 = v88[3];
              *((void *)v333 + 7) = v335;
              dispatch_retain(v335);
              CFTypeRef v336 = v330 ? CFRetain(v330) : 0;
              *((void *)v333 + 8) = v336;
              snprintf(__str, 0x50uLL, "com.apple.coremedia.playerserver.timebasesync.%s", v333 + 88);
              uint64_t v346 = FigDispatchQueueCreateWithPriority();
              *((void *)v333 + 6) = v346;
              if (!v346 || (uint64_t v347 = FigSimpleMutexCreate(), (*((void *)v333 + 5) = v347) == 0))
              {
LABEL_606:
                int v125 = FigSignalErrorAt();
                DisposeServedItemState(v333);
                v333 = 0;
                if (v125) {
                  goto LABEL_601;
                }
              }
              *((_DWORD *)v333 + 4) = xpc_connection_get_pid(v91);
              *((void *)v333 + 9) = FigCFWeakReferenceHolderCreateWithReferencedObject();
              int v125 = FigXPCServerAssociateObjectWithConnection();
              if (!v125) {
                xpc_dictionary_set_uint64(v92, "ItemObjectID", *(void *)v333);
              }
              else {
LABEL_601:
              }
                DisposeServedItemState(v333);
              goto LABEL_555;
            }
          }
        }
      }
      else
      {
        int v95 = FigSignalErrorAt();
      }
      int v125 = v95;
      goto LABEL_555;
    }
    uint64_t v221 = *(void *)(a1 + 48);
    v222 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    v223 = *(void **)(a1 + 64);
    *(void *)long long __str = 0;
    if (v222 && (CFTypeID v224 = CFGetTypeID(v222), v224 == FigPlayerGetTypeID()) && v223)
    {
      xpc_object_t array = xpc_dictionary_get_array(v223, "VideoTargetIDArray");
      size_t count = xpc_array_get_count(array);
      CFAllocatorRef v227 = CFGetAllocator(v222);
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v227, count, MEMORY[0x1E4F1D510]);
      if (Mutable)
      {
        if (count)
        {
          size_t v229 = 0;
          while (1)
          {
            xpc_array_get_uint64(array, v229);
            int v230 = FigXPCVideoTargetServerCopyVideoTargetForID();
            if (v230) {
              break;
            }
            CFArrayAppendValue(Mutable, *(const void **)__str);
            if (count == ++v229) {
              goto LABEL_299;
            }
          }
        }
        else
        {
LABEL_299:
          int v230 = serverXPCPlayer_handlePlayerSetProperty(v222, v221, @"VideoTargetArray", (uint64_t)Mutable);
        }
      }
      else
      {
        int v230 = FigSignalErrorAt();
      }
      int v125 = v230;
    }
    else
    {
      int v125 = FigSignalErrorAt();
      CFMutableDictionaryRef Mutable = 0;
    }
    if (!Mutable) {
      goto LABEL_573;
    }
    CFDictionaryRef v231 = Mutable;
LABEL_572:
    CFRelease(v231);
    goto LABEL_573;
  }
  if (v2 > 1348694114)
  {
    if (v2 <= 1349349936)
    {
      if (v2 != 1348694115)
      {
        if (v2 != 1348694121)
        {
          if (v2 != 1349087091) {
            goto LABEL_349;
          }
          CFTypeID v35 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          SInt64 = *(const void **)(a1 + 64);
          int v37 = *(void **)(a1 + 72);
          *(void *)long long __str = 0;
          cf[0] = 0;
          if (!v35) {
            goto LABEL_594;
          }
          CFTypeID v38 = CFGetTypeID(v35);
          if (v38 != FigPlayerGetTypeID()) {
            goto LABEL_594;
          }
          if (!SInt64)
          {
            int v125 = FigSignalErrorAt();
            goto LABEL_444;
          }
          if (v37)
          {
            FigXPCMessageCopyCFNumber();
            SInt64 = 0;
            uint64_t v276 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v276) {
              uint64_t v277 = v276;
            }
            else {
              uint64_t v277 = 0;
            }
            v313 = *(uint64_t (**)(const void *, void, char *))(v277 + 152);
            if (v313)
            {
              int v125 = v313(v35, 0, __str);
              v314 = *(const void **)__str;
              if (v125 || !*(void *)__str)
              {
LABEL_445:
                if (v314) {
                  CFRelease(v314);
                }
                FigXPCRelease();
                CFTypeRef v302 = cf[0];
                if (!cf[0])
                {
LABEL_449:
                  if (!SInt64) {
                    goto LABEL_573;
                  }
                  goto LABEL_450;
                }
LABEL_448:
                CFRelease(v302);
                goto LABEL_449;
              }
              IOSurface = CVPixelBufferGetIOSurface(*(CVPixelBufferRef *)__str);
              if (IOSurface)
              {
                xpc_object_t XPCObject = IOSurfaceCreateXPCObject(IOSurface);
                xpc_dictionary_set_value(v37, "CurrentlyDisplayedIOSurface", XPCObject);
              }
              int v125 = 0;
            }
            else
            {
              int v125 = -12782;
            }
          }
          else
          {
LABEL_594:
            int v125 = FigSignalErrorAt();
            SInt64 = 0;
          }
LABEL_444:
          v314 = *(const void **)__str;
          goto LABEL_445;
        }
        CFStringRef v199 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
        long long v200 = *(void **)(a1 + 64);
        uint64_t v201 = *(void **)(a1 + 72);
        *(void *)long long __str = 0;
        cf[0] = 0;
        *(void *)&long long v362 = 0;
        if (v199)
        {
          CFTypeID v202 = CFGetTypeID(v199);
          if (v202 == FigPlayerGetTypeID() && v200 && v201)
          {
            if (!xpc_dictionary_get_uint64(v200, "AfterItemObjectID"))
            {
              uint64_t v205 = 0;
LABEL_418:
              uint64_t v303 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v303) {
                uint64_t v304 = v303;
              }
              else {
                uint64_t v304 = 0;
              }
              v324 = *(uint64_t (**)(const void *, uint64_t, CFTypeRef *))(v304 + 32);
              if (!v324)
              {
                int v125 = -12782;
                goto LABEL_561;
              }
              int UniqueObjectIDForObjectAssociatedWithConnection = v324(v199, v205, cf);
              if (!UniqueObjectIDForObjectAssociatedWithConnection)
              {
                if (!cf[0])
                {
                  uint64_t v325 = 0;
                  goto LABEL_549;
                }
                int UniqueObjectIDForObjectAssociatedWithConnection = FigXPCServerFindUniqueObjectIDForObjectAssociatedWithConnection();
                if (!UniqueObjectIDForObjectAssociatedWithConnection)
                {
                  uint64_t v325 = *(void *)__str;
LABEL_549:
                  xpc_dictionary_set_uint64(v201, "ItemObjectID", v325);
                  int v125 = 0;
                  goto LABEL_561;
                }
              }
              goto LABEL_582;
            }
            int UniqueObjectIDForObjectAssociatedWithConnection = FigXPCServerLookupAndRetainAssociatedObject();
            if (UniqueObjectIDForObjectAssociatedWithConnection)
            {
LABEL_582:
              int v125 = UniqueObjectIDForObjectAssociatedWithConnection;
              goto LABEL_561;
            }
            CFTypeID v204 = CFGetTypeID((CFTypeRef)v362);
            if (v204 == FigPlaybackItemGetTypeID())
            {
              uint64_t v205 = v362;
              goto LABEL_418;
            }
          }
        }
        int UniqueObjectIDForObjectAssociatedWithConnection = FigSignalErrorAt();
        goto LABEL_582;
      }
      v243 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      uint64_t v244 = *(void *)(a1 + 64);
      v245 = *(void **)(a1 + 72);
      *(void *)long long __str = 0;
      cf[0] = 0;
      if (v243)
      {
        CFTypeID v246 = CFGetTypeID(v243);
        if (v246 == FigPlayerGetTypeID() && v244 && v245)
        {
          uint64_t v247 = FigPlayerGetFigBaseObject(v243);
          uint64_t v248 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v248) {
            uint64_t v249 = v248;
          }
          else {
            uint64_t v249 = 0;
          }
          v305 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v249 + 48);
          if (!v305)
          {
            int v125 = -12782;
            goto LABEL_567;
          }
          int v306 = v305(v247, @"MasterClock", *MEMORY[0x1E4F1CF80], cf);
          if (v306) {
            goto LABEL_590;
          }
          v307 = (OpaqueCMClock *)cf[0];
          if (cf[0])
          {
            if (v307 != CMClockGetHostTimeClock())
            {
              int v306 = FigXPCAudioDeviceClockServerAssociateCopiedNeighborClock();
              if (!v306)
              {
                if (*(void *)__str) {
                  xpc_dictionary_set_uint64(v245, "MasterClockObjectID", *(uint64_t *)__str);
                }
                int64_t v308 = 2;
                goto LABEL_566;
              }
LABEL_590:
              int v125 = v306;
LABEL_567:
              CFDictionaryRef v231 = (CFDictionaryRef)cf[0];
              if (!cf[0]) {
                goto LABEL_573;
              }
              goto LABEL_572;
            }
            int64_t v308 = 1;
          }
          else
          {
            int64_t v308 = 0;
          }
LABEL_566:
          xpc_dictionary_set_int64(v245, "MasterClockType", v308);
          int v125 = 0;
          goto LABEL_567;
        }
      }
      int v306 = FigSignalErrorAt();
      goto LABEL_590;
    }
    if (v2 == 1349349937)
    {
      v265 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      if (v265)
      {
        uint64_t v267 = *(void *)(a1 + 64);
        uint64_t v266 = *(void *)(a1 + 72);
        CFTypeID v268 = CFGetTypeID(v265);
        if (v268 == FigPlayerGetTypeID() && v267 && v266)
        {
          int CMTime = FigMemoryOriginBeginEstablishingMemoryRecipientByFillingInXPCMessage1();
          goto LABEL_479;
        }
      }
      goto LABEL_574;
    }
    if (v2 == 1349349938)
    {
      v218 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      if (v218)
      {
        uint64_t v219 = *(void *)(a1 + 64);
        CFTypeID v220 = CFGetTypeID(v218);
        if (v220 == FigPlayerGetTypeID())
        {
          if (v219)
          {
            int CMTime = FigMemoryOriginCompleteEstablishingMemoryRecipientUsingXPCMessage2();
            goto LABEL_479;
          }
        }
      }
      goto LABEL_574;
    }
    if (v2 != 1349674349) {
      goto LABEL_349;
    }
    uint64_t v3 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    int v86 = *(void **)(a1 + 64);
    *(void *)long long __str = 0;
    if (!v3) {
      goto LABEL_575;
    }
    CFTypeID v87 = CFGetTypeID(v3);
    if (v87 != FigPlayerGetTypeID() || !v86) {
      goto LABEL_575;
    }
    if (xpc_dictionary_get_uint64(v86, "ItemObjectID"))
    {
      int IDByAssociatingWithClientConnection = FigXPCServerLookupAndRetainAssociatedObject();
      if (IDByAssociatingWithClientConnection) {
        goto LABEL_454;
      }
      goto LABEL_575;
    }
    uint64_t v7 = 0;
    uint64_t v282 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v282) {
      uint64_t v283 = v282;
    }
    else {
      uint64_t v283 = 0;
    }
    int v9 = *(uint64_t (**)(const void *, uint64_t))(v283 + 24);
    if (v9) {
      goto LABEL_453;
    }
LABEL_464:
    int v125 = -12782;
    goto LABEL_544;
  }
  if (v2 <= 1348559971)
  {
    if (v2 != 1232303216)
    {
      if (v2 != 1346529646)
      {
        if (v2 == 1346726254)
        {
          uint64_t v3 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
          uint64_t v4 = *(void *)(a1 + 64);
          *(void *)long long __str = 0;
          if (v3)
          {
            CFTypeID v5 = CFGetTypeID(v3);
            if (v5 == FigPlayerGetTypeID())
            {
              if (v4)
              {
                int IDByAssociatingWithClientConnection = FigXPCMessageCopyCFString();
                if (!IDByAssociatingWithClientConnection)
                {
                  uint64_t v7 = *(void *)__str;
                  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 24);
                  if (v8)
                  {
                    int v9 = *(uint64_t (**)(const void *, uint64_t))(v8 + 16);
                    if (v9)
                    {
LABEL_453:
                      int IDByAssociatingWithClientConnection = v9(v3, v7);
                      goto LABEL_454;
                    }
                  }
                  goto LABEL_464;
                }
LABEL_454:
                int v125 = IDByAssociatingWithClientConnection;
                goto LABEL_544;
              }
            }
          }
LABEL_575:
          int IDByAssociatingWithClientConnection = FigSignalErrorAt();
          goto LABEL_454;
        }
        goto LABEL_349;
      }
      uint64_t v184 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v185 = *(void *)(v184 + 24);
      if (v185)
      {
        uint64_t v186 = *(void *)(a1 + 64);
        CFTypeID v187 = CFGetTypeID(*(CFTypeRef *)(v184 + 24));
        if (v187 == FigPlayerGetTypeID())
        {
          if (v186)
          {
            uint64_t v188 = *(void *)(CMBaseObjectGetVTable() + 24);
            if (v188)
            {
              v189 = *(uint64_t (**)(uint64_t))(v188 + 8);
              if (v189)
              {
                int CMTime = v189(v185);
                goto LABEL_479;
              }
            }
LABEL_518:
            int v125 = -12782;
            goto LABEL_573;
          }
        }
      }
      goto LABEL_574;
    }
    v232 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    v233 = *(void **)(a1 + 64);
    *(void *)long long __str = 0;
    cf[0] = 0;
    if (v232)
    {
      CFTypeID v234 = CFGetTypeID(v232);
      if (v234 == FigPlaybackItemGetTypeID())
      {
        if (v233)
        {
          xpc_dictionary_get_uint64(v233, "TrackID");
          int v169 = FigXPCMessageCopyCFString();
          if (v169) {
            goto LABEL_539;
          }
        }
      }
    }
LABEL_595:
    int v169 = FigSignalErrorAt();
LABEL_539:
    int v125 = v169;
    goto LABEL_567;
  }
  if (v2 != 1348559972)
  {
    if (v2 == 1348563828) {
      goto LABEL_518;
    }
    if (v2 == 1348630894)
    {
      uint64_t v76 = *(void *)(*(void *)(a1 + 40) + 8);
      uint64_t v13 = *(void *)(v76 + 24);
      if (!v13) {
        goto LABEL_574;
      }
      CFStringRef v77 = *(void **)(a1 + 64);
      CFTypeID v78 = CFGetTypeID(*(CFTypeRef *)(v76 + 24));
      if (v78 != FigPlayerGetTypeID() || !v77) {
        goto LABEL_574;
      }
      int64_t v16 = xpc_dictionary_get_int64(v77, "StepCount");
      uint64_t v79 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v79) {
        uint64_t v80 = v79;
      }
      else {
        uint64_t v80 = 0;
      }
      CFDataRef v18 = *(uint64_t (**)(uint64_t, int64_t))(v80 + 72);
      if (!v18) {
        goto LABEL_518;
      }
      goto LABEL_32;
    }
    goto LABEL_349;
  }
  v256 = *(const void **)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  v257 = *(void **)(a1 + 64);
  *(void *)&long long v362 = 0;
  theDict[0] = 0;
  value[0] = 0;
  *(void *)&long long v356 = 0;
  v354[0] = 0;
  uint64_t v371 = 0;
  long long v369 = 0u;
  long long v370 = 0u;
  long long v367 = 0u;
  long long v368 = 0u;
  long long v365 = 0u;
  long long v366 = 0u;
  *(_OWORD *)long long __str = 0u;
  if (!v256
    || (CFTypeID v258 = CFGetTypeID(v256), v258 != FigPlayerGetTypeID())
    || !v257
    || (xpc_dictionary_get_uint64(v257, "ItemObjectID"),
        xpc_dictionary_get_uint64(v257, "AfterItemObjectID"),
        (int v259 = FigXPCServerLookupAndRetainAssociatedObject()) == 0))
  {
    int v259 = FigSignalErrorAt();
  }
  int v125 = v259;
LABEL_573:
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v125;
}

uint64_t serverXPCItem_HandleCopyImageQueueGaugeMessage(const void *a1, uint64_t a2, _xpc_connection_s *a3, uint64_t a4, void *a5)
{
  CFTypeRef cf = 0;
  if (a1 && (CFTypeID v10 = CFGetTypeID(a1), v10 == FigPlaybackItemGetTypeID()) && a4 && a5)
  {
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a1);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v13 + 48);
    if (!v14)
    {
      uint64_t v16 = 4294954514;
      goto LABEL_15;
    }
    uint64_t v15 = v14(FigBaseObject, a2, *MEMORY[0x1E4F1CF80], &cf);
    if (!v15)
    {
      if (!cf || (uint64_t v15 = FigXPCImageQueueGaugeServerAssociateCopiedNeighborImageQueueGauge(a3), !v15))
      {
        xpc_dictionary_set_uint64(a5, (const char *)*MEMORY[0x1E4F20280], 0);
        uint64_t v16 = 0;
        goto LABEL_15;
      }
    }
  }
  else
  {
    uint64_t v15 = FigSignalErrorAt();
  }
  uint64_t v16 = v15;
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  return v16;
}

void DisposeServedPlayerState(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[1];
    if (v2)
    {
      a1[1] = 0;
      uint64_t v3 = a1[2];
      uint64_t v4 = a1[3];
      a1[3] = 0;
      v12[0] = MEMORY[0x1E4F143A8];
      v12[1] = 0x40000000;
      v12[2] = __DisposeServedPlayerState_block_invoke;
      void v12[3] = &__block_descriptor_tmp_115_0;
      v12[4] = v4;
      v12[5] = v2;
      serverXPCPlayer_guardedDispatchAsyncToInvalidationQueue(v3, v12);
    }
    CFTypeID v5 = a1[2];
    if (v5) {
      dispatch_release(v5);
    }
    CFTypeID v6 = a1[3];
    if (v6) {
      dispatch_release(v6);
    }
    FigSimpleMutexDestroy();
    uint64_t v7 = (const void *)a1[8];
    if (v7)
    {
      CFRelease(v7);
      a1[8] = 0;
    }
    uint64_t v8 = (const void *)a1[4];
    if (v8)
    {
      CFRelease(v8);
      a1[4] = 0;
    }
    int v9 = (const void *)a1[5];
    if (v9)
    {
      CFRelease(v9);
      a1[5] = 0;
    }
    CFTypeID v10 = (const void *)a1[6];
    if (v10)
    {
      CFRelease(v10);
      a1[6] = 0;
    }
    CFTypeID v11 = (void *)a1[12];
    if (v11) {
      os_release(v11);
    }
    free(a1);
  }
}

uint64_t __serverXPCPlayer_getSharedInvalidationQueue_block_invoke()
{
  serverXPCPlayer_getSharedInvalidationQueue_sharedInvalidationQueue = FigDispatchQueueCreateWithPriority();

  return FigWatchdogMonitorDispatchQueue();
}

uint64_t serverXPCPlayer_guardedDispatchAsyncToInvalidationQueue(NSObject *a1, const void *a2)
{
  if (serverXPCPlayer_guardedDispatchAsyncToInvalidationQueue_once != -1) {
    dispatch_once_f(&serverXPCPlayer_guardedDispatchAsyncToInvalidationQueue_once, 0, (dispatch_function_t)serverXPCPlayer_prepareForAsyncTimeoutsOnce);
  }
  MEMORY[0x19970E910](sAsyncTimeoutInfo_4);
  dispatch_time_t v4 = dispatch_time(0, 130000000000);
  dispatch_time_t v5 = dispatch_time(0, 115000000000);
  FigCFArrayAppendInt64();
  FigCFArrayAppendInt64();
  if (CFArrayGetCount((CFArrayRef)sAsyncTimeoutInfo_2) == 1) {
    dispatch_source_set_timer((dispatch_source_t)sAsyncTimeoutInfo_0, v4, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  }
  if (CFArrayGetCount((CFArrayRef)sAsyncTimeoutInfo_3) == 1) {
    dispatch_source_set_timer((dispatch_source_t)sAsyncTimeoutInfo_1, v5, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  }
  CFTypeID v6 = _Block_copy(a2);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __serverXPCPlayer_guardedDispatchAsyncToInvalidationQueue_block_invoke;
  block[3] = &unk_1E57A0100;
  block[4] = v6;
  dispatch_async(a1, block);
  return MEMORY[0x19970E930](sAsyncTimeoutInfo_4);
}

void __DisposeServedPlayerState_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __DisposeServedPlayerState_block_invoke_2;
  block[3] = &__block_descriptor_tmp_114_0;
  block[4] = *(void *)(a1 + 40);
  dispatch_sync(v2, block);
  uint64_t v3 = *(NSObject **)(a1 + 32);
  if (v3) {
    dispatch_release(v3);
  }
}

void __DisposeServedPlayerState_block_invoke_2(uint64_t a1)
{
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(*(void *)(a1 + 32));
  if (FigBaseObject)
  {
    uint64_t v3 = FigBaseObject;
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v5 = v4 ? v4 : 0;
    CFTypeID v6 = *(void (**)(uint64_t))(v5 + 24);
    if (v6) {
      v6(v3);
    }
  }
  uint64_t v7 = *(const void **)(a1 + 32);
  if (v7)
  {
    CFRelease(v7);
  }
}

void serverXPCPlayer_prepareForAsyncTimeoutsOnce()
{
  uint64_t v0 = dispatch_queue_attr_make_with_overcommit();
  uint64_t v1 = dispatch_queue_create("com.apple.coremedia.player.timeout", v0);
  sAsyncTimeoutInfo_4 = FigSimpleMutexCreate();
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v3 = (const CFArrayCallBacks *)MEMORY[0x1E4F1D510];
  sAsyncTimeoutInfo_2 = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  sAsyncTimeoutInfo_3 = (uint64_t)CFArrayCreateMutable(v2, 0, v3);
  uint64_t v4 = (const dispatch_source_type_s *)MEMORY[0x1E4F14490];
  sAsyncTimeoutInfo_0 = (uint64_t)dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v1);
  sAsyncTimeoutInfo_1 = (uint64_t)dispatch_source_create(v4, 0, 0, v1);
  dispatch_source_set_event_handler((dispatch_source_t)sAsyncTimeoutInfo_0, &__block_literal_global_120);
  dispatch_source_set_event_handler((dispatch_source_t)sAsyncTimeoutInfo_1, &__block_literal_global_124);
  dispatch_activate((dispatch_object_t)sAsyncTimeoutInfo_0);
  dispatch_activate((dispatch_object_t)sAsyncTimeoutInfo_1);
  if (v1)
  {
    dispatch_release(v1);
  }
}

void __serverXPCPlayer_guardedDispatchAsyncToInvalidationQueue_block_invoke(uint64_t a1)
{
  MEMORY[0x19970E910](sAsyncTimeoutInfo_4);
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)sAsyncTimeoutInfo_2, 0);
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)sAsyncTimeoutInfo_3, 0);
  if (CFArrayGetCount((CFArrayRef)sAsyncTimeoutInfo_2) < 1)
  {
    CFAllocatorRef v2 = sAsyncTimeoutInfo_0;
    dispatch_time_t v3 = -1;
    uint64_t v4 = 0;
  }
  else
  {
    FigCFArrayGetInt64AtIndex();
    CFAllocatorRef v2 = sAsyncTimeoutInfo_0;
    dispatch_time_t v3 = 0;
    uint64_t v4 = 1000000000;
  }
  dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, v4);
  if (CFArrayGetCount((CFArrayRef)sAsyncTimeoutInfo_3) < 1)
  {
    uint64_t v5 = sAsyncTimeoutInfo_1;
    dispatch_time_t v6 = -1;
    uint64_t v7 = 0;
  }
  else
  {
    FigCFArrayGetInt64AtIndex();
    uint64_t v5 = sAsyncTimeoutInfo_1;
    dispatch_time_t v6 = 0;
    uint64_t v7 = 1000000000;
  }
  dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, v7);
  MEMORY[0x19970E930](sAsyncTimeoutInfo_4);
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t __serverXPCPlayer_prepareForAsyncTimeoutsOnce_block_invoke()
{
  return FigUserCrashWithMessage();
}

uint64_t __serverXPCPlayer_prepareForAsyncTimeoutsOnce_block_invoke_2()
{
  return FigUserStackshotWithMessage();
}

uint64_t serverXPCPlayer_handlePlayerSetProperty(const void *a1, uint64_t a2, const void *a3, uint64_t a4)
{
  char v20 = 0;
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  if (!a1 || (CFTypeID v8 = CFGetTypeID(a1), v8 != FigPlayerGetTypeID()))
  {
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_10;
  }
  uint64_t v9 = FPSupport_HandlePlayerSetPropertyAndCopyModification(0, a3, a4, a2, (uint64_t)serverXPCPlayer_handlePlayerSetPropertyGuts, &v20, &cf, &v18);
  if (v9)
  {
LABEL_10:
    uint64_t v16 = v9;
    goto LABEL_12;
  }
  if (v20)
  {
    uint64_t v16 = 0;
  }
  else
  {
    CFTypeRef v11 = v18;
    CFTypeRef v10 = cf;
    uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef))(v14 + 56);
    if (v15)
    {
      uint64_t v9 = v15(FigBaseObject, v10, v11);
      goto LABEL_10;
    }
    uint64_t v16 = 4294954514;
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v16;
}

uint64_t serverXPCPlayer_handlePlayerSetPropertyGuts(int a1, int a2, __CFString *a3, CFTypeRef cf, unsigned char *a5, __CFString **a6, CFTypeRef *a7)
{
  if (cf) {
    CFTypeRef v11 = CFRetain(cf);
  }
  else {
    CFTypeRef v11 = 0;
  }
  if (CFEqual(a3, @"Server_DisplayList")) {
    uint64_t v12 = @"DisplayList";
  }
  else {
    uint64_t v12 = a3;
  }
  *a5 = 0;
  if (v12) {
    uint64_t v12 = (__CFString *)CFRetain(v12);
  }
  *a6 = v12;
  if (v11)
  {
    *a7 = CFRetain(v11);
    CFRelease(v11);
  }
  else
  {
    *a7 = 0;
  }
  return 0;
}

uint64_t serverXPCItem_handleItemSetPropertyGuts(int a1, uint64_t a2, __CFString *a3, CFTypeRef cf, unsigned char *a5, void *a6, void *a7)
{
  if (cf) {
    uint64_t v13 = CFRetain(cf);
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(const void **)(a2 + 64);
  if (!v14) {
    goto LABEL_84;
  }
  CFTypeID v15 = CFGetTypeID(v14);
  if (v15 != FigPlaybackItemGetTypeID()) {
    goto LABEL_84;
  }
  if (!FigCFEqual())
  {
    if (FigCFEqual())
    {
      valuePtr.CMTime value = 0;
      value.CMTime value = 0;
      if (cf)
      {
        CFTypeID v23 = CFGetTypeID(cf);
        if (v23 == CFNumberGetTypeID())
        {
          CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
          uint64_t v24 = FigVideoCompositorServerRetainVideoCompositorForID();
          if (!v24)
          {
            if (v13) {
              CFRelease(v13);
            }
            uint64_t v13 = (const void *)value.value;
            uint64_t v25 = (__CFString **)&kFigPlaybackItemProperty_VideoCompositor;
            goto LABEL_26;
          }
          goto LABEL_85;
        }
      }
LABEL_84:
      uint64_t v24 = FigSignalErrorAt();
      goto LABEL_85;
    }
    if (!FigCFEqual())
    {
      if (CFEqual(@"Server_AudioProcessingTapID", a3))
      {
        valuePtr.CMTime value = 0;
        value.CMTime value = 0;
        if (cf && (CFTypeID v34 = CFGetTypeID(cf), v34 == CFNumberGetTypeID()))
        {
          CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr);
          CMTimeValue v35 = valuePtr.value;
        }
        else
        {
          CMTimeValue v35 = 0;
        }
        if (MTAudioProcessingTapServerIsObjectIDLocallyServed(v35))
        {
          if (valuePtr.value)
          {
            uint64_t v24 = MTAudioProcessingTapXPCServerCopyTapForID(valuePtr.value, &value);
            if (v24) {
              goto LABEL_85;
            }
          }
        }
        else if (valuePtr.value)
        {
          uint64_t v24 = MTProxyAudioProcessingTapCreate(0, valuePtr.value, &value);
          if (v24) {
            goto LABEL_85;
          }
        }
        if (v13) {
          CFRelease(v13);
        }
        uint64_t v13 = (const void *)value.value;
        uint64_t v25 = (__CFString **)&kFigPlaybackItemProperty_AudioProcessingTap;
        goto LABEL_26;
      }
      if (!CFEqual(@"Server_PriorImageQueueGaugeID", a3))
      {
        if (!CFEqual(@"Server-TransientTimebaseDict", a3)) {
          goto LABEL_27;
        }
        if (cf)
        {
          CMTimebaseRef timebaseOut = 0;
          CMTime valuePtr = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          CMTime value = valuePtr;
          double v41 = 0.0;
          FigCFDictionaryGetCMTimeIfPresent();
          FigCFDictionaryGetCMTimeIfPresent();
          FigCFDictionaryGetDoubleIfPresent();
          CFAllocatorRef v37 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          HostTimeClock = CMClockGetHostTimeClock();
          uint64_t v24 = CMTimebaseCreateWithSourceClock(v37, HostTimeClock, &timebaseOut);
          if (v24) {
            goto LABEL_85;
          }
          if (v13) {
            CFRelease(v13);
          }
          uint64_t v13 = timebaseOut;
          if (v41 == 0.0)
          {
            uint64_t v24 = CMTimebaseSetRate(timebaseOut, 0.0);
            if (v24) {
              goto LABEL_85;
            }
            CMTime time = valuePtr;
            uint64_t v24 = CMTimebaseSetTime(timebaseOut, &time);
            if (v24) {
              goto LABEL_85;
            }
          }
          else
          {
            CMTime time = valuePtr;
            CMTime v39 = value;
            uint64_t v24 = CMTimebaseSetRateAndAnchorTime(timebaseOut, v41, &time, &v39);
            if (v24) {
              goto LABEL_85;
            }
          }
        }
        uint64_t v25 = (__CFString **)&kFigPlaybackItemProperty_TransientTimebaseForCoordinatedPlaybackSynchronization;
LABEL_26:
        a3 = *v25;
        goto LABEL_27;
      }
      valuePtr.CMTime value = 0;
      value.CMTime value = 0;
      if (!cf
        || (CFTypeID v36 = CFGetTypeID(cf), v36 != CFNumberGetTypeID())
        || (CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, &valuePtr), !valuePtr.value)
        || (uint64_t v24 = FigXPCImageQueueGaugeServerCopyImageQueueGaugeForID(), !v24))
      {
        if (v13) {
          CFRelease(v13);
        }
        uint64_t v13 = (const void *)value.value;
        uint64_t v25 = (__CFString **)&kFigPlaybackItemProperty_PriorImageQueueGauge;
        goto LABEL_26;
      }
LABEL_85:
      uint64_t v28 = v24;
      goto LABEL_34;
    }
    valuePtr.CMTime value = 0;
    value.CMTime value = 0;
    if (cf)
    {
      CFTypeID v30 = CFGetTypeID(cf);
      if (v30 == CFDictionaryGetTypeID())
      {
        if (!FigCFDictionaryGetInt64IfPresent())
        {
          uint64_t v28 = 0;
          goto LABEL_55;
        }
        uint64_t v31 = FigVideoCompositorServerRetainVideoCompositorForID();
        if (v31) {
          goto LABEL_91;
        }
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, (CFDictionaryRef)cf);
        if (MutableCopy)
        {
          uint64_t v33 = MutableCopy;
          CFDictionaryRemoveValue(MutableCopy, @"Server_VideoCompositorID");
          CFDictionarySetValue(v33, @"VideoCompositor", (const void *)value.value);
          if (v13) {
            CFRelease(v13);
          }
          uint64_t v28 = 0;
          uint64_t v13 = v33;
LABEL_55:
          if (!v28) {
            goto LABEL_27;
          }
          goto LABEL_34;
        }
      }
    }
    uint64_t v31 = FigSignalErrorAt();
LABEL_91:
    uint64_t v28 = v31;
    goto LABEL_55;
  }
  CFTypeID v16 = CFGetTypeID(v14);
  if (v16 == FigPlaybackItemGetTypeID()
    && cf
    && (CFTypeID v17 = CFGetTypeID(cf), v17 == CFArrayGetTypeID())
    && (uint64_t Count = CFArrayGetCount((CFArrayRef)cf),
        (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510])) != 0))
  {
    char v20 = Mutable;
    if (Count < 1)
    {
LABEL_16:
      if (!v13)
      {
LABEL_18:
        a3 = @"VisualContextArray";
        uint64_t v13 = v20;
LABEL_27:
        *a5 = 0;
        if (a3) {
          CFTypeRef v26 = CFRetain(a3);
        }
        else {
          CFTypeRef v26 = 0;
        }
        *a6 = v26;
        if (v13) {
          CFTypeRef v27 = CFRetain(v13);
        }
        else {
          CFTypeRef v27 = 0;
        }
        uint64_t v28 = 0;
        *a7 = v27;
        goto LABEL_34;
      }
LABEL_17:
      CFRelease(v13);
      goto LABEL_18;
    }
    uint64_t v21 = 0;
    while (1)
    {
      valuePtr.CMTime value = 0;
      if (!FigCFArrayGetInt64AtIndex()) {
        break;
      }
      value.CMTime value = 0;
      uint64_t v22 = FigVisualContextServerRetainVisualContextForID();
      if (v22) {
        goto LABEL_38;
      }
      CFArrayAppendValue(v20, (const void *)value.value);
      CFRelease((CFTypeRef)value.value);
      if (Count == ++v21) {
        goto LABEL_16;
      }
    }
    uint64_t v22 = FigSignalErrorAt();
LABEL_38:
    uint64_t v28 = v22;
    CFRelease(v20);
    if (!v28)
    {
LABEL_39:
      char v20 = 0;
      if (!v13) {
        goto LABEL_18;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v28 = FigSignalErrorAt();
    if (!v28) {
      goto LABEL_39;
    }
  }
LABEL_34:
  if (v13) {
    CFRelease(v13);
  }
  return v28;
}

void DisposeServedItemState(void *a1)
{
  if (a1)
  {
    uint64_t v2 = a1[8];
    if (v2)
    {
      uint64_t v3 = a1[7];
      a1[7] = 0;
      a1[8] = 0;
      uint64_t v4 = a1[10];
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 0x40000000;
      v11[2] = __DisposeServedItemState_block_invoke;
      v11[3] = &__block_descriptor_tmp_142;
      void v11[4] = v3;
      v11[5] = v2;
      serverXPCPlayer_guardedDispatchAsyncToInvalidationQueue(v4, v11);
    }
    uint64_t v5 = a1[10];
    if (v5) {
      dispatch_release(v5);
    }
    dispatch_time_t v6 = (const void *)a1[3];
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = (const void *)a1[4];
    if (v7) {
      CFRelease(v7);
    }
    CFTypeID v8 = a1[6];
    if (v8) {
      dispatch_release(v8);
    }
    uint64_t v9 = a1[7];
    if (v9) {
      dispatch_release(v9);
    }
    FigSimpleMutexDestroy();
    CFTypeRef v10 = (const void *)a1[9];
    if (v10) {
      CFRelease(v10);
    }
    free(a1);
  }
}

uint64_t serverXPCItem_NotificationFilter(uint64_t a1, CFTypeRef cf, const void *a3, __CFDictionary *a4, __CFDictionary **a5, void *a6)
{
  if (!cf || (CFTypeID v12 = CFGetTypeID(cf), v12 != FigPlaybackItemGetTypeID()))
  {
    FigSignalErrorAt();
    return 0;
  }
  if (!a4 || (CFTypeID v13 = CFGetTypeID(a4), v13 != CFDictionaryGetTypeID()))
  {
LABEL_9:
    MutableCFArrayRef Copy = 0;
    goto LABEL_11;
  }
  CFTypeRef Value = CFDictionaryGetValue(a4, @"CFError");
  if (Value)
  {
    CFTypeID v15 = CFGetTypeID(Value);
    if (v15 == CFErrorGetTypeID())
    {
      uint64_t v16 = FigCFCopyCFErrorAsPropertyList();
      if (v16)
      {
        CFTypeID v17 = (const void *)v16;
        MutableCFArrayRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, a4);
        CFDictionaryRemoveValue(MutableCopy, @"CFError");
        CFDictionarySetValue(MutableCopy, @"Server_CFError", v17);
        CFRelease(v17);
        goto LABEL_11;
      }
      goto LABEL_9;
    }
  }
  MutableCFArrayRef Copy = (__CFDictionary *)CFRetain(a4);
LABEL_11:
  if (CFEqual(a3, @"TimebaseChanged"))
  {
    xpc_object_t xdict = 0;
    *(void *)&bytes[0] = 0;
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(cf);
    uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v20) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = 0;
    }
    CFTypeID v23 = *(void (**)(uint64_t, __CFString *, void, _OWORD *))(v21 + 48);
    if (!v23) {
      goto LABEL_29;
    }
    v23(FigBaseObject, @"Timebase", *MEMORY[0x1E4F1CF80], bytes);
    if (!*(void *)&bytes[0]) {
      goto LABEL_29;
    }
    uint64_t v24 = malloc_type_calloc(1uLL, 0x20uLL, 0x102004059E634C0uLL);
    if (v24)
    {
      CFTypeRef v25 = *(CFTypeRef *)(a1 + 72);
      if (v25) {
        CFTypeRef v25 = CFRetain(v25);
      }
      *uint64_t v24 = v25;
      _OWORD v24[2] = a1;
      v24[1] = *(void *)a1;
      goto LABEL_28;
    }
    if (!FigSignalErrorAt())
    {
LABEL_28:
      *((unsigned char *)v24 + 24) = 1;
      FigSyncMomentSourceCreateWithDispatchQueueAndDestructor2((uint64_t)fps_TimebaseSynchronizationUpdate_Callback, (uint64_t)v24, (void (*)(uint64_t))fps_destroyTimebaseSyncState, *(const void **)&bytes[0], *(NSObject **)(a1 + 48), (uint64_t *)&xdict);
LABEL_29:
      MEMORY[0x19970E910](*(void *)(a1 + 40));
      uint64_t v26 = *(void *)&bytes[0];
      uint64_t v28 = *(const void **)(a1 + 24);
      CFTypeRef v27 = *(const void **)(a1 + 32);
      *(void *)(a1 + 24) = xdict;
      *(void *)(a1 + 32) = v26;
      MEMORY[0x19970E930](*(void *)(a1 + 40));
      if (v28) {
        FigSyncMomentSourceDestroy(v28);
      }
      if (v27) {
        CFRelease(v27);
      }
    }
LABEL_33:
    uint64_t v29 = 1;
    goto LABEL_34;
  }
  if (CFEqual(a3, @"TimeJumped"))
  {
    if (!*(void *)(a1 + 24))
    {
      uint64_t v33 = 0;
      memset(bytes, 0, sizeof(bytes));
      xpc_object_t xdict = 0;
      uint64_t v22 = (_xpc_connection_s *)FigCFWeakReferenceHolderCopyReferencedObject();
      if (v22
        && !serverXPCItem_getSyntheticSyncMomentL((uint64_t)cf, (uint64_t)bytes)
        && !FigXPCCreateBasicMessage())
      {
        xpc_dictionary_set_data(xdict, "TimeBaseSyncMoment", bytes, 0x78uLL);
        xpc_connection_send_message(v22, xdict);
      }
      FigXPCRelease();
      FigXPCRelease();
    }
    goto LABEL_33;
  }
  if (CFEqual(a3, @"ReadyForPlayback")) {
    goto LABEL_38;
  }
  if (!CFEqual(a3, @"SeekDidComplete"))
  {
    if (CFEqual(a3, @"MetadataOutputChanged"))
    {
      if (fps_addMetadataOutputChangedNotificationPayloadToMessage(a6, MutableCopy)) {
        goto LABEL_33;
      }
    }
    else
    {
      if (!CFEqual(a3, @"LegibleOutputChanged"))
      {
LABEL_38:
        if (MutableCopy != a4)
        {
          *a5 = MutableCopy;
          return 4;
        }
        goto LABEL_44;
      }
      if (fps_addLegibleOutputChangedNotificationPayloadToMessage(a6, MutableCopy)) {
        goto LABEL_33;
      }
    }
LABEL_43:
    uint64_t v29 = 2;
    goto LABEL_34;
  }
  if (!serverXPCItem_addTimeSyncUpdateToMessage(cf, a1, a6)
    && !FigXPCMessageSetCFDictionary())
  {
    goto LABEL_43;
  }
LABEL_44:
  uint64_t v29 = 0;
LABEL_34:
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  return v29;
}

void __DisposeServedItemState_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __DisposeServedItemState_block_invoke_2;
  block[3] = &__block_descriptor_tmp_141_0;
  block[4] = *(void *)(a1 + 40);
  dispatch_sync(v2, block);
  uint64_t v3 = *(NSObject **)(a1 + 32);
  if (v3) {
    dispatch_release(v3);
  }
}

void __DisposeServedItemState_block_invoke_2(uint64_t a1)
{
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(a1 + 32));
  if (FigBaseObject)
  {
    uint64_t v3 = FigBaseObject;
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v5 = v4 ? v4 : 0;
    dispatch_time_t v6 = *(void (**)(uint64_t))(v5 + 24);
    if (v6) {
      v6(v3);
    }
  }
  uint64_t v7 = *(const void **)(a1 + 32);
  if (v7)
  {
    CFRelease(v7);
  }
}

uint64_t serverXPCItem_addTimeSyncUpdateToMessage(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v9 = 0;
  memset(v8, 0, sizeof(v8));
  if (a1 && (CFTypeID v6 = CFGetTypeID(a1), v6 == FigPlaybackItemGetTypeID()) && a3)
  {
    if (*(void *)(a2 + 24))
    {
      uint64_t result = FigTimebaseGetSyncMoment2(*(OpaqueCMTimebase **)(a2 + 32), (uint64_t)v8);
      if (result) {
        return result;
      }
      goto LABEL_6;
    }
    uint64_t result = serverXPCItem_getSyntheticSyncMomentL((uint64_t)a1, (uint64_t)v8);
    if (!result)
    {
LABEL_6:
      xpc_dictionary_set_data(a3, "TimeBaseSyncMoment", v8, 0x78uLL);
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fps_addMetadataOutputChangedNotificationPayloadToMessage(void *a1, CFDictionaryRef theDict)
{
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"SampleBuffers");
  if (Value && (CFArrayRef v4 = Value, v5 = CFGetTypeID(Value), v5 == CFArrayGetTypeID()))
  {
    uint64_t v6 = fps_addSampleBuffersToMessage(a1, "MetadataOutputSamples", v4);
    if (v6) {
      return v6;
    }
    MutableCFArrayRef Copy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
    CFDictionaryRemoveValue(MutableCopy, @"SampleBuffers");
    uint64_t v8 = FigXPCMessageSetCFDictionary();
    if (MutableCopy) {
      CFRelease(MutableCopy);
    }
    return v8;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fps_addLegibleOutputChangedNotificationPayloadToMessage(void *a1, const __CFDictionary *a2)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  CFArrayRef v5 = (const __CFArray *)CFDictionaryGetValue(a2, @"LegibleOutputAttributedString");
  uint64_t v6 = CFDictionaryGetValue(a2, @"LegibleOutputNativeSamples");
  if (CFArrayGetCount(v5) >= 1)
  {
    CFIndex v7 = 0;
    while (1)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v5, v7);
      CMTime value = 0;
      if (FigTextMarkupAttributedStringCreatePropertyList(ValueAtIndex, &value)) {
        goto LABEL_6;
      }
      if (value) {
        break;
      }
LABEL_8:
      if (++v7 >= CFArrayGetCount(v5)) {
        goto LABEL_9;
      }
    }
    CFArrayAppendValue(Mutable, value);
LABEL_6:
    if (value) {
      CFRelease(value);
    }
    goto LABEL_8;
  }
LABEL_9:
  if (!v6 || (CFTypeID v9 = CFGetTypeID(v6), v9 != CFArrayGetTypeID()))
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_19;
  }
  uint64_t v10 = fps_addSampleBuffersToMessage(a1, "LegibleOutputSamples", (CFArrayRef)v6);
  if (v10 || (uint64_t v10 = FigXPCMessageSetCFArray(), v10))
  {
LABEL_19:
    uint64_t v12 = v10;
    if (!Mutable) {
      return v12;
    }
    goto LABEL_16;
  }
  MutableCFArrayRef Copy = (__CFDictionary *)FigCFDictionaryCreateMutableCopy();
  CFDictionaryRemoveValue(MutableCopy, @"LegibleOutputAttributedString");
  CFDictionaryRemoveValue(MutableCopy, @"LegibleOutputNativeSamples");
  uint64_t v12 = FigXPCMessageSetCFDictionary();
  if (MutableCopy) {
    CFRelease(MutableCopy);
  }
  if (Mutable) {
LABEL_16:
  }
    CFRelease(Mutable);
  return v12;
}

uint64_t fps_TimebaseSynchronizationUpdate_Callback(uint64_t a1, uint64_t a2)
{
  xpc_object_t v14 = 0;
  uint64_t v13 = 0;
  long long v12 = 0u;
  long long v10 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v9 = 0u;
  CFArrayRef v4 = (_xpc_connection_s *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4 && *(_DWORD *)a2 == 120)
  {
    int v5 = *(_DWORD *)(a2 + 4);
    if (*(unsigned char *)(a1 + 24))
    {
      v5 |= 4u;
      *(_DWORD *)(a2 + 4) = v5;
      *(unsigned char *)(a1 + 24) = 0;
    }
    LODWORD(v9) = 120;
    DWORD1(v9) = v5;
    *((void *)&v9 + 1) = *(void *)(a2 + 8);
    long long v10 = *(_OWORD *)(a2 + 16);
    *(void *)&v11[0] = *(void *)(a2 + 32);
    *(_OWORD *)((char *)v11 + 8) = *(_OWORD *)(a2 + 40);
    *((void *)&v11[1] + 1) = *(void *)(a2 + 56);
    *(void *)&v11[2] = *(void *)(a2 + 64);
    *((void *)&v11[3] + 1) = *(void *)(a2 + 88);
    *(_OWORD *)((char *)&v11[2] + 8) = *(_OWORD *)(a2 + 72);
    uint64_t v13 = *(void *)(a2 + 112);
    long long v12 = *(_OWORD *)(a2 + 96);
    uint64_t v6 = (int *)MEMORY[0x1E4F1EBA8];
    int v7 = *MEMORY[0x1E4F1EBA8];
    if ((v5 & 1) != 0 && v7 == 1)
    {
      kdebug_trace();
      int v5 = *(_DWORD *)(a2 + 4);
      int v7 = *v6;
    }
    if ((v5 & 2) != 0 && v7 == 1)
    {
      CMTime time = *(CMTime *)(a2 + 16);
      CMTimeGetSeconds(&time);
      kdebug_trace();
    }
    if (!FigXPCCreateBasicMessage())
    {
      xpc_dictionary_set_data(v14, "TimeBaseSyncMoment", &v9, 0x78uLL);
      xpc_connection_send_message(v4, v14);
    }
  }
  FigXPCRelease();
  return FigXPCRelease();
}

void fps_destroyTimebaseSyncState(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    free(a1);
  }
}

uint64_t serverXPCItem_getSyntheticSyncMomentL(uint64_t a1, uint64_t a2)
{
  long long v2 = *MEMORY[0x1E4F1F9F8];
  long long v13 = *MEMORY[0x1E4F1F9F8];
  uint64_t v3 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v14 = v3;
  if (a2)
  {
    long long v11 = v2;
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(uint64_t (**)(uint64_t, long long *))(v7 + 32);
    if (v8)
    {
      uint64_t result = v8(a1, &v13);
      if (!result)
      {
        memset(&v12, 0, sizeof(v12));
        HostTimeClock = CMClockGetHostTimeClock();
        CMClockGetTime(&v12, HostTimeClock);
        uint64_t result = 0;
        *(void *)(a2 + 32) = v14;
        *(void *)(a2 + 56) = v12.epoch;
        *(void *)(a2 + 64) = 0x3FF0000000000000;
        *(void *)a2 = 0x200000078;
        *(void *)(a2 + 8) = 0;
        *(_OWORD *)(a2 + 16) = v13;
        *(_OWORD *)(a2 + 40) = *(_OWORD *)&v12.value;
        *(_OWORD *)(a2 + 72) = v11;
        *(void *)(a2 + 88) = v3;
        *(void *)(a2 + 112) = v3;
        *(_OWORD *)(a2 + 96) = v11;
      }
    }
    else
    {
      return 4294954514;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t fps_addSampleBuffersToMessage(void *a1, const char *a2, CFArrayRef theArray)
{
  CFIndex Count = CFArrayGetCount(theArray);
  xpc_object_t v7 = xpc_array_create(0, 0);
  if (Count >= 1)
  {
    CFIndex v8 = 0;
    long long v9 = (void *)*MEMORY[0x1E4F14408];
    while (1)
    {
      CFArrayGetValueAtIndex(theArray, v8);
      uint64_t SerializedAtomDataForSampleBuffer = FigRemote_CreateSerializedAtomDataForSampleBuffer();
      if (SerializedAtomDataForSampleBuffer) {
        goto LABEL_11;
      }
      long long v11 = dispatch_data_create(0, 0, 0, v9);
      if (!v11) {
        break;
      }
      CMTime v12 = v11;
      xpc_object_t v13 = xpc_data_create_with_dispatch_data(v11);
      dispatch_release(v12);
      if (!v13) {
        break;
      }
      xpc_array_append_value(v7, v13);
      xpc_release(v13);
      uint64_t v14 = 0;
LABEL_7:
      if (v14) {
        goto LABEL_13;
      }
      if (Count == ++v8) {
        goto LABEL_12;
      }
    }
    uint64_t SerializedAtomDataForSampleBuffer = FigSignalErrorAt();
LABEL_11:
    uint64_t v14 = SerializedAtomDataForSampleBuffer;
    goto LABEL_7;
  }
LABEL_12:
  xpc_dictionary_set_value(a1, a2, v7);
  uint64_t v14 = 0;
LABEL_13:
  FigXPCRelease();
  return v14;
}

void __HandlePlayerServerNoReplyMessage_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

uint64_t FPSupport_GetAudioSessionOutputChannelCount(uint64_t a1, int *a2)
{
  CFNumberRef number = 0;
  int valuePtr = 2;
  if (checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce == -1)
  {
    if (!a1) {
      return 4294948075;
    }
  }
  else
  {
    dispatch_once_f(&checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce, 0, (dispatch_function_t)checkPlayerAudioDeviceTraceCallback);
    if (!a1) {
      return 4294948075;
    }
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v4) {
    return 4294948075;
  }
  int v5 = *(uint64_t (**)(uint64_t, void, void, CFNumberRef *))(v4 + 48);
  if (!v5) {
    return 4294948071;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v7 = v5(a1, *MEMORY[0x1E4F76358], *MEMORY[0x1E4F1CF80], &number);
  CFNumberRef v8 = number;
  if (!v7)
  {
    if (number)
    {
      CFNumberGetValue(number, kCFNumberSInt32Type, &valuePtr);
      if (valuePtr >= 3)
      {
        long long v9 = FPSupport_CopyAudioSessionPreferredOutputChannelLayout(v6, a1);
        if (v9)
        {
          long long v10 = v9;
          unint64_t Length = CFDataGetLength(v9);
          if (Length <= 0xB)
          {
            CFRelease(v10);
          }
          else
          {
            UInt32 v12 = Length;
            BytePtr = (char *)CFDataGetBytePtr(v10);
            int HasVerticalHeightChannel = FPSupport_AudioChannelLayoutHasVerticalHeightChannel(BytePtr, v12);
            CFRelease(v10);
            if (HasVerticalHeightChannel) {
              int valuePtr = 16;
            }
          }
        }
      }
    }
    *a2 = valuePtr;
    CFNumberRef v8 = number;
  }
  if (v8) {
    CFRelease(v8);
  }
  return v7;
}

void FPSupport_CreateMaxSampleRateDictonary(const __CFAllocator *a1, int a2, const __CFData *a3, CFMutableDictionaryRef *a4, double a5)
{
  int valuePtr = a2;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (a3 && (CFTypeID v10 = CFGetTypeID(a3), v10 == CFDataGetTypeID()))
  {
    BytePtr = CFDataGetBytePtr(a3);
    if (BytePtr)
    {
      unint64_t v12 = CFDataGetLength(a3) / 0x38uLL;
      goto LABEL_7;
    }
  }
  else
  {
    BytePtr = 0;
  }
  unint64_t v12 = 0;
LABEL_7:
  if (a5 != 0.0 && v12 == 0)
  {
    if (!a2) {
      int valuePtr = 2;
    }
    CFNumberRef v21 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
    if (v21)
    {
      CFNumberRef v22 = v21;
      FigCFDictionarySetDouble();
      CFRelease(v22);
    }
    else
    {
LABEL_34:
      FigSignalErrorAt();
    }
  }
  else if (v12)
  {
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFTypeID v15 = BytePtr + 28;
    do
    {
      if ((*v15 & 0x80000000) == 0)
      {
        CFNumberRef v16 = CFNumberCreate(v14, kCFNumberSInt32Type, v15);
        if (!v16) {
          goto LABEL_34;
        }
        CFNumberRef v17 = v16;
        double v18 = *(double *)(v15 - 7);
        if (v18 == 0.0) {
          double v18 = *(double *)(v15 + 5);
        }
        if (v18 <= a5 || a5 == 0.0) {
          double v20 = v18;
        }
        else {
          double v20 = a5;
        }
        if (!FigCFDictionaryGetDoubleIfPresent() || v20 > 0.0) {
          FigCFDictionarySetDouble();
        }
        CFRelease(v17);
      }
      v15 += 14;
      --v12;
    }
    while (v12);
  }
  *a4 = Mutable;
}

void FPSupport_ReleasePassthroughHelper()
{
  if (checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce != -1) {
    dispatch_once_f(&checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce, 0, (dispatch_function_t)checkPlayerAudioDeviceTraceCallback);
  }
}

uint64_t FPSupport_GetAudioDeviceUIDFromPassthroughHelper()
{
  if (checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce != -1) {
    dispatch_once_f(&checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce, 0, (dispatch_function_t)checkPlayerAudioDeviceTraceCallback);
  }
  return 0;
}

uint64_t FPSupport_CreateFigSpatializationCapabilitiesFromSpatialAudioPreferences(uint64_t a1, CFAllocatorRef allocator, __CFDictionary **a3)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v7 = Mutable;
    CFMutableArrayRef v8 = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
    if (v8)
    {
      if (*(_DWORD *)(a1 + 12))
      {
        uint64_t v9 = 4;
        do
        {
          FigCFArrayAppendInt32();
          unint64_t v10 = *(unsigned int *)(a1 + 12);
          unint64_t v11 = v9 - 3;
          ++v9;
        }
        while (v11 < v10);
        if (v10 && *(unsigned char *)a1) {
          FigCFArrayAppendInt32();
        }
      }
      CFDictionarySetValue(v7, @"SpatialCapabilitiesKey_spatialAudioSources", v8);
      uint64_t v12 = FigCFDictionarySetInt32();
      if (!v12)
      {
        xpc_object_t v13 = (const void *)*MEMORY[0x1E4F1CFD0];
        CFAllocatorRef v14 = (const void *)*MEMORY[0x1E4F1CFC8];
        if (*(unsigned char *)(a1 + 1)) {
          CFTypeID v15 = (const void *)*MEMORY[0x1E4F1CFD0];
        }
        else {
          CFTypeID v15 = (const void *)*MEMORY[0x1E4F1CFC8];
        }
        CFDictionarySetValue(v7, @"SpatialCapabilitiesKey_prefersLossyAudioSources", v15);
        if (*(unsigned char *)(a1 + 2)) {
          CFNumberRef v16 = v13;
        }
        else {
          CFNumberRef v16 = v14;
        }
        CFDictionarySetValue(v7, @"SpatialCapabilitiesKey_alwaysSpatialize", v16);
        uint64_t v17 = 0;
        *a3 = v7;
LABEL_17:
        CFRelease(v8);
        return v17;
      }
    }
    else
    {
      uint64_t v12 = FigSignalErrorAt();
    }
    uint64_t v17 = v12;
    CFRelease(v7);
    if (!v8) {
      return v17;
    }
    goto LABEL_17;
  }

  return FigSignalErrorAt();
}

uint64_t FPSupport_CreateAudioSessionSpatializationCapabilities(uint64_t a1, int a2, CFTypeRef *a3)
{
  cf[20] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (a3)
  {
    if (FigGetCFPreferenceNumberWithDefault())
    {
      uint64_t FigSpatializationCapabilitiesFromSpatialAudioPreferences = FPSupport_CreateFigSpatializationCapabilitiesFromSpatialAudioPreferences((uint64_t)&unk_194997F08, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], (__CFDictionary **)cf);
      if (!FigSpatializationCapabilitiesFromSpatialAudioPreferences)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_9:
        uint64_t v9 = 0;
        *a3 = cf[0];
        return v9;
      }
      goto LABEL_17;
    }
    if (a2 == 1836019574)
    {
      CFMutableArrayRef v8 = kFigAudioSessionProperty_AudiovisualSpatializationCapabilities;
      if (!a1) {
        goto LABEL_15;
      }
    }
    else
    {
      if (a2 != 1936684398)
      {
        uint64_t FigSpatializationCapabilitiesFromSpatialAudioPreferences = FigSignalErrorAt();
        goto LABEL_17;
      }
      CFMutableArrayRef v8 = kFigAudioSessionProperty_AudioOnlySpatializationCapabilities;
      if (!a1) {
        goto LABEL_15;
      }
    }
    unint64_t v10 = *v8;
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11)
    {
      uint64_t v12 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v11 + 8);
      if (!v12)
      {
        uint64_t v9 = 4294948071;
LABEL_19:
        if (cf[0]) {
          CFRelease(cf[0]);
        }
        return v9;
      }
      uint64_t FigSpatializationCapabilitiesFromSpatialAudioPreferences = v12(a1, v10, *MEMORY[0x1E4F1CF80], cf);
      if (!FigSpatializationCapabilitiesFromSpatialAudioPreferences) {
        goto LABEL_9;
      }
LABEL_17:
      uint64_t v9 = FigSpatializationCapabilitiesFromSpatialAudioPreferences;
      goto LABEL_19;
    }
LABEL_15:
    uint64_t v9 = 4294948075;
    goto LABEL_19;
  }

  return FigSignalErrorAt();
}

__CFString *FPSupport_GetAudioSpatializationPreferencesMonitor()
{
  if (FPSupport_GetAudioSpatializationPreferencesMonitor_onceToken != -1) {
    dispatch_once(&FPSupport_GetAudioSpatializationPreferencesMonitor_onceToken, &__block_literal_global_51);
  }
  return @"AudioSpatializationPreferencesChanged";
}

uint64_t FPSupport_CanUseCMSession()
{
  return in_audio_mx_server_process();
}

void FPSupport_AudioSpatializationPreferencesChanged()
{
  if (FPSupport_AudioSpatializationPreferencesChanged_onceToken != -1) {
    dispatch_once(&FPSupport_AudioSpatializationPreferencesChanged_onceToken, &__block_literal_global_37_0);
  }
  uint64_t v0 = FPSupport_AudioSpatializationPreferencesChanged_sAudioSpatializationPreferencesChangedQueue;

  dispatch_async(v0, &__block_literal_global_41_1);
}

uint64_t FPSupport_AudioChannelLayoutHasVerticalHeightChannel(char *inSpecifier, UInt32 a2)
{
  p_int outPropertyData = (uint64_t)inSpecifier;
  AudioFormatPropertyID v3 = 1668116588;
  int outPropertyData = -65536;
  if (*(_DWORD *)inSpecifier == 0x10000)
  {
    p_int outPropertyData = (uint64_t)(inSpecifier + 4);
    AudioFormatPropertyID v3 = 1668116578;
    goto LABEL_11;
  }
  if (*(_DWORD *)inSpecifier)
  {
LABEL_11:
    UInt32 v6 = 4;
    goto LABEL_12;
  }
  uint64_t v4 = *((unsigned int *)inSpecifier + 2);
  if (v4)
  {
    uint64_t v5 = 0;
    while (!*(_DWORD *)&inSpecifier[v5 + 12] || (inSpecifier[v5 + 16] & 3) == 0)
    {
      v5 += 20;
      if (20 * v4 == v5) {
        goto LABEL_8;
      }
    }
    CFMutableArrayRef v8 = 0;
    goto LABEL_17;
  }
LABEL_8:
  UInt32 ioPropertyDataSize = 4;
  if (AudioFormatGetProperty(0x636D7074u, a2, inSpecifier, &ioPropertyDataSize, &outPropertyData))
  {
    FigSignalErrorAt();
    return 0;
  }
  UInt32 v6 = ioPropertyDataSize;
  p_int outPropertyData = (uint64_t)&outPropertyData;
LABEL_12:
  UInt32 outPropertyDataSize = 0;
  if (AudioFormatGetPropertyInfo(v3, v6, (const void *)p_outPropertyData, &outPropertyDataSize))
  {
    CFMutableArrayRef v8 = 0;
LABEL_32:
    FigSignalErrorAt();
    goto LABEL_25;
  }
  CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], outPropertyDataSize);
  CFMutableArrayRef v8 = Mutable;
  if (!Mutable) {
    goto LABEL_25;
  }
  CFDataSetLength(Mutable, outPropertyDataSize);
  MutableBytePtr = CFDataGetMutableBytePtr(v8);
  if (AudioFormatGetProperty(v3, v6, (const void *)p_outPropertyData, &outPropertyDataSize, MutableBytePtr)) {
    goto LABEL_32;
  }
  BytePtr = CFDataGetBytePtr(v8);
  p_int outPropertyData = (uint64_t)BytePtr;
  if (!BytePtr) {
    goto LABEL_28;
  }
  LODWORD(v4) = *((_DWORD *)BytePtr + 2);
  if (!v4)
  {
LABEL_25:
    p_int outPropertyData = 0;
    if (v8) {
      goto LABEL_28;
    }
    return p_outPropertyData;
  }
LABEL_17:
  uint64_t v4 = v4;
  uint64_t v11 = (float *)(p_outPropertyData + 28);
  while (1)
  {
    if (!*((_DWORD *)v11 - 4)) {
      goto LABEL_24;
    }
    int v12 = *((_DWORD *)v11 - 3);
    if (v12) {
      break;
    }
    if ((v12 & 2) != 0)
    {
      float v13 = *(v11 - 1);
      goto LABEL_23;
    }
LABEL_24:
    v11 += 5;
    if (!--v4) {
      goto LABEL_25;
    }
  }
  float v13 = *v11;
LABEL_23:
  if (v13 <= 0.0) {
    goto LABEL_24;
  }
  p_int outPropertyData = 1;
  if (v8) {
LABEL_28:
  }
    CFRelease(v8);
  return p_outPropertyData;
}

__CFData *FPSupport_CopyAudioSessionPreferredOutputChannelLayout(const __CFAllocator *a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  if (checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce == -1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_18:
    FigSignalErrorAt();
    goto LABEL_19;
  }
  dispatch_once_f(&checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce, 0, (dispatch_function_t)checkPlayerAudioDeviceTraceCallback);
  if (!a2) {
    goto LABEL_18;
  }
LABEL_3:
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (!v4) {
    goto LABEL_18;
  }
  uint64_t v5 = *(unsigned int (**)(uint64_t, void, void, CFDictionaryRef *))(v4 + 48);
  if (!v5 || v5(a2, *MEMORY[0x1E4F76100], *MEMORY[0x1E4F1CF80], &theDict)) {
    goto LABEL_18;
  }
  if (!theDict) {
    return 0;
  }
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F76880]);
  if (!Value) {
    goto LABEL_18;
  }
  CFArrayRef v7 = Value;
  if (CFArrayGetCount(Value) <= 0) {
    goto LABEL_18;
  }
  CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, 0);
  CFArrayRef v9 = (const __CFArray *)CFDictionaryGetValue(ValueAtIndex, (const void *)*MEMORY[0x1E4F76828]);
  if (!v9) {
    goto LABEL_18;
  }
  CFIndex Count = CFArrayGetCount(v9);
  if (Count <= 0) {
    goto LABEL_18;
  }
  CFIndex v11 = Count;
  CFIndex v12 = 20 * Count + 12;
  CFMutableDictionaryRef Mutable = CFDataCreateMutable(a1, v12);
  CFAllocatorRef v14 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, v12);
    MutableBytePtr = CFDataGetMutableBytePtr(v14);
    *(_DWORD *)MutableBytePtr = 0;
    FigCFArrayApplyFunction();
    if (v11 != *((_DWORD *)MutableBytePtr + 2) && FigSignalErrorAt())
    {
      CFRelease(v14);
LABEL_19:
      CFAllocatorRef v14 = 0;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  if (theDict) {
    CFRelease(theDict);
  }
  return v14;
}

uint64_t PopulateACLWithChannelLabels(uint64_t a1, uint64_t a2)
{
  uint64_t result = FigCFDictionaryGetInt32IfPresent();
  int v4 = 0;
  if (!result) {
    int v4 = -1;
  }
  unsigned int v5 = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 20 * v5 + 12) = v4;
  *(_DWORD *)(a2 + 8) = v5 + 1;
  return result;
}

uint64_t FPSupport_GetPlaintextAudioFormatForEncryptedFormatID(unsigned int a1)
{
  unsigned int inSpecifier = a1;
  uint64_t outPropertyData = 0;
  UInt32 ioPropertyDataSize = 8;
  if (checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce != -1) {
    dispatch_once_f(&checkPlayerAudioDeviceTrace_checkPlayerAudioDeviceTraceOnce, 0, (dispatch_function_t)checkPlayerAudioDeviceTraceCallback);
  }
  OSStatus Property = AudioFormatGetProperty(0x66696569u, 4u, &inSpecifier, &ioPropertyDataSize, &outPropertyData);
  if (ioPropertyDataSize) {
    BOOL v3 = Property == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3) {
    return outPropertyData;
  }
  else {
    return a1;
  }
}

uint64_t FPSupport_IsAnAudioDeviceAvailable(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    long long v2 = (const void *)*MEMORY[0x1E4F1CFC8];
    UInt32 v6 = (const void *)*MEMORY[0x1E4F1CFC8];
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v3)
    {
      int v4 = *(void (**)(uint64_t, __CFString *, void, const void **))(v3 + 8);
      if (v4)
      {
        v4(v1, @"FAS_AudioDeviceIsAvailable", *MEMORY[0x1E4F1CF80], &v6);
        long long v2 = v6;
      }
    }
    if (v2) {
      CFRelease(v2);
    }
    if (fpSupport_isAnAudioDeviceAssumedAvailable_onceToken != -1) {
      dispatch_once(&fpSupport_isAnAudioDeviceAssumedAvailable_onceToken, &__block_literal_global_44);
    }
    if ((fpSupport_isAnAudioDeviceAssumedAvailable_sAssumeAudioDeviceAvailableViaEnvVar & 1) != 0
      || fpSupport_isAnAudioDeviceAssumedAvailable_sAssumeAudioDeviceAvailableViaDefaults)
    {
      char v5 = 1;
      fpSupport_isAnAudioDeviceAssumedAvailable_sAssumeAudioDeviceAvailable = 1;
    }
    else
    {
      char v5 = fpSupport_isAnAudioDeviceAssumedAvailable_sAssumeAudioDeviceAvailable | (v2 == (const void *)*MEMORY[0x1E4F1CFD0]);
    }
    return v5 & 1;
  }
  return result;
}

uint64_t __fpSupport_isAnAudioDeviceAssumedAvailable_block_invoke()
{
  uint64_t v0 = getenv("coremedia_assume_audio_device_available");
  if (v0 && !strcmp(v0, "true")) {
    fpSupport_isAnAudioDeviceAssumedAvailable_sAssumeAudioDeviceAvailableViaEnvVar = 1;
  }
  uint64_t result = FigGetCFPreferenceBooleanWithDefault();
  fpSupport_isAnAudioDeviceAssumedAvailable_sAssumeAudioDeviceAvailableViaDefaults = result;
  return result;
}

uint64_t FigStreamingAssetDownloadCacheTranslatorGetClassID()
{
  return sFigStreamingAssetDownloadCacheTranslatorClassID;
}

uint64_t RegisterFigStreamingAssetDownloadCacheTranslatorBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigStreamingAssetDownloadCacheTranslatorGetTypeID()
{
  MEMORY[0x19970EE10](&FigStreamingAssetDownloadCacheTranslatorGetClassID_sRegisterFigStreamingAssetDownloadCacheTranslatorBaseTypeOnce, RegisterFigStreamingAssetDownloadCacheTranslatorBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigStreamingAssetDownloadCacheTranslatorCreate(uint64_t a1, const void *a2, char a3, CFTypeRef *a4)
{
  CFTypeRef v18 = 0;
  CFTypeRef cf = 0;
  CFArrayRef v7 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (!a2 || !a4 || !FigCFURLIsLocalResource()) {
    goto LABEL_18;
  }
  MEMORY[0x19970EE10](&FigStreamingAssetDownloadCacheTranslatorGetClassID_sRegisterFigStreamingAssetDownloadCacheTranslatorBaseTypeOnce, RegisterFigStreamingAssetDownloadCacheTranslatorBaseType);
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8) {
    goto LABEL_19;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 16) = a3;
  *(void *)(DerivedStorage + 8) = CFRetain(a2);
  CFAllocatorRef v10 = CFGetAllocator(cf);
  uint64_t v8 = FigHLSPersistentStoreCreateAtURL(v10, (uint64_t)a2, 0, 1, &v18);
  if (v8) {
    goto LABEL_19;
  }
  uint64_t v11 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 24) = v11;
  if (!v11 || (dispatch_queue_t v12 = dispatch_queue_create("com.apple.coremedia.downloadtranslator.ioqueue", 0)) == 0)
  {
LABEL_18:
    uint64_t v8 = FigSignalErrorAt();
LABEL_19:
    uint64_t v16 = v8;
    goto LABEL_13;
  }
  float v13 = v12;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  CFTypeRef v14 = cf;
  if (cf) {
    CFTypeRef v14 = CFRetain(cf);
  }
  void *v7 = v14;
  CFTypeRef v15 = v18;
  if (v18) {
    CFTypeRef v15 = CFRetain(v18);
  }
  v7[1] = v15;
  dispatch_async_f(v13, v7, (dispatch_function_t)fsadct_PrepareOfflinePlayableAlternatesAndWritePlaylistsDispatchFunction);
  *a4 = cf;
  CFTypeRef cf = 0;
  dispatch_release(v13);
  uint64_t v16 = 0;
  CFArrayRef v7 = 0;
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v18) {
    CFRelease(v18);
  }
  free(v7);
  return v16;
}

void fsadct_PrepareOfflinePlayableAlternatesAndWritePlaylistsDispatchFunction(const __CFString **a1)
{
  CFStringRef v2 = *a1;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef v4 = a1[1];
  uint64_t v5 = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(const __CFString *, uint64_t, void))(v7 + 16);
  if (!v8)
  {
    CFArrayRef v15 = 0;
    CFStringRef v16 = 0;
LABEL_40:
    int v23 = -12782;
    goto LABEL_41;
  }
  int v9 = v8(v4, 1, 0);
  if (v9)
  {
    int v23 = v9;
    CFArrayRef v15 = 0;
    CFStringRef v16 = 0;
    goto LABEL_41;
  }
  CFAllocatorRef v10 = CFGetAllocator(v2);
  URLString[0] = 0;
  values = 0;
  keys[0] = 0;
  LODWORD(v146) = 0;
  uint64_t v11 = CMBaseObjectGetDerivedStorage();
  uint64_t FigBaseObject = FigHLSPersistentStoreGetFigBaseObject(v4);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v14 + 48);
  if (!v17)
  {
    CFStringRef v16 = 0;
    int v23 = -12782;
    goto LABEL_25;
  }
  int v18 = v17(FigBaseObject, @"MasterPlaylistNetworkURL", v10, keys);
  if (!v18)
  {
    CFURLRef v19 = CFURLCreateWithString(v10, (CFStringRef)keys[0], 0);
    if (v19)
    {
      CFURLRef v20 = v19;
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v21) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t v24 = *(uint64_t (**)(const __CFString *, __CFString *, void, void, void, void **))(v22 + 48);
      if (v24)
      {
        int v25 = v24(v4, @"NetworkPlaylist", 0, 0, 0, &values);
        if (v25)
        {
          int v23 = v25;
        }
        else
        {
          int v23 = FigStreamPlaylistParse((OpaqueCMBlockBuffer *)values, v20, 0, &v146, 0, 0, 1, *(unsigned __int8 *)(v11 + 16), 0, 0, 0, 0, (uint64_t *)URLString, 0);
          CFStringRef v16 = URLString[0];
          if (!v23)
          {
            if (!URLString[0])
            {
              int v23 = 0;
              goto LABEL_24;
            }
            uint64_t Alternates = FigMultivariantPlaylistGetAlternates((uint64_t)URLString[0]);
            CFStringRef v16 = URLString[0];
            if (Alternates)
            {
              int v23 = 0;
              URLString[0] = 0;
LABEL_24:
              CFRelease(v20);
              goto LABEL_25;
            }
          }
          if (!v16) {
            goto LABEL_24;
          }
          CFRelease(v16);
        }
        CFStringRef v16 = 0;
        goto LABEL_24;
      }
      CFStringRef v16 = 0;
      int v23 = -12782;
      goto LABEL_24;
    }
    int v18 = FigSignalErrorAt();
  }
  int v23 = v18;
  CFStringRef v16 = 0;
LABEL_25:
  if (values) {
    CFRelease(values);
  }
  if (keys[0]) {
    CFRelease(keys[0]);
  }
  if (v23) {
    goto LABEL_264;
  }
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = *(uint64_t (**)(const __CFString *, uint64_t, void))(v28 + 16);
  if (!v29)
  {
    CFArrayRef v15 = 0;
    goto LABEL_40;
  }
  int v30 = v29(v4, 0xFFFFFFFFLL, 0);
  if (v30)
  {
    int v23 = v30;
LABEL_264:
    CFArrayRef v15 = 0;
    goto LABEL_41;
  }
  CFArrayRef v146 = 0;
  uint64_t v136 = v5;
  if (!v16 || !FigMultivariantPlaylistGetAlternates((uint64_t)v16))
  {
    CFArrayRef v15 = 0;
    goto LABEL_87;
  }
  URLString[0] = 0;
  values = 0;
  keys[0] = 0;
  uint64_t v31 = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v32 = CFGetAllocator(v2);
  uint64_t v33 = FigHLSPersistentStoreGetFigBaseObject(v4);
  uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v34) {
    uint64_t v35 = v34;
  }
  else {
    uint64_t v35 = 0;
  }
  CMTime v39 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, CFStringRef *))(v35 + 48);
  if (!v39)
  {
    CFTypeID v48 = 0;
    CFDictionaryRef v45 = 0;
    CFURLRef v42 = 0;
    int v23 = -12782;
LABEL_65:
    uint64_t v5 = v136;
    goto LABEL_66;
  }
  int v40 = v39(v33, @"MasterPlaylistNetworkURL", v32, URLString);
  if (v40)
  {
    int v23 = v40;
    CFTypeID v48 = 0;
    CFDictionaryRef v45 = 0;
    CFURLRef v42 = 0;
    goto LABEL_65;
  }
  CFAllocatorRef v41 = CFGetAllocator(v2);
  CFURLRef v42 = CFURLCreateWithString(v41, URLString[0], 0);
  uint64_t v43 = (void *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionaryRef v45 = Mutable;
  if (!Mutable)
  {
    int v47 = FigSignalErrorAt();
    goto LABEL_249;
  }
  CFDictionarySetValue(Mutable, @"FSC_DownloadDestinationURL", *(const void **)(v31 + 8));
  CFAllocatorRef v46 = CFGetAllocator(v2);
  int v47 = FigStreamingCacheCreate(v46, v42, v45, (uint64_t *)keys);
  if (v47)
  {
LABEL_249:
    int v23 = v47;
    CFTypeID v48 = 0;
    goto LABEL_65;
  }
  int v23 = FigAlternateOfflinePlayableForMediaSelectionFilterCreate(v43, (uint64_t)keys[0], 0, 0, &values);
  uint64_t v5 = v136;
  if (v23)
  {
    CFTypeID v48 = 0;
  }
  else
  {
    CFTypeID v48 = values;
    values = 0;
  }
LABEL_66:
  if (keys[0]) {
    CFRelease(keys[0]);
  }
  if (v45) {
    CFRelease(v45);
  }
  if (values) {
    CFRelease(values);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (URLString[0]) {
    CFRelease(URLString[0]);
  }
  if (v23)
  {
    CFArrayRef v15 = 0;
  }
  else
  {
    uint64_t v49 = FigMultivariantPlaylistGetAlternates((uint64_t)v16);
    uint64_t v50 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v50) {
      uint64_t v51 = v50;
    }
    else {
      uint64_t v51 = 0;
    }
    uint64_t v52 = *(uint64_t (**)(void *, uint64_t, const __CFArray **))(v51 + 24);
    if (v52)
    {
      int v23 = v52(v48, v49, &v146);
      CFArrayRef v15 = v146;
      if (v23)
      {
        if (v146)
        {
          CFRelease(v146);
          CFArrayRef v15 = 0;
        }
        uint64_t v5 = v136;
      }
      else
      {
        CFArrayRef v146 = 0;
      }
    }
    else
    {
      CFArrayRef v15 = 0;
      int v23 = -12782;
    }
  }
  if (v48) {
    CFRelease(v48);
  }
  if (!v23)
  {
LABEL_87:
    uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v53) {
      uint64_t v54 = v53;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v55 = *(unsigned int (**)(const __CFString *, uint64_t, uint64_t))(v54 + 16);
    if (!v55 || v55(v4, 1, 1))
    {
      int v23 = FigSignalErrorAt();
      goto LABEL_41;
    }
    uint64_t v135 = DerivedStorage;
    CFAllocatorRef v56 = CFGetAllocator(v2);
    CFSetRef v57 = CFSetCreateMutable(v56, 0, MEMORY[0x1E4F1D548]);
    CFAllocatorRef v58 = CFGetAllocator(v2);
    URLString[0] = 0;
    keys[0] = 0;
    CFMutableDictionaryRef v59 = CFDictionaryCreateMutable(v58, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (v59)
    {
      CFMutableDictionaryRef v60 = v59;
      uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v61) {
        uint64_t v62 = v61;
      }
      else {
        uint64_t v62 = 0;
      }
      int v63 = *(uint64_t (**)(const __CFString *, CFStringRef *))(v62 + 24);
      if (v63)
      {
        int v64 = v63(v4, URLString);
        if (!v64)
        {
          for (CFIndex i = 0; ; ++i)
          {
            CFStringRef Count = URLString[0];
            if (URLString[0]) {
              CFStringRef Count = (CFStringRef)CFArrayGetCount((CFArrayRef)URLString[0]);
            }
            if (i >= (uint64_t)Count) {
              break;
            }
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)URLString[0], i);
            uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v68) {
              uint64_t v69 = v68;
            }
            else {
              uint64_t v69 = 0;
            }
            CFTypeID v70 = *(uint64_t (**)(const __CFString *, const void *, void **))(v69 + 72);
            if (!v70) {
              goto LABEL_111;
            }
            int v64 = v70(v4, ValueAtIndex, keys);
            if (v64) {
              goto LABEL_262;
            }
            FigCFDictionarySetValue();
            if (keys[0])
            {
              CFRelease(keys[0]);
              keys[0] = 0;
            }
          }
          int v23 = 0;
          CFDictionaryRef v71 = v60;
          goto LABEL_114;
        }
LABEL_262:
        int v23 = v64;
      }
      else
      {
LABEL_111:
        int v23 = -12782;
      }
      CFRelease(v60);
    }
    else
    {
      int v23 = FigSignalErrorAt();
    }
    CFDictionaryRef v71 = 0;
LABEL_114:
    if (URLString[0]) {
      CFRelease(URLString[0]);
    }
    if (v23) {
      goto LABEL_234;
    }
    if (v16)
    {
      CFAllocatorRef v72 = CFGetAllocator(v2);
      CFTypeID v73 = CFStringCreateMutable(v72, 0);
      if (!v73) {
        goto LABEL_252;
      }
      uint64_t v74 = v73;
      CFStringAppendFormat(v73, 0, @"%s\n", "#EXTM3U");
      if (FigMultivariantPlaylistGetVersion((uint64_t)v16))
      {
        uint64_t Version = FigMultivariantPlaylistGetVersion((uint64_t)v16);
        CFStringAppendFormat(v74, 0, @"%s:%u\n", "#EXT-X-VERSION", Version);
      }
      if (FigMultivariantPlaylistHasIndependentSegments((uint64_t)v16)) {
        CFStringAppendFormat(v74, 0, @"%s\n", "#EXT-X-INDEPENDENT-SEGMENTS");
      }
      long long v141 = 0u;
      URLString[0] = v2;
      URLString[1] = v4;
      *(void *)&long long v140 = v71;
      *((void *)&v140 + 1) = v74;
      CFStringRef v142 = v16;
      CFSetRef v143 = v57;
      uint64_t v144 = 0;
      CFDictionaryRef AudioGroups = (const __CFDictionary *)FigMultivariantPlaylistGetAudioGroups((uint64_t)v16);
      int v77 = fsadct_WritePlaylistsForMediaTypeToMovpkgAndAddToMutlivariantPlaylist(URLString, v74, AudioGroups, 1936684398);
      if (v77
        || (CFDictionaryRef SubtitleGroups = (const __CFDictionary *)FigMultivariantPlaylistGetSubtitleGroups((uint64_t)v16),
            (int v77 = fsadct_WritePlaylistsForMediaTypeToMovpkgAndAddToMutlivariantPlaylist(URLString, v74, SubtitleGroups, 1935832172)) != 0)|| (ClosedCaptionGroups = (const __CFDictionary *)FigMultivariantPlaylistGetClosedCaptionGroups((uint64_t)v16), (int v77 = fsadct_WritePlaylistsForMediaTypeToMovpkgAndAddToMutlivariantPlaylist(URLString, v74, ClosedCaptionGroups, 1668047728)) != 0)|| (VideoGroups = (const __CFDictionary *)FigMultivariantPlaylistGetVideoGroups((uint64_t)v16), (int v77 = fsadct_WritePlaylistsForMediaTypeToMovpkgAndAddToMutlivariantPlaylist(URLString, v74, VideoGroups, 1986618469)) != 0))
      {
        int v23 = v77;
        goto LABEL_233;
      }
    }
    else
    {
      uint64_t v74 = 0;
    }
    values = 0;
    keys[0] = 0;
    *(void *)&long long v141 = 0;
    *(_OWORD *)URLString = 0u;
    long long v140 = 0u;
    if (!v71) {
      goto LABEL_256;
    }
    if (v15)
    {
      if (CFArrayGetCount(v15) >= 1)
      {
        CFDictionaryRef v137 = v71;
        CFIndex v81 = 0;
        while (1)
        {
          uint64_t v82 = (__CFString *)CFArrayGetValueAtIndex(v15, v81);
          CFURLRef URLForCacheLookup = (const __CFURL *)FigAlternateGetURLForCacheLookup((uint64_t)v82);
          int MediaPlaylistWriterHelper = fsadct_CopyPersistentStreamIDFromNetworkURL(v137, URLForCacheLookup, (CFTypeRef *)&values);
          if (MediaPlaylistWriterHelper) {
            break;
          }
          CFAllocatorRef v85 = CFGetAllocator(v2);
          int MediaPlaylistWriterHelper = fsadct_MakeMediaPlaylistWriterHelper(v85, (int)v2, (uint64_t)v4, values, URLString);
          if (MediaPlaylistWriterHelper) {
            break;
          }
          int MediaPlaylistWriterHelper = fsadct_EnsureArrayOfWriteLockedPersistentStreamInfosAndAddEntry(v2, URLString[0]);
          if (MediaPlaylistWriterHelper) {
            break;
          }
          int MediaPlaylistWriterHelper = fsadct_WriteMediaPlaylistAndAddToMovpkg(v2, (uint64_t)URLString, (uint64_t)v16);
          if (MediaPlaylistWriterHelper) {
            break;
          }
          if (v16 && FigMultivariantPlaylistGetAlternates((uint64_t)v16))
          {
            if (v57 && v74 && v82)
            {
              if (!FigAlternateGetAudioGroupIDString((uint64_t)v82)
                || FigAlternateIsAudioGroupSynthesized((uint64_t)v82)
                || (int v86 = (const void *)FigAlternateGetAudioGroupIDString((uint64_t)v82), CFSetContainsValue(v57, v86)))
              {
                if (!FigAlternateGetSubtitleGroupIDString((uint64_t)v82)
                  || FigAlternateIsSubtitleGroupSynthesized((uint64_t)v82)
                  || (CFTypeID v87 = (const void *)FigAlternateGetSubtitleGroupIDString((uint64_t)v82),
                      CFSetContainsValue(v57, v87)))
                {
                  if (!FigAlternateGetVideoGroupIDString((uint64_t)v82)
                    || FigAlternateIsVideoGroupSynthesized((uint64_t)v82)
                    || (int32_t v88 = (const void *)FigAlternateGetVideoGroupIDString((uint64_t)v82), CFSetContainsValue(v57, v88)))
                  {
                    CFStringAppendFormat(v74, 0, @"%s:", "#EXT-X-STREAM-INF");
                    uint64_t PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)v82);
                    CFStringAppendFormat(v74, 0, @"%s=%d", "BANDWIDTH", PeakBitRate);
                    if ((int)FigAlternateGetAverageBitRate((uint64_t)v82) >= 1)
                    {
                      uint64_t AverageBitRate = FigAlternateGetAverageBitRate((uint64_t)v82);
                      CFStringAppendFormat(v74, 0, @",%s=%d", "AVERAGE-BANDWIDTH", AverageBitRate);
                    }
                    FigAlternateGetVideoRangeString(v82);
                    if (!FigCFEqual())
                    {
                      VideoRangeString = FigAlternateGetVideoRangeString(v82);
                      CFStringAppendFormat(v74, 0, @",%s=%@", "VIDEO-RANGE", VideoRangeString);
                    }
                    uint64_t CodecString = FigAlternateGetCodecString((uint64_t)v82);
                    CFStringAppendFormat(v74, 0, @",%s=\"%@\"", "CODECS", CodecString);
                    FigAlternateGetResolution((uint64_t)v82);
                    if (v93 != 0.0 && FigAlternateGetResolution((uint64_t)v82) != 0.0)
                    {
                      unint64_t Resolution = (unint64_t)FigAlternateGetResolution((uint64_t)v82);
                      double v95 = FigAlternateGetResolution((uint64_t)v82);
                      CFStringAppendFormat(v74, 0, @",%s=%llux%llu", v95, "RESOLUTION", Resolution, (unint64_t)v96);
                    }
                    if (FigAlternateGetFrameRate((uint64_t)v82) > 0.0)
                    {
                      double FrameRate = FigAlternateGetFrameRate((uint64_t)v82);
                      CFStringAppendFormat(v74, 0, @",%s=%f", "FRAME-RATE", *(void *)&FrameRate);
                    }
                    if (FigAlternateGetClosedCaptionGroupIDString((uint64_t)v82))
                    {
                      ClosedCaptionGroupIDString = (const void *)FigAlternateGetClosedCaptionGroupIDString((uint64_t)v82);
                      if (CFSetContainsValue(v57, ClosedCaptionGroupIDString))
                      {
                        uint64_t v99 = FigAlternateGetClosedCaptionGroupIDString((uint64_t)v82);
                        CFStringAppendFormat(v74, 0, @",%s=\"%@\"", "CLOSED-CAPTIONS", v99);
                      }
                    }
                    if (FigAlternateGetAudioGroupIDString((uint64_t)v82))
                    {
                      AudioGroupIDString = (const void *)FigAlternateGetAudioGroupIDString((uint64_t)v82);
                      if (CFSetContainsValue(v57, AudioGroupIDString))
                      {
                        uint64_t v101 = FigAlternateGetAudioGroupIDString((uint64_t)v82);
                        CFStringAppendFormat(v74, 0, @",%s=\"%@\"", "AUDIO", v101);
                      }
                    }
                    if (FigAlternateGetSubtitleGroupIDString((uint64_t)v82))
                    {
                      SubtitleGroupIDString = (const void *)FigAlternateGetSubtitleGroupIDString((uint64_t)v82);
                      if (CFSetContainsValue(v57, SubtitleGroupIDString))
                      {
                        uint64_t v103 = FigAlternateGetSubtitleGroupIDString((uint64_t)v82);
                        CFStringAppendFormat(v74, 0, @",%s=\"%@\"", "SUBTITLES", v103);
                      }
                    }
                    if (FigAlternateGetVideoGroupIDString((uint64_t)v82))
                    {
                      VideoGroupIDString = (const void *)FigAlternateGetVideoGroupIDString((uint64_t)v82);
                      if (CFSetContainsValue(v57, VideoGroupIDString))
                      {
                        uint64_t v105 = FigAlternateGetVideoGroupIDString((uint64_t)v82);
                        CFStringAppendFormat(v74, 0, @",%s=\"%@\"", "VIDEO", v105);
                      }
                    }
                    int HDCPLevel = FigAlternateGetHDCPLevel((uint64_t)v82);
                    if (HDCPLevel != -2)
                    {
                      PlaylistStringFromint HDCPLevel = FigAlternateGetPlaylistStringFromHDCPLevel(HDCPLevel);
                      CFStringAppendFormat(v74, 0, @",%s=%@", "HDCP-LEVEL", PlaylistStringFromHDCPLevel);
                    }
                    if (FigAlternateGetStableStreamIdentifier((uint64_t)v82))
                    {
                      uint64_t StableStreamIdentifier = FigAlternateGetStableStreamIdentifier((uint64_t)v82);
                      CFStringAppendFormat(v74, 0, @",%s=\"%@\"", "STABLE-VARIANT-ID", StableStreamIdentifier);
                    }
                    CFStringAppendFormat(v74, 0, @"\n../%@/%@\n", URLString[1], (void)v140);
                  }
                }
              }
            }
            else
            {
              int MediaPlaylistWriterHelper = FigSignalErrorAt();
              if (MediaPlaylistWriterHelper) {
                break;
              }
            }
          }
          fsadct_DestroyMediaPlaylistWriterHelper((uint64_t)URLString);
          if (values)
          {
            CFRelease(values);
            values = 0;
          }
          if (++v81 >= CFArrayGetCount(v15))
          {
            int v23 = 0;
            goto LABEL_185;
          }
        }
        int v23 = MediaPlaylistWriterHelper;
LABEL_185:
        CFDictionaryRef v71 = v137;
LABEL_193:
        fsadct_DestroyMediaPlaylistWriterHelper((uint64_t)URLString);
        if (values) {
          CFRelease(values);
        }
        if (!v16 || v23)
        {
LABEL_232:
          if (!v74)
          {
LABEL_234:
            if (v71) {
              CFRelease(v71);
            }
            uint64_t DerivedStorage = v135;
            if (v57) {
              CFRelease(v57);
            }
            uint64_t v5 = v136;
            goto LABEL_41;
          }
LABEL_233:
          CFRelease(v74);
          goto LABEL_234;
        }
        CMBlockBufferRef blockBufferOut = 0;
        CFArrayRef v146 = 0;
        if (v74)
        {
          CFDictionaryRef v138 = v71;
          CFAllocatorRef v111 = CFGetAllocator(v2);
          int appended = CMBlockBufferCreateEmpty(v111, 0, 0, &blockBufferOut);
          if (!appended)
          {
            CFGetAllocator(v2);
            uint64_t BytesFromCFString = FigCreateBytesFromCFString();
            if (BytesFromCFString)
            {
              uint64_t v114 = (void *)BytesFromCFString;
              uint64_t v115 = blockBufferOut;
              size_t v116 = (size_t)v146;
              CFAllocatorRef v117 = CFGetAllocator(v2);
              int appended = CMBlockBufferAppendMemoryBlock(v115, v114, v116, v117, 0, 0, (size_t)v146, 0);
              if (!appended)
              {
                CMBlockBufferRef v118 = blockBufferOut;
                uint64_t v119 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v119) {
                  uint64_t v120 = v119;
                }
                else {
                  uint64_t v120 = 0;
                }
                int v121 = *(uint64_t (**)(const __CFString *, __CFString *, __CFString *, void, CMBlockBufferRef))(v120 + 40);
                if (!v121)
                {
                  int v23 = -12782;
LABEL_211:
                  CFDictionaryRef v71 = v138;
LABEL_230:
                  if (blockBufferOut) {
                    CFRelease(blockBufferOut);
                  }
                  goto LABEL_232;
                }
                int appended = v121(v4, @"OfflineAvailableMedia", @"LocallyHostedPlaylist.m3u8", 0, v118);
                if (!appended)
                {
                  URLString[0] = 0;
                  values = 0;
                  keys[0] = 0;
                  uint64_t v122 = (CFURLRef *)CMBaseObjectGetDerivedStorage();
                  if (*v122)
                  {
                    int v23 = 0;
                  }
                  else
                  {
                    if (!v4)
                    {
LABEL_259:
                      int v127 = FigSignalErrorAt();
                      goto LABEL_260;
                    }
                    uint64_t v123 = v122;
                    uint64_t v124 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v124) {
                      uint64_t v125 = v124;
                    }
                    else {
                      uint64_t v125 = 0;
                    }
                    long long v126 = *(uint64_t (**)(const __CFString *, __CFString *, void **, CFStringRef *, void, void))(v125 + 48);
                    if (v126)
                    {
                      int v127 = v126(v4, @"OfflineAvailableMedia", keys, URLString, 0, 0);
                      if (v127)
                      {
LABEL_260:
                        int v23 = v127;
                        goto LABEL_224;
                      }
                      CFAllocatorRef v128 = CFGetAllocator(v2);
                      uint64_t v129 = FigHLSPersistentStoreGetFigBaseObject(v4);
                      uint64_t v130 = *(void *)(CMBaseObjectGetVTable() + 8);
                      uint64_t v131 = v130 ? v130 : 0;
                      uint64_t v132 = *(uint64_t (**)(uint64_t, __CFString *, CFAllocatorRef, void **))(v131 + 48);
                      if (v132)
                      {
                        int v23 = v132(v129, @"DataDirectory", v128, &values);
                        if (v23) {
                          goto LABEL_224;
                        }
                        CFAllocatorRef v133 = CFGetAllocator(v2);
                        CFURLRef v134 = CFURLCreateCopyAppendingPathComponent(v133, (CFURLRef)values, URLString[0], 0);
                        *uint64_t v123 = v134;
                        if (v134) {
                          goto LABEL_224;
                        }
                        goto LABEL_259;
                      }
                    }
                    int v23 = -12782;
                  }
LABEL_224:
                  CFDictionaryRef v71 = v138;
                  if (URLString[0]) {
                    CFRelease(URLString[0]);
                  }
                  if (keys[0]) {
                    CFRelease(keys[0]);
                  }
                  if (values) {
                    CFRelease(values);
                  }
                  goto LABEL_230;
                }
              }
            }
            else
            {
              int appended = FigSignalErrorAt();
            }
          }
          int v23 = appended;
          goto LABEL_211;
        }
LABEL_252:
        int v23 = FigSignalErrorAt();
        goto LABEL_234;
      }
LABEL_184:
      int v23 = 0;
      goto LABEL_193;
    }
    if (v16) {
      goto LABEL_184;
    }
    if (FigCFDictionaryGetCount() == 1
      && (CFDictionaryGetKeysAndValues(v71, (const void **)keys, (const void **)&values), keys[0])
      && values)
    {
      CFAllocatorRef v109 = CFGetAllocator(v2);
      int v110 = fsadct_MakeMediaPlaylistWriterHelper(v109, (int)v2, (uint64_t)v4, values, URLString);
      if (!v110)
      {
        int v110 = fsadct_EnsureArrayOfWriteLockedPersistentStreamInfosAndAddEntry(v2, URLString[0]);
        if (!v110)
        {
          int v23 = fsadct_WriteMediaPlaylistAndAddToMovpkg(v2, (uint64_t)URLString, 0);
          if (!v23) {
            values = 0;
          }
          goto LABEL_193;
        }
      }
    }
    else
    {
LABEL_256:
      int v110 = FigSignalErrorAt();
    }
    int v23 = v110;
    goto LABEL_193;
  }
LABEL_41:
  uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v36) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = 0;
  }
  CFTypeID v38 = *(void (**)(const __CFString *, uint64_t, uint64_t))(v37 + 16);
  if (v38) {
    v38(v4, 0xFFFFFFFFLL, 1);
  }
  if (v23) {
    *(_DWORD *)(v5 + 20) = v23;
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v15) {
    CFRelease(v15);
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
  if (v2) {
    CFRelease(v2);
  }
  if (v4) {
    CFRelease(v4);
  }
  free(a1);
}

CFStringRef FigStreamingAssetDownloadCacheTranslatorCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigStreamingAssetDownloadCacheTranslator %p]", a1);
}

uint64_t fsadct_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage) {
    CFRelease(*(CFTypeRef *)DerivedStorage);
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1) {
    CFRelease(v1);
  }
  CFStringRef v2 = *(const void **)(DerivedStorage + 32);
  if (v2) {
    CFRelease(v2);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef fsadct_CopyDebugDescription()
{
  CFStringRef v0 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"\tFigStreamingAssetDownloadCacheTranslator : ");
  if (!v0) {
    FigSignalErrorAt();
  }
  return v0;
}

uint64_t fsadct_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!CFEqual(a2, @"FSADCT_MultiVariantPlaylist")) {
    return 0;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 24));
  if (*(void *)DerivedStorage)
  {
    uint64_t v7 = 0;
    *a4 = CFRetain(*(CFTypeRef *)DerivedStorage);
  }
  else
  {
    uint64_t v7 = *(unsigned int *)(DerivedStorage + 20);
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 24));
  return v7;
}

uint64_t fsadct_WritePlaylistsForMediaTypeToMovpkgAndAddToMutlivariantPlaylist(_DWORD *context, __CFString *a2, CFDictionaryRef theDict, int a4)
{
  if (!theDict) {
    return 0;
  }
  context[8] = a4;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fsadct_WritePlaylistsForMediaGroupApplierFunction, context);
  uint64_t result = context[16];
  if (!result)
  {
    CFStringAppendFormat(a2, 0, @"\n\n");
    return 0;
  }
  return result;
}

void fsadct_WritePlaylistsForMediaGroupApplierFunction(uint64_t a1, CFDictionaryRef theDict, void *a3)
{
  a3[5] = a1;
  CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)fsadct_WritePlaylistsForPersistentIDApplierFunction, a3);
}

void fsadct_WritePlaylistsForPersistentIDApplierFunction(int a1, CFDictionaryRef theDict, uint64_t a3)
{
  uint64_t v5 = *(const void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  CFDictionaryRef v8 = *(const __CFDictionary **)(a3 + 16);
  uint64_t v7 = *(__CFString **)(a3 + 24);
  int v9 = *(_DWORD *)(a3 + 32);
  uint64_t v10 = *(void *)(a3 + 48);
  uint64_t v31 = *(const void **)(a3 + 40);
  CFURLRef Value = (const __CFURL *)CFDictionaryGetValue(theDict, @"FBPAEGLMK_URL");
  uint64_t v35 = 0;
  long long v33 = 0u;
  long long v34 = 0u;
  CFTypeRef cf = 0;
  dispatch_queue_t v12 = *(__CFSet **)(a3 + 56);
  if (!v12)
  {
LABEL_59:
    int MediaPlaylistWriterHelper = FigSignalErrorAt();
    goto LABEL_60;
  }
  if (Value)
  {
    int MediaPlaylistWriterHelper = fsadct_CopyPersistentStreamIDFromNetworkURL(v8, Value, &cf);
    if (MediaPlaylistWriterHelper)
    {
LABEL_60:
      int v20 = MediaPlaylistWriterHelper;
      goto LABEL_56;
    }
    if (!cf) {
      goto LABEL_18;
    }
    CFAllocatorRef v14 = CFGetAllocator(v5);
    int MediaPlaylistWriterHelper = fsadct_MakeMediaPlaylistWriterHelper(v14, (int)v5, v6, cf, (CFStringRef *)&v33);
    if (MediaPlaylistWriterHelper) {
      goto LABEL_60;
    }
    int MediaPlaylistWriterHelper = fsadct_EnsureArrayOfWriteLockedPersistentStreamInfosAndAddEntry(v5, (const void *)v33);
    if (MediaPlaylistWriterHelper) {
      goto LABEL_60;
    }
    int MediaPlaylistWriterHelper = fsadct_WriteMediaPlaylistAndAddToMovpkg(v5, (uint64_t)&v33, v10);
    if (MediaPlaylistWriterHelper) {
      goto LABEL_60;
    }
    if (!cf)
    {
LABEL_18:
      int v20 = 0;
      goto LABEL_58;
    }
    dispatch_queue_t v12 = *(__CFSet **)(a3 + 56);
  }
  theSet = v12;
  int v30 = CFDictionaryGetValue(theDict, @"FBPAEGLMK_Channels");
  CFArrayRef v15 = CFDictionaryGetValue(theDict, @"FBPAEGLMK_Name");
  CFStringRef v16 = CFDictionaryGetValue(theDict, @"FBPAEGLMK_UnicodeLanguageIdentifier");
  uint64_t v17 = CFDictionaryGetValue(theDict, @"FBPAEGLMK_ClosedCaptionType");
  int v18 = CFDictionaryGetValue(theDict, @"FBPAEGLMK_StableStreamIdentifier");
  CFArrayRef v19 = (const __CFArray *)CFDictionaryGetValue(theDict, @"FBPAEGLMK_Characteristics");
  int v20 = 0;
  __int16 v37 = 0;
  char v36 = 0;
  if (v9 != 1986618469 && v16 && v15)
  {
    if (v7)
    {
      CFArrayRef v21 = v19;
      if (v9 == 1668047728)
      {
        int v23 = "CLOSED-CAPTIONS";
        uint64_t v22 = v31;
      }
      else
      {
        uint64_t v22 = v31;
        if (v9 == 1935832172)
        {
          int v23 = "SUBTITLES";
        }
        else
        {
          if (v9 != 1936684398)
          {
LABEL_22:
            if (v22) {
              CFStringAppendFormat(v7, 0, @",%s=\"%@\"", "GROUP-ID", v22);
            }
            CFStringAppendFormat(v7, 0, @",%s=\"%@\"", "LANGUAGE", v16);
            CFStringAppendFormat(v7, 0, @",%s=\"%@\"", "NAME", v15);
            if (v17) {
              CFStringAppendFormat(v7, 0, @",%s=\"%@\"", "INSTREAM-ID", v17);
            }
            if (FigCFDictionaryGetBooleanIfPresent())
            {
              if ((_BYTE)v37) {
                uint64_t v24 = "YES";
              }
              else {
                uint64_t v24 = "NO";
              }
              CFStringAppendFormat(v7, 0, @",%s=%s", "AUTOSELECT", v24);
            }
            if (FigCFDictionaryGetBooleanIfPresent())
            {
              if (HIBYTE(v37)) {
                int v25 = "YES";
              }
              else {
                int v25 = "NO";
              }
              CFStringAppendFormat(v7, 0, @",%s=%s", "FORCED", v25);
            }
            if (FigCFDictionaryGetBooleanIfPresent())
            {
              if (v36) {
                uint64_t v26 = "YES";
              }
              else {
                uint64_t v26 = "NO";
              }
              CFStringAppendFormat(v7, 0, @",%s=%s", "DEFAULT", v26);
            }
            if (v30) {
              CFStringAppendFormat(v7, 0, @",%s=\"%@\"", "CHANNELS", v30);
            }
            if (v18) {
              CFStringAppendFormat(v7, 0, @",%s=\"%@\"", "STABLE-RENDITION-ID", v18);
            }
            if (v21)
            {
              CFStringAppendFormat(v7, 0, @",%s=\"", "CHARACTERISTICS");
              if (CFArrayGetCount(v21) >= 1)
              {
                CFIndex v27 = 0;
                do
                {
                  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v21, v27);
                  if (v27) {
                    CFStringAppendFormat(v7, 0, @",");
                  }
                  CFStringAppendFormat(v7, 0, @"%@", ValueAtIndex);
                  ++v27;
                }
                while (v27 < CFArrayGetCount(v21));
              }
              CFStringAppendFormat(v7, 0, @"\"");
              uint64_t v22 = v31;
            }
            if (*((void *)&v33 + 1) && (void)v34) {
              CFStringAppendFormat(v7, 0, @",%s=\"../%@/%@\"", "URI", *((void *)&v33 + 1), (void)v34);
            }
            CFStringAppendFormat(v7, 0, @"\n");
            CFSetSetValue(theSet, v22);
            int v20 = 0;
            goto LABEL_56;
          }
          int v23 = "AUDIO";
        }
      }
      CFStringAppendFormat(v7, 0, @"%s:%s=%s", "#EXT-X-MEDIA", "TYPE", v23);
      goto LABEL_22;
    }
    goto LABEL_59;
  }
LABEL_56:
  if (cf) {
    CFRelease(cf);
  }
LABEL_58:
  fsadct_DestroyMediaPlaylistWriterHelper((uint64_t)&v33);
  *(_DWORD *)(a3 + 64) = v20;
}

uint64_t fsadct_CopyPersistentStreamIDFromNetworkURL(const __CFDictionary *a1, const __CFURL *a2, CFTypeRef *a3)
{
  if (a2 && a1 && a3 && (CFTypeRef v5 = FigCFHTTPCreateURLString(a2)) != 0)
  {
    uint64_t v6 = v5;
    CFURLRef Value = CFDictionaryGetValue(a1, v5);
    if (Value) {
      *a3 = CFRetain(Value);
    }
    CFRelease(v6);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fsadct_MakeMediaPlaylistWriterHelper(const __CFAllocator *a1, int a2, uint64_t a3, CFTypeRef cf, CFStringRef *a5)
{
  uint64_t v51 = *MEMORY[0x1E4F1CFC8];
  if (cf && a1 && a3 && a5)
  {
    a5[1] = (CFStringRef)CFRetain(cf);
    CFStringRef URLString = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v11 = (void *)MEMORY[0x1E4F1CFD0];
    if (Mutable)
    {
      dispatch_queue_t v12 = Mutable;
      CFDictionarySetValue(Mutable, @"StreamInfoDemandWriteAccess", (const void *)*MEMORY[0x1E4F1CFD0]);
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      CFArrayRef v15 = *(uint64_t (**)(uint64_t, CFTypeRef, __CFDictionary *, CFStringRef *))(v14 + 32);
      if (v15)
      {
        uint64_t v16 = v15(a3, cf, v12, &URLString);
        if (v16)
        {
          if (URLString) {
            CFRelease(URLString);
          }
        }
        else
        {
          *a5 = URLString;
          CFStringRef URLString = 0;
        }
      }
      else
      {
        uint64_t v16 = 4294954514;
      }
      CFRelease(v12);
      if (v16) {
        return v16;
      }
    }
    else
    {
      uint64_t v16 = FigSignalErrorAt();
      if (v16) {
        return v16;
      }
    }
    uint64_t FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(*a5);
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    int v20 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t *))(v19 + 48);
    if (!v20) {
      return 4294954514;
    }
    uint64_t v21 = v20(FigBaseObject, @"StreamInfoCompleteState", a1, &v51);
    if (v21) {
      return v21;
    }
    if (v51 == *v11)
    {
      CFStringRef v22 = *a5;
      CFStringRef URLString = 0;
      if (v22)
      {
        uint64_t v23 = FigHLSPersistentStreamInfoGetFigBaseObject(v22);
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v26 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFStringRef *))(v25 + 48);
        if (v26)
        {
          uint64_t v27 = v26(v23, @"StreamInfoMediaPlaylistNetworkURL", v9, &URLString);
          if (v27)
          {
            uint64_t v16 = v27;
            CFURLRef v28 = 0;
          }
          else
          {
            CFURLRef v28 = CFURLCreateWithString(v9, URLString, 0);
            if (v28) {
              uint64_t v16 = 0;
            }
            else {
              uint64_t v16 = FigSignalErrorAt();
            }
          }
        }
        else
        {
          CFURLRef v28 = 0;
          uint64_t v16 = 4294954514;
        }
        if (URLString) {
          CFRelease(URLString);
        }
        if (v16) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v16 = FigSignalErrorAt();
        CFURLRef v28 = 0;
        if (v16) {
          goto LABEL_78;
        }
      }
      CFStringRef v29 = *a5;
      CFStringRef URLString = 0;
      CFAllocatorRef v56 = 0;
      CFTypeRef cfa = 0;
      int v52 = 0;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (v28 && v29)
      {
        uint64_t v31 = DerivedStorage;
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v32) {
          uint64_t v33 = v32;
        }
        else {
          uint64_t v33 = 0;
        }
        long long v34 = *(uint64_t (**)(CFStringRef, __CFString *, CFStringRef *, OpaqueCMBlockBuffer **))(v33 + 16);
        if (!v34)
        {
          uint64_t v16 = 4294954514;
LABEL_43:
          if (URLString) {
            CFRelease(URLString);
          }
          if (v56) {
            CFRelease(v56);
          }
          if (cfa) {
            CFRelease(cfa);
          }
          if (v16) {
            goto LABEL_78;
          }
          if (a5[1])
          {
            CFStringRef v36 = CFStringCreateWithFormat(a1, 0, @"%@-%s", a5[1], "LocallyHostedPlaylist.m3u8");
            if (v36)
            {
              a5[2] = v36;
              goto LABEL_53;
            }
          }
          uint64_t v50 = FigSignalErrorAt();
          if (!v50)
          {
LABEL_53:
            CFStringRef v37 = *a5;
            CFAllocatorRef v56 = 0;
            uint64_t v54 = 0;
            CFTypeRef cfa = 0;
            CFStringRef URLString = 0;
            if (!v37)
            {
              uint64_t v42 = FigSignalErrorAt();
              goto LABEL_93;
            }
            uint64_t v38 = FigHLSPersistentStreamInfoGetFigBaseObject(v37);
            uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v39) {
              uint64_t v40 = v39;
            }
            else {
              uint64_t v40 = 0;
            }
            CFAllocatorRef v41 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, OpaqueCMBlockBuffer **))(v40 + 48);
            if (v41)
            {
              uint64_t v42 = v41(v38, @"StreamInfoMediaSegmentList", a1, &v56);
              if (v42) {
                goto LABEL_93;
              }
              uint64_t v43 = FigHLSPersistentStreamInfoGetFigBaseObject(v37);
              uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v44) {
                uint64_t v45 = v44;
              }
              else {
                uint64_t v45 = 0;
              }
              CFAllocatorRef v46 = *(uint64_t (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v45 + 48);
              if (v46)
              {
                uint64_t v42 = v46(v43, @"StreamInfoMediaInitializationSegmentList", a1, &cfa);
                if (!v42)
                {
                  CFStringRef v47 = (const __CFString *)CFDictionaryCreateMutable(a1, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  CFStringRef v48 = v47;
                  if (!v47)
                  {
                    uint64_t v16 = FigSignalErrorAt();
                    goto LABEL_72;
                  }
                  CFStringRef URLString = v47;
                  if (cfa)
                  {
                    CFDictionaryApplyFunction((CFDictionaryRef)cfa, (CFDictionaryApplierFunction)fsadct_CreateMediaMapKeyToFilePathMappingOutApplierFunction, &URLString);
                    uint64_t v16 = v54;
                    if (v54) {
                      goto LABEL_72;
                    }
                  }
                  if (v56)
                  {
                    CFDictionaryApplyFunction(v56, (CFDictionaryApplierFunction)fsadct_CreateMediaMapKeyToFilePathMappingOutApplierFunction, &URLString);
                    uint64_t v16 = v54;
                    if (v54) {
                      goto LABEL_72;
                    }
                  }
                  uint64_t v16 = 0;
                  a5[4] = v48;
                  goto LABEL_70;
                }
LABEL_93:
                uint64_t v16 = v42;
LABEL_70:
                CFStringRef v48 = 0;
LABEL_72:
                if (v56) {
                  CFRelease(v56);
                }
                if (cfa) {
                  CFRelease(cfa);
                }
                if (v48) {
                  CFRelease(v48);
                }
                goto LABEL_78;
              }
            }
            CFStringRef v48 = 0;
            uint64_t v16 = 4294954514;
            goto LABEL_72;
          }
          uint64_t v16 = v50;
LABEL_78:
          if (v28) {
            CFRelease(v28);
          }
          return v16;
        }
        uint64_t v35 = v34(v29, @"NetworkPlaylist", &URLString, &v56);
        if (!v35)
        {
          uint64_t v16 = FigStreamPlaylistParse(v56, v28, 0, &v52, 0, 0, 1, *(unsigned __int8 *)(v31 + 16), 0, 0, 0, 0, 0, &cfa);
          if (!v16)
          {
            a5[3] = (CFStringRef)cfa;
            CFTypeRef cfa = 0;
          }
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v35 = FigSignalErrorAt();
      }
      uint64_t v16 = v35;
      goto LABEL_43;
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t fsadct_EnsureArrayOfWriteLockedPersistentStreamInfosAndAddEntry(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = *(__CFArray **)(DerivedStorage + 32);
  if (Mutable
    || (CFAllocatorRef v6 = CFGetAllocator(a1),
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v6, 0, MEMORY[0x1E4F1D510]),
        (*(void *)(DerivedStorage + 32) = Mutable) != 0))
  {
    CFArrayAppendValue(Mutable, a2);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fsadct_WriteMediaPlaylistAndAddToMovpkg(const void *a1, uint64_t a2, uint64_t a3)
{
  CFAllocatorRef v6 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v6, 0);
  if (Mutable)
  {
    CFDictionaryRef v8 = Mutable;
    uint64_t v54 = a3;
    if (a2)
    {
      if (*(void *)(a2 + 24))
      {
        CFStringAppendFormat(Mutable, 0, @"%s\n", "#EXTM3U");
        uint64_t TargetDuration = FigMediaPlaylistGetTargetDuration(*(void *)(a2 + 24));
        CFStringAppendFormat(v8, 0, @"%s:%u\n", "#EXT-X-TARGETDURATION", TargetDuration);
        if (FigMediaPlaylistGetVersion(*(void *)(a2 + 24)))
        {
          uint64_t Version = FigMediaPlaylistGetVersion(*(void *)(a2 + 24));
          CFStringAppendFormat(v8, 0, @"%s:%u\n", "#EXT-X-VERSION", Version);
        }
        CFStringAppendFormat(v8, 0, @"%s:%u\n", "#EXT-X-MEDIA-SEQUENCE", 0);
        CFStringAppendFormat(v8, 0, @"%s:%s\n", "#EXT-X-PLAYLIST-TYPE", "VOD");
        if (FigMediaPlaylistHasIndependentSegments(*(void *)(a2 + 24))) {
          CFStringAppendFormat(v8, 0, @"%s\n", "#EXT-X-INDEPENDENT-SEGMENTS");
        }
        goto LABEL_8;
      }
      uint64_t v32 = FigSignalErrorAt();
      if (!v32)
      {
LABEL_8:
        uint64_t v11 = 0;
        uint64_t v12 = 0;
        uint64_t v13 = 0;
        DiscontinuityCFErrorDomain Domain = 0;
        CFIndex v15 = 0;
        while (1)
        {
          CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a2 + 24));
          if (MediaSegmentSpecifiers) {
            CFArrayRef MediaSegmentSpecifiers = (const __CFArray *)CFArrayGetCount(MediaSegmentSpecifiers);
          }
          if (v15 >= (uint64_t)MediaSegmentSpecifiers)
          {
            CFStringAppendFormat(v8, 0, @"%s\n", "#EXT-X-ENDLIST");
            goto LABEL_32;
          }
          CFArrayRef v17 = (const __CFArray *)FigMediaPlaylistGetMediaSegmentSpecifiers(*(void *)(a2 + 24));
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v17, v15);
          if (FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)ValueAtIndex) > DiscontinuityDomain)
          {
            DiscontinuityCFErrorDomain Domain = FigMediaSegmentSpecifierGetDiscontinuityDomain((uint64_t)ValueAtIndex);
            CFStringAppendFormat(v8, 0, @"%s\n", "#EXT-X-DISCONTINUITY");
          }
          if (FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)ValueAtIndex)
            && (v12 != FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)ValueAtIndex)
             || v13 != FigMediaSegmentSpecifierGetIV((uint64_t)ValueAtIndex)
             && (uint64_t v23 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)ValueAtIndex),
                 FigContentKeySpecifierGetKeySystem(v23) == 2)))
          {
            uint64_t ContentKeySpecifier = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)ValueAtIndex);
            CFDataRef IV = (const __CFData *)FigMediaSegmentSpecifierGetIV((uint64_t)ValueAtIndex);
            uint64_t appended = fsadct_AppendCryptKeyToPlaylistString(v8, ContentKeySpecifier, IV);
            if (appended) {
              goto LABEL_30;
            }
            uint64_t v13 = FigMediaSegmentSpecifierGetIV((uint64_t)ValueAtIndex);
            uint64_t v22 = (uint64_t)ValueAtIndex;
          }
          else
          {
            if (!FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex)) {
              goto LABEL_26;
            }
            uint64_t MapSegmentSpecifier = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
            if (v13 == FigMediaSegmentSpecifierGetIV(MapSegmentSpecifier)) {
              goto LABEL_26;
            }
            uint64_t v25 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
            uint64_t v26 = FigMediaSegmentSpecifierGetContentKeySpecifier(v25);
            if (FigContentKeySpecifierGetKeySystem(v26) != 2) {
              goto LABEL_26;
            }
            uint64_t v27 = FigMediaSegmentSpecifierGetContentKeySpecifier((uint64_t)ValueAtIndex);
            uint64_t v28 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
            CFDataRef v29 = (const __CFData *)FigMediaSegmentSpecifierGetIV(v28);
            uint64_t appended = fsadct_AppendCryptKeyToPlaylistString(v8, v27, v29);
            if (appended) {
              goto LABEL_30;
            }
            uint64_t v30 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
            uint64_t v13 = FigMediaSegmentSpecifierGetIV(v30);
            uint64_t v22 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
          }
          uint64_t v12 = FigMediaSegmentSpecifierGetContentKeySpecifier(v22);
LABEL_26:
          if (v11 != FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex))
          {
            uint64_t v31 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
            uint64_t appended = fsadct_AppendSegmentToPlaylistString(a1, a2, v8, v31, 1);
            if (appended) {
              goto LABEL_30;
            }
            uint64_t v11 = FigMediaSegmentSpecifierGetMapSegmentSpecifier((uint64_t)ValueAtIndex);
          }
          uint64_t appended = fsadct_AppendSegmentToPlaylistString(a1, a2, v8, (uint64_t)ValueAtIndex, 0);
          ++v15;
          if (appended) {
            goto LABEL_30;
          }
        }
      }
      goto LABEL_48;
    }
    uint64_t v32 = FigSignalErrorAt();
    if (v32)
    {
LABEL_48:
      CFRelease(v8);
      return v32;
    }
    uint64_t appended = FigSignalErrorAt();
    if (appended)
    {
LABEL_30:
      uint64_t v32 = appended;
      goto LABEL_48;
    }
LABEL_32:
    CMBlockBufferRef blockBufferOut = 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    dataunint64_t Length = 0;
    CFAllocatorRef v34 = CFGetAllocator(a1);
    uint64_t v35 = CMBlockBufferCreateEmpty(v34, 0, 0, &blockBufferOut);
    if (v35) {
      goto LABEL_50;
    }
    CFGetAllocator(a1);
    uint64_t BytesFromCFString = FigCreateBytesFromCFString();
    if (BytesFromCFString)
    {
      CFStringRef v37 = (void *)BytesFromCFString;
      uint64_t v38 = blockBufferOut;
      size_t v39 = dataLength;
      CFAllocatorRef v40 = CFGetAllocator(a1);
      uint64_t v35 = CMBlockBufferAppendMemoryBlock(v38, v37, v39, v40, 0, 0, dataLength, 0);
      if (v35)
      {
LABEL_50:
        uint64_t v32 = v35;
        goto LABEL_46;
      }
      uint64_t v41 = *(void *)a2;
      uint64_t v42 = *(void *)(a2 + 16);
      CMBlockBufferRef v43 = blockBufferOut;
      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v44) {
        uint64_t v45 = v44;
      }
      else {
        uint64_t v45 = 0;
      }
      CFAllocatorRef v46 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMBlockBufferRef))(v45 + 8);
      if (!v46)
      {
        uint64_t v32 = 4294954514;
        goto LABEL_46;
      }
      uint64_t v47 = v46(v41, @"OfflineAvailableMedia", v42, v43);
      uint64_t v32 = v47;
      if (v54 || v47)
      {
LABEL_46:
        if (blockBufferOut) {
          CFRelease(blockBufferOut);
        }
        goto LABEL_48;
      }
      CFAllocatorRef v48 = CFGetAllocator(a1);
      CFURLRef v49 = CFURLCreateCopyAppendingPathComponent(v48, *(CFURLRef *)(DerivedStorage + 8), *(CFStringRef *)(a2 + 8), 1u);
      if (v49)
      {
        CFURLRef v50 = v49;
        CFAllocatorRef v51 = CFGetAllocator(a1);
        CFURLRef v52 = CFURLCreateCopyAppendingPathComponent(v51, v50, *(CFStringRef *)(a2 + 16), 0);
        uint64_t v32 = 0;
        *(void *)uint64_t DerivedStorage = v52;
        if (!v52) {
          uint64_t v32 = FigSignalErrorAt();
        }
        CFRelease(v50);
        goto LABEL_46;
      }
    }
    uint64_t v35 = FigSignalErrorAt();
    goto LABEL_50;
  }

  return FigSignalErrorAt();
}

void fsadct_DestroyMediaPlaylistWriterHelper(uint64_t a1)
{
  CFStringRef v2 = *(const void **)a1;
  if (v2)
  {
    CFRelease(v2);
    *(void *)a1 = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 8) = 0;
  }
  CFStringRef v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 16) = 0;
  }
  CFTypeRef v5 = *(const void **)(a1 + 24);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 24) = 0;
  }
  CFAllocatorRef v6 = *(const void **)(a1 + 32);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 32) = 0;
  }
}

void fsadct_CreateMediaMapKeyToFilePathMappingOutApplierFunction(int a1, const __CFDictionary *cf, uint64_t a3)
{
  CFStringRef v4 = *(__CFDictionary **)a3;
  if (*(void *)a3
    && cf
    && (CFTypeID v6 = CFGetTypeID(cf), v6 == CFDictionaryGetTypeID())
    && (uint64_t v7 = CFDictionaryGetValue(cf, @"URL"), FigCFDictionaryGetInt64IfPresent())
    && (CFStringRef v8 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@-%lld", v7, 0)) != 0)
  {
    CFStringRef v9 = v8;
    CFURLRef Value = CFDictionaryGetValue(cf, @"PATH");
    if (Value)
    {
      CFDictionarySetValue(v4, v9, Value);
      int v11 = 0;
    }
    else
    {
      int v11 = FigSignalErrorAt();
    }
    *(_DWORD *)(a3 + 8) = v11;
    CFRelease(v9);
  }
  else
  {
    *(_DWORD *)(a3 + 8) = FigSignalErrorAt();
  }
}

uint64_t fsadct_AppendCryptKeyToPlaylistString(__CFString *a1, uint64_t a2, const __CFData *a3)
{
  if (a1)
  {
    if (!a2) {
      return FigSignalErrorAt();
    }
    if (FigContentKeySpecifierGetIdentifier(a2))
    {
      uint64_t Identifier = FigContentKeySpecifierGetIdentifier(a2);
      int KeySystem = FigContentKeySpecifierGetKeySystem(a2);
      CFStringRef v8 = &stru_1EE53F4B8;
      CFStringRef v9 = @"identity";
      if (KeySystem != 2) {
        CFStringRef v9 = &stru_1EE53F4B8;
      }
      if (KeySystem == 1) {
        CFStringRef v10 = @"com.apple.streamingkeydelivery";
      }
      else {
        CFStringRef v10 = v9;
      }
      unsigned int v11 = FigContentKeySpecifierGetEncryptionMethod(a2) - 1;
      if (v11 <= 4) {
        CFStringRef v8 = off_1E57A0270[v11];
      }
      if (a3)
      {
        uint64_t v12 = CFDataGetLength(a3) == 16 ? FigCreateHexStringFromCFData() : FigSignalErrorAt();
        uint64_t v13 = v12;
        if (v12) {
          return v13;
        }
      }
      CFStringAppendFormat(a1, 0, @"%s:%s=\"%@\"", "#EXT-X-KEY", "URI", Identifier);
      if (CFStringGetLength(v10) >= 1) {
        CFStringAppendFormat(a1, 0, @",%s=\"%@\"", "KEYFORMAT", v10);
      }
      if (CFStringGetLength(v8) >= 1) {
        CFStringAppendFormat(a1, 0, @",%s=%@", "METHOD", v8);
      }
      if (FigContentKeySpecifierGetSupportedProtocolVersions(a2))
      {
        CFStringAppendFormat(a1, 0, @",%s=\"", "KEYFORMATVERSIONS");
        CFIndex v14 = 0;
        for (char i = 1; ; char i = 0)
        {
          CFArrayRef SupportedProtocolVersions = (const __CFArray *)FigContentKeySpecifierGetSupportedProtocolVersions(a2);
          if (SupportedProtocolVersions) {
            CFArrayRef SupportedProtocolVersions = (const __CFArray *)CFArrayGetCount(SupportedProtocolVersions);
          }
          if (v14 >= (uint64_t)SupportedProtocolVersions) {
            break;
          }
          CFArrayRef v17 = (const __CFArray *)FigContentKeySpecifierGetSupportedProtocolVersions(a2);
          CFArrayGetValueAtIndex(v17, v14);
          uint64_t SInt64 = FigCFNumberGetSInt64();
          if ((i & 1) == 0) {
            CFStringAppendFormat(a1, 0, @"/");
          }
          CFStringAppendFormat(a1, 0, @"%lld", SInt64);
          ++v14;
        }
        CFStringAppendFormat(a1, 0, @"\"");
      }
      CFStringAppendFormat(a1, 0, @"\n");
    }
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t fsadct_AppendSegmentToPlaylistString(const void *a1, uint64_t a2, __CFString *a3, uint64_t a4, int a5)
{
  if (a3 && a4 && a2)
  {
    CFAllocatorRef v9 = CFGetAllocator(a1);
    CFStringRef URLString = 0;
    if (FigMediaSegmentSpecifierGetStartOffset(a4)) {
      uint64_t StartOffset = FigMediaSegmentSpecifierGetStartOffset(a4);
    }
    else {
      uint64_t StartOffset = 0;
    }
    uint64_t FigBaseObject = FigHLSPersistentStreamInfoGetFigBaseObject(*(void *)a2);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    CFIndex v14 = *(uint64_t (**)(uint64_t, __CFString *, void, CFStringRef *))(v13 + 48);
    if (v14)
    {
      uint64_t v15 = v14(FigBaseObject, @"StreamInfoMediaPlaylistNetworkURL", 0, &URLString);
      if (!v15)
      {
        CFURLRef v16 = CFURLCreateWithString(v9, URLString, 0);
        if (v16)
        {
          CFURLRef v17 = v16;
          CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
          CFStringRef v19 = (const __CFString *)FigMediaSegmentSpecifierGetURLString(a4);
          CFURLRef v20 = CFURLCreateWithString(AllocatorForMedia, v19, v17);
          CFURLRef v21 = v20;
          if (v20)
          {
            CFTypeRef v22 = FigCFHTTPCreateURLString(v20);
            if (v22)
            {
              CFStringRef v23 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"%@-%lld", v22, StartOffset);
              if (v23)
              {
                CFStringRef v24 = v23;
                uint64_t v25 = 0;
LABEL_17:
                CFRelease(v17);
                goto LABEL_19;
              }
            }
          }
          else
          {
            CFTypeRef v22 = 0;
          }
          uint64_t v25 = FigSignalErrorAt();
          CFStringRef v24 = 0;
          goto LABEL_17;
        }
        uint64_t v15 = FigSignalErrorAt();
      }
      uint64_t v25 = v15;
      CFStringRef v24 = 0;
      CFTypeRef v22 = 0;
      CFURLRef v21 = 0;
    }
    else
    {
      CFStringRef v24 = 0;
      CFTypeRef v22 = 0;
      CFURLRef v21 = 0;
      uint64_t v25 = 4294954514;
    }
LABEL_19:
    if (URLString) {
      CFRelease(URLString);
    }
    if (v21) {
      CFRelease(v21);
    }
    if (v22) {
      CFRelease(v22);
    }
    if (!v25)
    {
      CFURLRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a2 + 32), v24);
      if (!Value)
      {
        uint64_t v25 = FigSignalErrorAt();
        if (!v24) {
          return v25;
        }
        goto LABEL_35;
      }
      uint64_t v27 = Value;
      if (a5 == 1)
      {
        CFStringAppendFormat(a3, 0, @"%s:%s=\"%@\"\n", "#EXT-X-MAP", "URI", Value);
      }
      else if (!a5)
      {
        TimeIndouble Seconds = FigMediaSegmentSpecifierGetTimeInSeconds(a4);
        CFStringAppendFormat(a3, 0, @"%s:%f,\n", "#EXTINF", *(void *)&TimeInSeconds);
        if (FigMediaSegmentSpecifierGetBitRate(a4) > 0.0)
        {
          double BitRate = FigMediaSegmentSpecifierGetBitRate(a4);
          CFStringAppendFormat(a3, 0, @"%s:%llu\n", "#EXT-X-BITRATE", (unint64_t)BitRate);
        }
        CFStringAppendFormat(a3, 0, @"%@\n", v27, v31);
      }
      uint64_t v25 = 0;
    }
    if (!v24) {
      return v25;
    }
LABEL_35:
    CFRelease(v24);
    return v25;
  }

  return FigSignalErrorAt();
}

void fcrReleaseAndClearMediaAccessibilityParams(uint64_t a1)
{
  int64x2_t v2 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 128) = v2;
  *(int64x2_t *)(a1 + 32) = v2;
  *(int64x2_t *)(a1 + 48) = v2;
  *(int64x2_t *)a1 = v2;
  *(int64x2_t *)(a1 + 16) = v2;
  memset_pattern16((void *)(a1 + 64), &xmmword_194995D30, 0x40uLL);
  uint64_t v3 = *(const void **)(a1 + 144);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 144) = 0;
  }
  *(void *)(a1 + 168) = 0xBFF0000000000000;
  CFStringRef v4 = *(const void **)(a1 + 152);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 152) = 0;
  }
  *(void *)(a1 + 176) = 0xBFF0000000000000;
  CFTypeRef v5 = *(const void **)(a1 + 160);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 160) = 0;
  }
  uint64_t v6 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 184) = _Q0;
  *(void *)(a1 + 200) = 0xBFF0000000000000;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0x4044000000000000;
  uint64_t v12 = a1 + 208;
  do
  {
    uint64_t v13 = *(const void **)(v12 + v6);
    if (v13)
    {
      CFRelease(v13);
      *(void *)(v12 + v6) = 0;
    }
    v6 += 8;
  }
  while (v6 != 64);
  CFIndex v14 = *(const void **)(a1 + 288);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 288) = 0;
  }
}

void fcrCopyMediaAccessibilityParams(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  long long v4 = *(_OWORD *)(a1 + 16);
  long long v5 = *(_OWORD *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v6;
  *(_OWORD *)(a2 + 16) = v4;
  *(_OWORD *)(a2 + 32) = v5;
  long long v7 = *(_OWORD *)(a1 + 80);
  long long v8 = *(_OWORD *)(a1 + 96);
  long long v9 = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 128) = v9;
  *(_OWORD *)(a2 + 80) = v7;
  *(_OWORD *)(a2 + 96) = v8;
  CFStringRef v10 = *(const void **)(a2 + 144);
  unsigned int v11 = *(const void **)(a1 + 144);
  *(void *)(a2 + 144) = v11;
  if (v11) {
    CFRetain(v11);
  }
  if (v10) {
    CFRelease(v10);
  }
  *(void *)(a2 + 168) = *(void *)(a1 + 168);
  uint64_t v12 = *(const void **)(a2 + 152);
  uint64_t v13 = *(const void **)(a1 + 152);
  *(void *)(a2 + 152) = v13;
  if (v13) {
    CFRetain(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
  *(void *)(a2 + 176) = *(void *)(a1 + 176);
  CFIndex v14 = *(const void **)(a2 + 160);
  uint64_t v15 = *(const void **)(a1 + 160);
  *(void *)(a2 + 160) = v15;
  if (v15) {
    CFRetain(v15);
  }
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v16 = 0;
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a1 + 184);
  *(void *)(a2 + 200) = *(void *)(a1 + 200);
  *(void *)(a2 + 272) = *(void *)(a1 + 272);
  uint64_t v17 = a2 + 208;
  do
  {
    uint64_t v18 = *(const void **)(v17 + v16);
    CFStringRef v19 = *(const void **)(a1 + 208 + v16);
    *(void *)(v17 + v16) = v19;
    if (v19) {
      CFRetain(v19);
    }
    if (v18) {
      CFRelease(v18);
    }
    v16 += 8;
  }
  while (v16 != 64);
  CFURLRef v20 = *(const void **)(a2 + 288);
  CFURLRef v21 = *(const void **)(a1 + 288);
  *(void *)(a2 + 288) = v21;
  if (v21) {
    CFRetain(v21);
  }
  if (v20)
  {
    CFRelease(v20);
  }
}

uint64_t FigCaptionRendererMACacheLoad(void *a1, int a2)
{
  if (!a1[42]) {
    return 0;
  }
  long long v4 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
  if (v4)
  {
    long long v5 = v4;
    void *v4 = CFRetain(a1);
    long long v6 = a1[42];
    if (a2) {
      dispatch_sync_f(v6, v5, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync_0);
    }
    else {
      dispatch_async_f(v6, v5, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync_0);
    }
    return 0;
  }
  return 4294950095;
}

void mediaAccessibilityDidChangeDoAsync_0(void *a1)
{
  int64x2_t v2 = (void *)*a1;
  memset(behavior, 0, 296);
  uint64_t v3 = MACaptionAppearanceCopyForegroundColor(kMACaptionAppearanceDomainUser, behavior);
  behavior[18] = (MACaptionAppearanceBehavior)v3;
  if (v3) {
    CGColorGetComponents(v3);
  }
  long long v4 = MACaptionAppearanceCopyBackgroundColor(kMACaptionAppearanceDomainUser, &behavior[1]);
  behavior[19] = (MACaptionAppearanceBehavior)v4;
  if (v4) {
    CGColorGetComponents(v4);
  }
  long long v5 = MACaptionAppearanceCopyWindowColor(kMACaptionAppearanceDomainUser, &behavior[2]);
  behavior[20] = (MACaptionAppearanceBehavior)v5;
  if (v5) {
    CGColorGetComponents(v5);
  }
  behavior[21] = MACaptionAppearanceGetForegroundOpacity(kMACaptionAppearanceDomainUser, &behavior[3]);
  behavior[22] = MACaptionAppearanceGetBackgroundOpacity(kMACaptionAppearanceDomainUser, &behavior[4]);
  behavior[23] = MACaptionAppearanceGetWindowOpacity(kMACaptionAppearanceDomainUser, &behavior[5]);
  behavior[24] = MACaptionAppearanceGetWindowRoundedCornerRadius(kMACaptionAppearanceDomainUser, &behavior[6]);
  MACaptionAppearanceFontStyle v6 = kMACaptionAppearanceFontStyleDefault;
  behavior[25] = MACaptionAppearanceGetRelativeCharacterSize(kMACaptionAppearanceDomainUser, &behavior[7]);
  long long v7 = &behavior[8];
  do
  {
    behavior[v6 + 26] = (MACaptionAppearanceBehavior)MACaptionAppearanceCopyFontDescriptorForStyle(kMACaptionAppearanceDomainUser, v7, v6);
    ++v6;
    ++v7;
  }
  while (v6 != 8);
  behavior[34] = MACaptionAppearanceGetTextEdgeStyle(kMACaptionAppearanceDomainUser, &behavior[16]);
  active = (const void *)MACaptionAppearancePrefCopyActiveProfileID();
  behavior[36] = MACaptionAppearancePrefCopyProfileName();
  if (active) {
    CFRelease(active);
  }
  fcrCopyMediaAccessibilityParams((uint64_t)behavior, (uint64_t)(v2 + 4));
  if (v2[3])
  {
    uint64_t v9 = FigCFWeakReferenceHolderCopyReferencedObject();
    if (v9)
    {
      CFStringRef v10 = (const void *)v9;
      unsigned int v11 = (void (*)(const void *, unsigned char *))v2[3];
      memcpy(__dst, behavior, sizeof(__dst));
      v11(v10, __dst);
      CFRelease(v10);
    }
  }
  fcrReleaseAndClearMediaAccessibilityParams((uint64_t)behavior);
  CFRelease(v2);
  free(a1);
}

uint64_t FigCaptionRendererMACacheCreate(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  *a3 = 0;
  MEMORY[0x19970EE10](&FigCaptionRendererMACacheLocalGetTypeID_sRegisterFigCaptionRendererMACacheOnce, RegisterFigCaptionRendererMACacheClass);
  Instance = (void *)_CFRuntimeCreateInstance();
  fcrReleaseAndClearMediaAccessibilityParams((uint64_t)(Instance + 4));
  snprintf(__str, 0x100uLL, "com.apple.coremedia.FigCaptionRendererMACache.msgQueue<%p>", Instance);
  dispatch_queue_t v7 = dispatch_queue_create(__str, 0);
  Instance[42] = v7;
  if (!v7)
  {
    uint64_t v9 = 4294950095;
LABEL_7:
    CFRelease(Instance);
    return v9;
  }
  if (a1)
  {
    if (a2)
    {
      Instance[3] = a1;
      uint64_t v8 = FigCFWeakReferenceHolderCreateWithReferencedObject();
      Instance[2] = v8;
      if (!v8)
      {
        uint64_t v9 = FigSignalErrorAt();
        goto LABEL_7;
      }
    }
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  FigNotificationCenterAddWeakListener();
  uint64_t v9 = 0;
  *a3 = Instance;
  return v9;
}

void mediaAccessibilityDidChange_0(uint64_t a1, void *a2)
{
  if (a2[42])
  {
    uint64_t v3 = malloc_type_calloc(1uLL, 8uLL, 0x2004093837F09uLL);
    if (v3)
    {
      long long v4 = v3;
      *uint64_t v3 = CFRetain(a2);
      long long v5 = a2[42];
      dispatch_async_f(v5, v4, (dispatch_function_t)mediaAccessibilityDidChangeDoAsync_0);
    }
  }
}

uint64_t RegisterFigCaptionRendererMACacheClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFigCaptionRendererMACacheID = result;
  return result;
}

double FigCaptionRendererMACacheInit(uint64_t a1)
{
  *(void *)(a1 + 336) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void FigCaptionRendererMACache_Finalize(uint64_t a1)
{
  CMNotificationCenterGetDefaultLocalCenter();
  FigGetNotifyingObjectForMediaAccessibilityChanged();
  FigNotificationCenterRemoveWeakListener();
  int64x2_t v2 = *(NSObject **)(a1 + 336);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 336) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3) {
    CFRelease(v3);
  }

  fcrReleaseAndClearMediaAccessibilityParams(a1 + 32);
}

__CFString *FigCaptionRendererMACacheCopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigCaptionRendererMACache %p>", a1);
  return Mutable;
}

BOOL FigAudioFileFormatWriterCanFileTypeSupportMediaType(uint64_t a1, int a2)
{
  return a2 == 1936684398;
}

uint64_t FigAudioFileFormatWriterCanFileTypeSupportFormatDescription(uint64_t a1, CMFormatDescriptionRef desc)
{
  if (CMFormatDescriptionGetMediaType(desc) != 1936684398) {
    return 0;
  }
  UInt32 outDataSize = 0;
  uint64_t v14 = 0;
  StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(desc);
  if (!StreamBasicDescription
    || (long long v5 = StreamBasicDescription,
        HIDWORD(v14) = StreamBasicDescription->mFormatID,
        faf_audioFileTypeIDForFigFileType(a1, (int *)&v14)))
  {
    uint64_t v7 = 0;
    MACaptionAppearanceFontStyle v6 = 0;
  }
  else
  {
    MACaptionAppearanceFontStyle v6 = 0;
    uint64_t v7 = 0;
    if (!AudioFileGetGlobalInfoSize(0x73646964u, 8u, &v14, &outDataSize) && outDataSize >= 0x28)
    {
      MACaptionAppearanceFontStyle v6 = (char *)malloc_type_malloc(outDataSize, 0xD2B51F30uLL);
      if (!v6 || AudioFileGetGlobalInfo(0x73646964u, 8u, &v14, &outDataSize, v6) || outDataSize < 0x28)
      {
LABEL_9:
        uint64_t v7 = 0;
        goto LABEL_10;
      }
      uint64_t v9 = 0;
      int mFormatID = v5->mFormatID;
      unsigned int v11 = mFormatID - 1633772392;
      while (1)
      {
        if (mFormatID != *(_DWORD *)&v6[v9 + 8]) {
          goto LABEL_43;
        }
        if (mFormatID <= 1633772391)
        {
          if (mFormatID <= 1296122674)
          {
            if ((mFormatID - 778924081) >= 3 && mFormatID != 1096107074) {
              goto LABEL_45;
            }
          }
          else if (mFormatID <= 1363430705)
          {
            if (mFormatID != 1296122675 && mFormatID != 1296122678) {
              goto LABEL_45;
            }
          }
          else if (mFormatID != 1363430706 && mFormatID != 1363430723 && mFormatID != 1365470320)
          {
            goto LABEL_45;
          }
        }
        else if (mFormatID > 1634492770)
        {
          if (mFormatID <= 1768710754)
          {
            if (mFormatID != 1634492771 && mFormatID != 1634492791) {
              goto LABEL_45;
            }
          }
          else if (mFormatID != 1768710755 && mFormatID != 1768775988 && mFormatID != 1970037111)
          {
            goto LABEL_45;
          }
        }
        else if ((v11 > 0xB || ((1 << v11) & 0x911) == 0) && mFormatID != 1633889587 && mFormatID != 1634038579)
        {
LABEL_45:
          uint64_t v13 = &v6[v9];
          if (v5->mFormatFlags != *(_DWORD *)&v6[v9 + 12]) {
            goto LABEL_43;
          }
          UInt32 mBitsPerChannel = v5->mBitsPerChannel;
          goto LABEL_42;
        }
        UInt32 mBitsPerChannel = v5->mBitsPerChannel;
        uint64_t v13 = &v6[v9];
LABEL_42:
        if (mBitsPerChannel == *((_DWORD *)v13 + 8))
        {
          uint64_t v7 = 1;
          break;
        }
LABEL_43:
        v9 += 40;
        if (40 * (outDataSize / 0x28uLL) == v9) {
          goto LABEL_9;
        }
      }
    }
  }
LABEL_10:
  free(v6);
  return v7;
}

uint64_t FigAudioFileFormatWriterCreateWithByteStream(const __CFAllocator *a1, const void *a2, CFDictionaryRef theDict, CFTypeRef *a4)
{
  CFTypeRef cf = 0;
  int v23 = 1667327590;
  if (a4 && a2)
  {
    if (theDict)
    {
      CFURLRef Value = CFDictionaryGetValue(theDict, @"FileFormat");
      uint64_t v9 = (__CFString *)CFDictionaryGetValue(theDict, @"AudioPrimingFormat");
      uint64_t result = faf_audioFileTypeIDForFigFileType((uint64_t)Value, &v23);
      if (result) {
        return result;
      }
      int v11 = FigCFEqual();
      int v12 = v23;
      if (v23 != 1667327590 || v11 == 0) {
        uint64_t v14 = v9;
      }
      else {
        uint64_t v14 = @"AudioPrimingFormat_iTunesGaplessInfo";
      }
      if (v14) {
        BOOL v15 = CFEqual(v14, @"AudioPrimingFormat_iTunesGaplessInfo") != 0;
      }
      else {
        BOOL v15 = 0;
      }
    }
    else
    {
      BOOL v15 = 0;
      int v12 = 1667327590;
    }
    FigFormatWriterGetClassID();
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      CFTypeRef v17 = CFRetain(a2);
      CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, 0);
      if (Mutable)
      {
        *(unsigned char *)(DerivedStorage + 128) = v15;
        *(void *)(DerivedStorage + 40) = Mutable;
        *(_DWORD *)(DerivedStorage + 48) = v12;
        uint64_t v19 = MEMORY[0x1E4F1F9F8];
        long long v20 = *MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(DerivedStorage + 96) = *MEMORY[0x1E4F1F9F8];
        uint64_t v21 = *(void *)(v19 + 16);
        *(void *)(DerivedStorage + 112) = v21;
        *(_OWORD *)(DerivedStorage + 72) = v20;
        *(void *)(DerivedStorage + 88) = v21;
        *(void *)(DerivedStorage + 16) = a1;
        *(void *)(DerivedStorage + 24) = v17;
        if (a1) {
          CFRetain(a1);
        }
        uint64_t v22 = FigReentrantMutexCreate();
        uint64_t result = 0;
        *(void *)(DerivedStorage + 8) = v22;
        *a4 = cf;
      }
      else
      {
        if (v17) {
          CFRelease(v17);
        }
        if (cf) {
          CFRelease(cf);
        }
        return 4294954510;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t faf_audioFileTypeIDForFigFileType(uint64_t result, int *a2)
{
  int v2 = 1667327590;
  *a2 = 1667327590;
  if (result)
  {
    long long v4 = (const void *)result;
    CFTypeID TypeID = CFStringGetTypeID();
    if (TypeID == CFGetTypeID(v4))
    {
      if (CFEqual(v4, @"CAFAudioFile"))
      {
        uint64_t result = 0;
      }
      else if (CFEqual(v4, @"WAVEAudioFile"))
      {
        uint64_t result = 0;
        int v2 = 1380333108;
      }
      else if (CFEqual(v4, @"AIFFAudioFile"))
      {
        uint64_t result = 0;
        int v2 = 1095321155;
      }
      else
      {
        int v6 = CFEqual(v4, @"AMRAudioFile");
        if (v6) {
          int v2 = 1634562662;
        }
        else {
          int v2 = 0;
        }
        if (v6) {
          uint64_t result = 0;
        }
        else {
          uint64_t result = 4294954516;
        }
      }
      *a2 = v2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t figAudioFileWriter_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 0;
  }
  uint64_t v1 = DerivedStorage;
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)v1)
  {
    *(unsigned char *)uint64_t v1 = 1;
    MEMORY[0x19970E2B0](*(void *)(v1 + 8));
    return 0;
  }
  if (*(void *)(v1 + 56))
  {
    CFArrayRef v2 = *(const __CFArray **)(v1 + 40);
    if (v2 && CFArrayGetCount(v2)) {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 40), 0);
    }
    else {
      CFDictionaryRef ValueAtIndex = 0;
    }
    uint64_t outPropertyData = 0;
    unint64_t v26 = 0;
    unsigned int v22 = 0;
    unsigned int valuePtr = 0;
    uint64_t v21 = 0;
    if (!*(void *)(v1 + 120)) {
      goto LABEL_42;
    }
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(*(CFTypeRef *)(v1 + 120))) {
      goto LABEL_42;
    }
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 120), @"EncodingDelayInFrame");
    CFNumberRef v6 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 120), @"EncodingDrainInFrames");
    CFNumberRef v7 = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(v1 + 120), @"DurationInFrames");
    if (Value) {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    }
    if (v6) {
      CFNumberGetValue(v6, kCFNumberSInt32Type, &v22);
    }
    if (v7)
    {
      CFNumberGetValue(v7, kCFNumberSInt64Type, &v21);
      uint64_t outPropertyData = v21;
      unint64_t v26 = __PAIR64__(v22, valuePtr);
    }
    else
    {
LABEL_42:
      if (!ValueAtIndex
        || !ValueAtIndex[3] && !ValueAtIndex[5]
        || (UInt32 ioDataSize = 16, AudioFileGetProperty(*(AudioFileID *)(v1 + 56), 0x706E666Fu, &ioDataSize, &outPropertyData)))
      {
LABEL_25:
        AudioFileClose(*(AudioFileID *)(v1 + 56));
        *(void *)(v1 + 56) = 0;
        goto LABEL_26;
      }
      uint64_t v8 = ValueAtIndex[3];
      uint64_t v9 = ValueAtIndex[5];
      uint64_t outPropertyData = outPropertyData + (int)v26 + SHIDWORD(v26) - (v8 + v9);
      unint64_t v26 = __PAIR64__(v9, v8);
    }
    UInt32 ioDataSize = 16;
    OSStatus v10 = AudioFileSetProperty(*(AudioFileID *)(v1 + 56), 0x706E666Fu, 0x10u, &outPropertyData);
    if (v10 && v10 != 1886681407) {
      FigSignalErrorAt();
    }
    goto LABEL_25;
  }
LABEL_26:
  *(unsigned char *)uint64_t v1 = 1;
  MEMORY[0x19970E2B0](*(void *)(v1 + 8));
  int v11 = *(const void **)(v1 + 24);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(v1 + 24) = 0;
  }
  CFArrayRef v12 = *(const __CFArray **)(v1 + 40);
  if (v12)
  {
    CFIndex Count = CFArrayGetCount(v12);
    if (Count >= 1)
    {
      CFIndex v14 = Count;
      for (CFIndex i = 0; i != v14; ++i)
      {
        uint64_t v16 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v1 + 40), i);
        CFTypeRef v17 = (const void *)v16[1];
        if (v17) {
          CFRelease(v17);
        }
        free(v16);
      }
    }
    CFRelease(*(CFTypeRef *)(v1 + 40));
    *(void *)(v1 + 40) = 0;
  }
  uint64_t v18 = *(const void **)(v1 + 16);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(v1 + 16) = 0;
  }
  uint64_t v19 = *(const void **)(v1 + 120);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(v1 + 120) = 0;
  }
  return 0;
}

uint64_t figAudioFileWriter_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = figAudioFileWriter_Invalidate();
  if (DerivedStorage)
  {
    uint64_t result = *(void *)(DerivedStorage + 8);
    if (result)
    {
      uint64_t result = FigSimpleMutexDestroy();
      *(void *)(DerivedStorage + 8) = 0;
    }
  }
  return result;
}

__CFString *figAudioFileWriter_CopyDebugDescription(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringAppendFormat(Mutable, 0, @"<FigAudioFileWriter %p>: ByteStream: %@  FileFormat: %.4s", a1, DerivedStorage, DerivedStorage + 48);
  return Mutable;
}

uint64_t figAudioFileWriter_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  if (*(unsigned char *)DerivedStorage) {
    goto LABEL_8;
  }
  if (!CFEqual(@"LongestMediaDecodeDuration", a2))
  {
    uint64_t v9 = 4294954666;
    goto LABEL_7;
  }
  CMTime v12 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (!CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 40)))
  {
LABEL_8:
    uint64_t v9 = FigSignalErrorAt();
    goto LABEL_7;
  }
  uint64_t v9 = decodeDurationForTrack(a1, (uint64_t)&v12);
  if (v9)
  {
    FigSignalErrorAt();
  }
  else
  {
    CMTime v11 = v12;
    *a4 = CMTimeCopyAsDictionary(&v11, a3);
  }
LABEL_7:
  MEMORY[0x19970E2B0](*(void *)(DerivedStorage + 8));
  return v9;
}

uint64_t figAudioFileWriter_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (DerivedStorage && (CFNumberRef v6 = DerivedStorage, !*DerivedStorage))
  {
    if (CFEqual(@"iTunesGaplessInfo", a2))
    {
      if (a3)
      {
        CFTypeID TypeID = CFDictionaryGetTypeID();
        if (TypeID != CFGetTypeID(a3)) {
          return 0;
        }
      }
      uint64_t v9 = (const void *)*((void *)v6 + 15);
      if (v9)
      {
        CFRelease(v9);
        *((void *)v6 + 15) = 0;
      }
      if (a3)
      {
        CFDictionaryRef Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (CFDictionaryRef)a3);
        uint64_t result = 0;
        *((void *)v6 + 15) = Copy;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 4294954666;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t decodeDurationForTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex idx = 0;
  if (!*(void *)(DerivedStorage + 64))
  {
    uint64_t v10 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch epoch = *(void *)(v10 + 16);
    goto LABEL_11;
  }
  uint64_t v4 = DerivedStorage;
  getTrackInfoArrayIndexFromFigTrackID(DerivedStorage, 1, &idx);
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v4 + 40), idx);
  if (ValueAtIndex)
  {
    CFNumberRef v6 = (const opaqueCMFormatDescription *)*((void *)ValueAtIndex + 1);
    if (v6)
    {
      StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(v6);
      if (StreamBasicDescription)
      {
        if (StreamBasicDescription->mSampleRate > 0.0)
        {
          CMTimeMake(&v11, *(void *)(v4 + 64) * StreamBasicDescription->mFramesPerPacket, (int)StreamBasicDescription->mSampleRate);
          *(_OWORD *)a2 = *(_OWORD *)&v11.value;
          CMTimeEpoch epoch = v11.epoch;
LABEL_11:
          *(void *)(a2 + 16) = epoch;
          return 0;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t figAudioFileWriter_AddTrack(uint64_t a1, int a2, uint64_t a3, _DWORD *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1
    && a4
    && a2 == 1936684398
    && (uint64_t v8 = DerivedStorage, Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 40)), Count < 1))
  {
    CFIndex v11 = Count;
    CMTime v12 = malloc_type_calloc(1uLL, 0x40uLL, 0x1060040C7CCF50CuLL);
    if (v12)
    {
      *(_DWORD *)CMTime v12 = 1936684398;
      v12[7] = v11;
      CFArrayAppendValue(*(CFMutableArrayRef *)(v8 + 40), v12);
      uint64_t result = 0;
      *a4 = v11 + 1;
    }
    else
    {
      return 4294954510;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t figAudioFileWriter_CopyTrackProperty(uint64_t a1, int a2, const void *a3, const __CFAllocator *a4, __CFArray **a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a3)
  {
    uint64_t v10 = DerivedStorage;
    CFIndex idx = 0;
    uint64_t TrackInfoArrayIndexFromFigTrackID = getTrackInfoArrayIndexFromFigTrackID(DerivedStorage, a2, &idx);
    if (TrackInfoArrayIndexFromFigTrackID)
    {
      uint64_t v15 = TrackInfoArrayIndexFromFigTrackID;
      FigSignalErrorAt();
      return v15;
    }
    CFDictionaryRef ValueAtIndex = (const void **)CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 40), idx);
    if (!CFEqual(@"FormatDescriptionArray", a3)) {
      return 4294954666;
    }
    CFMutableArrayRef Mutable = CFArrayCreateMutable(a4, 1, MEMORY[0x1E4F1D510]);
    if (Mutable)
    {
      CFIndex v14 = Mutable;
      CFArrayAppendValue(Mutable, ValueAtIndex[1]);
      uint64_t v15 = 0;
      *a5 = v14;
      return v15;
    }
  }

  return FigSignalErrorAt();
}

uint64_t figAudioFileWriter_SetTrackProperty(uint64_t a1, int a2, const void *a3, const void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a3) {
    goto LABEL_19;
  }
  uint64_t v8 = DerivedStorage;
  CFIndex idx = 0;
  uint64_t TrackInfoArrayIndexFromFigTrackID = getTrackInfoArrayIndexFromFigTrackID(DerivedStorage, a2, &idx);
  if (TrackInfoArrayIndexFromFigTrackID)
  {
    uint64_t v17 = TrackInfoArrayIndexFromFigTrackID;
    FigSignalErrorAt();
    return v17;
  }
  CFDictionaryRef ValueAtIndex = (CMAudioFormatDescriptionRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 40), idx);
  if (!CFEqual(@"ReplacementFormatDescriptionArray", a3)) {
    return 4294954666;
  }
  if (a4)
  {
    CFTypeID v11 = CFGetTypeID(a4);
    if (v11 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)a4) == 1)
    {
      CMTime v12 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)a4, 0);
      CMAudioFormatDescriptionMask equalityMaskOut = 0;
      if (!v12) {
        return FigSignalErrorAt();
      }
      uint64_t v13 = v12;
      CFTypeID v14 = CFGetTypeID(v12);
      if (v14 != CMFormatDescriptionGetTypeID() || CMFormatDescriptionGetMediaType(v13) != 1936684398) {
        return FigSignalErrorAt();
      }
      if (CMAudioFormatDescriptionEqual(v13, ValueAtIndex[1], 0xFu, &equalityMaskOut)) {
        return 0;
      }
      char v15 = equalityMaskOut;
      if ((equalityMaskOut & 1) == 0) {
        return FigSignalErrorAt();
      }
      if ((equalityMaskOut & 4) == 0)
      {
        faf_setAudioChannelLayout(v8, v13, 1);
        char v15 = equalityMaskOut;
      }
      if ((v15 & 2) != 0) {
        return 0;
      }
      size_t sizeOut = 0;
      MagicCookie = CMAudioFormatDescriptionGetMagicCookie(v13, &sizeOut);
      if (!AudioFileSetProperty(*(AudioFileID *)(v8 + 56), 0x6D676963u, sizeOut, MagicCookie)) {
        return 0;
      }
      else {
        return FigSignalErrorAt();
      }
    }
  }
LABEL_19:

  return FigSignalErrorAt();
}

uint64_t figAudioFileWriter_AddSampleBufferToTrack(uint64_t a1, int a2, opaqueCMSampleBuffer *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  UInt32 ioNumPackets = 0;
  size_t lengthAtOffsetOut = 0;
  size_t packetDescriptionsSizeOut = 0;
  size_t totalLengthOut = 0;
  if (DerivedStorage)
  {
    uint64_t v6 = DerivedStorage;
    packetDescriptionsPointerOut = 0;
    CMItemCount timingArrayEntriesNeededOut = 0;
    dataPointerOut = 0;
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
    if (*(unsigned char *)v6 || !a3)
    {
LABEL_88:
      FigSignalErrorAt();
      goto LABEL_89;
    }
    uint64_t SampleTimingInfoArray = CMSampleBufferGetSampleTimingInfoArray(a3, 0, 0, &timingArrayEntriesNeededOut);
    if (SampleTimingInfoArray == -12736)
    {
LABEL_89:
      uint64_t v8 = 0;
      goto LABEL_90;
    }
    uint64_t v8 = SampleTimingInfoArray;
    if (SampleTimingInfoArray)
    {
LABEL_90:
      MEMORY[0x19970E2B0](*(void *)(v6 + 8));
      goto LABEL_91;
    }
    if ((*(unsigned char *)(v6 + 108) & 1) == 0)
    {
      uint64_t v9 = MEMORY[0x1E4F1FA10];
      *(_OWORD *)(v6 + 72) = *MEMORY[0x1E4F1FA10];
      *(void *)(v6 + 88) = *(void *)(v9 + 16);
      CMSampleBufferGetOutputPresentationTimeStamp(&v68, a3);
      *(CMTime *)(v6 + 96) = v68;
    }
    CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(a3);
    CFTypeRef v11 = CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E4F1F258], 0);
    CFTypeRef v12 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    if (v11 != (CFTypeRef)*MEMORY[0x1E4F1CFD0]) {
      CFTypeRef v11 = CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E4F1F2A0], 0);
    }
    if (v11 == v12)
    {
      uint64_t v8 = 0;
      *(unsigned char *)(v6 + 129) = 1;
      goto LABEL_90;
    }
    if (*(unsigned char *)(v6 + 129))
    {
      uint64_t v13 = FigSignalErrorAt();
      if (v13)
      {
LABEL_17:
        uint64_t v8 = v13;
        goto LABEL_90;
      }
    }
    CFIndex idx = 0;
    uint64_t TrackInfoArrayIndexFromFigTrackID = getTrackInfoArrayIndexFromFigTrackID(v6, a2, &idx);
    if (TrackInfoArrayIndexFromFigTrackID)
    {
LABEL_100:
      uint64_t v8 = TrackInfoArrayIndexFromFigTrackID;
      FigSignalErrorAt();
      goto LABEL_90;
    }
    CFDictionaryRef ValueAtIndex = (CMAudioFormatDescriptionRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 40), idx);
    uint64_t v16 = ValueAtIndex;
    if (*(void *)(v6 + 56))
    {
      if (!CMAudioFormatDescriptionEqual(FormatDescription, ValueAtIndex[1], 7u, 0))
      {
LABEL_16:
        uint64_t v13 = FigSignalErrorAt();
        goto LABEL_17;
      }
    }
    else
    {
      StreamBasicDescription = CMAudioFormatDescriptionGetStreamBasicDescription(FormatDescription);
      MostCompatibleFormat = CMAudioFormatDescriptionGetMostCompatibleFormat(FormatDescription);
      v68.CMTime value = 0;
      MagicCookie = CMAudioFormatDescriptionGetMagicCookie(FormatDescription, (size_t *)&v68);
      if (AudioFileInitializeWithCallbacks((void *)v6, (AudioFile_ReadProc)afReadProc, (AudioFile_WriteProc)afWriteProc, (AudioFile_GetSizeProc)afGetSizeProc, (AudioFile_SetSizeProc)afSetSizeProc, *(_DWORD *)(v6 + 48), StreamBasicDescription, 0, (AudioFileID *)(v6 + 56))&& (*(_DWORD *)(v6 + 48) != 1095321158|| (*(_DWORD *)(v6 + 48) = 1095321155, AudioFileInitializeWithCallbacks((void *)v6, (AudioFile_ReadProc)afReadProc, (AudioFile_WriteProc)afWriteProc, (AudioFile_GetSizeProc)afGetSizeProc, (AudioFile_SetSizeProc)afSetSizeProc, 0x41494643u, StreamBasicDescription,
               0,
               (AudioFileID *)(v6 + 56))))
        || (v16[1] = FormatDescription, CFRetain(FormatDescription), MagicCookie)
        && v68.value
        && !HIDWORD(v68.value)
        && AudioFileSetProperty(*(AudioFileID *)(v6 + 56), 0x6D676963u, v68.value, MagicCookie))
      {
        uint64_t TrackInfoArrayIndexFromFigTrackID = FigSignalErrorAt();
        if (TrackInfoArrayIndexFromFigTrackID) {
          goto LABEL_100;
        }
      }
      else
      {
        faf_setAudioChannelLayout(v6, FormatDescription, 0);
        *((_DWORD *)v16 + 4) = (int)MostCompatibleFormat->mASBD.mSampleRate;
      }
    }
    unsigned int v21 = faf_canProcessTrim((const AudioStreamBasicDescription *)FormatDescription);
    unsigned int v22 = v21;
    int v23 = (CMTime *)MEMORY[0x1E4F1FA48];
    if (!*(unsigned char *)(v6 + 128) || v21)
    {
LABEL_51:
      uint64_t TrackInfoArrayIndexFromFigTrackID = CMSampleBufferGetAudioStreamPacketDescriptionsPtr(a3, (const AudioStreamPacketDescription **)&packetDescriptionsPointerOut, &packetDescriptionsSizeOut);
      if (!TrackInfoArrayIndexFromFigTrackID)
      {
        unint64_t NumSamples = CMSampleBufferGetNumSamples(a3);
        if (HIDWORD(NumSamples)) {
          goto LABEL_16;
        }
        int v29 = NumSamples;
        UInt32 ioNumPackets = NumSamples;
        CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(a3);
        if (DataBuffer)
        {
          CMTime value = DataBuffer;
          CFRetain(DataBuffer);
          if (!v22) {
            goto LABEL_70;
          }
          Dataunint64_t Length = CMBlockBufferGetDataLength(value);
          CMTime v68 = *v23;
          CMTime valuePtr = v68;
          uint64_t v32 = CMSampleBufferGetFormatDescription(a3);
          if (faf_canProcessTrim((const AudioStreamBasicDescription *)v32))
          {
            uint64_t v33 = CMAudioFormatDescriptionGetStreamBasicDescription(v32);
            if (v33)
            {
              CFAllocatorRef v34 = v33;
              uint64_t TrimsOfSampleBuffer = faf_getTrimsOfSampleBuffer(a3, (uint64_t)&v68, (uint64_t)&valuePtr);
              if (TrimsOfSampleBuffer) {
                goto LABEL_102;
              }
              if ((v68.flags & 0x1D) == 1)
              {
                CMTime time = v68;
                unint64_t v36 = (unint64_t)(CMTimeGetSeconds(&time) * v34->mSampleRate + 0.5);
                size_t v37 = v36 * v34->mBytesPerFrame;
              }
              else
              {
                size_t v37 = 0;
                unint64_t v36 = 0;
              }
              if ((valuePtr.flags & 0x1D) == 1)
              {
                CMTime time = valuePtr;
                unint64_t v38 = (unint64_t)(CMTimeGetSeconds(&time) * v34->mSampleRate + 0.5);
                unint64_t v39 = v38 * v34->mBytesPerFrame;
              }
              else
              {
                unint64_t v39 = 0;
                unint64_t v38 = 0;
              }
              unint64_t v40 = CMSampleBufferGetNumSamples(a3);
              uint64_t v41 = CMSampleBufferGetDataBuffer(a3);
              if (v41)
              {
                size_t v42 = CMBlockBufferGetDataLength(v41);
                size_t v43 = v42 - (v39 + v37);
                if (v42 > v39 + v37 && v38 + v36 < v40)
                {
                  if (v43 != DataLength)
                  {
                    v68.CMTime value = 0;
                    uint64_t TrimsOfSampleBuffer = CMBlockBufferCreateWithBufferReference(*(CFAllocatorRef *)(v6 + 16), value, v37, v43, 0, (CMBlockBufferRef *)&v68);
                    if (!TrimsOfSampleBuffer)
                    {
                      CFRelease(value);
                      CMTime value = (OpaqueCMBlockBuffer *)v68.value;
                      UInt32 ioNumPackets = v29 - (v38 + v36);
                      goto LABEL_70;
                    }
                    goto LABEL_102;
                  }
LABEL_70:
                  uint64_t DataPointer = CMBlockBufferGetDataPointer(value, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
                  if (!DataPointer)
                  {
                    if (lengthAtOffsetOut == totalLengthOut) {
                      goto LABEL_76;
                    }
                    v68.CMTime value = 0;
                    if (CMBlockBufferCreateContiguous(*(CFAllocatorRef *)(v6 + 16), value, *(CFAllocatorRef *)(v6 + 16), 0, 0, totalLengthOut, 0, (CMBlockBufferRef *)&v68))
                    {
                      goto LABEL_106;
                    }
                    if (value) {
                      CFRelease(value);
                    }
                    CMTime value = (OpaqueCMBlockBuffer *)v68.value;
                    v68.CMTime value = 0;
                    uint64_t DataPointer = CMBlockBufferGetDataPointer(value, 0, &lengthAtOffsetOut, &totalLengthOut, &dataPointerOut);
                    if (!DataPointer)
                    {
LABEL_76:
                      size_t v45 = CMBlockBufferGetDataLength(value);
                      if (!HIDWORD(v45))
                      {
                        uint64_t v8 = AudioFileWritePackets(*(AudioFileID *)(v6 + 56), 0, v45, packetDescriptionsPointerOut, *(void *)(v6 + 64), &ioNumPackets, dataPointerOut);
                        if (!v8)
                        {
                          *(void *)(v6 + 64) += ioNumPackets;
                          goto LABEL_79;
                        }
                        goto LABEL_104;
                      }
LABEL_106:
                      uint64_t v8 = FigSignalErrorAt();
LABEL_79:
                      MEMORY[0x19970E2B0](*(void *)(v6 + 8));
                      if (!value) {
                        goto LABEL_91;
                      }
                      goto LABEL_83;
                    }
                  }
                  uint64_t v8 = DataPointer;
LABEL_104:
                  FigSignalErrorAt();
                  goto LABEL_79;
                }
                uint64_t v8 = 0;
LABEL_82:
                MEMORY[0x19970E2B0](*(void *)(v6 + 8));
LABEL_83:
                CFRelease(value);
LABEL_91:
                if (v8)
                {
                  LODWORD(valuePtr.value) = v8;
                  CFAllocatorRef v48 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                  v68.CMTime value = (CMTimeValue)CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
                  if (v68.value) {
                    CFDictionaryRef v49 = CFDictionaryCreate(v48, (const void **)kFigFormatWriterNotificationParameter_OSStatus, (const void **)&v68, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                  }
                  else {
                    CFDictionaryRef v49 = 0;
                  }
                  CMNotificationCenterGetDefaultLocalCenter();
                  CMNotificationCenterPostNotification();
                  if (v49) {
                    CFRelease(v49);
                  }
                  if (v68.value) {
                    CFRelease((CFTypeRef)v68.value);
                  }
                }
                return v8;
              }
            }
          }
          uint64_t TrimsOfSampleBuffer = FigSignalErrorAt();
          uint64_t v8 = 0;
          if (!TrimsOfSampleBuffer) {
            goto LABEL_82;
          }
LABEL_102:
          uint64_t v8 = TrimsOfSampleBuffer;
          FigSignalErrorAt();
          goto LABEL_82;
        }
        goto LABEL_88;
      }
      goto LABEL_100;
    }
    *(_OWORD *)&v68.CMTime value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v24 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    v68.CMTimeEpoch epoch = v24;
    long long v50 = *(_OWORD *)&v68.value;
    *(_OWORD *)&valuePtr.CMTime value = *(_OWORD *)&v68.value;
    valuePtr.CMTimeEpoch epoch = v24;
    CMTime time = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    uint64_t v13 = faf_getTrimsOfSampleBuffer(a3, (uint64_t)&v68, (uint64_t)&valuePtr);
    if (v13) {
      goto LABEL_17;
    }
    CMTime lhs = v68;
    CMTime rhs = valuePtr;
    CMTimeAdd(&time, &lhs, &rhs);
    CMSampleBufferGetDuration(&time1, a3);
    CMTime lhs = time;
    int32_t v25 = CMTimeCompare(&time1, &lhs);
    if (v25 <= 0)
    {
      long long v26 = v50;
      if (!*((unsigned char *)v16 + 32))
      {
        CMTime v68 = time;
        *(_OWORD *)&valuePtr.CMTime value = v50;
        valuePtr.CMTimeEpoch epoch = v24;
LABEL_43:
        CMTime lhs = v68;
        *(_OWORD *)&rhs.CMTime value = v26;
        rhs.CMTimeEpoch epoch = v24;
        if (CMTimeCompare(&lhs, &rhs) >= 1)
        {
          int32_t v27 = *((_DWORD *)v16 + 4);
          CMTime lhs = v68;
          CMTimeConvertScale(&v62, &lhs, v27, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v16[3] = (CMAudioFormatDescriptionRef)((char *)v16[3] + v62.value);
          if (v25 > 0)
          {
            *((unsigned char *)v16 + 32) = 1;
            if (!*((unsigned char *)v16 + 48))
            {
LABEL_86:
              CMTime lhs = valuePtr;
              *(_OWORD *)&rhs.CMTime value = v50;
              rhs.CMTimeEpoch epoch = v24;
              if (CMTimeCompare(&lhs, &rhs) >= 1)
              {
                int32_t v47 = *((_DWORD *)v16 + 4);
                CMTime lhs = valuePtr;
                CMTimeConvertScale(&v60, &lhs, v47, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
                v16[5] = (CMAudioFormatDescriptionRef)((char *)v16[5] + v60.value);
                *((unsigned char *)v16 + 48) = 1;
              }
              goto LABEL_51;
            }
            goto LABEL_50;
          }
          if (!*((unsigned char *)v16 + 48)) {
            goto LABEL_86;
          }
LABEL_85:
          int32_t v46 = *((_DWORD *)v16 + 4);
          CMTime lhs = valuePtr;
          CMTimeConvertScale(&v61, &lhs, v46, kCMTimeRoundingMethod_RoundHalfAwayFromZero);
          v16[5] = (CMAudioFormatDescriptionRef)((char *)v16[5] + v61.value);
          goto LABEL_51;
        }
        *((unsigned char *)v16 + 32) = 1;
LABEL_48:
        if (!*((unsigned char *)v16 + 48)) {
          goto LABEL_86;
        }
        if (v25 <= 0) {
          goto LABEL_85;
        }
LABEL_50:
        uint64_t v13 = FigSignalErrorAt();
        if (v13) {
          goto LABEL_17;
        }
        goto LABEL_51;
      }
      *(_OWORD *)&v68.CMTime value = v50;
      v68.CMTimeEpoch epoch = v24;
      CMTime valuePtr = time;
    }
    else
    {
      long long v26 = v50;
      if (!*((unsigned char *)v16 + 32)) {
        goto LABEL_43;
      }
    }
    CMTime lhs = v68;
    *(_OWORD *)&rhs.CMTime value = v26;
    rhs.CMTimeEpoch epoch = v24;
    if (CMTimeCompare(&lhs, &rhs) > 0) {
      goto LABEL_50;
    }
    goto LABEL_48;
  }

  return FigSignalErrorAt();
}

uint64_t figAudioFileWriter_Flush()
{
  return 0;
}

uint64_t figAudioFileWriter_WriteHeader()
{
  return 0;
}

uint64_t figAudioFileWriter_BeginSession(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 40));
  CMTime v14 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v13 = v14;
  int v6 = *(_DWORD *)(DerivedStorage + 84);
  if ((~v6 & 5) != 0 && (v6 & 1) == 0 && Count)
  {
    CFNumberRef v7 = (_OWORD *)(DerivedStorage + 96);
    if ((*(unsigned char *)(DerivedStorage + 108) & 1) == 0)
    {
      uint64_t result = 0;
      long long v9 = *(_OWORD *)&a2->value;
      *(void *)(DerivedStorage + 112) = a2->epoch;
      _OWORD *v7 = v9;
LABEL_6:
      long long v10 = *(_OWORD *)&a2->value;
      *(void *)(DerivedStorage + 88) = a2->epoch;
      *(_OWORD *)(DerivedStorage + 72) = v10;
      return result;
    }
    if (!decodeDurationForTrack(a1, (uint64_t)&v14))
    {
      *(_OWORD *)&lhs.CMTime value = *v7;
      lhs.CMTimeEpoch epoch = *(void *)(DerivedStorage + 112);
      CMTime v11 = v14;
      CMTimeAdd(&v13, &lhs, &v11);
      CMTime lhs = *a2;
      CMTime v11 = v13;
      uint64_t result = CMTimeCompare(&lhs, &v11);
      if (result) {
        return FigSignalErrorAt();
      }
      goto LABEL_6;
    }
  }

  return FigSignalErrorAt();
}

uint64_t figAudioFileWriter_EndSession(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_OWORD *)&v13.CMTime value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v5 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v13.CMTimeEpoch epoch = v5;
  *(_OWORD *)&v12.CMTime value = *(_OWORD *)&v13.value;
  v12.CMTimeEpoch epoch = v5;
  int v6 = *(_DWORD *)(DerivedStorage + 84);
  if ((~v6 & 5) != 0
    && (v6 & 1) != 0
    && (v7 = DerivedStorage, long long v9 = *(_OWORD *)&v13.value, !decodeDurationForTrack(a1, (uint64_t)&v13)))
  {
    CMTime lhs = *(CMTime *)(v7 + 96);
    CMTime rhs = v13;
    CMTimeAdd(&v12, &lhs, &rhs);
    CMTime lhs = *a2;
    CMTime rhs = v12;
    CMTimeCompare(&lhs, &rhs);
    *(_OWORD *)(v7 + 72) = v9;
    *(void *)(v7 + 88) = v5;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

const AudioChannelLayout *faf_setAudioChannelLayout(uint64_t a1, CMAudioFormatDescriptionRef desc, int a3)
{
  size_t sizeOut = 0;
  uint64_t result = CMAudioFormatDescriptionGetChannelLayout(desc, &sizeOut);
  if (a3)
  {
    size_t v7 = sizeOut;
  }
  else
  {
    if (!result) {
      return result;
    }
    size_t v7 = sizeOut;
    if (!sizeOut) {
      return result;
    }
  }
  if (!HIDWORD(v7))
  {
    uint64_t result = (const AudioChannelLayout *)AudioFileSetProperty(*(AudioFileID *)(a1 + 56), 0x636D6170u, v7, result);
    if (result)
    {
      uint64_t v10 = 0;
      uint64_t v9 = 0;
      int v12 = 0;
      uint64_t v11 = 0;
      AudioChannelLayoutTag inPropertyData = CMAudioFormatDescriptionGetMostCompatibleFormat(desc)->mChannelLayoutTag;
      size_t sizeOut = 12;
      return (const AudioChannelLayout *)AudioFileSetProperty(*(AudioFileID *)(a1 + 56), 0x636D6170u, 0xCu, &inPropertyData);
    }
  }
  return result;
}

const AudioStreamBasicDescription *faf_canProcessTrim(const AudioStreamBasicDescription *result)
{
  if (result)
  {
    uint64_t v1 = (const opaqueCMFormatDescription *)result;
    if (CMFormatDescriptionGetMediaSubType((CMFormatDescriptionRef)result) == 1819304813)
    {
      uint64_t result = CMAudioFormatDescriptionGetStreamBasicDescription(v1);
      if (result) {
        return (const AudioStreamBasicDescription *)((result->mFormatFlags & 0x20) == 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t afReadProc(uint64_t a1, uint64_t a2, int a3, uint64_t a4, _DWORD *a5)
{
  LODWORD(v7) = a3;
  uint64_t v20 = 0;
  MEMORY[0x19970E290](*(void *)(a1 + 8));
  if (*(unsigned char *)a1)
  {
    unsigned int v10 = 0;
    BOOL v11 = 0;
    goto LABEL_14;
  }
  uint64_t v12 = a2 + v7;
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  BOOL v11 = v12 > v13;
  if (v12 <= v13) {
    uint64_t v7 = v7;
  }
  else {
    uint64_t v7 = (v13 - a2);
  }
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(v16 + 8);
  if (v17)
  {
    unsigned int v10 = v17(v14, v7, a2, a4, &v20);
    if (!v10)
    {
      *a5 = v20;
      goto LABEL_14;
    }
  }
  else
  {
    unsigned int v10 = -12782;
  }
  FigSignalErrorAt();
LABEL_14:
  if (v11 && v10 == 0) {
    uint64_t v18 = 4294967257;
  }
  else {
    uint64_t v18 = v10;
  }
  MEMORY[0x19970E2B0](*(void *)(a1 + 8));
  return v18;
}

uint64_t afWriteProc(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v16 = 0;
  MEMORY[0x19970E290](*(void *)(a1 + 8));
  if (*(unsigned char *)a1) {
    goto LABEL_2;
  }
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, uint64_t *))(v13 + 16);
  if (!v14)
  {
    uint64_t v10 = 4294954514;
    goto LABEL_12;
  }
  uint64_t v10 = v14(v11, a3, a2, a4, &v16);
  if (v10)
  {
LABEL_12:
    FigSignalErrorAt();
    goto LABEL_13;
  }
  if (v16 != a3)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  *a5 = a3;
  if (a3 + a2 > *(void *)(a1 + 32))
  {
    uint64_t v10 = 0;
    *(void *)(a1 + 32) = a3 + a2;
    goto LABEL_13;
  }
LABEL_2:
  uint64_t v10 = 0;
LABEL_13:
  MEMORY[0x19970E2B0](*(void *)(a1 + 8));
  return v10;
}

uint64_t afGetSizeProc(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t afSetSizeProc(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = a2;
  return 0;
}

uint64_t faf_getTrimsOfSampleBuffer(const void *a1, uint64_t a2, uint64_t a3)
{
  if (a2 && a3)
  {
    uint64_t v6 = MEMORY[0x1E4F1F9F8];
    long long v7 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1F9F8];
    uint64_t v8 = *(void *)(v6 + 16);
    *(void *)(a2 + 16) = v8;
    *(_OWORD *)a3 = v7;
    *(void *)(a3 + 16) = v8;
    CFDictionaryRef v9 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F308], 0);
    if (v9)
    {
      memset(&v12, 0, sizeof(v12));
      CMTimeMakeFromDictionary(&v12, v9);
      if (v12.flags) {
        *(CMTime *)a2 = v12;
      }
    }
    CFDictionaryRef v10 = (const __CFDictionary *)CMGetAttachment(a1, (CFStringRef)*MEMORY[0x1E4F1F300], 0);
    if (v10)
    {
      memset(&v12, 0, sizeof(v12));
      CMTimeMakeFromDictionary(&v12, v10);
      if (v12.flags) {
        *(CMTime *)a3 = v12;
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigFileStarByteStreamCreateForFileURL(const __CFURL *a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  bzero(buffer, 0x400uLL);
  if (FigIsPersistentURL())
  {
    CFStringRef PathForPersistentURL = (const __CFString *)FigCreatePathForPersistentURL();
    if (!PathForPersistentURL) {
      return FigSignalErrorAt();
    }
    CFStringRef v6 = PathForPersistentURL;
    CFStringGetFileSystemRepresentation(PathForPersistentURL, buffer, 1023);
    CFRelease(v6);
  }
  else if (!CFURLGetFileSystemRepresentation(a1, 1u, (UInt8 *)buffer, 1024))
  {
    return FigSignalErrorAt();
  }
  CMByteStreamGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7) {
    return v7;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 40) = v9;
  if (!v9) {
    return FigSignalErrorAt();
  }
  *(void *)uint64_t DerivedStorage = CFRetain(a1);
  CFDictionaryRef v10 = fopen(buffer, "rb");
  *(void *)(DerivedStorage + 8) = v10;
  if (!v10 || (int v11 = fileno(v10), *(_DWORD *)(DerivedStorage + 16) = v11, v11 == -1))
  {
    __error();
    return FigSignalErrorAt();
  }
  fcntl(v11, 48, 1);
  FigByteStreamStatsSetupWorker();
  uint64_t v12 = 0;
  *a3 = 0;
  return v12;
}

uint64_t FigFileStarByteStreamCreateForFile(uint64_t a1, const __CFAllocator *a2, void *a3)
{
  DarwinPath = (const char *)FigFileGetDarwinPath();
  size_t v6 = strlen(DarwinPath);
  CFURLRef v7 = CFURLCreateFromFileSystemRepresentation(a2, (const UInt8 *)DarwinPath, v6, 0);
  uint64_t v8 = FigFileStarByteStreamCreateForFileURL(v7, (uint64_t)a2, a3);
  if (v7) {
    CFRelease(v7);
  }
  return v8;
}

uint64_t FigFileStarByteStreamEqual()
{
  uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  CFArrayRef v2 = *DerivedStorage;

  return CFEqual(v2, v1);
}

uint64_t FigFileStarByteStreamFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    if (*(void *)(DerivedStorage + 8))
    {
      fclose(*(FILE **)(DerivedStorage + 8));
      uint64_t v1 = *(const void **)DerivedStorage;
    }
    CFRelease(v1);
  }
  if (*(void *)(DerivedStorage + 40)) {
    FigSimpleMutexDestroy();
  }

  return FigByteStreamStatsTeardownWorker();
}

__CFString *FigFileStarByteStreamCopyDebugDescription()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringRef v2 = CFCopyDescription(*DerivedStorage);
  if (v2)
  {
    CFStringRef v3 = v2;
    CFStringAppendFormat(Mutable, 0, @"<FigFileStarByteStream %p>{%@}", DerivedStorage, v2);
    CFRelease(v3);
  }
  return Mutable;
}

uint64_t FigFileStarByteStreamCopyProperty(uint64_t a1, const void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC50]) || CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC48]))
  {
    memset(&v15, 0, sizeof(v15));
    fstat(*(_DWORD *)(DerivedStorage + 16), &v15);
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFNumberType v8 = kCFNumberSInt64Type;
    p_st_size = &v15.st_size;
LABEL_4:
    uint64_t StatsDictionary = (uint64_t)CFNumberCreate(v7, v8, p_st_size);
LABEL_5:
    uint64_t v11 = StatsDictionary;
    uint64_t result = 0;
    *a4 = v11;
    return result;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC58]))
  {
    CFURLRef v13 = (CFURLRef)*MEMORY[0x1E4F1CFD0];
LABEL_11:
    uint64_t StatsDictionary = (uint64_t)CFRetain(v13);
    goto LABEL_5;
  }
  if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1EC78]))
  {
    CFURLRef v13 = *(CFURLRef *)DerivedStorage;
    goto LABEL_11;
  }
  if (!CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB40]))
  {
    if (CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB58]) || !CFEqual(a2, (CFTypeRef)*MEMORY[0x1E4F1FB78])) {
      return 4294954512;
    }
    uint64_t StatsDictionary = FigByteStreamStatsCreateStatsDictionary();
    goto LABEL_5;
  }
  int v17 = 0;
  memset(v16, 0, sizeof(v16));
  v14[1] = 0;
  v14[2] = 0;
  bzero(&v15, 0x400uLL);
  v14[0] = 0x400000000005;
  if (!CFURLGetFileSystemRepresentation(*(CFURLRef *)DerivedStorage, 1u, (UInt8 *)&v15, 1024)) {
    return 4294954513;
  }
  uint64_t result = getattrlist((const char *)&v15, v14, v16, 0x24uLL, 0);
  if (!result)
  {
    CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_st_size = (off_t *)&v16[4];
    CFNumberType v8 = kCFNumberSInt32Type;
    goto LABEL_4;
  }
  return result;
}

uint64_t FigFileStarByteStreamSetProperty()
{
  return 4294954512;
}

uint64_t FigFileStarByteStreamRead(uint64_t a1, size_t a2, off_t a3, void *a4, uint64_t *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigGetUpTimeNanoseconds();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 40));
  if (*(void *)(DerivedStorage + 24) != a3)
  {
    *(void *)(DerivedStorage + 24) = a3;
    *(unsigned char *)(DerivedStorage + 32) = 1;
  }
  if (a2 > 0x1000)
  {
    uint64_t v10 = pread(*(_DWORD *)(DerivedStorage + 16), a4, a2, a3);
    *(unsigned char *)(DerivedStorage + 32) = 1;
    if (!a5) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*(unsigned char *)(DerivedStorage + 32))
  {
    if (fseeko(*(FILE **)(DerivedStorage + 8), a3, 0))
    {
      __error();
      uint64_t v11 = FigSignalErrorAt();
      goto LABEL_17;
    }
    *(unsigned char *)(DerivedStorage + 32) = 0;
  }
  uint64_t v10 = fread(a4, 1uLL, a2, *(FILE **)(DerivedStorage + 8));
  if (a5) {
LABEL_5:
  }
    *a5 = v10;
LABEL_6:
  uint64_t v11 = 0;
  if (a2 && v10 <= 0)
  {
    if (v10)
    {
      __error();
      uint64_t v11 = FigSignalErrorAt();
    }
    else
    {
      uint64_t v11 = 4294954423;
    }
  }
  *(void *)(DerivedStorage + 24) += v10;
LABEL_17:
  FigGetUpTimeNanoseconds();
  FigByteStreamStatsLogOneRead();
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 40));
  return v11;
}

uint64_t FigFileStarByteStreamGetAvailableLengthAtOffset(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v7, 0, sizeof(v7));
  if (a3)
  {
    fstat(*(_DWORD *)(DerivedStorage + 16), &v7);
    if (a2 < 0 || v7.st_size <= a2) {
      *a3 = 0;
    }
    else {
      *a3 = v7.st_size - a2;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigFileStarByteStreamReadAndCreateBlockBuffer(const void *a1)
{
  CFGetAllocator(a1);

  return CMCreateContiguousBlockBufferFromStream();
}

uint64_t EstimateMaximumTrimTimeForFileSize(uint64_t a1, uint64_t a2, CMTime *a3)
{
  CFTypeRef v46 = 0;
  CFTypeRef v47 = 0;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v45 = 0;
  CFNumberType v8 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *, char *))(v7 + 64);
  if (v8) {
    v8(a1, 0, 1986618469, &v47, (char *)&v45 + 4);
  }
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *, uint64_t *))(v10 + 64);
  if (v11) {
    v11(a1, 0, 1936684398, &v46, &v45);
  }
  unint64_t v12 = a2 - (uint64_t)((double)a2 * 0.004);
  CFTypeRef v14 = v46;
  CFTypeRef v13 = v47;
  if (!v47)
  {
    if (!v46)
    {
      uint64_t v23 = FigSignalErrorAt();
LABEL_58:
      uint64_t v43 = v23;
      goto LABEL_59;
    }
    CFTypeRef v13 = v46;
    unint64_t v18 = v12;
    int v19 = 0;
LABEL_57:
    uint64_t v23 = EstimateByteTimingForTrack((uint64_t)v13, v18, v19, a3);
    goto LABEL_58;
  }
  if (!v46)
  {
LABEL_56:
    unint64_t v18 = v12;
    int v19 = (int)v14;
    goto LABEL_57;
  }
  CFTypeRef v53 = 0;
  CFDictionaryRef v54 = 0;
  CFTypeRef cf = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v46);
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v20 = *(uint64_t (**)(uint64_t, __CFString *, void, const __CFDictionary **))(v17 + 48);
  if (!v20) {
    goto LABEL_49;
  }
  uint64_t v21 = v20(FigBaseObject, @"UneditedTrackDuration", *MEMORY[0x1E4F1CF80], &v54);
  if (v21) {
    goto LABEL_66;
  }
  if (v54)
  {
    CMTimeMakeFromDictionary(&time, v54);
    double Seconds = CMTimeGetSeconds(&time);
    CFRelease(v54);
  }
  else
  {
    double Seconds = 1.0;
  }
  uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v25 = v24 ? v24 : 0;
  long long v26 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v25 + 32);
  if (!v26) {
    goto LABEL_49;
  }
  uint64_t v21 = v26(v14, &v53);
  if (v21) {
    goto LABEL_66;
  }
  CFTypeRef v27 = v53;
  uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v29 = v28 ? v28 : 0;
  uint64_t v30 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v29 + 24);
  if (!v30)
  {
LABEL_49:
    LODWORD(v14) = 0;
    uint64_t v43 = 4294954514;
    goto LABEL_50;
  }
  uint64_t v21 = v30(v27, &cf);
  if (!v21)
  {
    uint64_t v31 = 0;
    while (1)
    {
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      uint64_t v48 = 0;
      CFTypeRef v32 = cf;
      uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v34 = v33 ? v33 : 0;
      uint64_t v35 = *(uint64_t (**)(CFTypeRef, void, void, void, uint64_t *, uint64_t *, void, void, void, void, uint64_t))(v34 + 152);
      if (!v35) {
        break;
      }
      uint64_t v21 = v35(v32, 0, 0, 0, &v50, &v49, 0, 0, 0, 0, v45);
      if (v21) {
        goto LABEL_66;
      }
      uint64_t v36 = v49;
      uint64_t v37 = v50;
      CFTypeRef v38 = cf;
      uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v39) {
        uint64_t v40 = v39;
      }
      else {
        uint64_t v40 = 0;
      }
      uint64_t v41 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t *))(v40 + 168);
      if (v41) {
        int v42 = v41(v38, v36, &v48);
      }
      else {
        int v42 = -12782;
      }
      v31 += v37;
      if (v49 != v48 || v42)
      {
        uint64_t v43 = 0;
        LODWORD(v14) = (int)((double)v31 / Seconds);
        goto LABEL_50;
      }
    }
    uint64_t v43 = 4294954514;
    goto LABEL_65;
  }
LABEL_66:
  uint64_t v43 = v21;
LABEL_65:
  LODWORD(v14) = 0;
LABEL_50:
  if (v53) {
    CFRelease(v53);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (!v43)
  {
    CFTypeRef v13 = v47;
    goto LABEL_56;
  }
LABEL_59:
  if (v47) {
    CFRelease(v47);
  }
  if (v46) {
    CFRelease(v46);
  }
  return v43;
}

uint64_t EstimateByteTimingForTrack(uint64_t a1, unint64_t a2, int a3, CMTime *a4)
{
  v46[0] = 0;
  CMTime v45 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTime v44 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  *(_OWORD *)CFTypeRef cf = 0u;
  long long v37 = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v9 + 32);
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t updated = v10(a1, v46);
  if (!updated)
  {
    CFTypeRef v12 = v46[0];
    uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v13) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = 0;
    }
    stat v15 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v14 + 24);
    if (!v15) {
      goto LABEL_20;
    }
    uint64_t updated = v15(v12, cf);
    if (!updated)
    {
      CFTypeRef v16 = cf[0];
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v17) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 0;
      }
      int v19 = *(uint64_t (**)(CFTypeRef, CFTypeRef *))(v18 + 8);
      if (v19)
      {
        uint64_t updated = v19(v16, v36);
        if (!updated)
        {
          uint64_t updated = UpdateCursorState((uint64_t *)cf);
          if (!updated)
          {
            uint64_t updated = UpdateCursorState((uint64_t *)v36);
            if (!updated)
            {
              uint64_t v20 = v38;
              CMTime v45 = *(CMTime *)((char *)&v36[1] + 4);
              if (MoveCursorByOne((uint64_t)v36))
              {
LABEL_19:
                uint64_t v21 = 0;
                *a4 = v44;
                goto LABEL_21;
              }
              double v23 = (double)a3;
              while (1)
              {
                CMTime time = v45;
                Float64 Seconds = CMTimeGetSeconds(&time);
                uint64_t v25 = v38 + v20;
                if ((uint64_t)v38 + v20 + (uint64_t)(Seconds * v23) > a2) {
                  break;
                }
                CMTime time2 = v45;
                *(_OWORD *)&v33.CMTime value = *(_OWORD *)((unint64_t)v36 | 0xC);
                v33.CMTimeEpoch epoch = *(void *)(((unint64_t)v36 | 0xC) + 0x10);
                CMTimeAdd(&time, &time2, &v33);
                CMTime v45 = time;
                uint64_t v20 = v25;
LABEL_44:
                if (MoveCursorByOne((uint64_t)v36)) {
                  goto LABEL_19;
                }
              }
              while (1)
              {
                CMTime time = v45;
                CMTime time2 = v44;
                if (CMTimeCompare(&time, &time2) < 0) {
                  CMTime v44 = v45;
                }
                uint64_t v26 = v43;
                CMTime time = v45;
                *(_OWORD *)&time2.CMTime value = *(_OWORD *)((unint64_t)cf | 0xC);
                time2.CMTimeEpoch epoch = *(void *)(((unint64_t)cf | 0xC) + 0x10);
                CMTimeSubtract(&v45, &time, &time2);
                uint64_t v21 = MoveCursorByOne((uint64_t)cf);
                CFTypeRef v27 = cf[0];
                CFTypeRef v28 = v36[0];
                uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v29)
                {
                  uint64_t v30 = v29;
                  if (!v28) {
                    goto LABEL_36;
                  }
                }
                else
                {
                  uint64_t v30 = 0;
                  if (!v28)
                  {
LABEL_36:
                    uint64_t v31 = 0;
                    goto LABEL_37;
                  }
                }
                uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
LABEL_37:
                if (v30 != v31) {
                  goto LABEL_21;
                }
                CFTypeRef v32 = *(uint64_t (**)(CFTypeRef, CFTypeRef))(v30 + 32);
                if (!v32 || v32(v27, v28) != -1 || v21) {
                  goto LABEL_21;
                }
                v20 -= v26;
                if (BYTE8(v43)) {
                  goto LABEL_44;
                }
              }
            }
          }
        }
        goto LABEL_46;
      }
LABEL_20:
      uint64_t v21 = 4294954514;
      goto LABEL_21;
    }
  }
LABEL_46:
  uint64_t v21 = updated;
LABEL_21:
  if (v46[0]) {
    CFRelease(v46[0]);
  }
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  if (v36[0]) {
    CFRelease(v36[0]);
  }
  return v21;
}

uint64_t UpdateCursorState(uint64_t *a1)
{
  uint64_t v2 = (uint64_t)a1 + 12;
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 56);
  if (!v6) {
    return 4294954514;
  }
  uint64_t result = v6(v3, v2);
  if (result) {
    return result;
  }
  uint64_t v8 = *a1;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v10 = v9 ? v9 : 0;
  uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t, void, void))(v10 + 144);
  if (!v11) {
    return 4294954514;
  }
  uint64_t result = v11(v8, 0, (uint64_t)(a1 + 8), 0, 0);
  if (result) {
    return result;
  }
  uint64_t v12 = *a1;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v14 = v13 ? v13 : 0;
  stat v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 40);
  if (!v15) {
    return 4294954514;
  }
  uint64_t result = v15(v12, (uint64_t)a1 + 36);
  if (!result)
  {
    *((unsigned char *)a1 + 72) = 1;
    CFTypeRef v16 = a1 + 9;
    uint64_t v17 = *a1;
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v18) {
      uint64_t v19 = v18;
    }
    else {
      uint64_t v19 = 0;
    }
    uint64_t v20 = *(void (**)(uint64_t, uint64_t *, void, void, void))(v19 + 64);
    if (v20) {
      v20(v17, v16, 0, 0, 0);
    }
    return 0;
  }
  return result;
}

uint64_t MoveCursorByOne(uint64_t a1)
{
  uint64_t v8 = 0;
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v4 + 168);
  if (v5)
  {
    LODWORD(result) = v5(v2, 1, &v8);
    BOOL v7 = v8 != 1;
  }
  else
  {
    LODWORD(result) = -12782;
    BOOL v7 = 1;
  }
  if (result == 0 && v7) {
    uint64_t result = 4294954456;
  }
  else {
    uint64_t result = result;
  }
  if (!result)
  {
    ++*(_DWORD *)(a1 + 8);
    return UpdateCursorState((uint64_t *)a1);
  }
  return result;
}

uint64_t FigGetEstimatedMaxFullFramePlaybackSpeedForFormatDescriptionAndNominalFrameRate(CMFormatDescriptionRef desc, float *a2, float a3)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (sVDMSTCheckLogOnce != -1) {
    dispatch_once_f(&sVDMSTCheckLogOnce, 0, (dispatch_function_t)checkFigVideoDecoderMaxSpeedTrace);
  }
  signed int MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
  int v7 = MediaSubType;
  uint64_t v8 = 4294948174;
  if (MediaSubType > 1752589104)
  {
    if (MediaSubType == 1987063865) {
      goto LABEL_9;
    }
    int v9 = 1752589105;
  }
  else
  {
    if (MediaSubType == 1635135537) {
      goto LABEL_9;
    }
    int v9 = 1635148593;
  }
  if (MediaSubType != v9) {
    return v8;
  }
LABEL_9:
  unint64_t Dimensions = (unint64_t)CMVideoFormatDescriptionGetDimensions(desc);
  int32_t v11 = Dimensions;
  if (Dimensions)
  {
    unint64_t v12 = HIDWORD(Dimensions);
    if (HIDWORD(Dimensions))
    {
      uint64_t valuePtr = 0;
      CFNumberRef v13 = (const __CFNumber *)MGCopyAnswer();
      if (!v13)
      {
        float v16 = 0.0;
        goto LABEL_63;
      }
      CFNumberRef v14 = v13;
      CFNumberGetValue(v13, kCFNumberSInt64Type, &valuePtr);
      CFRelease(v14);
      uint64_t v15 = valuePtr;
      float v16 = 0.0;
      if (valuePtr < 1) {
        goto LABEL_63;
      }
      uint64_t v51 = 0;
      CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(desc, (CFStringRef)*MEMORY[0x1E4F1EE20]);
      if (Extension)
      {
        CFDictionaryRef v18 = Extension;
        CFTypeID v19 = CFGetTypeID(Extension);
        if (v19 == CFDictionaryGetTypeID())
        {
          if (v7 > 1752589104)
          {
            if (v7 == 1987063865)
            {
              CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v18, @"vpcC");
              if (!Value) {
                goto LABEL_58;
              }
              CFArrayRef ValueAtIndex = Value;
              CFTypeID v31 = CFGetTypeID(Value);
              if (v31 == CFArrayGetTypeID())
              {
                CFArrayRef ValueAtIndex = (const __CFArray *)CFArrayGetValueAtIndex(ValueAtIndex, 0);
                if (!ValueAtIndex) {
                  goto LABEL_58;
                }
              }
              else
              {
                CFTypeID v39 = CFGetTypeID(ValueAtIndex);
                if (v39 != CFDataGetTypeID()) {
                  goto LABEL_58;
                }
              }
              CFTypeID v40 = CFGetTypeID(ValueAtIndex);
              if (v40 != CFDataGetTypeID()) {
                goto LABEL_58;
              }
              char v53 = 0;
              uint64_t valuePtr = 0;
              if (FigVP9Bridge_ParseVPCC()) {
                goto LABEL_63;
              }
              unsigned int v36 = BYTE4(valuePtr);
              goto LABEL_55;
            }
            if (v7 != 1752589105) {
              goto LABEL_63;
            }
            CFArrayRef v23 = (const __CFArray *)CFDictionaryGetValue(v18, @"hvcC");
            if (v23)
            {
              CFArrayRef v24 = v23;
              CFTypeID v25 = CFGetTypeID(v23);
              if (v25 == CFArrayGetTypeID())
              {
                CFArrayRef v24 = (const __CFArray *)CFArrayGetValueAtIndex(v24, 0);
                if (!v24) {
                  goto LABEL_58;
                }
              }
              else
              {
                CFTypeID v34 = CFGetTypeID(v24);
                if (v34 != CFDataGetTypeID()) {
                  goto LABEL_58;
                }
              }
              CFTypeID v35 = CFGetTypeID(v24);
              if (v35 != CFDataGetTypeID()) {
                goto LABEL_58;
              }
              if (FigHEVCBridge_GetHEVCParameterSetAtIndex()
                || FigHEVCBridge_GetSPSChromaFormatAndBitDepths())
              {
                goto LABEL_63;
              }
LABEL_46:
              unsigned int v36 = 0;
LABEL_55:
              if (v36 > 3) {
                goto LABEL_58;
              }
              if (v7 == 1987063865) {
                long long v41 = (float *)&vdmst_getCoefficientsPerPixelFromFormatDesc_sVP9ChromaFormatCoefficientsPerPixel;
              }
              else {
                long long v41 = (float *)&vdmst_getCoefficientsPerPixelFromFormatDesc_sH264AndHEVCChromaFormatCoefficientsPerPixel;
              }
              float v16 = v41[v36];
LABEL_62:
              float v16 = (float)(v15 & (unint64_t)~(v15 >> 63)) / v16;
              if (v16 != 0.0)
              {
LABEL_121:
                *a2 = v16 / (float)((float)((float)v11 * a3) * (float)(int)v12);
                if (dword_1E9351270)
                {
                  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                return 0;
              }
LABEL_63:
              uint64_t valuePtr = 0;
              LODWORD(v51) = 0;
              uint64_t CodecMaxVideoLevelFromValidationDictionary = FigMediaValidatorCreateMediaValidatorPropertyList(@"MediaValidator.plist", &valuePtr);
              if (CodecMaxVideoLevelFromValidationDictionary) {
                goto LABEL_129;
              }
              if (!valuePtr)
              {
                uint64_t CodecMaxVideoLevelFromValidationDictionary = FigSignalErrorAt();
                goto LABEL_129;
              }
              CFStringForOSTypeCFArrayRef Value = (const void *)FigGetCFStringForOSTypeValue();
              if (v7 != 1752589105)
              {
                if (v7 != 1635148593)
                {
                  uint64_t v8 = 4294948174;
                  goto LABEL_118;
                }
                uint64_t CodecMaxVideoLevelFromValidationDictionary = vdmst_getCodecMaxVideoLevelFromValidationDictionary((const __CFDictionary *)valuePtr, CFStringForOSTypeValue, &v51);
                if (!CodecMaxVideoLevelFromValidationDictionary)
                {
                  uint64_t v8 = 4294948175;
                  if (!(!v45 & v44))
                  {
                    int v48 = 1192562688;
                    switch((int)v51)
                    {
                      case 10:
                        goto LABEL_117;
                      case 11:
                        int v48 = 1228636160;
                        goto LABEL_117;
                      case 12:
                        int v48 = 1237024768;
                        goto LABEL_117;
                      case 13:
                      case 20:
                        int v48 = 1245290496;
                        goto LABEL_117;
                      case 14:
                      case 15:
                      case 16:
                      case 17:
                      case 18:
                      case 19:
                        goto LABEL_118;
                      case 21:
                        int v48 = 1251651584;
                        goto LABEL_117;
                      case 22:
                        int v48 = 1251881984;
                        goto LABEL_117;
                      default:
                        JUMPOUT(0);
                    }
                  }
                  switch((int)v51)
                  {
                    case '2':
                      int v46 = 1292894208;
                      goto LABEL_116;
                    case '3':
                      int v46 = 1299185664;
                      goto LABEL_116;
                    case '4':
                      int v48 = 1308434432;
                      goto LABEL_117;
                    case '<':
                      int v46 = 1316945920;
                      goto LABEL_116;
                    case '=':
                      int v46 = 1325334528;
                      goto LABEL_116;
                    case '>':
                      int v46 = 1333723136;
LABEL_116:
                      int v48 = v46;
LABEL_117:
                      uint64_t v8 = 0;
                      float v16 = *(float *)&v48;
                      break;
                    default:
                      break;
                  }
LABEL_118:
                  if (valuePtr) {
                    CFRelease((CFTypeRef)valuePtr);
                  }
                  if (v8) {
                    return v8;
                  }
                  goto LABEL_121;
                }
LABEL_129:
                uint64_t v8 = CodecMaxVideoLevelFromValidationDictionary;
                goto LABEL_118;
              }
              uint64_t CodecMaxVideoLevelFromValidationDictionary = vdmst_getCodecMaxVideoLevelFromValidationDictionary((const __CFDictionary *)valuePtr, CFStringForOSTypeValue, &v51);
              if (CodecMaxVideoLevelFromValidationDictionary) {
                goto LABEL_129;
              }
              uint64_t v8 = 4294948175;
              if ((int)v51 > 122)
              {
                if ((int)v51 <= 155)
                {
                  switch(v51)
                  {
                    case 0x7B:
                      int v47 = 1291780096;
                      break;
                    case 0x96:
                      int v47 = 1300168704;
                      break;
                    case 0x99:
                      int v47 = 1308557312;
                      break;
                    default:
                      goto LABEL_118;
                  }
                }
                else if ((int)v51 > 182)
                {
                  if (v51 == 183)
                  {
                    int v47 = 1325334528;
                  }
                  else
                  {
                    if (v51 != 186) {
                      goto LABEL_118;
                    }
                    int v47 = 1333723136;
                  }
                }
                else
                {
                  if (v51 != 156 && v51 != 180) {
                    goto LABEL_118;
                  }
                  int v47 = 1316945920;
                }
                goto LABEL_105;
              }
              if ((int)v51 <= 89)
              {
                switch(v51)
                {
                  case 0x1E:
                    int v47 = 1225195520;
                    break;
                  case 0x3C:
                    int v47 = 1247870976;
                    break;
                  case 0x3F:
                    int v47 = 1256259584;
                    break;
                  default:
                    goto LABEL_118;
                }
LABEL_105:
                float v16 = *(float *)&v47;
                goto LABEL_106;
              }
              switch(v51)
              {
                case 'Z':
                  float v16 = 16589000.0;
                  break;
                case ']':
                  float v16 = 33178000.0;
                  break;
                case 'x':
                  int v47 = 1283391488;
                  goto LABEL_105;
                default:
                  goto LABEL_118;
              }
LABEL_106:
              uint64_t v8 = 0;
              goto LABEL_118;
            }
          }
          else
          {
            if (v7 == 1635135537)
            {
              CFArrayRef v26 = (const __CFArray *)CFDictionaryGetValue(v18, @"av1C");
              if (!v26) {
                goto LABEL_58;
              }
              CFArrayRef v27 = v26;
              CFTypeID v28 = CFGetTypeID(v26);
              if (v28 == CFArrayGetTypeID())
              {
                CFArrayRef v27 = (const __CFArray *)CFArrayGetValueAtIndex(v27, 0);
                if (!v27) {
                  goto LABEL_58;
                }
              }
              else
              {
                CFTypeID v37 = CFGetTypeID(v27);
                if (v37 != CFDataGetTypeID()) {
                  goto LABEL_58;
                }
              }
              CFTypeID v38 = CFGetTypeID(v27);
              if (v38 != CFDataGetTypeID()) {
                goto LABEL_58;
              }
              CFDataGetBytePtr(v27);
              CFDataGetLength(v27);
              if (FigAV1Bridge_GetChromaFormatAndBitDepthsFromAV1CodecConfigurationRecord()) {
                goto LABEL_63;
              }
              float v16 = 3.0;
              goto LABEL_62;
            }
            if (v7 != 1635148593) {
              goto LABEL_63;
            }
            CFArrayRef v20 = (const __CFArray *)CFDictionaryGetValue(v18, @"avcC");
            if (v20)
            {
              CFArrayRef v21 = v20;
              CFTypeID v22 = CFGetTypeID(v20);
              if (v22 == CFArrayGetTypeID())
              {
                CFArrayRef v21 = (const __CFArray *)CFArrayGetValueAtIndex(v21, 0);
                if (!v21) {
                  goto LABEL_58;
                }
              }
              else
              {
                CFTypeID v32 = CFGetTypeID(v21);
                if (v32 != CFDataGetTypeID()) {
                  goto LABEL_58;
                }
              }
              CFTypeID v33 = CFGetTypeID(v21);
              if (v33 != CFDataGetTypeID()) {
                goto LABEL_58;
              }
              CFDataGetBytePtr(v21);
              CFDataGetLength(v21);
              if (FigH264Bridge_GetSPSFromAVCC()
                || FigH264Bridge_GetSPSChromaFormatAndBitDepths())
              {
                goto LABEL_63;
              }
              goto LABEL_46;
            }
          }
        }
      }
LABEL_58:
      if (FigSignalErrorAt()) {
        goto LABEL_63;
      }
      goto LABEL_62;
    }
  }

  return FigSignalErrorAt();
}

uint64_t checkFigVideoDecoderMaxSpeedTrace()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();

  return fig_note_initialize_category_with_default_work_cf();
}

uint64_t FigGetEstimatedMaxFullFramePlaybackSpeedForTrackReader(uint64_t a1, float *a2)
{
  if (sVDMSTCheckLogOnce != -1) {
    dispatch_once_f(&sVDMSTCheckLogOnce, 0, (dispatch_function_t)checkFigVideoDecoderMaxSpeedTrace);
  }
  float valuePtr = 0.0;
  CFArrayRef theArray = 0;
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = *(uint64_t (**)(uint64_t, __CFString *, void, CFArrayRef *))(v6 + 48);
  if (!v7) {
    return 4294954514;
  }
  uint64_t v8 = *MEMORY[0x1E4F1CF80];
  uint64_t v9 = v7(FigBaseObject, @"TrackFormatDescriptionArray", *MEMORY[0x1E4F1CF80], &theArray);
  CFArrayRef v10 = theArray;
  if (v9)
  {
    CFNumberRef v13 = 0;
    if (!theArray) {
      goto LABEL_19;
    }
LABEL_18:
    CFRelease(v10);
    goto LABEL_19;
  }
  if (!theArray) {
    return 4294948176;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  CFArrayRef v10 = theArray;
  if (!Count)
  {
    CFNumberRef v13 = 0;
    uint64_t v9 = 4294948176;
    if (!theArray) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  CFArrayRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  if (ValueAtIndex) {
    CFNumberRef v13 = (const opaqueCMFormatDescription *)CFRetain(ValueAtIndex);
  }
  else {
    CFNumberRef v13 = 0;
  }
  uint64_t v9 = 0;
  CFArrayRef v10 = theArray;
  if (theArray) {
    goto LABEL_18;
  }
LABEL_19:
  if (v9) {
    goto LABEL_32;
  }
  CFArrayRef theArray = 0;
  uint64_t v14 = FigTrackReaderGetFigBaseObject(a1);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFArrayRef *))(v16 + 48);
  if (!v17)
  {
    uint64_t v9 = 4294954514;
    goto LABEL_32;
  }
  uint64_t v9 = v17(v14, @"NominalFrameRate", v8, &theArray);
  if (v9 || !theArray)
  {
    if (v9) {
      goto LABEL_32;
    }
    goto LABEL_30;
  }
  CFNumberGetValue(theArray, kCFNumberFloat32Type, &valuePtr);
  CFRelease(theArray);
  if (valuePtr < 1.0)
  {
LABEL_30:
    EstimatedMaxFullFramePlaybackSpeedForFormatDescriptionAndNominaldouble FrameRate = FigSignalErrorAt();
    goto LABEL_31;
  }
  EstimatedMaxFullFramePlaybackSpeedForFormatDescriptionAndNominaldouble FrameRate = FigGetEstimatedMaxFullFramePlaybackSpeedForFormatDescriptionAndNominalFrameRate(v13, a2, valuePtr);
LABEL_31:
  uint64_t v9 = EstimatedMaxFullFramePlaybackSpeedForFormatDescriptionAndNominalFrameRate;
LABEL_32:
  if (v13) {
    CFRelease(v13);
  }
  return v9;
}

uint64_t vdmst_getCodecMaxVideoLevelFromValidationDictionary(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  CFTypeRef cf = 0;
  CFTypeRef v19 = 0;
  CFTypeID TypeID = CFNumberGetTypeID();
  if (mv_GetCodecProperty(a1, a2, @"VideoCodecProfiles", @"MaxLevel", TypeID, &cf)) {
    BOOL v7 = 1;
  }
  else {
    BOOL v7 = cf == 0;
  }
  if (!v7)
  {
    CFTypeID v8 = CFGetTypeID(cf);
    if (v8 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, a3)) {
        return 0;
      }
    }
  }
  CFTypeID v10 = CFArrayGetTypeID();
  uint64_t result = mv_GetCodecProperty(a1, a2, @"VideoCodecProfiles", @"SupportedLevels", v10, &v19);
  if (!result)
  {
    if (v19 && (CFTypeID v11 = CFGetTypeID(v19), v11 == CFArrayGetTypeID()) && CFArrayGetCount((CFArrayRef)v19) >= 1)
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)v19);
      if (Count < 1) {
        return FigSignalErrorAt();
      }
      CFIndex v13 = Count;
      int v14 = 0;
      for (CFIndex i = 0; i != v13; ++i)
      {
        int valuePtr = 0;
        CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)v19, i);
        CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
        if (v14 <= valuePtr) {
          int v14 = valuePtr;
        }
      }
      if (v14)
      {
        uint64_t result = 0;
        *a3 = v14;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    else
    {
      return 4294948176;
    }
  }
  return result;
}

uint64_t FigMovieUsesFragments(uint64_t a1, unsigned char *a2)
{
  uint64_t result = CMByteStreamCreateForFileURL();
  if (!result) {
    return MovieUsesFragments(0, a2, 0);
  }
  return result;
}

uint64_t FigConsolidateMovieFragments()
{
  uint64_t result = CMByteStreamCreateForFileURL();
  if (!result) {
    return DeMoofMovieFile(0);
  }
  return result;
}

uint64_t FigTTMLDocumentWriterElementGetTypeID()
{
  return sElementTypeID;
}

uint64_t figTTMLDocumentWriterElement_Register()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sElementCFTypeID TypeID = result;
  return result;
}

uint64_t FigTTMLDocumentWriterElementCreate(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  MEMORY[0x19970EE10](&FigTTMLDocumentWriterElementGetTypeID_sRegisterElementOnce, figTTMLDocumentWriterElement_Register);
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (Instance)
  {
    uint64_t v9 = Instance;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (Mutable)
    {
      CFMutableDictionaryRef v11 = Mutable;
      CFMutableArrayRef v12 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
      if (v12)
      {
        uint64_t v13 = 0;
        *(_DWORD *)(v9 + 16) = a2;
        *(void *)(v9 + 32) = v12;
        *(void *)(v9 + 40) = v11;
        *(void *)(v9 + 24) = a3;
        *a4 = v9;
        return v13;
      }
      uint64_t v13 = FigSignalErrorAt();
      CFRelease(v11);
    }
    else
    {
      uint64_t v13 = FigSignalErrorAt();
    }
    CFRelease((CFTypeRef)v9);
    return v13;
  }

  return FigSignalErrorAt();
}

uint64_t FigTTMLDocumentWriterElementWalkTree(CFArrayRef *a1, uint64_t (*a2)(CFArrayRef *, uint64_t), uint64_t (*a3)(CFArrayRef *, uint64_t), uint64_t (*a4)(void, void), uint64_t a5)
{
  if (a1)
  {
    uint64_t v16 = a4;
    CFTypeID v8 = CFGetTypeID(a1);
    MEMORY[0x19970EE10](&FigTTMLDocumentWriterElementGetTypeID_sRegisterElementOnce, figTTMLDocumentWriterElement_Register);
    a4 = v16;
    if (v8 == sElementTypeID)
    {
      if (!a2) {
        goto LABEL_6;
      }
      uint64_t result = a2(a1, a5);
      if (result == 2) {
        return result;
      }
      if (!result)
      {
LABEL_6:
        CFArrayRef v10 = a1[4];
        if (v10)
        {
          CFIndex Count = CFArrayGetCount(v10);
          if (Count >= 1)
          {
            CFIndex v12 = Count;
            for (CFIndex i = 0; i != v12; ++i)
            {
              CFNumberRef ValueAtIndex = CFArrayGetValueAtIndex(a1[4], i);
              uint64_t result = FigTTMLDocumentWriterElementWalkTree(ValueAtIndex, a2, a3, v16, a5);
              if (result == 1) {
                break;
              }
              if (result == 2) {
                return result;
              }
            }
          }
        }
      }
      if (a3)
      {
        return a3(a1, a5);
      }
      return 0;
    }
  }
  if (!a4) {
    return 0;
  }

  return a4(a1, a5);
}

uint64_t FigTTMLDocumentWriterElementInsertBeforeIfNotExist(CFArrayRef *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a3)
  {
    v7[0] = a2;
    v7[1] = a3;
    v7[2] = 0;
    uint64_t v8 = 0;
    FigTTMLDocumentWriterElementWalkTree(a1, (uint64_t (*)(CFArrayRef *, uint64_t))insertBeforeIfNotExist, 0, 0, (uint64_t)v7);
    if (a4) {
      *a4 = v8;
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t insertBeforeIfNotExist(uint64_t a1, uint64_t *a2)
{
  CMTime value = 0;
  uint64_t v2 = *a2;
  uint64_t v3 = a2[2];
  if (*(_DWORD *)(a1 + 16) == *(_DWORD *)(*a2 + 4 * v3))
  {
    uint64_t v5 = v3 + 1;
    a2[2] = v5;
    if (v5 == a2[1])
    {
      a2[3] = a1;
      return 2;
    }
    int v7 = *(_DWORD *)(v2 + 4 * v5);
    uint64_t Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
    if (Count < 1) {
      goto LABEL_10;
    }
    uint64_t v9 = Count;
    CFIndex v10 = 0;
    BOOL v11 = 1;
    while (1)
    {
      uint64_t Count = (uint64_t)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 32), v10);
      if (Count)
      {
        uint64_t v12 = Count;
        CFTypeID v13 = CFGetTypeID((CFTypeRef)Count);
        uint64_t Count = MEMORY[0x19970EE10](&FigTTMLDocumentWriterElementGetTypeID_sRegisterElementOnce, figTTMLDocumentWriterElement_Register);
        if (v13 == sElementTypeID && *(_DWORD *)(v12 + 16) == v7) {
          break;
        }
      }
      BOOL v11 = ++v10 < v9;
      if (v9 == v10) {
        goto LABEL_10;
      }
    }
    if (!v11)
    {
LABEL_10:
      int v14 = FigTTMLDocumentWriterElementCreate(Count, v7, a1, (uint64_t *)&value);
      uint64_t v15 = value;
      if (!v14) {
        CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), 0, value);
      }
      if (v15) {
        CFRelease(v15);
      }
    }
  }
  return 0;
}

void FigTTMLDocumentWriterElementSetAttribute(uint64_t a1, const void *a2, const void *a3)
{
}

const void *FigTTMLDocumentWriterElementGetAttribute(uint64_t a1, const void *a2)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), a2);
}

CFIndex FigTTMLDocumentWriterElementGetAttributeCount(uint64_t a1)
{
  return CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40));
}

void FigTTMLDocumentWriterElementRemoveAttribute(uint64_t a1, const void *a2)
{
}

void FigTTMLDocumentWriterElementAddChildElement(uint64_t a1, const void *a2)
{
}

void FigTTMLDocumentWriterElementInsertChildNodeBeforeNode(uint64_t a1, void *a2, const void *a3)
{
  if (a3)
  {
    CFArrayRef v6 = *(const __CFArray **)(a1 + 32);
    v9.length = CFArrayGetCount(v6);
    v9.location = 0;
    FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v6, v9, a3);
    if (FirstIndexOfValue < 0) {
      return;
    }
  }
  else
  {
    FirstIndexOfCFArrayRef Value = 0;
  }
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)(a1 + 32), FirstIndexOfValue, a2);
  if (a2)
  {
    CFTypeID v8 = CFGetTypeID(a2);
    MEMORY[0x19970EE10](&FigTTMLDocumentWriterElementGetTypeID_sRegisterElementOnce, figTTMLDocumentWriterElement_Register);
    if (v8 == sElementTypeID) {
      a2[3] = a1;
    }
  }
}

void FigTTMLDocumentWriterElementRemoveChildNode(uint64_t a1, void *a2)
{
  CFArrayRef v4 = *(const __CFArray **)(a1 + 32);
  v10.length = CFArrayGetCount(v4);
  v10.location = 0;
  FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v4, v10, a2);
  if ((FirstIndexOfValue & 0x8000000000000000) == 0)
  {
    CFIndex v6 = FirstIndexOfValue;
    if (a2)
    {
      CFTypeID v7 = CFGetTypeID(a2);
      MEMORY[0x19970EE10](&FigTTMLDocumentWriterElementGetTypeID_sRegisterElementOnce, figTTMLDocumentWriterElement_Register);
      if (v7 == sElementTypeID) {
        a2[3] = 0;
      }
    }
    CFTypeID v8 = *(__CFArray **)(a1 + 32);
    CFArrayRemoveValueAtIndex(v8, v6);
  }
}

uint64_t FigTTMLDocumentWriterElementGetElementType(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t FigTTMLDocumentWriterElementGetParentElement(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

CFIndex FigTTMLDocumentWriterElementGetChildrenCount(uint64_t a1)
{
  return CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
}

const void *FigTTMLDocumentWriterElementGetChildAtIndex(uint64_t a1, CFIndex a2)
{
  if (CFArrayGetCount(*(CFArrayRef *)(a1 + 32)) <= a2)
  {
    FigSignalErrorAt();
    return 0;
  }
  else
  {
    CFArrayRef v4 = *(const __CFArray **)(a1 + 32);
    return CFArrayGetValueAtIndex(v4, a2);
  }
}

uint64_t FigTTMLDocumentWriterElementCopyElementsAtPath(CFArrayRef *a1, uint64_t a2, uint64_t a3, CFMutableArrayRef *a4)
{
  uint64_t v8 = 0;
  if (a3 && a4)
  {
    v7[0] = a2;
    v7[1] = a3;
    LODWORD(v8) = -1;
    CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
    FigTTMLDocumentWriterElementWalkTree(a1, (uint64_t (*)(CFArrayRef *, uint64_t))getElementsAtPathPreOrder, (uint64_t (*)(CFArrayRef *, uint64_t))getElementsAtPathPostOrder, 0, (uint64_t)v7);
    *a4 = Mutable;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t getElementsAtPathPreOrder(_DWORD *value, uint64_t a2)
{
  uint64_t v2 = *(int *)(a2 + 16) + 1;
  *(_DWORD *)(a2 + 16) = v2;
  if (value[4] != *(_DWORD *)(*(void *)a2 + 4 * v2)) {
    return 1;
  }
  if (*(void *)(a2 + 8) - 1 == v2)
  {
    CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 24), value);
    return 1;
  }
  return 0;
}

uint64_t getElementsAtPathPostOrder(uint64_t a1, uint64_t a2)
{
  return 0;
}

uint64_t FigTTMLDocumentWriterElementWriteTree(CFArrayRef *a1, uint64_t a2)
{
  uint64_t v3 = a2;
  uint64_t v4 = 0;
  FigTTMLDocumentWriterElementWalkTree(a1, (uint64_t (*)(CFArrayRef *, uint64_t))writeStartElement, (uint64_t (*)(CFArrayRef *, uint64_t))writeEndElement, writeCaptionData, (uint64_t)&v3);
  return v4;
}

uint64_t writeStartElement(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 8)) {
    goto LABEL_17;
  }
  uint64_t v4 = *(unsigned int *)(a1 + 16);
  if (v4 == 5)
  {
    if (!CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40)))
    {
LABEL_17:
      CFRange v10 = 0;
      goto LABEL_19;
    }
    uint64_t v4 = *(unsigned int *)(a1 + 16);
  }
  int started = FigTTMLDocumentWriterStartElement(*(void *)a2, v4);
  *(_DWORD *)(a2 + 8) = started;
  if (started) {
    goto LABEL_17;
  }
  unint64_t Count = FigCFDictionaryGetCount();
  if (!Count) {
    goto LABEL_17;
  }
  size_t v7 = Count;
  if (!(Count >> 61) && (size_t v8 = 8 * Count, 8 * v7) && (v9 = (const void **)malloc_type_malloc(v8, 0x5CC9CBA6uLL)) != 0)
  {
    CFRange v10 = v9;
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 40), v9, 0);
    qsort(v10, v7, 8uLL, (int (__cdecl *)(const void *, const void *))compareCFString);
    uint64_t v11 = 0;
    size_t v12 = v7 - 1;
    do
    {
      CFTypeID v13 = v10[v11];
      CFArrayRef Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v13);
      int v15 = FigTTMLDocumentWriterSetAttribute(*(void *)a2, (uint64_t)v13, (uint64_t)Value);
      *(_DWORD *)(a2 + 8) = v15;
      if (v15) {
        BOOL v16 = 1;
      }
      else {
        BOOL v16 = v12 == v11;
      }
      ++v11;
    }
    while (!v16);
  }
  else
  {
    CFRange v10 = 0;
    *(_DWORD *)(a2 + 8) = FigSignalErrorAt();
  }
LABEL_19:
  free(v10);
  return 2 * (*(_DWORD *)(a2 + 8) != 0);
}

uint64_t writeEndElement(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 8);
  if (!v3)
  {
    if (*(_DWORD *)(a1 + 16) == 5 && !CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40)))
    {
      int v3 = *(_DWORD *)(a2 + 8);
    }
    else
    {
      int v3 = FigTTMLDocumentWriterEndElement(*(void *)a2);
      *(_DWORD *)(a2 + 8) = v3;
    }
  }
  return 2 * (v3 != 0);
}

uint64_t writeCaptionData(uint64_t a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(a2 + 8);
  if (!v4)
  {
    int v4 = FigTTMLDocumentWriterAddCaptionData(*(void *)a2, a1);
    *(_DWORD *)(a2 + 8) = v4;
  }
  return 2 * (v4 != 0);
}

double figTTMLDocumentWriterElement_Init(uint64_t a1)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

void figTTMLDocumentWriterElement_Finalize(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
  }
}

__CFString *figTTMLDocumentWriterElement_CopyDebugDesc(uint64_t a1)
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 40));
  CFIndex v4 = CFArrayGetCount(*(CFArrayRef *)(a1 + 32));
  CFStringAppendFormat(Mutable, 0, @"[FigTTMLDocumentWriter_Element %p] nodeType=%d parent=%p attributes(%ld)={ ", a1, *(unsigned int *)(a1 + 16), *(void *)(a1 + 24), Count);
  CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 40), (CFDictionaryApplierFunction)appendAttributeDebugDesc, Mutable);
  CFStringAppendFormat(Mutable, 0, @"} children(%ld)=[ ", v4);
  v6.location = 0;
  v6.length = v4;
  CFArrayApplyFunction(*(CFArrayRef *)(a1 + 32), v6, (CFArrayApplierFunction)appendChildNodeDebugDesc, Mutable);
  CFStringAppendFormat(Mutable, 0, @"]");
  return Mutable;
}

void appendAttributeDebugDesc(uint64_t a1, uint64_t a2, CFMutableStringRef theString)
{
}

void appendChildNodeDebugDesc(uint64_t a1, CFMutableStringRef theString)
{
}

CFComparisonResult compareCFString(CFStringRef *a1, CFStringRef *a2)
{
  return CFStringCompare(*a1, *a2, 0);
}

uint64_t FigDiskCacheProviderGetClassID()
{
  return sFigDiskCacheProviderClassID;
}

uint64_t RegisterFigDiskCacheProviderBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigDiskCacheProviderGetCFTypeID()
{
  MEMORY[0x19970EE10](&FigDiskCacheProviderGetClassID_sRegisterFigDiskCacheProviderBaseTypeOnce, RegisterFigDiskCacheProviderBaseType);

  return CMBaseClassGetCFTypeID();
}

CFTypeRef FigDiskCacheProviderRetain(CFTypeRef cf)
{
  if (cf) {
    return CFRetain(cf);
  }
  return cf;
}

void FigDiskCacheProviderRelease(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

CFStringRef FigDiskCacheProviderBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigDiskCacheProvider %p]", a1);
}

void figHTTPCustomURLLoaderCredentialCallback()
{
  CFStringRef v0 = (void *)MEMORY[0x199711A30]();
  FigRetainProxyLockMutex();
  if (!FigRetainProxyIsInvalidated())
  {
    FigRetainProxyGetOwner();
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    FigCustomURLResponseInfoCopyNSURLCredential();
    FigCustomURLResponseInfoGetNSURLSessionAuthChallengeDisposition();
    uint64_t v2 = *(void *)(DerivedStorage + 472);
    if (v2)
    {
      (*(void (**)(void))(v2 + 16))();
      _Block_release(*(const void **)(DerivedStorage + 472));
      *(void *)(DerivedStorage + 472) = 0;
    }
  }
  FigRetainProxyUnlockMutex();
}

void figHttpRequestCloseNSURLSessionTask()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 544))
  {
    nw_activity_complete_with_reason();
    uint64_t v1 = *(const void **)(DerivedStorage + 544);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 544) = 0;
    }
  }
  uint64_t v2 = *(void **)(DerivedStorage + 504);
  if (v2)
  {
    [v2 cancel];
    [*(id *)(DerivedStorage + 56) _deregisterFigHTTPRequestForDataTask:*(void *)(DerivedStorage + 504)];

    *(void *)(DerivedStorage + 504) = 0;
  }
}

uint64_t figHTTPSetIsDormant(uint64_t a1, int a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned __int8 *)(result + 176) != a2)
  {
    uint64_t v4 = result;
    *(unsigned char *)(result + 176) = a2;
    uint64_t result = FigGetUpTimeNanoseconds();
    uint64_t v5 = *(void *)(v4 + 496);
    if (a2)
    {
      if (v5)
      {
        uint64_t result = FigNetworkHistoryRequestBecameInactive();
        *(void *)(v4 + 496) = 0;
        *(unsigned char *)(v4 + 177) = 0;
      }
    }
    else if (!v5)
    {
      FigNetworkHistoryRequestBecameActive();
      return FigNetworkHistorySetRequestLatency();
    }
  }
  return result;
}

void _figHTTPRequestCreateErrorComment(uint64_t a1, uint64_t a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if (a3)
  {
    CFStringRef v10 = CFStringCreateWithFormatAndArguments(0, 0, a3, &a9);
    if (v10)
    {
      CFStringRef v11 = v10;
      size_t v12 = *(const void **)(a1 + 520);
      if (v12) {
        CFRelease(v12);
      }
      *(void *)(a1 + 520) = v11;
    }
  }
}

void figApplyHeaderToCFHTTPMessaage(CFStringRef headerField, CFStringRef value, CFHTTPMessageRef message)
{
}

uint64_t figHTTPRequestPerformReadCallback(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!*(unsigned char *)(DerivedStorage + 172))
    {
      uint64_t v13 = DerivedStorage;
      if (*(void *)(DerivedStorage + 24))
      {
        uint64_t v25 = a3;
        CFTypeRef v14 = *(CFTypeRef *)DerivedStorage;
        if (*(void *)DerivedStorage) {
          uint64_t DerivedStorage = (uint64_t)CFRetain(*(CFTypeRef *)DerivedStorage);
        }
        if (*(unsigned char *)(v13 + 376)) {
          unsigned int v15 = a5 | 4;
        }
        else {
          unsigned int v15 = a5;
        }
        if (*(unsigned char *)(v13 + 377)) {
          uint64_t v16 = v15 | 8;
        }
        else {
          uint64_t v16 = v15;
        }
        if ((v16 & 2) != 0)
        {
          *(unsigned char *)(v13 + 172) = 1;
          uint64_t v17 = (void *)MEMORY[0x199711A30](DerivedStorage);
          figHTTPSetActivelyUsingNetwork((uint64_t)a1, 0);
        }
        uint64_t v18 = *(unsigned int *)(v13 + 136);
        CFArrayRef v20 = *(void (**)(const void *, uint64_t, CFTypeRef, uint64_t, uint64_t, uint64_t, uint64_t, void))(v13 + 24);
        CFTypeRef v19 = *(const void **)(v13 + 32);
        if (v19) {
          CFTypeRef v21 = CFRetain(v19);
        }
        else {
          CFTypeRef v21 = 0;
        }
        CFRetain(a1);
        FigRetainProxyUnlockAll();
        v20(a1, v18, v21, a2, v25, a4, v16, a6);
        FigRetainProxyRelock();
        if (v21) {
          CFRelease(v21);
        }
        CFRelease(a1);
        int IsInvalidated = FigRetainProxyIsInvalidated();
        if (IsInvalidated) {
          uint64_t v23 = 4294954511;
        }
        else {
          uint64_t v23 = 0;
        }
        if ((v16 & 2) != 0 && !IsInvalidated)
        {
          if (!*(unsigned char *)(v13 + 363))
          {
            uint64_t v23 = 0;
            if (!v14) {
              return v23;
            }
            goto LABEL_27;
          }
          FigHTTPRequestCommonMandatoryRequestFinish();
          uint64_t v23 = 0;
          *(unsigned char *)(v13 + 363) = 0;
        }
        if (!v14) {
          return v23;
        }
LABEL_27:
        CFRelease(v14);
        return v23;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t figHttpRequestEnsureNotTooManyBytes(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return 0;
  }
  if (!*(unsigned char *)(DerivedStorage + 168)) {
    return 0;
  }
  uint64_t v10 = *(void *)(DerivedStorage + 416);
  if (v10 < 1) {
    return 0;
  }
  uint64_t v11 = *(void *)(DerivedStorage + 424);
  if (v11 + a2 <= (unint64_t)v10) {
    return 0;
  }
  _figHTTPRequestCreateErrorComment(DerivedStorage, v4, @"received more bytes  %lld + %zu = (%lld) than promised (%lld)", v5, v6, v7, v8, v9, v11);

  return FigSignalErrorAt();
}

uint64_t FigHTTPRequestNSURLSessionGetClassID()
{
  if (FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce != -1) {
    dispatch_once(&FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce, &__block_literal_global_52);
  }
  return sFigHTTPRequestNSURLSessionID;
}

uint64_t __FigHTTPRequestNSURLSessionGetClassID_block_invoke()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t _FigHTTPRequestCreateWithNSURLSession(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  MEMORY[0x19970EE10](&sFigHTTPInit, figHTTPRequestRunOnce);
  if (!a2)
  {
    if (!a3) {
      goto LABEL_19;
    }
LABEL_9:
    if (a11)
    {
      CFTypeID TypeID = CFDictionaryGetTypeID();
      if (TypeID != CFGetTypeID(a11)) {
        goto LABEL_19;
      }
      CFDictionaryGetValue((CFDictionaryRef)a11, @"FHRP_InterfaceName");
      FigCFDictionaryGetBooleanIfPresent();
      CFDictionaryGetValue((CFDictionaryRef)a11, @"FHRP_ClientAuditToken");
      CFDictionaryGetValue((CFDictionaryRef)a11, @"FHRP_ClientBundleIdentifier");
      CFDictionaryGetValue((CFDictionaryRef)a11, @"FHRP_CustomURLLoader");
      if (CFDictionaryGetValue((CFDictionaryRef)a11, @"FHRP_DependentPipelinePrecursor"))
      {
        if (FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce != -1) {
          dispatch_once(&FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce, &__block_literal_global_52);
        }
        if (!CMBaseObjectIsMemberOfClass()) {
          goto LABEL_19;
        }
      }
      FigCFDictionaryGetDoubleIfPresent();
      CFDictionaryGetValue((CFDictionaryRef)a11, @"FHRP_NetworkHistory");
      CFDictionaryGetValue((CFDictionaryRef)a11, @"FHRP_CreateExpectedProgressTarget");
      FigCFDictionaryGetInt32IfPresent();
      FigCFDictionaryGetDataValue();
      CFDictionaryGetValue((CFDictionaryRef)a11, @"FHRP_URLRequestAttribution");
      CFDictionaryGetValue((CFDictionaryRef)a11, @"FHRP_NetworkActivity");
    }
    if (FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce != -1) {
      dispatch_once(&FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce, &__block_literal_global_52);
    }
    CMDerivedObjectCreate();
    goto LABEL_19;
  }
  if (FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce != -1) {
    dispatch_once(&FigHTTPRequestNSURLSessionGetClassID_sRegisterFigHTTPRequestNSURLSessionTypeOnce, &__block_literal_global_52);
  }
  uint64_t v20 = sFigHTTPRequestNSURLSessionID;
  if (v20 == CMBaseObjectGetClassID()
    && *(void *)CMBaseObjectGetDerivedStorage()
    && !FigRetainProxyIsInvalidated())
  {
    goto LABEL_9;
  }
LABEL_19:
  uint64_t v22 = FigSignalErrorAt();
  if (!v22) {
    uint64_t v22 = 0;
  }
  *a18 = 0;
  return v22;
}

uint64_t figHTTPRequestRunOnce()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  uint64_t result = FigGetCFPreferenceBooleanWithDefault();
  sFigDisableIncreasedNetworkQOS = result;
  if (result)
  {
    if (dword_1E9351290)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      return fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  return result;
}

dispatch_queue_t figHTTPNotifyNetworkActivitySetupOnce()
{
  gApplicationNetworkActivityDict = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  dispatch_queue_t result = dispatch_queue_create("com.apple.coremedia.networkactivitydict", 0);
  gApplicationNetworkActivityQueue = (uint64_t)result;
  return result;
}

uint64_t _FigHTTPRequestSessionCreateNSURLSessionDataDelegate(int a1, void *a2)
{
  if (!a2) {
    return 4294954516;
  }
  uint64_t v4 = (void *)MEMORY[0x199711A30]();
  *a2 = [[FigHTTPRequestSessionDataDelegate alloc] initWithResponseDispositionOption:a1 != 0];
  return 0;
}

uint64_t figHttpRequestSendOutputBlockBuffer(uint64_t a1, unsigned int a2)
{
  Owner = (const void *)FigRetainProxyGetOwner();
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = *(void *)(DerivedStorage + 392);
  uint64_t v6 = *(void *)(DerivedStorage + 384);
  uint64_t v7 = *(void *)(DerivedStorage + 400) - v5;
  *(void *)(DerivedStorage + 424) += v7;
  *(unsigned char *)(DerivedStorage + 432) = 1;
  figHTTPRequestPerformReadCallback(Owner, v6, v5, v7, a2, 0);
  if (FigRetainProxyIsInvalidated()) {
    return 4294954511;
  }
  *(unsigned char *)(DerivedStorage + 432) = 0;
  if ((a2 & 2) != 0 || !*(void *)(DerivedStorage + 408))
  {
    uint64_t v9 = *(const void **)(DerivedStorage + 384);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(DerivedStorage + 384) = 0;
    }
    uint64_t result = 0;
    *(void *)(DerivedStorage + 392) = 0;
    *(void *)(DerivedStorage + 400) = 0;
    *(void *)(DerivedStorage + 408) = 0;
  }
  else
  {
    uint64_t result = 0;
    *(void *)(DerivedStorage + 392) = *(void *)(DerivedStorage + 400);
  }
  return result;
}

uint64_t figHTTPRequestGetOutputBuffer(uint64_t a1, char **a2, size_t *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *a2 = 0;
  *a3 = 0;
  if (!*(void *)(DerivedStorage + 16)) {
    return 0;
  }
  uint64_t v7 = (void *)DerivedStorage;
  size_t lengthAtOffsetOut = 0;
  dataPointerOut = 0;
  uint64_t v8 = *(OpaqueCMBlockBuffer **)(DerivedStorage + 384);
  if (v8) {
    goto LABEL_28;
  }
  uint64_t v9 = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = *(const void **)v9;
  uint64_t v27 = 0;
  CMBlockBufferRef theBuffer = 0;
  if (v10) {
    CFRetain(v10);
  }
  uint64_t v11 = *(const void **)(v9 + 32);
  uint64_t v24 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, uint64_t *))(v9 + 16);
  if (v11) {
    CFTypeRef v12 = CFRetain(v11);
  }
  else {
    CFTypeRef v12 = 0;
  }
  uint64_t v13 = *(unsigned int *)(v9 + 136);
  uint64_t v14 = *(void *)(v9 + 416);
  if (v14 < 1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v15 = v14 - *(void *)(v9 + 424);
    if (*(unsigned char *)(v9 + 169)) {
      uint64_t v16 = v15 + 1;
    }
    else {
      uint64_t v16 = v15;
    }
  }
  FigRetainProxyUnlockAll();
  uint64_t v17 = v24(v12, a1, v13, v16, &theBuffer, &v27);
  FigRetainProxyRelock();
  if (v12) {
    CFRelease(v12);
  }
  if (v17)
  {
LABEL_21:
    if (!v10) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v17 = 4294954511;
    if (!v10) {
      goto LABEL_23;
    }
LABEL_22:
    CFRelease(v10);
    goto LABEL_23;
  }
  uint64_t v18 = theBuffer;
  if (theBuffer)
  {
    uint64_t v19 = v27;
    *(void *)(v9 + 392) = v27;
    *(void *)(v9 + 400) = v19;
    *(void *)(v9 + 384) = v18;
    uint64_t v17 = 0;
    *(void *)(v9 + 408) = CMBlockBufferGetDataLength(v18) - *(void *)(v9 + 400);
    CMBlockBufferRef theBuffer = 0;
    goto LABEL_21;
  }
  uint64_t v17 = 0;
  if (v10) {
    goto LABEL_22;
  }
LABEL_23:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  if (!FigRetainProxyIsInvalidated() && !v17)
  {
    uint64_t v8 = (OpaqueCMBlockBuffer *)v7[48];
    if (v8)
    {
LABEL_28:
      size_t v20 = v7[51];
      uint64_t DataPointer = CMBlockBufferGetDataPointer(v8, v7[50], &lengthAtOffsetOut, 0, &dataPointerOut);
      if (!DataPointer)
      {
        size_t v22 = lengthAtOffsetOut;
        if (v20 < lengthAtOffsetOut) {
          size_t v22 = v20;
        }
        if (v22)
        {
          uint64_t v17 = 0;
          *a2 = dataPointerOut;
          *a3 = v22;
          return v17;
        }
        return FigSignalErrorAt();
      }
      return DataPointer;
    }
    return 0;
  }
  return v17;
}

void figHTTPSetActivelyUsingNetwork(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  if (*(unsigned __int8 *)(DerivedStorage + 456) != a2)
  {
    *(unsigned char *)(DerivedStorage + 456) = a2;
    if (!a2)
    {
      if (*(unsigned char *)(DerivedStorage + 457) == 1) {
        FigBytePumpGetFigBaseObject(UpTimeNanoseconds);
      }
      if (*(void *)(DerivedStorage + 488) && !*(unsigned char *)(DerivedStorage + 173) && *(void *)(DerivedStorage + 496))
      {
        FigNetworkHistoryRequestBecameInactive();
        *(void *)(DerivedStorage + 496) = 0;
        *(unsigned char *)(DerivedStorage + 177) = 0;
      }
    }
    uint64_t v5 = *(const void **)(DerivedStorage + 448);
    if (v5)
    {
      CFTypeRef v6 = CFRetain(v5);
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 3221225472;
      void v7[2] = __figHTTPSetActivelyUsingNetwork_block_invoke;
      void v7[3] = &__block_descriptor_41_e5_v8__0l;
      char v8 = a2;
      v7[4] = v6;
      dispatch_async((dispatch_queue_t)gApplicationNetworkActivityQueue, v7);
    }
  }
}

void __figHTTPSetActivelyUsingNetwork_block_invoke(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 40))
  {
    dispatch_time_t v4 = dispatch_time(0, 100000000);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = __figHTTPSetActivelyUsingNetwork_block_invoke_2;
    void v7[3] = &__block_descriptor_40_e5_v8__0l;
    v7[4] = *(void *)(a1 + 32);
    dispatch_after(v4, (dispatch_queue_t)gApplicationNetworkActivityQueue, v7);
    return;
  }
  int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)gApplicationNetworkActivityDict, *(const void **)(a1 + 32));
  if (!Value)
  {
    int valuePtr = 1;
    goto LABEL_7;
  }
  CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
  if (!valuePtr++)
  {
LABEL_7:
    if (*(void *)(a1 + 32)) {
      SBSSetStatusBarShowsActivityForApplication();
    }
  }
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
  CFDictionarySetValue((CFMutableDictionaryRef)gApplicationNetworkActivityDict, *(const void **)(a1 + 32), v5);
  if (v5) {
    CFRelease(v5);
  }
  CFTypeRef v6 = *(const void **)(a1 + 32);
  if (v6) {
    CFRelease(v6);
  }
}

void __figHTTPSetActivelyUsingNetwork_block_invoke_2(uint64_t a1)
{
  int valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)gApplicationNetworkActivityDict, *(const void **)(a1 + 32));
  if (Value)
  {
    CFNumberGetValue(Value, kCFNumberIntType, &valuePtr);
    if (--valuePtr)
    {
      CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
      CFDictionarySetValue((CFMutableDictionaryRef)gApplicationNetworkActivityDict, *(const void **)(a1 + 32), v3);
      if (v3) {
        CFRelease(v3);
      }
    }
    else
    {
      dispatch_time_t v4 = *(const void **)(a1 + 32);
      if (v4)
      {
        SBSSetStatusBarShowsActivityForApplication();
        dispatch_time_t v4 = *(const void **)(a1 + 32);
      }
      CFDictionaryRemoveValue((CFMutableDictionaryRef)gApplicationNetworkActivityDict, v4);
    }
  }
  CFNumberRef v5 = *(const void **)(a1 + 32);
  if (v5) {
    CFRelease(v5);
  }
}

CFStringRef figHTTPRequestNSURLSessionBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigHTTPRequestCFURLconnection %p]", a1);
}

uint64_t figHTTPRequestNSURLSessionInvalidate(uint64_t a1)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)DerivedStorage) {
    return 0;
  }
  FigRetainProxyLockMutex();
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    uint64_t v10 = 4294954511;
  }
  else
  {
    uint64_t v3 = FigRetainProxyInvalidate();
    *(unsigned char *)(DerivedStorage + 8) = 1;
    if (*(unsigned char *)(DerivedStorage + 363))
    {
      FigHTTPRequestCommonMandatoryRequestFinish();
      *(unsigned char *)(DerivedStorage + 363) = 0;
    }
    dispatch_time_t v4 = (void *)MEMORY[0x199711A30](v3);
    figHTTPSetActivelyUsingNetwork(a1, 0);
    figHttpRequestCloseNSURLSessionTask();
    if (*(void *)(DerivedStorage + 472))
    {
      uint64_t v5 = *(void *)(DerivedStorage + 464);
      uint64_t v6 = *(void *)(DerivedStorage + 480);
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 32);
      if (v9) {
        v9(v5, v6);
      }
      (*(void (**)(void))(*(void *)(DerivedStorage + 472) + 16))();
      _Block_release(*(const void **)(DerivedStorage + 472));
      *(void *)(DerivedStorage + 472) = 0;
    }
    uint64_t v10 = 0;
  }
  FigRetainProxyUnlockMutex();
  return v10;
}

void figHTTPRequestNSURLSessionFinalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = (void *)MEMORY[0x199711A30]();
  figHTTPRequestNSURLSessionInvalidate(a1);
  dispatch_time_t v4 = *(void **)(DerivedStorage + 560);
  if (v4)
  {

    *(void *)(DerivedStorage + 560) = 0;
  }
  uint64_t v5 = *(const void **)(DerivedStorage + 88);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(DerivedStorage + 88) = 0;
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 96);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 96) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 104);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 104) = 0;
  }

  uint64_t v8 = *(const void **)(DerivedStorage + 544);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 544) = 0;
  }
  uint64_t v9 = *(void **)(DerivedStorage + 352);
  if (v9) {
    nw_release(v9);
  }
  *(void *)(DerivedStorage + 352) = 0;
  uint64_t v10 = *(void **)(DerivedStorage + 344);
  if (v10) {
    nw_release(v10);
  }
  *(void *)(DerivedStorage + 344) = 0;
  uint64_t v11 = *(NSObject **)(DerivedStorage + 64);
  if (v11) {
    dispatch_release(v11);
  }
  *(void *)(DerivedStorage + 64) = 0;
  CFTypeRef v12 = *(const void **)(DerivedStorage + 152);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 152) = 0;
  }

  *(void *)(DerivedStorage + 144) = 0;
  uint64_t v13 = *(const void **)(DerivedStorage + 160);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 160) = 0;
  }
  uint64_t v14 = *(const void **)(DerivedStorage + 464);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(DerivedStorage + 464) = 0;
  }
  uint64_t v15 = *(const void **)(DerivedStorage + 472);
  if (v15) {
    _Block_release(v15);
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 80);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 80) = 0;
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 72);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(DerivedStorage + 72) = 0;
  }
  uint64_t v18 = *(const void **)(DerivedStorage + 384);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(DerivedStorage + 384) = 0;
  }
  uint64_t v19 = *(const void **)(DerivedStorage + 112);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(DerivedStorage + 112) = 0;
  }
  size_t v20 = *(const void **)(DerivedStorage + 448);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(DerivedStorage + 448) = 0;
  }
  CFTypeRef v21 = *(const void **)(DerivedStorage + 368);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(DerivedStorage + 368) = 0;
  }
  size_t v22 = *(const void **)(DerivedStorage + 512);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(DerivedStorage + 512) = 0;
  }
  uint64_t v23 = *(const void **)(DerivedStorage + 520);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(DerivedStorage + 520) = 0;
  }
  uint64_t v24 = *(const void **)(DerivedStorage + 440);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(DerivedStorage + 440) = 0;
  }
  uint64_t v25 = *(const void **)(DerivedStorage + 488);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(DerivedStorage + 488) = 0;
  }
  CFArrayRef v26 = *(const void **)(DerivedStorage + 32);
  if (v26)
  {
    CFRelease(v26);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t v27 = *(const void **)(DerivedStorage + 40);
  if (v27)
  {
    CFRelease(v27);
    *(void *)(DerivedStorage + 40) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

uint64_t figHTTPRequestNSURLSessionCopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFMutableDictionaryRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v8 = 4294954511;
    goto LABEL_22;
  }
  if (CFEqual(a2, @"FHRP_HTTPFinalURL"))
  {
    uint64_t v9 = *(const void **)(DerivedStorage + 80);
    if (!v9) {
      goto LABEL_21;
    }
    goto LABEL_8;
  }
  if (CFEqual(a2, @"FHRP_HTTPResponseHeaders"))
  {
    uint64_t v9 = *(const void **)(DerivedStorage + 152);
    if (v9)
    {
LABEL_8:
      uint64_t v10 = (__CFDictionary *)CFRetain(v9);
LABEL_9:
      uint64_t v8 = 0;
      *a4 = v10;
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v8 = 4294954513;
    goto LABEL_22;
  }
  if (CFEqual(a2, @"FHRP_PayloadLength"))
  {
    if (*(void *)(DerivedStorage + 144))
    {
      uint64_t v10 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, (const void *)(DerivedStorage + 416));
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, @"FHRP_ErrorReturned"))
  {
    uint64_t v11 = *(void **)(DerivedStorage + 512);
    if (v11)
    {
      uint64_t v10 = v11;
      goto LABEL_9;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, @"FHRP_ErrorComment"))
  {
    uint64_t v9 = *(const void **)(DerivedStorage + 520);
    if (!v9) {
      goto LABEL_21;
    }
    goto LABEL_8;
  }
  if (CFEqual(a2, @"FHRP_RemoteIPAddress"))
  {
    uint64_t v9 = *(const void **)(DerivedStorage + 368);
    if (v9) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }
  if (!CFEqual(a2, @"FHRP_CFNetworkTimingData"))
  {
    if (CFEqual(a2, @"FHRP_CFNetworkTransactionMetrics"))
    {
      CFMutableDictionaryRef v19 = 0;
      uint64_t v15 = figHTTPRequestNSURLSessionCopyTaskMetricsAsCFData(a1, &v19);
    }
    else
    {
      if (!CFEqual(a2, @"FHRP_ByteRange"))
      {
        if (CFEqual(a2, @"FHRP_HandlesNetworkTransitions"))
        {
          uint64_t v17 = (const void **)MEMORY[0x1E4F1CFD0];
          if (!*(unsigned char *)(DerivedStorage + 536)) {
            uint64_t v17 = (const void **)MEMORY[0x1E4F1CFC8];
          }
          uint64_t v9 = *v17;
          goto LABEL_8;
        }
        if (!CFEqual(a2, @"FHRP_IsExpensive"))
        {
          uint64_t v8 = 4294954512;
          goto LABEL_22;
        }
        uint64_t v8 = 0;
        if (*(unsigned char *)(DerivedStorage + 537)) {
          uint64_t v18 = (CFMutableDictionaryRef *)MEMORY[0x1E4F1CFD0];
        }
        else {
          uint64_t v18 = (CFMutableDictionaryRef *)MEMORY[0x1E4F1CFC8];
        }
        CFMutableDictionaryRef v16 = *v18;
LABEL_33:
        *a4 = v16;
        goto LABEL_22;
      }
      CFMutableDictionaryRef v19 = 0;
      uint64_t v15 = figHTTPRequestNSURLSessionCopyByteRangeAsCFDictionary(a1, &v19);
    }
    uint64_t v8 = v15;
    CFMutableDictionaryRef v16 = v19;
    goto LABEL_33;
  }
  uint64_t v13 = (void *)MEMORY[0x199711A30]();
  uint64_t v14 = (void *)[*(id *)(DerivedStorage + 504) _timingData];
  if (v14)
  {
    uint64_t v8 = 0;
    *a4 = (CFMutableDictionaryRef)v14;
  }
  else
  {
    uint64_t v8 = 4294954513;
  }
LABEL_22:
  FigRetainProxyUnlockMutex();
  return v8;
}

uint64_t figHTTPRequestNSURLSessionSetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigRetainProxyLockMutex();
  if (FigRetainProxyIsInvalidated())
  {
    uint64_t v7 = 4294954511;
    goto LABEL_20;
  }
  if (CFEqual(a2, @"FHRP_ExpectedProgressTarget"))
  {
    uint64_t valuePtr = 0;
    if (a3)
    {
      CFNumberGetValue(a3, kCFNumberSInt64Type, &valuePtr);
      a3 = (const __CFNumber *)FigNanosecondsToHostTime();
      FigGetContinuousUpTimeNanoseconds();
    }
    objc_msgSend(*(id *)(DerivedStorage + 504), "set_expectedProgressTarget:", a3);
    goto LABEL_6;
  }
  if (CFEqual(a2, @"FHRP_DefaultLatency"))
  {
    if (a3)
    {
      CFTypeID v8 = CFGetTypeID(a3);
      if (v8 == CFNumberGetTypeID())
      {
        uint64_t valuePtr = 0;
        CFNumberGetValue(a3, kCFNumberSInt64Type, &valuePtr);
        uint64_t v7 = 0;
        *(void *)(DerivedStorage + 248) = valuePtr;
        goto LABEL_20;
      }
    }
LABEL_19:
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_20;
  }
  if (CFEqual(a2, @"FHRP_NWActivityCompletionReason"))
  {
    if (a3)
    {
      CFTypeID v9 = CFGetTypeID(a3);
      if (v9 == CFNumberGetTypeID())
      {
        uint64_t valuePtr = 0;
        CFNumberGetValue(a3, kCFNumberSInt64Type, &valuePtr);
        uint64_t v7 = 0;
        *(_DWORD *)(DerivedStorage + 552) = valuePtr;
        goto LABEL_20;
      }
    }
    goto LABEL_19;
  }
  if (!CFEqual(a2, @"FHRP_IsDormant"))
  {
    uint64_t v7 = 4294954512;
    goto LABEL_20;
  }
  if (!a3) {
    goto LABEL_19;
  }
  CFTypeID v10 = CFGetTypeID(a3);
  if (v10 != CFBooleanGetTypeID()) {
    goto LABEL_19;
  }
  figHTTPSetIsDormant(a1, *MEMORY[0x1E4F1CFD0] == (void)a3);
LABEL_6:
  uint64_t v7 = 0;
LABEL_20:
  FigRetainProxyUnlockMutex();
  return v7;
}

uint64_t figHTTPRequestNSURLSessionCopyTaskMetricsAsCFData(uint64_t a1, void *a2)
{
  uint64_t v10 = 0;
  uint64_t result = 4294954516;
  if (a1 && a2)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage && (uint64_t v6 = DerivedStorage, *DerivedStorage))
    {
      uint64_t v7 = FigRetainProxyLockMutex();
      if (v6[32])
      {
        CFTypeID v8 = (void *)MEMORY[0x199711A30](v7);
        id v9 = (id)[MEMORY[0x1E4F28DB0] archivedDataWithRootObject:v6[32] requiringSecureCoding:1 error:&v10];
      }
      else
      {
        id v9 = 0;
      }
      FigRetainProxyUnlockMutex();
      uint64_t result = 0;
      *a2 = v9;
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t figHTTPRequestNSURLSessionCopyByteRangeAsCFDictionary(uint64_t a1, CFMutableDictionaryRef *a2)
{
  uint64_t result = 4294954516;
  if (a1 && a2)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage && *DerivedStorage)
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (Mutable)
      {
        CFMutableDictionaryRef v7 = Mutable;
        FigRetainProxyLockMutex();
        FigCFDictionarySetInt64();
        FigCFDictionarySetInt64();
        FigRetainProxyUnlockMutex();
        uint64_t result = 0;
        *a2 = v7;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    else
    {
      return 4294954516;
    }
  }
  return result;
}

uint64_t figHTTPRequestNSURLSessionPause()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = *(void *)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    FigRetainProxyLockMutex();
    if (!*(unsigned char *)(DerivedStorage + 8)) {
      [*(id *)(DerivedStorage + 504) suspend];
    }
    return FigRetainProxyUnlockMutex();
  }
  return result;
}

uint64_t figHTTPRequestNSURLSessionResume()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t result = *(void *)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    FigRetainProxyLockMutex();
    if (!*(unsigned char *)(DerivedStorage + 8)) {
      [*(id *)(DerivedStorage + 504) resume];
    }
    return FigRetainProxyUnlockMutex();
  }
  return result;
}

uint64_t figHTTPRequestNSURLSessionGetBandwidthInfo(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294954516;
  }
  CFTypeID v8 = DerivedStorage;
  if (!*DerivedStorage) {
    return 4294954516;
  }
  FigRetainProxyLockMutex();
  if (a2)
  {
    uint64_t v9 = v8[53];
    if (*((unsigned char *)v8 + 432) != 1) {
      uint64_t v9 = v8[50] + v9 - v8[49];
    }
    *a2 = v9;
  }
  if (a3)
  {
    if (!*((unsigned char *)v8 + 173) && !*((unsigned char *)v8 + 174) || (uint64_t v10 = v8[31], v10 <= 0))
    {
      uint64_t v11 = v8[27];
      uint64_t v12 = v8[25];
      BOOL v13 = v11 < v12;
      uint64_t v10 = v11 - v12;
      if (v13) {
        uint64_t v10 = 0;
      }
    }
    *a3 = v10;
  }
  if (a4)
  {
    uint64_t v15 = v8[27];
    uint64_t v14 = v8[28];
    BOOL v13 = v14 < v15;
    uint64_t v16 = v14 - v15;
    if (v13)
    {
      if (v15 < 1) {
        uint64_t v16 = 0;
      }
      else {
        uint64_t v16 = FigGetUpTimeNanoseconds() - v8[27];
      }
    }
    *a4 = v16;
  }
  FigRetainProxyUnlockMutex();
  return 0;
}

uint64_t figHTTPRequestNSURLSessionGetBufferFilledOffset(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = 4294954516;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          CFMutableDictionaryRef v7 = DerivedStorage;
          if (*DerivedStorage)
          {
            FigRetainProxyLockMutex();
            if (v7[48] == a2)
            {
              uint64_t v3 = 0;
              *a3 = v7[50];
            }
            FigRetainProxyUnlockMutex();
          }
        }
      }
    }
  }
  return v3;
}

uint64_t figHTTPRequestNSURLSessionCopyTransactionMetrics(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, unsigned char *a9, void *a10, _DWORD *a11, void *a12, void *a13)
{
  if (!a1) {
    return 4294954516;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294954516;
  }
  CFTypeRef v21 = DerivedStorage;
  if (!*DerivedStorage) {
    return 4294954516;
  }
  FigRetainProxyLockMutex();
  if (a2) {
    *a2 = v21[33];
  }
  if (a3) {
    *a3 = v21[34];
  }
  if (a4) {
    *a4 = v21[35];
  }
  if (a5) {
    *a5 = v21[36];
  }
  if (a6) {
    *a6 = v21[37];
  }
  if (a7) {
    *a7 = v21[38];
  }
  if (a8) {
    *a8 = v21[39];
  }
  if (a9) {
    *a9 = *((unsigned char *)v21 + 320);
  }
  if (a10) {
    *a10 = v21[41];
  }
  if (a11) {
    *a11 = *((_DWORD *)v21 + 84);
  }
  if (a12)
  {
    size_t v22 = (void *)v21[44];
    if (v22)
    {
      nw_retain(v22);
      uint64_t v23 = v21[44];
    }
    else
    {
      uint64_t v23 = 0;
    }
    *a12 = v23;
  }
  if (a13)
  {
    uint64_t v24 = (void *)v21[43];
    if (v24)
    {
      nw_retain(v24);
      uint64_t v25 = v21[43];
    }
    else
    {
      uint64_t v25 = 0;
    }
    *a13 = v25;
  }
  FigRetainProxyUnlockMutex();
  return 0;
}

uint64_t figHTTPAddHeaderFields(uint64_t a1, uint64_t a2, void *a3)
{
  objc_opt_class();
  uint64_t result = objc_opt_isKindOfClass();
  if (result)
  {
    objc_opt_class();
    uint64_t result = objc_opt_isKindOfClass();
    if (result)
    {
      return [a3 setValue:a2 forHTTPHeaderField:a1];
    }
  }
  return result;
}

void __figHttpRequestSetupNSURLSessionTask_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    dispatch_time_t v4 = (const void *)v3;
    _FigHTTPRequestSessionNoteNativeConnectionForNSURLSession(v3, a2);
    CFRelease(v4);
  }
}

uint64_t FigEndpointStreamAudioEngineResumeSync(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int valuePtr = 0;
  if (a3) {
    dispatch_time_t v5 = dispatch_time(0, 1000000 * a3);
  }
  else {
    dispatch_time_t v5 = -1;
  }
  SyncContext = (dispatch_object_t *)inEndpointStreamUtil_createSyncContext();
  if (!SyncContext)
  {
    FigSignalErrorAt();
    return valuePtr;
  }
  CFMutableDictionaryRef v7 = SyncContext;
  dispatch_object_t v8 = SyncContext[1];
  if (v8) {
    CFArrayRef v9 = (const __CFArray *)CFRetain(v8);
  }
  else {
    CFArrayRef v9 = 0;
  }
  uint64_t v10 = *v7;
  dispatch_retain(*v7);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v14 = *(void *)(VTable + 16);
  uint64_t v12 = VTable + 16;
  uint64_t v13 = v14;
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, int, uint64_t), dispatch_object_t *))(v15 + 8);
  if (v16) {
    v16(a1, a2, inEndpointStreamAudioEngineUtil_completionCallback, v7);
  }
  else {
    inEndpointStreamAudioEngineUtil_completionCallback(v12, -12782, (uint64_t)v7);
  }
  if (!dispatch_semaphore_wait(v10, v5))
  {
    if (CFArrayGetCount(v9) >= 1)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    }
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  unsigned int valuePtr = -15486;
  if (v9) {
LABEL_18:
  }
    CFRelease(v9);
LABEL_19:
  if (v10) {
    dispatch_release(v10);
  }
  return valuePtr;
}

void *inEndpointStreamUtil_createSyncContext()
{
  CFStringRef v0 = malloc_type_calloc(1uLL, 0x10uLL, 0x20040A4A59CD2uLL);
  if (v0
    && (CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]),
        (v0[1] = Mutable) != 0))
  {
    *CFStringRef v0 = dispatch_semaphore_create(0);
  }
  else if (FigSignalErrorAt())
  {
    free(v0);
    return 0;
  }
  return v0;
}

void inEndpointStreamAudioEngineUtil_completionCallback(uint64_t a1, int a2, uint64_t a3)
{
  int valuePtr = a2;
  CFNumberRef v4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a3 + 8), v4);
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)a3);
  if (*(void *)a3) {
    dispatch_release(*(dispatch_object_t *)a3);
  }
  dispatch_time_t v5 = *(const void **)(a3 + 8);
  if (v5) {
    CFRelease(v5);
  }
  free((void *)a3);
  if (v4) {
    CFRelease(v4);
  }
}

uint64_t FigEndpointStreamAudioEngineSuspendSync(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int valuePtr = 0;
  if (a3) {
    dispatch_time_t v5 = dispatch_time(0, 1000000 * a3);
  }
  else {
    dispatch_time_t v5 = -1;
  }
  SyncContext = (dispatch_object_t *)inEndpointStreamUtil_createSyncContext();
  if (!SyncContext)
  {
    FigSignalErrorAt();
    return valuePtr;
  }
  CFMutableDictionaryRef v7 = SyncContext;
  dispatch_object_t v8 = SyncContext[1];
  if (v8) {
    CFArrayRef v9 = (const __CFArray *)CFRetain(v8);
  }
  else {
    CFArrayRef v9 = 0;
  }
  uint64_t v10 = *v7;
  dispatch_retain(*v7);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v14 = *(void *)(VTable + 16);
  uint64_t v12 = VTable + 16;
  uint64_t v13 = v14;
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, int, uint64_t), dispatch_object_t *))(v15 + 16);
  if (v16) {
    v16(a1, a2, inEndpointStreamAudioEngineUtil_completionCallback, v7);
  }
  else {
    inEndpointStreamAudioEngineUtil_completionCallback(v12, -12782, (uint64_t)v7);
  }
  if (!dispatch_semaphore_wait(v10, v5))
  {
    if (CFArrayGetCount(v9) >= 1)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    }
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  unsigned int valuePtr = -15486;
  if (v9) {
LABEL_18:
  }
    CFRelease(v9);
LABEL_19:
  if (v10) {
    dispatch_release(v10);
  }
  return valuePtr;
}

uint64_t FigEndpointStreamAudioEngineSetEndpointStreamSync(uint64_t a1, uint64_t a2, int a3)
{
  unsigned int valuePtr = 0;
  if (a3) {
    dispatch_time_t v5 = dispatch_time(0, 1000000 * a3);
  }
  else {
    dispatch_time_t v5 = -1;
  }
  SyncContext = (dispatch_object_t *)inEndpointStreamUtil_createSyncContext();
  if (!SyncContext)
  {
    FigSignalErrorAt();
    return valuePtr;
  }
  CFMutableDictionaryRef v7 = SyncContext;
  dispatch_object_t v8 = SyncContext[1];
  if (v8) {
    CFArrayRef v9 = (const __CFArray *)CFRetain(v8);
  }
  else {
    CFArrayRef v9 = 0;
  }
  uint64_t v10 = *v7;
  dispatch_retain(*v7);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v14 = *(void *)(VTable + 16);
  uint64_t v12 = VTable + 16;
  uint64_t v13 = v14;
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, void (*)(uint64_t, int, uint64_t), dispatch_object_t *))(v15 + 24);
  if (v16) {
    v16(a1, a2, inEndpointStreamAudioEngineUtil_completionCallback, v7);
  }
  else {
    inEndpointStreamAudioEngineUtil_completionCallback(v12, -12782, (uint64_t)v7);
  }
  if (!dispatch_semaphore_wait(v10, v5))
  {
    if (CFArrayGetCount(v9) >= 1)
    {
      CFNumberRef ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v9, 0);
      CFNumberGetValue(ValueAtIndex, kCFNumberSInt32Type, &valuePtr);
    }
    if (!v9) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
  unsigned int valuePtr = -15486;
  if (v9) {
LABEL_18:
  }
    CFRelease(v9);
LABEL_19:
  if (v10) {
    dispatch_release(v10);
  }
  return valuePtr;
}

uint64_t FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntryInProcess(const void *a1, const void *Value, const __CFURL *a3, uint64_t a4, __CFArray **a5, void *a6, double a7)
{
  CFTypeRef v76 = 0;
  CFMutableDictionaryRef v77 = 0;
  v75[0] = a3;
  v75[1] = a4;
  if (!CFEqual(a1, @"com.apple.hls.chapters")) {
    return 0;
  }
  if (!Value)
  {
    uint64_t ErrorLogEntry = createErrorLogEntry((uint64_t)v75, "chapter data contains no data");
    CFMutableArrayRef Mutable = 0;
    uint64_t v30 = 0;
    long long v42 = 0;
    CFURLRef v14 = 0;
LABEL_97:
    CFTypeRef v15 = 0;
    goto LABEL_65;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a3);
  CFURLRef v14 = PathComponent;
  if (!PathComponent)
  {
    uint64_t ErrorLogEntry = FigSignalErrorAt();
    CFMutableArrayRef Mutable = 0;
    uint64_t v30 = 0;
    long long v42 = 0;
    goto LABEL_97;
  }
  CFTypeRef v15 = FigCFHTTPCreateURLString(PathComponent);
  if (!v15)
  {
    uint64_t v61 = FigSignalErrorAt();
LABEL_104:
    uint64_t ErrorLogEntry = v61;
    CFMutableArrayRef Mutable = 0;
    uint64_t v30 = 0;
    long long v42 = 0;
    goto LABEL_65;
  }
  CFTypeID v16 = CFGetTypeID(Value);
  if (v16 != CFDictionaryGetTypeID())
  {
    uint64_t v61 = FigSessionDataParseJSONChapter((uint64_t)v75, (const __CFArray *)Value, v15, a5, a7);
    goto LABEL_104;
  }
  if (CFDictionaryContainsKey((CFDictionaryRef)Value, @"chapters")) {
    CFNumberRef Value = CFDictionaryGetValue((CFDictionaryRef)Value, @"chapters");
  }
  uint64_t v17 = CFDictionaryGetValue((CFDictionaryRef)Value, @"chapter-list");
  if (!v17)
  {
    CMTime v62 = "Chapter array missing";
LABEL_103:
    uint64_t v61 = createErrorLogEntry((uint64_t)v75, v62);
    goto LABEL_104;
  }
  uint64_t v18 = v17;
  CFTypeID TypeID = CFArrayGetTypeID();
  if (TypeID != CFGetTypeID(v18))
  {
    CMTime v62 = "Chapter array is not an array";
    goto LABEL_103;
  }
  size_t v20 = CFDictionaryGetValue((CFDictionaryRef)Value, @"locales");
  if (v20)
  {
    CFTypeID v21 = CFArrayGetTypeID();
    if (v21 != CFGetTypeID(v20))
    {
      CMTime v62 = "locale array is not an array";
      goto LABEL_103;
    }
  }
  int v63 = a5;
  CFTypeRef cf = v15;
  size_t v22 = CFDictionaryGetValue((CFDictionaryRef)Value, @"nominal-image-resolutions");
  if (v22)
  {
    CFTypeID v23 = CFArrayGetTypeID();
    if (v23 != CFGetTypeID(v22))
    {
      uint64_t ErrorLogEntry = createErrorLogEntry((uint64_t)v75, "image resolution array is not an array");
      CFMutableArrayRef Mutable = 0;
      uint64_t v30 = 0;
      long long v42 = 0;
      goto LABEL_87;
    }
  }
  CFURLRef v64 = v14;
  uint64_t v65 = a6;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
  CFIndex Count = CFArrayGetCount((CFArrayRef)v18);
  if (Count < 1)
  {
LABEL_62:
    CFTypeRef v15 = cf;
    uint64_t ErrorLogEntry = 0;
    uint64_t v30 = 0;
    long long v42 = 0;
    if (v63)
    {
      *int v63 = Mutable;
      CFMutableArrayRef Mutable = 0;
    }
    CFURLRef v14 = v64;
    a6 = v65;
    goto LABEL_65;
  }
  CFIndex v25 = 0;
  CFArrayRef v26 = 0;
  double v27 = 0.0;
  CFArrayRef theArray = Mutable;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v18, v25);
    memset(&v74, 0, sizeof(v74));
    memset(&v73, 0, sizeof(v73));
    double valuePtr = 0.0;
    if (ValueAtIndex) {
      break;
    }
    ++v25;
LABEL_61:
    if (v25 == Count) {
      goto LABEL_62;
    }
  }
  CFDictionaryRef v29 = ValueAtIndex;
  uint64_t v30 = CFDictionaryCreateMutable(v12, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v30)
  {
    uint64_t ErrorLogEntry = FigSignalErrorAt();
    long long v42 = 0;
    CFURLRef v14 = v64;
    a6 = v65;
LABEL_87:
    CFTypeRef v15 = cf;
    goto LABEL_65;
  }
  CFStringRef v31 = (const __CFString *)CFDictionaryGetValue(v29, @"start");
  if (!v31)
  {
    CMTime v60 = "Missing start time for chapter metadata";
    goto LABEL_83;
  }
  CFStringRef v32 = v31;
  CFTypeID v33 = CFStringGetTypeID();
  if (v33 == CFGetTypeID(v32))
  {
    DoubleCFNumberRef Value = CFStringGetDoubleValue(v32);
    double valuePtr = DoubleValue;
  }
  else
  {
    CFTypeID v35 = CFNumberGetTypeID();
    if (v35 != CFGetTypeID(v32))
    {
      CMTime v60 = "illegal type for start time for chapter metadata";
      goto LABEL_83;
    }
    if (!CFNumberGetValue((CFNumberRef)v32, kCFNumberDoubleType, &valuePtr))
    {
      CMTime v60 = "illegal number for start time for chapter metadata";
      goto LABEL_83;
    }
    DoubleCFNumberRef Value = valuePtr;
  }
  if (DoubleValue < 0.0)
  {
    CMTime v60 = "Negative start time not allowed.";
    goto LABEL_83;
  }
  CMTimeMakeWithSeconds(&v73, DoubleValue, 100000);
  CMTime time = v73;
  CFDictionaryRef v36 = CMTimeCopyAsDictionary(&time, v12);
  CFDictionaryAddValue(v30, @"ChapterTime", v36);
  if (v36) {
    CFRelease(v36);
  }
  if (v26)
  {
    if (valuePtr > v27)
    {
      CMTimeMakeWithSeconds(&v74, valuePtr - v27, 100000);
      CMTime time = v74;
      CFDictionaryRef v37 = CMTimeCopyAsDictionary(&time, v12);
      CFDictionaryAddValue(v26, @"ChapterDuration", v37);
      if (v37) {
        CFRelease(v37);
      }
      goto LABEL_32;
    }
    CMTime v60 = "Chapter starts before previous chapter";
LABEL_83:
    uint64_t ErrorLogEntry = createErrorLogEntry((uint64_t)v75, v60);
    long long v42 = 0;
    CFURLRef v14 = v64;
    a6 = v65;
    CFTypeRef v15 = cf;
    CFMutableArrayRef Mutable = theArray;
    goto LABEL_65;
  }
LABEL_32:
  double v27 = valuePtr;
  CFIndex v38 = v25 + 1;
  if (v38 != Count) {
    goto LABEL_36;
  }
  if (valuePtr >= a7)
  {
    CMTime v60 = "last chapter start time exceeds playlist duration";
    goto LABEL_83;
  }
  CMTimeMakeWithSeconds(&time, a7 - valuePtr, 1000000);
  CMTime v74 = time;
  CFDictionaryRef v39 = CMTimeCopyAsDictionary(&time, v12);
  CFDictionaryAddValue(v30, @"ChapterDuration", v39);
  if (v39) {
    CFRelease(v39);
  }
LABEL_36:
  CFIndex v67 = v38;
  CFDictionaryRef theDict = v30;
  CFDictionaryRef v40 = (const __CFDictionary *)CFDictionaryGetValue(v29, @"titles");
  CFAllocatorRef v41 = v12;
  long long v42 = CFArrayCreateMutable(v12, 0, MEMORY[0x1E4F1D510]);
  if (v42)
  {
    if (v20 && v40 && CFArrayGetCount((CFArrayRef)v20) >= 1)
    {
      CFIndex v43 = 0;
      do
      {
        char v44 = CFArrayGetValueAtIndex((CFArrayRef)v20, v43);
        if (v44)
        {
          char v45 = v44;
          int v46 = CFDictionaryGetValue(v40, v44);
          if (v46)
          {
            uint64_t ChapterMetadataArtworkItem = createMetadataItem(@"title", v46, v45, @"comn", &v77);
            if (ChapterMetadataArtworkItem) {
              goto LABEL_85;
            }
            CFMutableDictionaryRef v48 = v77;
            CFArrayAppendValue(v42, v77);
            if (v48)
            {
              CFRelease(v48);
              CFMutableDictionaryRef v77 = 0;
            }
          }
        }
        ++v43;
      }
      while (v43 < CFArrayGetCount((CFArrayRef)v20));
    }
    CFDictionaryRef v49 = (const __CFDictionary *)CFDictionaryGetValue(v29, @"images");
    if (v22)
    {
      CFDictionaryRef v50 = v49;
      if (v49)
      {
        if (CFArrayGetCount((CFArrayRef)v22) >= 1)
        {
          for (CFIndex i = 0; i < CFArrayGetCount((CFArrayRef)v22); ++i)
          {
            CFURLRef v52 = CFArrayGetValueAtIndex((CFArrayRef)v22, i);
            if (v52)
            {
              char v53 = v52;
              time.CMTime value = 0;
              CFDictionaryRef v54 = (const __CFDictionary *)CFDictionaryGetValue(v50, v52);
              if (!v54 || (v55 = v54, CFTypeID v56 = CFGetTypeID(v54), v56 != CFDictionaryGetTypeID()))
              {
                uint64_t ChapterMetadataArtworkItem = createErrorLogEntry((uint64_t)v75, "images entry is not a dictionary");
                goto LABEL_85;
              }
              uint64_t ChapterMetadataArtworkItem = createChapterMetadataArtworkItem((uint64_t)v75, v53, v55, cf, (__CFDictionary **)&time);
              if (ChapterMetadataArtworkItem) {
                goto LABEL_85;
              }
              CFSetRef v57 = (const void *)time.value;
              CFArrayAppendValue(v42, (const void *)time.value);
              if (v57) {
                CFRelease(v57);
              }
            }
          }
        }
      }
    }
    CFArrayRef v26 = theDict;
    if (CFArrayGetCount(v42) >= 1) {
      CFDictionaryAddValue(theDict, @"ChapterMetadataItems", v42);
    }
    CFRelease(v42);
    CFMutableArrayRef Mutable = theArray;
    CFArrayAppendValue(theArray, theDict);
    CFRelease(theDict);
    CFAllocatorRef v12 = v41;
    CFIndex v25 = v67;
    goto LABEL_61;
  }
  uint64_t ChapterMetadataArtworkItem = FigSignalErrorAt();
LABEL_85:
  uint64_t ErrorLogEntry = ChapterMetadataArtworkItem;
  CFURLRef v14 = v64;
  a6 = v65;
  CFTypeRef v15 = cf;
  CFMutableArrayRef Mutable = theArray;
  uint64_t v30 = theDict;
LABEL_65:
  if (v77) {
    CFRelease(v77);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v42) {
    CFRelease(v42);
  }
  if (v14) {
    CFRelease(v14);
  }
  if (v15) {
    CFRelease(v15);
  }
  if (a6)
  {
    *a6 = v76;
  }
  else if (v76)
  {
    CFRelease(v76);
  }
  return ErrorLogEntry;
}

uint64_t createErrorLogEntry(uint64_t a1, const char *a2)
{
  if (a1)
  {
    CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CFStringRef v5 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a2, 0x8000100u);
    uint64_t v6 = *(const void **)(a1 + 16);
    if (v6) {
      CFRelease(v6);
    }
    *(void *)(a1 + 16) = FigErrorLogCreateEntry(v4, 0, *(const __CFURL **)a1, 0, -16670, @"CoreMediaErrorDomain", v5, 0, 0, 0, 4, 0, *(void **)(a1 + 8));
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v2 = vars8;
  }
  return FigSignalErrorAt();
}

uint64_t FigSessionDataParseJSONChapter(uint64_t a1, const __CFArray *cf, const void *a3, __CFArray **a4, double a5)
{
  CFArrayRef v8 = cf;
  CFMutableDictionaryRef v91 = 0;
  CFTypeID v92 = 0;
  double v89 = 0.0;
  CFMutableDictionaryRef v90 = 0;
  CFTypeID v9 = CFGetTypeID(cf);
  if (v9 != CFArrayGetTypeID())
  {
    uint64_t ErrorLogEntry = createErrorLogEntry(a1, "Chapter JSON is not an array");
    goto LABEL_74;
  }
  uint64_t Count = CFArrayGetCount(v8);
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], Count, MEMORY[0x1E4F1D510]);
  CFAllocatorRef v12 = Mutable;
  if (!Mutable)
  {
LABEL_100:
    uint64_t v22 = FigSignalErrorAt();
LABEL_89:
    uint64_t ErrorLogEntry = v22;
    goto LABEL_93;
  }
  CMTime v74 = a4;
  uint64_t v75 = Count - 1;
  if (Count < 1)
  {
    uint64_t ErrorLogEntry = 0;
LABEL_72:
    if (!v74) {
      goto LABEL_93;
    }
    *CMTime v74 = v12;
LABEL_74:
    CFAllocatorRef v12 = 0;
    goto LABEL_93;
  }
  int v81 = 0;
  CFIndex v13 = 0;
  uint64_t v79 = Mutable;
  double v14 = 0.0;
  CFTypeRef v76 = a3;
  uint64_t v77 = Count;
  CFArrayRef v78 = v8;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v8, v13);
    double v88 = 0.0;
    CFTypeID v16 = CFGetTypeID(ValueAtIndex);
    if (v16 != CFDictionaryGetTypeID())
    {
      CFDictionaryRef v71 = "chapter entry is not a dictionary";
LABEL_88:
      uint64_t v22 = createErrorLogEntry(a1, v71);
      goto LABEL_89;
    }
    CFMutableDictionaryRef v17 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!v17) {
      goto LABEL_100;
    }
    CFMutableDictionaryRef v18 = v17;
    CFIndex v82 = v13;
    CFArraySetValueAtIndex(v12, v13, v17);
    CFRelease(v18);
    int DoubleIfPresent = FigCFDictionaryGetDoubleIfPresent();
    int v20 = FigCFDictionaryGetDoubleIfPresent();
    if (!(DoubleIfPresent | v20))
    {
      CFDictionaryRef v71 = "chapter dictionary must have start time or duration";
      goto LABEL_88;
    }
    int v21 = v20;
    if (DoubleIfPresent && v89 < 0.0)
    {
      CFDictionaryRef v71 = "chapter start time must be positive";
      goto LABEL_88;
    }
    if (v20 && v88 < 0.0)
    {
      CFDictionaryRef v71 = "chapter duration must be positive";
      goto LABEL_88;
    }
    CMTimeMakeWithSeconds(&v87, v89, 100000);
    uint64_t v22 = FigCFDictionarySetCMTime();
    if (v22) {
      goto LABEL_89;
    }
    if (v81)
    {
      if (!DoubleIfPresent)
      {
        CFDictionaryRef v71 = "cannot determine chapter duration.  chapter has just duration, but previous chapter has just start time";
        goto LABEL_88;
      }
      CFArrayGetValueAtIndex(v12, v82 - 1);
      CMTimeMakeWithSeconds(&v86, v89 - v14, 100000);
      uint64_t v22 = FigCFDictionarySetCMTime();
      if (v22) {
        goto LABEL_89;
      }
    }
    if (v21)
    {
      CMTimeMakeWithSeconds(&v85, v88, 100000);
      uint64_t ErrorLogEntry = FigCFDictionarySetCMTime();
      CFIndex v24 = v82;
      if (ErrorLogEntry) {
        goto LABEL_93;
      }
      int v81 = 0;
      double v14 = v89;
      double v89 = v89 + v88;
    }
    else
    {
      CFIndex v24 = v82;
      if (v82 == v75)
      {
        if (v89 >= a5)
        {
          CFDictionaryRef v71 = "chapter start time is at or after the end of presentation";
          goto LABEL_88;
        }
        CMTimeMakeWithSeconds(&v84, a5 - v89, 100000);
        uint64_t ErrorLogEntry = FigCFDictionarySetCMTime();
      }
      else
      {
        uint64_t ErrorLogEntry = 0;
        int v81 = 1;
      }
      double v14 = v89;
    }
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"metadata");
    if (Value)
    {
      CFArrayRef v26 = Value;
      CFTypeID v27 = CFGetTypeID(Value);
      if (v27 != CFArrayGetTypeID())
      {
        CFAllocatorRef v72 = "metadata is not an array";
        goto LABEL_91;
      }
      CFIndex v28 = CFArrayGetCount(v26);
      if (v28 >= 1) {
        break;
      }
    }
LABEL_39:
    CFArrayRef v42 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"titles");
    if (v42)
    {
      CFArrayRef v43 = v42;
      CFTypeID v44 = CFGetTypeID(v42);
      if (v44 != CFArrayGetTypeID())
      {
        CFAllocatorRef v72 = "titles is not an array";
LABEL_91:
        uint64_t v56 = createErrorLogEntry(a1, v72);
LABEL_92:
        uint64_t ErrorLogEntry = v56;
        CFAllocatorRef v12 = v79;
        goto LABEL_93;
      }
      CFIndex v45 = CFArrayGetCount(v43);
      if (v45 >= 1)
      {
        CFIndex v46 = v45;
        CFIndex v47 = 0;
        while (1)
        {
          CFMutableDictionaryRef v48 = CFArrayGetValueAtIndex(v43, v47);
          CFTypeID TypeID = CFDictionaryGetTypeID();
          if (TypeID != CFGetTypeID(v48))
          {
            CFAllocatorRef v72 = "titles entry is not a dictionary";
            goto LABEL_91;
          }
          CFDictionaryRef v50 = CFDictionaryGetValue((CFDictionaryRef)v48, @"language");
          if (!v50)
          {
            CFAllocatorRef v72 = "Missing language in titles entry";
            goto LABEL_91;
          }
          uint64_t v51 = v50;
          CFTypeID v52 = CFGetTypeID(v50);
          if (v52 != CFStringGetTypeID())
          {
            CFAllocatorRef v72 = "title entry language is not a string";
            goto LABEL_91;
          }
          char v53 = CFDictionaryGetValue((CFDictionaryRef)v48, @"title");
          if (!v53)
          {
            CFAllocatorRef v72 = "Missing title value in titles entry";
            goto LABEL_91;
          }
          CFDictionaryRef v54 = v53;
          CFTypeID v55 = CFGetTypeID(v53);
          if (v55 != CFStringGetTypeID()) {
            break;
          }
          uint64_t v56 = createMetadataItem(@"title", v54, v51, @"comn", &v91);
          if (v56) {
            goto LABEL_92;
          }
          CFMutableDictionaryRef v57 = v91;
          uint64_t v56 = sdpp_AddMetadataItemToChapterDictionary(v18, v91);
          if (v56) {
            goto LABEL_92;
          }
          if (v57)
          {
            CFRelease(v57);
            CFMutableDictionaryRef v91 = 0;
          }
          if (v46 == ++v47)
          {
            uint64_t ErrorLogEntry = 0;
            a3 = v76;
            CFIndex v24 = v82;
            goto LABEL_54;
          }
        }
        CFAllocatorRef v72 = "title value is not a string";
        goto LABEL_91;
      }
    }
LABEL_54:
    CFArrayRef v58 = (const __CFArray *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"images");
    if (v58)
    {
      CFArrayRef v59 = v58;
      CFTypeID v60 = CFGetTypeID(v58);
      CFAllocatorRef v12 = v79;
      if (v60 != CFArrayGetTypeID())
      {
        CFDictionaryRef v71 = "images is not an array";
        goto LABEL_88;
      }
      CFIndex v61 = CFArrayGetCount(v59);
      if (v61 >= 1)
      {
        CFIndex v62 = v61;
        CFIndex v63 = 0;
        while (1)
        {
          CFDictionaryRef v64 = (const __CFDictionary *)CFArrayGetValueAtIndex(v59, v63);
          if (!v64 || (CFDictionaryRef v65 = v64, v66 = CFGetTypeID(v64), v66 != CFDictionaryGetTypeID()))
          {
            CFDictionaryRef v71 = "images entry is not a dictionary";
            goto LABEL_88;
          }
          CFIndex v67 = CFDictionaryGetValue(v65, @"image-category");
          if (!v67)
          {
            CFDictionaryRef v71 = "Missing image-category in images entry";
            goto LABEL_88;
          }
          CMTime v68 = v67;
          CFTypeID v69 = CFGetTypeID(v67);
          if (v69 != CFStringGetTypeID()) {
            break;
          }
          uint64_t v22 = createChapterMetadataArtworkItem(a1, v68, v65, a3, &v92);
          if (v22) {
            goto LABEL_89;
          }
          CFTypeID v70 = v92;
          uint64_t v22 = sdpp_AddMetadataItemToChapterDictionary(v18, v92);
          if (v22) {
            goto LABEL_89;
          }
          if (v70)
          {
            CFRelease(v70);
            CFTypeID v92 = 0;
          }
          if (v62 == ++v63)
          {
            uint64_t ErrorLogEntry = 0;
            CFIndex v24 = v82;
            goto LABEL_69;
          }
        }
        CFDictionaryRef v71 = "image-category is not a string";
        goto LABEL_88;
      }
    }
    else
    {
      CFAllocatorRef v12 = v79;
    }
LABEL_69:
    CFIndex v13 = v24 + 1;
    CFArrayRef v8 = v78;
    if (v13 == v77) {
      goto LABEL_72;
    }
  }
  CFIndex v29 = v28;
  CFIndex v30 = 0;
  while (1)
  {
    CFStringRef v31 = CFArrayGetValueAtIndex(v26, v30);
    CFTypeID v32 = CFGetTypeID(v31);
    if (v32 != CFDictionaryGetTypeID())
    {
      CFAllocatorRef v72 = "metadata-list array element is not a dictionary";
      goto LABEL_91;
    }
    CFTypeID v33 = (void *)CFDictionaryGetValue((CFDictionaryRef)v31, @"key");
    CFTypeID v34 = CFGetTypeID(v33);
    if (v34 != CFStringGetTypeID())
    {
      CFAllocatorRef v72 = "metadata-list key is not a string";
      goto LABEL_91;
    }
    CFTypeID v35 = CFDictionaryGetValue((CFDictionaryRef)v31, @"value");
    if (!v35)
    {
      CFAllocatorRef v72 = "metadata list entry does not have a value";
      goto LABEL_91;
    }
    CFDictionaryRef v36 = v35;
    CFDictionaryRef v37 = CFDictionaryGetValue((CFDictionaryRef)v31, @"language");
    CFIndex v38 = v37;
    if (v37)
    {
      CFTypeID v39 = CFGetTypeID(v37);
      if (v39 != CFStringGetTypeID())
      {
        CFAllocatorRef v72 = "metadata-list language is not a string";
        goto LABEL_91;
      }
    }
    uint64_t v40 = createMetadataItem(v33, v36, v38, @"mdta", &v90);
    CFMutableDictionaryRef v41 = v90;
    if (v40) {
      break;
    }
    uint64_t v40 = sdpp_AddMetadataItemToChapterDictionary(v18, v90);
    if (v40) {
      break;
    }
    if (v41)
    {
      CFRelease(v41);
      CFMutableDictionaryRef v90 = 0;
    }
    if (v29 == ++v30)
    {
      uint64_t ErrorLogEntry = 0;
      a3 = v76;
      CFIndex v24 = v82;
      goto LABEL_39;
    }
  }
  uint64_t ErrorLogEntry = v40;
  CFAllocatorRef v12 = v79;
  if (v41) {
    CFRelease(v41);
  }
LABEL_93:
  if (v91) {
    CFRelease(v91);
  }
  if (v92) {
    CFRelease(v92);
  }
  if (v12) {
    CFRelease(v12);
  }
  return ErrorLogEntry;
}

uint64_t createMetadataItem(void *value, const void *a2, const void *a3, const void *a4, CFMutableDictionaryRef *a5)
{
  CFMutableArrayRef Mutable = *a5;
  if (*a5
    || (CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]), (*a5 = Mutable) != 0))
  {
    CFDictionaryAddValue(Mutable, @"key", value);
    CFDictionaryAddValue(*a5, @"keyspace", a4);
    if (a3) {
      CFDictionaryAddValue(*a5, @"extendedLanguageTag", a3);
    }
    if (a2) {
      CFDictionaryAddValue(*a5, @"value", a2);
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t createChapterMetadataArtworkItem(uint64_t a1, const void *a2, const __CFDictionary *a3, const void *a4, __CFDictionary **a5)
{
  CFMutableDictionaryRef v29 = 0;
  uint64_t v10 = createMetadataItem(@"artwork", 0, 0, @"comn", &v29);
  uint64_t v11 = v29;
  if (v10) {
    BOOL v12 = 1;
  }
  else {
    BOOL v12 = v29 == 0;
  }
  if (v12)
  {
    uint64_t v24 = v10;
    CFMutableDictionaryRef v17 = v29;
    if (!v29) {
      return v24;
    }
    goto LABEL_17;
  }
  CFArrayRef Value = CFDictionaryGetValue(a3, @"url");
  if (!Value)
  {
    CFArrayRef v26 = "missing chapter artwork url";
LABEL_23:
    uint64_t ErrorLogEntry = createErrorLogEntry(a1, v26);
LABEL_25:
    uint64_t v24 = ErrorLogEntry;
    CFMutableDictionaryRef v17 = v11;
    goto LABEL_17;
  }
  double v14 = Value;
  CFTypeID TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(v14))
  {
    CFArrayRef v26 = "Chapter artwork URL is not a string";
    goto LABEL_23;
  }
  CFDictionaryAddValue(v11, @"URL", v14);
  if (a4) {
    CFDictionaryAddValue(v11, @"baseURL", a4);
  }
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!Mutable)
  {
    uint64_t ErrorLogEntry = FigSignalErrorAt();
    goto LABEL_25;
  }
  CFMutableDictionaryRef v17 = Mutable;
  CFDictionaryAddValue(Mutable, @"resolutionKey", a2);
  CFMutableDictionaryRef v18 = CFDictionaryGetValue(a3, @"pixel-height");
  if (v18)
  {
    CFMutableDictionaryRef v19 = v18;
    CFTypeID v20 = CFNumberGetTypeID();
    if (v20 != CFGetTypeID(v19))
    {
      CFIndex v28 = "image height is not a number";
      goto LABEL_28;
    }
    CFDictionaryAddValue(v17, @"pixelHeight", v19);
  }
  int v21 = CFDictionaryGetValue(a3, @"pixel-width");
  if (v21)
  {
    uint64_t v22 = v21;
    CFTypeID v23 = CFNumberGetTypeID();
    if (v23 == CFGetTypeID(v22))
    {
      CFDictionaryAddValue(v17, @"pixelWidth", v22);
      goto LABEL_16;
    }
    CFIndex v28 = "image width is not a number";
LABEL_28:
    uint64_t v24 = createErrorLogEntry(a1, v28);
    CFRelease(v11);
    goto LABEL_17;
  }
LABEL_16:
  CFDictionaryAddValue(v11, @"iTunesImageResolution", v17);
  uint64_t v24 = 0;
  *a5 = v11;
LABEL_17:
  CFRelease(v17);
  return v24;
}

uint64_t FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntry(const void *a1, const void *a2, const __CFURL *a3, uint64_t a4, __CFArray **a5, void *a6, double a7)
{
  if (_os_feature_enabled_impl())
  {
    return FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntryRemote(a7);
  }
  else
  {
    return FigHLSSessionDataCopyChapterMetadataAndCopyErrorLogEntryInProcess(a1, a2, a3, a4, a5, a6, a7);
  }
}

uint64_t FigHLSSessionDataCopyMetadataEntryInProcess(void *a1, const void *a2, const void *a3, CFURLRef url, CFMutableDictionaryRef *a5)
{
  CFMutableDictionaryRef theDict = 0;
  if (!url)
  {
    CFURLRef v10 = 0;
    CFStringRef v11 = 0;
    goto LABEL_5;
  }
  CFURLRef PathComponent = CFURLCreateCopyDeletingLastPathComponent((CFAllocatorRef)*MEMORY[0x1E4F1CF80], url);
  if (PathComponent)
  {
    CFURLRef v10 = PathComponent;
    CFStringRef v11 = CFURLGetString(PathComponent);
LABEL_5:
    uint64_t v12 = createMetadataItem(a1, a2, a3, @"mdta", &theDict);
    if (v12)
    {
      if (theDict) {
        CFRelease(theDict);
      }
    }
    else
    {
      CFMutableDictionaryRef v13 = theDict;
      if (v11) {
        CFDictionarySetValue(theDict, @"baseURL", v11);
      }
      *a5 = v13;
    }
    if (v10) {
      CFRelease(v10);
    }
    return v12;
  }

  return FigSignalErrorAt();
}

uint64_t FigHLSSessionDataCopyMetadataEntry(void *a1, const void *a2, const void *a3, const __CFURL *a4, CFMutableDictionaryRef *a5)
{
  if (_os_feature_enabled_impl())
  {
    return FigHLSSessionDataCopyMetadataEntryRemote();
  }
  else
  {
    return FigHLSSessionDataCopyMetadataEntryInProcess(a1, a2, a3, a4, a5);
  }
}

uint64_t sdpp_AddMetadataItemToChapterDictionary(const __CFDictionary *a1, const void *a2)
{
  CFArrayRef Value = (__CFArray *)CFDictionaryGetValue(a1, @"ChapterMetadataItems");
  if (Value)
  {
    CFArrayAppendValue(Value, a2);
    return 0;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (Mutable)
  {
    uint64_t v6 = Mutable;
    CFDictionarySetValue(a1, @"ChapterMetadataItems", Mutable);
    CFArrayAppendValue(v6, a2);
    CFRelease(v6);
    return 0;
  }

  return FigSignalErrorAt();
}

uint64_t FigNeroidGetClassID()
{
  if (FigNeroidGetClassID_sRegisterFigNeroidTypeOnce != -1) {
    dispatch_once(&FigNeroidGetClassID_sRegisterFigNeroidTypeOnce, &__block_literal_global_53);
  }
  return FigNeroidGetClassID_sFigNeroidClassID;
}

CFStringRef neroid_CopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"<FigNeroid %p>", a1);
}

uint64_t __FigNeroidGetClassID_block_invoke()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigNeroidGetTypeID()
{
  if (FigNeroidGetClassID_sRegisterFigNeroidTypeOnce != -1) {
    dispatch_once(&FigNeroidGetClassID_sRegisterFigNeroidTypeOnce, &__block_literal_global_53);
  }

  return CMBaseClassGetCFTypeID();
}

uint64_t FigDCP_FindAtomData(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5)
{
  if (a4 | a5)
  {
    uint64_t result = FigAtomStreamInitWithByteStream();
    if (result) {
      return result;
    }
    while (1)
    {
      uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if (result) {
        return result;
      }
      if (!a3) {
        break;
      }
      LODWORD(result) = FigAtomStreamAdvanceToNextAtom();
      if (result)
      {
        if (result == -12890) {
          return 0;
        }
        else {
          return result;
        }
      }
    }
    if (a4)
    {
      uint64_t result = FigAtomStreamGetCurrentAtomDataGlobalOffset();
      if (!a5 || result) {
        return result;
      }
    }
    else if (!a5)
    {
      return 0;
    }
    uint64_t result = 0;
    *(void *)a5 = 0;
    return result;
  }

  return FigSignalErrorAt();
}

uint64_t FigDCP_CopyAtomDataFromCacheFile(uint64_t a1, uint64_t a2, int a3, __CFData **a4)
{
  CFIndex capacity = 0;
  uint64_t v18 = 0;
  uint64_t AtomData = FigDCP_FindAtomData(a1, a2, a3, (uint64_t)&v18, (unint64_t)&capacity);
  if (AtomData) {
    return AtomData;
  }
  CFMutableArrayRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], capacity);
  if (!Mutable) {
    return FigSignalErrorAt();
  }
  CFArrayRef v8 = Mutable;
  CFDataSetLength(Mutable, capacity);
  CFIndex v9 = capacity;
  uint64_t v10 = v18;
  MutableBytePtr = CFDataGetMutableBytePtr(v8);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  double v14 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t, UInt8 *, void))(v13 + 8);
  if (!v14)
  {
    uint64_t v15 = 4294954514;
    goto LABEL_10;
  }
  uint64_t v15 = v14(a1, v9, v10, MutableBytePtr, 0);
  if (v15)
  {
LABEL_10:
    CFRelease(v8);
    return v15;
  }
  *a4 = v8;
  return v15;
}

uint64_t FigDCP_CopyIDFromCacheFile(uint64_t a1, uint64_t a2, void *a3)
{
  CFDataRef data = 0;
  uint64_t v4 = FigDCP_CopyAtomDataFromCacheFile(a1, a2, 1937008996, &data);
  if (v4) {
    return v4;
  }
  CFDataRef v5 = data;
  CFPropertyListRef v6 = CFPropertyListCreateWithData((CFAllocatorRef)*MEMORY[0x1E4F1CF80], data, 0, 0, 0);
  *a3 = v6;
  if (v6)
  {
    uint64_t v7 = 0;
    if (!v5) {
      return v7;
    }
    goto LABEL_6;
  }
  uint64_t v7 = FigSignalErrorAt();
  if (v5) {
LABEL_6:
  }
    CFRelease(v5);
  return v7;
}

uint64_t FigDCP_GetCacheFileVersion(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unsigned int v10 = 0;
  uint64_t result = FigDCP_FindAtomData(a1, a2, 1986359930, (uint64_t)&v12, (unint64_t)&v11);
  if (!result)
  {
    if (v11 == 4)
    {
      uint64_t v6 = v12;
      uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v7) {
        uint64_t v8 = v7;
      }
      else {
        uint64_t v8 = 0;
      }
      CFIndex v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, void))(v8 + 8);
      if (v9)
      {
        uint64_t result = v9(a1, 4, v6, &v10, 0);
        if (a3)
        {
          if (!result) {
            *a3 = bswap32(v10);
          }
        }
      }
      else
      {
        return 4294954514;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t FigDCP_TruncateFile(uint64_t a1, off_t a2)
{
  int DarwinFileDesc = FigFileGetDarwinFileDesc();
  uint64_t result = ftruncate(DarwinFileDesc, a2);
  if (result)
  {
    __error();
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigLimitedDiskCacheProviderCreate(uint64_t a1, const void *a2, const void *a3, int a4, void *a5)
{
  if (a2 && a5)
  {
    *a5 = 0;
    FigDiskCacheProviderGetClassID();
    uint64_t v9 = CMDerivedObjectCreate();
    if (!v9)
    {
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      DerivedStorage[7] = 0x100000;
      void *DerivedStorage = CFRetain(a2);
      if (a3)
      {
        CFURLRef v11 = (const __CFURL *)CFRetain(a3);
        DerivedStorage[2] = v11;
        if (v11)
        {
          CFStringRef v12 = CFURLGetString(v11);
          DerivedStorage[1] = CFRetain(v12);
        }
      }
      else
      {
        DerivedStorage[2] = 0;
      }
      DerivedStorage[9] = 0x200000000002;
      if (!a4) {
        FigDCP_InitializeDiskCache();
      }
      uint64_t v9 = 0;
      *a5 = 0;
    }
    return v9;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigDCP_InitializeDiskCache()
{
  uint64_t v0 = MEMORY[0x1F4188790]();
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  CFTypeRef v26 = 0;
  uint64_t v2 = (void *)(v0 + 40);
  if (*(void *)(v0 + 40))
  {
LABEL_70:
    CacheFileuint64_t Version = 0;
    goto LABEL_67;
  }
  int v3 = v1;
  uint64_t v4 = v0;
  *(unsigned char *)(v0 + 90) = 1;
  uint64_t v5 = FigShared_CopyDiskCacheParams(*(const __CFString **)(v0 + 8), 0, 0, 0, 0, &v26);
  if (v5) {
    goto LABEL_71;
  }
  uint64_t v7 = (CFTypeRef *)(v4 + 32);
  uint64_t v6 = *(const void **)(v4 + 32);
  if (v6)
  {
    CFRelease(v6);
    CFTypeRef *v7 = 0;
  }
  uint64_t v8 = FigShared_CheckOutOfDiskCache(*(const __CFString **)(v4 + 8), *(const void **)v4, (CFTypeRef *)(v4 + 32), &cf);
  CacheFileuint64_t Version = v8;
  if (v3 || !v8)
  {
    if (v8) {
      goto LABEL_25;
    }
    CacheFileuint64_t Version = FigFileForkOpenMainByCFURL();
    if (CacheFileVersion) {
      goto LABEL_25;
    }
    CacheFileuint64_t Version = FigByteStreamCreateFromOpenFile();
    if (CacheFileVersion) {
      goto LABEL_25;
    }
    CacheFileuint64_t Version = FigDCP_GetCacheFileVersion(*(void *)(v4 + 48), 0, (_DWORD *)(v4 + 72));
    if (CacheFileVersion) {
      goto LABEL_25;
    }
    int v10 = *(_DWORD *)(v4 + 72);
    if (v10 == 1)
    {
      int v11 = 4096;
    }
    else
    {
      if (v10 != 2)
      {
        CacheFileuint64_t Version = FigSignalErrorAt();
        if (CacheFileVersion) {
          goto LABEL_25;
        }
        goto LABEL_16;
      }
      int v11 = 0x2000;
    }
    *(_DWORD *)(v4 + 76) = v11;
LABEL_16:
    CacheFileuint64_t Version = FigDCP_CopyIDFromCacheFile(*(void *)(v4 + 48), 0, (void *)(v4 + 64));
    if (!CacheFileVersion)
    {
      CacheFileuint64_t Version = FigDCP_FindAtomData(*(void *)(v4 + 48), 0, 1937007475, 0, v4 + 24);
      if (!CacheFileVersion)
      {
        CFStringRef v12 = *(const void **)v4;
        CFTypeRef v13 = cf;
        *(void *)uint64_t v4 = cf;
        if (v13) {
          CFRetain(v13);
        }
        if (v12) {
          CFRelease(v12);
        }
        if (!cf)
        {
          CacheFileuint64_t Version = 0;
          goto LABEL_35;
        }
        CFRelease(cf);
        CacheFileuint64_t Version = 0;
LABEL_34:
        CFTypeRef cf = 0;
LABEL_35:
        if (*(void *)(v4 + 64)) {
          goto LABEL_67;
        }
        bzero(v27, 0x2000uLL);
        *(void *)(v4 + 72) = 0x200000000002;
        if (*(void *)(v4 + 40))
        {
          if (*(void *)(v4 + 48))
          {
            CFRelease(*(CFTypeRef *)(v4 + 48));
            *(void *)(v4 + 48) = 0;
          }
          FigFileForkClose();
          *uint64_t v2 = 0;
        }
LABEL_40:
        if (*v7)
        {
          CFRelease(*v7);
          CFTypeRef *v7 = 0;
        }
        CacheFileuint64_t Version = FigDCP_NewDiskCacheFile((const __CFURL *)v26, *(unsigned __int8 *)(v4 + 90), (CFURLRef *)(v4 + 32));
        while (CacheFileVersion)
        {
          if (CacheFileVersion != 69 && CacheFileVersion != 28) {
            goto LABEL_67;
          }
          int64_t v24 = 0;
          if (FigShared_MakeRoomInDiskCache(*(const __CFString **)(v4 + 8), 0, &v24)) {
            BOOL v15 = 1;
          }
          else {
            BOOL v15 = v24 < 1;
          }
          if (!v15) {
            goto LABEL_40;
          }
          if (!v24) {
            goto LABEL_67;
          }
        }
        uint64_t v5 = FigByteStreamCreateFromOpenFile();
        if (!v5)
        {
          uint64_t v16 = *(void *)(v4 + 48);
          uint64_t v17 = *(int *)(v4 + 76);
          uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v18) {
            uint64_t v19 = v18;
          }
          else {
            uint64_t v19 = 0;
          }
          CFTypeID v20 = *(uint64_t (**)(uint64_t, uint64_t, void, unsigned char *, void))(v19 + 16);
          if (!v20)
          {
            CacheFileuint64_t Version = 4294954514;
            goto LABEL_67;
          }
          uint64_t v5 = v20(v16, v17, 0, v27, 0);
          if (!v5)
          {
            uint64_t v5 = FigShared_CheckIntoAndOutOfDiskCache(*(const __CFString **)(v4 + 8), *(const __CFString **)v4, *(const void **)(v4 + 32), &cf);
            if (!v5)
            {
              int v21 = *(const void **)v4;
              CFTypeRef v22 = cf;
              *(void *)uint64_t v4 = cf;
              if (v22) {
                CFRetain(v22);
              }
              if (v21) {
                CFRelease(v21);
              }
              if (cf)
              {
                CFRelease(cf);
                CacheFileuint64_t Version = 0;
                CFTypeRef cf = 0;
                goto LABEL_67;
              }
              goto LABEL_70;
            }
          }
        }
LABEL_71:
        CacheFileuint64_t Version = v5;
        goto LABEL_67;
      }
    }
LABEL_25:
    if (*v7 && cf) {
      FigShared_CheckIntoDiskCache(*(const __CFString **)(v4 + 8), (const __CFString *)cf, *v7);
    }
    double v14 = *(const void **)(v4 + 64);
    if (v14)
    {
      CFRelease(v14);
      *(void *)(v4 + 64) = 0;
    }
    if (*v7)
    {
      CFRelease(*v7);
      CFTypeRef *v7 = 0;
    }
    if (!cf) {
      goto LABEL_35;
    }
    CFRelease(cf);
    goto LABEL_34;
  }
LABEL_67:
  if (v26) {
    CFRelease(v26);
  }
  return CacheFileVersion;
}

uint64_t FigLimitedDiskCacheProvider_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 88)) {
    return 0;
  }
  uint64_t v2 = DerivedStorage;
  *(unsigned char *)(DerivedStorage + 88) = 1;
  if (!*(void *)(DerivedStorage + 40)) {
    return 0;
  }
  if (*(unsigned char *)(DerivedStorage + 91))
  {
    FigFileForkClose();
    *(void *)(v2 + 40) = 0;
    FigFileDeleteFile();
    CFStringRef v4 = *(const __CFString **)v2;
    CFStringRef v3 = *(const __CFString **)(v2 + 8);
    return FigShared_DeleteFromDiskCache(v3, v4);
  }
  else
  {
    uint64_t v5 = FigShared_CheckIntoDiskCache(*(const __CFString **)(DerivedStorage + 8), *(const __CFString **)DerivedStorage, *(const void **)(DerivedStorage + 32));
    FigFileForkClose();
    *(void *)(v2 + 40) = 0;
    return v5;
  }
}

void FigLimitedDiskCacheProvider_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t))(v4 + 24);
    if (v5) {
      v5(a1);
    }
  }
  uint64_t v6 = *(const void **)(DerivedStorage + 32);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 32) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 8);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 16);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 64);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 64) = 0;
  }
  int v10 = *(const void **)(DerivedStorage + 48);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 48) = 0;
  }
}

__CFString *FigLimitedDiskCacheProvider_CopyDebugDescription()
{
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 88)) {
    uint64_t v2 = "No";
  }
  else {
    uint64_t v2 = "Yes";
  }
  CFStringAppendFormat(Mutable, 0, @"FigLimitedDiskCacheProvider <%p>\n\tValid: <%s>\n\tcacheFileKey: <%@>\n\tcacheFolder: <%@>\n\tcacheFileURL: <%@>", DerivedStorage, v2, *(void *)DerivedStorage, *(void *)(DerivedStorage + 8), *(void *)(DerivedStorage + 32));
  return Mutable;
}

uint64_t FigLimitedDiskCacheProvider_CopyProperty(const void *a1, const void *a2, uint64_t a3, __CFData **a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v8 = DerivedStorage;
    if (CFEqual(a2, @"CacheIdentifier"))
    {
      CFGetAllocator(a1);
      FigDCP_InitializeDiskCache();
      uint64_t v9 = *(const void **)(v8 + 64);
      if (v9)
      {
        int v10 = (__CFData *)CFRetain(v9);
LABEL_13:
        uint64_t v17 = v10;
        uint64_t result = 0;
        *a4 = v17;
        return result;
      }
      return 4294954513;
    }
    if (CFEqual(a2, @"CacheBlockSize"))
    {
      int v12 = *(_DWORD *)(v8 + 80);
      int v11 = (int64_t *)(v8 + 80);
      if (!v12) {
        return 4294954513;
      }
LABEL_11:
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberType v15 = kCFNumberSInt32Type;
      uint64_t v16 = v11;
      goto LABEL_12;
    }
    if (CFEqual(a2, @"CacheMapEntrySize"))
    {
      int v13 = *(_DWORD *)(v8 + 84);
      int v11 = (int64_t *)(v8 + 84);
      if (!v13) {
        return 4294954513;
      }
      goto LABEL_11;
    }
    if (!CFEqual(a2, @"CacheMap"))
    {
      if (!CFEqual(a2, @"CacheSize")) {
        return 4294954512;
      }
      int64_t v20 = 0;
      if (FigDCP_GetCacheSizeLimit(v8, &v20)) {
        return 4294954513;
      }
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      uint64_t v16 = &v20;
      CFNumberType v15 = kCFNumberSInt64Type;
LABEL_12:
      int v10 = CFNumberCreate(v14, v15, v16);
      goto LABEL_13;
    }
    CFGetAllocator(a1);
    int v19 = FigDCP_InitializeDiskCache();
    if (!v19) {
      int v19 = FigDCP_CopyAtomDataFromCacheFile(*(void *)(v8 + 48), 0, 1937011572, a4);
    }
    if (v19) {
      return 4294954513;
    }
    else {
      return 0;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigLimitedDiskCacheProvider_SetProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    goto LABEL_47;
  }
  uint64_t v7 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 88)) {
    goto LABEL_47;
  }
  if (CFEqual(a2, @"CacheIdentifier"))
  {
    CFGetAllocator(a1);
    uint64_t result = FigDCP_InitializeDiskCache();
    if (result) {
      return result;
    }
    if (*(void *)(v7 + 40))
    {
      uint64_t v9 = *(const void **)(v7 + 64);
      if (v9) {
        CFRelease(v9);
      }
      if (a3) {
        CFTypeRef v10 = CFRetain(a3);
      }
      else {
        CFTypeRef v10 = 0;
      }
      uint64_t result = 0;
      *(void *)(v7 + 64) = v10;
      return result;
    }
    goto LABEL_47;
  }
  if (CFEqual(a2, @"CacheMap"))
  {
    CFGetAllocator(a1);
    uint64_t result = FigDCP_InitializeDiskCache();
    if (result) {
      return result;
    }
    uint64_t v11 = *(void *)(v7 + 40);
    if (!v11) {
      goto LABEL_47;
    }
    if (!a3)
    {
LABEL_70:
      uint64_t result = FigDCP_TruncateFile(v11, 0);
      *(void *)(v7 + 24) = 0;
      return result;
    }
    CFTypeID v12 = CFGetTypeID(a3);
    if (v12 != CFDataGetTypeID()) {
      goto LABEL_47;
    }
    uint64_t v52 = 0;
    CFTypeRef cf = 0;
    unsigned int v13 = bswap32(*(_DWORD *)(v7 + 72));
    uint64_t v50 = 0;
    unint64_t v51 = 0;
    unsigned int v49 = v13;
    uint64_t v14 = *(void *)(v7 + 24);
    CFErrorRef err = 0;
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v16 = FigByteStreamCreateFromOpenFile();
    if (v16) {
      goto LABEL_80;
    }
    unint64_t v17 = v14 - 4294967288;
    if (v17 >= 0xFFFFFFFF00000000) {
      int v18 = -8;
    }
    else {
      int v18 = -16;
    }
    uint64_t v52 = bswap32(*(_DWORD *)(v7 + 76) + v18) | 0x6965726600000000;
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    int64_t v24 = *(uint64_t (**)(CFTypeRef, uint64_t, void, uint64_t *, void))(v20 + 16);
    if (v24)
    {
      int v16 = v24(cf, 8, 0, &v52, 0);
      if (v16) {
        goto LABEL_80;
      }
      if (v17 > 0xFFFFFFFEFFFFFFFFLL)
      {
        uint64_t v52 = bswap32(*(_DWORD *)(v7 + 24) + 8) | 0x7363747300000000;
        CFTypeRef v29 = cf;
        uint64_t v30 = *(int *)(v7 + 76);
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v31) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        CFTypeID v35 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t *, void))(v32 + 16);
        if (v35)
        {
          uint64_t v36 = v30 - 8;
          CFDictionaryRef v37 = &v52;
          CFTypeRef v38 = v29;
          uint64_t v39 = 8;
LABEL_56:
          int Code = v35(v38, v39, v36, v37, 0);
          if (Code) {
            goto LABEL_64;
          }
          int v16 = FigDCP_TruncateFile(*(void *)(v7 + 40), *(void *)(v7 + 24) + *(int *)(v7 + 76));
          if (!v16)
          {
            CFDataRef v41 = CFPropertyListCreateData(v15, *(CFPropertyListRef *)(v7 + 64), kCFPropertyListXMLFormat_v1_0, 0, &err);
            if (err)
            {
              CFStringRef v42 = CFErrorCopyFailureReason(err);
              int Code = CFErrorGetCode(err);
              if (v42) {
                CFRelease(v42);
              }
              if (!v41)
              {
LABEL_64:
                if (cf) {
                  CFRelease(cf);
                }
                if (err) {
                  CFRelease(err);
                }
                if (Code)
                {
                  uint64_t v11 = *(void *)(v7 + 40);
                  goto LABEL_70;
                }
                return 0;
              }
LABEL_77:
              CFRelease(v41);
              goto LABEL_64;
            }
            if (v41)
            {
              HIDWORD(v52) = 1684632691;
              LODWORD(v52) = CFDataGetLength(v41) + 8;
              CFTypeRef v43 = cf;
              BytePtr = CFDataGetBytePtr(v41);
              int v45 = FigDCP_WriteAtomToFile((uint64_t)v43, &v52, (uint64_t)BytePtr);
              if (!v45)
              {
                HIDWORD(v52) = 1953723507;
                LODWORD(v52) = CFDataGetLength((CFDataRef)a3) + 8;
                CFTypeRef v46 = cf;
                CFIndex v47 = CFDataGetBytePtr((CFDataRef)a3);
                int v45 = FigDCP_WriteAtomToFile((uint64_t)v46, &v52, (uint64_t)v47);
                if (!v45)
                {
                  uint64_t v52 = 0x7A7265760000000CLL;
                  int v45 = FigDCP_WriteAtomToFile((uint64_t)cf, &v52, (uint64_t)&v49);
                }
              }
              int Code = v45;
              goto LABEL_77;
            }
            int v16 = FigSignalErrorAt();
          }
LABEL_80:
          int Code = v16;
          goto LABEL_64;
        }
      }
      else
      {
        uint64_t v50 = 0x7363747301000000;
        unint64_t v51 = bswap64(*(void *)(v7 + 24) + 16);
        CFTypeRef v25 = cf;
        uint64_t v26 = *(int *)(v7 + 76);
        uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v27) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = 0;
        }
        CFTypeID v35 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t *, void))(v28 + 16);
        if (v35)
        {
          uint64_t v36 = v26 - 16;
          CFDictionaryRef v37 = &v50;
          CFTypeRef v38 = v25;
          uint64_t v39 = 16;
          goto LABEL_56;
        }
      }
    }
    int Code = -12782;
    goto LABEL_64;
  }
  if (CFEqual(a2, @"CacheBlockSize"))
  {
    if (!a3) {
      goto LABEL_47;
    }
    CFTypeID v21 = CFGetTypeID(a3);
    if (v21 != CFNumberGetTypeID()) {
      goto LABEL_47;
    }
    CFTypeRef v22 = (void *)(v7 + 80);
    goto LABEL_32;
  }
  if (!CFEqual(a2, @"CacheMapEntrySize"))
  {
    if (CFEqual(a2, @"CacheSize")) {
      return 4294954509;
    }
    if (!CFEqual(a2, @"NoPersistentCache")) {
      return 4294954512;
    }
    if (a3)
    {
      CFTypeID v33 = CFGetTypeID(a3);
      if (v33 == CFBooleanGetTypeID())
      {
        Boolean Value = CFBooleanGetValue((CFBooleanRef)a3);
        uint64_t result = 0;
        *(unsigned char *)(v7 + 91) = Value;
        return result;
      }
    }
    goto LABEL_47;
  }
  if (a3)
  {
    CFTypeID v23 = CFGetTypeID(a3);
    if (v23 == CFNumberGetTypeID())
    {
      CFTypeRef v22 = (void *)(v7 + 84);
LABEL_32:
      CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, v22);
      return 0;
    }
  }
LABEL_47:

  return FigSignalErrorAt();
}

uint64_t FigDCP_GetCacheSizeLimit(uint64_t a1, int64_t *a2)
{
  int64_t v18 = 0;
  int64_t v16 = 0;
  int64_t v17 = 0;
  int64_t v14 = 0;
  int64_t v15 = 0;
  BOOL v13 = 0;
  CFArrayRef theArray = 0;
  if (a2)
  {
    uint64_t CacheFileSize = FigShared_CopyDiskCacheParams(*(const __CFString **)(a1 + 8), &v18, &v17, &v16, &v13, 0);
    if (CacheFileSize) {
      return CacheFileSize;
    }
    uint64_t CacheFileSize = FigShared_GetCacheFileSize(*(const __CFString **)(a1 + 8), *(void *)a1, &v14);
    if (CacheFileSize) {
      return CacheFileSize;
    }
    uint64_t v5 = FigShared_CopyDiskCacheCheckedInIDs(*(const __CFString **)(a1 + 8), &theArray);
    CFArrayRef v6 = theArray;
    if (!v5)
    {
      if (theArray && CFArrayGetCount(theArray) >= 1)
      {
        CFIndex v7 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v7);
          if (!FigShared_GetCacheFileSize(*(const __CFString **)(a1 + 8), (uint64_t)ValueAtIndex, &v15)) {
            v18 -= v15;
          }
          ++v7;
        }
        while (v7 < CFArrayGetCount(theArray));
      }
      int64_t v9 = v18;
      if (v18 < 0)
      {
        int64_t v9 = 0;
        int64_t v18 = 0;
      }
      uint64_t v5 = 0;
      int64_t v10 = ((v17 - v9) & ~((v17 - v9) >> 63)) + v14;
      if (v10 >= v16) {
        int64_t v10 = v16;
      }
      *a2 = v10;
      CFArrayRef v6 = theArray;
    }
    if (v6) {
      CFRelease(v6);
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigDCP_WriteAtomToFile(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v29 = 0;
  while (1)
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    int64_t v9 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(v8 + 8);
    if (!v9 || v9(a1, 8, v6, &v29, 0)) {
      goto LABEL_27;
    }
    int v10 = v29;
    unint64_t v11 = bswap32(v29);
    LODWORD(v29) = v11;
    if (v10 != 0x1000000 && v11 <= 7) {
      return FigSignalErrorAt();
    }
    if (HIDWORD(v29) != 1768256102) {
      break;
    }
    uint64_t v12 = *a2;
    if (v11 == v12) {
      goto LABEL_27;
    }
    if (v12 + 8 <= v11)
    {
      unsigned int v17 = v11 - v12;
      LODWORD(v29) = bswap32(v11 - v12);
      uint64_t VTable = CMBaseObjectGetVTable();
      if (*(void *)(VTable + 16)) {
        uint64_t v19 = *(void *)(VTable + 16);
      }
      else {
        uint64_t v19 = 0;
      }
      uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(v19 + 16);
      if (v20)
      {
        uint64_t result = v20(a1, 8, v6, &v29, 0);
        if (result) {
          return result;
        }
        v6 += v17;
LABEL_27:
        uint64_t v21 = *a2;
        *a2 = bswap32(v21);
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        int64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, _DWORD *, void))(v23 + 16);
        if (v24)
        {
          uint64_t result = v24(a1, 8, v6, a2, 0);
          if (result) {
            return result;
          }
          uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
          uint64_t v26 = v25 ? v25 : 0;
          uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v26 + 16);
          if (v27) {
            return v27(a1, v21 - 8, v6 + 8, a3, 0);
          }
        }
      }
      return 4294954514;
    }
LABEL_20:
    v6 += v11;
  }
  if (v10 != 0x1000000) {
    goto LABEL_20;
  }
  unint64_t v28 = 0;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  int64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, void))(v14 + 8);
  if (!v15) {
    return 4294954514;
  }
  uint64_t result = v15(a1, 8, v6 + 8, &v28, 0);
  if (result) {
    return result;
  }
  unint64_t v11 = bswap64(v28);
  unint64_t v28 = v11;
  if (v11 > 0xF) {
    goto LABEL_20;
  }
  return FigSignalErrorAt();
}

uint64_t FigLimitedDiskCacheProvider_GetBacking(const void *a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 88) || !(a4 | a5))
  {
    FigSignalErrorAt();
    return 0;
  }
  uint64_t v10 = DerivedStorage;
  CFGetAllocator(a1);
  if (FigDCP_InitializeDiskCache() || !*(void *)(v10 + 40) || *(unsigned char *)(v10 + 89)) {
    return 0;
  }
  uint64_t v11 = *(void *)(v10 + 24) + a2;
  unint64_t v12 = *(int *)(v10 + 80);
  int64_t v13 = v11 + *(int *)(v10 + 76);
  if (v12)
  {
    uint64_t v14 = *(int *)(v10 + 84);
    if (v14) {
      v13 += (v11 + v12 - 1) / v12 * v14;
    }
  }
  if (FigShared_ReserveDiskCacheBacking(*(const __CFString **)(v10 + 8), *(const void **)v10, v13)) {
    return 0;
  }
  off_t v16 = *(void *)(v10 + 56);
  uint64_t v17 = *(void *)(v10 + 24) + a2;
  off_t v18 = v17 + *(int *)(v10 + 76);
  off_t v19 = v16 - 0x100000;
  unint64_t v20 = (v17 + *(int *)(v10 + 80) - 1) / (unint64_t)*(int *)(v10 + 80);
  do
  {
    uint64_t v21 = *(int *)(v10 + 84);
    off_t v22 = v18;
    if (v21) {
      off_t v22 = v18 + v20 * v21;
    }
    v19 += 0x100000;
  }
  while (v22 > v19);
  if (v19 > v16)
  {
    *(void *)(v10 + 56) = v19;
    int v23 = FigDCP_TruncateFile(*(void *)(v10 + 40), v19);
    if (v23 == 69 || v23 == 28)
    {
      uint64_t result = 0;
      *(unsigned char *)(v10 + 89) = 1;
      return result;
    }
    if (v23) {
      return 0;
    }
  }
  if (a4) {
    *(void *)a4 = *(void *)(v10 + 40);
  }
  uint64_t v25 = *(void *)(v10 + 24);
  if (a5)
  {
    *(void *)a5 = v25 + *(int *)(v10 + 76);
    uint64_t v25 = *(void *)(v10 + 24);
  }
  *(void *)(v10 + 24) = v25 + a2;
  return 1;
}

uint64_t FigLimitedDiskCacheProvider_GetBackingFile(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFGetAllocator(a1);
  FigDCP_InitializeDiskCache();
  return *(void *)(DerivedStorage + 40);
}

uint64_t FigDCP_NewDiskCacheFile(const __CFURL *a1, uint64_t a2, CFURLRef *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
  {
    __strlcat_chk();
    int v4 = mkstemp((char *)buffer);
    if (v4 == -1)
    {
      __error();
    }
    else
    {
      close(v4);
      size_t v5 = strlen((const char *)buffer);
      CFURLRef v6 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], buffer, v5, 0);
      *a3 = v6;
      if (v6) {
        return FigFileForkOpenMainByCFURL();
      }
    }
  }
  return FigSignalErrorAt();
}

uint64_t FigPhotoDecompressionSessionGetTypeID()
{
  return MEMORY[0x1F410D988]();
}

uint64_t FigPhotoDecompressionSessionCreate()
{
  return MEMORY[0x1F410D960]();
}

uint64_t FigPhotoDecompressionSessionCreateContainer()
{
  return MEMORY[0x1F410D968]();
}

uint64_t FigPhotoDecompressionSessionReserveRequestID()
{
  return MEMORY[0x1F410D998]();
}

uint64_t FigPhotoDecompressionSetAsyncPreDecodeCallback()
{
  return MEMORY[0x1F410D9A8]();
}

uint64_t FigPhotoDecompressionSessionDetachSurface()
{
  return MEMORY[0x1F410D970]();
}

uint64_t FigPhotoDecompressionSessionDiscardCachedBuffers()
{
  return MEMORY[0x1F410D978]();
}

uint64_t FigPhotoDecompressionSessionReleaseHardwareResources()
{
  return MEMORY[0x1F410D990]();
}

uint64_t FigPhotoDecompressionSessionSupportsCodec()
{
  return MEMORY[0x1F410D9A0]();
}

uint64_t FigVTTStyleGetStyleName(uint64_t a1)
{
  if (a1) {
    return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
  }
  FigSignalErrorAt();
  return 0;
}

uint64_t FigVTTStyleCreate(uint64_t a1, const void *a2, void *a3)
{
  if (a3)
  {
    FigVTTNodeGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v7 = FigVTTInitializeNodeBaseStorage((CFMutableDictionaryRef *)DerivedStorage);
      if (v7)
      {
        return v7;
      }
      else
      {
        if (a2) {
          CFTypeRef v8 = CFRetain(a2);
        }
        else {
          CFTypeRef v8 = 0;
        }
        uint64_t v5 = 0;
        *(void *)(DerivedStorage + 16) = v8;
        *a3 = 0;
      }
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figVTTStyle_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();

  FigVTTReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figVTTStyle_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"style: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figVTTStyle_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 6;
  return 0;
}

uint64_t figVTTStyle_copyNodeDocumentSerialization(const void *a1, CFStringRef *a2)
{
  CFDictionaryRef theDict = 0;
  if (a2)
  {
    *a2 = 0;
    MEMORY[0x19970EE10](&getCaptionVTTAttributeToCSSPropertyMapping_once, initCaptionVTTAttributeToCSSPropertyMapping);
    uint64_t v4 = sCaptionVTTAttributeToCSSPropertyMapping;
    if (sCaptionVTTAttributeToCSSPropertyMapping)
    {
      uint64_t v5 = FigVTTNodeCopyAttributes((uint64_t)a1, &theDict);
      if (!v5)
      {
        CFAllocatorRef v6 = CFGetAllocator(a1);
        CFMutableStringRef Mutable = CFStringCreateMutable(v6, 0);
        CFMutableStringRef v8 = Mutable;
        if (Mutable)
        {
          context[1] = Mutable;
          uint64_t v13 = 0;
          context[0] = v4;
          CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)serializeOneAttributeToCSSProperty, context);
          uint64_t v9 = (__int16)v13;
          if ((_WORD)v13)
          {
LABEL_8:
            if (theDict) {
              CFRelease(theDict);
            }
            if (v8) {
              CFRelease(v8);
            }
            return v9;
          }
          uint64_t StyleName = FigVTTStyleGetStyleName((uint64_t)a1);
          if (StyleName)
          {
            uint64_t v9 = 0;
            *a2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @".%@ {\n%@}", StyleName, v8);
            goto LABEL_8;
          }
        }
        uint64_t v9 = FigSignalErrorAt();
        goto LABEL_8;
      }
    }
    else
    {
      uint64_t v5 = FigSignalErrorAt();
    }
    uint64_t v9 = v5;
    CFMutableStringRef v8 = 0;
    goto LABEL_8;
  }

  return FigSignalErrorAt();
}

void serializeOneAttributeToCSSProperty(void *key, uint64_t a2, uint64_t a3)
{
  if (*(_WORD *)(a3 + 16) || !*(void *)a3) {
    return;
  }
  Boolean Value = (uint64_t (*)(uint64_t, const __CFDictionary *))CFDictionaryGetValue(*(CFDictionaryRef *)a3, key);
  if (!Value)
  {
    CFDictionaryRef Mutable = 0;
    goto LABEL_16;
  }
  CFAllocatorRef v6 = Value;
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  if (!Mutable) {
    goto LABEL_16;
  }
  int v8 = v6(a2, Mutable);
  if (v8)
  {
LABEL_17:
    *(_WORD *)(a3 + 16) = v8;
LABEL_18:
    if (!Mutable) {
      return;
    }
    goto LABEL_11;
  }
  uint64_t v9 = CFDictionaryGetValue(Mutable, @"name");
  uint64_t v10 = CFDictionaryGetValue(Mutable, @"value");
  if (!v9 || v10 == 0)
  {
LABEL_16:
    int v8 = FigSignalErrorAt();
    if (!v8) {
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  CFStringAppendFormat(*(CFMutableStringRef *)(a3 + 8), 0, @"%@:%@;\n", v9, v10);
LABEL_11:

  CFRelease(Mutable);
}

void initCaptionVTTAttributeToCSSPropertyMapping()
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ background-color", FigVTTDocumentWriterMapAttributeToCSS_BackgroundColor);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ writing-mode", FigVTTDocumentWriterMapAttributeToCSS_WritingMode);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ color", FigVTTDocumentWriterMapAttributeToCSS_TextColor);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ font-weight", FigVTTDocumentWriterMapAttributeToCSS_FontWeight);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ font-style", FigVTTDocumentWriterMapAttributeToCSS_FontStyle);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ text-decoration", FigVTTDocumentWriterMapAttributeToCSS_Decoration);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ text-align", FigVTTDocumentWriterMapAttributeToCSS_TextAlign);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ font-family", FigVTTDocumentWriterMapAttributeToCSS_FontFamily);
  CFDictionaryAddValue(Mutable, @"https://www.w3.org/Style/CSS/ font-size", FigVTTDocumentWriterMapAttributeToCSS_FontSize);
  sCaptionVTTAttributeToCSSPropertyMapping = (uint64_t)Mutable;
}

uint64_t FigFullDownloadDiskCacheProviderCreate(uint64_t a1, const void *a2, const void *a3, CFTypeRef *a4)
{
  CFTypeRef v21 = 0;
  CFTypeRef cf = 0;
  uint64_t value = 0;
  MEMORY[0x19970EE10](&FigFullDownloadDiskCacheProviderCreate_sCreateBusyCacheFileMappingOnce, FigDCP_SetupBusyCacheFileMapping);
  if (!gFigFDCPBusyCacheFileToCacheMapDict
    || !gFigFDCPBusyCacheFileToCacheIDDict
    || !gFigFDCPBusyCacheFileMutex
    || !a2
    || !a3
    || !a4)
  {
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_53;
  }
  FigDiskCacheProviderGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7)
  {
LABEL_53:
    uint64_t v9 = v7;
    goto LABEL_46;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)uint64_t DerivedStorage = CFRetain(a2);
  *(void *)(DerivedStorage + 8) = CFRetain(a3);
  if (FigFileDoesFileExist() && FigFileForkOpenMainByCFURL())
  {
    uint64_t v9 = 4294954754;
  }
  else
  {
    uint64_t v10 = (uint64_t *)(DerivedStorage + 24);
    if (*(void *)(DerivedStorage + 24))
    {
      int DarwinFileDesc = FigFileGetDarwinFileDesc();
      if (fgetxattr(DarwinFileDesc, "com.apple.coremedia.cachemap.offset", 0, 0, 0, 0) == -1)
      {
        if (!FigDCP_IsFileEmpty(*v10, 0))
        {
          uint64_t v9 = 4294954756;
          goto LABEL_46;
        }
      }
      else
      {
        MEMORY[0x19970E910](gFigFDCPBusyCacheFileMutex);
        unint64_t v12 = CFDictionaryGetValue((CFDictionaryRef)gFigFDCPBusyCacheFileToCacheMapDict, *(const void **)(DerivedStorage + 8));
        uint64_t v13 = (const void *)*MEMORY[0x1E4F1D260];
        if (v12 == (const void *)*MEMORY[0x1E4F1D260]) {
          unint64_t v12 = 0;
        }
        *(void *)(DerivedStorage + 32) = v12;
        if (v12) {
          CFRetain(v12);
        }
        uint64_t v14 = CFDictionaryGetValue((CFDictionaryRef)gFigFDCPBusyCacheFileToCacheIDDict, *(const void **)(DerivedStorage + 8));
        if (v14 == v13) {
          uint64_t v14 = 0;
        }
        *(void *)(DerivedStorage + 40) = v14;
        int64_t v15 = (CFTypeRef *)(DerivedStorage + 40);
        if (v14) {
          CFRetain(v14);
        }
        MEMORY[0x19970E930](gFigFDCPBusyCacheFileMutex);
        if (*(void *)(DerivedStorage + 32))
        {
          *(unsigned char *)(DerivedStorage + 50) = 1;
        }
        else if (FigByteStreamCreateFromOpenFile() {
               || *v10
        }
               && (int v16 = FigFileGetDarwinFileDesc(),
                   fgetxattr(v16, "com.apple.coremedia.cachemap.offset", &value, 8uLL, 0, 0) == -1)
               && (__error(), FigSignalErrorAt())
               || FigDCP_CheckCacheFileVersion((uint64_t)v21, value)
               || FigDCP_CopyIDFromCacheFile((uint64_t)v21, value, (void *)(DerivedStorage + 40))
               || FigDCP_CopyAtomDataFromCacheFile((uint64_t)v21, value, 1937011572, (__CFData **)(DerivedStorage + 32)))
        {
          if (*v15)
          {
            CFRelease(*v15);
            *int64_t v15 = 0;
          }
        }
      }
    }
    if (*(void *)(DerivedStorage + 40)) {
      goto LABEL_36;
    }
    if (*v10)
    {
      FigFileForkClose();
      *uint64_t v10 = 0;
    }
    int v17 = FigFileForkOpenMainByCFURL();
    if (!v17)
    {
LABEL_36:
      uint64_t v9 = 0;
      *a4 = cf;
      goto LABEL_48;
    }
    if (v17 == 69 || v17 == 28) {
      uint64_t v9 = 4294954755;
    }
    else {
      uint64_t v9 = 4294954756;
    }
  }
LABEL_46:
  if (!cf) {
    goto LABEL_49;
  }
  CFRelease(cf);
LABEL_48:
  CFTypeRef cf = 0;
LABEL_49:
  if (v21) {
    CFRelease(v21);
  }
  return v9;
}

uint64_t FigDCP_SetupBusyCacheFileMapping()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFStringRef v1 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v2 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  gFigFDCPBusyCacheFileToCacheMapDict = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  gFigFDCPBusyCacheFileToCacheIDDict = (uint64_t)CFDictionaryCreateMutable(v0, 0, v1, v2);
  uint64_t result = FigSimpleMutexCreate();
  gFigFDCPBusyCacheFileMutex = result;
  return result;
}

uint64_t FigDCP_CheckCacheFileVersion(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v8 = 0;
  uint64_t result = FigDCP_FindAtomData(a1, a2, 1986359930, (uint64_t)&v10, (unint64_t)&v9);
  if (!result)
  {
    if (v9 != 4) {
      return FigSignalErrorAt();
    }
    uint64_t v4 = v10;
    uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v5) {
      uint64_t v6 = v5;
    }
    else {
      uint64_t v6 = 0;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, void))(v6 + 8);
    if (v7)
    {
      uint64_t result = v7(a1, 4, v4, &v8, 0);
      if (!result)
      {
        if (v8 == 0x1000000) {
          return 0;
        }
        return FigSignalErrorAt();
      }
    }
    else
    {
      return 4294954514;
    }
  }
  return result;
}

BOOL FigDCP_IsFileEmpty(uint64_t a1, void *a2)
{
  CFNumberRef number = 0;
  CFTypeRef cf = 0;
  uint64_t valuePtr = 0;
  uint64_t v3 = *MEMORY[0x1E4F1CF80];
  if (FigByteStreamCreateFromOpenFile()
    || ((CMBaseObject = CMByteStreamGetCMBaseObject(), (uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v6 = 0)
      : (uint64_t v6 = v5),
        (uint64_t v7 = *(unsigned int (**)(uint64_t, void, uint64_t, CFNumberRef *))(v6 + 48)) == 0
     || v7(CMBaseObject, *MEMORY[0x1E4F1EC50], v3, &number)))
  {
    BOOL v8 = 0;
  }
  else
  {
    CFNumberGetValue(number, kCFNumberSInt64Type, &valuePtr);
    BOOL v8 = valuePtr == 0;
    if (a2) {
      *a2 = valuePtr;
    }
  }
  if (number) {
    CFRelease(number);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v8;
}

uint64_t FigFullDownloadDiskCacheProvider_Invalidate()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 48)) {
    *(unsigned char *)(DerivedStorage + 48) = 1;
  }
  return 0;
}

void FigFullDownloadDiskCacheProvider_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    uint64_t v5 = *(void (**)(uint64_t))(v4 + 24);
    if (v5) {
      v5(a1);
    }
  }
  if (*(void *)(DerivedStorage + 24))
  {
    MEMORY[0x19970E910](gFigFDCPBusyCacheFileMutex);
    if (CFDictionaryContainsKey((CFDictionaryRef)gFigFDCPBusyCacheFileToCacheMapDict, *(const void **)(DerivedStorage + 8)))
    {
      MEMORY[0x19970E930](gFigFDCPBusyCacheFileMutex);
      FigFileForkClose();
      *(void *)(DerivedStorage + 24) = 0;
    }
    else
    {
      uint64_t v6 = (const void *)*MEMORY[0x1E4F1D260];
      if (*(void *)(DerivedStorage + 32)) {
        uint64_t v7 = *(const void **)(DerivedStorage + 32);
      }
      else {
        uint64_t v7 = (const void *)*MEMORY[0x1E4F1D260];
      }
      CFDictionaryAddValue((CFMutableDictionaryRef)gFigFDCPBusyCacheFileToCacheMapDict, *(const void **)(DerivedStorage + 8), v7);
      if (*(void *)(DerivedStorage + 40)) {
        BOOL v8 = *(const void **)(DerivedStorage + 40);
      }
      else {
        BOOL v8 = v6;
      }
      CFDictionaryAddValue((CFMutableDictionaryRef)gFigFDCPBusyCacheFileToCacheIDDict, *(const void **)(DerivedStorage + 8), v8);
      MEMORY[0x19970E930](gFigFDCPBusyCacheFileMutex);
      FigFileForkClose();
      *(void *)(DerivedStorage + 24) = 0;
      MEMORY[0x19970E910](gFigFDCPBusyCacheFileMutex);
      CFDictionaryRemoveValue((CFMutableDictionaryRef)gFigFDCPBusyCacheFileToCacheMapDict, *(const void **)(DerivedStorage + 8));
      CFDictionaryRemoveValue((CFMutableDictionaryRef)gFigFDCPBusyCacheFileToCacheIDDict, *(const void **)(DerivedStorage + 8));
      MEMORY[0x19970E930](gFigFDCPBusyCacheFileMutex);
    }
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v9 = *(const void **)(DerivedStorage + 8);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v10 = *(const void **)(DerivedStorage + 40);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(DerivedStorage + 40) = 0;
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 32);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 32) = 0;
  }
}

__CFString *FigFullDownloadDiskCacheProvider_CopyDebugDescription()
{
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = "No";
  if (*(unsigned char *)(DerivedStorage + 48)) {
    uint64_t v3 = "No";
  }
  else {
    uint64_t v3 = "Yes";
  }
  if (*(unsigned char *)(DerivedStorage + 49)) {
    uint64_t v2 = "Yes";
  }
  CFStringAppendFormat(Mutable, 0, @"FigFullDownloadDiskCacheProvider <%p>\n\tValid: <%s>\n\tsourceURL: <%@>\n\tcacheFileURL: <%@>\n\tcacheFileSize: <%lld>\n\tcacheComplete: <%s>", DerivedStorage, v3, *(_OWORD *)DerivedStorage, *(void *)(DerivedStorage + 16), v2);
  return Mutable;
}

uint64_t FigFullDownloadDiskCacheProvider_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2 && a4)
  {
    uint64_t v7 = DerivedStorage;
    if (CFEqual(a2, @"CacheIdentifier"))
    {
      BOOL v8 = *(const void **)(v7 + 40);
      if (v8)
      {
LABEL_5:
        uint64_t v9 = (void *)CFRetain(v8);
LABEL_8:
        uint64_t v10 = v9;
        uint64_t result = 0;
        *a4 = v10;
        return result;
      }
      return 4294954513;
    }
    if (CFEqual(a2, @"CacheSize"))
    {
      uint64_t v9 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, (const void *)(v7 + 16));
      goto LABEL_8;
    }
    if (CFEqual(a2, @"CacheMap"))
    {
      BOOL v8 = *(const void **)(v7 + 32);
      if (v8) {
        goto LABEL_5;
      }
      return 4294954513;
    }
    if (CFEqual(a2, @"CacheIsComplete"))
    {
      unint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
      int v13 = *(unsigned __int8 *)(v7 + 49);
LABEL_16:
      if (!v13) {
        unint64_t v12 = (const void **)MEMORY[0x1E4F1CFC8];
      }
      BOOL v8 = *v12;
      goto LABEL_5;
    }
    if (CFEqual(a2, @"CacheIsBusy"))
    {
      unint64_t v12 = (const void **)MEMORY[0x1E4F1CFD0];
      int v13 = *(unsigned __int8 *)(v7 + 50);
      goto LABEL_16;
    }
    return 4294954512;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigFullDownloadDiskCacheProvider_SetProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2) {
    goto LABEL_28;
  }
  uint64_t v6 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 48)) {
    goto LABEL_28;
  }
  if (CFEqual(a2, @"CacheIdentifier"))
  {
    uint64_t v7 = *(const void **)(v6 + 40);
    *(void *)(v6 + 40) = a3;
    if (a3) {
      CFRetain(a3);
    }
    if (!v7) {
      return 0;
    }
LABEL_7:
    CFRelease(v7);
    return 0;
  }
  if (CFEqual(a2, @"CacheSize"))
  {
    if (a3)
    {
      CFTypeID v9 = CFGetTypeID(a3);
      if (v9 == CFNumberGetTypeID())
      {
        uint64_t v10 = (blkcnt_t *)(v6 + 16);
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, (void *)(v6 + 16));
        memset(&v15, 0, sizeof(v15));
        int DarwinFileDesc = FigFileGetDarwinFileDesc();
        blkcnt_t v12 = *(void *)(v6 + 16);
        if (!fstat(DarwinFileDesc, &v15)) {
          blkcnt_t v12 = *v10 - (v15.st_blocks << 9);
        }
        if (v12 >= 1 && v12 <= *v10)
        {
          v16[0] = 0x300000008;
          v16[1] = 0;
          v16[2] = v12;
          v16[3] = 0;
          fcntl(DarwinFileDesc, 42, v16);
        }
        return 0;
      }
    }
    goto LABEL_28;
  }
  if (!CFEqual(a2, @"CacheMap"))
  {
    if (!CFEqual(a2, @"CacheIsComplete")) {
      return 4294954512;
    }
    if (a3)
    {
      Boolean v14 = CFEqual(a3, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
      uint64_t result = 0;
      *(unsigned char *)(v6 + 49) = v14;
      return result;
    }
    goto LABEL_28;
  }
  if (!a3)
  {
    return FigDCP_RemoveCacheMap(v6, 0);
  }
  CFTypeID v13 = CFGetTypeID(a3);
  if (v13 != CFDataGetTypeID())
  {
LABEL_28:
    return FigSignalErrorAt();
  }
  if (*(unsigned char *)(v6 + 48) || (uint64_t result = FigDCP_WriteOutCacheFile(v6, (const __CFData *)a3), !result))
  {
    uint64_t v7 = *(const void **)(v6 + 32);
    *(void *)(v6 + 32) = a3;
    CFRetain(a3);
    if (!v7) {
      return 0;
    }
    goto LABEL_7;
  }
  return result;
}

uint64_t FigDCP_WriteOutCacheFile(uint64_t a1, const __CFData *a2)
{
  CFTypeRef cf = 0;
  int v50 = 0x1000000;
  CFErrorRef err = 0;
  uint64_t v49 = 0;
  if (*(unsigned char *)(a1 + 49))
  {
    off_t v3 = *(void *)(a1 + 16);
    return FigDCP_RemoveCacheMap(a1, v3);
  }
  uint64_t v51 = 0;
  FigDCP_IsFileEmpty(*(void *)(a1 + 24), &v49);
  uint64_t v6 = v49;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v8 = FigByteStreamCreateFromOpenFile();
  if (v8) {
    goto LABEL_55;
  }
  CFDataRef v9 = CFPropertyListCreateData(v7, *(CFPropertyListRef *)(a1 + 40), kCFPropertyListXMLFormat_v1_0, 0, &err);
  if (err)
  {
    CFStringRef v10 = CFErrorCopyFailureReason(err);
    CFIndex Code = CFErrorGetCode(err);
    if (v10) {
      CFRelease(v10);
    }
    if (!v9) {
      goto LABEL_47;
    }
    goto LABEL_46;
  }
  if (!v9)
  {
    uint64_t v8 = FigSignalErrorAt();
LABEL_55:
    CFIndex Code = v8;
    goto LABEL_47;
  }
  HIDWORD(v51) = 1684632691;
  LODWORD(v51) = bswap32(CFDataGetLength(v9) + 8);
  CFTypeRef v12 = cf;
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  stat v15 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t *, void))(v14 + 16);
  if (!v15) {
    goto LABEL_45;
  }
  uint64_t v16 = v15(v12, 8, v6, &v51, 0);
  if (v16) {
    goto LABEL_56;
  }
  CFTypeRef v17 = cf;
  CFIndex Length = CFDataGetLength(v9);
  BytePtr = CFDataGetBytePtr(v9);
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  off_t v22 = *(uint64_t (**)(CFTypeRef, CFIndex, uint64_t, const UInt8 *, void))(v21 + 16);
  if (!v22) {
    goto LABEL_45;
  }
  uint64_t v23 = v6 + 8;
  uint64_t v16 = v22(v17, Length, v23, BytePtr, 0);
  if (v16) {
    goto LABEL_56;
  }
  CFIndex v24 = CFDataGetLength(v9);
  HIDWORD(v51) = 1953723507;
  LODWORD(v51) = bswap32(CFDataGetLength(a2) + 8);
  CFTypeRef v25 = cf;
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v26) {
    uint64_t v27 = v26;
  }
  else {
    uint64_t v27 = 0;
  }
  unint64_t v28 = *(uint64_t (**)(CFTypeRef, uint64_t, CFIndex, uint64_t *, void))(v27 + 16);
  if (!v28) {
    goto LABEL_45;
  }
  CFIndex v29 = v24 + v23;
  uint64_t v16 = v28(v25, 8, v29, &v51, 0);
  if (v16) {
    goto LABEL_56;
  }
  CFTypeRef v30 = cf;
  CFIndex v31 = CFDataGetLength(a2);
  uint64_t v32 = CFDataGetBytePtr(a2);
  uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v33) {
    uint64_t v34 = v33;
  }
  else {
    uint64_t v34 = 0;
  }
  CFTypeID v35 = *(uint64_t (**)(CFTypeRef, CFIndex, CFIndex, const UInt8 *, void))(v34 + 16);
  if (!v35) {
    goto LABEL_45;
  }
  CFIndex v36 = v29 + 8;
  uint64_t v16 = v35(v30, v31, v36, v32, 0);
  if (v16) {
    goto LABEL_56;
  }
  CFIndex v37 = CFDataGetLength(a2);
  uint64_t v51 = 0x7A7265760C000000;
  CFTypeRef v38 = cf;
  uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v39) {
    uint64_t v40 = v39;
  }
  else {
    uint64_t v40 = 0;
  }
  CFDataRef v41 = *(uint64_t (**)(CFTypeRef, uint64_t, CFIndex, uint64_t *, void))(v40 + 16);
  if (!v41) {
    goto LABEL_45;
  }
  CFIndex v42 = v37 + v36;
  uint64_t v16 = v41(v38, 8, v42, &v51, 0);
  if (v16)
  {
LABEL_56:
    CFIndex Code = v16;
    goto LABEL_46;
  }
  CFTypeRef v43 = cf;
  uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v44) {
    uint64_t v45 = v44;
  }
  else {
    uint64_t v45 = 0;
  }
  CFTypeRef v46 = *(uint64_t (**)(CFTypeRef, uint64_t, CFIndex, int *, void))(v45 + 16);
  if (v46)
  {
    uint64_t v16 = v46(v43, 4, v42 + 8, &v50, 0);
    if (!v16)
    {
      uint64_t value = v49;
      if (*(void *)(a1 + 24))
      {
        int DarwinFileDesc = FigFileGetDarwinFileDesc();
        CFIndex Code = 0;
        if (fsetxattr(DarwinFileDesc, "com.apple.coremedia.cachemap.offset", &value, 8uLL, 0, 0) == -1)
        {
          __error();
          CFIndex Code = FigSignalErrorAt();
        }
      }
      else
      {
        CFIndex Code = 0;
      }
      FigFileForkTruncate();
      goto LABEL_46;
    }
    goto LABEL_56;
  }
LABEL_45:
  CFIndex Code = 4294954514;
LABEL_46:
  CFRelease(v9);
LABEL_47:
  if (cf) {
    CFRelease(cf);
  }
  if (err) {
    CFRelease(err);
  }
  return Code;
}

uint64_t FigDCP_RemoveCacheMap(uint64_t a1, off_t a2)
{
  MEMORY[0x19970E910](gFigFDCPBusyCacheFileMutex);
  int v4 = CFDictionaryContainsKey((CFDictionaryRef)gFigFDCPBusyCacheFileToCacheMapDict, *(const void **)(a1 + 8));
  MEMORY[0x19970E930](gFigFDCPBusyCacheFileMutex);
  if (v4) {
    return 4294954754;
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    int DarwinFileDesc = FigFileGetDarwinFileDesc();
    fremovexattr(DarwinFileDesc, "com.apple.coremedia.cachemap.offset", 0);
    CFAllocatorRef v7 = *(const void **)(a1 + 32);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 32) = 0;
    }
    uint64_t v8 = *(void *)(a1 + 24);
    return FigDCP_TruncateFile(v8, a2);
  }
  return result;
}

uint64_t FigFullDownloadDiskCacheProvider_GetBacking(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 48) || !(a4 | a5))
  {
    FigSignalErrorAt();
    return 0;
  }
  uint64_t v9 = DerivedStorage;
  if (*(unsigned char *)(DerivedStorage + 50))
  {
    MEMORY[0x19970E910](gFigFDCPBusyCacheFileMutex);
    if (!CFDictionaryContainsKey((CFDictionaryRef)gFigFDCPBusyCacheFileToCacheMapDict, *(const void **)(v9 + 8))) {
      *(unsigned char *)(v9 + 50) = 0;
    }
    MEMORY[0x19970E930](gFigFDCPBusyCacheFileMutex);
    if (*(unsigned char *)(v9 + 50))
    {
      if (a4) {
        *(void *)a4 = *(void *)(v9 + 24);
      }
      if (a5)
      {
        uint64_t result = 0;
        *(void *)a5 = -1;
        return result;
      }
      return 0;
    }
  }
  if (a4) {
    *(void *)a4 = *(void *)(v9 + 24);
  }
  if (a5) {
    *(void *)a5 = a3;
  }
  return 1;
}

uint64_t FigFullDownloadDiskCacheProvider_GetBackingFile()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 24);
}

uint64_t FigByteStreamFactorySetCachedFileByteStreamEnable(char a1)
{
  gUseCachedFileByteStream = a1;
  uint64_t result = FigGetCFPreferenceBooleanWithDefault();
  gUseCachedFileByteStream = result;
  return result;
}

uint64_t FigByteStreamFactoryTranslateReferenceSecurityOptions(int a1)
{
  return (32 * a1) & 0x3C0;
}

uint64_t FigByteStreamFactoryCreateStreamFromURLWithOptions(const __CFURL *a1, unsigned int a2, const __CFDictionary *a3, void *a4, void *a5, void *a6, void *a7, void *a8)
{
  CFTypeRef cf = 0;
  if (fbsfCompletionGetTypeID_fbsfCompletionOnce != -1) {
    dispatch_once_f(&fbsfCompletionGetTypeID_fbsfCompletionOnce, 0, (dispatch_function_t)fbsfCompletionRegisterClass);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance)
  {
    uint64_t v26 = FigSignalErrorAt();
    CFTypeRef v17 = 0;
    goto LABEL_33;
  }
  CFTypeRef v17 = (const void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
  if (!v17
    || (uint64_t v18 = FigSemaphoreCreate(), (*(void *)(Instance + 40) = v18) == 0)
    || (CFTypeRef cf = CFRetain(v17), *(unsigned char *)(Instance + 64) = a7 != 0, FigThreadRegisterAbortAction()))
  {
    uint64_t v26 = FigSignalErrorAt();
    goto LABEL_33;
  }
  CFRetain(v17);
  uint64_t StreamFromURLWithOptionsAsync = FigByteStreamFactoryCreateStreamFromURLWithOptionsAsync(a1, a2, a3, (void (*)(uint64_t, CFMutableDictionaryRef, void, void, void, void))fbsf_createStreamFromURL_callback, (uint64_t)v17);
  if (StreamFromURLWithOptionsAsync)
  {
    uint64_t v26 = StreamFromURLWithOptionsAsync;
    CFRelease(v17);
LABEL_45:
    FigThreadUnregisterAbortAction();
    goto LABEL_33;
  }
  uint64_t v20 = FigSemaphoreWaitRelative();
  if (v20)
  {
    uint64_t v26 = v20;
    goto LABEL_45;
  }
  FigThreadUnregisterAbortAction();
  if (((a2 >> 5) & 0x1E) != 0 && *(void *)(Instance + 48) && !FigIsReferenceAllowedBySecurityPolicy())
  {
    uint64_t v26 = 4294955014;
    *(_DWORD *)(Instance + 24) = -12282;
    FigSignalErrorAt();
  }
  else
  {
    if (a4)
    {
      CFTypeRef v21 = *(CFTypeRef *)(Instance + 16);
      if (v21) {
        CFTypeRef v21 = CFRetain(v21);
      }
      *a4 = v21;
    }
    if (a8)
    {
      CFTypeRef v22 = *(CFTypeRef *)(Instance + 32);
      if (v22) {
        CFTypeRef v22 = CFRetain(v22);
      }
      *a8 = v22;
    }
    if (a5)
    {
      CFTypeRef v23 = *(CFTypeRef *)(Instance + 48);
      if (v23) {
        CFTypeRef v23 = CFRetain(v23);
      }
      *a5 = v23;
    }
    if (a6)
    {
      CFTypeRef v24 = *(CFTypeRef *)(Instance + 56);
      if (v24) {
        CFTypeRef v24 = CFRetain(v24);
      }
      *a6 = v24;
    }
    if (a7)
    {
      CFTypeRef v25 = *(CFTypeRef *)(Instance + 72);
      if (v25) {
        CFTypeRef v25 = CFRetain(v25);
      }
      *a7 = v25;
    }
    uint64_t v26 = *(unsigned int *)(Instance + 24);
  }
LABEL_33:
  if (cf) {
    CFRelease(cf);
  }
  if (Instance) {
    CFRelease((CFTypeRef)Instance);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v26;
}

void fbsfCreateStreamAbortHandler(uint64_t a1)
{
  uint64_t v2 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v2)
  {
    off_t v3 = (const void *)v2;
    *(_DWORD *)(a1 + 8) = -12785;
    FigSemaphoreSignal();
    CFRelease(v3);
  }
}

uint64_t FigByteStreamFactoryCreateStreamFromURLWithOptionsAsync(const __CFURL *a1, __int16 a2, const __CFDictionary *a3, void (*a4)(uint64_t, CFMutableDictionaryRef, void, void, void, void), uint64_t a5)
{
  CFStringRef v10 = CFURLCopyScheme(a1);
  if (!FigCFURLIsLocalResource())
  {
    uint64_t v14 = malloc_type_calloc(1uLL, 0x10uLL, 0x80040803F642BuLL);
    if (!v14) {
      goto LABEL_144;
    }
    void *v14 = a4;
    v14[1] = a5;
    double v95 = v14;
    char v99 = 0;
    CFMutableDictionaryRef v98 = 0;
    BOOL v88 = FigCFHTTPIsHTTPBasedURL(a1);
    if (a3)
    {
      CFTypeID v15 = CFURLGetTypeID();
      ValueOfType = FigCFDictionaryGetValueOfType(a3, @"factoryOption_NetworkCacheURL", v15);
      CFTypeID v16 = CFURLGetTypeID();
      CFTypeRef v17 = FigCFDictionaryGetValueOfType(a3, @"factoryOption_DownloadDestinationURL", v16);
      CFTypeID TypeID = CFDictionaryGetTypeID();
      CFTypeRef v94 = FigCFDictionaryGetValueOfType(a3, @"factoryOption_HTTPHeaders", TypeID);
      CFCFTypeID TypeID = FigCustomURLLoaderGetCFTypeID();
      CFTypeRef v92 = FigCFDictionaryGetValueOfType(a3, @"factoryOption_CustomURLLoader", CFTypeID);
      CFTypeID v20 = CFBooleanGetTypeID();
      CFTypeRef v21 = FigCFDictionaryGetValueOfType(a3, @"factoryOption_UseAWDL", v20);
      CFTypeRef v22 = (const void *)*MEMORY[0x1E4F1CFD0];
      BOOL v93 = v21 == (const void *)*MEMORY[0x1E4F1CFD0];
      CFTypeID v23 = CFStringGetTypeID();
      FigCFDictionaryGetValueOfType(a3, @"factoryOption_Backing", v23);
      CFTypeID v24 = CFBooleanGetTypeID();
      BOOL v25 = FigCFDictionaryGetValueOfType(a3, @"factoryOption_NoPersistentCache", v24) == v22;
      CFTypeID v26 = CFNumberGetTypeID();
      CFNumberRef number = (const __CFNumber *)FigCFDictionaryGetValueOfType(a3, @"factoryOption_NonPurgeableMemoryLimit", v26);
      CFTypeID v27 = CFBooleanGetTypeID();
      BYTE4(v91) = FigCFDictionaryGetValueOfType(a3, @"factoryOption_DisableNetworkLargeDownload", v27) == v22;
      CFTypeID v28 = CFBooleanGetTypeID();
      LOBYTE(v91) = FigCFDictionaryGetValueOfType(a3, @"factoryOption_DisableNetworkProbeRequest", v28) == v22;
      CFTypeID v29 = CFNumberGetTypeID();
      CFTypeRef v30 = FigCFDictionaryGetValueOfType(a3, @"factoryOption_MaxSizeAllowedForCellularAccess", v29);
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      CFTypeID v31 = CFDictionaryGetTypeID();
      uint64_t v32 = FigCFDictionaryGetValueOfType(a3, @"factoryOption_HTTPRequestOptions", v31);
      CFTypeID v33 = CFDictionaryGetTypeID();
      uint64_t v34 = FigCFDictionaryGetValueOfType(a3, @"factoryOption_AlternativeConfigurationOptions", v33);
      CFTypeID v35 = CFBooleanGetTypeID();
      BYTE4(v90) = FigCFDictionaryGetValueOfType(a3, @"factoryOption_RequiresCustomURLLoading", v35) == v22;
      CFTypeID v36 = CFBooleanGetTypeID();
      LODWORD(v89) = FigCFDictionaryGetValueOfType(a3, @"factoryOption_DelayReadAheadUntilExplicitlyHinted", v36) == v22;
      CFTypeID v37 = CFBooleanGetTypeID();
      LOBYTE(v90) = FigCFDictionaryGetValueOfType(a3, @"factoryOption_AlwaysFollowRedirects", v37) == v22;
      CFTypeID v38 = CFBooleanGetTypeID();
      BYTE4(v89) = FigCFDictionaryGetValueOfType(a3, @"factoryOption_EnableMultiPath", v38) == v22;
      Boolean Value = (__CFDictionary *)CFDictionaryGetValue(a3, @"factoryOption_StoreBagSessionConfiguration");
      CFMutableDictionaryRef v98 = Value;
      if (Value) {
        CFRetain(Value);
      }
      uint64_t v40 = CFDictionaryGetValue(a3, @"factoryOption_ParentNetworkActivity");
      if (v98)
      {
LABEL_30:
        if (v17)
        {
          if (v25 || FigCFEqual()) {
            goto LABEL_33;
          }
          BOOL v25 = 0;
        }
        CFMutableDictionaryRef v48 = malloc_type_calloc(1uLL, 0x98uLL, 0x10E0040B55CB63AuLL);
        if (!v48)
        {
LABEL_33:
          uint64_t v43 = FigSignalErrorAt();
          goto LABEL_34;
        }
        uint64_t v49 = (uint64_t)v48;
        *CFMutableDictionaryRef v48 = fbfs_createHHTPURLStreamCallback;
        v48[1] = v95;
        CFTypeRef v50 = v92;
        if (v92) {
          CFTypeRef v50 = CFRetain(v92);
        }
        *(void *)(v49 + 40) = v50;
        CFTypeRef v51 = v94;
        if (v94) {
          CFTypeRef v51 = CFRetain(v94);
        }
        *(void *)(v49 + 24) = v51;
        *(unsigned char *)(v49 + 93) = v93;
        *(unsigned char *)(v49 + 100) = BYTE4(v91);
        *(unsigned char *)(v49 + 101) = v91;
        if (v30) {
          CFTypeRef v52 = CFRetain(v30);
        }
        else {
          CFTypeRef v52 = 0;
        }
        *(void *)(v49 + 104) = v52;
        *(unsigned char *)(v49 + 112) = 0;
        *(unsigned char *)(v49 + 113) = v99;
        if (v32) {
          CFTypeRef v53 = CFRetain(v32);
        }
        else {
          CFTypeRef v53 = 0;
        }
        *(void *)(v49 + 120) = v53;
        if (v34) {
          CFTypeRef v54 = CFRetain(v34);
        }
        else {
          CFTypeRef v54 = 0;
        }
        *(void *)(v49 + 80) = v54;
        *(unsigned char *)(v49 + 114) = BYTE4(v90);
        *(unsigned char *)(v49 + 115) = v90;
        *(unsigned char *)(v49 + 116) = BYTE4(v89);
        CFTypeRef v55 = v98;
        if (v98) {
          CFTypeRef v55 = CFRetain(v98);
        }
        *(void *)(v49 + 128) = v55;
        if (v40) {
          CFTypeRef v56 = CFRetain(v40);
        }
        else {
          CFTypeRef v56 = 0;
        }
        *(void *)(v49 + 136) = v56;
        if (!v25 && (v17 || FigCFEqual()))
        {
          int v58 = 1;
          int v57 = v89;
        }
        else
        {
          if (FigCFEqual()) {
            *(_DWORD *)(v49 + 72) |= 2u;
          }
          int v57 = v89;
          if (!v25)
          {
LABEL_69:
            if (v57) {
              *(_DWORD *)(v49 + 72) |= 8u;
            }
            if ((a2 & 0x1000) != 0)
            {
              *(_DWORD *)(v49 + 72) |= 0x10u;
              if ((a2 & 8) == 0)
              {
LABEL_73:
                if ((a2 & 0x20) == 0) {
                  goto LABEL_75;
                }
                goto LABEL_74;
              }
            }
            else if ((a2 & 8) == 0)
            {
              goto LABEL_73;
            }
            *(_DWORD *)(v49 + 88) |= 1u;
            if ((a2 & 0x20) == 0)
            {
LABEL_75:
              CFURLRef v59 = CFURLCopyAbsoluteURL(a1);
              if (!v59)
              {
                uint64_t v43 = FigSignalErrorAt();
LABEL_155:
                fbfs_FreeFigHTTPOpenCompletion(v49);
LABEL_34:
                CFMutableDictionaryRef v46 = v98;
                if (!v98)
                {
                  if (!v43) {
                    goto LABEL_36;
                  }
                  goto LABEL_124;
                }
LABEL_123:
                CFRelease(v46);
                if (!v43)
                {
LABEL_36:
                  if (!v10) {
                    return v43;
                  }
LABEL_37:
                  CFRelease(v10);
                  return v43;
                }
LABEL_124:
                free(v95);
                if (!v10) {
                  return v43;
                }
                goto LABEL_37;
              }
              CFURLRef v60 = v59;
              *(void *)(v49 + 16) = CFRetain(v59);
              uint64_t v61 = FigCFURLCreateCacheKey();
              if (!v61)
              {
                uint64_t v43 = FigSignalErrorAt();
LABEL_154:
                CFRelease(v60);
                goto LABEL_155;
              }
              CFIndex v62 = (const void *)v61;
              if ((a2 & 0x400) != 0)
              {
                GlobalNetworkBufferingLowPriorityQueue = FigThreadGetGlobalNetworkBufferingLowPriorityQueue();
                if (GlobalNetworkBufferingLowPriorityQueue) {
                  *(void *)(v49 + 144) = FigHTTPSchedulerRetain(GlobalNetworkBufferingLowPriorityQueue);
                }
              }
              if (v17)
              {
                uint64_t v43 = FigFullDownloadDiskCacheProviderCreate(*MEMORY[0x1E4F1CF80], v60, v17, (CFTypeRef *)(v49 + 32));
                goto LABEL_82;
              }
              int v68 = (*(unsigned char *)(v49 + 72) & 1) == 0 || FigCFHTTPIsDataURL(a1);
              uint64_t v69 = *MEMORY[0x1E4F1CF80];
              uint64_t v70 = FigLimitedDiskCacheProviderCreate(*MEMORY[0x1E4F1CF80], v62, ValueOfType, v68, (void *)(v49 + 32));
              uint64_t v43 = v70;
              if ((v68 & 1) != 0 || v70)
              {
                if (!v68) {
                  goto LABEL_82;
                }
              }
              else
              {
                *(void *)keyExistsAndHasValidFormat = 0;
                CFTypeRef cf = 0;
                uint64_t FigBaseObject = FigDiskCacheProviderGetFigBaseObject(*(void *)(v49 + 32));
                uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v72) {
                  uint64_t v73 = v72;
                }
                else {
                  uint64_t v73 = 0;
                }
                uint64_t v80 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v73 + 48);
                if (v80 && !v80(FigBaseObject, @"CacheSize", v69, &cf)) {
                  CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt64Type, keyExistsAndHasValidFormat);
                }
                if (cf) {
                  CFRelease(cf);
                }
                if (*(uint64_t *)keyExistsAndHasValidFormat >= 0x2000000)
                {
LABEL_83:
                  int v64 = *(_DWORD *)(v49 + 72);
                  if (v64)
                  {
                    if (fbfs_GetMemCacheForDiskBackedMaxSize_sGetMemCacheForDiskBackedMaxSizeOnce != -1) {
                      dispatch_once_f(&fbfs_GetMemCacheForDiskBackedMaxSize_sGetMemCacheForDiskBackedMaxSizeOnce, &fbfs_GetMemCacheForDiskBackedMaxSize_sMemLimit, (dispatch_function_t)fbfs_GetCacheMemForDiskBackedMaxSizeOnce);
                    }
                    uint64_t v67 = fbfs_GetMemCacheForDiskBackedMaxSize_sMemLimit;
                  }
                  else
                  {
                    CFTypeRef cf = 0;
                    keyExistsAndHasValidFormat[0] = 0;
                    if ((v64 & 2) != 0)
                    {
                      if (number)
                      {
                        CFNumberGetValue(number, kCFNumberLongLongType, &cf);
                        int v66 = 0;
                      }
                      else
                      {
                        int v66 = 1;
                      }
                      uint64_t v65 = 0x2000000;
                    }
                    else
                    {
                      if (fbfs_GetMemCacheMaxSize_sGetMemCacheMaxSizeOnce != -1) {
                        dispatch_once_f(&fbfs_GetMemCacheMaxSize_sGetMemCacheMaxSizeOnce, &fbfs_GetMemCacheMaxSize_sMemLimit, (dispatch_function_t)fbfs_GetCacheMemMaxSizeOnce);
                      }
                      uint64_t v65 = fbfs_GetMemCacheMaxSize_sMemLimit;
                      int v66 = 1;
                    }
                    AppIntegerBoolean Value = CFPreferencesGetAppIntegerValue(@"crabs_cache_max_mb", @"com.apple.coremedia", keyExistsAndHasValidFormat);
                    if (keyExistsAndHasValidFormat[0]) {
                      uint64_t v75 = AppIntegerValue << 20;
                    }
                    else {
                      uint64_t v75 = (uint64_t)cf;
                    }
                    if (keyExistsAndHasValidFormat[0]) {
                      int v76 = 0;
                    }
                    else {
                      int v76 = v66;
                    }
                    if (v75 <= 0x100000) {
                      int v76 = 1;
                    }
                    if (v76) {
                      uint64_t v67 = v65;
                    }
                    else {
                      uint64_t v67 = v75;
                    }
                  }
                  if (v67 < 0)
                  {
                    uint64_t CacheMemoryAllocatorForCRABS = FigSignalErrorAt();
                  }
                  else
                  {
                    uint64_t v77 = (CFTypeRef *)(v49 + 56);
                    uint64_t CacheMemoryAllocatorForCRABS = FigCreateCacheMemoryAllocatorForCRABS(v67, (CFAllocatorRef *)(v49 + 56));
                    if (!CacheMemoryAllocatorForCRABS)
                    {
                      uint64_t FlumeAsync = fbfs_CreateFlumeAsync(v49, v88);
                      if (!FlumeAsync)
                      {
                        CFRelease(v62);
                        CFRelease(v60);
                        CFMutableDictionaryRef v46 = v98;
                        if (!v98)
                        {
                          uint64_t v43 = 0;
                          if (!v10) {
                            return v43;
                          }
                          goto LABEL_37;
                        }
                        uint64_t v43 = 0;
                        goto LABEL_123;
                      }
                      uint64_t v43 = FlumeAsync;
                      if (*v77)
                      {
                        CFRelease(*v77);
                        *uint64_t v77 = 0;
                      }
                      goto LABEL_153;
                    }
                  }
                  uint64_t v43 = CacheMemoryAllocatorForCRABS;
LABEL_153:
                  CFRelease(v62);
                  goto LABEL_154;
                }
              }
              *(_DWORD *)(v49 + 72) = *(_DWORD *)(v49 + 72) & 0xFFFFFFFC | 2;
              uint64_t v81 = *(void *)(v49 + 32);
              if (v81)
              {
                uint64_t v82 = FigDiskCacheProviderGetFigBaseObject(v81);
                uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 8);
                uint64_t v84 = v83 ? v83 : 0;
                CMTime v85 = *(void (**)(uint64_t, __CFString *, void))(v84 + 56);
                if (v85) {
                  v85(v82, @"NoPersistentCache", *MEMORY[0x1E4F1CFD0]);
                }
              }
LABEL_82:
              if (v43) {
                goto LABEL_153;
              }
              goto LABEL_83;
            }
LABEL_74:
            *(_DWORD *)(v49 + 88) |= 2u;
            goto LABEL_75;
          }
          int v58 = 4;
        }
        *(_DWORD *)(v49 + 72) |= v58;
        goto LABEL_69;
      }
      if (v32)
      {
        CFDataRef v41 = (const __CFData *)CFDictionaryGetValue((CFDictionaryRef)v32, @"FHRP_ClientAuditToken");
        CFDataRef v42 = FigCFHTTPCopyClientProcessName(v41);
        FigRCLCreateConfiguration(v42, @"kFigRemoteConfigurationLoaderStoreBagType_CRABS", 0, &v98);
        if (v42) {
          CFRelease(v42);
        }
        goto LABEL_30;
      }
    }
    else
    {
      BOOL v93 = 0;
      uint64_t v91 = 0;
      CFTypeRef v92 = 0;
      CFNumberRef number = 0;
      ValueOfType = 0;
      CFTypeRef v17 = 0;
      CFTypeRef v94 = 0;
      BOOL v25 = 0;
      CFTypeRef v30 = 0;
      uint64_t v34 = 0;
      uint64_t v89 = 0;
      uint64_t v90 = 0;
      uint64_t v40 = 0;
    }
    FigRCLCreateConfiguration(0, @"kFigRemoteConfigurationLoaderStoreBagType_CRABS", 0, &v98);
    uint64_t v32 = 0;
    goto LABEL_30;
  }
  CFMutableDictionaryRef v98 = 0;
  CFURLRef v11 = CFURLCopyAbsoluteURL(a1);
  if (!v11)
  {
LABEL_144:
    uint64_t v43 = FigSignalErrorAt();
    if (!v10) {
      return v43;
    }
    goto LABEL_37;
  }
  CFURLRef v12 = v11;
  if ((a2 & 0x802) != 0 || !gUseCachedFileByteStream)
  {
    FigGetDefaultManagedFilePool();
    uint64_t ByteStreamForFile = FigManagedFilePoolCreateByteStreamForFile();
  }
  else
  {
    uint64_t ByteStreamForFile = FigCachedFileByteStreamCreate(v11, 0, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], &v98);
  }
  uint64_t v43 = ByteStreamForFile;
  if (!ByteStreamForFile)
  {
    if (!a3
      || (*(void *)keyExistsAndHasValidFormat = 0,
          CFTypeRef cf = 0,
          !CFDictionaryGetValue(a3, @"factoryOption_ByteRangeInFile")))
    {
LABEL_23:
      a4(a5, v98, 0, 0, 0, 0);
      uint64_t v43 = 0;
      goto LABEL_24;
    }
    if (FigCFDictionaryGetInt64IfPresent() && FigCFDictionaryGetInt64IfPresent())
    {
      uint64_t v44 = CMByteStreamCreateCompositeForRead();
      if (!v44)
      {
        CFMutableDictionaryRef v45 = v98;
        CFMutableDictionaryRef v98 = (CFMutableDictionaryRef)cf;
        if (v45) {
          CFRelease(v45);
        }
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v44 = FigSignalErrorAt();
    }
    uint64_t v43 = v44;
  }
LABEL_24:
  if (v98) {
    CFRelease(v98);
  }
  CFRelease(v12);
  if (v10) {
    goto LABEL_37;
  }
  return v43;
}

void fbsf_createStreamFromURL_callback(const void *a1, const void *a2, int Code, const void *a4, const void *a5, const void *a6)
{
  uint64_t v12 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (!v12) {
    goto LABEL_29;
  }
  uint64_t v13 = v12;
  if (a2)
  {
    CFRetain(a2);
    *(void *)(v13 + 16) = a2;
    if (Code)
    {
      if (!a4)
      {
LABEL_33:
        uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        CFTypeID v26 = *(void (**)(uint64_t, void, void, uint64_t))(v25 + 48);
        if (v26) {
          v26(CMBaseObject, *MEMORY[0x1E4F1FB50], *MEMORY[0x1E4F1CF80], v13 + 32);
        }
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    CFTypeRef cf = 0;
    if (*(unsigned char *)(v13 + 64))
    {
      uint64_t v14 = CMByteStreamGetCMBaseObject();
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v16 = v15 ? v15 : 0;
      CFTypeRef v17 = *(void (**)(uint64_t, __CFString *, void, uint64_t))(v16 + 48);
      if (v17) {
        v17(v14, @"CRABS_ReadAheadAssertion", 0, v13 + 72);
      }
    }
    uint64_t v18 = CMByteStreamGetCMBaseObject();
    uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v19) {
      uint64_t v20 = v19;
    }
    else {
      uint64_t v20 = 0;
    }
    CFTypeRef v21 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v20 + 48);
    if (v21)
    {
      CFIndex Code = v21(v18, *MEMORY[0x1E4F1EC50], 0, &cf);
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      CFIndex Code = -12782;
    }
  }
  if (Code)
  {
    if (a4)
    {
LABEL_21:
      *(void *)(v13 + 32) = CFRetain(a4);
      goto LABEL_22;
    }
    if (a2) {
      goto LABEL_33;
    }
  }
LABEL_22:
  CFTypeRef v22 = *(__CFError **)(v13 + 32);
  if (v22) {
    CFIndex Code = CFErrorGetCode(v22);
  }
  *(_DWORD *)(v13 + 24) = Code;
  if (a5) {
    *(void *)(v13 + 48) = CFRetain(a5);
  }
  if (a6) {
    *(void *)(v13 + 56) = CFRetain(a6);
  }
  FigSemaphoreSignal();
  CFRelease((CFTypeRef)v13);
LABEL_29:
  if (a1) {
    CFRelease(a1);
  }
}

uint64_t FigByteStreamFactoryCreateStreamFromURL(const __CFURL *a1, unsigned int a2, const void *a3, const void *a4, uint64_t a5, const void *a6, void *a7, void *a8, void *a9, void *a10)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v18 = Mutable;
    if (a3) {
      CFDictionaryAddValue(Mutable, @"factoryOption_NetworkCacheURL", a3);
    }
    if (a4) {
      CFDictionaryAddValue(v18, @"factoryOption_DownloadDestinationURL", a4);
    }
    if (a6) {
      CFDictionaryAddValue(v18, @"factoryOption_HTTPHeaders", a6);
    }
    uint64_t StreamFromURLWithOptions = FigByteStreamFactoryCreateStreamFromURLWithOptions(a1, a2, v18, a7, a8, a9, 0, a10);
    CFRelease(v18);
    return StreamFromURLWithOptions;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void fbfs_createHHTPURLStreamCallback(void *a1)
{
  ((void (*)(void))*a1)(a1[1]);

  free(a1);
}

uint64_t FigByteStreamFactoryCreateStreamFromURLAsync(const __CFURL *a1, __int16 a2, const void *a3, const void *a4, const void *a5, void (*a6)(uint64_t, CFMutableDictionaryRef, void, void, void, void), uint64_t a7)
{
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v15 = Mutable;
    if (a3) {
      CFDictionaryAddValue(Mutable, @"factoryOption_NetworkCacheURL", a3);
    }
    if (a4) {
      CFDictionaryAddValue(v15, @"factoryOption_DownloadDestinationURL", a4);
    }
    if (a5) {
      CFDictionaryAddValue(v15, @"factoryOption_HTTPHeaders", a5);
    }
    uint64_t StreamFromURLWithOptionsAsync = FigByteStreamFactoryCreateStreamFromURLWithOptionsAsync(a1, a2, v15, a6, a7);
    CFRelease(v15);
    return StreamFromURLWithOptionsAsync;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t fbsfCompletionRegisterClass()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sFBSFCompletionID = result;
  return result;
}

double fbsfCompletion_Init(_OWORD *a1)
{
  double result = 0.0;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

uint64_t fbsfCompletion_Finalize(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  off_t v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  int v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  uint64_t v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
  uint64_t v6 = (const void *)a1[9];
  if (v6)
  {
    CFRelease(v6);
    a1[9] = 0;
  }

  return FigSemaphoreDestroy();
}

const void *FigCFDictionaryGetValueOfType(const __CFDictionary *a1, const void *a2, uint64_t a3)
{
  Boolean Value = CFDictionaryGetValue(a1, a2);
  if (!Value) {
    return 0;
  }
  uint64_t v5 = Value;
  if (CFGetTypeID(Value) != a3) {
    return 0;
  }
  return v5;
}

uint64_t fbfs_CreateFlumeAsync(uint64_t a1, int a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  uint64_t v49 = 0;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v44 = 0u;
  *(_OWORD *)keys = 0u;
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  *(_OWORD *)values = 0u;
  long long v37 = 0u;
  int v4 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if ((*(unsigned char *)(a1 + 72) & 4) == 0)
  {
    uint64_t FigBaseObject = FigDiskCacheProviderGetFigBaseObject(*(void *)(a1 + 32));
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v7 = v6 ? v6 : 0;
    uint64_t v8 = *(void (**)(uint64_t, __CFString *, CFAllocatorRef, CFTypeRef *))(v7 + 48);
    if (v8) {
      v8(FigBaseObject, @"CacheIdentifier", *v4, &cf);
    }
  }
  uint64_t v9 = (void *)MEMORY[0x1E4F1CFD0];
  if (*(unsigned char *)(a1 + 93))
  {
    keys[0] = @"FBFCreateOption_UseAWDL";
    values[0] = *(void **)MEMORY[0x1E4F1CFD0];
    CFIndex v10 = 1;
  }
  else
  {
    CFIndex v10 = 0;
  }
  if (*(unsigned char *)(a1 + 100))
  {
    *(void *)((unint64_t)keys | (8 * v10)) = @"FBFCreateOption_DisableLargeDownload";
    *(void *)((unint64_t)values & 0xFFFFFFFFFFFFFFF7 | (8 * (v10++ & 1))) = *v9;
  }
  CFURLRef v11 = *(void **)(a1 + 104);
  if (v11)
  {
    keys[v10] = @"FBFCreateOption_MaxSizeAllowedForCellularAccess";
    values[v10++] = v11;
  }
  if (*(unsigned char *)(a1 + 112))
  {
    keys[v10] = @"FBFCreateOption_DisallowsExpensiveNetworkAccess";
    values[v10++] = (void *)*v9;
  }
  if (*(unsigned char *)(a1 + 113))
  {
    keys[v10] = @"FBFCreateOption_DisallowsConstrainedNetworkAccess";
    values[v10++] = (void *)*v9;
  }
  uint64_t v12 = *(void **)(a1 + 120);
  if (v12)
  {
    keys[v10] = @"FBFCreateOption_HTTPRequestOptions";
    values[v10++] = v12;
  }
  uint64_t v13 = *(void **)(a1 + 80);
  if (v13)
  {
    keys[v10] = @"FBFCreateOption_AlternativeConfigurationOptions";
    values[v10++] = v13;
  }
  if (*(unsigned char *)(a1 + 114))
  {
    keys[v10] = @"FBFCreateOption_DisableNativeHTTPReads";
    values[v10++] = (void *)*v9;
  }
  if (*(unsigned char *)(a1 + 115))
  {
    keys[v10] = @"FBFCreateOption_AlwaysFollowRedirects";
    values[v10++] = (void *)*v9;
  }
  if (*(unsigned char *)(a1 + 116))
  {
    keys[v10] = @"FBFCreateOption_EnableMultiPath";
    values[v10++] = (void *)*v9;
  }
  uint64_t v14 = *(void **)(a1 + 128);
  if (v14)
  {
    keys[v10] = @"FBFCreateOption_StoreBagConfiguration";
    values[v10++] = v14;
  }
  if ((*(unsigned char *)(a1 + 72) & 0x10) != 0)
  {
    keys[v10] = @"FBFCreateOption_DoNotLogURLs";
    values[v10++] = (void *)*v9;
  }
  uint64_t v15 = *(void **)(a1 + 136);
  if (v15)
  {
    keys[v10] = @"FBFCreateOption_ParentNetworkActivity";
    values[v10++] = v15;
  }
  else if (!v10)
  {
    CFDictionaryRef v16 = 0;
    if (a2) {
      goto LABEL_37;
    }
LABEL_40:
    CFAllocatorRef v17 = *v4;
    goto LABEL_41;
  }
  CFDictionaryRef v16 = CFDictionaryCreate(*v4, (const void **)keys, (const void **)values, v10, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (!v16)
  {
    uint64_t v21 = FigSignalErrorAt();
    goto LABEL_55;
  }
  if (!a2) {
    goto LABEL_40;
  }
LABEL_37:
  CFAllocatorRef v17 = *v4;
  if (!*(unsigned char *)(a1 + 114))
  {
    CFTypeRef v18 = cf;
LABEL_42:
    uint64_t v20 = FigByteFlumeCreateWithHTTP((uint64_t)v17, *(const __CFURL **)(a1 + 16), 0, v18, *(const void **)(a1 + 24), *(NSObject **)(a1 + 144), *(_DWORD *)(a1 + 88), v16, (void *)(a1 + 48));
    goto LABEL_44;
  }
LABEL_41:
  BOOL v19 = FigCFHTTPIsDataURL(*(const __CFURL **)(a1 + 16));
  CFTypeRef v18 = cf;
  if (v19) {
    goto LABEL_42;
  }
  uint64_t v20 = FigByteFlumeCustomURLCreateWithURL((uint64_t)v17, *(const __CFURL **)(a1 + 16), 0, cf, *(const void **)(a1 + 24), *(NSObject **)(a1 + 144), *(_DWORD *)(a1 + 88), *(const void **)(a1 + 40), v16, (void *)(a1 + 48));
LABEL_44:
  uint64_t v21 = v20;
  if (v20) {
    goto LABEL_53;
  }
  *(void *)(a1 + 64) = 0;
  uint64_t v22 = FigThreadRegisterAbortAction();
  if (v22)
  {
    uint64_t v21 = v22;
LABEL_66:
    CFTypeID v33 = *(const void **)(a1 + 48);
    if (v33)
    {
      CFRelease(v33);
      *(void *)(a1 + 48) = 0;
    }
    goto LABEL_53;
  }
  int valuePtr = 32;
  CFNumberRef v23 = CFNumberCreate(v17, kCFNumberSInt32Type, &valuePtr);
  uint64_t v24 = FigByteFlumeGetFigBaseObject(*(void *)(a1 + 48));
  uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v25) {
    uint64_t v26 = v25;
  }
  else {
    uint64_t v26 = 0;
  }
  CFTypeID v27 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v26 + 56);
  if (v27) {
    v27(v24, @"FBF_BandwidthSampleCount", v23);
  }
  CFRelease(v23);
  if (*(unsigned char *)(a1 + 101))
  {
    fbfs_FigHTTPOpenCallback(a1, 0, 0);
    uint64_t v21 = 0;
    goto LABEL_53;
  }
  uint64_t v29 = *(void *)(a1 + 48);
  uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v30) {
    uint64_t v31 = v30;
  }
  else {
    uint64_t v31 = 0;
  }
  uint64_t v32 = *(uint64_t (**)(uint64_t, void, uint64_t))(v31 + 40);
  if (!v32)
  {
    uint64_t v21 = 4294954514;
LABEL_65:
    FigThreadUnregisterAbortAction();
    goto LABEL_66;
  }
  uint64_t v21 = v32(v29, fbfs_FigHTTPOpenCallback, a1);
  if (v21) {
    goto LABEL_65;
  }
LABEL_53:
  if (v16) {
    CFRelease(v16);
  }
LABEL_55:
  if (cf) {
    CFRelease(cf);
  }
  return v21;
}

void fbfs_FreeFigHTTPOpenCompletion(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(const void **)(a1 + 48);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(a1 + 48) = 0;
    }
    off_t v3 = *(const void **)(a1 + 16);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1 + 16) = 0;
    }
    int v4 = *(const void **)(a1 + 24);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 24) = 0;
    }
    uint64_t v5 = *(const void **)(a1 + 40);
    if (v5)
    {
      CFRelease(v5);
      *(void *)(a1 + 40) = 0;
    }
    uint64_t v6 = *(const void **)(a1 + 32);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 32) = 0;
    }
    uint64_t v7 = *(const void **)(a1 + 56);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(a1 + 56) = 0;
    }
    uint64_t v8 = *(const void **)(a1 + 104);
    if (v8)
    {
      CFRelease(v8);
      *(void *)(a1 + 104) = 0;
    }
    uint64_t v9 = *(const void **)(a1 + 120);
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 120) = 0;
    }
    CFIndex v10 = *(const void **)(a1 + 128);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(a1 + 128) = 0;
    }
    CFURLRef v11 = *(const void **)(a1 + 136);
    if (v11)
    {
      CFRelease(v11);
      *(void *)(a1 + 136) = 0;
    }
    uint64_t v12 = *(const void **)(a1 + 80);
    if (v12)
    {
      CFRelease(v12);
      *(void *)(a1 + 80) = 0;
    }
    FigHTTPSchedulerRelease(*(dispatch_object_t *)(a1 + 144));
    free((void *)a1);
  }
}

uint64_t fbfs_GetCacheMemForDiskBackedMaxSizeOnce(uint64_t *a1)
{
  size_t v5 = 8;
  unint64_t v6 = 0;
  uint64_t result = sysctlbyname("hw.memsize", &v6, &v5, 0, 0);
  uint64_t v3 = 0x1000000;
  uint64_t v4 = 0x2000000;
  if (v6 <= 0x10000000) {
    uint64_t v4 = 0x1000000;
  }
  if (result != -1) {
    uint64_t v3 = v4;
  }
  *a1 = v3;
  return result;
}

uint64_t fbfs_GetCacheMemMaxSizeOnce(uint64_t *a1)
{
  size_t v7 = 8;
  unint64_t v8 = 0;
  CelestialGetModelSpecificName();
  int v2 = sysctlbyname("hw.memsize", &v8, &v7, 0, 0);
  uint64_t result = FigCFEqual();
  BOOL v5 = (int)(v8 >> 20) <= 2000 || v2 == -1 || result == 0;
  uint64_t v6 = 0x2000000;
  if (!v5) {
    uint64_t v6 = 0x8000000;
  }
  *a1 = v6;
  return result;
}

uint64_t fbfs_OpenAbortAction(uint64_t result)
{
  if (*(void *)(result + 48))
  {
    uint64_t v1 = result;
    uint64_t DefaultLocalCenter = CMNotificationCenterGetDefaultLocalCenter();
    uint64_t v3 = *(void *)(v1 + 48);
    uint64_t GlobalNetworkBufferingRunloop = FigThreadGetGlobalNetworkBufferingRunloop();
    uint64_t v5 = *MEMORY[0x1E4F1CF80];
    return MEMORY[0x1F40DD2F8](fbfs_DeferInvalidate, DefaultLocalCenter, 0, 0, 0, v3, GlobalNetworkBufferingRunloop, v5);
  }
  return result;
}

void fbfs_FigHTTPOpenCallback(uint64_t a1, uint64_t a2, int a3)
{
  CFTypeRef v54 = 0;
  CFTypeRef v55 = 0;
  CFTypeRef v52 = 0;
  CFTypeRef v53 = 0;
  CFTypeRef cf = 0;
  CFHTTPMessageRef response = 0;
  FigThreadUnregisterAbortAction();
  uint64_t v5 = *(void *)(a1 + 48);
  if (!v5) {
    return;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v8 + 48);
  if (v9) {
    v9(v5, @"FBF_URL", v6, &v52);
  }
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFHTTPMessageRef *))(v12 + 48);
  if (v13) {
    v13(v10, @"FBF_HTTPResponseHeaders", v6, &response);
  }
  if (!a3)
  {
LABEL_28:
    uint64_t v23 = *(void *)(a1 + 48);
    uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v24) {
      uint64_t v25 = v24;
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v25 + 48);
    if (v26) {
      v26(v23, @"FBF_EntireLengthAvailableOnDemand", v6, &v53);
    }
    CFTypeRef v27 = v53;
    uint64_t v28 = *MEMORY[0x1E4F1CFD0];
    if (v53 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
    {
      CFDictionaryRef Mutable = CFDictionaryCreateMutable(v6, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionaryRef v34 = Mutable;
      if ((*(unsigned char *)(a1 + 72) & 0x10) != 0) {
        CFDictionarySetValue(Mutable, @"DoNotLogURLs", v27);
      }
      LOWORD(a3) = FigByteStreamCreateForByteFlume(*(const void **)(a1 + 48), v6, v34, &v54);
      if (v34) {
        CFRelease(v34);
      }
    }
    else
    {
      if ((*(unsigned char *)(a1 + 72) & 4) != 0)
      {
        uint64_t v29 = *(void *)(a1 + 32);
        if (v29)
        {
          uint64_t FigBaseObject = FigDiskCacheProviderGetFigBaseObject(v29);
          uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v32 = v31 ? v31 : 0;
          CFTypeID v35 = *(void (**)(uint64_t, __CFString *, uint64_t))(v32 + 56);
          if (v35) {
            v35(FigBaseObject, @"NoPersistentCache", v28);
          }
        }
      }
      LOWORD(a3) = FigCRABSCreate(*(const void **)(a1 + 48), 0, *(const void **)(a1 + 56), *(const void **)(a1 + 32), *(_DWORD *)(a1 + 72), &v55);
      if (!(_WORD)a3)
      {
        CFTypeRef v36 = (CFTypeRef)FigCRABSGetByteStream(v55);
        if (v36) {
          CFTypeRef v36 = CFRetain(v36);
        }
        CFTypeRef v54 = v36;
        uint64_t v37 = *(void *)(a1 + 128);
        uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
        uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v39) {
          uint64_t v40 = v39;
        }
        else {
          uint64_t v40 = 0;
        }
        long long v41 = *(void (**)(uint64_t, void, uint64_t))(v40 + 56);
        if (v41) {
          v41(CMBaseObject, *MEMORY[0x1E4F1FB98], v37);
        }
      }
    }
    goto LABEL_53;
  }
  uint64_t v14 = *(void *)(a1 + 48);
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  CFAllocatorRef v17 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v16 + 48);
  if (v17) {
    v17(v14, @"FBF_LastError", v6, &cf);
  }
  int v18 = *(unsigned __int8 *)(a1 + 92);
  if (*(unsigned char *)(a1 + 92) || !response)
  {
LABEL_25:
    if (v18) {
      a3 = *(_DWORD *)(a1 + 96);
    }
    if ((_WORD)a3) {
      goto LABEL_53;
    }
    goto LABEL_28;
  }
  if (CFHTTPMessageGetResponseStatusCode(response) != 403)
  {
    int v18 = *(unsigned __int8 *)(a1 + 92);
    goto LABEL_25;
  }
  uint64_t v19 = FigByteFlumeGetFigBaseObject(*(void *)(a1 + 48));
  if (v19)
  {
    uint64_t v20 = v19;
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v22 = v21 ? v21 : 0;
    long long v47 = *(void (**)(uint64_t))(v22 + 24);
    if (v47) {
      v47(v20);
    }
  }
  long long v48 = *(const void **)(a1 + 48);
  if (v48)
  {
    CFRelease(v48);
    *(void *)(a1 + 48) = 0;
  }
  *(unsigned char *)(a1 + 92) = 1;
  *(_DWORD *)(a1 + 96) = a3;
  __int16 FlumeAsync = fbfs_CreateFlumeAsync(a1, 0);
  if (!FlumeAsync) {
    goto LABEL_61;
  }
  LOWORD(a3) = FlumeAsync;
LABEL_53:
  (*(void (**)(void, CFTypeRef, void, CFTypeRef, CFTypeRef, CFHTTPMessageRef))a1)(*(void *)(a1 + 8), v54, (__int16)a3, cf, v52, response);
  if ((_WORD)a3)
  {
    uint64_t v42 = FigByteFlumeGetFigBaseObject(*(void *)(a1 + 48));
    if (v42)
    {
      uint64_t v43 = v42;
      uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v45 = v44 ? v44 : 0;
      long long v46 = *(void (**)(uint64_t))(v45 + 24);
      if (v46) {
        v46(v43);
      }
    }
  }
  fbfs_FreeFigHTTPOpenCompletion(a1);
LABEL_61:
  if (cf) {
    CFRelease(cf);
  }
  if (v52) {
    CFRelease(v52);
  }
  if (response) {
    CFRelease(response);
  }
  if (v55) {
    CFRelease(v55);
  }
  if (v54) {
    CFRelease(v54);
  }
  if (v53) {
    CFRelease(v53);
  }
}

uint64_t fbfs_DeferInvalidate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result = FigByteFlumeGetFigBaseObject(a5);
  if (result)
  {
    uint64_t v6 = result;
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v9 = *(void *)(VTable + 8);
    uint64_t result = VTable + 8;
    uint64_t v8 = v9;
    uint64_t v10 = v9 ? v8 : 0;
    uint64_t v11 = *(uint64_t (**)(uint64_t))(v10 + 24);
    if (v11)
    {
      return v11(v6);
    }
  }
  return result;
}

uint64_t FigSteeringManifestCreateRemote()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigSteeringManifest_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E57A0458;
  block[4] = &v3;
  if (FigSteeringManifest_ensureClientEstablished_sFigSteeringRemoteClientSetupOnce != -1) {
    dispatch_once(&FigSteeringManifest_ensureClientEstablished_sFigSteeringRemoteClientSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  if (!v0)
  {
    FigXPCCreateBasicMessage();
    uint64_t v0 = FigSignalErrorAt();
  }
  FigXPCRelease();
  FigXPCRelease();
  return v0;
}

BOOL FigVideoCompositionTimeWindowDurationIsZero(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 12))
  {
    CMTime time1 = *(CMTime *)a1;
    CMTime v3 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &v3)) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 36))
  {
    CMTime time1 = *(CMTime *)(a1 + 24);
    CMTime v3 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &v3)) {
      return 0;
    }
  }
  if (*(unsigned char *)(a1 + 60))
  {
    CMTime time1 = *(CMTime *)(a1 + 48);
    CMTime v3 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &v3)) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a1 + 84) & 1) == 0) {
    return 1;
  }
  CMTime time1 = *(CMTime *)(a1 + 72);
  CMTime v3 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  return CMTimeCompare(&time1, &v3) == 0;
}

BOOL FigVideoCompositionTimeWindowDurationIsZeroWhenSeeking(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 60))
  {
    CMTime time1 = *(CMTime *)(a1 + 48);
    CMTime v3 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &v3)) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a1 + 84) & 1) == 0) {
    return 1;
  }
  CMTime time1 = *(CMTime *)(a1 + 72);
  CMTime v3 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  return CMTimeCompare(&time1, &v3) == 0;
}

BOOL FigVideoCompositionTimeWindowDurationIsZeroWhenNotSeeking(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 12))
  {
    CMTime time1 = *(CMTime *)a1;
    CMTime v3 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare(&time1, &v3)) {
      return 0;
    }
  }
  if ((*(unsigned char *)(a1 + 36) & 1) == 0) {
    return 1;
  }
  CMTime time1 = *(CMTime *)(a1 + 24);
  CMTime v3 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  return CMTimeCompare(&time1, &v3) == 0;
}

BOOL FigVideoCompositionTimeWindowDurationsEqual(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 12) & 1) == 0)
  {
    uint64_t v2 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)a1 = *MEMORY[0x1E4F1FA48];
    *(void *)(a1 + 16) = *(void *)(v2 + 16);
  }
  CMTime v3 = (CMTime *)(a1 + 24);
  if ((*(unsigned char *)(a1 + 36) & 1) == 0)
  {
    uint64_t v4 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)&v3->uint64_t value = *MEMORY[0x1E4F1FA48];
    *(void *)(a1 + 40) = *(void *)(v4 + 16);
  }
  uint64_t v5 = (CMTime *)(a1 + 48);
  if ((*(unsigned char *)(a1 + 60) & 1) == 0)
  {
    uint64_t v6 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)&v5->uint64_t value = *MEMORY[0x1E4F1FA48];
    *(void *)(a1 + 64) = *(void *)(v6 + 16);
  }
  uint64_t v7 = (CMTime *)(a1 + 72);
  if ((*(unsigned char *)(a1 + 84) & 1) == 0)
  {
    uint64_t v8 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)&v7->uint64_t value = *MEMORY[0x1E4F1FA48];
    *(void *)(a1 + 88) = *(void *)(v8 + 16);
  }
  if ((*(unsigned char *)(a2 + 12) & 1) == 0)
  {
    uint64_t v9 = MEMORY[0x1E4F1FA48];
    *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
    *(void *)(a2 + 16) = *(void *)(v9 + 16);
  }
  uint64_t v10 = (_OWORD *)(a2 + 24);
  if ((*(unsigned char *)(a2 + 36) & 1) == 0)
  {
    uint64_t v11 = MEMORY[0x1E4F1FA48];
    *uint64_t v10 = *MEMORY[0x1E4F1FA48];
    *(void *)(a2 + 40) = *(void *)(v11 + 16);
  }
  uint64_t v12 = (_OWORD *)(a2 + 48);
  if ((*(unsigned char *)(a2 + 60) & 1) == 0)
  {
    uint64_t v13 = MEMORY[0x1E4F1FA48];
    _OWORD *v12 = *MEMORY[0x1E4F1FA48];
    *(void *)(a2 + 64) = *(void *)(v13 + 16);
  }
  uint64_t v14 = (_OWORD *)(a2 + 72);
  if ((*(unsigned char *)(a2 + 84) & 1) == 0)
  {
    uint64_t v15 = MEMORY[0x1E4F1FA48];
    _OWORD *v14 = *MEMORY[0x1E4F1FA48];
    *(void *)(a2 + 88) = *(void *)(v15 + 16);
  }
  CMTime time1 = *(CMTime *)a1;
  CMTime v17 = *(CMTime *)a2;
  if (CMTimeCompare(&time1, &v17)) {
    return 0;
  }
  CMTime time1 = *v3;
  CMTime v17 = *(CMTime *)v10;
  if (CMTimeCompare(&time1, &v17)) {
    return 0;
  }
  CMTime time1 = *v5;
  CMTime v17 = *(CMTime *)v12;
  if (CMTimeCompare(&time1, &v17)) {
    return 0;
  }
  CMTime time1 = *v7;
  CMTime v17 = *(CMTime *)v14;
  return CMTimeCompare(&time1, &v17) == 0;
}

uint64_t FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(CFTypeRef cf, int a2, _OWORD *a3)
{
  long long v29 = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v3 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(void *)uint64_t v30 = v3;
  *(_OWORD *)&v30[8] = v29;
  *(void *)&v30[24] = v3;
  long long v31 = v29;
  *(void *)uint64_t v32 = v3;
  long long v25 = v29;
  *(_OWORD *)&v32[8] = v29;
  *(void *)&v32[24] = v3;
  if (!a3) {
    return 0;
  }
  if (!cf) {
    goto LABEL_36;
  }
  CFTypeID v7 = CFGetTypeID(cf);
  if (v7 == CFArrayGetTypeID())
  {
    CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
    if (Count >= 1)
    {
      CFIndex v9 = Count;
      CFIndex v10 = 0;
      while (1)
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v10);
        int v28 = 0;
        if (!ValueAtIndex) {
          return FigSignalErrorAt();
        }
        CFTypeID v12 = CFGetTypeID(ValueAtIndex);
        if (v12 != CFDictionaryGetTypeID() || !FigCFDictionaryGetInt32IfPresent()) {
          return FigSignalErrorAt();
        }
        if (v28 == a2) {
          break;
        }
        if (v9 == ++v10) {
          goto LABEL_36;
        }
      }
      Boolean Value = (const void *)FigCFDictionaryGetValue();
      if (Value)
      {
        CFTypeID v14 = CFGetTypeID(Value);
        if (v14 != CFDictionaryGetTypeID()) {
          return FigSignalErrorAt();
        }
      }
      uint64_t v15 = (const void *)FigCFDictionaryGetValue();
      if (v15)
      {
        CFTypeID v16 = CFGetTypeID(v15);
        if (v16 != CFDictionaryGetTypeID()) {
          return FigSignalErrorAt();
        }
      }
      CMTime v17 = (const void *)FigCFDictionaryGetValue();
      if (v17)
      {
        CFTypeID v18 = CFGetTypeID(v17);
        if (v18 != CFDictionaryGetTypeID()) {
          return FigSignalErrorAt();
        }
      }
      uint64_t v19 = (const void *)FigCFDictionaryGetValue();
      if (v19)
      {
        CFTypeID v20 = CFGetTypeID(v19);
        if (v20 != CFDictionaryGetTypeID()) {
          return FigSignalErrorAt();
        }
      }
      FigCFDictionaryGetCMTimeIfPresent();
      FigCFDictionaryGetCMTimeIfPresent();
      FigCFDictionaryGetCMTimeIfPresent();
      FigCFDictionaryGetCMTimeIfPresent();
      if ((BYTE12(v29) & 1) == 0) {
        *(void *)uint64_t v30 = v3;
      }
      if ((v30[20] & 1) == 0)
      {
        *(_OWORD *)&v30[8] = v29;
        *(void *)&v30[24] = v3;
      }
      if ((BYTE12(v31) & 1) == 0)
      {
        long long v31 = v29;
        *(void *)uint64_t v32 = v3;
      }
      if ((v32[20] & 1) == 0)
      {
        *(_OWORD *)&v32[8] = v29;
        *(void *)&v32[24] = v3;
      }
      if ((BYTE12(v29) & 0x1D) != 1) {
        return FigSignalErrorAt();
      }
      if ((v30[20] & 0x1D) != 1) {
        return FigSignalErrorAt();
      }
      if ((BYTE12(v31) & 0x1D) != 1) {
        return FigSignalErrorAt();
      }
      if ((v32[20] & 0x1D) != 1) {
        return FigSignalErrorAt();
      }
      *(_OWORD *)&time1.uint64_t value = v29;
      time1.CMTimeEpoch epoch = *(void *)v30;
      *(_OWORD *)&time2.uint64_t value = v29;
      time2.CMTimeEpoch epoch = v3;
      if (CMTimeCompare(&time1, &time2) < 0) {
        return FigSignalErrorAt();
      }
      CMTime time1 = *(CMTime *)&v30[8];
      *(_OWORD *)&time2.uint64_t value = v25;
      time2.CMTimeEpoch epoch = v3;
      if (CMTimeCompare(&time1, &time2) < 0) {
        return FigSignalErrorAt();
      }
      *(_OWORD *)&time1.uint64_t value = v31;
      time1.CMTimeEpoch epoch = *(void *)v32;
      *(_OWORD *)&time2.uint64_t value = v25;
      time2.CMTimeEpoch epoch = v3;
      if (CMTimeCompare(&time1, &time2) < 0) {
        return FigSignalErrorAt();
      }
      CMTime time1 = *(CMTime *)&v32[8];
      *(_OWORD *)&time2.uint64_t value = v25;
      time2.CMTimeEpoch epoch = v3;
      if (CMTimeCompare(&time1, &time2) < 0) {
        return FigSignalErrorAt();
      }
    }
LABEL_36:
    uint64_t result = 0;
    long long v22 = v31;
    a3[2] = *(_OWORD *)&v30[16];
    a3[3] = v22;
    long long v23 = *(_OWORD *)&v32[16];
    a3[4] = *(_OWORD *)v32;
    a3[5] = v23;
    long long v24 = *(_OWORD *)v30;
    *a3 = v29;
    a3[1] = v24;
    return result;
  }

  return FigSignalErrorAt();
}

uint64_t FigVideoCompositionWindowSerializedConfigurationContainsTrack(uint64_t result, int a2)
{
  if (result)
  {
    CFArrayRef v3 = (const __CFArray *)result;
    CFTypeID v4 = CFGetTypeID((CFTypeRef)result);
    if (v4 == CFArrayGetTypeID())
    {
      CFIndex Count = CFArrayGetCount(v3);
      if (Count >= 1)
      {
        CFIndex v6 = Count;
        for (CFIndex i = 0; v6 != i; ++i)
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v3, i);
          if (!ValueAtIndex) {
            break;
          }
          CFTypeID v9 = CFGetTypeID(ValueAtIndex);
          if (v9 != CFDictionaryGetTypeID() || !FigCFDictionaryGetInt32IfPresent()) {
            break;
          }
          if (!a2) {
            return 1;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

BOOL FigVideoCompositionWindowSerializedConfigurationForTracksEqual(CFTypeRef cf, CFTypeRef a2)
{
  if (cf == a2) {
    return 1;
  }
  uint64_t v26 = v2;
  uint64_t v27 = v3;
  BOOL result = 0;
  if (cf && a2)
  {
    CFTypeID v7 = CFGetTypeID(cf);
    if (v7 == CFArrayGetTypeID())
    {
      CFTypeID v8 = CFGetTypeID(a2);
      if (v8 == CFArrayGetTypeID())
      {
        CFIndex Count = CFArrayGetCount((CFArrayRef)cf);
        if (Count == CFArrayGetCount((CFArrayRef)a2))
        {
          if (Count < 1) {
            return 1;
          }
          CFIndex v10 = 0;
          long long v14 = *MEMORY[0x1E4F1FA48];
          uint64_t v11 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          while (1)
          {
            int v25 = 0;
            long long v21 = v14;
            *(void *)&v22[0] = v11;
            *(_OWORD *)((char *)v22 + 8) = v14;
            *((void *)&v22[1] + 1) = v11;
            long long v23 = v14;
            *(void *)&v24[0] = v11;
            *((void *)&v24[1] + 1) = v11;
            *(_OWORD *)((char *)v24 + 8) = v14;
            long long v17 = v14;
            *(void *)CFTypeID v18 = v11;
            *(_OWORD *)&v18[8] = v14;
            *(void *)&v18[24] = v11;
            long long v19 = v14;
            *(void *)CFTypeID v20 = v11;
            *(void *)&v20[24] = v11;
            *(_OWORD *)&v20[8] = v14;
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)cf, v10);
            if (!ValueAtIndex) {
              break;
            }
            CFTypeID v13 = CFGetTypeID(ValueAtIndex);
            if (v13 != CFDictionaryGetTypeID()
              || !FigCFDictionaryGetInt32IfPresent()
              || FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(cf, v25, &v21)
              || !FigVideoCompositionWindowSerializedConfigurationContainsTrack((uint64_t)a2, v25)
              || FigVideoCompositionWindowGetFromSerializedConfigurationForTrack(a2, v25, &v17))
            {
              break;
            }
            v16[2] = v22[1];
            v16[3] = v23;
            void v16[4] = v24[0];
            v16[5] = v24[1];
            v16[0] = v21;
            v16[1] = v22[0];
            v15[2] = *(_OWORD *)&v18[16];
            v15[3] = v19;
            v15[4] = *(_OWORD *)v20;
            v15[5] = *(_OWORD *)&v20[16];
            v15[0] = v17;
            v15[1] = *(_OWORD *)v18;
            BOOL result = FigVideoCompositionTimeWindowDurationsEqual((uint64_t)v16, (uint64_t)v15);
            if (result)
            {
              ++v10;
              BOOL result = 1;
              if (Count != v10) {
                continue;
              }
            }
            return result;
          }
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t FigAlternateFilterMonitorCreateForPlaybackBitrate(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, _OWORD *a5, _OWORD *a6, const void *a7, uint64_t a8, CFTypeRef *a9)
{
  CFTypeRef cf = 0;
  CFTypeRef v49 = 0;
  if (!a9 || !a4) {
    goto LABEL_21;
  }
  FigAlternateFilterMonitorGetClassID();
  uint64_t inserted = CMDerivedObjectCreate();
  if (inserted) {
    goto LABEL_22;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = FigReentrantMutexCreate();
  *(void *)uint64_t DerivedStorage = v17;
  if (!v17) {
    goto LABEL_21;
  }
  uint64_t v18 = FigDispatchQueueCreateWithPriority();
  *(void *)(DerivedStorage + 24) = v18;
  if (!v18) {
    goto LABEL_21;
  }
  *(void *)(DerivedStorage + 32) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  long long v19 = a5[1];
  *(_OWORD *)(DerivedStorage + 432) = *a5;
  *(_OWORD *)(DerivedStorage + 448) = v19;
  long long v20 = a5[5];
  long long v22 = a5[2];
  long long v21 = a5[3];
  *(_OWORD *)(DerivedStorage + 496) = a5[4];
  *(_OWORD *)(DerivedStorage + 512) = v20;
  *(_OWORD *)(DerivedStorage + 464) = v22;
  *(_OWORD *)(DerivedStorage + 480) = v21;
  long long v23 = a5[9];
  long long v25 = a5[6];
  long long v24 = a5[7];
  *(_OWORD *)(DerivedStorage + 560) = a5[8];
  *(_OWORD *)(DerivedStorage + 576) = v23;
  *(_OWORD *)(DerivedStorage + 528) = v25;
  *(_OWORD *)(DerivedStorage + 544) = v24;
  long long v26 = a5[13];
  long long v28 = a5[10];
  long long v27 = a5[11];
  *(_OWORD *)(DerivedStorage + 624) = a5[12];
  *(_OWORD *)(DerivedStorage + 640) = v26;
  *(_OWORD *)(DerivedStorage + 592) = v28;
  *(_OWORD *)(DerivedStorage + 608) = v27;
  long long v29 = a6[1];
  *(_OWORD *)(DerivedStorage + 656) = *a6;
  *(_OWORD *)(DerivedStorage + 672) = v29;
  long long v30 = a6[2];
  long long v31 = a6[3];
  long long v32 = a6[5];
  *(_OWORD *)(DerivedStorage + 720) = a6[4];
  *(_OWORD *)(DerivedStorage + 736) = v32;
  *(_OWORD *)(DerivedStorage + 688) = v30;
  *(_OWORD *)(DerivedStorage + 704) = v31;
  long long v33 = a6[6];
  long long v34 = a6[7];
  long long v35 = a6[9];
  *(_OWORD *)(DerivedStorage + 784) = a6[8];
  *(_OWORD *)(DerivedStorage + 800) = v35;
  *(_OWORD *)(DerivedStorage + 752) = v33;
  *(_OWORD *)(DerivedStorage + 768) = v34;
  long long v36 = a6[10];
  long long v37 = a6[11];
  long long v38 = a6[13];
  *(_OWORD *)(DerivedStorage + 848) = a6[12];
  *(_OWORD *)(DerivedStorage + 864) = v38;
  *(_OWORD *)(DerivedStorage + 816) = v36;
  *(_OWORD *)(DerivedStorage + 832) = v37;
  CMTimeMakeWithSeconds(&v47, 10.0, 1000);
  *(CMTime *)(DerivedStorage + 148) = v47;
  *(void *)(DerivedStorage + 8) = FigCFWeakReferenceHolderCreateWithReferencedObject();
  *(void *)(DerivedStorage + 16) = a3;
  *(_DWORD *)(DerivedStorage + 192) = 0x7FFFFFFF;
  uint64_t v39 = MEMORY[0x1E4F1F9F8];
  long long v40 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)(DerivedStorage + 336) = *MEMORY[0x1E4F1F9F8];
  uint64_t v41 = *(void *)(v39 + 16);
  *(void *)(DerivedStorage + 352) = v41;
  *(_OWORD *)(DerivedStorage + 384) = v40;
  *(void *)(DerivedStorage + 400) = v41;
  *(_DWORD *)(DerivedStorage + 416) = -1;
  if (a7) {
    CFTypeRef v42 = CFRetain(a7);
  }
  else {
    CFTypeRef v42 = 0;
  }
  *(void *)(DerivedStorage + 408) = v42;
  *(unsigned char *)(DerivedStorage + 423) = 1;
  *(void *)(DerivedStorage + 72) = &stru_1EE53F4B8;
  *(void *)(DerivedStorage + 896) = 1000000000 * (int)FigGetCFPreferenceNumberWithDefault();
  *(void *)(DerivedStorage + 208) = 0x3FF0000000000000;
  *(unsigned char *)(DerivedStorage + 130) = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(DerivedStorage + 408), @"useStartupScoreForInitialAlternate");
  *(unsigned char *)(DerivedStorage + 130) = FigGetCFPreferenceNumberWithDefault();
  *(void *)(DerivedStorage + 136) = 0x4008000000000000;
  *(_DWORD *)(DerivedStorage + 144) = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(DerivedStorage + 408), @"switchUpStallRiskFilterChoice");
  *(_DWORD *)(DerivedStorage + 144) = FigGetCFPreferenceNumberWithDefault();
  *(unsigned char *)(DerivedStorage + 129) = FigRCLGetNumberWithDefault(*(const __CFDictionary **)(DerivedStorage + 408), @"enablePairedLLABR");
  *(unsigned char *)(DerivedStorage + 129) = FigGetCFPreferenceNumberWithDefault();
  *(void *)(DerivedStorage + 256) = 0x10000000000000;
  *(void *)(DerivedStorage + 40) = CFRetain(a4);
  uint64_t inserted = FigNetworkHistoryObserverCreate();
  if (inserted) {
    goto LABEL_22;
  }
  if (!*(void *)(DerivedStorage + 48)) {
    goto LABEL_21;
  }
  uint64_t v43 = (const void **)(DerivedStorage + 80);
  uint64_t inserted = FigAlternatePassthroughFilterCreate(a1, @"MonitorPassThoughFilter", 601, (void *)(DerivedStorage + 80));
  if (inserted) {
    goto LABEL_22;
  }
  if (!*v43)
  {
LABEL_21:
    uint64_t inserted = FigSignalErrorAt();
    goto LABEL_22;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterAddWeakListener();
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t inserted = FigAlternateFilterTreeCreate(AllocatorForMedia, &cf);
  if (inserted)
  {
LABEL_22:
    uint64_t Filter = inserted;
    goto LABEL_23;
  }
  if (!cf) {
    goto LABEL_21;
  }
  uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, *v43, 500);
  if (inserted) {
    goto LABEL_22;
  }
  uint64_t Filter = FigAlternateFilterTreeCreateFilter(cf, @"BitrateFilterTree", 600, (void *)(DerivedStorage + 56));
  if (!Filter)
  {
    fampb_setupDryTimer((uint64_t)v49);
    *a9 = v49;
    CFTypeRef v49 = 0;
    goto LABEL_18;
  }
LABEL_23:
  if (v49) {
    CFRelease(v49);
  }
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  return Filter;
}

void fampb_networkHistoryObserverCallbackUnlocked(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v4)
  {
    uint64_t v5 = (const void *)v4;
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    uint64_t MainSegmentBytesInTransitUnlocked = fampb_getMainSegmentBytesInTransitUnlocked();
    MEMORY[0x19970E290](*DerivedStorage);
    DerivedStorage[22] = MainSegmentBytesInTransitUnlocked;
    if (*((unsigned char *)DerivedStorage + 396)) {
      long long v8 = *((_OWORD *)DerivedStorage + 24);
    }
    else {
      CMTimebaseGetTimeClampedAboveAnchorTime();
    }
    if ((BYTE12(v8) & 1) != 0 && (DerivedStorage[111] == a3 || *((unsigned char *)DerivedStorage + 128))) {
      fampb_attemptToSwitch(v5, DerivedStorage[110] == a3, 0);
    }
    MEMORY[0x19970E2B0](*DerivedStorage);
    CFRelease(v5);
  }
}

uint64_t fampb_validAlternateHasChanged(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (dword_1E9351230)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fampb_setBandwidthConditions(a2);
  return MEMORY[0x19970E2B0](*DerivedStorage);
}

double fampb_setupDryTimer(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 420))
  {
    uint64_t v4 = DerivedStorage;
    CMTime lhs = *(CMTime *)(DerivedStorage + 336);
    CMTime rhs = *(CMTime *)(DerivedStorage + 148);
    CMTimeSubtract(&time1, &lhs, &rhs);
    lhs.uint64_t value = time1.value;
    CMTimeFlags flags = time1.flags;
    lhs.uint64_t timescale = time1.timescale;
    if (time1.flags)
    {
      CMTimeEpoch epoch = time1.epoch;
      if (*(unsigned char *)(v4 + 396)) {
        CMTime v7 = *(CMTime *)(v4 + 384);
      }
      else {
        CMTimebaseGetTimeClampedAboveAnchorTime();
      }
      time1.uint64_t value = lhs.value;
      time1.uint64_t timescale = lhs.timescale;
      time1.CMTimeFlags flags = flags;
      time1.CMTimeEpoch epoch = epoch;
      if ((CMTimeCompare(&time1, &v7) & 0x80000000) == 0)
      {
        time1.uint64_t value = lhs.value;
        time1.uint64_t timescale = lhs.timescale;
        time1.CMTimeFlags flags = flags;
        time1.CMTimeEpoch epoch = epoch;
        *(void *)&double result = fampb_primeTimeTillDryTimer(a1, &time1).n128_u64[0];
      }
    }
  }
  return result;
}

void FigCFRelease_5(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t FigAlternatePlaybackBitrateMonitorSetStreamDuration(const void *a1, CMTime *a2, char a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t MainSegmentBytesInTransitUnlocked = fampb_getMainSegmentBytesInTransitUnlocked();
  MEMORY[0x19970E290](*DerivedStorage);
  memset(&v13, 0, sizeof(v13));
  CMTime lhs = *a2;
  CMTime v11 = *(CMTime *)((unsigned char *)DerivedStorage + 14);
  CMTimeSubtract(&v13, &lhs, &v11);
  *((unsigned char *)DerivedStorage + 422) = a3;
  long long v8 = *(_OWORD *)&a2->value;
  DerivedStorage[44] = a2->epoch;
  *((_OWORD *)DerivedStorage + 21) = v8;
  DerivedStorage[22] = MainSegmentBytesInTransitUnlocked;
  v9.n128_f64[0] = fampb_setupDryTimer((uint64_t)a1);
  if (*((unsigned char *)DerivedStorage + 128)) {
    fampb_attemptToSwitch(a1, 0, 0);
  }
  MEMORY[0x19970E2B0](*DerivedStorage, v9);
  return 0;
}

uint64_t fampb_getMainSegmentBytesInTransitUnlocked()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = 0;
  CFNumberRef number = 0;
  if (*(unsigned char *)(DerivedStorage + 128))
  {
    uint64_t v1 = (void *)DerivedStorage;
    MEMORY[0x19970E290](*(void *)DerivedStorage);
    if (*((unsigned char *)v1 + 128) && v1[4])
    {
      uint64_t v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
      MEMORY[0x19970E2B0](*v1);
      if (v2)
      {
        uint64_t FigBaseObject = FigBytePumpGetFigBaseObject(v2);
        uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v4) {
          uint64_t v5 = v4;
        }
        else {
          uint64_t v5 = 0;
        }
        CFIndex v6 = *(uint64_t (**)(uint64_t, uint64_t, void, CFNumberRef *))(v5 + 48);
        if (v6)
        {
          int v7 = v6(FigBaseObject, 0x1EE53EB98, *MEMORY[0x1E4F1CF80], &number);
          CFNumberRef v8 = number;
          if (!v7)
          {
            CFNumberGetValue(number, kCFNumberSInt64Type, &v10);
            CFNumberRef v8 = number;
          }
          if (v8) {
            CFRelease(v8);
          }
        }
        CFRelease(v2);
      }
    }
    else
    {
      MEMORY[0x19970E2B0](*v1);
    }
  }
  return v10;
}

void fampb_attemptToSwitch(const void *a1, int a2, char *a3)
{
  uint64_t v155 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  memset(&v117, 0, sizeof(v117));
  fampb_calculateDuration(DerivedStorage, &v117);
  int PeakBitRate = FigAlternateGetPeakBitRate(*(void *)(DerivedStorage + 88));
  int ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(*(void *)(DerivedStorage + 88));
  uint64_t v116 = 0;
  if (*(uint64_t *)(DerivedStorage + 904) <= 0) {
    uint64_t v9 = 100000;
  }
  else {
    uint64_t v9 = *(void *)(DerivedStorage + 904);
  }
  char v10 = *(unsigned char *)(DerivedStorage + 423);
  if (!v10) {
    goto LABEL_9;
  }
  if ((v117.flags & 1) == 0) {
    goto LABEL_8;
  }
  int v11 = ExpectedAverageBitrate;
  double v12 = *(double *)(DerivedStorage + 208);
  uint64_t v13 = CMBaseObjectGetDerivedStorage();
  if (*(int *)(v13 + 424) >= 1 && *(float *)(v13 + 196) == 0.0) {
    goto LABEL_8;
  }
  if (fampb_getPredictionBandwidth(DerivedStorage, &v116)) {
    goto LABEL_8;
  }
  double v14 = v12 * (double)PeakBitRate;
  uint64_t v15 = v116;
  *(void *)(DerivedStorage + 184) = v116;
  double v16 = (double)v15;
  float v17 = fabsf(*(float *)(DerivedStorage + 196));
  if (v17 <= 1.0) {
    float v17 = 1.0;
  }
  double v18 = ceilf(v17);
  long long v19 = *(OpaqueCMTimebase **)(DerivedStorage + 328);
  if (v19) {
    double Rate = CMTimebaseGetRate(v19);
  }
  else {
    double Rate = 0.0;
  }
  int v21 = (int)v14;
  float v22 = Rate;
  *(float *)(DerivedStorage + 200) = v22;
  double v23 = v16 / v18;
  if (*(unsigned char *)(DerivedStorage + 128) && *(unsigned char *)(DerivedStorage + 129))
  {
    CMTime time = v117;
    BOOL shouldSwitchUpConcurrently = fampb_shouldSwitchUpConcurrently(DerivedStorage + 80, v116, v9, &time);
    int v21 = (int)v14;
    int v25 = shouldSwitchUpConcurrently;
  }
  else
  {
    int v25 = 1;
  }
  uint64_t v26 = (uint64_t)v23;
  if (!a2)
  {
    if (*(unsigned char *)(DerivedStorage + 128))
    {
      if (dword_1E9351230)
      {
        int v102 = v21;
        int v109 = v11;
        uint64_t v105 = v9;
        LODWORD(v121.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
        LOBYTE(type.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int value = v121.value;
        if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, type.value)) {
          unsigned int v42 = value;
        }
        else {
          unsigned int v42 = value & 0xFFFFFFFE;
        }
        if (v42)
        {
          uint64_t v93 = *(void *)(DerivedStorage + 72);
          uint64_t v96 = v116;
          uint64_t v99 = *(void *)(DerivedStorage + 208);
          CMTime time = v117;
          Float64 Seconds = CMTimeGetSeconds(&time);
          CMTime time = *(CMTime *)(DerivedStorage + 336);
          Float64 v44 = CMTimeGetSeconds(&time);
          CMTimebaseGetTime(&v113, *(CMTimebaseRef *)(DerivedStorage + 328));
          Float64 v45 = CMTimeGetSeconds(&v113);
          Float64 v46 = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328));
          CMTime v47 = a3;
          int v48 = *(unsigned __int8 *)(DerivedStorage + 422);
          int v49 = *(unsigned __int8 *)(DerivedStorage + 420);
          CMTime time = *(CMTime *)(DerivedStorage + 148);
          Float64 v50 = CMTimeGetSeconds(&time);
          int v51 = *(unsigned __int8 *)(DerivedStorage + 421);
          int v52 = *(unsigned __int8 *)(DerivedStorage + 128);
          LODWORD(time.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 136319490;
          *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fampb_attemptToSwitch";
          LOWORD(time.flags) = 2048;
          *(void *)((char *)&time.flags + 2) = a1;
          HIWORD(time.epoch) = 2112;
          uint64_t v123 = v93;
          __int16 v124 = 2048;
          uint64_t v125 = v96;
          __int16 v126 = 2048;
          uint64_t v127 = v99;
          __int16 v128 = 1024;
          int v129 = PeakBitRate;
          __int16 v130 = 1024;
          int v131 = v109;
          __int16 v132 = 1024;
          int v133 = v102;
          __int16 v134 = 2048;
          Float64 v135 = Seconds;
          __int16 v136 = 2048;
          Float64 v137 = v44;
          __int16 v138 = 2048;
          Float64 v139 = v45;
          __int16 v140 = 2048;
          Float64 v141 = v46;
          __int16 v142 = 1024;
          int v143 = v48;
          a3 = v47;
          __int16 v144 = 1024;
          int v145 = v49;
          __int16 v146 = 2048;
          Float64 v147 = v50;
          __int16 v148 = 1024;
          int v149 = v51;
          __int16 v150 = 1024;
          int v151 = v52;
          __int16 v152 = 2048;
          uint64_t v153 = v105;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v83 = v116;
      uint64_t v84 = CMBaseObjectGetDerivedStorage();
      uint64_t v85 = v84;
      if (*(uint64_t *)(v84 + 904) <= 0) {
        uint64_t v86 = 100000;
      }
      else {
        uint64_t v86 = *(void *)(v84 + 904);
      }
      memset(&time, 0, sizeof(time));
      fampb_calculateDuration(v84, &time);
      CMTime v154 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      CMTime v121 = time;
      if (!fampb_shouldSwitchDownConcurrently(v85 + 80, v83, v86, (uint64_t)&v121, &v154))
      {
        if (v154.flags)
        {
          memset(&v121, 0, sizeof(v121));
          if (*(unsigned char *)(v85 + 396)) {
            CMTime v121 = *(CMTime *)(v85 + 384);
          }
          else {
            CMTimebaseGetTimeClampedAboveAnchorTime();
          }
          CMTime lhs = v121;
          CMTime rhs = v154;
          CMTimeAdd(&type, &lhs, &rhs);
          fampb_primeTimeTillDryTimer((uint64_t)a1, &type);
        }
        goto LABEL_8;
      }
      CMTime v87 = *(const void **)(v85 + 96);
      if (v87)
      {
        CFRelease(v87);
        *(void *)(v85 + 96) = 0;
        if (fampb_setBandwidthConditions((uint64_t)a1)) {
          goto LABEL_8;
        }
        int v88 = 2;
      }
      else
      {
        int v88 = 0;
      }
      fampb_configurePlaybackFilterAsync(a1, v83, v88);
      char v10 = 1;
      goto LABEL_9;
    }
    if (v26 < v21 && !*(unsigned char *)(DerivedStorage + 422))
    {
      int v67 = v21;
      CMTime time = v117;
      CMTime v154 = *(CMTime *)(DerivedStorage + 148);
      double v68 = CMTimeGetSeconds(&time);
      CMTime time = v154;
      if (v68 <= CMTimeGetSeconds(&time))
      {
        if (dword_1E9351230)
        {
          int v111 = v11;
          LODWORD(v121.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
          LOBYTE(type.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
          uint64_t v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v70 = v121.value;
          if (os_log_type_enabled(v69, type.value)) {
            unsigned int v71 = v70;
          }
          else {
            unsigned int v71 = v70 & 0xFFFFFFFE;
          }
          if (v71)
          {
            uint64_t v107 = v9;
            uint64_t v72 = *(void *)(DerivedStorage + 72);
            uint64_t v94 = v116;
            uint64_t v98 = *(void *)(DerivedStorage + 208);
            CMTime time = v117;
            Float64 v73 = CMTimeGetSeconds(&time);
            CMTime time = *(CMTime *)(DerivedStorage + 336);
            Float64 v74 = CMTimeGetSeconds(&time);
            CMTimebaseGetTime(&v112, *(CMTimebaseRef *)(DerivedStorage + 328));
            Float64 v75 = CMTimeGetSeconds(&v112);
            Float64 v76 = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328));
            int v77 = *(unsigned __int8 *)(DerivedStorage + 422);
            int v78 = *(unsigned __int8 *)(DerivedStorage + 420);
            CMTime time = *(CMTime *)(DerivedStorage + 148);
            Float64 v79 = CMTimeGetSeconds(&time);
            int v80 = *(unsigned __int8 *)(DerivedStorage + 421);
            int v81 = *(unsigned __int8 *)(DerivedStorage + 128);
            LODWORD(time.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 136319490;
            *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fampb_attemptToSwitch";
            LOWORD(time.flags) = 2048;
            *(void *)((char *)&time.flags + 2) = a1;
            HIWORD(time.epoch) = 2112;
            uint64_t v123 = v72;
            __int16 v124 = 2048;
            uint64_t v125 = v94;
            __int16 v126 = 2048;
            uint64_t v127 = v98;
            __int16 v128 = 1024;
            int v129 = PeakBitRate;
            __int16 v130 = 1024;
            int v131 = v111;
            __int16 v132 = 1024;
            int v133 = v67;
            __int16 v134 = 2048;
            Float64 v135 = v73;
            __int16 v136 = 2048;
            Float64 v137 = v74;
            __int16 v138 = 2048;
            Float64 v139 = v75;
            __int16 v140 = 2048;
            Float64 v141 = v76;
            __int16 v142 = 1024;
            int v143 = v77;
            __int16 v144 = 1024;
            int v145 = v78;
            __int16 v146 = 2048;
            Float64 v147 = v79;
            __int16 v148 = 1024;
            int v149 = v80;
            __int16 v150 = 1024;
            int v151 = v81;
            __int16 v152 = 2048;
            uint64_t v153 = v107;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v82 = v116;
        uint64_t v89 = a1;
        int v90 = 0;
        goto LABEL_76;
      }
    }
LABEL_8:
    char v10 = 0;
    goto LABEL_9;
  }
  if (!*(unsigned char *)(DerivedStorage + 128))
  {
    if (v26 > v21)
    {
      char v10 = *(unsigned char *)(DerivedStorage + 420);
      if (!v10) {
        goto LABEL_9;
      }
      if (dword_1E9351230)
      {
        int v103 = v21;
        int v110 = v11;
        uint64_t v106 = v9;
        LODWORD(v121.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
        LOBYTE(type.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
        CFTypeRef v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v54 = v121.value;
        if (os_log_type_enabled(v53, type.value)) {
          unsigned int v55 = v54;
        }
        else {
          unsigned int v55 = v54 & 0xFFFFFFFE;
        }
        if (v55)
        {
          uint64_t v56 = *(void *)(DerivedStorage + 72);
          uint64_t v97 = v116;
          uint64_t v100 = *(void *)(DerivedStorage + 208);
          CMTime time = v117;
          Float64 v57 = CMTimeGetSeconds(&time);
          CMTime time = *(CMTime *)(DerivedStorage + 336);
          Float64 v58 = CMTimeGetSeconds(&time);
          CMTimebaseGetTime(&v114, *(CMTimebaseRef *)(DerivedStorage + 328));
          Float64 v59 = CMTimeGetSeconds(&v114);
          Float64 v60 = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328));
          uint64_t v61 = a3;
          int v62 = *(unsigned __int8 *)(DerivedStorage + 422);
          int v63 = *(unsigned __int8 *)(DerivedStorage + 420);
          CMTime time = *(CMTime *)(DerivedStorage + 148);
          Float64 v64 = CMTimeGetSeconds(&time);
          int v65 = *(unsigned __int8 *)(DerivedStorage + 421);
          int v66 = *(unsigned __int8 *)(DerivedStorage + 128);
          LODWORD(time.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 136319490;
          *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fampb_attemptToSwitch";
          LOWORD(time.flags) = 2048;
          *(void *)((char *)&time.flags + 2) = a1;
          HIWORD(time.epoch) = 2112;
          uint64_t v123 = v56;
          __int16 v124 = 2048;
          uint64_t v125 = v97;
          __int16 v126 = 2048;
          uint64_t v127 = v100;
          __int16 v128 = 1024;
          int v129 = PeakBitRate;
          __int16 v130 = 1024;
          int v131 = v110;
          __int16 v132 = 1024;
          int v133 = v103;
          __int16 v134 = 2048;
          Float64 v135 = v57;
          __int16 v136 = 2048;
          Float64 v137 = v58;
          __int16 v138 = 2048;
          Float64 v139 = v59;
          __int16 v140 = 2048;
          Float64 v141 = v60;
          __int16 v142 = 1024;
          int v143 = v62;
          a3 = v61;
          __int16 v144 = 1024;
          int v145 = v63;
          __int16 v146 = 2048;
          Float64 v147 = v64;
          __int16 v148 = 1024;
          int v149 = v65;
          __int16 v150 = 1024;
          int v151 = v66;
          __int16 v152 = 2048;
          uint64_t v153 = v106;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v82 = (uint64_t)((double)v116 / 1.1);
      uint64_t v116 = v82;
      goto LABEL_75;
    }
    goto LABEL_8;
  }
  if (dword_1E9351230)
  {
    int v101 = v21;
    int v108 = v11;
    uint64_t v104 = v9;
    LODWORD(v121.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
    LOBYTE(type.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
    long long v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v28 = v121.value;
    if (os_log_type_enabled(v27, type.value)) {
      unsigned int v29 = v28;
    }
    else {
      unsigned int v29 = v28 & 0xFFFFFFFE;
    }
    if (v29)
    {
      uint64_t v91 = *(void *)(DerivedStorage + 72);
      uint64_t v92 = v116;
      uint64_t v95 = *(void *)(DerivedStorage + 208);
      CMTime time = v117;
      Float64 v30 = CMTimeGetSeconds(&time);
      CMTime time = *(CMTime *)(DerivedStorage + 336);
      Float64 v31 = CMTimeGetSeconds(&time);
      CMTimebaseGetTime(&v115, *(CMTimebaseRef *)(DerivedStorage + 328));
      Float64 v32 = CMTimeGetSeconds(&v115);
      Float64 v33 = CMTimebaseGetRate(*(CMTimebaseRef *)(DerivedStorage + 328));
      int v34 = *(unsigned __int8 *)(DerivedStorage + 422);
      long long v35 = a3;
      int v36 = *(unsigned __int8 *)(DerivedStorage + 420);
      CMTime time = *(CMTime *)(DerivedStorage + 148);
      Float64 v37 = CMTimeGetSeconds(&time);
      int v38 = *(unsigned __int8 *)(DerivedStorage + 421);
      int v39 = *(unsigned __int8 *)(DerivedStorage + 128);
      LODWORD(time.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 136319490;
      *(CMTimeValue *)((char *)&time.value + 4) = (CMTimeValue)"fampb_attemptToSwitch";
      LOWORD(time.flags) = 2048;
      *(void *)((char *)&time.flags + 2) = a1;
      HIWORD(time.epoch) = 2112;
      uint64_t v123 = v91;
      __int16 v124 = 2048;
      uint64_t v125 = v92;
      __int16 v126 = 2048;
      uint64_t v127 = v95;
      __int16 v128 = 1024;
      int v129 = PeakBitRate;
      __int16 v130 = 1024;
      int v131 = v108;
      __int16 v132 = 1024;
      int v133 = v101;
      __int16 v134 = 2048;
      Float64 v135 = v30;
      __int16 v136 = 2048;
      Float64 v137 = v31;
      __int16 v138 = 2048;
      Float64 v139 = v32;
      __int16 v140 = 2048;
      Float64 v141 = v33;
      __int16 v142 = 1024;
      int v143 = v34;
      __int16 v144 = 1024;
      int v145 = v36;
      a3 = v35;
      __int16 v146 = 2048;
      Float64 v147 = v37;
      __int16 v148 = 1024;
      int v149 = v38;
      __int16 v150 = 1024;
      int v151 = v39;
      __int16 v152 = 2048;
      uint64_t v153 = v104;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!v25 || !fampb_ConcurrentSwitchUpValidForLongEnough(DerivedStorage + 80)) {
    goto LABEL_8;
  }
  uint64_t v82 = v116;
LABEL_75:
  uint64_t v89 = a1;
  int v90 = 1;
LABEL_76:
  char v10 = fampb_configurePlaybackFilterAsync(v89, v82, v90) == 0;
LABEL_9:
  if (a3) {
    *a3 = v10;
  }
}

uint64_t FigAlternatePlaybackBitrateMonitorSetPumpOffset(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E290](*DerivedStorage);
    uint64_t v4 = *(void *)(a2 + 16);
    *(_OWORD *)(DerivedStorage + 45) = *(_OWORD *)a2;
    DerivedStorage[47] = v4;
    MEMORY[0x19970E2B0](*DerivedStorage);
  }
  return 0;
}

uint64_t FigAlternateFilterMonitorForPlaybackBitrateStartup(const void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v3 = (const void *)DerivedStorage[10];
  uint64_t v4 = DerivedStorage[11];
  uint64_t v5 = (const void *)DerivedStorage[14];
  CFIndex v6 = (const void *)DerivedStorage[15];
  int v7 = *((unsigned __int8 *)DerivedStorage + 130);
  int v8 = *((_DWORD *)DerivedStorage + 48);
  MEMORY[0x19970E2B0](*DerivedStorage);
  CFTypeRef v26 = 0;
  CFTypeRef v27 = 0;
  CFTypeRef v24 = 0;
  CFTypeRef v25 = 0;
  CFTypeRef v22 = 0;
  CFTypeRef v23 = 0;
  CFTypeRef v21 = 0;
  if (v4)
  {
    uint64_t v16 = FigSignalErrorAt();
    CFTypeRef v17 = 0;
    goto LABEL_45;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  uint64_t inserted = FigAlternateFilterTreeCreate(AllocatorForMedia, &v21);
  if (inserted) {
    goto LABEL_67;
  }
  CFTypeRef v11 = v21;
  if (!v21)
  {
    uint64_t inserted = FigSignalErrorAt();
    goto LABEL_67;
  }
  if (!v3)
  {
    CFTypeRef v17 = 0;
    uint64_t v16 = 0;
    goto LABEL_44;
  }
  uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v21, v3, 500);
  if (inserted) {
    goto LABEL_67;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v8 != 0x7FFFFFFF)
  {
    uint64_t inserted = FigAlternatePeakBitRateCapFilterCreate(*MEMORY[0x1E4F1CF80], v8, &v23);
    if (inserted) {
      goto LABEL_67;
    }
    uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v21, v23, 460);
    if (inserted) {
      goto LABEL_67;
    }
  }
  if (v7)
  {
    uint64_t inserted = FigAlternateStartupScoreFilterCreate(v12, &v24);
    if (inserted) {
      goto LABEL_67;
    }
    uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v21, v24, 420);
    if (inserted) {
      goto LABEL_67;
    }
    uint64_t inserted = FigAlternateHighestRankingScoreFilterCreate(v12, &v26);
    if (inserted) {
      goto LABEL_67;
    }
    CFTypeRef v13 = v21;
    CFTypeRef v14 = v26;
    int v15 = 310;
  }
  else
  {
    uint64_t inserted = FigAlternateLowestIndexAlternateFilterCreate((uint64_t)v12, &v22);
    if (inserted) {
      goto LABEL_67;
    }
    CFTypeRef v13 = v21;
    CFTypeRef v14 = v22;
    int v15 = 430;
  }
  uint64_t v16 = FigAlternateFilterTreeInsertLeaf((uint64_t)v13, v14, v15);
  if (v16) {
    goto LABEL_68;
  }
  uint64_t inserted = FigAlternateFinalSelectionHighestPeakBitRateFilterCreate((uint64_t)v12, &v25);
  if (inserted
    || (uint64_t inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v21, v25, 100), inserted)
    || (uint64_t inserted = FigAlternateFilterTreeCreateFilter(v21, @"BitrateFilterTree", 600, &v27), inserted))
  {
LABEL_67:
    uint64_t v16 = inserted;
    goto LABEL_68;
  }
  CFTypeRef v17 = v27;
  if (!v6)
  {
LABEL_42:
    uint64_t v16 = 0;
    CFTypeRef v27 = 0;
    goto LABEL_43;
  }
  CFTypeRef v31 = 0;
  CFTypeRef v29 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v28 = 0;
  uint64_t v18 = FigGetAllocatorForMedia();
  uint64_t v19 = FigAlternateFilterTreeCreate(v18, &cf);
  if (v19
    || (uint64_t v19 = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v3, 500), v19)
    || (uint64_t v19 = FigAlternateTransitionBiasFilterCreate(v12, v5, v6, &v28), v19)
    || (uint64_t v19 = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v28, 320), v19)
    || (uint64_t v19 = FigAlternateFinalSelectionHighestPeakBitRateFilterCreate((uint64_t)v12, &v29), v19)
    || (uint64_t v19 = FigAlternateFilterTreeInsertLeaf((uint64_t)cf, v29, 100), v19)
    || (uint64_t v19 = FigAlternateFilterTreeSetFallbackBranch((uint64_t)cf, v17), v19))
  {
    uint64_t v16 = v19;
  }
  else
  {
    uint64_t v16 = FigAlternateFilterTreeCreateFilter(cf, @"GaplessItemTransitionTree", 600, &v31);
    if (!v16)
    {
      CFTypeRef v17 = v31;
      CFTypeRef v31 = 0;
      goto LABEL_31;
    }
  }
  CFTypeRef v17 = 0;
LABEL_31:
  if (cf) {
    CFRelease(cf);
  }
  if (v31) {
    CFRelease(v31);
  }
  if (v29) {
    CFRelease(v29);
  }
  if (v28) {
    CFRelease(v28);
  }
  if (!v16)
  {
    if (v27) {
      CFRelease(v27);
    }
    goto LABEL_42;
  }
LABEL_68:
  CFTypeRef v17 = 0;
LABEL_43:
  CFTypeRef v11 = v21;
  if (v21) {
LABEL_44:
  }
    CFRelease(v11);
LABEL_45:
  if (v23) {
    CFRelease(v23);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v27) {
    CFRelease(v27);
  }
  if (v26) {
    CFRelease(v26);
  }
  if (!v16) {
    uint64_t v16 = (uint64_t)fampb_notifyFilterChangeUnlocked(a1, v17);
  }
  if (v17) {
    CFRelease(v17);
  }
  return v16;
}

const void *fampb_notifyFilterChangeUnlocked(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (!a2) {
    return a2;
  }
  uint64_t v5 = DerivedStorage;
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v6 = v5[7];
  if (v6)
  {
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    char v10 = *(void (**)(uint64_t))(v8 + 8);
    if (v10) {
      v10(v6);
    }
    if (FigCFEqual()) {
      goto LABEL_14;
    }
    CFTypeRef v11 = (const void *)v5[7];
    uint64_t v9 = (const void *)v5[8];
    v5[8] = v11;
    if (v11) {
      CFRetain(v11);
    }
  }
  else
  {
    uint64_t v9 = (const void *)v5[8];
    v5[8] = 0;
  }
  if (v9) {
    CFRelease(v9);
  }
LABEL_14:
  CFAllocatorRef v12 = (const void *)v5[7];
  v5[7] = CFRetain(a2);
  MEMORY[0x19970E2B0](*v5);
  a2 = (const void *)FigAlternateFilterMonitorUtilityPostStateChangedNotificationForNewFilterIfNecessary(a1, v12, a2, 0, 0);
  if (v12) {
    CFRelease(v12);
  }
  return a2;
}

uint64_t FigAlternatePlaybackBitrateMonitorCanSwitchDownConcurrentlyWithoutStall(uint64_t a1, CMTime *a2)
{
  uint64_t v13 = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (!*((unsigned char *)DerivedStorage + 128)
    || ((uint64_t)DerivedStorage[113] <= 0 ? (uint64_t v4 = 100000) : (uint64_t v4 = DerivedStorage[113]),
        fampb_getPredictionBandwidth((uint64_t)DerivedStorage, &v13)))
  {
    MEMORY[0x19970E2B0](*DerivedStorage);
    return 0;
  }
  else
  {
    if (*((unsigned char *)DerivedStorage + 129)) {
      float v5 = 1.0;
    }
    else {
      float v5 = 0.9;
    }
    CFTypeRef v6 = fampb_copyLowerSwitchCandidate(DerivedStorage + 10, DerivedStorage[12], *((unsigned char *)DerivedStorage + 129) == 0);
    uint64_t v7 = (OpaqueCMTimebase *)DerivedStorage[41];
    if (v7) {
      float Rate = CMTimebaseGetRate(v7);
    }
    else {
      float Rate = 0.0;
    }
    *((float *)DerivedStorage + 50) = Rate;
    uint64_t v9 = DerivedStorage[12];
    CMTime v12 = *a2;
    uint64_t canSwitchDownConcurrentlyToAlternateWithoutStall = fampb_canSwitchDownConcurrentlyToAlternateWithoutStall((uint64_t)v6, (uint64_t)(DerivedStorage + 10), &v12, v4, v13, v9, 0, v5);
    MEMORY[0x19970E2B0](*DerivedStorage);
    if (v6) {
      CFRelease(v6);
    }
  }
  return canSwitchDownConcurrentlyToAlternateWithoutStall;
}

uint64_t fampb_getPredictionBandwidth(uint64_t a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v23 = 0u;
  if (*(unsigned char *)(a1 + 128))
  {
    long long v19 = *(_OWORD *)(a1 + 776);
    long long v20 = *(_OWORD *)(a1 + 792);
    long long v21 = *(_OWORD *)(a1 + 808);
    long long v22 = *(_OWORD *)(a1 + 656);
    long long v15 = *(_OWORD *)(a1 + 712);
    long long v16 = *(_OWORD *)(a1 + 728);
    long long v17 = *(_OWORD *)(a1 + 744);
    long long v18 = *(_OWORD *)(a1 + 760);
    long long v13 = *(_OWORD *)(a1 + 680);
    long long v14 = *(_OWORD *)(a1 + 696);
    uint64_t v3 = *(void *)(a1 + 824);
    long long v4 = *(_OWORD *)(a1 + 848);
    long long v44 = *(_OWORD *)(a1 + 832);
    long long v45 = v4;
    long long v46 = *(_OWORD *)(a1 + 864);
    uint64_t v5 = *(void *)(a1 + 896);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 448);
    long long v19 = *(_OWORD *)(a1 + 552);
    long long v20 = *(_OWORD *)(a1 + 568);
    long long v21 = *(_OWORD *)(a1 + 584);
    long long v22 = *(_OWORD *)(a1 + 432);
    long long v15 = *(_OWORD *)(a1 + 488);
    long long v16 = *(_OWORD *)(a1 + 504);
    long long v17 = *(_OWORD *)(a1 + 520);
    long long v18 = *(_OWORD *)(a1 + 536);
    long long v13 = *(_OWORD *)(a1 + 456);
    long long v14 = *(_OWORD *)(a1 + 472);
    uint64_t v3 = *(void *)(a1 + 600);
    long long v6 = *(_OWORD *)(a1 + 624);
    long long v44 = *(_OWORD *)(a1 + 608);
    long long v45 = v6;
    long long v46 = *(_OWORD *)(a1 + 640);
  }
  uint64_t v7 = *(void *)(a1 + 40);
  uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFTypeRef v11 = *(uint64_t (**)(uint64_t, uint64_t, long long *, long long *))(v10 + 8);
  if (!v11) {
    return 4294954514;
  }
  long long v29 = v22;
  long long v36 = v18;
  long long v37 = v19;
  long long v38 = v20;
  long long v39 = v21;
  long long v32 = v14;
  long long v33 = v15;
  long long v34 = v16;
  long long v35 = v17;
  long long v31 = v13;
  uint64_t v30 = v5;
  uint64_t v40 = v3 | 8;
  long long v41 = v44;
  long long v42 = v45;
  long long v43 = v46;
  uint64_t result = v11(v7, UpTimeNanoseconds, &v29, &v23);
  if (a2)
  {
    if (!result) {
      *a2 = (uint64_t)(*((double *)&v24 + 1) * (double)(uint64_t)v23);
    }
  }
  return result;
}

CFTypeRef fampb_copyLowerSwitchCandidate(uint64_t *a1, uint64_t a2, int a3)
{
  CFTypeRef v26 = 0;
  CFTypeRef v24 = 0;
  CFTypeRef v25 = 0;
  CFTypeRef cf = 0;
  CFArrayRef theArray = 0;
  CFTypeRef v20 = 0;
  CFTypeRef v21 = 0;
  int NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate(a2);
  if (a3) {
    int v6 = NormalizedPeakBitrate - 1;
  }
  else {
    int v6 = 19 * NormalizedPeakBitrate / 20;
  }
  fampb_copyValidAlternateList(*a1, (uint64_t)&v24);
  if (!v24) {
    goto LABEL_26;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  if (FigAlternateFilterTreeCreate(AllocatorForMedia, &v25)) {
    goto LABEL_26;
  }
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (FigAlternateNormalizedPeakBitRateCapFilterCreate(*MEMORY[0x1E4F1CF80], v6, 1, &cf)
    || FigAlternateFilterTreeInsertLeaf((uint64_t)v25, cf, 240))
  {
    goto LABEL_26;
  }
  if (a3)
  {
    if (FigAlternateLowestVideoThenAudioFilterCreate(v8, &v20)) {
      goto LABEL_26;
    }
    CFTypeRef v9 = v25;
    CFTypeRef v10 = v20;
    int v11 = 230;
  }
  else
  {
    if (FigAlternatePlaybackScoreAndBitRateFilterCreate(v8, &v21)
      || FigAlternateFilterTreeInsertLeaf((uint64_t)v25, v21, 200)
      || FigAlternateFinalSelectionHighestPeakBitRateFilterCreate((uint64_t)v8, &v20))
    {
      goto LABEL_26;
    }
    CFTypeRef v9 = v25;
    CFTypeRef v10 = v20;
    int v11 = 100;
  }
  if (!FigAlternateFilterTreeInsertLeaf((uint64_t)v9, v10, v11)
    && !FigAlternateFilterTreeCreateFilter(v25, @"selectSwitchCandidate", 100, &v26))
  {
    CFTypeRef v12 = v26;
    CFTypeRef v13 = v24;
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v15 = v14 ? v14 : 0;
    long long v16 = *(unsigned int (**)(CFTypeRef, CFTypeRef, CFArrayRef *))(v15 + 24);
    if (v16)
    {
      if (!v16(v12, v13, &theArray))
      {
        if (theArray)
        {
          if (CFArrayGetCount(theArray) >= 1)
          {
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
            if (ValueAtIndex)
            {
              CFTypeRef v18 = CFRetain(ValueAtIndex);
              goto LABEL_27;
            }
          }
        }
      }
    }
  }
LABEL_26:
  CFTypeRef v18 = 0;
LABEL_27:
  if (cf) {
    CFRelease(cf);
  }
  if (v21) {
    CFRelease(v21);
  }
  if (v20) {
    CFRelease(v20);
  }
  if (theArray) {
    CFRelease(theArray);
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v18;
}

uint64_t fampb_canSwitchDownConcurrentlyToAlternateWithoutStall(uint64_t a1, uint64_t a2, CMTime *a3, uint64_t a4, uint64_t a5, uint64_t a6, CMTime *a7, float a8)
{
  long long v11 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v18.unsigned int value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v12 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v18.CMTimeEpoch epoch = v12;
  uint64_t result = 1;
  if (a1 == a6 || *(float *)(a2 + 120) == 0.0 || *(void *)(a2 + 16) == a1)
  {
LABEL_6:
    if (!a7) {
      return result;
    }
    goto LABEL_7;
  }
  *(_OWORD *)&v17.unsigned int value = v11;
  v17.CMTimeEpoch epoch = v12;
  *(_OWORD *)&v16.unsigned int value = v11;
  v16.CMTimeEpoch epoch = v12;
  CMTime v15 = *a3;
  float v14 = fampb_concurrentSwitchDownSafetyFactor(a2, a1, a6, &v15, a4, a5, &v17, &v16);
  if (v14 > a8)
  {
    CMTime v15 = v16;
    fampb_nextTimeToCheckConcurrentSwitchDown(&v15, &v18, v14, a8);
    uint64_t result = 1;
    goto LABEL_6;
  }
  uint64_t result = 0;
  if (!a7) {
    return result;
  }
LABEL_7:
  *a7 = v18;
  return result;
}

uint64_t FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    long long v4 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    fampb_copyValidAlternateList(v4[10], (uint64_t)&cf);
    a2 = FigCFArrayContainsValue();
    MEMORY[0x19970E2B0](*v4);
    if (cf) {
      CFRelease(cf);
    }
  }
  return a2;
}

uint64_t fampb_copyValidAlternateList(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  int v6 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }
  uint64_t v7 = *MEMORY[0x1E4F1CF80];

  return v6(a1, @"FAFProperty_AlternateList", v7, a2);
}

uint64_t FigAlternatePlaybackBitrateMonitorGetAlternateRank(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  int IsAlternateStillValid = FigAlternatePlaybackBitrateMonitorIsAlternateStillValid(a1, a2);
  uint64_t v6 = 0;
  if (IsAlternateStillValid && DerivedStorage)
  {
    int PeakBitRate = FigAlternateGetPeakBitRate(a2);
    MEMORY[0x19970E290](*DerivedStorage);
    if (fampb_copyAlternateListSortedByQuality(DerivedStorage + 10, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, &theArray)|| !theArray|| CFArrayGetCount(theArray) < 1)
    {
      uint64_t v6 = 0;
    }
    else if (CFArrayGetCount(theArray) < 1)
    {
      uint64_t v6 = 100;
    }
    else
    {
      CFIndex v8 = 0;
      int v9 = 0;
      int v10 = 0;
      unsigned int v11 = 0;
      do
      {
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v8);
        int v13 = FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex);
        int v14 = v13 != v9;
        if (v13 != v9) {
          ++v11;
        }
        if (v13 <= PeakBitRate) {
          int v14 = 0;
        }
        v10 += v14;
        ++v8;
        int v9 = v13;
      }
      while (v8 < CFArrayGetCount(theArray));
      uint64_t v6 = 100;
      if (v11 >= 2) {
        uint64_t v6 = (100 - 100 * v10 / (int)(v11 - 1));
      }
    }
    MEMORY[0x19970E2B0](*DerivedStorage);
    if (theArray) {
      CFRelease(theArray);
    }
  }
  return v6;
}

uint64_t fampb_copyAlternateListSortedByQuality(uint64_t *a1, const __CFAllocator *a2, int a3, const __CFArray **a4)
{
  CFArrayRef theArray = 0;
  if (!a4) {
    return 0;
  }
  uint64_t valid = fampb_copyValidAlternateList(*a1, (uint64_t)&theArray);
  if (valid)
  {
LABEL_17:
    uint64_t v11 = valid;
    goto LABEL_13;
  }
  if (!theArray) {
    return 0;
  }
  if (CFArrayGetCount(theArray) >= 1)
  {
    MutableCFDictionaryRef Copy = CFArrayCreateMutableCopy(a2, 0, theArray);
    if (MutableCopy)
    {
      CFArrayRef v9 = MutableCopy;
      if (a3)
      {
        int v10 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))fampb_AlternatePeakBitrateComparator;
      }
      else if (FigAlternatesCarryRankingScore(MutableCopy))
      {
        int v10 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))fampb_AlternateRankingScoreComparator;
      }
      else
      {
        int v10 = (CFComparisonResult (__cdecl *)(const void *, const void *, void *))fampb_AlternatePeakBitrateComparator;
      }
      v14.length = CFArrayGetCount(v9);
      v14.location = 0;
      CFArraySortValues(v9, v14, v10, 0);
      uint64_t v11 = 0;
      *a4 = v9;
      goto LABEL_13;
    }
    uint64_t valid = FigSignalErrorAt();
    goto LABEL_17;
  }
  uint64_t v11 = 0;
LABEL_13:
  if (theArray) {
    CFRelease(theArray);
  }
  return v11;
}

uint64_t FigAlternatePlaybackBitrateMonitorGetMaxResolutionAndBitrate(double a1, double a2, uint64_t a3, double *a4, int *a5, _DWORD *a6)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t valid = 0;
  CFArrayRef theArray = 0;
  if (a4)
  {
    int v13 = DerivedStorage;
    if (DerivedStorage)
    {
      if (a5)
      {
        MEMORY[0x19970E290](*DerivedStorage);
        uint64_t valid = fampb_copyValidAlternateList(v13[10], (uint64_t)&theArray);
        if (!valid && theArray && CFArrayGetCount(theArray) >= 1)
        {
          int NormalizedPeakBitrate = 0;
          uint64_t v15 = 0;
          CFIndex v16 = 0;
          double v17 = a2 * a1;
          double v18 = 0.0;
          double v19 = 0.0;
          while (1)
          {
            CFIndex Count = (CFIndex)theArray;
            if (theArray) {
              CFIndex Count = CFArrayGetCount(theArray);
            }
            if (v16 >= Count) {
              break;
            }
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v16);
            double Resolution = FigAlternateGetResolution((uint64_t)ValueAtIndex);
            if (v23 > 0.0 && Resolution > 0.0 && Resolution * v23 > v17)
            {
              double v17 = Resolution * v23;
              uint64_t v15 = (uint64_t)ValueAtIndex;
              double v18 = Resolution;
              double v19 = v23;
            }
            if (NormalizedPeakBitrate <= (int)FigAlternateGetNormalizedPeakBitrate((uint64_t)ValueAtIndex)) {
              int NormalizedPeakBitrate = FigAlternateGetNormalizedPeakBitrate((uint64_t)ValueAtIndex);
            }
            ++v16;
          }
          *a4 = v18;
          a4[1] = v19;
          *a5 = NormalizedPeakBitrate;
          if (a6 && v15) {
            *a6 = FigAlternateGetVideoQualityIndex(v15);
          }
        }
        MEMORY[0x19970E2B0](*v13);
        if (theArray) {
          CFRelease(theArray);
        }
      }
    }
  }
  return valid;
}

const void *FigAlternatePlaybackBitrateMonitorRejectSwitch(const void *a1, const void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  CFTypeRef v16 = 0;
  CFTypeRef v14 = 0;
  MEMORY[0x19970E290](*DerivedStorage);
  uint64_t v5 = DerivedStorage[7];
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFIndex v8 = *(void (**)(uint64_t))(v7 + 8);
  if (v8) {
    v8(v5);
  }
  if (!FigCFEqual())
  {
    uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
    if (!FigAlternateFilterTreeCreate(AllocatorForMedia, &v16)
      && !FigAlternateFilterTreeInsertLeaf((uint64_t)v16, (const void *)DerivedStorage[10], 500))
    {
      CFAllocatorRef v10 = CFGetAllocator(a1);
      if (!FigAlternateSingleAlternateFilterCreate((uint64_t)v10, a2, 1, @"RejectedSwitch", 490, &cf)&& !FigAlternateFilterTreeInsertLeaf((uint64_t)v16, cf, 500))
      {
        uint64_t v11 = (const void *)DerivedStorage[8];
        if (!v11 || !FigAlternateFilterTreeSetFallbackBranch((uint64_t)v16, v11)) {
          FigAlternateFilterTreeCreateFilter(v16, @"RejectedSwitchFilterTree", 600, &v14);
        }
      }
    }
  }
  MEMORY[0x19970E2B0](*DerivedStorage);
  CMTimeEpoch v12 = fampb_notifyFilterChangeUnlocked(a1, v14);
  if (cf) {
    CFRelease(cf);
  }
  if (v16) {
    CFRelease(v16);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v12;
}

uint64_t FigAlternatePlaybackBitrateMonitorTryToSwitchUp(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  unsigned __int8 v5 = 0;
  MEMORY[0x19970E290](*DerivedStorage);
  DerivedStorage[22] = 0;
  int v3 = FigNetworkHistoryObserverTestCondition();
  fampb_attemptToSwitch(a1, v3, (char *)&v5);
  MEMORY[0x19970E2B0](*DerivedStorage);
  if (!v5) {
    return 0;
  }
  dispatch_sync_f((dispatch_queue_t)DerivedStorage[3], 0, (dispatch_function_t)fampb_noop);
  return v5;
}

void FigAlternatePlaybackBitrateMonitorSetTimeForUnitTest(double a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)DerivedStorage);
  if (*(double *)(DerivedStorage + 256) == 2.22507386e-308) {
    *(double *)(DerivedStorage + 256) = a1 + -1.0;
  }
  *(double *)(DerivedStorage + 248) = a1;

  JUMPOUT(0x19970E2B0);
}

void fampb_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(OpaqueCMTimebase **)(v1 + 328);
  if (v2) {
    CMTimebaseRemoveTimerDispatchSource(v2, *(dispatch_source_t *)(v1 + 264));
  }
  if (*(void *)(v1 + 264))
  {
    StopAndReleaseTimer((dispatch_object_t *)(v1 + 264));
    uint64_t v3 = MEMORY[0x1E4F1F9F8];
    long long v4 = *MEMORY[0x1E4F1F9F8];
    *(_OWORD *)(v1 + 272) = *MEMORY[0x1E4F1F9F8];
    uint64_t v5 = *(void *)(v3 + 16);
    *(void *)(v1 + 288) = v5;
    *(_OWORD *)(v1 + 296) = v4;
    *(void *)(v1 + 312) = v5;
  }
  StopAndReleaseTimer((dispatch_object_t *)(DerivedStorage + 320));
  uint64_t v6 = *(NSObject **)(DerivedStorage + 24);
  if (v6) {
    dispatch_release(v6);
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 328);
  if (v7) {
    CFRelease(v7);
  }
  FigSimpleMutexDestroy();
  CFIndex v8 = *(const void **)(DerivedStorage + 8);
  if (v8) {
    CFRelease(v8);
  }
  CFArrayRef v9 = *(const void **)(DerivedStorage + 40);
  if (v9) {
    CFRelease(v9);
  }
  CFAllocatorRef v10 = *(const void **)(DerivedStorage + 48);
  if (v10) {
    CFRelease(v10);
  }
  uint64_t v11 = *(const void **)(DerivedStorage + 56);
  if (v11) {
    CFRelease(v11);
  }
  CMTimeEpoch v12 = *(const void **)(DerivedStorage + 64);
  if (v12) {
    CFRelease(v12);
  }
  int v13 = *(const void **)(DerivedStorage + 408);
  if (v13) {
    CFRelease(v13);
  }
  CFTypeRef v14 = *(const void **)(DerivedStorage + 32);
  if (v14) {
    CFRelease(v14);
  }
  uint64_t v15 = *(const void **)(DerivedStorage + 72);
  if (v15) {
    CFRelease(v15);
  }
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();

  fampb_releaseAndClearPlaybackFilterConfig(DerivedStorage + 80);
}

CFStringRef fampb_copyDebugDesc()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigAlternateFilterMonitorForPlaybackBitrate lastMeasuredBitrate:%lld ]", DerivedStorage[23]);
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v1;
}

uint64_t fampb_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*DerivedStorage);
  if (!a4)
  {
    uint64_t valid = FigSignalErrorAt();
    goto LABEL_22;
  }
  if (CFEqual(a2, @"AfmfpbProperty_QualityGear"))
  {
    CFIndex v8 = (const void *)DerivedStorage[11];
    CFArrayRef theArray = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v8)
    {
      if (fampb_copyAlternateListSortedByQuality(DerivedStorage + 10, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, &theArray))goto LABEL_12; {
      if (theArray)
      }
      {
        CFIndex Count = CFArrayGetCount(theArray);
        if (Count)
        {
          v30.length = Count;
          v30.location = 0;
          FirstIndexOfBoolean Value = CFArrayGetFirstIndexOfValue(theArray, v30, v8);
          goto LABEL_13;
        }
LABEL_12:
        FirstIndexOfBoolean Value = -1;
LABEL_13:
        if (theArray) {
          CFRelease(theArray);
        }
        goto LABEL_15;
      }
    }
    FirstIndexOfBoolean Value = -1;
LABEL_15:
    CFArrayRef theArray = (CFArrayRef)FirstIndexOfValue;
    p_CFArrayRef theArray = &theArray;
    CFAllocatorRef v14 = v9;
    CFNumberType v15 = kCFNumberCFIndexType;
LABEL_16:
    CMTimeEpoch v12 = CFNumberCreate(v14, v15, p_theArray);
LABEL_17:
    uint64_t v16 = 0;
LABEL_18:
    *a4 = v12;
    goto LABEL_19;
  }
  if (CFEqual(a2, @"AfmfpbProperty_TrialAlternate"))
  {
    CMTimeEpoch v12 = (const void *)DerivedStorage[12];
    if (v12) {
      CMTimeEpoch v12 = CFRetain(v12);
    }
    goto LABEL_17;
  }
  if (CFEqual(a2, @"AfmfpbProperty_CandidateAlternatesForAdaptiveBitrateSwitching"))
  {
    uint64_t valid = fampb_copyValidAlternateList(DerivedStorage[10], (uint64_t)a4);
LABEL_22:
    uint64_t v16 = valid;
    goto LABEL_19;
  }
  if (CFEqual(a2, @"AfmfpbProperty_HighestValidPeakBitrate"))
  {
    CFArrayRef theArray = 0;
    int PeakBitRate = 0;
    if (!fampb_copyValidAlternateList(DerivedStorage[10], (uint64_t)&theArray))
    {
      for (CFIndex i = 0; ; ++i)
      {
        CFIndex v21 = (CFIndex)theArray;
        if (theArray) {
          CFIndex v21 = CFArrayGetCount(theArray);
        }
        if (i >= v21) {
          break;
        }
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, i);
        if ((int)FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex) > PeakBitRate)
        {
          double v23 = CFArrayGetValueAtIndex(theArray, i);
          int PeakBitRate = FigAlternateGetPeakBitRate((uint64_t)v23);
        }
      }
    }
    if (theArray) {
      CFRelease(theArray);
    }
    LODWORD(theArray) = PeakBitRate;
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_CFArrayRef theArray = &theArray;
    CFNumberType v15 = kCFNumberSInt32Type;
    goto LABEL_16;
  }
  if (CFEqual(a2, @"AfmfpbProperty_HighestValidDeclaredSampleRate"))
  {
    CFArrayRef theArray = COERCE_CFARRAYREF(fampb_highestValidDeclaredSampleRate((uint64_t)DerivedStorage));
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    p_CFArrayRef theArray = &theArray;
    CFNumberType v15 = kCFNumberDoubleType;
    goto LABEL_16;
  }
  if (!CFEqual(a2, @"AfmfpbProperty_HasAudioOnlyAlternates"))
  {
    if (CFEqual(a2, @"AfmfpbProperty_RTT"))
    {
      uint64_t v26 = DerivedStorage[113];
      if (v26 <= 0) {
        uint64_t v26 = 100000;
      }
      CFArrayRef theArray = (CFArrayRef)v26;
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_CFArrayRef theArray = &theArray;
    }
    else
    {
      if (!CFEqual(a2, @"AfmfpbProperty_PredictedBitrate"))
      {
        if (!CFEqual(a2, @"AfmfpbProperty_MinimumBandwidthToSwitchUp"))
        {
          uint64_t v16 = 4294954512;
          goto LABEL_19;
        }
        CFArrayRef theArray = 0;
        int valuePtr = 0;
        if (DerivedStorage[11])
        {
          uint64_t v27 = fampb_copyValidAlternateList(DerivedStorage[10], (uint64_t)&theArray);
          if (!v27) {
            int valuePtr = fampb_minimumBandwidthRequiredToSwitchUp(a1, theArray);
          }
          if (theArray) {
            CFRelease(theArray);
          }
          uint64_t v16 = v27;
        }
        else
        {
          uint64_t v16 = 0;
        }
        CMTimeEpoch v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
        goto LABEL_18;
      }
      CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      p_CFArrayRef theArray = (CFArrayRef *)(DerivedStorage + 23);
    }
    CFNumberType v15 = kCFNumberSInt64Type;
    goto LABEL_16;
  }
  BOOL hasOnlyAudioInValidAlternateList = fampb_hasOnlyAudioInValidAlternateList((uint64_t)DerivedStorage);
  uint64_t v16 = 0;
  CFTypeRef v25 = (void *)MEMORY[0x1E4F1CFD0];
  if (!hasOnlyAudioInValidAlternateList) {
    CFTypeRef v25 = (void *)MEMORY[0x1E4F1CFC8];
  }
  *a4 = *v25;
LABEL_19:
  MEMORY[0x19970E2B0](*DerivedStorage);
  return v16;
}

const void *fampb_setProperty(const void *a1, const void *a2, const void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E290](*(void *)DerivedStorage);
  if (CFEqual(a2, @"AfmfpbProperty_Timebase"))
  {
    if (a3)
    {
      CFTypeID TypeID = CMTimebaseGetTypeID();
      if (TypeID == CFGetTypeID(a3))
      {
        CFIndex v8 = *(const void **)(DerivedStorage + 328);
        if (v8 != a3)
        {
          if (v8)
          {
            CMBaseObjectGetDerivedStorage();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterRemoveWeakListener();
            CFAllocatorRef v9 = *(const void **)(DerivedStorage + 328);
            *(void *)(DerivedStorage + 328) = a3;
            CFRetain(a3);
            if (v9) {
              CFRelease(v9);
            }
          }
          else
          {
            *(void *)(DerivedStorage + 328) = a3;
            CFRetain(a3);
          }
          if (*(void *)(DerivedStorage + 328))
          {
            CMBaseObjectGetDerivedStorage();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
          }
          fampb_setupDryTimer((uint64_t)a1);
          if (*(void *)(DerivedStorage + 88))
          {
            BOOL v17 = *(unsigned char *)(DerivedStorage + 420) != 0;
LABEL_40:
            double v18 = a1;
LABEL_41:
            uint64_t v16 = fampb_configurePlaybackFilterForUpdatedProperties(v18, v17);
            goto LABEL_134;
          }
        }
        goto LABEL_66;
      }
    }
LABEL_133:
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_134;
  }
  if (FigCFEqual())
  {
    CFAllocatorRef v10 = *(const void **)(DerivedStorage + 72);
    *(void *)(DerivedStorage + 72) = a3;
    if (!a3) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (CFEqual(a2, @"AfmfpbProperty_CurrentAlternate"))
  {
    if (!a3) {
      goto LABEL_133;
    }
    uint64_t v11 = FigAlternateGetTypeID();
    if (v11 != CFGetTypeID(a3)) {
      goto LABEL_133;
    }
    if (!FigCFEqual())
    {
      CMTimeEpoch v12 = *(const void **)(DerivedStorage + 96);
      if (v12)
      {
        CFRelease(v12);
        *(void *)(DerivedStorage + 96) = 0;
      }
      int v13 = *(const void **)(DerivedStorage + 88);
      *(void *)(DerivedStorage + 88) = a3;
      CFRetain(a3);
      if (v13) {
        CFRelease(v13);
      }
      if (FigAlternateIsIFrameOnly(*(void *)(DerivedStorage + 88))
        || FigAlternateIsAudioOnly(*(void *)(DerivedStorage + 88)))
      {
        *(void *)(DerivedStorage + 208) = 0x3FF0000000000000;
      }
      if (*(void *)(DerivedStorage + 240)) {
        *(void *)(DerivedStorage + 240) = 0;
      }
      goto LABEL_34;
    }
    goto LABEL_66;
  }
  if (CFEqual(a2, @"AfmfpbProperty_TrialAlternate"))
  {
    if (a3)
    {
      CFTypeID v14 = CFGetTypeID(a3);
      if (v14 != FigAlternateGetTypeID()) {
        goto LABEL_133;
      }
    }
    if (!FigCFEqual())
    {
      CFNumberType v15 = *(const void **)(DerivedStorage + 96);
      *(void *)(DerivedStorage + 96) = a3;
      if (a3) {
        CFRetain(a3);
      }
      if (v15) {
        CFRelease(v15);
      }
      goto LABEL_34;
    }
    goto LABEL_66;
  }
  if (CFEqual(a2, @"AfmfpbProperty_StartsOnFirstEligibleVariant"))
  {
    if (!a3) {
      goto LABEL_133;
    }
    CFTypeID v19 = CFBooleanGetTypeID();
    if (v19 != CFGetTypeID(a3)) {
      goto LABEL_133;
    }
    *(unsigned char *)(DerivedStorage + 130) = CFBooleanGetValue((CFBooleanRef)a3) == 0;
    CFAllocatorRef v10 = 0;
    *(unsigned char *)(DerivedStorage + 130) = FigGetCFPreferenceNumberWithDefault();
    goto LABEL_135;
  }
  if (CFEqual(a2, @"AfmfpbProperty_PrefersConcurrentSwitch"))
  {
    if (!a3) {
      goto LABEL_133;
    }
    CFTypeID v20 = CFBooleanGetTypeID();
    if (v20 != CFGetTypeID(a3)) {
      goto LABEL_133;
    }
    int v21 = *(unsigned __int8 *)(DerivedStorage + 128);
    if (v21 != CFBooleanGetValue((CFBooleanRef)a3))
    {
      *(unsigned char *)(DerivedStorage + 128) = CFBooleanGetValue((CFBooleanRef)a3);
LABEL_34:
      uint64_t v16 = fampb_setBandwidthConditions((uint64_t)a1);
LABEL_134:
      CFAllocatorRef v10 = (const void *)v16;
      goto LABEL_135;
    }
LABEL_66:
    CFAllocatorRef v10 = 0;
    goto LABEL_135;
  }
  if (CFEqual(a2, @"AfmfpbProperty_BandwidthCap"))
  {
    if (a3)
    {
      CFTypeID v22 = CFNumberGetTypeID();
      if (v22 == CFGetTypeID(a3))
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(DerivedStorage + 192));
        int v23 = *(_DWORD *)(DerivedStorage + 192);
        if (!v23)
        {
          int v23 = 0x7FFFFFFF;
          *(_DWORD *)(DerivedStorage + 192) = 0x7FFFFFFF;
        }
        uint64_t v24 = *(void *)(DerivedStorage + 88);
        if (v24)
        {
          BOOL v17 = v23 >= (int)FigAlternateGetPeakBitRate(v24);
          goto LABEL_40;
        }
        goto LABEL_66;
      }
    }
    goto LABEL_133;
  }
  if (CFEqual(a2, @"AfmfpbProperty_OkayToAttemptSwitchUp"))
  {
    if (!a3) {
      goto LABEL_133;
    }
    CFTypeID v25 = CFBooleanGetTypeID();
    if (v25 != CFGetTypeID(a3)) {
      goto LABEL_133;
    }
    CFAllocatorRef v10 = 0;
    *(unsigned char *)(DerivedStorage + 420) = CFBooleanGetValue((CFBooleanRef)a3);
    goto LABEL_135;
  }
  if (CFEqual(a2, @"AfmfpbProperty_SwitchMinDuration"))
  {
    if (!a3) {
      goto LABEL_133;
    }
    CFTypeID v26 = CFNumberGetTypeID();
    if (v26 != CFGetTypeID(a3)) {
      goto LABEL_133;
    }
    Float64 valuePtr = 0.0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberDoubleType, &valuePtr);
    CMTimeMakeWithSeconds(&v45, valuePtr, 1000);
    *(CMTime *)(DerivedStorage + 148) = v45;
    fampb_setupDryTimer((uint64_t)a1);
    goto LABEL_66;
  }
  if (CFEqual(a2, @"AfmfpbProperty_QualityGear"))
  {
    if (a3)
    {
      CFTypeID v27 = CFNumberGetTypeID();
      if (v27 == CFGetTypeID(a3))
      {
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, (void *)(DerivedStorage + 416));
        *(unsigned char *)(DerivedStorage + 423) = 0;
        double v18 = a1;
        BOOL v17 = 0;
        goto LABEL_41;
      }
    }
    goto LABEL_133;
  }
  if (CFEqual(a2, @"AfmfpbProperty_PlayerRate"))
  {
    if (!a3) {
      goto LABEL_133;
    }
    CFTypeID v28 = CFGetTypeID(a3);
    if (v28 != CFNumberGetTypeID()) {
      goto LABEL_133;
    }
    long long v29 = (void *)(DerivedStorage + 196);
    CFNumberRef v30 = (const __CFNumber *)a3;
    CFNumberType v31 = kCFNumberFloat32Type;
    goto LABEL_75;
  }
  if (CFEqual(a2, @"AfmfpbProperty_RTT"))
  {
    if (!a3)
    {
      CFAllocatorRef v10 = 0;
      *(void *)(DerivedStorage + 912) = 0;
      goto LABEL_135;
    }
    CFTypeID v32 = CFNumberGetTypeID();
    if (v32 != CFGetTypeID(a3)) {
      goto LABEL_133;
    }
    v45.unsigned int value = 0;
    CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &v45);
    fampb_updateSmoothRTT((uint64_t)a1, v45.value);
    goto LABEL_66;
  }
  if (CFEqual(a2, @"AfmfpbProperty_BytesRequiredForNetworkPrediction"))
  {
    if (!*(unsigned char *)(DerivedStorage + 128))
    {
      if (!a3)
      {
        CFAllocatorRef v10 = 0;
        *(void *)(DerivedStorage + 488) = 0;
        goto LABEL_135;
      }
      CFTypeID v33 = CFNumberGetTypeID();
      if (v33 == CFGetTypeID(a3))
      {
        v45.unsigned int value = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt64Type, &v45);
        CFAllocatorRef v10 = 0;
        *(void *)(DerivedStorage + 488) = v45.value;
        goto LABEL_135;
      }
      goto LABEL_133;
    }
    goto LABEL_66;
  }
  if (CFEqual(a2, @"AfmfpbProperty_EstimatedGOPInterval"))
  {
    if (a3)
    {
      CFTypeID v34 = CFGetTypeID(a3);
      if (v34 == CFNumberGetTypeID())
      {
        v45.unsigned int value = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberDoubleType, &v45);
        CFAllocatorRef v10 = 0;
        *(void *)(DerivedStorage + 216) = v45.value;
        goto LABEL_135;
      }
    }
    goto LABEL_133;
  }
  if (CFEqual(a2, @"AfmfpbProperty_PartTargetDuration"))
  {
    if (a3)
    {
      CFTypeID v35 = CFGetTypeID(a3);
      if (v35 == CFNumberGetTypeID())
      {
        v45.unsigned int value = 0;
        CFNumberGetValue((CFNumberRef)a3, kCFNumberDoubleType, &v45);
        CFAllocatorRef v10 = 0;
        *(void *)(DerivedStorage + 224) = v45.value;
        goto LABEL_135;
      }
    }
    goto LABEL_133;
  }
  if (CFEqual(a2, @"AfmfpbProperty_SwitchesQualityGearAutomatically"))
  {
    if (a3)
    {
      CFTypeID v36 = CFBooleanGetTypeID();
      if (v36 == CFGetTypeID(a3))
      {
        CFAllocatorRef v10 = 0;
        *(unsigned char *)(DerivedStorage + 423) = CFBooleanGetValue((CFBooleanRef)a3);
        goto LABEL_135;
      }
    }
    goto LABEL_133;
  }
  if (CFEqual(a2, @"AfmfpbProperty_TransitionAttributes"))
  {
    if (!a3) {
      goto LABEL_133;
    }
    CFTypeID v37 = CFGetTypeID(a3);
    if (v37 != CFDictionaryGetTypeID()) {
      goto LABEL_133;
    }
    CFAllocatorRef v10 = *(const void **)(DerivedStorage + 120);
    *(void *)(DerivedStorage + 120) = a3;
  }
  else if (CFEqual(a2, @"AfmfpbProperty_AudibleMediaSelectionOptionPersistentID"))
  {
    if (!a3) {
      goto LABEL_133;
    }
    CFTypeID v38 = CFGetTypeID(a3);
    if (v38 != CFNumberGetTypeID()) {
      goto LABEL_133;
    }
    CFAllocatorRef v10 = *(const void **)(DerivedStorage + 112);
    *(void *)(DerivedStorage + 112) = a3;
  }
  else
  {
    if (CFEqual(a2, @"AfmfpbProperty_PredictedBitrate"))
    {
      if (!a3) {
        goto LABEL_133;
      }
      CFTypeID v39 = CFGetTypeID(a3);
      if (v39 != CFNumberGetTypeID()) {
        goto LABEL_133;
      }
      long long v29 = (void *)(DerivedStorage + 184);
      CFNumberRef v30 = (const __CFNumber *)a3;
      CFNumberType v31 = kCFNumberSInt64Type;
LABEL_75:
      CFNumberGetValue(v30, v31, v29);
      goto LABEL_66;
    }
    if (CFEqual(a2, @"AfmfpbProperty_PendingSeekTime"))
    {
      if (!a3 || (CFTypeID v40 = CFGetTypeID(a3), v40 == CFDictionaryGetTypeID()))
      {
        CMTimeMakeFromDictionary(&v45, (CFDictionaryRef)a3);
        CFAllocatorRef v10 = 0;
        *(CMTime *)(DerivedStorage + 384) = v45;
        goto LABEL_135;
      }
      goto LABEL_133;
    }
    if (!CFEqual(a2, @"AfmfpbProperty_RecoveryAlternate"))
    {
      if (CFEqual(a2, @"AfmfpbProperty_IsBufferFull"))
      {
        CFAllocatorRef v10 = 0;
        *(unsigned char *)(DerivedStorage + 421) = *MEMORY[0x1E4F1CFD0] == (void)a3;
        goto LABEL_135;
      }
      if (CFEqual(a2, @"AfmfpbProperty_ResourceConservationLevelWhenPaused"))
      {
        if (a3)
        {
          CFTypeID v42 = CFGetTypeID(a3);
          if (v42 == CFNumberGetTypeID())
          {
            CFAllocatorRef v10 = 0;
            *(_DWORD *)(DerivedStorage + 424) = FigCFNumberGetSInt32();
            goto LABEL_135;
          }
        }
        goto LABEL_133;
      }
      if (!CFEqual(a2, @"AfmfpbProperty_MainPlaylistExpectedUpdateTime"))
      {
        if (CFEqual(a2, @"AfmfpbProperty_DisableTrialSwitchUpTimer"))
        {
          CFAllocatorRef v10 = 0;
          *(unsigned char *)(DerivedStorage + 132) = *MEMORY[0x1E4F1CFD0] == (void)a3;
          goto LABEL_135;
        }
        goto LABEL_133;
      }
      uint64_t SInt64 = FigCFNumberGetSInt64();
      *(void *)(DerivedStorage + 232) = SInt64;
      if (SInt64 >= 1 && FigGetUpTimeNanoseconds() > *(void *)(DerivedStorage + 232)) {
        fampb_configurePlaybackFilterForUpdatedProperties(a1, 0);
      }
      goto LABEL_66;
    }
    if (!a3)
    {
      CFAllocatorRef v10 = *(const void **)(DerivedStorage + 104);
      *(void *)(DerivedStorage + 104) = 0;
      if (!v10) {
        goto LABEL_135;
      }
      goto LABEL_12;
    }
    uint64_t v41 = FigAlternateGetTypeID();
    if (v41 != CFGetTypeID(a3)) {
      goto LABEL_133;
    }
    CFAllocatorRef v10 = *(const void **)(DerivedStorage + 104);
    *(void *)(DerivedStorage + 104) = a3;
  }
LABEL_10:
  CFRetain(a3);
LABEL_11:
  if (v10)
  {
LABEL_12:
    CFRelease(v10);
    goto LABEL_66;
  }
LABEL_135:
  MEMORY[0x19970E2B0](*(void *)DerivedStorage);
  return v10;
}

void fampb_releaseAndClearPlaybackFilterConfig(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 8) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 16) = 0;
  }
  long long v4 = *(const void **)(a1 + 24);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v5 = *(const void **)(a1 + 32);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 32) = 0;
  }
  uint64_t v6 = *(const void **)(a1 + 40);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 40) = 0;
  }
  if (*(void *)a1)
  {
    CFRelease(*(CFTypeRef *)a1);
    *(void *)a1 = 0;
  }
}

double fampb_highestValidDeclaredSampleRate(uint64_t a1)
{
  CFArrayRef theArray = 0;
  if (fampb_copyValidAlternateList(*(void *)(a1 + 80), (uint64_t)&theArray))
  {
    MaxAudioSamplefloat Rate = 0.0;
  }
  else
  {
    CFIndex v1 = 0;
    MaxAudioSamplefloat Rate = 0.0;
    while (1)
    {
      CFIndex Count = (CFIndex)theArray;
      if (theArray) {
        CFIndex Count = CFArrayGetCount(theArray);
      }
      if (v1 >= Count) {
        break;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v1);
      if (FigAlternateGetMaxAudioSampleRate((uint64_t)ValueAtIndex) > MaxAudioSampleRate)
      {
        uint64_t v5 = CFArrayGetValueAtIndex(theArray, v1);
        MaxAudioSamplefloat Rate = FigAlternateGetMaxAudioSampleRate((uint64_t)v5);
      }
      ++v1;
    }
  }
  if (theArray) {
    CFRelease(theArray);
  }
  return MaxAudioSampleRate;
}

BOOL fampb_hasOnlyAudioInValidAlternateList(uint64_t a1)
{
  CFArrayRef theArray = 0;
  fampb_copyValidAlternateList(*(void *)(a1 + 80), (uint64_t)&theArray);
  if (!theArray) {
    return 0;
  }
  BOOL v1 = CFArrayGetCount(theArray) >= 1 && FigAlternateSelectionUtility_AlternateListHasOnlyAudioOnly(theArray);
  if (theArray) {
    CFRelease(theArray);
  }
  return v1;
}

uint64_t fampb_minimumBandwidthRequiredToSwitchUp(uint64_t a1, const __CFArray *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(void *)(DerivedStorage + 88);
  int PeakBitRate = FigAlternateGetPeakBitRate(v4);
  if (CFArrayGetCount(a2) < 1) {
    return 0xFFFFFFFFLL;
  }
  CFIndex v6 = 0;
  int v7 = -1;
  double v8 = 1.0;
  do
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a2, v6);
    int v10 = FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex);
    if (v10 > PeakBitRate)
    {
      int v11 = v10;
      if (v7 == -1 || v7 > v10)
      {
        FigAlternateScaleBitrateFractionToNewAlternate(v4, (uint64_t)ValueAtIndex);
        double v8 = v12;
        int v7 = v11;
      }
    }
    ++v6;
  }
  while (v6 < CFArrayGetCount(a2));
  if (v7 == -1) {
    return 0xFFFFFFFFLL;
  }
  if (!*(unsigned char *)(DerivedStorage + 128)) {
    return (int)((double)(int)(v8 * (double)v7) * 1.1);
  }
  CFTypeRef v13 = fampb_copyLowerSwitchCandidate((uint64_t *)(DerivedStorage + 80), *(void *)(DerivedStorage + 88), 1);
  LODWORD(DerivedStorage) = FigAlternateGetPeakBitRate(*(void *)(DerivedStorage + 88)) + v7;
  if (!v13) {
    return DerivedStorage & ~((int)DerivedStorage >> 31);
  }
  int v14 = (int)((double)(int)FigAlternateGetExpectedAverageBitrate((uint64_t)v13) + (double)v7 * 1.5);
  if ((int)DerivedStorage <= v14) {
    uint64_t DerivedStorage = v14;
  }
  else {
    uint64_t DerivedStorage = DerivedStorage;
  }
  CFRelease(v13);
  return DerivedStorage;
}

uint64_t fampb_configurePlaybackFilterForUpdatedProperties(const void *a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  if (*(unsigned char *)(DerivedStorage + 423))
  {
    uint64_t v5 = DerivedStorage;
    if (fampb_getPredictionBandwidth(DerivedStorage, &v9)) {
      return 0;
    }
    if (*(void *)(v5 + 88)) {
      CFIndex v6 = &v9;
    }
    else {
      CFIndex v6 = (uint64_t *)(v5 + 184);
    }
    uint64_t v7 = *v6;
    uint64_t v9 = *v6;
  }
  else
  {
    uint64_t v7 = 0;
  }
  return fampb_configurePlaybackFilterAsync(a1, v7, a2);
}

uint64_t fampb_RecordConcurrentSwitchUpCheck(uint64_t result, int a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(result + 160);
  if (a2)
  {
    if (v3) {
      return result;
    }
    double v4 = *(double *)(result + 176);
    if (v4 <= 2.22507386e-308) {
      uint64_t result = FigGetUpTimeNanoseconds();
    }
    else {
      uint64_t result = (uint64_t)((*(double *)(result + 168) - v4) * 1000000000.0);
    }
  }
  else
  {
    if (!v3) {
      return result;
    }
    uint64_t result = 0;
  }
  *(void *)(v2 + 160) = result;
  return result;
}

uint64_t fampb_setBandwidthConditions(uint64_t a1)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFArrayRef theArray = 0;
  if (!*(void *)(DerivedStorage + 88)) {
    return 0;
  }
  uint64_t v3 = DerivedStorage;
  uint64_t valid = fampb_copyValidAlternateList(*(void *)(DerivedStorage + 80), (uint64_t)&theArray);
  if (valid)
  {
    uint64_t v11 = valid;
    goto LABEL_70;
  }
  if (!theArray) {
    return 0;
  }
  if (CFArrayGetCount(theArray) < 1)
  {
LABEL_69:
    uint64_t v11 = 0;
    goto LABEL_70;
  }
  int ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(*(void *)(v3 + 88));
  int PeakBitRate = FigAlternateGetPeakBitRate(*(void *)(v3 + 88));
  int v71 = (int)(*(double *)(v3 + 208) * (double)PeakBitRate);
  uint64_t v6 = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = v6;
  if (!*(unsigned char *)(v6 + 128))
  {
    double v12 = *(double *)(v6 + 208) * (double)(int)(FigAlternateGetPeakBitRate(*(void *)(v6 + 88)) - 1);
    goto LABEL_13;
  }
  double v8 = (uint64_t *)(v6 + 80);
  uint64_t v9 = *(void *)(v7 + 88);
  if (!*(unsigned char *)(v7 + 129))
  {
    CFTypeRef v13 = fampb_copyLowerSwitchCandidate(v8, v9, 1);
    if (!v13) {
      goto LABEL_18;
    }
    int v14 = v13;
    double v15 = (double)(int)FigAlternateGetExpectedAverageBitrate((uint64_t)v13);
    double v12 = v15 + (double)(int)FigAlternateGetExpectedAverageBitrate(*(void *)(v7 + 88)) * 1.1;
    CFRelease(v14);
LABEL_13:
    int RequiredBWForLowLatencyAlternate = (int)v12;
    if ((int)v12 != -1) {
      goto LABEL_14;
    }
LABEL_18:
    if (dword_1E9351230)
    {
      LODWORD(v88) = 0;
      LOBYTE(type) = 0;
      os_log_and_send_and_compose_flags_and_os_log_long long type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v25 = v88;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, (os_log_type_t)type)) {
        unsigned int v26 = v25;
      }
      else {
        unsigned int v26 = v25 & 0xFFFFFFFE;
      }
      if (v26)
      {
        uint64_t v27 = *(void *)(v3 + 72);
        int Count = (int)theArray;
        if (theArray) {
          int Count = CFArrayGetCount(theArray);
        }
        *(_DWORD *)uint64_t v91 = 136316162;
        *(void *)&v91[4] = "fampb_setBandwidthConditions";
        *(_WORD *)&v91[12] = 2048;
        *(void *)&v91[14] = a1;
        *(_WORD *)&v91[22] = 2112;
        *(void *)&v91[24] = v27;
        *(_WORD *)uint64_t v92 = 1024;
        *(_DWORD *)&v92[2] = ExpectedAverageBitrate;
        *(_WORD *)&v92[6] = 1024;
        *(_DWORD *)&v92[8] = Count;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(void *)(v3 + 888))
    {
      FigNetworkHistoryObserverRemoveCondition();
      *(void *)(v3 + 888) = 0;
    }
    goto LABEL_41;
  }
  int RequiredBWForLowLatencyAlternate = fampb_getRequiredBWForLowLatencyAlternate((uint64_t)v8, v9);
  if (RequiredBWForLowLatencyAlternate <= 0) {
    goto LABEL_18;
  }
LABEL_14:
  float v16 = fabsf(*(float *)(v3 + 196));
  if (v16 <= 1.0) {
    float v16 = 1.0;
  }
  uint64_t valuePtr = (uint64_t)((double)RequiredBWForLowLatencyAlternate * ceilf(v16));
  if (*(unsigned char *)(v3 + 128))
  {
    long long v74 = *(_OWORD *)(v3 + 656);
    long long v17 = *(_OWORD *)(v3 + 760);
    long long v18 = *(_OWORD *)(v3 + 792);
    *(_OWORD *)&v78[64] = *(_OWORD *)(v3 + 776);
    *(_OWORD *)&v78[80] = v18;
    *(_OWORD *)&v78[96] = *(_OWORD *)(v3 + 808);
    long long v19 = *(_OWORD *)(v3 + 696);
    long long v20 = *(_OWORD *)(v3 + 728);
    *(_OWORD *)int v78 = *(_OWORD *)(v3 + 712);
    *(_OWORD *)&v78[16] = v20;
    *(_OWORD *)&v78[32] = *(_OWORD *)(v3 + 744);
    *(_OWORD *)&v78[48] = v17;
    long long v76 = *(_OWORD *)(v3 + 680);
    long long v77 = v19;
    uint64_t v21 = *(void *)(v3 + 824);
    long long v22 = *(_OWORD *)(v3 + 848);
    long long type = *(_OWORD *)(v3 + 832);
    long long v86 = v22;
    long long v87 = *(_OWORD *)(v3 + 864);
    uint64_t v23 = *(void *)(v3 + 896);
  }
  else
  {
    long long v74 = *(_OWORD *)(v3 + 432);
    uint64_t v23 = *(void *)(v3 + 448);
    long long v29 = *(_OWORD *)(v3 + 536);
    long long v30 = *(_OWORD *)(v3 + 568);
    *(_OWORD *)&v78[64] = *(_OWORD *)(v3 + 552);
    *(_OWORD *)&v78[80] = v30;
    *(_OWORD *)&v78[96] = *(_OWORD *)(v3 + 584);
    long long v31 = *(_OWORD *)(v3 + 472);
    long long v32 = *(_OWORD *)(v3 + 504);
    *(_OWORD *)int v78 = *(_OWORD *)(v3 + 488);
    *(_OWORD *)&v78[16] = v32;
    *(_OWORD *)&v78[32] = *(_OWORD *)(v3 + 520);
    *(_OWORD *)&v78[48] = v29;
    long long v76 = *(_OWORD *)(v3 + 456);
    long long v77 = v31;
    uint64_t v21 = *(void *)(v3 + 600);
    long long v33 = *(_OWORD *)(v3 + 624);
    long long type = *(_OWORD *)(v3 + 608);
    long long v86 = v33;
    long long v87 = *(_OWORD *)(v3 + 640);
  }
  long long v97 = v74;
  long long v93 = *(_OWORD *)&v78[48];
  long long v94 = *(_OWORD *)&v78[64];
  long long v95 = *(_OWORD *)&v78[80];
  long long v96 = *(_OWORD *)&v78[96];
  *(_OWORD *)&v91[16] = v77;
  *(_OWORD *)uint64_t v92 = *(_OWORD *)v78;
  *(_OWORD *)&v92[16] = *(_OWORD *)&v78[16];
  *(_OWORD *)&v92[32] = *(_OWORD *)&v78[32];
  long long v88 = type;
  long long v89 = v86;
  long long v90 = v87;
  *(_OWORD *)uint64_t v91 = v76;
  CFNumberRef v34 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
  if (v34)
  {
    CFNumberRef v35 = v34;
    uint64_t v36 = v21 | 8;
    if (*(void *)(v3 + 888))
    {
      FigNetworkHistoryObserverRemoveCondition();
      *(void *)(v3 + 888) = 0;
    }
    *((void *)&v76 + 1) = 6;
    long long v77 = v97;
    *(_OWORD *)&v78[88] = v93;
    *(_OWORD *)&v78[104] = v94;
    long long v79 = v95;
    long long v80 = v96;
    *(_OWORD *)&v78[24] = *(_OWORD *)&v91[16];
    *(_OWORD *)&v78[40] = *(_OWORD *)v92;
    *(_OWORD *)&v78[56] = *(_OWORD *)&v92[16];
    *(_OWORD *)&v78[72] = *(_OWORD *)&v92[32];
    *(_OWORD *)&v78[8] = *(_OWORD *)v91;
    long long v82 = v88;
    long long v83 = v89;
    *(void *)&long long v76 = v35;
    *(void *)int v78 = v23;
    uint64_t v81 = v36;
    long long v84 = v90;
    uint64_t v11 = FigNetworkHistoryObserverAddCondition();
    CFRelease(v35);
    if (v11) {
      goto LABEL_70;
    }
  }
  else
  {
    uint64_t v11 = FigSignalErrorAt();
    if (v11) {
      goto LABEL_70;
    }
  }
  if (dword_1E9351230)
  {
    LODWORD(v88) = 0;
    LOBYTE(type) = 0;
    CFTypeID v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v38 = v88;
    if (os_log_type_enabled(v37, (os_log_type_t)type)) {
      unsigned int v39 = v38;
    }
    else {
      unsigned int v39 = v38 & 0xFFFFFFFE;
    }
    if (v39)
    {
      uint64_t v40 = *(void *)(v3 + 72);
      uint64_t v41 = *(void *)(v3 + 888);
      *(_DWORD *)uint64_t v91 = 136316930;
      *(void *)&v91[4] = "fampb_setBandwidthConditions";
      *(_WORD *)&v91[12] = 2048;
      *(void *)&v91[14] = a1;
      *(_WORD *)&v91[22] = 2112;
      *(void *)&v91[24] = v40;
      *(_WORD *)uint64_t v92 = 1024;
      *(_DWORD *)&v92[2] = RequiredBWForLowLatencyAlternate;
      *(_WORD *)&v92[6] = 1024;
      *(_DWORD *)&v92[8] = PeakBitRate;
      *(_WORD *)&v92[12] = 1024;
      *(_DWORD *)&v92[14] = ExpectedAverageBitrate;
      *(_WORD *)&v92[18] = 1024;
      *(_DWORD *)&v92[20] = v71;
      *(_WORD *)&v92[24] = 2048;
      *(void *)&v92[26] = v41;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
LABEL_41:
  int v42 = fampb_minimumBandwidthRequiredToSwitchUp(a1, theArray);
  if (v42 == -1)
  {
    if (dword_1E9351230)
    {
      LODWORD(v88) = 0;
      LOBYTE(type) = 0;
      int v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v53 = v88;
      if (os_log_type_enabled(v52, (os_log_type_t)type)) {
        unsigned int v54 = v53;
      }
      else {
        unsigned int v54 = v53 & 0xFFFFFFFE;
      }
      if (v54)
      {
        uint64_t v55 = *(void *)(v3 + 72);
        int v56 = (int)theArray;
        if (theArray) {
          int v56 = CFArrayGetCount(theArray);
        }
        *(_DWORD *)uint64_t v91 = 136316162;
        *(void *)&v91[4] = "fampb_setBandwidthConditions";
        *(_WORD *)&v91[12] = 2048;
        *(void *)&v91[14] = a1;
        *(_WORD *)&v91[22] = 2112;
        *(void *)&v91[24] = v55;
        *(_WORD *)uint64_t v92 = 1024;
        *(_DWORD *)&v92[2] = ExpectedAverageBitrate;
        *(_WORD *)&v92[6] = 1024;
        *(_DWORD *)&v92[8] = v56;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (*(void *)(v3 + 880))
    {
      FigNetworkHistoryObserverRemoveCondition();
      uint64_t v11 = 0;
      *(void *)(v3 + 880) = 0;
      goto LABEL_70;
    }
    goto LABEL_69;
  }
  int v43 = v42;
  float v44 = fabsf(*(float *)(v3 + 196));
  if (v44 <= 1.0) {
    float v44 = 1.0;
  }
  uint64_t valuePtr = (uint64_t)((double)v42 * ceilf(v44));
  if (*(unsigned char *)(v3 + 128))
  {
    long long v74 = *(_OWORD *)(v3 + 656);
    long long v45 = *(_OWORD *)(v3 + 760);
    long long v46 = *(_OWORD *)(v3 + 792);
    *(_OWORD *)&v78[64] = *(_OWORD *)(v3 + 776);
    *(_OWORD *)&v78[80] = v46;
    *(_OWORD *)&v78[96] = *(_OWORD *)(v3 + 808);
    long long v47 = *(_OWORD *)(v3 + 696);
    long long v48 = *(_OWORD *)(v3 + 728);
    *(_OWORD *)int v78 = *(_OWORD *)(v3 + 712);
    *(_OWORD *)&v78[16] = v48;
    *(_OWORD *)&v78[32] = *(_OWORD *)(v3 + 744);
    *(_OWORD *)&v78[48] = v45;
    long long v76 = *(_OWORD *)(v3 + 680);
    long long v77 = v47;
    uint64_t v49 = *(void *)(v3 + 824);
    long long v50 = *(_OWORD *)(v3 + 848);
    long long type = *(_OWORD *)(v3 + 832);
    long long v86 = v50;
    long long v87 = *(_OWORD *)(v3 + 864);
    uint64_t v51 = *(void *)(v3 + 896);
  }
  else
  {
    long long v74 = *(_OWORD *)(v3 + 432);
    uint64_t v51 = *(void *)(v3 + 448);
    long long v57 = *(_OWORD *)(v3 + 536);
    long long v58 = *(_OWORD *)(v3 + 568);
    *(_OWORD *)&v78[64] = *(_OWORD *)(v3 + 552);
    *(_OWORD *)&v78[80] = v58;
    *(_OWORD *)&v78[96] = *(_OWORD *)(v3 + 584);
    long long v59 = *(_OWORD *)(v3 + 472);
    long long v60 = *(_OWORD *)(v3 + 504);
    *(_OWORD *)int v78 = *(_OWORD *)(v3 + 488);
    *(_OWORD *)&v78[16] = v60;
    *(_OWORD *)&v78[32] = *(_OWORD *)(v3 + 520);
    *(_OWORD *)&v78[48] = v57;
    long long v76 = *(_OWORD *)(v3 + 456);
    long long v77 = v59;
    uint64_t v49 = *(void *)(v3 + 600);
    long long v61 = *(_OWORD *)(v3 + 624);
    long long type = *(_OWORD *)(v3 + 608);
    long long v86 = v61;
    long long v87 = *(_OWORD *)(v3 + 640);
  }
  long long v94 = *(_OWORD *)&v78[64];
  long long v95 = *(_OWORD *)&v78[80];
  long long v96 = *(_OWORD *)&v78[96];
  long long v97 = v74;
  *(_OWORD *)uint64_t v92 = *(_OWORD *)v78;
  *(_OWORD *)&v92[16] = *(_OWORD *)&v78[16];
  *(_OWORD *)&v92[32] = *(_OWORD *)&v78[32];
  long long v93 = *(_OWORD *)&v78[48];
  *(_OWORD *)uint64_t v91 = v76;
  *(_OWORD *)&v91[16] = v77;
  long long v88 = type;
  long long v89 = v86;
  long long v90 = v87;
  CFNumberRef v62 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
  if (v62)
  {
    CFNumberRef v63 = v62;
    uint64_t v64 = v49 | 8;
    if (*(void *)(v3 + 880))
    {
      FigNetworkHistoryObserverRemoveCondition();
      *(void *)(v3 + 880) = 0;
    }
    *((void *)&v76 + 1) = 5;
    long long v77 = v97;
    *(_OWORD *)&v78[88] = v93;
    *(_OWORD *)&v78[104] = v94;
    long long v79 = v95;
    long long v80 = v96;
    *(_OWORD *)&v78[24] = *(_OWORD *)&v91[16];
    *(_OWORD *)&v78[40] = *(_OWORD *)v92;
    *(_OWORD *)&v78[56] = *(_OWORD *)&v92[16];
    *(void *)&long long v76 = v63;
    *(void *)int v78 = v51;
    *(_OWORD *)&v78[72] = *(_OWORD *)&v92[32];
    *(_OWORD *)&v78[8] = *(_OWORD *)v91;
    uint64_t v81 = v64;
    long long v82 = v88;
    long long v83 = v89;
    long long v84 = v90;
    uint64_t v11 = FigNetworkHistoryObserverAddCondition();
    CFRelease(v63);
    if (v11) {
      goto LABEL_70;
    }
    goto LABEL_59;
  }
  uint64_t v11 = FigSignalErrorAt();
  if (!v11)
  {
LABEL_59:
    if (!dword_1E9351230) {
      goto LABEL_70;
    }
    LODWORD(v88) = 0;
    LOBYTE(type) = 0;
    int v65 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v66 = v88;
    if (os_log_type_enabled(v65, (os_log_type_t)type)) {
      unsigned int v67 = v66;
    }
    else {
      unsigned int v67 = v66 & 0xFFFFFFFE;
    }
    if (v67)
    {
      uint64_t v68 = *(void *)(v3 + 72);
      uint64_t v69 = *(void *)(v3 + 880);
      *(_DWORD *)uint64_t v91 = 136316930;
      *(void *)&v91[4] = "fampb_setBandwidthConditions";
      *(_WORD *)&v91[12] = 2048;
      *(void *)&v91[14] = a1;
      *(_WORD *)&v91[22] = 2112;
      *(void *)&v91[24] = v68;
      *(_WORD *)uint64_t v92 = 1024;
      *(_DWORD *)&v92[2] = v43;
      *(_WORD *)&v92[6] = 1024;
      *(_DWORD *)&v92[8] = PeakBitRate;
      *(_WORD *)&v92[12] = 1024;
      *(_DWORD *)&v92[14] = ExpectedAverageBitrate;
      *(_WORD *)&v92[18] = 1024;
      *(_DWORD *)&v92[20] = v71;
      *(_WORD *)&v92[24] = 2048;
      *(void *)&v92[26] = v69;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_69;
  }
LABEL_70:
  if (theArray) {
    CFRelease(theArray);
  }
  return v11;
}

uint64_t fampb_updateSmoothRTT(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  *(void *)(DerivedStorage + 904) = (a2 + 2 * *(void *)(DerivedStorage + 904)) / 3;
  double v5 = *(double *)(DerivedStorage + 256);
  if (v5 <= 2.22507386e-308) {
    uint64_t result = FigGetUpTimeNanoseconds();
  }
  else {
    uint64_t result = (uint64_t)((*(double *)(DerivedStorage + 248) - v5) * 1000000000.0);
  }
  *(void *)(v4 + 912) = result;
  return result;
}

uint64_t fampb_TimebaseListener(uint64_t a1, const void *a2)
{
  CMBaseObjectGetDerivedStorage();
  CFRetain(a2);
  CMNotificationCenterGetDefaultLocalCenter();

  return FigDeferNotificationToDispatchQueue();
}

void fampb_DeferredTimebaseListener(uint64_t a1, const void *a2)
{
  fampb_UpdateLocalBitrate((uint64_t)a2);

  CFRelease(a2);
}

uint64_t fampb_UpdateLocalBitrate(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  memset(&v22, 0, sizeof(v22));
  memset(&v21, 0, sizeof(v21));
  uint64_t v18 = a1;
  uint64_t v3 = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v27 = 0x3FF0000000000000;
  CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTimeValue value = *MEMORY[0x1E4F1FA20];
  CMTimeFlags flags = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 12);
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 8);
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA20] + 16);
  CMTimeValue v6 = *(void *)(MEMORY[0x1E4F1FA20] + 24);
  CMTimeScale v7 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 32);
  CMTimeFlags v8 = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 36);
  CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1FA20] + 40);
  MEMORY[0x19970E290](*v3);
  if (*((unsigned char *)v3 + 128) || FigAlternateIsIFrameOnly(v3[11]) || !v3[4])
  {
    int v10 = 0;
    int v11 = -15612;
  }
  else
  {
    memset(&v30, 0, sizeof(v30));
    if (*((unsigned char *)v3 + 396)) {
      CMTime v30 = *(CMTime *)((unsigned char *)v3 + 16);
    }
    else {
      CMTimebaseGetTimeClampedAboveAnchorTime();
    }
    memset(&v29, 0, sizeof(v29));
    *(_OWORD *)&lhs.start.CMTimeValue value = *(_OWORD *)((char *)v3 + 148);
    lhs.start.CMTimeEpoch epoch = *(void *)((char *)v3 + 164);
    CMTimeMultiply(&v29, &lhs.start, 2);
    memset(&v25, 0, sizeof(v25));
    fampb_calculateDuration((uint64_t)v3, &v25);
    lhs.CMTime start = v29;
    CMTime start = v25;
    CMTimeMaximum(&duration, &lhs.start, &start);
    CMTime start = v30;
    CMTimeRangeMake(&lhs, &start, &duration);
    CMTimeValue value = lhs.start.value;
    CMTimeFlags flags = lhs.start.flags;
    CMTimeScale timescale = lhs.start.timescale;
    CMTimeEpoch epoch = lhs.start.epoch;
    CMTimeValue v6 = lhs.duration.value;
    CMTimeScale v7 = lhs.duration.timescale;
    CMTimeFlags v8 = lhs.duration.flags;
    CMTimeEpoch v9 = lhs.duration.epoch;
    int v10 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    int v11 = 0;
  }
  MEMORY[0x19970E2B0](*v3);
  if (v10 && (flags & 1) != 0)
  {
    double v12 = 1.0;
    if ((v8 & 1) != 0 && !v9 && (v6 & 0x8000000000000000) == 0)
    {
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      float v16 = *(uint64_t (**)(const void *, CMTimeRange *, uint64_t *, CMTime *))(v14 + 136);
      if (v16)
      {
        lhs.start.CMTimeValue value = value;
        lhs.start.CMTimeScale timescale = timescale;
        lhs.start.CMTimeFlags flags = flags;
        lhs.start.CMTimeEpoch epoch = epoch;
        lhs.duration.CMTimeValue value = v6;
        lhs.duration.CMTimeScale timescale = v7;
        lhs.duration.CMTimeFlags flags = v8;
        lhs.duration.CMTimeEpoch epoch = 0;
        int v11 = v16(v10, &lhs, &v27, &rhs);
        double v12 = *(double *)&v27;
      }
      else
      {
        int v11 = -12782;
      }
    }
    v29.CMTimeValue value = rhs.value;
    CMTimeFlags v15 = rhs.flags;
    v29.CMTimeScale timescale = rhs.timescale;
    CMTimeEpoch v19 = rhs.epoch;
    v30.CMTimeValue value = value;
    v30.CMTimeScale timescale = timescale;
    goto LABEL_21;
  }
  v29.CMTimeValue value = rhs.value;
  CMTimeFlags v15 = rhs.flags;
  v29.CMTimeScale timescale = rhs.timescale;
  CMTimeEpoch v19 = rhs.epoch;
  v30.CMTimeValue value = value;
  v30.CMTimeScale timescale = timescale;
  double v12 = 1.0;
  if (v10) {
LABEL_21:
  }
    CFRelease(v10);
  MEMORY[0x19970E290](*DerivedStorage);
  if (*((unsigned char *)DerivedStorage + 396))
  {
    *(_OWORD *)&lhs.start.CMTimeValue value = *((_OWORD *)DerivedStorage + 24);
    lhs.start.CMTimeEpoch epoch = DerivedStorage[50];
  }
  else
  {
    CMTimebaseGetTimeClampedAboveAnchorTime();
  }
  CMTime v22 = lhs.start;
  lhs.start.CMTimeValue value = v30.value;
  lhs.start.CMTimeScale timescale = v30.timescale;
  lhs.start.CMTimeFlags flags = flags;
  lhs.start.CMTimeEpoch epoch = epoch;
  rhs.CMTimeValue value = v6;
  rhs.CMTimeScale timescale = v7;
  rhs.CMTimeFlags flags = v8;
  rhs.CMTimeEpoch epoch = v9;
  CMTimeAdd(&v21, &lhs.start, &rhs);
  if (!v11)
  {
    lhs.start.CMTimeValue value = v30.value;
    lhs.start.CMTimeScale timescale = v30.timescale;
    lhs.start.CMTimeFlags flags = flags;
    lhs.start.CMTimeEpoch epoch = epoch;
    CMTime rhs = v22;
    if (CMTimeCompare(&lhs.start, &rhs) <= 0)
    {
      lhs.CMTime start = v22;
      CMTime rhs = v21;
      if (CMTimeCompare(&lhs.start, &rhs) < 0)
      {
        if (vabdd_f64(v12, *((double *)DerivedStorage + 26)) > 2.22044605e-16
          && !FigAlternateIsIFrameOnly(DerivedStorage[11])
          && !FigAlternateIsAudioOnly(DerivedStorage[11]))
        {
          *((double *)DerivedStorage + 26) = v12;
          fampb_setBandwidthConditions(v18);
        }
        if (v15)
        {
          CMTimebaseGetTime(&time2, (CMTimebaseRef)DerivedStorage[41]);
          lhs.start.CMTimeValue value = v29.value;
          lhs.start.CMTimeScale timescale = v29.timescale;
          lhs.start.CMTimeFlags flags = v15;
          lhs.start.CMTimeEpoch epoch = v19;
          if (CMTimeCompare(&lhs.start, &time2) >= 1)
          {
            StopAndReleaseTimer((dispatch_object_t *)DerivedStorage + 40);
            lhs.start.CMTimeValue value = v29.value;
            lhs.start.CMTimeScale timescale = v29.timescale;
            lhs.start.CMTimeFlags flags = v15;
            lhs.start.CMTimeEpoch epoch = v19;
            fampb_CreateAndPrimeTimebaseTimer(v18, &lhs.start, (NSObject **)DerivedStorage + 40);
          }
        }
      }
    }
  }
  return MEMORY[0x19970E2B0](*DerivedStorage);
}

void fampb_CreateAndPrimeTimebaseTimer(uint64_t a1, CMTime *a2, NSObject **a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTimeScale v7 = fampb_timerDispatchSourceCreate(*(dispatch_queue_t *)(DerivedStorage + 24), a1, (void (__cdecl *)(void *))fampb_TimebaseTimerListener);
  if (v7)
  {
    CMTimeFlags v8 = v7;
    if (CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(DerivedStorage + 328), v7)
      || (CMTimeEpoch v9 = *(OpaqueCMTimebase **)(DerivedStorage + 328),
          CMTime fireTime = *a2,
          CMTimebaseSetTimerDispatchSourceNextFireTime(v9, v8, &fireTime, 1u)))
    {
      CFRelease(v8);
    }
    else
    {
      if (dword_1E9351230)
      {
        int v12 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      *a3 = v8;
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

void fampb_TimebaseTimerListener()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    BOOL v1 = (const void *)v0;
    fampb_UpdateLocalBitrate();
    CFRelease(v1);
  }
}

CMTime *fampb_calculateDuration@<X0>(uint64_t a1@<X0>, CMTime *a2@<X8>)
{
  if (*(float *)(a1 + 196) >= 0.0)
  {
    uint64_t v4 = (_OWORD *)(a1 + 336);
    if (*(unsigned char *)(a1 + 396)) {
      CMTime v7 = *(CMTime *)(a1 + 384);
    }
    else {
      CMTimebaseGetTimeClampedAboveAnchorTime();
    }
    *(_OWORD *)&rhs.CMTimeValue value = *v4;
    rhs.CMTimeEpoch epoch = *(void *)(a1 + 352);
    CMTimeSubtract(&time1, &rhs, &v7);
    CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    p_CMTime time1 = &time1;
  }
  else
  {
    if (*(unsigned char *)(a1 + 396)) {
      CMTime lhs = *(CMTime *)(a1 + 384);
    }
    else {
      CMTimebaseGetTimeClampedAboveAnchorTime();
    }
    CMTime rhs = *(CMTime *)(a1 + 336);
    CMTimeSubtract(&v11, &lhs, &rhs);
    CMTime rhs = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    p_CMTime time1 = &v11;
  }
  return CMTimeMaximum(a2, p_time1, &rhs);
}

NSObject *fampb_timerDispatchSourceCreate(dispatch_queue_t queue, uint64_t a2, void (__cdecl *a3)(void *))
{
  uint64_t v4 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, queue);
  if (v4)
  {
    double v5 = (void *)FigCFWeakReferenceHolderCreateWithReferencedObject();
    dispatch_set_context(v4, v5);
    dispatch_source_set_timer(v4, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_source_set_event_handler_f(v4, a3);
    dispatch_source_set_cancel_handler_f(v4, 0);
    dispatch_set_finalizer_f(v4, (dispatch_function_t)FigCFRelease_5);
    dispatch_resume(v4);
  }
  return v4;
}

uint64_t fampb_configurePlaybackFilterAsync(const void *a1, uint64_t a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = CMBaseObjectGetDerivedStorage();
  CMTimeFlags v8 = malloc_type_calloc(1uLL, 0x128uLL, 0x10E00402C2D11CCuLL);
  if (v8)
  {
    CMTimeEpoch v9 = *(const void **)(v7 + 88);
    if (v9) {
      CFRetain(v9);
    }
    int v10 = *(const void **)(v7 + 96);
    if (v10) {
      CFRetain(v10);
    }
    CMTime v11 = *(const void **)(v7 + 104);
    if (v11) {
      CFRetain(v11);
    }
    int v12 = *(const void **)(v7 + 112);
    if (v12) {
      CFRetain(v12);
    }
    uint64_t v13 = (CFTypeRef *)(v7 + 80);
    uint64_t v14 = *(const void **)(v7 + 120);
    if (v14) {
      CFRetain(v14);
    }
    if (*v13) {
      CFRetain(*v13);
    }
    long long v15 = *(_OWORD *)v13;
    long long v16 = *(_OWORD *)(v7 + 96);
    long long v17 = *(_OWORD *)(v7 + 128);
    *(_OWORD *)(v8 + 7) = *(_OWORD *)(v7 + 112);
    *(_OWORD *)(v8 + 9) = v17;
    *(_OWORD *)(v8 + 3) = v15;
    *(_OWORD *)(v8 + 5) = v16;
    long long v18 = *(_OWORD *)(v7 + 144);
    long long v19 = *(_OWORD *)(v7 + 160);
    long long v20 = *(_OWORD *)(v7 + 192);
    *(_OWORD *)(v8 + 15) = *(_OWORD *)(v7 + 176);
    *(_OWORD *)(v8 + 17) = v20;
    *(_OWORD *)(v8 + 11) = v18;
    *(_OWORD *)(v8 + 13) = v19;
    long long v21 = *(_OWORD *)(v7 + 208);
    long long v22 = *(_OWORD *)(v7 + 224);
    long long v23 = *(_OWORD *)(v7 + 240);
    v8[25] = *(void *)(v7 + 256);
    *(_OWORD *)(v8 + 21) = v22;
    *(_OWORD *)(v8 + 23) = v23;
    *(_OWORD *)(v8 + 19) = v21;
    if (a1) {
      CFTypeRef v24 = CFRetain(a1);
    }
    else {
      CFTypeRef v24 = 0;
    }
    *CMTimeFlags v8 = v24;
    uint64_t v25 = *(void *)(v7 + 8);
    if (v25) {
      uint64_t v25 = FigCFWeakReferenceHolderCopyReferencedObject();
    }
    v8[1] = v25;
    v8[2] = *(void *)(v7 + 16);
    if (*(unsigned char *)(v7 + 396)) {
      CMTime lhs = *(CMTime *)(v7 + 384);
    }
    else {
      CMTimebaseGetTimeClampedAboveAnchorTime();
    }
    CMTime rhs = *(CMTime *)(v7 + 360);
    CMTimeAdd(&v33, &lhs, &rhs);
    *((CMTime *)v8 + 9) = v33;
    *((_DWORD *)v8 + 60) = a3;
    v8[31] = a2;
    uint64_t v26 = *(void *)(v7 + 904);
    if (v26 <= 0) {
      uint64_t v26 = 100000;
    }
    v8[36] = v26;
    fampb_calculateDuration(v7, &lhs);
    *(CMTime *)(v8 + 32) = lhs;
    v8[26] = 0;
    *((unsigned char *)v8 + 280) = *(unsigned char *)(v7 + 421);
    if (*(unsigned char *)(v7 + 423)) {
      char v27 = *(unsigned char *)(v7 + 131);
    }
    else {
      char v27 = 1;
    }
    *((unsigned char *)v8 + 75) = v27;
    CFIndex v28 = *(unsigned int *)(v7 + 416);
    if ((v28 & 0x80000000) != 0) {
      goto LABEL_41;
    }
    lhs.CFArrayRef value = 0;
    if (fampb_copyAlternateListSortedByQuality((uint64_t *)(v7 + 80), (const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, (const __CFArray **)&lhs))goto LABEL_39; {
    if (!lhs.value)
    }
    {
LABEL_41:
      *(_DWORD *)(v7 + 416) = -1;
      *(unsigned char *)(v7 + 131) = 0;
LABEL_42:
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 24), v8, (dispatch_function_t)fampb_configurePlaybackFilterUnlocked);
      return 0;
    }
    if (CFArrayGetCount((CFArrayRef)lhs.value) < 1)
    {
LABEL_39:
      if (lhs.value) {
        CFRelease((CFTypeRef)lhs.value);
      }
      goto LABEL_41;
    }
    CFArrayRef value = (const __CFArray *)lhs.value;
    if (lhs.value)
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)lhs.value);
      CFArrayRef value = (const __CFArray *)lhs.value;
      if (Count > v28)
      {
LABEL_36:
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(value, v28);
        if (ValueAtIndex) {
          CFDictionaryRef ValueAtIndex = CFRetain(ValueAtIndex);
        }
        v8[26] = ValueAtIndex;
        goto LABEL_39;
      }
      if (lhs.value)
      {
        CFIndex v28 = CFArrayGetCount((CFArrayRef)lhs.value) - 1;
        CFArrayRef value = (const __CFArray *)lhs.value;
        goto LABEL_36;
      }
    }
    CFIndex v28 = -1;
    goto LABEL_36;
  }
  uint64_t result = FigSignalErrorAt();
  if (!result) {
    goto LABEL_42;
  }
  return result;
}

void fampb_configurePlaybackFilterUnlocked(uint64_t a1)
{
  CFTypeRef v83 = 0;
  if (!*(void *)a1) {
    goto LABEL_101;
  }
  if (!*(void *)(a1 + 32)) {
    goto LABEL_101;
  }
  uint64_t AllocatorForMedia = FigGetAllocatorForMedia();
  if (FigAlternateFilterTreeCreate(AllocatorForMedia, &v83)) {
    goto LABEL_101;
  }
  if (!v83)
  {
    FigSignalErrorAt();
LABEL_101:
    CFTypeRef v49 = 0;
    goto LABEL_199;
  }
  uint64_t v3 = (uint64_t *)(a1 + 24);
  uint64_t v4 = *(const void **)(a1 + 24);
  if (!v4 || FigAlternateFilterTreeInsertLeaf((uint64_t)v83, v4, 500)) {
    goto LABEL_101;
  }
  double v5 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
  if (!*(unsigned char *)(a1 + 72))
  {
    int v14 = *(_DWORD *)(a1 + 240);
    if (v14 == 1)
    {
      int v15 = *(_DWORD *)(a1 + 88);
      if (v15)
      {
        if ((v15 & 6) != 0 || *(unsigned char *)(a1 + 280)) {
          goto LABEL_71;
        }
      }
      else if ((v15 & 6) != 0)
      {
        goto LABEL_71;
      }
      if ((v15 & 8) == 0) {
        goto LABEL_156;
      }
    }
    else if (v14 || *(float *)(a1 + 144) == 0.0)
    {
      goto LABEL_156;
    }
LABEL_71:
    CFTypeRef v41 = v83;
    BOOL v82 = *(float *)(a1 + 144) != 0.0;
    CFArrayRef v91 = 0;
    v92[0] = 0;
    int ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(*(void *)(a1 + 32));
    if (!v41 || !*(void *)(a1 + 16) || !*(void *)(a1 + 8) || !*(void *)(a1 + 32) || *(unsigned char *)(a1 + 75))
    {
      int inserted = 0;
      goto LABEL_153;
    }
    int v43 = ExpectedAverageBitrate;
    fampb_copyValidAlternateList(*v3, (uint64_t)&v91);
    if (!v91) {
      goto LABEL_156;
    }
    v86.CFArrayRef value = 0;
    cf.CFArrayRef value = 0;
    PixelCFIndex Count = FigAlternateGetPixelCount(*(void *)(a1 + 32));
    unsigned int v45 = *(_DWORD *)(a1 + 88);
    if ((v45 & 4) != 0)
    {
      if (FigAlternateIsAudioOnly(*(void *)(a1 + 32))) {
        BOOL v46 = 1;
      }
      else {
        BOOL v46 = !FigAlternateHasHDVideoResolution(*(void *)(a1 + 32));
      }
    }
    else
    {
      BOOL v46 = 0;
    }
    if (*(_DWORD *)(a1 + 240) == 1)
    {
      if (((PixelCount != 0) & (v45 >> 3)) != 0)
      {
        CFAllocatorRef v50 = *v5;
        int v51 = FigAlternateMinimumRequiredPixelCountFilterCreate(*v5, (uint64_t)((double)PixelCount + (double)PixelCount), &v86);
        if (v51)
        {
LABEL_115:
          int inserted = v51;
          goto LABEL_117;
        }
        int inserted = FigAlternateFilterTreeInsertLeaf((uint64_t)v41, (const void *)v86.value, 305);
        if (inserted) {
          BOOL v53 = 0;
        }
        else {
          BOOL v53 = v46;
        }
        if (v53)
        {
LABEL_113:
          double v54 = *(double *)(a1 + 80);
          int PeakBitRate = FigAlternateGetPeakBitRate(*(void *)(a1 + 32));
          int v51 = FigAlternateMinimumRequiredBitrateFilterCreate(v50, (int)(v54 * (double)PeakBitRate / *(double *)(a1 + 152)), &cf);
          if (!v51) {
            int v51 = FigAlternateFilterTreeInsertLeaf((uint64_t)v41, (const void *)cf.value, 349);
          }
          goto LABEL_115;
        }
LABEL_117:
        if (v86.value) {
          CFRelease((CFTypeRef)v86.value);
        }
        if (cf.value) {
          CFRelease((CFTypeRef)cf.value);
        }
        if (!inserted)
        {
          CFAllocatorRef v56 = *v5;
          CFMutableArrayRef Mutable = CFArrayCreateMutable(*v5, 0, MEMORY[0x1E4F1D510]);
          if (Mutable)
          {
            long long v58 = Mutable;
            uint64_t v78 = (uint64_t)v41;
            uint64_t v80 = (uint64_t)v56;
            if (CFArrayGetCount(v91) >= 1)
            {
              CFIndex v59 = 0;
              int v60 = 0;
              while (1)
              {
                CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v91, v59);
                if (FigCFEqual()) {
                  break;
                }
                FigAlternateScaleBitrateFractionToNewAlternate(*(void *)(a1 + 32), (uint64_t)ValueAtIndex);
                if (v62 * (double)(int)FigAlternateGetPeakBitRate((uint64_t)ValueAtIndex) <= (double)*(uint64_t *)(a1 + 248))
                {
                  if (FigCFEqual()) {
                    goto LABEL_127;
                  }
                  CFNumberRef v63 = v5;
                  uint64_t v65 = *(void *)(a1 + 8);
                  uint64_t v64 = *(unsigned int (**)(uint64_t, const void *, CMTime *, CMTime *, BOOL, double))(a1 + 16);
                  CMTime v86 = *(CMTime *)(a1 + 256);
                  *(_OWORD *)&cf.CFArrayRef value = kStallCheckMargin;
                  cf.CMTimeEpoch epoch = 0;
                  CMTimeSubtract(&v85, &v86, &cf);
                  double v66 = (double)*(uint64_t *)(a1 + 248);
                  CMTime v86 = *(CMTime *)(a1 + 216);
                  uint64_t v67 = v65;
                  double v5 = v63;
                  if (!v64(v67, ValueAtIndex, &v86, &v85, v82, v66)) {
                    goto LABEL_127;
                  }
                }
                CFArrayAppendValue(v58, ValueAtIndex);
LABEL_131:
                if (++v59 >= CFArrayGetCount(v91)) {
                  goto LABEL_137;
                }
              }
              int v60 = 1;
LABEL_127:
              if (v43 < (int)FigAlternateGetExpectedAverageBitrate((uint64_t)ValueAtIndex)) {
                int v43 = FigAlternateGetExpectedAverageBitrate((uint64_t)ValueAtIndex);
              }
              goto LABEL_131;
            }
            int v60 = 0;
LABEL_137:
            if (v43 == FigAlternateGetExpectedAverageBitrate(*(void *)(a1 + 32))
              && v60
              && *(_DWORD *)(a1 + 240) == 1)
            {
              int inserted = -15616;
            }
            else
            {
              CFIndex v68 = CFArrayGetCount(v58) + 1;
              if (v68 == CFArrayGetCount(v91))
              {
                if (v60)
                {
                  if (!*(_DWORD *)(a1 + 240))
                  {
                    CMTime v86 = *(CMTime *)(a1 + 256);
                    CMTime cf = *(CMTime *)(a1 + 92);
                    double Seconds = CMTimeGetSeconds(&v86);
                    CMTime v86 = cf;
                    if (Seconds <= CMTimeGetSeconds(&v86)) {
                      CFArrayAppendValue(v58, *(const void **)(a1 + 32));
                    }
                  }
                }
              }
              if (CFArrayGetCount(v58) < 1)
              {
                int inserted = 0;
              }
              else
              {
                int v70 = FigAlternateDenyListFilterCreate(v80, v58, @"MonitorStallListFilter", 0x257u, 1, v92);
                if (!v70) {
                  int v70 = FigAlternateFilterTreeInsertLeaf(v78, v92[0], 345);
                }
                int inserted = v70;
              }
            }
            CFRelease(v58);
            if (v92[0]) {
              CFRelease(v92[0]);
            }
          }
          else
          {
            int inserted = FigSignalErrorAt();
          }
        }
LABEL_153:
        if (v91) {
          CFRelease(v91);
        }
        if (inserted) {
          goto LABEL_101;
        }
        goto LABEL_156;
      }
      if (v46)
      {
        CFAllocatorRef v50 = *v5;
        goto LABEL_113;
      }
    }
    int inserted = 0;
    goto LABEL_117;
  }
  CFTypeRef v6 = v83;
  cf.CFArrayRef value = 0;
  CFArrayRef v91 = 0;
  v92[0] = 0;
  CFArrayRef v89 = 0;
  long long v90 = 0;
  if (!v83 || !*(void *)(a1 + 32))
  {
    int v9 = 0;
    int v10 = 0;
    goto LABEL_84;
  }
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  char v8 = 1;
  int v9 = fampb_copyAlternateListSortedByQuality((uint64_t *)(a1 + 24), (const __CFAllocator *)*MEMORY[0x1E4F1CF80], 1, &v89);
  int v10 = 0;
  if (!v9 && v89)
  {
    int v10 = CFArrayCreateMutable(v7, 0, MEMORY[0x1E4F1D510]);
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 248);
      if (*(unsigned char *)(a1 + 73))
      {
        memset(&v86, 0, sizeof(v86));
        uint64_t v12 = *(void *)(a1 + 288);
        CMTime v85 = *(CMTime *)(a1 + 256);
        BOOL shouldSwitchUpConcurrently = fampb_shouldSwitchUpConcurrently(a1 + 24, v11, v12, &v85);
        if (*(void *)(a1 + 40))
        {
          char v8 = 0;
          int v9 = 0;
          goto LABEL_85;
        }
        BOOL v18 = shouldSwitchUpConcurrently;
        if (fampb_trialSwitchDownInProgress(a1 + 24)
          || (uint64_t v19 = *(void *)(a1 + 288),
              CMTime v85 = *(CMTime *)(a1 + 256),
              fampb_shouldSwitchDownConcurrently(a1 + 24, v11, v19, (uint64_t)&v85, &v86)))
        {
          int v16 = 0;
        }
        else if (v18)
        {
          if (fampb_ConcurrentSwitchUpValidForLongEnough(a1 + 24)) {
            int v16 = 1;
          }
          else {
            int v16 = 2;
          }
        }
        else
        {
          int v16 = 2;
        }
        BOOL v17 = *(unsigned char *)(a1 + 73) == 0;
      }
      else
      {
        int v16 = *(_DWORD *)(a1 + 240);
        BOOL v17 = 1;
      }
      CFAllocatorRef v81 = v7;
      if (v17 && v16 == 1) {
        v11 -= (int)FigAlternateGetExpectedAverageBitrate(*(void *)(a1 + 32));
      }
      if (CFArrayGetCount(v89) >= 1)
      {
        CFIndex v20 = 0;
        long long v21 = (_OWORD *)(a1 + 256);
        do
        {
          long long v22 = CFArrayGetValueAtIndex(v89, v20);
          if (FigCFEqual())
          {
            if (v16 || !v20 || !*(unsigned char *)(a1 + 73)) {
              goto LABEL_57;
            }
LABEL_56:
            CFArrayAppendValue(v10, v22);
            goto LABEL_57;
          }
          long long v23 = *(uint64_t (**)(double))(a1 + 16);
          if (v23)
          {
            uint64_t v24 = *(void *)(a1 + 8);
            if (!v24) {
              goto LABEL_44;
            }
            if (!*(unsigned char *)(a1 + 75) && (v20 || !*(unsigned char *)(a1 + 73)))
            {
              double v27 = (double)*(uint64_t *)(a1 + 248);
              CMTime v86 = *(CMTime *)(a1 + 216);
              *(_OWORD *)&v85.CFArrayRef value = *v21;
              v85.CMTimeEpoch epoch = *(void *)(a1 + 272);
              LODWORD(v24) = v23(v27);
              if (v24) {
                goto LABEL_48;
              }
              goto LABEL_44;
            }
          }
          LODWORD(v24) = 0;
LABEL_44:
          if (v16 == 1)
          {
            uint64_t v25 = *(void *)(a1 + 288);
            *(_OWORD *)&v86.CFArrayRef value = *v21;
            v86.CMTimeEpoch epoch = *(void *)(a1 + 272);
            int canSwitchDownConcurrentlyWithoutStall = fampb_canSwitchDownConcurrentlyWithoutStall((uint64_t)v3, &v86, v25, v11, (uint64_t)v22, 0, 0.75);
LABEL_46:
            LODWORD(v24) = canSwitchDownConcurrentlyWithoutStall ^ 1;
            goto LABEL_55;
          }
LABEL_48:
          if (!(v24 | v16))
          {
            if (!v20 || !*(unsigned char *)(a1 + 73)) {
              goto LABEL_57;
            }
            if (v11 < (int)fampb_getRequiredBWForLowLatencyAlternate((uint64_t)v3, (uint64_t)v22)) {
              goto LABEL_56;
            }
            uint64_t v79 = (uint64_t)v3;
            CFIndex v28 = v10;
            uint64_t v29 = v11;
            CFTypeRef v30 = v6;
            long long v31 = v5;
            int v32 = FigAlternateGetPeakBitRate((uint64_t)v22);
            BOOL v33 = v32 < (int)FigAlternateGetPeakBitRate(*(void *)(a1 + 32));
            double v5 = v31;
            CFTypeRef v6 = v30;
            uint64_t v11 = v29;
            int v10 = v28;
            uint64_t v3 = (uint64_t *)v79;
            if (!v33) {
              goto LABEL_57;
            }
            uint64_t v34 = *(void *)(a1 + 288);
            uint64_t v35 = *(void *)(a1 + 32);
            *(_OWORD *)&v86.CFArrayRef value = *v21;
            v86.CMTimeEpoch epoch = *(void *)(a1 + 272);
            int canSwitchDownConcurrentlyWithoutStall = fampb_canSwitchDownConcurrentlyToAlternateWithoutStall((uint64_t)v22, v79, &v86, v34, v11, v35, 0, 1.0);
            goto LABEL_46;
          }
LABEL_55:
          if (v24) {
            goto LABEL_56;
          }
LABEL_57:
          ++v20;
        }
        while (v20 < CFArrayGetCount(v89));
      }
      if (CFArrayGetCount(v10) <= 0
        || (char v8 = 1,
            (int v36 = FigAlternateDenyListFilterCreate((uint64_t)v81, v10, @"ConcurrentDenyListFilter", 0x257u, 1, &v91)) == 0)&& (int v36 = FigAlternateFilterTreeInsertLeaf((uint64_t)v6, v91, 345)) == 0)
      {
        if (v16 == 1)
        {
          int v37 = FigAlternateNextHighestPeakBitRateFilterCreate(v81, *(void *)(a1 + 32), &v90, 1.1);
          if (!v37)
          {
            unsigned int v38 = v90;
            uint64_t v39 = (uint64_t)v6;
            int v40 = 250;
LABEL_64:
            int v37 = FigAlternateFilterTreeInsertLeaf(v39, v38, v40);
          }
        }
        else
        {
          if ((v16 & 0xFFFFFFFD) != 0)
          {
            int v9 = 0;
            goto LABEL_84;
          }
          int v47 = FigAlternateGetPeakBitRate(*(void *)(a1 + 32));
          int v37 = FigAlternatePeakBitRateCapFilterCreate((uint64_t)v81, v47, &cf);
          if (!v37)
          {
            int v9 = FigAlternateFilterTreeInsertLeaf((uint64_t)v6, (const void *)cf.value, 460);
            if (v9 | v16 || *(unsigned char *)(a1 + 73)) {
              goto LABEL_84;
            }
            int v37 = FigAlternateLowestVideoThenAudioFilterCreate(v81, v92);
            if (!v37)
            {
              unsigned int v38 = v92[0];
              uint64_t v39 = (uint64_t)v6;
              int v40 = 230;
              goto LABEL_64;
            }
          }
        }
        int v9 = v37;
LABEL_84:
        char v8 = 1;
        goto LABEL_85;
      }
    }
    else
    {
      int v36 = FigSignalErrorAt();
    }
    int v9 = v36;
  }
LABEL_85:
  if (v91) {
    CFRelease(v91);
  }
  if (cf.value) {
    CFRelease((CFTypeRef)cf.value);
  }
  if (v92[0]) {
    CFRelease(v92[0]);
  }
  if (v90) {
    CFRelease(v90);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v89) {
    CFRelease(v89);
  }
  if (v9) {
    char v48 = 0;
  }
  else {
    char v48 = v8;
  }
  if ((v48 & 1) == 0) {
    goto LABEL_101;
  }
LABEL_156:
  CFTypeRef v49 = v83;
  v86.CFArrayRef value = 0;
  v85.CFArrayRef value = 0;
  cf.CFArrayRef value = 0;
  CFArrayRef v91 = 0;
  v92[0] = 0;
  CFArrayRef v89 = 0;
  long long v90 = 0;
  CFTypeRef v87 = 0;
  CFTypeRef v88 = 0;
  if (!v83)
  {
    int v75 = 0;
    goto LABEL_178;
  }
  int v71 = *(const void **)(a1 + 208);
  CFAllocatorRef v72 = *v5;
  if (v71)
  {
    int v73 = FigAlternateSingleAlternateFilterCreate((uint64_t)*v5, v71, 0, @"GearIndexAlternateFilter", 590, &v85);
    if (v73) {
      goto LABEL_217;
    }
    int v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, (const void *)v85.value, 410);
    if (v73) {
      goto LABEL_217;
    }
  }
  int v73 = FigAlternateMeasuredBitrateCapFilterCreate(v72, *(void *)(a1 + 248), 0, &v91, *(double *)(a1 + 152), *(float *)(a1 + 144));
  if (v73) {
    goto LABEL_217;
  }
  int v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, v91, 350);
  if (v73) {
    goto LABEL_217;
  }
  int v74 = *(_DWORD *)(a1 + 136);
  if (v74 != 0x7FFFFFFF)
  {
    int v73 = FigAlternatePeakBitRateCapFilterCreate((uint64_t)v72, v74, &v90);
    if (v73) {
      goto LABEL_217;
    }
    int v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, v90, 460);
    if (v73) {
      goto LABEL_217;
    }
  }
  if (CelestialShouldLimitConcurrent4K60HEVCDecoding())
  {
    int v73 = FigAlternateLimitConcurrent4K60HEVCDecodeFilterCreate(v72, *(CFTypeRef *)(a1 + 32), &v86);
    if (v73) {
      goto LABEL_217;
    }
    int v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, (const void *)v86.value, 340);
    if (v73) {
      goto LABEL_217;
    }
  }
  int v73 = FigAlternateHighestRankingScoreFilterCreate(v72, &v87);
  if (v73
    || (int v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, v87, 310)) != 0
    || (int v73 = FigAlternateFrameRateSwitchCapFilterCreate(v72, &cf)) != 0
    || (int v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, (const void *)cf.value, 300)) != 0
    || (int v73 = FigAlternatePlaybackScoreAndBitRateFilterCreate(v72, v92)) != 0
    || (int v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, v92[0], 200)) != 0
    || (int v73 = FigAlternateFinalSelectionHighestPeakBitRateFilterCreate((uint64_t)v72, &v89)) != 0
    || (int v73 = FigAlternateFilterTreeInsertLeaf((uint64_t)v49, v89, 100)) != 0)
  {
LABEL_217:
    int v75 = v73;
    goto LABEL_218;
  }
  int v75 = FigAlternateFilterTreeCreateFilter(v49, @"BitrateFilterTree", 600, &v88);
  if (v75)
  {
LABEL_218:
    CFTypeRef v49 = 0;
    goto LABEL_178;
  }
  CFTypeRef v49 = v88;
  CFTypeRef v88 = 0;
LABEL_178:
  if (v86.value) {
    CFRelease((CFTypeRef)v86.value);
  }
  if (v85.value) {
    CFRelease((CFTypeRef)v85.value);
  }
  if (cf.value) {
    CFRelease((CFTypeRef)cf.value);
  }
  if (v92[0]) {
    CFRelease(v92[0]);
  }
  if (v91) {
    CFRelease(v91);
  }
  if (v90) {
    CFRelease(v90);
  }
  if (v89) {
    CFRelease(v89);
  }
  if (v88) {
    CFRelease(v88);
  }
  if (v87) {
    CFRelease(v87);
  }
  if (!v75 && v49) {
    fampb_notifyFilterChangeUnlocked(*(const void **)a1, v49);
  }
LABEL_199:
  fampb_releaseAndClearPlaybackFilterConfig(a1 + 24);
  long long v76 = *(const void **)(a1 + 8);
  if (v76) {
    CFRelease(v76);
  }
  if (*(void *)a1) {
    CFRelease(*(CFTypeRef *)a1);
  }
  long long v77 = *(const void **)(a1 + 208);
  if (v77) {
    CFRelease(v77);
  }
  free((void *)a1);
  if (v83) {
    CFRelease(v83);
  }
  if (v49) {
    CFRelease(v49);
  }
}

BOOL fampb_shouldSwitchUpConcurrently(uint64_t a1, uint64_t a2, uint64_t a3, CMTime *a4)
{
  CMTime theArray = *a4;
  if (fampb_proportionOfFullBufferForConcurrentSwitching(a1, &theArray) < 0.5 || *(void *)(a1 + 16)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 49))
  {
    theArray.CFArrayRef value = 0;
    CFTypeRef v8 = 0;
    if (fampb_copyAlternateListSortedByQuality((uint64_t *)a1, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], 0, (const __CFArray **)&theArray))
    {
LABEL_13:
      if (theArray.value) {
        CFRelease((CFTypeRef)theArray.value);
      }
      goto LABEL_15;
    }
    if (theArray.value)
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)theArray.value);
      if (Count < 2)
      {
LABEL_10:
        CFTypeRef v8 = 0;
      }
      else
      {
        CFIndex v10 = Count;
        CFIndex v11 = 1;
        while (CFArrayGetValueAtIndex((CFArrayRef)theArray.value, v11 - 1) != *(const void **)(a1 + 8))
        {
          if (v10 == ++v11) {
            goto LABEL_10;
          }
        }
        CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)theArray.value, v11);
        CFTypeRef v8 = CFRetain(ValueAtIndex);
      }
      goto LABEL_13;
    }
  }
  CFTypeRef v8 = 0;
LABEL_15:
  int ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(*(void *)(a1 + 8));
  if (!*(unsigned char *)(a1 + 49))
  {
    BOOL v14 = a2 - ExpectedAverageBitrate > ExpectedAverageBitrate;
    fampb_RecordConcurrentSwitchUpCheck(a1, v14);
    if (!v8) {
      return v14;
    }
    goto LABEL_30;
  }
  if (v8)
  {
    if ((double)(int)fampb_getRequiredBWForLowLatencyAlternate(a1, (uint64_t)v8) * 1.1 < (double)a2)
    {
      if (!*(unsigned char *)(a1 + 49))
      {
        BOOL v14 = 1;
        goto LABEL_29;
      }
      if (*(uint64_t *)(a1 + 152) < 1 || FigGetUpTimeNanoseconds() <= *(void *)(a1 + 152))
      {
        CFTypeRef v15 = fampb_copyLowerSwitchCandidate((uint64_t *)a1, (uint64_t)v8, 1);
        CMTime theArray = *a4;
        BOOL v14 = fampb_concurrentSwitchDownSafetyFactor(a1, (uint64_t)v15, (uint64_t)v8, &theArray, a3, a2, 0, 0) >= 1.1;
        if (v15) {
          CFRelease(v15);
        }
        goto LABEL_29;
      }
    }
    BOOL v14 = 0;
LABEL_29:
    fampb_RecordConcurrentSwitchUpCheck(a1, v14);
LABEL_30:
    CFRelease(v8);
    return v14;
  }
  fampb_RecordConcurrentSwitchUpCheck(a1, 0);
  return 0;
}

uint64_t fampb_trialSwitchDownInProgress(uint64_t a1)
{
  if (!*(void *)(a1 + 8)) {
    return 0;
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    int PeakBitRate = FigAlternateGetPeakBitRate(result);
    return PeakBitRate < (int)FigAlternateGetPeakBitRate(*(void *)(a1 + 8));
  }
  return result;
}

uint64_t fampb_shouldSwitchDownConcurrently(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CMTime *a5)
{
  uint64_t v5 = MEMORY[0x1E4F1F9F8];
  long long v6 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a5->CFArrayRef value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v7 = *(void *)(v5 + 16);
  a5->CMTimeEpoch epoch = v7;
  if (!*(unsigned char *)(a1 + 48) || *(float *)(a1 + 120) == 0.0) {
    goto LABEL_3;
  }
  long long v32 = v6;
  *(_OWORD *)&v33.CFArrayRef value = *(_OWORD *)a4;
  v33.CMTimeEpoch epoch = *(void *)(a4 + 16);
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    int PeakBitRate = FigAlternateGetPeakBitRate(v15);
    int v18 = FigAlternateGetPeakBitRate(*(void *)(a1 + 8));
    BOOL v19 = PeakBitRate > v18;
    BOOL v20 = PeakBitRate <= v18;
    int v21 = v19;
  }
  else
  {
    BOOL v19 = 0;
    BOOL v20 = 0;
    int v21 = 1;
  }
  if (*(unsigned char *)(a1 + 49) && (v19 || v20)) {
    uint64_t v16 = *(void *)(a1 + 16);
  }
  if ((int)fampb_getRequiredBWForLowLatencyAlternate(a1, v16) >= a2)
  {
    if (!*(unsigned char *)(a1 + 49) || *(uint64_t *)(a1 + 96) < 1) {
      goto LABEL_32;
    }
    int v24 = (int)FigAlternateGetPeakBitRate(v16) > a2 || v19;
    int v22 = v20 | v24;
    int v23 = (v20 | v24) ^ 1;
  }
  else
  {
    int v22 = 0;
    int v23 = 1;
  }
  if ((v21 & v23) != 1 || (CMTime v36 = v33, fampb_proportionOfFullBufferForConcurrentSwitching(a1, &v36) >= 1.0))
  {
    char v25 = v21 ^ 1;
    if (v22) {
      char v25 = 1;
    }
    if ((v25 & 1) == 0)
    {
      if (*(uint64_t *)(a1 + 152) < 1) {
        goto LABEL_3;
      }
      if (FigGetUpTimeNanoseconds() <= *(void *)(a1 + 152)) {
        goto LABEL_3;
      }
      if (!*(unsigned char *)(a1 + 49)) {
        goto LABEL_3;
      }
      CFTypeRef v26 = fampb_copyLowerSwitchCandidate((uint64_t *)a1, *(void *)(a1 + 8), 0);
      if (!v26) {
        goto LABEL_3;
      }
      double v27 = v26;
      *(_OWORD *)&v36.CFArrayRef value = v32;
      v36.CMTimeEpoch epoch = v7;
      uint64_t v28 = *(void *)(a1 + 8);
      CMTime v35 = v33;
      float v29 = fampb_concurrentSwitchDownSafetyFactor(a1, (uint64_t)v26, v28, &v35, a3, a2, 0, &v36);
      int v22 = v29 <= 1.0;
      if (v29 > 1.0)
      {
        CMTime v34 = v36;
        fampb_nextTimeToCheckConcurrentSwitchDown(&v34, &v35, v29, 1.0);
        *a5 = v35;
      }
      CFRelease(v27);
    }
    if (v22) {
      goto LABEL_32;
    }
LABEL_3:
    int canSwitchDownConcurrentlyWithoutStall = 1;
    return canSwitchDownConcurrentlyWithoutStall ^ 1u;
  }
LABEL_32:
  if (*(void *)(a1 + 16))
  {
    if (fampb_trialSwitchDownInProgress(a1))
    {
      int canSwitchDownConcurrentlyWithoutStall = *(unsigned char *)(a1 + 49) == 0;
    }
    else
    {
      uint64_t v30 = *(void *)(a1 + 16);
      CMTime v36 = *(CMTime *)a4;
      int canSwitchDownConcurrentlyWithoutStall = fampb_canSwitchDownConcurrentlyWithoutStall(a1, &v36, a3, a2, v30, a5, 0.25);
      if (canSwitchDownConcurrentlyWithoutStall) {
        int canSwitchDownConcurrentlyWithoutStall = (int)FigAlternateGetPeakBitRate(*(void *)(a1 + 16)) < a2;
      }
    }
  }
  else if (*(unsigned char *)(a1 + 49))
  {
    int canSwitchDownConcurrentlyWithoutStall = 0;
  }
  else
  {
    uint64_t v31 = *(void *)(a1 + 8);
    CMTime v36 = *(CMTime *)a4;
    int canSwitchDownConcurrentlyWithoutStall = fampb_canSwitchDownConcurrentlyWithoutStall(a1, &v36, a3, a2, v31, a5, 0.75);
  }
  return canSwitchDownConcurrentlyWithoutStall ^ 1u;
}

BOOL fampb_ConcurrentSwitchUpValidForLongEnough(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 160);
  if ((v2 < 1
     || ((double v3 = *(double *)(a1 + 176), v3 <= 2.22507386e-308)
       ? (UpTimeNanoseconds = FigGetUpTimeNanoseconds(), uint64_t v2 = *(void *)(a1 + 160))
       : (uint64_t UpTimeNanoseconds = (uint64_t)((*(double *)(a1 + 168) - v3) * 1000000000.0)),
         UpTimeNanoseconds - v2 < (uint64_t)(*(double *)(a1 + 144) * 0.95 * 1000000000.0)))
    && *(unsigned char *)(a1 + 49))
  {
    return *(unsigned char *)(a1 + 52) != 0;
  }
  else
  {
    return 1;
  }
}

uint64_t fampb_canSwitchDownConcurrentlyWithoutStall(uint64_t a1, CMTime *a2, uint64_t a3, uint64_t a4, uint64_t a5, CMTime *a6, float a7)
{
  int v14 = *(unsigned __int8 *)(a1 + 49);
  CFTypeRef v15 = fampb_copyLowerSwitchCandidate((uint64_t *)a1, a5, *(unsigned char *)(a1 + 49) == 0);
  if (v15)
  {
    uint64_t v16 = v15;
    CMTime v29 = *a2;
    uint64_t v28 = a6;
    int canSwitchDownConcurrentlyToAlternateWithoutStall = fampb_canSwitchDownConcurrentlyToAlternateWithoutStall((uint64_t)v15, a1, &v29, a3, a4, a5, a6, a7);
    unsigned __int8 v18 = canSwitchDownConcurrentlyToAlternateWithoutStall;
    if (v14) {
      BOOL v19 = canSwitchDownConcurrentlyToAlternateWithoutStall == 0;
    }
    else {
      BOOL v19 = 0;
    }
    char v20 = !v19;
    if (v19)
    {
      while (1)
      {
        CFTypeRef v22 = fampb_copyLowerSwitchCandidate((uint64_t *)a1, (uint64_t)v16, 0);
        int v21 = v22;
        if (!v22) {
          break;
        }
        CFRetain(v22);
        CFRelease(v16);
        CFRelease(v21);
        CMTime v29 = *a2;
        int v23 = fampb_canSwitchDownConcurrentlyToAlternateWithoutStall((uint64_t)v21, a1, &v29, a3, a4, a5, v28, a7);
        unsigned __int8 v18 = v23;
        if (v14) {
          BOOL v24 = v23 == 0;
        }
        else {
          BOOL v24 = 0;
        }
        char v20 = !v24;
        uint64_t v16 = v21;
        if (!v24) {
          goto LABEL_22;
        }
      }
      CFRelease(v16);
    }
    else
    {
      int v21 = v16;
    }
LABEL_22:
    char v25 = v20 ^ 1;
    a6 = v28;
    if (v28) {
      goto LABEL_23;
    }
  }
  else
  {
    int v21 = 0;
    char v25 = 1;
    unsigned __int8 v18 = 1;
    if (a6)
    {
LABEL_23:
      uint64_t v26 = MEMORY[0x1E4F1F9F8];
      *(_OWORD *)&a6->CFArrayRef value = *MEMORY[0x1E4F1F9F8];
      a6->CMTimeEpoch epoch = *(void *)(v26 + 16);
    }
  }
  if ((v25 & 1) == 0) {
    CFRelease(v21);
  }
  return v18;
}

uint64_t fampb_getRequiredBWForLowLatencyAlternate(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 48)) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 49))
  {
    CFTypeRef v3 = fampb_copyLowerSwitchCandidate((uint64_t *)a1, a2, 0);
    if (v3)
    {
      uint64_t v4 = v3;
      int ExpectedAverageBitrate = FigAlternateGetExpectedAverageBitrate(a2);
      uint64_t v6 = FigAlternateGetPeakBitRate((uint64_t)v4) + ExpectedAverageBitrate;
      CFRelease(v4);
      return v6;
    }
    return 0;
  }

  return FigAlternateGetExpectedAverageBitrate(a2);
}

float fampb_proportionOfFullBufferForConcurrentSwitching(uint64_t a1, CMTime *a2)
{
  CMTime v7 = *a2;
  double Seconds = CMTimeGetSeconds(&v7);
  double v4 = *(double *)(a1 + 144);
  if (v4 <= 0.0)
  {
    CMTime v7 = *(CMTime *)(a1 + 68);
    double v5 = CMTimeGetSeconds(&v7);
  }
  else
  {
    double v5 = v4 + v4;
  }
  return Seconds / v5;
}

float fampb_concurrentSwitchDownSafetyFactor(uint64_t a1, uint64_t a2, uint64_t a3, CMTime *a4, uint64_t a5, uint64_t a6, CMTime *a7, CMTime *a8)
{
  CMTime lhs = *a4;
  *(_OWORD *)&v25.CFArrayRef value = kStallThreshold;
  v25.CMTimeEpoch epoch = 0;
  CMTimeSubtract(&time, &lhs, &v25);
  double Seconds = CMTimeGetSeconds(&time);
  CMTime v25 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  double v16 = *(double *)(a1 + 144);
  if (v16 <= 0.0)
  {
    CMTime lhs = *(CMTime *)(a1 + 68);
    double v16 = CMTimeGetSeconds(&lhs) * 0.5;
  }
  double v17 = *(double *)(a1 + 136);
  float v18 = 0.0;
  double v19 = NAN;
  if (v17 > 0.0 && a3 != a2 && a3 && a6)
  {
    double v20 = v16 + v17;
    int PeakBitRate = FigAlternateGetPeakBitRate(a2);
    uint64_t v22 = *(void *)(a1 + 96);
    if (v22 <= 0) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = 8 * v22;
    }
    double v19 = (double)a5 / 1000000000.0
        + (double)a5 / 1000000000.0
        + (double)(v23 + (uint64_t)(v20 * (double)PeakBitRate)) / (double)a6;
    CMTimeMakeWithSeconds(&v25, fmax(v16 + Seconds - v19, 0.0), 1000000);
    CMTime lhs = v25;
    float v18 = fampb_proportionOfFullBufferForConcurrentSwitching(a1, &lhs);
  }
  if (a7)
  {
    CMTimeMakeWithSeconds(&lhs, v19, 1000000);
    *a7 = lhs;
  }
  if (a8) {
    *a8 = v25;
  }
  return v18;
}

CMTime *fampb_nextTimeToCheckConcurrentSwitchDown@<X0>(CMTime *a1@<X0>, CMTime *a2@<X8>, float a3@<S0>, float a4@<S1>)
{
  CMTime time = *a1;
  Float64 Seconds = CMTimeGetSeconds(&time);
  CMTimeMakeWithSeconds(&rhs, Seconds / a3 * a4, 90000);
  CMTime time = *a1;
  return CMTimeSubtract(a2, &time, &rhs);
}

uint64_t fampb_copyFilterForCurrentState(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    double v4 = DerivedStorage;
    MEMORY[0x19970E290](*DerivedStorage);
    CFTypeRef v5 = (CFTypeRef)v4[7];
    if (v5) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *a2 = v5;
    MEMORY[0x19970E2B0](*v4);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

__n128 fampb_primeTimeTillDryTimer(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  uint64_t v6 = (__n128 *)MEMORY[0x1E4F1F9F8];
  if (!*(void *)(DerivedStorage + 264))
  {
    CMTime v7 = fampb_timerDispatchSourceCreate(*(dispatch_queue_t *)(DerivedStorage + 24), a1, (void (__cdecl *)(void *))fampb_switchLowTimerProcUnlocked);
    *(void *)(v5 + 264) = v7;
    if (v7) {
      CMTimebaseAddTimerDispatchSource(*(CMTimebaseRef *)(v5 + 328), v7);
    }
    __n128 v8 = *v6;
    *(__n128 *)(v5 + 272) = *v6;
    unint64_t v9 = v6[1].n128_u64[0];
    *(void *)(v5 + 288) = v9;
    *(__n128 *)(v5 + 296) = v8;
    *(void *)(v5 + 312) = v9;
  }
  CFIndex v10 = (_OWORD *)(v5 + 272);
  if ((*(unsigned char *)(v5 + 284) & 1) == 0
    || (CMTime lhs = *a2,
        *(_OWORD *)&rhs.CFArrayRef value = xmmword_194998070,
        rhs.CMTimeEpoch epoch = 0,
        CMTimeAdd(&time1, &lhs, &rhs),
        *(_OWORD *)&lhs.CFArrayRef value = *v10,
        lhs.CMTimeEpoch epoch = *(void *)(v5 + 288),
        CMTimeCompare(&time1, &lhs) < 0))
  {
    uint64_t v13 = *(OpaqueCMTimebase **)(v5 + 328);
    int v14 = *(NSObject **)(v5 + 264);
    CMTime lhs = *a2;
    CMTimebaseSetTimerDispatchSourceNextFireTime(v13, v14, &lhs, 1u);
    long long v15 = *(_OWORD *)&a2->value;
    *(void *)(v5 + 288) = a2->epoch;
    *CFIndex v10 = v15;
    __n128 result = *v6;
    *(__n128 *)(v5 + 296) = *v6;
    *(void *)(v5 + 312) = v6[1].n128_u64[0];
  }
  else
  {
    *(_OWORD *)&lhs.CFArrayRef value = *v10;
    lhs.CMTimeEpoch epoch = *(void *)(v5 + 288);
    *(_OWORD *)&rhs.CFArrayRef value = xmmword_194998070;
    rhs.CMTimeEpoch epoch = 0;
    CMTimeAdd(&time2, &lhs, &rhs);
    CMTime lhs = *a2;
    if (CMTimeCompare(&lhs, &time2) >= 1)
    {
      uint64_t v12 = (__n128 *)(v5 + 296);
      if ((*(unsigned char *)(v5 + 308) & 1) == 0
        || (lhs = *a2, *(__n128 *)&rhs.CFArrayRef value = *v12, rhs.epoch = *(void *)(v5 + 312), CMTimeCompare(&lhs, &rhs) >= 1))
      {
        __n128 result = *(__n128 *)&a2->value;
        *(void *)(v5 + 312) = a2->epoch;
        __n128 *v12 = result;
      }
    }
  }
  return result;
}

void fampb_switchLowTimerProcUnlocked()
{
  uint64_t v0 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (v0)
  {
    BOOL v1 = (const void *)v0;
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    uint64_t MainSegmentBytesInTransitUnlocked = fampb_getMainSegmentBytesInTransitUnlocked();
    MEMORY[0x19970E290](*DerivedStorage);
    DerivedStorage[22] = MainSegmentBytesInTransitUnlocked;
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    uint64_t v5 = v4;
    if ((*(unsigned char *)(v4 + 308) & 1) == 0) {
      goto LABEL_20;
    }
    memset(&v19, 0, sizeof(v19));
    if (*(unsigned char *)(v4 + 396)) {
      CMTime v19 = *(CMTime *)(v4 + 384);
    }
    else {
      CMTimebaseGetTimeClampedAboveAnchorTime();
    }
    uint64_t v6 = (_OWORD *)(v5 + 296);
    float v7 = *(float *)(v5 + 196);
    if (v7 >= 0.0)
    {
      CMTime lhs = v19;
      *(_OWORD *)&rhs.CFArrayRef value = xmmword_194998070;
      rhs.CMTimeEpoch epoch = 0;
      CMTimeAdd(&time2, &lhs, &rhs);
      *(_OWORD *)&lhs.CFArrayRef value = *v6;
      lhs.CMTimeEpoch epoch = *(void *)(v5 + 312);
      if (CMTimeCompare(&lhs, &time2) >= 1)
      {
        __n128 v8 = *(OpaqueCMTimebase **)(v5 + 328);
        unint64_t v9 = *(NSObject **)(v5 + 264);
        *(_OWORD *)&lhs.CFArrayRef value = *v6;
        lhs.CMTimeEpoch epoch = *(void *)(v5 + 312);
        CMTimebaseSetTimerDispatchSourceNextFireTime(v8, v9, &lhs, 1u);
        if (*(unsigned char *)(v5 + 396)) {
          CMTime v17 = *(CMTime *)(v5 + 384);
        }
        else {
          CMTimebaseGetTimeClampedAboveAnchorTime();
        }
        *(_OWORD *)&lhs.CFArrayRef value = *v6;
        lhs.CMTimeEpoch epoch = *(void *)(v5 + 312);
        if (CMTimeCompare(&lhs, &v17) > 0)
        {
LABEL_17:
          *(_OWORD *)(v5 + 272) = *v6;
          *(void *)(v5 + 288) = *(void *)(v5 + 312);
          uint64_t v12 = MEMORY[0x1E4F1F9F8];
          _OWORD *v6 = *MEMORY[0x1E4F1F9F8];
          *(void *)(v5 + 312) = *(void *)(v12 + 16);
LABEL_26:
          MEMORY[0x19970E2B0](*DerivedStorage);
          CFRelease(v1);
          return;
        }
LABEL_20:
        uint64_t v13 = MEMORY[0x1E4F1F9F8];
        *(_OWORD *)(v5 + 272) = *MEMORY[0x1E4F1F9F8];
        *(void *)(v5 + 288) = *(void *)(v13 + 16);
        if (DerivedStorage[11])
        {
          if (*((unsigned char *)DerivedStorage + 396)) {
            long long v14 = *((_OWORD *)DerivedStorage + 24);
          }
          else {
            CMTimebaseGetTimeClampedAboveAnchorTime();
          }
          if (BYTE12(v14)) {
            fampb_attemptToSwitch(v1, 0, 0);
          }
        }
        goto LABEL_26;
      }
      float v7 = *(float *)(v5 + 196);
    }
    if (v7 < 0.0)
    {
      CMTime lhs = v19;
      *(_OWORD *)&rhs.CFArrayRef value = xmmword_194998070;
      rhs.CMTimeEpoch epoch = 0;
      CMTimeSubtract(&v16, &lhs, &rhs);
      *(_OWORD *)&lhs.CFArrayRef value = *v6;
      lhs.CMTimeEpoch epoch = *(void *)(v5 + 312);
      if (CMTimeCompare(&lhs, &v16) < 0)
      {
        CFIndex v10 = *(OpaqueCMTimebase **)(v5 + 328);
        CFIndex v11 = *(NSObject **)(v5 + 264);
        *(_OWORD *)&lhs.CFArrayRef value = *v6;
        lhs.CMTimeEpoch epoch = *(void *)(v5 + 312);
        CMTimebaseSetTimerDispatchSourceNextFireTime(v10, v11, &lhs, 1u);
        if (*(unsigned char *)(v5 + 396)) {
          CMTime v15 = *(CMTime *)(v5 + 384);
        }
        else {
          CMTimebaseGetTimeClampedAboveAnchorTime();
        }
        *(_OWORD *)&lhs.CFArrayRef value = *v6;
        lhs.CMTimeEpoch epoch = *(void *)(v5 + 312);
        if (CMTimeCompare(&lhs, &v15) < 0) {
          goto LABEL_17;
        }
      }
    }
    goto LABEL_20;
  }
}

uint64_t fampb_AlternateRankingScoreComparator(uint64_t a1, uint64_t a2)
{
  double RankingScore = FigAlternateGetRankingScore(a1);
  double v4 = FigAlternateGetRankingScore(a2);
  return (__PAIR128__(RankingScore > v4, *(unint64_t *)&RankingScore) - *(unint64_t *)&v4) >> 64;
}

unint64_t fampb_AlternatePeakBitrateComparator(uint64_t a1, uint64_t a2)
{
  int PeakBitRate = FigAlternateGetPeakBitRate(a1);
  int v4 = FigAlternateGetPeakBitRate(a2);
  return (PeakBitRate > v4) - (unint64_t)(PeakBitRate < v4);
}

uint64_t MTAudioProcessingTapXPCRemoteGetObjectID(uint64_t a1, void *a2)
{
  if (a1 && a2 && (_UNKNOWN *)CMBaseObjectGetVTable() == &aptapR_VTable)
  {
    *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MTAudioProcessingTapRemoteGetServerObjectToken(uint64_t a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t result = MTAudioProcessingTapXPCRemoteGetObjectID(a1, &v4);
  if (!result) {
    *a2 = v4;
  }
  return result;
}

OSStatus MTAudioProcessingTapCreate(CFAllocatorRef allocator, const MTAudioProcessingTapCallbacks *callbacks, MTAudioProcessingTapCreationFlags flags, MTAudioProcessingTapRef *tapOut)
{
  if (callbacks->version || !callbacks->process || (flags & 3) == 0 || (flags & 3) == 3)
  {
    OSStatus v7 = FigSignalErrorAt();
    goto LABEL_15;
  }
  MTAudioProcessingTapGetClassID();
  OSStatus v7 = CMDerivedObjectCreate();
  if (v7)
  {
LABEL_15:
    OSStatus v15 = v7;
    goto LABEL_13;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v10 = *(_OWORD *)((char *)&callbacks->init + 4);
  long long v9 = *(_OWORD *)((char *)&callbacks->prepare + 4);
  int process_high = HIDWORD(callbacks->process);
  *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)&callbacks->version;
  *(_OWORD *)(DerivedStorage + 48) = v10;
  *(_DWORD *)(DerivedStorage + 80) = process_high;
  *(_OWORD *)(DerivedStorage + 64) = v9;
  *(_DWORD *)(DerivedStorage + 112) = flags;
  *(unsigned char *)(DerivedStorage + 128) = 0;
  uint64_t v12 = *(void (**)(void, void, uint64_t))(DerivedStorage + 44);
  if (v12) {
    v12(0, *(void *)(DerivedStorage + 36), DerivedStorage + 120);
  }
  *(void *)(DerivedStorage + 16) = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 24) = 0;
  uint64_t v13 = aptapR_EnsureClientEstablished(*(_DWORD *)(DerivedStorage + 112));
  *(void *)(DerivedStorage + 136) = v13;
  if (!v13)
  {
    OSStatus v14 = FigSignalErrorAt();
LABEL_17:
    OSStatus v15 = v14;
    goto LABEL_13;
  }
  OSStatus v14 = FigXPCCreateBasicMessage();
  if (v14) {
    goto LABEL_17;
  }
  xpc_dictionary_set_uint64(0, "Flags", flags);
  OSStatus v14 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v14) {
    goto LABEL_17;
  }
  *(void *)(DerivedStorage + 8) = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  OSStatus v15 = FigXPCRemoteClientAssociateObject();
  if (!v15) {
    *tapOut = 0;
  }
LABEL_13:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v15;
}

uint64_t aptapR_EnsureClientEstablished(int a1)
{
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x6802000000;
  void v10[3] = __Block_byref_object_copy__8;
  v10[4] = __Block_byref_object_dispose__8;
  v10[5] = 1;
  v10[6] = aptapR_HandleDeadServerConnection;
  v10[7] = aptapR_ProcessNotification;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v13 = 0;
  if ((a1 & 0x1000000) != 0)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __aptapR_EnsureClientEstablished_block_invoke;
    block[3] = &unk_1E57A05A8;
    block[4] = v10;
    if (aptapR_EnsureClientEstablished_gAudioProcessingTapRemoteClientForAirplaydSetupOnce == -1) {
      goto LABEL_5;
    }
    uint64_t v6 = &aptapR_EnsureClientEstablished_gAudioProcessingTapRemoteClientForAirplaydSetupOnce;
    OSStatus v7 = block;
    goto LABEL_13;
  }
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 0x40000000;
  v8[2] = __aptapR_EnsureClientEstablished_block_invoke_2;
  v8[3] = &unk_1E57A05D0;
  v8[4] = v10;
  if (aptapR_EnsureClientEstablished_gAudioProcessingTapRemoteClientForMediaplaybackdSetupOnce != -1)
  {
    uint64_t v6 = &aptapR_EnsureClientEstablished_gAudioProcessingTapRemoteClientForMediaplaybackdSetupOnce;
    OSStatus v7 = v8;
LABEL_13:
    dispatch_once(v6, v7);
  }
LABEL_5:
  uint64_t v2 = (uint64_t *)&gAudioProcessingTapRemoteClientForAirplayd;
  if ((a1 & 0x1000000) == 0) {
    uint64_t v2 = (uint64_t *)&gAudioProcessingTapRemoteClientForMediaplaybackd;
  }
  uint64_t v3 = *v2;
  if (aptapR_EnsureClientEstablished_err) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  _Block_object_dispose(v10, 8);
  return v4;
}

void *__cdecl MTAudioProcessingTapGetStorage(MTAudioProcessingTapRef tap)
{
  return *(void **)(CMBaseObjectGetDerivedStorage() + 120);
}

OSStatus MTAudioProcessingTapGetSourceAudio(MTAudioProcessingTapRef tap, CMItemCount numberFrames, AudioBufferList *bufferListInOut, MTAudioProcessingTapFlags *flagsOut, CMTimeRange *timeRangeOut, CMItemCount *numberFramesOut)
{
  UInt32 v10 = numberFrames;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 128))
  {
    uint64_t v13 = DerivedStorage + 24;
    while (1)
    {
      uint64_t v13 = *(void *)v13;
      if (!v13) {
        break;
      }
      if (*(unsigned char *)(v13 + 81) == 1)
      {
        if (!*(void *)(v13 + 8)) {
          break;
        }
        return aptapR_GetSourceAudio((uint64_t)tap, v13, v10, bufferListInOut, flagsOut, timeRangeOut, numberFramesOut);
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t aptapR_GetSourceAudio(uint64_t a1, uint64_t a2, UInt32 a3, AudioBufferList *a4, AudioQueueProcessingTapFlags *a5, _OWORD *a6, void *a7)
{
  AudioQueueProcessingTapFlags outFlags = 0;
  UInt32 outNumberFrames = 0;
  if ((*(unsigned char *)(CMBaseObjectGetDerivedStorage() + 112) & 4) != 0) {
    return 4294954516;
  }
  uint64_t result = AudioQueueProcessingTapGetSourceAudio(*(AudioQueueProcessingTapRef *)(a2 + 8), a3, *(AudioTimeStamp **)(a2 + 88), &outFlags, &outNumberFrames, a4);
  if (!result)
  {
    if (a5) {
      *a5 = outFlags;
    }
    if (a7) {
      *a7 = outNumberFrames;
    }
    if (a6)
    {
      aptapR_GetMediaTimeRange(a2, v15);
      uint64_t result = 0;
      long long v14 = v15[1];
      *a6 = v15[0];
      a6[1] = v14;
      a6[2] = v15[2];
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t MTAudioProcessingTapGetMediaTimeRange(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 128))
  {
    uint64_t v5 = DerivedStorage + 24;
    while (1)
    {
      uint64_t v5 = *(void *)v5;
      if (!v5) {
        break;
      }
      if (*(unsigned char *)(v5 + 81) == 1)
      {
        if (!*(void *)(v5 + 8)) {
          break;
        }
        aptapR_GetMediaTimeRange(v5, v8);
        long long v6 = v8[1];
        *a3 = v8[0];
        a3[1] = v6;
        a3[2] = v8[2];
        return 0;
      }
    }
  }

  return FigSignalErrorAt();
}

double aptapR_GetMediaTimeRange@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1FA20];
  long long v5 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *a2 = *MEMORY[0x1E4F1FA20];
  a2[1] = v5;
  a2[2] = *(_OWORD *)(v4 + 32);
  if (!AudioQueueProcessingTapGetQueueTime_CM2()) {
    return MTAudioProcessingTapConvertQueueTimeToMediaTime(0, (int)(*(double *)(a1 + 40) + 0.5), 0, 0, (uint64_t)a2, 0.0, 0.0, 0.0);
  }
  return result;
}

uint64_t MTMultitrackAudioProcessingTapCreate(uint64_t a1, unint64_t *a2, unsigned int a3, void *a4)
{
  unint64_t v4 = *a2;
  if (*a2 >= 2) {
    goto LABEL_5;
  }
  if (v4 == 1)
  {
    if (!a2[9])
    {
LABEL_5:
      uint64_t v8 = FigSignalErrorAt();
LABEL_6:
      uint64_t v9 = v8;
      goto LABEL_18;
    }
  }
  else if (v4 || !a2[6])
  {
    goto LABEL_5;
  }
  if ((a3 & 3) == 0 || (a3 & 3) == 3) {
    goto LABEL_5;
  }
  MTAudioProcessingTapGetClassID();
  uint64_t v8 = CMDerivedObjectCreate();
  if (v8) {
    goto LABEL_6;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v11 = *((_OWORD *)a2 + 4);
  long long v13 = *((_OWORD *)a2 + 1);
  long long v12 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(DerivedStorage + 80) = *((_OWORD *)a2 + 3);
  *(_OWORD *)(DerivedStorage + 96) = v11;
  *(_OWORD *)(DerivedStorage + 48) = v13;
  *(_OWORD *)(DerivedStorage + 64) = v12;
  *(_OWORD *)(DerivedStorage + 32) = *(_OWORD *)a2;
  *(_DWORD *)(DerivedStorage + 112) = a3;
  *(unsigned char *)(DerivedStorage + 128) = 1;
  long long v14 = *(void (**)(void, void, uint64_t))(DerivedStorage + 48);
  if (v14) {
    v14(0, *(void *)(DerivedStorage + 40), DerivedStorage + 120);
  }
  *(void *)(DerivedStorage + 16) = FigSimpleMutexCreate();
  *(void *)(DerivedStorage + 24) = 0;
  uint64_t v15 = aptapR_EnsureClientEstablished(*(_DWORD *)(DerivedStorage + 112));
  *(void *)(DerivedStorage + 136) = v15;
  if (!v15)
  {
    uint64_t v16 = FigSignalErrorAt();
LABEL_20:
    uint64_t v9 = v16;
    goto LABEL_18;
  }
  uint64_t v16 = FigXPCCreateBasicMessage();
  if (v16) {
    goto LABEL_20;
  }
  xpc_dictionary_set_uint64(0, "Flags", a3 | 0x100000000);
  uint64_t v16 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v16) {
    goto LABEL_20;
  }
  *(void *)(DerivedStorage + 8) = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t v9 = FigXPCRemoteClientAssociateObject();
  if (!v9) {
    *a4 = 0;
  }
LABEL_18:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t MTAudioProcessingTapGetTrackSourceAudio(uint64_t a1, int a2, UInt32 a3, AudioBufferList *a4, AudioQueueProcessingTapFlags *a5, _OWORD *a6, void *a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 128)) {
    goto LABEL_7;
  }
  if (*(void *)(DerivedStorage + 32)) {
    goto LABEL_7;
  }
  uint64_t v15 = *(void *)(DerivedStorage + 24);
  if (!v15) {
    goto LABEL_7;
  }
  while (!*(unsigned char *)(v15 + 81) || *(_DWORD *)(v15 + 24) != a2)
  {
    uint64_t v15 = *(void *)v15;
    if (!v15) {
      goto LABEL_7;
    }
  }
  if (*(void *)(v15 + 8))
  {
    return aptapR_GetSourceAudio(a1, v15, a3, a4, a5, a6, a7);
  }
  else
  {
LABEL_7:
    return FigSignalErrorAt();
  }
}

uint64_t MTAudioProcessingTapGetStreamSourceAudio(uint64_t a1, int a2, UInt32 a3, AudioBufferList *a4, AudioQueueProcessingTapFlags *a5, _OWORD *a6, void *a7)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 128)) {
    goto LABEL_7;
  }
  if (*(void *)(DerivedStorage + 32) != 1) {
    goto LABEL_7;
  }
  uint64_t v15 = *(void *)(DerivedStorage + 24);
  if (!v15) {
    goto LABEL_7;
  }
  while (!*(unsigned char *)(v15 + 81) || *(_DWORD *)(v15 + 28) != a2)
  {
    uint64_t v15 = *(void *)v15;
    if (!v15) {
      goto LABEL_7;
    }
  }
  if (*(void *)(v15 + 8))
  {
    return aptapR_GetSourceAudio(a1, v15, a3, a4, a5, a6, a7);
  }
  else
  {
LABEL_7:
    return FigSignalErrorAt();
  }
}

uint64_t MTAudioProcessingTapGetTrackMediaTimeRange(uint64_t a1, int a2, uint64_t a3, _OWORD *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 128)) {
    goto LABEL_7;
  }
  if (*(void *)(DerivedStorage + 32)) {
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(DerivedStorage + 24);
  if (!v7) {
    goto LABEL_7;
  }
  while (!*(unsigned char *)(v7 + 81) || *(_DWORD *)(v7 + 24) != a2)
  {
    uint64_t v7 = *(void *)v7;
    if (!v7) {
      goto LABEL_7;
    }
  }
  if (*(void *)(v7 + 8))
  {
    aptapR_GetMediaTimeRange(v7, v10);
    long long v9 = v10[1];
    *a4 = v10[0];
    a4[1] = v9;
    a4[2] = v10[2];
    return 0;
  }
  else
  {
LABEL_7:
    return FigSignalErrorAt();
  }
}

uint64_t MTAudioProcessingTapGetStreamMediaTimeRange(uint64_t a1, int a2, uint64_t a3, _OWORD *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)(DerivedStorage + 128)) {
    goto LABEL_7;
  }
  if (*(void *)(DerivedStorage + 32) != 1) {
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(DerivedStorage + 24);
  if (!v7) {
    goto LABEL_7;
  }
  while (!*(unsigned char *)(v7 + 81) || *(_DWORD *)(v7 + 28) != a2)
  {
    uint64_t v7 = *(void *)v7;
    if (!v7) {
      goto LABEL_7;
    }
  }
  if (*(void *)(v7 + 8))
  {
    aptapR_GetMediaTimeRange(v7, v10);
    long long v9 = v10[1];
    *a4 = v10[0];
    a4[1] = v9;
    a4[2] = v10[2];
    return 0;
  }
  else
  {
LABEL_7:
    return FigSignalErrorAt();
  }
}

uint64_t aptapR_BaseClass_Finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)uint64_t DerivedStorage = 1;
  FigXPCRemoteClientDisassociateObject();
  if (!*(unsigned char *)(DerivedStorage + 1)
    && (FigXPCCreateBasicMessage() || FigXPCRemoteClientSendSyncMessage()))
  {
    goto LABEL_17;
  }
  for (CFIndex i = *(void **)(DerivedStorage + 24); i; CFIndex i = (void *)*i)
    aptapR_UnprepareTapIfPrepared(a1, (uint64_t)i);
  if (*(unsigned char *)(DerivedStorage + 128))
  {
    unint64_t v4 = *(void (**)(uint64_t))(DerivedStorage + 56);
    if (!v4) {
      goto LABEL_14;
    }
    goto LABEL_10;
  }
  unint64_t v4 = *(void (**)(uint64_t))(DerivedStorage + 52);
  if (v4) {
LABEL_10:
  }
    v4(a1);
LABEL_14:
  while (1)
  {
    long long v6 = *(void **)(DerivedStorage + 24);
    if (!v6) {
      break;
    }
    long long v5 = (OpaqueAudioQueueProcessingTap *)v6[1];
    *(void *)(DerivedStorage + 24) = *v6;
    if (v5) {
      AudioQueueProcessingTapDispose(v5);
    }
    free(v6);
  }
  if (*(void *)(DerivedStorage + 16)) {
    FigSimpleMutexDestroy();
  }
LABEL_17:
  FigXPCRelease();
  return FigXPCRemoteClientKillServerOnTimeout();
}

__CFString *aptapR_BaseClass_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (*(unsigned char *)(DerivedStorage + 128))
  {
    uint64_t v4 = *(void *)(DerivedStorage + 32);
    uint64_t v5 = *(void *)(DerivedStorage + 8);
    CFIndex v6 = CFGetRetainCount(a1);
    if (v4 == 1)
    {
      uint64_t v16 = *(void *)(DerivedStorage + 104);
      uint64_t v17 = *(unsigned int *)(DerivedStorage + 112);
      long long v15 = *(_OWORD *)(DerivedStorage + 88);
      uint64_t v13 = *(void *)(DerivedStorage + 72);
      uint64_t v14 = *(void *)(DerivedStorage + 80);
      uint64_t v11 = *(void *)(DerivedStorage + 56);
      uint64_t v12 = *(void *)(DerivedStorage + 64);
      CFStringRef v7 = @"<MTMultitrackAudioProcessingTap(XPC) V1 %p> ObjectID %lld Retain count %d Created with i/f/p/u/t/p2/u2/t2 callbacks = {%p/%p/%p/%p/%p/%p/%p/%p} flags = 0x%x";
    }
    else
    {
      uint64_t v14 = *(void *)(DerivedStorage + 80);
      *(void *)&long long v15 = *(unsigned int *)(DerivedStorage + 112);
      uint64_t v12 = *(void *)(DerivedStorage + 64);
      uint64_t v13 = *(void *)(DerivedStorage + 72);
      uint64_t v11 = *(void *)(DerivedStorage + 56);
      CFStringRef v7 = @"<MTMultitrackAudioProcessingTap(XPC) V0 %p> ObjectID %lld Retain count %d Created with i/f/p/u/t callbacks = {%p/%p/%p/%p/%p} flags = 0x%x";
    }
    CFStringAppendFormat(Mutable, 0, v7, a1, v5, v6, *(void *)(DerivedStorage + 48), v11, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    uint64_t v8 = *(void *)(DerivedStorage + 8);
    CFIndex v9 = CFGetRetainCount(a1);
    CFStringAppendFormat(Mutable, 0, @"<MTAudioProcessingTapRemote(XPC) %p> ObjectID %lld Retain count %d Created with i/f/p/u/t callbacks = {%p/%p/%p/%p/%p} CMTimeFlags flags = 0x%x", a1, v8, v9, *(void *)(DerivedStorage + 44), *(void *)(DerivedStorage + 52), *(void *)(DerivedStorage + 60), *(void *)(DerivedStorage + 68), *(void *)(DerivedStorage + 76), *(unsigned int *)(DerivedStorage + 112));
  }
  return Mutable;
}

uint64_t aptapR_UnprepareTapIfPrepared(uint64_t a1, uint64_t a2)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(a2 + 80))
  {
    if (!*(unsigned char *)(result + 128))
    {
      uint64_t v8 = *(uint64_t (**)(uint64_t))(result + 68);
      if (v8) {
        uint64_t result = v8(a1);
      }
      goto LABEL_12;
    }
    uint64_t v5 = *(void *)(result + 32);
    if (v5)
    {
      if (v5 != 1) {
        goto LABEL_12;
      }
      CFIndex v6 = *(uint64_t (**)(uint64_t, uint64_t))(result + 96);
      if (!v6) {
        goto LABEL_12;
      }
      uint64_t v7 = *(unsigned int *)(a2 + 28);
    }
    else
    {
      CFIndex v6 = *(uint64_t (**)(uint64_t, uint64_t))(result + 72);
      if (!v6)
      {
LABEL_12:
        *(unsigned char *)(a2 + 80) = 0;
        return result;
      }
      uint64_t v7 = *(unsigned int *)(a2 + 24);
    }
    uint64_t result = v6(a1, v7);
    goto LABEL_12;
  }
  return result;
}

uint64_t aptapR_Class_CreateAQTap()
{
  return 4294954516;
}

uint64_t aptapR_Class_SetTimelineInfo()
{
  return 4294954516;
}

uint64_t aptapR_Class_IsMultitrackTap()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 128);
}

void *__Block_byref_object_copy__8(uint64_t a1, uint64_t a2)
{
  return __move_constructor_8_8_t0w8_pa0_17755_8_pa0_43205_16_pa0_2991_24_pa0_32134_32_pa0_55249_40_pa0_13544_48_pa0_52014_56((void *)(a1 + 40), (void *)(a2 + 40));
}

void *__move_constructor_8_8_t0w8_pa0_17755_8_pa0_43205_16_pa0_2991_24_pa0_32134_32_pa0_55249_40_pa0_13544_48_pa0_52014_56(void *result, void *a2)
{
  *uint64_t result = *a2;
  result[1] = a2[1];
  result[2] = a2[2];
  result[3] = a2[3];
  result[4] = a2[4];
  result[5] = a2[5];
  result[6] = a2[6];
  result[7] = a2[7];
  return result;
}

void aptapR_HandleDeadServerConnection(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(DerivedStorage + 1) = 1;
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  for (CFIndex i = *(void **)(DerivedStorage + 24); i; CFIndex i = (void *)*i)
  {
    if (i[1])
    {
      aptapR_UnprepareTapIfPrepared((uint64_t)a1, (uint64_t)i);
      i[1] = 0;
      if (a1) {
        CFRelease(a1);
      }
    }
  }

  JUMPOUT(0x19970E930);
}

uint64_t aptapR_ProcessNotification(const void *a1, const void *a2, uint64_t a3, const __CFDictionary *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (!a4) {
    return 1;
  }
  CFNumberRef PointerFromCFDictionary = MTAudioProcessingTapGetPointerFromCFDictionary(@"AQTapServerPointer", a4);
  if (CFEqual(a2, @"MTAudioProcessingTapServerToRemote_InitializeTap"))
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    CFIndex v9 = (void *)(CMBaseObjectGetDerivedStorage() + 24);
    while (1)
    {
      CFIndex v9 = (void *)*v9;
      if (!v9) {
        return 1;
      }
      if ((const __CFNumber *)v9[2] == PointerFromCFDictionary)
      {
        uint64_t v10 = v9[1];
        if (v10)
        {
          uint64_t v11 = (void *)(DerivedStorage + 24);
          while (1)
          {
            uint64_t v11 = (void *)*v11;
            if (!v11) {
              break;
            }
            if (v11[1] == v10)
            {
              if (!aptapR_PrepareTapIfNeeded((uint64_t)a1, (uint64_t)v11)) {
                return 1;
              }
              if (!FigXPCCreateBasicMessage())
              {
                xpc_dictionary_set_uint64(0, "AQTapServerToken", (uint64_t)PointerFromCFDictionary);
                FigXPCRemoteClientSendSyncMessage();
              }
              goto LABEL_38;
            }
          }
        }
        return 1;
      }
    }
  }
  if (CFEqual(a2, @"MTAudioProcessingTapServerToRemote_CreateAQTap"))
  {
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetInt32IfPresent();
    uint64_t v12 = CMBaseObjectGetDerivedStorage();
    if (AudioQueueProcessingTapNew_CMClient())
    {
LABEL_38:
      FigXPCRelease();
      FigXPCRemoteClientKillServerOnTimeout();
      return 1;
    }
    MEMORY[0x19970E910](*(void *)(v12 + 16));
    uint64_t v13 = (void *)(v12 + 24);
    uint64_t v14 = (void *)(v12 + 24);
    while (1)
    {
      uint64_t v14 = (void *)*v14;
      if (!v14) {
        break;
      }
      if (FigAtomicCompareAndSwapPtr())
      {
        long long v15 = v14;
        goto LABEL_33;
      }
    }
    double v20 = malloc_type_calloc(1uLL, 0x60uLL, 0x1020040E6162833uLL);
    if (!v20)
    {
      MEMORY[0x19970E930](*(void *)(v12 + 16));
      goto LABEL_38;
    }
    long long v15 = v20;
    v20[1] = 0;
LABEL_33:
    v15[2] = PointerFromCFDictionary;
    *((_DWORD *)v15 + 6) = 0;
    *((_DWORD *)v15 + 7) = 0;
    *((_DWORD *)v15 + 8) = 0;
    *(_OWORD *)(v15 + 5) = 0u;
    *(_OWORD *)(v15 + 7) = 0u;
    v15[9] = 0;
    *((_WORD *)v15 + 40) = 0;
    if (v14)
    {
      FigMemoryBarrier();
      if (!a1) {
        goto LABEL_36;
      }
    }
    else
    {
      *long long v15 = *v13;
      FigMemoryBarrier();
      *uint64_t v13 = v15;
      if (!a1)
      {
LABEL_36:
        MEMORY[0x19970E930](*(void *)(v12 + 16));
        if (!FigXPCCreateBasicMessage())
        {
          xpc_dictionary_set_uint64(0, "AQTapServerToken", (uint64_t)PointerFromCFDictionary);
          FigXPCRemoteClientSendSyncMessage();
        }
        goto LABEL_38;
      }
    }
    CFRetain(a1);
    goto LABEL_36;
  }
  if (CFEqual(a2, @"MTAudioProcessingTapServerToRemote_DisposeAQTap"))
  {
    uint64_t v16 = CMBaseObjectGetDerivedStorage();
    uint64_t v17 = (void *)(CMBaseObjectGetDerivedStorage() + 24);
    while (1)
    {
      uint64_t v17 = (void *)*v17;
      if (!v17) {
        break;
      }
      if ((const __CFNumber *)v17[2] == PointerFromCFDictionary)
      {
        float v18 = (OpaqueAudioQueueProcessingTap *)v17[1];
        if (v18)
        {
          MEMORY[0x19970E910](*(void *)(v16 + 16));
          CMTime v19 = (void *)(v16 + 24);
          while (1)
          {
            CMTime v19 = (void *)*v19;
            if (!v19) {
              break;
            }
            if (FigAtomicCompareAndSwapPtr())
            {
              aptapR_UnprepareTapIfPrepared((uint64_t)a1, (uint64_t)v19);
              AudioQueueProcessingTapDispose(v18);
              if (a1) {
                CFRelease(a1);
              }
              break;
            }
          }
          MEMORY[0x19970E930](*(void *)(v16 + 16));
        }
        return 1;
      }
    }
  }
  return 1;
}

uint64_t aptapR_PrepareTapIfNeeded(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = DerivedStorage;
  if (!*(unsigned char *)(DerivedStorage + 128))
  {
    if (*(void *)(DerivedStorage + 60)) {
      goto LABEL_9;
    }
    return 1;
  }
  uint64_t v6 = *(void *)(DerivedStorage + 32);
  if (!v6)
  {
    if (*(void *)(DerivedStorage + 64)) {
      goto LABEL_9;
    }
    return 1;
  }
  if (v6 == 1 && !*(void *)(DerivedStorage + 88)) {
    return 1;
  }
LABEL_9:
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = CMBaseObjectGetDerivedStorage() + 24;
  do
  {
    uint64_t v8 = *(void *)v8;
    if (!v8) {
      return 0;
    }
  }
  while (*(void *)(v8 + 8) != v7);
  uint64_t v9 = *(unsigned int *)(v8 + 32);
  long long v10 = *(_OWORD *)(v8 + 56);
  long long v13 = *(_OWORD *)(v8 + 40);
  long long v14 = v10;
  uint64_t v15 = *(void *)(v8 + 72);
  if (*(unsigned char *)(a2 + 80) && *(_DWORD *)(a2 + 32) == v9 && !memcmp((const void *)(a2 + 40), &v13, 0x28uLL)) {
    return 1;
  }
  *(_DWORD *)(a2 + 32) = v9;
  long long v11 = v14;
  *(_OWORD *)(a2 + 40) = v13;
  *(_OWORD *)(a2 + 56) = v11;
  *(void *)(a2 + 72) = v15;
  aptapR_UnprepareTapIfPrepared(a1, a2);
  if (*(unsigned char *)(v5 + 128))
  {
    if (*(void *)(v5 + 32) == 1) {
      (*(void (**)(uint64_t, void, uint64_t, long long *))(v5 + 88))(a1, *(unsigned int *)(a2 + 28), v9, &v13);
    }
    else {
      (*(void (**)(uint64_t, void, uint64_t, long long *))(v5 + 64))(a1, *(unsigned int *)(a2 + 24), v9, &v13);
    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, long long *))(v5 + 60))(a1, v9, &v13);
  }
  uint64_t result = 1;
  *(unsigned char *)(a2 + 80) = 1;
  return result;
}

uint64_t aptapR_AudioQueueProcessingTapCallback(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5, _DWORD *a6, uint64_t a7)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  uint64_t v15 = result;
  uint64_t v19 = 0;
  int v18 = 0;
  uint64_t v16 = result + 24;
  while (1)
  {
    uint64_t v16 = *(void *)v16;
    if (!v16) {
      break;
    }
    if (*(void *)(v16 + 8) == a2)
    {
      uint64_t result = aptapR_PrepareTapIfNeeded(a1, v16);
      if (result)
      {
        *(unsigned char *)(v16 + 81) = 1;
        *(void *)(v16 + 88) = a4;
        if (*(unsigned char *)(v15 + 128))
        {
          uint64_t v17 = *a5;
          if (*(void *)(v15 + 32) == 1) {
            uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t *, int *))(v15 + 104))(a1, *(unsigned int *)(v16 + 28), a3, v17, a7, &v19, &v18);
          }
          else {
            uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t *, int *))(v15 + 80))(a1, *(unsigned int *)(v16 + 24), a3, v17, a7, &v19, &v18);
          }
        }
        else
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t *, int *))(v15 + 76))(a1, a3, *a5, a7, &v19, &v18);
        }
        *a6 = v19;
        *a5 = v18;
        *(unsigned char *)(v16 + 81) = 0;
      }
      return result;
    }
  }
  return result;
}

uint64_t FigPathwayCloningApplyURIReplacement(const __CFURL *a1, int a2, const void *a3, uint64_t a4, CFTypeRef *a5)
{
  if (!a5) {
    goto LABEL_57;
  }
  uint64_t v5 = a5;
  CFURLRef v6 = a1;
  *a5 = 0;
  if (!a1) {
    return 0;
  }
  if (!a3) {
    goto LABEL_11;
  }
  if (!a2)
  {
    CFDictionaryRef URIReplacementPerVariantURIs = (const __CFDictionary *)FigPathwayCloneGetURIReplacementPerVariantURIs();
    if (URIReplacementPerVariantURIs) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t URIReplacementHost = FigPathwayCloneGetURIReplacementHost();
    if (!URIReplacementHost)
    {
      long long v10 = 0;
      goto LABEL_17;
    }
    CFTypeRef cf = 0;
    uint64_t v12 = FigCFHTTPCreateURLWithHostReplacement(v6, URIReplacementHost, (CFURLRef *)&cf);
    if (!v12)
    {
      long long v10 = cf;
      if (cf)
      {
        CFRetain(cf);
        if (cf) {
          CFRelease(cf);
        }
      }
LABEL_17:
      uint64_t URIReplacementParams = FigPathwayCloneGetURIReplacementParams();
      if (!URIReplacementParams) {
        goto LABEL_46;
      }
      CFDictionaryRef v14 = (const __CFDictionary *)URIReplacementParams;
      uint64_t v31 = v10;
      if (v10) {
        CFURLRef v15 = (const __CFURL *)v10;
      }
      else {
        CFURLRef v15 = v6;
      }
      CFURLRef v16 = (const __CFURL *)CFRetain(v15);
      int64_t Count = CFDictionaryGetCount(v14);
      if (Count < 1)
      {
        uint64_t v19 = 0;
        CFStringRef v24 = 0;
        CFMutableArrayRef Mutable = 0;
        uint64_t v29 = 0;
      }
      else
      {
        CFIndex v18 = Count;
        CFURLRef v33 = v6;
        uint64_t v19 = (const void **)malloc_type_calloc(Count, 8uLL, 0xC0040B8AA526DuLL);
        CFDictionaryGetKeysAndValues(v14, v19, 0);
        CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        if (Mutable)
        {
          long long v32 = v5;
          for (uint64_t i = 0; i != v18; ++i)
            CFArrayAppendValue(Mutable, v19[i]);
          v36.location = 0;
          v36.length = v18;
          CFArraySortValues(Mutable, v36, MEMORY[0x1E4F1C2A8], 0);
          CFIndex v23 = 0;
          CFStringRef v24 = 0;
          do
          {
            CFTypeRef cf = 0;
            CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(Mutable, v23);
            Boolean Value = CFDictionaryGetValue(v14, ValueAtIndex);
            if (v24) {
              CFRelease(v24);
            }
            CFStringRef v24 = CFStringCreateWithFormat(v20, 0, @"%@=", ValueAtIndex);
            if (!v24)
            {
              uint64_t v27 = FigSignalErrorAt();
LABEL_53:
              uint64_t v29 = v27;
              uint64_t v5 = v32;
              goto LABEL_54;
            }
            uint64_t v27 = FigCFHTTPCreateURLWithQueryParam(v16, v24, (uint64_t)Value, &cf);
            if (v27) {
              goto LABEL_53;
            }
            CFURLRef v28 = (const __CFURL *)cf;
            if (cf) {
              CFRetain(cf);
            }
            if (v16) {
              CFRelease(v16);
            }
            if (cf) {
              CFRelease(cf);
            }
            ++v23;
            CFURLRef v16 = v28;
          }
          while (v18 != v23);
          uint64_t v5 = v32;
          if (v28)
          {
            long long v10 = CFRetain(v28);
            free(v19);
            uint64_t v29 = 0;
            CFURLRef v6 = v33;
            goto LABEL_39;
          }
          free(v19);
          uint64_t v29 = 0;
          long long v10 = 0;
          CFURLRef v6 = v33;
LABEL_41:
          if (Mutable) {
            CFRelease(Mutable);
          }
          if (v24) {
            CFRelease(v24);
          }
          if (v29) {
            goto LABEL_49;
          }
LABEL_46:
          if (!v10)
          {
LABEL_48:
            uint64_t v29 = 0;
            CFTypeRef *v5 = CFRetain(v6);
LABEL_49:
            if (v10) {
              CFRelease(v10);
            }
            return v29;
          }
LABEL_47:
          CFURLRef v6 = (const __CFURL *)v10;
          goto LABEL_48;
        }
        uint64_t v29 = FigSignalErrorAt();
        CFStringRef v24 = 0;
LABEL_54:
        CFURLRef v6 = v33;
      }
      long long v10 = v31;
      free(v19);
      CFURLRef v28 = v16;
      if (v16) {
LABEL_39:
      }
        CFRelease(v28);
      goto LABEL_41;
    }
    return v12;
  }
  CFDictionaryRef URIReplacementPerVariantURIs = (const __CFDictionary *)FigPathwayCloneGetURIReplacementPerRenditionURIs();
  if (!URIReplacementPerVariantURIs) {
    goto LABEL_11;
  }
LABEL_8:
  CFStringRef v9 = (const __CFString *)CFDictionaryGetValue(URIReplacementPerVariantURIs, a3);
  if (!v9) {
    goto LABEL_11;
  }
  long long v10 = CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v9, 0);
  if (v10) {
    goto LABEL_47;
  }
LABEL_57:

  return FigSignalErrorAt();
}

uint64_t FigPathwayValidateStableVariantAndRenditionIDs(const __CFArray *a1)
{
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    CFIndex v3 = 0;
    uint64_t v4 = (const CFSetCallBacks *)MEMORY[0x1E4F1D548];
    if (!a1) {
      goto LABEL_4;
    }
LABEL_3:
    for (CFIndex i = CFArrayGetCount(a1); ; CFIndex i = 0)
    {
      if (v3 >= i) {
        goto LABEL_15;
      }
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v3);
      PathwayID = FigAlternateGetPathwayID((uint64_t)ValueAtIndex);
      uint64_t StableStreamIdentifier = (const void *)FigAlternateGetStableStreamIdentifier((uint64_t)ValueAtIndex);
      if (CFDictionaryContainsKey(Mutable, PathwayID)) {
        break;
      }
      CFMutableSetRef v10 = CFSetCreateMutable(allocator, 0, v4);
      if (!v10) {
        goto LABEL_14;
      }
      CFStringRef v9 = v10;
      CFDictionarySetValue(Mutable, PathwayID, v10);
      CFRelease(v9);
      if (StableStreamIdentifier) {
        goto LABEL_8;
      }
LABEL_9:
      ++v3;
      if (a1) {
        goto LABEL_3;
      }
LABEL_4:
      ;
    }
    CFStringRef v9 = (void *)CFDictionaryGetValue(Mutable, PathwayID);
    if (!StableStreamIdentifier) {
      goto LABEL_9;
    }
LABEL_8:
    CFSetSetValue((CFMutableSetRef)v9, StableStreamIdentifier);
    goto LABEL_9;
  }
LABEL_14:
  uint64_t v11 = FigSignalErrorAt();
  if (v11)
  {
    uint64_t v39 = v11;
    long long v13 = 0;
    goto LABEL_73;
  }
LABEL_15:
  CFIndex Count = CFDictionaryGetCount(Mutable);
  long long v13 = malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL);
  if (!v13
    || (CFDictionaryGetKeysAndValues(Mutable, (const void **)v13, 0),
        (CFArrayRef v14 = CFArrayCreate(allocator, (const void **)v13, Count, MEMORY[0x1E4F1D510])) == 0))
  {
    uint64_t v39 = FigSignalErrorAt();
LABEL_73:
    free(v13);
    CFDictionaryRef v40 = 0;
    if (Mutable) {
      goto LABEL_65;
    }
    goto LABEL_66;
  }
  CFArrayRef v15 = v14;
  if (!figSteering_validatePathwayToStableVariantOrRenditionIDDictionary(Mutable, v14))
  {
    uint64_t v39 = FigSignalErrorAt();
    free(v13);
    CFDictionaryRef v40 = 0;
    goto LABEL_64;
  }
  CFArrayRef v42 = v15;
  int v43 = v13;
  CFDictionaryRef v44 = Mutable;
  CFURLRef v16 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  uint64_t v17 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFIndex v18 = CFDictionaryCreateMutable(allocator, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v19 = CFDictionaryCreateMutable(allocator, 0, v16, v17);
  CFAllocatorRef v20 = CFDictionaryCreateMutable(allocator, 0, v16, v17);
  CFMutableDictionaryRef v21 = CFDictionaryCreateMutable(allocator, 0, v16, v17);
  uint64_t v22 = v21;
  if (!v18 || !v19 || !v20 || !v21)
  {
LABEL_69:
    uint64_t v39 = FigSignalErrorAt();
    goto LABEL_53;
  }
  CFIndex v23 = 0;
  CFArrayRef v45 = a1;
  BOOL v46 = v19;
  if (!a1) {
    goto LABEL_24;
  }
LABEL_23:
  for (CFIndex j = CFArrayGetCount(a1); ; CFIndex j = 0)
  {
    if (v23 >= j)
    {
      uint64_t v39 = 0;
      goto LABEL_53;
    }
    CMTime v25 = CFArrayGetValueAtIndex(a1, v23);
    uint64_t v26 = FigAlternateGetPathwayID((uint64_t)v25);
    CFArrayRef value = (void *)FigAlternateGetAudioGroupIDString((uint64_t)v25);
    VideoGroupIDString = (void *)FigAlternateGetVideoGroupIDString((uint64_t)v25);
    SubtitleGroupIDString = (void *)FigAlternateGetSubtitleGroupIDString((uint64_t)v25);
    if (!CFDictionaryContainsKey(v18, v26))
    {
      CFMutableSetRef v27 = CFSetCreateMutable(allocator, 0, MEMORY[0x1E4F1D548]);
      if (!v27) {
        goto LABEL_69;
      }
      CFMutableSetRef v28 = v27;
      CFDictionarySetValue(v18, v26, v27);
      CFRelease(v28);
    }
    if (!CFDictionaryContainsKey(v19, v26))
    {
      CFMutableSetRef v29 = CFSetCreateMutable(allocator, 0, MEMORY[0x1E4F1D548]);
      if (!v29) {
        goto LABEL_69;
      }
      CFMutableSetRef v30 = v29;
      CFDictionarySetValue(v19, v26, v29);
      CFRelease(v30);
    }
    if (!CFDictionaryContainsKey(v20, v26))
    {
      CFMutableSetRef v31 = CFSetCreateMutable(allocator, 0, MEMORY[0x1E4F1D548]);
      if (!v31) {
        goto LABEL_69;
      }
      CFMutableSetRef v32 = v31;
      CFDictionarySetValue(v20, v26, v31);
      CFRelease(v32);
    }
    if (!CFDictionaryContainsKey(v22, v26))
    {
      CFMutableSetRef v33 = CFSetCreateMutable(allocator, 0, MEMORY[0x1E4F1D548]);
      if (!v33) {
        goto LABEL_69;
      }
      CFMutableSetRef v34 = v33;
      CFDictionarySetValue(v22, v26, v33);
      CFRelease(v34);
    }
    int v47 = (__CFSet *)CFDictionaryGetValue(v18, v26);
    CMTime v35 = (__CFSet *)CFDictionaryGetValue(v19, v26);
    CFRange v36 = (__CFSet *)CFDictionaryGetValue(v20, v26);
    CFSetRef v37 = (const __CFSet *)CFDictionaryGetValue(v22, v26);
    if (value && !CFSetContainsValue(v35, value))
    {
      uint64_t v38 = figSteering_addRenditionIDsFromMediaGroupLocatorMapToSet(v47, 1936684398, (uint64_t)v25);
      if (v38) {
        goto LABEL_70;
      }
      CFSetSetValue(v35, value);
    }
    if (VideoGroupIDString && !CFSetContainsValue(v36, VideoGroupIDString))
    {
      uint64_t v38 = figSteering_addRenditionIDsFromMediaGroupLocatorMapToSet(v47, 1986618469, (uint64_t)v25);
      if (v38) {
        goto LABEL_70;
      }
      CFSetSetValue(v36, VideoGroupIDString);
    }
    if (SubtitleGroupIDString && !CFSetContainsValue(v37, SubtitleGroupIDString)) {
      break;
    }
LABEL_50:
    ++v23;
    a1 = v45;
    uint64_t v19 = v46;
    if (v45) {
      goto LABEL_23;
    }
LABEL_24:
    ;
  }
  uint64_t v38 = figSteering_addRenditionIDsFromMediaGroupLocatorMapToSet(v47, 1935832172, (uint64_t)v25);
  if (!v38)
  {
    CFSetSetValue(v37, SubtitleGroupIDString);
    goto LABEL_50;
  }
LABEL_70:
  uint64_t v39 = v38;
  uint64_t v19 = v46;
LABEL_53:
  if (v19) {
    CFRelease(v19);
  }
  CFDictionaryRef v40 = v18;
  CFArrayRef v15 = v42;
  if (v20) {
    CFRelease(v20);
  }
  CFDictionaryRef Mutable = v44;
  if (v22) {
    CFRelease(v22);
  }
  if (!v39)
  {
    if (figSteering_validatePathwayToStableVariantOrRenditionIDDictionary(v40, v42)) {
      uint64_t v39 = 0;
    }
    else {
      uint64_t v39 = FigSignalErrorAt();
    }
  }
  free(v43);
LABEL_64:
  CFRelease(v15);
  if (Mutable) {
LABEL_65:
  }
    CFRelease(Mutable);
LABEL_66:
  if (v40) {
    CFRelease(v40);
  }
  return v39;
}

uint64_t figSteering_validatePathwayToStableVariantOrRenditionIDDictionary(const __CFDictionary *a1, CFArrayRef theArray)
{
  CFIndex v4 = 0;
  int v5 = 1;
  if (!theArray) {
    goto LABEL_3;
  }
LABEL_2:
  for (CFIndex i = CFArrayGetCount(theArray); v4 < i && v5; CFIndex i = 0)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v4);
    CFDictionaryGetValue(a1, ValueAtIndex);
    if (v4) {
      int v5 = FigCFEqual();
    }
    ++v4;
    if (theArray) {
      goto LABEL_2;
    }
LABEL_3:
    ;
  }
  return v5;
}

uint64_t FigSteeringCloneAlternateWithPathwayClone(uint64_t a1, uint64_t a2, CFMutableDictionaryRef *a3, void *a4)
{
  CFTypeRef v25 = 0;
  CFTypeRef v26 = 0;
  uint64_t ID = FigPathwayCloneGetID();
  CFTypeRef v23 = 0;
  CFTypeRef v24 = 0;
  CFTypeRef cf = 0;
  CFURLRef PlaylistAlternateURL = (const __CFURL *)FigAlternateGetPlaylistAlternateURL(a2);
  uint64_t StableStreamIdentifier = (const void *)FigAlternateGetStableStreamIdentifier(a2);
  uint64_t v11 = FigPathwayCloningApplyURIReplacement(PlaylistAlternateURL, 0, StableStreamIdentifier, a1, &v25);
  if (v11
    || (AudioGroupIDString = (const void *)FigAlternateGetAudioGroupIDString(a2),
        uint64_t v11 = figSteeringCreateIndependentMediaGroupLocatorMap(a2, 1936684398, AudioGroupIDString, a3, @"FACCP_AudioGroups", a1, &v24), v11)|| (VideoGroupIDString = (const void *)FigAlternateGetVideoGroupIDString(a2), uint64_t v11 = figSteeringCreateIndependentMediaGroupLocatorMap(a2, 1986618469, VideoGroupIDString, a3, @"FACCP_VideoGroups", a1, &v23), v11)|| (SubtitleGroupIDString = (const void *)FigAlternateGetSubtitleGroupIDString(a2),
        uint64_t v11 = figSteeringCreateIndependentMediaGroupLocatorMap(a2, 1935832172, SubtitleGroupIDString, a3, @"FACCP_SubtitleGroups", a1, &cf), v11))
  {
    uint64_t v18 = v11;
  }
  else
  {
    CFTypeRef v15 = v25;
    char UniqueAlternateIndex = FigStreamingPlaylistMakeUniqueAlternateIndex();
    uint64_t v17 = FigAlternateCopy(a2, 0, v15, (uint64_t)v15, 0, 0, 0, 0, 0, 0, 0, 0, ID, 1, UniqueAlternateIndex, (uint64_t)v24, (uint64_t)v23, (uint64_t)cf, 0,
            &v26);
    uint64_t v18 = v17;
    uint64_t v19 = (uint64_t)v26;
    if (v26)
    {
      if (!v17)
      {
        double StartupScore = FigAlternateGetStartupScore(a2);
        uint64_t v18 = FigAlternateSetStartupScore(v19, StartupScore);
        if (!v18)
        {
          *a4 = v26;
          CFTypeRef v26 = 0;
        }
      }
    }
  }
  if (v24) {
    CFRelease(v24);
  }
  if (v23) {
    CFRelease(v23);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v25) {
    CFRelease(v25);
  }
  if (v26) {
    CFRelease(v26);
  }
  return v18;
}

uint64_t figSteeringCreateIndependentMediaGroupLocatorMap(uint64_t a1, int a2, const void *a3, CFMutableDictionaryRef *a4, void *a5, uint64_t a6, void *a7)
{
  CFTypeRef cf = 0;
  uint64_t result = FigAlternateGetMediaGroupLocatorMap(a1, a2);
  if (result)
  {
    CFDictionaryRef v13 = (const __CFDictionary *)result;
    uint64_t result = FigAlternateCreationContextCopyMediaGroupLocatorMapForMediaGroupID(a4, a5, a3, &cf);
    unsigned int v17 = result;
    CFTypeRef v14 = cf;
    if (!result)
    {
      if (cf)
      {
LABEL_4:
        uint64_t result = 0;
        *a7 = v14;
        return result;
      }
      CFTypeRef cf = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      if (!cf)
      {
        uint64_t result = FigSignalErrorAt();
        unsigned int v17 = result;
        CFTypeRef v14 = cf;
        if (!cf) {
          return result;
        }
LABEL_9:
        CFRelease(v14);
        return v17;
      }
      context[0] = &v17;
      context[1] = a6;
      void context[2] = &cf;
      CFDictionaryApplyFunction(v13, (CFDictionaryApplierFunction)figSteeringClonePathwayMediaGroup, context);
      uint64_t result = FigAlternateCreationContextSetMediaGroupLocatorMapForMediaGroupID(a4, a5, a3, cf);
      unsigned int v17 = result;
      CFTypeRef v14 = cf;
      if (!result) {
        goto LABEL_4;
      }
    }
    if (v14) {
      goto LABEL_9;
    }
  }
  return result;
}

uint64_t figSteering_addRenditionIDsFromMediaGroupLocatorMapToSet(__CFSet *a1, int a2, uint64_t a3)
{
  CFDictionaryRef MediaGroupLocatorMap = (const __CFDictionary *)FigAlternateGetMediaGroupLocatorMap(a3, a2);
  if (MediaGroupLocatorMap
    && (CFDictionaryRef v7 = MediaGroupLocatorMap,
        int64_t Count = CFDictionaryGetCount(MediaGroupLocatorMap),
        (CFStringRef v9 = (const void **)malloc_type_calloc(Count, 8uLL, 0x6004044C4A2DFuLL)) != 0))
  {
    CFMutableSetRef v10 = v9;
    CFDictionaryGetKeysAndValues(v7, v9, 0);
    if (Count >= 1)
    {
      for (uint64_t i = 0; i != Count; ++i)
      {
        StableStreamIdentifierForMediaSubstream = FigAlternateGetStableStreamIdentifierForMediaSubstream(a3, a2, v10[i]);
        if (StableStreamIdentifierForMediaSubstream) {
          CFSetSetValue(a1, StableStreamIdentifierForMediaSubstream);
        }
      }
    }
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = FigSignalErrorAt();
    CFMutableSetRef v10 = 0;
  }
  free(v10);
  return v13;
}

void figSteeringClonePathwayMediaGroup(const void *a1, CFDictionaryRef theDict, uint64_t a3)
{
  int v5 = *(_DWORD **)a3;
  uint64_t v4 = *(void *)(a3 + 8);
  CFURLRef v6 = *(CFMutableDictionaryRef **)(a3 + 16);
  CFArrayRef value = 0;
  MutableCFDictionaryRef Copy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theDict);
  if (MutableCopy)
  {
    CFDictionaryRef v8 = MutableCopy;
    CFURLRef v9 = (const __CFURL *)CFDictionaryGetValue(MutableCopy, @"FBPAEGLMK_URL");
    CFMutableSetRef v10 = CFDictionaryGetValue(v8, @"FBPAEGLMK_StableStreamIdentifier");
    int v11 = FigPathwayCloningApplyURIReplacement(v9, 1, v10, v4, (CFTypeRef *)&value);
    _DWORD *v5 = v11;
    uint64_t v12 = value;
    if (!v11)
    {
      if (value)
      {
        CFDictionarySetValue(v8, @"FBPAEGLMK_URL", value);
        CFDictionarySetValue(v8, @"FBPAEGLMK_URLForCacheLookup", value);
      }
      CFDictionarySetValue(*v6, a1, v8);
      uint64_t v12 = value;
    }
    if (v12) {
      CFRelease(v12);
    }
    CFRelease(v8);
  }
  else
  {
    _DWORD *v5 = FigSignalErrorAt();
  }
}

uint64_t FigCaptionRendererSRTRegionSetAlignment(uint64_t a1, int a2, int a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 60) = a2;
  *(_DWORD *)(DerivedStorage + 64) = a3;
  return 0;
}

uint64_t FigCaptionRendererSRTRegionSetWritingMode(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 56) = a2;
  return 0;
}

uint64_t FigCaptionRendererSRTRegionCreate(void *a1)
{
  if (a1)
  {
    uint64_t v15 = 0;
    MEMORY[0x19970EE10](&FigCaptionRendererSRTRegionGetClassID_sRegisterFigCaptionRendererSRTRegionBaseTypeOnce, RegisterFigCaptionRendererSRTRegionBaseType);
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t v4 = v15;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)(DerivedStorage + 56) = 0;
      *(_DWORD *)(DerivedStorage + 64) = 0;
      uint64_t v14 = 0;
      FigCaptionRendererNodeCreate(&v14);
      uint64_t v6 = v14;
      *(void *)uint64_t DerivedStorage = v14;
      FigCaptionRendererNodeProtocolGetProtocolID();
      Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
      if (ProtocolVTable)
      {
        uint64_t v8 = *(void *)(ProtocolVTable + 16);
        if (v8)
        {
          CFURLRef v9 = *(void (**)(uint64_t, uint64_t))(v8 + 216);
          if (v9) {
            v9(v6, 1);
          }
        }
      }
      uint64_t v10 = *(void *)DerivedStorage;
      FigCaptionRendererNodeProtocolGetProtocolID();
      uint64_t v11 = CMBaseObjectGetProtocolVTable();
      if (v11)
      {
        uint64_t v12 = *(void *)(v11 + 16);
        if (v12)
        {
          uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 232);
          if (v13) {
            v13(v10, 1);
          }
        }
      }
      uint64_t result = 0;
      *a1 = v4;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void FigCaptionRendererSRTRegionFinalize()
{
  uint64_t v0 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *FigCaptionRendererSRTRegionCopyDebugDescription(uint64_t a1)
{
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererSRTRegion: <%p>", a1);
  return Mutable;
}

__CFString *FigCaptionRendererSRTRegion_FigCaptionRendererBaseProtocol_CopyDebugDescription(uint64_t a1)
{
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererSRTRegion <FigCaptionRendererBaseProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererBaseProtocol_GetClassName(uint64_t a1, void *a2)
{
  *a2 = "FigCaptionRendererSRTRegion";
  return 0;
}

__CFString *FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_CopyDebugDescription(uint64_t a1)
{
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererSRTRegion <FigCaptionRendererNodeProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetParentNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetChildren(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 24);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_HasChildNode(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __s1 = 0;
  FigCaptionRendererBaseProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable || (uint64_t v8 = *(void *)(ProtocolVTable + 16)) == 0)
  {
LABEL_42:
    uint64_t v16 = 4294954508;
LABEL_43:
    FigSignalErrorAt();
    return v16;
  }
  CFURLRef v9 = *(uint64_t (**)(uint64_t, char **))(v8 + 8);
  if (!v9)
  {
LABEL_45:
    uint64_t v16 = 4294954514;
    goto LABEL_43;
  }
  uint64_t v10 = v9(a2, &__s1);
  if (v10)
  {
LABEL_48:
    uint64_t v16 = v10;
    goto LABEL_43;
  }
  uint64_t v11 = __s1;
  if (__s1
    && (!strcmp(__s1, "FigCaptionRendererStackLayoutRegion")
     || !strcmp(v11, "FigCaptionRendererCellStackLayoutRegion")
     || !strcmp(v11, "FigCaptionRendererSRTRegion")))
  {
    CFStringRef theString1 = 0;
    FigCaptionRendererRegionProtocolGetProtocolID();
    uint64_t v17 = CMBaseObjectGetProtocolVTable();
    if (v17)
    {
      uint64_t v18 = *(void *)(v17 + 16);
      if (v18)
      {
        uint64_t v19 = *(void (**)(uint64_t, CFStringRef *))(v18 + 16);
        if (v19) {
          v19(a2, &theString1);
        }
      }
    }
    char v20 = (char)theString1;
    if (theString1)
    {
      CFArrayRef theArray = 0;
      FigCaptionRendererNodeProtocolGetProtocolID();
      CFArrayRef v21 = (const __CFArray *)CMBaseObjectGetProtocolVTable();
      if (v21)
      {
        uint64_t v22 = *((void *)v21 + 2);
        if (v22 && (CFTypeRef v23 = *(void (**)(uint64_t, CFArrayRef *))(v22 + 24)) != 0)
        {
          v23(a1, &theArray);
          CFArrayRef v21 = theArray;
        }
        else
        {
          CFArrayRef v21 = 0;
        }
      }
      if (CFArrayGetCount(v21) >= 1)
      {
        CFIndex v24 = 0;
        do
        {
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v24);
          CMTime v35 = 0;
          FigCaptionRendererBaseProtocolGetProtocolID();
          uint64_t v26 = CMBaseObjectGetProtocolVTable();
          if (!v26) {
            goto LABEL_42;
          }
          uint64_t v27 = *(void *)(v26 + 16);
          if (!v27) {
            goto LABEL_42;
          }
          CFMutableSetRef v28 = *(uint64_t (**)(const void *, char **))(v27 + 8);
          if (!v28) {
            goto LABEL_45;
          }
          uint64_t v10 = v28(ValueAtIndex, &v35);
          if (v10) {
            goto LABEL_48;
          }
          CFMutableSetRef v29 = v35;
          if (v35
            && (!strcmp(v35, "FigCaptionRendererStackLayoutRegion")
             || !strcmp(v29, "FigCaptionRendererCellStackLayoutRegion")
             || !strcmp(__s1, "FigCaptionRendererSRTRegion")))
          {
            CFStringRef theString2 = 0;
            FigCaptionRendererRegionProtocolGetProtocolID();
            uint64_t v30 = CMBaseObjectGetProtocolVTable();
            if (v30)
            {
              uint64_t v31 = *(void *)(v30 + 16);
              if (v31)
              {
                CFMutableSetRef v32 = *(void (**)(const void *, CFStringRef *))(v31 + 16);
                if (v32) {
                  v32(ValueAtIndex, &theString2);
                }
              }
            }
            if (CFStringCompare(theString1, theString2, 1uLL) == kCFCompareEqualTo)
            {
              char v20 = 1;
              goto LABEL_41;
            }
          }
        }
        while (CFArrayGetCount(theArray) > ++v24);
      }
      char v20 = 0;
    }
LABEL_41:
    uint64_t v16 = 0;
    *a3 = v20;
    return v16;
  }
  uint64_t v12 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v13 = CMBaseObjectGetProtocolVTable();
  if (!v13) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, char *))(v14 + 32);
  if (v15) {
    return v15(v12, a2, a3);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_AddChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_RemoveChildNode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 48);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_RemovelAllChildrenNodes()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 56);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetViewport(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 64);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetViewport(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 72);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetFCRBounds(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  long long v10 = a2[2];
  long long v11 = a2[3];
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 80);
  if (!v6) {
    return 4294954514;
  }
  v12[0] = v8;
  v12[1] = v9;
  v12[2] = v10;
  void v12[3] = v11;
  return v6(v3, v12);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetFCRBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 88);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetCGBounds(double a1, double a2, double a3, double a4)
{
  uint64_t v8 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v14 = *(void *)(ProtocolVTable + 16);
  if (!v14) {
    return 4294954508;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __n128, __n128, __n128, __n128))(v14 + 96);
  if (!v15) {
    return 4294954514;
  }
  v10.n128_f64[0] = a1;
  v11.n128_f64[0] = a2;
  v12.n128_f64[0] = a3;
  v13.n128_f64[0] = a4;

  return v15(v8, v10, v11, v12, v13);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 104);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetCGSize(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 112);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetCGSize(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 120);
  if (!v6) {
    return 4294954508;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetCGOrigin(double a1, double a2)
{
  uint64_t v4 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v8 = *(void *)(ProtocolVTable + 16);
  if (!v8) {
    return 4294954508;
  }
  long long v9 = *(uint64_t (**)(uint64_t, __n128, __n128))(v8 + 128);
  if (!v9) {
    return 4294954514;
  }
  v6.n128_f64[0] = a1;
  v7.n128_f64[0] = a2;

  return v9(v4, v6, v7);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetCGOrigin(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 136);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetPaddings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v15 = *(void *)(ProtocolVTable + 16);
  if (!v15) {
    return 4294954508;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 144);
  if (!v16) {
    return 4294954514;
  }

  return v16(v13, a2, a3, a4, a5, a6, a7);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetInsetCGBounds(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 152);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_PurgeImageCache()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 160);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 168);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetImageCache(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 176);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetImageCacheWidth(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 184);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetImageCacheHeight(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 192);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_AllocateImageBuffer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v9 = *(void *)(ProtocolVTable + 16);
  if (!v9) {
    return 4294954508;
  }
  __n128 v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 200);
  if (!v10) {
    return 4294954514;
  }

  return v10(v7, a2, a3, a4);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetImageBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 208);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 216);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetNeedRedraw(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 224);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 232);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetNeedLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 240);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_HasActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 248);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetZOrder(double a1)
{
  uint64_t v2 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, __n128))(v5 + 256);
  if (!v6) {
    return 4294954514;
  }
  v4.n128_f64[0] = a1;

  return v6(v2, v4);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetZOrder(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  __n128 v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 264);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_ResetNodeTree()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 272);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_Draw(const void *a1, uint64_t a2)
{
  CGSize v4 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
  v20.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
  v20.CGSize size = v4;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(const void *, CGRect *))(v6 + 104);
      if (v7) {
        v7(a1, &v20);
      }
    }
  }
  CFDictionaryRef v8 = *(const __CFDictionary **)(a2 + 296);
  if (v8)
  {
    Boolean Value = CFDictionaryGetValue(v8, a1);
    double MidX = CGRectGetMidX(v20);
    double MidY = CGRectGetMidY(v20);
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    uint64_t v12 = CMBaseObjectGetProtocolVTable();
    if (v12)
    {
      uint64_t v13 = *(void *)(v12 + 16);
      if (v13)
      {
        uint64_t v14 = *(void (**)(const void *, double, double))(v13 + 72);
        if (v14) {
          v14(Value, MidX, MidY);
        }
      }
    }
    CGSize size = v20.size;
    FigCaptionRendererOutputNodeProtocolGetProtocolID();
    uint64_t v16 = CMBaseObjectGetProtocolVTable();
    if (v16)
    {
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        uint64_t v18 = *(void (**)(const void *, double, double))(v17 + 88);
        if (v18) {
          v18(Value, size.width, size.height);
        }
      }
    }
  }
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_Layout(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v84 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, uint64_t *))(v6 + 16);
      if (v7)
      {
        v7(a1, &v84);
        if (v84)
        {
          uint64_t v8 = CMBaseObjectGetDerivedStorage();
          int v9 = *(_DWORD *)(v8 + 16);
          double v10 = (double)*(int *)(v8 + 20) * 0.0533;
          double v11 = *(double *)(v8 + 40);
          double v12 = *(double *)(v8 + 24);
          if (*(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10 >= 0.0) {
            double v13 = *(double *)(v8 + 48) / 100.0 + *(double *)(v8 + 32) / -100.0 * v10;
          }
          else {
            double v13 = 0.0;
          }
          uint64_t v14 = *(void *)v8;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v15 = CMBaseObjectGetProtocolVTable();
          if (v15)
          {
            uint64_t v16 = *(void *)(v15 + 16);
            if (v16)
            {
              uint64_t v17 = *(void (**)(uint64_t, long long *))(v16 + 80);
              if (v17)
              {
                LOBYTE(v86) = 1;
                *(_DWORD *)((char *)&v86 + 1) = 0;
                DWORD1(v86) = 0;
                *((double *)&v86 + 1) = v11 / 100.0 + v12 / -100.0 * ((double)v9 / 100.0);
                LOBYTE(v87.width) = 1;
                *(_DWORD *)((char *)&v87.width + 1) = 0;
                HIDWORD(v87.width) = 0;
                v87.double height = v13;
                LOBYTE(v88) = 1;
                *(_DWORD *)((char *)&v88 + 1) = 0;
                DWORD1(v88) = 0;
                *((double *)&v88 + 1) = (double)v9 / 100.0;
                LOBYTE(v89) = 1;
                *(_DWORD *)((char *)&v89 + 1) = 0;
                DWORD1(v89) = 0;
                *((double *)&v89 + 1) = v10;
                v17(v14, &v86);
              }
            }
          }
          uint64_t v18 = (uint64_t *)CMBaseObjectGetDerivedStorage();
          long long v86 = FCRRectNull;
          CGSize v87 = *(CGSize *)&byte_1949966D8;
          long long v88 = xmmword_1949966E8;
          long long v89 = *(_OWORD *)&byte_1949966F8;
          CGSize v79 = *(CGSize *)(MEMORY[0x1E4F1DB20] + 16);
          CGPoint v80 = (CGPoint)*MEMORY[0x1E4F1DB20];
          v85.origin = (CGPoint)*MEMORY[0x1E4F1DB20];
          v85.CGSize size = v79;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v19 = CMBaseObjectGetProtocolVTable();
          if (v19)
          {
            uint64_t v20 = *(void *)(v19 + 16);
            if (v20)
            {
              CFArrayRef v21 = *(void (**)(uint64_t, long long *))(v20 + 88);
              if (v21) {
                v21(a1, &v86);
              }
            }
          }
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v22 = CMBaseObjectGetProtocolVTable();
          if (v22)
          {
            uint64_t v23 = *(void *)(v22 + 16);
            if (v23)
            {
              CFIndex v24 = *(void (**)(uint64_t, CGRect *))(v23 + 72);
              if (v24) {
                v24(a1, &v85);
              }
            }
          }
          if (*((double *)&v88 + 1) != -1.0)
          {
            double width = v85.size.width;
            CGFloat v61 = v85.origin.x + *((double *)&v86 + 1);
            if ((_BYTE)v86) {
              CGFloat v61 = v85.origin.x + *((double *)&v86 + 1) * v85.size.width;
            }
            double v62 = v85.origin.y + v87.height;
            if (LOBYTE(v87.width)) {
              double v62 = v85.origin.y + v87.height * v85.size.height;
            }
            double height = 1.0;
            if (!(_BYTE)v88) {
              double width = 1.0;
            }
            if ((_BYTE)v89) {
              double height = v85.size.height;
            }
            double v65 = *((double *)&v89 + 1) * height;
            double v64 = *((double *)&v88 + 1) * width;
            CGRect v90 = CGRectIntegral(*(CGRect *)&v61);
            double x = v90.origin.x;
            double y = v90.origin.y;
            double v68 = v90.size.width;
            double v69 = v90.size.height;
            uint64_t v70 = *v18;
            FigCaptionRendererNodeProtocolGetProtocolID();
            uint64_t v71 = CMBaseObjectGetProtocolVTable();
            if (v71)
            {
              uint64_t v72 = *(void *)(v71 + 16);
              if (v72)
              {
                int v73 = *(void (**)(uint64_t, double, double, double, double))(v72 + 96);
                if (v73) {
                  v73(v70, x, y, v68, v69);
                }
              }
            }
          }
          CFArrayRef theArray = 0;
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v25 = CMBaseObjectGetProtocolVTable();
          if (v25)
          {
            uint64_t v26 = *(void *)(v25 + 16);
            if (v26)
            {
              uint64_t v27 = *(void (**)(uint64_t, CFArrayRef *))(v26 + 24);
              if (v27) {
                v27(a1, &theArray);
              }
            }
          }
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            double v29 = *MEMORY[0x1E4F1DAD8];
            double v30 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
            CFIndex v31 = Count + 1;
            while (1)
            {
              CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v31 - 2);
              __s1 = 0;
              FigCaptionRendererBaseProtocolGetProtocolID();
              uint64_t v33 = CMBaseObjectGetProtocolVTable();
              if (!v33
                || (uint64_t v34 = *(void *)(v33 + 16)) == 0
                || (CMTime v35 = *(unsigned int (**)(const void *, char **))(v34 + 8)) == 0
                || v35(ValueAtIndex, &__s1))
              {
LABEL_87:
                FigSignalErrorAt();
                goto LABEL_88;
              }
              if (__s1 && !strcmp(__s1, "FigCaptionRendererCaption"))
              {
                int v81 = 0;
                FigCaptionRendererCaptionProtocolGetProtocolID();
                uint64_t v36 = CMBaseObjectGetProtocolVTable();
                if (!v36) {
                  goto LABEL_87;
                }
                uint64_t v37 = *(void *)(v36 + 16);
                if (!v37) {
                  goto LABEL_87;
                }
                uint64_t v38 = *(unsigned int (**)(const void *, int *))(v37 + 48);
                if (!v38 || v38(ValueAtIndex, &v81)) {
                  goto LABEL_87;
                }
                if (v81 == 3) {
                  break;
                }
              }
LABEL_73:
              if ((unint64_t)--v31 <= 1) {
                goto LABEL_88;
              }
            }
            long long v86 = (__int128)v80;
            CGSize v87 = v79;
            FigCaptionRendererNodeProtocolGetProtocolID();
            uint64_t v39 = CMBaseObjectGetProtocolVTable();
            if (!v39) {
              goto LABEL_87;
            }
            uint64_t v40 = *(void *)(v39 + 16);
            if (!v40) {
              goto LABEL_87;
            }
            CFTypeRef v41 = *(unsigned int (**)(const void *, long long *))(v40 + 104);
            if (!v41) {
              goto LABEL_87;
            }
            if (v41(ValueAtIndex, &v86)) {
              goto LABEL_87;
            }
            v85.origin = v80;
            v85.CGSize size = v79;
            FigCaptionRendererNodeProtocolGetProtocolID();
            uint64_t v42 = CMBaseObjectGetProtocolVTable();
            if (!v42) {
              goto LABEL_87;
            }
            uint64_t v43 = *(void *)(v42 + 16);
            if (!v43) {
              goto LABEL_87;
            }
            CFDictionaryRef v44 = *(unsigned int (**)(const void *, CGRect *))(v43 + 72);
            if (!v44 || v44(ValueAtIndex, &v85)) {
              goto LABEL_87;
            }
            int v45 = *(_DWORD *)(DerivedStorage + 56);
            if (v45)
            {
              double MinX = v29;
              double MinY = v30;
              if (v45 != 2)
              {
LABEL_65:
                FigCaptionRendererNodeProtocolGetProtocolID();
                uint64_t v54 = CMBaseObjectGetProtocolVTable();
                if (v54)
                {
                  uint64_t v55 = *(void *)(v54 + 16);
                  if (v55)
                  {
                    CFAllocatorRef v56 = *(void (**)(const void *, double, double))(v55 + 128);
                    if (v56) {
                      v56(ValueAtIndex, MinX, MinY);
                    }
                  }
                }
                FigCaptionRendererNodeProtocolGetProtocolID();
                uint64_t v57 = CMBaseObjectGetProtocolVTable();
                if (v57)
                {
                  uint64_t v58 = *(void *)(v57 + 16);
                  if (v58)
                  {
                    CFIndex v59 = *(void (**)(const void *, uint64_t))(v58 + 232);
                    if (v59) {
                      v59(ValueAtIndex, 1);
                    }
                  }
                }
                goto LABEL_73;
              }
              int v48 = *(_DWORD *)(DerivedStorage + 64);
              if (v48 == 1)
              {
                double MinX = CGRectGetMinX(v85);
              }
              else
              {
                CGRect v49 = v85;
                if (v48 == 3) {
                  double MinX = CGRectGetMaxX(v49) - v87.width;
                }
                else {
                  double MinX = CGRectGetMidX(v49) + v87.width * -0.5;
                }
              }
              int v52 = *(_DWORD *)(DerivedStorage + 60);
            }
            else
            {
              int v50 = *(_DWORD *)(DerivedStorage + 60);
              if (v50 == 1)
              {
                double MinX = CGRectGetMinX(v85);
              }
              else
              {
                CGRect v51 = v85;
                if (v50 == 3) {
                  double MinX = CGRectGetMaxX(v51) - v87.width;
                }
                else {
                  double MinX = CGRectGetMidX(v51) + v87.width * -0.5;
                }
              }
              int v52 = *(_DWORD *)(DerivedStorage + 64);
            }
            if (v52 == 1)
            {
              double MinY = CGRectGetMaxY(v85) - v87.height;
            }
            else
            {
              CGRect v53 = v85;
              if (v52 == 3) {
                double MinY = CGRectGetMinY(v53);
              }
              else {
                double MinY = CGRectGetMidY(v53) + v87.height * -0.5;
              }
            }
            goto LABEL_65;
          }
        }
      }
    }
  }
LABEL_88:
  uint64_t v74 = *(void *)DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v75 = CMBaseObjectGetProtocolVTable();
  if (!v75) {
    return 4294954508;
  }
  uint64_t v76 = *(void *)(v75 + 16);
  if (!v76) {
    return 4294954508;
  }
  long long v77 = *(uint64_t (**)(uint64_t, uint64_t))(v76 + 288);
  if (v77) {
    return v77(v74, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_ExecActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 296);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_Compose(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  __int16 v25 = 0;
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (ProtocolVTable)
  {
    uint64_t v6 = *(void *)(ProtocolVTable + 16);
    if (v6)
    {
      uint64_t v7 = *(void (**)(uint64_t, char *))(v6 + 248);
      if (v7)
      {
        v7(a1, (char *)&v25 + 1);
        if (HIBYTE(v25))
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v8 = CMBaseObjectGetProtocolVTable();
          if (v8)
          {
            uint64_t v9 = *(void *)(v8 + 16);
            if (v9)
            {
              double v10 = *(void (**)(uint64_t, uint64_t))(v9 + 296);
              if (v10) {
                v10(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v11 = CMBaseObjectGetProtocolVTable();
  if (v11)
  {
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      double v13 = *(void (**)(uint64_t, __int16 *))(v12 + 240);
      if (v13)
      {
        v13(a1, &v25);
        if ((_BYTE)v25)
        {
          FigCaptionRendererNodeProtocolGetProtocolID();
          uint64_t v14 = CMBaseObjectGetProtocolVTable();
          if (v14)
          {
            uint64_t v15 = *(void *)(v14 + 16);
            if (v15)
            {
              uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 288);
              if (v16) {
                v16(a1, a2);
              }
            }
          }
        }
      }
    }
  }
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v17 = CMBaseObjectGetProtocolVTable();
  if (v17)
  {
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v18 + 280);
      if (v19) {
        v19(a1, a2);
      }
    }
  }
  uint64_t v20 = *DerivedStorage;
  FigCaptionRendererNodeProtocolGetProtocolID();
  uint64_t v21 = CMBaseObjectGetProtocolVTable();
  if (!v21) {
    return 4294954508;
  }
  uint64_t v22 = *(void *)(v21 + 16);
  if (!v22) {
    return 4294954508;
  }
  uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t))(v22 + 304);
  if (v23) {
    return v23(v20, a2);
  }
  else {
    return 4294954514;
  }
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_OnChildUpdateDisplayRequest(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  long long v8 = *a2;
  long long v9 = a2[1];
  uint64_t v10 = *((void *)a2 + 4);
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, _OWORD *))(v5 + 312);
  if (!v6) {
    return 4294954514;
  }
  v11[0] = v8;
  v11[1] = v9;
  uint64_t v12 = v10;
  return v6(v3, v11);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_AddAction(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 320);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_RemoveAllActions()
{
  uint64_t v0 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v2 = *(void *)(ProtocolVTable + 16);
  if (!v2) {
    return 4294954508;
  }
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v2 + 328);
  if (!v3) {
    return 4294954514;
  }

  return v3(v0);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 336);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_GetActions(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 344);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_SelectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 352);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_UnselectAt(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v11 = *(void *)(ProtocolVTable + 16);
  if (!v11) {
    return 4294954508;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, __n128, __n128))(v11 + 360);
  if (!v12) {
    return 4294954514;
  }
  v9.n128_f64[0] = a1;
  v10.n128_f64[0] = a2;

  return v12(v7, a4, v9, v10);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_IsSelected(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 368);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_BeginScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 376);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererNodeProtocol_EndScene(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  FigCaptionRendererNodeProtocolGetProtocolID();
  Protocoluint64_t VTable = CMBaseObjectGetProtocolVTable();
  if (!ProtocolVTable) {
    return 4294954508;
  }
  uint64_t v5 = *(void *)(ProtocolVTable + 16);
  if (!v5) {
    return 4294954508;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 384);
  if (!v6) {
    return 4294954514;
  }

  return v6(v3, a2);
}

__CFString *FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_CopyDebugDescription(uint64_t a1)
{
  CFDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"\tFigCaptionRendererSRTRegion <FigCaptionRendererRegionProtocol> on <%p>", a1);
  return Mutable;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_SetRegionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CGSize v4 = *(const void **)(DerivedStorage + 8);
  *(void *)(DerivedStorage + 8) = a2;
  if (a2) {
    CFRetain(a2);
  }
  if (v4) {
    CFRelease(v4);
  }
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_GetRegionID(uint64_t a1, void *a2)
{
  *a2 = *(void *)(CMBaseObjectGetDerivedStorage() + 8);
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_SetWidth(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16) = a2;
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_GetWidth(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 16);
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_SetLines(uint64_t a1, int a2)
{
  *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20) = a2;
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_GetLines(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 20);
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_SetRegionAnchor(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 24) = a1;
  *(double *)(DerivedStorage + 32) = a2;
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_GetRegionAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 24);
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_SetViewportAnchor(double a1, double a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(double *)(DerivedStorage + 40) = a1;
  *(double *)(DerivedStorage + 48) = a2;
  return 0;
}

uint64_t FigCaptionRendererSRTRegion_FigCaptionRendererRegionProtocol_GetViewportAnchor(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)(CMBaseObjectGetDerivedStorage() + 40);
  return 0;
}

uint64_t RegisterFigCaptionRendererSRTRegionBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFTypeRef FigCaptionRendererSRTRegionBaseCopyFormattingDesc()
{
  return CFRetain(@"[FigCaptionRendererSRTRegion]");
}

uint64_t FigMetricItemRateChangeEventDeserializeAndCopy(void *a1, void *a2)
{
  long long v21 = *MEMORY[0x1E4F1F9F8];
  uint64_t v22 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  CFTypeRef v19 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v18 = 0;
  if (!a1 || !a2)
  {
    uint64_t CMTime = FigSignalErrorAt();
LABEL_13:
    uint64_t v10 = CMTime;
    goto LABEL_14;
  }
  int64_t int64 = xpc_dictionary_get_int64(a1, "EventID");
  uint64_t CMTime = FigXPCMessageGetCMTime();
  if (CMTime) {
    goto LABEL_13;
  }
  uint64_t CMTime = FigXPCMessageCopyCFDate();
  if (CMTime) {
    goto LABEL_13;
  }
  uint64_t CMTime = FigXPCMessageCopyCFString();
  if (CMTime) {
    goto LABEL_13;
  }
  xpc_object_t value = xpc_dictionary_get_value(a1, "Variant");
  uint64_t CMTime = FigAlternateCreateWithXPCObject(value, 0, &v18);
  if (CMTime) {
    goto LABEL_13;
  }
  double v7 = xpc_dictionary_get_double(a1, "Rate");
  double v8 = xpc_dictionary_get_double(a1, "PreviousRate");
  switch(int64)
  {
    case 8:
      CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
      long long v16 = v21;
      uint64_t v17 = v22;
      uint64_t CMTime = FigMetricItemStallEventCreate(AllocatorForMedia, &v16, cf, v19, v18, a2, v7, v8);
      goto LABEL_13;
    case 9:
      uint64_t v11 = FigGetAllocatorForMedia();
      long long v16 = v21;
      uint64_t v17 = v22;
      uint64_t CMTime = FigMetricItemRateChangeEventCreate(v11, &v16, cf, v19, v18, a2, v7, v8);
      goto LABEL_13;
    case 10:
      CFAllocatorRef v12 = (const __CFAllocator *)FigGetAllocatorForMedia();
      long long v16 = v21;
      uint64_t v17 = v22;
      uint64_t CMTime = FigMetricItemSeekEventCreate(v12, &v16, cf, v19, v18, a2, v7, v8);
      goto LABEL_13;
    case 11:
      char v13 = xpc_dictionary_get_BOOL(a1, "DidSeekInBuffer");
      CFAllocatorRef v14 = (const __CFAllocator *)FigGetAllocatorForMedia();
      long long v16 = v21;
      uint64_t v17 = v22;
      uint64_t CMTime = FigMetricItemSeekDidCompleteEventCreate(v14, &v16, cf, v19, v18, v13, a2, v7, v8);
      goto LABEL_13;
    default:
      uint64_t v10 = 0;
      break;
  }
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  if (v19) {
    CFRelease(v19);
  }
  if (v18) {
    CFRelease(v18);
  }
  return v10;
}

uint64_t FigMetricItemRateChangeEventCreate(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, const void *a5, void *a6, double a7, double a8)
{
  if (a6)
  {
    FigMetricEventGetClassID();
    uint64_t v16 = CMDerivedObjectCreate();
    if (!v16)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v18 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 88) = v18;
      if (v18)
      {
        *(unsigned char *)uint64_t DerivedStorage = 1;
        *(void *)(DerivedStorage + 8) = 9;
        if (a3)
        {
          CFTypeRef v19 = (void *)CFRetain(a3);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFTypeRef v19 = CFDateCreate(a1, Current);
        }
        *(void *)(DerivedStorage + 16) = v19;
        long long v21 = *a2;
        *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
        *(_OWORD *)(DerivedStorage + 32) = v21;
        if (a4) {
          CFTypeRef v22 = CFRetain(a4);
        }
        else {
          CFTypeRef v22 = 0;
        }
        *(void *)(DerivedStorage + 24) = v22;
        if (a5) {
          CFTypeRef v23 = CFRetain(a5);
        }
        else {
          CFTypeRef v23 = 0;
        }
        *(void *)(DerivedStorage + 56) = v23;
        *(double *)(DerivedStorage + 64) = a7;
        *(double *)(DerivedStorage + 72) = a8;
        uint64_t v16 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v16) {
          *a6 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v16;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMetricItemStallEventCreate(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, const void *a5, void *a6, double a7, double a8)
{
  if (a6)
  {
    FigMetricEventGetClassID();
    uint64_t v16 = CMDerivedObjectCreate();
    if (!v16)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v18 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 88) = v18;
      if (v18)
      {
        *(unsigned char *)uint64_t DerivedStorage = 1;
        *(void *)(DerivedStorage + 8) = 8;
        if (a3)
        {
          CFTypeRef v19 = (void *)CFRetain(a3);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFTypeRef v19 = CFDateCreate(a1, Current);
        }
        *(void *)(DerivedStorage + 16) = v19;
        long long v21 = *a2;
        *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
        *(_OWORD *)(DerivedStorage + 32) = v21;
        if (a4) {
          CFTypeRef v22 = CFRetain(a4);
        }
        else {
          CFTypeRef v22 = 0;
        }
        *(void *)(DerivedStorage + 24) = v22;
        if (a5) {
          CFTypeRef v23 = CFRetain(a5);
        }
        else {
          CFTypeRef v23 = 0;
        }
        *(void *)(DerivedStorage + 56) = v23;
        *(double *)(DerivedStorage + 64) = a7;
        *(double *)(DerivedStorage + 72) = a8;
        uint64_t v16 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v16) {
          *a6 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v16;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMetricItemSeekEventCreate(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, const void *a5, void *a6, double a7, double a8)
{
  if (a6)
  {
    FigMetricEventGetClassID();
    uint64_t v16 = CMDerivedObjectCreate();
    if (!v16)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v18 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 88) = v18;
      if (v18)
      {
        *(unsigned char *)uint64_t DerivedStorage = 1;
        *(void *)(DerivedStorage + 8) = 10;
        if (a3)
        {
          CFTypeRef v19 = (void *)CFRetain(a3);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          CFTypeRef v19 = CFDateCreate(a1, Current);
        }
        *(void *)(DerivedStorage + 16) = v19;
        long long v21 = *a2;
        *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
        *(_OWORD *)(DerivedStorage + 32) = v21;
        if (a4) {
          CFTypeRef v22 = CFRetain(a4);
        }
        else {
          CFTypeRef v22 = 0;
        }
        *(void *)(DerivedStorage + 24) = v22;
        if (a5) {
          CFTypeRef v23 = CFRetain(a5);
        }
        else {
          CFTypeRef v23 = 0;
        }
        *(void *)(DerivedStorage + 56) = v23;
        *(double *)(DerivedStorage + 64) = a7;
        *(double *)(DerivedStorage + 72) = a8;
        uint64_t v16 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v16) {
          *a6 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v16;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigMetricItemSeekDidCompleteEventCreate(const __CFAllocator *a1, long long *a2, const void *a3, const void *a4, const void *a5, char a6, void *a7, double a8, double a9)
{
  if (a7)
  {
    FigMetricEventGetClassID();
    uint64_t v18 = CMDerivedObjectCreate();
    if (!v18)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v20 = FigSimpleMutexCreate();
      *(void *)(DerivedStorage + 88) = v20;
      if (v20)
      {
        *(unsigned char *)uint64_t DerivedStorage = 1;
        *(void *)(DerivedStorage + 8) = 11;
        if (a3)
        {
          long long v21 = (void *)CFRetain(a3);
        }
        else
        {
          CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
          long long v21 = CFDateCreate(a1, Current);
        }
        *(void *)(DerivedStorage + 16) = v21;
        long long v23 = *a2;
        *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
        *(_OWORD *)(DerivedStorage + 32) = v23;
        if (a4) {
          CFTypeRef v24 = CFRetain(a4);
        }
        else {
          CFTypeRef v24 = 0;
        }
        *(void *)(DerivedStorage + 24) = v24;
        if (a5) {
          CFTypeRef v25 = CFRetain(a5);
        }
        else {
          CFTypeRef v25 = 0;
        }
        *(void *)(DerivedStorage + 56) = v25;
        *(unsigned char *)(DerivedStorage + 80) = a6;
        *(double *)(DerivedStorage + 64) = a8;
        *(double *)(DerivedStorage + 72) = a9;
        uint64_t v18 = FigMetricEventClassInstallEventDeserializeHandler();
        if (!v18) {
          *a7 = 0;
        }
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return v18;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t meirc_finalize()
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v1 = (const void *)DerivedStorage[7];
  if (v1) {
    CFRelease(v1);
  }
  uint64_t v2 = (const void *)DerivedStorage[2];
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (const void *)DerivedStorage[3];
  if (v3) {
    CFRelease(v3);
  }

  return FigSimpleMutexDestroy();
}

CFStringRef meirc_copyDebugDesc(uint64_t a1)
{
  CFAllocatorRef AllocatorForMedia = (const __CFAllocator *)FigGetAllocatorForMedia();
  return CFStringCreateWithFormat(AllocatorForMedia, 0, @"[FigMetricItemRateChangeEvent %p]", a1);
}

void meirc_setImmutable()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  *(unsigned char *)uint64_t DerivedStorage = 0;

  JUMPOUT(0x19970E930);
}

uint64_t meirc_isMutable()
{
  uint64_t DerivedStorage = (unsigned __int8 *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*((void *)DerivedStorage + 11));
  uint64_t v1 = *DerivedStorage;
  MEMORY[0x19970E930](*((void *)DerivedStorage + 11));
  return v1;
}

uint64_t meirc_getMetricEventID()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 8);
}

uint64_t meirc_getDate()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 16);
}

CFTypeRef meirc_copySessionID()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1) {
    CFTypeRef v2 = CFRetain(v1);
  }
  else {
    CFTypeRef v2 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  return v2;
}

uint64_t meirc_setSessionID(uint64_t a1, const void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  if (*(unsigned char *)DerivedStorage)
  {
    CGSize v4 = *(const void **)(DerivedStorage + 24);
    *(void *)(DerivedStorage + 24) = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v4) {
      CFRelease(v4);
    }
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  return v5;
}

void meirc_getMediaTime(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  *(_OWORD *)a1 = *(_OWORD *)(DerivedStorage + 32);
  *(void *)(a1 + 16) = *(void *)(DerivedStorage + 48);

  JUMPOUT(0x19970E930);
}

uint64_t meirc_setMediaTime(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 88));
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v4 = 0;
    long long v5 = *a2;
    *(void *)(DerivedStorage + 48) = *((void *)a2 + 2);
    *(_OWORD *)(DerivedStorage + 32) = v5;
  }
  else
  {
    uint64_t v4 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 88));
  return v4;
}

uint64_t meirc_serialize(uint64_t a1, void *a2)
{
  void (*v19)(long long *__return_ptr, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  double (*v31)(uint64_t, __n128);
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  double (*v35)(uint64_t, __n128);
  uint64_t v36;
  uint64_t v37;
  unsigned int (*v38)(uint64_t);
  BOOL v39;
  long long v41;
  uint64_t v42;
  xpc_object_t value;

  xpc_object_t value = 0;
  if (!a1 || !a2)
  {
    uint64_t v12 = FigSignalErrorAt();
LABEL_64:
    uint64_t v27 = v12;
    goto LABEL_62;
  }
  uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 24);
  if (v6) {
    int64_t v7 = v6(a1);
  }
  else {
    int64_t v7 = -12782;
  }
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 48);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t))(v9 + 8);
  if (v10) {
    uint64_t v11 = v10(a1);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = FigAlternateCopyAsXPCObject(v11, &value);
  if (v12) {
    goto LABEL_64;
  }
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v14 = v13 ? v13 : 0;
  uint64_t v15 = *(uint64_t (**)(uint64_t))(v14 + 24);
  int64_t v16 = v15 ? v15(a1) : -12782;
  xpc_dictionary_set_int64(a2, "EventID", v16);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v18 = v17 ? v17 : 0;
  CFTypeRef v19 = *(void (**)(long long *__return_ptr, uint64_t))(v18 + 56);
  if (v19)
  {
    v19(&v41, a1);
  }
  else
  {
    CFTypeRef v41 = *MEMORY[0x1E4F1F9F8];
    uint64_t v42 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  }
  uint64_t v12 = FigXPCMessageSetCMTime();
  if (v12) {
    goto LABEL_64;
  }
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    long long v21 = v20;
  }
  else {
    long long v21 = 0;
  }
  CFTypeRef v22 = *(void (**)(uint64_t))(v21 + 32);
  if (v22) {
    v22(a1);
  }
  uint64_t v12 = FigXPCMessageSetCFDate();
  if (v12) {
    goto LABEL_64;
  }
  long long v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    CFTypeRef v24 = v23;
  }
  else {
    CFTypeRef v24 = 0;
  }
  CFTypeRef v25 = *(uint64_t (**)(uint64_t))(v24 + 40);
  if (v25) {
    uint64_t v26 = (const void *)v25(a1);
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v27 = FigXPCMessageSetCFString();
  if (!v27)
  {
    xpc_dictionary_set_int64(a2, "EventID", v7);
    CFMutableSetRef v28 = *(void *)(CMBaseObjectGetVTable() + 48);
    if (v28) {
      double v30 = v28;
    }
    else {
      double v30 = 0;
    }
    CFIndex v31 = *(double (**)(uint64_t, __n128))(v30 + 16);
    v29.n128_u64[0] = 0;
    if (v31) {
      v29.n128_f64[0] = v31(a1, v29);
    }
    xpc_dictionary_set_double(a2, "Rate", v29.n128_f64[0]);
    CFMutableSetRef v32 = *(void *)(CMBaseObjectGetVTable() + 48);
    if (v32) {
      uint64_t v34 = v32;
    }
    else {
      uint64_t v34 = 0;
    }
    CMTime v35 = *(double (**)(uint64_t, __n128))(v34 + 24);
    v33.n128_u64[0] = 0;
    if (v35) {
      v33.n128_f64[0] = v35(a1, v33);
    }
    xpc_dictionary_set_double(a2, "PreviousRate", v33.n128_f64[0]);
    xpc_dictionary_set_value(a2, "Variant", value);
    if (v7 == 11)
    {
      uint64_t v36 = *(void *)(CMBaseObjectGetVTable() + 48);
      if (v36) {
        uint64_t v37 = v36;
      }
      else {
        uint64_t v37 = 0;
      }
      uint64_t v38 = *(unsigned int (**)(uint64_t))(v37 + 32);
      if (v38) {
        uint64_t v39 = v38(a1) != 0;
      }
      else {
        uint64_t v39 = 0;
      }
      xpc_dictionary_set_BOOL(a2, "DidSeekInBuffer", v39);
    }
  }
  if (v26) {
    CFRelease(v26);
  }
LABEL_62:
  FigXPCRelease();
  return v27;
}

uint64_t meirc_getVariant()
{
  return *(void *)(CMBaseObjectGetDerivedStorage() + 56);
}

double meirc_getRate()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 64);
}

double meirc_getPreviousRate()
{
  return *(double *)(CMBaseObjectGetDerivedStorage() + 72);
}

uint64_t meirc_didSeekInBuffer()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 80);
}

uint64_t FigRemakerCreateQueuedBaseWithURLs(const __CFAllocator *a1, uint64_t a2, unint64_t a3, const __CFURL *a4, uint64_t a5, const __CFDictionary *a6, const __CFDictionary *a7, void *a8)
{
  FigKTraceInit();
  uint64_t v16 = FigOSTransactionCreate();
  if (!v16) {
    return FigSignalErrorAt();
  }
  uint64_t v17 = (void *)v16;
  if (a7)
  {
    uint64_t v18 = (const void *)*MEMORY[0x1E4F1CFD0];
    BOOL v19 = v18 == CFDictionaryGetValue(a7, @"Remaker_PermitNonLocalSourceURLs");
  }
  else
  {
    BOOL v19 = 0;
  }
  if (a2 | a3)
  {
    if (!a2 || (FigCFURLIsLocalResource() ? (char v20 = 1) : (char v20 = v19), (v20 & 1) != 0))
    {
      if (a4 && remakerFamily_CFURLSchemeIsFile(a4) && a8)
      {
        FigRemakerGetClassID();
        uint64_t v21 = CMDerivedObjectCreate();
        if (v21)
        {
LABEL_15:
          os_release(v17);
          return v21;
        }
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        *(_DWORD *)(DerivedStorage + 32) = 12301;
        uint64_t v24 = FigReentrantMutexCreate();
        *(void *)(DerivedStorage + 8) = v24;
        if (!v24)
        {
          uint64_t v21 = FigSignalErrorAt();
          goto LABEL_15;
        }
        *(void *)(DerivedStorage + 40) = v17;
        CFAllocatorRef v25 = CFGetAllocator(0);
        CFMutableArrayRef Mutable = CFArrayCreateMutable(v25, 0, MEMORY[0x1E4F1D510]);
        *(void *)(DerivedStorage + 24) = Mutable;
        if (!Mutable) {
          return 4294955196;
        }
        uint64_t BaseWithURLs = FigRemakerCreateBaseWithURLs(a1, a2, (const void *)a3, a4, a5, a6, a7, (void *)(DerivedStorage + 16));
        if (!BaseWithURLs)
        {
          CMNotificationCenterGetDefaultLocalCenter();
          uint64_t v21 = CMNotificationCenterAddListener();
          if (!v21) {
            *a8 = 0;
          }
          return v21;
        }
        return BaseWithURLs;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t queuedRemaker_reflectSubRemakerNotification(int a1, const void *a2, CFTypeRef cf1)
{
  if (CFEqual(cf1, @"Remaker_Completed") || CFEqual(cf1, @"Remaker_Failed")) {
    remakerQueue_removeRemakerFromQueue(a2);
  }
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t FigRemakerCreateQueuedWithAsset(const __CFAllocator *a1, const void *a2, const __CFURL *a3, const __CFDictionary *a4, const __CFDictionary *a5, CFTypeRef *a6)
{
  CFTypeRef v23 = 0;
  CFTypeRef cf = 0;
  FigKTraceInit();
  FigCFDictionaryGetBooleanIfPresent();
  if (!a2) {
    goto LABEL_24;
  }
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(a2);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v14 + 48);
  if (!v15)
  {
    uint64_t v21 = 4294954514;
    goto LABEL_19;
  }
  uint64_t v16 = v15(CMBaseObject, @"assetProperty_CreationURL", *MEMORY[0x1E4F1CF80], &v23);
  if (v16) {
    goto LABEL_25;
  }
  if (v23 && !FigCFURLIsLocalResource() || !a3 || !remakerFamily_CFURLSchemeIsFile(a3) || !a6) {
    goto LABEL_24;
  }
  FigRemakerGetClassID();
  uint64_t v16 = CMDerivedObjectCreate();
  if (v16) {
    goto LABEL_25;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(_DWORD *)(DerivedStorage + 32) = 12301;
  uint64_t v18 = FigReentrantMutexCreate();
  *(void *)(DerivedStorage + 8) = v18;
  if (!v18)
  {
LABEL_24:
    uint64_t v16 = FigSignalErrorAt();
    goto LABEL_25;
  }
  CFAllocatorRef v19 = CFGetAllocator(cf);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v19, 0, MEMORY[0x1E4F1D510]);
  *(void *)(DerivedStorage + 24) = Mutable;
  if (!Mutable)
  {
    uint64_t v21 = 4294955196;
    goto LABEL_19;
  }
  uint64_t v16 = FigRemakerCreateWithAsset(a1, a2, a3, a4, a5, (CFTypeRef *)(DerivedStorage + 16));
  if (v16)
  {
LABEL_25:
    uint64_t v21 = v16;
    goto LABEL_19;
  }
  CMNotificationCenterGetDefaultLocalCenter();
  uint64_t v21 = CMNotificationCenterAddListener();
  if (!v21)
  {
    *a6 = cf;
    CFTypeRef cf = 0;
  }
LABEL_19:
  if (v23) {
    CFRelease(v23);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v21;
}

uint64_t FigRemakerCreateQueuedWithURLs(const __CFAllocator *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const __CFURL *a16, const __CFDictionary *a17, const __CFDictionary *a18, _DWORD *a19, _DWORD *a20,void *a21)
{
  uint64_t v54 = 0;
  v55[0] = 0;
  FigKTraceInit();
  if (a2 && FigCFURLIsLocalResource() && a16 && remakerFamily_CFURLSchemeIsFile(a16) && a21)
  {
    if (a19) {
      *a19 = 0;
    }
    if (a20) {
      *a20 = 0;
    }
    Queueduint64_t BaseWithURLs = FigRemakerCreateQueuedBaseWithURLs(a1, a2, 0, a16, a15, a17, a18, v55);
    if (QueuedBaseWithURLs) {
      goto LABEL_34;
    }
    CFTypeRef v26 = v55[0];
    uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v27) {
      uint64_t v28 = v27;
    }
    else {
      uint64_t v28 = 0;
    }
    double v30 = *(uint64_t (**)(CFTypeRef, uint64_t *))(v28 + 72);
    if (v30)
    {
      Queueduint64_t BaseWithURLs = v30(v26, &v54);
      if (QueuedBaseWithURLs) {
        goto LABEL_34;
      }
      CFTypeRef v31 = v55[0];
      uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v32) {
        uint64_t v33 = v32;
      }
      else {
        uint64_t v33 = 0;
      }
      uint64_t v34 = *(uint64_t (**)(CFTypeRef, char *))(v33 + 80);
      if (v34)
      {
        Queueduint64_t BaseWithURLs = v34(v31, (char *)&v54 + 4);
        if (QueuedBaseWithURLs) {
          goto LABEL_34;
        }
        if ((*(unsigned char *)(a14 + 12) & 1) != 0
          && (*(unsigned char *)(a14 + 36) & 1) != 0
          && !*(void *)(a14 + 40)
          && (*(void *)(a14 + 24) & 0x8000000000000000) == 0)
        {
          uint64_t v35 = (uint64_t)v55[0];
          long long v36 = *(_OWORD *)(a14 + 16);
          *(_OWORD *)&range.start.xpc_object_t value = *(_OWORD *)a14;
          *(_OWORD *)&range.start.CMTimeEpoch epoch = v36;
          *(_OWORD *)&range.duration.CMTimeScale timescale = *(_OWORD *)(a14 + 32);
          CMTimeRangeGetEnd(&v53, &range);
          *(_OWORD *)&range.start.xpc_object_t value = *(_OWORD *)a14;
          range.start.CMTimeEpoch epoch = *(void *)(a14 + 16);
          Queueduint64_t BaseWithURLs = FigRemakerSetTimeRange(v35, (long long *)&range.start.value, (long long *)&v53.value);
          if (QueuedBaseWithURLs) {
            goto LABEL_34;
          }
        }
        uint64_t v38 = v54;
        uint64_t v37 = HIDWORD(v54);
        if (!v54)
        {
          Queueduint64_t BaseWithURLs = FigSignalErrorAt();
          goto LABEL_34;
        }
        if (!v54)
        {
LABEL_39:
          if (!v37)
          {
LABEL_56:
            uint64_t v42 = 0;
LABEL_57:
            *a21 = v55[0];
            return v42;
          }
          int v51 = 0;
          if (a8)
          {
            if (a8 == 1851876449)
            {
              CFDictionaryRef v44 = a20;
              if (!a20) {
                goto LABEL_56;
              }
              goto LABEL_55;
            }
            *(_OWORD *)&range.start.xpc_object_t value = *(_OWORD *)a13;
            range.start.CMTimeEpoch epoch = *(void *)(a13 + 16);
            uint64_t v45 = FigRemakerAddVideoTrack((uint64_t)v55[0], v37, a5, a6, a7, a8, a9, a10, a11, a12, (long long *)&range.start.value, (uint64_t)&v51);
          }
          else
          {
            uint64_t v45 = FigRemakerAddPassthroughTrack((uint64_t)v55[0], v37, (uint64_t)&v51);
          }
          uint64_t v42 = v45;
          if (v45) {
            int v46 = 6;
          }
          else {
            int v46 = 0;
          }
          CFDictionaryRef v44 = a20;
          if (a20 && !v45)
          {
LABEL_55:
            *CFDictionaryRef v44 = v51;
            goto LABEL_56;
          }
          if (v46 != 6) {
            goto LABEL_57;
          }
LABEL_45:
          if (v55[0]) {
            CFRelease(v55[0]);
          }
          return v42;
        }
        CFTypeRef v39 = v55[0];
        uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v41 = v40 ? v40 : 0;
        uint64_t v43 = *(uint64_t (**)(CFTypeRef, uint64_t, uint64_t, uint64_t, _DWORD *))(v41 + 88);
        if (v43)
        {
          Queueduint64_t BaseWithURLs = v43(v39, v38, a3, a4, a19);
          if (!QueuedBaseWithURLs)
          {
            uint64_t v37 = HIDWORD(v54);
            goto LABEL_39;
          }
LABEL_34:
          uint64_t v42 = QueuedBaseWithURLs;
          goto LABEL_45;
        }
      }
    }
    uint64_t v42 = 4294954514;
    goto LABEL_45;
  }

  return FigSignalErrorAt();
}

uint64_t FigRemakerSetTimeRange(uint64_t a1, long long *a2, long long *a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, long long *, long long *))(v7 + 48);
  if (!v8) {
    return 4294954514;
  }
  long long v12 = *a2;
  uint64_t v13 = *((void *)a2 + 2);
  long long v10 = *a3;
  uint64_t v11 = *((void *)a3 + 2);
  return v8(a1, &v12, &v10);
}

uint64_t FigRemakerAddVideoTrack(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, long long *a11, uint64_t a12)
{
  uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v20) {
    uint64_t v21 = v20;
  }
  else {
    uint64_t v21 = 0;
  }
  CFTypeRef v22 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, uint64_t))(v21 + 16);
  if (!v22) {
    return 4294954514;
  }
  long long v24 = *a11;
  uint64_t v25 = *((void *)a11 + 2);
  return v22(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, &v24, a12);
}

uint64_t FigRemakerAddPassthroughTrack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3);
}

void remakerQueue_removeRemakerFromQueue(const void *a1)
{
  MEMORY[0x19970EE10](&sCreateRemakerQueueMutexOnce, remakerQueue_createMutexAndArray);
  MEMORY[0x19970E910](sRemakerQueueMutex);
  if ((const void *)sActiveRemaker == a1) {
    sActiveRemaker = 0;
  }
  CFArrayRef v2 = (const __CFArray *)sRemakerWaitingQueue;
  v6.length = CFArrayGetCount((CFArrayRef)sRemakerWaitingQueue);
  v6.location = 0;
  FirstIndexOfBoolean Value = CFArrayGetFirstIndexOfValue(v2, v6, a1);
  if (FirstIndexOfValue != -1) {
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)sRemakerWaitingQueue, FirstIndexOfValue);
  }
  MEMORY[0x19970E930](sRemakerQueueMutex);
  MEMORY[0x19970EE10](&sCreateRemakerQueueMutexOnce, remakerQueue_createMutexAndArray);
  uint64_t v4 = sRemakerStartQueue;

  dispatch_async(v4, &__block_literal_global_54);
}

uint64_t remakerQueue_createMutexAndArray()
{
  sRemakerQueueMutedouble x = FigSimpleMutexCreate();
  sRemakerWaitingQueue = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0);
  uint64_t result = FigDispatchQueueCreateWithPriority();
  sRemakerStartQueue = result;
  return result;
}

void __remakerQueue_ensureWeHaveAnActiveRemaker_soon_block_invoke()
{
  MEMORY[0x19970E910](sRemakerQueueMutex);
  if (sActiveRemaker || CFArrayGetCount((CFArrayRef)sRemakerWaitingQueue) < 1) {
    goto LABEL_2;
  }
  CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)sRemakerWaitingQueue, 0);
  if (!ValueAtIndex)
  {
    sActiveRemaker = 0;
    CFArrayRemoveValueAtIndex((CFMutableArrayRef)sRemakerWaitingQueue, 0);
LABEL_2:
    JUMPOUT(0x19970E930);
  }
  uint64_t v1 = ValueAtIndex;
  CFRetain(ValueAtIndex);
  sActiveRemaker = (uint64_t)v1;
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)sRemakerWaitingQueue, 0);
  MEMORY[0x19970E930](sRemakerQueueMutex);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  unsigned int v94 = 0;
  uint64_t v4 = *(void *)(DerivedStorage + 8);
  if (v4) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  *(unsigned char *)(v3 + 49) = 1;
  uint64_t v90 = v4;
  CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(v3 + 24));
  if (Count < 1)
  {
    BOOL v6 = 0;
LABEL_74:
    uint64_t v59 = *(void *)(v3 + 16);
    uint64_t v60 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v60) {
      uint64_t v61 = v60;
    }
    else {
      uint64_t v61 = 0;
    }
    uint64_t v62 = v90;
    CFNumberRef v63 = *(uint64_t (**)(uint64_t))(v61 + 56);
    if (v63) {
      int flags = v63(v59);
    }
    else {
      int flags = -12782;
    }
    goto LABEL_82;
  }
  CFIndex v5 = 0;
  BOOL v6 = 1;
  while (1)
  {
    unsigned int v94 = 0;
    CFDictionaryRef v7 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v3 + 24), v5);
    Boolean Value = CFDictionaryGetValue(v7, @"Common_TrackType");
    if (CFEqual(Value, @"TrackType_AudioMixdownTrackWithPreset"))
    {
      uint64_t v9 = *(void *)(v3 + 16);
      value_low = CFDictionaryGetValue(v7, @"Audio_SourceAudioTrackArray");
      uint64_t v11 = CFDictionaryGetValue(v7, @"Audio_AudioPresetName");
      long long v12 = CFDictionaryGetValue(v7, @"Audio_AudioProcessingOptions");
      uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v13) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v17 = *(uint64_t (**)(uint64_t, const void *, const void *, const void *, unsigned int *))(v14 + 104);
      if (!v17) {
        goto LABEL_76;
      }
LABEL_25:
      int v20 = v17(v9, value_low, v11, v12, &v94);
      goto LABEL_26;
    }
    if (CFEqual(Value, @"TrackType_AudioTrackWithPreset"))
    {
      uint64_t v9 = *(void *)(v3 + 16);
      LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      value_low = (const void *)LODWORD(context.value);
      uint64_t v11 = CFDictionaryGetValue(v7, @"Audio_AudioPresetName");
      long long v12 = CFDictionaryGetValue(v7, @"Audio_AudioProcessingOptions");
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(uint64_t (**)(uint64_t, const void *, const void *, const void *, unsigned int *))(v16 + 88);
      if (!v17) {
        goto LABEL_76;
      }
      goto LABEL_25;
    }
    if (CFEqual(Value, @"TrackType_AudioTrack"))
    {
      uint64_t v18 = *(void *)(v3 + 16);
      LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      unsigned int v87 = context.value;
      CFDataRef v19 = (const __CFData *)CFDictionaryGetValue(v7, @"Audio_DestinationASBD");
      if (v19) {
        BytePtr = CFDataGetBytePtr(v19);
      }
      else {
        BytePtr = 0;
      }
      context.xpc_object_t value = 0;
      CFNumberRef v31 = (const __CFNumber *)CFDictionaryGetValue(v7, @"Audio_DestinationChannelLayoutSize");
      if (v31)
      {
        CFNumberGetValue(v31, kCFNumberSInt64Type, &context);
        CMTimeValue v32 = context.value;
      }
      else
      {
        CMTimeValue v32 = 0;
      }
      CFDataRef v33 = (const __CFData *)CFDictionaryGetValue(v7, @"Audio_DestinationChannelLayout");
      uint64_t v34 = v1;
      if (v33) {
        uint64_t v35 = CFDataGetBytePtr(v33);
      }
      else {
        uint64_t v35 = 0;
      }
      long long v36 = CFDictionaryGetValue(v7, @"Audio_AudioOptions");
      uint64_t v37 = CFDictionaryGetValue(v7, @"Audio_AudioProcessingOptions");
      uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v38) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = 0;
      }
      uint64_t v40 = *(uint64_t (**)(uint64_t, void, const UInt8 *, CMTimeValue, const UInt8 *, const void *, const void *, unsigned int *))(v39 + 8);
      if (!v40)
      {
        int flags = -12782;
        uint64_t v1 = v34;
        goto LABEL_77;
      }
      int v20 = v40(v18, v87, BytePtr, v32, v35, v36, v37, &v94);
      uint64_t v1 = v34;
      if (v20 != -12123) {
        goto LABEL_27;
      }
      goto LABEL_28;
    }
    if (CFEqual(Value, @"TrackType_VideoCompositionTrack"))
    {
      long long v88 = v1;
      uint64_t v23 = *(void *)(v3 + 16);
      CGRect v85 = CFDictionaryGetValue(v7, @"Video_SourceVideoTrackArray");
      BOOL v82 = CFDictionaryGetValue(v7, @"Video_SourceSampleDataTrackArray");
      CGPoint v80 = CFDictionaryGetValue(v7, @"Video_SourceVideoTrackWindows");
      uint64_t v78 = CFDictionaryGetValue(v7, @"Video_SourceSampleDataTrackWindows");
      long long v77 = CFDictionaryGetValue(v7, @"Video_VideoCompositor");
      uint64_t v76 = CFDictionaryGetValue(v7, @"Video_VideoCompositionInstructionArray");
      uint64_t v75 = CFDictionaryGetValue(v7, @"Video_AnimationRootLayer");
      LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      int v74 = context.value;
      int v73 = CFDictionaryGetValue(v7, @"Video_AnimationVideoLayers");
      uint64_t v72 = CFDictionaryGetValue(v7, @"Video_AnimationVideoTrackIDs");
      uint64_t v71 = CFDictionaryGetValue(v7, @"Video_AnimationRendererOptions");
      queuedRemaker_dictionaryGetFigTime(v7, &v93);
      LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      unsigned int v70 = context.value;
      LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      unsigned int v69 = context.value;
      LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      unsigned int v68 = context.value;
      LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      unsigned int v67 = context.value;
      LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      int v66 = context.value;
      double v65 = CFDictionaryGetValue(v7, @"Video_VideoScalingProperties");
      LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      FigCFDictionaryGetInt32IfPresent();
      int v24 = context.value;
      uint64_t v25 = CFDictionaryGetValue(v7, @"Video_VideoEncoderSpecification");
      CFTypeRef v26 = CFDictionaryGetValue(v7, @"Video_VideoCompressionProperties");
      uint64_t v27 = CFDictionaryGetValue(v7, @"Video_VideoProcessingOptions");
      uint64_t v28 = CFDictionaryGetValue(v7, @"Video_VideoCompositionProcessorProperties");
      uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v29) {
        uint64_t v30 = v29;
      }
      else {
        uint64_t v30 = 0;
      }
      CGRect v49 = *(uint64_t (**)(uint64_t, const void *, const void *, const void *, const void *, const void *, const void *, const void *, uint64_t, const void *, const void *, const void *, CMTime *, unint64_t, unint64_t, int, const void *, int, const void *, const void *, const void *, const void *, unsigned int *))(v30 + 112);
      if (!v49)
      {
        int flags = -12782;
        uint64_t v1 = v88;
        goto LABEL_77;
      }
      CMTime context = v93;
      LODWORD(v64) = v74;
      int v20 = v49(v23, v85, v82, v80, v78, v77, v76, v75, v64, v73, v72, v71, &context, __PAIR64__(v69, v70), __PAIR64__(v67, v68), v66, v65, v24, v25,
              v26,
              v27,
              v28,
              &v94);
      uint64_t v1 = v88;
      if (v20 != -12123) {
        goto LABEL_27;
      }
      goto LABEL_28;
    }
    if (!CFEqual(Value, @"TrackType_VideoTrack")) {
      break;
    }
    uint64_t v41 = v1;
    uint64_t v42 = *(void *)(v3 + 16);
    LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
    FigCFDictionaryGetInt32IfPresent();
    unsigned int v89 = context.value;
    LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
    FigCFDictionaryGetInt32IfPresent();
    unsigned int v86 = context.value;
    LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
    FigCFDictionaryGetInt32IfPresent();
    unsigned int v83 = context.value;
    int v81 = CFDictionaryGetValue(v7, @"Video_VideoScalingProperties");
    LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
    FigCFDictionaryGetInt32IfPresent();
    unsigned int v79 = context.value;
    uint64_t v43 = CFDictionaryGetValue(v7, @"Video_VideoEncoderSpecification");
    CFDictionaryRef v44 = CFDictionaryGetValue(v7, @"Video_VideoDecompressionProperties");
    uint64_t v45 = CFDictionaryGetValue(v7, @"Video_VideoCompressionProperties");
    int v46 = CFDictionaryGetValue(v7, @"Video_VideoProcessingOptions");
    queuedRemaker_dictionaryGetFigTime(v7, &v92);
    uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v47) {
      uint64_t v48 = v47;
    }
    else {
      uint64_t v48 = 0;
    }
    uint64_t v55 = *(uint64_t (**)(uint64_t, void, void, void, const void *, void, const void *, const void *, const void *, const void *, CMTime *, unsigned int *))(v48 + 16);
    if (!v55)
    {
      int flags = -12782;
      uint64_t v1 = v41;
      goto LABEL_77;
    }
    CMTime context = v92;
    int v20 = v55(v42, v89, v86, v83, v81, v79, v43, v44, v45, v46, &context, &v94);
    uint64_t v1 = v41;
    if (v20 != -12123) {
      goto LABEL_27;
    }
LABEL_28:
    FigCFDictionarySetInt32();
    CFDictionaryRef v22 = (const __CFDictionary *)CFDictionaryGetValue(v7, @"Common_FormatWriterTrackProperties");
    if (v94)
    {
      if (v22)
      {
        context.xpc_object_t value = *(void *)(v3 + 16);
        *(void *)&context.CMTimeScale timescale = v94;
        CFDictionaryApplyFunction(v22, (CFDictionaryApplierFunction)queuedRemaker_setPendingFormatWriterTrackProperty, &context);
        int flags = context.flags;
        if (context.flags) {
          goto LABEL_77;
        }
      }
    }
    BOOL v6 = ++v5 < Count;
    if (Count == v5) {
      goto LABEL_74;
    }
  }
  if (CFEqual(Value, @"TrackType_Passthrough"))
  {
    uint64_t v50 = *(void *)(v3 + 16);
    LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
    FigCFDictionaryGetInt32IfPresent();
    uint64_t v51 = LODWORD(context.value);
    int v52 = CFDictionaryGetValue(v7, @"Passthrough_Options");
    uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v53) {
      uint64_t v54 = v53;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, const void *, unsigned int *))(v54 + 120);
    if (!v58) {
      goto LABEL_76;
    }
    goto LABEL_68;
  }
  if (CFEqual(Value, @"TrackType_TemporalMetadata"))
  {
    uint64_t v50 = *(void *)(v3 + 16);
    LODWORD(context.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
    FigCFDictionaryGetInt32IfPresent();
    uint64_t v51 = LODWORD(context.value);
    int v52 = CFDictionaryGetValue(v7, @"TemporalMetadata_Options");
    uint64_t v56 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v56) {
      uint64_t v57 = v56;
    }
    else {
      uint64_t v57 = 0;
    }
    uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, const void *, unsigned int *))(v57 + 136);
    if (!v58)
    {
LABEL_76:
      int flags = -12782;
      goto LABEL_77;
    }
LABEL_68:
    int v20 = v58(v50, v51, v52, &v94);
LABEL_26:
    if (v20 == -12123) {
      goto LABEL_28;
    }
LABEL_27:
    int flags = v20;
    if (v20) {
      goto LABEL_77;
    }
    goto LABEL_28;
  }
  int flags = FigSignalErrorAt();
LABEL_77:
  uint64_t v62 = v90;
LABEL_82:
  if (v62) {
    MEMORY[0x19970E2B0](*(void *)(v3 + 8));
  }
  if (flags != 0 && v6)
  {
    remakerFamily_PostFailureNotificationIfError(*(const void **)(v3 + 16), 0, flags, 0, 0);
    remakerQueue_removeRemakerFromQueue(v1);
  }
  CFRelease(v1);
}

CMTime *queuedRemaker_dictionaryGetFigTime@<X0>(const __CFDictionary *a1@<X0>, CMTime *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&a2->xpc_object_t value = *MEMORY[0x1E4F1F9F8];
  a2->CMTimeEpoch epoch = *(void *)(v3 + 16);
  uint64_t result = (CMTime *)CFDictionaryGetValue(a1, @"Video_FrameDuration");
  if (result)
  {
    return CMTimeMakeFromDictionary(a2, (CFDictionaryRef)result);
  }
  return result;
}

uint64_t queuedRemaker_setPendingFormatWriterTrackProperty(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (!*((_DWORD *)a3 + 3))
  {
    uint64_t v4 = result;
    uint64_t v5 = *MEMORY[0x1E4F1D260] == a2 ? 0 : a2;
    uint64_t v6 = *a3;
    uint64_t v7 = *((unsigned int *)a3 + 2);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v10 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v9 = v10;
    uint64_t v11 = v10 ? v9 : 0;
    long long v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 40);
    if (!v12
      || ((uint64_t result = v12(v6, v7, v4, v5), *((_DWORD *)a3 + 3) = result, result != -12784)
        ? (BOOL v13 = result == -12630)
        : (BOOL v13 = 1),
          !v13 ? (BOOL v14 = result == -12782) : (BOOL v14 = 1),
          v14))
    {
      *((_DWORD *)a3 + 3) = 0;
    }
  }
  return result;
}

uint64_t queuedRemaker_Invalidate(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(unsigned char *)DerivedStorage)
  {
    uint64_t v3 = DerivedStorage;
    *(unsigned char *)uint64_t DerivedStorage = 1;
    uint64_t v4 = *(void *)(DerivedStorage + 8);
    if (v4) {
      MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
    }
    remakerQueue_removeRemakerFromQueue(a1);
    if (*(void *)(v3 + 16))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      CMNotificationCenterRemoveListener();
      uint64_t FigBaseObject = FigRemakerGetFigBaseObject(*(void *)(v3 + 16));
      if (FigBaseObject)
      {
        uint64_t v6 = FigBaseObject;
        uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v8 = v7 ? v7 : 0;
        uint64_t v9 = *(void (**)(uint64_t))(v8 + 24);
        if (v9) {
          v9(v6);
        }
      }
    }
    if (v4) {
      MEMORY[0x19970E2B0](*(void *)(v3 + 8));
    }
  }
  return 0;
}

void queuedRemaker_Finalize(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  queuedRemaker_Invalidate(a1);
  if (DerivedStorage[1])
  {
    DerivedStorage[1] = 0;
    FigSimpleMutexDestroy();
  }
  uint64_t v3 = (const void *)DerivedStorage[3];
  if (v3) {
    CFRelease(v3);
  }
  uint64_t v4 = (const void *)DerivedStorage[2];
  if (v4)
  {
    CFRelease(v4);
    DerivedStorage[2] = 0;
  }
  uint64_t v5 = (void *)DerivedStorage[5];
  if (v5)
  {
    os_release(v5);
    DerivedStorage[5] = 0;
  }
}

__CFString *queuedRemaker_CopyDebugDesc(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)DerivedStorage) {
    uint64_t v6 = " (invalidated)";
  }
  else {
    uint64_t v6 = "";
  }
  CFAllocatorRef v7 = CFGetAllocator(a1);
  CFStringAppendFormat(Mutable, 0, @"<FigRemakerQueued %p retainCount: %ld%s allocator: %p subremaker: %@>", a1, v5, v6, v7, *(void *)(DerivedStorage + 16));
  return Mutable;
}

uint64_t queuedRemaker_CopyProperty(uint64_t a1, const void *a2, uint64_t a3, CFNumberRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = DerivedStorage;
  uint64_t v9 = *(void *)(DerivedStorage + 8);
  if (v9) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v8 || !a2 || !a4)
  {
    uint64_t v14 = FigSignalErrorAt();
LABEL_14:
    uint64_t v15 = v14;
    if (!v9) {
      return v15;
    }
    goto LABEL_17;
  }
  if (CFEqual(@"Remaker_Progress", a2) && *(unsigned char *)(v8 + 48) && !*(unsigned char *)(v8 + 49))
  {
    int valuePtr = 0;
    uint64_t v15 = 0;
    *a4 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberIntType, &valuePtr);
    if (!v9) {
      return v15;
    }
    goto LABEL_17;
  }
  uint64_t FigBaseObject = FigRemakerGetFigBaseObject(*(void *)(v8 + 16));
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  BOOL v13 = *(uint64_t (**)(uint64_t, const void *, uint64_t, CFNumberRef *))(v12 + 48);
  if (v13)
  {
    uint64_t v14 = v13(FigBaseObject, a2, a3, a4);
    goto LABEL_14;
  }
  uint64_t v15 = 4294954514;
  if (v9) {
LABEL_17:
  }
    MEMORY[0x19970E2B0](*(void *)(v8 + 8));
  return v15;
}

uint64_t queuedRemaker_SetProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  uint64_t v7 = *(void *)(DerivedStorage + 8);
  if (v7) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v6 || !a2)
  {
    uint64_t v12 = FigSignalErrorAt();
LABEL_10:
    uint64_t v13 = v12;
    if (!v7) {
      return v13;
    }
    goto LABEL_13;
  }
  uint64_t FigBaseObject = FigRemakerGetFigBaseObject(*(void *)(v6 + 16));
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 56);
  if (v11)
  {
    uint64_t v12 = v11(FigBaseObject, a2, a3);
    goto LABEL_10;
  }
  uint64_t v13 = 4294954514;
  if (v7) {
LABEL_13:
  }
    MEMORY[0x19970E2B0](*(void *)(v6 + 8));
  return v13;
}

uint64_t queuedRemaker_AddAudioTrack(const void *a1, int a2, UInt8 *a3, CFIndex a4, UInt8 *a5, const void *a6, const void *a7, _DWORD *a8)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = DerivedStorage;
  uint64_t v18 = *(void *)(DerivedStorage + 8);
  if (v18) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (!*(unsigned char *)v17 && a2 && a3)
  {
    CFAllocatorRef v19 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v21 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"Common_TrackType", @"TrackType_AudioTrack");
      FigCFDictionarySetInt32();
      queuedRemaker_dictionarySetData(v21, @"Audio_DestinationASBD", a3, 40);
      CFIndex valuePtr = a4;
      CFNumberRef v22 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
      CFDictionarySetValue(v21, @"Audio_DestinationChannelLayoutSize", v22);
      CFRelease(v22);
      if (a4 && a5) {
        queuedRemaker_dictionarySetData(v21, @"Audio_DestinationChannelLayout", a5, a4);
      }
      if (a6) {
        CFDictionarySetValue(v21, @"Audio_AudioOptions", a6);
      }
      if (a7) {
        CFDictionarySetValue(v21, @"Audio_AudioProcessingOptions", a7);
      }
      FigCFDictionarySetInt32();
      if (a8) {
        *a8 = *(_DWORD *)(v17 + 32);
      }
      ++*(_DWORD *)(v17 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v17 + 24), v21);
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v23 = 4294955196;
    }
  }
  else
  {
    uint64_t v23 = FigSignalErrorAt();
    uint64_t v21 = 0;
  }
  if (v18) {
    MEMORY[0x19970E2B0](*(void *)(v17 + 8));
  }
  if (v21) {
    CFRelease(v21);
  }
  return v23;
}

uint64_t queuedRemaker_AddVideoTrack(const void *a1, int a2, int a3, int a4, const void *a5, int a6, const void *a7, const void *a8, void *value, void *a10, uint64_t a11, _DWORD *a12)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v18 = DerivedStorage;
  uint64_t v19 = *(void *)(DerivedStorage + 8);
  if (v19) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v18 || !a2)
  {
    uint64_t v23 = FigSignalErrorAt();
    CFNumberRef v22 = 0;
  }
  else
  {
    CFAllocatorRef v20 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v20, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFNumberRef v22 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"Common_TrackType", @"TrackType_VideoTrack");
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (a5) {
        CFDictionarySetValue(v22, @"Video_VideoScalingProperties", a5);
      }
      FigCFDictionarySetInt32();
      if (a7) {
        CFDictionarySetValue(v22, @"Video_VideoEncoderSpecification", a7);
      }
      if (a8) {
        CFDictionarySetValue(v22, @"Video_VideoDecompressionProperties", a8);
      }
      if (value) {
        CFDictionarySetValue(v22, @"Video_VideoCompressionProperties", value);
      }
      if (a10) {
        CFDictionarySetValue(v22, @"Video_VideoProcessingOptions", a10);
      }
      FigCFDictionarySetCMTime();
      FigCFDictionarySetInt32();
      if (a12) {
        *a12 = *(_DWORD *)(v18 + 32);
      }
      ++*(_DWORD *)(v18 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v18 + 24), v22);
      uint64_t v23 = 0;
    }
    else
    {
      uint64_t v23 = 4294955196;
    }
  }
  if (v19) {
    MEMORY[0x19970E2B0](*(void *)(v18 + 8));
  }
  if (v22) {
    CFRelease(v22);
  }
  return v23;
}

uint64_t queuedRemaker_AddPassthroughTrack(const void *a1, int a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = DerivedStorage;
  uint64_t v8 = *(void *)(DerivedStorage + 8);
  if (v8) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v7 || !a2)
  {
    uint64_t v12 = FigSignalErrorAt();
    uint64_t v11 = 0;
  }
  else
  {
    CFAllocatorRef v9 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v9, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v11 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"Common_TrackType", @"TrackType_Passthrough");
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (a3) {
        *a3 = *(_DWORD *)(v7 + 32);
      }
      ++*(_DWORD *)(v7 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v7 + 24), v11);
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = 4294955196;
    }
  }
  if (v8) {
    MEMORY[0x19970E2B0](*(void *)(v7 + 8));
  }
  if (v11) {
    CFRelease(v11);
  }
  return v12;
}

uint64_t queuedRemaker_SetFormatWriterProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  uint64_t v7 = *(void *)(DerivedStorage + 8);
  if (v7) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v6)
  {
    uint64_t v12 = FigSignalErrorAt();
LABEL_9:
    uint64_t v13 = v12;
    if (!v7) {
      return v13;
    }
    goto LABEL_12;
  }
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 32);
  if (v11)
  {
    uint64_t v12 = v11(v8, a2, a3);
    goto LABEL_9;
  }
  uint64_t v13 = 4294954514;
  if (v7) {
LABEL_12:
  }
    MEMORY[0x19970E2B0](*(void *)(v6 + 8));
  return v13;
}

uint64_t queuedRemaker_SetFormatWriterTrackProperty(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  uint64_t v7 = *(void *)(DerivedStorage + 8);
  if (v7) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (!*(unsigned char *)v6 && a3 && CFArrayGetCount(*(CFArrayRef *)(v6 + 24)) > a2 - 12301 && a2 > 12300)
  {
    CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 24), a2 - 12301);
    FigCFDictionaryGetInt32IfPresent();
  }
  uint64_t v9 = FigSignalErrorAt();
  if (v7) {
    MEMORY[0x19970E2B0](*(void *)(v6 + 8));
  }
  return v9;
}

uint64_t queuedRemaker_SetTimeRange(uint64_t a1, CMTime *a2, CMTime *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  uint64_t v7 = *(void *)(DerivedStorage + 8);
  if (v7) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v6
    || (a2->flags & 0x1D) != 1
    || (a3->flags & 0x1D) == 1 && (time1 = *a2, CMTime time2 = *a3, (CMTimeCompare(&time1, &time2) & 0x80000000) == 0))
  {
    uint64_t v12 = FigSignalErrorAt();
LABEL_12:
    uint64_t v13 = v12;
    if (!v7) {
      return v13;
    }
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)(v6 + 16);
  *(_OWORD *)&v16.xpc_object_t value = *(_OWORD *)&a2->value;
  v16.CMTimeEpoch epoch = a2->epoch;
  *(_OWORD *)&v15.xpc_object_t value = *(_OWORD *)&a3->value;
  v15.CMTimeEpoch epoch = a3->epoch;
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, CMTime *, CMTime *))(v10 + 48);
  if (v11)
  {
    CMTime time1 = v16;
    CMTime time2 = v15;
    uint64_t v12 = v11(v8, &time1, &time2);
    goto LABEL_12;
  }
  uint64_t v13 = 4294954514;
  if (v7) {
LABEL_15:
  }
    MEMORY[0x19970E2B0](*(void *)(v6 + 8));
  return v13;
}

uint64_t queuedRemaker_StartOutput(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v3 = DerivedStorage;
  uint64_t v4 = *(void *)(DerivedStorage + 8);
  if (v4) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v3 || *(unsigned char *)(v3 + 48))
  {
    uint64_t v5 = FigSignalErrorAt();
    if (!v4) {
      return v5;
    }
    goto LABEL_8;
  }
  MEMORY[0x19970EE10](&sCreateRemakerQueueMutexOnce, remakerQueue_createMutexAndArray);
  MEMORY[0x19970E910](sRemakerQueueMutex);
  CFArrayAppendValue((CFMutableArrayRef)sRemakerWaitingQueue, a1);
  MEMORY[0x19970E930](sRemakerQueueMutex);
  MEMORY[0x19970EE10](&sCreateRemakerQueueMutexOnce, remakerQueue_createMutexAndArray);
  dispatch_async((dispatch_queue_t)sRemakerStartQueue, &__block_literal_global_54);
  *(unsigned char *)(v3 + 48) = 1;
  if (!*(unsigned char *)(v3 + 49))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  uint64_t v5 = 0;
  if (v4) {
LABEL_8:
  }
    MEMORY[0x19970E2B0](*(void *)(v3 + 8));
  return v5;
}

uint64_t queuedRemaker_EstimateMaxSegmentDurationForFileSize(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  uint64_t v7 = *(void *)(DerivedStorage + 8);
  if (v7) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v6)
  {
    uint64_t v12 = FigSignalErrorAt();
LABEL_9:
    uint64_t v13 = v12;
    if (!v7) {
      return v13;
    }
    goto LABEL_12;
  }
  uint64_t v8 = *(void *)(v6 + 16);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 64);
  if (v11)
  {
    uint64_t v12 = v11(v8, a2, a3);
    goto LABEL_9;
  }
  uint64_t v13 = 4294954514;
  if (v7) {
LABEL_12:
  }
    MEMORY[0x19970E2B0](*(void *)(v6 + 8));
  return v13;
}

uint64_t queuedRemaker_GetDefaultSourceAudioTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = *(void *)(DerivedStorage + 8);
  if (v5) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v4)
  {
    uint64_t v10 = FigSignalErrorAt();
LABEL_9:
    uint64_t v11 = v10;
    if (!v5) {
      return v11;
    }
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 72);
  if (v9)
  {
    uint64_t v10 = v9(v6, a2);
    goto LABEL_9;
  }
  uint64_t v11 = 4294954514;
  if (v5) {
LABEL_12:
  }
    MEMORY[0x19970E2B0](*(void *)(v4 + 8));
  return v11;
}

uint64_t queuedRemaker_GetDefaultSourceVideoTrack(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  uint64_t v5 = *(void *)(DerivedStorage + 8);
  if (v5) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v4)
  {
    uint64_t v10 = FigSignalErrorAt();
LABEL_9:
    uint64_t v11 = v10;
    if (!v5) {
      return v11;
    }
    goto LABEL_12;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 80);
  if (v9)
  {
    uint64_t v10 = v9(v6, a2);
    goto LABEL_9;
  }
  uint64_t v11 = 4294954514;
  if (v5) {
LABEL_12:
  }
    MEMORY[0x19970E2B0](*(void *)(v4 + 8));
  return v11;
}

uint64_t queuedRemaker_AddAudioTrackWithPreset(const void *a1, int a2, const void *a3, const void *a4, _DWORD *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = DerivedStorage;
  uint64_t v12 = *(void *)(DerivedStorage + 8);
  if (v12) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v11 || !a2)
  {
    uint64_t v16 = FigSignalErrorAt();
    CMTime v15 = 0;
  }
  else
  {
    CFAllocatorRef v13 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CMTime v15 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"Common_TrackType", @"TrackType_AudioTrackWithPreset");
      FigCFDictionarySetInt32();
      if (a3) {
        CFDictionaryAddValue(v15, @"Audio_AudioPresetName", a3);
      }
      if (a4) {
        CFDictionaryAddValue(v15, @"Audio_AudioProcessingOptions", a4);
      }
      FigCFDictionarySetInt32();
      if (a5) {
        *a5 = *(_DWORD *)(v11 + 32);
      }
      ++*(_DWORD *)(v11 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 24), v15);
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = 4294955196;
    }
  }
  if (v12) {
    MEMORY[0x19970E2B0](*(void *)(v11 + 8));
  }
  if (v15) {
    CFRelease(v15);
  }
  return v16;
}

uint64_t queuedRemaker_AddAudioMixdownTrackWithPreset(const void *a1, const void *a2, const void *a3, const void *a4, _DWORD *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v11 = DerivedStorage;
  uint64_t v12 = *(void *)(DerivedStorage + 8);
  if (v12) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v11 || !a2)
  {
    uint64_t v16 = FigSignalErrorAt();
    CMTime v15 = 0;
  }
  else
  {
    CFAllocatorRef v13 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v13, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CMTime v15 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"Common_TrackType", @"TrackType_AudioMixdownTrackWithPreset");
      CFDictionaryAddValue(v15, @"Audio_SourceAudioTrackArray", a2);
      if (a3) {
        CFDictionaryAddValue(v15, @"Audio_AudioPresetName", a3);
      }
      if (a4) {
        CFDictionaryAddValue(v15, @"Audio_AudioProcessingOptions", a4);
      }
      FigCFDictionarySetInt32();
      if (a5) {
        *a5 = *(_DWORD *)(v11 + 32);
      }
      ++*(_DWORD *)(v11 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v11 + 24), v15);
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v16 = 4294955196;
    }
  }
  if (v12) {
    MEMORY[0x19970E2B0](*(void *)(v11 + 8));
  }
  if (v15) {
    CFRelease(v15);
  }
  return v16;
}

uint64_t queuedRemaker_AddVideoCompositionTrack(const void *a1, const void *a2, int a3, int a4, int a5, const void *a6, const void *a7, const void *a8, int a9, const void *a10, const void *a11, const void *a12, uint64_t a13, int a14, int a15, int a16, int a17, int a18, const void *a19, int a20,const void *a21,const void *a22,void *value,const void *a24,_DWORD *a25)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v31 = DerivedStorage;
  uint64_t v32 = *(void *)(DerivedStorage + 8);
  if (v32) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  uint64_t v38 = v32;
  if (*(unsigned char *)v31 || !a2)
  {
    uint64_t v36 = FigSignalErrorAt();
    uint64_t v35 = 0;
  }
  else
  {
    CFAllocatorRef v33 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v33, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v35 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"Common_TrackType", @"TrackType_VideoCompositionTrack");
      CFDictionarySetValue(v35, @"Video_SourceVideoTrackArray", a2);
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      FigCFDictionarySetValue();
      if (a6) {
        CFDictionarySetValue(v35, @"Video_VideoCompositor", a6);
      }
      if (a7) {
        CFDictionarySetValue(v35, @"Video_VideoCompositionInstructionArray", a7);
      }
      if (a8) {
        CFDictionarySetValue(v35, @"Video_AnimationRootLayer", a8);
      }
      FigCFDictionarySetInt32();
      if (a10) {
        CFDictionarySetValue(v35, @"Video_AnimationVideoLayers", a10);
      }
      if (a11) {
        CFDictionarySetValue(v35, @"Video_AnimationVideoTrackIDs", a11);
      }
      if (a12) {
        CFDictionarySetValue(v35, @"Video_AnimationRendererOptions", a12);
      }
      FigCFDictionarySetCMTime();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      if (a19) {
        CFDictionarySetValue(v35, @"Video_VideoScalingProperties", a19);
      }
      FigCFDictionarySetInt32();
      if (a21) {
        CFDictionarySetValue(v35, @"Video_VideoEncoderSpecification", a21);
      }
      if (a22) {
        CFDictionarySetValue(v35, @"Video_VideoCompressionProperties", a22);
      }
      if (value) {
        CFDictionarySetValue(v35, @"Video_VideoProcessingOptions", value);
      }
      if (a24) {
        CFDictionarySetValue(v35, @"Video_VideoCompositionProcessorProperties", a24);
      }
      FigCFDictionarySetInt32();
      if (a25) {
        *a25 = *(_DWORD *)(v31 + 32);
      }
      ++*(_DWORD *)(v31 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v31 + 24), v35);
      uint64_t v36 = 0;
    }
    else
    {
      uint64_t v36 = 4294955196;
    }
  }
  if (v38) {
    MEMORY[0x19970E2B0](*(void *)(v31 + 8));
  }
  if (v35) {
    CFRelease(v35);
  }
  return v36;
}

uint64_t queuedRemaker_AddPassthroughTrackWithOptions(const void *a1, int a2, const void *a3, _DWORD *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = DerivedStorage;
  uint64_t v10 = *(void *)(DerivedStorage + 8);
  if (v10) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v9 || !a2)
  {
    uint64_t v14 = FigSignalErrorAt();
    CFAllocatorRef v13 = 0;
  }
  else
  {
    CFAllocatorRef v11 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    CFAllocatorRef v13 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"Common_TrackType", @"TrackType_Passthrough");
      FigCFDictionarySetInt32();
      if (a3) {
        CFDictionarySetValue(v13, @"Passthrough_Options", a3);
      }
      FigCFDictionarySetInt32();
      if (a4) {
        *a4 = *(_DWORD *)(v9 + 32);
      }
      ++*(_DWORD *)(v9 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v9 + 24), v13);
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 4294955196;
    }
  }
  if (v10) {
    MEMORY[0x19970E2B0](*(void *)(v9 + 8));
  }
  if (v13) {
    CFRelease(v13);
  }
  return v14;
}

uint64_t queuedRemaker_CanPerformFastFrameRateConversion(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  uint64_t v7 = *(void *)(DerivedStorage + 8);
  if (v7) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v6)
  {
    uint64_t v12 = FigSignalErrorAt();
LABEL_9:
    uint64_t v13 = v12;
    if (!v7) {
      return v13;
    }
    goto LABEL_12;
  }
  uint64_t v8 = *(void *)(v6 + 16);
  long long v15 = *a3;
  uint64_t v16 = *((void *)a3 + 2);
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  CFAllocatorRef v11 = *(uint64_t (**)(uint64_t, uint64_t, long long *))(v10 + 128);
  if (v11)
  {
    long long v17 = v15;
    uint64_t v18 = v16;
    uint64_t v12 = v11(v8, a2, &v17);
    goto LABEL_9;
  }
  uint64_t v13 = 4294954514;
  if (v7) {
LABEL_12:
  }
    MEMORY[0x19970E2B0](*(void *)(v6 + 8));
  return v13;
}

uint64_t queuedRemaker_AddTemporaMetadataTrackWithOptions(const void *a1, int a2, const void *a3, _DWORD *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v9 = DerivedStorage;
  uint64_t v10 = *(void *)(DerivedStorage + 8);
  if (v10) {
    MEMORY[0x19970E290](*(void *)(DerivedStorage + 8));
  }
  if (*(unsigned char *)v9 || !a2)
  {
    uint64_t v14 = FigSignalErrorAt();
    uint64_t v13 = 0;
  }
  else
  {
    CFAllocatorRef v11 = CFGetAllocator(a1);
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(v11, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v13 = Mutable;
    if (Mutable)
    {
      CFDictionarySetValue(Mutable, @"Common_TrackType", @"TrackType_TemporalMetadata");
      FigCFDictionarySetInt32();
      if (a3) {
        CFDictionarySetValue(v13, @"TemporalMetadata_Options", a3);
      }
      FigCFDictionarySetInt32();
      if (a4) {
        *a4 = *(_DWORD *)(v9 + 32);
      }
      ++*(_DWORD *)(v9 + 32);
      CFArrayAppendValue(*(CFMutableArrayRef *)(v9 + 24), v13);
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 4294955196;
    }
  }
  if (v10) {
    MEMORY[0x19970E2B0](*(void *)(v9 + 8));
  }
  if (v13) {
    CFRelease(v13);
  }
  return v14;
}

void queuedRemaker_dictionarySetData(__CFDictionary *a1, const void *a2, UInt8 *bytes, CFIndex length)
{
  CFDataRef v6 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], bytes, length);
  CFDictionarySetValue(a1, a2, v6);

  CFRelease(v6);
}

uint64_t FigTTMLExtensionsCreate(const __CFAllocator *a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    FigTTMLNodeGetClassID();
    uint64_t v8 = CMDerivedObjectCreate();
    if (!v8)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = FigTTMLInitializeNodeBaseStorage(DerivedStorage, (long long *)a3);
      if (!v8)
      {
        uint64_t v8 = FigTTMLAddCurrentElementAttributesToDictionary(a2, *(__CFDictionary **)(DerivedStorage + 24));
        if (!v8)
        {
          CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, MEMORY[0x1E4F1D510]);
          *(void *)(DerivedStorage + 136) = Mutable;
          if (Mutable)
          {
            *(void *)a3 = 0;
            *(void *)(a3 + 8) = 0;
            uint64_t v11 = FigTTMLParseNode(a2, (uint64_t (*)(uint64_t, uint64_t *, CFTypeRef *))figTTMLExtensionsConsumeChildNode, (uint64_t *)a3);
            if (!v11) {
              *a4 = 0;
            }
            return v11;
          }
          return FigSignalErrorAt();
        }
      }
    }
    return v8;
  }

  return FigSignalErrorAt();
}

uint64_t figTTMLExtensionsConsumeChildNode(uint64_t a1, CFTypeRef *a2, void **a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v13 = 0;
  xpc_object_t value = 0;
  CFTypeRef cf = 0;
  uint64_t v7 = FigTTMLGetLibXMLAccess();
  if (!v7)
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  if ((*(unsigned int (**)(uint64_t))(v7 + 72))(a1) != 1) {
    goto LABEL_8;
  }
  uint64_t v8 = FigTTMLCopyNamespaceAndLocalNameOfCurrentNode(a1, (const char **)&v13, (CFStringRef *)&cf);
  if (v8) {
    goto LABEL_18;
  }
  if (FigCFEqual() && FigCFEqual())
  {
    CFAllocatorRef v9 = CFGetAllocator(*a2);
    uint64_t v8 = FigTTMLExtensionCreate(v9, a1, (long long *)a2, &value);
    if (!v8)
    {
      CFArrayAppendValue(*(CFMutableArrayRef *)(DerivedStorage + 136), value);
      goto LABEL_9;
    }
  }
  else
  {
LABEL_8:
    uint64_t v8 = FigTTMLSkipNode(a1, (uint64_t *)a2, *(__CFArray **)(DerivedStorage + 128));
    if (!v8)
    {
LABEL_9:
      uint64_t v10 = 0;
      if (a3)
      {
        *a3 = value;
        xpc_object_t value = 0;
      }
      goto LABEL_11;
    }
  }
LABEL_18:
  uint64_t v10 = v8;
LABEL_11:
  if (cf) {
    CFRelease(cf);
  }
LABEL_13:
  if (v13) {
    CFRelease(v13);
  }
  if (value) {
    CFRelease(value);
  }
  return v10;
}

void figTTMLExtensions_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(const void **)(DerivedStorage + 136);
  if (v1) {
    CFRelease(v1);
  }

  FigTTMLReleaseNodeBaseStorage(DerivedStorage);
}

CFStringRef figTTMLExtensions_CopyDebugDesc()
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v0 = (const void *)FigCFCopyCompactDescription();
  CFStringRef v1 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"extensions: %@", v0);
  if (v0) {
    CFRelease(v0);
  }
  return v1;
}

uint64_t figTTMLExtensions_CopyChildNodeArray(const void *a1, __CFArray **a2)
{
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v3, 0, MEMORY[0x1E4F1D510]);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFArrayRef v6 = *(const __CFArray **)(DerivedStorage + 136);
    if (v6) {
      v7.length = CFArrayGetCount(*(CFArrayRef *)(DerivedStorage + 136));
    }
    else {
      v7.length = 0;
    }
    v7.location = 0;
    CFArrayAppendArray(Mutable, v6, v7);
    uint64_t v8 = 0;
    *a2 = Mutable;
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
    if (Mutable) {
      CFRelease(Mutable);
    }
  }
  return v8;
}

uint64_t figTTMLExtensions_GetNodeType(uint64_t a1, _DWORD *a2)
{
  if (!a2) {
    return FigSignalErrorAt();
  }
  *a2 = 17;
  return 0;
}

uint64_t FigWebVTTFormatReaderCreateFromStream(const void *a1, uint64_t a2, void *a3)
{
  if (a1)
  {
    FigFormatReaderGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (v5) {
      return v5;
    }
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (sRegisterWebVTTInfoTypeOnce != -1) {
      dispatch_once_f(&sRegisterWebVTTInfoTypeOnce, 0, (dispatch_function_t)RegisterWebVTTInfoType);
    }
    uint64_t Instance = _CFRuntimeCreateInstance();
    if (!Instance)
    {
      uint64_t v22 = FigSignalErrorAt();
LABEL_21:
      if (!v22)
      {
        int v24 = *(const void **)DerivedStorage;
        v31.xpc_object_t value = 0;
        FigTrackReaderGetClassID();
        uint64_t v25 = CMDerivedObjectCreate();
        if (v25)
        {
          return v25;
        }
        else
        {
          CFTypeRef v26 = (void *)CMBaseObjectGetDerivedStorage();
          if (v24) {
            CFTypeRef v27 = CFRetain(v24);
          }
          else {
            CFTypeRef v27 = 0;
          }
          uint64_t v22 = 0;
          *CFTypeRef v26 = v27;
          *(void *)(DerivedStorage + 8) = v31.value;
          *a3 = 0;
        }
      }
      return v22;
    }
    uint64_t v8 = Instance;
    uint64_t v9 = FigSimpleMutexCreate();
    *(void *)(v8 + 16) = v9;
    if (v9)
    {
      *(void *)(v8 + 24) = CFRetain(a1);
      *(_DWORD *)(v8 + 32) = 1000;
      CMTimeMake(&v31, 0, 1000);
      *(_OWORD *)(v8 + 120) = *(_OWORD *)&v31.value;
      uint64_t v10 = (long long *)MEMORY[0x1E4F1FA48];
      *(void *)(v8 + 136) = v31.epoch;
      long long v30 = *v10;
      *(_OWORD *)(v8 + 148) = *v10;
      uint64_t v11 = *((void *)v10 + 2);
      *(void *)(v8 + 164) = v11;
      int v12 = *(_DWORD *)(v8 + 32);
      CFTypeRef v13 = (char *)malloc_type_calloc(1uLL, 0x38uLL, 0x1060040BA3AC965uLL);
      if (v13
        && ((CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80]) == 0
          ? (CFTypeRef v15 = 0)
          : (CFTypeRef v15 = CFRetain((CFTypeRef)*MEMORY[0x1E4F1CF80])),
            *(void *)CFTypeRef v13 = v15,
            CFMutableArrayRef Mutable = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]),
            (*((void *)v13 + 6) = Mutable) != 0))
      {
        *((_DWORD *)v13 + 2) = v12;
        *(_OWORD *)(v13 + 12) = v30;
        *(void *)(v13 + 28) = v11;
        *((void *)v13 + 5) = 0;
        *(void *)(v8 + 40) = v13;
      }
      else
      {
        uint64_t v29 = FigSignalErrorAt();
        if (v29)
        {
          uint64_t v22 = v29;
          TimelineCache_Destroy((CFTypeRef *)v13);
LABEL_32:
          CFRelease((CFTypeRef)v8);
          goto LABEL_21;
        }
      }
      uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
      uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v18) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      CFAllocatorRef v20 = *(void (**)(uint64_t, uint64_t, void))(v19 + 56);
      if (v20) {
        v20(CMBaseObject, 0x1EE5525F8, *MEMORY[0x1E4F1CFD0]);
      }
      uint64_t v21 = WebVTTParserCreate(v8, (uint64_t)wvtt_headerCallback, (uint64_t)wvtt_sampleCallback, 1, (void *)(v8 + 96));
      if (v21)
      {
LABEL_31:
        uint64_t v22 = v21;
        goto LABEL_32;
      }
      WebVTTParserSetSampleBufferMediaType(*(void *)(v8 + 96), 1952807028);
      uint64_t v22 = WebVTTParserSetSourceLabel(*(void *)(v8 + 96), "webvtt_fr-", 1, "-0");
      uint64_t v23 = FigSimpleMutexCreate();
      *(void *)(v8 + 104) = v23;
      if (v23)
      {
        *(void *)uint64_t DerivedStorage = v8;
        goto LABEL_21;
      }
    }
    uint64_t v21 = FigSignalErrorAt();
    goto LABEL_31;
  }

  return FigSignalErrorAt();
}

void WebVTTFormatReaderFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFStringRef v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

__CFString *WebVTTFormatReaderCopyDebugDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFArrayRef v2 = *(const void **)(*(void *)DerivedStorage + 24);
  if (v2)
  {
    CFStringRef v3 = CFCopyDescription(v2);
    CFStringAppendFormat(Mutable, 0, @"\tWebVTTFormatReader: stream<%@>", v3);
    if (v3) {
      CFRelease(v3);
    }
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, @"\tWebVTTFormatReader: stream<%@>", 0);
  }
  return Mutable;
}

uint64_t WebVTTFormatReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(void *)DerivedStorage;
  MEMORY[0x19970E910](*(void *)(*(void *)DerivedStorage + 16));
  if (!a4) {
    goto LABEL_26;
  }
  *a4 = 0;
  if (!CFEqual(a2, @"Duration") && !CFEqual(a2, @"NominalDuration"))
  {
    if (CFEqual(a2, @"Timescale"))
    {
      LODWORD(valuePtr.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 1000;
      CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberType v13 = kCFNumberSInt32Type;
LABEL_11:
      IdentityMatrixCFArradouble y = CFNumberCreate(v12, v13, &valuePtr);
LABEL_15:
      uint64_t IsParsed = 0;
LABEL_16:
      *a4 = IdentityMatrixCFArray;
      goto LABEL_17;
    }
    if (CFEqual(a2, @"Identifier"))
    {
      CFTypeRef v15 = (CFTypeRef *)kFigFormatReaderIdentifier_WebVTT;
    }
    else
    {
      if (CFEqual(a2, @"AccurateDurationIsKnown"))
      {
        uint64_t IsParsed = EnsureWebVTTFileIsParsed(v8);
        if (IsParsed) {
          goto LABEL_17;
        }
        IdentityMatrixCFArradouble y = (const __CFDictionary *)CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
        goto LABEL_16;
      }
      if (!CFEqual(a2, @"SampleCursorTimeAccuracyIsExact"))
      {
        if (!CFEqual(a2, @"PreferredRate") && !CFEqual(a2, @"PreferredVolume"))
        {
          if (!CFEqual(a2, @"MovieMatrix"))
          {
            uint64_t IsParsed = 4294954512;
            goto LABEL_17;
          }
          IdentityMatrixCFArradouble y = wvtt_CreateIdentityMatrixCFArray(a3);
          goto LABEL_15;
        }
        LODWORD(valuePtr.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 1065353216;
        CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        CFNumberType v13 = kCFNumberFloat32Type;
        goto LABEL_11;
      }
      CFTypeRef v15 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
    }
    IdentityMatrixCFArradouble y = (const __CFDictionary *)CFRetain(*v15);
    goto LABEL_15;
  }
  if (!EnsureWebVTTFileIsParsed(v8))
  {
    uint64_t v10 = *(void *)(v8 + 40);
    if (v10)
    {
      CMTime valuePtr = *(CMTime *)(v10 + 12);
      CMTime v17 = valuePtr;
      CFDictionaryRef v11 = CMTimeCopyAsDictionary(&v17, a3);
      *a4 = v11;
      if (v11)
      {
        uint64_t IsParsed = 0;
        goto LABEL_17;
      }
LABEL_26:
      uint64_t IsParsed = FigSignalErrorAt();
      goto LABEL_17;
    }
  }
  uint64_t IsParsed = 4294954513;
LABEL_17:
  MEMORY[0x19970E930](*(void *)(v8 + 16));
  return IsParsed;
}

uint64_t EnsureWebVTTFileIsParsed(uint64_t a1)
{
  MEMORY[0x19970E910](*(void *)(a1 + 104));
  if (*(unsigned char *)(a1 + 112)) {
    goto LABEL_30;
  }
  *(_DWORD *)(a1 + 116) = 0;
  uint64_t v20 = -1;
  CMBlockBufferRef theBuffer = 0;
  CFNumberRef number = 0;
  if (!*(void *)(a1 + 24) || !*(void *)(a1 + 96))
  {
    int v14 = FigSignalErrorAt();
    goto LABEL_32;
  }
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v3) {
    uint64_t v4 = v3;
  }
  else {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, void, CFNumberRef *))(v4 + 48);
  if (!v5) {
    goto LABEL_26;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  int v7 = v5(CMBaseObject, *MEMORY[0x1E4F1EC50], *MEMORY[0x1E4F1CF80], &number);
  if (v7) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = number == 0;
  }
  if (!v8)
  {
    CFNumberGetValue(number, kCFNumberSInt64Type, (void *)(a1 + 64));
    CFRelease(number);
    *(_DWORD *)(a1 + 56) = 1;
    uint64_t v9 = *(void *)(a1 + 24);
    uint64_t v10 = *(void *)(a1 + 64);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    CFNumberType v13 = *(uint64_t (**)(uint64_t, uint64_t, void, CMBlockBufferRef *, uint64_t *))(v12 + 32);
    if (v13)
    {
      int v14 = v13(v9, v10, 0, &theBuffer, &v20);
      if (!v14)
      {
        int IsRangeContiguous = CMBlockBufferIsRangeContiguous(theBuffer, 0, 0);
        uint64_t v16 = theBuffer;
        if (!IsRangeContiguous)
        {
          CMBlockBufferRef v18 = 0;
          int v14 = CMBlockBufferCreateContiguous(v6, theBuffer, v6, 0, 0, 0, 0, &v18);
          if (v14) {
            goto LABEL_32;
          }
          if (theBuffer) {
            CFRelease(theBuffer);
          }
          uint64_t v16 = v18;
          CMBlockBufferRef theBuffer = v18;
        }
        int v14 = WebVTTParserParseBlockBuffer(*(void *)(a1 + 96), v16);
        if (!v14)
        {
          int v14 = WebVTTParserFlush(*(void *)(a1 + 96), 1, 0);
          if (!v14)
          {
            if (*(void *)(a1 + 48))
            {
              int v7 = 0;
              goto LABEL_27;
            }
            int v14 = WebVTTParserCopyFormatDescription(*(void *)(a1 + 96), (void *)(a1 + 48));
          }
        }
      }
LABEL_32:
      int v7 = v14;
      goto LABEL_27;
    }
LABEL_26:
    int v7 = -12782;
  }
LABEL_27:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  *(_DWORD *)(a1 + 116) = v7;
  *(unsigned char *)(a1 + 112) = 1;
LABEL_30:
  MEMORY[0x19970E930](*(void *)(a1 + 104));
  return *(unsigned int *)(a1 + 116);
}

CFArrayRef wvtt_CreateIdentityMatrixCFArray(const __CFAllocator *a1)
{
  values[9] = *(void **)MEMORY[0x1E4F143B8];
  int v7 = 1065353216;
  int valuePtr = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFNumberRef v3 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
  CFNumberRef v4 = CFNumberCreate(v2, kCFNumberFloat32Type, &v7);
  values[0] = v4;
  values[1] = v3;
  values[2] = v3;
  values[3] = v3;
  values[4] = v4;
  values[5] = v3;
  values[6] = v3;
  values[7] = v3;
  values[8] = v4;
  CFArrayRef v5 = CFArrayCreate(a1, (const void **)values, 9, MEMORY[0x1E4F1D510]);
  CFRelease(v3);
  CFRelease(v4);
  return v5;
}

uint64_t WebVTTFormatReaderGetTrackCount(uint64_t a1, void *a2)
{
  *a2 = 1;
  return 0;
}

uint64_t WebVTTFormatReaderCopyTrackByIndex(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4, _DWORD *a5)
{
  if (a2) {
    return 4294954453;
  }
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t result = EnsureWebVTTFileIsParsed(*DerivedStorage);
  if (!result)
  {
    if (a3)
    {
      CFTypeRef v10 = (CFTypeRef)DerivedStorage[1];
      if (v10) {
        CFTypeRef v10 = CFRetain(v10);
      }
      *a3 = v10;
    }
    if (a4) {
      *a4 = 1952807028;
    }
    uint64_t result = 0;
    if (a5) {
      *a5 = 1;
    }
  }
  return result;
}

uint64_t WebVTTFormatReaderCopyTrackByID(uint64_t a1, int a2, void *a3, _DWORD *a4)
{
  if (a2 == 1)
  {
    uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
    uint64_t result = EnsureWebVTTFileIsParsed(*DerivedStorage);
    if (!result)
    {
      if (a3)
      {
        CFTypeRef v9 = (CFTypeRef)DerivedStorage[1];
        if (v9) {
          CFTypeRef v9 = CFRetain(v9);
        }
        *a3 = v9;
      }
      uint64_t result = 0;
      if (a4) {
        *a4 = 1952807028;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t WebVTTFormatReaderCopyTrackByType(uint64_t a1, uint64_t a2, int a3, void *a4, _DWORD *a5)
{
  uint64_t result = 4294954453;
  if (!a2 && a3 == 1952807028)
  {
    uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
    uint64_t result = EnsureWebVTTFileIsParsed(*DerivedStorage);
    if (!result)
    {
      if (a4)
      {
        CFTypeRef v9 = (CFTypeRef)DerivedStorage[1];
        if (v9) {
          CFTypeRef v9 = CFRetain(v9);
        }
        *a4 = v9;
      }
      uint64_t result = 0;
      if (a5) {
        *a5 = 1;
      }
    }
  }
  return result;
}

void WebVTTTrackReaderFinalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *WebVTTTrackReaderCopyDebugDescription()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (*(void *)DerivedStorage)
  {
    CFAllocatorRef v2 = *(const void **)(*(void *)DerivedStorage + 24);
    if (v2)
    {
      CFStringRef v3 = CFCopyDescription(v2);
      CFStringAppendFormat(Mutable, 0, @"\tWebVTTTrackReader: stream<%@> trackID %d", v3, 1);
      if (v3) {
        CFRelease(v3);
      }
    }
    else
    {
      CFStringAppendFormat(Mutable, 0, @"\tWebVTTTrackReader: stream<%@> trackID %d", 0, 1);
    }
  }
  return Mutable;
}

uint64_t WebVTTTrackReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *(void *)DerivedStorage;
  MEMORY[0x19970E910](*(void *)(*(void *)DerivedStorage + 16));
  if (!a4)
  {
    uint64_t v13 = FigSignalErrorAt();
    goto LABEL_19;
  }
  *a4 = 0;
  if (!CFEqual(a2, @"TrackFormatDescriptionArray"))
  {
    if (CFEqual(a2, @"TrackTimescale"))
    {
      LODWORD(valuePtr.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = *(_DWORD *)(v8 + 32);
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberType v12 = kCFNumberSInt32Type;
    }
    else
    {
      if (CFEqual(a2, @"TrackEnabled"))
      {
        IdentityMatrixCFArradouble y = (void *)CFRetain((CFTypeRef)*MEMORY[0x1E4F1CFD0]);
        goto LABEL_18;
      }
      if (CFEqual(a2, @"TrackMatrix"))
      {
        IdentityMatrixCFArradouble y = wvtt_CreateIdentityMatrixCFArray(a3);
        goto LABEL_18;
      }
      if (CFEqual(a2, @"TrackDuration") || CFEqual(a2, @"UneditedTrackDuration"))
      {
        CMTime valuePtr = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
        uint64_t v14 = *(void *)(v8 + 40);
        if (v14) {
          CMTime valuePtr = *(CMTime *)(v14 + 12);
        }
        CMTime v17 = valuePtr;
        IdentityMatrixCFArradouble y = CMTimeCopyAsDictionary(&v17, a3);
        goto LABEL_18;
      }
      if (!CFEqual(a2, @"UneditedSampleCount"))
      {
        uint64_t v13 = 4294954512;
        goto LABEL_19;
      }
      valuePtr.xpc_object_t value = 0;
      uint64_t v16 = *(void *)(v8 + 40);
      if (v16) {
        valuePtr.xpc_object_t value = *(void *)(v16 + 40);
      }
      CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFNumberType v12 = kCFNumberSInt64Type;
    }
    IdentityMatrixCFArradouble y = CFNumberCreate(v11, v12, &valuePtr);
LABEL_18:
    uint64_t v13 = 0;
    *a4 = IdentityMatrixCFArray;
    goto LABEL_19;
  }
  CFTypeRef v9 = (const void **)(v8 + 48);
  if (*(void *)(v8 + 48))
  {
    IdentityMatrixCFArradouble y = CFArrayCreate(a3, v9, 1, MEMORY[0x1E4F1D510]);
    goto LABEL_18;
  }
  uint64_t v13 = 4294954513;
LABEL_19:
  MEMORY[0x19970E930](*(void *)(v8 + 16), v9);
  return v13;
}

uint64_t WebVTTTrackReaderGetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  if (a3) {
    *a3 = 1952807028;
  }
  if (a2) {
    *a2 = 1;
  }
  return 0;
}

uint64_t WebVTTTrackReaderCopySampleCursorService(uint64_t a1, void *a2)
{
  CFStringRef v3 = *(const void **)CMBaseObjectGetDerivedStorage();
  FigSampleCursorServiceGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    if (v3) {
      CFTypeRef v6 = CFRetain(v3);
    }
    else {
      CFTypeRef v6 = 0;
    }
    void *DerivedStorage = v6;
    *a2 = 0;
  }
  return v4;
}

void WebVTTCursorService_finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *WebVTTCursorService_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigFormatReader_WebVTT_CursorService %p>{ timescale %d }", a1, *(unsigned int *)(*(void *)DerivedStorage + 32));
  return Mutable;
}

uint64_t WebVTTCursorService_createCursorAtPresentationTimeStamp(uint64_t a1, long long *a2, void *a3, unsigned char *a4, char *a5)
{
  uint64_t v9 = *(void *)CMBaseObjectGetDerivedStorage();
  CMTime v17 = 0;
  MEMORY[0x19970E910](*(void *)(v9 + 16));
  uint64_t v10 = createWebVTTAccessor(v9, &v17);
  if (v10)
  {
    uint64_t v13 = v10;
  }
  else
  {
    CFAllocatorRef v11 = v17;
    uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
    long long v15 = *a2;
    uint64_t v16 = *((void *)a2 + 2);
    uint64_t v13 = wvtt_moveToSampleAtPTS(DerivedStorage, (uint64_t)&v15, a4, a5);
    if (v13)
    {
      if (v11) {
        CFRelease(v11);
      }
    }
    else
    {
      *a3 = v11;
    }
  }
  MEMORY[0x19970E930](*(void *)(v9 + 16));
  return v13;
}

uint64_t WebVTTCursorService_createCursorNearPresentationTimeStamp(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned char *a5, char *a6)
{
  long long v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  return WebVTTCursorService_createCursorAtPresentationTimeStamp(a1, &v7, a4, a5, a6);
}

uint64_t WebVTTCursorService_createCursorAtFirstSampleInDecodeOrder(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  MEMORY[0x19970E910](*(void *)(v3 + 16));
  uint64_t v4 = createWebVTTAccessor(v3, &v7);
  if (!v4)
  {
    uint64_t v5 = v7;
    *(void *)(CMBaseObjectGetDerivedStorage() + 8) = 0;
    *a2 = v5;
  }
  MEMORY[0x19970E930](*(void *)(v3 + 16));
  return v4;
}

uint64_t WebVTTCursorService_createCursorAtLastSampleInDecodeOrder(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();
  uint64_t v9 = 0;
  MEMORY[0x19970E910](*(void *)(v3 + 16));
  uint64_t v4 = createWebVTTAccessor(v3, &v9);
  if (!v4)
  {
    uint64_t v5 = v9;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v3 + 88))
    {
      uint64_t v7 = *(void *)(v3 + 80);
    }
    else
    {
      uint64_t v7 = *(void *)(*(void *)(v3 + 40) + 40);
      *(void *)(v3 + 80) = v7;
      *(unsigned char *)(v3 + 88) = 1;
    }
    *(void *)(DerivedStorage + 8) = v7 - 1;
    *a2 = v5;
  }
  MEMORY[0x19970E930](*(void *)(v3 + 16));
  return v4;
}

uint64_t createWebVTTAccessor(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(void *)(a1 + 80))
    {
LABEL_3:
      FigSampleCursorGetClassID();
      uint64_t v4 = CMDerivedObjectCreate();
      if (v4)
      {
        FigSignalErrorAt();
      }
      else
      {
        uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
        void *DerivedStorage = CFRetain((CFTypeRef)a1);
        DerivedStorage[1] = 0;
        *a2 = 0;
      }
      return v4;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 40);
    *(void *)(a1 + 80) = v7;
    *(unsigned char *)(a1 + 88) = 1;
    if (v7) {
      goto LABEL_3;
    }
  }

  return FigSignalErrorAt();
}

uint64_t wvtt_moveToSampleAtPTS(void *a1, uint64_t a2, unsigned char *a3, char *a4)
{
  memset(&v20, 0, sizeof(v20));
  int32_t v8 = *(_DWORD *)(*a1 + 32);
  *(_OWORD *)&time.duration.xpc_object_t value = *(_OWORD *)a2;
  time.duration.CMTimeEpoch epoch = *(void *)(a2 + 16);
  CMTimeConvertScale(&v20, &time.duration, v8, kCMTimeRoundingMethod_RoundTowardZero);
  uint64_t v9 = a1[1];
  uint64_t v10 = *(void *)(*a1 + 40);
  time.CMTime duration = v20;
  CMTime v25 = v20;
  long long v11 = *(_OWORD *)(v10 + 12);
  time2.CMTimeEpoch epoch = *(void *)(v10 + 28);
  *(_OWORD *)&time2.xpc_object_t value = v11;
  int32_t v12 = CMTimeCompare(&time.duration, &time2);
  if (v12 < 0)
  {
    char v15 = 0;
    CFIndex v14 = 0;
    uint64_t v13 = *(void *)(v10 + 40);
  }
  else
  {
    CMTime v25 = *(CMTime *)(v10 + 12);
    uint64_t v13 = *(void *)(v10 + 40);
    if (v13 <= 1) {
      CFIndex v14 = 0;
    }
    else {
      CFIndex v14 = v13 - 1;
    }
    char v15 = 1;
  }
  if (v14 >= v13)
  {
    uint64_t result = 4294954454;
LABEL_16:
    a1[1] = v9;
  }
  else
  {
    while (1)
    {
      while (1)
      {
        memset(&time, 0, sizeof(time));
        memset(&time2, 0, sizeof(time2));
        CFDictionaryRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v10 + 48), v14);
        uint64_t result = CMSampleBufferGetSampleTimingInfo(ValueAtIndex, 0, &time);
        if (!result) {
          break;
        }
        if (++v14 >= *(void *)(v10 + 40)) {
          goto LABEL_16;
        }
      }
      CMTime lhs = time.presentationTimeStamp;
      CMTime rhs = time.duration;
      CMTimeAdd(&time2, &lhs, &rhs);
      CMTime lhs = v25;
      CMTime rhs = time.presentationTimeStamp;
      if ((CMTimeCompare(&lhs, &rhs) & 0x80000000) == 0)
      {
        CMTime lhs = v25;
        CMTime rhs = time2;
        if (CMTimeCompare(&lhs, &rhs) < 0) {
          break;
        }
      }
      if (++v14 >= *(void *)(v10 + 40)) {
        goto LABEL_18;
      }
    }
    a1[1] = v14;
LABEL_18:
    if ((*(void *)a2 & 0x8000000000000000) != 0)
    {
      a1[1] = 0;
      if (a3) {
        *a3 = 1;
      }
    }
    if (v12 < 0) {
      return 0;
    }
    uint64_t v18 = *a1;
    if (*(unsigned char *)(*a1 + 88))
    {
      uint64_t v19 = *(void *)(v18 + 80);
    }
    else
    {
      uint64_t v19 = *(void *)(*(void *)(v18 + 40) + 40);
      *(void *)(v18 + 80) = v19;
      *(unsigned char *)(v18 + 88) = 1;
    }
    a1[1] = v19 - 1;
    if (!a4)
    {
      return 0;
    }
    else
    {
      uint64_t result = 0;
      *a4 = v15;
    }
  }
  return result;
}

void WebVTTCursor_finalize()
{
  uint64_t DerivedStorage = (CFTypeRef *)CMBaseObjectGetDerivedStorage();
  if (*DerivedStorage)
  {
    CFRelease(*DerivedStorage);
    CFTypeRef *DerivedStorage = 0;
  }
}

__CFString *WebVTTCursor_copyDebugDescription(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigFormatReader_WebVTT_SampleCursor %p>{ curSampleNum %lld }", a1, *(void *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t WebVTTCursor_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  uint64_t DerivedStorage = (CFIndex *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(*DerivedStorage + 16));
  if (a2 && a4)
  {
    *a4 = 0;
    if (CFEqual(a2, @"CursorPlayableHorizon"))
    {
      memset(&time, 0, sizeof(time));
      memset(&v14, 0, sizeof(v14));
      uint64_t v8 = TimelineCache_MapSampleNumToSampleTime(*(void *)(*DerivedStorage + 40), DerivedStorage[1], &time);
      if (!v8)
      {
        CMTime v15 = *(CMTime *)(*(void *)(*DerivedStorage + 40) + 12);
        CMTime lhs = v15;
        CMTime rhs = time;
        CMTimeSubtract(&v14, &lhs, &rhs);
        CMTime lhs = v14;
        long long v11 = *MEMORY[0x1E4F1FA48];
        *(_OWORD *)&rhs.xpc_object_t value = *MEMORY[0x1E4F1FA48];
        CMTimeEpoch v9 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
        rhs.CMTimeEpoch epoch = v9;
        if (CMTimeCompare(&lhs, &rhs) < 0)
        {
          *(_OWORD *)&v14.xpc_object_t value = v11;
          v14.CMTimeEpoch epoch = v9;
        }
        CMTime time = v14;
        *a4 = CMTimeCopyAsDictionary(&time, a3);
      }
    }
    else
    {
      uint64_t v8 = 4294954512;
    }
  }
  else
  {
    uint64_t v8 = FigSignalErrorAt();
  }
  MEMORY[0x19970E930](*(void *)(*DerivedStorage + 16));
  return v8;
}

uint64_t TimelineCache_MapSampleNumToSampleTime(uint64_t a1, CFIndex a2, CMTime *a3)
{
  if (a2 < 0
    || *(void *)(a1 + 40) <= a2
    || (CFDictionaryRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), a2)) == 0)
  {
    return FigSignalErrorAt();
  }
  else
  {
    memset(&v6, 0, sizeof(v6));
    uint64_t result = CMSampleBufferGetSampleTimingInfo(ValueAtIndex, 0, &v6);
    if (a3)
    {
      if (!result) {
        *a3 = v6.presentationTimeStamp;
      }
    }
  }
  return result;
}

uint64_t WebVTTCursor_copy(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  FigSampleCursorGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = (_OWORD *)CMBaseObjectGetDerivedStorage();
    _OWORD *v5 = *DerivedStorage;
    CMSampleTimingInfo v6 = *(const void **)v5;
    if (v6) {
      CFRetain(v6);
    }
    *a2 = 0;
  }
  return v4;
}

uint64_t WebVTTCursor_compareInDecodeOrder()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  uint64_t v2 = *(void *)(DerivedStorage + 8);
  uint64_t v3 = *(void *)(v1 + 8);
  BOOL v4 = v2 < v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return -1;
  }
  else {
    return v5;
  }
}

uint64_t WebVTTCursor_getPresentationTimeStamp(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *DerivedStorage;
  MEMORY[0x19970E910](*(void *)(*DerivedStorage + 16));
  CFIndex v5 = DerivedStorage[1];
  memset(&v8, 0, sizeof(v8));
  uint64_t v6 = TimelineCache_MapSampleNumToSampleTime(*(void *)(v4 + 40), v5, &v8);
  if (!v6) {
    *a2 = v8;
  }
  MEMORY[0x19970E930](*(void *)(v4 + 16));
  return v6;
}

uint64_t WebVTTCursor_getDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *DerivedStorage;
  long long v12 = 0uLL;
  CMTimeEpoch epoch = 0;
  MEMORY[0x19970E910](*(void *)(v4 + 16));
  CFIndex v5 = DerivedStorage[1];
  if (v5 < 0
    || (uint64_t v6 = *(void *)(v4 + 40), *(void *)(v6 + 40) <= v5)
    || (CFDictionaryRef ValueAtIndex = (opaqueCMSampleBuffer *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v6 + 48), v5)) == 0)
  {
    uint64_t SampleTimingInfo = FigSignalErrorAt();
    if (!SampleTimingInfo) {
      goto LABEL_6;
    }
LABEL_9:
    uint64_t v9 = SampleTimingInfo;
    goto LABEL_7;
  }
  memset(&timingInfoOut, 0, sizeof(timingInfoOut));
  uint64_t SampleTimingInfo = CMSampleBufferGetSampleTimingInfo(ValueAtIndex, 0, &timingInfoOut);
  if (SampleTimingInfo) {
    goto LABEL_9;
  }
  long long v12 = *(_OWORD *)&timingInfoOut.duration.value;
  CMTimeEpoch epoch = timingInfoOut.duration.epoch;
LABEL_6:
  *(_OWORD *)&timingInfoOut.duration.xpc_object_t value = v12;
  timingInfoOut.duration.CMTimeEpoch epoch = epoch;
  CMTime v11 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  CMTimeCompare(&timingInfoOut.duration, &v11);
  uint64_t v9 = 0;
  *(_OWORD *)a2 = v12;
  *(void *)(a2 + 16) = epoch;
LABEL_7:
  MEMORY[0x19970E930](*(void *)(v4 + 16));
  return v9;
}

uint64_t WebVTTCursor_getDependencyInfo(uint64_t a1, unsigned char *a2, unsigned char *a3, _DWORD *a4, unsigned char *a5)
{
  if (a2) {
    *a2 = 1;
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  return 0;
}

uint64_t WebVTTCursor_createSampleBuffer(uint64_t a1, uint64_t a2, CMSampleBufferRef *a3)
{
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  if (a2) {
    a2 = CMBaseObjectGetDerivedStorage();
  }
  uint64_t v6 = *DerivedStorage;
  CMSampleBufferRef sbuf = 0;
  MEMORY[0x19970E910](*(void *)(v6 + 16));
  CFIndex v7 = DerivedStorage[1];
  if (a2)
  {
    CFIndex v8 = *(void *)(a2 + 8);
    BOOL v9 = v8 < v7;
    CFIndex v10 = v8 - v7;
    if (v9)
    {
LABEL_9:
      uint64_t SampleBufferContainingSample = FigSignalErrorAt();
      goto LABEL_13;
    }
    uint64_t v11 = v10 + 1;
  }
  else
  {
    uint64_t v11 = 1;
  }
  memset(&v16, 0, sizeof(v16));
  uint64_t SampleBufferContainingSample = TimelineCache_MapSampleNumToSampleTime(*(void *)(v6 + 40), v7, &v16);
  if (!SampleBufferContainingSample)
  {
    if (v11 < 2)
    {
      uint64_t SampleBufferContainingSample = TimelineCache_GetSampleBufferContainingSample(*(void *)(v6 + 40), v7, &sbuf);
      if (SampleBufferContainingSample) {
        goto LABEL_13;
      }
      if (sbuf)
      {
        uint64_t SampleBufferContainingSample = CMSampleBufferCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], sbuf, a3);
        goto LABEL_13;
      }
    }
    goto LABEL_9;
  }
LABEL_13:
  uint64_t v13 = SampleBufferContainingSample;
  MEMORY[0x19970E930](*(void *)(v6 + 16));
  return v13;
}

uint64_t WebVTTCursor_stepByDecodeTime(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  memset(&v11, 0, sizeof(v11));
  __int16 v10 = 0;
  MEMORY[0x19970E910](*(void *)(*DerivedStorage + 16));
  uint64_t v5 = *DerivedStorage;
  CFIndex v4 = DerivedStorage[1];
  memset(&lhs, 0, sizeof(lhs));
  uint64_t v6 = TimelineCache_MapSampleNumToSampleTime(*(void *)(v5 + 40), v4, &lhs);
  if (v6)
  {
    uint64_t v7 = v6;
  }
  else
  {
    CMTime v12 = lhs;
    CMTime v9 = *a2;
    CMTimeAdd(&v11, &lhs, &v9);
    CMTime lhs = v11;
    uint64_t v7 = wvtt_moveToSampleAtPTS(DerivedStorage, (uint64_t)&lhs, (unsigned char *)&v10 + 1, (char *)&v10);
    if (!v7)
    {
      if (HIBYTE(v10) | v10) {
        uint64_t v7 = 4294954456;
      }
      else {
        uint64_t v7 = 0;
      }
    }
  }
  MEMORY[0x19970E930](*(void *)(*DerivedStorage + 16));
  return v7;
}

uint64_t WebVTTCursor_stepByPresentationTime(uint64_t a1, CMTime *a2)
{
  CMTime v3 = *a2;
  return WebVTTCursor_stepByDecodeTime(a1, &v3);
}

uint64_t WebVTTCursor_copyFormatDescription(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = (CFIndex *)CMBaseObjectGetDerivedStorage();
  CFIndex v4 = (void *)*DerivedStorage;
  MEMORY[0x19970E910](*(void *)(*DerivedStorage + 16));
  CFTypeRef v5 = (CFTypeRef)v4[6];
  if (!v5)
  {
    CMSampleBufferRef sbuf = 0;
    uint64_t SampleBufferContainingSample = TimelineCache_GetSampleBufferContainingSample(v4[5], DerivedStorage[1], &sbuf);
    if (!SampleBufferContainingSample)
    {
      CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
      if (FormatDescription)
      {
        CFTypeRef v5 = CFRetain(FormatDescription);
        void v4[6] = v5;
        if (a2) {
          goto LABEL_3;
        }
LABEL_9:
        uint64_t v6 = 0;
        goto LABEL_10;
      }
      uint64_t SampleBufferContainingSample = FigSignalErrorAt();
    }
    uint64_t v6 = SampleBufferContainingSample;
    goto LABEL_10;
  }
  if (!a2) {
    goto LABEL_9;
  }
LABEL_3:
  if (v5) {
    CFTypeRef v5 = CFRetain(v5);
  }
  uint64_t v6 = 0;
  *a2 = v5;
LABEL_10:
  MEMORY[0x19970E930](v4[2]);
  return v6;
}

uint64_t WebVTTCursor_stepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  uint64_t v6 = *DerivedStorage;
  MEMORY[0x19970E910](*(void *)(*DerivedStorage + 16));
  uint64_t v7 = DerivedStorage[1];
  uint64_t v8 = v7 + a2;
  if (a2 < 1)
  {
    v8 &= ~(v8 >> 63);
  }
  else
  {
    uint64_t v9 = *DerivedStorage;
    if (*(unsigned char *)(*DerivedStorage + 88))
    {
      uint64_t v10 = *(void *)(v9 + 80);
    }
    else
    {
      uint64_t v10 = *(void *)(*(void *)(v9 + 40) + 40);
      *(void *)(v9 + 80) = v10;
      *(unsigned char *)(v9 + 88) = 1;
    }
    if (v10 <= v8) {
      uint64_t v8 = v10 - 1;
    }
  }
  DerivedStorage[1] = v8;
  if (a3) {
    *a3 = v8 - v7;
  }
  MEMORY[0x19970E930](*(void *)(v6 + 16));
  return 0;
}

uint64_t WebVTTCursor_stepInPresentationOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, void *a3)
{
  return 0;
}

uint64_t TimelineCache_GetSampleBufferContainingSample(uint64_t a1, CFIndex a2, void *a3)
{
  if (a2 < 0 || *(void *)(a1 + 40) <= a2)
  {
    uint64_t result = FigSignalErrorAt();
    if (a3)
    {
      CFDictionaryRef ValueAtIndex = 0;
      if (result) {
        goto LABEL_5;
      }
    }
  }
  else
  {
    if (a3)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 48), a2);
      uint64_t result = 0;
LABEL_5:
      *a3 = ValueAtIndex;
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t wvtt_headerCallback(uint64_t a1, uint64_t a2, unsigned char *a3, void *a4)
{
  *a3 = 0;
  *a4 = 0;
  return 0;
}

uint64_t wvtt_sampleCallback(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  CMSampleBufferRef sbuf = 0;
  memset(&v13, 0, sizeof(v13));
  uint64_t v3 = *(void *)(a1 + 96);
  CMTime time1 = *(CMTime *)(a1 + 120);
  uint64_t v4 = WebVTTCreateSampleBufferFromSample(v3, a2, &time1, &sbuf);
  if (!v4)
  {
    CMSampleBufferGetOutputPresentationTimeStamp(&v13, sbuf);
    CMSampleBufferGetOutputDuration(&time1, sbuf);
    CMTimeFlags flags = time1.flags;
    CMTimeScale timescale = time1.timescale;
    CMTimeEpoch epoch = time1.epoch;
    CMTimeValue value = time1.value;
    long long v12 = *MEMORY[0x1E4F1FA48];
    *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v7 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    time2.CMTimeEpoch epoch = v7;
    if (CMTimeCompare(&time1, &time2))
    {
      if (!*(unsigned char *)(a1 + 144))
      {
        *(unsigned char *)(a1 + 144) = 1;
        CMTime time1 = v13;
        *(_OWORD *)&time2.CMTimeValue value = v12;
        time2.CMTimeEpoch epoch = v7;
        CMTimeCompare(&time1, &time2);
      }
      CMTime time1 = v13;
      CMTime time2 = *(CMTime *)(a1 + 148);
      CMTimeCompare(&time1, &time2);
      CMTime time2 = v13;
      rhs.CMTimeValue value = value;
      rhs.CMTimeScale timescale = timescale;
      rhs.CMTimeFlags flags = flags;
      rhs.CMTimeEpoch epoch = epoch;
      CMTimeAdd(&time1, &time2, &rhs);
      *(CMTime *)(a1 + 148) = time1;
      ++*(void *)(a1 + 72);
      *(void *)(a1 + 80) += CMSampleBufferGetNumSamples(sbuf);
      uint64_t v8 = *(void *)(a1 + 40);
      if (v8)
      {
        uint64_t v9 = sbuf;
        CFArrayAppendValue(*(CFMutableArrayRef *)(v8 + 48), sbuf);
        ++*(void *)(v8 + 40);
        CMSampleBufferGetPresentationTimeStamp(&time2, v9);
        CMSampleBufferGetDuration(&rhs, v9);
        CMTimeAdd(&time1, &time2, &rhs);
        long long v10 = *(_OWORD *)&time1.value;
        *(void *)(v8 + 28) = time1.epoch;
        *(_OWORD *)(v8 + 12) = v10;
      }
    }
  }
  if (sbuf) {
    CFRelease(sbuf);
  }
  return v4;
}

uint64_t RegisterWebVTTInfoType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sWebVTTInfouint64_t ID = result;
  return result;
}

double InitWebVTTInfo(_OWORD *a1)
{
  double result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

uint64_t FinalizeWebVTTInfo(uint64_t a1)
{
  FigFormatDescriptionRelease();
  WebVTTParserDestroy(*(void **)(a1 + 96));
  *(void *)(a1 + 96) = 0;
  TimelineCache_Destroy(*(CFTypeRef **)(a1 + 40));
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 24) = 0;
  }
  if (*(void *)(a1 + 104)) {
    FigSimpleMutexDestroy();
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    return FigSimpleMutexDestroy();
  }
  return result;
}

void TimelineCache_Destroy(CFTypeRef *a1)
{
  if (a1)
  {
    CFTypeRef v2 = a1[6];
    if (v2)
    {
      CFRelease(v2);
      a1[6] = 0;
    }
    if (*a1) {
      CFRelease(*a1);
    }
    free(a1);
  }
}

void __getDisplayScale_block_invoke_0()
{
  uint64_t v0 = (void *)MGCopyAnswer();
  if (v0)
  {
    id v2 = v0;
    [v0 floatValue];
    *(double *)&sMaxDisplayScale_0 = v1;
  }
}

CFTypeRef FigVirtualDisplayCopyDefaultTimestampInfo()
{
  if (timestampsGetTimestampNameInfo_once != -1) {
    dispatch_once(&timestampsGetTimestampNameInfo_once, &__block_literal_global_56);
  }
  CFTypeRef result = (CFTypeRef)timestampsGetTimestampNameInfo_timestampInfoArray;
  if (timestampsGetTimestampNameInfo_timestampInfoArray)
  {
    return CFRetain(result);
  }
  return result;
}

uint64_t FigVirtualDisplayProcessorCreate(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigVirtualDisplayProcessorGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(_DWORD *)(DerivedStorage + 24) = 0;
    *(void *)(DerivedStorage + 80) = dispatch_semaphore_create(0);
    *(void *)uint64_t DerivedStorage = dispatch_queue_create("com.apple.coremedia.vdprocessor.stateq", 0);
    uint64_t v6 = FigDispatchQueueCreateWithPriority();
    *(void *)(DerivedStorage + 8) = v6;
    CMTimeEpoch v7 = (const dispatch_source_type_s *)MEMORY[0x1E4F14490];
    uint64_t v8 = dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, v6);
    *(void *)(DerivedStorage + 464) = v8;
    handler[0] = MEMORY[0x1E4F143A8];
    handler[1] = 0x40000000;
    handler[2] = __FigVirtualDisplayProcessorCreate_block_invoke;
    handler[3] = &__block_descriptor_tmp_72;
    handler[4] = DerivedStorage;
    dispatch_source_set_event_handler(v8, handler);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 464), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 464));
    uint64_t v9 = dispatch_source_create(v7, 0, 0, *(dispatch_queue_t *)(DerivedStorage + 8));
    *(void *)(DerivedStorage + 40) = v9;
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 0x40000000;
    v18[2] = __FigVirtualDisplayProcessorCreate_block_invoke_2;
    v18[3] = &__block_descriptor_tmp_204;
    v18[4] = DerivedStorage;
    dispatch_source_set_event_handler(v9, v18);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 40), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 40));
    long long v10 = dispatch_source_create(v7, 0, 0, *(dispatch_queue_t *)DerivedStorage);
    *(void *)(DerivedStorage + 488) = v10;
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 0x40000000;
    int v17[2] = __FigVirtualDisplayProcessorCreate_block_invoke_3;
    v17[3] = &__block_descriptor_tmp_205;
    v17[4] = DerivedStorage;
    dispatch_source_set_event_handler(v10, v17);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 488), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 488));
    CMTime v11 = dispatch_source_create(v7, 0, 0, *(dispatch_queue_t *)DerivedStorage);
    *(void *)(DerivedStorage + 680) = v11;
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 0x40000000;
    v16[2] = __FigVirtualDisplayProcessorCreate_block_invoke_4;
    v16[3] = &__block_descriptor_tmp_206;
    void v16[4] = DerivedStorage;
    dispatch_source_set_event_handler(v11, v16);
    dispatch_source_set_timer(*(dispatch_source_t *)(DerivedStorage + 680), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
    dispatch_resume(*(dispatch_object_t *)(DerivedStorage + 680));
    long long v12 = malloc_type_calloc(1uLL, 0x58uLL, 0x1060040ADCA6322uLL);
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    void *v12 = FigSimpleMutexCreate();
    v12[2] = Mutable;
    *(void *)(DerivedStorage + 648) = v12;
    *a3 = cf;
  }
  return v4;
}

void __FigVirtualDisplayProcessorCreate_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int data = dispatch_source_get_data(*(dispatch_source_t *)(v1 + 464));
  if (data >= 1)
  {
    *(void *)(v1 + 432) += *(void *)(v1 + 456) * data;
    if (dword_1E93512B0 >= 3)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v4 = *(void *)(v1 + 56);
    int v5 = *(_DWORD *)(v4 + 160);
    BOOL v6 = v5 > 0;
    if (*(_DWORD *)(v1 + 24) == 2 && (!*(void *)v4 ? (BOOL v7 = v5 <= 0) : (BOOL v7 = 1), v7 && v5 < *(_DWORD *)(v1 + 472)))
    {
      int64_t v8 = *(void *)(v1 + 424);
      if (*(void *)(v1 + 456) == v8)
      {
        dispatch_time_t v9 = 0;
      }
      else
      {
        *(void *)(v1 + 456) = v8;
        dispatch_time_t v9 = dispatch_time(0, v8);
      }
      if (fvdp_shouldDropFrame(v1)) {
        goto LABEL_18;
      }
      if (dword_1E93512B0 >= 2)
      {
        long long v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      ++*(_DWORD *)(v4 + 160);
      if (fvdp_sendFrameToEncoder(v1, v6))
      {
        CMTime v15 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        if (!v9) {
          return;
        }
      }
      else
      {
LABEL_18:
        if (!v9) {
          return;
        }
      }
      uint64_t v12 = *(void *)(v1 + 456);
      CMTime v11 = *(NSObject **)(v1 + 464);
      dispatch_time_t v13 = v9;
      uint64_t v14 = 1000000;
    }
    else
    {
      CMTime v11 = *(NSObject **)(v1 + 464);
      dispatch_time_t v13 = -1;
      uint64_t v12 = 0;
      uint64_t v14 = 0;
    }
    dispatch_source_set_timer(v11, v13, v12, v14);
  }
}

void *__FigVirtualDisplayProcessorCreate_block_invoke_2(void *result)
{
  uint64_t v1 = result[4];
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    if (dword_1E93512B0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFTypeRef result = fvdp_shutdownEncoderAndPools(v1);
    *(unsigned char *)(v1 + 48) = 1;
  }
  return result;
}

void __FigVirtualDisplayProcessorCreate_block_invoke_3(uint64_t a1)
{
  block[16] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v6 = 0;
  int v2 = fvdp_copySinkProperty(v1, @"networkInfo", (uint64_t)&v6);
  if (v2 == -12784)
  {
    if (dword_1E93512B0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 488), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  }
  else
  {
    if (v2) {
      BOOL v4 = 1;
    }
    else {
      BOOL v4 = v6 == 0;
    }
    if (!v4)
    {
      int v5 = *(NSObject **)(v1 + 8);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __fvdp_encoderControlTimerFired_block_invoke;
      block[3] = &__block_descriptor_tmp_445;
      block[4] = v1;
      void block[5] = v6;
      dispatch_async(v5, block);
    }
  }
}

void __FigVirtualDisplayProcessorCreate_block_invoke_4(uint64_t a1)
{
  valuePtr[16] = *(double *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 744) || *(unsigned char *)(v1 + 745))
  {
    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
    double v3 = (double)(UpTimeNanoseconds - *(void *)(v1 + 688)) / 1000000000.0;
    if (v3 > 0.0)
    {
      uint64_t v21 = UpTimeNanoseconds;
      if (*(unsigned char *)(v1 + 745)) {
        CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      }
      else {
        CFMutableArrayRef Mutable = 0;
      }
      unint64_t v5 = 0;
      int v6 = 0;
      uint64_t v7 = v1 + 696;
      do
      {
        int add_explicit = atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 4 * v5), 0, memory_order_relaxed);
        atomic_fetch_add_explicit((atomic_uint *volatile)(v7 + 4 * v5), -add_explicit, memory_order_relaxed);
        int v9 = (int)((double)add_explicit / v3 + 0.5);
        if (v5 <= 6 && *(unsigned char *)(v1 + 745)) {
          FigCFArrayAppendInt32();
        }
        if (*(unsigned char *)(v1 + 744) && dword_1E93512B0)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v5 == 7) {
          int v6 = v9;
        }
        ++v5;
      }
      while (v5 != 9);
      if (*(unsigned char *)(v1 + 745))
      {
        valuePtr[0] = (double)v6 * 8.0;
        CFNumberRef v11 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberDoubleType, valuePtr);
        uint64_t CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(*(void *)(v1 + 64));
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
        uint64_t v14 = v21;
        if (v13) {
          uint64_t v15 = v13;
        }
        else {
          uint64_t v15 = 0;
        }
        CMTime v16 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v15 + 56);
        if (v16) {
          v16(CMBaseObject, @"bitrate", v11);
        }
        uint64_t v17 = FigVirtualDisplaySinkGetCMBaseObject(*(void *)(v1 + 64));
        uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v18) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = 0;
        }
        uint64_t v20 = *(void (**)(uint64_t, __CFString *, CFMutableArrayRef))(v19 + 56);
        if (v20) {
          v20(v17, @"fps", Mutable);
        }
      }
      else
      {
        CFNumberRef v11 = 0;
        uint64_t v14 = v21;
      }
      *(void *)(v1 + 688) = v14;
      if (Mutable) {
        CFRelease(Mutable);
      }
      if (v11) {
        CFRelease(v11);
      }
    }
  }
}

void __timestampsGetTimestampNameInfo_block_invoke()
{
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  timestampsGetTimestampNameInfo_timestampInfoArradouble y = (uint64_t)CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v1 = 2u;
  int v2 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  double v3 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  do
  {
    CFDictionaryRef v4 = CFDictionaryCreate(v0, (const void **)kFigVirtualDisplaySinkTimestampInfoKey_Name, (const void **)&kTimestampNames[v1], 1, v2, v3);
    CFArrayAppendValue((CFMutableArrayRef)timestampsGetTimestampNameInfo_timestampInfoArray, v4);
    if (v4) {
      CFRelease(v4);
    }
    ++v1;
  }
  while (v1 != 7);
}

void fvdp_finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E93512B0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(DerivedStorage + 24))
  {
    uint64_t v12 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)DerivedStorage) {
    dispatch_sync(*(dispatch_queue_t *)DerivedStorage, &__block_literal_global_231_0);
  }
  fvdp_cleanup(DerivedStorage);
  int v2 = *(NSObject **)(DerivedStorage + 464);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 464));
  }
  double v3 = *(NSObject **)(DerivedStorage + 40);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 40));
  }
  CFDictionaryRef v4 = *(NSObject **)(DerivedStorage + 488);
  if (v4)
  {
    dispatch_source_cancel(v4);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 488));
  }
  unint64_t v5 = *(NSObject **)(DerivedStorage + 680);
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(*(dispatch_object_t *)(DerivedStorage + 680));
  }
  int v6 = *(NSObject **)(DerivedStorage + 8);
  if (v6) {
    dispatch_release(v6);
  }
  if (*(void *)DerivedStorage) {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
  }
  uint64_t v7 = *(NSObject **)(DerivedStorage + 80);
  if (v7) {
    dispatch_release(v7);
  }
  int64_t v8 = *(void **)(DerivedStorage + 648);
  if (v8)
  {
    writebackCacheInitWithPool(*(void **)(DerivedStorage + 648), 0, 0);
    int v9 = (const void *)v8[2];
    if (v9) {
      CFRelease(v9);
    }
    long long v10 = (const void *)v8[3];
    if (v10) {
      CFRelease(v10);
    }
    FigSimpleMutexDestroy();
    free(v8);
  }
  CFNumberRef v11 = *(const void **)(DerivedStorage + 16);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 16) = 0;
  }
}

uint64_t fvdp_copyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFDictionary **a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E93512B0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CFEqual(a2, @"processorType"))
  {
    int v9 = @"DefaultProcessor";
LABEL_10:
    uint64_t v12 = (__CFDictionary *)CFRetain(v9);
LABEL_11:
    uint64_t v13 = v12;
LABEL_12:
    uint64_t result = 0;
    *a4 = v13;
    return result;
  }
  if (CFEqual(a2, @"SupportsRotation"))
  {
    long long v10 = (__CFString **)MEMORY[0x1E4F1CFD0];
    int v11 = *(unsigned __int8 *)(DerivedStorage + 88);
    goto LABEL_7;
  }
  if (CFEqual(a2, @"IOMFBUUID"))
  {
    int v9 = *(__CFString **)(DerivedStorage + 104);
    if (v9) {
      goto LABEL_10;
    }
LABEL_21:
    uint64_t v13 = 0;
    goto LABEL_12;
  }
  if (CFEqual(a2, @"DisplayEDID"))
  {
    int v9 = *(__CFString **)(DerivedStorage + 112);
    if (v9) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, @"DisplayName"))
  {
    int v9 = *(__CFString **)(DerivedStorage + 96);
    if (v9) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
  if (CFEqual(a2, @"IsIdle"))
  {
    long long v10 = (__CFString **)MEMORY[0x1E4F1CFD0];
    int v11 = *(unsigned __int8 *)(DerivedStorage + 48);
LABEL_7:
    if (!v11) {
      long long v10 = (__CFString **)MEMORY[0x1E4F1CFC8];
    }
    goto LABEL_9;
  }
  if (CFEqual(a2, @"SourcePixelFormat"))
  {
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime v16 = (const void *)(DerivedStorage + 644);
    CFNumberType v17 = kCFNumberSInt32Type;
LABEL_28:
    uint64_t v12 = CFNumberCreate(v15, v17, v16);
    goto LABEL_11;
  }
  if (CFEqual(a2, @"ProtectionFlags"))
  {
    CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    CMTime v16 = (const void *)(DerivedStorage + 392);
    CFNumberType v17 = kCFNumberSInt64Type;
    goto LABEL_28;
  }
  if (CFEqual(a2, @"ColorAttributes"))
  {
    CFMutableArrayRef Mutable = CFDictionaryCreateMutable(a3, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v19 = Mutable;
    uint64_t v20 = *(void **)(DerivedStorage + 376);
    if (v20)
    {
      uint64_t v21 = (const void *)v20[1];
      if (v21)
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24A90], v21);
        uint64_t v20 = *(void **)(DerivedStorage + 376);
      }
      uint64_t v22 = (const void *)v20[3];
      if (v22)
      {
        CFDictionarySetValue(v19, (const void *)*MEMORY[0x1E4F24BC8], v22);
        uint64_t v20 = *(void **)(DerivedStorage + 376);
      }
      uint64_t v23 = (const void *)v20[2];
      if (v23) {
        CFDictionarySetValue(v19, (const void *)*MEMORY[0x1E4F24C18], v23);
      }
    }
    uint64_t result = 0;
    *a4 = v19;
  }
  else
  {
    if (CFEqual(a2, @"DoesScaling"))
    {
      long long v10 = (__CFString **)MEMORY[0x1E4F1CFC8];
LABEL_9:
      int v9 = *v10;
      goto LABEL_10;
    }
    if (!CFEqual(a2, @"DisplayContainerID")
      && !CFEqual(a2, @"Transport")
      && !CFEqual(a2, @"DisplayAttributes"))
    {
      if (CFEqual(a2, @"VirtualDisplayMode"))
      {
        int v9 = *(__CFString **)(DerivedStorage + 408);
        if (v9) {
          goto LABEL_10;
        }
        goto LABEL_21;
      }
      int v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    return 4294954512;
  }
  return result;
}

uint64_t fvdp_setProperty(uint64_t a1, const void *a2, const void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E93512B0)
  {
    int v15 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (CFEqual(a2, @"OriginalDisplaySize"))
  {
    if (a3) {
      CFRetain(a3);
    }
    int64_t v8 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fvdp_setProperty_block_invoke;
    block[3] = &__block_descriptor_tmp_252;
    block[4] = a3;
    void block[5] = DerivedStorage;
    dispatch_async(v8, block);
    return 0;
  }
  if (CFEqual(a2, @"LogPrefix"))
  {
    int v9 = *(NSObject **)DerivedStorage;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    v12[2] = __fvdp_setProperty_block_invoke_2;
    void v12[3] = &__block_descriptor_tmp_253;
    _OWORD v12[4] = a3;
    v12[5] = DerivedStorage;
    void v12[6] = a1;
    dispatch_sync(v9, v12);
    return 0;
  }
  int v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return 4294954512;
}

void fvdp_cleanup(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(a1 + 24))
  {
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v2 = *(void *)(a1 + 64);
  if (v2)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v4 = v3 ? v3 : 0;
    unint64_t v5 = *(void (**)(uint64_t, void *))(v4 + 72);
    if (v5) {
      v5(v2, &__block_literal_global_235);
    }
  }
  int v6 = *(NSObject **)(a1 + 8);
  if (v6)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fvdp_cleanup_block_invoke_2;
    block[3] = &__block_descriptor_tmp_236;
    block[4] = a1;
    dispatch_sync(v6, block);
  }
  uint64_t v7 = *(const void **)(a1 + 72);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 72) = 0;
  }
  tapDestroy(*(void *)(a1 + 664));
  *(void *)(a1 + 664) = 0;
  tapDestroy(*(void *)(a1 + 672));
  *(void *)(a1 + 672) = 0;
  uint64_t v8 = *(void *)(a1 + 680);
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(void *)(a1 + 744) = 0;
  *(void *)(a1 + 680) = v8;
  int v9 = *(const void **)(a1 + 408);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 408) = 0;
  }
}

void __fvdp_cleanup_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(const void **)(v2 + 344);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(*(void *)(a1 + 32) + 344) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v4 = *(const void **)(v2 + 336);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(*(void *)(a1 + 32) + 336) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  unint64_t v5 = *(const void **)(v2 + 328);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(*(void *)(a1 + 32) + 328) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  int v6 = *(const void **)(v2 + 352);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(*(void *)(a1 + 32) + 352) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  uint64_t v7 = *(const void **)(v2 + 400);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(*(void *)(a1 + 32) + 400) = 0;
    uint64_t v2 = *(void *)(a1 + 32);
  }
  writebackCacheInitWithPool(*(void **)(v2 + 648), 0, 0);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 488);
  long long v10 = *(const void **)(v8 + 504);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(v8 + 504) = 0;
  }
  int v11 = *(const void **)(v8 + 624);
  if (v11) {
    CFRelease(v11);
  }
  *(void *)(v8 + 632) = 0;
  *(_OWORD *)(v8 + 600) = 0u;
  *(_OWORD *)(v8 + 616) = 0u;
  *(_OWORD *)(v8 + 568) = 0u;
  *(_OWORD *)(v8 + 584) = 0u;
  *(_OWORD *)(v8 + 536) = 0u;
  *(_OWORD *)(v8 + 552) = 0u;
  *(_OWORD *)(v8 + 504) = 0u;
  *(_OWORD *)(v8 + 520) = 0u;
  *(_OWORD *)(v8 + 488) = 0u;
  *(void *)(v8 + 488) = v9;
  *(_DWORD *)(v8 + 416) = 0;
  uint64_t v12 = *(void *)(a1 + 32);
  *(unsigned char *)(v12 + 88) = 0;
  int v13 = (long long *)MEMORY[0x1E4F1DB30];
  *(unsigned char *)(v12 + 168) = 0;
  long long v14 = *v13;
  *(_OWORD *)(v12 + 120) = *v13;
  *(_OWORD *)(v12 + 136) = v14;
  *(_OWORD *)(v12 + 152) = v14;
  int v15 = *(const void **)(v12 + 192);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(v12 + 192) = 0;
  }
  uint64_t v16 = *(const void **)(v12 + 200);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(v12 + 200) = 0;
  }
  CFNumberType v17 = *(const void **)(v12 + 208);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(v12 + 208) = 0;
  }
  uint64_t v18 = *(const void **)(v12 + 96);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(v12 + 96) = 0;
  }
  uint64_t v19 = *(const void **)(v12 + 104);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(v12 + 104) = 0;
  }
  uint64_t v20 = *(const void **)(v12 + 112);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(v12 + 112) = 0;
  }
  frameDataDestroy(*(const void ***)(*(void *)(a1 + 32) + 56));
  *(void *)(*(void *)(a1 + 32) + 56) = 0;
}

void *writebackCacheInitWithPool(void *result, const void *a2, uint64_t a3)
{
  if (result)
  {
    unint64_t v5 = result;
    MEMORY[0x19970E910](*result);
    int v6 = (const void *)v5[1];
    v5[1] = a2;
    if (a2) {
      CFRetain(a2);
    }
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = (const void *)v5[4];
    if (v7)
    {
      CFRelease(v7);
      v5[4] = 0;
    }
    v5[5] = a3;
    long long v8 = *MEMORY[0x1E4F1DB30];
    *((_OWORD *)v5 + 3) = *MEMORY[0x1E4F1DB30];
    *((_OWORD *)v5 + 4) = v8;
    *((_DWORD *)v5 + 20) = 0;
    *((unsigned char *)v5 + 84) = 0;
    JUMPOUT(0x19970E930);
  }
  return result;
}

void frameDataDestroy(const void **a1)
{
  if (a1)
  {
    uint64_t v2 = *a1;
    if (v2) {
      CFRelease(v2);
    }
    uint64_t v3 = a1[18];
    if (v3) {
      CFRelease(v3);
    }
    free(a1);
  }
}

void tapDestroy(uint64_t a1)
{
  if (a1)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFTypeRef v3 = *(CFTypeRef *)a1;
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4) {
      uint64_t v5 = v4;
    }
    else {
      uint64_t v5 = 0;
    }
    int v6 = *(void (**)(CFTypeRef, void))(v5 + 16);
    if (v6) {
      v6(v3, 0);
    }
    if (*(void *)a1) {
      CFRelease(*(CFTypeRef *)a1);
    }
    uint64_t v7 = *(const void **)(a1 + 8);
    if (v7) {
      CFRelease(v7);
    }
    long long v8 = *(const void **)(a1 + 16);
    if (v8) {
      CFRelease(v8);
    }
    free((void *)a1);
  }
}

void __fvdp_setProperty_block_invoke(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (*(_DWORD *)(*(void *)(a1 + 40) + 24) == 2)
    {
      CFMutableArrayRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, @"originalDisplaySize", *(const void **)(a1 + 32));
      uint64_t CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(*(void *)(*(void *)(a1 + 40) + 64));
      uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v4) {
        uint64_t v5 = v4;
      }
      else {
        uint64_t v5 = 0;
      }
      int v6 = *(void (**)(uint64_t, __CFString *, __CFDictionary *))(v5 + 56);
      if (v6) {
        v6(CMBaseObject, @"extraInfo", Mutable);
      }
      if (Mutable) {
        CFRelease(Mutable);
      }
    }
    uint64_t v7 = *(const void **)(a1 + 32);
    if (v7)
    {
      CFRelease(v7);
    }
  }
}

const void *__fvdp_setProperty_block_invoke_2(uint64_t a1)
{
  uint64_t result = *(const void **)(a1 + 32);
  if (result)
  {
    CFTypeID v3 = CFGetTypeID(result);
    uint64_t result = (const void *)CFStringGetTypeID();
    if ((const void *)v3 == result)
    {
      uint64_t v4 = *(void *)(a1 + 40);
      if (!*(_DWORD *)(v4 + 24) && !*(void *)(v4 + 16))
      {
        uint64_t result = FVDUtilsCreateLogPrefix(*(const __CFString **)(a1 + 32), *(void *)(a1 + 48));
        *(void *)(*(void *)(a1 + 40) + 16) = result;
      }
    }
  }
  return result;
}

uint64_t fvdp_plugSink(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x2000000000;
  int v21 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(__CFString **)(DerivedStorage + 16);
  if (dword_1E93512B0)
  {
    unsigned int v17 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (a2)
  {
    int v6 = *(NSObject **)DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fvdp_plugSink_block_invoke;
    block[3] = &unk_1E57A09A8;
    void block[5] = DerivedStorage;
    void block[6] = a2;
    block[4] = &v18;
    dispatch_sync(v6, block);
    if (!*((_DWORD *)v19 + 6))
    {
      uint64_t v12 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    long long v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *((_DWORD *)v19 + 6) = -12070;
  }
  unsigned int v17 = 0;
  os_log_type_t type = OS_LOG_TYPE_DEFAULT;
  uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v8 = v17;
  if (os_log_type_enabled(v7, type)) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = v8 & 0xFFFFFFFE;
  }
  if (v9)
  {
    long long v10 = &stru_1EE53F4B8;
    if (v4) {
      long long v10 = v4;
    }
    int v11 = *((_DWORD *)v19 + 6);
    int v22 = 138412802;
    uint64_t v23 = v10;
    __int16 v24 = 2080;
    CMTime v25 = "fvdp_plugSink";
    __int16 v26 = 1024;
    LODWORD(v27) = v11;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v12 = *((unsigned int *)v19 + 6);
LABEL_14:
  _Block_object_dispose(&v18, 8);
  return v12;
}

uint64_t fvdp_unplugSink(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  int v20 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(__CFString **)(DerivedStorage + 16);
  if (dword_1E93512B0)
  {
    unsigned int v16 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v6 = *(NSObject **)DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdp_unplugSink_block_invoke;
  block[3] = &unk_1E57A09D0;
  void block[5] = DerivedStorage;
  void block[6] = a2;
  block[4] = &v17;
  dispatch_sync(v6, block);
  if (*((_DWORD *)v18 + 6))
  {
    unsigned int v16 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v8 = v16;
    if (os_log_type_enabled(v7, type)) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = v8 & 0xFFFFFFFE;
    }
    if (v9)
    {
      long long v10 = &stru_1EE53F4B8;
      if (v4) {
        long long v10 = v4;
      }
      int v11 = *((_DWORD *)v18 + 6);
      int v21 = 138412802;
      int v22 = v10;
      __int16 v23 = 2080;
      __int16 v24 = "fvdp_unplugSink";
      __int16 v25 = 1024;
      LODWORD(v26) = v11;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v12 = *((unsigned int *)v18 + 6);
  }
  else
  {
    uint64_t v12 = 0;
  }
  _Block_object_dispose(&v17, 8);
  return v12;
}

uint64_t fvdp_start(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2000000000;
  int v20 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = *(__CFString **)(DerivedStorage + 16);
  if (dword_1E93512B0)
  {
    unsigned int v16 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v6 = *(NSObject **)DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdp_start_block_invoke;
  block[3] = &unk_1E57A0A20;
  block[4] = &v17;
  void block[5] = DerivedStorage;
  void block[6] = v4;
  void block[7] = a2;
  dispatch_sync(v6, block);
  if (*((_DWORD *)v18 + 6))
  {
    unsigned int v16 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v8 = v16;
    if (os_log_type_enabled(v7, type)) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = v8 & 0xFFFFFFFE;
    }
    if (v9)
    {
      long long v10 = &stru_1EE53F4B8;
      if (v4) {
        long long v10 = v4;
      }
      int v11 = *((_DWORD *)v18 + 6);
      int v21 = 138412802;
      int v22 = v10;
      __int16 v23 = 2080;
      __int16 v24 = "fvdp_start";
      __int16 v25 = 1024;
      LODWORD(v26) = v11;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v12 = *((unsigned int *)v18 + 6);
  }
  else
  {
    uint64_t v12 = 0;
  }
  _Block_object_dispose(&v17, 8);
  return v12;
}

uint64_t fvdp_stop()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 16);
  if (dword_1E93512B0)
  {
    int v7 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeID v3 = *(NSObject **)DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdp_stop_block_invoke;
  block[3] = &__block_descriptor_tmp_406;
  block[4] = DerivedStorage;
  void block[5] = v1;
  dispatch_sync(v3, block);
  return 0;
}

uint64_t fvdp_suspend()
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 16);
  if (dword_1E93512B0)
  {
    int v7 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeID v3 = *(NSObject **)DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdp_suspend_block_invoke;
  block[3] = &__block_descriptor_tmp_411;
  block[4] = DerivedStorage;
  void block[5] = v1;
  dispatch_sync(v3, block);
  return 0;
}

uint64_t fvdp_resume()
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = 0;
  long long v10 = &v9;
  uint64_t v11 = 0x2000000000;
  int v12 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = *(void *)(DerivedStorage + 16);
  if (dword_1E93512B0)
  {
    int v8 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFTypeID v3 = *(NSObject **)DerivedStorage;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdp_resume_block_invoke;
  block[3] = &unk_1E57A0C08;
  void block[5] = DerivedStorage;
  void block[6] = v1;
  block[4] = &v9;
  dispatch_sync(v3, block);
  uint64_t v4 = *((unsigned int *)v10 + 6);
  _Block_object_dispose(&v9, 8);
  return v4;
}

uint64_t fvdp_copySupportedDigitalOutModes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E93512B0)
  {
    int v11 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v7 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdp_copySupportedDigitalOutModes_block_invoke;
  block[3] = &__block_descriptor_tmp_414;
  block[4] = a2;
  void block[5] = DerivedStorage;
  void block[6] = a3;
  dispatch_sync(v7, block);
  return 0;
}

uint64_t fvdp_setDigitalOutMode(uint64_t a1, int a2, int a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E93512B0)
  {
    int v13 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  int v7 = *(NSObject **)(DerivedStorage + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdp_setDigitalOutMode_block_invoke;
  block[3] = &__block_descriptor_tmp_415;
  block[4] = DerivedStorage;
  int v10 = a2;
  int v11 = a3;
  dispatch_async(v7, block);
  return 0;
}

uint64_t fvdp_enableMirroring(uint64_t a1, int a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (dword_1E93512B0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(unsigned char *)(DerivedStorage + 216) = a2 == 0;
  return 0;
}

uint64_t fvdp_submitPixelBuffer(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, __CVBuffer *a10, uint64_t a11, int a12, const void *a13)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  char v26 = *(unsigned char *)(DerivedStorage + 216);
  if (dword_1E93512B0 >= 2)
  {
    int v42 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(DerivedStorage + 24) == 2)
  {
    if (a10)
    {
      int v27 = *(_DWORD *)(DerivedStorage + 640);
      if (!v27)
      {
        *(_DWORD *)(DerivedStorage + 640) = 2;
        __dmb(0xBu);
        int v27 = *(_DWORD *)(DerivedStorage + 640);
      }
      if (v27 == 1)
      {
        CFTypeRef v28 = CVBufferCopyAttachment(a10, @"FVDWritebackBuffer", 0);
        int v29 = FigCFEqual();
        if (v28) {
          CFRelease(v28);
        }
        if (!v29)
        {
          uint64_t v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          return 4294955226;
        }
      }
      long long v30 = (double *)malloc_type_calloc(1uLL, 0xA8uLL, 0x10E0040FEF2BE32uLL);
      CFRetain(a10);
    }
    else
    {
      long long v30 = (double *)malloc_type_calloc(1uLL, 0xA8uLL, 0x10E0040FEF2BE32uLL);
    }
    *(void *)long long v30 = a10;
    v30[1] = a1;
    v30[2] = a2;
    v30[3] = a3;
    v30[4] = a4;
    v30[5] = a5;
    v30[6] = a6;
    v30[7] = a7;
    v30[8] = a8;
    *((_DWORD *)v30 + 34) = a12;
    *((void *)v30 + 19) = FigHostTimeToNanoseconds();
    *((void *)v30 + 9) = a11;
    if (a13) {
      CFTypeRef v31 = CFRetain(a13);
    }
    else {
      CFTypeRef v31 = 0;
    }
    *((void *)v30 + 18) = v31;
    if (*(unsigned char *)(DerivedStorage + 752) || *(unsigned char *)(DerivedStorage + 753)) {
      *((void *)v30 + 12) = mach_absolute_time();
    }
    if (*(unsigned char *)(DerivedStorage + 754) && *MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    if (*(unsigned char *)(DerivedStorage + 744) || *(unsigned char *)(DerivedStorage + 745)) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(DerivedStorage + 696), 1u, memory_order_relaxed);
    }
    if (a10)
    {
      int v32 = *(_DWORD *)(DerivedStorage + 736);
      *(_DWORD *)(DerivedStorage + 736) = v32 + 1;
      if (!v32)
      {
        int v42 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        CFAllocatorRef v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    uint64_t v35 = *(NSObject **)(DerivedStorage + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fvdp_submitPixelBuffer_block_invoke;
    block[3] = &__block_descriptor_tmp_417;
    char v40 = v26;
    block[4] = DerivedStorage;
    void block[5] = v30;
    dispatch_async(v35, block);
    return 0;
  }
  else
  {
    uint64_t v37 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 4294955224;
  }
}

uint64_t fvdp_copyWritebackPixelBuffer(double a1, double a2, uint64_t a3, int a4, int a5, CVBufferRef *a6)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  int v11 = *(unsigned __int8 *)(DerivedStorage + 216);
  uint64_t v12 = *(__CFString **)(DerivedStorage + 16);
  if (dword_1E93512B0 >= 2)
  {
    int v13 = *(__CFString **)(DerivedStorage + 16);
    unsigned int v39 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v12 = v13;
  }
  if (*(_DWORD *)(DerivedStorage + 24) == 2)
  {
    if (a1 == *MEMORY[0x1E4F1DB30] && a2 == *(double *)(MEMORY[0x1E4F1DB30] + 8))
    {
      unsigned int v39 = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      int v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v19 = 4294955226;
    }
    else
    {
      int v16 = *(_DWORD *)(DerivedStorage + 640);
      if (!v16)
      {
        *(_DWORD *)(DerivedStorage + 640) = 1;
        __dmb(0xBu);
        int v16 = *(_DWORD *)(DerivedStorage + 640);
      }
      if (v16 == 1)
      {
        int v17 = *(_DWORD *)(DerivedStorage + 740);
        *(_DWORD *)(DerivedStorage + 740) = v17 + 1;
        if (!v17)
        {
          unsigned int v39 = 0;
          os_log_type_t type = OS_LOG_TYPE_DEFAULT;
          uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (writebackCacheCopyBuffer(*(void **)(DerivedStorage + 648), a4, v11, a6, a1, a2)) {
          return 0;
        }
        if (a5)
        {
          if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(DerivedStorage + 656), 1u, memory_order_relaxed) > 29)
          {
            atomic_fetch_add_explicit((atomic_uint *volatile)(DerivedStorage + 656), 0xFFFFFFFF, memory_order_relaxed);
            unsigned int v39 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            int v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          else
          {
            int v20 = *(NSObject **)(DerivedStorage + 8);
            block[0] = MEMORY[0x1E4F143A8];
            block[1] = 0x40000000;
            block[2] = __fvdp_copyWritebackPixelBuffer_block_invoke;
            block[3] = &__block_descriptor_tmp_442;
            block[4] = DerivedStorage;
            *(double *)&void block[5] = a1;
            *(double *)&void block[6] = a2;
            int v36 = a4;
            char v37 = v11;
            dispatch_async(v20, block);
          }
        }
        else
        {
          int v21 = *(NSObject **)(DerivedStorage + 8);
          v32[0] = MEMORY[0x1E4F143A8];
          v32[1] = 0x40000000;
          v32[2] = __fvdp_copyWritebackPixelBuffer_block_invoke_443;
          v32[3] = &__block_descriptor_tmp_444;
          v32[4] = DerivedStorage;
          *(double *)&v32[5] = a1;
          *(double *)&v32[6] = a2;
          int v33 = a4;
          char v34 = v11;
          dispatch_sync(v21, v32);
        }
        if (writebackCacheCopyBuffer(*(void **)(DerivedStorage + 648), a4, v11, a6, a1, a2)) {
          uint64_t v19 = 0;
        }
        else {
          uint64_t v19 = 4294955223;
        }
      }
      else
      {
        unsigned int v39 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        long long v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v19 = FigSignalErrorAt();
      }
    }
  }
  else
  {
    unsigned int v39 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    CFTypeRef v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v19 = 4294955224;
  }
  if (v19 && dword_1E93512B0 >= 2)
  {
    unsigned int v39 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    __int16 v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v24 = v39;
    if (os_log_type_enabled(v23, type)) {
      unsigned int v25 = v24;
    }
    else {
      unsigned int v25 = v24 & 0xFFFFFFFE;
    }
    if (v25)
    {
      char v26 = &stru_1EE53F4B8;
      if (v12) {
        char v26 = v12;
      }
      int v40 = 138412802;
      uint64_t v41 = v26;
      __int16 v42 = 2080;
      uint64_t v43 = "fvdp_copyWritebackPixelBuffer";
      __int16 v44 = 1024;
      LODWORD(v45) = v19;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v19;
}

CFTypeRef *__fvdp_plugSink_block_invoke(CFTypeRef *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[5];
  if (v2[6] || *((void *)v2 + 8))
  {
    *(_DWORD *)(*((void *)result[4] + 1) + 24) = -12070;
  }
  else
  {
    uint64_t result = (CFTypeRef *)CFRetain(result[6]);
    *((void *)v1[5] + 8) = v1[6];
  }
  return result;
}

void __fvdp_unplugSink_block_invoke(void *a1)
{
  uint64_t v2 = a1[5];
  if (!*(_DWORD *)(v2 + 24) && (CFTypeID v3 = *(const void **)(v2 + 64), v3 == (const void *)a1[6]))
  {
    if (v3)
    {
      CFRelease(v3);
      *(void *)(a1[5] + 64) = 0;
    }
  }
  else
  {
    *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = -12070;
  }
}

void __fvdp_start_block_invoke(void *a1)
{
  uint64_t v237 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  char v216 = 0;
  uint64_t v2 = a1[5];
  if (*(_DWORD *)(v2 + 24) || (uint64_t v4 = *(void *)(v2 + 64)) == 0)
  {
    LODWORD(v231) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_358:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v201 = *(void *)(a1[4] + 8);
    int v202 = -12070;
LABEL_359:
    *(_DWORD *)(v201 + 24) = v202;
    goto LABEL_360;
  }
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(v4);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, uint64_t))(v8 + 48);
  if (v9) {
    v9(CMBaseObject, @"Type", v5, v2 + 72);
  }
  if (dword_1E93512B0)
  {
    LODWORD(v231) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    int v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v11 = a1[5];
  *(void *)(v11 + 32) = 65000000000;
  *(unsigned char *)(v11 + 48) = 0;
  *(_DWORD *)(v11 + 324) = 875704422;
  *(void *)(v11 + 640) = 0x3432306600000000;
  *(_DWORD *)(v11 + 656) = 0;
  *(void *)(v11 + 392) = 0;
  uint64_t v12 = *(void *)(v11 + 648);
  int v13 = *(const void **)(v12 + 24);
  if (v13) {
    CFRelease(v13);
  }
  *(void *)(v12 + 24) = 0;
  *(_DWORD *)(v11 + 368) = 0;
  *(_DWORD *)(v11 + 320) = 1718908515;
  *(void *)(v11 + 496) = 100000000;
  *(void *)(v11 + 512) = 20;
  *(_DWORD *)(v11 + 520) = 0;
  *(unsigned char *)(v11 + 361) = 1;
  if (*(void *)(v11 + 504))
  {
    LODWORD(v231) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(void *)(v11 + 504) = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  uint64_t v14 = (const void *)*MEMORY[0x1E4F1CFD0];
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v11 + 504), (const void *)*MEMORY[0x1E4F447E8], (const void *)*MEMORY[0x1E4F1CFD0]);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v11 + 504), (const void *)*MEMORY[0x1E4F447D0], (const void *)*MEMORY[0x1E4F1CFC8]);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v11 + 504), (const void *)*MEMORY[0x1E4F44AC0], v14);
  fvdp_encoderControlSetBitrate(v11, 8000000);
  fvdp_encoderControlSetFramerate(v11, 60);
  *(void *)(v11 + 448) = 0;
  *(_DWORD *)(v11 + 472) = 30;
  *(void *)(v11 + 176) = 0x3FAEB851EB851EB8;
  *(_WORD *)(v11 + 216) = 0;
  *(unsigned char *)(v11 + 218) = 0;
  *(unsigned char *)(v11 + 360) = 0;
  *(unsigned char *)(v11 + 660) = 0;
  *(_DWORD *)(v11 + 480) = 0;
  if (colorTagForIndex_once != -1) {
    dispatch_once(&colorTagForIndex_once, &__block_literal_global_268);
  }
  *(void *)(v11 + 376) = &qword_1E934EDC8;
  *(_DWORD *)(v11 + 364) = 2;
  *(void *)(v11 + 408) = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt();
  FigCFDictionarySetValue();
  *(unsigned char *)(v11 + 744) = dword_1E93512B0 != 0;
  *(_WORD *)(v11 + 752) = 0;
  *(unsigned char *)(v11 + 754) = FigDebugIsInternalBuild();
  *(_WORD *)(v11 + 384) = 0;
  *(unsigned char *)(v11 + 386) = 1;
  if (CFEqual(*(CFTypeRef *)(v11 + 72), @"Octavia"))
  {
    *(_DWORD *)(v11 + 512) = 37;
    fvdp_encoderControlSetBitrate(v11, 20000000);
  }
  else if (CFEqual(*(CFTypeRef *)(v11 + 72), @"FileWriter"))
  {
    *(_DWORD *)(v11 + 472) = 0;
  }
  uint64_t v15 = a1[5];
  CFDictionaryRef v16 = (const __CFDictionary *)a1[7];
  double v231 = 0.0;
  *(_DWORD *)v218 = 0;
  if (v16)
  {
    Boolean Value = (__CFString *)CFDictionaryGetValue(v16, @"usage");
    uint64_t v18 = @"AirPlay";
    if (Value)
    {
      uint64_t v19 = Value;
      CFTypeID v20 = CFGetTypeID(Value);
      if (v20 == CFStringGetTypeID()) {
        uint64_t v18 = v19;
      }
    }
    if (CFEqual(v18, @"AirPlay")) {
      goto LABEL_26;
    }
    if (CFEqual(v18, @"CarPlay"))
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v15 + 504), (const void *)*MEMORY[0x1E4F448E0], v14);
      *(_DWORD *)(v15 + 512) = 38;
      if (colorTagForIndex_once != -1) {
        dispatch_once(&colorTagForIndex_once, &__block_literal_global_268);
      }
      int v21 = &qword_1E934ED28;
      goto LABEL_31;
    }
    if (CFEqual(v18, @"CarPlayHEVC"))
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(v15 + 504), (const void *)*MEMORY[0x1E4F448E0], v14);
      *(_DWORD *)(v15 + 320) = 1718908520;
      *(_DWORD *)(v15 + 512) = 38;
      if (colorTagForIndex_once != -1) {
        dispatch_once(&colorTagForIndex_once, &__block_literal_global_268);
      }
      *(void *)(v15 + 376) = &qword_1E934ED48;
      *(_DWORD *)(v15 + 364) = 3;
      if (FVDUtilsAGXPixelFormatsSupported())
      {
        *(_DWORD *)(v15 + 324) = 641230384;
        *(_DWORD *)(v15 + 644) = 641230384;
      }
      goto LABEL_32;
    }
    if (CFEqual(v18, @"Stevenote"))
    {
      LOBYTE(v232) = 0;
      buffer[0] = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      FigCFDictionaryGetBooleanIfPresent();
      *(void *)(v15 + 320) = 0x34343466736A7067;
      *(_DWORD *)(v15 + 644) = 1111970369;
      *(_DWORD *)(v15 + 472) = 1;
      *(_DWORD *)(v15 + 364) = 3;
      uint64_t v52 = v15;
      int v53 = 40000000;
    }
    else
    {
      if (!CFEqual(v18, @"AirPlayHEVC"))
      {
        if (!CFEqual(v18, @"AirPlayHDR"))
        {
          if (!CFEqual(v18, @"UncompressedHDR"))
          {
            if (CFEqual(v18, @"Valeria"))
            {
              *(_DWORD *)(v15 + 512) = 0;
              *(_DWORD *)(v15 + 472) = 0x7FFFFFFF;
            }
            else if (CFEqual(v18, @"Uncompressed"))
            {
              *(_DWORD *)(v15 + 320) = 1852796517;
              *(_DWORD *)(v15 + 472) = 0;
              *(_DWORD *)(v15 + 368) = 8;
            }
            goto LABEL_32;
          }
          CFDictionaryRef v56 = (const __CFDictionary *)CFDictionaryGetValue(v16, @"HDRInfo");
          *(_DWORD *)(v15 + 472) = 0;
          *(_DWORD *)(v15 + 368) = 8;
          *(void *)(v15 + 320) = 0x783432306E6F6E65;
          *(_DWORD *)(v15 + 644) = 2016686640;
          if (colorTagForIndex_once != -1) {
            dispatch_once(&colorTagForIndex_once, &__block_literal_global_268);
          }
          *(void *)(v15 + 376) = &qword_1E934ED88;
          *(unsigned char *)(v15 + 384) = 1;
          if (!v56)
          {
            uint64_t v59 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            goto LABEL_32;
          }
          CFDictionaryGetValue(v56, @"HDRMode");
          if (!FigCFEqual())
          {
LABEL_32:
            *(_DWORD *)os_log_type_t type = 0;
            os_log_type_t v220 = OS_LOG_TYPE_DEFAULT;
            int v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            if (FigCFDictionaryGetInt32IfPresent())
            {
              fvdp_encoderControlSetBitrate(v15, *(int *)v218);
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v220 = OS_LOG_TYPE_DEFAULT;
              __int16 v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (FigCFDictionaryGetInt32IfPresent())
            {
              fvdp_encoderControlSetFramerate(v15, *(int *)v218);
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v220 = OS_LOG_TYPE_DEFAULT;
              unsigned int v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (FigCFDictionaryGetInt32IfPresent())
            {
              int v25 = *(_DWORD *)v218;
              *(_DWORD *)(v15 + 324) = *(_DWORD *)v218;
              *(_DWORD *)(v15 + 644) = v25;
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v220 = OS_LOG_TYPE_DEFAULT;
              char v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (FigCFDictionaryGetDoubleIfPresent() && v231 > 0.0)
            {
              FigCFDictionarySetDouble();
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v220 = OS_LOG_TYPE_DEFAULT;
              int v27 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            if (*(int *)(v15 + 368) >= 1)
            {
              FigCFDictionaryGetInt32IfPresent();
              uint64_t v28 = *(void *)(v15 + 648);
              if (*(int *)(v15 + 368) < 1)
              {
                CFMutableDictionaryRef Mutable = 0;
              }
              else
              {
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v5, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
                FigCFDictionarySetInt32();
              }
              long long v30 = *(const void **)(v28 + 24);
              if (v30) {
                CFRelease(v30);
              }
              *(void *)(v28 + 24) = Mutable;
            }
            if (CFDictionaryContainsKey(v16, @"colorSpace")) {
              *(void *)(v15 + 376) = 0;
            }
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetInt32IfPresent();
            FigCFDictionaryGetBooleanIfPresent();
            FigCFDictionaryGetBooleanIfPresent();
            FigCFDictionaryGetBooleanIfPresent();
            CFDictionaryGetValue(v16, @"MirroringMode");
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v16, @"DisplayID");
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v16, @"ContentIDs");
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v16, @"DisplayLabel");
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v16, @"clientPID");
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v16, @"IncludePrivateContent");
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v16, @"AllowRemoteControlLayers");
            FigCFDictionarySetValue();
            CFDictionaryGetValue(v16, @"NotifyOnDisallowedCloningLayers");
            FigCFDictionarySetValue();
            if (FigCFDictionaryGetInt32IfPresent())
            {
              LODWORD(v232) = 0;
              FigCFDictionaryGetInt32IfPresent();
            }
            CFDictionaryRef v31 = (const __CFDictionary *)CFDictionaryGetValue(v16, @"encodeSettings");
            if (v31)
            {
              int v32 = CFDictionaryGetValue(v31, @"encoderUsage");
              int v33 = *(_DWORD *)(v15 + 512);
              if (prefsGetH264EncoderUsageIfValid((uint64_t)v32, (_DWORD *)(v15 + 512)))
              {
                if (v33 != *(_DWORD *)(v15 + 512))
                {
                  *(_DWORD *)os_log_type_t type = 0;
                  os_log_type_t v220 = OS_LOG_TYPE_DEFAULT;
                  char v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
              }
            }
            if (*(_DWORD *)(v15 + 320) != 1852796517 && FigCFDictionaryGetInt32IfPresent())
            {
              if (FVDUtilsEncoderCodecSupported(*(int *)v218)) {
                *(_DWORD *)(v15 + 320) = *(_DWORD *)v218;
              }
              *(_DWORD *)os_log_type_t type = 0;
              os_log_type_t v220 = OS_LOG_TYPE_DEFAULT;
              uint64_t v35 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
              fig_log_call_emit_and_clean_up_after_send_and_compose();
            }
            goto LABEL_69;
          }
          *(unsigned char *)(v15 + 385) = 1;
          if (colorTagForIndex_once != -1) {
            dispatch_once(&colorTagForIndex_once, &__block_literal_global_268);
          }
          int v21 = &qword_1E934EDA8;
LABEL_31:
          *(void *)(v15 + 376) = v21;
          goto LABEL_32;
        }
        if (!FVDUtilsHEVCEncoderSupports42010()) {
          goto LABEL_117;
        }
        *(void *)(v15 + 320) = 0x7834323066747668;
        *(_DWORD *)(v15 + 644) = 2016686640;
        *(_DWORD *)(v15 + 364) = 3;
        if (colorTagForIndex_once != -1) {
          dispatch_once(&colorTagForIndex_once, &__block_literal_global_268);
        }
        *(void *)(v15 + 376) = &qword_1E934ED88;
        *(unsigned char *)(v15 + 384) = 1;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v15 + 504), (const void *)*MEMORY[0x1E4F44928], (const void *)*MEMORY[0x1E4F44FB8]);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(v15 + 504), (const void *)*MEMORY[0x1E4F44A88], v14);
        fvdp_encoderControlSetBitrate(v15, 15000000);
        CFDictionaryRef v54 = (const __CFDictionary *)CFDictionaryGetValue(v16, @"HDRInfo");
        if (v54)
        {
          CFDictionaryGetValue(v54, @"HDRMode");
          if (FigCFEqual())
          {
            *(unsigned char *)(v15 + 385) = 1;
            if (colorTagForIndex_once != -1) {
              dispatch_once(&colorTagForIndex_once, &__block_literal_global_268);
            }
            *(void *)(v15 + 376) = &qword_1E934EDA8;
          }
        }
        else
        {
LABEL_117:
          uint64_t v57 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
LABEL_26:
        fvdp_applyProtectionOptions(v15, v16);
        goto LABEL_32;
      }
      if (FVDUtilsHEVCEncoderSupports4K60())
      {
        if (FVDUtilsLoadVCPEncoder()) {
          int v51 = 1718908520;
        }
        else {
          int v51 = 1752589105;
        }
        *(_DWORD *)(v15 + 320) = v51;
        *(_DWORD *)(v15 + 364) = 3;
      }
      else
      {
        uint64_t v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        *(_DWORD *)(v15 + 320) = 1718908515;
      }
      uint64_t v52 = v15;
      int v53 = 10000000;
    }
    fvdp_encoderControlSetBitrate(v52, v53);
    goto LABEL_26;
  }
LABEL_69:
  uint64_t v36 = a1[5];
  char v219 = 0;
  char v37 = *(__CFString **)(v36 + 16);
  CFPropertyListRef v38 = FigVirtualDisplayPrefsCopyValue(@"wirelessdisplay_encoderusage");
  if (v38)
  {
    unsigned int v39 = v38;
    int v40 = *(_DWORD *)(v36 + 512);
    if (prefsGetH264EncoderUsageIfValid((uint64_t)v38, (_DWORD *)(v36 + 512))
      && v40 != *(_DWORD *)(v36 + 512))
    {
      LODWORD(v231) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFRelease(v39);
  }
  char v219 = 0;
  CFStringRef v42 = (const __CFString *)FigVirtualDisplayPrefsCopyValue(@"wirelessdisplay_encoderpriority");
  if (v42)
  {
    CFStringRef v43 = v42;
    *(_DWORD *)v218 = 40;
    FigCFDictionaryGetInt32IfPresent();
    CFTypeID v44 = CFGetTypeID(v43);
    if (v44 == CFStringGetTypeID())
    {
      if (CFStringGetCString(v43, buffer, 32, 0x8000100u))
      {
        uint64_t v45 = 0;
        while (strcasecmp(buffer, prefsGetEncoderPriorityIfValid_names[v45]))
        {
          if (++v45 == 5) {
            goto LABEL_122;
          }
        }
        int v46 = prefsGetEncoderPriorityIfValid_values[v45];
        if (*(_DWORD *)v218 == v46) {
          goto LABEL_124;
        }
        FigCFDictionarySetInt32();
        LODWORD(v231) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        uint64_t v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v48 = LODWORD(v231);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT)) {
          unsigned int v49 = v48;
        }
        else {
          unsigned int v49 = v48 & 0xFFFFFFFE;
        }
        if (v49)
        {
          uint64_t v50 = &stru_1EE53F4B8;
          if (v37) {
            uint64_t v50 = v37;
          }
          *(_DWORD *)buffer = 138413058;
          v223 = v50;
          __int16 v224 = 2080;
          v225 = "fvdp_initFromPrefs";
          __int16 v226 = 1024;
          *(_DWORD *)CFAllocatorRef v227 = *(_DWORD *)v218;
          *(_WORD *)&v227[4] = 1024;
          *(_DWORD *)&v227[6] = v46;
          _os_log_send_and_compose_impl();
        }
      }
      else
      {
LABEL_122:
        *(_DWORD *)os_log_type_t type = 0;
        os_log_type_t v220 = OS_LOG_TYPE_DEFAULT;
        uint64_t v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT);
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
LABEL_124:
    CFRelease(v43);
  }
  char v219 = 0;
  double Double = FigVirtualDisplayPrefsGetDouble(@"wirelessdisplay_keyframe_interval", &v219);
  if (v219)
  {
    double v62 = Double;
    if (Double > 0.0)
    {
      FigCFDictionarySetDouble();
      LODWORD(v231) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      CFNumberRef v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v64 = LODWORD(v231);
      if (os_log_type_enabled(v63, type[0])) {
        unsigned int v65 = v64;
      }
      else {
        unsigned int v65 = v64 & 0xFFFFFFFE;
      }
      if (v65)
      {
        int v66 = &stru_1EE53F4B8;
        if (v37) {
          int v66 = v37;
        }
        *(_DWORD *)buffer = 138412802;
        v223 = v66;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2048;
        *(double *)CFAllocatorRef v227 = v62;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  char v219 = 0;
  int Integer = FigVirtualDisplayPrefsGetInteger(@"wirelessdisplay_bitrate", (Boolean *)&v219);
  if (v219)
  {
    int v68 = Integer;
    fvdp_encoderControlSetBitrate(v36, Integer);
    *(unsigned char *)(v36 + 601) = 1;
    LODWORD(v231) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    unsigned int v69 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v70 = LODWORD(v231);
    if (os_log_type_enabled(v69, type[0])) {
      unsigned int v71 = v70;
    }
    else {
      unsigned int v71 = v70 & 0xFFFFFFFE;
    }
    if (v71)
    {
      uint64_t v72 = &stru_1EE53F4B8;
      if (v37) {
        uint64_t v72 = v37;
      }
      *(_DWORD *)buffer = 138412802;
      v223 = v72;
      __int16 v224 = 2080;
      v225 = "fvdp_initFromPrefs";
      __int16 v226 = 1024;
      *(_DWORD *)CFAllocatorRef v227 = v68;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  char v219 = 0;
  int v73 = FigVirtualDisplayPrefsGetInteger(@"wirelessdisplay_fps", (Boolean *)&v219);
  if (v219)
  {
    int v74 = v73;
    fvdp_encoderControlSetFramerate(v36, v73);
    *(unsigned char *)(v36 + 602) = 1;
    LODWORD(v231) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v75 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v76 = LODWORD(v231);
    if (os_log_type_enabled(v75, type[0])) {
      unsigned int v77 = v76;
    }
    else {
      unsigned int v77 = v76 & 0xFFFFFFFE;
    }
    if (v77)
    {
      uint64_t v78 = &stru_1EE53F4B8;
      if (v37) {
        uint64_t v78 = v37;
      }
      *(_DWORD *)buffer = 138412802;
      v223 = v78;
      __int16 v224 = 2080;
      v225 = "fvdp_initFromPrefs";
      __int16 v226 = 1024;
      *(_DWORD *)CFAllocatorRef v227 = v74;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  char v219 = 0;
  int v79 = FigVirtualDisplayPrefsGetInteger(@"wirelessdisplay_inactivity_timeout", (Boolean *)&v219);
  if (v219)
  {
    int v80 = v79;
    if (v79 >= 1)
    {
      *(void *)(v36 + 32) = 1000000000 * v79;
      LODWORD(v231) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      int v81 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v82 = LODWORD(v231);
      if (os_log_type_enabled(v81, type[0])) {
        unsigned int v83 = v82;
      }
      else {
        unsigned int v83 = v82 & 0xFFFFFFFE;
      }
      if (v83)
      {
        uint64_t v84 = &stru_1EE53F4B8;
        if (v37) {
          uint64_t v84 = v37;
        }
        *(_DWORD *)buffer = 138412802;
        v223 = v84;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 1024;
        *(_DWORD *)CFAllocatorRef v227 = v80;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (*(_DWORD *)(v36 + 320) != 1852796517)
  {
    prefsGetOSTypeIfPresent(@"wirelessdisplay_encoder_codec_type", (int *)(v36 + 320));
    int v85 = *(_DWORD *)(v36 + 320);
    if (v85 == 1718908520 || v85 == 1718908515) {
      FVDUtilsLoadVCPEncoder();
    }
  }
  prefsGetOSTypeIfPresent(@"wirelessdisplay_encoder_input_pixel_format", (int *)(v36 + 324));
  prefsGetOSTypeIfPresent(@"wirelessdisplay_writeback_pixel_format", (int *)(v36 + 644));
  int v86 = *(_DWORD *)(v36 + 364);
  type[0] = OS_LOG_TYPE_DEFAULT;
  int v87 = FigVirtualDisplayPrefsGetInteger(@"wirelessdisplay_encodermaxframes", (Boolean *)type);
  if (type[0])
  {
    int v88 = v87;
    *(_DWORD *)(v36 + 364) = v87;
    if (v87 != v86)
    {
      LODWORD(v231) = 0;
      v218[0] = OS_LOG_TYPE_DEFAULT;
      unsigned int v89 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v90 = LODWORD(v231);
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v91 = v90;
      }
      else {
        unsigned int v91 = v90 & 0xFFFFFFFE;
      }
      if (v91)
      {
        CMTime v92 = &stru_1EE53F4B8;
        if (v37) {
          CMTime v92 = v37;
        }
        *(_DWORD *)buffer = 138413314;
        v223 = v92;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2112;
        *(void *)CFAllocatorRef v227 = @"wirelessdisplay_encodermaxframes";
        *(_WORD *)&v227[8] = 2048;
        double v228 = (double)v86;
        __int16 v229 = 2048;
        double v230 = (double)v88;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  int v93 = *(_DWORD *)(v36 + 472);
  type[0] = OS_LOG_TYPE_DEFAULT;
  int v94 = FigVirtualDisplayPrefsGetInteger(@"wirelessdisplay_maxtimesreencodeidle", (Boolean *)type);
  if (type[0])
  {
    int v95 = v94;
    *(_DWORD *)(v36 + 472) = v94;
    if (v94 != v93)
    {
      LODWORD(v231) = 0;
      v218[0] = OS_LOG_TYPE_DEFAULT;
      long long v96 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v97 = LODWORD(v231);
      if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v98 = v97;
      }
      else {
        unsigned int v98 = v97 & 0xFFFFFFFE;
      }
      if (v98)
      {
        uint64_t v99 = &stru_1EE53F4B8;
        if (v37) {
          uint64_t v99 = v37;
        }
        *(_DWORD *)buffer = 138413314;
        v223 = v99;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2112;
        *(void *)CFAllocatorRef v227 = @"wirelessdisplay_maxtimesreencodeidle";
        *(_WORD *)&v227[8] = 2048;
        double v228 = (double)v93;
        __int16 v229 = 2048;
        double v230 = (double)v95;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  int v100 = *(_DWORD *)(v36 + 516);
  type[0] = OS_LOG_TYPE_DEFAULT;
  int v101 = FigVirtualDisplayPrefsGetInteger(@"wirelessdisplay_minrepeatedframes", (Boolean *)type);
  if (type[0])
  {
    int v102 = v101;
    *(_DWORD *)(v36 + 516) = v101;
    if (v101 != v100)
    {
      LODWORD(v231) = 0;
      v218[0] = OS_LOG_TYPE_DEFAULT;
      int v103 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v104 = LODWORD(v231);
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v105 = v104;
      }
      else {
        unsigned int v105 = v104 & 0xFFFFFFFE;
      }
      if (v105)
      {
        uint64_t v106 = &stru_1EE53F4B8;
        if (v37) {
          uint64_t v106 = v37;
        }
        *(_DWORD *)buffer = 138413314;
        v223 = v106;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2112;
        *(void *)CFAllocatorRef v227 = @"wirelessdisplay_minrepeatedframes";
        *(_WORD *)&v227[8] = 2048;
        double v228 = (double)v100;
        __int16 v229 = 2048;
        double v230 = (double)v102;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  unsigned int v107 = *(unsigned __int8 *)(v36 + 660);
  type[0] = OS_LOG_TYPE_DEFAULT;
  unsigned int Boolean = FigVirtualDisplayPrefsGetBoolean(@"wirelessdisplay_forcebuffercopy", (Boolean *)type);
  if (type[0])
  {
    unsigned int v109 = Boolean;
    *(unsigned char *)(v36 + 660) = Boolean;
    if (Boolean != v107)
    {
      LODWORD(v231) = 0;
      v218[0] = OS_LOG_TYPE_DEFAULT;
      int v110 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v111 = LODWORD(v231);
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v112 = v111;
      }
      else {
        unsigned int v112 = v111 & 0xFFFFFFFE;
      }
      if (v112)
      {
        CMTime v113 = &stru_1EE53F4B8;
        if (v37) {
          CMTime v113 = v37;
        }
        *(_DWORD *)buffer = 138413314;
        v223 = v113;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2112;
        *(void *)CFAllocatorRef v227 = @"wirelessdisplay_forcebuffercopy";
        *(_WORD *)&v227[8] = 2048;
        double v228 = (double)v107;
        __int16 v229 = 2048;
        double v230 = (double)v109;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  unsigned int v114 = *(unsigned __int8 *)(v36 + 361);
  type[0] = OS_LOG_TYPE_DEFAULT;
  unsigned int v115 = FigVirtualDisplayPrefsGetBoolean(@"wirelessdisplay_enable_hw_acc", (Boolean *)type);
  if (type[0])
  {
    unsigned int v116 = v115;
    *(unsigned char *)(v36 + 361) = v115;
    if (v115 != v114)
    {
      LODWORD(v231) = 0;
      v218[0] = OS_LOG_TYPE_DEFAULT;
      CMTime v117 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v118 = LODWORD(v231);
      if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v119 = v118;
      }
      else {
        unsigned int v119 = v118 & 0xFFFFFFFE;
      }
      if (v119)
      {
        uint64_t v120 = &stru_1EE53F4B8;
        if (v37) {
          uint64_t v120 = v37;
        }
        *(_DWORD *)buffer = 138413314;
        v223 = v120;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2112;
        *(void *)CFAllocatorRef v227 = @"wirelessdisplay_enable_hw_acc";
        *(_WORD *)&v227[8] = 2048;
        double v228 = (double)v114;
        __int16 v229 = 2048;
        double v230 = (double)v116;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  unsigned int v121 = *(unsigned __int8 *)(v36 + 218);
  type[0] = OS_LOG_TYPE_DEFAULT;
  unsigned int v122 = FigVirtualDisplayPrefsGetBoolean(@"wirelessdisplay_fill_display", (Boolean *)type);
  if (type[0])
  {
    unsigned int v123 = v122;
    *(unsigned char *)(v36 + 218) = v122;
    if (v122 != v121)
    {
      LODWORD(v231) = 0;
      v218[0] = OS_LOG_TYPE_DEFAULT;
      __int16 v124 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v125 = LODWORD(v231);
      if (os_log_type_enabled(v124, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v126 = v125;
      }
      else {
        unsigned int v126 = v125 & 0xFFFFFFFE;
      }
      if (v126)
      {
        uint64_t v127 = &stru_1EE53F4B8;
        if (v37) {
          uint64_t v127 = v37;
        }
        *(_DWORD *)buffer = 138413314;
        v223 = v127;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2112;
        *(void *)CFAllocatorRef v227 = @"wirelessdisplay_fill_display";
        *(_WORD *)&v227[8] = 2048;
        double v228 = (double)v121;
        __int16 v229 = 2048;
        double v230 = (double)v123;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  unsigned int v128 = *(unsigned __int8 *)(v36 + 752);
  type[0] = OS_LOG_TYPE_DEFAULT;
  unsigned int v129 = FigVirtualDisplayPrefsGetBoolean(@"wirelessdisplay_enable_timestamps_logging", (Boolean *)type);
  if (type[0])
  {
    unsigned int v130 = v129;
    *(unsigned char *)(v36 + 752) = v129;
    if (v129 != v128)
    {
      LODWORD(v231) = 0;
      v218[0] = OS_LOG_TYPE_DEFAULT;
      int v131 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v132 = LODWORD(v231);
      if (os_log_type_enabled(v131, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v133 = v132;
      }
      else {
        unsigned int v133 = v132 & 0xFFFFFFFE;
      }
      if (v133)
      {
        __int16 v134 = &stru_1EE53F4B8;
        if (v37) {
          __int16 v134 = v37;
        }
        *(_DWORD *)buffer = 138413314;
        v223 = v134;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2112;
        *(void *)CFAllocatorRef v227 = @"wirelessdisplay_enable_timestamps_logging";
        *(_WORD *)&v227[8] = 2048;
        double v228 = (double)v128;
        __int16 v229 = 2048;
        double v230 = (double)v130;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  unsigned int v135 = *(unsigned __int8 *)(v36 + 753);
  type[0] = OS_LOG_TYPE_DEFAULT;
  unsigned int v136 = FigVirtualDisplayPrefsGetBoolean(@"wirelessdisplay_enable_timestamps_diagnostic", (Boolean *)type);
  if (type[0])
  {
    unsigned int v137 = v136;
    *(unsigned char *)(v36 + 753) = v136;
    if (v136 != v135)
    {
      LODWORD(v231) = 0;
      v218[0] = OS_LOG_TYPE_DEFAULT;
      __int16 v138 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v139 = LODWORD(v231);
      if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v140 = v139;
      }
      else {
        unsigned int v140 = v139 & 0xFFFFFFFE;
      }
      if (v140)
      {
        Float64 v141 = &stru_1EE53F4B8;
        if (v37) {
          Float64 v141 = v37;
        }
        *(_DWORD *)buffer = 138413314;
        v223 = v141;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2112;
        *(void *)CFAllocatorRef v227 = @"wirelessdisplay_enable_timestamps_diagnostic";
        *(_WORD *)&v227[8] = 2048;
        double v228 = (double)v135;
        __int16 v229 = 2048;
        double v230 = (double)v137;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  unsigned int v142 = *(unsigned __int8 *)(v36 + 744);
  type[0] = OS_LOG_TYPE_DEFAULT;
  unsigned int v143 = FigVirtualDisplayPrefsGetBoolean(@"wirelessdisplay_enable_stats_logging", (Boolean *)type);
  if (type[0])
  {
    unsigned int v144 = v143;
    *(unsigned char *)(v36 + 744) = v143;
    if (v143 != v142)
    {
      LODWORD(v231) = 0;
      v218[0] = OS_LOG_TYPE_DEFAULT;
      int v145 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v146 = LODWORD(v231);
      if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v147 = v146;
      }
      else {
        unsigned int v147 = v146 & 0xFFFFFFFE;
      }
      if (v147)
      {
        __int16 v148 = &stru_1EE53F4B8;
        if (v37) {
          __int16 v148 = v37;
        }
        *(_DWORD *)buffer = 138413314;
        v223 = v148;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2112;
        *(void *)CFAllocatorRef v227 = @"wirelessdisplay_enable_stats_logging";
        *(_WORD *)&v227[8] = 2048;
        double v228 = (double)v142;
        __int16 v229 = 2048;
        double v230 = (double)v144;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (*(unsigned char *)(v36 + 745)) {
    BOOL v149 = 1;
  }
  else {
    BOOL v149 = *(unsigned char *)(v36 + 753) != 0;
  }
  *(unsigned char *)(v36 + 745) = v149;
  unsigned int v150 = *(unsigned __int8 *)(v36 + 754);
  type[0] = OS_LOG_TYPE_DEFAULT;
  unsigned int v151 = FigVirtualDisplayPrefsGetBoolean(@"wirelessdisplay_enable_ktrace", (Boolean *)type);
  if (type[0])
  {
    unsigned int v152 = v151;
    *(unsigned char *)(v36 + 754) = v151;
    if (v151 != v150)
    {
      LODWORD(v231) = 0;
      v218[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v153 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v154 = LODWORD(v231);
      if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v155 = v154;
      }
      else {
        unsigned int v155 = v154 & 0xFFFFFFFE;
      }
      if (v155)
      {
        uint64_t v156 = &stru_1EE53F4B8;
        if (v37) {
          uint64_t v156 = v37;
        }
        *(_DWORD *)buffer = 138413314;
        v223 = v156;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2112;
        *(void *)CFAllocatorRef v227 = @"wirelessdisplay_enable_ktrace";
        *(_WORD *)&v227[8] = 2048;
        double v228 = (double)v150;
        __int16 v229 = 2048;
        double v230 = (double)v152;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (FigVirtualDisplayPrefsGetBooleanWithDefault(@"wirelessdisplay_enable_extended_color", *(unsigned __int8 *)(v36 + 360)))int v157 = FVDUtilsMainDisplaySupportsExtendedColor() != 0; {
  else
  }
    int v157 = 0;
  *(unsigned char *)(v36 + 360) = v157;
  if (dword_1E93512B0)
  {
    LODWORD(v231) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    uint64_t v158 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v159 = LODWORD(v231);
    if (os_log_type_enabled(v158, type[0])) {
      unsigned int v160 = v159;
    }
    else {
      unsigned int v160 = v159 & 0xFFFFFFFE;
    }
    if (v160)
    {
      CFTypeID v161 = &stru_1EE53F4B8;
      int v162 = *(unsigned __int8 *)(v36 + 360);
      if (v37) {
        CFTypeID v161 = v37;
      }
      *(_DWORD *)buffer = 138412802;
      v223 = v161;
      __int16 v224 = 2080;
      v225 = "fvdp_initFromPrefs";
      if (v162) {
        uint64_t v163 = "";
      }
      else {
        uint64_t v163 = "not ";
      }
      __int16 v226 = 2080;
      *(void *)CFAllocatorRef v227 = v163;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v157 = *(unsigned __int8 *)(v36 + 360);
  }
  if (v157)
  {
    if (colorTagForIndex_once != -1) {
      dispatch_once(&colorTagForIndex_once, &__block_literal_global_268);
    }
    *(void *)(v36 + 376) = &qword_1E934ED68;
  }
  char v219 = 0;
  unsigned int v164 = FigVirtualDisplayPrefsGetInteger(@"wirelessdisplay_colortag_index", (Boolean *)&v219);
  if (v219)
  {
    unsigned int v165 = v164;
    if (v164 > 6)
    {
      uint64_t v166 = 0;
    }
    else
    {
      if (colorTagForIndex_once != -1) {
        dispatch_once(&colorTagForIndex_once, &__block_literal_global_268);
      }
      uint64_t v166 = &colorTagForIndex_colorTags[4 * v165];
    }
    *(void *)(v36 + 376) = v166;
    if (dword_1E93512B0)
    {
      LODWORD(v231) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v167 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v168 = LODWORD(v231);
      if (os_log_type_enabled(v167, type[0])) {
        unsigned int v169 = v168;
      }
      else {
        unsigned int v169 = v168 & 0xFFFFFFFE;
      }
      if (v169)
      {
        double v170 = &stru_1EE53F4B8;
        if (v37) {
          double v170 = v37;
        }
        uint64_t v171 = *(const char ***)(v36 + 376);
        if (v171) {
          uint64_t v172 = *v171;
        }
        else {
          uint64_t v172 = "none";
        }
        *(_DWORD *)buffer = 138412802;
        v223 = v170;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2080;
        *(void *)CFAllocatorRef v227 = v172;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  uint64_t v232 = MEMORY[0x1E4F143A8];
  uint64_t v233 = 0x40000000;
  CFTypeID v234 = __prefsInitPixelBufferChromaLocation_block_invoke;
  uint64_t v235 = &__block_descriptor_tmp_378;
  uint64_t v236 = @"wirelessdisplay_chromalocation_index";
  if (prefsInitPixelBufferChromaLocation_once != -1) {
    dispatch_once(&prefsInitPixelBufferChromaLocation_once, &v232);
  }
  unsigned int v173 = *(unsigned __int8 *)(v36 + 386);
  type[0] = OS_LOG_TYPE_DEFAULT;
  unsigned int v174 = FigVirtualDisplayPrefsGetBoolean(@"wirelessdisplay_encode_in_process", (Boolean *)type);
  if (type[0])
  {
    unsigned int v175 = v174;
    *(unsigned char *)(v36 + 386) = v174;
    if (v174 != v173)
    {
      LODWORD(v231) = 0;
      v218[0] = OS_LOG_TYPE_DEFAULT;
      uint64_t v176 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v177 = LODWORD(v231);
      if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v178 = v177;
      }
      else {
        unsigned int v178 = v177 & 0xFFFFFFFE;
      }
      if (v178)
      {
        uint64_t v179 = &stru_1EE53F4B8;
        if (v37) {
          uint64_t v179 = v37;
        }
        *(_DWORD *)buffer = 138413314;
        v223 = v179;
        __int16 v224 = 2080;
        v225 = "fvdp_initFromPrefs";
        __int16 v226 = 2112;
        *(void *)CFAllocatorRef v227 = @"wirelessdisplay_encode_in_process";
        *(_WORD *)&v227[8] = 2048;
        double v228 = (double)v173;
        __int16 v229 = 2048;
        double v230 = (double)v175;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  fvdp_checkForTaps(v36, 1);
  uint64_t v180 = a1[5];
  uint64_t v181 = *(void *)(v180 + 64);
  uint64_t v232 = MEMORY[0x1E4F143A8];
  uint64_t v233 = 0x40000000;
  CFTypeID v234 = __fvdp_configureSink_block_invoke;
  uint64_t v235 = &__block_descriptor_tmp_395;
  uint64_t v236 = (__CFString *)v180;
  uint64_t v182 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v182) {
    uint64_t v183 = v182;
  }
  else {
    uint64_t v183 = 0;
  }
  uint64_t v184 = *(void (**)(uint64_t, uint64_t *))(v183 + 72);
  if (v184) {
    v184(v181, &v232);
  }
  if (*(unsigned char *)(v180 + 752) || *(unsigned char *)(v180 + 753))
  {
    uint64_t v185 = FigVirtualDisplaySinkGetCMBaseObject(*(void *)(v180 + 64));
    uint64_t v186 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v186) {
      uint64_t v187 = v186;
    }
    else {
      uint64_t v187 = 0;
    }
    uint64_t v188 = *(void (**)(uint64_t, __CFString *, __CFString *))(v187 + 56);
    if (v188) {
      v188(v185, @"anchorTimestampInfo", @"SubSu");
    }
    uint64_t v189 = *(void *)(v180 + 64);
    if (timestampsGetTimestampNameInfo_once != -1) {
      dispatch_once(&timestampsGetTimestampNameInfo_once, &__block_literal_global_56);
    }
    uint64_t v190 = timestampsGetTimestampNameInfo_timestampInfoArray;
    uint64_t v191 = FigVirtualDisplaySinkGetCMBaseObject(v189);
    uint64_t v192 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v192) {
      uint64_t v193 = v192;
    }
    else {
      uint64_t v193 = 0;
    }
    CFTypeID v194 = *(void (**)(uint64_t, __CFString *, uint64_t))(v193 + 56);
    if (v194) {
      v194(v191, @"timestampInfo", v190);
    }
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = fvdp_copySinkProperty(a1[5], @"displayInfo", (uint64_t)&cf);
  uint64_t v195 = a1[4];
  int v196 = *(_DWORD *)(*(void *)(v195 + 8) + 24);
  if (v196)
  {
    LODWORD(v231) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    v203 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v204 = LODWORD(v231);
    if (os_log_type_enabled(v203, type[0])) {
      unsigned int v205 = v204;
    }
    else {
      unsigned int v205 = v204 & 0xFFFFFFFE;
    }
    if (!v205) {
      goto LABEL_373;
    }
    char v206 = (__CFString *)a1[6];
    if (!v206) {
      char v206 = &stru_1EE53F4B8;
    }
    *(_DWORD *)buffer = 138413058;
    v223 = v206;
    __int16 v224 = 2080;
    v225 = "fvdp_start_block_invoke";
    __int16 v226 = 1024;
    *(_DWORD *)CFAllocatorRef v227 = 4320;
    *(_WORD *)&v227[4] = 1024;
    *(_DWORD *)&v227[6] = v196;
    goto LABEL_372;
  }
  if (!cf)
  {
    LODWORD(v231) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    CFTypeRef v207 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v208 = LODWORD(v231);
    if (os_log_type_enabled(v207, type[0])) {
      unsigned int v209 = v208;
    }
    else {
      unsigned int v209 = v208 & 0xFFFFFFFE;
    }
    if (v209)
    {
      uint64_t v210 = (__CFString *)a1[6];
      if (!v210) {
        uint64_t v210 = &stru_1EE53F4B8;
      }
      *(_DWORD *)buffer = 138412802;
      v223 = v210;
      __int16 v224 = 2080;
      v225 = "fvdp_start_block_invoke";
      __int16 v226 = 1024;
      *(_DWORD *)CFAllocatorRef v227 = 4321;
      _os_log_send_and_compose_impl();
    }
    goto LABEL_358;
  }
  uint64_t v197 = a1[5];
  uint64_t v198 = *(NSObject **)(v197 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdp_start_block_invoke_256;
  block[3] = &unk_1E57A09F8;
  block[4] = v195;
  void block[5] = v197;
  void block[6] = cf;
  dispatch_sync(v198, block);
  int v199 = *(_DWORD *)(*(void *)(a1[4] + 8) + 24);
  if (!v199)
  {
    FigCFDictionaryGetBooleanIfPresent();
    uint64_t v200 = a1[5];
    if (v216)
    {
      *(_DWORD *)(v200 + 24) = 1;
      goto LABEL_360;
    }
    fvdp_startTimers(v200);
    uint64_t v201 = a1[5];
    int v202 = 2;
    goto LABEL_359;
  }
  LODWORD(v231) = 0;
  type[0] = OS_LOG_TYPE_DEFAULT;
  uint64_t v211 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v212 = LODWORD(v231);
  if (os_log_type_enabled(v211, type[0])) {
    unsigned int v213 = v212;
  }
  else {
    unsigned int v213 = v212 & 0xFFFFFFFE;
  }
  if (v213)
  {
    v214 = (__CFString *)a1[6];
    if (!v214) {
      v214 = &stru_1EE53F4B8;
    }
    *(_DWORD *)buffer = 138413058;
    v223 = v214;
    __int16 v224 = 2080;
    v225 = "fvdp_start_block_invoke_2";
    __int16 v226 = 1024;
    *(_DWORD *)CFAllocatorRef v227 = 4325;
    *(_WORD *)&v227[4] = 1024;
    *(_DWORD *)&v227[6] = v199;
LABEL_372:
    _os_log_send_and_compose_impl();
  }
LABEL_373:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_360:
  if (cf) {
    CFRelease(cf);
  }
  if (*(_DWORD *)(*(void *)(a1[4] + 8) + 24)) {
    fvdp_cleanup(a1[5]);
  }
}

uint64_t fvdp_copySinkProperty(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = 0;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 64);
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  v12[2] = __fvdp_copySinkProperty_block_invoke;
  void v12[3] = &unk_1E57A0B20;
  void v12[6] = v5;
  void v12[7] = a2;
  _OWORD v12[4] = &v13;
  v12[5] = a3;
  v12[8] = a1;
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, void, void *))(v8 + 48);
  if (v9) {
    v9(v6, a2, 0, v12);
  }
  dispatch_semaphore_wait(*(dispatch_semaphore_t *)(a1 + 80), 0xFFFFFFFFFFFFFFFFLL);
  uint64_t v10 = *((unsigned int *)v14 + 6);
  _Block_object_dispose(&v13, 8);
  return v10;
}

void __fvdp_start_block_invoke_256(void *a1)
{
  uint64_t v3 = a1[5];
  CFDictionaryRef v2 = (const __CFDictionary *)a1[6];
  Boolean Value = CFDictionaryGetValue(v2, @"colorModes");
  uint64_t v5 = CFDictionaryGetValue(v2, @"timingModes");
  CFDictionaryRef v6 = (const __CFDictionary *)CFDictionaryGetValue(v2, @"displaySizeInPhysicalUnits");
  FigCFDictionaryGetDoubleIfPresent();
  *(void *)(v3 + 184) = 0x3FF0000000000000;
  if (Value) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7 && CFArrayGetCount((CFArrayRef)Value) && CFArrayGetCount((CFArrayRef)v5))
  {
    uint64_t v8 = &dword_1E9351000;
    if (dword_1E93512B0 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v8 = &dword_1E9351000;
      if (dword_1E93512B0 >= 2)
      {
        uint64_t v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v8 = &dword_1E9351000;
      }
    }
    uint64_t v11 = *(const void **)(v3 + 192);
    *(void *)(v3 + 192) = Value;
    CFRetain(Value);
    if (v11) {
      CFRelease(v11);
    }
    uint64_t v12 = *(const void **)(v3 + 200);
    *(void *)(v3 + 200) = v5;
    CFRetain(v5);
    if (v12) {
      CFRelease(v12);
    }
    if (v6)
    {
      CGSizeMakeWithDictionaryRepresentation(v6, (CGSize *)(v3 + 152));
      FigDisplayModes_CreateSquarePixelTimingModesArrayFromTimingModesAndDisplaySize(*(const __CFArray **)(v3 + 200), (__CFArray **)(v3 + 208), *(double *)(v3 + 152), *(double *)(v3 + 160), *(double *)(v3 + 184));
    }
    *(unsigned char *)(v3 + 88) = 0;
    FigCFDictionaryGetBooleanIfPresent();
    uint64_t v13 = *(const void **)(v3 + 96);
    uint64_t v14 = CFDictionaryGetValue(v2, @"displayName");
    *(void *)(v3 + 96) = v14;
    if (v14) {
      CFRetain(v14);
    }
    if (v13) {
      CFRelease(v13);
    }
    uint64_t v15 = *(const void **)(v3 + 104);
    int v16 = CFDictionaryGetValue(v2, @"displayUUID");
    *(void *)(v3 + 104) = v16;
    if (v16) {
      CFRetain(v16);
    }
    if (v15) {
      CFRelease(v15);
    }
    int v17 = *(const void **)(v3 + 112);
    uint64_t v18 = CFDictionaryGetValue(v2, @"displayEDID");
    *(void *)(v3 + 112) = v18;
    if (v18) {
      CFRetain(v18);
    }
    if (v17) {
      CFRelease(v17);
    }
    int v19 = v8[172];
    if (v19)
    {
      CFTypeID v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v19 = 0;
    }
  }
  else
  {
    int v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v19 = -12070;
  }
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = v19;
}

void fvdp_startTimers(uint64_t a1)
{
  if (dword_1E93512B0)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v3 = *(NSObject **)(a1 + 488);
  dispatch_time_t v4 = dispatch_time(0, *(void *)(a1 + 496));
  dispatch_source_set_timer(v3, v4, *(void *)(a1 + 496), 0x989680uLL);
  if (*(unsigned char *)(a1 + 744) || *(unsigned char *)(a1 + 745))
  {
    *(void *)(a1 + 688) = FigGetUpTimeNanoseconds();
    uint64_t v5 = *(NSObject **)(a1 + 680);
    dispatch_time_t v6 = dispatch_time(0, 1000000000);
    dispatch_source_set_timer(v5, v6, 0x3B9ACA00uLL, 0x5F5E100uLL);
  }
  *(unsigned char *)(a1 + 48) = 0;
  BOOL v7 = *(NSObject **)(a1 + 40);
  dispatch_time_t v8 = dispatch_time(0, *(void *)(a1 + 32));
  dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
}

uint64_t fvdp_encoderControlSetBitrate(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 584) != a2)
  {
    uint64_t v3 = result;
    unsigned int v4 = dword_1E93512B0;
    if (dword_1E93512B0 >= 2)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      unsigned int v4 = dword_1E93512B0;
    }
    *(_DWORD *)(v3 + 576) = 2;
    double v6 = (double)a2 * 0.125;
    *(double *)(v3 + 528) = v6;
    *(void *)(v3 + 552) = 0x3FF0000000000000;
    if (v4 <= 1)
    {
      *(double *)(v3 + 536) = v6 * 0.2;
      *(void *)(v3 + 560) = 0x3FB999999999999ALL;
    }
    else
    {
      BOOL v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      unsigned int v8 = dword_1E93512B0;
      *(double *)(v3 + 536) = *(double *)(v3 + 528) * 0.2;
      *(void *)(v3 + 560) = 0x3FB999999999999ALL;
      if (v8 >= 2)
      {
        uint64_t v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    *(_DWORD *)(v3 + 584) = a2;
    *(unsigned char *)(v3 + 580) = 1;
  }
  return result;
}

double fvdp_encoderControlSetFramerate(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 416) != a2)
  {
    if (dword_1E93512B0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(_DWORD *)(a1 + 416) = a2;
    *(void *)(a1 + 424) = 0x3B9ACA00uLL / a2;
    double result = (double)a2;
    *(double *)(a1 + 592) = (double)a2;
    *(unsigned char *)(a1 + 600) = 1;
  }
  return result;
}

uint64_t *__colorTagForIndex_block_invoke()
{
  uint64_t v0 = *MEMORY[0x1E4F24AB0];
  uint64_t v1 = *MEMORY[0x1E4F24C48];
  uint64_t v2 = *MEMORY[0x1E4F24BE0];
  uint64_t v3 = *MEMORY[0x1E4F24C40];
  uint64_t v4 = *MEMORY[0x1E4F24C10];
  uint64_t v5 = *MEMORY[0x1E4F24AC0];
  uint64_t v6 = *MEMORY[0x1E4F24AA8];
  uint64_t v7 = *MEMORY[0x1E4F24C30];
  uint64_t v8 = *MEMORY[0x1E4F24BF8];
  uint64_t v9 = *MEMORY[0x1E4F24C28];
  double result = &colorTagForIndex_colorTags;
  colorTagForIndex_colorTags = (uint64_t)"AirPlay";
  unk_1E934ED10 = v0;
  qword_1E934ED18 = v1;
  unk_1E934ED20 = v2;
  qword_1E934ED28 = (uint64_t)"CarPlay";
  unk_1E934ED30 = v0;
  qword_1E934ED38 = v3;
  unk_1E934ED40 = v4;
  qword_1E934ED48 = (uint64_t)"CarPlayHEVC";
  unk_1E934ED50 = v0;
  qword_1E934ED58 = v1;
  unk_1E934ED60 = v4;
  qword_1E934ED68 = (uint64_t)"ExtendedColor";
  unk_1E934ED70 = v5;
  qword_1E934ED78 = v1;
  unk_1E934ED80 = v2;
  qword_1E934ED88 = (uint64_t)"HDR10";
  unk_1E934ED90 = v6;
  qword_1E934ED98 = v7;
  unk_1E934EDA0 = v8;
  qword_1E934EDA8 = (uint64_t)"DoVi";
  unk_1E934EDB0 = 0;
  qword_1E934EDB8 = v9;
  unk_1E934EDC0 = v8;
  qword_1E934EDC8 = (uint64_t)"AirPlaysRGB";
  unk_1E934EDD0 = v0;
  qword_1E934EDD8 = v1;
  unk_1E934EDE0 = v4;
  return result;
}

uint64_t prefsGetH264EncoderUsageIfValid(uint64_t result, _DWORD *a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  if (!result) {
    return result;
  }
  CFStringRef v3 = (const __CFString *)result;
  CFTypeID v4 = CFGetTypeID((CFTypeRef)result);
  if (v4 != CFStringGetTypeID()) {
    return 0;
  }
  if (!CFStringGetCString(v3, buffer, 32, 0x8000100u))
  {
LABEL_7:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  uint64_t v5 = 0;
  while (strcasecmp(buffer, prefsGetH264EncoderUsageIfValid_names[v5]))
  {
    if (++v5 == 6) {
      goto LABEL_7;
    }
  }
  *a2 = prefsGetH264EncoderUsageIfValid_values[v5];
  return 1;
}

void fvdp_applyProtectionOptions(uint64_t a1, CFDictionaryRef theDict)
{
  Boolean Value = CFDictionaryGetValue(theDict, @"protectionOptions");
  if (Value)
  {
    CFTypeID v4 = CFGetTypeID(Value);
    if (v4 == CFDictionaryGetTypeID()) {
      FigCFDictionaryGetInt64IfPresent();
    }
  }
  uint64_t v5 = *(const void **)(a1 + 400);
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  if (v5) {
    CFRelease(v5);
  }
}

void prefsGetOSTypeIfPresent(const __CFString *a1, int *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v3 = *a2;
  CFStringRef v4 = (const __CFString *)FigVirtualDisplayPrefsCopyValue(a1);
  if (v4)
  {
    CFStringRef v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFStringGetTypeID())
    {
      if (!CFStringGetCString(v5, buffer, 8, 0x8000100u)
        || strlen(buffer) != 4
        || (int v7 = (buffer[1] << 16) | (buffer[0] << 24) | (buffer[2] << 8) | buffer[3],
            *a2 = v7,
            v3 != v7))
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    CFRelease(v5);
  }
}

void fvdp_checkForTaps(uint64_t a1, int a2)
{
  int Boolean = FigVirtualDisplayPrefsGetBoolean(@"wirelessdisplay_tap_input", 0);
  int v5 = FigVirtualDisplayPrefsGetBoolean(@"wirelessdisplay_tap_output", 0);
  if (a2)
  {
    if (Boolean && !*(void *)(a1 + 664)) {
      *(void *)(a1 + 664) = tapCreate(@"input");
    }
    if (v5 && !*(void *)(a1 + 672))
    {
      if (*(_DWORD *)(a1 + 320) == 1852796517)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        *(void *)(a1 + 672) = tapCreate(@"output");
      }
    }
    if (*(void *)(a1 + 664) || *(void *)(a1 + 672)) {
      *(void *)(a1 + 448) = 1666666;
    }
  }
  else
  {
    if (!Boolean)
    {
      uint64_t v7 = *(void *)(a1 + 664);
      if (v7)
      {
        tapDestroy(v7);
        *(void *)(a1 + 664) = 0;
      }
    }
    if (!v5)
    {
      uint64_t v8 = *(void *)(a1 + 672);
      if (v8)
      {
        tapDestroy(v8);
        *(void *)(a1 + 672) = 0;
      }
    }
  }
}

uint64_t __prefsInitPixelBufferChromaLocation_block_invoke(uint64_t a1)
{
  void v7[6] = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *MEMORY[0x1E4F24A28];
  v7[0] = *MEMORY[0x1E4F24A38];
  v7[1] = v1;
  uint64_t v2 = *MEMORY[0x1E4F24A40];
  void v7[2] = *MEMORY[0x1E4F24A48];
  void v7[3] = v2;
  uint64_t v3 = *MEMORY[0x1E4F24A18];
  v7[4] = *MEMORY[0x1E4F24A20];
  void v7[5] = v3;
  unsigned int IntegerWithDefault = FigVirtualDisplayPrefsGetIntegerWithDefault(*(const __CFString **)(a1 + 32), 0);
  if (IntegerWithDefault <= 5) {
    sPixelBufferChromaLocation = v7[IntegerWithDefault];
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  return fig_log_call_emit_and_clean_up_after_send_and_compose();
}

void *tapCreate(const void *a1)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  TempDirectordouble y = FVDUtilsGetTempDirectory();
  uint64_t v4 = getpid();
  CFStringRef v5 = CFStringCreateWithFormat(v2, 0, @"%@tap-%@-%d-%d.mov", TempDirectory, a1, v4, atomic_fetch_add_explicit(&tapCreate_count, 1u, memory_order_relaxed) + 1);
  if (FigVirtualDisplaySinkFileWriterCreate((uint64_t)v2, cf)) {
    goto LABEL_19;
  }
  uint64_t CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(cf[0]);
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v8 = v7 ? v7 : 0;
  if ((uint64_t v9 = *(unsigned int (**)(uint64_t, __CFString *, CFStringRef))(v8 + 56)) == 0
    || v9(CMBaseObject, @"Destination", v5)
    || ((CFTypeRef v10 = cf[0], (v11 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0) ? (v12 = 0) : (v12 = v11),
        (uint64_t v13 = *(unsigned int (**)(CFTypeRef, void, void))(v12 + 8)) == 0 || v13(v10, 0, 0)))
  {
LABEL_19:
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v18 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v14 = 0;
    if (!v5) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v14 = malloc_type_calloc(1uLL, 0x18uLL, 0x6004082687C62uLL);
    if (a1) {
      CFTypeRef v15 = CFRetain(a1);
    }
    else {
      CFTypeRef v15 = 0;
    }
    void *v14 = cf[0];
    v14[1] = v15;
    cf[0] = 0;
    int v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (!v5) {
      goto LABEL_21;
    }
  }
  CFRelease(v5);
LABEL_21:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v14;
}

void __fvdp_configureSink_block_invoke(uint64_t a1, CFTypeRef cf, CFTypeRef a3)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a3) {
    CFRetain(a3);
  }
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(NSObject **)(v6 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdp_configureSink_block_invoke_2;
  block[3] = &__block_descriptor_tmp_394;
  block[4] = v6;
  void block[5] = cf;
  void block[6] = a3;
  dispatch_async(v7, block);
}

void __fvdp_configureSink_block_invoke_2(void *a1)
{
  uint64_t v2 = a1[4];
  CFDictionaryRef v3 = (const __CFDictionary *)a1[6];
  if (FigCFEqual())
  {
    if (dword_1E93512B0)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(unsigned char *)(v2 + 603) = 1;
  }
  else if (FigCFEqual())
  {
    if (dword_1E93512B0)
    {
      CFStringRef v5 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    *(unsigned char *)(v2 + 604) = 1;
  }
  else if (FigCFEqual())
  {
    CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v3, @"tokens");
    if (Value)
    {
      CFArrayRef v7 = Value;
      if (dword_1E93512B0 >= 2)
      {
        uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CFMutableDictionaryRef Mutable = *(__CFArray **)(v2 + 624);
      if (!Mutable)
      {
        CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
        *(void *)(v2 + 624) = Mutable;
      }
      v13.length = CFArrayGetCount(v7);
      v13.location = 0;
      CFArrayAppendArray(Mutable, v7, v13);
    }
  }
  else if (FigCFEqual())
  {
    *(_DWORD *)(v2 + 476) = 1;
    FigCFDictionaryGetInt32IfPresent();
    if (dword_1E93512B0)
    {
      uint64_t v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  uint64_t v9 = (const void *)a1[5];
  if (v9) {
    CFRelease(v9);
  }
  CFTypeRef v10 = (const void *)a1[6];
  if (v10) {
    CFRelease(v10);
  }
}

intptr_t __fvdp_copySinkProperty_block_invoke(uint64_t a1, int a2, CFTypeRef cf)
{
  if (a2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  else
  {
    if (cf) {
      CFTypeRef v6 = CFRetain(cf);
    }
    else {
      CFTypeRef v6 = 0;
    }
    **(void **)(a1 + 40) = v6;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a2;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(void *)(a1 + 64) + 80));
}

void __fvdp_stop_block_invoke(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 24);
  if (v3 != 2 && dword_1E93512B0 != 0)
  {
    unsigned int v17 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(_DWORD *)(v2 + 24) = 0;
  __dmb(0xBu);
  fvdp_stopTimers(*(NSObject ***)(a1 + 32));
  uint64_t v6 = *(void *)(a1 + 32);
  CFArrayRef v7 = *(NSObject **)(v6 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdp_stop_block_invoke_403;
  block[3] = &__block_descriptor_tmp_404;
  block[4] = v6;
  dispatch_sync(v7, block);
  if (v3)
  {
    unsigned int v17 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v9 = v17;
    if (os_log_type_enabled(v8, type)) {
      unsigned int v10 = v9;
    }
    else {
      unsigned int v10 = v9 & 0xFFFFFFFE;
    }
    if (v10)
    {
      uint64_t v11 = &stru_1EE53F4B8;
      uint64_t v12 = *(void *)(a1 + 32);
      if (*(void *)(a1 + 40)) {
        uint64_t v11 = *(__CFString **)(a1 + 40);
      }
      int v13 = *(_DWORD *)(v12 + 736);
      int v14 = *(_DWORD *)(v12 + 740);
      int v18 = 138413058;
      int v19 = v11;
      __int16 v20 = 2080;
      int v21 = "fvdp_stop_block_invoke_2";
      __int16 v22 = 1024;
      int v23 = v13;
      __int16 v24 = 1024;
      int v25 = v14;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  fvdp_cleanup(*(void *)(a1 + 32));
}

void fvdp_stopTimers(NSObject **a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (dword_1E93512B0)
  {
    int v6 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  dispatch_source_set_timer(a1[61], 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  dispatch_source_set_timer(a1[85], 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  int v3 = a1[1];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdp_stopTimers_block_invoke;
  block[3] = &__block_descriptor_tmp_407;
  block[4] = a1;
  dispatch_sync(v3, block);
}

void *__fvdp_stop_block_invoke_403(uint64_t a1)
{
  return fvdp_shutdownEncoderAndPools(*(void *)(a1 + 32));
}

void *fvdp_shutdownEncoderAndPools(uint64_t a1)
{
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  fvdp_teardownCompressionSession(a1);
  int v3 = *(const void **)(a1 + 336);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 336) = 0;
  }
  long long v4 = *MEMORY[0x1E4F1DB30];
  *(_OWORD *)(a1 + 224) = *MEMORY[0x1E4F1DB30];
  *(_OWORD *)(a1 + 240) = v4;
  long long v5 = *MEMORY[0x1E4F1DB28];
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1DB28] + 16);
  *(_OWORD *)(a1 + 256) = *MEMORY[0x1E4F1DB28];
  *(_OWORD *)(a1 + 272) = v6;
  *(_OWORD *)(a1 + 288) = v5;
  *(_OWORD *)(a1 + 304) = v6;
  return writebackCacheInitWithPool(*(void **)(a1 + 648), 0, 0);
}

void __fvdp_stopTimers_block_invoke(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 48) = 0;
}

void fvdp_teardownCompressionSession(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 328);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 328) = 0;
  }
  int v3 = *(OpaqueVTCompressionSession **)(a1 + 344);
  if (v3)
  {
    CMTime v5 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    VTCompressionSessionCompleteFrames(v3, &v5);
    long long v4 = *(const void **)(a1 + 344);
    if (v4)
    {
      CFRelease(v4);
      *(void *)(a1 + 344) = 0;
    }
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 464), 0xFFFFFFFFFFFFFFFFLL, 0, 0);
  }
}

uint64_t __fvdp_suspend_block_invoke(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(_DWORD *)(v2 + 24) != 2 && dword_1E93512B0 != 0)
  {
    unsigned int v20 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v2 = *(void *)(a1 + 32);
  }
  *(_DWORD *)(v2 + 24) = 1;
  __dmb(0xBu);
  fvdp_stopTimers(*(NSObject ***)(a1 + 32));
  uint64_t v5 = *(void *)(a1 + 32);
  long long v6 = *(NSObject **)(v5 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __fvdp_suspend_block_invoke_408;
  block[3] = &__block_descriptor_tmp_409;
  block[4] = v5;
  dispatch_sync(v6, block);
  fvdp_checkForTaps(*(void *)(a1 + 32), 0);
  if (dword_1E93512B0)
  {
    unsigned int v20 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v8 = v20;
    if (os_log_type_enabled(v7, type)) {
      unsigned int v9 = v8;
    }
    else {
      unsigned int v9 = v8 & 0xFFFFFFFE;
    }
    if (v9)
    {
      unsigned int v10 = &stru_1EE53F4B8;
      if (*(void *)(a1 + 40)) {
        unsigned int v10 = *(__CFString **)(a1 + 40);
      }
      int v21 = 138412546;
      __int16 v22 = v10;
      __int16 v23 = 2080;
      __int16 v24 = "fvdp_suspend_block_invoke_2";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 64);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v15 = *(void *)(VTable + 16);
  uint64_t result = VTable + 16;
  uint64_t v14 = v15;
  if (v15) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0;
  }
  unsigned int v17 = *(uint64_t (**)(uint64_t, __CFString *, void, void))(v16 + 56);
  if (v17) {
    return v17(v11, @"clearScreen", *MEMORY[0x1E4F1CFD0], 0);
  }
  return result;
}

void *__fvdp_suspend_block_invoke_408(uint64_t a1)
{
  return fvdp_shutdownEncoderAndPools(*(void *)(a1 + 32));
}

void __fvdp_resume_block_invoke(uint64_t a1)
{
  block[26] = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(_DWORD *)(v2 + 24) == 1)
  {
    fvdp_checkForTaps(v2, 1);
    uint64_t v3 = *(void *)(a1 + 40);
    long long v4 = *(NSObject **)(v3 + 8);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fvdp_resume_block_invoke_2;
    block[3] = &__block_descriptor_tmp_412;
    block[4] = v3;
    dispatch_sync(v4, block);
    fvdp_startTimers(*(void *)(a1 + 40));
    uint64_t v5 = *(void *)(a1 + 40);
    int v6 = 2;
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    int v6 = -12070;
  }
  *(_DWORD *)(v5 + 24) = v6;
}

uint64_t __fvdp_resume_block_invoke_2(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 603) = 1;
  return result;
}

CFTypeRef __fvdp_copySupportedDigitalOutModes_block_invoke(uint64_t a1)
{
  CFTypeRef v2 = *(CFTypeRef *)(*(void *)(a1 + 40) + 192);
  if (v2) {
    CFTypeRef v2 = CFRetain(v2);
  }
  **(void **)(a1 + 32) = v2;
  uint64_t v3 = *(void *)(a1 + 40);
  CFTypeRef result = *(CFTypeRef *)(v3 + 208);
  if (result || (CFTypeRef result = *(CFTypeRef *)(v3 + 200)) != 0) {
    CFTypeRef result = CFRetain(result);
  }
  **(void **)(a1 + 48) = result;
  return result;
}

void __fvdp_setDigitalOutMode_block_invoke(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(_DWORD *)(a1 + 44);
  if (FigDisplayModes_ExtractDimensionsFromTimingMode(*(const __CFArray **)(v1 + 200), v2, (double *)(v1 + 120)))
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (dword_1E93512B0)
  {
    long long v4 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFArrayRef v5 = *(const __CFArray **)(v1 + 208);
  int v6 = (double *)(v1 + 136);
  if (v5)
  {
    if (FigDisplayModes_ExtractDimensionsFromTimingMode(v5, v2, v6))
    {
      uint64_t v7 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (dword_1E93512B0)
    {
      unsigned int v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  else
  {
    *(_OWORD *)int v6 = *(_OWORD *)(v1 + 120);
  }
  if (FigDisplayModes_ExtractOverscanInfoFromTimingMode(*(const __CFArray **)(v1 + 200), v2, (BOOL *)(v1 + 168)))
  {
    unsigned int v9 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (dword_1E93512B0)
  {
    unsigned int v10 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)(v1 + 64))
  {
    CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(*(CGSize *)(v1 + 120));
    uint64_t v12 = *(OpaqueVTCompressionSession **)(v1 + 344);
    if (v12)
    {
      CMTime completeUntilPresentationTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      VTCompressionSessionCompleteFrames(v12, &completeUntilPresentationTimeStamp);
    }
    uint64_t CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(*(void *)(v1 + 64));
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(void (**)(uint64_t, __CFString *, CFDictionaryRef))(v15 + 56);
    if (v16) {
      v16(CMBaseObject, @"virtualDisplayModeSize", DictionaryRepresentation);
    }
    if (DictionaryRepresentation) {
      CFRelease(DictionaryRepresentation);
    }
  }
}

void __fvdp_submitPixelBuffer_block_invoke(uint64_t a1)
{
  uint64_t v222 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 217) = *(unsigned char *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 40);
  CVPixelBufferRef pixelBufferOut = 0;
  if (*(_DWORD *)(v1 + 24) == 2)
  {
    uint64_t v3 = &dword_1E9351000;
    if (!*(void *)v2)
    {
      if (*(unsigned char *)(v1 + 744) || *(unsigned char *)(v1 + 745)) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(v1 + 728), 1u, memory_order_relaxed);
      }
      goto LABEL_130;
    }
    uint64_t v180 = *(__CFString **)(v1 + 16);
    OSType PixelFormatType = CVPixelBufferGetPixelFormatType(*(CVPixelBufferRef *)v2);
    OSType v5 = PixelFormatType;
    if (*(_DWORD *)(v1 + 640) == 1 && PixelFormatType != *(_DWORD *)(v1 + 644))
    {
      LODWORD(v202) = 0;
      v196[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_234:
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_160;
    }
    double Width = (double)CVPixelBufferGetWidth(*(CVPixelBufferRef *)v2);
    size_t Height = CVPixelBufferGetHeight(*(CVPixelBufferRef *)v2);
    double v8 = (double)Height;
    double v9 = *(double *)(v2 + 8);
    double v10 = *(double *)(v2 + 16);
    double v11 = *(double *)(v2 + 32);
    double v12 = *(double *)(v2 + 40);
    v13.f64[0] = *(float64_t *)(v2 + 48);
    double v15 = *(double *)(v2 + 56);
    double v14 = *(double *)(v2 + 64);
    int v16 = *(_DWORD *)(v2 + 136);
    double v17 = *(double *)(v1 + 120);
    double v18 = *(double *)(v1 + 128);
    int v19 = *(__CFString **)(v1 + 16);
    int v20 = *(unsigned __int8 *)(v1 + 168);
    double v21 = *(double *)(v1 + 176);
    double v23 = *(double *)(v1 + 136);
    double v22 = *(double *)(v1 + 144);
    double v24 = *(double *)(v1 + 152);
    double v25 = *(double *)(v1 + 160);
    double v187 = *(double *)(v2 + 24);
    double v190 = Width;
    CGFloat v200 = Width;
    double v201 = (double)Height;
    *(double *)int v196 = v9;
    double v197 = v10;
    double v198 = v187;
    double v199 = v11;
    double v26 = v12;
    double v193 = v12;
    double v194 = v13.f64[0];
    double v27 = v13.f64[0];
    v195.f64[0] = v15;
    v195.f64[1] = v14;
    float64_t v28 = v14;
    double v181 = v18;
    double v182 = v17;
    if (*(_DWORD *)(v1 + 640) == 1 && !*(unsigned char *)(v1 + 217))
    {
      double v169 = v22;
      double v171 = v11;
      double v175 = v25;
      double v184 = v24;
      uint64_t v202 = 0;
      uint64_t v203 = 0;
      double v29 = v190;
      v204.f64[0] = v190;
      v204.f64[1] = (double)Height;
      double v30 = (double)Height;
      if ((v16 & 4) != 0)
      {
        double v31 = v10;
        double v30 = v190;
        if (v190 / v8 >= v8 / v190) {
          double v32 = v8 / v190;
        }
        else {
          double v32 = v190 / v8;
        }
        double v29 = (double)Height;
        if (v32 < 1.0)
        {
          double v29 = (double)(int)(((int)(v32 * v8) + 1) & 0xFFFFFFFE);
          double v30 = (double)(int)(((int)(v32 * v190) + 1) & 0xFFFFFFFE);
          if (dword_1E93512B0 >= 3)
          {
            double v33 = v21;
            *(_DWORD *)char v206 = 0;
            os_log_type_t type = OS_LOG_TYPE_DEFAULT;
            char v34 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
            uint64_t v3 = &dword_1E9351000;
            double v18 = v181;
            double v17 = v182;
            double v21 = v33;
          }
        }
        v204.f64[0] = v29;
        v204.f64[1] = v30;
        double v10 = v31;
      }
      v13.f64[0] = v29;
      FigDisplayModes_DetermineSenderSurfaceDimensionsFromDisplayModeAndCurrentSenderDisplaySize(v20, &v204, v17, v18, v13, v30, v21);
      double v18 = v181;
      double v17 = v182;
      double v15 = v204.f64[0];
      double v26 = (v182 - v204.f64[0]) * 0.5;
      double v193 = v26;
      double v194 = (v181 - v204.f64[1]) * 0.5;
      double v27 = v194;
      float64x2_t v195 = v204;
      float64_t v28 = v204.f64[1];
      double v22 = v169;
      double v11 = v171;
      double v24 = v184;
      double v25 = v175;
    }
    if (v23 == v17 && v22 == v18)
    {
      double v35 = v28;
      double v36 = v27;
LABEL_22:
      double v37 = v187;
      goto LABEL_38;
    }
    double v35 = v28;
    if (*(_DWORD *)(v1 + 640) == 1)
    {
      double v36 = v27;
      if (!*(unsigned char *)(v1 + 217)) {
        goto LABEL_22;
      }
      unsigned int v38 = 0;
      unsigned int v39 = (double *)(v1 + 184);
      double v40 = v187;
    }
    else
    {
      int v41 = v16 << 29;
      unsigned int v38 = (v16 << 29 >> 31) & 0x5A;
      unsigned int v39 = (double *)(v1 + 184);
      double v185 = v24;
      double v176 = v25;
      FigDisplayModes_ConvertSquarePixelSizeToNonSquarePixelSize((v41 >> 31) & 0x5A, &v200, v190, v8, v24, v25, v17, v18, *(double *)(v1 + 184));
      if (dword_1E93512B0 < 2)
      {
        double v36 = v27;
      }
      else
      {
        unsigned int v173 = v19;
        LODWORD(v202) = 0;
        v206[0] = OS_LOG_TYPE_DEFAULT;
        CFStringRef v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v43 = v202;
        if (os_log_type_enabled(v42, v206[0])) {
          unsigned int v44 = v43;
        }
        else {
          unsigned int v44 = v43 & 0xFFFFFFFE;
        }
        if (v44)
        {
          uint64_t v45 = &stru_1EE53F4B8;
          if (v173) {
            uint64_t v45 = v173;
          }
          unsigned int v177 = v45;
          int v46 = (char *)&strGetAvailableBuffer_strBuffer
              + 64
              * (unint64_t)(atomic_fetch_add_explicit(&strGetAvailableBuffer_strIndex, 1u, memory_order_relaxed) & 0xF);
          snprintf(v46, 0x40uLL, "{%g, %g}", v190, v8);
          double v47 = v200;
          double v48 = v201;
          unsigned int v49 = (char *)&strGetAvailableBuffer_strBuffer
              + 64
              * (unint64_t)(atomic_fetch_add_explicit(&strGetAvailableBuffer_strIndex, 1u, memory_order_relaxed) & 0xF);
          snprintf(v49, 0x40uLL, "{%g, %g}", v47, v48);
          int v207 = 138413058;
          unsigned int v208 = v177;
          __int16 v209 = 2080;
          uint64_t v210 = "fvdp_calculateOutputGeometry";
          __int16 v211 = 2080;
          *(void *)unsigned int v212 = v46;
          *(_WORD *)&v212[8] = 2080;
          unsigned int v213 = v49;
          _os_log_send_and_compose_impl();
        }
        double v36 = v27;
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        uint64_t v3 = &dword_1E9351000;
        int v19 = v173;
      }
      double v24 = v185;
      double v40 = v187;
      double v25 = v176;
    }
    double v50 = v36;
    double v51 = v15;
    double v52 = v24;
    double v53 = v25;
    FigDisplayModes_ConvertSquarePixelRectToNonSquarePixelRect(0, &v193, v26, v50, v51, v35, v24, v25, v182, v181, *v39);
    FigDisplayModes_ConvertSquarePixelRectToNonSquarePixelRect(v38, (double *)v196, v9, v10, v40, v11, v52, v53, v182, v181, *v39);
    double v9 = *(double *)v196;
    double v10 = v197;
    double v37 = v198;
    double v11 = v199;
    double v26 = v193;
    double v36 = v194;
    double v35 = v195.f64[1];
    double v15 = v195.f64[0];
LABEL_38:
    v223.size.double width = v200;
    v223.size.double height = v201;
    v223.origin.CGFloat x = 0.0;
    v223.origin.double y = 0.0;
    double v191 = v200;
    double v186 = v201;
    v225.origin.CGFloat x = v9;
    v225.origin.double y = v10;
    v225.size.double width = v37;
    v225.size.double height = v11;
    if (!CGRectContainsRect(v223, v225))
    {
      LODWORD(v202) = 0;
      v196[0] = OS_LOG_TYPE_DEFAULT;
      CFDictionaryRef v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v55 = v202;
      if (os_log_type_enabled(v54, v196[0])) {
        unsigned int v56 = v55;
      }
      else {
        unsigned int v56 = v55 & 0xFFFFFFFE;
      }
      if (v56)
      {
        uint64_t v57 = &stru_1EE53F4B8;
        if (v19) {
          uint64_t v57 = v19;
        }
        uint64_t v188 = v57;
        OSType v178 = v5;
        uint64_t v58 = (char *)&strGetAvailableBuffer_strBuffer
            + 64
            * (unint64_t)(atomic_fetch_add_explicit(&strGetAvailableBuffer_strIndex, 1u, memory_order_relaxed) & 0xF);
        snprintf(v58, 0x40uLL, "{{%g, %g}, {%g, %g}}", v9, v10, v37, v11);
        uint64_t v59 = (char *)&strGetAvailableBuffer_strBuffer
            + 64
            * (unint64_t)(atomic_fetch_add_explicit(&strGetAvailableBuffer_strIndex, 1u, memory_order_relaxed) & 0xF);
        double v11 = v186;
        double v37 = v191;
        snprintf(v59, 0x40uLL, "{{%g, %g}, {%g, %g}}", 0.0, 0.0, v191, v186);
        int v207 = 138413058;
        unsigned int v208 = v188;
        __int16 v209 = 2080;
        uint64_t v210 = "fvdp_updateGeometryForFrame";
        __int16 v211 = 2080;
        *(void *)unsigned int v212 = v58;
        *(_WORD *)&v212[8] = 2080;
        unsigned int v213 = v59;
        OSType v5 = v178;
        _os_log_send_and_compose_impl();
      }
      else
      {
        double v37 = v191;
        double v11 = v186;
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      double v9 = 0.0;
      double v10 = 0.0;
      uint64_t v3 = &dword_1E9351000;
    }
    v224.origin.CGFloat x = 0.0;
    v224.origin.double y = 0.0;
    v224.size.double height = v181;
    v224.size.double width = v182;
    v226.origin.CGFloat x = v26;
    v226.origin.double y = v36;
    v226.size.double width = v15;
    v226.size.double height = v35;
    CGRectContainsRect(v224, v226);
    if (!v3[172])
    {
LABEL_68:
      if (*(_DWORD *)(v1 + 512) != 38)
      {
        *(double *)(v2 + 8) = v9;
        *(double *)(v2 + 16) = v10;
        *(double *)(v2 + 24) = v37;
        *(double *)(v2 + 32) = v11;
      }
      *(double *)(v2 + 40) = v26;
      *(double *)(v2 + 48) = v36;
      *(double *)(v2 + 56) = v15;
      *(double *)(v2 + 64) = v35;
      *(double *)(v1 + 256) = v9;
      *(double *)(v1 + 264) = v10;
      *(double *)(v1 + 272) = v37;
      *(double *)(v1 + 280) = v11;
      *(double *)(v1 + 288) = v26;
      *(double *)(v1 + 296) = v36;
      double v83 = *(double *)(v1 + 240);
      *(double *)(v1 + 304) = v15;
      *(double *)(v1 + 312) = v35;
      if (v83 != v191 || *(double *)(v1 + 248) != v186)
      {
        if (*(_DWORD *)(v1 + 640) == 1)
        {
          int v84 = FigSignalErrorAt();
          if (v84)
          {
            int v85 = v84;
LABEL_226:
            LODWORD(v202) = 0;
            v196[0] = OS_LOG_TYPE_DEFAULT;
            unsigned int v165 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v166 = v202;
            if (os_log_type_enabled(v165, v196[0])) {
              unsigned int v167 = v166;
            }
            else {
              unsigned int v167 = v166 & 0xFFFFFFFE;
            }
            if (!v167) {
              goto LABEL_234;
            }
            unsigned int v168 = &stru_1EE53F4B8;
            int v207 = 138413058;
            if (v180) {
              unsigned int v168 = v180;
            }
            unsigned int v208 = v168;
            __int16 v209 = 2080;
            uint64_t v210 = "fvdp_consumeFrame";
            __int16 v211 = 1024;
            *(_DWORD *)unsigned int v212 = 3880;
            *(_WORD *)&v212[4] = 1024;
            *(_DWORD *)&v212[6] = v85;
            goto LABEL_233;
          }
          goto LABEL_80;
        }
        fvdp_teardownCompressionSession(v1);
        *(double *)(v1 + 240) = v191;
        *(double *)(v1 + 248) = v186;
      }
      if (!*(void *)(v1 + 344))
      {
        int v86 = *(const void **)(v2 + 144);
        if (v86)
        {
          CFRelease(v86);
          *(void *)(v2 + 144) = 0;
        }
      }
      int v87 = fvdp_ensureEncoderAndPools(v1);
      if (v87)
      {
        int v85 = v87;
        LODWORD(v202) = 0;
        v196[0] = OS_LOG_TYPE_DEFAULT;
        unsigned int v155 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v156 = v202;
        if (os_log_type_enabled(v155, v196[0])) {
          unsigned int v157 = v156;
        }
        else {
          unsigned int v157 = v156 & 0xFFFFFFFE;
        }
        if (v157)
        {
          uint64_t v158 = &stru_1EE53F4B8;
          int v207 = 138413058;
          if (v19) {
            uint64_t v158 = v19;
          }
          unsigned int v208 = v158;
          __int16 v209 = 2080;
          uint64_t v210 = "fvdp_updateGeometryForFrame";
          __int16 v211 = 1024;
          *(_DWORD *)unsigned int v212 = 3497;
          *(_WORD *)&v212[4] = 1024;
          *(_DWORD *)&v212[6] = v85;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_226;
      }
LABEL_80:
      if (*(unsigned char *)(v1 + 752) || *(unsigned char *)(v1 + 753)) {
        *(void *)(v2 + 104) = mach_absolute_time();
      }
      int v88 = (_DWORD *)MEMORY[0x1E4F1EBA8];
      if (*(unsigned char *)(v1 + 754) && *MEMORY[0x1E4F1EBA8] == 1) {
        kdebug_trace();
      }
      if (v5 == *(_DWORD *)(v1 + 324) && !*(unsigned char *)(v1 + 660)) {
        goto LABEL_124;
      }
      CFAllocatorRef v89 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CVReturn v90 = CVPixelBufferPoolCreatePixelBufferWithAuxAttributes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], *(CVPixelBufferPoolRef *)(v1 + 328), *(CFDictionaryRef *)(*(void *)(v1 + 648) + 24), &pixelBufferOut);
      if (v90)
      {
        CVReturn v145 = v90;
        LODWORD(v202) = 0;
        v196[0] = OS_LOG_TYPE_DEFAULT;
        unsigned int v146 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v147 = v202;
        if (os_log_type_enabled(v146, v196[0])) {
          unsigned int v148 = v147;
        }
        else {
          unsigned int v148 = v147 & 0xFFFFFFFE;
        }
        if (!v148) {
          goto LABEL_234;
        }
        BOOL v149 = &stru_1EE53F4B8;
        int v207 = 138413058;
        if (v180) {
          BOOL v149 = v180;
        }
        unsigned int v208 = v149;
        __int16 v209 = 2080;
        uint64_t v210 = "fvdp_consumeFrame";
        __int16 v211 = 1024;
        *(_DWORD *)unsigned int v212 = 3888;
        *(_WORD *)&v212[4] = 1024;
        *(_DWORD *)&v212[6] = v145;
      }
      else
      {
        cvPixelBufferSetColorAttachments(pixelBufferOut, *(void **)(v1 + 376));
        if (!*(void *)(v1 + 336))
        {
          if (*(unsigned char *)(v1 + 384))
          {
            LODWORD(v202) = 0;
            v196[0] = OS_LOG_TYPE_DEFAULT;
            unsigned int v91 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v92 = v202;
            if (os_log_type_enabled(v91, v196[0])) {
              unsigned int v93 = v92;
            }
            else {
              unsigned int v93 = v92 & 0xFFFFFFFE;
            }
            if (v93)
            {
              int v94 = &stru_1EE53F4B8;
              int v95 = *(unsigned __int8 *)(v1 + 660);
              if (v180) {
                int v94 = v180;
              }
              int v207 = 138412802;
              unsigned int v208 = v94;
              __int16 v209 = 2080;
              uint64_t v210 = "fvdp_consumeFrame";
              if (v95) {
                long long v96 = "forced";
              }
              else {
                long long v96 = "pixel format mismatch";
              }
              __int16 v211 = 2080;
              *(void *)unsigned int v212 = v96;
              _os_log_send_and_compose_impl();
            }
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          LODWORD(v202) = 0;
          v196[0] = OS_LOG_TYPE_DEFAULT;
          unsigned int v97 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v98 = v202;
          if (os_log_type_enabled(v97, v196[0])) {
            unsigned int v99 = v98;
          }
          else {
            unsigned int v99 = v98 & 0xFFFFFFFE;
          }
          if (v99)
          {
            int v100 = &stru_1EE53F4B8;
            if (v180) {
              int v100 = v180;
            }
            int v207 = 138412546;
            unsigned int v208 = v100;
            __int16 v209 = 2080;
            uint64_t v210 = "fvdp_consumeFrame";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          OSStatus v101 = VTPixelTransferSessionCreate(v89, (VTPixelTransferSessionRef *)(v1 + 336));
          uint64_t v3 = &dword_1E9351000;
          if (v101)
          {
            OSStatus v160 = v101;
            LODWORD(v202) = 0;
            v196[0] = OS_LOG_TYPE_DEFAULT;
            CFTypeID v161 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            unsigned int v162 = v202;
            if (os_log_type_enabled(v161, v196[0])) {
              unsigned int v163 = v162;
            }
            else {
              unsigned int v163 = v162 & 0xFFFFFFFE;
            }
            if (v163)
            {
              unsigned int v164 = &stru_1EE53F4B8;
              int v207 = 138413058;
              if (v180) {
                unsigned int v164 = v180;
              }
              unsigned int v208 = v164;
              __int16 v209 = 2080;
              uint64_t v210 = "fvdp_consumeFrame";
              __int16 v211 = 1024;
              *(_DWORD *)unsigned int v212 = 3899;
              *(_WORD *)&v212[4] = 1024;
              *(_DWORD *)&v212[6] = v160;
              _os_log_send_and_compose_impl();
            }
            goto LABEL_234;
          }
        }
        if (v3[172] >= 3)
        {
          LODWORD(v202) = 0;
          v196[0] = OS_LOG_TYPE_DEFAULT;
          int v102 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v103 = v202;
          if (os_log_type_enabled(v102, v196[0])) {
            unsigned int v104 = v103;
          }
          else {
            unsigned int v104 = v103 & 0xFFFFFFFE;
          }
          if (v104)
          {
            unsigned int v105 = &stru_1EE53F4B8;
            if (v180) {
              unsigned int v105 = v180;
            }
            int v207 = 138412546;
            unsigned int v208 = v105;
            __int16 v209 = 2080;
            uint64_t v210 = "fvdp_consumeFrame";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          uint64_t v3 = &dword_1E9351000;
        }
        OSStatus v106 = VTPixelTransferSessionTransferImage(*(VTPixelTransferSessionRef *)(v1 + 336), *(CVPixelBufferRef *)v2, pixelBufferOut);
        if (!v106)
        {
          CVPixelBufferRef v107 = *(CVPixelBufferRef *)v2;
          CVPixelBufferRef v108 = pixelBufferOut;
          *(void *)uint64_t v2 = pixelBufferOut;
          if (v108) {
            CFRetain(v108);
          }
          if (v107) {
            CFRelease(v107);
          }
LABEL_124:
          if (*(unsigned char *)(v1 + 752) || *(unsigned char *)(v1 + 753)) {
            *(void *)(v2 + 112) = mach_absolute_time();
          }
          if (*(unsigned char *)(v1 + 754) && *v88 == 1) {
            kdebug_trace();
          }
LABEL_130:
          frameDataDestroy(*(const void ***)(v1 + 56));
          *(void *)(v1 + 56) = v2;
          if (*(_DWORD *)(v1 + 24) == 2)
          {
            uint64_t v109 = *(void *)(v1 + 424);
            int v110 = *(__CFString **)(v1 + 16);
            if (*(_DWORD *)(v2 + 160))
            {
              LODWORD(v202) = 0;
              v196[0] = OS_LOG_TYPE_DEFAULT;
              unsigned int v128 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v129 = v202;
              if (os_log_type_enabled(v128, v196[0])) {
                unsigned int v130 = v129;
              }
              else {
                unsigned int v130 = v129 & 0xFFFFFFFE;
              }
              if (v130)
              {
                int v131 = &stru_1EE53F4B8;
                if (v110) {
                  int v131 = v110;
                }
                int v207 = 138412802;
                unsigned int v208 = v131;
                __int16 v209 = 2080;
                uint64_t v210 = "fvdp_encodeSubmittedFrame";
                __int16 v211 = 1024;
                *(_DWORD *)unsigned int v212 = 3775;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              uint64_t v3 = &dword_1E9351000;
            }
            uint64_t v111 = *(void *)(v2 + 152);
            if (v111 <= *(void *)(v1 + 448) + *(void *)(v1 + 432))
            {
              LODWORD(v202) = 0;
              v196[0] = OS_LOG_TYPE_DEFAULT;
              unsigned int v132 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
              unsigned int v133 = v202;
              if (os_log_type_enabled(v132, v196[0])) {
                unsigned int v134 = v133;
              }
              else {
                unsigned int v134 = v133 & 0xFFFFFFFE;
              }
              if (v134)
              {
                unsigned int v135 = &stru_1EE53F4B8;
                if (v110) {
                  unsigned int v135 = v110;
                }
                int v207 = 138412802;
                unsigned int v208 = v135;
                __int16 v209 = 2080;
                uint64_t v210 = "fvdp_encodeSubmittedFrame";
                __int16 v211 = 1024;
                *(_DWORD *)unsigned int v212 = 3778;
                _os_log_send_and_compose_impl();
              }
              fig_log_call_emit_and_clean_up_after_send_and_compose();
              goto LABEL_159;
            }
            if (v111 > v109 - 5000000 + *(void *)(v1 + 440))
            {
              *(void *)(v1 + 432) = v111;
              uint64_t v112 = *(void *)(v1 + 424);
              *(void *)(v1 + 456) = v112;
              unint64_t v113 = 2 * v112;
              if (v113 <= 0x2FAF080) {
                int64_t v114 = 50000000;
              }
              else {
                int64_t v114 = v113;
              }
              dispatch_time_t v115 = dispatch_time(0, v114);
              if (!fvdp_shouldDropFrame(v1))
              {
                if (*(unsigned char *)(v1 + 384))
                {
                  if (*(unsigned char *)(v1 + 385))
                  {
                    unsigned int v116 = *(CVPixelBufferRef **)(v1 + 56);
                    if (*v116)
                    {
                      CMTime v117 = *(__CFString **)(v1 + 16);
                      IOSurface = CVPixelBufferGetIOSurface(*v116);
                      if (IOSurface)
                      {
                        CFTypeRef v119 = IOSurfaceCopyValue(IOSurface, (CFStringRef)*MEMORY[0x1E4F2F0C0]);
                        if (v119)
                        {
                          uint64_t v120 = v119;
                          CVBufferSetAttachment(*v116, (CFStringRef)*MEMORY[0x1E4F24B38], v119, kCVAttachmentMode_ShouldPropagate);
                          CFRelease(v120);
                        }
                      }
                      else
                      {
                        LODWORD(v202) = 0;
                        v196[0] = OS_LOG_TYPE_DEFAULT;
                        Float64 v141 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                        unsigned int v142 = v202;
                        if (os_log_type_enabled(v141, v196[0])) {
                          unsigned int v143 = v142;
                        }
                        else {
                          unsigned int v143 = v142 & 0xFFFFFFFE;
                        }
                        if (v143)
                        {
                          unsigned int v144 = &stru_1EE53F4B8;
                          if (v117) {
                            unsigned int v144 = v117;
                          }
                          int v207 = 138412802;
                          unsigned int v208 = v144;
                          __int16 v209 = 2080;
                          uint64_t v210 = "fvdp_propagateHDRAttachments";
                          __int16 v211 = 1024;
                          *(_DWORD *)unsigned int v212 = 3751;
                          _os_log_send_and_compose_impl();
                        }
                        fig_log_call_emit_and_clean_up_after_send_and_compose();
                        uint64_t v3 = &dword_1E9351000;
                      }
                    }
                  }
                }
                if (v3[172] >= 2)
                {
                  LODWORD(v202) = 0;
                  v196[0] = OS_LOG_TYPE_DEFAULT;
                  unsigned int v121 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v122 = v202;
                  if (os_log_type_enabled(v121, v196[0])) {
                    unsigned int v123 = v122;
                  }
                  else {
                    unsigned int v123 = v122 & 0xFFFFFFFE;
                  }
                  if (v123)
                  {
                    if (v110) {
                      __int16 v124 = v110;
                    }
                    else {
                      __int16 v124 = &stru_1EE53F4B8;
                    }
                    uint64_t v125 = *(void *)(v2 + 152);
                    uint64_t UpTimeNanoseconds = FigGetUpTimeNanoseconds();
                    int v207 = 138413058;
                    unsigned int v208 = v124;
                    __int16 v209 = 2080;
                    uint64_t v210 = "fvdp_encodeSubmittedFrame";
                    __int16 v211 = 2048;
                    *(void *)unsigned int v212 = v125;
                    *(_WORD *)&v212[8] = 2048;
                    unsigned int v213 = (char *)(v125 - UpTimeNanoseconds);
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                }
                ++*(_DWORD *)(v2 + 160);
                int v127 = fvdp_sendFrameToEncoder(v1, 0);
                if (v127)
                {
                  int v136 = v127;
                  LODWORD(v202) = 0;
                  v196[0] = OS_LOG_TYPE_DEFAULT;
                  unsigned int v137 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
                  unsigned int v138 = v202;
                  if (os_log_type_enabled(v137, v196[0])) {
                    unsigned int v139 = v138;
                  }
                  else {
                    unsigned int v139 = v138 & 0xFFFFFFFE;
                  }
                  if (v139)
                  {
                    unsigned int v140 = &stru_1EE53F4B8;
                    int v207 = 138413058;
                    if (v110) {
                      unsigned int v140 = v110;
                    }
                    unsigned int v208 = v140;
                    __int16 v209 = 2080;
                    uint64_t v210 = "fvdp_encodeSubmittedFrame";
                    __int16 v211 = 1024;
                    *(_DWORD *)unsigned int v212 = 3795;
                    *(_WORD *)&v212[4] = 1024;
                    *(_DWORD *)&v212[6] = v136;
                    _os_log_send_and_compose_impl();
                  }
                  fig_log_call_emit_and_clean_up_after_send_and_compose();
                  if (!v115) {
                    goto LABEL_159;
                  }
                  goto LABEL_157;
                }
                *(void *)(v1 + 440) = *(void *)(v1 + 432);
              }
              if (v115)
              {
LABEL_157:
                if (*(int *)(v1 + 472) >= 1) {
                  dispatch_source_set_timer(*(dispatch_source_t *)(v1 + 464), v115, *(void *)(v1 + 456), 0xF4240uLL);
                }
              }
            }
          }
LABEL_159:
          uint64_t v2 = 0;
          goto LABEL_160;
        }
        OSStatus v150 = v106;
        LODWORD(v202) = 0;
        v196[0] = OS_LOG_TYPE_DEFAULT;
        unsigned int v151 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v152 = v202;
        if (os_log_type_enabled(v151, v196[0])) {
          unsigned int v153 = v152;
        }
        else {
          unsigned int v153 = v152 & 0xFFFFFFFE;
        }
        if (!v153) {
          goto LABEL_234;
        }
        unsigned int v154 = &stru_1EE53F4B8;
        int v207 = 138413058;
        if (v180) {
          unsigned int v154 = v180;
        }
        unsigned int v208 = v154;
        __int16 v209 = 2080;
        uint64_t v210 = "fvdp_consumeFrame";
        __int16 v211 = 1024;
        *(_DWORD *)unsigned int v212 = 3904;
        *(_WORD *)&v212[4] = 1024;
        *(_DWORD *)&v212[6] = v150;
      }
LABEL_233:
      _os_log_send_and_compose_impl();
      goto LABEL_234;
    }
    v227.size.double width = v37;
    CGFloat v60 = v35;
    v227.origin.CGFloat x = v9;
    double v62 = *(double *)(v1 + 240);
    double v61 = *(double *)(v1 + 248);
    v227.origin.double y = v10;
    CGFloat x = v227.origin.x;
    v227.size.double height = v11;
    double y = v227.origin.y;
    double v189 = v227.size.width;
    BOOL v64 = CGRectEqualToRect(*(CGRect *)(v1 + 256), v227);
    if (v62 == v191 && v61 == v186)
    {
      if (v64)
      {
        v228.origin.CGFloat x = v26;
        v228.origin.double y = v36;
        v228.size.double width = v15;
        double v35 = v60;
        v228.size.double height = v60;
        BOOL v65 = !CGRectEqualToRect(*(CGRect *)(v1 + 288), v228);
LABEL_56:
        double v9 = x;
        goto LABEL_57;
      }
    }
    else if (!v64)
    {
      v229.origin.CGFloat x = v26;
      v229.origin.double y = v36;
      v229.size.double width = v15;
      double v35 = v60;
      v229.size.double height = v60;
      BOOL v65 = CGRectEqualToRect(*(CGRect *)(v1 + 288), v229);
      goto LABEL_56;
    }
    BOOL v65 = 1;
    double v9 = x;
    double v35 = v60;
LABEL_57:
    double v10 = y;
    double v37 = v189;
    if (v65 && v3[172])
    {
      LODWORD(v202) = 0;
      v196[0] = OS_LOG_TYPE_DEFAULT;
      int v66 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v67 = v202;
      if (os_log_type_enabled(v66, v196[0])) {
        unsigned int v68 = v67;
      }
      else {
        unsigned int v68 = v67 & 0xFFFFFFFE;
      }
      if (v68)
      {
        if (v19) {
          unsigned int v69 = v19;
        }
        else {
          unsigned int v69 = &stru_1EE53F4B8;
        }
        long long v70 = *(_OWORD *)(v1 + 256);
        double v71 = *(double *)(v1 + 272);
        double v72 = *(double *)(v1 + 280);
        double v170 = (char *)&strGetAvailableBuffer_strBuffer
             + 64
             * (unint64_t)(atomic_fetch_add_explicit(&strGetAvailableBuffer_strIndex, 1u, memory_order_relaxed) & 0xF);
        uint64_t v172 = v69;
        snprintf(v170, 0x40uLL, "{{%g, %g}, {%g, %g}}", *(double *)&v70, *((double *)&v70 + 1), v71, v72);
        unsigned int v174 = v19;
        int v73 = (char *)&strGetAvailableBuffer_strBuffer
            + 64
            * (unint64_t)(atomic_fetch_add_explicit(&strGetAvailableBuffer_strIndex, 1u, memory_order_relaxed) & 0xF);
        snprintf(v73, 0x40uLL, "{{%g, %g}, {%g, %g}}", v9, y, v189, v11);
        long long v74 = *(_OWORD *)(v1 + 288);
        double v75 = *(double *)(v1 + 304);
        double v76 = *(double *)(v1 + 312);
        OSType v179 = v5;
        unsigned int v77 = (char *)&strGetAvailableBuffer_strBuffer
            + 64
            * (unint64_t)(atomic_fetch_add_explicit(&strGetAvailableBuffer_strIndex, 1u, memory_order_relaxed) & 0xF);
        snprintf(v77, 0x40uLL, "{{%g, %g}, {%g, %g}}", *(double *)&v74, *((double *)&v74 + 1), v75, v76);
        uint64_t v78 = (char *)&strGetAvailableBuffer_strBuffer
            + 64
            * (unint64_t)(atomic_fetch_add_explicit(&strGetAvailableBuffer_strIndex, 1u, memory_order_relaxed) & 0xF);
        snprintf(v78, 0x40uLL, "{{%g, %g}, {%g, %g}}", v26, v36, v15, v35);
        double v79 = *(double *)(v1 + 240);
        double v80 = *(double *)(v1 + 248);
        int v81 = (char *)&strGetAvailableBuffer_strBuffer
            + 64
            * (unint64_t)(atomic_fetch_add_explicit(&strGetAvailableBuffer_strIndex, 1u, memory_order_relaxed) & 0xF);
        snprintf(v81, 0x40uLL, "{%g, %g}", v79, v80);
        unsigned int v82 = (char *)&strGetAvailableBuffer_strBuffer
            + 64
            * (unint64_t)(atomic_fetch_add_explicit(&strGetAvailableBuffer_strIndex, 1u, memory_order_relaxed) & 0xF);
        snprintf(v82, 0x40uLL, "{%g, %g}", v191, v186);
        int v207 = 138414082;
        unsigned int v208 = v172;
        __int16 v209 = 2080;
        uint64_t v210 = "fvdp_updateGeometryForFrame";
        __int16 v211 = 2080;
        *(void *)unsigned int v212 = v170;
        *(_WORD *)&v212[8] = 2080;
        unsigned int v213 = v73;
        int v19 = v174;
        __int16 v214 = 2080;
        uint64_t v215 = v77;
        OSType v5 = v179;
        __int16 v216 = 2080;
        int v217 = v78;
        __int16 v218 = 2080;
        char v219 = v81;
        __int16 v220 = 2080;
        uint64_t v221 = v82;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      uint64_t v3 = &dword_1E9351000;
    }
    goto LABEL_68;
  }
LABEL_160:
  if (pixelBufferOut) {
    CFRelease(pixelBufferOut);
  }
  frameDataDestroy((const void **)v2);
}

void cvPixelBufferSetColorAttachments(CVBufferRef buffer, void *a2)
{
  if (buffer)
  {
    if (a2)
    {
      long long v4 = (const void *)a2[1];
      if (v4) {
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24A90], v4, kCVAttachmentMode_ShouldPropagate);
      }
      OSType v5 = (const void *)a2[3];
      if (v5) {
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24BC8], v5, kCVAttachmentMode_ShouldPropagate);
      }
      int v6 = (const void *)a2[2];
      if (v6) {
        CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24C18], v6, kCVAttachmentMode_ShouldPropagate);
      }
    }
    if (sPixelBufferChromaLocation)
    {
      CVBufferSetAttachment(buffer, (CFStringRef)*MEMORY[0x1E4F24A10], (CFTypeRef)sPixelBufferChromaLocation, kCVAttachmentMode_ShouldPropagate);
      CFStringRef v7 = (const __CFString *)*MEMORY[0x1E4F24A08];
      double v8 = (const void *)sPixelBufferChromaLocation;
      CVBufferSetAttachment(buffer, v7, v8, kCVAttachmentMode_ShouldPropagate);
    }
  }
}

uint64_t fvdp_ensureEncoderAndPools(uint64_t a1)
{
  CFTypeRef cf[25] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (*(void *)(a1 + 344)) {
    return 0;
  }
  uint64_t v2 = (VTSessionRef *)(a1 + 344);
  if (*(_DWORD *)(a1 + 24) != 2)
  {
    CFMutableDictionaryRef Mutable = 0;
    double v9 = 0;
    double v10 = 0;
    uint64_t v23 = 4294955224;
    goto LABEL_124;
  }
  if (*(_DWORD *)(a1 + 320) != 1852796517)
  {
    LODWORD(cf[0]) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    int v6 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
    CFStringRef v7 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    double v9 = CFDictionaryCreateMutable(v5, 0, v6, v7);
    double v10 = CFDictionaryCreateMutable(v5, 0, v6, v7);
    FigCFDictionarySetInt32();
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F45640], @"None");
    double v11 = (const void **)MEMORY[0x1E4F1CFD0];
    if (!*(unsigned char *)(a1 + 386)) {
      double v11 = (const void **)MEMORY[0x1E4F1CFC8];
    }
    CFDictionarySetValue(v9, (const void *)*MEMORY[0x1E4F44BD0], *v11);
    if (*(_DWORD *)(a1 + 320) == 1869117027)
    {
      CFMutableDictionaryRef v12 = CFDictionaryCreateMutable(v5, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetInt64();
      CFDictionarySetValue(v10, (const void *)*MEMORY[0x1E4F24D20], v12);
      CFRelease(v12);
    }
    uint64_t v13 = VTCompressionSessionCreateWithOptions();
    if (v13)
    {
      uint64_t v23 = v13;
      LODWORD(cf[0]) = 0;
      double v48 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
      goto LABEL_123;
    }
    VTSessionSetProperties(*(VTSessionRef *)(a1 + 344), *(CFDictionaryRef *)(a1 + 504));
    double v14 = *(void **)(a1 + 376);
    if (v14)
    {
      double v15 = (const void *)v14[1];
      if (v15)
      {
        VTSessionSetProperty(*(VTSessionRef *)(a1 + 344), (CFStringRef)*MEMORY[0x1E4F44868], v15);
        double v14 = *(void **)(a1 + 376);
      }
      int v16 = (const void *)v14[3];
      if (v16)
      {
        VTSessionSetProperty(*(VTSessionRef *)(a1 + 344), (CFStringRef)*MEMORY[0x1E4F44B58], v16);
        double v14 = *(void **)(a1 + 376);
      }
      double v17 = (const void *)v14[2];
      if (v17) {
        VTSessionSetProperty(*v2, (CFStringRef)*MEMORY[0x1E4F44BB0], v17);
      }
    }
    int v18 = *(_DWORD *)(a1 + 320);
    if (v18 > 1752589104)
    {
      if (v18 != 1752589105 && v18 != 1869117027)
      {
        int v19 = 1836415073;
LABEL_25:
        if (v18 != v19) {
          goto LABEL_27;
        }
      }
    }
    else if (v18 != 1635148593 && v18 != 1718908515)
    {
      int v19 = 1718908520;
      goto LABEL_25;
    }
    vtSessionSetPropertyInt32(*(const void **)(a1 + 344), (const __CFString *)*MEMORY[0x1E4F44B68], *(_DWORD *)(a1 + 512));
LABEL_27:
    int v20 = *(_DWORD *)(a1 + 516);
    if (v20 >= 1)
    {
      if (dword_1E93512B0)
      {
        LODWORD(cf[0]) = 0;
        double v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v20 = *(_DWORD *)(a1 + 516);
      }
      vtSessionSetPropertyInt32(*v2, (const __CFString *)*MEMORY[0x1E4F449F0], v20);
    }
    int v25 = *(_DWORD *)(a1 + 520);
    if (v25 >= 1)
    {
      if (dword_1E93512B0)
      {
        LODWORD(cf[0]) = 0;
        double v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v25 = *(_DWORD *)(a1 + 520);
      }
      vtSessionSetPropertyInt32(*v2, (const __CFString *)*MEMORY[0x1E4F44AD8], v25);
    }
    int v27 = *(_DWORD *)(a1 + 324);
    if (v27 <= 2016567607)
    {
      if (v27 <= 1983013175)
      {
        if (v27 == 875704934)
        {
          int v31 = *(_DWORD *)(a1 + 320);
          if (v31 <= 1752589104)
          {
            double v32 = (const void **)MEMORY[0x1E4F451F8];
            goto LABEL_73;
          }
LABEL_76:
          if (v31 == 1752589105 || v31 == 1869117027)
          {
LABEL_80:
            double v32 = (const void **)MEMORY[0x1E4F452C0];
            goto LABEL_96;
          }
          int v39 = 1836415073;
LABEL_79:
          if (v31 != v39) {
            goto LABEL_101;
          }
          goto LABEL_80;
        }
        if (v27 != 875836518) {
          goto LABEL_101;
        }
LABEL_51:
        int v31 = *(_DWORD *)(a1 + 320);
        if (v31 <= 1752589104)
        {
          double v32 = (const void **)MEMORY[0x1E4F45200];
LABEL_73:
          if (v31 != 1635148593 && v31 != 1718908515)
          {
            int v39 = 1718908520;
            goto LABEL_79;
          }
          goto LABEL_96;
        }
        goto LABEL_76;
      }
      if (v27 != 1983013176)
      {
        if (v27 != 1983144248)
        {
          int v28 = 2016436536;
          goto LABEL_55;
        }
        goto LABEL_51;
      }
      int v37 = *(_DWORD *)(a1 + 320);
      double v32 = (const void **)MEMORY[0x1E4F452B0];
      if (v37 > 1836415072)
      {
        if (v37 == 1836415073) {
          goto LABEL_96;
        }
        int v38 = 1869117027;
      }
      else
      {
        if (v37 == 1718908520) {
          goto LABEL_96;
        }
        int v38 = 1752589105;
      }
      if (v37 == v38)
      {
LABEL_96:
        double v40 = *v32;
        if (*v32)
        {
          if (dword_1E93512B0)
          {
            LODWORD(cf[0]) = 0;
            int v41 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          VTSessionSetProperty(*v2, (CFStringRef)*MEMORY[0x1E4F44AA0], v40);
        }
        goto LABEL_101;
      }
LABEL_100:
      LODWORD(cf[0]) = 0;
      CFStringRef v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_101;
    }
    if (v27 <= 2016698679)
    {
      if (v27 != 2016567608)
      {
        int v28 = 2016686640;
LABEL_55:
        if (v27 == v28)
        {
          int v33 = *(_DWORD *)(a1 + 320);
          if (v33 > 1836415072)
          {
            if (v33 != 1869117027)
            {
              int v34 = 1836415073;
LABEL_83:
              if (v33 == v34) {
                goto LABEL_84;
              }
              goto LABEL_100;
            }
          }
          else if (v33 != 1718908520)
          {
            int v34 = 1752589105;
            goto LABEL_83;
          }
LABEL_84:
          if (vtSessionSetPropertyInt32(*v2, @"OutputBitDepth", 10))
          {
            LODWORD(cf[0]) = 0;
            double v52 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          double v32 = (const void **)MEMORY[0x1E4F452A8];
          goto LABEL_96;
        }
LABEL_101:
        fvdp_encoderControlApply(a1, 1);
        unsigned int v43 = *(const void **)(a1 + 328);
        CVPixelBufferPoolRef PixelBufferPool = VTCompressionSessionGetPixelBufferPool(*(VTCompressionSessionRef *)(a1 + 344));
        *(void *)(a1 + 328) = PixelBufferPool;
        if (PixelBufferPool) {
          CFRetain(PixelBufferPool);
        }
        if (v43) {
          CFRelease(v43);
        }
        goto LABEL_105;
      }
    }
    else
    {
      if (v27 == 2016698680) {
        goto LABEL_46;
      }
      if (v27 != 2019963442)
      {
        if (v27 != 2019963956) {
          goto LABEL_101;
        }
LABEL_46:
        int v29 = *(_DWORD *)(a1 + 320);
        if (v29 > 1836415072)
        {
          if (v29 == 1869117027) {
            goto LABEL_68;
          }
          int v30 = 1836415073;
        }
        else
        {
          if (v29 == 1718908520) {
            goto LABEL_68;
          }
          int v30 = 1752589105;
        }
        if (v29 != v30) {
          goto LABEL_100;
        }
LABEL_68:
        if (vtSessionSetPropertyInt32(*v2, @"OutputBitDepth", 10))
        {
          LODWORD(cf[0]) = 0;
          double v51 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        double v32 = (const void **)MEMORY[0x1E4F452B8];
        goto LABEL_96;
      }
    }
    int v35 = *(_DWORD *)(a1 + 320);
    if (v35 > 1836415072)
    {
      if (v35 == 1869117027) {
        goto LABEL_90;
      }
      int v36 = 1836415073;
    }
    else
    {
      if (v35 == 1718908520) {
        goto LABEL_90;
      }
      int v36 = 1752589105;
    }
    if (v35 != v36) {
      goto LABEL_100;
    }
LABEL_90:
    if (vtSessionSetPropertyInt32(*v2, @"OutputBitDepth", 10))
    {
      LODWORD(cf[0]) = 0;
      double v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    double v32 = (const void **)MEMORY[0x1E4F452B0];
    goto LABEL_96;
  }
  if (*(void *)(a1 + 328)) {
    return 0;
  }
  LODWORD(cf[0]) = 0;
  uint64_t v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v22 = fvdp_createPixelBufferPool(*(unsigned int *)(a1 + 324), (CVPixelBufferPoolRef *)(a1 + 328));
  double v10 = 0;
  double v9 = 0;
  CFMutableDictionaryRef Mutable = 0;
  if (v22)
  {
    uint64_t v23 = v22;
    LODWORD(cf[0]) = 0;
    double v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFMutableDictionaryRef Mutable = 0;
    double v9 = 0;
    double v10 = 0;
LABEL_124:
    double v50 = *(const void **)(a1 + 328);
    if (v50)
    {
      CFRelease(v50);
      *(void *)(a1 + 328) = 0;
    }
    if (*v2)
    {
      CFRelease(*v2);
      *uint64_t v2 = 0;
    }
    goto LABEL_112;
  }
LABEL_105:
  if (*(_DWORD *)(a1 + 640) == 1)
  {
    uint64_t v45 = *(unsigned int *)(a1 + 644);
    if (v45 == *(_DWORD *)(a1 + 324))
    {
      writebackCacheInitWithPool(*(void **)(a1 + 648), *(const void **)(a1 + 328), *(void *)(a1 + 376));
      goto LABEL_111;
    }
    cf[0] = 0;
    uint64_t v46 = fvdp_createPixelBufferPool(v45, (CVPixelBufferPoolRef *)cf);
    if (!v46)
    {
      writebackCacheInitWithPool(*(void **)(a1 + 648), cf[0], *(void *)(a1 + 376));
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      goto LABEL_111;
    }
    uint64_t v23 = v46;
    unsigned int v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
LABEL_123:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_124;
  }
LABEL_111:
  uint64_t v23 = 0;
LABEL_112:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v10) {
    CFRelease(v10);
  }
  if (v9) {
    CFRelease(v9);
  }
  return v23;
}

uint64_t fvdp_createPixelBufferPool(uint64_t a1, CVPixelBufferPoolRef *a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v4 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFAllocatorRef v5 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  CFStringRef v7 = CFDictionaryCreateMutable(v3, 0, v4, v5);
  CFDictionarySetValue(v7, (const void *)*MEMORY[0x1E4F2F128], @"FigVirtualDisplay");
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24D20], v7);
  CFDictionaryRef v8 = CFDictionaryCreateMutable(v3, 0, v4, v5);
  FigCFDictionarySetInt32();
  uint64_t v9 = CVPixelBufferPoolCreate(v3, v8, Mutable, a2);
  if (!v9)
  {
    if (!v8) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v8) {
LABEL_3:
  }
    CFRelease(v8);
LABEL_4:
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v7) {
    CFRelease(v7);
  }
  return v9;
}

void fvdp_sendEncodedFrame(uint64_t a1, char *a2, int a3, char a4, CMSampleBufferRef sbuf)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  if ((a4 & 2) != 0)
  {
    if (*(unsigned char *)(a1 + 744))
    {
      unsigned int v8 = 1;
      atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 704), 1u, memory_order_relaxed);
      if (!a2[164]) {
        goto LABEL_68;
      }
    }
    else
    {
      if (!*(unsigned char *)(a1 + 745)) {
        goto LABEL_68;
      }
      atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 704), 1u, memory_order_relaxed);
      unsigned int v8 = a2[164] != 0;
      if (!a2[164]) {
        goto LABEL_68;
      }
    }
    atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 712), v8, memory_order_relaxed);
    goto LABEL_68;
  }
  if (a3)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
LABEL_67:
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_68;
  }
  unsigned int TotalSampleSize = CMSampleBufferGetTotalSampleSize(sbuf);
  if (dword_1E93512B0 >= 2)
  {
    double v11 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(_DWORD *)(a1 + 24) == 2)
  {
    if (*(unsigned char *)(a1 + 752) || *(unsigned char *)(a1 + 753)) {
      *((void *)a2 + 16) = mach_absolute_time();
    }
    if (*(unsigned char *)(a1 + 754) && *MEMORY[0x1E4F1EBA8] == 1) {
      kdebug_trace();
    }
    if (*(unsigned char *)(a1 + 752) || *(unsigned char *)(a1 + 753))
    {
      if (fvdp_timestampsReportForFrame_once != -1) {
        dispatch_once(&fvdp_timestampsReportForFrame_once, &__block_literal_global_432);
      }
      if (a2[164])
      {
        for (uint64_t i = 0; i != 24; i += 8)
          *(void *)&a2[i + 96] = *((void *)a2 + 15);
      }
      uint64_t v13 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
      if (*(unsigned char *)(a1 + 752))
      {
        CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
        for (uint64_t j = 0; j != 40; j += 8)
        {
          uint64_t v16 = FigHostTimeToNanoseconds();
          CFStringAppendFormat(Mutable, 0, @" %6.1f", (double)v16 / 1000000.0);
        }
        unsigned int add_explicit = atomic_fetch_add_explicit(fvdp_timestampsReportForFrame_lineCount, 1u, memory_order_relaxed);
        int v18 = dword_1E93512B0;
        HIDWORD(v19) = -286331153 * add_explicit;
        LODWORD(v19) = -286331153 * add_explicit;
        if ((v19 >> 2) <= 0x4444444 && dword_1E93512B0 != 0)
        {
          double v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v18 = dword_1E93512B0;
        }
        if (v18)
        {
          uint64_t v22 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v13 = (const __CFAllocator **)MEMORY[0x1E4F1CF80];
        if (Mutable) {
          CFRelease(Mutable);
        }
      }
      if (*(unsigned char *)(a1 + 753))
      {
        CFAllocatorRef v23 = *v13;
        CFMutableArrayRef v24 = CFArrayCreateMutable(v23, 0, MEMORY[0x1E4F1D510]);
        for (uint64_t k = 0; k != 40; k += 8)
          FigCFArrayAppendInt64();
        uint64_t CMBaseObject = FigVirtualDisplaySinkGetCMBaseObject(*(void *)(a1 + 64));
        uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v27) {
          uint64_t v28 = v27;
        }
        else {
          uint64_t v28 = 0;
        }
        int v29 = *(void (**)(uint64_t, __CFString *, CFMutableArrayRef))(v28 + 56);
        if (v29) {
          v29(CMBaseObject, @"timestamps", v24);
        }
        CFNumberRef v30 = CFNumberCreate(v23, kCFNumberSInt64Type, a2 + 72);
        uint64_t v31 = FigVirtualDisplaySinkGetCMBaseObject(*(void *)(a1 + 64));
        uint64_t v32 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v32) {
          uint64_t v33 = v32;
        }
        else {
          uint64_t v33 = 0;
        }
        int v34 = *(void (**)(uint64_t, __CFString *, CFNumberRef))(v33 + 56);
        if (v34) {
          v34(v31, @"submitSurfaceTimestamp", v30);
        }
        if (v24) {
          CFRelease(v24);
        }
        if (v30) {
          CFRelease(v30);
        }
      }
    }
    int v35 = *(uint64_t **)(a1 + 672);
    if (v35) {
      tapWriteSampleBuffer(v35, sbuf);
    }
    uint64_t v36 = *(void *)(a1 + 64);
    uint64_t v37 = *((unsigned int *)a2 + 34);
    double v38 = *((double *)a2 + 1);
    double v39 = *((double *)a2 + 2);
    double v40 = *((double *)a2 + 3);
    double v41 = *((double *)a2 + 4);
    double v42 = *((double *)a2 + 5);
    double v43 = *((double *)a2 + 6);
    double v45 = *((double *)a2 + 7);
    double v44 = *((double *)a2 + 8);
    uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v46) {
      uint64_t v47 = v46;
    }
    else {
      uint64_t v47 = 0;
    }
    double v48 = *(unsigned int (**)(uint64_t, CMSampleBufferRef, uint64_t, double, double, double, double, double, double, double, double, double))(v47 + 24);
    if (!v48 || v48(v36, sbuf, v37, v38, v39, v40, v41, v42, v43, v45, v44, v50))
    {
      unsigned int v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
      goto LABEL_67;
    }
    if (*(unsigned char *)(a1 + 744) || *(unsigned char *)(a1 + 745))
    {
      if (TotalSampleSize) {
        atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 724), TotalSampleSize, memory_order_relaxed);
      }
    }
  }
LABEL_68:
  frameDataDestroy((const void **)a2);
}

uint64_t vtSessionSetPropertyInt32(const void *a1, const __CFString *a2, int a3)
{
  int valuePtr = a3;
  CFNumberRef v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt32Type, &valuePtr);
  uint64_t v6 = VTSessionSetProperty(a1, a2, v5);
  CFRelease(v5);
  return v6;
}

void fvdp_encoderControlApply(uint64_t a1, int a2)
{
  long long v4 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (*(unsigned char *)(a1 + 580) | a2)
  {
    int v5 = *(_DWORD *)(a1 + 320);
    if (v5 > 1752589104)
    {
      BOOL v6 = v5 == 1752589105 || v5 == 1869117027;
      int v7 = 1836415073;
    }
    else
    {
      BOOL v6 = v5 == 1635148593 || v5 == 1718908515;
      int v7 = 1718908520;
    }
    BOOL v8 = v6 || v5 == v7;
    if (!v8
      || ((v9 = *(_DWORD *)(a1 + 512), BOOL v10 = v9 > 0x26, v11 = (1 << v9) & 0x6000100000, !v10)
        ? (BOOL v12 = v11 == 0)
        : (BOOL v12 = 1),
          v12))
    {
      vtSessionSetPropertyInt32(*(const void **)(a1 + 344), (const __CFString *)*MEMORY[0x1E4F44810], *(_DWORD *)(a1 + 584));
    }
    else
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
      if (*(int *)(a1 + 576) >= 1)
      {
        uint64_t v14 = 0;
        do
        {
          FigCFArrayAppendDouble();
          FigCFArrayAppendDouble();
          ++v14;
        }
        while (v14 < *(int *)(a1 + 576));
      }
      VTSessionSetProperty(*(VTSessionRef *)(a1 + 344), (CFStringRef)*MEMORY[0x1E4F44898], Mutable);
      CFRelease(Mutable);
    }
  }
  if (*(unsigned __int8 *)(a1 + 600) | a2)
  {
    double v15 = *(const void **)(a1 + 344);
    CFStringRef v16 = (const __CFString *)*MEMORY[0x1E4F448F0];
    uint64_t valuePtr = *(void *)(a1 + 592);
    CFNumberRef v17 = CFNumberCreate(*v4, kCFNumberDoubleType, &valuePtr);
    VTSessionSetProperty(v15, v16, v17);
    CFRelease(v17);
  }
  *(unsigned char *)(a1 + 580) = 0;
  *(unsigned char *)(a1 + 600) = 0;
}

void tapWriteSampleBuffer(uint64_t *a1, CMSampleBufferRef sbuf)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (!sbuf) {
    return;
  }
  CMBlockBufferRef blockBufferOut = 0;
  CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
  if (DataBuffer)
  {
    OSStatus CopyWithNoData = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], DataBuffer, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 2u, &blockBufferOut);
    if (CopyWithNoData || (OSStatus CopyWithNoData = FigSampleBufferCreateCopyWithNoData()) != 0)
    {
      OSStatus v6 = CopyWithNoData;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    }
    else
    {
      OSStatus v6 = CMSampleBufferSetDataBuffer(0, blockBufferOut);
      if (!v6)
      {
        CFTypeRef v7 = 0;
        goto LABEL_8;
      }
      CFMutableArrayRef v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFTypeRef v7 = 0;
  }
  else
  {
    CFTypeRef v7 = CFRetain(sbuf);
    OSStatus v6 = 0;
  }
LABEL_8:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  if (!v6)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t, CFTypeRef, void, double, double, double, double, double, double, double, double))(v10 + 24);
    if (v11)
    {
      OSStatus v12 = v11(v8, v7, 0, *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24), *MEMORY[0x1E4F1DB28], *(double *)(MEMORY[0x1E4F1DB28] + 8), *(double *)(MEMORY[0x1E4F1DB28] + 16), *(double *)(MEMORY[0x1E4F1DB28] + 24));
      if (!v12)
      {
        if (!v7) {
          return;
        }
        goto LABEL_17;
      }
      OSStatus v6 = v12;
    }
    else
    {
      OSStatus v6 = -12782;
    }
    LODWORD(blockBufferOut) = 0;
    uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v14 = blockBufferOut;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v15 = v14;
    }
    else {
      unsigned int v15 = v14 & 0xFFFFFFFE;
    }
    if (!v15) {
      goto LABEL_31;
    }
    int v26 = 138413058;
    uint64_t v27 = &stru_1EE53F4B8;
    __int16 v28 = 2080;
    int v29 = "tapWriteSampleBuffer";
    __int16 v30 = 1024;
    *(_DWORD *)uint64_t v31 = 1579;
    *(_WORD *)&v31[4] = 1024;
    *(_DWORD *)&v31[6] = v6;
    goto LABEL_25;
  }
  LODWORD(blockBufferOut) = 0;
  CFStringRef v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v17 = blockBufferOut;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT)) {
    unsigned int v18 = v17;
  }
  else {
    unsigned int v18 = v17 & 0xFFFFFFFE;
  }
  if (v18)
  {
    int v26 = 138413058;
    uint64_t v27 = &stru_1EE53F4B8;
    __int16 v28 = 2080;
    int v29 = "tapWriteSampleBuffer";
    __int16 v30 = 1024;
    *(_DWORD *)uint64_t v31 = 1576;
    *(_WORD *)&v31[4] = 1024;
    *(_DWORD *)&v31[6] = v6;
LABEL_25:
    _os_log_send_and_compose_impl();
  }
LABEL_31:
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  LODWORD(blockBufferOut) = 0;
  unint64_t v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  unsigned int v20 = blockBufferOut;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
    unsigned int v21 = v20;
  }
  else {
    unsigned int v21 = v20 & 0xFFFFFFFE;
  }
  if (v21)
  {
    uint64_t v22 = a1[1];
    int v26 = 138413058;
    uint64_t v27 = &stru_1EE53F4B8;
    __int16 v28 = 2080;
    int v29 = "tapWriteSampleBuffer";
    __int16 v30 = 2112;
    *(void *)uint64_t v31 = v22;
    *(_WORD *)&v31[8] = 1024;
    OSStatus v32 = v6;
    _os_log_send_and_compose_impl();
  }
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (v7) {
LABEL_17:
  }
    CFRelease(v7);
}

void __fvdp_timestampsReportForFrame_block_invoke()
{
  fvdp_timestampsReportForFrame_headerStr = (uint64_t)CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  uint64_t v0 = 2u;
  do
    CFStringAppendFormat((CFMutableStringRef)fvdp_timestampsReportForFrame_headerStr, 0, @"  %@", kTimestampNames[v0++]);
  while (v0 != 7);
}

uint64_t fvdp_shouldDropFrame(uint64_t a1)
{
  propertyValueOut[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (!**(void **)(a1 + 56)) {
    return 0;
  }
  int v2 = *(_DWORD *)(a1 + 480);
  if (v2 != 2)
  {
    if (v2 == 1 && *(unsigned char *)(a1 + 217))
    {
      if (dword_1E93512B0) {
        goto LABEL_18;
      }
      return 1;
    }
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 217))
  {
LABEL_8:
    if (*(int *)(a1 + 364) >= 1)
    {
      CFAllocatorRef v3 = *(const void **)(a1 + 344);
      if (v3)
      {
        CFStringRef v4 = (const __CFString *)*MEMORY[0x1E4F44A28];
        int valuePtr = 0;
        propertyValueOut[0] = 0;
        VTSessionCopyProperty(v3, v4, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], propertyValueOut);
        if (propertyValueOut[0])
        {
          CFTypeID v5 = CFGetTypeID(propertyValueOut[0]);
          if (v5 == CFNumberGetTypeID()) {
            CFNumberGetValue((CFNumberRef)propertyValueOut[0], kCFNumberSInt32Type, &valuePtr);
          }
          if (propertyValueOut[0]) {
            CFRelease(propertyValueOut[0]);
          }
        }
        int v6 = valuePtr;
        if (dword_1E93512B0 >= 3)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        if (v6 >= *(_DWORD *)(a1 + 364))
        {
          if (dword_1E93512B0)
          {
            unsigned int v17 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          if (!*(unsigned char *)(a1 + 744) && !*(unsigned char *)(a1 + 745)) {
            return 1;
          }
          unsigned int v18 = (atomic_uint *)(a1 + 716);
          goto LABEL_41;
        }
      }
    }
    uint64_t v10 = *(void *)(a1 + 64);
    uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v11) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = *(unsigned int (**)(uint64_t))(v12 + 80);
    if (v13 && v13(v10))
    {
      if (dword_1E93512B0)
      {
        unsigned int v14 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (!*(unsigned char *)(a1 + 744) && !*(unsigned char *)(a1 + 745)) {
        return 1;
      }
      unsigned int v18 = (atomic_uint *)(a1 + 720);
LABEL_41:
      uint64_t v9 = 1;
      atomic_fetch_add_explicit(v18, 1u, memory_order_relaxed);
      return v9;
    }
    int v15 = *(_DWORD *)(a1 + 476);
    if (v15 >= 1)
    {
      if (dword_1E93512B0)
      {
        CFStringRef v16 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        int v15 = *(_DWORD *)(a1 + 476);
      }
      *(_DWORD *)(a1 + 476) = v15 - 1;
      return 1;
    }
    return 0;
  }
  if (!dword_1E93512B0) {
    return 1;
  }
LABEL_18:
  uint64_t v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  uint64_t v9 = 1;
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  return v9;
}

uint64_t fvdp_sendFrameToEncoder(uint64_t a1, int a2)
{
  char v2 = a2;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  CMAttachmentBearerRef target = 0;
  uint64_t v4 = *(void *)(a1 + 56);
  CFTypeID v5 = *(__CFString **)(a1 + 16);
  if (*(unsigned char *)(a1 + 744) || *(unsigned char *)(a1 + 745))
  {
    atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 700), 1u, memory_order_relaxed);
    if (a2) {
      atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 708), 1u, memory_order_relaxed);
    }
  }
  if (!*(void *)v4)
  {
    if (dword_1E93512B0)
    {
      LODWORD(cf) = 0;
      type[0] = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    uint64_t v37 = *(OpaqueVTCompressionSession **)(a1 + 344);
    if (v37)
    {
      CMTime completeUntilPresentationTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      VTCompressionSessionCompleteFrames(v37, &completeUntilPresentationTimeStamp);
    }
    uint64_t v38 = *(void *)(a1 + 64);
    uint64_t v39 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v39) {
      uint64_t v40 = v39;
    }
    else {
      uint64_t v40 = 0;
    }
    double v41 = *(void (**)(uint64_t, __CFString *, void, void))(v40 + 56);
    if (v41) {
      v41(v38, @"clearScreen", *MEMORY[0x1E4F1CFD0], 0);
    }
    goto LABEL_62;
  }
  if (!*(void *)(a1 + 344) && *(_DWORD *)(a1 + 320) != 1852796517)
  {
LABEL_62:
    uint64_t v11 = 0;
    CFDictionaryRef Mutable = 0;
    uint64_t v42 = 0;
    goto LABEL_97;
  }
  *(unsigned char *)(a1 + 48) = 0;
  int v6 = *(NSObject **)(a1 + 40);
  dispatch_time_t v7 = dispatch_time(0, *(void *)(a1 + 32));
  dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  uint64_t v8 = *(void *)(a1 + 664);
  if (v8)
  {
    uint64_t v9 = *(__CVBuffer **)v4;
    int64_t v10 = *(void *)(a1 + 432);
    CFTypeRef cf = 0;
    if (v9)
    {
      if (fvdp_createSampleBufferWithPixelBuffer(v9, v10, (CFTypeRef *)(v8 + 16), (CMSampleBufferRef *)&cf))
      {
        unsigned int v55 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        *(_DWORD *)os_log_type_t type = 0;
        os_log_type_t v67 = OS_LOG_TYPE_DEFAULT;
        BOOL v64 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      else
      {
        tapWriteSampleBuffer((uint64_t *)v8, (CMSampleBufferRef)cf);
      }
      if (cf) {
        CFRelease(cf);
      }
    }
  }
  uint64_t v11 = malloc_type_malloc(0xA8uLL, 0x10E0040FEF2BE32uLL);
  long long v13 = *(_OWORD *)(v4 + 16);
  long long v12 = *(_OWORD *)(v4 + 32);
  *uint64_t v11 = *(_OWORD *)v4;
  v11[1] = v13;
  _OWORD v11[2] = v12;
  long long v14 = *(_OWORD *)(v4 + 96);
  long long v16 = *(_OWORD *)(v4 + 48);
  long long v15 = *(_OWORD *)(v4 + 64);
  v11[5] = *(_OWORD *)(v4 + 80);
  void v11[6] = v14;
  v11[3] = v16;
  _OWORD v11[4] = v15;
  long long v18 = *(_OWORD *)(v4 + 128);
  long long v17 = *(_OWORD *)(v4 + 144);
  long long v19 = *(_OWORD *)(v4 + 112);
  *((void *)v11 + 20) = *(void *)(v4 + 160);
  v11[8] = v18;
  v11[9] = v17;
  _OWORD v11[7] = v19;
  if (*(void *)v11) {
    CFRetain(*(CFTypeRef *)v11);
  }
  unsigned int v20 = (const void *)*((void *)v11 + 18);
  if (v20) {
    CFRetain(v20);
  }
  int64_t v21 = *(void *)(a1 + 432);
  *((void *)v11 + 19) = v21;
  *((unsigned char *)v11 + 164) = v2;
  int v22 = *(_DWORD *)(a1 + 320);
  if (v22 != 1852796517)
  {
    CFDictionaryRef Mutable = 0;
    int v26 = *(__CFString **)(a1 + 16);
    if (v22 > 1752589104)
    {
      if (v22 == 1752589105 || v22 == 1869117027) {
        goto LABEL_41;
      }
      int v27 = 1836415073;
    }
    else
    {
      if (v22 == 1635148593 || v22 == 1718908515) {
        goto LABEL_41;
      }
      int v27 = 1718908520;
    }
    if (v22 != v27)
    {
LABEL_81:
      fvdp_encoderControlApply(a1, 0);
      if (*(unsigned char *)(a1 + 752) || *(unsigned char *)(a1 + 753)) {
        *((void *)v11 + 15) = mach_absolute_time();
      }
      if (*(unsigned char *)(a1 + 754) && *MEMORY[0x1E4F1EBA8] == 1) {
        kdebug_trace();
      }
      double v48 = *(OpaqueVTCompressionSession **)(a1 + 344);
      unsigned int v49 = *(__CVBuffer **)v4;
      CMTimeMake(&presentationTimeStamp, *(void *)(a1 + 432), 1000000000);
      CMTime completeUntilPresentationTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
      uint64_t v42 = VTCompressionSessionEncodeFrame(v48, v49, &presentationTimeStamp, &completeUntilPresentationTimeStamp, Mutable, v11, 0);
      if (v42)
      {
        LODWORD(cf) = 0;
        type[0] = OS_LOG_TYPE_DEFAULT;
        double v50 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v51 = cf;
        if (os_log_type_enabled(v50, type[0])) {
          unsigned int v52 = v51;
        }
        else {
          unsigned int v52 = v51 & 0xFFFFFFFE;
        }
        if (v52)
        {
          double v53 = &stru_1EE53F4B8;
          if (v5) {
            double v53 = v5;
          }
          int v70 = 138412802;
          double v71 = v53;
          __int16 v72 = 2080;
          int v73 = "fvdp_sendFrameToEncoder";
          __int16 v74 = 1024;
          int v75 = v42;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v11 = 0;
      goto LABEL_97;
    }
LABEL_41:
    CFDictionaryRef Mutable = 0;
    unsigned int v28 = *(_DWORD *)(a1 + 512);
    if (v28 <= 0x26 && ((1 << v28) & 0x6000100000) != 0)
    {
      CFAllocatorRef v29 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetDouble();
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      __int16 v30 = *(const void **)(a1 + 624);
      if (v30)
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44DC0], v30);
        uint64_t v31 = *(const void **)(a1 + 624);
        if (v31)
        {
          CFRelease(v31);
          *(void *)(a1 + 624) = 0;
        }
      }
      FigCFDictionarySetInt32();
      OSStatus v32 = (const void **)MEMORY[0x1E4F1CFD0];
      if (*(unsigned char *)(a1 + 603))
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44ED8], (const void *)*MEMORY[0x1E4F1CFD0]);
        if (dword_1E93512B0)
        {
          LODWORD(cf) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v34 = cf;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v35 = v34;
          }
          else {
            unsigned int v35 = v34 & 0xFFFFFFFE;
          }
          if (v35)
          {
            uint64_t v36 = &stru_1EE53F4B8;
            if (v26) {
              uint64_t v36 = v26;
            }
            int v70 = 138412546;
            double v71 = v36;
            __int16 v72 = 2080;
            int v73 = "fvdp_encoderControlCreateFrameProperties";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          OSStatus v32 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        *(unsigned char *)(a1 + 603) = 0;
      }
      else if (*(unsigned char *)(a1 + 604))
      {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44EE8], (const void *)*MEMORY[0x1E4F1CFD0]);
        if (dword_1E93512B0)
        {
          LODWORD(cf) = 0;
          type[0] = OS_LOG_TYPE_DEFAULT;
          double v43 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v44 = cf;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT)) {
            unsigned int v45 = v44;
          }
          else {
            unsigned int v45 = v44 & 0xFFFFFFFE;
          }
          if (v45)
          {
            uint64_t v46 = &stru_1EE53F4B8;
            if (v26) {
              uint64_t v46 = v26;
            }
            int v70 = 138412546;
            double v71 = v46;
            __int16 v72 = 2080;
            int v73 = "fvdp_encoderControlCreateFrameProperties";
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          OSStatus v32 = (const void **)MEMORY[0x1E4F1CFD0];
        }
        *(unsigned char *)(a1 + 604) = 0;
      }
      if (*((unsigned char *)v11 + 164)) {
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44F40], *v32);
      }
      if (*(_DWORD *)(a1 + 512) == 38)
      {
        CFMutableDictionaryRef v47 = CFDictionaryCreateMutable(v29, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        FigCFDictionarySetInt32();
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F44F90], v47);
        if (v47) {
          CFRelease(v47);
        }
      }
    }
    goto LABEL_81;
  }
  if (*(void *)(a1 + 344))
  {
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    unsigned int v56 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v57 = cf;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v58 = v57;
    }
    else {
      unsigned int v58 = v57 & 0xFFFFFFFE;
    }
    if (v58)
    {
      uint64_t v59 = &stru_1EE53F4B8;
      if (v5) {
        uint64_t v59 = v5;
      }
      int v70 = 138412802;
      double v71 = v59;
      __int16 v72 = 2080;
      int v73 = "fvdp_sendFrameToEncoder";
      __int16 v74 = 1024;
      int v75 = 3691;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFDictionaryRef Mutable = 0;
    uint64_t v42 = 4294955226;
  }
  else
  {
    uint64_t SampleBufferWithPixelBuffer = fvdp_createSampleBufferWithPixelBuffer(*(__CVBuffer **)v4, v21, (CFTypeRef *)(a1 + 352), (CMSampleBufferRef *)&target);
    if (!SampleBufferWithPixelBuffer)
    {
      if (*(_DWORD *)(a1 + 320) == 1852796517 && *((unsigned char *)v11 + 164)) {
        CMSetAttachment(target, (CFStringRef)*MEMORY[0x1E4F44F40], (CFTypeRef)*MEMORY[0x1E4F1CFD0], 1u);
      }
      if (*(unsigned char *)(a1 + 752) || *(unsigned char *)(a1 + 753)) {
        *((void *)v11 + 15) = mach_absolute_time();
      }
      if (*(unsigned char *)(a1 + 754) && *MEMORY[0x1E4F1EBA8] == 1) {
        kdebug_trace();
      }
      fvdp_sendEncodedFrame(a1, (char *)v11, 0, 0, (CMSampleBufferRef)target);
      goto LABEL_62;
    }
    uint64_t v42 = SampleBufferWithPixelBuffer;
    LODWORD(cf) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    CGFloat v60 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v61 = cf;
    if (os_log_type_enabled(v60, type[0])) {
      unsigned int v62 = v61;
    }
    else {
      unsigned int v62 = v61 & 0xFFFFFFFE;
    }
    if (v62)
    {
      CFNumberRef v63 = &stru_1EE53F4B8;
      int v70 = 138413058;
      if (v5) {
        CFNumberRef v63 = v5;
      }
      double v71 = v63;
      __int16 v72 = 2080;
      int v73 = "fvdp_sendFrameToEncoder";
      __int16 v74 = 1024;
      int v75 = 3694;
      __int16 v76 = 1024;
      int v77 = v42;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFDictionaryRef Mutable = 0;
  }
LABEL_97:
  if (target) {
    CFRelease(target);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  frameDataDestroy((const void **)v11);
  return v42;
}

uint64_t fvdp_createSampleBufferWithPixelBuffer(__CVBuffer *a1, int64_t value, CFTypeRef *a3, CMSampleBufferRef *a4)
{
  formatDescriptionOut[22] = *(CMVideoFormatDescriptionRef *)MEMORY[0x1E4F143B8];
  formatDescriptionOut[0] = 0;
  memset(&sampleTiming, 0, sizeof(sampleTiming));
  if (a1 && a3 && a4)
  {
    CMTimeMake(&sampleTiming.presentationTimeStamp, value, 1000000000);
    sampleTiming.decodeTimeStamp = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    sampleTiming.CMTime duration = sampleTiming.decodeTimeStamp;
    CFTypeRef v7 = *a3;
    CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    char v9 = 1;
    int64_t v10 = (const opaqueCMFormatDescription *)*a3;
    while (1)
    {
      if (v10)
      {
        CMVideoFormatDescriptionRef v11 = 0;
      }
      else
      {
        uint64_t v12 = CMVideoFormatDescriptionCreateForImageBuffer(v8, a1, formatDescriptionOut);
        if (v12)
        {
          uint64_t v16 = v12;
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          goto LABEL_25;
        }
        CMVideoFormatDescriptionRef v11 = formatDescriptionOut[0];
      }
      if (v11) {
        long long v13 = v11;
      }
      else {
        long long v13 = v10;
      }
      uint64_t v14 = CMSampleBufferCreateReadyWithImageBuffer(v8, a1, v13, &sampleTiming, a4);
      CMVideoFormatDescriptionRef v15 = formatDescriptionOut[0];
      if (!v14)
      {
        if (!formatDescriptionOut[0]) {
          return 0;
        }
        if (*a3)
        {
          CFRelease(*a3);
          CMVideoFormatDescriptionRef v15 = formatDescriptionOut[0];
        }
        uint64_t v16 = 0;
        *a3 = v15;
        return v16;
      }
      uint64_t v16 = v14;
      if (v14 != -12743 || formatDescriptionOut[0])
      {
        long long v19 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
LABEL_25:
        fig_log_call_emit_and_clean_up_after_send_and_compose();
        goto LABEL_26;
      }
      int64_t v10 = 0;
      char v17 = (v7 == 0) | ~v9;
      char v9 = 0;
      if (v17) {
        return 0;
      }
    }
  }
  int64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  uint64_t v16 = 4294955226;
LABEL_26:
  if (formatDescriptionOut[0]) {
    CFRelease(formatDescriptionOut[0]);
  }
  return v16;
}

uint64_t writebackCacheCopyBuffer(void *a1, int a2, int a3, CVBufferRef *a4, double a5, double a6)
{
  if (!a1)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    return 0;
  }
  MEMORY[0x19970E910](*a1);
  BOOL v12 = a5 == *((double *)a1 + 6) && a6 == *((double *)a1 + 7);
  if (v12 && *((_DWORD *)a1 + 20) == a2 && *((unsigned __int8 *)a1 + 84) == a3)
  {
    long long v13 = (__CVBuffer *)a1[4];
    if (v13)
    {
LABEL_12:
      BOOL v15 = v13 != 0;
      if (a4 && v13)
      {
        *a4 = v13;
        a1[4] = 0;
        BOOL v15 = 1;
      }
      goto LABEL_16;
    }
    uint64_t v14 = (__CVPixelBufferPool *)a1[1];
    if (v14)
    {
      CVPixelBufferPoolCreatePixelBufferWithAuxAttributes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v14, (CFDictionaryRef)a1[2], (CVPixelBufferRef *)a1 + 4);
      cvPixelBufferSetColorAttachments((CVBufferRef)a1[4], (void *)a1[5]);
      long long v13 = (__CVBuffer *)a1[4];
      goto LABEL_12;
    }
  }
  BOOL v15 = 0;
LABEL_16:
  MEMORY[0x19970E930](*a1);
  if (a4 && v15)
  {
    CVBufferSetAttachment(*a4, @"FVDWritebackBuffer", (CFTypeRef)*MEMORY[0x1E4F1CFD0], kCVAttachmentMode_ShouldNotPropagate);
    return 1;
  }
  return v15;
}

uint64_t __fvdp_copyWritebackPixelBuffer_block_invoke(uint64_t a1)
{
  return fvdp_ensureWritebackPixelBuffer(*(void *)(a1 + 32), *(_DWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), *(double *)(a1 + 40), *(float64_t *)(a1 + 48));
}

uint64_t fvdp_ensureWritebackPixelBuffer(uint64_t result, unsigned int a2, int a3, double a4, float64_t a5)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(result + 24) != 2) {
    return result;
  }
  LODWORD(v5) = a3;
  uint64_t v9 = result;
  int64_t v10 = *(__CFString **)(result + 16);
  *(unsigned char *)(result + 217) = a3;
  CMVideoFormatDescriptionRef v11 = *(double **)(result + 648);
  BOOL v12 = (_OWORD *)MEMORY[0x1E4F1DB30];
  double v13 = *MEMORY[0x1E4F1DB30];
  double v14 = *(double *)(MEMORY[0x1E4F1DB30] + 8);
  if (v11)
  {
    MEMORY[0x19970E910](*(void *)v11);
    BOOL v15 = a4 == v11[6] && a5 == v11[7];
    double v16 = v14;
    double v17 = v13;
    if (v15)
    {
      double v16 = v14;
      double v17 = v13;
      if (*((_DWORD *)v11 + 20) == a2)
      {
        double v16 = v14;
        double v17 = v13;
        if (*((unsigned __int8 *)v11 + 84) == v5)
        {
          double v17 = v11[8];
          double v16 = v11[9];
        }
      }
    }
    MEMORY[0x19970E930](*(void *)v11);
  }
  else
  {
    LODWORD(pixelBufferOut[0]) = 0;
    v62[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    double v16 = v14;
    double v17 = v13;
  }
  if (v17 == v13 && v16 == v14)
  {
    pixelBufferOut[0] = *(CVPixelBufferRef *)&a4;
    pixelBufferOut[1] = *(CVPixelBufferRef *)&a5;
    double v19 = *(double *)(v9 + 136);
    double v20 = *(double *)(v9 + 144);
    if (*(unsigned char *)(v9 + 217))
    {
      if (a4 > v19 || a5 > v20)
      {
        *(_DWORD *)unsigned int v62 = 0;
        int64_t v21 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
    }
    else
    {
      if (CFEqual(*(CFTypeRef *)(v9 + 72), @"FileWriter") && !*(unsigned char *)(v9 + 88))
      {
        HIDWORD(v24) = -1527099483 * a2 - 2;
        LODWORD(v24) = HIDWORD(v24);
        BOOL v23 = (v24 >> 2) < 0x16C16C1;
      }
      else
      {
        BOOL v23 = a4 > a5;
        if (v19 > v20) {
          BOOL v23 = a4 < a5;
        }
      }
      if (v23) {
        double v25 = v19;
      }
      else {
        double v25 = v20;
      }
      if (v23) {
        double v26 = v20;
      }
      else {
        double v26 = v19;
      }
      if (*(unsigned char *)(v9 + 218))
      {
        double v17 = (double)(int)(((int)v26 + 1) & 0xFFFFFFFE);
        double v16 = (double)(int)(((int)v25 + 1) & 0xFFFFFFFE);
        *(double *)CVPixelBufferRef pixelBufferOut = v17;
        *(double *)&pixelBufferOut[1] = v16;
        goto LABEL_35;
      }
      v22.f64[0] = a4;
      FigDisplayModes_DetermineSenderSurfaceDimensionsFromDisplayModeAndCurrentSenderDisplaySize(*(unsigned __int8 *)(v9 + 168), (float64x2_t *)pixelBufferOut, v26, v25, v22, a5, 0.0);
      double v17 = *(double *)pixelBufferOut;
      double v16 = *(double *)&pixelBufferOut[1];
      if (a4 >= *(double *)pixelBufferOut || a5 >= *(double *)&pixelBufferOut[1])
      {
LABEL_35:
        double v27 = *(double *)(v9 + 128);
        double v28 = *(double *)(v9 + 120);
        if (*(double *)(v9 + 136) != v28 || *(double *)(v9 + 144) != v27)
        {
          *(_OWORD *)unsigned int v62 = *v12;
          FigDisplayModes_ConvertSquarePixelSizeToNonSquarePixelSize(a2, (double *)v62, v17, v16, *(double *)(v9 + 152), *(double *)(v9 + 160), v28, v27, *(double *)(v9 + 184));
          if (dword_1E93512B0 >= 3)
          {
            CFAllocatorRef v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          *(_OWORD *)CVPixelBufferRef pixelBufferOut = *(_OWORD *)v62;
          double v16 = *(double *)&v62[8];
          double v17 = *(double *)v62;
        }
        goto LABEL_43;
      }
      pixelBufferOut[0] = *(CVPixelBufferRef *)&a4;
      pixelBufferOut[1] = *(CVPixelBufferRef *)&a5;
    }
    double v16 = a5;
    double v17 = a4;
    goto LABEL_35;
  }
LABEL_43:
  if (dword_1E93512B0)
  {
    LODWORD(pixelBufferOut[0]) = 0;
    v62[0] = OS_LOG_TYPE_DEFAULT;
    __int16 v30 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v31 = pixelBufferOut[0];
    if (os_log_type_enabled(v30, v62[0])) {
      unsigned int v32 = v31;
    }
    else {
      unsigned int v32 = v31 & 0xFFFFFFFE;
    }
    if (v32)
    {
      char v33 = (char)v5;
      if (v10) {
        CFTypeID v5 = v10;
      }
      else {
        CFTypeID v5 = &stru_1EE53F4B8;
      }
      unsigned int v34 = (char *)&strGetAvailableBuffer_strBuffer
          + 64
          * (unint64_t)(atomic_fetch_add_explicit(&strGetAvailableBuffer_strIndex, 1u, memory_order_relaxed) & 0xF);
      snprintf(v34, 0x40uLL, "{%g, %g}", v17, v16);
      int v64 = 138412802;
      BOOL v65 = v5;
      LOBYTE(v5) = v33;
      __int16 v66 = 2080;
      os_log_type_t v67 = "fvdp_ensureWritebackPixelBuffer";
      __int16 v68 = 2080;
      *(void *)unsigned int v69 = v34;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  BOOL v35 = *(double *)(v9 + 224) == v17 && *(double *)(v9 + 232) == v16;
  if (!v35 || (*(double *)(v9 + 240) == v17 ? (BOOL v36 = *(double *)(v9 + 248) == v16) : (BOOL v36 = 0), !v36))
  {
    fvdp_shutdownEncoderAndPools(v9);
    *(double *)(v9 + 224) = v17;
    *(double *)(v9 + 232) = v16;
    *(double *)(v9 + 240) = v17;
    *(double *)(v9 + 248) = v16;
  }
  int v37 = fvdp_ensureEncoderAndPools(v9);
  if (v37)
  {
    int v57 = v37;
    LODWORD(pixelBufferOut[0]) = 0;
    v62[0] = OS_LOG_TYPE_DEFAULT;
    unsigned int v58 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v59 = pixelBufferOut[0];
    if (os_log_type_enabled(v58, v62[0])) {
      unsigned int v60 = v59;
    }
    else {
      unsigned int v60 = v59 & 0xFFFFFFFE;
    }
    if (v60)
    {
      unsigned int v61 = &stru_1EE53F4B8;
      int v64 = 138413058;
      if (v10) {
        unsigned int v61 = v10;
      }
      BOOL v65 = v61;
      __int16 v66 = 2080;
      os_log_type_t v67 = "fvdp_ensureWritebackPixelBuffer";
      __int16 v68 = 1024;
      *(_DWORD *)unsigned int v69 = 3959;
      *(_WORD *)&v69[4] = 1024;
      *(_DWORD *)&v69[6] = v57;
      _os_log_send_and_compose_impl();
    }
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  uint64_t v38 = *(double **)(v9 + 648);
  pixelBufferOut[0] = 0;
  if (!v38 || (uint64_t v39 = (__CVPixelBufferPool *)*((void *)v38 + 1)) == 0)
  {
    *(_DWORD *)unsigned int v62 = 0;
    double v53 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v54 = *(_DWORD *)v62;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v55 = v54;
    }
    else {
      unsigned int v55 = v54 & 0xFFFFFFFE;
    }
    if (v55)
    {
      int v64 = 138412802;
      BOOL v65 = &stru_1EE53F4B8;
      __int16 v66 = 2080;
      os_log_type_t v67 = "writebackCacheAllocateBuffer";
      __int16 v68 = 1024;
      *(_DWORD *)unsigned int v69 = 1458;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    int v41 = -12070;
    goto LABEL_83;
  }
  CVReturn PixelBufferWithAuxAttributes = CVPixelBufferPoolCreatePixelBufferWithAuxAttributes((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v39, *((CFDictionaryRef *)v38 + 3), pixelBufferOut);
  int v41 = PixelBufferWithAuxAttributes;
  if (PixelBufferWithAuxAttributes == -6689)
  {
    *(_DWORD *)unsigned int v62 = 0;
    uint64_t v42 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v43 = *(_DWORD *)v62;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v44 = v43;
    }
    else {
      unsigned int v44 = v43 & 0xFFFFFFFE;
    }
    if (v44)
    {
      int v64 = 138412546;
      BOOL v65 = &stru_1EE53F4B8;
      __int16 v66 = 2080;
      os_log_type_t v67 = "writebackCacheAllocateBuffer";
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    goto LABEL_77;
  }
  if (PixelBufferWithAuxAttributes)
  {
LABEL_77:
    *(_DWORD *)unsigned int v62 = 0;
    uint64_t v46 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v47 = *(_DWORD *)v62;
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
      unsigned int v48 = v47;
    }
    else {
      unsigned int v48 = v47 & 0xFFFFFFFE;
    }
    if (v48)
    {
      int v64 = 138413058;
      BOOL v65 = &stru_1EE53F4B8;
      __int16 v66 = 2080;
      os_log_type_t v67 = "writebackCacheAllocateBuffer";
      __int16 v68 = 1024;
      *(_DWORD *)unsigned int v69 = 1463;
      *(_WORD *)&v69[4] = 1024;
      *(_DWORD *)&v69[6] = v41;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
LABEL_83:
    LODWORD(pixelBufferOut[0]) = 0;
    v62[0] = OS_LOG_TYPE_DEFAULT;
    unsigned int v49 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v50 = pixelBufferOut[0];
    if (os_log_type_enabled(v49, v62[0])) {
      unsigned int v51 = v50;
    }
    else {
      unsigned int v51 = v50 & 0xFFFFFFFE;
    }
    if (v51)
    {
      unsigned int v52 = &stru_1EE53F4B8;
      int v64 = 138413058;
      if (v10) {
        unsigned int v52 = v10;
      }
      BOOL v65 = v52;
      __int16 v66 = 2080;
      os_log_type_t v67 = "fvdp_ensureWritebackPixelBuffer";
      __int16 v68 = 1024;
      *(_DWORD *)unsigned int v69 = 3962;
      *(_WORD *)&v69[4] = 1024;
      *(_DWORD *)&v69[6] = v41;
      _os_log_send_and_compose_impl();
    }
    return fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  cvPixelBufferSetColorAttachments(pixelBufferOut[0], *((void **)v38 + 5));
  MEMORY[0x19970E910](*(void *)v38);
  unsigned int v45 = (const void *)*((void *)v38 + 4);
  if (v45) {
    CFRelease(v45);
  }
  v38[4] = *(double *)pixelBufferOut;
  v38[6] = a4;
  v38[7] = a5;
  v38[8] = v17;
  v38[9] = v16;
  *((_DWORD *)v38 + 20) = a2;
  *((unsigned char *)v38 + 84) = (_BYTE)v5;
  return MEMORY[0x19970E930](*(void *)v38);
}

uint64_t __fvdp_copyWritebackPixelBuffer_block_invoke_443(uint64_t a1)
{
  return fvdp_ensureWritebackPixelBuffer(*(void *)(a1 + 32), *(_DWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 60), *(double *)(a1 + 40), *(float64_t *)(a1 + 48));
}

void __fvdp_encoderControlTimerFired_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(void *)(a1 + 40))
  {
    if (*(_DWORD *)(v2 + 24) == 2)
    {
      if (!*(unsigned char *)(v2 + 601) && FigCFDictionaryGetInt32IfPresent()) {
        fvdp_encoderControlSetBitrate(v2, 0);
      }
      if (!*(unsigned char *)(v2 + 602) && FigCFDictionaryGetInt32IfPresent()) {
        fvdp_encoderControlSetFramerate(v2, 0);
      }
      int v3 = *(_DWORD *)(v2 + 320);
      if (v3 > 1752589104)
      {
        BOOL v4 = v3 == 1752589105 || v3 == 1869117027;
        int v5 = 1836415073;
      }
      else
      {
        BOOL v4 = v3 == 1635148593 || v3 == 1718908515;
        int v5 = 1718908520;
      }
      if (v4 || v3 == v5)
      {
        FigCFDictionaryGetDoubleIfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
        FigCFDictionaryGetInt32IfPresent();
      }
    }
  }
  else
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  CFRelease(*(CFTypeRef *)(a1 + 40));
}

uint64_t FigTTMLDocumentWriterCreateWritingDirectionSpanBuilder(uint64_t a1, const void *a2, void *a3)
{
  if (a2 && a3)
  {
    FigTTMLDocumentWriterGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (!v5)
    {
      FigTTMLDocumentWriterGetCMBaseObject(0);
      uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
      void *DerivedStorage = CFRetain(a2);
      *a3 = 0;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t figTTMLDocumentWriterWritingDirectionSpanBuilder_Invalidate()
{
  return 0;
}

void figTTMLDocumentWriterWritingDirectionSpanBuilder_Finalize(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(const void **)CMBaseObjectGetDerivedStorage();
  if (v1)
  {
    CFRelease(v1);
  }
}

CFStringRef figTTMLDocumentWriterWritingDirectionSpanBuilder_CopyDebugDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"figTTMLDocumentWriterWritingDirectionSpanBuilder[%p]", a1);
}

uint64_t figTTMLDocumentWriterWritingDirectionSpanBuilder_StartElement(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v3 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterStartElement(v3, a2);
}

uint64_t figTTMLDocumentWriterWritingDirectionSpanBuilder_EndElement(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterEndElement(v1);
}

uint64_t figTTMLDocumentWriterWritingDirectionSpanBuilder_AddCaptionData(uint64_t a1, uint64_t a2)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v5 = *(_OWORD *)(DerivedStorage + 8);
  start.CMTimeEpoch epoch = *(void *)(DerivedStorage + 24);
  *(_OWORD *)&start.CMTimeValue value = v5;
  CMTime v7 = *(CMTime *)(DerivedStorage + 32);
  CMTimeRangeFromTimeToTime(&v9, &start, &v7);
  return processPropertyAtDepthLevel(a1, a2, &v9, 0);
}

uint64_t figTTMLDocumentWriterWritingDirectionSpanBuilder_SetAttribute(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = FigTTMLDocumentWriterSetAttribute(*(void *)DerivedStorage, a2, (uint64_t)a3);
  if (!v6)
  {
    if (FigCFEqual())
    {
      CMTimeMakeFromDictionary(&v9, a3);
      long long v7 = *(_OWORD *)&v9.value;
      *(void *)(DerivedStorage + 24) = v9.epoch;
      *(_OWORD *)(DerivedStorage + 8) = v7;
    }
    else if (FigCFEqual())
    {
      CMTimeMakeFromDictionary(&v9, a3);
      *(CMTime *)(DerivedStorage + 32) = v9;
    }
  }
  return v6;
}

uint64_t figTTMLDocumentWriterWritingDirectionSpanBuilder_Flush(uint64_t a1)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t v1 = *(void *)CMBaseObjectGetDerivedStorage();

  return FigTTMLDocumentWriterFlush(v1);
}

uint64_t processPropertyAtDepthLevel(uint64_t a1, uint64_t a2, _OWORD *a3, CFIndex a4)
{
  v45[0] = 0;
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  CFAllocatorRef v8 = *(uint64_t (**)(uint64_t))(v7 + 8);
  if (v8) {
    CFStringRef v9 = (const __CFString *)v8(a2);
  }
  else {
    CFStringRef v9 = &stru_1EE53F4B8;
  }
  CFIndex Length = CFStringGetLength(v9);
  if (Length < 1)
  {
    uint64_t v24 = 0;
    goto LABEL_65;
  }
  CFIndex v10 = 0;
  uint64_t v11 = 0;
  uint64_t v36 = 0;
  BOOL v12 = 0;
  CFTypeRef v13 = 0;
  uint64_t v37 = *MEMORY[0x1E4F20228];
  uint64_t v39 = *MEMORY[0x1E4F1CF80];
  do
  {
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    if (v45[0])
    {
      CFRelease(v45[0]);
      v45[0] = 0;
    }
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    double v16 = *(uint64_t (**)(uint64_t, CFIndex, uint64_t, uint64_t, CFTypeRef *, uint64_t *))(v15 + 24);
    if (!v16)
    {
      uint64_t v24 = 4294954514;
      goto LABEL_60;
    }
    uint64_t v17 = v16(a2, v10, v37, v39, v45, &v43);
    if (v17)
    {
      uint64_t v24 = v17;
      goto LABEL_60;
    }
    if (v13) {
      CFRelease(v13);
    }
    if (!v45[0]) {
      goto LABEL_42;
    }
    cf[0] = 0;
    CFTypeRef v46 = 0;
    uint64_t Mutable = FigCaptionDynamicStyleCreateMutable();
    if (Mutable)
    {
      uint64_t v24 = Mutable;
      CFTypeRef v13 = 0;
    }
    else
    {
      KeyFrameCFIndex Count = FigCaptionDynamicStyleGetKeyFrameCount();
      if (KeyFrameCount < 1)
      {
        CFTypeRef v13 = 0;
        uint64_t v24 = 0;
      }
      else
      {
        uint64_t v20 = KeyFrameCount;
        uint64_t v34 = v11;
        uint64_t v21 = 0;
        int v22 = 0;
        do
        {
          v45[1] = 0;
          if (v46)
          {
            CFRelease(v46);
            CFTypeRef v46 = 0;
          }
          uint64_t v23 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
          if (v23) {
            goto LABEL_57;
          }
          if (CFArrayGetCount((CFArrayRef)v46) > a4)
          {
            CFArrayGetValueAtIndex((CFArrayRef)v46, a4);
            int v22 = 1;
          }
          uint64_t v23 = FigCaptionDynamicStyleAddKeyFrameValue();
          if (v23)
          {
LABEL_57:
            uint64_t v24 = v23;
            CFTypeRef v13 = 0;
            goto LABEL_33;
          }
          ++v21;
        }
        while (v20 != v21);
        if (v22)
        {
          uint64_t v24 = 0;
          CFTypeRef v13 = cf[0];
          cf[0] = 0;
        }
        else
        {
          CFTypeRef v13 = 0;
          uint64_t v24 = 0;
        }
LABEL_33:
        uint64_t v11 = v34;
      }
    }
    if (v46) {
      CFRelease(v46);
    }
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (v24) {
      goto LABEL_60;
    }
    if (v13)
    {
      if (FigCFEqual())
      {
        uint64_t v25 = v44;
        v11 += v44;
        goto LABEL_53;
      }
      CFTypeRef v26 = v13;
      if (v12)
      {
LABEL_43:
        long long v27 = a3[1];
        *(_OWORD *)CFTypeRef cf = *a3;
        long long v41 = v27;
        long long v42 = a3[2];
        uint64_t v28 = writeNestedSpan(a1, a2, v36, v11, (long long *)cf, (uint64_t)v12, a4);
        if (v28)
        {
          uint64_t v24 = v28;
          CFTypeRef v13 = v26;
          goto LABEL_60;
        }
        CFRelease(v12);
      }
    }
    else
    {
LABEL_42:
      CFTypeRef v26 = 0;
      if (v12) {
        goto LABEL_43;
      }
    }
    if (v26)
    {
      CFTypeRef v13 = 0;
      uint64_t v25 = v44;
      BOOL v12 = v26;
      uint64_t v36 = v43;
      uint64_t v11 = v44;
    }
    else
    {
      cf[0] = 0;
      FigTTMLDocumentWriterGetCMBaseObject(a1);
      uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
      uint64_t v30 = FigCaptionDataCopySubrange();
      if (!v30) {
        uint64_t v30 = FigTTMLDocumentWriterAddCaptionData(*DerivedStorage, (uint64_t)cf[0]);
      }
      uint64_t v24 = v30;
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      CFTypeRef v13 = 0;
      BOOL v12 = 0;
      if (v24) {
        goto LABEL_60;
      }
      uint64_t v25 = v44;
    }
LABEL_53:
    v10 += v25;
  }
  while (v10 < Length);
  if (v12)
  {
    long long v32 = a3[1];
    *(_OWORD *)CFTypeRef cf = *a3;
    long long v41 = v32;
    long long v42 = a3[2];
    uint64_t v24 = writeNestedSpan(a1, a2, v36, v11, (long long *)cf, (uint64_t)v12, a4);
    if (!v24)
    {
      CFRelease(v12);
      BOOL v12 = 0;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
LABEL_60:
  if (v13) {
    CFRelease(v13);
  }
  if (v12) {
    CFRelease(v12);
  }
LABEL_65:
  if (v45[0]) {
    CFRelease(v45[0]);
  }
  return v24;
}

uint64_t writeNestedSpan(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5, uint64_t a6, uint64_t a7)
{
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  uint64_t DerivedStorage = (uint64_t *)CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  uint64_t started = FigTTMLDocumentWriterStartElement(*DerivedStorage, 5);
  if (started) {
    return started;
  }
  long long v12 = a5[1];
  long long v30 = *a5;
  *(_OWORD *)unsigned int v31 = v12;
  *(_OWORD *)&v31[16] = a5[2];
  FigTTMLDocumentWriterGetCMBaseObject(a1);
  CFTypeRef v13 = (uint64_t *)CMBaseObjectGetDerivedStorage();
  KeyFrameCFIndex Count = FigCaptionDynamicStyleGetKeyFrameCount();
  if (KeyFrameCount <= 0) {
    goto LABEL_22;
  }
  uint64_t v15 = KeyFrameCount;
  uint64_t v29 = a7;
  uint64_t v28 = DerivedStorage;
  uint64_t v16 = 0;
  CFDictionaryRef v17 = 0;
  CFMutableDictionaryRef Mutable = 0;
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  while (1)
  {
    double v35 = 0.0;
    CFTypeRef v36 = 0;
    uint64_t v20 = FigCaptionDynamicStyleCopyKeyFrameValueAtIndex();
    if (v20) {
      break;
    }
    if (Mutable) {
      CFRelease(Mutable);
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v19, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigTTMLDocumentWriterMapPropertyToAttribute_WritingDirection(v36, Mutable);
    if (v16)
    {
      double v21 = v35;
      CMTime time = *(CMTime *)&v31[8];
      double Seconds = CMTimeGetSeconds(&time);
      if (v17) {
        CFRelease(v17);
      }
      CMTimeMake(&v33, (int)(v21 * Seconds * 1000.0), 1000);
      CFDictionaryRef v17 = CMTimeCopyAsDictionary(&v33, v19);
      CFDictionarySetValue(Mutable, @"begin", v17);
      uint64_t v20 = FigTTMLDocumentWriterStartElement(*v13, 1);
      if (v20) {
        break;
      }
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)writeAttribute, (void *)*v13);
      uint64_t v23 = FigTTMLDocumentWriterEndElement(*v13);
      if (v23)
      {
        uint64_t v24 = v23;
LABEL_17:
        uint64_t DerivedStorage = v28;
        if (!v17) {
          goto LABEL_19;
        }
LABEL_18:
        CFRelease(v17);
        goto LABEL_19;
      }
    }
    else
    {
      CFDictionaryApplyFunction(Mutable, (CFDictionaryApplierFunction)writeAttribute, (void *)*v13);
    }
    if (v15 == ++v16)
    {
      uint64_t v24 = 0;
      goto LABEL_17;
    }
  }
  uint64_t v24 = v20;
  uint64_t DerivedStorage = v28;
  if (v17) {
    goto LABEL_18;
  }
LABEL_19:
  if (Mutable) {
    CFRelease(Mutable);
  }
  a7 = v29;
  if (!v24)
  {
LABEL_22:
    uint64_t v25 = FigCaptionDataCopySubrange();
    if (!v25)
    {
      long long v26 = a5[1];
      long long v30 = *a5;
      *(_OWORD *)unsigned int v31 = v26;
      *(_OWORD *)&v31[16] = a5[2];
      uint64_t v25 = processPropertyAtDepthLevel(a1, cf, &v30, a7 + 1);
      if (!v25) {
        uint64_t v25 = FigTTMLDocumentWriterEndElement(*DerivedStorage);
      }
    }
    uint64_t v24 = v25;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v24;
}

uint64_t writeAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return FigTTMLDocumentWriterSetAttribute(a3, a1, a2);
}

uint64_t FigSampleBufferConsumerRemoteXPC_ensureClientEstablished()
{
  uint64_t v3 = 0;
  BOOL v4 = &v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigSampleBufferConsumerRemoteXPC_ensureClientEstablished_block_invoke;
  block[3] = &unk_1E57A0D58;
  block[4] = &v3;
  if (FigSampleBufferConsumerRemoteXPC_ensureClientEstablished_sFigSampleBufferConsumerRemoteClientSetupOnce != -1) {
    dispatch_once(&FigSampleBufferConsumerRemoteXPC_ensureClientEstablished_sFigSampleBufferConsumerRemoteClientSetupOnce, block);
  }
  uint64_t v0 = *((unsigned int *)v4 + 6);
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t remoteXPCSampleBufferConsumer_CreateInternal(uint64_t a1, void *a2)
{
  FigSampleBufferConsumerGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4) {
    return v4;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  DerivedStorage[1] = a1;
  DerivedStorage[2] = FigSimpleMutexCreate();
  uint64_t v6 = FigDispatchQueueCreateWithPriority();
  DerivedStorage[3] = v6;
  if (!v6) {
    return FigSignalErrorAt();
  }
  uint64_t v4 = FigXPCRemoteClientAssociateObject();
  if (v4) {
    return v4;
  }
  uint64_t v7 = FigXPCRemoteClientCopyMemoryOrigin();
  if (!v7) {
    *a2 = 0;
  }
  return v7;
}

uint64_t FigSampleBufferConsumerXPCRemoteRetainCopiedSampleBufferConsumer(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = 0;
  if (a1 && a2)
  {
    uint64_t v4 = FigSampleBufferConsumerRemoteXPC_ensureClientEstablished();
    if (v4) {
      return v4;
    }
    uint64_t v5 = FigXPCRemoteClientRetainCopiedObject();
    CFTypeRef v6 = cf;
    if (v5 || (uint64_t v5 = remoteXPCSampleBufferConsumer_CreateInternal(a1, &cf), v6 = cf, v5))
    {
      if (v6) {
        CFRelease(v6);
      }
    }
    else
    {
      uint64_t v5 = 0;
      *a2 = cf;
    }
    return v5;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

unsigned char *remoteXPCSampleBufferConsumerClient_DeadConnectionCallback()
{
  CFTypeRef result = (unsigned char *)CMBaseObjectGetDerivedStorage();
  *CFTypeRef result = 1;
  return result;
}

uint64_t remoteXPCSampleBufferConsumerClient_HandleServerMessage()
{
  uint64_t result = FigXPCMessageGetOpCode();
  if (!result) {
    return 4294951138;
  }
  return result;
}

void FigSampleBufferConsumerRemoteXPC_handleLowWaterTriggerCallbackAsync(const void *a1)
{
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[2]);
  uint64_t v3 = (void (*)(void))DerivedStorage[7];
  if (v3) {
    v3(DerivedStorage[8]);
  }
  MEMORY[0x19970E930](DerivedStorage[2]);
  if (a1)
  {
    CFRelease(a1);
  }
}

uint64_t FigSampleBufferConsumerRemoteXPC_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigXPCRemoteClientDisassociateObject();
  if (*(unsigned char *)DerivedStorage
    || !FigXPCCreateBasicMessage() && !FigXPCRemoteClientSendSyncMessage())
  {
    uint64_t v1 = *(const void **)(DerivedStorage + 32);
    if (v1)
    {
      CFRelease(v1);
      *(void *)(DerivedStorage + 32) = 0;
    }
    uint64_t v2 = *(const void **)(DerivedStorage + 40);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(DerivedStorage + 40) = 0;
    }
    uint64_t v3 = *(const void **)(DerivedStorage + 48);
    if (v3)
    {
      CFRelease(v3);
      *(void *)(DerivedStorage + 48) = 0;
    }
    FigSimpleMutexDestroy();
    uint64_t v4 = *(NSObject **)(DerivedStorage + 24);
    if (v4)
    {
      dispatch_release(v4);
      *(void *)(DerivedStorage + 24) = 0;
    }
  }
  return FigXPCRelease();
}

uint64_t FigSampleBufferConsumerRemoteXPC_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  uint64_t v8 = 0;
  CFTypeRef cf = 0;
  Objectuint64_t ID = remoteXPCSampleBufferConsumer_GetObjectID(a1, &v8);
  if (ObjectID)
  {
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v6 = FigXPCSendStdCopyPropertyMessage();
    if (v6)
    {
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      *a4 = cf;
      CFTypeRef cf = 0;
    }
  }
  FigXPCRelease();
  return v6;
}

uint64_t FigSampleBufferConsumerRemoteXPC_SetProperty(uint64_t a1)
{
  uint64_t v4 = 0;
  Objectuint64_t ID = remoteXPCSampleBufferConsumer_GetObjectID(a1, &v4);
  if (!ObjectID) {
    Objectuint64_t ID = FigXPCSendStdSetPropertyMessage();
  }
  uint64_t v2 = ObjectID;
  FigXPCRelease();
  return v2;
}

uint64_t remoteXPCSampleBufferConsumer_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage)
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
}

uint64_t FigSampleBufferConsumerRemoteXPC_SendSampleBuffer(uint64_t a1)
{
  memset(v6, 0, sizeof(v6));
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  Objectuint64_t ID = remoteXPCSampleBufferConsumer_GetObjectID(a1, v6);
  if (!ObjectID)
  {
    Objectuint64_t ID = FigXPCCreateBasicMessage();
    if (!ObjectID)
    {
      Objectuint64_t ID = FigXPCRemoteClientGetServerPID();
      if (!ObjectID)
      {
        Objectuint64_t ID = FigXPCMessageAddCMSampleBufferForPID();
        if (!ObjectID)
        {
          Objectuint64_t ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
          if (!ObjectID) {
            Objectuint64_t ID = FigMemoryOriginUpdateRecipientStateFromXPCMessage();
          }
        }
      }
    }
  }
  uint64_t v4 = ObjectID;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  FigXPCRelease();
  FigXPCRelease();
  return v4;
}

BOOL FigSampleBufferConsumerRemoteXPC_IsQueueAtOrAboveHighWater(uint64_t a1)
{
  xpc_object_t xdict = 0;
  uint64_t v5 = 0;
  uint64_t v3 = 0;
  BOOL v1 = !remoteXPCSampleBufferConsumer_GetObjectID(a1, &v3)
    && !FigXPCCreateBasicMessage()
    && !FigXPCRemoteClientSendSyncMessageCreatingReply()
    && xpc_dictionary_get_BOOL(xdict, "IsQueueAtOrAboveHighWater");
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

BOOL FigSampleBufferConsumerRemoteXPC_IsQueueBelowLowWater(uint64_t a1)
{
  xpc_object_t xdict = 0;
  uint64_t v5 = 0;
  uint64_t v3 = 0;
  BOOL v1 = !remoteXPCSampleBufferConsumer_GetObjectID(a1, &v3)
    && !FigXPCCreateBasicMessage()
    && !FigXPCRemoteClientSendSyncMessageCreatingReply()
    && xpc_dictionary_get_BOOL(xdict, "IsQueueBelowLowWater");
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

uint64_t FigSampleBufferConsumerRemoteXPC_InstallLowWaterTrigger(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  v12[0] = 0;
  v12[1] = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[2]);
  if (DerivedStorage[7] || !a2)
  {
    Objectuint64_t ID = FigSignalErrorAt();
  }
  else
  {
    Objectuint64_t ID = remoteXPCSampleBufferConsumer_GetObjectID(a1, v12);
    if (!ObjectID)
    {
      DerivedStorage[7] = a2;
      DerivedStorage[8] = a3;
      *a4 = a1;
      Objectuint64_t ID = FigXPCCreateBasicMessage();
      if (!ObjectID) {
        Objectuint64_t ID = FigXPCRemoteClientSendSyncMessage();
      }
    }
  }
  uint64_t v10 = ObjectID;
  MEMORY[0x19970E930](DerivedStorage[2]);
  FigXPCRelease();
  return v10;
}

uint64_t FigSampleBufferConsumerRemoteXPC_RemoveLowWaterTrigger(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](DerivedStorage[2]);
  if (a1 != a2)
  {
    Objectuint64_t ID = FigSignalErrorAt();
LABEL_8:
    uint64_t v6 = ObjectID;
    goto LABEL_6;
  }
  Objectuint64_t ID = remoteXPCSampleBufferConsumer_GetObjectID(a1, v8);
  if (ObjectID) {
    goto LABEL_8;
  }
  Objectuint64_t ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_8;
  }
  uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
  if (!v6)
  {
    DerivedStorage[7] = 0;
    DerivedStorage[8] = 0;
  }
LABEL_6:
  MEMORY[0x19970E930](DerivedStorage[2]);
  FigXPCRelease();
  return v6;
}

uint64_t FigSampleBufferConsumerRemoteXPC_GetPendingSampleBufferCount(uint64_t a1)
{
  v3[1] = 0;
  xpc_object_t xdict = 0;
  v3[0] = 0;
  if (remoteXPCSampleBufferConsumer_GetObjectID(a1, v3)
    || FigXPCCreateBasicMessage()
    || FigXPCRemoteClientSendSyncMessageCreatingReply())
  {
    uint64_t int64 = 0;
  }
  else
  {
    uint64_t int64 = xpc_dictionary_get_uint64(xdict, "GetPendingSampleBufferCount");
  }
  FigXPCRelease();
  return uint64;
}

uint64_t FigSampleBufferConsumerRemoteXPC_SetAttachmentOnPendingSampleBuffersInPTSRange(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  Objectuint64_t ID = remoteXPCSampleBufferConsumer_GetObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2
      || (uint64_t v2 = FigXPCMessageSetCFString(), v2)
      || (uint64_t v2 = FigXPCMessageSetCFObject(), v2)
      || (uint64_t v2 = FigXPCMessageSetCMTime(), v2)
      || (uint64_t v2 = FigXPCMessageSetCMTime(), v2))
    {
      uint64_t v3 = v2;
    }
    else
    {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

uint64_t FigSampleBufferConsumerRemoteXPC_PostNotification(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = 0;
  xpc_object_t xdict = 0;
  Objectuint64_t ID = remoteXPCSampleBufferConsumer_GetObjectID(a1, &v8);
  if (ObjectID)
  {
    uint64_t v6 = ObjectID;
  }
  else
  {
    uint64_t v6 = FigXPCCreateBasicMessage();
    if (!v6)
    {
      uint64_t v6 = FigXPCMessageSetCFString();
      if (!v6)
      {
        uint64_t v6 = FigXPCMessageSetCFDictionary();
        if (!v6)
        {
          xpc_dictionary_set_uint64(xdict, "NotificationDeliveryFlags", a4);
          uint64_t v6 = FigXPCRemoteClientSendSyncMessage();
        }
      }
    }
  }
  FigXPCRelease();
  return v6;
}

uint64_t FigSampleBufferConsumerRemoteXPC_Flush(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  Objectuint64_t ID = remoteXPCSampleBufferConsumer_GetObjectID(a1, v5);
  if (ObjectID)
  {
    uint64_t v3 = ObjectID;
  }
  else
  {
    uint64_t v2 = FigXPCCreateBasicMessage();
    if (v2) {
      uint64_t v3 = v2;
    }
    else {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  return v3;
}

BOOL FigSampleBufferConsumerRemoteXPC_IsQueueBelowPrerollLevel(uint64_t a1)
{
  xpc_object_t xdict = 0;
  uint64_t v5 = 0;
  uint64_t v3 = 0;
  BOOL v1 = !remoteXPCSampleBufferConsumer_GetObjectID(a1, &v3)
    && !FigXPCCreateBasicMessage()
    && !FigXPCRemoteClientSendSyncMessageCreatingReply()
    && xpc_dictionary_get_BOOL(xdict, "IsQueueBelowPrerollLevel");
  FigXPCRelease();
  FigXPCRelease();
  return v1;
}

uint64_t FigNeroidCreateRemote(uint64_t a1, CFTypeRef *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  if (!a2)
  {
    uint64_t v5 = FigSignalErrorAt();
    goto LABEL_6;
  }
  uint64_t v10 = 0;
  uint64_t v11 = &v10;
  uint64_t v12 = 0x2020000000;
  int v13 = 0;
  cf[0] = (CFTypeRef)MEMORY[0x1E4F143A8];
  cf[1] = (CFTypeRef)3221225472;
  CFTypeRef cf[2] = __neroidRemote_ensureClientEstablished_block_invoke;
  cf[3] = &unk_1E57982D0;
  cf[4] = &v10;
  if (neroidRemote_ensureClientEstablished_sFigNeroidRemoteClientSetupOnce != -1) {
    dispatch_once(&neroidRemote_ensureClientEstablished_sFigNeroidRemoteClientSetupOnce, cf);
  }
  uint64_t v4 = *((unsigned int *)v11 + 6);
  _Block_object_dispose(&v10, 8);
  if (!v4)
  {
    uint64_t v5 = FigXPCCreateBasicMessage();
    if (v5)
    {
LABEL_6:
      uint64_t v4 = v5;
      goto LABEL_7;
    }
    uint64_t v4 = FigXPCRemoteClientSendSyncMessageCreatingReply();
    if (!v4)
    {
      uint64_t int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
      cf[0] = 0;
      FigNeroidGetClassID();
      uint64_t v4 = CMDerivedObjectCreate();
      if (v4)
      {
        if (cf[0]) {
          CFRelease(cf[0]);
        }
      }
      else
      {
        *(void *)(CMBaseObjectGetDerivedStorage() + 8) = uint64;
        FigXPCRemoteClientAssociateObject();
        *a2 = cf[0];
      }
    }
  }
LABEL_7:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  if (v4)
  {
    uint64_t v6 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  return v4;
}

void __neroidRemote_ensureClientEstablished_block_invoke(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F22080], @"Neroid_ServerConnectionDied");
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigXPCRemoteClientCreate();
  if (Mutable)
  {
    CFRelease(Mutable);
  }
}

uint64_t neroidRemote_deadConnectionCallback()
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  *(unsigned char *)(result + 1) = 1;
  return result;
}

uint64_t neroidRemote_Invalidate()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!*DerivedStorage)
  {
    BOOL v1 = DerivedStorage;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    *BOOL v1 = 1;
    uint64_t v3 = FigXPCRemoteClientDisassociateObject();
    if (v1[1] || !FigXPCCreateBasicMessage() && (uint64_t v3 = FigXPCRemoteClientSendSyncMessage(), !v3))
    {
      uint64_t v4 = (void *)MEMORY[0x199711A30](v3);
      neroidRemote_removeHostLayer();
      if (*((void *)v1 + 2))
      {
        [MEMORY[0x1E4F39CF8] begin];
        if (!pthread_main_np()) {
          [MEMORY[0x1E4F39CF8] activateBackground:1];
        }
        objc_msgSend(MEMORY[0x1E4F39CF8], "setDisableActions:", 1, v7, v8);
        uint64_t v5 = (void *)*((void *)v1 + 2);
        if (v5)
        {

          *((void *)v1 + 2) = 0;
        }
        [MEMORY[0x1E4F39CF8] commit];
      }
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return 0;
}

__CFString *neroidRemote_CopyDebugDescription(uint64_t a1)
{
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<FigNeroidRemote %p>", a1);
  return Mutable;
}

uint64_t neroidRemote_CopyProperty(uint64_t a1)
{
  uint64_t v3 = 0;
  Objectuint64_t ID = neroidRemote_getObjectID(a1, &v3);
  if (!ObjectID) {
    Objectuint64_t ID = FigXPCSendStdCopyPropertyMessage();
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return ObjectID;
}

uint64_t neroidRemote_SetProperty(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v37 = 0;
  Objectuint64_t ID = neroidRemote_getObjectID(a1, &v37);
  if (!ObjectID)
  {
    if (CFEqual(a2, @"DisplayLayer"))
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      uint64_t v8 = (void *)MEMORY[0x199711A30]();
      if (*(void **)(DerivedStorage + 16) == a3)
      {
        Objectuint64_t ID = 0;
LABEL_35:
        goto LABEL_36;
      }
      [MEMORY[0x1E4F39CF8] begin];
      if (!pthread_main_np()) {
        [MEMORY[0x1E4F39CF8] activateBackground:1];
      }
      [MEMORY[0x1E4F39CF8] setDisableActions:1];
      id v9 = *(id *)(DerivedStorage + 16);
      *(void *)(DerivedStorage + 16) = a3;
      [MEMORY[0x1E4F39CF8] commit];
      uint64_t v10 = CMBaseObjectGetDerivedStorage();
      CFTypeRef cf = 0;
      uint64_t v11 = (void *)MEMORY[0x199711A30]();
      if (!*(void *)(v10 + 16))
      {
        neroidRemote_removeHostLayer();
        Objectuint64_t ID = 0;
LABEL_16:
        CFDictionaryRef DictionaryRepresentation = 0;
LABEL_31:
        if (cf) {
          CFRelease(cf);
        }
        if (DictionaryRepresentation) {
          CFRelease(DictionaryRepresentation);
        }
        goto LABEL_35;
      }
      unsigned int valuePtr = 0;
      FigBytePumpGetFigBaseObject(a1);
      uint64_t v13 = v12;
      uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v14) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0;
      }
      uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, void))(v15 + 56);
      if (!v16) {
        goto LABEL_29;
      }
      uint64_t v17 = v16(v13, 0x1EE565FF8, *MEMORY[0x1E4F1CFD0]);
      if (v17)
      {
LABEL_15:
        Objectuint64_t ID = v17;
        goto LABEL_16;
      }
      FigBytePumpGetFigBaseObject(a1);
      uint64_t v20 = v19;
      uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
      uint64_t v22 = v21 ? v21 : 0;
      uint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, void, CFTypeRef *))(v22 + 48);
      if (v23)
      {
        uint64_t v17 = v23(v20, 0x1EE565FD8, 0, &cf);
        if (v17) {
          goto LABEL_15;
        }
        if (!cf || (CFTypeID v24 = CFGetTypeID(cf), v24 != CFNumberGetTypeID()))
        {
          uint64_t v17 = FigSignalErrorAt();
          goto LABEL_15;
        }
        if (!CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr))
        {
          CFDictionaryRef DictionaryRepresentation = 0;
          Objectuint64_t ID = 4294950606;
          goto LABEL_31;
        }
        [MEMORY[0x1E4F39CF8] begin];
        if (!pthread_main_np()) {
          [MEMORY[0x1E4F39CF8] activateBackground:1];
        }
        [MEMORY[0x1E4F39CF8] setDisableActions:1];
        uint64_t v25 = *(void **)(v10 + 24);
        if (v25)
        {
          [v25 removeFromSuperlayer];
        }
        else
        {
          long long v27 = (void *)[MEMORY[0x1E4F39BF0] layer];
          *(void *)(v10 + 24) = v27;
          if (!v27)
          {
            [MEMORY[0x1E4F39CF8] commit];
            CFDictionaryRef DictionaryRepresentation = 0;
            Objectuint64_t ID = 4294950605;
            goto LABEL_31;
          }
          id v28 = v27;
        }
        [*(id *)(v10 + 24) setName:@"FigNeroidRemoteLayerHost"];
        [*(id *)(v10 + 24) setContextId:valuePtr];
        [*(id *)(v10 + 16) addSublayer:*(void *)(v10 + 24)];
        uint64_t v29 = *(void **)(v10 + 24);
        [*(id *)(v10 + 16) bounds];
        objc_msgSend(v29, "setFrame:");
        [*(id *)(v10 + 16) bounds];
        v40.double width = v30;
        v40.double height = v31;
        CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v40);
        FigBytePumpGetFigBaseObject(a1);
        uint64_t v33 = v32;
        uint64_t v34 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v34) {
          uint64_t v35 = v34;
        }
        else {
          uint64_t v35 = 0;
        }
        CFTypeRef v36 = *(uint64_t (**)(uint64_t, uint64_t, CFDictionaryRef))(v35 + 56);
        if (v36)
        {
          Objectuint64_t ID = v36(v33, 0x1EE550F18, DictionaryRepresentation);
          if (!ObjectID) {
            [MEMORY[0x1E4F39CF8] commit];
          }
          goto LABEL_31;
        }
      }
      else
      {
LABEL_29:
        CFDictionaryRef DictionaryRepresentation = 0;
      }
      Objectuint64_t ID = 4294954514;
      goto LABEL_31;
    }
    Objectuint64_t ID = FigXPCSendStdSetPropertyMessage();
  }
LABEL_36:
  FigXPCRemoteClientKillServerOnTimeout();
  return ObjectID;
}

void neroidRemote_removeHostLayer()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v1 = (void *)MEMORY[0x199711A30]();
  if (*(void *)(DerivedStorage + 24))
  {
    [MEMORY[0x1E4F39CF8] begin];
    if (!pthread_main_np()) {
      [MEMORY[0x1E4F39CF8] activateBackground:1];
    }
    [MEMORY[0x1E4F39CF8] setDisableActions:1];
    [*(id *)(DerivedStorage + 24) removeFromSuperlayer];

    *(void *)(DerivedStorage + 24) = 0;
    [MEMORY[0x1E4F39CF8] commit];
  }
}

uint64_t neroidRemote_getObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)DerivedStorage || *(unsigned char *)(DerivedStorage + 1))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)(DerivedStorage + 8);
    return 0;
  }
}

uint64_t neroidRemote_Start(uint64_t a1)
{
  v7[20] = *MEMORY[0x1E4F143B8];
  v7[0] = 0;
  os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
  os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
  fig_log_call_emit_and_clean_up_after_send_and_compose();
  Objectuint64_t ID = neroidRemote_getObjectID(a1, v7);
  if (ObjectID)
  {
    uint64_t v4 = ObjectID;
  }
  else
  {
    uint64_t v5 = FigXPCCreateBasicMessage();
    if (v5) {
      uint64_t v4 = v5;
    }
    else {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
    }
  }
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t MTAudioProcessingTapXPCServerCopyTapForID(uint64_t a1, void *a2)
{
  uint64_t result = FigXPCServerRetainNeighborObjectFromID();
  if (!result) {
    *a2 = 0;
  }
  return result;
}

uint64_t MTAudioProcessingTapServerIsObjectIDLocallyServed(uint64_t a1)
{
  return MEMORY[0x1F40DE980](gAudioProcesingTapServer, a1);
}

uint64_t MTAudioProcessingTapServerStart()
{
  if (!FigServer_IsMediaplaybackd()) {
    FigServer_IsAirplayd();
  }
  return FigXPCServerStart();
}

uint64_t HandleAudioProcessingTapMessage(uint64_t a1, void *a2)
{
  uint64_t result = FigXPCMessageGetOpCode();
  if (!result)
  {
    xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
    uint64_t result = FigXPCServerLookupAndRetainAssociatedObject();
    if (!result) {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t aptXPCServer_NotificationFilter(int a1, int a2, CFTypeRef cf1)
{
  if (CFEqual(cf1, @"MTAudioProcessingTapNotification_InitializeTapCompleted")) {
    return 1;
  }
  uint64_t result = CFEqual(cf1, @"MTAudioProcessingTapNotification_CreateAQTapCompleted");
  if (result) {
    return 1;
  }
  return result;
}

void aptapS_BaseClass_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  BOOL v1 = *(void **)(DerivedStorage + 8);
  if (v1)
  {
    os_release(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *aptapS_BaseClass_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFMutableDictionaryRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFIndex v4 = CFGetRetainCount(a1);
  CFStringAppendFormat(Mutable, 0, @"<MTAudioProcessingTapServer %p> Retain count %d Created with CMTimeFlags flags = 0x%x", a1, v4, *(unsigned int *)(DerivedStorage + 16));
  return Mutable;
}

void aptapS_Class_InitializeTap(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef CFDictionaryFromPointer = MTAudioProcessingTapCreateCFDictionaryFromPointer(@"AQTapServerPointer", a2);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (CFDictionaryFromPointer)
  {
    CFRelease(CFDictionaryFromPointer);
  }
}

uint64_t aptapS_Class_CreateAQTap(uint64_t a1, int a2, int a3, uint64_t a4, void *a5)
{
  CMBaseObjectGetDerivedStorage();
  uint64_t v8 = AudioQueueProcessingTapNew_CMServer();
  if (!v8)
  {
    CFDictionaryFromPointerAndTrackuint64_t ID = MTAudioProcessingTapCreateCFDictionaryFromPointerAndTrackID(@"AQTapServerPointer", 0, @"TrackID", a2, @"AudioStreamToken", a3);
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
    *a5 = 0;
    if (CFDictionaryFromPointerAndTrackID) {
      CFRelease(CFDictionaryFromPointerAndTrackID);
    }
  }
  return v8;
}

void aptapS_Class_DisposeAQTap(int a1, AudioQueueProcessingTapRef inAQTap)
{
  AudioQueueProcessingTapDispose(inAQTap);
  CFDictionaryRef CFDictionaryFromPointer = MTAudioProcessingTapCreateCFDictionaryFromPointer(@"AQTapServerPointer", (uint64_t)inAQTap);
  CMNotificationCenterGetDefaultLocalCenter();
  CMNotificationCenterPostNotification();
  if (CFDictionaryFromPointer)
  {
    CFRelease(CFDictionaryFromPointer);
  }
}

uint64_t aptapS_Class_SetTimelineInfo(int a1, int a2, AudioQueueRef inAQ, float a4, float a5, uint64_t a6, uint64_t a7)
{
  uint64_t inData = a6;
  float v9 = a4;
  uint64_t v10 = a7;
  float v11 = a5;
  return AudioQueueSetProperty(inAQ, 0x636D7469u, &inData, 0x18u);
}

uint64_t aptapS_Class_IsMultitrackTap()
{
  return *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 20);
}

uint64_t FigCaptionCreateMutable(uint64_t a1, void *a2)
{
  if (a2)
  {
    FigCaptionGetClassID();
    uint64_t result = CMDerivedObjectCreate();
    if (!result)
    {
      uint64_t DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
      uint64_t v5 = MEMORY[0x1E4F1FA20];
      long long v6 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
      _OWORD *DerivedStorage = *MEMORY[0x1E4F1FA20];
      DerivedStorage[1] = v6;
      DerivedStorage[2] = *(_OWORD *)(v5 + 32);
      uint64_t result = FigCaptionDataCreateMutable();
      if (!result) {
        *a2 = 0;
      }
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
  return result;
}

void figCaptionFinalize()
{
  uint64_t v0 = *(const void **)(CMBaseObjectGetDerivedStorage() + 48);
  if (v0)
  {
    CFRelease(v0);
  }
}

__CFString *figCaptionCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  long long v6 = *(_OWORD *)DerivedStorage;
  long long v7 = *(_OWORD *)(DerivedStorage + 32);
  *(_OWORD *)&range.start.CMTimeEpoch epoch = *(_OWORD *)(DerivedStorage + 16);
  *(_OWORD *)&range.duration.CMTimeScale timescale = v7;
  *(_OWORD *)&range.start.CMTimeValue value = v6;
  CFStringRef v8 = CMTimeRangeCopyDescription(v5, &range);
  CFStringRef v9 = v8;
  if (v8) {
    uint64_t v10 = (__CFString *)v8;
  }
  else {
    uint64_t v10 = @"<no timing>";
  }
  uint64_t v11 = *(void *)(DerivedStorage + 48);
  uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    uint64_t v13 = 0;
  }
  uint64_t v14 = *(uint64_t (**)(uint64_t))(v13 + 8);
  if (v14) {
    uint64_t v15 = (__CFString *)v14(v11);
  }
  else {
    uint64_t v15 = &stru_1EE53F4B8;
  }
  CFStringAppendFormat(Mutable, 0, @"\tCaption: %p timing:%@ text<%@>", a1, v10, v15);
  if (v9) {
    CFRelease(v9);
  }
  return Mutable;
}

uint64_t figCaptionCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, CFDictionaryRef *a4)
{
  void (*v12)(CMTimeRange *__return_ptr, uint64_t);
  long long v13;
  uint64_t CMBaseObject;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, const void *, const __CFAllocator *, const __CFDictionary **);
  CMTimeRange v19;
  CMTimeRange v20;
  CFDictionaryRef v21;
  uint64_t vars8;

  CMBaseObjectGetDerivedStorage();
  uint64_t v21 = 0;
  if (a2 && a4)
  {
    if (CFEqual(a2, @"TimeRange"))
    {
      memset(&v20, 0, sizeof(v20));
      uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v8) {
        uint64_t v9 = v8;
      }
      else {
        uint64_t v9 = 0;
      }
      uint64_t v12 = *(void (**)(CMTimeRange *__return_ptr, uint64_t))(v9 + 8);
      if (v12)
      {
        v12(&v20, a1);
      }
      else
      {
        uint64_t v13 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
        *(_OWORD *)&v20.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
        *(_OWORD *)&v20.start.CMTimeEpoch epoch = v13;
        *(_OWORD *)&v20.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
      }
      uint64_t v19 = v20;
      CFDictionaryRef v11 = CMTimeRangeCopyAsDictionary(&v19, a3);
      if (!v11) {
        return FigSignalErrorAt();
      }
      MutableCFDictionaryRef Copy = 0;
    }
    else if (CFEqual(a2, @"CaptionData"))
    {
      MutableCFDictionaryRef Copy = FigCaptionDataCreateMutableCopy();
      CFDictionaryRef v11 = v21;
      if (MutableCopy) {
        return MutableCopy;
      }
    }
    else
    {
      uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      long long v18 = *(uint64_t (**)(uint64_t, const void *, const __CFAllocator *, const __CFDictionary **))(v17 + 48);
      if (v18)
      {
        MutableCFDictionaryRef Copy = v18(CMBaseObject, a2, a3, &v21);
        CFDictionaryRef v11 = v21;
      }
      else
      {
        CFDictionaryRef v11 = 0;
        MutableCFDictionaryRef Copy = 4294954514;
      }
    }
    *a4 = v11;
    return MutableCopy;
  }

  return FigSignalErrorAt();
}

uint64_t figCaptionSetProperty(const void *a1, const void *a2, const __CFDictionary *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2 || !a3)
  {
    return FigSignalErrorAt();
  }
  uint64_t v7 = DerivedStorage;
  if (CFEqual(a2, @"TimeRange"))
  {
    memset(&v19, 0, sizeof(v19));
    CMTimeRangeMakeFromDictionary(&v19, a3);
    CMTimeRange v18 = v19;
    uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v8) {
      uint64_t v9 = v8;
    }
    else {
      uint64_t v9 = 0;
    }
    uint64_t v13 = *(uint64_t (**)(const void *, CMTimeRange *))(v9 + 16);
    if (v13)
    {
      CMTimeRange v20 = v18;
      return v13(a1, &v20);
    }
    return 4294954514;
  }
  if (CFEqual(a2, @"CaptionData"))
  {
    v20.start.CMTimeValue value = 0;
    CFTypeID v10 = CFGetTypeID(a3);
    if (v10 == FigCaptionDataGetTypeID())
    {
      CFGetAllocator(a1);
      uint64_t result = FigCaptionDataCreateMutableCopy();
      if (!result)
      {
        uint64_t v12 = *(const void **)(v7 + 48);
        if (v12) {
          CFRelease(v12);
        }
        uint64_t result = 0;
        *(void *)(v7 + 48) = v20.start.value;
      }
      return result;
    }
    return FigSignalErrorAt();
  }
  uint64_t CMBaseObject = FigCaptionDataGetCMBaseObject();
  uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v15) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0;
  }
  uint64_t v17 = *(uint64_t (**)(uint64_t, const void *, const __CFDictionary *))(v16 + 56);
  if (!v17) {
    return 4294954514;
  }

  return v17(CMBaseObject, a2, a3);
}

__n128 figCaptionGetTimeRange@<Q0>(uint64_t a1@<X8>)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v3 = *(_OWORD *)(DerivedStorage + 16);
  *(_OWORD *)a1 = *(_OWORD *)DerivedStorage;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = *(__n128 *)(DerivedStorage + 32);
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t figCaptionSetTimeRange(uint64_t a1, long long *a2)
{
  uint64_t DerivedStorage = (_OWORD *)CMBaseObjectGetDerivedStorage();
  if ((*((_DWORD *)a2 + 3) & 0x1D) == 1 && (*((_DWORD *)a2 + 9) & 0x1D) == 1)
  {
    long long v4 = *a2;
    long long v5 = a2[2];
    DerivedStorage[1] = a2[1];
    DerivedStorage[2] = v5;
    _OWORD *DerivedStorage = v4;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigSampleBufferAudioRendererGetClassID()
{
  return sFigSampleBufferAudioRendererClassID;
}

uint64_t RegisterFigSampleBufferAudioRendererType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigSampleBufferAudioRendererGetTypeID()
{
  MEMORY[0x19970EE10](&FigSampleBufferAudioRendererGetClassID_sRegisterFigSampleBufferAudioRendererTypeOnce, RegisterFigSampleBufferAudioRendererType);

  return CMBaseClassGetCFTypeID();
}

CFStringRef FigSampleBufferAudioRendererCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigSampleBufferAudioRenderer %p]", a1);
}

uint64_t FigPWDKeyExchangeReceiverGetClassID()
{
  if (FigPWDKeyExchangeReceiverGetClassID_onceToken != -1) {
    dispatch_once_f(&FigPWDKeyExchangeReceiverGetClassID_onceToken, 0, (dispatch_function_t)RegisterFigPWDKeyExchangeReceiverBaseTypeOnce);
  }
  return sFigPWDKeyExchangeReceiverClassID;
}

uint64_t RegisterFigPWDKeyExchangeReceiverBaseTypeOnce()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigPWDKeyExchangeReceiverGetTypeID()
{
  if (FigPWDKeyExchangeReceiverGetClassID_onceToken != -1) {
    dispatch_once_f(&FigPWDKeyExchangeReceiverGetClassID_onceToken, 0, (dispatch_function_t)RegisterFigPWDKeyExchangeReceiverBaseTypeOnce);
  }

  return CMBaseClassGetCFTypeID();
}

uint64_t FigPWDKeyExchangeReceiverCreate(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return FigPWDKeyExchangeReceiverCreateForAOCP(*MEMORY[0x1E4F1CF80], a3, a4);
}

CFStringRef FigPWDKeyExchangeReceiverCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigPWDKeyExchangeReceiver %p]", a1);
}

uint64_t FigAssetCacheInspectorCreate_File(const void *a1, CFTypeRef cf, CFTypeRef *a3)
{
  CFTypeRef v25 = 0;
  CFTypeRef cfa = 0;
  if (!cf) {
    goto LABEL_31;
  }
  CFTypeID v6 = CFGetTypeID(cf);
  if (v6 != FigAssetGetTypeID() || !a3) {
    goto LABEL_31;
  }
  FigAssetCacheInspectorGetClassID();
  uint64_t v7 = CMDerivedObjectCreate();
  if (v7) {
    goto LABEL_32;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  dispatch_queue_t v9 = dispatch_queue_create("com.apple.coremedia.assetcacheinspector_file.statequeue", 0);
  void *DerivedStorage = v9;
  if (!v9)
  {
LABEL_31:
    uint64_t v7 = FigSignalErrorAt();
    goto LABEL_32;
  }
  if (a1) {
    CFTypeRef v10 = CFRetain(a1);
  }
  else {
    CFTypeRef v10 = 0;
  }
  DerivedStorage[2] = v10;
  DerivedStorage[3] = CFRetain(cf);
  uint64_t v11 = DerivedStorage[2];
  uint64_t CMBaseObject = FigAssetGetCMBaseObject(cf);
  uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, void *))(v14 + 48);
  if (!v15) {
    goto LABEL_27;
  }
  uint64_t v7 = v15(CMBaseObject, @"assetProperty_CreationURL", v11, DerivedStorage + 4);
  if (v7)
  {
LABEL_32:
    uint64_t v21 = v7;
    goto LABEL_28;
  }
  if (!DerivedStorage[4]) {
    goto LABEL_31;
  }
  uint64_t v16 = DerivedStorage[2];
  uint64_t v17 = FigAssetGetCMBaseObject(cf);
  uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 0;
  }
  CMTimeRange v20 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v19 + 48);
  if (!v20)
  {
LABEL_27:
    uint64_t v21 = 4294954514;
    goto LABEL_28;
  }
  uint64_t v21 = v20(v17, @"assetProperty_CreationOptionsDictionary", v16, &v25);
  CFTypeRef v22 = v25;
  if (!v21)
  {
    if (v25)
    {
      URLCFArrayRef Value = (const void *)FigCFDictionaryGetURLValue();
      if (URLValue) {
        URLCFArrayRef Value = CFRetain(URLValue);
      }
      DerivedStorage[5] = URLValue;
    }
    *a3 = CFRetain(cfa);
    CFTypeRef v22 = v25;
  }
  if (v22) {
    CFRelease(v22);
  }
LABEL_28:
  if (cfa) {
    CFRelease(cfa);
  }
  return v21;
}

uint64_t acif_invalidate()
{
  uint64_t v2 = 0;
  uint64_t DerivedStorage = (dispatch_queue_t *)CMBaseObjectGetDerivedStorage();
  dispatch_sync_f(*DerivedStorage, &DerivedStorage, (dispatch_function_t)acif_invalidateDispatch);
  return v2;
}

void acif_finalize(uint64_t a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v3 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v4 = v3 ? v3 : 0;
    long long v5 = *(void (**)(uint64_t))(v4 + 24);
    if (v5) {
      v5(a1);
    }
  }
  CFTypeID v6 = *(const void **)(DerivedStorage + 16);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v7 = *(const void **)(DerivedStorage + 24);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v8 = *(const void **)(DerivedStorage + 32);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(DerivedStorage + 32) = 0;
  }
  dispatch_queue_t v9 = *(const void **)(DerivedStorage + 40);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(DerivedStorage + 40) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

uint64_t acif_copyProperty(uint64_t a1, const void *a2, uint64_t a3, void *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (a2 && a4 && CFEqual(@"AssetCacheInspectorProperty_PlayableOffline", a2))
  {
    int v6 = FigCFURLIsLocalResource();
    uint64_t v7 = (void *)MEMORY[0x1E4F1CFD0];
    if (!v6) {
      uint64_t v7 = (void *)MEMORY[0x1E4F1CFC8];
    }
    *a4 = *v7;
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t *acif_invalidateDispatch(uint64_t *result)
{
  if (result)
  {
    uint64_t v1 = *result;
    if (*result)
    {
      if (!*(unsigned char *)(v1 + 8)) {
        *(unsigned char *)(v1 + 8) = 1;
      }
    }
  }
  return result;
}

uint64_t acif_copyCompletelyCachedMediaSelectionOptionsInGroup(uint64_t a1, const void *a2, uint64_t a3, CFArrayRef *a4)
{
  CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFTypeID v6 = CFGetTypeID(a2);
    if (v6 == CFDictionaryGetTypeID())
    {
      if (a4)
      {
        if (FigCFURLIsLocalResource())
        {
          CFArrayRef Value = CFDictionaryGetValue((CFDictionaryRef)a2, @"MediaSelectionGroupOptions");
          if (Value) {
            CFArrayRef Value = CFRetain(Value);
          }
          *a4 = (CFArrayRef)Value;
          return 0;
        }
        CFArrayRef v8 = CFArrayCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D510]);
        *a4 = v8;
        if (v8) {
          return 0;
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t FigSampleGeneratorRemoteCreateForFormatReader(uint64_t a1, uint64_t a2, OpaqueCMTimebase *a3, unsigned int a4, void *a5)
{
  if (a2) {
    return figSampleGeneratorRemoteCreateCommon(a1, a2, 0, 0, a3, a4, a5);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t figSampleGeneratorRemoteCreateCommon(uint64_t a1, uint64_t a2, uint64_t a3, int a4, OpaqueCMTimebase *a5, unsigned int a6, void *a7)
{
  xpc_object_t v33 = 0;
  xpc_object_t v34 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  CFTypeRef v30 = 0;
  if (!a7) {
    goto LABEL_23;
  }
  if (gSampleGeneratorRemoteClientSetupOnce != -1) {
    dispatch_once(&gSampleGeneratorRemoteClientSetupOnce, &__block_literal_global_57);
  }
  uint64_t v13 = remoteSampleGenerator_EnsureClientEstablished_err;
  if (remoteSampleGenerator_EnsureClientEstablished_err) {
    goto LABEL_20;
  }
  FigXPCRemoteClientCopyMemoryRecipient();
  Objectuint64_t ID = FigXPCCreateBasicMessage();
  if (ObjectID)
  {
LABEL_24:
    uint64_t v13 = ObjectID;
    goto LABEL_20;
  }
  if (!a2) {
    goto LABEL_10;
  }
  if (!FigFormatReaderIsRemote(a2))
  {
LABEL_23:
    Objectuint64_t ID = FigSignalErrorAt();
    goto LABEL_24;
  }
  Objectuint64_t ID = FigFormatReaderXPCRemoteGetObjectID(a2, &v32);
  if (ObjectID) {
    goto LABEL_24;
  }
  xpc_dictionary_set_uint64(v34, "FormatReader", v32);
LABEL_10:
  if (!a3) {
    goto LABEL_14;
  }
  if (!FigTrackReaderIsRemote(a3)) {
    goto LABEL_23;
  }
  Objectuint64_t ID = FigFormatReaderXPCRemoteGetObjectID(a3, &v31);
  if (ObjectID) {
    goto LABEL_24;
  }
  xpc_dictionary_set_uint64(v34, "TrackReader", v31);
LABEL_14:
  xpc_dictionary_set_uint64(v34, "CreationOptions", a6);
  xpc_dictionary_set_BOOL(v34, "AttachByteReferences", a4 != 0);
  if (a5)
  {
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    long long v21 = 0u;
    long long v22 = 0u;
    FigTimebaseGetSyncMoment(a5, (uint64_t)&v21);
    bytes[0] = v21;
    bytes[1] = v22;
    uint64_t v26 = *(void *)&v23[0];
    long long v27 = *(_OWORD *)((char *)v23 + 8);
    uint64_t v28 = *((void *)&v23[1] + 1);
    uint64_t v29 = v24;
    xpc_dictionary_set_data(v34, "TimebaseSyncMoment", bytes, 0x48uLL);
  }
  Objectuint64_t ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_24;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(v33, (const char *)*MEMORY[0x1E4F20280]);
  *(void *)&bytes[0] = 0;
  FigSampleGeneratorGetClassID();
  uint64_t v13 = CMDerivedObjectCreate();
  uint64_t v16 = *(const void **)&bytes[0];
  if (v13)
  {
    if (*(void *)&bytes[0]) {
LABEL_29:
    }
      CFRelease(v16);
  }
  else
  {
    BOOL v17 = a5 != 0;
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    *(void *)(DerivedStorage + 24) = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *(void *)(DerivedStorage + 16) = FigSimpleMutexCreate();
    *(void *)(DerivedStorage + 32) = FigSimpleMutexCreate();
    *(void *)uint64_t DerivedStorage = uint64;
    *(unsigned char *)(DerivedStorage + 48) = v17;
    uint64_t v19 = *(const void **)&bytes[0];
    uint64_t v13 = FigXPCRemoteClientAssociateObject();
    if (!v13)
    {
      *a7 = v19;
      goto LABEL_20;
    }
    if (v19)
    {
      uint64_t v16 = v19;
      goto LABEL_29;
    }
  }
LABEL_20:
  FigXPCRelease();
  FigXPCRelease();
  if (v30) {
    CFRelease(v30);
  }
  return v13;
}

uint64_t FigSampleGeneratorRemoteCreateForTrackReader(uint64_t a1, uint64_t a2, OpaqueCMTimebase *a3, unsigned int a4, void *a5)
{
  if (a2) {
    return figSampleGeneratorRemoteCreateCommon(a1, 0, a2, 0, a3, a4, a5);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t FigSampleGeneratorRemoteCreateForTrackReaderProducingByteReferenceSampleBuffers(uint64_t a1, uint64_t a2, OpaqueCMTimebase *a3, unsigned int a4, void *a5)
{
  if (a2) {
    return figSampleGeneratorRemoteCreateCommon(a1, 0, a2, 1, a3, a4, a5);
  }
  else {
    return FigSignalErrorAt();
  }
}

uint64_t remoteSampleGenerator_DeadConnectionCallback(const void *a1)
{
  *(unsigned char *)(CMBaseObjectGetDerivedStorage() + 8) = 1;
  CFTypeID v2 = CFGetTypeID(a1);
  uint64_t result = FigSampleGeneratorGetTypeID();
  if (v2 == result)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 32));
    CFDictionaryRef v5 = *(const __CFDictionary **)(DerivedStorage + 24);
    if (v5)
    {
      CFDictionaryApplyFunction(v5, (CFDictionaryApplierFunction)remoteSampleGenerator_markSampleBufferDataFailed, 0);
      CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 24));
    }
    JUMPOUT(0x19970E930);
  }
  return result;
}

uint64_t remoteSampleGenerator_handleServerMessage()
{
  OpCFIndex Code = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  else {
    return 4294951138;
  }
}

uint64_t remoteSampleGenerator_markSampleBufferDataFailed(int a1, CMSampleBufferRef sbuf)
{
  return CMSampleBufferSetDataFailed(sbuf, -12556);
}

uint64_t remoteSampleGenerator_Finalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSimpleMutexDestroy();
  uint64_t v1 = *(const void **)(DerivedStorage + 24);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 24) = 0;
  }
  FigSimpleMutexDestroy();
  CFTypeID v2 = *(const void **)(DerivedStorage + 40);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(DerivedStorage + 40) = 0;
  }
  FigXPCRemoteClientDisassociateObject();
  if (*(void *)DerivedStorage && !*(unsigned char *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendAsyncMessage();
  }
  FigXPCRelease();
  return FigXPCRelease();
}

__CFString *remoteSampleGenerator_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  if (*(unsigned char *)(DerivedStorage + 8)) {
    CFTypeID v6 = " SERVER DIED";
  }
  else {
    CFTypeID v6 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigSampleGeneratorRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s>", a1, v5, *(void *)DerivedStorage, v6);
  return Mutable;
}

uint64_t remoteSampleGenerator_CreateSampleBufferAtCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, long long a9, uint64_t a10, CFTypeRef *a11)
{
  v13[0] = a2;
  v13[1] = a3;
  v13[2] = a4;
  int v14 = a5;
  uint64_t v15 = a6;
  int v16 = a7;
  int v17 = a8;
  long long v18 = a9;
  uint64_t v19 = a10;
  uint64_t SampleBuffer = remoteSampleGenerator_createSampleBuffer(a1, v13, 0, a11);
  FigXPCRemoteClientKillServerOnTimeout();
  return SampleBuffer;
}

uint64_t remoteSampleGenerator_GenerateSampleBuffersForRequests(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  xpc_object_t v46 = 0;
  uint64_t v47 = 0;
  value[1] = 0;
  xpc_object_t xdict = 0;
  CFTypeRef cf = 0;
  value[0] = 0;
  if (!a1)
  {
    Objectuint64_t ID = FigSignalErrorAt();
    goto LABEL_41;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  Objectuint64_t ID = remoteSampleGeneratorBatch_GetObjectID(a1, &v47);
  if (ObjectID)
  {
LABEL_41:
    uint64_t v38 = ObjectID;
    CFMutableDictionaryRef Mutable = 0;
    int v16 = 0;
    goto LABEL_52;
  }
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  uint64_t v12 = FigXPCCreateBasicMessage();
  if (v12)
  {
    uint64_t v38 = v12;
LABEL_44:
    CFMutableDictionaryRef Mutable = 0;
LABEL_46:
    int v16 = 0;
LABEL_38:
    MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
    goto LABEL_52;
  }
  xpc_dictionary_set_int64(v46, "RequestCount", a2);
  xpc_object_t v13 = xpc_array_create(0, 0);
  if (!v13)
  {
    uint64_t v38 = FigSignalErrorAt();
    goto LABEL_44;
  }
  uint64_t v40 = a4;
  CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  if (!Mutable)
  {
    uint64_t v38 = FigSignalErrorAt();
    goto LABEL_46;
  }
  int v16 = CFArrayCreateMutable(v14, 0, MEMORY[0x1E4F1D510]);
  if (!v16)
  {
    uint64_t v38 = FigSignalErrorAt();
    goto LABEL_38;
  }
  uint64_t v41 = DerivedStorage;
  if (a2 >= 1)
  {
    int64_t v17 = a2;
    long long v18 = (uint64_t *)a3;
    while (1)
    {
      memset(bytes, 0, sizeof(bytes));
      uint64_t v19 = *v18;
      uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v20) {
        uint64_t v21 = v20;
      }
      else {
        uint64_t v21 = 0;
      }
      long long v22 = *(uint64_t (**)(uint64_t, void **))(v21 + 8);
      if (!v22)
      {
LABEL_36:
        uint64_t v38 = 4294954514;
        goto LABEL_37;
      }
      uint64_t SampleBufferGeneratorRequestXPCMessage = v22(v19, value);
      if (SampleBufferGeneratorRequestXPCMessage) {
        break;
      }
      CFArrayAppendValue(Mutable, value[0]);
      uint64_t v24 = *(uint64_t *)((char *)v18 + 28);
      if (v24)
      {
        uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v25) {
          uint64_t v26 = v25;
        }
        else {
          uint64_t v26 = 0;
        }
        long long v27 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v26 + 8);
        if (!v27) {
          goto LABEL_36;
        }
        uint64_t SampleBufferGeneratorRequestXPCMessage = v27(v24, &cf);
        if (SampleBufferGeneratorRequestXPCMessage) {
          break;
        }
        CFArrayAppendValue(v16, cf);
      }
      uint64_t SampleBufferGeneratorRequestXPCMessage = remoteSampleGenerator_createSampleBufferGeneratorRequestXPCMessage((uint64_t)v18, value[0], cf, (uint64_t)bytes);
      if (SampleBufferGeneratorRequestXPCMessage) {
        break;
      }
      xpc_array_set_data(v13, 0xFFFFFFFFFFFFFFFFLL, bytes, 0x30uLL);
      if (value[0])
      {
        CFRelease(value[0]);
        value[0] = 0;
      }
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      long long v18 = (uint64_t *)((char *)v18 + 68);
      if (!--v17) {
        goto LABEL_27;
      }
    }
    uint64_t v38 = SampleBufferGeneratorRequestXPCMessage;
LABEL_37:
    uint64_t DerivedStorage = v41;
    goto LABEL_38;
  }
LABEL_27:
  xpc_dictionary_set_value(v46, "SampleBufferGenerationRequestArray", v13);
  SampleBufferRequestor = CreateSampleBufferRequestor(a3, a2, v40, a5);
  uint64_t v29 = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (v29) {
    goto LABEL_49;
  }
  xpc_object_t array = xpc_dictionary_get_array(xdict, "SampleBufferResponseArray");
  if (array)
  {
    uint64_t v31 = array;
    size_t count = xpc_array_get_count(array);
    if (count)
    {
      size_t v33 = count;
      size_t v34 = 0;
      do
      {
        dictionardouble y = xpc_array_get_dictionary(v31, v34);
        uint64_t v29 = remoteSampleGenerator_processSingleSampleBufferResponse(a1, SampleBufferRequestor, dictionary, 0);
        if (v29) {
          goto LABEL_49;
        }
      }
      while (v33 != ++v34);
    }
LABEL_33:
    uint64_t v36 = FigXPCCreateBasicMessage();
    uint64_t v37 = v41;
    if (!v36) {
      uint64_t v36 = FigXPCRemoteClientSendSyncMessage();
    }
    uint64_t v38 = v36;
    goto LABEL_50;
  }
  uint64_t v29 = FigSignalErrorAt();
  if (!v29) {
    goto LABEL_33;
  }
LABEL_49:
  uint64_t v38 = v29;
  uint64_t v37 = v41;
LABEL_50:
  MEMORY[0x19970E930](*(void *)(v37 + 16));
  if (SampleBufferRequestor) {
    free(SampleBufferRequestor);
  }
LABEL_52:
  if (value[0]) {
    CFRelease(value[0]);
  }
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v16) {
    CFRelease(v16);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v38;
}

uint64_t remoteSampleGenerator_CreateBatch(const void *a1, uint64_t a2, void *a3)
{
  uint64_t v14 = 0;
  if (!a1 || !a3) {
    goto LABEL_11;
  }
  Objectuint64_t ID = remoteSampleGeneratorBatch_GetObjectID((uint64_t)a1, &v14);
  if (ObjectID) {
    goto LABEL_12;
  }
  Objectuint64_t ID = FigXPCCreateBasicMessage();
  if (ObjectID) {
    goto LABEL_12;
  }
  Objectuint64_t ID = FigXPCRemoteClientSendSyncMessageCreatingReply();
  if (ObjectID) {
    goto LABEL_12;
  }
  uint64_t int64 = xpc_dictionary_get_uint64(0, (const char *)*MEMORY[0x1E4F20280]);
  if (!uint64)
  {
LABEL_11:
    Objectuint64_t ID = FigSignalErrorAt();
LABEL_12:
    uint64_t v9 = ObjectID;
    goto LABEL_10;
  }
  uint64_t v7 = uint64;
  int v8 = *(unsigned __int8 *)(CMBaseObjectGetDerivedStorage() + 48);
  uint64_t v15 = 0;
  FigSampleGeneratorBatchGetClassID();
  uint64_t v9 = CMDerivedObjectCreate();
  CFTypeRef v10 = v15;
  if (v9)
  {
    if (!v15) {
      goto LABEL_10;
    }
    goto LABEL_17;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  *(void *)(DerivedStorage + 16) = FigSimpleMutexCreate();
  *(void *)uint64_t DerivedStorage = v7;
  *(unsigned char *)(DerivedStorage + 24) = v8 == 0;
  *(_DWORD *)(DerivedStorage + 28) = 0;
  *(void *)(DerivedStorage + 40) = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D548]);
  *(void *)(DerivedStorage + 32) = CFRetain(a1);
  uint64_t v12 = v15;
  uint64_t v9 = FigXPCRemoteClientAssociateObject();
  if (v9)
  {
    if (!v12) {
      goto LABEL_10;
    }
    CFTypeRef v10 = v12;
LABEL_17:
    CFRelease(v10);
    goto LABEL_10;
  }
  *a3 = v12;
LABEL_10:
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v9;
}

uint64_t remoteSampleGenerator_createSampleBuffer(uint64_t a1, uint64_t *a2, uint64_t a3, CFTypeRef *a4)
{
  xpc_object_t v30 = 0;
  xpc_object_t v31 = 0;
  v29[0] = 0;
  v29[1] = 0;
  CFTypeRef v27 = 0;
  CFTypeRef cf = 0;
  if (!a1 || !a2 || !*a2 || !a4 || (uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage(), *(unsigned char *)(DerivedStorage + 8)))
  {
    uint64_t v14 = FigSignalErrorAt();
    goto LABEL_39;
  }
  uint64_t v9 = DerivedStorage;
  uint64_t v10 = *a2;
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  xpc_object_t v13 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v12 + 8);
  if (!v13) {
    goto LABEL_20;
  }
  uint64_t v14 = v13(v10, &cf);
  if (v14)
  {
LABEL_39:
    uint64_t v20 = v14;
    goto LABEL_21;
  }
  uint64_t v15 = *(uint64_t *)((char *)a2 + 28);
  if (!v15) {
    goto LABEL_17;
  }
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v17 = v16 ? v16 : 0;
  long long v18 = *(uint64_t (**)(uint64_t, CFTypeRef *))(v17 + 8);
  if (!v18)
  {
LABEL_20:
    uint64_t v20 = 4294954514;
    goto LABEL_21;
  }
  uint64_t v14 = v18(v15, &v27);
  if (v14) {
    goto LABEL_39;
  }
LABEL_17:
  MEMORY[0x19970E910](*(void *)(v9 + 16));
  if (a3 && (uint64_t v26 = 0, ObjectID = remoteSampleGeneratorBatch_GetObjectID(a3, &v26), ObjectID)
    || (Objectuint64_t ID = FigXPCCreateBasicMessage(), ObjectID))
  {
    uint64_t v20 = ObjectID;
    MEMORY[0x19970E930](*(void *)(v9 + 16));
  }
  else
  {
    SampleBufferRequestor = CreateSampleBufferRequestor((uint64_t)a2, 1, 0, 0);
    memset(v25, 0, sizeof(v25));
    uint64_t SampleBufferGeneratorRequestXPCMessage = remoteSampleGenerator_createSampleBufferGeneratorRequestXPCMessage((uint64_t)a2, cf, v27, (uint64_t)v25);
    if (SampleBufferGeneratorRequestXPCMessage
      || (xpc_dictionary_set_data(v31, "SampleBufferGenerationRequest", v25, 0x30uLL),
          uint64_t SampleBufferGeneratorRequestXPCMessage = FigXPCRemoteClientSendSyncMessageCreatingReply(),
          SampleBufferGeneratorRequestXPCMessage)
      || (xpc_object_t value = xpc_dictionary_get_value(v30, "SampleBufferResponse"),
          uint64_t SampleBufferGeneratorRequestXPCMessage = remoteSampleGenerator_processSingleSampleBufferResponse(a1, SampleBufferRequestor, value, (void **)v29), SampleBufferGeneratorRequestXPCMessage)|| !a3&& ((uint64_t SampleBufferGeneratorRequestXPCMessage = FigXPCCreateBasicMessage(), SampleBufferGeneratorRequestXPCMessage)|| (uint64_t SampleBufferGeneratorRequestXPCMessage = FigXPCRemoteClientSendSyncMessage(), SampleBufferGeneratorRequestXPCMessage)))
    {
      uint64_t v20 = SampleBufferGeneratorRequestXPCMessage;
    }
    else
    {
      uint64_t v20 = 0;
      *a4 = v29[0];
      v29[0] = 0;
    }
    MEMORY[0x19970E930](*(void *)(v9 + 16));
    if (SampleBufferRequestor) {
      free(SampleBufferRequestor);
    }
  }
LABEL_21:
  if (cf) {
    CFRelease(cf);
  }
  if (v27) {
    CFRelease(v27);
  }
  FigXPCRelease();
  FigXPCRelease();
  FigXPCRelease();
  if (v29[0]) {
    CFRelease(v29[0]);
  }
  return v20;
}

uint64_t remoteSampleGeneratorBatch_GetObjectID(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(DerivedStorage + 8))
  {
    return FigSignalErrorAt();
  }
  else
  {
    *a2 = *(void *)DerivedStorage;
    return 0;
  }
}

void *CreateSampleBufferRequestor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = malloc_type_calloc(1uLL, 0x20uLL, 0x10E00403B2942D6uLL);
  uint64_t v9 = v8;
  if (v8)
  {
    *int v8 = a2;
    v8[1] = a1;
    void v8[2] = a3;
    _OWORD v8[3] = a4;
  }
  else
  {
    FigSignalErrorAt();
  }
  return v9;
}

uint64_t remoteSampleGenerator_createSampleBufferGeneratorRequestXPCMessage(uint64_t a1, const void *a2, const void *a3, uint64_t a4)
{
  if (a1)
  {
    if (a4)
    {
      *(_DWORD *)(a4 + 16) = *(_DWORD *)(a1 + 24);
      *(_OWORD *)a4 = *(_OWORD *)(a1 + 8);
      *(void *)(a4 + 20) = *(void *)(a1 + 36);
      if (a2)
      {
        CFTypeID v6 = (void *)(a4 + 32);
        if (!FigSampleCursorXPCRemoteGetObjectID(a2, (void *)(a4 + 32)))
        {
          if (*v6)
          {
            if (!a3) {
              return 0;
            }
            uint64_t v7 = (void *)(a4 + 40);
            if (!FigSampleCursorXPCRemoteGetObjectID(a3, v7))
            {
              if (*v7) {
                return 0;
              }
            }
          }
        }
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t remoteSampleGenerator_processSingleSampleBufferResponse(uint64_t a1, uint64_t *a2, void *a3, void **a4)
{
  xpc_object_t value = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef cf = 0;
  if (!a2
    || !a3
    || (uint64_t v8 = DerivedStorage,
        BOOL v9 = xpc_dictionary_get_BOOL(a3, "SampleBufferDataReady"),
        int64_t int64 = xpc_dictionary_get_int64(a3, "SampleBufferErrorReturn"),
        int64_t valuePtr = xpc_dictionary_get_int64(a3, "RequestID"),
        unsigned int v11 = valuePtr,
        valuePtr >= *a2))
  {
    uint64_t v18 = FigSignalErrorAt();
    goto LABEL_27;
  }
  if (!int64)
  {
    uint64_t v18 = FigXPCRemoteClientCopyMemoryRecipient();
    if (!v18)
    {
      uint64_t v17 = FigXPCMessageCopyCMSampleBuffer();
      if (v17) {
        goto LABEL_21;
      }
      goto LABEL_5;
    }
LABEL_27:
    uint64_t v17 = v18;
    goto LABEL_21;
  }
LABEL_5:
  if (v9)
  {
    CFNumberRef v12 = 0;
  }
  else
  {
    MEMORY[0x19970E910](*(void *)(v8 + 32));
    CFNumberRef v12 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberSInt64Type, &valuePtr);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(v8 + 24), v12, value);
    MEMORY[0x19970E930](*(void *)(v8 + 32));
  }
  xpc_object_t v13 = value;
  uint64_t v14 = a2[1];
  if (value)
  {
    uint64_t v15 = *(unsigned int (**)(void, void, void *))(v14 + 68 * v11 + 44);
    if (v15)
    {
      if (v15(*(void *)(v14 + 68 * v11 + 52), *(void *)(v14 + 68 * v11 + 60), value)) {
        FigSignalErrorAt();
      }
    }
  }
  uint64_t v16 = (void (*)(uint64_t, uint64_t, int64_t, void *))a2[3];
  if (v16) {
    v16(a2[2], v14 + 68 * v11, int64, v13);
  }
  if (a4)
  {
    *a4 = value;
    xpc_object_t value = 0;
  }
  if (v12) {
    CFRelease(v12);
  }
  uint64_t v17 = 0;
LABEL_21:
  if (value) {
    CFRelease(value);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v17;
}

uint64_t remoteSampleGeneratorBatch_Finalize(void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFSetRef v3 = *(const __CFSet **)(DerivedStorage + 40);
  if (v3) {
    CFSetApplyFunction(v3, (CFSetApplierFunction)remoteSampleGeneratorBatch_removeListener, a1);
  }
  if (!*(_DWORD *)(DerivedStorage + 28))
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v7 = v6 ? v6 : 0;
    BOOL v9 = *(void (**)(void *))(v7 + 24);
    if (v9) {
      v9(a1);
    }
  }
  FigSimpleMutexDestroy();
  uint64_t v4 = *(const void **)(DerivedStorage + 40);
  if (v4) {
    CFRelease(v4);
  }
  CFIndex v5 = *(const void **)(DerivedStorage + 32);
  if (v5) {
    CFRelease(v5);
  }
  FigXPCRemoteClientDisassociateObject();
  if (*(void *)DerivedStorage && !*(unsigned char *)(DerivedStorage + 8) && !FigXPCCreateBasicMessage()) {
    FigXPCRemoteClientSendAsyncMessage();
  }
  return FigXPCRelease();
}

__CFString *remoteSampleGeneratorBatch_CopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFIndex v5 = CFGetRetainCount(a1);
  uint64_t v6 = "open";
  uint64_t v7 = *(unsigned int *)(DerivedStorage + 28);
  if ((int)v7 > 1) {
    uint64_t v6 = "completed";
  }
  if (v7 == 1) {
    uint64_t v6 = "committed";
  }
  if (*(unsigned char *)(DerivedStorage + 8)) {
    uint64_t v8 = " SERVER DIED";
  }
  else {
    uint64_t v8 = "";
  }
  CFStringAppendFormat(Mutable, 0, @"<FigSampleGeneratorBatchRemote(XPC) %p retainCount: %ld ObjectID: %016llx%s State: %s(%d)", a1, v5, *(void *)DerivedStorage, v8, v6, v7);
  return Mutable;
}

uint64_t remoteSampleGeneratorBatch_removeListener()
{
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();

  return FigNotificationCenterRemoveWeakListener();
}

uint64_t remoteSampleGeneratorBatch_completionCallback(uint64_t a1, uint64_t a2, uint64_t a3, opaqueCMSampleBuffer *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  CMNotificationCenterGetDefaultLocalCenter();
  FigNotificationCenterRemoveWeakListener();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (FigCFEqual())
  {
    OSStatus statusOut = 0;
    int HasDataFailed = CMSampleBufferHasDataFailed(a4, &statusOut);
    OSStatus v7 = statusOut;
    uint64_t v8 = CMBaseObjectGetDerivedStorage();
    if (v7 != -16751 || HasDataFailed == 0) {
      int v10 = 3;
    }
    else {
      int v10 = 4;
    }
    *(_DWORD *)(v8 + 28) = v10;
  }
  CFSetRemoveValue(*(CFMutableSetRef *)(DerivedStorage + 40), a4);
  if (!CFSetGetCount(*(CFSetRef *)(DerivedStorage + 40)))
  {
    if ((*(_DWORD *)(DerivedStorage + 28) - 3) >= 2) {
      *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 28) = 2;
    }
    CMNotificationCenterGetDefaultLocalCenter();
    CMNotificationCenterPostNotification();
  }
  return MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
}

uint64_t remoteSampleGeneratorBatch_CreateAndAddSampleBufferAtCursor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CMSampleBufferRef *a12)
{
  CMSampleBufferRef sbuf = 0;
  if (!a1 || !a12)
  {
    uint64_t v22 = FigSignalErrorAt();
    goto LABEL_14;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (!*(_DWORD *)(DerivedStorage + 28))
  {
    v24[0] = a2;
    v24[1] = a3;
    _OWORD v24[2] = a4;
    int v25 = a5;
    uint64_t v26 = a6;
    int v27 = a7;
    int v28 = a8;
    uint64_t v30 = a10;
    uint64_t v29 = a9;
    uint64_t v31 = a11;
    if (!remoteSampleGenerator_createSampleBuffer(*(void *)(DerivedStorage + 32), v24, a1, (CFTypeRef *)&sbuf))
    {
      uint64_t v21 = sbuf;
      if (sbuf)
      {
        if (!*(unsigned char *)(DerivedStorage + 24))
        {
LABEL_9:
          if (!CMSampleBufferDataIsReady(v21))
          {
            CFSetAddValue(*(CFMutableSetRef *)(DerivedStorage + 40), sbuf);
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
            CMNotificationCenterGetDefaultLocalCenter();
            FigNotificationCenterAddWeakListener();
          }
          uint64_t v22 = 0;
          *a12 = sbuf;
          CMSampleBufferRef sbuf = 0;
          goto LABEL_12;
        }
        if (CMSampleBufferDataIsReady(sbuf))
        {
          uint64_t v21 = sbuf;
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v22 = FigSignalErrorAt();
LABEL_12:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
  if (sbuf) {
    CFRelease(sbuf);
  }
LABEL_14:
  FigXPCRemoteClientKillServerOnTimeout();
  return v22;
}

uint64_t remoteSampleGeneratorBatch_Commit(uint64_t a1)
{
  uint64_t v6 = 0;
  if (!a1)
  {
    Objectuint64_t ID = FigSignalErrorAt();
    goto LABEL_13;
  }
  Objectuint64_t ID = remoteSampleGeneratorBatch_GetObjectID(a1, &v6);
  if (ObjectID)
  {
LABEL_13:
    uint64_t v4 = ObjectID;
    goto LABEL_11;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (*(_DWORD *)(DerivedStorage + 28))
  {
    uint64_t v3 = FigSignalErrorAt();
  }
  else
  {
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 28) = 1;
    uint64_t v3 = FigXPCCreateBasicMessage();
    if (!v3)
    {
      uint64_t v3 = FigXPCRemoteClientSendSyncMessage();
      if (!v3)
      {
        if (!CFSetGetCount(*(CFSetRef *)(DerivedStorage + 40)) || *(unsigned char *)(DerivedStorage + 24))
        {
          *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 28) = 2;
          CMNotificationCenterGetDefaultLocalCenter();
          CMNotificationCenterPostNotification();
        }
        uint64_t v4 = 0;
        goto LABEL_10;
      }
    }
  }
  uint64_t v4 = v3;
LABEL_10:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
LABEL_11:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v4;
}

uint64_t remoteSampleGeneratorBatch_Cancel(uint64_t a1)
{
  uint64_t v6 = 0;
  if (!a1)
  {
    Objectuint64_t ID = FigSignalErrorAt();
    goto LABEL_11;
  }
  Objectuint64_t ID = remoteSampleGeneratorBatch_GetObjectID(a1, &v6);
  if (ObjectID)
  {
LABEL_11:
    uint64_t v3 = ObjectID;
    goto LABEL_9;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 16));
  if (*(_DWORD *)(DerivedStorage + 28) == 2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 28) = 4;
    uint64_t v4 = FigXPCCreateBasicMessage();
    if (!v4) {
      uint64_t v4 = FigXPCRemoteClientSendSyncMessage();
    }
    uint64_t v3 = v4;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 16));
LABEL_9:
  FigXPCRelease();
  FigXPCRemoteClientKillServerOnTimeout();
  return v3;
}

uint64_t remoteSampleGeneratorBatch_GetState(uint64_t a1, _DWORD *a2)
{
  if (a1)
  {
    uint64_t v2 = 0;
    *a2 = *(_DWORD *)(CMBaseObjectGetDerivedStorage() + 28);
  }
  else
  {
    uint64_t v2 = FigSignalErrorAt();
  }
  FigXPCRemoteClientKillServerOnTimeout();
  return v2;
}

uint64_t FigMediaProcessorCreateForCustom(const __CFAllocator *a1, const __CFString *a2, uint64_t a3, uint64_t a4, const void *a5, void *a6, uint64_t a7, long long *a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, int a13, uint64_t *a14)
{
  uint64_t v35 = 0;
  CFTypeRef v33 = 0;
  CFTypeRef cf = 0;
  CFTypeRef v32 = 0;
  if ((a5 == 0) == (a6 != 0) && a9)
  {
    uint64_t v19 = FigSampleBufferProcessorCreateForCustom((int)a1, a2, a3, a4, &v35);
    if (!v19)
    {
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (a5)
      {
        uint64_t v21 = FigSampleBufferProviderCreateForBufferQueue((uint64_t)v20, a5, &cf);
      }
      else
      {
        long long v23 = *(_OWORD *)a7;
        uint64_t v31 = *(void *)(a7 + 16);
        long long v24 = a8[1];
        long long v27 = *a8;
        long long v28 = v24;
        long long v29 = a8[2];
        long long v30 = v23;
        uint64_t v21 = FigSampleBufferProviderCreateForVisualContext(v20, a6, &v30, &v27, &cf);
      }
      uint64_t v25 = v21;
      if (v21) {
        goto LABEL_18;
      }
      long long v27 = *(_OWORD *)a10;
      *(void *)&long long v28 = *(void *)(a10 + 16);
      long long v30 = *(_OWORD *)a11;
      uint64_t v31 = *(void *)(a11 + 16);
      uint64_t v25 = FigSampleBufferConsumerCreateForBufferQueue(a9, &v27, &v30, &v33);
      if (v25) {
        goto LABEL_18;
      }
      uint64_t v26 = a12
          ? FigActivitySchedulerCreateForCFRunLoop(a1, a12, &v32)
          : FigActivitySchedulerCreateForNewThread((uint64_t)a1, a13, @"com.apple.coremedia.mediaprocessor.videocustom", &v32);
      uint64_t v25 = v26;
      if (v26) {
        goto LABEL_18;
      }
      uint64_t v19 = FigMediaProcessorCreate((uint64_t)a1, v35, cf, v33, v32, a14);
    }
    uint64_t v25 = v19;
LABEL_18:
    if (cf) {
      CFRelease(cf);
    }
    if (v32) {
      CFRelease(v32);
    }
    if (v35) {
      CFRelease(v35);
    }
    if (v33) {
      CFRelease(v33);
    }
    return v25;
  }

  return FigSignalErrorAt();
}

uint64_t FigSampleBufferProcessorCreateCustomProcessors(CFStringRef theString, __CFArray **a2)
{
  CFAllocatorRef v3 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, @",");
  if (ArrayBySeparatingStrings)
  {
    CFArrayRef v5 = ArrayBySeparatingStrings;
    CFIndex Count = CFArrayGetCount(ArrayBySeparatingStrings);
    if (Count)
    {
      uint64_t v7 = Count;
      CFMutableDictionaryRef Mutable = CFArrayCreateMutable(v3, Count, MEMORY[0x1E4F1D510]);
      if (v7 >= 1)
      {
        for (CFIndex i = 0; i != v7; ++i)
        {
          xpc_object_t value = 0;
          CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(v5, i);
          if (CFEqual(ValueAtIndex, @"monochrome")) {
            FigSampleBufferProcessorCreateForMonochrome((uint64_t)v3, &value);
          }
          if (value)
          {
            CFArrayAppendValue(Mutable, value);
            CFRelease(value);
          }
        }
      }
      if (Mutable)
      {
        if (CFArrayGetCount(Mutable) < 1)
        {
          *a2 = 0;
          CFRelease(Mutable);
        }
        else
        {
          *a2 = Mutable;
        }
      }
    }
    CFRelease(v5);
  }
  return 0;
}

uint64_t FigSampleBufferProcessorCreateForCustom(int a1, const __CFString *cf1, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 0;
  if (CFEqual(cf1, @"monochrome"))
  {
    uint64_t result = FigSampleBufferProcessorCreateForMonochrome(*MEMORY[0x1E4F1CF80], &v13);
  }
  else
  {
    if (!CFStringGetCString(cf1, buffer, 1024, 0x8000100u)
      || (snprintf(__str, 0x400uLL, "%s/%s.videoprocessor", "/System/Library/VideoProcessors", buffer),
          snprintf(__symbol, 0x400uLL, "%s%s", "FigSampleBufferProcessorCreateFor", buffer),
          (unsigned int v11 = dlopen(__str, 4)) == 0)
      || (CFNumberRef v12 = (uint64_t (*)(void, uint64_t, uint64_t *))dlsym(v11, __symbol)) == 0)
    {
      uint64_t v9 = v13;
      uint64_t result = 4294954516;
      goto LABEL_13;
    }
    uint64_t result = v12(*MEMORY[0x1E4F1CF80], a3, &v13);
  }
  uint64_t v9 = v13;
  if (v13) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = 4294954516;
  }
  if (!result) {
    uint64_t result = v10;
  }
LABEL_13:
  *a5 = v9;
  return result;
}

CFURLRef FigFairPlayCopyDefaultKeybagFolderURL()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uid_t v0 = getuid();
  uint64_t v1 = getpwuid(v0);
  if (v1)
  {
    snprintf(__str, 0x400uLL, "%s/Media/iTunes_Control/iTunes/", v1->pw_dir);
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    size_t v3 = strlen(__str);
    CFURLRef result = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const UInt8 *)__str, v3, 1u);
    if (result) {
      return result;
    }
  }
  else
  {
    CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  }
  return CFURLCreateWithFileSystemPath(v2, @"/", kCFURLPOSIXPathStyle, 1u);
}

__CFString *FigFairPlayCopyAbsolutePathFromURL(const __CFURL *a1)
{
  if (a1 && (CFURLRef v1 = CFURLCopyAbsoluteURL(a1)) != 0)
  {
    CFURLRef v2 = v1;
    CFStringRef v3 = CFURLCopyFileSystemPath(v1, kCFURLPOSIXPathStyle);
    CFRelease(v2);
  }
  else
  {
    CFStringRef v3 = 0;
  }
  if (v3) {
    return (__CFString *)v3;
  }
  else {
    return @"/";
  }
}

CFDictionaryRef FigFairPlayCreateSinfExtensionsFromSinfData(unint64_t a1, unint64_t a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = 0;
  values[1] = 0;
  keys[0] = 0;
  keys[1] = 0;
  if (a1 | a2)
  {
    if (a1)
    {
      values[0] = (void *)a1;
      keys[0] = @"sinf";
      CFIndex v2 = 1;
      if (!a2) {
        return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
    }
    else
    {
      CFIndex v2 = 0;
      if (!a2) {
        return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
    }
    values[v2] = (void *)a2;
    keys[v2++] = @"UUID";
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  return 0;
}

CFDictionaryRef FigFairPlayCreateSinfExtensionsFromPinfData(unint64_t a1, unint64_t a2)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = 0;
  values[1] = 0;
  keys[0] = 0;
  keys[1] = 0;
  if (a1 | a2)
  {
    if (a1)
    {
      values[0] = (void *)a1;
      keys[0] = @"pinf";
      CFIndex v2 = 1;
      if (!a2) {
        return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
    }
    else
    {
      CFIndex v2 = 0;
      if (!a2) {
        return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      }
    }
    values[v2] = (void *)a2;
    keys[v2++] = @"dpInfo";
    return CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)values, v2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  }
  return 0;
}

CFDictionaryRef FigFairPlayCopySinfExtensionsFromFormatDescription(const opaqueCMFormatDescription *a1)
{
  CFURLRef v1 = a1;
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  CFDictionaryRef Extension = (const __CFDictionary *)CMFormatDescriptionGetExtension(a1, (CFStringRef)*MEMORY[0x1E4F1EE20]);
  if (!Extension) {
    goto LABEL_33;
  }
  CFDictionaryRef v3 = Extension;
  CFTypeID v4 = CFGetTypeID(Extension);
  if (v4 != CFDictionaryGetTypeID()) {
    goto LABEL_33;
  }
  uint64_t v37 = v1;
  keys = 0;
  values[0] = 0;
  values[1] = 0;
  uint64_t v39 = 0;
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(v3, @"sinf");
  if (!Value) {
    goto LABEL_6;
  }
  CFDataRef v6 = Value;
  CFTypeID v7 = CFGetTypeID(Value);
  if (v7 == CFDataGetTypeID())
  {
    CFIndex v8 = CFDataGetLength(v6) + 8;
    CFMutableDictionaryRef Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v8);
    CFDataIncreaseLength(Mutable, v8);
    MutableBytePtr = CFDataGetMutableBytePtr(Mutable);
    *(_DWORD *)MutableBytePtr = bswap32(v8);
    *((_DWORD *)MutableBytePtr + 1) = 1718511987;
    unsigned int v11 = MutableBytePtr + 8;
    BytePtr = CFDataGetBytePtr(v6);
    size_t Length = CFDataGetLength(v6);
    memcpy(v11, BytePtr, Length);
    keys = @"sinf";
    values[0] = Mutable;
    int v36 = 1;
    CFIndex v14 = 1;
  }
  else
  {
LABEL_6:
    int v36 = 0;
    CFIndex v14 = 0;
  }
  uint64_t v15 = 0;
  char v16 = 1;
  do
  {
    char v17 = v16;
    uint64_t v18 = (const void *)*((void *)&off_1E57A1048 + v15);
    CFDataRef v19 = (const __CFData *)CFDictionaryGetValue(v3, v18);
    if (v19)
    {
      CFDataRef v20 = v19;
      CFTypeID v21 = CFGetTypeID(v19);
      if (v21 == CFDataGetTypeID() && (unint64_t)CFDataGetLength(v20) >= 0x10)
      {
        uint64_t v22 = CFDataGetBytePtr(v20);
        if (*(void *)v22 == 0xA7458277191E8547 && *((void *)v22 + 1) == 0x65FB4846FF1A9E8FLL)
        {
          CFIndex v26 = CFDataGetLength(v20) + 8;
          CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
          long long v27 = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v26);
          CFDataIncreaseLength(v27, v26);
          long long v28 = CFDataGetMutableBytePtr(v27);
          *(_DWORD *)long long v28 = bswap32(v26);
          *((_DWORD *)v28 + 1) = bswap32(*(_DWORD *)&aDiuudiuufnisih[4 * v15]);
          long long v29 = v28 + 8;
          long long v30 = CFDataGetBytePtr(v20);
          size_t v31 = CFDataGetLength(v20);
          memcpy(v29, v30, v31);
          *(&keys + v14) = (void *)CFRetain(v18);
          values[v14++] = v27;
          goto LABEL_20;
        }
      }
    }
    char v16 = 0;
    uint64_t v15 = 1;
  }
  while ((v17 & 1) != 0);
  if (!v36)
  {
    CFDictionaryRef v25 = 0;
    CFURLRef v1 = v37;
    goto LABEL_21;
  }
  CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
LABEL_20:
  CFURLRef v1 = v37;
  CFDictionaryRef v25 = CFDictionaryCreate(v24, (const void **)&keys, (const void **)values, v14, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
LABEL_21:
  if (v14 >= 1)
  {
    do
    {
      CFTypeRef v32 = values[v14 - 1];
      if (v32) {
        CFRelease(v32);
      }
    }
    while ((unint64_t)v14-- > 1);
  }
  if (!v25)
  {
LABEL_33:
    if (CMFormatDescriptionGetMediaType(v1) == 1936684398
      && (values[0] = 0,
          (MagicCookie = (const UInt8 *)CMAudioFormatDescriptionGetMagicCookie(v1, (size_t *)values)) != 0))
    {
      return FigFairPlayCopySinfExtensionsFromAtomContainer(MagicCookie);
    }
    else
    {
      return 0;
    }
  }
  return v25;
}

CFDictionaryRef FigFairPlayCopySinfExtensionsFromAtomContainer(const UInt8 *a1)
{
  values[2] = *(void **)MEMORY[0x1E4F143B8];
  values[0] = 0;
  values[1] = 0;
  keys = 0;
  uint64_t v9 = 0;
  CFDictionaryRef v2 = 0;
  if (!FigAtomStreamInitWithMemoryBlock())
  {
    if (FigAtomStreamPositionAtFirstAtomWithType()
      || FigAtomStreamGetCurrentAtomGlobalOffset())
    {
      int v3 = 0;
    }
    else
    {
      keys = @"sinf";
      values[0] = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], a1, 0);
      int v3 = 1;
    }
    if (!FigAtomStreamPositionAtFirstAtomWithType()) {
      FigAtomStreamGetCurrentAtomGlobalOffset();
    }
    if (!FigAtomStreamPositionAtFirstAtomWithType()) {
      FigAtomStreamGetCurrentAtomUUIDType();
    }
    if (v3)
    {
      unint64_t v4 = 1;
      CFDictionaryRef v2 = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)&keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      do
      {
        CFArrayRef v5 = values[v4 - 1];
        if (v5) {
          CFRelease(v5);
        }
      }
      while (v4-- > 1);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

const void *FigFairPlayGetBestSinfFromSinfExtensions(const __CFDictionary *a1)
{
  if (CFDictionaryContainsKey(a1, @"UUID")) {
    CFDictionaryRef v2 = @"UUID";
  }
  else {
    CFDictionaryRef v2 = @"uuid";
  }
  CFURLRef result = CFDictionaryGetValue(a1, v2);
  if (!result)
  {
    CFURLRef result = CFDictionaryGetValue(a1, @"sinf");
    if (!result)
    {
      CFURLRef result = CFDictionaryGetValue(a1, @"pinf");
      if (!result)
      {
        return CFDictionaryGetValue(a1, @"dpInfo");
      }
    }
  }
  return result;
}

const void *FigFairPlayGetExtendedSinfFromSinfExtensions(const __CFDictionary *a1)
{
  if (CFDictionaryContainsKey(a1, @"UUID")) {
    CFDictionaryRef v2 = @"UUID";
  }
  else {
    CFDictionaryRef v2 = @"uuid";
  }

  return CFDictionaryGetValue(a1, v2);
}

const void *FigFairPlayGetLegacySinfFromSinfExtensions(const __CFDictionary *a1)
{
  return CFDictionaryGetValue(a1, @"sinf");
}

const void *FigFairPlayGetDPInfoFromSinfExtensions(const __CFDictionary *a1)
{
  return CFDictionaryGetValue(a1, @"dpInfo");
}

uint64_t FigFairPlayGetSkipParametersFromSinf(const __CFDictionary *a1, _DWORD *a2)
{
  BestSinfFromSinfCFDictionaryRef Extensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (BestSinfFromSinfExtensions)
  {
    CFDataRef v4 = BestSinfFromSinfExtensions;
    uint64_t v18 = 0;
    BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
    CFIndex Length = CFDataGetLength(v4);
    hZZRqgZwI((uint64_t)BytePtr, Length, 19, (uint64_t)&v18);
    uint64_t result = FAIRPLAY_CALL_LOG(v7);
    if (result)
    {
      int v9 = 0;
LABEL_7:
      int v10 = 0;
      goto LABEL_8;
    }
    int v9 = v18;
    CFNumberRef v12 = CFDataGetBytePtr(v4);
    CFIndex v13 = CFDataGetLength(v4);
    hZZRqgZwI((uint64_t)v12, v13, 20, (uint64_t)&v18);
    uint64_t result = FAIRPLAY_CALL_LOG(v14);
    if (result) {
      goto LABEL_7;
    }
    int v10 = v18;
    uint64_t v15 = CFDataGetBytePtr(v4);
    CFIndex v16 = CFDataGetLength(v4);
    hZZRqgZwI((uint64_t)v15, v16, 21, (uint64_t)&v18);
    uint64_t result = FAIRPLAY_CALL_LOG(v17);
    if (result)
    {
LABEL_8:
      int v11 = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_9;
    }
    int v11 = v18;
    if (!a2) {
      return result;
    }
  }
  else
  {
    int v9 = 0;
    int v10 = 0;
    int v11 = 0;
    uint64_t result = 4294955146;
    if (!a2) {
      return result;
    }
  }
LABEL_9:
  *a2 = v9;
  a2[1] = v10;
  a2[2] = v11;
  return result;
}

uint64_t FigFairPlayGetMediaKindFromSinf(const __CFDictionary *a1, uint64_t *a2)
{
  uint64_t v13 = 0;
  BestSinfFromSinfCFDictionaryRef Extensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (!BestSinfFromSinfExtensions)
  {
    uint64_t v12 = 0;
    uint64_t result = 4294955146;
    if (!a2) {
      return result;
    }
    goto LABEL_9;
  }
  CFDataRef v4 = BestSinfFromSinfExtensions;
  BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
  CFIndex Length = CFDataGetLength(v4);
  hZZRqgZwI((uint64_t)BytePtr, Length, 11, (uint64_t)&v13);
  LODWORD(result) = FAIRPLAY_CALL_LOG(v7);
  BOOL v9 = result == 0;
  BOOL v10 = v13 == 0;
  BOOL v11 = !v9 || !v10;
  if (v9 && v10) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = v13;
  }
  if (v11) {
    uint64_t result = result;
  }
  else {
    uint64_t result = 0;
  }
  if (a2) {
LABEL_9:
  }
    *a2 = v12;
  return result;
}

uint64_t FigFairPlayGetSchemeFromSinf(const __CFDictionary *a1, unsigned int *a2)
{
  v16[1] = *MEMORY[0x1E4F143B8];
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, @"sinf");
  if (Value)
  {
    CFDataRef v5 = Value;
    uint64_t v15 = 0;
    v16[0] = 0x7363686D73696E66;
    uint64_t v14 = 0;
    BytePtr = CFDataGetBytePtr(Value);
    CFIndex Length = CFDataGetLength(v5);
    uint64_t result = FigFairPlayGetSinfChildDataWithPath((uint64_t)BytePtr, Length, (uint64_t)v16, 2, &v15, &v14);
    if (result)
    {
      unsigned int v9 = 0;
      if (!a2) {
        return result;
      }
      goto LABEL_20;
    }
    if (v14 != 12)
    {
      unsigned int v9 = 0;
      uint64_t result = 4294925279;
      if (!a2) {
        return result;
      }
      goto LABEL_20;
    }
    uint64_t result = 0;
    unsigned int v9 = bswap32(*(_DWORD *)(v15 + 4));
    if (a2) {
LABEL_20:
    }
      *a2 = v9;
  }
  else
  {
    if (CFDictionaryContainsKey(a1, @"UUID")) {
      BOOL v10 = @"UUID";
    }
    else {
      BOOL v10 = @"uuid";
    }
    CFDataRef v11 = (const __CFData *)CFDictionaryGetValue(a1, v10);
    if (v11 && (CFDataRef v12 = v11, (unint64_t)CFDataGetLength(v11) >= 0x18))
    {
      uint64_t v13 = CFDataGetBytePtr(v12);
      if (*((void *)v13 + 1) ^ 0xA7458277191E8547 | *((void *)v13 + 2) ^ 0x65FB4846FF1A9E8FLL) {
        unsigned int v9 = 0;
      }
      else {
        unsigned int v9 = 1769239918;
      }
    }
    else
    {
      unsigned int v9 = 0;
    }
    uint64_t result = 4294955146;
    if (a2) {
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t FigFairPlayGetSinfChildDataWithPath(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t result = 4294955146;
  if (a1)
  {
    if (a3)
    {
      uint64_t result = FigAtomStreamInitWithMemoryBlock();
      if (!result)
      {
        uint64_t result = FigAtomStreamPositionViaAtomPath();
        if (!result)
        {
          uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
          if (!result)
          {
            uint64_t result = FigAtomStreamGetCurrentAtomDataGlobalOffset();
            if (!result)
            {
              if (a5) {
                *a5 = a1;
              }
              uint64_t result = 0;
              if (a6) {
                *a6 = 0;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t FigFairPlayIsRentalSinf(const __CFDictionary *a1, BOOL *a2)
{
  uint64_t v9 = 1;
  BestSinfFromSinfCFDictionaryRef Extensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (BestSinfFromSinfExtensions)
  {
    CFDataRef v4 = BestSinfFromSinfExtensions;
    BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
    CFIndex Length = CFDataGetLength(v4);
    hZZRqgZwI((uint64_t)BytePtr, Length, 14, (uint64_t)&v9);
    uint64_t result = FAIRPLAY_CALL_LOG(v7);
    if (!a2) {
      return result;
    }
  }
  else
  {
    uint64_t result = 4294955146;
    if (!a2) {
      return result;
    }
  }
  *a2 = v9 != 0;
  return result;
}

uint64_t FigFairPlayIsHDCPRequiredSinf(const __CFDictionary *a1, BOOL *a2)
{
  uint64_t v13 = 4;
  uint64_t v12 = 0x40000000;
  BestSinfFromSinfCFDictionaryRef Extensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (BestSinfFromSinfExtensions)
  {
    CFDataRef v4 = BestSinfFromSinfExtensions;
    BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
    CFIndex Length = CFDataGetLength(v4);
    hZZRqgZwI((uint64_t)BytePtr, Length, 15, (uint64_t)&v13);
    uint64_t result = FAIRPLAY_CALL_LOG(v7);
    if (!result)
    {
      uint64_t v9 = CFDataGetBytePtr(v4);
      CFIndex v10 = CFDataGetLength(v4);
      hZZRqgZwI((uint64_t)v9, v10, 12, (uint64_t)&v12);
      uint64_t result = FAIRPLAY_CALL_LOG(v11);
    }
  }
  else
  {
    uint64_t result = 4294955146;
  }
  if (a2) {
    *a2 = v12 != 0;
  }
  return result;
}

uint64_t FigFairPlayIsLowValueSinf(const __CFDictionary *a1, BOOL *a2)
{
  uint64_t v9 = 0;
  BestSinfFromSinfCFDictionaryRef Extensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (BestSinfFromSinfExtensions)
  {
    CFDataRef v4 = BestSinfFromSinfExtensions;
    BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
    CFIndex Length = CFDataGetLength(v4);
    hZZRqgZwI((uint64_t)BytePtr, Length, 16, (uint64_t)&v9);
    uint64_t result = FAIRPLAY_CALL_LOG(v7);
    if (!a2) {
      return result;
    }
  }
  else
  {
    uint64_t result = 4294955146;
    if (!a2) {
      return result;
    }
  }
  *a2 = v9 != 0;
  return result;
}

uint64_t FigFairPlayIsSkipEncrypted(const __CFDictionary *a1, BOOL *a2)
{
  uint64_t v9 = 0;
  BestSinfFromSinfCFDictionaryRef Extensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (!BestSinfFromSinfExtensions) {
    return 4294955146;
  }
  CFDataRef v4 = BestSinfFromSinfExtensions;
  BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
  CFIndex Length = CFDataGetLength(v4);
  hZZRqgZwI((uint64_t)BytePtr, Length, 13, (uint64_t)&v9);
  uint64_t result = FAIRPLAY_CALL_LOG(v7);
  if (a2)
  {
    if (!result) {
      *a2 = v9 == 3;
    }
  }
  return result;
}

uint64_t FigFairPlayIsPreviewEncrypted(const __CFDictionary *a1, BOOL *a2)
{
  uint64_t v9 = 0;
  BestSinfFromSinfCFDictionaryRef Extensions = (const __CFData *)FigFairPlayGetBestSinfFromSinfExtensions(a1);
  if (!BestSinfFromSinfExtensions) {
    return 4294955146;
  }
  CFDataRef v4 = BestSinfFromSinfExtensions;
  BytePtr = CFDataGetBytePtr(BestSinfFromSinfExtensions);
  CFIndex Length = CFDataGetLength(v4);
  hZZRqgZwI((uint64_t)BytePtr, Length, 1, (uint64_t)&v9);
  uint64_t result = FAIRPLAY_CALL_LOG(v7);
  if (a2)
  {
    if (!result) {
      *a2 = v9 == 0;
    }
  }
  return result;
}

uint64_t FigFairPlayIsPlaceholder(const __CFDictionary *a1, BOOL *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = *(void *)"fnisihcsresu";
  int v10 = 1970496882;
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(a1, @"sinf");
  if (!Value)
  {
    BOOL v7 = 0;
    if (!a2) {
      return 0;
    }
    goto LABEL_3;
  }
  CFDataRef v4 = Value;
  BytePtr = CFDataGetBytePtr(Value);
  CFIndex Length = CFDataGetLength(v4);
  BOOL v7 = FigFairPlayGetSinfChildDataWithPath((uint64_t)BytePtr, Length, (uint64_t)&v9, 3, 0, 0) != 0;
  if (a2) {
LABEL_3:
  }
    *a2 = v7;
  return 0;
}

uint64_t FigFairPlayGetSinfExtensionType(const __CFDictionary *a1, int *a2)
{
  if (!a1) {
    return 4294955146;
  }
  if (!a2) {
    return 0;
  }
  if (CFDictionaryContainsKey(a1, @"sinf")
    || CFDictionaryContainsKey(a1, @"UUID")
    || CFDictionaryContainsKey(a1, @"uuid"))
  {
    int v4 = 1;
  }
  else
  {
    int v4 = 2 * (CFDictionaryContainsKey(a1, @"dpInfo") != 0);
  }
  uint64_t result = 0;
  *a2 = v4;
  return result;
}

uint64_t FigFairPlayGetMaximumReEncryptionPaddingByteCount(uint64_t a1, void *a2)
{
  *a2 = 0;
  return 0;
}

CFTypeRef FigFairPlayCopyDisposeStorageAllocator()
{
  MEMORY[0x19970EE10](&sFairPlayDisposeStorageAllocatorContextOnce, FigFairPlayInitFairPlayDisposeStorageAllocatorContext);
  CFTypeRef result = (CFTypeRef)sFairPlayDisposeStorageAllocator;
  if (sFairPlayDisposeStorageAllocator)
  {
    return CFRetain(result);
  }
  return result;
}

CFAllocatorRef FigFairPlayInitFairPlayDisposeStorageAllocatorContext()
{
  v1.reallocate = 0;
  memset(&v1, 0, 40);
  v1.allocate = (CFAllocatorAllocateCallBack)FigFairPlayDisposeStorageAllocatorAllocateCallback;
  v1.deallocate = (CFAllocatorDeallocateCallBack)FigFairPlayDisposeStorageAllocatorDeallocateCallback;
  v1.preferredSize = 0;
  CFAllocatorRef result = CFAllocatorCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], &v1);
  sFairPlayDisposeStorageAllocator = (uint64_t)result;
  return result;
}

uint64_t FigCFKBCryptRefRegisterClass(uint64_t *a1)
{
  uint64_t result = _CFRuntimeRegisterClass();
  *a1 = result;
  return result;
}

uint64_t FigCFKBCryptRefCreate(uint64_t a1, uint64_t a2)
{
  if (FigCFKBCryptRefGetTypeID_once != -1) {
    dispatch_once_f(&FigCFKBCryptRefGetTypeID_once, &FigCFKBCryptRefGetTypeID_typeID, (dispatch_function_t)FigCFKBCryptRefRegisterClass);
  }
  uint64_t result = _CFRuntimeCreateInstance();
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t FigFairPlayDisposeStorageAllocatorAllocateCallback()
{
  return 0;
}

uint64_t FigFairPlayDisposeStorageAllocatorDeallocateCallback(uint64_t a1)
{
  jEHf8Xzsv8K(a1);

  return FAIRPLAY_CALL_LOG(v1);
}

uint64_t FigCFKBCryptRefInit(uint64_t result)
{
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t FigCFKBCryptRefFinalize(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    uint64_t v2 = Hz73b(result);
    return FAIRPLAY_CALL_LOG(v2);
  }
  return result;
}

uint64_t FigAssetCacheInspectorStartServer()
{
  if (FigServer_IsMediaparserd()) {
    return FigSignalErrorAt();
  }
  FigServer_IsMediaplaybackd();
  return FigXPCServerStart();
}

uint64_t assetCacheInspectorServer_handleRemoteMessage(uint64_t a1, void *a2)
{
  OpCFIndex Code = FigXPCMessageGetOpCode();
  if (OpCode) {
    return OpCode;
  }
  xpc_dictionary_get_uint64(a2, (const char *)*MEMORY[0x1E4F20280]);
  uint64_t value = 0;
  uint64_t v4 = FigXPCServerLookupAndRetainAssociatedObject();
  if (!v4) {
    uint64_t v4 = FigSignalErrorAt();
  }
  uint64_t v6 = v4;
  if (!v4) {
    return 4294950034;
  }
  return v6;
}

void FreeAVITrackArray(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 64);
    if (v2)
    {
      if (*(uint64_t *)(a1 + 48) >= 1)
      {
        uint64_t v3 = 0;
        uint64_t v4 = 0;
        do
        {
          TearDownPerTrackInfo(*(void *)(a1 + 64) + v3);
          ++v4;
          v3 += 108;
        }
        while (v4 < *(void *)(a1 + 48));
        uint64_t v2 = *(void **)(a1 + 64);
      }
      free(v2);
      *(void *)(a1 + 64) = 0;
      *(void *)(a1 + 48) = 0;
    }
  }
}

void TearDownPerTrackInfo(uint64_t a1)
{
  if (a1)
  {
    FigFormatDescriptionRelease();
    *(void *)(a1 + 8) = 0;
    free(*(void **)(a1 + 100));
    *(void *)(a1 + 100) = 0;
    *(void *)(a1 + 92) = 0;
  }
}

uint64_t ParseAVIFile(uint64_t a1)
{
  memset(v3, 0, sizeof(v3));
  uint64_t v2 = a1;
  uint64_t result = RIFFAtomStreamInitWithByteStream(*(void *)(a1 + 24), 0, 1, (uint64_t)v3);
  if (!result) {
    return ProcessChildRIFFAtoms((uint64_t)v3, (uint64_t)&ParseAVIFile_atomDispatch, 1, (uint64_t)&v2);
  }
  return result;
}

uint64_t ParseMainRIFF(uint64_t a1, uint64_t a2)
{
  memset(v4, 0, sizeof(v4));
  LODWORD(result) = RIFFAtomStreamInitWithParent(a1, 0, (uint64_t)v4);
  if (!result) {
    LODWORD(result) = ProcessChildRIFFAtoms((uint64_t)v4, (uint64_t)&ParseMainRIFF_atomDispatch, 3, a2);
  }
  if (result) {
    return result;
  }
  else {
    return 1937010544;
  }
}

uint64_t ProcessChildRIFFAtoms(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v14 = 0;
  BOOL v7 = (uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  while (1)
  {
    uint64_t result = RIFFAtomStreamGetCurrentAtomTypeAndDataLength(a1, &v14, 0);
    if (result) {
      return result;
    }
    if (a3 >= 1)
    {
      uint64_t v9 = v7;
      int v10 = v7;
      uint64_t v11 = a3;
      while (1)
      {
        if (v14 == *((_DWORD *)v9 - 2))
        {
          if (v14 != 1380533830 && v14 != 1279873876) {
            break;
          }
          int v13 = 0;
          uint64_t result = RIFFAtomStreamGetCurrentAtomLISTType(a1, &v13);
          if (result) {
            return result;
          }
          if (*((_DWORD *)v9 - 1) == v13) {
            break;
          }
        }
        v10 += 2;
        v9 += 2;
        if (!--v11) {
          goto LABEL_17;
        }
      }
      uint64_t result = (*v9)(a1, a4);
      if (result == 1937010544) {
        return 0;
      }
      if (result) {
        return result;
      }
    }
LABEL_17:
    uint64_t result = RIFFAtomStreamAdvanceToNextAtom(a1);
    if (result)
    {
      if (result != -12340) {
        return result;
      }
      return 0;
    }
  }
}

uint64_t ParseHeaderList(uint64_t a1, uint64_t a2)
{
  memset(v4, 0, sizeof(v4));
  uint64_t result = RIFFAtomStreamInitWithParent(a1, 0, (uint64_t)v4);
  if (!result) {
    return ProcessChildRIFFAtoms((uint64_t)v4, (uint64_t)&ParseHeaderList_atomDispatch, 2, a2);
  }
  return result;
}

uint64_t ParseMovieList(void *a1, uint64_t a2)
{
  return RIFFAtomStreamGetCurrentAtomGlobalOffset(a1, (void *)(*(void *)a2 + 32), (void *)(*(void *)a2 + 40));
}

uint64_t Parse_idx1(uint64_t a1, uint64_t **a2)
{
  if (!(*a2)[6])
  {
    CurrentAtomTypeAndDataCFIndex Length = FigSignalErrorAt();
    goto LABEL_30;
  }
  if (!*((unsigned char *)*a2 + 108))
  {
    unint64_t v20 = 0;
    CurrentAtomTypeAndDataCFIndex Length = RIFFAtomStreamGetCurrentAtomTypeAndDataLength(a1, 0, &v20);
    if (!CurrentAtomTypeAndDataLength)
    {
      unint64_t v5 = v20;
      uint64_t v6 = (int *)(*a2)[8];
      BOOL v7 = (int *)malloc_type_malloc(0x4000uLL, 0x1000040451B5BE8uLL);
      if (v7)
      {
        if (v5 >= 0x10)
        {
          uint64_t v8 = 0;
          uint64_t v9 = v5 >> 4;
          while (1)
          {
            if (v9 >= 1024) {
              uint64_t v10 = 1024;
            }
            else {
              uint64_t v10 = v9;
            }
            Currentuint64_t AtomData = RIFFAtomStreamReadCurrentAtomData(a1, v8, 16 * v10, (uint64_t)v7);
            if (CurrentAtomData) {
              goto LABEL_32;
            }
            if (v9 >= 1) {
              break;
            }
LABEL_25:
            v8 += 16 * v10;
            v9 -= v10;
            if (!v9) {
              goto LABEL_26;
            }
          }
          uint64_t v12 = 0;
          if (v10 <= 1) {
            uint64_t v13 = 1;
          }
          else {
            uint64_t v13 = v10;
          }
          while (1)
          {
            int v14 = v7[4 * v12];
            uint64_t v15 = *a2;
            if (v14 == *v6) {
              goto LABEL_23;
            }
            uint64_t v16 = v15[6];
            if (v16 >= 1) {
              break;
            }
LABEL_24:
            if (++v12 == v13) {
              goto LABEL_25;
            }
          }
          uint64_t v17 = (int *)v15[8];
          while (*v17 != v14)
          {
            v17 += 27;
            if (!--v16) {
              goto LABEL_24;
            }
          }
          uint64_t v6 = v17;
LABEL_23:
          Currentuint64_t AtomData = AddChunkToTrack(v15[3], v7[4 * v12 + 2] + v15[4] + 16, v7[4 * v12 + 3], v7[4 * v12 + 1], v6);
          if (CurrentAtomData) {
            goto LABEL_32;
          }
          goto LABEL_24;
        }
LABEL_26:
        uint64_t v2 = 0;
      }
      else
      {
        Currentuint64_t AtomData = FigSignalErrorAt();
LABEL_32:
        uint64_t v2 = CurrentAtomData;
      }
LABEL_27:
      free(v7);
      return v2;
    }
LABEL_30:
    uint64_t v2 = CurrentAtomTypeAndDataLength;
    BOOL v7 = 0;
    goto LABEL_27;
  }
  return 0;
}

uint64_t ParseStreamList(uint64_t a1, void *a2)
{
  memset(v23, 0, sizeof(v23));
  long long v20 = 0u;
  memset(v21, 0, 28);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t result = RIFFAtomStreamInitWithParent(a1, 0, (uint64_t)v23);
  if (result) {
    return result;
  }
  v22[0] = a2;
  v22[1] = &v16;
  int v4 = ProcessChildRIFFAtoms((uint64_t)v23, (uint64_t)ParseStreamList_atomDispatch, 4, (uint64_t)v22);
  if (!v4 && !*((void *)&v16 + 1)) {
    int v4 = FigSignalErrorAt();
  }
  if (v4)
  {
    FigFormatDescriptionRelease();
    *((void *)&v16 + 1) = 0;
    free(*(void **)((char *)&v21[1] + 4));
    return 0;
  }
  unint64_t v5 = (void *)*a2;
  uint64_t v6 = v5[6];
  BOOL v7 = (char *)v5[8];
  if (v6 == v5[7])
  {
    if (v7)
    {
      uint64_t v8 = v6 + 2;
      BOOL v7 = (char *)malloc_type_realloc(v7, 108 * (v6 + 2), 0x106004053A53023uLL);
      if (v7)
      {
        v5[7] = v8;
        v5[8] = v7;
        goto LABEL_12;
      }
    }
    else
    {
      *((_OWORD *)v5 + 3) = xmmword_194998170;
      BOOL v7 = (char *)malloc_type_malloc(0xD8uLL, 0x106004053A53023uLL);
      v5[8] = v7;
      if (v7) {
        goto LABEL_12;
      }
    }
    return FigSignalErrorAt();
  }
LABEL_12:
  uint64_t v9 = &v7[108 * v5[6]];
  long long v10 = v16;
  long long v11 = v18;
  *((_OWORD *)v9 + 1) = v17;
  *((_OWORD *)v9 + 2) = v11;
  *(_OWORD *)uint64_t v9 = v10;
  long long v12 = v19;
  long long v13 = v20;
  long long v14 = v21[0];
  *(_OWORD *)(v9 + 92) = *(_OWORD *)((char *)v21 + 12);
  *((_OWORD *)v9 + 4) = v13;
  *((_OWORD *)v9 + 5) = v14;
  *((_OWORD *)v9 + 3) = v12;
  uint64_t v15 = "dc";
  if (DWORD1(v16) == 1936684398) {
    uint64_t v15 = "wb";
  }
  snprintf(__str, 5uLL, "%02d%s", v5[6], v15);
  uint64_t result = 0;
  *(_DWORD *)(v5[8] + 108 * v5[6]++) = *(_DWORD *)__str;
  return result;
}

uint64_t Parse_avih(uint64_t a1, uint64_t *a2)
{
  uint64_t v13 = 0;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  Currentuint64_t AtomData = RIFFAtomStreamReadCurrentAtomData(a1, 0, 56, (uint64_t)&v10);
  if (!CurrentAtomData)
  {
    uint64_t v4 = *a2;
    int v5 = v10;
    int v6 = HIDWORD(v10);
    *(_DWORD *)(v4 + 96) = v10;
    *(_DWORD *)(v4 + 100) = v6;
    int v7 = v11;
    *(_DWORD *)(v4 + 104) = v11;
    CMTimeMake(&v9, v7 * (uint64_t)v5, 1000000);
    *(CMTime *)(v4 + 72) = v9;
  }
  return CurrentAtomData;
}

uint64_t Parse_strh(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)CMTimeScale timescale = 0u;
  long long v12 = 0u;
  long long v10 = 0u;
  uint64_t result = RIFFAtomStreamReadCurrentAtomData(a1, 0, 48, (uint64_t)&v10);
  if (!result)
  {
    unsigned int v4 = bswap32(v10);
    if (v4 == 1986618483)
    {
      int v5 = 1986618469;
    }
    else
    {
      if (v4 != 1635083379) {
        return 4294954451;
      }
      int v5 = 1936684398;
    }
    uint64_t v6 = *(void *)(a2 + 8);
    *(_DWORD *)(v6 + 4) = v5;
    int32_t v7 = timescale[2];
    *(_DWORD *)(v6 + 84) = timescale[2];
    if (v7)
    {
      CMTimeMake(&v9, timescale[1] * (uint64_t)(int)v12, v7);
      uint64_t result = 0;
      CMTimeEpoch epoch = v9.epoch;
      *(_OWORD *)(v6 + 20) = *(_OWORD *)&v9.value;
      *(void *)(v6 + 36) = epoch;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t Parse_strf(uint64_t a1, uint64_t **a2)
{
  CMBlockBufferRef theBuffer = 0;
  uint64_t v3 = a2[1];
  uint64_t v4 = RIFFAtomStreamReadCurrentAtomDataAndCreateBBuf(a1, 0, 0, &theBuffer);
  if (v4)
  {
    uint64_t v21 = v4;
    goto LABEL_80;
  }
  int v5 = *((_DWORD *)v3 + 1);
  if (v5 != 1986618469)
  {
    if (v5 == 1936684398)
    {
      uint64_t v6 = **a2;
      *(_OWORD *)keys = 0u;
      memset(v64, 0, 24);
      memset(&outPropertyData, 0, sizeof(outPropertyData));
      *(_OWORD *)values = 0u;
      long long v61 = 0u;
      size_t lengthAtOffsetOut = 0;
      dataPointerOut = 0;
      CMBlockBufferGetDataPointer(theBuffer, 0, &lengthAtOffsetOut, 0, &dataPointerOut);
      size_t v7 = lengthAtOffsetOut;
      if (lengthAtOffsetOut > 7)
      {
        if (lengthAtOffsetOut >= 0x12
          && *(__int16 *)dataPointerOut == -2
          && *((unsigned __int16 *)dataPointerOut + 8) >= 0x16u)
        {
          if (lengthAtOffsetOut <= 0x27) {
            goto LABEL_47;
          }
          long long v8 = *(_OWORD *)dataPointerOut;
          long long v9 = *((_OWORD *)dataPointerOut + 1);
          *(void *)&v64[1] = *((void *)dataPointerOut + 4);
          *(_OWORD *)keys = v8;
          v64[0] = v9;
          int v10 = 1;
        }
        else
        {
          __memcpy_chk();
          int v10 = 0;
        }
        unsigned int v22 = HIDWORD(keys[0]);
        if (HIDWORD(keys[0]))
        {
          unsigned __int16 v23 = WORD1(keys[0]);
          if ((SWORD1(keys[0]) & 0x80000000) == 0)
          {
            if (HIDWORD(keys[0]) >= 0xFFFF0000)
            {
              unsigned int v22 = WORD2(keys[0]);
              HIDWORD(keys[0]) = WORD2(keys[0]);
            }
            if (!WORD1(keys[0]))
            {
              unsigned __int16 v23 = 1;
              WORD1(keys[0]) = 1;
            }
            int v24 = v23;
            outPropertyData.mChannelsPerFrame = v23;
            outPropertyData.mSamplefloat Rate = (double)v22;
            if ((v10 & 1) == 0)
            {
              size_t v27 = 0;
              __int16 v26 = (__int16)keys[0];
              goto LABEL_39;
            }
            if (v7 < 0x29)
            {
              BOOL v25 = *(void *)&v64[1] == 0x719B3800AA000080 && *(void *)((char *)v64 + 10) == 0x80001000000000;
              __int16 v26 = WORD4(v64[0]);
              if (!v25) {
                __int16 v26 = 0;
              }
              LOWORD(keys[0]) = v26;
              LODWORD(values[0]) = 0x10000;
              HIDWORD(values[0]) = SWORD2(v64[0]);
              LODWORD(values[1]) = 0;
              size_t v27 = 32;
LABEL_39:
              switch(v26)
              {
                case 0:
                  goto LABEL_47;
                case 1:
                case 3:
                  outPropertyData.int mFormatID = 1819304813;
                  if (v10 && WORD1(v64[0]) && SHIWORD(keys[1]) != WORD1(v64[0])) {
                    goto LABEL_47;
                  }
                  UInt32 v31 = HIWORD(keys[1]);
                  if ((HIWORD(keys[1]) & 0x8000) != 0) {
                    goto LABEL_47;
                  }
                  if (!HIWORD(keys[1]))
                  {
                    UInt32 v31 = (8 * LODWORD(keys[1]) / (v22 * v24)) & 0x7FFF;
                    goto LABEL_85;
                  }
                  if (HIWORD(keys[1]) < 9u)
                  {
                    UInt32 v31 = 8;
LABEL_85:
                    HIWORD(keys[1]) = v31;
                    goto LABEL_86;
                  }
                  if (HIWORD(keys[1]) < 0x11u)
                  {
                    UInt32 v31 = 16;
                    HIWORD(keys[1]) = 16;
                    if (v26 == 3) {
                      goto LABEL_87;
                    }
                    goto LABEL_92;
                  }
LABEL_86:
                  outPropertyData.mFormatFlags = 8;
                  if (v26 == 3)
                  {
LABEL_87:
                    AudioFormatFlags v52 = 9;
                    goto LABEL_93;
                  }
                  if (v31 == 8) {
                    goto LABEL_94;
                  }
LABEL_92:
                  AudioFormatFlags v52 = 12;
LABEL_93:
                  outPropertyData.mFormatFlags = v52;
LABEL_94:
                  outPropertyData.UInt32 mBitsPerChannel = v31;
LABEL_95:
                  CFTypeRef v32 = 0;
                  LODWORD(ioPropertyDataSize.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 40;
LABEL_96:
                  LODWORD(v40) = 0;
                  size_t v46 = 0;
                  uint64_t v47 = 0;
LABEL_97:
                  if (!AudioFormatGetProperty(0x666D7469u, v40, v47, (UInt32 *)&ioPropertyDataSize, &outPropertyData)
                    && outPropertyData.mBytesPerPacket
                    && outPropertyData.mFramesPerPacket)
                  {
                    if (v10) {
                      double v53 = values;
                    }
                    else {
                      double v53 = 0;
                    }
                    if (v46) {
                      unsigned int v54 = v32;
                    }
                    else {
                      unsigned int v54 = 0;
                    }
                    uint64_t v21 = CMAudioFormatDescriptionCreate(*(CFAllocatorRef *)(v6 + 16), &outPropertyData, v27, (const AudioChannelLayout *)v53, v46, v54, 0, (CMAudioFormatDescriptionRef *)v3 + 1);
                    *(uint64_t *)((char *)v3 + 68) = outPropertyData.mBytesPerPacket;
                    mSamplefloat Rate = (int)outPropertyData.mSampleRate;
                    *((_DWORD *)v3 + 4) = (int)outPropertyData.mSampleRate;
                    CMTimeMake(&ioPropertyDataSize, outPropertyData.mFramesPerPacket, mSampleRate);
                    *(CMTime *)((char *)v3 + 44) = ioPropertyDataSize;
                  }
                  else
                  {
LABEL_107:
                    uint64_t v21 = FigSignalErrorAt();
                  }
                  break;
                case 6:
                  AudioFormatID v48 = 1634492791;
                  goto LABEL_70;
                case 7:
                  AudioFormatID v48 = 1970037111;
LABEL_70:
                  outPropertyData.int mFormatID = v48;
                  goto LABEL_95;
                default:
                  AudioFormatID v38 = v26 | 0x6D730000;
                  outPropertyData.int mFormatID = v38;
                  if (v7 < 0x13) {
                    char v39 = 1;
                  }
                  else {
                    char v39 = v10;
                  }
                  if (v39) {
                    goto LABEL_95;
                  }
                  size_t v40 = v7 + 28;
                  uint64_t v41 = (char *)malloc_type_malloc(v7 + 28, 0x934C80BCuLL);
                  CFTypeRef v32 = v41;
                  if (!v41) {
                    goto LABEL_107;
                  }
                  *(void *)uint64_t v41 = 0x616D72660C000000;
                  unsigned int v42 = bswap32(v38);
                  size_t v44 = lengthAtOffsetOut;
                  uint64_t v43 = dataPointerOut;
                  unsigned int v45 = bswap32(lengthAtOffsetOut + 8);
                  *((_DWORD *)v41 + 2) = v42;
                  *((_DWORD *)v41 + 3) = v45;
                  *((_DWORD *)v41 + 4) = v42;
                  memcpy(v41 + 20, v43, v44);
                  *(void *)&v32[v44 + 20] = 0x8000000;
                  LODWORD(ioPropertyDataSize.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 40;
                  size_t v46 = v40;
                  uint64_t v47 = v32;
                  if (!v40) {
                    goto LABEL_96;
                  }
                  goto LABEL_97;
              }
              goto LABEL_48;
            }
          }
        }
      }
LABEL_47:
      uint64_t v21 = FigSignalErrorAt();
      CFTypeRef v32 = 0;
LABEL_48:
      free(v32);
      goto LABEL_80;
    }
LABEL_18:
    uint64_t v21 = 0;
    goto LABEL_80;
  }
  uint64_t v11 = **a2;
  long long v12 = theBuffer;
  outPropertyData.mSamplefloat Rate = 0.0;
  if (CMBlockBufferGetDataLength(theBuffer) < 0x28) {
    goto LABEL_18;
  }
  CMBlockBufferGetDataPointer(v12, 0, 0, 0, (char **)&outPropertyData);
  int32_t v13 = *(_DWORD *)(*(void *)&outPropertyData.mSampleRate + 4);
  int32_t v14 = *(_DWORD *)(*(void *)&outPropertyData.mSampleRate + 8);
  unsigned int v15 = *(_DWORD *)(*(void *)&outPropertyData.mSampleRate + 16);
  if (v15 == 1196444237)
  {
    keys[0] = *(void **)MEMORY[0x1E4F218D8];
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(*(CFAllocatorRef *)(v11 + 16), 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (!Mutable) {
      goto LABEL_51;
    }
    values[0] = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], CreateMicrosoftHuffmanTable_MJPGDHTSeg, 418, (CFAllocatorRef)*MEMORY[0x1E4F1CFA0]);
    CFDictionaryRef v17 = CFDictionaryCreate(*(CFAllocatorRef *)(v11 + 16), (const void **)keys, (const void **)values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (values[0]) {
      CFRelease(values[0]);
    }
    if (!v17) {
      goto LABEL_51;
    }
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F1EE20], v17);
    CFRelease(v17);
    SInt32 = (const void *)FigCFNumberCreateSInt32();
    if (!SInt32) {
      goto LABEL_51;
    }
    long long v19 = SInt32;
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F24AF8], SInt32);
    CFRelease(v19);
    CMVideoCodecType v20 = 1684890161;
  }
  else
  {
    CFMutableDictionaryRef Mutable = 0;
    CMVideoCodecType v20 = bswap32(v15);
  }
  int v28 = *(_DWORD *)(v11 + 96);
  if ((v28 - 33366) < 2)
  {
    int32_t v29 = 2997;
    int64_t v30 = 100;
LABEL_76:
    uint64_t v21 = CMVideoFormatDescriptionCreate(*(CFAllocatorRef *)(v11 + 16), v20, v13, v14, Mutable, (CMVideoFormatDescriptionRef *)v3 + 1);
    if (!v21)
    {
      CMTimeMake((CMTime *)keys, v30, v29);
      *(_OWORD *)((char *)v3 + 44) = *(_OWORD *)keys;
      *(uint64_t *)((char *)v3 + 60) = *(void *)&v64[0];
      *((_DWORD *)v3 + 4) = v29;
      *((_DWORD *)v3 + 19) = v13;
      *((_DWORD *)v3 + 20) = v14;
    }
    goto LABEL_78;
  }
  if ((v28 - 66666) < 2)
  {
    int32_t v29 = 600;
    int64_t v30 = 40;
    goto LABEL_76;
  }
  if (v28)
  {
    int v33 = 1000000 / v28;
    int v34 = *((_DWORD *)v3 + 21);
    BOOL v35 = 1000000 / v28 < 500 || v34 == v33;
    int v36 = 1000000 / v34;
    if (v35 || v36 < 1)
    {
      unsigned int v49 = 1000000 % v28;
    }
    else
    {
      *(_DWORD *)(v11 + 96) = v36;
      unsigned int v49 = 0xF4240u % v36;
      int v28 = 1000000 / v34;
      int v33 = v34;
    }
    if (v49 <= 0x63 && 600 / v33 * v33 == 600)
    {
      int64_t v30 = 600 / v33;
      int32_t v29 = 600;
    }
    else
    {
      double v50 = (float)((float)v28 * (float)*(int *)(v11 + 104)) / 2147483650.0;
      if (v50 < 1.0) {
        double v50 = 1.0;
      }
      int64_t v30 = (uint64_t)((double)v28 / v50);
      int32_t v29 = (int)(1000000.0 / v50);
    }
    goto LABEL_76;
  }
LABEL_51:
  uint64_t v21 = FigSignalErrorAt();
LABEL_78:
  if (Mutable) {
    CFRelease(Mutable);
  }
LABEL_80:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v21;
}

uint64_t Parse_strn(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t BBuf = RIFFAtomStreamReadCurrentAtomDataAndCreateBBuf(a1, 0, 0, (CMBlockBufferRef *)&cf);
  if (cf) {
    CFRelease(cf);
  }
  return BBuf;
}

uint64_t Parse_indx(uint64_t a1, int **a2)
{
  dataPointerOut = 0;
  CMBlockBufferRef theBuffer = 0;
  size_t v24 = 0;
  CurrentAtomTypeAndDataCFIndex Length = RIFFAtomStreamGetCurrentAtomTypeAndDataLength(a1, 0, 0);
  if (CurrentAtomTypeAndDataLength) {
    goto LABEL_9;
  }
  CurrentAtomTypeAndDataCFIndex Length = RIFFAtomStreamReadCurrentAtomDataAndCreateBBuf(a1, 0, 0, &theBuffer);
  if (CurrentAtomTypeAndDataLength) {
    goto LABEL_9;
  }
  CMBlockBufferGetDataPointer(theBuffer, 0, &v24, 0, &dataPointerOut);
  unint64_t v5 = v24 - 24;
  if (v24 < 0x18
    || (uint64_t v6 = dataPointerOut, dataPointerOut[3] == 1)
    || dataPointerOut[3]
    || (*(unsigned char *)(*(void *)*a2 + 108) = 1, *(_WORD *)v6 != 4)
    || v6[2]
    || (uint64_t v9 = *((int *)v6 + 1), !v9)
    || v5 <= 16 * v9)
  {
    CurrentAtomTypeAndDataCFIndex Length = FigSignalErrorAt();
LABEL_9:
    uint64_t v7 = CurrentAtomTypeAndDataLength;
    goto LABEL_10;
  }
  if ((int)v9 >= 1)
  {
    uint64_t v10 = 0;
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    while (1)
    {
      long long v12 = &dataPointerOut[16 * v10];
      uint64_t v13 = *((void *)v12 + 3);
      uint64_t v14 = *((unsigned int *)v12 + 8);
      int v28 = 0;
      CMBlockBufferRef sourceBuffer = 0;
      uint64_t v27 = 0;
      if (v14 < 0x18) {
        goto LABEL_31;
      }
      uint64_t v15 = *(void *)(*(void *)*a2 + 24);
      uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v16) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      long long v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, CMBlockBufferRef *, uint64_t *))(v17 + 32);
      if (!v18)
      {
        uint64_t v7 = 4294954514;
        goto LABEL_34;
      }
      uint64_t DataPointer = v18(v15, v14, v13, &sourceBuffer, &v27);
      if (!DataPointer) {
        break;
      }
LABEL_32:
      uint64_t v7 = DataPointer;
LABEL_34:
      if (sourceBuffer) {
        CFRelease(sourceBuffer);
      }
      if (!v7 && ++v10 != v9) {
        continue;
      }
      goto LABEL_10;
    }
    if (v27 == v14)
    {
      if (!CMBlockBufferIsRangeContiguous(sourceBuffer, 0, 0))
      {
        uint64_t v21 = sourceBuffer;
        CMBlockBufferRef sourceBuffer = 0;
        uint64_t v7 = CMBlockBufferCreateContiguous(v11, v21, v11, 0, 0, 0, 0, &sourceBuffer);
        if (v21) {
          CFRelease(v21);
        }
        if (v7) {
          goto LABEL_34;
        }
      }
      uint64_t DataPointer = CMBlockBufferGetDataPointer(sourceBuffer, 8uLL, 0, 0, &v28);
      if (DataPointer) {
        goto LABEL_32;
      }
      if (*(_WORD *)v28 == 2 && !v28[2] && v28[3] == 1)
      {
        uint64_t v20 = *((int *)v28 + 1);
        if (v20)
        {
          if (v14 - 24 >= (unint64_t)(8 * v20))
          {
            if ((int)v20 < 1)
            {
              uint64_t v7 = 0;
            }
            else
            {
              uint64_t v22 = 0;
              uint64_t v23 = *(void *)(v28 + 12);
              do
              {
                uint64_t v7 = AddChunkToTrack(*(void *)(*(void *)*a2 + 24), v23 + *(int *)&v28[v22 + 24], *(_DWORD *)&v28[v22 + 28], 16, a2[1]);
                if (v7) {
                  break;
                }
                v22 += 8;
                --v20;
              }
              while (v20);
            }
            goto LABEL_34;
          }
        }
      }
    }
LABEL_31:
    uint64_t DataPointer = FigSignalErrorAt();
    goto LABEL_32;
  }
  uint64_t v7 = 0;
LABEL_10:
  if (theBuffer) {
    CFRelease(theBuffer);
  }
  return v7;
}

uint64_t AddChunkToTrack(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int *a5)
{
  if ((a3 & 0x80000000) == 0)
  {
    unsigned int v7 = a3;
    uint64_t v10 = a5[23];
    if (v10 != a5[24]) {
      goto LABEL_6;
    }
    CFAllocatorRef v11 = *(void **)(a5 + 25);
    if (v11)
    {
      int v12 = v10 + 0x2000;
      uint64_t v13 = malloc_type_realloc(v11, 24 * (v10 + 0x2000), 0x1000040504FFAC1uLL);
      if (v13)
      {
        a5[24] = v12;
        *(void *)(a5 + 25) = v13;
LABEL_6:
        if (v7)
        {
LABEL_7:
          int v14 = a5[23];
          uint64_t v15 = *(void *)(a5 + 25) + 24 * v14;
          *(_DWORD *)(v15 + 16) = a4;
          *(void *)uint64_t v15 = a2;
          *(void *)(v15 + 8) = v7;
          int v16 = a5[22];
          *(_DWORD *)(v15 + 20) = v16;
          goto LABEL_8;
        }
LABEL_15:
        if (a5[1] != 1986618469 || a5[23] < 1) {
          return FigSignalErrorAt();
        }
        int v21 = *a5;
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v23 = v22 ? v22 : 0;
        size_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(v23 + 8);
        if (!v24) {
          return FigSignalErrorAt();
        }
        if (v24(a1, 8, a2 - 8, &v30, &v29)) {
          return FigSignalErrorAt();
        }
        if (v29 != 8) {
          return FigSignalErrorAt();
        }
        if (v30 != v21) {
          return FigSignalErrorAt();
        }
        uint64_t v25 = *(void *)(a5 + 25);
        int v14 = a5[23];
        __int16 v26 = (long long *)(v25 + 24 * (v14 - 1));
        uint64_t v27 = v25 + 24 * v14;
        *(_DWORD *)(v27 + 16) = *((_DWORD *)v26 + 4);
        long long v28 = *v26;
        *(_OWORD *)uint64_t v27 = *v26;
        int v16 = a5[22];
        *(_DWORD *)(v27 + 20) = v16;
        unsigned int v7 = DWORD2(v28);
        if (!DWORD2(v28)) {
          return FigSignalErrorAt();
        }
LABEL_8:
        a5[23] = v14 + 1;
        unint64_t v17 = *(void *)(a5 + 17);
        if (v17)
        {
          int64_t v18 = (int)v7 / v17;
          if (v18 <= 0) {
            return FigSignalErrorAt();
          }
        }
        else
        {
          LODWORD(v18) = 1;
        }
        uint64_t result = 0;
        a5[22] = v16 + v18;
        return result;
      }
    }
    else
    {
      uint64_t v20 = malloc_type_malloc(0x60000uLL, 0x1000040504FFAC1uLL);
      *(void *)(a5 + 25) = v20;
      if (v20)
      {
        *(void *)(a5 + 23) = 0x400000000000;
        if (v7) {
          goto LABEL_7;
        }
        goto LABEL_15;
      }
    }
  }

  return FigSignalErrorAt();
}

uint64_t AVIFormatReaderCreateFromStream(const void *a1, const __CFAllocator *a2, void *a3)
{
  FigFormatReaderGetClassID();
  uint64_t v6 = CMDerivedObjectCreate();
  if (v6) {
    return v6;
  }
  uint64_t DerivedStorage = (void *)CMBaseObjectGetDerivedStorage();
  if (sRegisterAVIFileInfoTypeOnce != -1) {
    dispatch_once_f(&sRegisterAVIFileInfoTypeOnce, 0, (dispatch_function_t)RegisterAVIFileInfoType);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  if (!Instance) {
    return FigSignalErrorAt();
  }
  uint64_t v9 = Instance;
  *(void *)(Instance + 24) = CFRetain(a1);
  CFAllocatorRef Default = a2;
  if (!a2) {
    CFAllocatorRef Default = CFAllocatorGetDefault();
  }
  *(void *)(v9 + 16) = CFRetain(Default);
  void *DerivedStorage = v9;
  uint64_t v6 = ParseAVIFile(v9);
  if (v6) {
    return v6;
  }
  CFIndex v11 = *(void *)(*DerivedStorage + 48);
  if (v11)
  {
    DerivedStorage[1] = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], v11, MEMORY[0x1E4F1D510]);
    int v12 = (const void *)*DerivedStorage;
    if (*(uint64_t *)(*DerivedStorage + 48) >= 1)
    {
      uint64_t v13 = 0;
      do
      {
        FigTrackReaderGetClassID();
        if (!CMDerivedObjectCreate())
        {
          uint64_t v14 = CMBaseObjectGetDerivedStorage();
          *(void *)uint64_t v14 = CFRetain(v12);
          *(_DWORD *)(v14 + 8) = v13;
        }
        ++v13;
        int v12 = (const void *)*DerivedStorage;
      }
      while (v13 < *(void *)(*DerivedStorage + 48));
    }
  }
  uint64_t v15 = 0;
  *a3 = 0;
  return v15;
}

uint64_t AVIFormatReaderConvertCodecElementsToMediaSubType(int a1, char *__s1, uint64_t a3, _DWORD *a4, int *a5, int *a6)
{
  if (a3)
  {
    if (a6)
    {
      uint64_t result = 0;
      int v7 = 8;
LABEL_4:
      *a6 = v7;
      return result;
    }
    return 0;
  }
  if (!__s1)
  {
    if (a6)
    {
      uint64_t result = 0;
      int v7 = 4;
      goto LABEL_4;
    }
    return 0;
  }
  if (!a1) {
    return FigAudioFormatReaderConvertCodecElementsToMediaSubType(1463899717, a1, __s1, 0, a4, a5, a6);
  }
  if (a1 != 1296715847)
  {
    if (*__s1 - 51 < 0xFFFFFFFD) {
      return 0;
    }
    return FigAudioFormatReaderConvertCodecElementsToMediaSubType(1463899717, a1, __s1, 0, a4, a5, a6);
  }
  if (a4) {
    *a4 = 1986618469;
  }
  if (a5) {
    *a5 = 1684890161;
  }
  if (a6) {
    *a6 = 0;
  }
  return 1;
}

void AVIFormatReaderFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  uint64_t v1 = *(const void **)(DerivedStorage + 8);
  if (v1)
  {
    CFRelease(v1);
    *(void *)(DerivedStorage + 8) = 0;
  }
}

__CFString *AVIFormatReaderCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  unint64_t v5 = *(const void **)(*(void *)DerivedStorage + 24);
  if (v5)
  {
    CFStringRef v6 = CFCopyDescription(v5);
    CFStringAppendFormat(Mutable, 0, @"\tAVI FormatReader: stream<%@> trackCount<%d>", v6, *(void *)(*(void *)DerivedStorage + 48));
    if (v6) {
      CFRelease(v6);
    }
  }
  else
  {
    CFStringAppendFormat(Mutable, 0, @"\tAVI FormatReader: stream<%@> trackCount<%d>", 0, *(void *)(*(void *)DerivedStorage + 48));
  }
  return Mutable;
}

uint64_t AVIFormatReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a4 && a2)
  {
    uint64_t v8 = DerivedStorage;
    *a4 = 0;
    if (CFEqual(a2, @"Duration") || CFEqual(a2, @"NominalDuration"))
    {
      CMTime v13 = *(CMTime *)(*(void *)v8 + 72);
      IdentityMatrixCFArradouble y = CMTimeCopyAsDictionary(&v13, a3);
    }
    else
    {
      if (CFEqual(a2, @"Identifier"))
      {
        int v12 = (CFTypeRef *)kFigFormatReaderIdentifier_AVI;
      }
      else
      {
        if (!CFEqual(a2, @"AccurateDurationIsKnown") && !CFEqual(a2, @"SampleCursorTimeAccuracyIsExact"))
        {
          if (CFEqual(a2, @"PreferredRate") || CFEqual(a2, @"PreferredVolume"))
          {
            LODWORD(v13.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 1065353216;
            IdentityMatrixCFArradouble y = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &v13);
          }
          else
          {
            if (!CFEqual(a2, @"MovieMatrix")) {
              return 4294954512;
            }
            IdentityMatrixCFArradouble y = wvtt_CreateIdentityMatrixCFArray(a3);
          }
          goto LABEL_6;
        }
        int v12 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      }
      IdentityMatrixCFArradouble y = (void *)CFRetain(*v12);
    }
LABEL_6:
    uint64_t v10 = IdentityMatrixCFArray;
    uint64_t result = 0;
    *a4 = v10;
    return result;
  }

  return FigSignalErrorAt();
}

uint64_t AVIFormatReaderGetTrackCount(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    *a2 = *(void *)(*(void *)DerivedStorage + 48);
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t AVIFormatReaderCopyTrackByIndex(uint64_t a1, CFIndex a2, void *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  if (a2 < 0 || *((void *)*DerivedStorage + 6) <= a2) {
    return 4294954453;
  }
  uint64_t v10 = *((void *)*DerivedStorage + 8);
  if (a3)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(DerivedStorage[1], a2);
    if (ValueAtIndex) {
      CFDictionaryRef ValueAtIndex = CFRetain(ValueAtIndex);
    }
    *a3 = ValueAtIndex;
  }
  if (a4) {
    *a4 = *(_DWORD *)(v10 + 108 * a2 + 4);
  }
  uint64_t result = 0;
  if (a5) {
    *a5 = *(_DWORD *)(v10 + 108 * a2);
  }
  return result;
}

uint64_t AVIFormatReaderCopyTrackByID(uint64_t a1, int a2, void *a3, _DWORD *a4)
{
  uint64_t DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = *((void *)*DerivedStorage + 6);
  if (v8 < 1)
  {
LABEL_5:
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v9 = DerivedStorage;
    uint64_t v10 = 0;
    CFIndex v11 = 0;
    while (*(_DWORD *)(*((void *)*DerivedStorage + 8) + v10) != a2)
    {
      ++v11;
      v10 += 108;
      if (v8 == v11) {
        goto LABEL_5;
      }
    }
    if (a3)
    {
      CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(DerivedStorage[1], v11);
      if (ValueAtIndex) {
        CFDictionaryRef ValueAtIndex = CFRetain(ValueAtIndex);
      }
      *a3 = ValueAtIndex;
    }
    if (a4) {
      *a4 = *(_DWORD *)(*((void *)*v9 + 8) + v10 + 4);
    }
    return 0;
  }
}

uint64_t AVIFormatReaderCopyTrackByType(uint64_t a1, uint64_t a2, int a3, void *a4, _DWORD *a5)
{
  uint64_t DerivedStorage = (CFArrayRef *)CMBaseObjectGetDerivedStorage();
  uint64_t v10 = *((void *)*DerivedStorage + 6);
  if (v10 < 1) {
    return 4294954453;
  }
  CFIndex v11 = 0;
  uint64_t v12 = 0;
  for (CFIndex i = (_DWORD *)(*((void *)*DerivedStorage + 8) + 4); *i != a3; i += 27)
  {
LABEL_6:
    if (v10 == ++v11) {
      return 4294954453;
    }
  }
  if (v12 != a2)
  {
    ++v12;
    goto LABEL_6;
  }
  if (a4)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex(DerivedStorage[1], v11);
    if (ValueAtIndex) {
      CFDictionaryRef ValueAtIndex = CFRetain(ValueAtIndex);
    }
    *a4 = ValueAtIndex;
  }
  uint64_t result = 0;
  if (a5) {
    *a5 = *(i - 1);
  }
  return result;
}

uint64_t RegisterAVIFileInfoType()
{
  uint64_t result = _CFRuntimeRegisterClass();
  sAVIFileInfouint64_t ID = result;
  return result;
}

double InitAVIFileInfo(_OWORD *a1)
{
  double result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  return result;
}

void FinalizeAVIFileInfo(uint64_t a1)
{
  FreeAVITrackArray(a1);
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    CFRelease(v2);
  }
  CFAllocatorRef v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    CFRelease(v3);
  }
}

void AVITrackReaderFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  *(_DWORD *)(DerivedStorage + 8) = -1;
}

__CFString *AVITrackReaderCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  uint64_t v5 = *(void *)DerivedStorage;
  if (*(void *)DerivedStorage)
  {
    int v6 = *(_DWORD *)(DerivedStorage + 8);
    if (v6 != -1)
    {
      uint64_t v7 = *(void *)(v5 + 64);
      uint64_t v8 = (unsigned int *)(v7 + 108 * v6);
      uint64_t v9 = *(const void **)(v5 + 24);
      if (v9) {
        CFStringRef v10 = CFCopyDescription(v9);
      }
      else {
        CFStringRef v10 = 0;
      }
      uint64_t v11 = v7 + 108 * v6;
      unsigned int v12 = *(_DWORD *)(v11 + 4);
      uint64_t v13 = HIBYTE(v12);
      uint64_t v14 = BYTE2(v12);
      uint64_t v15 = BYTE1(v12);
      uint64_t v16 = v12;
      uint64_t v17 = *(unsigned int *)(v11 + 88);
      uint64_t v18 = *v8;
      long long v19 = *(_OWORD *)(v11 + 20);
      time.CMTimeEpoch epoch = *(void *)(v11 + 36);
      *(_OWORD *)&time.uint64_t value = v19;
      Float64 Seconds = CMTimeGetSeconds(&time);
      CFStringAppendFormat(Mutable, 0, @"\t AVITrackReader: stream<%@> trackType %c%c%c%c trackID %d contains %d samples media duration %1.3f seconds (%lld/%d)", v10, v13, v14, v15, v16, v18, v17, *(void *)&Seconds, *(void *)(v11 + 20), *(unsigned int *)(v11 + 28));
      if (v10) {
        CFRelease(v10);
      }
    }
  }
  return Mutable;
}

uint64_t AVITrackReaderCopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, void *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v24 = 0;
  uint64_t result = TrackIndexToTrack(*(void *)DerivedStorage, *(_DWORD *)(DerivedStorage + 8), &v24);
  if (!result)
  {
    if (a2 && a4)
    {
      *a4 = 0;
      if (CFEqual(a2, @"TrackFormatDescriptionArray"))
      {
        DimensionDictionardouble y = CFArrayCreate(a3, (const void **)(v24 + 8), 1, MEMORY[0x1E4F1D510]);
LABEL_13:
        uint64_t v13 = DimensionDictionary;
        uint64_t result = 0;
        *a4 = v13;
        return result;
      }
      if (CFEqual(a2, @"TrackTimescale"))
      {
        CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        p_CMTime time = (CMTime *)(v24 + 16);
LABEL_8:
        CFNumberType v12 = kCFNumberSInt32Type;
LABEL_9:
        DimensionDictionardouble y = CFNumberCreate(v10, v12, p_time);
        goto LABEL_13;
      }
      if (CFEqual(a2, @"TrackDuration") || CFEqual(a2, @"UneditedTrackDuration"))
      {
        CMTime time = *(CMTime *)(v24 + 20);
        DimensionDictionardouble y = CMTimeCopyAsDictionary(&time, a3);
        goto LABEL_13;
      }
      if (CFEqual(a2, @"UneditedSampleCount"))
      {
        CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        p_CMTime time = (CMTime *)(v24 + 88);
        goto LABEL_8;
      }
      if (CFEqual(a2, @"TrackFrameReorderingRequired")) {
        goto LABEL_18;
      }
      if (!CFEqual(a2, @"TrackEnabled"))
      {
        if (CFEqual(a2, @"TrackDimensions"))
        {
          DimensionDictionardouble y = CreateDimensionDictionary(a3, (float)*(int *)(v24 + 76), (float)*(int *)(v24 + 80));
          goto LABEL_13;
        }
        if (CFEqual(a2, @"TrackMatrix"))
        {
          DimensionDictionardouble y = wvtt_CreateIdentityMatrixCFArray(a3);
          goto LABEL_13;
        }
        if (CFEqual(a2, @"TrackExcludeFromAutoSelection"))
        {
LABEL_18:
          uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFC8];
LABEL_21:
          DimensionDictionardouble y = (void *)CFRetain(*v14);
          goto LABEL_13;
        }
        if (!CFEqual(a2, @"TrackIsSelfContained"))
        {
          if (CFEqual(a2, @"UneditedNumDataBytes"))
          {
            uint64_t v15 = *(int *)(v24 + 92);
            if ((int)v15 < 1)
            {
              CMTimeValue v16 = 0;
            }
            else
            {
              CMTimeValue v16 = 0;
              uint64_t v17 = (uint64_t *)(*(void *)(v24 + 100) + 8);
              do
              {
                uint64_t v18 = *v17;
                v17 += 3;
                v16 += v18;
                --v15;
              }
              while (v15);
            }
            time.uint64_t value = v16;
            CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            p_CMTime time = &time;
            CFNumberType v12 = kCFNumberSInt64Type;
          }
          else
          {
            if (!CFEqual(a2, @"NominalFrameRate")) {
              return 4294954512;
            }
            float v22 = 0.0;
            uint64_t v19 = v24;
            if (*(unsigned char *)(v24 + 56))
            {
              CMTime time = *(CMTime *)(v24 + 44);
              CMTime v21 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
              if (CMTimeCompare(&time, &v21))
              {
                CMTime time = *(CMTime *)(v19 + 44);
                float v20 = 1.0 / CMTimeGetSeconds(&time);
                float v22 = v20;
              }
            }
            CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            p_CMTime time = (CMTime *)&v22;
            CFNumberType v12 = kCFNumberFloat32Type;
          }
          goto LABEL_9;
        }
      }
      uint64_t v14 = (CFTypeRef *)MEMORY[0x1E4F1CFD0];
      goto LABEL_21;
    }
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t TrackIndexToTrack(uint64_t a1, unsigned int a2, void *a3)
{
  if (!a1 || (a2 & 0x80000000) != 0 || *(void *)(a1 + 48) <= (uint64_t)a2) {
    return FigSignalErrorAt();
  }
  *a3 = *(void *)(a1 + 64) + 108 * a2;
  return 0;
}

CFDictionaryRef CreateDimensionDictionary(const __CFAllocator *a1, float a2, float a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  float v7 = a3;
  float valuePtr = a2;
  *(_OWORD *)keys = xmmword_1E57A1078;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  values = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], kCFNumberFloat32Type, &valuePtr);
  CFTypeRef cf = CFNumberCreate(v4, kCFNumberFloat32Type, &v7);
  CFDictionaryRef v5 = CFDictionaryCreate(a1, (const void **)keys, (const void **)&values, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (values) {
    CFRelease(values);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v5;
}

uint64_t AVITrackReaderGetTrackInfo(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  float v7 = 0;
  uint64_t result = TrackIndexToTrack(*(void *)DerivedStorage, *(_DWORD *)(DerivedStorage + 8), &v7);
  if (!result)
  {
    if (a2) {
      *a2 = *v7;
    }
    if (a3) {
      *a3 = v7[1];
    }
  }
  return result;
}

uint64_t AVITrackReaderCopySampleCursorService(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!*(void *)DerivedStorage || (uint64_t v4 = DerivedStorage, *(_DWORD *)(DerivedStorage + 8) == -1))
  {
    return FigSignalErrorAt();
  }
  else
  {
    FigSampleCursorServiceGetClassID();
    uint64_t v5 = CMDerivedObjectCreate();
    if (v5)
    {
      uint64_t v8 = v5;
      FigSignalErrorAt();
    }
    else
    {
      uint64_t v6 = CMBaseObjectGetDerivedStorage();
      CFTypeRef v7 = *(CFTypeRef *)v4;
      if (*(void *)v4) {
        CFTypeRef v7 = CFRetain(v7);
      }
      uint64_t v8 = 0;
      *(void *)uint64_t v6 = v7;
      *(_DWORD *)(v6 + 8) = *(_DWORD *)(v4 + 8);
      *a2 = 0;
    }
    return v8;
  }
}

void AVICursorServiceFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  *(_DWORD *)(DerivedStorage + 8) = -1;
}

__CFString *AVICursorServiceCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigFormatReader_AVI_SampleCursorService %p>{ trackIndex %d }", a1, *(unsigned int *)(DerivedStorage + 8));
  return Mutable;
}

uint64_t AVICursorServiceCreateCursorAtPresentationTimeStamp(uint64_t a1, long long *a2, void *a3, unsigned char *a4, char *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = 0;
  int32_t v16 = 0;
  long long v15 = *a2;
  uint64_t result = TrackIndexToTrack(*(void *)DerivedStorage, *(_DWORD *)(DerivedStorage + 8), &v17);
  if (!result)
  {
    uint64_t v11 = v17;
    *(_OWORD *)&v14.uint64_t value = v15;
    v14.CMTimeEpoch epoch = 0;
    uint64_t result = ComputeSampleDeltaForDuration(v17, &v14, 0, &v16, a4, a5);
    if (!result)
    {
      uint64_t v12 = *(const void **)DerivedStorage;
      int32_t v13 = v16;
      return CreateAVISampleCursor(v12, v11, v13, a3);
    }
  }
  return result;
}

uint64_t AVICursorServiceCreateCursorNearPresentationTimeStamp(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, unsigned char *a5, char *a6)
{
  long long v7 = *(_OWORD *)a2;
  uint64_t v8 = *(void *)(a2 + 16);
  return AVICursorServiceCreateCursorAtPresentationTimeStamp(a1, &v7, a4, a5, a6);
}

uint64_t AVICursorServiceCreateCursorAtFirstSampleInDecodeOrder(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v7 = 0;
  uint64_t result = TrackIndexToTrack(*(void *)DerivedStorage, *(_DWORD *)(DerivedStorage + 8), &v7);
  if (!result)
  {
    uint64_t v5 = *(const void **)DerivedStorage;
    uint64_t v6 = v7;
    return CreateAVISampleCursor(v5, v6, 0, a2);
  }
  return result;
}

uint64_t AVICursorServiceCreateCursorAtLastSampleInDecodeOrder(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = 0;
  uint64_t result = TrackIndexToTrack(*(void *)DerivedStorage, *(_DWORD *)(DerivedStorage + 8), &v8);
  if (!result)
  {
    uint64_t v5 = *(const void **)DerivedStorage;
    uint64_t v6 = v8;
    int32_t v7 = *(_DWORD *)(v8 + 88) - 1;
    return CreateAVISampleCursor(v5, v6, v7, a2);
  }
  return result;
}

uint64_t ComputeSampleDeltaForDuration(uint64_t a1, CMTime *a2, int a3, int *a4, unsigned char *a5, char *a6)
{
  int32_t v11 = *(_DWORD *)(a1 + 52);
  CMTime v18 = *a2;
  CMTimeConvertScale(&v19, &v18, v11, kCMTimeRoundingMethod_RoundTowardZero);
  if ((v19.flags & 0x1D) == 1)
  {
    int v12 = v19.value / *(uint64_t *)(a1 + 44) + a3;
    int v13 = *(_DWORD *)(a1 + 88);
    if (v12 < v13)
    {
      char v14 = 0;
      uint64_t result = 0;
      unsigned int v16 = v12 >> 31;
      int v17 = v12 & ~(v12 >> 31);
      goto LABEL_11;
    }
    LOBYTE(v16) = 0;
    uint64_t result = 0;
    goto LABEL_9;
  }
  if ((~v19.flags & 9) == 0)
  {
    int v17 = 0;
    char v14 = 0;
    uint64_t result = 0;
    LOBYTE(v16) = 1;
    goto LABEL_11;
  }
  if ((~v19.flags & 5) == 0)
  {
    LOBYTE(v16) = 0;
    uint64_t result = 0;
    int v13 = *(_DWORD *)(a1 + 88);
LABEL_9:
    int v17 = v13 - 1;
    char v14 = 1;
    goto LABEL_11;
  }
  uint64_t result = FigSignalErrorAt();
  int v17 = 0;
  LOBYTE(v16) = 0;
  char v14 = 0;
LABEL_11:
  *a4 = v17;
  if (a5) {
    *a5 = v16;
  }
  if (a6) {
    *a6 = v14;
  }
  return result;
}

uint64_t CreateAVISampleCursor(const void *a1, uint64_t a2, int32_t a3, void *a4)
{
  uint64_t v25 = 0;
  *a4 = 0;
  int32_t v4 = *(_DWORD *)(a2 + 88);
  if (v4 > a3 && v4)
  {
    FigSampleCursorGetClassID();
    uint64_t v9 = CMDerivedObjectCreate();
    if (v9)
    {
      uint64_t v22 = v9;
      FigSignalErrorAt();
    }
    else
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      *(void *)uint64_t DerivedStorage = CFRetain(a1);
      *(void *)(DerivedStorage + 8) = a2;
      *(_DWORD *)(DerivedStorage + 16) = a3;
      uint64_t v11 = *(void *)(a2 + 60);
      *(_OWORD *)(DerivedStorage + 48) = *(_OWORD *)(a2 + 44);
      *(void *)(DerivedStorage + 64) = v11;
      CMTime v23 = *(CMTime *)(a2 + 44);
      CMTimeMultiply(&v24, &v23, a3);
      *(CMTime *)(DerivedStorage + 24) = v24;
      uint64_t v12 = *(void *)(DerivedStorage + 8);
      uint64_t v13 = *(void *)(v12 + 100);
      if (*(_DWORD *)(v13 + 20) <= a3)
      {
        uint64_t v18 = *(unsigned int *)(v12 + 92);
        if ((int)v18 < 2)
        {
          LODWORD(v20) = 1;
        }
        else
        {
          CMTime v19 = (int32_t *)(v13 + 44);
          uint64_t v20 = 1;
          while (1)
          {
            int32_t v21 = *v19;
            v19 += 6;
            if (v21 > a3) {
              break;
            }
            if (v18 == ++v20)
            {
              LODWORD(v20) = v18;
              break;
            }
          }
        }
        int v14 = v20 - 1;
      }
      else
      {
        int v14 = 0;
        long long v15 = (int32_t *)(v13 - 4);
        do
        {
          int32_t v16 = *v15;
          v15 -= 6;
          --v14;
        }
        while (v16 > a3);
      }
      uint64_t v22 = 0;
      *(_DWORD *)(DerivedStorage + 20) = v14;
      *a4 = v25;
    }
    return v22;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

double AVISampleCursorFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)DerivedStorage)
  {
    CFRelease(*(CFTypeRef *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
  *(void *)(DerivedStorage + 8) = 0;
  double result = 0.0;
  *(_OWORD *)(DerivedStorage + 16) = 0u;
  *(_OWORD *)(DerivedStorage + 32) = 0u;
  *(_OWORD *)(DerivedStorage + 48) = 0u;
  *(void *)(DerivedStorage + 64) = 0;
  return result;
}

__CFString *AVISampleCursorCopyDebugDescription(const void *a1)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  uint64_t v5 = *(unsigned int **)(DerivedStorage + 8);
  uint64_t v6 = *v5;
  CFStringAppendFormat(Mutable, 0, @"<AVI SampleCursor %p>{ sampleNum %d, Track ID %d (%c%c%c%c), Type %c%c%c%c }", a1, *(unsigned int *)(DerivedStorage + 16), v6, BYTE3(v6), BYTE2(v6), BYTE1(v6), v6, HIBYTE(v5[1]), BYTE2(v5[1]), BYTE1(v5[1]), v5[1]);
  return Mutable;
}

uint64_t AVISampleCursorCopyProperty(int a1, CFTypeRef cf1, uint64_t a3, void *a4)
{
  if (a4 && cf1)
  {
    *a4 = 0;
    if (CFEqual(cf1, @"CursorPlayableHorizon"))
    {
      return 4294954513;
    }
    else if (CFEqual(cf1, @"CursorPlayableThroughEndOfTrack"))
    {
      return 4294954513;
    }
    else
    {
      return 4294954512;
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t AVISampleCursorCopy(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigSampleCursorGetClassID();
  uint64_t v4 = CMDerivedObjectCreate();
  if (v4)
  {
    FigSignalErrorAt();
  }
  else
  {
    uint64_t v5 = CMBaseObjectGetDerivedStorage();
    *(_OWORD *)uint64_t v5 = *(_OWORD *)DerivedStorage;
    long long v7 = *(_OWORD *)(DerivedStorage + 32);
    long long v6 = *(_OWORD *)(DerivedStorage + 48);
    long long v8 = *(_OWORD *)(DerivedStorage + 16);
    *(void *)(v5 + 64) = *(void *)(DerivedStorage + 64);
    *(_OWORD *)(v5 + 32) = v7;
    *(_OWORD *)(v5 + 48) = v6;
    *(_OWORD *)(v5 + 16) = v8;
    uint64_t v9 = *(const void **)v5;
    if (v9) {
      CFRetain(v9);
    }
    *a2 = 0;
  }
  return v4;
}

uint64_t AVISampleCursorCompareInDecodeOrder()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v1 = CMBaseObjectGetDerivedStorage();
  int v2 = *(_DWORD *)(DerivedStorage + 16);
  int v3 = *(_DWORD *)(v1 + 16);
  BOOL v4 = v2 < v3;
  BOOL v5 = v2 > v3;
  if (v4) {
    return -1;
  }
  else {
    return v5;
  }
}

uint64_t AVISampleCursorGetPresentationTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    long long v4 = *(_OWORD *)(DerivedStorage + 24);
    *(void *)(a2 + 16) = *(void *)(DerivedStorage + 40);
    *(_OWORD *)a2 = v4;
  }
  return 0;
}

uint64_t AVISampleCursorGetDecodeTimeStamp(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    long long v4 = *(_OWORD *)(DerivedStorage + 24);
    *(void *)(a2 + 16) = *(void *)(DerivedStorage + 40);
    *(_OWORD *)a2 = v4;
  }
  return 0;
}

uint64_t AVISampleCursorGetDuration(uint64_t a1, uint64_t a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    long long v4 = *(_OWORD *)(DerivedStorage + 48);
    *(void *)(a2 + 16) = *(void *)(DerivedStorage + 64);
    *(_OWORD *)a2 = v4;
  }
  return 0;
}

uint64_t AVISampleCursorGetDependencyInfo(uint64_t a1, BOOL *a2, unsigned char *a3, _DWORD *a4, unsigned char *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2) {
    *a2 = (*(unsigned char *)(*(void *)(*(void *)(DerivedStorage + 8) + 100) + 24 * *(int *)(DerivedStorage + 20) + 16) & 0x10) != 0;
  }
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  if (a5) {
    *a5 = 0;
  }
  return 0;
}

uint64_t AVISampleCursorStepByDecodeTime(uint64_t a1, CMTime *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime time1 = *a2;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  uint64_t result = CMTimeCompare(&time1, &time2);
  if (result)
  {
    int v11 = 0;
    __int16 v10 = 0;
    time2.uint64_t value = 0;
    uint64_t v6 = *(void *)(DerivedStorage + 8);
    int v7 = *(_DWORD *)(DerivedStorage + 16);
    CMTime time1 = *a2;
    uint64_t result = ComputeSampleDeltaForDuration(v6, &time1, v7, &v11, &v10, (char *)&v10 + 1);
    if (!result)
    {
      uint64_t v8 = v11 - (uint64_t)*(int *)(DerivedStorage + 16);
      AVISampleCursorStepInDecodeOrderAndReportStepsTaken(a1, v8, &time2);
      if (time2.value == v8 && (v10 | HIBYTE(v10)) == 0) {
        return 0;
      }
      else {
        return 4294954456;
      }
    }
  }
  return result;
}

uint64_t AVISampleCursorStepByPresentationTime(uint64_t a1, CMTime *a2)
{
  CMTime v3 = *a2;
  return AVISampleCursorStepByDecodeTime(a1, &v3);
}

uint64_t AVISampleCursorCopySampleLocation(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v10 = DerivedStorage;
  if (a5) {
    *a5 = 0;
  }
  if (a4)
  {
    CFTypeRef v11 = *(CFTypeRef *)(*(void *)DerivedStorage + 24);
    if (v11) {
      CFTypeRef v11 = CFRetain(v11);
    }
    *a4 = v11;
  }
  uint64_t v12 = *(void *)(v10 + 8);
  uint64_t v13 = *(void *)(v12 + 68);
  if (v13)
  {
    if (a2)
    {
      uint64_t v14 = *(void *)(v12 + 100) + 24 * *(int *)(v10 + 20);
      *a2 = *(void *)v14 + v13 * (*(int *)(v10 + 16) - (uint64_t)*(int *)(v14 + 20));
    }
    if (!a3) {
      return 0;
    }
LABEL_16:
    *a3 = v13;
    return 0;
  }
  if (a2) {
    *a2 = *(void *)(*(void *)(v12 + 100) + 24 * *(int *)(v10 + 20));
  }
  if (a3)
  {
    uint64_t v13 = *(void *)(*(void *)(v12 + 100) + 24 * *(int *)(v10 + 20) + 8);
    goto LABEL_16;
  }
  return 0;
}

uint64_t AVISampleCursorCopyChunkDetails(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, unsigned char *a9, unsigned char *a10)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v17 = DerivedStorage;
  if (a3) {
    *a3 = 0;
  }
  if (a2)
  {
    CFTypeRef v18 = *(CFTypeRef *)(*(void *)DerivedStorage + 24);
    if (v18) {
      CFTypeRef v18 = CFRetain(v18);
    }
    *a2 = v18;
  }
  if (a4) {
    *a4 = *(void *)(*(void *)(*(void *)(v17 + 8) + 100) + 24 * *(int *)(v17 + 20));
  }
  if (a5) {
    *a5 = *(void *)(*(void *)(*(void *)(v17 + 8) + 100) + 24 * *(int *)(v17 + 20) + 8);
  }
  if (a6)
  {
    uint64_t v19 = *(void *)(v17 + 8);
    unint64_t v20 = *(void *)(v19 + 68);
    if (v20) {
      uint64_t v21 = *(void *)(*(void *)(v19 + 100) + 24 * *(int *)(v17 + 20) + 8) / v20;
    }
    else {
      uint64_t v21 = 1;
    }
    *a6 = v21;
  }
  if (a7)
  {
    uint64_t v22 = *(void *)(v17 + 8);
    if (*(void *)(v22 + 68)) {
      uint64_t v23 = *(int *)(v17 + 16) - (uint64_t)*(int *)(*(void *)(v22 + 100) + 24 * *(int *)(v17 + 20) + 20);
    }
    else {
      uint64_t v23 = 0;
    }
    *a7 = v23;
  }
  if (a9) {
    *a9 = 1;
  }
  if (a10) {
    *a10 = 1;
  }
  return 0;
}

uint64_t AVISampleCursorCopyFormatDescription(uint64_t a1, void *a2)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    CFTypeRef v4 = *(CFTypeRef *)(*(void *)(DerivedStorage + 8) + 8);
    if (v4) {
      CFTypeRef v4 = CFRetain(v4);
    }
    *a2 = v4;
  }
  return 0;
}

uint64_t AVISampleCursorStepInDecodeOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v6 = DerivedStorage;
  uint64_t v7 = *(int *)(DerivedStorage + 16);
  if ((v7 ^ 0x7FFFFFFF) < a2)
  {
    int v8 = 0x7FFFFFFF;
    goto LABEL_6;
  }
  if (v7 < -a2)
  {
    int v8 = 0;
    goto LABEL_6;
  }
  int v8 = v7 + a2;
  if ((int)v7 + (int)a2 >= 0)
  {
LABEL_6:
    int v9 = *(_DWORD *)(*(void *)(DerivedStorage + 8) + 88);
    if (v8 >= v9) {
      int v10 = v9 - 1;
    }
    else {
      int v10 = v8;
    }
    if (a3) {
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  int v10 = 0;
  if (a3) {
LABEL_10:
  }
    *a3 = v10 - (int)v7;
LABEL_11:
  if (v10 != v7)
  {
    CMTime time = *(CMTime *)(DerivedStorage + 48);
    CMTimeMultiply(&rhs, &time, v10 - v7);
    CMTime v24 = *(CMTime *)(v6 + 24);
    CMTimeAdd(&time, &v24, &rhs);
    *(CMTime *)(v6 + 24) = time;
  }
  *(_DWORD *)(v6 + 16) = v10;
  uint64_t v11 = *(void *)(v6 + 8);
  if (*(void *)(v11 + 68))
  {
    int v12 = *(_DWORD *)(v6 + 20);
    uint64_t v13 = *(void *)(v11 + 100);
    uint64_t v14 = v12;
    if (v10 >= *(_DWORD *)(v13 + 24 * v12 + 20))
    {
      uint64_t v17 = *(int *)(v11 + 92);
      if ((int)v17 <= v12 + 1) {
        int v18 = v12 + 1;
      }
      else {
        int v18 = v17;
      }
      int v19 = v18 - 1;
      --v12;
      uint64_t v20 = v14 + 1;
      uint64_t v21 = (int *)(v13 + 24 * (int)v14 + 44);
      while (v20 < v17)
      {
        int v22 = *v21;
        v21 += 6;
        ++v12;
        ++v20;
        if (v10 < v22) {
          goto LABEL_27;
        }
      }
      int v12 = v19;
    }
    else
    {
      long long v15 = (int *)(v13 + 24 * v12 - 4);
      do
      {
        int v16 = *v15;
        v15 -= 6;
        --v12;
      }
      while (v10 < v16);
    }
  }
  else
  {
    int v12 = v10;
  }
LABEL_27:
  *(_DWORD *)(v6 + 20) = v12;
  return 0;
}

uint64_t AVISampleCursorStepInPresentationOrderAndReportStepsTaken(uint64_t a1, uint64_t a2, void *a3)
{
  return 0;
}

uint64_t FigPlayerAirPlayRoute_Create(uint64_t a1, const void *a2, const void **a3, NSObject *a4, const __CFString *a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (!a3 || !a3[2] || !a3[3] || !*a3 || !a3[1] || !a3[5] || !a3[6] || !a3[7] || !a3[4]) {
    return 0;
  }
  if (FigPlayerAirPlayRoute_GetTypeID_FigPlayerAirPlayRouteInitOnce != -1) {
    dispatch_once(&FigPlayerAirPlayRoute_GetTypeID_FigPlayerAirPlayRouteInitOnce, &__block_literal_global_58);
  }
  uint64_t Instance = _CFRuntimeCreateInstance();
  uint64_t v10 = Instance;
  if (Instance)
  {
    *(_OWORD *)(Instance + 240) = 0u;
    *(unsigned char *)(Instance + 241) = 0;
    *(_OWORD *)(Instance + 224) = 0u;
    *(_OWORD *)(Instance + 208) = 0u;
    *(_OWORD *)(Instance + 192) = 0u;
    *(_OWORD *)(Instance + 176) = 0u;
    *(_OWORD *)(Instance + 160) = 0u;
    *(_OWORD *)(Instance + 144) = 0u;
    *(_OWORD *)(Instance + 128) = 0u;
    *(_OWORD *)(Instance + 112) = 0u;
    *(_OWORD *)(Instance + 96) = 0u;
    *(_OWORD *)(Instance + 80) = 0u;
    *(_OWORD *)(Instance + 64) = 0u;
    *(_OWORD *)(Instance + 48) = 0u;
    *(_OWORD *)(Instance + 32) = 0u;
    *(_OWORD *)(Instance + 16) = 0u;
    if (a5) {
      CFStringGetCString(a5, (char *)(Instance + 241), 10, 0x600u);
    }
    if (a4)
    {
      *(void *)(v10 + 104) = a4;
      dispatch_retain(a4);
      if (*(void *)(v10 + 104))
      {
LABEL_17:
        *(void *)(v10 + 128) = _Block_copy(*a3);
        *(void *)(v10 + 136) = _Block_copy(a3[1]);
        *(void *)(v10 + 144) = _Block_copy(a3[2]);
        *(void *)(v10 + 152) = _Block_copy(a3[3]);
        *(void *)(v10 + 168) = _Block_copy(a3[5]);
        *(void *)(v10 + 176) = _Block_copy(a3[6]);
        *(void *)(v10 + 184) = _Block_copy(a3[7]);
        *(void *)(v10 + 160) = _Block_copy(a3[4]);
        if (a2) {
          CFTypeRef v11 = CFRetain(a2);
        }
        else {
          CFTypeRef v11 = 0;
        }
        *(void *)(v10 + 232) = v11;
        *(unsigned char *)(v10 + 66) = 1;
        *(unsigned char *)(v10 + 219) = 0;
        playerairplayroute_updateRoutingContextUUID((NSObject **)v10, 0);
        if (dword_1E93510E8)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        return v10;
      }
    }
    else
    {
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      *(_OWORD *)long long __str = 0u;
      snprintf(__str, 0x50uLL, "com.apple.coremedia.playerairplayroute_serialize.%s", (const char *)(v10 + 241));
      dispatch_queue_t v12 = dispatch_queue_create(__str, 0);
      *(void *)(v10 + 104) = v12;
      if (v12) {
        goto LABEL_17;
      }
    }
    CFRelease((CFTypeRef)v10);
    return 0;
  }
  return v10;
}

void playerairplayroute_updateRoutingContextUUID(NSObject **cf, CFTypeRef a2)
{
  if (cf) {
    CFRetain(cf);
  }
  if (a2) {
    CFRetain(a2);
  }
  CFTypeRef v4 = cf[13];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  void v5[2] = __playerairplayroute_updateRoutingContextUUID_block_invoke;
  v5[3] = &__block_descriptor_tmp_110_1;
  v5[4] = cf;
  v5[5] = a2;
  dispatch_async(v4, v5);
}

uint64_t FigPlayerAirPlayRoute_DoesCurrentRouteUseScreen(uint64_t a1)
{
  if (a1) {
    return *(unsigned __int8 *)(a1 + 120);
  }
  FigSignalErrorAt();
  return 0;
}

uint64_t FigPlayerAirPlayRoute_SuspendAirPlayScreen(uint64_t a1)
{
  if (a1)
  {
    if (!*(unsigned char *)(a1 + 64) && *(unsigned char *)(a1 + 120))
    {
      if (*(void *)(a1 + 56))
      {
        *(unsigned char *)(a1 + 64) = 1;
        FigEndpointStreamSuspend();
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPlayerAirPlayRoute_SuspendAirPlayScreenAndWaitForCompletion(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 64) || !*(unsigned char *)(a1 + 120) || !*(void *)(a1 + 56)) {
      return 0;
    }
    BOOL v5 = dispatch_semaphore_create(0);
    *(unsigned char *)(a1 + 64) = 1;
    dispatch_retain(v5);
    uint64_t v6 = *(void *)(a1 + 56);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    int v9 = *(void (**)(uint64_t, void, void (*)(int, int, dispatch_semaphore_t), NSObject *))(v8 + 8);
    if (v9) {
      v9(v6, 0, playerairplayroute_screenStreamCompletionCallback, v5);
    }
    dispatch_time_t v10 = dispatch_time(0, 1000000000);
    if (dispatch_semaphore_wait(v5, v10)) {
      uint64_t v3 = FigSignalErrorAt();
    }
    else {
      uint64_t v3 = 0;
    }
    dispatch_release(v5);
    return v3;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void playerairplayroute_screenStreamCompletionCallback(int a1, int a2, dispatch_semaphore_t dsema)
{
  dispatch_semaphore_signal(dsema);

  dispatch_release(dsema);
}

uint64_t FigPlayerAirPlayRoute_ResumeAirPlayScreen(uint64_t a1)
{
  if (a1)
  {
    if (*(unsigned char *)(a1 + 64) && *(unsigned char *)(a1 + 120))
    {
      if (*(void *)(a1 + 56))
      {
        *(unsigned char *)(a1 + 64) = 0;
        FigEndpointStreamResume();
      }
    }
    return 0;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t FigPlayerAirPlayRoute_CopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, void *a4)
{
  uint64_t v22 = 0;
  uint64_t v23 = &v22;
  uint64_t v24 = 0x2000000000;
  uint64_t v25 = 0;
  if (a1)
  {
    if (CFEqual(cf1, @"IsSetupForAirPlayVideo"))
    {
      uint64_t v8 = *(NSObject **)(a1 + 104);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __FigPlayerAirPlayRoute_CopyProperty_block_invoke;
      block[3] = &__block_descriptor_tmp_87_0;
      block[4] = a1;
      void block[5] = a4;
      int v9 = block;
      goto LABEL_4;
    }
    if (!CFEqual(cf1, @"PickerContextUUID"))
    {
      if (!CFEqual(cf1, @"BufferedAudioStream")) {
        goto LABEL_5;
      }
      uint64_t v8 = *(NSObject **)(a1 + 104);
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 0x40000000;
      v19[2] = __FigPlayerAirPlayRoute_CopyProperty_block_invoke_3;
      v19[3] = &__block_descriptor_tmp_89_0;
      v19[4] = a4;
      v19[5] = a1;
      int v9 = v19;
LABEL_4:
      dispatch_sync(v8, v9);
LABEL_5:
      uint64_t v10 = 0;
      goto LABEL_6;
    }
    uint64_t v13 = *(NSObject **)(a1 + 104);
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    v20[2] = __FigPlayerAirPlayRoute_CopyProperty_block_invoke_2;
    v20[3] = &unk_1E57A11B8;
    v20[4] = &v22;
    v20[5] = a1;
    dispatch_sync(v13, v20);
    uint64_t v14 = v23[3];
    if (v14)
    {
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      long long v18 = *(void (**)(uint64_t, void, uint64_t, void *))(v16 + 48);
      if (v18) {
        v18(v14, *MEMORY[0x1E4F75728], a3, a4);
      }
      goto LABEL_5;
    }
    CFTypeRef v17 = *(CFTypeRef *)(a1 + 32);
    if (v17) {
      CFTypeRef v17 = CFRetain(v17);
    }
    uint64_t v10 = 0;
    *a4 = v17;
  }
  else
  {
    uint64_t v10 = FigSignalErrorAt();
  }
LABEL_6:
  CFTypeRef v11 = (const void *)v23[3];
  if (v11) {
    CFRelease(v11);
  }
  _Block_object_dispose(&v22, 8);
  return v10;
}

uint64_t playerairplay_copyRoutingContext(uint64_t a1, CFTypeRef *a2)
{
  cf[24] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (*(unsigned char *)(a1 + 16)) {
    return 0;
  }
  if (*(void *)(a1 + 32))
  {
    if (dword_1E93510E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F755B0], *(const void **)(a1 + 32));
    uint64_t v10 = FigRoutingContextRemoteCopyContextForUUID();
    if (!v10)
    {
LABEL_11:
      uint64_t v11 = 0;
      *a2 = cf[0];
      cf[0] = 0;
      if (!Mutable) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
    uint64_t v11 = v10;
    if (Mutable) {
LABEL_12:
    }
      CFRelease(Mutable);
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 192);
    if (!v5) {
      goto LABEL_9;
    }
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (!v6)
    {
      uint64_t v11 = 4294948075;
      goto LABEL_15;
    }
    uint64_t v7 = *(uint64_t (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 8);
    if (!v7)
    {
      uint64_t v11 = 4294948071;
      goto LABEL_15;
    }
    uint64_t v8 = v7(v5, @"FAS_RoutingContext", *MEMORY[0x1E4F1CF80], cf);
    if (!v8)
    {
LABEL_9:
      CFMutableDictionaryRef Mutable = 0;
      goto LABEL_11;
    }
    uint64_t v11 = v8;
  }
LABEL_15:
  if (cf[0]) {
    CFRelease(cf[0]);
  }
  return v11;
}

uint64_t FigPlayerAirPlayRoute_SetProperty(uint64_t a1, CFTypeRef cf1, const void *a3)
{
  if (!a1)
  {
LABEL_43:
    return FigSignalErrorAt();
  }
  if (CFEqual(cf1, @"FigAudioSession"))
  {
    if (!a3)
    {
      uint64_t v7 = (const void *)a1;
      goto LABEL_9;
    }
    CFTypeID v6 = CFGetTypeID(a3);
    if (v6 == FigAudioSessionGetTypeID())
    {
      CFRetain((CFTypeRef)a1);
      uint64_t v7 = a3;
LABEL_9:
      CFRetain(v7);
      dispatch_queue_t v12 = *(NSObject **)(a1 + 104);
      uint64_t block = MEMORY[0x1E4F143A8];
      uint64_t v21 = 0x40000000;
      uint64_t v22 = __FigPlayerAirPlayRoute_setNewFigAudioSession_block_invoke;
      uint64_t v23 = &__block_descriptor_tmp_106_1;
      uint64_t v24 = a1;
      uint64_t v25 = a3;
      dispatch_sync(v12, &block);
      return 0;
    }
    return 4294954436;
  }
  if (CFEqual(cf1, @"AirPlayVideoActive"))
  {
    char v8 = FigCFEqual();
    CFRetain((CFTypeRef)a1);
    int v9 = *(NSObject **)(a1 + 104);
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v21 = 0x40000000;
    uint64_t v10 = &__block_descriptor_tmp_118_2;
    uint64_t v11 = __playerairplayroute_setAirPlayVideoIsActive_block_invoke;
LABEL_12:
    uint64_t v22 = v11;
    uint64_t v23 = v10;
    uint64_t v24 = a1;
    LOBYTE(v25) = v8;
    p_uint64_t block = &block;
LABEL_13:
    dispatch_async(v9, p_block);
    return 0;
  }
  if (CFEqual(cf1, @"VideoForMusicActive"))
  {
    char v8 = FigCFEqual();
    CFRetain((CFTypeRef)a1);
    int v9 = *(NSObject **)(a1 + 104);
    uint64_t block = MEMORY[0x1E4F143A8];
    uint64_t v21 = 0x40000000;
    uint64_t v10 = &__block_descriptor_tmp_119_1;
    uint64_t v11 = __playerairplayroute_setAudioOnlyAirPlayVideoIsActive_block_invoke;
    goto LABEL_12;
  }
  if (CFEqual(cf1, @"AllowBackgroundClientProcessToBeUnsuspended"))
  {
    CFRetain((CFTypeRef)a1);
    if (a3) {
      CFRetain(a3);
    }
    int v9 = *(NSObject **)(a1 + 104);
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 0x40000000;
    v19[2] = __FigPlayerAirPlayRoute_SetProperty_block_invoke;
    v19[3] = &__block_descriptor_tmp_90_0;
    v19[4] = a1;
    v19[5] = a3;
    p_uint64_t block = v19;
    goto LABEL_13;
  }
  if (CFEqual(cf1, @"PickerContextUUID"))
  {
    playerairplayroute_updateRoutingContextUUID((NSObject **)a1, a3);
    return 0;
  }
  if (CFEqual(cf1, @"ClientPID"))
  {
    LODWORD(block) = 0;
    if (a3)
    {
      CFTypeID v15 = CFGetTypeID(a3);
      if (v15 == CFNumberGetTypeID())
      {
        if (CFNumberGetValue((CFNumberRef)a3, kCFNumberSInt32Type, &block)) {
          *(_DWORD *)(a1 + 200) = block;
        }
      }
    }
    return 0;
  }
  if (CFEqual(cf1, @"PlaybackActive"))
  {
    if (a3) {
      int Value = CFBooleanGetValue((CFBooleanRef)a3);
    }
    else {
      int Value = 0;
    }
    if (Value == *(unsigned __int8 *)(a1 + 80)) {
      return 0;
    }
    *(unsigned char *)(a1 + 80) = Value;
    goto LABEL_37;
  }
  if (!CFEqual(cf1, @"DisableBufferedAudio"))
  {
    if (!CFEqual(cf1, @"IsPIPMuted")) {
      return 4294954436;
    }
    if (a3)
    {
      CFTypeID v17 = CFGetTypeID(a3);
      if (v17 == CFBooleanGetTypeID())
      {
        int v18 = CFBooleanGetValue((CFBooleanRef)a3);
        if (*(unsigned __int8 *)(a1 + 219) == v18) {
          return 0;
        }
        *(unsigned char *)(a1 + 219) = v18;
        goto LABEL_37;
      }
    }
    goto LABEL_43;
  }
  uint64_t result = 0;
  if (a3 && (const void *)*MEMORY[0x1E4F1CFD0] == a3)
  {
    *(unsigned char *)(a1 + 240) = 1;
LABEL_37:
    playerairplayroute_updateRoutingRegistry((NSObject **)a1);
    return 0;
  }
  return result;
}

void playerairplayroute_updateRoutingRegistry(NSObject **cf)
{
  if (cf) {
    CFRetain(cf);
  }
  int v2 = cf[13];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __playerairplayroute_updateRoutingRegistry_block_invoke;
  block[3] = &__block_descriptor_tmp_111_1;
  block[4] = cf;
  dispatch_async(v2, block);
}

uint64_t FigPlayerAirPlayRoute_ResetRoutingContextIfNeeded(NSObject **cf)
{
  if (cf) {
    CFRetain(cf);
  }
  int v2 = cf[13];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __FigPlayerAirPlayRoute_ResetRoutingContextIfNeeded_block_invoke;
  block[3] = &__block_descriptor_tmp_91;
  block[4] = cf;
  dispatch_async(v2, block);
  return 0;
}

void playerairplayroute_resetRoutingContextIfNeededInternal(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (*(unsigned char *)(a1 + 16)) {
    return;
  }
  int v2 = playerairplay_copyRoutingContext(a1, &cf);
  CFTypeRef v3 = cf;
  if (v2 || (playerairplayroute_updateRoutingRegistryInternal(a1, (uint64_t)cf), FigCFEqual()))
  {
    if (!v3) {
      return;
    }
    goto LABEL_5;
  }
  playerairplayroute_stopRoutingContextListeners(a1);
  CFTypeRef v4 = *(const void **)(a1 + 24);
  *(void *)(a1 + 24) = v3;
  if (v3) {
    CFRetain(v3);
  }
  if (v4) {
    CFRelease(v4);
  }
  if (*(void *)(a1 + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterAddWeakListener();
  }
  playerairplayroute_pickableRoutesChangedGuts(a1);
  if (v3)
  {
LABEL_5:
    CFRelease(v3);
  }
}

void FigPlayerAirPlayRoute_ReevaluateCurrentRoute(uint64_t a1)
{
  if (a1 && !*(unsigned char *)(a1 + 16))
  {
    uint64_t v1 = *(NSObject **)(a1 + 104);
    if (v1)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __FigPlayerAirPlayRoute_ReevaluateCurrentRoute_block_invoke;
      block[3] = &__block_descriptor_tmp_92;
      block[4] = a1;
      dispatch_sync(v1, block);
    }
  }
}

uint64_t playerairplayroute_pickableRoutesChangedGuts(uint64_t result)
{
  v249[16] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(result + 16)) {
    return result;
  }
  uint64_t v1 = result;
  CFTypeRef v222 = 0;
  CFTypeRef v223 = 0;
  uint64_t value = 0;
  CFTypeRef v221 = 0;
  CFTypeRef v218 = 0;
  CFTypeRef v219 = 0;
  CFTypeRef v216 = 0;
  CFBooleanRef BOOLean = 0;
  CFDictionaryRef theDict = 0;
  CFTypeRef v215 = 0;
  __int16 v213 = 0;
  int v2 = &dword_1E9351000;
  if (dword_1E93510E8)
  {
    LODWORD(v228) = 0;
    BYTE4(v227) = 0;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (*(void *)(v1 + 24))
  {
    uint64_t v4 = *(void *)(v1 + 192);
    uint64_t v5 = *MEMORY[0x1E4F1CF80];
    if (v4)
    {
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6)
      {
        uint64_t v7 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v6 + 48);
        if (v7) {
          v7(v4, *MEMORY[0x1E4F76580], v5, &v215);
        }
      }
    }
    if (FigGetCFPreferenceNumberWithDefault()
      || (dispatch_queue_t v12 = getenv("ENABLE_BUFFERED_LOCAL_PLAYBACK")) != 0 && !strcmp(v12, "1"))
    {
      if (dword_1E93510E8)
      {
        LODWORD(v228) = 0;
        BYTE4(v227) = 0;
        char v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        unsigned int v9 = v228;
        if (os_log_type_enabled(v8, BYTE4(v227))) {
          unsigned int v10 = v9;
        }
        else {
          unsigned int v10 = v9 & 0xFFFFFFFE;
        }
        if (v10)
        {
          *(_DWORD *)CFTypeRef cf = 136315650;
          *(void *)&cf[4] = "playerairplayroute_updateRouteInformation";
          __int16 v230 = 2048;
          uint64_t v231 = v1;
          __int16 v232 = 2082;
          uint64_t v233 = v1 + 241;
          _os_log_send_and_compose_impl();
        }
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      uint64_t v17 = *(void *)(v1 + 24);
      CFTypeRef v18 = v215;
      uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v19) {
        uint64_t v20 = v19;
      }
      else {
        uint64_t v20 = 0;
      }
      uint64_t v21 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(v20 + 192);
      if (v21)
      {
        int v22 = v21(v17, v18, &v223);
        if (v22)
        {
LABEL_33:
          int v27 = v22;
          char v210 = 0;
          BOOL v212 = 0;
          long long v28 = 0;
          int v29 = 0;
          uint64_t v30 = 0;
LABEL_35:
          LOBYTE(v11) = 1;
          goto LABEL_78;
        }
        if (!v223) {
          goto LABEL_42;
        }
        uint64_t CMBaseObject = FigEndpointGetCMBaseObject();
        uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v24) {
          uint64_t v25 = v24;
        }
        else {
          uint64_t v25 = 0;
        }
        UInt32 v31 = *(void (**)(uint64_t, void, void))(v25 + 56);
        if (v31) {
          v31(CMBaseObject, *MEMORY[0x1E4F20398], *MEMORY[0x1E4F1CFD0]);
        }
LABEL_39:
        if (v223)
        {
          uint64_t v32 = *(void *)(v1 + 24);
          uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v33) {
            uint64_t v34 = v33;
          }
          else {
            uint64_t v34 = 0;
          }
          uint64_t v37 = *(unsigned int (**)(uint64_t, void, uint64_t, CFBooleanRef *))(v34 + 48);
          if (v37)
          {
            AudioFormatID v38 = (void *)MEMORY[0x1E4F75708];
            goto LABEL_50;
          }
          goto LABEL_53;
        }
LABEL_42:
        uint64_t v32 = *(void *)(v1 + 24);
        uint64_t v35 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v35) {
          uint64_t v36 = v35;
        }
        else {
          uint64_t v36 = 0;
        }
        uint64_t v37 = *(unsigned int (**)(uint64_t, void, uint64_t, CFBooleanRef *))(v36 + 48);
        if (v37)
        {
          AudioFormatID v38 = (void *)MEMORY[0x1E4F75710];
LABEL_50:
          int v11 = 1;
          if (!v37(v32, *v38, v5, &BOOLean) && BOOLean) {
            int v11 = CFBooleanGetValue(BOOLean);
          }
          goto LABEL_54;
        }
LABEL_53:
        int v11 = 1;
LABEL_54:
        if (dword_1E93510E8)
        {
          int v39 = v11;
          LODWORD(v228) = 0;
          BYTE4(v227) = 0;
          size_t v40 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          unsigned int v41 = v228;
          if (os_log_type_enabled(v40, BYTE4(v227))) {
            unsigned int v42 = v41;
          }
          else {
            unsigned int v42 = v41 & 0xFFFFFFFE;
          }
          if (v42)
          {
            *(_DWORD *)CFTypeRef cf = 136316162;
            *(void *)&cf[4] = "playerairplayroute_updateRouteInformation";
            __int16 v230 = 2048;
            uint64_t v231 = v1;
            __int16 v232 = 2082;
            uint64_t v233 = v1 + 241;
            __int16 v234 = 2048;
            *(void *)uint64_t v235 = v223;
            *(_WORD *)&v235[8] = 1024;
            int v236 = v39;
            _os_log_send_and_compose_impl();
          }
          fig_log_call_emit_and_clean_up_after_send_and_compose();
          int v11 = v39;
        }
        if (BOOLean)
        {
          CFRelease(BOOLean);
          CFBooleanRef BOOLean = 0;
        }
        goto LABEL_63;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v1 + 24);
      CFTypeRef v14 = v215;
      uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v15) {
        uint64_t v16 = v15;
      }
      else {
        uint64_t v16 = 0;
      }
      __int16 v26 = *(uint64_t (**)(uint64_t, CFTypeRef, CFTypeRef *))(v16 + 144);
      if (v26)
      {
        int v22 = v26(v13, v14, &v223);
        if (v22) {
          goto LABEL_33;
        }
        goto LABEL_39;
      }
    }
    char v210 = 0;
    BOOL v212 = 0;
    long long v28 = 0;
    int v29 = 0;
    uint64_t v30 = 0;
    int v27 = -12782;
    goto LABEL_35;
  }
  int v11 = 1;
LABEL_63:
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v30 = Mutable;
  if (!Mutable)
  {
    char v210 = 0;
    BOOL v212 = 0;
    long long v28 = 0;
    int v29 = 0;
    int v27 = -12862;
    goto LABEL_78;
  }
  size_t v44 = (const void *)*MEMORY[0x1E4F1CFD0];
  unsigned int v45 = (const void *)*MEMORY[0x1E4F1CFC8];
  if (v11) {
    size_t v46 = (const void *)*MEMORY[0x1E4F1CFD0];
  }
  else {
    size_t v46 = (const void *)*MEMORY[0x1E4F1CFC8];
  }
  CFDictionaryAddValue(Mutable, @"IsLocalPlaybackEnabled", v46);
  if (!v223)
  {
    char v210 = 0;
    BOOL v212 = 0;
    long long v28 = 0;
    int v29 = 0;
    int v205 = 1;
    HaveSameuint64_t ID = 0;
    goto LABEL_129;
  }
  uint64_t v47 = FigEndpointGetCMBaseObject();
  uint64_t v48 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v48) {
    uint64_t v49 = v48;
  }
  else {
    uint64_t v49 = 0;
  }
  double v50 = *(uint64_t (**)(uint64_t, void))(v49 + 48);
  if (!v50)
  {
    char v210 = 0;
    BOOL v212 = 0;
    long long v28 = 0;
    int v29 = 0;
    int v27 = -12782;
    goto LABEL_78;
  }
  uint64_t v203 = v45;
  uint64_t v211 = *MEMORY[0x1E4F1CF80];
  int v51 = v50(v47, *MEMORY[0x1E4F20F28]);
  if (v51)
  {
    int v27 = v51;
    char v210 = 0;
    BOOL v212 = 0;
    long long v28 = 0;
    int v29 = 0;
    goto LABEL_78;
  }
  if (!value)
  {
    char v210 = 0;
    BOOL v212 = 0;
    long long v28 = 0;
    int v29 = 0;
    int v27 = -12860;
    goto LABEL_78;
  }
  CFDictionaryAddValue(v30, @"NewRouteName", value);
  if (FigGetCFPreferenceNumberWithDefault())
  {
    CFDictionarySetValue(v30, @"IsLocalPlaybackEnabled", v44);
    HaveSameuint64_t ID = 0;
    BOOL v212 = 0;
    int v11 = 1;
  }
  else if (*(unsigned char *)(v1 + 220))
  {
    HaveSameuint64_t ID = 0;
    BOOL v212 = 0;
  }
  else
  {
    if (*(void *)(v1 + 48) && FigEndpointContainsStream())
    {
      double v53 = *(const void **)(v1 + 48);
      if (v53) {
        CFTypeRef v54 = CFRetain(v53);
      }
      else {
        CFTypeRef v54 = 0;
      }
      CFTypeRef v222 = v54;
    }
    else
    {
      FigEndpointAcquireAndCopyStreamResource();
      CFTypeRef v54 = v222;
    }
    HaveSameuint64_t ID = playerairplayroute_endpointStreamsHaveSameID(*(void *)(v1 + 48), (uint64_t)v54);
    BOOL v212 = v222 != 0;
  }
  if (CelestialIsAppleTV() || CelestialIsAudioAccessory())
  {
    int v55 = 0;
  }
  else
  {
    uint64_t v76 = FigEndpointGetCMBaseObject();
    uint64_t v77 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v77) {
      uint64_t v78 = v77;
    }
    else {
      uint64_t v78 = 0;
    }
    double v194 = *(void (**)(uint64_t, void, uint64_t, CFBooleanRef *))(v78 + 48);
    if (v194) {
      v194(v76, *MEMORY[0x1E4F20EC0], v211, &BOOLean);
    }
    if (BOOLean)
    {
      int v195 = CFBooleanGetValue(BOOLean);
      if (BOOLean)
      {
        CFRelease(BOOLean);
        CFBooleanRef BOOLean = 0;
      }
    }
    else
    {
      int v195 = 0;
    }
    int v55 = v195;
    if (v221)
    {
      CFRelease(v221);
      CFTypeRef v221 = 0;
    }
    uint64_t v196 = FigEndpointGetCMBaseObject();
    uint64_t v197 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v197) {
      uint64_t v198 = v197;
    }
    else {
      uint64_t v198 = 0;
    }
    double v199 = *(void (**)(uint64_t, void, uint64_t, CFTypeRef *))(v198 + 48);
    if (v199) {
      v199(v196, *MEMORY[0x1E4F21050], v211, &v221);
    }
  }
  int v207 = v55;
  v249[0] = 0;
  *(void *)CFTypeRef cf = 0;
  if (!v223)
  {
    long long v28 = 0;
    goto LABEL_120;
  }
  uint64_t v56 = FigEndpointGetCMBaseObject();
  uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v57) {
    uint64_t v58 = v57;
  }
  else {
    uint64_t v58 = 0;
  }
  unsigned int v59 = *(unsigned int (**)(uint64_t, void, uint64_t, CFTypeRef *))(v58 + 48);
  if (!v59) {
    goto LABEL_115;
  }
  long long v28 = 0;
  if (v59(v56, *MEMORY[0x1E4F20FA8], v211, v249) || !v249[0]) {
    goto LABEL_116;
  }
  CFIndex Count = CFArrayGetCount((CFArrayRef)v249[0]);
  if (Count < 1)
  {
LABEL_115:
    long long v28 = 0;
    goto LABEL_116;
  }
  uint64_t v61 = Count;
  int v200 = v11;
  CFIndex v62 = 0;
  uint64_t v63 = *MEMORY[0x1E4F21408];
  unsigned int v64 = 1;
  while (1)
  {
    CFDictionaryRef ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)v249[0], v62);
    if (ValueAtIndex)
    {
      long long v28 = ValueAtIndex;
      uint64_t v66 = FigEndpointStreamGetCMBaseObject();
      uint64_t v67 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v67) {
        uint64_t v68 = v67;
      }
      else {
        uint64_t v68 = 0;
      }
      unsigned int v69 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(v68 + 48);
      if (!v69 || v69(v66, v63, v211, cf))
      {
LABEL_113:
        long long v28 = 0;
        goto LABEL_114;
      }
      if (*(void *)cf) {
        break;
      }
    }
LABEL_111:
    CFIndex v62 = v64;
    BOOL v127 = v61 <= v64++;
    if (v127) {
      goto LABEL_113;
    }
  }
  if (!FigCFEqual())
  {
    if (*(void *)cf)
    {
      CFRelease(*(CFTypeRef *)cf);
      *(void *)CFTypeRef cf = 0;
    }
    goto LABEL_111;
  }
  CFRetain(v28);
LABEL_114:
  int v2 = &dword_1E9351000;
  int v11 = v200;
LABEL_116:
  if (*(void *)cf) {
    CFRelease(*(CFTypeRef *)cf);
  }
  if (v249[0]) {
    CFRelease(v249[0]);
  }
LABEL_120:
  uint64_t v70 = FigEndpointGetCMBaseObject();
  uint64_t v71 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v71) {
    uint64_t v72 = v71;
  }
  else {
    uint64_t v72 = 0;
  }
  int v73 = *(uint64_t (**)(uint64_t, void, uint64_t, CFTypeRef *))(v72 + 48);
  if (!v73)
  {
    char v210 = 0;
    int v27 = -12782;
LABEL_137:
    unsigned __int8 v52 = 5;
    int v29 = v207;
    goto LABEL_331;
  }
  int v74 = v73(v70, *MEMORY[0x1E4F20F68], v211, &v219);
  if (v74)
  {
    int v27 = v74;
    char v210 = 0;
    goto LABEL_137;
  }
  int v29 = v207;
  if (v28 || FigCFEqual())
  {
    int v205 = 0;
    char v210 = 1;
  }
  else
  {
    char v210 = 0;
    long long v28 = 0;
    int v205 = 1;
  }
  unsigned int v45 = v203;
LABEL_129:
  if (*(CFTypeRef *)(v1 + 40) == v223
    && *(unsigned __int8 *)(v1 + 65) == v29
    && FigCFEqual()
    && *(const void **)(v1 + 56) == v28
    && HaveSameID)
  {
    if (*(unsigned __int8 *)(v1 + 66) == v11) {
      goto LABEL_135;
    }
    if (v11 != 1)
    {
      int v27 = 0;
      unsigned __int8 v52 = 4;
      goto LABEL_331;
    }
  }
  if (!v29) {
    goto LABEL_311;
  }
  int v208 = v29;
  CFAllocatorRef alloc = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v79 = FigEndpointGetCMBaseObject();
  uint64_t v80 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v80) {
    uint64_t v81 = v80;
  }
  else {
    uint64_t v81 = 0;
  }
  unsigned int v82 = *(void (**)(uint64_t, void, const __CFAllocator *, CFBooleanRef *))(v81 + 48);
  if (v82) {
    v82(v79, *MEMORY[0x1E4F20CA8], alloc, &BOOLean);
  }
  if (BOOLean)
  {
    CFDictionaryAddValue(v30, @"AirPlayFromCloudSupported", BOOLean);
    if (BOOLean)
    {
      CFRelease(BOOLean);
      CFBooleanRef BOOLean = 0;
    }
  }
  uint64_t v83 = FigEndpointGetCMBaseObject();
  uint64_t v84 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v84) {
    uint64_t v85 = v84;
  }
  else {
    uint64_t v85 = 0;
  }
  int v86 = *(void (**)(uint64_t, void, const __CFAllocator *, CFBooleanRef *))(v85 + 48);
  if (v86) {
    v86(v83, *MEMORY[0x1E4F20CB8], alloc, &BOOLean);
  }
  if (BOOLean)
  {
    CFDictionaryAddValue(v30, @"AirPlayPlayQueueSupported", BOOLean);
    if (BOOLean)
    {
      CFRelease(BOOLean);
      CFBooleanRef BOOLean = 0;
    }
  }
  uint64_t v87 = FigEndpointGetCMBaseObject();
  uint64_t v88 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v88) {
    uint64_t v89 = v88;
  }
  else {
    uint64_t v89 = 0;
  }
  CVReturn v90 = *(void (**)(uint64_t, void, const __CFAllocator *, CFBooleanRef *))(v89 + 48);
  if (v90) {
    v90(v87, *MEMORY[0x1E4F20DB8], alloc, &BOOLean);
  }
  if (BOOLean)
  {
    CFDictionaryAddValue(v30, @"ExternalPlaybackCannotFetchMediaFromSender", BOOLean);
    if (BOOLean)
    {
      CFRelease(BOOLean);
      CFBooleanRef BOOLean = 0;
    }
  }
  uint64_t v91 = FigEndpointGetCMBaseObject();
  uint64_t v92 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v92) {
    uint64_t v93 = v92;
  }
  else {
    uint64_t v93 = 0;
  }
  int v94 = *(void (**)(uint64_t, void, const __CFAllocator *, CFBooleanRef *))(v93 + 48);
  if (v94) {
    v94(v91, *MEMORY[0x1E4F20DD8], alloc, &BOOLean);
  }
  if (BOOLean)
  {
    CFDictionaryAddValue(v30, @"ExternalPlaybackDoesNotSupportEncryptedCRABS", BOOLean);
    if (BOOLean)
    {
      CFRelease(BOOLean);
      CFBooleanRef BOOLean = 0;
    }
  }
  uint64_t v95 = FigEndpointGetCMBaseObject();
  uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v96) {
    uint64_t v97 = v96;
  }
  else {
    uint64_t v97 = 0;
  }
  unsigned int v98 = *(void (**)(uint64_t, void, const __CFAllocator *, CFBooleanRef *))(v97 + 48);
  if (v98) {
    v98(v95, *MEMORY[0x1E4F20DC8], alloc, &BOOLean);
  }
  if (BOOLean)
  {
    CFDictionaryAddValue(v30, @"ExternalPlaybackDoesNotRequireVodkaForHLS", BOOLean);
    if (BOOLean)
    {
      CFRelease(BOOLean);
      CFBooleanRef BOOLean = 0;
    }
  }
  uint64_t v99 = FigEndpointGetCMBaseObject();
  uint64_t v100 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v100) {
    uint64_t v101 = v100;
  }
  else {
    uint64_t v101 = 0;
  }
  int v102 = *(void (**)(uint64_t, void, const __CFAllocator *, CFBooleanRef *))(v101 + 48);
  if (v102) {
    v102(v99, *MEMORY[0x1E4F20DE8], alloc, &BOOLean);
  }
  if (BOOLean)
  {
    CFDictionaryAddValue(v30, @"ExternalPlaybackSupportsOfflineHLS", BOOLean);
    if (BOOLean)
    {
      CFRelease(BOOLean);
      CFBooleanRef BOOLean = 0;
    }
  }
  uint64_t v103 = FigEndpointGetCMBaseObject();
  uint64_t v104 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v104) {
    uint64_t v105 = v104;
  }
  else {
    uint64_t v105 = 0;
  }
  OSStatus v106 = *(void (**)(uint64_t, void, const __CFAllocator *, CFDictionaryRef *))(v105 + 48);
  if (v106) {
    v106(v103, *MEMORY[0x1E4F20DC0], alloc, &theDict);
  }
  if (!theDict) {
    goto LABEL_263;
  }
  float64x2_t v204 = v45;
  if (FigCFDictionaryGetBooleanIfPresent())
  {
    if (v2[58])
    {
      LODWORD(v228) = 0;
      BYTE4(v227) = 0;
      CVPixelBufferRef v107 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v108 = v228;
      if (os_log_type_enabled(v107, BYTE4(v227))) {
        unsigned int v109 = v108;
      }
      else {
        unsigned int v109 = v108 & 0xFFFFFFFE;
      }
      if (v109)
      {
        *(_DWORD *)CFTypeRef cf = 136315906;
        *(void *)&cf[4] = "playerairplayroute_updateRouteInformation";
        __int16 v230 = 2048;
        uint64_t v231 = v1;
        __int16 v232 = 2082;
        uint64_t v233 = v1 + 241;
        __int16 v234 = 1024;
        *(_DWORD *)uint64_t v235 = 0;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v2 = &dword_1E9351000;
    }
  }
  else
  {
    int v201 = v11;
    if (theDict)
    {
      CFStringRef v110 = (const __CFString *)CFDictionaryGetValue(theDict, @"webAppVersion");
      if (v110)
      {
        CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(alloc, v110, @".");
        CFArrayRef v112 = ArrayBySeparatingStrings;
        if (ArrayBySeparatingStrings
          && CFArrayGetCount(ArrayBySeparatingStrings) >= 1
          && (CFStringRef v113 = (const __CFString *)CFArrayGetValueAtIndex(v112, 0)) != 0)
        {
          Intint Value = CFStringGetIntValue(v113);
          BOOL v115 = 0;
          if (IntValue != 0x80000000 && IntValue && IntValue != 0x7FFFFFFF) {
            BOOL v115 = IntValue > 40 || (IntValue & 0xFFFFFFFE) == 18;
          }
        }
        else
        {
          BOOL v115 = 0;
        }
      }
      else
      {
        BOOL v115 = 0;
        CFArrayRef v112 = 0;
      }
    }
    else
    {
      BOOL v115 = 0;
      CFArrayRef v112 = 0;
      CFStringRef v110 = 0;
    }
    if (v2[58])
    {
      LODWORD(v228) = 0;
      BYTE4(v227) = 0;
      CMTime v117 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v118 = v228;
      if (os_log_type_enabled(v117, BYTE4(v227))) {
        unsigned int v119 = v118;
      }
      else {
        unsigned int v119 = v118 & 0xFFFFFFFE;
      }
      if (v119)
      {
        *(_DWORD *)CFTypeRef cf = 136316162;
        *(void *)&cf[4] = "playerairplayroute_isAirPlayVideoWithSharePlaySupportedByReceiver";
        __int16 v230 = 2048;
        uint64_t v231 = v1;
        __int16 v232 = 2082;
        uint64_t v233 = v1 + 241;
        __int16 v234 = 2112;
        *(void *)uint64_t v235 = v110;
        *(_WORD *)&v235[8] = 1024;
        int v236 = v115;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v2 = &dword_1E9351000;
    }
    if (v112) {
      CFRelease(v112);
    }
    HIBYTE(v213) = v115;
    int v11 = v201;
  }
  if (FigCFDictionaryGetBooleanIfPresent()) {
    goto LABEL_255;
  }
  uint64_t v227 = 0;
  CFTypeRef v228 = 0;
  uint64_t v226 = 0;
  CFStringRef v120 = (const __CFString *)CFDictionaryGetValue(theDict, @"webAppVersion");
  CFStringRef v121 = v120;
  int v202 = v11;
  if (!v120 || (getBuildNumberFromVersionString(v120, (SInt32 *)&v227 + 1, (SInt32 *)&v227), HIDWORD(v227) != 19))
  {
    int v126 = 0;
LABEL_241:
    CFStringRef v124 = 0;
LABEL_242:
    int v128 = 0;
    goto LABEL_243;
  }
  int v122 = FigRCLCreateConfiguration(@"com.apple.mediaplaybackd", @"kFigRemoteConfigurationLoaderStoreBagType_AirPlay", 0, (CFMutableDictionaryRef *)&v228);
  if (v122)
  {
    int v126 = v122;
    goto LABEL_241;
  }
  CFStringRef v123 = (const __CFString *)FigRCLCopyCFType((CFDictionaryRef)v228, @"AirPlayMPV1ReceiverNativeInterstitialsEnabledMinimumVersion");
  CFStringRef v124 = v123;
  if (!v123)
  {
    int v126 = 0;
    goto LABEL_242;
  }
  CFTypeID v125 = CFGetTypeID(v123);
  if (v125 == CFStringGetTypeID())
  {
    getBuildNumberFromVersionString(v124, (SInt32 *)&v226 + 1, (SInt32 *)&v226);
    int v126 = 0;
    BOOL v127 = HIDWORD(v227) != HIDWORD(v226) || (int)v227 < (int)v226;
    int v128 = !v127;
  }
  else
  {
    int v128 = 0;
    int v126 = -12780;
  }
LABEL_243:
  if (dword_1E93510E8)
  {
    unsigned int v225 = 0;
    os_log_type_t v224 = OS_LOG_TYPE_DEFAULT;
    unsigned int v129 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v130 = v225;
    if (os_log_type_enabled(v129, v224)) {
      unsigned int v131 = v130;
    }
    else {
      unsigned int v131 = v130 & 0xFFFFFFFE;
    }
    if (v131)
    {
      *(_DWORD *)CFTypeRef cf = 136316674;
      *(void *)&cf[4] = "playerairplayroute_isAirPlayVideoWithNativeInterstitialsSupportedByReceiver";
      __int16 v230 = 2048;
      uint64_t v231 = v1;
      __int16 v232 = 2082;
      uint64_t v233 = v1 + 241;
      __int16 v234 = 2112;
      *(void *)uint64_t v235 = v121;
      *(_WORD *)&v235[8] = 1024;
      int v236 = v128;
      __int16 v237 = 2112;
      CFStringRef v238 = v124;
      __int16 v239 = 1024;
      LODWORD(v240) = v126;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (v124) {
    CFRelease(v124);
  }
  int v2 = &dword_1E9351000;
  if (v228) {
    CFRelease(v228);
  }
  LOBYTE(v213) = v128;
  int v11 = v202;
LABEL_255:
  if (v2[58])
  {
    LODWORD(v228) = 0;
    BYTE4(v227) = 0;
    unsigned int v132 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v133 = v228;
    if (os_log_type_enabled(v132, BYTE4(v227))) {
      unsigned int v134 = v133;
    }
    else {
      unsigned int v134 = v133 & 0xFFFFFFFE;
    }
    if (v134)
    {
      *(_DWORD *)CFTypeRef cf = 136315906;
      *(void *)&cf[4] = "playerairplayroute_updateRouteInformation";
      __int16 v230 = 2048;
      uint64_t v231 = v1;
      __int16 v232 = 2082;
      uint64_t v233 = v1 + 241;
      __int16 v234 = 1024;
      *(_DWORD *)uint64_t v235 = v213;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  FigCFDictionaryGetBooleanIfPresent();
  unsigned int v45 = v204;
LABEL_263:
  if (HIBYTE(v213)) {
    unsigned int v135 = v44;
  }
  else {
    unsigned int v135 = v45;
  }
  CFDictionaryAddValue(v30, @"ExternalPlaybackSupportsAirPlayVideoWithSharePlay", v135);
  if ((_BYTE)v213) {
    int v136 = v44;
  }
  else {
    int v136 = v45;
  }
  CFDictionaryAddValue(v30, @"ExternalPlaybackSupportsInterstitials", v136);
  uint64_t v137 = FigEndpointGetCMBaseObject();
  uint64_t v138 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v138) {
    uint64_t v139 = v138;
  }
  else {
    uint64_t v139 = 0;
  }
  unsigned int v140 = *(void (**)(uint64_t, void, const __CFAllocator *, CFBooleanRef *))(v139 + 48);
  if (v140) {
    v140(v137, *MEMORY[0x1E4F20DE0], alloc, &BOOLean);
  }
  if (!BOOLean) {
    goto LABEL_278;
  }
  int v141 = CFBooleanGetValue(BOOLean);
  if (BOOLean)
  {
    CFRelease(BOOLean);
    CFBooleanRef BOOLean = 0;
  }
  unsigned int v142 = v44;
  if (!v141) {
LABEL_278:
  }
    unsigned int v142 = v45;
  CFDictionaryAddValue(v30, @"ExternalPlaybackSupportsIntegratedTimeline", v142);
  CFDictionaryAddValue(v30, @"ExternalPlaybackSupportsStopAtEndOfQueue", v45);
  uint64_t v143 = FigEndpointGetCMBaseObject();
  uint64_t v144 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v144) {
    uint64_t v145 = v144;
  }
  else {
    uint64_t v145 = 0;
  }
  unsigned int v146 = *(void (**)(uint64_t, void, const __CFAllocator *, CFBooleanRef *))(v145 + 48);
  if (v146) {
    v146(v143, *MEMORY[0x1E4F20D88], alloc, &BOOLean);
  }
  if (BOOLean)
  {
    if ((_BYTE)v213 || (int v148 = FigCFEqual(), v147 = v45, !v148)) {
      unsigned int v147 = v44;
    }
  }
  else
  {
    unsigned int v147 = v45;
  }
  CFDictionaryAddValue(v30, @"ExternalPlaybackReportsValidSeekResponseTime", v147);
  if (BOOLean)
  {
    CFRelease(BOOLean);
    CFBooleanRef BOOLean = 0;
  }
  uint64_t v149 = FigEndpointGetCMBaseObject();
  uint64_t v150 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v150) {
    uint64_t v151 = v150;
  }
  else {
    uint64_t v151 = 0;
  }
  unsigned int v152 = *(void (**)(uint64_t, void, const __CFAllocator *, CFBooleanRef *))(v151 + 48);
  if (v152) {
    v152(v149, *MEMORY[0x1E4F20CC8], alloc, &BOOLean);
  }
  if (BOOLean)
  {
    CFDictionaryAddValue(v30, @"AirPlayVideoV2Supported", BOOLean);
    if (BOOLean)
    {
      CFRelease(BOOLean);
      CFBooleanRef BOOLean = 0;
    }
  }
  CFDictionaryAddValue(v30, @"IsURLPlaybackEnabled", v44);
  uint64_t v153 = FigEndpointGetCMBaseObject();
  uint64_t v154 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v154) {
    uint64_t v155 = v154;
  }
  else {
    uint64_t v155 = 0;
  }
  unsigned int v156 = *(void (**)(uint64_t, void, const __CFAllocator *, CFTypeRef *))(v155 + 48);
  if (v156) {
    v156(v153, *MEMORY[0x1E4F20CD0], alloc, &v218);
  }
  if (v218)
  {
    CFDictionaryAddValue(v30, @"AirPlayVodkaVersion", v218);
    if (v218)
    {
      CFRelease(v218);
      CFTypeRef v218 = 0;
    }
  }
  if (FigCFEqual()) {
    unsigned int v157 = v45;
  }
  else {
    unsigned int v157 = v44;
  }
  CFDictionaryAddValue(v30, @"IsPlaybackTokenChanged", v157);
  int v29 = v208;
LABEL_311:
  if (!v212)
  {
LABEL_317:
    if (*(unsigned char *)(v1 + 65) || *(void *)(v1 + 56) || *(void *)(v1 + 48) || !*(unsigned char *)(v1 + 66))
    {
      if (!v29)
      {
        unsigned __int8 v52 = 4;
        if (v212)
        {
          int v29 = 0;
          int v27 = 0;
          BOOL v212 = 1;
        }
        else
        {
          BOOL v212 = 0;
          int v29 = 0;
          int v27 = 0;
          if (v11) {
            unsigned __int8 v52 = 5;
          }
          else {
            unsigned __int8 v52 = 4;
          }
        }
        goto LABEL_331;
      }
      int v27 = 0;
      char v160 = v205;
      BOOL v161 = v205 == 0;
      char v162 = 3;
    }
    else
    {
      if (!v29)
      {
        if (v212)
        {
          int v29 = 0;
          int v27 = 0;
          BOOL v212 = 1;
          unsigned __int8 v52 = 2;
          goto LABEL_331;
        }
        if (v11)
        {
LABEL_135:
          unsigned __int8 v52 = 0;
          int v75 = 0;
          int v27 = 0;
          goto LABEL_380;
        }
        BOOL v212 = 0;
        int v29 = 0;
      }
      int v27 = 0;
      char v160 = v205;
      BOOL v161 = v205 == 0;
      char v162 = 1;
    }
    if (v161) {
      unsigned __int8 v52 = v162;
    }
    else {
      unsigned __int8 v52 = v162 + 1;
    }
    char v210 = v160 ^ 1;
    goto LABEL_331;
  }
  CFDictionaryAddValue(v30, @"IsBufferedAudioEnabled", v44);
  if (HaveSameID) {
    uint64_t v158 = v45;
  }
  else {
    uint64_t v158 = v44;
  }
  CFDictionaryAddValue(v30, @"IsBufferedAudioStreamChanged", v158);
  *(unsigned char *)(v1 + 240) = 0;
  int v159 = playerairplay_copyRoutingContext(v1, &v216);
  if (!v159)
  {
    playerairplayroute_updateRoutingRegistryInternal(v1, (uint64_t)v216);
    goto LABEL_317;
  }
  int v27 = v159;
  BOOL v212 = 1;
LABEL_78:
  unsigned __int8 v52 = 5;
LABEL_331:
  int v75 = *(const void **)(v1 + 56);
  if (v75) {
    CFRetain(*(CFTypeRef *)(v1 + 56));
  }
  playerairplayroute_stopEndpointNotificationListeners(v1);
  uint64_t v163 = *(void *)(v1 + 48);
  if (v163 && !playerairplayroute_endpointStreamsHaveSameID(v163, (uint64_t)v222)) {
    FigEndpointRelinquishStreamResource();
  }
  unsigned int v164 = *(const void **)(v1 + 40);
  if (v164)
  {
    CFRelease(v164);
    *(void *)(v1 + 40) = 0;
  }
  unsigned int v165 = *(const void **)(v1 + 96);
  if (v165)
  {
    CFRelease(v165);
    *(void *)(v1 + 96) = 0;
  }
  unsigned int v166 = *(const void **)(v1 + 112);
  if (v166)
  {
    CFRelease(v166);
    *(void *)(v1 + 112) = 0;
  }
  *(unsigned char *)(v1 + 120) = 0;
  *(_WORD *)(v1 + 65) = 256;
  unsigned int v167 = *(const void **)(v1 + 56);
  if (v167)
  {
    CFRelease(v167);
    *(void *)(v1 + 56) = 0;
  }
  unsigned int v168 = *(const void **)(v1 + 72);
  if (v168)
  {
    CFRelease(v168);
    *(void *)(v1 + 72) = 0;
  }
  double v169 = *(const void **)(v1 + 48);
  if (v169)
  {
    CFRelease(v169);
    *(void *)(v1 + 48) = 0;
  }
  if (!v27)
  {
    if (v29)
    {
      *(unsigned char *)(v1 + 65) = v29;
      double v170 = *(const void **)(v1 + 56);
      *(void *)(v1 + 56) = v28;
      if (v28) {
        CFRetain(v28);
      }
      if (v170) {
        CFRelease(v170);
      }
      double v171 = *(const void **)(v1 + 72);
      CFTypeRef v172 = v221;
      *(void *)(v1 + 72) = v221;
      if (v172) {
        CFRetain(v172);
      }
      if (v171) {
        CFRelease(v171);
      }
    }
    if (v212)
    {
      unsigned int v173 = *(const void **)(v1 + 48);
      CFTypeRef v174 = v222;
      *(void *)(v1 + 48) = v222;
      if (v174) {
        CFRetain(v174);
      }
      if (v173) {
        CFRelease(v173);
      }
    }
    double v175 = *(const void **)(v1 + 96);
    *(void *)(v1 + 96) = v30;
    if (v30) {
      CFRetain(v30);
    }
    if (v175) {
      CFRelease(v175);
    }
    double v176 = *(const void **)(v1 + 112);
    unsigned int v177 = value;
    *(void *)(v1 + 112) = value;
    if (v177) {
      CFRetain(v177);
    }
    if (v176) {
      CFRelease(v176);
    }
    OSType v178 = *(const void **)(v1 + 40);
    CFTypeRef v179 = v223;
    *(void *)(v1 + 40) = v223;
    if (v179) {
      CFRetain(v179);
    }
    if (v178) {
      CFRelease(v178);
    }
    if (*(void *)(v1 + 40))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
    }
    *(unsigned char *)(v1 + 120) = v210;
    *(unsigned char *)(v1 + 66) = v11;
  }
  if (!FigCFEqual()) {
    *(unsigned char *)(v1 + 64) = 0;
  }
LABEL_380:
  if (v28) {
    CFRelease(v28);
  }
  if (v75) {
    CFRelease(v75);
  }
  if (v222) {
    CFRelease(v222);
  }
  if (value) {
    CFRelease(value);
  }
  if (v30) {
    CFRelease(v30);
  }
  if (v219) {
    CFRelease(v219);
  }
  if (v223) {
    CFRelease(v223);
  }
  if (v216) {
    CFRelease(v216);
  }
  if (v221) {
    CFRelease(v221);
  }
  if (v215) {
    CFRelease(v215);
  }
  if (theDict) {
    CFRelease(theDict);
  }
  uint64_t result = FigCFDictionaryGetBooleanIfPresent();
  if (dword_1E93510E8)
  {
    LODWORD(v228) = 0;
    BYTE4(v227) = 0;
    uint64_t v180 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v181 = v228;
    if (os_log_type_enabled(v180, BYTE4(v227))) {
      unsigned int v182 = v181;
    }
    else {
      unsigned int v182 = v181 & 0xFFFFFFFE;
    }
    if (v182)
    {
      uint64_t v183 = *(void *)(v1 + 112);
      int v184 = *(unsigned __int8 *)(v1 + 65);
      CFStringRef v185 = *(const __CFString **)(v1 + 72);
      uint64_t v187 = *(void *)(v1 + 48);
      uint64_t v186 = *(void *)(v1 + 56);
      int v188 = *(unsigned __int8 *)(v1 + 66);
      int v189 = *(unsigned __int8 *)(v1 + 120);
      *(_DWORD *)CFTypeRef cf = 136317698;
      *(void *)&cf[4] = "playerairplayroute_updateRouteInformation";
      __int16 v230 = 2048;
      uint64_t v231 = v1;
      __int16 v232 = 2082;
      uint64_t v233 = v1 + 241;
      __int16 v234 = 2112;
      *(void *)uint64_t v235 = v183;
      *(_WORD *)&v235[8] = 1024;
      int v236 = v184;
      __int16 v237 = 2048;
      CFStringRef v238 = v185;
      __int16 v239 = 2048;
      uint64_t v240 = v186;
      __int16 v241 = 2048;
      uint64_t v242 = v187;
      __int16 v243 = 1024;
      int v244 = v188;
      __int16 v245 = 1024;
      int v246 = v189;
      __int16 v247 = 1024;
      int v248 = 0;
      _os_log_send_and_compose_impl();
    }
    uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    if (dword_1E93510E8)
    {
      LODWORD(v228) = 0;
      BYTE4(v227) = 0;
      double v190 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v191 = v228;
      if (os_log_type_enabled(v190, BYTE4(v227))) {
        unsigned int v192 = v191;
      }
      else {
        unsigned int v192 = v191 & 0xFFFFFFFE;
      }
      if (v192)
      {
        *(_DWORD *)CFTypeRef cf = 136316162;
        *(void *)&cf[4] = "playerairplayroute_updateRouteInformation";
        __int16 v230 = 2048;
        uint64_t v231 = v1;
        __int16 v232 = 2082;
        uint64_t v233 = v1 + 241;
        __int16 v234 = 1024;
        *(_DWORD *)uint64_t v235 = v52;
        *(_WORD *)&v235[4] = 1024;
        *(_DWORD *)&v235[6] = v27;
        _os_log_send_and_compose_impl();
      }
      uint64_t result = fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
  }
  if (v52 - 1 < 2 || v52 - 3 < 2) {
    return (*(uint64_t (**)(void, void))(*(void *)(v1 + 144) + 16))(*(void *)(v1 + 144), *(void *)(v1 + 232));
  }
  if (v52 == 5)
  {
    double v193 = *(const void **)(v1 + 96);
    if (v193)
    {
      CFRelease(v193);
      *(void *)(v1 + 96) = 0;
    }
    return (*(uint64_t (**)(void, void))(*(void *)(v1 + 152) + 16))(*(void *)(v1 + 152), *(void *)(v1 + 232));
  }
  return result;
}

double playerairplayroute_init(_OWORD *a1)
{
  double result = 0.0;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[1] = 0u;
  return result;
}

void playerairplayroute_finalize(uint64_t a1)
{
  if (dword_1E93510E8 >= 2)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  *(unsigned char *)(a1 + 16) = 1;
  if (*(void *)(a1 + 88))
  {
    if (dword_1E93510E8)
    {
      CFTypeRef v3 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    Shareduint64_t Instance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
    uint64_t v5 = *(void *)(a1 + 88);
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    char v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    if (v8) {
      v8(SharedInstance, a1, v5);
    }
  }
  *(_WORD *)(a1 + 218) = 0;
  playerairplayroute_stopRoutingContextListeners(a1);
  unsigned int v9 = *(const void **)(a1 + 24);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 24) = 0;
  }
  unsigned int v10 = *(const void **)(a1 + 32);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 32) = 0;
  }
  if (*(void *)(a1 + 192))
  {
    playerairplayroute_stopFigAudioSessionListeners(a1);
    int v11 = *(const void **)(a1 + 192);
    if (v11) {
      CFRelease(v11);
    }
  }
  MX_RunningBoardServices_InvalidateMediaPlaybackProcessAssertion();
  dispatch_queue_t v12 = *(const void **)(a1 + 208);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 208) = 0;
  }
  uint64_t v13 = *(NSObject **)(a1 + 104);
  if (v13)
  {
    dispatch_release(v13);
    *(void *)(a1 + 104) = 0;
  }
  FigPlayerAirPlayRoute_ResumeAirPlayScreen(a1);
  if (*(void *)(a1 + 48)) {
    FigEndpointRelinquishStreamResource();
  }
  CFTypeRef v14 = *(const void **)(a1 + 56);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 56) = 0;
  }
  uint64_t v15 = *(const void **)(a1 + 48);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 48) = 0;
  }
  playerairplayroute_stopEndpointNotificationListeners(a1);
  uint64_t v16 = *(const void **)(a1 + 40);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(a1 + 40) = 0;
  }
  uint64_t v17 = *(const void **)(a1 + 96);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(a1 + 96) = 0;
  }
  CFTypeRef v18 = *(const void **)(a1 + 112);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(a1 + 112) = 0;
  }
  uint64_t v19 = *(const void **)(a1 + 88);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(a1 + 88) = 0;
  }
  uint64_t v20 = *(const void **)(a1 + 72);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(a1 + 72) = 0;
  }
  *(unsigned char *)(a1 + 120) = 0;
  uint64_t v21 = *(const void **)(a1 + 224);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(a1 + 224) = 0;
  }
  int v22 = *(const void **)(a1 + 128);
  if (v22)
  {
    _Block_release(v22);
    *(void *)(a1 + 128) = 0;
  }
  uint64_t v23 = *(const void **)(a1 + 136);
  if (v23)
  {
    _Block_release(v23);
    *(void *)(a1 + 136) = 0;
  }
  uint64_t v24 = *(const void **)(a1 + 144);
  if (v24)
  {
    _Block_release(v24);
    *(void *)(a1 + 144) = 0;
  }
  uint64_t v25 = *(const void **)(a1 + 152);
  if (v25)
  {
    _Block_release(v25);
    *(void *)(a1 + 152) = 0;
  }
  __int16 v26 = *(const void **)(a1 + 168);
  if (v26)
  {
    _Block_release(v26);
    *(void *)(a1 + 168) = 0;
  }
  int v27 = *(const void **)(a1 + 176);
  if (v27)
  {
    _Block_release(v27);
    *(void *)(a1 + 176) = 0;
  }
  long long v28 = *(const void **)(a1 + 184);
  if (v28)
  {
    _Block_release(v28);
    *(void *)(a1 + 184) = 0;
  }
  int v29 = *(const void **)(a1 + 160);
  if (v29)
  {
    _Block_release(v29);
    *(void *)(a1 + 160) = 0;
  }
  uint64_t v30 = *(const void **)(a1 + 232);
  if (v30) {
    CFRelease(v30);
  }
}

uint64_t playerairplayroute_stopRoutingContextListeners(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t playerairplayroute_stopFigAudioSessionListeners(uint64_t result)
{
  if (result && *(void *)(result + 192))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

uint64_t playerairplayroute_stopEndpointNotificationListeners(uint64_t result)
{
  if (*(void *)(result + 40))
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

void playerairplayroute_currentEndpointChangedNotificationCallback(int a1, NSObject **cf, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  char v13 = 0;
  if (dword_1E93510E8)
  {
    int v12 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (cf)
  {
    if (a5) {
      FigCFDictionaryGetBooleanIfPresent();
    }
    if (cf[13])
    {
      CFRetain(cf);
      char v8 = cf[13];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __playerairplayroute_currentEndpointChangedNotificationCallback_block_invoke;
      block[3] = &__block_descriptor_tmp_94_0;
      block[4] = cf;
      char v10 = v13;
      dispatch_async(v8, block);
    }
  }
}

void playerairplayroute_routeConfigUpdatedNotificationCallback(int a1, void *a2, int a3, int a4, CFDictionaryRef theDict)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (dword_1E93510E8)
  {
    int v12 = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (theDict)
  {
    CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F75618]);
    if (FigCFEqual())
    {
      if (dword_1E93510E8)
      {
        int v12 = 0;
        os_log_type_t type = OS_LOG_TYPE_DEFAULT;
        char v8 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      if (a2[13])
      {
        CFRetain(a2);
        unsigned int v9 = a2[13];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = __playerairplayroute_routeConfigUpdatedNotificationCallback_block_invoke;
        block[3] = &__block_descriptor_tmp_95_0;
        block[4] = a2;
        dispatch_async(v9, block);
      }
    }
  }
}

void __playerairplayroute_currentEndpointChangedNotificationCallback_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 16)) {
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 40))
  {
    (*(void (**)(void, void))(*(void *)(v2 + 160) + 16))(*(void *)(v2 + 160), *(void *)(v2 + 232));
    uint64_t v2 = *(void *)(a1 + 32);
  }
  playerairplayroute_pickableRoutesChangedGuts(v2);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
LABEL_5:
    CFRelease((CFTypeRef)v2);
  }
}

void __playerairplayroute_routeConfigUpdatedNotificationCallback_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (v2[16] || (playerairplayroute_pickableRoutesChangedGuts((uint64_t)v2), (uint64_t v2 = *(unsigned char **)(a1 + 32)) != 0))
  {
    CFRelease(v2);
  }
}

uint64_t playerairplayroute_playbackWillBeInterruptedNotificationCallback(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 168) + 16))();
}

void playerairplayroute_overlayPresentDidChangeNotificationCallback(int a1, NSObject **cf)
{
}

uint64_t playerairplayroute_routingContextDidChangeNotificationCallback(int a1, NSObject **cf)
{
  return FigPlayerAirPlayRoute_ResetRoutingContextIfNeeded(cf);
}

const void *playerairplayroute_isActiveDidChange(int a1, uint64_t a2, int a3, uint64_t a4, CFDictionaryRef theDict)
{
  if (theDict) {
    double result = CFDictionaryGetValue(theDict, (const void *)*MEMORY[0x1E4F75CC8]);
  }
  else {
    double result = 0;
  }
  int v8 = result == (const void *)*MEMORY[0x1E4F1CFD0];
  if (*(void *)(a2 + 192) == a4 && *(unsigned __int8 *)(a2 + 218) != v8) {
    *(unsigned char *)(a2 + 218) = v8;
  }
  return result;
}

void playerairplayroute_audioBehaviorOrPrefersConcurrentAirPlayAudioDidChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a2 + 192) == a4 && playerairplayroute_updateAudioSessionPolicyForBuffered(a2))
  {
    playerairplayroute_pickableRoutesChangedGuts(a2);
  }
}

void playerairplayroute_audioModeDidChange(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef cf = 0;
  if (!*(unsigned char *)(a2 + 16) && *(void *)(a2 + 192) == a4)
  {
    if (a4)
    {
      uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v6)
      {
        uint64_t v7 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
        if (v7) {
          v7(a4, *MEMORY[0x1E4F75F00], *MEMORY[0x1E4F1CF80], &cf);
        }
      }
    }
    (*(void (**)(void))(*(void *)(a2 + 184) + 16))();
    if (cf) {
      CFRelease(cf);
    }
  }
}

void playerairplay_checkIfPrimaryAppChanged(NSObject **cf)
{
  if (cf)
  {
    if (cf[13])
    {
      CFRetain(cf);
      uint64_t v2 = cf[13];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __playerairplay_checkIfPrimaryAppChanged_block_invoke;
      block[3] = &__block_descriptor_tmp_96_0;
      block[4] = cf;
      dispatch_async(v2, block);
    }
  }
}

void __playerairplay_checkIfPrimaryAppChanged_block_invoke(uint64_t a1)
{
  CFTypeRef cf = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 16)) {
    goto LABEL_9;
  }
  uint64_t v3 = *(void *)(v2 + 192);
  if (v3)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v4)
    {
      uint64_t v5 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v4 + 48);
      if (v5) {
        v5(v3, *MEMORY[0x1E4F75050], *MEMORY[0x1E4F1CF80], &cf);
      }
    }
    FigCFEqual();
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 176) + 16))();
    if (cf) {
      CFRelease(cf);
    }
  }
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
LABEL_9:
  }
    CFRelease((CFTypeRef)v2);
}

uint64_t playerairplayroute_updateAudioSessionPolicyForBuffered(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int valuePtr = 8;
  uint64_t v2 = *(void *)(a1 + 192);
  CFMutableDictionaryRef Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v4 = Mutable;
  CFTypeRef cf = 0;
  if (v2) {
    BOOL v5 = Mutable == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    int v12 = 0;
    if (!Mutable) {
      goto LABEL_40;
    }
    goto LABEL_38;
  }
  CFArrayAppendValue(Mutable, (const void *)*MEMORY[0x1E4F75EC8]);
  CFArrayAppendValue(v4, (const void *)*MEMORY[0x1E4F76248]);
  CFArrayAppendValue(v4, (const void *)*MEMORY[0x1E4F761A0]);
  CFArrayAppendValue(v4, (const void *)*MEMORY[0x1E4F764E0]);
  CFArrayAppendValue(v4, (const void *)*MEMORY[0x1E4F76580]);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6)
  {
    uint64_t v7 = *(void (**)(uint64_t, __CFArray *, CFTypeRef *, void))(v6 + 112);
    if (v7) {
      v7(v2, v4, &cf, 0);
    }
  }
  FigCFDictionaryGetValue();
  CFNumberRef Value = (const __CFNumber *)FigCFDictionaryGetValue();
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
  }
  FigCFDictionaryGetValue();
  uint64_t v9 = FigCFDictionaryGetValue();
  FigCFDictionaryGetValue();
  BOOL v10 = valuePtr == 32 || valuePtr == 16;
  if (v10 && !v9)
  {
    if (dword_1E93510E8) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
  if (FigCFEqual())
  {
    if (dword_1E93510E8)
    {
LABEL_20:
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      int v12 = 1;
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      goto LABEL_38;
    }
LABEL_37:
    int v12 = 1;
    goto LABEL_38;
  }
  if (FigCFEqual()
    || FigCFEqual() && !v9
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual()
    || FigCFEqual())
  {
    if (dword_1E93510E8) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
  if (FigCFEqual())
  {
    if (dword_1E93510E8) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
  if (FigCFEqual())
  {
    if (dword_1E93510E8) {
      goto LABEL_20;
    }
    goto LABEL_37;
  }
  int v12 = 0;
LABEL_38:
  CFRelease(v4);
  if (cf) {
    CFRelease(cf);
  }
LABEL_40:
  if (v12 == *(unsigned __int8 *)(a1 + 220)) {
    return 0;
  }
  *(unsigned char *)(a1 + 220) = v12;
  playerairplayroute_updateRoutingRegistry((NSObject **)a1);
  return 1;
}

void playerairplayroute_endpointStreamsChangedCallback(int a1, NSObject **cf)
{
  if (cf)
  {
    if (cf[13])
    {
      CFRetain(cf);
      uint64_t v3 = cf[13];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __playerairplayroute_endpointStreamsChangedCallback_block_invoke;
      block[3] = &__block_descriptor_tmp_103;
      block[4] = cf;
      dispatch_async(v3, block);
    }
  }
}

void __playerairplayroute_endpointStreamsChangedCallback_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (v2[16] || (playerairplayroute_pickableRoutesChangedGuts(), (uint64_t v2 = *(unsigned char **)(a1 + 32)) != 0))
  {
    CFRelease(v2);
  }
}

unsigned int *playerairplayroute_createOrReleaseClientAssertionIfNeeded(unsigned int *result)
{
  if (result)
  {
    uint64_t v1 = result;
    double result = (unsigned int *)result[50];
    if (result)
    {
      if (*((void *)v1 + 26))
      {
        if (!*((unsigned char *)v1 + 216) && !*((unsigned char *)v1 + 217))
        {
          MX_RunningBoardServices_InvalidateMediaPlaybackProcessAssertion();
          double result = (unsigned int *)*((void *)v1 + 26);
          if (result)
          {
            CFRelease(result);
            double result = 0;
LABEL_11:
            *((void *)v1 + 26) = result;
          }
        }
      }
      else if (*((unsigned char *)v1 + 216) || *((unsigned char *)v1 + 217))
      {
        double result = (unsigned int *)MX_RunningBoardServices_CreateMediaPlaybackProcessAssertionForPID();
        goto LABEL_11;
      }
    }
  }
  return result;
}

void __playerairplayroute_updateRoutingContextUUID_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (v2[16]) {
    goto LABEL_9;
  }
  if (!FigCFEqual())
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v3 = *(const void **)(a1 + 40);
    BOOL v5 = *(const void **)(v4 + 32);
    *(void *)(v4 + 32) = v3;
    if (v3) {
      CFRetain(v3);
    }
    if (v5) {
      CFRelease(v5);
    }
    playerairplayroute_resetRoutingContextIfNeededInternal(*(void *)(a1 + 32));
  }
  uint64_t v2 = *(unsigned char **)(a1 + 32);
  if (v2) {
LABEL_9:
  }
    CFRelease(v2);
  uint64_t v6 = *(const void **)(a1 + 40);
  if (v6)
  {
    CFRelease(v6);
  }
}

void __playerairplayroute_updateRoutingRegistry_block_invoke(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (!playerairplay_copyRoutingContext(*(void *)(a1 + 32), &cf)) {
    playerairplayroute_updateRoutingRegistryInternal(*(void *)(a1 + 32), (uint64_t)cf);
  }
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    CFRelease(v2);
  }
  CFTypeRef v3 = cf;
  if (cf)
  {
    CFRelease(v3);
  }
}

void playerairplayroute_updateRoutingRegistryInternal(uint64_t a1, uint64_t a2)
{
  cf[26] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  if (a2)
  {
    uint64_t v4 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v5 = v4 ? v4 : 0;
    uint64_t v6 = *(void (**)(uint64_t, void, void, CFTypeRef *))(v5 + 48);
    if (v6) {
      v6(a2, *MEMORY[0x1E4F75728], *MEMORY[0x1E4F1CF80], cf);
    }
  }
  if (dword_1E93510E8)
  {
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  Shareduint64_t Instance = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
  uint64_t v9 = *(void *)(a1 + 88);
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  int v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  if (!v12 || v12(SharedInstance, a1, v9)) {
    goto LABEL_22;
  }
  uint64_t v13 = *(const void **)(a1 + 88);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 88) = 0;
  }
  CFPreferenceNumberWithCFAllocatorRef Default = FigGetCFPreferenceNumberWithDefault();
  if (cf[0])
  {
    if (*(unsigned char *)(a1 + 80)
      && !*(unsigned char *)(a1 + 240)
      && !CFPreferenceNumberWithDefault
      && !*(unsigned char *)(a1 + 220)
      && !*(unsigned char *)(a1 + 219))
    {
      uint64_t v15 = FigBufferedAirPlayGlobalRoutingRegistryGetSharedInstance();
      CFTypeRef v16 = cf[0];
      uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 16);
      uint64_t v18 = v17 ? v17 : 0;
      uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, CFTypeRef))(v18 + 8);
      if (v19)
      {
        if (!v19(v15, a1, v16))
        {
          uint64_t v20 = *(const void **)(a1 + 88);
          CFTypeRef v21 = cf[0];
          *(CFTypeRef *)(a1 + 88) = cf[0];
          if (v21) {
            CFRetain(v21);
          }
          if (v20) {
            CFRelease(v20);
          }
        }
      }
    }
LABEL_22:
    if (cf[0]) {
      CFRelease(cf[0]);
    }
  }
}

void __playerairplayroute_setAirPlayVideoIsActive_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 16)) {
    goto LABEL_2;
  }
  uint64_t v3 = *(void *)(v2 + 192);
  if (!v3) {
    goto LABEL_2;
  }
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5)
  {
    uint64_t v6 = *(void (**)(uint64_t, void, void))(v5 + 56);
    if (v6) {
      v6(v3, *MEMORY[0x1E4F75E68], *v4);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  *(unsigned char *)(v7 + 216) = *(unsigned char *)(a1 + 40);
  playerairplayroute_createOrReleaseClientAssertionIfNeeded((unsigned int *)v7);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
LABEL_2:
    CFRelease((CFTypeRef)v2);
  }
}

void __playerairplayroute_setAudioOnlyAirPlayVideoIsActive_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 16)) {
    goto LABEL_2;
  }
  uint64_t v3 = *(void *)(v2 + 192);
  if (!v3) {
    goto LABEL_2;
  }
  if (*(unsigned char *)(a1 + 40)) {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v4 = (void *)MEMORY[0x1E4F1CFC8];
  }
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v5)
  {
    uint64_t v6 = *(void (**)(uint64_t, void, void))(v5 + 56);
    if (v6) {
      v6(v3, *MEMORY[0x1E4F75F08], *v4);
    }
  }
  uint64_t v7 = *(void *)(a1 + 32);
  *(unsigned char *)(v7 + 217) = *(unsigned char *)(a1 + 40);
  playerairplayroute_createOrReleaseClientAssertionIfNeeded((unsigned int *)v7);
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
LABEL_2:
    CFRelease((CFTypeRef)v2);
  }
}

uint64_t playerairplayroute_endpointStreamsHaveSameID(uint64_t a1, uint64_t a2)
{
  CFTypeRef v14 = 0;
  CFTypeRef cf = 0;
  uint64_t v3 = (void *)MEMORY[0x1E4F21368];
  if (!a1)
  {
LABEL_7:
    if (!a2) {
      goto LABEL_8;
    }
LABEL_11:
    uint64_t CMBaseObject = FigEndpointStreamGetCMBaseObject();
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v9) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v11 = *(unsigned int (**)(uint64_t, void, void, CFTypeRef *))(v10 + 48);
    if (!v11 || v11(CMBaseObject, *v3, 0, &v14)) {
      goto LABEL_17;
    }
LABEL_16:
    uint64_t v12 = FigCFEqual();
    goto LABEL_18;
  }
  uint64_t v4 = FigEndpointStreamGetCMBaseObject();
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v6 + 48);
  if (v7)
  {
    LODWORD(a1) = v7(v4, *v3, 0, &cf);
    goto LABEL_7;
  }
  LODWORD(a1) = -12782;
  if (a2) {
    goto LABEL_11;
  }
LABEL_8:
  if (!a1) {
    goto LABEL_16;
  }
LABEL_17:
  FigSignalErrorAt();
  uint64_t v12 = 0;
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
  if (v14) {
    CFRelease(v14);
  }
  return v12;
}

void getBuildNumberFromVersionString(CFStringRef theString, SInt32 *a2, SInt32 *a3)
{
  if (theString)
  {
    CFArrayRef ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString, @".");
    CFArrayRef v6 = ArrayBySeparatingStrings;
    if (ArrayBySeparatingStrings && CFArrayGetCount(ArrayBySeparatingStrings) > 1)
    {
      if (a2)
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v6, 0);
        if (!ValueAtIndex)
        {
LABEL_13:
          CFRelease(v6);
          return;
        }
        *a2 = CFStringGetIntValue(ValueAtIndex);
      }
      if (a3)
      {
        CFStringRef v8 = (const __CFString *)CFArrayGetValueAtIndex(v6, 1);
        if (v8) {
          *a3 = CFStringGetIntValue(v8);
        }
      }
      goto LABEL_13;
    }
    if (dword_1E93510E8)
    {
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    if (v6) {
      goto LABEL_13;
    }
  }
}

uint64_t RIFFAtomStreamInitWithByteStream(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  CFNumberRef number = 0;
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, void, CFNumberRef *))(v10 + 48);
  if (!v11) {
    return 4294954514;
  }
  uint64_t v12 = *MEMORY[0x1E4F1EC50];
  uint64_t v16 = 0;
  uint64_t result = v11(CMBaseObject, v12, 0, &number);
  if (!result)
  {
    CFNumberGetValue(number, kCFNumberSInt64Type, &v16);
    CFRelease(number);
    if (a2 < 0) {
      return FigSignalErrorAt();
    }
    uint64_t v14 = v16;
    uint64_t v15 = v16 - a2;
    if (v16 <= a2)
    {
      return FigSignalErrorAt();
    }
    else
    {
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)(a4 + 64) = 0u;
      *(_OWORD *)(a4 + 80) = 0u;
      *(unsigned char *)a4 = a3;
      *(void *)(a4 + 8) = a1;
      *(void *)(a4 + 16) = v14;
      *(void *)(a4 + 24) = ReadBytesFromByteStreamDataSource;
      *(void *)(a4 + 32) = ReadBBufFromByteStreamDataSource;
      *(void *)(a4 + 40) = a2;
      *(void *)(a4 + 48) = v15;
      return CommonRIFFStreamInitialization(a4);
    }
  }
  return result;
}

uint64_t ReadBytesFromByteStreamDataSource(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 8);
  if (!v12) {
    return 4294954514;
  }

  return v12(v9, a2, a3, a4, a5);
}

uint64_t ReadBBufFromByteStreamDataSource(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a1;
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 32);
  if (!v12) {
    return 4294954514;
  }

  return v12(v9, a2, a3, a4, a5);
}

uint64_t CommonRIFFStreamInitialization(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int64_t v3 = *(void *)(a1 + 48) + v2;
  uint64_t v8 = 0;
  uint64_t v4 = (uint64_t *)(a1 + 72);
  uint64_t result = ReadRIFFHeader(a1 + 8, v2, v3, (unsigned int *)(a1 + 64), (void *)(a1 + 72), (unsigned int *)(a1 + 88), &v8);
  if (!result)
  {
    uint64_t v6 = *v4;
    if ((unint64_t)*v4 >= 8 && *(void *)(a1 + 40) + v6 <= v3)
    {
      uint64_t result = 0;
      uint64_t v7 = v8;
      *(void *)(a1 + 56) = v8;
      *(void *)(a1 + 80) = v6 - v7;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t RIFFAtomStreamInitWithParent(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a3 = 0;
  long long v3 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a3 + 8) = v3;
  uint64_t v4 = *(void *)(a1 + 56) + *(void *)(a1 + 40);
  unint64_t v5 = *(void *)(a1 + 80);
  *(void *)(a3 + 40) = v4;
  *(void *)(a3 + 48) = v5;
  if (v5 < a2) {
    goto LABEL_5;
  }
  unint64_t v8 = v5 + v4;
  uint64_t v13 = 0;
  uint64_t v9 = (uint64_t *)(a3 + 72);
  uint64_t result = ReadRIFFHeader(a3 + 8, v4 + a2, v5 + v4, (unsigned int *)(a3 + 64), (void *)(a3 + 72), (unsigned int *)(a3 + 88), &v13);
  if (result) {
    return result;
  }
  uint64_t v11 = *v9;
  if ((unint64_t)*v9 >= 8 && v11 + a2 + *(void *)(a3 + 40) <= v8)
  {
    uint64_t result = 0;
    uint64_t v12 = v13;
    *(void *)(a3 + 56) = v13 + a2;
    *(void *)(a3 + 80) = v11 - v12;
  }
  else
  {
LABEL_5:
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t ReadRIFFHeader(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int *a4, void *a5, unsigned int *a6, void *a7)
{
  uint64_t v7 = a2 + 8;
  if (a2 + 8 > a3) {
    return 4294954953;
  }
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t *))(a1 + 16))(a1, 8, a2, &v19, &v18);
  if (!result)
  {
    if (v18 != 8) {
      return FigSignalErrorAt();
    }
    unsigned int v16 = bswap32(v19);
    LODWORD(v19) = v16;
    if ((v19 & 0x100000000) != 0) {
      uint64_t v17 = 9;
    }
    else {
      uint64_t v17 = 8;
    }
    *a5 = v17 + HIDWORD(v19);
    *a7 = 8;
    if (v16 != 1380533830 && v16 != 1279873876) {
      goto LABEL_17;
    }
    if (a2 + 12 > a3) {
      return FigSignalErrorAt();
    }
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t *))(a1 + 16))(a1, 4, v7, a6, &v18);
    if (!result && v18 != 4) {
      uint64_t result = FigSignalErrorAt();
    }
    if (!result)
    {
      *a6 = bswap32(*a6);
      *a7 += 4;
      unsigned int v16 = v19;
LABEL_17:
      uint64_t result = 0;
      *a4 = v16;
    }
  }
  return result;
}

uint64_t RIFFAtomStreamGetCurrentAtomTypeAndDataLength(uint64_t a1, _DWORD *a2, void *a3)
{
  if (a2) {
    *a2 = *(_DWORD *)(a1 + 64);
  }
  if (a3) {
    *a3 = *(void *)(a1 + 80);
  }
  return 0;
}

uint64_t RIFFAtomStreamGetCurrentAtomLISTType(uint64_t a1, _DWORD *a2)
{
  int v2 = *(_DWORD *)(a1 + 64);
  if (v2 != 1380533830 && v2 != 1279873876) {
    return 4294954951;
  }
  uint64_t result = 0;
  *a2 = *(_DWORD *)(a1 + 88);
  return result;
}

uint64_t RIFFAtomStreamReadCurrentAtomData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a1 + 80);
  if ((uint64_t)v4 <= a2 || a3 + a2 > v4)
  {
    return FigSignalErrorAt();
  }
  else
  {
    uint64_t v8 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(a1 + 24))(a1 + 8, a3, *(void *)(a1 + 40) + a2 + *(void *)(a1 + 56), a4, &v8);
    if (!result)
    {
      if (v8 == a3) {
        return 0;
      }
      else {
        return FigSignalErrorAt();
      }
    }
  }
  return result;
}

uint64_t RIFFAtomStreamGetCurrentAtomGlobalOffset(void *a1, void *a2, void *a3)
{
  if (a2) {
    *a2 = a1[7] + a1[5] - a1[9] + a1[10];
  }
  if (a3) {
    *a3 = a1[9];
  }
  return 0;
}

uint64_t RIFFAtomStreamReadCurrentAtomDataAndCreateBBuf(uint64_t a1, uint64_t a2, size_t a3, CMBlockBufferRef *a4)
{
  uint64_t v4 = *(void *)(a1 + 80);
  if (v4 <= a2 || a3 + a2 > v4)
  {
    return FigSignalErrorAt();
  }
  else
  {
    CMBlockBufferRef sourceBuffer = 0;
    uint64_t v13 = 0;
    if (a3) {
      size_t v8 = a3;
    }
    else {
      size_t v8 = v4 - a2;
    }
    uint64_t v9 = (*(uint64_t (**)(uint64_t, size_t, uint64_t, CMBlockBufferRef *, uint64_t *))(a1 + 32))(a1 + 8, v8, *(void *)(a1 + 40) + a2 + *(void *)(a1 + 56), &sourceBuffer, &v13);
    if (!v9)
    {
      if (v13 == v8)
      {
        if (CMBlockBufferIsRangeContiguous(sourceBuffer, 0, v8))
        {
          uint64_t v9 = 0;
          *a4 = sourceBuffer;
        }
        else
        {
          CMBlockBufferRef blockBufferOut = 0;
          uint64_t v9 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], sourceBuffer, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, v8, 0, &blockBufferOut);
          CMBlockBufferRef v10 = sourceBuffer;
          *a4 = blockBufferOut;
          if (v10) {
            CFRelease(v10);
          }
        }
      }
      else
      {
        if (sourceBuffer) {
          CFRelease(sourceBuffer);
        }
        return FigSignalErrorAt();
      }
    }
    return v9;
  }
}

uint64_t RIFFAtomStreamAdvanceToNextAtom(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 48);
  uint64_t v2 = *(void *)(a1 + 80) + *(void *)(a1 + 56);
  if (v2 == v1) {
    return 4294954956;
  }
  unsigned int v13 = 0;
  unint64_t v12 = 0;
  unsigned int v11 = 0;
  uint64_t v10 = 0;
  uint64_t v5 = *(void *)(a1 + 40);
  int64_t v6 = v5 + v1;
  uint64_t result = ReadRIFFHeader(a1 + 8, v5 + v2, v5 + v1, &v13, &v12, &v11, &v10);
  if (!result)
  {
    unint64_t v7 = v12;
    if (v12 >= 8 && (uint64_t)(v12 + v2 + *(void *)(a1 + 40)) <= v6)
    {
      unsigned int v8 = v13;
      *(_DWORD *)(a1 + 64) = v13;
      uint64_t v9 = v10;
      *(void *)(a1 + 56) = v10 + v2;
      *(void *)(a1 + 72) = v7;
      *(void *)(a1 + 80) = v7 - v9;
      if (v8 == 1380533830 || v8 == 1279873876)
      {
        uint64_t result = 0;
        *(_DWORD *)(a1 + 88) = v11;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t FigMutableMovieGetClassID()
{
  return sFigMutableMovieClassID;
}

uint64_t RegisterFigMutableMovieBaseType()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

uint64_t FigMutableMovieGetTypeID()
{
  MEMORY[0x19970EE10](&FigMutableMovieGetClassID_sRegisterFigMutableMovieBaseTypeOnce, RegisterFigMutableMovieBaseType);

  return CMBaseClassGetCFTypeID();
}

uint64_t FigMutableMovieCreateEmpty(const __CFAllocator *a1, __CFString *a2, const void *a3, uint64_t a4, CFTypeRef *a5)
{
  uint64_t v57 = 0;
  CFTypeRef v58 = 0;
  if (a5)
  {
    if (!a2) {
      a2 = @"com.apple.quicktime-movie";
    }
    uint64_t v7 = createMutableMovieObject(a1, a2, a3, &v58, &v57);
    if (v7) {
      goto LABEL_69;
    }
    if (v57)
    {
      if (a4)
      {
        CFTypeRef v55 = 0;
        CFTypeRef cf = 0;
        CFTypeRef v53 = 0;
        CFTypeRef v54 = 0;
        CFTypeRef v52 = 0;
        CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t FigBaseObject = FigFormatReaderGetFigBaseObject(a4);
        uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v10) {
          uint64_t v11 = v10;
        }
        else {
          uint64_t v11 = 0;
        }
        unint64_t v12 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v11 + 48);
        if (v12) {
          v12(FigBaseObject, @"PreferredVolume", v8, &cf);
        }
        CFTypeRef v13 = cf;
        if (cf)
        {
          CFTypeRef v14 = v58;
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v16 = v15 ? v15 : 0;
          uint64_t v17 = *(void (**)(CFTypeRef, __CFString *, CFTypeRef))(v16 + 56);
          if (v17) {
            v17(v14, @"PreferredVolume", v13);
          }
        }
        uint64_t v18 = FigFormatReaderGetFigBaseObject(a4);
        uint64_t v19 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v19) {
          uint64_t v20 = v19;
        }
        else {
          uint64_t v20 = 0;
        }
        CFTypeRef v21 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v20 + 48);
        if (v21) {
          v21(v18, @"PreferredRate", v8, &v55);
        }
        CFTypeRef v22 = v55;
        if (v55)
        {
          CFTypeRef v23 = v58;
          uint64_t v24 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v25 = v24 ? v24 : 0;
          __int16 v26 = *(void (**)(CFTypeRef, __CFString *, CFTypeRef))(v25 + 56);
          if (v26) {
            v26(v23, @"PreferredVolume", v22);
          }
        }
        uint64_t v27 = FigFormatReaderGetFigBaseObject(a4);
        uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v28) {
          uint64_t v29 = v28;
        }
        else {
          uint64_t v29 = 0;
        }
        uint64_t v30 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v29 + 48);
        if (v30) {
          v30(v27, @"MovieMatrix", v8, &v54);
        }
        CFTypeRef v31 = v54;
        if (v54)
        {
          CFTypeRef v32 = v58;
          uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v34 = v33 ? v33 : 0;
          uint64_t v35 = *(void (**)(CFTypeRef, __CFString *, CFTypeRef))(v34 + 56);
          if (v35) {
            v35(v32, @"MovieMatrix", v31);
          }
        }
        uint64_t v36 = FigFormatReaderGetFigBaseObject(a4);
        uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v37) {
          uint64_t v38 = v37;
        }
        else {
          uint64_t v38 = 0;
        }
        int v39 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v38 + 48);
        if (v39)
        {
          v39(v36, @"Timescale", v8, &v53);
          CFTypeRef v40 = v53;
          if (v53)
          {
            CFTypeRef v41 = v58;
            uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v43 = v42 ? v42 : 0;
            size_t v44 = *(void (**)(CFTypeRef, __CFString *, CFTypeRef))(v43 + 56);
            if (v44) {
              v44(v41, @"MovieTimeScale", v40);
            }
          }
        }
        FigMetadataCopyMovieMetadata(a4, v8, (__CFArray **)&v52);
        CFTypeRef v45 = v52;
        if (v52)
        {
          CFTypeRef v46 = v58;
          uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
          uint64_t v48 = v47 ? v47 : 0;
          uint64_t v49 = *(void (**)(CFTypeRef, __CFString *, CFTypeRef))(v48 + 56);
          if (v49) {
            v49(v46, @"Metadata", v45);
          }
        }
        if (cf) {
          CFRelease(cf);
        }
        if (v55) {
          CFRelease(v55);
        }
        if (v54) {
          CFRelease(v54);
        }
        if (v53) {
          CFRelease(v53);
        }
        if (v52) {
          CFRelease(v52);
        }
      }
      uint64_t v50 = 0;
      *a5 = v58;
      return v50;
    }
  }
  uint64_t v7 = FigSignalErrorAt();
LABEL_69:
  uint64_t v50 = v7;
  if (v58) {
    CFRelease(v58);
  }
  return v50;
}

uint64_t createMutableMovieObject(const __CFAllocator *a1, const void *a2, const void *a3, CFTypeRef *a4, uint64_t *a5)
{
  CFTypeRef v22 = 0;
  CFTypeRef cf = 0;
  ptr = 0;
  if (!a5)
  {
    CFMutableArrayRef Mutable = 0;
    uint64_t v19 = 4294950861;
    goto LABEL_13;
  }
  MEMORY[0x19970EE10](&FigMutableMovieGetClassID_sRegisterFigMutableMovieBaseTypeOnce, RegisterFigMutableMovieBaseType);
  uint64_t v10 = CMDerivedObjectCreate();
  if (v10) {
    goto LABEL_21;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
LABEL_20:
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_21;
  }
  uint64_t v12 = DerivedStorage;
  uint64_t v10 = MovieInformationCreate((uint64_t)a1, 3, (uint64_t *)&v22);
  if (v10)
  {
LABEL_21:
    uint64_t v19 = v10;
    CFMutableArrayRef Mutable = 0;
    goto LABEL_13;
  }
  if (!v22) {
    goto LABEL_20;
  }
  uint64_t v10 = MediaDataChunkWriterCreate((const __CFAllocator *)*MEMORY[0x1E4F1CF80], (uint64_t *)&ptr);
  if (v10) {
    goto LABEL_21;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, 0);
  if (Mutable && (CFMutableArrayRef v14 = CFArrayCreateMutable(a1, 0, 0)) != 0)
  {
    CFMutableArrayRef v15 = v14;
    *a4 = cf;
    CFTypeRef cf = 0;
    CFTypeRef v16 = CFRetain(a2);
    CFTypeRef v17 = v22;
    *(void *)(v12 + 16) = v16;
    *(void *)(v12 + 24) = v17;
    *(void *)(v12 + 32) = ptr;
    ptr = 0;
    CFTypeRef v22 = 0;
    *(void *)(v12 + 48) = FigSimpleMutexCreate();
    *(void *)(v12 + 56) = Mutable;
    *(void *)(v12 + 64) = v15;
    *(void *)(v12 + 96) = 0;
    *(_OWORD *)(v12 + 80) = kFigMutableMovie_DefaultInterleavingPeriod;
    if (a3)
    {
      CFTypeID v18 = CFGetTypeID(a3);
      if (v18 == CFDictionaryGetTypeID()) {
        FigCFDictionaryGetBooleanIfPresent();
      }
    }
    CFMutableArrayRef Mutable = 0;
    uint64_t v19 = 0;
    *a5 = v12;
  }
  else
  {
    uint64_t v19 = FigSignalErrorAt();
  }
LABEL_13:
  if (cf) {
    CFRelease(cf);
  }
  if (v22) {
    CFRelease(v22);
  }
  MediaDataChunkWriterRelease((const __CFAllocator **)ptr);
  if (Mutable) {
    CFRelease(Mutable);
  }
  return v19;
}

uint64_t FigMutableMovieCreateFromFormatReader(const __CFAllocator *a1, uint64_t a2, __CFString *a3, const void *a4, CFTypeRef *a5)
{
  *(void *)CFMutableArrayRef v15 = 0;
  CFTypeRef cf = 0;
  if (!a2 || !a5) {
    goto LABEL_17;
  }
  if (a3) {
    CFAllocatorRef v8 = a3;
  }
  else {
    CFAllocatorRef v8 = @"com.apple.quicktime-movie";
  }
  uint64_t v9 = createMutableMovieObject(a1, v8, a4, &cf, (uint64_t *)v15);
  if (v9) {
    goto LABEL_18;
  }
  if (*(void *)v15)
  {
    uint64_t v10 = *(const void **)(*(void *)v15 + 24);
    if (v10)
    {
      CFRelease(v10);
      *(void *)(*(void *)v15 + 24) = 0;
    }
    uint64_t MovieInformation = MovieFormatReaderGetMovieInformation(a2);
    uint64_t v9 = MovieInformationLockForRead(MovieInformation);
    if (!v9)
    {
      DeepCFDictionaryRef Copy = MovieInformationCreateDeepCopy(a1, MovieInformation, 3, (void *)(*(void *)v15 + 24));
      if (DeepCopy)
      {
        uint64_t updated = DeepCopy;
      }
      else
      {
        uint64_t updated = updateTrackArrayFromMovieInformation(*(uint64_t *)v15, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
        *a5 = cf;
        CFTypeRef cf = 0;
      }
      MovieInformationUnlockForRead(MovieInformation);
      goto LABEL_14;
    }
  }
  else
  {
LABEL_17:
    uint64_t v9 = FigSignalErrorAt();
  }
LABEL_18:
  uint64_t updated = v9;
LABEL_14:
  if (cf) {
    CFRelease(cf);
  }
  return updated;
}

uint64_t updateTrackArrayFromMovieInformation(uint64_t a1, CFAllocatorRef allocator)
{
  uint64_t value = 0;
  if (!a1 || !*(void *)(a1 + 24)) {
    return 4294950861;
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, 0);
  if (!Mutable) {
    return 4294954510;
  }
  CFArrayRef v5 = Mutable;
  uint64_t v6 = MovieInformationLockForRead(*(void *)(a1 + 24));
  if (v6)
  {
    uint64_t v13 = v6;
  }
  else
  {
    TrackCFIndex Count = MovieInformationGetTrackCount(*(void *)(a1 + 24));
    if (TrackCount < 1)
    {
LABEL_11:
      MEMORY[0x19970E910](*(void *)(a1 + 48));
      CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 56));
      uint64_t v12 = *(__CFArray **)(a1 + 56);
      v16.length = CFArrayGetCount(v5);
      v16.location = 0;
      CFArrayAppendArray(v12, v5, v16);
      MEMORY[0x19970E930](*(void *)(a1 + 48));
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v8 = TrackCount;
      uint64_t v9 = 0;
      while (1)
      {
        TrackForTrackIndeCGFloat x = (const void *)MovieInformationFindTrackForTrackIndex(*(void *)(a1 + 24), v9);
        if (!TrackForTrackIndex)
        {
          uint64_t v13 = 4294950872;
          goto LABEL_12;
        }
        uint64_t MutableMovieTrackObject = createMutableMovieTrackObject(allocator, *(const void **)(a1 + 24), TrackForTrackIndex, *(CFAllocatorRef **)(a1 + 32), (uint64_t *)&value);
        if (MutableMovieTrackObject)
        {
          uint64_t v13 = MutableMovieTrackObject;
          goto LABEL_12;
        }
        if (!value) {
          break;
        }
        CFArrayAppendValue(v5, value);
        if (v8 == ++v9) {
          goto LABEL_11;
        }
      }
      uint64_t v13 = 4294954510;
    }
LABEL_12:
    MovieInformationUnlockForRead(*(void *)(a1 + 24));
  }
  CFRelease(v5);
  return v13;
}

uint64_t FigMutableMovieCreateWithByteStream(const __CFAllocator *a1, const void *a2, __CFString *a3, const void *a4, CFTypeRef *a5)
{
  CFTypeRef cf = 0;
  if (a2 && a5)
  {
    if (!a3) {
      a3 = @"com.apple.quicktime-movie";
    }
    uint64_t v6 = createMutableMovieObjectWithByteStream(a1, a2, a3, a4, &cf);
    if (v6)
    {
      if (cf) {
        CFRelease(cf);
      }
    }
    else
    {
      *a5 = cf;
    }
    return v6;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t createMutableMovieObjectWithByteStream(const __CFAllocator *a1, const void *a2, const void *a3, const void *a4, CFTypeRef *a5)
{
  *(void *)CFRange v16 = 0;
  CFTypeRef cf = 0;
  uint64_t updated = createMutableMovieObject(a1, a3, a4, &cf, (uint64_t *)v16);
  if (updated) {
    goto LABEL_16;
  }
  if (!*(void *)v16)
  {
    uint64_t updated = FigSignalErrorAt();
LABEL_16:
    uint64_t v14 = updated;
    goto LABEL_12;
  }
  uint64_t updated = MoovParseByteStream(*(void *)(*(void *)v16 + 24), 9, a2, 0);
  if (updated) {
    goto LABEL_16;
  }
  uint64_t v8 = *MEMORY[0x1E4F1CF80];
  uint64_t updated = updateTrackArrayFromMovieInformation(*(uint64_t *)v16, (CFAllocatorRef)*MEMORY[0x1E4F1CF80]);
  if (updated) {
    goto LABEL_16;
  }
  uint64_t v9 = *(void *)v16;
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 48);
  if (v13)
  {
    uint64_t v14 = v13(CMBaseObject, *MEMORY[0x1E4F1EC78], v8, v9 + 8);
    if (!v14)
    {
      *a5 = cf;
      return v14;
    }
  }
  else
  {
    uint64_t v14 = 4294954514;
  }
LABEL_12:
  if (cf) {
    CFRelease(cf);
  }
  return v14;
}

uint64_t FigMutableMovieCreateWithURL(const __CFAllocator *a1, uint64_t a2, __CFString *a3, const void *a4, CFTypeRef *a5)
{
  CFTypeRef v13 = 0;
  if (a2)
  {
    if (!a5) {
      return FigSignalErrorAt();
    }
    uint64_t v9 = CMByteStreamCreateForFileURL();
    if (!v9)
    {
      if (a3) {
        uint64_t v10 = a3;
      }
      else {
        uint64_t v10 = @"com.apple.quicktime-movie";
      }
      uint64_t v11 = createMutableMovieObjectWithByteStream(a1, 0, v10, a4, &v13);
      if (v11)
      {
        if (v13) {
          CFRelease(v13);
        }
      }
      else
      {
        *a5 = v13;
      }
      return v11;
    }
    return v9;
  }

  return FigSignalErrorAt();
}

uint64_t FigMutableMovieCreateFromData(const __CFAllocator *a1, const __CFData *a2, __CFString *a3, CFTypeRef cf, CFTypeRef *a5)
{
  *(void *)CFRange v16 = 0;
  CFTypeRef cfa = 0;
  if (!a2)
  {
    uint64_t updated = FigSignalErrorAt();
    goto LABEL_18;
  }
  if (a3) {
    uint64_t v9 = a3;
  }
  else {
    uint64_t v9 = @"com.apple.quicktime-movie";
  }
  if (cf)
  {
    CFTypeID v10 = CFGetTypeID(cf);
    if (v10 == CFDictionaryGetTypeID()) {
      FigCFDictionaryGetBooleanIfPresent();
    }
  }
  BlockBufferWithCFDataNoCFDictionaryRef Copy = createMutableMovieObject(a1, v9, cf, &cfa, (uint64_t *)v16);
  if (BlockBufferWithCFDataNoCopy)
  {
LABEL_22:
    uint64_t updated = BlockBufferWithCFDataNoCopy;
    goto LABEL_18;
  }
  if (!*(void *)v16 || CFDataGetLength(a2) <= 0)
  {
    BlockBufferWithCFDataNoCFDictionaryRef Copy = FigSignalErrorAt();
    goto LABEL_22;
  }
  CFAllocatorRef v12 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  BlockBufferWithCFDataNoCFDictionaryRef Copy = FigCreateBlockBufferWithCFDataNoCopy();
  if (BlockBufferWithCFDataNoCopy) {
    goto LABEL_22;
  }
  BlockBufferWithCFDataNoCFDictionaryRef Copy = CMByteStreamCreateForBlockBuffer();
  if (BlockBufferWithCFDataNoCopy) {
    goto LABEL_22;
  }
  unsigned int v13 = MoovParseByteStream(*(void *)(*(void *)v16 + 24), 9, 0, 0);
  if (v13 + 12896 >= 7) {
    uint64_t updated = v13;
  }
  else {
    uint64_t updated = 4294950864;
  }
  if (!updated)
  {
    uint64_t updated = updateTrackArrayFromMovieInformation(*(uint64_t *)v16, v12);
    *a5 = cfa;
    CFTypeRef cfa = 0;
    return updated;
  }
LABEL_18:
  if (cfa) {
    CFRelease(cfa);
  }
  return updated;
}

CFStringRef FigMutableMovieCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigMutableMovie %p]", a1);
}

uint64_t MutableMovie_Invalidate(uint64_t a1)
{
  if (a1)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v2 = DerivedStorage;
      if (!*(unsigned char *)DerivedStorage)
      {
        CFArrayRef v3 = *(const __CFArray **)(DerivedStorage + 64);
        if (v3)
        {
          CFIndex Count = CFArrayGetCount(v3);
          if (Count >= 1)
          {
            CFAllocatorRef v5 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            unint64_t v6 = Count + 1;
            do
            {
              CFStringRef ValueAtIndex = (const void **)CFArrayGetValueAtIndex(*(CFArrayRef *)(v2 + 64), v6 - 2);
              if (ValueAtIndex)
              {
                uint64_t v8 = ValueAtIndex;
                uint64_t v9 = *ValueAtIndex;
                if (v9) {
                  CFRelease(v9);
                }
                CFAllocatorDeallocate(v5, v8);
              }
              CFArrayRemoveValueAtIndex(*(CFMutableArrayRef *)(v2 + 64), v6 - 2);
              --v6;
            }
            while (v6 > 1);
          }
        }
        if (*(void *)(v2 + 48))
        {
          MEMORY[0x19970E910]();
          CFArrayRef v10 = *(const __CFArray **)(v2 + 56);
          if (v10)
          {
            CFIndex v11 = CFArrayGetCount(*(CFArrayRef *)(v2 + 56));
            if (v11 >= 1)
            {
              unint64_t v12 = v11 + 1;
              do
              {
                unsigned int v13 = CFArrayGetValueAtIndex(v10, v12 - 2);
                CFAllocatorRef v14 = CFGetAllocator(v10);
                releaseTrack(v14, v13);
                --v12;
              }
              while (v12 > 1);
            }
            CFRelease(v10);
          }
          *(void *)(v2 + 56) = 0;
          MEMORY[0x19970E930](*(void *)(v2 + 48));
        }
        CFMutableArrayRef v15 = *(const void **)(v2 + 64);
        if (v15)
        {
          CFRelease(v15);
          *(void *)(v2 + 64) = 0;
        }
        CFRange v16 = *(const void **)(v2 + 8);
        if (v16)
        {
          CFRelease(v16);
          *(void *)(v2 + 8) = 0;
        }
        CFTypeRef v17 = *(const void **)(v2 + 40);
        if (v17)
        {
          CFRelease(v17);
          *(void *)(v2 + 40) = 0;
        }
        CFTypeID v18 = *(const void **)(v2 + 24);
        if (v18)
        {
          CFRelease(v18);
          *(void *)(v2 + 24) = 0;
        }
        uint64_t v19 = *(const void **)(v2 + 16);
        if (v19)
        {
          CFRelease(v19);
          *(void *)(v2 + 16) = 0;
        }
        uint64_t v20 = *(const void **)(v2 + 104);
        if (v20)
        {
          CFRelease(v20);
          *(void *)(v2 + 104) = 0;
        }
        MediaDataChunkWriterRelease(*(const __CFAllocator ***)(v2 + 32));
        *(void *)(v2 + 32) = 0;
        *(unsigned char *)uint64_t v2 = 1;
      }
    }
  }
  return 0;
}

uint64_t MutableMovie_Finalize(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t result = CMBaseObjectGetDerivedStorage();
    if (result)
    {
      uint64_t v2 = result;
      MutableMovie_Invalidate(v1);
      uint64_t result = *(void *)(v2 + 48);
      if (result)
      {
        uint64_t result = FigSimpleMutexDestroy();
        *(void *)(v2 + 48) = 0;
      }
    }
  }
  return result;
}

__CFString *MutableMovie_CopyDebugDescription(uint64_t a1)
{
  CFTypeRef cf = 0;
  if (!a1) {
    return 0;
  }
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 0;
  }
  CFArrayRef v3 = DerivedStorage;
  if (*DerivedStorage) {
    return 0;
  }
  uint64_t v4 = *MEMORY[0x1E4F1CF80];
  CFMutableArrayRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  if (Mutable)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v7 + 48);
    if (v8 && (v8(a1, @"Modified", v4, &cf), cf))
    {
      CFTypeID v9 = CFGetTypeID(cf);
      if (v9 == CFBooleanGetTypeID()) {
        unsigned int Value = CFBooleanGetValue((CFBooleanRef)cf);
      }
      else {
        unsigned int Value = 0;
      }
      CFRelease(cf);
    }
    else
    {
      unsigned int Value = 0;
    }
    CFStringAppendFormat(Mutable, 0, @"<FigMutableMovie %p>", a1);
    CFStringAppendFormat(Mutable, 0, @"{ modified: %d URL: %@ default media storage URL: %@ tracks: ", Value, v3[1], v3[5]);
    TrackCFIndex Count = MovieInformationGetTrackCount(v3[3]);
    if (TrackCount >= 1)
    {
      uint64_t v12 = TrackCount;
      for (uint64_t i = 0; i != v12; ++i)
      {
        TrackForTrackIndeCGFloat x = MovieInformationFindTrackForTrackIndex(v3[3], i);
        if (TrackForTrackIndex) {
          CFStringAppendFormat(Mutable, 0, @"<track ID: %d type: %d>", *(unsigned int *)(TrackForTrackIndex + 144), *(unsigned int *)(TrackForTrackIndex + 24));
        }
      }
    }
    CFStringAppendFormat(Mutable, 0, @" }");
  }
  return Mutable;
}

uint64_t MutableMovie_CopyProperty(uint64_t a1, const void *a2, const __CFAllocator *a3, __CFArray **a4)
{
  uint64_t BasicMetrics = 4294950861;
  if (a1)
  {
    if (a2)
    {
      if (a4)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          uint64_t v10 = DerivedStorage;
          if (*(unsigned char *)DerivedStorage) {
            return 4294950869;
          }
          uint64_t v11 = MovieInformationLockForRead(*(void *)(DerivedStorage + 24));
          if (v11) {
            return v11;
          }
          if (CFEqual(a2, @"PreferredVolume"))
          {
            LODWORD(cf[0]) = 1065353216;
            uint64_t v12 = *(void *)(v10 + 24);
            unsigned int v13 = cf;
            CFAllocatorRef v14 = 0;
LABEL_11:
            uint64_t BasicMetrics = MovieInformationGetBasicMetrics(v12, v14, v13, 0, 0);
            if (BasicMetrics)
            {
LABEL_15:
              MovieInformationUnlockForRead(*(void *)(v10 + 24));
              return BasicMetrics;
            }
            CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFNumberType v16 = kCFNumberFloat32Type;
            goto LABEL_13;
          }
          if (CFEqual(a2, @"PreferredRate"))
          {
            LODWORD(cf[0]) = 1065353216;
            uint64_t v12 = *(void *)(v10 + 24);
            CFAllocatorRef v14 = cf;
            unsigned int v13 = 0;
            goto LABEL_11;
          }
          if (CFEqual(a2, @"PosterTime"))
          {
LABEL_18:
            uint64_t BasicMetrics = 4294950876;
            goto LABEL_15;
          }
          if (CFEqual(a2, @"MovieDuration"))
          {
            cf[0] = 0;
            cf[1] = 0;
            *(void *)&long long v61 = 0;
            MovieInformationGetMovieDuration(*(void *)(v10 + 24), (uint64_t)cf);
            *(_OWORD *)&time1.uint64_t value = *(_OWORD *)cf;
            time1.CMTimeEpoch epoch = v61;
            CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
            if (CMTimeCompare(&time1, &time2) >= 1 && !*(unsigned char *)(v10 + 2))
            {
              memset(&time1, 0, sizeof(time1));
              getMaximumEditedTrackDuration(v10, (uint64_t)&time1);
              CMTime time2 = time1;
              *(_OWORD *)&v63.uint64_t value = *(_OWORD *)cf;
              v63.CMTimeEpoch epoch = v61;
              if (CMTimeCompare(&time2, &v63) < 0)
              {
                *(_OWORD *)CFTypeRef cf = *(_OWORD *)&time1.value;
                *(void *)&long long v61 = time1.epoch;
              }
            }
            *(_OWORD *)&time1.uint64_t value = *(_OWORD *)cf;
            time1.CMTimeEpoch epoch = v61;
            p_CMTime time1 = &time1;
LABEL_25:
            AlternateGroupArradouble y = CMTimeCopyAsDictionary(p_time1, a3);
LABEL_26:
            uint64_t BasicMetrics = 0;
            goto LABEL_14;
          }
          if (CFEqual(a2, @"MovieTimeScale"))
          {
            LODWORD(cf[0]) = 0;
            uint64_t BasicMetrics = MovieInformationGetBasicMetrics(*(void *)(v10 + 24), 0, 0, cf, 0);
            if (BasicMetrics) {
              goto LABEL_15;
            }
            CFAllocatorRef v15 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFNumberType v16 = kCFNumberSInt32Type;
LABEL_13:
            AlternateGroupArradouble y = CFNumberCreate(v15, v16, cf);
LABEL_14:
            *a4 = AlternateGroupArray;
            goto LABEL_15;
          }
          if (CFEqual(a2, @"MovieMatrix"))
          {
            int v62 = 0;
            *(_OWORD *)CFTypeRef cf = 0u;
            long long v61 = 0u;
            uint64_t BasicMetrics = MovieInformationGetBasicMetrics(*(void *)(v10 + 24), 0, 0, 0, (uint64_t)cf);
            if (BasicMetrics) {
              goto LABEL_15;
            }
            AlternateGroupArradouble y = FigMatrixToCFArray(a3, (uint64_t)cf);
            goto LABEL_14;
          }
          if (CFEqual(a2, @"URL"))
          {
            AlternateGroupArradouble y = *(__CFArray **)(v10 + 8);
            if (!AlternateGroupArray) {
              goto LABEL_26;
            }
            goto LABEL_43;
          }
          if (CFEqual(a2, @"FileType"))
          {
            AlternateGroupArradouble y = *(__CFArray **)(v10 + 16);
            if (!AlternateGroupArray) {
              goto LABEL_26;
            }
            goto LABEL_43;
          }
          if (CFEqual(a2, @"DefaultMediaDataStorageURL"))
          {
            AlternateGroupArradouble y = *(__CFArray **)(v10 + 40);
            if (!AlternateGroupArray) {
              goto LABEL_26;
            }
LABEL_43:
            AlternateGroupArradouble y = (__CFArray *)CFRetain(AlternateGroupArray);
            goto LABEL_26;
          }
          if (CFEqual(a2, @"CreationTime"))
          {
            cf[0] = 0;
            uint64_t v20 = *(void *)(v10 + 24);
            CFTypeRef v21 = cf;
            CFTypeRef v22 = 0;
LABEL_48:
            uint64_t BasicMetrics = MovieInformationGetTimeInfo(v20, v21, v22);
            if (BasicMetrics) {
              goto LABEL_15;
            }
            AlternateGroupArradouble y = CFDateCreate(a3, (double)(unint64_t)cf[0] - *MEMORY[0x1E4F1CF68]);
            goto LABEL_14;
          }
          if (CFEqual(a2, @"ModificationTime"))
          {
            cf[0] = 0;
            uint64_t v20 = *(void *)(v10 + 24);
            CFTypeRef v22 = cf;
            CFTypeRef v21 = 0;
            goto LABEL_48;
          }
          if (CFEqual(a2, @"HasCompressedMovieAtom"))
          {
            int HasCompressedMovieAtom = MovieInformationHasCompressedMovieAtom(*(void *)(v10 + 24));
            uint64_t v24 = (const void **)MEMORY[0x1E4F1CFD0];
            if (!HasCompressedMovieAtom) {
              uint64_t v24 = (const void **)MEMORY[0x1E4F1CFC8];
            }
            goto LABEL_53;
          }
          if (CFEqual(a2, @"AvailableMetadataFormats"))
          {
            CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
            __int16 v26 = copyArrayOfKnownMetadataFormats(a3);
            if (v26)
            {
              CFArrayRef v27 = v26;
              CFIndex Count = CFArrayGetCount(v26);
              if (Count >= 1)
              {
                CFIndex v29 = Count;
                for (CFIndex i = 0; i != v29; ++i)
                {
                  CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v27, i);
                  if (ValueAtIndex)
                  {
                    CFTypeRef v32 = ValueAtIndex;
                    if (MovieInformationMetadataFormatIsAvailable(*(void **)(v10 + 24), ValueAtIndex)) {
                      CFArrayAppendValue(Mutable, v32);
                    }
                  }
                }
              }
              CFArrayRef v33 = v27;
LABEL_73:
              CFRelease(v33);
            }
          }
          else
          {
            if (!CFEqual(a2, @"Metadata"))
            {
              if (CFEqual(a2, @"Tracks"))
              {
                LODWORD(cf[0]) = 0;
                TrackCFIndex Count = MovieInformationGetTrackCount(*(void *)(v10 + 24));
                if (TrackCount < 1)
                {
                  CFMutableArrayRef v48 = 0;
                  uint64_t BasicMetrics = 0;
                }
                else
                {
                  CFIndex v46 = TrackCount;
                  CFMutableArrayRef v47 = CFArrayCreateMutable(a3, TrackCount, MEMORY[0x1E4F1D510]);
                  if (!v47) {
                    goto LABEL_15;
                  }
                  CFMutableArrayRef v48 = v47;
                  uint64_t v49 = 0;
                  uint64_t BasicMetrics = 0;
                  do
                  {
                    TrackForTrackIndeCGFloat x = MovieInformationFindTrackForTrackIndex(*(void *)(v10 + 24), v49);
                    if (TrackForTrackIndex)
                    {
                      uint64_t BasicMetrics = MovieTrackGetBasicInfo(TrackForTrackIndex, 0, cf);
                      if (!BasicMetrics && LODWORD(cf[0]) != 0)
                      {
                        FigCFArrayAppendInt32();
                        uint64_t BasicMetrics = 0;
                      }
                    }
                    ++v49;
                  }
                  while (v46 != v49);
                }
                *a4 = v48;
                goto LABEL_15;
              }
              if (CFEqual(a2, @"AlternateGroupArray"))
              {
                AlternateGroupArradouble y = MovieInformationCreateAlternateGroupArray(a3, *(void *)(v10 + 24));
                goto LABEL_26;
              }
              if (CFEqual(a2, @"TrackReferenceDictionary"))
              {
                cf[0] = 0;
                uint64_t BasicMetrics = MovieInformationCreateTrackReferenceDictionary(a3, *(void *)(v10 + 24), (CFDictionaryRef *)cf);
                if (BasicMetrics) {
                  goto LABEL_15;
                }
                CFTypeRef v52 = (__CFArray *)cf[0];
              }
              else
              {
                if (CFEqual(a2, @"CouldContainFragments"))
                {
                  uint64_t v24 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_53:
                  AlternateGroupArradouble y = (__CFArray *)*v24;
                  goto LABEL_43;
                }
                if (!CFEqual(a2, @"ProtectedStatus"))
                {
                  if (!CFEqual(a2, @"Modified"))
                  {
                    if (!CFEqual(a2, @"InterleavingPeriod")) {
                      goto LABEL_18;
                    }
                    *(_OWORD *)CFTypeRef cf = *(_OWORD *)(v10 + 80);
                    *(void *)&long long v61 = *(void *)(v10 + 96);
                    p_CMTime time1 = (CMTime *)cf;
                    goto LABEL_25;
                  }
                  uint64_t v24 = (const void **)MEMORY[0x1E4F1CFD0];
                  if (!*(unsigned char *)(v10 + 1)) {
                    uint64_t v24 = (const void **)MEMORY[0x1E4F1CFC8];
                  }
                  goto LABEL_53;
                }
                uint64_t v53 = MovieInformationGetTrackCount(*(void *)(v10 + 24));
                cf[0] = 0;
                if (v53 < 1)
                {
                  uint64_t BasicMetrics = 0;
                  CFTypeRef v52 = (__CFArray *)*MEMORY[0x1E4F1CFC8];
                }
                else
                {
                  uint64_t v54 = v53;
                  uint64_t v55 = 0;
                  uint64_t BasicMetrics = 0;
                  uint64_t v56 = (__CFArray *)*MEMORY[0x1E4F1CFD0];
                  BOOL v57 = 1;
                  do
                  {
                    uint64_t v58 = MovieInformationFindTrackForTrackIndex(*(void *)(v10 + 24), v55);
                    if (v58)
                    {
                      uint64_t BasicMetrics = FigMutableMovieCopyTrackProperty(a1, *(unsigned int *)(v58 + 144), (uint64_t)a3, (uint64_t)cf);
                      unsigned int v59 = (__CFArray *)cf[0];
                      if (cf[0]) {
                        CFRelease(cf[0]);
                      }
                      if (v59 == v56) {
                        break;
                      }
                    }
                    BOOL v57 = ++v55 < v54;
                  }
                  while (v54 != v55);
                  CFTypeRef v52 = (__CFArray *)*MEMORY[0x1E4F1CFC8];
                  if (v57) {
                    CFTypeRef v52 = v56;
                  }
                }
              }
              *a4 = v52;
              goto LABEL_15;
            }
            CFMutableArrayRef Mutable = CFArrayCreateMutable(a3, 0, MEMORY[0x1E4F1D510]);
            uint64_t v34 = copyArrayOfKnownMetadataFormats(a3);
            if (v34)
            {
              CFArrayRef v35 = v34;
              CFIndex v36 = CFArrayGetCount(v34);
              if (v36 >= 1)
              {
                CFIndex v37 = v36;
                for (CFIndex j = 0; j != v37; ++j)
                {
                  int v39 = CFArrayGetValueAtIndex(v35, j);
                  if (v39)
                  {
                    CFTypeRef v40 = v39;
                    MovieMetadataItemArradouble y = MovieInformationGetMovieMetadataItemArray(*(void *)(v10 + 24), v39);
                    if (MovieMetadataItemArray)
                    {
                      CFDictionaryRef v42 = MovieMetadataItemArray;
                      uint64_t v43 = CFDictionaryCreateMutable(a3, 0, 0, 0);
                      if (v43)
                      {
                        size_t v44 = v43;
                        CFDictionaryAddValue(v43, v40, v42);
                        CFArrayAppendValue(Mutable, v44);
                        CFRelease(v44);
                      }
                    }
                  }
                }
              }
              CFArrayRef v33 = v35;
              goto LABEL_73;
            }
          }
          uint64_t BasicMetrics = 0;
          *a4 = Mutable;
          goto LABEL_15;
        }
      }
    }
  }
  return BasicMetrics;
}

uint64_t MutableMovie_SetProperty(uint64_t a1, const void *a2, const __CFNumber *a3)
{
  uint64_t v3 = 4294950861;
  if (a1)
  {
    if (a2)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        uint64_t v7 = DerivedStorage;
        if (*(unsigned char *)DerivedStorage) {
          return 4294950869;
        }
        uint64_t v8 = MovieInformationLockForWrite(*(void *)(DerivedStorage + 24));
        if (v8) {
          return v8;
        }
        if (CFEqual(a2, @"PreferredVolume"))
        {
          if (a3)
          {
            CFTypeID TypeID = CFNumberGetTypeID();
            if (TypeID == CFGetTypeID(a3))
            {
              LODWORD(valuePtr) = 1065353216;
              CFNumberGetValue(a3, kCFNumberFloat32Type, &valuePtr);
              MovieInformationSetPreferredVolume(*(void *)(v7 + 24), *(float *)&valuePtr);
LABEL_14:
              uint64_t v3 = 0;
              BOOL v11 = 1;
LABEL_15:
              *(unsigned char *)(v7 + 1) = v11;
LABEL_70:
              MovieInformationUnlockForWrite(*(void **)(v7 + 24));
              return v3;
            }
          }
          goto LABEL_69;
        }
        if (CFEqual(a2, @"PreferredRate"))
        {
          if (a3)
          {
            CFTypeID v10 = CFNumberGetTypeID();
            if (v10 == CFGetTypeID(a3))
            {
              LODWORD(valuePtr) = 1065353216;
              CFNumberGetValue(a3, kCFNumberFloat32Type, &valuePtr);
              MovieInformationSetPreferredRate(*(void *)(v7 + 24), *(float *)&valuePtr);
              goto LABEL_14;
            }
          }
LABEL_69:
          uint64_t v3 = 0;
          goto LABEL_70;
        }
        if (CFEqual(a2, @"MovieTimeScale"))
        {
          if (!a3) {
            goto LABEL_69;
          }
          CFTypeID v12 = CFNumberGetTypeID();
          if (v12 != CFGetTypeID(a3)) {
            goto LABEL_69;
          }
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
          if ((int)valuePtr > 0)
          {
            uint64_t v13 = MovieInformationSetMovieTimeScale(*(void *)(v7 + 24), valuePtr);
            goto LABEL_21;
          }
LABEL_25:
          uint64_t v3 = FigSignalErrorAt();
          goto LABEL_70;
        }
        if (CFEqual(a2, @"PosterTime"))
        {
          if (!a3) {
            goto LABEL_69;
          }
          CFTypeID v14 = CFDictionaryGetTypeID();
          if (v14 != CFGetTypeID(a3)) {
            goto LABEL_69;
          }
          goto LABEL_25;
        }
        if (CFEqual(a2, @"MovieMatrix"))
        {
          if (!a3) {
            goto LABEL_69;
          }
          CFTypeID v15 = CFArrayGetTypeID();
          if (v15 != CFGetTypeID(a3)) {
            goto LABEL_69;
          }
          int v64 = 0;
          long long valuePtr = 0u;
          long long v63 = 0u;
          uint64_t v3 = CFArrayToFigMatrix(a3, (uint64_t)&valuePtr);
          if (v3) {
            goto LABEL_70;
          }
          uint64_t v13 = MovieInformationSetMovieMatrix(*(void *)(v7 + 24), (uint64_t)&valuePtr);
LABEL_21:
          uint64_t v3 = v13;
          BOOL v11 = v13 == 0;
          goto LABEL_15;
        }
        if (CFEqual(a2, @"DefaultMediaDataStorageURL"))
        {
          if (a3)
          {
            CFTypeID v16 = CFGetTypeID(a3);
            if (v16 != CFURLGetTypeID()) {
              goto LABEL_69;
            }
            CFTypeRef v17 = *(const void **)(v7 + 40);
            *(void *)(v7 + 40) = a3;
            goto LABEL_39;
          }
          CFTypeRef v17 = *(const void **)(v7 + 40);
          *(void *)(v7 + 40) = 0;
          goto LABEL_67;
        }
        if (CFEqual(a2, @"URL"))
        {
          if (a3)
          {
            CFTypeID v18 = CFGetTypeID(a3);
            if (v18 != CFURLGetTypeID()) {
              goto LABEL_69;
            }
            CFTypeRef v17 = *(const void **)(v7 + 8);
            *(void *)(v7 + 8) = a3;
LABEL_39:
            CFRetain(a3);
            goto LABEL_67;
          }
          CFTypeRef v17 = *(const void **)(v7 + 8);
          *(void *)(v7 + 8) = 0;
LABEL_67:
          if (v17) {
            CFRelease(v17);
          }
          goto LABEL_69;
        }
        if (CFEqual(a2, @"Metadata"))
        {
          if (!a3 || (CFTypeID v19 = CFGetTypeID(a3), v19 == CFArrayGetTypeID()))
          {
            CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
            CFTypeRef v21 = copyArrayOfKnownMetadataFormats((const __CFAllocator *)*MEMORY[0x1E4F1CF80]);
            if (v21)
            {
              CFArrayRef v22 = v21;
              CFIndex Count = CFArrayGetCount(v21);
              if (Count >= 1)
              {
                CFIndex v24 = Count;
                for (CFIndex i = 0; i != v24; ++i)
                {
                  CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(v22, i);
                  if (ValueAtIndex)
                  {
                    CFArrayRef v27 = ValueAtIndex;
                    CFArrayRef v28 = CFArrayCreate(v20, 0, 0, 0);
                    if (v28)
                    {
                      CFArrayRef v29 = v28;
                      MovieInformationSetMovieMetadataItemArray(*(void *)(v7 + 24), v27, v28);
                      CFRelease(v29);
                    }
                  }
                }
                if (a3)
                {
                  CFIndex v30 = 0;
                  CFAllocatorRef v59 = v20;
                  CFIndex v60 = v24;
                  CFArrayRef v61 = v22;
                  do
                  {
                    CFTypeRef v31 = (void *)CFArrayGetValueAtIndex(v22, v30);
                    if (v31)
                    {
                      CFTypeRef v32 = v31;
                      CFMutableArrayRef Mutable = CFArrayCreateMutable(v20, 0, MEMORY[0x1E4F1D510]);
                      if (Mutable)
                      {
                        uint64_t v34 = Mutable;
                        CFIndex v35 = CFArrayGetCount(a3);
                        if (v35 >= 1)
                        {
                          CFIndex v36 = v35;
                          for (CFIndex j = 0; j != v36; ++j)
                          {
                            CFDictionaryRef v38 = (const __CFDictionary *)CFArrayGetValueAtIndex(a3, j);
                            if (v38)
                            {
                              CFDictionaryRef v39 = v38;
                              CFTypeID v40 = CFDictionaryGetTypeID();
                              if (v40 == CFGetTypeID(v39))
                              {
                                CFDictionaryGetValue(v39, @"format");
                                CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v39, @"items");
                                if (Value)
                                {
                                  CFArrayRef v42 = Value;
                                  if (FigCFEqual())
                                  {
                                    v65.length = CFArrayGetCount(v42);
                                    v65.location = 0;
                                    CFArrayAppendArray(v34, v42, v65);
                                  }
                                }
                              }
                            }
                          }
                        }
                        MovieInformationSetMovieMetadataItemArray(*(void *)(v7 + 24), v32, v34);
                        CFRelease(v34);
                        CFAllocatorRef v20 = v59;
                      }
                    }
                    ++v30;
                    CFArrayRef v22 = v61;
                  }
                  while (v30 != v60);
                }
              }
              CFRelease(v22);
            }
            goto LABEL_14;
          }
          goto LABEL_69;
        }
        if (!CFEqual(a2, @"TrackReferenceDictionary"))
        {
          if (CFEqual(a2, @"Modified"))
          {
            if (a3)
            {
              CFTypeID v57 = CFBooleanGetTypeID();
              if (v57 == CFGetTypeID(a3))
              {
                if ((const __CFNumber *)*MEMORY[0x1E4F1CFD0] != a3)
                {
                  uint64_t v3 = 0;
                  *(unsigned char *)(v7 + 1) = 0;
                  goto LABEL_70;
                }
                goto LABEL_14;
              }
            }
            goto LABEL_69;
          }
          if (CFEqual(a2, @"InterleavingPeriod"))
          {
            if (a3)
            {
              CFTypeID v58 = CFDictionaryGetTypeID();
              if (v58 == CFGetTypeID(a3))
              {
                CMTimeMakeFromDictionary((CMTime *)&valuePtr, a3);
                uint64_t v3 = 0;
                *(_OWORD *)(v7 + 80) = valuePtr;
                *(void *)(v7 + 96) = v63;
                goto LABEL_70;
              }
            }
            goto LABEL_69;
          }
          if (!CFEqual(a2, @"MovieDuration")
            && !CFEqual(a2, @"CreationTime")
            && !CFEqual(a2, @"ModificationTime")
            && !CFEqual(a2, @"Tracks")
            && !CFEqual(a2, @"AlternateGroupArray")
            && !CFEqual(a2, @"CouldContainFragments")
            && !CFEqual(a2, @"AvailableMetadataFormats")
            && !CFEqual(a2, @"FileType")
            && !CFEqual(a2, @"HasCompressedMovieAtom"))
          {
            uint64_t v3 = 4294950876;
            goto LABEL_70;
          }
          goto LABEL_25;
        }
        if (!a3) {
          goto LABEL_69;
        }
        CFTypeID v44 = CFDictionaryGetTypeID();
        if (v44 != CFGetTypeID(a3)) {
          goto LABEL_69;
        }
        int64_t v45 = CFDictionaryGetCount(a3);
        CFIndex v46 = (const void **)malloc_type_calloc(v45, 8uLL, 0x6004044C4A2DFuLL);
        if (v46)
        {
          CFMutableArrayRef v47 = (const void **)malloc_type_calloc(v45, 8uLL, 0x6004044C4A2DFuLL);
          if (v47)
          {
            CFDictionaryGetKeysAndValues(a3, v46, v47);
            if (v45 < 1)
            {
              uint64_t v3 = 0;
            }
            else
            {
              uint64_t v48 = 0;
              uint64_t v3 = 0;
              while (1)
              {
                CFStringRef v49 = (const __CFString *)v46[v48];
                CFIndex v50 = CFArrayGetCount((CFArrayRef)v47[v48]);
                if (v50 >= 1) {
                  break;
                }
LABEL_87:
                if (++v48 == v45) {
                  goto LABEL_110;
                }
              }
              CFIndex v51 = v50;
              CFIndex v52 = 0;
              while (1)
              {
                LODWORD(valuePtr) = 0;
                if (!FigCFArrayGetInt32AtIndex()) {
                  break;
                }
                CFIndex v53 = v52 + 1;
                if (!FigCFArrayGetInt32AtIndex()) {
                  break;
                }
                uint64_t v54 = *(uint64_t **)(v7 + 24);
                int v55 = convertCFStringToOSType(v49);
                uint64_t v56 = MovieInformationAddOneTrackReference(v54, v55, valuePtr, 0);
                CFIndex v52 = v53 + 1;
                if (v52 >= v51)
                {
                  uint64_t v3 = v56;
                  goto LABEL_87;
                }
              }
              uint64_t v3 = 4294954516;
            }
            goto LABEL_110;
          }
        }
        else
        {
          CFMutableArrayRef v47 = 0;
        }
        uint64_t v3 = 4294954510;
LABEL_110:
        free(v46);
        free(v47);
        goto LABEL_70;
      }
    }
  }
  return v3;
}

void releaseTrack(const __CFAllocator *a1, void *a2)
{
  if (a2)
  {
    uint64_t v4 = (const void *)a2[1];
    if (v4) {
      CFRelease(v4);
    }
    CFAllocatorRef v5 = (const void *)a2[2];
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = (const void *)a2[5];
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = (const void *)a2[6];
    if (v7) {
      CFRelease(v7);
    }
    releaseSource((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a2[16]);
    CFAllocatorDeallocate(a1, a2);
  }
}

void releaseSource(const __CFAllocator *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(const void **)(a2 + 16);
    if (v4) {
      CFRelease(v4);
    }
    CFAllocatorRef v5 = *(const void **)(a2 + 32);
    if (v5) {
      CFRelease(v5);
    }
    uint64_t v6 = *(const void **)(a2 + 24);
    if (v6) {
      CFRelease(v6);
    }
    uint64_t v7 = *(const void **)(a2 + 40);
    if (v7) {
      CFRelease(v7);
    }
    uint64_t v8 = *(const void **)(a2 + 48);
    if (v8) {
      CFRelease(v8);
    }
    CFTypeID v9 = *(const void **)(a2 + 136);
    if (v9) {
      CFRelease(v9);
    }
    deleteTimeMappingArray(*(void ***)(a2 + 64));
    deleteTimeMappingArray(*(void ***)(a2 + 72));
    deleteTimeMappingArray(*(void ***)(a2 + 80));
    deleteTimeMappingArray(*(void ***)(a2 + 88));
    MediaSampleTimingGeneratorRelease(*(void **)(a2 + 56));
    CFAllocatorDeallocate(a1, (void *)a2);
  }
}

void deleteTimeMappingArray(void **a1)
{
  if (a1)
  {
    free(*a1);
    free(a1);
  }
}

uint64_t getMaximumEditedTrackDuration@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)a2 = *MEMORY[0x1E4F1FA48];
  *(void *)(a2 + 16) = *(void *)(v4 + 16);
  MEMORY[0x19970E910](*(void *)(a1 + 48));
  CFArrayRef v5 = *(const __CFArray **)(a1 + 56);
  if (v5)
  {
    CFIndex Count = CFArrayGetCount(v5);
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), i);
        memset(&v13, 0, sizeof(v13));
        getTrackEditedDuration(a1, (uint64_t)ValueAtIndex, &v13);
        CMTime time1 = v13;
        CMTime v11 = *(CMTime *)a2;
        if (CMTimeCompare(&time1, &v11) >= 1) {
          *(CMTime *)a2 = v13;
        }
      }
    }
  }
  return MEMORY[0x19970E930](*(void *)(a1 + 48));
}

__CFArray *copyArrayOfKnownMetadataFormats(const __CFAllocator *a1)
{
  CFMutableArrayRef Mutable = CFArrayCreateMutable(a1, 0, 0);
  uint64_t v2 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, @"com.apple.quicktime.udta");
    CFArrayAppendValue(v2, @"com.apple.quicktime.mdta");
    CFArrayAppendValue(v2, @"org.mp4ra");
    CFArrayAppendValue(v2, @"com.apple.itunes");
    CFArrayAppendValue(v2, @"org.id3");
    CFArrayAppendValue(v2, @"com.apple.quicktime.HLS");
  }
  return v2;
}

uint64_t FigMutableMovieCopyTrackProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  CFTypeID v10 = *(uint64_t (**)(uint64_t, uint64_t, __CFString *, uint64_t, uint64_t))(v9 + 48);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, @"TrackProtectedStatus", a3, a4);
}

void getTrackEditedDuration(uint64_t a1@<X0>, uint64_t a2@<X1>, CMTime *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 + 16);
  EditSegmentCFIndex Count = MovieTrackGetEditSegmentCount(v6);
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)&v47[0] = 0;
  long long v9 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  long long v10 = *MEMORY[0x1E4F1FA20];
  long long v52 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  long long v53 = v9;
  long long v51 = v10;
  if (*(_DWORD *)(v8 + 24) == 1936684398
    && !*(unsigned char *)(a1 + 2)
    && !MovieTrackEditsExcludeAudioPrimingAndRemainderDuration(v8))
  {
    CFArrayRef v11 = MovieTrackCopyFormatDescriptionArray(v8);
    if (v11)
    {
      CFArrayRef v12 = v11;
      if (CFArrayGetCount(v11) >= 1)
      {
        CFStringRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v12, 0);
        MovieTrackCopyEnhancedGaplessInfo(v8, v47);
        FigGaplessInfoGetGaplessSourceTimeRange(ValueAtIndex, *(__CFDictionary **)&v47[0], &v51);
      }
      CFRelease(v12);
      if (*(void *)&v47[0]) {
        CFRelease(*(CFTypeRef *)&v47[0]);
      }
    }
  }
  uint64_t v14 = MEMORY[0x1E4F1FA48];
  long long v17 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&a3->uint64_t value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v15 = *(void *)(v14 + 16);
  a3->CMTimeEpoch epoch = v15;
  if (EditSegmentCount >= 1)
  {
    uint64_t v16 = 0;
    long long v22 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 48);
    long long v23 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 32);
    long long v20 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 80);
    long long v21 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 64);
    long long v18 = *(_OWORD *)(MEMORY[0x1E4F1FA00] + 16);
    long long v19 = *MEMORY[0x1E4F1FA00];
    do
    {
      long long v49 = 0u;
      long long v50 = 0u;
      long long v48 = 0u;
      memset(v47, 0, sizeof(v47));
      long long v43 = v23;
      long long v44 = v22;
      long long v45 = v21;
      long long v46 = v20;
      long long v41 = v19;
      long long v42 = v18;
      long long v39 = v17;
      CMTimeEpoch v40 = v15;
      if (MovieTrackGetEditSegmentWithIndex(v6, v16, v47)) {
        break;
      }
      do
      {
        long long v36 = v23;
        long long v37 = v22;
        *(_OWORD *)CFDictionaryRef v38 = v21;
        *(_OWORD *)&v38[16] = v20;
        *(_OWORD *)CMTime time1 = v19;
        *(_OWORD *)&time1[16] = v18;
        long long v31 = v47[2];
        long long v32 = v48;
        long long v33 = v49;
        long long v34 = v50;
        *(_OWORD *)CMTime lhs = v47[0];
        *(_OWORD *)&lhs[16] = v47[1];
        v29[0] = v51;
        v29[1] = v52;
        CFTypeRef v29[2] = v53;
        long long v25 = v43;
        long long v26 = v44;
        long long v27 = v45;
        long long v28 = v46;
        *(_OWORD *)CMTime rhs = v41;
        *(_OWORD *)&rhs[16] = v42;
        FigGaplessInfoAdjustEditSegmentAccordingtoGaplessAudioTimeRange((CMTime *)lhs, (uint64_t)v29, (uint64_t)rhs, (uint64_t)time1, (uint64_t)&v39);
        long long v43 = v36;
        long long v44 = v37;
        long long v45 = *(_OWORD *)v38;
        long long v46 = *(_OWORD *)&v38[16];
        long long v41 = *(_OWORD *)time1;
        long long v42 = *(_OWORD *)&time1[16];
        *(_OWORD *)CMTime lhs = *(_OWORD *)&a3->value;
        *(void *)&lhs[16] = a3->epoch;
        *(_OWORD *)CMTime rhs = *(_OWORD *)&v38[8];
        *(void *)&rhs[16] = *(void *)&v38[24];
        CMTimeAdd(a3, (CMTime *)lhs, (CMTime *)rhs);
        if (v16 >= EditSegmentCount - 1) {
          break;
        }
        *(_OWORD *)CMTime time1 = v39;
        *(void *)&time1[16] = v40;
        *(_OWORD *)CMTime lhs = *(_OWORD *)((char *)&v47[1] + 8);
        *(void *)&lhs[16] = *((void *)&v47[2] + 1);
      }
      while (CMTimeCompare((CMTime *)time1, (CMTime *)lhs) < 0);
      ++v16;
    }
    while (v16 != EditSegmentCount);
  }
}

uint64_t CFArrayToFigMatrix(const __CFArray *a1, uint64_t a2)
{
  int v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t result = 4294950861;
  if (a1 && a2)
  {
    CFTypeID TypeID = CFArrayGetTypeID();
    if (TypeID == CFGetTypeID(a1) && CFArrayGetCount(a1) == 9)
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = &v14;
LABEL_6:
      uint64_t v9 = 0;
      long long v10 = (char *)v8;
      while (1)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v6 + v9);
        CFTypeID v12 = CFNumberGetTypeID();
        if (v12 != CFGetTypeID(ValueAtIndex)) {
          break;
        }
        CFNumberGetValue((CFNumberRef)ValueAtIndex, kCFNumberFloat32Type, v10);
        ++v9;
        v10 += 4;
        if (v9 == 3)
        {
          ++v7;
          v6 += 3;
          uint64_t v8 = (long long *)((char *)v8 + 12);
          if (v7 != 3) {
            goto LABEL_6;
          }
          uint64_t result = 0;
          long long v13 = v15;
          *(_OWORD *)a2 = v14;
          *(_OWORD *)(a2 + 16) = v13;
          *(_DWORD *)(a2 + 32) = v16;
          return result;
        }
      }
    }
    return 4294950861;
  }
  return result;
}

CFStringRef convertCFStringToOSType(const __CFString *result)
{
  *(_DWORD *)buffer = 0;
  if (result)
  {
    CFStringRef v1 = result;
    CFIndex Length = CFStringGetLength(result);
    if (Length >= 4) {
      CFIndex v3 = 4;
    }
    else {
      CFIndex v3 = Length;
    }
    v6.location = 0;
    v6.length = v3;
    CFIndex Bytes = CFStringGetBytes(v1, v6, 0, 0, 0, buffer, 4, 0);
    uint64_t result = 0;
    if (v3 == Bytes) {
      return (const __CFString *)bswap32(*(unsigned int *)buffer);
    }
  }
  return result;
}

uint64_t MutableMovie_CopyFormatReader(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  CFTypeRef v9 = 0;
  if (a1 && a4)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      if (*(unsigned char *)DerivedStorage)
      {
        CFTypeRef v8 = 0;
        uint64_t result = 4294950869;
      }
      else
      {
        uint64_t result = MovieFormatReaderCreateWithMovieInformation(*(void **)(DerivedStorage + 24), a2 != 0, &v9);
        CFTypeRef v8 = v9;
      }
    }
    else
    {
      CFTypeRef v8 = 0;
      uint64_t result = 4294950861;
    }
    goto LABEL_6;
  }
  uint64_t result = 4294950861;
  if (a4)
  {
    CFTypeRef v8 = 0;
LABEL_6:
    *a4 = v8;
  }
  return result;
}

uint64_t MutableMovie_WriteHeader(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (a1 && a2 && a3 && (uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage()) != 0 && !*DerivedStorage)
  {
    FigFileDoesFileExist();
    uint64_t v8 = CMByteStreamCreateForFileURL();
    if (v8) {
      return v8;
    }
    else {
      return writeHeaderToByteStream(a1, a2, 0, a4);
    }
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MutableMovie_CopyHeaderData(uint64_t a1, uint64_t a2, const __CFDictionary *a3, uint64_t a4, __CFData **a5)
{
  CFArrayRef v5 = 0;
  CFTypeRef v21 = 0;
  ptr = 0;
  uint64_t v6 = 4294950861;
  if (a1 && a2)
  {
    CFMutableArrayRef Mutable = 0;
    if (!a5) {
      goto LABEL_25;
    }
    uint64_t DerivedStorage = (const void **)CMBaseObjectGetDerivedStorage();
    CFArrayRef v5 = DerivedStorage;
    if (!DerivedStorage) {
      goto LABEL_24;
    }
    if (*(unsigned char *)DerivedStorage)
    {
      CFArrayRef v5 = 0;
      CFMutableArrayRef Mutable = 0;
      uint64_t v6 = 4294950869;
    }
    else
    {
      if (a3 && (CFTypeID v13 = CFGetTypeID(a3), v13 == CFDictionaryGetTypeID()))
      {
        BOOL v14 = CFDictionaryGetValue(a3, @"WriteFileTypeAtom") != (const void *)*MEMORY[0x1E4F1CFC8];
        BOOL v15 = CFDictionaryGetValue(a3, @"SynthesizeURLForMovieProxy") != (const void *)*MEMORY[0x1E4F1CFD0];
      }
      else
      {
        BOOL v14 = 1;
        BOOL v15 = 1;
      }
      uint64_t v16 = createMovieHeaderMakerFromMiP(a1, v5[3], &ptr);
      if (v16)
      {
        uint64_t v6 = v16;
        CFArrayRef v5 = 0;
        goto LABEL_24;
      }
      CFAllocatorRef v17 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      if (v15) {
        CFArrayRef v5 = 0;
      }
      else {
        CFArrayRef v5 = (const void **)CFURLCreateWithString((CFAllocatorRef)*MEMORY[0x1E4F1CF80], @"file:///proxy.mov", 0);
      }
      uint64_t v18 = MovieHeaderMakerCopyMovieHeaderAsBlockBuffer((uint64_t)ptr, v17, a2, (const __CFURL *)v5, (CMBlockBufferRef *)&v21);
      if (v18)
      {
        uint64_t v6 = v18;
        goto LABEL_24;
      }
      CFMutableArrayRef Mutable = CFDataCreateMutable(v17, 0);
      if (Mutable)
      {
        if (!v14) {
          goto LABEL_39;
        }
        CFTypeRef cf = 0;
        uint64_t v6 = copyFileTypeAtomAsBlockBuffer(a2, (CMBlockBufferRef *)&cf);
        CFTypeRef v19 = cf;
        if (!v6)
        {
          uint64_t v6 = writeBlockBufferToCFData((CMBlockBufferRef)cf, Mutable);
          CFTypeRef v19 = cf;
        }
        if (v19) {
          CFRelease(v19);
        }
        if (!v6)
        {
LABEL_39:
          uint64_t v6 = writeBlockBufferToCFData((CMBlockBufferRef)v21, Mutable);
          if (!v6)
          {
            *a5 = Mutable;
LABEL_24:
            CFMutableArrayRef Mutable = 0;
          }
        }
      }
      else
      {
        uint64_t v6 = FigSignalErrorAt();
      }
    }
  }
  else
  {
    CFMutableArrayRef Mutable = 0;
  }
LABEL_25:
  if (v21) {
    CFRelease(v21);
  }
  MovieHeaderMakerRelease((const __CFAllocator **)ptr);
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v5) {
    CFRelease(v5);
  }
  return v6;
}

uint64_t MutableMovie_AddTrack(uint64_t a1, int a2, const __CFDictionary *a3, uint64_t a4, unsigned int *a5)
{
  unsigned int v23 = 0;
  uint64_t value = 0;
  CFTypeRef cf = 0;
  uint64_t v6 = 4294950861;
  if (a1)
  {
    if (a2)
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        uint64_t v12 = DerivedStorage;
        if (*(unsigned char *)DerivedStorage)
        {
          uint64_t v6 = 4294950869;
        }
        else
        {
          uint64_t v13 = MovieInformationLockForWrite(*(void *)(DerivedStorage + 24));
          if (!v13)
          {
            uint64_t v6 = MovieInformationCreateTrack(*(void *)(v12 + 24), a2, 0, &v23, &cf);
            MovieInformationUnlockForWrite(*(void **)(v12 + 24));
            if (v6) {
              goto LABEL_16;
            }
            *(unsigned char *)(v12 + 1) = 1;
            uint64_t MutableMovieTrackObject = createMutableMovieTrackObject((const __CFAllocator *)*MEMORY[0x1E4F1CF80], *(const void **)(v12 + 24), cf, *(CFAllocatorRef **)(v12 + 32), (uint64_t *)&value);
            if (value)
            {
              uint64_t v6 = MutableMovieTrackObject;
              MEMORY[0x19970E910](*(void *)(v12 + 48));
              CFArrayAppendValue(*(CFMutableArrayRef *)(v12 + 56), value);
              MEMORY[0x19970E930](*(void *)(v12 + 48));
              if (!a4) {
                goto LABEL_15;
              }
              int v15 = 1752524863;
              int v20 = 1752524863;
              uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v16) {
                uint64_t v17 = v16;
              }
              else {
                uint64_t v17 = 0;
              }
              uint64_t v18 = *(void (**)(uint64_t, void, int *))(v17 + 8);
              if (v18)
              {
                v18(a4, 0, &v20);
                int v15 = v20;
              }
              if (v15 == a2)
              {
LABEL_15:
                syncPropertiesOfNewTrackWithSourceTrackUsingTrackReaderOrOptionsDictionary(a1, v23, a4, a3);
                goto LABEL_16;
              }
            }
            uint64_t v13 = FigSignalErrorAt();
          }
          uint64_t v6 = v13;
        }
      }
    }
  }
LABEL_16:
  if (a5) {
    *a5 = v23;
  }
  if (cf) {
    CFRelease(cf);
  }
  return v6;
}

uint64_t MutableMovie_DeleteTrack(uint64_t a1, int a2)
{
  uint64_t v2 = 4294950861;
  if (a1)
  {
    if (a2)
    {
      uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        uint64_t v6 = DerivedStorage;
        if (*DerivedStorage)
        {
          return 4294950869;
        }
        else
        {
          Storage = MutableMovieTrackGetStorage(a1, a2);
          if (Storage)
          {
            uint64_t v8 = Storage;
            MEMORY[0x19970E910](*((void *)v6 + 6));
            CFArrayRef v9 = (const __CFArray *)*((void *)v6 + 7);
            v14.length = CFArrayGetCount(v9);
            v14.location = 0;
            FirstIndexOfCFArrayRef Value = CFArrayGetFirstIndexOfValue(v9, v14, v8);
            if (FirstIndexOfValue != -1) {
              CFArrayRemoveValueAtIndex(*((CFMutableArrayRef *)v6 + 7), FirstIndexOfValue);
            }
            MEMORY[0x19970E930](*((void *)v6 + 6));
            releaseTrack((const __CFAllocator *)*MEMORY[0x1E4F1CF80], v8);
            uint64_t v11 = MovieInformationLockForWrite(*((void *)v6 + 3));
            if (v11)
            {
              return v11;
            }
            else
            {
              TrackForTrackuint64_t ID = (_DWORD *)MovieInformationFindTrackForTrackID(*((void *)v6 + 3), a2);
              if (TrackForTrackID) {
                uint64_t v2 = MovieInformationRemoveTrack(*((uint64_t **)v6 + 3), TrackForTrackID);
              }
              else {
                uint64_t v2 = 0;
              }
              MovieInformationUnlockForWrite(*((void **)v6 + 3));
              v6[1] = v2 == 0;
            }
          }
          else
          {
            return 4294950872;
          }
        }
      }
    }
  }
  return v2;
}

uint64_t MutableMovie_CopyTrackProperty(uint64_t a1, int a2, const void *a3, const __CFAllocator *a4, void *a5)
{
  uint64_t TrackTimeInfo = 4294950861;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a5)
        {
          uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
          if (DerivedStorage)
          {
            uint64_t v12 = DerivedStorage;
            if (*(unsigned char *)DerivedStorage) {
              return 4294950869;
            }
            uint64_t v13 = MovieInformationLockForRead(*(void *)(DerivedStorage + 24));
            if (v13) {
              return v13;
            }
            TrackForTrackuint64_t ID = MovieInformationFindTrackForTrackID(*(void *)(v12 + 24), a2);
            if (!TrackForTrackID) {
              goto LABEL_21;
            }
            uint64_t v15 = TrackForTrackID;
            Storage = MutableMovieTrackGetStorage(a1, a2);
            if (!Storage)
            {
              uint64_t v32 = FigSignalErrorAt();
              goto LABEL_42;
            }
            uint64_t v17 = Storage;
            if (CFEqual(a3, @"Volume"))
            {
              LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = MovieTrackGetVolume(v15);
              CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFNumberType v19 = kCFNumberFloat32Type;
LABEL_12:
              CFDictionaryRef DictionaryRepresentation = CFNumberCreate(v18, v19, &valuePtr);
LABEL_19:
              uint64_t TrackTimeInfo = 0;
              goto LABEL_20;
            }
            if (CFEqual(a3, @"MediaDataStorageURL"))
            {
              CFDictionaryRef DictionaryRepresentation = (const void *)*((void *)v17 + 5);
              if (!DictionaryRepresentation) {
                goto LABEL_19;
              }
              goto LABEL_18;
            }
            if (CFEqual(a3, @"SampleReferenceBaseURL"))
            {
              CFDictionaryRef DictionaryRepresentation = (const void *)*((void *)v17 + 6);
              if (!DictionaryRepresentation) {
                goto LABEL_19;
              }
LABEL_18:
              CFDictionaryRef DictionaryRepresentation = CFRetain(DictionaryRepresentation);
              goto LABEL_19;
            }
            if (CFEqual(a3, @"MediaTimeScale"))
            {
              LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = MovieTrackGetMediaTimeScale(*((void *)v17 + 2));
LABEL_25:
              CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFNumberType v19 = kCFNumberSInt32Type;
              goto LABEL_12;
            }
            if (CFEqual(a3, @"MediaType"))
            {
              LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 1752524863;
              p_CMTimeRange valuePtr = &valuePtr;
              uint64_t v23 = v15;
              CFIndex v24 = 0;
LABEL_28:
              uint64_t BasicInfo = MovieTrackGetBasicInfo(v23, p_valuePtr, v24);
LABEL_29:
              uint64_t TrackTimeInfo = BasicInfo;
              if (BasicInfo) {
                goto LABEL_21;
              }
              CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFNumberType v27 = kCFNumberSInt32Type;
              goto LABEL_31;
            }
            if (CFEqual(a3, @"MediaSubType"))
            {
              LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 1752524863;
              CFArrayRef v28 = MovieTrackCopyFormatDescriptionArray(v15);
              if (v28)
              {
                CFArrayRef v29 = v28;
                CFStringRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v28, 0);
                LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = CMFormatDescriptionGetMediaSubType(ValueAtIndex);
                CFRelease(v29);
              }
              goto LABEL_25;
            }
            if (CFEqual(a3, @"TrackID"))
            {
              LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              CFIndex v24 = &valuePtr;
              uint64_t v23 = v15;
              p_CMTimeRange valuePtr = 0;
              goto LABEL_28;
            }
            if (CFEqual(a3, @"AlternateGroupID"))
            {
              AlternateGroupuint64_t ID = MovieTrackGetAlternateGroupID(v15);
LABEL_45:
              LOWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = AlternateGroupID;
LABEL_46:
              CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFNumberType v19 = kCFNumberSInt16Type;
              goto LABEL_12;
            }
            if (CFEqual(a3, @"DefaultAlternateGroupID"))
            {
              AlternateGroupuint64_t ID = MovieTrackGetDefaultAlternateGroupID(v15);
              goto LABEL_45;
            }
            if (CFEqual(a3, @"ProvisionalAlternateGroupID"))
            {
              LOWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              if (!MovieTrackGetProvisionalAlternateGroupID(v15, &valuePtr))
              {
                CFDictionaryRef DictionaryRepresentation = 0;
                goto LABEL_19;
              }
              goto LABEL_46;
            }
            if (CFEqual(a3, @"CreationTime"))
            {
              valuePtr.start.CMTimeValue value = 0;
              long long v33 = &valuePtr;
              uint64_t v34 = v15;
              CFIndex v35 = 0;
LABEL_54:
              uint64_t TrackTimeInfo = MovieTrackGetTrackTimeInfo(v34, v33, v35);
              if (TrackTimeInfo) {
                goto LABEL_21;
              }
              CFDictionaryRef DictionaryRepresentation = CFDateCreate(a4, (double)(unint64_t)valuePtr.start.value - *MEMORY[0x1E4F1CF68]);
              goto LABEL_20;
            }
            if (CFEqual(a3, @"ModificationTime"))
            {
              valuePtr.start.CMTimeValue value = 0;
              CFIndex v35 = &valuePtr;
              uint64_t v34 = v15;
              long long v33 = 0;
              goto LABEL_54;
            }
            if (CFEqual(a3, @"Layer"))
            {
              AlternateGroupuint64_t ID = MovieTrackGetLayer(v15);
              goto LABEL_45;
            }
            if (CFEqual(a3, @"TrackEnabled"))
            {
              int IsEnabled = MovieTrackIsEnabled(v15);
              goto LABEL_62;
            }
            if (CFEqual(a3, @"IsSelfContained"))
            {
              int IsEnabled = MovieTrackIsSelfContained(v15);
              goto LABEL_62;
            }
            if (CFEqual(a3, @"TrackProtectedStatus"))
            {
              CFArrayRef v38 = MovieTrackCopyFormatDescriptionArray(v15);
              if (v38)
              {
                CFArrayRef v39 = v38;
                CFIndex Count = CFArrayGetCount(v38);
                if (Count >= 1)
                {
                  CFIndex v41 = Count;
                  long long v42 = CFArrayGetValueAtIndex(v39, 0);
                  if (FigCPEIsSupportedFormatDescription((uint64_t)v42))
                  {
                    CFRelease(v39);
LABEL_70:
                    long long v37 = (const void **)MEMORY[0x1E4F1CFD0];
                    goto LABEL_64;
                  }
                  CFIndex v43 = 1;
                  while (v41 != v43)
                  {
                    long long v44 = CFArrayGetValueAtIndex(v39, v43++);
                    if (FigCPEIsSupportedFormatDescription((uint64_t)v44))
                    {
                      CFRelease(v39);
                      if (v43 - 1 < v41) {
                        goto LABEL_70;
                      }
                      goto LABEL_83;
                    }
                  }
                }
                CFRelease(v39);
              }
LABEL_83:
              long long v37 = (const void **)MEMORY[0x1E4F1CFC8];
LABEL_64:
              CFDictionaryRef DictionaryRepresentation = *v37;
              goto LABEL_18;
            }
            if (CFEqual(a3, @"TrackDimensions"))
            {
              LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              LODWORD(cf.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
LABEL_73:
              MovieTrackGetSpatialInformation(v15, &valuePtr, &cf, 0);
LABEL_74:
              v81.double width = *(float *)&valuePtr.start.value;
              v81.double height = *(float *)&cf.start.value;
              CFDictionaryRef DictionaryRepresentation = CGSizeCreateDictionaryRepresentation(v81);
              goto LABEL_19;
            }
            if (CFEqual(a3, @"TrackMatrix"))
            {
LABEL_76:
              memset(&valuePtr, 0, 36);
              MovieTrackGetSpatialInformation(v15, 0, 0, (uint64_t)&valuePtr);
              CFDictionaryRef DictionaryRepresentation = FigMatrixToCFArray(a4, (uint64_t)&valuePtr);
              goto LABEL_19;
            }
            if (CFEqual(a3, @"FormatDescriptionArray"))
            {
              CFDictionaryRef DictionaryRepresentation = MovieTrackCopyFormatDescriptionArray(v15);
              goto LABEL_19;
            }
            if (CFEqual(a3, @"LanguageCode"))
            {
              valuePtr.start.CMTimeValue value = 0;
              long long v45 = &valuePtr;
              uint64_t v46 = v15;
              CFMutableArrayRef v47 = 0;
              goto LABEL_90;
            }
            if (CFEqual(a3, @"ExtendedLanguageTag"))
            {
              valuePtr.start.CMTimeValue value = 0;
              CFMutableArrayRef v47 = &valuePtr;
              uint64_t v46 = v15;
              long long v45 = 0;
LABEL_90:
              MovieTrackGetLanguageInformation(v46, 0, v45, v47);
              CFDictionaryRef DictionaryRepresentation = (const void *)valuePtr.start.value;
              if (!valuePtr.start.value) {
                goto LABEL_19;
              }
              goto LABEL_18;
            }
            if (CFEqual(a3, @"MediaCharacteristicArray"))
            {
              valuePtr.start.CMTimeValue value = 0;
              uint64_t TrackTimeInfo = FigMediaCharacteristicsCopyMediaCharacteristicsForTrackInformation((uint64_t)a4, v15, (__CFArray **)&valuePtr);
              if (TrackTimeInfo) {
                goto LABEL_21;
              }
              CMTimeValue value = valuePtr.start.value;
LABEL_95:
              *a5 = value;
              goto LABEL_21;
            }
            if (CFEqual(a3, @"NaturalSize"))
            {
              LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              LODWORD(cf.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              MovieTrackGetCleanApertureDimensions(v15, (float *)&valuePtr, (float *)&cf);
              if (v49) {
                goto LABEL_74;
              }
              goto LABEL_73;
            }
            if (CFEqual(a3, @"PreferredTransform")) {
              goto LABEL_76;
            }
            if (CFEqual(a3, @"NominalFrameRate"))
            {
              LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              uint64_t TrackTimeInfo = MovieTrackComputeNominalFrameRate(*(void **)(v12 + 24), v15, (float *)&valuePtr);
              if (TrackTimeInfo) {
                goto LABEL_21;
              }
              CFAllocatorRef v26 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CFNumberType v27 = kCFNumberFloat32Type;
LABEL_31:
              CFDictionaryRef DictionaryRepresentation = CFNumberCreate(v26, v27, &valuePtr);
              goto LABEL_20;
            }
            if (CFEqual(a3, @"CommonMetadata"))
            {
              valuePtr.start.CMTimeValue value = 0;
              cf.start.CMTimeValue value = 0;
              v80.CMTimeValue value = 0;
              uint64_t v32 = MovieFormatReaderCreateWithMovieInformation(*(void **)(v12 + 24), 1, (CFTypeRef *)&cf);
              if (!v32)
              {
                if (cf.start.value)
                {
                  uint64_t TrackTimeInfo = FigFormatReaderCopyTrackByID(cf.start.value, v17[1], (uint64_t)&v80);
                  if (!TrackTimeInfo && v80.value)
                  {
                    FigMetadataCopyTrackCommonMetadata(v80.value, (const __CFAllocator *)*MEMORY[0x1E4F1CF80], (__CFArray **)&valuePtr);
                    CFRelease((CFTypeRef)v80.value);
                  }
                  CFRelease((CFTypeRef)cf.start.value);
                  CFDictionaryRef DictionaryRepresentation = (const void *)valuePtr.start.value;
                  if (valuePtr.start.value) {
                    goto LABEL_20;
                  }
                }
                else
                {
                  uint64_t TrackTimeInfo = 0;
                }
                CFDictionaryRef DictionaryRepresentation = CFArrayCreateMutable(a4, 0, MEMORY[0x1E4F1D510]);
LABEL_20:
                *a5 = DictionaryRepresentation;
LABEL_21:
                MovieInformationUnlockForRead(*(void *)(v12 + 24));
                return TrackTimeInfo;
              }
LABEL_42:
              uint64_t TrackTimeInfo = v32;
              goto LABEL_21;
            }
            if (CFEqual(a3, @"AvailableMetadataFormats"))
            {
              CFMutableArrayRef Mutable = CFArrayCreateMutable(a4, 0, MEMORY[0x1E4F1D510]);
              long long v51 = copyArrayOfKnownMetadataFormats(a4);
              if (v51)
              {
                CFArrayRef v52 = v51;
                CFIndex v53 = CFArrayGetCount(v51);
                if (v53 >= 1)
                {
                  CFIndex v54 = v53;
                  for (CFIndex i = 0; i != v54; ++i)
                  {
                    uint64_t v56 = CFArrayGetValueAtIndex(v52, i);
                    if (v56)
                    {
                      CFTypeID v57 = v56;
                      if (MovieTrackMetadataFormatIsAvailable(*(void *)(v12 + 24), *((void **)v17 + 2), v56))CFArrayAppendValue(Mutable, v57); {
                    }
                      }
                  }
                }
                CFRelease(v52);
              }
              uint64_t TrackTimeInfo = 0;
              *a5 = Mutable;
              goto LABEL_21;
            }
            if (CFEqual(a3, @"Metadata"))
            {
              CFArrayRef theArray = CFArrayCreateMutable(a4, 0, MEMORY[0x1E4F1D510]);
              CFTypeID v58 = copyArrayOfKnownMetadataFormats(a4);
              if (v58)
              {
                CFArrayRef v59 = v58;
                CFIndex v60 = CFArrayGetCount(v58);
                if (v60 >= 1)
                {
                  CFIndex v61 = v60;
                  for (CFIndex j = 0; j != v61; ++j)
                  {
                    long long v63 = CFArrayGetValueAtIndex(v59, j);
                    if (v63)
                    {
                      int v64 = v63;
                      TrackMetadataItemArradouble y = MovieTrackGetTrackMetadataItemArray(*((void *)v17 + 2), v63);
                      if (TrackMetadataItemArray)
                      {
                        CFDictionaryRef v66 = TrackMetadataItemArray;
                        uint64_t v67 = CFDictionaryCreateMutable(a4, 0, 0, 0);
                        if (v67)
                        {
                          uint64_t v68 = v67;
                          CFDictionaryAddValue(v67, v64, v66);
                          CFArrayAppendValue(theArray, v68);
                          CFRelease(v68);
                        }
                      }
                    }
                  }
                }
                CFRelease(v59);
              }
              uint64_t TrackTimeInfo = 0;
              CMTimeValue value = (CMTimeValue)theArray;
              goto LABEL_95;
            }
            if (CFEqual(a3, @"MediaPresentationTimeRange"))
            {
              CMTime v80 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
              CMTime duration = v80;
              uint64_t TrackTimeInfo = MovieTrackGetDisplayTimeRange(*((void **)v17 + 1), v15, &v80, &duration);
              if (TrackTimeInfo) {
                goto LABEL_21;
              }
              memset(&valuePtr, 0, sizeof(valuePtr));
              cf.CMTime start = v80;
              CMTime end = duration;
              CMTimeRangeFromTimeToTime(&valuePtr, &cf.start, &end);
              CFAllocatorRef v69 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CMTimeRange cf = valuePtr;
              CFDictionaryRef DictionaryRepresentation = CMTimeRangeCopyAsDictionary(&cf, v69);
              goto LABEL_20;
            }
            if (CFEqual(a3, @"MediaPresentationEndTime"))
            {
              *(_OWORD *)&valuePtr.start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
              valuePtr.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
              uint64_t DisplayTimeRange = MovieTrackGetDisplayTimeRange(*((void **)v17 + 1), v15, 0, &valuePtr.start);
              goto LABEL_139;
            }
            if (CFEqual(a3, @"MediaDecodeTimeRange"))
            {
              memset(&v80, 0, sizeof(v80));
              MovieTrackGetMediaDuration(v15, (uint64_t)&v80);
              memset(&valuePtr, 0, sizeof(valuePtr));
              *(_OWORD *)&cf.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
              cf.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
              CMTime duration = v80;
              CMTimeRangeMake(&valuePtr, &cf.start, &duration);
              CFAllocatorRef v71 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
              CMTimeRange cf = valuePtr;
              CFDictionaryRef DictionaryRepresentation = CMTimeRangeCopyAsDictionary(&cf, v71);
              goto LABEL_19;
            }
            if (CFEqual(a3, @"IsExcludedFromAutoselection"))
            {
              int IsEnabled = MovieTrackIsExcludedFromAutoSelection(v15);
LABEL_62:
              long long v37 = (const void **)MEMORY[0x1E4F1CFD0];
              if (!IsEnabled) {
                long long v37 = (const void **)MEMORY[0x1E4F1CFC8];
              }
              goto LABEL_64;
            }
            if (CFEqual(a3, @"CleanApertureDimensions"))
            {
              LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              LODWORD(cf.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              MovieTrackGetCleanApertureDimensions(v15, (float *)&valuePtr, (float *)&cf);
              if (v72) {
                goto LABEL_74;
              }
            }
            else if (CFEqual(a3, @"ProductionApertureDimensions"))
            {
              LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              LODWORD(cf.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              MovieTrackGetProductionApertureDimensions(v15, (float *)&valuePtr, (float *)&cf);
              if (v73) {
                goto LABEL_74;
              }
            }
            else
            {
              if (!CFEqual(a3, @"EncodedPixelsDimensions"))
              {
                if (CFEqual(a3, @"Modified"))
                {
                  long long v37 = (const void **)MEMORY[0x1E4F1CFD0];
                  if (!*((unsigned char *)v17 + 56)) {
                    long long v37 = (const void **)MEMORY[0x1E4F1CFC8];
                  }
                  goto LABEL_64;
                }
                if (CFEqual(a3, @"PreferredChunkSize"))
                {
                  LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
                  uint64_t BasicInfo = MediaDataChunkWriterTrackGetPreferredChunkSize(*((void *)v17 + 3), *((void *)v17 + 4), &valuePtr);
                  goto LABEL_29;
                }
                if (!CFEqual(a3, @"PreferredChunkDuration"))
                {
                  if (!CFEqual(a3, @"PreferredChunkAlignment"))
                  {
                    uint64_t TrackTimeInfo = 4294950876;
                    goto LABEL_21;
                  }
                  LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
                  uint64_t BasicInfo = MediaDataChunkWriterTrackGetPreferredChunkAlignment(*((void *)v17 + 3), *((void *)v17 + 4), &valuePtr);
                  goto LABEL_29;
                }
                *(_OWORD *)&valuePtr.start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
                valuePtr.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
                uint64_t DisplayTimeRange = MediaDataChunkWriterTrackGetPreferredChunkDuration(*((void *)v17 + 3), *((void *)v17 + 4), (uint64_t)&valuePtr);
LABEL_139:
                uint64_t TrackTimeInfo = DisplayTimeRange;
                if (DisplayTimeRange) {
                  goto LABEL_21;
                }
                *(_OWORD *)&cf.start.CMTimeValue value = *(_OWORD *)&valuePtr.start.value;
                cf.start.CMTimeEpoch epoch = valuePtr.start.epoch;
                CFDictionaryRef DictionaryRepresentation = CMTimeCopyAsDictionary(&cf.start, a4);
                goto LABEL_20;
              }
              LODWORD(valuePtr.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              LODWORD(cf.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
              MovieTrackGetEncodedPixelsDimensions(v15, (float *)&valuePtr, (float *)&cf);
              if (v74) {
                goto LABEL_74;
              }
            }
            uint64_t TrackTimeInfo = 4294954513;
            goto LABEL_21;
          }
        }
      }
    }
  }
  return TrackTimeInfo;
}

uint64_t MutableMovie_SetTrackProperty(uint64_t a1, int a2, const void *a3, const __CFString *a4)
{
  uint64_t v4 = 4294950861;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          uint64_t v10 = DerivedStorage;
          if (*(unsigned char *)DerivedStorage)
          {
            return 4294950869;
          }
          else
          {
            uint64_t v11 = MovieInformationLockForWrite(*(void *)(DerivedStorage + 24));
            if (!v11)
            {
              TrackForTrackuint64_t ID = MovieInformationFindTrackForTrackID(*(void *)(v10 + 24), a2);
              if (!TrackForTrackID) {
                goto LABEL_120;
              }
              uint64_t v13 = TrackForTrackID;
              Storage = MutableMovieTrackGetStorage(a1, a2);
              if (Storage)
              {
                uint64_t v15 = Storage;
                if (CFEqual(a3, @"Volume"))
                {
                  if (a4)
                  {
                    CFTypeID v16 = CFGetTypeID(a4);
                    if (v16 == CFNumberGetTypeID())
                    {
                      LODWORD(valuePtr) = 1065353216;
                      CFNumberGetValue((CFNumberRef)a4, kCFNumberFloat32Type, &valuePtr);
                      uint64_t v17 = MovieTrackSetVolume(v13, *(float *)&valuePtr);
LABEL_25:
                      uint64_t v4 = v17;
LABEL_74:
                      char v38 = 1;
LABEL_75:
                      *((unsigned char *)v15 + 56) = v38;
                      goto LABEL_120;
                    }
                  }
                  goto LABEL_119;
                }
                if (CFEqual(a3, @"Layer"))
                {
                  if (a4)
                  {
                    CFTypeID v18 = CFGetTypeID(a4);
                    if (v18 == CFNumberGetTypeID())
                    {
                      LOWORD(valuePtr) = 0;
                      CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
                      uint64_t v17 = MovieTrackSetLayer(v13, valuePtr);
                      goto LABEL_25;
                    }
                  }
LABEL_119:
                  uint64_t v4 = 0;
                  goto LABEL_120;
                }
                if (CFEqual(a3, @"TrackEnabled"))
                {
                  if (a4)
                  {
                    CFTypeID v19 = CFGetTypeID(a4);
                    if (v19 == CFBooleanGetTypeID())
                    {
                      Boolean Value = CFBooleanGetValue((CFBooleanRef)a4);
                      uint64_t v17 = MovieTrackSetEnabled(v13, Value);
                      goto LABEL_25;
                    }
                  }
                  goto LABEL_73;
                }
                if (CFEqual(a3, @"IsExcludedFromAutoselection"))
                {
                  if (a4)
                  {
                    CFTypeID v21 = CFGetTypeID(a4);
                    if (v21 == CFBooleanGetTypeID())
                    {
                      Boolean v22 = CFBooleanGetValue((CFBooleanRef)a4);
                      uint64_t v17 = MovieTrackSetExcludeFromAutoSelection(v13, v22);
                      goto LABEL_25;
                    }
                  }
                  goto LABEL_73;
                }
                if (CFEqual(a3, @"TrackDimensions"))
                {
                  size.CMTimeValue value = 0;
                  *(void *)&size.CMTimeScale timescale = 0;
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v23 = CFGetTypeID(a4);
                  if (v23 != CFDictionaryGetTypeID()
                    || !CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, (CGSize *)&size))
                  {
                    goto LABEL_119;
                  }
                  int v83 = 0;
                  unsigned long long valuePtr = 0u;
                  long long v82 = 0u;
                  MovieTrackGetSpatialInformation(v13, 0, 0, (uint64_t)&valuePtr);
                  float v24 = *(double *)&size.value;
                  float v25 = *(double *)&size.timescale;
                  goto LABEL_31;
                }
                if (CFEqual(a3, @"CleanApertureDimensions"))
                {
                  unsigned long long valuePtr = 0uLL;
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v27 = CFGetTypeID(a4);
                  if (v27 != CFDictionaryGetTypeID()
                    || !CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, (CGSize *)&valuePtr))
                  {
                    goto LABEL_119;
                  }
                  float v28 = *(double *)&valuePtr;
                  float v29 = *((double *)&valuePtr + 1);
                  uint64_t v26 = MovieTrackSetCleanApertureDimensions(v13, v28, v29);
                  goto LABEL_54;
                }
                if (CFEqual(a3, @"ProductionApertureDimensions"))
                {
                  unsigned long long valuePtr = 0uLL;
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v30 = CFGetTypeID(a4);
                  if (v30 != CFDictionaryGetTypeID()
                    || !CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, (CGSize *)&valuePtr))
                  {
                    goto LABEL_119;
                  }
                  float v31 = *(double *)&valuePtr;
                  float v32 = *((double *)&valuePtr + 1);
                  uint64_t v26 = MovieTrackSetProductionApertureDimensions(v13, v31, v32);
                  goto LABEL_54;
                }
                if (CFEqual(a3, @"EncodedPixelsDimensions"))
                {
                  unsigned long long valuePtr = 0uLL;
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v33 = CFGetTypeID(a4);
                  if (v33 != CFDictionaryGetTypeID()
                    || !CGSizeMakeWithDictionaryRepresentation((CFDictionaryRef)a4, (CGSize *)&valuePtr))
                  {
                    goto LABEL_119;
                  }
                  float v34 = *(double *)&valuePtr;
                  float v35 = *((double *)&valuePtr + 1);
                  uint64_t v26 = MovieTrackSetEncodedPixelsDimensions(v13, v34, v35);
                  goto LABEL_54;
                }
                if (CFEqual(a3, @"AlternateGroupID"))
                {
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v36 = CFGetTypeID(a4);
                  if (v36 != CFNumberGetTypeID()) {
                    goto LABEL_119;
                  }
                  LOWORD(valuePtr) = 0;
                  CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
                  uint64_t v26 = MovieTrackSetAlternateGroupID(v13, valuePtr);
                  goto LABEL_54;
                }
                if (CFEqual(a3, @"DefaultAlternateGroupID"))
                {
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v39 = CFGetTypeID(a4);
                  if (v39 != CFNumberGetTypeID()) {
                    goto LABEL_119;
                  }
                  LOWORD(valuePtr) = 0;
                  CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
                  uint64_t v4 = MovieTrackSetDefaultAlternateGroupID(v13, valuePtr);
                  MovieTrackEvaluateAlternateTrackGroupAssignment(v13);
                  BOOL v37 = v4 == 0;
LABEL_55:
                  char v38 = v37;
                  goto LABEL_75;
                }
                if (CFEqual(a3, @"ProvisionalAlternateGroupID"))
                {
                  if (a4)
                  {
                    CFTypeID v40 = CFGetTypeID(a4);
                    if (v40 != CFNumberGetTypeID())
                    {
LABEL_72:
                      MovieTrackEvaluateAlternateTrackGroupAssignment(v13);
                      goto LABEL_73;
                    }
                    LOWORD(valuePtr) = 0;
                    CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt16Type, &valuePtr);
                    uint64_t v41 = MovieTrackSetProvisionalAlternateGroupID(v13, valuePtr);
                  }
                  else
                  {
                    uint64_t v41 = MovieTrackClearProvisionalAlternateGroupID(v13);
                  }
                  uint64_t v4 = v41;
                  if (!v41) {
                    goto LABEL_72;
                  }
LABEL_120:
                  MovieInformationUnlockForWrite(*(void **)(v10 + 24));
                  return v4;
                }
                if (CFEqual(a3, @"LanguageCode"))
                {
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v42 = CFGetTypeID(a4);
                  if (v42 != CFStringGetTypeID()) {
                    goto LABEL_119;
                  }
                  uint64_t v26 = MovieTrackSetLanguageCodeString(v13, a4);
                  goto LABEL_54;
                }
                if (CFEqual(a3, @"ExtendedLanguageTag"))
                {
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v43 = CFGetTypeID(a4);
                  if (v43 != CFStringGetTypeID()) {
                    goto LABEL_119;
                  }
                  uint64_t v26 = MovieTrackSetExtendedLanguageTagString(v13, a4);
                  goto LABEL_54;
                }
                if (CFEqual(a3, @"MediaDataStorageURL"))
                {
                  if (a4)
                  {
                    CFTypeID v44 = CFGetTypeID(a4);
                    if (v44 != CFURLGetTypeID()) {
                      goto LABEL_119;
                    }
                    long long v45 = (const void *)*((void *)v15 + 5);
                    *((void *)v15 + 5) = a4;
                    goto LABEL_88;
                  }
                  long long v45 = (const void *)*((void *)v15 + 5);
                  *((void *)v15 + 5) = 0;
                  goto LABEL_117;
                }
                if (CFEqual(a3, @"SampleReferenceBaseURL"))
                {
                  if (a4)
                  {
                    CFTypeID v46 = CFGetTypeID(a4);
                    if (v46 != CFURLGetTypeID()) {
                      goto LABEL_119;
                    }
                    long long v45 = (const void *)*((void *)v15 + 6);
                    *((void *)v15 + 6) = a4;
LABEL_88:
                    CFRetain(a4);
                    goto LABEL_117;
                  }
                  long long v45 = (const void *)*((void *)v15 + 6);
                  *((void *)v15 + 6) = 0;
LABEL_117:
                  if (v45) {
                    CFRelease(v45);
                  }
                  goto LABEL_119;
                }
                if (CFEqual(a3, @"Metadata"))
                {
                  if (!a4 || (CFTypeID v47 = CFGetTypeID(a4), v47 == CFArrayGetTypeID()))
                  {
                    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
                    CFArrayRef theArray = copyArrayOfKnownMetadataFormats((const __CFAllocator *)*MEMORY[0x1E4F1CF80]);
                    if (theArray)
                    {
                      CFIndex Count = CFArrayGetCount(theArray);
                      if (Count >= 1)
                      {
                        for (CFIndex i = 0; i != Count; ++i)
                        {
                          CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, i);
                          if (ValueAtIndex)
                          {
                            long long v50 = ValueAtIndex;
                            CFArrayRef v51 = CFArrayCreate(allocator, 0, 0, 0);
                            if (v51)
                            {
                              CFArrayRef v52 = v51;
                              MovieTrackSetTrackMetadataItemArray(*(void *)(v10 + 24), v13, v50, v51);
                              CFRelease(v52);
                            }
                          }
                        }
                        if (a4)
                        {
                          for (CFIndex j = 0; j != Count; ++j)
                          {
                            CFIndex v54 = (void *)CFArrayGetValueAtIndex(theArray, j);
                            if (v54)
                            {
                              int v55 = v54;
                              CFMutableArrayRef Mutable = CFArrayCreateMutable(allocator, 0, MEMORY[0x1E4F1D510]);
                              if (Mutable)
                              {
                                CFTypeID v57 = Mutable;
                                CFIndex v58 = CFArrayGetCount((CFArrayRef)a4);
                                if (v58 >= 1)
                                {
                                  CFIndex v59 = v58;
                                  for (CFIndex k = 0; k != v59; ++k)
                                  {
                                    CFDictionaryRef v61 = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)a4, k);
                                    if (v61)
                                    {
                                      CFDictionaryRef v62 = v61;
                                      CFTypeID TypeID = CFDictionaryGetTypeID();
                                      if (TypeID == CFGetTypeID(v62))
                                      {
                                        CFDictionaryGetValue(v62, @"format");
                                        CFArrayRef v64 = (const __CFArray *)CFDictionaryGetValue(v62, @"items");
                                        if (v64)
                                        {
                                          CFArrayRef v65 = v64;
                                          if (FigCFEqual())
                                          {
                                            v84.length = CFArrayGetCount(v65);
                                            v84.location = 0;
                                            CFArrayAppendArray(v57, v65, v84);
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                MovieTrackSetTrackMetadataItemArray(*(void *)(v10 + 24), v13, v55, v57);
                                CFRelease(v57);
                              }
                            }
                          }
                        }
                      }
                      CFRelease(theArray);
                    }
                    uint64_t v4 = 0;
                    *(unsigned char *)(v10 + 1) = 1;
                    goto LABEL_120;
                  }
                  goto LABEL_119;
                }
                if (CFEqual(a3, @"TrackMatrix"))
                {
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v67 = CFArrayGetTypeID();
                  if (v67 != CFGetTypeID(a4)) {
                    goto LABEL_119;
                  }
                  int v83 = 0;
                  unsigned long long valuePtr = 0u;
                  long long v82 = 0u;
                  uint64_t v4 = CFArrayToFigMatrix((const __CFArray *)a4, (uint64_t)&valuePtr);
                  if (v4) {
                    goto LABEL_120;
                  }
                  LODWORD(size.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
                  float v80 = 0.0;
                  MovieTrackGetSpatialInformation(v13, &size, &v80, 0);
                  float v24 = *(float *)&size.value;
                  float v25 = v80;
LABEL_31:
                  uint64_t v26 = MovieTrackSetSpatialInformation(v13, (long long *)&valuePtr, v24, v25);
LABEL_54:
                  uint64_t v4 = v26;
                  BOOL v37 = v26 == 0;
                  goto LABEL_55;
                }
                if (CFEqual(a3, @"Modified"))
                {
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v68 = CFBooleanGetTypeID();
                  if (v68 != CFGetTypeID(a4)) {
                    goto LABEL_119;
                  }
                  if ((const __CFString *)*MEMORY[0x1E4F1CFD0] != a4)
                  {
                    uint64_t v4 = 0;
                    *((unsigned char *)v15 + 56) = 0;
                    goto LABEL_120;
                  }
LABEL_73:
                  uint64_t v4 = 0;
                  goto LABEL_74;
                }
                if (CFEqual(a3, @"PreferredChunkSize"))
                {
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v69 = CFNumberGetTypeID();
                  if (v69 != CFGetTypeID(a4)) {
                    goto LABEL_119;
                  }
                  LODWORD(valuePtr) = 0x100000;
                  CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
                  uint64_t v26 = MediaDataChunkWriterTrackSetPreferredChunkSize(*((void *)v15 + 3), *((void *)v15 + 4), valuePtr);
                  goto LABEL_54;
                }
                if (CFEqual(a3, @"PreferredChunkDuration"))
                {
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v70 = CFDictionaryGetTypeID();
                  if (v70 != CFGetTypeID(a4)) {
                    goto LABEL_119;
                  }
                  unsigned long long valuePtr = 0uLL;
                  *(void *)&long long v82 = 0;
                  CMTimeMakeFromDictionary((CMTime *)&valuePtr, (CFDictionaryRef)a4);
                  uint64_t v71 = *((void *)v15 + 3);
                  uint64_t v72 = *((void *)v15 + 4);
                  *(_OWORD *)&size.CMTimeValue value = valuePtr;
                  size.CMTimeEpoch epoch = v82;
                  uint64_t v26 = MediaDataChunkWriterTrackSetPreferredChunkDuration(v71, v72, &size);
                  goto LABEL_54;
                }
                if (CFEqual(a3, @"PreferredChunkAlignment"))
                {
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v73 = CFNumberGetTypeID();
                  if (v73 != CFGetTypeID(a4)) {
                    goto LABEL_119;
                  }
                  LODWORD(valuePtr) = 0;
                  CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
                  uint64_t v26 = MediaDataChunkWriterTrackSetPreferredChunkAlignment(*((void *)v15 + 3), *((void *)v15 + 4), valuePtr);
                  goto LABEL_54;
                }
                if (CFEqual(a3, @"FormatDescriptionArray"))
                {
                  if (a4)
                  {
                    CFTypeID v74 = CFArrayGetTypeID();
                    if (v74 == CFGetTypeID(a4))
                    {
                      uint64_t v4 = MovieTrackReplaceFormatDescriptionArray(v13, (CFArrayRef)a4);
                      MovieTrackEvaluateAlternateTrackGroupAssignment(v13);
                      goto LABEL_74;
                    }
                  }
                  goto LABEL_119;
                }
                if (CFEqual(a3, @"MediaTimeScale"))
                {
                  if (!a4) {
                    goto LABEL_119;
                  }
                  CFTypeID v75 = CFNumberGetTypeID();
                  if (v75 != CFGetTypeID(a4)) {
                    goto LABEL_119;
                  }
                  LODWORD(valuePtr) = 0;
                  CFNumberGetValue((CFNumberRef)a4, kCFNumberSInt32Type, &valuePtr);
                  MovieTrackSetMediaTimeScale(v13, valuePtr);
                  goto LABEL_73;
                }
                if (!CFEqual(@"MediaType", a3)
                  && !CFEqual(@"MediaSubType", a3)
                  && !CFEqual(@"IsSelfContained", a3)
                  && !CFEqual(@"TrackProtectedStatus", a3)
                  && !CFEqual(@"CreationTime", a3)
                  && !CFEqual(@"AvailableMetadataFormats", a3)
                  && !CFEqual(@"MediaPresentationTimeRange", a3)
                  && !CFEqual(@"MediaPresentationEndTime", a3)
                  && !CFEqual(@"MediaDecodeTimeRange", a3)
                  && !CFEqual(@"ModificationTime", a3))
                {
                  uint64_t v4 = 4294950876;
                  goto LABEL_120;
                }
              }
              uint64_t v4 = FigSignalErrorAt();
              goto LABEL_120;
            }
            return v11;
          }
        }
      }
    }
  }
  return v4;
}

uint64_t MutableMovie_AppendSampleBuffer(uint64_t a1, int a2, opaqueCMSampleBuffer *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v50 = 0;
  char v49 = 0;
  CFIndex v48 = -1;
  long long v7 = *MEMORY[0x1E4F1F9F8];
  long long v46 = v7;
  uint64_t v8 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  uint64_t v47 = v8;
  long long v44 = v7;
  uint64_t v45 = v8;
  uint64_t v43 = 0;
  uint64_t v9 = 4294950861;
  if (!a1) {
    goto LABEL_54;
  }
  if (!a2) {
    goto LABEL_54;
  }
  if (!a3) {
    goto LABEL_54;
  }
  long long v40 = v7;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_54;
  }
  uint64_t v14 = (uint64_t)DerivedStorage;
  if (*DerivedStorage)
  {
    uint64_t v9 = 4294950869;
    goto LABEL_54;
  }
  Storage = MutableMovieTrackGetStorage(a1, a2);
  if (!Storage) {
    goto LABEL_61;
  }
  uint64_t v16 = (uint64_t)Storage;
  *((_OWORD *)Storage + 6) = v40;
  *((void *)Storage + 14) = v8;
  *(_OWORD *)(Storage + 18) = v40;
  *((void *)Storage + 11) = v8;
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(a3);
  if (!FormatDescription
    || (CMMediaType MediaType = CMFormatDescriptionGetMediaType(FormatDescription), MediaType != *(_DWORD *)v16))
  {
    uint64_t v9 = 4294950866;
    goto LABEL_54;
  }
  int v19 = MediaType;
  if (*(_DWORD *)(v16 + 120) != 1)
  {
    uint64_t v20 = *(void *)(v16 + 16);
    if (v20 && MovieTrackGetTrackDurationValue(v20)) {
      MovieTrackExtendMediaDecodeDurationToDisplayEndTime(*(void **)(v16 + 8), *(void *)(v16 + 16), 0);
    }
    *(_DWORD *)(v16 + 120) = 1;
  }
  CFTypeRef v21 = CMGetAttachment(a3, (CFStringRef)*MEMORY[0x1E4F1F2D8], 0);
  Boolean v22 = v21;
  if (!v21)
  {
    Boolean v22 = *(const void **)(v16 + 40);
    if (!v22)
    {
      Boolean v22 = *(const void **)(v14 + 40);
      if (!v22)
      {
        uint64_t v9 = 4294950873;
        goto LABEL_54;
      }
    }
  }
  CFTypeID v23 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (!*(void *)(v16 + 128))
  {
    CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    float v25 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 160, 0);
    if (!v25) {
      goto LABEL_61;
    }
    uint64_t v26 = v25;
    if (v19 == 1751216244 || v19 == 1936684398) {
      int v28 = 1;
    }
    else {
      int v28 = 2;
    }
    uint64_t v29 = MediaSampleTimingGeneratorCreate(v24, v19, v28, &v43);
    if (v29) {
      goto LABEL_62;
    }
    v26[8] = 0u;
    v26[9] = 0u;
    v26[6] = 0u;
    v26[7] = 0u;
    v26[4] = 0u;
    v26[5] = 0u;
    v26[2] = 0u;
    v26[3] = 0u;
    *uint64_t v26 = 0u;
    v26[1] = 0u;
    *((void *)v26 + 7) = v43;
    *(_DWORD *)uint64_t v26 = v19;
    *(void *)(v16 + 128) = v26;
    uint64_t v29 = MovieInformationLockForWrite(*(void *)(v14 + 24));
    if (v29) {
      goto LABEL_62;
    }
    uint64_t v30 = setMediaTimeScaleIfNeeded(v16, a3);
    if (v30)
    {
      uint64_t v9 = v30;
      MovieInformationUnlockForWrite(*(void **)(v14 + 24));
      goto LABEL_54;
    }
    if (v19 == 1668047728)
    {
      uint64_t v9 = setClosedCaptionTrackDimensionsIfNeeded(*(void *)(v14 + 24));
      CFTypeID v23 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    }
    else
    {
      CFTypeID v23 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
      if (v19 != 1986618469)
      {
        MovieInformationUnlockForWrite(*(void **)(v14 + 24));
        if (v21) {
          goto LABEL_34;
        }
        goto LABEL_36;
      }
      uint64_t v9 = setVideoTrackDimensionsIfNeeded(*(void *)(v16 + 16), *(void *)(v14 + 16), a3);
    }
    MovieInformationUnlockForWrite(*(void **)(v14 + 24));
    if (v9) {
      goto LABEL_54;
    }
  }
  if (v21)
  {
LABEL_34:
    CFIndex v31 = *(void *)(v16 + 64);
    goto LABEL_42;
  }
LABEL_36:
  getByteStreamForTrackStorageURL(a1, v22, &v49, &v48);
  if (v48 == -1)
  {
    uint64_t v29 = CMByteStreamCreateForFileURL();
    if (v29) {
      goto LABEL_62;
    }
    uint64_t v29 = createStreamInfoForByteStream(v50, v14, &v48);
    if (v29) {
      goto LABEL_62;
    }
    if (v50)
    {
      CFRelease(v50);
      long long v50 = 0;
    }
  }
  CFIndex v31 = v48;
  *(void *)(v16 + 64) = v48;
LABEL_42:
  if (v31 == -1)
  {
    uint64_t v36 = 0;
  }
  else
  {
    float v32 = v23;
    CFStringRef ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 64), v31);
    if (!ValueAtIndex) {
      goto LABEL_61;
    }
    float v34 = ValueAtIndex;
    size_t TotalSampleSize = CMSampleBufferGetTotalSampleSize(a3);
    if (!TotalSampleSize)
    {
      uint64_t v9 = 4294950861;
      goto LABEL_54;
    }
    writeMdatHeaderIfNecessary((uint64_t)v34, TotalSampleSize, 0);
    uint64_t v36 = *v34;
    CFTypeID v23 = v32;
  }
  if (v19 == 1936684398)
  {
    uint64_t v29 = addSampleBufferToTrack_0(v16, v22, v36, 0, a3);
    if (v29) {
      goto LABEL_62;
    }
  }
  else
  {
    refcon[0] = v16;
    refcon[1] = v22;
    refcon[2] = v36;
    refcon[3] = 0;
    CMSampleBufferCallForEachSample(a3, (OSStatus (__cdecl *)(CMSampleBufferRef, CMItemCount, void *))addSample, refcon);
  }
  CFMutableArrayRef Mutable = CFArrayCreateMutable(*v23, 0, 0);
  if (!Mutable)
  {
LABEL_61:
    uint64_t v29 = FigSignalErrorAt();
LABEL_62:
    uint64_t v9 = v29;
    goto LABEL_54;
  }
  CFArrayRef v38 = Mutable;
  CFArrayAppendValue(Mutable, (const void *)v16);
  uint64_t v9 = writeActualMdatLengthsToStorages(v14, v38);
  CFRelease(v38);
  if (!v9)
  {
    long long v46 = *(_OWORD *)(v16 + 96);
    uint64_t v47 = *(void *)(v16 + 112);
    long long v44 = *(_OWORD *)(v16 + 72);
    uint64_t v45 = *(void *)(v16 + 88);
  }
LABEL_54:
  if (a5)
  {
    *(_OWORD *)a5 = v46;
    *(void *)(a5 + 16) = v47;
  }
  if (a6)
  {
    *(_OWORD *)a6 = v44;
    *(void *)(a6 + 16) = v45;
  }
  if (v50) {
    CFRelease(v50);
  }
  return v9;
}

uint64_t MutableMovie_AppendMediaData(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v26 = 0;
  CFTypeRef cf = 0;
  uint64_t v7 = 4294950861;
  if (!a1) {
    goto LABEL_29;
  }
  if (!a2) {
    goto LABEL_29;
  }
  if (!a3) {
    goto LABEL_29;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_29;
  }
  uint64_t v13 = DerivedStorage;
  if (*(unsigned char *)DerivedStorage)
  {
    uint64_t v7 = 4294950869;
    goto LABEL_29;
  }
  uint64_t ByteStreamForTrackStorageURL = MovieInformationLockForRead(*(void *)(DerivedStorage + 24));
  if (ByteStreamForTrackStorageURL) {
    goto LABEL_33;
  }
  TrackForTrackuint64_t ID = MovieInformationFindTrackForTrackID(*(void *)(v13 + 24), a2);
  MovieInformationUnlockForRead(*(void *)(v13 + 24));
  if (!TrackForTrackID)
  {
    uint64_t v7 = 4294950861;
    goto LABEL_29;
  }
  Storage = MutableMovieTrackGetStorage(a1, a2);
  if (!Storage)
  {
LABEL_32:
    uint64_t ByteStreamForTrackStorageURL = FigSignalErrorAt();
    goto LABEL_33;
  }
  uint64_t v17 = Storage;
  CFIndex v18 = *((void *)Storage + 8);
  int v19 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
  if (v18 != -1) {
    goto LABEL_20;
  }
  uint64_t v20 = (const void *)*((void *)Storage + 5);
  CFIndex idx = -1;
  if (!v20)
  {
    uint64_t v20 = *(const void **)(v13 + 40);
    if (!v20)
    {
      uint64_t v7 = 4294950873;
      goto LABEL_29;
    }
  }
  uint64_t ByteStreamForTrackStorageURL = getByteStreamForTrackStorageURL(a1, v20, 0, &idx);
  if (ByteStreamForTrackStorageURL)
  {
LABEL_33:
    uint64_t v7 = ByteStreamForTrackStorageURL;
    goto LABEL_29;
  }
  CFIndex v18 = idx;
  if (idx != -1)
  {
    *((void *)v17 + 8) = idx;
    goto LABEL_20;
  }
  uint64_t ByteStreamForTrackStorageURL = CMByteStreamCreateForFileURL();
  if (ByteStreamForTrackStorageURL) {
    goto LABEL_33;
  }
  uint64_t ByteStreamForTrackStorageURL = createStreamInfoForByteStream(cf, v13, &idx);
  if (ByteStreamForTrackStorageURL) {
    goto LABEL_33;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  CFIndex v18 = idx;
  *((void *)v17 + 8) = idx;
  if (v18 != -1)
  {
LABEL_20:
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v13 + 64), v18);
    if (ValueAtIndex && *ValueAtIndex)
    {
      uint64_t ByteStreamForTrackStorageURL = writeMdatHeaderIfNecessary((uint64_t)ValueAtIndex, a5, &v26);
      if (ByteStreamForTrackStorageURL) {
        goto LABEL_33;
      }
      uint64_t ByteStreamForTrackStorageURL = CMByteStreamWriteBlockBuffer();
      if (ByteStreamForTrackStorageURL) {
        goto LABEL_33;
      }
      CFMutableArrayRef Mutable = CFArrayCreateMutable(*v19, 0, 0);
      if (Mutable)
      {
        CFArrayRef v23 = Mutable;
        CFArrayAppendValue(Mutable, v17);
        uint64_t v7 = writeActualMdatLengthsToStorages(v13, v23);
        CFRelease(v23);
        if (v7) {
          goto LABEL_29;
        }
        goto LABEL_26;
      }
    }
    goto LABEL_32;
  }
LABEL_26:
  if (a7) {
    *a7 = v26;
  }
  uint64_t v7 = 0;
  *((unsigned char *)v17 + 56) = 1;
LABEL_29:
  if (cf) {
    CFRelease(cf);
  }
  return v7;
}

uint64_t MutableMovie_AppendSampleReferences(uint64_t a1, int a2, const void *a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, unint64_t *a8, CFArrayRef theArray, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (theArray) {
    unint64_t Count = CFArrayGetCount(theArray);
  }
  else {
    unint64_t Count = 0;
  }
  uint64_t result = 4294950861;
  if (!a1 || !a2 || !a3 || a4 < 1 || !a10 || a5 >= 2 && a5 != a4 || a7 >= 2 && a7 != a4 || Count >= 2 && Count != a4) {
    return result;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294950861;
  }
  uint64_t v24 = DerivedStorage;
  if (*(unsigned char *)DerivedStorage) {
    return 4294950869;
  }
  uint64_t result = MovieInformationLockForRead(*(void *)(DerivedStorage + 24));
  if (!result)
  {
    TrackForTrackuint64_t ID = MovieInformationFindTrackForTrackID(*(void *)(v24 + 24), a2);
    MovieInformationUnlockForRead(*(void *)(v24 + 24));
    if (TrackForTrackID)
    {
      Storage = MutableMovieTrackGetStorage(a1, a2);
      if (!Storage) {
        goto LABEL_37;
      }
      CFTypeID v27 = Storage;
      if (Storage[30] != 2)
      {
        uint64_t v28 = *((void *)Storage + 2);
        if (v28 && MovieTrackGetTrackDurationValue(v28)) {
          MovieTrackExtendMediaDecodeDurationToDisplayEndTime(*((void **)v27 + 1), *((void *)v27 + 2), 0);
        }
        v27[30] = 2;
      }
      uint64_t v29 = MEMORY[0x1E4F1F9F8];
      long long v30 = *MEMORY[0x1E4F1F9F8];
      *((_OWORD *)v27 + 6) = *MEMORY[0x1E4F1F9F8];
      uint64_t v31 = *(void *)(v29 + 16);
      *((void *)v27 + 14) = v31;
      *(_OWORD *)(v27 + 18) = v30;
      *((void *)v27 + 11) = v31;
      if (*((void *)v27 + 3) && *((void *)v27 + 4))
      {
        unsigned int v35 = 0;
        uint64_t result = MovieTrackFindOrAddSampleDescription(TrackForTrackID, a3, a10, &v35);
        if (!result)
        {
          MovieTrackEvaluateAlternateTrackGroupAssignment(TrackForTrackID);
          uint64_t result = MediaDataChunkWriterTrackAppendSampleReference(*((void *)v27 + 3), *((void *)v27 + 4), a11, v35, a4, a5, a6, a7, a8, theArray, 0);
          if (a13)
          {
            long long v32 = *((_OWORD *)v27 + 6);
            *(void *)(a13 + 16) = *((void *)v27 + 14);
            *(_OWORD *)a13 = v32;
          }
          if (a14)
          {
            long long v33 = *(_OWORD *)(v27 + 18);
            *(void *)(a14 + 16) = *((void *)v27 + 11);
            *(_OWORD *)a14 = v33;
          }
          *((unsigned char *)v27 + 56) = 1;
        }
      }
      else
      {
LABEL_37:
        return FigSignalErrorAt();
      }
      return result;
    }
    return 4294950861;
  }
  return result;
}

uint64_t MutableMovie_AppendSampleReferencesFromSampleCursor(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = 4294950861;
  if (!a1 || !a2 || !a4) {
    return result;
  }
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294950861;
  }
  uint64_t v17 = DerivedStorage;
  if (*DerivedStorage) {
    return 4294950869;
  }
  if (a5)
  {
    uint64_t v18 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v19 = v18 ? v18 : 0;
    if (v19 != *(void *)(CMBaseObjectGetVTable() + 16)) {
      return 0;
    }
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v19 + 32);
    if (!v20 || v20(a4, a5) != -1) {
      return 0;
    }
  }
  uint64_t result = MovieInformationLockForRead(*((void *)v17 + 3));
  if (!result)
  {
    TrackForTrackuint64_t ID = MovieInformationFindTrackForTrackID(*((void *)v17 + 3), a2);
    MovieInformationUnlockForRead(*((void *)v17 + 3));
    if (TrackForTrackID)
    {
      Storage = MutableMovieTrackGetStorage(a1, a2);
      if (Storage)
      {
        if (a8) {
          *a8 = 0;
        }
        uint64_t v23 = MEMORY[0x1E4F1F9F8];
        if (a9)
        {
          *(_OWORD *)a9 = *MEMORY[0x1E4F1F9F8];
          *(void *)(a9 + 16) = *(void *)(v23 + 16);
        }
        if (a10)
        {
          *(_OWORD *)a10 = *(_OWORD *)v23;
          *(void *)(a10 + 16) = *(void *)(v23 + 16);
        }
        *((unsigned char *)Storage + 56) = 1;
        return 4294954514;
      }
      else
      {
        return FigSignalErrorAt();
      }
    }
    return 4294950861;
  }
  return result;
}

BOOL MutableMovie_CanTrackAcceptFormatDescription(uint64_t a1, int a2, const opaqueCMFormatDescription *a3)
{
  BOOL v3 = 0;
  if (a1 && a2 && a3)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage) {
      return 0;
    }
    uint64_t v7 = DerivedStorage;
    int v24 = 0;
    if (*(unsigned char *)DerivedStorage || MovieInformationLockForRead(*(void *)(DerivedStorage + 24)))
    {
      return 0;
    }
    else
    {
      TrackForTrackuint64_t ID = MovieInformationFindTrackForTrackID(*(void *)(v7 + 24), a2);
      if (TrackForTrackID
        && (uint64_t v9 = TrackForTrackID, !MovieTrackGetBasicInfo(TrackForTrackID, &v24, 0))
        && (CMMediaType MediaType = CMFormatDescriptionGetMediaType(a3), MediaType == v24)
        && (CMMediaType v11 = MediaType, (v12 = MovieTrackCopyFormatDescriptionArray(v9)) != 0))
      {
        CFArrayRef v13 = v12;
        CFIndex Count = CFArrayGetCount(v12);
        if (Count >= 1)
        {
          CFIndex v15 = Count;
          BOOL v3 = 0;
          CFIndex v16 = 0;
          while (1)
          {
            CFStringRef ValueAtIndex = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v13, v16);
            if (v11 == 1952807028) {
              goto LABEL_16;
            }
            if (v11 != 1986618469) {
              break;
            }
            Presentationunint64_t Dimensions = CMVideoFormatDescriptionGetPresentationDimensions(a3, 1u, 1u);
            CGSize v20 = CMVideoFormatDescriptionGetPresentationDimensions(ValueAtIndex, 1u, 1u);
            if (v20.width != 0.0 || v20.height != 0.0)
            {
              double v21 = v20.width / v20.height;
              if (v20.height == 0.0) {
                double v21 = 0.0;
              }
              double v22 = PresentationDimensions.width / PresentationDimensions.height;
              if (PresentationDimensions.height == 0.0) {
                double v22 = 0.0;
              }
              if (vabdd_f64(v21, v22) > 0.00999999978) {
                goto LABEL_31;
              }
            }
LABEL_27:
            BOOL v3 = ++v16 >= v15;
            if (v15 == v16) {
              goto LABEL_31;
            }
          }
          if (v11 != 1953325924)
          {
            if (!CFEqual(a3, ValueAtIndex)) {
              goto LABEL_31;
            }
            goto LABEL_27;
          }
LABEL_16:
          FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(a3);
          if (MediaSubType != CMFormatDescriptionGetMediaSubType(ValueAtIndex)) {
            goto LABEL_31;
          }
          goto LABEL_27;
        }
        BOOL v3 = 1;
LABEL_31:
        CFRelease(v13);
      }
      else
      {
        BOOL v3 = 0;
      }
      MovieInformationUnlockForRead(*(void *)(v7 + 24));
    }
  }
  return v3;
}

uint64_t MutableMovie_GetTrackCompatibleWithTrackReader(uint64_t a1, const void *a2, _DWORD *a3)
{
  uint64_t result = 4294950861;
  if (a1 && a3)
  {
    *a3 = 0;
    uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v8 = (uint64_t)DerivedStorage;
      if (*DerivedStorage)
      {
        return 4294950869;
      }
      else
      {
        uint64_t v11 = 0;
        CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
        uint64_t result = createSourceFromTrack(0, a2, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, &v11);
        if (!result)
        {
          if (v11)
          {
            TrackForInsertionFromSource = getTrackForInsertionFromSource(v8, v11);
            if (TrackForInsertionFromSource) {
              *a3 = TrackForInsertionFromSource[1];
            }
            releaseSource(v9, v11);
          }
          return 0;
        }
      }
    }
    else
    {
      return 4294950861;
    }
  }
  return result;
}

uint64_t MutableMovie_InsertMediaIntoTrack(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 4294950861;
  if (a1)
  {
    if (a2)
    {
      if ((*(unsigned char *)(a3 + 36) & 1) != 0
        && (*(unsigned char *)(a4 + 12) & 1) != 0
        && (*(unsigned char *)(a4 + 36) & 1) != 0
        && !*(void *)(a4 + 40)
        && (*(void *)(a4 + 24) & 0x8000000000000000) == 0)
      {
        uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
        if (DerivedStorage)
        {
          uint64_t v10 = DerivedStorage;
          if (*(unsigned char *)DerivedStorage)
          {
            return 4294950869;
          }
          else
          {
            uint64_t v11 = MovieInformationLockForWrite(*(void *)(DerivedStorage + 24));
            if (v11)
            {
              return v11;
            }
            else
            {
              TrackForTrackuint64_t ID = MovieInformationFindTrackForTrackID(*(void *)(v10 + 24), a2);
              if (TrackForTrackID)
              {
                uint64_t v13 = TrackForTrackID;
                uint64_t v14 = *(CMTime **)(v10 + 24);
                long long v15 = *(_OWORD *)(a3 + 16);
                v20[0] = *(_OWORD *)a3;
                v20[1] = v15;
                v20[2] = *(_OWORD *)(a3 + 32);
                long long v16 = *(_OWORD *)(a4 + 16);
                v19[0] = *(_OWORD *)a4;
                v19[1] = v16;
                v19[2] = *(_OWORD *)(a4 + 32);
                uint64_t inserted = MovieTrackInsertMediaSegment(v14, v13, v20, v19);
                if (!inserted) {
                  uint64_t inserted = setTrackIDModified(a1, v10, a2);
                }
                uint64_t v4 = inserted;
              }
              MovieInformationUnlockForWrite(*(void **)(v10 + 24));
            }
          }
        }
      }
    }
  }
  return v4;
}

uint64_t MutableMovie_InsertEmptyTrackSegment(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = 4294950861;
  if (a1
    && a2
    && (*(unsigned char *)(a3 + 12) & 1) != 0
    && (*(unsigned char *)(a3 + 36) & 1) != 0
    && !*(void *)(a3 + 40)
    && (*(void *)(a3 + 24) & 0x8000000000000000) == 0)
  {
    long long v16 = *(_OWORD *)(a3 + 24);
    *(void *)&long long v17 = *(void *)(a3 + 40);
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare((CMTime *)&v16, &time2))
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        uint64_t v8 = DerivedStorage;
        if (*(unsigned char *)DerivedStorage)
        {
          return 4294950869;
        }
        else
        {
          uint64_t v9 = MovieInformationLockForWrite(*(void *)(DerivedStorage + 24));
          if (v9)
          {
            return v9;
          }
          else
          {
            TrackForTrackuint64_t ID = MovieInformationFindTrackForTrackID(*(void *)(v8 + 24), a2);
            if (TrackForTrackID)
            {
              uint64_t v11 = TrackForTrackID;
              if (*(int *)(TrackForTrackID + 816) < 1
                || (CFArrayRef v12 = *(CMTime **)(v8 + 24),
                    long long v13 = *(_OWORD *)(a3 + 16),
                    long long v16 = *(_OWORD *)a3,
                    long long v17 = v13,
                    long long v18 = *(_OWORD *)(a3 + 32),
                    uint64_t inserted = MovieTrackInsertEmptySegment(v12, v11, &v16),
                    !inserted))
              {
                uint64_t inserted = setTrackIDModified(a1, v8, a2);
              }
              uint64_t v3 = inserted;
            }
            MovieInformationUnlockForWrite(*(void **)(v8 + 24));
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t MutableMovie_InsertEmptySegment(uint64_t a1, uint64_t a2)
{
  if (!a1
    || (*(unsigned char *)(a2 + 12) & 1) == 0
    || (*(unsigned char *)(a2 + 36) & 1) == 0
    || *(void *)(a2 + 40)
    || (*(void *)(a2 + 24) & 0x8000000000000000) != 0)
  {
    return 4294950861;
  }
  long long v16 = *(_OWORD *)(a2 + 24);
  *(void *)&long long v17 = *(void *)(a2 + 40);
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!CMTimeCompare((CMTime *)&v16, &time2)) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294950861;
  }
  uint64_t v6 = DerivedStorage;
  if (*(unsigned char *)DerivedStorage) {
    return 4294950869;
  }
  uint64_t v7 = MovieInformationLockForWrite(*(void *)(DerivedStorage + 24));
  if (v7) {
    return v7;
  }
  TrackCFIndex Count = MovieInformationGetTrackCount(*(void *)(v6 + 24));
  if (TrackCount < 1)
  {
LABEL_18:
    uint64_t v3 = 0;
    *(unsigned char *)(v6 + 1) = 1;
  }
  else
  {
    uint64_t v9 = TrackCount;
    uint64_t v10 = 0;
    while (1)
    {
      TrackForTrackIndeCGFloat x = MovieInformationFindTrackForTrackIndex(*(void *)(v6 + 24), v10);
      if (!TrackForTrackIndex)
      {
        uint64_t v3 = 4294950872;
        goto LABEL_19;
      }
      uint64_t v12 = TrackForTrackIndex;
      if (*(int *)(TrackForTrackIndex + 816) >= 1)
      {
        long long v13 = *(CMTime **)(v6 + 24);
        long long v14 = *(_OWORD *)(a2 + 16);
        long long v16 = *(_OWORD *)a2;
        long long v17 = v14;
        long long v18 = *(_OWORD *)(a2 + 32);
        uint64_t inserted = MovieTrackInsertEmptySegment(v13, v12, &v16);
        if (inserted) {
          break;
        }
      }
      if (v9 == ++v10) {
        goto LABEL_18;
      }
    }
    uint64_t v3 = inserted;
  }
LABEL_19:
  MovieInformationUnlockForWrite(*(void **)(v6 + 24));
  return v3;
}

uint64_t MutableMovie_DeleteTrackSegment(uint64_t a1, int a2, long long *a3)
{
  uint64_t v3 = 4294950861;
  if (a1
    && a2
    && (*((unsigned char *)a3 + 12) & 1) != 0
    && (*((unsigned char *)a3 + 36) & 1) != 0
    && !*((void *)a3 + 5)
    && (*((void *)a3 + 3) & 0x8000000000000000) == 0)
  {
    long long v16 = *(long long *)((char *)a3 + 24);
    *(void *)&long long v17 = *((void *)a3 + 5);
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare((CMTime *)&v16, &time2))
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        uint64_t v8 = DerivedStorage;
        if (*(unsigned char *)DerivedStorage)
        {
          return 4294950869;
        }
        else
        {
          uint64_t v9 = MovieInformationLockForWrite(*(void *)(DerivedStorage + 24));
          if (v9)
          {
            return v9;
          }
          else
          {
            TrackForTrackuint64_t ID = MovieInformationFindTrackForTrackID(*(void *)(v8 + 24), a2);
            if (TrackForTrackID)
            {
              uint64_t v11 = TrackForTrackID;
              uint64_t v12 = *(CMTime **)(v8 + 24);
              long long v13 = a3[1];
              long long v16 = *a3;
              long long v17 = v13;
              long long v18 = a3[2];
              uint64_t v14 = MovieTrackDeleteSegment(v12, v11, (uint64_t)&v16);
              if (!v14) {
                uint64_t v14 = setTrackIDModified(a1, v8, a2);
              }
              uint64_t v3 = v14;
            }
            MovieInformationUnlockForWrite(*(void **)(v8 + 24));
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t MutableMovie_DeleteSegment(uint64_t a1, long long *a2)
{
  if (!a1
    || (*((unsigned char *)a2 + 12) & 1) == 0
    || (*((unsigned char *)a2 + 36) & 1) == 0
    || *((void *)a2 + 5)
    || (*((void *)a2 + 3) & 0x8000000000000000) != 0)
  {
    return 4294950861;
  }
  long long v16 = *(long long *)((char *)a2 + 24);
  *(void *)&long long v17 = *((void *)a2 + 5);
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!CMTimeCompare((CMTime *)&v16, &time2)) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294950861;
  }
  uint64_t v6 = DerivedStorage;
  if (*(unsigned char *)DerivedStorage) {
    return 4294950869;
  }
  uint64_t v7 = MovieInformationLockForWrite(*(void *)(DerivedStorage + 24));
  if (v7) {
    return v7;
  }
  TrackCFIndex Count = MovieInformationGetTrackCount(*(void *)(v6 + 24));
  if (TrackCount < 1)
  {
LABEL_17:
    uint64_t v3 = 0;
    *(unsigned char *)(v6 + 1) = 1;
  }
  else
  {
    uint64_t v9 = TrackCount;
    uint64_t v10 = 0;
    while (1)
    {
      TrackForTrackIndeCGFloat x = MovieInformationFindTrackForTrackIndex(*(void *)(v6 + 24), v10);
      if (!TrackForTrackIndex)
      {
        uint64_t v3 = 4294950872;
        goto LABEL_18;
      }
      uint64_t v12 = TrackForTrackIndex;
      long long v13 = *(CMTime **)(v6 + 24);
      long long v14 = a2[1];
      long long v16 = *a2;
      long long v17 = v14;
      long long v18 = a2[2];
      uint64_t v15 = MovieTrackDeleteSegment(v13, v12, (uint64_t)&v16);
      if (v15) {
        break;
      }
      if (v9 == ++v10) {
        goto LABEL_17;
      }
    }
    uint64_t v3 = v15;
  }
LABEL_18:
  MovieInformationUnlockForWrite(*(void **)(v6 + 24));
  return v3;
}

uint64_t MutableMovie_ScaleTrackSegment(uint64_t a1, int a2, uint64_t a3, long long *a4)
{
  uint64_t v4 = 4294950861;
  if (a1
    && a2
    && (*(unsigned char *)(a3 + 12) & 1) != 0
    && (*(unsigned char *)(a3 + 36) & 1) != 0
    && !*(void *)(a3 + 40)
    && (*(void *)(a3 + 24) & 0x8000000000000000) == 0)
  {
    long long v19 = *(_OWORD *)(a3 + 24);
    *(void *)&long long v20 = *(void *)(a3 + 40);
    CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
    if (CMTimeCompare((CMTime *)&v19, &time2))
    {
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        uint64_t v10 = DerivedStorage;
        if (*(unsigned char *)DerivedStorage)
        {
          return 4294950869;
        }
        else
        {
          uint64_t v11 = MovieInformationLockForWrite(*(void *)(DerivedStorage + 24));
          if (v11)
          {
            return v11;
          }
          else
          {
            TrackForTrackuint64_t ID = MovieInformationFindTrackForTrackID(*(void *)(v10 + 24), a2);
            if (TrackForTrackID)
            {
              uint64_t v13 = TrackForTrackID;
              long long v14 = *(CMTime **)(v10 + 24);
              long long v15 = *(_OWORD *)(a3 + 16);
              long long v19 = *(_OWORD *)a3;
              long long v20 = v15;
              long long v16 = *a4;
              long long v21 = *(_OWORD *)(a3 + 32);
              *(_OWORD *)&time2.CMTimeValue value = v16;
              time2.CMTimeEpoch epoch = *((void *)a4 + 2);
              uint64_t v17 = MovieTrackScaleSegment(v14, v13, &v19, (uint64_t)&time2);
              if (!v17) {
                uint64_t v17 = setTrackIDModified(a1, v10, a2);
              }
              uint64_t v4 = v17;
            }
            MovieInformationUnlockForWrite(*(void **)(v10 + 24));
          }
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return v4;
}

uint64_t MutableMovie_ScaleSegment(uint64_t a1, uint64_t a2, long long *a3)
{
  if (!a1
    || (*(unsigned char *)(a2 + 12) & 1) == 0
    || (*(unsigned char *)(a2 + 36) & 1) == 0
    || *(void *)(a2 + 40)
    || (*(void *)(a2 + 24) & 0x8000000000000000) != 0)
  {
    return 4294950861;
  }
  long long v19 = *(_OWORD *)(a2 + 24);
  *(void *)&long long v20 = *(void *)(a2 + 40);
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (!CMTimeCompare((CMTime *)&v19, &time2)) {
    return 0;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294950861;
  }
  uint64_t v8 = DerivedStorage;
  if (*(unsigned char *)DerivedStorage) {
    return 4294950869;
  }
  uint64_t v9 = MovieInformationLockForWrite(*(void *)(DerivedStorage + 24));
  if (v9) {
    return v9;
  }
  TrackCFIndex Count = MovieInformationGetTrackCount(*(void *)(v8 + 24));
  if (TrackCount < 1)
  {
LABEL_17:
    uint64_t v4 = 0;
    *(unsigned char *)(v8 + 1) = 1;
  }
  else
  {
    uint64_t v11 = TrackCount;
    uint64_t v12 = 0;
    while (1)
    {
      TrackForTrackIndeCGFloat x = MovieInformationFindTrackForTrackIndex(*(void *)(v8 + 24), v12);
      if (!TrackForTrackIndex)
      {
        uint64_t v4 = 4294950872;
        goto LABEL_18;
      }
      uint64_t v14 = TrackForTrackIndex;
      long long v15 = *(CMTime **)(v8 + 24);
      long long v16 = *(_OWORD *)(a2 + 16);
      long long v19 = *(_OWORD *)a2;
      long long v20 = v16;
      long long v17 = *a3;
      long long v21 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)&time2.CMTimeValue value = v17;
      time2.CMTimeEpoch epoch = *((void *)a3 + 2);
      uint64_t v18 = MovieTrackScaleSegment(v15, v14, &v19, (uint64_t)&time2);
      if (v18) {
        break;
      }
      if (v11 == ++v12) {
        goto LABEL_17;
      }
    }
    uint64_t v4 = v18;
  }
LABEL_18:
  MovieInformationUnlockForWrite(*(void **)(v8 + 24));
  return v4;
}

uint64_t MutableMovie_InsertSegmentFromTrackReader(uint64_t a1, int a2, uint64_t a3, const void *a4, uint64_t a5, CMTime *a6, __int16 a7)
{
  CFArrayRef v7 = 0;
  CFTypeRef v43 = 0;
  long long v44 = 0;
  uint64_t inserted = 4294950861;
  if (!a1 || !a4) {
    goto LABEL_7;
  }
  if ((*(unsigned char *)(a5 + 12) & 1) == 0
    || (*(unsigned char *)(a5 + 36) & 1) == 0
    || *(void *)(a5 + 40)
    || (uint64_t v12 = (_OWORD *)(a5 + 24), (*(void *)(a5 + 24) & 0x8000000000000000) != 0))
  {
LABEL_6:
    CFArrayRef v7 = 0;
    goto LABEL_7;
  }
  *(_OWORD *)CMTime time1 = *v12;
  *(void *)&time1[16] = *(void *)(a5 + 40);
  long long v36 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&time2.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v18 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  time2.CMTimeEpoch epoch = v18;
  if (!CMTimeCompare((CMTime *)time1, &time2))
  {
    CFArrayRef v7 = 0;
    uint64_t inserted = 0;
    goto LABEL_7;
  }
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    CFArrayRef v7 = 0;
    uint64_t inserted = 4294950861;
    goto LABEL_7;
  }
  uint64_t v20 = (uint64_t)DerivedStorage;
  if (*DerivedStorage)
  {
    CFArrayRef v7 = 0;
    uint64_t inserted = 4294950869;
    goto LABEL_7;
  }
  if ((a7 & 0x100) == 0)
  {
    *(_OWORD *)CMTime time1 = *(_OWORD *)a5;
    *(void *)&time1[16] = *(void *)(a5 + 16);
    *(_OWORD *)&time2.CMTimeValue value = v36;
    time2.CMTimeEpoch epoch = v18;
    int32_t v21 = CMTimeCompare((CMTime *)time1, &time2);
    if (a3)
    {
      if (!v21)
      {
        LODWORD(v40.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
        uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v22) {
          uint64_t v23 = v22;
        }
        else {
          uint64_t v23 = 0;
        }
        int v24 = *(void (**)(const void *, void, CMTime *))(v23 + 8);
        if (v24) {
          v24(a4, 0, &v40);
        }
        if (LODWORD(v40.value) == 1936684398
          && !FigTrackReaderCopyProperty((uint64_t)a4, @"TrackDuration", *MEMORY[0x1E4F1CF80], (uint64_t)&v43))
        {
          *(_OWORD *)CMTime time1 = *MEMORY[0x1E4F1F9F8];
          *(void *)&time1[16] = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          if (v43)
          {
            CFTypeID v35 = CFGetTypeID(v43);
            if (v35 == CFDictionaryGetTypeID()) {
              CMTimeMakeFromDictionary((CMTime *)time1, (CFDictionaryRef)v43);
            }
            if (v43)
            {
              CFRelease(v43);
              CFTypeRef v43 = 0;
            }
          }
          if ((time1[12] & 0x1D) == 1)
          {
            *(_OWORD *)&time2.CMTimeValue value = *v12;
            time2.CMTimeEpoch epoch = *(void *)(a5 + 40);
            CMTime v41 = *(CMTime *)time1;
            if (!CMTimeCompare(&time2, &v41)
              && !FigGaplessInfoGetTrackDuration(a3, (uint64_t)a4, 0, (CMTime *)time1))
            {
              _OWORD *v12 = *(_OWORD *)time1;
              *(void *)(a5 + 40) = *(void *)&time1[16];
            }
          }
        }
      }
    }
  }
  if (!*(unsigned char *)(v20 + 2))
  {
    *(_OWORD *)CMTime time1 = *(_OWORD *)&a6->value;
    *(void *)&time1[16] = a6->epoch;
    *(_OWORD *)&time2.CMTimeValue value = v36;
    time2.CMTimeEpoch epoch = v18;
    if (CMTimeCompare((CMTime *)time1, &time2) >= 1)
    {
      if (!a2) {
        goto LABEL_46;
      }
      TrackCFIndex Count = MovieInformationGetTrackCount(*(void *)(v20 + 24));
      if (TrackCount < 1) {
        goto LABEL_46;
      }
      uint64_t v30 = TrackCount;
      CFIndex v31 = 0;
      while (1)
      {
        CFStringRef ValueAtIndex = (CMTime **)CFArrayGetValueAtIndex(*(CFArrayRef *)(v20 + 56), v31);
        if (*((_DWORD *)ValueAtIndex + 1) == a2) {
          break;
        }
        if (v30 == ++v31) {
          goto LABEL_46;
        }
      }
      long long v33 = ValueAtIndex;
      memset(time1, 0, 24);
      getTrackEditedDuration(v20, (uint64_t)ValueAtIndex, (CMTime *)time1);
      CMTime time2 = *a6;
      CMTime v41 = *(CMTime *)time1;
      if (!CMTimeCompare(&time2, &v41))
      {
        memset(&time2, 0, sizeof(time2));
        GetTotalEditSegmentDuration(v33[2], &time2);
        CMTime v41 = time2;
        CMTime v40 = *a6;
        if (CMTimeCompare(&v41, &v40) >= 1)
        {
          *(_OWORD *)&a6->CMTimeValue value = *(_OWORD *)&time2.value;
          CMTimeEpoch epoch = time2.epoch;
          goto LABEL_49;
        }
      }
      else
      {
LABEL_46:
        getMaximumEditedTrackDuration(v20, (uint64_t)&v39);
        *(_OWORD *)CMTime time1 = *(_OWORD *)&a6->value;
        *(void *)&time1[16] = a6->epoch;
        if (!CMTimeCompare((CMTime *)time1, &v39))
        {
          memset(time1, 0, 24);
          MovieInformationGetMovieDuration(*(void *)(v20 + 24), (uint64_t)time1);
          CMTime time2 = *(CMTime *)time1;
          CMTime v41 = *a6;
          if (CMTimeCompare(&time2, &v41) >= 1)
          {
            *(_OWORD *)&a6->CMTimeValue value = *(_OWORD *)time1;
            CMTimeEpoch epoch = *(void *)&time1[16];
LABEL_49:
            a6->CMTimeEpoch epoch = epoch;
          }
        }
      }
    }
  }
  clearInsertionStateInTracks(a1);
  CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  SourceFromTracCFIndex k = createSourceFromTrack(0, a4, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], a7, 1, (uint64_t *)&v44);
  if (SourceFromTrack)
  {
    uint64_t inserted = SourceFromTrack;
    goto LABEL_6;
  }
  v44[37] = a2;
  CFMutableArrayRef Mutable = CFArrayCreateMutable(v25, 0, 0);
  CFArrayRef v7 = Mutable;
  if (Mutable)
  {
    CFArrayAppendValue(Mutable, v44);
    long long v28 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)CMTime time1 = *(_OWORD *)a5;
    *(_OWORD *)&time1[16] = v28;
    long long v38 = *(_OWORD *)(a5 + 32);
    CMTime time2 = *a6;
    uint64_t inserted = insertSegmentFromSourceArray(v7, a1, time1, (long long *)&time2.value, a7);
    if (!inserted) {
      *(unsigned char *)(v20 + 1) = 1;
    }
  }
  else
  {
    uint64_t inserted = FigSignalErrorAt();
  }
LABEL_7:
  releaseSourceArray(v7);
  if (v43) {
    CFRelease(v43);
  }
  return inserted;
}

uint64_t MutableMovie_InsertSegmentFromFormatReader(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  CFArrayRef Mutable = 0;
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  SourceFromTracCFIndex k = 4294950861;
  if (!a1) {
    goto LABEL_86;
  }
  uint64_t v8 = 0;
  if (!a2) {
    goto LABEL_9;
  }
  int v10 = *(_DWORD *)(a3 + 12);
  if ((v10 & 1) == 0) {
    goto LABEL_8;
  }
  uint64_t v14 = (_OWORD *)(a3 + 24);
  if ((*(unsigned char *)(a3 + 36) & 1) != 0 && !*(void *)(a3 + 40) && (*(void *)v14 & 0x8000000000000000) == 0)
  {
    *(_OWORD *)&time1.start.CMTimeValue value = *v14;
    time1.start.CMTimeEpoch epoch = *(void *)(a3 + 40);
    *(_OWORD *)&time2.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
    time2.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    if (!CMTimeCompare(&time1.start, &time2.start))
    {
      CFArrayRef Mutable = 0;
      uint64_t v8 = 0;
      SourceFromTracCFIndex k = 0;
      goto LABEL_9;
    }
    int v10 = *(_DWORD *)(a3 + 12);
    if ((v10 & 1) == 0) {
      goto LABEL_8;
    }
  }
  if ((*(unsigned char *)(a3 + 36) & 1) == 0 || *(void *)(a3 + 40)) {
    goto LABEL_8;
  }
  CFArrayRef Mutable = 0;
  if ((v10 & 0x1D) != 1)
  {
LABEL_86:
    uint64_t v8 = 0;
    goto LABEL_9;
  }
  uint64_t v8 = 0;
  if ((*(void *)v14 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a3;
  time1.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
  long long v50 = *MEMORY[0x1E4F1FA48];
  *(_OWORD *)&time2.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
  CMTimeEpoch v16 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  time2.start.CMTimeEpoch epoch = v16;
  if (CMTimeCompare(&time1.start, &time2.start) < 0) {
    goto LABEL_8;
  }
  int v17 = *(_DWORD *)(a4 + 12);
  if (v17 & 0x1D) != 1 && (v17) {
    goto LABEL_8;
  }
  if ((v17 & 0x1D) == 1)
  {
    *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a4;
    time1.start.CMTimeEpoch epoch = *(void *)(a4 + 16);
    *(_OWORD *)&time2.start.CMTimeValue value = v50;
    time2.start.CMTimeEpoch epoch = v16;
    if (CMTimeCompare(&time1.start, &time2.start) < 0)
    {
      SourceFromTracCFIndex k = FigSignalErrorAt();
LABEL_8:
      CFArrayRef Mutable = 0;
      uint64_t v8 = 0;
      goto LABEL_9;
    }
  }
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  uint64_t v8 = (uint64_t)DerivedStorage;
  if (!DerivedStorage) {
    goto LABEL_70;
  }
  char v49 = (_OWORD *)(a3 + 24);
  if (*DerivedStorage)
  {
    CFArrayRef Mutable = 0;
    goto LABEL_88;
  }
  long long v19 = (uint64_t *)MEMORY[0x1E4F1CF80];
  if ((a5 & 0x100) == 0)
  {
    *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a3;
    time1.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
    *(_OWORD *)&time2.start.CMTimeValue value = v50;
    time2.start.CMTimeEpoch epoch = v16;
    if (!CMTimeCompare(&time1.start, &time2.start))
    {
      uint64_t v42 = *v19;
      if (!FigFormatReaderCopyProperty((uint64_t)a2, @"Duration", *v19, (uint64_t)&cf))
      {
        if (cf)
        {
          CFTypeID v43 = CFGetTypeID(cf);
          if (v43 == CFDictionaryGetTypeID())
          {
            CMTimeMakeFromDictionary(&time1.start, (CFDictionaryRef)cf);
            CMTimeValue value = (const void *)time1.start.value;
            CMTimeFlags flags = time1.start.flags;
            CMTimeScale timescale = time1.start.timescale;
            CMTimeEpoch epoch = time1.start.epoch;
            if (cf)
            {
              CFRelease(cf);
              CFTypeRef cf = 0;
            }
            if (!FigFormatReaderCopyProperty((uint64_t)a2, @"NominalDuration", v42, (uint64_t)&cf))
            {
              if (cf)
              {
                CFTypeID v45 = CFGetTypeID(cf);
                if (v45 == CFDictionaryGetTypeID())
                {
                  CMTimeMakeFromDictionary(&time1.start, (CFDictionaryRef)cf);
                  CMTimeValue v56 = time1.start.value;
                  CMTimeScale v57 = time1.start.timescale;
                  if ((flags & 0x1D) == 1)
                  {
                    CMTimeFlags v46 = time1.start.flags;
                    if ((time1.start.flags & 0x1D) == 1)
                    {
                      time1.start.CMTimeValue value = v56;
                      time1.start.CMTimeScale timescale = v57;
                      CMTimeEpoch v47 = time1.start.epoch;
                      time2.start.CMTimeValue value = (CMTimeValue)value;
                      *(void *)&time2.start.CMTimeScale timescale = __PAIR64__(flags, timescale);
                      time2.start.CMTimeEpoch epoch = epoch;
                      if (CMTimeCompare(&time1.start, &time2.start) >= 1)
                      {
                        *(_OWORD *)&time1.start.CMTimeValue value = *v49;
                        time1.start.CMTimeEpoch epoch = *(void *)(a3 + 40);
                        time2.start.CMTimeValue value = (CMTimeValue)value;
                        *(void *)&time2.start.CMTimeScale timescale = __PAIR64__(flags, timescale);
                        time2.start.CMTimeEpoch epoch = epoch;
                        if (!CMTimeCompare(&time1.start, &time2.start))
                        {
                          *(void *)char v49 = v56;
                          *(_DWORD *)(a3 + 32) = v57;
                          *(_DWORD *)(a3 + 36) = v46;
                          *(void *)(a3 + 40) = v47;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (!*(unsigned char *)(v8 + 2))
  {
    *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a4;
    time1.start.CMTimeEpoch epoch = *(void *)(a4 + 16);
    *(_OWORD *)&time2.start.CMTimeValue value = v50;
    time2.start.CMTimeEpoch epoch = v16;
    if (CMTimeCompare(&time1.start, &time2.start) >= 1)
    {
      getMaximumEditedTrackDuration(v8, (uint64_t)&v53);
      *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a4;
      time1.start.CMTimeEpoch epoch = *(void *)(a4 + 16);
      if (!CMTimeCompare(&time1.start, &v53))
      {
        MovieInformationGetMovieDuration(*(void *)(v8 + 24), (uint64_t)&time1);
        *(_OWORD *)a4 = *(_OWORD *)&time1.start.value;
        *(void *)(a4 + 16) = time1.start.epoch;
      }
    }
  }
  clearInsertionStateInTracks(a1);
  CFAllocatorRef v20 = (const __CFAllocator *)*v19;
  time1.start.CMTimeValue value = 0;
  time2.start.CMTimeValue value = 0;
  CFArrayRef Mutable = CFArrayCreateMutable(v20, 0, 0);
  if (Mutable)
  {
    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v21) {
      uint64_t v22 = v21;
    }
    else {
      uint64_t v22 = 0;
    }
    uint64_t v23 = *(uint64_t (**)(const void *, CMTimeRange *))(v22 + 8);
    if (!v23)
    {
LABEL_68:
      SourceFromTracCFIndex k = 4294954514;
LABEL_69:
      releaseSourceArray(Mutable);
LABEL_70:
      CFArrayRef Mutable = 0;
      goto LABEL_9;
    }
    uint64_t v24 = v23(a2, &time1);
    if (v24)
    {
LABEL_95:
      SourceFromTracCFIndex k = v24;
      goto LABEL_69;
    }
    if (time1.start.value >= 1)
    {
      uint64_t v25 = 0;
      do
      {
        CMTimeValue value = 0;
        uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v27 = v26 ? v26 : 0;
        long long v28 = *(uint64_t (**)(const void *, uint64_t, const void **, void, void))(v27 + 48);
        if (!v28) {
          goto LABEL_68;
        }
        uint64_t v24 = v28(a2, v25, &value, 0, 0);
        if (v24) {
          goto LABEL_95;
        }
        SourceFromTracCFIndex k = createSourceFromTrack(a2, value, v20, a5, 1, &time2.start.value);
        if (value) {
          CFRelease(value);
        }
        if (SourceFromTrack) {
          goto LABEL_69;
        }
        uint64_t v29 = (const void *)time2.start.value;
        if (time2.start.value)
        {
          *(_DWORD *)(time2.start.value + 148) = 0;
          CFArrayAppendValue(Mutable, v29);
        }
      }
      while (++v25 < time1.start.value);
    }
    releaseSourceArray(0);
  }
  else
  {
    SourceFromTracCFIndex k = FigSignalErrorAt();
    releaseSourceArray(0);
    if (SourceFromTrack) {
      goto LABEL_70;
    }
  }
  *(void *)(v8 + 72) = Mutable;
  long long v30 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a3;
  *(_OWORD *)&time1.start.CMTimeEpoch epoch = v30;
  *(_OWORD *)&time1.duration.CMTimeScale timescale = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)a4;
  time2.start.CMTimeEpoch epoch = *(void *)(a4 + 16);
  uint64_t inserted = insertSegmentFromSourceArray(Mutable, a1, &time1, (long long *)&time2.start.value, a5);
  if (inserted) {
    goto LABEL_93;
  }
  memset(&v52, 0, sizeof(v52));
  *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)a4;
  time1.start.CMTimeEpoch epoch = *(void *)(a4 + 16);
  *(_OWORD *)&time2.start.CMTimeValue value = *v49;
  time2.start.CMTimeEpoch epoch = *(void *)(a3 + 40);
  CMTimeRangeMake(&v52, &time1.start, &time2.start);
  CMTimeRange time2 = v52;
  uint64_t v32 = CMBaseObjectGetDerivedStorage();
  if (!v32)
  {
    SourceFromTracCFIndex k = 4294950861;
    goto LABEL_9;
  }
  uint64_t v33 = v32;
  if (*(unsigned char *)v32)
  {
LABEL_88:
    SourceFromTracCFIndex k = 4294950869;
    goto LABEL_9;
  }
  uint64_t inserted = MovieInformationLockForRead(*(void *)(v32 + 24));
  if (inserted)
  {
LABEL_93:
    SourceFromTracCFIndex k = inserted;
    goto LABEL_9;
  }
  TrackCFIndex Count = MovieInformationGetTrackCount(*(void *)(v33 + 24));
  if (TrackCount < 1)
  {
    MovieInformationUnlockForRead(*(void *)(v33 + 24));
LABEL_85:
    SourceFromTracCFIndex k = 0;
    *(unsigned char *)(v8 + 1) = 1;
    goto LABEL_9;
  }
  uint64_t v35 = TrackCount;
  SourceFromTracCFIndex k = 0;
  for (uint64_t i = 0; i != v35; ++i)
  {
    TrackForTrackIndeCGFloat x = MovieInformationFindTrackForTrackIndex(*(void *)(v33 + 24), i);
    if (TrackForTrackIndex)
    {
      uint64_t v38 = TrackForTrackIndex;
      Storage = MutableMovieTrackGetStorage(a1, *(_DWORD *)(TrackForTrackIndex + 144));
      if (Storage)
      {
        CMTime v40 = Storage;
        if (!*((unsigned char *)Storage + 124))
        {
          if (*(int *)(v38 + 816) >= 1)
          {
            CMTime v41 = *(CMTime **)(v33 + 24);
            CMTimeRange time1 = time2;
            SourceFromTracCFIndex k = MovieTrackInsertEmptySegment(v41, v38, (long long *)&time1.start.value);
          }
          *((unsigned char *)v40 + 124) = 1;
          *((unsigned char *)v40 + 56) = SourceFromTrack == 0;
        }
      }
    }
  }
  MovieInformationUnlockForRead(*(void *)(v33 + 24));
  if (!SourceFromTrack) {
    goto LABEL_85;
  }
LABEL_9:
  releaseSourceArray(Mutable);
  if (cf) {
    CFRelease(cf);
  }
  if (v8) {
    *(void *)(v8 + 72) = 0;
  }
  return SourceFromTrack;
}

uint64_t MutableMovie_AddTrackReferenceToTrack(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t result = 4294950861;
  if (a1 && a3 && a4)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v10 = DerivedStorage;
      if (*(unsigned char *)DerivedStorage)
      {
        return 4294950869;
      }
      else
      {
        uint64_t result = MovieInformationLockForWrite(*(void *)(DerivedStorage + 24));
        if (!result)
        {
          uint64_t v11 = MovieInformationAddOneTrackReference(*(uint64_t **)(v10 + 24), a2, a3, a4);
          MovieInformationUnlockForWrite(*(void **)(v10 + 24));
          *(unsigned char *)(v10 + 1) = 1;
          return v11;
        }
      }
    }
    else
    {
      return 4294950861;
    }
  }
  return result;
}

uint64_t MutableMovie_DeleteTrackReferenceToTrack(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t result = 4294950861;
  if (a1 && a3 && a4)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (DerivedStorage)
    {
      uint64_t v10 = DerivedStorage;
      if (*(unsigned char *)DerivedStorage)
      {
        return 4294950869;
      }
      else
      {
        uint64_t result = MovieInformationLockForWrite(*(void *)(DerivedStorage + 24));
        if (!result)
        {
          uint64_t v11 = MovieInformationRemoveOneTrackReference(*(uint64_t **)(v10 + 24), a2, a3, a4);
          MovieInformationUnlockForWrite(*(void **)(v10 + 24));
          *(unsigned char *)(v10 + 1) = 1;
          return v11;
        }
      }
    }
    else
    {
      return 4294950861;
    }
  }
  return result;
}

uint64_t MutableMovie_CopyAsset(const void *a1, uint64_t a2, uint64_t a3, CFTypeRef *a4)
{
  CFTypeRef v20 = 0;
  CFAllocatorRef v8 = CFGetAllocator(a1);
  uint64_t v9 = 4294950861;
  if (a1)
  {
    if (a4)
    {
      uint64_t v10 = (uint64_t)v8;
      uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
      if (DerivedStorage)
      {
        uint64_t v12 = DerivedStorage;
        if (!a2)
        {
          long long v15 = *(const void **)(DerivedStorage + 104);
          if (v15)
          {
            CFTypeRef v20 = CFRetain(v15);
LABEL_17:
            uint64_t v9 = 0;
            *a4 = v20;
            return v9;
          }
        }
        CFTypeRef cf = 0;
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        CMTimeEpoch v16 = *(uint64_t (**)(const void *, uint64_t, uint64_t, CFTypeRef *))(v14 + 8);
        if (v16)
        {
          uint64_t v17 = v16(a1, a2, a3, &cf);
          if (v17) {
            return v17;
          }
          uint64_t v9 = FigAssetCreateWithFormatReader(v10, cf, (unint64_t)(*(unsigned char *)(v12 + 2) != 0) << 8, 0, &v20);
          CFRelease(cf);
          if (!a2 && !v9)
          {
            *(void *)(v12 + 104) = CFRetain(v20);
            goto LABEL_17;
          }
          if (!v9) {
            goto LABEL_17;
          }
        }
        else
        {
          return 4294954514;
        }
      }
    }
  }
  return v9;
}

uint64_t MutableMovie_WriteHeaderToByteStream(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  if (a1 && a2 && a3 && (uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage()) != 0 && !*DerivedStorage)
  {
    return writeHeaderToByteStream(a1, a2, a3, a4);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t MutableMovie_AddByteStreamForMediaDataStrage(uint64_t a1, const void *a2)
{
  uint64_t v13 = -1;
  CFTypeRef cf = 0;
  if (!a1
    || !a2
    || (uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage()) == 0
    || (uint64_t v5 = (uint64_t)DerivedStorage, *DerivedStorage))
  {
    uint64_t v10 = FigSignalErrorAt();
    goto LABEL_13;
  }
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v9 = *(uint64_t (**)(uint64_t, void, void, CFTypeRef *))(v8 + 48);
  if (v9)
  {
    uint64_t v10 = v9(CMBaseObject, *MEMORY[0x1E4F1EC78], *MEMORY[0x1E4F1CF80], &cf);
    if (v10)
    {
LABEL_13:
      uint64_t ByteStreamForTrackStorageURL = v10;
      goto LABEL_15;
    }
    uint64_t ByteStreamForTrackStorageURL = getByteStreamForTrackStorageURL(a1, cf, 0, &v13);
    if (!ByteStreamForTrackStorageURL && v13 == -1)
    {
      uint64_t v10 = createStreamInfoForByteStream(a2, v5, &v13);
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t ByteStreamForTrackStorageURL = 4294954514;
  }
LABEL_15:
  if (cf) {
    CFRelease(cf);
  }
  return ByteStreamForTrackStorageURL;
}

uint64_t writeHeaderToByteStream(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  ptr = 0;
  CFURLRef url = 0;
  CMBlockBufferRef v86 = 0;
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
  uint64_t v10 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v10) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t, void, void, CFURLRef *))(v11 + 48);
  if (!v12) {
    goto LABEL_96;
  }
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  LastAtomTypeAndOffsetAndCFIndex Length = v12(CMBaseObject, *MEMORY[0x1E4F1EC78], *MEMORY[0x1E4F1CF80], &url);
  if (LastAtomTypeAndOffsetAndLength) {
    goto LABEL_95;
  }
  CFStringRef v15 = CFURLCopyPathExtension(url);
  if (v15)
  {
    CFStringRef v16 = v15;
    FigGetFileTypeForMovieFamilyExtension(v15);
    CFRelease(v16);
    if (!FigCFEqual())
    {
      uint64_t appended = 4294950874;
      goto LABEL_97;
    }
  }
  CFArrayRef v17 = *(const __CFArray **)(DerivedStorage + 56);
  if (v17)
  {
    CFIndex Count = CFArrayGetCount(v17);
    if (Count >= 1)
    {
      CFIndex v19 = Count;
      for (CFIndex i = 0; i != v19; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(DerivedStorage + 56), i);
        if (ValueAtIndex)
        {
          uint64_t v22 = ValueAtIndex;
          if (*((_DWORD *)ValueAtIndex + 30) == 1)
          {
            uint64_t v23 = ValueAtIndex[16];
            if (v23)
            {
              releaseSource(v13, v23);
              v22[16] = 0;
            }
          }
        }
      }
    }
  }
  BOOL v25 = !a4
     || (CFTypeID v24 = CFGetTypeID(a4), v24 != CFDictionaryGetTypeID())
     || CFDictionaryGetValue((CFDictionaryRef)a4, @"WriteFileTypeAtom") != (const void *)*MEMORY[0x1E4F1CFC8];
  LastAtomTypeAndOffsetAndCFIndex Length = createMovieHeaderMakerFromMiP(a1, *(const void **)(DerivedStorage + 24), &ptr);
  if (LastAtomTypeAndOffsetAndLength) {
    goto LABEL_95;
  }
  LastAtomTypeAndOffsetAndCFIndex Length = MovieHeaderMakerCopyMovieHeaderAsBlockBuffer((uint64_t)ptr, v13, a2, url, &v86);
  if (LastAtomTypeAndOffsetAndLength) {
    goto LABEL_95;
  }
  uint64_t v85 = 0;
  uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
  uint64_t v27 = v26 ? v26 : 0;
  long long v28 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v27 + 24);
  if (!v28) {
    goto LABEL_96;
  }
  LastAtomTypeAndOffsetAndCFIndex Length = v28(a3, 0, &v85);
  if (LastAtomTypeAndOffsetAndLength) {
    goto LABEL_95;
  }
  char v29 = !v25;
  if (v85) {
    char v29 = 1;
  }
  if (v29)
  {
    uint64_t v83 = -1;
    uint64_t v84 = -1;
    unsigned int v82 = 1752524863;
    DataCFIndex Length = CMBlockBufferGetDataLength(v86);
    long long v97 = 0u;
    long long v98 = 0u;
    long long v95 = 0u;
    long long v96 = 0u;
    long long v93 = 0u;
    long long v94 = 0u;
    *(_OWORD *)CMBlockBufferRef theBuffer = 0u;
    uint64_t CurrentAtomGlobalOffset = FigAtomStreamInitWithByteStream();
    if (!CurrentAtomGlobalOffset)
    {
      uint64_t AtomWithType = FigAtomStreamPositionAtFirstAtomWithType();
      if (AtomWithType == -12890)
      {
        uint64_t v84 = -1;
        goto LABEL_59;
      }
      uint64_t appended = AtomWithType;
      if (AtomWithType)
      {
LABEL_48:
        if (appended && appended != -12894) {
          goto LABEL_97;
        }
LABEL_59:
        BOOL v40 = -DataLength > 7 || DataLength >= 0;
        if (DataLength > 0 || !v40)
        {
          theBuffer[0] = 0;
          LastAtomTypeAndOffsetAndCFIndex Length = getLastAtomTypeAndOffsetAndLength(a3, &v82, &v83, theBuffer);
          if (LastAtomTypeAndOffsetAndLength) {
            goto LABEL_95;
          }
          if (v82 == 1836019574 || v82 == 1718773093)
          {
            LastAtomTypeAndOffsetAndCFIndex Length = CMByteStreamWriteBlockBuffer();
            if (LastAtomTypeAndOffsetAndLength) {
              goto LABEL_95;
            }
            uint64_t v42 = v84;
            if (v84 != -1 && v84 != v83)
            {
              uint64_t v43 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v43) {
                uint64_t v44 = v43;
              }
              else {
                uint64_t v44 = 0;
              }
              long long v50 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, const char *, void))(v44 + 16);
              if (!v50) {
                goto LABEL_96;
              }
              LastAtomTypeAndOffsetAndCFIndex Length = v50(a3, 4, v42 + 4, "free", 0);
              if (LastAtomTypeAndOffsetAndLength) {
                goto LABEL_95;
              }
            }
          }
          else
          {
            LODWORD(v90) = 0;
            uint64_t v45 = v83;
            uint64_t v46 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v46) {
              uint64_t v47 = v46;
            }
            else {
              uint64_t v47 = 0;
            }
            CFIndex v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(v47 + 8);
            if (!v48) {
              goto LABEL_96;
            }
            LastAtomTypeAndOffsetAndCFIndex Length = v48(a3, 4, v45, &v90, 0);
            if (LastAtomTypeAndOffsetAndLength) {
              goto LABEL_95;
            }
            int v49 = v90;
            LODWORD(v90) = bswap32(v90);
            if (v49)
            {
              LastAtomTypeAndOffsetAndCFIndex Length = CMByteStreamWriteBlockBuffer();
              if (LastAtomTypeAndOffsetAndLength) {
                goto LABEL_95;
              }
              if (v84 != -1)
              {
                LastAtomTypeAndOffsetAndCFIndex Length = CMByteStreamWrite(a3, 4, v84 + 4, (uint64_t)"free");
                if (LastAtomTypeAndOffsetAndLength) {
                  goto LABEL_95;
                }
              }
            }
            else
            {
              unsigned int v51 = theBuffer[0];
              if ((uint64_t)theBuffer[0] > 0xFFFFFFFFLL)
              {
                if (!precedingAtomIsWideAtom(a3, v83))
                {
                  uint64_t appended = 4294950860;
                  goto LABEL_97;
                }
                if (v84 != -1)
                {
                  LastAtomTypeAndOffsetAndCFIndex Length = CMByteStreamWrite(a3, 4, v84 + 4, (uint64_t)"free");
                  if (LastAtomTypeAndOffsetAndLength) {
                    goto LABEL_95;
                  }
                }
                v83 -= 8;
                theBuffer[0] = (CMBlockBufferRef)((char *)theBuffer[0] + 8);
                LODWORD(v90) = 0x1000000;
                LastAtomTypeAndOffsetAndCFIndex Length = CMByteStreamWrite(a3, 4, v83, (uint64_t)&v90);
                if (LastAtomTypeAndOffsetAndLength) {
                  goto LABEL_95;
                }
                unsigned int v82 = bswap32(v82);
                LastAtomTypeAndOffsetAndCFIndex Length = CMByteStreamWrite(a3, 4, v83 + 4, (uint64_t)&v82);
                if (LastAtomTypeAndOffsetAndLength) {
                  goto LABEL_95;
                }
                theBuffer[0] = (CMBlockBufferRef)bswap64((unint64_t)theBuffer[0]);
                CMByteStreamWrite(a3, 8, v83 + 8, (uint64_t)theBuffer);
              }
              else
              {
                if (v84 != -1)
                {
                  LastAtomTypeAndOffsetAndCFIndex Length = CMByteStreamWrite(a3, 4, v84 + 4, (uint64_t)"free");
                  if (LastAtomTypeAndOffsetAndLength) {
                    goto LABEL_95;
                  }
                  unsigned int v51 = theBuffer[0];
                }
                theBuffer[0] = (CMBlockBufferRef)bswap32(v51);
                LastAtomTypeAndOffsetAndCFIndex Length = CMByteStreamWrite(a3, 4, v83, (uint64_t)theBuffer);
                if (LastAtomTypeAndOffsetAndLength) {
                  goto LABEL_95;
                }
              }
              LastAtomTypeAndOffsetAndCFIndex Length = CMByteStreamWriteBlockBuffer();
              if (LastAtomTypeAndOffsetAndLength) {
                goto LABEL_95;
              }
            }
          }
        }
        theBuffer[0] = 0;
        LODWORD(v90) = 0;
        if (a2) {
          BOOL v53 = a3 == 0;
        }
        else {
          BOOL v53 = 1;
        }
        char v54 = v53;
        if (!v53)
        {
          uint64_t v55 = copyFileTypeAtomAsBlockBuffer(a2, theBuffer);
          if (v55) {
            goto LABEL_184;
          }
          size_t v56 = CMBlockBufferGetDataLength(theBuffer[0]);
          if (v56 <= 0x20)
          {
            uint64_t v57 = v56;
            uint64_t v58 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v58) {
              uint64_t v59 = v58;
            }
            else {
              uint64_t v59 = 0;
            }
            uint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(v59 + 8);
            if (!v60)
            {
LABEL_142:
              uint64_t appended = 4294954514;
              goto LABEL_143;
            }
            uint64_t v55 = v60(a3, 4, 4, &v90, 0);
            if (!v55)
            {
              if (v90 == 1952539757)
              {
                uint64_t v61 = 8;
                while (1)
                {
                  uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v63 = v62 ? v62 : 0;
                  CFArrayRef v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(v63 + 8);
                  if (!v64) {
                    goto LABEL_142;
                  }
                  uint64_t v55 = v64(a3, 4, v61, &v90, 0);
                  if (v55) {
                    goto LABEL_184;
                  }
                  if (v90 != 1887007846) {
                    break;
                  }
                  v61 += 4;
                  if (v61 == 32)
                  {
                    uint64_t appended = CMByteStreamWriteBlockBuffer();
                    if (!appended)
                    {
                      LOBYTE(v89) = 0;
                      if (v57 <= 31)
                      {
                        do
                        {
                          uint64_t v65 = *(void *)(CMBaseObjectGetVTable() + 16);
                          if (v65) {
                            uint64_t v66 = v65;
                          }
                          else {
                            uint64_t v66 = 0;
                          }
                          CFTypeID v67 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(v66 + 16);
                          if (v67) {
                            uint64_t appended = v67(a3, 1, v57, &v89, 0);
                          }
                          else {
                            uint64_t appended = 4294954514;
                          }
                          ++v57;
                        }
                        while (v57 != 32);
                      }
                    }
                    goto LABEL_143;
                  }
                }
              }
              uint64_t appended = 0;
LABEL_143:
              if (theBuffer[0]) {
                CFRelease(theBuffer[0]);
              }
              if (appended) {
                goto LABEL_97;
              }
              theBuffer[0] = 0;
              LODWORD(v90) = 0;
              LODWORD(v89) = 0;
              if (v54)
              {
LABEL_181:
                uint64_t v71 = FigSignalErrorAt();
                goto LABEL_182;
              }
              uint64_t v68 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v68) {
                uint64_t v69 = v68;
              }
              else {
                uint64_t v69 = 0;
              }
              CFTypeID v70 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t *, void))(v69 + 8);
              if (v70)
              {
                uint64_t v71 = v70(a3, 4, 0, &v90, 0);
                if (v71) {
                  goto LABEL_182;
                }
                uint64_t v72 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v72) {
                  uint64_t v73 = v72;
                }
                else {
                  uint64_t v73 = 0;
                }
                CFTypeID v74 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(v73 + 8);
                if (v74)
                {
                  uint64_t v71 = v74(a3, 4, 4, &v89, 0);
                  if (!v71)
                  {
                    LODWORD(v90) = bswap32(v90);
                    int v75 = v89;
                    LODWORD(v89) = bswap32(v89);
                    if (v75 != 1887007846)
                    {
                      uint64_t appended = 0;
LABEL_171:
                      if (theBuffer[0]) {
                        CFRelease(theBuffer[0]);
                      }
                      goto LABEL_173;
                    }
                    uint64_t v71 = copyFileTypeAtomAsBlockBuffer(a2, theBuffer);
                    if (!v71)
                    {
                      size_t v76 = CMBlockBufferGetDataLength(theBuffer[0]);
                      if (v76 <= v90)
                      {
                        uint64_t v77 = v76;
                        uint64_t appended = CMByteStreamWriteBlockBuffer();
                        if (!appended)
                        {
                          LOBYTE(v91) = 0;
                          while (v77 < v90)
                          {
                            uint64_t v78 = *(void *)(CMBaseObjectGetVTable() + 16);
                            if (v78) {
                              uint64_t v79 = v78;
                            }
                            else {
                              uint64_t v79 = 0;
                            }
                            float v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *, void))(v79 + 16);
                            if (v80) {
                              uint64_t appended = v80(a3, 1, v77, &v91, 0);
                            }
                            else {
                              uint64_t appended = 4294954514;
                            }
                            ++v77;
                          }
                        }
                        goto LABEL_171;
                      }
                      goto LABEL_181;
                    }
                  }
LABEL_182:
                  uint64_t appended = v71;
                  goto LABEL_171;
                }
              }
              uint64_t appended = 4294954514;
              goto LABEL_171;
            }
LABEL_184:
            uint64_t appended = v55;
            goto LABEL_143;
          }
        }
        uint64_t v55 = FigSignalErrorAt();
        goto LABEL_184;
      }
      uint64_t CurrentAtomGlobalOffset = FigAtomStreamGetCurrentAtomGlobalOffset();
    }
    uint64_t appended = CurrentAtomGlobalOffset;
    goto LABEL_48;
  }
  theBuffer[0] = 0;
  if (!a2 || !a3)
  {
    uint64_t appended = FigSignalErrorAt();
    if (appended) {
      goto LABEL_97;
    }
LABEL_37:
    uint64_t v32 = v86;
    theBuffer[0] = 0;
    if (!v86 || !a3)
    {
      uint64_t v39 = FigSignalErrorAt();
      goto LABEL_55;
    }
    uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v33) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = 0;
    }
    uint64_t v38 = *(uint64_t (**)(uint64_t, void, CMBlockBufferRef *))(v34 + 24);
    if (v38)
    {
      LastAtomTypeAndOffsetAndCFIndex Length = v38(a3, 0, theBuffer);
      if (!LastAtomTypeAndOffsetAndLength)
      {
        CMBlockBufferGetDataLength(v32);
        uint64_t v39 = CMByteStreamWriteBlockBuffer();
LABEL_55:
        uint64_t appended = v39;
LABEL_173:
        if (!appended)
        {
          CGSize v81 = *(const void **)(DerivedStorage + 8);
          if (v81 && CFEqual(url, v81))
          {
            uint64_t appended = 0;
            *(unsigned char *)(DerivedStorage + 1) = 0;
          }
          else
          {
            uint64_t appended = 0;
          }
        }
        goto LABEL_97;
      }
LABEL_95:
      uint64_t appended = LastAtomTypeAndOffsetAndLength;
      goto LABEL_97;
    }
LABEL_96:
    uint64_t appended = 4294954514;
    goto LABEL_97;
  }
  uint64_t appended = copyFileTypeAtomAsBlockBuffer(a2, theBuffer);
  CMBlockBufferRef v31 = theBuffer[0];
  if (!appended)
  {
    CMBlockBufferGetDataLength(theBuffer[0]);
    uint64_t appended = CMByteStreamAppendBlockBuffer();
    CMBlockBufferRef v31 = theBuffer[0];
  }
  if (v31) {
    CFRelease(v31);
  }
  if (!appended) {
    goto LABEL_37;
  }
LABEL_97:
  if (v86) {
    CFRelease(v86);
  }
  MovieHeaderMakerRelease((const __CFAllocator **)ptr);
  if (url) {
    CFRelease(url);
  }
  return appended;
}

uint64_t createMovieHeaderMakerFromMiP(uint64_t a1, const void *a2, void *a3)
{
  uint64_t v20 = 0;
  uint64_t DerivedStorage = (unsigned char *)CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage)
  {
    uint64_t v7 = 4294950861;
    goto LABEL_20;
  }
  if (*DerivedStorage)
  {
    uint64_t v7 = 4294950869;
    goto LABEL_20;
  }
  uint64_t v7 = 4294950861;
  if (a2 && a3)
  {
    uint64_t v8 = MovieInformationLockForRead((uint64_t)a2);
    if (!v8)
    {
      uint64_t v8 = MovieHeaderMakerCreateWithMovieInformation((const __CFAllocator *)*MEMORY[0x1E4F1CF80], a2, 0, &v20);
      if (!v8)
      {
        if (v20)
        {
          TrackCFIndex Count = MovieInformationGetTrackCount((uint64_t)a2);
          if (TrackCount < 1)
          {
LABEL_18:
            uint64_t v7 = 0;
          }
          else
          {
            uint64_t v10 = TrackCount;
            uint64_t v11 = 0;
            while (1)
            {
              uint64_t v19 = 0;
              TrackForTrackIndeCGFloat x = MovieInformationFindTrackForTrackIndex((uint64_t)a2, v11);
              int v18 = 0;
              if (!TrackForTrackIndex) {
                break;
              }
              CFAllocatorRef v13 = (const void *)TrackForTrackIndex;
              uint64_t BasicInfo = MovieTrackGetBasicInfo(TrackForTrackIndex, 0, &v18);
              if (BasicInfo) {
                goto LABEL_23;
              }
              if (!v18) {
                break;
              }
              uint64_t BasicInfo = MovieHeaderMakerAddTrack(v20, v13, &v19);
              if (BasicInfo
                || (Storage = MutableMovieTrackGetStorage(a1, v18)) != 0
                && (CFStringRef v16 = (const void *)*((void *)Storage + 6)) != 0
                && (uint64_t BasicInfo = MovieHeaderMakerTrackSetSampleReferenceBaseURL(v20, v19, v16), BasicInfo))
              {
LABEL_23:
                uint64_t v7 = BasicInfo;
                goto LABEL_19;
              }
              if (v10 == ++v11) {
                goto LABEL_18;
              }
            }
            uint64_t v7 = 4294950872;
          }
LABEL_19:
          MovieInformationUnlockForRead((uint64_t)a2);
          goto LABEL_20;
        }
        uint64_t v8 = FigSignalErrorAt();
      }
    }
    uint64_t v7 = v8;
    goto LABEL_21;
  }
LABEL_20:
  if (a3) {
LABEL_21:
  }
    *a3 = v20;
  return v7;
}

uint64_t CMByteStreamWrite(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v9 + 16);
  if (!v10) {
    return 4294954514;
  }

  return v10(a1, a2, a3, a4, 0);
}

uint64_t getLastAtomTypeAndOffsetAndLength(uint64_t a1, _DWORD *a2, void *a3, void *a4)
{
  uint64_t result = FigAtomStreamInitWithByteStream();
  if (result != -12893)
  {
    if (result) {
      goto LABEL_7;
    }
    do
      int Atom = FigAtomStreamAdvanceToNextAtom();
    while (!Atom);
    if (Atom == -12890)
    {
      uint64_t result = FigAtomStreamGetCurrentAtomTypeAndDataLength();
      if (!result) {
        uint64_t result = FigAtomStreamGetCurrentAtomGlobalOffset();
      }
LABEL_7:
      if (!a2) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  if (a2) {
LABEL_8:
  }
    *a2 = 1752524863;
LABEL_9:
  if (a3) {
    *a3 = 0;
  }
  if (a4) {
    *a4 = 0;
  }
  return result;
}

BOOL precedingAtomIsWideAtom(uint64_t a1, uint64_t a2)
{
  BOOL result = 0;
  int v13 = 1752524863;
  int v14 = 0;
  uint64_t v4 = a2 - 8;
  if (a2 >= 8)
  {
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(unsigned __int16 (**)(uint64_t, uint64_t, uint64_t, int *, void))(v7 + 8);
    if (!v8 || v8(a1, 4, v4, &v14, 0)) {
      return 0;
    }
    uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v10 = v9 ? v9 : 0;
    uint64_t v11 = *(unsigned __int16 (**)(uint64_t, uint64_t, uint64_t, int *, void))(v10 + 8);
    return v11 && !v11(a1, 4, a2 - 4, &v13, 0) && v14 == 0x8000000 && v13 == 1701079415;
  }
  return result;
}

_DWORD *MutableMovieTrackGetStorage(uint64_t a1, int a2)
{
  uint64_t v2 = 0;
  if (a1 && a2)
  {
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    if (!DerivedStorage) {
      return 0;
    }
    uint64_t v5 = DerivedStorage;
    if (*(unsigned char *)DerivedStorage)
    {
      return 0;
    }
    else
    {
      MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
      CFArrayRef v6 = *(const __CFArray **)(v5 + 56);
      if (v6 && (CFIndex Count = CFArrayGetCount(v6), Count >= 1))
      {
        CFIndex v8 = Count;
        CFIndex v9 = 0;
        while (1)
        {
          CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v5 + 56), v9);
          if (ValueAtIndex)
          {
            uint64_t v2 = ValueAtIndex;
            if (ValueAtIndex[1] == a2) {
              break;
            }
          }
          if (v8 == ++v9) {
            goto LABEL_11;
          }
        }
      }
      else
      {
LABEL_11:
        uint64_t v2 = 0;
      }
      MEMORY[0x19970E930](*(void *)(v5 + 48));
    }
  }
  return v2;
}

uint64_t copyFileTypeAtomAsBlockBuffer(uint64_t a1, CMBlockBufferRef *a2)
{
  CFTypeRef v11 = 0;
  CFTypeRef v12 = 0;
  CFTypeRef cf = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v5 = MovieHeaderMakerCopyFileTypeMajorBrand(*MEMORY[0x1E4F1CF80], a1, 0, 0, (CFNumberRef *)&v12);
  if (v5
    || (uint64_t v5 = MovieHeaderMakerCopyFileTypeMinorVersion((uint64_t)v4, a1, 0, 0, (CFNumberRef *)&v11), v5))
  {
    uint64_t v8 = v5;
  }
  else
  {
    uint64_t v6 = MovieHeaderMakerCopyFileTypeCompatibleBrands(v4, a1, 0, 0, (CFMutableArrayRef *)&cf);
    CFTypeRef v7 = cf;
    if (!v6)
    {
      uint64_t v8 = MovieHeaderMakerCopyFileTypeAtomAsBlockBuffer(v4, (const __CFNumber *)v12, (const __CFNumber *)v11, (CFArrayRef)cf, a2);
      CFTypeRef v7 = cf;
      if (!cf) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
    uint64_t v8 = v6;
    if (cf) {
LABEL_5:
    }
      CFRelease(v7);
  }
LABEL_6:
  if (v11) {
    CFRelease(v11);
  }
  if (v12) {
    CFRelease(v12);
  }
  return v8;
}

uint64_t writeBlockBufferToCFData(CMBlockBufferRef sourceBuffer, __CFData *a2)
{
  dataPointerOut = 0;
  CMBlockBufferRef blockBufferOut = 0;
  size_t totalLengthOut = 0;
  if (!sourceBuffer || !a2)
  {
    uint64_t v3 = FigSignalErrorAt();
    goto LABEL_10;
  }
  uint64_t v3 = CMBlockBufferCreateContiguous((CFAllocatorRef)*MEMORY[0x1E4F1CF80], sourceBuffer, (CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, 0, 0, &blockBufferOut);
  if (v3)
  {
LABEL_10:
    uint64_t DataPointer = v3;
    goto LABEL_6;
  }
  uint64_t DataPointer = CMBlockBufferGetDataPointer(blockBufferOut, 0, 0, &totalLengthOut, &dataPointerOut);
  if (!DataPointer) {
    CFDataAppendBytes(a2, (const UInt8 *)dataPointerOut, totalLengthOut);
  }
LABEL_6:
  if (blockBufferOut) {
    CFRelease(blockBufferOut);
  }
  return DataPointer;
}

uint64_t createMutableMovieTrackObject(const __CFAllocator *a1, const void *a2, const void *a3, CFAllocatorRef *a4, uint64_t *a5)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  if (!a5) {
    return 4294950861;
  }
  uint64_t v10 = CFAllocatorAllocate(a1, 136, 0);
  if (v10)
  {
    uint64_t v11 = (uint64_t)v10;
    v10[16] = 0;
    *((_OWORD *)v10 + 6) = 0u;
    *((_OWORD *)v10 + 7) = 0u;
    *((_OWORD *)v10 + 4) = 0u;
    *((_OWORD *)v10 + 5) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *((_OWORD *)v10 + 3) = 0u;
    *(_OWORD *)uint64_t v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    void v10[8] = -1;
    uint64_t BasicInfo = MovieTrackGetBasicInfo((uint64_t)a3, (_DWORD *)&v19 + 1, &v19);
    if (BasicInfo
      || (uint64_t BasicInfo = MediaDataChunkWriterAddTrack(a4, SHIDWORD(v19), 1, (uint64_t)chunkCallback_0, v11, &v18),
          BasicInfo)
      || (uint64_t BasicInfo = MediaDataChunkWriterTrackSetPreferredChunkAlignment((uint64_t)a4, v18, 0), BasicInfo)
      || (*(_OWORD *)&v17.CMTimeValue value = kFigMutableMovie_DefaultPreferredChunkDuration,
          v17.CMTimeEpoch epoch = 0,
          uint64_t BasicInfo = MediaDataChunkWriterTrackSetPreferredChunkDuration((uint64_t)a4, v18, &v17),
          BasicInfo)
      || (uint64_t BasicInfo = MediaDataChunkWriterTrackSetPreferredChunkSize((uint64_t)a4, v18, 0x100000), BasicInfo))
    {
      uint64_t v15 = BasicInfo;
      releaseTrack(a1, (void *)v11);
    }
    else
    {
      *(_DWORD *)uint64_t v11 = HIDWORD(v19);
      *(_DWORD *)(v11 + 4) = v19;
      if (a2) {
        CFTypeRef v13 = CFRetain(a2);
      }
      else {
        CFTypeRef v13 = 0;
      }
      *(void *)(v11 + 8) = v13;
      if (a3) {
        int v14 = CFRetain(a3);
      }
      else {
        int v14 = 0;
      }
      *(void *)(v11 + 16) = v14;
      *(void *)(v11 + 24) = a4;
      *(void *)(v11 + 32) = v18;
      *(_DWORD *)(v11 + 120) = 0;
      *(unsigned char *)(v11 + 124) = 0;
      if (*(_DWORD *)v11 == 1953325924) {
        v14[883] = 1;
      }
      uint64_t v15 = 0;
      *a5 = v11;
    }
    return v15;
  }

  return FigSignalErrorAt();
}

void syncPropertiesOfNewTrackWithSourceTrackUsingTrackReaderOrOptionsDictionary(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  setTrackPropertyFromTrackReaderOrOptionsDictionary(a1, a2, @"TrackEnabled", a3, a4);
  setTrackPropertyFromTrackReaderOrOptionsDictionary(a1, a2, @"TrackLanguageCode", a3, a4);
  setTrackPropertyFromTrackReaderOrOptionsDictionary(a1, a2, @"ExtendedLanguageTagString", a3, a4);
  setTrackPropertyFromTrackReaderOrOptionsDictionary(a1, a2, @"TrackTimescale", a3, a4);
  setTrackPropertyFromTrackReaderOrOptionsDictionary(a1, a2, @"Volume", a3, a4);
  setTrackPropertyFromTrackReaderOrOptionsDictionary(a1, a2, @"TrackMatrix", a3, a4);
  if (a4)
  {
    v8[0] = a1;
    v8[1] = a2;
    CFDictionaryApplyFunction(a4, (CFDictionaryApplierFunction)setTrackPropertiesFromOptionsDictionary, v8);
  }
}

uint64_t chunkCallback_0(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t *a9, const __CFArray *a10, uint64_t a11, uint64_t a12)
{
  CMTime v28 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v27 = v28;
  if (!a12) {
    return 4294950861;
  }
  uint64_t result = MovieTrackAppendSampleInformation(*(void *)(a12 + 8), *(void *)(a12 + 16), a1, a2, a4, a5, a6, a7, a8, a9, a10, a11, (uint64_t)&v28, (uint64_t)&v27);
  if (!result)
  {
    uint64_t v13 = *(void *)(a12 + 128);
    if (v13)
    {
      if (*(_DWORD *)(a12 + 120) != 1)
      {
        uint64_t v14 = *(void *)(v13 + 96);
        if ((v14 & 0x8000000000000000) == 0)
        {
          uint64_t v15 = *(void **)(v13 + 88);
          if (v15)
          {
            if (v14 < v15[1])
            {
              uint64_t v16 = *v15 + 48 * v14;
              long long v17 = *(_OWORD *)(v16 + 16);
              long long v25 = *(_OWORD *)v16;
              *(_OWORD *)uint64_t v26 = v17;
              *(_OWORD *)&v26[16] = *(_OWORD *)(v16 + 32);
              CMTime time1 = v28;
              long long v18 = *(_OWORD *)v16;
              time2.CMTimeEpoch epoch = *(void *)(v16 + 16);
              *(_OWORD *)&time2.CMTimeValue value = v18;
              if (CMTimeCompare(&time1, &time2) < 0)
              {
                CMTime time1 = v28;
                CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
                if ((CMTimeCompare(&time1, &time2) & 0x80000000) == 0)
                {
                  long long v25 = *(_OWORD *)&v28.value;
                  *(void *)uint64_t v26 = v28.epoch;
                }
              }
              CMTime time1 = v27;
              CMTime time2 = *(CMTime *)&v26[8];
              if (CMTimeCompare(&time1, &time2) < 0) {
                *(CMTime *)&v26[8] = v27;
              }
              uint64_t v19 = *(void *)(a12 + 128);
              uint64_t v20 = *(void **)(v19 + 88);
              if (v20)
              {
                uint64_t v21 = (_OWORD *)(*v20 + 48 * *(void *)(v19 + 96));
                long long v22 = *(_OWORD *)v26;
                _OWORD *v21 = v25;
                v21[1] = v22;
                _OWORD v21[2] = *(_OWORD *)&v26[16];
              }
            }
          }
        }
      }
    }
    if ((*(unsigned char *)(a12 + 84) & 1) == 0) {
      *(CMTime *)(a12 + 72) = v28;
    }
    uint64_t result = 0;
    if ((*(unsigned char *)(a12 + 108) & 1) == 0) {
      *(CMTime *)(a12 + 96) = v27;
    }
  }
  return result;
}

void setTrackPropertyFromTrackReaderOrOptionsDictionary(uint64_t a1, uint64_t a2, __CFString *cf1, uint64_t a4, const __CFDictionary *a5)
{
  CFTypeRef cf = 0;
  if (CFEqual(cf1, @"TrackTimescale"))
  {
    uint64_t v10 = @"MediaTimeScale";
  }
  else if (CFEqual(cf1, @"TrackLanguageCode"))
  {
    uint64_t v10 = @"LanguageCode";
  }
  else if (CFEqual(cf1, @"ExtendedLanguageTagString"))
  {
    uint64_t v10 = @"ExtendedLanguageTag";
  }
  else if (CFEqual(cf1, @"TrackFormatDescriptionArray"))
  {
    uint64_t v10 = @"FormatDescriptionArray";
  }
  else if (CFEqual(cf1, @"TrackExcludeFromAutoSelection"))
  {
    uint64_t v10 = @"IsExcludedFromAutoselection";
  }
  else if (CFEqual(cf1, @"TrackIsSelfContained"))
  {
    uint64_t v10 = @"IsSelfContained";
  }
  else
  {
    uint64_t v10 = cf1;
  }
  if (a5 && CFDictionaryContainsKey(a5, cf1))
  {
    Boolean Value = CFDictionaryGetValue(a5, cf1);
    uint64_t v12 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    long long v17 = *(void (**)(uint64_t, uint64_t, __CFString *, const void *))(v13 + 56);
    if (v17)
    {
      v17(a1, a2, v10, Value);
    }
  }
  else if (a4)
  {
    uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a4);
    uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
    uint64_t v16 = v15 ? v15 : 0;
    long long v18 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v16 + 48);
    if (v18)
    {
      if (!v18(FigBaseObject, cf1, *MEMORY[0x1E4F1CF80], &cf))
      {
        CFTypeRef v19 = cf;
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        long long v22 = *(void (**)(uint64_t, uint64_t, __CFString *, CFTypeRef))(v21 + 56);
        if (v22) {
          v22(a1, a2, v10, v19);
        }
        if (cf) {
          CFRelease(cf);
        }
      }
    }
  }
}

uint64_t setTrackPropertiesFromOptionsDictionary(uint64_t result, uint64_t a2, uint64_t *a3)
{
  if (result && a3)
  {
    uint64_t v4 = result;
    uint64_t v5 = *a3;
    uint64_t v6 = *((unsigned int *)a3 + 2);
    uint64_t VTable = CMBaseObjectGetVTable();
    uint64_t v9 = *(void *)(VTable + 16);
    uint64_t result = VTable + 16;
    uint64_t v8 = v9;
    uint64_t v10 = v9 ? v8 : 0;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    if (v11)
    {
      return v11(v5, v6, v4, a2);
    }
  }
  return result;
}

uint64_t FigFormatReaderCopyTrackByID(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(v7 + 56);
  if (!v8) {
    return 4294954514;
  }

  return v8(a1, a2, a3, 0);
}

uint64_t setMediaTimeScaleIfNeeded(uint64_t a1, opaqueCMSampleBuffer *a2)
{
  uint64_t result = 4294950861;
  if (!a1 || !a2) {
    return result;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return 4294950861;
  }
  uint64_t v6 = *(void *)(a1 + 128);
  if (!v6)
  {
    CMTimeScale MediaTimeScale = MovieTrackGetMediaTimeScale(*(void *)(a1 + 16));
    if (MediaTimeScale) {
      return 0;
    }
    goto LABEL_11;
  }
  uint64_t v7 = *(void *)(v6 + 56);
  if (v7 && MediaSampleTimingGeneratorGetMediaTimeScale(v7)) {
    return 0;
  }
  int v8 = MovieTrackGetMediaTimeScale(v5);
  CMTimeScale MediaTimeScale = v8;
  if (!v8)
  {
    int v9 = *(_DWORD *)(v6 + 8);
    CMTimeScale MediaTimeScale = v9;
    if (v9)
    {
LABEL_13:
      uint64_t result = MovieTrackSetMediaTimeScale(v5, v9);
      if (result) {
        return result;
      }
      int v8 = MediaTimeScale;
      goto LABEL_15;
    }
LABEL_11:
    uint64_t result = FigMovieGetDefaultMediaTimeScaleFromSample(a2, &MediaTimeScale);
    if (result) {
      return result;
    }
    int v9 = MediaTimeScale;
    if (MediaTimeScale) {
      goto LABEL_13;
    }
    return 0;
  }
LABEL_15:
  uint64_t result = 0;
  if (v6 && v8)
  {
    uint64_t result = *(void *)(v6 + 56);
    if (result) {
      return MediaSampleTimingGeneratorSetMediaTimeScale(result, v8);
    }
  }
  return result;
}

uint64_t setVideoTrackDimensionsIfNeeded(uint64_t a1, uint64_t a2, opaqueCMSampleBuffer *a3)
{
  int IsISOFileType = FigFileTypeIsISOFileType();
  CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(a3);
  uint64_t v19 = 0;
  MovieTrackGetSpatialInformation(a1, (_DWORD *)&v19 + 1, &v19, 0);
  if (*((float *)&v19 + 1) != 0.0 && *(float *)&v19 != 0.0
    || (VideoDefaultTrackDimensionsFromFormatDescription = FigMovieGetVideoDefaultTrackDimensionsFromFormatDescription(FormatDescription, IsISOFileType), *(float *)&double v8 = v8, result = MovieTrackSetTrackDimensions(a1, VideoDefaultTrackDimensionsFromFormatDescription, *(float *)&v8), !result))
  {
    MovieTrackGetCleanApertureDimensions(a1, (float *)&v19 + 1, (float *)&v19);
    if (v10
      || (VideoDefaultCleanApertureDimensionsFromCMFormatDescriptionRef FormatDescription = FigMovieGetVideoDefaultCleanApertureDimensionsFromFormatDescription(FormatDescription),
          *(float *)&double v12 = v12,
          uint64_t result = MovieTrackSetCleanApertureDimensions(a1, VideoDefaultCleanApertureDimensionsFromFormatDescription, *(float *)&v12), !result))
    {
      MovieTrackGetProductionApertureDimensions(a1, (float *)&v19 + 1, (float *)&v19);
      if (v13
        || (VideoDefaultProductionApertureDimensionsFromCMFormatDescriptionRef FormatDescription = FigMovieGetVideoDefaultProductionApertureDimensionsFromFormatDescription(FormatDescription),
            *(float *)&double v15 = v15,
            uint64_t result = MovieTrackSetProductionApertureDimensions(a1, VideoDefaultProductionApertureDimensionsFromFormatDescription, *(float *)&v15), !result))
      {
        MovieTrackGetEncodedPixelsDimensions(a1, (float *)&v19 + 1, (float *)&v19);
        if (v16)
        {
          return 0;
        }
        else
        {
          VideoDefaultEncodedPixelsDimensionsFromCMFormatDescriptionRef FormatDescription = FigMovieGetVideoDefaultEncodedPixelsDimensionsFromFormatDescription(FormatDescription);
          *(float *)&double v18 = v18;
          return MovieTrackSetEncodedPixelsDimensions(a1, VideoDefaultEncodedPixelsDimensionsFromFormatDescription, *(float *)&v18);
        }
      }
    }
  }
  return result;
}

uint64_t setClosedCaptionTrackDimensionsIfNeeded(uint64_t a1)
{
  uint64_t v11 = 0;
  TrackCFIndex Count = MovieInformationGetTrackCount(a1);
  if (TrackCount < 1) {
    return 0;
  }
  uint64_t v3 = TrackCount;
  for (uint64_t i = 0; i != v3; ++i)
  {
    TrackForTrackIndeCGFloat x = MovieInformationFindTrackForTrackIndex(a1, i);
    if (MovieTrackGetMediaType(TrackForTrackIndex) == 1986618469) {
      MovieTrackGetSpatialInformation(TrackForTrackIndex, (_DWORD *)&v11 + 1, &v11, 0);
    }
  }
  uint64_t result = 0;
  if (*((float *)&v11 + 1) != 0.0 && *(float *)&v11 != 0.0 && v3 >= 1)
  {
    uint64_t v8 = 0;
    while (1)
    {
      uint64_t v9 = MovieInformationFindTrackForTrackIndex(a1, v8);
      if (MovieTrackGetMediaType(v9) == 1668047728)
      {
        uint64_t v10 = 0;
        MovieTrackGetSpatialInformation(v9, (_DWORD *)&v10 + 1, &v10, 0);
        if (*((float *)&v10 + 1) == 0.0 || *(float *)&v10 == 0.0)
        {
          uint64_t result = MovieTrackSetTrackDimensions(v9, *((float *)&v11 + 1), *(float *)&v11);
          if (result) {
            break;
          }
        }
      }
      if (v3 == ++v8) {
        return 0;
      }
    }
  }
  return result;
}

uint64_t getByteStreamForTrackStorageURL(uint64_t a1, const void *a2, char *a3, uint64_t *a4)
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294950861;
  }
  uint64_t v8 = DerivedStorage;
  long long v25 = a3;
  uint64_t v26 = a4;
  CFArrayRef v9 = *(const __CFArray **)(DerivedStorage + 64);
  if (v9 && (CFIndex Count = CFArrayGetCount(v9), Count >= 1))
  {
    CFIndex v11 = Count;
    CFIndex v12 = 0;
    char v13 = 0;
    uint64_t v14 = *MEMORY[0x1E4F1EC78];
    uint64_t v15 = *MEMORY[0x1E4F1CF80];
    uint64_t v16 = -1;
    while (1)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v8 + 64), v12);
      if (!ValueAtIndex) {
        return FigSignalErrorAt();
      }
      double v18 = ValueAtIndex;
      if (*ValueAtIndex)
      {
        CFTypeRef cf = 0;
        uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
        uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v20) {
          uint64_t v21 = v20;
        }
        else {
          uint64_t v21 = 0;
        }
        long long v22 = *(void (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v21 + 48);
        if (v22) {
          v22(CMBaseObject, v14, v15, &cf);
        }
        if (cf)
        {
          CFTypeID v23 = CFGetTypeID(cf);
          if (v23 == CFURLGetTypeID() && CFEqual(cf, a2))
          {
            if (*((unsigned char *)v18 + 8)) {
              char v13 = 1;
            }
            uint64_t v16 = v12;
          }
          CFRelease(cf);
        }
      }
      if (v11 == ++v12) {
        goto LABEL_22;
      }
    }
  }
  else
  {
    char v13 = 0;
    uint64_t v16 = -1;
LABEL_22:
    if (v25) {
      *long long v25 = v13;
    }
    uint64_t result = 0;
    if (v26) {
      *uint64_t v26 = v16;
    }
  }
  return result;
}

uint64_t createStreamInfoForByteStream(const void *a1, uint64_t a2, CFIndex *a3)
{
  uint64_t result = 4294950861;
  if (a1 && a2 && a3 && *(void *)(a2 + 64))
  {
    CFIndex Count = CFArrayGetCount(*(CFArrayRef *)(a2 + 64));
    uint64_t v8 = CFAllocatorAllocate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 24, 0);
    if (v8)
    {
      CFArrayRef v9 = v8;
      *uint64_t v8 = 0;
      v8[1] = 0;
      void v8[2] = 0;
      *uint64_t v8 = CFRetain(a1);
      CFArrayAppendValue(*(CFMutableArrayRef *)(a2 + 64), v9);
      uint64_t result = 0;
      *a3 = Count;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

uint64_t writeMdatHeaderIfNecessary(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v19 = 0;
  int v18 = 1752524863;
  uint64_t v17 = 0;
  if (a1)
  {
    uint64_t result = getLastAtomTypeAndOffsetAndLength(*(void *)a1, &v18, &v19, &v17);
    if (!result)
    {
      if (v18 != 1835295092) {
        goto LABEL_19;
      }
      unsigned int v16 = 0;
      uint64_t v7 = *(void *)a1;
      uint64_t v8 = v19;
      uint64_t v9 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v9) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
      CFIndex v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, void))(v10 + 8);
      if (!v11)
      {
        uint64_t v13 = 0;
        uint64_t result = 4294954514;
        if (!a3) {
          return result;
        }
        goto LABEL_21;
      }
      uint64_t result = v11(v7, 4, v8, &v16, 0);
      if (!result)
      {
        unsigned int v12 = bswap32(v16);
        unsigned int v16 = v12;
        if (v12)
        {
          if (v12 == 1)
          {
            if (~v17 < a2) {
              goto LABEL_19;
            }
          }
          else if (0xFFFFFFFFLL - v17 < a2 && !precedingAtomIsWideAtom(*(void *)a1, v19))
          {
LABEL_19:
            uint64_t result = writeMdatHeader(*(void *)a1);
            if (!result)
            {
              uint64_t v15 = v17 + v19;
              *(void *)(a1 + 16) = v17 + v19 + 8;
              *(unsigned char *)(a1 + 8) = 1;
              uint64_t v13 = v15 + 16;
              if (!a3) {
                return result;
              }
              goto LABEL_21;
            }
            goto LABEL_24;
          }
        }
        uint64_t result = 0;
        uint64_t v14 = v19;
        *(void *)(a1 + 16) = v19;
        *(unsigned char *)(a1 + 8) = 1;
        uint64_t v13 = v17 + v14;
        if (!a3) {
          return result;
        }
        goto LABEL_21;
      }
    }
  }
  else
  {
    uint64_t result = FigSignalErrorAt();
  }
LABEL_24:
  uint64_t v13 = 0;
  if (!a3) {
    return result;
  }
LABEL_21:
  *a3 = v13;
  return result;
}

uint64_t addSample(CMSampleBufferRef sbuf, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return addSampleBufferToTrack_0(*(void *)a3, *(const void **)(a3 + 8), *(void *)(a3 + 16), *(void *)(a3 + 24), sbuf);
  }
  else {
    return 4294950861;
  }
}

uint64_t addSampleBufferToTrack_0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, CMSampleBufferRef sbuf)
{
  CMItemCount NumSamples = CMSampleBufferGetNumSamples(sbuf);
  uint64_t v42 = 0;
  CMItemCount timingArrayEntriesNeededOut = 0;
  uint64_t v41 = 0;
  BOOL v40 = 0;
  char v39 = 0;
  uint64_t v11 = *(void *)(a1 + 128);
  uint64_t OutputSampleTimingInfoArray = CMSampleBufferGetOutputSampleTimingInfoArray(sbuf, 0, 0, &timingArrayEntriesNeededOut);
  if (OutputSampleTimingInfoArray != -12736)
  {
    uint64_t v14 = OutputSampleTimingInfoArray;
    if (OutputSampleTimingInfoArray)
    {
      uint64_t v13 = 0;
      goto LABEL_23;
    }
    if (!timingArrayEntriesNeededOut)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 4294950861;
      goto LABEL_23;
    }
    uint64_t v13 = 0;
    uint64_t v14 = 4294950861;
    if ((unint64_t)timingArrayEntriesNeededOut > 0x38E38E38E38E38ELL || !(72 * timingArrayEntriesNeededOut)) {
      goto LABEL_23;
    }
    uint64_t v15 = (CMSampleTimingInfo *)malloc_type_malloc(72 * timingArrayEntriesNeededOut, 0x5CC9CBA6uLL);
    if (!v15)
    {
      uint64_t v13 = v40;
      goto LABEL_23;
    }
    unsigned int v16 = v15;
    uint64_t v17 = CMSampleBufferGetOutputSampleTimingInfoArray(sbuf, timingArrayEntriesNeededOut, v15, 0);
    int v18 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
    if (!v17)
    {
      uint64_t v17 = MediaSampleTimingGeneratorCreateMediaSampleTimingInfoArray(*(void *)(v11 + 56), NumSamples, timingArrayEntriesNeededOut, (uint64_t)v16, &v42, &v41, &v40, &v39);
      if (!v17)
      {
        if (!v39) {
          goto LABEL_14;
        }
        if (v41)
        {
          CMTime sizeArrayEntriesNeededOut = *(CMTime *)((unsigned char *)v40 + 3 * v41 - 3);
          uint64_t v19 = *(void *)(a1 + 16);
          CMTime ptr = sizeArrayEntriesNeededOut;
          uint64_t v14 = MovieTrackSetLastSampleDecodeDuration(v19, &ptr);
          if (v14)
          {
LABEL_41:
            MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(v40);
            CFAllocatorDeallocate(*v18, v16);
            return v14;
          }
        }
        MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(v40);
        BOOL v40 = 0;
        uint64_t v17 = MediaSampleTimingGeneratorCreateMediaSampleTimingInfoArrayWithDefaultLastSampleDuration(*(void *)(v11 + 56), &v42, &v41, &v40);
        if (!v17)
        {
LABEL_14:
          uint64_t v20 = v42;
          uint64_t v34 = v40;
          uint64_t v35 = v41;
          CMFormatDescriptionRef FormatDescription = CMSampleBufferGetFormatDescription(sbuf);
          SampleAttachmentsArradouble y = CMSampleBufferGetSampleAttachmentsArray(sbuf, 0);
          CFAllocatorRef v21 = *v18;
          CFDictionaryRef v22 = CMCopyDictionaryOfAttachments(*v18, sbuf, 1u);
          sizeArrayEntriesNeededOut.CMTimeValue value = 0;
          ptr.CMTimeValue value = 0;
          v46[0] = 0;
          CMBlockBufferRef v45 = 0;
          if (CMSampleBufferGetSampleSizeArray(sbuf, 0, 0, &sizeArrayEntriesNeededOut.value) == -12735)
          {
            if (*(_DWORD *)a1 == 1936684398)
            {
              if (v20 >= 1)
              {
                uint64_t v31 = v20;
                LOBYTE(valuePtr) = 0;
                uint64_t IsNonInterleavedPCMAudioSample = FigMovieIsNonInterleavedPCMAudioSample(sbuf, &valuePtr);
                CFAllocatorRef allocator = v21;
                if (!IsNonInterleavedPCMAudioSample)
                {
                  if ((_BYTE)valuePtr)
                  {
                    uint64_t IsNonInterleavedPCMAudioSample = FigSignalErrorAt();
                  }
                  else
                  {
                    uint64_t IsNonInterleavedPCMAudioSample = FigMovieCreateContiguousBBufFromNonContiguousAudioSample(sbuf, v21, &v45, v21, &sizeArrayEntriesNeededOut.value, &ptr);
                    if (!IsNonInterleavedPCMAudioSample)
                    {
                      CMBlockBufferRef DataBuffer = v45;
                      *(void *)(*(void *)(a1 + 128) + 96) = a4;
                      if (!DataBuffer)
                      {
                        uint64_t v14 = 0;
                        goto LABEL_32;
                      }
                      goto LABEL_29;
                    }
                  }
                }
LABEL_31:
                uint64_t v14 = IsNonInterleavedPCMAudioSample;
                goto LABEL_32;
              }
            }
            else
            {
              *(void *)(*(void *)(a1 + 128) + 96) = a4;
            }
            uint64_t v14 = 4294954561;
            if (!v22)
            {
LABEL_37:
              if (v45) {
                CFRelease(v45);
              }
              if (ptr.value) {
                CFAllocatorDeallocate(v21, (void *)ptr.value);
              }
              goto LABEL_41;
            }
LABEL_36:
            CFRelease(v22);
            goto LABEL_37;
          }
          uint64_t v31 = v20;
          CFAllocatorRef allocator = v21;
          uint64_t v26 = (size_t *)CFAllocatorAllocate(v21, 8 * sizeArrayEntriesNeededOut.value, 0);
          ptr.CMTimeValue value = (CMTimeValue)v26;
          SampleSizeArradouble y = CMSampleBufferGetSampleSizeArray(sbuf, sizeArrayEntriesNeededOut.value, v26, 0);
          if (SampleSizeArray)
          {
            uint64_t v14 = SampleSizeArray;
          }
          else
          {
            CMBlockBufferRef DataBuffer = CMSampleBufferGetDataBuffer(sbuf);
            if (DataBuffer || (CMBlockBufferRef DataBuffer = CMSampleBufferGetImageBuffer(sbuf)) != 0)
            {
              *(void *)(*(void *)(a1 + 128) + 96) = a4;
              int v18 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
LABEL_29:
              uint64_t IsNonInterleavedPCMAudioSample = MovieTrackFindOrAddSampleDescription(*(void *)(a1 + 16), FormatDescription, a2, v46);
              if (!IsNonInterleavedPCMAudioSample)
              {
                MovieTrackEvaluateAlternateTrackGroupAssignment(*(void *)(a1 + 16));
                uint64_t IsNonInterleavedPCMAudioSample = MediaDataChunkWriterTrackAppendSampleData(*(void *)(a1 + 24), *(void *)(a1 + 32), a3, (uint64_t)DataBuffer, v46[0], v31, v35, (uint64_t)v34, sizeArrayEntriesNeededOut.value, (unint64_t *)ptr.value, SampleAttachmentsArray, (uint64_t)v22);
              }
              goto LABEL_31;
            }
            CFNumberRef v28 = (const __CFNumber *)CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F2D0], 0);
            *(void *)(*(void *)(a1 + 128) + 96) = a4;
            if (v28)
            {
              uint64_t valuePtr = 0;
              CFNumberGetValue(v28, kCFNumberSInt64Type, &valuePtr);
              CFTypeRef v29 = CMGetAttachment(sbuf, (CFStringRef)*MEMORY[0x1E4F1F2D8], 0);
              uint64_t appended = MovieTrackFindOrAddSampleDescription(*(void *)(a1 + 16), FormatDescription, v29, v46);
              if (!appended)
              {
                MovieTrackEvaluateAlternateTrackGroupAssignment(*(void *)(a1 + 16));
                uint64_t appended = MediaDataChunkWriterTrackAppendSampleReference(*(void *)(a1 + 24), *(void *)(a1 + 32), valuePtr, v46[0], v20, v35, (uint64_t)v34, sizeArrayEntriesNeededOut.value, v26, SampleAttachmentsArray, (uint64_t)v22);
              }
              uint64_t v14 = appended;
              CFAllocatorRef v21 = allocator;
              int v18 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
              if (!v22) {
                goto LABEL_37;
              }
              goto LABEL_36;
            }
            uint64_t v14 = 0;
          }
          int v18 = (CFAllocatorRef *)MEMORY[0x1E4F1CF80];
LABEL_32:
          CFAllocatorRef v21 = allocator;
          if (!v22) {
            goto LABEL_37;
          }
          goto LABEL_36;
        }
      }
    }
    uint64_t v14 = v17;
    goto LABEL_41;
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
LABEL_23:
  MediaSampleTimingGeneratorDisposeMediaSampleTimingInfoArray(v13);
  return v14;
}

uint64_t writeActualMdatLengthsToStorages(uint64_t a1, CFArrayRef theArray)
{
  uint64_t v48 = 0;
  if (!theArray) {
    return 0;
  }
  CFIndex Count = CFArrayGetCount(theArray);
  if (Count < 1) {
    return 0;
  }
  CFIndex v5 = Count;
  CFIndex v6 = 0;
  uint64_t v7 = 0;
  while (1)
  {
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, v6);
    if (!ValueAtIndex) {
      return FigSignalErrorAt();
    }
    CFIndex v9 = ValueAtIndex[8];
    if (v9 != -1)
    {
      uint64_t v10 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v9);
      if (!v10) {
        return FigSignalErrorAt();
      }
      uint64_t v11 = v10;
      if (*((unsigned char *)v10 + 8))
      {
        uint64_t v12 = *v10;
        uint64_t v13 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v13) {
          uint64_t v14 = v13;
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = *(uint64_t (**)(uint64_t, void, uint64_t *))(v14 + 24);
        if (!v15) {
          return 4294954514;
        }
        uint64_t v16 = v15(v12, 0, &v48);
        if (v16) {
          return v16;
        }
        uint64_t v17 = v11[2];
        uint64_t v18 = v48 - v17;
        if (!((unint64_t)(v48 - v17) >> 32))
        {
          LODWORD(v46) = bswap32(v18);
          uint64_t v19 = *v11;
          uint64_t v20 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v20) {
            uint64_t v21 = v20;
          }
          else {
            uint64_t v21 = 0;
          }
          long long v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, void))(v21 + 16);
          if (!v25) {
            return 4294954514;
          }
          uint64_t v26 = v19;
          uint64_t v27 = 4;
          uint64_t v28 = v17;
LABEL_44:
          uint64_t v7 = v25(v26, v27, v28, &v46, 0);
          if (v7) {
            return v7;
          }
          goto LABEL_45;
        }
        unsigned int v47 = 0;
        unint64_t v46 = v48 - v17;
        uint64_t v22 = *v11;
        uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v23) {
          uint64_t v24 = v23;
        }
        else {
          uint64_t v24 = 0;
        }
        CFTypeRef v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unsigned int *, void))(v24 + 8);
        if (!v29) {
          return 4294954514;
        }
        uint64_t v16 = v29(v22, 4, v17, &v47, 0);
        if (v16) {
          return v16;
        }
        unsigned int v30 = bswap32(v47);
        unsigned int v47 = v30;
        if (v30)
        {
          if (v30 == 1)
          {
            precedingAtomIsWideAtom(*v11, v11[2]);
            unint64_t v46 = bswap64(v46);
            uint64_t v31 = *v11;
            uint64_t v32 = v11[2];
            uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v33) {
              uint64_t v34 = v33;
            }
            else {
              uint64_t v34 = 0;
            }
            long long v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, void))(v34 + 16);
            if (!v25) {
              return 4294954514;
            }
            uint64_t v28 = v32 + 8;
            uint64_t v26 = v31;
            uint64_t v27 = 8;
            goto LABEL_44;
          }
          if (precedingAtomIsWideAtom(*v11, v11[2]))
          {
            uint64_t v45 = 0x7461646D01000000;
            unint64_t v46 = bswap64(v18 + 8);
            uint64_t v35 = *v11;
            uint64_t v36 = v11[2];
            uint64_t v37 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v37) {
              uint64_t v38 = v37;
            }
            else {
              uint64_t v38 = 0;
            }
            char v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void))(v38 + 16);
            if (!v39) {
              return 4294954514;
            }
            uint64_t v16 = v39(v35, 8, v36 - 8, &v45, 0);
            if (v16) {
              return v16;
            }
            uint64_t v40 = *v11;
            uint64_t v41 = v11[2];
            uint64_t v42 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v43 = v42 ? v42 : 0;
            long long v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, unint64_t *, void))(v43 + 16);
            if (!v25) {
              return 4294954514;
            }
            uint64_t v26 = v40;
            uint64_t v27 = 8;
            uint64_t v28 = v41;
            goto LABEL_44;
          }
          uint64_t v7 = 4294954402;
        }
        else
        {
          uint64_t v7 = 0;
        }
      }
    }
LABEL_45:
    if (v5 == ++v6) {
      return v7;
    }
  }
}

uint64_t writeMdatHeader(uint64_t a1)
{
  CMBlockBufferRef theBuffer = 0;
  if (a1)
  {
    uint64_t appended = MovieHeaderMakerCopyMediaDataAtomHeaderAsBlockBuffer((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 1, 0, &theBuffer);
    CMBlockBufferRef v2 = theBuffer;
    if (!appended)
    {
      CMBlockBufferGetDataLength(theBuffer);
      uint64_t appended = CMByteStreamAppendBlockBuffer();
      CMBlockBufferRef v2 = theBuffer;
    }
    if (v2) {
      CFRelease(v2);
    }
    return appended;
  }
  else
  {
    return FigSignalErrorAt();
  }
}

uint64_t createSourceFromTrack(const void *a1, const void *a2, CFAllocatorRef allocator, char a4, int a5, uint64_t *a6)
{
  uint64_t v8 = 0;
  CFTypeRef v40 = 0;
  uint64_t v41 = 0;
  CFTypeRef cf = 0;
  uint64_t v39 = 0;
  uint64_t v9 = 4294950861;
  int valuePtr = 0;
  if (!a2)
  {
    uint64_t v11 = 0;
    goto LABEL_39;
  }
  uint64_t v11 = 0;
  if (!a6) {
    goto LABEL_39;
  }
  uint64_t v15 = CFAllocatorAllocate(allocator, 160, 0);
  uint64_t v11 = (uint64_t)v15;
  if (!v15)
  {
    uint64_t v19 = FigSignalErrorAt();
LABEL_46:
    uint64_t v9 = v19;
    goto LABEL_47;
  }
  v15[8] = 0u;
  v15[9] = 0u;
  _OWORD v15[6] = 0u;
  v15[7] = 0u;
  v15[4] = 0u;
  v15[5] = 0u;
  int v15[2] = 0u;
  _OWORD v15[3] = 0u;
  *uint64_t v15 = 0u;
  v15[1] = 0u;
  uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v16) {
    uint64_t v17 = v16;
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v18 = *(uint64_t (**)(const void *, uint64_t *, char *))(v17 + 8);
  if (!v18)
  {
    uint64_t v8 = 0;
    uint64_t v9 = 4294954514;
    goto LABEL_39;
  }
  uint64_t v19 = v18(a2, &v39, (char *)&v39 + 4);
  if (v19) {
    goto LABEL_46;
  }
  uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(a2);
  uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v21) {
    uint64_t v22 = v21;
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v22 + 48);
  if (v23)
  {
    v23(FigBaseObject, @"TrackTimescale", 0, &cf);
    if (cf)
    {
      CFTypeID TypeID = CFNumberGetTypeID();
      if (TypeID == CFGetTypeID(cf))
      {
        CFNumberGetValue((CFNumberRef)cf, kCFNumberSInt32Type, &valuePtr);
        CFRelease(cf);
      }
    }
  }
  if (!a5) {
    goto LABEL_35;
  }
  if (FigServer_IsMediaparserd()
    && (FigFormatReaderIsRemote((BOOL)a1) || FigTrackReaderIsRemote((BOOL)a2)))
  {
    if (a4) {
      uint64_t v25 = FigSampleGeneratorRemoteCreateForTrackReader((uint64_t)allocator, (uint64_t)a2, 0, 0, &v40);
    }
    else {
      uint64_t v25 = FigSampleGeneratorRemoteCreateForTrackReaderProducingByteReferenceSampleBuffers((uint64_t)allocator, (uint64_t)a2, 0, 0, &v40);
    }
  }
  else
  {
    uint64_t v26 = (const void *)*MEMORY[0x1E4F1CF80];
    if (a4)
    {
      BaseByteStreamProvider = (const void *)FigGetBaseByteStreamProvider();
      uint64_t v25 = FigSampleGeneratorCreateForFormatReaderUsingByteStreams(v26, 0, a2, BaseByteStreamProvider, 0, 2, &v40);
    }
    else
    {
      uint64_t v25 = FigSampleGeneratorCreateForFormatReaderProducingByteReferenceSampleBuffers((const void *)*MEMORY[0x1E4F1CF80], 0, a2, 0, 0, &v40);
    }
  }
  uint64_t v9 = v25;
  if (v25)
  {
LABEL_47:
    uint64_t v8 = 0;
    goto LABEL_39;
  }
  if (HIDWORD(v39) == 1751216244 || HIDWORD(v39) == 1936684398) {
    int v29 = 1;
  }
  else {
    int v29 = 2;
  }
  uint64_t v30 = MediaSampleTimingGeneratorCreate(allocator, SHIDWORD(v39), v29, &v41);
  if (v30)
  {
    uint64_t v9 = v30;
    uint64_t v8 = v41;
    goto LABEL_39;
  }
LABEL_35:
  *(_DWORD *)uint64_t v11 = HIDWORD(v39);
  int v31 = valuePtr;
  *(_DWORD *)(v11 + 4) = v39;
  *(_DWORD *)(v11 + 8) = v31;
  if (a1) {
    CFTypeRef v32 = CFRetain(a1);
  }
  else {
    CFTypeRef v32 = 0;
  }
  *(void *)(v11 + 24) = v32;
  CFTypeRef v33 = CFRetain(a2);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  CFTypeRef v34 = v40;
  *(void *)(v11 + 32) = v33;
  *(void *)(v11 + 40) = v34;
  *(void *)(v11 + 56) = v41;
  long long v35 = *MEMORY[0x1E4F1FA48];
  *(void *)(v11 + 128) = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(unsigned char *)(v11 + 146) = 0;
  *(_OWORD *)(v11 + 112) = v35;
  *(void *)(v11 + 16) = 0;
  *a6 = v11;
  CFTypeRef v40 = 0;
  uint64_t v41 = 0;
  uint64_t v11 = 0;
LABEL_39:
  MediaSampleTimingGeneratorRelease(v8);
  if (v40) {
    CFRelease(v40);
  }
  if (v11) {
    releaseSource(allocator, v11);
  }
  return v9;
}

const void *getTrackForInsertionFromSource(uint64_t a1, uint64_t a2)
{
  CMBlockBufferRef v2 = 0;
  if (!a1) {
    return v2;
  }
  uint64_t v3 = a2;
  if (!a2) {
    return v2;
  }
  if (!*(void *)(a1 + 56) || !*(void *)(a2 + 32)) {
    return 0;
  }
  MEMORY[0x19970E910](*(void *)(a1 + 48));
  CFArrayRef v5 = *(const __CFArray **)(a1 + 56);
  if (!v5) {
    goto LABEL_208;
  }
  CFIndex Count = CFArrayGetCount(v5);
  if (Count < 1) {
    goto LABEL_208;
  }
  CFIndex v7 = Count;
  CFArrayRef Mutable = 0;
  CFIndex v9 = 0;
  uint64_t v10 = @"TrackEnabled";
  CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  uint64_t v159 = v3;
  do
  {
    CFStringRef ValueAtIndex = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v9);
    if (ValueAtIndex)
    {
      uint64_t v12 = ValueAtIndex;
      if (!*((unsigned char *)ValueAtIndex + 124))
      {
        if (ValueAtIndex[1])
        {
          if (ValueAtIndex[2])
          {
            uint64_t v13 = *(void *)(v3 + 32);
            if (v13)
            {
              int v14 = *(_DWORD *)(v3 + 148);
              if (v14)
              {
                if (v14 != *((_DWORD *)ValueAtIndex + 1)) {
                  goto LABEL_18;
                }
                goto LABEL_15;
              }
              if (*(_DWORD *)ValueAtIndex == *(_DWORD *)v3)
              {
                cf[0] = 0;
                LODWORD(valuePtr[0]) = 0;
                uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(v13);
                uint64_t v16 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v16) {
                  uint64_t v17 = v16;
                }
                else {
                  uint64_t v17 = 0;
                }
                uint64_t v18 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v17 + 48);
                if (v18)
                {
                  v18(FigBaseObject, @"TrackTimescale", 0, cf);
                  if (cf[0])
                  {
                    CFTypeID TypeID = CFNumberGetTypeID();
                    if (TypeID == CFGetTypeID(cf[0]))
                    {
                      CFNumberGetValue((CFNumberRef)cf[0], kCFNumberSInt32Type, valuePtr);
                      CFRelease(cf[0]);
                    }
                  }
                }
                int MediaTimeScale = MovieTrackGetMediaTimeScale(v12[2]);
                if (!MediaTimeScale || MediaTimeScale == LODWORD(valuePtr[0]))
                {
                  cf[0] = 0;
                  uint64_t v21 = FigTrackReaderGetFigBaseObject(v13);
                  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v22) {
                    uint64_t v23 = v22;
                  }
                  else {
                    uint64_t v23 = 0;
                  }
                  uint64_t v24 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v23 + 48);
                  if (v24) {
                    v24(v21, v10, 0, cf);
                  }
                  if (cf[0] && (CFTypeID v25 = CFBooleanGetTypeID(), v25 == CFGetTypeID(cf[0])))
                  {
                    int v26 = CFBooleanGetValue((CFBooleanRef)cf[0]);
                    CFRelease(cf[0]);
                  }
                  else
                  {
                    int v26 = 0;
                  }
                  if (MovieTrackIsEnabled(v12[2]) == v26)
                  {
                    cf[0] = 0;
                    *(void *)&valuePtr[0] = 0;
                    MovieTrackGetLanguageInformation(v12[2], 0, cf, valuePtr);
                    CMTimeValue value = 0;
                    CFTypeRef v167 = 0;
                    uint64_t v27 = FigTrackReaderGetFigBaseObject(v13);
                    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
                    if (v28) {
                      uint64_t v29 = v28;
                    }
                    else {
                      uint64_t v29 = 0;
                    }
                    uint64_t v30 = *(void (**)(uint64_t, __CFString *, void, void **))(v29 + 48);
                    if (v30) {
                      v30(v27, @"TrackLanguageCode", 0, &value);
                    }
                    if (!cf[0]) {
                      cf[0] = @"und";
                    }
                    if (!value) {
                      CMTimeValue value = @"und";
                    }
                    int v31 = FigCFEqual();
                    if (value)
                    {
                      CFRelease(value);
                      CMTimeValue value = 0;
                    }
                    if (v31)
                    {
                      uint64_t v32 = FigTrackReaderGetFigBaseObject(v13);
                      uint64_t v33 = *(void *)(CMBaseObjectGetVTable() + 8);
                      if (v33) {
                        uint64_t v34 = v33;
                      }
                      else {
                        uint64_t v34 = 0;
                      }
                      long long v35 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v34 + 48);
                      if (v35) {
                        v35(v32, @"ExtendedLanguageTagString", 0, &v167);
                      }
                      int v36 = FigCFEqual();
                      if (v167) {
                        CFRelease(v167);
                      }
                      if (v36)
                      {
                        int v166 = 0;
                        *(_OWORD *)CFTypeRef cf = 0u;
                        long long v165 = 0u;
                        int v163 = 0;
                        memset(valuePtr, 0, sizeof(valuePtr));
                        CMTimeValue value = 0;
                        MovieTrackGetSpatialInformation(v12[2], 0, 0, (uint64_t)cf);
                        uint64_t v37 = FigTrackReaderGetFigBaseObject(v13);
                        uint64_t v38 = *(void *)(CMBaseObjectGetVTable() + 8);
                        if (v38) {
                          uint64_t v39 = v38;
                        }
                        else {
                          uint64_t v39 = 0;
                        }
                        CFTypeRef v40 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, void **))(v39 + 48);
                        if (v40) {
                          v40(v37, @"TrackMatrix", allocator, &value);
                        }
                        if (value)
                        {
                          CFTypeID v41 = CFArrayGetTypeID();
                          if (v41 == CFGetTypeID(value))
                          {
                            CFArrayToFigMatrix((const __CFArray *)value, (uint64_t)valuePtr);
                            CFRelease(value);
                            uint64_t v42 = 0;
                            for (uint64_t i = 0; i != 3; ++i)
                            {
                              for (uint64_t j = 0; j != 12; j += 4)
                              {
                                if (*(float *)((char *)cf + v42 + j) != *(float *)((char *)valuePtr + v42 + j)) {
                                  goto LABEL_83;
                                }
                              }
                              v42 += 12;
                            }
                          }
                        }
                        if (*(_DWORD *)v12 != 1936684398) {
                          goto LABEL_81;
                        }
                        cf[0] = 0;
                        LODWORD(valuePtr[0]) = 1065353216;
                        float Volume = MovieTrackGetVolume(v12[2]);
                        uint64_t v46 = FigTrackReaderGetFigBaseObject(v13);
                        uint64_t v47 = *(void *)(CMBaseObjectGetVTable() + 8);
                        if (v47) {
                          uint64_t v48 = v47;
                        }
                        else {
                          uint64_t v48 = 0;
                        }
                        int v49 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v48 + 48);
                        if (v49)
                        {
                          if (!v49(v46, @"Volume", 0, cf))
                          {
                            if (cf[0])
                            {
                              CFTypeID v50 = CFNumberGetTypeID();
                              if (v50 == CFGetTypeID(cf[0]))
                              {
                                CFNumberGetValue((CFNumberRef)cf[0], kCFNumberFloat32Type, valuePtr);
                                CFRelease(cf[0]);
                              }
                            }
                          }
                        }
                        if (Volume == *(float *)valuePtr)
                        {
LABEL_81:
                          IsChapterTracCFIndex k = MovieTrackIsChapterTrack(v12[1], v12[2]);
                          cf[0] = 0;
                          uint64_t v52 = FigTrackReaderGetFigBaseObject(v13);
                          uint64_t v53 = *(void *)(CMBaseObjectGetVTable() + 8);
                          if (v53) {
                            uint64_t v54 = v53;
                          }
                          else {
                            uint64_t v54 = 0;
                          }
                          uint64_t v55 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v54 + 48);
                          if (v55) {
                            v55(v52, @"ContainsChapters", 0, cf);
                          }
                          if (cf[0] && (CFTypeID v56 = CFBooleanGetTypeID(), v56 == CFGetTypeID(cf[0])))
                          {
                            int v57 = CFBooleanGetValue((CFBooleanRef)cf[0]);
                            CFRelease(cf[0]);
                            if ((IsChapterTrack == 0) != (v57 == 0)) {
                              goto LABEL_18;
                            }
                            if (v57) {
                              goto LABEL_15;
                            }
                          }
                          else if (IsChapterTrack)
                          {
                            goto LABEL_18;
                          }
                          cf[0] = 0;
                          uint64_t v58 = FigTrackReaderGetFigBaseObject(v13);
                          uint64_t v59 = *(void *)(CMBaseObjectGetVTable() + 8);
                          if (v59) {
                            uint64_t v60 = v59;
                          }
                          else {
                            uint64_t v60 = 0;
                          }
                          uint64_t v61 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v60 + 48);
                          if (!v61 || v61(v58, @"TrackFormatDescriptionArray", 0, cf) || !cf[0])
                          {
LABEL_15:
                            if (Mutable || (CFArrayRef Mutable = CFArrayCreateMutable(allocator, 0, 0)) != 0) {
                              CFArrayAppendValue(Mutable, v12);
                            }
                            goto LABEL_18;
                          }
                          CFArrayRef v62 = MovieTrackCopyFormatDescriptionArray(v12[2]);
                          if (v62)
                          {
                            if (cf[0])
                            {
                              CFIndex v63 = CFArrayGetCount((CFArrayRef)cf[0]);
                              CFIndex v153 = CFArrayGetCount(v62);
                              CFIndex v145 = v63;
                              if (v63 >= 1)
                              {
                                CFIndex v64 = 0;
                                uint64_t v149 = v10;
                                while (1)
                                {
                                  CFIndex v147 = v64;
                                  desc = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex((CFArrayRef)cf[0], v64);
                                  if (desc && v153 >= 1) {
                                    break;
                                  }
LABEL_125:
                                  CFIndex v64 = v147 + 1;
                                  if (v147 + 1 == v145) {
                                    goto LABEL_128;
                                  }
                                }
                                CFIndex v66 = 0;
                                while (1)
                                {
                                  CFTypeID v67 = (const opaqueCMFormatDescription *)CFArrayGetValueAtIndex(v62, v66);
                                  if (!v67) {
                                    goto LABEL_124;
                                  }
                                  uint64_t v68 = v67;
                                  int v69 = *(_DWORD *)v12;
                                  if (*(_DWORD *)v12 == 1952807028) {
                                    break;
                                  }
                                  if (v69 == 1986618469)
                                  {
                                    Presentationunint64_t Dimensions = CMVideoFormatDescriptionGetPresentationDimensions(v67, 1u, 1u);
                                    CGSize v73 = CMVideoFormatDescriptionGetPresentationDimensions(desc, 1u, 1u);
                                    if (PresentationDimensions.width != 0.0 || PresentationDimensions.height != 0.0)
                                    {
                                      double v74 = PresentationDimensions.width / PresentationDimensions.height;
                                      if (PresentationDimensions.height == 0.0) {
                                        double v74 = 0.0;
                                      }
                                      double v75 = v73.width / v73.height;
                                      if (v73.height == 0.0) {
                                        double v75 = 0.0;
                                      }
                                      if (vabdd_f64(v74, v75) > 0.00999999978)
                                      {
LABEL_129:
                                        int v76 = 0;
LABEL_130:
                                        if (cf[0])
                                        {
                                          CFRelease(cf[0]);
                                          cf[0] = 0;
                                        }
                                        if (v62) {
                                          CFRelease(v62);
                                        }
                                        if (!v76)
                                        {
LABEL_18:
                                          uint64_t v3 = v159;
                                          goto LABEL_83;
                                        }
                                        goto LABEL_15;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    if (v69 == 1953325924) {
                                      break;
                                    }
                                    if (!CFEqual(desc, v67)) {
                                      goto LABEL_129;
                                    }
                                  }
LABEL_124:
                                  if (v153 == ++v66) {
                                    goto LABEL_125;
                                  }
                                }
                                CFArrayRef v70 = v62;
                                FourCharCode MediaSubType = CMFormatDescriptionGetMediaSubType(desc);
                                BOOL v100 = MediaSubType == CMFormatDescriptionGetMediaSubType(v68);
                                CFArrayRef v62 = v70;
                                uint64_t v10 = v149;
                                if (!v100) {
                                  goto LABEL_129;
                                }
                                goto LABEL_124;
                              }
                            }
                            else
                            {
                              CFArrayGetCount(v62);
                            }
                          }
LABEL_128:
                          int v76 = 1;
                          goto LABEL_130;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_83:
    ++v9;
  }
  while (v9 != v7);
  if (!Mutable)
  {
LABEL_208:
    MEMORY[0x19970E930](*(void *)(a1 + 48));
    return 0;
  }
  CFIndex v77 = CFArrayGetCount(Mutable);
  if (!v77)
  {
    MEMORY[0x19970E930](*(void *)(a1 + 48));
    CFRelease(Mutable);
    return 0;
  }
  CFIndex v78 = v77;
  if (v77 < 1)
  {
    CMBlockBufferRef v2 = 0;
    uint64_t v79 = 0;
    goto LABEL_255;
  }
  uint64_t v79 = 0;
  CFIndex v80 = 0;
  CFAllocatorRef v81 = allocator;
  CFIndex v144 = v77;
  unsigned int v146 = Mutable;
  do
  {
    unsigned int v82 = CFArrayGetValueAtIndex(Mutable, v80);
    if (!v82) {
      goto LABEL_203;
    }
    uint64_t v83 = v82;
    cf[0] = 0;
    *(void *)&valuePtr[0] = 0;
    if (v82[1] && v82[2] && *(void *)(v3 + 32))
    {
      uint64_t v84 = *(void *)(v3 + 24);
      if (!v84)
      {
        keys = 0;
        long long v93 = 0;
LABEL_207:
        BOOL v92 = 1;
        goto LABEL_195;
      }
      uint64_t v85 = FigFormatReaderGetFigBaseObject(v84);
      uint64_t v86 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v86) {
        uint64_t v87 = v86;
      }
      else {
        uint64_t v87 = 0;
      }
      uint64_t v88 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CFTypeRef *))(v87 + 48);
      if (v88) {
        v88(v85, @"TrackReferenceDictionary", v81, cf);
      }
      MovieInformationCreateTrackReferenceDictionary(v81, v83[1], (CFDictionaryRef *)valuePtr);
      if (!cf[0] || !CFDictionaryGetCount((CFDictionaryRef)cf[0]))
      {
        uint64_t v110 = v83[1];
        uint64_t v111 = *(void *)(v110 + 328);
        uint64_t v3 = v159;
        if (v111 < 1)
        {
          BOOL v92 = 1;
        }
        else
        {
          CFArrayRef v112 = *(_DWORD **)(v110 + 344);
          int v113 = *(_DWORD *)(v83[2] + 144);
          if (v112[2] == v113 || v112[1] == v113)
          {
            BOOL v92 = 0;
          }
          else
          {
            int64_t v114 = v112 + 5;
            uint64_t v115 = 1;
            do
            {
              uint64_t v116 = v115;
              if (v111 == v115) {
                break;
              }
              if (*v114 == v113) {
                break;
              }
              int v117 = *(v114 - 1);
              ++v115;
              v114 += 3;
            }
            while (v117 != v113);
            BOOL v92 = v116 >= v111;
          }
        }
        keys = 0;
        long long v93 = 0;
        goto LABEL_195;
      }
      size_t v89 = CFDictionaryGetCount((CFDictionaryRef)cf[0]);
      uint64_t v90 = (void **)malloc_type_calloc(v89, 8uLL, 0x6004044C4A2DFuLL);
      uint64_t v155 = v89;
      int v91 = (const void **)malloc_type_calloc(v89, 8uLL, 0x6004044C4A2DFuLL);
      BOOL v92 = 0;
      uint64_t v3 = v159;
      keys = v90;
      if (v90)
      {
        long long v93 = v91;
        if (v91)
        {
          CFDictionaryGetKeysAndValues((CFDictionaryRef)cf[0], (const void **)keys, v91);
          if (v155 >= 1)
          {
            CFIndex v148 = v80;
            uint64_t v150 = v79;
            uint64_t v94 = 0;
            uint64_t v154 = v93;
            do
            {
              char v160 = keys[v94];
              uint64_t v157 = v94;
              CFIndex v95 = CFArrayGetCount((CFArrayRef)v93[v94]);
              if (v95 >= 1)
              {
                CFIndex v96 = v95;
                CFIndex v97 = 0;
                CFIndex v158 = v95;
                do
                {
                  LODWORD(v167) = 0;
                  int v170 = 0;
                  FigCFArrayGetInt32AtIndex();
                  FigCFArrayGetInt32AtIndex();
                  int v98 = *(_DWORD *)(v3 + 4);
                  int v99 = (int)v167;
                  BOOL v100 = v98 == v167 || v98 == v170;
                  if (v100)
                  {
                    if (v98 == v167) {
                      int v101 = v170;
                    }
                    else {
                      int v101 = (int)v167;
                    }
                    CMTimeValue value = 0;
                    if (CFDictionaryGetValueIfPresent(*(CFDictionaryRef *)&valuePtr[0], v160, (const void **)&value))
                    {
                      CFIndex v102 = CFArrayGetCount((CFArrayRef)value);
                      if (v102 >= 1)
                      {
                        CFIndex v103 = v102;
                        for (CFIndex k = 0; k < v103; k += 2)
                        {
                          uint64_t v168 = 0;
                          FigCFArrayGetInt32AtIndex();
                          FigCFArrayGetInt32AtIndex();
                          uint64_t v105 = (uint64_t *)((char *)&v168 + 4);
                          if (v98 != v99) {
                            uint64_t v105 = &v168;
                          }
                          if (*((_DWORD *)v83 + 1) == *(_DWORD *)v105)
                          {
                            CFIndex v106 = CFArrayGetCount(*(CFArrayRef *)(a1 + 72));
                            if (v106 >= 1)
                            {
                              CFIndex v107 = v106;
                              uint64_t v108 = 1;
                              do
                              {
                                BOOL v109 = *((_DWORD *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 72), v108 - 1) + 1) != v101
                                    && v108 < v107;
                                ++v108;
                              }
                              while (v109);
                            }
                          }
                        }
                      }
                    }
                    uint64_t v3 = v159;
                    CFIndex v96 = v158;
                  }
                  v97 += 2;
                }
                while (v97 < v96);
              }
              uint64_t v94 = v157 + 1;
              long long v93 = v154;
            }
            while (v157 + 1 != v155);
            BOOL v92 = 1;
            CFIndex v78 = v144;
            CFArrayRef Mutable = v146;
            CFAllocatorRef v81 = allocator;
            CFIndex v80 = v148;
            uint64_t v79 = v150;
            goto LABEL_195;
          }
          goto LABEL_207;
        }
      }
      else
      {
        long long v93 = v91;
      }
    }
    else
    {
      keys = 0;
      long long v93 = 0;
      BOOL v92 = 0;
    }
LABEL_195:
    if (cf[0]) {
      CFRelease(cf[0]);
    }
    if (*(void *)&valuePtr[0]) {
      CFRelease(*(CFTypeRef *)&valuePtr[0]);
    }
    free(keys);
    free(v93);
    if (v92 && (v79 || (uint64_t v79 = CFArrayCreateMutable(v81, 0, 0)) != 0)) {
      CFArrayAppendValue(v79, v83);
    }
LABEL_203:
    ++v80;
  }
  while (v80 != v78);
  if (!v79 || (CFIndex v161 = CFArrayGetCount(v79), v161 < 1))
  {
    CMBlockBufferRef v2 = 0;
LABEL_255:
    unsigned int v119 = 0;
    goto LABEL_256;
  }
  unsigned int v119 = 0;
  CFIndex v120 = 0;
  while (2)
  {
    CFStringRef v121 = v79;
    int v122 = (uint64_t *)CFArrayGetValueAtIndex(v79, v120);
    if (v122)
    {
      CFStringRef v123 = v122;
      cf[0] = 0;
      *(void *)&valuePtr[0] = 0;
      LODWORD(CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      LODWORD(v167) = 0;
      if (v122[1])
      {
        if (v122[2])
        {
          uint64_t v124 = *(void *)(v159 + 32);
          if (v124)
          {
            uint64_t v125 = FigTrackReaderGetFigBaseObject(v124);
            uint64_t v126 = *(void *)(CMBaseObjectGetVTable() + 8);
            if (v126) {
              uint64_t v127 = v126;
            }
            else {
              uint64_t v127 = 0;
            }
            int v128 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v127 + 48);
            if (v128)
            {
              v128(v125, @"AlternateGroupID", 0, cf);
              if (cf[0])
              {
                CFTypeID v129 = CFGetTypeID(cf[0]);
                if (v129 == CFNumberGetTypeID())
                {
                  CFNumberGetValue((CFNumberRef)cf[0], kCFNumberSInt32Type, &value);
                  CFRelease(cf[0]);
                }
              }
            }
            AlternateGroupuint64_t ID = MovieTrackGetAlternateGroupID(v123[2]);
            int v131 = AlternateGroupID;
            if (value)
            {
              if (!AlternateGroupID) {
                goto LABEL_248;
              }
              CFIndex v132 = CFArrayGetCount(*(CFArrayRef *)(a1 + 56));
              if (v132 >= 1)
              {
                CFIndex v133 = v132;
                CFIndex v134 = 0;
                do
                {
                  unsigned int v135 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 56), v134);
                  if (v135)
                  {
                    int v136 = v135;
                    uint64_t v137 = v135[16];
                    if (v137)
                    {
                      uint64_t v138 = *(void *)(v137 + 32);
                      if (v138)
                      {
                        uint64_t v139 = FigTrackReaderGetFigBaseObject(v138);
                        uint64_t v140 = *(void *)(CMBaseObjectGetVTable() + 8);
                        if (v140) {
                          uint64_t v141 = v140;
                        }
                        else {
                          uint64_t v141 = 0;
                        }
                        unsigned int v142 = *(void (**)(uint64_t, __CFString *, void, _OWORD *))(v141 + 48);
                        if (v142) {
                          v142(v139, @"AlternateGroupID", 0, valuePtr);
                        }
                        if (*(void *)&valuePtr[0])
                        {
                          CFTypeID v143 = CFGetTypeID(*(CFTypeRef *)&valuePtr[0]);
                          if (v143 == CFNumberGetTypeID())
                          {
                            CFNumberGetValue(*(CFNumberRef *)&valuePtr[0], kCFNumberSInt32Type, &v167);
                            CFRelease(*(CFTypeRef *)&valuePtr[0]);
                          }
                        }
                        if (v167 == value
                          && MovieTrackGetAlternateGroupID(v136[2]) != v131)
                        {
                          goto LABEL_248;
                        }
                      }
                    }
                  }
                }
                while (v133 != ++v134);
              }
            }
            else if (AlternateGroupID)
            {
              goto LABEL_248;
            }
            if (v119 || (unsigned int v119 = CFArrayCreateMutable(allocator, 0, 0)) != 0) {
              CFArrayAppendValue(v119, v123);
            }
          }
        }
      }
    }
LABEL_248:
    ++v120;
    uint64_t v79 = v121;
    if (v120 != v161) {
      continue;
    }
    break;
  }
  if (v119)
  {
    CFArrayRef Mutable = v146;
    if (CFArrayGetCount(v119)) {
      CMBlockBufferRef v2 = CFArrayGetValueAtIndex(v119, 0);
    }
    else {
      CMBlockBufferRef v2 = 0;
    }
  }
  else
  {
    CMBlockBufferRef v2 = 0;
    CFArrayRef Mutable = v146;
  }
LABEL_256:
  MEMORY[0x19970E930](*(void *)(a1 + 48));
  CFRelease(Mutable);
  if (v79) {
    CFRelease(v79);
  }
  if (v119) {
    CFRelease(v119);
  }
  return v2;
}

uint64_t setTrackIDModified(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = 4294950861;
  if (a1 && a2 && a3)
  {
    Storage = MutableMovieTrackGetStorage(a1, a3);
    if (Storage)
    {
      CFIndex v6 = Storage;
      uint64_t result = 0;
      *((unsigned char *)v6 + 56) = 1;
    }
    else
    {
      return FigSignalErrorAt();
    }
  }
  return result;
}

CMTime *GetTotalEditSegmentDuration@<X0>(CMTime *result@<X0>, CMTime *a2@<X8>)
{
  uint64_t v2 = MEMORY[0x1E4F1FA48];
  *(_OWORD *)&a2->CMTimeValue value = *MEMORY[0x1E4F1FA48];
  a2->CMTimeEpoch epoch = *(void *)(v2 + 16);
  LODWORD(v2) = result[34].value;
  uint64_t v3 = (v2 - 1);
  if ((int)v2 >= 1)
  {
    uint64_t v4 = (_OWORD *)(result[33].epoch + 96 * v3 + 48);
    uint64_t v5 = v3 + 1;
    while ((*((unsigned char *)v4 - 36) & 1) == 0)
    {
      v4 -= 6;
      if (v5-- <= 1) {
        return result;
      }
    }
    long long v7 = *v4;
    long long v8 = v4[2];
    *(_OWORD *)&v9.start.CMTimeEpoch epoch = v4[1];
    *(_OWORD *)&v9.duration.CMTimeScale timescale = v8;
    *(_OWORD *)&v9.start.CMTimeValue value = v7;
    return CMTimeRangeGetEnd(a2, &v9);
  }
  return result;
}

uint64_t clearInsertionStateInTracks(uint64_t a1)
{
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (result)
  {
    uint64_t v3 = result;
    if (!*(unsigned char *)result)
    {
      uint64_t result = MovieInformationLockForRead(*(void *)(result + 24));
      if (!result)
      {
        TrackCFIndex Count = MovieInformationGetTrackCount(*(void *)(v3 + 24));
        if (TrackCount >= 1)
        {
          uint64_t v5 = TrackCount;
          for (uint64_t i = 0; i != v5; ++i)
          {
            TrackForTrackIndeCGFloat x = MovieInformationFindTrackForTrackIndex(*(void *)(v3 + 24), i);
            if (TrackForTrackIndex)
            {
              Storage = MutableMovieTrackGetStorage(a1, *(_DWORD *)(TrackForTrackIndex + 144));
              if (Storage) {
                *((unsigned char *)Storage + 124) = 0;
              }
            }
          }
        }
        uint64_t v9 = *(void *)(v3 + 24);
        return MovieInformationUnlockForRead(v9);
      }
    }
  }
  return result;
}

uint64_t insertSegmentFromSourceArray(const __CFArray *a1, uint64_t a2, _OWORD *a3, long long *a4, char a5)
{
  BOOL v5 = (a5 & 1) == 0;
  if (!a1) {
    return 4294950861;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    return 4294950861;
  }
  uint64_t v11 = DerivedStorage;
  if (*(unsigned char *)DerivedStorage) {
    return 4294950869;
  }
  uint64_t v12 = *(CFAllocatorRef **)(DerivedStorage + 32);
  uint64_t v13 = *(const void **)(DerivedStorage + 40);
  uint64_t v15 = *(void *)(DerivedStorage + 16);
  int v14 = *(const void **)(DerivedStorage + 24);
  long long v16 = a3[1];
  v21[0] = *a3;
  v21[1] = v16;
  _OWORD v21[2] = a3[2];
  long long v19 = *a4;
  uint64_t v20 = *((void *)a4 + 2);
  uint64_t result = transferMovieSamplesFromSourceArray(a2, a1, v14, v12, v13, v5, v15, v21, (uint64_t)&v19);
  if (!result)
  {
    CFArrayRef v18 = *(const __CFArray **)(v11 + 56);
    return writeActualMdatLengthsToStorages(v11, v18);
  }
  return result;
}

void releaseSourceArray(const __CFArray *a1)
{
  if (a1)
  {
    CFIndex Count = CFArrayGetCount(a1);
    if (Count >= 1)
    {
      unint64_t v3 = Count + 1;
      do
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(a1, v3 - 2);
        CFAllocatorRef v5 = CFGetAllocator(a1);
        releaseSource(v5, (uint64_t)ValueAtIndex);
        --v3;
      }
      while (v3 > 1);
    }
    CFRelease(a1);
  }
}

uint64_t transferMovieSamplesFromSourceArray(uint64_t a1, const __CFArray *a2, const void *a3, CFAllocatorRef *a4, const void *a5, int a6, uint64_t a7, _OWORD *a8, uint64_t a9)
{
  uint64_t v455 = *MEMORY[0x1E4F143B8];
  CMTimeValue value = 0;
  CFTypeRef cf = 0;
  CMTimeValue v436 = *MEMORY[0x1E4F1F9F8];
  CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1F9F8] + 8);
  CFTypeRef v420 = 0;
  CMSampleBufferRef sbuf = 0;
  uint64_t v9 = 4294950861;
  if (!a1) {
    goto LABEL_549;
  }
  if (!a2) {
    goto LABEL_549;
  }
  if (!a3) {
    goto LABEL_549;
  }
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!DerivedStorage) {
    goto LABEL_549;
  }
  uint64_t v14 = DerivedStorage;
  long long v422 = *(_OWORD *)(DerivedStorage + 80);
  CMTimeEpoch v423 = *(void *)(DerivedStorage + 96);
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 48));
  CFArrayRef v15 = *(const __CFArray **)(v14 + 56);
  if (v15)
  {
    CFIndex Count = CFArrayGetCount(v15);
    if (Count >= 1)
    {
      CFIndex v17 = Count;
      for (CFIndex i = 0; i != v17; ++i)
      {
        CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), i);
        uint64_t v20 = ValueAtIndex;
        if (ValueAtIndex)
        {
          uint64_t v21 = ValueAtIndex[2];
          if (v21 && MovieTrackGetTrackDurationValue(v21)) {
            MovieTrackExtendMediaDecodeDurationToDisplayEndTime(*((void **)v20 + 1), *((void *)v20 + 2), 0);
          }
          *((_DWORD *)v20 + 30) = 4;
        }
      }
      CMTimeValue value = v20;
    }
  }
  MEMORY[0x19970E930](*(void *)(v14 + 48));
  CFIndex v22 = CFArrayGetCount(a2);
  if (v22 >= 1)
  {
    CFIndex v23 = v22;
    CFIndex v24 = 0;
    CFAllocatorRef v25 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    BOOL v390 = 1;
    while (1)
    {
      int v26 = CFArrayGetValueAtIndex(a2, v24);
      TrackForInsertionFromSource = getTrackForInsertionFromSource(v14, (uint64_t)v26);
      CMTimeValue value = TrackForInsertionFromSource;
      if (TrackForInsertionFromSource)
      {
        *((_DWORD *)v26 + 38) = TrackForInsertionFromSource[1];
      }
      else
      {
        uint64_t MutableMovieTrackObject = MovieInformationCreateTrack((uint64_t)a3, *(_DWORD *)v26, 0, 0, &cf);
        if (MutableMovieTrackObject) {
          goto LABEL_538;
        }
        uint64_t MutableMovieTrackObject = createMutableMovieTrackObject(v25, a3, cf, a4, (uint64_t *)&value);
        if (MutableMovieTrackObject) {
          goto LABEL_538;
        }
        uint64_t v29 = value;
        if (!value) {
          goto LABEL_537;
        }
        *((_DWORD *)v26 + 38) = *((_DWORD *)value + 1);
        v29[125] = 1;
        MEMORY[0x19970E910](*(void *)(v14 + 48));
        CFArrayAppendValue(*(CFMutableArrayRef *)(v14 + 56), value);
        MEMORY[0x19970E930](*(void *)(v14 + 48));
        syncPropertiesOfNewTrackWithSourceTrackUsingTrackReaderOrOptionsDictionary(a1, *((unsigned int *)cf + 36), *((void *)v26 + 4), 0);
        if (cf)
        {
          CFRelease(cf);
          CFTypeRef cf = 0;
        }
      }
      uint64_t v30 = value;
      uint64_t v31 = *((void *)value + 16);
      if (v31)
      {
        releaseSource(v25, v31);
        uint64_t v30 = value;
        *((void *)value + 16) = 0;
      }
      v30[16] = v26;
      *((unsigned char *)v30 + 124) = 1;
      if (!a6)
      {
        LOBYTE(target.source.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
        CMTimeValue v32 = v30[8];
        if (v32 == -1)
        {
          uint64_t v33 = (const void *)v30[5];
          v454.source.start.CMTimeValue value = -1;
          if (v33) {
            uint64_t v34 = v33;
          }
          else {
            uint64_t v34 = a5;
          }
          if (!v34) {
            goto LABEL_556;
          }
          int ByteStreamForTrackStorageURL = getByteStreamForTrackStorageURL(a1, v34, (char *)&target, &v454.source.start.value);
          CMTimeValue v32 = v454.source.start.value;
          if (ByteStreamForTrackStorageURL) {
            BOOL v36 = 1;
          }
          else {
            BOOL v36 = v454.source.start.value == -1;
          }
          if (v36)
          {
            FigFileDoesFileExist();
            uint64_t MutableMovieTrackObject = CMByteStreamCreateForFileURL();
            if (MutableMovieTrackObject) {
              goto LABEL_538;
            }
            source.start.CMTimeValue value = -1;
            uint64_t MutableMovieTrackObject = createStreamInfoForByteStream(v420, v14, &source.start.value);
            if (MutableMovieTrackObject) {
              goto LABEL_538;
            }
            if (v420)
            {
              CFRelease(v420);
              CFTypeRef v420 = 0;
            }
            CMTimeValue v32 = source.start.value;
            *((void *)value + 8) = source.start.value;
            if (v32 == -1) {
              goto LABEL_57;
            }
          }
          else
          {
            *((void *)value + 8) = v454.source.start.value;
          }
        }
        uint64_t v37 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 64), v32);
        if (!v37)
        {
LABEL_537:
          uint64_t MutableMovieTrackObject = FigSignalErrorAt();
LABEL_538:
          uint64_t v9 = MutableMovieTrackObject;
          goto LABEL_539;
        }
        if (!LOBYTE(target.source.start.value))
        {
          uint64_t v38 = v37;
          LOBYTE(target.source.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = v37[8];
          if (!LOBYTE(target.source.start.value))
          {
            source.start.CMTimeValue value = 0;
            uint64_t v39 = *(void *)v37;
            uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v40) {
              uint64_t v41 = v40;
            }
            else {
              uint64_t v41 = 0;
            }
            uint64_t v42 = *(uint64_t (**)(uint64_t, void, CMTimeRange *))(v41 + 24);
            if (!v42)
            {
LABEL_485:
              uint64_t v9 = 4294954514;
              goto LABEL_539;
            }
            uint64_t MutableMovieTrackObject = v42(v39, 0, &source);
            if (MutableMovieTrackObject) {
              goto LABEL_538;
            }
            if (!source.start.value)
            {
              uint64_t v43 = *(void *)v38;
              v454.source.start.CMTimeValue value = 0;
              if (v43)
              {
                uint64_t MutableMovieTrackObject = CMByteStreamAppend();
                if (MutableMovieTrackObject) {
                  goto LABEL_538;
                }
                CMTimeValue v44 = v454.source.start.value;
              }
              else
              {
                uint64_t MutableMovieTrackObject = FigSignalErrorAt();
                CMTimeValue v44 = 0;
                if (MutableMovieTrackObject) {
                  goto LABEL_538;
                }
              }
              source.start.value += v44;
            }
            uint64_t MutableMovieTrackObject = writeMdatHeader(*(void *)v38);
            if (MutableMovieTrackObject) {
              goto LABEL_538;
            }
            *((void *)v38 + 2) = source.start.value + 8;
            v38[8] = 1;
          }
        }
      }
LABEL_57:
      BOOL v390 = ++v24 < v23;
      if (v23 == v24) {
        goto LABEL_62;
      }
    }
  }
  BOOL v390 = 0;
LABEL_62:
  MEMORY[0x19970E910](*(void *)(v14 + 48));
  CFArrayRef v45 = *(const __CFArray **)(v14 + 56);
  if (v45)
  {
    CFIndex v46 = CFArrayGetCount(v45);
    uint64_t v377 = *MEMORY[0x1E4F1CF80];
    CFIndex v384 = v46;
    if (v46 >= 1)
    {
      CFIndex v47 = v46;
      CFIndex v48 = 0;
      uint64_t v49 = MEMORY[0x1E4F1FA00];
      CMTimeFlags v387 = *(_DWORD *)(MEMORY[0x1E4F1FA00] + 12);
      CMTimeEpoch v385 = *(void *)(MEMORY[0x1E4F1FA00] + 16);
      while (1)
      {
        uint64_t v418 = 0;
        CFTypeRef v419 = 0;
        CFIndex v402 = v48;
        CFTypeID v50 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), v48);
        CMTimeValue value = v50;
        if (!v50) {
          goto LABEL_286;
        }
        uint64_t v51 = v50[16];
        if (!v51) {
          goto LABEL_286;
        }
        long long v52 = a8[1];
        *(_OWORD *)&start.start.CMTimeValue value = *a8;
        *(_OWORD *)&start.start.CMTimeEpoch epoch = v52;
        *(_OWORD *)&start.duration.CMTimeScale timescale = a8[2];
        uint64_t v447 = 0;
        uint64_t v446 = 0;
        CFTypeRef v432 = 0;
        CFTypeRef v431 = 0;
        uint64_t v53 = *(void *)(v51 + 32);
        if (!v53)
        {
          FigSignalErrorAt();
          uint64_t v59 = 0;
          uint64_t v72 = 0;
          goto LABEL_150;
        }
        uint64_t v54 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v54) {
          uint64_t v55 = v54;
        }
        else {
          uint64_t v55 = 0;
        }
        CFTypeID v56 = *(uint64_t (**)(uint64_t))(v55 + 16);
        if (v56) {
          unint64_t v57 = v56(v53);
        }
        else {
          unint64_t v57 = 0;
        }
        if (v57 <= 1) {
          size_t v58 = 1;
        }
        else {
          size_t v58 = v57;
        }
        uint64_t v59 = (char **)malloc_type_calloc(1uLL, 0x18uLL, 0x102004024DAA5DEuLL);
        *uint64_t v59 = (char *)malloc_type_calloc(v58, 0x60uLL, 0x1000040565EDBD2uLL);
        v59[2] = (char *)v58;
        uint64_t FigBaseObject = FigTrackReaderGetFigBaseObject(*(void *)(v51 + 32));
        uint64_t v61 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v61) {
          uint64_t v62 = v61;
        }
        else {
          uint64_t v62 = 0;
        }
        CFIndex v63 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *))(v62 + 48);
        if (v63)
        {
          v63(FigBaseObject, @"SecondaryEditCursorService", v377, &v446);
          BOOL v64 = v446 != 0;
        }
        else
        {
          BOOL v64 = 0;
        }
        uint64_t v65 = FigTrackReaderGetFigBaseObject(*(void *)(v51 + 32));
        uint64_t v66 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v66) {
          uint64_t v67 = v66;
        }
        else {
          uint64_t v67 = 0;
        }
        long long v68 = 0uLL;
        int v69 = *(void (**)(uint64_t, __CFString *, uint64_t, uint64_t *, __n128))(v67 + 48);
        if (v69)
        {
          v69(v65, @"EditCursorService", v377, &v446 + v64, (__n128)0);
          long long v68 = 0uLL;
        }
        uint64_t v70 = *(&v446 + v64);
        uint64_t v71 = 1;
        if (v64) {
          uint64_t v71 = 2;
        }
        if (v70) {
          uint64_t v72 = v71;
        }
        else {
          uint64_t v72 = v64;
        }
        if (!v72)
        {
          *(_OWORD *)&v454.target.start.CMTimeEpoch epoch = v68;
          *(_OWORD *)&v454.target.duration.CMTimeScale timescale = v68;
          *(_OWORD *)&v454.source.duration.CMTimeScale timescale = v68;
          *(_OWORD *)&v454.target.start.CMTimeValue value = v68;
          *(_OWORD *)&v454.source.start.CMTimeValue value = v68;
          *(_OWORD *)&v454.source.start.CMTimeEpoch epoch = v68;
          CMTimeRange source = start;
          target.CMTimeRange source = start;
          CMTimeMappingMake(&v454, &source, &target.source);
          CMTimeRange source = v454.source;
          CMTimeRange v445 = v454.target;
          appendToTimeMappingArray(v59, (uint64_t)&source);
          goto LABEL_150;
        }
        uint64_t v73 = v446;
        uint64_t v74 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v74) {
          uint64_t v75 = v74;
        }
        else {
          uint64_t v75 = 0;
        }
        int v76 = *(unsigned int (**)(uint64_t, CMTimeMapping *, CFTypeRef *))(v75 + 8);
        if (!v76) {
          goto LABEL_150;
        }
        *(_OWORD *)&v454.source.start.CMTimeValue value = *MEMORY[0x1E4F1FA08];
        v454.source.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA08] + 16);
        if (v76(v73, &v454, &v432)) {
          goto LABEL_149;
        }
        if (v70) {
          BOOL v77 = v64;
        }
        else {
          BOOL v77 = 0;
        }
        while (1)
        {
          memset(&v454, 0, sizeof(v454));
          memset(&v445, 0, sizeof(v445));
          memset(&source, 0, sizeof(source));
          CFTypeRef v78 = v432;
          uint64_t v79 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v79) {
            uint64_t v80 = v79;
          }
          else {
            uint64_t v80 = 0;
          }
          CFAllocatorRef v81 = *(unsigned int (**)(CFTypeRef, CMTimeMapping *))(v80 + 24);
          if (!v81 || v81(v78, &v454)) {
            goto LABEL_149;
          }
          memset(&v430, 0, sizeof(v430));
          CMTimeRange range = v454.target;
          CMTimeRange otherRange = start;
          CMTimeRangeGetIntersection(&v430, &range, &otherRange);
          if ((v430.start.flags & 1) == 0
            || (v430.duration.flags & 1) == 0
            || v430.duration.epoch
            || v430.duration.value < 0
            || (range.CMTimeRange start = v430.duration,
                *(_OWORD *)&otherRange.start.CMTimeValue value = *MEMORY[0x1E4F1FA48],
                otherRange.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16),
                CMTimeCompare(&range.start, &otherRange.start)))
          {
            memset(&v429, 0, sizeof(v429));
            *(_OWORD *)&dur.start.CMTimeValue value = *(_OWORD *)&v430.start.value;
            dur.start.CMTimeEpoch epoch = v430.start.epoch;
            CMTimeRange range = v454.target;
            CMTimeRange otherRange = v454.source;
            CMTimeMapTimeFromRangeToRange(&v429, &dur.start, &range, &otherRange);
            memset(&v428, 0, sizeof(v428));
            dur.CMTimeRange start = v430.duration;
            CMTimeRange range = v454.target;
            CMTimeRange otherRange = v454.source;
            CMTimeMapDurationFromRangeToRange(&v428, &dur.start, &range, &otherRange);
            memset(&v427, 0, sizeof(v427));
            range.CMTimeRange start = v429;
            otherRange.CMTimeRange start = v428;
            CMTimeRangeMake(&v427, &range.start, &otherRange.start);
            memset(&target, 0, sizeof(target));
            CMTimeRange range = v427;
            CMTimeRange otherRange = v430;
            CMTimeMappingMake(&target, &range, &otherRange);
            if (!v77)
            {
              CMTimeRange range = target.source;
              CMTimeRange v443 = target.target;
              appendToTimeMappingArray(v59, (uint64_t)&range);
              goto LABEL_120;
            }
            uint64_t v82 = v447;
            otherRange.CMTimeRange start = v429;
            uint64_t v83 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v83) {
              uint64_t v84 = v83;
            }
            else {
              uint64_t v84 = 0;
            }
            uint64_t v85 = *(uint64_t (**)(uint64_t, CMTimeRange *, CFTypeRef *))(v84 + 8);
            if (!v85) {
              goto LABEL_149;
            }
            *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&otherRange.start.value;
            range.start.CMTimeEpoch epoch = otherRange.start.epoch;
            int v86 = v85(v82, &range, &v431);
            if (v86 != -12521) {
              break;
            }
          }
LABEL_120:
          CFTypeRef v87 = v432;
          uint64_t v88 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v88) {
            uint64_t v89 = v88;
          }
          else {
            uint64_t v89 = 0;
          }
          uint64_t v90 = *(unsigned int (**)(CFTypeRef, uint64_t))(v89 + 16);
          if (!v90 || v90(v87, 1)) {
            goto LABEL_149;
          }
          if (v431)
          {
            CFRelease(v431);
            CFTypeRef v431 = 0;
          }
        }
        if (!v86)
        {
          do
          {
            CFTypeRef v91 = v431;
            uint64_t v92 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v92) {
              uint64_t v93 = v92;
            }
            else {
              uint64_t v93 = 0;
            }
            uint64_t v94 = *(unsigned int (**)(CFTypeRef, CMTimeRange *))(v93 + 24);
            if (!v94 || v94(v91, &source)) {
              break;
            }
            CMTimeRange otherRange = v445;
            CMTimeRange dur = v427;
            CMTimeRangeGetIntersection(&range, &otherRange, &dur);
            CMTimeRange v430 = range;
            if ((range.start.flags & 1) == 0
              || (v430.duration.flags & 1) == 0
              || v430.duration.epoch
              || v430.duration.value < 0
              || (range.CMTimeRange start = v430.duration,
                  *(_OWORD *)&otherRange.start.CMTimeValue value = *MEMORY[0x1E4F1FA48],
                  otherRange.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA48] + 16),
                  CMTimeCompare(&range.start, &otherRange.start)))
            {
              CMTimeRange otherRange = v454.source;
              CMTimeRange v441 = v454.target;
              CMTimeRange dur = source;
              CMTimeRange v439 = v445;
              CMTimeRange range = source;
              memset(&v435, 0, sizeof(v435));
              memset(&v434, 0, sizeof(v434));
              CMTimeRange v443 = v445;
              *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)&v445.start.value;
              time1.start.CMTimeEpoch epoch = v445.start.epoch;
              *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)&v454.source.start.value;
              time2.start.CMTimeEpoch epoch = v454.source.start.epoch;
              if (CMTimeCompare(&time1.start, &time2.start) < 0)
              {
                *(_OWORD *)&v443.start.CMTimeValue value = *(_OWORD *)&otherRange.start.value;
                v443.start.CMTimeEpoch epoch = otherRange.start.epoch;
                CMTime rhs = otherRange.start;
                CMTimeRange time1 = v439;
                CMTimeRange time2 = dur;
                CMTimeMapTimeFromRangeToRange(&range.start, &rhs, &time1, &time2);
                *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)&v443.start.value;
                time1.start.CMTimeEpoch epoch = v443.start.epoch;
                *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)&v439.start.value;
                time2.start.CMTimeEpoch epoch = v439.start.epoch;
                CMTimeSubtract(&rhs, &time1.start, &time2.start);
                time2.CMTimeRange start = v439.duration;
                CMTimeSubtract(&time1.start, &time2.start, &rhs);
                v443.CMTime duration = time1.start;
                *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)&range.start.value;
                time1.start.CMTimeEpoch epoch = range.start.epoch;
                *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)&dur.start.value;
                time2.start.CMTimeEpoch epoch = dur.start.epoch;
                CMTimeSubtract(&v450, &time1.start, &time2.start);
                time2.CMTimeRange start = dur.duration;
                CMTimeSubtract(&time1.start, &time2.start, &v450);
                range.CMTime duration = time1.start;
              }
              CMTimeRange time1 = v443;
              CMTimeRangeGetEnd(&v435, &time1);
              CMTimeRange time1 = otherRange;
              CMTimeRangeGetEnd(&v434, &time1);
              time1.CMTimeRange start = v435;
              time2.CMTimeRange start = v434;
              if (CMTimeCompare(&time1.start, &time2.start) >= 1)
              {
                memset(&v449, 0, sizeof(v449));
                time1.CMTimeRange start = v435;
                time2.CMTimeRange start = v434;
                CMTimeSubtract(&v449, &time1.start, &time2.start);
                memset(&duration, 0, sizeof(duration));
                CMTime v433 = v449;
                CMTimeRange time1 = v439;
                CMTimeRange time2 = dur;
                CMTimeMapDurationFromRangeToRange(&duration, &v433, &time1, &time2);
                time2.CMTimeRange start = v443.duration;
                CMTime v433 = v449;
                CMTimeSubtract(&time1.start, &time2.start, &v433);
                v443.CMTime duration = time1.start;
                time2.CMTimeRange start = range.duration;
                CMTime v433 = duration;
                CMTimeSubtract(&time1.start, &time2.start, &v433);
                range.CMTime duration = time1.start;
              }
              CMTime duration = v443.start;
              CMTimeRange time1 = otherRange;
              CMTimeRange time2 = v441;
              CMTimeMapTimeFromRangeToRange(&v449, &duration, &time1, &time2);
              v443.CMTimeRange start = v449;
              CMTime duration = v443.duration;
              CMTimeRange time1 = otherRange;
              CMTimeRange time2 = v441;
              CMTimeMapDurationFromRangeToRange(&v449, &duration, &time1, &time2);
              v443.CMTime duration = v449;
              target.CMTimeRange source = range;
              target.CMTimeMapping target = v443;
              appendToTimeMappingArray(v59, (uint64_t)&range);
            }
            CFTypeRef v95 = v431;
            uint64_t v96 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v97 = v96 ? v96 : 0;
            int v98 = *(uint64_t (**)(CFTypeRef, uint64_t))(v97 + 16);
            if (!v98) {
              break;
            }
            int v99 = v98(v95, 1);
            if (v99 == -12520) {
              goto LABEL_120;
            }
          }
          while (!v99);
        }
LABEL_149:
        CFIndex v47 = v384;
LABEL_150:
        if (v432) {
          CFRelease(v432);
        }
        if (v431) {
          CFRelease(v431);
        }
        if (v72 >= 1)
        {
          BOOL v100 = (CFTypeRef *)&v446;
          do
          {
            if (*v100)
            {
              CFRelease(*v100);
              CFTypeRef *v100 = 0;
            }
            ++v100;
            --v72;
          }
          while (v72);
        }
        *(void *)(v51 + 64) = v59;
        if (v59)
        {
          int64_t v101 = (int64_t)v59[1];
          if (v101)
          {
            CFIndex v102 = (char **)malloc_type_calloc(1uLL, 0x18uLL, 0x102004024DAA5DEuLL);
            *CFIndex v102 = (char *)malloc_type_calloc(v101, 0x60uLL, 0x1000040565EDBD2uLL);
            v397 = v102;
            v102[2] = (char *)v101;
            CFIndex v103 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004024DAA5DEuLL);
            *CFIndex v103 = malloc_type_calloc(v101, 0x30uLL, 0x1000040EED21634uLL);
            *(void *)v393 = v103;
            v103[2] = v101;
            if (v101 >= 1)
            {
              for (uint64_t j = 0; j != v101; ++j)
              {
                v450.CMTimeValue value = 0;
                v449.CMTimeValue value = 0;
                CMTimeValue v105 = *(void *)v49;
                rhs.CMTimeValue value = *(void *)v49;
                CMTimeScale v106 = *(_DWORD *)(v49 + 8);
                rhs.CMTimeScale timescale = v106;
                long long v107 = *(_OWORD *)(v49 + 24);
                *(_OWORD *)&time1.start.CMTimeValue value = v107;
                CMTimeEpoch v108 = *(void *)(v49 + 40);
                time1.start.CMTimeEpoch epoch = v108;
                long long v109 = *(_OWORD *)(v49 + 64);
                *(_OWORD *)&source.start.CMTimeValue value = *(_OWORD *)(v49 + 48);
                *(_OWORD *)&source.start.CMTimeEpoch epoch = v109;
                *(_OWORD *)&source.duration.CMTimeScale timescale = *(_OWORD *)(v49 + 80);
                *(_OWORD *)&time2.start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
                CMTimeEpoch v110 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
                time2.start.CMTimeEpoch epoch = v110;
                *(_OWORD *)&v430.start.CMTimeValue value = *(_OWORD *)&time2.start.value;
                v430.start.CMTimeEpoch epoch = v110;
                *(_OWORD *)&v427.start.CMTimeValue value = *(_OWORD *)&time2.start.value;
                v427.start.CMTimeEpoch epoch = v110;
                *(_OWORD *)keysa = *(_OWORD *)&time2.start.value;
                *(_OWORD *)&start.start.CMTimeValue value = *MEMORY[0x1E4F1FA08];
                start.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA08] + 16);
                *(_OWORD *)&v435.CMTimeValue value = *(_OWORD *)&time2.start.value;
                v435.CMTimeEpoch epoch = v110;
                long long v111 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
                *(_OWORD *)&target.source.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
                *(_OWORD *)&target.source.start.CMTimeEpoch epoch = v111;
                *(_OWORD *)&target.source.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
                LOBYTE(v433.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
                LOBYTE(v429.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
                duration.CMTimeValue value = 0;
                CFArrayRef v112 = *(void **)(v51 + 64);
                if (v112)
                {
                  uint64_t v113 = *v112 + 96 * j;
                  range.start.CMTimeValue value = *(void *)v113;
                  range.start.CMTimeScale timescale = *(_DWORD *)(v113 + 8);
                  CMTimeFlags v114 = *(_DWORD *)(v113 + 12);
                  CMTimeEpoch v115 = *(void *)(v113 + 16);
                  *(_OWORD *)&v454.source.start.CMTimeValue value = *(_OWORD *)(v113 + 24);
                  v454.source.start.CMTimeEpoch epoch = *(void *)(v113 + 40);
                  uint64_t v116 = (CMTimeRange *)(v113 + 48);
                }
                else
                {
                  range.start.CMTimeValue value = v105;
                  range.start.CMTimeScale timescale = v106;
                  *(_OWORD *)&v454.source.start.CMTimeValue value = v107;
                  uint64_t v116 = (CMTimeRange *)(v49 + 48);
                  CMTimeFlags v114 = v387;
                  CMTimeEpoch v115 = v385;
                  v454.source.start.CMTimeEpoch epoch = v108;
                }
                CMTimeRange source = *v116;
                rhs.CMTimeValue value = range.start.value;
                rhs.CMTimeScale timescale = range.start.timescale;
                *(_OWORD *)&time1.start.CMTimeValue value = *(_OWORD *)&v454.source.start.value;
                time1.start.CMTimeEpoch epoch = v454.source.start.epoch;
                CMTimeEpoch epoch = v454.source.start.epoch;
                v454.source.start.CMTimeValue value = range.start.value;
                v454.source.start.CMTimeScale timescale = range.start.timescale;
                v454.source.start.CMTimeFlags flags = v114;
                v454.source.start.CMTimeEpoch epoch = v115;
                *(_OWORD *)&v454.source.duration.CMTimeValue value = *(_OWORD *)&time1.start.value;
                v454.source.duration.CMTimeEpoch epoch = epoch;
                CMTimeRangeGetEnd(&time2.start, &v454.source);
                if (v114)
                {
                  uint64_t v118 = *(void *)(v51 + 32);
                  uint64_t v119 = *(void *)(CMBaseObjectGetVTable() + 16);
                  if (v119) {
                    uint64_t v120 = v119;
                  }
                  else {
                    uint64_t v120 = 0;
                  }
                  CFStringRef v121 = *(unsigned int (**)(uint64_t, CMTime *))(v120 + 32);
                  if (v121 && !v121(v118, &v450))
                  {
                    CMTimeValue v122 = v450.value;
                    uint64_t v123 = *(void *)(CMBaseObjectGetVTable() + 16);
                    uint64_t v124 = v123 ? v123 : 0;
                    uint64_t v125 = *(unsigned int (**)(CMTimeValue, CMTimeMapping *, CMTime *, void, void))(v124 + 8);
                    if (v125)
                    {
                      v454.source.start.CMTimeValue value = rhs.value;
                      v454.source.start.CMTimeScale timescale = rhs.timescale;
                      v454.source.start.CMTimeFlags flags = v114;
                      v454.source.start.CMTimeEpoch epoch = v115;
                      if (!v125(v122, &v454, &v449, 0, 0))
                      {
                        do
                        {
                          LOBYTE(v433.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
                          LOBYTE(v429.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
                          duration.CMTimeValue value = 0;
                          *(_OWORD *)&v454.source.start.CMTimeValue value = *(_OWORD *)keysa;
                          v454.source.start.CMTimeEpoch epoch = v110;
                          CMTimeValue v126 = v449.value;
                          uint64_t v127 = *(void *)(CMBaseObjectGetVTable() + 16);
                          if (v127) {
                            uint64_t v128 = v127;
                          }
                          else {
                            uint64_t v128 = 0;
                          }
                          CFTypeID v129 = *(unsigned int (**)(CMTimeValue, CMTimeMapping *))(v128 + 40);
                          if (!v129 || v129(v126, &v454)) {
                            goto LABEL_241;
                          }
                          *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&v430.start.value;
                          range.start.CMTimeEpoch epoch = v430.start.epoch;
                          *(_OWORD *)&otherRange.start.CMTimeValue value = *(_OWORD *)&v454.source.start.value;
                          otherRange.start.CMTimeEpoch epoch = v454.source.start.epoch;
                          CMTimeMinimum(&v430.start, &range.start, &otherRange.start);
                          CMTimeValue v130 = v449.value;
                          uint64_t v131 = *(void *)(CMBaseObjectGetVTable() + 16);
                          if (v131) {
                            uint64_t v132 = v131;
                          }
                          else {
                            uint64_t v132 = 0;
                          }
                          CFIndex v133 = *(unsigned int (**)(CMTimeValue, CMTime *, CMTime *, void, void))(v132 + 64);
                          if (!v133 || v133(v130, &v433, &v429, 0, 0) || LOBYTE(v433.value)) {
                            break;
                          }
                          CMTimeValue v134 = v449.value;
                          uint64_t v135 = *(void *)(CMBaseObjectGetVTable() + 16);
                          uint64_t v136 = v135 ? v135 : 0;
                          uint64_t v137 = *(unsigned int (**)(CMTimeValue, uint64_t, CMTime *))(v136 + 168);
                          if (!v137) {
                            break;
                          }
                        }
                        while (!v137(v134, -1, &duration) && duration.value == -1);
                        CMTimeValue v138 = v449.value;
                        uint64_t v139 = *(void *)(CMBaseObjectGetVTable() + 16);
                        if (v139) {
                          uint64_t v140 = v139;
                        }
                        else {
                          uint64_t v140 = 0;
                        }
                        uint64_t v141 = *(unsigned int (**)(CMTimeValue, CMTimeRange *))(v140 + 48);
                        if (v141 && !v141(v138, &v427))
                        {
                          if (v449.value)
                          {
                            CFRelease((CFTypeRef)v449.value);
                            v449.CMTimeValue value = 0;
                          }
                          CMTimeValue v142 = v450.value;
                          *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&time2.start.value;
                          range.start.CMTimeEpoch epoch = time2.start.epoch;
                          uint64_t v143 = *(void *)(CMBaseObjectGetVTable() + 16);
                          uint64_t v144 = v143 ? v143 : 0;
                          CFIndex v145 = *(unsigned int (**)(CMTimeValue, CMTimeMapping *, CMTime *, void, void))(v144 + 8);
                          if (v145)
                          {
                            *(_OWORD *)&v454.source.start.CMTimeValue value = *(_OWORD *)&range.start.value;
                            v454.source.start.CMTimeEpoch epoch = range.start.epoch;
                            if (!v145(v142, &v454, &v449, 0, 0))
                            {
                              CMTimeValue v146 = v449.value;
                              uint64_t v147 = *(void *)(CMBaseObjectGetVTable() + 16);
                              uint64_t v148 = v147 ? v147 : 0;
                              uint64_t v149 = *(unsigned int (**)(CMTimeValue, CMTime *))(v148 + 40);
                              if (v149 && !v149(v146, &v435))
                              {
                                v454.source.CMTimeRange start = v435;
                                *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&time2.start.value;
                                range.start.CMTimeEpoch epoch = time2.start.epoch;
                                if (CMTimeCompare(&v454.source.start, &range.start)
                                  || ((CMTimeValue v165 = v449.value, (v166 = *(void *)(CMBaseObjectGetVTable() + 16)) == 0)
                                    ? (uint64_t v167 = 0)
                                    : (uint64_t v167 = v166),
                                      (uint64_t v168 = *(unsigned int (**)(CMTimeValue, uint64_t, void))(v167 + 176)) != 0
                                   && !v168(v165, -1, 0)))
                                {
                                  while (1)
                                  {
                                    *(_OWORD *)&v434.CMTimeValue value = *(_OWORD *)keysa;
                                    v434.CMTimeEpoch epoch = v110;
                                    LOBYTE(v433.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
                                    LOBYTE(v429.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
                                    duration.CMTimeValue value = 0;
                                    CMTimeValue v150 = v449.value;
                                    *(_OWORD *)&v454.source.start.CMTimeValue value = *(_OWORD *)keysa;
                                    v454.source.start.CMTimeEpoch epoch = v110;
                                    *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)keysa;
                                    range.start.CMTimeEpoch epoch = v110;
                                    uint64_t v151 = *(void *)(CMBaseObjectGetVTable() + 16);
                                    uint64_t v152 = v151 ? v151 : 0;
                                    CFIndex v153 = *(unsigned int (**)(CMTimeValue, CMTimeMapping *))(v152 + 48);
                                    if (!v153 || v153(v150, &v454)) {
                                      break;
                                    }
                                    uint64_t v154 = *(void *)(CMBaseObjectGetVTable() + 16);
                                    uint64_t v155 = v154 ? v154 : 0;
                                    unsigned int v156 = *(unsigned int (**)(CMTimeValue, CMTimeRange *))(v155 + 56);
                                    if (!v156 || v156(v150, &range)) {
                                      break;
                                    }
                                    *(_OWORD *)&otherRange.start.CMTimeValue value = *(_OWORD *)&v454.source.start.value;
                                    otherRange.start.CMTimeEpoch epoch = v454.source.start.epoch;
                                    *(_OWORD *)&dur.start.CMTimeValue value = *(_OWORD *)&range.start.value;
                                    dur.start.CMTimeEpoch epoch = range.start.epoch;
                                    CMTimeAdd(&v434, &otherRange.start, &dur.start);
                                    *(_OWORD *)&v454.source.start.CMTimeValue value = *(_OWORD *)&start.start.value;
                                    v454.source.start.CMTimeEpoch epoch = start.start.epoch;
                                    range.CMTimeRange start = v434;
                                    CMTimeMaximum(&start.start, &v454.source.start, &range.start);
                                    CMTimeValue v157 = v449.value;
                                    uint64_t v158 = *(void *)(CMBaseObjectGetVTable() + 16);
                                    if (v158) {
                                      uint64_t v159 = v158;
                                    }
                                    else {
                                      uint64_t v159 = 0;
                                    }
                                    char v160 = *(unsigned int (**)(CMTimeValue, CMTime *, CMTime *, void, void))(v159 + 64);
                                    if (v160 && !v160(v157, &v433, &v429, 0, 0) && !LOBYTE(v433.value))
                                    {
                                      CMTimeValue v161 = v449.value;
                                      uint64_t v162 = *(void *)(CMBaseObjectGetVTable() + 16);
                                      uint64_t v163 = v162 ? v162 : 0;
                                      unsigned int v164 = *(unsigned int (**)(CMTimeValue, uint64_t, CMTime *))(v163 + 176);
                                      if (v164)
                                      {
                                        if (!v164(v161, -1, &duration) && duration.value == -1) {
                                          continue;
                                        }
                                      }
                                    }
                                    goto LABEL_167;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
                else
                {
LABEL_167:
                  *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&v430.start.value;
                  range.start.CMTimeEpoch epoch = v430.start.epoch;
                  *(_OWORD *)&otherRange.start.CMTimeValue value = *(_OWORD *)&time2.start.value;
                  otherRange.start.CMTimeEpoch epoch = time2.start.epoch;
                  CMTimeRangeFromTimeToTime(&v454.source, &range.start, &otherRange.start);
                  rhs.CMTimeScale timescale = v454.source.start.timescale;
                  rhs.CMTimeValue value = v454.source.start.value;
                  time1.CMTimeRange start = v454.source.duration;
                  v454.CMTimeMapping target = source;
                  appendToTimeMappingArray(v397, (uint64_t)&v454);
                  *(_OWORD *)&v454.source.start.CMTimeValue value = *(_OWORD *)&v427.start.value;
                  v454.source.start.CMTimeEpoch epoch = v427.start.epoch;
                  *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&start.start.value;
                  range.start.CMTimeEpoch epoch = start.start.epoch;
                  CMTimeRangeFromTimeToTime(&target.source, &v454.source.start, &range.start);
                  *(_OWORD *)&v454.source.start.CMTimeValue value = *(_OWORD *)&target.source.start.value;
                  *(_OWORD *)&v454.source.start.CMTimeEpoch epoch = *(_OWORD *)&target.source.start.epoch;
                  *(_OWORD *)&v454.source.duration.CMTimeScale timescale = *(_OWORD *)&target.source.duration.timescale;
                  appendToTimeRangeArray(*(char ***)v393, (uint64_t)&v454);
                }
LABEL_241:
                if (v450.value) {
                  CFRelease((CFTypeRef)v450.value);
                }
                if (v449.value) {
                  CFRelease((CFTypeRef)v449.value);
                }
              }
            }
            *(void *)(v51 + 72) = v397;
            *(void *)(v51 + 80) = *(void *)v393;
            CFIndex v47 = v384;
            if (v397[1] && *(void *)(*(void *)v393 + 8))
            {
              uint64_t v169 = *(void *)(v51 + 64);
              if (v169) {
                uint64_t v170 = *(void *)(v169 + 8);
              }
              else {
                uint64_t v170 = 0;
              }
              if ((unint64_t)v170 <= 1) {
                size_t v171 = 1;
              }
              else {
                size_t v171 = v170;
              }
              CFTypeRef v172 = malloc_type_calloc(1uLL, 0x18uLL, 0x102004024DAA5DEuLL);
              *CFTypeRef v172 = malloc_type_calloc(v171, 0x30uLL, 0x1000040EED21634uLL);
              v172[2] = v171;
              *(void *)(v51 + 88) = v172;
              uint64_t v173 = MEMORY[0x1E4F1FA10];
              long long v174 = 0uLL;
              if (v170 >= 1)
              {
                do
                {
                  *(_OWORD *)&v454.source.start.CMTimeEpoch epoch = v174;
                  *(_OWORD *)&v454.source.duration.CMTimeScale timescale = v174;
                  *(_OWORD *)&v454.source.start.CMTimeValue value = v174;
                  *(_OWORD *)&source.start.CMTimeValue value = *(_OWORD *)v173;
                  source.start.CMTimeEpoch epoch = *(void *)(v173 + 16);
                  *(_OWORD *)&target.source.start.CMTimeValue value = *(_OWORD *)&source.start.value;
                  target.source.start.CMTimeEpoch epoch = source.start.epoch;
                  CMTimeRangeMake(&v454.source, &source.start, &target.source.start);
                  double v175 = *(char ***)(v51 + 88);
                  CMTimeRange source = v454.source;
                  appendToTimeRangeArray(v175, (uint64_t)&source);
                  long long v174 = 0uLL;
                  --v170;
                }
                while (v170);
              }
              uint64_t v176 = *(void *)(v51 + 32);
              uint64_t v177 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v177) {
                uint64_t v178 = v177;
              }
              else {
                uint64_t v178 = 0;
              }
              CFTypeRef v179 = *(unsigned int (**)(uint64_t, CFTypeRef *))(v178 + 32);
              if (v179 && !v179(v176, &v419))
              {
                CFTypeRef v180 = v419;
                uint64_t v181 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v181) {
                  uint64_t v182 = v181;
                }
                else {
                  uint64_t v182 = 0;
                }
                uint64_t v183 = *(unsigned int (**)(CFTypeRef, uint64_t *))(v182 + 24);
                if (!v183 || v183(v180, &v418))
                {
                  int v184 = *(uint64_t **)(v51 + 72);
                  *(_OWORD *)&source.start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
                  source.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
                  if (v184 && v184[1] > 0)
                  {
                    uint64_t v185 = *v184;
                    *(_OWORD *)&source.start.CMTimeValue value = *(_OWORD *)v185;
                    source.start.CMTimeEpoch epoch = *(void *)(v185 + 16);
                  }
                  else
                  {
                    FigSignalErrorAt();
                  }
                  CFTypeRef v186 = v419;
                  uint64_t v187 = *(void *)(CMBaseObjectGetVTable() + 16);
                  uint64_t v188 = v187 ? v187 : 0;
                  int v189 = *(unsigned int (**)(CFTypeRef, CMTimeMapping *, uint64_t *, void, void))(v188 + 8);
                  if (v189)
                  {
                    *(_OWORD *)&v454.source.start.CMTimeValue value = *(_OWORD *)&source.start.value;
                    v454.source.start.CMTimeEpoch epoch = source.start.epoch;
                    if (!v189(v186, &v454, &v418, 0, 0))
                    {
                      do
                      {
                        v454.source.start.CMTimeValue value = 0;
                        uint64_t v193 = v418;
                        uint64_t v194 = *(void *)(CMBaseObjectGetVTable() + 16);
                        if (v194) {
                          uint64_t v195 = v194;
                        }
                        else {
                          uint64_t v195 = 0;
                        }
                        uint64_t v196 = *(unsigned int (**)(uint64_t, uint64_t, CMTimeMapping *))(v195 + 168);
                      }
                      while (v196 && !v196(v193, -1, &v454) && v454.source.start.value == -1);
                    }
                  }
                }
                if (v419) {
                  CFRelease(v419);
                }
                *(void *)(v51 + 48) = v418;
                MovieTrackGetMediaDuration(*((void *)value + 2), (uint64_t)&v454);
                CMTimeValue v436 = v454.source.start.value;
                CMTimeFlags flags = v454.source.start.flags;
                CMTimeScale timescale = v454.source.start.timescale;
                unsigned int v191 = (CMTimeValue *)(v51 + 112);
                if (v454.source.start.flags)
                {
                  CMTimeEpoch v197 = v454.source.start.epoch;
                  *unsigned int v191 = v436;
                  *(_DWORD *)(v51 + 120) = timescale;
                  *(_DWORD *)(v51 + 124) = flags;
                  *(void *)(v51 + 128) = v197;
                }
                else
                {
                  uint64_t v192 = MEMORY[0x1E4F1FA48];
                  *(_OWORD *)unsigned int v191 = *MEMORY[0x1E4F1FA48];
                  *(void *)(v51 + 128) = *(void *)(v192 + 16);
                }
              }
            }
          }
        }
LABEL_286:
        CFIndex v48 = v402 + 1;
        if (v402 + 1 == v47)
        {
          CFIndex v198 = 0;
          uint64_t v382 = *MEMORY[0x1E4F1EC78];
          *(_OWORD *)keysb = *MEMORY[0x1E4F1F9F8];
          CMTimeEpoch v199 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
          long long v407 = *MEMORY[0x1E4F1FA48];
          CMTimeEpoch v200 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
          int v201 = 1;
          CMTimeEpoch v398 = v200;
          CMTimeEpoch v403 = v199;
          while (1)
          {
            *(_OWORD *)&target.source.start.CMTimeValue value = *(_OWORD *)keysb;
            target.source.start.CMTimeEpoch epoch = v199;
            *(_OWORD *)&range.start.CMTimeValue value = v407;
            range.start.CMTimeEpoch epoch = v200;
            CMTimeValue value = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), v198);
            uint64_t v202 = *((void *)value + 16);
            if (!v202) {
              goto LABEL_326;
            }
            uint64_t v203 = *(void *)(v202 + 48);
            if (!v203) {
              goto LABEL_326;
            }
            uint64_t v204 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v204) {
              uint64_t v205 = v204;
            }
            else {
              uint64_t v205 = 0;
            }
            char v206 = *(void (**)(uint64_t, CMTimeRange *))(v205 + 48);
            if (v206) {
              v206(v203, &range);
            }
            *(_OWORD *)&source.start.CMTimeValue value = *(_OWORD *)(v202 + 112);
            source.start.CMTimeEpoch epoch = *(void *)(v202 + 128);
            *(_OWORD *)&otherRange.start.CMTimeValue value = v422;
            otherRange.start.CMTimeEpoch epoch = v423;
            CMTimeAdd(&v454.source.start, &source.start, &otherRange.start);
            *(_OWORD *)(v202 + 112) = *(_OWORD *)&v454.source.start.value;
            *(void *)(v202 + 128) = v454.source.start.epoch;
            int v207 = value;
            int v208 = a5;
            if (*((void *)value + 5)) {
              int v208 = (const void *)*((void *)value + 5);
            }
            if (!a6 && !v208)
            {
LABEL_556:
              uint64_t v9 = 4294950873;
              goto LABEL_539;
            }
            *(void *)v394 = v208;
            if (a6 && !*(void *)(v202 + 16))
            {
              v454.source.start.CMTimeValue value = 0;
              source.start.CMTimeValue value = 0;
              uint64_t v209 = *(void *)(v202 + 48);
              uint64_t v210 = *(void *)(CMBaseObjectGetVTable() + 16);
              if (v210) {
                uint64_t v211 = v210;
              }
              else {
                uint64_t v211 = 0;
              }
              BOOL v212 = *(void (**)(uint64_t, void, void, CMTimeMapping *, CMTimeRange *))(v211 + 144);
              if (v212) {
                v212(v209, 0, 0, &v454, &source);
              }
              CMTimeValue v213 = source.start.value;
              __int16 v214 = (const void *)v454.source.start.value;
              if (!source.start.value && v454.source.start.value)
              {
                uint64_t CMBaseObject = CMByteStreamGetCMBaseObject();
                uint64_t v216 = *(void *)(CMBaseObjectGetVTable() + 8);
                if (v216) {
                  uint64_t v217 = v216;
                }
                else {
                  uint64_t v217 = 0;
                }
                CFTypeRef v218 = *(void (**)(uint64_t, uint64_t, uint64_t, CMTimeRange *))(v217 + 48);
                if (v218) {
                  v218(CMBaseObject, v382, v377, &source);
                }
                __int16 v214 = (const void *)v454.source.start.value;
                CMTimeValue v213 = source.start.value;
              }
              *(void *)(v202 + 16) = v213;
              if (v214) {
                CFRelease(v214);
              }
              int v207 = value;
            }
            CFIndex v219 = v207[8];
            if (v219 == -1 || (__int16 v220 = (uint64_t *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 64), v219)) == 0) {
              uint64_t v388 = 0;
            }
            else {
              uint64_t v388 = *v220;
            }
            if (!*(unsigned char *)(v202 + 145)) {
              break;
            }
LABEL_326:
            if (++v198 == v384)
            {
              CFIndex v198 = 0;
              BOOL v36 = v201 == 0;
              int v201 = 1;
              if (!v36) {
                goto LABEL_395;
              }
            }
          }
          while (2)
          {
            time1.start.CMTimeValue value = 0;
            MovieTrackGetMediaDuration(*((void *)value + 2), (uint64_t)&v454);
            CMTimeValue v436 = v454.source.start.value;
            CMTimeFlags v222 = v454.source.start.flags;
            CMTimeScale timescale = v454.source.start.timescale;
            if (v454.source.start.flags)
            {
              CMTimeEpoch v223 = v454.source.start.epoch;
              *(_OWORD *)&v454.source.start.CMTimeValue value = *(_OWORD *)(v202 + 112);
              v454.source.start.CMTimeEpoch epoch = *(void *)(v202 + 128);
              source.start.CMTimeValue value = v436;
              source.start.CMTimeScale timescale = timescale;
              source.start.CMTimeFlags flags = v222;
              source.start.CMTimeEpoch epoch = v223;
              if (CMTimeCompare(&v454.source.start, &source.start) < 1)
              {
LABEL_394:
                int v201 = 0;
                goto LABEL_326;
              }
            }
            uint64_t v224 = *(void *)(v202 + 48);
            uint64_t v225 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v225) {
              uint64_t v226 = v225;
            }
            else {
              uint64_t v226 = 0;
            }
            uint64_t v227 = *(uint64_t (**)(uint64_t, CMTimeMapping *))(v226 + 56);
            if (!v227) {
              goto LABEL_485;
            }
            uint64_t MutableMovieTrackObject = v227(v224, &target);
            if (MutableMovieTrackObject) {
              goto LABEL_538;
            }
            CFTypeRef v228 = *(void **)(v202 + 80);
            dur.start.CMTimeValue value = range.start.value;
            dur.start.CMTimeScale timescale = range.start.timescale;
            if (v228 && (CMTimeFlags v229 = range.start.flags, (range.start.flags & 1) != 0) && (v230 = v228[1]) != 0)
            {
              if (v230 >= 1)
              {
                uint64_t v231 = 0;
                uint64_t v232 = 0;
                CMTimeEpoch v233 = range.start.epoch;
                while (1)
                {
                  uint64_t v234 = *v228 + v231;
                  otherRange.start.CMTimeValue value = *(void *)v234;
                  otherRange.start.CMTimeScale timescale = *(_DWORD *)(v234 + 8);
                  CMTimeFlags v235 = *(_DWORD *)(v234 + 12);
                  if (v235)
                  {
                    CMTimeFlags v236 = *(_DWORD *)(v234 + 36);
                    if ((v236 & 1) != 0 && !*(void *)(v234 + 40))
                    {
                      CMTimeValue v237 = *(void *)(v234 + 24);
                      if ((v237 & 0x8000000000000000) == 0)
                      {
                        CMTimeEpoch v238 = *(void *)(v234 + 16);
                        CMTimeScale v239 = *(_DWORD *)(v234 + 32);
                        v454.source.start.CMTimeValue value = otherRange.start.value;
                        v454.source.start.CMTimeScale timescale = otherRange.start.timescale;
                        v454.source.start.CMTimeFlags flags = v235;
                        v454.source.start.CMTimeEpoch epoch = v238;
                        v454.source.duration.CMTimeValue value = v237;
                        v454.source.duration.CMTimeScale timescale = v239;
                        v454.source.duration.CMTimeFlags flags = v236;
                        v454.source.duration.CMTimeEpoch epoch = 0;
                        source.start.CMTimeValue value = dur.start.value;
                        source.start.CMTimeScale timescale = dur.start.timescale;
                        source.start.CMTimeFlags flags = v229;
                        source.start.CMTimeEpoch epoch = v233;
                        if (CMTimeRangeContainsTime(&v454.source, &source.start)) {
                          break;
                        }
                      }
                    }
                  }
                  ++v232;
                  v231 += 48;
                  if (v230 == v232) {
                    goto LABEL_350;
                  }
                }
                if (*(_DWORD *)value == 1936684398)
                {
                  if (target.source.start.timescale / target.source.start.value / 4 <= 1) {
                    CMTimeValue v249 = 1;
                  }
                  else {
                    CMTimeValue v249 = target.source.start.timescale / target.source.start.value / 4;
                  }
                }
                else
                {
                  CMTimeValue v249 = 1;
                }
                uint64_t v250 = *(void *)(v202 + 40);
                uint64_t v251 = *(void *)(v202 + 48);
                uint64_t v252 = *(void *)(CMBaseObjectGetVTable() + 16);
                if (v252) {
                  uint64_t v253 = v252;
                }
                else {
                  uint64_t v253 = 0;
                }
                uint64_t v254 = *(uint64_t (**)(uint64_t, uint64_t, CMTimeValue, CMTimeValue, uint64_t, void, uint64_t, void, void, void, void, CMSampleBufferRef *))(v253 + 8);
                if (!v254) {
                  goto LABEL_485;
                }
                uint64_t v255 = v254(v250, v251, v249, v249, 1, 0, 2, 0, 0, 0, 0, &sbuf);
                if (v255 == -12840)
                {
                  if (sbuf)
                  {
                    CFRelease(sbuf);
                    CMSampleBufferRef sbuf = 0;
                  }
LABEL_393:
                  *(unsigned char *)(v202 + 145) = 1;
                  CMTimeEpoch v200 = v398;
                  CMTimeEpoch v199 = v403;
                  goto LABEL_394;
                }
                uint64_t v9 = v255;
                if (v255) {
                  goto LABEL_539;
                }
                v256 = value;
                v257 = *(const void **)v394;
                if (!*(unsigned char *)(*((void *)value + 16) + 146) || !*((unsigned char *)value + 126))
                {
                  MovieInformationLockForWrite(*(void *)(v14 + 24));
                  CFTypeID v258 = value;
                  if (*(unsigned char *)(*((void *)value + 16) + 146))
                  {
                    uint64_t v9 = 0;
                  }
                  else
                  {
                    uint64_t v9 = setMediaTimeScaleIfNeeded((uint64_t)value, sbuf);
                    CFTypeID v258 = value;
                    *(unsigned char *)(*((void *)value + 16) + 146) = 1;
                  }
                  if (!*((unsigned char *)v258 + 126))
                  {
                    int v259 = *(_DWORD *)v258;
                    if (*(_DWORD *)v258 == 1986618469)
                    {
                      uint64_t v9 = setVideoTrackDimensionsIfNeeded(v258[2], a7, sbuf);
                      v260 = (int *)value;
                      *((unsigned char *)value + 126) = 1;
                      int v259 = *v260;
                    }
                    if (v259 == 1668047728)
                    {
                      uint64_t v9 = setClosedCaptionTrackDimensionsIfNeeded(*(void *)(v14 + 24));
                      *((unsigned char *)value + 126) = 1;
                    }
                  }
                  MovieInformationUnlockForWrite(*(void **)(v14 + 24));
                  if (v9) {
                    goto LABEL_539;
                  }
                  v256 = value;
                  v257 = *(const void **)v394;
                }
                uint64_t MutableMovieTrackObject = addSampleBufferToTrack_0((uint64_t)v256, v257, v388, v232, sbuf);
                if (MutableMovieTrackObject) {
                  goto LABEL_538;
                }
                CMItemCount NumSamples = CMSampleBufferGetNumSamples(sbuf);
                if (sbuf)
                {
                  CFRelease(sbuf);
                  CMSampleBufferRef sbuf = 0;
                }
                goto LABEL_351;
              }
            }
            else
            {
              FigSignalErrorAt();
            }
LABEL_350:
            CMItemCount NumSamples = 1;
LABEL_351:
            uint64_t v241 = *(void *)(v202 + 48);
            uint64_t v242 = *(void *)(CMBaseObjectGetVTable() + 16);
            if (v242) {
              uint64_t v243 = v242;
            }
            else {
              uint64_t v243 = 0;
            }
            int v244 = *(uint64_t (**)(uint64_t, CMItemCount, CMTimeRange *))(v243 + 168);
            if (!v244) {
              goto LABEL_485;
            }
            uint64_t MutableMovieTrackObject = v244(v241, NumSamples, &time1);
            if (MutableMovieTrackObject) {
              goto LABEL_538;
            }
            uint64_t v245 = *(void *)(v202 + 48);
            uint64_t v246 = *(void *)(CMBaseObjectGetVTable() + 16);
            uint64_t v247 = v246 ? v246 : 0;
            int v248 = *(uint64_t (**)(uint64_t, CMTimeRange *))(v247 + 48);
            if (!v248) {
              goto LABEL_485;
            }
            uint64_t MutableMovieTrackObject = v248(v245, &range);
            if (MutableMovieTrackObject) {
              goto LABEL_538;
            }
            if (time1.start.value != NumSamples) {
              goto LABEL_393;
            }
            int v201 = 0;
            CMTimeEpoch v200 = v398;
            CMTimeEpoch v199 = v403;
            if (*(unsigned char *)(v202 + 145)) {
              goto LABEL_326;
            }
            continue;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v377 = *MEMORY[0x1E4F1CF80];
  }
LABEL_395:
  CFArrayRef v261 = *(const __CFArray **)(v14 + 56);
  *(_OWORD *)&v435.CMTimeValue value = *(_OWORD *)a9;
  v435.CMTimeEpoch epoch = *(void *)(a9 + 16);
  if (!v261 || (CFIndex v262 = CFArrayGetCount(v261), v262 < 1))
  {
LABEL_535:
    uint64_t v9 = FigSignalErrorAt();
    if (v9) {
      goto LABEL_539;
    }
LABEL_446:
    CFIndex v308 = CFArrayGetCount(*(CFArrayRef *)(v14 + 56));
    v454.source.start.CMTimeValue value = 0;
    if (v308 < 1)
    {
      keysd = 0;
      float v310 = 0;
LABEL_487:
      free(keysd);
      free(v310);
      if (v454.source.start.value) {
        CFRelease((CFTypeRef)v454.source.start.value);
      }
      CFIndex v336 = CFArrayGetCount(*(CFArrayRef *)(v14 + 56));
      v454.source.start.CMTimeValue value = 0;
      CFIndex keyse = v336;
      if (v336 >= 1)
      {
        CFIndex v337 = 0;
        do
        {
          v338 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), v337);
          if (v338)
          {
            int v339 = v338;
            if (*((unsigned char *)v338 + 125))
            {
              uint64_t v340 = v338[16];
              if (v340)
              {
                if (*(void *)(v340 + 24))
                {
                  CFArrayRef v341 = (const __CFArray *)v454.source.start.value;
                  if (v454.source.start.value) {
                    goto LABEL_502;
                  }
                  uint64_t v342 = FigFormatReaderGetFigBaseObject(*(void *)(v340 + 24));
                  uint64_t v343 = *(void *)(CMBaseObjectGetVTable() + 8);
                  if (v343) {
                    uint64_t v344 = v343;
                  }
                  else {
                    uint64_t v344 = 0;
                  }
                  v345 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTimeMapping *))(v344 + 48);
                  if (v345) {
                    v345(v342, @"AlternateGroupArray", v377, &v454);
                  }
                  CFArrayRef v341 = (const __CFArray *)v454.source.start.value;
                  if (v454.source.start.value)
                  {
LABEL_502:
                    CFIndex v346 = CFArrayGetCount(v341);
                    if (v346 >= 1)
                    {
                      CFIndex v347 = v346;
                      CFIndex v348 = 0;
                      v406 = v339;
                      CFIndex v410 = v337;
                      CFIndex v401 = v346;
                      do
                      {
                        CFArrayRef v349 = (const __CFArray *)CFArrayGetValueAtIndex((CFArrayRef)v454.source.start.value, v348);
                        if (v349)
                        {
                          CFIndex v350 = CFArrayGetCount(v349);
                          if (v350 >= 1)
                          {
                            CFIndex v351 = v350;
                            uint64_t v352 = 0;
                            while (1)
                            {
                              LODWORD(source.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
                              FigCFArrayGetInt32AtIndex();
                              if (*(_DWORD *)(v340 + 4) == LODWORD(source.start.value)) {
                                break;
                              }
                              if (v351 == ++v352) {
                                goto LABEL_530;
                              }
                            }
                            CFIndex v353 = 0;
                            while (1)
                            {
                              v354 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), v353);
                              if (v354)
                              {
                                uint64_t v355 = v354[16];
                                if (v355)
                                {
                                  AlternateGroupuint64_t ID = MovieTrackGetAlternateGroupID(v354[2]);
                                  if (AlternateGroupID) {
                                    break;
                                  }
                                }
                              }
LABEL_518:
                              if (++v353 == keyse)
                              {
                                uint64_t v359 = v406[2];
                                CFIndex v360 = CFArrayGetCount(*(CFArrayRef *)(v14 + 56));
                                if (v360 < 1)
                                {
                                  __int16 v362 = 0;
                                  CFIndex v337 = v410;
                                }
                                else
                                {
                                  CFIndex v361 = v360;
                                  __int16 v362 = 0;
                                  CFIndex v363 = 0;
                                  CFIndex v337 = v410;
                                  do
                                  {
                                    v364 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), v363);
                                    if (v364)
                                    {
                                      int v365 = MovieTrackGetAlternateGroupID(v364[2]);
                                      if (v365 > v362) {
                                        __int16 v362 = v365;
                                      }
                                    }
                                    ++v363;
                                  }
                                  while (v361 != v363);
                                }
                                MovieTrackSetAlternateGroupID(v359, v362 + 1);
                                goto LABEL_529;
                              }
                            }
                            __int16 v357 = AlternateGroupID;
                            uint64_t v358 = 0;
                            while (1)
                            {
                              LODWORD(target.source.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
                              if (v352 != v358)
                              {
                                FigCFArrayGetInt32AtIndex();
                                if (*(_DWORD *)(v355 + 4) == LODWORD(target.source.start.value)) {
                                  break;
                                }
                              }
                              if (v351 == ++v358) {
                                goto LABEL_518;
                              }
                            }
                            MovieTrackSetAlternateGroupID(v406[2], v357);
                            CFIndex v337 = v410;
LABEL_529:
                            CFIndex v347 = v401;
                          }
                        }
LABEL_530:
                        ++v348;
                      }
                      while (v348 != v347);
                    }
                  }
                }
              }
            }
          }
          ++v337;
        }
        while (v337 != keyse);
        if (v454.source.start.value) {
          CFRelease((CFTypeRef)v454.source.start.value);
        }
      }
      uint64_t v9 = 0;
      goto LABEL_539;
    }
    CFIndex v309 = v308;
    float v310 = 0;
    keysd = 0;
    CFIndex v311 = 0;
    *(void *)v396 = v308;
    while (1)
    {
      float v312 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), v311);
      if (v312)
      {
        if (*((unsigned char *)v312 + 125))
        {
          uint64_t v313 = v312[16];
          if (v313)
          {
            if (*(void *)(v313 + 24))
            {
              CFDictionaryRef v314 = (const __CFDictionary *)v454.source.start.value;
              if (v454.source.start.value) {
                goto LABEL_453;
              }
              uint64_t v329 = FigFormatReaderGetFigBaseObject(*(void *)(v313 + 24));
              uint64_t v330 = *(void *)(CMBaseObjectGetVTable() + 8);
              if (v330) {
                uint64_t v331 = v330;
              }
              else {
                uint64_t v331 = 0;
              }
              v332 = *(void (**)(uint64_t, __CFString *, uint64_t, CMTimeMapping *))(v331 + 48);
              if (v332) {
                v332(v329, @"TrackReferenceDictionary", v377, &v454);
              }
              if (v454.source.start.value)
              {
                size_t v333 = CFDictionaryGetCount((CFDictionaryRef)v454.source.start.value);
                if (v333) {
                  break;
                }
              }
            }
          }
        }
      }
LABEL_483:
      if (++v311 == v309) {
        goto LABEL_487;
      }
    }
    size_t v334 = v333;
    v335 = (const void **)malloc_type_calloc(v333, 8uLL, 0x6004044C4A2DFuLL);
    float v310 = malloc_type_calloc(v334, 8uLL, 0x6004044C4A2DFuLL);
    CFDictionaryRef v314 = (const __CFDictionary *)v454.source.start.value;
    keysd = v335;
    if (v335 && v310)
    {
      CFDictionaryGetKeysAndValues((CFDictionaryRef)v454.source.start.value, v335, (const void **)v310);
      CFDictionaryRef v314 = (const __CFDictionary *)v454.source.start.value;
    }
LABEL_453:
    CFIndex v409 = CFDictionaryGetCount(v314);
    if (keysd && v310 && v409 >= 1)
    {
      CFIndex v400 = v311;
      v405 = v310;
      for (uint64_t k = 0; k != v409; ++k)
      {
        CFStringRef v316 = (const __CFString *)keysd[k];
        CFIndex v317 = CFArrayGetCount(*((CFArrayRef *)v310 + k));
        if (v317 >= 1)
        {
          CFIndex v318 = v317;
          for (CFIndex m = 0; m < v318; m += 2)
          {
            LODWORD(source.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
            LODWORD(target.source.start.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
            FigCFArrayGetInt32AtIndex();
            FigCFArrayGetInt32AtIndex();
            if (*(_DWORD *)(v313 + 4) == LODWORD(target.source.start.value))
            {
              int v320 = *(_DWORD *)(v313 + 152);
              CFIndex v321 = CFArrayGetCount(*(CFArrayRef *)(v14 + 72));
              if (v321 >= 1)
              {
                CFIndex v322 = v321;
                CFIndex v323 = 0;
                while (1)
                {
                  v324 = CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 72), v323);
                  if (v324[1] == LODWORD(source.start.value)) {
                    break;
                  }
                  if (v322 == ++v323) {
                    goto LABEL_470;
                  }
                }
                int v325 = v324[38];
                if (v325) {
                  BOOL v326 = v320 == 0;
                }
                else {
                  BOOL v326 = 1;
                }
                if (!v326)
                {
                  CFDictionaryRef v327 = *(uint64_t **)(v14 + 24);
                  int v328 = convertCFStringToOSType(v316);
                  MovieInformationAddOneTrackReference(v327, v328, v325, v320);
                }
              }
            }
LABEL_470:
            ;
          }
        }
        float v310 = v405;
      }
      CFIndex v309 = *(void *)v396;
      CFIndex v311 = v400;
    }
    goto LABEL_483;
  }
  CFIndex v263 = v262;
  CFIndex v264 = 0;
  uint64_t v9 = 0;
  uint64_t v265 = MEMORY[0x1E4F1FA00];
  CMTimeEpoch v379 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
  *(void *)v389 = *(void *)(MEMORY[0x1E4F1FA00] + 16);
  CMTimeValue v266 = *MEMORY[0x1E4F1FA48];
  CMTimeFlags v373 = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 12);
  CMTimeScale keysc = *(_DWORD *)(MEMORY[0x1E4F1FA48] + 8);
  CFIndex v375 = v262;
  CFArrayRef v376 = v261;
  CMTimeValue v374 = *MEMORY[0x1E4F1FA48];
  do
  {
    uint64_t v267 = CFArrayGetValueAtIndex(v261, v264);
    rhs.CMTimeValue value = v266;
    rhs.CMTimeScale timescale = keysc;
    if (!v267) {
      goto LABEL_535;
    }
    CFTypeID v268 = (void *)v267[16];
    if (v268)
    {
      uint64_t v269 = v268[8];
      if (v269)
      {
        uint64_t v270 = v268[9];
        if (v270)
        {
          uint64_t v271 = *(void *)(v269 + 8);
          uint64_t v272 = *(void *)(v270 + 8);
          BOOL v273 = !v271 || v272 == 0;
          if (!v273 && v271 == v272)
          {
            uint64_t v275 = v267[1];
            uint64_t v392 = v267[2];
            uint64_t v9 = MovieInformationLockForWrite(v275);
            if (!v9)
            {
              v408 = (CMTime *)v275;
              if (v271 >= 1)
              {
                uint64_t v276 = 0;
                uint64_t v9 = 0;
                uint64_t v277 = 88;
                CMTimeEpoch v381 = v379;
                CMTimeFlags v383 = v373;
                CMTimeEpoch v278 = *(void *)v389;
                p_CMTimeValue value = (void *)v275;
                while (1)
                {
                  v280 = (void *)v268[8];
                  if (v280)
                  {
                    float v281 = (void *)(*v280 + v277);
                    *(_OWORD *)&v434.CMTimeValue value = *(_OWORD *)(v281 - 11);
                    CMTimeEpoch v282 = *(v281 - 9);
                    *(_OWORD *)&dur.start.CMTimeValue value = *((_OWORD *)v281 - 4);
                    dur.start.CMTimeEpoch epoch = *(v281 - 6);
                    v449.CMTimeValue value = *(v281 - 5);
                    uint64_t v283 = (CMTimeFlags *)v281 - 7;
                    v449.CMTimeScale timescale = *((_DWORD *)v281 - 8);
                    v284 = v281 - 3;
                    v285 = v281 - 2;
                    v286 = (CMTimeScale *)(v281 - 1);
                    CFTypeRef v287 = (CMTimeFlags *)v281 - 1;
                  }
                  else
                  {
                    *(_OWORD *)&v434.CMTimeValue value = *(_OWORD *)v265;
                    *(_OWORD *)&dur.start.CMTimeValue value = *(_OWORD *)(v265 + 24);
                    CMTimeValue v288 = *(void *)(v265 + 48);
                    dur.start.CMTimeEpoch epoch = *(void *)(v265 + 40);
                    v449.CMTimeValue value = v288;
                    float v281 = (void *)(v265 + 88);
                    CFTypeRef v287 = (CMTimeFlags *)(v265 + 84);
                    v286 = (CMTimeScale *)(v265 + 80);
                    v449.CMTimeScale timescale = *(_DWORD *)(v265 + 56);
                    v285 = (CMTimeValue *)(v265 + 72);
                    v284 = (CMTimeEpoch *)(v265 + 64);
                    uint64_t v283 = (CMTimeFlags *)(v265 + 60);
                    CMTimeEpoch v282 = v278;
                  }
                  uint64_t v289 = *v281;
                  CMTimeFlags v290 = *v287;
                  CMTimeScale v291 = *v286;
                  CMTimeValue v292 = *v285;
                  CMTimeEpoch v293 = *v284;
                  CMTimeFlags v294 = *v283;
                  v295 = (void *)v268[9];
                  if (v295)
                  {
                    v296 = (void *)(*v295 + v277);
                    *(_OWORD *)&v454.source.start.CMTimeValue value = *(_OWORD *)(v296 - 11);
                    *(_OWORD *)&v454.source.start.CMTimeEpoch epoch = *(_OWORD *)(v296 - 9);
                    *(_OWORD *)&v454.source.duration.CMTimeScale timescale = *(_OWORD *)(v296 - 7);
                    *(_OWORD *)((char *)&v454.source.duration.epoch + 4) = *(_OWORD *)((char *)v296 - 44);
                    v297 = (_DWORD *)v296 - 7;
                    uint64_t v298 = v296 - 2;
                    v299 = (_DWORD *)v296 - 1;
                    if (v294) {
                      goto LABEL_420;
                    }
                  }
                  else
                  {
                    long long v300 = *(_OWORD *)(v265 + 16);
                    *(_OWORD *)&v454.source.start.CMTimeValue value = *(_OWORD *)v265;
                    *(_OWORD *)&v454.source.start.CMTimeEpoch epoch = v300;
                    *(_OWORD *)&v454.source.duration.CMTimeScale timescale = *(_OWORD *)(v265 + 32);
                    *(_OWORD *)((char *)&v454.source.duration.epoch + 4) = *(_OWORD *)(v265 + 44);
                    v296 = (void *)(v265 + 88);
                    v299 = (_DWORD *)(v265 + 84);
                    uint64_t v298 = (void *)(v265 + 72);
                    v297 = (_DWORD *)(v265 + 60);
                    if (v294)
                    {
LABEL_420:
                      if ((v290 & 1) != 0
                        && !v289
                        && (v292 & 0x8000000000000000) == 0
                        && (*v297 & 1) != 0
                        && (*v299 & 1) != 0
                        && !*v296
                        && (*v298 & 0x8000000000000000) == 0)
                      {
                        *(_OWORD *)&time1.start.CMTimeValue value = *MEMORY[0x1E4F1F9F8];
                        time1.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
                        long long v301 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
                        *(_OWORD *)&source.start.CMTimeValue value = *MEMORY[0x1E4F1FA20];
                        *(_OWORD *)&source.start.CMTimeEpoch epoch = v301;
                        *(_OWORD *)&source.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
                        duration.CMTimeValue value = *MEMORY[0x1E4F1FA20];
                        duration.CMTimeScale timescale = *(_DWORD *)(MEMORY[0x1E4F1FA20] + 8);
                        *(_OWORD *)&time2.start.CMTimeValue value = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 24);
                        time2.start.CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1FA20] + 40);
                        *(_OWORD *)&target.source.start.CMTimeValue value = *(_OWORD *)&source.start.value;
                        *(_OWORD *)&target.source.start.CMTimeEpoch epoch = v301;
                        *(_OWORD *)&target.source.duration.CMTimeScale timescale = *(_OWORD *)&source.duration.timescale;
                        if (v277 == 88)
                        {
                          rhs.CMTimeValue value = v449.value;
                          rhs.CMTimeScale timescale = v449.timescale;
                          CMTimeFlags v383 = v294;
                          CMTimeEpoch v381 = v293;
                        }
                        CMTimeValue v399 = v292;
                        CMTimeScale v404 = v291;
                        if (v282)
                        {
                          CMTimeEpoch v395 = v293;
                          v450.CMTimeValue value = v449.value;
                          v450.CMTimeScale timescale = v449.timescale;
                        }
                        else
                        {
                          otherRange.start.CMTimeValue value = v449.value;
                          otherRange.start.CMTimeScale timescale = v449.timescale;
                          otherRange.start.CMTimeFlags flags = v294;
                          otherRange.start.CMTimeEpoch epoch = v293;
                          v430.start.CMTimeValue value = rhs.value;
                          v430.start.CMTimeScale timescale = rhs.timescale;
                          v430.start.CMTimeFlags flags = v383;
                          v430.start.CMTimeEpoch epoch = v381;
                          CMTimeSubtract(&range.start, &otherRange.start, &v430.start);
                          CMTimeEpoch v282 = 0;
                          v450.CMTimeValue value = range.start.value;
                          CMTimeFlags v294 = range.start.flags;
                          v450.CMTimeScale timescale = range.start.timescale;
                          CMTimeEpoch v395 = range.start.epoch;
                        }
                        *(_OWORD *)&range.start.CMTimeValue value = *(_OWORD *)&v434.value;
                        range.start.CMTimeEpoch epoch = v282;
                        *(_OWORD *)&otherRange.start.CMTimeValue value = *(_OWORD *)&v454.source.start.value;
                        otherRange.start.CMTimeEpoch epoch = v454.source.start.epoch;
                        CMTimeSubtract(&time1.start, &range.start, &otherRange.start);
                        CFTypeRef v302 = (void *)v268[11];
                        if (v302) {
                          uint64_t v303 = (CMTimeRange *)(*v302 + v276);
                        }
                        else {
                          uint64_t v303 = (CMTimeRange *)MEMORY[0x1E4F1FA20];
                        }
                        CMTimeRange source = *v303;
                        *(_OWORD *)&otherRange.start.CMTimeValue value = *(_OWORD *)&source.start.value;
                        otherRange.start.CMTimeEpoch epoch = source.start.epoch;
                        *(_OWORD *)&v430.start.CMTimeValue value = *(_OWORD *)&time1.start.value;
                        v430.start.CMTimeEpoch epoch = time1.start.epoch;
                        CMTimeAdd(&v427.start, &otherRange.start, &v430.start);
                        *(_OWORD *)&otherRange.start.CMTimeValue value = *(_OWORD *)&dur.start.value;
                        otherRange.start.CMTimeEpoch epoch = dur.start.epoch;
                        CMTimeRangeMake(&range, &v427.start, &otherRange.start);
                        duration.CMTimeValue value = range.start.value;
                        CMTimeFlags v304 = range.start.flags;
                        duration.CMTimeScale timescale = range.start.timescale;
                        CMTimeEpoch v386 = range.start.epoch;
                        time2.CMTimeRange start = range.duration;
                        range.CMTimeRange start = v435;
                        otherRange.start.CMTimeValue value = v450.value;
                        otherRange.start.CMTimeScale timescale = v450.timescale;
                        otherRange.start.CMTimeFlags flags = v294;
                        CMTimeFlags v305 = v304;
                        otherRange.start.CMTimeEpoch epoch = v395;
                        CMTimeAdd(&start.start, &range.start, &otherRange.start);
                        range.start.CMTimeValue value = v399;
                        range.start.CMTimeScale timescale = v404;
                        range.start.CMTimeFlags flags = v290;
                        range.start.CMTimeEpoch epoch = 0;
                        CMTimeRangeMake(&target.source, &start.start, &range.start);
                        if ((v305 & 0x1D) == 1)
                        {
                          range.start.CMTimeValue value = duration.value;
                          range.start.CMTimeScale timescale = duration.timescale;
                          range.start.CMTimeFlags flags = v305;
                          range.start.CMTimeEpoch epoch = v386;
                          *(_OWORD *)&otherRange.start.CMTimeValue value = *MEMORY[0x1E4F1FA48];
                          otherRange.start.CMTimeEpoch epoch = v379;
                          int32_t v306 = CMTimeCompare(&range.start, &otherRange.start);
                          p_CMTimeValue value = &v408->value;
                          if ((v306 & 0x80000000) == 0)
                          {
                            CMTimeRange range = target.source;
                            otherRange.start.CMTimeValue value = duration.value;
                            otherRange.start.CMTimeScale timescale = duration.timescale;
                            otherRange.start.CMTimeFlags flags = v305;
                            otherRange.start.CMTimeEpoch epoch = v386;
                            otherRange.CMTime duration = time2.start;
                            uint64_t inserted = MovieTrackInsertMediaSegment(v408, v392, &range, (long long *)&otherRange.start.value);
                            p_CMTimeValue value = &v408->value;
                            uint64_t v9 = inserted;
                          }
                        }
                        else
                        {
                          p_CMTimeValue value = &v408->value;
                        }
                        CMTimeEpoch v278 = *(void *)v389;
                      }
                    }
                  }
                  v276 += 48;
                  v277 += 96;
                  if (!--v271) {
                    goto LABEL_443;
                  }
                }
              }
              uint64_t v9 = 0;
              p_CMTimeValue value = (void *)v275;
LABEL_443:
              MovieInformationUnlockForWrite(p_value);
              CFIndex v263 = v375;
              CFArrayRef v261 = v376;
              CMTimeValue v266 = v374;
            }
          }
        }
      }
    }
    ++v264;
  }
  while (v264 != v263);
  if (!v9) {
    goto LABEL_446;
  }
LABEL_539:
  CFArrayRef v366 = *(const __CFArray **)(v14 + 56);
  if (v366)
  {
    CFIndex v367 = CFArrayGetCount(v366);
    if (v367 >= 1)
    {
      CFIndex v368 = v367;
      for (CFIndex n = 0; n != v368; ++n)
      {
        long long v370 = (void *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v14 + 56), n);
        CMTimeValue value = v370;
        if (v370)
        {
          if (*((unsigned char *)v370 + 124)) {
            *((void *)v370 + 16) = 0;
          }
          *((unsigned char *)v370 + 125) = 0;
        }
      }
    }
  }
  if (!v390) {
    MEMORY[0x19970E930](*(void *)(v14 + 48));
  }
LABEL_549:
  if (v420) {
    CFRelease(v420);
  }
  if (sbuf) {
    CFRelease(sbuf);
  }
  if (cf) {
    CFRelease(cf);
  }
  return v9;
}

__n128 appendToTimeRangeArray(char **a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = a1[1];
    CFAllocatorRef v5 = a1[2];
    CFIndex v6 = *a1;
    if (v4 == v5)
    {
      a1[2] = (char *)(2 * (void)v4);
      CFIndex v6 = (char *)malloc_type_realloc(v6, 96 * (void)v4, 0x1000040EED21634uLL);
      *a1 = v6;
      uint64_t v4 = a1[1];
    }
    a1[1] = v4 + 1;
    long long v7 = &v6[48 * (void)v4];
    __n128 result = *(__n128 *)a2;
    long long v9 = *(_OWORD *)(a2 + 32);
    *((_OWORD *)v7 + 1) = *(_OWORD *)(a2 + 16);
    *((_OWORD *)v7 + 2) = v9;
    *(__n128 *)long long v7 = result;
  }
  return result;
}

__n128 appendToTimeMappingArray(char **a1, uint64_t a2)
{
  if (a1)
  {
    uint64_t v4 = a1[1];
    CFAllocatorRef v5 = a1[2];
    CFIndex v6 = *a1;
    if (v4 == v5)
    {
      a1[2] = (char *)(2 * (void)v4);
      CFIndex v6 = (char *)malloc_type_realloc(v6, 192 * (void)v4, 0x1000040565EDBD2uLL);
      *a1 = v6;
      uint64_t v4 = a1[1];
    }
    a1[1] = v4 + 1;
    long long v7 = &v6[96 * (void)v4];
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)long long v7 = *(_OWORD *)a2;
    *((_OWORD *)v7 + 1) = v8;
    __n128 result = *(__n128 *)(a2 + 32);
    long long v10 = *(_OWORD *)(a2 + 48);
    long long v11 = *(_OWORD *)(a2 + 80);
    *((_OWORD *)v7 + 4) = *(_OWORD *)(a2 + 64);
    *((_OWORD *)v7 + 5) = v11;
    *((__n128 *)v7 + 2) = result;
    *((_OWORD *)v7 + 3) = v10;
  }
  return result;
}

uint64_t FigNWPathEvaluatorCreate(uint64_t a1, const __CFURL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  if (a7 && a4 && a6 && a5)
  {
    if (a2 && !FigCFHTTPIsHTTPBasedURL(a2)) {
      return 4294954516;
    }
    if (FigNwPathEvaluatorGetClassID_sRegisterFigNwPathEvaluatorTypeOnce != -1) {
      dispatch_once(&FigNwPathEvaluatorGetClassID_sRegisterFigNwPathEvaluatorTypeOnce, &__block_literal_global_59);
    }
    CMDerivedObjectCreate();
  }
  uint64_t v12 = FigSignalErrorAt();
  if (!v12) {
    *a7 = 0;
  }
  return v12;
}

void __FigNWPathEvaluatorCreate_block_invoke(uint64_t a1, NSObject *a2)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  uint64_t v16 = 0;
  uint64_t v9 = 0;
  long long v10 = &v9;
  uint64_t v11 = 0x2000000000;
  uint64_t v12 = 0;
  unint64_t v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v3)
  {
    uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
    CFAllocatorRef v5 = *DerivedStorage;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __fnpe_EvaluatorHandleNetworkChange_block_invoke;
    block[3] = &unk_1E57A1668;
    void block[5] = &v9;
    void block[6] = DerivedStorage;
    block[4] = &v13;
    dispatch_sync(v5, block);
    CFDictionaryRef v6 = fnpe_CopyCurrentPathInformationFromNWPath(a2);
    if (v6) {
      ((void (*)(uint64_t, CFDictionaryRef))v10[3])(v14[3], v6);
    }
  }
  else
  {
    CFDictionaryRef v6 = 0;
  }
  long long v7 = (const void *)v14[3];
  if (v7) {
    CFRelease(v7);
  }
  if (v6) {
    CFRelease(v6);
  }
  if (v3) {
    CFRelease(v3);
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
}

void __FigNWPathEvaluatorCreate_block_invoke_2(uint64_t a1)
{
  CFStringRef v1 = *(const void **)(a1 + 32);
  if (v1) {
    CFRelease(v1);
  }
}

void figNwPathEvaluatorFinalize()
{
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 8))
  {
    nw_path_evaluator_cancel();
    CFStringRef v1 = *(void **)(DerivedStorage + 8);
    if (v1) {
      nw_release(v1);
    }
    *(void *)(DerivedStorage + 8) = 0;
  }
  uint64_t v2 = *(const void **)(DerivedStorage + 32);
  if (v2) {
    CFRelease(v2);
  }
  unint64_t v3 = *(NSObject **)(DerivedStorage + 40);
  if (v3)
  {
    dispatch_release(v3);
    *(void *)(DerivedStorage + 40) = 0;
  }
  if (*(void *)DerivedStorage)
  {
    dispatch_release(*(dispatch_object_t *)DerivedStorage);
    *(void *)uint64_t DerivedStorage = 0;
  }
}

uint64_t figNwPathEvaluatorCopyProperty(uint64_t a1, CFTypeRef cf1, uint64_t a3, void *a4)
{
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2000000000;
  int v17 = 0;
  if (a1 && a4)
  {
    if (CFEqual(cf1, @"kFigNetworkPathEvaluatorProperty_EstimatedDownloadThroughput"))
    {
      uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
      uint64_t v10 = 0;
      uint64_t v11 = &v10;
      uint64_t v12 = 0x2000000000;
      uint64_t v13 = 0;
      CFDictionaryRef v6 = *DerivedStorage;
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __figNwPathEvaluatorCopyProperty_block_invoke;
      block[3] = &unk_1E57A15F8;
      block[4] = &v10;
      void block[5] = &v14;
      void block[6] = DerivedStorage;
      dispatch_sync(v6, block);
      if (!*((_DWORD *)v15 + 6)) {
        *a4 = v11[3];
      }
      _Block_object_dispose(&v10, 8);
    }
    else
    {
      *((_DWORD *)v15 + 6) = FigSignalErrorAt();
    }
  }
  else
  {
    FigSignalErrorAt();
  }
  uint64_t v7 = *((unsigned int *)v15 + 6);
  _Block_object_dispose(&v14, 8);
  return v7;
}

void __figNwPathEvaluatorCopyProperty_block_invoke(uint64_t a1)
{
  uint64_t v2 = nw_path_evaluator_copy_path();
  if (v2)
  {
    unint64_t v3 = (void *)v2;
    nw_path_get_estimated_download_throughput();
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = FigCFNumberCreateUInt64();
    if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
      *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -12786;
    }
    nw_release(v3);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = -12783;
  }
}

CFDictionaryRef figNwPathEvaluatorCopyCurrentPathInformation(uint64_t a1)
{
  uint64_t v7 = 0;
  long long v8 = &v7;
  uint64_t v9 = 0x2000000000;
  uint64_t v10 = 0;
  if (a1)
  {
    uint64_t DerivedStorage = (NSObject **)CMBaseObjectGetDerivedStorage();
    uint64_t v2 = *DerivedStorage;
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 0x40000000;
    v6[2] = __figNwPathEvaluatorCopyCurrentPathInformation_block_invoke;
    void v6[3] = &unk_1E57A1620;
    v6[4] = &v7;
    v6[5] = DerivedStorage;
    dispatch_sync(v2, v6);
    CFDictionaryRef v3 = fnpe_CopyCurrentPathInformationFromNWPath(v8[3]);
  }
  else
  {
    FigSignalErrorAt();
    CFDictionaryRef v3 = 0;
  }
  uint64_t v4 = (void *)v8[3];
  if (v4) {
    nw_release(v4);
  }
  _Block_object_dispose(&v7, 8);
  return v3;
}

uint64_t __figNwPathEvaluatorCopyCurrentPathInformation_block_invoke(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(a1 + 40) + 8);
  if (result)
  {
    uint64_t result = nw_path_evaluator_copy_path();
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  }
  return result;
}

CFDictionaryRef fnpe_CopyCurrentPathInformationFromNWPath(NSObject *a1)
{
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  if (Mutable)
  {
    uint64_t v4 = Mutable;
    if (a1)
    {
      CFAllocatorRef v5 = (void *)nw_path_copy_interface();
      FigNetworkInterfaceGetTypeFromNWInterface();
      if (v5) {
        nw_release(v5);
      }
      FigNetworkPathInformationSetInterfaceType();
      BOOL v6 = ((nw_path_get_status(a1) - 1) & 0xFFFFFFFD) == 0;
      FigNetworkPathInformationSetHostIsReachable(v4, v6);
      int is_local = nw_path_is_local();
      FigNetworkPathInformationSetHostIsLocal(v4, is_local);
      int v8 = ((nw_path_get_status(a1) - 1) & 0xFFFFFFFD) == 0
        && nw_path_uses_interface_type(a1, nw_interface_type_cellular);
      FigNetworkPathInformationSetDoesUseCellular(v4, v8);
      BOOL is_expensive = nw_path_is_expensive(a1);
    }
    else
    {
      FigNetworkPathInformationSetInterfaceType();
      FigNetworkPathInformationSetHostIsReachable(v4, 0);
      FigNetworkPathInformationSetHostIsLocal(v4, 0);
      FigSignalErrorAt();
      FigNetworkPathInformationSetDoesUseCellular(v4, 0);
      FigSignalErrorAt();
      BOOL is_expensive = 0;
    }
    FigNetworkPathInformationSetExpensive(v4, is_expensive);
    CFDictionaryRef Copy = CFDictionaryCreateCopy(v2, v4);
    CFRelease(v4);
    return Copy;
  }
  else
  {
    FigSignalErrorAt();
    return 0;
  }
}

uint64_t __FigNwPathEvaluatorGetClassID_block_invoke()
{
  CMBaseGetClassID();

  return FigBaseClassRegisterClass();
}

CFStringRef figNwPathEvaluatorBaseCopyFormattingDesc(uint64_t a1)
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, @"[FigNWPathEvaluator %p]", a1);
}

uint64_t FigPlaybackCoordinatorCreate()
{
  FigNote_AllowInternalDefaultLogs();
  fig_note_initialize_category_with_default_work_cf();
  fig_note_initialize_category_with_default_work_cf();
  FigPlaybackCoordinatorGetClassID();
  uint64_t result = CMDerivedObjectCreate();
  if (!result) {
    return FigSignalErrorAt();
  }
  return result;
}

uint64_t FigPlayerCopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t FigBaseObject = FigPlayerGetFigBaseObject(a1);
  uint64_t VTable = CMBaseObjectGetVTable();
  uint64_t v11 = *(void *)(VTable + 8);
  uint64_t result = VTable + 8;
  uint64_t v10 = v11;
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v13)
  {
    return v13(FigBaseObject, a2, a3, a4);
  }
  return result;
}

void playbackCoordinator_performStartupTaskNegotiatingTimingWithCoordinatedPlaybackGroup(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1)
  {
    FigSignalErrorAt();
    a5(a4, a2, 1);
    return;
  }
  uint64_t v9 = DerivedStorage;
  FigCFDictionaryGetFloat32IfPresent();
  playbackCoordinator_completePendingStartupTask((uint64_t)a1, 0);
  FigCFDictionaryGetValue();
  *(void *)(v9 + 184) = a5;
  *(void *)(v9 + 192) = a4;
  *(_DWORD *)(v9 + 176) = a2;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(void *)(v9 + 200) = CFDateCreate(v10, Current);
  if (!*(unsigned char *)(v9 + 96))
  {
    if (*(void *)(v9 + 296)) {
      playbackCoordinator_completePendingStartupTask((uint64_t)a1, 1);
    }
    if (!FigCFEqual()) {
      return;
    }
    uint64_t v47 = -1;
    int v46 = 0;
    CMTime type = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
    CMTime v44 = type;
    float v43 = 0.0;
    char v42 = 0;
    FigPlaybackCoordinatorGetCMBaseObject(a1);
    uint64_t v14 = CMBaseObjectGetDerivedStorage();
    long long v15 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
    v41[0] = *MEMORY[0x1E4F1FA20];
    v41[1] = v15;
    v41[2] = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
    if (*(_DWORD *)(v14 + 176) != a2) {
      return;
    }
    uint64_t v16 = v14;
    if (!*(void *)(v14 + 40) || *(_DWORD *)(v14 + 56) != 10000) {
      return;
    }
    FigCFDictionaryGetInt32IfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    FigCFDictionaryGetFloat32IfPresent();
    FigCFDictionaryGetBooleanIfPresent();
    FigCFDictionaryGetCMTimeIfPresent();
    if (v43 != 0.0 && playbackCoordinator_systemEventSuspensionsActive((uint64_t)a1))
    {
      uint64_t v18 = FigCFWeakReferenceHolderCopyReferencedObject();
      if (dword_1EB2AEA78)
      {
        os_log_and_send_and_compose_flags_and_os_log_CMTime type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      MEMORY[0x19970E910](*(void *)(v16 + 64));
      BOOL v21 = playbackCoordinator_systemEventSuspensionsActive((uint64_t)a1);
      BOOL v22 = v21;
      if (v21) {
        playbackCoordinator_endAllSystemEventSuspensions((uint64_t)a1);
      }
      if (FigTimelineCoordinatorIsSuspended())
      {
        if (dword_1EB2AEA78)
        {
          CFIndex v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        playbackCoordinator_completePendingStartupTask((uint64_t)a1, 1);
        MEMORY[0x19970E930](*(void *)(v16 + 64));
      }
      else
      {
        *(unsigned char *)(v16 + 320) = v22;
        MEMORY[0x19970E930](*(void *)(v16 + 64));
        if (*(void *)(v16 + 216))
        {
          if (dword_1EB2AEA78)
          {
            CFIndex v24 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          figPlaybackCoordinator_completePendingCommandAndRecordNewCallback((uint64_t)a1, 0, 0, 0);
          if (!v18) {
            return;
          }
LABEL_46:
          int v17 = (const void *)v18;
          goto LABEL_14;
        }
      }
      if (!v18) {
        return;
      }
      goto LABEL_46;
    }
    if (FigTimelineCoordinatorIsSuspended())
    {
      if (dword_1EB2AEA78) {
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    if (*(float *)(v16 + 168) == v43)
    {
      if (!*(unsigned char *)(v16 + 104))
      {
        CMTime time = v44;
        if (!figPlaybackCoordinator_isTimeInInterstitialRange((uint64_t)a1, &time, v41))
        {
          if (dword_1EB2AEA78)
          {
            uint64_t v33 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
            os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
            fig_log_call_emit_and_clean_up_after_send_and_compose();
          }
          return;
        }
        if (!dword_1EB2AEA78) {
          goto LABEL_41;
        }
        goto LABEL_40;
      }
      if (!*(unsigned char *)(v16 + 232))
      {
        if (dword_1EB2AEA78)
        {
          CMTimeValue v32 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        uint64_t v26 = (uint64_t)a1;
        uint64_t v27 = 0;
        goto LABEL_42;
      }
      if (*(unsigned char *)(v16 + 120) & 1) != 0 && *(float *)(v16 + 156) != 0.0 && (*(unsigned char *)(v16 + 144))
      {
        uint64_t v37 = malloc_type_malloc(0x10uLL, 0x10200403A5D3213uLL);
        *(void *)uint64_t v37 = CFRetain(a1);
        v37[2] = a2;
        if (dword_1EB2AEA78)
        {
          uint64_t v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        dispatch_async_f(*(dispatch_queue_t *)(v16 + 272), v37, (dispatch_function_t)playbackCoordinator_setReferenceTimebaseAndCompleteStartupTask);
        return;
      }
      if (dword_1EB2AEA78)
      {
LABEL_40:
        CFAllocatorRef v25 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
LABEL_41:
      uint64_t v26 = (uint64_t)a1;
      uint64_t v27 = 1;
LABEL_42:
      playbackCoordinator_completePendingStartupTask(v26, v27);
      return;
    }
    if (dword_1EB2AEA78)
    {
      uint64_t v20 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    MEMORY[0x19970E910](*(void *)(v16 + 208));
    if (*(unsigned char *)(v16 + 264))
    {
      if (dword_1EB2AEA78)
      {
        uint64_t v28 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playbackCoordinator_completePendingStartupTask((uint64_t)a1, 0);
      uint64_t v30 = *(void *)(v16 + 208);
LABEL_63:
      MEMORY[0x19970E930](v30);
      return;
    }
    MEMORY[0x19970E930](*(void *)(v16 + 208));
    MEMORY[0x19970E910](*(void *)(v16 + 64));
    if (*(unsigned char *)(v16 + 320))
    {
      if (dword_1EB2AEA78)
      {
        uint64_t v29 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      playbackCoordinator_completePendingStartupTask((uint64_t)a1, 0);
      uint64_t v30 = *(void *)(v16 + 64);
      goto LABEL_63;
    }
    MEMORY[0x19970E930](*(void *)(v16 + 64));
    if (*(void *)(v16 + 216))
    {
      if (dword_1EB2AEA78)
      {
        uint64_t v31 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      figPlaybackCoordinator_completePendingCommandAndRecordNewCallback((uint64_t)a1, 0, 0, 0);
    }
    if (*(float *)(v16 + 168) == v43 || v43 == 0.0)
    {
      CFMutableDictionaryRef Mutable = 0;
    }
    else
    {
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21F68], (const void *)*MEMORY[0x1E4F1CFD0]);
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21F70], (const void *)*MEMORY[0x1E4F1CFC8]);
      int v35 = FigTimelineCoordinatorCoordinateRateChange();
      if (v35)
      {
        int v39 = v35;
LABEL_83:
        if (Mutable) {
          CFRelease(Mutable);
        }
        if (!v39) {
          return;
        }
        goto LABEL_41;
      }
      *(void *)(v16 + 88) = v47;
      *(float *)(v16 + 168) = v43;
      *(unsigned char *)(v16 + 104) = 0;
      CMTime time = v44;
      if (figPlaybackCoordinator_isTimeInInterstitialRange((uint64_t)a1, &time, v41))
      {
        if (dword_1EB2AEA78)
        {
          BOOL v36 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        playbackCoordinator_completePendingStartupTask((uint64_t)a1, 1);
      }
    }
    int v39 = 0;
    goto LABEL_83;
  }
  uint64_t v12 = FigCFWeakReferenceHolderCopyReferencedObject();
  if (dword_1EB2AEA78)
  {
    LODWORD(v41[0]) = 0;
    LOBYTE(type.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
    uint64_t v13 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  playbackCoordinator_completePendingStartupTask((uint64_t)a1, 1);
  if (v12)
  {
    int v17 = (const void *)v12;
LABEL_14:
    CFRelease(v17);
  }
}

void playbackCoordinator_setRateAndAnchorTime(uint64_t a1, float a2, uint64_t a3, uint64_t a4, long long *a5, long long *a6, uint64_t a7, const void *a8, int a9, uint64_t a10, void (*a11)(uint64_t, void))
{
  uint64_t v125 = *MEMORY[0x1E4F143B8];
  CFTypeRef v108 = 0;
  CFMutableDictionaryRef v109 = 0;
  long long v107 = 0;
  float v106 = 0.0;
  char v105 = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v104 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  long long v17 = *MEMORY[0x1E4F1FA20];
  long long v18 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  long long v102 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  long long v103 = v18;
  v100[0] = v17;
  v100[1] = v102;
  v100[2] = v18;
  long long v101 = v17;
  if (!a1 || (uint64_t v19 = DerivedStorage, (cf = (CFTypeRef)FigCFWeakReferenceHolderCopyReferencedObject()) == 0))
  {
    CFTypeRef cf = 0;
    goto LABEL_141;
  }
  if (!*(void *)(v19 + 40) || !FigCFEqual() || *(unsigned char *)(v19 + 488) && !*(unsigned char *)(v19 + 448))
  {
LABEL_141:
    if (FigSignalErrorAt()) {
      a11(a10, 0);
    }
    goto LABEL_9;
  }
  CFArrayRef v20 = *(const __CFArray **)(v19 + 360);
  CMTime immediateSourceTime = *(CMTime *)a5;
  *(_OWORD *)CMTimebaseRef timebaseOut = *(_OWORD *)(v19 + 324);
  uint64_t v99 = *(void *)(v19 + 340);
  figPlaybackCoordinator_getPlayerTimeFromGroupTime(a1, &immediateSourceTime, (uint64_t)timebaseOut, v20, &v105, &lhs);
  *(CMTime *)a5 = lhs;
  figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, (uint64_t)a11, a10, 0);
  if ((*((unsigned char *)a5 + 12) & 1) == 0)
  {
    FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
    figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
LABEL_9:
    CFMutableDictionaryRef Mutable = 0;
    BOOL v22 = cf;
    goto LABEL_131;
  }
  BOOL v22 = cf;
  uint64_t v23 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v23) {
    uint64_t v24 = v23;
  }
  else {
    uint64_t v24 = 0;
  }
  CFAllocatorRef v25 = *(void (**)(CFTypeRef, float *))(v24 + 48);
  if (v25) {
    v25(cf, &v106);
  }
  uint64_t v26 = *(void *)(v19 + 40);
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v29 = *(void (**)(uint64_t, CMTime *))(v28 + 32);
  if (v29) {
    v29(v26, &v104);
  }
  if (v106 != 0.0)
  {
    CMTime lhs = v104;
    if (figPlaybackCoordinator_isTimeInInterstitialRange(a1, &lhs, v100))
    {
      CMTime lhs = *(CMTime *)a5;
      if (figPlaybackCoordinator_isTimeInInterstitialRange(a1, &lhs, &v101))
      {
        lhs.CMTimeValue value = 0;
        LODWORD(immediateSourceTime.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
        uint64_t FigBaseObject = FigPlayerGetFigBaseObject(cf);
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v31) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        uint64_t v71 = *(void (**)(uint64_t, __CFString *, void, CMTime *))(v32 + 48);
        if (v71)
        {
          v71(FigBaseObject, @"PlaybackState", *MEMORY[0x1E4F1CF80], &lhs);
          if (lhs.value)
          {
            CFNumberGetValue((CFNumberRef)lhs.value, kCFNumberSInt32Type, &immediateSourceTime);
            if (lhs.value) {
              CFRelease((CFTypeRef)lhs.value);
            }
          }
        }
        goto LABEL_94;
      }
    }
  }
  if (*((unsigned char *)a6 + 12))
  {
    CMTime lhs = *(CMTime *)a5;
    if (figPlaybackCoordinator_isTimeInInterstitialRange(a1, &lhs, &v101))
    {
      CMTimeMake(&rhs, 20, 1000);
      CMTime lhs = *(CMTime *)a5;
      CMTimeAdd(&v97, &lhs, &rhs);
      CFArrayRef v33 = *(const __CFArray **)(v19 + 360);
      CMTime immediateSourceTime = *(CMTime *)(v19 + 324);
      figPlaybackCoordinator_getPlayerTimeFromGroupTime(a1, &v97, (uint64_t)&immediateSourceTime, v33, &v105, &lhs);
      *(CMTime *)a5 = lhs;
      if ((*((unsigned char *)a5 + 12) & 1) == 0)
      {
        FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
LABEL_94:
        figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
        CFMutableDictionaryRef Mutable = 0;
        goto LABEL_131;
      }
      CMTimeMake(&v95, 20, 1000);
      CMTime immediateSourceTime = *(CMTime *)a6;
      CMTimeAdd(&lhs, &immediateSourceTime, &v95);
      *(CMTime *)a6 = lhs;
    }
  }
  *(float *)(v19 + 240) = a2;
  *(unsigned char *)(v19 + 244) = 0;
  CFAllocatorRef v34 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v36 = CFDateCreate(v34, Current);
  uint64_t v37 = *(const void **)(v19 + 248);
  *(void *)(v19 + 248) = a8;
  *(void *)(v19 + 256) = v36;
  if (a8) {
    CFRetain(a8);
  }
  if (v37) {
    CFRelease(v37);
  }
  *(float *)(v19 + 168) = a2;
  *(float *)(v19 + 156) = a2;
  long long v38 = *a5;
  *(void *)(v19 + 124) = *((void *)a5 + 2);
  *(_OWORD *)(v19 + 108) = v38;
  long long v39 = *a6;
  *(void *)(v19 + 148) = *((void *)a6 + 2);
  *(_OWORD *)(v19 + 132) = v39;
  *(unsigned char *)(v19 + 104) = 1;
  uint64_t v40 = *(void *)(v19 + 88);
  int v41 = a9;
  if (v40 > a4)
  {
    if (dword_1EB2AEA78)
    {
      LODWORD(timebaseOut[0]) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v43 = timebaseOut[0];
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v44 = v43;
      }
      else {
        unsigned int v44 = v43 & 0xFFFFFFFE;
      }
      if (v44)
      {
        int v45 = *(unsigned __int8 *)(v19 + 488);
        LODWORD(immediateSourceTime.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 136315650;
        *(CMTimeValue *)((char *)&immediateSourceTime.value + 4) = (CMTimeValue)"playbackCoordinator_setRateAndAnchorTime";
        LOWORD(immediateSourceTime.flags) = 2048;
        *(void *)((char *)&immediateSourceTime.flags + 2) = a1;
        HIWORD(immediateSourceTime.epoch) = 1024;
        int v111 = v45;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      BOOL v22 = cf;
    }
    goto LABEL_94;
  }
  if (a9 == 5)
  {
    MEMORY[0x19970E910](*(void *)(v19 + 64));
    *(unsigned char *)(v19 + 320) = 0;
    MEMORY[0x19970E930](*(void *)(v19 + 64));
    uint64_t v40 = *(void *)(v19 + 88);
  }
  if (v40 < a4)
  {
    *(void *)(v19 + 88) = a4;
    if (*(void *)(v19 + 184)) {
      playbackCoordinator_completePendingStartupTask(a1, 0);
    }
  }
  if (*((unsigned char *)a5 + 12) & 1) != 0 && a2 != 0.0 && (*((_DWORD *)a6 + 3))
  {
    timebaseOut[0] = 0;
    HostTimeClocuint64_t k = CMClockGetHostTimeClock();
    CMTimebaseCreateWithSourceClock(v34, HostTimeClock, timebaseOut);
    CMTime lhs = *(CMTime *)a5;
    CMTime immediateSourceTime = *(CMTime *)a6;
    CMTimebaseSetRateAndAnchorTime(timebaseOut[0], a2, &lhs, &immediateSourceTime);
    CMTimebaseCreateReadOnlyTimebase();
    if (timebaseOut[0]) {
      CFRelease(timebaseOut[0]);
    }
  }
  uint64_t v47 = *(const void **)(v19 + 160);
  CFTypeRef v48 = v108;
  *(void *)(v19 + 160) = v108;
  if (v48) {
    CFRetain(v48);
  }
  if (v47) {
    CFRelease(v47);
  }
  uint64_t v49 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v49) {
    uint64_t v50 = v49;
  }
  else {
    uint64_t v50 = 0;
  }
  uint64_t v51 = *(void (**)(CFTypeRef, float *))(v50 + 48);
  if (v51) {
    v51(cf, &v106);
  }
  if ((*((_DWORD *)a5 + 3) & 0x1D) == 1)
  {
    if (a2 == 0.0
      || (CMTimebaseGetTime(&v93, *(CMTimebaseRef *)(v19 + 48)),
          int v88 = 1,
          CMTimeMake(&v92, 1, 1),
          CMTime lhs = *(CMTime *)a5,
          !CMTimeDifferenceIsWithinTolerance(&lhs, &v93, &v92)))
    {
      int v52 = *(_DWORD *)(v19 + 80);
      *(_DWORD *)(v19 + 80) = FPSupport_IncrementSeekID(v52);
      FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
      if (dword_1EB2AEA78 >= 2) {
        asprintf(&v107, " (id=%d)", v52);
      }
      int v88 = 0;
      char v53 = 1;
    }
    else
    {
      char v53 = 0;
      int v52 = 0;
    }
  }
  else
  {
    char v53 = 0;
    int v52 = 0;
    int v88 = 1;
  }
  if (!*(void *)(v19 + 184)) {
    goto LABEL_70;
  }
  if (v106 != a2) {
    char v53 = 1;
  }
  if ((v53 & 1) == 0)
  {
    if (dword_1EB2AEA78)
    {
      LODWORD(timebaseOut[0]) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      CFIndex v63 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v64 = timebaseOut[0];
      if (os_log_type_enabled(v63, type)) {
        unsigned int v65 = v64;
      }
      else {
        unsigned int v65 = v64 & 0xFFFFFFFE;
      }
      if (v65)
      {
        CFAllocatorRef v66 = v34;
        int v67 = *(unsigned __int8 *)(v19 + 488);
        double v68 = a2;
        CMTime lhs = *(CMTime *)a5;
        Float64 Seconds = CMTimeGetSeconds(&lhs);
        CMTime lhs = *(CMTime *)a6;
        Float64 v70 = CMTimeGetSeconds(&lhs);
        LODWORD(immediateSourceTime.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 136316418;
        *(CMTimeValue *)((char *)&immediateSourceTime.value + 4) = (CMTimeValue)"playbackCoordinator_setRateAndAnchorTime";
        LOWORD(immediateSourceTime.flags) = 2048;
        *(void *)((char *)&immediateSourceTime.flags + 2) = a1;
        HIWORD(immediateSourceTime.epoch) = 1024;
        int v111 = v67;
        CFAllocatorRef v34 = v66;
        __int16 v112 = 2048;
        double v113 = v68;
        __int16 v114 = 2048;
        Float64 v115 = Seconds;
        __int16 v116 = 2048;
        Float64 v117 = v70;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      BOOL v22 = cf;
    }
    uint64_t v81 = *(void *)(v19 + 40);
    if (v81)
    {
      uint64_t v82 = *(void *)(v19 + 160);
      if (v82)
      {
        FigPlaybackItemSetProperty_0(v81, @"TransientTimebaseForCoordinatedPlaybackSynchronization", v82);
        lhs.CMTimeValue value = 0;
        FigPlayerCopyProperty((uint64_t)v22, @"SynchronizedNULL", (uint64_t)v34, (uint64_t)&lhs);
        if (lhs.value) {
          CFRelease((CFTypeRef)lhs.value);
        }
      }
    }
    playbackCoordinator_completePendingStartupTask(a1, 1);
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
LABEL_70:
    playbackCoordinator_completePendingStartupTask(a1, 0);
    if (dword_1EB2AEA78)
    {
      LODWORD(timebaseOut[0]) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      uint64_t v54 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v55 = timebaseOut[0];
      if (os_log_type_enabled(v54, type)) {
        unsigned int v56 = v55;
      }
      else {
        unsigned int v56 = v55 & 0xFFFFFFFE;
      }
      if (v56)
      {
        int v57 = *(unsigned __int8 *)(v19 + 488);
        CMTime lhs = *(CMTime *)a5;
        Float64 v58 = CMTimeGetSeconds(&lhs);
        CMTime lhs = *(CMTime *)a6;
        double v59 = CMTimeGetSeconds(&lhs);
        uint64_t v60 = v107;
        uint64_t v61 = "[SEEK";
        LODWORD(immediateSourceTime.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 136317186;
        *(CMTimeValue *)((char *)&immediateSourceTime.value + 4) = (CMTimeValue)"playbackCoordinator_setRateAndAnchorTime";
        uint64_t v62 = "";
        LOWORD(immediateSourceTime.flags) = 2048;
        if (!v107) {
          uint64_t v60 = "";
        }
        *(void *)((char *)&immediateSourceTime.flags + 2) = a1;
        HIWORD(immediateSourceTime.epoch) = 1024;
        if (v88) {
          uint64_t v61 = "";
        }
        int v111 = v57;
        if (!v88) {
          uint64_t v62 = "]";
        }
        __int16 v112 = 2048;
        double v113 = a2;
        __int16 v114 = 2048;
        Float64 v115 = v58;
        __int16 v116 = 2048;
        Float64 v117 = v59;
        __int16 v118 = 2082;
        uint64_t v119 = v61;
        __int16 v120 = 2082;
        CFStringRef v121 = v60;
        __int16 v122 = 2082;
        uint64_t v123 = v62;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
      int v41 = a9;
    }
    if (FPSupport_CreateSetRateOptions(v34, 33, &v109)) {
      goto LABEL_9;
    }
    uint64_t v72 = (OpaqueCMTimebase *)*MEMORY[0x1E4F1CFC8];
    if (a2 == 0.0) {
      uint64_t v73 = (const void *)*MEMORY[0x1E4F1CFC8];
    }
    else {
      uint64_t v73 = (const void *)*MEMORY[0x1E4F1CFD0];
    }
    CFDictionarySetValue(v109, @"SynchronizeWithStartupTasks", v73);
    FigCFDictionarySetValue();
    if (v41 == 6 || !v41) {
      FigCFDictionarySetValue();
    }
    *(unsigned char *)(v19 + 232) = v88;
    CFMutableDictionaryRef v74 = v109;
    uint64_t v75 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v76 = v75 ? v75 : 0;
    BOOL v77 = *(unsigned int (**)(CFTypeRef, CFMutableDictionaryRef, float))(v76 + 104);
    if (!v77 || v77(cf, v74, a2)) {
      goto LABEL_9;
    }
    if (v88)
    {
      CFMutableDictionaryRef Mutable = 0;
      BOOL v22 = cf;
    }
    else
    {
      timebaseOut[0] = v72;
      uint64_t v78 = FigPlaybackItemGetFigBaseObject(*(void *)(v19 + 40));
      uint64_t v79 = *(void *)(CMBaseObjectGetVTable() + 8);
      if (v79) {
        uint64_t v80 = v79;
      }
      else {
        uint64_t v80 = 0;
      }
      uint64_t v83 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, CMTimebaseRef *))(v80 + 48);
      if (v83) {
        v83(v78, @"IsPlayingIFrameOnly", v34, timebaseOut);
      }
      *(_DWORD *)(v19 + 236) = v52;
      *(unsigned char *)(v19 + 232) = 1;
      CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v34, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      FigCFDictionarySetInt32();
      FigCFDictionarySetInt32();
      FigCFDictionarySetValue();
      BOOL v22 = cf;
      FigCFDictionarySetInt32();
      uint64_t v84 = *(void *)(v19 + 40);
      CMTime immediateSourceTime = *(CMTime *)a5;
      uint64_t v85 = *(void *)(CMBaseObjectGetVTable() + 16);
      if (v85) {
        uint64_t v86 = v85;
      }
      else {
        uint64_t v86 = 0;
      }
      CFTypeRef v87 = *(void (**)(uint64_t, CMTime *, CFMutableDictionaryRef))(v86 + 176);
      if (v87)
      {
        CMTime lhs = immediateSourceTime;
        v87(v84, &lhs, Mutable);
      }
      if (timebaseOut[0]) {
        CFRelease(timebaseOut[0]);
      }
    }
  }
  figPlaybackCoordinator_checkForCommandCompletion(a1);
LABEL_131:
  if (v109) {
    CFRelease(v109);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v22) {
    CFRelease(v22);
  }
  if (v108) {
    CFRelease(v108);
  }
  free(v107);
}

void playbackCoordinator_jumpToTime(uint64_t a1, float a2, uint64_t a3, uint64_t a4, CMTime *a5, int a6, int a7, uint64_t a8, const void *a9, int a10, uint64_t a11, void (*a12)(uint64_t, void))
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  long long v69 = *MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v78.int value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch v17 = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v78.CMTimeEpoch epoch = v17;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a1 || (uint64_t v19 = DerivedStorage, (v72 = (CFTypeRef)FigCFWeakReferenceHolderCopyReferencedObject()) == 0))
  {
    CFAllocatorRef v25 = 0;
LABEL_108:
    if (FigSignalErrorAt()) {
      a12(a11, 0);
    }
    goto LABEL_48;
  }
  if (!*(void *)(v19 + 40) || !FigCFEqual() || *(unsigned char *)(v19 + 488) && !*(unsigned char *)(v19 + 448))
  {
    CFAllocatorRef v25 = v72;
    goto LABEL_108;
  }
  CFArrayRef v20 = *(const __CFArray **)(v19 + 360);
  CMTime time2 = *a5;
  long long v76 = *(_OWORD *)(v19 + 324);
  uint64_t v77 = *(void *)(v19 + 340);
  figPlaybackCoordinator_getPlayerTimeFromGroupTime(a1, &time2, (uint64_t)&v76, v20, 0, &time1);
  *a5 = time1;
  figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, (uint64_t)a12, a11, 0);
  CMTime time1 = *a5;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &time2) < 0)
  {
    FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
    figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
    CFMutableDictionaryRef Mutable = 0;
    CFAllocatorRef v25 = v72;
    goto LABEL_49;
  }
  CFAllocatorRef v21 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFDateRef v23 = CFDateCreate(v21, Current);
  uint64_t v24 = *(const void **)(v19 + 248);
  *(void *)(v19 + 248) = a9;
  *(void *)(v19 + 256) = v23;
  if (a9) {
    CFRetain(a9);
  }
  if (v24) {
    CFRelease(v24);
  }
  CFAllocatorRef v25 = v72;
  if (a10 == 5)
  {
    MEMORY[0x19970E910](*(void *)(v19 + 64));
    *(unsigned char *)(v19 + 320) = 0;
    MEMORY[0x19970E930](*(void *)(v19 + 64));
    int v68 = 1;
  }
  else
  {
    if (!a10) {
      figPlaybackCoordinator_updateReportingStats(a1, @"CPPlayRemoteSeek", 1);
    }
    int v68 = 0;
  }
  if (a6)
  {
    *(unsigned char *)(v19 + 104) = 0;
    int v27 = a7;
    BOOL v28 = a7 != 0;
    float v29 = 0.0;
    if (a7) {
      float v29 = a2;
    }
    *(float *)(v19 + 168) = v29;
    *(_DWORD *)(v19 + 240) = 0;
    if (a2 == 0.0) {
      BOOL v28 = 0;
    }
    *(unsigned char *)(v19 + 244) = v28;
  }
  else
  {
    LODWORD(time1.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
    uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v30) {
      uint64_t v31 = v30;
    }
    else {
      uint64_t v31 = 0;
    }
    uint64_t v32 = *(void (**)(CFTypeRef, CMTime *))(v31 + 48);
    if (v32) {
      v32(v72, &time1);
    }
    int value = time1.value;
    *(_DWORD *)(v19 + 168) = time1.value;
    *(_DWORD *)(v19 + 240) = value;
    CMTimeEpoch epoch = a5->epoch;
    *(_OWORD *)(v19 + 108) = *(_OWORD *)&a5->value;
    *(void *)(v19 + 124) = epoch;
    *(_OWORD *)(v19 + 132) = v69;
    *(void *)(v19 + 148) = v17;
    int v27 = a7;
  }
  if (*(void *)(v19 + 88) > a4)
  {
    if (dword_1EB2AEA78)
    {
      LODWORD(v76) = 0;
      os_log_type_t type = OS_LOG_TYPE_DEFAULT;
      os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      unsigned int v36 = v76;
      if (os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT)) {
        unsigned int v37 = v36;
      }
      else {
        unsigned int v37 = v36 & 0xFFFFFFFE;
      }
      if (v37)
      {
        int v38 = *(unsigned __int8 *)(v19 + 488);
        LODWORD(time2.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 136315650;
        *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playbackCoordinator_jumpToTime";
        LOWORD(time2.flags) = 2048;
        *(void *)((char *)&time2.flags + 2) = a1;
        HIWORD(time2.epoch) = 1024;
        int v81 = v38;
        _os_log_send_and_compose_impl();
      }
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
LABEL_48:
    CFMutableDictionaryRef Mutable = 0;
    goto LABEL_49;
  }
  playbackCoordinator_completePendingStartupTask(a1, 0);
  uint64_t v39 = *(void *)(v19 + 40);
  uint64_t v40 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v40) {
    uint64_t v41 = v40;
  }
  else {
    uint64_t v41 = 0;
  }
  char v42 = *(void (**)(uint64_t, CMTime *))(v41 + 32);
  if (v42) {
    v42(v39, &v78);
  }
  CMTimeMake(&v74, 8, 1000);
  CMTime time1 = v78;
  CMTime time2 = *a5;
  BOOL IsWithinTolerance = CMTimeDifferenceIsWithinTolerance(&time1, &time2, &v74);
  if (IsWithinTolerance)
  {
    int v66 = 0;
  }
  else
  {
    LODWORD(time1.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
    uint64_t v44 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v44) {
      uint64_t v45 = v44;
    }
    else {
      uint64_t v45 = 0;
    }
    int v46 = *(void (**)(CFTypeRef, CMTime *))(v45 + 48);
    if (v46) {
      v46(v72, &time1);
    }
    if (a6 && !v27 && *(float *)&time1.value != 0.0)
    {
      MEMORY[0x19970E910](*(void *)(v19 + 208), *(float *)&time1.value);
      *(unsigned char *)(v19 + 264) = 1;
      MEMORY[0x19970E930](*(void *)(v19 + 208));
    }
    int v66 = *(_DWORD *)(v19 + 80);
    *(_DWORD *)(v19 + 80) = FPSupport_IncrementSeekID(v66);
  }
  if (dword_1EB2AEA78)
  {
    CFAllocatorRef v67 = v21;
    LODWORD(v76) = 0;
    os_log_type_t type = OS_LOG_TYPE_DEFAULT;
    uint64_t v47 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    unsigned int v48 = v76;
    if (os_log_type_enabled(v47, type)) {
      unsigned int v49 = v48;
    }
    else {
      unsigned int v49 = v48 & 0xFFFFFFFE;
    }
    if (v49)
    {
      int v65 = *(unsigned __int8 *)(v19 + 488);
      BOOL v50 = IsWithinTolerance;
      if (IsWithinTolerance) {
        uint64_t v51 = " SKIP";
      }
      else {
        uint64_t v51 = "";
      }
      CMTime time1 = *a5;
      double Seconds = CMTimeGetSeconds(&time1);
      LODWORD(time2.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 136317186;
      *(CMTimeValue *)((char *)&time2.value + 4) = (CMTimeValue)"playbackCoordinator_jumpToTime";
      char v53 = " NOT";
      LOWORD(time2.flags) = 2048;
      if (a6) {
        uint64_t v54 = "";
      }
      else {
        uint64_t v54 = " NOT";
      }
      *(void *)((char *)&time2.flags + 2) = a1;
      HIWORD(time2.epoch) = 1024;
      if (a7) {
        char v53 = "";
      }
      int v81 = v65;
      __int16 v82 = 2082;
      uint64_t v83 = v51;
      BOOL IsWithinTolerance = v50;
      __int16 v84 = 2048;
      double v85 = Seconds;
      __int16 v86 = 2082;
      CFTypeRef v87 = "";
      int v27 = a7;
      __int16 v88 = 2082;
      uint64_t v89 = v54;
      __int16 v90 = 2082;
      CFTypeRef v91 = v53;
      __int16 v92 = 2048;
      double v93 = a2;
      _os_log_send_and_compose_impl();
    }
    fig_log_call_emit_and_clean_up_after_send_and_compose();
    CFAllocatorRef v25 = v72;
    CFAllocatorRef v21 = v67;
  }
  *(unsigned char *)(v19 + 232) = IsWithinTolerance;
  if (v27 | a6)
  {
    if (FPSupport_CreateSetRateOptions(v21, 33, (CFMutableDictionaryRef *)&cf)) {
      goto LABEL_48;
    }
    FigCFDictionarySetValue();
    FigCFDictionarySetValue();
    if (v27)
    {
      if (a10 == 6 || (float v55 = a2, !a10))
      {
        FigCFDictionarySetValue();
        float v55 = a2;
      }
    }
    else
    {
      float v55 = 0.0;
    }
    CFTypeRef v56 = cf;
    uint64_t v57 = *(void *)(CMBaseObjectGetVTable() + 16);
    uint64_t v58 = v57 ? v57 : 0;
    double v59 = *(unsigned int (**)(const void *, CFTypeRef, float))(v58 + 104);
    if (!v59 || v59(v25, v56, v55)) {
      goto LABEL_48;
    }
  }
  *(unsigned char *)(v19 + 232) = 1;
  if (IsWithinTolerance)
  {
    CFMutableDictionaryRef Mutable = 0;
LABEL_93:
    if (v27
      && a2 != 0.0
      && (CMTime time1 = *a5, figPlaybackCoordinator_isInterstitialScheduledAtTime(a1, &time1)))
    {
      FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
      figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
    }
    else
    {
      figPlaybackCoordinator_checkForCommandCompletion(a1);
    }
    goto LABEL_49;
  }
  *(_DWORD *)(v19 + 236) = v66;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v21, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  FigCFDictionarySetInt32();
  FigCFDictionarySetInt32();
  FigCFDictionarySetValue();
  FigCFDictionarySetInt32();
  if (v68)
  {
    CMTime time1 = *a5;
    CMTime time2 = v78;
    CMTimeSubtract(&time, &time1, &time2);
    double v60 = CMTimeGetSeconds(&time);
    figPlaybackCoordinator_updateReportingStats(a1, @"CPPlayTimeSkip", (uint64_t)(fabs(v60) * 1000.0));
  }
  uint64_t v61 = *(void *)(v19 + 40);
  CMTime time2 = *a5;
  uint64_t v62 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v62) {
    uint64_t v63 = v62;
  }
  else {
    uint64_t v63 = 0;
  }
  unsigned int v64 = *(unsigned int (**)(uint64_t, CMTime *, CFMutableDictionaryRef))(v63 + 176);
  if (v64)
  {
    CMTime time1 = time2;
    if (!v64(v61, &time1, Mutable)) {
      goto LABEL_93;
    }
  }
LABEL_49:
  if (cf) {
    CFRelease(cf);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
  if (v25) {
    CFRelease(v25);
  }
}

void playbackCoordinator_pause(uint64_t a1, float a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, const void *a7, int a8, uint64_t a9, void (*a10)(uint64_t, void))
{
  cf[23] = *(CFTypeRef *)MEMORY[0x1E4F143B8];
  cf[0] = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a1)
  {
    uint64_t v18 = DerivedStorage;
    uint64_t v19 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v19 && *(void *)(v18 + 40) && FigCFEqual() && (!*(unsigned char *)(v18 + 488) || *(unsigned char *)(v18 + 448)))
    {
      figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, (uint64_t)a10, a9, 0);
      CFAllocatorRef v20 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v22 = CFDateCreate(v20, Current);
      CFDateRef v23 = *(const void **)(v18 + 248);
      *(void *)(v18 + 248) = a7;
      *(void *)(v18 + 256) = v22;
      if (a7) {
        CFRetain(a7);
      }
      if (v23) {
        CFRelease(v23);
      }
      if (a8 == 5)
      {
        MEMORY[0x19970E910](*(void *)(v18 + 64));
        *(unsigned char *)(v18 + 320) = 0;
        MEMORY[0x19970E930](*(void *)(v18 + 64));
      }
      else if (!a8)
      {
        figPlaybackCoordinator_updateReportingStats(a1, @"CPPlayRemoteSetRate", 1);
      }
      *(unsigned char *)(v18 + 104) = 0;
      BOOL v24 = a5 != 0;
      if (a5) {
        float v25 = a2;
      }
      else {
        float v25 = 0.0;
      }
      *(float *)(v18 + 168) = v25;
      *(_DWORD *)(v18 + 240) = 0;
      if (a2 == 0.0) {
        BOOL v24 = 0;
      }
      *(unsigned char *)(v18 + 244) = v24;
      if (*(void *)(v18 + 88) <= a4)
      {
        playbackCoordinator_completePendingStartupTask(a1, 0);
        if (dword_1EB2AEA78)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(unsigned char *)(v18 + 232) = 1;
        if (!FPSupport_CreateSetRateOptions(v20, 33, (CFMutableDictionaryRef *)cf))
        {
          FigCFDictionarySetValue();
          FigCFDictionarySetValue();
          if (a5 && (a8 == 6 || !a8)) {
            FigCFDictionarySetValue();
          }
          CFTypeRef v28 = cf[0];
          uint64_t v29 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v29) {
            uint64_t v30 = v29;
          }
          else {
            uint64_t v30 = 0;
          }
          uint64_t v31 = *(unsigned int (**)(const void *, CFTypeRef, float))(v30 + 104);
          if (v31 && !v31(v19, v28, v25)) {
            figPlaybackCoordinator_checkForCommandCompletion(a1);
          }
        }
      }
      else
      {
        if (dword_1EB2AEA78)
        {
          uint64_t v26 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
      }
LABEL_37:
      CFRelease(v19);
      if (cf[0]) {
        CFRelease(cf[0]);
      }
      return;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (FigSignalErrorAt()) {
    a10(a9, 0);
  }
  if (v19) {
    goto LABEL_37;
  }
}

void playbackCoordinator_prepareToSetRate(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, int a7, uint64_t a8, void (*a9)(uint64_t, void))
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  CFTypeRef cf = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v33 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  if (a1)
  {
    uint64_t v17 = DerivedStorage;
    uint64_t v18 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v18
      && a2 != 0.0
      && *(void *)(v17 + 40)
      && FigCFEqual()
      && (!*(unsigned char *)(v17 + 488) || *(unsigned char *)(v17 + 448)))
    {
      figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, (uint64_t)a9, a8, 0);
      CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v21 = CFDateCreate(v19, Current);
      CFDateRef v22 = *(const void **)(v17 + 248);
      *(void *)(v17 + 248) = a6;
      *(void *)(v17 + 256) = v21;
      if (a6) {
        CFRetain(a6);
      }
      if (v22) {
        CFRelease(v22);
      }
      if (a7 == 5)
      {
        MEMORY[0x19970E910](*(void *)(v17 + 64));
        *(unsigned char *)(v17 + 320) = 0;
        MEMORY[0x19970E930](*(void *)(v17 + 64));
      }
      else if (!a7)
      {
        figPlaybackCoordinator_updateReportingStats(a1, @"CPPlayRemoteSetRate", 1);
      }
      *(unsigned char *)(v17 + 104) = 0;
      *(float *)(v17 + 168) = a2;
      *(_DWORD *)(v17 + 240) = 0;
      *(unsigned char *)(v17 + 244) = 1;
      if (*(void *)(v17 + 88) <= a4)
      {
        playbackCoordinator_completePendingStartupTask(a1, 0);
        if (dword_1EB2AEA78)
        {
          os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
          os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
          fig_log_call_emit_and_clean_up_after_send_and_compose();
        }
        *(unsigned char *)(v17 + 232) = 1;
        if (FPSupport_CreateSetRateOptions(v19, 33, (CFMutableDictionaryRef *)&cf)) {
          goto LABEL_38;
        }
        FigCFDictionarySetValue();
        FigCFDictionarySetValue();
        if (a7 == 6 || !a7) {
          FigCFDictionarySetValue();
        }
        CFTypeRef v25 = cf;
        uint64_t v26 = *(void *)(CMBaseObjectGetVTable() + 16);
        uint64_t v27 = v26 ? v26 : 0;
        CFTypeRef v28 = *(unsigned int (**)(const void *, CFTypeRef, float))(v27 + 104);
        if (!v28 || v28(v18, v25, a2)) {
          goto LABEL_38;
        }
        uint64_t v29 = *(void *)(v17 + 40);
        uint64_t v30 = *(void *)(CMBaseObjectGetVTable() + 16);
        if (v30) {
          uint64_t v31 = v30;
        }
        else {
          uint64_t v31 = 0;
        }
        uint64_t v32 = *(void (**)(uint64_t, CMTime *))(v31 + 32);
        if (v32) {
          v32(v29, &v33);
        }
        CMTime v35 = v33;
        if (!figPlaybackCoordinator_isInterstitialScheduledAtTime(a1, &v35))
        {
          figPlaybackCoordinator_checkForCommandCompletion(a1);
LABEL_38:
          CFRelease(v18);
          if (cf) {
            CFRelease(cf);
          }
          return;
        }
        FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
      }
      else if (dword_1EB2AEA78)
      {
        CFDateRef v23 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  if (FigSignalErrorAt()) {
    a9(a8, 0);
  }
  if (v18) {
    goto LABEL_38;
  }
}

uint64_t playbackCoordinator_proposeTimelineForIdentifier(const void *a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  if (a1 && FigCFEqual())
  {
    return figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(a1);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figPlaybackCoordinator_beginPlayingPrimarySuspension(const void *a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 352));
  if (!*(void *)(DerivedStorage + 440)
    && !FigTimelineCoordinatorSuspensionCreate()
    && *(void *)(DerivedStorage + 440))
  {
    figPlaybackCoordinator_BeginSuspension(a1);
  }

  JUMPOUT(0x19970E930);
}

void figPlaybackCoordinator_transitionToNewCurrentItemAsync(const void *a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v2 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  figPlaybackCoordinator_transitionToNewCurrentItemIfReady(a1, (uint64_t)v2);
  if (a1) {
    CFRelease(a1);
  }
  if (v2)
  {
    CFRelease(v2);
  }
}

void FigCFRelease_6(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

void figPlaybackCoordinator_Finalize(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  CFDictionaryRef v3 = (void *)CMBaseObjectGetDerivedStorage();
  if (v3[3])
  {
    uint64_t v4 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
    if (v4)
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      char v5 = 0;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v4 = 0;
  }
  char v5 = 1;
LABEL_6:
  if (v3[2])
  {
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
    CMNotificationCenterGetDefaultLocalCenter();
    FigNotificationCenterRemoveWeakListener();
  }
  figPlaybackCoordinator_removeAllItemListeners(a1);
  figPlaybackCoordinator_removeTimebaseNotificationListeners(a1, v3[6]);
  if ((v5 & 1) == 0) {
    CFRelease(v4);
  }
  figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a1, 0, 0, 0);
  playbackCoordinator_completePendingStartupTask(a1, 1);
  BOOL v6 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  uint64_t v7 = v6;
  if (v6)
  {
    int v8 = *(const void **)(DerivedStorage + 32);
    if (v8)
    {
      uint64_t v9 = *(const void **)(DerivedStorage + 40);
      CFRetain(v6);
      if (v9) {
        CFRetain(v9);
      }
      CFRetain(v8);
      CFAllocatorRef v10 = *(NSObject **)(DerivedStorage + 272);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __figPlaybackCoordinator_Finalize_block_invoke;
      block[3] = &__block_descriptor_tmp_77;
      block[4] = v7;
      void block[5] = v8;
      void block[6] = v9;
      dispatch_async(v10, block);
    }
  }
  FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 64) = 0;
  FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 208) = 0;
  FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 352) = 0;
  uint64_t v11 = *(const void **)(DerivedStorage + 16);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 16) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 32);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 32) = 0;
  }
  uint64_t v13 = *(const void **)(DerivedStorage + 24);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(DerivedStorage + 24) = 0;
  }
  uint64_t v14 = *(NSObject **)(DerivedStorage + 272);
  if (v14)
  {
    dispatch_release(v14);
    *(void *)(DerivedStorage + 272) = 0;
  }
  long long v15 = *(const void **)(DerivedStorage + 160);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(DerivedStorage + 160) = 0;
  }
  uint64_t v16 = *(const void **)(DerivedStorage + 288);
  if (v16)
  {
    CFRelease(v16);
    *(void *)(DerivedStorage + 288) = 0;
  }
  uint64_t v17 = *(const void **)(DerivedStorage + 296);
  if (v17)
  {
    CFRelease(v17);
    *(void *)(DerivedStorage + 296) = 0;
  }
  *(_DWORD *)(DerivedStorage + 304) = 0;
  FigSimpleMutexDestroy();
  *(void *)(DerivedStorage + 280) = 0;
  uint64_t v18 = *(const void **)(DerivedStorage + 72);
  if (v18)
  {
    CFRelease(v18);
    *(void *)(DerivedStorage + 72) = 0;
  }
  CFAllocatorRef v19 = *(const void **)(DerivedStorage + 40);
  if (v19)
  {
    CFRelease(v19);
    *(void *)(DerivedStorage + 40) = 0;
  }
  CFAllocatorRef v20 = *(const void **)(DerivedStorage + 48);
  if (v20)
  {
    CFRelease(v20);
    *(void *)(DerivedStorage + 48) = 0;
  }
  CFDateRef v21 = *(const void **)(DerivedStorage + 312);
  if (v21)
  {
    CFRelease(v21);
    *(void *)(DerivedStorage + 312) = 0;
  }
  CFDateRef v22 = *(const void **)(DerivedStorage + 200);
  if (v22)
  {
    CFRelease(v22);
    *(void *)(DerivedStorage + 200) = 0;
  }
  CFDateRef v23 = *(const void **)(DerivedStorage + 456);
  if (v23)
  {
    CFRelease(v23);
    *(void *)(DerivedStorage + 456) = 0;
  }
  BOOL v24 = *(const void **)(DerivedStorage + 464);
  if (v24)
  {
    CFRelease(v24);
    *(void *)(DerivedStorage + 464) = 0;
  }
  CFTypeRef v25 = *(const void **)(DerivedStorage + 472);
  if (v25)
  {
    CFRelease(v25);
    *(void *)(DerivedStorage + 472) = 0;
  }
  figPlaybackCoordinator_resetInterstitialStateMachine(a1);
  if (v7) {
    CFRelease(v7);
  }
}

__CFString *figPlaybackCoordinator_CopyDebugDescription(const void *a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = CFGetAllocator(a1);
  CFMutableDictionaryRef Mutable = CFStringCreateMutable(v3, 0);
  CFStringAppendFormat(Mutable, 0, @"<FigPlaybackCoordinator %p> [%d]", a1, *(unsigned __int8 *)(DerivedStorage + 488));
  return Mutable;
}

uint64_t figPlaybackCoordinator_CopyProperty(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t v7 = *(void *)(CMBaseObjectGetDerivedStorage() + 16);

  return MEMORY[0x1F40DE660](v7, a2, a3, a4);
}

uint64_t figPlaybackCoordinator_SetProperty(const void *a1, uint64_t a2, const void *a3)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!FigCFEqual())
  {
LABEL_8:
    return FigTimelineCoordinatorSetProperty();
  }
  if (a3)
  {
    CFTypeID v6 = CFGetTypeID(a3);
    if (v6 == CFBooleanGetTypeID())
    {
      uint64_t v7 = malloc_type_malloc(0x10uLL, 0x60040FAFB2B2FuLL);
      if (a1) {
        CFTypeRef v8 = CFRetain(a1);
      }
      else {
        CFTypeRef v8 = 0;
      }
      void *v7 = v8;
      v7[1] = a3;
      dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 272), v7, (dispatch_function_t)figPlaybackCoordinator_handleChangeInInterstitialActiveStatusOnQueue);
      goto LABEL_8;
    }
  }

  return FigSignalErrorAt();
}

void figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  CFTypeRef cf = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 208));
  uint64_t v9 = *(void (**)(uint64_t, CFTypeRef))(DerivedStorage + 216);
  if (v9) {
    uint64_t v10 = *(void *)(DerivedStorage + 224);
  }
  else {
    uint64_t v10 = 0;
  }
  *(void *)(DerivedStorage + 216) = a2;
  *(void *)(DerivedStorage + 224) = a3;
  *(_DWORD *)(DerivedStorage + 236) = 0;
  uint64_t v11 = *(const void **)(DerivedStorage + 248);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(DerivedStorage + 248) = 0;
  }
  uint64_t v12 = *(const void **)(DerivedStorage + 256);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(DerivedStorage + 256) = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 208));
  if (*(void *)(DerivedStorage + 48))
  {
    int v13 = figPlaybackCoordinator_copyGroupTimebaseFromCurrentItemTimebase(a1, (CMTimebaseRef *)&cf);
    if (!v9 || v13) {
      goto LABEL_18;
    }
    CFTypeRef v14 = cf;
  }
  else
  {
    if (!v9) {
      goto LABEL_18;
    }
    CFTypeRef v14 = 0;
  }
  if (a4) {
    CFTypeRef v15 = v14;
  }
  else {
    CFTypeRef v15 = 0;
  }
  v9(v10, v15);
  FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
LABEL_18:
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t playbackCoordinator_completePendingStartupTask(uint64_t a1, uint64_t a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t result = CMBaseObjectGetDerivedStorage();
  char v5 = *(uint64_t (**)(void, void, void))(result + 184);
  if (v5)
  {
    uint64_t v6 = result;
    uint64_t v7 = *(unsigned int *)(result + 176);
    *(_DWORD *)(result + 176) = 0;
    uint64_t v9 = *(void *)(result + 192);
    uint64_t v8 = *(void *)(result + 200);
    *(void *)(result + 184) = 0;
    *(void *)(result + 192) = 0;
    if (v8)
    {
      uint64_t v16 = v5;
      CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      CFDateRef v12 = CFDateCreate(v10, Current);
      if (v12)
      {
        CFDateRef v13 = v12;
        CFTimeInterval TimeIntervalSinceDate = CFDateGetTimeIntervalSinceDate(v12, *(CFDateRef *)(v6 + 200));
        figPlaybackCoordinator_updateReportingStats(a1, @"CPPlayWaitTime", (uint64_t)(TimeIntervalSinceDate * 1000.0));
        CFRelease(v13);
      }
      CFTypeRef v15 = *(const void **)(v6 + 200);
      char v5 = v16;
      if (v15)
      {
        CFRelease(v15);
        char v5 = v16;
        *(void *)(v6 + 200) = 0;
      }
    }
    return v5(v9, v7, a2);
  }
  return result;
}

__n128 figPlaybackCoordinator_resetInterstitialStateMachine(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = *(const void **)(DerivedStorage + 360);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(DerivedStorage + 360) = 0;
  }
  uint64_t v4 = *(const void **)(DerivedStorage + 432);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(DerivedStorage + 432) = 0;
  }
  figPlaybackCoordinator_clearInterstitialEventTimer(a1);
  *(_DWORD *)(DerivedStorage + 376) = 0;
  char v5 = (__n128 *)MEMORY[0x1E4F1FA20];
  long long v6 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  *(_OWORD *)(DerivedStorage + 384) = *MEMORY[0x1E4F1FA20];
  *(_OWORD *)(DerivedStorage + 400) = v6;
  __n128 result = v5[2];
  *(__n128 *)(DerivedStorage + 416) = result;
  return result;
}

void figPlaybackCoordinator_playerCurrentItemDidChange(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  figPlaybackCoordinator_transitionToNewCurrentItemIfReady(a2, a4);
  playbackCoordinator_endAllSystemEventSuspensions((uint64_t)a2);
  if (!*(unsigned char *)(DerivedStorage + 488))
  {
    figPlaybackCoordinator_endPlayingInterstitialSuspension((uint64_t)a2);
  }
}

uint64_t figPlaybackCoordinator_InterstitialStarted(uint64_t a1, uint64_t a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(unsigned char *)(result + 488))
  {
    uint64_t v4 = result;
    FigPlaybackCoordinatorGetCMBaseObject(a2);
    uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
    MEMORY[0x19970E910](*(void *)(DerivedStorage + 352));
    if (*(void *)(DerivedStorage + 440))
    {
      FigTimelineCoordinatorEndSuspension();
      long long v6 = *(const void **)(DerivedStorage + 440);
      if (v6)
      {
        CFRelease(v6);
        *(void *)(DerivedStorage + 440) = 0;
      }
    }
    uint64_t result = MEMORY[0x19970E930](*(void *)(DerivedStorage + 352));
    if (!*(unsigned char *)(v4 + 448))
    {
      uint64_t result = playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive(a2, 4);
      if (!result)
      {
        long long v10 = *MEMORY[0x1E4F1F9F8];
        CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
        CFArrayRef v7 = *(const __CFArray **)(v4 + 472);
        if (v7)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v7, 0);
          memset(&v9, 0, sizeof(v9));
          CMTimeMappingMakeFromDictionary(&v9, ValueAtIndex);
          long long v10 = *(_OWORD *)&v9.target.start.value;
          CMTimeEpoch epoch = v9.target.start.epoch;
        }
        *(_OWORD *)&v9.source.start.int value = v10;
        v9.source.start.CMTimeEpoch epoch = epoch;
        return playbackCoordinator_beginCoordinatedPlaybackNotPossibleSuspension(a2, 4);
      }
    }
  }
  return result;
}

void figPlaybackCoordinator_playerRateDidChange(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CMTime v10 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  FigCFDictionaryGetFloat32IfPresent();
  FigCFDictionaryGetInt32IfPresent();
  if (dword_1EB2AEA78)
  {
    LODWORD(time1.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
    type[0] = OS_LOG_TYPE_DEFAULT;
    os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  figPlaybackCoordinator_completePendingCommandAndRecordNewCallback(a2, 0, 0, 0);
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  CMBaseObjectGetDerivedStorage();
  LODWORD(v17.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
  FigCFDictionaryGetInt32IfPresent();
  float v5 = *(float *)(DerivedStorage + 168);
  if (v5 != *(float *)&v11)
  {
    if (*(float *)&v11 == 0.0)
    {
      FigPlaybackCoordinatorGetCMBaseObject(a2);
      CMBaseObjectGetDerivedStorage();
      int v15 = 0;
      FigCFDictionaryGetInt32IfPresent();
      LOBYTE(v16.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      LODWORD(v17.CFHTTPMessageSetHeaderFieldValue(message, headerField, value) = 0;
      if (!FigCFDictionaryGetInt32IfPresent()
        || LODWORD(v17.value) < 2
        || FigCFDictionaryGetBooleanIfPresent() && LOBYTE(v16.value))
      {
        uint64_t v6 = *(void *)(DerivedStorage + 40);
        if (v6) {
          FigPlaybackItemGetCurrentTime_0(v6, (uint64_t)&v10);
        }
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
        CMTime v16 = v10;
        figPlaybackCoordinator_getGroupTimeFromPlayerTime(a2, &v16, &v17);
        CMTime v10 = v17;
        FigCFDictionarySetCMTime();
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F21F60], (const void *)*MEMORY[0x1E4F1CFD0]);
        FigTimelineCoordinatorCoordinateRateChange();
        *(void *)(DerivedStorage + 88) = v12;
        *(_DWORD *)(DerivedStorage + 168) = v11;
        *(unsigned char *)(DerivedStorage + 104) = 0;
        if (Mutable) {
          CFRelease(Mutable);
        }
        return;
      }
      if (figPlaybackCoordinator_playerHasPlaybackStalled())
      {
        uint64_t v8 = (const void **)MEMORY[0x1E4F21FB0];
      }
      else
      {
        int IsAudioSessionInterrupted = figPlaybackCoordinator_playerIsAudioSessionInterrupted();
        uint64_t v8 = (const void **)MEMORY[0x1E4F21F80];
        if (!IsAudioSessionInterrupted) {
          uint64_t v8 = (const void **)MEMORY[0x1E4F21FB8];
        }
      }
      if (*v8) {
        playbackCoordinator_beginSystemEventSuspensionForReason(a2, *v8);
      }
    }
    else
    {
      if (v5 == 0.0 || *(unsigned char *)(DerivedStorage + 96)) {
        return;
      }
      FigTimelineCoordinatorCoordinateRateChange();
      *(void *)(DerivedStorage + 88) = v12;
    }
    *(_DWORD *)(DerivedStorage + 168) = v11;
    *(unsigned char *)(DerivedStorage + 104) = 0;
  }
}

uint64_t figPlaybackCoordinator_suspensionReasonsChanged()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t figPlaybackCoordinator_timelineCoordinatorParticipantsDidChange(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, const void *a5)
{
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v8 = malloc_type_malloc(0x10uLL, 0x60040FAFB2B2FuLL);
  if (a2) {
    CFTypeRef v9 = CFRetain(a2);
  }
  else {
    CFTypeRef v9 = 0;
  }
  *uint64_t v8 = v9;
  if (a5) {
    CFTypeRef v10 = CFRetain(a5);
  }
  else {
    CFTypeRef v10 = 0;
  }
  v8[1] = v10;
  dispatch_async_f(*(dispatch_queue_t *)(DerivedStorage + 272), v8, (dispatch_function_t)figPlaybackCoordinator_timelineCoordinatorParticipantsDidChangeDispatch);
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t figPlaybackCoordinator_timelineCoordinatorDidIssueCommandToTimelineControl()
{
  CMNotificationCenterGetDefaultLocalCenter();

  return CMNotificationCenterPostNotification();
}

uint64_t figPlaybackCoordinator_removeAllItemListeners(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t result = CMBaseObjectGetDerivedStorage();
  if (*(void *)(result + 40))
  {
    uint64_t v2 = result;
    if (*(unsigned char *)(result + 61))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t result = FigNotificationCenterRemoveWeakListener();
      *(unsigned char *)(v2 + 61) = 0;
    }
    if (*(unsigned char *)(v2 + 60))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      uint64_t result = FigNotificationCenterRemoveWeakListener();
      *(unsigned char *)(v2 + 60) = 0;
    }
  }
  return result;
}

uint64_t figPlaybackCoordinator_removeTimebaseNotificationListeners(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    CMNotificationCenterGetDefaultLocalCenter();
    return FigNotificationCenterRemoveWeakListener();
  }
  return result;
}

void figPlaybackCoordinator_transitionToNewCurrentItemIfReady(const void *a1, uint64_t a2)
{
  CFTypeRef v29 = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (a2)
  {
    uint64_t v5 = DerivedStorage;
    uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v6) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = 0;
    }
    uint64_t v8 = *(void (**)(uint64_t, void, CFTypeRef *))(v7 + 32);
    if (v8)
    {
      v8(a2, 0, &v29);
      CFTypeRef v9 = v29;
    }
    else
    {
      CFTypeRef v9 = 0;
    }
    if (*(unsigned char *)(v5 + 488))
    {
      uint64_t v10 = *(void *)(v5 + 40);
      if (v10)
      {
        if (!v9)
        {
          CMTime v28 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
          CMTime v27 = v28;
          CMTime start = v28;
          uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v11) {
            uint64_t v12 = v11;
          }
          else {
            uint64_t v12 = 0;
          }
          CFDateRef v13 = *(void (**)(uint64_t, CMTime *))(v12 + 32);
          if (v13) {
            v13(v10, &v28);
          }
          uint64_t v14 = *(void *)(v5 + 40);
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 16);
          if (v15) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          CMTime v17 = *(void (**)(uint64_t, CMTime *))(v16 + 16);
          if (v17) {
            v17(v14, &v27);
          }
          time1.source.CMTime start = v28;
          time2.CMTime start = v27;
          if ((CMTimeCompare(&time1.source.start, &time2.start) & 0x80000000) == 0)
          {
            CFArrayRef v18 = *(const __CFArray **)(v5 + 472);
            if (v18)
            {
              CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v18, 0);
              memset(&time1, 0, sizeof(time1));
              CMTimeMappingMakeFromDictionary(&time1, ValueAtIndex);
              CMTimeRange time2 = time1.target;
              CMTimeRangeGetEnd(&start, &time2);
              CMTimeMake(&lhs, 1, 10);
              CMTimeMake(&rhs, 1, 1000);
              CMTimeAdd(&v23, &lhs, &rhs);
              CMTime v20 = start;
              CMTimeAdd(&time2.start, &v20, &v23);
              CMTime start = time2.start;
            }
          }
          time1.source.CMTime start = start;
          playbackCoordinator_endCoordinatedPlaybackNotPossibleSuspension((uint64_t)a1, 4);
          figPlaybackCoordinator_beginPlayingPrimarySuspension(a1);
          CFTypeRef v9 = v29;
        }
      }
    }
    figPlaybackCoordinator_transitionToNewCurrentItem(a1, v9);
    if (v29) {
      CFRelease(v29);
    }
  }
}

void playbackCoordinator_endAllSystemEventSuspensions(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 280));
  uint64_t v2 = (const void *)FigCFDictionaryCopyArrayOfValues();
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(DerivedStorage + 288));
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 280));
  FigTimelineCoordinatorEndSuspensions();
  if (v2)
  {
    CFRelease(v2);
  }
}

void figPlaybackCoordinator_endPlayingInterstitialSuspension(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 352));
  if (*(void *)(DerivedStorage + 440))
  {
    FigTimelineCoordinatorEndSuspensionReApplyingGroupStateOnlyIfNeeded();
    uint64_t v2 = *(const void **)(DerivedStorage + 440);
    if (v2)
    {
      CFRelease(v2);
      *(void *)(DerivedStorage + 440) = 0;
    }
  }

  JUMPOUT(0x19970E930);
}

uint64_t playbackCoordinator_endCoordinatedPlaybackNotPossibleSuspension(uint64_t a1, int a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 280));
  BOOL v4 = (*(_DWORD *)(DerivedStorage + 304) & ~a2) == 0;
  *(_DWORD *)(DerivedStorage + 304) &= ~a2;
  if (v4 && *(void *)(DerivedStorage + 296))
  {
    uint64_t v5 = FigTimelineCoordinatorEndSuspensionProposingNewTime();
    uint64_t v7 = *(const void **)(DerivedStorage + 296);
    if (v7)
    {
      CFRelease(v7);
      *(void *)(DerivedStorage + 296) = 0;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 280));
  return v5;
}

void figPlaybackCoordinator_transitionToNewCurrentItem(const void *a1, const void *a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v5 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  if (v5) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a2 == 0;
  }
  if (!v6) {
    a2 = 0;
  }
  if (a2 != *(const void **)(DerivedStorage + 40))
  {
    figPlaybackCoordinator_removeAllItemListeners((uint64_t)a1);
    if (*(void *)(DerivedStorage + 48))
    {
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterRemoveWeakListener();
      uint64_t v7 = *(const void **)(DerivedStorage + 48);
      if (v7)
      {
        CFRelease(v7);
        *(void *)(DerivedStorage + 48) = 0;
      }
    }
    if (playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive((uint64_t)a1, 1)
      || *(_DWORD *)(DerivedStorage + 56) != 2
      || !playbackCoordinator_beginCoordinatedPlaybackNotPossibleSuspension((uint64_t)a1, 1))
    {
      uint64_t v8 = *(const void **)(DerivedStorage + 40);
      *(void *)(DerivedStorage + 40) = a2;
      if (a2) {
        CFRetain(a2);
      }
      if (v8) {
        CFRelease(v8);
      }
      *(_DWORD *)(DerivedStorage + 56) = 0;
      FigPlaybackCoordinatorGetCMBaseObject(a1);
      uint64_t v9 = CMBaseObjectGetDerivedStorage();
      uint64_t v10 = v9;
      CFTypeRef v34 = 0;
      CFTypeRef v35 = 0;
      if (*(_DWORD *)(v9 + 56))
      {
        FigSignalErrorAt();
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 40);
        if (v11)
        {
          CFTypeRef cf = 0;
          uint64_t v12 = *MEMORY[0x1E4F1CF80];
          uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v11);
          uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v14) {
            uint64_t v15 = v14;
          }
          else {
            uint64_t v15 = 0;
          }
          uint64_t v16 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v15 + 48);
          if (v16)
          {
            if (v16(FigBaseObject, @"IsCoordinatedPlaybackSupported", v12, &cf)) {
              BOOL v17 = 0;
            }
            else {
              BOOL v17 = cf == (CFTypeRef)*MEMORY[0x1E4F1CFC8];
            }
            char v18 = v17;
            if (cf) {
              CFRelease(cf);
            }
            if (v18)
            {
              int v30 = 2;
              goto LABEL_52;
            }
          }
          if (*(void *)(v10 + 40))
          {
            FigPlaybackCoordinatorGetCMBaseObject(a1);
            uint64_t v19 = CMBaseObjectGetDerivedStorage();
            if (*(void *)(v19 + 40))
            {
              uint64_t v20 = v19;
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              CMNotificationCenterGetDefaultLocalCenter();
              FigNotificationCenterAddWeakListener();
              *(unsigned char *)(v20 + 60) = 1;
            }
          }
          uint64_t v21 = FigPlaybackItemGetFigBaseObject(*(void *)(v10 + 40));
          uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v22) {
            uint64_t v23 = v22;
          }
          else {
            uint64_t v23 = 0;
          }
          BOOL v24 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v23 + 48);
          if (v24 && !v24(v21, @"IsReadyForPlayback", v12, &v35))
          {
            CFTypeRef v25 = v35;
            CFTypeRef v26 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
            if (v35 == (CFTypeRef)*MEMORY[0x1E4F1CFD0])
            {
              int v30 = 102;
LABEL_53:
              *(_DWORD *)(v10 + 56) = v30;
              if (v25) {
                CFRelease(v25);
              }
              if (v34) {
                CFRelease(v34);
              }
              figPlaybackCoordinator_resetInterstitialStateMachine((uint64_t)a1);
              uint64_t v32 = *(const void **)(DerivedStorage + 456);
              if (v32)
              {
                CFRelease(v32);
                *(void *)(DerivedStorage + 456) = 0;
              }
              CMTime v33 = *(const void **)(DerivedStorage + 464);
              if (v33)
              {
                CFRelease(v33);
                *(void *)(DerivedStorage + 464) = 0;
              }
              figPlaybackCoordinator_seekToGroupTimeIfOnlyReadyForInspection((uint64_t)a1);
              figPlaybackCoordinator_startTrackingPlaybackStateIfReady((uint64_t)a1);
              figPlaybackCoordinator_setIntegratedTimelineOffsetTimesForItem((uint64_t)a1, (uint64_t)a2);
              if (!figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(a1)
                && playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive((uint64_t)a1, 1)
                && *(_DWORD *)(DerivedStorage + 56) != 2)
              {
                playbackCoordinator_endCoordinatedPlaybackNotPossibleSuspension((uint64_t)a1, 1);
              }
              goto LABEL_65;
            }
            uint64_t v27 = FigPlaybackItemGetFigBaseObject(*(void *)(v10 + 40));
            uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 8);
            uint64_t v29 = v28 ? v28 : 0;
            uint64_t v31 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v29 + 48);
            if (v31)
            {
              if (!v31(v27, @"BasicsReadyForInspection", v12, &v34))
              {
                if (v34 == v26) {
                  int v30 = 101;
                }
                else {
                  int v30 = 100;
                }
                goto LABEL_52;
              }
            }
          }
        }
      }
      int v30 = 1;
LABEL_52:
      CFTypeRef v25 = v35;
      goto LABEL_53;
    }
  }
LABEL_65:
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 64));
  *(unsigned char *)(DerivedStorage + 320) = 0;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 64));
  if (v5) {
    CFRelease(v5);
  }
}

BOOL playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive(uint64_t a1, int a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 280));
  BOOL v4 = (*(_DWORD *)(DerivedStorage + 304) & a2) != 0;
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 280));
  return v4;
}

uint64_t playbackCoordinator_beginCoordinatedPlaybackNotPossibleSuspension(uint64_t a1, int a2)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  MEMORY[0x19970E910](*(void *)(DerivedStorage + 280));
  int v4 = *(_DWORD *)(DerivedStorage + 304);
  if (v4)
  {
    uint64_t v5 = 0;
LABEL_9:
    uint64_t v8 = 0;
    *(_DWORD *)(DerivedStorage + 304) = v4 | a2;
    goto LABEL_10;
  }
  if (*(unsigned char *)(DerivedStorage + 488)) {
    BOOL v6 = (const void **)MEMORY[0x1E4F21F98];
  }
  else {
    BOOL v6 = (const void **)MEMORY[0x1E4F21F90];
  }
  uint64_t v5 = *v6;
  uint64_t v7 = FigTimelineCoordinatorSuspensionCreate();
  if (!v7)
  {
    uint64_t v7 = FigTimelineCoordinatorBeginSuspensionProposingTime();
    if (!v7)
    {
      *(void *)(DerivedStorage + 296) = 0;
      int v4 = *(_DWORD *)(DerivedStorage + 304);
      goto LABEL_9;
    }
  }
  uint64_t v8 = v7;
LABEL_10:
  MEMORY[0x19970E930](*(void *)(DerivedStorage + 280));
  if (v5) {
    CFRelease(v5);
  }
  return v8;
}

void figPlaybackCoordinator_seekToGroupTimeIfOnlyReadyForInspection(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  CFTypeRef v35 = 0;
  CFTypeRef cf = 0;
  uint64_t v2 = MEMORY[0x1E4F1F9F8];
  *(_OWORD *)&v34.int value = *MEMORY[0x1E4F1F9F8];
  CMTimeEpoch epoch = *(void *)(MEMORY[0x1E4F1F9F8] + 16);
  v34.CMTimeEpoch epoch = epoch;
  *(_OWORD *)&v33.int value = *(_OWORD *)&v34.value;
  v33.CMTimeEpoch epoch = epoch;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 56) != 101) {
    goto LABEL_28;
  }
  uint64_t v5 = DerivedStorage;
  if (figPlaybackCoordinator_recordDateOffsetForItem(a1, &v34)) {
    goto LABEL_28;
  }
  figPlaybackCoordinator_recordInterstitialTimeRange(a1, &cf);
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(v5 + 40));
  uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v8 = v7 ? v7 : 0;
  uint64_t v9 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v8 + 48);
  if (!v9) {
    goto LABEL_28;
  }
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  if (v9(FigBaseObject, @"CoordinationIdentifier", *MEMORY[0x1E4F1CF80], &v35)) {
    goto LABEL_28;
  }
  if (FigTimelineCoordinatorIsSuspended()) {
    goto LABEL_28;
  }
  if (FigTimelineCoordinatorGetExpectedGroupTimeForIdentifier()) {
    goto LABEL_28;
  }
  if ((v33.flags & 1) == 0) {
    goto LABEL_28;
  }
  memset(&v32, 0, sizeof(v32));
  CMTime time1 = v33;
  CMTime time2 = v34;
  figPlaybackCoordinator_getPlayerTimeFromGroupTime(a1, &time1, (uint64_t)&time2, (const __CFArray *)cf, 0, &v32);
  CMTime time1 = v32;
  CMTime time2 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&time1, &time2) < 0) {
    goto LABEL_28;
  }
  CMTime v31 = v32;
  CMTimeValue v48 = *(void *)v2;
  CMTimeScale v11 = *(_DWORD *)(v2 + 8);
  CMTimeFlags flags = *(_DWORD *)(v2 + 12);
  CMTimeScale timescale = v11;
  CMTimeValue v46 = *MEMORY[0x1E4F1FA08];
  CMTimeFlags v13 = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 12);
  CMTimeScale v47 = *(_DWORD *)(MEMORY[0x1E4F1FA08] + 8);
  uint64_t v14 = *(void *)(v5 + 40);
  CFArrayRef v40 = 0;
  CMTimeEpoch v15 = *(void *)(MEMORY[0x1E4F1FA08] + 16);
  uint64_t v16 = FigPlaybackItemGetFigBaseObject(v14);
  uint64_t v17 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v17) {
    uint64_t v18 = v17;
  }
  else {
    uint64_t v18 = 0;
  }
  uint64_t v19 = *(void (**)(uint64_t, __CFString *, const __CFAllocator *, const __CFArray **))(v18 + 48);
  if (v19)
  {
    v19(v16, @"SeekableTimeIntervals", v10, &v40);
    if (v40)
    {
      CFIndex Count = CFArrayGetCount(v40);
      if (Count >= 1)
      {
        CFIndex v21 = Count;
        for (CFIndex i = 0; i != v21; ++i)
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v40, i);
          memset(&time1, 0, sizeof(time1));
          CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"startTime");
          CMTimeMakeFromDictionary(&time1, Value);
          memset(&time2, 0, sizeof(time2));
          CFDictionaryRef v25 = (const __CFDictionary *)CFDictionaryGetValue(ValueAtIndex, @"endTime");
          CMTimeMakeFromDictionary(&time2, v25);
          v38.CMTimeScale timescale = timescale;
          v38.CMTimeFlags flags = flags;
          v38.CMTimeEpoch epoch = epoch;
          CMTime v37 = time1;
          v38.int value = v48;
          if (CMTimeCompare(&v38, &v37) >= 1)
          {
            CMTimeValue v48 = time1.value;
            CMTimeFlags flags = time1.flags;
            CMTimeScale timescale = time1.timescale;
            CMTimeEpoch epoch = time1.epoch;
          }
          v38.CMTimeScale timescale = v47;
          v38.CMTimeFlags flags = v13;
          v38.CMTimeEpoch epoch = v15;
          CMTime v37 = time2;
          v38.int value = v46;
          if (CMTimeCompare(&v38, &v37) < 0)
          {
            CMTimeValue v46 = time2.value;
            CMTimeFlags v13 = time2.flags;
            CMTimeScale v47 = time2.timescale;
            CMTimeEpoch v15 = time2.epoch;
          }
        }
      }
      CFRelease(v40);
    }
  }
  CMTimeValue v44 = v48;
  CMTimeScale v45 = timescale;
  CMTimeValue v42 = v46;
  CMTimeScale v43 = v47;
  if ((flags & 0x1D) != 1) {
    goto LABEL_28;
  }
  if ((v13 & 0x1D) != 1) {
    goto LABEL_28;
  }
  time1.int value = v44;
  time1.CMTimeScale timescale = v45;
  time1.CMTimeFlags flags = flags;
  time1.CMTimeEpoch epoch = epoch;
  CMTime time2 = v31;
  if (CMTimeCompare(&time1, &time2) >= 1
    || (time1.int value = v42,
        time1.CMTimeScale timescale = v43,
        time1.CMTimeFlags flags = v13,
        time1.CMTimeEpoch epoch = v15,
        CMTime time2 = v31,
        CMTimeCompare(&time1, &time2) < 0))
  {
LABEL_28:
    CFMutableDictionaryRef Mutable = 0;
  }
  else
  {
    *(_DWORD *)(v5 + 80) = FPSupport_IncrementSeekID(*(_DWORD *)(v5 + 80));
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(v10, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    FigCFDictionarySetInt32();
    uint64_t v27 = *(void *)(v5 + 40);
    CMTime time2 = v32;
    uint64_t v28 = *(void *)(CMBaseObjectGetVTable() + 16);
    if (v28) {
      uint64_t v29 = v28;
    }
    else {
      uint64_t v29 = 0;
    }
    int v30 = *(void (**)(uint64_t, CMTime *, CFMutableDictionaryRef))(v29 + 176);
    if (v30)
    {
      CMTime time1 = time2;
      v30(v27, &time1, Mutable);
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v35) {
    CFRelease(v35);
  }
  if (Mutable) {
    CFRelease(Mutable);
  }
}

void figPlaybackCoordinator_startTrackingPlaybackStateIfReady(uint64_t a1)
{
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFTypeRef v35 = 0;
  CFTypeRef cf = 0;
  if (*(_DWORD *)(DerivedStorage + 56) == 102)
  {
    CFAllocatorRef v3 = (void *)DerivedStorage;
    FigPlaybackCoordinatorGetCMBaseObject(a1);
    uint64_t v4 = CMBaseObjectGetDerivedStorage();
    if (*(void *)(v4 + 40))
    {
      uint64_t v5 = v4;
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      CMNotificationCenterGetDefaultLocalCenter();
      FigNotificationCenterAddWeakListener();
      *(unsigned char *)(v5 + 61) = 1;
    }
    FigPlaybackCoordinatorGetCMBaseObject(a1);
    CMBaseObjectGetDerivedStorage();
    uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(v3[5]);
    uint64_t v7 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v7) {
      uint64_t v8 = v7;
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v9 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v8 + 48);
    if (v9)
    {
      uint64_t v10 = *MEMORY[0x1E4F1CF80];
      if (!v9(FigBaseObject, @"Timebase", *MEMORY[0x1E4F1CF80], &cf))
      {
        figPlaybackCoordinator_addTimebaseNotificationListeners(a1, (uint64_t)cf);
        figPlaybackCoordinator_updateHLSInterstitialStartTimes(a1);
        figPlaybackCoordinator_recordCurrentHLSInterstitialEventCoordinationStatus(a1);
        CFTypeRef v11 = cf;
        if (cf) {
          CFTypeRef v11 = CFRetain(cf);
        }
        _OWORD v3[6] = v11;
        FigPlaybackCoordinatorGetCMBaseObject(a1);
        uint64_t v12 = CMBaseObjectGetDerivedStorage();
        CFArrayRef theArray = 0;
        CFTypeRef v38 = 0;
        uint64_t v13 = *(void *)(v12 + 40);
        if (v13)
        {
          uint64_t v14 = FigPlaybackItemGetFigBaseObject(v13);
          uint64_t v15 = *(void *)(CMBaseObjectGetVTable() + 8);
          if (v15) {
            uint64_t v16 = v15;
          }
          else {
            uint64_t v16 = 0;
          }
          uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t, CFTypeRef *))(v16 + 48);
          if (v17)
          {
            if (!v17(v14, 0x1EE548638, v10, &v38)
              && !figPlaybackCoordinator_CopyParticipantSnapshots(a1, (uint64_t)&theArray))
            {
              if (theArray)
              {
                CFIndex Count = CFArrayGetCount(theArray);
                if (Count >= 1)
                {
                  uint64_t v19 = *(void *)(v12 + 312);
                  if (v19)
                  {
                    CFIndex v20 = Count;
                    uint64_t v21 = *(void *)(CMBaseObjectGetVTable() + 16);
                    if (v21) {
                      uint64_t v22 = v21;
                    }
                    else {
                      uint64_t v22 = 0;
                    }
                    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, CFIndex))(v22 + 40);
                    if (v23) {
                      v23(v19, 0x1EE582C98, 0x1EE585618, v20);
                    }
                    uint64_t v24 = *(void *)(v12 + 312);
                    if (v24)
                    {
                      uint64_t v25 = *(void *)(CMBaseObjectGetVTable() + 16);
                      uint64_t v26 = v25 ? v25 : 0;
                      uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 40);
                      if (v27) {
                        v27(v24, 0x1EE5855F8, 0x1EE585618, 1);
                      }
                    }
                  }
                }
              }
            }
          }
        }
        else
        {
          FigSignalErrorAt();
        }
        uint64_t v28 = *(const void **)(v12 + 312);
        CFTypeRef v29 = v38;
        *(void *)(v12 + 312) = v38;
        if (v29) {
          CFRetain(v29);
        }
        if (v28) {
          CFRelease(v28);
        }
        if (v38) {
          CFRelease(v38);
        }
        if (theArray) {
          CFRelease(theArray);
        }
        uint64_t v30 = FigPlaybackItemGetFigBaseObject(v3[5]);
        uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 8);
        if (v31) {
          uint64_t v32 = v31;
        }
        else {
          uint64_t v32 = 0;
        }
        CMTime v33 = *(unsigned int (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v32 + 48);
        if (v33 && !v33(v30, @"IntegratedTimelineTimeOffsets", v10, &v35))
        {
          CFTypeRef v34 = v35;
          if (v35) {
            CFTypeRef v34 = CFRetain(v35);
          }
          v3[59] = v34;
        }
      }
    }
  }
  if (cf) {
    CFRelease(cf);
  }
  if (v35) {
    CFRelease(v35);
  }
}

void figPlaybackCoordinator_setIntegratedTimelineOffsetTimesForItem(uint64_t a1, uint64_t a2)
{
  CFTypeRef cf = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (!a2)
  {
    FigSignalErrorAt();
LABEL_9:
    uint64_t v9 = *(const void **)(DerivedStorage + 472);
    *(void *)(DerivedStorage + 472) = 0;
    goto LABEL_10;
  }
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(a2);
  uint64_t v5 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  uint64_t v7 = *(void (**)(uint64_t, __CFString *, void, CFTypeRef *))(v6 + 48);
  if (!v7) {
    goto LABEL_9;
  }
  v7(FigBaseObject, @"IntegratedTimelineTimeOffsets", *MEMORY[0x1E4F1CF80], &cf);
  CFTypeRef v8 = cf;
  uint64_t v9 = *(const void **)(DerivedStorage + 472);
  *(void *)(DerivedStorage + 472) = cf;
  if (v8) {
    CFRetain(v8);
  }
LABEL_10:
  if (v9) {
    CFRelease(v9);
  }
  if (cf) {
    CFRelease(cf);
  }
}

uint64_t figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(const void *a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  CMTimebaseRef timebase = 0;
  CFTypeRef cf = 0;
  CFTypeRef v56 = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  CFAllocatorRef v3 = (const void *)FigCFWeakReferenceHolderCopyReferencedObject();
  CMTime v55 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  long long v4 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
  v54[0] = *MEMORY[0x1E4F1FA20];
  v54[1] = v4;
  v54[2] = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
  float v53 = 0.0;
  int v5 = *(_DWORD *)(DerivedStorage + 56);
  CFTypeRef v52 = 0;
  FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
  figPlaybackCoordinator_completePendingCommandAndRecordNewCallback((uint64_t)a1, 0, 0, 0);
  *(unsigned char *)(DerivedStorage + 104) = 0;
  *(_DWORD *)(DerivedStorage + 168) = 2143289344;
  if (*(_DWORD *)(DerivedStorage + 56) < 0x66u) {
    goto LABEL_51;
  }
  uint64_t v6 = *MEMORY[0x1E4F1CF80];
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 40));
  uint64_t v8 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v8) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 0;
  }
  uint64_t v10 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v9 + 48);
  if (v10)
  {
    DefaultCoordinationIdentifierForPlaybackIteCFIndex m = v10(FigBaseObject, @"CoordinationIdentifier", v6, &cf);
    if (DefaultCoordinationIdentifierForPlaybackItem == -12783) {
      DefaultCoordinationIdentifierForPlaybackIteCFIndex m = FPSupport_CreateDefaultCoordinationIdentifierForPlaybackItem(*(void *)(DerivedStorage + 40), (CFStringRef *)&cf);
    }
    BOOL v12 = DefaultCoordinationIdentifierForPlaybackItem == 0;
  }
  else
  {
    BOOL v12 = 0;
  }
  figPlaybackCoordinator_beginOrEndCoordinatedPlaybackNotPossibleSuspension((uint64_t)a1, v12, 2);
  if (*(unsigned char *)(DerivedStorage + 488))
  {
    uint64_t v13 = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 40));
    uint64_t v14 = *(void *)(CMBaseObjectGetVTable() + 8);
    if (v14) {
      uint64_t v15 = v14;
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CFTypeRef *))(v15 + 48);
    if (!v16)
    {
LABEL_26:
      uint64_t v29 = 4294954514;
      if (!v3) {
        goto LABEL_75;
      }
      goto LABEL_74;
    }
    uint64_t v17 = v16(v13, @"ParticipatesInCoordinatedPlayback", v6, &v52);
    if (v17) {
      goto LABEL_88;
    }
    *(unsigned char *)(DerivedStorage + 448) = v52 == (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    FigPlaybackCoordinatorGetCMBaseObject(a1);
    uint64_t v18 = CMBaseObjectGetDerivedStorage();
    if (*(unsigned char *)(v18 + 488) != 1
      || (uint64_t v19 = v18,
          MEMORY[0x19970E910](*(void *)(v18 + 352)),
          uint64_t v20 = *(void *)(v19 + 440),
          MEMORY[0x19970E930](*(void *)(v19 + 352)),
          !v20))
    {
      figPlaybackCoordinator_beginOrEndCoordinatedPlaybackNotPossibleSuspension((uint64_t)a1, *(unsigned char *)(DerivedStorage + 448) != 0, 4);
    }
  }
  uint64_t v21 = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 40));
  uint64_t v22 = *(void *)(CMBaseObjectGetVTable() + 8);
  if (v22) {
    uint64_t v23 = v22;
  }
  else {
    uint64_t v23 = 0;
  }
  uint64_t v24 = *(uint64_t (**)(uint64_t, __CFString *, uint64_t, CMTimebaseRef *))(v23 + 48);
  if (!v24) {
    goto LABEL_26;
  }
  uint64_t v17 = v24(v21, @"Timebase", v6, &timebase);
  if (v17) {
    goto LABEL_88;
  }
  figPlaybackCoordinator_recordInterstitialTimeRange((uint64_t)a1, 0);
  float Rate = CMTimebaseGetRate(timebase);
  *(float *)(DerivedStorage + 168) = Rate;
  figPlaybackCoordinator_recordDateOffsetForItem((uint64_t)a1, 0);
  uint64_t v26 = *(void *)(DerivedStorage + 40);
  uint64_t v27 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = 0;
  }
  uint64_t v30 = *(void (**)(uint64_t, CMTime *))(v28 + 32);
  if (v30) {
    v30(v26, &v55);
  }
  uint64_t v31 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v31) {
    uint64_t v32 = v31;
  }
  else {
    uint64_t v32 = 0;
  }
  CMTime v33 = *(void (**)(const void *, float *))(v32 + 48);
  if (v33) {
    v33(v3, &v53);
  }
  float v34 = CMTimebaseGetRate(timebase);
  if (v34 == 0.0 && v3)
  {
    float v35 = v53;
    float v36 = 0.0;
    if ((v55.flags & 1) != 0 && v53 != v34)
    {
      *(float *)(DerivedStorage + 168) = v53;
      float v36 = v35;
    }
  }
  else
  {
    float v36 = 0.0;
    float v35 = v53;
  }
  if (v35 != 0.0 && (v55.flags & 1) != 0)
  {
    CMTime time = v55;
    if (figPlaybackCoordinator_isTimeInInterstitialRange((uint64_t)a1, &time, v54))
    {
      if (dword_1EB2AEA78)
      {
        os_log_and_send_and_compose_flags_and_os_log_os_log_type_t type = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
        os_log_type_enabled(os_log_and_send_and_compose_flags_and_os_log_type, OS_LOG_TYPE_DEFAULT);
        fig_log_call_emit_and_clean_up_after_send_and_compose();
      }
      CMTime v59 = v55;
      figPlaybackCoordinator_getGroupTimeFromPlayerTime((uint64_t)a1, &v59, &time);
      CMTime v55 = time;
LABEL_86:
      uint64_t v17 = FigTimelineCoordinatorHandleTransitionToNewTimelineFromTimelineControlProposingTimeAndPrerollRate();
      if (v17) {
        goto LABEL_88;
      }
      int v5 = 10000;
      goto LABEL_63;
    }
  }
  if (v36 != 0.0)
  {
    CMTime v59 = v55;
    figPlaybackCoordinator_getGroupTimeFromPlayerTime((uint64_t)a1, &v59, &time);
    CMTime v55 = time;
    if (dword_1EB2AEA78)
    {
      CFTypeRef v38 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
      os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
      fig_log_call_emit_and_clean_up_after_send_and_compose();
    }
    CMTime time = v55;
    goto LABEL_86;
  }
  int v5 = 10000;
LABEL_51:
  if (dword_1EB2AEA78)
  {
    uint64_t v39 = fig_log_emitter_get_os_log_and_send_and_compose_flags_and_os_log_type();
    os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT);
    fig_log_call_emit_and_clean_up_after_send_and_compose();
  }
  if (!*(unsigned char *)(DerivedStorage + 96) && cf)
  {
    CFArrayRef v40 = *(OpaqueCMTimebase **)(DerivedStorage + 48);
    FigPlaybackCoordinatorGetCMBaseObject(a1);
    uint64_t v41 = CMBaseObjectGetDerivedStorage();
    double v42 = CMTimebaseGetRate(v40);
    if (v42 == 0.0)
    {
      *(unsigned char *)(v41 + 104) = 0;
    }
    else
    {
      *(unsigned char *)(v41 + 104) = 1;
      float v43 = v42;
      *(float *)(v41 + 156) = v43;
      HostTimeClocuint64_t k = CMClockGetHostTimeClock();
      CMClockGetTime(&time, HostTimeClock);
      *(CMTime *)(v41 + 132) = time;
      CMClockRef v45 = CMClockGetHostTimeClock();
      CMTime v59 = *(CMTime *)(v41 + 132);
      CMSyncConvertTime(&time, &v59, v45, v40);
      *(CMTime *)(v41 + 108) = time;
      CMTimeValue v48 = *(const void **)(v41 + 160);
      CMTimeScale v47 = (CMTimebaseRef *)(v41 + 160);
      CMTimeValue v46 = v48;
      if (v48)
      {
        CFRelease(v46);
        *CMTimeScale v47 = 0;
      }
      uint64_t v17 = figPlaybackCoordinator_copyTimebaseAndAddOffset(v40, MEMORY[0x1E4F1FA48], v47);
      if (v17) {
        goto LABEL_88;
      }
    }
  }
  uint64_t v17 = figPlaybackCoordinator_copyGroupTimebaseFromCurrentItemTimebase((uint64_t)a1, (CMTimebaseRef *)&v56);
  if (v17) {
    goto LABEL_88;
  }
  uint64_t v17 = FigTimelineCoordinatorHandleTransitionToNewTimelineFromTimelineControl();
  if (v17) {
    goto LABEL_88;
  }
LABEL_63:
  unsigned int v49 = *(const void **)(DerivedStorage + 72);
  CFTypeRef v50 = cf;
  *(void *)(DerivedStorage + 72) = cf;
  if (v50) {
    CFRetain(v50);
  }
  if (v49) {
    CFRelease(v49);
  }
  uint64_t v17 = FigTimelineCoordinatorSetReadinessHintFromTimelineControl();
  if (!v17)
  {
    if (!*(_DWORD *)(DerivedStorage + 376)) {
      figPlaybackCoordinator_updateInterstitialStateMachine(a1, 0);
    }
    if (*(_DWORD *)(DerivedStorage + 56) == v5)
    {
      uint64_t v29 = 0;
      if (!v3) {
        goto LABEL_75;
      }
    }
    else
    {
      uint64_t v29 = 0;
      *(_DWORD *)(DerivedStorage + 56) = v5;
      if (!v3) {
        goto LABEL_75;
      }
    }
LABEL_74:
    CFRelease(v3);
    goto LABEL_75;
  }
LABEL_88:
  uint64_t v29 = v17;
  if (v3) {
    goto LABEL_74;
  }
LABEL_75:
  if (cf) {
    CFRelease(cf);
  }
  if (timebase) {
    CFRelease(timebase);
  }
  if (v56) {
    CFRelease(v56);
  }
  if (v52) {
    CFRelease(v52);
  }
  return v29;
}

void figPlaybackCoordinator_currentItemReadyForPlayback(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4)
{
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 40) == a4)
  {
    uint64_t v7 = DerivedStorage;
    figPlaybackCoordinator_setIntegratedTimelineOffsetTimesForItem((uint64_t)a2, a4);
    if ((*(_DWORD *)(v7 + 56) & 0xFFFFFFFE) == 0x64) {
      *(_DWORD *)(v7 + 56) = 102;
    }
    figPlaybackCoordinator_startTrackingPlaybackStateIfReady((uint64_t)a2);
    if ((*(_DWORD *)(v7 + 56) - 102) <= 0x26A9)
    {
      figPlaybackCoordinator_resetTimelineCoordinatorStateToCurrentItemIdentifierAndTiming(a2);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t figPlaybackCoordinator_currentItemFailedToBecomeReadyForInspectionOrPlayback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 40) == a4 && (*(_DWORD *)(DerivedStorage + 56) - 102) > 0xFFFFFFFD)
  {
    return figPlaybackCoordinator_beginOrEndCoordinatedPlaybackNotPossibleSuspension(a2, 0, 1);
  }
  else
  {
    return FigSignalErrorAt();
  }
}

void figPlaybackCoordinator_readyForInspection(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  FigPlaybackCoordinatorGetCMBaseObject(a2);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(void *)(DerivedStorage + 40) == a4)
  {
    if (*(_DWORD *)(DerivedStorage + 56) == 100) {
      *(_DWORD *)(DerivedStorage + 56) = 101;
    }
    if (!*(unsigned char *)(DerivedStorage + 488) && !*(void *)(DerivedStorage + 472))
    {
      figPlaybackCoordinator_seekToGroupTimeIfOnlyReadyForInspection(a2);
    }
  }
  else
  {
    FigSignalErrorAt();
  }
}

uint64_t figPlaybackCoordinator_beginOrEndCoordinatedPlaybackNotPossibleSuspension(uint64_t result, int a2, int a3)
{
  uint64_t v4 = result;
  if (a2 == 1)
  {
    uint64_t result = playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive(result, a3);
    if (result)
    {
      return playbackCoordinator_endCoordinatedPlaybackNotPossibleSuspension(v4, a3);
    }
  }
  else if (!a2)
  {
    uint64_t result = playbackCoordinator_coordinatedPlaybackNotPossibleSuspensionActive(result, a3);
    if (!result)
    {
      return playbackCoordinator_beginCoordinatedPlaybackNotPossibleSuspension(v4, a3);
    }
  }
  return result;
}

uint64_t figPlaybackCoordinator_recordDateOffsetForItem(uint64_t a1, CMTime *a2)
{
  uint64_t v31 = 0;
  CMTime v30 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CMTime v29 = v30;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  uint64_t v4 = DerivedStorage;
  if (*(_DWORD *)(DerivedStorage + 56) < 0x65u)
  {
LABEL_22:
    uint64_t result = 0;
    goto LABEL_24;
  }
  uint64_t v5 = *(void *)(DerivedStorage + 40);
  uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 16);
  if (v6) {
    uint64_t v7 = v6;
  }
  else {
    uint64_t v7 = 0;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, CMTime *))(v7 + 16);
  if (!v8) {
    goto LABEL_23;
  }
  uint64_t result = v8(v5, &v30);
  if (result) {
    goto LABEL_24;
  }
  if ((v30.flags & 0x1D) == 1) {
    goto LABEL_22;
  }
  uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(v4 + 40));
  uint64_t v11 = *(void *)(CMBaseObjectGetVTable() + 8);
  uint64_t v12 = v11 ? v11 : 0;
  uint64_t v13 = *(uint64_t (**)(uint64_t, __CFString *, void, const void **))(v12 + 48);
  if (v13)
  {
    CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    uint64_t result = v13(FigBaseObject, @"currentDateAndTime", *MEMORY[0x1E4F1CF80], &v31);
    if (!result)
    {
      FigDateTimeMakeFromDictionary(v31, (uint64_t)&time);
      CMTime v28 = time;
      Float64 v15 = v25;
      int v16 = v26;
      int v17 = v27;
      CFRelease(v31);
      uint64_t result = 0;
      if (v17)
      {
        if (v16)
        {
          memset(&v23, 0, sizeof(v23));
          CMTimeMakeWithSeconds(&v23, v15, 1000000000);
          CMTime time = v28;
          Float64 Seconds = CMTimeGetSeconds(&time);
          CFDateRef v19 = CFDateCreate(v14, v15);
          CFStringRef v20 = CFCopyDescription(v19);
          if (v19) {
            CFRelease(v19);
          }
          CFStringRef v21 = CFStringCreateWithFormat(v14, 0, @"time: %f date: %@ (%f)", *(void *)&Seconds, v20, *(void *)&v15);
          if (v20) {
            CFRelease(v20);
          }
          if (v21) {
            CFRelease(v21);
          }
          CMTime time = v23;
          CMTime rhs = v28;
          CMTimeSubtract(&v29, &time, &rhs);
          goto LABEL_22;
        }
      }
    }
  }
  else
  {
LABEL_23:
    uint64_t result = 4294954514;
  }
LABEL_24:
  if (a2) {
    *a2 = v29;
  }
  if (*(_DWORD *)(v4 + 56) >= 0x66u) {
    *(CMTime *)(v4 + 324) = v29;
  }
  return result;
}

void figPlaybackCoordinator_recordInterstitialTimeRange(uint64_t a1, void *a2)
{
  CFTypeRef cf = 0;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  if (*(_DWORD *)(DerivedStorage + 56) < 0x65u
    || ((uint64_t v4 = DerivedStorage,
         uint64_t FigBaseObject = FigPlaybackItemGetFigBaseObject(*(void *)(DerivedStorage + 40)),
         (uint64_t v6 = *(void *)(CMBaseObjectGetVTable() + 8)) == 0)
      ? (uint64_t v7 = 0)
      : (uint64_t v7 = v6),
        (uint64_t v8 = *(unsigned int (**)(uint64_t, __CFString *, void, CFTypeRef *))(v7 + 48)) == 0
     || v8(FigBaseObject, @"InterstitialTimeRanges", *MEMORY[0x1E4F1CF80], &cf)))
  {
LABEL_10:
    uint64_t v9 = 0;
    goto LABEL_11;
  }
  uint64_t v9 = 0;
  if (*(_DWORD *)(v4 + 56) >= 0x66u && cf)
  {
    if (!*(void *)(v4 + 360))
    {
      uint64_t v9 = (const void *)FigCFCopyCompactDescription();
      *(void *)(v4 + 360) = CFRetain(cf);
      if (!a2) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
    goto LABEL_10;
  }
LABEL_11:
  if (!a2) {
    goto LABEL_15;
  }
LABEL_12:
  CFTypeRef v10 = cf;
  if (cf) {
    CFTypeRef v10 = CFRetain(cf);
  }
  *a2 = v10;
LABEL_15:
  if (v9) {
    CFRelease(v9);
  }
  if (cf) {
    CFRelease(cf);
  }
}

double figPlaybackCoordinator_getPlayerTimeFromGroupTime@<D0>(uint64_t a1@<X0>, CMTime *a2@<X1>, uint64_t a3@<X2>, const __CFArray *a4@<X3>, char *a5@<X4>, CMTime *a6@<X8>)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t DerivedStorage = CMBaseObjectGetDerivedStorage();
  long long v13 = *(_OWORD *)&a2->value;
  *(_OWORD *)&a6->int value = *(_OWORD *)&a2->value;
  a6->CMTimeEpoch epoch = a2->epoch;
  int v14 = *(_DWORD *)(a3 + 12);
  if (v14)
  {
    *(_OWORD *)&lhs.source.start.int value = *(_OWORD *)&a2->value;
    lhs.source.start.CMTimeEpoch epoch = a2->epoch;
    *(_OWORD *)&rhs.source.start.int value = *(_OWORD *)a3;
    rhs.source.start.CMTimeEpoch epoch = *(void *)(a3 + 16);
    CMTimeSubtract(a6, &lhs.source.start, &rhs.source.start);
  }
  else if (a4 && CFArrayGetCount(a4) >= 1)
  {
    CMTime v52 = *a2;
    CFIndex Count = CFArrayGetCount(a4);
    *(_OWORD *)CMTime time = *MEMORY[0x1E4F1FA48];
    CMTimeEpoch v16 = *(void *)(MEMORY[0x1E4F1FA48] + 16);
    *(void *)&time[16] = v16;
    *(_OWORD *)&target.start.int value = *(_OWORD *)time;
    target.start.CMTimeEpoch epoch = v16;
    if (Count >= 1)
    {
      CFIndex v17 = Count;
      CFIndex v18 = 0;
      long long v19 = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 16);
      *(_OWORD *)&lhs.source.start.int value = *MEMORY[0x1E4F1FA20];
      *(_OWORD *)&lhs.source.start.CMTimeEpoch epoch = v19;
      *(_OWORD *)&lhs.source.duration.CMTimeScale timescale = *(_OWORD *)(MEMORY[0x1E4F1FA20] + 32);
      *(_OWORD *)CMTimeScale v47 = *(_OWORD *)time;
      *(void *)&v47[16] = v16;
      do
      {
        CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(a4, v18);
        CMTimeRangeMakeFromDictionary(&lhs.source, ValueAtIndex);
        *(_OWORD *)&rhs.source.start.int value = *(_OWORD *)&lhs.source.start.value;
        rhs.source.start.CMTimeEpoch epoch = lhs.source.start.epoch;
        CMTime time2 = *(CMTime *)v47;
        CMTimeSubtract(&v54, &rhs.source.start, &time2);
        *(_OWORD *)&rhs.source.start.int value = *(_OWORD *)&target.start.value;
        rhs.source.start.CMTimeEpoch epoch = target.start.epoch;
        CMTimeAdd(&target.start, &rhs.source.start, &v54);
        *(_OWORD *)&rhs.source.start.int value = *(_OWORD *)&target.start.value;
        rhs.source.start.CMTimeEpoch epoch = target.start.epoch;
        CMTime time2 = v52;
        if ((CMTimeCompare(&rhs.source.start, &time2) & 0x80000000) == 0) {
          break;
        }
        *(_OWORD *)&rhs.source.start.int value = *(_OWORD *)time;
        rhs.source.start.CMTimeEpoch epoch = *(void *)&time[16];
        CMTime time2 = lhs.source.duration;
        CMTimeAdd((CMTime *)time, &rhs.source.start, &time2);
        *(_OWORD *)&rhs.source.start.int value = *(_OWORD *)&lhs.source.start.value;
        *(_OWORD *)&rhs.source.start.CMTimeEpoch epoch = *(_OWORD *)&lhs.source.start.epoch;
        *(_OWORD *)&rhs.source.duration.CMTimeScale timescale = *(_OWORD *)&lhs.source.duration.timescale;
        CMTimeRangeGetEnd((CMTime *)v47, &rhs.source);
        ++v18;
      }
      while (v17 != v18);
    }
    lhs.source.CMTime start = v52;
    *(_OWORD *)&rhs.source.start.int value = *(_OWORD *)time;
    rhs.source.start.CMTimeEpoch epoch = *(void *)&time[16];
    CMTimeAdd((CMTime *)v47, &lhs.source.start, &rhs.source.start);
    char v21 = 0;
    *(void *)&long long v13 = *(void *)v47;
    *(_OWORD *)&a6->int value = *(_OWORD *)v47;
    a6->CMTimeEpoch epoch = *(void *)&v47[16];
    goto LABEL_11;
  }
  char v21 = 1;
LABEL_11:
  CFArrayRef v22 = *(const __CFArray **)(DerivedStorage + 472);
  if (!v22) {
    goto LABEL_45;
  }
  CFIndex v23 = CFArrayGetCount(v22);
  char v24 = v21 ^ 1;
  if (v23 < 1) {
    char v24 = 1;
  }
  if (v24)
  {
LABEL_45:
    char v35 = 0;
    if (!a5) {
      return *(double *)&v13;
    }
    goto LABEL_46;
  }
  long long v38 = *(_OWORD *)&a6->value;
  CMTimeEpoch epoch = a6->epoch;
  FigPlaybackCoordinatorGetCMBaseObject(a1);
  uint64_t v25 = CMBaseObjectGetDerivedStorage();
  CMTime v40 = *(CMTime *)*(void *)&MEMORY[0x1E4F1F9F8];
  CFArrayRef v26 = *(const __CFArray **)(v25 + 472);
  if (!v26 || (v27 = CFArrayGetCount(v26), CFIndex v28 = v27 - 1, v27 < 1))
  {
LABEL_49:
    char v35 = 0;
    goto LABEL_50;
  }
  CFIndex v29 = v27;
  CFIndex v30 = 0;
  while (1)
  {
    CFDictionaryRef v31 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v25 + 472), v30);
    memset(&lhs, 0, sizeof(lhs));
    CMTimeMappingMakeFromDictionary(&lhs, v31);
    CMTimeRange target = lhs.target;
    *(_OWORD *)&rhs.source.start.int value = v38;
    memset(&v54, 0, sizeof(v54));
    rhs.source.start.CMTimeEpoch epoch = epoch;
    *(_OWORD *)CMTime time = *(_OWORD *)&lhs.target.start.value;
    *(void *)&time[16] = lhs.target.start.epoch;
    CMTimeSubtract(&v54, &rhs.source.start, (CMTime *)time);
    rhs.CMTimeRange source = target;
    *(_OWORD *)CMTime time = v38;
    *(void *)&time[16] = epoch;
    if (CMTimeRangeContainsTime(&rhs.source, (CMTime *)time)
      || (rhs.source.CMTime start = v54,
          CMTimeAbsoluteValue(&time2, &rhs.source.start),
          CMTimeMake(&v52, 350, 1000),
          CMTimeCompare(&time2, &v52) < 0)
      || (rhs.CMTimeRange source = target,
          CMTimeRangeGetEnd(&time1, &rhs.source),
          *(_OWORD *)&rhs.source.start.int value = v38,
          rhs.source.start.CMTimeEpoch epoch = epoch,
          !CMTimeCompare(&time1, &rhs.source.start)))
    {
LABEL_48:
      *(_OWORD *)&rhs.source.start.int value = *(_OWORD *)&lhs.source.start.value;
      rhs.source.start.CMTimeEpoch epoch = lhs.source.start.epoch;
      *(CMTime *)CMTime time = v54;
      CMTimeAdd(&v40, &rhs.source.start, (CMTime *)time);
      goto LABEL_49;
    }
    if (!*(unsigned char *)(v25 + 488))
    {
      if ((v14 & 1) == 0 || v28 != v30) {
        goto LABEL_32;
      }
      goto LABEL_29;
    }
    rhs.CMTimeRange source = target;
    CMTimeRangeGetEnd(&v50, &rhs.source);
    *(_OWORD *)&rhs.source.start.int value = v38;
    rhs.source.start.CMTimeEpoch epoch = epoch;
    if (CMTimeCompare(&rhs.source.start, &v50) >= 1)
    {
      char v35 = 0;
      CMTime v40 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA10];
      goto LABEL_50;
    }
    int v32 = *(unsigned __int8 *)(v25 + 488);
    if ((v14 & 1) != 0 && v28 == v30)
    {
      if (*(unsigned char *)(v25 + 488)) {
        goto LABEL_43;
      }
LABEL_29:
      rhs.CMTimeRange source = target;
      CMTimeRangeGetEnd(&v49, &rhs.source);
      *(_OWORD *)&rhs.source.start.int value = v38;
      rhs.source.start.CMTimeEpoch epoch = epoch;
      if (CMTimeCompare(&rhs.source.start, &v49) > 0) {
        goto LABEL_48;
      }
      int v32 = *(unsigned __int8 *)(v25 + 488);
    }
    if (v32) {
      goto LABEL_43;
    }
LABEL_32:
    if (v40.flags) {
      goto LABEL_43;
    }
    *(_OWORD *)CMTimeScale v47 = *(_OWORD *)&lhs.source.start.value;
    *(_OWORD *)&v47[16] = *(_OWORD *)&lhs.source.start.epoch;
    long long v48 = *(_OWORD *)&lhs.source.duration.timescale;
    if (v30 + 1 >= v29) {
      break;
    }
    CFDictionaryRef v33 = (const __CFDictionary *)CFArrayGetValueAtIndex(*(CFArrayRef *)(v25 + 472), v30 + 1);
    CMTimeMappingMakeFromDictionary(&rhs, v33);
    *(_OWORD *)CMTime time = *(_OWORD *)&rhs.source.start.value;
    *(_OWORD *)&time[16] = *(_OWORD *)&rhs.source.start.epoch;
    v58[0] = *(_OWORD *)&rhs.source.duration.timescale;
    *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)((char *)&rhs.source.duration.epoch + 4);
    CMTimeFlags flags = rhs.target.start.flags;
    if ((rhs.target.start.flags & 1) != 0
      && (rhs.target.duration.flags & 1) != 0
      && !rhs.target.duration.epoch
      && (rhs.target.duration.value & 0x8000000000000000) == 0)
    {
      CMTimeEpoch v37 = rhs.target.start.epoch;
      rhs.CMTimeRange source = target;
      CMTimeRangeGetEnd(&v45, &rhs.source);
      *(_OWORD *)&rhs.source.start.int value = v38;
      rhs.source.start.CMTimeEpoch epoch = epoch;
      if (CMTimeCompare(&rhs.source.start, &v45) >= 1)
      {
        *(_OWORD *)&rhs.source.start.int value = v38;
        rhs.source.start.CMTimeEpoch epoch = epoch;
        v44.int value = *(void *)&v58[1];
        v44.CMTimeScale timescale = DWORD2(v58[1]);
        v44.CMTimeFlags flags = flags;
        v44.CMTimeEpoch epoch = v37;
        if (CMTimeCompare(&rhs.source.start, &v44) < 0) {
          goto LABEL_53;
        }
      }
    }
LABEL_43:
    if (v29 == ++v30) {
      goto LABEL_49;
    }
  }
  if (v28 != v30) {
    goto LABEL_43;
  }
  rhs.CMTimeRange source = target;
  CMTimeRangeGetEnd(&v41, &rhs.source);
  *(_OWORD *)&rhs.source.start.int value = v38;
  rhs.source.start.CMTimeEpoch epoch = epoch;
  if (CMTimeCompare(&rhs.source.start, &v41) < 1) {
    goto LABEL_43;
  }
LABEL_53:
  *(_OWORD *)&rhs.source.start.int value = *(_OWORD *)v47;
  *(_OWORD *)&rhs.source.start.CMTimeEpoch epoch = *(_OWORD *)&v47[16];
  *(_OWORD *)&rhs.source.duration.CMTimeScale timescale = v48;
  CMTimeRangeGetEnd(&v44, &rhs.source);
  CMTimeMake(&rhs.source.start, 350, 1000);
  CMTimeSubtract(&v40, &v44, &rhs.source.start);
  CMTime v43 = v40;
  CMTime v42 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  if (CMTimeCompare(&v43, &v42) < 0) {
    CMTime v40 = *(CMTime *)*(void *)&MEMORY[0x1E4F1FA48];
  }
  char v35 = 1;
LABEL_50:
  *(void *)&long long v13 = v40.value;
  *a6 = v40;
  if (a5) {
LABEL_46:
  }
    *a5 = v35;
  return *(double *)&v13;
}