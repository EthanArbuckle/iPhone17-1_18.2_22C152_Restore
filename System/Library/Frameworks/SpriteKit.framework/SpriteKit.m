void SKCLightNode::SKCLightNode(SKCLightNode *this)
{
  uint64_t v1;

  SKCNode::SKCNode(this);
  *(void *)v1 = &unk_26BEEC320;
  *(void *)(v1 + 560) = 0;
  *(void *)(v1 + 576) = 0;
  *(void *)(v1 + 568) = 0;
  *(unsigned char *)(v1 + 584) = 1;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(v1 + 592) = _Q0;
  *(_OWORD *)(v1 + 608) = xmmword_20AE9A910;
  *(_OWORD *)(v1 + 624) = xmmword_20AE9A920;
  *(void *)(v1 + 640) = 0x13F800000;
}

uint64_t SKCLightNode::generatesVisibleGeometry(SKCLightNode *this, const simd_float4x4 *a2)
{
  return 1;
}

double SKCLightNode::getBatchInfo@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(void *)&double result = 0x300000000;
  *(void *)(a1 + 4) = 0x300000000;
  *(unsigned char *)a1 = 1;
  return result;
}

uint64_t SKCLightNode::getNeedsCustomRenderOps()
{
  return 1;
}

uint64_t SKCLightNode::addBatchRenderElements()
{
  return 0;
}

ShadowInfo *SKCLightNode::addRenderOps(ShadowInfo *result, uint64_t *a2, uint64_t **a3)
{
  uint64_t v3 = *((void *)result + 72);
  if (v3)
  {
    uint64_t v5 = *(void *)(v3 + 32);
    uint64_t v4 = *(void *)(v3 + 40);
    if (v5 != v4)
    {
      v8 = result;
      unint64_t v9 = (unint64_t)(v4 - v5) >> 3;
      int v10 = 4 * v9;
      int v11 = 3 * v9;
      if (*(_DWORD *)(a2[50] + 48) < (2 * v11))
      {
        v12 = a2 + 50;
        SKCRendererEnsureBufferCapacity(a2 + 50, 0, 2 * v11);
        SKCRendererGenerateQuadIndexBufferData<unsigned short>((unsigned int **)a2 + 50);
        (*(void (**)(void, void, void))(*(void *)*v12 + 24))(*v12, 0, 0);
      }
      v13 = (jet_buffer_pool *)*((void *)v8 + 70);
      if (!v13
        || *((_DWORD *)v13 + 4) < (v10 + 4)
        && ((v14 = (std::__shared_weak_count *)*((void *)v8 + 71), *((_OWORD *)v8 + 35) = 0u, !v14)
         || (std::__shared_weak_count::__release_shared[abi:ne180100](v14),
             (v13 = (jet_buffer_pool *)*((void *)v8 + 70)) == 0)))
      {
        SKCRenderer::getBackingContext(a2[13], &v48);
        uint64_t v15 = (*(uint64_t (**)(uint64_t, void, uint64_t, void))(*(void *)v48 + 16))(v48, 0, 4, (v10 + 4));
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&__p, v15);
      }
      jet_buffer_pool::next_buffer(v13);
      data = (_OWORD *)jet_buffer_pool::get_data(*((jet_buffer_pool **)v8 + 70));
      _OWORD *data = xmmword_20AE9A930;
      data[1] = xmmword_20AE9A940;
      data[2] = xmmword_20AE9A950;
      data[3] = xmmword_20AE9A960;
      uint64_t v17 = *((void *)v8 + 72);
      v18 = *(float32x2_t ***)(v17 + 32);
      v19 = *(float32x2_t ***)(v17 + 40);
      if (v18 != v19)
      {
        unsigned int v20 = 4;
        do
        {
          v21 = *v18++;
          *(float32x2_t *)&long long v22 = v21[1];
          *((void *)&v22 + 1) = 0x3F80000000000000;
          data[v20] = v22;
          *(float32x2_t *)&long long v22 = *v21;
          *((void *)&v22 + 1) = 0x3F80000000000000;
          data[v20 + 1] = v22;
          float32x2_t v23 = vsub_f32(*v21, *(float32x2_t *)(*((void *)v8 + 72) + 16));
          *(float32x2_t *)&long long v22 = vmla_n_f32(*v21, v23, 20.0/ sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v23, v23).i32[1]), v23.f32[0], v23.f32[0])));
          *((void *)&v22 + 1) = 0x3F80000000000000;
          data[v20 + 2] = v22;
          float32x2_t v24 = v21[1];
          *(float32x2_t *)&long long v22 = vsub_f32(v24, *(float32x2_t *)(*((void *)v8 + 72) + 16));
          *(float32x2_t *)&long long v25 = vmla_n_f32(v24, *(float32x2_t *)&v22, 20.0/ sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(*(float32x2_t *)&v22, *(float32x2_t *)&v22).i32[1]), *(float *)&v22, *(float *)&v22)));
          unsigned int v26 = v20 + 3;
          *((void *)&v25 + 1) = 0x3F80000000000000;
          v20 += 4;
          data[v26] = v25;
        }
        while (v18 != v19);
      }
      jet_buffer_pool::commit_data(*((jet_buffer_pool **)v8 + 70));
      float32x4_t v45 = *((float32x4_t *)v8 + 39);
      v27 = *a3;
      uint64_t v28 = a2[17];
      LODWORD(__p.__r_.__value_.__l.__data_) = 31;
      unint64_t v29 = v27[2];
      if (v29 >= v27[3])
      {
        uint64_t v30 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v27 + 1, (int *)&__p);
      }
      else
      {
        *(void *)unint64_t v29 = &unk_26BEEC420;
        *(_DWORD *)(v29 + 8) = 31;
        *(void *)(v29 + 24) = 0;
        *(void *)(v29 + 32) = 0;
        *(void *)(v29 + 16) = 0;
        *(void *)(v29 + 64) = 0;
        uint64_t v30 = v29 + 192;
        *(void *)(v29 + 96) = 0;
      }
      v27[2] = v30;
      *(void *)(v30 - 80) = v28;
      *(_OWORD *)(v30 - 64) = xmmword_20AE9A970;
      *(void *)(v30 - 48) = 0x2300000000;
      v31 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
      uint64_t current_buffer = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)v8 + 70));
      jet_command_buffer::set_vertex_buffer(v31, &__p, current_buffer);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      jet_command_buffer::use_depth_stencil_mode(*a3, a2[68]);
      jet_command_buffer::set_stencil_reference_value((jet_command_buffer *)*a3, 0);
      jet_command_buffer::draw_indexed(*a3, 3, a2[50], 0, 6);
      uint64_t v33 = a2[83];
      ++*(_DWORD *)(v33 + 164);
      ++*(_DWORD *)(v33 + 148);
      uint64_t v34 = (*(void *)(*((void *)v8 + 72) + 40) - *(void *)(*((void *)v8 + 72) + 32)) >> 3;
      jet_command_buffer::set_stencil_reference_value((jet_command_buffer *)*a3, 1);
      jet_command_buffer::draw_indexed(*a3, 3, a2[50], 6, 6 * v34);
      uint64_t v35 = a2[83];
      ++*(_DWORD *)(v35 + 164);
      *(_DWORD *)(v35 + 148) += v34;
      v36 = *a3;
      uint64_t v37 = a2[19];
      LODWORD(__p.__r_.__value_.__l.__data_) = 31;
      unint64_t v38 = v36[2];
      if (v38 >= v36[3])
      {
        uint64_t v39 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v36 + 1, (int *)&__p);
      }
      else
      {
        *(void *)unint64_t v38 = &unk_26BEEC420;
        *(_DWORD *)(v38 + 8) = 31;
        *(void *)(v38 + 24) = 0;
        *(void *)(v38 + 32) = 0;
        *(void *)(v38 + 16) = 0;
        *(void *)(v38 + 64) = 0;
        uint64_t v39 = v38 + 192;
        *(void *)(v38 + 96) = 0;
      }
      v36[2] = v39;
      *(void *)(v39 - 80) = v37;
      *(_OWORD *)(v39 - 64) = xmmword_20AE9A980;
      *(void *)(v39 - 48) = 0x230000000FLL;
      v40 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
      uint64_t v41 = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)v8 + 70));
      jet_command_buffer::set_vertex_buffer(v40, &__p, v41);
      float32x4_t v42 = v45;
      v42.i32[3] = 1.0;
      __n128 v46 = (__n128)vmulq_laneq_f32(v42, v45, 3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v43 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__p, "u_color");
      jet_command_buffer::set_fragment_constant_value(v43, &__p, v46);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      jet_command_buffer::use_depth_stencil_mode(*a3, a2[70]);
      jet_command_buffer::set_stencil_reference_value((jet_command_buffer *)*a3, 0);
      jet_command_buffer::draw_indexed(*a3, 3, a2[50], 0, 6);
      uint64_t v44 = a2[83];
      ++*(_DWORD *)(v44 + 164);
      ++*(_DWORD *)(v44 + 148);
      jet_command_buffer::use_depth_stencil_mode(*a3, 0);
      double result = (ShadowInfo *)*((void *)v8 + 72);
      if (result)
      {
        ShadowInfo::~ShadowInfo(result);
        double result = (ShadowInfo *)MEMORY[0x21052EA30]();
      }
      *((void *)v8 + 72) = 0;
    }
  }
  return result;
}

void sub_20ADC5C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SKCRendererGenerateQuadIndexBufferData<unsigned short>(unsigned int **a1)
{
  v1 = *a1;
  uint64_t v2 = v1[12];
  uint64_t result = (*(uint64_t (**)(unsigned int *))(*(void *)v1 + 16))(v1);
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
      *(_WORD *)(result + 2 * i) = word_20AE9A9C0[i % 6] + 4 * (i / 6);
  }
  return result;
}

std::string *jet_command_buffer::set_vertex_buffer(uint64_t *a1, std::string *__str, uint64_t a3)
{
  int v9 = 5;
  unint64_t v6 = a1[2];
  if (v6 >= a1[3])
  {
    uint64_t v7 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v9);
  }
  else
  {
    *(void *)unint64_t v6 = &unk_26BEEC420;
    *(_DWORD *)(v6 + 8) = 5;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 64) = 0;
    uint64_t v7 = v6 + 192;
    *(void *)(v6 + 96) = 0;
  }
  a1[2] = v7;
  *(void *)(v7 - 80) = a3;
  return std::string::operator=((std::string *)(v7 - 176), __str);
}

uint64_t jet_command_buffer::use_depth_stencil_mode(uint64_t *a1, uint64_t a2)
{
  int v6 = 2;
  unint64_t v4 = a1[2];
  if (v4 >= a1[3])
  {
    uint64_t result = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v6);
  }
  else
  {
    *(void *)unint64_t v4 = &unk_26BEEC420;
    *(_DWORD *)(v4 + 8) = 2;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 64) = 0;
    uint64_t result = v4 + 192;
    *(void *)(v4 + 96) = 0;
  }
  a1[2] = result;
  *(void *)(result - 80) = a2;
  return result;
}

uint64_t jet_command_buffer::set_stencil_reference_value(jet_command_buffer *this, int a2)
{
  int v6 = 10;
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 3))
  {
    uint64_t result = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>((uint64_t *)this + 1, &v6);
  }
  else
  {
    *(void *)unint64_t v4 = &unk_26BEEC420;
    *(_DWORD *)(v4 + 8) = 10;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 64) = 0;
    uint64_t result = v4 + 192;
    *(void *)(v4 + 96) = 0;
  }
  *((void *)this + 2) = result;
  *(_DWORD *)(result - 64) = a2;
  return result;
}

uint64_t jet_command_buffer::draw_indexed(uint64_t *a1, int a2, uint64_t a3, int a4, int a5)
{
  int v12 = 4;
  unint64_t v10 = a1[2];
  if (v10 >= a1[3])
  {
    uint64_t result = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v12);
  }
  else
  {
    *(void *)unint64_t v10 = &unk_26BEEC420;
    *(_DWORD *)(v10 + 8) = 4;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 64) = 0;
    uint64_t result = v10 + 192;
    *(void *)(v10 + 96) = 0;
  }
  a1[2] = result;
  *(void *)(result - 80) = a3;
  *(_DWORD *)(result - 64) = a2;
  *(_DWORD *)(result - 60) = a4;
  *(_DWORD *)(result - 56) = a5;
  return result;
}

__n128 jet_command_buffer::set_fragment_constant_value(uint64_t *a1, std::string *__str, __n128 a3)
{
  int v9 = 25;
  unint64_t v5 = a1[2];
  if (v5 >= a1[3])
  {
    uint64_t v6 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v9);
  }
  else
  {
    *(void *)unint64_t v5 = &unk_26BEEC420;
    *(_DWORD *)(v5 + 8) = 25;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 64) = 0;
    uint64_t v6 = v5 + 192;
    *(void *)(v5 + 96) = 0;
  }
  a1[2] = v6;
  std::string::operator=((std::string *)(v6 - 176), __str);
  __n128 result = a3;
  *(__n128 *)(v6 - 64) = a3;
  return result;
}

void SKCLightNode::generateShadowGeometry(uint64_t a1)
{
  uint64_t v2 = *(ShadowInfo **)(a1 + 576);
  if (v2)
  {
    ShadowInfo::~ShadowInfo(v2);
    MEMORY[0x21052EA30]();
  }
  *(void *)(a1 + 576) = 0;
  operator new();
}

void sub_20ADC68D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36)
{
  if (a36) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a36);
  }
  _Unwind_Resume(exception_object);
}

void SKCLightNode::~SKCLightNode(SKCLightNode *this)
{
  *(void *)this = &unk_26BEEC320;
  uint64_t v2 = (ShadowInfo *)*((void *)this + 72);
  if (v2)
  {
    ShadowInfo::~ShadowInfo(v2);
    MEMORY[0x21052EA30]();
  }
  *((void *)this + 72) = 0;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 71);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  SKCNode::~SKCNode((id *)this);
}

{
  uint64_t vars8;

  SKCLightNode::~SKCLightNode(this);

  JUMPOUT(0x21052EA30);
}

uint64_t SKCLightNode::isLightNode(SKCLightNode *this)
{
  return 1;
}

uint64_t std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(uint64_t *a1, int *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 6);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555) {
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 6);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x155555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<jet_render_op>>(v7, v9);
  int v11 = &v10[192 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[192 * v12];
  int v13 = *a2;
  *(void *)int v11 = &unk_26BEEC420;
  *((_DWORD *)v11 + 2) = v13;
  *((void *)v11 + 3) = 0;
  *((void *)v11 + 4) = 0;
  *((void *)v11 + 2) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 12) = 0;
  v16[2] = v11 + 192;
  std::vector<jet_render_op>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<jet_render_op>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_20ADC6AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<jet_render_op>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void jet_render_op::~jet_render_op(jet_render_op *this)
{
  jet_render_op::~jet_render_op(this);

  JUMPOUT(0x21052EA30);
}

{
  *(void *)this = &unk_26BEEC420;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 9);
  std::__function::__value_func<void ()(jet_context *)>::~__value_func[abi:ne180100]((void *)this + 5);
  if (*((char *)this + 39) < 0) {
    operator delete(*((void **)this + 2));
  }
}

void *std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(jet_context *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::vector<jet_render_op>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<jet_render_op>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<jet_render_op>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_263FE9C20, MEMORY[0x263F8C060]);
}

void sub_20ADC6D78(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<jet_render_op>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(192 * a2);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<jet_render_op>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  for (uint64_t i = 0;
        a3 + i != a5;
        std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op const&>(a1, i + a7, i + a3))
  {
    i -= 192;
  }
  return a6;
}

__n128 std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op const&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26BEEC420;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  uint64_t v5 = (std::string *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100](a2 + 40, a3 + 40);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a2 + 72, a3 + 72);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  __n128 result = *(__n128 *)(a3 + 128);
  long long v8 = *(_OWORD *)(a3 + 144);
  long long v9 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 176) = v9;
  *(__n128 *)(a2 + 128) = result;
  *(_OWORD *)(a2 + 144) = v8;
  return result;
}

void sub_20ADC6F84(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(jet_context *)>::~__value_func[abi:ne180100](v3);
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  uint64_t v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    long long v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    uint64_t v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }

  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__split_buffer<jet_render_op>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 192);
    *(void *)(a1 + 16) = i - 192;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ShadowInfo::~ShadowInfo(ShadowInfo *this)
{
  uint64_t v2 = (void *)*((void *)this + 4);
  uint64_t v3 = (void *)*((void *)this + 5);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        MEMORY[0x21052EA30](*v2, 0x1000C40E0EAB150);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)*((void *)this + 4);
  }
  if (v2)
  {
    *((void *)this + 5) = v2;
    operator delete(v2);
  }
}

void std::__shared_weak_count::__release_shared[abi:ne180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20ADC7354(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_buffer_pool *,std::shared_ptr<jet_buffer_pool>::__shared_ptr_default_delete<jet_buffer_pool,jet_buffer_pool>,std::allocator<jet_buffer_pool>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_buffer_pool *,std::shared_ptr<jet_buffer_pool>::__shared_ptr_default_delete<jet_buffer_pool,jet_buffer_pool>,std::allocator<jet_buffer_pool>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_buffer_pool *,std::shared_ptr<jet_buffer_pool>::__shared_ptr_default_delete<jet_buffer_pool,jet_buffer_pool>,std::allocator<jet_buffer_pool>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

BOOL std::type_info::operator==[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::string::basic_string[abi:ne180100]<0>(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    std::string::size_type v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    std::string::size_type v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a2);
}

void sub_20ADC76BC(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x10A1C4099F0538BLL);

  _Unwind_Resume(a1);
}

SKCAction *SKCReferencedAction::setReferencedCAction(SKCReferencedAction *this, SKCAction *a2)
{
  if (a2) {
    ++a2->var1;
  }
  uint64_t result = this->var19;
  if (result)
  {
    int v5 = result->var1 - 1;
    result->var1 = v5;
    if (!v5) {
      uint64_t result = (SKCAction *)(*((uint64_t (**)(SKCAction *))result->var0 + 1))(result);
    }
  }
  this->var19 = a2;
  return result;
}

void sub_20ADC793C(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v3, 0x10A1C4099F0538BLL);

  _Unwind_Resume(a1);
}

void sub_20ADC79E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADC7AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADC7B88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADC7CA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADC7ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCReferencedAction::~SKCReferencedAction(SKCReferencedAction *this)
{
  SKCReferencedAction::~SKCReferencedAction(this);

  JUMPOUT(0x21052EA30);
}

{
  SKCAction *var19;
  int v3;
  uint64_t vars8;

  this->var0 = (void **)&unk_26BEEC4C8;
  var19 = this->var19;
  if (var19)
  {
    uint64_t v3 = var19->var1 - 1;
    var19->var1 = v3;
    if (!v3) {
      (*((void (**)(SKCAction *))var19->var0 + 1))(var19);
    }
  }
  this->var19 = 0;

  SKCAction::~SKCAction((SKCAction *)this);
}

SKCAction *SKCReferencedAction::setBaseSpeed(SKCReferencedAction *this, float a2)
{
  if (!this->var19) {
    [this->var4 _ensureReferencedAction];
  }
  SKCAction::setBaseSpeed((SKCAction *)this, a2);
  uint64_t result = this->var19;
  if (result)
  {
    v4.n128_f32[0] = this->var17 * this->var16;
    std::string::size_type v6 = (uint64_t (*)(__n128))*((void *)result->var0 + 5);
    return (SKCAction *)v6(v4);
  }
  return result;
}

SKCAction *SKCReferencedAction::setSpeed(SKCReferencedAction *this, float a2)
{
  if (!this->var19) {
    [this->var4 _ensureReferencedAction];
  }
  SKCAction::setSpeed((SKCAction *)this, a2);
  uint64_t result = this->var19;
  if (result)
  {
    v4.n128_f32[0] = this->var17 * this->var16;
    std::string::size_type v6 = (uint64_t (*)(__n128))*((void *)result->var0 + 5);
    return (SKCAction *)v6(v4);
  }
  return result;
}

void SKCReferencedAction::cpp_updateWithTargetForTime(SKCReferencedAction *this, SKCNode *a2, double a3)
{
  var19 = this->var19;
  if (!var19)
  {
    [this->var4 _ensureReferencedAction];
    var19 = this->var19;
  }
  if (var19->var5) {
    (*((void (**)(SKCAction *, SKCNode *, double))var19->var0 + 7))(var19, a2, a3);
  }
  else {
    SKCAction::updateWithTargetForTime(var19, a2, a3);
  }
  uint64_t v7 = this->var19;
  if (!v7->var5)
  {
    if (![v7->var4 finished]) {
      return;
    }
    uint64_t v7 = this->var19;
    goto LABEL_11;
  }
  if (v7->var11)
  {
LABEL_11:
    v8.n128_f64[0] = (*((double (**)(SKCAction *))v7->var0 + 2))(v7);
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, v8);
    this->var10 = (*((double (**)(SKCAction *))this->var19->var0 + 2))(this->var19);
  }
}

uint64_t SKCReferencedAction::cpp_wasAddedToTargetAtTime(SKCReferencedAction *this, SKCNode *a2, double a3)
{
  if (!this->var19) {
    [this->var4 _ensureReferencedAction];
  }
  SKCAction::cpp_wasAddedToTargetAtTime((SKCAction *)this, a2, a3);
  var19 = this->var19;

  return SKCAction::wasAddedToTargetAtTime(var19, a2, a3);
}

SKCAction *SKCReferencedAction::cpp_wasRemovedFromTargetAtTime(SKCReferencedAction *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_wasRemovedFromTargetAtTime((SKCAction *)this, a2, a3);
  uint64_t result = this->var19;
  if (result)
  {
    return (SKCAction *)SKCAction::wasRemovedFromTargetAtTime(result, a2, a3);
  }
  return result;
}

uint64_t SKCReferencedAction::cpp_willStartWithTargetAtTime(SKCReferencedAction *this, SKCNode *a2, double a3)
{
  if (!this->var19) {
    [this->var4 _ensureReferencedAction];
  }
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  var19 = this->var19;

  return SKCAction::willStartWithTargetAtTime(var19, a2, a3);
}

uint64_t SKCReferencedAction::cpp_wasPausedWithTargetAtTime(SKCReferencedAction *this, SKCNode *a2, double a3)
{
  if (!this->var19) {
    [this->var4 _ensureReferencedAction];
  }
  SKCAction::cpp_wasPausedWithTargetAtTime((SKCAction *)this, a2, a3);
  var19 = this->var19;

  return SKCAction::wasPausedWithTargetAtTime(var19, a2, a3);
}

uint64_t SKCReferencedAction::cpp_willResumeWithTargetAtTime(SKCReferencedAction *this, SKCNode *a2, double a3)
{
  if (!this->var19) {
    [this->var4 _ensureReferencedAction];
  }
  SKCAction::cpp_willResumeWithTargetAtTime((SKCAction *)this, a2, a3);
  var19 = this->var19;

  return SKCAction::willResumeWithTargetAtTime(var19, a2, a3);
}

void sub_20ADC84CC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x21052EA30](v3, 0x10A1C4017155BB2);

  _Unwind_Resume(a1);
}

void sub_20ADC8780(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADC8844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADC8F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADC8FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADC92E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADC9528(_Unwind_Exception *a1)
{
  __n128 v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20ADC95C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADCA3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,uint64_t a24,char a25,void *a26,uint64_t a27,char a28,void *a29,uint64_t a30,char a31,void *a32)
{
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)&a25, a26);
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)&a28, a29);
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::destroy((uint64_t)&a31, a32);

  _Unwind_Resume(a1);
}

void sub_20ADCA74C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCA908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCAB1C(_Unwind_Exception *a1)
{
  __n128 v4 = v3;

  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v7 = a1 + 1;
  std::string::size_type v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        std::string::size_type v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      std::string::size_type v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x30uLL);
    v11[16] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  int v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      __n128 v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), int v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            long long v9 = (uint64_t **)a2[2];
          }
          else
          {
            long long v9 = (uint64_t **)v2[1];
            unsigned int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *long long v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), int v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *int v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t **std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__tree_node<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,void *> *,long>>(uint64_t **result, id *a2, id *a3)
{
  int v5 = result;
  if (result[2])
  {
    int v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unsigned int v8 = (uint64_t *)v6[1];
    }
    else {
      unsigned int v8 = v6;
    }
    uint64_t v14 = result;
    uint64_t v15 = v8;
    v16 = v8;
    if (v8)
    {
      uint64_t v15 = std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        long long v9 = a2;
        do
        {
          *((_WORD *)v8 + 16) = *((_WORD *)v9 + 16);
          objc_storeStrong((id *)v8 + 5, v9[5]);
          std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__node_insert_multi(v5, (uint64_t)v8);
          unsigned int v8 = v15;
          v16 = v15;
          if (v15) {
            uint64_t v15 = std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          unsigned int v10 = (id *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unsigned int v10 = (id *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (id *)v9[2];
              BOOL v11 = *a2 == v9;
              long long v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          long long v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__emplace_multi<std::pair<unsigned short const,SKSpriteNode * {__strong}> const&>(v5, a2 + 4);
      uint64_t v12 = (id *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (id *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (id *)a2[2];
          BOOL v11 = *v13 == a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_20ADCB0E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  __n128 v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(unsigned __int16 *)(a2 + 32) >= *((unsigned __int16 *)v4 + 16)) {
          break;
        }
        __n128 v4 = (uint64_t *)*v4;
        int v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      __n128 v4 = (uint64_t *)v4[1];
    }
    while (v4);
    int v5 = v3 + 1;
  }
  else
  {
    int v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

void *std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next(uint64_t a1)
{
  uint64_t result = *(void **)(a1 + 16);
  if (result)
  {
    uint64_t v3 = (void *)*result;
    if (*result == a1)
    {
      *uint64_t result = 0;
      while (1)
      {
        __n128 v4 = (void *)result[1];
        if (!v4) {
          break;
        }
        do
        {
          uint64_t result = v4;
          __n128 v4 = (void *)*v4;
        }
        while (v4);
      }
    }
    else
    {
      for (result[1] = 0; v3; uint64_t v3 = (void *)result[1])
      {
        do
        {
          uint64_t result = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

_WORD *std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__emplace_multi<std::pair<unsigned short const,SKSpriteNode * {__strong}> const&>(uint64_t **a1, id *a2)
{
  __n128 v4 = operator new(0x30uLL);
  unsigned int v5 = *(unsigned __int16 *)a2;
  v4[16] = v5;
  id v6 = a2[1];
  uint64_t v7 = a1 + 1;
  unsigned int v8 = a1[1];
  *((void *)v4 + 5) = v6;
  if (v8)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v8;
        if (v5 >= *((unsigned __int16 *)v8 + 16)) {
          break;
        }
        unsigned int v8 = (uint64_t *)*v8;
        long long v9 = v7;
        if (!*v7) {
          goto LABEL_8;
        }
      }
      unsigned int v8 = (uint64_t *)v8[1];
    }
    while (v8);
    long long v9 = v7 + 1;
  }
  else
  {
    long long v9 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v7, v9, (uint64_t *)v4);
  return v4;
}

uint64_t **std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned short,double>,std::__tree_node<std::__value_type<unsigned short,double>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  unsigned int v5 = result;
  if (result[2])
  {
    id v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unsigned int v8 = (uint64_t *)v6[1];
    }
    else {
      unsigned int v8 = v6;
    }
    uint64_t v14 = result;
    uint64_t v15 = v8;
    v16 = v8;
    if (v8)
    {
      uint64_t v15 = std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        long long v9 = a2;
        do
        {
          *((_WORD *)v8 + 16) = *((_WORD *)v9 + 16);
          v8[5] = v9[5];
          std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__node_insert_multi(v5, (uint64_t)v8);
          unsigned int v8 = v15;
          v16 = v15;
          if (v15) {
            uint64_t v15 = std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          unsigned int v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unsigned int v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              long long v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          long long v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::__emplace_multi<std::pair<unsigned short const,double> const&>(v5, (_OWORD *)a2 + 2);
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_20ADCB40C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(*(void *)a1, v2);
  }
  return a1;
}

unsigned __int16 *std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::__emplace_multi<std::pair<unsigned short const,double> const&>(uint64_t **a1, _OWORD *a2)
{
  __n128 v4 = (unsigned __int16 *)operator new(0x30uLL);
  unsigned int v5 = v4;
  *((_OWORD *)v4 + 2) = *a2;
  id v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        id v6 = (uint64_t **)v7;
        if (v4[16] >= *((unsigned __int16 *)v7 + 16)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        unsigned int v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    unsigned int v8 = v6 + 1;
  }
  else
  {
    unsigned int v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

uint64_t **std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<unsigned int,double>,std::__tree_node<std::__value_type<unsigned int,double>,void *> *,long>>(uint64_t **result, void *a2, void *a3)
{
  unsigned int v5 = result;
  if (result[2])
  {
    id v6 = *result;
    uint64_t v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unsigned int v8 = (uint64_t *)v6[1];
    }
    else {
      unsigned int v8 = v6;
    }
    uint64_t v14 = result;
    uint64_t v15 = v8;
    v16 = v8;
    if (v8)
    {
      uint64_t v15 = std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        long long v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          v8[5] = v9[5];
          std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__node_insert_multi(v5, (uint64_t)v8);
          unsigned int v8 = v15;
          v16 = v15;
          if (v15) {
            uint64_t v15 = std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::_DetachedTreeCache::__detach_next((uint64_t)v15);
          }
          unsigned int v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unsigned int v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              long long v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          long long v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__emplace_multi<std::pair<unsigned int const,double> const&>(v5, (_OWORD *)a2 + 2);
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_20ADCB668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__node_insert_multi(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = a1 + 1;
  __n128 v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        __n128 v4 = (uint64_t *)*v4;
        unsigned int v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      __n128 v4 = (uint64_t *)v4[1];
    }
    while (v4);
    unsigned int v5 = v3 + 1;
  }
  else
  {
    unsigned int v5 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_OWORD *std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__emplace_multi<std::pair<unsigned int const,double> const&>(uint64_t **a1, _OWORD *a2)
{
  __n128 v4 = operator new(0x30uLL);
  unsigned int v5 = v4;
  v4[2] = *a2;
  id v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        id v6 = (uint64_t **)v7;
        if (*((_DWORD *)v4 + 8) >= *((_DWORD *)v7 + 8)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        unsigned int v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    unsigned int v8 = v6 + 1;
  }
  else
  {
    unsigned int v8 = a1 + 1;
  }
LABEL_8:
  std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

void sub_20ADCB844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADCB8A4(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10E1C40B9250594);
  _Unwind_Resume(a1);
}

void sub_20ADCB97C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCBD00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCC238(_Unwind_Exception *a1)
{
  id v6 = v5;

  _Unwind_Resume(a1);
}

void sub_20ADCC618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADCC6F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCC778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCC7F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCC868(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCLabelNode::setFontName(id *this, NSString *a2)
{
  objc_storeStrong(this + 73, a2);
  *((unsigned char *)this + 713) = 1;

  SKCNode::setDirty((SKCNode *)this);
}

void sub_20ADCCA98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCCB9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCCE28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCCF6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCD8E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_20ADCE218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_20ADCE580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADCE6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCE7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADCE878(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C40A8740AABLL);
  _Unwind_Resume(a1);
}

void sub_20ADCEDB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCF164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCF4A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCF5E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCF6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADCF774(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCF838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCF920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCFAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADCFBD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCFC8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCFD44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADCFDA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  unsigned int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)SKTileMapNode;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void __clang_call_terminate(void *a1)
{
}

void sub_20ADCFEBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD0004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD01C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD034C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD04B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD0664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD08FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD0ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD0D5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD10D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD1500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD1B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void *setCorrectAdjacencyDataForTileSetType(void *result, const uint64_t **a2, const uint64_t **a3, SKTileSetType a4, char a5, char a6)
{
  if (a4 >= SKTileSetTypeHexagonalFlat)
  {
    if (a4 == SKTileSetTypeHexagonalPointy)
    {
      *uint64_t result = 6;
      id v6 = (const uint64_t *)&kHexPointyOddRowXOffsets;
      BOOL v7 = (a6 & 1) == 0;
      if ((a6 & 1) == 0) {
        id v6 = (const uint64_t *)&kHexPointyEvenRowXOffsets;
      }
      unsigned int v8 = (const uint64_t *)&kHexPointyOddRowYOffsets;
      long long v9 = (const uint64_t *)&kHexPointyEvenRowYOffsets;
    }
    else
    {
      if (a4 != SKTileSetTypeHexagonalFlat) {
        return result;
      }
      *uint64_t result = 6;
      id v6 = (const uint64_t *)&kHexFlatOddColumnXOffsets;
      BOOL v7 = (a5 & 1) == 0;
      if ((a5 & 1) == 0) {
        id v6 = (const uint64_t *)&kHexFlatEvenColumnXOffsets;
      }
      unsigned int v8 = (const uint64_t *)&kHexFlatOddColumnYOffsets;
      long long v9 = (const uint64_t *)&kHexFlatEvenColumnYOffsets;
    }
    if (v7) {
      unsigned int v8 = v9;
    }
    *a2 = v6;
    *a3 = v8;
  }
  return result;
}

void sub_20ADD29D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  std::deque<unsigned int>::~deque[abi:ne180100](&STACK[0x200]);
  _Unwind_Resume(a1);
}

void std::deque<unsigned int>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<unsigned int>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void sub_20ADD3238(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *getHexIndexFromPoint(void *result, int *a2, int *a3, float a4, float a5)
{
  float v5 = (float)(a4 * 3.0) * 0.5;
  float v6 = COERCE_FLOAT(*result) / v5;
  int v7 = vcvtms_s32_f32(v6);
  int v8 = (int)(float)(COERCE_FLOAT(*result) - (float)(v5 * (float)(int)floorf(v6)));
  if (v7 >= 0) {
    int v9 = v7 & 1;
  }
  else {
    int v9 = -(v7 & 1);
  }
  float v10 = (float)(int)(float)(COERCE_FLOAT(HIDWORD(*result)) - (float)((float)((float)v9 * a5) * 0.5));
  int v11 = vcvtms_s32_f32(v10 / a5);
  float v12 = (float)(int)(float)(v10 - (float)(a5 * (float)(int)floorf(v10 / a5)));
  int v13 = (int)(float)((float)(a4 * 0.5) - (float)((float)(v12 * a4) / a5));
  if (v13 < 0) {
    int v13 = -v13;
  }
  if (v13 >= v8)
  {
    *a2 = v7 - 1;
    *a3 = v9 + v11;
    if ((float)(a5 * 0.5) <= v12) {
      return result;
    }
    int v11 = v9 + v11 - 1;
  }
  else
  {
    *a2 = v7;
  }
  *a3 = v11;
  return result;
}

void sub_20ADD35DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD38B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD3B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD3DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD411C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id a15)
{
  _Unwind_Resume(a1);
}

void sub_20ADD4224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD4A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20ADD50B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t std::deque<unsigned int>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    int v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<unsigned int *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned int *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void std::deque<unsigned int>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    int v7 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    int v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unint64_t v38 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        uint64_t v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)uint64_t v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      int v9 = (char *)a1[1];
    }
    int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned int *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned int *>::push_front((uint64_t)a1, &v54);
    uint64_t v44 = (void *)a1[1];
    int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    int v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned int *>::push_back(&v54, &v53);
  v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned int *>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_20ADD55B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void std::__split_buffer<unsigned int *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    int v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      int v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned int *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    int v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    int v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void *std::__find_segment_if[abi:ne180100]<std::__deque_iterator<unsigned int,unsigned int *,unsigned int &,unsigned int **,long,1024l>,std::__find_segment<unsigned long>,std::__identity>(void *result, _DWORD *a2, void *a3, _DWORD *a4, unint64_t *a5)
{
  uint64_t v5 = a2;
  unint64_t v6 = *a5;
  if (result == a3)
  {
    uint64_t v13 = a4;
    if (!HIDWORD(v6))
    {
      uint64_t v13 = v5;
      if (v5 != a4)
      {
        while (*v13 != v6)
        {
          if (++v13 == a4)
          {
            uint64_t v13 = a4;
            break;
          }
        }
      }
    }
    if (result && (_DWORD *)(*result + 4096) == v13) {
      ++result;
    }
  }
  else
  {
    uint64_t v7 = *result + 4096;
    unint64_t v8 = HIDWORD(v6);
    if (HIDWORD(v6)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v7 == (void)a2;
    }
    if (v9) {
      goto LABEL_7;
    }
    while (*a2 != v6)
    {
      if (++a2 == (_DWORD *)v7) {
        goto LABEL_7;
      }
    }
    if (a2 == (_DWORD *)v7)
    {
LABEL_7:
      uint64_t v10 = result + 1;
      if (result + 1 == a3)
      {
        uint64_t v11 = result;
LABEL_25:
        uint64_t v14 = (_DWORD *)*a3;
        uint64_t v15 = a4;
        if (!v8)
        {
          if (v14 == a4) {
            return a3;
          }
          uint64_t v15 = (_DWORD *)*a3;
          while (*v15 != v6)
          {
            if (++v15 == a4)
            {
              uint64_t v15 = a4;
              break;
            }
          }
        }
        uint64_t result = a3;
        if (v14 + 1024 == v15) {
          return v11 + 2;
        }
      }
      else
      {
        while (1)
        {
          uint64_t v11 = v10;
          if (!v8) {
            break;
          }
LABEL_14:
          uint64_t v10 = v11 + 1;
          if (v11 + 1 == a3) {
            goto LABEL_25;
          }
        }
        uint64_t v12 = 0;
        while (*(_DWORD *)(*v11 + v12) != v6)
        {
          v12 += 4;
          if (v12 == 4096) {
            goto LABEL_14;
          }
        }
        return v11;
      }
    }
  }
  return result;
}

id PointLight_vsh()
{
  return (id)PointLight_vsh_src;
}

id PointLightWithVertexTransform_vsh()
{
  return (id)PointLightWithVertexTransform_vsh_src;
}

id PointLight_fsh()
{
  if (PointLight_fsh::once != -1) {
    dispatch_once(&PointLight_fsh::once, &__block_literal_global_0);
  }
  v0 = (void *)PointLight_fsh::shader;

  return v0;
}

id PointLightRectTexture_fsh()
{
  if (PointLightRectTexture_fsh::once != -1) {
    dispatch_once(&PointLightRectTexture_fsh::once, &__block_literal_global_15);
  }
  v0 = (void *)PointLightRectTexture_fsh::shader;

  return v0;
}

id PointLightRectTexture2_fsh()
{
  if (PointLightRectTexture2_fsh::once != -1) {
    dispatch_once(&PointLightRectTexture2_fsh::once, &__block_literal_global_23);
  }
  v0 = (void *)PointLightRectTexture2_fsh::shader;

  return v0;
}

id PointLightAllRectTextures_fsh()
{
  if (PointLightAllRectTextures_fsh::once != -1) {
    dispatch_once(&PointLightAllRectTextures_fsh::once, &__block_literal_global_25);
  }
  v0 = (void *)PointLightAllRectTextures_fsh::shader;

  return v0;
}

void sub_20ADD5F40(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C403B5F1E55);
  _Unwind_Resume(a1);
}

void sub_20ADD6050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD6280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD63A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD656C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD66B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD674C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD6838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD6A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  uint64_t v17 = v16;
  objc_destroyWeak(v17);

  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_20ADD6B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD6C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD6DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD6F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD7134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD724C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_20ADD7354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_20ADD7474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20ADD75F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD76F8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20ADD783C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD7958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20ADD7ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD7BDC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20ADD7D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD7E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20ADD7FC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD80C4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20ADD8208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD8324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20ADD84A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD85A8(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20ADD86EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD8808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20ADD898C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD8A8C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20ADD8BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD8CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20ADD8E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD8F70(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20ADD90B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADD91C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADD9610(_Unwind_Exception *a1)
{
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  _Unwind_Resume(a1);
}

void sub_20ADD9B24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, void *a19, uint64_t a20,void *a21,void *a22)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }

  _Unwind_Resume(a1);
}

void sub_20ADD9EFC(_Unwind_Exception *a1)
{
  unint64_t v6 = *(std::__shared_weak_count **)(v4 - 88);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(v4 - 72);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(v4 - 56);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  _Unwind_Resume(a1);
}

void sub_20ADDA248(_Unwind_Exception *a1)
{
  unint64_t v6 = *(std::__shared_weak_count **)(v4 - 72);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void sub_20ADDA3EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ADDA5DC(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void sub_20ADDAA24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }

  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }

  _Unwind_Resume(a1);
}

void sub_20ADDAB14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  glContextUse::~glContextUse((glContextUse *)va);
  _Unwind_Resume(a1);
}

void sub_20ADDAB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_20ADDAD20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21052EA30](v13, 0x10A0C40B78ACC54);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_20ADDAEC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_20ADDB1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void glContextUse::glContextUse(glContextUse *this, EAGLContext *a2)
{
  BOOL v3 = a2;
  *(void *)this = [MEMORY[0x263F146E8] currentContext];
  uint64_t v4 = v3;
  *((void *)this + 1) = v4;
  if (*(EAGLContext **)this != v4) {
    [MEMORY[0x263F146E8] setCurrentContext:v4];
  }
}

void sub_20ADDB308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void glContextUse::~glContextUse(glContextUse *this)
{
  unint64_t v2 = *(void **)this;
  if (*(void *)this != *((void *)this + 1))
  {
    objc_msgSend(MEMORY[0x263F146E8], "setCurrentContext:");
    unint64_t v2 = (void *)*((void *)this + 1);
  }
}

void std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20ADDB3E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_framebuffer *,std::shared_ptr<jet_framebuffer>::__shared_ptr_default_delete<jet_framebuffer,jet_framebuffer>,std::allocator<jet_framebuffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_framebuffer *,std::shared_ptr<jet_framebuffer>::__shared_ptr_default_delete<jet_framebuffer,jet_framebuffer>,std::allocator<jet_framebuffer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_framebuffer *,std::shared_ptr<jet_framebuffer>::__shared_ptr_default_delete<jet_framebuffer,jet_framebuffer>,std::allocator<jet_framebuffer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20ADDB518(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_texture *,std::shared_ptr<jet_texture>::__shared_ptr_default_delete<jet_texture,jet_texture>,std::allocator<jet_texture>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_texture *,std::shared_ptr<jet_texture>::__shared_ptr_default_delete<jet_texture,jet_texture>,std::allocator<jet_texture>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 128))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_texture *,std::shared_ptr<jet_texture>::__shared_ptr_default_delete<jet_texture,jet_texture>,std::allocator<jet_texture>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context_Metal,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20ADDB648(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context_Metal,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_context_Metal *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context_Metal>,std::allocator<jet_context_Metal>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_context_Metal *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context_Metal>,std::allocator<jet_context_Metal>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 128))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_context_Metal *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context_Metal>,std::allocator<jet_context_Metal>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<jet_context_OpenGL>::shared_ptr[abi:ne180100]<jet_context_OpenGL,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20ADDB778(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context_Metal,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_context_OpenGL *,std::shared_ptr<jet_context_OpenGL>::__shared_ptr_default_delete<jet_context_OpenGL,jet_context_OpenGL>,std::allocator<jet_context_OpenGL>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_context_OpenGL *,std::shared_ptr<jet_context_OpenGL>::__shared_ptr_default_delete<jet_context_OpenGL,jet_context_OpenGL>,std::allocator<jet_context_OpenGL>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 128))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_context_OpenGL *,std::shared_ptr<jet_context_OpenGL>::__shared_ptr_default_delete<jet_context_OpenGL,jet_context_OpenGL>,std::allocator<jet_context_OpenGL>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_20ADDC018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC1D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC2AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC30C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC67C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDC910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDCA90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDD04C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDD1B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_20ADDD8A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  glContextUse::~glContextUse((glContextUse *)va);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

void sub_20ADDDBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDDFC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDE0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDE1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADDE480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_20ADDEAB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }

  _Unwind_Resume(a1);
}

void sub_20ADDEF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_20ADDF298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }

  _Unwind_Resume(a1);
}

void sub_20ADDF6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }

  _Unwind_Resume(a1);
}

void sub_20ADDFA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ADDFAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16) {
    JUMPOUT(0x20ADDFA94);
  }
  JUMPOUT(0x20ADDFA90);
}

void sub_20ADDFAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18) {
    JUMPOUT(0x20ADDFAA0);
  }
  JUMPOUT(0x20ADDFA9CLL);
}

void sub_20ADDFC68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADDFF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ADDFF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16) {
    JUMPOUT(0x20ADDFF80);
  }
  JUMPOUT(0x20ADDFF7CLL);
}

void sub_20ADDFFA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18) {
    JUMPOUT(0x20ADDFF8CLL);
  }
  JUMPOUT(0x20ADDFF88);
}

void sub_20ADE0278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ADE02C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (!a16) {
    JUMPOUT(0x20ADE02B4);
  }
  JUMPOUT(0x20ADE02B0);
}

void sub_20ADE02D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (!a18) {
    JUMPOUT(0x20ADE02C0);
  }
  JUMPOUT(0x20ADE02BCLL);
}

void sub_20ADE03D8(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  _Unwind_Resume(a1);
}

void sub_20ADE046C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADE04E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE0624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_20ADE072C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_20ADE0C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char *a25)
{
  std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

id std::vector<UITouch * {__strong}>::push_back[abi:ne180100](char **a1, id *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v25 = v4;
    if (v13) {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v4, v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    int64_t v16 = &v14[8 * v13];
    uint64_t v24 = v16;
    *(void *)uint64_t v15 = *a2;
    uint64_t v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    uint64_t v18 = *a1;
    uint64_t v17 = a1[1];
    if (v17 == *a1)
    {
      int64x2_t v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *(void *)uint64_t v17 = 0;
        *((void *)v15 - 1) = v19;
        v15 -= 8;
      }
      while (v17 != v18);
      int64x2_t v20 = *(int64x2_t *)a1;
      uint64_t v9 = (char *)v23.i64[1];
      int64_t v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v23 = v20;
    uint64_t v21 = a1[2];
    a1[2] = v16;
    uint64_t v24 = v21;
    uint64_t v22 = v20.i64[0];
    id result = (id)std::__split_buffer<UITouch * {__strong}>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    id result = *a2;
    *(void *)uint64_t v7 = result;
    uint64_t v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void sub_20ADE107C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char *a25)
{
  std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

void sub_20ADE1498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,char *a35)
{
  std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy((uint64_t)&a34, a35);
  _Unwind_Resume(a1);
}

void sub_20ADE18E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,char *a35)
{
  std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy((uint64_t)&a34, a35);
  _Unwind_Resume(a1);
}

void sub_20ADE1AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  uint64_t v10 = v9;

  a9.super_class = (Class)SKView;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20ADE1C50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  uint64_t v11 = v10;

  _Unwind_Resume(a1);
}

void sub_20ADE1E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADE201C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADE20DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE25B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE2694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE270C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE2A74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE2C7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE2E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE3180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE3504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_20ADE3604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE3884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE3A3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE3B1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADE3BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADE3CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE3D68(_Unwind_Exception *a1)
{
  BOOL v3 = v2;

  _Unwind_Resume(a1);
}

void sub_20ADE3FA4(_Unwind_Exception *a1)
{
  BOOL v3 = v2;

  _Unwind_Resume(a1);
}

void sub_20ADE4180(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE4260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE43E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE47A4(_Unwind_Exception *a1)
{
  uint64_t v7 = v6;

  _Unwind_Resume(a1);
}

void sub_20ADE4AC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::destroy(a1, *((void *)a2 + 1));
    uint64_t v4 = (void **)(a2 + 40);
    std::vector<UITouch * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v4);

    operator delete(a2);
  }
}

void std::vector<UITouch * {__strong}>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    unint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        unint64_t v6 = (void *)*((void *)v4 - 1);
        v4 -= 8;
      }
      while (v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::__tree<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::__map_value_compare<SKNode * {__strong},std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>,std::less<SKNode * {__strong}>,true>,std::allocator<std::__value_type<SKNode * {__strong},std::vector<UITouch * {__strong}>>>>::__emplace_unique_key_args<SKNode * {__strong},std::piecewise_construct_t const&,std::tuple<SKNode * const {__strong}&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, id **a4)
{
  uint64_t v7 = a1 + 1;
  unint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        unint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x40uLL);
    v11[4] = (uint64_t)**a4;
    v11[5] = 0;
    v11[6] = 0;
    v11[7] = 0;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t std::__split_buffer<UITouch * {__strong}>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20ADE5170(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C40F32963C4);

  _Unwind_Resume(a1);
}

void sub_20ADE545C(_Unwind_Exception *a1)
{
  unint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_20ADE5584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE578C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE5960(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE5AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCPlaySound::SKCPlaySound(SKCPlaySound *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v4 = &unk_26BEEC860;
  *(void *)(v4 + 112) = 0;
  this->var4 = a2->var4;
  *(_OWORD *)&this->var6 = *(_OWORD *)&a2->var6;
  this->var12 = a2->var12;
  this->var11 = a2->var11;
  *(void *)&this->var8 = *(void *)&a2->var8;
  this->var14 = a2->var14;
  this->var5 = 1;
  objc_storeWeak((id *)(v4 + 112), 0);
  this->var20 = 0;
}

void SKCPlaySound::~SKCPlaySound(SKCPlaySound *this)
{
  objc_destroyWeak(&this->var19);

  SKCAction::~SKCAction((SKCAction *)this);
}

{
  uint64_t vars8;

  objc_destroyWeak(&this->var19);
  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

void SKCPlaySound::cpp_updateWithTargetForTime(SKCPlaySound *this, SKCNode *a2, double a3)
{
  if (!this->var20)
  {
    id WeakRetained = objc_loadWeakRetained(&this->var19);

    if (WeakRetained)
    {
      this->var20 = 1;
      id v7 = objc_loadWeakRetained(&this->var19);
      [v7 play];

      unint64_t v8 = (SKSoundSource *)objc_loadWeakRetained(&this->var19);
      SKCRendererRegisterSoundSource(v8);
    }
  }
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  if ((COERCE_UNSIGNED_INT(v9.n128_f32[0] + -1.0) & 0x60000000) == 0)
  {
    v9.n128_f64[0] = a3;
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, v9);
  }
}

void sub_20ADE5D3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

SKCAction *SKCPlaySound::cpp_willStartWithTargetAtTime(SKCPlaySound *this, SKCNode *a2, double a3)
{
  id result = SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  this->var20 = 0;
  return result;
}

void sub_20ADE5E60(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C4082519AB5);

  _Unwind_Resume(a1);
}

void sub_20ADE5EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE5FFC(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v3, 0x1081C4082519AB5);

  _Unwind_Resume(a1);
}

void sub_20ADE60BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE6160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCCustomAction::SKCCustomAction(SKCCustomAction *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v3 = &unk_26BEEC8F8;
  *(void *)(v3 + 24) = a2->var4;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(void *)(v3 + 56) = *(void *)&a2->var8;
  *(void *)(v3 + 88) = a2->var14;
  *(unsigned char *)(v3 + 32) = 1;
  *(void *)(v3 + 112) = 0;
}

void SKCCustomAction::~SKCCustomAction(SKCCustomAction *this)
{
  SKCAction::~SKCAction((SKCAction *)this);
}

{
  uint64_t vars8;

  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

SKCAction *SKCCustomAction::cpp_updateWithTargetForTime(SKCCustomAction *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  float v7 = v6.n128_f32[0];
  id result = (SKCAction *)this->var19;
  if (result) {
    id result = (SKCAction *)((uint64_t (*)(SKCAction *, void, double))result->var3)(result, *((void *)a2 + 1), (float)(v6.n128_f32[0] * this->var2));
  }
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
  {
    v6.n128_f64[0] = a3;
    return SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, v6);
  }
  return result;
}

void sub_20ADE6410(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE64AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE657C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADE6624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADE6740(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C40EA495629);
  _Unwind_Resume(a1);
}

void SKCTransitionNode::SKCTransitionNode(SKCTransitionNode *this)
{
  SKCNode::SKCNode(this);
  *(void *)uint64_t v1 = &unk_26BEEC990;
  *(_DWORD *)(v1 + 560) = 0;
  *(void *)(v1 + 568) = 0;
  *(_WORD *)(v1 + 576) = 257;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(_OWORD *)(v1 + 640) = 0u;
  *(_OWORD *)(v1 + 656) = 0u;
  *(_OWORD *)(v1 + 672) = 0u;
  *(_OWORD *)(v1 + 688) = 0u;
  *(_OWORD *)(v1 + 704) = 0u;
  *(void *)(v1 + 720) = 0;
}

double SKCTransitionNode::getBatchInfo@<D0>(uint64_t a1@<X8>, uint64_t a2@<X0>)
{
  if (!*(void *)(a2 + 600) && !*(unsigned char *)(a2 + 726)) {
    return SKCNode::getBatchInfo(a1);
  }
  *(_DWORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(void *)&double result = 0x300000010;
  *(void *)(a1 + 4) = 0x300000010;
  *(unsigned char *)a1 = 1;
  return result;
}

void SKCTransitionNode::subclassRecomputeFlags(SKCTransitionNode *this)
{
  *((_DWORD *)this + 69) |= 0x42u;
}

BOOL SKCTransitionNode::getNeedsCustomRenderOps(uint64_t a1)
{
  return *(void *)(a1 + 600) || *(unsigned char *)(a1 + 726);
}

uint64_t SKCTransitionNode::getMaxBatchRenderElementCount(uint64_t a1)
{
  if (*(void *)(a1 + 600) || *(unsigned char *)(a1 + 726)) {
    return 16;
  }
  else {
    return 0;
  }
}

uint64_t SKCTransitionNode::addBatchRenderElements(uint64_t a1)
{
  if (*(void *)(a1 + 600)) {
    return 0;
  }
  else {
    return SKCNode::addBatchRenderElements();
  }
}

void SKCTransitionNode::addRenderOps(uint64_t a1, int *a2, uint64_t **a3)
{
  uint64_t v230 = *MEMORY[0x263EF8340];
  if (*(void *)(a1 + 600) || *(unsigned char *)(a1 + 726))
  {
    __n128 v6 = (float32x4_t *)MEMORY[0x263EF89A8];
    long long v191 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    float32x4_t v188 = *(float32x4_t *)MEMORY[0x263EF89A8];
    long long v189 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
    float32x4_t v187 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
    SKCRenderer::getBackingContext(*((void *)a2 + 13), &v213);
    int v7 = (*(uint64_t (**)(void))(*(void *)v213 + 136))(v213);
    _Q0.i64[1] = 0xBEAAAAAB3BDA740ELL;
    if (*((void *)&v213 + 1))
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v213 + 1));
      _Q0.i64[1] = 0xBEAAAAAB3BDA740ELL;
    }
    *(void *)&long long v10 = v189;
    *((void *)&v10 + SKCNode::setFlags(this, 66, 1) = 0xBEAAAAAB3BDA740ELL;
    if (v7 == 1)
    {
      unint64_t v11 = 0;
      float32x4_t v12 = *v6;
      float32x4_t v13 = v6[1];
      float32x4_t v8 = v6[2];
      float32x4_t v14 = v6[3];
      v15.i64[0] = 0;
      v15.i64[1] = __PAIR64__(v14.u32[3], 1.0);
      float32x4_t v205 = v188;
      long long v206 = v191;
      long long v207 = v10;
      int8x16_t v208 = (int8x16_t)v187;
      do
      {
        *(long long *)((char *)&v213 + v1SKCNode::setFlags(this, 66, 1) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(_OWORD *)((char *)&v205 + v11))), v13, *(float32x2_t *)&v205.f32[v11 / 4], 1), v8, *(float32x4_t *)((char *)&v205 + v11), 2), v15, *(float32x4_t *)((char *)&v205 + v11), 3);
        v11 += 16;
      }
      while (v11 != 64);
      unint64_t v16 = 0;
      v12.i32[0] = 1.0;
      v13.i32[1] = 1.0;
      v8.i32[2] = 0.5;
      float32x4_t v205 = (float32x4_t)v213;
      long long v206 = v214;
      long long v207 = v215;
      int8x16_t v208 = (int8x16_t)v216;
      do
      {
        *(long long *)((char *)&v213 + v16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, COERCE_FLOAT(*(_OWORD *)((char *)&v205 + v16))), v13, *(float32x2_t *)&v205.f32[v16 / 4], 1), v8, *(float32x4_t *)((char *)&v205 + v16), 2), v14, *(float32x4_t *)((char *)&v205 + v16), 3);
        v16 += 16;
      }
      while (v16 != 64);
      long long v17 = v214;
      long long v10 = v215;
      _Q0.i64[1] = *((void *)&v216 + 1);
      float32x4_t v187 = (float32x4_t)v216;
      float32x4_t v188 = (float32x4_t)v213;
    }
    else
    {
      long long v17 = v191;
    }
    float v18 = *(float *)(a1 + 720);
    if (v18 > 1.0) {
      float v18 = 1.0;
    }
    unsigned int v19 = *a2;
    v8.i64[0] = 0;
    long long v226 = 0u;
    long long v227 = 0u;
    if (v18 >= 0.0) {
      v8.f32[0] = v18;
    }
    long long v228 = 0uLL;
    long long v229 = 0uLL;
    DWORD2(v226) = 1065353216;
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)&long long v227 = _Q0.i64[0];
    HIDWORD(v227) = 1065353216;
    long long v221 = 0uLL;
    uint64_t v223 = 0x3F80000000000000;
    long long v224 = 0uLL;
    long long v225 = 0uLL;
    DWORD2(v22SKCNode::setFlags(this, 66, 1) = 1065353216;
    uint64_t v222 = _Q0.i64[0];
    long long v217 = xmmword_20AE9AE90;
    long long v218 = unk_20AE9AEA0;
    long long v219 = xmmword_20AE9AEB0;
    long long v220 = unk_20AE9AEC0;
    long long v213 = xmmword_20AE9AE50[0];
    long long v214 = unk_20AE9AE60;
    long long v215 = xmmword_20AE9AE70;
    long long v216 = unk_20AE9AE80;
    uint64_t v24 = *(void *)(a1 + 608);
    uint64_t v25 = *(std::__shared_weak_count **)(a1 + 616);
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float32x4_t v190 = (float32x4_t)v10;
    float32x4_t v192 = (float32x4_t)v17;
    v8.f32[0] = v8.f32[0] * (float)(v8.f32[0] * (float)((float)(v8.f32[0] * -2.0) + 3.0));
    float32x4_t v193 = v8;
    uint64_t v26 = *(void *)(a1 + 624);
    v27 = *(std::__shared_weak_count **)(a1 + 632);
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    float v28 = 1.0 - v8.f32[0];
    float32x4_t v29 = *v6;
    float32x4_t v30 = v6[1];
    float32x4_t v31 = v6[2];
    float32x4_t v32 = v6[3];
    float32x4_t v205 = *v6;
    long long v206 = (__int128)v30;
    int32x4_t v33 = (int32x4_t)v6[3];
    long long v207 = (__int128)v6[2];
    int8x16_t v208 = (int8x16_t)v33;
    float32x4_t v209 = v205;
    float32x4_t v210 = v30;
    __asm { FMOV            V1.4S, #1.0 }
    float32x4_t v180 = _Q1;
    int v35 = *(_DWORD *)(a1 + 560) - 1;
    float32x4_t v211 = (float32x4_t)v207;
    int32x4_t v212 = v33;
    unsigned int v184 = v19;
    switch(v35)
    {
      case 0:
        float32x4_t v157 = v32;
        float32x4_t v162 = v31;
        float32x4_t v167 = v30;
        float32x4_t v172 = v29;
        uint64_t v36 = (std::__shared_weak_count *)*((void *)a2 + 55);
        uint64_t v177 = *((void *)a2 + 54);
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        float v152 = 1.0 - v8.f32[0];
        if (v27)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v27);
          float v28 = v152;
        }
        _Q4 = *(float32x4_t *)(a1 + 304);
        _Q1 = v193;
        if (v193.f32[0] >= 0.5)
        {
          uint64_t v24 = *(void *)(a1 + 624);
          v91 = *(std::__shared_weak_count **)(a1 + 632);
          float32x4_t v30 = v167;
          float32x4_t v29 = v172;
          float32x4_t v32 = v157;
          float32x4_t v31 = v162;
          if (v91) {
            atomic_fetch_add_explicit(&v91->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v185 = v91;
          if (v25)
          {
            float32x4_t v183 = _Q4;
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            float v28 = v152;
            float32x4_t v32 = v157;
            _Q4 = v183;
            float32x4_t v31 = v162;
            float32x4_t v30 = v167;
            float32x4_t v29 = v172;
          }
          char v39 = 0;
          float v40 = v28 + v28;
        }
        else
        {
          uint64_t v24 = *(void *)(a1 + 608);
          unint64_t v38 = *(std::__shared_weak_count **)(a1 + 616);
          float32x4_t v30 = v167;
          float32x4_t v29 = v172;
          float32x4_t v32 = v157;
          float32x4_t v31 = v162;
          if (v38) {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v185 = v38;
          if (v25)
          {
            float32x4_t v181 = _Q4;
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            _Q4 = v181;
            float32x4_t v32 = v157;
            float32x4_t v31 = v162;
            float32x4_t v30 = v167;
            float32x4_t v29 = v172;
          }
          char v39 = 0;
          float v40 = v193.f32[0] + v193.f32[0];
        }
        v193.f32[0] = v40;
        int v55 = 1;
        goto LABEL_106;
      case 1:
        if (v8.f32[0] <= 0.5)
        {
          v185 = v25;
          uint64_t v25 = v27;
          uint64_t v148 = v26;
          float32x4_t v153 = v31;
          float32x4_t v158 = v32;
          float32x4_t v173 = v29;
          float32x4_t v178 = v32;
          float32x4_t v163 = v31;
          float32x4_t v168 = v30;
          float32x4_t v141 = v29;
          float32x4_t v145 = v30;
        }
        else
        {
          uint64_t v148 = v24;
          v232.columns[0] = (simd_float4)v29;
          v232.columns[1] = (simd_float4)v30;
          v232.columns[2] = (simd_float4)v31;
          v232.columns[3] = (simd_float4)v32;
          *(double *)v41.i64 = sk_matrix_scale(v232, -1.0, 1.0, 1.0);
          float32x4_t v168 = v6[1];
          float32x4_t v173 = *v6;
          v185 = v27;
          uint64_t v24 = v26;
          float32x4_t v158 = v6[3];
          float32x4_t v163 = v6[2];
          float32x4_t v178 = v42;
          float32x4_t v153 = v43;
          float32x4_t v141 = v41;
          float32x4_t v145 = v44;
        }
        float v92 = v193.f32[0] * 3.14159265;
        __float2 v93 = __sincosf_stret(v92);
        unint64_t v94 = 0;
        float32x4_t v95 = v173;
        v95.i32[0] = LODWORD(v93.__cosval);
        float32x4_t v96 = v163;
        v96.i32[0] = LODWORD(v93.__sinval);
        v96.i32[2] = LODWORD(v93.__cosval);
        float32x4_t v197 = v141;
        float32x4_t v198 = v145;
        float32x4_t v199 = v153;
        int8x16_t v200 = (int8x16_t)v178;
        do
        {
          v95.f32[2] = -v93.__sinval;
          *(float32x4_t *)&__p[v94 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v95, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v94 * 4))), v168, *(float32x2_t *)&v197.f32[v94], 1), v96, *(float32x4_t *)((char *)&v197 + v94 * 4), 2), v158, *(float32x4_t *)((char *)&v197 + v94 * 4), 3);
          v94 += 4;
        }
        while (v94 != 16);
        unint64_t v97 = 0;
        v98.i64[0] = 0;
        v98.i64[1] = __PAIR64__(v158.u32[3], -(float)((float)(vabds_f32(0.5, v193.f32[0]) * -2.0) + 1.0));
        float32x4_t v197 = *(float32x4_t *)__p;
        float32x4_t v198 = v202;
        float32x4_t v199 = v203;
        int8x16_t v200 = v204;
        do
        {
          *(float32x4_t *)&__p[v97 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v173, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v97 * 4))), v168, *(float32x2_t *)&v197.f32[v97], 1), v163, *(float32x4_t *)((char *)&v197 + v97 * 4), 2), v98, *(float32x4_t *)((char *)&v197 + v97 * 4), 3);
          v97 += 4;
        }
        while (v97 != 16);
        unint64_t v99 = 0;
        float32x4_t v197 = *(float32x4_t *)__p;
        float32x4_t v198 = v202;
        float32x4_t v199 = v203;
        int8x16_t v200 = v204;
        _Q4 = v180;
        do
        {
          _Q1 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v188, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v99))), v192, *(float32x2_t *)&v197.f32[v99 / 4], 1), v190, *(float32x4_t *)((char *)&v197 + v99), 2), v187, *(float32x4_t *)((char *)&v197 + v99), 3);
          *(float32x4_t *)&__p[v99 / 8] = _Q1;
          v99 += 16;
        }
        while (v99 != 64);
        goto LABEL_122;
      case 2:
        if (v8.f32[0] <= 0.5)
        {
          v185 = v25;
          uint64_t v25 = v27;
          uint64_t v148 = v26;
          float32x4_t v154 = v31;
          float32x4_t v159 = v32;
          float32x4_t v174 = v29;
          float32x4_t v179 = v32;
          float32x4_t v142 = v29;
          float32x4_t v146 = v30;
          float32x4_t v164 = v31;
          float32x4_t v169 = v30;
        }
        else
        {
          uint64_t v148 = v24;
          v233.columns[0] = (simd_float4)v29;
          v233.columns[1] = (simd_float4)v30;
          v233.columns[2] = (simd_float4)v31;
          v233.columns[3] = (simd_float4)v32;
          *(double *)v45.i64 = sk_matrix_scale(v233, 1.0, -1.0, 1.0);
          float32x4_t v169 = v6[1];
          float32x4_t v174 = *v6;
          v185 = v27;
          uint64_t v24 = v26;
          float32x4_t v159 = v6[3];
          float32x4_t v164 = v6[2];
          float32x4_t v179 = v46;
          float32x4_t v154 = v47;
          float32x4_t v142 = v45;
          float32x4_t v146 = v48;
        }
        float v100 = v193.f32[0] * 3.14159265;
        __float2 v101 = __sincosf_stret(v100);
        unint64_t v102 = 0;
        float32x4_t v103 = v169;
        v103.i32[1] = LODWORD(v101.__cosval);
        v103.i32[2] = LODWORD(v101.__sinval);
        float32x4_t v104 = v164;
        v104.f32[1] = -v101.__sinval;
        v104.i32[2] = LODWORD(v101.__cosval);
        float32x4_t v197 = v142;
        float32x4_t v198 = v146;
        float32x4_t v199 = v154;
        int8x16_t v200 = (int8x16_t)v179;
        do
        {
          *(float32x4_t *)&__p[v102 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v174, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v102 * 4))), v103, *(float32x2_t *)&v197.f32[v102], 1), v104, *(float32x4_t *)((char *)&v197 + v102 * 4), 2), v159, *(float32x4_t *)((char *)&v197 + v102 * 4), 3);
          v102 += 4;
        }
        while (v102 != 16);
        unint64_t v105 = 0;
        v106.i64[0] = 0;
        v106.i64[1] = __PAIR64__(v159.u32[3], -(float)((float)(vabds_f32(0.5, v193.f32[0]) * -2.0) + 1.0));
        float32x4_t v197 = *(float32x4_t *)__p;
        float32x4_t v198 = v202;
        float32x4_t v199 = v203;
        int8x16_t v200 = v204;
        do
        {
          *(float32x4_t *)&__p[v105 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v174, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v105 * 4))), v169, *(float32x2_t *)&v197.f32[v105], 1), v164, *(float32x4_t *)((char *)&v197 + v105 * 4), 2), v106, *(float32x4_t *)((char *)&v197 + v105 * 4), 3);
          v105 += 4;
        }
        while (v105 != 16);
        unint64_t v107 = 0;
        float32x4_t v197 = *(float32x4_t *)__p;
        float32x4_t v198 = v202;
        float32x4_t v199 = v203;
        int8x16_t v200 = v204;
        _Q4 = v180;
        do
        {
          _Q1 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v188, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v107))), v192, *(float32x2_t *)&v197.f32[v107 / 4], 1), v190, *(float32x4_t *)((char *)&v197 + v107), 2), v187, *(float32x4_t *)((char *)&v197 + v107), 3);
          *(float32x4_t *)&__p[v107 / 8] = _Q1;
          v107 += 16;
        }
        while (v107 != 64);
LABEL_122:
        int v55 = 0;
        float32x4_t v29 = *(float32x4_t *)__p;
        float32x4_t v30 = v202;
        char v39 = 1;
        v193.i32[0] = 1.0;
        uint64_t v36 = v25;
        uint64_t v177 = v148;
        goto LABEL_123;
      case 3:
        _Q0.i32[0] = 0;
        char v39 = 0;
        _Q1 = v8;
        _Q1.f32[0] = _Q1.f32[0] + _Q1.f32[0];
        goto LABEL_40;
      case 4:
        _Q0.i32[0] = 0;
        char v39 = 0;
        _Q1.f32[0] = v8.f32[0] * -2.0;
LABEL_40:
        v49.i32[0] = 0;
        v49.i32[2] = 0;
        v49.i32[1] = _Q1.i32[0];
        goto LABEL_54;
      case 5:
        _Q0.i32[0] = 0;
        char v39 = 0;
        _Q1 = v8;
        _Q1.f32[0] = _Q1.f32[0] + _Q1.f32[0];
        goto LABEL_53;
      case 6:
        _Q0.i32[0] = 0;
        char v39 = 0;
        _Q1.f32[0] = v8.f32[0] * -2.0;
LABEL_53:
        v49.i32[2] = 0;
        v49.i64[0] = _Q1.u32[0];
LABEL_54:
        _Q1.i32[0] &= 0x60000000u;
        v49.i32[3] = v32.i32[3];
        float32x4_t v205 = v29;
        long long v206 = (__int128)v30;
        long long v207 = (__int128)v31;
        int8x16_t v208 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)_Q1, _Q0), 0), (int8x16_t)v32, v49);
        int v55 = 1;
        v193.i32[0] = 1.0;
        v185 = v27;
        uint64_t v60 = v24;
        uint64_t v24 = v26;
        uint64_t v36 = v25;
        uint64_t v177 = v60;
        goto LABEL_64;
      case 7:
        uint64_t v177 = v26;
        _Q0.i32[0] = 0;
        char v39 = 0;
        _Q1.f32[0] = v28 + v28;
        goto LABEL_56;
      case 8:
        uint64_t v177 = v26;
        _Q0.i32[0] = 0;
        char v39 = 0;
        _Q1.f32[0] = v28 * -2.0;
LABEL_56:
        v61.i32[0] = 0;
        v61.i32[2] = 0;
        v61.i32[1] = _Q1.i32[0];
        goto LABEL_59;
      case 9:
        uint64_t v177 = v26;
        _Q0.i32[0] = 0;
        char v39 = 0;
        _Q1.f32[0] = v28 + v28;
        goto LABEL_58;
      case 10:
        uint64_t v177 = v26;
        _Q0.i32[0] = 0;
        char v39 = 0;
        _Q1.f32[0] = v28 * -2.0;
LABEL_58:
        v61.i32[2] = 0;
        v61.i64[0] = _Q1.u32[0];
LABEL_59:
        _Q1.i32[0] &= 0x60000000u;
        v61.i32[3] = v32.i32[3];
        int8x16_t v62 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)_Q1, _Q0), 0), (int8x16_t)v32, v61);
        goto LABEL_63;
      case 11:
        uint64_t v177 = v26;
        _Q0.i32[0] = 0;
        char v39 = 0;
        int32x4_t v50 = (int32x4_t)v8;
        v51.i64[0] = 0;
        v51.i32[2] = 0;
        v51.i32[3] = v32.i32[3];
        int8x16_t v52 = v51;
        *(float *)&v52.i32[1] = *(float *)v50.i32 + *(float *)v50.i32;
        v50.i32[0] = COERCE_UNSIGNED_INT(*(float *)v50.i32 + *(float *)v50.i32) & 0x60000000;
        _Q1 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v50, _Q0), 0);
        *(float *)v33.i32 = v28 * -2.0;
        goto LABEL_45;
      case 12:
        uint64_t v177 = v26;
        _Q0.i32[0] = 0;
        char v39 = 0;
        v51.i64[0] = 0;
        v51.i32[2] = 0;
        v51.i32[3] = v32.i32[3];
        int8x16_t v52 = v51;
        *(float *)&v52.i32[1] = v193.f32[0] * -2.0;
        _Q1.i32[0] = COERCE_UNSIGNED_INT(v193.f32[0] * -2.0) & 0x60000000;
        _Q1 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)_Q1, _Q0), 0);
        *(float *)v33.i32 = v28 + v28;
LABEL_45:
        v51.i32[1] = v33.i32[0];
        goto LABEL_62;
      case 13:
        uint64_t v177 = v26;
        _Q0.i32[0] = 0;
        char v39 = 0;
        int32x4_t v63 = (int32x4_t)v8;
        v51.i64[0] = 0;
        v51.i32[2] = 0;
        v51.i32[3] = v32.i32[3];
        int8x16_t v52 = v51;
        *(float *)v52.i32 = *(float *)v63.i32 + *(float *)v63.i32;
        v63.i32[0] = COERCE_UNSIGNED_INT(*(float *)v63.i32 + *(float *)v63.i32) & 0x60000000;
        _Q1 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v63, _Q0), 0);
        *(float *)v33.i32 = v28 * -2.0;
        goto LABEL_61;
      case 14:
        uint64_t v177 = v26;
        _Q0.i32[0] = 0;
        char v39 = 0;
        v51.i64[0] = 0;
        v51.i32[2] = 0;
        v51.i32[3] = v32.i32[3];
        int8x16_t v52 = v51;
        *(float *)v52.i32 = v193.f32[0] * -2.0;
        _Q1.i32[0] = COERCE_UNSIGNED_INT(v193.f32[0] * -2.0) & 0x60000000;
        _Q1 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32((int32x4_t)_Q1, _Q0), 0);
        *(float *)v33.i32 = v28 + v28;
LABEL_61:
        v51.i32[0] = v33.i32[0];
LABEL_62:
        v33.i32[0] &= 0x60000000u;
        int8x16_t v62 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v33, _Q0), 0), (int8x16_t)v32, v51);
        float32x4_t v32 = (float32x4_t)vbslq_s8((int8x16_t)_Q1, (int8x16_t)v32, v52);
LABEL_63:
        float32x4_t v205 = v29;
        long long v206 = (__int128)v30;
        long long v207 = (__int128)v31;
        int8x16_t v208 = v62;
        int v55 = 1;
        v193.i32[0] = 1.0;
        v185 = v25;
        uint64_t v36 = v27;
LABEL_64:
        float v28 = 1.0;
        goto LABEL_126;
      case 15:
        char v39 = 0;
        long long v213 = xmmword_20AE9A930;
        long long v214 = xmmword_20AE9A940;
        long long v215 = xmmword_20AE9AE20;
        long long v216 = xmmword_20AE9AE30;
        *(void *)&long long v221 = 0;
        *((void *)&v221 + SKCNode::setFlags(this, 66, 1) = 1065353216;
        uint64_t v222 = 0x3F0000003F800000;
        long long v217 = xmmword_20AE9AE30;
        long long v218 = xmmword_20AE9AE20;
        _Q1 = (float32x4_t)xmmword_20AE9A950;
        long long v219 = xmmword_20AE9A950;
        long long v220 = xmmword_20AE9A960;
        uint64_t v223 = 0x3F00000000000000;
        *(void *)&long long v224 = 0x3F00000000000000;
        *((void *)&v224 + SKCNode::setFlags(this, 66, 1) = 0x3F0000003F800000;
        *(void *)&long long v225 = _Q0.i64[0];
        int32x4_t v53 = vtrn2q_s32(vrev64q_s32((int32x4_t)0), (int32x4_t)v32);
        int32x4_t v54 = v53;
        *(float *)&v54.i32[1] = -v193.f32[0];
        *((void *)&v225 + SKCNode::setFlags(this, 66, 1) = 0x3F80000000000000;
        float32x4_t v205 = v29;
        long long v206 = (__int128)v30;
        v53.i32[1] = v193.i32[0];
        long long v207 = (__int128)v31;
        int8x16_t v208 = (int8x16_t)v54;
        float32x4_t v209 = v29;
        float32x4_t v210 = v30;
        int v55 = 2;
        v193.i32[0] = 1.0;
        v185 = v27;
        uint64_t v56 = v24;
        uint64_t v24 = v26;
        uint64_t v36 = v25;
        uint64_t v177 = v56;
        float v28 = 1.0;
        float32x4_t v211 = v31;
        int32x4_t v212 = v53;
        goto LABEL_126;
      case 16:
        char v39 = 0;
        long long v213 = xmmword_20AE9A930;
        long long v214 = xmmword_20AE9ADE0;
        long long v215 = xmmword_20AE9ADF0;
        long long v216 = xmmword_20AE9A960;
        *(void *)&long long v221 = 0;
        *((void *)&v221 + SKCNode::setFlags(this, 66, 1) = 1056964608;
        uint64_t v222 = 0x3F8000003F000000;
        long long v217 = xmmword_20AE9ADE0;
        long long v218 = xmmword_20AE9A940;
        long long v219 = xmmword_20AE9A950;
        long long v220 = xmmword_20AE9ADF0;
        uint64_t v223 = 0x3F80000000000000;
        *(void *)&long long v224 = 1056964608;
        *((void *)&v224 + SKCNode::setFlags(this, 66, 1) = 1065353216;
        *(void *)&long long v225 = _Q0.i64[0];
        _Q1.i64[0] = 0;
        _Q1.i32[2] = 0;
        _Q1.i32[3] = v32.i32[3];
        float32x4_t v57 = _Q1;
        v57.f32[0] = -v193.f32[0];
        *((void *)&v225 + SKCNode::setFlags(this, 66, 1) = 0x3F8000003F000000;
        float32x4_t v205 = v29;
        long long v206 = (__int128)v30;
        _Q1.i32[0] = v193.i32[0];
        long long v207 = (__int128)v31;
        int8x16_t v208 = (int8x16_t)v57;
        float32x4_t v209 = v29;
        float32x4_t v210 = v30;
        int v55 = 2;
        v193.i32[0] = 1.0;
        v185 = v27;
        uint64_t v58 = v24;
        uint64_t v24 = v26;
        uint64_t v36 = v25;
        uint64_t v177 = v58;
        goto LABEL_67;
      case 17:
        uint64_t v177 = v26;
        char v39 = 0;
        long long v213 = xmmword_20AE9A930;
        long long v214 = xmmword_20AE9A940;
        long long v215 = xmmword_20AE9AE20;
        long long v216 = xmmword_20AE9AE30;
        *(void *)&long long v221 = 0;
        *((void *)&v221 + SKCNode::setFlags(this, 66, 1) = 1065353216;
        uint64_t v222 = 0x3F0000003F800000;
        long long v217 = xmmword_20AE9AE30;
        long long v218 = xmmword_20AE9AE20;
        long long v219 = xmmword_20AE9A950;
        long long v220 = xmmword_20AE9A960;
        uint64_t v223 = 0x3F00000000000000;
        *(void *)&long long v224 = 0x3F00000000000000;
        *((void *)&v224 + SKCNode::setFlags(this, 66, 1) = 0x3F0000003F800000;
        *(void *)&long long v225 = _Q0.i64[0];
        *((void *)&v225 + SKCNode::setFlags(this, 66, 1) = 0x3F80000000000000;
        _Q1 = (float32x4_t)vtrn2q_s32(vrev64q_s32((int32x4_t)0), (int32x4_t)v32);
        float32x4_t v59 = _Q1;
        v59.f32[1] = -v28;
        float32x4_t v205 = v29;
        long long v206 = (__int128)v30;
        long long v207 = (__int128)v31;
        int8x16_t v208 = (int8x16_t)v59;
        _Q1.f32[1] = 1.0 - v193.f32[0];
        goto LABEL_66;
      case 18:
        uint64_t v177 = v26;
        char v39 = 0;
        long long v213 = xmmword_20AE9A930;
        long long v214 = xmmword_20AE9ADE0;
        long long v215 = xmmword_20AE9ADF0;
        long long v216 = xmmword_20AE9A960;
        *(void *)&long long v221 = 0;
        *((void *)&v221 + SKCNode::setFlags(this, 66, 1) = 1056964608;
        uint64_t v222 = 0x3F8000003F000000;
        long long v217 = xmmword_20AE9ADE0;
        long long v218 = xmmword_20AE9A940;
        long long v219 = xmmword_20AE9A950;
        long long v220 = xmmword_20AE9ADF0;
        uint64_t v223 = 0x3F80000000000000;
        *(void *)&long long v224 = 1056964608;
        *((void *)&v224 + SKCNode::setFlags(this, 66, 1) = 1065353216;
        *(void *)&long long v225 = _Q0.i64[0];
        *((void *)&v225 + SKCNode::setFlags(this, 66, 1) = 0x3F8000003F000000;
        _Q1.i64[0] = 0;
        _Q1.i32[2] = 0;
        _Q1.i32[3] = v32.i32[3];
        float32x4_t v64 = _Q1;
        v64.f32[0] = -v28;
        float32x4_t v205 = v29;
        long long v206 = (__int128)v30;
        long long v207 = (__int128)v31;
        int8x16_t v208 = (int8x16_t)v64;
        _Q1.f32[0] = 1.0 - v193.f32[0];
LABEL_66:
        float32x4_t v209 = v29;
        float32x4_t v210 = v30;
        int v55 = 2;
        v193.i32[0] = 1.0;
        v185 = v25;
        uint64_t v36 = v27;
LABEL_67:
        float v28 = 1.0;
        float32x4_t v211 = v31;
        int32x4_t v212 = (int32x4_t)_Q1;
        goto LABEL_126;
      case 19:
        float v155 = 1.0 - v8.f32[0];
        unint64_t v65 = 0;
        float v186 = 1.0 - fminf(fmaxf(v8.f32[0] + -0.4, 0.0), 1.0);
        long long v213 = xmmword_20AE9A930;
        long long v214 = xmmword_20AE9ADE0;
        long long v215 = xmmword_20AE9ADF0;
        long long v216 = xmmword_20AE9A960;
        *(void *)&long long v221 = 0;
        *((void *)&v221 + SKCNode::setFlags(this, 66, 1) = 1056964608;
        uint64_t v222 = 0x3F8000003F000000;
        long long v217 = xmmword_20AE9ADE0;
        long long v218 = xmmword_20AE9A940;
        long long v219 = xmmword_20AE9A950;
        long long v220 = xmmword_20AE9ADF0;
        uint64_t v223 = 0x3F80000000000000;
        *(void *)&long long v224 = 1056964608;
        *((void *)&v224 + SKCNode::setFlags(this, 66, 1) = 1065353216;
        *(void *)&long long v225 = _Q0.i64[0];
        *((void *)&v225 + SKCNode::setFlags(this, 66, 1) = 0x3F8000003F000000;
        v66.i64[0] = 1065353216;
        v66.i32[2] = 0;
        float32x4_t v160 = v32;
        v66.i32[3] = v32.i32[3];
        float32x4_t v197 = v205;
        float32x4_t v198 = (float32x4_t)v206;
        float32x4_t v199 = (float32x4_t)v207;
        int8x16_t v200 = v208;
        do
        {
          *(float32x4_t *)&__p[v65 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v65 * 4))), v30, *(float32x2_t *)&v197.f32[v65], 1), v31, *(float32x4_t *)((char *)&v197 + v65 * 4), 2), v66, *(float32x4_t *)((char *)&v197 + v65 * 4), 3);
          v65 += 4;
        }
        while (v65 != 16);
        float32x4_t v182 = v66;
        float32x4_t v143 = v202;
        float32x4_t v147 = *(float32x4_t *)__p;
        float32x4_t v139 = v203;
        int8x16_t v149 = v204;
        float32x4_t v205 = *(float32x4_t *)__p;
        long long v206 = (__int128)v202;
        long long v207 = (__int128)v203;
        int8x16_t v208 = v204;
        float v194 = v8.f32[0] * 0.75;
        float32x4_t v170 = v30;
        float32x4_t v175 = v29;
        float32x4_t v165 = v31;
        __float2 v67 = __sincosf_stret(v194 + v194);
        unint64_t v68 = 0;
        float32x4_t v69 = v175;
        v69.i32[0] = LODWORD(v67.__cosval);
        float32x4_t v70 = v165;
        v70.i32[0] = LODWORD(v67.__sinval);
        v70.i32[2] = LODWORD(v67.__cosval);
        float32x4_t v197 = v147;
        float32x4_t v198 = v143;
        float32x4_t v199 = v139;
        int8x16_t v200 = v149;
        float32x4_t v71 = v160;
        do
        {
          v69.f32[2] = -v67.__sinval;
          *(float32x4_t *)&__p[v68 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v69, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v68 * 4))), v170, *(float32x2_t *)&v197.f32[v68], 1), v70, *(float32x4_t *)((char *)&v197 + v68 * 4), 2), v160, *(float32x4_t *)((char *)&v197 + v68 * 4), 3);
          v68 += 4;
        }
        while (v68 != 16);
        unint64_t v72 = 0;
        v73.i64[0] = 3212836864;
        v73.i32[2] = 0;
        v73.i32[3] = v160.i32[3];
        float32x4_t v197 = *(float32x4_t *)__p;
        float32x4_t v198 = v202;
        float32x4_t v199 = v203;
        int8x16_t v200 = v204;
        do
        {
          *(float32x4_t *)&__p[v72 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v175, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v72 * 4))), v170, *(float32x2_t *)&v197.f32[v72], 1), v165, *(float32x4_t *)((char *)&v197 + v72 * 4), 2), v73, *(float32x4_t *)((char *)&v197 + v72 * 4), 3);
          v72 += 4;
        }
        while (v72 != 16);
        unint64_t v74 = 0;
        float32x4_t v205 = *(float32x4_t *)__p;
        long long v206 = (__int128)v202;
        long long v207 = (__int128)v203;
        int8x16_t v208 = v204;
        v71.i32[1] = 0;
        float32x4_t v75 = v71;
        float32x4_t v197 = *(float32x4_t *)__p;
        float32x4_t v198 = v202;
        float32x4_t v199 = v203;
        int8x16_t v200 = v204;
        do
        {
          v75.f32[2] = v194 * -0.5;
          v75.f32[0] = -v194;
          *(float32x4_t *)&__p[v74 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v175, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v74 * 4))), v170, *(float32x2_t *)&v197.f32[v74], 1), v165, *(float32x4_t *)((char *)&v197 + v74 * 4), 2), v75, *(float32x4_t *)((char *)&v197 + v74 * 4), 3);
          v74 += 4;
        }
        while (v74 != 16);
        unint64_t v76 = 0;
        float32x4_t v197 = *(float32x4_t *)__p;
        float32x4_t v198 = v202;
        float32x4_t v199 = v203;
        int8x16_t v200 = v204;
        do
        {
          *(float32x4_t *)&__p[v76 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v188, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v76 * 4))), v192, *(float32x2_t *)&v197.f32[v76], 1), v190, *(float32x4_t *)((char *)&v197 + v76 * 4), 2), v187, *(float32x4_t *)((char *)&v197 + v76 * 4), 3);
          v76 += 4;
        }
        while (v76 != 16);
        float32x4_t v150 = v71;
        unint64_t v77 = 0;
        float32x4_t v205 = *(float32x4_t *)__p;
        long long v206 = (__int128)v202;
        long long v207 = (__int128)v203;
        int8x16_t v208 = v204;
        float32x4_t v197 = v209;
        float32x4_t v198 = v210;
        float32x4_t v199 = v211;
        int8x16_t v200 = (int8x16_t)v212;
        do
        {
          *(float32x4_t *)&__p[v77 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v175, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v77 * 4))), v170, *(float32x2_t *)&v197.f32[v77], 1), v165, *(float32x4_t *)((char *)&v197 + v77 * 4), 2), v73, *(float32x4_t *)((char *)&v197 + v77 * 4), 3);
          v77 += 4;
        }
        while (v77 != 16);
        float32x4_t v140 = v202;
        float32x4_t v144 = *(float32x4_t *)__p;
        int8x16_t v137 = v204;
        float32x4_t v138 = v203;
        float32x4_t v209 = *(float32x4_t *)__p;
        float32x4_t v210 = v202;
        float32x4_t v211 = v203;
        int32x4_t v212 = (int32x4_t)v204;
        __float2 v78 = __sincosf_stret(v194 * -2.0);
        unint64_t v79 = 0;
        float32x4_t v80 = v175;
        v80.i32[0] = LODWORD(v78.__cosval);
        float32x4_t v81 = v165;
        v81.i32[0] = LODWORD(v78.__sinval);
        v81.i32[2] = LODWORD(v78.__cosval);
        float32x4_t v197 = v144;
        float32x4_t v198 = v140;
        float32x4_t v199 = v138;
        int8x16_t v200 = v137;
        do
        {
          v80.f32[2] = -v78.__sinval;
          *(float32x4_t *)&__p[v79 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v80, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v79 * 4))), v170, *(float32x2_t *)&v197.f32[v79], 1), v81, *(float32x4_t *)((char *)&v197 + v79 * 4), 2), v160, *(float32x4_t *)((char *)&v197 + v79 * 4), 3);
          v79 += 4;
        }
        while (v79 != 16);
        unint64_t v82 = 0;
        float32x4_t v197 = *(float32x4_t *)__p;
        float32x4_t v198 = v202;
        float32x4_t v199 = v203;
        int8x16_t v200 = v204;
        float32x4_t v83 = v150;
        do
        {
          *(float32x4_t *)&__p[v82 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v175, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v82 * 4))), v170, *(float32x2_t *)&v197.f32[v82], 1), v165, *(float32x4_t *)((char *)&v197 + v82 * 4), 2), v182, *(float32x4_t *)((char *)&v197 + v82 * 4), 3);
          v82 += 4;
        }
        while (v82 != 16);
        unint64_t v84 = 0;
        float32x4_t v209 = *(float32x4_t *)__p;
        float32x4_t v210 = v202;
        float32x4_t v211 = v203;
        int32x4_t v212 = (int32x4_t)v204;
        v83.f32[0] = v194;
        float32x4_t v197 = *(float32x4_t *)__p;
        float32x4_t v198 = v202;
        float32x4_t v199 = v203;
        int8x16_t v200 = v204;
        do
        {
          v83.f32[2] = v194 * -0.5;
          *(float32x4_t *)&__p[v84 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v175, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v84 * 4))), v170, *(float32x2_t *)&v197.f32[v84], 1), v165, *(float32x4_t *)((char *)&v197 + v84 * 4), 2), v83, *(float32x4_t *)((char *)&v197 + v84 * 4), 3);
          v84 += 4;
        }
        while (v84 != 16);
        unint64_t v85 = 0;
        float32x4_t v197 = *(float32x4_t *)__p;
        float32x4_t v198 = v202;
        float32x4_t v199 = v203;
        int8x16_t v200 = v204;
        do
        {
          *(float32x4_t *)&__p[v85 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v188, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v85 * 4))), v192, *(float32x2_t *)&v197.f32[v85], 1), v190, *(float32x4_t *)((char *)&v197 + v85 * 4), 2), v187, *(float32x4_t *)((char *)&v197 + v85 * 4), 3);
          v85 += 4;
        }
        while (v85 != 16);
        unint64_t v86 = 0;
        float32x4_t v209 = *(float32x4_t *)__p;
        float32x4_t v210 = v202;
        float32x4_t v211 = v203;
        int32x4_t v212 = (int32x4_t)v204;
        v87.i64[0] = 0;
        v87.i64[1] = __PAIR64__(v160.u32[3], v155 * -4.0);
        float32x4_t v197 = v175;
        float32x4_t v198 = v170;
        float32x4_t v199 = v165;
        int8x16_t v200 = (int8x16_t)v160;
        do
        {
          *(float32x4_t *)&__p[v86 / 2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v175, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v86 * 4))), v170, *(float32x2_t *)&v197.f32[v86], 1), v165, *(float32x4_t *)((char *)&v197 + v86 * 4), 2), v87, *(float32x4_t *)((char *)&v197 + v86 * 4), 3);
          v86 += 4;
        }
        while (v86 != 16);
        uint64_t v88 = v24;
        unint64_t v89 = 0;
        __asm { FMOV            V4.4S, #1.0 }
        _Q4.f32[0] = v186;
        _Q4.f32[1] = v186;
        float32x4_t v197 = *(float32x4_t *)__p;
        float32x4_t v198 = v202;
        float32x4_t v199 = v203;
        int8x16_t v200 = v204;
        do
        {
          _Q1 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v188, COERCE_FLOAT(*(_OWORD *)((char *)&v197 + v89))), v192, *(float32x2_t *)&v197.f32[v89 / 4], 1), v190, *(float32x4_t *)((char *)&v197 + v89), 2), v187, *(float32x4_t *)((char *)&v197 + v89), 3);
          *(float32x4_t *)&__p[v89 / 8] = _Q1;
          v89 += 16;
        }
        while (v89 != 64);
        char v39 = 0;
        _Q4.f32[2] = v186;
        float32x4_t v29 = *(float32x4_t *)__p;
        float32x4_t v30 = v202;
        int v55 = 2;
        v193.i32[0] = 1.0;
        v185 = v27;
        uint64_t v24 = v26;
        uint64_t v36 = v25;
        uint64_t v177 = v88;
LABEL_123:
        float v28 = 1.0;
        float32x4_t v31 = v203;
        float32x4_t v32 = (float32x4_t)v204;
        goto LABEL_127;
      case 20:
        uint64_t v177 = v26;
        if ((*((unsigned char *)a2 + 581) & 8) != 0)
        {
          char v39 = 0;
          int v55 = 1;
          v185 = v25;
          v193.i32[0] = 1.0;
          float v28 = 1.0;
LABEL_125:
          uint64_t v36 = v27;
LABEL_126:
          _Q4 = v180;
        }
        else
        {
          float v156 = 1.0 - v8.f32[0];
          float32x4_t v161 = v32;
          uint64_t v151 = v24;
          float32x4_t v166 = v31;
          float32x4_t v171 = v30;
          float32x4_t v176 = v29;
          v195[0] = MEMORY[0x263EF8330];
          v195[1] = 3221225472;
          v195[2] = ___ZN17SKCTransitionNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEE_block_invoke;
          v195[3] = &__block_descriptor_44_e69_v24__0_shared_ptr_jet_context____jet_context_____shared_weak_count__8l;
          v195[4] = a1;
          __int32 v196 = v8.i32[0];
          SKCPerformResourceOperation(v195);
          uint64_t v24 = *(void *)(a1 + 640);
          float32x4_t v30 = v171;
          float32x4_t v29 = v176;
          float32x4_t v32 = v161;
          float32x4_t v31 = v166;
          _Q4 = v180;
          float v28 = v156;
          if (v24)
          {
            v90 = *(std::__shared_weak_count **)(a1 + 648);
            if (v90) {
              atomic_fetch_add_explicit(&v90->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            v185 = v90;
            if (v25)
            {
              std::__shared_weak_count::__release_shared[abi:ne180100](v25);
              _Q4 = v180;
              float32x4_t v32 = v161;
              float32x4_t v31 = v166;
              float32x4_t v30 = v171;
              float32x4_t v29 = v176;
            }
            int v55 = 0;
            char v39 = 1;
            uint64_t v36 = v27;
            v193.i32[0] = 1.0;
LABEL_106:
            float v28 = 1.0;
          }
          else
          {
            char v39 = 0;
            int v55 = 1;
            v185 = v25;
            uint64_t v24 = v151;
            uint64_t v36 = v27;
          }
        }
LABEL_127:
        int v108 = 6 * (v184 >> 2);
        unsigned int v109 = 4 * v55;
        if (*(unsigned char *)(a1 + 727))
        {
          for (uint64_t i = 0; i != 32; i += 8)
            *(float *)((char *)&v226 + i + 4) = 1.0 - *(float *)((char *)&v226 + i + 4);
          if ((v39 & 1) == 0)
          {
            if (v109 <= 1) {
              uint64_t v111 = 1;
            }
            else {
              uint64_t v111 = v109;
            }
            v112 = (float *)&v221 + 1;
            do
            {
              float *v112 = 1.0 - *v112;
              v112 += 2;
              --v111;
            }
            while (v111);
          }
        }
        uint64_t v113 = 0;
        _Q1.f32[0] = v28 * 255.0;
        int16x8_t v114 = (int16x8_t)vcvtq_s32_f32(_Q1);
        *(int16x4_t *)v114.i8 = vdup_lane_s16(vmovn_s32((int32x4_t)v114), 0);
        int16x8_t v115 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(_Q4, v193.f32[0]), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        unsigned __int32 v116 = vmovn_s16(v114).u32[0];
        do
        {
          *(float32x4_t *)(*((void *)a2 + 3) + 16 * (v113 + *a2)) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(xmmword_20AE9AE50[v113])), v30, *(float32x2_t *)&xmmword_20AE9AE50[v113], 1), v31, (float32x4_t)xmmword_20AE9AE50[v113], 2), v32, (float32x4_t)xmmword_20AE9AE50[v113], 3);
          *(void *)(*((void *)a2 + 2) + 8 * (v113 + *a2)) = *((void *)&v226 + v113);
          *(_DWORD *)(*((void *)a2 + 1) + 4 * (v113++ + *a2)) = v116;
        }
        while (v113 != 4);
        if ((v39 & 1) == 0)
        {
          uint64_t v117 = 0;
          *(int16x4_t *)v115.i8 = vmovn_s32((int32x4_t)v115);
          if (v109 <= 1) {
            uint64_t v118 = 1;
          }
          else {
            uint64_t v118 = v109;
          }
          unsigned __int32 v119 = vmovn_s16(v115).u32[0];
          do
          {
            v120 = &v205 + 4 * (unint64_t)(v117 >> 2);
            *(float32x4_t *)(*((void *)a2 + 3) + 16 * (v117 + *a2 + 4)) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*v120, COERCE_FLOAT(*(&v213 + v117))), v120[1], *(float32x2_t *)(&v213 + v117), 1), v120[2], *((float32x4_t *)&v213+ v117), 2), v120[3], *((float32x4_t *)&v213+ v117), 3);
            *(void *)(*((void *)a2 + 2) + 8 * (v117 + *a2 + 4)) = *((void *)&v221 + v117);
            *(_DWORD *)(*((void *)a2 + 1) + 4 * (v117++ + *a2 + 4)) = v119;
          }
          while (v118 != v117);
        }
        v121 = *a3;
        uint64_t v122 = *((void *)a2 + 21);
        LODWORD(__p[0]) = 31;
        unint64_t v123 = v121[2];
        if (v123 >= v121[3])
        {
          uint64_t v124 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v121 + 1, (int *)__p);
        }
        else
        {
          *(void *)unint64_t v123 = &unk_26BEEC420;
          *(_DWORD *)(v123 + 8) = 31;
          *(void *)(v123 + 24) = 0;
          *(void *)(v123 + 32) = 0;
          *(void *)(v123 + 16) = 0;
          *(void *)(v123 + 64) = 0;
          uint64_t v124 = v123 + 192;
          *(void *)(v123 + 96) = 0;
        }
        v121[2] = v124;
        *(void *)(v124 - 80) = v122;
        *(_OWORD *)(v124 - 64) = xmmword_20AE9A980;
        *(void *)(v124 - 48) = 0x230000000FLL;
        v125 = *a3;
        std::string::basic_string[abi:ne180100]<0>(__p, "a_position");
        jet_command_buffer::set_vertex_buffer(v125, (std::string *)__p, *((void *)a2 + 41));
        if (v202.i8[7] < 0) {
          operator delete(__p[0]);
        }
        v126 = *a3;
        std::string::basic_string[abi:ne180100]<0>(__p, "a_color");
        jet_command_buffer::set_vertex_buffer(v126, (std::string *)__p, *((void *)a2 + 42));
        if (v202.i8[7] < 0) {
          operator delete(__p[0]);
        }
        v127 = *a3;
        std::string::basic_string[abi:ne180100]<0>(__p, "a_tex_coord");
        jet_command_buffer::set_vertex_buffer(v127, (std::string *)__p, *((void *)a2 + 43));
        if (v202.i8[7] < 0) {
          operator delete(__p[0]);
        }
        v128 = *a3;
        std::string::basic_string[abi:ne180100]<0>(__p, "u_texture");
        jet_command_buffer::set_fragment_texture(v128, (std::string *)__p, v24);
        if (v202.i8[7] < 0) {
          operator delete(__p[0]);
        }
        v129 = *a3;
        std::string::basic_string[abi:ne180100]<0>(__p, "u_texture");
        jet_command_buffer::set_fragment_sampler(v129, (std::string *)__p, *((void *)a2 + 60));
        if (v202.i8[7] < 0) {
          operator delete(__p[0]);
        }
        jet_command_buffer::draw_indexed(*a3, 3, *((void *)a2 + 50), v108, 6);
        v130 = (_DWORD *)*((void *)a2 + 83);
        unsigned int v131 = v130[43];
        int v132 = v108 + 6;
        if (v131 <= v108 + 6) {
          unsigned int v131 = v108 + 6;
        }
        v130[43] = v131;
        ++v130[41];
        ++v130[37];
        if ((v39 & 1) == 0)
        {
          v133 = *a3;
          std::string::basic_string[abi:ne180100]<0>(__p, "u_texture");
          jet_command_buffer::set_fragment_texture(v133, (std::string *)__p, v177);
          if (v202.i8[7] < 0) {
            operator delete(__p[0]);
          }
          v134 = *a3;
          std::string::basic_string[abi:ne180100]<0>(__p, "u_texture");
          jet_command_buffer::set_fragment_sampler(v134, (std::string *)__p, *((void *)a2 + 60));
          if (v202.i8[7] < 0) {
            operator delete(__p[0]);
          }
          jet_command_buffer::draw_indexed(*a3, 3, *((void *)a2 + 50), v132, 6 * v55);
          v135 = (_DWORD *)*((void *)a2 + 83);
          unsigned int v136 = v135[43];
          if (v136 <= 6 * v55 + v132) {
            unsigned int v136 = 6 * v55 + v132;
          }
          v135[43] = v136;
          ++v135[41];
          v135[37] += v55;
        }
        *a2 += v109 + 4;
        if (v36) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v36);
        }
        if (v185) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v185);
        }
        break;
      default:
        uint64_t v177 = v26;
        char v39 = 0;
        int v55 = 1;
        v185 = v25;
        goto LABEL_125;
    }
  }
  else
  {
    SKCNode::addRenderOps();
  }
}

void sub_20ADE8120(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

double sk_matrix_scale(simd_float4x4 a1, float32_t a2, float32_t a3, float32_t a4)
{
  uint64_t v4 = 0;
  float32x4_t v6 = *(float32x4_t *)MEMORY[0x263EF89A8];
  float32x4_t v7 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
  float32x4_t v8 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
  float32x4_t v5 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
  v6.f32[0] = a2;
  v7.f32[1] = a3;
  v8.f32[2] = a4;
  v10[2] = a1.columns[2];
  v10[3] = a1.columns[3];
  do
  {
    *(long long *)((char *)&v11 + v4 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v10[v4])), v7, *(float32x2_t *)&v10[v4], 1), v8, (float32x4_t)v10[v4], 2), v5, (float32x4_t)v10[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  return *(double *)&v11;
}

void ___ZN17SKCTransitionNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  float32x4_t v5 = (*(void (**)(void, void))(*(void *)*a2 + 48))(*a2, *(void *)(v4 + 608));
  float32x4_t v6 = (*(void (**)(void, void))(*(void *)*a2 + 48))(*a2, *(void *)(v4 + 624));
  id v7 = *(id *)(v4 + 568);
  [v7 setValue:v5 forKey:@"inputImage"];
  [v7 setValue:v6 forKey:@"inputTargetImage"];
  float32x4_t v8 = [NSNumber numberWithDouble:*(float *)(a1 + 40)];
  [v7 setValue:v8 forKey:@"inputTime"];

  uint64_t v9 = [v7 valueForKey:@"outputImage"];
  if (v9)
  {
    uint64_t v10 = (*(uint64_t (**)(void, uint64_t))(*(void *)*a2 + 40))(*a2, v9);
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v12, v10);
  }
  long long v11 = *(std::__shared_weak_count **)(v4 + 648);
  *(_OWORD *)(v4 + 640) = 0u;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
}

void sub_20ADE8430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

std::string *jet_command_buffer::set_fragment_texture(uint64_t *a1, std::string *__str, uint64_t a3)
{
  int v9 = 8;
  unint64_t v6 = a1[2];
  if (v6 >= a1[3])
  {
    uint64_t v7 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v9);
  }
  else
  {
    *(void *)unint64_t v6 = &unk_26BEEC420;
    *(_DWORD *)(v6 + 8) = 8;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 64) = 0;
    uint64_t v7 = v6 + 192;
    *(void *)(v6 + 96) = 0;
  }
  a1[2] = v7;
  *(void *)(v7 - 80) = a3;
  return std::string::operator=((std::string *)(v7 - 176), __str);
}

std::string *jet_command_buffer::set_fragment_sampler(uint64_t *a1, std::string *__str, uint64_t a3)
{
  int v9 = 30;
  unint64_t v6 = a1[2];
  if (v6 >= a1[3])
  {
    uint64_t v7 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v9);
  }
  else
  {
    *(void *)unint64_t v6 = &unk_26BEEC420;
    *(_DWORD *)(v6 + 8) = 30;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 64) = 0;
    uint64_t v7 = v6 + 192;
    *(void *)(v6 + 96) = 0;
  }
  a1[2] = v7;
  *(void *)(v7 - 80) = a3;
  return std::string::operator=((std::string *)(v7 - 176), __str);
}

char *SKCTransitionNode::addRenderableChildren(char *result, uint64_t a2, uint64_t a3)
{
  if (!*((void *)result + 75)) {
    return SKCNode::addRenderableChildren(result, a2, a3);
  }
  return result;
}

void SKCTransitionNode::ensure_framebuffers(uint64_t a1, uint64_t a2, __n128 a3)
{
  unint64_t v23 = a3.n128_u64[1];
  if (!*(unsigned char *)(a1 + 576) || !*(unsigned char *)(a1 + 724))
  {
    float32x4_t v5 = *(uint64_t (****)(void))(a1 + 608);
    if (!v5) {
      goto LABEL_11;
    }
    unsigned int v6 = (**v5)(v5);
    a3.n128_u32[2] = v23;
    if (v6 < v23
      || (unsigned int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 608) + 8))(*(void *)(a1 + 608)),
          a3.n128_u32[2] = v23,
          v7 < HIDWORD(v23)))
    {
      float32x4_t v8 = *(std::__shared_weak_count **)(a1 + 616);
      long long v9 = 0uLL;
      *(_OWORD *)(a1 + 608) = 0u;
      if (v8)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
        long long v9 = 0uLL;
        a3.n128_u32[2] = v23;
      }
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 664);
      *(_OWORD *)(a1 + 656) = v9;
      if (v10)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
        a3.n128_u32[2] = v23;
      }
    }
    if (!*(void *)(a1 + 608))
    {
LABEL_11:
      SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v24);
      uint64_t texture_2d = jet_context::create_texture_2d();
      std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v25, texture_2d);
    }
  }
  if (!*(unsigned char *)(a1 + 577) || !*(unsigned char *)(a1 + 725))
  {
    long long v12 = *(unsigned int (****)(void))(a1 + 624);
    if (!v12) {
      goto LABEL_22;
    }
    if ((**v12)(v12) < a3.n128_u32[2]
      || (*(unsigned int (**)(void))(**(void **)(a1 + 624) + 8))(*(void *)(a1 + 624)) < HIDWORD(v23))
    {
      float32x4_t v13 = *(std::__shared_weak_count **)(a1 + 632);
      long long v14 = 0uLL;
      *(_OWORD *)(a1 + 624) = 0u;
      if (v13)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
        long long v14 = 0uLL;
      }
      float32x4_t v15 = *(std::__shared_weak_count **)(a1 + 680);
      *(_OWORD *)(a1 + 672) = v14;
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
    }
    if (!*(void *)(a1 + 624))
    {
LABEL_22:
      SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v24);
      uint64_t v16 = jet_context::create_texture_2d();
      std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v25, v16);
    }
  }
  if (!*(void *)(a1 + 688))
  {
    SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v24);
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 112))(v24);
    std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(&v25, v17);
  }
  float v18 = *(void **)(a1 + 704);
  if (!v18)
  {
    SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v24);
    uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 112))(v24);
    std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(&v25, v19);
  }
  int64x2_t v20 = *(void **)(a1 + 688);
  v20[2] = *(void *)(a1 + 608);
  uint64_t v21 = *(void *)(a1 + 656);
  v20[26] = v21;
  v20[29] = v21;
  v18[2] = *(void *)(a1 + 624);
  uint64_t v22 = *(void *)(a1 + 672);
  v18[26] = v22;
  v18[29] = v22;
}

void sub_20ADE8A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SKCTransitionNode::addRequistePasses(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 600) && !*(unsigned char *)(a1 + 726))
  {
    SKCTransitionNode::ensure_framebuffers(a1, a2, *(__n128 *)(*(void *)(*(void *)a3 + 16) + 48));
    operator new();
  }

  return SKCNode::addRequistePasses();
}

void sub_20ADE8F14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(exception_object);
}

void *std::list<std::shared_ptr<SKCRenderSortGroup>>::push_back(uint64_t *a1, void *a2)
{
  double result = operator new(0x20uLL);
  uint64_t v5 = a2[1];
  result[2] = *a2;
  result[3] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *a1;
  *double result = *a1;
  result[1] = a1;
  *(void *)(v6 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

uint64_t SKCTransitionNode::setFlipTextures(uint64_t this, char a2)
{
  *(unsigned char *)(this + 727) = a2;
  return this;
}

uint64_t SKCTransitionNode::getFlipTextures(SKCTransitionNode *this)
{
  return *((unsigned __int8 *)this + 727);
}

uint64_t SKCTransitionNode::setIgnoreScenes(uint64_t this, char a2)
{
  *(unsigned char *)(this + 726) = a2;
  return this;
}

uint64_t SKCTransitionNode::getIgnoreScenes(SKCTransitionNode *this)
{
  return *((unsigned __int8 *)this + 726);
}

void SKCTransitionNode::setInputTextures(void *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a2;
  uint64_t v5 = a2[1];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a1[76] = v6;
  unsigned int v7 = (std::__shared_weak_count *)a1[77];
  a1[77] = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  a1[78] = v9;
  uint64_t v10 = (std::__shared_weak_count *)a1[79];
  a1[79] = v8;
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
}

void SKCTransitionNode::~SKCTransitionNode(SKCTransitionNode *this)
{
  *(void *)this = &unk_26BEEC990;
  *((_OWORD *)this + 37) = 0u;
  uint64_t v2 = (void *)*((void *)this + 71);
  *((void *)this + 7SKCNode::setFlags(this, 66, 1) = 0;

  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 89);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 87);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 85);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 83);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unsigned int v7 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }

  SKCNode::~SKCNode((id *)this);
}

{
  uint64_t vars8;

  SKCTransitionNode::~SKCTransitionNode(this);

  JUMPOUT(0x21052EA30);
}

uint64_t SKCNode::isLightNode(SKCNode *this)
{
  return 0;
}

void SKCRenderSortGroup::~SKCRenderSortGroup(SKCRenderSortGroup *this)
{
  SKCRenderSortGroup::~SKCRenderSortGroup(this);

  JUMPOUT(0x21052EA30);
}

{
  void *v2;
  void *i;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  void *v8;

  *(void *)this = &unk_26BEECA90;
  uint64_t v2 = (void *)((char *)this + 32);
  for (uint64_t i = (void *)*((void *)this + 5); i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4) {
      MEMORY[0x21052EA30](v4, 0x1020C40601E13ABLL);
    }
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(v2);
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  unsigned int v7 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::__list_imp<SKCRenderSortInfo *>::clear((void *)this + 7);
  std::__list_imp<SKCRenderSortInfo *>::clear(v2);
  uint64_t v8 = (void *)*((void *)this + 1);
  if (v8)
  {
    *((void *)this + 2) = v8;
    operator delete(v8);
  }
}

void *std::__list_imp<SKCRenderSortInfo *>::clear(void *result)
{
  if (result[2])
  {
    uint64_t v1 = result;
    double result = (void *)result[1];
    uint64_t v2 = *v1;
    uint64_t v3 = *result;
    *(void *)(v3 + 8) = *(void *)(*v1 + 8);
    **(void **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        uint64_t v4 = (void *)result[1];
        operator delete(result);
        double result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

void std::shared_ptr<SKCRenderPass>::shared_ptr[abi:ne180100]<SKCRenderPass,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_20ADE9370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<SKCRenderPass>::reset[abi:ne180100]((uint64_t **)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<SKCRenderPass *,std::shared_ptr<SKCRenderPass>::__shared_ptr_default_delete<SKCRenderPass,SKCRenderPass>,std::allocator<SKCRenderPass>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

void std::__shared_ptr_pointer<SKCRenderPass *,std::shared_ptr<SKCRenderPass>::__shared_ptr_default_delete<SKCRenderPass,SKCRenderPass>,std::allocator<SKCRenderPass>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<SKCRenderPass *,std::shared_ptr<SKCRenderPass>::__shared_ptr_default_delete<SKCRenderPass,SKCRenderPass>,std::allocator<SKCRenderPass>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<SKCRenderPass>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2)
{
  if (a2)
  {
    std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(a2 + 3);
    std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(a2);
    JUMPOUT(0x21052EA30);
  }
}

void std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        uint64_t v5 = (uint64_t *)v3[1];
        uint64_t v6 = (std::__shared_weak_count *)v3[3];
        if (v6) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        }
        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t **std::unique_ptr<SKCRenderPass>::reset[abi:ne180100](uint64_t **result, uint64_t *a2)
{
  uint64_t v2 = *result;
  *double result = a2;
  if (v2)
  {
    std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(v2 + 3);
    std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(v2);
    JUMPOUT(0x21052EA30);
  }
  return result;
}

void std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20ADE95B4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<SKCRenderSortGroup *,std::shared_ptr<SKCRenderSortGroup>::__shared_ptr_default_delete<SKCRenderSortGroup,SKCRenderSortGroup>,std::allocator<SKCRenderSortGroup>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<SKCRenderSortGroup *,std::shared_ptr<SKCRenderSortGroup>::__shared_ptr_default_delete<SKCRenderSortGroup,SKCRenderSortGroup>,std::allocator<SKCRenderSortGroup>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<SKCRenderSortGroup *,std::shared_ptr<SKCRenderSortGroup>::__shared_ptr_default_delete<SKCRenderSortGroup,SKCRenderSortGroup>,std::allocator<SKCRenderSortGroup>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void SKCCropNode::SKCCropNode(SKCCropNode *this)
{
  SKCNode::SKCNode(this);
  *(void *)uint64_t v1 = &unk_26BEECBB0;
  *(unsigned char *)(v1 + 560) = 0;
  *(_WORD *)(v1 + 688) = 0;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_OWORD *)(v1 + 616) = 0u;
  *(_OWORD *)(v1 + 632) = 0u;
  *(_OWORD *)(v1 + 648) = 0u;
  *(void *)(v1 + 664) = 0;
}

void SKCCropNode::checkShouldUseStencilMethod(SKCCropNode *this, SKCRenderInfo *a2)
{
  if (*((unsigned char *)this + 688))
  {
    *((unsigned char *)this + 560) = 0;
  }
  else
  {
    uint64_t v3 = (uint64_t **)*((void *)this + 71);
    if (!v3 || (*((unsigned char *)a2 + 580) & 0x80) != 0)
    {
      *((unsigned char *)this + 560) = 1;
    }
    else
    {
      uint64_t v7 = 0;
      uint64_t v8 = &v7;
      uint64_t v9 = 0x2020000000;
      char v10 = 0;
      if (*((unsigned char *)a2 + 576))
      {
        char v4 = 0;
        char v10 = 1;
      }
      else
      {
        v6[0] = MEMORY[0x263EF8330];
        v6[1] = 3221225472;
        v6[2] = ___ZN11SKCCropNode27checkShouldUseStencilMethodEP13SKCRenderInfo_block_invoke;
        v6[3] = &unk_263FE9F18;
        v6[4] = &v7;
        SKCNode::walkDown(v3, v6, 1, 1);
        if (*((unsigned char *)v8 + 24))
        {
          char v4 = 0;
        }
        else
        {
          v5[0] = MEMORY[0x263EF8330];
          v5[1] = 3221225472;
          v5[2] = ___ZN11SKCCropNode27checkShouldUseStencilMethodEP13SKCRenderInfo_block_invoke_2;
          v5[3] = &unk_263FE9F18;
          v5[4] = &v7;
          SKCNode::walkDown((uint64_t **)this, v5, 0, 1);
          char v4 = *((unsigned char *)v8 + 24) ^ 1;
        }
      }
      *((unsigned char *)this + 560) = v4;
      _Block_object_dispose(&v7, 8);
    }
  }
}

void sub_20ADE9834(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN11SKCCropNode27checkShouldUseStencilMethodEP13SKCRenderInfo_block_invoke(uint64_t a1, SKCNode *a2, unsigned char *a3)
{
  uint64_t result = maskNodeRequiresAlphaMask(a2);
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a3 = 1;
  }
  return result;
}

uint64_t maskNodeRequiresAlphaMask(SKCNode *a1)
{
  if (!a1) {
    return 0;
  }
  if (v2)
  {
    if (!v2[74]) {
      return 0;
    }
  }
  {
    if (!v4)
    {
      if (!v4) {
        return 0;
      }
    }
    if (!v4[72]) {
      return 0;
    }
  }
  return 1;
}

SKCEffectNode *___ZN11SKCCropNode27checkShouldUseStencilMethodEP13SKCRenderInfo_block_invoke_2(SKCEffectNode *result, void *lpsrc, unsigned char *a3)
{
  if (lpsrc)
  {
    uint64_t v5 = result;
    if (result
    {
      *(unsigned char *)(*(void *)(*((void *)v5 + 4) + 8) + 24) = 1;
      *a3 = 1;
    }
  }
  return result;
}

uint64_t SKCCropNode::generatesVisibleGeometry(SKCCropNode *this, const simd_float4x4 *a2)
{
  return 1;
}

void SKCCropNode::setMaskNode(SKCNode *this, SKCNode *a2)
{
  uint64_t v2 = *((void *)this + 71);
  if (v2) {
    *(void *)(v2 + 80) = 0;
  }
  *((void *)this + 7SKCNode::setFlags(this, 66, 1) = a2;
  if (a2) {
    *((void *)a2 + 10) = this;
  }
  SKCNode::setDirty(this);
}

uint64_t SKCCropNode::update(SKCCropNode *this, double a2, float a3)
{
  SKCNode::update(this, a2, 1.0);
  uint64_t result = *((void *)this + 71);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t, double, float))(*(void *)result + 152))(result, a2, 1.0);
    *((_DWORD *)this + 69) |= *(_DWORD *)(*((void *)this + 71) + 276) | *(_DWORD *)(*((void *)this + 71) + 272);
  }
  return result;
}

double SKCCropNode::getBatchInfo@<D0>(uint64_t a1@<X8>, uint64_t a2@<X0>, uint64_t a3@<X1>)
{
  if (!*(void *)(a2 + 568) || (*(unsigned char *)(a3 + 580) & 0x80) != 0 || *(unsigned char *)(a2 + 560)) {
    return SKCNode::getBatchInfo(a1);
  }
  uint64_t v4 = *(void *)(a2 + 656);
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  uint64_t v5 = 312;
  if (!*(unsigned char *)(a2 + 689)) {
    uint64_t v5 = 296;
  }
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 48) = 0uLL;
  *(_OWORD *)(a1 + 60) = 0uLL;
  uint64_t v6 = *(void *)(a3 + v5);
  *(void *)(a1 + 32) = *(void *)(a2 + 608);
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 12) = 0;
  *(void *)&double result = 0x300000004;
  *(void *)(a1 + 4) = 0x300000004;
  return result;
}

uint64_t SKCCropNode::getMaxBatchRenderElementCount(uint64_t a1)
{
  return 4 * (*(unsigned char *)(a1 + 560) == 0);
}

uint64_t SKCCropNode::addBatchRenderElements(float32x4_t *a1, float32x4_t *a2, float32x4_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  if (!a1[35].i64[1] || a2[36].i8[4] < 0 || a1[35].i8[0])
  {
    return SKCNode::addBatchRenderElements();
  }
  else
  {
    uint64_t v4 = 0;
    a3.f32[0] = fminf(fmaxf(a1[20].f32[1] * a2[6].f32[0], 0.0), 1.0) * 255.0;
    int16x8_t v5 = (int16x8_t)vcvtq_s32_f32(a3);
    *(int16x4_t *)v5.i8 = vdup_lane_s16(vmovn_s32((int32x4_t)v5), 0);
    float32x4_t v6 = a1[42];
    *((void *)&v7 + SKCNode::setFlags(this, 66, 1) = 0x3F80000000000000;
    *(void *)&long long v8 = a1[42].i64[0];
    *((void *)&v8 + SKCNode::setFlags(this, 66, 1) = 0x3F80000000000000;
    long long v9 = xmmword_20AE9A910;
    LODWORD(v9) = vaddq_f32(v6, (float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2)).u32[0];
    long long v10 = v9;
    DWORD1(v10) = DWORD1(v8);
    DWORD1(v9) = vaddq_f32(v6, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&v6, 3)).i32[1];
    long long v23 = v8;
    long long v24 = v10;
    *(void *)&long long v7 = __PAIR64__(DWORD1(v9), v6.u32[0]);
    long long v25 = v9;
    long long v26 = v7;
    float32x4_t v11 = a2[2];
    float32x4_t v12 = a2[3];
    float32x4_t v13 = a2[4];
    float32x4_t v14 = a2[5];
    do
    {
      *(long long *)((char *)&v23 + v4) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, COERCE_FLOAT(*(long long *)((char *)&v23 + v4))), v12, *(float32x2_t *)((char *)&v23 + v4), 1), v13, *(float32x4_t *)((char *)&v23 + v4), 2), v14, *(float32x4_t *)((char *)&v23 + v4), 3);
      v4 += 16;
    }
    while (v4 != 64);
    long long v15 = v24;
    *(_OWORD *)(a2[1].i64[1] + 16 * a2->u32[0]) = v23;
    *(_OWORD *)(a2[1].i64[1] + 16 * (a2->i32[0] + 1)) = v15;
    long long v16 = v26;
    *(_OWORD *)(a2[1].i64[1] + 16 * (a2->i32[0] + 2)) = v25;
    *(_OWORD *)(a2[1].i64[1] + 16 * (a2->i32[0] + 3)) = v16;
    *(void *)(a2[1].i64[0] + 8 * a2->u32[0]) = 0;
    *(void *)(a2[1].i64[0] + 8 * (a2->i32[0] + 1)) = 1065353216;
    __asm { FMOV            V1.2S, #1.0 }
    *(void *)(a2[1].i64[0] + 8 * (a2->i32[0] + 2)) = _D1;
    *(void *)(a2[1].i64[0] + 8 * (a2->i32[0] + 3)) = 0x3F80000000000000;
    unsigned __int32 v22 = vmovn_s16(v5).u32[0];
    *(_DWORD *)(a2->i64[1] + 4 * a2->u32[0]) = v22;
    *(_DWORD *)(a2->i64[1] + 4 * (a2->i32[0] + 1)) = v22;
    *(_DWORD *)(a2->i64[1] + 4 * (a2->i32[0] + 2)) = v22;
    *(_DWORD *)(a2->i64[1] + 4 * (a2->i32[0] + 3)) = v22;
    return 4;
  }
}

void SKCCropNode::addRenderableChildren(SKCCropNode *a1, SKCRenderInfo *a2, uint64_t a3)
{
  SKCCropNode::checkShouldUseStencilMethod(a1, a2);
  if (!*((void *)a1 + 71) || (*((unsigned char *)a2 + 580) & 0x80) != 0)
  {
    SKCNode::addRenderableChildren((char *)a1, (uint64_t)a2, a3);
  }
}

void SKCCropNode::ensure_framebuffers(uint64_t a1, uint64_t a2)
{
  uint64_t v40 = 0;
  float32x4_t v41 = (float32x4_t *)&v40;
  uint64_t v42 = 0x7012000000;
  float32x4_t v43 = __Block_byref_object_copy_;
  float32x4_t v44 = __Block_byref_object_dispose_;
  float32x4_t v45 = "";
  long long v46 = SKCBoundingBoxEmpty;
  long long v47 = xmmword_20AE9B480;
  long long v48 = xmmword_20AE9B490;
  long long v49 = xmmword_20AE9B4A0;
  v39[0] = MEMORY[0x263EF8330];
  v39[1] = 3221225472;
  v39[2] = ___ZN11SKCCropNode19ensure_framebuffersEP13SKCRenderInfoDv4_j_block_invoke;
  v39[3] = &unk_263FE9F18;
  v39[4] = &v40;
  SKCNode::walkChildren((char **)a1, v39, 0, 1);
  uint64_t v4 = v41;
  if (*(unsigned char *)(a1 + 689))
  {
    v38.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox((char **)*(void *)(a1 + 568));
    v38.columns[1] = v5;
    v38.columns[2] = v6;
    v38.columns[3] = v7;
    float32x4_t v8 = SKCBoundingBoxUnion((const simd_float4x4 *)&v4[3], &v38);
  }
  else
  {
    v38.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox((char **)*(void *)(a1 + 568));
    v38.columns[1] = v12;
    v38.columns[2] = v13;
    v38.columns[3] = v14;
    *(double *)v8.i64 = SKCBoundingBoxIntersection((const simd_float4x4 *)&v4[3], &v38);
  }
  long long v15 = v41;
  v41[3] = v8;
  v15[4] = v9;
  v15[5] = v10;
  v15[6] = v11;
  float32x4_t AABB = SKCBoundingBoxGetAABB((const simd_float4x4 *)&v15[3]);
  float32x2_t v34 = vmaxnm_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)AABB, (int8x16_t)AABB, 8uLL), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  *(float32x2_t *)&AABB.u32[2] = v34;
  *(float32x4_t *)(a1 + 672) = AABB;
  SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v38);
  int v17 = (*(uint64_t (**)(uint64_t, void))(*(void *)v38.columns[0].i64[0] + 152))(v38.columns[0].i64[0], 0);
  float32x2_t v18 = vrndp_f32(v34);
  v19.n128_u64[0] = (unint64_t)vmaxnm_f32(vadd_f32(v18, v18), (float32x2_t)0x4000000040000000);
  float v20 = (float)v17;
  if (v19.n128_f32[0] > (float)v17)
  {
    float v21 = v19.n128_f32[0] - v20;
    v19.n128_f32[0] = (float)v17;
    *(float *)(a1 + 680) = *(float *)(a1 + 680) + (float)(v21 * -0.5);
  }
  float v22 = v19.n128_f32[1];
  if (v19.n128_f32[1] > v20)
  {
    v19.n128_f32[1] = (float)v17;
    *(float *)(a1 + 684) = *(float *)(a1 + 684) + (float)((float)(v22 - v20) * -0.5);
  }
  __n128 v35 = v19;
  long long v23 = *(unsigned int (****)(void))(a1 + 608);
  if (!v23) {
    goto LABEL_18;
  }
  float v24 = (float)(**v23)(v23);
  if (v35.n128_f32[0] > v24
    || v35.n128_f32[1] > (float)(*(unsigned int (**)(void, float, __n128))(**(void **)(a1 + 608) + 8))(*(void *)(a1 + 608), v24, v35))
  {
    long long v25 = *(std::__shared_weak_count **)(a1 + 616);
    long long v26 = 0uLL;
    *(_OWORD *)(a1 + 608) = 0u;
    if (v25)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      long long v26 = 0uLL;
    }
    uint64_t v27 = *(std::__shared_weak_count **)(a1 + 664);
    *(_OWORD *)(a1 + 656) = v26;
    if (v27) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    }
    float v28 = *(std::__shared_weak_count **)(a1 + 632);
    *(_OWORD *)(a1 + 624) = 0u;
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
  }
  if (!*(void *)(a1 + 608))
  {
LABEL_18:
    SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v36);
    uint64_t texture_2d = jet_context::create_texture_2d();
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v37, texture_2d);
  }
  float32x4_t v30 = *(void **)(a1 + 592);
  if (!v30)
  {
    SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v36);
    uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v36 + 112))(v36);
    std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(&v37, v31);
  }
  v30[2] = *(void *)(a1 + 608);
  uint64_t v32 = *(void *)(a1 + 624);
  v30[26] = v32;
  v30[29] = v32;
  int32x4_t v33 = *(void **)(a1 + 640);
  v33[2] = *(void *)(a1 + 656);
  v33[26] = v32;
  v33[29] = v32;
  if (v38.columns[0].i64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v38.columns[0].i64[1]);
  }
  _Block_object_dispose(&v40, 8);
}

void sub_20ADEA3A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy_(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void ___ZN11SKCCropNode19ensure_framebuffersEP13SKCRenderInfoDv4_j_block_invoke(uint64_t a1, char **this)
{
  long long v3 = (const simd_float4x4 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  v12.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox(this);
  v12.columns[1] = v4;
  v12.columns[2] = v5;
  v12.columns[3] = v6;
  float32x4_t v7 = SKCBoundingBoxUnion(v3, &v12);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  *(float32x4_t *)(v8 + 48) = v7;
  *(_OWORD *)(v8 + 64) = v9;
  *(_OWORD *)(v8 + 80) = v10;
  *(_OWORD *)(v8 + 96) = v11;
}

uint64_t SKCCropNode::addRequistePasses(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 568) && (*(unsigned char *)(a2 + 580) & 0x80) == 0 && !*(unsigned char *)(a1 + 560))
  {
    SKCCropNode::ensure_framebuffers(a1, a2);
    (***(void (****)(void))(a1 + 608))(*(void *)(a1 + 608));
    (*(void (**)(void))(**(void **)(a1 + 608) + 8))(*(void *)(a1 + 608));
    operator new();
  }

  return SKCNode::addRequistePasses();
}

void sub_20ADEA8B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SKCCropNode::addSubGroups(uint64_t result, float32x4_t *a2)
{
  uint64_t v3 = result;
  if (!*(void *)(result + 568) || a2[36].i8[4] < 0)
  {
    return SKCNode::addSubGroups();
  }
  else if (*(unsigned char *)(result + 560))
  {
    uint64_t v30 = 0;
    uint64_t v31 = (float32x4_t *)&v30;
    uint64_t v32 = 0x7012000000;
    int32x4_t v33 = __Block_byref_object_copy_;
    long long v36 = SKCBoundingBoxEmpty;
    long long v37 = xmmword_20AE9B480;
    long long v38 = xmmword_20AE9B490;
    float32x2_t v34 = __Block_byref_object_dispose_;
    __n128 v35 = "";
    long long v39 = xmmword_20AE9B4A0;
    v29[0] = MEMORY[0x263EF8330];
    v29[1] = 3221225472;
    v29[2] = ___ZN11SKCCropNode12addSubGroupsEP13SKCRenderInfoPNSt3__14listINS2_10shared_ptrI18SKCRenderSortGroupEENS2_9allocatorIS6_EEEE_block_invoke;
    v29[3] = &unk_263FE9F18;
    v29[4] = &v30;
    SKCNode::walkChildren((char **)result, v29, 0, 1);
    simd_float4 v4 = v31;
    v41.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox((char **)*(void *)(v3 + 568));
    v41.columns[1] = v5;
    v41.columns[2] = v6;
    v41.columns[3] = v7;
    float32x4_t v8 = SKCBoundingBoxUnion((const simd_float4x4 *)&v4[3], &v41);
    long long v9 = v31;
    v31[3] = v8;
    v9[4] = v10;
    v9 += 3;
    v9[2] = v11;
    v9[3] = v12;
    *(double *)&long long v13 = SKCBoundingBoxGetVerts((const simd_float4x4 *)v9);
    uint64_t v14 = 0;
    float32x4_t v15 = a2[2];
    float32x4_t v16 = a2[3];
    float32x4_t v17 = a2[4];
    float32x4_t v18 = a2[5];
    v40[0] = v13;
    v40[1] = v19;
    v40[2] = v20;
    v40[3] = v21;
    do
    {
      v41.columns[v14] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(v40[v14])), v16, *(float32x2_t *)&v40[v14], 1), v17, (float32x4_t)v40[v14], 2), v18, (float32x4_t)v40[v14], 3);
      ++v14;
    }
    while (v14 != 4);
    simd_float4 v27 = v41.columns[2];
    simd_float4 v28 = v41.columns[0];
    simd_float4 v25 = v41.columns[1];
    simd_float4 v26 = v41.columns[3];
    SKCRenderer::getBackingContext(a2[6].i64[1], v40);
    float v22 = *(jet_buffer_pool **)(v3 + 576);
    if (!v22)
    {
      uint64_t v23 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(**(void **)&v40[0] + 16))(*(void *)&v40[0], 0, 4, 6);
      std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v41, v23);
    }
    jet_buffer_pool::next_buffer(v22);
    data = (simd_float4 *)jet_buffer_pool::get_data(*(jet_buffer_pool **)(v3 + 576));
    simd_float4 *data = v28;
    data[1] = v25;
    data[2] = v27;
    data[3] = v27;
    data[4] = v26;
    data[5] = v28;
    operator new();
  }
  return result;
}

void sub_20ADEB100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  float32x4_t v29 = *(std::__shared_weak_count **)(v27 - 200);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void ___ZN11SKCCropNode12addSubGroupsEP13SKCRenderInfoPNSt3__14listINS2_10shared_ptrI18SKCRenderSortGroupEENS2_9allocatorIS6_EEEE_block_invoke(uint64_t a1, char **this)
{
  uint64_t v3 = (const simd_float4x4 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  v12.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox(this);
  v12.columns[1] = v4;
  v12.columns[2] = v5;
  v12.columns[3] = v6;
  float32x4_t v7 = SKCBoundingBoxUnion(v3, &v12);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  *(float32x4_t *)(v8 + 48) = v7;
  *(_OWORD *)(v8 + 64) = v9;
  *(_OWORD *)(v8 + 80) = v10;
  *(_OWORD *)(v8 + 96) = v11;
}

uint64_t jet_command_buffer::draw(uint64_t *a1, int a2, int a3, int a4)
{
  int v10 = 3;
  unint64_t v8 = a1[2];
  if (v8 >= a1[3])
  {
    uint64_t result = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v10);
  }
  else
  {
    *(void *)unint64_t v8 = &unk_26BEEC420;
    *(_DWORD *)(v8 + 8) = 3;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 64) = 0;
    uint64_t result = v8 + 192;
    *(void *)(v8 + 96) = 0;
  }
  a1[2] = result;
  *(_DWORD *)(result - 64) = a2;
  *(_DWORD *)(result - 60) = a3;
  *(_DWORD *)(result - 56) = a4;
  return result;
}

void SKCCropNode::setForceAlphaMask(SKCNode *this, char a2)
{
  *((unsigned char *)this + 688) = a2;
  SKCNode::setDirty(this);
}

void SKCCropNode::setInvertMask(SKCNode *this, char a2)
{
  *((unsigned char *)this + 689) = a2;
  SKCNode::setDirty(this);
}

void SKCCropNode::~SKCCropNode(SKCCropNode *this)
{
  *(void *)this = &unk_26BEECBB0;
  uint64_t v2 = *((void *)this + 71);
  if (v2 && *(SKCCropNode **)(v2 + 80) == this) {
    *(void *)(v2 + 80) = 0;
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 83);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  simd_float4 v4 = (std::__shared_weak_count *)*((void *)this + 81);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  simd_float4 v5 = (std::__shared_weak_count *)*((void *)this + 79);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  simd_float4 v6 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  float32x4_t v7 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  unint64_t v8 = (std::__shared_weak_count *)*((void *)this + 73);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }

  SKCNode::~SKCNode((id *)this);
}

{
  uint64_t vars8;

  SKCCropNode::~SKCCropNode(this);

  JUMPOUT(0x21052EA30);
}

void jet_command_buffer::jet_command_buffer(jet_command_buffer *this, unint64_t a2)
{
  *(void *)this = &unk_26BEECCB0;
  *((void *)this + SKCNode::setFlags(this, 66, 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::vector<jet_render_op>::reserve((uint64_t *)this + 1, a2);
}

void sub_20ADEB484(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<jet_render_op>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<jet_render_op>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 6) < a2)
  {
    if (a2 >= 0x155555555555556) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<jet_render_op>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 192 * v6;
    std::vector<jet_render_op>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<jet_render_op>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void sub_20ADEB53C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<jet_render_op>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void jet_command_buffer::~jet_command_buffer(jet_command_buffer *this)
{
  *(void *)this = &unk_26BEECCB0;
  uint64_t v1 = (void **)((char *)this + 8);
  std::vector<jet_render_op>::__destroy_vector::operator()[abi:ne180100](&v1);
}

{
  void **v2;

  *(void *)this = &unk_26BEECCB0;
  uint64_t v2 = (void **)((char *)this + 8);
  std::vector<jet_render_op>::__destroy_vector::operator()[abi:ne180100](&v2);
  MEMORY[0x21052EA30](this, 0xA1C4030951706);
}

void std::vector<jet_render_op>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      uint64_t v6 = v4 - 192;
      float32x4_t v7 = v4 - 192;
      unint64_t v8 = v4 - 192;
      do
      {
        long long v9 = *(void (***)(char *))v8;
        v8 -= 192;
        (*v9)(v7);
        v6 -= 192;
        BOOL v10 = v7 == v2;
        float32x4_t v7 = v8;
      }
      while (!v10);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20ADEB73C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_command_buffer *,std::shared_ptr<jet_command_buffer>::__shared_ptr_default_delete<jet_command_buffer,jet_command_buffer>,std::allocator<jet_command_buffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_command_buffer *,std::shared_ptr<jet_command_buffer>::__shared_ptr_default_delete<jet_command_buffer,jet_command_buffer>,std::allocator<jet_command_buffer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_command_buffer *,std::shared_ptr<jet_command_buffer>::__shared_ptr_default_delete<jet_command_buffer,jet_command_buffer>,std::allocator<jet_command_buffer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_20ADEBA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADEBAA4(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C403602C3BFLL);

  _Unwind_Resume(a1);
}

void sub_20ADEBBDC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20ADEBCE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADEBE3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEC1E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEC2D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEC3B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEC4A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEC7F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEC890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

SKAction *__cdecl +[SKAction runBlock:](id a1, SEL a2, dispatch_block_t block)
{
  uint64_t v3 = +[SKRunBlock runBlock:block queue:0];

  return (SKAction *)v3;
}

SKAction *__cdecl +[SKAction runBlock:queue:](id a1, SEL a2, dispatch_block_t block, dispatch_queue_t queue)
{
  uint64_t v4 = +[SKRunBlock runBlock:block queue:queue];

  return (SKAction *)v4;
}

void sub_20ADECA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADECB10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADECD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADECEA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADED048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADED6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_20ADEDB68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEDC6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEDE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADEDEFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEDFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEE130(_Unwind_Exception *a1)
{
  uint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20ADEE1EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADEE37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t std::deque<SKAction * {__strong}>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    uint64_t v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    uint64_t v6 = &v2[v5 >> 9];
    float32x4_t v7 = (void **)((char *)*v6 + 8 * (v5 & 0x1FF));
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (void **)v8)
    {
      do
      {
        long long v9 = *v7++;

        if ((char *)v7 - (unsigned char *)*v6 == 4096)
        {
          BOOL v10 = (void **)v6[1];
          ++v6;
          float32x4_t v7 = v10;
        }
      }
      while (v7 != (void **)v8);
      uint64_t v2 = (void **)a1[1];
      uint64_t v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 256;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_16;
    }
    uint64_t v13 = 512;
  }
  a1[4] = v13;
LABEL_16:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return std::__split_buffer<unsigned int *>::~__split_buffer((uint64_t)a1);
}

id std::deque<SKAction * {__strong}>::push_back(void *a1, id *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = ((v5 - v4) << 6) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<SKAction * {__strong}>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    uint64_t v8 = (void *)(*(void *)(v4 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF));
  }
  id result = *a2;
  void *v8 = result;
  ++a1[5];
  return result;
}

void std::deque<SKAction * {__strong}>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    long long v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)uint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      float32x2_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v5, v33);
      __n128 v35 = &v34[8 * (v33 >> 2)];
      long long v37 = &v34[8 * v36];
      long long v38 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        uint64_t v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        simd_float4x4 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)simd_float4x4 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    long long v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      long long v9 = (char *)a1[1];
    }
    uint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned int *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned int *>::push_front((uint64_t)a1, &v54);
    float32x4_t v44 = (void *)a1[1];
    uint64_t v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    long long v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float32x2_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(a1 + 3), v46);
      __n128 v35 = &v34[8 * (v46 >> 2)];
      long long v37 = &v34[8 * v47];
      long long v48 = (uint64_t *)a1[1];
      uint64_t v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        uint64_t v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int8x16_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int8x16_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      float32x4_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        uint64_t v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + SKCNode::setFlags(this, 66, 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + SKCNode::setFlags(this, 66, 1) = v54 + 8 * v26;
  int32x4_t v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned int *>::push_back(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<unsigned int *>::push_front((uint64_t)&v54, v27);
  }
  float32x4_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + SKCNode::setFlags(this, 66, 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + SKCNode::setFlags(this, 66, 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_20ADEE8F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<SKAction * {__strong}>::pop_back(void *a1)
{
  unint64_t v2 = a1[5] + a1[4] - 1;

  --a1[5];

  return std::deque<SKAction * {__strong}>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

uint64_t std::deque<SKAction * {__strong}>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_20ADEEB54(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C4074C3173BLL);

  _Unwind_Resume(a1);
}

void sub_20ADEEE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEEFE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEF1D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEF3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEF5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADEF748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCAnimate::~SKCAnimate(SKCAnimate *this)
{
  SKCAnimate::~SKCAnimate(this);

  JUMPOUT(0x21052EA30);
}

{
  void **v2;
  uint64_t v3;
  uint64_t i;
  void *v5;
  void **v6;

  *(void *)this = &unk_26BEECD98;
  uint64_t v2 = (void **)((char *)this + 112);
  uint64_t v3 = *((void *)this + 14);
  for (uint64_t i = *((void *)this + 15); i != v3; i -= 8)
  {
    unint64_t v5 = *(void **)(i - 8);
  }
  *((void *)this + 15) = v3;

  uint64_t v6 = v2;
  std::vector<UITouch * {__strong}>::__destroy_vector::operator()[abi:ne180100](&v6);
  SKCAction::~SKCAction((SKCAction *)this);
}

void SKCAnimate::cpp_updateWithTargetForTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_ratioForTime(this, a3);
  var0 = this[1].var0;
  unint64_t v8 = (uint64_t)(*(void *)&this[1].var1 - (void)var0) >> 3;
  unint64_t v9 = (int)(v6 * (double)v8);
  if (v8 <= v9)
  {
    uint64_t v10 = 0;
    if (!a2) {
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v10 = var0[v9];
    if (!a2) {
      goto LABEL_22;
    }
  }
  if (v11)
  {
    uint64_t v12 = (SKCNode *)v11;
    if (v8 <= v9)
    {
      if (LOBYTE(this[1].var7))
      {
        uint64_t v13 = *(SKTexture **)&this[1].var5;
        if (BYTE2(this[1].var7)) {
          SKCSpriteNode::setSecondaryTexture(v11, v13);
        }
        else {
          SKCSpriteNode::setPrimaryTexture(v11, v13);
        }
        if (BYTE1(this[1].var7))
        {
          v14.n128_u64[0] = *(void *)&this[1].var6;
          __n128 v19 = v14;
          SKCNode::setSize(v12, &v19);
        }
      }
      else
      {
        uint64_t v15 = *(void ***)&this[1].var1;
        if (v15 == this[1].var0) {
          std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v16 = *(v15 - 1);

        uint64_t v10 = v16;
      }
      v14.n128_f64[0] = a3;
      SKCAction::didFinishWithTargetAtTime(this, a2, v14);
    }
    if (v10)
    {
      if (BYTE2(this[1].var7)) {
        SKCSpriteNode::setSecondaryTexture((id *)v12, v10);
      }
      else {
        SKCSpriteNode::setPrimaryTexture((id *)v12, v10);
      }
      if (BYTE1(this[1].var7))
      {
        [(SKTexture *)v10 size];
        *(float *)&double v17 = v17;
        *(float *)&double v18 = v18;
        __n128 v19 = (__n128)__PAIR64__(LODWORD(v18), LODWORD(v17));
        SKCNode::setSize(v12, &v19);
      }
    }
  }
LABEL_22:
}

void sub_20ADEF994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 SKCAnimate::cpp_wasRemovedFromTargetAtTime(SKCAnimate *this, SKCNode *lpsrc, double a3)
{
  if (lpsrc)
  {
    if (v4)
    {
      if (*((unsigned char *)this + 160))
      {
        float v6 = (__n128 *)v4;
        int v7 = (SKTexture *)*((void *)this + 18);
        if (*((unsigned char *)this + 162)) {
          SKCSpriteNode::setSecondaryTexture(v4, v7);
        }
        else {
          SKCSpriteNode::setPrimaryTexture(v4, v7);
        }
        if (*((unsigned char *)this + 161))
        {
          __n128 result = v6[21];
          *((void *)this + 19) = result.n128_u64[0];
        }
      }
    }
  }
  return result;
}

__n128 SKCAnimate::cpp_willStartWithTargetAtTime(SKCAnimate *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  if (a2)
  {
    if (v6)
    {
      if (*((unsigned char *)this + 160))
      {
        int v7 = v6;
        uint64_t v8 = 76;
        if (!*((unsigned char *)this + 162)) {
          uint64_t v8 = 75;
        }
        objc_storeStrong((id *)this + 18, (id)v6->n128_u64[v8]);
        if (*((unsigned char *)this + 161))
        {
          __n128 result = v7[21];
          *((void *)this + 19) = result.n128_u64[0];
        }
      }
    }
  }
  return result;
}

void std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_263FE9C28, MEMORY[0x263F8C068]);
}

void sub_20ADEFBF4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  __n128 result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

void sub_20ADEFD38(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C40C35AEBB7);

  _Unwind_Resume(a1);
}

void sub_20ADEFE78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF032C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20ADF0488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF0710(_Unwind_Exception *a1)
{
  unint64_t v5 = v3;

  _Unwind_Resume(a1);
}

void SKCAnimateMesh::~SKCAnimateMesh(SKCAnimateMesh *this)
{
  SKCAnimateMesh::~SKCAnimateMesh(this);

  JUMPOUT(0x21052EA30);
}

{
  id var21;
  id var20;
  id var19;
  uint64_t vars8;

  this->var0 = (void **)&unk_26BEECE30;
  var21 = this->var21;
  this->var21 = 0;

  var20 = this->var20;
  this->var20 = 0;

  var19 = this->var19;
  this->var19 = 0;

  SKCAction::~SKCAction((SKCAction *)this);
}

void SKCAnimateMesh::cpp_updateWithTargetForTime(SKCAnimateMesh *this, id *a2, double a3)
{
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  float v7 = v6;
  id v10 = a2[1];
  if (v10 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    uint64_t v8 = SKCAnimateMesh::meshForRatio(this, v7);
    [v10 setWarpGeometry:v8];
  }
  SKCAction::ratioForTime((SKCAction *)this, a3);
  if ((COERCE_UNSIGNED_INT(v9 + -1.0) & 0x60000000) == 0) {
    (*((void (**)(SKCAnimateMesh *, id *, double))this->var0 + 13))(this, a2, a3);
  }
}

void sub_20ADF094C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKCAnimateMesh::cpp_wasRemovedFromTargetAtTime(SKCAnimateMesh *this, id *a2, double a3)
{
  SKCAction::cpp_wasRemovedFromTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
  id v5 = a2[1];
  if (v5 && (objc_opt_respondsToSelector() & 1) != 0 && this->var22) {
    [v5 setWarpGeometry:this->var21];
  }
}

void sub_20ADF09E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKCAnimateMesh::cpp_willStartWithTargetAtTime(SKCAnimateMesh *this, id *a2, double a3)
{
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
  id v5 = a2[1];
  float v6 = v5;
  if (v5)
  {
    id v10 = v5;
    char v7 = objc_opt_respondsToSelector();
    float v6 = v10;
    if (v7)
    {
      uint64_t v8 = [v10 warpGeometry];
      id var21 = this->var21;
      this->id var21 = v8;

      float v6 = v10;
    }
  }
}

void sub_20ADF0A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKCAnimateMesh::cpp_didFinishWithTargetAtTime(SKCAnimateMesh *this, id *a2, double a3)
{
  SKCAction::cpp_didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
  id v5 = a2[1];
  if (v5 && (objc_opt_respondsToSelector() & 1) != 0 && this->var22) {
    [v5 setWarpGeometry:this->var21];
  }
}

void sub_20ADF0B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id SKCAnimateMesh::meshForRatio(SKCAnimateMesh *this, float a2)
{
  uint64_t v4 = (void *)MEMORY[0x21052F180]();
  float v31 = 0.0;
  id v29 = 0;
  id v30 = 0;
  SKCAnimateMesh::choosewarpsForRatio((uint64_t)this, &v30, &v29, &v31, a2);
  id v5 = v30;
  id v6 = v29;
  uint64_t v7 = [v5 numberOfColumns];
  if (v7 == [v6 numberOfColumns]
    && (uint64_t v8 = [v5 numberOfRows], v8 == objc_msgSend(v6, "numberOfRows")))
  {
    float v9 = v31;
    int v10 = [v5 vertexCount];
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(v28, v10);
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(__p, v10);
    if (v10 >= 1)
    {
      uint64_t v12 = 0;
      *(float *)v11.i32 = 1.0 - v9;
      float32x2_t v13 = (float32x2_t)vdup_lane_s32(v11, 0);
      uint64_t v14 = 8 * v10;
      do
      {
        float32x2_t v15 = *(float32x2_t *)([v5 sourcePositions] + v12);
        uint64_t v16 = [v6 sourcePositions];
        *(float32x2_t *)((char *)v28[0] + v12) = vmla_f32(vmul_n_f32(*(float32x2_t *)(v16 + v12), v31), v13, v15);
        v12 += 8;
      }
      while (v14 != v12);
      uint64_t v17 = 0;
      do
      {
        float32x2_t v18 = *(float32x2_t *)([v5 destPositions] + v17);
        uint64_t v19 = [v6 destPositions];
        *(float32x2_t *)((char *)__p[0] + v17) = vmla_f32(vmul_n_f32(*(float32x2_t *)(v19 + v17), v31), v13, v18);
        v17 += 8;
      }
      while (v14 != v17);
    }
    int64_t v20 = [SKWarpGeometryGrid alloc];
    uint64_t v21 = [v5 numberOfColumns];
    uint64_t v22 = [v5 numberOfRows];
    uint64_t v23 = [(SKWarpGeometryGrid *)v20 initWithColumns:v21 rows:v22 sourcePositions:v28[0] destPositions:__p[0]];

    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v28[0])
    {
      v28[1] = v28[0];
      operator delete(v28[0]);
    }
    int v24 = 1;
    unint64_t v25 = (void *)v23;
  }
  else
  {

    unint64_t v25 = 0;
    int v24 = 0;
  }
  if (v24) {
    id v6 = v25;
  }

  return v6;
}

void sub_20ADF0DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void SKCAnimateMesh::choosewarpsForRatio(uint64_t a1, void *a2, void *a3, float *a4, float a5)
{
  float v10 = *(float *)(a1 + 56);
  id v11 = *(id *)(a1 + 128);
  uint64_t v12 = [*(id *)(a1 + 112) lastObject];
  float32x2_t v13 = [*(id *)(a1 + 120) lastObject];
  [v13 floatValue];
  float v15 = v14;

  int v16 = [*(id *)(a1 + 120) count];
  int v17 = v16;
  float v18 = v10 * a5;
  if (v16 < 1) {
    goto LABEL_9;
  }
  uint64_t v19 = 0;
  uint64_t v20 = v16;
  while (1)
  {
    uint64_t v21 = [*(id *)(a1 + 120) objectAtIndexedSubscript:v19];
    [v21 floatValue];
    float v23 = v22;

    if (v18 < v23) {
      break;
    }
    if (v20 == ++v19)
    {
      LODWORD(v19) = v17;
      break;
    }
  }
  if (v19)
  {
    int v24 = *(void **)(a1 + 120);
    if (v19 == v17)
    {
      unint64_t v25 = [v24 lastObject];
      [v25 floatValue];
      float v27 = v26;

      uint64_t v28 = [*(id *)(a1 + 112) lastObject];
      id v29 = v11;
      id v11 = (id)v28;
      goto LABEL_12;
    }
    unint64_t v33 = [v24 objectAtIndexedSubscript:(int)v19 - 1];
    [v33 floatValue];
    float v27 = v34;

    uint64_t v35 = [*(id *)(a1 + 112) objectAtIndexedSubscript:(int)v19 - 1];

    uint64_t v36 = [*(id *)(a1 + 120) objectAtIndexedSubscript:v19];
    [v36 floatValue];
    float v15 = v37;

    uint64_t v32 = [*(id *)(a1 + 112) objectAtIndexedSubscript:v19];
    id v29 = v12;
    id v11 = (id)v35;
  }
  else
  {
LABEL_9:
    id v30 = [*(id *)(a1 + 120) objectAtIndexedSubscript:0];
    [v30 floatValue];
    float v15 = v31;

    uint64_t v32 = [*(id *)(a1 + 112) objectAtIndexedSubscript:0];
    float v27 = 0.0;
    id v29 = v12;
  }
  uint64_t v12 = (void *)v32;
LABEL_12:

  id v40 = v11;
  *a2 = v40;
  id v38 = v12;
  *a3 = v38;
  float v39 = 1.0;
  if ((float)(v15 - v27) > 0.0) {
    float v39 = (float)(v18 - v27) / (float)(v15 - v27);
  }
  *a4 = v39;
}

void sub_20ADF1090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEEC2Em(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(a1, a2);
    uint64_t v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_20ADF1144(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *_ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_20ADF1278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF134C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF1424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADF1518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADF15A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF1608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF1670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF1738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF1874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF1C24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF1F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF20C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCAction::SKCAction(SKCAction *this)
{
  this->var0 = (void **)&unk_26BEECEC8;
  this->var1 = 0;
  *(id *)((char *)&this->var3 + 4) = 0;
  *(void *)&this->var2 = 0;
  *(id *)((char *)&this->var4 + SKCNode::setFlags(this, 66, 1) = 0;
  *(_OWORD *)&this->var6 = xmmword_20AE9B240;
  *(void *)&this->var8 = 0;
  this->var10 = -1.0;
  *(_WORD *)&this->var11 = 0;
  this->var13 = 0;
  this->var14 = 0;
  this->var15 = 0.0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)&this->var16 = _D0;
  this->var18 = 1.0;
}

void SKCAction::SKCAction(SKCAction *this, const SKCAction *a2)
{
  this->var0 = (void **)&unk_26BEECEC8;
  this->var1 = 0;
  this->var2 = 0.0;
  this->var3 = (id)MEMORY[0x21052F3F0](a2->var3);
  this->var4 = 0;
  this->var5 = 1;
  *(_OWORD *)&this->var6 = *(_OWORD *)&a2->var6;
  *(void *)&this->var8 = *(void *)&a2->var8;
  this->var10 = -1.0;
  *(_WORD *)&this->var11 = *(_WORD *)&a2->var11;
  this->var15 = 0.0;
  this->var13 = 0;
  this->var14 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)&this->var16 = _D0;
  this->var18 = 1.0;
}

void SKCAction::~SKCAction(SKCAction *this)
{
  this->var0 = (void **)&unk_26BEECEC8;
}

{
  this->var0 = (void **)&unk_26BEECEC8;
}

{
  uint64_t vars8;

  this->var0 = (void **)&unk_26BEECEC8;

  JUMPOUT(0x21052EA30);
}

void SKCAction::cpp_adjustedTime(SKCAction *this, double a2)
{
  float v2 = a2 - this->var6;
  float var2 = this->var2;
  if ((LODWORD(var2) & 0x60000000) != 0) {
    float v4 = this->var2;
  }
  else {
    float v4 = 0.000001;
  }
  if (((LODWORD(var2) | LODWORD(v2)) & 0x60000000) == 0) {
    float v2 = 0.000001;
  }
  float v5 = v2 / v4;
  int64_t var14 = this->var14;
  if (var14 == 1)
  {
    float v9 = fminf(fmaxf(v5, 0.0), 1.0);
    float v5 = v9 * (float)(v9 * (float)(2.0 - v9));
  }
  else if (var14 == 2)
  {
    float v10 = 1.0 - fminf(fmaxf(v5, 0.0), 1.0);
    float v5 = (float)((float)-(float)((float)(2.0 - v10) * v10) * v10) + 1.0;
  }
  else
  {
    float v7 = fminf(fmaxf(v5, 0.0), 1.0);
    float v8 = v7 * (float)(v7 * (float)((float)(v7 * -2.0) + 3.0));
    if (var14 == 3) {
      float v5 = v8;
    }
  }
  float v11 = fminf(fmaxf(v5, 0.0), 1.0);
  var3 = (float (**)(float))this->var3;
  if (var3) {
    fminf(fmaxf(var3[2](v11), 0.0), 1.0);
  }
}

void SKCAction::cpp_ratioForTime(SKCAction *this, double a2)
{
  float v2 = a2 - this->var6;
  float var2 = this->var2;
  float v4 = var2;
  if ((LODWORD(var2) & 0x60000000) == 0) {
    float var2 = 0.000001;
  }
  if (((LODWORD(v4) | LODWORD(v2)) & 0x60000000) == 0) {
    float v2 = 0.000001;
  }
  float v5 = v2 / var2;
  switch(this->var14)
  {
    case 1:
      float v8 = fminf(fmaxf(this->var15 + (float)(this->var18 * v5), 0.0), 1.0);
      float v9 = 2.0 - v8;
      goto LABEL_11;
    case 2:
      float var15 = 1.0;
      float v5 = 1.0 - fminf(fmaxf(this->var15 + (float)(this->var18 * v5), 0.0), 1.0);
      float var18 = -(float)((float)(2.0 - v5) * v5);
      goto LABEL_9;
    case 3:
      float v8 = fminf(fmaxf(this->var15 + (float)(this->var18 * v5), 0.0), 1.0);
      float v9 = (float)(v8 * -2.0) + 3.0;
LABEL_11:
      float v10 = v8 * (float)(v8 * v9);
      goto LABEL_12;
    default:
      float var15 = this->var15;
      float var18 = this->var18;
LABEL_9:
      float v10 = var15 + (float)(var18 * v5);
LABEL_12:
      float v11 = fminf(fmaxf(v10, 0.0), 1.0);
      var3 = (float (**)(float))this->var3;
      if (var3) {
        fminf(fmaxf(var3[2](v11), 0.0), 1.0);
      }
      return;
  }
}

uint64_t SKCAction::cpp_reverse(SKCAction *this)
{
  return 0;
}

uint64_t SKCAction::cpp_copy(SKCAction *this)
{
  return 0;
}

void SKCAction::cpp_updateWithTargetForTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_ratioForTime(this, a3);
  if ((COERCE_UNSIGNED_INT(v6.n128_f32[0] + -1.0) & 0x60000000) == 0)
  {
    v6.n128_f64[0] = a3;
    SKCAction::didFinishWithTargetAtTime(this, a2, v6);
  }
}

SKCAction *SKCAction::didFinishWithTargetAtTime(SKCAction *this, SKCNode *a2, __n128 a3)
{
  unint64_t v3 = a3.n128_u64[0];
  float v5 = this;
  if (!this->var11)
  {
    this->var11 = 1;
    this = (SKCAction *)this->var13;
    if (this) {
      this = (SKCAction *)((uint64_t (*)(void))this->var3)();
    }
  }
  if (v5->var5)
  {
    __n128 v6 = (uint64_t (*)(SKCAction *, SKCNode *, __n128))*((void *)v5->var0 + 13);
    a3.n128_u64[0] = v3;
    return (SKCAction *)v6(v5, a2, a3);
  }
  return this;
}

SKCAction *SKCAction::cpp_wasAddedToTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  unint64_t v3 = this;
  this->var11 = 0;
  this->float var18 = this->var17 * this->var16;
  float var8 = this->var8;
  float var9 = this->var9;
  if ((LODWORD(var9) & 0x60000000) != 0)
  {
    float v6 = var9 * 0.5;
    float v7 = var8 - v6;
    float v8 = v6 + var8;
    this = (SKCAction *)rand();
    float var8 = v7 + (float)((float)((float)(int)this * 4.6566e-10) * (float)(v8 - v7));
    if (var8 < 0.0) {
      float var8 = 0.0;
    }
  }
  v3->float var2 = var8;
  return this;
}

SKCAction *SKCAction::cpp_wasRemovedFromTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  *(_WORD *)&this->var11 = 1;
  return this;
}

SKCAction *SKCAction::cpp_willStartWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  this->var6 = a3;
  this->float var15 = 0.0;
  *(_WORD *)&this->var11 = 256;
  return this;
}

SKCAction *SKCAction::cpp_wasPausedWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  this->var7 = a3;
  return this;
}

double SKCAction::cpp_willResumeWithTargetAtTime(SKCAction *this, SKCNode *a2, double result)
{
  double var7 = this->var7;
  if (var7 > 0.0)
  {
    __n128 result = result - var7 + this->var6;
    this->var6 = result;
    this->double var7 = -1.0;
  }
  return result;
}

SKCAction *SKCAction::cpp_didFinishWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  *(_WORD *)&this->var11 = 1;
  return this;
}

uint64_t SKCAction::reverse(SKCAction *this)
{
  uint64_t v1 = [this->var4 reversedAction];
  uint64_t v2 = [v1 caction];

  return v2;
}

void sub_20ADF2840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKCAction::copy(SKCAction *this)
{
  uint64_t v1 = (void *)[this->var4 copy];
  uint64_t v2 = [v1 caction];

  return v2;
}

void sub_20ADF2888(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKCAction::updateWithTargetForTime(SKCAction *this, SKCNode *a2, double a3)
{
  if (this->var5) {
    return (*((uint64_t (**)(SKCAction *, SKCNode *, double))this->var0 + 7))(this, a2, a3);
  }
  else {
    return [this->var4 updateWithTarget:*((void *)a2 + 1) forTime:a3];
  }
}

uint64_t SKCAction::wasAddedToTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  this->var10 = -1.0;
  if (this->var5) {
    return (*((uint64_t (**)(SKCAction *, SKCNode *, double))this->var0 + 8))(this, a2, a3);
  }
  else {
    return [this->var4 wasAddedToTarget:*((void *)a2 + 1) atTime:a3];
  }
}

uint64_t SKCAction::wasRemovedFromTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  if (this->var5) {
    return (*((uint64_t (**)(SKCAction *, SKCNode *, double))this->var0 + 9))(this, a2, a3);
  }
  else {
    return [this->var4 wasRemovedFromTarget:*((void *)a2 + 1) atTime:a3];
  }
}

uint64_t SKCAction::willStartWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  this->var10 = -1.0;
  if (this->var5) {
    return (*((uint64_t (**)(SKCAction *, SKCNode *, double))this->var0 + 10))(this, a2, a3);
  }
  else {
    return [this->var4 willStartWithTarget:*((void *)a2 + 1) atTime:a3];
  }
}

uint64_t SKCAction::wasPausedWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  if (this->var5) {
    return (*((uint64_t (**)(SKCAction *, SKCNode *, double))this->var0 + 11))(this, a2, a3);
  }
  else {
    return [this->var4 wasPausedWithTarget:*((void *)a2 + 1) atTime:a3];
  }
}

uint64_t SKCAction::willResumeWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  if (this->var5) {
    return (*((uint64_t (**)(SKCAction *, SKCNode *, double))this->var0 + 12))(this, a2, a3);
  }
  else {
    return [this->var4 willResumeWithTarget:*((void *)a2 + 1) atTime:a3];
  }
}

float SKCAction::setSpeed(SKCAction *this, float a2)
{
  double v4 = skCurrentTime();
  double var6 = this->var6;
  double var7 = this->var7;
  if (var7 > var6)
  {
    this->double var6 = var6 + v4 - var7;
    this->double var7 = v4;
  }
  SKCAction::cpp_ratioForTime(this, v4);
  this->float var15 = v7;
  this->double var6 = v4;
  float result = this->var16 * a2;
  this->var17 = a2;
  this->float var18 = result;
  return result;
}

float SKCAction::setBaseSpeed(SKCAction *this, float a2)
{
  double v4 = skCurrentTime();
  double var6 = this->var6;
  double var7 = this->var7;
  if (var7 > var6)
  {
    this->double var6 = var6 + v4 - var7;
    this->double var7 = v4;
  }
  SKCAction::cpp_ratioForTime(this, v4);
  this->double var6 = v4;
  this->float var15 = v7;
  this->var16 = a2;
  float result = this->var17 * a2;
  this->float var18 = result;
  return result;
}

double SKCAction::finishTime(SKCAction *this)
{
  double result = this->var10;
  if (result < 0.0) {
    return this->var6 + (float)(this->var2 * (float)((float)(1.0 - this->var15) / this->var18));
  }
  return result;
}

void sub_20ADF2C00(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C4060FE593ELL);

  _Unwind_Resume(a1);
}

void sub_20ADF2E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF30A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF3178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF3214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCColorize::SKCColorize(SKCColorize *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v3 = &unk_26BEECF58;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(void *)(v3 + 56) = *(void *)&a2->var8;
  *(void *)(v3 + 88) = a2->var14;
  *(unsigned char *)(v3 + 32) = 1;
}

void SKCColorize::~SKCColorize(SKCColorize *this)
{
  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

void SKCColorize::cpp_updateWithTargetForTime(SKCColorize *this, float32x4_t *a2, double a3)
{
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  float v7 = v6.n128_f32[0];
  float v13 = v6.n128_f32[0];
  if (!BYTE4(this[1].var3))
  {
    float v8 = *(void (**)(float32x4_t *, float32x4_t *))(a2->i64[0] + 184);
    float32x4_t v12 = vmlaq_n_f32(vnegq_f32(*(float32x4_t *)&this->var21.var3), *(float32x4_t *)&this[1].var0, v6.n128_f32[0]);
    float32x4_t v14 = vaddq_f32(v12, a2[19]);
    v8(a2, &v14);
    float v7 = v13;
    __n128 v6 = (__n128)vaddq_f32(v12, *(float32x4_t *)&this->var21.var3);
    *(__n128 *)&this->var21.var3 = v6;
  }
  float v9 = *(float *)&this[1].var3;
  if ((LODWORD(v9) & 0x60000000) != 0)
  {
    float var2 = this->var23.var2;
    float v11 = -(float)(var2 - (float)(v7 * v9));
    v14.f32[0] = a2[20].f32[0] - (float)(var2 - (float)(v7 * v9));
    (*(void (**)(float32x4_t *, float32x4_t *))(a2->i64[0] + 192))(a2, &v14);
    float v7 = v13;
    this->var23.float var2 = v11 + this->var23.var2;
  }
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
  {
    v6.n128_f64[0] = a3;
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, v6);
  }
}

float32x4_t SKCColorize::cpp_willStartWithTargetAtTime(SKCColorize *this, float32x4_t *a2, double a3)
{
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
  this->var23.float var2 = 0.0;
  *(void *)&this->var21.var3 = 0;
  *(void *)&this->var23.var0 = 0;
  *(float *)&this[1].var3 = this->var20 - a2[20].f32[0];
  float32x4_t result = vsubq_f32((float32x4_t)this->var19, a2[19]);
  *(float32x4_t *)&this[1].var0 = result;
  return result;
}

void sub_20ADF368C(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C40AE107041);

  _Unwind_Resume(a1);
}

void sub_20ADF38C8(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20ADF3A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF3B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF3BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF3C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF3CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF3D2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCFade::~SKCFade(SKCFade *this)
{
  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

void SKCFade::cpp_updateWithTargetForTime(SKCFade *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  float v7 = v6;
  if (this->var22)
  {
    float v8 = v6 * this->var19;
    float v11 = v8 + (float)(*((float *)a2 + 81) - this->var21);
    SKCNode::setAlpha(a2, &v11);
    this->id var21 = v8;
  }
  else
  {
    float v10 = (float)(v6 * this->var19) + (float)(this->var21 * (float)(1.0 - v6));
    SKCNode::setAlpha(a2, &v10);
  }
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
  {
    v9.n128_f64[0] = a3;
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, v9);
  }
}

SKCAction *SKCFade::cpp_willStartWithTargetAtTime(SKCFade *this, SKCNode *a2, double a3)
{
  float32x4_t result = SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  float v6 = 0.0;
  if (!this->var22) {
    float v6 = *((float *)a2 + 81);
  }
  this->id var21 = v6;
  return result;
}

void sub_20ADF400C(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x10A1C40D98AE659);

  _Unwind_Resume(a1);
}

void sub_20ADF42BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *SKCGroup::addCAction(void *this, SKCAction *a2)
{
  if (a2)
  {
    uint64_t v3 = this;
    ++a2->var1;
    this = operator new(0x18uLL);
    uint64_t v4 = v3[14];
    v3 += 14;
    this[1] = v3;
    this[2] = a2;
    *this = v4;
    *(void *)(v4 + 8) = this;
    *uint64_t v3 = this;
    ++v3[2];
  }
  return this;
}

void sub_20ADF43FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF46C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF47C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF4950(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF4AB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCGroup::~SKCGroup(SKCAction *this)
{
  SKCGroup::~SKCGroup(this);

  JUMPOUT(0x21052EA30);
}

{
  SKCAction *v2;
  SKCAction *i;
  _DWORD *var3;
  int v5;
  BOOL v6;
  uint64_t vars8;

  this->var0 = (void **)&unk_26BEED088;
  uint64_t v2 = this + 1;
  for (uint64_t i = *(SKCAction **)&this[1].var1; i != v2; uint64_t i = *(SKCAction **)&i->var1)
  {
    var3 = i->var3;
    float v5 = var3[2] - 1;
    var3[2] = v5;
    if (var3) {
      float v6 = v5 == 0;
    }
    else {
      float v6 = 0;
    }
    if (v6) {
      (*(void (**)(_DWORD *))(*(void *)var3 + 8))(var3);
    }
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(v2);
  std::__list_imp<SKCRenderSortInfo *>::clear(v2);

  SKCAction::~SKCAction(this);
}

void SKCGroup::setBaseSpeed(SKCAction *this, float a2)
{
  SKCAction::setBaseSpeed(this, a2);
  uint64_t v3 = *(void *)&this[1].var1;
  if ((SKCAction *)v3 != &this[1])
  {
    float v4 = this->var16 * this->var17;
    do
    {
      (*(void (**)(void, float))(**(void **)(v3 + 16) + 40))(*(void *)(v3 + 16), v4);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while ((SKCAction *)v3 != &this[1]);
  }
}

void SKCGroup::setSpeed(SKCAction *this, float a2)
{
  SKCAction::setSpeed(this, a2);
  uint64_t v3 = *(void *)&this[1].var1;
  if ((SKCAction *)v3 != &this[1])
  {
    float v4 = this->var16 * this->var17;
    do
    {
      (*(void (**)(void, float))(**(void **)(v3 + 16) + 40))(*(void *)(v3 + 16), v4);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while ((SKCAction *)v3 != &this[1]);
  }
}

uint64_t SKCGroup::cpp_updateWithTargetForTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_adjustedTime(this, a3);
  double v6 = v5.n128_f64[0];
  float v7 = *(SKCAction **)&this[1].var1;
  if (v7 == &this[1]) {
    goto LABEL_13;
  }
  int v8 = 1;
  do
  {
    var3 = (SKCAction *)v7->var3;
    if (var3->var5)
    {
      if (var3->var11) {
        goto LABEL_6;
      }
LABEL_5:
      SKCAction::updateWithTargetForTime(var3, a2, v6);
      goto LABEL_6;
    }
    if (([var3->var4 finished] & 1) == 0) {
      goto LABEL_5;
    }
LABEL_6:
    if (var3->var5) {
      uint64_t result = var3->var11;
    }
    else {
      uint64_t result = [var3->var4 finished];
    }
    v8 &= result;
    float v7 = *(SKCAction **)&v7->var1;
  }
  while (v7 != &this[1]);
  if (v8)
  {
LABEL_13:
    v5.n128_f64[0] = v6;
    return (uint64_t)SKCAction::didFinishWithTargetAtTime(this, a2, v5);
  }
  return result;
}

SKCAction *SKCGroup::cpp_wasAddedToTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  uint64_t result = SKCAction::cpp_wasAddedToTargetAtTime(this, a2, a3);
  float v7 = (char *)&this[1];
  for (uint64_t i = *(void *)&this[1].var1; (char *)i != v7; uint64_t i = *(void *)(i + 8))
    uint64_t result = (SKCAction *)SKCAction::wasAddedToTargetAtTime(*(SKCAction **)(i + 16), a2, a3);
  return result;
}

void SKCGroup::cpp_wasRemovedFromTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_wasRemovedFromTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(this, a3);
  float v7 = (char *)&this[1];
  uint64_t v8 = *(void *)&this[1].var1;
  if ((char *)v8 != v7)
  {
    double v9 = v6;
    do
    {
      SKCAction::wasRemovedFromTargetAtTime(*(SKCAction **)(v8 + 16), a2, v9);
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while ((char *)v8 != v7);
  }
}

void SKCGroup::cpp_willStartWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_willStartWithTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(this, a3);
  float v7 = (char *)&this[1];
  uint64_t v8 = *(void *)&this[1].var1;
  if ((char *)v8 != v7)
  {
    double v9 = v6;
    do
    {
      SKCAction::willStartWithTargetAtTime(*(SKCAction **)(v8 + 16), a2, v9);
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while ((char *)v8 != v7);
  }
}

void SKCGroup::cpp_wasPausedWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_wasPausedWithTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(this, a3);
  float v7 = (char *)&this[1];
  uint64_t v8 = *(void *)&this[1].var1;
  if ((char *)v8 != v7)
  {
    double v9 = v6;
    do
    {
      SKCAction::wasPausedWithTargetAtTime(*(SKCAction **)(v8 + 16), a2, v9);
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while ((char *)v8 != v7);
  }
}

void SKCGroup::cpp_willResumeWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_willResumeWithTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(this, a3);
  float v7 = (char *)&this[1];
  uint64_t v8 = *(void *)&this[1].var1;
  if ((char *)v8 != v7)
  {
    double v9 = v6;
    do
    {
      SKCAction::willResumeWithTargetAtTime(*(SKCAction **)(v8 + 16), a2, v9);
      uint64_t v8 = *(void *)(v8 + 8);
    }
    while ((char *)v8 != v7);
  }
}

void sub_20ADF5138(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C40007774FCLL);
  _Unwind_Resume(a1);
}

void sub_20ADF51F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF5298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF5380(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20ADF5444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF56C8(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20ADF5838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADF5A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF5D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  float32x4_t v12 = v11;

  _Unwind_Resume(a1);
}

void sub_20ADF5DF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF609C(_Unwind_Exception *a1)
{
  double v6 = v4;

  _Unwind_Resume(a1);
}

__n128 createV3fFromData(NSData *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = v1;
  long long v11 = 0u;
  if (v1)
  {
    uint64_t v3 = v1;
    uint64_t v4 = [(NSData *)v3 bytes];
    unint64_t v5 = [(NSData *)v3 length] >> 2;
    if (v5)
    {
      if ((int)v5 < 1)
      {
        long long v9 = 0uLL;
      }
      else
      {
        uint64_t v6 = 0;
        if ((int)v5 >= 3) {
          unint64_t v5 = 3;
        }
        else {
          unint64_t v5 = v5;
        }
        long long v7 = 0uLL;
        do
        {
          unsigned int v8 = bswap32(*(_DWORD *)(v4 + 4 * v6));
          long long v12 = v7;
          *(_DWORD *)((unint64_t)&v12 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3))) = v8;
          long long v9 = v12;
          HIDWORD(v9) = HIDWORD(v7);
          ++v6;
          long long v7 = v9;
        }
        while (v5 != v6);
      }
      long long v11 = v9;
    }
  }

  return (__n128)v11;
}

void sub_20ADF61B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF647C(_Unwind_Exception *a1)
{
  long long v7 = v4;

  _Unwind_Resume(a1);
}

void sub_20ADF66F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF6828(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF69C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADF6C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20ADF6E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF6E64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF6ED0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF6F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF6FC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF70C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF7224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF72C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF73F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF7494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF75CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF7668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF77A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF783C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF7978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF7A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF7AEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADF7B84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADF7C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF7D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF7E64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADF7FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF8084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF81BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF8258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF8390(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF842C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF8564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF8600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF8738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF87D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF891C(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C40F5A01273);

  _Unwind_Resume(a1);
}

void sub_20ADF8CE8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20ADF8FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF90DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF9188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF921C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF92B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF9348(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF93E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCMove::SKCMove(SKCMove *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v3 = &unk_26BEED130;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(void *)(v3 + 56) = *(void *)&a2->var8;
  *(void *)(v3 + 88) = a2->var14;
  *(unsigned char *)(v3 + 32) = 1;
}

void SKCMove::~SKCMove(SKCMove *this)
{
  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

void SKCMove::cpp_updateWithTargetForTime(SKCMove *this, __n128 *a2, double a3)
{
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  float v7 = v6;
  __n128 Translation = SKCNode::getTranslation(a2);
  __n128 v8 = SKCNode::getTranslation(a2);
  float v9 = v8.n128_f32[1];
  if (this->var24)
  {
    float v10 = v7 - this->var19;
    if (this->var25)
    {
      float v11 = v10 * this->var21.var0;
      __n128 v12 = Translation;
      v12.n128_f32[0] = Translation.n128_f32[0] + v11;
      this->var20.var0 = this->var20.var0 - v11;
    }
    else
    {
      __n128 v12 = Translation;
    }
    if (this->var26)
    {
      float v13 = v10 * this->var21.var1;
      float v9 = v9 + v13;
      this->var20.var1 = this->var20.var1 - v13;
    }
  }
  else
  {
    if (this->var23) {
      goto LABEL_13;
    }
    __n128 v12 = Translation;
    if (this->var25) {
      v12.n128_f32[0] = (float)(v7 * this->var21.var0) + (float)(this->var20.var0 * (float)(1.0 - v7));
    }
    if (this->var26) {
      float v9 = (float)(v7 * this->var21.var1) + (float)(this->var20.var1 * (float)(1.0 - v7));
    }
  }
  __n128 Translation = v12;
  SKCNode::setTranslation((SKCNode *)a2, v12, v9);
LABEL_13:
  this->var19 = v7;
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
  {
    if (this->var24)
    {
      v8.n128_f32[0] = Translation.n128_f32[0] + this->var20.var0;
      SKCNode::setTranslation((SKCNode *)a2, v8, v9 + this->var20.var1);
      this->var20.var0 = 0.0;
      this->var20.var1 = 0.0;
    }
    else if (!this->var23)
    {
      SKCNode::getTranslation(a2);
      SKCNode::getTranslation(a2);
      SKCNode::setTranslation((SKCNode *)a2, Translation, v9);
    }
    v8.n128_f64[0] = a3;
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, v8);
  }
}

void SKCMove::cpp_willStartWithTargetAtTime(SKCMove *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  this->var19 = 0.0;
  if (a2
  {
    NSLog(&cfstr_SksceneAnimati.isa);
  }
  if (this->var24)
  {
    this->var20 = this->var21;
  }
  else
  {
    unsigned __int32 v5 = SKCNode::getTranslation((__n128 *)a2).n128_u32[0];
    this->var20 = ($94F468A8D4C62B317260615823C2B210)__PAIR64__(SKCNode::getTranslation((__n128 *)a2).n128_u32[1], v5);
  }
}

void SKCAudioNode::SKCAudioNode(SKCAudioNode *this)
{
  SKCNode::SKCNode(this);
  *(void *)uint64_t v1 = &unk_26BEED1D8;
  *(_OWORD *)(v1 + 560) = 0u;
  *(_OWORD *)(v1 + 576) = 0u;
  *(_WORD *)(v1 + 592) = 257;
}

void SKCAudioNode::update(id *this, double a2, float a3)
{
  SKCNode::update((SKCNode *)this, a2, 1.0);
  if (*((unsigned char *)this + 593))
  {
    if (this[73])
    {
      long long v5 = 0uLL;
      SKCNode::resolveWorldPositionRotationAndScale(this, &v5, 0, 0);
      LODWORD(v4) = DWORD1(v5);
      objc_msgSend(this[73], "setPosition:", *(double *)&v5, v4, 0.0);
    }
  }
}

BOOL SKCAudioNode::getNeedsUpdate(SKCAudioNode *this)
{
  if (SKCNode::getNeedsUpdate(this)) {
    return 1;
  }
  if (*((unsigned char *)this + 172)) {
    return 0;
  }
  return (*((unsigned char *)this + 171) & 0x60) != 0;
}

void SKCAudioNode::setPaused(id *this, char a2)
{
  SKCNode::setPaused((SKCNode *)this, a2);
  if (*((unsigned char *)this + 592))
  {
    id v3 = this[73];
    if (v3)
    {
      double v4 = [v3 engine];
      int v5 = [v4 isRunning];

      if (v5) {
        [this[73] play];
      }
    }
  }
}

void sub_20ADF99C4(void *a1, int a2)
{
  id v5 = objc_begin_catch(a1);
  if (a2 == 2)
  {
    float v6 = [v5 reason];
    NSLog(&stru_26BEEFD70.isa, v6);
  }
  objc_end_catch();
}

void sub_20ADF9A30(_Unwind_Exception *a1)
{
  objc_end_catch();
  _Unwind_Resume(a1);
}

void SKCAudioNode::~SKCAudioNode(id *this)
{
  SKCNode::~SKCNode(this);
}

{
  uint64_t vars8;

  SKCAudioNode::~SKCAudioNode(this);

  JUMPOUT(0x21052EA30);
}

void sub_20ADF9BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20ADF9D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
}

void sub_20ADF9E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20ADF9E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCTileMapNode::SKCTileMapNode(SKCTileMapNode *this)
{
  SKCNode::SKCNode(this);
  *(void *)uint64_t v1 = &unk_26BEED2D8;
  *(_DWORD *)(v1 + 560) = 0;
  *(unsigned char *)(v1 + 564) = 1;
  *(_OWORD *)(v1 + 568) = 0u;
  *(_OWORD *)(v1 + 584) = 0u;
  *(void *)(v1 + 600) = 1065353216;
  *(_DWORD *)(v1 + 608) = 0;
  *(_WORD *)(v1 + 612) = 8224;
  *(_OWORD *)(v1 + 616) = xmmword_20AE9B2F0;
  *(void *)(v1 + 632) = -1;
  *(void *)(v1 + 656) = 0;
  *(void *)(v1 + 648) = 0;
  *(void *)(v1 + 640) = v1 + 648;
}

void SKCTileMapNode::~SKCTileMapNode(SKCTileMapNode *this)
{
  *(void *)this = &unk_26BEED2D8;
  uint64_t v2 = (char *)this + 640;
  id v3 = (void *)*((void *)this + 80);
  double v4 = (_OWORD *)((char *)this + 648);
  if (v3 != (void *)((char *)this + 648))
  {
    do
    {
      free(*(void **)(v3[5] + 192));
      id v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          float v6 = v5;
          id v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          float v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          id v3 = v6;
        }
        while (!v7);
      }
      id v3 = v6;
    }
    while (v6 != (void *)v4);
  }
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)v2, *((void **)this + 81));
  *((void *)this + 80) = v4;
  *double v4 = 0u;
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)v2, 0);

  SKCNode::~SKCNode((id *)this);
}

{
  uint64_t vars8;

  SKCTileMapNode::~SKCTileMapNode(this);

  JUMPOUT(0x21052EA30);
}

double SKCTileMapNode::getBatchInfo@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(void *)&double result = 0x300000000;
  *(void *)(a1 + 4) = 0x300000000;
  *(unsigned char *)a1 = 1;
  return result;
}

BOOL SKCTileMapNode::getNeedsCustomRenderOps(uint64_t a1)
{
  return *(_DWORD *)(a1 + 616) != 0;
}

uint64_t SKCTileMapNode::getMaxBatchRenderElementCount()
{
  return 0;
}

double SKCTileMapNode::getBoundingBox(float32x4_t *this)
{
  (*(void (**)(float32x4_t *))(this->i64[0] + 104))(this);
  uint64_t v6 = 0;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  float32x4_t v8 = this[21];
  v7.i64[0] = vmulq_f32(vsubq_f32(v7, this[22]), v8).u64[0];
  long long v9 = xmmword_20AE9B480;
  v7.i64[1] = *((void *)&SKCBoundingBoxEmpty + 1);
  *(float *)&long long v9 = 0.5 * v8.f32[0];
  float v10 = vmuls_lane_f32(0.5, *(float32x2_t *)v8.f32, 1);
  long long v11 = xmmword_20AE9B490;
  *((float *)&v11 + SKCNode::setFlags(this, 66, 1) = v10;
  v13[0] = v7;
  v13[1] = v9;
  v13[2] = v11;
  v13[3] = xmmword_20AE9B4A0;
  do
  {
    *(long long *)((char *)&v14 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2, COERCE_FLOAT(v13[v6])), v3, *(float32x2_t *)&v13[v6], 1), v4, (float32x4_t)v13[v6], 2), v5, (float32x4_t)v13[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  return *(double *)&v14;
}

void SKCTileMapNode::update(id *this, double a2, float a3)
{
  SKCNode::update((SKCNode *)this, a2, a3);
  if (!*((unsigned char *)this + 172))
  {
    float v6 = *((float *)this + 42);
    id v7 = this[1];
    float32x4_t v8 = [v7 tileSet];

    if (v8)
    {
      float v9 = *((float *)this + 81);
      float v10 = *((float *)this + 150);
      if (v9 != v10) {
        *((float *)this + 150) = v9;
      }
      long long v11 = (SKCTileMapNode *)this[80];
      if (v11 != (SKCTileMapNode *)(this + 81))
      {
        float v12 = v6 * a3;
        while (1)
        {
          uint64_t v13 = *((void *)v11 + 5);
          if ((*(unsigned char *)(v13 + 4) & 4) != 0 && *(_DWORD *)(v13 + 8))
          {
            if (v9 != v10) {
              *(unsigned char *)(v13 + 4) |= 1u;
            }
            long long v14 = *(uint64_t ***)(v13 + 168);
            if (v14) {
              break;
            }
          }
LABEL_31:
          id v38 = (SKCTileMapNode *)*((void *)v11 + 1);
          if (v38)
          {
            do
            {
              float v39 = v38;
              id v38 = *(SKCTileMapNode **)v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              float v39 = (SKCTileMapNode *)*((void *)v11 + 2);
              BOOL v40 = *(void *)v39 == (void)v11;
              long long v11 = v39;
            }
            while (!v40);
          }
          long long v11 = v39;
          if (v39 == (SKCTileMapNode *)(this + 81)) {
            goto LABEL_37;
          }
        }
        while (1)
        {
          unint64_t v15 = *((unsigned __int16 *)v14 + 8);
          int v16 = [v7 tileSet];
          int v17 = [v16 tileDefinitions];
          unint64_t v18 = [v17 count];

          if (v18 > v15) {
            break;
          }
LABEL_30:
          long long v14 = (uint64_t **)*v14;
          if (!v14) {
            goto LABEL_31;
          }
        }
        uint64_t v19 = [v7 tileSet];
        uint64_t v20 = [v19 tileDefinitions];
        uint64_t v21 = [v20 objectAtIndexedSubscript:v15];

        [v21 lastTargetTime];
        if (a2 - v22 < 0.00000011920929)
        {
          if ([v21 frameDidChange])
          {
            SKCNode::setDirty((SKCNode *)this);
            *(unsigned char *)(v13 + 4) |= 2u;
            if ([v21 nextFrameAffectsVertexBuffer]) {
              *(unsigned char *)(v13 + 4) |= 1u;
            }
          }
          goto LABEL_29;
        }
        [v21 setFrameDidChange:0];
        float v23 = [v21 textures];
        unsigned __int16 v24 = [v23 count];

        [v21 lastTargetTime];
        double v26 = v25;
        [v21 setLastTargetTime:a2];
        [v21 currentFrameTime];
        float v27 = a2 - v26;
        *(float *)&double v29 = v28 + (float)(v27 * v12);
        [v21 setCurrentFrameTime:v29];
        [v21 currentFrameTime];
        LODWORD(v26) = v30;
        [v21 timePerFrame];
        if (v31 >= *(float *)&v26)
        {
LABEL_29:

          goto LABEL_30;
        }
        [v21 setCurrentFrameTime:0.0];
        unsigned int v32 = [v21 currentFrameIndex];
        objc_msgSend(v21, "setCurrentFrameIndex:", (objc_msgSend(v21, "currentFrameIndex") + 1) % v24);
        [v21 setFrameDidChange:1];
        SKCNode::setDirty((SKCNode *)this);
        *(unsigned char *)(v13 + 4) |= 2u;
        [v21 setNextFrameAffectsVertexBuffer:0];
        unint64_t v33 = [v21 textures];
        float v34 = [v33 objectAtIndexedSubscript:v32];

        uint64_t v35 = [v21 textures];
        uint64_t v36 = objc_msgSend(v35, "objectAtIndexedSubscript:", objc_msgSend(v21, "currentFrameIndex"));

        if (v34)
        {
          [v34 _backingTexture];
          if (v36) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v43 = 0;
          float32x4_t v44 = 0;
          if (v36)
          {
LABEL_20:
            [v36 _backingTexture];
            BOOL v37 = v43 == v41;
            if (v42) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v42);
            }
            goto LABEL_24;
          }
        }
        BOOL v37 = v43 == 0;
LABEL_24:
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        if (!v37)
        {
          [v21 setNextFrameAffectsVertexBuffer:1];
          *(unsigned char *)(v13 + 4) |= 1u;
        }

        goto LABEL_29;
      }
    }
LABEL_37:
  }
}

void sub_20ADFA5D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SKCTileMapNode::getNeedsUpdate(SKCTileMapNode *this)
{
  return SKCNode::getNeedsUpdate(this) || *((_DWORD *)this + 155) != 0;
}

uint64_t SKCTileMapNode::addBatchRenderElements()
{
  return 0;
}

uint64_t SKCTileMapNode::canAppendToCurrentBatch()
{
  return 0;
}

void SKCTileMapNode::addRenderOps(uint64_t a1, SKCRenderInfo *a2, uint64_t a3)
{
  float32x4_t v3 = (uint64_t *)a2;
  int RenderData = SKCTileMapNode::_generateRenderData((id *)a1, a2);
  if (!RenderData) {
    return;
  }
  uint64_t v6 = (6 * RenderData) | 1u;
  uint64_t v7 = v3[52];
  if (!v7 || *(_DWORD *)(v7 + 48) < v6)
  {
    SKCRenderer::getBackingContext(v3[13], &__p);
    uint64_t v8 = (*(uint64_t (**)(std::string::size_type, uint64_t, uint64_t, uint64_t, void))(*(void *)__p.__r_.__value_.__l.__data_
                                                                                              + 8))(__p.__r_.__value_.__r.__words[0], 4, 1, v6, 0);
    std::shared_ptr<jet_buffer>::shared_ptr[abi:ne180100]<jet_buffer,void>(&v78, v8);
  }
  float v9 = (const float *)(v3 + 4);
  float32x4x4_t v79 = vld4q_f32(v9);
  float32x4x4_t v72 = v79;
  float32x4_t v70 = v3;
  if (*(void *)(a1 + 568))
  {
    {
      SKCTileMapNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime = skCurrentTime();
    }
    float v10 = skCurrentTime()
        - *(double *)&SKCTileMapNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime;
    float v11 = fmodf(v10, 43200.0);
    float v12 = *(void **)(a1 + 568);
    if (v12)
    {
      [v12 _backingProgramWithTransform];
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        uint64_t v13 = *(void **)(a1 + 568);
        if (v13)
        {
          [v13 _backingProgramWithTransform];
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
          std::string::size_type v14 = __p.__r_.__value_.__r.__words[0];
        }
        else
        {
          std::string::size_type size = 0;
          std::string::size_type v14 = 0;
        }
LABEL_21:
        int v17 = 0;
        goto LABEL_22;
      }
    }
  }
  else
  {
    float v11 = 0.0;
  }
  unsigned int v16 = *(_DWORD *)(a1 + 560);
  if (v16 && SKCRenderer::requireLighting((SKCRenderer *)v3[13], v16))
  {
    std::string::size_type v14 = v3[29];
    std::string::size_type size = v3[30];
    int v17 = 1;
    if (size) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
    }
    goto LABEL_22;
  }
  std::string::size_type v14 = v3[25];
  std::string::size_type size = v3[26];
  if (!size) {
    goto LABEL_21;
  }
  int v17 = 0;
  atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
LABEL_22:
  unint64_t v18 = *(uint64_t **)a3;
  int BackingBlendMode = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
  LODWORD(__p.__r_.__value_.__l.__data_) = 31;
  unint64_t v20 = v18[2];
  if (v20 >= v18[3])
  {
    uint64_t v21 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v18 + 1, (int *)&__p);
  }
  else
  {
    *(void *)unint64_t v20 = &unk_26BEEC420;
    *(_DWORD *)(v20 + 8) = 31;
    *(void *)(v20 + 24) = 0;
    *(void *)(v20 + 32) = 0;
    *(void *)(v20 + 16) = 0;
    *(void *)(v20 + 64) = 0;
    uint64_t v21 = v20 + 192;
    *(void *)(v20 + 96) = 0;
  }
  v18[2] = v21;
  *(void *)(v21 - 80) = v14;
  *(_DWORD *)(v21 - 64) = BackingBlendMode;
  *(_OWORD *)(v21 - 60) = xmmword_20AE9B300;
  *(_DWORD *)(v21 - 44) = 3;
  if (v17)
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    SKCNode::resolveWorldPositionRotationAndScale((_OWORD *)a1, 0, &__p, 0);
    float v22 = *(float *)&__p.__r_.__value_.__r.__words[1];
    uint64_t v23 = v3[13];
    unsigned int v24 = *(_DWORD *)(a1 + 560);
    double v25 = *(std::__shared_weak_count **)(a3 + 8);
    unint64_t v76 = *(uint64_t **)a3;
    unint64_t v77 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SKCRenderer::setLightingUniforms(v23, v24, &v76, v22);
    if (v77) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v77);
    }
  }
  if (*(void *)(a1 + 568))
  {
    double v26 = *(uint64_t **)a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_time");
    jet_command_buffer::set_fragment_constant_value(v26, &__p, v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  float v27 = *(uint64_t **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "u_color");
  jet_command_buffer::set_vertex_constant_value(v27, &__p, *(__n128 *)(a1 + 576));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  float v28 = *(uint64_t **)a3;
  std::string::basic_string[abi:ne180100]<0>(&__p, "u_transform");
  jet_command_buffer::set_vertex_constant_value(v28, &__p, (__n128)v72.val[0], (__n128)v72.val[1], (__n128)v72.val[2], (__n128)v72.val[3]);
  float32x4_t v71 = (long long *)(v3 + 52);
  uint64_t v60 = (std::__shared_weak_count *)size;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  double v29 = *(void **)(a1 + 640);
  int8x16_t v61 = (void *)(a1 + 648);
  if (v29 != (void *)(a1 + 648))
  {
    int32x4_t v63 = v3 + 58;
    float32x4_t v64 = v3 + 60;
    int8x16_t v62 = v3 + 84;
    while (1)
    {
      uint64_t v73 = v29[5];
      if ((*(unsigned char *)(v73 + 4) & 4) != 0)
      {
        if (*(_DWORD *)(v73 + 8))
        {
          int v30 = *(uint64_t ***)(v73 + 128);
          if (v30) {
            break;
          }
        }
      }
LABEL_82:
      float32x4_t v57 = (void *)v29[1];
      if (v57)
      {
        do
        {
          uint64_t v58 = v57;
          float32x4_t v57 = (void *)*v57;
        }
        while (v57);
      }
      else
      {
        do
        {
          uint64_t v58 = (void *)v29[2];
          BOOL v59 = *v58 == (void)v29;
          double v29 = v58;
        }
        while (!v59);
      }
      double v29 = v58;
      if (v58 == v61) {
        goto LABEL_88;
      }
    }
    while (1)
    {
      double v31 = v30[3];
      unsigned int v32 = v30[4];
      unint64_t v33 = v30[5];
      float v34 = v31;
      uint64_t v35 = v32;
      if (HIDWORD(v33)) {
        break;
      }
LABEL_72:

      int v30 = (uint64_t **)*v30;
      if (!v30) {
        goto LABEL_82;
      }
    }
    if (v34)
    {
      [v34 _backingTexture];
      float32x4_t v69 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      uint64_t v36 = __p.__r_.__value_.__r.__words[0];
      uint64_t v37 = [v34 filteringMode];
      id v38 = v64;
      if (v37 != 1) {
        id v38 = v63;
      }
      uint64_t v40 = *v38;
      float v39 = (std::__shared_weak_count *)v38[1];
      uint64_t v66 = v40;
      if (v39) {
        goto LABEL_47;
      }
    }
    else
    {
      uint64_t v36 = v3[54];
      long long v54 = (std::__shared_weak_count *)v3[55];
      if (v54) {
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float32x4_t v69 = v54;
      uint64_t v66 = v3[58];
      float v39 = (std::__shared_weak_count *)v3[59];
      if (v39)
      {
LABEL_47:
        unint64_t v68 = v39;
        atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
        if (v35) {
          goto LABEL_48;
        }
        goto LABEL_78;
      }
    }
    unint64_t v68 = 0;
    if (v35)
    {
LABEL_48:
      objc_msgSend(v35, "_backingTexture", v60);
      __float2 v67 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
      uint64_t v41 = __p.__r_.__value_.__r.__words[0];
      uint64_t v42 = [v35 filteringMode];
      uint64_t v43 = v64;
      if (v42 != 1) {
        uint64_t v43 = v63;
      }
      float32x4_t v44 = (std::__shared_weak_count *)v43[1];
      uint64_t v65 = *v43;
      if (!v44) {
        goto LABEL_52;
      }
      goto LABEL_51;
    }
LABEL_78:
    uint64_t v41 = v3[56];
    long long v55 = (std::__shared_weak_count *)v3[57];
    if (v55) {
      atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    __float2 v67 = v55;
    uint64_t v56 = v3[58];
    float32x4_t v44 = (std::__shared_weak_count *)v3[59];
    uint64_t v65 = v56;
    if (!v44) {
      goto LABEL_52;
    }
LABEL_51:
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_52:
    std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100](v62, v71);
    uint64_t v45 = *(uint64_t **)a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
    jet_command_buffer::set_fragment_texture(v45, &__p, v36);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unint64_t v46 = *(uint64_t **)a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
    jet_command_buffer::set_fragment_sampler(v46, &__p, v66);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v47 = *(uint64_t **)a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
    uint64_t current_buffer = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(v73 + 80));
    jet_command_buffer::set_vertex_buffer(v47, &__p, current_buffer);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v49 = *(uint64_t **)a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_tex_coord");
    uint64_t v50 = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(v73 + 96));
    jet_command_buffer::set_vertex_buffer(v49, &__p, v50);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int8x16_t v51 = *(uint64_t **)a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture2");
    jet_command_buffer::set_fragment_texture(v51, &__p, v41);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v52 = *(uint64_t **)a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture2");
    jet_command_buffer::set_fragment_sampler(v52, &__p, v65);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    jet_command_buffer::draw_indexed(*(uint64_t **)a3, 3, *(void *)v71, 6 * v33, 6 * HIDWORD(v33));
    uint64_t v53 = v70[83];
    ++*(_DWORD *)(v53 + 164);
    *(_DWORD *)(v53 + 148) += 6 * HIDWORD(v33) / 6u;
    if (v44) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
    if (v67) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v67);
    }
    float32x4_t v3 = v70;
    if (v68) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v68);
    }
    if (v69) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v69);
    }
    goto LABEL_72;
  }
LABEL_88:
  if (v60) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  }
}

void sub_20ADFAE98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
}

uint64_t SKCTileMapNode::_generateRenderData(id *this, SKCRenderInfo *a2)
{
  float32x4_t v3 = this;
  uint64_t v466 = *MEMORY[0x263EF8340];
  id v4 = this[1];
  v375 = a2;
  SKCRenderer::getBackingContext(*((void *)a2 + 13), &v459);
  *((_DWORD *)v3 + 154) = 0;
  float32x4_t v5 = (id *)v3[80];
  v374 = v3 + 81;
  if (v5 == v3 + 81) {
    goto LABEL_307;
  }
  v370 = (uint32x2_t *)((char *)v3 + 604);
  __asm { FMOV            V0.4S, #1.0 }
  float32x4_t v400 = _Q0;
  __asm { FMOV            V0.4S, #-1.0 }
  float32x4_t v371 = _Q0;
  v448 = v4;
  v456 = v3;
  do
  {
    uint64_t v12 = 0;
    v377 = v5;
    uint64_t v13 = (simd_float4 *)v5[5];
    int v395 = v13->i32[0];
    int v14 = *((unsigned __int8 *)v3 + 612);
    unint64_t v15 = (float32x2_t *)v3;
    int v16 = *((unsigned __int8 *)v3 + 613);
    uint64_t v449 = v13[12].i64[0];
    simd_float4 v17 = v13[2];
    v458.columns[0] = v13[1];
    v458.columns[1] = v17;
    simd_float4 v18 = v13[4];
    v455 = v13;
    v458.columns[2] = v13[3];
    v458.columns[3] = v18;
    *(float32x2_t *)&long long v19 = vmls_f32(*(float32x2_t *)v458.columns[0].f32, v15[42], v15[44]);
    *((void *)&v19 + SKCNode::setFlags(this, 66, 1) = vextq_s8((int8x16_t)v458.columns[0], (int8x16_t)v458.columns[0], 8uLL).u64[0];
    float32x4_t v20 = *((float32x4_t *)v375 + 2);
    float32x4_t v21 = *((float32x4_t *)v375 + 3);
    float32x4_t v22 = *((float32x4_t *)v375 + 4);
    float32x4_t v23 = *((float32x4_t *)v375 + 5);
    v461[0] = v19;
    v461[1] = v458.columns[1];
    v461[2] = v458.columns[2];
    v461[3] = v458.columns[3];
    do
    {
      *(float32x4_t *)((char *)&v462 + v12 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(v461[v12])), v21, *(float32x2_t *)&v461[v12], 1), v22, (float32x4_t)v461[v12], 2), v23, (float32x4_t)v461[v12], 3);
      ++v12;
    }
    while (v12 != 4);
    v458.columns[0] = (simd_float4)v462;
    v458.columns[1] = v463;
    v458.columns[2] = v464;
    v458.columns[3] = v465;
    *(double *)v24.i64 = SKCBoundingBoxGetVerts(&v458);
    v458.columns[0] = v24;
    v458.columns[1] = v25;
    v458.columns[2] = v26;
    v458.columns[3] = v27;
    int IsVisible = quadIsVisible((float32x4_t *)&v458);
    if (*((unsigned char *)v456 + 564)) {
      char v29 = IsVisible;
    }
    else {
      char v29 = 1;
    }
    char v30 = v455->i8[4];
    if (v29)
    {
      if (IsVisible)
      {
        v30 |= 4u;
        v455->i8[4] = v30;
        ++*((_DWORD *)v456 + 154);
      }
      if ((v30 & 8) != 0)
      {
        char v30 = v30 & 0xF4 | 3;
        v455->i8[4] = v30;
      }
      if ((v30 & 3) == 0) {
        goto LABEL_299;
      }
      v454 = v455 + 7;
      std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::clear((uint64_t)&v455[7]);
      uint64_t v440 = (v16 * v14);
      if (v440)
      {
        uint64_t v31 = 0;
        while (1)
        {
          int v32 = *(_DWORD *)(v455[12].i64[0] + v31);
          if (v32 != 0x7FFFFFFF) {
            break;
          }
LABEL_26:
          v31 += 4;
          if (4 * v440 == v31) {
            goto LABEL_48;
          }
        }
        if ((unsigned __int16)*(_DWORD *)(v455[12].i64[0] + v31) != 0xFFFF)
        {
          unint64_t v33 = [v4 tileSet];
          if (!v33) {
            goto LABEL_24;
          }
          float v34 = [v4 tileSet];
          uint64_t v35 = [v34 tileDefinitions];
          if (v35)
          {
            uint64_t v36 = [v4 tileSet];
            uint64_t v37 = [v36 tileDefinitions];
            BOOL v38 = [v37 count] > (unint64_t)(unsigned __int16)v32;

            if (v38)
            {
              float v39 = [v448 tileSet];
              uint64_t v40 = [v39 tileDefinitions];
              unint64_t v33 = [v40 objectAtIndexedSubscript:(unsigned __int16)v32];

              unsigned int v41 = [v33 currentFrameIndex];
              uint64_t v42 = [v33 textures];
              if ([v42 count] <= (unint64_t)v41)
              {
                float32x4_t v44 = 0;
              }
              else
              {
                uint64_t v43 = [v33 textures];
                float32x4_t v44 = [v43 objectAtIndexedSubscript:v41];
              }
              unint64_t v46 = [v33 normalTextures];
              if ([v46 count] <= (unint64_t)v41)
              {
                uint64_t v45 = 0;
              }
              else
              {
                uint64_t v47 = [v33 normalTextures];
                uint64_t v45 = [v47 objectAtIndexedSubscript:v41];
              }
              if (v44)
              {
                [(SKTexture *)v44 _backingTexture];
                CGFloat x = v462.x;
                if (*(void *)&v462.y) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v462.y);
                }
                if (x != 0.0)
                {
                  *(void *)&v461[0] = 0;
                  *(void *)&v461[0] = generateBatchID(v44, v45);
                  if (std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::find<unsigned long long>(v454, (unint64_t *)v461))
                  {
                    *(void *)&v462.CGFloat x = v461;
                    uint64_t v49 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v454, (unint64_t *)v461, (uint64_t)&std::piecewise_construct, (uint64_t **)&v462);
                    ++*((_DWORD *)v49 + 11);
                  }
                  else
                  {
                    uint64_t v50 = v44;
                    int8x16_t v51 = v45;
                    *(void *)&v462.CGFloat x = v461;
                    uint64_t v52 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v454, (unint64_t *)v461, (uint64_t)&std::piecewise_construct, (uint64_t **)&v462);
                    objc_storeStrong(v52 + 3, v44);
                    objc_storeStrong(v52 + 4, v45);
                    v52[5] = (id)0x100000000;
                  }
                  if ([v33 frameDidChange]) {
                    *(_DWORD *)(v455[12].i64[0] + v3SKCNode::setFlags(this, 66, 1) = v32 | 0x80000000;
                  }
                }
              }
              goto LABEL_25;
            }
          }
          else
          {
          }
        }
        unint64_t v33 = 0;
LABEL_24:
        float32x4_t v44 = 0;
        uint64_t v45 = 0;
LABEL_25:

        id v4 = v448;
        goto LABEL_26;
      }
LABEL_48:
      int v57 = v455->i32[2];
      if (!v57) {
        goto LABEL_299;
      }
      uint64_t v58 = (4 * v57);
      uint64_t v59 = v455[5].i64[0];
      if (!v59 || *(_DWORD *)(v59 + 16) < v58)
      {
        uint64_t v60 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v459 + 16))(v459, 0, 4, v58);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v462, v60);
      }
      uint64_t v61 = v455[6].i64[0];
      if (!v61 || *(_DWORD *)(v61 + 16) < v58)
      {
        uint64_t v62 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v459 + 16))(v459, 0, 2, v58);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v462, v62);
      }
      uint64_t data = jet_buffer_pool::get_data((jet_buffer_pool *)v455[5].i64[0]);
      uint64_t v406 = jet_buffer_pool::get_data((jet_buffer_pool *)v455[6].i64[0]);
      int32x4_t v63 = (uint64_t **)v455[8].i64[0];
      if (v63)
      {
        unsigned int v64 = 0;
        do
        {
          uint64_t v65 = v63[3];
          *(void *)&v462.CGFloat x = v63[2];
          *(void *)&v462.CGFloat y = v65;
          uint64_t v66 = v63[4];
          __float2 v67 = v66;
          uint64_t v68 = (uint64_t)v63[5];
          v463.i64[0] = (uint64_t)v67;
          v463.i64[1] = v68;
          CGFloat y = v462.y;
          id v70 = *(id *)&v462.y;
          float32x4_t v71 = v67;
          *(void *)&v461[0] = &v462;
          float32x4x4_t v72 = (id *)std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v454, (unint64_t *)&v462, (uint64_t)&std::piecewise_construct, (uint64_t **)v461);
          objc_storeStrong(v72 + 3, *(id *)&y);
          objc_storeStrong(v72 + 4, v66);
          v72[5] = (id)v64;

          v64 += HIDWORD(v68);
          int32x4_t v63 = (uint64_t **)*v63;
        }
        while (v63);
      }
      float32x4_t v401 = (float32x4_t)(unint64_t)v456[44];
      float32x4_t v73 = vmlaq_n_f32(v400, vaddq_f32(vminnmq_f32(vmaxnmq_f32(*((float32x4_t *)v456 + 19), (float32x4_t)0), v400), v371), fminf(fmaxf(*((float *)v456 + 80), 0.0), 1.0));
      float v74 = vmuls_lane_f32(*((float *)v456 + 81), v73, 3);
      v73.i32[3] = 1.0;
      *((float32x4_t *)v456 + 36) = vmulq_n_f32(v73, fminf(fmaxf(*((float *)v375 + 24) * v74, 0.0), 1.0));
      float32x4_t v75 = (char *)v456[74];
      __asm { FMOV            V0.2S, #1.0 }
      uint64_t v402 = _D0;
      __asm { FMOV            V0.2D, #0.5 }
      float64x2_t v398 = _Q0;
      if ((unint64_t)(v75 - 2) >= 2)
      {
        id v4 = v448;
        if (v75)
        {
          if (v75 != (char *)1) {
            goto LABEL_294;
          }
          unsigned int v78 = *((_DWORD *)v456 + 151);
          int v79 = *((_DWORD *)v456 + 152);
          [v448 tileSize];
          double v81 = v80;
          [v448 tileSize];
          LOBYTE(v83) = *((unsigned char *)v456 + 612);
          if (!(_BYTE)v83) {
            goto LABEL_294;
          }
          unsigned int v84 = v79 + v78;
          unsigned int v85 = 0;
          v86.f32[0] = v81;
          float32_t v87 = v82;
          long long v88 = *((_OWORD *)v456 + 21);
          double v89 = COERCE_FLOAT((unint64_t)v456[42] >> 32);
          float v90 = v86.f32[0] * 0.5 / *(float *)&v88;
          float v392 = v90;
          float v91 = (float)-v87 * 0.5 / v89;
          float v92 = v87 * 0.5 / v89;
          float v389 = v92;
          v86.f32[1] = v87;
          float v386 = (float)(unsigned __int16)v395;
          int v403 = *((_DWORD *)v456 + 152) - 1;
          *(float32x2_t *)v93.f32 = vdiv_f32(vdiv_f32(v86, *(float32x2_t *)&v88), v86);
          float v94 = (float)(~v395 >> 16);
          v93.i64[1] = v402;
          float32x4_t v396 = v93;
          float v381 = (float)v78 / (float)v84;
          float v383 = v94;
          while (1)
          {
            unsigned int v95 = v83;
            if (v85 >= v83) {
              goto LABEL_134;
            }
            unsigned int v379 = v85;
            int v96 = v403;
            if (v403 >= *((unsigned __int8 *)v456 + 613))
            {
LABEL_131:
              unsigned int v95 = v83;
              goto LABEL_133;
            }
            while (1)
            {
              signed int v97 = v85 + v95 * v96;
              unint64_t v98 = *(unsigned __int16 *)(v455[12].i64[0] + 4 * v97);
              if (v98 == 0xFFFF
                || ([v4 tileSet], (unint64_t v99 = objc_claimAutoreleasedReturnValue()) == 0))
              {
LABEL_71:
                unint64_t v107 = 0;
                __float2 v101 = 0;
                uint64_t v111 = 0;
                goto LABEL_79;
              }
              float v100 = [v4 tileSet];
              __float2 v101 = [v100 tileDefinitions];
              if (v101)
              {
                unint64_t v102 = [v4 tileSet];
                float32x4_t v103 = [v102 tileDefinitions];
                BOOL v104 = [v103 count] > v98;

                if (!v104) {
                  goto LABEL_71;
                }
                unint64_t v105 = [v448 tileSet];
                float32x4_t v106 = [v105 tileDefinitions];
                unint64_t v107 = [v106 objectAtIndexedSubscript:v98];

                LODWORD(v106) = [v107 currentFrameIndex];
                int v108 = [v107 textures];
                unint64_t v109 = v106;
                if ([v108 count] <= (unint64_t)v106)
                {
                  __float2 v101 = 0;
                }
                else
                {
                  v110 = [v107 textures];
                  __float2 v101 = [v110 objectAtIndexedSubscript:v109];
                }
                unint64_t v99 = [v107 normalTextures];
                if ([v99 count] <= v109)
                {
                  uint64_t v111 = 0;
                  goto LABEL_78;
                }
                float v100 = [v107 normalTextures];
                uint64_t v111 = [v100 objectAtIndexedSubscript:v109];
              }
              else
              {
                unint64_t v107 = 0;
                uint64_t v111 = 0;
              }

LABEL_78:
LABEL_79:
              uint64_t BatchID = 0;
              uint64_t BatchID = generateBatchID(v101, v111);
              if (std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::find<unsigned long long>(v454, (unint64_t *)&BatchID))
              {
                v112 = v111;
                signed int v428 = v97;
                *(void *)&v462.CGFloat x = &BatchID;
                uint64_t v113 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v454, (unint64_t *)&BatchID, (uint64_t)&std::piecewise_construct, (uint64_t **)&v462);
                id v432 = (id)v113[3];
                id v114 = (id)v113[4];
                uint64_t v115 = v113[5];
                [(SKTexture *)v101 textureRect];
                CGFloat v116 = v467.origin.x;
                CGFloat v117 = v467.origin.y;
                CGFloat width = v467.size.width;
                CGFloat height = v467.size.height;
                double MinX = CGRectGetMinX(v467);
                v468.origin.CGFloat x = v116;
                v468.origin.CGFloat y = v117;
                v468.size.CGFloat width = width;
                v468.size.CGFloat height = height;
                double MaxX = CGRectGetMaxX(v468);
                v469.origin.CGFloat x = v116;
                v469.origin.CGFloat y = v117;
                v469.size.CGFloat width = width;
                v469.size.CGFloat height = height;
                double MinY = CGRectGetMinY(v469);
                v470.origin.CGFloat x = v116;
                v470.origin.CGFloat y = v117;
                v470.size.CGFloat width = width;
                v470.size.CGFloat height = height;
                double MaxY = CGRectGetMaxY(v470);
                [(SKTexture *)v101 cropOffset];
                v462.CGFloat x = v124;
                v462.CGFloat y = v125;
                float32x2_t v441 = sk_vector_make((float64x2_t *)&v462);
                [(SKTexture *)v101 cropScale];
                v462.CGFloat x = v126;
                v462.CGFloat y = v127;
                float32x2_t v422 = sk_vector_make((float64x2_t *)&v462);
                if (v101)
                {
                  [(SKTexture *)v101 _backingTexture];
                  int v128 = v96;
                  CGFloat v129 = v462.x;
                }
                else
                {
                  int v128 = v96;
                  CGFloat v129 = 0.0;
                  v462.CGFloat x = 0.0;
                  v462.CGFloat y = 0.0;
                }
                float v130 = MinX;
                float v131 = MaxX;
                float v132 = MinY;
                float v133 = MaxY;
                if ((*(unsigned int (**)(CGFloat))(**(void **)&v129 + 24))(COERCE_CGFLOAT(*(void *)&v129)) == 1)
                {
                  float v130 = v130 * (float)(***(unsigned int (****)(void))&v462.x)(*(void *)&v462.x);
                  float v131 = v131 * (float)(***(unsigned int (****)(void))&v462.x)(*(void *)&v462.x);
                  float v132 = v132
                       * (float)(*(unsigned int (**)(void))(**(void **)&v462.x + 8))(*(void *)&v462.x);
                  float v133 = v133
                       * (float)(*(unsigned int (**)(void))(**(void **)&v462.x + 8))(*(void *)&v462.x);
                }
                BOOL v134 = [(SKTexture *)v101 isFlipped];
                if (v134) {
                  float v135 = v133;
                }
                else {
                  float v135 = v132;
                }
                float v450 = v135;
                if (!v134) {
                  float v132 = v133;
                }
                long long v419 = *((_OWORD *)v456 + 21);
                int v136 = [v107 flipVertically];
                int v96 = v128;
                int8x16_t v137 = (int8x16_t)(unint64_t)v441;
                if (v136)
                {
                  *(float *)&v137.i32[1] = -v441.f32[1];
                  int8x16_t v416 = v137;
                  float v407 = v132;
                }
                else
                {
                  int8x16_t v416 = (int8x16_t)(unint64_t)v441;
                  float v407 = v450;
                  float v450 = v132;
                }
                int v138 = [v107 flipHorizontally];
                if (v138) {
                  float v139 = v131;
                }
                else {
                  float v139 = v130;
                }
                float v435 = v139;
                if (v138) {
                  float v140 = v130;
                }
                else {
                  float v140 = v131;
                }
                float v442 = v140;
                if (v138) {
                  unsigned int v141 = -1;
                }
                else {
                  unsigned int v141 = 0;
                }
                [(SKTexture *)v101 size];
                float64_t v410 = v143;
                float64_t v413 = v142;
                [v107 size];
                int v146 = HIDWORD(v115) + v115;
                char v147 = v455->i8[4];
                if (v147)
                {
                  uint64_t v148 = 0;
                  v151.i64[0] = v419;
                  *(float32x2_t *)v149.f32 = v422;
                  v149.i64[1] = v402;
                  v150.i64[1] = v400.i64[1];
                  v151.i64[1] = v400.i64[1];
                  v152.f64[0] = v413;
                  int8x16_t v153 = v416;
                  *(float *)v153.i32 = -*(float *)v416.i32;
                  v152.f64[1] = v410;
                  int8x16_t v154 = vbslq_s8((int8x16_t)vdupq_n_s32(v141), v153, v416);
                  float32_t v155 = v144;
                  v150.f32[0] = v155;
                  float32_t v156 = v145;
                  v150.f32[1] = v156;
                  float32x4_t v157 = vmulq_f32(v149, v150);
                  float32x2_t v158 = vmul_f32(v422, vcvt_f32_f64(v152));
                  float64x2_t v159 = vcvtq_f64_f32(v158);
                  *(float32x2_t *)v160.f32 = vcvt_f32_f64(vdivq_f64(vaddq_f64(vmulq_f64(vsubq_f64(v152, v159), v398), vcvtq_f64_f32(vmul_f32(*(float32x2_t *)v154.i8, v158))), v159));
                  v154.i64[0] = vextq_s8(v154, v154, 8uLL).u64[0];
                  v160.i64[1] = v154.i64[0];
                  v154.i8[0] = *((unsigned char *)v456 + 612);
                  *(float *)v159.f64 = v386;
                  LOBYTE(v159.f64[0]) = *((unsigned char *)v456 + 613);
                  float32x4_t v161 = (float32x4_t)__PAIR64__(v381+ (float)((float)((float)((float)((float)(v383 * (float)LODWORD(v159.f64[0]))+ (float)v128)* v389)+ (float)((float)((float)(v386 * (float)v154.u32[0])+ (float)(int)v85)* v91))+ v91), (float)((float)((float)((float)(v383 * (float)LODWORD(v159.f64[0])) + (float)v128)* v392)+ (float)((float)((float)(v386 * (float)v154.u32[0]) + (float)(int)v85)* v392))+ 0.0);
                  do
                  {
                    *(float32x4_t *)(data + 16 * (4 * v146) + v148 * 16) = vmulq_f32(v151, vsubq_f32(vaddq_f32(v161, vmulq_f32(v396, vmulq_f32(v157, vaddq_f32(v160, (float32x4_t)xmmword_20AE9B380[v148])))), v401));
                    ++v148;
                  }
                  while (v148 != 4);
                  char v147 = v455->i8[4];
                }
                uint64_t v111 = v112;
                if ((v147 & 2) != 0)
                {
                  if ([(SKTexture *)v101 _needsExtrusionWorkaround])
                  {
                    unsigned int v162 = (***(uint64_t (****)(void))&v462.x)(*(void *)&v462.x);
                    unsigned int v163 = (*(uint64_t (**)(void))(**(void **)&v462.x + 8))(*(void *)&v462.x);
                    float v164 = 0.25 / (float)v162;
                    float v165 = 0.25 / (float)v163;
                    if (v435 >= v442) {
                      float v166 = -v164;
                    }
                    else {
                      float v166 = 0.25 / (float)v162;
                    }
                    *(float *)&unint64_t v167 = v435 + v166;
                    if ((float)(v435 + v166) >= v442) {
                      float v164 = -v164;
                    }
                    *(float *)&unint64_t v168 = v442 - v164;
                    float v169 = -v165;
                    if (v407 >= v450) {
                      float v170 = -v165;
                    }
                    else {
                      float v170 = 0.25 / (float)v163;
                    }
                    float v171 = v407 + v170;
                    if ((float)(v407 + v170) < v450) {
                      float v169 = 0.25 / (float)v163;
                    }
                    float v172 = v450 - v169;
                    uint64_t v111 = v112;
                  }
                  else
                  {
                    float v172 = v450;
                    *(float *)&unint64_t v167 = v435;
                    *(float *)&unint64_t v168 = v442;
                    float v171 = v407;
                  }
                  unint64_t v173 = __PAIR64__(LODWORD(v171), v167);
                  unint64_t v174 = __PAIR64__(LODWORD(v171), v168);
                  *((float *)&v168 + SKCNode::setFlags(this, 66, 1) = v172;
                  *((float *)&v167 + SKCNode::setFlags(this, 66, 1) = v172;
                  if (v101)
                  {
                    unint64_t v423 = __PAIR64__(LODWORD(v171), v168);
                    unint64_t v451 = __PAIR64__(LODWORD(v171), v167);
                    unint64_t v436 = v167;
                    unint64_t v443 = v168;
                    if ([(SKTexture *)v101 isRotated])
                    {
                      unint64_t v173 = v436;
                      unint64_t v175 = v443;
                      unint64_t v174 = v451;
                      unint64_t v168 = v423;
                    }
                    else
                    {
                      unint64_t v173 = v451;
                      unint64_t v174 = v423;
                      unint64_t v168 = v443;
                      unint64_t v175 = v436;
                    }
                  }
                  else
                  {
                    unint64_t v175 = v167;
                  }
                  *(void *)(v406 + 8 * (4 * v146)) = v173;
                  *(void *)(v406 + 8 * ((4 * v146) | 1u)) = v174;
                  *(void *)(v406 + 8 * ((4 * v146) | 2u)) = v168;
                  *(void *)(v406 + 8 * ((4 * v146) | 3u)) = v175;
                  *(_DWORD *)(v455[12].i64[0] + 4 * v428) &= ~0x80000000;
                }
                *(void *)&v461[0] = &BatchID;
                float32x4_t v176 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v454, (unint64_t *)&BatchID, (uint64_t)&std::piecewise_construct, (uint64_t **)v461);
                ++*((_DWORD *)v176 + 11);
                if (*(void *)&v462.y) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v462.y);
                }
              }
              ++v85;
              unsigned int v83 = *((unsigned __int8 *)v456 + 612);
              if (v85 >= v83) {
                break;
              }
              ++v96;
              unsigned int v95 = *((unsigned __int8 *)v456 + 612);
              id v4 = v448;
              if (v96 >= *((unsigned __int8 *)v456 + 613)) {
                goto LABEL_131;
              }
            }
            unsigned int v95 = *((unsigned __int8 *)v456 + 612);
            id v4 = v448;
LABEL_133:
            unsigned int v85 = v379;
LABEL_134:
            if (v403 < 1) {
              ++v85;
            }
            v403 -= v403 > 0;
            if (v85 >= v95)
            {
LABEL_294:
              long long v54 = v455;
              char v364 = v455->i8[4];
              if (v364)
              {
                jet_buffer_pool::commit_data((jet_buffer_pool *)v455[5].i64[0]);
                char v364 = v455->i8[4] & 0xFE;
                v455->i8[4] = v364;
              }
              if ((v364 & 2) != 0)
              {
                jet_buffer_pool::commit_data((jet_buffer_pool *)v455[6].i64[0]);
                char v56 = v455->i8[4] & 0xFD;
                goto LABEL_298;
              }
              goto LABEL_299;
            }
          }
        }
        uint64_t v186 = v440;
        if (!v440) {
          goto LABEL_294;
        }
        v187.i64[0] = v370->u32[0];
        v187.i64[1] = HIDWORD(*(unint64_t *)v370);
        __asm { FMOV            V2.2D, #1.0 }
        *(float32x2_t *)&_Q2.f64[0] = vcvt_f32_f64(vdivq_f64(_Q2, vcvtq_f64_u64(v187)));
        unsigned int v380 = ~v395 >> 16;
        int v382 = (unsigned __int16)v395;
        *(float32x2_t *)v189.f32 = vdiv_f32(*(float32x2_t *)&_Q2.f64[0], vdiv_f32((float32x2_t)v456[42], vcvt_f32_u32(*v370)));
        v189.i64[1] = v402;
        float v385 = *(float *)_Q2.f64;
        float32x4_t v388 = v189;
        float v190 = *((float *)_Q2.f64 + 1);
        while (1)
        {
          uint64_t v191 = v186 - 1;
          int v192 = *(_DWORD *)(v449 + 4 * (v186 - 1));
          if (v192 != 0x7FFFFFFF) {
            break;
          }
LABEL_214:
          BOOL v273 = v186 <= 1;
          uint64_t v186 = v191;
          if (v273) {
            goto LABEL_294;
          }
        }
        uint64_t v444 = v186;
        unsigned int v193 = *((unsigned __int8 *)v456 + 612);
        int v420 = *((unsigned __int8 *)v456 + 613);
        if ((unsigned __int16)*(_DWORD *)(v449 + 4 * (v186 - 1)) != 0xFFFF)
        {
          float v194 = [v4 tileSet];
          if (v194)
          {
            v195 = [v4 tileSet];
            __int32 v196 = [v195 tileDefinitions];
            if (!v196)
            {
              long long v206 = 0;
              float32x4_t v202 = 0;
              goto LABEL_154;
            }
            float32x4_t v197 = [v4 tileSet];
            float32x4_t v198 = [v197 tileDefinitions];
            BOOL v199 = [v198 count] > (unint64_t)(unsigned __int16)v192;

            if (v199)
            {
              int8x16_t v200 = [v448 tileSet];
              v201 = [v200 tileDefinitions];
              float32x4_t v202 = [v201 objectAtIndexedSubscript:(unsigned __int16)v192];

              unsigned int v203 = [v202 currentFrameIndex];
              int8x16_t v204 = [v202 textures];
              if ([v204 count] <= (unint64_t)v203)
              {
                __int32 v196 = 0;
              }
              else
              {
                float32x4_t v205 = [v202 textures];
                __int32 v196 = [v205 objectAtIndexedSubscript:v203];
              }
              float v194 = [v202 normalTextures];
              if ([v194 count] <= (unint64_t)v203)
              {
                long long v206 = 0;
                goto LABEL_156;
              }
              v195 = [v202 normalTextures];
              long long v206 = [v195 objectAtIndexedSubscript:v203];

LABEL_154:
LABEL_156:

LABEL_157:
              uint64_t v207 = [v202 rotation];
              uint64_t BatchID = 0;
              uint64_t BatchID = generateBatchID(v196, v206);
              if (!std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::find<unsigned long long>(v454, (unint64_t *)&BatchID))
              {
LABEL_213:

                id v4 = v448;
                uint64_t v186 = v444;
                goto LABEL_214;
              }
              v417 = v206;
              unsigned int v208 = v193;
              *(void *)&v462.CGFloat x = &BatchID;
              float32x4_t v209 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v454, (unint64_t *)&BatchID, (uint64_t)&std::piecewise_construct, (uint64_t **)&v462);
              id v414 = (id)v209[3];
              id v210 = (id)v209[4];
              uint64_t v211 = v209[5];
              [(SKTexture *)v196 textureRect];
              CGFloat v212 = v471.origin.x;
              CGFloat v213 = v471.origin.y;
              CGFloat v214 = v471.size.width;
              CGFloat v215 = v471.size.height;
              double v216 = CGRectGetMinX(v471);
              v472.origin.CGFloat x = v212;
              v472.origin.CGFloat y = v213;
              v472.size.CGFloat width = v214;
              v472.size.CGFloat height = v215;
              double v217 = CGRectGetMaxX(v472);
              v473.origin.CGFloat x = v212;
              v473.origin.CGFloat y = v213;
              v473.size.CGFloat width = v214;
              v473.size.CGFloat height = v215;
              double v218 = CGRectGetMinY(v473);
              v474.origin.CGFloat x = v212;
              v474.origin.CGFloat y = v213;
              v474.size.CGFloat width = v214;
              v474.size.CGFloat height = v215;
              double v219 = CGRectGetMaxY(v474);
              [(SKTexture *)v196 cropOffset];
              v462.CGFloat x = v220;
              v462.CGFloat y = v221;
              *(float32x2_t *)v222.f32 = sk_vector_make((float64x2_t *)&v462);
              float32x4_t v429 = v222;
              [(SKTexture *)v196 cropScale];
              v462.CGFloat x = v223;
              v462.CGFloat y = v224;
              float32x2_t v424 = sk_vector_make((float64x2_t *)&v462);
              v411 = v210;
              if (v196)
              {
                [(SKTexture *)v196 _backingTexture];
                uint64_t v225 = *(void *)&v461[0];
              }
              else
              {
                uint64_t v225 = 0;
                v461[0] = 0uLL;
              }
              float v226 = v216;
              float v227 = v217;
              float v228 = v218;
              float v229 = v219;
              if ((*(unsigned int (**)(uint64_t))(*(void *)v225 + 24))(v225) == 1)
              {
                float v226 = v226 * (float)(***(unsigned int (****)(void))&v461[0])(*(void *)&v461[0]);
                float v227 = v227 * (float)(***(unsigned int (****)(void))&v461[0])(*(void *)&v461[0]);
                float v228 = v228
                     * (float)(*(unsigned int (**)(void))(**(void **)&v461[0] + 8))(*(void *)&v461[0]);
                float v229 = v229
                     * (float)(*(unsigned int (**)(void))(**(void **)&v461[0] + 8))(*(void *)&v461[0]);
              }
              BOOL v230 = [(SKTexture *)v196 isFlipped];
              float32x4_t v437 = (float32x4_t)v429.u64[0];
              *(float32x2_t *)v231.f32 = v424;
              v231.i64[1] = v402;
              if (v230) {
                float v232 = v228;
              }
              else {
                float v232 = v229;
              }
              float v433 = v232;
              if (v230) {
                float v228 = v229;
              }
              switch(v207)
              {
                case 3:
                  v233.i64[1] = 0;
                  v233.i32[0] = v429.i32[1];
                  v233.f32[1] = -v429.f32[0];
                  break;
                case 2:
                  float32x4_t v397 = v231;
                  float32x4_t v437 = (float32x4_t)vnegq_f32(v429).u64[0];
LABEL_176:
                  long long v425 = *((_OWORD *)v456 + 21);
                  if ([v202 flipVertically])
                  {
                    if ((v207 & 0xFFFFFFFFFFFFFFFDLL) != 0)
                    {
                      float32x4_t v234 = v437;
                      v234.f32[0] = -v437.f32[0];
                      float v235 = v433;
                      float v433 = v228;
                      float32x4_t v437 = v234;
                      float v430 = v226;
                      float v226 = v227;
                      goto LABEL_182;
                    }
                    float32x4_t v236 = v437;
                    v236.i32[1] = vnegq_f32(v437).i32[1];
                    float32x4_t v437 = v236;
                    float v235 = v228;
                  }
                  else
                  {
                    float v235 = v433;
                    float v433 = v228;
                  }
                  float v430 = v227;
LABEL_182:
                  if ([v202 flipHorizontally])
                  {
                    if ((v207 & 0xFFFFFFFFFFFFFFFDLL) == 0)
                    {
                      float32x4_t v274 = v437;
                      v274.f32[0] = -v437.f32[0];
                      float32x4_t v437 = v274;
                      float v408 = v235;
                      float v404 = v226;
                      goto LABEL_187;
                    }
                    float32x4_t v237 = v437;
                    v237.i32[1] = vnegq_f32(v437).i32[1];
                    float v408 = v433;
                    float v433 = v235;
                    float32x4_t v437 = v237;
                  }
                  else
                  {
                    float v408 = v235;
                  }
                  float v404 = v430;
                  float v430 = v226;
LABEL_187:
                  [(SKTexture *)v196 size];
                  float64_t v391 = v239;
                  float64_t v393 = v238;
                  [v202 size];
                  int v242 = HIDWORD(v211) + v211;
                  v243.i64[0] = v425;
                  if (v455->i8[4])
                  {
                    uint64_t v244 = 0;
                    v245.i64[1] = v400.i64[1];
                    v243.i64[1] = v400.i64[1];
                    v246.f64[0] = v393;
                    v246.f64[1] = v391;
                    *(float *)&unsigned int v247 = v240;
                    *(float *)&unsigned int v248 = v241;
                    v245.i64[0] = __PAIR64__(v248, v247);
                    float32x2_t v249 = vmul_f32(*(float32x2_t *)v397.f32, vcvt_f32_f64(v246));
                    float64x2_t v250 = vcvtq_f64_f32(v249);
                    *(float32x2_t *)v251.f32 = vcvt_f32_f64(vdivq_f64(vaddq_f64(vmulq_f64(vsubq_f64(v246, v250), v398), vcvtq_f64_f32(vmul_f32(*(float32x2_t *)v437.f32, v249))), v250));
                    v251.i64[1] = vextq_s8((int8x16_t)v437, (int8x16_t)v437, 8uLL).u64[0];
                    float32x4_t v252 = vmulq_f32(v397, v245);
                    v253.i64[1] = 0;
                    do
                    {
                      v253.f32[1] = v190 * (float)(int)(v191 / v208 + v380 * v420);
                      v253.f32[0] = v385 * (float)(int)(v191 % v208 + v382 * v208);
                      *(float32x4_t *)(data + 16 * (4 * v242) + v244 * 16) = vmulq_f32(v243, vsubq_f32(vaddq_f32(v253, vmulq_f32(v388, vmulq_f32(v252, vaddq_f32(v251, (float32x4_t)xmmword_20AE9B380[v244])))), v401));
                      ++v244;
                    }
                    while (v244 != 4);
                  }
                  long long v206 = v417;
                  if (v192 < 0 || (v455->i8[4] & 1) != 0)
                  {
                    if ([(SKTexture *)v196 _needsExtrusionWorkaround])
                    {
                      unsigned int v254 = (***(uint64_t (****)(void))&v461[0])(*(void *)&v461[0]);
                      unsigned int v255 = (*(uint64_t (**)(void))(**(void **)&v461[0] + 8))(*(void *)&v461[0]);
                      float v256 = 0.25 / (float)v254;
                      float v257 = 0.25 / (float)v255;
                      if (v430 >= v404) {
                        float v258 = -v256;
                      }
                      else {
                        float v258 = 0.25 / (float)v254;
                      }
                      *(float *)&uint64_t v259 = v430 + v258;
                      if ((float)(v430 + v258) >= v404) {
                        float v256 = -v256;
                      }
                      *(float *)&uint64_t v260 = v404 - v256;
                      float v261 = -v257;
                      if (v433 >= v408) {
                        float v262 = -v257;
                      }
                      else {
                        float v262 = 0.25 / (float)v255;
                      }
                      float v263 = v433 + v262;
                      if ((float)(v433 + v262) < v408) {
                        float v261 = 0.25 / (float)v255;
                      }
                      float v264 = v408 - v261;
                    }
                    else
                    {
                      *(float *)&uint64_t v259 = v430;
                      float v263 = v433;
                      float v264 = v408;
                      *(float *)&uint64_t v260 = v404;
                    }
                    *(void *)&v462.CGFloat x = __PAIR64__(LODWORD(v263), v259);
                    *(void *)&v462.CGFloat y = __PAIR64__(LODWORD(v263), v260);
                    *((float *)&v260 + SKCNode::setFlags(this, 66, 1) = v264;
                    *((float *)&v259 + SKCNode::setFlags(this, 66, 1) = v264;
                    v463.i64[0] = v260;
                    v463.i64[1] = v259;
                    if (v196 && [(SKTexture *)v196 isRotated])
                    {
                      v265 = (int *)((char *)&SKCTileMapNode::_generateRenderData(SKCRenderInfo *)::rotationIndexOffsets
                                   + 16 * v207);
                      int v266 = 4 * v242;
                      *(void *)(v406 + 8 * (4 * v242)) = *((void *)&v462.x + v265[3]);
                      uint64_t v267 = 1;
                      uint64_t v268 = 2;
                    }
                    else
                    {
                      v269 = (int *)((char *)&SKCTileMapNode::_generateRenderData(SKCRenderInfo *)::rotationIndexOffsets
                                   + 16 * v207);
                      uint64_t v270 = *v269;
                      v265 = v269 + 1;
                      int v266 = 4 * v242;
                      *(void *)(v406 + 8 * (4 * v242)) = *((void *)&v462.x + v270);
                      uint64_t v267 = 2;
                      uint64_t v268 = 3;
                    }
                    *(void *)(v406 + 8 * (v266 | 1u)) = *((void *)&v462.x + *v265);
                    v271 = (char *)&SKCTileMapNode::_generateRenderData(SKCRenderInfo *)::rotationIndexOffsets
                         + 16 * v207;
                    *(void *)(v406 + 8 * (v266 | 2u)) = *((void *)&v462.x + *(int *)&v271[4 * v267]);
                    *(void *)(v406 + 8 * (v266 | 3u)) = *((void *)&v462.x + *(int *)&v271[4 * v268]);
                    *(_DWORD *)(v455[12].i64[0] + 4 * v191) &= ~0x80000000;
                  }
                  *(void *)&v462.CGFloat x = &BatchID;
                  v272 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v454, (unint64_t *)&BatchID, (uint64_t)&std::piecewise_construct, (uint64_t **)&v462);
                  ++*((_DWORD *)v272 + 11);
                  if (*((void *)&v461[0] + 1)) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v461[0] + 1));
                  }

                  goto LABEL_213;
                case 1:
                  v233.i64[1] = 0;
                  v233.f32[0] = -v429.f32[1];
                  v233.i32[1] = v429.i32[0];
                  break;
                default:
LABEL_174:
                  float32x4_t v397 = v231;
                  goto LABEL_176;
              }
              float32x4_t v437 = v233;
              v231.i64[0] = __PAIR64__(v424.u32[0], v424.u32[1]);
              goto LABEL_174;
            }
          }
        }
        long long v206 = 0;
        __int32 v196 = 0;
        float32x4_t v202 = 0;
        goto LABEL_157;
      }
      id v4 = v448;
      [v448 tileSize];
      double v178 = v177;
      [v448 tileSize];
      float v179 = v178;
      float v181 = v180;
      long long v182 = *((_OWORD *)v456 + 21);
      LODWORD(v183) = HIDWORD(v456[42]);
      float v184 = v181 * 0.5;
      float v185 = v179 * 0.5;
      if (v456[74] == (id)2)
      {
        float v390 = (float)(v185 * 1.5) / *(float *)&v182;
        float v373 = 0.0;
        float v387 = v181 / v183;
        float v384 = v184 / v183;
      }
      else
      {
        float v387 = (float)(v184 * 1.5) / v183;
        float v384 = 0.0;
        float v390 = v179 / *(float *)&v182;
        float v373 = v185 / *(float *)&v182;
      }
      int v275 = *((unsigned __int8 *)v456 + 613);
      if (!*((unsigned char *)v456 + 613)) {
        goto LABEL_294;
      }
      signed int v372 = ~v395 >> 16;
      v276.i64[1] = v400.i64[1];
      v276.f32[0] = (float)(v179 / *(float *)&v182) / v179;
      v276.f32[1] = (float)(v181 / v183) / v181;
      unsigned int v277 = *((unsigned __int8 *)v456 + 612);
      float32x4_t v378 = v276;
      while (1)
      {
        int v278 = v275 - 1;
        if (v277) {
          break;
        }
LABEL_292:
        BOOL v273 = v275 < 2;
        int v275 = v278;
        if (v273) {
          goto LABEL_294;
        }
      }
      int v376 = v275;
      int v279 = 0;
      int v280 = v278 + v372 * *((unsigned __int8 *)v456 + 613);
      if (v280 >= 0) {
        int v281 = v280 & 1;
      }
      else {
        int v281 = -(v280 & 1);
      }
      float v394 = v373 * (float)v281;
      float v282 = (float)v278;
      int v405 = v275 - 1;
      while (1)
      {
        int v283 = v279 + v277 * v278;
        unint64_t v284 = *(unsigned __int16 *)(v455[12].i64[0] + 4 * v283);
        if (v284 != 0xFFFF)
        {
          v285 = [v4 tileSet];
          if (v285)
          {
            v286 = [v4 tileSet];
            v287 = [v286 tileDefinitions];
            if (!v287)
            {
              v293 = 0;
              v297 = 0;
              goto LABEL_237;
            }
            v288 = [v4 tileSet];
            v289 = [v288 tileDefinitions];
            BOOL v290 = [v289 count] > v284;

            if (v290)
            {
              v291 = [v448 tileSet];
              v292 = [v291 tileDefinitions];
              v293 = [v292 objectAtIndexedSubscript:v284];

              LODWORD(v292) = [v293 currentFrameIndex];
              v294 = [v293 textures];
              unint64_t v295 = v292;
              if ([v294 count] <= (unint64_t)v292)
              {
                v287 = 0;
              }
              else
              {
                v296 = [v293 textures];
                v287 = [v296 objectAtIndexedSubscript:v295];
              }
              v285 = [v293 normalTextures];
              if ([v285 count] <= v295)
              {
                v297 = 0;
              }
              else
              {
                v286 = [v293 normalTextures];
                v297 = [v286 objectAtIndexedSubscript:v295];
LABEL_237:
              }
              goto LABEL_240;
            }
          }
        }
        v293 = 0;
        v287 = 0;
        v297 = 0;
LABEL_240:
        uint64_t BatchID = 0;
        uint64_t BatchID = generateBatchID(v287, v297);
        if (std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::find<unsigned long long>(v454, (unint64_t *)&BatchID))
        {
          *(void *)&v462.CGFloat x = &BatchID;
          v298 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v454, (unint64_t *)&BatchID, (uint64_t)&std::piecewise_construct, (uint64_t **)&v462);
          int v299 = v283;
          id v431 = (id)v298[3];
          id v434 = (id)v298[4];
          uint64_t v300 = v298[5];
          char v301 = *((unsigned char *)v456 + 612);
          [(SKTexture *)v287 textureRect];
          CGFloat v302 = v475.origin.x;
          CGFloat v303 = v475.origin.y;
          CGFloat v304 = v475.size.width;
          CGFloat v305 = v475.size.height;
          double v306 = CGRectGetMinX(v475);
          v476.origin.CGFloat x = v302;
          v476.origin.CGFloat y = v303;
          v476.size.CGFloat width = v304;
          v476.size.CGFloat height = v305;
          double v307 = CGRectGetMaxX(v476);
          v477.origin.CGFloat x = v302;
          v477.origin.CGFloat y = v303;
          v477.size.CGFloat width = v304;
          v477.size.CGFloat height = v305;
          double v308 = CGRectGetMinY(v477);
          v478.origin.CGFloat x = v302;
          v478.origin.CGFloat y = v303;
          v478.size.CGFloat width = v304;
          v478.size.CGFloat height = v305;
          double v309 = CGRectGetMaxY(v478);
          [(SKTexture *)v287 cropOffset];
          v462.CGFloat x = v310;
          v462.CGFloat y = v311;
          float32x2_t v445 = sk_vector_make((float64x2_t *)&v462);
          [(SKTexture *)v287 cropScale];
          v462.CGFloat x = v312;
          v462.CGFloat y = v313;
          float32x2_t v426 = sk_vector_make((float64x2_t *)&v462);
          if (v287)
          {
            [(SKTexture *)v287 _backingTexture];
            CGFloat v314 = v462.x;
          }
          else
          {
            CGFloat v314 = 0.0;
            v462.CGFloat x = 0.0;
            v462.CGFloat y = 0.0;
          }
          float v315 = v306;
          float v316 = v307;
          float v317 = v308;
          float v318 = v309;
          if ((*(unsigned int (**)(CGFloat))(**(void **)&v314 + 24))(COERCE_CGFLOAT(*(void *)&v314)) == 1)
          {
            float v315 = v315 * (float)(***(unsigned int (****)(void))&v462.x)(*(void *)&v462.x);
            float v316 = v316 * (float)(***(unsigned int (****)(void))&v462.x)(*(void *)&v462.x);
            float v317 = v317
                 * (float)(*(unsigned int (**)(void))(**(void **)&v462.x + 8))(*(void *)&v462.x);
            float v318 = v318
                 * (float)(*(unsigned int (**)(void))(**(void **)&v462.x + 8))(*(void *)&v462.x);
          }
          BOOL v319 = [(SKTexture *)v287 isFlipped];
          if (v319) {
            float v320 = v318;
          }
          else {
            float v320 = v317;
          }
          float v452 = v320;
          if (!v319) {
            float v317 = v318;
          }
          long long v421 = *((_OWORD *)v456 + 21);
          int v321 = [v293 flipVertically];
          int v278 = v405;
          int8x16_t v322 = (int8x16_t)(unint64_t)v445;
          if (v321)
          {
            *(float *)&v322.i32[1] = -v445.f32[1];
            float v415 = v317;
            int8x16_t v418 = v322;
          }
          else
          {
            float v415 = v452;
            int8x16_t v418 = (int8x16_t)(unint64_t)v445;
            float v452 = v317;
          }
          int v323 = [v293 flipHorizontally];
          if (v323) {
            float v324 = v316;
          }
          else {
            float v324 = v315;
          }
          float v438 = v324;
          if (v323) {
            float v325 = v315;
          }
          else {
            float v325 = v316;
          }
          float v446 = v325;
          if (v323) {
            unsigned int v326 = -1;
          }
          else {
            unsigned int v326 = 0;
          }
          [(SKTexture *)v287 size];
          float64_t v409 = v328;
          float64_t v412 = v327;
          [v293 size];
          int v331 = HIDWORD(v300) + v300;
          char v332 = v455->i8[4];
          if (v332)
          {
            uint64_t v333 = 0;
            v336.i64[0] = v421;
            *(float32x2_t *)v334.f32 = v426;
            v334.i64[1] = v402;
            v335.i64[1] = v400.i64[1];
            v336.i64[1] = v400.i64[1];
            int8x16_t v337 = v418;
            *(float *)v337.i32 = -*(float *)v418.i32;
            v338.f64[0] = v412;
            v338.f64[1] = v409;
            int8x16_t v339 = vbslq_s8((int8x16_t)vdupq_n_s32(v326), v337, v418);
            float32_t v340 = v329;
            v335.f32[0] = v340;
            float32_t v341 = v330;
            v335.f32[1] = v341;
            float32x4_t v342 = vmulq_f32(v334, v335);
            float32x2_t v343 = vmul_f32(v426, vcvt_f32_f64(v338));
            float64x2_t v344 = vcvtq_f64_f32(v343);
            *(float32x2_t *)v345.f32 = vcvt_f32_f64(vdivq_f64(vaddq_f64(vmulq_f64(vsubq_f64(v338, v344), v398), vcvtq_f64_f32(vmul_f32(*(float32x2_t *)v339.i8, v343))), v344));
            unint64_t v346 = vextq_s8(v339, v339, 8uLL).u64[0];
            v345.i64[1] = v346;
            LOBYTE(v346) = *((unsigned char *)v456 + 612);
            float v347 = (float)(unsigned __int16)v395;
            LOBYTE(v347) = *((unsigned char *)v456 + 613);
            v348.i64[1] = 0;
            do
            {
              v348.f32[1] = (float)(v384 * (float)(((_BYTE)v279 + (_BYTE)v395 * v301) & 1))
                          + (float)((float)((float)((float)v372 * (float)LODWORD(v347)) + v282) * v387);
              v348.f32[0] = v394
                          + (float)((float)((float)((float)(unsigned __int16)v395 * (float)v346)
                                          + (float)v279)
                                  * v390);
              *(float32x4_t *)(data + 16 * (4 * v331) + v333 * 16) = vmulq_f32(v336, vsubq_f32(vaddq_f32(v348, vmulq_f32(v378, vmulq_f32(v342, vaddq_f32(v345, (float32x4_t)xmmword_20AE9B380[v333])))), v401));
              ++v333;
            }
            while (v333 != 4);
            char v332 = v455->i8[4];
          }
          if ((v332 & 2) != 0)
          {
            if ([(SKTexture *)v287 _needsExtrusionWorkaround])
            {
              unsigned int v349 = (***(uint64_t (****)(void))&v462.x)(*(void *)&v462.x);
              unsigned int v350 = (*(uint64_t (**)(void))(**(void **)&v462.x + 8))(*(void *)&v462.x);
              float v351 = 0.25 / (float)v349;
              float v352 = 0.25 / (float)v350;
              if (v438 >= v446) {
                float v353 = -v351;
              }
              else {
                float v353 = 0.25 / (float)v349;
              }
              *(float *)&unint64_t v354 = v438 + v353;
              if ((float)(v438 + v353) >= v446) {
                float v351 = -v351;
              }
              *(float *)&unint64_t v355 = v446 - v351;
              float v356 = -v352;
              if (v415 >= v452) {
                float v357 = -v352;
              }
              else {
                float v357 = 0.25 / (float)v350;
              }
              float v358 = v415 + v357;
              if ((float)(v415 + v357) < v452) {
                float v356 = 0.25 / (float)v350;
              }
              float v359 = v452 - v356;
            }
            else
            {
              float v359 = v452;
              *(float *)&unint64_t v354 = v438;
              *(float *)&unint64_t v355 = v446;
              float v358 = v415;
            }
            unint64_t v360 = __PAIR64__(LODWORD(v358), v354);
            unint64_t v361 = __PAIR64__(LODWORD(v358), v355);
            *((float *)&v355 + SKCNode::setFlags(this, 66, 1) = v359;
            *((float *)&v354 + SKCNode::setFlags(this, 66, 1) = v359;
            if (v287)
            {
              unint64_t v427 = __PAIR64__(LODWORD(v358), v355);
              unint64_t v453 = __PAIR64__(LODWORD(v358), v354);
              unint64_t v439 = v354;
              unint64_t v447 = v355;
              if ([(SKTexture *)v287 isRotated])
              {
                unint64_t v360 = v439;
                unint64_t v362 = v447;
                unint64_t v361 = v453;
                unint64_t v355 = v427;
              }
              else
              {
                unint64_t v360 = v453;
                unint64_t v361 = v427;
                unint64_t v355 = v447;
                unint64_t v362 = v439;
              }
            }
            else
            {
              unint64_t v362 = v354;
            }
            *(void *)(v406 + 8 * (4 * v331)) = v360;
            *(void *)(v406 + 8 * ((4 * v331) | 1u)) = v361;
            *(void *)(v406 + 8 * ((4 * v331) | 2u)) = v355;
            *(void *)(v406 + 8 * ((4 * v331) | 3u)) = v362;
            *(_DWORD *)(v455[12].i64[0] + 4 * v299) &= ~0x80000000;
          }
          *(void *)&v461[0] = &BatchID;
          v363 = std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t)v454, (unint64_t *)&BatchID, (uint64_t)&std::piecewise_construct, (uint64_t **)v461);
          ++*((_DWORD *)v363 + 11);
          if (*(void *)&v462.y) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v462.y);
          }
        }
        ++v279;
        unsigned int v277 = *((unsigned __int8 *)v456 + 612);
        id v4 = v448;
        if (v279 >= v277)
        {
          int v275 = v376;
          goto LABEL_292;
        }
      }
    }
    v455->i8[4] = v30 & 0xFB;
    if ((v30 & 8) == 0)
    {
      uint64_t v53 = (std::__shared_weak_count *)v455[5].i64[1];
      v455[5].i64[0] = 0;
      v455[5].i64[1] = 0;
      long long v54 = v455;
      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
      long long v55 = (std::__shared_weak_count *)v455[6].i64[1];
      v455[6].i64[0] = 0;
      v455[6].i64[1] = 0;
      if (v55) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v55);
      }
      std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::clear((uint64_t)&v455[7]);
      char v56 = v455->i8[4] | 8;
LABEL_298:
      v54->i8[4] = v56;
    }
LABEL_299:
    v365 = v377;
    v366 = (id *)v377[1];
    if (v366)
    {
      do
      {
        v367 = v366;
        v366 = (id *)*v366;
      }
      while (v366);
    }
    else
    {
      do
      {
        v367 = (id *)v365[2];
        _ZF = *v367 == v365;
        v365 = v367;
      }
      while (!_ZF);
    }
    float32x4_t v5 = v367;
    float32x4_t v3 = v456;
  }
  while (v367 != v374);
  if (*((_DWORD *)v456 + 154))
  {
    uint64_t v368 = *((unsigned __int8 *)v456 + 613) * *((unsigned __int8 *)v456 + 612);
    goto LABEL_308;
  }
LABEL_307:
  uint64_t v368 = 0;
LABEL_308:
  if (v460) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v460);
  }

  return v368;
}

void sub_20ADFD348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (STACK[0x258]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x258]);
  }

  _Unwind_Resume(a1);
}

uint64_t SKCRendererGenerateQuadIndexBufferData<unsigned int>(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = v1[12];
  uint64_t result = (*(uint64_t (**)(unsigned int *))(*(void *)v1 + 16))(v1);
  if (v2)
  {
    for (uint64_t i = 0; i != v2; ++i)
      *(_DWORD *)(result + 4 * i) = dword_20AE9B44C[i % 6] + 4 * (i / 6);
  }
  return result;
}

std::string *jet_command_buffer::set_fragment_constant_value(uint64_t *a1, std::string *__str, float a3)
{
  int v9 = 22;
  unint64_t v6 = a1[2];
  if (v6 >= a1[3])
  {
    uint64_t v7 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v9);
  }
  else
  {
    *(void *)unint64_t v6 = &unk_26BEEC420;
    *(_DWORD *)(v6 + 8) = 22;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 64) = 0;
    uint64_t v7 = v6 + 192;
    *(void *)(v6 + 96) = 0;
  }
  a1[2] = v7;
  uint64_t result = std::string::operator=((std::string *)(v7 - 176), __str);
  *(float *)(v7 - 64) = a3;
  return result;
}

__n128 jet_command_buffer::set_vertex_constant_value(uint64_t *a1, std::string *__str, __n128 a3)
{
  int v9 = 18;
  unint64_t v5 = a1[2];
  if (v5 >= a1[3])
  {
    uint64_t v6 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v9);
  }
  else
  {
    *(void *)unint64_t v5 = &unk_26BEEC420;
    *(_DWORD *)(v5 + 8) = 18;
    *(void *)(v5 + 24) = 0;
    *(void *)(v5 + 32) = 0;
    *(void *)(v5 + 16) = 0;
    *(void *)(v5 + 64) = 0;
    uint64_t v6 = v5 + 192;
    *(void *)(v5 + 96) = 0;
  }
  a1[2] = v6;
  std::string::operator=((std::string *)(v6 - 176), __str);
  __n128 result = a3;
  *(__n128 *)(v6 - 64) = a3;
  return result;
}

__n128 jet_command_buffer::set_vertex_constant_value(uint64_t *a1, std::string *__str, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  int v15 = 21;
  unint64_t v8 = a1[2];
  if (v8 >= a1[3])
  {
    uint64_t v9 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v15);
  }
  else
  {
    *(void *)unint64_t v8 = &unk_26BEEC420;
    *(_DWORD *)(v8 + 8) = 21;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 64) = 0;
    uint64_t v9 = v8 + 192;
    *(void *)(v8 + 96) = 0;
  }
  a1[2] = v9;
  std::string::operator=((std::string *)(v9 - 176), __str);
  *(__n128 *)(v9 - 64) = a3;
  *(__n128 *)(v9 - 48) = a4;
  __n128 result = a6;
  *(__n128 *)(v9 - 32) = a5;
  *(__n128 *)(v9 - 16) = a6;
  return result;
}

void **std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>>((uint64_t)result, v13);
    int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<jet_buffer>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    __n128 result = std::__split_buffer<std::shared_ptr<jet_buffer>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20ADFDBB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<jet_buffer>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t generateBatchID(SKTexture *a1, SKTexture *a2)
{
  float32x4_t v3 = a1;
  id v4 = a2;
  if (v3)
  {
    [(SKTexture *)v3 _backingTexture];
    if (v10)
    {
      [(SKTexture *)v3 _backingTexture];
      unsigned int v5 = v8;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    else
    {
      unsigned int v5 = 0;
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
    unsigned int v5 = 0;
  }
  if (v4)
  {
    [(SKTexture *)v4 _backingTexture];
    if (v10)
    {
      [(SKTexture *)v4 _backingTexture];
      uint64_t v6 = v8 << 32;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }

  return v6 | v5;
}

void sub_20ADFDCB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

__n64 SKCTileMapNode::_chunkCoordinatesFromChunkID(SKCTileMapNode *this, int a2)
{
  result.n64_f32[0] = (float)(unsigned __int16)a2;
  result.n64_f32[1] = (float)(~a2 >> 16);
  return result;
}

void SKCTileMapNode::setShader(id *this, SKShader *a2)
{
  objc_storeStrong(this + 71, a2);
  SKCNode::setDirty((SKCNode *)this);

  SKCNode::recomputeFlags((SKCNode *)this, 1);
}

void SKCTileMapNode::subclassRecomputeFlags(id *this)
{
  if ([this[71] _usesTimeUniform]
    && !*((unsigned char *)this + 172)
    && (*((unsigned char *)this + 171) & 0x60) != 0)
  {
    SKCNode::setFlags((SKCNode *)this, 2, 1);
  }
}

void SKCTileMapNode::setTile(SKCTileMapNode *this, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = SKCTileMapNode::_ensureChunkForTileIndex(this, a2);
  unsigned int v7 = *((_DWORD *)this + 151);
  int v8 = a2 / v7;
  int v9 = (unsigned __int16)(a2 % v7);
  int v10 = (unsigned __int16)v8;
  unint64_t v11 = v9 % *((unsigned __int8 *)this + 612)
      + (unsigned __int16)v8 % *((unsigned __int8 *)this + 613)
      * (unint64_t)*((unsigned __int8 *)this + 612);
  int v12 = *(_DWORD *)(v6[24] + 4 * v11);
  int v13 = v12 & 0x7FFFFFFF;
  if ((v12 & 0x7FFFFFFF) == a3) {
    goto LABEL_24;
  }
  int v14 = v6;
  if (a3 != 0x7FFFFFFF && v13 == 0x7FFFFFFF)
  {
    ++*((_DWORD *)v6 + 2);
LABEL_11:
    int v15 = this;
    uint64_t v16 = (uint64_t)v14;
    LOWORD(v13) = a3;
    int v17 = 1;
    goto LABEL_12;
  }
  if (a3 != 0x7FFFFFFF || v13 == 0x7FFFFFFF)
  {
    if (a3 == 0x7FFFFFFF || v13 == 0x7FFFFFFF) {
      goto LABEL_13;
    }
    SKCTileMapNode::_cacheTileIfAnimated((uint64_t)this, (uint64_t)v6, v12, -1);
    goto LABEL_11;
  }
  int v15 = this;
  uint64_t v16 = (uint64_t)v14;
  int v17 = -1;
LABEL_12:
  SKCTileMapNode::_cacheTileIfAnimated((uint64_t)v15, v16, v13, v17);
LABEL_13:
  unsigned int v18 = a3 | 0x80000000;
  if (v12 >= 0) {
    unsigned int v18 = a3;
  }
  *(_DWORD *)(v14[24] + 4 * v1SKCNode::setFlags(this, 66, 1) = v18;
  *((unsigned char *)v14 + 4) |= 3u;
  int v19 = *((_DWORD *)this + 156);
  if (v19 >= v9) {
    int v19 = v9;
  }
  *((_DWORD *)this + 156) = v19;
  int v20 = *((_DWORD *)this + 157);
  if (v20 >= v10) {
    int v20 = v10;
  }
  *((_DWORD *)this + 157) = v20;
  int v21 = *((_DWORD *)this + 158);
  if (v9 > v21) {
    int v21 = v9;
  }
  *((_DWORD *)this + 158) = v21;
  int v22 = *((_DWORD *)this + 159);
  if (v10 > v22) {
    int v22 = v10;
  }
  *((_DWORD *)this + 159) = v22;
LABEL_24:

  SKCNode::setDirty(this);
}

uint64_t *SKCTileMapNode::_ensureChunkForTileIndex(SKCTileMapNode *this, unsigned int a2)
{
  id v4 = *((id *)this + 1);
  unsigned int v5 = ((unsigned __int16)(a2 % *((_DWORD *)this + 151)) / *((unsigned __int8 *)this + 612)) | (~((unsigned __int16)(a2 / *((_DWORD *)this + 151)) / *((unsigned __int8 *)this + 613)) << 16);
  unsigned int v10 = v5;
  uint64_t v6 = (uint64_t *)*((void *)this + 81);
  if (!v6) {
LABEL_6:
  }
    operator new();
  while (1)
  {
    unsigned int v7 = *((_DWORD *)v6 + 8);
    if (v5 >= v7) {
      break;
    }
LABEL_5:
    uint64_t v6 = (uint64_t *)*v6;
    if (!v6) {
      goto LABEL_6;
    }
  }
  if (v7 < v5)
  {
    ++v6;
    goto LABEL_5;
  }
  unint64_t v11 = &v10;
  int v8 = std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 80, &v10, (uint64_t)&std::piecewise_construct, &v11)[5];

  return v8;
}

void sub_20ADFE244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCTileMapNode::_cacheTileIfAnimated(uint64_t a1, uint64_t a2, unsigned __int16 a3, int a4)
{
  if (a2)
  {
    unsigned __int16 v20 = a3;
    if (a3 != 0xFFFF)
    {
      id v8 = *(id *)(a1 + 8);
      int v9 = [v8 tileSet];
      unsigned int v10 = [v9 tileDefinitions];
      unint64_t v11 = [v10 count];
      uint64_t v12 = a3;

      if (v11 > a3)
      {
        int v13 = [v8 tileSet];
        int v14 = [v13 tileDefinitions];
        int v15 = [v14 objectAtIndexedSubscript:v12];

        uint64_t v16 = [v15 textures];
        unint64_t v17 = [v16 count];

        if (v17 >= 2)
        {
          unsigned int v18 = (void *)(a2 + 152);
          if (!std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::find<unsigned short>(v18, &v20))
          {
            int v21 = &v20;
            *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)v18, &v20, (uint64_t)&std::piecewise_construct, &v21)+ 5) = 0;
            ++*(_DWORD *)(a1 + 620);
          }
          int v21 = &v20;
          int v19 = std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)v18, &v20, (uint64_t)&std::piecewise_construct, &v21);
          *((_DWORD *)v19 + 5) += a4;
          int v21 = &v20;
          if (*((int *)std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>((uint64_t)v18, &v20, (uint64_t)&std::piecewise_construct, &v21)+ 5) <= 0)
          {
            std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::__erase_unique<unsigned short>(v18, &v20);
            --*(_DWORD *)(a1 + 620);
          }
          SKCNode::recomputeFlags((SKCNode *)a1, 1);
        }
      }
    }
  }
}

void sub_20ADFE438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCTileMapNode::setAllTiles(SKCTileMapNode *this, unsigned int a2)
{
  int v3 = *((_DWORD *)this + 152) * *((_DWORD *)this + 151);
  if (v3)
  {
    for (unsigned int i = 0; i != v3; ++i)
      SKCTileMapNode::setTile(this, i, a2);
  }

  SKCNode::setDirty(this);
}

_DWORD *SKCTileMapNode::getRawTilesCopy(SKCTileMapNode *this)
{
  uint64_t v1 = (*((_DWORD *)this + 152) * *((_DWORD *)this + 151));
  if (!v1) {
    return 0;
  }
  int v3 = malloc_type_malloc(4 * (*((_DWORD *)this + 152) * *((_DWORD *)this + 151)), 0x100004052888210uLL);
  for (uint64_t i = 0; i != v1; ++i)
    v3[i] = SKCTileMapNode::getRawTile(this, i);
  return v3;
}

uint64_t SKCTileMapNode::getRawTile(SKCTileMapNode *this, unsigned int a2)
{
  unsigned int v2 = *((_DWORD *)this + 151);
  int v3 = a2 / v2;
  unsigned int v4 = a2 % v2;
  unsigned int v5 = *((unsigned __int8 *)this + 612);
  unsigned int v6 = *((unsigned __int8 *)this + 613);
  unsigned int v7 = ((unsigned __int16)v4 / v5) | (~((unsigned __int16)v3 / v6) << 16);
  unsigned int v13 = v7;
  id v8 = (uint64_t *)*((void *)this + 81);
  if (!v8) {
    return 0x7FFFFFFFLL;
  }
  unsigned int v10 = (uint64_t **)((char *)this + 640);
  while (1)
  {
    unsigned int v11 = *((_DWORD *)v8 + 8);
    if (v7 >= v11) {
      break;
    }
LABEL_6:
    id v8 = (uint64_t *)*v8;
    if (!v8) {
      return 0x7FFFFFFFLL;
    }
  }
  if (v11 < v7)
  {
    ++v8;
    goto LABEL_6;
  }
  int v14 = &v13;
  return *(_DWORD *)(std::__tree<std::__value_type<unsigned int,double>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,double>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,double>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v10, &v13, (uint64_t)&std::piecewise_construct, &v14)[5][24]+ 4 * (v4 % v5 + (unsigned __int16)(v3 % (int)v6) * *((unsigned __int8 *)this + 612))) & 0x7FFFFFFF;
}

SKCTileMapNode *SKCTileMapNode::copyRawTilesIntoArray(SKCTileMapNode *this, unsigned int *a2)
{
  if (a2)
  {
    unsigned int v2 = this;
    uint64_t v3 = (*((_DWORD *)this + 152) * *((_DWORD *)this + 151));
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        this = (SKCTileMapNode *)SKCTileMapNode::getRawTile(v2, i);
        a2[i] = this;
      }
    }
  }
  return this;
}

SKCTileMapNode *SKCTileMapNode::copyRawTilesIntoArray(SKCTileMapNode *this, unsigned int *a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  if (a2)
  {
    unsigned int v7 = a4;
    int v9 = this;
    unsigned int v10 = *((_DWORD *)this + 151);
    unsigned int v11 = *((_DWORD *)this + 152);
    BOOL v12 = v11 * v10 && v10 > a3;
    BOOL v13 = !v12 || a6 == 0;
    BOOL v14 = v13 || a5 == 0;
    if (!v14 && v11 >= a4)
    {
      int v17 = 0;
      do
      {
        if (v7 >= *((_DWORD *)v9 + 152)) {
          break;
        }
        int v18 = v17 * a5;
        int v19 = *((_DWORD *)v9 + 151) * v7;
        int v20 = a5;
        unsigned int v21 = a3;
        do
        {
          if (v21 >= *((_DWORD *)v9 + 151)) {
            break;
          }
          this = (SKCTileMapNode *)SKCTileMapNode::getRawTile(v9, v19 + v21);
          a2[v18++] = this;
          ++v21;
          --v20;
        }
        while (v20);
        ++v17;
        ++v7;
      }
      while (v17 != a6);
    }
  }
  return this;
}

void SKCTileMapNode::copyRawTilesFromArray(SKCTileMapNode *this, unsigned int *a2)
{
  if (a2)
  {
    uint64_t v3 = (*((_DWORD *)this + 152) * *((_DWORD *)this + 151));
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        SKCTileMapNode::setTile(this, i, a2[i]);
    }
  }
}

void SKCTileMapNode::copyRawTilesFromArray(SKCTileMapNode *this, unsigned int *a2, unsigned int a3, unsigned int a4, int a5, int a6)
{
  if (a2)
  {
    unsigned int v7 = a4;
    unsigned int v10 = *((_DWORD *)this + 151);
    unsigned int v11 = *((_DWORD *)this + 152);
    BOOL v12 = v11 * v10 && v10 > a3;
    BOOL v13 = !v12 || a6 == 0;
    BOOL v14 = v13 || a5 == 0;
    if (!v14 && v11 >= a4)
    {
      int v17 = 0;
      do
      {
        if (v7 >= *((_DWORD *)this + 152)) {
          break;
        }
        int v18 = *((_DWORD *)this + 151) * v7;
        int v19 = v17 * a5;
        int v20 = a5;
        unsigned int v21 = a3;
        do
        {
          if (v21 >= *((_DWORD *)this + 151)) {
            break;
          }
          int v22 = v19 + 1;
          SKCTileMapNode::setTile(this, v18 + v21++, a2[v19]);
          int v19 = v22;
          --v20;
        }
        while (v20);
        ++v17;
        ++v7;
      }
      while (v17 != a6);
    }
  }
}

uint64_t SKCTileMapNode::_chunkIDFromTileIndex(SKCTileMapNode *this, unsigned int a2)
{
  return ((unsigned __int16)(a2 % *((_DWORD *)this + 151)) / *((unsigned __int8 *)this + 612)) | (~((unsigned __int16)(a2 / *((_DWORD *)this + 151)) / *((unsigned __int8 *)this + 613)) << 16);
}

void SKCTileMapNode::setRawTiles(SKCTileMapNode *this, const unsigned int *a2, int a3, int a4)
{
  *((_DWORD *)this + 15SKCNode::setFlags(this, 66, 1) = a3;
  *((_DWORD *)this + 152) = a4;
  id v8 = (char *)this + 640;
  int v9 = (void *)*((void *)this + 80);
  unsigned int v10 = (_OWORD *)((char *)this + 648);
  if (v9 != (void *)((char *)this + 648))
  {
    do
    {
      free(*(void **)(v9[5] + 192));
      unsigned int v11 = (void *)v9[1];
      if (v11)
      {
        do
        {
          BOOL v12 = v11;
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          BOOL v12 = (void *)v9[2];
          BOOL v13 = *v12 == (void)v9;
          int v9 = v12;
        }
        while (!v13);
      }
      int v9 = v12;
    }
    while (v12 != (void *)v10);
  }
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)v8, *((void **)this + 81));
  *((void *)this + 80) = v10;
  *unsigned int v10 = 0u;
  if (a3 && a4)
  {
    if (a2)
    {
      uint64_t v14 = (a4 * a3);
      if (v14)
      {
        for (uint64_t i = 0; i != v14; ++i)
          SKCTileMapNode::setTile(this, i, a2[i]);
      }
    }
    else
    {
      SKCTileMapNode::setAllTiles(this, 0x7FFFFFFFu);
    }
  }

  SKCNode::setDirty(this);
}

uint64_t SKCTileMapNode::setTileSetType(uint64_t this, SKTileSetType a2)
{
  *(void *)(this + 592) = a2;
  return this;
}

void SKCTileMapNode::setChunkSize(SKCTileMapNode *this, int a2, int a3)
{
  char v3 = a3;
  char v4 = a2;
  if (*((unsigned __int8 *)this + 612) != a2 || *((unsigned __int8 *)this + 613) != a3)
  {
    RawTilesCopCGFloat y = SKCTileMapNode::getRawTilesCopy(this);
    *((unsigned char *)this + 612) = v4;
    *((unsigned char *)this + 613) = v3;
    SKCTileMapNode::setRawTiles(this, RawTilesCopy, *((_DWORD *)this + 151), *((_DWORD *)this + 152));
    if (RawTilesCopy)
    {
      free(RawTilesCopy);
    }
  }
}

void SKCTileMapNode::forceRedraw(SKCTileMapNode **this, int a2)
{
  SKCNode::setDirty((SKCNode *)this);
  char v4 = this[80];
  if (v4 != (SKCTileMapNode *)(this + 81))
  {
    if (a2) {
      char v5 = 3;
    }
    else {
      char v5 = 1;
    }
    do
    {
      *(unsigned char *)(*((void *)v4 + 5) + 4) |= v5;
      unsigned int v6 = (SKCTileMapNode *)*((void *)v4 + 1);
      if (v6)
      {
        do
        {
          unsigned int v7 = v6;
          unsigned int v6 = *(SKCTileMapNode **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unsigned int v7 = (SKCTileMapNode *)*((void *)v4 + 2);
          BOOL v8 = *(void *)v7 == (void)v4;
          char v4 = v7;
        }
        while (!v8);
      }
      char v4 = v7;
    }
    while (v7 != (SKCTileMapNode *)(this + 81));
  }
}

double SKCTileMapNode::clearModifiedTileTracking(SKCTileMapNode *this)
{
  double result = NAN;
  *((_OWORD *)this + 39) = xmmword_20AE9B310;
  return result;
}

void std::shared_ptr<jet_buffer>::shared_ptr[abi:ne180100]<jet_buffer,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20ADFEBF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_buffer>::shared_ptr[abi:ne180100]<jet_buffer,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_buffer *,std::shared_ptr<jet_buffer>::__shared_ptr_default_delete<jet_buffer,jet_buffer>,std::allocator<jet_buffer>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_buffer *,std::shared_ptr<jet_buffer>::__shared_ptr_default_delete<jet_buffer,jet_buffer>,std::allocator<jet_buffer>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_buffer *,std::shared_ptr<jet_buffer>::__shared_ptr_default_delete<jet_buffer,jet_buffer>,std::allocator<jet_buffer>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::vector<std::shared_ptr<jet_buffer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(16 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + SKCNode::setFlags(this, 66, 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + SKCNode::setFlags(this, 66, 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<jet_buffer>>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<jet_buffer>>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<jet_buffer>>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<jet_buffer>>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    char v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<jet_buffer>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<jet_buffer>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    char v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__deallocate_node(a1, *(id **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      char v3 = (id *)*v2;

      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::find<unsigned long long>(void *a1, unint64_t *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (v3 >= *(void *)&v2) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  uint64_t v6 = *(void **)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  uint64_t result = (void *)*v6;
  if (*v6)
  {
    do
    {
      unint64_t v8 = result[1];
      if (v3 == v8)
      {
        if (result[2] == v3) {
          return result;
        }
      }
      else
      {
        if (v4.u32[0] > 1uLL)
        {
          if (v8 >= *(void *)&v2) {
            v8 %= *(void *)&v2;
          }
        }
        else
        {
          v8 &= *(void *)&v2 - 1;
        }
        if (v8 != v5) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = (void *)*i)
      {
        unint64_t v12 = i[1];
        if (v12 == v7)
        {
          if (i[2] == v7) {
            return i;
          }
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8) {
              v12 %= v8;
            }
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4) {
            break;
          }
        }
      }
    }
  }
  char v13 = (void *)(a1 + 16);
  uint64_t i = operator new(0x30uLL);
  *uint64_t i = 0;
  i[1] = v7;
  uint64_t v14 = **a4;
  i[4] = 0;
  i[5] = 0;
  i[2] = v14;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    BOOL v17 = 1;
    if (v8 >= 3) {
      BOOL v17 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v8);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v20);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v21 = *(void *)a1;
  int v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *int v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v13;
  void *v13 = i;
  *(void *)(v21 + 8 * v4) = v13;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8) {
        v23 %= v8;
      }
    }
    else
    {
      v23 &= v8 - 1;
    }
    int v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20ADFF28C(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      unsigned int v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            *unsigned int v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            unsigned int v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          unsigned int v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t **std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::find<unsigned short>(void *a1, unsigned __int16 *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ****)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (uint64_t result = *v6; result; uint64_t result = (uint64_t **)*result)
  {
    unint64_t v8 = (unint64_t)result[1];
    if (v8 == v3)
    {
      if (*((unsigned __int16 *)result + 8) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      unsigned int v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((unsigned __int16 *)v11 + 8) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          unsigned int v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  unsigned int v11 = operator new(0x18uLL);
  *unsigned int v11 = 0;
  v11[1] = v7;
  *((_WORD *)v11 + 8) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  size_t v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *unsigned int v11 = *v20;
LABEL_38:
    *size_t v20 = v11;
    goto LABEL_39;
  }
  *unsigned int v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    size_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_20ADFF81C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::__erase_unique<unsigned short>(void *a1, unsigned __int16 *a2)
{
  uint64_t result = (uint64_t *)std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::find<unsigned short>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = __p;
  std::string __p = 0;
  if (v3) {
    operator delete(v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v1SKCNode::setFlags(this, 66, 1) = v7;
      uint64_t v10 = *a2;
    }
  }
  *unint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

double sk_vector_min(float32x4_t *a1, float32x4_t *a2)
{
  *(void *)&double result = vminnmq_f32(*a1, *a2).u64[0];
  return result;
}

double sk_vector_max(float32x4_t *a1, float32x4_t *a2)
{
  *(void *)&double result = vmaxnmq_f32(*a1, *a2).u64[0];
  return result;
}

double SKCBoundingBoxMake(float32x4_t a1)
{
  *(float *)&unsigned int v1 = vmuls_lane_f32(0.5, a1, 2);
  float v2 = vmuls_lane_f32(0.5, a1, 3);
  a1.i64[1] = 0x3F80000000000000;
  LODWORD(v3) = 0;
  *((float *)&v3 + SKCNode::setFlags(this, 66, 1) = v2;
  a1.i64[0] = vaddq_f32(a1, vaddq_f32((float32x4_t)v1, (float32x4_t)v3)).u64[0];
  return *(double *)a1.i64;
}

BOOL SKCBoundingBoxEquals(const simd_float4x4 *a1, const simd_float4x4 *a2)
{
  float32x4_t v2 = (float32x4_t)a1->columns[1];
  int8x16_t v3 = (int8x16_t)vmulq_f32(v2, v2);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)))) <= 0.0
    || (int8x16_t v4 = (int8x16_t)vmulq_f32((float32x4_t)a1->columns[2], (float32x4_t)a1->columns[2]),
        sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)))) <= 0.0))
  {
    int8x16_t v5 = (int8x16_t)vmulq_f32((float32x4_t)a2->columns[1], (float32x4_t)a2->columns[1]);
    if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)))) <= 0.0) {
      return 1;
    }
    int8x16_t v6 = (int8x16_t)vmulq_f32((float32x4_t)a2->columns[2], (float32x4_t)a2->columns[2]);
    if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)))) <= 0.0) {
      return 1;
    }
  }
  float32x4_t v7 = vsubq_f32((float32x4_t)a1->columns[0], (float32x4_t)a2->columns[0]);
  int8x16_t v8 = (int8x16_t)vmulq_f32(v7, v7);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)))) > 0.0) {
    return 0;
  }
  float32x4_t v9 = vsubq_f32(v2, (float32x4_t)a2->columns[1]);
  int8x16_t v10 = (int8x16_t)vmulq_f32(v9, v9);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)))) > 0.0) {
    return 0;
  }
  float32x4_t v12 = vsubq_f32((float32x4_t)a1->columns[2], (float32x4_t)a2->columns[2]);
  int8x16_t v13 = (int8x16_t)vmulq_f32(v12, v12);
  return sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)))) <= 0.0;
}

BOOL SKCBoundingBoxIsEmpty(const simd_float4x4 *a1)
{
  int8x16_t v1 = (int8x16_t)vmulq_f32((float32x4_t)a1->columns[1], (float32x4_t)a1->columns[1]);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)))) <= 0.0) {
    return 1;
  }
  int8x16_t v2 = (int8x16_t)vmulq_f32((float32x4_t)a1->columns[2], (float32x4_t)a1->columns[2]);
  return sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)))) <= 0.0;
}

float32x4_t SKCBoundingBoxUnion(const simd_float4x4 *a1, const simd_float4x4 *a2)
{
  float32x4_t v2 = (float32x4_t)a1->columns[1];
  int8x16_t v3 = (int8x16_t)vmulq_f32(v2, v2);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL)))) <= 0.0) {
    return (float32x4_t)a2->columns[0];
  }
  float32x4_t v4 = (float32x4_t)a1->columns[2];
  int8x16_t v5 = (int8x16_t)vmulq_f32(v4, v4);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)))) <= 0.0)
  {
    return (float32x4_t)a2->columns[0];
  }
  else
  {
    float32x4_t v6 = (float32x4_t)a2->columns[1];
    int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
    if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) <= 0.0) {
      return (float32x4_t)a1->columns[0];
    }
    float32x4_t v8 = (float32x4_t)a2->columns[2];
    int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
    if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) <= 0.0)
    {
      return (float32x4_t)a1->columns[0];
    }
    else
    {
      uint64_t v10 = 0;
      float32x4_t v11 = vsubq_f32((float32x4_t)a1->columns[0], v2);
      float32x4_t v12 = vaddq_f32(v2, (float32x4_t)a1->columns[0]);
      v24[0] = vsubq_f32(v11, v4);
      v24[1] = vsubq_f32(v12, v4);
      v24[2] = vaddq_f32(v12, v4);
      v24[3] = vaddq_f32(v11, v4);
      float32x4_t result = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
      v14.i64[0] = 0x80000000800000;
      v14.i64[1] = 0x80000000800000;
      do
      {
        float32x4_t v15 = (float32x4_t)v24[v10];
        float32x4_t result = vminnmq_f32(v15, result);
        float32x4_t v14 = vmaxnmq_f32(v15, v14);
        ++v10;
      }
      while (v10 != 4);
      uint64_t v16 = 0;
      float32x4_t v17 = vsubq_f32((float32x4_t)a2->columns[0], v6);
      float32x4_t v18 = vaddq_f32(v6, (float32x4_t)a2->columns[0]);
      v23[0] = vsubq_f32(v17, v8);
      v23[1] = vsubq_f32(v18, v8);
      v23[2] = vaddq_f32(v18, v8);
      v23[3] = vaddq_f32(v17, v8);
      do
      {
        float32x4_t v19 = (float32x4_t)v23[v16];
        float32x4_t result = vminnmq_f32(v19, result);
        float32x4_t v14 = vmaxnmq_f32(v19, v14);
        ++v16;
      }
      while (v16 != 4);
      float32x2_t v20 = (float32x2_t)vsubq_f32(v14, result).u64[0];
      result.i64[1] = 0x3F80000000000000;
      LODWORD(v2SKCNode::setFlags(this, 66, 1) = 0;
      HIDWORD(v2SKCNode::setFlags(this, 66, 1) = vmuls_lane_f32(0.5, v20, 1);
      result.i64[0] = vaddq_f32(result, vaddq_f32((float32x4_t)COERCE_UNSIGNED_INT(0.5 * v20.f32[0]), (float32x4_t)v21)).u64[0];
    }
  }
  return result;
}

double SKCBoundingBoxGetVerts(const simd_float4x4 *a1)
{
  *(void *)&double result = vsubq_f32(vsubq_f32((float32x4_t)a1->columns[0], (float32x4_t)a1->columns[1]), (float32x4_t)a1->columns[2]).u64[0];
  return result;
}

double SKCBoundingBoxIntersection(const simd_float4x4 *a1, const simd_float4x4 *a2)
{
  float32x4_t v2 = (float32x4_t)a1->columns[1];
  int8x16_t v3 = (int8x16_t)vmulq_f32(v2, v2);
  float v4 = sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL))));
  double result = 0.0;
  if (v4 > 0.0)
  {
    float32x4_t v6 = (float32x4_t)a1->columns[2];
    int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
    if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)))) > 0.0)
    {
      float32x4_t v8 = (float32x4_t)a2->columns[1];
      int8x16_t v9 = (int8x16_t)vmulq_f32(v8, v8);
      if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)))) > 0.0)
      {
        float32x4_t v10 = (float32x4_t)a2->columns[2];
        int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10);
        if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)))) > 0.0)
        {
          uint64_t v12 = 0;
          float32x4_t v13 = vsubq_f32((float32x4_t)a1->columns[0], v2);
          float32x4_t v14 = vaddq_f32(v2, (float32x4_t)a1->columns[0]);
          v28[0] = vsubq_f32(v13, v6);
          v28[1] = vsubq_f32(v14, v6);
          v28[2] = vaddq_f32(v14, v6);
          v28[3] = vaddq_f32(v13, v6);
          float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          v16.i64[0] = 0x80000000800000;
          v16.i64[1] = 0x80000000800000;
          do
          {
            float32x4_t v17 = (float32x4_t)v28[v12];
            float32x4_t v15 = vminnmq_f32(v17, v15);
            float32x4_t v16 = vmaxnmq_f32(v17, v16);
            ++v12;
          }
          while (v12 != 4);
          uint64_t v18 = 0;
          float32x4_t v19 = vsubq_f32((float32x4_t)a2->columns[0], v8);
          float32x4_t v20 = vaddq_f32(v8, (float32x4_t)a2->columns[0]);
          v27[0] = vsubq_f32(v19, v10);
          v27[1] = vsubq_f32(v20, v10);
          v27[2] = vaddq_f32(v20, v10);
          v27[3] = vaddq_f32(v19, v10);
          float32x4_t v21 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          v22.i64[0] = 0x80000000800000;
          v22.i64[1] = 0x80000000800000;
          do
          {
            float32x4_t v23 = (float32x4_t)v27[v18];
            float32x4_t v21 = vminnmq_f32(v23, v21);
            float32x4_t v22 = vmaxnmq_f32(v23, v22);
            ++v18;
          }
          while (v18 != 4);
          float32x4_t v24 = vmaxnmq_f32(v15, v21);
          float32x2_t v25 = (float32x2_t)vsubq_f32(vminnmq_f32(v16, v22), v24).u64[0];
          v24.i64[1] = 0x3F80000000000000;
          LODWORD(v26) = 0;
          HIDWORD(v26) = vmuls_lane_f32(0.5, v25, 1);
          *(void *)&double result = vaddq_f32(v24, vaddq_f32((float32x4_t)COERCE_UNSIGNED_INT(0.5 * v25.f32[0]), (float32x4_t)v26)).u64[0];
        }
      }
    }
  }
  return result;
}

float32x4_t SKCBoundingBoxGetAABB(const simd_float4x4 *a1)
{
  uint64_t v1 = 0;
  float32x4_t v2 = (float32x4_t)a1->columns[1];
  float32x4_t v3 = vsubq_f32((float32x4_t)a1->columns[0], v2);
  float32x4_t v4 = (float32x4_t)a1->columns[2];
  v8[2] = vaddq_f32(vaddq_f32((float32x4_t)a1->columns[0], v2), v4);
  v8[3] = vaddq_f32(v3, v4);
  float32x4_t result = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v6.i64[0] = 0x80000000800000;
  v6.i64[1] = 0x80000000800000;
  do
  {
    float32x4_t v7 = (float32x4_t)v8[v1];
    float32x4_t result = vminnmq_f32(v7, result);
    float32x4_t v6 = vmaxnmq_f32(v7, v6);
    ++v1;
  }
  while (v1 != 4);
  return result;
}

BOOL SKCBoundingBoxIntersectsPoint(float32x4_t *a1, double a2)
{
  uint64_t v2 = 0;
  float32x4_t v3 = a1[1];
  float32x4_t v4 = vsubq_f32(*a1, v3);
  float32x4_t v5 = a1[2];
  v13[2] = vaddq_f32(vaddq_f32(*a1, v3), v5);
  v13[3] = vaddq_f32(v4, v5);
  float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  v7.i64[0] = 0x80000000800000;
  v7.i64[1] = 0x80000000800000;
  do
  {
    float32x4_t v8 = (float32x4_t)v13[v2];
    float32x4_t v6 = vminnmq_f32(v8, v6);
    float32x4_t v7 = vmaxnmq_f32(v8, v7);
    ++v2;
  }
  while (v2 != 4);
  return *(float *)&a2 >= v6.f32[0]
      && *(float *)&a2 <= v7.f32[0]
      && *((float *)&a2 + 1) >= v6.f32[1]
      && *((float *)&a2 + 1) <= v7.f32[1];
}

BOOL SKCBoundingBoxIntersectsBoundingBox(const simd_float4x4 *a1, const simd_float4x4 *a2)
{
  uint64_t v87 = *MEMORY[0x263EF8340];
  float32x4_t v2 = (float32x4_t)a1->columns[1];
  int8x16_t v3 = (int8x16_t)vmulq_f32(v2, v2);
  float32x2_t v4 = vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL));
  float v5 = sqrtf(vaddv_f32(v4));
  if (v5 > 0.0)
  {
    float32x4_t v6 = (float32x4_t)a1->columns[2];
    int8x16_t v7 = (int8x16_t)vmulq_f32(v6, v6);
    float32x2_t v8 = vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
    float v9 = sqrtf(vaddv_f32(v8));
    if (v9 > 0.0)
    {
      float32x4_t v10 = (float32x4_t)a2->columns[1];
      int8x16_t v11 = (int8x16_t)vmulq_f32(v10, v10);
      float32x2_t v12 = vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL));
      float v13 = sqrtf(vaddv_f32(v12));
      if (v13 > 0.0)
      {
        float32x4_t v14 = (float32x4_t)a2->columns[2];
        int8x16_t v15 = (int8x16_t)vmulq_f32(v14, v14);
        float32x2_t v16 = vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
        float v17 = sqrtf(vaddv_f32(v16));
        if (v17 > 0.0)
        {
          uint64_t v18 = 0;
          unsigned __int32 v19 = vadd_f32(v4, (float32x2_t)vdup_lane_s32((int32x2_t)v4, 1)).u32[0];
          unsigned __int32 v20 = vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1)).u32[0];
          float32x2_t v21 = vrsqrte_f32((float32x2_t)v19);
          float32x2_t v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v19, vmul_f32(v21, v21)));
          float32x4_t v23 = vmulq_n_f32(v2, vmul_f32(v22, vrsqrts_f32((float32x2_t)v19, vmul_f32(v22, v22))).f32[0]);
          float32x2_t v24 = vrsqrte_f32((float32x2_t)v20);
          float32x2_t v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v20, vmul_f32(v24, v24)));
          float32x4_t v26 = vmulq_n_f32(v6, vmul_f32(v25, vrsqrts_f32((float32x2_t)v20, vmul_f32(v25, v25))).f32[0]);
          v86[0] = v23;
          v86[1] = v26;
          unsigned __int32 v27 = vadd_f32(v12, (float32x2_t)vdup_lane_s32((int32x2_t)v12, 1)).u32[0];
          float32x2_t v28 = vrsqrte_f32((float32x2_t)v27);
          float32x2_t v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27, vmul_f32(v28, v28)));
          float32x4_t v30 = vmulq_n_f32(v10, vmul_f32(v29, vrsqrts_f32((float32x2_t)v27, vmul_f32(v29, v29))).f32[0]);
          unsigned __int32 v31 = vadd_f32(v16, (float32x2_t)vdup_lane_s32((int32x2_t)v16, 1)).u32[0];
          float32x2_t v32 = vrsqrte_f32((float32x2_t)v31);
          float32x2_t v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v31, vmul_f32(v32, v32)));
          v85[0] = v30;
          v85[1] = vmulq_n_f32(v14, vmul_f32(v33, vrsqrts_f32((float32x2_t)v31, vmul_f32(v33, v33))).f32[0]);
          char v34 = 1;
          do
          {
            uint64_t v35 = 0;
            char v36 = v34;
            float32x4_t v37 = (float32x4_t)v86[v18];
            uint64_t v38 = v84[v18];
            char v39 = 1;
            do
            {
              char v40 = v39;
              int8x16_t v41 = (int8x16_t)vmulq_f32(v37, (float32x4_t)v85[v35]);
              uint64_t v82 = v38;
              *(float *)((unint64_t)&v82 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v35 & 1))) = vaddv_f32(vadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)));
              uint64_t v38 = v82;
              uint64_t v35 = 1;
              char v39 = 0;
            }
            while ((v40 & 1) != 0);
            char v34 = 0;
            v84[v18] = v82;
            uint64_t v18 = 1;
          }
          while ((v36 & 1) != 0);
          uint64_t v42 = 0;
          *((void *)&v44 + SKCNode::setFlags(this, 66, 1) = 0;
          *((void *)&v43 + SKCNode::setFlags(this, 66, 1) = 0;
          *(float *)&long long v43 = v5;
          *(float *)&long long v44 = v13;
          float32x4_t v45 = vsubq_f32((float32x4_t)a2->columns[0], (float32x4_t)a1->columns[0]);
          int8x16_t v46 = (int8x16_t)vmulq_f32(v23, v45);
          int8x16_t v47 = vextq_s8(v46, v46, 8uLL);
          *(float32x2_t *)v46.i8 = vadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v47.i8);
          v47.i32[0] = vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1)).u32[0];
          float v48 = vaddv_f32(*(float32x2_t *)v46.i8);
          int8x16_t v49 = (int8x16_t)vmulq_f32(v26, v45);
          float32x2_t v50 = vadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL));
          char v51 = 1;
          do
          {
            char v52 = 0;
            char v53 = v51;
            uint64_t v54 = v84[v42];
            uint64_t v55 = v83[v42];
            char v56 = 1;
            do
            {
              char v57 = v56;
              uint64_t v80 = v54;
              float v58 = fabsf(*(float *)((unint64_t)&v80 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v52 & 1))));
              uint64_t v81 = v55;
              *(float *)((unint64_t)&v81 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v52 & 1))) = v58 + 0.00001;
              char v52 = 1;
              uint64_t v55 = v81;
              char v56 = 0;
            }
            while ((v57 & 1) != 0);
            char v51 = 0;
            v83[v42] = v81;
            uint64_t v42 = 1;
          }
          while ((v53 & 1) != 0);
          uint64_t v59 = 0;
          *((float *)&v43 + SKCNode::setFlags(this, 66, 1) = v9;
          *((float *)&v44 + SKCNode::setFlags(this, 66, 1) = v17;
          float v60 = vaddv_f32(v50);
          v47.i32[1] = vadd_f32(v50, (float32x2_t)vdup_lane_s32((int32x2_t)v50, 1)).u32[0];
          char v61 = 1;
          while (1)
          {
            char v62 = v61;
            long long v78 = v43;
            float v63 = *(float *)((unint64_t)&v78 & 0xFFFFFFFFFFFFFFF3 | (4 * (v59 & 3)));
            float v64 = vmlas_n_f32(vmuls_lane_f32(v17, (float32x2_t)v83[v59], 1), v13, COERCE_FLOAT(v83[v59]));
            int8x16_t v79 = v47;
            if (fabsf(*(float *)((unint64_t)&v79 & 0xFFFFFFFFFFFFFFF3 | (4 * (v59 & 3)))) > (float)(v63 + v64)) {
              break;
            }
            char v61 = 0;
            uint64_t v59 = 1;
            if ((v62 & 1) == 0)
            {
              char v65 = 0;
              do
              {
                uint64_t v77 = v83[0];
                float v66 = *(float *)((unint64_t)&v77 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v65 & 1)));
                uint64_t v76 = v83[1];
                float v67 = (float)(v9 * *(float *)((unint64_t)&v76 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v65 & 1))))
                    + (float)(v5 * v66);
                long long v75 = v44;
                float v68 = *(float *)((unint64_t)&v75 & 0xFFFFFFFFFFFFFFF3 | (4 * (v65 & 3)));
                uint64_t v74 = v84[0];
                float v69 = *(float *)((unint64_t)&v74 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v65 & 1)));
                uint64_t v73 = v84[1];
                float v70 = fabsf((float)(v60 * *(float *)((unint64_t)&v73 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v65 & 1))))+ (float)(v48 * v69));
                float v71 = v68 + v67;
                BOOL result = v70 <= v71;
                if (v65) {
                  break;
                }
                char v65 = 1;
              }
              while (v70 <= v71);
              return result;
            }
          }
        }
      }
    }
  }
  return 0;
}

void sub_20AE00454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE0050C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE00610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE007D4(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x10A1C40E68DE135);

  _Unwind_Resume(a1);
}

void sub_20AE00A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE00BD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE00CE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE00DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE00EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE00FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCRepeat::~SKCRepeat(SKCRepeat *this)
{
  SKCRepeat::~SKCRepeat(this);

  JUMPOUT(0x21052EA30);
}

{
  SKCAction *var19;
  int v3;
  uint64_t vars8;

  this->var0 = (void **)&unk_26BEED450;
  var19 = this->var19;
  if (var19)
  {
    int8x16_t v3 = var19->var1 - 1;
    var19->var1 = v3;
    if (!v3) {
      (*((void (**)(SKCAction *))var19->var0 + 1))(var19);
    }
  }
  this->var19 = 0;

  SKCAction::~SKCAction((SKCAction *)this);
}

SKCAction *SKCRepeat::setBaseSpeed(SKCRepeat *this, float a2)
{
  SKCAction::setBaseSpeed((SKCAction *)this, a2);
  BOOL result = this->var19;
  if (result)
  {
    v3.n128_f32[0] = this->var17 * this->var16;
    float v5 = (uint64_t (*)(__n128))*((void *)result->var0 + 5);
    return (SKCAction *)v5(v3);
  }
  return result;
}

SKCAction *SKCRepeat::setSpeed(SKCRepeat *this, float a2)
{
  SKCAction::setSpeed((SKCAction *)this, a2);
  BOOL result = this->var19;
  if (result)
  {
    v3.n128_f32[0] = this->var17 * this->var16;
    float v5 = (uint64_t (*)(__n128))*((void *)result->var0 + 5);
    return (SKCAction *)v5(v3);
  }
  return result;
}

SKCAction *SKCRepeat::cpp_updateWithTargetForTime(SKCRepeat *this, SKCNode *a2, double a3)
{
  var19 = this->var19;
  if (!var19->var5) {
    goto LABEL_3;
  }
  for (BOOL result = (SKCAction *)(*((uint64_t (**)(SKCAction *, SKCNode *, double))var19->var0 + 7))(var19, a2, a3); ; BOOL result = (SKCAction *)SKCAction::updateWithTargetForTime(var19, a2, a3))
  {
    float32x2_t v8 = this->var19;
    if (!v8->var5) {
      break;
    }
    if (!v8->var11) {
      goto LABEL_12;
    }
LABEL_6:
    unint64_t var21 = this->var21;
    unint64_t v10 = this->var20 + 1;
    this->var20 = v10;
    if (v10 >= var21 && !this->var22) {
      goto LABEL_13;
    }
    int8x16_t v11 = this->var19;
    v11->var11 = 0;
    double v12 = (*((double (**)(SKCAction *))v11->var0 + 2))(v11);
    if (v12 >= a3) {
      double v12 = a3;
    }
    SKCAction::willStartWithTargetAtTime(this->var19, a2, v12);
    var19 = this->var19;
LABEL_3:
    ;
  }
  BOOL result = (SKCAction *)[v8->var4 finished];
  if (result) {
    goto LABEL_6;
  }
LABEL_12:
  if (this->var22) {
    return result;
  }
LABEL_13:
  if (this->var20 >= this->var21)
  {
    (*((void (**)(SKCAction *))this->var19->var0 + 2))(this->var19);
    return SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, v13);
  }
  return result;
}

uint64_t SKCRepeat::cpp_wasAddedToTargetAtTime(SKCRepeat *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_wasAddedToTargetAtTime((SKCAction *)this, a2, a3);
  var19 = this->var19;

  return SKCAction::wasAddedToTargetAtTime(var19, a2, a3);
}

uint64_t SKCRepeat::cpp_wasRemovedFromTargetAtTime(SKCRepeat *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_wasRemovedFromTargetAtTime((SKCAction *)this, a2, a3);
  var19 = this->var19;

  return SKCAction::wasRemovedFromTargetAtTime(var19, a2, a3);
}

uint64_t SKCRepeat::cpp_willStartWithTargetAtTime(SKCRepeat *this, SKCNode *a2, double a3)
{
  this->var20 = 0;
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  var19 = this->var19;

  return SKCAction::willStartWithTargetAtTime(var19, a2, a3);
}

uint64_t SKCRepeat::cpp_wasPausedWithTargetAtTime(SKCRepeat *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_wasPausedWithTargetAtTime((SKCAction *)this, a2, a3);
  var19 = this->var19;

  return SKCAction::wasPausedWithTargetAtTime(var19, a2, a3);
}

uint64_t SKCRepeat::cpp_willResumeWithTargetAtTime(SKCRepeat *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_willResumeWithTargetAtTime((SKCAction *)this, a2, a3);
  var19 = this->var19;

  return SKCAction::willResumeWithTargetAtTime(var19, a2, a3);
}

void sub_20AE0155C(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C40983EBE18);

  _Unwind_Resume(a1);
}

void sub_20AE017F0(_Unwind_Exception *a1)
{
  float32x2_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE01A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE01ADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE01B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCSpeed::SKCSpeed(SKCSpeed *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v3 = &unk_26BEED4E8;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(void *)(v3 + 56) = *(void *)&a2->var8;
  *(void *)(v3 + 88) = a2->var14;
  *(unsigned char *)(v3 + 32) = 1;
}

void SKCSpeed::~SKCSpeed(SKCSpeed *this)
{
  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

void SKCSpeed::cpp_updateWithTargetForTime(SKCSpeed *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  if (this->var25)
  {
    float v7 = (float)(this->var23 * v6.n128_f32[0]) + 1.0;
    *((float *)a2 + 42) = (float)(*((float *)a2 + 42) * v7) / this->var22;
    this->var22 = v7;
  }
  else if (!this->var24)
  {
    *((float *)a2 + 42) = (float)(v6.n128_f32[0] * this->var19) + (float)(this->var23 * (float)(1.0 - v6.n128_f32[0]));
  }
  LODWORD(this->var2SKCNode::setFlags(this, 66, 1) = v6.n128_u32[0];
  if ((COERCE_UNSIGNED_INT(v6.n128_f32[0] + -1.0) & 0x60000000) == 0)
  {
    v6.n128_f64[0] = a3;
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, v6);
  }
}

SKCAction *SKCSpeed::cpp_willStartWithTargetAtTime(SKCSpeed *this, SKCNode *a2, double a3)
{
  BOOL result = SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  this->unint64_t var21 = 0.0;
  if (this->var25)
  {
    this->var22 = 1.0;
    float v6 = this->var19 + -1.0;
  }
  else
  {
    float v6 = *((float *)a2 + 42);
  }
  this->var23 = v6;
  return result;
}

void sub_20AE01E90(_Unwind_Exception *a1)
{
}

void sub_20AE01EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE01F68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE0207C(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C40DA192CF8);

  _Unwind_Resume(a1);
}

void sub_20AE024C0(_Unwind_Exception *a1)
{
  float32x2_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE02838(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE028FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE0297C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE02A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE02A90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE02B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE02BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE02C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE02CC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE02D64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE02ED8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCRotate::SKCRotate(SKCRotate *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v3 = &unk_26BEED580;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(void *)(v3 + 56) = *(void *)&a2->var8;
  *(void *)(v3 + 88) = a2->var14;
  *(unsigned char *)(v3 + 32) = 1;
}

void SKCRotate::~SKCRotate(SKCRotate *this)
{
  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

void SKCRotate::cpp_updateWithTargetForTime(SKCRotate *this, __n128 *a2, double a3)
{
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  float v7 = v6;
  __n128 Rotation = SKCNode::getRotation(a2);
  if (this->var30)
  {
    if (this->var32)
    {
      float var25 = this->var25;
      Rotation.n128_f32[0] = -(float)(var25 - (float)(v7 * this->var22));
      this->float var25 = var25 - (float)(var25 - (float)(v7 * this->var22));
    }
    if (this->var33)
    {
      float var26 = this->var26;
      Rotation.n128_f32[1] = Rotation.n128_f32[1] - (float)(var26 - (float)(v7 * this->var23));
      this->float var26 = var26 - (float)(var26 - (float)(v7 * this->var23));
    }
    if (this->var34)
    {
      float var27 = this->var27;
      Rotation.n128_f32[2] = Rotation.n128_f32[2] - (float)(var27 - (float)(v7 * this->var24));
      this->float var27 = var27 - (float)(var27 - (float)(v7 * this->var24));
    }
  }
  else if (!this->var29)
  {
    if (this->var32) {
      Rotation.n128_f32[0] = (float)(v7 * this->var19) + (float)(this->var22 * (float)(1.0 - v7));
    }
    if (this->var33) {
      Rotation.n128_f32[1] = (float)(v7 * this->var20) + (float)(this->var23 * (float)(1.0 - v7));
    }
    if (this->var34) {
      Rotation.n128_f32[2] = (float)(v7 * this->var21) + (float)(this->var24 * (float)(1.0 - v7));
    }
  }
  SKCNode::setRotation((SKCNode *)a2, Rotation);
  this->var28 = v7;
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
  {
    v12.n128_f64[0] = a3;
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, v12);
  }
}

void SKCRotate::cpp_willStartWithTargetAtTime(SKCRotate *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  if (a2
  {
    NSLog(&cfstr_SksceneAnimati_0.isa);
  }
  *(void *)&this->float var25 = 0;
  this->float var27 = 0.0;
  if (this->var30)
  {
    *(void *)&this->var22 = *(void *)&this->var19;
    float var21 = this->var21;
  }
  else if (this->var31)
  {
    float var19 = this->var19;
    float v7 = SKCNode::getRotation((__n128 *)a2).n128_f32[0];
    float v8 = (float)(var19 - v7) + (float)((float)(floorf((float)(var19 - v7) / 6.2832) * -2.0) * 3.1416);
    if (v8 >= 3.14159265)
    {
      float v9 = v8 + -6.28318531;
      float v8 = v9;
    }
    float var20 = this->var20;
    this->var22 = this->var19 - v8;
    __n128 Rotation = SKCNode::getRotation((__n128 *)a2);
    float v12 = (float)(var20 - Rotation.n128_f32[1])
        + (float)((float)(floorf((float)(var20 - Rotation.n128_f32[1]) / 6.2832) * -2.0) * 3.1416);
    if (v12 >= 3.14159265)
    {
      float v13 = v12 + -6.28318531;
      float v12 = v13;
    }
    float v14 = this->var21;
    this->var23 = this->var20 - v12;
    __n128 v15 = SKCNode::getRotation((__n128 *)a2);
    float v16 = (float)(v14 - v15.n128_f32[2])
        + (float)((float)(floorf((float)(v14 - v15.n128_f32[2]) / 6.2832) * -2.0) * 3.1416);
    if (v16 >= 3.14159265)
    {
      float v17 = v16 + -6.28318531;
      float v16 = v17;
    }
    float var21 = this->var21 - v16;
  }
  else
  {
    *(void *)&this->var22 = SKCNode::getRotation((__n128 *)a2).n128_u64[0];
    LODWORD(var2SKCNode::setFlags(this, 66, 1) = SKCNode::getRotation((__n128 *)a2).n128_u32[2];
  }
  this->var24 = var21;
}

void sub_20AE0354C(_Unwind_Exception *a1)
{
  float32x2_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE03694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE03754(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE03814(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE0398C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE03A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE03B14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKCDataSlice::SKCDataSlice(uint64_t a1, long long *a2, int a3)
{
  *(void *)a1 = &unk_26BEED618;
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 12) = a3;
  *(void *)(a1 + 16) = 0;
  float32x2_t v4 = (std::string *)(a1 + 24);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    v4->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_WORD *)(a1 + 48) = 257;
  return a1;
}

void **SKCDataSlice::resize(void **this, int a2)
{
  if (*((_DWORD *)this + 2) != a2)
  {
    uint64_t v2 = this;
    *((_DWORD *)this + 2) = a2;
    this = (void **)malloc_type_realloc(this[2], (*((_DWORD *)this + 3) * a2), 0x440CB233uLL);
    v2[2] = this;
  }
  return this;
}

void SKCDataSlice::~SKCDataSlice(SKCDataSlice *this)
{
  *(void *)this = &unk_26BEED618;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    free(v2);
    *((void *)this + 2) = 0;
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
}

{
  uint64_t vars8;

  SKCDataSlice::~SKCDataSlice(this);

  JUMPOUT(0x21052EA30);
}

void sub_20AE03DFC(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C40E8145384);

  _Unwind_Resume(a1);
}

void sub_20AE0421C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE04580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE046AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE04768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE04824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE048D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE04970(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE04A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE04AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCScale::SKCScale(SKCScale *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v3 = &unk_26BEED648;
  *(unsigned char *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(void *)(v3 + 56) = *(void *)&a2->var8;
  *(void *)(v3 + 88) = a2->var14;
  *(unsigned char *)(v3 + 32) = 1;
}

void SKCScale::~SKCScale(SKCScale *this)
{
  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

void SKCScale::cpp_updateWithTargetForTime(SKCScale *this, __n128 *a2, double a3)
{
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  float v7 = v6;
  LODWORD(v19) = SKCNode::getScale(a2).n128_u32[0];
  __n128 Scale = SKCNode::getScale(a2);
  if (this->var29)
  {
    if (this->var30)
    {
      __n128 v18 = Scale;
      float v9 = (float)(this->var26 * v7) + 1.0;
      float v10 = (float)(v19 * v9) / this->var24;
      __n128 v11 = SKCNode::getScale(a2);
      v11.n128_f32[0] = v10;
      SKCNode::setScale((SKCNode *)a2, v11, v11.n128_f32[1]);
      __n128 Scale = v18;
      this->var24 = v9;
    }
    if (this->var31)
    {
      float v12 = Scale.n128_f32[1];
      float v13 = (float)(this->var27 * v7) + 1.0;
      __n128 v14 = SKCNode::getScale(a2);
      SKCNode::setScale((SKCNode *)a2, v14, (float)(v12 * v13) / this->var25);
      this->float var25 = v13;
    }
  }
  else if (!this->var28)
  {
    if (this->var30)
    {
      float v15 = (float)(v7 * this->var19) + (float)(this->var26 * (float)(1.0 - v7));
      __n128 v16 = SKCNode::getScale(a2);
      v16.n128_f32[0] = v15;
      SKCNode::setScale((SKCNode *)a2, v16, v16.n128_f32[1]);
    }
    if (this->var31)
    {
      __n128 v17 = SKCNode::getScale(a2);
      SKCNode::setScale((SKCNode *)a2, v17, (float)(v7 * this->var20) + (float)(this->var27 * (float)(1.0 - v7)));
    }
  }
  this->var23 = v7;
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
  {
    Scale.n128_f64[0] = a3;
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, Scale);
  }
}

void SKCScale::cpp_willStartWithTargetAtTime(SKCScale *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  this->var23 = 0.0;
  if (a2
  {
    NSLog(&cfstr_SksceneAnimati_1.isa);
  }
  if (this->var32 {
    && a2
  }
    && !this->var28
  {
    float32x2_t v5 = vcvt_f32_f64((float64x2_t)this->var33);
    long long v17 = *((_OWORD *)a2 + 21);
    int8x8_t v6 = (int8x8_t)SKCNode::getScale((__n128 *)a2).n128_u64[0];
    int32x2_t v7 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vrev64_s32(*(int32x2_t *)&v17), (int8x8_t)0x6000000060000000));
    char v8 = v7.i8[4] | v7.i8[0];
    int8x8_t v9 = (int8x8_t)vdiv_f32(v5, *(float32x2_t *)&v17);
    if (v8) {
      unsigned int v10 = -1;
    }
    else {
      unsigned int v10 = 0;
    }
    *(int8x8_t *)&this->float var26 = v6;
    *(int8x8_t *)&this->float var19 = vbsl_s8((int8x8_t)vdup_n_s32(v10), v6, v9);
  }
  else if (this->var29)
  {
    __asm { FMOV            V0.2S, #1.0 }
    *(void *)&this->var24 = _D0;
    __asm { FMOV            V1.2S, #-1.0 }
    *(float32x2_t *)&this->float var26 = vadd_f32(*(float32x2_t *)&this->var19, _D1);
  }
  else
  {
    *(void *)&this->float var26 = SKCNode::getScale((__n128 *)a2).n128_u64[0];
  }
}

void sub_20AE050DC(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C405F2FCA79);

  _Unwind_Resume(a1);
}

void sub_20AE053C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCSequence::addCAction(SKCSequence *this, SKCAction *a2)
{
  if (a2)
  {
    ++a2->var1;
    unint64_t v6 = *((void *)this + 16);
    float32x2_t v4 = (char *)this + 128;
    unint64_t v5 = v6;
    int32x2_t v7 = (void *)*((void *)v4 - 1);
    if ((unint64_t)v7 >= v6)
    {
      int8x8_t v9 = (void **)(v4 - 16);
      uint64_t v10 = *((void *)v4 - 2);
      uint64_t v11 = ((uint64_t)v7 - v10) >> 3;
      if ((unint64_t)(v11 + 1) >> 61) {
        std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v5 - v10;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
        uint64_t v13 = v11 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        float v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)v4, v14);
      }
      else {
        float v15 = 0;
      }
      __n128 v16 = &v15[8 * v11];
      long long v17 = &v15[8 * v14];
      *(void *)__n128 v16 = a2;
      char v8 = v16 + 8;
      float v19 = (char *)*((void *)this + 14);
      __n128 v18 = (char *)*((void *)this + 15);
      if (v18 != v19)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v16 - SKCNode::setFlags(this, 66, 1) = v20;
          v16 -= 8;
        }
        while (v18 != v19);
        __n128 v18 = (char *)*v9;
      }
      *((void *)this + 14) = v16;
      *((void *)this + 15) = v8;
      *((void *)this + 16) = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      *int32x2_t v7 = a2;
      char v8 = v7 + 1;
    }
    *((void *)this + 15) = v8;
  }
}

void sub_20AE055E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE058C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE059D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE05B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCSequence::~SKCSequence(SKCAction *this)
{
  SKCSequence::~SKCSequence(this);

  JUMPOUT(0x21052EA30);
}

{
  void **v2;
  void **var0;
  _DWORD *v4;
  int v5;
  BOOL v6;
  uint64_t vars8;

  this->var0 = (void **)&unk_26BEED6E0;
  var0 = this[1].var0;
  uint64_t v2 = *(void ***)&this[1].var1;
  if (var0 != v2)
  {
    do
    {
      float32x2_t v4 = *var0;
      unint64_t v5 = *((_DWORD *)*var0 + 2) - 1;
      v4[2] = v5;
      if (v4) {
        unint64_t v6 = v5 == 0;
      }
      else {
        unint64_t v6 = 0;
      }
      if (v6)
      {
        (*(void (**)(_DWORD *))(*(void *)v4 + 8))(v4);
        uint64_t v2 = *(void ***)&this[1].var1;
      }
      ++var0;
    }
    while (var0 != v2);
    var0 = this[1].var0;
  }
  *(void *)&this[1].var1 = var0;
  if (var0) {
    operator delete(var0);
  }

  SKCAction::~SKCAction(this);
}

void SKCSequence::setBaseSpeed(SKCAction *this, float a2)
{
  SKCAction::setBaseSpeed(this, a2);
  var0 = this[1].var0;
  if (var0 != *(void ***)&this[1].var1)
  {
    float v4 = this->var16 * this->var17;
    do
    {
      uint64_t v5 = (uint64_t)*var0++;
      (*(void (**)(uint64_t, float))(*(void *)v5 + 40))(v5, v4);
    }
    while (var0 != *(void ***)&this[1].var1);
  }
}

void SKCSequence::setSpeed(SKCAction *this, float a2)
{
  SKCAction::setSpeed(this, a2);
  var0 = this[1].var0;
  if (var0 != *(void ***)&this[1].var1)
  {
    float v4 = this->var16 * this->var17;
    do
    {
      uint64_t v5 = (uint64_t)*var0++;
      (*(void (**)(uint64_t, float))(*(void *)v5 + 40))(v5, v4);
    }
    while (var0 != *(void ***)&this[1].var1);
  }
}

void SKCSequence::cpp_updateWithTargetForTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_adjustedTime(this, a3);
  var0 = this[1].var0;
  unint64_t var4 = (unint64_t)this[1].var4;
  if (var4 >= (uint64_t)(*(void *)&this[1].var1 - (void)var0) >> 3) {
LABEL_16:
  }
    std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]();
  double v8 = v5;
  int8x8_t v9 = (SKCAction *)var0[var4];
LABEL_3:
  SKCAction::updateWithTargetForTime(v9, a2, v8);
  while (1)
  {
    if (v9->var5)
    {
      if (!v9->var11) {
        return;
      }
    }
    else if (![v9->var4 finished])
    {
      return;
    }
    unint64_t v10 = (unint64_t)this[1].var4 + 1;
    this[1].unint64_t var4 = (id)v10;
    unint64_t v11 = ((uint64_t)(*(void *)&this[1].var1 - (unint64_t)this[1].var0) >> 3) - 1;
    if (v10 > v11) {
      break;
    }
    (*((void (**)(SKCAction *))v9->var0 + 2))(v9);
    unint64_t v13 = (unint64_t)this[1].var4;
    unint64_t v14 = this[1].var0;
    if (v13 >= (uint64_t)(*(void *)&this[1].var1 - (void)v14) >> 3) {
      goto LABEL_16;
    }
    double v15 = fmin(v8, v12);
    SKCAction::wasAddedToTargetAtTime((SKCAction *)v14[v13], a2, v15);
    unint64_t v16 = (unint64_t)this[1].var4;
    long long v17 = this[1].var0;
    if (v16 >= (uint64_t)(*(void *)&this[1].var1 - (void)v17) >> 3) {
      goto LABEL_16;
    }
    SKCAction::willStartWithTargetAtTime((SKCAction *)v17[v16], a2, v15);
    unint64_t v18 = (unint64_t)this[1].var4;
    float v19 = this[1].var0;
    if (v18 >= (uint64_t)(*(void *)&this[1].var1 - (void)v19) >> 3) {
      goto LABEL_16;
    }
    int8x8_t v9 = (SKCAction *)v19[v18];
    if (v15 < v8) {
      goto LABEL_3;
    }
  }
  this[1].unint64_t var4 = (id)v11;
  v20.n128_f64[0] = (*((double (**)(SKCAction *))v9->var0 + 2))(v9);
  SKCAction::didFinishWithTargetAtTime(this, a2, v20);
  this->var10 = (*((double (**)(SKCAction *))v9->var0 + 2))(v9);
}

uint64_t SKCSequence::cpp_wasRemovedFromTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  double v5 = this;
  SKCAction::cpp_wasRemovedFromTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(v5, a3);
  var0 = v5[1].var0;
  ++v5;
  int32x2_t v7 = var0;
  unint64_t var4 = (unint64_t)v5->var4;
  if (var4 >= (uint64_t)(*(void *)&v5->var1 - (void)var0) >> 3) {
    std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v10 = (SKCAction *)v7[var4];

  return SKCAction::wasRemovedFromTargetAtTime(v10, a2, v6);
}

uint64_t SKCSequence::cpp_willStartWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_willStartWithTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(this, a3);
  var0 = (SKCAction **)this[1].var0;
  this[1].unint64_t var4 = 0;
  if (*(SKCAction ***)&this[1].var1 == var0
    || (double v8 = v6,
        SKCAction::wasAddedToTargetAtTime(*var0, a2, v6),
        unint64_t var4 = (unint64_t)this[1].var4,
        unint64_t v10 = this[1].var0,
        var4 >= (uint64_t)(*(void *)&this[1].var1 - (void)v10) >> 3))
  {
    std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v11 = (SKCAction *)v10[var4];

  return SKCAction::willStartWithTargetAtTime(v11, a2, v8);
}

uint64_t SKCSequence::cpp_wasPausedWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  double v5 = this;
  SKCAction::cpp_wasPausedWithTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(v5, a3);
  var0 = v5[1].var0;
  ++v5;
  int32x2_t v7 = var0;
  unint64_t var4 = (unint64_t)v5->var4;
  if (var4 >= (uint64_t)(*(void *)&v5->var1 - (void)var0) >> 3) {
    std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v10 = (SKCAction *)v7[var4];

  return SKCAction::wasPausedWithTargetAtTime(v10, a2, v6);
}

uint64_t SKCSequence::cpp_willResumeWithTargetAtTime(SKCAction *this, SKCNode *a2, double a3)
{
  double v5 = this;
  SKCAction::cpp_willResumeWithTargetAtTime(this, a2, a3);
  SKCAction::cpp_adjustedTime(v5, a3);
  var0 = v5[1].var0;
  ++v5;
  int32x2_t v7 = var0;
  unint64_t var4 = (unint64_t)v5->var4;
  if (var4 >= (uint64_t)(*(void *)&v5->var1 - (void)var0) >> 3) {
    std::vector<SKTexture * {__strong}>::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v10 = (SKCAction *)v7[var4];

  return SKCAction::willResumeWithTargetAtTime(v10, a2, v6);
}

void sub_20AE0650C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void sub_20AE0692C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_20AE06C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_20AE06E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  double v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  double v5 = v6;
  int32x2_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v4, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v10];
    double v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    unint64_t v16 = &v14[8 * a2];
    unint64_t v18 = (char *)*a1;
    long long v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - SKCNode::setFlags(this, 66, 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      long long v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void sub_20AE073C4(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C403602C3BFLL);

  _Unwind_Resume(a1);
}

void sub_20AE074DC(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v3, 0x1081C403602C3BFLL);

  _Unwind_Resume(a1);
}

void sub_20AE075A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE0761C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCWait::SKCWait(SKCWait *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v3 = &unk_26BEED788;
  *(void *)(v3 + 24) = a2->var4;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(void *)(v3 + 56) = *(void *)&a2->var8;
  *(void *)(v3 + 88) = a2->var14;
  *(unsigned char *)(v3 + 32) = 1;
}

void SKCWait::~SKCWait(SKCWait *this)
{
  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

void sub_20AE077FC(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x10A1C40DCC7CF7ELL);

  _Unwind_Resume(a1);
}

void sub_20AE07934(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE07BE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE07D04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE07DC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE07E98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE07F7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE07FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SKFollowPath;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20AE08304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE083FC(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1060C402159C14DLL);

  _Unwind_Resume(a1);
}

void SKCFollowPath::SKCFollowPath(SKCFollowPath *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v3 = &unk_26BEED820;
  *(_WORD *)(v3 + 136) = 0;
  *(void *)(v3 + 120) = 0;
  *(void *)(v3 + 128) = 0;
  *(void *)(v3 + 112) = 0;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(unsigned char *)(v3 + 73) = a2->var12;
  *(unsigned char *)(v3 + 72) = a2->var11;
  *(void *)(v3 + 88) = a2->var14;
  *(_OWORD *)(v3 + 96) = *(_OWORD *)&a2->var15;
  *(unsigned char *)(v3 + 72) = a2->var11;
  double var10 = a2->var10;
  *(void *)(v3 + 56) = *(void *)&a2->var8;
  *(double *)(v3 + 64) = var10;
  *(void *)(v3 + 88) = a2->var14;
  *(unsigned char *)(v3 + 32) = 1;
}

void SKCFollowPath::~SKCFollowPath(SKCFollowPath *this)
{
  SKCFollowPath::~SKCFollowPath(this);

  JUMPOUT(0x21052EA30);
}

{
  PKPath *var21;
  uint64_t vars8;

  this->var0 = (void **)&unk_26BEED820;
  float var21 = this->var21;
  if (var21)
  {
    PKPath::~PKPath(var21);
    MEMORY[0x21052EA30]();
  }

  SKCAction::~SKCAction((SKCAction *)this);
}

void SKCFollowPath::cpp_updateWithTargetForTime(SKCFollowPath *this, __n128 *a2, double a3)
{
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  float v24 = v5;
  float v6 = -(float)(this->var19 - (float)(v5 * *(float *)this->var21));
  __n128 Translation = SKCNode::getTranslation(a2);
  __n128 v27 = SKCNode::getTranslation(a2);
  Z__n128 Rotation = SKCNode::getZRotation((SKCNode *)a2);
  if (v6 >= 0.0) {
    float v9 = v6;
  }
  else {
    float v9 = 0.0;
  }
  __n128 v11 = Translation;
  v10.n128_u64[1] = v27.n128_u64[1];
  v11.n128_u32[1] = v27.n128_u32[1];
  if (v9 > 0.0)
  {
    while (1)
    {
      unint64_t var20 = this->var20;
      float var21 = this->var21;
      uint64_t v14 = *((void *)var21 + 1);
      if (((*((void *)var21 + 2) - v14) >> 3) - 1 <= var20) {
        break;
      }
      unsigned int v15 = var20 + 1;
      float32x2_t v16 = *(float32x2_t *)(v14 + 8 * var20);
      float32x2_t v17 = vsub_f32(*(float32x2_t *)(v14 + 8 * (var20 + 1)), v16);
      float v18 = sqrtf(vmlas_n_f32(COERCE_FLOAT(vmul_f32(v17, v17).i32[1]), v17.f32[0], v17.f32[0]));
      if (v9 <= v18)
      {
        float v19 = v9 / v18;
        if ((float)(v9 / v18) > 1.0) {
          float v19 = 1.0;
        }
        if (v19 < 0.0) {
          float v19 = 0.0;
        }
        *(float32x2_t *)&long long v7 = vmul_n_f32(v17, v19);
        if (this->var24)
        {
          __n128 v26 = v11;
          long long v28 = v7;
          if (SKGetGlobalFlippedFlag()) {
            float v20 = 1.5708;
          }
          else {
            float v20 = -1.5708;
          }
          v10.n128_f32[0] = atan2f(*((float *)&v28 + 1), *(float *)&v28);
          __n128 v11 = v26;
          long long v7 = v28;
          Z__n128 Rotation = v10.n128_f32[0] + v20;
        }
        v10.n128_u64[0] = (unint64_t)vadd_f32(v16, *(float32x2_t *)&v7);
        if (this->var23)
        {
          float32x2_t v21 = vsub_f32((float32x2_t)v10.n128_u64[0], (float32x2_t)this->var22);
          this->var22 = ($94F468A8D4C62B317260615823C2B210)v10.n128_u64[0];
          v10.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)v11.n128_u64[0], v21);
        }
        if (v9 < v18) {
          goto LABEL_24;
        }
        unsigned int v15 = this->var20 + 1;
        v11.n128_u64[0] = v10.n128_u64[0];
      }
      else
      {
        v10.n128_u64[0] = v11.n128_u64[0];
      }
      float v9 = v9 - v18;
      this->unint64_t var20 = v15;
      this->float var19 = v18 + this->var19;
      if (v9 <= 0.0) {
        goto LABEL_24;
      }
    }
  }
  v10.n128_u64[0] = v11.n128_u64[0];
LABEL_24:
  SKCNode::setTranslation((SKCNode *)a2, v10);
  if (this->var24) {
    SKCNode::setZRotation((SKCNode *)a2, ZRotation);
  }
  if ((COERCE_UNSIGNED_INT(v24 + -1.0) & 0x60000000) == 0)
  {
    v22.n128_f64[0] = a3;
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, v22);
  }
}

void SKCFollowPath::cpp_willStartWithTargetAtTime(SKCFollowPath *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  *(void *)&this->float var19 = 0;
  float var21 = this->var21;
  if (var21)
  {
    BOOL var23 = this->var23;
    $94F468A8D4C62B317260615823C2B210 v8 = ($94F468A8D4C62B317260615823C2B210)**((void **)var21 + 1);
    this->var22 = v8;
    if (var23)
    {
      __n128 Translation = SKCNode::getTranslation((__n128 *)a2);
      Translation.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)Translation.n128_u64[0], (float32x2_t)this->var22);
      SKCNode::setTranslation(a2, Translation);
    }
    else
    {
      v5.n128_u32[0] = LODWORD(v8.var0);
      SKCNode::setTranslation(a2, v5, v8.var1);
    }
  }
  else
  {
    this->var22 = 0;
  }
}

void std::vector<PKPoint>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    float v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v3, a2);
    long long v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    float v9 = &v6[8 * v8];
    __n128 v11 = (char *)*a1;
    __n128 v10 = (char *)a1[1];
    unint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - SKCNode::setFlags(this, 66, 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      __n128 v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void PKPath::~PKPath(PKPath *this)
{
  uint64_t v2 = (const CGPath *)*((void *)this + 4);
  if (v2) {
    CGPathRelease(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 1);
  if (v3)
  {
    *((void *)this + 2) = v3;
    operator delete(v3);
  }
}

void *std::vector<PKPoint>::__init_with_size[abi:ne180100]<PKPoint*,PKPoint*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    float v6 = result;
    BOOL result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      BOOL result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20AE08978(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void SKCompositeBezierPathPathApplyCGPath(void *a1, const CGPathElement *a2)
{
  if (!*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1[3] - 8);
    uint64_t v3 = *(float **)(v2 + 16);
    uint64_t v4 = *(float **)(v2 + 24);
    CGPathElementType type = a2->type;
    if (v3 == v4 && type == kCGPathElementMoveToPoint)
    {
      points = a2->points;
      float x = points->x;
      float y = points->y;
      unint64_t v18 = *(void *)(v2 + 32);
      if ((unint64_t)v3 >= v18)
      {
        uint64_t v20 = v18 - (void)v3;
        uint64_t v21 = v20 >> 2;
        if ((unint64_t)(v20 >> 2) <= 1) {
          uint64_t v21 = 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        float32x4_t v23 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v2 + 32, v22);
        float v24 = *(char **)(v2 + 16);
        float32x2_t v25 = *(char **)(v2 + 24);
        __n128 v27 = &v23[2 * v26];
        *float32x4_t v23 = x;
        v23[1] = y;
        float v19 = v23 + 2;
        if (v25 != v24)
        {
          do
          {
            uint64_t v28 = *((void *)v25 - 1);
            v25 -= 8;
            *((void *)v23 - SKCNode::setFlags(this, 66, 1) = v28;
            v23 -= 2;
          }
          while (v25 != v24);
          float v24 = *(char **)(v2 + 16);
        }
        *(void *)(v2 + 16) = v23;
        *(void *)(v2 + 24) = v19;
        *(void *)(v2 + 32) = v27;
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *uint64_t v3 = x;
        v3[1] = y;
        float v19 = v3 + 2;
      }
      *(void *)(v2 + 24) = v19;
      *(_DWORD *)(v2 + 4) = 0;
      *(_DWORD *)(v2 + 8) = 0;
    }
    else
    {
      switch(type)
      {
        case kCGPathElementMoveToPoint:
          int v7 = *(_DWORD *)(v2 + 4);
          if (v7 >= 1)
          {
            float v8 = *v3;
            float v9 = v3[1];
            __n128 v10 = &v3[6 * v7];
            float v11 = v10[1];
            BOOL v12 = v8 == *v10;
            if (v9 != v11) {
              BOOL v12 = 0;
            }
            *(unsigned char *)(v2 + SKCNode::setFlags(this, 66, 1) = v12;
          }
          *(unsigned char *)uint64_t v2 = 1;
          int v13 = *((_DWORD *)a1 + 1) + v7;
          int v14 = *((_DWORD *)a1 + 2) + *(_DWORD *)(v2 + 8);
          *((_DWORD *)a1 + SKCNode::setFlags(this, 66, 1) = v13;
          *((_DWORD *)a1 + 2) = v14;
          operator new();
        case kCGPathElementAddLineToPoint:
          float v38 = *(v4 - 2);
          float v39 = *(v4 - 1);
          char v40 = a2->points;
          float v30 = v40->x;
          float v31 = v40->y;
          goto LABEL_30;
        case kCGPathElementAddQuadCurveToPoint:
          float32x2_t v29 = (float64x2_t *)a2->points;
          float v30 = v29[1].f64[0];
          float v31 = v29[1].f64[1];
          float32x2_t v32 = vcvt_f32_f64(*v29);
          float32x2_t v33 = vadd_f32(*(float32x2_t *)(v4 - 2), vmul_f32(vsub_f32(v32, *(float32x2_t *)(v4 - 2)), (float32x2_t)vdup_n_s32(0x3F2AAAABu)));
          float v34 = (float)((float)(v32.f32[0] - v30) * 0.66667) + v30;
          float v35 = (float)((float)(v32.f32[1] - v31) * 0.66667) + v31;
          float v36 = v33.f32[1];
          goto LABEL_35;
        case kCGPathElementAddCurveToPoint:
          float32x4_t v37 = a2->points;
          v33.f32[0] = v37->x;
          float v36 = v37->y;
          float v34 = v37[1].x;
          float v35 = v37[1].y;
          float v30 = v37[2].x;
          float v31 = v37[2].y;
          goto LABEL_35;
        case kCGPathElementCloseSubpath:
          float v38 = *(v4 - 2);
          float v39 = *(v4 - 1);
          float v30 = *v3;
          float v31 = v3[1];
LABEL_30:
          if (v38 != v30 || v39 != v31)
          {
            v33.f32[0] = v38 + (float)((float)(v30 - v38) * 0.33);
            float v36 = v39 + (float)((float)(v31 - v39) * 0.33);
            float v34 = v38 + (float)((float)(v30 - v38) * 0.66);
            float v35 = v39 + (float)((float)(v31 - v39) * 0.66);
LABEL_35:
            uint64_t v42 = *(void *)(a1[3] - 8);
            SKBezierPathAddCurve(v42, v33.f32[0], v36, v34, v35, v30, v31);
          }
          break;
        default:
          return;
      }
    }
  }
}

void SKBezierPathAddCurve(uint64_t a1, float a2, float a3, float a4, float a5, float a6, float a7)
{
  float v9 = *(float **)(a1 + 24);
  float v10 = *(v9 - 2);
  float v11 = *(v9 - 1);
  if (v10 != a6 || v11 != a7)
  {
    if ((COERCE_UNSIGNED_INT(fabsf((float)((float)(a2 * (float)(a5 - v11)) + (float)(v10 * (float)(a3 - a5)))+ (float)(a4 * (float)(v11 - a3)))+ -0.002) & 0x80000000) != 0&& (COERCE_UNSIGNED_INT(fabsf((float)((float)(a4 * (float)(a7 - a3)) + (float)(a2 * (float)(a5 - a7))) + (float)(a6 * (float)(a3 - a5)))+ -0.002) & 0x80000000) != 0)
    {
      ++*(_DWORD *)(a1 + 8);
    }
    unint64_t v18 = (void **)(a1 + 16);
    uint64_t v20 = (char **)(a1 + 32);
    float v19 = *(char **)(a1 + 32);
    if (v9 >= (float *)v19)
    {
      unint64_t v22 = (float *)*v18;
      uint64_t v23 = ((char *)v9 - (unsigned char *)*v18) >> 3;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61) {
        goto LABEL_58;
      }
      uint64_t v25 = v19 - (char *)v22;
      if (v25 >> 2 > v24) {
        unint64_t v24 = v25 >> 2;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      if (v26)
      {
        __n128 v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(a1 + 32, v26);
        unint64_t v22 = *(float **)(a1 + 16);
        float v9 = *(float **)(a1 + 24);
      }
      else
      {
        __n128 v27 = 0;
      }
      uint64_t v28 = (float *)&v27[8 * v23];
      float v19 = &v27[8 * v26];
      *uint64_t v28 = a2;
      v28[1] = a3;
      uint64_t v21 = v28 + 2;
      if (v9 != v22)
      {
        do
        {
          uint64_t v29 = *((void *)v9 - 1);
          v9 -= 2;
          *((void *)v28 - SKCNode::setFlags(this, 66, 1) = v29;
          v28 -= 2;
        }
        while (v9 != v22);
        unint64_t v22 = (float *)*v18;
      }
      *(void *)(a1 + 16) = v28;
      *(void *)(a1 + 24) = v21;
      *(void *)(a1 + 32) = v19;
      if (v22)
      {
        operator delete(v22);
        float v19 = *v20;
      }
    }
    else
    {
      *float v9 = a2;
      v9[1] = a3;
      uint64_t v21 = v9 + 2;
    }
    *(void *)(a1 + 24) = v21;
    if (v21 >= (float *)v19)
    {
      float v31 = (float *)*v18;
      uint64_t v32 = ((char *)v21 - (unsigned char *)*v18) >> 3;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 61) {
        goto LABEL_58;
      }
      uint64_t v34 = v19 - (char *)v31;
      if (v34 >> 2 > v33) {
        unint64_t v33 = v34 >> 2;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        float v36 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(a1 + 32, v35);
        float v31 = *(float **)(a1 + 16);
        uint64_t v21 = *(float **)(a1 + 24);
      }
      else
      {
        float v36 = 0;
      }
      float32x4_t v37 = (float *)&v36[8 * v32];
      float v19 = &v36[8 * v35];
      *float32x4_t v37 = a4;
      v37[1] = a5;
      float v30 = v37 + 2;
      if (v21 != v31)
      {
        do
        {
          uint64_t v38 = *((void *)v21 - 1);
          v21 -= 2;
          *((void *)v37 - SKCNode::setFlags(this, 66, 1) = v38;
          v37 -= 2;
        }
        while (v21 != v31);
        float v31 = (float *)*v18;
      }
      *(void *)(a1 + 16) = v37;
      *(void *)(a1 + 24) = v30;
      *(void *)(a1 + 32) = v19;
      if (v31)
      {
        operator delete(v31);
        float v19 = *v20;
      }
    }
    else
    {
      float *v21 = a4;
      v21[1] = a5;
      float v30 = v21 + 2;
    }
    *(void *)(a1 + 24) = v30;
    if (v30 < (float *)v19)
    {
      *float v30 = a6;
      v30[1] = a7;
      float v39 = v30 + 2;
LABEL_56:
      *(void *)(a1 + 24) = v39;
      ++*(_DWORD *)(a1 + 4);
      return;
    }
    char v40 = (float *)*v18;
    uint64_t v41 = ((char *)v30 - (unsigned char *)*v18) >> 3;
    unint64_t v42 = v41 + 1;
    if (!((unint64_t)(v41 + 1) >> 61))
    {
      uint64_t v43 = v19 - (char *)v40;
      if (v43 >> 2 > v42) {
        unint64_t v42 = v43 >> 2;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        float32x4_t v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(a1 + 32, v44);
        char v40 = *(float **)(a1 + 16);
        float v30 = *(float **)(a1 + 24);
      }
      else
      {
        float32x4_t v45 = 0;
      }
      int8x16_t v46 = (float *)&v45[8 * v41];
      int8x16_t v47 = &v45[8 * v44];
      *int8x16_t v46 = a6;
      v46[1] = a7;
      float v39 = v46 + 2;
      if (v30 != v40)
      {
        do
        {
          uint64_t v48 = *((void *)v30 - 1);
          v30 -= 2;
          *((void *)v46 - SKCNode::setFlags(this, 66, 1) = v48;
          v46 -= 2;
        }
        while (v30 != v40);
        char v40 = (float *)*v18;
      }
      *(void *)(a1 + 16) = v46;
      *(void *)(a1 + 24) = v39;
      *(void *)(a1 + 32) = v47;
      if (v40) {
        operator delete(v40);
      }
      goto LABEL_56;
    }
LABEL_58:
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  }
}

void SKBezierPathApplyCGPath(void *a1, const CGPathElement *a2)
{
  if (a1 && !*(unsigned char *)a1)
  {
    uint64_t v3 = (float *)a1[2];
    uint64_t v4 = (float *)a1[3];
    CGPathElementType type = a2->type;
    if (v3 == v4 && type == kCGPathElementMoveToPoint)
    {
      points = a2->points;
      float x = points->x;
      float y = points->y;
      float32x2_t v16 = (char *)(a1 + 4);
      unint64_t v17 = a1[4];
      if ((unint64_t)v3 >= v17)
      {
        uint64_t v19 = v17 - (void)v3;
        uint64_t v20 = v19 >> 2;
        if ((unint64_t)(v19 >> 2) <= 1) {
          uint64_t v20 = 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        unint64_t v22 = (float *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)v16, v21);
        uint64_t v23 = (char *)a1[2];
        unint64_t v24 = (char *)a1[3];
        unint64_t v26 = &v22[2 * v25];
        *unint64_t v22 = x;
        v22[1] = y;
        unint64_t v18 = v22 + 2;
        if (v24 != v23)
        {
          do
          {
            uint64_t v27 = *((void *)v24 - 1);
            v24 -= 8;
            *((void *)v22 - SKCNode::setFlags(this, 66, 1) = v27;
            v22 -= 2;
          }
          while (v24 != v23);
          uint64_t v23 = (char *)a1[2];
        }
        a1[2] = v22;
        a1[3] = v18;
        a1[4] = v26;
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *uint64_t v3 = x;
        v3[1] = y;
        unint64_t v18 = v3 + 2;
      }
      a1[3] = v18;
      *((_DWORD *)a1 + SKCNode::setFlags(this, 66, 1) = 0;
      *((_DWORD *)a1 + 2) = 0;
    }
    else
    {
      switch(type)
      {
        case kCGPathElementMoveToPoint:
          int v7 = *((_DWORD *)a1 + 1);
          if (v7 >= 1)
          {
            float v8 = *v3;
            float v9 = v3[1];
            float v10 = &v3[6 * v7];
            float v11 = v10[1];
            BOOL v12 = v8 == *v10;
            if (v9 != v11) {
              BOOL v12 = 0;
            }
            *((unsigned char *)a1 + SKCNode::setFlags(this, 66, 1) = v12;
          }
          *(unsigned char *)a1 = 1;
          return;
        case kCGPathElementAddLineToPoint:
          v28.f32[0] = *(v4 - 2);
          float v29 = *(v4 - 1);
          float v30 = a2->points;
          float v31 = v30->x;
          float v32 = v30->y;
          goto LABEL_32;
        case kCGPathElementAddQuadCurveToPoint:
          unint64_t v33 = (float64x2_t *)a2->points;
          float v34 = v33[1].f64[0];
          float v35 = v33[1].f64[1];
          float32x2_t v36 = vcvt_f32_f64(*v33);
          float32x2_t v28 = vadd_f32(*(float32x2_t *)(v4 - 2), vmul_f32(vsub_f32(v36, *(float32x2_t *)(v4 - 2)), (float32x2_t)vdup_n_s32(0x3F2AAAABu)));
          float v31 = (float)((float)(v36.f32[0] - v34) * 0.66667) + v34;
          float v32 = (float)((float)(v36.f32[1] - v35) * 0.66667) + v35;
          float v29 = v28.f32[1];
          goto LABEL_33;
        case kCGPathElementAddCurveToPoint:
          float32x4_t v37 = a2->points;
          v28.f32[0] = v37->x;
          float v29 = v37->y;
          float v31 = v37[1].x;
          float v32 = v37[1].y;
          float v34 = v37[2].x;
          float v35 = v37[2].y;
          goto LABEL_33;
        case kCGPathElementCloseSubpath:
          v28.f32[0] = *(v4 - 2);
          float v29 = *(v4 - 1);
          float v31 = *v3;
          float v32 = v3[1];
LABEL_32:
          float v34 = v31;
          float v35 = v32;
LABEL_33:
          SKBezierPathAddCurve((uint64_t)a1, v28.f32[0], v29, v31, v32, v34, v35);
          break;
        default:
          return;
      }
    }
  }
}

double skRunTime(void)
{
  double v0 = *(double *)&_skBaseTime;
  double v1 = *(double *)&_skCurrentTime;
  if (*(double *)&_skBaseTime >= 0.0)
  {
    double v2 = *(double *)&_skTimeOffset;
  }
  else
  {
    if (*(double *)&_skCurrentTime < 0.0)
    {
      double v1 = CACurrentMediaTime();
      _skCurrentTime = *(void *)&v1;
    }
    double v2 = *(double *)&_skTimeOffset;
    double v0 = v1 + *(double *)&_skTimeOffset;
    *(double *)&_skBaseTime = v1 + *(double *)&_skTimeOffset;
  }
  return v1 - v0 + v2;
}

double skCurrentTime()
{
  double v0 = *(double *)&_skCurrentTime;
  if (*(double *)&_skCurrentTime < 0.0)
  {
    double v0 = CACurrentMediaTime();
    _skCurrentTime = *(void *)&v0;
  }
  return v0 + *(double *)&_skTimeOffset;
}

double skPrevTime(void)
{
  double v0 = *(double *)&_skPrevTime;
  if (*(double *)&_skPrevTime >= 0.0)
  {
    double v2 = *(double *)&_skTimeOffset;
  }
  else
  {
    double v1 = *(double *)&_skCurrentTime;
    if (*(double *)&_skCurrentTime < 0.0)
    {
      double v1 = CACurrentMediaTime();
      _skCurrentTime = *(void *)&v1;
    }
    double v2 = *(double *)&_skTimeOffset;
    double v0 = v1 + *(double *)&_skTimeOffset;
    _skPrevTime = *(void *)&v0;
  }
  return v0 + v2;
}

void skSetTime(double a1)
{
  _skPrevTime = _skCurrentTime;
  _skCurrentTime = *(void *)&a1;
  if (*(double *)&_skBaseTime > a1) {
    _skBaseTime = *(void *)&a1;
  }
}

void skSetTimeOffset(double a1)
{
  _skTimeOffset = *(void *)&a1;
}

uint64_t SKGetGlobalFlippedFlag(void)
{
  if (!_skIsFlippedSet)
  {
    double v0 = SKGetResourceBundle();
    double v1 = [v0 infoDictionary];

    double v2 = [v1 objectForKey:@"SKIsFlipped"];
    if (v2)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        _skIsFlipped = [v2 BOOLValue];
      }
    }
    _skIsFlippedSet = 1;
  }
  return _skIsFlipped;
}

void sub_20AE09740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKEnsureGlobalMetalDevice(void)
{
  if (!_metalDevice)
  {
    MEMORY[0x21052E900](v1, 0);
    objc_storeStrong((id *)&_metalDevice, obj);
    return MEMORY[0x21052E910](v1);
  }
  return result;
}

id SKGetGlobalMetalDevice(void)
{
  return (id)_metalDevice;
}

void SKSetGlobalMetalDevice(id obj)
{
}

void SKEnsureGlobalMetalLibrary(void)
{
  if (!_metalLibrary)
  {
    SKEnsureGlobalMetalDevice();
    double v0 = [MEMORY[0x263F086E0] bundleForClass:NSClassFromString(&cfstr_Sknode_0.isa)];
    double v1 = NSURL;
    double v2 = [v0 pathForResource:@"default" ofType:@"metallib"];
    uint64_t v3 = [v1 fileURLWithPath:v2];

    id v4 = (id)_metalDevice;
    id v8 = 0;
    uint64_t v5 = [v4 newLibraryWithURL:v3 error:&v8];
    id v6 = v8;
    int v7 = (void *)_metalLibrary;
    _metalLibrarfloat y = v5;
  }
}

void sub_20AE098C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id SKGetGlobalMetalLibrary(void)
{
  return (id)_metalLibrary;
}

void SKSetGlobalMetalLibrary(id obj)
{
}

id SKDeviceSupportsExtendedXR10Formats(void *a1)
{
  id v1 = a1;
  SEL v2 = NSSelectorFromString(&cfstr_Originalobject.isa);
  if (v1)
  {
    uint64_t v3 = v2;
    do
    {
      if ((objc_opt_respondsToSelector() & 1) == 0) {
        break;
      }
      uint64_t v4 = [v1 v3];

      id v1 = (id)v4;
    }
    while (v4);
  }
  NSSelectorFromString(&cfstr_Supportsextend.isa);
  if (objc_opt_respondsToSelector()) {
    id v5 = objc_msgSend(v1, NSSelectorFromString(&cfstr_Supportsextend.isa));
  }
  else {
    id v5 = 0;
  }

  return v5;
}

void sub_20AE099C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKGetShouldEnableMetal(void)
{
  if (SKGetShouldEnableMetal(void)::onceToken != -1) {
    dispatch_once(&SKGetShouldEnableMetal(void)::onceToken, &__block_literal_global_3);
  }
  return SKGetShouldEnableMetal(void)::enableMetal;
}

uint64_t ___Z22SKGetShouldEnableMetalv_block_invoke()
{
  if (sk_debug_option_exists(&cfstr_Enablemetal.isa))
  {
    char v0 = sk_debug_option_get_BOOL(&cfstr_Enablemetal.isa);
    SKGetShouldEnableMetal(void)::enableMetal = v0;
  }
  else
  {
    char v0 = SKGetShouldEnableMetal(void)::enableMetal != 0;
  }
  uint64_t result = SKGetPrefersOpenGL();
  SKGetShouldEnableMetal(void)::enableMetal = v0 & (result ^ 1);
  return result;
}

uint64_t SKGetShouldUseExtendedRangeColor(void)
{
  if (sk_debug_option_exists(&cfstr_Useextendedran.isa))
  {
    return sk_debug_option_get_BOOL(&cfstr_Useextendedran.isa);
  }
  else
  {
    return SKGetDeviceSupportsExtendedRangeColor();
  }
}

uint64_t SKGetDeviceSupportsExtendedRangeColor(void)
{
  if (SKGetShouldEnableMetal(void)::onceToken != -1) {
    dispatch_once(&SKGetShouldEnableMetal(void)::onceToken, &__block_literal_global_3);
  }
  if (!SKGetShouldEnableMetal(void)::enableMetal) {
    return 0;
  }

  return MEMORY[0x270F95FB8](@"Aixt/MEN2O2B7f+8m4TxUA");
}

uint64_t SKColorSpaceIsWideGamut(CGColorSpace *a1)
{
  return 0;
}

void SKEnsureGlobalGLShareContext(void)
{
  if (!_glShareContext)
  {
    id v3 = [MEMORY[0x263EFF9A0] dictionary];
    char v0 = [NSNumber numberWithBool:1];
    [v3 setObject:v0 forKey:@"EAGLContextPropertyVisibleInDebugTools"];

    uint64_t v1 = [objc_alloc(MEMORY[0x263F146E8]) initWithAPI:2 properties:v3];
    SEL v2 = (void *)_glShareContext;
    _glShareContext = v1;
  }
}

void sub_20AE09C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKEnsureGlobalGLResourceLoadContext(void)
{
  if (!_glResourceLoadContext)
  {
    SKEnsureGlobalGLShareContext();
    [MEMORY[0x263F146E8] setCurrentContext:_glShareContext];
    char v0 = (void *)_glShareContext;
    objc_storeStrong((id *)&_glResourceLoadContext, v0);
  }
}

uint64_t SKBindGlobalGLShareContext(void)
{
  SKEnsureGlobalGLShareContext();
  char v0 = (void *)MEMORY[0x263F146E8];
  uint64_t v1 = _glShareContext;

  return [v0 setCurrentContext:v1];
}

id SKGetGlobalGLShareContext(void)
{
  return (id)_glShareContext;
}

void SKSetGlobalGLShareContext(id obj)
{
}

void SKSetGlobalGLResourceLoadContext(id obj)
{
}

id SKGetGlobalGLResourceLoadContext(void)
{
  return (id)_glResourceLoadContext;
}

uint64_t SKBindGlobalGLResourceLoadContext(void)
{
  SKEnsureGlobalGLResourceLoadContext();
  char v0 = (void *)MEMORY[0x263F146E8];
  uint64_t v1 = _glResourceLoadContext;

  return [v0 setCurrentContext:v1];
}

void sub_20AE09DF0(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C40F32A29C8);
  _Unwind_Resume(a1);
}

uint64_t quadIsVisible(float32x4_t *a1)
{
  float32x4_t v1 = a1[1];
  __asm { FMOV            V4.4S, #1.0 }
  float32x4_t v7 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B560, *a1), (int8x16_t)0, _Q4), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B560, v1), (int8x16_t)0, _Q4));
  float32x4_t v8 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B570, *a1), (int8x16_t)0, _Q4), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B570, v1), (int8x16_t)0, _Q4));
  float32x4_t v9 = a1[2];
  float32x4_t v10 = a1[3];
  v11.i64[0] = vaddq_f32(vaddq_f32(v7, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B560, v9), (int8x16_t)0, _Q4)), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B560, v10), (int8x16_t)0, _Q4)).u64[0];
  v8.i64[0] = vaddq_f32(vaddq_f32(v8, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B570, v9), (int8x16_t)0, _Q4)), (float32x4_t)vbicq_s8(_Q4, (int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B570, v10))).u64[0];
  v11.i64[1] = __PAIR64__(v8.u32[0], v8.u32[1]);
  v9.i32[0] = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B580, v11))).u32[0];
  v9.i32[1] = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v11, (float32x4_t)xmmword_20AE9B580))).i32[1];
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v9.f32, 0xFuLL))) & 1;
}

void SKCNode::SKCNode(SKCNode *this)
{
  *(void *)this = &unk_26BEED8D8;
  *((void *)this + SKCNode::setFlags(this, 66, 1) = 0;
  *((unsigned char *)this + 16) = 1;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((_DWORD *)this + 14) = 1065353216;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((void *)this + 20) = 0;
  *((_DWORD *)this + 42) = 1065353216;
  *((unsigned char *)this + 172) = 0;
  *((void *)this + 22) = (char *)this + 176;
  *((void *)this + 23) = (char *)this + 176;
  *((void *)this + 24) = 0;
  *((void *)this + 25) = (char *)this + 200;
  *((void *)this + 26) = (char *)this + 200;
  *((void *)this + 27) = 0;
  *((unsigned char *)this + 224) = 0;
  *((void *)this + 29) = 0;
  __asm { FMOV            V1.4S, #1.0 }
  *((_OWORD *)this + 15) = _Q1;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0x200000002;
  *((unsigned char *)this + 280) = 0;
  *((void *)this + 36) = 0;
  *((_OWORD *)this + 19) = _Q1;
  *((void *)this + 40) = 0x3F80000000000000;
  *(void *)&long long v6 = 0x3F0000003F000000;
  *((void *)&v6 + SKCNode::setFlags(this, 66, 1) = 0x3F0000003F000000;
  *((_OWORD *)this + 2SKCNode::setFlags(this, 66, 1) = 0u;
  *((_OWORD *)this + 22) = v6;
  *((_WORD *)this + 184) = 257;
  uint64_t v7 = MEMORY[0x263EF89A8];
  long long v8 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  *((_OWORD *)this + 24) = *MEMORY[0x263EF89A8];
  *((_OWORD *)this + 25) = v8;
  long long v9 = *(_OWORD *)(v7 + 48);
  *((_OWORD *)this + 26) = *(_OWORD *)(v7 + 32);
  *((_OWORD *)this + 27) = v9;
  *((_OWORD *)this + 32) = xmmword_20AE9A910;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = _Q1;
}

uint64_t SKCNode::generatesVisibleGeometry(SKCNode *this, const simd_float4x4 *a2)
{
  *(double *)&long long v3 = (*(double (**)(SKCNode *))(*(void *)this + 120))(this);
  uint64_t v4 = 0;
  float32x4_t v5 = (float32x4_t)a2->columns[0];
  float32x4_t v6 = (float32x4_t)a2->columns[1];
  float32x4_t v7 = (float32x4_t)a2->columns[2];
  float32x4_t v8 = (float32x4_t)a2->columns[3];
  v24[0] = v3;
  v24[1] = v9;
  v24[2] = v10;
  v24[3] = v11;
  do
  {
    v25.columns[v4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v5, COERCE_FLOAT(v24[v4])), v6, *(float32x2_t *)&v24[v4], 1), v7, (float32x4_t)v24[v4], 2), v8, (float32x4_t)v24[v4], 3);
    ++v4;
  }
  while (v4 != 4);
  *(double *)v12.i64 = SKCBoundingBoxGetVerts(&v25);
  __asm { FMOV            V6.4S, #1.0 }
  float32x4_t v18 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B560, v12), (int8x16_t)0, _Q6);
  float32x4_t v20 = vaddq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B570, v12), (int8x16_t)0, _Q6), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B570, v19), (int8x16_t)0, _Q6));
  v19.i64[0] = vaddq_f32(vaddq_f32(vaddq_f32(v18, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B560, v19), (int8x16_t)0, _Q6)), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B560, v21), (int8x16_t)0, _Q6)), (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B560, v22), (int8x16_t)0, _Q6)).u64[0];
  v20.i64[0] = vaddq_f32(vaddq_f32(v20, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B570, v21), (int8x16_t)0, _Q6)), (float32x4_t)vbicq_s8(_Q6, (int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B570, v22))).u64[0];
  v19.i64[1] = __PAIR64__(v20.u32[0], v20.u32[1]);
  v21.i32[0] = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32((float32x4_t)xmmword_20AE9B580, v19))).u32[0];
  v21.i32[1] = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgtq_f32(v19, (float32x4_t)xmmword_20AE9B580))).i32[1];
  return vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v21.f32, 0xFuLL))) & 1;
}

double SKCNode::getBatchInfo@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_DWORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(void *)&double result = 0x300000000;
  *(void *)(a1 + 4) = 0x300000000;
  return result;
}

uint64_t SKCNode::addBatchRenderElements()
{
  return 0;
}

void SKCNode::addBatchAttributeValues(id *this, SKCRenderInfo *a2, SKShader *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  float v31 = a3;
  if (this[1])
  {
    if (*((unsigned char *)this + 16))
    {
      std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::clear((uint64_t)(this + 3));
      [this[1] attributeValues];
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v35 = (id)objc_claimAutoreleasedReturnValue();
      uint64_t v19 = [v35 countByEnumeratingWithState:&v47 objects:v52 count:16];
      if (v19)
      {
        uint64_t v20 = *(void *)v48;
        do
        {
          for (uint64_t i = 0; i != v19; ++i)
          {
            if (*(void *)v48 != v20) {
              objc_enumerationMutation(v35);
            }
            float32x4_t v22 = *(void **)(*((void *)&v47 + 1) + 8 * i);
            std::string::basic_string[abi:ne180100]<0>(&v42, "a_");
            id v23 = v22;
            std::string::basic_string[abi:ne180100]<0>(__p, (char *)[v23 UTF8String]);
            if ((v45 & 0x80u) == 0) {
              unint64_t v24 = __p;
            }
            else {
              unint64_t v24 = (void **)__p[0];
            }
            if ((v45 & 0x80u) == 0) {
              std::string::size_type v25 = v45;
            }
            else {
              std::string::size_type v25 = (std::string::size_type)__p[1];
            }
            unint64_t v26 = std::string::append(&v42, (const std::string::value_type *)v24, v25);
            float32x2_t v28 = (std::string::value_type *)v26->__r_.__value_.__r.__words[0];
            std::string::size_type size = v26->__r_.__value_.__l.__size_;
            v46[0] = v26->__r_.__value_.__r.__words[2];
            *(_DWORD *)((char *)v46 + 3) = *(_DWORD *)((char *)&v26->__r_.__value_.__r.__words[2] + 3);
            int v29 = SHIBYTE(v26->__r_.__value_.__r.__words[2]);
            v26->__r_.__value_.__l.__size_ = 0;
            v26->__r_.__value_.__r.__words[2] = 0;
            v26->__r_.__value_.__r.__words[0] = 0;
            if ((char)v45 < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v42.__r_.__value_.__l.__data_);
            }
            uint64_t v30 = objc_msgSend(v35, "objectForKeyedSubscript:", v23, v31);
            if (v29 < 0)
            {
              std::string::__init_copy_ctor_external(&v42, v28, size);
            }
            else
            {
              v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v28;
              v42.__r_.__value_.__l.__size_ = size;
              LODWORD(v42.__r_.__value_.__r.__words[2]) = v46[0];
              *(_DWORD *)((char *)&v42.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v46 + 3);
              *((unsigned char *)&v42.__r_.__value_.__s + 23) = v29;
            }
            uint64_t v43 = v30;
            std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__emplace_unique_key_args<std::string,std::pair<std::string,SKAttributeValue * {__strong}>>((uint64_t)(this + 3), (unsigned __int8 *)&v42, (long long *)&v42);
            std::pair<std::string,SKAttributeValue * {__strong}>::~pair((uint64_t)&v42);
            if (v29 < 0) {
              operator delete(v28);
            }
          }
          uint64_t v19 = [v35 countByEnumeratingWithState:&v47 objects:v52 count:16];
        }
        while (v19);
      }

      *((unsigned char *)this + 16) = 0;
    }
    float32x4_t v6 = v31;
    float v34 = [(SKShader *)v31 _attributeBuffers];
    [(SKShader *)v6 attributes];
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    id obj = v7;
    uint64_t v8 = [v7 countByEnumeratingWithState:&v38 objects:v51 count:16];
    if (v8)
    {
      uint64_t v33 = *(void *)v39;
      long long v9 = (char *)(this + 3);
      do
      {
        for (uint64_t j = 0; j != v8; ++j)
        {
          if (*(void *)v39 != v33) {
            objc_enumerationMutation(obj);
          }
          long long v11 = *(void **)(*((void *)&v38 + 1) + 8 * j);
          float32x4_t v12 = (const void **)[v11 getNameString];
          v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
          int v13 = (jet_buffer_pool **)(std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v34, v12, (uint64_t)&std::piecewise_construct, (long long **)&v42)+ 7);
          SKCRendererEnsureBufferPoolCapacity((uint64_t)v13, a5, a4);
          int v14 = *v13;
          uint64_t data = jet_buffer_pool::get_data(*v13);
          int v16 = *((_DWORD *)v14 + 2) - 1;
          if (v16 > 7) {
            int v17 = 4;
          }
          else {
            int v17 = dword_20AE9B5AC[v16];
          }
          int v18 = *((_DWORD *)v14 + 3);
          v42.__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
          objc_msgSend(*((id *)std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v9, (unsigned __int8 *)v12, (uint64_t)&std::piecewise_construct, (long long **)&v42)+ 5), "copyValueTo:type:count:", data + a5 * (unint64_t)(v18 * v17), objc_msgSend(v11, "type"), a4);
        }
        id v7 = obj;
        uint64_t v8 = [obj countByEnumeratingWithState:&v38 objects:v51 count:16];
      }
      while (v8);
    }
  }
}

void sub_20AE0AA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,SKAttributeValue * {__strong}>::~pair(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *SKCNode::addRenderableChildren(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t)result;
  float32x4_t v6 = (char *)*((void *)result + 14);
  id v7 = (char *)*((void *)result + 15);
  if (v6 != v7 || *((void *)result + 11) != *((void *)result + 12))
  {
    std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>(a3, *(void *)(a3 + 8), v6, v7, (v7 - v6) >> 3);
    double result = std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>(a3, *(void *)(a3 + 8), *(char **)(v5 + 88), *(char **)(v5 + 96), (uint64_t)(*(void *)(v5 + 96) - *(void *)(v5 + 88)) >> 3);
    *(_DWORD *)(*(void *)(a2 + 664) + 156) += (*(void *)(v5 + 96) - *(void *)(v5 + 88)) >> 3;
  }
  return result;
}

void SKCNode::outline(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t SKCNode::getMaxBatchRenderElementCount()
{
  return 0;
}

uint64_t SKCNode::getNeedsCustomRenderOps()
{
  return 0;
}

uint64_t SKCNode::canAppendToCurrentBatch()
{
  return 0;
}

id SKCNode::getScene(SKCNode *this)
{
  uint64_t v4 = 0;
  uint64_t v5 = &v4;
  uint64_t v6 = 0x3032000000;
  id v7 = __Block_byref_object_copy__1;
  uint64_t v8 = __Block_byref_object_dispose__1;
  id v9 = 0;
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = ___ZN7SKCNode8getSceneEv_block_invoke;
  v3[3] = &unk_263FE9F18;
  v3[4] = &v4;
  SKCNode::walkUp((uint64_t)this, v3, 1);
  id v1 = (id)v5[5];
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_20AE0AD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__1(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
}

void SKCNode::walkUp(uint64_t a1, void *a2, char a3)
{
  uint64_t v5 = a2;
  if ((a3 & 1) == 0) {
    a1 = *(void *)(a1 + 80);
  }
  char v7 = 0;
  if (a1)
  {
    do
    {
      v5[2](v5, a1, &v7);
      a1 = *(void *)(a1 + 80);
      if (a1) {
        BOOL v6 = v7 == 0;
      }
      else {
        BOOL v6 = 0;
      }
    }
    while (v6);
  }
}

void sub_20AE0ADE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN7SKCNode8getSceneEv_block_invoke(uint64_t a1, id *lpsrc, unsigned char *a3)
{
  if (lpsrc
  {
    id v6 = lpsrc[1];
    if (v6)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), lpsrc[1]);
        *a3 = 1;
      }
    }
  }
}

void sub_20AE0AEE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL SKCNode::intersectsNode(SKCNode **this, SKCNode **a2)
{
  if (!a2) {
    return 0;
  }
  *(double *)v3.i64 = SKCNode::getWorldBoundingBox(this);
  v13.columns[0] = v3;
  v13.columns[1] = v4;
  v13.columns[2] = v5;
  v13.columns[3] = v6;
  *(double *)v7.i64 = SKCNode::getWorldBoundingBox(a2);
  v12.columns[0] = v7;
  v12.columns[1] = v8;
  v12.columns[2] = v9;
  v12.columns[3] = v10;
  return SKCBoundingBoxIntersectsBoundingBox(&v13, &v12);
}

double SKCNode::getWorldBoundingBox(SKCNode **this)
{
  (*((void (**)(SKCNode **))*this + 15))(this);
  simd_float4 v6 = this[10];
  if (v6)
  {
    long long v15 = v5;
    long long v16 = v4;
    long long v13 = v2;
    long long v14 = v3;
    __n128 ConversionMatrixToWorld = SKCNode::getConversionMatrixToWorld(v6);
    uint64_t v11 = 0;
    v17[0] = v13;
    v17[1] = v14;
    v17[2] = v16;
    v17[3] = v15;
    do
    {
      *(long long *)((char *)&v18 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)ConversionMatrixToWorld, COERCE_FLOAT(v17[v11])), v8, *(float32x2_t *)&v17[v11], 1), v9, (float32x4_t)v17[v11], 2), v10, (float32x4_t)v17[v11], 3);
      ++v11;
    }
    while (v11 != 4);
    *(void *)&long long v2 = v18;
  }
  return *(double *)&v2;
}

void SKCNode::setPaused(SKCNode *this, char a2)
{
  *((unsigned char *)this + 172) = a2;
  SKCNode::recomputeFlags(this, 1);
}

void SKCNode::recomputeFlags(SKCNode *this, int a2)
{
  int v4 = *((_DWORD *)this + 68) & 2;
  *((_DWORD *)this + 68) = v4;
  if (*((void *)this + 24)) {
    *((_DWORD *)this + 68) = v4 | 4;
  }
  long long v5 = (void *)*((void *)this + 1);
  if (v5)
  {
    uint64_t v6 = [v5 constraints];
    if (v6)
    {
      simd_float4 v7 = (void *)v6;
      float32x4_t v8 = [*((id *)this + 1) constraints];
      uint64_t v9 = [v8 count];

      if (v9) {
        *((_DWORD *)this + 68) |= 0x10u;
      }
    }
  }
  if (*((void *)this + 29)) {
    *((_DWORD *)this + 68) |= 8u;
  }
  if ((*(unsigned int (**)(SKCNode *))(*(void *)this + 176))(this)) {
    *((_DWORD *)this + 68) |= 0x20u;
  }
  (*(void (**)(SKCNode *))(*(void *)this + 168))(this);
  if (a2)
  {
    SKCNode::propagateFlags(this);
  }
}

void sub_20AE0B14C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCNode::setColor(SKCNode *this, _OWORD *a2)
{
  *((_OWORD *)this + 19) = *a2;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setDirty(SKCNode *this)
{
  int v1 = *((_DWORD *)this + 68);
  if ((v1 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v1 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setAnchor(SKCNode *this, _OWORD *a2)
{
  *((_OWORD *)this + 22) = *a2;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setAlpha(SKCNode *this, float *a2)
{
  *((float *)this + 8SKCNode::setFlags(this, 66, 1) = *a2;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setSize(SKCNode *this, _OWORD *a2)
{
  *((_OWORD *)this + 2SKCNode::setFlags(this, 66, 1) = *a2;
  long long v3 = (std::__shared_weak_count *)*((void *)this + 33);
  *((void *)this + 32) = 0;
  *((void *)this + 33) = 0;
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int v4 = *((_DWORD *)this + 68);
  if ((v4 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v4 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setColorBlendFactor(SKCNode *this, float *a2)
{
  *((float *)this + 80) = *a2;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setHidden(SKCNode *this, int a2)
{
  if (*((unsigned __int8 *)this + 280) != a2)
  {
    *((unsigned char *)this + 280) = a2;
    int v2 = *((_DWORD *)this + 68);
    if ((v2 & 2) == 0)
    {
      *((_DWORD *)this + 68) = v2 | 2;
      SKCNode::propagateFlags(this);
    }
  }
}

void SKCNode::setBlendMode(SKCNode *this, SKBlendMode a2)
{
  *((void *)this + 36) = a2;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::addAction(SKCNode *this, SKCAction *a2)
{
  int v4 = operator new(0x18uLL);
  uint64_t v5 = *((void *)this + 22);
  v4[1] = (char *)this + 176;
  v4[2] = a2;
  *int v4 = v5;
  *(void *)(v5 + 8) = v4;
  *((void *)this + 22) = v4;
  ++*((void *)this + 24);
  SKCAction::wasAddedToTargetAtTime(a2, this, 0.0);

  SKCNode::recomputeFlags(this, 1);
}

void SKCNode::walkDown(uint64_t **a1, void *a2, int a3, int a4)
{
  simd_float4 v7 = a2;
  char v14 = 0;
  uint64_t v11 = (uint64_t *)&v11;
  simd_float4x4 v12 = (uint64_t *)&v11;
  uint64_t v13 = 0;
  if (a3)
  {
    float32x4_t v8 = (uint64_t *)operator new(0x18uLL);
    v8[1] = (uint64_t)&v11;
    v8[2] = (uint64_t)a1;
    uint64_t *v8 = (uint64_t)&v11;
    uint64_t v11 = v8;
    simd_float4x4 v12 = v8;
    uint64_t v13 = 1;
  }
  else
  {
    std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>((uint64_t)&v11, (uint64_t *)&v11, a1[11], a1[12]);
    if (a4) {
      std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>((uint64_t)&v11, (uint64_t *)&v11, a1[14], a1[15]);
    }
  }
  for (uint64_t i = v12; i != (uint64_t *)&v11; uint64_t i = (uint64_t *)i[1])
  {
    float32x4_t v10 = (uint64_t **)i[2];
    v7[2](v7, v10, &v14);
    if (v14) {
      break;
    }
    std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>((uint64_t)&v11, (uint64_t *)&v11, v10[11], v10[12]);
    if (a4) {
      std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>((uint64_t)&v11, (uint64_t *)&v11, v10[14], v10[15]);
    }
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(&v11);
}

void sub_20AE0B444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__list_imp<SKCRenderSortInfo *>::clear(&a9);

  _Unwind_Resume(a1);
}

void SKCNode::walkChildren(char **a1, void *a2, int a3, int a4)
{
  simd_float4 v7 = a2;
  float32x4_t v8 = 0;
  std::string __p = 0;
  __dst = 0;
  float32x4_t v22 = 0;
  if (a3)
  {
    uint64_t v9 = std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)&v22, 1uLL);
    uint64_t v11 = &v9[v10];
    *uint64_t v9 = a1;
    float32x4_t v8 = v9 + 1;
    uint64_t v13 = (char *)__p;
    simd_float4x4 v12 = (char *)__dst;
    if (__dst != __p)
    {
      do
      {
        uint64_t v14 = *((void *)v12 - 1);
        v12 -= 8;
        *--uint64_t v9 = v14;
      }
      while (v12 != v13);
      simd_float4x4 v12 = (char *)__p;
    }
    std::string __p = v9;
    __dst = v8;
    float32x4_t v22 = v11;
    if (v12) {
      operator delete(v12);
    }
    __dst = v8;
  }
  std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>((uint64_t)&__p, (uint64_t)v8, a1[11], a1[12], (a1[12] - a1[11]) >> 3);
  if (a4) {
    std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>((uint64_t)&__p, (uint64_t)__dst, a1[14], a1[15], (a1[15] - a1[14]) >> 3);
  }
  char v19 = 0;
  long long v15 = __p;
  long long v16 = (char *)__dst;
  if (__p != __dst)
  {
    int v17 = (char *)__p + 8;
    do
    {
      v7[2](v7, *((void *)v17 - 1), &v19);
      if (v19) {
        BOOL v18 = 1;
      }
      else {
        BOOL v18 = v17 == v16;
      }
      v17 += 8;
    }
    while (!v18);
    long long v15 = __p;
  }
  if (v15)
  {
    __dst = v15;
    operator delete(v15);
  }
}

void sub_20AE0B5A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 SKCNode::getConversionMatrixToWorld(SKCNode *this)
{
  int v1 = (void *)*((void *)this + 10);
  (*(void (**)(SKCNode *))(*(void *)this + 104))(this);
  for (; v1; int v1 = (void *)v1[10])
  {
    __n128 v11 = result;
    long long v12 = v3;
    long long v13 = v4;
    long long v14 = v5;
    (*(void (**)(void *))(*v1 + 104))(v1);
    uint64_t v10 = 0;
    v15[0] = v11;
    v15[1] = v12;
    v15[2] = v13;
    v15[3] = v14;
    do
    {
      v16[v10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v15[v10])), v7, *(float32x2_t *)&v15[v10], 1), v8, (float32x4_t)v15[v10], 2), v9, (float32x4_t)v15[v10], 3);
      ++v10;
    }
    while (v10 != 4);
    __n128 result = (__n128)v16[0];
    long long v3 = v16[1];
    long long v4 = v16[2];
    long long v5 = v16[3];
  }
  return result;
}

double SKCNode::getWorldAccumulatedBoundingBox(char **this)
{
  AccumulatedBoundingBofloat x = SKCNode::getAccumulatedBoundingBox(this);
  float32x4_t v6 = (SKCNode *)this[10];
  if (v6)
  {
    __n128 v15 = v5;
    __n128 v16 = v4;
    __n128 v13 = AccumulatedBoundingBox;
    __n128 v14 = v3;
    __n128 ConversionMatrixToWorld = SKCNode::getConversionMatrixToWorld(v6);
    uint64_t v11 = 0;
    v17[0] = v13;
    v17[1] = v14;
    v17[2] = v16;
    v17[3] = v15;
    do
    {
      *(long long *)((char *)&v18 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)ConversionMatrixToWorld, COERCE_FLOAT(v17[v11])), v8, *(float32x2_t *)&v17[v11], 1), v9, (float32x4_t)v17[v11], 2), v10, (float32x4_t)v17[v11], 3);
      ++v11;
    }
    while (v11 != 4);
    AccumulatedBoundingBox.n128_u64[0] = v18;
  }
  return AccumulatedBoundingBox.n128_f64[0];
}

__n128 SKCNode::getAccumulatedBoundingBox(char **this)
{
  uint64_t v27 = 0;
  float32x2_t v28 = &v27;
  uint64_t v29 = 0x7012000000;
  uint64_t v30 = __Block_byref_object_copy__2;
  long long v33 = SKCBoundingBoxEmpty;
  long long v34 = xmmword_20AE9B480;
  long long v35 = xmmword_20AE9B490;
  float v31 = __Block_byref_object_dispose__3;
  float v32 = "";
  long long v36 = xmmword_20AE9B4A0;
  v26[0] = MEMORY[0x263EF8330];
  v26[1] = 3221225472;
  v26[2] = ___ZN7SKCNode25getAccumulatedBoundingBoxEv_block_invoke;
  v26[3] = &unk_263FE9F18;
  v26[4] = &v27;
  SKCNode::walkChildren(this, v26, 0, 1);
  (*((void (**)(char **))*this + 13))(this);
  uint64_t v6 = 0;
  float32x4_t v7 = (simd_float4 *)v28;
  float32x4_t v8 = (const simd_float4x4 *)(v28 + 6);
  long long v9 = *((_OWORD *)v28 + 4);
  long long v10 = *((_OWORD *)v28 + 5);
  long long v11 = *((_OWORD *)v28 + 6);
  v37[0] = *((_OWORD *)v28 + 3);
  v37[1] = v9;
  v37[2] = v10;
  v37[3] = v11;
  do
  {
    v38.columns[v6] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2, COERCE_FLOAT(v37[v6])), v3, *(float32x2_t *)&v37[v6], 1), v4, (float32x4_t)v37[v6], 2), v5, (float32x4_t)v37[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  simd_float4 v12 = v38.columns[1];
  simd_float4 v13 = v38.columns[2];
  simd_float4 v14 = v38.columns[3];
  v7[3] = v38.columns[0];
  v7[4] = v12;
  void v7[5] = v13;
  v7[6] = v14;
  *(double *)v15.i64 = (*((double (**)(char **))*this + 15))(this);
  v38.columns[0] = v15;
  v38.columns[1] = v16;
  v38.columns[2] = v17;
  v38.columns[3] = v18;
  float32x4_t v19 = SKCBoundingBoxUnion(v8, &v38);
  uint64_t v20 = v28;
  *((float32x4_t *)v28 + 3) = v19;
  *((_OWORD *)v20 + 4) = v21;
  *((_OWORD *)v20 + 5) = v22;
  *((_OWORD *)v20 + 6) = v23;
  long long v25 = *((_OWORD *)v20 + 3);
  _Block_object_dispose(&v27, 8);
  return (__n128)v25;
}

void sub_20AE0B914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

double SKCNode::getConversionMatrixToNode(SKCNode *this, const SKCNode *a2)
{
  *(void *)&double result = SKCNode::getConversionMatrixFromNode(a2, this).n128_u64[0];
  return result;
}

__n128 SKCNode::getConversionMatrixFromNode(SKCNode *this, const SKCNode *a2)
{
  float32x4_t v2 = a2;
  float32x4_t v4 = &v40;
  long long v40 = &v40;
  long long v41 = &v40;
  uint64_t v42 = 0;
  uint64_t v37 = (uint64_t)&v37;
  simd_float4x4 v38 = &v37;
  uint64_t v39 = 0;
  if (a2)
  {
    uint64_t v5 = 1;
    uint64_t v6 = a2;
    float32x4_t v7 = &v40;
    do
    {
      float32x4_t v8 = operator new(0x18uLL);
      v8[1] = &v40;
      v8[2] = v6;
      void *v8 = v7;
      v7[1] = v8;
      long long v40 = v8;
      uint64_t v42 = v5++;
      float32x4_t v7 = v8;
      uint64_t v6 = (const SKCNode *)*((void *)v6 + 10);
    }
    while (v6);
    float32x4_t v4 = v41;
  }
  if (this)
  {
    uint64_t v9 = 0;
    long long v10 = &v37;
    while (1)
    {
      if (v4 != &v40)
      {
        long long v11 = v4;
        while ((SKCNode *)v11[2] != this)
        {
          long long v11 = (void *)v11[1];
          if (v11 == &v40) {
            goto LABEL_13;
          }
        }
        if (v11 != &v40) {
          break;
        }
      }
LABEL_13:
      simd_float4 v12 = (uint64_t *)operator new(0x18uLL);
      v12[1] = (uint64_t)v10;
      v12[2] = (uint64_t)this;
      uint64_t *v12 = (uint64_t)&v37;
      *long long v10 = (uint64_t)v12;
      ++v9;
      simd_float4x4 v38 = v12;
      uint64_t v39 = v9;
      long long v10 = v12;
      this = (SKCNode *)*((void *)this + 10);
      if (!this) {
        goto LABEL_17;
      }
    }
    simd_float4 v12 = v10;
  }
  else
  {
    simd_float4 v12 = &v37;
  }
LABEL_17:
  long long v14 = *MEMORY[0x263EF89A8];
  long long v13 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  long long v16 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
  long long v15 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
  if (v2 && this != v2)
  {
    do
    {
      long long v29 = v14;
      long long v31 = v13;
      long long v33 = v16;
      long long v35 = v15;
      (*(void (**)(SKCNode *))(*(void *)v2 + 104))(v2);
      uint64_t v21 = 0;
      long long v43 = v29;
      long long v44 = v31;
      long long v45 = v33;
      long long v46 = v35;
      do
      {
        *(long long *)((char *)&v47 + v2SKCNode::setFlags(this, 66, 1) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, COERCE_FLOAT(*(long long *)((char *)&v43 + v21))), v18, *(float32x2_t *)((char *)&v43 + v21), 1), v19, *(float32x4_t *)((char *)&v43 + v21), 2), v20, *(float32x4_t *)((char *)&v43 + v21), 3);
        v21 += 16;
      }
      while (v21 != 64);
      long long v14 = v47;
      long long v13 = v48;
      long long v16 = v49;
      long long v15 = v50;
      float32x4_t v2 = (SKCNode *)*((void *)v2 + 10);
      if (v2) {
        BOOL v22 = v2 == this;
      }
      else {
        BOOL v22 = 1;
      }
    }
    while (!v22);
    simd_float4 v12 = v38;
  }
  long long v34 = v16;
  long long v36 = v15;
  long long v30 = v14;
  for (long long i = v13; v12 != &v37; v12 = (uint64_t *)v12[1])
  {
    (*(void (**)(uint64_t))(*(void *)v12[2] + 112))(v12[2]);
    uint64_t v27 = 0;
    long long v43 = v30;
    long long v44 = i;
    long long v45 = v34;
    long long v46 = v36;
    do
    {
      *(long long *)((char *)&v47 + v27) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v23, COERCE_FLOAT(*(long long *)((char *)&v43 + v27))), v24, *(float32x2_t *)((char *)&v43 + v27), 1), v25, *(float32x4_t *)((char *)&v43 + v27), 2), v26, *(float32x4_t *)((char *)&v43 + v27), 3);
      v27 += 16;
    }
    while (v27 != 64);
    long long v30 = v47;
    long long i = v48;
    long long v34 = v49;
    long long v36 = v50;
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(&v37);
  std::__list_imp<SKCRenderSortInfo *>::clear(&v40);
  return (__n128)v30;
}

void sub_20AE0BBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va1);
  _Unwind_Resume(a1);
}

__n128 SKCNode::getConversionMatrixFromWorld(SKCNode *this)
{
  int v1 = (void *)*((void *)this + 10);
  (*(void (**)(SKCNode *))(*(void *)this + 112))(this);
  for (; v1; int v1 = (void *)v1[10])
  {
    float32x4_t v11 = v5;
    float32x4_t v12 = v4;
    float32x4_t v13 = v3;
    float32x4_t v14 = (float32x4_t)result;
    *(double *)&long long v6 = (*(double (**)(void *))(*v1 + 112))(v1);
    uint64_t v7 = 0;
    v15[0] = v6;
    v15[1] = v8;
    v15[2] = v9;
    v15[3] = v10;
    do
    {
      v16[v7] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(v15[v7])), v13, *(float32x2_t *)&v15[v7], 1), v12, (float32x4_t)v15[v7], 2), v11, (float32x4_t)v15[v7], 3);
      ++v7;
    }
    while (v7 != 4);
    __n128 result = (__n128)v16[0];
    float32x4_t v3 = (float32x4_t)v16[1];
    float32x4_t v4 = (float32x4_t)v16[2];
    float32x4_t v5 = (float32x4_t)v16[3];
  }
  return result;
}

double SKCNode::convertPointToNode(SKCNode *a1, SKCNode *this, float32x4_t a3)
{
  __n128 ConversionMatrixFromNode = SKCNode::getConversionMatrixFromNode(this, a1);
  *(void *)&double result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)ConversionMatrixFromNode, a3.f32[0]), v4, *(float32x2_t *)a3.f32, 1), v5, a3, 2), v6, a3, 3).u64[0];
  return result;
}

double SKCNode::convertPointFromNode(SKCNode *a1, const SKCNode *a2, float32x4_t a3)
{
  __n128 ConversionMatrixFromNode = SKCNode::getConversionMatrixFromNode(a1, a2);
  *(void *)&double result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)ConversionMatrixFromNode, a3.f32[0]), v4, *(float32x2_t *)a3.f32, 1), v5, a3, 2), v6, a3, 3).u64[0];
  return result;
}

__n128 SKCNode::getBoundingBox(__n128 *this)
{
  return this[32];
}

__n128 __Block_byref_object_copy__2(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void ___ZN7SKCNode25getAccumulatedBoundingBoxEv_block_invoke(uint64_t a1, SKCNode *this)
{
  long long v3 = (const simd_float4x4 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  SKCNode::getAccumulatedBoundingBox(this);
  v13.columns[0] = v4;
  v13.columns[1] = v5;
  v13.columns[2] = v6;
  v13.columns[3] = v7;
  float32x4_t v8 = SKCBoundingBoxUnion(v3, &v13);
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  *(float32x4_t *)(v9 + 48) = v8;
  *(_OWORD *)(v9 + 64) = v10;
  *(_OWORD *)(v9 + 80) = v11;
  *(_OWORD *)(v9 + 96) = v12;
}

double SKCNode::getUntransformedBoundingBox(SKCNode *this)
{
  *(double *)&long long v2 = (*(double (**)(SKCNode *))(*(void *)this + 120))(this);
  long long v12 = v3;
  long long v13 = v2;
  long long v14 = v5;
  long long v15 = v4;
  (*(void (**)(SKCNode *))(*(void *)this + 112))(this);
  uint64_t v10 = 0;
  v16[0] = v13;
  v16[1] = v12;
  v16[2] = v15;
  v16[3] = v14;
  do
  {
    *(long long *)((char *)&v17 + v10 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(v16[v10])), v7, *(float32x2_t *)&v16[v10], 1), v8, (float32x4_t)v16[v10], 2), v9, (float32x4_t)v16[v10], 3);
    ++v10;
  }
  while (v10 != 4);
  return *(double *)&v17;
}

void SKCNode::update(SKCNode *this, double a2, float a3)
{
  if (!*((unsigned char *)this + 172))
  {
    float v5 = *((float *)this + 42) * a3;
    *((unsigned char *)this + 224) = 1;
    if ((*((unsigned char *)this + 272) & 4) != 0)
    {
      float32x4_t v6 = (char *)this + 176;
      uint64_t v7 = *((void *)this + 23);
      if ((SKCNode *)v7 != (SKCNode *)((char *)this + 176))
      {
        while (1)
        {
          float32x4_t v8 = *(SKCAction **)(v7 + 16);
          if (!v8->var12) {
            SKCAction::willStartWithTargetAtTime(*(SKCAction **)(v7 + 16), this, a2);
          }
          if (v8->var5)
          {
            if (!v8->var11) {
              goto LABEL_10;
            }
          }
          else if (([v8->var4 finished] & 1) == 0)
          {
LABEL_10:
            if (v8->var16 != v5) {
              (*((void (**)(SKCAction *, float))v8->var0 + 5))(v8, v5);
            }
            SKCAction::updateWithTargetForTime(v8, this, a2);
          }
          uint64_t v7 = *(void *)(v7 + 8);
          if ((char *)v7 == v6)
          {
            for (uint64_t i = *((void *)this + 23); ; uint64_t i = *(void *)(i + 8))
            {
              if ((char *)i == v6) {
                goto LABEL_21;
              }
              uint64_t v10 = *(SKCAction **)(i + 16);
              if (v10->var5)
              {
                if (!v10->var11) {
                  continue;
                }
              }
              else if (![v10->var4 finished])
              {
                continue;
              }
              SKCNode::removeAction(this, v10);
            }
          }
        }
      }
    }
LABEL_21:
    if ((*((unsigned char *)this + 276) & 0x20) != 0)
    {
      *((_DWORD *)this + 69) = 0;
      std::string __p = 0;
      float32x4_t v26 = 0;
      uint64_t v27 = 0;
      std::vector<SKCNode *>::__init_with_size[abi:ne180100]<SKCNode **,SKCNode **>(&__p, *((const void **)this + 11), *((void *)this + 12), (uint64_t)(*((void *)this + 12) - *((void *)this + 11)) >> 3);
      long long v11 = __p;
      long long v12 = v26;
      if (__p == v26)
      {
        int v13 = 0;
      }
      else
      {
        int v13 = 0;
        do
        {
          long long v14 = (_DWORD *)*v11;
          int v15 = *(_DWORD *)(*v11 + 272);
          if ((v15 & 0x20) != 0 || (int v16 = v14[69], (v16 & 0x20) != 0))
          {
            (*(void (**)(void, double, float))(*(void *)v14 + 152))(*v11, a2, v5);
            int v15 = v14[68];
            int v16 = v14[69];
          }
          v13 |= v15 | v16;
          ++v11;
        }
        while (v11 != v12);
      }
      BOOL v22 = 0;
      float32x4_t v23 = 0;
      uint64_t v24 = 0;
      std::vector<SKCNode *>::__init_with_size[abi:ne180100]<SKCNode **,SKCNode **>(&v22, *((const void **)this + 14), *((void *)this + 15), (uint64_t)(*((void *)this + 15) - *((void *)this + 14)) >> 3);
      long long v17 = v22;
      float32x4_t v18 = v23;
      if (v22 != v23)
      {
        do
        {
          float32x4_t v19 = (_DWORD *)*v17;
          int v20 = *(_DWORD *)(*v17 + 272);
          if ((v20 & 0x20) != 0 || (int v21 = v19[69], (v21 & 0x20) != 0))
          {
            (*(void (**)(void, double, float))(*(void *)v19 + 152))(*v17, a2, v5);
            int v20 = v19[68];
            int v21 = v19[69];
          }
          v13 |= v20 | v21;
          ++v17;
        }
        while (v17 != v18);
        long long v17 = v22;
      }
      *((_DWORD *)this + 69) |= v13;
      if (v17)
      {
        float32x4_t v23 = v17;
        operator delete(v17);
      }
      if (__p)
      {
        float32x4_t v26 = __p;
        operator delete(__p);
      }
    }
    *((unsigned char *)this + 224) = 0;
    SKCNode::cleanup(this);
    SKCNode::recomputeFlags(this, 1);
  }
}

void sub_20AE0C170(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL SKCNode::matchesAnyFlags(SKCNode *this, int a2, int a3)
{
  return a2 && (*((_DWORD *)this + 68) & a2) != 0 || a3 && (*((_DWORD *)this + 69) & a3) != 0;
}

void SKCNode::removeAction(SKCNode *this, SKCAction *a2)
{
  long long v2 = a2;
  long long v12 = a2;
  id v4 = a2->var4;
  if (*((unsigned char *)this + 224))
  {
    float v5 = operator new(0x18uLL);
    uint64_t v6 = *((void *)this + 25);
    v5[1] = (char *)this + 200;
    v5[2] = v2;
    *float v5 = v6;
    *(void *)(v6 + 8) = v5;
    *((void *)this + 25) = v5;
    ++*((void *)this + 27);
    if (v4)
    {
      uint64_t v7 = (void *)*((void *)this + 20);
      if (!v7)
      {
        id v8 = objc_alloc_init(MEMORY[0x263EFF9C0]);
        float32x4_t v9 = (void *)*((void *)this + 20);
        *((void *)this + 20) = v8;

        uint64_t v7 = (void *)*((void *)this + 20);
      }
      [v7 addObject:v4];
    }
  }
  else
  {
    std::list<SKCAction *>::remove((uint64_t)this + 176, &v12);
    long long v2 = v12;
  }
  double v10 = skCurrentTime();
  SKCAction::wasRemovedFromTargetAtTime(v2, this, v10);
  if (v4)
  {
    long long v11 = (void *)*((void *)this + 1);
    if (v11) {
      [v11 _removeAction:v4];
    }
  }
}

void sub_20AE0C2BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKCNode::cleanup(SKCNode *this)
{
  long long v2 = (id **)*((void *)this + 17);
  long long v3 = (id **)*((void *)this + 18);
  if (v2 != v3)
  {
    do
    {
      id v4 = *v2++;
      SKCNode::removeChild(this, v4);
      SKCNode::removeInternalChild(this, v4);
    }
    while (v2 != v3);
    long long v2 = (id **)*((void *)this + 17);
  }
  *((void *)this + 18) = v2;
  for (uint64_t i = (void *)*((void *)this + 26); i != (void *)((char *)this + 200); uint64_t i = (void *)i[1])
  {
    uint64_t v7 = i[2];
    std::list<SKCAction *>::remove((uint64_t)this + 176, &v7);
  }
  std::__list_imp<SKCRenderSortInfo *>::clear((void *)this + 25);
  return [*((id *)this + 20) removeAllObjects];
}

void SKCNode::addChild(SKCNode *this, SKCNode *a2)
{
}

void SKCNode::insertChildAtIndex(SKCNode *this, SKCNode *a2, unsigned int a3)
{
  uint64_t v27 = a2;
  if (*((unsigned char *)this + 224))
  {
    uint64_t v7 = (SKCNode **)*((void *)this + 17);
    uint64_t v6 = (SKCNode **)*((void *)this + 18);
    if (v7 != v6)
    {
      while (*v7 != a2)
      {
        if (++v7 == v6)
        {
          uint64_t v7 = (SKCNode **)*((void *)this + 18);
          break;
        }
      }
    }
    if (v7 != v6)
    {
      int64_t v8 = (char *)v6 - (char *)(v7 + 1);
      if (v6 != v7 + 1) {
        memmove(v7, v7 + 1, (char *)v6 - (char *)(v7 + 1));
      }
      *((void *)this + 18) = (char *)v7 + v8;
      double v10 = (SKCNode **)*((void *)this + 11);
      float32x4_t v9 = (SKCNode **)*((void *)this + 12);
      if (v10 != v9)
      {
        while (*v10 != a2)
        {
          if (++v10 == v9)
          {
            double v10 = (SKCNode **)*((void *)this + 12);
            break;
          }
        }
      }
      int64_t v11 = (char *)v9 - (char *)(v10 + 1);
      if (v9 != v10 + 1) {
        memmove(v10, v10 + 1, (char *)v9 - (char *)(v10 + 1));
      }
      *((void *)this + 12) = (char *)v10 + v11;
    }
  }
  uint64_t v12 = *((void *)this + 11);
  int v13 = (void *)*((void *)this + 12);
  uint64_t v14 = ((uint64_t)v13 - v12) >> 3;
  if ((a3 & 0x80000000) != 0 || v14 == a3)
  {
    unint64_t v15 = *((void *)this + 13);
    if ((unint64_t)v13 >= v15)
    {
      if ((unint64_t)(v14 + 1) >> 61) {
        std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v17 = v15 - v12;
      uint64_t v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v14 + 1)) {
        uint64_t v18 = v14 + 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19) {
        int v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)this + 104, v19);
      }
      else {
        int v20 = 0;
      }
      int v21 = &v20[8 * v14];
      BOOL v22 = &v20[8 * v19];
      *(void *)int v21 = a2;
      int v16 = v21 + 8;
      uint64_t v24 = (char *)*((void *)this + 11);
      float32x4_t v23 = (char *)*((void *)this + 12);
      if (v23 != v24)
      {
        do
        {
          uint64_t v25 = *((void *)v23 - 1);
          v23 -= 8;
          *((void *)v21 - SKCNode::setFlags(this, 66, 1) = v25;
          v21 -= 8;
        }
        while (v23 != v24);
        float32x4_t v23 = (char *)*((void *)this + 11);
      }
      *((void *)this + 1SKCNode::setFlags(this, 66, 1) = v21;
      *((void *)this + 12) = v16;
      *((void *)this + 13) = v22;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      void *v13 = a2;
      int v16 = v13 + 1;
    }
    *((void *)this + 12) = v16;
  }
  else
  {
    std::vector<SKCNode *>::insert((uint64_t)this + 88, (char *)(v12 + 8 * a3), (char *)&v27);
  }
  int v26 = *((_DWORD *)this + 68);
  if ((v26 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v26 | 2;
    SKCNode::propagateFlags(this);
  }
  SKCNode::recomputeFlags(v27, 1);
  SKCNode::recomputeFlags(this, 1);
}

char *std::vector<SKCNode *>::insert(uint64_t a1, char *__src, char *a3)
{
  long long v3 = a3;
  id v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      unint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(a1 + 16, v18);
    }
    else {
      unint64_t v19 = 0;
    }
    int v20 = &v19[8 * v16];
    std::string __p = v19;
    uint64_t v27 = v20;
    float32x2_t v28 = v20;
    long long v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        float32x4_t v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        uint64_t v27 = v20;
        long long v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)int v20 = *(void *)v3;
    float32x2_t v28 = v20 + 8;
    id v4 = std::vector<SKCNode *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    float32x4_t v9 = __src + 8;
    double v10 = v6 - 8;
    int64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)id v4 = *(void *)v3;
  }
  return v4;
}

void sub_20AE0C77C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SKCNode::removeChild(SKCNode *this, id *a2)
{
  id v29 = a2[1];
  if (!*((unsigned char *)this + 224))
  {
    uint64_t v8 = (char *)*((void *)this + 11);
    unint64_t v7 = (char *)*((void *)this + 12);
    if (v8 != v7)
    {
      uint64_t v9 = 0;
      while (*(id **)&v8[v9] != a2)
      {
        v9 += 8;
        if (&v8[v9] == v7) {
          goto LABEL_30;
        }
      }
      uint64_t v16 = &v8[v9];
      uint64_t v17 = &v8[v9 + 8];
      int64_t v18 = v7 - v17;
      if (v7 != v17) {
        memmove(&v8[v9], v17, v7 - v17);
      }
      *((void *)this + 12) = &v16[v18];
    }
    goto LABEL_30;
  }
  unint64_t v4 = *((void *)this + 19);
  float v5 = (id **)*((void *)this + 18);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v10 = *((void *)this + 17);
    uint64_t v11 = ((uint64_t)v5 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v4 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)this + 152, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v19 = (id **)&v15[8 * v11];
    int v20 = &v15[8 * v14];
    char *v19 = a2;
    uint64_t v6 = v19 + 1;
    unint64_t v22 = (char *)*((void *)this + 17);
    unint64_t v21 = (char *)*((void *)this + 18);
    if (v21 != v22)
    {
      do
      {
        float32x4_t v23 = (id *)*((void *)v21 - 1);
        v21 -= 8;
        *--unint64_t v19 = v23;
      }
      while (v21 != v22);
      unint64_t v21 = (char *)*((void *)this + 17);
    }
    *((void *)this + 17) = v19;
    *((void *)this + 18) = v6;
    *((void *)this + 19) = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *float v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  *((void *)this + 18) = v6;
  if (v29)
  {
    uint64_t v24 = (void *)*((void *)this + 20);
    if (!v24)
    {
      uint64_t v25 = [MEMORY[0x263EFF9C0] set];
      int v26 = (void *)*((void *)this + 20);
      *((void *)this + 20) = v25;

      uint64_t v24 = (void *)*((void *)this + 20);
    }
    [v24 addObject:v29];
LABEL_30:
    if (a2[10] == this)
    {
      a2[10] = 0;
      if (v29)
      {
        [v29 setParent:0];
        uint64_t v27 = (void *)*((void *)this + 1);
        if (v27) {
          [v27 _removeChild:v29];
        }
      }
    }
    goto LABEL_36;
  }
  if (a2[10] == this) {
    a2[10] = 0;
  }
LABEL_36:
  int v28 = *((_DWORD *)this + 68);
  if ((v28 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v28 | 2;
    SKCNode::propagateFlags(this);
  }
}

void sub_20AE0C9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKCNode::removeInternalChild(SKCNode *this, id *a2)
{
  id v29 = a2[1];
  if (!*((unsigned char *)this + 224))
  {
    uint64_t v8 = (char *)*((void *)this + 14);
    unint64_t v7 = (char *)*((void *)this + 15);
    if (v8 != v7)
    {
      uint64_t v9 = 0;
      while (*(id **)&v8[v9] != a2)
      {
        v9 += 8;
        if (&v8[v9] == v7) {
          goto LABEL_30;
        }
      }
      uint64_t v16 = &v8[v9];
      uint64_t v17 = &v8[v9 + 8];
      int64_t v18 = v7 - v17;
      if (v7 != v17) {
        memmove(&v8[v9], v17, v7 - v17);
      }
      *((void *)this + 15) = &v16[v18];
    }
    goto LABEL_30;
  }
  unint64_t v4 = *((void *)this + 19);
  float v5 = (id **)*((void *)this + 18);
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v10 = *((void *)this + 17);
    uint64_t v11 = ((uint64_t)v5 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v4 - v10;
    uint64_t v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    if (v14) {
      uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)this + 152, v14);
    }
    else {
      uint64_t v15 = 0;
    }
    unint64_t v19 = (id **)&v15[8 * v11];
    int v20 = &v15[8 * v14];
    char *v19 = a2;
    uint64_t v6 = v19 + 1;
    unint64_t v22 = (char *)*((void *)this + 17);
    unint64_t v21 = (char *)*((void *)this + 18);
    if (v21 != v22)
    {
      do
      {
        float32x4_t v23 = (id *)*((void *)v21 - 1);
        v21 -= 8;
        *--unint64_t v19 = v23;
      }
      while (v21 != v22);
      unint64_t v21 = (char *)*((void *)this + 17);
    }
    *((void *)this + 17) = v19;
    *((void *)this + 18) = v6;
    *((void *)this + 19) = v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *float v5 = a2;
    uint64_t v6 = v5 + 1;
  }
  *((void *)this + 18) = v6;
  if (v29)
  {
    uint64_t v24 = (void *)*((void *)this + 20);
    if (!v24)
    {
      uint64_t v25 = [MEMORY[0x263EFF9C0] set];
      int v26 = (void *)*((void *)this + 20);
      *((void *)this + 20) = v25;

      uint64_t v24 = (void *)*((void *)this + 20);
    }
    [v24 addObject:v29];
LABEL_30:
    if (a2[10] == this)
    {
      a2[10] = 0;
      if (v29)
      {
        [v29 setParent:0];
        uint64_t v27 = (void *)*((void *)this + 1);
        if (v27) {
          [v27 _removeChild:v29];
        }
      }
    }
    goto LABEL_36;
  }
  if (a2[10] == this) {
    a2[10] = 0;
  }
LABEL_36:
  int v28 = *((_DWORD *)this + 68);
  if ((v28 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v28 | 2;
    SKCNode::propagateFlags(this);
  }
}

void sub_20AE0CBD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *std::list<SKCAction *>::remove(uint64_t a1, void *a2)
{
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  long long v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      uint64_t v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          uint64_t v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            uint64_t v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        std::list<SKCAction *>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8) {
          uint64_t v6 = (void *)v6[1];
        }
      }
      long long v2 = v6;
    }
    while (v6 != (void *)a1);
  }
  return std::__list_imp<SKCRenderSortInfo *>::clear(v10);
}

void sub_20AE0CCA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void SKCNode::setTranslation(SKCNode *this, __n128 a2)
{
  *((__n128 *)this + 32) = a2;
  *((_WORD *)this + 184) = 257;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

{
  int v2;

  a2.n128_u64[1] = vextq_s8(*((int8x16_t *)this + 32), *((int8x16_t *)this + 32), 8uLL).u64[0];
  *((__n128 *)this + 32) = a2;
  *((_WORD *)this + 184) = 257;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setZTranslation(SKCNode *this, float a2)
{
  *((float *)this + 130) = a2;
  *((_WORD *)this + 184) = 257;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setTranslation(SKCNode *this, __n128 a2, float a3)
{
  if ((COERCE_UNSIGNED_INT(COERCE_FLOAT(*((_OWORD *)this + 32)) - a2.n128_f32[0]) & 0x60000000) != 0
    || (COERCE_UNSIGNED_INT(COERCE_FLOAT(HIDWORD(*((void *)this + 64))) - a3) & 0x60000000) != 0)
  {
    a2.n128_f32[1] = a3;
    a2.n128_u64[1] = *((void *)this + 65);
    *((__n128 *)this + 32) = a2;
    *((_WORD *)this + 184) = 257;
    int v4 = *((_DWORD *)this + 68);
    if ((v4 & 2) == 0)
    {
      *((_DWORD *)this + 68) = v4 | 2;
      SKCNode::propagateFlags(this);
    }
  }
}

void SKCNode::setRotation(SKCNode *this, __n128 a2)
{
  *((__n128 *)this + 33) = a2;
  *((_WORD *)this + 184) = 257;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setZRotation(SKCNode *this, float a2)
{
  *((float *)this + 134) = a2;
  *((_WORD *)this + 184) = 257;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setScale(SKCNode *this, __n128 a2)
{
  *((__n128 *)this + 34) = a2;
  *((_WORD *)this + 184) = 257;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

{
  int v2;

  a2.n128_u64[1] = vextq_s8(*((int8x16_t *)this + 34), *((int8x16_t *)this + 34), 8uLL).u64[0];
  *((__n128 *)this + 34) = a2;
  *((_WORD *)this + 184) = 257;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setScale(SKCNode *this, __n128 a2, float a3)
{
  a2.n128_f32[1] = a3;
  a2.n128_u64[1] = *((void *)this + 69);
  *((__n128 *)this + 34) = a2;
  *((_WORD *)this + 184) = 257;
  int v3 = *((_DWORD *)this + 68);
  if ((v3 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v3 | 2;
    SKCNode::propagateFlags(this);
  }
}

void SKCNode::setScale(SKCNode *this, int32x2_t a2)
{
  *((int32x4_t *)this + 34) = vdupq_lane_s32(a2, 0);
  *((_WORD *)this + 184) = 257;
  int v2 = *((_DWORD *)this + 68);
  if ((v2 & 2) == 0)
  {
    *((_DWORD *)this + 68) = v2 | 2;
    SKCNode::propagateFlags(this);
  }
}

__n128 SKCNode::getTranslation(__n128 *this)
{
  return this[32];
}

float SKCNode::getZTranslation(SKCNode *this)
{
  return *((float *)this + 130);
}

__n128 SKCNode::getScale(__n128 *this)
{
  return this[34];
}

__n128 SKCNode::getRotation(__n128 *this)
{
  return this[33];
}

float SKCNode::getZRotation(SKCNode *this)
{
  return *((float *)this + 134);
}

__n128 SKCNode::getBasePhysicsScale(__n128 *this)
{
  return this[15];
}

BOOL SKCNode::intersectsPoint(char **a1, double a2)
{
  v7[0] = (float32x4_t)SKCNode::getAccumulatedBoundingBox(a1);
  v7[1] = v2;
  v7[2] = v3;
  v7[3] = v4;
  return SKCBoundingBoxIntersectsPoint(v7, a2);
}

BOOL SKCNode::containsPoint(uint64_t a1, float32x4_t a2)
{
  *(double *)v3.i64 = (*(double (**)(uint64_t))(*(void *)a1 + 112))(a1);
  float32x4_t v19 = v3;
  float32x4_t v20 = v4;
  float32x4_t v17 = v6;
  float32x4_t v18 = v5;
  *(double *)&long long v7 = (*(double (**)(uint64_t))(*(void *)a1 + 120))(a1);
  uint64_t v8 = 0;
  v22[0] = v7;
  v22[1] = v9;
  v22[2] = v10;
  v22[3] = v11;
  do
  {
    *(float32x4_t *)((char *)&v23 + v8 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(v22[v8])), v20, *(float32x2_t *)&v22[v8], 1), v18, (float32x4_t)v22[v8], 2), v17, (float32x4_t)v22[v8], 3);
    ++v8;
  }
  while (v8 != 4);
  *(double *)v12.i64 = (*(double (**)(uint64_t))(*(void *)a1 + 112))(a1);
  return SKCBoundingBoxIntersectsPoint(&v23, *(double *)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v12, a2.f32[0]), v13, *(float32x2_t *)a2.f32, 1), v14, a2, 2), v15, a2, 3).i64);
}

uint64_t SKCNode::intersectsCircle(char **a1, __n128 a2, float a3)
{
  v9[0] = SKCNode::getAccumulatedBoundingBox(a1);
  v9[1] = v4;
  v9[2] = v5;
  v9[3] = v6;
  return SKCBoundingBoxIntersectsCircle(v9, a2, a3);
}

uint64_t SKCNode::nodeAtPoint(uint64_t a1, float32x4_t a2)
{
  uint64_t v2 = a1;
  uint64_t v4 = (uint64_t)&v4;
  long long v5 = &v4;
  uint64_t v6 = 0;
  if (SKCNode::sortedNodesAtPoint(a1, &v4, a2)) {
    uint64_t v2 = v5[2];
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(&v4);
  return v2;
}

void sub_20AE0D090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SKCNode::sortedNodesAtPoint(uint64_t a1, uint64_t *a2, float32x4_t a3)
{
  uint64_t v16 = (uint64_t)&v16;
  float32x4_t v17 = &v16;
  unint64_t v18 = 0;
  int v15 = 0;
  uint64_t v4 = *(uint64_t **)(a1 + 88);
  long long v5 = *(uint64_t **)(a1 + 96);
  if (v4 == v5)
  {
    unint64_t v7 = 0;
    uint64_t v6 = &v16;
  }
  else
  {
    do
      _sortedNodesAtPoint(*v4++, &v16, &v15, a3, 0.0);
    while (v4 != v5);
    uint64_t v6 = v17;
    unint64_t v7 = v18;
  }
  _ZNSt3__14listINS_5tupleIJP7SKCNodefjbEEENS_9allocatorIS4_EEE6__sortIZNS2_18sortedNodesAtPointEDv4_fPNS0_IS3_NS5_IS3_EEEEE3__0EENS_15__list_iteratorIS4_PvEESG_SG_mRT_((uint64_t)v6, (uint64_t)&v16, v7);
  for (uint64_t i = v17; i != &v16; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v9 = i[2];
    long long v10 = operator new(0x18uLL);
    v10[1] = a2;
    v10[2] = v9;
    uint64_t v11 = *a2;
    *long long v10 = *a2;
    *(void *)(v11 + 8) = v10;
    *a2 = (uint64_t)v10;
    ++a2[2];
  }
  uint64_t v12 = v18;
  std::__list_imp<SKCRenderSortInfo *>::clear(&v16);
  return v12;
}

void sub_20AE0D188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SKCNode::nodesAtPoint(char **a1, uint64_t *a2, int a3, float32x4_t a4)
{
  uint64_t v21 = 0;
  unint64_t v22 = &v21;
  uint64_t v23 = 0x4812000000;
  uint64_t v24 = __Block_byref_object_copy__5;
  uint64_t v25 = __Block_byref_object_dispose__6;
  uint64_t v26 = 0;
  v27[0] = v27;
  v27[1] = v27;
  v27[2] = 0;
  *(double *)v7.i64 = (*((double (**)(char **))*a1 + 13))(a1);
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 3221225472;
  v18[2] = ___ZN7SKCNode12nodesAtPointEDv4_fPNSt3__14listIPS_NS1_9allocatorIS3_EEEEb_block_invoke;
  v18[3] = &unk_263FE9FD0;
  __n128 v17 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, a4.f32[0]), v8, *(float32x2_t *)a4.f32, 1), v9, a4, 2), v10, a4, 3);
  __n128 v19 = v17;
  float32x4_t v20 = &v21;
  SKCNode::walkChildren(a1, v18, 0, 0);
  uint64_t v11 = v22;
  if (a3)
  {
    uint64_t v12 = v22 + 6;
    float32x4_t v13 = (uint64_t *)v22[7];
    if (v13 != v22 + 6)
    {
      do
      {
        SKCNode::nodesAtPoint(v13[2], v22 + 6, 1, v17);
        float32x4_t v13 = (uint64_t *)v13[1];
      }
      while (v13 != v12);
      uint64_t v11 = v22;
    }
  }
  std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__list_iterator<SKCNode *,void *>,std::__list_iterator<SKCNode *,void *>>((uint64_t)a2, a2, v11[7], (uint64_t)(v11 + 6));
  uint64_t v14 = *((unsigned int *)v22 + 16);
  _Block_object_dispose(&v21, 8);
  std::__list_imp<SKCRenderSortInfo *>::clear(v27);
  return v14;
}

void sub_20AE0D33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  std::__list_imp<SKCRenderSortInfo *>::clear(v10);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0;
  return std::list<SKCNode *>::splice((uint64_t)(a1 + 6), a1 + 6, (void *)(a2 + 48));
}

void *__Block_byref_object_dispose__6(uint64_t a1)
{
  return std::__list_imp<SKCRenderSortInfo *>::clear((void *)(a1 + 48));
}

uint64_t ___ZN7SKCNode12nodesAtPointEDv4_fPNSt3__14listIPS_NS1_9allocatorIS3_EEEEb_block_invoke(uint64_t a1, char **this)
{
  long long v10 = *(_OWORD *)(a1 + 32);
  v11[0] = (float32x4_t)SKCNode::getAccumulatedBoundingBox(this);
  v11[1] = v4;
  v11[2] = v5;
  v11[3] = v6;
  uint64_t result = SKCBoundingBoxIntersectsPoint(v11, *(double *)&v10);
  if (result)
  {
    float32x4_t v8 = *(void **)(*(void *)(a1 + 48) + 8);
    uint64_t result = (uint64_t)operator new(0x18uLL);
    *(void *)(result + 16) = this;
    uint64_t v9 = v8[6];
    v8 += 6;
    *(void *)uint64_t result = v9;
    *(void *)(result + 8) = v8;
    *(void *)(v9 + 8) = result;
    void *v8 = result;
    ++v8[2];
  }
  return result;
}

uint64_t _sortedNodesAtPoint(uint64_t result, uint64_t *a2, int *a3, float32x4_t a4, float a5)
{
  if (!*(unsigned char *)(result + 280))
  {
    uint64_t v5 = result;
    if (*(float *)(result + 324) > 0.0)
    {
      v27[0] = (float32x4_t)SKCNode::getAccumulatedBoundingBox((char **)result);
      v27[1] = v9;
      v27[2] = v10;
      void v27[3] = v11;
      uint64_t result = SKCBoundingBoxIntersectsPoint(v27, *(double *)a4.i64);
      if (result)
      {
        float v12 = *(float *)(v5 + 520) + a5;
        BOOL v13 = SKCNode::containsPoint(v5, a4);
        int v14 = *a3;
        uint64_t result = (uint64_t)operator new(0x28uLL);
        *(void *)(result + 8) = a2;
        *(void *)(result + 16) = v5;
        *(float *)(result + 24) = v12;
        *(_DWORD *)(result + 28) = v14;
        *(unsigned char *)(result + 32) = v13;
        uint64_t v15 = *a2;
        *(void *)uint64_t result = *a2;
        *(void *)(v15 + 8) = result;
        *a2 = result;
        ++a2[2];
        *a3 = v14 + 1;
        if (*(void *)(v5 + 88) != *(void *)(v5 + 96))
        {
          float v16 = *(float *)(v5 + 520);
          uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 112))(v5);
          unint64_t v22 = *(uint64_t **)(v5 + 88);
          uint64_t v21 = *(uint64_t **)(v5 + 96);
          if (v22 != v21)
          {
            float v23 = v16 + a5;
            __n128 v26 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v17, a4.f32[0]), v18, *(float32x2_t *)a4.f32, 1), v19, a4, 2), v20, a4, 3);
            do
            {
              uint64_t v24 = *v22++;
              uint64_t result = _sortedNodesAtPoint(v24, a2, a3, v26, v23);
            }
            while (v22 != v21);
          }
        }
      }
    }
  }
  return result;
}

uint64_t SKCNode::pushToPhysics(uint64_t this)
{
  if (*(void *)(this + 232))
  {
    uint64_t v1 = this;
    long long v10 = 0u;
    float32x4_t v8 = 0u;
    long long v9 = 0u;
    SKCNode::resolveWorldPositionRotationAndScale((_OWORD *)this, &v10, &v9, &v8);
    float32x4_t v2 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    int8x16_t v3 = (int8x16_t)vminnmq_f32(vmaxnmq_f32(vabsq_f32(v8), (float32x4_t)vdupq_n_s32(0x38D1B717u)), v2);
    v2.i64[0] = 0;
    int8x16_t v4 = v3;
    *(float *)v4.i32 = -*(float *)v3.i32;
    float32x4_t v5 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v2, v8), 0), v4, v3);
    int8x16_t v6 = (int8x16_t)v5;
    v6.i32[1] = vnegq_f32(v5).i32[1];
    unint64_t v7 = vdivq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)), 0), v6, (int8x16_t)v5), *(float32x4_t *)(v1 + 240)).u64[0];
    [*(id *)(v1 + 232) setPosition:vcvtq_f64_f32(*(float32x2_t *)&v10)];
    [*(id *)(v1 + 232) setRotation:*((float *)&v9 + 2)];
    return [*(id *)(v1 + 232) reapplyScale:*(float *)&v7 yScale:*((float *)&v7 + 1)];
  }
  return this;
}

void SKCNode::resolveWorldPositionRotationAndScale(_OWORD *a1, _OWORD *a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v17 = 0;
  float32x4_t v18 = &v17;
  long long v7 = a1[33];
  long long v20 = a1[32];
  long long v16 = a1[34];
  uint64_t v19 = 0x3020000000;
  uint64_t v13 = 0;
  int v14 = &v13;
  uint64_t v15 = 0x3020000000;
  uint64_t v9 = 0;
  long long v10 = &v9;
  uint64_t v11 = 0x3020000000;
  long long v12 = v7;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN7SKCNode36resolveWorldPositionRotationAndScaleEPDv4_fS1_S1__block_invoke;
  v8[3] = &unk_263FE9FF8;
  _OWORD v8[4] = &v17;
  v8[5] = &v9;
  v8[6] = &v13;
  SKCNode::walkUp((uint64_t)a1, v8, 0);
  if (a2) {
    *a2 = *((_OWORD *)v18 + 2);
  }
  if (a3) {
    *a3 = *((_OWORD *)v10 + 2);
  }
  if (a4) {
    *a4 = *((_OWORD *)v14 + 2);
  }
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  _Block_object_dispose(&v17, 8);
}

void sub_20AE0D7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v9 - 96), 8);
  _Unwind_Resume(a1);
}

void *SKCNode::pullFromPhysics(SKCNode *this)
{
  uint64_t result = (void *)*((void *)this + 29);
  if (result)
  {
    [result rotation];
    double v4 = v3;
    [*((id *)this + 29) position];
    float64_t v21 = v5;
    [*((id *)this + 29) position];
    float64_t v19 = v6;
    uint64_t v24 = 0;
    uint64_t v25 = &v24;
    uint64_t v26 = 0x4812000000;
    uint64_t v27 = __Block_byref_object_copy__5;
    int v28 = __Block_byref_object_dispose__6;
    uint64_t v29 = 0;
    v30[0] = v30;
    v30[1] = v30;
    v30[2] = 0;
    v23[0] = MEMORY[0x263EF8330];
    v23[1] = 3221225472;
    v23[2] = ___ZN7SKCNode15pullFromPhysicsEv_block_invoke;
    v23[3] = &unk_263FE9F18;
    _OWORD v23[4] = &v24;
    SKCNode::walkUp((uint64_t)this, v23, 0);
    v7.f64[0] = v21;
    v7.f64[1] = v19;
    *(float32x2_t *)v8.f32 = vcvt_f32_f64(v7);
    v8.i64[1] = 0x3F80000000000000;
    float v9 = v4;
    long long v10 = v25 + 6;
    uint64_t v11 = (uint64_t *)v25[7];
    if (v11 == v25 + 6)
    {
      v17.i64[0] = v8.i64[0];
    }
    else
    {
      do
      {
        long long v12 = (_OWORD *)v11[2];
        long long v20 = v12[33];
        float32x4_t v22 = v8;
        *(double *)v13.i64 = (*(double (**)(_OWORD *))(*(void *)v12 + 112))(v12);
        float v9 = v9 - *((float *)&v20 + 2);
        float32x4_t v17 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v22.f32[0]), v14, *(float32x2_t *)v22.f32, 1), v15, v22, 2), v16, v22, 3);
        uint64_t v11 = (uint64_t *)v11[1];
        float32x4_t v8 = v17;
      }
      while (v11 != v10);
    }
    v17.i64[1] = *((void *)this + 65);
    *((float32x4_t *)this + 32) = v17;
    *((_WORD *)this + 184) = 257;
    int v18 = *((_DWORD *)this + 68);
    if ((v18 & 2) == 0)
    {
      *((_DWORD *)this + 68) = v18 | 2;
      SKCNode::propagateFlags(this);
      int v18 = *((_DWORD *)this + 68);
    }
    *((float *)this + 134) = v9;
    *((_WORD *)this + 184) = 257;
    if ((v18 & 2) == 0)
    {
      *((_DWORD *)this + 68) = v18 | 2;
      SKCNode::propagateFlags(this);
    }
    _Block_object_dispose(&v24, 8);
    return std::__list_imp<SKCRenderSortInfo *>::clear(v30);
  }
  return result;
}

void sub_20AE0D9D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  std::__list_imp<SKCRenderSortInfo *>::clear(v10);
  _Unwind_Resume(a1);
}

void *___ZN7SKCNode15pullFromPhysicsEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t result = operator new(0x18uLL);
  result[2] = a2;
  double v5 = *(void **)(v3 + 56);
  uint64_t v6 = *(void *)(v3 + 64);
  *uint64_t result = v3 + 48;
  result[1] = v5;
  *double v5 = result;
  *(void *)(v3 + 56) = result;
  *(void *)(v3 + 64) = v6 + 1;
  return result;
}

void SKCNode::setFlags(SKCNode *this, int a2, int a3)
{
  int v3 = *((_DWORD *)this + 68);
  if ((a2 & ~v3) != 0)
  {
    *((_DWORD *)this + 68) = v3 | a2;
    if (a3) {
      SKCNode::propagateFlags(this);
    }
  }
}

double SKCNode::clearDirty(SKCNode *this)
{
  *(void *)&double result = *((void *)this + 34) & 0xFFFFFFFDFFFFFFFDLL;
  *((double *)this + 34) = result;
  return result;
}

int8x8_t SKCNode::clearFlags(int8x8_t *this, unsigned int a2, unsigned int a3)
{
  int8x8_t result = vbic_s8(this[34], (int8x8_t)__PAIR64__(a3, a2));
  this[34] = result;
  return result;
}

BOOL SKCNode::matchesAllFlags(SKCNode *this, int a2, int a3)
{
  return (a2 & ~*((_DWORD *)this + 68)) == 0 && (a3 & ~*((_DWORD *)this + 69)) == 0;
}

void SKCNode::propagateFlags(SKCNode *this)
{
  uint64_t v1 = *((void *)this + 10);
  if (v1)
  {
    int v2 = *((_DWORD *)this + 69) | *((_DWORD *)this + 68);
    do
    {
      int v3 = (const void *)v1;
      int v4 = *(_DWORD *)(v1 + 272);
      int v5 = *(_DWORD *)(v1 + 276);
      *(_DWORD *)(v1 + 276) = v5 | v2;
      uint64_t v1 = *(void *)(v1 + 80);
    }
    while (v1);
    if (!(v5 | v4) && v2 != 0)
    {
      if (v7)
      {
        SKCSceneNode::notifyDirtyState(v7);
      }
    }
  }
}

BOOL SKCNode::getNeedsUpdate(SKCNode *this)
{
  return (*((unsigned char *)this + 272) & 4) != 0 && !*((unsigned char *)this + 172) && (*((unsigned char *)this + 171) & 0x60) != 0;
}

float32x4_t ___ZN7SKCNode36resolveWorldPositionRotationAndScaleEPDv4_fS1_S1__block_invoke(void *a1, float32x4_t *a2)
{
  *(double *)v4.i64 = (*(double (**)(float32x4_t *))(a2->i64[0] + 104))(a2);
  int v5 = *(float32x2_t **)(a1[4] + 8);
  *(float32x4_t *)v5[4].f32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v4, COERCE_FLOAT(*(_OWORD *)v5[4].f32)), v6, v5[4], 1), v7, *(float32x4_t *)v5[4].f32, 2), v8, *(float32x4_t *)v5[4].f32, 3);
  *(float32x4_t *)(*(void *)(a1[5] + 8) + 32) = vaddq_f32(a2[33], *(float32x4_t *)(*(void *)(a1[5] + 8) + 32));
  float v9 = *(float32x4_t **)(a1[6] + 8);
  float32x4_t result = vmulq_f32(a2[34], v9[2]);
  v9[2] = result;
  return result;
}

double SKCNode::getTransformMatrix(__n128 *this, double a2, double a3, __n128 a4, __n128 a5, double a6, double a7, __n128 a8, __n128 a9)
{
  if (!this[23].n128_u8[0])
  {
    a8 = this[24];
    return a8.n128_f64[0];
  }
  float32x4_t v10 = (float32x4_t)this[32];
  float v11 = this[33].n128_f32[2];
  a5.n128_u32[0] = HIDWORD(this[34].n128_u64[0]);
  a4.n128_f32[0] = a5.n128_f32[0] + -1.0;
  if ((COERCE_UNSIGNED_INT(COERCE_FLOAT(*(_OWORD *)&this[34]) + -1.0) & 0x60000000) == 0
    && (COERCE_UNSIGNED_INT(a5.n128_f32[0] + -1.0) & 0x60000000) == 0)
  {
    if ((LODWORD(v11) & 0x60000000) == 0)
    {
      int v18 = 0;
      goto LABEL_14;
    }
    long long v31 = *MEMORY[0x263EF89A8];
    long long v33 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    __n128 v35 = *(__n128 *)(MEMORY[0x263EF89A8] + 32);
    __n128 v37 = *(__n128 *)(MEMORY[0x263EF89A8] + 48);
    uint64_t v39 = this[32].n128_i64[0];
    __float2 v19 = __sincosf_stret(v11);
    a9.n128_u64[1] = *((void *)&v33 + 1);
    a4 = v35;
    a8.n128_u64[1] = *((void *)&v31 + 1);
    a5 = v37;
    v10.i64[0] = v39;
    a8.n128_u64[0] = __PAIR64__(LODWORD(v19.__sinval), LODWORD(v19.__cosval));
    a9.n128_f32[0] = -v19.__sinval;
    a9.n128_u32[1] = LODWORD(v19.__cosval);
  }
  else
  {
    __n128 v13 = *(__n128 *)(MEMORY[0x263EF89A8] + 16);
    a5 = *(__n128 *)(MEMORY[0x263EF89A8] + 48);
    a8 = *(__n128 *)MEMORY[0x263EF89A8];
    a8.n128_u32[0] = (unsigned __int32)this[34];
    a9 = v13;
    a9.n128_u32[1] = HIDWORD(this[34].n128_u64[0]);
    a4 = *(__n128 *)(MEMORY[0x263EF89A8] + 32);
    a4.n128_u32[2] = 1.0;
    if ((LODWORD(v11) & 0x60000000) != 0)
    {
      float32x4_t v36 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
      __n128 v38 = this[32];
      __n128 v30 = a8;
      __n128 v32 = a9;
      __n128 v34 = a4;
      uint64_t v28 = v13.n128_i64[1];
      uint64_t v29 = *(void *)(MEMORY[0x263EF89A8] + 8);
      float32x4_t v27 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
      __float2 v14 = __sincosf_stret(v11);
      v17.i64[1] = v28;
      v16.i64[1] = v29;
      unint64_t v15 = 0;
      v16.i64[0] = __PAIR64__(LODWORD(v14.__sinval), LODWORD(v14.__cosval));
      v17.f32[0] = -v14.__sinval;
      v17.i32[1] = LODWORD(v14.__cosval);
      __n128 v40 = v30;
      __n128 v41 = v32;
      __n128 v42 = v34;
      __n128 v43 = (__n128)v36;
      do
      {
        *(float32x4_t *)((char *)&v44 + v15) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(*(_OWORD *)((char *)&v40 + v15))), v17, (float32x2_t)v40.n128_u64[v15 / 8], 1), v27, *(float32x4_t *)((char *)&v40 + v15), 2), v36, *(float32x4_t *)((char *)&v40 + v15), 3);
        v15 += 16;
      }
      while (v15 != 64);
      a8 = v44;
      a9 = v45;
      int v18 = 1;
      a4 = v46;
      a5 = v47;
      v10.i64[0] = v38.n128_u64[0];
      goto LABEL_14;
    }
  }
  int v18 = 1;
LABEL_14:
  int32x2_t v20 = vceqz_s32((int32x2_t)vand_s8((int8x8_t)vrev64_s32(*(int32x2_t *)v10.f32), (int8x8_t)0x6000000060000000));
  if (v20.i32[1] & v20.i32[0])
  {
    if ((v18 & 1) == 0)
    {
      a8 = *(__n128 *)MEMORY[0x263EF89A8];
      a9 = *(__n128 *)(MEMORY[0x263EF89A8] + 16);
      a4 = *(__n128 *)(MEMORY[0x263EF89A8] + 32);
      a5 = *(__n128 *)(MEMORY[0x263EF89A8] + 48);
    }
  }
  else
  {
    float32x4_t v21 = *(float32x4_t *)MEMORY[0x263EF89A8];
    float32x4_t v22 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
    float32x4_t v24 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
    long long v23 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    DWORD2(v23) = 0;
    v10.i64[1] = *((void *)&v23 + 1);
    if (v18)
    {
      unint64_t v25 = 0;
      __n128 v40 = a8;
      __n128 v41 = a9;
      __n128 v42 = a4;
      __n128 v43 = a5;
      do
      {
        *(float32x4_t *)((char *)&v44 + v25) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v21, COERCE_FLOAT(*(_OWORD *)((char *)&v40 + v25))), v22, (float32x2_t)v40.n128_u64[v25 / 8], 1), v24, *(float32x4_t *)((char *)&v40 + v25), 2), v10, *(float32x4_t *)((char *)&v40 + v25), 3);
        v25 += 16;
      }
      while (v25 != 64);
      a8 = v44;
      a9 = v45;
      a4 = v46;
      a5 = v47;
    }
    else
    {
      a8 = *(__n128 *)MEMORY[0x263EF89A8];
      a9 = *(__n128 *)(MEMORY[0x263EF89A8] + 16);
      a4 = *(__n128 *)(MEMORY[0x263EF89A8] + 32);
      a5 = (__n128)v10;
    }
  }
  this[24] = a8;
  this[25] = a9;
  this[26] = a4;
  this[27] = a5;
  this[23].n128_u8[0] = 0;
  return a8.n128_f64[0];
}

__n128 SKCNode::getInverseTransformMatrix(simd_float4x4 *this)
{
  if (this[5].columns[3].i8[1])
  {
    *(double *)v3.columns[0].i64 = (*(double (**)(simd_float4x4 *))(this->columns[0].i64[0] + 104))(this);
    simd_float4x4 v4 = __invert_f4(v3);
    this[7] = v4;
    this[5].columns[3].i8[1] = 0;
  }
  else
  {
    v4.columns[0] = this[7].columns[0];
  }
  return (__n128)v4.columns[0];
}

uint64_t SKCNode::removeAllChildren(SKCNode *this)
{
  uint64_t result = SKCNode::cleanup(this);
  uint64_t v3 = *((void *)this + 11);
  uint64_t v4 = *((void *)this + 12);
  if (v3 != v4)
  {
    uint64_t v5 = *((void *)this + 11);
    do
    {
      if (*(SKCNode **)(*(void *)v5 + 80) == this) {
        *(void *)(*(void *)v5 + 80) = 0;
      }
      v5 += 8;
    }
    while (v5 != v4);
  }
  *((void *)this + 12) = v3;
  uint64_t v6 = *((void *)this + 14);
  uint64_t v7 = *((void *)this + 15);
  if (v6 != v7)
  {
    uint64_t v8 = *((void *)this + 14);
    do
    {
      if (*(SKCNode **)(*(void *)v8 + 80) == this) {
        *(void *)(*(void *)v8 + 80) = 0;
      }
      v8 += 8;
    }
    while (v8 != v7);
  }
  *((void *)this + 15) = v6;
  return result;
}

void SKCNode::~SKCNode(id *this)
{
  *this = &unk_26BEED8D8;
  SKCNode::removeAllChildren((SKCNode *)this);
  int v2 = (std::__shared_weak_count *)this[33];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  std::__list_imp<SKCRenderSortInfo *>::clear(this + 25);
  std::__list_imp<SKCRenderSortInfo *>::clear(this + 22);

  id v3 = this[17];
  if (v3)
  {
    this[18] = v3;
    operator delete(v3);
  }
  id v4 = this[14];
  if (v4)
  {
    this[15] = v4;
    operator delete(v4);
  }
  id v5 = this[11];
  if (v5)
  {
    this[12] = v5;
    operator delete(v5);
  }

  std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::~__hash_table((uint64_t)(this + 3));
}

{
  uint64_t vars8;

  SKCNode::~SKCNode(this);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    int v2 = a2;
    do
    {
      id v3 = (void *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,SKAttributeValue * {__strong}>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      int v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,SKAttributeValue * {__strong}>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
  {
    int v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__emplace_unique_key_args<std::string,std::pair<std::string,SKAttributeValue * {__strong}>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    __n128 v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  float32x4_t v16 = operator new(0x30uLL);
  long long v17 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + SKCNode::setFlags(this, 66, 1) = 0;
  uint64_t v18 = *((void *)a3 + 2);
  uint64_t v19 = *((void *)a3 + 3);
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  v29[0] = v16;
  v29[1] = a1 + 16;
  void *v16 = 0;
  v16[1] = v9;
  *((_OWORD *)v16 + SKCNode::setFlags(this, 66, 1) = v17;
  _OWORD v16[4] = v18;
  void v16[5] = v19;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *uint64_t v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v27 >= v10) {
          v27 %= v10;
        }
      }
      else
      {
        v27 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_20AE0E418(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      BOOL v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,SKAttributeValue * {__strong}>,0>((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void *std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__find_equal<std::string>(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        int v9 = (const void **)(v4 + 32);
        if (!std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!std::less<std::string>::operator()[abi:ne180100](v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x48uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_20AE0EBA4(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

BOOL std::less<std::string>::operator()[abi:ne180100](uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<jet_buffer_pool>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<jet_buffer_pool>>,0>(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int v3 = *(void **)a1;
    operator delete(v3);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, long long **a4)
{
  uint64_t v8 = (void *)(a1 + 24);
  unint64_t v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = v9;
      if (v9 >= v11) {
        unint64_t v4 = v9 % v11;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v9;
    }
    BOOL v14 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      for (uint64_t i = *v14; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v16 = *((void *)i + 1);
        if (v16 == v10)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11) {
              v16 %= v11;
            }
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4) {
            break;
          }
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *(void *)v26[0] = *v23;
    *uint64_t v23 = v26[0];
  }
  else
  {
    *(void *)v26[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v26[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v26[0])
    {
      unint64_t v24 = *(void *)(*(void *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11) {
          v24 %= v11;
        }
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v24) = v26[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_20AE0EF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  uint64_t v8 = operator new(0x30uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  unint64_t v9 = (std::string *)(v8 + 2);
  unint64_t v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
  }
  else
  {
    long long v11 = *v10;
    _OWORD v8[4] = *((void *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  *(unsigned char *)(a4 + 16) = 1;
}

void sub_20AE0EFF8(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

char *std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  size_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    unint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      float v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v9, v17);
    }
    else {
      float v18 = 0;
    }
    uint64_t v28 = &v18[8 * v15];
    std::string __p = v18;
    uint64_t v34 = v28;
    uint64_t v36 = &v18[8 * v17];
    uint64_t v29 = 8 * a5;
    uint64_t v30 = &v28[8 * a5];
    do
    {
      uint64_t v31 = *(void *)v7;
      v7 += 8;
      *(void *)uint64_t v28 = v31;
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    uint64_t v35 = v30;
    size_t v5 = std::vector<SKCNode *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 3;
  if (v20 >= a5)
  {
    unint64_t v21 = &__src[8 * a5];
    uint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    unint64_t v24 = &v5[8 * a5];
    uint64_t v25 = &v23[-8 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        uint64_t v27 = *(void *)v25;
        v25 += 8;
        *(void *)uint64_t v26 = v27;
        v26 += 8;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-8 * ((v23 - v24) >> 3)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  unint64_t v21 = &__src[8 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[8 * v20], a4 - v21);
  }
  uint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

void sub_20AE0F1E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<SKCNode *>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  size_t v5 = *(char **)(a2 + 8);
  uint64_t v6 = (char *)*a1;
  uint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - SKCNode::setFlags(this, 66, 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    uint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

uint64_t *std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__wrap_iter<SKCNode **>,std::__wrap_iter<SKCNode **>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x18uLL);
    uint64_t v9 = v8;
    void *v8 = 0;
    v8[1] = 0;
    uint64_t v11 = *a3;
    uint64_t v10 = a3 + 1;
    v8[2] = v11;
    uint64_t v12 = 1;
    if (v10 != a4)
    {
      unint64_t v13 = v8;
      do
      {
        uint64_t v8 = operator new(0x18uLL);
        void *v8 = v13;
        v8[1] = 0;
        uint64_t v14 = *v10++;
        v8[2] = v14;
        v13[1] = v8;
        ++v12;
        unint64_t v13 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v15 = *a2;
    *(void *)(v15 + 8) = v9;
    *uint64_t v9 = v15;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v12;
    return v9;
  }
  return a2;
}

void sub_20AE0F3B4(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20AE0F3D4(_Unwind_Exception *a1)
{
}

void *std::vector<SKCNode *>::__init_with_size[abi:ne180100]<SKCNode **,SKCNode **>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE11__vallocateB8ne180100Em(result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20AE0F448(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::list<SKCAction *>::splice(uint64_t result, uint64_t *a2, uint64_t a3, void *a4, void *a5)
{
  if (a4 != a5)
  {
    size_t v5 = (void *)*a5;
    if (result != a3)
    {
      uint64_t v6 = 1;
      if (v5 != a4)
      {
        uint64_t v7 = a4;
        do
        {
          uint64_t v7 = (void *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(void *)(a3 + 16) -= v6;
      *(void *)(result + 16) += v6;
    }
    uint64_t v8 = *a4;
    *(void *)(v8 + 8) = v5[1];
    *(void *)v5[1] = v8;
    uint64_t v9 = *a2;
    *(void *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

uint64_t *std::list<SKCNode *>::__insert_with_sentinel[abi:ne180100]<std::__list_iterator<SKCNode *,void *>,std::__list_iterator<SKCNode *,void *>>(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x18uLL);
    uint64_t v9 = v8;
    void *v8 = 0;
    v8[1] = 0;
    v8[2] = *(void *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = v8;
      do
      {
        uint64_t v8 = operator new(0x18uLL);
        void *v8 = v12;
        v8[1] = 0;
        v8[2] = *(void *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    *uint64_t v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

void sub_20AE0F5B0(void *a1)
{
  __cxa_begin_catch(a1);
  do
  {
    uint64_t v2 = (void *)*v1;
    operator delete(v1);
    uint64_t v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_20AE0F5D0(_Unwind_Exception *a1)
{
}

uint64_t std::list<SKCNode *>::splice(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    unint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    *unint64_t v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

uint64_t _ZNSt3__14listINS_5tupleIJP7SKCNodefjbEEENS_9allocatorIS4_EEE6__sortIZNS2_18sortedNodesAtPointEDv4_fPNS0_IS3_NS5_IS3_EEEEE3__0EENS_15__list_iteratorIS4_PvEESG_SG_mRT_(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3 < 2) {
    return result;
  }
  if (a3 != 2)
  {
    unint64_t v8 = a3 >> 1;
    unint64_t v9 = (a3 >> 1) + 1;
    uint64_t v10 = result;
    do
    {
      uint64_t v10 = *(void *)(v10 + 8);
      --v9;
    }
    while (v9 > 1);
    uint64_t v11 = _ZNSt3__14listINS_5tupleIJP7SKCNodefjbEEENS_9allocatorIS4_EEE6__sortIZNS2_18sortedNodesAtPointEDv4_fPNS0_IS3_NS5_IS3_EEEEE3__0EENS_15__list_iteratorIS4_PvEESG_SG_mRT_(result, v10, a3 >> 1);
    uint64_t result = _ZNSt3__14listINS_5tupleIJP7SKCNodefjbEEENS_9allocatorIS4_EEE6__sortIZNS2_18sortedNodesAtPointEDv4_fPNS0_IS3_NS5_IS3_EEEEE3__0EENS_15__list_iteratorIS4_PvEESG_SG_mRT_(v10, a2, a3 - v8);
    float v12 = *(float *)(v11 + 24);
    unsigned int v13 = *(_DWORD *)(v11 + 28);
    int v14 = *(unsigned __int8 *)(v11 + 32);
    if (*(unsigned __int8 *)(result + 32) == v14)
    {
      float v15 = *(float *)(result + 24);
      if ((COERCE_UNSIGNED_INT(v15 - v12) & 0x60000000) != 0)
      {
        if (v15 <= v12)
        {
LABEL_12:
          uint64_t v16 = *(uint64_t **)(v11 + 8);
          uint64_t i = result;
          uint64_t result = v11;
          goto LABEL_28;
        }
      }
      else if (*(_DWORD *)(result + 28) <= v13)
      {
        goto LABEL_12;
      }
    }
    else if (!*(unsigned char *)(result + 32))
    {
      goto LABEL_12;
    }
    for (uint64_t i = *(void *)(result + 8); i != a2; uint64_t i = *(void *)(i + 8))
    {
      if (*(unsigned __int8 *)(i + 32) == v14)
      {
        float v18 = *(float *)(i + 24);
        if ((COERCE_UNSIGNED_INT(v18 - v12) & 0x60000000) != 0)
        {
          if (v18 <= v12) {
            goto LABEL_27;
          }
        }
        else if (*(_DWORD *)(i + 28) <= v13)
        {
          goto LABEL_27;
        }
      }
      else if (!*(unsigned char *)(i + 32))
      {
        goto LABEL_27;
      }
    }
    uint64_t i = a2;
LABEL_27:
    uint64_t v19 = *(void *)i;
    uint64_t v20 = *(void *)result;
    *(void *)(v20 + 8) = *(void *)(*(void *)i + 8);
    **(void **)(v19 + 8) = v20;
    uint64_t v21 = *(void *)v11;
    uint64_t v16 = *(uint64_t **)(v11 + 8);
    *(void *)(v21 + 8) = result;
    *(void *)uint64_t result = v21;
    *(void *)uint64_t v11 = v19;
    *(void *)(v19 + 8) = v11;
LABEL_28:
    if (v16 != (uint64_t *)i && i != a2)
    {
      uint64_t v22 = i;
      while (1)
      {
        float v23 = *((float *)v16 + 6);
        unsigned int v24 = *((_DWORD *)v16 + 7);
        int v25 = *((unsigned __int8 *)v16 + 32);
        if (*(unsigned __int8 *)(v22 + 32) == v25)
        {
          float v26 = *(float *)(v22 + 24);
          if ((COERCE_UNSIGNED_INT(v26 - v23) & 0x60000000) != 0)
          {
            if (v26 > v23) {
              goto LABEL_36;
            }
          }
          else if (*(_DWORD *)(v22 + 28) > v24)
          {
LABEL_36:
            for (uint64_t j = *(void *)(v22 + 8); j != a2; uint64_t j = *(void *)(j + 8))
            {
              if (*(unsigned __int8 *)(j + 32) == v25)
              {
                float v28 = *(float *)(j + 24);
                if ((COERCE_UNSIGNED_INT(v28 - v23) & 0x60000000) != 0)
                {
                  if (v28 <= v23) {
                    goto LABEL_47;
                  }
                }
                else if (*(_DWORD *)(j + 28) <= v24)
                {
                  goto LABEL_47;
                }
              }
              else if (!*(unsigned char *)(j + 32))
              {
                goto LABEL_47;
              }
            }
            uint64_t j = a2;
LABEL_47:
            uint64_t v29 = *(void *)j;
            uint64_t v30 = *(void *)v22;
            *(void *)(v30 + 8) = *(void *)(*(void *)j + 8);
            **(void **)(v29 + 8) = v30;
            if (i == v22) {
              uint64_t i = j;
            }
            uint64_t v32 = *v16;
            uint64_t v31 = (uint64_t *)v16[1];
            *(void *)(v32 + 8) = v22;
            *(void *)uint64_t v22 = v32;
            uint64_t *v16 = v29;
            *(void *)(v29 + 8) = v16;
            uint64_t v22 = j;
            uint64_t v16 = v31;
            goto LABEL_50;
          }
        }
        else if (*(unsigned char *)(v22 + 32))
        {
          goto LABEL_36;
        }
        uint64_t v16 = (uint64_t *)v16[1];
LABEL_50:
        if (v16 == (uint64_t *)i || v22 == a2) {
          return result;
        }
      }
    }
    return result;
  }
  unint64_t v4 = *(float **)a2;
  if (*(unsigned __int8 *)(*(void *)a2 + 32) == *(unsigned __int8 *)(result + 32))
  {
    float v5 = v4[6];
    float v6 = *(float *)(result + 24);
    if ((COERCE_UNSIGNED_INT(v5 - v6) & 0x60000000) != 0)
    {
      if (v5 <= v6) {
        return result;
      }
    }
    else if (*((_DWORD *)v4 + 7) <= *(_DWORD *)(result + 28))
    {
      return result;
    }
  }
  else if (!*(unsigned char *)(*(void *)a2 + 32))
  {
    return result;
  }
  uint64_t v33 = *(void *)v4;
  *(void *)(v33 + 8) = *((void *)v4 + 1);
  **((void **)v4 + SKCNode::setFlags(this, 66, 1) = v33;
  uint64_t v34 = *(void *)result;
  *(void *)(v34 + 8) = v4;
  *(void *)unint64_t v4 = v34;
  *(void *)uint64_t result = v4;
  *((void *)v4 + SKCNode::setFlags(this, 66, 1) = result;
  return (uint64_t)v4;
}

float32x2_t sk_vector_make(float64x2_t *a1)
{
  return vcvt_f32_f64(*a1);
}

double sk_vector_make(const _GLKVector2 *a1)
{
  return *(double *)a1;
}

double sk_vector_make(const _GLKVector3 *a1)
{
  return *(double *)&a1->x;
}

__n128 sk_vector_make(const _GLKVector4 *a1)
{
  return *(__n128 *)a1;
}

double sk_matrix_make(const _GLKMatrix2 *a1)
{
  return *(double *)&a1->m00;
}

double sk_matrix_make(const _GLKMatrix3 *a1)
{
  return *(double *)&a1->m00;
}

__n128 sk_matrix_make(const _GLKMatrix4 *a1)
{
  return *(__n128 *)&a1->m00;
}

__n128 glsk_matrix_make@<Q0>(const _GLKMatrix4 *a1@<X0>, uint64_t a2@<X8>)
{
  long long v2 = *(_OWORD *)&a1->m[4];
  *(_OWORD *)a2 = *(_OWORD *)&a1->m00;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)&a1->m[8];
  long long v4 = *(_OWORD *)&a1->m[12];
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v4;
  return result;
}

double sk_matrix_get_GLKMatrix(const simd_float2x2 *a1)
{
  return *(double *)a1->columns;
}

uint64_t sk_matrix_get_GLKMatrix@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  for (uint64_t i = 0; i != 3; ++i)
  {
    uint64_t v3 = 0;
    long long v4 = *(_OWORD *)(result + 16 * i);
    do
    {
      long long v5 = v4;
      *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)((unint64_t)&v5 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
      ++v3;
    }
    while (v3 != 3);
    a2 += 12;
  }
  return result;
}

{
  uint64_t i;
  uint64_t v3;
  long long v4;
  long long v5;

  for (uint64_t i = 0; i != 4; ++i)
  {
    uint64_t v3 = 0;
    long long v4 = *(_OWORD *)(result + 16 * i);
    do
    {
      long long v5 = v4;
      *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)((unint64_t)&v5 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
      ++v3;
    }
    while (v3 != 4);
    a2 += 16;
  }
  return result;
}

void sub_20AE0FBB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE0FE60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE10500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_20AE106B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE10738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE10890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)SKScene;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20AE109E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE10B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE10D08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE10E50(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C40056B4FAFLL);
  _Unwind_Resume(a1);
}

void sub_20AE11248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE1150C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE11604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE11694(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 CGPointConvertFromViewToScene(SKView *a1, SKScene *a2, CGPoint a3)
{
  double y = a3.y;
  double x = a3.x;
  float v6 = a1;
  uint64_t v7 = a2;
  unint64_t v8 = [(SKNode *)v7 _backingNode];
  [(SKView *)v6 bounds];
  double v10 = v9;
  [(SKView *)v6 bounds];
  *(float *)&double v11 = v10;
  float v13 = v12;
  SKCSceneNode::matrixForDestination(v8, v11, v13);
  simd_float4 v50 = v15;
  simd_float4 v51 = v14;
  simd_float4 v52 = v17;
  simd_float4 v53 = v16;
  [(SKView *)v6 bounds];
  double v19 = v18;
  [(SKView *)v6 bounds];
  double v21 = v20;
  [(SKView *)v6 bounds];
  double v23 = v22;
  [(SKView *)v6 bounds];
  double v25 = v24;
  if (SKGetGlobalFlippedFlag()) {
    unsigned int v26 = -1;
  }
  else {
    unsigned int v26 = 0;
  }
  if (v6 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    [(SKView *)v6 getViewTransform];
    uint64_t v31 = 0;
    v55[0] = v51;
    v55[1] = v50;
    v55[2] = v53;
    v55[3] = v52;
    do
    {
      v56[v31] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(v55[v31])), v28, *(float32x2_t *)&v55[v31], 1), v29, (float32x4_t)v55[v31], 2), v30, (float32x4_t)v55[v31], 3);
      ++v31;
    }
    while (v31 != 4);
    simd_float4 v50 = (simd_float4)v56[1];
    simd_float4 v51 = (simd_float4)v56[0];
    simd_float4 v52 = (simd_float4)v56[3];
    simd_float4 v53 = (simd_float4)v56[2];
  }
  v32.f32[0] = x;
  float32_t v33 = y;
  v32.f32[1] = v33;
  v32.i32[2] = 0;
  v32.i32[3] = 1.0;
  *(float *)&unsigned int v34 = v19;
  *(float *)&unsigned int v35 = v21;
  unint64_t v36 = __PAIR64__(v35, v34);
  *(float *)&unsigned int v37 = v23;
  *(float *)&unsigned int v38 = v25;
  __asm { FMOV            V4.4S, #1.0 }
  _Q4.i64[0] = __PAIR64__(v38, v37);
  v44.i64[0] = 0x4000000040000000;
  v44.i64[1] = 0x4000000040000000;
  __asm { FMOV            V2.4S, #-1.0 }
  float32x4_t v46 = vmlaq_f32(_Q2, v44, vdivq_f32(vsubq_f32(v32, (float32x4_t)v36), _Q4));
  int8x16_t v47 = (int8x16_t)v46;
  v47.i32[1] = vnegq_f32(v46).i32[1];
  float32x4_t v49 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v26), (int8x16_t)v46, v47);
  v57.columns[1] = v50;
  v57.columns[0] = v51;
  v57.columns[3] = v52;
  v57.columns[2] = v53;
  simd_float4x4 v58 = __invert_f4(v57);
  float64x2_t v54 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v58.columns[0], v49.f32[0]), (float32x4_t)v58.columns[1], *(float32x2_t *)v49.f32, 1), (float32x4_t)v58.columns[2], v49, 2), (float32x4_t)v58.columns[3], v49, 3));

  return (__n128)v54;
}

void sub_20AE1189C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE1193C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 CGPointConvertFromSceneToView(SKScene *a1, SKView *a2, CGPoint a3)
{
  double y = a3.y;
  double x = a3.x;
  float v6 = a1;
  uint64_t v7 = a2;
  unint64_t v8 = [(SKNode *)v6 _backingNode];
  [(SKView *)v7 bounds];
  double v10 = v9;
  [(SKView *)v7 bounds];
  *(float *)&double v11 = v10;
  float v13 = v12;
  SKCSceneNode::matrixForDestination(v8, v11, v13);
  long long v48 = v14;
  long long v50 = v15;
  long long v52 = v17;
  float32x4_t v54 = v16;
  if (v7 && (objc_opt_respondsToSelector() & 1) != 0)
  {
    [(SKView *)v7 getViewTransform];
    uint64_t v22 = 0;
    v56[0] = v48;
    v56[1] = v50;
    v56[2] = v54;
    v56[3] = v52;
    do
    {
      v57[v22] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v18, COERCE_FLOAT(v56[v22])), v19, *(float32x2_t *)&v56[v22], 1), v20, (float32x4_t)v56[v22], 2), v21, (float32x4_t)v56[v22], 3);
      ++v22;
    }
    while (v22 != 4);
    long long v48 = v57[0];
    long long v50 = v57[1];
    long long v52 = v57[3];
    float32x4_t v54 = (float32x4_t)v57[2];
  }
  [(SKView *)v7 bounds];
  double v24 = v23;
  [(SKView *)v7 bounds];
  double v26 = v25;
  [(SKView *)v7 bounds];
  double v28 = v27;
  [(SKView *)v7 bounds];
  double v30 = v29;
  char v31 = SKGetGlobalFlippedFlag();
  float v32 = x;
  float v33 = y;
  float32x4_t v34 = vaddq_f32(v53, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v49, v32), v51, v33), (float32x4_t)0, v54));
  __asm { FMOV            V0.4S, #1.0 }
  v40.i64[0] = 0x3F0000003F000000;
  v40.i64[1] = 0x3F0000003F000000;
  float32x4_t v41 = vmulq_f32(vaddq_f32(v34, _Q0), v40);
  if ((v31 & 1) == 0) {
    v41.f32[1] = 1.0 - v41.f32[1];
  }
  *(float *)&unsigned int v42 = v30;
  *(float *)&unsigned int v43 = v28;
  _Q0.i64[0] = __PAIR64__(v42, v43);
  float v44 = v24;
  *(float *)&unint64_t v45 = v44;
  float v46 = v26;
  *((float *)&v45 + SKCNode::setFlags(this, 66, 1) = v46;
  float64x2_t v55 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vmlaq_f32((float32x4_t)v45, _Q0, v41));

  return (__n128)v55;
}

void sub_20AE11B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE11EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE12078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE121AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE122F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE123D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE12458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE13DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PKCAether::Evaluator::~Evaluator(PKCAether::Evaluator *this)
{
  long long v2 = (void *)*((void *)this + 3);
  if (v2)
  {
    *((void *)this + 4) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void **)this;
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

void sub_20AE149DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE1517C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

double CGRectConvertFrameFromNodeToView(SKNode *a1, SKView *a2)
{
  uint64_t v3 = a1;
  long long v4 = a2;
  long long v5 = v3;
  float v6 = v4;
  [(SKNode *)v5 calculateAccumulatedFrame];
  double v8 = v7;
  CGFloat v10 = v9;
  CGFloat v12 = v11;
  CGFloat v14 = v13;
  long long v15 = [(SKNode *)v5 scene];

  if (v15)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      v30.origin.double x = v8;
      v30.origin.double y = v10;
      v30.size.CGFloat width = v12;
      v30.size.CGFloat height = v14;
      double MinX = CGRectGetMinX(v30);
      v31.origin.double x = v8;
      v31.origin.double y = v10;
      v31.size.CGFloat width = v12;
      v31.size.CGFloat height = v14;
      double MinY = CGRectGetMinY(v31);
      float32x4_t v18 = [(SKNode *)v5 scene];
      -[SKView convertPoint:fromScene:](v6, "convertPoint:fromScene:", v18, MinX, MinY);
      unint64_t v20 = v19;

      v32.origin.double x = v8;
      v32.origin.double y = v10;
      v32.size.CGFloat width = v12;
      v32.size.CGFloat height = v14;
      double MaxX = CGRectGetMaxX(v32);
      v33.origin.double x = v8;
      v33.origin.double y = v10;
      v33.size.CGFloat width = v12;
      v33.size.CGFloat height = v14;
      double MaxY = CGRectGetMaxY(v33);
      double v23 = [(SKNode *)v5 scene];
      -[SKView convertPoint:fromScene:](v6, "convertPoint:fromScene:", v23, MaxX, MaxY);
    }
    else
    {
      double v24 = [(SKNode *)v5 scene];
      v34.origin.double x = v8;
      v34.origin.double y = v10;
      v34.size.CGFloat width = v12;
      v34.size.CGFloat height = v14;
      CGFloat v25 = CGRectGetMinX(v34);
      v35.origin.double x = v8;
      v35.origin.double y = v10;
      v35.size.CGFloat width = v12;
      v35.size.CGFloat height = v14;
      v28.double y = CGRectGetMinY(v35);
      v28.double x = v25;
      unint64_t v20 = CGPointConvertFromSceneToView(v24, v6, v28).n128_u64[0];

      double v23 = [(SKNode *)v5 scene];
      v36.origin.double x = v8;
      v36.origin.double y = v10;
      v36.size.CGFloat width = v12;
      v36.size.CGFloat height = v14;
      CGFloat v26 = CGRectGetMaxX(v36);
      v37.origin.double x = v8;
      v37.origin.double y = v10;
      v37.size.CGFloat width = v12;
      v37.size.CGFloat height = v14;
      v29.double y = CGRectGetMaxY(v37);
      v29.double x = v26;
      CGPointConvertFromSceneToView(v23, v6, v29);
    }
    double v8 = *(double *)&v20;
  }
  return v8;
}

void sub_20AE156D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE1578C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(PKCField *)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x21052EA30);
}

void std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<PKCField>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<PKCField>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void sub_20AE15AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(PKCField *)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void SKCEmitterNode::computeZPostion(SKCEmitterNode *this)
{
  float v2 = *((float *)this + 188) + 0.01;
  if ((SKGetLinkedOnOrAfter(589824) & 1) == 0) {
    float v2 = v2 + SKCNode::getZTranslation(this);
  }
  uint64_t v3 = (SKCNode *)*((void *)this + 74);
  if (v3)
  {
    SKCNode::setZTranslation(v3, v2);
  }
}

void SKCEmitterNode::update(SKCEmitterNode *this, double a2, float a3)
{
  SKCNode::update(this, a2, 1.0);
  if (!*((unsigned char *)this + 172) && *((unsigned char *)this + 989))
  {
    SKCEmitterNode::updateParticles(this, a2, v5, 0);
  }
}

void SKCEmitterNode::updateParticles(SKCEmitterNode *this, double a2, float a3, int a4)
{
  uint64_t v216 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 988)) {
    SKCEmitterNode::initializeSystem(this);
  }
  id WeakRetained = objc_loadWeakRetained((id *)this + 71);
  if (!WeakRetained) {
    id WeakRetained = *((id *)this + 1);
  }
  uint64_t v8 = [WeakRetained _backingNode];
  if (*(void *)(*((void *)this + 74) + 80) != v8) {
    SKCEmitterNode::addParticlesToTargetNode((id *)this);
  }
  v9.n128_f64[0] = a2 - *((double *)this + 88);
  v9.n128_f32[0] = v9.n128_f64[0];
  int32x2_t v174 = (int32x2_t)v9.n128_u64[0];
  *((double *)this + 9SKCNode::setFlags(this, 66, 1) = *((double *)this + 91) + v9.n128_f32[0];
  if (*((unsigned char *)this + 560))
  {
    (***((void (****)(void, __n128))this + 75))(*((void *)this + 75), v9);
    uint64_t v10 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
    uint64_t v11 = *(void *)(SKCParticleSystem::getSlice(v10, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v12 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "deathTime");
    uint64_t v13 = *(void *)(SKCParticleSystem::getSlice(v12, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v14 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
    uint64_t v15 = *(void *)(SKCParticleSystem::getSlice(v14, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v16 = *(unsigned int *)(*((void *)this + 75) + 84);
    if ((int)v16 < 4)
    {
      LODWORD(v17) = 0;
    }
    else
    {
      unint64_t v17 = 0;
      float32x4_t v18 = (float *)(v11 + 8);
      unint64_t v19 = (float *)(v13 + 8);
      unint64_t v20 = (float *)(v15 + 8);
      do
      {
        float v21 = *(v18 - 2);
        float v22 = *(v18 - 1);
        float v23 = *v18;
        float v24 = v18[1];
        v18 += 4;
        float v25 = (a2 - v21) / (float)(*(v19 - 2) - v21);
        *(v20 - 2) = v25;
        float v26 = (a2 - v22) / (float)(*(v19 - 1) - v22);
        *(v20 - SKCNode::setFlags(this, 66, 1) = v26;
        float v27 = (a2 - v23) / (float)(*v19 - v23);
        *unint64_t v20 = v27;
        v17 += 4;
        float v28 = (a2 - v24) / (float)(v19[1] - v24);
        v20[1] = v28;
        v19 += 4;
        v20 += 4;
      }
      while (v17 < (v16 - 3));
    }
    if ((int)v17 < (int)v16)
    {
      CGPoint v29 = (float *)(v15 + 4 * v17);
      CGRect v30 = (float *)(v13 + 4 * v17);
      CGRect v31 = (float *)(v11 + 4 * v17);
      uint64_t v32 = v16 - v17;
      do
      {
        float v33 = *v31++;
        float v34 = v33;
        double v35 = a2 - v33;
        float v36 = *v30++;
        float v37 = v35 / (float)(v36 - v34);
        *v29++ = v37;
        --v32;
      }
      while (v32);
    }
    if (*((_DWORD *)this + 244))
    {
      unsigned int v38 = SKCNode::getScene(this);
      unint64_t v39 = [v38 physicsWorld];

      uint64_t v40 = [v39 aether];
    }
    else
    {
      uint64_t v40 = 0;
    }
    MEMORY[0x21052E950](v208, v40);
    if (v40)
    {
      uint64_t v211 = 0;
      CGFloat v212 = &v211;
      uint64_t v213 = 0x3020000000;
      uint64_t v214 = 0;
      uint64_t v215 = 0;
      id v41 = objc_loadWeakRetained((id *)this + 71);
      BOOL v42 = v41 == 0;

      if (v42) {
        unsigned int v43 = this;
      }
      else {
        unsigned int v43 = (SKCEmitterNode *)v8;
      }
      *((_OWORD *)v212 + 2) = xmmword_20AE9A910;
      v207[0] = MEMORY[0x263EF8330];
      v207[1] = 3221225472;
      v207[2] = ___ZN14SKCEmitterNode15updateParticlesEdfb_block_invoke;
      v207[3] = &unk_263FE9F18;
      v207[4] = &v211;
      SKCNode::walkUp((uint64_t)v43, v207, 1);
      long long v173 = *((_OWORD *)v212 + 2);
      uint64_t v44 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "vel");
      uint64_t v45 = *(void *)(SKCParticleSystem::getSlice(v44, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v46 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "pos");
      int8x16_t v47 = *(float32x2_t **)(SKCParticleSystem::getSlice(v46, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v48 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "accel");
      uint64_t v49 = *(void *)(SKCParticleSystem::getSlice(v48, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v50 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "override");
      uint64_t Slice = SKCParticleSystem::getSlice(v50, (const void **)__p);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v52 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "outVel");
      uint64_t v53 = SKCParticleSystem::getSlice(v52, (const void **)__p);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      SKCDataSlice::resize((void **)Slice, *(_DWORD *)(*((void *)this + 75) + 80));
      SKCDataSlice::resize((void **)v53, *(_DWORD *)(*((void *)this + 75) + 80));
      int v192 = -1;
      *(void *)&v193[4] = 0;
      *(void *)&v193[12] = 0;
      char v194 = 1;
      uint64_t v198 = 0;
      uint64_t v199 = 1;
      char v200 = 0;
      uint64_t v201 = 0;
      uint64_t v202 = 8;
      char v203 = 0;
      int v206 = 1065353216;
      __p[0] = 0;
      __p[1] = v47;
      uint64_t v178 = 8;
      char v179 = 0;
      uint64_t v180 = 0;
      uint64_t v181 = v45;
      uint64_t v182 = 8;
      char v183 = 0;
      int v184 = 1065353216;
      int v186 = 0;
      long long v185 = *(unsigned int *)v175;
      char v187 = 1;
      *(_OWORD *)&v175[4] = 0uLL;
      int v188 = 1065353216;
      int v190 = 0;
      long long v189 = *(_OWORD *)v175;
      char v191 = 1;
      uint64_t v195 = v49;
      uint64_t v196 = 8;
      char v197 = 0;
      uint64_t v204 = *((void *)this + 91);
      uint64_t v205 = v173;
      PKGet_INV_PTM_RATIO();
      int v206 = v54;
      int v55 = *((_DWORD *)this + 244);
      *(void *)&v175[12] = 0;
      *(void *)&v175[4] = 0;
      int v192 = v55;
      *(_OWORD *)unsigned int v193 = *(unsigned int *)v175;
      *(_DWORD *)&v193[16] = 0;
      char v194 = 1;
      uint64_t v198 = *(void *)(Slice + 16);
      uint64_t v199 = 1;
      char v200 = 0;
      uint64_t v201 = *(void *)(v53 + 16);
      uint64_t v202 = 8;
      char v203 = 0;
      PKCAether::Evaluator::evalFieldsVec2();
      uint64_t v56 = *((void *)this + 75);
      if (*((void *)this + 83))
      {
        std::string::basic_string[abi:ne180100]<0>(v175, "lifeRatio");
        uint64_t v57 = *(void *)(SKCParticleSystem::getSlice(v56, (const void **)v175) + 16);
        if (v176 < 0) {
          operator delete(*(void **)v175);
        }
        if (*(_DWORD *)(*((void *)this + 75) + 84))
        {
          uint64_t v58 = 0;
          float32x2_t v59 = (float32x2_t)vdup_lane_s32(v174, 0);
          do
          {
            float32x2_t v60 = *(float32x2_t *)(v49 + 8 * v58);
            float32x2_t v61 = *(float32x2_t *)(v45 + 8 * v58);
            float32x2_t v62 = v47[v58];
            float v63 = *(float *)(v57 + 4 * v58);
            *(_DWORD *)unint64_t v175 = 0;
            SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 83), v63, (float *)v175);
            float32x2_t v64 = vmla_n_f32(v61, vmul_n_f32(v60, *(float *)v174.i32), *(float *)v175);
            *(void *)(v49 + 8 * v58) = 0;
            *(float32x2_t *)(v45 + 8 * v58) = v64;
            v47[v58++] = vadd_f32(vmla_f32(v62, v61, v59), vmul_n_f32(vmul_f32(vsub_f32(v64, v61), (float32x2_t)0x3F0000003F000000), *(float *)v174.i32));
          }
          while (v58 < *(_DWORD *)(*((void *)this + 75) + 84));
        }
      }
      else if (*(_DWORD *)(v56 + 84))
      {
        uint64_t v74 = 0;
        float32x2_t v75 = (float32x2_t)vdup_lane_s32(v174, 0);
        do
        {
          uint64_t v76 = (float32x2_t *)(v49 + 8 * v74);
          float32x2_t v77 = *(float32x2_t *)(v45 + 8 * v74);
          float32x2_t v78 = v47[v74];
          float32x2_t v79 = vmla_f32(v77, v75, *v76);
          *uint64_t v76 = 0;
          *(float32x2_t *)(v45 + 8 * v74) = v79;
          v47[v74++] = vadd_f32(vmla_f32(v78, v77, v75), vmul_n_f32(vmul_f32(vsub_f32(v79, v77), (float32x2_t)0x3F0000003F000000), *(float *)v174.i32));
        }
        while (v74 < *(_DWORD *)(*((void *)this + 75) + 84));
      }
      _Block_object_dispose(&v211, 8);
    }
    else
    {
      uint64_t v65 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "vel");
      float v66 = *(float32x2_t **)(SKCParticleSystem::getSlice(v65, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v67 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "pos");
      float v68 = *(float32x2_t **)(SKCParticleSystem::getSlice(v67, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v69 = *(unsigned int *)(*((void *)this + 75) + 84);
      if ((int)v69 >= 1)
      {
        float32x2_t v70 = vmul_n_f32(*(float32x2_t *)((char *)this + 904), *(float *)v174.i32);
        float32x2_t v71 = vmul_n_f32(vmul_f32(v70, (float32x2_t)0x3F0000003F000000), *(float *)v174.i32);
        float32x2_t v72 = (float32x2_t)vdup_lane_s32(v174, 0);
        do
        {
          float32x2_t v73 = *v66;
          *float v68 = vadd_f32(v71, vmla_f32(*v68, *v66, v72));
          ++v68;
          *v66++ = vadd_f32(v70, v73);
          --v69;
        }
        while (v69);
      }
    }
    uint64_t v80 = *((void *)this + 75);
    if (*((void *)this + 84))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "vel");
      uint64_t v81 = *(void *)(SKCParticleSystem::getSlice(v80, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v82 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
      uint64_t v83 = *(void *)(SKCParticleSystem::getSlice(v82, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v80 = *((void *)this + 75);
      if (*(_DWORD *)(v80 + 84))
      {
        uint64_t v84 = 0;
        do
        {
          float v85 = *(float *)(v83 + 4 * v84);
          LODWORD(__p[0]) = 0;
          SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 84), v85, (float *)__p);
          *(float32x2_t *)(v81 + 8 * v84) = vmul_n_f32(*(float32x2_t *)(v81 + 8 * v84), *(float *)__p);
          uint64_t v80 = *((void *)this + 75);
          ++v84;
        }
        while (v84 < *(_DWORD *)(v80 + 84));
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "rot");
    float32x2_t v86 = *(float **)(SKCParticleSystem::getSlice(v80, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0) {
      operator delete(__p[0]);
    }
    if (*((void *)this + 81))
    {
      uint64_t v87 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
      uint64_t v88 = *(void *)(SKCParticleSystem::getSlice(v87, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v89 = *((void *)this + 75);
      if (*(_DWORD *)(v89 + 84))
      {
        uint64_t v90 = 0;
        do
        {
          SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 81), *(float *)(v88 + 4 * v90), v86++);
          uint64_t v89 = *((void *)this + 75);
          ++v90;
        }
        while (v90 < *(_DWORD *)(v89 + 84));
      }
    }
    else
    {
      float v91 = *((float *)this + 233);
      uint64_t v89 = *((void *)this + 75);
      if ((LODWORD(v91) & 0x60000000) != 0)
      {
        int v92 = *(_DWORD *)(v89 + 84);
        if (v92)
        {
          float v93 = v91 * *(float *)v174.i32;
          do
          {
            *float32x2_t v86 = v93 + *v86;
            ++v86;
            --v92;
          }
          while (v92);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "scale");
    float v94 = *(float **)(SKCParticleSystem::getSlice(v89, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0) {
      operator delete(__p[0]);
    }
    if (*((void *)this + 82))
    {
      uint64_t v95 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
      uint64_t v96 = *(void *)(SKCParticleSystem::getSlice(v95, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v97 = *((void *)this + 75);
      if (*(_DWORD *)(v97 + 84))
      {
        uint64_t v98 = 0;
        do
        {
          SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 82), *(float *)(v96 + 4 * v98), v94++);
          uint64_t v97 = *((void *)this + 75);
          ++v98;
        }
        while (v98 < *(_DWORD *)(v97 + 84));
      }
    }
    else
    {
      float v99 = *((float *)this + 236);
      uint64_t v97 = *((void *)this + 75);
      if ((LODWORD(v99) & 0x60000000) != 0)
      {
        int v100 = *(_DWORD *)(v97 + 84);
        if (v100)
        {
          float v101 = v99 * *(float *)v174.i32;
          do
          {
            *float v94 = fmaxf(v101 + *v94, 0.0);
            ++v94;
            --v100;
          }
          while (v100);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
    unint64_t v102 = *(float **)(SKCParticleSystem::getSlice(v97, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0) {
      operator delete(__p[0]);
    }
    if (*((void *)this + 80))
    {
      uint64_t v103 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
      BOOL v104 = *(float **)(SKCParticleSystem::getSlice(v103, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v105 = *((void *)this + 75);
      int v106 = *(_DWORD *)(v105 + 84);
      if (v106 >= 1)
      {
        do
        {
          SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 80), *v104++, v102++);
          --v106;
        }
        while (v106);
        uint64_t v105 = *((void *)this + 75);
      }
    }
    else
    {
      float v107 = *((float *)this + 239);
      uint64_t v105 = *((void *)this + 75);
      if ((LODWORD(v107) & 0x60000000) != 0)
      {
        int v108 = *(_DWORD *)(v105 + 84);
        if (v108 >= 1)
        {
          float v109 = v107 * *(float *)v174.i32;
          do
          {
            *unint64_t v102 = v109 + *v102;
            ++v102;
            --v108;
          }
          while (v108);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "colorBlend");
    v110 = *(float **)(SKCParticleSystem::getSlice(v105, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0) {
      operator delete(__p[0]);
    }
    if (*((void *)this + 79))
    {
      uint64_t v111 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
      uint64_t v112 = *(void *)(SKCParticleSystem::getSlice(v111, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v113 = *((void *)this + 75);
      if (*(_DWORD *)(v113 + 84))
      {
        uint64_t v114 = 0;
        do
        {
          SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 79), *(float *)(v112 + 4 * v114), v110++);
          uint64_t v113 = *((void *)this + 75);
          ++v114;
        }
        while (v114 < *(_DWORD *)(v113 + 84));
      }
    }
    else
    {
      float v115 = *((float *)this + 210);
      uint64_t v113 = *((void *)this + 75);
      if ((LODWORD(v115) & 0x60000000) != 0)
      {
        int v116 = *(_DWORD *)(v113 + 84);
        if (v116)
        {
          float v117 = v115 * *(float *)v174.i32;
          do
          {
            float *v110 = v117 + *v110;
            ++v110;
            --v116;
          }
          while (v116);
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "color");
    uint64_t v118 = *(float **)(SKCParticleSystem::getSlice(v113, (const void **)__p) + 16);
    if (SHIBYTE(v178) < 0) {
      operator delete(__p[0]);
    }
    if (*((void *)this + 78))
    {
      uint64_t v119 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
      uint64_t v120 = *(void *)(SKCParticleSystem::getSlice(v119, (const void **)__p) + 16);
      if (SHIBYTE(v178) < 0) {
        operator delete(__p[0]);
      }
      if (*(_DWORD *)(*((void *)this + 75) + 84))
      {
        uint64_t v121 = 0;
        do
        {
          SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 78), *(float *)(v120 + 4 * v121), v118);
          v118 += 4;
          ++v121;
        }
        while (v121 < *(_DWORD *)(*((void *)this + 75) + 84));
      }
      goto LABEL_133;
    }
    v122.i32[0] = *((_DWORD *)this + 204);
    if ((v122.i32[0] & 0x60000000) != 0)
    {
      __int32 v123 = *((_DWORD *)this + 205);
    }
    else
    {
      __int32 v123 = *((_DWORD *)this + 205);
      if ((v123 & 0x60000000) == 0 && (*((unsigned char *)this + 827) & 0x60) == 0 && (*((unsigned char *)this + 831) & 0x60) == 0)
      {
LABEL_133:
        if (v209)
        {
          id v210 = v209;
          operator delete(v209);
        }
        __p[0] = v208;
        std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        if (*((void *)this + 127))
        {
          for (uint64_t i = *((void *)this + 126);
                (SKCEmitterNode *)i != (SKCEmitterNode *)((char *)this + 1000);
                uint64_t i = *(void *)(i + 8))
          {
            SKCEmitterNode::runBirthSimulation(*(SKCEmitterNode **)(i + 16), *(float *)v174.i32, a2, a4);
          }
        }
        else
        {
          SKCEmitterNode::runBirthSimulation(this, *(float *)v174.i32, a2, a4);
        }
        int v127 = *((_DWORD *)this + 236);
        BOOL v129 = (v127 & 0x60000000) == 0 || v127 < 0;
        if (*((void *)this + 80))
        {
          BOOL v130 = 0;
        }
        else
        {
          int v131 = *((_DWORD *)this + 239);
          BOOL v130 = ((v131 & 0x60000000) == 0 || v131 < 0) && *((void *)this + 72) == 0;
        }
        if (*((void *)this + 82))
        {
          BOOL v134 = 0;
        }
        else if (*((void *)this + 72))
        {
          BOOL v134 = 0;
        }
        else
        {
          BOOL v134 = v129;
        }
        uint64_t v135 = *((void *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(__p, "deathTime");
        uint64_t v136 = *(void *)(SKCParticleSystem::getSlice(v135, (const void **)__p) + 16);
        if (SHIBYTE(v178) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v137 = *((void *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
        uint64_t v138 = *(void *)(SKCParticleSystem::getSlice(v137, (const void **)__p) + 16);
        if (SHIBYTE(v178) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v139 = *((void *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(__p, "scale");
        uint64_t v140 = *(void *)(SKCParticleSystem::getSlice(v139, (const void **)__p) + 16);
        if (SHIBYTE(v178) < 0) {
          operator delete(__p[0]);
        }
        unsigned int v141 = (SKCParticleSystem *)*((void *)this + 75);
        if (*((_DWORD *)v141 + 21))
        {
          uint64_t v142 = 0;
          do
          {
            float v143 = a2;
            if ((COERCE_UNSIGNED_INT(*(float *)(v136 + 4 * v142) - v143) & 0x80000000) != 0
              || (int v144 = *(_DWORD *)(v140 + 4 * v142), v130)
              && ((int v145 = *(_DWORD *)(v138 + 4 * v142), v145 < 0) || (v145 & 0x60000000) == 0)
              || v134 && (v144 < 0 || (v144 & 0x60000000) == 0))
            {
              SKCParticleSystem::removePatricle(v141, v142);
              unsigned int v141 = (SKCParticleSystem *)*((void *)this + 75);
            }
            ++v142;
          }
          while (v142 < *((_DWORD *)v141 + 21));
        }
        SKCParticleSystem::compact(v141);
        uint64_t v146 = *((void *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(__p, "outColor");
        char v147 = *(_DWORD **)(SKCParticleSystem::getSlice(v146, (const void **)__p) + 16);
        if (SHIBYTE(v178) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v148 = *((void *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(__p, "color");
        float32x4_t v149 = *(float32x4_t **)(SKCParticleSystem::getSlice(v148, (const void **)__p) + 16);
        if (SHIBYTE(v178) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v150 = *((void *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
        float32x4_t v151 = *(float **)(SKCParticleSystem::getSlice(v150, (const void **)__p) + 16);
        if (SHIBYTE(v178) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v152 = *((void *)this + 75);
        uint64_t v153 = *(unsigned int *)(v152 + 84);
        if (*((void *)this + 120))
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "colorBlend");
          int8x16_t v154 = *(float **)(SKCParticleSystem::getSlice(v152, (const void **)__p) + 16);
          if (SHIBYTE(v178) < 0) {
            operator delete(__p[0]);
          }
          if ((int)v153 >= 1)
          {
            do
            {
              float v156 = *v151++;
              float v157 = fmaxf(v156, 0.0);
              float v158 = *v154++;
              _S3 = fminf(fmaxf(v158, 0.0), 1.0);
              float32x4_t v160 = *v149++;
              _Q4 = v160;
              *(float *)v155.i32 = 1.0 - _S3;
              float32x4_t v162 = (float32x4_t)vdupq_lane_s32(v155, 0);
              __asm { FMLA            S5, S3, V4.S[3] }
              _Q4.i32[3] = 1.0;
              int16x8_t v167 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vmlaq_n_f32(v162, _Q4, _S3), fminf(fmaxf(fminf(v157, 1.0) * _S5, 0.0), 1.0) * 255.0));
              *(int16x4_t *)v167.i8 = vmovn_s32((int32x4_t)v167);
              *v147++ = vmovn_s16(v167).u32[0];
              --v153;
            }
            while (v153);
          }
        }
        else if ((int)v153 >= 1)
        {
          do
          {
            float v168 = *v151++;
            float v169 = fminf(fmaxf(v168, 0.0), 1.0);
            float32x4_t v170 = *v149++;
            float32x4_t v171 = v170;
            v171.i32[3] = 1.0;
            int16x8_t v172 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v171, fminf(fmaxf(vmuls_lane_f32(v169, v170, 3), 0.0), 1.0) * 255.0));
            *(int16x4_t *)v172.i8 = vmovn_s32((int32x4_t)v172);
            *v147++ = vmovn_s16(v172).u32[0];
            --v153;
          }
          while (v153);
        }
        SKCNode::setDirty(*((SKCNode **)this + 74));
        goto LABEL_194;
      }
    }
    if (*(_DWORD *)(*((void *)this + 75) + 84))
    {
      uint64_t v124 = 0;
      v122.i32[1] = v123;
      v122.i64[1] = *((void *)this + 103);
      float32x4_t v125 = vmulq_n_f32(v122, *(float *)v174.i32);
      do
      {
        *(float32x4_t *)&v118[4 * v124] = vaddq_f32(v125, *(float32x4_t *)&v118[4 * v124]);
        ++v124;
      }
      while (v124 < *(_DWORD *)(*((void *)this + 75) + 84));
    }
    goto LABEL_133;
  }
LABEL_194:
  *((double *)this + 88) = a2;
  SKCNode::recomputeFlags(this, 1);
}

void sub_20AE16DC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  PKCAether::Evaluator::~Evaluator((PKCAether::Evaluator *)(v26 - 256));

  _Unwind_Resume(a1);
}

BOOL SKCEmitterNode::getNeedsUpdate(SKCEmitterNode *this)
{
  if (SKCNode::getNeedsUpdate(this)) {
    return 1;
  }
  return !*((unsigned char *)this + 172)
      && *((float *)this + 42) > 0.0
      && (*((float *)this + 228) > 0.0 || (uint64_t v3 = *((void *)this + 75)) != 0 && *(_DWORD *)(v3 + 84))
      || *((unsigned char *)this + 616) != 0;
}

double SKCEmitterNode::getBoundingBox(SKCEmitterNode *this)
{
  uint64_t v2 = *((void *)this + 74);
  if (!v2) {
    return *(double *)&SKCBoundingBoxEmpty;
  }
  *(double *)&long long v3 = (*(double (**)(uint64_t))(*(void *)v2 + 120))(v2);
  long long v13 = v4;
  long long v14 = v3;
  long long v15 = v6;
  long long v16 = v5;
  (*(void (**)(SKCEmitterNode *))(*(void *)this + 104))(this);
  uint64_t v11 = 0;
  v17[0] = v14;
  v17[1] = v13;
  v17[2] = v16;
  v17[3] = v15;
  do
  {
    *(long long *)((char *)&v18 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(v17[v11])), v8, *(float32x2_t *)&v17[v11], 1), v9, (float32x4_t)v17[v11], 2), v10, (float32x4_t)v17[v11], 3);
    ++v11;
  }
  while (v11 != 4);
  return *(double *)&v18;
}

void SKCEmitterNode::initializeSystem(SKCEmitterNode *this)
{
}

void sub_20AE175A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AE175F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE1760C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE17620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE17634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE17648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE1765C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE17670()
{
  if (*(char *)(v0 - 177) < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE17684()
{
  if (*(char *)(v0 - 153) < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE17698()
{
  if (*(char *)(v0 - 129) < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE176AC()
{
  if (*(char *)(v0 - 105) < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE176C0()
{
  if (*(char *)(v0 - 81) < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE176D4()
{
  if (*(char *)(v0 - 57) < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE176E8()
{
  if (*(char *)(v0 - 33) < 0) {
    JUMPOUT(0x20AE175ECLL);
  }
  JUMPOUT(0x20AE175F0);
}

void sub_20AE176FC()
{
  MEMORY[0x21052EA30](v0, 0x10B1C40E45C7BC7);
  JUMPOUT(0x20AE175F0);
}

void *SKCEmitterNode::addParticlesToTargetNode(id *this)
{
  SKCEmitterNode::computeZPostion((SKCEmitterNode *)this);
  id WeakRetained = objc_loadWeakRetained(this + 71);
  long long v3 = (void *)[WeakRetained _backingNode];

  unint64_t v4 = v3[16];
  id v5 = this[74];
  long long v6 = (void *)v3[15];
  if ((unint64_t)v6 >= v4)
  {
    uint64_t v8 = v3[14];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v4 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      long long v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(v3 + 16), v12);
    }
    else {
      long long v13 = 0;
    }
    long long v14 = &v13[8 * v9];
    long long v15 = &v13[8 * v12];
    *(void *)long long v14 = v5;
    float32x4_t v7 = v14 + 8;
    unint64_t v17 = (char *)v3[14];
    long long v16 = (char *)v3[15];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - SKCNode::setFlags(this, 66, 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      long long v16 = (char *)v3[14];
    }
    v3[14] = v14;
    v3[15] = v7;
    v3[16] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *long long v6 = v5;
    float32x4_t v7 = v6 + 1;
  }
  v3[15] = v7;
  *((void *)this[74] + 10) = v3;

  return std::__list_imp<SKCRenderSortInfo *>::clear(this + 106);
}

void sub_20AE1783C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float32x4_t ___ZN14SKCEmitterNode15updateParticlesEdfb_block_invoke(uint64_t a1, uint64_t *lpsrc, unsigned char *a3)
{
  uint64_t v6 = *lpsrc;
  {
    *a3 = 1;
  }
  else
  {
    *(double *)v8.i64 = (*(double (**)(uint64_t *))(v6 + 104))(lpsrc);
    uint64_t v9 = *(float32x2_t **)(*(void *)(a1 + 32) + 8);
    float32x4_t result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*(_OWORD *)v9[4].f32)), v10, v9[4], 1), v11, *(float32x4_t *)v9[4].f32, 2), v12, *(float32x4_t *)v9[4].f32, 3);
    *(float32x4_t *)v9[4].f32 = result;
  }
  return result;
}

void SKCEmitterNode::runBirthSimulation(SKCEmitterNode *this, float a2, double a3, int a4)
{
  uint64_t v208 = *MEMORY[0x263EF8340];
  float v6 = *((float *)this + 228);
  *(void *)uint64_t v201 = 0;
  float32x4_t v7 = (SKCEmitterNode *)*((void *)this + 124);
  if (!v7) {
    float32x4_t v7 = this;
  }
  float32x4_t v8 = (SKCParticleSystem *)*((void *)v7 + 75);
  id WeakRetained = objc_loadWeakRetained((id *)this + 71);
  float32x4_t v10 = (SKCNode *)[WeakRetained _backingNode];

  float32x2_t v11 = *(float32x2_t *)((char *)this + 872);
  if (v10 == this)
  {
    float32x2_t v182 = (float32x2_t)1065353216;
    unint64_t v16 = 0x3F80000000000000;
  }
  else
  {
    float32x2_t v179 = *(float32x2_t *)((char *)this + 872);
    float v192 = *((float *)this + 218);
    __n128 ConversionMatrixFromNode = SKCNode::getConversionMatrixFromNode(v10, this);
    float32x2_t v11 = (float32x2_t)vaddq_f32(v15, vmlaq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)ConversionMatrixFromNode, v192), v13, v179, 1), (float32x4_t)0, v14)).u64[0];
    float32x2_t v182 = (float32x2_t)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)ConversionMatrixFromNode, (float32x4_t)0, v13), (float32x4_t)0, v14), (float32x4_t)0, v15).u64[0];
    unint64_t v16 = vmlaq_f32(vmlaq_f32(vaddq_f32(v13, vmulq_f32((float32x4_t)ConversionMatrixFromNode, (float32x4_t)0)), (float32x4_t)0, v14), (float32x4_t)0, v15).u64[0];
  }
  uint64_t v180 = (uint64_t)v11;
  float32x2_t v181 = (float32x2_t)v16;
  if (*((void *)this + 108))
  {
    float32x2_t v17 = vsub_f32(v11, *(float32x2_t *)(*((void *)this + 106) + 16));
    double v18 = sqrtf(vaddv_f32(vmul_f32(v17, v17)));
  }
  else
  {
    double v18 = 0.0;
  }
  if (!*((unsigned char *)this + 616))
  {
    double v22 = *((double *)this + 89);
    if (v22 < a3)
    {
      unsigned int v21 = (floor((a3 - v22) / (float)(1.0 / v6)) + 1.0);
      goto LABEL_14;
    }
LABEL_15:
    unsigned int v21 = 0;
    goto LABEL_16;
  }
  float v19 = v18;
  if ((LODWORD(v19) & 0x60000000) == 0) {
    goto LABEL_15;
  }
  float v20 = *((double *)this + 76) * v18 + 2.0;
  unsigned int v21 = vcvtps_u32_f32(v20);
LABEL_14:
  v201[1] = v21;
LABEL_16:
  unint64_t v23 = *((void *)this + 85);
  if (v23)
  {
    uint64_t v24 = *((void *)this + 86);
    if (v24 + (unint64_t)v21 > v23)
    {
      unsigned int v21 = (v23 - v24) & ~(((int)v23 - (int)v24) >> 31);
      v201[1] = v21;
    }
  }
  SKCParticleSystem::addPatricles(v8, v21, v201, &v201[1]);
  if (v201[1])
  {
    *((void *)this + 86) += v201[1];
    std::string::basic_string[abi:ne180100]<0>(&v203, "birthTime");
    uint64_t v25 = *(void *)(SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203) + 16);
    uint64_t v26 = v201[0];
    if (v204.i8[7] < 0) {
      operator delete((void *)v203.i64[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v203, "deathTime");
    uint64_t v27 = *(void *)(SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203) + 16);
    uint64_t v193 = v201[0];
    if (v204.i8[7] < 0) {
      operator delete((void *)v203.i64[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v203, "vel");
    uint64_t v28 = *(void *)(SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203) + 16);
    uint64_t v29 = v201[0];
    if (v204.i8[7] < 0) {
      operator delete((void *)v203.i64[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v203, "pos");
    uint64_t v30 = *(void *)(SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203) + 16);
    uint64_t v187 = v201[0];
    if (v204.i8[7] < 0) {
      operator delete((void *)v203.i64[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v203, "color");
    uint64_t Slice = SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203);
    uint64_t v168 = v201[0];
    uint64_t v169 = *(void *)(Slice + 16);
    if (v204.i8[7] < 0) {
      operator delete((void *)v203.i64[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v203, "rot");
    uint64_t v32 = SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203);
    uint64_t v164 = v201[0];
    uint64_t v165 = *(void *)(v32 + 16);
    if (v204.i8[7] < 0) {
      operator delete((void *)v203.i64[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v203, "scale");
    uint64_t v33 = SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203);
    uint64_t v166 = v201[0];
    uint64_t v167 = *(void *)(v33 + 16);
    if (v204.i8[7] < 0) {
      operator delete((void *)v203.i64[0]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v203, "size");
    uint64_t v185 = v30;
    uint64_t v34 = *(void *)(SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203) + 16);
    uint64_t v162 = v201[0];
    if (v204.i8[7] < 0) {
      operator delete((void *)v203.i64[0]);
    }
    float32x2_t v175 = (float32x2_t)0x3F80000000000000;
    float32x4_t v174 = (float32x4_t)xmmword_20AE9B6C0;
    float32x4_t v177 = (float32x4_t)xmmword_20AE9B6D0;
    *((void *)&v37 + SKCNode::setFlags(this, 66, 1) = 0x3F000000BFC00000;
    float32x4_t v176 = (float32x4_t)xmmword_20AE9B6E0;
    uint64_t v163 = v34;
    if ((LODWORD(a2) & 0x60000000) != 0
      && *((void *)this + 108) >= 2uLL
      && (float v38 = v18, (LODWORD(v38) & 0x60000000) != 0))
    {
      uint64_t v39 = 0;
      uint64_t v40 = (uint64_t *)((char *)this + 856);
      char v41 = 1;
      do
      {
        uint64_t v42 = *v40;
        *(void *)&long long v43 = *(void *)(v42 + 16);
        *((void *)&v43 + SKCNode::setFlags(this, 66, 1) = 0x3F80000000000000;
        char v44 = v41;
        *((_OWORD *)&v197 + v39) = v43;
        uint64_t v40 = (uint64_t *)(v42 + 8);
        uint64_t v39 = 1;
        char v41 = 0;
      }
      while ((v44 & 1) != 0);
      v45.i64[0] = v180;
      float32x4_t v35 = v198;
      *((void *)&v37 + SKCNode::setFlags(this, 66, 1) = v199.i64[1];
      v45.i64[1] = v199.i64[1];
      float32x4_t v199 = v45;
      float32x4_t v36 = vsubq_f32(v45, v198);
      if (*((unsigned char *)this + 616))
      {
        int v46 = 0;
        float32x4_t v200 = v36;
        int v47 = 1;
      }
      else
      {
        uint64_t v153 = 0;
        v154.i64[0] = 0x4000000040000000;
        v154.i64[1] = 0x4000000040000000;
        float32x4_t v155 = vmlaq_f32(v45, v154, v36);
        v156.i64[0] = v197.i64[0];
        float32x4_t v36 = vsubq_f32(v155, vsubq_f32(v198, v197));
        float32x4_t v200 = v36;
        v156.i64[1] = 0x3F80000000000000;
        v157.i64[0] = v198.i64[0];
        v157.i64[1] = 0x3F80000000000000;
        v158.i64[0] = v180;
        v158.i64[1] = 0x3F80000000000000;
        v159.i64[0] = v36.i64[0];
        v159.i64[1] = 0x3F80000000000000;
        v202[0] = xmmword_20AE9B6E0;
        v202[1] = xmmword_20AE9B6D0;
        v202[2] = xmmword_20AE9B6C0;
        v202[3] = xmmword_20AE9B2D0;
        do
        {
          *(float32x4_t *)((char *)&v203 + v153 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v156, COERCE_FLOAT(v202[v153])), v157, *(float32x2_t *)&v202[v153], 1), v158, (float32x4_t)v202[v153], 2), v159, (float32x4_t)v202[v153], 3);
          ++v153;
        }
        while (v153 != 4);
        float32x4_t v176 = v203;
        float32x4_t v177 = v204;
        int v46 = 1;
        int v47 = 1;
        *((void *)&v37 + SKCNode::setFlags(this, 66, 1) = v207;
        float32x4_t v174 = v205;
        float32x2_t v175 = v206;
      }
    }
    else
    {
      int v46 = 0;
      int v47 = 0;
    }
    unsigned int v48 = v201[1];
    float v49 = 1.0 / (float)v201[1];
    float v178 = v49;
    float v50 = v49 * a2;
    if (*((unsigned char *)this + 616)) {
      *(float *)&long long v37 = v49 * a2;
    }
    else {
      *(float *)&long long v37 = 1.0 / v6;
    }
    if (*((unsigned char *)this + 616)) {
      *((double *)this + 89) = *((double *)this + 88) + v50;
    }
    if (v48)
    {
      float32x4_t v172 = v36;
      float32x4_t v173 = v35;
      uint64_t v51 = v27;
      uint64_t v52 = 0;
      uint64_t v53 = v25 + 4 * v26;
      double v54 = *(float *)&v37;
      uint64_t v55 = v51 + 4 * v193;
      uint64_t v56 = v28 + 8 * v29;
      *(void *)&long long v37 = 0;
      long long v183 = v37;
      uint64_t v57 = v185 + 8 * v187;
      while (1)
      {
        double v58 = *((double *)this + 89);
        float v59 = v58;
        *(float *)(v53 + 4 * v52) = v59;
        float v60 = *((float *)this + 229);
        float v61 = *((float *)this + 230);
        if ((LODWORD(v61) & 0x60000000) != 0)
        {
          float v60 = (float)(v60 - (float)(v61 * 0.5))
              + (float)((float)((float)rand() * 4.6566e-10)
                      * (float)((float)(v60 + (float)(v61 * 0.5)) - (float)(v60 - (float)(v61 * 0.5))));
          double v62 = *((double *)this + 89);
        }
        else
        {
          double v62 = v58;
        }
        float v63 = v58 + v60;
        *(float *)(v55 + 4 * v52) = v63;
        *((double *)this + 89) = v62 + v54;
        if (!v47) {
          break;
        }
        long long v64 = v183;
        *(float *)&long long v64 = v178 + *(float *)&v183;
        long long v183 = v64;
        if (v46)
        {
          float32x2_t v65 = vadd_f32(v175, (float32x2_t)*(_OWORD *)&vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v176, *(float *)&v64 * (float)(*(float *)&v64 * *(float *)&v64)), v177, *(float *)&v64 * *(float *)&v64), v174, *(float *)&v64));
LABEL_58:
          float32x2_t v194 = v65;
          goto LABEL_60;
        }
        float32x2_t v194 = (float32x2_t)vmlaq_n_f32(v173, v172, *(float *)&v64).u64[0];
LABEL_60:
        float v66 = *((float *)this + 224);
        float v67 = *((float *)this + 225);
        if ((LODWORD(v67) & 0x60000000) != 0) {
          float v66 = (float)(v66 - (float)(v67 * 0.5))
        }
              + (float)((float)((float)rand() * 4.6566e-10)
                      * (float)((float)(v66 + (float)(v67 * 0.5)) - (float)(v66 - (float)(v67 * 0.5))));
        float v188 = *((float *)this + 222);
        float v69 = *((float *)this + 223);
        if ((LODWORD(v69) & 0x60000000) != 0)
        {
          float v68 = *((float *)this + 222);
          float v188 = (float)(v68 - (float)(v69 * 0.5))
               + (float)((float)((float)rand() * 4.6566e-10)
                       * (float)((float)(v68 + (float)(v69 * 0.5)) - (float)(v68 - (float)(v69 * 0.5))));
        }
        __float2 v70 = __sincosf_stret(v66);
        *(float32x2_t *)(v56 + 8 * v52) = vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v70.__sinval), LODWORD(v70.__cosval)), v188);
        if (v10 == this)
        {
          float v190 = v194.f32[0];
          float v74 = *((float *)this + 220);
          if ((LODWORD(v74) & 0x60000000) != 0) {
            float v190 = (float)(v194.f32[0] - (float)(v74 * 0.5))
          }
                 + (float)((float)((float)rand() * 4.6566e-10)
                         * (float)((float)(v194.f32[0] + (float)(v74 * 0.5)) - (float)(v194.f32[0] - (float)(v74 * 0.5))));
          float v75 = v194.f32[1];
          float v76 = *((float *)this + 221);
          if ((LODWORD(v76) & 0x60000000) != 0) {
            float v77 = (float)(v194.f32[1] - (float)(v76 * 0.5))
          }
                + (float)((float)((float)rand() * 4.6566e-10)
                        * (float)((float)(v75 + (float)(v76 * 0.5)) - (float)(v75 - (float)(v76 * 0.5))));
          else {
            float v77 = v194.f32[1];
          }
          float32x2_t v195 = (float32x2_t)__PAIR64__(LODWORD(v77), LODWORD(v190));
        }
        else
        {
          float v71 = *((float *)this + 220);
          float v189 = 0.0;
          float v72 = 0.0;
          if ((LODWORD(v71) & 0x60000000) != 0) {
            float v72 = (float)(0.0 - (float)(v71 * 0.5))
          }
                + (float)((float)((float)rand() * 4.6566e-10)
                        * (float)((float)((float)(v71 * 0.5) + 0.0) - (float)(0.0 - (float)(v71 * 0.5))));
          float v184 = v72;
          float v73 = *((float *)this + 221);
          if ((LODWORD(v73) & 0x60000000) != 0) {
            float v189 = (float)(0.0 - (float)(v73 * 0.5))
          }
                 + (float)((float)((float)rand() * 4.6566e-10)
                         * (float)((float)((float)(v73 * 0.5) + 0.0) - (float)(0.0 - (float)(v73 * 0.5))));
          float32x2_t v195 = vmla_n_f32(vmla_n_f32(v194, v182, v184), v181, v189);
        }
        float v78 = *((float *)this + 191);
        if ((LODWORD(v78) & 0x60000000) != 0)
        {
          float v79 = *((float *)this + 192);
        }
        else
        {
          if ((*((_DWORD *)this + 192) & 0x60000000) == 0)
          {
            float32x2_t v83 = v195;
            goto LABEL_81;
          }
          float v79 = *((float *)this + 192);
        }
        int v80 = rand();
        float v81 = v79 * 0.5 + v78;
        float v82 = (v78 + v79 * -0.5) / (v78 + v79 * 0.5);
        float32x2_t v83 = vmla_n_f32(v195, vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v70.__sinval), LODWORD(v70.__cosval)), sqrtf((float)(v82 * v82) + (float)((float)((float)v80 * 4.6566e-10) * (float)(1.0 - (float)(v82 * v82))))), v81);
LABEL_81:
        *(float32x2_t *)(v57 + 8 * v52) = v83;
        unsigned int v48 = v201[1];
        if (++v52 >= v201[1]) {
          goto LABEL_84;
        }
      }
      float32x2_t v65 = (float32x2_t)v180;
      goto LABEL_58;
    }
LABEL_84:
    float64x2_t v84 = *((float64x2_t *)this + 46);
    float v85 = (void *)*((void *)this + 120);
    if (v85)
    {
      if (v84.f64[0] == *MEMORY[0x263F001B0] && v84.f64[1] == *(double *)(MEMORY[0x263F001B0] + 8))
      {
        [v85 size];
        v84.f64[1] = v87;
        unsigned int v48 = v201[1];
      }
    }
    uint64_t v88 = (float32x4_t *)(v169 + 16 * v168);
    if (v48)
    {
      uint64_t v89 = (float32x2_t *)(v163 + 8 * v162);
      float32x2_t v90 = vcvt_f32_f64(v84);
      unsigned int v91 = v48;
      do
      {
        *v89++ = v90;
        --v91;
      }
      while (v91);
    }
    int v92 = (SKCKeyframeSequence *)*((void *)this + 78);
    if (v92)
    {
      SKCKeyframeSequence::sample(v92, 0.0, v203.f32);
      unsigned int v48 = v201[1];
      if (v201[1])
      {
        float32x4_t v93 = v203;
        unsigned int v94 = v201[1];
        do
        {
          *v88++ = v93;
          --v94;
        }
        while (v94);
      }
    }
    else if ((*((unsigned char *)this + 803) & 0x60) != 0 {
           || (*((unsigned char *)this + 807) & 0x60) != 0
    }
           || (*((unsigned char *)this + 811) & 0x60) != 0
           || (*((unsigned char *)this + 815) & 0x60) != 0)
    {
      if (v48)
      {
        uint64_t v95 = 0;
        do
        {
          float v196 = *((float *)this + 196);
          float v97 = *((float *)this + 200);
          if ((LODWORD(v97) & 0x60000000) != 0)
          {
            float v96 = *((float *)this + 196);
            float v196 = (float)(v96 - (float)(v97 * 0.5))
                 + (float)((float)((float)rand() * 4.6566e-10)
                         * (float)((float)(v96 + (float)(v97 * 0.5)) - (float)(v96 - (float)(v97 * 0.5))));
          }
          float v191 = *((float *)this + 197);
          float v99 = *((float *)this + 201);
          if ((LODWORD(v99) & 0x60000000) != 0)
          {
            float v98 = *((float *)this + 197);
            float v191 = (float)(v98 - (float)(v99 * 0.5))
                 + (float)((float)((float)rand() * 4.6566e-10)
                         * (float)((float)(v98 + (float)(v99 * 0.5)) - (float)(v98 - (float)(v99 * 0.5))));
          }
          float v186 = *((float *)this + 198);
          float v101 = *((float *)this + 202);
          if ((LODWORD(v101) & 0x60000000) != 0)
          {
            float v100 = *((float *)this + 198);
            float v186 = (float)(v100 - (float)(v101 * 0.5))
                 + (float)((float)((float)rand() * 4.6566e-10)
                         * (float)((float)(v100 + (float)(v101 * 0.5)) - (float)(v100 - (float)(v101 * 0.5))));
          }
          float v103 = *((float *)this + 203);
          if ((LODWORD(v103) & 0x60000000) != 0)
          {
            float v102 = *((float *)this + 199);
            float v104 = (float)(v102 - (float)(v103 * 0.5))
                 + (float)((float)((float)rand() * 4.6566e-10)
                         * (float)((float)(v102 + (float)(v103 * 0.5)) - (float)(v102 - (float)(v103 * 0.5))));
          }
          else
          {
            float v104 = *((float *)this + 199);
          }
          v105.i64[0] = __PAIR64__(LODWORD(v191), LODWORD(v196));
          v105.i64[1] = __PAIR64__(LODWORD(v104), LODWORD(v186));
          v88[v95] = v105;
          unsigned int v48 = v201[1];
          ++v95;
        }
        while (v95 < v201[1]);
      }
    }
    else if (v48)
    {
      uint64_t v160 = 0;
      float32x4_t v161 = *((float32x4_t *)this + 49);
      do
        v88[v160++] = v161;
      while (v48 != v160);
    }
    int v106 = (__int32 *)(v167 + 4 * v166);
    float v107 = (SKCKeyframeSequence *)*((void *)this + 82);
    if (v107)
    {
      v203.i32[0] = 0;
      SKCKeyframeSequence::sample(v107, 0.0, v203.f32);
      unsigned int v48 = v201[1];
      if (v201[1])
      {
        __int32 v108 = v203.i32[0];
        unsigned int v109 = v201[1];
        do
        {
          *v106++ = v108;
          --v109;
        }
        while (v109);
      }
    }
    else
    {
      float v110 = *((float *)this + 234);
      float v111 = *((float *)this + 235);
      if ((LODWORD(v111) & 0x60000000) != 0)
      {
        if (v48)
        {
          uint64_t v112 = 0;
          float v113 = v111 * 0.5;
          float v114 = v110 - v113;
          float v115 = (float)(v110 + v113) - (float)(v110 - v113);
          do
          {
            *(float *)&v106[v112] = v114 + (float)((float)((float)rand() * 4.6566e-10) * v115);
            unsigned int v48 = v201[1];
            ++v112;
          }
          while (v112 < v201[1]);
        }
      }
      else if (v48)
      {
        uint64_t v116 = 0;
        do
          *(float *)&v106[v116++] = v110;
        while (v48 != v116);
      }
    }
    float v117 = (float *)(v165 + 4 * v164);
    uint64_t v118 = (SKCKeyframeSequence *)*((void *)this + 81);
    if (v118)
    {
      v203.i32[0] = 0;
      SKCKeyframeSequence::sample(v118, 0.0, v203.f32);
      unsigned int v119 = v201[1];
      if (v201[1])
      {
        __int32 v120 = v203.i32[0];
        do
        {
          *(_DWORD *)v117++ = v120;
          --v119;
        }
        while (v119);
      }
    }
    else
    {
      float v121 = *((float *)this + 231);
      float v122 = *((float *)this + 232);
      if ((LODWORD(v122) & 0x60000000) != 0)
      {
        if (v48)
        {
          uint64_t v123 = 0;
          float v124 = v122 * 0.5;
          float v125 = v121 - v124;
          float v126 = (float)(v121 + v124) - (float)(v121 - v124);
          do
            v117[v123++] = v125 + (float)((float)((float)rand() * 4.6566e-10) * v126);
          while (v123 < v201[1]);
        }
      }
      else
      {
        for (; v48; --v48)
          *v117++ = v121;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v203, "alpha");
    uint64_t v127 = SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203);
    int v128 = (float *)(*(void *)(v127 + 16) + 4 * v201[0]);
    if (v204.i8[7] < 0) {
      operator delete((void *)v203.i64[0]);
    }
    BOOL v129 = (SKCKeyframeSequence *)*((void *)this + 80);
    if (v129)
    {
      v203.i32[0] = 0;
      SKCKeyframeSequence::sample(v129, 0.0, v203.f32);
      unsigned int v130 = v201[1];
      if (v201[1])
      {
        __int32 v131 = v203.i32[0];
        do
        {
          *(_DWORD *)v128++ = v131;
          --v130;
        }
        while (v130);
      }
    }
    else
    {
      float v132 = *((float *)this + 237);
      float v133 = *((float *)this + 238);
      unsigned int v134 = v201[1];
      if ((LODWORD(v133) & 0x60000000) != 0)
      {
        if (v201[1])
        {
          uint64_t v135 = 0;
          float v136 = v133 * 0.5;
          float v137 = v132 - v136;
          float v138 = (float)(v132 + v136) - (float)(v132 - v136);
          do
            v128[v135++] = v137 + (float)((float)((float)rand() * 4.6566e-10) * v138);
          while (v135 < v201[1]);
        }
      }
      else if (v201[1])
      {
        do
        {
          *v128++ = v132;
          --v134;
        }
        while (v134);
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v203, "colorBlend");
    uint64_t v139 = SKCParticleSystem::getSlice((uint64_t)v8, (const void **)&v203);
    uint64_t v140 = (__int32 *)(*(void *)(v139 + 16) + 4 * v201[0]);
    if (v204.i8[7] < 0) {
      operator delete((void *)v203.i64[0]);
    }
    unsigned int v141 = (SKCKeyframeSequence *)*((void *)this + 79);
    if (v141)
    {
      v203.i32[0] = 0;
      SKCKeyframeSequence::sample(v141, 0.0, v203.f32);
      int v142 = v201[1];
      if (v201[1])
      {
        __int32 v143 = v203.i32[0];
        unsigned int v144 = v201[1];
        do
        {
          *v140++ = v143;
          --v144;
        }
        while (v144);
      }
    }
    else
    {
      if (*((void *)this + 120))
      {
        float v145 = *((float *)this + 208);
        float v146 = *((float *)this + 209);
      }
      else
      {
        float v146 = 0.0;
        float v145 = 1.0;
      }
      int v142 = v201[1];
      if ((LODWORD(v146) & 0x60000000) != 0)
      {
        if (v201[1])
        {
          uint64_t v147 = 0;
          float v148 = v146 * 0.5;
          float v149 = v145 - v148;
          float v150 = (float)(v145 + v148) - (float)(v145 - v148);
          do
          {
            *(float *)&v140[v147] = v149 + (float)((float)((float)rand() * 4.6566e-10) * v150);
            int v142 = v201[1];
            ++v147;
          }
          while (v147 < v201[1]);
        }
      }
      else if (v201[1])
      {
        uint64_t v151 = 0;
        do
          *(float *)&v140[v151++] = v145;
        while (v142 != v151);
      }
    }
    if (a4)
    {
      float v152 = a3;
      SKCEmitterNode::preSimulate(this, v201[0], v142, v152);
    }
  }
  SKCEmitterNode::recordPrevStartPosition((id *)this);
}

void sub_20AE187B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 201) < 0) {
    operator delete(*(void **)(v1 - 224));
  }
  _Unwind_Resume(exception_object);
}

void SKCEmitterNode::subclassRecomputeFlags(SKCEmitterNode *this)
{
  if (*((_DWORD *)this + 244)) {
    SKCNode::setFlags(this, 8, 1);
  }
}

void SKCEmitterNode::advanceSimulationTime(SKCEmitterNode *this, float a2)
{
  if (*((unsigned char *)this + 988)) {
    SKCEmitterNode::initializeSystem(this);
  }
  if (*((unsigned char *)this + 560))
  {
    uint64_t v4 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
    id v5 = *(float **)(SKCParticleSystem::getSlice(v4, (const void **)__p) + 16);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "deathTime");
    float32x4_t v7 = *(float **)(SKCParticleSystem::getSlice(v6, (const void **)__p) + 16);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    for (int i = *(_DWORD *)(*((void *)this + 75) + 84); i; --i)
    {
      *id v5 = *v5 - a2;
      ++v5;
      *float32x4_t v7 = *v7 - a2;
      ++v7;
    }
  }
  uint64_t v9 = *((void *)this + 89);
  double v10 = *((double *)this + 88);
  *((double *)this + 88) = v10 - a2;
  std::__list_imp<SKCRenderSortInfo *>::clear((void *)this + 106);
  float v12 = *((float *)this + 228);
  if (v12 <= 0.0)
  {
    double v13 = 1.79769313e308;
  }
  else
  {
    double v11 = *((double *)this + 88);
    double v13 = 1.0 / v12 + v11;
  }
  *((double *)this + 89) = v13;
  if (!*((unsigned char *)this + 172) && *((unsigned char *)this + 989)) {
    SKCEmitterNode::updateParticles(this, v10, *(float *)&v11, 1);
  }
  *((void *)this + 89) = v9;
}

void sub_20AE1897C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SKCEmitterNode::setBirthRate(SKCEmitterNode *this, float a2)
{
  float v3 = *((float *)this + 228);
  if (a2 > 3.4028e38) {
    a2 = 3.4028e38;
  }
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  *((float *)this + 228) = a2;
  if (a2 <= 0.0)
  {
    *((void *)this + 89) = 0x7FEFFFFFFFFFFFFFLL;
  }
  else
  {
    if (v3 <= 0.0) {
      std::__list_imp<SKCRenderSortInfo *>::clear((void *)this + 106);
    }
    double v4 = *((double *)this + 89);
    if (v4 == 1.79769313e308)
    {
      float v5 = skCurrentTime();
      double v6 = fminf(v5, INFINITY);
    }
    else
    {
      double v6 = v4 - (float)(1.0 / v3) + (float)(1.0 / *((float *)this + 228));
    }
    *((double *)this + 89) = v6;
  }
}

void SKCEmitterNode::preSimulate(SKCEmitterNode *this, int a2, int a3, float a4)
{
  uint64_t v175 = *MEMORY[0x263EF8340];
  uint64_t v8 = *((void *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
  uint64_t v9 = *(void *)(SKCParticleSystem::getSlice(v8, (const void **)__p) + 16);
  if (SHIBYTE(v137) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v10 = *((void *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "deathTime");
  uint64_t v11 = *(void *)(SKCParticleSystem::getSlice(v10, (const void **)__p) + 16);
  if (SHIBYTE(v137) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = *((void *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
  uint64_t v13 = *(void *)(SKCParticleSystem::getSlice(v12, (const void **)__p) + 16);
  if (SHIBYTE(v137) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v14 = a2;
  if (a3 >= 1)
  {
    char v15 = (float *)(v9 + 4 * a2);
    unint64_t v16 = (float *)(v11 + 4 * a2);
    int v17 = a3;
    double v18 = (float *)(v13 + 4 * a2);
    do
    {
      float v19 = *v15++;
      float v20 = v19;
      float v21 = *v16++;
      *v18++ = fminf(fmaxf((float)(a4 - v20) / (float)(v21 - v20), 0.0), 1.0);
      --v17;
    }
    while (v17);
  }
  if (*((_DWORD *)this + 244))
  {
    double v22 = SKCNode::getScene(this);
    unint64_t v23 = [v22 physicsWorld];

    uint64_t v24 = [v23 aether];
    MEMORY[0x21052E950](v167, v24);
    if (v24)
    {
      uint64_t v170 = 0;
      float32x4_t v171 = &v170;
      uint64_t v172 = 0x3020000000;
      uint64_t v173 = 0;
      uint64_t v174 = 0;
      id WeakRetained = objc_loadWeakRetained((id *)this + 71);
      if (!WeakRetained) {
        id WeakRetained = *((id *)this + 1);
      }
      float v133 = WeakRetained;
      uint64_t v26 = [WeakRetained _backingNode];
      *((_OWORD *)v171 + 2) = xmmword_20AE9A910;
      v166[0] = MEMORY[0x263EF8330];
      v166[1] = 3221225472;
      v166[2] = ___ZN14SKCEmitterNode11preSimulateEiif_block_invoke;
      v166[3] = &unk_263FE9F18;
      v166[4] = &v170;
      SKCNode::walkUp(v26, v166, 1);
      long long v132 = *((_OWORD *)v171 + 2);
      uint64_t v27 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "vel");
      uint64_t v28 = *(void *)(SKCParticleSystem::getSlice(v27, (const void **)__p) + 16);
      if (SHIBYTE(v137) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v29 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "pos");
      uint64_t v30 = *(void *)(SKCParticleSystem::getSlice(v29, (const void **)__p) + 16);
      if (SHIBYTE(v137) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v31 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "accel");
      uint64_t v32 = *(void *)(SKCParticleSystem::getSlice(v31, (const void **)__p) + 16);
      if (SHIBYTE(v137) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v33 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
      uint64_t v34 = *(void *)(SKCParticleSystem::getSlice(v33, (const void **)__p) + 16);
      if (SHIBYTE(v137) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v35 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "override");
      uint64_t Slice = SKCParticleSystem::getSlice(v35, (const void **)__p);
      if (SHIBYTE(v137) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v37 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "outVel");
      uint64_t v38 = SKCParticleSystem::getSlice(v37, (const void **)__p);
      if (SHIBYTE(v137) < 0) {
        operator delete(__p[0]);
      }
      SKCDataSlice::resize((void **)Slice, *(_DWORD *)(*((void *)this + 75) + 80));
      SKCDataSlice::resize((void **)v38, *(_DWORD *)(*((void *)this + 75) + 80));
      int v151 = -1;
      uint64_t v39 = (float32x2_t *)(v28 + 8 * v14);
      *(void *)&v152[4] = 0;
      *(void *)&v152[12] = 0;
      char v153 = 1;
      uint64_t v40 = (float32x2_t *)(v30 + 8 * v14);
      uint64_t v157 = 0;
      uint64_t v158 = 1;
      char v41 = (float32x2_t *)(v32 + 8 * v14);
      char v159 = 0;
      uint64_t v160 = 0;
      uint64_t v161 = 8;
      char v162 = 0;
      int v165 = 1065353216;
      __p[0] = 0;
      __p[1] = v40;
      uint64_t v137 = 8;
      char v138 = 0;
      uint64_t v139 = 0;
      uint64_t v140 = v39;
      uint64_t v141 = 8;
      char v142 = 0;
      int v143 = 1065353216;
      int v145 = 0;
      long long v144 = *(unsigned int *)v134;
      char v146 = 1;
      *(_OWORD *)&v134[4] = 0uLL;
      int v147 = 1065353216;
      int v149 = 0;
      long long v148 = *(_OWORD *)v134;
      char v150 = 1;
      float32x4_t v154 = v41;
      uint64_t v155 = 8;
      char v156 = 0;
      uint64_t v163 = *((void *)this + 91);
      uint64_t v164 = v132;
      PKGet_INV_PTM_RATIO();
      int v165 = v42;
      int v43 = *((_DWORD *)this + 244);
      *(void *)&v134[12] = 0;
      *(void *)&v134[4] = 0;
      int v151 = v43;
      *(_OWORD *)float v152 = *(unsigned int *)v134;
      *(_DWORD *)&v152[16] = 0;
      char v153 = 1;
      uint64_t v157 = *(void *)(Slice + 16) + v14;
      uint64_t v158 = 1;
      char v159 = 0;
      uint64_t v160 = *(void *)(v38 + 16) + 8 * v14;
      uint64_t v161 = 8;
      char v162 = 0;
      PKCAether::Evaluator::evalFieldsVec2();
      char v44 = (float *)(v34 + 4 * v14);
      if (*((void *)this + 83))
      {
        uint64_t v45 = *((void *)this + 75);
        std::string::basic_string[abi:ne180100]<0>(v134, "lifeRatio");
        uint64_t v46 = *(void *)(SKCParticleSystem::getSlice(v45, (const void **)v134) + 16);
        if (v135 < 0) {
          operator delete(*(void **)v134);
        }
        if (a3 >= 1)
        {
          int v47 = (float *)(v46 + 4 * v14);
          int v48 = a3;
          do
          {
            float32x2_t v49 = *v41;
            float32x2_t v50 = *v39;
            float32x2_t v51 = *v40;
            float v52 = *v47;
            float v53 = *v44;
            *(_DWORD *)unsigned int v134 = 0;
            SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 83), v52, (float *)v134);
            float32x2_t v54 = vmla_n_f32(v50, vmul_n_f32(v49, a4 - v53), *(float *)v134);
            *v41++ = 0;
            *v39++ = v54;
            *v40++ = vadd_f32(vmla_n_f32(v51, v54, a4 - v53), vmul_n_f32(vmul_f32(vsub_f32(v54, v50), (float32x2_t)0x3F0000003F000000), a4 - v53));
            ++v47;
            ++v44;
            --v48;
          }
          while (v48);
        }
      }
      else if (a3 >= 1)
      {
        int v69 = a3;
        do
        {
          float32x2_t v70 = *v40;
          float v71 = *v44++;
          float32x2_t v72 = vmla_n_f32(*v39, *v41, a4 - v71);
          float32x2_t v73 = vmul_n_f32(vmul_f32(vsub_f32(v72, *v39), (float32x2_t)0x3F0000003F000000), a4 - v71);
          *v41++ = 0;
          *v39++ = v72;
          *v40++ = vadd_f32(vmla_n_f32(v70, v72, a4 - v71), v73);
          --v69;
        }
        while (v69);
      }

      _Block_object_dispose(&v170, 8);
      goto LABEL_48;
    }
  }
  else
  {
    MEMORY[0x21052E950](v167, 0);
  }
  uint64_t v55 = *((void *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "vel");
  uint64_t v56 = *(void *)(SKCParticleSystem::getSlice(v55, (const void **)__p) + 16);
  if (SHIBYTE(v137) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v57 = *((void *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "pos");
  uint64_t v58 = *(void *)(SKCParticleSystem::getSlice(v57, (const void **)__p) + 16);
  if (SHIBYTE(v137) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v59 = *((void *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
  uint64_t v60 = *(void *)(SKCParticleSystem::getSlice(v59, (const void **)__p) + 16);
  if (SHIBYTE(v137) < 0) {
    operator delete(__p[0]);
  }
  if (a3 >= 1)
  {
    float v61 = (float32x2_t *)(v56 + 8 * v14);
    double v62 = (float32x2_t *)(v58 + 8 * v14);
    float32x2_t v63 = *(float32x2_t *)((char *)this + 904);
    int v64 = a3;
    float32x2_t v65 = (float *)(v60 + 4 * v14);
    do
    {
      float32x2_t v66 = *v61;
      float v67 = *v65++;
      float32x2_t v68 = vmul_n_f32(v63, a4 - v67);
      *double v62 = vadd_f32(vmla_n_f32(*v62, *v61, a4 - v67), vmul_n_f32(vmul_f32(v68, (float32x2_t)0x3F0000003F000000), a4 - v67));
      ++v62;
      *v61++ = vadd_f32(v66, v68);
      --v64;
    }
    while (v64);
  }
LABEL_48:
  uint64_t v74 = *((void *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "rot");
  float v75 = (float *)(*(void *)(SKCParticleSystem::getSlice(v74, (const void **)__p) + 16) + 4 * v14);
  if (SHIBYTE(v137) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)this + 81))
  {
    uint64_t v76 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
    uint64_t v77 = *(void *)(SKCParticleSystem::getSlice(v76, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0) {
      operator delete(__p[0]);
    }
    if (a3 >= 1)
    {
      float v78 = (float *)(v77 + 4 * v14);
      int v79 = a3;
      do
      {
        SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 81), *v78++, v75++);
        --v79;
      }
      while (v79);
    }
  }
  else if ((*((unsigned char *)this + 935) & 0x60) != 0)
  {
    uint64_t v80 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
    uint64_t v81 = *(void *)(SKCParticleSystem::getSlice(v80, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0) {
      operator delete(__p[0]);
    }
    if (a3 >= 1)
    {
      float v82 = (float *)(v81 + 4 * v14);
      float v83 = *((float *)this + 233);
      int v84 = a3;
      do
      {
        float v85 = *v82++;
        *float v75 = *v75 + (float)(v83 * (float)(a4 - v85));
        ++v75;
        --v84;
      }
      while (v84);
    }
  }
  uint64_t v86 = *((void *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  float64_t v87 = (float *)(*(void *)(SKCParticleSystem::getSlice(v86, (const void **)__p) + 16) + 4 * v14);
  if (SHIBYTE(v137) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)this + 82))
  {
    uint64_t v88 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
    uint64_t v89 = *(void *)(SKCParticleSystem::getSlice(v88, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0) {
      operator delete(__p[0]);
    }
    if (a3 >= 1)
    {
      float32x2_t v90 = (float *)(v89 + 4 * v14);
      int v91 = a3;
      do
      {
        SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 82), *v90++, v87++);
        --v91;
      }
      while (v91);
    }
  }
  else
  {
    float v92 = *((float *)this + 236);
    if ((LODWORD(v92) & 0x60000000) != 0)
    {
      uint64_t v93 = *((void *)this + 75);
      std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
      uint64_t v94 = *(void *)(SKCParticleSystem::getSlice(v93, (const void **)__p) + 16);
      if (SHIBYTE(v137) < 0) {
        operator delete(__p[0]);
      }
      if (a3 >= 1)
      {
        uint64_t v95 = (float *)(v94 + 4 * v14);
        int v96 = a3;
        do
        {
          float v97 = *v95++;
          *float64_t v87 = fmaxf(*v87 + (float)(v92 * (float)(a4 - v97)), 0.0);
          ++v87;
          --v96;
        }
        while (v96);
      }
    }
  }
  uint64_t v98 = *((void *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "alpha");
  float v99 = (float *)(*(void *)(SKCParticleSystem::getSlice(v98, (const void **)__p) + 16) + 4 * v14);
  if (SHIBYTE(v137) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)this + 80))
  {
    uint64_t v100 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
    uint64_t v101 = *(void *)(SKCParticleSystem::getSlice(v100, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0) {
      operator delete(__p[0]);
    }
    if (a3 >= 1)
    {
      float v102 = (float *)(v101 + 4 * v14);
      int v103 = a3;
      do
      {
        SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 80), *v102++, v99++);
        --v103;
      }
      while (v103);
    }
  }
  else if ((*((unsigned char *)this + 959) & 0x60) != 0)
  {
    uint64_t v104 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
    uint64_t v105 = *(void *)(SKCParticleSystem::getSlice(v104, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0) {
      operator delete(__p[0]);
    }
    if (a3 >= 1)
    {
      int v106 = (float *)(v105 + 4 * v14);
      float v107 = *((float *)this + 239);
      int v108 = a3;
      do
      {
        float v109 = *v106++;
        *float v99 = *v99 + (float)(v107 * (float)(a4 - v109));
        ++v99;
        --v108;
      }
      while (v108);
    }
  }
  uint64_t v110 = *((void *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "colorBlend");
  float v111 = (float *)(*(void *)(SKCParticleSystem::getSlice(v110, (const void **)__p) + 16) + 4 * v14);
  if (SHIBYTE(v137) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)this + 79))
  {
    uint64_t v112 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
    uint64_t v113 = *(void *)(SKCParticleSystem::getSlice(v112, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0) {
      operator delete(__p[0]);
    }
    if (a3 >= 1)
    {
      float v114 = (float *)(v113 + 4 * v14);
      int v115 = a3;
      do
      {
        SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 79), *v114++, v111++);
        --v115;
      }
      while (v115);
    }
  }
  else if ((*((unsigned char *)this + 843) & 0x60) != 0)
  {
    uint64_t v116 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
    uint64_t v117 = *(void *)(SKCParticleSystem::getSlice(v116, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0) {
      operator delete(__p[0]);
    }
    if (a3 >= 1)
    {
      uint64_t v118 = (float *)(v117 + 4 * v14);
      float v119 = *((float *)this + 210);
      int v120 = a3;
      do
      {
        float v121 = *v118++;
        *float v111 = *v111 + (float)(v119 * (float)(a4 - v121));
        ++v111;
        --v120;
      }
      while (v120);
    }
  }
  uint64_t v122 = *((void *)this + 75);
  std::string::basic_string[abi:ne180100]<0>(__p, "color");
  uint64_t v123 = (float32x4_t *)(*(void *)(SKCParticleSystem::getSlice(v122, (const void **)__p) + 16) + 16 * v14);
  if (SHIBYTE(v137) < 0) {
    operator delete(__p[0]);
  }
  if (*((void *)this + 78))
  {
    uint64_t v124 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "lifeRatio");
    uint64_t v125 = *(void *)(SKCParticleSystem::getSlice(v124, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0) {
      operator delete(__p[0]);
    }
    if (a3 >= 1)
    {
      float v126 = (float *)(v125 + 4 * v14);
      do
      {
        SKCKeyframeSequence::sample(*((SKCKeyframeSequence **)this + 78), *v126++, v123->f32);
        ++v123;
        --a3;
      }
      while (a3);
    }
  }
  else if ((*((unsigned char *)this + 819) & 0x60) != 0 {
         || (*((unsigned char *)this + 823) & 0x60) != 0
  }
         || (*((unsigned char *)this + 827) & 0x60) != 0
         || (*((unsigned char *)this + 831) & 0x60) != 0)
  {
    uint64_t v127 = *((void *)this + 75);
    std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
    uint64_t v128 = *(void *)(SKCParticleSystem::getSlice(v127, (const void **)__p) + 16);
    if (SHIBYTE(v137) < 0) {
      operator delete(__p[0]);
    }
    if (a3 >= 1)
    {
      BOOL v129 = (float *)(v128 + 4 * v14);
      float32x4_t v130 = *((float32x4_t *)this + 51);
      do
      {
        float v131 = *v129++;
        *uint64_t v123 = vmlaq_n_f32(*v123, v130, a4 - v131);
        ++v123;
        --a3;
      }
      while (a3);
    }
  }
  if (v168)
  {
    uint64_t v169 = v168;
    operator delete(v168);
  }
  __p[0] = v167;
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_20AE19724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  PKCAether::Evaluator::~Evaluator((PKCAether::Evaluator *)(v23 - 256));
  _Unwind_Resume(a1);
}

void sub_20AE198A8()
{
}

void SKCEmitterNode::recordPrevStartPosition(id *this)
{
  uint64_t v2 = this + 71;
  id WeakRetained = objc_loadWeakRetained(this + 71);

  if (WeakRetained)
  {
    id v4 = objc_loadWeakRetained(v2);
    float v5 = (SKCNode *)[v4 _backingNode];

    v6.i64[0] = (uint64_t)this[109];
    v6.i64[1] = 0x3F80000000000000;
    if (v5 != (SKCNode *)this) {
      *(double *)v6.i64 = SKCNode::convertPointFromNode(v5, (const SKCNode *)this, v6);
    }
    id v12 = (id)v6.i64[0];
  }
  else
  {
    id v12 = this[109];
  }
  float32x4_t v7 = operator new(0x18uLL);
  v7[2] = v12;
  uint64_t v8 = this[106];
  *float32x4_t v7 = v8;
  v7[1] = this + 106;
  v8[1] = v7;
  this[106] = v7;
  unint64_t v9 = (unint64_t)this[108] + 1;
  this[108] = (id)v9;
  if (v9 >= 3)
  {
    do
    {
      uint64_t v10 = (uint64_t *)this[107];
      uint64_t v11 = *v10;
      *(void *)(v11 + 8) = v10[1];
      *(void *)v10[1] = v11;
      this[108] = (id)(v9 - 1);
      operator delete(v10);
      unint64_t v9 = (unint64_t)this[108];
    }
    while (v9 > 2);
  }
}

void sub_20AE199B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float32x4_t ___ZN14SKCEmitterNode11preSimulateEiif_block_invoke(uint64_t a1, uint64_t *lpsrc, unsigned char *a3)
{
  uint64_t v6 = *lpsrc;
  {
    *a3 = 1;
  }
  else
  {
    *(double *)v8.i64 = (*(double (**)(uint64_t *))(v6 + 104))(lpsrc);
    unint64_t v9 = *(float32x2_t **)(*(void *)(a1 + 32) + 8);
    float32x4_t result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*(_OWORD *)v9[4].f32)), v10, v9[4], 1), v11, *(float32x4_t *)v9[4].f32, 2), v12, *(float32x4_t *)v9[4].f32, 3);
    *(float32x4_t *)v9[4].f32 = result;
  }
  return result;
}

void SKCEmitterNode::~SKCEmitterNode(id *this)
{
  SKCEmitterNode::~SKCEmitterNode(this);

  JUMPOUT(0x21052EA30);
}

{
  void *v2;
  id v3;
  SKCKeyframeSequence *v4;
  SKCKeyframeSequence *v5;
  SKCKeyframeSequence *v6;
  SKCKeyframeSequence *v7;
  SKCKeyframeSequence *v8;
  SKCKeyframeSequence *v9;
  SKCKeyframeSequence *v10;
  uint64_t vars8;

  *this = &unk_26BEEDAC0;
  SKCEmitterNode::clearTargetNode((SKCEmitterNode *)this);
  uint64_t v2 = this[74];
  if (v2 && (id *)v2[10] == this) {
    v2[10] = 0;
  }
  SKCNode::removeAllChildren((SKCNode *)this);
  float v3 = this[73];
  *(_OWORD *)(this + 73) = 0u;

  *((_DWORD *)this + 174) = 0;
  id v4 = (SKCKeyframeSequence *)this[79];
  if (v4)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v4);
    MEMORY[0x21052EA30]();
    this[79] = 0;
  }
  float v5 = (SKCKeyframeSequence *)this[78];
  if (v5)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v5);
    MEMORY[0x21052EA30]();
    this[78] = 0;
  }
  uint64_t v6 = (SKCKeyframeSequence *)this[82];
  if (v6)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v6);
    MEMORY[0x21052EA30]();
    this[82] = 0;
  }
  float32x4_t v7 = (SKCKeyframeSequence *)this[83];
  if (v7)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v7);
    MEMORY[0x21052EA30]();
    this[83] = 0;
  }
  float32x4_t v8 = (SKCKeyframeSequence *)this[84];
  if (v8)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v8);
    MEMORY[0x21052EA30]();
    this[84] = 0;
  }
  unint64_t v9 = (SKCKeyframeSequence *)this[81];
  if (v9)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v9);
    MEMORY[0x21052EA30]();
    this[81] = 0;
  }
  float32x4_t v10 = (SKCKeyframeSequence *)this[80];
  if (v10)
  {
    SKCKeyframeSequence::~SKCKeyframeSequence(v10);
    MEMORY[0x21052EA30]();
    this[80] = 0;
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(this + 125);

  std::__list_imp<SKCRenderSortInfo *>::clear(this + 106);
  objc_destroyWeak(this + 71);

  SKCNode::~SKCNode(this);
}

void SKCEmitterNode::setPaused(float64x2_t *this, int a2)
{
  if (BYTE4(this[10].f64[1]) != a2)
  {
    SKCNode::setPaused((SKCNode *)this, a2);
    double v4 = skCurrentTime();
    if (a2)
    {
      this[45].f64[0] = v4;
    }
    else
    {
      float v5 = v4 - this[45].f64[0];
      this[44] = vaddq_f64(this[44], (float64x2_t)vdupq_lane_s64(COERCE__INT64(v5), 0));
      if (!BYTE4(this[61].f64[1]))
      {
        uint64_t v6 = *(void *)&this[37].f64[1];
        std::string::basic_string[abi:ne180100]<0>(__p, "birthTime");
        float32x4_t v7 = *(float **)(SKCParticleSystem::getSlice(v6, (const void **)__p) + 16);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v8 = *(void *)&this[37].f64[1];
        std::string::basic_string[abi:ne180100]<0>(__p, "deathTime");
        unint64_t v9 = *(float **)(SKCParticleSystem::getSlice(v8, (const void **)__p) + 16);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
        for (int i = *(_DWORD *)(*(void *)&this[37].f64[1] + 84); i; --i)
        {
          *float32x4_t v7 = *v7 + v5;
          ++v7;
          *unint64_t v9 = *v9 + v5;
          ++v9;
        }
      }
    }
  }
}

void sub_20AE19BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id SKCEmitterNode::clearTargetNode(SKCEmitterNode *this)
{
  uint64_t v2 = (id *)((char *)this + 568);
  id WeakRetained = objc_loadWeakRetained((id *)this + 71);
  double v4 = WeakRetained;
  if (WeakRetained) {
    SKCNode::removeInternalChild((SKCNode *)[WeakRetained _backingNode], *((id **)this + 74));
  }

  id result = objc_storeWeak(v2, 0);
  *((_DWORD *)this + 174) = 0;
  return result;
}

void sub_20AE19E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double SKCShapeNode::getBoundingBox(SKCShapeNode *this)
{
  if (!*((void *)this + 70)) {
    goto LABEL_9;
  }
  float v2 = *((float *)this + 155);
  if (v2 <= 0.0 || *((float *)this + 147) <= 0.0)
  {
    *(CGRect *)&CGFloat v6 = CGPathGetBoundingBox((CGPathRef)*((void *)this + 79));
  }
  else
  {
    if (*((unsigned char *)this + 644)) {
      float v2 = v2 + (float)((float)(*((float *)this + 156) * 2.0) + 1.7);
    }
    CopyByStrokingPath = CGPathCreateCopyByStrokingPath(*((CGPathRef *)this + 79), 0, v2, (CGLineCap)*((_DWORD *)this + 153), (CGLineJoin)*((_DWORD *)this + 152), *((float *)this + 154));
    BoundingBoCGFloat x = CGPathGetBoundingBox(CopyByStrokingPath);
    CGFloat width = BoundingBox.size.width;
    CGFloat x = BoundingBox.origin.x;
    CGFloat height = BoundingBox.size.height;
    CGFloat y = BoundingBox.origin.y;
    CGPathRelease(CopyByStrokingPath);
    double v5 = height;
    double v4 = y;
    double v7 = width;
    CGFloat v6 = x;
  }
  float64_t v27 = v7;
  float64_t v30 = v6;
  float64_t v21 = v5;
  float64_t v24 = v4;
  if (!CGRectIsEmpty(*(CGRect *)&v6))
  {
    v9.f64[0] = v27;
    v9.f64[1] = v21;
    v10.f64[0] = v30;
    v10.f64[1] = v24;
    *(double *)&long long v11 = SKCBoundingBoxMake(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v9));
    long long v22 = v12;
    long long v25 = v11;
    long long v28 = v14;
    long long v31 = v13;
    (*(void (**)(SKCShapeNode *))(*(void *)this + 104))(this);
    uint64_t v19 = 0;
    v32[0] = v25;
    v32[1] = v22;
    v32[2] = v31;
    v32[3] = v28;
    do
    {
      *(long long *)((char *)&v33 + v19 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(v32[v19])), v16, *(float32x2_t *)&v32[v19], 1), v17, (float32x4_t)v32[v19], 2), v18, (float32x4_t)v32[v19], 3);
      ++v19;
    }
    while (v19 != 4);
    return *(double *)&v33;
  }
  else
  {
LABEL_9:
    *(void *)&double result = SKCNode::getBoundingBox((__n128 *)this).n128_u64[0];
  }
  return result;
}

id SKCShapeNode::getBatchInfo@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 4) = 0x300000000;
  *(_DWORD *)(a3 + 12) = 1;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 60) = 0u;
  if (*(void *)(a1 + 664) || *(float *)(a1 + 604) > 0.0 || (uint64_t v6 = *(void *)(a1 + 680)) != 0) {
    LOBYTE(v6) = *(void *)(a1 + 560) != 0;
  }
  *(unsigned char *)a3 = v6;
  *(_DWORD *)(a3 + 4) = (**(uint64_t (***)(uint64_t, void *))a1)(a1, a2);
  int BackingBlendMode = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
  *(_DWORD *)(a3 + 8) = 3;
  *(_DWORD *)(a3 + 12) = BackingBlendMode;
  uint64_t v8 = *(void **)(a1 + 656);
  if (!v8)
  {
    *(void *)(a3 + 32) = a2[54];
LABEL_11:
    float64x2_t v9 = a2 + 60;
    goto LABEL_12;
  }
  [v8 _backingTexture];
  *(void *)(a3 + 32) = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (!*(void *)(a1 + 656)) {
    goto LABEL_11;
  }
  float64x2_t v9 = a2 + 64;
LABEL_12:
  uint64_t v10 = *v9;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = v10;
  *(void *)(a3 + 24) = a2[21];
  id result = *(id *)(a1 + 672);
  *(void *)(a3 + 16) = result;
  return result;
}

BOOL SKCShapeNode::shouldFill(SKCShapeNode *this)
{
  return (*((void *)this + 83) || *((float *)this + 151) > 0.0 || *((void *)this + 85))
      && *((void *)this + 70) != 0;
}

void SKCShapeNode::subclassRecomputeFlags(id *this)
{
  if ((this[82] || [this[85] _usesTimeUniform])
    && !*((unsigned char *)this + 172)
    && (*((unsigned char *)this + 171) & 0x60) != 0)
  {
    SKCNode::setFlags((SKCNode *)this, 66, 1);
  }
}

BOOL SKCShapeNode::shouldUseLocalStrokeBuffers(SKCShapeNode *this, SKCRenderInfo *a2)
{
  return (*((void *)this + 82) || *((float *)this + 147) > 0.0 || *((void *)this + 84))
      && *((float *)this + 155) > 0.0
      && *((void *)this + 70)
      && (([*((id *)this + 84) _usesPathLengthUniform] & 1) != 0
       || 4 * SKCShapeNode::_NEW_quadCount(this) > 0x1B4);
}

BOOL SKCShapeNode::shouldStroke(SKCShapeNode *this)
{
  return (*((void *)this + 82) || *((float *)this + 147) > 0.0 || *((void *)this + 84))
      && *((float *)this + 155) > 0.0
      && *((void *)this + 70) != 0;
}

uint64_t SKCShapeNode::_NEW_quadCount(SKCShapeNode *this)
{
  uint64_t v1 = *((void *)this + 70);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(v1 + 24) - *(void *)(v1 + 16);
  if (!v2) {
    return 0;
  }
  uint64_t v4 = 0;
  LODWORD(v5) = 0;
  unint64_t v6 = v2 >> 3;
  uint64_t v7 = v6 <= 1 ? 1 : v6;
  do
    uint64_t v5 = SKCShapeNode::_NEW_quadCount(this, v4++) + v5;
  while (v7 != v4);
  if (!*((void *)this + 82) && *((float *)this + 147) <= 0.0 && !*((void *)this + 84)
    || *((float *)this + 155) <= 0.0)
  {
    return 0;
  }
  return v5;
}

BOOL SKCShapeNode::getNeedsCustomRenderOps(SKCShapeNode *this, SKCRenderInfo *a2)
{
  return (*((void *)this + 83) || *((float *)this + 151) > 0.0 || *((void *)this + 85)) && *((void *)this + 70)
      || SKCShapeNode::shouldUseLocalStrokeBuffers(this, a2);
}

uint64_t SKCShapeNode::getMaxBatchRenderElementCount(SKCShapeNode *this, SKCRenderInfo *a2)
{
  if (SKCShapeNode::shouldUseLocalStrokeBuffers(this, a2)) {
    return 0;
  }
  else {
    return 4 * SKCShapeNode::_NEW_quadCount(this);
  }
}

void SKCShapeNode::addRenderOps(SKCShapeNode *this, unsigned int *a2, uint64_t **a3)
{
  if (!*((void *)this + 83) && *((float *)this + 151) <= 0.0 && !*((void *)this + 85)) {
    goto LABEL_88;
  }
  uint64_t v6 = *((void *)this + 70);
  if (!v6) {
    goto LABEL_88;
  }
  uint64_t v9 = v6 + 16;
  uint64_t v7 = *(void *)(v6 + 16);
  uint64_t v8 = *(void *)(v9 + 8);
  uint64_t v10 = v8 - v7;
  if (v8 != v7)
  {
    uint64_t v11 = 0;
    int v12 = 0;
    unint64_t v13 = v10 >> 3;
    do
    {
      uint64_t v14 = *(void *)(v7 + 8 * v11);
      if (*(void *)(v14 + 24) != *(void *)(v14 + 16)) {
        v12 += 3 * *(_DWORD *)(v14 + 4) * *((_DWORD *)this + 160);
      }
      ++v11;
    }
    while (v13 > v11);
    if (v12)
    {
      uint64_t v15 = (v12 + 6);
      float32x4_t v16 = (jet_buffer_pool *)*((void *)this + 86);
      if (!v16 || *((_DWORD *)v16 + 4) < v15)
      {
        SKCRenderer::getBackingContext(*((void *)a2 + 13), __p);
        if (*((void *)this + 86))
        {
          float32x4_t v17 = (std::__shared_weak_count *)*((void *)this + 87);
          *((_OWORD *)this + 43) = 0u;
          if (v17) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v17);
          }
          uint64_t v19 = (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(*(void *)__p[0] + 16))(__p[0], 0, 4, v15);
          std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(__str, v19);
        }
        uint64_t v18 = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)__p[0] + 16))(__p[0], 2, 4, 6);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(__str, v18);
      }
      jet_buffer_pool::next_buffer(v16);
      jet_buffer_pool::next_buffer(*((jet_buffer_pool **)this + 88));
      jet_buffer_pool::next_buffer(*((jet_buffer_pool **)this + 90));
      uint64_t data = (_OWORD *)jet_buffer_pool::get_data(*((jet_buffer_pool **)this + 86));
      float32x4_t v21 = (float32x4_t)xmmword_20AE9B740;
      float32x4_t v22 = (float32x4_t)xmmword_20AE9B730;
      uint64_t v23 = 0;
      unsigned int v24 = 0;
      unsigned int v25 = 6;
      *((void *)&v26 + SKCNode::setFlags(this, 66, 1) = 0x3F80000000000000;
      do
      {
        uint64_t v27 = *(void *)(*(void *)(*((void *)this + 70) + 16) + 8 * v23);
        uint64_t v28 = *(unsigned int *)(v27 + 4);
        float32x4_t v29 = vaddq_f32(*((float32x4_t *)a2 + 5), vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(*((float32x4_t *)a2 + 2), **(float **)(v27 + 16)), *((float32x4_t *)a2 + 3), *(float *)(*(void *)(v27 + 16) + 4)), (float32x4_t)0, *((float32x4_t *)a2 + 4)));
        float32x4_t v21 = vminnmq_f32(v29, v21);
        float32x4_t v22 = vmaxnmq_f32(v29, v22);
        if (v28)
        {
          uint64_t v30 = 0;
          float32x4_t v31 = v29;
          do
          {
            unint64_t v32 = 0;
            uint64_t v33 = *(void *)(v27 + 16);
            uint64_t v34 = (float *)(v33 + 8 * (3 * v30));
            float v35 = *v34;
            float v36 = v34[1];
            uint64_t v37 = (float *)(v33 + 8 * (3 * v30 + 1));
            float v38 = *v37;
            float v39 = v37[1];
            uint64_t v40 = (float *)(v33 + 8 * (3 * v30 + 2));
            float32x4_t v41 = *((float32x4_t *)a2 + 2);
            float32x4_t v42 = *((float32x4_t *)a2 + 3);
            float32x4_t v43 = *((float32x4_t *)a2 + 4);
            float32x4_t v44 = *((float32x4_t *)a2 + 5);
            v46.i64[0] = vaddq_f32(v44, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v41, v35), v42, v36), (float32x4_t)0, v43)).u64[0];
            v47.i64[0] = vaddq_f32(v44, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v41, v38), v42, v39), (float32x4_t)0, v43)).u64[0];
            v48.i64[0] = vaddq_f32(v44, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v41, *v40), v42, v40[1]), (float32x4_t)0, v43)).u64[0];
            uint64_t v45 = (float *)(v33 + 8 * (3 * v30 + 3));
            v49.i64[0] = vaddq_f32(v44, vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v41, *v45), v42, v45[1]), (float32x4_t)0, v43)).u64[0];
            v46.i64[1] = 0x3F80000000000000;
            v47.i64[1] = 0x3F80000000000000;
            v48.i64[1] = 0x3F80000000000000;
            v49.i64[1] = 0x3F80000000000000;
            *(_OWORD *)__str = xmmword_20AE9AE00;
            *(_OWORD *)&__str[16] = xmmword_20AE9B750;
            long long v163 = xmmword_20AE9B760;
            long long v164 = xmmword_20AE9B770;
            do
            {
              *(float32x4_t *)&__p[v32 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v46, COERCE_FLOAT(*(_OWORD *)&__str[v32])), v47, *(float32x2_t *)&__str[v32], 1), v48, *(float32x4_t *)&__str[v32], 2), v49, *(float32x4_t *)&__str[v32], 3);
              v32 += 16;
            }
            while (v32 != 64);
            unsigned int v50 = *((_DWORD *)this + 160);
            if (v50)
            {
              int v51 = 0;
              float32x4_t v52 = *(float32x4_t *)__p;
              float32x4_t v53 = v157;
              float32x4_t v54 = (float32x4_t)v158;
              float32x4_t v55 = (float32x4_t)v159;
              do
              {
                float v56 = (float)++v51 / (float)v50;
                float32x4_t v57 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v52, v53, v56), v54, v56 * v56), v55, v56 * (float)(v56 * v56));
                data[v25] = v29;
                unsigned int v58 = v25 + 2;
                data[v25 + 1] = v31;
                float32x4_t v21 = vminnmq_f32(v57, v21);
                float32x4_t v22 = vmaxnmq_f32(v57, v22);
                v25 += 3;
                data[v58] = v57;
                float32x4_t v31 = v57;
              }
              while (v50 != v51);
            }
            else
            {
              float32x4_t v57 = v31;
            }
            ++v30;
            float32x4_t v31 = v57;
          }
          while (v30 != v28);
        }
        uint64_t v23 = ++v24;
      }
      while (v13 > v24);
      *(void *)&long long v59 = v21.i64[0];
      *((void *)&v59 + SKCNode::setFlags(this, 66, 1) = 0x3F80000000000000;
      *(void *)&long long v60 = v22.i64[0];
      *((void *)&v60 + SKCNode::setFlags(this, 66, 1) = 0x3F80000000000000;
      *((void *)&v61 + SKCNode::setFlags(this, 66, 1) = 0x3F80000000000000;
      *(void *)&long long v61 = __PAIR64__(v22.u32[1], v21.u32[0]);
      _OWORD *data = v59;
      data[1] = v60;
      *(void *)&long long v26 = __PAIR64__(v21.u32[1], v22.u32[0]);
      data[2] = v61;
      data[3] = v59;
      data[4] = v26;
      data[5] = v60;
      jet_buffer_pool::commit_data(*((jet_buffer_pool **)this + 86));
      double v62 = (void *)jet_buffer_pool::get_data(*((jet_buffer_pool **)this + 90));
      __asm { FMOV            V1.2S, #1.0 }
      *double v62 = 0;
      v62[1] = _D1;
      v62[2] = 0x3F80000000000000;
      v62[3] = 0;
      v62[4] = 1065353216;
      v62[5] = _D1;
      jet_buffer_pool::commit_data(*((jet_buffer_pool **)this + 90));
      float32x4_t v68 = *((float32x4_t *)this + 37);
      v68.i32[3] = 1.0;
      float32x4_t v155 = v68;
      uint64_t v69 = jet_buffer_pool::get_data(*((jet_buffer_pool **)this + 88));
      uint64_t v70 = 0;
      int16x8_t v71 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v155, fminf(fmaxf((float)(*((float *)this + 151) * *((float *)this + 81)) * *((float *)a2 + 24), 0.0), 1.0)), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v71.i8 = vmovn_s32((int32x4_t)v71);
      unsigned __int32 v72 = vmovn_s16(v71).u32[0];
      do
      {
        *(_DWORD *)(v69 + v70) = v72;
        v70 += 4;
      }
      while (v70 != 24);
      jet_buffer_pool::commit_data(*((jet_buffer_pool **)this + 88));
      float32x2_t v73 = *a3;
      uint64_t v74 = *((void *)a2 + 17);
      LODWORD(__p[0]) = 31;
      unint64_t v75 = v73[2];
      if (v75 >= v73[3])
      {
        uint64_t v76 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v73 + 1, (int *)__p);
      }
      else
      {
        *(void *)unint64_t v75 = &unk_26BEEC420;
        *(_DWORD *)(v75 + 8) = 31;
        *(void *)(v75 + 24) = 0;
        *(void *)(v75 + 32) = 0;
        *(void *)(v75 + 16) = 0;
        *(void *)(v75 + 64) = 0;
        uint64_t v76 = v75 + 192;
        *(void *)(v75 + 96) = 0;
      }
      v73[2] = v76;
      *(void *)(v76 - 80) = v74;
      *(_OWORD *)(v76 - 64) = xmmword_20AE9A970;
      *(void *)(v76 - 48) = 0x2300000000;
      uint64_t v77 = *a3;
      std::string::basic_string[abi:ne180100]<0>(__p, "a_position");
      uint64_t current_buffer = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)this + 86));
      jet_command_buffer::set_vertex_buffer(v77, (std::string *)__p, current_buffer);
      if (v157.i8[7] < 0) {
        operator delete(__p[0]);
      }
      jet_command_buffer::use_depth_stencil_mode(*a3, *((void *)a2 + 66));
      jet_command_buffer::set_stencil_reference_value((jet_command_buffer *)*a3, 1);
      jet_command_buffer::draw(*a3, 3, 0, 6);
      uint64_t v79 = *((void *)a2 + 83);
      ++*(_DWORD *)(v79 + 164);
      ++*(_DWORD *)(v79 + 148);
      jet_command_buffer::use_depth_stencil_mode(*a3, *((void *)a2 + 66));
      jet_command_buffer::set_stencil_reference_value((jet_command_buffer *)*a3, 0);
      jet_command_buffer::draw(*a3, 3, 6, v25 - 6);
      uint64_t v80 = *((void *)a2 + 83);
      ++*(_DWORD *)(v80 + 164);
      *(_DWORD *)(v80 + 148) += (v25 - 6) / 6;
      float v82 = (void *)*((void *)a2 + 21);
      uint64_t v81 = (std::__shared_weak_count *)*((void *)a2 + 22);
      if (v81) {
        atomic_fetch_add_explicit(&v81->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float v83 = (void *)*((void *)this + 85);
      if (v83)
      {
        [v83 _backingProgram];
        float v85 = __p[0];
        int v84 = (std::__shared_weak_count *)__p[1];
        if (__p[0])
        {
          if (__p[1]) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)__p[1] + 1, 1uLL, memory_order_relaxed);
          }
          if (v81) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v81);
          }
          uint64_t v81 = v84;
          float v82 = v85;
        }
      }
      else
      {
        int v84 = 0;
        float v85 = 0;
      }
      uint64_t v86 = *a3;
      int BackingBlendMode = SKBlendModeGetBackingBlendMode(*((SKBlendMode *)this + 36));
      LODWORD(__p[0]) = 31;
      unint64_t v88 = v86[2];
      if (v88 >= v86[3])
      {
        uint64_t v89 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v86 + 1, (int *)__p);
      }
      else
      {
        *(void *)unint64_t v88 = &unk_26BEEC420;
        *(_DWORD *)(v88 + 8) = 31;
        *(void *)(v88 + 24) = 0;
        *(void *)(v88 + 32) = 0;
        *(void *)(v88 + 16) = 0;
        *(void *)(v88 + 64) = 0;
        uint64_t v89 = v88 + 192;
        *(void *)(v88 + 96) = 0;
      }
      _OWORD v86[2] = v89;
      *(void *)(v89 - 80) = v82;
      *(_DWORD *)(v89 - 64) = BackingBlendMode;
      *(_OWORD *)(v89 - 60) = xmmword_20AE9B300;
      *(_DWORD *)(v89 - 44) = 35;
      jet_command_buffer::use_depth_stencil_mode(*a3, *((void *)a2 + 70));
      jet_command_buffer::set_stencil_reference_value((jet_command_buffer *)*a3, 0);
      float32x2_t v90 = *a3;
      std::string::basic_string[abi:ne180100]<0>(__p, "a_position");
      uint64_t v91 = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)this + 86));
      jet_command_buffer::set_vertex_buffer(v90, (std::string *)__p, v91);
      if (v157.i8[7] < 0) {
        operator delete(__p[0]);
      }
      float v92 = *a3;
      std::string::basic_string[abi:ne180100]<0>(__p, "a_color");
      uint64_t v93 = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)this + 88));
      jet_command_buffer::set_vertex_buffer(v92, (std::string *)__p, v93);
      if (v157.i8[7] < 0) {
        operator delete(__p[0]);
      }
      uint64_t v94 = *a3;
      std::string::basic_string[abi:ne180100]<0>(__p, "a_tex_coord");
      uint64_t v95 = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)this + 90));
      jet_command_buffer::set_vertex_buffer(v94, (std::string *)__p, v95);
      if (v157.i8[7] < 0) {
        operator delete(__p[0]);
      }
      int v96 = *a3;
      if (*((void *)this + 83))
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "u_texture");
        float v97 = (void *)*((void *)this + 83);
        if (v97)
        {
          [v97 _backingTexture];
          uint64_t v98 = *(void *)__str;
        }
        else
        {
          uint64_t v98 = 0;
          *(_OWORD *)__str = 0uLL;
        }
        jet_command_buffer::set_fragment_texture(v96, (std::string *)__p, v98);
        if (*(void *)&__str[8]) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
        }
        if (v157.i8[7] < 0) {
          operator delete(__p[0]);
        }
        if ([*((id *)this + 83) filteringMode] != 1)
        {
          float v99 = (uint64_t *)(a2 + 116);
LABEL_70:
          uint64_t v100 = *v99;
          uint64_t v101 = *a3;
          std::string::basic_string[abi:ne180100]<0>(__p, "u_texture");
          jet_command_buffer::set_fragment_sampler(v101, (std::string *)__p, v100);
          if (v157.i8[7] < 0)
          {
            operator delete(__p[0]);
            if (!v85)
            {
LABEL_84:
              jet_command_buffer::draw(*a3, 3, 0, 6);
              uint64_t v112 = *((void *)a2 + 83);
              ++*(_DWORD *)(v112 + 164);
              ++*(_DWORD *)(v112 + 148);
              jet_command_buffer::use_depth_stencil_mode(*a3, 0);
              if (v81) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v81);
              }
              if (v84) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v84);
              }
LABEL_88:
              if (!SKCShapeNode::shouldUseLocalStrokeBuffers(this, (SKCRenderInfo *)a2)) {
                return;
              }
              uint64_t v113 = 4 * SKCShapeNode::_NEW_quadCount(this);
              SKCRenderer::getBackingContext(*((void *)a2 + 13), &v160);
              float v114 = (jet_buffer_pool *)*((void *)this + 92);
              if (!v114) {
                goto LABEL_97;
              }
              if (*((_DWORD *)v114 + 4) < v113)
              {
                int v115 = (std::__shared_weak_count *)*((void *)this + 93);
                long long v116 = 0uLL;
                *((_OWORD *)this + 46) = 0u;
                if (v115)
                {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v115);
                  long long v116 = 0uLL;
                }
                uint64_t v117 = (std::__shared_weak_count *)*((void *)this + 95);
                *((_OWORD *)this + 47) = v116;
                if (v117) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v117);
                }
                uint64_t v118 = (std::__shared_weak_count *)*((void *)this + 97);
                *((_OWORD *)this + 48) = 0u;
                if (v118) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v118);
                }
LABEL_97:
                uint64_t v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v160 + 16))(v160, 2, 4, v113);
                std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(__p, v119);
              }
              jet_buffer_pool::next_buffer(v114);
              jet_buffer_pool::next_buffer(*((jet_buffer_pool **)this + 94));
              jet_buffer_pool::next_buffer(*((jet_buffer_pool **)this + 96));
              uint64_t v120 = SKCShapeNode::_NEW_copyRenderPathData(this, (float32x4_t *)a2, *((void *)this + 84) != 0, 1);
              jet_buffer_pool::commit_data(*((jet_buffer_pool **)this + 92));
              jet_buffer_pool::commit_data(*((jet_buffer_pool **)this + 94));
              jet_buffer_pool::commit_data(*((jet_buffer_pool **)this + 96));
              (*(void (**)(void **__return_ptr, SKCShapeNode *, unsigned int *))(*(void *)this + 24))(__p, this, a2);
              if ((int)v120 < 1) {
                goto LABEL_163;
              }
              if (v157.i64[0])
              {
                [(id)v157.i64[0] _backingProgram];
                float v121 = *(std::__shared_weak_count **)&__str[8];
                uint64_t v122 = *(void *)__str;
                if (*(void *)__str) {
                  v157.i64[1] = *(void *)__str;
                }
              }
              else
              {
                uint64_t v122 = 0;
                float v121 = 0;
              }
              if (*((unsigned char *)a2 + 576))
              {
                uint64_t v123 = v157.i64[1];
                uint64_t v124 = *a3;
                if (v157.i64[1] == *((void *)a2 + 21))
                {
                  uint64_t v123 = *((void *)a2 + 23);
                  *(_DWORD *)__str = 31;
                  unint64_t v125 = v124[2];
                  if (v125 >= v124[3])
                  {
                    uint64_t v126 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v124 + 1, (int *)__str);
                  }
                  else
                  {
                    *(void *)unint64_t v125 = &unk_26BEEC420;
                    *(_DWORD *)(v125 + 8) = 31;
                    *(void *)(v125 + 24) = 0;
                    *(void *)(v125 + 32) = 0;
                    *(void *)(v125 + 16) = 0;
                    *(void *)(v125 + 64) = 0;
                    uint64_t v126 = v125 + 192;
                    *(void *)(v125 + 96) = 0;
                  }
                  v124[2] = v126;
                  int v127 = 1;
                  goto LABEL_114;
                }
              }
              else
              {
                uint64_t v124 = *a3;
                uint64_t v123 = v157.i64[1];
              }
              int v127 = HIDWORD(__p[1]);
              *(_DWORD *)__str = 31;
              unint64_t v128 = v124[2];
              if (v128 >= v124[3])
              {
                uint64_t v126 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v124 + 1, (int *)__str);
              }
              else
              {
                *(void *)unint64_t v128 = &unk_26BEEC420;
                *(_DWORD *)(v128 + 8) = 31;
                *(void *)(v128 + 24) = 0;
                *(void *)(v128 + 32) = 0;
                *(void *)(v128 + 16) = 0;
                *(void *)(v128 + 64) = 0;
                uint64_t v126 = v128 + 192;
                *(void *)(v128 + 96) = 0;
              }
              v124[2] = v126;
LABEL_114:
              *(void *)(v126 - 80) = v123;
              *(_DWORD *)(v126 - 64) = v127;
              *(_OWORD *)(v126 - 60) = xmmword_20AE9B300;
              *(_DWORD *)(v126 - 44) = 3;
              BOOL v129 = *a3;
              if ((void)v158)
              {
                std::string::basic_string[abi:ne180100]<0>(__str, "u_texture");
                jet_command_buffer::set_fragment_texture(v129, (std::string *)__str, v158);
                if ((__str[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__str);
                }
                float32x4_t v130 = *a3;
                if ((void)v159)
                {
                  std::string::basic_string[abi:ne180100]<0>(__str, "u_texture");
                  jet_command_buffer::set_fragment_sampler(v130, (std::string *)__str, v159);
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(__str, "u_texture");
                  jet_command_buffer::set_fragment_sampler(v130, (std::string *)__str, *((void *)a2 + 60));
                }
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(__str, "u_texture");
                jet_command_buffer::set_fragment_texture(v129, (std::string *)__str, *((void *)a2 + 54));
                if ((__str[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__str);
                }
                float v131 = *a3;
                std::string::basic_string[abi:ne180100]<0>(__str, "u_texture");
                jet_command_buffer::set_fragment_sampler(v131, (std::string *)__str, *((void *)a2 + 60));
              }
              if ((__str[23] & 0x80000000) != 0) {
                operator delete(*(void **)__str);
              }
              if (*((void *)&v158 + 1))
              {
                long long v132 = *a3;
                std::string::basic_string[abi:ne180100]<0>(__str, "u_texture2");
                jet_command_buffer::set_fragment_texture(v132, (std::string *)__str, *((uint64_t *)&v158 + 1));
                if ((__str[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__str);
                }
                float v133 = *a3;
                if (*((void *)&v159 + 1))
                {
                  std::string::basic_string[abi:ne180100]<0>(__str, "u_texture2");
                  jet_command_buffer::set_fragment_sampler(v133, (std::string *)__str, *((uint64_t *)&v159 + 1));
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(__str, "u_texture2");
                  jet_command_buffer::set_fragment_sampler(v133, (std::string *)__str, *((void *)a2 + 60));
                }
                if ((__str[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__str);
                }
              }
              unsigned int v134 = *a3;
              std::string::basic_string[abi:ne180100]<0>(__str, "a_position");
              uint64_t v135 = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)this + 92));
              jet_command_buffer::set_vertex_buffer(v134, (std::string *)__str, v135);
              if ((__str[23] & 0x80000000) != 0) {
                operator delete(*(void **)__str);
              }
              float v136 = *a3;
              std::string::basic_string[abi:ne180100]<0>(__str, "a_color");
              uint64_t v137 = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)this + 94));
              jet_command_buffer::set_vertex_buffer(v136, (std::string *)__str, v137);
              if ((__str[23] & 0x80000000) != 0) {
                operator delete(*(void **)__str);
              }
              char v138 = *a3;
              std::string::basic_string[abi:ne180100]<0>(__str, "a_tex_coord");
              uint64_t v139 = jet_buffer_pool::get_current_buffer(*((jet_buffer_pool **)this + 96));
              jet_command_buffer::set_vertex_buffer(v138, (std::string *)__str, v139);
              if ((__str[23] & 0x80000000) != 0)
              {
                operator delete(*(void **)__str);
                if (!v122)
                {
LABEL_153:
                  unsigned int v149 = (6 * (v120 >> 2)) | 1;
                  if (v149 <= 0x4E20) {
                    uint64_t v150 = 20000;
                  }
                  else {
                    uint64_t v150 = v149;
                  }
                  uint64_t v151 = *((void *)a2 + 52);
                  if (!v151 || *(_DWORD *)(v151 + 48) < v150)
                  {
                    uint64_t v152 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v160 + 8))(v160, 4, 1, v150, 0);
                    std::shared_ptr<jet_buffer>::shared_ptr[abi:ne180100]<jet_buffer,void>(__str, v152);
                  }
                  std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100]((uint64_t *)a2 + 84, (long long *)a2 + 26);
                  jet_command_buffer::draw_indexed(*a3, (int)__p[1], *((void *)a2 + 52), 0, 6 * (v120 >> 2));
                  char v153 = (_DWORD *)*((void *)a2 + 83);
                  uint64_t v154 = v153[41];
                  v153[41] = v154 + 1;
                  v153[37] += v120 >> 2;
                  if ((*((unsigned char *)a2 + 581) & 0x10) != 0) {
                    NSLog(&cfstr_SkcrendererPPa.isa, this, v153[42], v154, (SHIDWORD(__p[0]) / 4), v157.i64[1], v158, HIDWORD(__p[1]));
                  }
                  if (v121) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v121);
                  }
LABEL_163:

                  if (v161) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v161);
                  }
                  return;
                }
              }
              else if (!v122)
              {
                goto LABEL_153;
              }
              uint64_t v140 = *a3;
              if (v157.i64[0])
              {
                [(id)v157.i64[0] _commandsForBatchOffset:*a2 count:v120];
                uint64_t v141 = *(jet_command_buffer **)__str;
              }
              else
              {
                uint64_t v141 = 0;
                *(_OWORD *)__str = 0uLL;
              }
              jet_command_buffer::add_command_buffer((jet_command_buffer *)v140, v141);
              if (*(void *)&__str[8]) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__str[8]);
              }
              {
                SKCShapeNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime = skCurrentTime();
              }
              double v142 = skCurrentTime();
              double v143 = *(double *)&SKCShapeNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime;
              long long v144 = *a3;
              std::string::basic_string[abi:ne180100]<0>(__str, "u_time");
              float v145 = v142 - v143;
              float v146 = fmodf(v145, 43200.0);
              jet_command_buffer::set_fragment_constant_value(v144, (std::string *)__str, v146);
              if ((__str[23] & 0x80000000) != 0) {
                operator delete(*(void **)__str);
              }
              int v147 = *a3;
              std::string::basic_string[abi:ne180100]<0>(__str, "u_path_length");
              float v148 = *((float *)this + 162);
              if (v148 < 0.0) {
                float v148 = 0.0;
              }
              jet_command_buffer::set_fragment_constant_value(v147, (std::string *)__str, v148);
              if ((__str[23] & 0x80000000) != 0) {
                operator delete(*(void **)__str);
              }
              goto LABEL_153;
            }
          }
          else if (!v85)
          {
            goto LABEL_84;
          }
          float v102 = [*((id *)this + 85) attributes];
          uint64_t v103 = [v102 count];

          if (v103) {
            (*(void (**)(SKCShapeNode *, unsigned int *, void, uint64_t, void))(*(void *)this + 40))(this, a2, *((void *)this + 85), 6, 0);
          }
          uint64_t v104 = *a3;
          uint64_t v105 = (void *)*((void *)this + 85);
          if (v105)
          {
            [v105 _commandsForBatchOffset:0 count:6];
            int v106 = (jet_command_buffer *)__p[0];
          }
          else
          {
            int v106 = 0;
            __p[0] = 0;
            __p[1] = 0;
          }
          jet_command_buffer::add_command_buffer((jet_command_buffer *)v104, v106);
          if (__p[1]) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p[1]);
          }
          {
            SKCShapeNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime = skCurrentTime();
          }
          double v107 = skCurrentTime();
          double v108 = *(double *)&SKCShapeNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime;
          float v109 = *a3;
          std::string::basic_string[abi:ne180100]<0>(__p, "u_time");
          float v110 = v107 - v108;
          float v111 = fmodf(v110, 43200.0);
          jet_command_buffer::set_fragment_constant_value(v109, (std::string *)__p, v111);
          if (v157.i8[7] < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_84;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "u_texture");
        jet_command_buffer::set_fragment_texture(v96, (std::string *)__p, *((void *)a2 + 54));
        if (v157.i8[7] < 0) {
          operator delete(__p[0]);
        }
      }
      float v99 = (uint64_t *)(a2 + 120);
      goto LABEL_70;
    }
  }
}

void sub_20AE1B64C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }

  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(a1);
}

jet_command_buffer *jet_command_buffer::add_command_buffer(jet_command_buffer *this, jet_command_buffer *a2)
{
  if (a2) {
    return (jet_command_buffer *)std::vector<jet_render_op>::__insert_with_size[abi:ne180100]<std::__wrap_iter<jet_render_op*>,std::__wrap_iter<jet_render_op*>>((uint64_t *)this + 1, *((void *)this + 2), *((void *)a2 + 1), *((void *)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 6));
  }
  return this;
}

uint64_t SKCShapeNode::_NEW_copyRenderPathData(SKCShapeNode *this, float32x4_t *a2, char a3, int a4)
{
  if (!*((void *)this + 70)) {
    return 0;
  }
  float v8 = *((float *)this + 155);
  char v9 = *((unsigned char *)this + 644);
  float v10 = fmaxf(fminf(v8 * 1.5, 1.7), 1.3);
  if (!v9) {
    float v10 = 0.0;
  }
  float v11 = v10 / a2[8].f32[0];
  v138.i64[1] = (uint64_t)a2;
  int32x2_t v144 = vrev64_s32(*(int32x2_t *)((char *)this + 608));
  float v12 = (float)(v8 * 0.5) + v11 * -0.66;
  float v13 = fmaxf(v12, 0.1);
  float v14 = *((float *)this + 156);
  float v151 = *((float *)this + 154) * v8;
  float v150 = v14 + v11;
  char v148 = v9;
  int v145 = *((_DWORD *)this + 160);
  float v15 = 1.0;
  float v147 = v13 + v13;
  float v146 = 1.0 / (float)v145;
  float32x4_t v154 = *((float32x4_t *)this + 36);
  float v155 = fminf(fmaxf(vmuls_lane_f32(a2[6].f32[0] * *((float *)this + 81), v154, 3), 0.0), 1.0);
  uint64_t v157 = 0;
  float32x4_t v16 = (void *)*((void *)this + 82);
  if (v16)
  {
    [v16 pixelSize];
    double v18 = v17;
    [*((id *)this + 82) pixelSize];
    float v15 = v18 / v19;
  }
  if (a4)
  {
    uint64_t data = jet_buffer_pool::get_data(*((jet_buffer_pool **)this + 92));
    uint64_t v140 = jet_buffer_pool::get_data(*((jet_buffer_pool **)this + 94));
    uint64_t v20 = jet_buffer_pool::get_data(*((jet_buffer_pool **)this + 96));
    float v21 = 0.0;
  }
  else
  {
    uint64_t v20 = a2[1].i64[0];
    uint64_t v22 = a2->i64[1];
    uint64_t data = a2[1].i64[1];
    uint64_t v140 = v22;
    float v21 = a2->f32[0];
  }
  uint64_t v141 = v20;
  float v139 = v21;
  float v152 = v15 * *((float *)this + 155);
  char v149 = a3;
  uint64_t v23 = *(void *)(*((void *)this + 70) + 24) - *(void *)(*((void *)this + 70) + 16);
  if (!v23)
  {
    uint64_t result = 0;
    *((_DWORD *)this + 162) = 0;
    return result;
  }
  float v127 = v21;
  char v128 = a3;
  uint64_t v24 = 0;
  unsigned int v25 = 0;
  unsigned int v26 = 0;
  unint64_t v27 = v23 >> 3;
  float32x4_t v129 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  do
  {
    uint64_t v28 = *(void *)(*(void *)(*((void *)this + 70) + 16) + 8 * v24);
    unsigned int v29 = *(_DWORD *)(v28 + 4);
    if (*(unsigned char *)(v28 + 1) != 0 && v29 == 2) {
      uint64_t v30 = 1;
    }
    else {
      uint64_t v30 = v29;
    }
    BOOL v31 = (v30 + 1) > 3 && *(unsigned char *)(v28 + 1) != 0;
    if (*(void *)(v28 + 24) != *(void *)(v28 + 16))
    {
      v138.i64[0] = v28;
      int v143 = v30 + 1;
      if (v148) {
        int v32 = 12;
      }
      else {
        int v32 = 4;
      }
      int v156 = v32;
      BOOL v153 = v31;
      calculateVectorsForCurve((uint64_t *)&v138, 0, (float32x2_t *)&v132, (float32x2_t *)&v130);
      long long v158 = v132;
      double v159 = v133;
      v34.n128_u64[0] = (unint64_t)vmul_f32(*(float32x2_t *)((char *)&v132 + 8), *(float32x2_t *)((char *)&v132 + 8));
      v34.n128_u32[0] = vadd_f32((float32x2_t)v34.n128_u64[0], (float32x2_t)vdup_lane_s32((int32x2_t)v34.n128_u64[0], 1)).u32[0];
      float32x2_t v35 = vrsqrte_f32((float32x2_t)v34.n128_u32[0]);
      float32x2_t v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.n128_u32[0], vmul_f32(v35, v35)));
      *(void *)&long long v158 = **(void **)(v28 + 16);
      *((float32x2_t *)&v158 + SKCNode::setFlags(this, 66, 1) = vmul_f32(vmul_n_f32(vmul_n_f32(*(float32x2_t *)((char *)&v132 + 8), vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.n128_u32[0], vmul_f32(v36, v36))).f32[0]), v147), (float32x2_t)0x3F0000003F000000);
      if (v30)
      {
        unint64_t v37 = 0;
        unsigned int v38 = 3;
        do
        {
          addCurve(&v138, v37);
          if (v37 < (v30 - 1))
          {
            calculateVectorsForCurve((uint64_t *)&v138, v37 + 1, (float32x2_t *)&v136, (float32x2_t *)&v134);
            addJoin(&v138, *(double *)(*(void *)(v28 + 16) + 8 * v38), *(double *)&v130, *((double *)&v130 + 1), v131, *(double *)&v136, *((double *)&v136 + 1), v137, v39);
          }
          ++v37;
          long long v132 = v136;
          double v133 = v137;
          long long v130 = v134;
          float32x2_t v131 = v135;
          v38 += 3;
        }
        while (v30 != v37);
        calculateVectorsForCurve((uint64_t *)&v138, v30 - 1, (float32x2_t *)&v132, (float32x2_t *)&v130);
      }
      long long v160 = v130;
      float32x2_t v161 = v131;
      float32x2_t v40 = vmul_f32(*(float32x2_t *)((char *)&v130 + 8), *(float32x2_t *)((char *)&v130 + 8));
      v40.i32[0] = vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).u32[0];
      float32x2_t v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
      v34.n128_u64[0] = (unint64_t)vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
      double v43 = COERCE_DOUBLE(vmul_f32((float32x2_t)v34.n128_u64[0], vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32((float32x2_t)v34.n128_u64[0], (float32x2_t)v34.n128_u64[0]))));
      float32x2_t v42 = vmul_n_f32(*(float32x2_t *)((char *)&v130 + 8), *(float *)&v43);
      *(float *)&double v43 = v147;
      double v44 = COERCE_DOUBLE(vmul_f32(vmul_n_f32(v42, v147), (float32x2_t)0x3F0000003F000000));
      *(void *)&long long v160 = *(void *)(*(void *)(v28 + 16) + 8 * (3 * v30));
      *((double *)&v160 + SKCNode::setFlags(this, 66, 1) = v44;
      if (v31)
      {
        float32x2_t v45 = (float32x2_t)v158;
        if (v148)
        {
          float32x2_t v46 = vmul_f32(*(float32x2_t *)&v159, *(float32x2_t *)&v159);
          v46.i32[0] = vadd_f32(v46, (float32x2_t)vdup_lane_s32((int32x2_t)v46, 1)).u32[0];
          float32x2_t v47 = vrsqrte_f32((float32x2_t)v46.u32[0]);
          float32x2_t v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v47, v47)));
          float32x2_t v49 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)&v159, vmul_f32(v48, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v48, v48))).f32[0]), v150 + (float)(v147 * 0.5));
          float32x2_t v50 = vadd_f32(*(float32x2_t *)&v159, *(float32x2_t *)&v158);
          float32x4_t v51 = v154;
          float32x4_t v52 = v129;
          *((void *)&v55 + SKCNode::setFlags(this, 66, 1) = 0x3F80000000000000;
          uint64_t v53 = LODWORD(v139);
          v51.i32[3] = 1.0;
          int16x8_t v54 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v51, v155), v129));
          *(int16x4_t *)v54.i8 = vmovn_s32((int32x4_t)v54);
          *(_OWORD *)(data + 16 * LODWORD(v139)) = v55;
          *(_DWORD *)(v140 + 4 * v53) = vmovn_s16(v54).u32[0];
          *(void *)(v141 + 8 * v53) = 0x3F80000000000000;
          *(float32x2_t *)&long long v55 = vadd_f32(v49, *(float32x2_t *)&v158);
          float32x4_t v56 = v154;
          uint64_t v57 = LODWORD(v139);
          if (v149) {
            float v58 = 0.0;
          }
          else {
            float v58 = 1.0;
          }
          DWORD2(v55) = 0;
          *((float *)&v55 + 3) = v58;
          v56.i32[3] = 1.0;
          int16x8_t v59 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v56, (float32x4_t)0), v129));
          *(int16x4_t *)v59.i8 = vmovn_s32((int32x4_t)v59);
          *(_OWORD *)(data + 16 * (LODWORD(v139) + 1)) = v55;
          *(_DWORD *)(v140 + 4 * (v57 + 1)) = vmovn_s16(v59).u32[0];
          *(void *)(v141 + 8 * (v57 + 1)) = 0x3F80000000000000;
          *(float32x2_t *)v60.i8 = vsub_f32(*(float32x2_t *)&v158, v49);
          float32x4_t v61 = v154;
          uint64_t v62 = LODWORD(v139);
          if (v149) {
            float v63 = 0.0;
          }
          else {
            float v63 = 1.0;
          }
          v60.i32[2] = 0;
          *(float *)&v60.i32[3] = v63;
          v61.i32[3] = 1.0;
          *(int16x8_t *)(data + 16 * (LODWORD(v139) + 4)) = v60;
          *(int16x4_t *)v60.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_f32(v61, (float32x4_t)0), v129)));
          *(_DWORD *)(v140 + 4 * (v62 + 4)) = vmovn_s16(v60).u32[0];
          *(void *)(v141 + 8 * (v62 + 4)) = 0;
          *(float32x2_t *)&long long v64 = vsub_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
          float32x4_t v65 = v154;
          *((void *)&v64 + SKCNode::setFlags(this, 66, 1) = 0x3F80000000000000;
          v65.i32[3] = 1.0;
          uint64_t v66 = LODWORD(v139) + 5;
          int16x8_t v67 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v65, v155), v129));
          *(int16x4_t *)v67.i8 = vmovn_s32((int32x4_t)v67);
          *(_OWORD *)(data + 16 * v66) = v64;
          *(_DWORD *)(v140 + 4 * v66) = vmovn_s16(v67).u32[0];
          *(void *)(v141 + 8 * v66) = 0;
          float32x2_t v45 = (float32x2_t)v158;
          uint64_t v68 = 8;
        }
        else
        {
          uint64_t v68 = 0;
          float32x4_t v52 = v129;
        }
        *(float32x2_t *)&long long v69 = vsub_f32(v45, *(float32x2_t *)&v159);
        float32x4_t v70 = v154;
        uint64_t v71 = LODWORD(v139);
        if (v149) {
          float v72 = 0.0;
        }
        else {
          float v72 = 1.0;
        }
        DWORD2(v69) = 0;
        *((float *)&v69 + 3) = v72;
        v70.i32[3] = 1.0;
        int16x8_t v73 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v70, v155), v52));
        *(int16x4_t *)v73.i8 = vmovn_s32((int32x4_t)v73);
        *(_OWORD *)(data + 16 * (LODWORD(v139) + v68)) = v69;
        *(_DWORD *)(v140 + 4 * (v71 + v68)) = vmovn_s16(v73).u32[0];
        *(void *)(v141 + 8 * (v71 + v68)) = 0;
        uint64_t v74 = v68 | 1;
        *(float32x2_t *)&long long v75 = vadd_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
        float32x4_t v76 = v154;
        if (v149) {
          float v77 = 0.0;
        }
        else {
          float v77 = 1.0;
        }
        DWORD2(v75) = 0;
        *((float *)&v75 + 3) = v77;
        v76.i32[3] = 1.0;
        uint64_t v78 = LODWORD(v139) + v74;
        int16x8_t v79 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v76, v155), v52));
        *(int16x4_t *)v79.i8 = vmovn_s32((int32x4_t)v79);
        *(_OWORD *)(data + 16 * v78) = v75;
        *(_DWORD *)(v140 + 4 * v78) = vmovn_s16(v79).u32[0];
        *(void *)(v141 + 8 * v78) = 0x3F80000000000000;
        addJoin(&v138, **(double **)(v28 + 16), *(double *)&v160, *((double *)&v160 + 1), v161, *(double *)&v158, *((double *)&v158 + 1), v159, v33);
        if (v148)
        {
          float32x2_t v80 = vmul_f32(*(float32x2_t *)&v159, *(float32x2_t *)&v159);
          v80.i32[0] = vadd_f32(v80, (float32x2_t)vdup_lane_s32((int32x2_t)v80, 1)).u32[0];
          float32x2_t v81 = vrsqrte_f32((float32x2_t)v80.u32[0]);
          float32x2_t v82 = vmul_f32(v81, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v81, v81)));
          float32x2_t v83 = vmul_n_f32(vmul_n_f32(*(float32x2_t *)&v159, vmul_f32(v82, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v82, v82))).f32[0]), v150 + (float)(v147 * 0.5));
          uint64_t v84 = (v156 - 10);
          *(float32x2_t *)&long long v85 = vadd_f32(*(float32x2_t *)&v158, v83);
          float v86 = *(float *)&v157;
          float32x4_t v87 = v154;
          uint64_t v88 = LODWORD(v139);
          if (!v149) {
            float v86 = 1.0;
          }
          DWORD2(v85) = 0;
          *((float *)&v85 + 3) = v86;
          v87.i32[3] = 1.0;
          int16x8_t v89 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v87, (float32x4_t)0), v129));
          *(int16x4_t *)v89.i8 = vmovn_s32((int32x4_t)v89);
          *(_OWORD *)(data + 16 * (LODWORD(v139) + v84)) = v85;
          *(_DWORD *)(v140 + 4 * (v88 + v84)) = vmovn_s16(v89).u32[0];
          *(void *)(v141 + 8 * (v88 + v84)) = 0x3F80000000000000;
          uint64_t v90 = (v156 - 9);
          *(float32x2_t *)v91.i8 = vadd_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
          float v92 = *(float *)&v157;
          float32x4_t v93 = v154;
          uint64_t v94 = LODWORD(v139);
          if (!v149) {
            float v92 = 1.0;
          }
          v91.i32[2] = 0;
          *(float *)&v91.i32[3] = v92;
          v93.i32[3] = 1.0;
          int32x4_t v95 = vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v93, v155), v129));
          *(int16x8_t *)(data + 16 * (LODWORD(v139) + v90)) = v91;
          *(int16x4_t *)v91.i8 = vmovn_s32(v95);
          *(_DWORD *)(v140 + 4 * (v94 + v90)) = vmovn_s16(v91).u32[0];
          *(void *)(v141 + 8 * (v94 + v90)) = 0x3F80000000000000;
          uint64_t v96 = (v156 - 6);
          *(float32x2_t *)&long long v97 = vsub_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
          float v98 = *(float *)&v157;
          float32x4_t v99 = v154;
          uint64_t v100 = LODWORD(v139);
          if (!v149) {
            float v98 = 1.0;
          }
          DWORD2(v97) = 0;
          *((float *)&v97 + 3) = v98;
          v99.i32[3] = 1.0;
          int16x8_t v101 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v99, v155), v129));
          *(int16x4_t *)v101.i8 = vmovn_s32((int32x4_t)v101);
          *(_OWORD *)(data + 16 * (LODWORD(v139) + v96)) = v97;
          *(_DWORD *)(v140 + 4 * (v100 + v96)) = vmovn_s16(v101).u32[0];
          *(void *)(v141 + 8 * (v100 + v96)) = 0;
          uint64_t v102 = (v156 - 5);
          *(float32x2_t *)&long long v103 = vsub_f32(*(float32x2_t *)&v158, v83);
          float v104 = *(float *)&v157;
          float32x4_t v105 = v154;
          uint64_t v106 = LODWORD(v139);
          if (!v149) {
            float v104 = 1.0;
          }
          uint64_t v107 = LODWORD(v139) + v102;
          DWORD2(v103) = 0;
          *((float *)&v103 + 3) = v104;
          v105.i32[3] = 1.0;
          int16x8_t v108 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v105, (float32x4_t)0), v129));
          *(int16x4_t *)v108.i8 = vmovn_s32((int32x4_t)v108);
          *(_OWORD *)(data + 16 * v107) = v103;
          *(_DWORD *)(v140 + 4 * (v106 + v102)) = vmovn_s16(v108).u32[0];
          *(void *)(v141 + 8 * v107) = 0;
        }
        uint64_t v109 = (v156 - 2);
        *(float32x2_t *)v110.i8 = vadd_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
        float v111 = *(float *)&v157;
        float32x4_t v112 = v154;
        uint64_t v113 = LODWORD(v139);
        if (!v149) {
          float v111 = 1.0;
        }
        v110.i32[2] = 0;
        *(float *)&v110.i32[3] = v111;
        v112.i32[3] = 1.0;
        int32x4_t v114 = vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v112, v155), v129));
        *(int16x8_t *)(data + 16 * (LODWORD(v139) + v109)) = v110;
        *(int16x4_t *)v110.i8 = vmovn_s32(v114);
        *(_DWORD *)(v140 + 4 * (v113 + v109)) = vmovn_s16(v110).u32[0];
        *(void *)(v141 + 8 * (v113 + v109)) = 0x3F80000000000000;
        uint64_t v115 = (v156 - 1);
        *(float32x2_t *)&long long v116 = vsub_f32(*(float32x2_t *)&v158, *(float32x2_t *)&v159);
        float v117 = *(float *)&v157;
        float32x4_t v118 = v154;
        uint64_t v119 = LODWORD(v139);
        if (!v149) {
          float v117 = 1.0;
        }
        DWORD2(v116) = 0;
        *((float *)&v116 + 3) = v117;
        uint64_t v120 = LODWORD(v139) + v115;
        v118.i32[3] = 1.0;
        int16x8_t v121 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v118, v155), v129));
        *(int16x4_t *)v121.i8 = vmovn_s32((int32x4_t)v121);
        *(_OWORD *)(data + 16 * v120) = v116;
        *(_DWORD *)(v140 + 4 * (v119 + v115)) = vmovn_s16(v121).u32[0];
        *(void *)(v141 + 8 * v120) = 0;
      }
      else
      {
        addCaps((uint64_t)&v138, v44, v43, v34);
      }
      v25 += v156;
      LODWORD(v139) += v156;
    }
    uint64_t v24 = ++v26;
  }
  while (v27 > v26);
  uint64_t v122 = data;
  *((_DWORD *)this + 162) = v157;
  uint64_t v123 = (float32x2_t *)(v122 + 16 * LODWORD(v127));
  uint64_t result = v25;
  if (v128)
  {
    if (v25)
    {
      uint64_t v125 = 0;
      do
      {
        float32x4_t v126 = vaddq_f32(a2[5], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2[2], COERCE_FLOAT(*(_OWORD *)v123[2 * v125].f32)), a2[3], v123[2 * v125], 1), a2[4], *(float32x4_t *)v123[2 * v125].f32, 2));
        v126.i32[3] = HIDWORD(*(_OWORD *)v123[2 * v125].f32);
        *(float32x4_t *)v123[2 * v125++].f32 = v126;
      }
      while (v25 != v125);
      return result;
    }
    return 0;
  }
  if (!v25) {
    return 0;
  }
  do
  {
    *(float32x4_t *)v123->f32 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a2[2], COERCE_FLOAT(*(_OWORD *)v123->f32)), a2[3], *v123, 1), a2[4], *(float32x4_t *)v123->f32, 2), a2[5], *(float32x4_t *)v123->f32, 3);
    v123 += 2;
    --v25;
  }
  while (v25);
  return result;
}

uint64_t SKCShapeNode::addBatchRenderElements(SKCShapeNode *this, SKCRenderInfo *a2)
{
  if (!*((void *)this + 82) && *((float *)this + 147) <= 0.0 && !*((void *)this + 84)
    || *((float *)this + 155) <= 0.0
    || !*((void *)this + 70)
    || SKCShapeNode::shouldUseLocalStrokeBuffers(this, a2))
  {
    return 0;
  }
  char v5 = *((void *)this + 84) != 0;

  return SKCShapeNode::_NEW_copyRenderPathData(this, (float32x4_t *)a2, v5, 0);
}

int32x2_t sk_vector_perp(int32x2_t a1, double a2)
{
  *(float *)&a2 = -*(float *)&a1.i32[1];
  return vzip1_s32(*(int32x2_t *)&a2, a1);
}

float32x2_t sk_vector_from_CGPoint(CGPoint a1)
{
  CGFloat y = a1.y;
  return vcvt_f32_f64((float64x2_t)a1);
}

__n64 sk_vector_from_PKPoint(double a1, float a2)
{
  result.n64_f32[1] = a2;
  return result;
}

double sk_vector_rotate(double a1, float a2)
{
  __float2 v2 = __sincosf_stret(a2);
  *(float *)&double v3 = vmlas_n_f32(-(float)(*((float *)&a1 + 1) * v2.__sinval), v2.__cosval, *(float *)&a1);
  HIDWORD(v3) = vmlas_n_f32(vmuls_lane_f32(v2.__cosval, *(float32x2_t *)&a1, 1), v2.__sinval, *(float *)&a1);
  return v3;
}

BOOL sk_vector_equals(float32x2_t a1, float32x2_t a2)
{
  float32x2_t v2 = vsub_f32(a1, a2);
  return (v2.i32[0] & 0x60000000) == 0 && (v2.i32[1] & 0x60000000) == 0;
}

int8x8_t sk_vert_write(void *a1, int a2, uint64_t a3, __n128 a4, double a5, float a6, float32x4_t a7, float a8, double a9, float a10)
{
  if (!a2) {
    a6 = 1.0;
  }
  uint64_t v10 = *(unsigned int *)a1 + a3;
  a4.n128_u32[2] = 0;
  a4.n128_f32[3] = a6;
  a7.i32[3] = 1.0;
  int16x8_t v11 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(a7, a8), (float32x4_t)vdupq_n_s32(0x437F0000u)));
  *(int16x4_t *)v11.i8 = vmovn_s32((int32x4_t)v11);
  *(__n128 *)(a1[3] + 16 * v10) = a4;
  int8x8_t result = vmovn_s16(v11);
  *(_DWORD *)(a1[1] + 4 * v10) = result.i32[0];
  *((float *)&a9 + SKCNode::setFlags(this, 66, 1) = a10;
  *(double *)(a1[2] + 8 * v10) = a9;
  return result;
}

double SKCShapeNode::strokeLength(SKCShapeNode *this)
{
  return 0.0;
}

uint64_t SKCShapeNode::_NEW_quadCount(SKCShapeNode *this, unsigned int a2)
{
  uint64_t v2 = *(void *)(*(void *)(*((void *)this + 70) + 16) + 8 * a2);
  int v3 = *(_DWORD *)(v2 + 4);
  int v4 = *(_DWORD *)(v2 + 8);
  BOOL v5 = *(unsigned __int8 *)(v2 + 1) != 0;
  if (v4 == 2) {
    int v6 = v3;
  }
  else {
    int v6 = 3;
  }
  if (v5 && v3 == 2) {
    int v7 = v6;
  }
  else {
    int v7 = v3 + 1;
  }
  int v8 = ((v7 + ~v4) & ~((v7 + ~v4) >> 31)) * *((_DWORD *)this + 160);
  if (v7 <= 3) {
    BOOL v5 = 0;
  }
  int v9 = v7 + v5;
  if (v9 <= 2) {
    int v9 = 2;
  }
  int v10 = v9 - 2;
  int v11 = v8 + 2 * (v9 - 2) + 1;
  int v12 = *((_DWORD *)this + 152);
  if (v12)
  {
    if (v12 == 1)
    {
      float v13 = (float)(*((float *)this + 155) + (float)(*((float *)this + 156) * 2.0)) * 0.14;
      int v11 = (int)(float)((float)v11 + (float)((float)v10 * (float)((float)(ceilf(v13) * 2.0) + 2.0)));
    }
    else
    {
      v11 += 2 * v10;
    }
  }
  if (*((_DWORD *)this + 153) == 1)
  {
    float v14 = (float)(*((float *)this + 155) + (float)(*((float *)this + 156) * 2.0)) * 0.14;
    int v11 = (int)(float)((float)v11 + (float)((float)((float)(ceilf(v14) * 2.0) + 2.0) * 2.0));
  }
  if (*((unsigned char *)this + 644)) {
    return (3 * v11);
  }
  else {
    return v11;
  }
}

uint64_t *getElementsForCurve(uint64_t *result, unsigned int a2, void *a3, void *a4, void *a5, void *a6)
{
  if (result)
  {
    uint64_t v6 = *result;
    if (*result)
    {
      if (*(_DWORD *)(v6 + 4) > a2)
      {
        uint64_t v7 = *(void *)(v6 + 16);
        uint64_t v8 = *(void *)(v7 + 24 * a2);
        uint64_t v9 = *(void *)(v7 + 8 * (3 * a2 + 1));
        uint64_t v10 = *(void *)(v7 + 8 * (3 * a2 + 2));
        uint64_t v11 = *(void *)(v7 + 8 * (3 * a2 + 3));
LABEL_9:
        *a3 = v8;
        *a4 = v9;
        *a5 = v10;
        *a6 = v11;
        return result;
      }
      if (!a2)
      {
        uint64_t v13 = v6 + 16;
        int v12 = *(uint64_t **)(v6 + 16);
        if (*(uint64_t **)(v13 + 8) != v12)
        {
          uint64_t v8 = *v12;
          uint64_t v9 = *v12;
          uint64_t v10 = *v12;
          uint64_t v11 = *v12;
          goto LABEL_9;
        }
      }
    }
  }
  return result;
}

uint64_t curveIsLinear(double a1, double a2, double a3, double a4)
{
  if ((COERCE_UNSIGNED_INT(fabsf(vmlas_n_f32(vmlas_n_f32((float)(*((float *)&a3 + 1) - *((float *)&a1 + 1)) * *(float *)&a2, *((float *)&a2 + 1) - *((float *)&a3 + 1), *(float *)&a1), *((float *)&a1 + 1) - *((float *)&a2 + 1), *(float *)&a3))+ -0.002) & 0x80000000) != 0)return COERCE_UNSIGNED_INT(fabsf(vmlas_n_f32((float)(*(float *)&a3 * (float)(*((float *)&a4 + 1) - *((float *)&a2 + 1)))+ (float)(*(float *)&a2 * (float)(*((float *)&a3 + 1) - *((float *)&a4 + 1))), *((float *)&a2 + 1) - *((float *)&a3 + 1), *(float *)&a4))+ -0.002) >> 31; {
  else
  }
    return 0;
}

uint64_t *calculateVectorsForCurve(uint64_t *result, unsigned int a2, float32x2_t *a3, float32x2_t *a4)
{
  uint64_t v6 = result;
  if (!a2)
  {
    uint64_t v7 = *(float32x2_t **)(*result + 16);
    if (*(void *)(*result + 24) - (void)v7 == 8)
    {
      float32x2_t v8 = *v7;
      *a3 = *v7;
      a3[1] = (float32x2_t)1065353216;
      v9.i32[0] = 0;
      v9.f32[1] = *((float *)result + 36) * 0.5;
      a3[2] = v9;
      *a4 = v8;
LABEL_12:
      a4[1] = a3[1];
      float32x2_t v53 = a3[2];
      goto LABEL_13;
    }
  }
  uint64_t v61 = 0;
  float32x2_t v62 = 0;
  float32x2_t v59 = 0;
  uint64_t v60 = 0;
  int8x8_t result = getElementsForCurve(result, a2, &v62, &v61, &v60, &v59);
  float32x2_t v10 = v62;
  float32x2_t v11 = v59;
  if ((COERCE_UNSIGNED_INT(fabsf(vmlas_n_f32(vmlas_n_f32((float)(*((float *)&v60 + 1) - v62.f32[1]) * *(float *)&v61, *((float *)&v61 + 1) - *((float *)&v60 + 1), v62.f32[0]), v62.f32[1] - *((float *)&v61 + 1), *(float *)&v60))+ -0.002) & 0x80000000) != 0&& (COERCE_UNSIGNED_INT(fabsf(vmlas_n_f32((float)(*(float *)&v60 * (float)(v59.f32[1] - *((float *)&v61 + 1)))+ (float)(*(float *)&v61 * (float)(*((float *)&v60 + 1) - v59.f32[1])), *((float *)&v61 + 1) - *((float *)&v60 + 1), v59.f32[0]))+ -0.002) & 0x80000000) != 0)
  {
    int32x2_t v54 = (int32x2_t)vsub_f32(v59, v62);
    *a3 = v59;
    a3[1] = (float32x2_t)v54;
    v11.f32[0] = -*(float *)&v54.i32[1];
    float32x2_t v55 = (float32x2_t)vzip1_s32((int32x2_t)v11, v54);
    float32x2_t v56 = vmul_f32(v55, v55);
    v56.i32[0] = vadd_f32(v56, (float32x2_t)vdup_lane_s32((int32x2_t)v56, 1)).u32[0];
    float32x2_t v57 = vrsqrte_f32((float32x2_t)v56.u32[0]);
    float32x2_t v58 = vmul_f32(v57, vrsqrts_f32((float32x2_t)v56.u32[0], vmul_f32(v57, v57)));
    a3[2] = vmul_f32(vmul_n_f32(vmul_n_f32(v55, vmul_f32(v58, vrsqrts_f32((float32x2_t)v56.u32[0], vmul_f32(v58, v58))).f32[0]), *((float *)v6 + 36)), (float32x2_t)0x3F0000003F000000);
    *a4 = v10;
    goto LABEL_12;
  }
  uint64_t v12 = 0;
  v15.i64[1] = 0x3F80000000000000;
  v13.i64[1] = 0x3F80000000000000;
  *(float32x2_t *)v13.f32 = v62;
  v14.i64[1] = 0x3F80000000000000;
  v14.i64[0] = v61;
  v15.i64[0] = v60;
  *(float32x2_t *)v16.f32 = v59;
  v16.i64[1] = 0x3F80000000000000;
  long long v63 = xmmword_20AE9AE00;
  long long v64 = xmmword_20AE9B750;
  long long v65 = xmmword_20AE9B760;
  long long v66 = xmmword_20AE9B770;
  do
  {
    *(float32x4_t *)((char *)&v67 + v12) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(long long *)((char *)&v63 + v12))), v14, *(float32x2_t *)((char *)&v63 + v12), 1), v15, *(float32x4_t *)((char *)&v63 + v12), 2), v16, *(float32x4_t *)((char *)&v63 + v12), 3);
    v12 += 16;
  }
  while (v12 != 64);
  uint64_t v17 = 0;
  float32x4_t v18 = v67;
  float32x4_t v19 = v68;
  float32x4_t v20 = v69;
  float32x4_t v21 = v70;
  long long v63 = xmmword_20AE9B750;
  long long v64 = xmmword_20AE9B780;
  long long v65 = xmmword_20AE9B790;
  long long v66 = 0uLL;
  do
  {
    *(float32x4_t *)((char *)&v67 + v17) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(long long *)((char *)&v63 + v17))), v14, *(float32x2_t *)((char *)&v63 + v17), 1), v15, *(float32x4_t *)((char *)&v63 + v17), 2), v16, *(float32x4_t *)((char *)&v63 + v17), 3);
    v17 += 16;
  }
  while (v17 != 64);
  float32x2_t v22 = *(float32x2_t *)v69.f32;
  float32x2_t v23 = *(float32x2_t *)v70.f32;
  float32x2_t v24 = (float32x2_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v67, (float32x4_t)0, v68), (float32x4_t)0, v69), (float32x4_t)0, v70).u64[0];
  float32x2_t v25 = vmul_f32(v24, v24);
  v25.i32[0] = vadd_f32(v25, (float32x2_t)vdup_lane_s32((int32x2_t)v25, 1)).u32[0];
  float32x2_t v26 = vrsqrte_f32((float32x2_t)v25.u32[0]);
  float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v26, v26)));
  int32x2_t v28 = (int32x2_t)vmul_n_f32(v24, vmul_f32(v27, vrsqrts_f32((float32x2_t)v25.u32[0], vmul_f32(v27, v27))).f32[0]);
  v24.f32[0] = -*(float *)&v28.i32[1];
  float32x2_t v29 = (float32x2_t)vzip1_s32((int32x2_t)v24, v28);
  float32x2_t v30 = vmul_f32(v29, v29);
  float32x2_t v31 = vadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v68.f32);
  unsigned __int32 v32 = vadd_f32(v30, (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1)).u32[0];
  float32x2_t v33 = vrsqrte_f32((float32x2_t)v32);
  float32x2_t v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32, vmul_f32(v33, v33)));
  a3[2] = vmul_f32(vmul_n_f32(vmul_n_f32(v29, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32, vmul_f32(v34, v34))).f32[0]), *((float *)v6 + 36)), (float32x2_t)0x3F0000003F000000);
  float32x2_t v35 = (float32x2_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v18, v19, *((float *)v6 + 35)), v20, *((float *)v6 + 35) * *((float *)v6 + 35)), v21, *((float *)v6 + 35) * (float)(*((float *)v6 + 35) * *((float *)v6 + 35))).u64[0];
  *a3 = v35;
  a3[1] = vsub_f32(v35, v10);
  float v36 = 1.0 - *((float *)v6 + 35);
  float32x2_t v37 = (float32x2_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v18, v19, v36), v20, v36 * v36), v21, v36 * (float)(v36 * v36)).u64[0];
  int32x2_t v38 = (int32x2_t)vsub_f32(v11, v37);
  *a4 = v37;
  a4[1] = (float32x2_t)v38;
  v11.f32[0] = -*(float *)&v38.i32[1];
  float32x2_t v39 = (float32x2_t)vzip1_s32((int32x2_t)v11, v38);
  float32x2_t v40 = vmul_f32(v39, v39);
  v40.i32[0] = vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).u32[0];
  float32x2_t v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
  float32x2_t v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
  float32x2_t v43 = vmul_f32(vmul_n_f32(vmul_n_f32(v39, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]), *((float *)v6 + 36)), (float32x2_t)0x3F0000003F000000);
  float32x2_t v44 = vadd_f32(v23, vadd_f32(v22, v31));
  float32x2_t v45 = vmul_f32(v44, v44);
  v45.i32[0] = vadd_f32(v45, (float32x2_t)vdup_lane_s32((int32x2_t)v45, 1)).u32[0];
  a4[2] = v43;
  float32x2_t v46 = vrsqrte_f32((float32x2_t)v45.u32[0]);
  float32x2_t v47 = vmul_f32(v46, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(v46, v46)));
  int32x2_t v48 = (int32x2_t)vmul_n_f32(v44, vmul_f32(v47, vrsqrts_f32((float32x2_t)v45.u32[0], vmul_f32(v47, v47))).f32[0]);
  v44.f32[0] = -*(float *)&v48.i32[1];
  float32x2_t v49 = (float32x2_t)vzip1_s32((int32x2_t)v44, v48);
  float32x2_t v50 = vmul_f32(v49, v49);
  v50.i32[0] = vadd_f32(v50, (float32x2_t)vdup_lane_s32((int32x2_t)v50, 1)).u32[0];
  float32x2_t v51 = vrsqrte_f32((float32x2_t)v50.u32[0]);
  float32x2_t v52 = vmul_f32(v51, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(v51, v51)));
  float32x2_t v53 = vmul_f32(vmul_n_f32(vmul_n_f32(v49, vmul_f32(v52, vrsqrts_f32((float32x2_t)v50.u32[0], vmul_f32(v52, v52))).f32[0]), *((float *)v6 + 36)), (float32x2_t)0x3F0000003F000000);
LABEL_13:
  a4[2] = v53;
  return result;
}

uint64_t *addCurve(float32x4_t *a1, unsigned int a2)
{
  uint64_t v122 = 0;
  float32x2_t v123 = 0;
  float32x2_t v120 = 0;
  uint64_t v121 = 0;
  int8x8_t result = getElementsForCurve((uint64_t *)a1, a2, &v123, &v122, &v121, &v120);
  uint64_t v5 = 0;
  uint64_t v7 = v122;
  float32x2_t v6 = v123;
  *(float32x2_t *)v8.f32 = v123;
  v8.i64[1] = 0x3F80000000000000;
  v9.i64[0] = v122;
  v9.i64[1] = 0x3F80000000000000;
  float32x2_t v10 = v120;
  uint64_t v11 = v121;
  v12.i64[0] = v121;
  v12.i64[1] = 0x3F80000000000000;
  *(float32x2_t *)v13.f32 = v120;
  v13.i64[1] = 0x3F80000000000000;
  int v14 = a1[9].u8[5];
  long long v124 = xmmword_20AE9AE00;
  long long v125 = xmmword_20AE9B750;
  long long v126 = xmmword_20AE9B760;
  long long v127 = xmmword_20AE9B770;
  do
  {
    *(float32x4_t *)((char *)&v128 + v5) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*(long long *)((char *)&v124 + v5))), v9, *(float32x2_t *)((char *)&v124 + v5), 1), v12, *(float32x4_t *)((char *)&v124 + v5), 2), v13, *(float32x4_t *)((char *)&v124 + v5), 3);
    v5 += 16;
  }
  while (v5 != 64);
  uint64_t v15 = 0;
  float32x4_t v16 = v128;
  float32x4_t v17 = v129;
  float32x4_t v18 = v130;
  float32x4_t v19 = v131;
  long long v124 = xmmword_20AE9B750;
  long long v125 = xmmword_20AE9B780;
  long long v126 = xmmword_20AE9B790;
  long long v127 = 0uLL;
  do
  {
    *(float32x4_t *)((char *)&v128 + v15) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v8, COERCE_FLOAT(*(long long *)((char *)&v124 + v15))), v9, *(float32x2_t *)((char *)&v124 + v15), 1), v12, *(float32x4_t *)((char *)&v124 + v15), 2), v13, *(float32x4_t *)((char *)&v124 + v15), 3);
    v15 += 16;
  }
  while (v15 != 64);
  float32x4_t v20 = v128;
  float32x4_t v21 = v129;
  float32x4_t v22 = v130;
  float32x4_t v23 = v131;
  int16x8_t v24 = 0uLL;
  float32x2_t v25 = (float32x2_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v128, (float32x4_t)0, v129), (float32x4_t)0, v130), (float32x4_t)0, v131).u64[0];
  float32x2_t v26 = vmul_f32(v25, v25);
  v26.i32[0] = vadd_f32(v26, (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1)).u32[0];
  float32x2_t v27 = vrsqrte_f32((float32x2_t)v26.u32[0]);
  float32x2_t v28 = vmul_f32(v27, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v27, v27)));
  int32x2_t v29 = (int32x2_t)vmul_f32(v28, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(v28, v28)));
  int32x2_t v30 = (int32x2_t)vmul_n_f32(v25, *(float *)v29.i32);
  *(float *)v29.i32 = -*(float *)&v30.i32[1];
  float32x2_t v31 = (float32x2_t)vzip1_s32(v29, v30);
  float32x2_t v32 = vmul_f32(v31, v31);
  v32.i32[0] = vadd_f32(v32, (float32x2_t)vdup_lane_s32((int32x2_t)v32, 1)).u32[0];
  float32x2_t v33 = vrsqrte_f32((float32x2_t)v32.u32[0]);
  float32x2_t v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v33, v33)));
  float32x2_t v40 = vmul_n_f32(v31, vmul_f32(v34, vrsqrts_f32((float32x2_t)v32.u32[0], vmul_f32(v34, v34))).f32[0]);
  float v35 = a1[9].f32[0];
  float32x2_t v36 = vmul_f32(vmul_n_f32(v40, v35), (float32x2_t)0x3F0000003F000000);
  float v37 = a1[12].f32[0];
  float32x4_t v38 = a1[11];
  unsigned __int32 v39 = a1[12].u32[1];
  float v41 = a1[12].f32[2];
  v40.i32[0] = a1[12].i32[3];
  int v42 = a1[9].u8[4];
  if (a1[9].i8[4])
  {
    float32x2_t v43 = vmul_f32(v36, v36);
    v43.i32[0] = vadd_f32(v43, (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1)).u32[0];
    float32x2_t v44 = vrsqrte_f32((float32x2_t)v43.u32[0]);
    float32x2_t v45 = vmul_n_f32(vmul_n_f32(v36, vmul_f32(v44, vrsqrts_f32((float32x2_t)v43.u32[0], vmul_f32(v44, v44))).f32[0]), a1[9].f32[2] + (float)(v35 * 0.5));
    *(float32x2_t *)&long long v46 = vadd_f32(v6, v45);
    if (v14) {
      float v47 = a1[12].f32[2];
    }
    else {
      float v47 = 1.0;
    }
    DWORD2(v46) = 0;
    *((float *)&v46 + 3) = v47;
    unint64_t v48 = a1[1].u32[0] + (unint64_t)(v39 - 10);
    v38.i32[3] = 1.0;
    float32x4_t v49 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    int16x8_t v50 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v38, (float32x4_t)0), v49));
    *(_OWORD *)(a1[2].i64[1] + 16 * v48) = v46;
    *(int16x4_t *)v50.i8 = vmovn_s32((int32x4_t)v50);
    unsigned __int32 v51 = vmovn_s16(v50).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v48) = v51;
    unint64_t v52 = __PAIR64__(1.0, v40.u32[0]);
    *(void *)(a1[2].i64[0] + 8 * v48) = __PAIR64__(1.0, v40.u32[0]);
    *(float32x2_t *)&long long v53 = vadd_f32(v6, v36);
    DWORD2(v53) = 0;
    *((float *)&v53 + 3) = v47;
    unint64_t v54 = a1[1].u32[0] + (unint64_t)(v39 - 9);
    int16x8_t v24 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v38, v37), v49));
    *(int16x4_t *)v24.i8 = vmovn_s32((int32x4_t)v24);
    *(_OWORD *)(a1[2].i64[1] + 16 * v54) = v53;
    unsigned __int32 v55 = vmovn_s16(v24).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v54) = v55;
    *(void *)(a1[2].i64[0] + 8 * v54) = __PAIR64__(1.0, v40.u32[0]);
    *(float32x2_t *)&long long v57 = vsub_f32(v6, v36);
    unint64_t v56 = a1[1].u32[0] + (unint64_t)(v39 - 6);
    DWORD2(v57) = 0;
    *((float *)&v57 + 3) = v47;
    *(_OWORD *)(a1[2].i64[1] + 16 * v56) = v57;
    *(_DWORD *)(a1[1].i64[1] + 4 * v56) = v55;
    uint64_t v58 = v40.u32[0];
    *(void *)(a1[2].i64[0] + 8 * v56) = v40.u32[0];
    *(float32x2_t *)&long long v59 = vsub_f32(v6, v45);
    DWORD2(v59) = 0;
    unint64_t v60 = a1[1].u32[0] + (unint64_t)(v39 - 5);
    *((float *)&v59 + 3) = v47;
    *(_OWORD *)(a1[2].i64[1] + 16 * v60) = v59;
    *(_DWORD *)(a1[1].i64[1] + 4 * v60) = v51;
    *(void *)(a1[2].i64[0] + 8 * v60) = v40.u32[0];
  }
  else
  {
    *(float32x2_t *)&long long v53 = vadd_f32(v6, v36);
    if (v14) {
      float v61 = a1[12].f32[2];
    }
    else {
      float v61 = 1.0;
    }
    DWORD2(v53) = 0;
    *((float *)&v53 + 3) = v61;
    v38.i32[3] = 1.0;
    int32x4_t v62 = vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v38, v37), (float32x4_t)vdupq_n_s32(0x437F0000u)));
    LODWORD(v52) = a1[12].i32[3];
    HIDWORD(v52) = 1.0;
    *(float32x2_t *)&long long v57 = vsub_f32(v6, v36);
    DWORD2(v57) = 0;
    *(int16x4_t *)v24.i8 = vmovn_s32(v62);
    *((float *)&v57 + 3) = v61;
    uint64_t v58 = v52;
  }
  unint64_t v63 = a1[1].u32[0] + (unint64_t)(v39 - 2);
  *(_OWORD *)(a1[2].i64[1] + 16 * v63) = v53;
  unsigned __int32 v64 = vmovn_s16(v24).u32[0];
  *(_DWORD *)(a1[1].i64[1] + 4 * v63) = v64;
  *(void *)(a1[2].i64[0] + 8 * v63) = v52;
  unint64_t v65 = a1[1].u32[0] + (unint64_t)(v39 - 1);
  *(_OWORD *)(a1[2].i64[1] + 16 * v65) = v57;
  *(_DWORD *)(a1[1].i64[1] + 4 * v65) = v64;
  *(void *)(a1[2].i64[0] + 8 * v65) = v58;
  unsigned int v66 = a1[8].u32[2];
  if ((COERCE_UNSIGNED_INT(fabsf((float)((float)(*(float *)&v7 * (float)(*((float *)&v11 + 1) - v6.f32[1]))+ (float)(v6.f32[0] * (float)(*((float *)&v7 + 1) - *((float *)&v11 + 1))))+ (float)(*(float *)&v11 * (float)(v6.f32[1] - *((float *)&v7 + 1))))+ -0.002) & 0x80000000) != 0&& (COERCE_UNSIGNED_INT(fabsf((float)((float)(*(float *)&v11 * (float)(v10.f32[1] - *((float *)&v7 + 1)))+ (float)(*(float *)&v7 * (float)(*((float *)&v11 + 1) - v10.f32[1])))+ (float)(v10.f32[0] * (float)(*((float *)&v7 + 1) - *((float *)&v11 + 1))))+ -0.002) & 0x80000000) != 0)
  {
    float32x2_t v119 = vsub_f32(v10, v6);
    v119.f32[0] = sqrtf(vaddv_f32(vmul_f32(v119, v119)));
    float v81 = v119.f32[0] + v41;
    float v82 = v40.f32[0] + (float)(v119.f32[0] / a1[10].f32[0]);
  }
  else if (v66)
  {
    int v67 = 0;
    *(int16x4_t *)v4.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_f32(v38, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u))));
    unsigned __int32 v68 = vmovn_s16(v24).u32[0];
    v4.i32[0] = vmovn_s16(v4).u32[0];
    do
    {
      float v69 = (float)(v67 + 1) / (float)v66;
      float v70 = v69 * (float)(v69 * v69);
      float32x2_t v71 = (float32x2_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v16, v17, v69), v18, v69 * v69), v19, v70).u64[0];
      float32x2_t v72 = (float32x2_t)vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v20, v21, v69), v22, v69 * v69), v23, v70).u64[0];
      float32x2_t v73 = vmul_f32(v72, v72);
      v73.i32[0] = vadd_f32(v73, (float32x2_t)vdup_lane_s32((int32x2_t)v73, 1)).u32[0];
      float32x2_t v74 = vrsqrte_f32((float32x2_t)v73.u32[0]);
      int32x2_t v75 = (int32x2_t)vmul_n_f32(v72, vmul_f32(v74, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v74, v74))).f32[0]);
      v74.f32[0] = -*(float *)&v75.i32[1];
      float32x2_t v76 = (float32x2_t)vzip1_s32((int32x2_t)v74, v75);
      float32x2_t v77 = vmul_f32(v76, v76);
      v77.i32[0] = vadd_f32(v77, (float32x2_t)vdup_lane_s32((int32x2_t)v77, 1)).u32[0];
      float32x2_t v78 = vrsqrte_f32((float32x2_t)v77.u32[0]);
      float32x2_t v79 = vmul_f32(vmul_n_f32(vmul_n_f32(v76, vmul_f32(v78, vrsqrts_f32((float32x2_t)v77.u32[0], vmul_f32(v78, v78))).f32[0]), v35), (float32x2_t)0x3F0000003F000000);
      float32x2_t v80 = vsub_f32(v71, v6);
      v77.f32[0] = sqrtf(vaddv_f32(vmul_f32(v80, v80)));
      float v81 = v41 + v77.f32[0];
      float v82 = v40.f32[0] + (float)(v77.f32[0] / a1[10].f32[0]);
      *(float32x2_t *)&long long v83 = vsub_f32(v6, v36);
      if (v42)
      {
        float32x2_t v84 = vmul_f32(v36, v36);
        v84.i32[0] = vadd_f32(v84, (float32x2_t)vdup_lane_s32((int32x2_t)v84, 1)).u32[0];
        float32x2_t v85 = vrsqrte_f32((float32x2_t)v84.u32[0]);
        float32x2_t v86 = vmul_n_f32(v36, vmul_f32(v85, vrsqrts_f32((float32x2_t)v84.u32[0], vmul_f32(v85, v85))).f32[0]);
        float v87 = a1[9].f32[2] + (float)(v35 * 0.5);
        float32x2_t v88 = vmul_f32(v79, v79);
        v88.i32[0] = vadd_f32(v88, (float32x2_t)vdup_lane_s32((int32x2_t)v88, 1)).u32[0];
        float32x2_t v89 = vmul_n_f32(v86, v87);
        float32x2_t v90 = vrsqrte_f32((float32x2_t)v88.u32[0]);
        float32x2_t v91 = vmul_n_f32(v79, vmul_f32(v90, vrsqrts_f32((float32x2_t)v88.u32[0], vmul_f32(v90, v90))).f32[0]);
        *(float32x2_t *)&long long v92 = vadd_f32(v36, v6);
        if (v14) {
          float v93 = v41;
        }
        else {
          float v93 = 1.0;
        }
        DWORD2(v92) = 0;
        unint64_t v94 = a1[1].u32[0] + (unint64_t)v39;
        *((float *)&v92 + 3) = v93;
        *(_OWORD *)(a1[2].i64[1] + 16 * v94) = v92;
        *(_DWORD *)(a1[1].i64[1] + 4 * v94) = v68;
        unint64_t v95 = __PAIR64__(1.0, v40.u32[0]);
        float32x2_t v96 = vmul_n_f32(v91, v87);
        *(void *)(a1[2].i64[0] + 8 * v94) = __PAIR64__(1.0, v40.u32[0]);
        float32x2_t v97 = vadd_f32(v6, v89);
        unint64_t v98 = a1[1].u32[0] + (unint64_t)(v39 + 1);
        DWORD2(v99) = 0;
        *((float *)&v99 + 3) = v93;
        *(_OWORD *)(a1[2].i64[1] + 16 * v98) = v99;
        *(_DWORD *)(a1[1].i64[1] + 4 * v98) = v4.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v98) = __PAIR64__(1.0, v40.u32[0]);
        *(float32x2_t *)&long long v99 = vadd_f32(v71, v96);
        if (v14) {
          float v100 = v81;
        }
        else {
          float v100 = 1.0;
        }
        unint64_t v101 = a1[1].u32[0] + (unint64_t)(v39 + 2);
        DWORD2(v99) = 0;
        *((float *)&v99 + 3) = v100;
        *(_OWORD *)(a1[2].i64[1] + 16 * v10SKCNode::setFlags(this, 66, 1) = v99;
        *(_DWORD *)(a1[1].i64[1] + 4 * v10SKCNode::setFlags(this, 66, 1) = v4.i32[0];
        unint64_t v102 = __PAIR64__(1.0, LODWORD(v82));
        *(void *)(a1[2].i64[0] + 8 * v10SKCNode::setFlags(this, 66, 1) = __PAIR64__(1.0, LODWORD(v82));
        *(float32x2_t *)&long long v104 = vadd_f32(v71, v79);
        DWORD2(v104) = 0;
        unint64_t v103 = a1[1].u32[0] + (unint64_t)(v39 + 3);
        *((float *)&v104 + 3) = v100;
        *(_OWORD *)(a1[2].i64[1] + 16 * v103) = v104;
        *(_DWORD *)(a1[1].i64[1] + 4 * v103) = v68;
        *(void *)(a1[2].i64[0] + 8 * v103) = __PAIR64__(1.0, LODWORD(v82));
        *(float32x2_t *)&long long v105 = vsub_f32(v6, v89);
        unint64_t v106 = a1[1].u32[0] + (unint64_t)(v39 + 4);
        DWORD2(v105) = 0;
        *((float *)&v105 + 3) = v93;
        *(_OWORD *)(a1[2].i64[1] + 16 * v106) = v105;
        *(_DWORD *)(a1[1].i64[1] + 4 * v106) = v4.i32[0];
        uint64_t v107 = v40.u32[0];
        *(void *)(a1[2].i64[0] + 8 * v106) = v40.u32[0];
        DWORD2(v83) = 0;
        unint64_t v108 = a1[1].u32[0] + (unint64_t)(v39 + 5);
        *((float *)&v83 + 3) = v93;
        *(_OWORD *)(a1[2].i64[1] + 16 * v108) = v83;
        *(_DWORD *)(a1[1].i64[1] + 4 * v108) = v68;
        *(void *)(a1[2].i64[0] + 8 * v108) = v40.u32[0];
        *(float32x2_t *)&long long v110 = vsub_f32(v71, v79);
        DWORD2(v110) = 0;
        unint64_t v109 = a1[1].u32[0] + (unint64_t)(v39 + 6);
        *((float *)&v110 + 3) = v100;
        *(_OWORD *)(a1[2].i64[1] + 16 * v109) = v110;
        *(_DWORD *)(a1[1].i64[1] + 4 * v109) = v68;
        uint64_t v111 = LODWORD(v82);
        *(void *)(a1[2].i64[0] + 8 * v109) = LODWORD(v82);
        *(float32x2_t *)&long long v112 = vsub_f32(v71, v96);
        unint64_t v113 = a1[1].u32[0] + (unint64_t)(v39 + 7);
        DWORD2(v112) = 0;
        *((float *)&v112 + 3) = v100;
        *(_OWORD *)(a1[2].i64[1] + 16 * v113) = v112;
        *(_DWORD *)(a1[1].i64[1] + 4 * v113) = v4.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v113) = LODWORD(v82);
        v39 += 8;
        float32x2_t v40 = (float32x2_t)v95;
      }
      else
      {
        if (!v14) {
          float v41 = 1.0;
        }
        DWORD2(v83) = 0;
        *((float *)&v83 + 3) = v41;
        uint64_t v107 = v40.u32[0];
        *(float32x2_t *)&long long v92 = vadd_f32(v36, v6);
        DWORD2(v92) = 0;
        *((float *)&v92 + 3) = v41;
        v40.i32[1] = 1.0;
        *(float32x2_t *)&long long v104 = vadd_f32(v71, v79);
        if (v14) {
          float v114 = v81;
        }
        else {
          float v114 = 1.0;
        }
        DWORD2(v104) = 0;
        *((float *)&v104 + 3) = v114;
        unint64_t v102 = __PAIR64__(1.0, LODWORD(v82));
        *(float32x2_t *)&long long v110 = vsub_f32(v71, v79);
        DWORD2(v110) = 0;
        *((float *)&v110 + 3) = v114;
        uint64_t v111 = LODWORD(v82);
      }
      unint64_t v115 = a1[1].u32[0] + (unint64_t)v39;
      *(_OWORD *)(a1[2].i64[1] + 16 * v115) = v83;
      *(_DWORD *)(a1[1].i64[1] + 4 * v115) = v68;
      *(void *)(a1[2].i64[0] + 8 * v115) = v107;
      unint64_t v116 = a1[1].u32[0] + (unint64_t)(v39 + 1);
      *(_OWORD *)(a1[2].i64[1] + 16 * v116) = v92;
      *(_DWORD *)(a1[1].i64[1] + 4 * v116) = v68;
      *(float32x2_t *)(a1[2].i64[0] + 8 * v116) = v40;
      unint64_t v117 = a1[1].u32[0] + (unint64_t)(v39 + 2);
      *(_OWORD *)(a1[2].i64[1] + 16 * v117) = v104;
      *(_DWORD *)(a1[1].i64[1] + 4 * v117) = v68;
      *(void *)(a1[2].i64[0] + 8 * v117) = v102;
      unint64_t v118 = a1[1].u32[0] + (unint64_t)(v39 + 3);
      *(_OWORD *)(a1[2].i64[1] + 16 * v118) = v110;
      *(_DWORD *)(a1[1].i64[1] + 4 * v118) = v68;
      *(void *)(a1[2].i64[0] + 8 * v118) = v111;
      v39 += 4;
      ++v67;
      float32x2_t v6 = v71;
      float32x2_t v36 = v79;
      v40.f32[0] = v82;
      float v41 = v81;
    }
    while (v66 != v67);
  }
  else
  {
    float v81 = v41;
    float v82 = v40.f32[0];
  }
  a1[12].f32[2] = v81;
  a1[12].f32[3] = v82;
  a1[12].i32[1] = v39;
  return result;
}

void addJoin(float32x4_t *a1, double a2, double a3, double a4, float32x2_t a5, double a6, double a7, double a8, __n128 a9)
{
  a9.n128_f64[0] = a2;
  uint64_t v13 = a1[12].u32[1];
  float v14 = a1[12].f32[0];
  float32x4_t v15 = a1[11];
  int v16 = a1[9].u8[5];
  int v17 = a1[9].u8[4];
  v10.i32[0] = a1[9].i32[2];
  float v18 = a1[12].f32[2];
  LODWORD(v9) = a1[12].i32[3];
  float32x2_t v19 = vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a4);
  unsigned __int32 v20 = vadd_f32(v19, (float32x2_t)vdup_lane_s32((int32x2_t)v19, 1)).u32[0];
  float32x2_t v21 = vrsqrte_f32((float32x2_t)v20);
  float32x2_t v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v20, vmul_f32(v21, v21)));
  float32x2_t v23 = vmul_n_f32(*(float32x2_t *)&a4, vmul_f32(v22, vrsqrts_f32((float32x2_t)v20, vmul_f32(v22, v22))).f32[0]);
  float32x2_t v24 = vmul_f32(*(float32x2_t *)&a7, *(float32x2_t *)&a7);
  unsigned __int32 v25 = vadd_f32(v24, (float32x2_t)vdup_lane_s32((int32x2_t)v24, 1)).u32[0];
  float32x2_t v26 = vrsqrte_f32((float32x2_t)v25);
  float32x2_t v27 = vmul_f32(v26, vrsqrts_f32((float32x2_t)v25, vmul_f32(v26, v26)));
  float32x2_t v28 = vrsqrts_f32((float32x2_t)v25, vmul_f32(v27, v27));
  float32x2_t v29 = vmul_n_f32(*(float32x2_t *)&a7, vmul_f32(v27, v28).f32[0]);
  float32x2_t v30 = vsub_f32(v23, v29);
  __int32 v31 = v30.i32[0] & 0x60000000;
  if ((v30.i32[0] & 0x60000000) == 0 && (v30.i32[1] & 0x60000000) == 0)
  {
    float32x2_t v170 = vadd_f32(a5, (float32x2_t)a9.n128_u64[0]);
    __asm { FMOV            V6.2S, #1.0 }
    if (a1[9].i8[4])
    {
      float32x2_t v172 = vmul_f32(a5, a5);
      v172.i32[0] = vadd_f32(v172, (float32x2_t)vdup_lane_s32((int32x2_t)v172, 1)).u32[0];
      float32x2_t v173 = vrsqrte_f32((float32x2_t)v172.u32[0]);
      a4 = COERCE_DOUBLE(vmul_f32(v173, vrsqrts_f32((float32x2_t)v172.u32[0], vmul_f32(v173, v173))));
      float32x2_t v174 = vmul_n_f32(a5, vmul_f32(*(float32x2_t *)&a4, vrsqrts_f32((float32x2_t)v172.u32[0], vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a4))).f32[0]);
      *(float32x2_t *)&long long v175 = vmla_n_f32(v170, v174, v10.f32[0]);
      float32x2_t v176 = vsub_f32((float32x2_t)a9.n128_u64[0], a5);
      if (a1[9].i8[5]) {
        LODWORD(a4) = a1[12].i32[2];
      }
      else {
        *(float *)&a4 = 1.0;
      }
      unint64_t v177 = a1[1].u32[0] + (unint64_t)(v13 - 10);
      DWORD2(v175) = 0;
      HIDWORD(v175) = LODWORD(a4);
      v15.i32[3] = 1.0;
      float32x4_t v178 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      int16x8_t v179 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v15, (float32x4_t)0), v178));
      *(int16x4_t *)v179.i8 = vmovn_s32((int32x4_t)v179);
      *(_OWORD *)(a1[2].i64[1] + 16 * v177) = v175;
      unsigned __int32 v180 = vmovn_s16(v179).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v177) = v180;
      *(float32x2_t *)&long long v181 = vmls_lane_f32(v176, v174, v10, 0);
      *(void *)(a1[2].i64[0] + 8 * v177) = __PAIR64__(HIDWORD(_D6), v9);
      *(float32x2_t *)&long long v182 = v170;
      DWORD2(v182) = 0;
      HIDWORD(v182) = LODWORD(a4);
      unint64_t v183 = a1[1].u32[0] + (unint64_t)(v13 - 9);
      float32x4_t v184 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v15, v14), v178));
      *(int16x4_t *)v184.f32 = vmovn_s32((int32x4_t)v184);
      v179.i32[1] = HIDWORD(_D6);
      v179.i32[0] = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v183) = v182;
      *(int8x8_t *)v178.f32 = vmovn_s16((int16x8_t)v184);
      *(_DWORD *)(a1[1].i64[1] + 4 * v183) = v178.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v183) = v179.i64[0];
      unint64_t v185 = a1[1].u32[0] + (unint64_t)(v13 - 6);
      *(float32x2_t *)&long long v186 = v176;
      DWORD2(v186) = 0;
      HIDWORD(v186) = LODWORD(a4);
      LODWORD(v9) = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v185) = v186;
      *(_DWORD *)(a1[1].i64[1] + 4 * v185) = v178.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v185) = v9;
      DWORD2(v18SKCNode::setFlags(this, 66, 1) = 0;
      HIDWORD(v18SKCNode::setFlags(this, 66, 1) = LODWORD(a4);
      unint64_t v187 = a1[1].u32[0] + (unint64_t)(v13 - 5);
      v178.i32[0] = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v187) = v181;
      *(_DWORD *)(a1[1].i64[1] + 4 * v187) = v180;
      *(void *)(a1[2].i64[0] + 8 * v187) = v178.i64[0];
      LODWORD(v9) = a1[12].i32[3];
    }
    else
    {
      *(float32x2_t *)&long long v182 = v170;
      DWORD2(v182) = 0;
      if (a1[9].i8[5]) {
        LODWORD(a4) = a1[12].i32[2];
      }
      else {
        *(float *)&a4 = 1.0;
      }
      HIDWORD(v182) = LODWORD(a4);
      v15.i32[3] = 1.0;
      float32x4_t v184 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      *(int16x4_t *)v184.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v15, v14), v184)));
      float32x2_t v176 = vsub_f32((float32x2_t)a9.n128_u64[0], a5);
      *(float32x2_t *)&long long v186 = v176;
      DWORD2(v186) = 0;
      HIDWORD(v186) = LODWORD(a4);
    }
    unint64_t v370 = a1[1].u32[0] + (unint64_t)(v13 - 2);
    *(_OWORD *)(a1[2].i64[1] + 16 * v370) = v182;
    unsigned __int32 v371 = vmovn_s16((int16x8_t)v184).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v370) = v371;
    LODWORD(_D6) = v9;
    *(void *)(a1[2].i64[0] + 8 * v370) = _D6;
    unint64_t v372 = a1[1].u32[0] + (unint64_t)(v13 - 1);
    LODWORD(_D6) = a1[12].i32[3];
    *(_OWORD *)(a1[2].i64[1] + 16 * v372) = v186;
    *(_DWORD *)(a1[1].i64[1] + 4 * v372) = v371;
    *(void *)(a1[2].i64[0] + 8 * v372) = _D6;
    if (v17)
    {
      float32x2_t v373 = vmul_f32(a5, a5);
      v373.i32[0] = vadd_f32(v373, (float32x2_t)vdup_lane_s32((int32x2_t)v373, 1)).u32[0];
      float32x2_t v374 = vrsqrte_f32((float32x2_t)v373.u32[0]);
      float32x2_t v375 = vmul_f32(v374, vrsqrts_f32((float32x2_t)v373.u32[0], vmul_f32(v374, v374)));
      float32x2_t v376 = vmul_n_f32(a5, vmul_f32(v375, vrsqrts_f32((float32x2_t)v373.u32[0], vmul_f32(v375, v375))).f32[0]);
      *(float32x2_t *)&long long v377 = vmla_n_f32(v170, v376, v10.f32[0]);
      uint64_t v378 = a1[1].u32[0] + v13;
      __asm { FMOV            V16.2S, #1.0 }
      HIDWORD(v380) = HIDWORD(_D16);
      LODWORD(v380) = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v378) = v182;
      v373.i32[0] = vmovn_s16((int16x8_t)v184).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v378) = v373.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v378) = v380;
      DWORD2(v377) = 0;
      HIDWORD(v377) = LODWORD(a4);
      unint64_t v381 = a1[1].u32[0] + (unint64_t)(v13 + 1);
      int16x8_t v382 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v15, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v382.i8 = vmovn_s32((int32x4_t)v382);
      LODWORD(_D16) = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v38SKCNode::setFlags(this, 66, 1) = v377;
      float32x2_t v170 = (float32x2_t)vmovn_s16(v382);
      *(_DWORD *)(a1[1].i64[1] + 4 * v38SKCNode::setFlags(this, 66, 1) = v170.i32[0];
      *(float32x2_t *)&long long v383 = vmls_lane_f32(v176, v376, v10, 0);
      *(void *)(a1[2].i64[0] + 8 * v38SKCNode::setFlags(this, 66, 1) = _D16;
      unint64_t v384 = a1[1].u32[0] + (unint64_t)(v13 + 4);
      DWORD2(v383) = 0;
      HIDWORD(v383) = LODWORD(a4);
      LODWORD(a4) = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v384) = v383;
      *(_DWORD *)(a1[1].i64[1] + 4 * v384) = v170.i32[0];
      *(double *)(a1[2].i64[0] + 8 * v384) = a4;
      unint64_t v385 = a1[1].u32[0] + (unint64_t)(v13 + 5);
      v170.i32[0] = a1[12].i32[3];
      *(_OWORD *)(a1[2].i64[1] + 16 * v385) = v186;
      *(_DWORD *)(a1[1].i64[1] + 4 * v385) = v373.i32[0];
      *(float32x2_t *)(a1[2].i64[0] + 8 * v385) = v170;
      LODWORD(v13) = v13 + 8;
    }
    unint64_t v386 = a1[1].u32[0] + (unint64_t)v13;
    v170.i32[0] = a1[12].i32[3];
    *(_OWORD *)(a1[2].i64[1] + 16 * v386) = v186;
    unsigned __int32 v387 = vmovn_s16((int16x8_t)v184).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v386) = v387;
    *(float32x2_t *)(a1[2].i64[0] + 8 * v386) = v170;
    unint64_t v388 = a1[1].u32[0] + (unint64_t)(v13 + 1);
    __asm { FMOV            V0.2S, #1.0 }
    LODWORD(_D0) = a1[12].i32[3];
    *(_OWORD *)(a1[2].i64[1] + 16 * v388) = v182;
    *(_DWORD *)(a1[1].i64[1] + 4 * v388) = v387;
    goto LABEL_123;
  }
  float v33 = vaddv_f32(v19);
  float v34 = vaddv_f32(v24);
  __int32 v35 = a1[8].i32[1];
  __n128 v878 = a9;
  if (!v35)
  {
    float32x2_t v812 = v10;
    __int32 v819 = v30.i32[1];
    LODWORD(v859) = a1[12].i32[3];
    float v866 = a1[12].f32[0];
    uint64_t v888 = 0;
    uint64_t v889 = 0;
    float32x2_t v78 = vadd_f32(*(float32x2_t *)&a8, (float32x2_t)a9.n128_u64[0]);
    double v892 = *(double *)&v78;
    float32x2_t v893 = vneg_f32(*(float32x2_t *)&a7);
    float32x2_t v820 = vadd_f32(a5, (float32x2_t)a9.n128_u64[0]);
    float32x4_t v825 = v15;
    double v890 = *(double *)&v820;
    double v891 = a4;
    float32x2_t v79 = vsub_f32((float32x2_t)a9.n128_u64[0], *(float32x2_t *)&a8);
    float32x2_t v886 = v79;
    float32x2_t v887 = v893;
    float32x2_t v845 = vsub_f32((float32x2_t)a9.n128_u64[0], a5);
    v885[0] = v845;
    v885[1] = *(float32x2_t *)&a4;
    double v833 = a4;
    sk_ray2::intersect((float32x2_t *)&v892, (float32x2_t *)&v890, (float *)&v889 + 1, (float *)&v889);
    sk_ray2::intersect(&v886, v885, (float *)&v888 + 1, (float *)&v888);
    v883.i32[0] = 0;
    v881.i32[0] = 0;
    sk_ray2::intersect((float32x2_t *)&v892, (float32x2_t *)&v890, (float *)&v883, (float *)&v881);
    float32x2_t v852 = vmla_n_f32(*(float32x2_t *)&v892, v893, v883.f32[0]);
    v883.i32[0] = 0;
    v881.i32[0] = 0;
    sk_ray2::intersect(&v886, v885, (float *)&v883, (float *)&v881);
    float32x2_t v80 = vmla_n_f32(v886, v887, v883.f32[0]);
    float v81 = vmlas_n_f32((float)-*((float *)&a7 + 1) * *(float *)&v833, *((float *)&v833 + 1), *(float *)&a7);
    if (v81 > 0.0)
    {
      float32x2_t v82 = vsub_f32(v852, (float32x2_t)v878.n128_u64[0]);
      float32x2_t v83 = vsub_f32(v80, v845);
      BOOL v47 = sqrtf(vaddv_f32(vmul_f32(v83, v83))) <= sqrtf(v33);
      float32x2_t v84 = vsub_f32(v80, v79);
      float v85 = sqrtf(vaddv_f32(vmul_f32(v84, v84)));
      float v86 = sqrtf(v34);
      BOOL v87 = v47 && v85 <= v86;
      float32x2_t v88 = v80;
      if (!v87)
      {
        float32x2_t v80 = v79;
        float32x2_t v88 = v845;
      }
      float32x2_t v839 = v88;
      float32x2_t v846 = v82;
      float32x2_t v875 = v80;
      float32x2_t v883 = v78;
      float32x2_t v884 = vsub_f32(v820, v78);
      float32x2_t v881 = (float32x2_t)v878.n128_u64[0];
      int32x2_t v882 = (int32x2_t)v82;
      v879.i32[0] = 0;
      HIDWORD(v894) = 0;
      sk_ray2::intersect(&v883, &v881, (float *)&v879, (float *)&v894 + 1);
      float v89 = a1[9].f32[3];
      float32x2_t v90 = vmul_f32(v846, v846);
      unsigned __int32 v91 = vadd_f32(v90, (float32x2_t)vdup_lane_s32((int32x2_t)v90, 1)).u32[0];
      if (sqrtf(vaddv_f32(v90)) <= v89)
      {
        float32x4_t v304 = v825;
        if (v17)
        {
          *(float32x2_t *)&long long v305 = v839;
          float32x2_t v306 = vsub_f32(v839, (float32x2_t)v878.n128_u64[0]);
          float32x2_t v307 = vmul_f32(v306, v306);
          v307.i32[0] = vadd_f32(v307, (float32x2_t)vdup_lane_s32((int32x2_t)v307, 1)).u32[0];
          float32x2_t v308 = vrsqrte_f32((float32x2_t)v307.u32[0]);
          float32x2_t v309 = vmul_f32(v308, vrsqrts_f32((float32x2_t)v307.u32[0], vmul_f32(v308, v308)));
          *(float32x2_t *)&long long v310 = vmla_n_f32(v839, vmul_n_f32(v306, vmul_f32(v309, vrsqrts_f32((float32x2_t)v307.u32[0], vmul_f32(v309, v309))).f32[0]), v812.f32[0]);
          float32x2_t v311 = vrsqrte_f32((float32x2_t)v91);
          float32x2_t v312 = vmul_f32(v311, vrsqrts_f32((float32x2_t)v91, vmul_f32(v311, v311)));
          *(float32x2_t *)&long long v313 = v852;
          *(float32x2_t *)&long long v314 = vmla_n_f32(v852, vmul_n_f32(v846, vmul_f32(v312, vrsqrts_f32((float32x2_t)v91, vmul_f32(v312, v312))).f32[0]), v812.f32[0]);
          if (v16) {
            float v315 = v18;
          }
          else {
            float v315 = 1.0;
          }
          unint64_t v316 = a1[1].u32[0] + (unint64_t)(v13 - 10);
          DWORD2(v314) = 0;
          *((float *)&v314 + 3) = v315;
          v304.i32[3] = 1.0;
          float32x4_t v317 = (float32x4_t)vdupq_n_s32(0x437F0000u);
          int16x8_t v318 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v304, (float32x4_t)0), v317));
          *(_OWORD *)(a1[2].i64[1] + 16 * v316) = v314;
          *(int16x4_t *)v318.i8 = vmovn_s32((int32x4_t)v318);
          unsigned __int32 v319 = vmovn_s16(v318).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v316) = v319;
          unint64_t v320 = __PAIR64__(1.0, v859);
          *(void *)(a1[2].i64[0] + 8 * v316) = __PAIR64__(1.0, v859);
          unint64_t v321 = a1[1].u32[0] + (unint64_t)(v13 - 9);
          DWORD2(v313) = 0;
          *((float *)&v313 + 3) = v315;
          float32x4_t v322 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v304, v866), v317));
          *(_OWORD *)(a1[2].i64[1] + 16 * v32SKCNode::setFlags(this, 66, 1) = v313;
          *(int16x4_t *)v322.f32 = vmovn_s32((int32x4_t)v322);
          v317.i32[0] = vmovn_s16((int16x8_t)v322).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v32SKCNode::setFlags(this, 66, 1) = v317.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v32SKCNode::setFlags(this, 66, 1) = __PAIR64__(1.0, v859);
          DWORD2(v305) = 0;
          unint64_t v323 = a1[1].u32[0] + (unint64_t)(v13 - 6);
          *((float *)&v305 + 3) = v315;
          *(_OWORD *)(a1[2].i64[1] + 16 * v323) = v305;
          *(_DWORD *)(a1[1].i64[1] + 4 * v323) = v317.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v323) = v859;
          DWORD2(v310) = 0;
          unint64_t v324 = a1[1].u32[0] + (unint64_t)(v13 - 5);
          *((float *)&v310 + 3) = v315;
          *(_OWORD *)(a1[2].i64[1] + 16 * v324) = v310;
          *(_DWORD *)(a1[1].i64[1] + 4 * v324) = v319;
          *(void *)(a1[2].i64[0] + 8 * v324) = v859;
          unint64_t v325 = a1[1].u32[0] + (unint64_t)(v13 - 2);
          *(_OWORD *)(a1[2].i64[1] + 16 * v325) = v313;
          *(_DWORD *)(a1[1].i64[1] + 4 * v325) = v317.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v325) = __PAIR64__(1.0, v859);
          unint64_t v326 = a1[1].u32[0] + (unint64_t)(v13 - 1);
          *(_OWORD *)(a1[2].i64[1] + 16 * v326) = v305;
          *(_DWORD *)(a1[1].i64[1] + 4 * v326) = v317.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v326) = v859;
          uint64_t v327 = a1[1].u32[0] + v13;
          *(_OWORD *)(a1[2].i64[1] + 16 * v327) = v313;
          *(_DWORD *)(a1[1].i64[1] + 4 * v327) = v317.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v327) = __PAIR64__(1.0, v859);
          unint64_t v328 = a1[1].u32[0] + (unint64_t)(v13 + 1);
          *(_OWORD *)(a1[2].i64[1] + 16 * v328) = v314;
          *(_DWORD *)(a1[1].i64[1] + 4 * v328) = v319;
          *(void *)(a1[2].i64[0] + 8 * v328) = __PAIR64__(1.0, v859);
          unint64_t v329 = a1[1].u32[0] + (unint64_t)(v13 + 4);
          *(_OWORD *)(a1[2].i64[1] + 16 * v329) = v310;
          *(_DWORD *)(a1[1].i64[1] + 4 * v329) = v319;
          *(void *)(a1[2].i64[0] + 8 * v329) = v859;
          unint64_t v330 = a1[1].u32[0] + (unint64_t)(v13 + 5);
          *(_OWORD *)(a1[2].i64[1] + 16 * v330) = v305;
          *(_DWORD *)(a1[1].i64[1] + 4 * v330) = v317.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v330) = v859;
          LODWORD(v13) = v13 + 8;
        }
        else
        {
          if (v16) {
            float v315 = v18;
          }
          else {
            float v315 = 1.0;
          }
          *(float32x2_t *)&long long v313 = v852;
          DWORD2(v313) = 0;
          *((float *)&v313 + 3) = v315;
          unint64_t v698 = a1[1].u32[0] + (unint64_t)(v13 - 2);
          v304.i32[3] = 1.0;
          float32x4_t v322 = vmulq_n_f32(v304, v866);
          *(_OWORD *)(a1[2].i64[1] + 16 * v698) = v313;
          *(int16x4_t *)v322.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v322, (float32x4_t)vdupq_n_s32(0x437F0000u))));
          unsigned __int32 v699 = vmovn_s16((int16x8_t)v322).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v698) = v699;
          unint64_t v320 = __PAIR64__(1.0, v859);
          *(void *)(a1[2].i64[0] + 8 * v698) = __PAIR64__(1.0, v859);
          unint64_t v700 = a1[1].u32[0] + (unint64_t)(v13 - 1);
          *(float32x2_t *)&long long v701 = v839;
          DWORD2(v70SKCNode::setFlags(this, 66, 1) = 0;
          *((float *)&v701 + 3) = v315;
          *(_OWORD *)(a1[2].i64[1] + 16 * v700) = v701;
          *(_DWORD *)(a1[1].i64[1] + 4 * v700) = v699;
          *(void *)(a1[2].i64[0] + 8 * v700) = v859;
        }
        *(float32x2_t *)&long long v702 = v875;
        unint64_t v703 = a1[1].u32[0] + (unint64_t)v13;
        DWORD2(v702) = 0;
        *((float *)&v702 + 3) = v315;
        *(_OWORD *)(a1[2].i64[1] + 16 * v703) = v702;
        unsigned __int32 v704 = vmovn_s16((int16x8_t)v322).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v703) = v704;
        *(void *)(a1[2].i64[0] + 8 * v703) = v859;
        unint64_t v705 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v705) = v313;
        *(_DWORD *)(a1[1].i64[1] + 4 * v705) = v704;
        *(void *)(a1[2].i64[0] + 8 * v705) = v320;
      }
      else
      {
        float32x2_t v92 = vsub_f32(vmla_n_f32(v883, v884, v879.f32[0]), (float32x2_t)v878.n128_u64[0]);
        float v93 = fmaxf(sqrtf(vaddv_f32(vmul_f32(v92, v92))), v89);
        float32x2_t v94 = vrsqrte_f32((float32x2_t)v91);
        float32x2_t v95 = vmul_f32(v94, vrsqrts_f32((float32x2_t)v91, vmul_f32(v94, v94)));
        float32x2_t v96 = vmul_n_f32(v846, vmul_f32(v95, vrsqrts_f32((float32x2_t)v91, vmul_f32(v95, v95))).f32[0]);
        float32x2_t v97 = vmla_n_f32((float32x2_t)v878.n128_u64[0], v96, v93);
        v96.f32[0] = -v846.f32[1];
        float32x2_t v881 = v97;
        int32x2_t v882 = vzip1_s32((int32x2_t)v96, (int32x2_t)v846);
        float32x2_t v879 = v97;
        float32x2_t v880 = vneg_f32((float32x2_t)v882);
        uint64_t v894 = 0;
        sk_ray2::intersect(&v881, (float32x2_t *)&v890, (float *)&v894 + 1, (float *)&v894);
        *(float32x2_t *)&long long v98 = vmla_n_f32(v881, (float32x2_t)v882, *((float *)&v894 + 1));
        v99.i64[1] = v878.n128_i64[1];
        float32x2_t v100 = vsub_f32(*(float32x2_t *)&v98, (float32x2_t)v878.n128_u64[0]);
        float32x2_t v101 = vmul_f32(v100, v100);
        v101.i32[0] = vadd_f32(v101, (float32x2_t)vdup_lane_s32((int32x2_t)v101, 1)).u32[0];
        float32x2_t v102 = vrsqrte_f32((float32x2_t)v101.u32[0]);
        float32x2_t v103 = vmul_f32(v102, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(v102, v102)));
        float32x2_t v104 = (float32x2_t)vdup_lane_s32((int32x2_t)v812, 0);
        float32x2_t v105 = vmla_n_f32(*(float32x2_t *)&v98, vmul_n_f32(v100, vmul_f32(v103, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(v103, v103))).f32[0]), v812.f32[0]);
        float32x2_t v821 = v105;
        if (v17)
        {
          *(float32x2_t *)&long long v106 = v839;
          float32x2_t v107 = vsub_f32(v839, (float32x2_t)v878.n128_u64[0]);
          float32x2_t v108 = vmul_f32(v107, v107);
          v108.i32[0] = vadd_f32(v108, (float32x2_t)vdup_lane_s32((int32x2_t)v108, 1)).u32[0];
          float32x2_t v109 = vrsqrte_f32((float32x2_t)v108.u32[0]);
          float32x2_t v110 = vmul_f32(v109, vrsqrts_f32((float32x2_t)v108.u32[0], vmul_f32(v109, v109)));
          *(float32x2_t *)&long long v111 = vmla_f32(v839, v104, vmul_n_f32(v107, vmul_f32(v110, vrsqrts_f32((float32x2_t)v108.u32[0], vmul_f32(v110, v110))).f32[0]));
          if (v16) {
            float v112 = v18;
          }
          else {
            float v112 = 1.0;
          }
          unint64_t v113 = a1[1].u32[0] + (unint64_t)(v13 - 10);
          *(float32x2_t *)v114.i8 = v105;
          v114.i32[2] = 0;
          *(float *)&v114.i32[3] = v112;
          float32x4_t v99 = v825;
          v99.i32[3] = 1.0;
          float32x4_t v115 = (float32x4_t)vdupq_n_s32(0x437F0000u);
          *(int16x8_t *)(a1[2].i64[1] + 16 * v113) = v114;
          *(int16x4_t *)v114.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_f32(v99, (float32x4_t)0), v115)));
          v114.i32[0] = vmovn_s16(v114).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v113) = v114.i32[0];
          uint64_t v116 = v859;
          unint64_t v117 = __PAIR64__(1.0, v859);
          *(void *)(a1[2].i64[0] + 8 * v113) = __PAIR64__(1.0, v859);
          unint64_t v118 = a1[1].u32[0] + (unint64_t)(v13 - 9);
          DWORD2(v98) = 0;
          *((float *)&v98 + 3) = v112;
          float32x4_t v826 = v99;
          *(_OWORD *)(a1[2].i64[1] + 16 * v118) = v98;
          *(int16x4_t *)v99.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v99, v866), v115)));
          unsigned __int32 v119 = vmovn_s16((int16x8_t)v99).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v118) = v119;
          *(void *)(a1[2].i64[0] + 8 * v118) = __PAIR64__(1.0, v859);
          DWORD2(v106) = 0;
          unint64_t v120 = a1[1].u32[0] + (unint64_t)(v13 - 6);
          *((float *)&v106 + 3) = v112;
          *(_OWORD *)(a1[2].i64[1] + 16 * v120) = v106;
          *(_DWORD *)(a1[1].i64[1] + 4 * v120) = v119;
          *(void *)(a1[2].i64[0] + 8 * v120) = v859;
          DWORD2(v11SKCNode::setFlags(this, 66, 1) = 0;
          unint64_t v121 = a1[1].u32[0] + (unint64_t)(v13 - 5);
          float v867 = v112;
          *((float *)&v111 + 3) = v112;
          *(_OWORD *)(a1[2].i64[1] + 16 * v12SKCNode::setFlags(this, 66, 1) = v111;
          *(_DWORD *)(a1[1].i64[1] + 4 * v12SKCNode::setFlags(this, 66, 1) = v114.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v12SKCNode::setFlags(this, 66, 1) = v859;
        }
        else
        {
          if (v16) {
            float v590 = v18;
          }
          else {
            float v590 = 1.0;
          }
          DWORD2(v98) = 0;
          *((float *)&v98 + 3) = v590;
          float32x4_t v591 = v825;
          v591.i32[3] = 1.0;
          float32x4_t v826 = v591;
          uint64_t v116 = v859;
          *(int16x4_t *)v99.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v591, v866), (float32x4_t)vdupq_n_s32(0x437F0000u))));
          unint64_t v117 = __PAIR64__(1.0, v859);
          *(float32x2_t *)&long long v106 = v839;
          DWORD2(v106) = 0;
          float v867 = v590;
          *((float *)&v106 + 3) = v590;
        }
        unint64_t v857 = v117;
        uint64_t v864 = v116;
        int16x8_t v835 = (int16x8_t)v99;
        unint64_t v592 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        long long v818 = v98;
        *(_OWORD *)(a1[2].i64[1] + 16 * v592) = v98;
        unsigned __int32 v593 = vmovn_s16((int16x8_t)v99).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v592) = v593;
        *(void *)(a1[2].i64[0] + 8 * v592) = v117;
        unint64_t v594 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v594) = v106;
        *(_DWORD *)(a1[1].i64[1] + 4 * v594) = v593;
        unsigned __int32 v595 = v593;
        unsigned __int32 v849 = v593;
        *(void *)(a1[2].i64[0] + 8 * v594) = v116;
        uint64_t v596 = a1[1].u32[0] + v13;
        *(float32x2_t *)&long long v597 = v875;
        DWORD2(v597) = 0;
        *((float *)&v597 + 3) = v867;
        long long v842 = v597;
        *(_OWORD *)(a1[2].i64[1] + 16 * v596) = v597;
        *(_DWORD *)(a1[1].i64[1] + 4 * v596) = v595;
        *(void *)(a1[2].i64[0] + 8 * v596) = v116;
        uint64_t v894 = 0;
        sk_ray2::intersect(&v881, (float32x2_t *)&v890, (float *)&v894 + 1, (float *)&v894);
        *(float32x2_t *)&long long v598 = vmla_n_f32(v881, (float32x2_t)v882, *((float *)&v894 + 1));
        unint64_t v599 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        DWORD2(v598) = 0;
        *((float *)&v598 + 3) = v867;
        *(_OWORD *)(a1[2].i64[1] + 16 * v599) = v598;
        *(_DWORD *)(a1[1].i64[1] + 4 * v599) = v849;
        *(void *)(a1[2].i64[0] + 8 * v599) = v857;
        uint64_t v894 = 0;
        sk_ray2::intersect(&v879, (float32x2_t *)&v892, (float *)&v894 + 1, (float *)&v894);
        *(float32x2_t *)&long long v600 = vmla_n_f32(v879, v880, *((float *)&v894 + 1));
        unint64_t v601 = a1[1].u32[0] + (unint64_t)(v13 + 2);
        DWORD2(v600) = 0;
        *((float *)&v600 + 3) = v867;
        *(_OWORD *)(a1[2].i64[1] + 16 * v60SKCNode::setFlags(this, 66, 1) = v600;
        *(_DWORD *)(a1[1].i64[1] + 4 * v60SKCNode::setFlags(this, 66, 1) = v849;
        *(void *)(a1[2].i64[0] + 8 * v60SKCNode::setFlags(this, 66, 1) = v857;
        uint64_t v894 = 0;
        sk_ray2::intersect(&v879, (float32x2_t *)&v892, (float *)&v894 + 1, (float *)&v894);
        *(float32x2_t *)&long long v602 = vmla_n_f32(v879, v880, *((float *)&v894 + 1));
        unint64_t v603 = a1[1].u32[0] + (unint64_t)(v13 + 3);
        DWORD2(v602) = 0;
        *((float *)&v602 + 3) = v867;
        *(_OWORD *)(a1[2].i64[1] + 16 * v603) = v602;
        *(_DWORD *)(a1[1].i64[1] + 4 * v603) = v849;
        *(void *)(a1[2].i64[0] + 8 * v603) = v857;
        uint64_t v894 = 0;
        sk_ray2::intersect(&v879, (float32x2_t *)&v892, (float *)&v894 + 1, (float *)&v894);
        *(float32x2_t *)&long long v604 = vmla_n_f32(v879, v880, *((float *)&v894 + 1));
        if (v17)
        {
          float32x2_t v605 = vsub_f32(*(float32x2_t *)&v604, (float32x2_t)v878.n128_u64[0]);
          float32x2_t v606 = vmul_f32(v605, v605);
          v606.i32[0] = vadd_f32(v606, (float32x2_t)vdup_lane_s32((int32x2_t)v606, 1)).u32[0];
          float32x2_t v607 = vrsqrte_f32((float32x2_t)v606.u32[0]);
          float32x2_t v608 = vmul_f32(v607, vrsqrts_f32((float32x2_t)v606.u32[0], vmul_f32(v607, v607)));
          float32x2_t v609 = vmul_n_f32(v605, vmul_f32(v608, vrsqrts_f32((float32x2_t)v606.u32[0], vmul_f32(v608, v608))).f32[0]);
          float32x2_t v610 = vsub_f32(v875, (float32x2_t)v878.n128_u64[0]);
          float32x2_t v611 = vmul_f32(v610, v610);
          v611.i32[0] = vadd_f32(v611, (float32x2_t)vdup_lane_s32((int32x2_t)v611, 1)).u32[0];
          *(float32x2_t *)&long long v612 = vmla_f32(*(float32x2_t *)&v604, v104, v609);
          float32x2_t v613 = vrsqrte_f32((float32x2_t)v611.u32[0]);
          float32x2_t v614 = vmul_f32(v613, vrsqrts_f32((float32x2_t)v611.u32[0], vmul_f32(v613, v613)));
          unint64_t v615 = a1[1].u32[0] + (unint64_t)(v13 + 4);
          *(float32x2_t *)&long long v616 = v821;
          *(_OWORD *)(a1[2].i64[1] + 16 * v615) = v818;
          LODWORD(v617) = vmul_f32(v614, vrsqrts_f32((float32x2_t)v611.u32[0], vmul_f32(v614, v614))).u32[0];
          v614.i32[0] = vmovn_s16(v835).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v615) = v614.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v615) = v857;
          DWORD2(v616) = 0;
          unint64_t v618 = a1[1].u32[0] + (unint64_t)(v13 + 5);
          *((float *)&v616 + 3) = v867;
          int16x8_t v619 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v826, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
          *(int16x4_t *)v619.i8 = vmovn_s32((int32x4_t)v619);
          *(_OWORD *)(a1[2].i64[1] + 16 * v618) = v616;
          v619.i32[0] = vmovn_s16(v619).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v618) = v619.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v618) = v857;
          unint64_t v620 = a1[1].u32[0] + (unint64_t)(v13 + 6);
          *((void *)&v612 + SKCNode::setFlags(this, 66, 1) = __PAIR64__(LODWORD(v867), 0);
          *(_OWORD *)(a1[2].i64[1] + 16 * v620) = v612;
          *(_DWORD *)(a1[1].i64[1] + 4 * v620) = v619.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v620) = v857;
          *((void *)&v604 + SKCNode::setFlags(this, 66, 1) = __PAIR64__(LODWORD(v867), 0);
          unint64_t v621 = a1[1].u32[0] + (unint64_t)(v13 + 7);
          *(_OWORD *)(a1[2].i64[1] + 16 * v62SKCNode::setFlags(this, 66, 1) = v604;
          *(_DWORD *)(a1[1].i64[1] + 4 * v62SKCNode::setFlags(this, 66, 1) = v614.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v62SKCNode::setFlags(this, 66, 1) = v857;
          unint64_t v622 = a1[1].u32[0] + (unint64_t)(v13 + 8);
          *(_OWORD *)(a1[2].i64[1] + 16 * v622) = v604;
          *(_DWORD *)(a1[1].i64[1] + 4 * v622) = v614.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v622) = v857;
          unint64_t v623 = a1[1].u32[0] + (unint64_t)(v13 + 9);
          *(_OWORD *)(a1[2].i64[1] + 16 * v623) = v612;
          *(_DWORD *)(a1[1].i64[1] + 4 * v623) = v619.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v623) = v857;
          *(float32x2_t *)&long long v624 = vmla_f32(v875, v104, vmul_n_f32(v610, v617));
          unint64_t v625 = a1[1].u32[0] + (unint64_t)(v13 + 12);
          *((void *)&v624 + SKCNode::setFlags(this, 66, 1) = __PAIR64__(LODWORD(v867), 0);
          *(_OWORD *)(a1[2].i64[1] + 16 * v625) = v624;
          *(_DWORD *)(a1[1].i64[1] + 4 * v625) = v619.i32[0];
          uint64_t v626 = v864;
          *(void *)(a1[2].i64[0] + 8 * v625) = v864;
          unint64_t v627 = a1[1].u32[0] + (unint64_t)(v13 + 13);
          long long v628 = v842;
          *(_OWORD *)(a1[2].i64[1] + 16 * v627) = v842;
          *(_DWORD *)(a1[1].i64[1] + 4 * v627) = v614.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v627) = v864;
          LODWORD(v13) = v13 + 16;
          unint64_t v629 = v857;
          int16x8_t v630 = v835;
        }
        else
        {
          DWORD2(v604) = 0;
          uint64_t v626 = v864;
          *((float *)&v604 + 3) = v867;
          LODWORD(v13) = v13 + 4;
          unint64_t v629 = v857;
          int16x8_t v630 = v835;
          long long v628 = v842;
        }
        unint64_t v706 = a1[1].u32[0] + (unint64_t)v13;
        *(_OWORD *)(a1[2].i64[1] + 16 * v706) = v628;
        unsigned __int32 v707 = vmovn_s16(v630).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v706) = v707;
        *(void *)(a1[2].i64[0] + 8 * v706) = v626;
        unint64_t v708 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v708) = v604;
        *(_DWORD *)(a1[1].i64[1] + 4 * v708) = v707;
        *(void *)(a1[2].i64[0] + 8 * v708) = v629;
      }
      goto LABEL_184;
    }
    *(float32x2_t *)&long long v225 = v845;
    if (v81 >= 0.0)
    {
      if (v31) {
        BOOL v331 = 0;
      }
      else {
        BOOL v331 = (v819 & 0x60000000) == 0;
      }
      if (!v331)
      {
        float32x2_t v332 = vmul_n_f32(v23, a1[9].f32[3]);
        *(float32x2_t *)&long long v333 = vadd_f32(v78, v332);
        *(float32x2_t *)&long long v334 = vadd_f32(v79, v332);
        float32x4_t v335 = v825;
        if (v17)
        {
          float32x2_t v336 = vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8);
          v336.i32[0] = vadd_f32(v336, (float32x2_t)vdup_lane_s32((int32x2_t)v336, 1)).u32[0];
          float32x2_t v337 = vrsqrte_f32((float32x2_t)v336.u32[0]);
          float32x2_t v338 = vmul_f32(v337, vrsqrts_f32((float32x2_t)v336.u32[0], vmul_f32(v337, v337)));
          float32x2_t v339 = vmul_n_f32(*(float32x2_t *)&a8, vmul_f32(v338, vrsqrts_f32((float32x2_t)v336.u32[0], vmul_f32(v338, v338))).f32[0]);
          *(float32x2_t *)&long long v340 = vmla_n_f32(*(float32x2_t *)&v333, v339, v812.f32[0]);
          if (v16) {
            float v341 = v18;
          }
          else {
            float v341 = 1.0;
          }
          unint64_t v342 = a1[1].u32[0] + (unint64_t)(v13 - 10);
          DWORD2(v340) = 0;
          *((float *)&v340 + 3) = v341;
          v335.i32[3] = 1.0;
          float32x4_t v343 = (float32x4_t)vdupq_n_s32(0x437F0000u);
          int16x8_t v344 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v335, (float32x4_t)0), v343));
          *(int16x4_t *)v344.i8 = vmovn_s32((int32x4_t)v344);
          *(_OWORD *)(a1[2].i64[1] + 16 * v342) = v340;
          unsigned __int32 v345 = vmovn_s16(v344).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v342) = v345;
          _D2 = __PAIR64__(1.0, v859);
          *(void *)(a1[2].i64[0] + 8 * v342) = __PAIR64__(1.0, v859);
          unint64_t v346 = a1[1].u32[0] + (unint64_t)(v13 - 9);
          DWORD2(v333) = 0;
          *((float *)&v333 + 3) = v341;
          float32x4_t v347 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v335, v866), v343));
          *(int16x4_t *)v347.f32 = vmovn_s32((int32x4_t)v347);
          *(_OWORD *)(a1[2].i64[1] + 16 * v346) = v333;
          unsigned __int32 v348 = vmovn_s16((int16x8_t)v347).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v346) = v348;
          *(void *)(a1[2].i64[0] + 8 * v346) = __PAIR64__(1.0, v859);
          *(float32x2_t *)&long long v349 = vmla_n_f32(*(float32x2_t *)&v334, v339, v812.f32[0]);
          *(void *)&long long v351 = v334;
          DWORD2(v35SKCNode::setFlags(this, 66, 1) = 0;
          unint64_t v350 = a1[1].u32[0] + (unint64_t)(v13 - 6);
          *((float *)&v351 + 3) = v341;
          *(_OWORD *)(a1[2].i64[1] + 16 * v350) = v351;
          *(_DWORD *)(a1[1].i64[1] + 4 * v350) = v348;
          *(void *)(a1[2].i64[0] + 8 * v350) = v859;
          DWORD2(v349) = 0;
          unint64_t v352 = a1[1].u32[0] + (unint64_t)(v13 - 5);
          *((float *)&v349 + 3) = v341;
          *(_OWORD *)(a1[2].i64[1] + 16 * v352) = v349;
          *(_DWORD *)(a1[1].i64[1] + 4 * v352) = v345;
          *(void *)(a1[2].i64[0] + 8 * v352) = v859;
          unint64_t v353 = a1[1].u32[0] + (unint64_t)(v13 - 2);
          *(_OWORD *)(a1[2].i64[1] + 16 * v353) = v333;
          *(_DWORD *)(a1[1].i64[1] + 4 * v353) = v348;
          *(void *)(a1[2].i64[0] + 8 * v353) = __PAIR64__(1.0, v859);
          unint64_t v354 = a1[1].u32[0] + (unint64_t)(v13 - 1);
          *(_OWORD *)(a1[2].i64[1] + 16 * v354) = v351;
          *(_DWORD *)(a1[1].i64[1] + 4 * v354) = v348;
          *(void *)(a1[2].i64[0] + 8 * v354) = v859;
          uint64_t v355 = a1[1].u32[0] + v13;
          *(_OWORD *)(a1[2].i64[1] + 16 * v355) = v333;
          *(_DWORD *)(a1[1].i64[1] + 4 * v355) = v348;
          *(void *)(a1[2].i64[0] + 8 * v355) = __PAIR64__(1.0, v859);
          unint64_t v356 = a1[1].u32[0] + (unint64_t)(v13 + 1);
          *(_OWORD *)(a1[2].i64[1] + 16 * v356) = v340;
          *(_DWORD *)(a1[1].i64[1] + 4 * v356) = v345;
          *(void *)(a1[2].i64[0] + 8 * v356) = __PAIR64__(1.0, v859);
          *(float32x2_t *)&long long v357 = vmls_lane_f32(*(float32x2_t *)&v334, v339, v812, 0);
          unint64_t v358 = a1[1].u32[0] + (unint64_t)(v13 + 4);
          DWORD2(v357) = 0;
          *((float *)&v357 + 3) = v341;
          *(_OWORD *)(a1[2].i64[1] + 16 * v358) = v357;
          *(_DWORD *)(a1[1].i64[1] + 4 * v358) = v345;
          *(void *)(a1[2].i64[0] + 8 * v358) = v859;
          unint64_t v359 = a1[1].u32[0] + (unint64_t)(v13 + 5);
          *(_OWORD *)(a1[2].i64[1] + 16 * v359) = v351;
          *(_DWORD *)(a1[1].i64[1] + 4 * v359) = v348;
          *(void *)(a1[2].i64[0] + 8 * v359) = v859;
          LODWORD(v13) = v13 + 8;
        }
        else
        {
          if (v16) {
            float v711 = v18;
          }
          else {
            float v711 = 1.0;
          }
          DWORD2(v333) = 0;
          *((float *)&v333 + 3) = v711;
          unint64_t v712 = a1[1].u32[0] + (unint64_t)(v13 - 2);
          v335.i32[3] = 1.0;
          float32x4_t v347 = vmulq_n_f32(v335, v866);
          *(_OWORD *)(a1[2].i64[1] + 16 * v712) = v333;
          *(int16x4_t *)v347.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v347, (float32x4_t)vdupq_n_s32(0x437F0000u))));
          unsigned __int32 v713 = vmovn_s16((int16x8_t)v347).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v712) = v713;
          _D2 = __PAIR64__(1.0, v859);
          *(void *)(a1[2].i64[0] + 8 * v712) = __PAIR64__(1.0, v859);
          unint64_t v714 = a1[1].u32[0] + (unint64_t)(v13 - 1);
          DWORD2(v334) = 0;
          *((float *)&v334 + 3) = v711;
          *(_OWORD *)(a1[2].i64[1] + 16 * v714) = v334;
          *(_DWORD *)(a1[1].i64[1] + 4 * v714) = v713;
          *(void *)(a1[2].i64[0] + 8 * v714) = v859;
          long long v351 = v334;
        }
        unint64_t v715 = a1[1].u32[0] + (unint64_t)v13;
        *(_OWORD *)(a1[2].i64[1] + 16 * v715) = v351;
        unsigned __int32 v164 = vmovn_s16((int16x8_t)v347).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v715) = v164;
        *(void *)(a1[2].i64[0] + 8 * v715) = v859;
        unint64_t v168 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v168) = v333;
        goto LABEL_50;
      }
      float32x4_t v761 = v825;
      if (v17)
      {
        float32x2_t v762 = vmul_f32(a5, a5);
        v762.i32[0] = vadd_f32(v762, (float32x2_t)vdup_lane_s32((int32x2_t)v762, 1)).u32[0];
        float32x2_t v763 = vrsqrte_f32((float32x2_t)v762.u32[0]);
        float32x2_t v764 = vmul_f32(v763, vrsqrts_f32((float32x2_t)v762.u32[0], vmul_f32(v763, v763)));
        float32x2_t v765 = vmul_n_f32(a5, vmul_f32(v764, vrsqrts_f32((float32x2_t)v762.u32[0], vmul_f32(v764, v764))).f32[0]);
        *(float32x2_t *)&long long v766 = vmls_lane_f32(v845, v765, v812, 0);
        *(float32x2_t *)&long long v767 = v820;
        *(float32x2_t *)&long long v768 = vmla_n_f32(v820, v765, v812.f32[0]);
        if (v16) {
          float v769 = v18;
        }
        else {
          float v769 = 1.0;
        }
        unint64_t v770 = a1[1].u32[0] + (unint64_t)(v13 - 10);
        DWORD2(v768) = 0;
        *((float *)&v768 + 3) = v769;
        v761.i32[3] = 1.0;
        float32x4_t v771 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        int16x8_t v772 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v761, (float32x4_t)0), v771));
        *(_OWORD *)(a1[2].i64[1] + 16 * v770) = v768;
        *(int16x4_t *)v772.i8 = vmovn_s32((int32x4_t)v772);
        unsigned __int32 v773 = vmovn_s16(v772).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v770) = v773;
        _D0 = __PAIR64__(1.0, v859);
        *(void *)(a1[2].i64[0] + 8 * v770) = __PAIR64__(1.0, v859);
        unint64_t v774 = a1[1].u32[0] + (unint64_t)(v13 - 9);
        DWORD2(v767) = 0;
        *((float *)&v767 + 3) = v769;
        float32x4_t v775 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v761, v866), v771));
        *(_OWORD *)(a1[2].i64[1] + 16 * v774) = v767;
        *(int16x4_t *)v775.f32 = vmovn_s32((int32x4_t)v775);
        v771.i32[0] = vmovn_s16((int16x8_t)v775).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v774) = v771.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v774) = __PAIR64__(1.0, v859);
        DWORD2(v225) = 0;
        unint64_t v776 = a1[1].u32[0] + (unint64_t)(v13 - 6);
        *((float *)&v225 + 3) = v769;
        *(_OWORD *)(a1[2].i64[1] + 16 * v776) = v225;
        *(_DWORD *)(a1[1].i64[1] + 4 * v776) = v771.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v776) = v859;
        DWORD2(v766) = 0;
        unint64_t v777 = a1[1].u32[0] + (unint64_t)(v13 - 5);
        *((float *)&v766 + 3) = v769;
        *(_OWORD *)(a1[2].i64[1] + 16 * v777) = v766;
        *(_DWORD *)(a1[1].i64[1] + 4 * v777) = v773;
        *(void *)(a1[2].i64[0] + 8 * v777) = v859;
        unint64_t v778 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        *(_OWORD *)(a1[2].i64[1] + 16 * v778) = v767;
        *(_DWORD *)(a1[1].i64[1] + 4 * v778) = v771.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v778) = __PAIR64__(1.0, v859);
        unint64_t v779 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v779) = v225;
        *(_DWORD *)(a1[1].i64[1] + 4 * v779) = v771.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v779) = v859;
        uint64_t v780 = a1[1].u32[0] + v13;
        *(_OWORD *)(a1[2].i64[1] + 16 * v780) = v767;
        *(_DWORD *)(a1[1].i64[1] + 4 * v780) = v771.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v780) = __PAIR64__(1.0, v859);
        unint64_t v781 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v78SKCNode::setFlags(this, 66, 1) = v768;
        *(_DWORD *)(a1[1].i64[1] + 4 * v78SKCNode::setFlags(this, 66, 1) = v773;
        *(void *)(a1[2].i64[0] + 8 * v78SKCNode::setFlags(this, 66, 1) = __PAIR64__(1.0, v859);
        unint64_t v782 = a1[1].u32[0] + (unint64_t)(v13 + 4);
        *(_OWORD *)(a1[2].i64[1] + 16 * v782) = v766;
        *(_DWORD *)(a1[1].i64[1] + 4 * v782) = v773;
        *(void *)(a1[2].i64[0] + 8 * v782) = v859;
        unint64_t v783 = a1[1].u32[0] + (unint64_t)(v13 + 5);
        *(_OWORD *)(a1[2].i64[1] + 16 * v783) = v225;
        *(_DWORD *)(a1[1].i64[1] + 4 * v783) = v771.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v783) = v859;
        LODWORD(v13) = v13 + 8;
      }
      else
      {
        if (v16) {
          float v792 = v18;
        }
        else {
          float v792 = 1.0;
        }
        *(float32x2_t *)&long long v767 = v820;
        DWORD2(v767) = 0;
        *((float *)&v767 + 3) = v792;
        unint64_t v793 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        v761.i32[3] = 1.0;
        float32x4_t v775 = vmulq_n_f32(v761, v866);
        *(_OWORD *)(a1[2].i64[1] + 16 * v793) = v767;
        *(int16x4_t *)v775.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v775, (float32x4_t)vdupq_n_s32(0x437F0000u))));
        unsigned __int32 v794 = vmovn_s16((int16x8_t)v775).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v793) = v794;
        _D0 = __PAIR64__(1.0, v859);
        *(void *)(a1[2].i64[0] + 8 * v793) = __PAIR64__(1.0, v859);
        unint64_t v795 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        DWORD2(v225) = 0;
        *((float *)&v225 + 3) = v792;
        *(_OWORD *)(a1[2].i64[1] + 16 * v795) = v225;
        *(_DWORD *)(a1[1].i64[1] + 4 * v795) = v794;
        *(void *)(a1[2].i64[0] + 8 * v795) = v859;
      }
      unint64_t v796 = a1[1].u32[0] + (unint64_t)v13;
      *(_OWORD *)(a1[2].i64[1] + 16 * v796) = v225;
      unsigned __int32 v758 = vmovn_s16((int16x8_t)v775).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v796) = v758;
      *(void *)(a1[2].i64[0] + 8 * v796) = v859;
      unint64_t v388 = a1[1].u32[0] + (unint64_t)(v13 + 1);
      *(_OWORD *)(a1[2].i64[1] + 16 * v388) = v767;
    }
    else
    {
      float32x2_t v876 = v80;
      float32x2_t v226 = vsub_f32(v80, (float32x2_t)v878.n128_u64[0]);
      float32x2_t v227 = v852;
      float32x2_t v228 = vsub_f32(v852, v845);
      BOOL v47 = sqrtf(vaddv_f32(vmul_f32(v228, v228))) <= sqrtf(v33);
      float32x2_t v229 = vsub_f32(v852, v79);
      float v230 = sqrtf(vaddv_f32(vmul_f32(v229, v229)));
      float v231 = sqrtf(v34);
      BOOL v232 = v47 && v230 <= v231;
      float32x2_t v233 = v852;
      if (!v232)
      {
        float32x2_t v227 = v78;
        float32x2_t v233 = v820;
      }
      float32x2_t v840 = v233;
      float32x2_t v847 = v226;
      float32x2_t v854 = v227;
      float32x2_t v883 = v79;
      float32x2_t v884 = vsub_f32(*(float32x2_t *)&v225, v79);
      float32x2_t v881 = (float32x2_t)v878.n128_u64[0];
      int32x2_t v882 = (int32x2_t)v226;
      v879.i32[0] = 0;
      HIDWORD(v894) = 0;
      sk_ray2::intersect(&v883, &v881, (float *)&v879, (float *)&v894 + 1);
      float v234 = a1[9].f32[3];
      float32x2_t v235 = vmul_f32(v847, v847);
      unsigned __int32 v236 = vadd_f32(v235, (float32x2_t)vdup_lane_s32((int32x2_t)v235, 1)).u32[0];
      if (sqrtf(vaddv_f32(v235)) > v234)
      {
        float32x2_t v237 = vsub_f32(vmla_n_f32(v883, v884, v879.f32[0]), (float32x2_t)v878.n128_u64[0]);
        float v238 = fmaxf(sqrtf(vaddv_f32(vmul_f32(v237, v237))), v234);
        float32x2_t v239 = vrsqrte_f32((float32x2_t)v236);
        float32x2_t v240 = vmul_f32(v239, vrsqrts_f32((float32x2_t)v236, vmul_f32(v239, v239)));
        float32x2_t v241 = vmul_n_f32(v847, vmul_f32(v240, vrsqrts_f32((float32x2_t)v236, vmul_f32(v240, v240))).f32[0]);
        float32x2_t v242 = vmla_n_f32((float32x2_t)v878.n128_u64[0], v241, v238);
        v241.f32[0] = -v847.f32[1];
        float32x2_t v881 = v242;
        int32x2_t v882 = vzip1_s32((int32x2_t)v241, (int32x2_t)v847);
        float32x2_t v879 = v242;
        float32x2_t v880 = vneg_f32((float32x2_t)v882);
        *(float32x2_t *)&long long v244 = sk_ray2::intersection(&v881, v885);
        float32x2_t v245 = (float32x2_t)vdup_lane_s32((int32x2_t)v812, 0);
        float32x2_t v246 = vsub_f32(*(float32x2_t *)&v244, (float32x2_t)v878.n128_u64[0]);
        float32x2_t v247 = vmul_f32(v246, v246);
        v247.i32[0] = vadd_f32(v247, (float32x2_t)vdup_lane_s32((int32x2_t)v247, 1)).u32[0];
        float32x2_t v248 = vrsqrte_f32((float32x2_t)v247.u32[0]);
        float32x2_t v249 = vmul_f32(v248, vrsqrts_f32((float32x2_t)v247.u32[0], vmul_f32(v248, v248)));
        float32x2_t v250 = vmla_n_f32(*(float32x2_t *)&v244, vmul_n_f32(v246, vmul_f32(v249, vrsqrts_f32((float32x2_t)v247.u32[0], vmul_f32(v249, v249))).f32[0]), v812.f32[0]);
        uint64_t v816 = v244;
        float32x2_t v822 = v250;
        if (v17)
        {
          *(float32x2_t *)&long long v251 = v840;
          float32x2_t v252 = vsub_f32(v840, (float32x2_t)v878.n128_u64[0]);
          float32x2_t v253 = vmul_f32(v252, v252);
          v253.i32[0] = vadd_f32(v253, (float32x2_t)vdup_lane_s32((int32x2_t)v253, 1)).u32[0];
          float32x2_t v254 = vrsqrte_f32((float32x2_t)v253.u32[0]);
          float32x2_t v255 = vmul_f32(v254, vrsqrts_f32((float32x2_t)v253.u32[0], vmul_f32(v254, v254)));
          *(float32x2_t *)&long long v256 = vmla_f32(v840, v245, vmul_n_f32(v252, vmul_f32(v255, vrsqrts_f32((float32x2_t)v253.u32[0], vmul_f32(v255, v255))).f32[0]));
          if (v16) {
            float v257 = v18;
          }
          else {
            float v257 = 1.0;
          }
          DWORD2(v256) = 0;
          *((float *)&v256 + 3) = v257;
          unint64_t v258 = a1[1].u32[0] + (unint64_t)(v13 - 10);
          float32x4_t v259 = v825;
          v259.i32[3] = 1.0;
          float32x4_t v243 = (float32x4_t)vdupq_n_s32(0x437F0000u);
          int16x8_t v260 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v259, (float32x4_t)0), v243));
          *(int16x4_t *)v260.i8 = vmovn_s32((int32x4_t)v260);
          *(_OWORD *)(a1[2].i64[1] + 16 * v258) = v256;
          v260.i32[0] = vmovn_s16(v260).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v258) = v260.i32[0];
          unint64_t v261 = __PAIR64__(1.0, v859);
          *(void *)(a1[2].i64[0] + 8 * v258) = __PAIR64__(1.0, v859);
          DWORD2(v25SKCNode::setFlags(this, 66, 1) = 0;
          *((float *)&v251 + 3) = v257;
          unint64_t v262 = a1[1].u32[0] + (unint64_t)(v13 - 9);
          float32x4_t v830 = v259;
          *(int16x4_t *)v243.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v259, v866), v243)));
          *(_OWORD *)(a1[2].i64[1] + 16 * v262) = v251;
          unsigned __int32 v263 = vmovn_s16((int16x8_t)v243).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v262) = v263;
          *(void *)(a1[2].i64[0] + 8 * v262) = __PAIR64__(1.0, v859);
          unint64_t v264 = a1[1].u32[0] + (unint64_t)(v13 - 6);
          DWORD2(v244) = 0;
          *((float *)&v244 + 3) = v257;
          *(_OWORD *)(a1[2].i64[1] + 16 * v264) = v244;
          *(_DWORD *)(a1[1].i64[1] + 4 * v264) = v263;
          *(void *)(a1[2].i64[0] + 8 * v264) = v859;
          *(float32x2_t *)&long long v265 = v250;
          DWORD2(v265) = 0;
          unint64_t v266 = a1[1].u32[0] + (unint64_t)(v13 - 5);
          float v877 = v257;
          *((float *)&v265 + 3) = v257;
          *(_OWORD *)(a1[2].i64[1] + 16 * v266) = v265;
          *(_DWORD *)(a1[1].i64[1] + 4 * v266) = v260.i32[0];
          uint64_t v859 = v859;
          *(void *)(a1[2].i64[0] + 8 * v266) = v859;
        }
        else
        {
          if (v16) {
            float v716 = v18;
          }
          else {
            float v716 = 1.0;
          }
          *(float32x2_t *)&long long v251 = v840;
          DWORD2(v25SKCNode::setFlags(this, 66, 1) = 0;
          float v877 = v716;
          *((float *)&v251 + 3) = v716;
          float32x4_t v717 = v825;
          v717.i32[3] = 1.0;
          float32x4_t v830 = v717;
          *(int16x4_t *)v243.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v717, v866), (float32x4_t)vdupq_n_s32(0x437F0000u))));
          unint64_t v261 = __PAIR64__(1.0, v859);
          uint64_t v859 = v859;
        }
        int16x8_t v844 = (int16x8_t)v243;
        unint64_t v851 = v261;
        unint64_t v718 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        *(_OWORD *)(a1[2].i64[1] + 16 * v718) = v251;
        unsigned __int32 v873 = vmovn_s16((int16x8_t)v243).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v718) = v873;
        *(void *)(a1[2].i64[0] + 8 * v718) = v261;
        *(float32x2_t *)&long long v719 = sk_ray2::intersection(&v881, v885);
        DWORD2(v719) = 0;
        unint64_t v720 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        *((float *)&v719 + 3) = v877;
        *(_OWORD *)(a1[2].i64[1] + 16 * v720) = v719;
        *(_DWORD *)(a1[1].i64[1] + 4 * v720) = v873;
        *(void *)(a1[2].i64[0] + 8 * v720) = v859;
        uint64_t v721 = a1[1].u32[0] + v13;
        *(float32x2_t *)&long long v719 = v854;
        DWORD2(v719) = 0;
        *((float *)&v719 + 3) = v877;
        long long v837 = v719;
        *(_OWORD *)(a1[2].i64[1] + 16 * v72SKCNode::setFlags(this, 66, 1) = v719;
        *(_DWORD *)(a1[1].i64[1] + 4 * v72SKCNode::setFlags(this, 66, 1) = v873;
        *(void *)(a1[2].i64[0] + 8 * v72SKCNode::setFlags(this, 66, 1) = v851;
        *(float32x2_t *)&long long v722 = sk_ray2::intersection(&v881, v885);
        unint64_t v723 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        DWORD2(v722) = 0;
        *((float *)&v722 + 3) = v877;
        *(_OWORD *)(a1[2].i64[1] + 16 * v723) = v722;
        *(_DWORD *)(a1[1].i64[1] + 4 * v723) = v873;
        *(void *)(a1[2].i64[0] + 8 * v723) = v859;
        *(float32x2_t *)&long long v724 = sk_ray2::intersection(&v879, &v886);
        unint64_t v725 = a1[1].u32[0] + (unint64_t)(v13 + 2);
        DWORD2(v724) = 0;
        *((float *)&v724 + 3) = v877;
        *(_OWORD *)(a1[2].i64[1] + 16 * v725) = v724;
        *(_DWORD *)(a1[1].i64[1] + 4 * v725) = v873;
        *(void *)(a1[2].i64[0] + 8 * v725) = v859;
        *(float32x2_t *)&long long v726 = sk_ray2::intersection(&v879, &v886);
        unint64_t v727 = a1[1].u32[0] + (unint64_t)(v13 + 3);
        DWORD2(v726) = 0;
        *((float *)&v726 + 3) = v877;
        *(_OWORD *)(a1[2].i64[1] + 16 * v727) = v726;
        *(_DWORD *)(a1[1].i64[1] + 4 * v727) = v873;
        *(void *)(a1[2].i64[0] + 8 * v727) = v859;
        *(float32x2_t *)&long long v728 = sk_ray2::intersection(&v879, &v886);
        if (v17)
        {
          float32x2_t v729 = vsub_f32(v854, (float32x2_t)v878.n128_u64[0]);
          float32x2_t v730 = vmul_f32(v729, v729);
          v730.i32[0] = vadd_f32(v730, (float32x2_t)vdup_lane_s32((int32x2_t)v730, 1)).u32[0];
          float32x2_t v731 = vrsqrte_f32((float32x2_t)v730.u32[0]);
          float32x2_t v732 = vmul_f32(v731, vrsqrts_f32((float32x2_t)v730.u32[0], vmul_f32(v731, v731)));
          v730.i32[0] = vmul_f32(v732, vrsqrts_f32((float32x2_t)v730.u32[0], vmul_f32(v732, v732))).u32[0];
          float32x2_t v733 = vsub_f32(*(float32x2_t *)&v728, (float32x2_t)v878.n128_u64[0]);
          float32x2_t v734 = vmul_f32(v733, v733);
          unsigned __int32 v735 = vadd_f32(v734, (float32x2_t)vdup_lane_s32((int32x2_t)v734, 1)).u32[0];
          float32x2_t v736 = vmul_n_f32(v729, v730.f32[0]);
          float32x2_t v737 = vrsqrte_f32((float32x2_t)v735);
          float32x2_t v738 = vmul_f32(v737, vrsqrts_f32((float32x2_t)v735, vmul_f32(v737, v737)));
          float32x2_t v739 = vmul_n_f32(v733, vmul_f32(v738, vrsqrts_f32((float32x2_t)v735, vmul_f32(v738, v738))).f32[0]);
          *(void *)&long long v740 = v816;
          *(float32x2_t *)&long long v741 = v822;
          DWORD2(v740) = 0;
          unint64_t v742 = a1[1].u32[0] + (unint64_t)(v13 + 4);
          *((float *)&v740 + 3) = v877;
          *(_OWORD *)(a1[2].i64[1] + 16 * v742) = v740;
          LODWORD(v740) = vmovn_s16(v844).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v742) = v740;
          *(void *)(a1[2].i64[0] + 8 * v742) = v859;
          DWORD2(v74SKCNode::setFlags(this, 66, 1) = 0;
          unint64_t v743 = a1[1].u32[0] + (unint64_t)(v13 + 5);
          *((float *)&v741 + 3) = v877;
          int16x8_t v744 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v830, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
          *(int16x4_t *)v744.i8 = vmovn_s32((int32x4_t)v744);
          *(_OWORD *)(a1[2].i64[1] + 16 * v743) = v741;
          v744.i32[0] = vmovn_s16(v744).u32[0];
          *(_DWORD *)(a1[1].i64[1] + 4 * v743) = v744.i32[0];
          *(float32x2_t *)&long long v745 = vmla_f32(*(float32x2_t *)&v728, v245, v739);
          *(void *)(a1[2].i64[0] + 8 * v743) = v859;
          unint64_t v746 = a1[1].u32[0] + (unint64_t)(v13 + 6);
          DWORD2(v745) = 0;
          *((float *)&v745 + 3) = v877;
          *(_OWORD *)(a1[2].i64[1] + 16 * v746) = v745;
          *(_DWORD *)(a1[1].i64[1] + 4 * v746) = v744.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v746) = v859;
          DWORD2(v728) = 0;
          unint64_t v747 = a1[1].u32[0] + (unint64_t)(v13 + 7);
          *((float *)&v728 + 3) = v877;
          *(_OWORD *)(a1[2].i64[1] + 16 * v747) = v728;
          *(_DWORD *)(a1[1].i64[1] + 4 * v747) = v740;
          *(void *)(a1[2].i64[0] + 8 * v747) = v859;
          unint64_t v748 = a1[1].u32[0] + (unint64_t)(v13 + 8);
          *(_OWORD *)(a1[2].i64[1] + 16 * v748) = v837;
          *(_DWORD *)(a1[1].i64[1] + 4 * v748) = v740;
          *(void *)(a1[2].i64[0] + 8 * v748) = v851;
          *(float32x2_t *)&long long v749 = vmla_f32(v854, v245, v736);
          unint64_t v750 = a1[1].u32[0] + (unint64_t)(v13 + 9);
          DWORD2(v749) = 0;
          *((float *)&v749 + 3) = v877;
          *(_OWORD *)(a1[2].i64[1] + 16 * v750) = v749;
          *(_DWORD *)(a1[1].i64[1] + 4 * v750) = v744.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v750) = v851;
          unint64_t v751 = a1[1].u32[0] + (unint64_t)(v13 + 12);
          *(_OWORD *)(a1[2].i64[1] + 16 * v75SKCNode::setFlags(this, 66, 1) = v745;
          *(_DWORD *)(a1[1].i64[1] + 4 * v75SKCNode::setFlags(this, 66, 1) = v744.i32[0];
          *(void *)(a1[2].i64[0] + 8 * v75SKCNode::setFlags(this, 66, 1) = v859;
          unint64_t v752 = a1[1].u32[0] + (unint64_t)(v13 + 13);
          *(_OWORD *)(a1[2].i64[1] + 16 * v752) = v728;
          *(_DWORD *)(a1[1].i64[1] + 4 * v752) = v740;
          *(void *)(a1[2].i64[0] + 8 * v752) = v859;
          LODWORD(v13) = v13 + 16;
        }
        else
        {
          LODWORD(v13) = v13 + 4;
        }
        *(float32x2_t *)&long long v759 = sk_ray2::intersection(&v879, &v886);
        unint64_t v760 = a1[1].u32[0] + (unint64_t)v13;
        DWORD2(v759) = 0;
        *((float *)&v759 + 3) = v877;
        *(_OWORD *)(a1[2].i64[1] + 16 * v760) = v759;
        LODWORD(v759) = vmovn_s16(v844).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v760) = v759;
        *(void *)(a1[2].i64[0] + 8 * v760) = v859;
        unint64_t v388 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v388) = v837;
        *(_DWORD *)(a1[1].i64[1] + 4 * v388) = v759;
        uint64_t v390 = a1[2].i64[0];
        _D0 = v851;
        goto LABEL_124;
      }
      float32x4_t v513 = v825;
      if (v17)
      {
        float32x2_t v514 = vrsqrte_f32((float32x2_t)v236);
        float32x2_t v515 = vmul_f32(v514, vrsqrts_f32((float32x2_t)v236, vmul_f32(v514, v514)));
        LODWORD(v516) = vmul_f32(v515, vrsqrts_f32((float32x2_t)v236, vmul_f32(v515, v515))).u32[0];
        *(float32x2_t *)&long long v517 = v876;
        *(float32x2_t *)&long long v518 = v840;
        float32x2_t v519 = vsub_f32(v840, (float32x2_t)v878.n128_u64[0]);
        float32x2_t v520 = vmul_f32(v519, v519);
        v520.i32[0] = vadd_f32(v520, (float32x2_t)vdup_lane_s32((int32x2_t)v520, 1)).u32[0];
        float32x2_t v521 = vrsqrte_f32((float32x2_t)v520.u32[0]);
        float32x2_t v522 = vmul_f32(v521, vrsqrts_f32((float32x2_t)v520.u32[0], vmul_f32(v521, v521)));
        *(float32x2_t *)&long long v523 = vmla_n_f32(v840, vmul_n_f32(v519, vmul_f32(v522, vrsqrts_f32((float32x2_t)v520.u32[0], vmul_f32(v522, v522))).f32[0]), v812.f32[0]);
        if (v16) {
          float v524 = v18;
        }
        else {
          float v524 = 1.0;
        }
        DWORD2(v523) = 0;
        unint64_t v525 = a1[1].u32[0] + (unint64_t)(v13 - 10);
        *((float *)&v523 + 3) = v524;
        v513.i32[3] = 1.0;
        *(_OWORD *)(a1[2].i64[1] + 16 * v525) = v523;
        _D0 = __PAIR64__(1.0, v859);
        float32x4_t v526 = vmulq_n_f32(v513, v866);
        float32x4_t v527 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        int16x8_t v528 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v513, (float32x4_t)0), v527));
        *(int16x4_t *)v528.i8 = vmovn_s32((int32x4_t)v528);
        unsigned __int32 v529 = vmovn_s16(v528).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v525) = v529;
        *(void *)(a1[2].i64[0] + 8 * v525) = __PAIR64__(1.0, v859);
        unint64_t v530 = a1[1].u32[0] + (unint64_t)(v13 - 9);
        DWORD2(v518) = 0;
        *((float *)&v518 + 3) = v524;
        float32x4_t v531 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(v526, v527));
        *(int16x4_t *)v531.f32 = vmovn_s32((int32x4_t)v531);
        *(_OWORD *)(a1[2].i64[1] + 16 * v530) = v518;
        v526.i32[0] = vmovn_s16((int16x8_t)v531).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v530) = v526.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v530) = __PAIR64__(1.0, v859);
        unint64_t v532 = a1[1].u32[0] + (unint64_t)(v13 - 6);
        DWORD2(v517) = 0;
        *((float *)&v517 + 3) = v524;
        *(_OWORD *)(a1[2].i64[1] + 16 * v532) = v517;
        *(_DWORD *)(a1[1].i64[1] + 4 * v532) = v526.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v532) = v859;
        *(float32x2_t *)&long long v533 = vmla_n_f32(v876, vmul_n_f32(v847, v516), v812.f32[0]);
        unint64_t v534 = a1[1].u32[0] + (unint64_t)(v13 - 5);
        DWORD2(v533) = 0;
        *((float *)&v533 + 3) = v524;
        *(_OWORD *)(a1[2].i64[1] + 16 * v534) = v533;
        *(_DWORD *)(a1[1].i64[1] + 4 * v534) = v529;
        *(void *)(a1[2].i64[0] + 8 * v534) = v859;
        unint64_t v535 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        *(_OWORD *)(a1[2].i64[1] + 16 * v535) = v518;
        *(_DWORD *)(a1[1].i64[1] + 4 * v535) = v526.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v535) = __PAIR64__(1.0, v859);
        unint64_t v536 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v536) = v517;
        *(_DWORD *)(a1[1].i64[1] + 4 * v536) = v526.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v536) = v859;
        *(float32x2_t *)&long long v541 = v854;
        float32x2_t v537 = vsub_f32(v854, (float32x2_t)v878.n128_u64[0]);
        *(float32x2_t *)v527.f32 = vmul_f32(v537, v537);
        v527.i32[0] = vadd_f32(*(float32x2_t *)v527.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v527.f32, 1)).u32[0];
        float32x2_t v538 = vrsqrte_f32((float32x2_t)v527.u32[0]);
        float32x2_t v539 = vmul_f32(v538, vrsqrts_f32((float32x2_t)v527.u32[0], vmul_f32(v538, v538)));
        DWORD2(v54SKCNode::setFlags(this, 66, 1) = 0;
        uint64_t v540 = a1[1].u32[0] + v13;
        *((float *)&v541 + 3) = v524;
        *(_OWORD *)(a1[2].i64[1] + 16 * v540) = v541;
        *(_DWORD *)(a1[1].i64[1] + 4 * v540) = v526.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v540) = __PAIR64__(1.0, v859);
        *(float32x2_t *)v527.f32 = vmla_n_f32(v854, vmul_n_f32(v537, vmul_f32(v539, vrsqrts_f32((float32x2_t)v527.u32[0], vmul_f32(v539, v539))).f32[0]), v812.f32[0]);
        unint64_t v542 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        v527.i32[2] = 0;
        v527.f32[3] = v524;
        *(float32x4_t *)(a1[2].i64[1] + 16 * v542) = v527;
        *(_DWORD *)(a1[1].i64[1] + 4 * v542) = v529;
        *(void *)(a1[2].i64[0] + 8 * v542) = __PAIR64__(1.0, v859);
        unint64_t v543 = a1[1].u32[0] + (unint64_t)(v13 + 4);
        *(_OWORD *)(a1[2].i64[1] + 16 * v543) = v533;
        *(_DWORD *)(a1[1].i64[1] + 4 * v543) = v529;
        *(void *)(a1[2].i64[0] + 8 * v543) = v859;
        unint64_t v544 = a1[1].u32[0] + (unint64_t)(v13 + 5);
        *(_OWORD *)(a1[2].i64[1] + 16 * v544) = v517;
        *(_DWORD *)(a1[1].i64[1] + 4 * v544) = v526.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v544) = v859;
        LODWORD(v13) = v13 + 8;
      }
      else
      {
        if (v16) {
          float v753 = v18;
        }
        else {
          float v753 = 1.0;
        }
        unint64_t v754 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        *(float32x2_t *)&long long v755 = v840;
        DWORD2(v755) = 0;
        *((float *)&v755 + 3) = v753;
        v513.i32[3] = 1.0;
        float32x4_t v531 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        *(int16x4_t *)v531.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v513, v866), v531)));
        *(_OWORD *)(a1[2].i64[1] + 16 * v754) = v755;
        LODWORD(v755) = vmovn_s16((int16x8_t)v531).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v754) = v755;
        _D0 = __PAIR64__(1.0, v859);
        *(void *)(a1[2].i64[0] + 8 * v754) = __PAIR64__(1.0, v859);
        *(float32x2_t *)&long long v517 = v876;
        DWORD2(v517) = 0;
        unint64_t v756 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        *((float *)&v517 + 3) = v753;
        *(_OWORD *)(a1[2].i64[1] + 16 * v756) = v517;
        *(_DWORD *)(a1[1].i64[1] + 4 * v756) = v755;
        *(void *)(a1[2].i64[0] + 8 * v756) = v859;
        *(float32x2_t *)&long long v541 = v854;
        DWORD2(v54SKCNode::setFlags(this, 66, 1) = 0;
        *((float *)&v541 + 3) = v753;
      }
      unint64_t v757 = a1[1].u32[0] + (unint64_t)v13;
      *(_OWORD *)(a1[2].i64[1] + 16 * v757) = v517;
      unsigned __int32 v758 = vmovn_s16((int16x8_t)v531).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v757) = v758;
      *(void *)(a1[2].i64[0] + 8 * v757) = v859;
      unint64_t v388 = a1[1].u32[0] + (unint64_t)(v13 + 1);
      *(_OWORD *)(a1[2].i64[1] + 16 * v388) = v541;
    }
    *(_DWORD *)(a1[1].i64[1] + 4 * v388) = v758;
LABEL_123:
    uint64_t v390 = a1[2].i64[0];
LABEL_124:
    *(void *)(v390 + 8 * v388) = _D0;
    goto LABEL_184;
  }
  float v36 = a1[10].f32[0];
  if (v35 == 1)
  {
    float v122 = vmlas_n_f32((float)-*((float *)&a7 + 1) * *(float *)&a4, *((float *)&a4 + 1), *(float *)&a7);
    if (v122 > 0.0)
    {
      float v853 = a1[12].f32[2];
      float v860 = a1[12].f32[3];
      float v868 = a1[12].f32[0];
      float v813 = a1[9].f32[2];
      float32x4_t v827 = a1[11];
      double v123 = COERCE_DOUBLE(vsub_f32((float32x2_t)a9.n128_u64[0], *(float32x2_t *)&a8));
      double v892 = v123;
      float32x2_t v893 = vneg_f32(*(float32x2_t *)&a7);
      double v124 = COERCE_DOUBLE(vsub_f32((float32x2_t)a9.n128_u64[0], a5));
      double v890 = v124;
      double v891 = a4;
      v886.i32[0] = 0;
      v885[0].i32[0] = 0;
      sk_ray2::intersect((float32x2_t *)&v892, (float32x2_t *)&v890, (float *)&v886, (float *)v885);
      double v126 = COERCE_DOUBLE(vmla_n_f32(*(float32x2_t *)&v892, v893, v886.f32[0]));
      float32x2_t v127 = vsub_f32(*(float32x2_t *)&v126, *(float32x2_t *)&v124);
      BOOL v47 = sqrtf(vaddv_f32(vmul_f32(v127, v127))) <= sqrtf(v33);
      float32x2_t v128 = vsub_f32(*(float32x2_t *)&v126, *(float32x2_t *)&v123);
      float v129 = sqrtf(vaddv_f32(vmul_f32(v128, v128)));
      float v130 = sqrtf(v34);
      BOOL v131 = v47 && v129 <= v130;
      if (v131) {
        *(double *)&long long v132 = v126;
      }
      else {
        *(double *)&long long v132 = v123;
      }
      if (v131) {
        *(double *)&long long v133 = v126;
      }
      else {
        *(double *)&long long v133 = v124;
      }
      *(float *)&uint64_t v134 = v860;
      float32x2_t v135 = vsub_f32(*(float32x2_t *)&v133, (float32x2_t)v878.n128_u64[0]);
      float v136 = v860 - fabsf(vaddv_f32(vmul_f32(v23, v135)) / v36);
      float32x2_t v137 = vsub_f32(*(float32x2_t *)&v132, (float32x2_t)v878.n128_u64[0]);
      float v138 = v860 + fabsf(vaddv_f32(vmul_f32(v29, v137)) / v36);
      *(float32x2_t *)&long long v139 = vadd_f32(a5, (float32x2_t)v878.n128_u64[0]);
      if (v17)
      {
        float32x2_t v140 = vmul_f32(a5, a5);
        v140.i32[0] = vadd_f32(v140, (float32x2_t)vdup_lane_s32((int32x2_t)v140, 1)).u32[0];
        float32x2_t v141 = vrsqrte_f32((float32x2_t)v140.u32[0]);
        float32x2_t v142 = vmul_f32(v141, vrsqrts_f32((float32x2_t)v140.u32[0], vmul_f32(v141, v141)));
        float32x2_t v143 = vmul_n_f32(a5, vmul_f32(v142, vrsqrts_f32((float32x2_t)v140.u32[0], vmul_f32(v142, v142))).f32[0]);
        *(float32x2_t *)&long long v144 = vmla_n_f32(*(float32x2_t *)&v139, v143, v813);
        float32x2_t v145 = vmul_f32(v135, v135);
        v145.i32[0] = vadd_f32(v145, (float32x2_t)vdup_lane_s32((int32x2_t)v145, 1)).u32[0];
        float32x2_t v146 = vrsqrte_f32((float32x2_t)v145.u32[0]);
        float32x2_t v147 = vmul_f32(v146, vrsqrts_f32((float32x2_t)v145.u32[0], vmul_f32(v146, v146)));
        float32x2_t v148 = vmul_n_f32(v135, vmul_f32(v147, vrsqrts_f32((float32x2_t)v145.u32[0], vmul_f32(v147, v147))).f32[0]);
        if (v16) {
          float v149 = v853;
        }
        else {
          float v149 = 1.0;
        }
        unint64_t v150 = a1[1].u32[0] + (unint64_t)(v13 - 10);
        DWORD2(v144) = 0;
        *((float *)&v144 + 3) = v149;
        float32x4_t v151 = v827;
        v151.i32[3] = 1.0;
        float32x4_t v152 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        _Q16 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v151, (float32x4_t)0), v152));
        *(int16x4_t *)_Q16.i8 = vmovn_s32((int32x4_t)_Q16);
        *(_OWORD *)(a1[2].i64[1] + 16 * v150) = v144;
        unsigned __int32 v154 = vmovn_s16(_Q16).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v150) = v154;
        __asm { FMOV            V16.2S, #1.0 }
        *(float *)_Q16.i32 = v860;
        *(void *)(a1[2].i64[0] + 8 * v150) = _Q16.i64[0];
        unint64_t v155 = a1[1].u32[0] + (unint64_t)(v13 - 9);
        DWORD2(v139) = 0;
        *((float *)&v139 + 3) = v149;
        float32x4_t v828 = v151;
        float32x4_t v125 = vmulq_n_f32(v151, v868);
        *(int16x4_t *)v125.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v125, v152)));
        *(_OWORD *)(a1[2].i64[1] + 16 * v155) = v139;
        v152.i32[0] = vmovn_s16((int16x8_t)v125).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v155) = v152.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v155) = _Q16.i64[0];
        *(float32x2_t *)&long long v156 = vmla_n_f32(*(float32x2_t *)&v133, v148, v813);
        unint64_t v157 = a1[1].u32[0] + (unint64_t)(v13 - 6);
        DWORD2(v133) = 0;
        *((float *)&v133 + 3) = v149;
        *(_OWORD *)(a1[2].i64[1] + 16 * v157) = v133;
        *(_DWORD *)(a1[1].i64[1] + 4 * v157) = v152.i32[0];
        uint64_t v158 = LODWORD(v136);
        *(void *)(a1[2].i64[0] + 8 * v157) = LODWORD(v136);
        DWORD2(v156) = 0;
        unint64_t v159 = a1[1].u32[0] + (unint64_t)(v13 - 5);
        *((float *)&v156 + 3) = v149;
        *(_OWORD *)(a1[2].i64[1] + 16 * v159) = v156;
        *(_DWORD *)(a1[1].i64[1] + 4 * v159) = v154;
        *(void *)(a1[2].i64[0] + 8 * v159) = LODWORD(v136);
      }
      else
      {
        if (v16) {
          float v149 = v853;
        }
        else {
          float v149 = 1.0;
        }
        DWORD2(v139) = 0;
        *((float *)&v139 + 3) = v149;
        float32x4_t v391 = v827;
        v391.i32[3] = 1.0;
        float32x4_t v828 = v391;
        int32x4_t v392 = vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v391, v868), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        DWORD2(v133) = 0;
        *((float *)&v133 + 3) = v149;
        uint64_t v158 = LODWORD(v136);
        float32x2_t v393 = vmul_f32(a5, a5);
        *(int16x4_t *)v125.f32 = vmovn_s32(v392);
        v392.i32[0] = vadd_f32(v393, (float32x2_t)vdup_lane_s32((int32x2_t)v393, 1)).u32[0];
        float32x2_t v394 = vrsqrte_f32((float32x2_t)v392.u32[0]);
        float32x2_t v395 = vmul_f32(v394, vrsqrts_f32((float32x2_t)v392.u32[0], vmul_f32(v394, v394)));
        float32x2_t v143 = vmul_n_f32(a5, vmul_f32(v395, vrsqrts_f32((float32x2_t)v392.u32[0], vmul_f32(v395, v395))).f32[0]);
      }
      int16x8_t v809 = (int16x8_t)v125;
      unint64_t v396 = a1[1].u32[0] + (unint64_t)(v13 - 2);
      *(_OWORD *)(a1[2].i64[1] + 16 * v396) = v139;
      unsigned __int32 v397 = vmovn_s16((int16x8_t)v125).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v396) = v397;
      unint64_t v398 = __PAIR64__(1.0, LODWORD(v860));
      *(void *)(a1[2].i64[0] + 8 * v396) = __PAIR64__(1.0, LODWORD(v860));
      unint64_t v399 = a1[1].u32[0] + (unint64_t)(v13 - 1);
      *(_OWORD *)(a1[2].i64[1] + 16 * v399) = v133;
      *(_DWORD *)(a1[1].i64[1] + 4 * v399) = v397;
      *(void *)(a1[2].i64[0] + 8 * v399) = v158;
      *(void *)&long long v400 = v878.n128_u64[0];
      DWORD2(v400) = 0;
      uint64_t v401 = a1[1].u32[0] + v13;
      *((float *)&v400 + 3) = v149;
      *(_OWORD *)(a1[2].i64[1] + 16 * v40SKCNode::setFlags(this, 66, 1) = v400;
      *(_DWORD *)(a1[1].i64[1] + 4 * v40SKCNode::setFlags(this, 66, 1) = v397;
      HIDWORD(v134) = 0.5;
      *(void *)(a1[2].i64[0] + 8 * v40SKCNode::setFlags(this, 66, 1) = v134;
      unint64_t v402 = a1[1].u32[0] + (unint64_t)(v13 + 1);
      *(_OWORD *)(a1[2].i64[1] + 16 * v402) = v133;
      *(_DWORD *)(a1[1].i64[1] + 4 * v402) = v397;
      *(void *)(a1[2].i64[0] + 8 * v402) = v158;
      unint64_t v403 = a1[1].u32[0] + (unint64_t)(v13 + 2);
      *(_OWORD *)(a1[2].i64[1] + 16 * v403) = v139;
      *(_DWORD *)(a1[1].i64[1] + 4 * v403) = v397;
      *(void *)(a1[2].i64[0] + 8 * v403) = __PAIR64__(1.0, LODWORD(v860));
      unint64_t v404 = a1[1].u32[0] + (unint64_t)(v13 + 3);
      *(_OWORD *)(a1[2].i64[1] + 16 * v404) = v139;
      *(_DWORD *)(a1[1].i64[1] + 4 * v404) = v397;
      *(void *)(a1[2].i64[0] + 8 * v404) = __PAIR64__(1.0, LODWORD(v860));
      unint64_t v405 = a1[1].u32[0] + (unint64_t)(v13 + 4);
      long long v841 = v400;
      *(_OWORD *)(a1[2].i64[1] + 16 * v405) = v400;
      *(_DWORD *)(a1[1].i64[1] + 4 * v405) = v397;
      uint64_t v863 = v134;
      *(void *)(a1[2].i64[0] + 8 * v405) = v134;
      unint64_t v406 = a1[1].u32[0] + (unint64_t)(v13 + 5);
      float32x2_t v801 = (float32x2_t)v132;
      DWORD2(v132) = 0;
      *((float *)&v132 + 3) = v149;
      *(_OWORD *)(a1[2].i64[1] + 16 * v406) = v132;
      *(_DWORD *)(a1[1].i64[1] + 4 * v406) = v397;
      uint64_t v805 = LODWORD(v138);
      long long v807 = v132;
      *(void *)(a1[2].i64[0] + 8 * v406) = LODWORD(v138);
      *(float32x2_t *)&long long v407 = vadd_f32(*(float32x2_t *)&a8, (float32x2_t)v878.n128_u64[0]);
      float32x2_t v799 = (float32x2_t)v407;
      DWORD2(v407) = 0;
      unint64_t v408 = a1[1].u32[0] + (unint64_t)(v13 + 6);
      float v848 = v149;
      unint64_t v856 = v398;
      *((float *)&v407 + 3) = v149;
      *(_OWORD *)(a1[2].i64[1] + 16 * v408) = v407;
      *(_DWORD *)(a1[1].i64[1] + 4 * v408) = v397;
      *(void *)(a1[2].i64[0] + 8 * v408) = v398;
      unint64_t v409 = a1[1].u32[0] + (unint64_t)(v13 + 7);
      long long v803 = v407;
      *(_OWORD *)(a1[2].i64[1] + 16 * v409) = v407;
      *(_DWORD *)(a1[1].i64[1] + 4 * v409) = v397;
      *(void *)(a1[2].i64[0] + 8 * v409) = v398;
      LODWORD(v13) = v13 + 8;
      *(float32x2_t *)&long long v407 = vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8);
      LODWORD(v407) = vadd_f32(*(float32x2_t *)&v407, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v407, 1)).u32[0];
      float32x2_t v410 = vrsqrte_f32((float32x2_t)v407);
      float32x2_t v411 = vmul_f32(v410, vrsqrts_f32((float32x2_t)v407, vmul_f32(v410, v410)));
      float32x2_t v412 = vmul_n_f32(*(float32x2_t *)&a8, vmul_f32(v411, vrsqrts_f32((float32x2_t)v407, vmul_f32(v411, v411))).f32[0]);
      float v413 = acosf(vaddv_f32(vmul_f32(v412, v143)));
      float v414 = (float)(a1[9].f32[0] + (float)(a1[9].f32[2] * 2.0)) * 0.14;
      int v415 = (int)((float)((float)(ceilf(v414) * 2.0) + 1.0) * (v413 / 3.14159265) + 1.0);
      if (v415 >= 1)
      {
        int v416 = 0;
        float v417 = (float)v415;
        float v418 = -*((float *)&a8 + 1);
        int16x8_t v419 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v828, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        *(int16x4_t *)v419.i8 = vmovn_s32((int32x4_t)v419);
        unsigned __int32 v834 = vmovn_s16(v809).u32[0];
        unsigned __int32 v817 = vmovn_s16(v419).u32[0];
        do
        {
          __float2 v420 = __sincosf_stret((float)(v413 * (float)v416) / v417);
          v421.f32[0] = (float)(v420.__sinval * v418) + (float)(*(float *)&a8 * v420.__cosval);
          v421.f32[1] = (float)(*((float *)&a8 + 1) * v420.__cosval) + (float)(*(float *)&a8 * v420.__sinval);
          float32x2_t v871 = vadd_f32(v421, (float32x2_t)v878.n128_u64[0]);
          __float2 v422 = __sincosf_stret((float)(v413 * (float)++v416) / v417);
          v423.f32[0] = (float)(v422.__sinval * v418) + (float)(*(float *)&a8 * v422.__cosval);
          v423.f32[1] = (float)(*((float *)&a8 + 1) * v422.__cosval) + (float)(*(float *)&a8 * v422.__sinval);
          unint64_t v424 = a1[1].u32[0] + (unint64_t)v13;
          *(float32x2_t *)&long long v425 = v871;
          DWORD2(v425) = 0;
          *((float *)&v425 + 3) = v848;
          *(_OWORD *)(a1[2].i64[1] + 16 * v424) = v425;
          *(_DWORD *)(a1[1].i64[1] + 4 * v424) = v834;
          float32x2_t v426 = vadd_f32(v423, (float32x2_t)v878.n128_u64[0]);
          *(void *)(a1[2].i64[0] + 8 * v424) = v856;
          unint64_t v427 = a1[1].u32[0] + (unint64_t)(v13 + 1);
          *(float32x2_t *)&long long v428 = v426;
          *((void *)&v428 + SKCNode::setFlags(this, 66, 1) = __PAIR64__(LODWORD(v848), 0);
          *(_OWORD *)(a1[2].i64[1] + 16 * v427) = v428;
          *(_DWORD *)(a1[1].i64[1] + 4 * v427) = v834;
          *(void *)(a1[2].i64[0] + 8 * v427) = v856;
          unint64_t v429 = a1[1].u32[0] + (unint64_t)(v13 + 2);
          *(_OWORD *)(a1[2].i64[1] + 16 * v429) = v841;
          *(_DWORD *)(a1[1].i64[1] + 4 * v429) = v834;
          *(void *)(a1[2].i64[0] + 8 * v429) = v863;
          unint64_t v430 = a1[1].u32[0] + (unint64_t)(v13 + 3);
          *(_OWORD *)(a1[2].i64[1] + 16 * v430) = v841;
          *(_DWORD *)(a1[1].i64[1] + 4 * v430) = v834;
          *(void *)(a1[2].i64[0] + 8 * v430) = v863;
          if (a1[9].i8[4])
          {
            float32x2_t v431 = vsub_f32(v871, (float32x2_t)v878.n128_u64[0]);
            float32x2_t v432 = vmul_f32(v431, v431);
            v432.i32[0] = vadd_f32(v432, (float32x2_t)vdup_lane_s32((int32x2_t)v432, 1)).u32[0];
            float32x2_t v433 = vrsqrte_f32((float32x2_t)v432.u32[0]);
            float32x2_t v434 = vmul_f32(v433, vrsqrts_f32((float32x2_t)v432.u32[0], vmul_f32(v433, v433)));
            float32x2_t v435 = vmul_n_f32(v431, vmul_f32(v434, vrsqrts_f32((float32x2_t)v432.u32[0], vmul_f32(v434, v434))).f32[0]);
            float32x2_t v436 = vsub_f32(v426, (float32x2_t)v878.n128_u64[0]);
            float32x2_t v437 = vmul_f32(v436, v436);
            v437.i32[0] = vadd_f32(v437, (float32x2_t)vdup_lane_s32((int32x2_t)v437, 1)).u32[0];
            float32x2_t v438 = vrsqrte_f32((float32x2_t)v437.u32[0]);
            float32x2_t v439 = vmul_f32(v438, vrsqrts_f32((float32x2_t)v437.u32[0], vmul_f32(v438, v438)));
            float v440 = a1[9].f32[2];
            *(float32x2_t *)&long long v441 = vmla_n_f32(v426, vmul_n_f32(v436, vmul_f32(v439, vrsqrts_f32((float32x2_t)v437.u32[0], vmul_f32(v439, v439))).f32[0]), v440);
            unint64_t v442 = a1[1].u32[0] + (unint64_t)(v13 + 4);
            *(_OWORD *)(a1[2].i64[1] + 16 * v442) = v425;
            *(_DWORD *)(a1[1].i64[1] + 4 * v442) = v834;
            *(void *)(a1[2].i64[0] + 8 * v442) = v856;
            unint64_t v443 = a1[1].u32[0] + (unint64_t)(v13 + 5);
            *(_OWORD *)(a1[2].i64[1] + 16 * v443) = v428;
            *(_DWORD *)(a1[1].i64[1] + 4 * v443) = v834;
            *(void *)(a1[2].i64[0] + 8 * v443) = v856;
            DWORD2(v44SKCNode::setFlags(this, 66, 1) = 0;
            unint64_t v444 = a1[1].u32[0] + (unint64_t)(v13 + 6);
            *((float *)&v441 + 3) = v848;
            *(_OWORD *)(a1[2].i64[1] + 16 * v444) = v441;
            *(_DWORD *)(a1[1].i64[1] + 4 * v444) = v817;
            *(void *)(a1[2].i64[0] + 8 * v444) = v856;
            *(float32x2_t *)&long long v445 = vmla_n_f32(v871, v435, v440);
            unint64_t v446 = a1[1].u32[0] + (unint64_t)(v13 + 7);
            DWORD2(v445) = 0;
            *((float *)&v445 + 3) = v848;
            *(_OWORD *)(a1[2].i64[1] + 16 * v446) = v445;
            *(_DWORD *)(a1[1].i64[1] + 4 * v446) = v817;
            *(void *)(a1[2].i64[0] + 8 * v446) = v856;
            LODWORD(v13) = v13 + 8;
          }
          else
          {
            LODWORD(v13) = v13 + 4;
          }
        }
        while (v415 != v416);
      }
      if (v17)
      {
        *(float32x2_t *)&long long v447 = vmla_n_f32(v799, v412, v813);
        float32x2_t v448 = vmul_f32(v137, v137);
        v448.i32[0] = vadd_f32(v448, (float32x2_t)vdup_lane_s32((int32x2_t)v448, 1)).u32[0];
        float32x2_t v449 = vrsqrte_f32((float32x2_t)v448.u32[0]);
        float32x2_t v450 = vmul_f32(v449, vrsqrts_f32((float32x2_t)v448.u32[0], vmul_f32(v449, v449)));
        float32x2_t v451 = vmul_n_f32(v137, vmul_f32(v450, vrsqrts_f32((float32x2_t)v448.u32[0], vmul_f32(v450, v450))).f32[0]);
        unint64_t v452 = a1[1].u32[0] + (unint64_t)v13;
        long long v453 = v803;
        *(_OWORD *)(a1[2].i64[1] + 16 * v452) = v803;
        int16x8_t v454 = v809;
        v450.i32[0] = vmovn_s16(v809).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v452) = v450.i32[0];
        unint64_t v455 = v856;
        *(void *)(a1[2].i64[0] + 8 * v452) = v856;
        unint64_t v456 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        DWORD2(v447) = 0;
        *((float *)&v447 + 3) = v848;
        int16x8_t v457 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v828, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        *(int16x4_t *)v457.i8 = vmovn_s32((int32x4_t)v457);
        *(_OWORD *)(a1[2].i64[1] + 16 * v456) = v447;
        v457.i32[0] = vmovn_s16(v457).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v456) = v457.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v456) = v856;
        *(float32x2_t *)&long long v458 = vmla_n_f32(v801, v451, v813);
        unint64_t v459 = a1[1].u32[0] + (unint64_t)(v13 + 4);
        DWORD2(v458) = 0;
        *((float *)&v458 + 3) = v848;
        *(_OWORD *)(a1[2].i64[1] + 16 * v459) = v458;
        *(_DWORD *)(a1[1].i64[1] + 4 * v459) = v457.i32[0];
        uint64_t v461 = v805;
        long long v460 = v807;
        *(void *)(a1[2].i64[0] + 8 * v459) = v805;
        unint64_t v462 = a1[1].u32[0] + (unint64_t)(v13 + 5);
        *(_OWORD *)(a1[2].i64[1] + 16 * v462) = v807;
        *(_DWORD *)(a1[1].i64[1] + 4 * v462) = v450.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v462) = v805;
        LODWORD(v13) = v13 + 8;
      }
      else
      {
        long long v460 = v807;
        int16x8_t v454 = v809;
        unint64_t v455 = v856;
        long long v453 = v803;
        uint64_t v461 = v805;
      }
      unint64_t v510 = a1[1].u32[0] + (unint64_t)v13;
      *(_OWORD *)(a1[2].i64[1] + 16 * v510) = v460;
      unsigned __int32 v511 = vmovn_s16(v454).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v510) = v511;
      *(void *)(a1[2].i64[0] + 8 * v510) = v461;
      unint64_t v512 = a1[1].u32[0] + (unint64_t)(v13 + 1);
      *(_OWORD *)(a1[2].i64[1] + 16 * v512) = v453;
      *(_DWORD *)(a1[1].i64[1] + 4 * v512) = v511;
      *(void *)(a1[2].i64[0] + 8 * v512) = v455;
      goto LABEL_184;
    }
    if (v122 >= 0.0)
    {
      if (v31) {
        BOOL v360 = 0;
      }
      else {
        BOOL v360 = (v30.i32[1] & 0x60000000) == 0;
      }
      if (v360)
      {
        *(float32x2_t *)&long long v784 = vadd_f32(a5, (float32x2_t)a9.n128_u64[0]);
        if (a1[9].i8[5]) {
          float v785 = a1[12].f32[2];
        }
        else {
          float v785 = 1.0;
        }
        DWORD2(v784) = 0;
        *((float *)&v784 + 3) = v785;
        v15.i32[3] = 1.0;
        unint64_t v786 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        int16x8_t v787 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v15, v14), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        *(int16x4_t *)v787.i8 = vmovn_s32((int32x4_t)v787);
        *(_OWORD *)(a1[2].i64[1] + 16 * v786) = v784;
        v787.i32[0] = vmovn_s16(v787).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v786) = v787.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v786) = __PAIR64__(1.0, v9);
        *(float32x2_t *)&long long v788 = vsub_f32((float32x2_t)a9.n128_u64[0], a5);
        unint64_t v789 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        DWORD2(v788) = 0;
        *((float *)&v788 + 3) = v785;
        *(_OWORD *)(a1[2].i64[1] + 16 * v789) = v788;
        *(_DWORD *)(a1[1].i64[1] + 4 * v789) = v787.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v789) = v9;
        uint64_t v790 = a1[1].u32[0] + v13;
        *(_OWORD *)(a1[2].i64[1] + 16 * v790) = v788;
        *(_DWORD *)(a1[1].i64[1] + 4 * v790) = v787.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v790) = v9;
        unint64_t v791 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v79SKCNode::setFlags(this, 66, 1) = v784;
        *(_DWORD *)(a1[1].i64[1] + 4 * v79SKCNode::setFlags(this, 66, 1) = v787.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v79SKCNode::setFlags(this, 66, 1) = __PAIR64__(1.0, v9);
      }
      else
      {
        float32x2_t v361 = vmul_n_f32(v23, a1[9].f32[3]);
        *(float32x2_t *)&long long v362 = vadd_f32(vadd_f32(*(float32x2_t *)&a8, (float32x2_t)a9.n128_u64[0]), v361);
        if (a1[9].i8[5]) {
          float v363 = a1[12].f32[2];
        }
        else {
          float v363 = 1.0;
        }
        DWORD2(v362) = 0;
        *((float *)&v362 + 3) = v363;
        v15.i32[3] = 1.0;
        unint64_t v364 = a1[1].u32[0] + (unint64_t)(v13 - 2);
        int16x8_t v365 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v15, v14), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        *(int16x4_t *)v365.i8 = vmovn_s32((int32x4_t)v365);
        *(_OWORD *)(a1[2].i64[1] + 16 * v364) = v362;
        v365.i32[0] = vmovn_s16(v365).u32[0];
        *(_DWORD *)(a1[1].i64[1] + 4 * v364) = v365.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v364) = __PAIR64__(1.0, v9);
        *(float32x2_t *)&long long v366 = vadd_f32(vsub_f32((float32x2_t)a9.n128_u64[0], *(float32x2_t *)&a8), v361);
        unint64_t v367 = a1[1].u32[0] + (unint64_t)(v13 - 1);
        DWORD2(v366) = 0;
        *((float *)&v366 + 3) = v363;
        *(_OWORD *)(a1[2].i64[1] + 16 * v367) = v366;
        *(_DWORD *)(a1[1].i64[1] + 4 * v367) = v365.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v367) = v9;
        uint64_t v368 = a1[1].u32[0] + v13;
        *(_OWORD *)(a1[2].i64[1] + 16 * v368) = v366;
        *(_DWORD *)(a1[1].i64[1] + 4 * v368) = v365.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v368) = v9;
        unint64_t v369 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(_OWORD *)(a1[2].i64[1] + 16 * v369) = v362;
        *(_DWORD *)(a1[1].i64[1] + 4 * v369) = v365.i32[0];
        *(void *)(a1[2].i64[0] + 8 * v369) = __PAIR64__(1.0, v9);
      }
      goto LABEL_184;
    }
    float v855 = a1[12].f32[2];
    float v862 = a1[12].f32[3];
    float v870 = a1[12].f32[0];
    float32x2_t v815 = v10;
    float32x4_t v831 = a1[11];
    double v267 = COERCE_DOUBLE(vadd_f32(*(float32x2_t *)&a8, (float32x2_t)a9.n128_u64[0]));
    double v892 = v267;
    float32x2_t v893 = vneg_f32(*(float32x2_t *)&a7);
    double v268 = COERCE_DOUBLE(vadd_f32(a5, (float32x2_t)a9.n128_u64[0]));
    double v890 = v268;
    double v891 = a4;
    v886.i32[0] = 0;
    v885[0].i32[0] = 0;
    sk_ray2::intersect((float32x2_t *)&v892, (float32x2_t *)&v890, (float *)&v886, (float *)v885);
    *(void *)&long long v270 = v878.n128_u64[0];
    double v271 = COERCE_DOUBLE(vmla_n_f32(*(float32x2_t *)&v892, v893, v886.f32[0]));
    *(float32x2_t *)&long long v272 = vsub_f32((float32x2_t)v878.n128_u64[0], a5);
    float32x2_t v273 = vsub_f32(*(float32x2_t *)&v271, *(float32x2_t *)&v272);
    BOOL v47 = sqrtf(vaddv_f32(vmul_f32(v273, v273))) <= sqrtf(v33);
    *(float32x2_t *)&long long v274 = vsub_f32((float32x2_t)v878.n128_u64[0], *(float32x2_t *)&a8);
    float32x2_t v275 = vsub_f32(*(float32x2_t *)&v271, *(float32x2_t *)&v274);
    float v276 = sqrtf(vaddv_f32(vmul_f32(v275, v275)));
    float v277 = sqrtf(v34);
    BOOL v278 = v47 && v276 <= v277;
    if (v278) {
      *(double *)&long long v279 = v271;
    }
    else {
      *(double *)&long long v279 = v267;
    }
    *(float *)&uint64_t v280 = v862;
    if (v278) {
      *(double *)&long long v281 = v271;
    }
    else {
      *(double *)&long long v281 = v268;
    }
    float32x2_t v282 = vsub_f32(*(float32x2_t *)&v281, (float32x2_t)v878.n128_u64[0]);
    float v283 = v862 - fabsf(vaddv_f32(vmul_f32(v23, v282)) / v36);
    float32x2_t v284 = vsub_f32(*(float32x2_t *)&v279, (float32x2_t)v878.n128_u64[0]);
    *(float *)&unint64_t v285 = v862 + fabsf(vaddv_f32(vmul_f32(v29, v284)) / v36);
    if (v17)
    {
      float32x2_t v286 = vmul_f32(v282, v282);
      v286.i32[0] = vadd_f32(v286, (float32x2_t)vdup_lane_s32((int32x2_t)v286, 1)).u32[0];
      float32x2_t v287 = vrsqrte_f32((float32x2_t)v286.u32[0]);
      float32x2_t v288 = vmul_f32(v287, vrsqrts_f32((float32x2_t)v286.u32[0], vmul_f32(v287, v287)));
      *(float32x2_t *)&long long v289 = vmla_n_f32(*(float32x2_t *)&v281, vmul_n_f32(v282, vmul_f32(v288, vrsqrts_f32((float32x2_t)v286.u32[0], vmul_f32(v288, v288))).f32[0]), v815.f32[0]);
      float32x2_t v290 = vmul_f32(a5, a5);
      v290.i32[0] = vadd_f32(v290, (float32x2_t)vdup_lane_s32((int32x2_t)v290, 1)).u32[0];
      float32x2_t v291 = vrsqrte_f32((float32x2_t)v290.u32[0]);
      float32x2_t v292 = vmul_f32(v291, vrsqrts_f32((float32x2_t)v290.u32[0], vmul_f32(v291, v291)));
      float32x2_t v293 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v292, vrsqrts_f32((float32x2_t)v290.u32[0], vmul_f32(v292, v292))), 0);
      float32x2_t v294 = vmul_f32(a5, vneg_f32(v293));
      if (v16) {
        float v295 = v855;
      }
      else {
        float v295 = 1.0;
      }
      DWORD2(v289) = 0;
      unint64_t v296 = a1[1].u32[0] + (unint64_t)(v13 - 10);
      *((float *)&v289 + 3) = v295;
      float32x4_t v297 = v831;
      v297.i32[3] = 1.0;
      float32x4_t v298 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      _Q6 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v297, (float32x4_t)0), v298));
      *(int16x4_t *)_Q6.i8 = vmovn_s32((int32x4_t)_Q6);
      *(_OWORD *)(a1[2].i64[1] + 16 * v296) = v289;
      unsigned __int32 v300 = vmovn_s16(_Q6).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v296) = v300;
      __asm { FMOV            V6.2S, #1.0 }
      *(float *)_Q6.i32 = v862;
      *(void *)(a1[2].i64[0] + 8 * v296) = _Q6.i64[0];
      DWORD2(v28SKCNode::setFlags(this, 66, 1) = 0;
      unint64_t v301 = a1[1].u32[0] + (unint64_t)(v13 - 9);
      *((float *)&v281 + 3) = v295;
      float32x4_t v832 = v297;
      float32x4_t v269 = vmulq_n_f32(v297, v870);
      *(int16x4_t *)v269.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v269, v298)));
      *(_OWORD *)(a1[2].i64[1] + 16 * v30SKCNode::setFlags(this, 66, 1) = v281;
      v298.i32[0] = vmovn_s16((int16x8_t)v269).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v30SKCNode::setFlags(this, 66, 1) = v298.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v30SKCNode::setFlags(this, 66, 1) = _Q6.i64[0];
      *(float32x2_t *)_Q6.i8 = vmla_n_f32(*(float32x2_t *)&v272, v294, v815.f32[0]);
      unint64_t v302 = a1[1].u32[0] + (unint64_t)(v13 - 6);
      DWORD2(v272) = 0;
      *((float *)&v272 + 3) = v295;
      *(_OWORD *)(a1[2].i64[1] + 16 * v302) = v272;
      *(_DWORD *)(a1[1].i64[1] + 4 * v302) = v298.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v302) = LODWORD(v283);
      _Q6.i32[2] = 0;
      unint64_t v303 = a1[1].u32[0] + (unint64_t)(v13 - 5);
      *(float *)&_Q6.i32[3] = v295;
      *(int16x8_t *)(a1[2].i64[1] + 16 * v303) = _Q6;
      *(_DWORD *)(a1[1].i64[1] + 4 * v303) = v300;
      *(void *)(a1[2].i64[0] + 8 * v303) = LODWORD(v283);
    }
    else
    {
      if (v16) {
        float v295 = v855;
      }
      else {
        float v295 = 1.0;
      }
      DWORD2(v28SKCNode::setFlags(this, 66, 1) = 0;
      *((float *)&v281 + 3) = v295;
      float32x4_t v631 = v831;
      v631.i32[3] = 1.0;
      float32x4_t v832 = v631;
      DWORD2(v272) = 0;
      *(int16x4_t *)v269.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v631, v870), (float32x4_t)vdupq_n_s32(0x437F0000u))));
      *((float *)&v272 + 3) = v295;
      float32x2_t v632 = vmul_f32(a5, a5);
      v632.i32[0] = vadd_f32(v632, (float32x2_t)vdup_lane_s32((int32x2_t)v632, 1)).u32[0];
      *(float32x2_t *)v631.f32 = vrsqrte_f32((float32x2_t)v632.u32[0]);
      *(float32x2_t *)v631.f32 = vmul_f32(*(float32x2_t *)v631.f32, vrsqrts_f32((float32x2_t)v632.u32[0], vmul_f32(*(float32x2_t *)v631.f32, *(float32x2_t *)v631.f32)));
      float32x2_t v293 = (float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(*(float32x2_t *)v631.f32, vrsqrts_f32((float32x2_t)v632.u32[0], vmul_f32(*(float32x2_t *)v631.f32, *(float32x2_t *)v631.f32))), 0);
    }
    int16x8_t v808 = (int16x8_t)v269;
    unint64_t v633 = a1[1].u32[0] + (unint64_t)(v13 - 2);
    *(_OWORD *)(a1[2].i64[1] + 16 * v633) = v281;
    unsigned __int32 v634 = vmovn_s16((int16x8_t)v269).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v633) = v634;
    __asm { FMOV            V5.2S, #1.0 }
    *(float *)&_D5 = v283;
    *(void *)(a1[2].i64[0] + 8 * v633) = _D5;
    unint64_t v636 = a1[1].u32[0] + (unint64_t)(v13 - 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v636) = v272;
    *(_DWORD *)(a1[1].i64[1] + 4 * v636) = v634;
    *(void *)(a1[2].i64[0] + 8 * v636) = LODWORD(v862);
    uint64_t v637 = a1[1].u32[0] + v13;
    DWORD2(v270) = 0;
    *((float *)&v270 + 3) = v295;
    *(_OWORD *)(a1[2].i64[1] + 16 * v637) = v270;
    *(_DWORD *)(a1[1].i64[1] + 4 * v637) = v634;
    HIDWORD(v280) = 0.5;
    *(void *)(a1[2].i64[0] + 8 * v637) = v280;
    unint64_t v638 = a1[1].u32[0] + (unint64_t)(v13 + 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v638) = v281;
    *(_DWORD *)(a1[1].i64[1] + 4 * v638) = v634;
    *(void *)(a1[2].i64[0] + 8 * v638) = _D5;
    unint64_t v639 = a1[1].u32[0] + (unint64_t)(v13 + 2);
    *(_OWORD *)(a1[2].i64[1] + 16 * v639) = v272;
    *(_DWORD *)(a1[1].i64[1] + 4 * v639) = v634;
    *(void *)(a1[2].i64[0] + 8 * v639) = LODWORD(v862);
    unint64_t v640 = a1[1].u32[0] + (unint64_t)(v13 + 3);
    *(_OWORD *)(a1[2].i64[1] + 16 * v640) = v272;
    *(_DWORD *)(a1[1].i64[1] + 4 * v640) = v634;
    *(void *)(a1[2].i64[0] + 8 * v640) = LODWORD(v862);
    unint64_t v641 = a1[1].u32[0] + (unint64_t)(v13 + 4);
    uint64_t v836 = v280;
    long long v843 = v270;
    *(_OWORD *)(a1[2].i64[1] + 16 * v64SKCNode::setFlags(this, 66, 1) = v270;
    *(_DWORD *)(a1[1].i64[1] + 4 * v64SKCNode::setFlags(this, 66, 1) = v634;
    *(void *)(a1[2].i64[0] + 8 * v64SKCNode::setFlags(this, 66, 1) = v280;
    unint64_t v642 = a1[1].u32[0] + (unint64_t)(v13 + 5);
    float32x2_t v797 = (float32x2_t)v279;
    unsigned int v798 = v285;
    DWORD2(v279) = 0;
    *((float *)&v279 + 3) = v295;
    *(_OWORD *)(a1[2].i64[1] + 16 * v642) = v279;
    *(_DWORD *)(a1[1].i64[1] + 4 * v642) = v634;
    HIDWORD(v285) = 1.0;
    unint64_t v804 = v285;
    long long v806 = v279;
    *(void *)(a1[2].i64[0] + 8 * v642) = v285;
    float32x2_t v800 = (float32x2_t)v274;
    DWORD2(v274) = 0;
    unint64_t v643 = a1[1].u32[0] + (unint64_t)(v13 + 6);
    float v850 = v295;
    *((float *)&v274 + 3) = v295;
    *(_OWORD *)(a1[2].i64[1] + 16 * v643) = v274;
    *(_DWORD *)(a1[1].i64[1] + 4 * v643) = v634;
    *(void *)(a1[2].i64[0] + 8 * v643) = LODWORD(v862);
    unint64_t v644 = a1[1].u32[0] + (unint64_t)(v13 + 7);
    long long v802 = v274;
    *(_OWORD *)(a1[2].i64[1] + 16 * v644) = v274;
    *(_DWORD *)(a1[1].i64[1] + 4 * v644) = v634;
    *(void *)(a1[2].i64[0] + 8 * v644) = LODWORD(v862);
    float32x2_t v645 = vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8);
    v645.i32[0] = vadd_f32(v645, (float32x2_t)vdup_lane_s32((int32x2_t)v645, 1)).u32[0];
    LODWORD(v13) = v13 + 8;
    float32x2_t v646 = vrsqrte_f32((float32x2_t)v645.u32[0]);
    float32x2_t v647 = vmul_f32(v646, vrsqrts_f32((float32x2_t)v645.u32[0], vmul_f32(v646, v646)));
    float32x2_t v648 = vmul_n_f32(*(float32x2_t *)&a8, vmul_f32(v647, vrsqrts_f32((float32x2_t)v645.u32[0], vmul_f32(v647, v647))).f32[0]);
    float v649 = acosf(vaddv_f32(vmul_f32(v648, vmul_f32(a5, v293))));
    float v650 = (float)(a1[9].f32[0] + (float)(a1[9].f32[2] * 2.0)) * 0.14;
    int v651 = (int)((float)((float)(ceilf(v650) * 2.0) + 1.0) * (v649 / 3.14159265) + 1.0);
    if (v651 >= 1)
    {
      int v652 = 0;
      float v653 = -v649;
      float v654 = (float)v651;
      float v655 = -*((float *)&a8 + 1);
      int16x8_t v656 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v832, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v656.i8 = vmovn_s32((int32x4_t)v656);
      unsigned __int32 v823 = vmovn_s16(v808).u32[0];
      unsigned __int32 v810 = vmovn_s16(v656).u32[0];
      do
      {
        __float2 v657 = __sincosf_stret((float)(v653 * (float)v652) / v654);
        v658.f32[0] = (float)(v657.__sinval * v655) + (float)(*(float *)&a8 * v657.__cosval);
        v658.f32[1] = (float)(*((float *)&a8 + 1) * v657.__cosval) + (float)(*(float *)&a8 * v657.__sinval);
        float32x2_t v872 = vsub_f32((float32x2_t)v878.n128_u64[0], v658);
        __float2 v659 = __sincosf_stret((float)(v653 * (float)++v652) / v654);
        v660.f32[0] = (float)(v659.__sinval * v655) + (float)(*(float *)&a8 * v659.__cosval);
        v660.f32[1] = (float)(*((float *)&a8 + 1) * v659.__cosval) + (float)(*(float *)&a8 * v659.__sinval);
        unint64_t v661 = a1[1].u32[0] + (unint64_t)v13;
        *(float32x2_t *)&long long v662 = v872;
        DWORD2(v662) = 0;
        *((float *)&v662 + 3) = v850;
        *(_OWORD *)(a1[2].i64[1] + 16 * v66SKCNode::setFlags(this, 66, 1) = v662;
        *(_DWORD *)(a1[1].i64[1] + 4 * v66SKCNode::setFlags(this, 66, 1) = v823;
        float32x2_t v663 = vsub_f32((float32x2_t)v878.n128_u64[0], v660);
        *(void *)(a1[2].i64[0] + 8 * v66SKCNode::setFlags(this, 66, 1) = LODWORD(v862);
        unint64_t v664 = a1[1].u32[0] + (unint64_t)(v13 + 1);
        *(float32x2_t *)&long long v665 = v663;
        *((void *)&v665 + SKCNode::setFlags(this, 66, 1) = __PAIR64__(LODWORD(v850), 0);
        *(_OWORD *)(a1[2].i64[1] + 16 * v664) = v665;
        *(_DWORD *)(a1[1].i64[1] + 4 * v664) = v823;
        *(void *)(a1[2].i64[0] + 8 * v664) = LODWORD(v862);
        unint64_t v666 = a1[1].u32[0] + (unint64_t)(v13 + 2);
        *(_OWORD *)(a1[2].i64[1] + 16 * v666) = v843;
        *(_DWORD *)(a1[1].i64[1] + 4 * v666) = v823;
        *(void *)(a1[2].i64[0] + 8 * v666) = v836;
        unint64_t v667 = a1[1].u32[0] + (unint64_t)(v13 + 3);
        *(_OWORD *)(a1[2].i64[1] + 16 * v667) = v843;
        *(_DWORD *)(a1[1].i64[1] + 4 * v667) = v823;
        *(void *)(a1[2].i64[0] + 8 * v667) = v836;
        if (a1[9].i8[4])
        {
          float32x2_t v668 = vsub_f32(v872, (float32x2_t)v878.n128_u64[0]);
          float32x2_t v669 = vmul_f32(v668, v668);
          v669.i32[0] = vadd_f32(v669, (float32x2_t)vdup_lane_s32((int32x2_t)v669, 1)).u32[0];
          float32x2_t v670 = vrsqrte_f32((float32x2_t)v669.u32[0]);
          float32x2_t v671 = vmul_f32(v670, vrsqrts_f32((float32x2_t)v669.u32[0], vmul_f32(v670, v670)));
          float32x2_t v672 = vmul_n_f32(v668, vmul_f32(v671, vrsqrts_f32((float32x2_t)v669.u32[0], vmul_f32(v671, v671))).f32[0]);
          float32x2_t v673 = vsub_f32(v663, (float32x2_t)v878.n128_u64[0]);
          float32x2_t v674 = vmul_f32(v673, v673);
          v674.i32[0] = vadd_f32(v674, (float32x2_t)vdup_lane_s32((int32x2_t)v674, 1)).u32[0];
          float32x2_t v675 = vrsqrte_f32((float32x2_t)v674.u32[0]);
          float32x2_t v676 = vmul_f32(v675, vrsqrts_f32((float32x2_t)v674.u32[0], vmul_f32(v675, v675)));
          float v677 = a1[9].f32[2];
          *(float32x2_t *)&long long v678 = vmla_n_f32(v663, vmul_n_f32(v673, vmul_f32(v676, vrsqrts_f32((float32x2_t)v674.u32[0], vmul_f32(v676, v676))).f32[0]), v677);
          unint64_t v679 = a1[1].u32[0] + (unint64_t)(v13 + 4);
          *(_OWORD *)(a1[2].i64[1] + 16 * v679) = v662;
          *(_DWORD *)(a1[1].i64[1] + 4 * v679) = v823;
          *(void *)(a1[2].i64[0] + 8 * v679) = LODWORD(v862);
          unint64_t v680 = a1[1].u32[0] + (unint64_t)(v13 + 5);
          *(_OWORD *)(a1[2].i64[1] + 16 * v680) = v665;
          *(_DWORD *)(a1[1].i64[1] + 4 * v680) = v823;
          *(void *)(a1[2].i64[0] + 8 * v680) = LODWORD(v862);
          DWORD2(v678) = 0;
          unint64_t v681 = a1[1].u32[0] + (unint64_t)(v13 + 6);
          *((float *)&v678 + 3) = v850;
          *(_OWORD *)(a1[2].i64[1] + 16 * v68SKCNode::setFlags(this, 66, 1) = v678;
          *(_DWORD *)(a1[1].i64[1] + 4 * v68SKCNode::setFlags(this, 66, 1) = v810;
          *(void *)(a1[2].i64[0] + 8 * v68SKCNode::setFlags(this, 66, 1) = LODWORD(v862);
          *(float32x2_t *)&long long v682 = vmla_n_f32(v872, v672, v677);
          unint64_t v683 = a1[1].u32[0] + (unint64_t)(v13 + 7);
          DWORD2(v682) = 0;
          *((float *)&v682 + 3) = v850;
          *(_OWORD *)(a1[2].i64[1] + 16 * v683) = v682;
          *(_DWORD *)(a1[1].i64[1] + 4 * v683) = v810;
          *(void *)(a1[2].i64[0] + 8 * v683) = LODWORD(v862);
          LODWORD(v13) = v13 + 8;
        }
        else
        {
          LODWORD(v13) = v13 + 4;
        }
      }
      while (v651 != v652);
    }
    if (v17)
    {
      float32x2_t v684 = vmul_f32(v284, v284);
      v684.i32[0] = vadd_f32(v684, (float32x2_t)vdup_lane_s32((int32x2_t)v684, 1)).u32[0];
      float32x2_t v685 = vrsqrte_f32((float32x2_t)v684.u32[0]);
      float32x2_t v686 = vmul_f32(v685, vrsqrts_f32((float32x2_t)v684.u32[0], vmul_f32(v685, v685)));
      *(float32x2_t *)&long long v687 = vmla_n_f32(v797, vmul_n_f32(v284, vmul_f32(v686, vrsqrts_f32((float32x2_t)v684.u32[0], vmul_f32(v686, v686))).f32[0]), v815.f32[0]);
      unint64_t v688 = a1[1].u32[0] + (unint64_t)v13;
      long long v690 = v806;
      int16x8_t v689 = v808;
      *(_OWORD *)(a1[2].i64[1] + 16 * v688) = v806;
      v684.i32[0] = vmovn_s16(v808).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v688) = v684.i32[0];
      *(float32x2_t *)&long long v691 = vmls_lane_f32(v800, v648, v815, 0);
      *(void *)(a1[2].i64[0] + 8 * v688) = __PAIR64__(1.0, LODWORD(v862));
      unint64_t v692 = a1[1].u32[0] + (unint64_t)(v13 + 1);
      DWORD2(v687) = 0;
      *((float *)&v687 + 3) = v850;
      int16x8_t v693 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v832, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v693.i8 = vmovn_s32((int32x4_t)v693);
      *(_OWORD *)(a1[2].i64[1] + 16 * v692) = v687;
      v693.i32[0] = vmovn_s16(v693).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v692) = v693.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v692) = __PAIR64__(1.0, LODWORD(v862));
      unint64_t v694 = a1[1].u32[0] + (unint64_t)(v13 + 4);
      *((void *)&v691 + SKCNode::setFlags(this, 66, 1) = __PAIR64__(LODWORD(v850), 0);
      *(_OWORD *)(a1[2].i64[1] + 16 * v694) = v691;
      *(_DWORD *)(a1[1].i64[1] + 4 * v694) = v693.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v694) = v798;
      unint64_t v695 = a1[1].u32[0] + (unint64_t)(v13 + 5);
      long long v696 = v802;
      _D2 = v804;
      *(_OWORD *)(a1[2].i64[1] + 16 * v695) = v802;
      *(_DWORD *)(a1[1].i64[1] + 4 * v695) = v684.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v695) = v798;
      LODWORD(v13) = v13 + 8;
      uint64_t v697 = LODWORD(v862);
    }
    else
    {
      long long v690 = v806;
      int16x8_t v689 = v808;
      uint64_t v697 = LODWORD(v862);
      long long v696 = v802;
      _D2 = v804;
    }
    unint64_t v709 = a1[1].u32[0] + (unint64_t)v13;
    *(_OWORD *)(a1[2].i64[1] + 16 * v709) = v696;
    unsigned __int32 v710 = vmovn_s16(v689).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v709) = v710;
    *(void *)(a1[2].i64[0] + 8 * v709) = v697;
    unint64_t v168 = a1[1].u32[0] + (unint64_t)(v13 + 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v168) = v690;
    *(_DWORD *)(a1[1].i64[1] + 4 * v168) = v710;
    goto LABEL_51;
  }
  if (v35 != 2)
  {
    *(float32x2_t *)&long long v160 = vadd_f32(a5, (float32x2_t)a9.n128_u64[0]);
    if (a1[9].i8[5]) {
      float v161 = a1[12].f32[2];
    }
    else {
      float v161 = 1.0;
    }
    unint64_t v162 = a1[1].u32[0] + (unint64_t)(v13 - 2);
    DWORD2(v160) = 0;
    *((float *)&v160 + 3) = v161;
    v15.i32[3] = 1.0;
    int16x8_t v163 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v15, v14), (float32x4_t)vdupq_n_s32(0x437F0000u)));
    *(int16x4_t *)v163.i8 = vmovn_s32((int32x4_t)v163);
    *(_OWORD *)(a1[2].i64[1] + 16 * v162) = v160;
    unsigned __int32 v164 = vmovn_s16(v163).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v162) = v164;
    __asm { FMOV            V2.2S, #1.0 }
    *(void *)(a1[2].i64[0] + 8 * v162) = __PAIR64__(HIDWORD(_D2), v9);
    *(float32x2_t *)&long long v165 = vsub_f32((float32x2_t)a9.n128_u64[0], a5);
    unint64_t v166 = a1[1].u32[0] + (unint64_t)(v13 - 1);
    DWORD2(v165) = 0;
    *((float *)&v165 + 3) = v161;
    v28.i32[0] = a1[12].i32[3];
    *(_OWORD *)(a1[2].i64[1] + 16 * v166) = v165;
    *(_DWORD *)(a1[1].i64[1] + 4 * v166) = v164;
    *(float32x2_t *)(a1[2].i64[0] + 8 * v166) = v28;
    *(float32x2_t *)&long long v165 = vsub_f32((float32x2_t)a9.n128_u64[0], *(float32x2_t *)&a8);
    uint64_t v167 = a1[1].u32[0] + v13;
    DWORD2(v165) = 0;
    *((float *)&v165 + 3) = v161;
    v28.i32[0] = a1[12].i32[3];
    *(_OWORD *)(a1[2].i64[1] + 16 * v167) = v165;
    *(_DWORD *)(a1[1].i64[1] + 4 * v167) = v164;
    *(float32x2_t *)(a1[2].i64[0] + 8 * v167) = v28;
    *(float32x2_t *)&long long v165 = vadd_f32(*(float32x2_t *)&a8, (float32x2_t)a9.n128_u64[0]);
    unint64_t v168 = a1[1].u32[0] + (unint64_t)(v13 + 1);
    DWORD2(v165) = 0;
    *((float *)&v165 + 3) = v161;
    LODWORD(_D2) = a1[12].i32[3];
    *(_OWORD *)(a1[2].i64[1] + 16 * v168) = v165;
LABEL_50:
    *(_DWORD *)(a1[1].i64[1] + 4 * v168) = v164;
LABEL_51:
    *(void *)(a1[2].i64[0] + 8 * v168) = _D2;
LABEL_184:
    __int32 v589 = v13 + 4;
    goto LABEL_185;
  }
  if (vmlas_n_f32((float)-*((float *)&a7 + 1) * *(float *)&a4, *((float *)&a4 + 1), *(float *)&a7) >= 0.0)
  {
    float v861 = a1[12].f32[3];
    float v869 = a1[12].f32[0];
    float v814 = a1[9].f32[2];
    float32x4_t v829 = a1[11];
    float32x2_t v188 = vsub_f32((float32x2_t)a9.n128_u64[0], *(float32x2_t *)&a8);
    double v892 = *(double *)&v188;
    float32x2_t v893 = vneg_f32(*(float32x2_t *)&a7);
    float32x2_t v189 = vsub_f32((float32x2_t)a9.n128_u64[0], a5);
    double v890 = *(double *)&v189;
    double v891 = a4;
    v886.i32[0] = 0;
    v885[0].i32[0] = 0;
    sk_ray2::intersect((float32x2_t *)&v892, (float32x2_t *)&v890, (float *)&v886, (float *)v885);
    float32x2_t v190 = vmla_n_f32(*(float32x2_t *)&v892, v893, v886.f32[0]);
    float32x2_t v191 = vsub_f32(v190, v189);
    BOOL v47 = sqrtf(vaddv_f32(vmul_f32(v191, v191))) <= sqrtf(v33);
    float32x2_t v192 = vsub_f32(v190, v188);
    float v193 = sqrtf(vaddv_f32(vmul_f32(v192, v192)));
    float v194 = sqrtf(v34);
    BOOL v195 = v47 && v193 <= v194;
    *(float32x2_t *)&long long v196 = v190;
    if (!v195)
    {
      float32x2_t v190 = v188;
      *(float32x2_t *)&long long v196 = v189;
    }
    float32x2_t v197 = vadd_f32(a5, (float32x2_t)v878.n128_u64[0]);
    float32x2_t v198 = vadd_f32(*(float32x2_t *)&a8, (float32x2_t)v878.n128_u64[0]);
    float32x2_t v201 = vsub_f32(vmla_f32(*(float32x2_t *)&v196, (float32x2_t)0x4000000040000000, a5), v197);
    float32x2_t v199 = vsub_f32(vmla_f32(v190, (float32x2_t)0x4000000040000000, *(float32x2_t *)&a8), v198);
    *(float *)&uint64_t v200 = v861;
    v201.f32[0] = v861 - (float)(sqrtf(vaddv_f32(vmul_f32(v201, v201))) / v36);
    float v202 = v861 + (float)(sqrtf(vaddv_f32(vmul_f32(v199, v199))) / v36);
    float32x4_t v203 = v829;
    if (v17)
    {
      float32x2_t v204 = vmul_f32(a5, a5);
      v204.i32[0] = vadd_f32(v204, (float32x2_t)vdup_lane_s32((int32x2_t)v204, 1)).u32[0];
      float32x2_t v205 = vrsqrte_f32((float32x2_t)v204.u32[0]);
      float32x2_t v206 = vmul_f32(v205, vrsqrts_f32((float32x2_t)v204.u32[0], vmul_f32(v205, v205)));
      *(float32x2_t *)&long long v207 = vmla_n_f32(v197, vmul_n_f32(a5, vmul_f32(v206, vrsqrts_f32((float32x2_t)v204.u32[0], vmul_f32(v206, v206))).f32[0]), v814);
      float32x2_t v208 = vsub_f32(*(float32x2_t *)&v196, (float32x2_t)v878.n128_u64[0]);
      float32x2_t v209 = vmul_f32(v208, v208);
      v209.i32[0] = vadd_f32(v209, (float32x2_t)vdup_lane_s32((int32x2_t)v209, 1)).u32[0];
      float32x2_t v210 = vrsqrte_f32((float32x2_t)v209.u32[0]);
      float32x2_t v211 = vmul_f32(v210, vrsqrts_f32((float32x2_t)v209.u32[0], vmul_f32(v210, v210)));
      LODWORD(v212) = vmul_f32(v211, vrsqrts_f32((float32x2_t)v209.u32[0], vmul_f32(v211, v211))).u32[0];
      if (v16) {
        float v213 = v18;
      }
      else {
        float v213 = 1.0;
      }
      DWORD2(v207) = 0;
      *((float *)&v207 + 3) = v213;
      unint64_t v214 = a1[1].u32[0] + (unint64_t)(v13 - 10);
      v203.i32[3] = 1.0;
      float32x4_t v215 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      int16x8_t v216 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v203, (float32x4_t)0), v215));
      *(int16x4_t *)v216.i8 = vmovn_s32((int32x4_t)v216);
      *(_OWORD *)(a1[2].i64[1] + 16 * v214) = v207;
      v216.i32[0] = vmovn_s16(v216).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v214) = v216.i32[0];
      __asm { FMOV            V20.2S, #1.0 }
      *(float *)&_D20 = v861;
      *(void *)(a1[2].i64[0] + 8 * v214) = _D20;
      float32x2_t v218 = vmul_n_f32(v208, v212);
      *(float32x2_t *)&long long v220 = v197;
      DWORD2(v220) = 0;
      unint64_t v219 = a1[1].u32[0] + (unint64_t)(v13 - 9);
      *((float *)&v220 + 3) = v213;
      int16x8_t v221 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v203, v869), v215));
      *(int16x4_t *)v221.i8 = vmovn_s32((int32x4_t)v221);
      *(_OWORD *)(a1[2].i64[1] + 16 * v219) = v220;
      v215.i32[0] = vmovn_s16(v221).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v219) = v215.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v219) = _D20;
      *(float32x2_t *)&long long v222 = vmla_n_f32(*(float32x2_t *)&v196, v218, v814);
      unint64_t v223 = a1[1].u32[0] + (unint64_t)(v13 - 6);
      DWORD2(v196) = 0;
      *((float *)&v196 + 3) = v213;
      *(_OWORD *)(a1[2].i64[1] + 16 * v223) = v196;
      *(_DWORD *)(a1[1].i64[1] + 4 * v223) = v215.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v223) = v201.u32[0];
      DWORD2(v222) = 0;
      unint64_t v224 = a1[1].u32[0] + (unint64_t)(v13 - 5);
      *((float *)&v222 + 3) = v213;
      *(_OWORD *)(a1[2].i64[1] + 16 * v224) = v222;
      *(_DWORD *)(a1[1].i64[1] + 4 * v224) = v216.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v224) = v201.u32[0];
    }
    else
    {
      if (v16) {
        float v213 = v18;
      }
      else {
        float v213 = 1.0;
      }
      *(float32x2_t *)&long long v220 = v197;
      DWORD2(v220) = 0;
      *((float *)&v220 + 3) = v213;
      v203.i32[3] = 1.0;
      int16x8_t v221 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v203, v869), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v221.i8 = vmovn_s32((int32x4_t)v221);
      DWORD2(v196) = 0;
      *((float *)&v196 + 3) = v213;
    }
    unint64_t v463 = a1[1].u32[0] + (unint64_t)(v13 - 2);
    *(_OWORD *)(a1[2].i64[1] + 16 * v463) = v220;
    unsigned __int32 v464 = vmovn_s16(v221).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v463) = v464;
    *(void *)(a1[2].i64[0] + 8 * v463) = __PAIR64__(1.0, LODWORD(v861));
    unint64_t v465 = a1[1].u32[0] + (unint64_t)(v13 - 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v465) = v196;
    *(_DWORD *)(a1[1].i64[1] + 4 * v465) = v464;
    uint64_t v466 = v201.u32[0];
    *(void *)(a1[2].i64[0] + 8 * v465) = v201.u32[0];
    uint64_t v467 = a1[1].u32[0] + v13;
    *(_OWORD *)(a1[2].i64[1] + 16 * v467) = v196;
    *(_DWORD *)(a1[1].i64[1] + 4 * v467) = v464;
    *(void *)(a1[2].i64[0] + 8 * v467) = v201.u32[0];
    unint64_t v468 = a1[1].u32[0] + (unint64_t)(v13 + 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v468) = v220;
    *(_DWORD *)(a1[1].i64[1] + 4 * v468) = v464;
    *(void *)(a1[2].i64[0] + 8 * v468) = __PAIR64__(1.0, LODWORD(v861));
    *(void *)&long long v469 = v878.n128_u64[0];
    DWORD2(v469) = 0;
    unint64_t v470 = a1[1].u32[0] + (unint64_t)(v13 + 2);
    *((float *)&v469 + 3) = v213;
    *(_OWORD *)(a1[2].i64[1] + 16 * v470) = v469;
    *(_DWORD *)(a1[1].i64[1] + 4 * v470) = v464;
    HIDWORD(v200) = 0.5;
    *(void *)(a1[2].i64[0] + 8 * v470) = v200;
    unint64_t v471 = a1[1].u32[0] + (unint64_t)(v13 + 3);
    *(_OWORD *)(a1[2].i64[1] + 16 * v47SKCNode::setFlags(this, 66, 1) = v469;
    *(_DWORD *)(a1[1].i64[1] + 4 * v47SKCNode::setFlags(this, 66, 1) = v464;
    *(void *)(a1[2].i64[0] + 8 * v47SKCNode::setFlags(this, 66, 1) = v200;
    unint64_t v472 = a1[1].u32[0] + (unint64_t)(v13 + 4);
    *(_OWORD *)(a1[2].i64[1] + 16 * v472) = v469;
    *(_DWORD *)(a1[1].i64[1] + 4 * v472) = v464;
    *(void *)(a1[2].i64[0] + 8 * v472) = v200;
    unint64_t v473 = a1[1].u32[0] + (unint64_t)(v13 + 5);
    *(_OWORD *)(a1[2].i64[1] + 16 * v473) = v220;
    *(_DWORD *)(a1[1].i64[1] + 4 * v473) = v464;
    *(void *)(a1[2].i64[0] + 8 * v473) = __PAIR64__(1.0, LODWORD(v861));
    unint64_t v474 = a1[1].u32[0] + (unint64_t)(v13 + 6);
    *(float32x2_t *)&long long v475 = v198;
    DWORD2(v475) = 0;
    *((float *)&v475 + 3) = v213;
    *(_OWORD *)(a1[2].i64[1] + 16 * v474) = v475;
    *(_DWORD *)(a1[1].i64[1] + 4 * v474) = v464;
    *(void *)(a1[2].i64[0] + 8 * v474) = __PAIR64__(1.0, LODWORD(v861));
    unint64_t v476 = a1[1].u32[0] + (unint64_t)(v13 + 7);
    *(_OWORD *)(a1[2].i64[1] + 16 * v476) = v475;
    *(_DWORD *)(a1[1].i64[1] + 4 * v476) = v464;
    *(void *)(a1[2].i64[0] + 8 * v476) = __PAIR64__(1.0, LODWORD(v861));
    unint64_t v477 = a1[1].u32[0] + (unint64_t)(v13 + 8);
    *(_OWORD *)(a1[2].i64[1] + 16 * v477) = v469;
    *(_DWORD *)(a1[1].i64[1] + 4 * v477) = v464;
    *(void *)(a1[2].i64[0] + 8 * v477) = v200;
    unint64_t v478 = a1[1].u32[0] + (unint64_t)(v13 + 9);
    *(_OWORD *)(a1[2].i64[1] + 16 * v478) = v475;
    *(_DWORD *)(a1[1].i64[1] + 4 * v478) = v464;
    *(void *)(a1[2].i64[0] + 8 * v478) = __PAIR64__(1.0, LODWORD(v861));
    unint64_t v479 = a1[1].u32[0] + (unint64_t)(v13 + 10);
    *(float32x2_t *)&long long v480 = v190;
    DWORD2(v480) = 0;
    *((float *)&v480 + 3) = v213;
    *(_OWORD *)(a1[2].i64[1] + 16 * v479) = v480;
    *(_DWORD *)(a1[1].i64[1] + 4 * v479) = v464;
    uint64_t v481 = LODWORD(v202);
    *(void *)(a1[2].i64[0] + 8 * v479) = LODWORD(v202);
    unint64_t v482 = a1[1].u32[0] + (unint64_t)(v13 + 11);
    *(_OWORD *)(a1[2].i64[1] + 16 * v482) = v480;
    *(_DWORD *)(a1[1].i64[1] + 4 * v482) = v464;
    *(void *)(a1[2].i64[0] + 8 * v482) = LODWORD(v202);
    unsigned int v483 = v13 + 12;
    if (v17)
    {
      float32x2_t v484 = vmul_f32(a5, a5);
      v484.i32[0] = vadd_f32(v484, (float32x2_t)vdup_lane_s32((int32x2_t)v484, 1)).u32[0];
      float32x2_t v485 = vrsqrte_f32((float32x2_t)v484.u32[0]);
      float32x2_t v486 = vmul_f32(v485, vrsqrts_f32((float32x2_t)v484.u32[0], vmul_f32(v485, v485)));
      float32x2_t v487 = vmul_n_f32(a5, vmul_f32(v486, vrsqrts_f32((float32x2_t)v484.u32[0], vmul_f32(v486, v486))).f32[0]);
      float32x2_t v488 = vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8);
      *(float32x2_t *)v489.i8 = vmla_n_f32(v197, v487, v814);
      v487.i32[0] = vadd_f32(v488, (float32x2_t)vdup_lane_s32((int32x2_t)v488, 1)).u32[0];
      float32x2_t v490 = vrsqrte_f32((float32x2_t)v487.u32[0]);
      float32x2_t v491 = vmul_f32(v490, vrsqrts_f32((float32x2_t)v487.u32[0], vmul_f32(v490, v490)));
      float32x2_t v492 = vmul_n_f32(*(float32x2_t *)&a8, vmul_f32(v491, vrsqrts_f32((float32x2_t)v487.u32[0], vmul_f32(v491, v491))).f32[0]);
      unint64_t v493 = a1[1].u32[0] + (unint64_t)v483;
      *(_OWORD *)(a1[2].i64[1] + 16 * v493) = v220;
      v487.i32[0] = vmovn_s16(v221).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v493) = v487.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v493) = __PAIR64__(1.0, LODWORD(v861));
      *(float32x2_t *)&long long v494 = vmla_n_f32(v198, v492, v814);
      unint64_t v495 = a1[1].u32[0] + (unint64_t)(v13 + 13);
      v489.i32[2] = 0;
      *(float *)&v489.i32[3] = v213;
      *(int16x8_t *)(a1[2].i64[1] + 16 * v495) = v489;
      *(int16x4_t *)v489.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_f32(v203, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u))));
      v489.i32[0] = vmovn_s16(v489).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v495) = v489.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v495) = __PAIR64__(1.0, LODWORD(v861));
      DWORD2(v494) = 0;
      unint64_t v496 = a1[1].u32[0] + (unint64_t)(v13 + 14);
      *((float *)&v494 + 3) = v213;
      *(_OWORD *)(a1[2].i64[1] + 16 * v496) = v494;
      *(_DWORD *)(a1[1].i64[1] + 4 * v496) = v489.i32[0];
      v201.i32[1] = 1.0;
      *(float32x2_t *)(a1[2].i64[0] + 8 * v496) = v201;
      unint64_t v497 = a1[1].u32[0] + (unint64_t)(v13 + 15);
      *(_OWORD *)(a1[2].i64[1] + 16 * v497) = v475;
      *(_DWORD *)(a1[1].i64[1] + 4 * v497) = v487.i32[0];
      *(float32x2_t *)(a1[2].i64[0] + 8 * v497) = v201;
      float32x2_t v498 = vsub_f32(v190, (float32x2_t)v878.n128_u64[0]);
      float32x2_t v499 = vmul_f32(v498, v498);
      v499.i32[0] = vadd_f32(v499, (float32x2_t)vdup_lane_s32((int32x2_t)v499, 1)).u32[0];
      float32x2_t v500 = vrsqrte_f32((float32x2_t)v499.u32[0]);
      float32x2_t v501 = vmul_f32(v500, vrsqrts_f32((float32x2_t)v499.u32[0], vmul_f32(v500, v500)));
      unint64_t v502 = a1[1].u32[0] + (unint64_t)(v13 + 16);
      *(_OWORD *)(a1[2].i64[1] + 16 * v502) = v475;
      *(_DWORD *)(a1[1].i64[1] + 4 * v502) = v487.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v502) = __PAIR64__(1.0, LODWORD(v861));
      unint64_t v503 = a1[1].u32[0] + (unint64_t)(v13 + 17);
      *(_OWORD *)(a1[2].i64[1] + 16 * v503) = v494;
      *(_DWORD *)(a1[1].i64[1] + 4 * v503) = v489.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v503) = __PAIR64__(1.0, LODWORD(v861));
      *(float32x2_t *)&long long v504 = vmla_n_f32(v190, vmul_n_f32(v498, vmul_f32(v501, vrsqrts_f32((float32x2_t)v499.u32[0], vmul_f32(v501, v501))).f32[0]), v814);
      unint64_t v505 = a1[1].u32[0] + (unint64_t)(v13 + 20);
      DWORD2(v504) = 0;
      *((float *)&v504 + 3) = v213;
      *(_OWORD *)(a1[2].i64[1] + 16 * v505) = v504;
      *(_DWORD *)(a1[1].i64[1] + 4 * v505) = v489.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v505) = v466;
      unint64_t v506 = a1[1].u32[0] + (unint64_t)(v13 + 21);
      *(_OWORD *)(a1[2].i64[1] + 16 * v506) = v480;
      *(_DWORD *)(a1[1].i64[1] + 4 * v506) = v487.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v506) = v466;
      unsigned int v483 = v13 + 24;
    }
    unint64_t v507 = a1[1].u32[0] + (unint64_t)v483;
    *(_OWORD *)(a1[2].i64[1] + 16 * v507) = v480;
    unsigned __int32 v508 = vmovn_s16(v221).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v507) = v508;
    *(void *)(a1[2].i64[0] + 8 * v507) = v481;
    unint64_t v509 = a1[1].u32[0] + (unint64_t)(v483 + 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v509) = v475;
    *(_DWORD *)(a1[1].i64[1] + 4 * v509) = v508;
    *(void *)(a1[2].i64[0] + 8 * v509) = __PAIR64__(1.0, LODWORD(v861));
  }
  else
  {
    float v858 = a1[12].f32[3];
    float v865 = a1[12].f32[0];
    float v811 = a1[9].f32[2];
    float32x4_t v824 = a1[11];
    float32x2_t v37 = vadd_f32(*(float32x2_t *)&a8, (float32x2_t)a9.n128_u64[0]);
    double v892 = *(double *)&v37;
    float32x2_t v893 = vneg_f32(*(float32x2_t *)&a7);
    float32x2_t v38 = vadd_f32(a5, (float32x2_t)a9.n128_u64[0]);
    double v890 = *(double *)&v38;
    double v891 = a4;
    v886.i32[0] = 0;
    v885[0].i32[0] = 0;
    sk_ray2::intersect((float32x2_t *)&v892, (float32x2_t *)&v890, (float *)&v886, (float *)v885);
    *(float32x2_t *)&long long v39 = vmla_n_f32(*(float32x2_t *)&v892, v893, v886.f32[0]);
    float32x2_t v40 = vsub_f32((float32x2_t)v878.n128_u64[0], a5);
    float32x2_t v41 = vsub_f32(*(float32x2_t *)&v39, v40);
    float v42 = sqrtf(vaddv_f32(vmul_f32(v41, v41)));
    float32x2_t v43 = vsub_f32((float32x2_t)v878.n128_u64[0], *(float32x2_t *)&a8);
    BOOL v47 = v42 <= sqrtf(v33);
    float32x2_t v44 = vsub_f32(*(float32x2_t *)&v39, v43);
    float v45 = sqrtf(vaddv_f32(vmul_f32(v44, v44)));
    float v46 = sqrtf(v34);
    BOOL v47 = v47 && v45 <= v46;
    float32x2_t v48 = (float32x2_t)v39;
    if (!v47)
    {
      *(float32x2_t *)&long long v39 = v38;
      float32x2_t v48 = v37;
    }
    float32x2_t v49 = vsub_f32(vmls_f32(*(float32x2_t *)&v39, (float32x2_t)0x4000000040000000, a5), v40);
    float32x2_t v50 = vsub_f32(vmls_f32(v48, (float32x2_t)0x4000000040000000, *(float32x2_t *)&a8), v43);
    *(float *)&uint64_t v51 = v858;
    float v52 = v858 - (float)(sqrtf(vaddv_f32(vmul_f32(v49, v49))) / v36);
    float v53 = v858 + (float)(sqrtf(vaddv_f32(vmul_f32(v50, v50))) / v36);
    float32x4_t v54 = v824;
    if (v17)
    {
      float32x2_t v55 = vsub_f32(*(float32x2_t *)&v39, (float32x2_t)v878.n128_u64[0]);
      float32x2_t v56 = vmul_f32(v55, v55);
      v56.i32[0] = vadd_f32(v56, (float32x2_t)vdup_lane_s32((int32x2_t)v56, 1)).u32[0];
      float32x2_t v57 = vrsqrte_f32((float32x2_t)v56.u32[0]);
      float32x2_t v58 = vmul_f32(v57, vrsqrts_f32((float32x2_t)v56.u32[0], vmul_f32(v57, v57)));
      *(float32x2_t *)&long long v59 = vmla_n_f32(*(float32x2_t *)&v39, vmul_n_f32(v55, vmul_f32(v58, vrsqrts_f32((float32x2_t)v56.u32[0], vmul_f32(v58, v58))).f32[0]), v811);
      float32x2_t v60 = vmul_f32(a5, a5);
      v60.i32[0] = vadd_f32(v60, (float32x2_t)vdup_lane_s32((int32x2_t)v60, 1)).u32[0];
      float32x2_t v61 = vrsqrte_f32((float32x2_t)v60.u32[0]);
      float32x2_t v62 = vmul_f32(v61, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(v61, v61)));
      *(float32x2_t *)&long long v63 = vmla_n_f32(v40, vmul_f32(a5, vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v62, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(v62, v62))), 0))), v811);
      if (v16) {
        float v64 = v18;
      }
      else {
        float v64 = 1.0;
      }
      unint64_t v65 = a1[1].u32[0] + (unint64_t)(v13 - 10);
      DWORD2(v59) = 0;
      *((float *)&v59 + 3) = v64;
      v54.i32[3] = 1.0;
      float32x4_t v66 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      int16x8_t v67 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v54, (float32x4_t)0), v66));
      *(int16x4_t *)v67.i8 = vmovn_s32((int32x4_t)v67);
      *(_OWORD *)(a1[2].i64[1] + 16 * v65) = v59;
      v67.i32[0] = vmovn_s16(v67).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v65) = v67.i32[0];
      __asm { FMOV            V19.2S, #1.0 }
      *(float *)&_D19 = v858;
      *(void *)(a1[2].i64[0] + 8 * v65) = _D19;
      unint64_t v72 = a1[1].u32[0] + (unint64_t)(v13 - 9);
      DWORD2(v39) = 0;
      *((float *)&v39 + 3) = v64;
      int16x8_t v73 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v54, v865), v66));
      *(int16x4_t *)v73.i8 = vmovn_s32((int32x4_t)v73);
      *(_OWORD *)(a1[2].i64[1] + 16 * v72) = v39;
      unsigned __int32 v74 = vmovn_s16(v73).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v72) = v74;
      *(void *)(a1[2].i64[0] + 8 * v72) = _D19;
      unint64_t v75 = a1[1].u32[0] + (unint64_t)(v13 - 6);
      *(float32x2_t *)&long long v76 = v40;
      DWORD2(v76) = 0;
      *((float *)&v76 + 3) = v64;
      *(_OWORD *)(a1[2].i64[1] + 16 * v75) = v76;
      *(_DWORD *)(a1[1].i64[1] + 4 * v75) = v74;
      *(void *)(a1[2].i64[0] + 8 * v75) = LODWORD(v52);
      DWORD2(v63) = 0;
      unint64_t v77 = a1[1].u32[0] + (unint64_t)(v13 - 5);
      *((float *)&v63 + 3) = v64;
      *(_OWORD *)(a1[2].i64[1] + 16 * v77) = v63;
      *(_DWORD *)(a1[1].i64[1] + 4 * v77) = v67.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v77) = LODWORD(v52);
    }
    else
    {
      if (v16) {
        float v64 = v18;
      }
      else {
        float v64 = 1.0;
      }
      DWORD2(v39) = 0;
      *((float *)&v39 + 3) = v64;
      v54.i32[3] = 1.0;
      int16x8_t v73 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v54, v865), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v73.i8 = vmovn_s32((int32x4_t)v73);
      *(float32x2_t *)&long long v76 = v40;
      DWORD2(v76) = 0;
      *((float *)&v76 + 3) = v64;
    }
    unint64_t v545 = a1[1].u32[0] + (unint64_t)(v13 - 2);
    *(_OWORD *)(a1[2].i64[1] + 16 * v545) = v39;
    unsigned __int32 v546 = vmovn_s16(v73).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v545) = v546;
    unint64_t v547 = __PAIR64__(1.0, LODWORD(v52));
    *(void *)(a1[2].i64[0] + 8 * v545) = __PAIR64__(1.0, LODWORD(v52));
    unint64_t v548 = a1[1].u32[0] + (unint64_t)(v13 - 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v548) = v76;
    *(_DWORD *)(a1[1].i64[1] + 4 * v548) = v546;
    *(void *)(a1[2].i64[0] + 8 * v548) = LODWORD(v858);
    uint64_t v549 = a1[1].u32[0] + v13;
    *(_OWORD *)(a1[2].i64[1] + 16 * v549) = v76;
    *(_DWORD *)(a1[1].i64[1] + 4 * v549) = v546;
    *(void *)(a1[2].i64[0] + 8 * v549) = LODWORD(v858);
    unint64_t v550 = a1[1].u32[0] + (unint64_t)(v13 + 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v550) = v39;
    *(_DWORD *)(a1[1].i64[1] + 4 * v550) = v546;
    *(void *)(a1[2].i64[0] + 8 * v550) = __PAIR64__(1.0, LODWORD(v52));
    *(void *)&long long v551 = v878.n128_u64[0];
    DWORD2(v55SKCNode::setFlags(this, 66, 1) = 0;
    unint64_t v552 = a1[1].u32[0] + (unint64_t)(v13 + 2);
    *((float *)&v551 + 3) = v64;
    *(_OWORD *)(a1[2].i64[1] + 16 * v552) = v551;
    *(_DWORD *)(a1[1].i64[1] + 4 * v552) = v546;
    HIDWORD(v5SKCNode::setFlags(this, 66, 1) = 0.5;
    *(void *)(a1[2].i64[0] + 8 * v552) = v51;
    unint64_t v553 = a1[1].u32[0] + (unint64_t)(v13 + 3);
    *(_OWORD *)(a1[2].i64[1] + 16 * v553) = v551;
    *(_DWORD *)(a1[1].i64[1] + 4 * v553) = v546;
    *(void *)(a1[2].i64[0] + 8 * v553) = v51;
    unint64_t v554 = a1[1].u32[0] + (unint64_t)(v13 + 4);
    *(_OWORD *)(a1[2].i64[1] + 16 * v554) = v551;
    *(_DWORD *)(a1[1].i64[1] + 4 * v554) = v546;
    *(void *)(a1[2].i64[0] + 8 * v554) = v51;
    unint64_t v555 = a1[1].u32[0] + (unint64_t)(v13 + 5);
    *(_OWORD *)(a1[2].i64[1] + 16 * v555) = v76;
    *(_DWORD *)(a1[1].i64[1] + 4 * v555) = v546;
    *(void *)(a1[2].i64[0] + 8 * v555) = LODWORD(v858);
    unint64_t v556 = a1[1].u32[0] + (unint64_t)(v13 + 6);
    *(float32x2_t *)&long long v557 = v43;
    DWORD2(v557) = 0;
    *((float *)&v557 + 3) = v64;
    *(_OWORD *)(a1[2].i64[1] + 16 * v556) = v557;
    *(_DWORD *)(a1[1].i64[1] + 4 * v556) = v546;
    *(void *)(a1[2].i64[0] + 8 * v556) = LODWORD(v858);
    unint64_t v558 = a1[1].u32[0] + (unint64_t)(v13 + 7);
    *(_OWORD *)(a1[2].i64[1] + 16 * v558) = v557;
    *(_DWORD *)(a1[1].i64[1] + 4 * v558) = v546;
    *(void *)(a1[2].i64[0] + 8 * v558) = LODWORD(v858);
    unint64_t v559 = a1[1].u32[0] + (unint64_t)(v13 + 8);
    *(_OWORD *)(a1[2].i64[1] + 16 * v559) = v551;
    *(_DWORD *)(a1[1].i64[1] + 4 * v559) = v546;
    *(void *)(a1[2].i64[0] + 8 * v559) = v51;
    unint64_t v560 = a1[1].u32[0] + (unint64_t)(v13 + 9);
    *(_OWORD *)(a1[2].i64[1] + 16 * v560) = v557;
    *(_DWORD *)(a1[1].i64[1] + 4 * v560) = v546;
    *(void *)(a1[2].i64[0] + 8 * v560) = LODWORD(v858);
    unint64_t v561 = a1[1].u32[0] + (unint64_t)(v13 + 10);
    *(float32x2_t *)&long long v562 = v48;
    DWORD2(v562) = 0;
    *((float *)&v562 + 3) = v64;
    *(_OWORD *)(a1[2].i64[1] + 16 * v56SKCNode::setFlags(this, 66, 1) = v562;
    *(_DWORD *)(a1[1].i64[1] + 4 * v56SKCNode::setFlags(this, 66, 1) = v546;
    __asm { FMOV            V20.2S, #1.0 }
    *(float *)&_D20 = v53;
    *(void *)(a1[2].i64[0] + 8 * v56SKCNode::setFlags(this, 66, 1) = _D20;
    unint64_t v564 = a1[1].u32[0] + (unint64_t)(v13 + 11);
    *(_OWORD *)(a1[2].i64[1] + 16 * v564) = v562;
    *(_DWORD *)(a1[1].i64[1] + 4 * v564) = v546;
    *(void *)(a1[2].i64[0] + 8 * v564) = _D20;
    unsigned int v483 = v13 + 12;
    if (v17)
    {
      float32x2_t v565 = vmul_f32(a5, a5);
      v565.i32[0] = vadd_f32(v565, (float32x2_t)vdup_lane_s32((int32x2_t)v565, 1)).u32[0];
      float32x2_t v566 = vrsqrte_f32((float32x2_t)v565.u32[0]);
      float32x2_t v567 = vmul_f32(v566, vrsqrts_f32((float32x2_t)v565.u32[0], vmul_f32(v566, v566)));
      *(float32x2_t *)v568.i8 = vmla_n_f32(v40, vmul_f32(a5, vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v567, vrsqrts_f32((float32x2_t)v565.u32[0], vmul_f32(v567, v567))), 0))), v811);
      float32x2_t v569 = vmul_f32(*(float32x2_t *)&a8, *(float32x2_t *)&a8);
      v569.i32[0] = vadd_f32(v569, (float32x2_t)vdup_lane_s32((int32x2_t)v569, 1)).u32[0];
      float32x2_t v570 = vrsqrte_f32((float32x2_t)v569.u32[0]);
      float32x2_t v571 = vmul_f32(v570, vrsqrts_f32((float32x2_t)v569.u32[0], vmul_f32(v570, v570)));
      *(float32x2_t *)&long long v572 = vmla_n_f32(v43, vmul_f32(*(float32x2_t *)&a8, vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)vmul_f32(v571, vrsqrts_f32((float32x2_t)v569.u32[0], vmul_f32(v571, v571))), 0))), v811);
      unint64_t v573 = a1[1].u32[0] + (unint64_t)v483;
      v568.i32[2] = 0;
      *(float *)&v568.i32[3] = v64;
      *(int16x8_t *)(a1[2].i64[1] + 16 * v573) = v568;
      *(int16x4_t *)v568.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_f32(v54, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u))));
      v568.i32[0] = vmovn_s16(v568).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v573) = v568.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v573) = LODWORD(v858);
      unint64_t v574 = a1[1].u32[0] + (unint64_t)(v13 + 13);
      *(_OWORD *)(a1[2].i64[1] + 16 * v574) = v76;
      v569.i32[0] = vmovn_s16(v73).u32[0];
      *(_DWORD *)(a1[1].i64[1] + 4 * v574) = v569.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v574) = LODWORD(v858);
      unint64_t v575 = a1[1].u32[0] + (unint64_t)(v13 + 14);
      *(_OWORD *)(a1[2].i64[1] + 16 * v575) = v557;
      *(_DWORD *)(a1[1].i64[1] + 4 * v575) = v569.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v575) = LODWORD(v52);
      unint64_t v576 = a1[1].u32[0] + (unint64_t)(v13 + 15);
      DWORD2(v572) = 0;
      *((float *)&v572 + 3) = v64;
      *(_OWORD *)(a1[2].i64[1] + 16 * v576) = v572;
      *(_DWORD *)(a1[1].i64[1] + 4 * v576) = v568.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v576) = LODWORD(v52);
      float32x2_t v577 = vsub_f32(v48, (float32x2_t)v878.n128_u64[0]);
      float32x2_t v578 = vmul_f32(v577, v577);
      v578.i32[0] = vadd_f32(v578, (float32x2_t)vdup_lane_s32((int32x2_t)v578, 1)).u32[0];
      float32x2_t v579 = vrsqrte_f32((float32x2_t)v578.u32[0]);
      float32x2_t v580 = vmul_f32(v579, vrsqrts_f32((float32x2_t)v578.u32[0], vmul_f32(v579, v579)));
      unint64_t v581 = a1[1].u32[0] + (unint64_t)(v13 + 16);
      *(_OWORD *)(a1[2].i64[1] + 16 * v58SKCNode::setFlags(this, 66, 1) = v562;
      *(_DWORD *)(a1[1].i64[1] + 4 * v58SKCNode::setFlags(this, 66, 1) = v569.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v58SKCNode::setFlags(this, 66, 1) = v547;
      *(float32x2_t *)&long long v582 = vmla_n_f32(v48, vmul_n_f32(v577, vmul_f32(v580, vrsqrts_f32((float32x2_t)v578.u32[0], vmul_f32(v580, v580))).f32[0]), v811);
      unint64_t v583 = a1[1].u32[0] + (unint64_t)(v13 + 17);
      DWORD2(v582) = 0;
      *((float *)&v582 + 3) = v64;
      *(_OWORD *)(a1[2].i64[1] + 16 * v583) = v582;
      *(_DWORD *)(a1[1].i64[1] + 4 * v583) = v568.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v583) = v547;
      unint64_t v584 = a1[1].u32[0] + (unint64_t)(v13 + 20);
      *(_OWORD *)(a1[2].i64[1] + 16 * v584) = v572;
      *(_DWORD *)(a1[1].i64[1] + 4 * v584) = v568.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v584) = LODWORD(v858);
      unint64_t v585 = a1[1].u32[0] + (unint64_t)(v13 + 21);
      *(_OWORD *)(a1[2].i64[1] + 16 * v585) = v557;
      *(_DWORD *)(a1[1].i64[1] + 4 * v585) = v569.i32[0];
      *(void *)(a1[2].i64[0] + 8 * v585) = LODWORD(v858);
      unsigned int v483 = v13 + 24;
    }
    unint64_t v586 = a1[1].u32[0] + (unint64_t)v483;
    *(_OWORD *)(a1[2].i64[1] + 16 * v586) = v557;
    unsigned __int32 v587 = vmovn_s16(v73).u32[0];
    *(_DWORD *)(a1[1].i64[1] + 4 * v586) = v587;
    *(void *)(a1[2].i64[0] + 8 * v586) = LODWORD(v858);
    unint64_t v588 = a1[1].u32[0] + (unint64_t)(v483 + 1);
    *(_OWORD *)(a1[2].i64[1] + 16 * v588) = v562;
    *(_DWORD *)(a1[1].i64[1] + 4 * v588) = v587;
    *(void *)(a1[2].i64[0] + 8 * v588) = _D20;
  }
  __int32 v589 = v483 + 4;
LABEL_185:
  a1[12].i32[1] = v589;
}

float32x2_t sk_ray2::intersection(float32x2_t *a1, float32x2_t *a2)
{
  uint64_t v4 = 0;
  sk_ray2::intersect(a1, a2, (float *)&v4 + 1, (float *)&v4);
  return vmla_n_f32(*a1, a1[1], *((float *)&v4 + 1));
}

BOOL sk_ray2::intersect(float32x2_t *a1, float32x2_t *a2, float *a3, float *a4)
{
  float32x2_t v4 = a2[1];
  float32x2_t v5 = vmul_f32(v4, v4);
  float32x2_t v6 = vadd_f32(v5, (float32x2_t)vdup_lane_s32((int32x2_t)v5, 1));
  float32x2_t v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
  float32x2_t v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
  float32x2_t v9 = vmul_n_f32(v4, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]);
  float32x2_t v10 = a1[1];
  float32x2_t v11 = vmul_f32(v10, v10);
  float32x2_t v12 = vadd_f32(v11, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1));
  float32x2_t v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
  float32x2_t v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
  float32x2_t v15 = vmul_n_f32(v10, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0]);
  float v16 = vmlas_n_f32((float)-v9.f32[1] * v15.f32[0], v15.f32[1], v9.f32[0]);
  float32x2_t v17 = vsub_f32(*a2, *a1);
  float v18 = vmlas_n_f32((float)-v10.f32[1] * v4.f32[0], v4.f32[1], v10.f32[0]);
  float v19 = vmlas_n_f32(-(float)(v17.f32[1] * v4.f32[0]), v4.f32[1], v17.f32[0]) / v18;
  float v20 = vmlas_n_f32(-(float)(v17.f32[1] * v10.f32[0]), v10.f32[1], v17.f32[0]) / v18;
  BOOL v21 = (LODWORD(v18) & 0x60000000) == 0;
  if ((LODWORD(v18) & 0x60000000) != 0) {
    float v22 = v19;
  }
  else {
    float v22 = 0.0;
  }
  if (v21) {
    float v23 = 0.0;
  }
  else {
    float v23 = v20;
  }
  if ((LODWORD(v16) & 0x60000000) == 0)
  {
    if ((COERCE_UNSIGNED_INT(vmlas_n_f32(-(float)(v17.f32[1] * v10.f32[0]), v10.f32[1], v17.f32[0])) & 0x60000000) != 0)
    {
      BOOL result = 0;
      *a3 = 0.0;
      *a4 = 0.0;
      return result;
    }
    float32x2_t v25 = vmul_f32(v10, v17);
    float32x2_t v26 = vsub_f32(*a1, *a2);
    if (vaddv_f32(v25) < 0.0
      || (float32x2_t v27 = vadd_f32(v25, (float32x2_t)vdup_lane_s32((int32x2_t)v25, 1)),
          (vmvn_s8((int8x8_t)vcge_f32(v12, v27)).u8[0] & 1) != 0))
    {
      BOOL result = 0;
      float32x2_t v30 = vmul_f32(v4, v26);
      float32x2_t v31 = vadd_f32(v30, (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1));
      if (v31.f32[0] < 0.0 || (vmvn_s8((int8x8_t)vcge_f32(v6, v31)).u8[0] & 1) != 0) {
        return result;
      }
      LODWORD(v32) = vdiv_f32(v31, v6).u32[0];
      float32x2_t v33 = vmla_n_f32(v17, v4, v32);
      *a3 = sqrtf(vaddv_f32(vmul_f32(v33, v33))) / sqrtf(vaddv_f32(v11));
      *a4 = v32;
    }
    else
    {
      LODWORD(v28) = vdiv_f32(v27, v12).u32[0];
      float32x2_t v29 = vmla_n_f32(v26, v10, v28);
      *a3 = v28;
      *a4 = sqrtf(vaddv_f32(vmul_f32(v29, v29))) / sqrtf(vaddv_f32(v5));
    }
    return 1;
  }
  *a3 = v22;
  *a4 = v23;
  if (v22 >= 0.0 && v22 <= 1.0) {
    return 1;
  }
  return v23 <= 1.0 && v23 >= 0.0;
}

__n128 addCaps(uint64_t a1, double a2, double a3, __n128 a4)
{
  *(void *)&long long v6 = *(void *)(a1 + 208);
  float32x2_t v8 = *(float32x2_t *)(a1 + 224);
  float32x2_t v7 = *(float32x2_t *)(a1 + 232);
  float32x2_t v256 = *(float32x2_t *)(a1 + 248);
  float v9 = *(float *)(a1 + 192);
  float32x4_t v10 = *(float32x4_t *)(a1 + 176);
  unsigned int v11 = *(_DWORD *)(a1 + 196);
  int v12 = *(unsigned __int8 *)(a1 + 148);
  int v13 = *(unsigned __int8 *)(a1 + 149);
  LODWORD(a3) = *(_DWORD *)(a1 + 152);
  float v14 = *(float *)(a1 + 144);
  float v15 = *(float *)(a1 + 160);
  a4.n128_u32[0] = *(_DWORD *)(a1 + 204);
  __n128 v250 = a4;
  float v16 = *(float *)(a1 + 200);
  int v17 = *(_DWORD *)(a1 + 128);
  switch(v17)
  {
    case 2:
      float32x2_t v52 = *(float32x2_t *)(a1 + 216);
      float32x2_t v53 = *(float32x2_t *)(a1 + 240);
      *(float32x2_t *)&long long v54 = vsub_f32(vadd_f32(*(float32x2_t *)&v6, v8), v52);
      if (*(unsigned char *)(a1 + 148))
      {
        float32x2_t v55 = vmul_f32(v8, v8);
        v55.i32[0] = vadd_f32(v55, (float32x2_t)vdup_lane_s32((int32x2_t)v55, 1)).u32[0];
        float32x2_t v56 = vrsqrte_f32((float32x2_t)v55.u32[0]);
        float32x2_t v57 = vmul_f32(v56, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v56, v56)));
        float32x2_t v58 = vmul_n_f32(v8, vmul_f32(v57, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v57, v57))).f32[0]);
        float v59 = (float)(v14 * -0.5) / v15;
        if (*(unsigned char *)(a1 + 149)) {
          float v60 = 0.0;
        }
        else {
          float v60 = 1.0;
        }
        DWORD2(v54) = 0;
        *((float *)&v54 + 3) = v60;
        v10.i32[3] = 1.0;
        uint64_t v61 = *(unsigned int *)(a1 + 16);
        float32x4_t v62 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        int16x8_t v63 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v10, v9), v62));
        *(int16x4_t *)v63.i8 = vmovn_s32((int32x4_t)v63);
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v6SKCNode::setFlags(this, 66, 1) = v54;
        unsigned __int32 v64 = vmovn_s16(v63).u32[0];
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v6SKCNode::setFlags(this, 66, 1) = v64;
        unint64_t v65 = __PAIR64__(1.0, LODWORD(v59));
        float32x2_t v66 = vmul_n_f32(v58, *(float *)&a3 + (float)(v14 * 0.5));
        *(void *)(*(void *)(a1 + 32) + 8 * v6SKCNode::setFlags(this, 66, 1) = __PAIR64__(1.0, LODWORD(v59));
        *(float32x2_t *)&long long v67 = vsub_f32(vadd_f32(*(float32x2_t *)&v6, v66), v52);
        uint64_t v68 = *(unsigned int *)(a1 + 16) + 1;
        DWORD2(v67) = 0;
        *((float *)&v67 + 3) = v60;
        int16x8_t v69 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v10, (float32x4_t)0), v62));
        *(int16x4_t *)v69.i8 = vmovn_s32((int32x4_t)v69);
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v68) = v67;
        LODWORD(v67) = vmovn_s16(v69).u32[0];
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v68) = v67;
        *(void *)(*(void *)(a1 + 32) + 8 * v68) = __PAIR64__(1.0, LODWORD(v59));
        *(float32x2_t *)&long long v70 = vsub_f32(vsub_f32(*(float32x2_t *)&v6, v66), v52);
        uint64_t v71 = *(unsigned int *)(a1 + 16) + 4;
        DWORD2(v70) = 0;
        *((float *)&v70 + 3) = v60;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v7SKCNode::setFlags(this, 66, 1) = v70;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v7SKCNode::setFlags(this, 66, 1) = v67;
        *(void *)(*(void *)(a1 + 32) + 8 * v7SKCNode::setFlags(this, 66, 1) = LODWORD(v59);
        *(float32x2_t *)&long long v73 = vsub_f32(vsub_f32(*(float32x2_t *)&v6, v8), v52);
        uint64_t v72 = *(unsigned int *)(a1 + 16) + 5;
        DWORD2(v73) = 0;
        *((float *)&v73 + 3) = v60;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v72) = v73;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v72) = v64;
        *(void *)(*(void *)(a1 + 32) + 8 * v72) = LODWORD(v59);
        unsigned int v74 = 8;
      }
      else
      {
        unsigned int v74 = 0;
        float32x4_t v122 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        *(float32x2_t *)&long long v73 = vsub_f32(vsub_f32(*(float32x2_t *)&v6, v8), v52);
        *(float *)&unint64_t v65 = (float)(v14 * -0.5) / v15;
        float v123 = 0.0;
        DWORD2(v73) = 0;
        if (!*(unsigned char *)(a1 + 149)) {
          float v123 = 1.0;
        }
        *((float *)&v73 + 3) = v123;
        v10.i32[3] = 1.0;
        int16x8_t v63 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v10, v9), v122));
        *(int16x4_t *)v63.i8 = vmovn_s32((int32x4_t)v63);
        float v59 = (float)(v14 * -0.5) / v15;
        DWORD2(v54) = 0;
        *((float *)&v54 + 3) = v123;
        HIDWORD(v65) = 1.0;
      }
      unint64_t v124 = *(unsigned int *)(a1 + 16) + (unint64_t)v74;
      *(_OWORD *)(*(void *)(a1 + 40) + 16 * v124) = v73;
      unsigned __int32 v125 = vmovn_s16(v63).u32[0];
      *(_DWORD *)(*(void *)(a1 + 24) + 4 * v124) = v125;
      unsigned __int32 v119 = (void *)(a1 + 32);
      *(void *)(*(void *)(a1 + 32) + 8 * v124) = LODWORD(v59);
      unint64_t v126 = *(unsigned int *)(a1 + 16) + (unint64_t)(v74 | 1);
      *(_OWORD *)(*(void *)(a1 + 40) + 16 * v126) = v54;
      *(_DWORD *)(*(void *)(a1 + 24) + 4 * v126) = v125;
      *(void *)(*(void *)(a1 + 32) + 8 * v126) = v65;
      if (v12)
      {
        float32x2_t v127 = vmul_f32(v256, v256);
        v127.i32[0] = vadd_f32(v127, (float32x2_t)vdup_lane_s32((int32x2_t)v127, 1)).u32[0];
        float32x2_t v128 = vrsqrte_f32((float32x2_t)v127.u32[0]);
        float32x2_t v129 = vmul_f32(v128, vrsqrts_f32((float32x2_t)v127.u32[0], vmul_f32(v128, v128)));
        float32x2_t v130 = vmul_n_f32(vmul_n_f32(v256, vmul_f32(v129, vrsqrts_f32((float32x2_t)v127.u32[0], vmul_f32(v129, v129))).f32[0]), *(float *)&a3 + (float)(v14 * 0.5));
        uint64_t v131 = v11 - 10;
        *(float32x2_t *)&long long v132 = vadd_f32(v53, vadd_f32(v7, v130));
        float v121 = v250.n128_f32[0] + (float)((float)(v14 * 0.5) / v15);
        uint64_t v133 = *(unsigned int *)(a1 + 16);
        if (v13) {
          float v134 = v16;
        }
        else {
          float v134 = 1.0;
        }
        DWORD2(v132) = 0;
        *((float *)&v132 + 3) = v134;
        int16x8_t v135 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v10, (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x437F0000u)));
        *(int16x4_t *)v135.i8 = vmovn_s32((int32x4_t)v135);
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * (v133 + v131)) = v132;
        unsigned __int32 v136 = vmovn_s16(v135).u32[0];
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * (v133 + v131)) = v136;
        unint64_t v137 = __PAIR64__(1.0, LODWORD(v121));
        *(void *)(*(void *)(a1 + 32) + 8 * (v133 + v131)) = __PAIR64__(1.0, LODWORD(v121));
        *(float32x2_t *)&long long v139 = vadd_f32(v53, vadd_f32(v7, v256));
        unint64_t v138 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 9);
        DWORD2(v139) = 0;
        *((float *)&v139 + 3) = v134;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v138) = v139;
        unsigned __int32 v140 = vmovn_s16(v63).u32[0];
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v138) = v140;
        *(void *)(*(void *)(a1 + 32) + 8 * v138) = __PAIR64__(1.0, LODWORD(v121));
        *(float32x2_t *)&long long v142 = vadd_f32(v53, vsub_f32(v7, v256));
        unint64_t v141 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 6);
        DWORD2(v142) = 0;
        *((float *)&v142 + 3) = v134;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v14SKCNode::setFlags(this, 66, 1) = v142;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v14SKCNode::setFlags(this, 66, 1) = v140;
        *(void *)(*(void *)(a1 + 32) + 8 * v14SKCNode::setFlags(this, 66, 1) = LODWORD(v121);
        *(float32x2_t *)&long long v143 = vadd_f32(v53, vsub_f32(v7, v130));
        DWORD2(v143) = 0;
        unint64_t v144 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 5);
        *((float *)&v143 + 3) = v134;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v144) = v143;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v144) = v136;
        *(void *)(*(void *)(a1 + 32) + 8 * v144) = LODWORD(v121);
      }
      else
      {
        *(float32x2_t *)&long long v139 = vadd_f32(v53, vadd_f32(v7, v256));
        if (v13) {
          float v234 = v16;
        }
        else {
          float v234 = 1.0;
        }
        DWORD2(v139) = 0;
        *((float *)&v139 + 3) = v234;
        float v121 = v250.n128_f32[0] + (float)((float)(v14 * 0.5) / v15);
        *(float *)&unint64_t v137 = v121;
        HIDWORD(v137) = 1.0;
        *(float32x2_t *)&long long v142 = vadd_f32(v53, vsub_f32(v7, v256));
        DWORD2(v142) = 0;
        *((float *)&v142 + 3) = v234;
      }
      unint64_t v235 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 2);
      *(_OWORD *)(*(void *)(a1 + 40) + 16 * v235) = v139;
      unsigned __int32 v236 = vmovn_s16(v63).u32[0];
      *(_DWORD *)(*(void *)(a1 + 24) + 4 * v235) = v236;
      *(void *)(*(void *)(a1 + 32) + 8 * v235) = v137;
      unint64_t v120 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 1);
      *(_OWORD *)(*(void *)(a1 + 40) + 16 * v120) = v142;
      *(_DWORD *)(*(void *)(a1 + 24) + 4 * v120) = v236;
      goto LABEL_65;
    case 1:
      if (*(unsigned char *)(a1 + 148))
      {
        float32x2_t v75 = vmul_f32(v8, v8);
        v75.i32[0] = vadd_f32(v75, (float32x2_t)vdup_lane_s32((int32x2_t)v75, 1)).u32[0];
        float32x2_t v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
        float32x2_t v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
        float32x2_t v78 = vmul_n_f32(v8, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
        *(float32x2_t *)&long long v79 = vadd_f32(*(float32x2_t *)&v6, v8);
        uint64_t v80 = *(unsigned int *)(a1 + 16);
        if (*(unsigned char *)(a1 + 149)) {
          float v81 = 0.0;
        }
        else {
          float v81 = 1.0;
        }
        DWORD2(v79) = 0;
        *((float *)&v79 + 3) = v81;
        v10.i32[3] = 1.0;
        float32x4_t v82 = vmulq_n_f32(v10, v9);
        float32x4_t v83 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        *(int16x4_t *)v4.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(v82, v83)));
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v80) = v79;
        unsigned __int32 v84 = vmovn_s16(v4).u32[0];
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v80) = v84;
        float v85 = *(float *)&a3 + (float)(v14 * 0.5);
        *(void *)(*(void *)(a1 + 32) + 8 * v80) = 0x3F80000000000000;
        float32x2_t v86 = vmul_n_f32(v78, v85);
        *(float32x2_t *)&long long v87 = vadd_f32(*(float32x2_t *)&v6, v86);
        uint64_t v88 = *(unsigned int *)(a1 + 16) + 1;
        DWORD2(v87) = 0;
        *((float *)&v87 + 3) = v81;
        int16x8_t v89 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v10, (float32x4_t)0), v83));
        *(int16x4_t *)v89.i8 = vmovn_s32((int32x4_t)v89);
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v88) = v87;
        unsigned __int32 v90 = vmovn_s16(v89).u32[0];
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v88) = v90;
        *(void *)(*(void *)(a1 + 32) + 8 * v88) = 0x3F80000000000000;
        *(float32x2_t *)&long long v91 = vsub_f32(*(float32x2_t *)&v6, v86);
        uint64_t v92 = *(unsigned int *)(a1 + 16) + 4;
        DWORD2(v9SKCNode::setFlags(this, 66, 1) = 0;
        *((float *)&v91 + 3) = v81;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v92) = v91;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v92) = v90;
        *(void *)(*(void *)(a1 + 32) + 8 * v92) = 0;
        *(float32x2_t *)&long long v87 = vsub_f32(*(float32x2_t *)&v6, v8);
        uint64_t v93 = *(unsigned int *)(a1 + 16) + 5;
        DWORD2(v87) = 0;
        *((float *)&v87 + 3) = v81;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v93) = v87;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v93) = v84;
        *(void *)(*(void *)(a1 + 32) + 8 * v93) = 0;
        uint64_t v94 = *(unsigned int *)(a1 + 16) + 8;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v94) = v87;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v94) = v84;
        *(void *)(*(void *)(a1 + 32) + 8 * v94) = 0;
        uint64_t v95 = *(unsigned int *)(a1 + 16) + 9;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v95) = v79;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v95) = v84;
        *(void *)(*(void *)(a1 + 32) + 8 * v95) = 0x3F80000000000000;
        float32x2_t v96 = vmul_f32(v256, v256);
        v96.i32[0] = vadd_f32(v96, (float32x2_t)vdup_lane_s32((int32x2_t)v96, 1)).u32[0];
        float32x2_t v97 = vrsqrte_f32((float32x2_t)v96.u32[0]);
        float32x2_t v98 = vmul_f32(v97, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v97, v97)));
        float32x2_t v99 = vmul_n_f32(vmul_n_f32(v256, vmul_f32(v98, vrsqrts_f32((float32x2_t)v96.u32[0], vmul_f32(v98, v98))).f32[0]), v85);
        *(float32x2_t *)&long long v100 = vadd_f32(v7, v99);
        if (v13) {
          float v101 = v16;
        }
        else {
          float v101 = 1.0;
        }
        DWORD2(v100) = 0;
        unint64_t v102 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 10);
        *((float *)&v100 + 3) = v101;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v102) = v100;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v102) = v90;
        *(void *)(*(void *)(a1 + 32) + 8 * v102) = 0x3F80000000000000;
        *(float32x2_t *)&long long v104 = vadd_f32(v7, v256);
        DWORD2(v104) = 0;
        unint64_t v103 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 9);
        *((float *)&v104 + 3) = v101;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v103) = v104;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v103) = v84;
        *(void *)(*(void *)(a1 + 32) + 8 * v103) = 0x3F80000000000000;
        *(float32x2_t *)&long long v106 = vsub_f32(v7, v256);
        DWORD2(v106) = 0;
        unint64_t v105 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 6);
        *((float *)&v106 + 3) = v101;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v105) = v106;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v105) = v84;
        *(void *)(*(void *)(a1 + 32) + 8 * v105) = 0;
        *(float32x2_t *)&long long v107 = vsub_f32(v7, v99);
        DWORD2(v107) = 0;
        unint64_t v108 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 5);
        *((float *)&v107 + 3) = v101;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v108) = v107;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v108) = v90;
        *(void *)(*(void *)(a1 + 32) + 8 * v108) = 0;
      }
      else
      {
        *(float32x2_t *)&long long v145 = vsub_f32(*(float32x2_t *)&v6, v8);
        uint64_t v146 = *(unsigned int *)(a1 + 16);
        float v147 = 0.0;
        if (!*(unsigned char *)(a1 + 149)) {
          float v147 = 1.0;
        }
        DWORD2(v145) = 0;
        *((float *)&v145 + 3) = v147;
        v10.i32[3] = 1.0;
        *(int16x4_t *)v4.i8 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v10, v9), (float32x4_t)vdupq_n_s32(0x437F0000u))));
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v146) = v145;
        unsigned __int32 v148 = vmovn_s16(v4).u32[0];
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v146) = v148;
        *(void *)(*(void *)(a1 + 32) + 8 * v146) = 0;
        *(float32x2_t *)&long long v149 = vadd_f32(*(float32x2_t *)&v6, v8);
        uint64_t v150 = *(unsigned int *)(a1 + 16) + 1;
        DWORD2(v149) = 0;
        *((float *)&v149 + 3) = v147;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v150) = v149;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v150) = v148;
        *(void *)(*(void *)(a1 + 32) + 8 * v150) = 0x3F80000000000000;
        *(float32x2_t *)&long long v104 = vadd_f32(v7, v256);
        if (v13) {
          float v101 = v16;
        }
        else {
          float v101 = 1.0;
        }
        DWORD2(v104) = 0;
        *((float *)&v104 + 3) = v101;
        *(float32x2_t *)&long long v106 = vsub_f32(v7, v256);
        DWORD2(v106) = 0;
        *((float *)&v106 + 3) = v101;
      }
      unint64_t v151 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 2);
      *(_OWORD *)(*(void *)(a1 + 40) + 16 * v15SKCNode::setFlags(this, 66, 1) = v104;
      unsigned __int32 v152 = vmovn_s16(v4).u32[0];
      *(_DWORD *)(*(void *)(a1 + 24) + 4 * v15SKCNode::setFlags(this, 66, 1) = v152;
      *(void *)(*(void *)(a1 + 32) + 8 * v15SKCNode::setFlags(this, 66, 1) = __PAIR64__(1.0, v250.n128_u32[0]);
      unint64_t v153 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 1);
      *(_OWORD *)(*(void *)(a1 + 40) + 16 * v153) = v106;
      *(_DWORD *)(*(void *)(a1 + 24) + 4 * v153) = v152;
      *(void *)(*(void *)(a1 + 32) + 8 * v153) = v250.n128_u32[0];
      float v154 = (float)(v14 + (float)(*(float *)(a1 + 152) * 2.0)) * 0.14;
      int v155 = (int)(float)((float)(ceilf(v154) * 2.0) + 2.0);
      if (v155 >= 1)
      {
        float v246 = v101;
        float v247 = v15;
        float v248 = v14;
        float32x2_t v259 = v7;
        int v156 = 0;
        float32x4_t v157 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        uint64_t v158 = 0x3F80000000000000;
        double v159 = (double)v155;
        float32x2_t v160 = v8;
        float v161 = 0.0;
        if (!v13) {
          float v161 = 1.0;
        }
        float32x2_t v257 = (float32x2_t)v6;
        DWORD2(v6) = 0;
        *((float *)&v6 + 3) = v161;
        long long v244 = v6;
        float v245 = v161;
        float32x2_t v249 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0);
        float v162 = -v8.f32[1];
        int16x8_t v163 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v10, (float32x4_t)0), v157));
        *(int16x4_t *)v163.i8 = vmovn_s32((int32x4_t)v163);
        double v164 = 0.0;
        unsigned __int32 v242 = vmovn_s16(v4).u32[0];
        int16x8_t v238 = v163;
        int16x8_t v239 = v4;
        unsigned __int32 v240 = vmovn_s16(v163).u32[0];
        do
        {
          float v165 = v164 * 3.14159265 / v159 + 1.57079633;
          float v166 = (double)++v156 * 3.14159265 / v159 + 1.57079633;
          float v167 = v165 + -1.57079633;
          __float2 v168 = __sincosf_stret(v167);
          v169.f32[0] = (float)(v168.__sinval * v162) + (float)(v160.f32[0] * v168.__cosval);
          v169.f32[1] = (float)(v160.f32[1] * v168.__cosval) + (float)(v160.f32[0] * v168.__sinval);
          float32x2_t v253 = vadd_f32(v257, v169);
          float v170 = v166 + -1.57079633;
          __float2 v171 = __sincosf_stret(v170);
          v172.f32[0] = (float)(v171.__sinval * v162) + (float)(v160.f32[0] * v171.__cosval);
          v172.f32[1] = (float)(v160.f32[1] * v171.__cosval) + (float)(v160.f32[0] * v171.__sinval);
          float32x2_t v251 = vadd_f32(v257, v172);
          __float2 v173 = __sincosf_stret(v166);
          *(float *)&uint64_t v174 = (float)((float)((float)(v248 * v173.__cosval) * 0.5) / v247) + 0.0;
          *((float *)&v174 + SKCNode::setFlags(this, 66, 1) = (float)(v173.__sinval + 1.0) * 0.5;
          *(float32x2_t *)&long long v176 = v253;
          DWORD2(v176) = 0;
          unint64_t v175 = *(unsigned int *)(a1 + 16) + (unint64_t)v11;
          *((float *)&v176 + 3) = v245;
          *(_OWORD *)(*(void *)(a1 + 40) + 16 * v175) = v176;
          *(_DWORD *)(*(void *)(a1 + 24) + 4 * v175) = v242;
          *(void *)(*(void *)(a1 + 32) + 8 * v175) = v158;
          unint64_t v177 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 1);
          *(float32x2_t *)&long long v178 = v251;
          *((void *)&v178 + SKCNode::setFlags(this, 66, 1) = __PAIR64__(LODWORD(v245), 0);
          *(_OWORD *)(*(void *)(a1 + 40) + 16 * v177) = v178;
          *(_DWORD *)(*(void *)(a1 + 24) + 4 * v177) = v242;
          *(void *)(*(void *)(a1 + 32) + 8 * v177) = v174;
          unint64_t v179 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 2);
          *(_OWORD *)(*(void *)(a1 + 40) + 16 * v179) = v244;
          *(_DWORD *)(*(void *)(a1 + 24) + 4 * v179) = v242;
          *(void *)(*(void *)(a1 + 32) + 8 * v179) = 0x3F00000000000000;
          unint64_t v180 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 3);
          *(_OWORD *)(*(void *)(a1 + 40) + 16 * v180) = v244;
          *(_DWORD *)(*(void *)(a1 + 24) + 4 * v180) = v242;
          *(void *)(*(void *)(a1 + 32) + 8 * v180) = 0x3F00000000000000;
          if (v12)
          {
            float32x2_t v181 = vsub_f32(v253, v257);
            float32x2_t v182 = vmul_f32(v181, v181);
            v182.i32[0] = vadd_f32(v182, (float32x2_t)vdup_lane_s32((int32x2_t)v182, 1)).u32[0];
            float32x2_t v183 = vrsqrte_f32((float32x2_t)v182.u32[0]);
            float32x2_t v184 = vmul_f32(v183, vrsqrts_f32((float32x2_t)v182.u32[0], vmul_f32(v183, v183)));
            float32x2_t v185 = vmul_n_f32(v181, vmul_f32(v184, vrsqrts_f32((float32x2_t)v182.u32[0], vmul_f32(v184, v184))).f32[0]);
            float32x2_t v186 = vsub_f32(v251, v257);
            float32x2_t v187 = vmul_f32(v186, v186);
            v187.i32[0] = vadd_f32(v187, (float32x2_t)vdup_lane_s32((int32x2_t)v187, 1)).u32[0];
            float32x2_t v188 = vrsqrte_f32((float32x2_t)v187.u32[0]);
            float32x2_t v189 = vmul_f32(v188, vrsqrts_f32((float32x2_t)v187.u32[0], vmul_f32(v188, v188)));
            *(float32x2_t *)&long long v190 = vmla_f32(v251, v249, vmul_n_f32(v186, vmul_f32(v189, vrsqrts_f32((float32x2_t)v187.u32[0], vmul_f32(v189, v189))).f32[0]));
            unint64_t v191 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 4);
            *(_OWORD *)(*(void *)(a1 + 40) + 16 * v19SKCNode::setFlags(this, 66, 1) = v176;
            *(_DWORD *)(*(void *)(a1 + 24) + 4 * v19SKCNode::setFlags(this, 66, 1) = v242;
            *(void *)(*(void *)(a1 + 32) + 8 * v19SKCNode::setFlags(this, 66, 1) = v158;
            unint64_t v192 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 5);
            *(_OWORD *)(*(void *)(a1 + 40) + 16 * v192) = v178;
            *(_DWORD *)(*(void *)(a1 + 24) + 4 * v192) = v242;
            *(void *)(*(void *)(a1 + 32) + 8 * v192) = v174;
            DWORD2(v190) = 0;
            unint64_t v193 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 6);
            *((float *)&v190 + 3) = v245;
            *(_OWORD *)(*(void *)(a1 + 40) + 16 * v193) = v190;
            *(_DWORD *)(*(void *)(a1 + 24) + 4 * v193) = v240;
            *(void *)(*(void *)(a1 + 32) + 8 * v193) = v174;
            *(float32x2_t *)&long long v194 = vmla_f32(v253, v249, v185);
            unint64_t v195 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 7);
            DWORD2(v194) = 0;
            *((float *)&v194 + 3) = v245;
            *(_OWORD *)(*(void *)(a1 + 40) + 16 * v195) = v194;
            *(_DWORD *)(*(void *)(a1 + 24) + 4 * v195) = v240;
            *(void *)(*(void *)(a1 + 32) + 8 * v195) = v158;
            v11 += 8;
          }
          else
          {
            v11 += 4;
          }
          double v164 = v164 + 1.0;
          uint64_t v158 = v174;
        }
        while (v155 != v156);
        int v196 = 0;
        __asm { FMOV            V3.2S, #1.0 }
        LODWORD(_D3) = v250.n128_u32[0];
        *(float32x2_t *)&long long v201 = v259;
        DWORD2(v20SKCNode::setFlags(this, 66, 1) = 0;
        *((float *)&v201 + 3) = v246;
        long long v252 = v201;
        double v202 = 0.0;
        unsigned __int32 v243 = vmovn_s16(v239).u32[0];
        unsigned __int32 v241 = vmovn_s16(v238).u32[0];
        do
        {
          uint64_t v258 = _D3;
          float v203 = v202 * 3.14159265 / v159 + 1.57079633;
          float v204 = (double)++v196 * 3.14159265 / v159 + 1.57079633;
          float v205 = v203 + -1.57079633;
          __float2 v206 = __sincosf_stret(v205);
          v207.f32[0] = (float)(v256.f32[1] * v206.__sinval) + (float)(v256.f32[0] * v206.__cosval);
          v207.f32[1] = (float)(v256.f32[1] * v206.__cosval) - (float)(v256.f32[0] * v206.__sinval);
          float32x2_t v255 = vadd_f32(v259, v207);
          float v208 = v204 + -1.57079633;
          __float2 v209 = __sincosf_stret(v208);
          v210.f32[0] = (float)(v256.f32[1] * v209.__sinval) + (float)(v256.f32[0] * v209.__cosval);
          v210.f32[1] = (float)(v256.f32[1] * v209.__cosval) - (float)(v256.f32[0] * v209.__sinval);
          float32x2_t v254 = vadd_f32(v259, v210);
          __float2 v211 = __sincosf_stret(v204);
          *(float *)&uint64_t v212 = v250.n128_f32[0] - (float)((float)((float)(v248 * v211.__cosval) * 0.5) / v247);
          *((float *)&v212 + SKCNode::setFlags(this, 66, 1) = (float)(v211.__sinval + 1.0) * 0.5;
          *(float32x2_t *)&long long v214 = v255;
          DWORD2(v214) = 0;
          unint64_t v213 = *(unsigned int *)(a1 + 16) + (unint64_t)v11;
          *((float *)&v214 + 3) = v246;
          *(_OWORD *)(*(void *)(a1 + 40) + 16 * v213) = v214;
          *(_DWORD *)(*(void *)(a1 + 24) + 4 * v213) = v243;
          *(void *)(*(void *)(a1 + 32) + 8 * v213) = v258;
          unint64_t v215 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 1);
          *(float32x2_t *)&long long v216 = v254;
          *((void *)&v216 + SKCNode::setFlags(this, 66, 1) = __PAIR64__(LODWORD(v246), 0);
          *(_OWORD *)(*(void *)(a1 + 40) + 16 * v215) = v216;
          *(_DWORD *)(*(void *)(a1 + 24) + 4 * v215) = v243;
          *(void *)(*(void *)(a1 + 32) + 8 * v215) = v212;
          unint64_t v217 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 2);
          *(_OWORD *)(*(void *)(a1 + 40) + 16 * v217) = v252;
          *(_DWORD *)(*(void *)(a1 + 24) + 4 * v217) = v243;
          *(void *)(*(void *)(a1 + 32) + 8 * v217) = __PAIR64__(0.5, v250.n128_u32[0]);
          unint64_t v218 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 3);
          *(_OWORD *)(*(void *)(a1 + 40) + 16 * v218) = v252;
          *(_DWORD *)(*(void *)(a1 + 24) + 4 * v218) = v243;
          *(void *)(*(void *)(a1 + 32) + 8 * v218) = __PAIR64__(0.5, v250.n128_u32[0]);
          if (v12)
          {
            float32x2_t v219 = vsub_f32(v255, v259);
            float32x2_t v220 = vmul_f32(v219, v219);
            v220.i32[0] = vadd_f32(v220, (float32x2_t)vdup_lane_s32((int32x2_t)v220, 1)).u32[0];
            float32x2_t v221 = vrsqrte_f32((float32x2_t)v220.u32[0]);
            float32x2_t v222 = vmul_f32(v221, vrsqrts_f32((float32x2_t)v220.u32[0], vmul_f32(v221, v221)));
            float32x2_t v223 = vmul_n_f32(v219, vmul_f32(v222, vrsqrts_f32((float32x2_t)v220.u32[0], vmul_f32(v222, v222))).f32[0]);
            float32x2_t v224 = vsub_f32(v254, v259);
            float32x2_t v225 = vmul_f32(v224, v224);
            v225.i32[0] = vadd_f32(v225, (float32x2_t)vdup_lane_s32((int32x2_t)v225, 1)).u32[0];
            float32x2_t v226 = vrsqrte_f32((float32x2_t)v225.u32[0]);
            float32x2_t v227 = vmul_f32(v226, vrsqrts_f32((float32x2_t)v225.u32[0], vmul_f32(v226, v226)));
            *(float32x2_t *)&long long v228 = vmla_f32(v254, v249, vmul_n_f32(v224, vmul_f32(v227, vrsqrts_f32((float32x2_t)v225.u32[0], vmul_f32(v227, v227))).f32[0]));
            unint64_t v229 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 4);
            *(_OWORD *)(*(void *)(a1 + 40) + 16 * v229) = v214;
            *(_DWORD *)(*(void *)(a1 + 24) + 4 * v229) = v243;
            *(void *)(*(void *)(a1 + 32) + 8 * v229) = v258;
            unint64_t v230 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 5);
            *(_OWORD *)(*(void *)(a1 + 40) + 16 * v230) = v216;
            *(_DWORD *)(*(void *)(a1 + 24) + 4 * v230) = v243;
            *(void *)(*(void *)(a1 + 32) + 8 * v230) = v212;
            DWORD2(v228) = 0;
            unint64_t v231 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 6);
            *((float *)&v228 + 3) = v246;
            *(_OWORD *)(*(void *)(a1 + 40) + 16 * v23SKCNode::setFlags(this, 66, 1) = v228;
            *(_DWORD *)(*(void *)(a1 + 24) + 4 * v23SKCNode::setFlags(this, 66, 1) = v241;
            *(void *)(*(void *)(a1 + 32) + 8 * v23SKCNode::setFlags(this, 66, 1) = v212;
            *(float32x2_t *)&long long v232 = vmla_f32(v255, v249, v223);
            unint64_t v233 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 + 7);
            DWORD2(v232) = 0;
            *((float *)&v232 + 3) = v246;
            *(_OWORD *)(*(void *)(a1 + 40) + 16 * v233) = v232;
            *(_DWORD *)(*(void *)(a1 + 24) + 4 * v233) = v241;
            *(void *)(*(void *)(a1 + 32) + 8 * v233) = v258;
            v11 += 8;
          }
          else
          {
            v11 += 4;
          }
          double v202 = v202 + 1.0;
          _D3 = v212;
        }
        while (v155 != v196);
      }
      break;
    case 0:
      if (*(unsigned char *)(a1 + 148))
      {
        float32x2_t v18 = vmul_f32(v8, v8);
        v18.i32[0] = vadd_f32(v18, (float32x2_t)vdup_lane_s32((int32x2_t)v18, 1)).u32[0];
        float32x2_t v19 = vrsqrte_f32((float32x2_t)v18.u32[0]);
        float32x2_t v20 = vmul_f32(v19, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v19, v19)));
        float32x2_t v21 = vmul_n_f32(v8, vmul_f32(v20, vrsqrts_f32((float32x2_t)v18.u32[0], vmul_f32(v20, v20))).f32[0]);
        *(float32x2_t *)&long long v22 = vadd_f32(*(float32x2_t *)&v6, v8);
        uint64_t v23 = *(unsigned int *)(a1 + 16);
        _ZF = v13 == 0;
        if (*(unsigned char *)(a1 + 149)) {
          float v25 = 0.0;
        }
        else {
          float v25 = 1.0;
        }
        DWORD2(v22) = 0;
        *((float *)&v22 + 3) = v25;
        v10.i32[3] = 1.0;
        float32x4_t v26 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        float32x4_t v27 = (float32x4_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v10, v9), v26));
        *(int16x4_t *)v27.f32 = vmovn_s32((int32x4_t)v27);
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v23) = v22;
        unsigned __int32 v28 = vmovn_s16((int16x8_t)v27).u32[0];
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v23) = v28;
        float v29 = *(float *)&a3 + (float)(v14 * 0.5);
        *(void *)(*(void *)(a1 + 32) + 8 * v23) = 0x3F80000000000000;
        float32x2_t v30 = vmul_n_f32(v21, v29);
        *(float32x2_t *)&long long v31 = vadd_f32(*(float32x2_t *)&v6, v30);
        uint64_t v32 = *(unsigned int *)(a1 + 16) + 1;
        DWORD2(v3SKCNode::setFlags(this, 66, 1) = 0;
        *((float *)&v31 + 3) = v25;
        int16x8_t v33 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_f32(v10, (float32x4_t)0), v26));
        *(int16x4_t *)v33.i8 = vmovn_s32((int32x4_t)v33);
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v32) = v31;
        unsigned __int32 v34 = vmovn_s16(v33).u32[0];
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v32) = v34;
        *(void *)(*(void *)(a1 + 32) + 8 * v32) = 0x3F80000000000000;
        *(float32x2_t *)&long long v35 = vsub_f32(*(float32x2_t *)&v6, v30);
        uint64_t v36 = *(unsigned int *)(a1 + 16) + 4;
        DWORD2(v35) = 0;
        *((float *)&v35 + 3) = v25;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v36) = v35;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v36) = v34;
        *(void *)(*(void *)(a1 + 32) + 8 * v36) = 0;
        *(float32x2_t *)v26.f32 = vsub_f32(*(float32x2_t *)&v6, v8);
        uint64_t v37 = *(unsigned int *)(a1 + 16) + 5;
        v26.i32[2] = 0;
        v26.f32[3] = v25;
        *(float32x4_t *)(*(void *)(a1 + 40) + 16 * v37) = v26;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v37) = v28;
        *(void *)(*(void *)(a1 + 32) + 8 * v37) = 0;
        uint64_t v38 = *(unsigned int *)(a1 + 16) + 8;
        *(float32x4_t *)(*(void *)(a1 + 40) + 16 * v38) = v26;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v38) = v28;
        *(void *)(*(void *)(a1 + 32) + 8 * v38) = 0;
        uint64_t v39 = *(unsigned int *)(a1 + 16) + 9;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v39) = v22;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v39) = v28;
        *(void *)(*(void *)(a1 + 32) + 8 * v39) = 0x3F80000000000000;
        float32x2_t v40 = vmul_f32(v256, v256);
        v40.i32[0] = vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).u32[0];
        float32x2_t v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
        float32x2_t v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
        float32x2_t v43 = vmul_n_f32(vmul_n_f32(v256, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]), v29);
        *(float32x2_t *)&long long v44 = vadd_f32(v7, v43);
        if (_ZF) {
          float v16 = 1.0;
        }
        DWORD2(v44) = 0;
        unint64_t v45 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 10);
        *((float *)&v44 + 3) = v16;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v45) = v44;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v45) = v34;
        *(void *)(*(void *)(a1 + 32) + 8 * v45) = 0x3F80000000000000;
        *(float32x2_t *)&long long v47 = vadd_f32(v7, v256);
        DWORD2(v47) = 0;
        unint64_t v46 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 9);
        *((float *)&v47 + 3) = v16;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v46) = v47;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v46) = v28;
        *(void *)(*(void *)(a1 + 32) + 8 * v46) = 0x3F80000000000000;
        *(float32x2_t *)&long long v49 = vsub_f32(v7, v256);
        DWORD2(v49) = 0;
        unint64_t v48 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 6);
        *((float *)&v49 + 3) = v16;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v48) = v49;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v48) = v28;
        *(void *)(*(void *)(a1 + 32) + 8 * v48) = 0;
        *(float32x2_t *)&long long v50 = vsub_f32(v7, v43);
        DWORD2(v50) = 0;
        unint64_t v51 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 5);
        *((float *)&v50 + 3) = v16;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v5SKCNode::setFlags(this, 66, 1) = v50;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v5SKCNode::setFlags(this, 66, 1) = v34;
        *(void *)(*(void *)(a1 + 32) + 8 * v5SKCNode::setFlags(this, 66, 1) = 0;
      }
      else
      {
        *(float32x2_t *)&long long v109 = vsub_f32(*(float32x2_t *)&v6, v8);
        uint64_t v110 = *(unsigned int *)(a1 + 16);
        BOOL v111 = v13 == 0;
        if (*(unsigned char *)(a1 + 149)) {
          float v112 = 0.0;
        }
        else {
          float v112 = 1.0;
        }
        DWORD2(v109) = 0;
        *((float *)&v109 + 3) = v112;
        v10.i32[3] = 1.0;
        float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x437F0000u);
        *(int16x4_t *)v27.f32 = vmovn_s32(vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v10, v9), v27)));
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v110) = v109;
        unsigned __int32 v113 = vmovn_s16((int16x8_t)v27).u32[0];
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v110) = v113;
        *(void *)(*(void *)(a1 + 32) + 8 * v110) = 0;
        *(float32x2_t *)&long long v114 = vadd_f32(*(float32x2_t *)&v6, v8);
        uint64_t v115 = *(unsigned int *)(a1 + 16) + 1;
        DWORD2(v114) = 0;
        *((float *)&v114 + 3) = v112;
        *(_OWORD *)(*(void *)(a1 + 40) + 16 * v115) = v114;
        *(_DWORD *)(*(void *)(a1 + 24) + 4 * v115) = v113;
        *(void *)(*(void *)(a1 + 32) + 8 * v115) = 0x3F80000000000000;
        *(float32x2_t *)&long long v47 = vadd_f32(v7, v256);
        if (v111) {
          float v116 = 1.0;
        }
        else {
          float v116 = v16;
        }
        DWORD2(v47) = 0;
        *((float *)&v47 + 3) = v116;
        *(float32x2_t *)&long long v49 = vsub_f32(v7, v256);
        DWORD2(v49) = 0;
        *((float *)&v49 + 3) = v116;
      }
      unint64_t v117 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 2);
      *(_OWORD *)(*(void *)(a1 + 40) + 16 * v117) = v47;
      unsigned __int32 v118 = vmovn_s16((int16x8_t)v27).u32[0];
      *(_DWORD *)(*(void *)(a1 + 24) + 4 * v117) = v118;
      unsigned __int32 v119 = (void *)(a1 + 32);
      *(void *)(*(void *)(a1 + 32) + 8 * v117) = __PAIR64__(1.0, v250.n128_u32[0]);
      unint64_t v120 = *(unsigned int *)(a1 + 16) + (unint64_t)(v11 - 1);
      *(_OWORD *)(*(void *)(a1 + 40) + 16 * v120) = v49;
      *(_DWORD *)(*(void *)(a1 + 24) + 4 * v120) = v118;
      float v121 = v250.n128_f32[0];
LABEL_65:
      *(void *)(*v119 + 8 * v120) = LODWORD(v121);
      break;
  }
  *(_DWORD *)(a1 + 196) = v11;
  __n128 result = v250;
  *(_DWORD *)(a1 + 204) = v250.n128_u32[0];
  return result;
}

BOOL SKCShapeNode::canAppendToCurrentBatch(SKBlendMode *this, SKCRenderInfo *a2)
{
  if (SKCShapeNode::shouldUseLocalStrokeBuffers((SKCShapeNode *)this, a2)) {
    return 0;
  }
  if (*((_DWORD *)a2 + 148) != 3) {
    return 0;
  }
  int v4 = *((_DWORD *)a2 + 149);
  if (v4 != SKBlendModeGetBackingBlendMode(this[36])
    || *((void *)a2 + 76) != *((void *)a2 + 21)
    || *((void *)a2 + 75) != *((void *)this + 84)
    || *((_DWORD *)a2 + 163))
  {
    return 0;
  }
  float32x2_t v5 = (void *)*((void *)this + 82);
  if (v5)
  {
    [v5 _backingTexture];
    uint64_t v6 = v9;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
  }
  else
  {
    uint64_t v6 = *((void *)a2 + 54);
  }
  if (*((void *)a2 + 77) != v6) {
    return 0;
  }
  uint64_t v8 = 512;
  if (!*((void *)this + 82)) {
    uint64_t v8 = 480;
  }
  return *((void *)a2 + 79) == *(void *)((char *)a2 + v8);
}

void SKCShapeNode::~SKCShapeNode(SKCShapeNode *this)
{
  SKCShapeNode::~SKCShapeNode(this);

  JUMPOUT(0x21052EA30);
}

{
  SKCompositeBezierPath *v2;
  const CGPath *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t vars8;

  *(void *)this = &unk_26BEEDBC0;
  uint64_t v2 = (SKCompositeBezierPath *)*((void *)this + 70);
  if (v2)
  {
    SKCompositeBezierPath::~SKCompositeBezierPath(v2);
    MEMORY[0x21052EA30]();
    *((void *)this + 70) = 0;
  }
  int v3 = (const CGPath *)*((void *)this + 79);
  if (v3)
  {
    CGPathRelease(v3);
    *((void *)this + 79) = 0;
  }
  int v4 = (std::__shared_weak_count *)*((void *)this + 97);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  float32x2_t v5 = (std::__shared_weak_count *)*((void *)this + 95);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 93);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  float32x2_t v7 = (std::__shared_weak_count *)*((void *)this + 91);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 89);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)*((void *)this + 87);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }

  SKCNode::~SKCNode((id *)this);
}

uint64_t std::vector<jet_render_op>::__insert_with_size[abi:ne180100]<std::__wrap_iter<jet_render_op*>,std::__wrap_iter<jet_render_op*>>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 >= 1)
  {
    uint64_t v7 = a3;
    uint64_t v11 = a1[2];
    uint64_t v9 = (uint64_t)(a1 + 2);
    uint64_t v10 = v11;
    unint64_t v12 = *(void *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 6)) >= a5)
    {
      uint64_t v20 = v12 - a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - a2) >> 6)) >= a5)
      {
        uint64_t v21 = a3 + 192 * a5;
      }
      else
      {
        uint64_t v21 = a3 + ((uint64_t)(v12 - a2) >> 6 << 6);
        a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<jet_render_op>,jet_render_op*,jet_render_op*,jet_render_op*>(v9, v21, a4, *(void *)(v9 - 8));
        if (v20 < 1) {
          return v5;
        }
      }
      std::vector<jet_render_op>::__move_range((uint64_t)a1, v5, v12, v5 + 192 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<jet_render_op *,jet_render_op *,jet_render_op *>((uint64_t)v27, v7, v21, v5);
    }
    else
    {
      uint64_t v13 = *a1;
      unint64_t v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 6);
      if (v14 > 0x155555555555555) {
        std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v13) >> 6);
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 6);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v14) {
        uint64_t v17 = v14;
      }
      if (v16 >= 0xAAAAAAAAAAAAAALL) {
        unint64_t v18 = 0x155555555555555;
      }
      else {
        unint64_t v18 = v17;
      }
      uint64_t v30 = v9;
      if (v18) {
        float32x2_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<jet_render_op>>(v9, v18);
      }
      else {
        float32x2_t v19 = 0;
      }
      uint64_t v22 = (uint64_t)&v19[192 * v15];
      v27[0] = v19;
      v27[1] = v22;
      uint64_t v28 = v22;
      float v29 = &v19[192 * v18];
      uint64_t v23 = 3 * a5;
      uint64_t v24 = v22 + 192 * a5;
      uint64_t v25 = v23 << 6;
      do
      {
        std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op&>(v30, v22, v7);
        v22 += 192;
        v7 += 192;
        v25 -= 192;
      }
      while (v25);
      uint64_t v28 = v24;
      uint64_t v5 = std::vector<jet_render_op>::__swap_out_circular_buffer(a1, v27, v5);
      std::__split_buffer<jet_render_op>::~__split_buffer((uint64_t)v27);
    }
  }
  return v5;
}

void sub_20AE23068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  *(void *)(v12 + 8) = v13;
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<jet_render_op>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = a2 + v6 - a4;
  uint64_t v8 = v6;
  if (v7 < a3)
  {
    unint64_t v10 = a2 + v6 - a4;
    uint64_t v8 = *(void *)(a1 + 8);
    do
    {
      std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op>(a1 + 16, v8, v10);
      v10 += 192;
      v8 += 192;
    }
    while (v10 < a3);
  }
  *(void *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<jet_render_op *,jet_render_op *,jet_render_op *>((uint64_t)&v12, a2, v7, v6);
}

void sub_20AE23138(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<jet_render_op>::__swap_out_circular_buffer(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<jet_render_op>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<jet_render_op>,jet_render_op*,jet_render_op*,jet_render_op*>(v7, a3, a1[1], a2[2]);
  uint64_t v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  uint64_t v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<jet_render_op>,jet_render_op*,jet_render_op*,jet_render_op*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v8 = 0;
    do
    {
      std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op&>(a1, a4 + v8, a2 + v8);
      v8 += 192;
    }
    while (a2 + v8 != a3);
    a4 += v8;
  }
  return a4;
}

void sub_20AE23268(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<jet_render_op>,jet_render_op*,jet_render_op*,jet_render_op*>();
  }
  _Unwind_Resume(exception_object);
}

__n128 std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26BEEC420;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  uint64_t v5 = (std::string *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100](a2 + 40, a3 + 40);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a2 + 72, a3 + 72);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  __n128 result = *(__n128 *)(a3 + 128);
  long long v8 = *(_OWORD *)(a3 + 144);
  long long v9 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 176) = v9;
  *(__n128 *)(a2 + 128) = result;
  *(_OWORD *)(a2 + 144) = v8;
  return result;
}

void sub_20AE23338(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(jet_context *)>::~__value_func[abi:ne180100](v3);
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

__n128 std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = &unk_26BEEC420;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  uint64_t v5 = (std::string *)(a2 + 16);
  if (*(char *)(a3 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 16), *(void *)(a3 + 24));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 16);
    *(void *)(a2 + 32) = *(void *)(a3 + 32);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100](a2 + 40, a3 + 40);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a2 + 72, a3 + 72);
  *(_OWORD *)(a2 + 112) = *(_OWORD *)(a3 + 112);
  __n128 result = *(__n128 *)(a3 + 128);
  long long v8 = *(_OWORD *)(a3 + 144);
  long long v9 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(a2 + 176) = v9;
  *(__n128 *)(a2 + 128) = result;
  *(_OWORD *)(a2 + 144) = v8;
  return result;
}

void sub_20AE23418(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(jet_context *)>::~__value_func[abi:ne180100](v3);
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<jet_render_op *,jet_render_op *,jet_render_op *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a4 + v7;
      *(_DWORD *)(a4 + v7 - 184) = *(_DWORD *)(a3 + v7 - 184);
      std::string::operator=((std::string *)(a4 + v7 - 176), (const std::string *)(a3 + v7 - 176));
      std::function<void ()(jet_context *)>::operator=((void *)(a4 + v7 - 152), a3 + v7 - 152);
      std::function<void ()(void)>::operator=((void *)(a4 + v7 - 120), a3 + v7 - 120);
      *(_OWORD *)(v8 - 80) = *(_OWORD *)(a3 + v7 - 80);
      long long v9 = *(_OWORD *)(a3 + v7 - 16);
      long long v11 = *(_OWORD *)(a3 + v7 - 64);
      long long v10 = *(_OWORD *)(a3 + v7 - 48);
      *(_OWORD *)(v8 - 32) = *(_OWORD *)(a3 + v7 - 32);
      *(_OWORD *)(v8 - 16) = v9;
      *(_OWORD *)(v8 - 64) = v11;
      *(_OWORD *)(v8 - 48) = v10;
      v7 -= 192;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void *std::function<void ()(jet_context *)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(jet_context *)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(jet_context *)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(jet_context *)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::function<void ()(void)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(void)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<void ()(jet_context *)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    int v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20AE23838(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    int v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20AE23AA4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<jet_render_op *,jet_render_op *,jet_render_op *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = (_OWORD *)(a4 + v7);
    *(_DWORD *)(a4 + v7 + 8) = *(_DWORD *)(a2 + v7 + 8);
    std::string::operator=((std::string *)(a4 + v7 + 16), (const std::string *)(a2 + v7 + 16));
    std::function<void ()(jet_context *)>::operator=((void *)(a4 + v7 + 40), a2 + v7 + 40);
    std::function<void ()(void)>::operator=((void *)(a4 + v7 + 72), a2 + v7 + 72);
    void v8[7] = *(_OWORD *)(a2 + v7 + 112);
    long long v9 = *(_OWORD *)(a2 + v7 + 176);
    long long v11 = *(_OWORD *)(a2 + v7 + 128);
    long long v10 = *(_OWORD *)(a2 + v7 + 144);
    v8[10] = *(_OWORD *)(a2 + v7 + 160);
    v8[11] = v9;
    v8[8] = v11;
    v8[9] = v10;
    v7 += 192;
  }
  while (a2 + v7 != v6);
  return v6;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<jet_render_op>,jet_render_op*,jet_render_op*,jet_render_op*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v8 = 0;
    do
    {
      std::allocator<jet_render_op>::construct[abi:ne180100]<jet_render_op,jet_render_op const&>(a1, a4 + v8, a2 + v8);
      v8 += 192;
    }
    while (a2 + v8 != a3);
    a4 += v8;
  }
  return a4;
}

void sub_20AE23BD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<jet_render_op>,jet_render_op*,jet_render_op*,jet_render_op*>();
  }
  _Unwind_Resume(exception_object);
}

void SKCompositeBezierPath::~SKCompositeBezierPath(SKCompositeBezierPath *this)
{
  int v3 = (uint64_t *)*((void *)this + 2);
  uint64_t v2 = (uint64_t *)*((void *)this + 3);
  if (v3 != v2)
  {
    do
    {
      uint64_t v4 = *v3;
      if (*v3)
      {
        uint64_t v5 = *(void **)(v4 + 16);
        if (v5)
        {
          *(void *)(v4 + 24) = v5;
          operator delete(v5);
        }
        MEMORY[0x21052EA30](v4, 0x1020C40DCFC4CEALL);
        uint64_t v2 = (uint64_t *)*((void *)this + 3);
      }
      ++v3;
    }
    while (v3 != v2);
    int v3 = (uint64_t *)*((void *)this + 2);
  }
  if (v3)
  {
    *((void *)this + 3) = v3;
    operator delete(v3);
  }
}

void sub_20AE23E24(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10E1C40A5A077FDLL);
  _Unwind_Resume(a1);
}

void sub_20AE23EEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE23FB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2402C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE24124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE242F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2442C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE244E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE24680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE248B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE249D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE24A48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE24DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE25300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE254E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE258F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE259A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE25A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE25AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE25C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE25CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE25F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE26848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20AE2740C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_20AE2765C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE276C0(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C4087CE141CLL);
  _Unwind_Resume(a1);
}

void sub_20AE277B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE27C18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE27CFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE280A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE28208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE282AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2835C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE283E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE284C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE28568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE285F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE28764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE288DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE28994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE28A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE28BE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE29128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE29464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, int a13, char a14, void *a15)
{
  if (a14)
  {
  }
  if (!v18)
  {
  }
  _Unwind_Resume(a1);
}

void sub_20AE2966C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE29F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20AE2AB2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_20AE2ACE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2AE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2B0AC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE2B128(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C4088378DB1);
  _Unwind_Resume(a1);
}

void sub_20AE2B2D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2B47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2B570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE2B730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE2BBC8(_Unwind_Exception *a1)
{
  uint64_t v8 = v7;

  _Unwind_Resume(a1);
}

void sub_20AE2BEF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float SKDisplayGetMaxFramerate(CADisplay *a1)
{
  return 120.0;
}

float SKDisplayGetDefaultFramerate(CADisplay *a1)
{
  return 60.0;
}

void sub_20AE2C084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2C134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2C2E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE2C40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE2C62C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  long long v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)SKDisplayLink;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20AE2C7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2C84C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2C8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE2CBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2CCFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2CDD8(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE2CE88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE2D090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2D510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2D600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2D708(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE2D7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2D894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2D980(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE2DA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2DAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2DB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2DCBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2DDC4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE2DE9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2DF50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2E03C(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE2E0F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2E168(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2E1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2E29C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2E3C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2E484(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE2E530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2E5C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2E65C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2E6DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2E7E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2E904(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE2E9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2EAB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2ECAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2ED88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2EE1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2EEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2F0AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2F1D0(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE2F2C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2F440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2F528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2F5C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2F650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2F6EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2F8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2F9DC(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE2FAB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2FB68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2FC54(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE2FD10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2FDA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2FE48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE2FF64(_Unwind_Exception *a1)
{
}

void sub_20AE30090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE30114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE30184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE304B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE307AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE308F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE30B84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE30CB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE30D10(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C40AB574DD6);
  _Unwind_Resume(a1);
}

void sub_20AE30E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE31030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE31CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_20AE32010(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE320D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE32594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE32D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3304C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_20AE33124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE33264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__2(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
}

void sub_20AE333D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3346C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AE3353C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE335B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE338C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_20AE33AA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE33C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _removeChild(SKNode *a1, SKNode *a2, SKScene *a3)
{
  long long v11 = a1;
  uint64_t v5 = a2;
  uint64_t v6 = a3;
  uint64_t v7 = [(SKNode *)v5 parent];

  if (v7 == v11)
  {
    uint64_t v8 = [(SKScene *)v6 _pkPhysicsWorld];
    SKCNode::removeChild((SKCNode *)[(SKNode *)v11 _backingNode], (id *)[(SKNode *)v5 _backingNode]);
    if (([v8 hasBodies] & 1) != 0
      || ([v8 hasFields] & 1) != 0
      || [(SKScene *)v6 _hasConstraints]
      || ([(SKScene *)v6 avAudioEnvironmentNode],
          long long v9 = objc_claimAutoreleasedReturnValue(),
          v9,
          v9))
    {
      _unhookPhysicsAndConstraints(v5, v6);
    }
    long long v10 = [NSClassFromString(&cfstr_Uifocussystem.isa) focusSystemForEnvironment:v11];
    [v10 _focusEnvironmentWillDisappear:v5];
  }
}

void sub_20AE33D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  unint64_t v14 = v13;

  _Unwind_Resume(a1);
}

void sub_20AE33E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE34144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20AE342F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE343E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE34524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE34630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  _Unwind_Resume(a1);
}

void sub_20AE3475C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

BOOL SKNodeNameMatches(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if ([v3 isEqualToString:@".*"])
  {
    BOOL v5 = 1;
  }
  else
  {
    uint64_t v6 = [v4 name];
    uint64_t v7 = [v6 rangeOfString:v3 options:1032];
    uint64_t v9 = v8;

    if (v7 == 0x7FFFFFFFFFFFFFFFLL)
    {
      BOOL v5 = 0;
    }
    else
    {
      long long v10 = [v4 name];
      if (v9 == [v10 length])
      {
        long long v11 = [v4 name];
        BOOL v5 = [v11 length] != 0;
      }
      else
      {
        BOOL v5 = 0;
      }
    }
  }

  return v5;
}

void sub_20AE34878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE34E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28,void *a29)
{
  std::vector<Token>::__destroy_vector::operator()[abi:ne180100](&a15);
  std::__tree<SKNode * {__strong}>::destroy((uint64_t)&a28, a29);
  a15 = (void **)&a25;
  std::vector<Token>::__destroy_vector::operator()[abi:ne180100](&a15);

  _Unwind_Resume(a1);
}

void sub_20AE3590C(_Unwind_Exception *a1)
{
  STACK[0x220] = v1;
  std::vector<Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&STACK[0x200];
  std::vector<Token>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);

  _Unwind_Resume(a1);
}

void sub_20AE35B9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE35CCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE35D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE35ECC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE35F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE36088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE3613C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE362A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE36364(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE36420(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE36574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE36640(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3677C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE36904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE37038(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE37328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20AE374E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE37584(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE37678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SKNode;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20AE37824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE378C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3798C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE37A08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE37A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE37B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE37D4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE37E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE37FBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE380F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE381B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE38BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_20AE390F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_20AE39580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE396EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE398C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE39AA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE39C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_20AE39FD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3A1EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3A48C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

void sub_20AE3A5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3A6EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3A768(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3A80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3B08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_20AE3B288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE3B370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3B478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3B51C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3B5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3B664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3B864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3B9BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3BAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void _unhookPhysicsAndConstraints(SKNode *a1, SKScene *a2)
{
  id v3 = a1;
  id v4 = a2;
  BOOL v5 = [(SKNode *)v3 physicsBody];
  uint64_t v6 = [(SKScene *)v4 _pkPhysicsWorld];
  uint64_t v7 = v6;
  if (v5) {
    [v6 removeBody:v5];
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v8 = v3;
    uint64_t v9 = [(SKNode *)v8 field];

    if (v9)
    {
      long long v10 = [(SKNode *)v8 field];
      [v7 removeField:v10];
    }
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    [(SKNode *)v3 _connectToScene:0];
  }
  long long v11 = [(SKNode *)v3 constraints];
  char v12 = v11;
  if (v11 && [v11 count]) {
    [(SKScene *)v4 _removeConstraintsForNode:v3];
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v13 = [(SKNode *)v3 _backingNode];
    id WeakRetained = objc_loadWeakRetained((id *)(v13 + 568));
    unint64_t v15 = WeakRetained;
    if (WeakRetained) {
      SKCNode::removeInternalChild((SKCNode *)[WeakRetained _backingNode], *(id **)(v13 + 592));
    }
  }
  if ([(SKNode *)v3 hasChildren])
  {
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 3221225472;
    v16[2] = ___ZL28_unhookPhysicsAndConstraintsP6SKNodeP7SKScene_block_invoke;
    v16[3] = &unk_263FEA108;
    _OWORD v16[4] = v7;
    void v16[5] = v4;
    [(SKNode *)v3 enumerateChildNodesWithName:@".//SKNode" usingBlock:v16];
  }
}

void sub_20AE3BCBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZL28_unhookPhysicsAndConstraintsP6SKNodeP7SKScene_block_invoke(uint64_t a1, void *a2)
{
  id v13 = a2;
  id v3 = [v13 physicsBody];
  if (v3) {
    [*(id *)(a1 + 32) removeBody:v3];
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v4 = v13;
    BOOL v5 = [v4 field];

    if (v5)
    {
      uint64_t v6 = *(void **)(a1 + 32);
      uint64_t v7 = [v4 field];
      [v6 removeField:v7];
    }
  }
  uint64_t v8 = [v13 constraints];
  uint64_t v9 = v8;
  if (v8 && [v8 count]) {
    [*(id *)(a1 + 40) _removeConstraintsForNode:v13];
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v10 = [v13 _backingNode];
    id WeakRetained = objc_loadWeakRetained((id *)(v10 + 568));
    char v12 = WeakRetained;
    if (WeakRetained) {
      SKCNode::removeInternalChild((SKCNode *)[WeakRetained _backingNode], *(id **)(v10 + 592));
    }
  }
}

void sub_20AE3BE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void Token::Token(Token *this, NSString *a2)
{
  id v3 = a2;
  *(_DWORD *)this = 3;
  id v4 = v3;
  *((void *)this + SKCNode::setFlags(this, 66, 1) = v4;
  if (NSClassFromString(v4)) {
    *(_DWORD *)this = 4;
  }
  if ([(NSString *)v4 containsString:@"*"]
    || [(NSString *)v4 containsString:@"?"])
  {
    BOOL v5 = [(NSString *)v4 stringByReplacingOccurrencesOfString:@"*" withString:@".*"];

    uint64_t v6 = [v5 stringByReplacingOccurrencesOfString:@"?" withString:@".?"];

    objc_storeStrong((id *)this + 1, v6);
    id v4 = (NSString *)v6;
  }
}

void sub_20AE3BFB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3C04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<Token>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    id v4 = (id *)v1[1];
    BOOL v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = v4 - 2;

        id v4 = v6;
      }
      while (v6 != v2);
      BOOL v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<Token>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 16;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__tree<SKNode * {__strong}>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<SKNode * {__strong}>::destroy(a1, *a2);
    std::__tree<SKNode * {__strong}>::destroy(a1, a2[1]);

    operator delete(a2);
  }
}

void *std::vector<Token>::__init_with_size[abi:ne180100]<Token*,Token*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<Token>::__vallocate[abi:ne180100](result, a4);
    return std::vector<Token>::__construct_at_end<Token*,Token*>(v6, a2, a3);
  }
  return result;
}

void sub_20AE3C208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

char *std::vector<Token>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::vector<Token>::__construct_at_end<Token*,Token*>(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = result[1];
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(_DWORD *)uint64_t v4 = *(_DWORD *)v6;
      __n128 result = *(id *)(v6 + 8);
      *(void *)(v4 + 8) = result;
      v4 += 16;
      v6 += 16;
    }
    while (v6 != a3);
  }
  v3[1] = v4;
  return result;
}

uint64_t *std::__tree<SKNode * {__strong}>::__emplace_unique_key_args<SKNode * {__strong},SKNode * const {__strong}&>(uint64_t **a1, unint64_t *a2, id *a3)
{
  uint64_t v6 = a1 + 1;
  BOOL v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        BOOL v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      BOOL v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    _OWORD v10[4] = (uint64_t)*a3;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

void *std::vector<Token>::__init_with_size[abi:ne180100]<std::__wrap_iter<Token const*>,std::__wrap_iter<Token const*>>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<Token>::__vallocate[abi:ne180100](result, a4);
    return std::vector<Token>::__construct_at_end<Token*,Token*>(v6, a2, a3);
  }
  return result;
}

void sub_20AE3C3E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void SKCParticleManager::SKCParticleManager(SKCParticleManager *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_26BEEDCE0;
  *((void *)this + SKCNode::setFlags(this, 66, 1) = (char *)this + 16;
}

uint64_t SKCParticleManager::update(uint64_t this, float a2)
{
  uint64_t v2 = *(void **)(this + 8);
  uint64_t v3 = (void *)(this + 16);
  if (v2 != (void *)(this + 16))
  {
    do
    {
      this = (**(uint64_t (***)(void, float))v2[4])(v2[4], a2);
      BOOL v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          BOOL v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  return this;
}

void SKCParticleManager::compact(SKCParticleManager *this)
{
  unint64_t v1 = (char *)*((void *)this + 1);
  uint64_t v2 = (char *)this + 16;
  if (v1 != (char *)this + 16)
  {
    do
    {
      SKCParticleSystem::compact(*((SKCParticleSystem **)v1 + 4));
      uint64_t v3 = (char *)*((void *)v1 + 1);
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = *(char **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (char *)*((void *)v1 + 2);
          BOOL v5 = *(void *)v4 == (void)v1;
          unint64_t v1 = v4;
        }
        while (!v5);
      }
      unint64_t v1 = v4;
    }
    while (v4 != v2);
  }
}

void SKCParticleManager::enumerateParticleSystems(uint64_t a1, void *a2)
{
  uint64_t v8 = a2;
  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = (void *)(a1 + 16);
  if (v3 != v4)
  {
    do
    {
      v8[2](v8, v3[4]);
      BOOL v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          BOOL v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v4);
  }
}

void sub_20AE3C5DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t *SKCParticleManager::addParticleSystem(uint64_t **this, SKCParticleSystem *a2)
{
  uint64_t v3 = a2;
  return std::__tree<SKCParticleSystem *>::__emplace_unique_key_args<SKCParticleSystem *,SKCParticleSystem * const&>(this + 1, (unint64_t *)&v3, (uint64_t *)&v3);
}

uint64_t SKCParticleManager::removeParticleSystem(SKCParticleManager *this, SKCParticleSystem *a2)
{
  uint64_t v3 = a2;
  return std::__tree<SKCParticleSystem *>::__erase_unique<SKCParticleSystem *>((uint64_t)this + 8, (unint64_t *)&v3);
}

void SKCParticleManager::~SKCParticleManager(SKCParticleManager *this)
{
  *(void *)this = &unk_26BEEDCE0;
  uint64_t v2 = (char *)this + 8;
  uint64_t v3 = (char *)*((void *)this + 1);
  uint64_t v4 = (char *)this + 16;
  if (v3 != (char *)this + 16)
  {
    do
    {
      uint64_t v5 = *((void *)v3 + 4);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 16))(v5);
      }
      uint64_t v6 = (char *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          BOOL v7 = v6;
          uint64_t v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          BOOL v7 = (char *)*((void *)v3 + 2);
          BOOL v8 = *(void *)v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)v2, *((void **)this + 2));
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + SKCNode::setFlags(this, 66, 1) = v4;
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)v2, 0);
}

{
  uint64_t vars8;

  SKCParticleManager::~SKCParticleManager(this);

  JUMPOUT(0x21052EA30);
}

uint64_t *std::__tree<SKCParticleSystem *>::__emplace_unique_key_args<SKCParticleSystem *,SKCParticleSystem * const&>(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    BOOL v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    _OWORD v10[4] = *a3;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t std::__tree<SKCParticleSystem *>::__erase_unique<SKCParticleSystem *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<SKCParticleSystem *>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *std::__tree<SKCParticleSystem *>::__remove_node_pointer(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      unint64_t v3 = v2;
      uint64_t v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    uint64_t v4 = a2;
    do
    {
      unint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      uint64_t v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  BOOL v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v6, a2);
  return v3;
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  unint64_t v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      unint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      unint64_t v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  unint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      unint64_t v7 = 0;
      __n128 result = (uint64_t *)v2;
    }
    else
    {
      unint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *unint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      __n128 result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      id v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        __n128 result = v7;
      }
      unint64_t v7 = *(uint64_t **)(*v7 + 8);
    }
    unint64_t v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      unint64_t v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        *unint64_t v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        unint64_t v16 = v7;
      }
      else
      {
        unint64_t v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      uint64_t v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *uint64_t v24 = v23;
      goto LABEL_72;
    }
    unint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    unint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      __n128 result = v7;
    }
    unint64_t v7 = *(uint64_t **)v12;
  }
  float32x2_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  uint64_t v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    uint64_t v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *uint64_t v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    float32x2_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  uint64_t v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_20AE3D248(_Unwind_Exception *a1)
{
  unint64_t v3 = v1;

  _Unwind_Resume(a1);
}

void sub_20AE3D320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3D3A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3D424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3D4A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3D528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3D5A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3D630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3D6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3D740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3D7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3D860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3D900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3D9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3DA30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3DAC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3DB2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3DBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3DC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3DC94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3DD0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3DD8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3DE0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3DE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3DF14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3DFA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3E03C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3E0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3E164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3E1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3E278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3F050(_Unwind_Exception *a1)
{
  int v8 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE3F64C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3F9DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3FA7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3FB88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3FD18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE3FDEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_20AE3FE94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKC3DNode::SKC3DNode(SKC3DNode *this)
{
  SKCNode::SKCNode(this);
  *(void *)uint64_t v1 = &unk_26BEEDD10;
  *(_OWORD *)(v1 + 560) = 0u;
  *(_DWORD *)(v1 + 576) = 0;
  *(_OWORD *)(v1 + 584) = 0u;
  *(_OWORD *)(v1 + 600) = 0u;
  *(_WORD *)(v1 + 616) = 0;
  *(unsigned char *)(v1 + 618) = 1;
}

void SKC3DNode::~SKC3DNode(id *this)
{
  SKCNode::~SKCNode(this);
}

{
  uint64_t vars8;

  SKC3DNode::~SKC3DNode(this);

  JUMPOUT(0x21052EA30);
}

void SKC3DNode::getBatchInfo(SKC3DNode *this@<X0>, SKCRenderInfo *a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 4) = 0x300000000;
  *(_DWORD *)(a3 + 12) = 1;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 60) = 0u;
  if ((*((unsigned char *)a2 + 581) & 2) == 0) {
    *(unsigned char *)a3 = 1;
  }
}

void SKC3DNode::ensureRenderer(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 560))
  {
    Class v4 = NSClassFromString(&cfstr_Scnrenderer.isa);
    SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v15);
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 136))(v15);
    uint64_t v6 = v15;
    unint64_t v7 = v16;
    if (v5 == 1)
    {
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v8 = (*(void (**)(uint64_t))(*(void *)v6 + 360))(v6);
      uint64_t v9 = [(objc_class *)v4 performSelector:sel_rendererWithDevice_options_ withObject:v8 withObject:0];
    }
    else
    {
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v8 = (*(void (**)(uint64_t))(*(void *)v6 + 360))(v6);
      uint64_t v9 = [(objc_class *)v4 performSelector:sel_rendererWithContext_options_ withObject:v8 withObject:0];
    }
    uint64_t v10 = *(void **)(a1 + 560);
    *(void *)(a1 + 560) = v9;

    if (v7) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
    [*(id *)(a1 + 560) setScene:*(void *)(a1 + 584)];
    uint64_t v11 = [*(id *)(a1 + 560) pointOfView];
    [v11 position];
    *(_DWORD *)(a1 + 568) = v12;
    *(_DWORD *)(a1 + 572) = v13;
    *(_DWORD *)(a1 + 576) = v14;

    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_20AE401FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(a1);
}

BOOL SKC3DNode::getNeedsCustomRenderOps(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 580);
  if ((v2 & 0x200) == 0) {
    SKC3DNode::ensureRenderer(a1, a2);
  }
  return (v2 & 0x200) == 0;
}

double SKC3DNode::getBoundingBox(float32x4_t *this)
{
  (*(void (**)(float32x4_t *))(this->i64[0] + 104))(this);
  uint64_t v6 = 0;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  float32x4_t v8 = this[21];
  v7.i64[0] = vmulq_f32(vsubq_f32(v7, this[22]), v8).u64[0];
  long long v9 = xmmword_20AE9B480;
  v7.i64[1] = *((void *)&SKCBoundingBoxEmpty + 1);
  *(float *)&long long v9 = 0.5 * v8.f32[0];
  float v10 = vmuls_lane_f32(0.5, *(float32x2_t *)v8.f32, 1);
  long long v11 = xmmword_20AE9B490;
  *((float *)&v11 + SKCNode::setFlags(this, 66, 1) = v10;
  v13[0] = v7;
  v13[1] = v9;
  v13[2] = v11;
  v13[3] = xmmword_20AE9B4A0;
  do
  {
    *(long long *)((char *)&v14 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2, COERCE_FLOAT(v13[v6])), v3, *(float32x2_t *)&v13[v6], 1), v4, (float32x4_t)v13[v6], 2), v5, (float32x4_t)v13[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  return *(double *)&v14;
}

void SKC3DNode::subclassRecomputeFlags(id *this)
{
  if (!*((unsigned char *)this + 172))
  {
    if (this[73])
    {
      [this[70] nextFrameTime];
      if (v2 < INFINITY)
      {
        SKCNode::setFlags((SKCNode *)this, 66, 1);
      }
    }
  }
}

void *SKC3DNode::addRenderOps(void *result, uint64_t a2, uint64_t **a3)
{
  _OWORD v9[4] = *MEMORY[0x263EF8340];
  if ((*(unsigned char *)(a2 + 581) & 2) == 0)
  {
    float32x4_t v3 = result;
    int v4 = *(_DWORD *)(a2 + 96);
    float32x2_t v5 = vcvt_f32_u32(*(uint32x2_t *)(a2 + 120));
    uint64_t v6 = *a3;
    *(_OWORD *)&v8[8] = *(_OWORD *)(a2 + 32);
    *(_OWORD *)&v8[24] = *(_OWORD *)(a2 + 48);
    *(_OWORD *)&v8[40] = *(_OWORD *)(a2 + 64);
    *(_OWORD *)&v8[56] = *(_OWORD *)(a2 + 80);
    float32x4_t v7 = (char *)operator new(0x70uLL);
    *(_OWORD *)(v7 + 40) = *(_OWORD *)&v8[16];
    *(_OWORD *)(v7 + 56) = *(_OWORD *)&v8[32];
    *(_OWORD *)(v7 + 72) = *(_OWORD *)&v8[48];
    *(void *)float32x4_t v7 = &unk_26BEEDE10;
    *((void *)v7 + 2) = v3;
    *((void *)v7 + 1SKCNode::setFlags(this, 66, 1) = *(void *)&v8[64];
    *(_OWORD *)(v7 + 24) = *(_OWORD *)v8;
    *((_DWORD *)v7 + 24) = v4;
    *((float32x2_t *)v7 + 13) = v5;
    v9[3] = v7;
    jet_command_buffer::custom_block(v6, (uint64_t)v9);
    return std::__function::__value_func<void ()(jet_context *)>::~__value_func[abi:ne180100](v9);
  }
  return result;
}

void sub_20AE404C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  std::__function::__value_func<void ()(jet_context *)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *jet_command_buffer::custom_block(uint64_t *a1, uint64_t a2)
{
  int v7 = 13;
  unint64_t v4 = a1[2];
  if (v4 >= a1[3])
  {
    uint64_t v5 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v7);
  }
  else
  {
    *(void *)unint64_t v4 = &unk_26BEEC420;
    *(_DWORD *)(v4 + 8) = 13;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 64) = 0;
    uint64_t v5 = v4 + 192;
    *(void *)(v4 + 96) = 0;
  }
  a1[2] = v5;
  return std::function<void ()(jet_context *)>::operator=((void *)(v5 - 152), a2);
}

void SKC3DNode::renderCallback(id *a1, jet_context_OpenGL *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, double a7, float32x2_t a8)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  id v9 = a1[70];
  if (v9)
  {
    [v9 setPlaying:*((unsigned __int8 *)a1 + 616)];
    [a1[70] setLoops:*((unsigned __int8 *)a1 + 617)];
    [a1[70] setSceneTime:*((double *)a1 + 74)];
    [a1[70] setPointOfView:a1[76]];
    [a1[70] setAutoenablesDefaultLighting:*((unsigned __int8 *)a1 + 618)];
    *(double *)v12.i64 = (*((double (**)(id *))*a1 + 15))(a1);
    simd_float4 v50 = v13;
    simd_float4 v51 = v12;
    simd_float4 v52 = v15;
    simd_float4 v53 = v14;
    v66.columns[0] = v12;
    v66.columns[1] = v13;
    v66.columns[2] = v14;
    v66.columns[3] = v15;
    (*((void (**)(id *))*a1 + 14))(a1);
    uint64_t v20 = 0;
    params.columns[0] = v51;
    params.columns[1] = v50;
    params.columns[2] = v53;
    params.columns[3] = v52;
    do
    {
      v67.columns[v20] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(*(_OWORD *)&params.columns[v20])), v17, *(float32x2_t *)params.columns[v20].f32, 1), v18, (float32x4_t)params.columns[v20], 2), v19, (float32x4_t)params.columns[v20], 3);
      ++v20;
    }
    while (v20 != 4);
    uint64_t v21 = 0;
    simd_float4x4 params = v67;
    do
    {
      v67.columns[v21] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a3, COERCE_FLOAT(*(_OWORD *)&params.columns[v21])), a4, *(float32x2_t *)params.columns[v21].f32, 1), a5, (float32x4_t)params.columns[v21], 2), a6, (float32x4_t)params.columns[v21], 3);
      ++v21;
    }
    while (v21 != 4);
    simd_float4x4 v66 = v67;
    float32x4_t AABB = SKCBoundingBoxGetAABB(&v66);
    (*(void (**)(jet_context_OpenGL *))(*(void *)a2 + 136))(a2);
    __asm { FMOV            V0.2S, #1.0 }
    float32x2_t v56 = vmul_f32(vmul_f32(vadd_f32(*(float32x2_t *)AABB.f32, _D0), a8), (float32x2_t)0x3F0000003F000000);
    float32x2_t v58 = vmul_f32(vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)AABB, (int8x16_t)AABB, 8uLL), a8), (float32x2_t)0x3F0000003F000000);
    if (v27 == 1)
    {
      uint64_t v61 = (*(void (**)(jet_context_OpenGL *))(*(void *)a2 + 384))(a2);
      uint64_t v28 = (*(void (**)(jet_context_OpenGL *))(*(void *)a2 + 392))(a2);
      float v29 = [v28 colorAttachments];
      uint64_t v30 = [v29 objectAtIndexedSubscript:0];
      long long v31 = [v30 texture];
      unint64_t v32 = [v31 height];

      v63[0] = 0;
      v63[1] = 0;
      int16x8_t v33 = [v28 colorAttachments];
      unsigned __int32 v34 = [v33 objectAtIndexedSubscript:0];
      long long v35 = [v34 texture];
      LODWORD(v64) = [v35 width];
      uint64_t v64 = v64;
      uint64_t v36 = [v28 colorAttachments];
      uint64_t v37 = [v36 objectAtIndexedSubscript:0];
      uint64_t v38 = [v37 texture];
      LODWORD(v65) = [v38 height];
      uint64_t v65 = v65;
      [v61 setScissorRect:v63];

      id v39 = a1[70];
      double v40 = CACurrentMediaTime();
      float32x2_t v41 = (*(void (**)(jet_context_OpenGL *))(*(void *)a2 + 384))(a2);
      float32x2_t v42 = (*(void (**)(jet_context_OpenGL *))(*(void *)a2 + 368))(a2);
      objc_msgSend(v39, "renderAtTime:viewport:encoder:passDescriptor:commandQueue:", v41, v28, v42, v40, v56.f32[0], (float)((float)((float)v32 - v56.f32[1]) - v58.f32[1]), v58.f32[0], v58.f32[1]);

      v62[0] = 0;
      v62[1] = 0;
      float32x2_t v43 = [v28 colorAttachments];
      long long v44 = [v43 objectAtIndexedSubscript:0];
      unint64_t v45 = [v44 texture];
      *(double *)&v62[2] = (double)(unint64_t)[v45 width];
      unint64_t v46 = [v28 colorAttachments];
      long long v47 = [v46 objectAtIndexedSubscript:0];
      unint64_t v48 = [v47 texture];
      *(double *)&v62[3] = (double)(unint64_t)[v48 height];
      v62[4] = 0;
      v62[5] = 0;
      [v61 setViewport:v62];

      [v61 setFrontFacingWinding:0];
      [v61 setCullMode:0];
    }
    else
    {
      (*(void (**)(jet_context_OpenGL *))(*(void *)a2 + 360))(a2);
      long long v49 = (EAGLContext *)objc_claimAutoreleasedReturnValue();
      glContextUse::glContextUse((glContextUse *)&v67, v49);

      glGetIntegerv(0xBA2u, (GLint *)&params);
      glViewport((int)v56.f32[0], (int)v56.f32[1], (int)v58.f32[0], (int)v58.f32[1]);
      glDisable(0xC11u);
      [a1[70] render];
      jet_context_OpenGL::synchronize_OpenGL_state(a2);
      glViewport(params.columns[0].i32[0], params.columns[0].i32[1], params.columns[0].i32[2], params.columns[0].i32[3]);
      glContextUse::~glContextUse((glContextUse *)&v67);
    }
  }
}

void sub_20AE40B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__function::__func<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0,std::allocator<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0>,void ()(jet_context *)>::~__func()
{
}

__n128 std::__function::__func<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0,std::allocator<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0>,void ()(jet_context *)>::__clone(uint64_t a1)
{
  double v2 = operator new(0x70uLL);
  *(void *)double v2 = &unk_26BEEDE10;
  long long v3 = *(_OWORD *)(a1 + 64);
  v2[3] = *(_OWORD *)(a1 + 48);
  v2[4] = v3;
  long long v4 = *(_OWORD *)(a1 + 96);
  v2[5] = *(_OWORD *)(a1 + 80);
  v2[6] = v4;
  __n128 result = *(__n128 *)(a1 + 16);
  long long v6 = *(_OWORD *)(a1 + 32);
  v2[1] = result;
  v2[2] = v6;
  return result;
}

__n128 std::__function::__func<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0,std::allocator<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0>,void ()(jet_context *)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26BEEDE10;
  long long v2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v2;
  __n128 result = *(__n128 *)(a1 + 48);
  long long v4 = *(_OWORD *)(a1 + 64);
  long long v5 = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 80) = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 96) = v5;
  *(__n128 *)(a2 + 48) = result;
  *(_OWORD *)(a2 + 64) = v4;
  return result;
}

void std::__function::__func<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0,std::allocator<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0>,void ()(jet_context *)>::operator()(uint64_t a1, jet_context_OpenGL **a2, double a3, double a4, double a5, double a6, double a7)
{
}

uint64_t std::__function::__func<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0,std::allocator<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0>,void ()(jet_context *)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 16;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0,std::allocator<SKC3DNode::addRenderOps(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::$_0>,void ()(jet_context *)>::target_type()
{
}

void sub_20AE40DD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE40EE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE4128C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE41498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE41770(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE418DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE41A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE41C00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE41CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE41D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE41E08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE41EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE41F88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE42054(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE420C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4213C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE421D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE42264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4230C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCVideoNode::SKCVideoNode(SKCVideoNode *this)
{
  SKCNode::SKCNode(this);
  *(void *)uint64_t v2 = &unk_26BEEDEA0;
  *(unsigned char *)(v2 + 560) = 1;
  *((void *)this + 7SKCNode::setFlags(this, 66, 1) = objc_alloc_init(MEMORY[0x263EFA7F0]);
  *((void *)this + 72) = 0;
  *((_DWORD *)this + 146) = 1065353216;
  *((unsigned char *)this + 588) = 1;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((void *)this + 82) = 0;
  *((void *)this + 83) = (char *)this + 664;
  *((void *)this + 84) = (char *)this + 664;
  *((void *)this + 85) = 0;
  *((void *)this + 87) = 0;
  *((void *)this + 86) = 0;
  long long v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v4 = dispatch_queue_create("frameUpdateQueue", v3);
  long long v5 = (void *)*((void *)this + 87);
  *((void *)this + 87) = v4;

  std::list<__CVBuffer *>::list(v6, 2);
  std::list<__CVBuffer *>::__move_assign((uint64_t *)this + 83, v6);
  std::__list_imp<SKCRenderSortInfo *>::clear(v6);
  *((void *)this + 86) = *((void *)this + 84);
}

void sub_20AE42584(_Unwind_Exception *a1)
{
  std::__list_imp<SKCRenderSortInfo *>::clear(v2);
  dispatch_queue_t v4 = *(std::__shared_weak_count **)(v1 + 616);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 600);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  SKCNode::~SKCNode((id *)v1);
  _Unwind_Resume(a1);
}

uint64_t SKCVideoNode::generatesVisibleGeometry(SKCVideoNode *this, const simd_float4x4 *a2)
{
  return 1;
}

float SKCVideoNode::getPlaybackRate(SKCVideoNode *this)
{
  return *((float *)this + 146);
}

void SKCVideoNode::setPlaybackRate(SKCVideoNode *this, float a2)
{
  *((float *)this + 146) = a2;
  long long v3 = (void *)*((void *)this + 71);
  if (v3 && !*((unsigned char *)this + 172))
  {
    objc_msgSend(v3, "setRate:");
    SKCNode::setDirty(this);
    SKCNode::recomputeFlags(this, 1);
  }
}

void SKCVideoNode::play(SKCVideoNode *this)
{
}

void SKCVideoNode::pause(SKCVideoNode *this)
{
}

double SKCVideoNode::getBatchInfo@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(void *)&double result = 0x300000004;
  *(void *)(a1 + 4) = 0x300000004;
  *(unsigned char *)a1 = 1;
  return result;
}

uint64_t SKCVideoNode::getNeedsCustomRenderOps()
{
  return 1;
}

uint64_t SKCVideoNode::getMaxBatchRenderElementCount()
{
  return 4;
}

uint64_t SKCVideoNode::addBatchRenderElements()
{
  return 0;
}

double SKCVideoNode::getBoundingBox(float32x4_t *this)
{
  (*(void (**)(float32x4_t *))(this->i64[0] + 104))(this);
  uint64_t v6 = 0;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  float32x4_t v8 = this[21];
  v7.i64[0] = vmulq_f32(vsubq_f32(v7, this[22]), v8).u64[0];
  long long v9 = xmmword_20AE9B480;
  v7.i64[1] = *((void *)&SKCBoundingBoxEmpty + 1);
  *(float *)&long long v9 = 0.5 * v8.f32[0];
  float v10 = vmuls_lane_f32(0.5, *(float32x2_t *)v8.f32, 1);
  long long v11 = xmmword_20AE9B490;
  *((float *)&v11 + SKCNode::setFlags(this, 66, 1) = v10;
  v13[0] = v7;
  v13[1] = v9;
  v13[2] = v11;
  v13[3] = xmmword_20AE9B4A0;
  do
  {
    *(long long *)((char *)&v14 + v6 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2, COERCE_FLOAT(v13[v6])), v3, *(float32x2_t *)&v13[v6], 1), v4, (float32x4_t)v13[v6], 2), v5, (float32x4_t)v13[v6], 3);
    ++v6;
  }
  while (v6 != 4);
  return *(double *)&v14;
}

void SKCVideoNode::addRenderOps(uint64_t a1, float32x4_t *a2, uint64_t **a3)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(NSObject **)(a1 + 696);
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN12SKCVideoNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEE_block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = a1;
  block[5] = a2;
  dispatch_sync(v6, block);
  if (*(void *)(a1 + 592))
  {
    uint64_t v7 = 0;
    __asm { FMOV            V2.4S, #1.0 }
    float32x4_t v13 = *(float32x4_t *)(a1 + 336);
    float32x4_t v14 = *(float32x4_t *)(a1 + 352);
    v13.i64[1] = *((void *)&_Q2 + 1);
    v14.i64[1] = 0;
    v41[0] = xmmword_20AE9BA00;
    v41[1] = unk_20AE9BA10;
    v41[2] = xmmword_20AE9BA20;
    v41[3] = unk_20AE9BA30;
    float32x4_t v15 = a2[2];
    float32x4_t v16 = a2[3];
    float32x4_t v17 = a2[4];
    float32x4_t v18 = a2[5];
    do
    {
      float32x4_t v19 = vmulq_f32(v13, vsubq_f32((float32x4_t)v41[v7], v14));
      v41[v7++] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, v19.f32[0]), v16, *(float32x2_t *)v19.f32, 1), v17, v19, 2), v18, v19, 3);
    }
    while (v7 != 4);
    uint64_t v20 = 0;
    unsigned __int32 v21 = (unsigned __int32)a2->i32[0] >> 2;
    int16x8_t v22 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(*(float32x4_t *)(a1 + 304), fminf(fmaxf(vmuls_lane_f32(a2[6].f32[0], *(float32x4_t *)(a1 + 304), 3) * *(float *)(a1 + 324), 0.0), 1.0)), (float32x4_t)vdupq_n_s32(0x437F0000u)));
    *(int16x4_t *)v22.i8 = vmovn_s32((int32x4_t)v22);
    unsigned __int32 v23 = vmovn_s16(v22).u32[0];
    do
    {
      *(_OWORD *)(a2[1].i64[1] + 16 * (v20 + a2->i32[0])) = v41[v20];
      *(void *)(a2[1].i64[0] + 8 * (v20 + a2->i32[0])) = qword_20AE9B9E0[v20];
      *(_DWORD *)(a2->i64[1] + 4 * (v20++ + a2->i32[0])) = v23;
    }
    while (v20 != 4);
    uint64_t v24 = *a3;
    if (*(void *)(a1 + 608))
    {
      uint64_t v25 = a2[17].i64[1];
      LODWORD(__p.__r_.__value_.__l.__data_) = 31;
      unint64_t v26 = v24[2];
      if (v26 >= v24[3])
      {
        uint64_t v27 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v24 + 1, (int *)&__p);
      }
      else
      {
        *(void *)unint64_t v26 = &unk_26BEEC420;
        *(_DWORD *)(v26 + 8) = 31;
        *(void *)(v26 + 24) = 0;
        *(void *)(v26 + 32) = 0;
        *(void *)(v26 + 16) = 0;
        *(void *)(v26 + 64) = 0;
        uint64_t v27 = v26 + 192;
        *(void *)(v26 + 96) = 0;
      }
      v24[2] = v27;
      *(void *)(v27 - 80) = v25;
      *(_OWORD *)(v27 - 64) = xmmword_20AE9A980;
      *(void *)(v27 - 48) = 0x30000000FLL;
      long long v31 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture2");
      jet_command_buffer::set_fragment_texture(v31, &__p, *(void *)(a1 + 608));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v28 = a2[10].i64[1];
      LODWORD(__p.__r_.__value_.__l.__data_) = 31;
      unint64_t v29 = v24[2];
      if (v29 >= v24[3])
      {
        uint64_t v30 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v24 + 1, (int *)&__p);
      }
      else
      {
        *(void *)unint64_t v29 = &unk_26BEEC420;
        *(_DWORD *)(v29 + 8) = 31;
        *(void *)(v29 + 24) = 0;
        *(void *)(v29 + 32) = 0;
        *(void *)(v29 + 16) = 0;
        *(void *)(v29 + 64) = 0;
        uint64_t v30 = v29 + 192;
        *(void *)(v29 + 96) = 0;
      }
      v24[2] = v30;
      *(void *)(v30 - 80) = v28;
      *(_OWORD *)(v30 - 64) = xmmword_20AE9A980;
      *(void *)(v30 - 48) = 0x30000000FLL;
    }
    unint64_t v32 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
    jet_command_buffer::set_vertex_buffer(v32, &__p, a2[20].i64[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int16x8_t v33 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_color");
    jet_command_buffer::set_vertex_buffer(v33, &__p, a2[21].i64[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unsigned __int32 v34 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_tex_coord");
    jet_command_buffer::set_vertex_buffer(v34, &__p, a2[21].i64[1]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    long long v35 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
    jet_command_buffer::set_fragment_texture(v35, &__p, *(void *)(a1 + 592));
    int v36 = 6 * v21;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    jet_command_buffer::draw_indexed(*a3, 3, a2[25].i64[0], 6 * v21, 6);
    uint64_t v37 = (_DWORD *)a2[41].i64[1];
    unsigned int v38 = v37[43];
    if (v38 <= v36 + 6) {
      unsigned int v38 = v36 + 6;
    }
    v37[43] = v38;
    ++v37[41];
    ++v37[37];
    a2->i32[0] += 4;
  }
}

void sub_20AE42BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN12SKCVideoNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEE_block_invoke(uint64_t a1)
{
}

void SKCVideoNode::updateVideoFrame(SKCVideoNode *this, SKCRenderInfo *a2)
{
  SKCRenderer::getBackingContext(*((void *)a2 + 13), &v8);
  *((unsigned char *)this + 588) = (*(unsigned int (**)(uint64_t))(*(void *)v8 + 136))(v8) == 1;
  float32x4_t v3 = (__CVBuffer *)*((void *)this + 82);
  if (v3)
  {
    *((void *)this + 82) = 0;
    float32x4_t v4 = *(void **)(*((void *)this + 86) + 8);
    *((void *)this + 86) = v4;
    if (v4 == (void *)((char *)this + 664))
    {
      float32x4_t v4 = (void *)*((void *)this + 84);
      *((void *)this + 86) = v4;
    }
    float32x4_t v5 = (__CVBuffer *)v4[2];
    if (v5)
    {
      CVPixelBufferRelease(v5);
      float32x4_t v4 = (void *)*((void *)this + 86);
    }
    v4[2] = v3;
    uint64_t v6 = v9;
    v7[0] = v8;
    v7[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SKCVideoNode::updateVideoFrame_api((uint64_t)this, v3, (uint64_t)v7);
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_20AE42CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void SKCVideoNode::updateVideoFrame_api(uint64_t a1, CVPixelBufferRef pixelBuffer, uint64_t a3)
{
  unsigned int Width = CVPixelBufferGetWidth(pixelBuffer);
  unsigned int Height = CVPixelBufferGetHeight(pixelBuffer);
  size_t PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
  if (*(unsigned char *)(a1 + 560))
  {
    *(float *)&unint64_t v9 = (float)Width;
    *((float *)&v9 + SKCNode::setFlags(this, 66, 1) = (float)Height;
    long long v31 = v9;
    SKCNode::setSize((SKCNode *)a1, &v31);
  }
  if (*(void *)a3)
  {
    float v10 = __dynamic_cast(*(const void **)a3, MEMORY[0x263F50770], MEMORY[0x263F50778], 0);
    if (v10)
    {
      long long v11 = v10;
      simd_float4 v12 = *(std::__shared_weak_count **)(a3 + 8);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      float32x4_t v13 = (CVMetalTextureCacheRef *)(a1 + 640);
      float32x4_t v14 = *(__CVMetalTextureCache **)(a1 + 640);
      float32x4_t v15 = (CFAllocatorRef *)MEMORY[0x263EFFB08];
      if (v14
        || ((*(void (**)(void *))(*(void *)v11 + 360))(v11),
            float32x4_t v16 = objc_claimAutoreleasedReturnValue(),
            CVMetalTextureCacheCreate(*v15, 0, v16, 0, (CVMetalTextureCacheRef *)(a1 + 640)),
            v16,
            (float32x4_t v14 = *v13) != 0))
      {
        CVMetalTextureCacheFlush(v14, 0);
        if (PlaneCount) {
          MTLPixelFormat v17 = MTLPixelFormatR8Unorm;
        }
        else {
          MTLPixelFormat v17 = MTLPixelFormatBGRA8Unorm;
        }
        CVMetalTextureRef textureOut = 0;
        CVMetalTextureRef image = 0;
        CFAllocatorRef v18 = *v15;
        if (!CVMetalTextureCacheCreateTextureFromImage(*v15, *v13, pixelBuffer, 0, v17, Width, Height, 0, &image))
        {
          if (*(void *)(a1 + 592))
          {
            float32x4_t v19 = *(std::__shared_weak_count **)(a1 + 600);
            *(_OWORD *)(a1 + 592) = 0u;
            if (v19) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
            }
          }
          uint64_t v20 = *(const void **)(a1 + 624);
          if (v20) {
            CFRelease(v20);
          }
          unsigned __int32 v21 = image;
          *(void *)(a1 + 624) = image;
          uint64_t v22 = CVMetalTextureGetTexture(v21);
          uint64_t v23 = (*(uint64_t (**)(void *, uint64_t))(*(void *)v11 + 408))(v11, v22);
          std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v31, v23);
        }
        if (PlaneCount
          && !CVMetalTextureCacheCreateTextureFromImage(v18, *v13, pixelBuffer, 0, MTLPixelFormatRG8Unorm, Width >> 1, Height >> 1, 1uLL, &textureOut))
        {
          if (*(void *)(a1 + 608))
          {
            uint64_t v24 = *(std::__shared_weak_count **)(a1 + 616);
            *(_OWORD *)(a1 + 608) = 0u;
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
          }
          uint64_t v25 = *(const void **)(a1 + 632);
          if (v25) {
            CFRelease(v25);
          }
          unint64_t v26 = textureOut;
          *(void *)(a1 + 632) = textureOut;
          uint64_t v27 = CVMetalTextureGetTexture(v26);
          uint64_t v28 = (*(uint64_t (**)(void *, uint64_t))(*(void *)v11 + 408))(v11, v27);
          std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v31, v28);
        }
      }
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
  }
}

void sub_20AE43070(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SKCVideoNode::setNextVideoFrame(SKCVideoNode *this, CVPixelBufferRef texture)
{
  float32x4_t v3 = (__CVBuffer *)*((void *)this + 82);
  if (v3 != texture)
  {
    if (v3)
    {
      CVPixelBufferRelease(v3);
      *((void *)this + 82) = 0;
    }
    if (texture)
    {
      *((void *)this + 82) = CVPixelBufferRetain(texture);
      SKCNode::setFlags(this, 66, 1);
    }
  }
}

void SKCVideoNode::checkForVideoFrame(SKCVideoNode *this, double a2)
{
  float32x4_t v4 = (void *)*((void *)this + 71);
  if (v4)
  {
    float32x4_t v5 = [v4 currentItem];
    uint64_t v6 = (void *)*((void *)this + 72);
    if (v6 != v5)
    {
      if (*((void *)this + 81))
      {
        objc_msgSend(v6, "removeOutput:");
        uint64_t v7 = (void *)*((void *)this + 81);
        *((void *)this + 8SKCNode::setFlags(this, 66, 1) = 0;
      }
      objc_storeStrong((id *)this + 72, v5);
    }
    if (v5 && !*((void *)this + 81))
    {
      uint64_t v8 = [MEMORY[0x263EFF9A0] dictionary];
      [v8 setObject:&unk_26BF047E0 forKey:*MEMORY[0x263F04180]];
      if (*((unsigned char *)this + 588))
      {
        unint64_t v9 = [NSNumber numberWithBool:1];
        [v8 setObject:v9 forKey:@"MetalCompatibility"];
      }
      else
      {
        unint64_t v9 = [NSNumber numberWithBool:1];
        [v8 setObject:v9 forKey:@"OpenGLESCompatibility"];
      }

      uint64_t v10 = [objc_alloc(MEMORY[0x263EFA830]) initWithPixelBufferAttributes:v8];
      long long v11 = (void *)*((void *)this + 81);
      *((void *)this + 8SKCNode::setFlags(this, 66, 1) = v10;

      [v5 addOutput:*((void *)this + 81)];
    }
  }
  simd_float4 v12 = (void *)*((void *)this + 81);
  if (v12)
  {
    long long v20 = 0uLL;
    uint64_t v21 = 0;
    [v12 itemTimeForHostTime:a2];
    float32x4_t v13 = (void *)*((void *)this + 81);
    long long v18 = v20;
    uint64_t v19 = v21;
    if ([v13 hasNewPixelBufferForItemTime:&v18])
    {
      if (!*((void *)this + 82))
      {
        float32x4_t v14 = (void *)*((void *)this + 81);
        long long v16 = v20;
        uint64_t v17 = v21;
        uint64_t v15 = [v14 copyPixelBufferForItemTime:&v16 itemTimeForDisplay:0];
        if (v15)
        {
          *((void *)this + 82) = v15;
          SKCNode::setFlags(this, 66, 1);
        }
      }
    }
  }
}

void sub_20AE432F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCVideoNode::update(NSObject **this, double a2, float a3)
{
  SKCNode::update((SKCNode *)this, a2, 1.0);
  float32x4_t v5 = this[87];
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 3221225472;
  v6[2] = ___ZN12SKCVideoNode6updateEdf_block_invoke;
  void v6[3] = &__block_descriptor_48_e5_v8__0l;
  void v6[4] = this;
  *(double *)&void v6[5] = a2;
  dispatch_async(v5, v6);
}

void ___ZN12SKCVideoNode6updateEdf_block_invoke(uint64_t a1)
{
}

BOOL SKCVideoNode::getNeedsUpdate(SKCVideoNode *this)
{
  if (SKCNode::getNeedsUpdate(this)) {
    return 1;
  }
  if (*((unsigned char *)this + 172)) {
    return 0;
  }
  return (*((unsigned char *)this + 171) & 0x60) != 0;
}

void SKCVideoNode::setPlayer(id *this, AVPlayer *a2)
{
}

id SKCVideoNode::getPlayer(id *this)
{
  return this[71];
}

void SKCVideoNode::loadAVAsset(SKCVideoNode *this, AVAsset *a2)
{
  float32x4_t v2 = (void *)*((void *)this + 71);
  id v3 = [MEMORY[0x263EFA800] playerItemWithAsset:a2];
  objc_msgSend(v2, "replaceCurrentItemWithPlayerItem:");
}

void sub_20AE43484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKCVideoNode::~SKCVideoNode(SKCVideoNode *this)
{
  *(void *)this = &unk_26BEEDEA0;
  [*((id *)this + 71) setRate:0.0];
  float32x4_t v2 = (void *)*((void *)this + 71);
  *((void *)this + 7SKCNode::setFlags(this, 66, 1) = 0;

  id v3 = (void *)*((void *)this + 87);
  *((void *)this + 87) = 0;

  float32x4_t v4 = (const void *)*((void *)this + 78);
  if (v4) {
    CFRelease(v4);
  }
  float32x4_t v5 = (const void *)*((void *)this + 79);
  if (v5) {
    CFRelease(v5);
  }
  uint64_t v6 = (__CVMetalTextureCache *)*((void *)this + 80);
  if (v6)
  {
    CVMetalTextureCacheFlush(v6, 0);
    CFRelease(*((CFTypeRef *)this + 80));
  }
  for (uint64_t i = *((void *)this + 84); (SKCVideoNode *)i != (SKCVideoNode *)((char *)this + 664); uint64_t i = *(void *)(i + 8))
    CVPixelBufferRelease(*(CVPixelBufferRef *)(i + 16));
  std::__list_imp<SKCRenderSortInfo *>::clear((void *)this + 83);
  uint64_t v8 = (__CVBuffer *)*((void *)this + 82);
  if (v8) {
    CVPixelBufferRelease(v8);
  }

  std::__list_imp<SKCRenderSortInfo *>::clear((void *)this + 83);
  unint64_t v9 = (std::__shared_weak_count *)*((void *)this + 77);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 75);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }

  SKCNode::~SKCNode((id *)this);
}

{
  uint64_t vars8;

  SKCVideoNode::~SKCVideoNode(this);

  JUMPOUT(0x21052EA30);
}

void *std::list<__CVBuffer *>::list(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  if (a2)
  {
    uint64_t v4 = 0;
    float32x4_t v5 = a1;
    do
    {
      uint64_t v6 = operator new(0x18uLL);
      v6[1] = a1;
      v6[2] = 0;
      *uint64_t v6 = v5;
      v5[1] = v6;
      *a1 = v6;
      ++v4;
      float32x4_t v5 = v6;
      a1[2] = v4;
    }
    while (a2 != v4);
  }
  return a1;
}

void sub_20AE4366C(_Unwind_Exception *a1)
{
  std::__list_imp<SKCRenderSortInfo *>::clear(v1);
  _Unwind_Resume(a1);
}

uint64_t std::list<__CVBuffer *>::__move_assign(uint64_t *a1, void *a2)
{
  return std::list<SKCNode *>::splice((uint64_t)a1, a1, a2);
}

uint64_t _SKStartCollectingPerformanceStatisticsForPid(int a1)
{
  int v18 = a1;
  uint64_t v1 = CSSymbolicatorCreateWithPid();
  uint64_t v3 = v2;
  if (CSIsNull()) {
    return 0;
  }
  uint64_t v10 = 0;
  long long v11 = &v10;
  uint64_t v12 = 0x4012000000;
  float32x4_t v13 = __Block_byref_object_copy__3;
  float32x4_t v14 = __Block_byref_object_dispose__3;
  uint64_t v15 = "";
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  CSSymbolicatorForeachSymbolWithMangledNameAtTime();
  uint64_t v5 = v11[6];
  uint64_t v6 = v11[7];
  if (CSIsNull()
    || (CSSymbolicatorGetTask(), (uint64_t mapped_memory_cache_for_task = create_mapped_memory_cache_for_task()) == 0))
  {
    CSRelease();
    uint64_t v4 = 0;
  }
  else
  {
    {
      getPerfDataMappingByPID(void)::perfDataMappingByPID = 0u;
      unk_267684218 = 0u;
      dword_267684228 = 1065353216;
    }
    uint64_t v19 = &v18;
    uint64_t v8 = std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>((uint64_t)&getPerfDataMappingByPID(void)::perfDataMappingByPID, &v18, (uint64_t)&std::piecewise_construct, &v19);
    *((void *)v8 + 3) = v1;
    *((void *)v8 + 4) = v3;
    *((void *)v8 + 5) = v5;
    *((void *)v8 + 6) = v6;
    uint64_t v4 = 1;
    *((void *)v8 + 7) = mapped_memory_cache_for_task;
  }
  _Block_object_dispose(&v10, 8);
  return v4;
}

void sub_20AE44DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t _SKStopCollectingPerformanceStatisticsForPid(int a1)
{
  int v4 = a1;
  {
    getPerfDataMappingByPID(void)::perfDataMappingByPID = 0u;
    unk_267684218 = 0u;
    dword_267684228 = 1065353216;
  }
  std::unordered_map<int,SKPerformanceDataMapping>::unordered_map((uint64_t)v3, (uint64_t)&getPerfDataMappingByPID(void)::perfDataMappingByPID);
  uint64_t v1 = std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::find<int>(v3, &v4);
  if (v1)
  {
    destroy_mapped_memory_cache();
    v1[5] = 0;
    v1[6] = 0;
    v1[7] = 0;
    CSRelease();
    v1[3] = 0;
    v1[4] = 0;
    std::__hash_table<std::__hash_value_type<unsigned short,int>,std::__unordered_map_hasher<unsigned short,std::__hash_value_type<unsigned short,int>,std::hash<unsigned short>,std::equal_to<unsigned short>,true>,std::__unordered_map_equal<unsigned short,std::__hash_value_type<unsigned short,int>,std::equal_to<unsigned short>,std::hash<unsigned short>,true>,std::allocator<std::__hash_value_type<unsigned short,int>>>::erase(v3, v1);
  }
  std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::~__hash_table((uint64_t)v3);
  return 1;
}

void sub_20AE44F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *_SKGetPerformanceStatisticsForPid(int a1)
{
  int v4 = a1;
  {
    getPerfDataMappingByPID(void)::perfDataMappingByPID = 0u;
    unk_267684218 = 0u;
    dword_267684228 = 1065353216;
  }
  std::unordered_map<int,SKPerformanceDataMapping>::unordered_map((uint64_t)v3, (uint64_t)&getPerfDataMappingByPID(void)::perfDataMappingByPID);
  uint64_t v1 = std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::find<int>(v3, &v4);
  if (v1)
  {
    if (CSSymbolGetRange())
    {
      clear_mapped_memory();
      uint64_t v1 = 0;
      mapped_memory_read();
    }
    else
    {
      uint64_t v1 = 0;
    }
  }
  std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::~__hash_table((uint64_t)v3);

  return v1;
}

void sub_20AE453A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  uint64_t v6 = v5;

  std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void _perfUpdateStatistics(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (a1 && a2)
  {
    int v6 = *(_DWORD *)(a2 + 40);
    unsigned int v7 = 1;
    if (v6 >= 2)
    {
      float v8 = *(double *)(a2 + 8) - *(double *)(a2 + 24);
      if (v8 > 0.0) {
        unsigned int v7 = (float)((float)(v6 - 1) / v8);
      }
    }
    BOOL v9 = (byte_2676843D1 & 1) == 0;
    if (qword_2676841D8) {
      float v10 = *(float *)&dword_2676841E8 / (float)qword_2676841D8;
    }
    else {
      float v10 = 0.0;
    }
    double v11 = *(double *)(a1 + 16);
    int v12 = *(_DWORD *)(a1 + 40);
    _skPerformanceData[0] = 1;
    float32x4_t v13 = &_skPerformanceData[48 * ((byte_2676843D1 & 1) == 0)];
    *((_DWORD *)v13 + SKCNode::setFlags(this, 66, 1) = *(_DWORD *)(a1 + 156);
    *((_DWORD *)v13 + 2) = v7;
    id v35 = v5;
    uint64_t v14 = [v5 preferredFramesPerSecond];
    float v15 = v11 / (double)v12 * 1000.0;
    uint64_t v16 = &_skPerformanceData[48 * v9];
    *((float *)v16 + 12) = (float)v14;
    float v17 = v10 + v15;
    *((float *)v16 + 3) = v17;
    uint64_t v18 = qword_267684160;
    float v19 = 0.0;
    float v20 = 0.0;
    if (qword_267684160) {
      float v20 = *(float *)&dword_267684170 / (float)qword_267684160;
    }
    *(float *)&_skPerformanceData[48 * v9 + 20] = v20;
    uint64_t v21 = qword_267684178;
    id v5 = v35;
    if (qword_267684178) {
      float v19 = *(float *)&dword_267684188 / (float)qword_267684178;
    }
    *(float *)&_skPerformanceData[48 * v9 + 24] = v19;
    float v22 = 0.0;
    float v23 = 0.0;
    if (qword_2676841C0) {
      float v23 = *(float *)&dword_2676841D0 / (float)qword_2676841C0;
    }
    *(float *)&_skPerformanceData[48 * v9 + 32] = v23;
    uint64_t v24 = qword_267684190;
    if (qword_267684190) {
      float v22 = *(float *)&dword_2676841A0 / (float)qword_267684190;
    }
    float v25 = v22 - v23;
    *(float *)&_skPerformanceData[48 * v9 + 28] = v25;
    float v26 = 0.0;
    float v27 = 0.0;
    if (qword_2676841A8) {
      float v27 = *(float *)&dword_2676841B8 / (float)qword_2676841A8;
    }
    *(float *)&_skPerformanceData[48 * v9 + 36] = v27;
    if (_performanceFrame) {
      float v26 = *(float *)&dword_267684158 / (float)_performanceFrame;
    }
    float v28 = 0.0;
    float v29 = 0.0;
    if (v24) {
      float v29 = *(float *)&dword_2676841A0 / (float)v24;
    }
    if (v18) {
      float v28 = *(float *)&dword_267684170 / (float)v18;
    }
    float v30 = v29 + v28;
    float v31 = 0.0;
    float v32 = 0.0;
    if (v21) {
      float v32 = *(float *)&dword_267684188 / (float)v21;
    }
    float v33 = v26 - (float)(v30 + v32);
    unsigned __int32 v34 = &_skPerformanceData[48 * v9];
    *((float *)v34 + 4) = v33;
    *((float *)v34 + 10) = v10;
    if (qword_2676841F0) {
      float v31 = *(float *)&dword_267684200 / (float)qword_2676841F0;
    }
    *(float *)&_skPerformanceData[48 * v9 + 44] = v31;
    if ((float)(v17 - (float)(v19 + (float)(v25 + (float)(v20 + (float)(v27 + v33))))) >= 0.0) {
      byte_2676843D1 = v9;
    }
    _performanceFrame = 0;
    dword_267684158 = 0;
    qword_267684160 = 0;
    dword_267684170 = 0;
    qword_267684178 = 0;
    dword_267684188 = 0;
    qword_267684190 = 0;
    dword_2676841A0 = 0;
    qword_2676841C0 = 0;
    dword_2676841D0 = 0;
    qword_2676841A8 = 0;
    dword_2676841B8 = 0;
    qword_2676841D8 = 0;
    dword_2676841E8 = 0;
    qword_2676841F0 = 0;
    dword_267684200 = 0;
  }
}

void sub_20AE45748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void _perfBeginClientUpdate(double a1)
{
  qword_267684150 = *(void *)&a1;
}

float _perfEndClientUpdate(double a1)
{
  float v1 = (a1 - *(double *)&qword_267684150) * 1000.0;
  float result = *(float *)&dword_267684158 + fmaxf(v1, 0.0);
  dword_267684158 = LODWORD(result);
  ++_performanceFrame;
  return result;
}

void _perfBeginPhysics(double a1)
{
  qword_267684168 = *(void *)&a1;
}

float _perfEndPhysics(double a1)
{
  float v1 = (a1 - *(double *)&qword_267684168) * 1000.0;
  float result = *(float *)&dword_267684170 + fmaxf(v1, 0.0);
  dword_267684170 = LODWORD(result);
  ++qword_267684160;
  return result;
}

void _perfBeginConstraints(double a1)
{
  qword_267684180 = *(void *)&a1;
}

float _perfEndConstraints(double a1)
{
  float v1 = (a1 - *(double *)&qword_267684180) * 1000.0;
  float result = *(float *)&dword_267684188 + fmaxf(v1, 0.0);
  dword_267684188 = LODWORD(result);
  ++qword_267684178;
  return result;
}

void _perfBeginActions(double a1)
{
  qword_267684198 = *(void *)&a1;
}

float _perfEndActions(double a1)
{
  float v1 = (a1 - *(double *)&qword_267684198) * 1000.0;
  float result = *(float *)&dword_2676841A0 + fmaxf(v1, 0.0);
  dword_2676841A0 = LODWORD(result);
  ++qword_267684190;
  ++qword_2676841C0;
  return result;
}

void _perfBeginEmitters(double a1)
{
  qword_2676841C8 = *(void *)&a1;
}

float _perfEndEmitters(double a1)
{
  float v1 = (a1 - *(double *)&qword_2676841C8) * 1000.0;
  float result = *(float *)&dword_2676841D0 + fmaxf(v1, 0.0);
  dword_2676841D0 = LODWORD(result);
  return result;
}

void _perfBeginRender(double a1)
{
  qword_2676841B0 = *(void *)&a1;
}

float _perfEndRender(double a1)
{
  float v1 = (a1 - *(double *)&qword_2676841B0) * 1000.0;
  float result = *(float *)&dword_2676841B8 + fmaxf(v1, 0.0);
  dword_2676841B8 = LODWORD(result);
  ++qword_2676841A8;
  return result;
}

float _perfMarkCADisplayLinkStart(double a1)
{
  if (*(double *)&qword_2676841E0 != 0.0)
  {
    float v1 = (a1 - *(double *)&qword_2676841E0) * 1000.0;
    *(float *)&a1 = fmaxf(v1, 0.0) + *(float *)&dword_2676841E8;
    dword_2676841E8 = LODWORD(a1);
    ++qword_2676841D8;
  }
  return *(float *)&a1;
}

void _perfMarkCADisplayLinkEnd(double a1)
{
  qword_2676841E0 = *(void *)&a1;
}

void _perfStartRequestDrawable(double a1)
{
  qword_2676841F8 = *(void *)&a1;
}

float _perfEndRequestDrawable(double a1)
{
  float v1 = (a1 - *(double *)&qword_2676841F8) * 1000.0;
  float result = *(float *)&dword_267684200 + fmaxf(v1, 0.0);
  dword_267684200 = LODWORD(result);
  ++qword_2676841F0;
  return result;
}

char *std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::__emplace_unique_key_args<int,std::piecewise_construct_t const&,std::tuple<int const&>,std::tuple<>>(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    float v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      double v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = *((void *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          double v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  double v11 = (char *)operator new(0x40uLL);
  *(void *)double v11 = 0;
  *((void *)v11 + SKCNode::setFlags(this, 66, 1) = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((void *)v11 + 7) = 0;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  float v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *(void *)double v11 = *v20;
LABEL_38:
    *float v20 = v11;
    goto LABEL_39;
  }
  *(void *)double v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*(void *)v11)
  {
    unint64_t v21 = *(void *)(*(void *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    float v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_20AE45C04(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<int,SKPerformanceDataMapping>::unordered_map(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(int **)(a2 + 16); i; uint64_t i = *(int **)i)
    std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::__emplace_unique_key_args<int,std::pair<int const,SKPerformanceDataMapping> const&>(a1, i + 4, (_OWORD *)i + 1);
  return a1;
}

void sub_20AE45C78(_Unwind_Exception *a1)
{
  std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::__emplace_unique_key_args<int,std::pair<int const,SKPerformanceDataMapping> const&>(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint8x8_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      float v10 = *v9;
      if (*v9)
      {
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == v6) {
              return v10;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7) {
                v11 %= v7;
              }
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3) {
              break;
            }
          }
          float v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
  float v10 = operator new(0x40uLL);
  *float v10 = 0;
  v10[1] = v6;
  long long v12 = a3[1];
  *((_OWORD *)v10 + SKCNode::setFlags(this, 66, 1) = *a3;
  *((_OWORD *)v10 + 2) = v12;
  *((_OWORD *)v10 + 3) = a3[2];
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  float v20 = *(void **)(*(void *)a1 + 8 * v3);
  if (v20)
  {
    *float v10 = *v20;
LABEL_38:
    *float v20 = v10;
    goto LABEL_39;
  }
  *float v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v19 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    unint64_t v21 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    float v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_20AE45EA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  unint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

uint64_t *std::__hash_table<std::__hash_value_type<int,SKPerformanceDataMapping>,std::__unordered_map_hasher<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,SKPerformanceDataMapping>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,SKPerformanceDataMapping>>>::find<int>(void *a1, int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (*(void *)&v2 - 1) & v3;
  }
  unint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (float result = *v6; result; float result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void SKCStats::SKCStats(SKCStats *this)
{
  this->_vptr$SKCStats = (void **)&unk_26BEEDFA0;
  this->clientUpdate.duration = 0.0;
  this->update.duration = 0.0;
  this->physics.duration = 0.0;
  this->physics.bodyCount = 0;
  this->constraints.duration = 0.0;
  this->constraints.constraintCount = 0;
  *(_OWORD *)&this->frameBeginTime = 0u;
  *(_OWORD *)&this->baseTime = 0u;
  this->frameCount = 0;
  *(_OWORD *)&this->render.duration = 0u;
  *(_OWORD *)&this->render.nodeTraversalCount = 0u;
  *(void *)&this->render.passCount = 0;
}

void SKCStats::~SKCStats(SKCStats *this)
{
}

SKCStats *SKCStats::beginFrame(SKCStats *this, double a2)
{
  if (this->baseTime <= 0.0) {
    this->baseTime = a2;
  }
  this->frameBeginTime = a2;
  this->currentTime = a2;
  return this;
}

double SKCStats::endFrame(SKCStats *this, double a2)
{
  this->currentTime = a2;
  float v2 = a2 - this->frameBeginTime;
  double result = fmaxf(v2, 0.0);
  this->frameDuration = result;
  ++this->frameCount;
  return result;
}

SKCStats *SKCStats::beginClientUpdate(SKCStats *this, double a2)
{
  this->clientUpdate.beginTime = a2;
  return this;
}

double SKCStats::endClientUpdate(SKCStats *this, double a2)
{
  float v2 = a2 - this->clientUpdate.beginTime;
  double result = fmaxf(v2, 0.0);
  this->clientUpdate.duration = result;
  return result;
}

SKCStats *SKCStats::beginUpdate(SKCStats *this, double a2)
{
  this->update.beginTime = a2;
  return this;
}

SKCStats *SKCStats::beginPhysics(SKCStats *this, double a2)
{
  this->physics.beginTime = a2;
  return this;
}

double SKCStats::endPhysics(SKCStats *this, double a2)
{
  float v2 = a2 - this->physics.beginTime;
  double result = fmaxf(v2, 0.0);
  this->physics.duration = result;
  return result;
}

SKCStats *SKCStats::beginConstraints(SKCStats *this, double a2)
{
  this->constraints.beginTime = a2;
  return this;
}

double SKCStats::endConstraints(SKCStats *this, double a2)
{
  float v2 = a2 - this->constraints.beginTime;
  double result = fmaxf(v2, 0.0);
  this->constraints.duration = result;
  return result;
}

SKCStats *SKCStats::beginRender(SKCStats *this, double a2)
{
  this->render.beginTime = a2;
  return this;
}

double SKCStats::endRender(SKCStats *this, double a2)
{
  float v2 = a2 - this->render.beginTime;
  double result = fmaxf(v2, 0.0);
  this->render.duration = result;
  return result;
}

int32x2_t SKCStats::operator+@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_26BEEDFA0;
  *(_OWORD *)(a3 + 120) = *(_OWORD *)(a1 + 120);
  *(_OWORD *)(a3 + 136) = *(_OWORD *)(a1 + 136);
  *(_OWORD *)(a3 + 152) = *(_OWORD *)(a1 + 152);
  *(void *)(a3 + 168) = *(void *)(a1 + 168);
  *(_OWORD *)(a3 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a3 + 72) = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a3 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a3 + 104) = *(_OWORD *)(a1 + 104);
  *(_OWORD *)(a3 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 40);
  return SKCStats::operator+=(a3, a2);
}

int32x2_t SKCStats::operator+=(uint64_t a1, uint64_t a2)
{
  if (*(double *)(a1 + 24) <= 0.0) {
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
  }
  *(double *)(a1 + 32) = fmax(*(double *)(a1 + 32), *(double *)(a2 + 32));
  double v2 = *(double *)(a2 + 16) + *(double *)(a1 + 16);
  double v3 = fmax(*(double *)(a1 + 8), *(double *)(a2 + 8));
  *(_DWORD *)(a1 + 40) += *(_DWORD *)(a2 + 40);
  *(double *)(a1 + 8) = v3;
  *(double *)(a1 + 16) = v2;
  *(double *)(a1 + 56) = *(double *)(a2 + 56) + *(double *)(a1 + 56);
  *(double *)(a1 + 72) = *(double *)(a2 + 72) + *(double *)(a1 + 72);
  *(double *)(a1 + 88) = *(double *)(a2 + 88) + *(double *)(a1 + 88);
  *(_DWORD *)(a1 + 96) += *(_DWORD *)(a2 + 96);
  *(double *)(a1 + 112) = *(double *)(a2 + 112) + *(double *)(a1 + 112);
  *(_DWORD *)(a1 + 120) += *(_DWORD *)(a2 + 120);
  *(double *)(a1 + 136) = *(double *)(a2 + 136) + *(double *)(a1 + 136);
  *(_DWORD *)(a1 + 160) += *(_DWORD *)(a2 + 160);
  *(int32x4_t *)(a1 + 144) = vaddq_s32(*(int32x4_t *)(a1 + 144), *(int32x4_t *)(a2 + 144));
  int32x2_t result = vadd_s32(*(int32x2_t *)(a1 + 164), *(int32x2_t *)(a2 + 164));
  *(int32x2_t *)(a1 + 164) = result;
  return result;
}

void sub_20AE462C4(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C40FA304213);
  _Unwind_Resume(a1);
}

void sub_20AE463AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *SKCEmitterNode::addSubEmitterNode(void *this, SKCEmitterNode *a2)
{
  if (a2)
  {
    uint64_t v3 = (uint64_t)this;
    if (*((unsigned char *)a2 + 988))
    {
      *(void *)((char *)a2 + 980) = 0;
      *((void *)a2 + 124) = this;
      *((unsigned char *)a2 + 989) = 0;
      SKCEmitterNode::initializeSystem(a2);
    }
    this = operator new(0x18uLL);
    this[1] = v3 + 1000;
    this[2] = a2;
    uint64_t v4 = *(void *)(v3 + 1000);
    *this = v4;
    *(void *)(v4 + 8) = this;
    *(void *)(v3 + 1000) = this;
    ++*(void *)(v3 + 1016);
    *(unsigned char *)(v3 + 989) = 1;
    if (*(unsigned char *)(v3 + 988))
    {
      SKCEmitterNode::initializeSystem((SKCEmitterNode *)v3);
    }
  }
  return this;
}

void sub_20AE465E0(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_20AE4679C(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_20AE470BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_20AE472B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE47364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKCEmitterNode::setTargetNode(SKCEmitterNode *this, SKNode *a2)
{
  uint64_t v3 = a2;
  if (!v3) {
    uint64_t v3 = (SKNode *)*((id *)this + 1);
  }
  id obj = v3;
  id WeakRetained = (SKNode *)objc_loadWeakRetained((id *)this + 71);

  unint64_t v5 = obj;
  if (obj != WeakRetained)
  {
    id v6 = objc_loadWeakRetained((id *)this + 71);
    unint64_t v7 = v6;
    if (v6) {
      SKCNode::removeInternalChild((SKCNode *)[v6 _backingNode], *((id **)this + 74));
    }

    *((_DWORD *)this + 174) = 0;
    objc_storeWeak((id *)this + 71, obj);
    SKCEmitterNode::addParticlesToTargetNode((id *)this);
    unint64_t v5 = obj;
  }
}

void sub_20AE47434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE475B8(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_20AE47798(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_20AE479A0(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_20AE47B8C(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_20AE47D6C(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_20AE480B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE48904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKCEmitterNode::resetSimulation(SKCParticleSystem **this)
{
  if (!*((unsigned char *)this + 988))
  {
    SKCParticleSystem::removePatricles(this[75], 0, *((_DWORD *)this[75] + 21));
    SKCParticleSystem::compact(this[75]);
    *((_DWORD *)this + 174) = 0;
    this[86] = 0;
    this[91] = 0;
    double v2 = skCurrentTime();
    *((double *)this + 88) = v2;
    float v3 = *((float *)this + 228);
    if (v3 <= 0.0) {
      double v4 = 1.79769313e308;
    }
    else {
      double v4 = v2 + 1.0 / v3;
    }
    *((double *)this + 89) = v4;
  }
}

void sub_20AE48A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE48B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE48BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE49310(_Unwind_Exception *a1)
{
  double v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE499C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE49F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE4A034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4A114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE4A1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SKEmitterNode;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void SKCEmitterNode::removeSubEmitterNodes(SKCEmitterNode *this)
{
  double v2 = (void *)((char *)this + 1000);
  for (uint64_t i = (void *)*((void *)this + 126); i != v2; uint64_t i = (void *)i[1])
  {
    *(void *)(i[2] + 992) = 0;
    i[2] = 0;
  }
  std::__list_imp<SKCRenderSortInfo *>::clear(v2);
  SKCEmitterNode::resetSimulation((SKCParticleSystem **)this);
  *((unsigned char *)this + 989) = 0;
}

void SKCEmitterNode::removeSubEmitterNode(SKCEmitterNode *this, SKCEmitterNode *a2)
{
  if (a2)
  {
    float v3 = (SKCEmitterNode **)((char *)this + 1000);
    for (uint64_t i = (SKCEmitterNode **)*((void *)this + 126); i != v3; uint64_t i = (SKCEmitterNode **)i[1])
    {
      if (i[2] == a2)
      {
        if (i != v3)
        {
          i[2] = 0;
          unint64_t v5 = *i;
          *((void *)v5 + SKCNode::setFlags(this, 66, 1) = i[1];
          *(void *)i[1] = v5;
          --*((void *)this + 127);
          operator delete(i);
        }
        break;
      }
    }
  }
  if (!*((void *)this + 127))
  {
    SKCEmitterNode::resetSimulation((SKCParticleSystem **)this);
    *((unsigned char *)this + 989) = 0;
  }
}

void sub_20AE4A75C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4AE90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void SKCEmitterNode::SKCEmitterNode(SKCEmitterNode *this)
{
  SKCNode::SKCNode(this);
  *(void *)uint64_t v2 = &unk_26BEEDAC0;
  *(_WORD *)(v2 + 560) = 0;
  *(void *)(v2 + 568) = 0;
  *(_OWORD *)(v2 + 576) = 0u;
  *(_OWORD *)(v2 + 592) = 0u;
  *(void *)(v2 + 608) = 0x3FF0000000000000;
  *(unsigned char *)(v2 + 616) = 0;
  *(void *)(v2 + 764) = 0;
  float v3 = (void *)(v2 + 848);
  *(void *)(v2 + 848) = v2 + 848;
  *(void *)(v2 + 856) = v2 + 848;
  *(void *)(v2 + 864) = 0;
  *(void *)(v2 + 960) = 0;
  *(_DWORD *)(v2 + 976) = 0;
  *(void *)(v2 + 1000) = v2 + 1000;
  *(void *)(v2 + 1008) = v2 + 1000;
  *(void *)(v2 + 1016) = 0;
  uint64_t v4 = +[SKNode node];
  unint64_t v5 = (void *)*((void *)this + 73);
  *((void *)this + 73) = v4;

  *((void *)this + 74) = [*((id *)this + 73) _backingNode];
  double v6 = skCurrentTime();
  *((double *)this + 88) = v6;
  *((double *)this + 90) = v6;
  *((void *)this + 9SKCNode::setFlags(this, 66, 1) = 0;
  *((_OWORD *)this + 39) = 0u;
  *((_OWORD *)this + 40) = 0u;
  *((_OWORD *)this + 4SKCNode::setFlags(this, 66, 1) = 0u;
  *((_OWORD *)this + 42) = 0u;
  *((void *)this + 86) = 0;
  *((_OWORD *)this + 46) = *MEMORY[0x263F001B0];
  *((void *)this + 94) = 0;
  *((_DWORD *)this + 190) = 0;
  *((void *)this + 104) = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *((void *)this + 98) = _D0;
  *((_DWORD *)this + 198) = 1065353216;
  *((_DWORD *)this + 228) = 0;
  *((_DWORD *)this + 203) = 0;
  *(_OWORD *)((char *)this + 796) = 0u;
  long long v12 = (void *)*((void *)this + 120);
  *((void *)this + 120) = 0;

  *(_OWORD *)((char *)this + 872) = 0u;
  *((_DWORD *)this + 237) = 1065353216;
  *((void *)this + 12SKCNode::setFlags(this, 66, 1) = 0;
  *((_DWORD *)this + 232) = 0;
  *((void *)this + 115) = 0;
  *((_DWORD *)this + 229) = 0;
  *(_OWORD *)((char *)this + 888) = xmmword_20AE9BAC0;
  *((void *)this + 113) = 0;
  *((_DWORD *)this + 210) = 0;
  *(_OWORD *)((char *)this + 932) = xmmword_20AE9B2D0;
  *((void *)this + 119) = 0;
  *((_DWORD *)this + 174) = 0;
  *((_OWORD *)this + 5SKCNode::setFlags(this, 66, 1) = 0u;
  std::__list_imp<SKCRenderSortInfo *>::clear(v3);
  float v13 = *((float *)this + 228);
  if (v13 <= 0.0) {
    double v14 = 1.79769313e308;
  }
  else {
    double v14 = 1.0 / v13 + *((double *)this + 88);
  }
  *((double *)this + 89) = v14;
  *((_DWORD *)this + 175) = vcvtps_s32_f32((float)((float)(v13* (float)(*((float *)this + 229) + (float)(*((float *)this + 230) * 0.5)))* 1.04)+ 2.0);
  *((_WORD *)this + 280) = 257;
  uint64_t v15 = *((void *)this + 74);
  unint64_t v16 = *(void **)(v15 + 568);
  *(void *)(v15 + 568) = 0;

  *(void *)((char *)this + 980) = 0x3E800000064;
  *((_WORD *)this + 494) = 257;
  *((void *)this + 124) = 0;
}

void sub_20AE4B29C(_Unwind_Exception *a1)
{
  std::__list_imp<SKCRenderSortInfo *>::clear(v4);

  std::__list_imp<SKCRenderSortInfo *>::clear(v2);
  objc_destroyWeak(v3);
  SKCNode::~SKCNode(v1);
  _Unwind_Resume(a1);
}

void sub_20AE4B590(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20AE4B688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE4B710(_Unwind_Exception *a1)
{
  float v3 = v2;

  _Unwind_Resume(a1);
}

void sub_20AE4B840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4B948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE4BAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE4BB24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4BBB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE4BC34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4BD00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4C0D4(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1080C4001E39035);

  _Unwind_Resume(a1);
}

void sub_20AE4C318(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4C448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4C600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4C704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, objc_super a9)
{
  a9.super_class = (Class)SKVideoNode;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20AE4C850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4C8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4CAC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4CBC4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE4CCC0(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20AE4CDF4(_Unwind_Exception *a1)
{
  unint64_t v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20AE4CEE4(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE4CFF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4D0B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4D114(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4D178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4D2CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4D3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4D4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4D520(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C405FC3EF92);
  _Unwind_Resume(a1);
}

void sub_20AE4D964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4DCDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4DE74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4DECC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  float v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)SKTextureCache;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20AE4E2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE4E3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4E6E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4EAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_20AE4EC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE4ECF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4EFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE4F0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4F1BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4F314(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE4FC9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_20AE4FF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5007C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE50198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE50208(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE502AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE507EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE50AF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE50DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE50E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE50F04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE50FF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE511E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE51478(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE51778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE517FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5188C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE51A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE51BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE51D94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE520B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE52274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE52530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE52744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_20AE528C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_20AE52AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  size_t v18 = *(std::__shared_weak_count **)(v16 - 72);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  uint64_t v19 = *(std::__shared_weak_count **)(v16 - 56);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AE52C34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AE52D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_ea8_40c39_ZTSNSt3__110shared_ptrI11jet_textureEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_ea8_40c39_ZTSNSt3__110shared_ptrI11jet_textureEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_20AE52F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE53024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE530B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE531EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5335C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE53540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE535AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE53674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE537A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE538EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE539E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Block_object_dispose((const void *)(v18 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20AE53B38(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AE53C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  _Block_object_dispose(&a19, 8);
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__4(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_20AE53EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Block_object_dispose(&a17, 8);
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }

  _Unwind_Resume(a1);
}

void sub_20AE54060(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AE541A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Block_object_dispose((const void *)(v18 - 64), 8);

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__374(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__375(uint64_t a1)
{
}

void sub_20AE54324(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AE54ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  _Unwind_Resume(a1);
}

uint64_t jet_texture::get_bytes_per_element(jet_texture *this)
{
  unsigned int v2 = (*(uint64_t (**)(jet_texture *))(*(void *)this + 32))(this) - 7;
  if (v2 > 6) {
    int v3 = 1;
  }
  else {
    int v3 = dword_20AE9BBCC[v2];
  }
  unsigned int v4 = (*(uint64_t (**)(jet_texture *))(*(void *)this + 32))(this) - 1;
  if (v4 > 0xC) {
    int v5 = 4;
  }
  else {
    int v5 = dword_20AE9BBE8[v4];
  }
  return (v5 * v3);
}

void sub_20AE54CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE54E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::pair<std::string,SKAttributeValue * {__strong}>::~pair((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_20AE54F5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE54FE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE55194(_Unwind_Exception *a1)
{
  int v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20AE55238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE553DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE554F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE55750(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5651C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_20AE56BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE56D0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE56E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE571D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE574F4(_Unwind_Exception *a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);

  std::__hash_table<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::__unordered_map_hasher<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::hash<CGImage *>,std::equal_to<CGImage *>,true>,std::__unordered_map_equal<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::equal_to<CGImage *>,std::hash<CGImage *>,true>,std::allocator<std::__hash_value_type<CGImage *,SKTexture * {__strong}>>>::~__hash_table((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AE57660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE57728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE57924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE57C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_20AE57DE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE57FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE580E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE58148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  float v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)SKTextureAtlas;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_20AE58540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a47 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_20AE589A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE59088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, void *a19, void *a20,uint64_t a21,void *a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_20AE5939C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5949C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE597D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15)
{
  _Unwind_Resume(a1);
}

void sub_20AE59920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SKTexture * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKTexture * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKTexture * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKTexture * {__strong}>>>::__emplace_unique_key_args<std::string,std::pair<std::string,SKTexture * {__strong}>>(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    unint64_t v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    float v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v3);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v9)
        {
          if (std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10) {
              v15 %= v10;
            }
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t v16 = operator new(0x30uLL);
  long long v17 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + SKCNode::setFlags(this, 66, 1) = 0;
  uint64_t v18 = *((void *)a3 + 2);
  uint64_t v19 = *((void *)a3 + 3);
  *((void *)a3 + 2) = 0;
  *((void *)a3 + 3) = 0;
  v29[0] = v16;
  v29[1] = a1 + 16;
  void *v16 = 0;
  v16[1] = v9;
  *((_OWORD *)v16 + SKCNode::setFlags(this, 66, 1) = v17;
  _OWORD v16[4] = v18;
  void v16[5] = v19;
  char v30 = 1;
  float v20 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v21 = *(float *)(a1 + 32);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    BOOL v22 = 1;
    if (v10 >= 3) {
      BOOL v22 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v23 = v22 | (2 * v10);
    unint64_t v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24) {
      size_t v25 = v24;
    }
    else {
      size_t v25 = v23;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v25);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  float v26 = *(void **)(*(void *)a1 + 8 * v3);
  if (v26)
  {
    *(void *)v29[0] = *v26;
    *float v26 = v29[0];
  }
  else
  {
    *(void *)v29[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v29[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v29[0])
    {
      unint64_t v27 = *(void *)(*(void *)v29[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v27 >= v10) {
          v27 %= v10;
        }
      }
      else
      {
        v27 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v27) = v29[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v29[0];
  v29[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)v29, 0);
  return i;
}

void sub_20AE59BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SKAttributeValue * {__strong}>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::__unordered_map_hasher<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::hash<CGImage *>,std::equal_to<CGImage *>,true>,std::__unordered_map_equal<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::equal_to<CGImage *>,std::hash<CGImage *>,true>,std::allocator<std::__hash_value_type<CGImage *,SKTexture * {__strong}>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::__unordered_map_hasher<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::hash<CGImage *>,std::equal_to<CGImage *>,true>,std::__unordered_map_equal<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::equal_to<CGImage *>,std::hash<CGImage *>,true>,std::allocator<std::__hash_value_type<CGImage *,SKTexture * {__strong}>>>::__deallocate_node(a1, *(id **)(a1 + 16));
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::__unordered_map_hasher<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::hash<CGImage *>,std::equal_to<CGImage *>,true>,std::__unordered_map_equal<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::equal_to<CGImage *>,std::hash<CGImage *>,true>,std::allocator<std::__hash_value_type<CGImage *,SKTexture * {__strong}>>>::__deallocate_node(uint64_t a1, id *a2)
{
  if (a2)
  {
    unsigned int v2 = a2;
    do
    {
      unint64_t v3 = (id *)*v2;

      operator delete(v2);
      unsigned int v2 = v3;
    }
    while (v3);
  }
}

void *std::__hash_table<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::__unordered_map_hasher<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::hash<CGImage *>,std::equal_to<CGImage *>,true>,std::__unordered_map_equal<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::equal_to<CGImage *>,std::hash<CGImage *>,true>,std::allocator<std::__hash_value_type<CGImage *,SKTexture * {__strong}>>>::find<CGImage *>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  __n128 result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v10 == v5)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::__unordered_map_hasher<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::hash<CGImage *>,std::equal_to<CGImage *>,true>,std::__unordered_map_equal<CGImage *,std::__hash_value_type<CGImage *,SKTexture * {__strong}>,std::equal_to<CGImage *>,std::hash<CGImage *>,true>,std::allocator<std::__hash_value_type<CGImage *,SKTexture * {__strong}>>>::__emplace_unique_key_args<CGImage *,std::piecewise_construct_t const&,std::tuple<CGImage * const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    unint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  unint64_t v15 = (void *)(a1 + 16);
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    BOOL v18 = 1;
    if (v10 >= 3) {
      BOOL v18 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v10);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    std::__hash_table<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,SKCTileMapNodeRenderBatch>>>::__rehash<true>(a1, v21);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v22 = *(void *)a1;
  unint64_t v23 = *(void **)(*(void *)a1 + 8 * v4);
  if (v23)
  {
    *uint64_t i = *v23;
LABEL_38:
    *unint64_t v23 = i;
    goto LABEL_39;
  }
  *uint64_t i = *v15;
  *unint64_t v15 = i;
  *(void *)(v22 + 8 * v4) = v15;
  if (*i)
  {
    unint64_t v24 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v24 >= v10) {
        v24 %= v10;
      }
    }
    else
    {
      v24 &= v10 - 1;
    }
    unint64_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_20AE59FAC(_Unwind_Exception *a1)
{
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,void *>>>::operator()[abi:ne180100](v2, v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CGImage *,SKTexture * {__strong}>,void *>>>::operator()[abi:ne180100](uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SKTexture * {__strong}>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SKTexture * {__strong}>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SKTexture * {__strong}>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SKTexture * {__strong}>>>::find<std::string>(void *a1, unsigned __int8 *a2)
{
  unint64_t v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint8x8_t v11 = *v10;
  if (*v10)
  {
    uint64_t v12 = (uint64_t)(a1 + 4);
    do
    {
      unint64_t v13 = *((void *)v11 + 1);
      if (v13 == v6)
      {
        if (std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(void *)&v5) {
            v13 %= *(void *)&v5;
          }
        }
        else
        {
          v13 &= *(void *)&v5 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      uint8x8_t v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void SKCVideoBackdropNode::SKCVideoBackdropNode(SKCVideoBackdropNode *this)
{
  SKCVideoNode::SKCVideoNode(this);
  void *v1 = &unk_26BEEE0C0;
}

void SKCVideoBackdropNode::~SKCVideoBackdropNode(SKCVideoBackdropNode *this)
{
  SKCVideoNode::~SKCVideoNode(this);

  JUMPOUT(0x21052EA30);
}

void SKCVideoBackdropNode::addRenderOps(float32x4_t *a1, uint64_t a2, uint64_t **a3)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  unint64_t v6 = a1[43].i64[1];
  block[0] = MEMORY[0x263EF8330];
  block[1] = 3221225472;
  block[2] = ___ZN20SKCVideoBackdropNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEE_block_invoke;
  block[3] = &__block_descriptor_48_e5_v8__0l;
  block[4] = a1;
  block[5] = a2;
  dispatch_sync(v6, block);
  if (a1[37].i64[0] && a1[38].i64[0])
  {
    uint64_t v7 = 0;
    long long v61 = xmmword_20AE9BC30;
    long long v62 = unk_20AE9BC40;
    v60[0] = xmmword_20AE9BC50;
    v60[1] = unk_20AE9BC60;
    v60[2] = xmmword_20AE9BC70;
    v60[3] = unk_20AE9BC80;
    v8.i64[0] = 0xBF000000BF000000;
    v8.i64[1] = 0xBF000000BF000000;
    do
    {
      float32x4_t v9 = vaddq_f32((float32x4_t)v60[v7], v8);
      v9.i64[0] = vaddq_f32(v9, v9).u64[0];
      v9.i64[1] = *((void *)&v60[v7] + 1);
      v60[v7++] = v9;
    }
    while (v7 != 4);
    unsigned int Height = *(__CVBuffer **)(a1[43].i64[0] + 16);
    if (Height || (unsigned int Height = (__CVBuffer *)a1[41].i64[0]) != 0)
    {
      size_t Width = CVPixelBufferGetWidth(Height);
      unsigned int Height = (__CVBuffer *)CVPixelBufferGetHeight(Height);
    }
    else
    {
      size_t Width = 0;
    }
    uint64_t v12 = [MEMORY[0x263F1C408] sharedApplication];
    uint64_t v13 = [v12 statusBarOrientation];

    switch(v13)
    {
      case 0:
      case 1:
        __asm { FMOV            V0.2S, #1.0; jumptable 000000020AE5A318 cases 0,1 }
        long long v52 = _Q0;
        *(void *)&long long v61 = _Q0;
        _D1 = 0x3F80000000000000;
        _D2 = 1065353216;
        float v21 = 0.5;
        float v22 = -0.5;
        _D0 = 0;
        float v24 = -0.5;
        goto LABEL_12;
      case 2:
        *(void *)&_Q0 = 0;
        long long v52 = _Q0;
        *(void *)&long long v61 = 0;
        _D1 = 1065353216;
        _D2 = 0x3F80000000000000;
        float v21 = -0.5;
        float v22 = 0.5;
        __asm { FMOV            V0.2S, #1.0 }
        float v24 = 0.5;
        goto LABEL_14;
      case 3:
        *(void *)&_Q0 = 0x3F80000000000000;
        long long v52 = _Q0;
        *(void *)&long long v61 = 0x3F80000000000000;
        _D0 = 1065353216;
        float v24 = 0.5;
        float v22 = -0.5;
        _D1 = 0;
        __asm { FMOV            V2.2S, #1.0 }
        float v21 = -0.5;
LABEL_12:
        float v25 = 0.5;
        goto LABEL_15;
      case 4:
        *(void *)&_Q0 = 1065353216;
        long long v52 = _Q0;
        *(void *)&long long v61 = 1065353216;
        _D0 = 0x3F80000000000000;
        float v24 = -0.5;
        float v22 = 0.5;
        __asm { FMOV            V1.2S, #1.0 }
        _D2 = 0;
        float v21 = 0.5;
LABEL_14:
        float v25 = -0.5;
LABEL_15:
        float v54 = *(float *)&_D2;
        float v55 = *(float *)&_D1;
        *((void *)&v61 + SKCNode::setFlags(this, 66, 1) = _D2;
        *(void *)&long long v62 = _D1;
        float v56 = *(float *)&_D0;
        *((void *)&v62 + SKCNode::setFlags(this, 66, 1) = _D0;
        break;
      default:
        float v54 = 1.0;
        float v56 = 0.0;
        *(void *)&_Q0 = 0;
        long long v52 = _Q0;
        __asm { FMOV            V0.2S, #1.0 }
        float v55 = *(float *)&_D0;
        float v24 = -0.5;
        float v22 = 0.5;
        float v21 = 0.5;
        float v25 = -0.5;
        break;
    }
    int8x16_t v57 = *(int8x16_t *)(a2 + 112);
    float v26 = objc_msgSend(MEMORY[0x263F1C408], "sharedApplication", v52);
    unint64_t v27 = [v26 statusBarOrientation];

    if (v27 >= 3) {
      int32x2_t v28 = vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL));
    }
    else {
      int32x2_t v28 = *(int32x2_t *)(a2 + 120);
    }
    float v29 = (float)v28.u32[0];
    float v30 = (float)(unint64_t)Height * (float)v28.u32[1];
    float v31 = (float)Width * v29;
    if (v30 <= v31)
    {
      if (v30 < v31)
      {
        float v33 = v30 / v31;
        *(float *)&long long v61 = (float)((float)(v53 + -0.5) * v33) + 0.5;
        *((float *)&v61 + 2) = (float)((float)(v54 + -0.5) * v33) + 0.5;
        *(float *)&long long v62 = (float)((float)(v55 + -0.5) * v33) + 0.5;
        *((float *)&v62 + 2) = (float)((float)(v56 + -0.5) * v33) + 0.5;
      }
    }
    else
    {
      float v32 = v31 / v30;
      *((float *)&v61 + SKCNode::setFlags(this, 66, 1) = (float)(v25 * v32) + 0.5;
      *((float *)&v61 + 3) = (float)(v24 * v32) + 0.5;
      *((float *)&v62 + SKCNode::setFlags(this, 66, 1) = (float)(v21 * v32) + 0.5;
      *((float *)&v62 + 3) = (float)(v22 * v32) + 0.5;
    }
    uint64_t v34 = 0;
    long long v35 = v61;
    long long v61 = v62;
    *(void *)&long long v62 = *((void *)&v35 + 1);
    *((void *)&v62 + SKCNode::setFlags(this, 66, 1) = v35;
    int v36 = *(_DWORD *)a2 >> 2;
    int16x8_t v37 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(a1[19], fminf(fmaxf(vmuls_lane_f32(*(float *)(a2 + 96), a1[19], 3) * a1[20].f32[1], 0.0), 1.0)), (float32x4_t)vdupq_n_s32(0x437F0000u)));
    *(int16x4_t *)v37.i8 = vmovn_s32((int32x4_t)v37);
    unsigned __int32 v38 = vmovn_s16(v37).u32[0];
    do
    {
      *(_OWORD *)(*(void *)(a2 + 24) + 16 * (v34 + *(_DWORD *)a2)) = v60[v34];
      *(void *)(*(void *)(a2 + 16) + 8 * (v34 + *(_DWORD *)a2)) = *((void *)&v61 + v34);
      *(_DWORD *)(*(void *)(a2 + 8) + 4 * (v34++ + *(_DWORD *)a2)) = v38;
    }
    while (v34 != 4);
    id v39 = *a3;
    uint64_t v40 = *(void *)(a2 + 280);
    LODWORD(__p.__r_.__value_.__l.__data_) = 31;
    unint64_t v41 = v39[2];
    if (v41 >= v39[3])
    {
      uint64_t v42 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v39 + 1, (int *)&__p);
    }
    else
    {
      *(void *)unint64_t v41 = &unk_26BEEC420;
      *(_DWORD *)(v41 + 8) = 31;
      *(void *)(v41 + 24) = 0;
      *(void *)(v41 + 32) = 0;
      *(void *)(v41 + 16) = 0;
      *(void *)(v41 + 64) = 0;
      uint64_t v42 = v41 + 192;
      *(void *)(v41 + 96) = 0;
    }
    v39[2] = v42;
    *(void *)(v42 - 80) = v40;
    *(_OWORD *)(v42 - 64) = xmmword_20AE9A980;
    *(void *)(v42 - 48) = 0x30000000FLL;
    float32x2_t v43 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
    jet_command_buffer::set_vertex_buffer(v43, &__p, *(void *)(a2 + 328));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    long long v44 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_color");
    jet_command_buffer::set_vertex_buffer(v44, &__p, *(void *)(a2 + 336));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unint64_t v45 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_tex_coord");
    jet_command_buffer::set_vertex_buffer(v45, &__p, *(void *)(a2 + 344));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    unint64_t v46 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
    jet_command_buffer::set_fragment_texture(v46, &__p, a1[37].i64[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    long long v47 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture2");
    jet_command_buffer::set_fragment_texture(v47, &__p, a1[38].i64[0]);
    int v48 = 6 * v36;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    jet_command_buffer::draw_indexed(*a3, 3, *(void *)(a2 + 400), 6 * v36, 6);
    long long v49 = *(_DWORD **)(a2 + 664);
    unsigned int v50 = v49[43];
    if (v50 <= v48 + 6) {
      unsigned int v50 = v48 + 6;
    }
    v49[43] = v50;
    ++v49[41];
    ++v49[37];
    *(_DWORD *)a2 += 4;
  }
}

void sub_20AE5A7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20SKCVideoBackdropNode12addRenderOpsEP13SKCRenderInfoRKNSt3__110shared_ptrI18jet_command_bufferEE_block_invoke(uint64_t a1)
{
}

uint64_t SKGetLinkedOnOrAfter(uint64_t a1)
{
  unint64_t v1 = dyld_get_active_platform() | (unint64_t)(a1 << 32);

  return MEMORY[0x270ED9718](v1);
}

uint64_t sk_get_info_plist_flag_is_set(NSString *a1)
{
  unint64_t v1 = a1;
  uint64_t v2 = [MEMORY[0x263F086E0] mainBundle];
  unint64_t v3 = [v2 infoDictionary];

  unint64_t v4 = [v3 objectForKey:v1];
  if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    uint64_t v5 = [v4 BOOLValue];
  }
  else {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_20AE5A908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sk_get_debug_options(void)
{
  if (sk_get_debug_options(void)::onceToken != -1) {
    dispatch_once(&sk_get_debug_options(void)::onceToken, &__block_literal_global_8);
  }
  uint64_t v0 = (void *)sk_get_debug_options(void)::options;
  if (!sk_get_debug_options(void)::options)
  {
    unint64_t v1 = [MEMORY[0x263EFFA40] standardUserDefaults];
    uint64_t v2 = [v1 dictionaryForKey:@"SKDefaults"];
    uint64_t v3 = [v2 mutableCopy];
    unint64_t v4 = (void *)sk_get_debug_options(void)::options;
    sk_get_debug_options(void)::options = v3;

    if (!sk_get_debug_options(void)::options)
    {
      uint64_t v5 = [MEMORY[0x263EFF9A0] dictionary];
      unint64_t v6 = (void *)sk_get_debug_options(void)::options;
      sk_get_debug_options(void)::options = v5;
    }
    uint64_t v0 = (void *)sk_get_debug_options(void)::options;
  }

  return v0;
}

void sub_20AE5AA0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ___Z20sk_get_debug_optionsv_block_invoke()
{
  int out_token = 0;
  uint64_t v0 = (const char *)[@"SKDefaults_ReloadNotification" UTF8String];
  return notify_register_dispatch(v0, &out_token, MEMORY[0x263EF83A0], &__block_literal_global_4_0);
}

void ___Z20sk_get_debug_optionsv_block_invoke_2()
{
  id v5 = [MEMORY[0x263EFFA40] standardUserDefaults];
  uint64_t v0 = [v5 dictionaryForKey:@"SKDefaults"];
  uint64_t v1 = [v0 mutableCopy];
  uint64_t v2 = (void *)sk_get_debug_options(void)::options;
  sk_get_debug_options(void)::options = v1;

  if (!sk_get_debug_options(void)::options)
  {
    uint64_t v3 = [MEMORY[0x263EFF9A0] dictionary];
    unint64_t v4 = (void *)sk_get_debug_options(void)::options;
    sk_get_debug_options(void)::options = v3;
  }
}

void sub_20AE5AB08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sk_debug_option_exists(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = sk_get_debug_options();
  uint64_t v3 = [v2 objectForKey:v1];
  BOOL v4 = v3 != 0;

  return v4;
}

void sub_20AE5AB84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sk_debug_option_get_BOOL(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = sk_get_debug_options();
  uint64_t v3 = [v2 objectForKey:v1];

  if (v3) {
    uint64_t v4 = [v3 BOOLValue];
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_20AE5AC10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sk_debug_option_get_int(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = sk_get_debug_options();
  uint64_t v3 = [v2 objectForKey:v1];

  if (v3) {
    uint64_t v4 = [v3 integerValue];
  }
  else {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_20AE5ACAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float sk_debug_option_get_float(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = sk_get_debug_options();
  uint64_t v3 = [v2 objectForKey:v1];

  if (v3)
  {
    [v3 floatValue];
    float v5 = v4;
  }
  else
  {
    float v5 = 0.0;
  }

  return v5;
}

void sub_20AE5AD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sk_debug_option_get_string(NSString *a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = sk_get_debug_options();
  uint64_t v3 = [v2 objectForKey:v1];

  return v3;
}

void sub_20AE5ADE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sk_debug_check_optional(void)
{
  uint64_t result = sk_debug_option_get_BOOL(&cfstr_Enablealldebug.isa);
  enableAllDebugEvents = result;
  return result;
}

uint64_t sk_debug_get_optional(void)
{
  return enableAllDebugEvents;
}

id SKGetGraphicsPerformanceStatistics(void)
{
  double v0 = CACurrentMediaTime();
  if (v0 - *(double *)&_graphicsPerformanceStatisticsDictionaryQueryTime > 1.0)
  {
    io_registry_entry_t v1 = _accelerator;
    if (!_accelerator)
    {
      io_iterator_t existing = 0;
      mach_port_t v2 = *MEMORY[0x263F0EC90];
      CFDictionaryRef v3 = IOServiceMatching("IOAcceleratorES");
      if (!IOServiceGetMatchingServices(v2, v3, &existing)) {
        _accelerator = IOIteratorNext(existing);
      }
      IOObjectRelease(existing);
      io_registry_entry_t v1 = _accelerator;
    }
    CFPropertCGFloat y = (void *)IORegistryEntryCreateCFProperty(v1, @"PerformanceStatistics", (CFAllocatorRef)*MEMORY[0x263EFFB08], 0);
    if (CFProperty) {
      objc_storeStrong((id *)&_graphicsPerformanceStatisticsDictionary, CFProperty);
    }
    _graphicsPerformanceStatisticsDictionaryQueryTime = *(void *)&v0;
  }
  float v5 = (void *)[(id)_graphicsPerformanceStatisticsDictionary copy];

  return v5;
}

id SKGetProcessorPerformanceStatistics(void)
{
  void v26[3] = *MEMORY[0x263EF8340];
  double v0 = CACurrentMediaTime();
  if (v0 - *(double *)&_processorPerformanceStatisticsDictionaryQueryTime > 1.0)
  {
    *(void *)out_processor_infoCnt = 0;
    processor_info_array_t out_processor_info = 0;
    host_t v1 = MEMORY[0x21052F0A0]();
    host_processor_info(v1, 2, out_processor_infoCnt, &out_processor_info, &out_processor_infoCnt[1]);
    uint64_t v2 = out_processor_infoCnt[0];
    if (out_processor_infoCnt[0])
    {
      processor_info_array_t v3 = out_processor_info + 2;
      float v4 = 0.0;
      float v5 = 0.0;
      float v6 = 0.0;
      do
      {
        unsigned int v7 = *(v3 - 1);
        float v8 = v4 + (float)*(v3 - 2);
        unsigned int v10 = *v3;
        unsigned int v9 = v3[1];
        v3 += 4;
        float v4 = v8 + (float)v9;
        float v6 = v6 + (float)v7;
        float v5 = v5 + (float)v10;
        --v2;
      }
      while (v2);
    }
    else
    {
      float v6 = 0.0;
      float v5 = 0.0;
      float v4 = 0.0;
    }
    MEMORY[0x21052F610](*MEMORY[0x263EF8960], out_processor_info, 4 * out_processor_infoCnt[1]);
    float v11 = 0.0;
    float v12 = 0.0;
    float v13 = 0.0;
    if (*(float *)&SKGetProcessorPerformanceStatistics(void)::lastUsr >= 0.0)
    {
      float v14 = (float)(v5 + (float)(v6 + v4))
          - (float)((float)(*(float *)&SKGetProcessorPerformanceStatistics(void)::lastUsr
                          + *(float *)&SKGetProcessorPerformanceStatistics(void)::lastSys)
                  + *(float *)&SKGetProcessorPerformanceStatistics(void)::lastIdl);
      float v15 = 0.0;
      if (v14 > 0.0) {
        float v15 = (float)(1.0 / v14) * 100.0;
      }
      float v11 = (float)(v4 - *(float *)&SKGetProcessorPerformanceStatistics(void)::lastUsr) * v15;
      float v12 = (float)(v6 - *(float *)&SKGetProcessorPerformanceStatistics(void)::lastSys) * v15;
      float v13 = (float)(v5 - *(float *)&SKGetProcessorPerformanceStatistics(void)::lastIdl) * v15;
    }
    SKGetProcessorPerformanceStatistics(void)::lastSys = LODWORD(v6);
    SKGetProcessorPerformanceStatistics(void)::lastIdl = LODWORD(v5);
    SKGetProcessorPerformanceStatistics(void)::lastUsr = LODWORD(v4);
    v25[0] = @"User CPU %";
    float v16 = [NSNumber numberWithDouble:roundf(v11)];
    v26[0] = v16;
    v25[1] = @"System CPU %";
    float v17 = [NSNumber numberWithDouble:roundf(v12)];
    v26[1] = v17;
    v25[2] = @"Idle CPU %";
    BOOL v18 = [NSNumber numberWithDouble:roundf(v13)];
    v26[2] = v18;
    uint64_t v19 = [NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:3];
    unint64_t v20 = (void *)_processorPerformanceStatisticsDictionary;
    _processorPerformanceStatisticsDictionarCGFloat y = v19;

    _processorPerformanceStatisticsDictionaryQueryTime = *(void *)&v0;
  }
  float v21 = (void *)_processorPerformanceStatisticsDictionary;

  return v21;
}

void sub_20AE5B1A8(_Unwind_Exception *a1)
{
  float v4 = v3;

  _Unwind_Resume(a1);
}

void SKCParticleSystem::SKCParticleSystem(SKCParticleSystem *this, int a2)
{
  *(void *)this = &unk_26BEEE200;
  *((void *)this + 2) = 0;
  *((void *)this + SKCNode::setFlags(this, 66, 1) = (char *)this + 16;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = (char *)this + 56;
  *((void *)this + 8) = (char *)this + 56;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((unsigned char *)this + 88) = 0;
  SKCParticleSystem::resize(this, a2);
}

void sub_20AE5B260(_Unwind_Exception *a1)
{
  float v6 = v5;
  unsigned int v7 = v3;
  std::__list_imp<SKCRenderSortInfo *>::clear(v6);
  unsigned int v9 = *v7;
  if (*v7)
  {
    *(void *)(v1 + 40) = v9;
    operator delete(v9);
  }
  std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::destroy(v2, *v4);
  _Unwind_Resume(a1);
}

void SKCParticleSystem::resize(SKCParticleSystem *this, int a2)
{
  if (*((_DWORD *)this + 20) != a2)
  {
    *((_DWORD *)this + 20) = a2;
    v2[0] = MEMORY[0x263EF8330];
    v2[1] = 3221225472;
    v2[2] = ___ZN17SKCParticleSystem6resizeEj_block_invoke;
    v2[3] = &__block_descriptor_40_e9_v16__0_v8l;
    v2[4] = this;
    SKCParticleSystem::enumerateSlices((uint64_t)this, v2);
  }
}

void SKCParticleSystem::update(SKCParticleSystem *this, float a2)
{
  uint64_t v2 = (char *)this + 56;
  processor_info_array_t v3 = (char *)*((void *)this + 8);
  if (v3 != (char *)this + 56)
  {
    do
    {
      float v6 = (SKCParticleUpdater *)*((void *)v3 + 2);
      if (SKCParticleUpdater::getEnabled(v6))
      {
        SKCParticleUpdater::getUpdateBlock(v6);
        unsigned int v7 = (void (**)(void, void, float))objc_claimAutoreleasedReturnValue();
        ((void (**)(void, SKCParticleSystem *, float))v7)[2](v7, this, a2);
      }
      processor_info_array_t v3 = (char *)*((void *)v3 + 1);
    }
    while (v3 != v2);
  }
}

void sub_20AE5B3A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *SKCParticleSystem::addUpdater(void *a1, uint64_t a2)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v5 = a1[7];
  a1 += 7;
  result[1] = a1;
  result[2] = a2;
  *uint64_t result = v5;
  *(void *)(v5 + 8) = result;
  *a1 = result;
  ++a1[2];
  return result;
}

void *SKCParticleSystem::removeUpdater(SKCParticleSystem *this, SKCParticleUpdater *a2)
{
  processor_info_array_t v3 = a2;
  return std::list<SKCParticleUpdater *>::remove((uint64_t)this + 56, &v3);
}

void *std::list<SKCParticleUpdater *>::remove(uint64_t a1, void *a2)
{
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2 != (void *)a1)
  {
    do
    {
      float v6 = (void *)v2[1];
      uint64_t v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (void *)a1)
        {
          BOOL v8 = 1;
LABEL_8:
          float v6 = (void *)a1;
        }
        else
        {
          while (1)
          {
            uint64_t v7 = v6[2];
            BOOL v8 = v7 == v5;
            if (v7 != v5) {
              break;
            }
            float v6 = (void *)v6[1];
            if (v6 == (void *)a1) {
              goto LABEL_8;
            }
          }
        }
        std::list<SKCAction *>::splice((uint64_t)v10, v10, a1, v2, v6);
        if (!v8) {
          float v6 = (void *)v6[1];
        }
      }
      uint64_t v2 = v6;
    }
    while (v6 != (void *)a1);
  }
  return std::__list_imp<SKCRenderSortInfo *>::clear(v10);
}

void sub_20AE5B4E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<SKCRenderSortInfo *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SKCParticleSystem::getUpdaters(SKCParticleSystem *this)
{
  return (uint64_t)this + 56;
}

void SKCParticleSystem::enumerateSlices(uint64_t a1, void *a2)
{
  processor_info_array_t v3 = a2;
  float v4 = *(void **)(a1 + 8);
  uint64_t v5 = (void *)(a1 + 16);
  if (v4 != v5)
  {
    do
    {
      if (*((char *)v4 + 55) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v4[4], v4[5]);
      }
      else {
        std::string __p = *(std::string *)(v4 + 4);
      }
      uint64_t v10 = v4[7];
      v3[2](v3);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      float v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          float v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v4[2];
          BOOL v8 = *v7 == (void)v4;
          float v4 = v7;
        }
        while (!v8);
      }
      float v4 = v7;
    }
    while (v7 != v5);
  }
}

void sub_20AE5B5D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void **___ZN17SKCParticleSystem6resizeEj_block_invoke(void **result, void **this)
{
  if (*((unsigned char *)this + 49)) {
    return SKCDataSlice::resize(this, *((_DWORD *)result[4] + 20));
  }
  return result;
}

void SKCParticleSystem::compact(SKCParticleSystem *this)
{
  float v4 = (char *)this + 32;
  uint64_t v2 = *((void *)this + 4);
  uint64_t v3 = *((void *)v4 + 1);
  if (v3 != v2)
  {
    uint64_t v5 = (v3 - v2) >> 2;
    std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = ___ZN17SKCParticleSystem7compactEv_block_invoke;
    void v6[3] = &__block_descriptor_48_e9_v16__0_v8l;
    void v6[4] = this;
    void v6[5] = v5;
    SKCParticleSystem::enumerateSlices((uint64_t)this, v6);
    *((void *)this + 5) = *((void *)this + 4);
    *((_DWORD *)this + 21) -= v5;
  }
}

void *___ZN17SKCParticleSystem7compactEv_block_invoke(void *result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 48))
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(a2 + 16);
    unsigned int v4 = *(_DWORD *)(a2 + 12);
    uint64_t v6 = result[4];
    unint64_t v5 = result[5];
    unsigned int v7 = **(_DWORD **)(v6 + 32);
    unsigned int v8 = v7 + 1;
    if (v5 >= 2)
    {
      for (unint64_t i = 1; i < v5; ++i)
      {
        unsigned int v10 = *(_DWORD *)(*(void *)(v6 + 32) + 4 * i);
        unsigned int v11 = v10 - v8;
        if (v10 != v8)
        {
          memmove((void *)(v3 + v4 * (unint64_t)v7), (const void *)(v3 + v4 * (unint64_t)v8), v4 * (unint64_t)v11);
          v7 += v11;
          unint64_t v5 = v2[5];
          unsigned int v8 = v10;
        }
        ++v8;
      }
    }
    size_t v12 = v4 * (unint64_t)(*(_DWORD *)(v6 + 84) - v8);
    return memmove((void *)(v3 + v4 * (unint64_t)v7), (const void *)(v3 + v4 * (unint64_t)v8), v12);
  }
  return result;
}

void SKCParticleSystem::addPatricles(SKCParticleSystem *this, int a2)
{
  unsigned int v3 = *((_DWORD *)this + 20);
  unsigned int v4 = *((_DWORD *)this + 21) + a2;
  if (v4 > v3)
  {
    if (*((unsigned char *)this + 88))
    {
      if (v4 <= 2 * v3) {
        int v5 = 2 * v3;
      }
      else {
        int v5 = *((_DWORD *)this + 21) + a2;
      }
      SKCParticleSystem::resize(this, v5);
    }
    else
    {
      unsigned int v4 = *((_DWORD *)this + 20);
    }
  }
  *((_DWORD *)this + 2SKCNode::setFlags(this, 66, 1) = v4;
}

void SKCParticleSystem::addPatricles(SKCParticleSystem *this, int a2, unsigned int *a3, unsigned int *a4)
{
  unsigned int v7 = *((_DWORD *)this + 20);
  unsigned int v8 = *((_DWORD *)this + 21) + a2;
  if (v8 <= v7) {
    goto LABEL_7;
  }
  if (*((unsigned char *)this + 88))
  {
    if (v8 <= 2 * v7) {
      int v9 = 2 * v7;
    }
    else {
      int v9 = *((_DWORD *)this + 21) + a2;
    }
    SKCParticleSystem::resize(this, v9);
LABEL_7:
    if (!a4) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  unsigned int v8 = *((_DWORD *)this + 20);
  if (a4) {
LABEL_8:
  }
    *a4 = v8 - *((_DWORD *)this + 21);
LABEL_9:
  if (a3) {
    *a3 = *((_DWORD *)this + 21);
  }
  *((_DWORD *)this + 2SKCNode::setFlags(this, 66, 1) = v8;
}

void SKCParticleSystem::removePatricle(SKCParticleSystem *this, int a2)
{
}

void SKCParticleSystem::removePatricles(SKCParticleSystem *this, int a2, int a3)
{
  if (a3 + a2 == *((_DWORD *)this + 21))
  {
    *((_DWORD *)this + 2SKCNode::setFlags(this, 66, 1) = a2;
  }
  else if (a3)
  {
    int v6 = 0;
    unsigned int v7 = (void **)((char *)this + 32);
    unsigned int v8 = (void *)((char *)this + 48);
    int v9 = (char *)*((void *)this + 5);
    do
    {
      int v10 = v6 + a2;
      if ((unint64_t)v9 >= *v8)
      {
        size_t v12 = (char *)*v7;
        uint64_t v13 = (v9 - (unsigned char *)*v7) >> 2;
        unint64_t v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62) {
          std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v15 = *v8 - (void)v12;
        if (v15 >> 1 > v14) {
          unint64_t v14 = v15 >> 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v14;
        }
        if (v16)
        {
          float v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>((uint64_t)this + 48, v16);
          size_t v12 = (char *)*((void *)this + 4);
          int v9 = (char *)*((void *)this + 5);
        }
        else
        {
          float v17 = 0;
        }
        BOOL v18 = &v17[4 * v13];
        *(_DWORD *)BOOL v18 = v10;
        unsigned int v11 = v18 + 4;
        while (v9 != v12)
        {
          int v19 = *((_DWORD *)v9 - 1);
          v9 -= 4;
          *((_DWORD *)v18 - SKCNode::setFlags(this, 66, 1) = v19;
          v18 -= 4;
        }
        *((void *)this + 4) = v18;
        *((void *)this + 5) = v11;
        *((void *)this + 6) = &v17[4 * v16];
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *(_DWORD *)int v9 = v10;
        unsigned int v11 = v9 + 4;
      }
      *((void *)this + 5) = v11;
      ++v6;
      int v9 = v11;
    }
    while (v6 != a3);
  }
}

uint64_t SKCParticleSystem::setShouldGrow(uint64_t this, char a2)
{
  *(unsigned char *)(this + 88) = a2;
  return this;
}

uint64_t SKCParticleSystem::getShouldGrow(SKCParticleSystem *this)
{
  return *((unsigned __int8 *)this + 88);
}

uint64_t SKCParticleSystem::getSlice(uint64_t a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::find<std::string>(a1 + 8, a2);
  if (a1 + 16 == v3) {
    return 0;
  }
  else {
    return *(void *)(v3 + 56);
  }
}

void SKCParticleSystem::addSlice()
{
}

void sub_20AE5BB20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  MEMORY[0x21052EA30](v21, 0x1093C407A94CBE3);
  _Unwind_Resume(a1);
}

uint64_t SKCParticleSystem::removeSlice(uint64_t a1, const void **a2)
{
  return std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::__erase_unique<std::string>((uint64_t **)(a1 + 8), a2);
}

void SKCParticleSystem::~SKCParticleSystem(SKCParticleSystem *this)
{
  *(void *)this = &unk_26BEEE200;
  uint64_t v2 = (char *)this + 8;
  uint64_t v3 = (void *)*((void *)this + 1);
  unsigned int v4 = (char *)this + 16;
  if (v3 != (void *)((char *)this + 16))
  {
    do
    {
      if (*((char *)v3 + 55) < 0) {
        std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)v3[4], v3[5]);
      }
      else {
        std::string __p = *(std::string *)(v3 + 4);
      }
      uint64_t v5 = v3[7];
      uint64_t v11 = v5;
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v6 = (char *)v3[1];
      if (v6)
      {
        do
        {
          unsigned int v7 = v6;
          int v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unsigned int v7 = (char *)v3[2];
          BOOL v8 = *(void *)v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != v4);
  }
  std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::destroy((uint64_t)v2, *((char **)this + 2));
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + SKCNode::setFlags(this, 66, 1) = v4;
  std::__list_imp<SKCRenderSortInfo *>::clear((void *)this + 7);
  int v9 = (void *)*((void *)this + 4);
  if (v9)
  {
    *((void *)this + 5) = v9;
    operator delete(v9);
  }
  std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::destroy((uint64_t)v2, *((char **)this + 2));
}

{
  uint64_t vars8;

  SKCParticleSystem::~SKCParticleSystem(this);

  JUMPOUT(0x21052EA30);
}

void std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::destroy(a1, *(void *)a2);
    std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::destroy(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned int>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(4 * a2);
}

uint64_t std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::find<std::string>(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = std::less<std::string>::operator()[abi:ne180100](v5, (const void **)(v3 + 32), a2);
    BOOL v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      BOOL v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || std::less<std::string>::operator()[abi:ne180100](v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

_OWORD *std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v6 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  BOOL v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    BOOL v7 = operator new(0x40uLL);
    int v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    void v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *int v9 = 0;
    *((void *)v7 + 7) = 0;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::__erase_unique<std::string>(uint64_t **a1, const void **a2)
{
  uint64_t v3 = std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::erase(a1, v3);
  return 1;
}

uint64_t *std::__tree<std::__value_type<std::string,SKCDataSlice *>,std::__map_value_compare<std::string,std::__value_type<std::string,SKCDataSlice *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SKCDataSlice *>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<SKCParticleSystem *>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  operator delete((void *)a2);
  return v3;
}

uint64_t SKSetPrefersLowPowerGPUs(uint64_t result)
{
  _SK_PrefersLowPowerGPUs = result;
  return result;
}

uint64_t SKGetPrefersLowPowerGPUs()
{
  if (_SK_PrefersLowPowerGPUs) {
    return 1;
  }
  else {
    return sk_get_info_plist_flag_is_set(&cfstr_Preferslowpowe.isa);
  }
}

uint64_t SKSetPrefersFloatFramebuffer(uint64_t result)
{
  _SK_PrefersFloatFramebuffer = result;
  return result;
}

uint64_t SKGetPrefersFloatFramebuffer()
{
  return _SK_PrefersFloatFramebuffer;
}

uint64_t SKGetPrefersOpenGL()
{
  if (SKGetLinkedOnOrAfter(917504)) {
    return 0;
  }
  if (_SK_PrefersOpenGL) {
    return 1;
  }

  return sk_get_info_plist_flag_is_set(&cfstr_Prefersopengl.isa);
}

uint64_t SKSetPrefersOpenGL(uint64_t result)
{
  _SK_PrefersOpenGL = result;
  return result;
}

uint64_t SKGetUserProcessorUtilizationPercent()
{
  double v0 = SKGetProcessorPerformanceStatistics();
  uint64_t v1 = v0;
  if (v0)
  {
    uint64_t v2 = [v0 objectForKey:@"User CPU %"];
    uint64_t v3 = (int)[v2 intValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_20AE5C070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKGetSystemProcessorUtilizationPercent()
{
  double v0 = SKGetProcessorPerformanceStatistics();
  uint64_t v1 = v0;
  if (v0)
  {
    uint64_t v2 = [v0 objectForKey:@"System CPU %"];
    uint64_t v3 = (int)[v2 intValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_20AE5C0F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKGetIdleProcessorUtilizationPercent()
{
  double v0 = SKGetProcessorPerformanceStatistics();
  uint64_t v1 = v0;
  if (v0)
  {
    uint64_t v2 = [v0 objectForKey:@"Idle CPU %"];
    uint64_t v3 = (int)[v2 intValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_20AE5C178(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKGetGraphicsDeviceUtilizationPercent()
{
  double v0 = SKGetGraphicsPerformanceStatistics();
  uint64_t v1 = v0;
  if (v0)
  {
    uint64_t v2 = [v0 objectForKey:@"Device Utilization %"];
    uint64_t v3 = (int)[v2 intValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_20AE5C1FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKGetGraphicsRendererUtilizationPercent()
{
  double v0 = SKGetGraphicsPerformanceStatistics();
  uint64_t v1 = v0;
  if (v0)
  {
    uint64_t v2 = [v0 objectForKey:@"Renderer Utilization %"];
    uint64_t v3 = (int)[v2 intValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_20AE5C280(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKGetGraphicsTilerUtilizationPercent()
{
  double v0 = SKGetGraphicsPerformanceStatistics();
  uint64_t v1 = v0;
  if (v0)
  {
    uint64_t v2 = [v0 objectForKey:@"Tiler Utilization %"];
    uint64_t v3 = (int)[v2 intValue];
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_20AE5C304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double SKGetCoreAnimationFPS()
{
  int FrameCounter = CARenderServerGetFrameCounter();
  double v1 = CACurrentMediaTime();
  if (v1 - *(double *)&SKGetCoreAnimationFPS::oldtime <= 0.0166666667)
  {
    int v4 = SKGetCoreAnimationFPS::fps;
  }
  else
  {
    if (SKGetCoreAnimationFPS::oldframe)
    {
      float v2 = v1 - *(double *)&SKGetCoreAnimationFPS::oldtime;
      float v3 = (float)(FrameCounter - SKGetCoreAnimationFPS::oldframe) / v2;
      if (v3 > 60.0) {
        float v3 = 60.0;
      }
    }
    else
    {
      float v3 = 0.0;
    }
    *(float *)&int v4 = ceilf(v3 * 10.0) / 10.0;
    SKGetCoreAnimationFPS::fps = v4;
    SKGetCoreAnimationFPS::oldframe = FrameCounter;
    SKGetCoreAnimationFPS::oldtime = *(void *)&v1;
  }
  return *(float *)&v4;
}

void SKSetResourceBundle(id obj)
{
}

id SKGetResourceBundle()
{
  if (_SKResourceBundle)
  {
    id v0 = (id)_SKResourceBundle;
  }
  else
  {
    id v0 = [MEMORY[0x263F086E0] mainBundle];
  }

  return v0;
}

void SKGLPrintFramebufferStatus()
{
  GLenum v0 = glCheckFramebufferStatus(0x8D40u) - 36053;
  if (v0 > 8) {
    NSLog(&cfstr_GlFramebufferS.isa);
  }
  else {
    NSLog(&off_263FEA4A8[v0]->isa);
  }
}

void SKGLPrintInteger(NSString *a1, GLenum a2)
{
  float v3 = a1;
  GLint params = 0;
  glGetIntegerv(a2, &params);
  NSLog(&cfstr_D.isa, v3, params);
}

void sub_20AE5C4C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKGLPrintFloat(NSString *a1, GLenum a2)
{
  float v3 = a1;
  GLfloat params = 0.0;
  glGetFloatv(a2, &params);
  NSLog(&cfstr_F.isa, v3, params);
}

void sub_20AE5C538(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKGLPrintBoolean(NSString *a1, GLenum a2)
{
  float v3 = a1;
  GLBOOLean params = 0;
  glGetBooleanv(a2, &params);
  NSLog(&cfstr_D.isa, v3, params);
}

void sub_20AE5C5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKGLPrintVertexAttribInteger(NSString *a1, GLuint a2, GLenum a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1;
  glGetVertexAttribiv(a2, a3, params);
  if (a3 == 34341)
  {
    if ((params[0] - 5120) > 0xC) {
      uint64_t v6 = @"GL_TYPE_UNKNOWN";
    }
    else {
      uint64_t v6 = off_263FEA4F0[params[0] - 5120];
    }
    NSLog(&stru_26BEF5230.isa, v5, v6);
  }
  else if (a3 != 34342)
  {
    NSLog(&cfstr_D.isa, v5, params[0]);
  }
}

void sub_20AE5C698(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKGLPrintVertexAttrib(uint64_t a1)
{
  GLuint v1 = a1;
  NSLog(&cfstr_Skglprintverte.isa, a1);
  SKGLPrintVertexAttribInteger(&cfstr_GlVertexAttrib.isa, v1, 0x889Fu);
  SKGLPrintVertexAttribInteger(&cfstr_GlVertexAttrib_0.isa, v1, 0x8622u);
  SKGLPrintVertexAttribInteger(&cfstr_GlVertexAttrib_1.isa, v1, 0x8623u);
  SKGLPrintVertexAttribInteger(&cfstr_GlVertexAttrib_2.isa, v1, 0x8624u);
  SKGLPrintVertexAttribInteger(&cfstr_GlVertexAttrib_3.isa, v1, 0x8625u);
  SKGLPrintVertexAttribInteger(&cfstr_GlVertexAttrib_4.isa, v1, 0x886Au);
  NSLog(&stru_26BEF5330.isa);
}

void SKGLPrintState()
{
}

void SKGLPrintError()
{
  GLenum Error = glGetError();
  switch(Error)
  {
    case 0x500u:
      NSLog(&cfstr_GlInvalidEnum.isa);
      break;
    case 0x501u:
      NSLog(&cfstr_GlInvalidValue.isa);
      break;
    case 0x502u:
    case 0x505u:
    case 0x506u:
      NSLog(&cfstr_GlInvalidOpera.isa);
      break;
    case 0x503u:
    case 0x504u:
      goto LABEL_5;
    default:
      if (Error) {
LABEL_5:
      }
        NSLog(&cfstr_GlErrorUnknown.isa);
      else {
        NSLog(&cfstr_GlNoError.isa);
      }
      break;
  }
}

id SKGetVersionString()
{
  GLenum v0 = objc_msgSend(NSString, "stringWithFormat:", @"%d.%d", 51, 0);
  GLuint v1 = [NSString stringWithFormat:@"%@.%d", v0, 3];

  return v1;
}

void sub_20AE5C900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5CA34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5CAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE5CBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5CC3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5CCD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5CD30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5CDB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5CE3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5CEC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKCParticleUpdater::SKCParticleUpdater(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = MEMORY[0x21052F3F0](a2);
  *(unsigned char *)(a1 + 8) = 1;
  return a1;
}

void SKCParticleUpdater::setUpdateBlock(void **a1, uint64_t a2)
{
  uint64_t v3 = MEMORY[0x21052F3F0](a2);
  int v4 = *a1;
  *a1 = (void *)v3;
}

id SKCParticleUpdater::getUpdateBlock(SKCParticleUpdater *this)
{
  GLuint v1 = (void *)MEMORY[0x21052F3F0](*(void *)this);

  return v1;
}

uint64_t SKCParticleUpdater::setEnabled(uint64_t this, char a2)
{
  *(unsigned char *)(this + 8) = a2;
  return this;
}

uint64_t SKCParticleUpdater::getEnabled(SKCParticleUpdater *this)
{
  return *((unsigned __int8 *)this + 8);
}

void SKCSceneNode::SKCSceneNode(SKCSceneNode *this)
{
  SKCEffectNode::SKCEffectNode(this);
  *(void *)uint64_t v1 = &unk_26BEEE238;
  *(void *)(v1 + 728) = 0;
  *(unsigned char *)(v1 + 736) = 0;
  *(unsigned char *)(v1 + 704) = 0;
  *(void *)(v1 + 352) = 0;
  *(void *)(v1 + 360) = 0;
  operator new();
}

void sub_20AE5D1F8(_Unwind_Exception *a1)
{
  SKCEffectNode::~SKCEffectNode(v1);
  _Unwind_Resume(a1);
}

void SKCSceneNode::~SKCSceneNode(SKCSceneNode *this)
{
  *(void *)this = &unk_26BEEE238;
  uint64_t v2 = *((void *)this + 93);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 88))(v2);
  }
  uint64_t v3 = *((void *)this + 94);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 88))(v3);
  }
  uint64_t v4 = *((void *)this + 95);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 88))(v4);
  }

  SKCEffectNode::~SKCEffectNode((id *)this);
}

{
  uint64_t vars8;

  SKCSceneNode::~SKCSceneNode(this);

  JUMPOUT(0x21052EA30);
}

double SKCSceneNode::getBoundingBox(float32x4_t *this)
{
  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  *(void *)&double result = vmulq_f32(vsubq_f32(v1, this[22]), this[21]).u64[0];
  return result;
}

__n128 SKCSceneNode::getTransformMatrix(SKCSceneNode *this)
{
  return *(__n128 *)MEMORY[0x263EF89A8];
}

double SKCSceneNode::getInverseTransformMatrix(SKCSceneNode *this)
{
  (*(void (**)(SKCSceneNode *))(*(void *)this + 104))(this);

  *(void *)&double result = (unint64_t)__invert_f4(v1);
  return result;
}

void SKCSceneNode::matrixForDestination(SKCSceneNode *this, double a2, float a3)
{
  v78.n128_f64[0] = a2;
  *(double *)v4.i64 = (*(double (**)(SKCSceneNode *))(*(void *)this + 120))(this);
  v84.columns[0] = v4;
  v84.columns[1] = v5;
  v84.columns[2] = v6;
  v84.columns[3] = v7;
  float32x4_t AABB = SKCBoundingBoxGetAABB(&v84);
  int v9 = (void *)*((void *)this + 1);
  if (v9)
  {
    id v10 = v9;
    [v10 visibleRect];
    double v12 = v11;
    [v10 visibleRect];
    double v14 = v13;
    [v10 visibleRect];
    double v16 = v15;
    [v10 visibleRect];
    double v18 = v17;
    int v19 = [v10 camera];
    unint64_t v20 = (SKCNode *)[v19 _backingNode];
    v21.f32[0] = v12;
    float32_t v22 = v14;
    *(float *)&unsigned int v23 = v16;
    *(float *)&unsigned int v24 = v18;
    v21.f32[1] = v22;
    v21.i64[1] = __PAIR64__(v24, v23);
    float32x4_t v71 = v21;

    float32x4_t AABB = v71;
  }
  else
  {
    unint64_t v20 = 0;
  }
  float v25 = v78.n128_f32[0] / a3;
  uint64_t v26 = AABB.i64[1];
  float v27 = AABB.f32[1];
  *(void *)&long long v28 = AABB.i64[0];
  *((void *)&v28 + SKCNode::setFlags(this, 66, 1) = 3304718336;
  float32x2_t v29 = (float32x2_t)vextq_s8((int8x16_t)AABB, (int8x16_t)AABB, 8uLL).u64[0];
  *(float32x2_t *)&long long v30 = vadd_f32(*(float32x2_t *)AABB.f32, v29);
  *((void *)&v30 + SKCNode::setFlags(this, 66, 1) = 1157234688;
  uint64_t v31 = *((void *)this + 91);
  float v32 = AABB.f32[2] / AABB.f32[3];
  float32x2_t v70 = v29;
  long long v74 = v30;
  long long v76 = v28;
  if (v31 == 1)
  {
    float v73 = AABB.f32[0];
    SKCNode::setHidden(*((SKCNode **)this + 93), 1);
    SKCNode::setHidden(*((SKCNode **)this + 94), 1);
    if (v25 >= v32)
    {
      float v41 = v27 + (float)(*((float *)&v26 + 1) * 0.5);
      long long v40 = v74;
      long long v39 = v76;
      *((float *)&v39 + SKCNode::setFlags(this, 66, 1) = v41 - (float)((float)(*(float *)&v26 / v25) * 0.5);
      *((float *)&v40 + SKCNode::setFlags(this, 66, 1) = v41 + (float)((float)(*(float *)&v26 / v25) * 0.5);
    }
    else
    {
      long long v40 = v74;
      float v38 = v73 + (float)(*(float *)&v26 * 0.5);
      long long v39 = v76;
      *(float *)&long long v39 = v38 - (float)((float)(v25 * *((float *)&v26 + 1)) * 0.5);
      *(float *)&long long v40 = v38 + (float)((float)(v25 * *((float *)&v26 + 1)) * 0.5);
    }
  }
  else
  {
    if (v31 == 2 && (COERCE_UNSIGNED_INT(v25 - v32) & 0x60000000) != 0)
    {
      float v72 = AABB.f32[0];
      SKCNode::setHidden(*((SKCNode **)this + 93), 0);
      SKCNode::setHidden(*((SKCNode **)this + 94), 0);
      SKCNode::setTranslation(*((SKCNode **)this + 94), v78, a3);
      float v33 = (SKCNode *)*((void *)this + 93);
      if (v25 <= v32)
      {
        float v42 = v27 + (float)(*((float *)&v26 + 1) * 0.5);
        long long v43 = v76;
        *((float *)&v43 + SKCNode::setFlags(this, 66, 1) = v42 + (float)((float)(*(float *)&v26 / v25) * -0.5);
        long long v76 = v43;
        long long v44 = v74;
        *((float *)&v44 + SKCNode::setFlags(this, 66, 1) = v42 + (float)((float)(*(float *)&v26 / v25) * 0.5);
        long long v74 = v44;
        simd_float4 v81 = (simd_float4)__PAIR64__((float)((float)((float)(*((float *)&v26 + 1) * -0.5)+ (float)((float)(*(float *)&v26 / v25) * 0.5))/ (float)(*((float *)&v44 + 1)- (float)(v42 + (float)((float)(*(float *)&v26 / v25) * -0.5))))* a3, v78.n128_u32[0]);
        v84.columns[0] = v81;
      }
      else
      {
        float v34 = v72 + (float)(*(float *)&v26 * 0.5);
        long long v35 = v76;
        *(float *)&long long v35 = v34 + (float)((float)(v25 * *((float *)&v26 + 1)) * -0.5);
        long long v76 = v35;
        long long v36 = v74;
        *(float *)&long long v36 = v34 + (float)((float)(v25 * *((float *)&v26 + 1)) * 0.5);
        long long v74 = v36;
        *(float *)&unint64_t v37 = (float)((float)((float)(*(float *)&v26 * -0.5)
                                       + (float)((float)(v25 * *((float *)&v26 + 1)) * 0.5))
                               / (float)(*(float *)&v36
                                       - (float)(v34 + (float)((float)(v25 * *((float *)&v26 + 1)) * -0.5))))
                       * v78.n128_f32[0];
        *((float *)&v37 + SKCNode::setFlags(this, 66, 1) = a3;
        simd_float4 v81 = (simd_float4)v37;
        v84.columns[0] = (simd_float4)v37;
      }
      SKCNode::setSize(v33, &v84);
      unint64_t v45 = (SKCNode *)*((void *)this + 94);
      v84.columns[0] = v81;
      SKCNode::setSize(v45, &v84);
    }
    else
    {
      SKCNode::setHidden(*((SKCNode **)this + 93), 1);
      SKCNode::setHidden(*((SKCNode **)this + 94), 1);
    }
    long long v40 = v74;
    long long v39 = v76;
  }
  uint64_t v46 = 0;
  if (*((float *)&v40 + 2) >= *((float *)&v39 + 2)) {
    float v47 = *((float *)&v40 + 2);
  }
  else {
    float v47 = *((float *)&v39 + 2);
  }
  if (*((float *)&v40 + 2) >= *((float *)&v39 + 2)) {
    float v48 = *((float *)&v39 + 2);
  }
  else {
    float v48 = *((float *)&v40 + 2);
  }
  long long v49 = (_OWORD *)MEMORY[0x263EF89A8];
  float32x4_t v50 = *(float32x4_t *)MEMORY[0x263EF89A8];
  float32x4_t v51 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 16);
  float32x4_t v57 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 32);
  float32x4_t v58 = *(float32x4_t *)(MEMORY[0x263EF89A8] + 48);
  simd_float4 v52 = (simd_float4)v57;
  v52.f32[2] = -2.0 / (float)(v47 - v48);
  float32x2_t v53 = vsub_f32(*(float32x2_t *)&v40, *(float32x2_t *)&v39);
  simd_float4 v54 = *(simd_float4 *)MEMORY[0x263EF89A8];
  v54.f32[0] = 2.0 / v53.f32[0];
  simd_float4 v55 = (simd_float4)v51;
  v55.f32[1] = 2.0 / v53.f32[1];
  *(float32x2_t *)v56.f32 = vdiv_f32(vneg_f32(vadd_f32(*(float32x2_t *)&v40, *(float32x2_t *)&v39)), v53);
  v56.i32[3] = vextq_s8(*(int8x16_t *)&v58, *(int8x16_t *)&v58, 8uLL).i32[1];
  v56.f32[2] = (float)-(float)(v47 + v48) / (float)(v47 - v48);
  v57.i32[2] = 0.5;
  v58.i32[2] = 0.5;
  v83.columns[0] = v54;
  v83.columns[1] = v55;
  v83.columns[2] = v52;
  v83.columns[3] = v56;
  do
  {
    v84.columns[v46] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v50, COERCE_FLOAT(*(_OWORD *)&v83.columns[v46])), v51, *(float32x2_t *)v83.columns[v46].f32, 1), v57, (float32x4_t)v83.columns[v46], 2), v58, (float32x4_t)v83.columns[v46], 3);
    ++v46;
  }
  while (v46 != 4);
  if (v20)
  {
    float32x4_t v75 = (float32x4_t)v84.columns[3];
    float32x4_t v77 = (float32x4_t)v84.columns[2];
    float32x4_t v79 = (float32x4_t)v84.columns[1];
    float32x4_t v82 = (float32x4_t)v84.columns[0];
    __n128 ConversionMatrixFromWorld = SKCNode::getConversionMatrixFromWorld(v20);
    uint64_t v60 = 0;
    *(float32x2_t *)v65.f32 = vmul_f32(v70, vsub_f32((float32x2_t)0x3F0000003F000000, *(float32x2_t *)((char *)this + 352)));
    float32x4_t v61 = *(float32x4_t *)v49;
    float32x4_t v62 = *((float32x4_t *)v49 + 1);
    float32x4_t v63 = *((float32x4_t *)v49 + 2);
    int8x16_t v64 = *((int8x16_t *)v49 + 3);
    v64.i32[2] = 0;
    v65.i64[1] = vextq_s8(v64, v64, 8uLL).u64[0];
    v83.columns[0] = (simd_float4)ConversionMatrixFromWorld;
    v83.columns[1] = v66;
    v83.columns[2] = v67;
    v83.columns[3] = v68;
    do
    {
      v84.columns[v60] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, COERCE_FLOAT(*(_OWORD *)&v83.columns[v60])), v62, *(float32x2_t *)v83.columns[v60].f32, 1), v63, (float32x4_t)v83.columns[v60], 2), v65, (float32x4_t)v83.columns[v60], 3);
      ++v60;
    }
    while (v60 != 4);
    uint64_t v69 = 0;
    simd_float4x4 v83 = v84;
    do
    {
      v84.columns[v69] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v82, COERCE_FLOAT(*(_OWORD *)&v83.columns[v69])), v79, *(float32x2_t *)v83.columns[v69].f32, 1), v77, (float32x4_t)v83.columns[v69], 2), v75, (float32x4_t)v83.columns[v69], 3);
      ++v69;
    }
    while (v69 != 4);
  }
}

void sub_20AE5D8A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCSceneNode::getCropGroup(SKCSceneNode *this)
{
}

void sub_20AE5DB08(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void SKCSceneNode::notifyDirtyState(SKCSceneNode *this)
{
  if (*((unsigned char *)this + 736))
  {
    *((unsigned char *)this + 736) = 0;
    id v2 = [MEMORY[0x263F08A00] defaultCenter];
    [v2 postNotificationName:@"kC3DSceneDidUpdateNotification" object:*((void *)this + 1)];
  }
}

void sub_20AE5DBA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKCSceneNode::setBackgroundFromPixelBuffer(SKCSceneNode *this, CVPixelBufferRef texture)
{
  if (texture)
  {
    uint64_t v3 = (SKCVideoNode *)*((void *)this + 95);
    if (!v3) {
      operator new();
    }
    SKCVideoNode::setNextVideoFrame(v3, texture);
    SKCNode::setDirty(this);
    SKCNode::recomputeFlags(this, 1);
  }
}

void sub_20AE5DD28(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C405FC3EF92);
  _Unwind_Resume(a1);
}

void sub_20AE5DDCC(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C409109DBC5);
  _Unwind_Resume(a1);
}

void sub_20AE5DF3C(_Unwind_Exception *a1)
{
  simd_float4 v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE5E00C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5E098(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE5E1E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5E314(_Unwind_Exception *a1)
{
  simd_float4 v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE5E41C(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C40E99573A4);

  _Unwind_Resume(a1);
}

void sub_20AE5E550(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v3, 0x1081C40E99573A4);

  _Unwind_Resume(a1);
}

void sub_20AE5E604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5E670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5E6D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCHide::SKCHide(SKCHide *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v3 = &unk_26BEEE338;
  *(unsigned char *)(v3 + 112) = 1;
  *(void *)(v3 + 24) = a2->var4;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(void *)(v3 + 56) = *(void *)&a2->var8;
  *(void *)(v3 + 88) = a2->var14;
  *(unsigned char *)(v3 + 32) = 1;
}

void SKCHide::~SKCHide(SKCHide *this)
{
  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

SKCHide *SKCHide::cpp_updateWithTargetForTime(SKCHide *this, SKCNode *a2, double a3)
{
  if (!this->var11)
  {
    simd_float4 v5 = this;
    SKCNode::setHidden(a2, this->var19);
    simd_float4 v6 = (uint64_t (*)(SKCHide *, SKCNode *, __n128))*((void *)v5->var0 + 13);
    v7.n128_f64[0] = a3;
    return (SKCHide *)v6(v5, a2, v7);
  }
  return this;
}

void sub_20AE5EB4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5ED2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5EE40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE5EF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5F648(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5F75C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE5F7FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE5F88C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SKSoundBuffer;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void MaxRectsBinPack::MaxRectsBinPack(MaxRectsBinPack *this)
{
  *((void *)this + 6) = 0;
  *((_OWORD *)this + SKCNode::setFlags(this, 66, 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

void MaxRectsBinPack::MaxRectsBinPack(MaxRectsBinPack *this, int a2, int a3)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  MaxRectsBinPack::Init(this, a2, a3);
}

void sub_20AE5F91C(_Unwind_Exception *exception_object)
{
  simd_float4 v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  simd_float4 v5 = *v2;
  if (*v2)
  {
    v1[2] = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void MaxRectsBinPack::Init(MaxRectsBinPack *this, int a2, int a3)
{
  *(_DWORD *)this = a2;
  *((_DWORD *)this + SKCNode::setFlags(this, 66, 1) = a3;
  double v4 = (double)a2;
  double v5 = (double)a3;
  *((void *)this + 2) = *((void *)this + 1);
  unint64_t v6 = *((void *)this + 4);
  *((void *)this + 5) = v6;
  unint64_t v9 = *((void *)this + 6);
  __n128 v7 = (char *)this + 48;
  unint64_t v8 = v9;
  if (v6 >= v9)
  {
    uint64_t v11 = v8 - v6;
    uint64_t v12 = v11 >> 4;
    if ((unint64_t)(v11 >> 4) <= 1) {
      uint64_t v12 = 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>((uint64_t)v7, v13);
    double v16 = &v14[32 * v15];
    *(void *)double v14 = 0;
    *((void *)v14 + SKCNode::setFlags(this, 66, 1) = 0;
    *((double *)v14 + 2) = v4;
    *((double *)v14 + 3) = v5;
    id v10 = v14 + 32;
    double v18 = (char *)*((void *)this + 4);
    double v17 = (char *)*((void *)this + 5);
    if (v17 != v18)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v17 - 2);
        *((_OWORD *)v14 - SKCNode::setFlags(this, 66, 1) = v19;
        v14 -= 32;
        v17 -= 32;
      }
      while (v17 != v18);
      double v17 = (char *)*((void *)this + 4);
    }
    *((void *)this + 4) = v14;
    *((void *)this + 5) = v10;
    *((void *)this + 6) = v16;
    if (v17) {
      operator delete(v17);
    }
  }
  else
  {
    *(void *)unint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    id v10 = (char *)(v6 + 32);
    *(double *)(v6 + 16) = v4;
    *(double *)(v6 + 24) = v5;
  }
  *((void *)this + 5) = v10;
}

void std::vector<CGRect>::push_back[abi:ne180100](void **a1, _OWORD *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  __n128 v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((char *)v7 - (unsigned char *)*a1) >> 5;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 59) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 4 > v11) {
      unint64_t v11 = v12 >> 4;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      double v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v4, v13);
    }
    else {
      double v14 = 0;
    }
    uint64_t v15 = &v14[32 * v10];
    double v16 = &v14[32 * v13];
    long long v17 = a2[1];
    *(_OWORD *)uint64_t v15 = *a2;
    *((_OWORD *)v15 + SKCNode::setFlags(this, 66, 1) = v17;
    unint64_t v9 = v15 + 32;
    long long v19 = (char *)*a1;
    double v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v15 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v15 - SKCNode::setFlags(this, 66, 1) = v20;
        v15 -= 32;
        v18 -= 32;
      }
      while (v18 != v19);
      double v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v8 = a2[1];
    *__n128 v7 = *a2;
    v7[1] = v8;
    unint64_t v9 = v7 + 2;
  }
  a1[1] = v9;
}

double MaxRectsBinPack::Insert(MaxRectsBinPack *this, int a2, uint64_t a3, int a4)
{
  *(void *)float v34 = 0;
  switch(a4)
  {
    case 0:
      MaxRectsBinPack::FindPositionForNewNodeBestShortSideFit((uint64_t)this, a2, a3, &v34[1], v34);
      goto LABEL_7;
    case 1:
      MaxRectsBinPack::FindPositionForNewNodeBestLongSideFit((uint64_t)this, a2, a3, v34, &v34[1]);
      goto LABEL_7;
    case 2:
      MaxRectsBinPack::FindPositionForNewNodeBestAreaFit((uint64_t)this, a2, a3, &v34[1], v34);
      goto LABEL_7;
    case 3:
      MaxRectsBinPack::FindPositionForNewNodeBottomLeft((uint64_t)this, a2, a3, &v34[1], v34);
      goto LABEL_7;
    case 4:
      double PositionForNewNodeContactPoint = MaxRectsBinPack::FindPositionForNewNodeContactPoint(this, a2, a3, &v34[1]);
LABEL_7:
      double v4 = PositionForNewNodeContactPoint;
      v35.origin.CGFloat x = PositionForNewNodeContactPoint;
      v35.origin.CGFloat y = v7;
      v35.size.CGFloat width = v8;
      v35.size.CGFloat height = v9;
      if (v9 != 0.0) {
        goto LABEL_8;
      }
      return v4;
    default:
LABEL_8:
      uint64_t v10 = *((void *)this + 5) - *((void *)this + 4);
      if (v10)
      {
        unint64_t v11 = 0;
        unint64_t v12 = v10 >> 5;
        do
        {
          if (MaxRectsBinPack::SplitFreeNode((void **)this, *(CGRect *)(*((void *)this + 4) + 32 * v11), &v35))
          {
            uint64_t v13 = *((void *)this + 4);
            uint64_t v14 = *((void *)this + 5);
            uint64_t v15 = v13 + 32 * v11;
            uint64_t v16 = v14 - (v15 + 32);
            if (v14 != v15 + 32) {
              memmove((void *)(v13 + 32 * v11), (const void *)(v15 + 32), v14 - (v15 + 32));
            }
            *((void *)this + 5) = v15 + v16;
            --v11;
            --v12;
          }
          ++v11;
        }
        while (v11 < v12);
      }
      MaxRectsBinPack::PruneFreeList((const CGRect **)this);
      unint64_t v17 = *((void *)this + 3);
      unint64_t v18 = *((void *)this + 2);
      if (v18 >= v17)
      {
        uint64_t v21 = *((void *)this + 1);
        uint64_t v22 = (uint64_t)(v18 - v21) >> 5;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 59) {
          std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v24 = v17 - v21;
        if (v24 >> 4 > v23) {
          unint64_t v23 = v24 >> 4;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25) {
          uint64_t v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>((uint64_t)this + 24, v25);
        }
        else {
          uint64_t v26 = 0;
        }
        float v27 = (CGSize *)&v26[32 * v22];
        long long v28 = &v26[32 * v25];
        CGSize size = v35.size;
        CGSize *v27 = (CGSize)v35.origin;
        v27[1] = size;
        long long v20 = (char *)&v27[2];
        uint64_t v31 = (char *)*((void *)this + 1);
        long long v30 = (char *)*((void *)this + 2);
        if (v30 != v31)
        {
          do
          {
            CGSize v32 = (CGSize)*((_OWORD *)v30 - 1);
            v27[-2] = *((CGSize *)v30 - 2);
            v27[-1] = v32;
            v27 -= 2;
            v30 -= 32;
          }
          while (v30 != v31);
          long long v30 = (char *)*((void *)this + 1);
        }
        *((void *)this + SKCNode::setFlags(this, 66, 1) = v27;
        *((void *)this + 2) = v20;
        *((void *)this + 3) = v28;
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        CGSize v19 = v35.size;
        *(CGPoint *)unint64_t v18 = v35.origin;
        *(CGSize *)(v18 + 16) = v19;
        long long v20 = (char *)(v18 + 32);
      }
      *((void *)this + 2) = v20;
      return v4;
  }
}

uint64_t MaxRectsBinPack::FindPositionForNewNodeBestShortSideFit(uint64_t this, int a2, int a3, int *a4, int *a5)
{
  *a4 = 0x7FFFFFFF;
  uint64_t v5 = *(void *)(this + 32);
  uint64_t v6 = *(void *)(this + 40) - v5;
  if (v6)
  {
    double v7 = (double)a2;
    unint64_t v8 = v6 >> 5;
    double v9 = (double)a3;
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    uint64_t v10 = (double *)(v5 + 24);
    do
    {
      double v11 = *(v10 - 1);
      if (v11 >= v7 && *v10 >= v9)
      {
        int v13 = (int)v11 - a2;
        if (v13 < 0) {
          int v13 = a2 - (int)v11;
        }
        double v12 = *v10;
        if ((int)*v10 - a3 >= 0) {
          unsigned int v14 = (int)v12 - a3;
        }
        else {
          unsigned int v14 = a3 - (int)v12;
        }
        if (v14 >= v13) {
          int v15 = v13;
        }
        else {
          int v15 = v14;
        }
        if (v13 <= v14) {
          int v13 = v14;
        }
        if (v15 < *a4 || (v15 == *a4 ? (BOOL v16 = v13 < *a5) : (BOOL v16 = 0), v16))
        {
          *a4 = v15;
          *a5 = v13;
        }
      }
      if (v11 >= v9 && *v10 >= v7)
      {
        int v18 = (int)v11 - a3;
        if (v18 < 0) {
          int v18 = a3 - (int)v11;
        }
        double v17 = *v10;
        if ((int)*v10 - a2 >= 0) {
          unsigned int v19 = (int)v17 - a2;
        }
        else {
          unsigned int v19 = a2 - (int)v17;
        }
        if (v19 >= v18) {
          int v20 = v18;
        }
        else {
          int v20 = v19;
        }
        if (v18 <= v19) {
          int v18 = v19;
        }
        if (v20 < *a4 || (v20 == *a4 ? (BOOL v21 = v18 < *a5) : (BOOL v21 = 0), v21))
        {
          *a4 = v20;
          *a5 = v18;
        }
      }
      v10 += 4;
      --v8;
    }
    while (v8);
  }
  return this;
}

uint64_t MaxRectsBinPack::FindPositionForNewNodeBottomLeft(uint64_t this, int a2, int a3, int *a4, int *a5)
{
  *a4 = 0x7FFFFFFF;
  uint64_t v5 = *(double **)(this + 32);
  uint64_t v6 = *(void *)(this + 40) - (void)v5;
  if (v6)
  {
    unint64_t v7 = v6 >> 5;
    double v8 = (double)a2;
    double v9 = (double)a3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      double v10 = v5[2];
      if (v10 >= v8 && v5[3] >= v9)
      {
        int v11 = (int)(v5[1] + v9);
        if (*a4 > v11)
        {
          double v12 = *v5;
LABEL_8:
          *a4 = v11;
          *a5 = (int)v12;
          goto LABEL_11;
        }
        if (*a4 == v11)
        {
          double v12 = *v5;
          if (*v5 < (double)*a5) {
            goto LABEL_8;
          }
        }
      }
LABEL_11:
      if (v10 < v9 || v5[3] < v8) {
        goto LABEL_18;
      }
      int v13 = (int)(v5[1] + v8);
      if (*a4 <= v13)
      {
        if (*a4 != v13) {
          goto LABEL_18;
        }
        double v14 = *v5;
        if (*v5 >= (double)*a5) {
          goto LABEL_18;
        }
      }
      else
      {
        double v14 = *v5;
      }
      *a4 = v13;
      *a5 = (int)v14;
LABEL_18:
      v5 += 4;
      --v7;
    }
    while (v7);
  }
  return this;
}

double MaxRectsBinPack::FindPositionForNewNodeContactPoint(MaxRectsBinPack *this, int a2, uint64_t a3, int *a4)
{
  double v22 = *MEMORY[0x263F001A8];
  *a4 = -1;
  uint64_t v4 = *((void *)this + 4);
  uint64_t v5 = *((void *)this + 5) - v4;
  if (v5)
  {
    unint64_t v10 = v5 >> 5;
    double v11 = (double)a2;
    double v12 = (double)(int)a3;
    if (v10 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v10;
    }
    double v14 = (double *)(v4 + 24);
    int v15 = -1;
    do
    {
      double v16 = *(v14 - 1);
      if (v16 >= v11 && *v14 >= v12)
      {
        double v17 = *(v14 - 3);
        int v18 = MaxRectsBinPack::ContactPointScoreNode(this, (int)v17, (int)*(v14 - 2), a2, a3);
        if (v18 > v15)
        {
          int v15 = v18;
          *a4 = v18;
          double v22 = v17;
        }
      }
      if (v16 >= v12 && *v14 >= v11)
      {
        double v19 = *(v14 - 3);
        int v20 = MaxRectsBinPack::ContactPointScoreNode(this, (int)v19, (int)*(v14 - 2), a2, a3);
        if (v20 > v15)
        {
          int v15 = v20;
          *a4 = v20;
          double v22 = v19;
        }
      }
      v14 += 4;
      --v13;
    }
    while (v13);
  }
  return v22;
}

uint64_t MaxRectsBinPack::FindPositionForNewNodeBestLongSideFit(uint64_t this, int a2, int a3, int *a4, int *a5)
{
  *a5 = 0x7FFFFFFF;
  uint64_t v5 = *(void *)(this + 32);
  uint64_t v6 = *(void *)(this + 40) - v5;
  if (v6)
  {
    unint64_t v7 = v6 >> 5;
    double v8 = (double)a2;
    double v9 = (double)a3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    unint64_t v10 = (double *)(v5 + 24);
    int v11 = 0x7FFFFFFF;
    do
    {
      double v12 = *(v10 - 1);
      if (v12 >= v8 && *v10 >= v9)
      {
        int v14 = (int)v12 - a2;
        if (v14 < 0) {
          int v14 = a2 - (int)v12;
        }
        double v13 = *v10;
        if ((int)*v10 - a3 >= 0) {
          unsigned int v15 = (int)v13 - a3;
        }
        else {
          unsigned int v15 = a3 - (int)v13;
        }
        if (v15 >= v14) {
          int v16 = v14;
        }
        else {
          int v16 = v15;
        }
        if (v14 <= v15) {
          int v14 = v15;
        }
        if (v14 < v11 || (v14 == v11 ? (BOOL v17 = v16 < *a4) : (BOOL v17 = 0), v17))
        {
          *a4 = v16;
          int v11 = v14;
          *a5 = v14;
        }
      }
      if (v12 >= v9 && *v10 >= v8)
      {
        int v19 = (int)v12 - a3;
        if (v19 < 0) {
          int v19 = a3 - (int)v12;
        }
        double v18 = *v10;
        if ((int)*v10 - a2 >= 0) {
          unsigned int v20 = (int)v18 - a2;
        }
        else {
          unsigned int v20 = a2 - (int)v18;
        }
        if (v20 >= v19) {
          int v21 = v19;
        }
        else {
          int v21 = v20;
        }
        if (v19 <= v20) {
          int v19 = v20;
        }
        if (v19 < v11 || (v19 == v11 ? (BOOL v22 = v21 < *a4) : (BOOL v22 = 0), v22))
        {
          *a4 = v21;
          int v11 = v19;
          *a5 = v19;
        }
      }
      v10 += 4;
      --v7;
    }
    while (v7);
  }
  return this;
}

uint64_t MaxRectsBinPack::FindPositionForNewNodeBestAreaFit(uint64_t this, int a2, int a3, int *a4, int *a5)
{
  *a4 = 0x7FFFFFFF;
  uint64_t v5 = *(void *)(this + 32);
  uint64_t v6 = *(void *)(this + 40) - v5;
  if (v6)
  {
    unint64_t v7 = v6 >> 5;
    double v8 = (double)a2;
    double v9 = (double)a3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    int v10 = 0x7FFFFFFF;
    do
    {
      double v12 = *(double *)(v5 + 16);
      double v11 = *(double *)(v5 + 24);
      double v13 = v12 * v11 - (double)(a3 * a2);
      int v14 = (int)v13;
      if (v12 >= v8 && v11 >= v9)
      {
        int v16 = (int)v12 - a2;
        if (v16 < 0) {
          int v16 = a2 - (int)v12;
        }
        int v17 = (int)v11 - a3;
        if (v17 < 0) {
          int v17 = a3 - (int)v11;
        }
        if (v17 < v16) {
          int v16 = v17;
        }
        if (v10 > v14 || (v10 == v14 ? (BOOL v18 = v16 < *a5) : (BOOL v18 = 0), v18))
        {
          *a5 = v16;
          int v10 = (int)v13;
          *a4 = v14;
        }
      }
      if (v12 >= v9 && v11 >= v8)
      {
        int v20 = (int)v12 - a3;
        if (v20 < 0) {
          int v20 = a3 - (int)v12;
        }
        int v21 = (int)v11 - a2;
        if (v21 < 0) {
          int v21 = a2 - (int)v11;
        }
        if (v21 < v20) {
          int v20 = v21;
        }
        if (v10 > v14 || (v10 == v14 ? (BOOL v22 = v20 < *a5) : (BOOL v22 = 0), v22))
        {
          *a5 = v20;
          int v10 = (int)v13;
          *a4 = v14;
        }
      }
      v5 += 32;
      --v7;
    }
    while (v7);
  }
  return this;
}

uint64_t MaxRectsBinPack::SplitFreeNode(void **this, CGRect a2, const CGRect *a3)
{
  double width = a2.size.width;
  double x = a3->origin.x;
  double v5 = a2.origin.x + width;
  if (a3->origin.x >= a2.origin.x + width) {
    return 0;
  }
  double height = a2.size.height;
  double v8 = a2.origin.x;
  double v9 = x + a3->size.width;
  if (v9 <= a2.origin.x) {
    return 0;
  }
  double y = a2.origin.y;
  double v11 = a3->origin.y;
  double v12 = a2.origin.y + height;
  if (v11 >= a2.origin.y + height) {
    return 0;
  }
  double v13 = v11 + a3->size.height;
  if (v13 <= y) {
    return 0;
  }
  if (x < v5 && v9 > v8)
  {
    if (v11 > y && v11 < v12)
    {
      *(double *)&long long v20 = v8;
      *((double *)&v20 + SKCNode::setFlags(this, 66, 1) = y;
      double v21 = width;
      double v22 = v11 - y;
      std::vector<CGRect>::push_back[abi:ne180100](this + 4, &v20);
      double v11 = a3->origin.y;
      double v13 = v11 + a3->size.height;
    }
    if (v13 < v12)
    {
      *(double *)&long long v20 = v8;
      *((double *)&v20 + SKCNode::setFlags(this, 66, 1) = v13;
      double v21 = width;
      double v22 = v12 - v13;
      std::vector<CGRect>::push_back[abi:ne180100](this + 4, &v20);
      double v11 = a3->origin.y;
    }
  }
  if (v11 < v12 && v11 + a3->size.height > y)
  {
    double v17 = a3->origin.x;
    if (a3->origin.x > v8 && v17 < v5)
    {
      *(double *)&long long v20 = v8;
      *((double *)&v20 + SKCNode::setFlags(this, 66, 1) = y;
      double v21 = v17 - v8;
      double v22 = height;
      std::vector<CGRect>::push_back[abi:ne180100](this + 4, &v20);
      double v17 = a3->origin.x;
    }
    double v18 = v17 + a3->size.width;
    if (v18 < v5)
    {
      *(double *)&long long v20 = v18;
      *((double *)&v20 + SKCNode::setFlags(this, 66, 1) = y;
      double v21 = v5 - v18;
      double v22 = height;
      std::vector<CGRect>::push_back[abi:ne180100](this + 4, &v20);
    }
  }
  return 1;
}

const CGRect **MaxRectsBinPack::PruneFreeList(const CGRect **this)
{
  uint64_t v1 = this[4];
  uint64_t v2 = this[5];
  if (v2 != v1)
  {
    uint64_t v3 = (uint64_t)this;
    unint64_t v4 = 0;
    do
    {
      if (v4 + 1 >= v2 - v1)
      {
LABEL_12:
        ++v4;
      }
      else
      {
        unint64_t v5 = v4 + 1;
        unint64_t v6 = v4;
        while (1)
        {
          unint64_t v7 = &v1[v4];
          double v8 = &v1[v5];
          this = (const CGRect **)MaxRectsBinPack::IsContainedIn((MaxRectsBinPack *)this, v7, v8);
          if (this) {
            break;
          }
          this = (const CGRect **)MaxRectsBinPack::IsContainedIn((MaxRectsBinPack *)this, &v1[v5], &v1[v4]);
          if (this)
          {
            int64_t v9 = (char *)v2 - (char *)&v8[1];
            if (v2 != &v8[1])
            {
              this = (const CGRect **)memmove((void *)&v1[v5], &v8[1], (char *)v2 - (char *)&v8[1]);
              uint64_t v1 = *(const CGRect **)(v3 + 32);
            }
            --v2;
            *(void *)(v3 + 40) = (char *)v8 + v9;
          }
          else
          {
            unint64_t v6 = v5;
          }
          unint64_t v5 = v6 + 1;
          if (v6 + 1 >= v2 - v1) {
            goto LABEL_12;
          }
        }
        int64_t v10 = (char *)v2 - (char *)&v7[1];
        if (v2 != &v7[1])
        {
          this = (const CGRect **)memmove((void *)&v1[v4], &v7[1], (char *)v2 - (char *)&v7[1]);
          uint64_t v1 = *(const CGRect **)(v3 + 32);
        }
        --v2;
        *(void *)(v3 + 40) = (char *)v7 + v10;
      }
    }
    while (v4 < v2 - v1);
  }
  return this;
}

double MaxRectsBinPack::TrimmedSize(MaxRectsBinPack *this)
{
  int v2 = *(_DWORD *)this;
  int v3 = *((_DWORD *)this + 1);
  double v4 = (double)v3;
  if (v3 < 1)
  {
    int v5 = *(_DWORD *)this;
  }
  else
  {
    int v5 = *(_DWORD *)this;
    while (v5 < 1)
    {
LABEL_12:
      double v4 = v4 + -1.0;
      BOOL v9 = v3-- <= 1;
      if (v9) {
        goto LABEL_16;
      }
    }
    unint64_t v6 = (CGRect *)*((void *)this + 4);
    unint64_t v7 = (CGRect *)*((void *)this + 5);
    if (v6 != v7)
    {
      int v8 = 0;
      do
      {
        while (1)
        {
          v16.double x = (double)v8;
          v16.double y = (double)(v3 - 1);
          if (!CGRectContainsPoint(*v6, v16)) {
            break;
          }
          ++v8;
          int v5 = *(_DWORD *)this;
          if (v8 >= *(_DWORD *)this) {
            goto LABEL_12;
          }
          unint64_t v6 = (CGRect *)*((void *)this + 4);
          unint64_t v7 = (CGRect *)*((void *)this + 5);
          if (v6 == v7) {
            goto LABEL_16;
          }
        }
        ++v6;
      }
      while (v6 != v7);
      int v5 = *(_DWORD *)this;
    }
  }
LABEL_16:
  double v10 = (double)v2;
  if (v5 >= 1)
  {
    int v11 = *((_DWORD *)this + 1);
    while (v11 < 1)
    {
LABEL_25:
      double v10 = v10 + -1.0;
      BOOL v9 = v5-- <= 1;
      if (v9) {
        return v10;
      }
    }
    int v12 = 0;
    while (1)
    {
      double v13 = (CGRect *)*((void *)this + 4);
      int v14 = (CGRect *)*((void *)this + 5);
      if (v13 == v14) {
        break;
      }
      while (1)
      {
        v17.double x = (double)(v5 - 1);
        v17.double y = (double)v12;
        if (CGRectContainsPoint(*v13, v17)) {
          break;
        }
        if (++v13 == v14) {
          return v10;
        }
      }
      ++v12;
      int v11 = *((_DWORD *)this + 1);
      if (v12 >= v11) {
        goto LABEL_25;
      }
    }
  }
  return v10;
}

void MaxRectsBinPack::Insert(MaxRectsBinPack *a1, uint64_t *a2, void *a3, int a4)
{
  a3[1] = *a3;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1] - *a2;
  if (v6)
  {
    do
    {
      if (!v6) {
        break;
      }
      uint64_t v10 = 0;
      unint64_t v11 = v6 >> 4;
      CGFloat y = v29.origin.y;
      CGFloat width = v29.size.width;
      uint64_t v14 = v11 <= 1 ? 1 : v11;
      CGFloat height = v29.size.height;
      CGPoint v16 = (double *)(v5 + 8);
      int v17 = -1;
      int v18 = 0x7FFFFFFF;
      int v19 = 0x7FFFFFFF;
      do
      {
        *(void *)long long v28 = 0;
        MaxRectsBinPack::ScoreRect(a1, (int)*(v16 - 1), (int)*v16, a4, &v28[1], v28);
        if (v28[1] < v18 || (v28[1] == v18 ? (BOOL v24 = v28[0] < v19) : (BOOL v24 = 0), v24))
        {
          CGFloat height = v23;
          CGFloat width = v22;
          CGFloat y = v21;
          CGFloat v4 = v20;
          int v19 = v28[0];
          int v17 = v10;
          int v18 = v28[1];
        }
        ++v10;
        v16 += 2;
      }
      while (v14 != v10);
      v29.size.CGFloat width = width;
      v29.size.CGFloat height = height;
      v29.origin.double x = v4;
      v29.origin.CGFloat y = y;
      if (v17 == -1) {
        break;
      }
      MaxRectsBinPack::PlaceRect(a1, &v29);
      uint64_t v5 = *a2;
      uint64_t v25 = a2[1];
      uint64_t v26 = *a2 + 16 * v17;
      uint64_t v27 = v25 - (v26 + 16);
      if (v25 != v26 + 16)
      {
        memmove((void *)v26, (const void *)(v26 + 16), v25 - (v26 + 16));
        uint64_t v5 = *a2;
      }
      a2[1] = v26 + v27;
      uint64_t v6 = v26 + v27 - v5;
    }
    while (v26 + v27 != v5);
  }
}

void MaxRectsBinPack::ScoreRect(MaxRectsBinPack *a1, int a2, uint64_t a3, int a4, int *a5, int *a6)
{
  *a5 = 0x7FFFFFFF;
  *a6 = 0x7FFFFFFF;
  switch(a4)
  {
    case 0:
      MaxRectsBinPack::FindPositionForNewNodeBestShortSideFit((uint64_t)a1, a2, a3, a5, a6);
      goto LABEL_7;
    case 1:
      MaxRectsBinPack::FindPositionForNewNodeBestLongSideFit((uint64_t)a1, a2, a3, a6, a5);
      goto LABEL_7;
    case 2:
      MaxRectsBinPack::FindPositionForNewNodeBestAreaFit((uint64_t)a1, a2, a3, a5, a6);
      goto LABEL_7;
    case 3:
      MaxRectsBinPack::FindPositionForNewNodeBottomLeft((uint64_t)a1, a2, a3, a5, a6);
      goto LABEL_7;
    case 4:
      MaxRectsBinPack::FindPositionForNewNodeContactPoint(a1, a2, a3, a5);
      *a5 = -*a5;
LABEL_7:
      if (v8 == 0.0)
      {
        *a5 = 0x7FFFFFFF;
        *a6 = 0x7FFFFFFF;
      }
      break;
    default:
      return;
  }
}

void MaxRectsBinPack::PlaceRect(MaxRectsBinPack *this, const CGRect *a2)
{
  uint64_t v4 = *((void *)this + 5) - *((void *)this + 4);
  if (v4)
  {
    unint64_t v5 = 0;
    unint64_t v6 = v4 >> 5;
    do
    {
      if (MaxRectsBinPack::SplitFreeNode((void **)this, *(CGRect *)(*((void *)this + 4) + 32 * v5), a2))
      {
        uint64_t v7 = *((void *)this + 4);
        uint64_t v8 = *((void *)this + 5);
        uint64_t v9 = v7 + 32 * v5;
        uint64_t v10 = v8 - (v9 + 32);
        if (v8 != v9 + 32) {
          memmove((void *)(v7 + 32 * v5), (const void *)(v9 + 32), v8 - (v9 + 32));
        }
        *((void *)this + 5) = v9 + v10;
        --v5;
        --v6;
      }
      ++v5;
    }
    while (v5 < v6);
  }
  MaxRectsBinPack::PruneFreeList((const CGRect **)this);
  unint64_t v11 = *((void *)this + 3);
  unint64_t v12 = *((void *)this + 2);
  if (v12 >= v11)
  {
    uint64_t v15 = *((void *)this + 1);
    uint64_t v16 = (uint64_t)(v12 - v15) >> 5;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 59) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v18 = v11 - v15;
    if (v18 >> 4 > v17) {
      unint64_t v17 = v18 >> 4;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v19 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19) {
      double v20 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>((uint64_t)this + 24, v19);
    }
    else {
      double v20 = 0;
    }
    double v21 = (CGSize *)&v20[32 * v16];
    double v22 = &v20[32 * v19];
    CGSize size = a2->size;
    CGSize *v21 = (CGSize)a2->origin;
    v21[1] = size;
    uint64_t v14 = (char *)&v21[2];
    uint64_t v25 = (char *)*((void *)this + 1);
    BOOL v24 = (char *)*((void *)this + 2);
    if (v24 != v25)
    {
      do
      {
        CGSize v26 = (CGSize)*((_OWORD *)v24 - 1);
        v21[-2] = *((CGSize *)v24 - 2);
        v21[-1] = v26;
        v21 -= 2;
        v24 -= 32;
      }
      while (v24 != v25);
      BOOL v24 = (char *)*((void *)this + 1);
    }
    *((void *)this + SKCNode::setFlags(this, 66, 1) = v21;
    *((void *)this + 2) = v14;
    *((void *)this + 3) = v22;
    if (v24) {
      operator delete(v24);
    }
  }
  else
  {
    CGSize v13 = a2->size;
    *(CGPoint *)unint64_t v12 = a2->origin;
    *(CGSize *)(v12 + 16) = v13;
    uint64_t v14 = (char *)(v12 + 32);
  }
  *((void *)this + 2) = v14;
}

float MaxRectsBinPack::Occupancy(MaxRectsBinPack *this)
{
  uint64_t v2 = *((void *)this + 1);
  uint64_t v1 = *((void *)this + 2);
  uint64_t v3 = v1 - v2;
  if (v1 == v2)
  {
    float v7 = 0.0;
  }
  else
  {
    unint64_t v4 = 0;
    unint64_t v5 = v3 >> 5;
    if (v5 <= 1) {
      unint64_t v5 = 1;
    }
    unint64_t v6 = (double *)(v2 + 24);
    do
    {
      unint64_t v4 = (unint64_t)((double)v4 + *(v6 - 1) * *v6);
      v6 += 4;
      --v5;
    }
    while (v5);
    float v7 = (float)v4;
  }
  return v7 / (float)(*((_DWORD *)this + 1) * *(_DWORD *)this);
}

uint64_t MaxRectsBinPack::ContactPointScoreNode(MaxRectsBinPack *this, int a2, int a3, int a4, uint64_t a5)
{
  if (!a2 || a4 + a2 == *(_DWORD *)this)
  {
    uint64_t result = a5;
    if (!a3) {
      goto LABEL_7;
    }
LABEL_6:
    if (a5 + a3 != *((_DWORD *)this + 1)) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  uint64_t result = 0;
  if (a3) {
    goto LABEL_6;
  }
LABEL_7:
  uint64_t result = (result + a4);
LABEL_8:
  uint64_t v8 = *((void *)this + 1);
  uint64_t v7 = *((void *)this + 2);
  uint64_t v9 = v7 - v8;
  if (v7 != v8)
  {
    int v10 = a4 + a2;
    int v11 = a5 + a3;
    unint64_t v12 = v9 >> 5;
    if (v12 <= 1) {
      unint64_t v12 = 1;
    }
    CGSize v13 = (double *)(v8 + 16);
    do
    {
      double v14 = *(v13 - 2);
      if (v14 == (double)(a4 + a2) || v14 + *v13 == (double)a2)
      {
        double v15 = *(v13 - 1);
        int v16 = (int)v15;
        int v17 = (int)(v15 + v13[1]);
        if (v11 >= v17) {
          int v18 = (int)(v15 + v13[1]);
        }
        else {
          int v18 = a5 + a3;
        }
        if (v16 <= a3) {
          int v19 = a3;
        }
        else {
          int v19 = (int)v15;
        }
        int v20 = v18 - v19;
        if (v11 < v16 || v17 < a3) {
          int v22 = 0;
        }
        else {
          int v22 = v20;
        }
        uint64_t result = (v22 + result);
      }
      else
      {
        double v15 = *(v13 - 1);
      }
      if (v15 == (double)((int)a5 + a3) || v15 + v13[1] == (double)a3)
      {
        int v23 = (int)v14;
        int v24 = (int)(v14 + *v13);
        if (v10 >= v24) {
          int v25 = (int)(v14 + *v13);
        }
        else {
          int v25 = a4 + a2;
        }
        if (v23 <= a2) {
          int v26 = a2;
        }
        else {
          int v26 = (int)v14;
        }
        int v27 = v25 - v26;
        if (v10 < v23 || v24 < a2) {
          int v29 = 0;
        }
        else {
          int v29 = v27;
        }
        uint64_t result = (v29 + result);
      }
      v13 += 4;
      --v12;
    }
    while (v12);
  }
  return result;
}

BOOL MaxRectsBinPack::IsContainedIn(MaxRectsBinPack *this, const CGRect *a2, const CGRect *a3)
{
  if (a2->origin.x >= a3->origin.x
    && (y = a2->origin.y, double v4 = a3->origin.y, y >= v4)
    && a2->origin.x + a2->size.width <= a3->origin.x + a3->size.width)
  {
    return y + a2->size.height <= v4 + a3->size.height;
  }
  else
  {
    return 0;
  }
}

void sub_20AE61540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_20AE618B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_20AE619E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE622C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _Unwind_Resume(a1);
}

void sub_20AE624F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE62C54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54)
{
  _Unwind_Resume(a1);
}

BOOL sortTextureFunc(CGImageRef *a1, CGImageRef *a2)
{
  size_t Width = CGImageGetWidth(*a1);
  size_t v5 = CGImageGetHeight(*a1) * Width;
  size_t v6 = CGImageGetWidth(*a2);
  return v5 > CGImageGetHeight(*a2) * v6;
}

void MaxRectTexturePacker::~MaxRectTexturePacker(MaxRectTexturePacker *this)
{
  MaxRectTexturePacker::~MaxRectTexturePacker(this);

  JUMPOUT(0x21052EA30);
}

{
  void **v2;
  void *v3;
  void **v4;

  *(void *)this = &unk_26BEEE3F0;
  uint64_t v2 = (void **)((char *)this + 16);
  std::vector<std::shared_ptr<PKCField>>::__clear[abi:ne180100]((uint64_t *)this + 2);
  uint64_t v3 = (void *)*((void *)this + 8);
  if (v3)
  {
    *((void *)this + 9) = v3;
    operator delete(v3);
  }
  double v4 = (void **)((char *)this + 40);
  std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__destroy_vector::operator()[abi:ne180100](&v4);
  double v4 = v2;
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100](&v4);
}

MaxRectTexturePacker *MaxRectTexturePacker::setTextureCount(MaxRectTexturePacker *this)
{
  *((void *)this + 9) = *((void *)this + 8);
  return this;
}

void MaxRectTexturePacker::addTexture(MaxRectTexturePacker *this, const CGSize *a2)
{
  CGFloat width = a2->width;
  CGFloat height = a2->height;
  unint64_t v7 = *((void *)this + 10);
  size_t v5 = (char *)this + 80;
  unint64_t v6 = v7;
  uint64_t v8 = (CGFloat *)*((void *)v5 - 1);
  if ((unint64_t)v8 >= v7)
  {
    int v10 = (void **)(v5 - 16);
    uint64_t v11 = *((void *)v5 - 2);
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v11) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v11) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x555555555555555) {
      unint64_t v15 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      int v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MaxRectTexturePacker::InputTexInfo>>((uint64_t)v5, v15);
    }
    else {
      int v16 = 0;
    }
    int v17 = (CGFloat *)&v16[24 * v12];
    int v18 = &v16[24 * v15];
    *int v17 = width;
    v17[1] = height;
    *((void *)v17 + 2) = 15;
    uint64_t v9 = v17 + 3;
    int v20 = (CGFloat *)*((void *)this + 8);
    int v19 = (CGFloat *)*((void *)this + 9);
    if (v19 != v20)
    {
      do
      {
        long long v21 = *(_OWORD *)(v19 - 3);
        *(v17 - SKCNode::setFlags(this, 66, 1) = *(v19 - 1);
        *(_OWORD *)(v17 - 3) = v21;
        v17 -= 3;
        v19 -= 3;
      }
      while (v19 != v20);
      int v19 = (CGFloat *)*v10;
    }
    *((void *)this + 8) = v17;
    *((void *)this + 9) = v9;
    *((void *)this + 10) = v18;
    if (v19) {
      operator delete(v19);
    }
  }
  else
  {
    CGFloat *v8 = width;
    v8[1] = height;
    *((void *)v8 + 2) = 15;
    uint64_t v9 = v8 + 3;
  }
  *((void *)this + 9) = v9;
}

void MaxRectTexturePacker::packTextures(uint64_t a1, uint64_t a2, int a3, char a4)
{
  *(unsigned char *)(a1 + 8) = a4;
  std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__clear[abi:ne180100]((uint64_t *)(a1 + 40));
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72) - v6;
  if (v7)
  {
    unint64_t v8 = v7 / 24;
    int v9 = *(unsigned __int8 *)(a1 + 8);
    if (v8 <= 1) {
      unint64_t v8 = 1;
    }
    int v10 = (double *)(v6 + 8);
    double v11 = 0.0;
    double v12 = 0.0;
    double v13 = 0.0;
    do
    {
      double v14 = *(v10 - 1);
      if (v9)
      {
        double v14 = v14 + 2.0;
        double v15 = *v10 + 2.0;
        *(v10 - SKCNode::setFlags(this, 66, 1) = v14;
        *int v10 = v15;
      }
      else
      {
        double v15 = *v10;
      }
      double v11 = fmax(v14, v11);
      double v12 = fmax(v15, v12);
      double v13 = v13 + v14 * v15;
      v10 += 3;
      --v8;
    }
    while (v8);
  }
  else
  {
    double v13 = 0.0;
    double v12 = 0.0;
    double v11 = 0.0;
  }
  double v16 = fmax(v11, v12);
  std::vector<std::shared_ptr<PKCField>>::__clear[abi:ne180100]((uint64_t *)(a1 + 16));
  double v17 = 1.0;
  double v18 = *(double *)(a1 + 88);
  double v19 = *(double *)(a1 + 96);
  BOOL v20 = v18 == *MEMORY[0x263F001B0];
  if (v19 != *(double *)(MEMORY[0x263F001B0] + 8)) {
    BOOL v20 = 0;
  }
  while (1)
  {
    double v21 = ceil(sqrt(v13 / v17));
    if (a3)
    {
      int v22 = (int)v21;
      int v23 = 1;
      do
      {
        int v24 = v23;
        v23 *= 2;
      }
      while (v24 < v22);
      int v25 = 1;
      do
      {
        int v26 = v25;
        v25 *= 2;
      }
      while (v26 < v22);
      double v21 = (double)v24;
      double v27 = (double)v26;
      if (!v20)
      {
LABEL_19:
        double v21 = fmin(v18, v21);
        BOOL v28 = v19 == fmin(v19, v27) && v18 == v21;
        goto LABEL_24;
      }
    }
    else
    {
      double v27 = v21;
      if (!v20) {
        goto LABEL_19;
      }
    }
    BOOL v28 = 0;
LABEL_24:
    double v29 = fmax(v17 + -0.02, 0.01);
    if (v21 >= v16)
    {
      BOOL v30 = 0;
    }
    else
    {
      double v17 = v29;
      BOOL v30 = !v28;
    }
    if (!v30) {
      operator new();
    }
  }
}

void sub_20AE63890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,void *__p,uint64_t a22)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t MaxRectTexturePacker::getTextureCountInAtlas(MaxRectTexturePacker *this, uint64_t a2)
{
  return 0xCCCCCCCCCCCCCCCDLL
       * ((uint64_t)(*(void *)(*((void *)this + 5) + 24 * a2 + 8) - *(void *)(*((void *)this + 5) + 24 * a2)) >> 3);
}

BOOL MaxRectTexturePacker::getTextureLocationInAtlas(MaxRectTexturePacker *this, uint64_t a2, uint64_t a3, unsigned int *a4, CGRect *a5, unsigned int *a6)
{
  uint64_t v11 = *((void *)this + 5) + 24 * a2;
  int v23 = 0;
  uint64_t v24 = 0;
  std::string __p = 0;
  std::vector<MaxRectTexturePacker::PackedTexInfo>::__init_with_size[abi:ne180100]<MaxRectTexturePacker::PackedTexInfo*,MaxRectTexturePacker::PackedTexInfo*>(&__p, *(const void **)v11, *(void *)(v11 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v11 + 8) - *(void *)v11) >> 3));
  double v12 = __p;
  double v13 = (char *)__p + 40 * a3;
  unsigned int v15 = *(_DWORD *)v13;
  unsigned int v14 = *((_DWORD *)v13 + 1);
  CGSize v16 = *(CGSize *)(v13 + 24);
  a5->origin = *(CGPoint *)(v13 + 8);
  a5->CGSize size = v16;
  *a4 = v15;
  *a6 = v14;
  double width = a5->size.width;
  double v18 = *(double *)(*((void *)this + 8) + 24 * v15);
  if (!*((unsigned char *)this + 8)) {
    goto LABEL_7;
  }
  double v19 = a5->size.width;
  if (v14)
  {
    a5->origin.double x = a5->origin.x + 1.0;
    double v19 = width + -1.0;
    a5->size.double width = width + -1.0;
    if ((v14 & 2) == 0)
    {
LABEL_4:
      if ((v14 & 8) == 0) {
        goto LABEL_5;
      }
LABEL_10:
      a5->origin.double y = a5->origin.y + 1.0;
      a5->size.CGFloat height = a5->size.height + -1.0;
      if ((v14 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_4;
  }
  a5->size.double width = v19 + -1.0;
  if ((v14 & 8) != 0) {
    goto LABEL_10;
  }
LABEL_5:
  if ((v14 & 4) != 0) {
LABEL_6:
  }
    a5->size.CGFloat height = a5->size.height + -1.0;
LABEL_7:
  BOOL v20 = width != v18;
  int v23 = v12;
  operator delete(v12);
  return v20;
}

void std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    uint64_t v4 = a1[1];
    do
    {
      uint64_t v6 = *(void **)(v4 - 24);
      v4 -= 24;
      size_t v5 = v6;
      if (v6)
      {
        *(void *)(v2 - 16) = v5;
        operator delete(v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MaxRectTexturePacker::InputTexInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(24 * a2);
}

void std::shared_ptr<MaxRectsBinPack>::reset[abi:ne180100]<MaxRectsBinPack,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<MaxRectsBinPack>::shared_ptr[abi:ne180100]<MaxRectsBinPack,void>(&v2, a2);
}

void **std::vector<std::shared_ptr<MaxRectsBinPack>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    unsigned int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>>((uint64_t)result, v13);
    unsigned int v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)unsigned int v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<MaxRectsBinPack>>::__swap_out_circular_buffer(a1, v18);
    int v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<jet_buffer>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    int v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20AE63D38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<jet_buffer>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::shared_ptr<MaxRectsBinPack>::shared_ptr[abi:ne180100]<MaxRectsBinPack,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20AE63DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<MaxRectsBinPack>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MaxRectsBinPack *,std::shared_ptr<MaxRectsBinPack>::__shared_ptr_default_delete<MaxRectsBinPack,MaxRectsBinPack>,std::allocator<MaxRectsBinPack>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

void std::__shared_ptr_pointer<MaxRectsBinPack *,std::shared_ptr<MaxRectsBinPack>::__shared_ptr_default_delete<MaxRectsBinPack,MaxRectsBinPack>,std::allocator<MaxRectsBinPack>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<MaxRectsBinPack *,std::shared_ptr<MaxRectsBinPack>::__shared_ptr_default_delete<MaxRectsBinPack,MaxRectsBinPack>,std::allocator<MaxRectsBinPack>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<MaxRectsBinPack>::operator()[abi:ne180100](uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)a2[4];
    if (v3)
    {
      a2[5] = v3;
      operator delete(v3);
    }
    uint64_t v4 = (void *)a2[1];
    if (v4)
    {
      a2[2] = v4;
      operator delete(v4);
    }
    JUMPOUT(0x21052EA30);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<MaxRectTexturePacker::PackedTexInfo>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(40 * a2);
}

void *std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__construct_one_at_end[abi:ne180100]<std::vector<MaxRectTexturePacker::PackedTexInfo> const&>(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  *uint64_t v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  uint64_t result = std::vector<MaxRectTexturePacker::PackedTexInfo>::__init_with_size[abi:ne180100]<MaxRectTexturePacker::PackedTexInfo*,MaxRectTexturePacker::PackedTexInfo*>(v3, *(const void **)a2, *(void *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  *(void *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_20AE63F70(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__push_back_slow_path<std::vector<MaxRectTexturePacker::PackedTexInfo> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MaxRectTexturePacker::InputTexInfo>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  unsigned int v15 = v11;
  uint64_t v16 = &v10[24 * v9];
  *(void *)unint64_t v11 = 0;
  *((void *)v11 + SKCNode::setFlags(this, 66, 1) = 0;
  *((void *)v11 + 2) = 0;
  std::vector<MaxRectTexturePacker::PackedTexInfo>::__init_with_size[abi:ne180100]<MaxRectTexturePacker::PackedTexInfo*,MaxRectTexturePacker::PackedTexInfo*>(v11, *(const void **)a2, *(void *)(a2 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  v15 += 24;
  std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__swap_out_circular_buffer(a1, v14);
  uint64_t v12 = a1[1];
  std::__split_buffer<std::vector<MaxRectTexturePacker::PackedTexInfo>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_20AE64088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::vector<MaxRectTexturePacker::PackedTexInfo>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void *std::vector<MaxRectTexturePacker::PackedTexInfo>::__init_with_size[abi:ne180100]<MaxRectTexturePacker::PackedTexInfo*,MaxRectTexturePacker::PackedTexInfo*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    uint64_t result = std::vector<MaxRectTexturePacker::PackedTexInfo>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_20AE640FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<MaxRectTexturePacker::PackedTexInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<MaxRectTexturePacker::PackedTexInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t std::vector<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<MaxRectTexturePacker::PackedTexInfo>>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<MaxRectTexturePacker::PackedTexInfo>>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + SKCNode::setFlags(this, 66, 1) = a7;
  long long v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    uint64_t v9 = a6;
  }
  else
  {
    do
    {
      *(void *)(v7 - 24) = 0;
      *(void *)(v7 - 16) = 0;
      *(void *)(v7 - 8) = 0;
      long long v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(void *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      uint64_t v7 = *((void *)&v14 + 1) - 24;
      *((void *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    uint64_t v9 = v14;
  }
  char v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MaxRectTexturePacker::PackedTexInfo>>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MaxRectTexturePacker::PackedTexInfo>>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MaxRectTexturePacker::PackedTexInfo>>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<MaxRectTexturePacker::PackedTexInfo>>,std::reverse_iterator<std::vector<MaxRectTexturePacker::PackedTexInfo>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(void **)v1;
    if (*(void *)v1)
    {
      *(void *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<MaxRectTexturePacker::PackedTexInfo>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<std::vector<MaxRectTexturePacker::PackedTexInfo>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != a2)
  {
    uint64_t v5 = *(void **)(v2 - 24);
    *(void *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(void *)(v2 - 16) = v5;
      operator delete(v5);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t std::vector<std::shared_ptr<MaxRectsBinPack>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MaxRectsBinPack>>,std::reverse_iterator<std::shared_ptr<MaxRectsBinPack>*>,std::reverse_iterator<std::shared_ptr<MaxRectsBinPack>*>,std::reverse_iterator<std::shared_ptr<MaxRectsBinPack>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<MaxRectsBinPack>>,std::reverse_iterator<std::shared_ptr<MaxRectsBinPack>*>,std::reverse_iterator<std::shared_ptr<MaxRectsBinPack>*>,std::reverse_iterator<std::shared_ptr<MaxRectsBinPack>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + SKCNode::setFlags(this, 66, 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + SKCNode::setFlags(this, 66, 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MaxRectsBinPack>>,std::reverse_iterator<std::shared_ptr<MaxRectsBinPack>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<MaxRectsBinPack>>,std::reverse_iterator<std::shared_ptr<MaxRectsBinPack>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<jet_buffer>>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a2);
}

void std::vector<TextureInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<TextureInfo>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<TextureInfo>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

uint64_t std::vector<TextureInfo>::__push_back_slow_path<TextureInfo const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (a1[1] - *a1) >> 5;
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 59) {
    std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2] - v3;
  if (v8 >> 4 > v5) {
    unint64_t v5 = v8 >> 4;
  }
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
    unint64_t v9 = 0x7FFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v9 = v5;
  }
  double v19 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CGRect>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  unint64_t v11 = &v10[32 * v4];
  v16[0] = v10;
  v16[1] = v11;
  long long v17 = v11;
  double v18 = &v10[32 * v9];
  *(void *)unint64_t v11 = *(void *)a2;
  char v12 = (std::string *)(v11 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
    unint64_t v11 = v17;
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 8);
    *((void *)v11 + 3) = *(void *)(a2 + 24);
    *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
  }
  long long v17 = v11 + 32;
  std::vector<TextureInfo>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<TextureInfo>::~__split_buffer((uint64_t)v16);
  return v14;
}

void sub_20AE646B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TextureInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<TextureInfo>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TextureInfo>,std::reverse_iterator<TextureInfo*>,std::reverse_iterator<TextureInfo*>,std::reverse_iterator<TextureInfo*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<TextureInfo>,std::reverse_iterator<TextureInfo*>,std::reverse_iterator<TextureInfo*>,std::reverse_iterator<TextureInfo*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + SKCNode::setFlags(this, 66, 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      uint64_t v9 = *(void *)(a3 - 32);
      a3 -= 32;
      *(void *)(v8 - 32) = v9;
      v8 -= 32;
      long long v10 = *(_OWORD *)(a3 + 8);
      *(void *)(v8 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(v8 + 8) = v10;
      *(void *)(a3 + 16) = 0;
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 8) = 0;
      v7 -= 32;
    }
    while (a3 != a5);
    *((void *)&v16 + SKCNode::setFlags(this, 66, 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TextureInfo>,std::reverse_iterator<TextureInfo*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<TextureInfo>,std::reverse_iterator<TextureInfo*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<TextureInfo>,std::reverse_iterator<TextureInfo*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<TextureInfo>,std::reverse_iterator<TextureInfo*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    v1 += 32;
  }
}

uint64_t std::__split_buffer<TextureInfo>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__split_buffer<TextureInfo>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 32;
      *(void *)(a1 + 16) = v2 - 32;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        uint64_t v5 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*,false>(long long *a1, char *a2, uint64_t (**a3)(long long *, long long *), uint64_t a4, char a5, __n128 a6)
{
LABEL_1:
  char v12 = a1;
LABEL_2:
  uint64_t v13 = 1 - a4;
  while (1)
  {
    a1 = v12;
    uint64_t v14 = v13;
    uint64_t v15 = a2 - (char *)v12;
    unint64_t v16 = (a2 - (char *)v12) >> 5;
    if (!(!v7 & v6))
    {
      switch(v16)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          if ((*a3)((long long *)a2 - 2, v12))
          {
            *(void *)&long long v29 = *((void *)v12 + 2);
            *(void *)((char *)&v29 + 7) = *(void *)((char *)v12 + 23);
            char v25 = *((unsigned char *)v12 + 31);
            long long v26 = *v12;
            *((void *)v12 + 2) = 0;
            *((void *)v12 + 3) = 0;
            *((void *)v12 + SKCNode::setFlags(this, 66, 1) = 0;
            *(void *)char v12 = *((void *)a2 - 4);
            long long v27 = *(_OWORD *)(a2 - 24);
            *((void *)v12 + 3) = *((void *)a2 - 1);
            *(long long *)((char *)v12 + 8) = v27;
            *((_OWORD *)a2 - 2) = v26;
            *((void *)a2 - 2) = v29;
            *(void *)(a2 - 9) = *(void *)((char *)&v29 + 7);
            *(a2 - SKCNode::setFlags(this, 66, 1) = v25;
          }
          break;
        case 3uLL:
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v12, v12 + 2, (uint64_t)(a2 - 32), a3);
          break;
        case 4uLL:
          std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>((uint64_t)v12, (uint64_t)(v12 + 2), (uint64_t)(v12 + 4), (uint64_t)(a2 - 32), a3);
          break;
        case 5uLL:
          std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>((uint64_t)v12, (uint64_t)(v12 + 2), (uint64_t)(v12 + 4), (uint64_t)(v12 + 6), (uint64_t)(a2 - 32), a3);
          break;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v15 <= 767) {
      break;
    }
    if (v14 == 1)
    {
      if (v12 != (long long *)a2)
      {
        std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*,TextureInfo*>((uint64_t)v12, (uint64_t)a2, (uint64_t)a2, (unsigned int (**)(uint64_t, uint64_t))a3, a6);
      }
      return;
    }
    unint64_t v17 = v16 >> 1;
    double v18 = &v12[2 * (v16 >> 1)];
    if ((unint64_t)v15 > 0x1000)
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v12, &v12[2 * (v16 >> 1)], (uint64_t)(a2 - 32), a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v12 + 2, v18 - 2, (uint64_t)(a2 - 64), a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v12 + 4, &v12[2 * v17 + 2], (uint64_t)(a2 - 96), a3);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v18 - 2, v18, (uint64_t)&v12[2 * v17 + 2], a3);
      *(void *)&long long v28 = *((void *)v12 + 2);
      *(void *)((char *)&v28 + 7) = *(void *)((char *)v12 + 23);
      char v19 = *((unsigned char *)v12 + 31);
      long long v20 = *v12;
      *((void *)v12 + 2) = 0;
      *((void *)v12 + 3) = 0;
      *(void *)char v12 = *(void *)v18;
      *((void *)v12 + SKCNode::setFlags(this, 66, 1) = 0;
      long long v21 = *(long long *)((char *)v18 + 8);
      *((void *)v12 + 3) = *((void *)v18 + 3);
      *(long long *)((char *)v12 + 8) = v21;
      long long *v18 = v20;
      *(void *)((char *)v18 + 23) = *(void *)((char *)&v28 + 7);
      *((void *)v18 + 2) = v28;
      *((unsigned char *)v18 + 3SKCNode::setFlags(this, 66, 1) = v19;
      if (a5) {
        goto LABEL_13;
      }
    }
    else
    {
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(&v12[2 * (v16 >> 1)], v12, (uint64_t)(a2 - 32), a3);
      if (a5) {
        goto LABEL_13;
      }
    }
    if (((*a3)(v12 - 2, v12) & 1) == 0)
    {
      char v12 = std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TextureInfo *,BOOL (*&)(TextureInfo const&,TextureInfo const&)>(v12, (unint64_t)a2, (uint64_t (**)(uint64_t *, long long *))a3);
      goto LABEL_18;
    }
LABEL_13:
    unint64_t v22 = std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TextureInfo *,BOOL (*&)(TextureInfo const&,TextureInfo const&)>((uint64_t *)v12, (unint64_t)a2, (uint64_t (**)(uint64_t, uint64_t *))a3);
    if ((v23 & 1) == 0) {
      goto LABEL_16;
    }
    BOOL v24 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>((uint64_t)v12, v22, a3);
    char v12 = (long long *)(v22 + 32);
    if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v22 + 32, (uint64_t)a2, a3))
    {
      a4 = -v14;
      a2 = (char *)v22;
      if (v24) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v13 = v14 + 1;
    if (!v24)
    {
LABEL_16:
      std::__introsort<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*,false>(a1, v22, a3, -v14, a5 & 1);
      char v12 = (long long *)(v22 + 32);
LABEL_18:
      a5 = 0;
      a4 = -v14;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v12, a2, (uint64_t (**)(uint64_t *, uint64_t))a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(v12, a2, (uint64_t (**)(uint64_t *, void *))a3);
  }
}

void std::__insertion_sort[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(void *a1, void *a2, uint64_t (**a3)(uint64_t *, uint64_t))
{
  if (a1 != a2)
  {
    uint64_t v5 = a1 + 4;
    if (a1 + 4 != a2)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a1;
      do
      {
        uint64_t v9 = v5;
        if ((*a3)(v5, (uint64_t)v8))
        {
          uint64_t v18 = *v9;
          long long v19 = *(_OWORD *)(v8 + 5);
          uint64_t v20 = v8[7];
          v8[5] = 0;
          v8[6] = 0;
          void v8[7] = 0;
          uint64_t v10 = v7;
          do
          {
            uint64_t v11 = v10;
            char v12 = (char *)a1 + v10;
            *(void *)((char *)a1 + v10 + 32) = *(void *)((char *)a1 + v10);
            uint64_t v13 = (uint64_t)a1 + v10 + 40;
            if (*((char *)a1 + v10 + 63) < 0) {
              operator delete(*(void **)v13);
            }
            *(_OWORD *)uint64_t v13 = *(_OWORD *)(v12 + 8);
            *(void *)(v13 + 16) = *((void *)v12 + 3);
            v12[31] = 0;
            v12[8] = 0;
            if (!v11)
            {
              *a1 = v18;
              goto LABEL_13;
            }
            char v14 = (*a3)(&v18, (uint64_t)a1 + v11 - 32);
            uint64_t v10 = v11 - 32;
          }
          while ((v14 & 1) != 0);
          uint64_t v15 = (char *)a1 + v10;
          int v16 = v15[63];
          *((void *)v15 + 4) = v18;
          if (v16 < 0) {
            operator delete(*((void **)v15 + 5));
          }
LABEL_13:
          unint64_t v17 = (char *)a1 + v11;
          *(_OWORD *)(v17 + 8) = v19;
          *((void *)v17 + 3) = v20;
        }
        uint64_t v5 = v9 + 4;
        v7 += 32;
        uint64_t v8 = v9;
      }
      while (v9 + 4 != a2);
    }
  }
}

void sub_20AE64F60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__insertion_sort_unguarded[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(void *a1, void *a2, uint64_t (**a3)(uint64_t *, void *))
{
  if (a1 != a2)
  {
    uint64_t v4 = a1;
    uint64_t v5 = a1 + 4;
    if (a1 + 4 != a2)
    {
      uint64_t v7 = a1 - 4;
      do
      {
        uint64_t v8 = v5;
        if ((*a3)(v5, v4))
        {
          uint64_t v14 = *v8;
          long long v15 = *(_OWORD *)(v4 + 5);
          int v16 = (void *)v4[7];
          void v4[5] = 0;
          v4[6] = 0;
          v4[7] = 0;
          uint64_t v9 = v7;
          do
          {
            v9[8] = v9[4];
            uint64_t v10 = (void **)(v9 + 9);
            if (*((char *)v9 + 95) < 0) {
              operator delete(*v10);
            }
            *(_OWORD *)uint64_t v10 = *(_OWORD *)(v9 + 5);
            v9[11] = v9[7];
            *((unsigned char *)v9 + 63) = 0;
            *((unsigned char *)v9 + 40) = 0;
            char v11 = (*a3)(&v14, v9);
            v9 -= 4;
          }
          while ((v11 & 1) != 0);
          v9[8] = v14;
          int v12 = *((char *)v9 + 95);
          uint64_t v13 = (void **)(v9 + 9);
          if (v12 < 0) {
            operator delete(*v13);
          }
          *(_OWORD *)uint64_t v13 = v15;
          v13[2] = v16;
        }
        uint64_t v5 = v8 + 4;
        v7 += 4;
        uint64_t v4 = v8;
      }
      while (v8 + 4 != a2);
    }
  }
}

void sub_20AE650AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(long long *a1, long long *a2, uint64_t a3, uint64_t (**a4)(long long *, long long *))
{
  char v8 = (*a4)(a2, a1);
  uint64_t result = (*a4)((long long *)a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!result) {
      return result;
    }
    long long v15 = *a2;
    *((void *)a2 + SKCNode::setFlags(this, 66, 1) = 0;
    *(void *)&long long v28 = *((void *)a2 + 2);
    *(void *)((char *)&v28 + 7) = *(void *)((char *)a2 + 23);
    char v16 = *((unsigned char *)a2 + 31);
    *((void *)a2 + 3) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = *(void *)a3;
    long long v17 = *(_OWORD *)(a3 + 8);
    *((void *)a2 + 3) = *(void *)(a3 + 24);
    *(long long *)((char *)a2 + 8) = v17;
    *(_OWORD *)a3 = v15;
    *(void *)(a3 + 23) = *(void *)((char *)&v28 + 7);
    *(void *)(a3 + 16) = v28;
    *(unsigned char *)(a3 + 3SKCNode::setFlags(this, 66, 1) = v16;
    if (!(*a4)(a2, a1)) {
      return 1;
    }
    *(void *)&long long v29 = *((void *)a1 + 2);
    *(void *)((char *)&v29 + 7) = *(void *)((char *)a1 + 23);
    char v18 = *((unsigned char *)a1 + 31);
    long long v19 = *a1;
    *((void *)a1 + 2) = 0;
    *((void *)a1 + 3) = 0;
    *((void *)a1 + SKCNode::setFlags(this, 66, 1) = 0;
    *(void *)a1 = *(void *)a2;
    long long v20 = *(long long *)((char *)a2 + 8);
    *((void *)a1 + 3) = *((void *)a2 + 3);
    *(long long *)((char *)a1 + 8) = v20;
    *a2 = v19;
    *(void *)((char *)a2 + 23) = *(void *)((char *)&v29 + 7);
    *((void *)a2 + 2) = v29;
    *((unsigned char *)a2 + 3SKCNode::setFlags(this, 66, 1) = v18;
    return 2;
  }
  uint64_t v10 = (void *)a1 + 1;
  char v11 = a1 + 1;
  if (!result)
  {
    *(void *)&long long v30 = *v11;
    *(void *)((char *)&v30 + 7) = *(void *)((char *)a1 + 23);
    char v21 = *((unsigned char *)a1 + 31);
    long long v22 = *a1;
    *((void *)a1 + 2) = 0;
    *((void *)a1 + 3) = 0;
    *uint64_t v10 = 0;
    *(void *)a1 = *(void *)a2;
    long long v23 = *(long long *)((char *)a2 + 8);
    *((void *)a1 + 3) = *((void *)a2 + 3);
    *(_OWORD *)uint64_t v10 = v23;
    *a2 = v22;
    *((void *)a2 + 2) = v30;
    *(void *)((char *)a2 + 23) = *(void *)((char *)&v30 + 7);
    *((unsigned char *)a2 + 3SKCNode::setFlags(this, 66, 1) = v21;
    if (!(*a4)((long long *)a3, a2)) {
      return 1;
    }
    *(void *)&long long v31 = *((void *)a2 + 2);
    *(void *)((char *)&v31 + 7) = *(void *)((char *)a2 + 23);
    char v24 = *((unsigned char *)a2 + 31);
    long long v25 = *a2;
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    *((void *)a2 + SKCNode::setFlags(this, 66, 1) = 0;
    *(void *)a2 = *(void *)a3;
    long long v26 = *(_OWORD *)(a3 + 8);
    *((void *)a2 + 3) = *(void *)(a3 + 24);
    *(long long *)((char *)a2 + 8) = v26;
    *(_OWORD *)a3 = v25;
    *(void *)(a3 + 23) = *(void *)((char *)&v31 + 7);
    *(void *)(a3 + 16) = v31;
    *(unsigned char *)(a3 + 3SKCNode::setFlags(this, 66, 1) = v24;
    return 2;
  }
  *(void *)&long long v27 = *v11;
  *(void *)((char *)&v27 + 7) = *(void *)((char *)a1 + 23);
  char v12 = *((unsigned char *)a1 + 31);
  long long v13 = *a1;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  *uint64_t v10 = 0;
  *(void *)a1 = *(void *)a3;
  long long v14 = *(_OWORD *)(a3 + 8);
  *((void *)a1 + 3) = *(void *)(a3 + 24);
  *(_OWORD *)uint64_t v10 = v14;
  *(_OWORD *)a3 = v13;
  *(void *)(a3 + 23) = *(void *)((char *)&v27 + 7);
  *(void *)(a3 + 16) = v27;
  *(unsigned char *)(a3 + 3SKCNode::setFlags(this, 66, 1) = v12;
  return 1;
}

long long *std::__partition_with_equals_on_left[abi:ne180100]<std::_ClassicAlgPolicy,TextureInfo *,BOOL (*&)(TextureInfo const&,TextureInfo const&)>(long long *a1, unint64_t a2, uint64_t (**a3)(uint64_t *, long long *))
{
  unint64_t v4 = a2;
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v18 = *(void *)a1;
  long long v19 = *(long long *)((char *)a1 + 8);
  uint64_t v20 = *((void *)a1 + 3);
  *((void *)a1 + SKCNode::setFlags(this, 66, 1) = 0;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  if ((*a3)(&v18, (long long *)(a2 - 32)))
  {
    char v6 = a1;
    do
      v6 += 2;
    while (((*a3)(&v18, v6) & 1) == 0);
  }
  else
  {
    uint64_t v7 = a1 + 2;
    do
    {
      char v6 = v7;
      if ((unint64_t)v7 >= v4) {
        break;
      }
      int v8 = (*a3)(&v18, v7);
      uint64_t v7 = v6 + 2;
    }
    while (!v8);
  }
  if ((unint64_t)v6 < v4)
  {
    do
      v4 -= 32;
    while (((*a3)(&v18, (long long *)v4) & 1) != 0);
  }
  while ((unint64_t)v6 < v4)
  {
    long long v9 = *v6;
    *(void *)&v21[7] = *(void *)((char *)v6 + 23);
    *(void *)char v21 = *((void *)v6 + 2);
    char v10 = *((unsigned char *)v6 + 31);
    *((void *)v6 + 2) = 0;
    *((void *)v6 + 3) = 0;
    *((void *)v6 + SKCNode::setFlags(this, 66, 1) = 0;
    *(void *)char v6 = *(void *)v4;
    long long v11 = *(_OWORD *)(v4 + 8);
    *((void *)v6 + 3) = *(void *)(v4 + 24);
    *(long long *)((char *)v6 + 8) = v11;
    *(_OWORD *)unint64_t v4 = v9;
    *(void *)(v4 + 16) = *(void *)v21;
    *(void *)(v4 + 23) = *(void *)&v21[7];
    *(unsigned char *)(v4 + 3SKCNode::setFlags(this, 66, 1) = v10;
    do
      v6 += 2;
    while (!(*a3)(&v18, v6));
    do
      v4 -= 32;
    while (((*a3)(&v18, (long long *)v4) & 1) != 0);
  }
  if (v6 - 2 == a1)
  {
    int v15 = *((char *)v6 - 1);
    *((void *)v6 - 4) = v18;
    uint64_t v13 = (uint64_t)v6 - 24;
    if (v15 < 0) {
      operator delete(*(void **)v13);
    }
  }
  else
  {
    char v12 = (uint64_t *)a1 + 1;
    *(void *)a1 = *((void *)v6 - 4);
    if (*((char *)a1 + 31) < 0) {
      operator delete((void *)*v12);
    }
    uint64_t v13 = (uint64_t)v6 - 24;
    long long v14 = *(long long *)((char *)v6 - 24);
    v12[2] = *((void *)v6 - 1);
    *(_OWORD *)char v12 = v14;
    *((unsigned char *)v6 - SKCNode::setFlags(this, 66, 1) = 0;
    *((unsigned char *)v6 - 24) = 0;
    *((void *)v6 - 4) = v18;
  }
  long long v16 = v19;
  *(void *)(v13 + 16) = v20;
  *(_OWORD *)uint64_t v13 = v16;
  return v6;
}

void sub_20AE6556C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unint64_t std::__partition_with_equals_on_right[abi:ne180100]<std::_ClassicAlgPolicy,TextureInfo *,BOOL (*&)(TextureInfo const&,TextureInfo const&)>(uint64_t *a1, unint64_t a2, uint64_t (**a3)(uint64_t, uint64_t *))
{
  uint64_t v6 = 0;
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v20 = *a1;
  uint64_t v22 = a1[3];
  uint64_t v7 = a1 + 1;
  long long v21 = *(_OWORD *)(a1 + 1);
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  do
  {
    char v8 = (*a3)((uint64_t)&a1[v6 + 4], &v20);
    v6 += 4;
  }
  while ((v8 & 1) != 0);
  unint64_t v9 = (unint64_t)&a1[v6];
  if (v6 == 4)
  {
    do
    {
      if (v9 >= a2) {
        break;
      }
      a2 -= 32;
    }
    while (((*a3)(a2, &v20) & 1) == 0);
  }
  else
  {
    do
      a2 -= 32;
    while (!(*a3)(a2, &v20));
  }
  unint64_t v10 = (unint64_t)&a1[v6];
  if (v9 < a2)
  {
    unint64_t v11 = a2;
    do
    {
      long long v12 = *(_OWORD *)v10;
      *(void *)&v23[7] = *(void *)(v10 + 23);
      *(void *)long long v23 = *(void *)(v10 + 16);
      char v13 = *(unsigned char *)(v10 + 31);
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 8) = 0;
      *(void *)unint64_t v10 = *(void *)v11;
      long long v14 = *(_OWORD *)(v11 + 8);
      *(void *)(v10 + 24) = *(void *)(v11 + 24);
      *(_OWORD *)(v10 + 8) = v14;
      *(_OWORD *)unint64_t v11 = v12;
      *(void *)(v11 + 16) = *(void *)v23;
      *(void *)(v11 + 23) = *(void *)&v23[7];
      *(unsigned char *)(v11 + 3SKCNode::setFlags(this, 66, 1) = v13;
      do
        v10 += 32;
      while (((*a3)(v10, &v20) & 1) != 0);
      do
        v11 -= 32;
      while (!(*a3)(v11, &v20));
    }
    while (v10 < v11);
  }
  if ((uint64_t *)(v10 - 32) == a1)
  {
    int v17 = *(char *)(v10 - 1);
    *(void *)(v10 - 32) = v20;
    unint64_t v15 = v10 - 24;
    if (v17 < 0) {
      operator delete(*(void **)v15);
    }
  }
  else
  {
    *a1 = *(void *)(v10 - 32);
    if (*((char *)a1 + 31) < 0) {
      operator delete((void *)*v7);
    }
    unint64_t v15 = v10 - 24;
    long long v16 = *(_OWORD *)(v10 - 24);
    void v7[2] = *(void *)(v10 - 8);
    *(_OWORD *)uint64_t v7 = v16;
    *(unsigned char *)(v10 - SKCNode::setFlags(this, 66, 1) = 0;
    *(unsigned char *)(v10 - 24) = 0;
    *(void *)(v10 - 32) = v20;
  }
  long long v18 = v21;
  *(void *)(v15 + 16) = v22;
  *(_OWORD *)unint64_t v15 = v18;
  return v10 - 32;
}

void sub_20AE657C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(long long *, long long *))
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v6 = (a2 - a1) >> 5;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((*a3)((long long *)(a2 - 32), (long long *)a1))
      {
        v23[0] = *(void *)(a1 + 16);
        *(void *)((char *)v23 + 7) = *(void *)(a1 + 23);
        char v8 = *(unsigned char *)(a1 + 31);
        long long v9 = *(_OWORD *)a1;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)a1 = *(void *)(a2 - 32);
        long long v10 = *(_OWORD *)(a2 - 24);
        *(void *)(a1 + 24) = *(void *)(a2 - 8);
        *(_OWORD *)(a1 + 8) = v10;
        *(_OWORD *)(a2 - 32) = v9;
        *(void *)(a2 - 9) = *(void *)((char *)v23 + 7);
        *(void *)(a2 - 16) = v23[0];
        *(unsigned char *)(a2 - SKCNode::setFlags(this, 66, 1) = v8;
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>((long long *)a1, (long long *)(a1 + 32), a2 - 32, a3);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, a1 + 32, a1 + 64, a2 - 32, a3);
      return 1;
    case 5:
      std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, a1 + 32, a1 + 64, a1 + 96, a2 - 32, a3);
      return 1;
    default:
      unint64_t v11 = (long long *)(a1 + 64);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>((long long *)a1, (long long *)(a1 + 32), a1 + 64, a3);
      uint64_t v12 = a1 + 96;
      if (a1 + 96 == a2) {
        return 1;
      }
      uint64_t v13 = 0;
      int v14 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((long long *)v12, v11))
    {
      v23[0] = *(void *)v12;
      *(_OWORD *)&v23[1] = *(_OWORD *)(v12 + 8);
      uint64_t v24 = *(void *)(v12 + 24);
      *(void *)(v12 + 8) = 0;
      *(void *)(v12 + 16) = 0;
      *(void *)(v12 + 24) = 0;
      uint64_t v15 = v13;
      do
      {
        uint64_t v16 = v15;
        uint64_t v17 = a1 + v15;
        *(void *)(a1 + v15 + 96) = *(void *)(a1 + v15 + 64);
        uint64_t v18 = a1 + v15 + 104;
        if (*(char *)(a1 + v15 + 127) < 0) {
          operator delete(*(void **)v18);
        }
        *(_OWORD *)uint64_t v18 = *(_OWORD *)(v17 + 72);
        *(void *)(v18 + 16) = *(void *)(v17 + 88);
        *(unsigned char *)(v17 + 95) = 0;
        *(unsigned char *)(v17 + 72) = 0;
        if (v16 == -64)
        {
          *(void *)a1 = v23[0];
          goto LABEL_15;
        }
        char v19 = (*a3)((long long *)v23, (long long *)(a1 + v16 + 32));
        uint64_t v15 = v16 - 32;
      }
      while ((v19 & 1) != 0);
      uint64_t v20 = a1 + v15;
      int v21 = *(char *)(v20 + 127);
      *(void *)(v20 + 96) = v23[0];
      if (v21 < 0) {
        operator delete(*(void **)(v20 + 104));
      }
LABEL_15:
      uint64_t v22 = a1 + v16;
      *(_OWORD *)(v22 + 72) = *(_OWORD *)&v23[1];
      *(void *)(v22 + 88) = v24;
      if (++v14 == 8) {
        return v12 + 32 == a2;
      }
    }
    unint64_t v11 = (long long *)v12;
    v13 += 32;
    v12 += 32;
    if (v12 == a2) {
      return 1;
    }
  }
}

void sub_20AE65A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(long long *, long long *))
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>((long long *)a1, (long long *)a2, a3, a5);
  uint64_t result = (*a5)((long long *)a4, (long long *)a3);
  if (result)
  {
    long long v11 = *(_OWORD *)a3;
    *(void *)(a3 + 8) = 0;
    *(void *)&long long v20 = *(void *)(a3 + 16);
    *(void *)((char *)&v20 + 7) = *(void *)(a3 + 23);
    char v12 = *(unsigned char *)(a3 + 31);
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = *(void *)a4;
    long long v13 = *(_OWORD *)(a4 + 8);
    *(void *)(a3 + 24) = *(void *)(a4 + 24);
    *(_OWORD *)(a3 + 8) = v13;
    *(_OWORD *)a4 = v11;
    *(void *)(a4 + 23) = *(void *)((char *)&v20 + 7);
    *(void *)(a4 + 16) = v20;
    *(unsigned char *)(a4 + 3SKCNode::setFlags(this, 66, 1) = v12;
    uint64_t result = (*a5)((long long *)a3, (long long *)a2);
    if (result)
    {
      long long v14 = *(_OWORD *)a2;
      *(void *)(a2 + 8) = 0;
      *(void *)&long long v21 = *(void *)(a2 + 16);
      *(void *)((char *)&v21 + 7) = *(void *)(a2 + 23);
      char v15 = *(unsigned char *)(a2 + 31);
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)a2 = *(void *)a3;
      long long v16 = *(_OWORD *)(a3 + 8);
      *(void *)(a2 + 24) = *(void *)(a3 + 24);
      *(_OWORD *)(a2 + 8) = v16;
      *(_OWORD *)a3 = v14;
      *(void *)(a3 + 23) = *(void *)((char *)&v21 + 7);
      *(void *)(a3 + 16) = v21;
      *(unsigned char *)(a3 + 3SKCNode::setFlags(this, 66, 1) = v15;
      uint64_t result = (*a5)((long long *)a2, (long long *)a1);
      if (result)
      {
        *(void *)&long long v22 = *(void *)(a1 + 16);
        *(void *)((char *)&v22 + 7) = *(void *)(a1 + 23);
        char v17 = *(unsigned char *)(a1 + 31);
        long long v18 = *(_OWORD *)a1;
        *(void *)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
        *(void *)(a1 + 8) = 0;
        *(void *)a1 = *(void *)a2;
        long long v19 = *(_OWORD *)(a2 + 8);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(_OWORD *)(a1 + 8) = v19;
        *(_OWORD *)a2 = v18;
        *(void *)(a2 + 23) = *(void *)((char *)&v22 + 7);
        *(void *)(a2 + 16) = v22;
        *(unsigned char *)(a2 + 3SKCNode::setFlags(this, 66, 1) = v17;
      }
    }
  }
  return result;
}

uint64_t std::__sort5[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(long long *, long long *))
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, a2, a3, a4, a6);
  uint64_t result = (*a6)((long long *)a5, (long long *)a4);
  if (result)
  {
    long long v13 = *(_OWORD *)a4;
    *(void *)(a4 + 8) = 0;
    *(void *)&long long v25 = *(void *)(a4 + 16);
    *(void *)((char *)&v25 + 7) = *(void *)(a4 + 23);
    char v14 = *(unsigned char *)(a4 + 31);
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 16) = 0;
    *(void *)a4 = *(void *)a5;
    long long v15 = *(_OWORD *)(a5 + 8);
    *(void *)(a4 + 24) = *(void *)(a5 + 24);
    *(_OWORD *)(a4 + 8) = v15;
    *(_OWORD *)a5 = v13;
    *(void *)(a5 + 23) = *(void *)((char *)&v25 + 7);
    *(void *)(a5 + 16) = v25;
    *(unsigned char *)(a5 + 3SKCNode::setFlags(this, 66, 1) = v14;
    uint64_t result = (*a6)((long long *)a4, (long long *)a3);
    if (result)
    {
      long long v16 = *(_OWORD *)a3;
      *(void *)(a3 + 8) = 0;
      *(void *)&long long v26 = *(void *)(a3 + 16);
      *(void *)((char *)&v26 + 7) = *(void *)(a3 + 23);
      char v17 = *(unsigned char *)(a3 + 31);
      *(void *)(a3 + 24) = 0;
      *(void *)(a3 + 16) = 0;
      *(void *)a3 = *(void *)a4;
      long long v18 = *(_OWORD *)(a4 + 8);
      *(void *)(a3 + 24) = *(void *)(a4 + 24);
      *(_OWORD *)(a3 + 8) = v18;
      *(_OWORD *)a4 = v16;
      *(void *)(a4 + 23) = *(void *)((char *)&v26 + 7);
      *(void *)(a4 + 16) = v26;
      *(unsigned char *)(a4 + 3SKCNode::setFlags(this, 66, 1) = v17;
      uint64_t result = (*a6)((long long *)a3, (long long *)a2);
      if (result)
      {
        long long v19 = *(_OWORD *)a2;
        *(void *)(a2 + 8) = 0;
        *(void *)&long long v27 = *(void *)(a2 + 16);
        *(void *)((char *)&v27 + 7) = *(void *)(a2 + 23);
        char v20 = *(unsigned char *)(a2 + 31);
        *(void *)(a2 + 24) = 0;
        *(void *)(a2 + 16) = 0;
        *(void *)a2 = *(void *)a3;
        long long v21 = *(_OWORD *)(a3 + 8);
        *(void *)(a2 + 24) = *(void *)(a3 + 24);
        *(_OWORD *)(a2 + 8) = v21;
        *(_OWORD *)a3 = v19;
        *(void *)(a3 + 23) = *(void *)((char *)&v27 + 7);
        *(void *)(a3 + 16) = v27;
        *(unsigned char *)(a3 + 3SKCNode::setFlags(this, 66, 1) = v20;
        uint64_t result = (*a6)((long long *)a2, (long long *)a1);
        if (result)
        {
          *(void *)&long long v28 = *(void *)(a1 + 16);
          *(void *)((char *)&v28 + 7) = *(void *)(a1 + 23);
          char v22 = *(unsigned char *)(a1 + 31);
          long long v23 = *(_OWORD *)a1;
          *(void *)(a1 + 16) = 0;
          *(void *)(a1 + 24) = 0;
          *(void *)(a1 + 8) = 0;
          *(void *)a1 = *(void *)a2;
          long long v24 = *(_OWORD *)(a2 + 8);
          *(void *)(a1 + 24) = *(void *)(a2 + 24);
          *(_OWORD *)(a1 + 8) = v24;
          *(_OWORD *)a2 = v23;
          *(void *)(a2 + 23) = *(void *)((char *)&v28 + 7);
          *(void *)(a2 + 16) = v28;
          *(unsigned char *)(a2 + 3SKCNode::setFlags(this, 66, 1) = v22;
        }
      }
    }
  }
  return result;
}

uint64_t std::__partial_sort_impl[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*,TextureInfo*>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int (**a4)(uint64_t, uint64_t), __n128 a5)
{
  if (a1 != a2)
  {
    uint64_t v7 = a2;
    uint64_t v9 = a2 - a1;
    uint64_t v10 = (a2 - a1) >> 5;
    if (a2 - a1 >= 33)
    {
      unint64_t v11 = (unint64_t)(v10 - 2) >> 1;
      unint64_t v12 = v11 + 1;
      long long v13 = (void *)(a1 + 32 * v11);
      do
      {
        a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, a4, v10, v13);
        v13 -= 4;
        --v12;
      }
      while (v12);
    }
    uint64_t v14 = v7;
    if (v7 != a3)
    {
      uint64_t v15 = v7;
      do
      {
        if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a4)(v15, a1, a5))
        {
          *(void *)&long long v22 = *(void *)(v15 + 16);
          *(void *)((char *)&v22 + 7) = *(void *)(v15 + 23);
          char v16 = *(unsigned char *)(v15 + 31);
          long long v17 = *(_OWORD *)v15;
          *(void *)(v15 + 16) = 0;
          *(void *)(v15 + 24) = 0;
          *(void *)(v15 + 8) = 0;
          *(void *)uint64_t v15 = *(void *)a1;
          long long v18 = *(_OWORD *)(a1 + 8);
          *(void *)(v15 + 24) = *(void *)(a1 + 24);
          *(_OWORD *)(v15 + 8) = v18;
          *(_OWORD *)a1 = v17;
          *(void *)(a1 + 23) = *(void *)((char *)&v22 + 7);
          *(void *)(a1 + 16) = v22;
          *(unsigned char *)(a1 + 3SKCNode::setFlags(this, 66, 1) = v16;
          a5 = std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, a4, v10, (void *)a1);
        }
        v15 += 32;
      }
      while (v15 != a3);
      uint64_t v14 = a3;
    }
    if (v9 >= 33)
    {
      unint64_t v19 = (unint64_t)v9 >> 5;
      do
      {
        std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, v7, a4, v19);
        v7 -= 32;
      }
      while (v19-- > 2);
    }
    return v14;
  }
  return a3;
}

__n128 std::__sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, unsigned int (**a2)(void, void), uint64_t a3, void *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 >= 2)
  {
    uint64_t v5 = a4;
    uint64_t v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - a1) >> 5)
    {
      uint64_t v10 = ((uint64_t)a4 - a1) >> 4;
      uint64_t v11 = v10 + 1;
      unint64_t v12 = (void *)(a1 + 32 * (v10 + 1));
      uint64_t v13 = v10 + 2;
      if (v10 + 2 < a3 && (*a2)(v12, v12 + 4))
      {
        v12 += 4;
        uint64_t v11 = v13;
      }
      if ((((uint64_t (*)(void *, void *))*a2)(v12, v5) & 1) == 0)
      {
        uint64_t v21 = *v5;
        __n128 v22 = *(__n128 *)(v5 + 1);
        uint64_t v23 = v5[3];
        v5[1] = 0;
        v5[2] = 0;
        v5[3] = 0;
        do
        {
          uint64_t v15 = v12;
          *uint64_t v5 = *v12;
          char v16 = (void **)(v5 + 1);
          if (*((char *)v5 + 31) < 0) {
            operator delete(*v16);
          }
          long long v17 = (void **)(v15 + 1);
          long long v18 = *(_OWORD *)(v15 + 1);
          v5[3] = v15[3];
          *(_OWORD *)char v16 = v18;
          *((unsigned char *)v15 + 3SKCNode::setFlags(this, 66, 1) = 0;
          *((unsigned char *)v15 + 8) = 0;
          if (v7 < v11)
          {
            *uint64_t v15 = v21;
            goto LABEL_20;
          }
          uint64_t v19 = (2 * v11) | 1;
          unint64_t v12 = (void *)(a1 + 32 * v19);
          uint64_t v11 = 2 * v11 + 2;
          if (v11 >= a3)
          {
            uint64_t v11 = v19;
          }
          else if ((*a2)(a1 + 32 * v19, v12 + 4))
          {
            v12 += 4;
          }
          else
          {
            uint64_t v11 = v19;
          }
          uint64_t v5 = v15;
        }
        while (!(*a2)(v12, &v21));
        int v20 = *((char *)v15 + 31);
        *uint64_t v15 = v21;
        if (v20 < 0) {
          operator delete(*v17);
        }
LABEL_20:
        __n128 result = v22;
        v15[3] = v23;
        *(__n128 *)long long v17 = result;
      }
    }
  }
  return result;
}

void sub_20AE6623C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__pop_heap[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, uint64_t a2, unsigned int (**a3)(uint64_t, uint64_t), uint64_t a4)
{
  if (a4 >= 2)
  {
    uint64_t v8 = *(void *)a1;
    uint64_t v7 = *(void *)(a1 + 8);
    *(void *)uint64_t v14 = *(void *)(a1 + 16);
    *(void *)&v14[7] = *(void *)(a1 + 23);
    char v9 = *(unsigned char *)(a1 + 31);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 8) = 0;
    uint64_t v10 = std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, a3, a4);
    uint64_t v11 = v10;
    if (v10 == a2 - 32)
    {
      *(void *)uint64_t v10 = v8;
      if (*(char *)(v10 + 31) < 0) {
        operator delete(*(void **)(v10 + 8));
      }
      *(void *)(v11 + 8) = v7;
      *(void *)(v11 + 16) = *(void *)v14;
      *(void *)(v11 + 23) = *(void *)&v14[7];
      *(unsigned char *)(v11 + 3SKCNode::setFlags(this, 66, 1) = v9;
    }
    else
    {
      *(void *)uint64_t v10 = *(void *)(a2 - 32);
      unint64_t v12 = (void **)(v10 + 8);
      if (*(char *)(v10 + 31) < 0) {
        operator delete(*v12);
      }
      long long v13 = *(_OWORD *)(a2 - 24);
      *(void *)(v11 + 24) = *(void *)(a2 - 8);
      *(_OWORD *)unint64_t v12 = v13;
      *(void *)(a2 - 32) = v8;
      *(void *)(a2 - 24) = v7;
      *(void *)(a2 - 16) = *(void *)v14;
      *(void *)(a2 - 9) = *(void *)&v14[7];
      *(unsigned char *)(a2 - SKCNode::setFlags(this, 66, 1) = v9;
      std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(a1, v11 + 32, (uint64_t (**)(void *, uint64_t *))a3, (v11 + 32 - a1) >> 5);
    }
  }
}

void sub_20AE66398(_Unwind_Exception *exception_object)
{
  if (v2 < 0) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__floyd_sift_down[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, unsigned int (**a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1 + 32 * v6 + 32;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 < a3 && (*a2)(v9, v9 + 32))
    {
      v9 += 32;
      uint64_t v6 = v11;
    }
    *(void *)a1 = *(void *)v9;
    unint64_t v12 = (void **)(a1 + 8);
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*v12);
    }
    long long v13 = *(_OWORD *)(v9 + 8);
    *(void *)(a1 + 24) = *(void *)(v9 + 24);
    *(_OWORD *)unint64_t v12 = v13;
    *(unsigned char *)(v9 + 3SKCNode::setFlags(this, 66, 1) = 0;
    *(unsigned char *)(v9 + 8) = 0;
    a1 = v9;
  }
  while (v6 <= v8);
  return v9;
}

double std::__sift_up[abi:ne180100]<std::_ClassicAlgPolicy,BOOL (*&)(TextureInfo const&,TextureInfo const&),TextureInfo*>(uint64_t a1, uint64_t a2, uint64_t (**a3)(void *, uint64_t *), uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (void *)(a1 + 32 * (v4 >> 1));
    uint64_t v10 = (void *)(a2 - 32);
    if ((*a3)(v9, (uint64_t *)(a2 - 32)))
    {
      uint64_t v17 = *(void *)(a2 - 32);
      long long v18 = *(_OWORD *)(a2 - 24);
      uint64_t v19 = *(void *)(a2 - 8);
      *(void *)(a2 - 24) = 0;
      *(void *)(a2 - 16) = 0;
      *(void *)(a2 - 8) = 0;
      do
      {
        unint64_t v12 = v9;
        *uint64_t v10 = *v9;
        long long v13 = (void **)(v10 + 1);
        if (*((char *)v10 + 31) < 0) {
          operator delete(*v13);
        }
        uint64_t v14 = (void **)(v12 + 1);
        long long v15 = *(_OWORD *)(v12 + 1);
        uint64_t v10[3] = v12[3];
        *(_OWORD *)long long v13 = v15;
        *((unsigned char *)v12 + 3SKCNode::setFlags(this, 66, 1) = 0;
        *((unsigned char *)v12 + 8) = 0;
        if (!v8)
        {
          void *v12 = v17;
          goto LABEL_11;
        }
        unint64_t v8 = (v8 - 1) >> 1;
        uint64_t v9 = (void *)(a1 + 32 * v8);
        uint64_t v10 = v12;
      }
      while (((*a3)(v9, &v17) & 1) != 0);
      int v16 = *((char *)v12 + 31);
      void *v12 = v17;
      if (v16 < 0) {
        operator delete(*v14);
      }
LABEL_11:
      double result = *(double *)&v18;
      *(_OWORD *)uint64_t v14 = v18;
      void v12[3] = v19;
    }
  }
  return result;
}

void sub_20AE665BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<MaxRectTexturePacker>::shared_ptr[abi:ne180100]<MaxRectTexturePacker,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20AE66640(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<MaxRectTexturePacker>::shared_ptr[abi:ne180100]<MaxRectTexturePacker,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<MaxRectTexturePacker *,std::shared_ptr<MaxRectTexturePacker>::__shared_ptr_default_delete<MaxRectTexturePacker,MaxRectTexturePacker>,std::allocator<MaxRectTexturePacker>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<MaxRectTexturePacker *,std::shared_ptr<MaxRectTexturePacker>::__shared_ptr_default_delete<MaxRectTexturePacker,MaxRectTexturePacker>,std::allocator<MaxRectTexturePacker>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<MaxRectTexturePacker *,std::shared_ptr<MaxRectTexturePacker>::__shared_ptr_default_delete<MaxRectTexturePacker,MaxRectTexturePacker>,std::allocator<MaxRectTexturePacker>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void SKCSpriteNode::SKCSpriteNode(SKCSpriteNode *this)
{
  SKCNode::SKCNode(this);
  *(void *)uint64_t v1 = &unk_26BEEE538;
  *(void *)(v1 + 560) = 0;
  *(_DWORD *)(v1 + 568) = 0;
  *(_OWORD *)(v1 + 576) = xmmword_20AE9BF60;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_DWORD *)(v1 + 624) = 2;
  *(void *)(v1 + 632) = 0;
}

void SKCSpriteNode::getBatchInfo(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(unsigned char *)a3 = 0;
  *(void *)(a3 + 8) = 0x100000003;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v6 = (void *)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 60) = 0u;
  int v7 = (**(uint64_t (***)(uint64_t))a1)(a1);
  *(_DWORD *)(a3 + 12) = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
  *(void *)(a3 + 4) = 0x300000000;
  *(_DWORD *)(a3 + 4) = v7;
  *(void *)(a3 + 24) = *(void *)(a2 + 168);
  int v8 = *(_DWORD *)(a1 + 560);
  *(_DWORD *)(a3 + 68) = v8;
  if (v8)
  {
    long long v16 = 0uLL;
    SKCNode::resolveWorldPositionRotationAndScale((_OWORD *)a1, 0, &v16, 0);
    *(_DWORD *)(a3 + 72) = DWORD2(v16);
  }
  uint64_t v9 = *(void **)(a1 + 600);
  if (v9)
  {
    [v9 _backingTexture];
    uint64_t v10 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    *(void *)(a3 + 32) = v16;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    uint64_t v11 = [*(id *)(a1 + 600) filteringMode];
    uint64_t v12 = 464;
    if (v11 == 1) {
      uint64_t v12 = 480;
    }
    *(void *)(a3 + 48) = *(void *)(a2 + v12);
  }
  long long v13 = *(void **)(a1 + 608);
  if (v13)
  {
    [v13 _backingTexture];
    uint64_t v14 = (std::__shared_weak_count *)*((void *)&v16 + 1);
    *(void *)(a3 + 40) = v16;
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
  }
  long long v15 = *(void **)(a1 + 592);
  if (v15)
  {
    if ((*(unsigned char *)(a2 + 581) & 1) == 0) {
      *uint64_t v6 = v15;
    }
  }
}

void SKCSpriteNode::setSubdivisionLevels(SKCNode *this, int a2)
{
  *((_DWORD *)this + 156) = a2;
  SKCNode::setDirty(this);
}

void SKCSpriteNode::setWarpGeometry(id *this, SKWarpGeometry *a2)
{
  uint64_t v5 = a2;
  objc_storeStrong(this + 77, a2);
  unint64_t v4 = (std::__shared_weak_count *)this[33];
  this[32] = 0;
  this[33] = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  SKCNode::setDirty((SKCNode *)this);
}

void sub_20AE6692C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t SKCSpriteNode::getMaxBatchRenderElementCount(SKCSpriteNode *this, SKCRenderInfo *a2)
{
  uint64_t v3 = (void *)*((void *)this + 77);
  if (v3 && ([v3 isIdentityWarp] & 1) == 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    id v4 = *((id *)this + 77);
    int v5 = [v4 numberOfColumns];
    double v6 = (double)(int)([v4 numberOfRows] * v5);
    uint64_t v7 = (exp2((double)(*((_DWORD *)this + 156) + 1)+ (double)(*((_DWORD *)this + 156) + 1))* v6);
  }
  else if (SKCSpriteNode::needsNinePart((float32x4_t *)this))
  {
    return 36;
  }
  else
  {
    return 4;
  }
  return v7;
}

void sub_20AE66A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL SKCSpriteNode::needsWarp(SKCSpriteNode *this)
{
  uint64_t v1 = (void *)*((void *)this + 77);
  return v1 && ![v1 isIdentityWarp];
}

BOOL SKCSpriteNode::needsNinePart(float32x4_t *this)
{
  int v2 = (void *)this[38].i64[1];
  BOOL result = 0;
  if (!v2 || [v2 isIdentityWarp])
  {
    float32x4_t v3 = this[36];
    int16x4_t v4 = vmovn_s32(vcgtq_f32((float32x4_t)xmmword_20AE9BF60, v3));
    v3.i32[0] = vmovn_s32(vcgtq_f32(v3, (float32x4_t)xmmword_20AE9BF60)).u32[0];
    v3.i32[1] = v4.i32[1];
    if (vmaxv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(*(int16x4_t *)v3.f32, 0xFuLL)))) {
      return 1;
    }
  }
  return result;
}

BOOL SKCSpriteNode::canAppendToCurrentBatch(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 592) != 3) {
    return 0;
  }
  int v4 = *(_DWORD *)(a2 + 596);
  if (v4 != SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288))
    || *(void *)(a2 + 608) != *(void *)(a2 + 168)
    || *(void *)(a2 + 600) != *(void *)(a1 + 592)
    || *(_DWORD *)(a2 + 652) != *(_DWORD *)(a1 + 560))
  {
    return 0;
  }
  int v5 = *(void **)(a1 + 600);
  if (v5)
  {
    [v5 _backingTexture];
    uint64_t v6 = v14;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v14 = 0;
    long long v15 = 0;
  }
  if (*(void *)(a2 + 616) == v6)
  {
    uint64_t v9 = *(void **)(a1 + 608);
    if (v9)
    {
      [v9 _backingTexture];
      uint64_t v10 = v12;
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v12 = 0;
      long long v13 = 0;
    }
    BOOL v7 = 0;
    if (*(void *)(a2 + 624) == v10)
    {
      if (!*(_DWORD *)(a2 + 652)
        || (long long v11 = 0uLL,
            SKCNode::resolveWorldPositionRotationAndScale((_OWORD *)a1, 0, &v11, 0),
            *(float *)(a2 + 656) == *((float *)&v11 + 2)))
      {
        BOOL v7 = 1;
      }
    }
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
  }
  else
  {
    BOOL v7 = 0;
  }
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  return v7;
}

void sub_20AE66BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(exception_object);
}

void SKCSpriteNode::outline(SKCSpriteNode *this@<X0>, void *a2@<X8>)
{
  v44[1] = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 32);
  if (v4)
  {
    uint64_t v5 = *((void *)this + 33);
    *a2 = v4;
    a2[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    return;
  }
  uint64_t v6 = (void *)*((void *)this + 75);
  if (!v6)
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  BOOL v7 = (void *)*((void *)this + 77);
  if (v7)
  {
    if (![v7 isIdentityWarp])
    {
      *(double *)&long long v12 = (*(double (**)(SKCSpriteNode *))(*(void *)this + 104))(this);
      long long v37 = v13;
      long long v39 = v12;
      long long v35 = v15;
      long long v36 = v14;
      uint64_t v16 = MEMORY[0x263EF89A8];
      long long v17 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
      *((_OWORD *)this + 24) = *MEMORY[0x263EF89A8];
      *((_OWORD *)this + 25) = v17;
      long long v18 = *(_OWORD *)(v16 + 48);
      *((_OWORD *)this + 26) = *(_OWORD *)(v16 + 32);
      *((_OWORD *)this + 27) = v18;
      double v40 = (*(double (**)(SKCSpriteNode *))(*(void *)this + 120))(this);
      long long v33 = v20;
      long long v34 = v19;
      uint64_t v21 = objc_opt_new();
      long long v43 = @"doNotRenderChildNodes";
      v44[0] = MEMORY[0x263EFFA88];
      __n128 v22 = [NSDictionary dictionaryWithObjects:v44 forKeys:&v43 count:1];
      uint64_t v23 = [v21 textureFromNode:*((void *)this + 1) withOptions:v22];
      long long v24 = (void *)*((void *)this + 79);
      *((void *)this + 79) = v23;

      *((_OWORD *)this + 24) = v39;
      *((_OWORD *)this + 25) = v37;
      *((_OWORD *)this + 26) = v36;
      *((_OWORD *)this + 27) = v35;
      id v25 = *((id *)this + 79);

      HIDWORD(v9) = DWORD1(v33);
      double v38 = COERCE_DOUBLE(vadd_f32((float32x2_t)__PAIR64__(DWORD1(v33), v34), (float32x2_t)__PAIR64__(DWORD1(v33), v34)));
      HIDWORD(v1SKCNode::setFlags(this, 66, 1) = HIDWORD(v40);
      int v10 = HIDWORD(v40);
      id v8 = v25;
      goto LABEL_11;
    }
    uint64_t v6 = (void *)*((void *)this + 75);
  }
  id v8 = v6;
  double v38 = *((double *)this + 42);
  int v10 = 0;
  HIDWORD(v1SKCNode::setFlags(this, 66, 1) = 0;
  double v40 = 0.0;
LABEL_11:
  LODWORD(v1SKCNode::setFlags(this, 66, 1) = 998277249;
  LODWORD(v9) = 1.0;
  long long v26 = +[SKPhysicsGrid gridFromTexture:alphaThreshold:accuracy:](SKPhysicsGrid, "gridFromTexture:alphaThreshold:accuracy:", v8, v11, v9, v33, v34);
  long long v29 = v26;
  if (v26)
  {
    LODWORD(v28) = HIDWORD(v38);
    LODWORD(v27) = v10;
    objc_msgSend(v26, "pathFromOutlineWithSmoothingThreshold:bounds:", 1.0, v40, v27, v38, v28);
    uint64_t v31 = v41;
    uint64_t v30 = v42;
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  CGSize v32 = (std::__shared_weak_count *)*((void *)this + 33);
  *((void *)this + 32) = v31;
  *((void *)this + 33) = v30;
  if (v32)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    uint64_t v30 = *((void *)this + 33);
  }
  *a2 = *((void *)this + 32);
  a2[1] = v30;
  if (v30) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_20AE66EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double SKCSpriteNode::getBoundingBox(SKCSpriteNode *this)
{
  long long v36 = xmmword_20AE9B4A0;
  *(double *)v2.i64 = (*(double (**)(SKCSpriteNode *))(*(void *)this + 104))(this);
  float32x4_t v34 = v5;
  float32x4_t v35 = v2;
  uint64_t v6 = (void *)*((void *)this + 77);
  if (v6 && (v32 = v4, v33 = v3, v7 = [v6 isIdentityWarp], v4 = v32, float32x4_t v3 = v33, (v7 & 1) == 0))
  {
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    float32x4_t v4 = v32;
    float32x4_t v3 = v33;
    long long v12 = xmmword_20AE9B480;
    long long v15 = xmmword_20AE9B490;
    long long v11 = SKCBoundingBoxEmpty;
    if (isKindOfClass)
    {
      id v19 = *((id *)this + 77);
      uint64_t v20 = [v19 destPositions];
      uint64_t v21 = 0;
      float32x2_t v22 = (float32x2_t)vdup_n_s32(0x7F7FFFFFu);
      float32x2_t v23 = (float32x2_t)0x80000000800000;
      while ([v19 vertexCount] > v21)
      {
        float32x2_t v24 = *(float32x2_t *)(v20 + 8 * v21);
        float32x2_t v22 = vminnm_f32(v22, v24);
        float32x2_t v23 = vmaxnm_f32(v23, v24);
        ++v21;
      }
      long long v26 = *((_OWORD *)this + 21);
      long long v25 = *((_OWORD *)this + 22);
      *(float32x2_t *)v27.f32 = vmul_f32(vsub_f32(v22, *(float32x2_t *)&v25), *(float32x2_t *)&v26);
      *(float32x2_t *)&v27.u32[2] = vsub_f32(vmul_f32(vsub_f32(v23, *(float32x2_t *)&v25), *(float32x2_t *)&v26), *(float32x2_t *)v27.f32);
      *(double *)&long long v28 = SKCBoundingBoxMake(v27);
      long long v37 = v28;
      long long v38 = v29;
      long long v39 = v30;
      long long v36 = v31;

      float32x4_t v4 = v32;
      float32x4_t v3 = v33;
      long long v12 = v38;
      long long v15 = v39;
      long long v11 = v37;
    }
  }
  else
  {
    v8.i64[0] = 0x3F0000003F000000;
    v8.i64[1] = 0x3F0000003F000000;
    float32x4_t v9 = *((float32x4_t *)this + 21);
    *(void *)&long long v11 = vmulq_f32(vsubq_f32(v8, *((float32x4_t *)this + 22)), v9).u64[0];
    long long v10 = xmmword_20AE9B480;
    *((void *)&v11 + SKCNode::setFlags(this, 66, 1) = *((void *)&SKCBoundingBoxEmpty + 1);
    *(float *)&long long v10 = 0.5 * v9.f32[0];
    long long v12 = v10;
    float v13 = vmuls_lane_f32(0.5, *(float32x2_t *)v9.f32, 1);
    long long v14 = xmmword_20AE9B490;
    *((float *)&v14 + SKCNode::setFlags(this, 66, 1) = v13;
    long long v15 = v14;
  }
  uint64_t v16 = 0;
  v40[0] = v11;
  v40[1] = v12;
  v40[2] = v15;
  v40[3] = v36;
  do
  {
    *(long long *)((char *)&v41 + v16 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v35, COERCE_FLOAT(v40[v16])), v34, *(float32x2_t *)&v40[v16], 1), v3, (float32x4_t)v40[v16], 2), v4, (float32x4_t)v40[v16], 3);
    ++v16;
  }
  while (v16 != 4);
  return *(double *)&v41;
}

void sub_20AE670D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKCSpriteNode::addBatchRenderElements(SKCSpriteNode *this, float32x4_t *a2)
{
  uint64_t v129 = *MEMORY[0x263EF8340];
  if (SKCSpriteNode::needsNinePart((float32x4_t *)this))
  {
    SKCSpriteNode::addBatchRenderElements_NinePart((uint64_t)this, a2);
    return 36;
  }
  else
  {
    __asm { FMOV            V3.4S, #1.0 }
    long long v10 = (void *)*((void *)this + 75);
    float32x4_t v108 = vminnmq_f32(vmaxnmq_f32(*((float32x4_t *)this + 19), (float32x4_t)0), _Q3);
    if (v10)
    {
      float32x4_t v116 = _Q3;
      float v11 = *((float *)this + 80);
      [v10 textureRect];
      CGFloat x = v130.origin.x;
      CGFloat y = v130.origin.y;
      CGFloat width = v130.size.width;
      CGFloat height = v130.size.height;
      double MinX = CGRectGetMinX(v130);
      v131.origin.CGFloat x = x;
      v131.origin.CGFloat y = y;
      v131.size.CGFloat width = width;
      v131.size.CGFloat height = height;
      double MaxX = CGRectGetMaxX(v131);
      v132.origin.CGFloat x = x;
      v132.origin.CGFloat y = y;
      v132.size.CGFloat width = width;
      v132.size.CGFloat height = height;
      CGFloat MinY = CGRectGetMinY(v132);
      v133.origin.CGFloat x = x;
      v133.origin.CGFloat y = y;
      v133.size.CGFloat width = width;
      v133.size.CGFloat height = height;
      CGFloat MaxY = CGRectGetMaxY(v133);
      [*((id *)this + 75) cropOffset];
      v125.CGFloat x = v18;
      v125.CGFloat y = v19;
      float32x2_t v112 = sk_vector_make((float64x2_t *)&v125);
      [*((id *)this + 75) cropScale];
      v125.CGFloat x = v20;
      v125.CGFloat y = v21;
      int32x2_t v22 = (int32x2_t)sk_vector_make((float64x2_t *)&v125);
      float32x2_t v110 = (float32x2_t)v22;
      *(float *)v22.i32 = MinX;
      int32x2_t v104 = v22;
      *(float *)v22.i32 = MaxX;
      int32x2_t v114 = v22;
      v23.f64[0] = MinY;
      v23.f64[1] = MaxY;
      float32x2_t v24 = vcvt_f32_f64(v23);
      long long v25 = (void *)*((void *)this + 75);
      if (v25)
      {
        [v25 _backingTexture];
        if (*(void *)&v125.x
          && (*(unsigned int (**)(void))(**(void **)&v125.x + 24))(*(void *)&v125.x) == 1)
        {
          unsigned int v26 = (***(uint64_t (****)(void))&v125.x)(*(void *)&v125.x);
          unsigned int v27 = (***(uint64_t (****)(void))&v125.x)(*(void *)&v125.x);
          unsigned int v28 = (*(uint64_t (**)(void))(**(void **)&v125.x + 8))(*(void *)&v125.x);
          unsigned int v29 = (*(uint64_t (**)(void))(**(void **)&v125.x + 8))(*(void *)&v125.x);
          v30.i32[1] = v104.i32[1];
          *(float *)v30.i32 = *(float *)v104.i32 * (float)v26;
          int32x2_t v104 = v30;
          v30.i32[1] = v114.i32[1];
          *(float *)v30.i32 = *(float *)v114.i32 * (float)v27;
          int32x2_t v114 = v30;
          float32x2_t v24 = vmul_f32(v24, vcvt_f32_u32((uint32x2_t)__PAIR64__(v29, v28)));
        }
      }
      else
      {
        v125.CGFloat x = 0.0;
        v125.CGFloat y = 0.0;
      }
      unsigned int v33 = [*((id *)this + 75) isFlipped];
      float v34 = fminf(fmaxf(v11, 0.0), 1.0);
      __asm { FMOV            V0.4S, #-1.0 }
      float32x4_t v36 = vaddq_f32(v108, _Q0);
      __asm
      {
        FMOV            V1.4S, #1.0
        FMOV            V6.2S, #1.0
      }
      int8x8_t v39 = (int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v33), 0x1FuLL));
      int8x8_t v40 = (int8x8_t)vrev64_s32((int32x2_t)v24);
      if (*(void *)&v125.y)
      {
        uint64_t v106 = _D6;
        float32x4_t v109 = _Q1;
        float32x4_t v119 = v36;
        float v122 = v34;
        std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v125.y);
        _D6 = v106;
        _Q1 = v109;
        float32x4_t v36 = v119;
        float v34 = v122;
      }
      float32x4_t v31 = (float32x4_t)(unint64_t)v112;
      *(float32x2_t *)v32.f32 = v110;
      v32.i64[1] = _D6;
      float32x4_t v108 = vmlaq_n_f32(_Q1, v36, v34);
      int32x2_t v111 = (int32x2_t)vbsl_s8(v39, (int8x8_t)v24, v40);
      _Q3 = v116;
    }
    else
    {
      int32x2_t v111 = (int32x2_t)1065353216;
      int32x2_t v104 = 0;
      int32x2_t v114 = (int32x2_t)COERCE_UNSIGNED_INT(1.0);
      float32x4_t v31 = 0uLL;
      float32x4_t v32 = _Q3;
    }
    float32x4_t v41 = *((float32x4_t *)this + 21);
    v41.i64[1] = _Q3.i64[1];
    v42.i64[0] = 0x3F0000003F000000;
    v42.i64[1] = 0x3F0000003F000000;
    float32x4_t v123 = (float32x4_t)*((unint64_t *)this + 44);
    float32x4_t v117 = vmulq_f32(v32, v41);
    float32x4_t v120 = vaddq_f32(v31, vdivq_f32(vmulq_f32(vsubq_f32(_Q3, v32), vsubq_f32(v42, v123)), v32));
    long long v43 = (void *)*((void *)this + 77);
    if (v43
      && ([v43 isIdentityWarp] & 1) == 0
      && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      id v44 = *((id *)this + 77);
      if ([*((id *)this + 75) isRotated]) {
        unsigned int v45 = -1;
      }
      else {
        unsigned int v45 = 0;
      }
      uint64_t v46 = a2->u32[0];
      *(void *)&CGFloat v47 = a2[1].i64[1] + 16 * v46;
      unint64_t v124 = (void *)(a2[1].i64[0] + 8 * v46);
      v125.CGFloat x = v47;
      int v107 = [v44 numberOfColumns];
      int v48 = [v44 numberOfRows];
      uint64_t v103 = [v44 sourcePositions];
      uint64_t v102 = [v44 destPositions];
      float v101 = v44;
      if (v48 < 1)
      {
        unsigned int v50 = 0;
      }
      else
      {
        uint64_t v49 = 0;
        unsigned int v50 = 0;
        v55.i32[0] = 0;
        v51.i32[1] = 0;
        v51.f32[0] = *(float *)v114.i32 - *(float *)v104.i32;
        int8x8_t v52 = (int8x8_t)vdup_lane_s32(v111, 1);
        int8x8_t v53 = (int8x8_t)vdup_n_s32(v45);
        float32x2_t v54 = (float32x2_t)vbsl_s8(v53, (int8x8_t)vzip1_s32(v104, v111), (int8x8_t)__PAIR64__(v111.u32[1], v104.u32[0]));
        v55.i32[1] = vsub_f32((float32x2_t)vbsl_s8(v53, v52, (int8x8_t)v111), (float32x2_t)vbsl_s8(v53, (int8x8_t)v111, v52)).u32[0];
        uint64_t v105 = v48;
        uint64_t v56 = 8 * (v107 + 1);
        float32x2_t v113 = v51;
        float32x2_t v115 = v55;
        do
        {
          if (v107 <= 0)
          {
            uint64_t v57 = v49 + 1;
          }
          else
          {
            uint64_t v57 = v49 + 1;
            uint64_t v58 = v56 * (v49 + 1);
            uint64_t v59 = v56 * v49;
            uint64_t v61 = v107;
            uint64_t v60 = v102;
            uint64_t v62 = v103;
            do
            {
              v63.i64[0] = *(void *)(v60 + v59);
              v64.i64[0] = *(void *)(v60 + v59 + 8);
              v63.i64[1] = 0x3F80000000000000;
              v64.i64[1] = 0x3F80000000000000;
              v66.i64[0] = *(void *)(v60 + v58);
              v65.i64[0] = *(void *)(v60 + v58 + 8);
              v65.i64[1] = 0x3F80000000000000;
              v66.i64[1] = 0x3F80000000000000;
              float32x4_t v67 = a2[2];
              float32x4_t v68 = a2[3];
              float32x4_t v69 = a2[4];
              float32x4_t v70 = a2[5];
              float32x4_t v71 = vmulq_f32(v117, vaddq_f32(v120, vsubq_f32(v63, v123)));
              float32x4_t v72 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v71.f32[0]), v68, *(float32x2_t *)v71.f32, 1), v69, v71, 2), v70, v71, 3);
              float32x4_t v73 = vmulq_f32(v117, vaddq_f32(v120, vsubq_f32(v64, v123)));
              __n128 v74 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v73.f32[0]), v68, *(float32x2_t *)v73.f32, 1), v69, v73, 2), v70, v73, 3);
              float32x4_t v75 = vmulq_f32(v117, vaddq_f32(v120, vsubq_f32(v65, v123)));
              __n128 v76 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v75.f32[0]), v68, *(float32x2_t *)v75.f32, 1), v69, v75, 2), v70, v75, 3);
              float32x4_t v77 = vmulq_f32(v117, vaddq_f32(v120, vsubq_f32(v66, v123)));
              int v78 = add_subdivs(&v125, &v124, *((_DWORD *)this + 156), v72, v74, v76, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v67, v77.f32[0]), v68, *(float32x2_t *)v77.f32, 1), v69, v77, 2), v70, v77, 3), vmla_lane_f32(vmla_n_f32(v54, v51, COERCE_FLOAT(*(void *)(v62 + v59))), v55, *(float32x2_t *)(v62 + v59),
                        1),
                      vmla_lane_f32(vmla_n_f32(v54, v51, COERCE_FLOAT(*(void *)(v62 + v59 + 8))), v55, *(float32x2_t *)(v62 + v59 + 8), 1), vmla_lane_f32(vmla_n_f32(v54, v51, COERCE_FLOAT(*(void *)(v62 + v58 + 8))), v55, *(float32x2_t *)(v62 + v58 + 8), 1), vmla_lane_f32(vmla_n_f32(v54, v51, COERCE_FLOAT(*(void *)(v62 + v58))), v55, *(float32x2_t *)(v62 + v58), 1));
              float32x2_t v51 = v113;
              float32x2_t v55 = v115;
              v50 += v78;
              v62 += 8;
              v60 += 8;
              --v61;
            }
            while (v61);
          }
          uint64_t v49 = v57;
        }
        while (v57 != v105);
      }
    }
    else
    {
      uint64_t v79 = 0;
      double v80 = COERCE_DOUBLE(vzip1_s32(v114, v111));
      CGPoint v125 = (CGPoint)xmmword_20AE9BF80;
      long long v126 = unk_20AE9BF90;
      long long v127 = xmmword_20AE9BFA0;
      long long v128 = unk_20AE9BFB0;
      float32x4_t v81 = a2[2];
      float32x4_t v82 = a2[3];
      float32x4_t v83 = a2[4];
      float32x4_t v84 = a2[5];
      do
      {
        float32x4_t v85 = vmulq_f32(v117, vaddq_f32(v120, vsubq_f32(*(float32x4_t *)((char *)&v125 + v79), v123)));
        *(float32x4_t *)((char *)&v125 + v79) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v81, v85.f32[0]), v82, *(float32x2_t *)v85.f32, 1), v83, v85, 2), v84, v85, 3);
        v79 += 16;
      }
      while (v79 != 64);
      uint64_t v86 = a2[1].i64[1] + 16 * a2->u32[0];
      *(CGPoint *)uint64_t v86 = v125;
      *(_OWORD *)(v86 + 16) = v126;
      *(_OWORD *)(v86 + 32) = v127;
      *(_OWORD *)(v86 + 48) = v128;
      uint64_t v87 = a2[1].i64[0];
      uint64_t v88 = a2->u32[0];
      char v89 = [*((id *)this + 75) isRotated];
      double v90 = COERCE_DOUBLE(__PAIR64__(v111.u32[1], v114.u32[0]));
      double v91 = COERCE_DOUBLE(vzip1_s32(v104, v111));
      uint64_t v92 = (double *)(v87 + 8 * v88);
      if (v89) {
        double v93 = v91;
      }
      else {
        double v93 = COERCE_DOUBLE(__PAIR64__(v111.u32[1], v104.u32[0]));
      }
      if (v89) {
        double v94 = COERCE_DOUBLE(__PAIR64__(v111.u32[1], v104.u32[0]));
      }
      else {
        double v94 = COERCE_DOUBLE(__PAIR64__(v111.u32[1], v114.u32[0]));
      }
      if (v89)
      {
        double v95 = v80;
      }
      else
      {
        double v90 = v80;
        double v95 = v91;
      }
      *uint64_t v92 = v93;
      v92[1] = v94;
      unsigned int v50 = 4;
      v92[2] = v90;
      v92[3] = v95;
    }
    if (v50)
    {
      uint64_t v96 = 0;
      uint64_t v97 = a2->i64[1] + 4 * a2->u32[0];
      uint64_t result = v50;
      float32x4_t v98 = v108;
      v98.i32[3] = 1.0;
      int16x8_t v99 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v98, fminf(fmaxf(vmuls_lane_f32(*((float *)this + 81), v108, 3) * a2[6].f32[0], 0.0), 1.0)), (float32x4_t)vdupq_n_s32(0x437F0000u)));
      *(int16x4_t *)v99.i8 = vmovn_s32((int32x4_t)v99);
      unsigned __int32 v100 = vmovn_s16(v99).u32[0];
      do
        *(_DWORD *)(v97 + 4 * v96++) = v100;
      while (v50 != v96);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20AE67850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKCSpriteNode::addBatchRenderElements_NinePart(uint64_t a1, float32x4_t *a2)
{
  v127[4] = *MEMORY[0x263EF8340];
  int64x2_t v4 = *(int64x2_t *)(a1 + 576);
  int64x2_t v5 = 0uLL;
  v127[0] = 0;
  v127[1] = v4.i64[0];
  v127[2] = vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL));
  __asm { FMOV            V0.2S, #1.0 }
  float32x2_t v123 = *(float32x2_t *)&_D0;
  *(double *)&v127[3] = _D0;
  float32x4_t v10 = *(float32x4_t *)(a1 + 544);
  float v11 = *(void **)(a1 + 600);
  if (v11)
  {
    LODWORD(_D0) = v10.i32[1];
    if (v10.f32[0] == 1.0 && v10.f32[1] == 1.0)
    {
      int64x2_t v116 = v4;
      float32x4_t v119 = v10;
      objc_msgSend(v11, "size", _D0);
      double v13 = *(float *)(a1 + 336);
      if (v14 == v13)
      {
        [*(id *)(a1 + 600) size];
        if (v15 == *(float *)(a1 + 340))
        {
          int64x2_t v4 = v116;
          float32x4_t v10 = v119;
          goto LABEL_11;
        }
        double v13 = *(float *)(a1 + 336);
      }
      [*(id *)(a1 + 600) size];
      *(float *)&double v16 = v13 / v16;
      float32x4_t v17 = v119;
      v17.i32[0] = LODWORD(v16);
      float32x4_t v120 = v17;
      double v18 = *(float *)(a1 + 340);
      [*(id *)(a1 + 600) size];
      int64x2_t v4 = v116;
      float32x4_t v10 = v120;
      float32_t v20 = v18 / v19;
      v10.f32[1] = v20;
LABEL_11:
      int64x2_t v5 = 0uLL;
    }
  }
  float32x4_t v21 = (float32x4_t)v4.u64[0];
  float32x4_t v22 = (float32x4_t)vzip2q_s64(v4, v5);
  float32x4_t v23 = *(float32x4_t *)(a1 + 336);
  float32x4_t v24 = vmulq_f32(v10, v23);
  float32x2_t v25 = vmul_f32(*(float32x2_t *)v23.f32, vsub_f32(v123, *(float32x2_t *)(a1 + 584)));
  float32x4_t v26 = vdivq_f32(v23, v24);
  int32x2_t v27 = vcgt_f32(v25, *(float32x2_t *)v24.f32);
  if ((v27.i32[0] | v27.i32[1]))
  {
    float32x2_t v28 = vdiv_f32(*(float32x2_t *)v24.f32, v25);
    __asm { FMOV            V4.2S, #1.0 }
    float32x2_t v30 = vminnm_f32(v28, _D4);
    unint64_t v31 = vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL).u64[0];
    *(float32x2_t *)v26.f32 = vmul_f32(*(float32x2_t *)v26.f32, v30);
    v26.i64[1] = v31;
  }
  v126[0] = 0u;
  v126[1] = vmulq_f32(v21, v26);
  __asm { FMOV            V3.4S, #1.0 }
  v126[2] = vmlsq_f32(_Q3, v26, vsubq_f32(_Q3, vaddq_f32(v21, v22)));
  v126[3] = _Q3;
  float32x4_t v113 = vminnmq_f32(vmaxnmq_f32(*(float32x4_t *)(a1 + 304), (float32x4_t)0), _Q3);
  float32x4_t v115 = _Q3;
  unsigned int v33 = *(void **)(a1 + 600);
  if (v33)
  {
    float v34 = *(float *)(a1 + 320);
    [v33 textureRect];
    CGFloat x = v128.origin.x;
    CGFloat y = v128.origin.y;
    CGFloat width = v128.size.width;
    CGFloat height = v128.size.height;
    double MinX = CGRectGetMinX(v128);
    v129.origin.CGFloat x = x;
    v129.origin.CGFloat y = y;
    v129.size.CGFloat width = width;
    v129.size.CGFloat height = height;
    double MaxX = CGRectGetMaxX(v129);
    v130.origin.CGFloat x = x;
    v130.origin.CGFloat y = y;
    v130.size.CGFloat width = width;
    v130.size.CGFloat height = height;
    double MinY = CGRectGetMinY(v130);
    v131.origin.CGFloat x = x;
    v131.origin.CGFloat y = y;
    v131.size.CGFloat width = width;
    v131.size.CGFloat height = height;
    double MaxY = CGRectGetMaxY(v131);
    [*(id *)(a1 + 600) cropOffset];
    __src[0].f64[0] = v43;
    __src[0].f64[1] = v44;
    *(float32x2_t *)v112.f32 = sk_vector_make(__src);
    [*(id *)(a1 + 600) cropScale];
    __src[0].f64[0] = v45;
    __src[0].f64[1] = v46;
    int8x8_t v47 = (int8x8_t)sk_vector_make(__src);
    float32x2_t v121 = (float32x2_t)v47;
    *(float *)v47.i32 = MinX;
    float32_t v48 = MinY;
    float32x2_t v105 = (float32x2_t)v47;
    float v108 = v48;
    *(float32_t *)&v47.i32[1] = v48;
    int8x8_t v117 = v47;
    *(float *)v49.i32 = MaxX;
    *(float *)v47.i32 = MaxY;
    float v106 = *(float *)v49.i32;
    float v107 = *(float *)v47.i32;
    v49.i32[1] = v47.i32[0];
    int8x8_t v110 = v49;
    unsigned int v50 = *(void **)(a1 + 600);
    if (v50)
    {
      [v50 _backingTexture];
      if (*(void *)&__src[0].f64[0]
        && (*(unsigned int (**)(void))(**(void **)&__src[0].f64[0] + 24))(*(void *)&__src[0].f64[0]) == 1)
      {
        unsigned int v51 = (***(uint64_t (****)(void))&__src[0].f64[0])(*(void *)&__src[0].f64[0]);
        unsigned int v52 = (***(uint64_t (****)(void))&__src[0].f64[0])(*(void *)&__src[0].f64[0]);
        unsigned int v53 = (*(uint64_t (**)(void))(**(void **)&__src[0].f64[0] + 8))(*(void *)&__src[0].f64[0]);
        unsigned int v54 = (*(uint64_t (**)(void))(**(void **)&__src[0].f64[0] + 8))(*(void *)&__src[0].f64[0]);
        *(float *)v55.i32 = v105.f32[0] * (float)v51;
        *(float *)&v55.i32[1] = v108 * (float)v53;
        int8x8_t v117 = v55;
        *(float *)v55.i32 = v106 * (float)v52;
        *(float *)&v55.i32[1] = v107 * (float)v54;
        int8x8_t v110 = v55;
      }
    }
    else
    {
      __src[0] = 0uLL;
    }
    int v56 = objc_msgSend(*(id *)(a1 + 600), "isFlipped", *(void *)&v105);
    float v57 = fminf(fmaxf(v34, 0.0), 1.0);
    __asm { FMOV            V0.4S, #-1.0 }
    float32x4_t v59 = vaddq_f32(v113, _Q0);
    if (v56) {
      unsigned int v60 = -1;
    }
    else {
      unsigned int v60 = 0;
    }
    int8x8_t v61 = (int8x8_t)vdup_n_s32(v60);
    v62.i32[0] = v117.i32[0];
    v63.i32[0] = v110.i32[0];
    v63.i32[1] = vbsl_s8(v61, v117, v110).i32[1];
    v62.i32[1] = vbsl_s8(v61, v110, v117).i32[1];
    float32x2_t v118 = v62;
    if (*(void *)&__src[0].f64[1])
    {
      float v114 = v57;
      float32x2_t v109 = v63;
      float32x4_t v111 = v59;
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&__src[0].f64[1]);
      float32x2_t v63 = v109;
      float32x4_t v59 = v111;
      float v57 = v114;
    }
    float32x4_t v113 = vmlaq_n_f32(v115, v59, v57);
    float32x4_t v112 = (float32x4_t)v112.u64[0];
    *(float32x2_t *)v64.f32 = v121;
    *(float32x2_t *)&v64.u32[2] = v123;
    float32x4_t v65 = *(void **)(a1 + 600);
    float32x4_t v122 = v64;
    float32x2_t v123 = vsub_f32(v63, v118);
    if (v65 && [v65 isRotated])
    {
      uint64_t v66 = 0;
      float32x4_t v67 = v125;
      do
      {
        unsigned int v68 = v66 / 3u;
        uint64_t v69 = v127[v68];
        LODWORD(v70) = v69;
        HIDWORD(v69) = HIDWORD(v127[2 - v66 % 3u]);
        uint64_t v71 = v127[v68 + 1];
        HIDWORD(v70) = HIDWORD(v127[(v66 % 3u) ^ 3]);
        HIDWORD(v7SKCNode::setFlags(this, 66, 1) = HIDWORD(v70);
        *(v67 - 2) = v70;
        *(v67 - SKCNode::setFlags(this, 66, 1) = v69;
        *float32x4_t v67 = __PAIR64__(HIDWORD(v69), v71);
        v67[1] = v71;
        v67 += 4;
        ++v66;
      }
      while (v66 != 9);
      goto LABEL_33;
    }
  }
  else
  {
    float32x4_t v112 = 0u;
    float32x2_t v118 = 0;
    float32x4_t v122 = _Q3;
  }
  uint64_t v72 = 0;
  float32x4_t v73 = v125;
  do
  {
    unsigned int v74 = v72 / 3u;
    uint64_t v75 = v127[v72 % 3u];
    LODWORD(v76) = v75;
    HIDWORD(v76) = HIDWORD(v127[v74]);
    uint64_t v77 = v127[(v72 % 3u + 1)];
    LODWORD(v78) = v77;
    HIDWORD(v78) = HIDWORD(v127[v74 + 1]);
    HIDWORD(v77) = HIDWORD(v76);
    HIDWORD(v75) = HIDWORD(v78);
    *(v73 - 2) = v76;
    *(v73 - SKCNode::setFlags(this, 66, 1) = v77;
    *float32x4_t v73 = v78;
    v73[1] = v75;
    v73 += 4;
    ++v72;
  }
  while (v72 != 9);
LABEL_33:
  uint64_t v79 = 0;
  float32x4_t v80 = *(float32x4_t *)(a1 + 336);
  float32x4_t v81 = *(float32x4_t *)(a1 + 352);
  v81.i64[1] = 0;
  v82.i64[0] = 0x3F0000003F000000;
  v82.i64[1] = 0x3F0000003F000000;
  float32x4_t v83 = vaddq_f32(v112, vdivq_f32(vmulq_f32(vsubq_f32(v115, v122), vsubq_f32(v82, (float32x4_t)v81.u64[0])), v122));
  float32x4_t v84 = &__src[2];
  do
  {
    unsigned int v85 = v79 / 3u;
    long long v86 = xmmword_20AE9A910;
    LODWORD(v86) = v126[v79 % 3u];
    long long v87 = v86;
    DWORD1(v87) = DWORD1(v126[v85]);
    long long v88 = xmmword_20AE9A910;
    LODWORD(v88) = v126[(v79 % 3u + 1)];
    long long v89 = v88;
    DWORD1(v89) = DWORD1(v126[v85 + 1]);
    DWORD1(v88) = DWORD1(v87);
    DWORD1(v86) = DWORD1(v89);
    v84[-2] = (float64x2_t)v87;
    v84[-1] = (float64x2_t)v88;
    *float32x4_t v84 = (float64x2_t)v89;
    v84[1] = (float64x2_t)v86;
    v84 += 4;
    ++v79;
  }
  while (v79 != 9);
  uint64_t v90 = 0;
  v80.i64[1] = v115.i64[1];
  float32x4_t v91 = vmulq_f32(v122, v80);
  float32x4_t v92 = a2[2];
  float32x4_t v93 = a2[3];
  float32x4_t v94 = a2[4];
  float32x4_t v95 = a2[5];
  do
  {
    float32x4_t v96 = vmulq_f32(v91, vaddq_f32(v83, vsubq_f32((float32x4_t)__src[v90], v81)));
    __src[v90++] = (float64x2_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, v96.f32[0]), v93, *(float32x2_t *)v96.f32, 1), v94, v96, 2), v95, v96, 3);
  }
  while (v90 != 36);
  memcpy((void *)(a2[1].i64[1] + 16 * a2->u32[0]), __src, 0x240uLL);
  uint64_t v97 = 0;
  uint64_t v98 = a2[1].i64[0] + 8 * a2->u32[0];
  do
  {
    *(float32x2_t *)(v98 + v97 * 8) = vmla_f32(v118, v123, *(float32x2_t *)&__src[36].f64[v97]);
    ++v97;
  }
  while (v97 != 36);
  uint64_t v99 = 0;
  uint64_t v100 = a2->i64[1] + 4 * a2->u32[0];
  float32x4_t v101 = v113;
  v101.i32[3] = 1.0;
  int16x8_t v102 = (int16x8_t)vcvtq_s32_f32(vmulq_f32(vmulq_n_f32(v101, fminf(fmaxf(vmuls_lane_f32(*(float *)(a1 + 324), v113, 3) * a2[6].f32[0], 0.0), 1.0)), (float32x4_t)vdupq_n_s32(0x437F0000u)));
  *(int16x4_t *)v102.i8 = vmovn_s32((int32x4_t)v102);
  unsigned __int32 v103 = vmovn_s16(v102).u32[0];
  do
  {
    *(_DWORD *)(v100 + v99) = v103;
    v99 += 4;
  }
  while (v99 != 144);
  return 36;
}

void sub_20AE67FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t add_subdivs(_OWORD **a1, void **a2, int a3, float32x4_t a4, __n128 a5, __n128 a6, float32x4_t a7, float32x2_t a8, float32x2_t a9, float32x2_t a10, float32x2_t a11)
{
  float32x2_t v13 = a9;
  float32x2_t v14 = a8;
  float32x4_t v17 = a4;
  int v18 = 0;
  if (a3)
  {
    uint64_t v19 = (a3 - 1);
    float32x2_t v50 = (float32x2_t)vdup_n_s32(0x3C75C28Fu);
    double v20 = *(double *)&a10;
    float32x2_t v21 = a9;
    float32x4_t v22 = (float32x4_t)a6;
    float32x4_t v23 = (float32x4_t)a5;
    float32x4_t v49 = a7;
    while (1)
    {
      float32x4_t v24 = vaddq_f32(vsubq_f32(a4, v23), vsubq_f32(v22, a7));
      int8x16_t v25 = (int8x16_t)vmulq_f32(v24, v24);
      int32x2_t v26 = (int32x2_t)vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
      float32x4_t v27 = vaddq_f32(vsubq_f32(a4, a7), vsubq_f32(v22, v23));
      int8x16_t v28 = (int8x16_t)vmulq_f32(v27, v27);
      *(float32x2_t *)v28.i8 = vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
      int32x2_t v29 = vcgt_f32(vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v28.i8, v26), (float32x2_t)vzip2_s32(*(int32x2_t *)v28.i8, v26))), v50);
      if (((v29.i32[1] | v29.i32[0]) & 1) == 0) {
        break;
      }
      v30.i64[0] = 0x3F0000003F000000;
      v30.i64[1] = 0x3F0000003F000000;
      float32x4_t v31 = vmlaq_f32(a4, v30, vsubq_f32(v23, a4));
      v31.i32[3] = 1.0;
      float32x4_t v32 = v31;
      float32x4_t v33 = vmlaq_f32(a4, v30, vsubq_f32(a7, a4));
      v33.i32[3] = 1.0;
      float32x4_t v52 = v33;
      float32x4_t v34 = vmlaq_f32(v22, v30, vsubq_f32(a7, v22));
      v34.i32[3] = 1.0;
      __n128 v53 = (__n128)v34;
      float32x4_t v35 = vmlaq_f32(v32, v30, vsubq_f32(v34, v32));
      v35.i32[3] = 1.0;
      __n128 v54 = (__n128)v35;
      float32x2_t v36 = vmla_f32(a8, (float32x2_t)0x3F0000003F000000, vsub_f32(v21, a8));
      float32x2_t v14 = vmla_f32(a8, (float32x2_t)0x3F0000003F000000, vsub_f32(a11, a8));
      a10 = vmla_f32(*(float32x2_t *)&v20, (float32x2_t)0x3F0000003F000000, vsub_f32(a11, *(float32x2_t *)&v20));
      float32x2_t v13 = vmla_f32(v36, (float32x2_t)0x3F0000003F000000, vsub_f32(a10, v36));
      int v37 = add_subdivs(a1, a2, v19);
      int v38 = add_subdivs(a1, a2, v19);
      int v39 = add_subdivs(a1, a2, v19);
      a6 = v53;
      a5 = v54;
      float32x4_t v17 = v52;
      a7 = v49;
      v18 += v37 + v38 + v39;
      uint64_t v19 = (v19 - 1);
      double v20 = *(double *)&a10;
      float32x2_t v21 = v13;
      a8 = v14;
      float32x4_t v22 = (float32x4_t)v53;
      float32x4_t v23 = (float32x4_t)v54;
      a4 = v52;
      if (v19 == -1) {
        goto LABEL_7;
      }
    }
    float32x4_t v17 = a4;
    a5 = (__n128)v23;
    a6 = (__n128)v22;
    float32x2_t v14 = a8;
    float32x2_t v13 = v21;
    *(double *)&a10 = v20;
  }
LABEL_7:
  int8x8_t v40 = (float32x4_t *)(*a1)++;
  float32x4_t *v40 = v17;
  float32x4_t v41 = (__n128 *)(*a1)++;
  *float32x4_t v41 = a5;
  float32x4_t v42 = (__n128 *)(*a1)++;
  *float32x4_t v42 = a6;
  float64_t v43 = (__n128 *)(*a1)++;
  __n128 *v43 = (__n128)a7;
  float64_t v44 = (double *)(*a2)++;
  *float64_t v44 = *(double *)&v14;
  float64_t v45 = (float32x2_t *)(*a2)++;
  *float64_t v45 = v13;
  float64_t v46 = (double *)(*a2)++;
  *float64_t v46 = *(double *)&a10;
  int8x8_t v47 = (double *)(*a2)++;
  *int8x8_t v47 = *(double *)&a11;
  return (v18 + 4);
}

void SKCSpriteNode::setPrimaryTexture(id *this, SKTexture *a2)
{
  int64x2_t v5 = a2;
  objc_storeStrong(this + 75, a2);
  int64x2_t v4 = (std::__shared_weak_count *)this[33];
  this[32] = 0;
  this[33] = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  SKCNode::setDirty((SKCNode *)this);
}

void sub_20AE6839C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKCSpriteNode::setSecondaryTexture(id *this, SKTexture *a2)
{
  objc_storeStrong(this + 76, a2);

  SKCNode::setDirty((SKCNode *)this);
}

void SKCSpriteNode::setShader(id *this, SKShader *a2)
{
  objc_storeStrong(this + 74, a2);
  SKCNode::setDirty((SKCNode *)this);

  SKCNode::recomputeFlags((SKCNode *)this, 1);
}

void SKCSpriteNode::subclassRecomputeFlags(id *this)
{
  if ([this[74] _usesTimeUniform]
    && !*((unsigned char *)this + 172)
    && (*((unsigned char *)this + 171) & 0x60) != 0)
  {
    SKCNode::setFlags((SKCNode *)this, 66, 1);
  }
}

void SKCSpriteNode::~SKCSpriteNode(id *this)
{
  SKCNode::~SKCNode(this);
}

{
  uint64_t vars8;

  SKCSpriteNode::~SKCSpriteNode(this);

  JUMPOUT(0x21052EA30);
}

id SKGetGlobalDefaults(void)
{
  GLenum v0 = (void *)_globalFlags;
  if (!_globalFlags)
  {
    id v1 = objc_alloc_init(MEMORY[0x263EFF9A0]);
    float32x4_t v2 = (void *)_globalFlags;
    _globalFlags = (uint64_t)v1;

    GLenum v0 = (void *)_globalFlags;
  }

  return v0;
}

uint64_t SKCRendererEnsureSoundContext(void)
{
  if (SKCRendererEnsureSoundContext(void)::onceToken != -1) {
    dispatch_once(&SKCRendererEnsureSoundContext(void)::onceToken, &__block_literal_global_11);
  }
  GLenum v0 = (void *)_soundContext;

  return [v0 makeCurrentContext];
}

void ___Z29SKCRendererEnsureSoundContextv_block_invoke()
{
  uint64_t v0 = +[SKSoundContext context];
  id v1 = (void *)_soundContext;
  _soundContext = v0;
}

void SKCRendererRegisterSoundSource(SKSoundSource *a1)
{
  id v1 = a1;
  float32x4_t v3 = v1;
  if (SKCRendererRegisterSoundSource(SKSoundSource *)::onceToken == -1)
  {
    float32x4_t v2 = v1;
  }
  else
  {
    dispatch_once(&SKCRendererRegisterSoundSource(SKSoundSource *)::onceToken, &__block_literal_global_3);
    float32x4_t v2 = v3;
  }
  [(id)_soundSources addObject:v2];
}

void sub_20AE69288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void ___Z30SKCRendererRegisterSoundSourceP13SKSoundSource_block_invoke()
{
  uint64_t v0 = objc_alloc_init(SKThreadSafeMutableArray);
  id v1 = (void *)_soundSources;
  _soundSources = (uint64_t)v0;
}

void SKCRendererRemoveCompletedSoundSources(void)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  id v0 = objc_alloc_init(MEMORY[0x263EFF980]);
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v1 = (id)_soundSources;
  uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v7;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v7 != v3) {
          objc_enumerationMutation(v1);
        }
        int64x2_t v5 = *(void **)(*((void *)&v6 + 1) + 8 * i);
        if ((int)objc_msgSend(v5, "completedBufferCount", (void)v6) >= 1) {
          [v0 addObject:v5];
        }
      }
      uint64_t v2 = [v1 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v2);
  }

  [(id)_soundSources removeObjectsInArray:v0];
}

void sub_20AE69408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE695C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE69738(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE698D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE69A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE69C10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t SKBlendModeGetBackingBlendMode(SKBlendMode a1)
{
  if ((unint64_t)(a1 - 1) > 6) {
    return 0;
  }
  else {
    return dword_20AE9BFD0[a1 - 1];
  }
}

id _SKLocalizedString(NSString *a1, NSString *a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = [MEMORY[0x263F086E0] bundleWithIdentifier:@"com.apple.SpriteKit"];
  int64x2_t v4 = v3;
  if (v3)
  {
    int64x2_t v5 = [v3 localizedStringForKey:v2 value:&stru_26BEEFD10 table:0];
  }
  else
  {
    int64x2_t v5 = 0;
  }

  return v5;
}

void sub_20AE69D18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t __deviceClassForInterfaceIdiom(unint64_t a1)
{
  if (a1 < 5) {
    return a1 + 1;
  }
  else {
    return 0;
  }
}

void SKCParticleSystemNode::SKCParticleSystemNode(SKCParticleSystemNode *this)
{
  SKCNode::SKCNode(this);
  *(void *)uint64_t v1 = &unk_26BEEE6B8;
  *(void *)(v1 + 560) = 0;
  *(void *)(v1 + 576) = 0;
  *(void *)(v1 + 568) = 0;
  *(_DWORD *)(v1 + 584) = 1000;
  operator new();
}

void sub_20AE69E14(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;
  MEMORY[0x21052EA30](v3, 0x10A1C40A4A8B666);

  SKCNode::~SKCNode(v1);
  _Unwind_Resume(a1);
}

void SKCParticleSystemNode::~SKCParticleSystemNode(SKCParticleSystemNode *this)
{
  *(void *)this = &unk_26BEEE6B8;
  uint64_t v2 = *((void *)this + 74);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 80);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  int64x2_t v4 = (std::__shared_weak_count *)*((void *)this + 78);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  int64x2_t v5 = (std::__shared_weak_count *)*((void *)this + 76);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  SKCNode::~SKCNode((id *)this);
}

{
  uint64_t vars8;

  SKCParticleSystemNode::~SKCParticleSystemNode(this);

  JUMPOUT(0x21052EA30);
}

uint64_t SKCParticleSystemNode::generatesVisibleGeometry(SKCParticleSystemNode *this, const simd_float4x4 *a2)
{
  return 1;
}

double SKCParticleSystemNode::getBatchInfo@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 60) = 0u;
  *(void *)&double result = 0x300000000;
  *(void *)(a1 + 4) = 0x300000000;
  *(unsigned char *)a1 = 1;
  return result;
}

uint64_t SKCParticleSystemNode::getNeedsCustomRenderOps()
{
  return 1;
}

uint64_t SKCParticleSystemNode::getMaxBatchRenderElementCount()
{
  return 0;
}

void SKCParticleSystemNode::addRenderOps(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  if (*(void *)(a1 + 560) == 1) {
    SKCParticleSystemNode::addRenderOps_Points(a1, a2, a3);
  }
  else {
    SKCParticleSystemNode::addRenderOps_Quads(a1, a2, a3);
  }
}

void SKCParticleSystemNode::addRenderOps_Points(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t RenderData_Points = SKCParticleSystemNode::generateRenderData_Points(a1, a2);
  if (RenderData_Points)
  {
    uint64_t v7 = RenderData_Points;
    long long v8 = *(void **)(a1 + 576);
    if (!v8) {
      goto LABEL_9;
    }
    [v8 _backingProgram];
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      long long v9 = *(void **)(a1 + 576);
      if (v9)
      {
        [v9 _backingProgram];
        std::string::size_type v10 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
      }
      else
      {
        std::string::size_type v10 = 0;
      }
      uint64_t v19 = *a3;
      int BackingBlendMode = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
      LODWORD(__p.__r_.__value_.__l.__data_) = 31;
      unint64_t v21 = v19[2];
      if (v21 >= v19[3])
      {
        uint64_t v22 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v19 + 1, (int *)&__p);
      }
      else
      {
        *(void *)unint64_t v21 = &unk_26BEEC420;
        *(_DWORD *)(v21 + 8) = 31;
        *(void *)(v21 + 24) = 0;
        *(void *)(v21 + 32) = 0;
        *(void *)(v21 + 16) = 0;
        *(void *)(v21 + 64) = 0;
        uint64_t v22 = v21 + 192;
        *(void *)(v21 + 96) = 0;
      }
      v19[2] = v22;
      *(void *)(v22 - 80) = v10;
      *(_DWORD *)(v22 - 64) = BackingBlendMode;
      *(_OWORD *)(v22 - 60) = xmmword_20AE9B300;
      *(_DWORD *)(v22 - 44) = 3;
      float32x4_t v23 = (jet_command_buffer *)*a3;
      float32x4_t v24 = *(void **)(a1 + 576);
      if (v24)
      {
        [v24 _commandsForBatchOffset:0 count:v7];
        int8x16_t v25 = (jet_command_buffer *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        int8x16_t v25 = 0;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      }
      jet_command_buffer::add_command_buffer(v23, v25);
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      {
        SKCParticleSystemNode::addRenderOps_Points(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime = skCurrentTime();
      }
      float v26 = skCurrentTime()
          - *(double *)&SKCParticleSystemNode::addRenderOps_Points(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime;
      float v27 = fmodf(v26, 43200.0);
      int8x16_t v28 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__p, "u_time");
      jet_command_buffer::set_fragment_constant_value(v28, &__p, v27);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
LABEL_9:
      uint64_t v11 = *a3;
      if (*(unsigned char *)(a2 + 576))
      {
        uint64_t v12 = *(void *)(a2 + 264);
        LODWORD(__p.__r_.__value_.__l.__data_) = 31;
        unint64_t v13 = v11[2];
        if (v13 >= v11[3])
        {
          uint64_t v14 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v11 + 1, (int *)&__p);
        }
        else
        {
          *(void *)unint64_t v13 = &unk_26BEEC420;
          *(_DWORD *)(v13 + 8) = 31;
          *(void *)(v13 + 24) = 0;
          *(void *)(v13 + 32) = 0;
          *(void *)(v13 + 16) = 0;
          *(void *)(v13 + 64) = 0;
          uint64_t v14 = v13 + 192;
          *(void *)(v13 + 96) = 0;
        }
        v11[2] = v14;
        *(void *)(v14 - 80) = v12;
        *(_OWORD *)(v14 - 64) = xmmword_20AE9A970;
        *(void *)(v14 - 48) = 0x30000000FLL;
      }
      else
      {
        uint64_t v15 = *(void *)(a2 + 248);
        int v16 = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
        LODWORD(__p.__r_.__value_.__l.__data_) = 31;
        unint64_t v17 = v11[2];
        if (v17 >= v11[3])
        {
          uint64_t v18 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v11 + 1, (int *)&__p);
        }
        else
        {
          *(void *)unint64_t v17 = &unk_26BEEC420;
          *(_DWORD *)(v17 + 8) = 31;
          *(void *)(v17 + 24) = 0;
          *(void *)(v17 + 32) = 0;
          *(void *)(v17 + 16) = 0;
          *(void *)(v17 + 64) = 0;
          uint64_t v18 = v17 + 192;
          *(void *)(v17 + 96) = 0;
        }
        v11[2] = v18;
        *(void *)(v18 - 80) = v15;
        *(_DWORD *)(v18 - 64) = v16;
        *(_OWORD *)(v18 - 60) = xmmword_20AE9B300;
        *(_DWORD *)(v18 - 44) = 3;
      }
    }
    CGSize size = *(std::__shared_weak_count **)(a1 + 568);
    if (!size
      || ([(std::__shared_weak_count *)size _backingTexture],
          CGSize size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_,
          unsigned long long v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_,
          float32x4_t v30 = (std::__shared_weak_count *)(v32 >> 64),
          uint64_t v31 = v32,
          !__p.__r_.__value_.__r.__words[0]))
    {
      uint64_t v31 = *(void *)(a2 + 432);
      float32x4_t v30 = *(std::__shared_weak_count **)(a2 + 440);
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (size) {
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
    }
    std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100]((uint64_t *)(a2 + 672), (long long *)(a2 + 416));
    float32x4_t v33 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
    jet_command_buffer::set_fragment_texture(v33, &__p, v31);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    float32x4_t v34 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
    jet_command_buffer::set_fragment_sampler(v34, &__p, *(void *)(a2 + 480));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    float32x4_t v35 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
    uint64_t current_buffer = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 600));
    jet_command_buffer::set_vertex_buffer(v35, &__p, current_buffer);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v37 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_color");
    uint64_t v38 = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 616));
    jet_command_buffer::set_vertex_buffer(v37, &__p, v38);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    jet_command_buffer::draw(*a3, 0, 0, v7);
    uint64_t v39 = *(void *)(a2 + 664);
    ++*(_DWORD *)(v39 + 164);
    *(_DWORD *)(v39 + 148) += v7;
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
  }
}

void sub_20AE6A414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void SKCParticleSystemNode::addRenderOps_Quads(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  uint64_t RenderData_Quads = SKCParticleSystemNode::generateRenderData_Quads(a1, a2);
  if (RenderData_Quads)
  {
    uint64_t v7 = RenderData_Quads;
    long long v8 = *(void **)(a1 + 576);
    if (!v8) {
      goto LABEL_53;
    }
    [v8 _backingProgram];
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    if (__p.__r_.__value_.__r.__words[0])
    {
      long long v9 = *(void **)(a1 + 576);
      if (v9)
      {
        [v9 _backingProgram];
        std::string::size_type v10 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__l.__size_) {
          std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
        }
      }
      else
      {
        std::string::size_type v10 = 0;
      }
      double v20 = *a3;
      int BackingBlendMode = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
      LODWORD(__p.__r_.__value_.__l.__data_) = 31;
      unint64_t v22 = v20[2];
      if (v22 >= v20[3])
      {
        uint64_t v23 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v20 + 1, (int *)&__p);
      }
      else
      {
        *(void *)unint64_t v22 = &unk_26BEEC420;
        *(_DWORD *)(v22 + 8) = 31;
        *(void *)(v22 + 24) = 0;
        *(void *)(v22 + 32) = 0;
        *(void *)(v22 + 16) = 0;
        *(void *)(v22 + 64) = 0;
        uint64_t v23 = v22 + 192;
        *(void *)(v22 + 96) = 0;
      }
      v20[2] = v23;
      *(void *)(v23 - 80) = v10;
      *(_DWORD *)(v23 - 64) = BackingBlendMode;
      *(_OWORD *)(v23 - 60) = xmmword_20AE9B300;
      *(_DWORD *)(v23 - 44) = 3;
      float32x4_t v24 = (jet_command_buffer *)*a3;
      int8x16_t v25 = *(void **)(a1 + 576);
      if (v25)
      {
        [v25 _commandsForBatchOffset:0 count:v7];
        float v26 = (jet_command_buffer *)__p.__r_.__value_.__r.__words[0];
      }
      else
      {
        float v26 = 0;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      }
      jet_command_buffer::add_command_buffer(v24, v26);
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      {
        SKCParticleSystemNode::addRenderOps_Quads(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime = skCurrentTime();
      }
      float v27 = skCurrentTime()
          - *(double *)&SKCParticleSystemNode::addRenderOps_Quads(SKCRenderInfo *,std::shared_ptr<jet_command_buffer> const&)::baseTime;
      float v28 = fmodf(v27, 43200.0);
      int32x2_t v29 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__p, "u_time");
      jet_command_buffer::set_fragment_constant_value(v29, &__p, v28);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
LABEL_53:
      if (*(unsigned char *)(a2 + 576))
      {
        uint64_t v11 = *a3;
        uint64_t v12 = *(void *)(a2 + 184);
        LODWORD(__p.__r_.__value_.__l.__data_) = 31;
        unint64_t v13 = v11[2];
        if (v13 >= v11[3])
        {
          uint64_t v14 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v11 + 1, (int *)&__p);
        }
        else
        {
          *(void *)unint64_t v13 = &unk_26BEEC420;
          *(_DWORD *)(v13 + 8) = 31;
          *(void *)(v13 + 24) = 0;
          *(void *)(v13 + 32) = 0;
          *(void *)(v13 + 16) = 0;
          *(void *)(v13 + 64) = 0;
          uint64_t v14 = v13 + 192;
          *(void *)(v13 + 96) = 0;
        }
        v11[2] = v14;
        *(void *)(v14 - 80) = v12;
        *(_OWORD *)(v14 - 64) = xmmword_20AE9A970;
        *(void *)(v14 - 48) = 0x30000000FLL;
      }
      else
      {
        uint64_t v15 = *(void *)(a2 + 168);
        int v16 = *a3;
        int v17 = SKBlendModeGetBackingBlendMode(*(SKBlendMode *)(a1 + 288));
        LODWORD(__p.__r_.__value_.__l.__data_) = 31;
        unint64_t v18 = v16[2];
        if (v18 >= v16[3])
        {
          uint64_t v19 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v16 + 1, (int *)&__p);
        }
        else
        {
          *(void *)unint64_t v18 = &unk_26BEEC420;
          *(_DWORD *)(v18 + 8) = 31;
          *(void *)(v18 + 24) = 0;
          *(void *)(v18 + 32) = 0;
          *(void *)(v18 + 16) = 0;
          *(void *)(v18 + 64) = 0;
          uint64_t v19 = v18 + 192;
          *(void *)(v18 + 96) = 0;
        }
        void v16[2] = v19;
        *(void *)(v19 - 80) = v15;
        *(_DWORD *)(v19 - 64) = v17;
        *(_OWORD *)(v19 - 60) = xmmword_20AE9B300;
        *(_DWORD *)(v19 - 44) = 3;
      }
    }
    CGSize size = *(std::__shared_weak_count **)(a1 + 568);
    if (!size
      || ([(std::__shared_weak_count *)size _backingTexture],
          CGSize size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_,
          unsigned long long v33 = *(_OWORD *)&__p.__r_.__value_.__l.__data_,
          uint64_t v31 = (std::__shared_weak_count *)(v33 >> 64),
          uint64_t v32 = v33,
          !__p.__r_.__value_.__r.__words[0]))
    {
      uint64_t v32 = *(void *)(a2 + 432);
      uint64_t v31 = *(std::__shared_weak_count **)(a2 + 440);
      if (v31) {
        atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (size) {
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
    }
    std::vector<std::shared_ptr<jet_buffer>>::push_back[abi:ne180100]((uint64_t *)(a2 + 672), (long long *)(a2 + 416));
    float32x4_t v34 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
    jet_command_buffer::set_fragment_texture(v34, &__p, v32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    float32x4_t v35 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
    jet_command_buffer::set_fragment_sampler(v35, &__p, *(void *)(a2 + 480));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    float32x2_t v36 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
    uint64_t current_buffer = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 600));
    jet_command_buffer::set_vertex_buffer(v36, &__p, current_buffer);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v38 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_color");
    uint64_t v39 = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 616));
    jet_command_buffer::set_vertex_buffer(v38, &__p, v39);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int8x8_t v40 = *a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "a_tex_coord");
    uint64_t v41 = jet_buffer_pool::get_current_buffer(*(jet_buffer_pool **)(a1 + 632));
    jet_command_buffer::set_vertex_buffer(v40, &__p, v41);
    unsigned int v42 = 6 * v7;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    jet_command_buffer::draw_indexed(*a3, 3, *(void *)(a2 + 416), 0, v42);
    uint64_t v43 = *(void *)(a2 + 664);
    ++*(_DWORD *)(v43 + 164);
    *(_DWORD *)(v43 + 148) += v42 / 6;
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
  }
}

void sub_20AE6A96C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

uint64_t SKCParticleSystemNode::generateRenderData_Quads(uint64_t a1, uint64_t a2)
{
  SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v85);
  uint64_t v81 = 0;
  float32x4_t v82 = &v81;
  uint64_t v83 = 0x2020000000;
  int v84 = 0;
  uint64_t v4 = *(void *)(a1 + 592);
  if (!v4
    || (v80[0] = MEMORY[0x263EF8330],
        v80[1] = 3221225472,
        v80[2] = ___ZN21SKCParticleSystemNode24generateRenderData_QuadsEP13SKCRenderInfo_block_invoke,
        v80[3] = &unk_263FEA560,
        v80[4] = &v81,
        SKCParticleManager::enumerateParticleSystems(v4, v80),
        (int v5 = *((_DWORD *)v82 + 6)) == 0))
  {
    uint64_t v9 = 0;
    goto LABEL_59;
  }
  if (*(_DWORD *)(a1 + 584) <= (4 * v5)) {
    unsigned int v6 = 4 * v5;
  }
  else {
    unsigned int v6 = *(_DWORD *)(a1 + 584);
  }
  uint64_t v7 = *(void *)(a1 + 600);
  if (v7) {
    uint64_t v8 = *(unsigned int *)(v7 + 16);
  }
  else {
    uint64_t v8 = 0;
  }
  std::string::size_type v10 = (jet_buffer_pool **)(a1 + 600);
  if (v8 < v6)
  {
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 608);
    *std::string::size_type v10 = 0;
    *(void *)(a1 + 608) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 624);
    *(void *)(a1 + 616) = 0;
    *(void *)(a1 + 624) = 0;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
    unint64_t v13 = *(std::__shared_weak_count **)(a1 + 640);
    *(void *)(a1 + 632) = 0;
    *(void *)(a1 + 640) = 0;
    if (v13) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    }
    do
      uint64_t v8 = (2 * v8 + 2);
    while (v8 < v6);
  }
  if (!*v10)
  {
    uint64_t v38 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v85 + 16))(v85, 0, 4, v8);
    std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v76, v38);
  }
  jet_buffer_pool::next_buffer(*v10);
  uint64_t v14 = *(jet_buffer_pool **)(a1 + 616);
  if (!v14)
  {
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v85 + 16))(v85, 2, 4, v8);
    std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v76, v39);
  }
  jet_buffer_pool::next_buffer(v14);
  uint64_t v15 = *(jet_buffer_pool **)(a1 + 632);
  if (!v15)
  {
    uint64_t v40 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v85 + 16))(v85, 0, 2, v8);
    std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v76, v40);
  }
  jet_buffer_pool::next_buffer(v15);
  unsigned int v16 = (6 * (v8 >> 2)) | 1;
  if (v16 <= 0x4E20) {
    uint64_t v17 = 20000;
  }
  else {
    uint64_t v17 = v16;
  }
  uint64_t v18 = *(void *)(a2 + 416);
  if (!v18 || *(_DWORD *)(v18 + 48) < v17)
  {
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v85 + 8))(v85, 4, 1, v17, 0);
    std::shared_ptr<jet_buffer>::shared_ptr[abi:ne180100]<jet_buffer,void>(&v76, v19);
  }
  uint64_t data = jet_buffer_pool::get_data(*v10);
  uint64_t v21 = jet_buffer_pool::get_data(*(jet_buffer_pool **)(a1 + 616));
  uint64_t v22 = jet_buffer_pool::get_data(*(jet_buffer_pool **)(a1 + 632));
  uint64_t v76 = 0;
  uint64_t v77 = &v76;
  uint64_t v78 = 0x2020000000;
  int v79 = 0;
  uint64_t v23 = *(void **)(a1 + 568);
  if (v23)
  {
    [v23 cropOffset];
    v73.CGFloat x = v24;
    v73.CGFloat y = v25;
    float32x2_t v66 = sk_vector_make((float64x2_t *)&v73);
    [*(id *)(a1 + 568) cropScale];
    v73.CGFloat x = v26;
    v73.CGFloat y = v27;
    float32x2_t v65 = sk_vector_make((float64x2_t *)&v73);
    float v28 = *(void **)(a1 + 568);
    if (v28)
    {
      [v28 textureRect];
      CGFloat v30 = v29;
      CGFloat v32 = v31;
      CGFloat v34 = v33;
      CGFloat v36 = v35;
      int v37 = *(void **)(a1 + 568);
      if (v37)
      {
        [v37 _backingTexture];
        if (*(void *)&v73.y) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73.y);
        }
      }
      goto LABEL_38;
    }
    CGFloat v34 = 1.0;
    CGFloat v30 = 0.0;
  }
  else
  {
    CGFloat v34 = 1.0;
    CGFloat v30 = 0.0;
    __asm { FMOV            V0.2S, #1.0 }
    float32x2_t v65 = _D0;
    float32x2_t v66 = 0;
  }
  CGFloat v32 = 0.0;
  CGFloat v36 = 1.0;
LABEL_38:
  v88.origin.CGFloat x = v30;
  v88.origin.CGFloat y = v32;
  v88.size.CGFloat width = v34;
  v88.size.CGFloat height = v36;
  double MinX = CGRectGetMinX(v88);
  v89.origin.CGFloat x = v30;
  v89.origin.CGFloat y = v32;
  v89.size.CGFloat width = v34;
  v89.size.CGFloat height = v36;
  double MaxX = CGRectGetMaxX(v89);
  v90.origin.CGFloat x = v30;
  v90.origin.CGFloat y = v32;
  v90.size.CGFloat width = v34;
  v90.size.CGFloat height = v36;
  double MinY = CGRectGetMinY(v90);
  v91.origin.CGFloat x = v30;
  v91.origin.CGFloat y = v32;
  v91.size.CGFloat width = v34;
  v91.size.CGFloat height = v36;
  CGFloat MaxY = CGRectGetMaxY(v91);
  float v50 = MinX;
  float v51 = MaxX;
  float v52 = MinY;
  __n128 v53 = *(void **)(a1 + 568);
  float v54 = MaxY;
  if (v53)
  {
    [v53 _backingTexture];
    if (*(void *)&v73.x
      && (*(unsigned int (**)(void))(**(void **)&v73.x + 24))(*(void *)&v73.x) == 1)
    {
      float v50 = v50 * (float)(***(unsigned int (****)(void))&v73.x)(*(void *)&v73.x);
      float v51 = v51 * (float)(***(unsigned int (****)(void))&v73.x)(*(void *)&v73.x);
      float v52 = v52 * (float)(*(unsigned int (**)(void))(**(void **)&v73.x + 8))(*(void *)&v73.x);
      float v54 = v54 * (float)(*(unsigned int (**)(void))(**(void **)&v73.x + 8))(*(void *)&v73.x);
    }
    int v55 = objc_msgSend(*(id *)(a1 + 568), "isFlipped", *(void *)&v65);
    if (v55) {
      float v56 = v54;
    }
    else {
      float v56 = v52;
    }
    if (v55) {
      float v54 = v52;
    }
    if (*(void *)&v73.y) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*(std::__shared_weak_count **)&v73.y);
    }
  }
  else
  {
    float v56 = v52;
  }
  float v57 = *(float *)(a2 + 96);
  v73.CGFloat x = 0.0;
  *(void *)&v73.CGFloat y = &v73;
  uint64_t v74 = 0x2020000000;
  int v75 = 0;
  uint64_t v58 = *(void *)(a1 + 592);
  if (v58)
  {
    v67[0] = MEMORY[0x263EF8330];
    v67[1] = 3221225472;
    v67[2] = ___ZN21SKCParticleSystemNode24generateRenderData_QuadsEP13SKCRenderInfo_block_invoke_2;
    v67[3] = &unk_263FEA588;
    v67[7] = v65;
    v67[8] = v66;
    float v68 = v50;
    float v69 = v56;
    float v70 = v51;
    float v71 = v54;
    v67[9] = data;
    v67[10] = v22;
    float v72 = fminf(fmaxf(v57, 0.0), 1.0);
    v67[11] = v21;
    v67[4] = &v73;
    v67[5] = &v76;
    v67[6] = a2;
    SKCParticleManager::enumerateParticleSystems(v58, v67);
  }
  float32x4_t v59 = v77;
  if (*((_DWORD *)v77 + 6))
  {
    float32x4_t v60 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v61.i64[0] = 0x80000000800000;
    v61.i64[1] = 0x80000000800000;
    *(float32x4_t *)(a1 + 656) = v60;
    *(float32x4_t *)(a1 + 672) = v61;
    if ((v59[3] & 0x3FFFFFFF) != 0)
    {
      unint64_t v62 = 0;
      do
      {
        float32x4_t v60 = vminnmq_f32(v60, *(float32x4_t *)(data + 16 * v62));
        *(float32x4_t *)(a1 + 656) = v60;
        float32x4_t v61 = vmaxnmq_f32(v61, *(float32x4_t *)(data + 16 * v62));
        *(float32x4_t *)(a1 + 672) = v61;
        ++v62;
      }
      while (v62 < (4 * *((_DWORD *)v59 + 6)));
    }
    simd_float4x4 v87 = __invert_f4(*(simd_float4x4 *)(a2 + 32));
    float32x4_t v63 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v87.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 656))), (float32x4_t)v87.columns[1], *(float32x2_t *)(a1 + 656), 1), (float32x4_t)v87.columns[2], *(float32x4_t *)(a1 + 656), 2), (float32x4_t)v87.columns[3], *(float32x4_t *)(a1 + 656), 3);
    v87.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v87.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 672))), (float32x4_t)v87.columns[1], *(float32x2_t *)(a1 + 672), 1), (float32x4_t)v87.columns[2], *(float32x4_t *)(a1 + 672), 2), (float32x4_t)v87.columns[3], *(float32x4_t *)(a1 + 672), 3);
    *(float32x4_t *)(a1 + 656) = v63;
    *(simd_float4 *)(a1 + 672) = v87.columns[0];
  }
  else
  {
    *(_OWORD *)(a1 + 656) = 0u;
    *(_OWORD *)(a1 + 672) = 0u;
  }
  jet_buffer_pool::commit_data(*v10);
  jet_buffer_pool::commit_data(*(jet_buffer_pool **)(a1 + 632));
  jet_buffer_pool::commit_data(*(jet_buffer_pool **)(a1 + 616));
  uint64_t v9 = *((unsigned int *)v77 + 6);
  _Block_object_dispose(&v73, 8);
  _Block_object_dispose(&v76, 8);
LABEL_59:
  _Block_object_dispose(&v81, 8);
  if (v86) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v86);
  }
  return v9;
}

void sub_20AE6B1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  double v33 = *(std::__shared_weak_count **)(v31 - 152);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  _Unwind_Resume(a1);
}

void SKCParticleSystemNode::subclassRecomputeFlags(id *this)
{
  if ([this[72] _usesTimeUniform]
    && !*((unsigned char *)this + 172)
    && (*((unsigned char *)this + 171) & 0x60) != 0)
  {
    SKCNode::setFlags((SKCNode *)this, 66, 1);
  }
}

uint64_t SKCParticleSystemNode::generateRenderData_Points(uint64_t a1, uint64_t a2)
{
  SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v48);
  uint64_t v44 = 0;
  float64_t v45 = &v44;
  uint64_t v46 = 0x2020000000;
  int v47 = 0;
  uint64_t v4 = *(void *)(a1 + 592);
  if (v4
    && (v43[0] = MEMORY[0x263EF8330],
        v43[1] = 3221225472,
        v43[2] = ___ZN21SKCParticleSystemNode25generateRenderData_PointsEP13SKCRenderInfo_block_invoke,
        v43[3] = &unk_263FEA560,
        v43[4] = &v44,
        SKCParticleManager::enumerateParticleSystems(v4, v43),
        int v5 = (unsigned int *)(v45 + 3),
        *((_DWORD *)v45 + 6)))
  {
    unsigned int v6 = (jet_buffer_pool **)(a1 + 600);
    if (*(_DWORD *)(a1 + 584) >= *((_DWORD *)v45 + 6)) {
      int v5 = (unsigned int *)(a1 + 584);
    }
    uint64_t v7 = *(void *)(a1 + 600);
    if (v7) {
      uint64_t v8 = *(unsigned int *)(v7 + 16);
    }
    else {
      uint64_t v8 = 0;
    }
    unsigned int v10 = *v5;
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 640);
    *(void *)(a1 + 632) = 0;
    *(void *)(a1 + 640) = 0;
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (v8 < v10)
    {
      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 608);
      *unsigned int v6 = 0;
      *(void *)(a1 + 608) = 0;
      if (v12) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
      unint64_t v13 = *(std::__shared_weak_count **)(a1 + 624);
      *(void *)(a1 + 616) = 0;
      *(void *)(a1 + 624) = 0;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      do
        uint64_t v8 = (2 * v8 + 2);
      while (v8 < v10);
    }
    if (!*v6)
    {
      uint64_t v25 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v48 + 16))(v48, 0, 4, v8);
      std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v39, v25);
    }
    jet_buffer_pool::next_buffer(*v6);
    uint64_t v14 = *(jet_buffer_pool **)(a1 + 616);
    if (!v14)
    {
      uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v48 + 16))(v48, 2, 4, v8);
      std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&v39, v26);
    }
    jet_buffer_pool::next_buffer(v14);
    uint64_t data = jet_buffer_pool::get_data(*v6);
    uint64_t v16 = jet_buffer_pool::get_data(*(jet_buffer_pool **)(a1 + 616));
    uint64_t v39 = 0;
    uint64_t v40 = &v39;
    uint64_t v41 = 0x2020000000;
    int v42 = 0;
    float v17 = *(float *)(a2 + 96);
    v37[0] = 0;
    v37[1] = v37;
    v37[2] = 0x2020000000;
    int32x4_t v18 = vdupq_n_s32(0x7F7FFFFFu);
    int v38 = 0;
    *(void *)&long long v19 = 0x80000000800000;
    *((void *)&v19 + SKCNode::setFlags(this, 66, 1) = 0x80000000800000;
    *(int32x4_t *)(a1 + 656) = v18;
    *(_OWORD *)(a1 + 672) = v19;
    uint64_t v20 = *(void *)(a1 + 592);
    float32x4_t v21 = 0uLL;
    if (v20)
    {
      uint64_t v22 = (const float *)(a2 + 128);
      v18.i64[0] = *(void *)(a2 + 120);
      float32x2_t v23 = vld1_dup_f32(v22);
      v28[0] = MEMORY[0x263EF8330];
      v28[1] = 3221225472;
      int v28[2] = ___ZN21SKCParticleSystemNode25generateRenderData_PointsEP13SKCRenderInfo_block_invoke_2;
      v28[3] = &unk_263FEA5B0;
      uint64_t v32 = a1;
      uint64_t v33 = a2;
      *(float32x2_t *)v18.i8 = vdiv_f32(vcvt_f32_u32(*(uint32x2_t *)v18.i8), v23);
      int32x4_t v29 = v18;
      float v36 = fminf(fmaxf(v17, 0.0), 1.0);
      uint64_t v34 = data;
      uint64_t v35 = v16;
      CGFloat v30 = v37;
      uint64_t v31 = &v39;
      SKCParticleManager::enumerateParticleSystems(v20, v28);
      float32x4_t v24 = 0uLL;
      float32x4_t v21 = 0uLL;
      if (*((_DWORD *)v40 + 6))
      {
        simd_float4x4 v50 = __invert_f4(*(simd_float4x4 *)(a2 + 32));
        float32x4_t v24 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v50.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 656))), (float32x4_t)v50.columns[1], *(float32x2_t *)(a1 + 656), 1), (float32x4_t)v50.columns[2], *(float32x4_t *)(a1 + 656), 2), (float32x4_t)v50.columns[3], *(float32x4_t *)(a1 + 656), 3);
        float32x4_t v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v50.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 672))), (float32x4_t)v50.columns[1], *(float32x2_t *)(a1 + 672), 1), (float32x4_t)v50.columns[2], *(float32x4_t *)(a1 + 672), 2), (float32x4_t)v50.columns[3], *(float32x4_t *)(a1 + 672), 3);
      }
    }
    else
    {
      float32x4_t v24 = 0uLL;
    }
    *(float32x4_t *)(a1 + 656) = v24;
    *(float32x4_t *)(a1 + 672) = v21;
    jet_buffer_pool::commit_data(*(jet_buffer_pool **)(a1 + 600));
    jet_buffer_pool::commit_data(*(jet_buffer_pool **)(a1 + 616));
    uint64_t v9 = *((unsigned int *)v40 + 6);
    _Block_object_dispose(v37, 8);
    _Block_object_dispose(&v39, 8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  _Block_object_dispose(&v44, 8);
  if (v49) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v49);
  }
  return v9;
}

void sub_20AE6B688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 112), 8);
  int32x4_t v29 = *(std::__shared_weak_count **)(v27 - 72);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN21SKCParticleSystemNode24generateRenderData_QuadsEP13SKCRenderInfo_block_invoke(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) += *(_DWORD *)(a2 + 84);
  return result;
}

void ___ZN21SKCParticleSystemNode24generateRenderData_QuadsEP13SKCRenderInfo_block_invoke_2(float32x2_t *a1, uint64_t a2)
{
  uint64_t v4 = *(unsigned int *)(a2 + 84);
  std::string::basic_string[abi:ne180100]<0>(__p, "pos");
  int v5 = *(float32x2_t **)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "size");
  unsigned int v6 = *(float32x2_t **)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  uint64_t v7 = *(void *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "rot");
  uint64_t v8 = *(void *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  if ((int)v4 >= 1)
  {
    uint64_t v9 = 0;
    unsigned int v10 = (float32x4_t *)a1[6];
    float32x4_t v56 = v10[3];
    float32x4_t v57 = v10[2];
    float32x4_t v54 = v10[5];
    float32x4_t v55 = v10[4];
    do
    {
      float32x2_t v11 = *v5++;
      float32x2_t v12 = v11;
      float32x2_t v13 = *v6++;
      float v58 = *(float *)(v7 + v9);
      __float2 v14 = __sincosf_stret(*(float *)(v8 + v9));
      float32x2_t v15 = vmul_f32(a1[7], vmul_n_f32(vmul_f32(v13, (float32x2_t)0x3F0000003F000000), v58));
      float32x2_t v16 = vadd_f32(v12, vmul_f32(a1[8], v15));
      float32x4_t v17 = vmlaq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v16.f32[0]), v56, v16, 1), (float32x4_t)0, v55);
      float32x4_t v18 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v57, v14.__cosval * v15.f32[0]), v56, v14.__sinval * v15.f32[0]), (float32x4_t)0, v55), (float32x4_t)0, v54);
      float32x4_t v19 = vmlaq_f32(vmlaq_f32(vmlaq_n_f32(vmulq_n_f32(v57, -(float)(v15.f32[1] * v14.__sinval)), v56, vmuls_lane_f32(v14.__cosval, v15, 1)), (float32x4_t)0, v55), (float32x4_t)0, v54);
      float32x4_t v20 = vaddq_f32(v54, v17);
      float32x4_t v21 = vsubq_f32(v20, v18);
      unsigned int v22 = v9 + *(_DWORD *)(*(void *)(*(void *)&a1[4] + 8) + 24);
      *(float32x4_t *)(*(void *)&a1[9] + 16 * v22) = vsubq_f32(v21, v19);
      float32x4_t v23 = vaddq_f32(v20, v18);
      *(float32x4_t *)(*(void *)&a1[9] + 16 * v22 + 16) = vsubq_f32(v23, v19);
      *(float32x4_t *)(*(void *)&a1[9] + 16 * v22 + 32) = vaddq_f32(v19, v23);
      *(float32x4_t *)(*(void *)&a1[9] + 16 * v22 + 48) = vaddq_f32(v19, v21);
      v9 += 4;
    }
    while (4 * v4 != v9);
  }
  if ((int)v4 >= 1)
  {
    int v24 = 0;
    LODWORD(v27) = a1[12].i32[0];
    LODWORD(v25) = v27;
    HIDWORD(v25) = a1[12].i32[1];
    float32x2_t v26 = a1[13];
    HIDWORD(v27) = v26.i32[1];
    int v28 = v4;
    do
    {
      unsigned int v29 = v24 + *(_DWORD *)(*(void *)(*(void *)&a1[4] + 8) + 24);
      *(void *)(*(void *)&a1[10] + 8 * v29) = v25;
      *(void *)(*(void *)&a1[10] + 8 * v29 + 8) = __PAIR64__(HIDWORD(v25), v26.u32[0]);
      *(float32x2_t *)(*(void *)&a1[10] + 8 * v29 + 16) = v26;
      *(void *)(*(void *)&a1[10] + 8 * v29 + 24) = v27;
      v24 += 4;
      --v28;
    }
    while (v28);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "outColor");
  uint64_t v30 = *(void *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v60 < 0) {
    operator delete(__p[0]);
  }
  if ((int)v4 < 4)
  {
    LODWORD(v36) = 0;
  }
  else
  {
    uint64_t v35 = 0;
    unint64_t v36 = 0;
    uint64_t v37 = v30 + 12;
    int8x16_t v38 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    float32x4_t v39 = (float32x4_t)vdupq_n_s32(0xCB400000);
    do
    {
      v31.i32[0] = *(_DWORD *)(v30 + v35);
      v32.i32[0] = *(_DWORD *)(v37 + v35 - 8);
      float32x4_t v40 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v31)), v38), v39);
      float v41 = a1[14].f32[0];
      v33.i32[0] = *(_DWORD *)(v37 + v35 - 4);
      v34.i32[0] = *(_DWORD *)(v37 + v35);
      int16x8_t v42 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v40, v41));
      float32x4_t v34 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v34.f32)), v38), v39);
      *(int16x4_t *)v42.i8 = vmovn_s32((int32x4_t)v42);
      unsigned int v43 = v35 + *(_DWORD *)(*(void *)(*(void *)&a1[4] + 8) + 24);
      v42.i32[0] = vmovn_s16(v42).u32[0];
      float32x4_t v33 = vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v33.f32)), v38), v39), v41);
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43) = v42.i32[0];
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 4) = v42.i32[0];
      int16x8_t v44 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v32)), v38), v39), v41));
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 8) = v42.i32[0];
      *(int16x4_t *)v44.i8 = vmovn_s32((int32x4_t)v44);
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 12) = v42.i32[0];
      v44.i32[0] = vmovn_s16(v44).u32[0];
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 16) = v44.i32[0];
      int16x8_t v45 = (int16x8_t)vcvtq_s32_f32(v33);
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 20) = v44.i32[0];
      *(int16x4_t *)v45.i8 = vmovn_s32((int32x4_t)v45);
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 24) = v44.i32[0];
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 28) = v44.i32[0];
      uint8x8_t v32 = (uint8x8_t)vmovn_s16(v45);
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 32) = v32.i32[0];
      int16x8_t v46 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v34, v41));
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 36) = v32.i32[0];
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 40) = v32.i32[0];
      *(int16x4_t *)v46.i8 = vmovn_s32((int32x4_t)v46);
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 44) = v32.i32[0];
      uint8x8_t v31 = (uint8x8_t)vmovn_s16(v46);
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 48) = v31.i32[0];
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 52) = v31.i32[0];
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 56) = v31.i32[0];
      *(_DWORD *)(*(void *)&a1[11] + 4 * v43 + 60) = v31.i32[0];
      v36 += 4;
      v35 += 16;
    }
    while (v36 < (v4 - 3));
  }
  if ((int)v36 < (int)v4)
  {
    int v47 = 4 * v36;
    uint64_t v48 = (__int32 *)(v30 + 4 * v36);
    int8x16_t v49 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    float32x4_t v50 = (float32x4_t)vdupq_n_s32(0xCB400000);
    uint64_t v51 = v4 - v36;
    do
    {
      __int32 v52 = *v48++;
      v31.i32[0] = v52;
      int16x8_t v53 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v31)), v49), v50), a1[14].f32[0]));
      *(int16x4_t *)v53.i8 = vmovn_s32((int32x4_t)v53);
      uint8x8_t v31 = (uint8x8_t)vmovn_s16(v53);
      *(_DWORD *)(*(void *)&a1[11]
                + 4 * (v47 + *(_DWORD *)(*(void *)(*(void *)&a1[4] + 8) + 24))) = v31.i32[0];
      *(_DWORD *)(*(void *)&a1[11]
                + 4 * (v47 + *(_DWORD *)(*(void *)(*(void *)&a1[4] + 8) + 24) + 1)) = v31.i32[0];
      *(_DWORD *)(*(void *)&a1[11]
                + 4 * (v47 + *(_DWORD *)(*(void *)(*(void *)&a1[4] + 8) + 24) + 2)) = v31.i32[0];
      *(_DWORD *)(*(void *)&a1[11]
                + 4 * (v47 + *(_DWORD *)(*(void *)(*(void *)&a1[4] + 8) + 24) + 3)) = v31.i32[0];
      v47 += 4;
      --v51;
    }
    while (v51);
  }
  *(_DWORD *)(*(void *)(*(void *)&a1[5] + 8) + 24) += v4;
  *(_DWORD *)(*(void *)(*(void *)&a1[4] + 8) + 24) += 4 * v4;
}

void sub_20AE6BC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN21SKCParticleSystemNode25generateRenderData_PointsEP13SKCRenderInfo_block_invoke(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) += *(_DWORD *)(a2 + 84);
  return result;
}

void ___ZN21SKCParticleSystemNode25generateRenderData_PointsEP13SKCRenderInfo_block_invoke_2(float32x4_t *a1, uint64_t a2)
{
  uint64_t v4 = (float32x4_t *)a1[4].i64[0];
  uint64_t v5 = *(unsigned int *)(a2 + 84);
  std::string::basic_string[abi:ne180100]<0>(__p, "pos");
  uint64_t v6 = *(void *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "size");
  uint64_t v7 = *(void *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "scale");
  uint64_t v8 = *(void *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if ((int)v5 >= 1)
  {
    uint64_t v9 = 0;
    v10.i64[0] = 0x3F0000003F000000;
    v10.i64[1] = 0x3F0000003F000000;
    do
    {
      float32x2_t v11 = vmul_n_f32(*(float32x2_t *)(v7 + 8 * v9), *(float *)(v8 + 4 * v9));
      float32x2_t v12 = (float32x4_t *)a1[4].i64[1];
      float32x4_t v13 = v12[2];
      float32x4_t v14 = v12[3];
      float32x4_t v15 = v12[4];
      float32x4_t v16 = v12[5];
      float32x4_t v17 = vmulq_f32(a1[2], vabsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, v11.f32[0]), v14, v11, 1), (float32x4_t)0, v15), (float32x4_t)0, v16)));
      float32x4_t v18 = vaddq_f32(v16, vmlaq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(void *)(v6 + 8 * v9))), v14, *(float32x2_t *)(v6 + 8 * v9), 1), (float32x4_t)0, v15));
      v18.f32[3] = (float)(v12[8].f32[0] * vaddv_f32(*(float32x2_t *)v17.f32)) * 0.25;
      *(float32x4_t *)(a1[5].i64[0] + 16 * (v9 + *(_DWORD *)(*(void *)(a1[3].i64[0] + 8) + 24))) = v18;
      float32x4_t v19 = vminnmq_f32(v4[41], vmlsq_f32(v18, v10, v17));
      float32x4_t v20 = vmaxnmq_f32(v4[42], vmlaq_f32(v18, v10, v17));
      v4[41] = v19;
      v4[42] = v20;
      ++v9;
    }
    while (v5 != v9);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "outColor");
  uint64_t v21 = *(void *)(SKCParticleSystem::getSlice(a2, (const void **)__p) + 16);
  if (v37 < 0) {
    operator delete(__p[0]);
  }
  if ((int)v5 < 4)
  {
    LODWORD(v26) = 0;
  }
  else
  {
    unint64_t v26 = 0;
    uint64_t v27 = (__int32 *)(v21 + 8);
    int8x16_t v28 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    float32x4_t v29 = (float32x4_t)vdupq_n_s32(0xCB400000);
    do
    {
      v22.i32[0] = *(v27 - 2);
      v23.i32[0] = *(v27 - 1);
      float v30 = a1[6].f32[0];
      int16x8_t v31 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v22)), v28), v29), v30));
      *(int16x4_t *)v31.i8 = vmovn_s32((int32x4_t)v31);
      int16x8_t v23 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v23.i8)), v28), v29), v30));
      *(int16x4_t *)v23.i8 = vmovn_s32((int32x4_t)v23);
      v24.i32[0] = *v27;
      v25.i32[0] = v27[1];
      v27 += 4;
      int16x8_t v24 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v24.i8)), v28), v29), v30));
      *(int16x4_t *)v24.i8 = vmovn_s32((int32x4_t)v24);
      float32x4_t v25 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)v25.f32)), v28), v29);
      int16x8_t v32 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(v25, v30));
      *(int16x4_t *)v32.i8 = vmovn_s32((int32x4_t)v32);
      *(_DWORD *)(a1[5].i64[1] + 4 * (v26 + *(_DWORD *)(*(void *)(a1[3].i64[0] + 8) + 24))) = vmovn_s16(v31).u32[0];
      *(_DWORD *)(a1[5].i64[1] + 4 * (v26 + *(_DWORD *)(*(void *)(a1[3].i64[0] + 8) + 24) + 1)) = vmovn_s16(v23).u32[0];
      *(_DWORD *)(a1[5].i64[1] + 4 * (v26 + *(_DWORD *)(*(void *)(a1[3].i64[0] + 8) + 24) + 2)) = vmovn_s16(v24).u32[0];
      uint8x8_t v22 = (uint8x8_t)vmovn_s16(v32);
      *(_DWORD *)(a1[5].i64[1] + 4 * (v26 + *(_DWORD *)(*(void *)(a1[3].i64[0] + 8) + 24) + 3)) = v22.i32[0];
      v26 += 4;
    }
    while (v26 < (v5 - 3));
  }
  if ((int)v26 < (int)v5)
  {
    unint64_t v26 = v26;
    int8x16_t v33 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    float32x4_t v34 = (float32x4_t)vdupq_n_s32(0xCB400000);
    do
    {
      v22.i32[0] = *(_DWORD *)(v21 + 4 * v26);
      int16x8_t v35 = (int16x8_t)vcvtq_s32_f32(vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(v22)), v33), v34), a1[6].f32[0]));
      *(int16x4_t *)v35.i8 = vmovn_s32((int32x4_t)v35);
      uint8x8_t v22 = (uint8x8_t)vmovn_s16(v35);
      *(_DWORD *)(a1[5].i64[1] + 4 * (v26++ + *(_DWORD *)(*(void *)(a1[3].i64[0] + 8) + 24))) = v22.i32[0];
    }
    while (v5 != v26);
  }
  *(_DWORD *)(*(void *)(a1[3].i64[1] + 8) + 24) += v5;
  *(_DWORD *)(*(void *)(a1[3].i64[0] + 8) + 24) += v5;
}

void sub_20AE6C028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double SKCParticleSystemNode::getBoundingBox(SKCParticleSystemNode *this)
{
  float32x4_t v2 = *((float32x4_t *)this + 41);
  *(float32x2_t *)&v2.u32[2] = vsub_f32(*(float32x2_t *)((char *)this + 672), *(float32x2_t *)v2.f32);
  *(double *)&long long v3 = SKCBoundingBoxMake(v2);
  long long v13 = v4;
  long long v14 = v3;
  long long v15 = v6;
  long long v16 = v5;
  (*(void (**)(SKCParticleSystemNode *))(*(void *)this + 104))(this);
  uint64_t v11 = 0;
  v17[0] = v14;
  v17[1] = v13;
  v17[2] = v16;
  v17[3] = v15;
  do
  {
    *(long long *)((char *)&v18 + v11 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v7, COERCE_FLOAT(v17[v11])), v8, *(float32x2_t *)&v17[v11], 1), v9, (float32x4_t)v17[v11], 2), v10, (float32x4_t)v17[v11], 3);
    ++v11;
  }
  while (v11 != 4);
  return *(double *)&v18;
}

uint64_t SKCParticleSystemNode::getParticleManager(SKCParticleSystemNode *this)
{
  return *((void *)this + 74);
}

uint64_t SKCParticleSystemNode::addBatchRenderElements()
{
  return 0;
}

float SKCParticleSystemNode::update(SKCParticleSystemNode *this, double a2, float a3)
{
  SKCNode::update(this, a2, 1.0);
  double v5 = CACurrentMediaTime();
  _perfBeginEmitters(v5);
  long long v6 = &SKShader_declares_with_transform_vsh;
  {
    long long v6 = &SKShader_declares_with_transform_vsh;
    if (v10)
    {
      SKCParticleSystemNode::update(double,float)::lastTime = *(void *)&a2;
      long long v6 = &SKShader_declares_with_transform_vsh;
    }
  }
  float v7 = a2 - *((double *)v6 + 106);
  *((double *)v6 + 106) = a2;
  SKCParticleManager::update(*((void *)this + 74), v7);
  SKCParticleManager::compact(*((SKCParticleManager **)this + 74));
  double v8 = CACurrentMediaTime();

  return _perfEndEmitters(v8);
}

BOOL SKCParticleSystemNode::getNeedsUpdate(SKCParticleSystemNode *this)
{
  BOOL NeedsUpdate = SKCNode::getNeedsUpdate(this);
  uint64_t v7 = 0;
  double v8 = &v7;
  uint64_t v9 = 0x2020000000;
  int v10 = 0;
  uint64_t v3 = *((void *)this + 74);
  if (v3)
  {
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = ___ZN21SKCParticleSystemNode14getNeedsUpdateEv_block_invoke;
    void v6[3] = &unk_263FEA560;
    void v6[4] = &v7;
    SKCParticleManager::enumerateParticleSystems(v3, v6);
  }
  BOOL v4 = NeedsUpdate || *((_DWORD *)v8 + 6) != 0;
  _Block_object_dispose(&v7, 8);
  return v4;
}

void sub_20AE6C294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21SKCParticleSystemNode14getNeedsUpdateEv_block_invoke(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) += *(_DWORD *)(a2 + 84);
  return result;
}

void sub_20AE6C664(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE6C810(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

void sub_20AE6C98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  _Unwind_Resume(a1);
}

void sub_20AE6CB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  _Unwind_Resume(a1);
}

void sub_20AE6CC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)SKMutableTexture;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

float subtractAndNormalize(float a1, float a2)
{
  float result = a1 - a2;
  if (result < 0.0 || result > 6.2832) {
    return result - (float)((float)(int)floorf(result / 6.2832) * 6.2832);
  }
  return result;
}

void sub_20AE6CD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE6CFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE6D194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE6D254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE6D304(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE6D440(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE6DCDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_20AE6DF50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE6E030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE6FE3C(_Unwind_Exception *a1)
{
}

void sub_20AE72484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  MEMORY[0x21052EA30](v13, 0x10A0C40B78ACC54);
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }

  _Unwind_Resume(a1);
}

void sub_20AE72564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE72658(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE72A08(_Unwind_Exception *a1)
{
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }

  _Unwind_Resume(a1);
}

void sub_20AE72B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE72CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE730BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE73138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE731B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE73210(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE73284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE732DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE73350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE733A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7341C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE73474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE734E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE73540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE735B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE7360C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE73680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE736D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7385C(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C40983EBE18);

  _Unwind_Resume(a1);
}

void sub_20AE73AF0(_Unwind_Exception *a1)
{
  BOOL v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE73D10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE73DB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE73E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCStrength::SKCStrength(SKCStrength *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v3 = &unk_26BEEE7D8;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(void *)(v3 + 56) = *(void *)&a2->var8;
  *(void *)(v3 + 88) = a2->var14;
  *(unsigned char *)(v3 + 32) = 1;
}

void SKCStrength::~SKCStrength(SKCStrength *this)
{
  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

void SKCStrength::cpp_updateWithTargetForTime(SKCStrength *this, id *a2, double a3)
{
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  float v7 = v6;
  id v12 = a2[1];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = v12;
    [v9 strength];
    if (this->var25)
    {
      float v11 = (float)(this->var23 * v7) + 1.0;
      *(float *)&double v10 = (float)(*(float *)&v10 * v11) / this->var22;
      [v9 setStrength:v10];
      this->var22 = v11;
    }
    else if (!this->var24)
    {
      *(float *)&double v10 = (float)(v7 * this->var19) + (float)(this->var23 * (float)(1.0 - v7));
      [v9 setStrength:v10];
    }
    this->float var21 = v7;
  }
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
  {
    v8.n128_f64[0] = a3;
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, v8);
  }
}

void sub_20AE74118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKCStrength::cpp_willStartWithTargetAtTime(SKCStrength *this, id *a2, double a3)
{
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, (SKCNode *)a2, a3);
  id v8 = a2[1];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = v8;
    float v6 = v5;
    this->float var21 = 0.0;
    if (this->var25)
    {
      this->var22 = 1.0;
      float v7 = this->var19 + -1.0;
    }
    else
    {
      [v5 strength];
    }
    this->BOOL var23 = v7;
  }
}

void sub_20AE741E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE742F8(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C40F5A01273);

  _Unwind_Resume(a1);
}

void sub_20AE746C4(_Unwind_Exception *a1)
{
  BOOL v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE749D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE74A9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE74B3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE74BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE74C78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCResize::SKCResize(SKCResize *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v3 = &unk_26BEEE870;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(void *)(v3 + 56) = *(void *)&a2->var8;
  *(void *)(v3 + 88) = a2->var14;
  *(unsigned char *)(v3 + 32) = 1;
}

void SKCResize::~SKCResize(SKCResize *this)
{
  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

void SKCResize::cpp_updateWithTargetForTime(SKCResize *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_ratioForTime((SKCAction *)this, a3);
  float v7 = v6;
  long long v8 = *((_OWORD *)a2 + 21);
  if (this->var24)
  {
    float v9 = v6 - this->var19;
    float v10 = 0.0;
    float v11 = 0.0;
    if (this->var25) {
      float v11 = v9 * this->var20.var0;
    }
    if (this->var26) {
      float v10 = v9 * this->var20.var1;
    }
    *(float32x2_t *)&long long v8 = vadd_f32(*(float32x2_t *)&v8, (float32x2_t)__PAIR64__(LODWORD(v10), LODWORD(v11)));
    float v12 = this->var22.var1 - v10;
    this->var22.var0 = this->var22.var0 - v11;
    this->var22.var1 = v12;
  }
  else if (!this->var23)
  {
    if (this->var25) {
      float v13 = (float)(v6 * this->var20.var0) + (float)(this->var22.var0 * (float)(1.0 - v6));
    }
    else {
      LODWORD(v13) = *((_OWORD *)a2 + 21);
    }
    *(float *)&long long v8 = v13;
    if (this->var26) {
      *((float *)&v8 + SKCNode::setFlags(this, 66, 1) = (float)(v7 * this->var20.var1) + (float)(this->var22.var1 * (float)(1.0 - v7));
    }
  }
  float32x2_t v15 = (float32x2_t)v8;
  __n128 v16 = (__n128)(unint64_t)v8;
  __n128 v17 = (__n128)(unint64_t)v8;
  SKCNode::setSize(a2, &v17);
  this->float var19 = v7;
  if ((COERCE_UNSIGNED_INT(v7 + -1.0) & 0x60000000) == 0)
  {
    v14.n128_u64[1] = v16.n128_u64[1];
    if (this->var24)
    {
      v14.n128_u64[0] = (unint64_t)vadd_f32(v15, (float32x2_t)this->var22);
      __n128 v17 = v14;
      SKCNode::setSize(a2, &v17);
      this->var22.var0 = 0.0;
      this->var22.var1 = 0.0;
    }
    else if (!this->var23)
    {
      __n128 v17 = v16;
      SKCNode::setSize(a2, &v17);
    }
    v14.n128_f64[0] = a3;
    SKCAction::didFinishWithTargetAtTime((SKCAction *)this, a2, v14);
  }
}

__n128 SKCResize::cpp_willStartWithTargetAtTime(SKCResize *this, SKCNode *a2, double a3)
{
  SKCAction::cpp_willStartWithTargetAtTime((SKCAction *)this, a2, a3);
  this->float var19 = 0.0;
  if (this->var24)
  {
    this->var22 = this->var20;
  }
  else
  {
    __n128 result = *((__n128 *)a2 + 21);
    this->var22 = ($94F468A8D4C62B317260615823C2B210)result.n128_u64[0];
  }
  return result;
}

void sub_20AE75144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void setSKPhysicsDefaults(PKPhysicsBody *a1)
{
  uint64_t v1 = a1;
  [(PKPhysicsBody *)v1 set_allowSleep:1];
  [(PKPhysicsBody *)v1 setCollisionBitMask:0xFFFFFFFFLL];
  [(PKPhysicsBody *)v1 setCategoryBitMask:0xFFFFFFFFLL];
}

void sub_20AE751B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE751FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE75254(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE752AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7530C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7536C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE753C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7541C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE75474(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE754CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE75540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE756D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__5(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{
}

void sub_20AE757D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE75864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE75900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE75964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE75C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20AE75D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE75E08(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20AE75EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE75F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20AE760E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE761DC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20AE762D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE763F4(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20AE76490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7656C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20AE7660C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE766E0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_20AE76778(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE769FC(_Unwind_Exception *a1)
{
  BOOL v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE76BE8(_Unwind_Exception *a1)
{
  BOOL v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE76D1C(_Unwind_Exception *a1)
{
  BOOL v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE76E28(_Unwind_Exception *a1)
{
  BOOL v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE76F94(_Unwind_Exception *a1)
{
  BOOL v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE77164(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0x10A1C406F2B08A1);
  _Unwind_Resume(a1);
}

void sub_20AE772D0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_20AE775B4(_Unwind_Exception *a1)
{
  BOOL v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE77810(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE77A98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE77BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE77CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE77D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE77DB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE781BC(_Unwind_Exception *a1)
{
  float v7 = v6;

  _Unwind_Resume(a1);
}

void sub_20AE78AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20AE78DA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE78F00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE78F9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE79020(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE791A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE79274(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE793D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE795FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,std::shared_ptr<jet_buffer_pool>>::~pair(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_20AE7982C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE79CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_20AE79E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7A070(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7A22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7A430(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7A6CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20AE7AA60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7ABB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7AE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20AE7B01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE7B0C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7B1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE7B31C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7B46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AE7B568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AE7B678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__6(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  return result;
}

void __Block_byref_object_dispose__6(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void sub_20AE7BBD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7C180(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }

  float32x4_t v34 = *(std::__shared_weak_count **)(a16 + 8);
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  _Unwind_Resume(a1);
}

std::string *jet_command_buffer::set_fragment_constant_value(uint64_t *a1, std::string *__str, double a3)
{
  int v9 = 23;
  unint64_t v6 = a1[2];
  if (v6 >= a1[3])
  {
    uint64_t v7 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v9);
  }
  else
  {
    *(void *)unint64_t v6 = &unk_26BEEC420;
    *(_DWORD *)(v6 + 8) = 23;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 64) = 0;
    uint64_t v7 = v6 + 192;
    *(void *)(v6 + 96) = 0;
  }
  a1[2] = v7;
  __n128 result = std::string::operator=((std::string *)(v7 - 176), __str);
  *(double *)(v7 - 64) = a3;
  return result;
}

std::string *jet_command_buffer::set_fragment_constant_value(uint64_t *a1, std::string *__str, double a3, double a4)
{
  int v11 = 26;
  unint64_t v8 = a1[2];
  if (v8 >= a1[3])
  {
    uint64_t v9 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v11);
  }
  else
  {
    *(void *)unint64_t v8 = &unk_26BEEC420;
    *(_DWORD *)(v8 + 8) = 26;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 64) = 0;
    uint64_t v9 = v8 + 192;
    *(void *)(v8 + 96) = 0;
  }
  a1[2] = v9;
  __n128 result = std::string::operator=((std::string *)(v9 - 176), __str);
  *(double *)(v9 - 64) = a3;
  *(double *)(v9 - 56) = a4;
  return result;
}

__n128 jet_command_buffer::set_fragment_constant_value(uint64_t *a1, std::string *__str, __n128 a3, __n128 a4, __n128 a5)
{
  int v13 = 27;
  unint64_t v7 = a1[2];
  if (v7 >= a1[3])
  {
    uint64_t v8 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v13);
  }
  else
  {
    *(void *)unint64_t v7 = &unk_26BEEC420;
    *(_DWORD *)(v7 + 8) = 27;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 32) = 0;
    *(void *)(v7 + 16) = 0;
    *(void *)(v7 + 64) = 0;
    uint64_t v8 = v7 + 192;
    *(void *)(v7 + 96) = 0;
  }
  a1[2] = v8;
  std::string::operator=((std::string *)(v8 - 176), __str);
  *(__n128 *)(v8 - 64) = a3;
  *(__n128 *)(v8 - 48) = a4;
  __n128 result = a5;
  *(__n128 *)(v8 - 32) = a5;
  return result;
}

__n128 jet_command_buffer::set_fragment_constant_value(uint64_t *a1, std::string *__str, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  int v15 = 28;
  unint64_t v8 = a1[2];
  if (v8 >= a1[3])
  {
    uint64_t v9 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v15);
  }
  else
  {
    *(void *)unint64_t v8 = &unk_26BEEC420;
    *(_DWORD *)(v8 + 8) = 28;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 64) = 0;
    uint64_t v9 = v8 + 192;
    *(void *)(v8 + 96) = 0;
  }
  a1[2] = v9;
  std::string::operator=((std::string *)(v9 - 176), __str);
  *(__n128 *)(v9 - 64) = a3;
  *(__n128 *)(v9 - 48) = a4;
  __n128 result = a6;
  *(__n128 *)(v9 - 32) = a5;
  *(__n128 *)(v9 - 16) = a6;
  return result;
}

void sub_20AE7CBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_20AE7CE5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7D33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_20AE7D64C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7D6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE7D7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE7DAE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7DCB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7DD9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7E028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<jet_buffer_pool>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

_OWORD *std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__emplace_unique_key_args<std::string,std::pair<std::string,std::shared_ptr<jet_buffer_pool>>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  id v5 = (void **)std::__tree<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    unint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = operator new(0x48uLL);
    v9[1] = a1 + 1;
    v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    char v10 = 1;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<jet_buffer_pool>>,void *>>>>::reset[abi:ne180100]((uint64_t)v9, 0);
  }
  return v6;
}

void std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20AE7E2EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_program *,std::shared_ptr<jet_program>::__shared_ptr_default_delete<jet_program,jet_program>,std::allocator<jet_program>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_program *,std::shared_ptr<jet_program>::__shared_ptr_default_delete<jet_program,jet_program>,std::allocator<jet_program>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_program *,std::shared_ptr<jet_program>::__shared_ptr_default_delete<jet_program,jet_program>,std::allocator<jet_program>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_20AE7E674(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7E83C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7E95C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE7EB88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE7EDF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  _Unwind_Resume(a1);
}

void SKCTransformNode::SKCTransformNode(SKCTransformNode *this)
{
  SKCNode::SKCNode(this);
  *(void *)uint64_t v1 = &unk_26BEEE980;
  *(unsigned char *)(v1 + 560) = 0;
  uint64_t v2 = MEMORY[0x263EF89A8];
  long long v3 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
  *(_OWORD *)(v1 + 576) = *MEMORY[0x263EF89A8];
  *(_OWORD *)(v1 + 592) = v3;
  long long v4 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v1 + 608) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v1 + 624) = v4;
  int32x4_t v5 = *(int32x4_t *)MEMORY[0x263EF89A0];
  int32x4_t v6 = *(int32x4_t *)(MEMORY[0x263EF89A0] + 16);
  long long v7 = *(_OWORD *)(MEMORY[0x263EF89A0] + 32);
  LODWORD(v8) = HIDWORD(*(void *)(MEMORY[0x263EF89A0] + 16));
  float v9 = COERCE_FLOAT(*(void *)(MEMORY[0x263EF89A0] + 40));
  float v10 = v9 + (float)(COERCE_FLOAT(*MEMORY[0x263EF89A0]) + v8);
  if (v10 >= 0.0)
  {
    float v21 = sqrtf(v10 + 1.0);
    float32_t v22 = v21 + v21;
    float32x2_t v23 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v21 + v21));
    float32x2_t v24 = vmul_f32(v23, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v21 + v21), v23));
    v24.i32[0] = vmul_f32(v24, vrecps_f32((float32x2_t)COERCE_UNSIGNED_INT(v21 + v21), v24)).u32[0];
    *(float32x2_t *)&long long v35 = vmul_n_f32(vsub_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL), *(int32x2_t *)&v7), (float32x2_t)vext_s8(*(int8x8_t *)&v7, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), 4uLL)), v24.f32[0]);
    v25.i32[0] = vsub_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v5.i8, 1), *(float32x2_t *)v6.i8).u32[0];
    v25.f32[1] = v22;
    v24.i32[1] = 0.25;
    float32x2_t v37 = vmul_f32(v25, v24);
  }
  else if (*(float *)v5.i32 < v8 || *(float *)v5.i32 < v9)
  {
    float v12 = 1.0 - *(float *)v5.i32;
    if (v8 >= v9)
    {
      float v38 = sqrtf(v8 + (float)(v12 - v9));
      *(float *)&unsigned int v39 = v38 + v38;
      float32x2_t v40 = vrecpe_f32((float32x2_t)v39);
      float32x2_t v41 = vmul_f32(v40, vrecps_f32((float32x2_t)v39, v40));
      v42.i32[0] = vmul_f32(v41, vrecps_f32((float32x2_t)v39, v41)).u32[0];
      v41.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(*(int32x2_t *)v5.i8, 1), *(float32x2_t *)v6.i8).u32[0];
      v41.i32[1] = v39;
      float32x2_t v43 = (float32x2_t)vrev64_s32(*(int32x2_t *)&v7);
      v44.i32[0] = vadd_f32(v43, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL)).u32[0];
      v44.i32[1] = vsub_f32(v43, (float32x2_t)vdup_laneq_s32(v5, 2)).i32[1];
      float32x2_t v37 = vmul_n_f32(v44, v42.f32[0]);
      v42.i32[1] = 0.25;
      *(float32x2_t *)&long long v35 = vmul_f32(v41, v42);
    }
    else
    {
      float v13 = sqrtf(v9 + (float)(v12 - v8));
      long long v14 = *MEMORY[0x263EF89A0];
      *(float *)&long long v14 = v13;
      float32x2_t v15 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v6, (int8x16_t)v6, 8uLL)), *(float32x2_t *)&v7);
      float32x2_t v16 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 0);
      float32x2_t v17 = vsub_f32(*(float32x2_t *)v5.i8, v16);
      v16.i32[0] = 2.0;
      v16.i32[0] = vmul_f32(*(float32x2_t *)&v14, v16).u32[0];
      v16.i32[1] = v17.i32[1];
      float32x2_t v18 = vrecpe_f32((float32x2_t)v16.u32[0]);
      float32x2_t v19 = vmul_f32(v18, vrecps_f32((float32x2_t)v16.u32[0], v18));
      v17.i32[0] = vmul_f32(v19, vrecps_f32((float32x2_t)v16.u32[0], v19)).u32[0];
      *(float32x2_t *)&long long v35 = vmul_n_f32(v15, v17.f32[0]);
      __asm { FMOV            V2.2S, #0.25 }
      _D2.i32[1] = v17.i32[0];
      float32x2_t v37 = vmul_f32(v16, _D2);
    }
  }
  else
  {
    float32x2_t v26 = (float32x2_t)__PAIR64__(v5.u32[1], COERCE_UNSIGNED_INT(sqrtf(*(float *)v5.i32 + (float)((float)(1.0 - v8) - v9))));
    float32x2_t v27 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 0);
    float32x2_t v28 = vadd_f32(*(float32x2_t *)v5.i8, v27);
    v27.i32[0] = 2.0;
    v27.i32[0] = vmul_f32(v26, v27).u32[0];
    v27.i32[1] = v28.i32[1];
    float32x2_t v29 = vrecpe_f32((float32x2_t)v27.u32[0]);
    float32x2_t v30 = vmul_f32(v29, vrecps_f32((float32x2_t)v27.u32[0], v29));
    v26.i32[0] = vmul_f32(v30, vrecps_f32((float32x2_t)v27.u32[0], v30)).u32[0];
    __asm { FMOV            V5.2S, #0.25 }
    _D5.i32[1] = v26.i32[0];
    *(float32x2_t *)&long long v35 = vmul_f32(v27, _D5);
    v36.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL), *(float32x2_t *)&v7).u32[0];
    v36.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(v6, 2), *(float32x2_t *)&v7).i32[1];
    float32x2_t v37 = vmul_n_f32(v36, v26.f32[0]);
  }
  *((float32x2_t *)&v35 + SKCNode::setFlags(this, 66, 1) = v37;
  *(_OWORD *)(v1 + 640) = v35;
}

void SKCTransformNode::~SKCTransformNode(id *this)
{
  SKCNode::~SKCNode(this);

  JUMPOUT(0x21052EA30);
}

void SKCTransformNode::setQuaternion(SKCNode *this, simd_quatf a2)
{
  *((simd_quatf *)this + 40) = a2;
  *((unsigned char *)this + 560) = 1;
  *((unsigned char *)this + 368) = 1;
  SKCNode::setDirty(this);
}

__n128 SKCTransformNode::getQuaternion(__n128 *this)
{
  return this[40];
}

__n128 SKCTransformNode::_getRotationMatrix(SKCTransformNode *this)
{
  if (*((unsigned char *)this + 560))
  {
    _Q4 = *((_OWORD *)this + 40);
    __n128 result = *(__n128 *)MEMORY[0x263EF89A8];
    long long v2 = *(_OWORD *)(MEMORY[0x263EF89A8] + 16);
    long long v3 = *(_OWORD *)(MEMORY[0x263EF89A8] + 32);
    long long v4 = *(_OWORD *)(MEMORY[0x263EF89A8] + 48);
    _S5 = COERCE_FLOAT(HIDWORD(*((void *)this + 80))) + COERCE_FLOAT(HIDWORD(*((void *)this + 80)));
    __asm { FMLS            S7, S5, V4.S[1] }
    _S16 = COERCE_FLOAT(*((void *)this + 81)) + COERCE_FLOAT(*((void *)this + 81));
    __asm { FMLS            S7, S16, V4.S[2] }
    result.n128_u32[0] = _S7;
    _S7 = *(float *)&_Q4 + *(float *)&_Q4;
    __asm { FMLA            S18, S7, V4.S[1] }
    result.n128_u32[1] = _S18;
    __asm { FMLA            S18, S7, V4.S[2] }
    result.n128_u32[2] = _S18;
    __asm { FMLA            S18, S7, V4.S[1] }
    LODWORD(v2) = _S18;
    __asm
    {
      FMLS            S6, S7, V4.S[0]
      FMLS            S18, S16, V4.S[2]
    }
    DWORD1(v2) = _S18;
    __asm { FMLA            S18, S5, V4.S[2] }
    DWORD2(v2) = _S18;
    __asm { FMLA            S17, S7, V4.S[3] }
    LODWORD(v3) = _S17;
    __asm { FMLA            S16, S5, V4.S[2] }
    DWORD1(v3) = _S16;
    __asm { FMLS            S6, S5, V4.S[1] }
    DWORD2(v3) = _S6;
    *((__n128 *)this + 36) = result;
    *((_OWORD *)this + 37) = v2;
    *((_OWORD *)this + 38) = v3;
    *((_OWORD *)this + 39) = v4;
    *((unsigned char *)this + 560) = 0;
  }
  else
  {
    return *((__n128 *)this + 36);
  }
  return result;
}

double SKCTransformNode::getTransformMatrix(__n128 *this, double a2, double a3, __n128 a4, __n128 a5, double a6, double a7, __n128 a8, __n128 a9)
{
  int v10 = this[23].n128_u8[0];
  *(double *)v11.i64 = SKCNode::getTransformMatrix(this, a2, a3, a4, a5, a6, a7, a8, a9);
  if (v10)
  {
    float32x4_t v26 = v12;
    float32x4_t v27 = v11;
    float32x4_t v24 = v14;
    float32x4_t v25 = v13;
    RotationMatriCGFloat x = SKCTransformNode::_getRotationMatrix((SKCTransformNode *)this);
    uint64_t v16 = 0;
    v28[0] = RotationMatrix;
    v28[1] = v17;
    int v28[2] = v18;
    v28[3] = v19;
    do
    {
      v29[v16] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(v28[v16])), v26, *(float32x2_t *)&v28[v16], 1), v25, (float32x4_t)v28[v16], 2), v24, (float32x4_t)v28[v16], 3);
      ++v16;
    }
    while (v16 != 4);
    v11.i64[0] = *(void *)&v29[0];
    __n128 v20 = (__n128)v29[1];
    __n128 v21 = (__n128)v29[2];
    __n128 v22 = (__n128)v29[3];
    this[24] = (__n128)v29[0];
    this[25] = v20;
    this[26] = v21;
    this[27] = v22;
  }
  return *(double *)v11.i64;
}

void SKCLabelNode::SKCLabelNode(SKCLabelNode *this)
{
  SKCNode::SKCNode(this);
  *(void *)uint64_t v2 = &unk_26BEEEA80;
  *(void *)(v2 + 560) = 0;
  *(_OWORD *)(v2 + 568) = 0u;
  *(void *)(v2 + 584) = @"HelveticaNeue-UltraLight";
  *(_DWORD *)(v2 + 592) = 1107296256;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v2 + 608) = _Q1;
  *(_OWORD *)(v2 + 624) = 0u;
  __asm { FMOV            V1.2S, #1.0 }
  *(void *)(v2 + 640) = _Q1;
  *(_OWORD *)(v2 + 648) = 0u;
  *(_DWORD *)(v2 + 664) = 1;
  *(void *)(v2 + 672) = 4;
  *(_DWORD *)(v2 + 680) = 0;
  *(void *)(v2 + 688) = 0;
  *(void *)(v2 + 704) = 0;
  *(void *)(v2 + 696) = 0;
  *(_WORD *)(v2 + 712) = 257;
  *(_OWORD *)(v2 + 720) = 0u;
  *(_OWORD *)(v2 + 736) = 0u;
  uint64_t v8 = objc_opt_new();
  float v9 = (void *)*((void *)this + 70);
  *((void *)this + 70) = v8;

  int v10 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  dispatch_queue_t v11 = dispatch_queue_create("com.apple.spritekit.labelSyncQueue", v10);
  float32x4_t v12 = (void *)*((void *)this + 93);
  *((void *)this + 93) = v11;
}

void sub_20AE7F348(_Unwind_Exception *a1)
{
  long long v3 = *(void **)(v1 + 720);
  if (v3)
  {
    *(void *)(v1 + 728) = v3;
    operator delete(v3);
  }

  SKCNode::~SKCNode((id *)v1);
  _Unwind_Resume(a1);
}

void SKCLabelNode::~SKCLabelNode(SKCLabelNode *this)
{
  *(void *)this = &unk_26BEEEA80;
  uint64_t v2 = (void *)*((void *)this + 90);
  long long v3 = (void *)*((void *)this + 91);
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 88))(*v2);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void *)*((void *)this + 90);
  }
  *((void *)this + 9SKCNode::setFlags(this, 66, 1) = v2;
  long long v4 = (const void *)*((void *)this + 86);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 86) = 0;
  }
  int32x4_t v5 = (void *)*((void *)this + 93);
  *((void *)this + 93) = 0;

  int32x4_t v6 = (void *)*((void *)this + 90);
  if (v6)
  {
    *((void *)this + 9SKCNode::setFlags(this, 66, 1) = v6;
    operator delete(v6);
  }

  SKCNode::~SKCNode((id *)this);
}

{
  uint64_t vars8;

  SKCLabelNode::~SKCLabelNode(this);

  JUMPOUT(0x21052EA30);
}

void SKCLabelNode::setFont(SKCLabelNode *this, CFTypeRef cf)
{
  long long v4 = (const void *)*((void *)this + 86);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 86) = 0;
  }
  if (cf)
  {
    CFRetain(cf);
    *((void *)this + 86) = cf;
  }
  *((_WORD *)this + 356) = 1;

  SKCNode::setDirty(this);
}

void SKCLabelNode::setText(SKCLabelNode *this, NSString *a2)
{
  int32x4_t v5 = a2;
  if (![(NSString *)v5 isEqualToString:*((void *)this + 71)])
  {
    uint64_t v3 = [(NSString *)v5 copy];
    long long v4 = (void *)*((void *)this + 71);
    *((void *)this + 7SKCNode::setFlags(this, 66, 1) = v3;

    *((unsigned char *)this + 712) = 1;
    SKCNode::setDirty(this);
  }
}

void sub_20AE7F5C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void SKCLabelNode::setNumberOfLines(SKCNode *this, int a2)
{
  int v2 = a2 & ~(a2 >> 31);
  if (v2 != *((_DWORD *)this + 166))
  {
    *((unsigned char *)this + 712) = 1;
    *((_DWORD *)this + 166) = v2;
    SKCNode::setDirty(this);
  }
}

void SKCLabelNode::setLineBreakNode(SKCNode *this, NSLineBreakMode a2)
{
  if (*((void *)this + 84) != a2)
  {
    *((void *)this + 84) = a2;
    SKCNode::setDirty(this);
  }
}

void SKCLabelNode::setPreferredMaxLayoutWidth(SKCNode *this, float a2)
{
  if (a2 < 0.0) {
    a2 = 0.0;
  }
  if (a2 != *((float *)this + 170))
  {
    *((float *)this + 170) = a2;
    SKCNode::setDirty(this);
  }
}

void SKCLabelNode::setAttributedString(SKCLabelNode *this, NSAttributedString *a2)
{
  int32x4_t v5 = a2;
  if (![(NSAttributedString *)v5 isEqualToAttributedString:*((void *)this + 72)])
  {
    uint64_t v3 = [(NSAttributedString *)v5 copy];
    long long v4 = (void *)*((void *)this + 72);
    *((void *)this + 72) = v3;

    *((unsigned char *)this + 712) = 1;
    SKCNode::setDirty(this);
  }
}

void sub_20AE7F6B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

char *SKCLabelNode::addRenderableChildren(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int32x4_t v6 = *(NSObject **)(a1 + 744);
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 3221225472;
  v10[2] = ___ZN12SKCLabelNode12rebuildLabelEP13SKCRenderInfo_block_invoke;
  uint64_t v10[3] = &__block_descriptor_48_e5_v8__0l;
  _OWORD v10[4] = a1;
  v10[5] = a2;
  dispatch_sync(v6, v10);
  long long v7 = *(uint64_t **)(a1 + 720);
  uint64_t v8 = *(uint64_t **)(a1 + 728);
  if (v7 != v8) {
    std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCSpriteNode **>,std::__wrap_iter<SKCSpriteNode **>>(a3, *(char **)(a3 + 8), v7, v8, v8 - v7);
  }
  return SKCNode::addRenderableChildren((char *)a1, a2, a3);
}

void SKCLabelNode::rebuildLabel(uint64_t a1, uint64_t a2)
{
  int v2 = *(NSObject **)(a1 + 744);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 3221225472;
  v3[2] = ___ZN12SKCLabelNode12rebuildLabelEP13SKCRenderInfo_block_invoke;
  v3[3] = &__block_descriptor_48_e5_v8__0l;
  v3[4] = a1;
  void v3[5] = a2;
  dispatch_sync(v2, v3);
}

double SKCLabelNode::getBoundingBox(__n128 *this)
{
  int v2 = this[46].n128_u64[1];
  block.columns[0].i64[0] = MEMORY[0x263EF8330];
  block.columns[0].i64[1] = 3221225472;
  block.columns[1].i64[0] = (uint64_t)___ZN12SKCLabelNode12rebuildLabelEP13SKCRenderInfo_block_invoke;
  block.columns[1].i64[1] = (uint64_t)&__block_descriptor_48_e5_v8__0l;
  block.columns[2] = (simd_float4)(unint64_t)this;
  dispatch_sync(v2, &block);
  uint64_t v3 = (uint64_t *)this[45].n128_u64[0];
  long long v4 = (uint64_t *)this[45].n128_u64[1];
  if (v3 == v4)
  {
    *(void *)&double result = SKCNode::getBoundingBox(this).n128_u64[0];
  }
  else
  {
    simd_float4x4 v19 = *(simd_float4x4 *)SKCBoundingBoxEmpty;
    do
    {
      uint64_t v5 = *v3++;
      *(double *)v6.i64 = (*(double (**)(uint64_t))(*(void *)v5 + 120))(v5);
      block.columns[0] = v6;
      block.columns[1] = v7;
      block.columns[2] = v8;
      block.columns[3] = v9;
      v19.columns[0] = (simd_float4)SKCBoundingBoxUnion(&v19, &block);
      v19.columns[1] = v10;
      v19.columns[2] = v11;
      v19.columns[3] = v12;
    }
    while (v3 != v4);
    (*(void (**)(__n128 *))(this->n128_u64[0] + 104))(this);
    uint64_t v17 = 0;
    simd_float4x4 v20 = v19;
    do
    {
      block.columns[v17] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v13, COERCE_FLOAT(*(_OWORD *)&v20.columns[v17])), v14, *(float32x2_t *)v20.columns[v17].f32, 1), v15, (float32x4_t)v20.columns[v17], 2), v16, (float32x4_t)v20.columns[v17], 3);
      ++v17;
    }
    while (v17 != 4);
    return *(double *)block.columns[0].i64;
  }
  return result;
}

float32x2_t SKCLabelNode::rebuildPixelSize(float32x2_t *a1)
{
  if (!*(void *)&a1[88])
  {
    float32x2_t v1 = vadd_f32(a1[80], (float32x2_t)0xC0000000C0000000);
    float32x2_t result = vmul_f32(v1, v1);
    result.f32[0] = sqrtf(vaddv_f32(result));
    if (result.f32[0] > 0.00000011921)
    {
      float32x2_t result = (float32x2_t)0x4000000040000000;
      a1[80] = (float32x2_t)0x4000000040000000;
      a1[89].i8[0] = 1;
    }
  }
  return result;
}

void SKCLabelNode::rebuildFont(SKCLabelNode *this)
{
  if (*((unsigned char *)this + 713))
  {
    *((unsigned char *)this + 712) = 1;
    uint64_t v2 = +[SKBitmapFont fontForFileNamed:*((void *)this + 73)];
    uint64_t v3 = (void *)*((void *)this + 88);
    *((void *)this + 88) = v2;

    if (*((void *)this + 88))
    {
      SKCLabelNode::setFont(this, 0);
    }
    else
    {
      long long v4 = CTFontDescriptorCreateWithNameAndSize(*((CFStringRef *)this + 73), *((float *)this + 148));
      MatchingFontDescriptor = CTFontDescriptorCreateMatchingFontDescriptor(v4, 0);
      if (MatchingFontDescriptor)
      {
        simd_float4 v6 = MatchingFontDescriptor;
        CTFontRef v7 = CTFontCreateWithFontDescriptor(MatchingFontDescriptor, *((float *)this + 148), 0);
        CFRelease(v6);
      }
      else
      {
        NSLog(&cfstr_SklabelnodeFon.isa, *((void *)this + 73));
        CTFontRef v7 = CTFontCreateWithFontDescriptor(v4, *((float *)this + 148), 0);
      }
      CFRelease(v4);
      SKCLabelNode::setFont(this, v7);
      if (v7)
      {
        CFRelease(v7);
      }
    }
  }
}

void SKCLabelNode::rebuildText(SKCLabelNode *this)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  if (*((unsigned char *)this + 712))
  {
    uint64_t v2 = (void **)((char *)this + 720);
    uint64_t v3 = (void *)*((void *)this + 90);
    long long v4 = (void *)*((void *)this + 91);
    if (v3 != v4)
    {
      do
      {
        if (*v3) {
          (*(void (**)(void))(*(void *)*v3 + 88))(*v3);
        }
        ++v3;
      }
      while (v3 != v4);
      uint64_t v3 = *v2;
    }
    *((void *)this + 9SKCNode::setFlags(this, 66, 1) = v3;
    [*((id *)this + 1) removeChildrenInArray:*((void *)this + 70)];
    [*((id *)this + 70) removeAllObjects];
    uint64_t v5 = (void *)*((void *)this + 87);
    if (v5)
    {
      *((void *)this + 87) = 0;
    }
    simd_float4 v6 = (void *)*((void *)this + 71);
    if (v6 || *((void *)this + 72))
    {
      if (*((void *)this + 88))
      {
        uint64_t v7 = [v6 length];
        CGFloat width = 0.0;
        if (v7)
        {
          uint64_t v9 = v7;
          uint64_t v10 = 0;
          unsigned __int16 v11 = 0;
          simd_float4 v12 = 0;
          CGFloat x = 0.0;
          double y = 0.0;
          double height = 0.0;
          double v16 = 0.0;
          double v17 = 0.0;
          do
          {
            uint64_t v18 = [*((id *)this + 71) characterAtIndex:v10];
            simd_float4x4 v19 = [*((id *)this + 88) spriteForCharacterNamed:v18];

            if (v19)
            {
              [*((id *)this + 88) kerningForCharacterNamed:v11 followedBy:v18];
              double v21 = v20;
              [v19 position];
              double v22 = v16 + v21;
              [v19 setPosition:v22];
              [v19 setZPosition:0.0];
              float32x2_t v23 = [MEMORY[0x263F1C550] colorWithRed:*((float *)this + 76) green:*((float *)this + 77) blue:*((float *)this + 78) alpha:*((float *)this + 79)];
              [v19 setColor:v23];

              [v19 setColorBlendFactor:*((float *)this + 80)];
              [*((id *)this + 1) addChild:v19];
              [*((id *)this + 70) addObject:v19];
              [*((id *)this + 88) advanceForCharacterNamed:v18];
              double v25 = v24;
              if (!v10)
              {
                [v19 size];
                double v17 = fmax(v25 - v26, 0.0);
              }
              [v19 frame];
              v117.origin.CGFloat x = v27;
              v117.origin.double y = v28;
              v117.size.CGFloat width = v29;
              v117.size.double height = v30;
              v108.origin.CGFloat x = x;
              v108.origin.double y = y;
              v108.size.CGFloat width = width;
              v108.size.double height = height;
              CGRect v109 = CGRectUnion(v108, v117);
              CGFloat x = v109.origin.x;
              double y = v109.origin.y;
              CGFloat width = v109.size.width;
              double height = v109.size.height;
              double v16 = v22 + v25;
              unsigned __int16 v11 = v18;
            }
            ++v10;
            simd_float4 v12 = v19;
          }
          while (v9 != v10);
          if (v19)
          {
            [v19 calculateAccumulatedFrame];
            double v16 = fmax(v16, CGRectGetMaxX(v110));
          }
        }
        else
        {
          simd_float4x4 v19 = 0;
          double y = 0.0;
          double height = 0.0;
          double v17 = 0.0;
          double v16 = 0.0;
        }
        uint64_t v77 = *((void *)this + 81);
        double v78 = 1.0;
        if (v77 != 2) {
          double v78 = 0.0;
        }
        if (v77) {
          double v79 = v78;
        }
        else {
          double v79 = 0.5;
        }
        uint64_t v80 = *((void *)this + 82);
        if (v80 == 3)
        {
          double v82 = -y;
        }
        else
        {
          double v81 = -(y - height * -0.5);
          if (v80 != 1) {
            double v81 = 0.0;
          }
          if (v80 == 2) {
            double v82 = -y - height;
          }
          else {
            double v82 = v81;
          }
        }
        long long v95 = 0u;
        long long v96 = 0u;
        long long v93 = 0u;
        long long v94 = 0u;
        id v83 = *((id *)this + 70);
        uint64_t v84 = [v83 countByEnumeratingWithState:&v93 objects:v102 count:16];
        if (v84)
        {
          uint64_t v85 = *(void *)v94;
          do
          {
            for (uint64_t i = 0; i != v84; ++i)
            {
              if (*(void *)v94 != v85) {
                objc_enumerationMutation(v83);
              }
              simd_float4x4 v87 = *(void **)(*((void *)&v93 + 1) + 8 * i);
              [v87 position];
              double v89 = v88;
              [v87 position];
              objc_msgSend(v87, "setPosition:", v89 + -(v17 + v16) * v79, v82 + v90);
            }
            uint64_t v84 = [v83 countByEnumeratingWithState:&v93 objects:v102 count:16];
          }
          while (v84);
        }
      }
      else
      {
        CFAttributedStringRef v31 = (const __CFAttributedString *)*((id *)this + 72);
        if (!v31)
        {
          DeviceRGB = CGColorSpaceCreateDeviceRGB();
          float32x4_t v33 = *((float32x4_t *)this + 38);
          *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)v33.f32);
          float64x2_t v101 = vcvt_hight_f64_f32(v33);
          CGColorRef v34 = CGColorCreate(DeviceRGB, components);
          CFRelease(DeviceRGB);
          uint64_t v35 = *MEMORY[0x263F03C60];
          keys = (void *)*MEMORY[0x263F039A0];
          uint64_t v99 = v35;
          values[0] = *((void **)this + 86);
          values[1] = v34;
          CFDictionaryRef v36 = CFDictionaryCreate(0, (const void **)&keys, (const void **)values, 2, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
          CFAttributedStringRef v31 = CFAttributedStringCreate(0, *((CFStringRef *)this + 71), v36);
          CFRelease(v36);
          CFRelease(v34);
        }
        int v37 = *((_DWORD *)this + 166);
        if (v37 && v37 < 2)
        {
          float v38 = CTTypesetterCreateWithAttributedString(v31);
          v104.location = 0;
          v104.length = 0;
          Line = CTTypesetterCreateLine(v38, v104);
          CFRelease(v38);
          CGRect BoundsWithOptions = CTLineGetBoundsWithOptions(Line, 8uLL);
          CGRect v112 = CGRectIntegral(BoundsWithOptions);
          double v40 = v112.origin.x;
          double v41 = v112.origin.y;
          double v42 = v112.size.width;
          double v43 = v112.size.height;
          Frame = 0;
        }
        else
        {
          int16x8_t v45 = CTFramesetterCreateWithAttributedString(v31);
          int16x8_t v46 = v45;
          float v47 = *((float *)this + 170);
          double v48 = v47;
          BOOL v49 = v47 == 0.0;
          uint64_t v50 = 0x7FEFFFFFFFFFFFFFLL;
          if (v49) {
            double v51 = 1.79769313e308;
          }
          else {
            double v51 = v48;
          }
          v105.location = 0;
          v105.length = 0;
          uint64_t v52 = 0x7FEFFFFFFFFFFFFFLL;
          double v53 = CTFramesetterSuggestFrameSizeWithConstraints(v45, v105, 0, *(CGSize *)&v50, 0).height;
          int v54 = *((_DWORD *)this + 166);
          double v55 = v53 * (double)(v54 + 1);
          double v56 = 1.79769313e308;
          if (v54) {
            double v56 = v55;
          }
          v106.location = 0;
          v106.length = 0;
          double v57 = v51;
          CGSize v58 = CTFramesetterSuggestFrameSizeWithConstraints(v46, v106, 0, *(CGSize *)(&v56 - 1), 0);
          v113.size.CGFloat width = v58.width;
          v113.size.double height = v58.height;
          v113.origin.CGFloat x = 0.0;
          v113.origin.double y = 0.0;
          CGRect v114 = CGRectIntegral(v113);
          double v40 = v114.origin.x;
          double v41 = v114.origin.y;
          double v42 = v114.size.width;
          double v43 = v114.size.height;
          float32x4_t v59 = CGPathCreateWithRect(v114, 0);
          v107.location = 0;
          v107.length = 0;
          Frame = CTFramesetterCreateFrame(v46, v107, v59, 0);
          CGPathRelease(v59);
          CFRelease(v46);
          Line = 0;
        }
        CFRelease(v31);
        keys = 0;
        uint64_t v99 = 0;
        char v60 = [*((id *)this + 72) attribute:*MEMORY[0x263F1C2A8] atIndex:0 effectiveRange:&keys];
        [v60 floatValue];
        double v62 = fabsf(v61);
        BOOL v63 = v61 < 0.0;
        BOOL v64 = v61 <= 0.0;
        double v65 = 1.0;
        if (v63) {
          double v65 = v62;
        }
        if (v64) {
          double v66 = v65;
        }
        else {
          double v66 = v62;
        }
        double v67 = ceil(v42) + v66 * 2.0;
        if (v67 > 0.0)
        {
          double v68 = ceil(v43) + v66 * 2.0;
          if (v68 > 0.0)
          {
            double v69 = v67 * COERCE_FLOAT(*((void *)this + 80));
            double v70 = v68 * COERCE_FLOAT(HIDWORD(*((void *)this + 80)));
            float v71 = malloc_type_malloc(4 * (unint64_t)v70 * (unint64_t)v69, 0x100004077774924uLL);
            float v72 = CGColorSpaceCreateDeviceRGB();
            CGPoint v73 = CGBitmapContextCreate(v71, (unint64_t)v69, (unint64_t)v70, 8uLL, 4 * (unint64_t)v69, v72, 0x4001u);
            CGContextSetRenderingIntent(v73, kCGRenderingIntentPerceptual);
            CGContextSetAllowsAntialiasing(v73, 1);
            CGContextSetShouldAntialias(v73, 1);
            CGContextSetInterpolationQuality(v73, kCGInterpolationHigh);
            CGContextSetAllowsFontSmoothing(v73, 1);
            CGContextSetShouldSmoothFonts(v73, 1);
            CGContextSetAllowsFontSubpixelPositioning(v73, 1);
            CGContextSetShouldSubpixelPositionFonts(v73, 1);
            CGContextSetAllowsFontSubpixelQuantization(v73, 1);
            CGContextSetShouldSubpixelQuantizeFonts(v73, 1);
            CGColorSpaceRelease(v72);
            v115.origin.CGFloat x = 0.0;
            v115.origin.double y = 0.0;
            v115.size.CGFloat width = v69;
            v115.size.double height = v70;
            CGContextClearRect(v73, v115);
            if (*((float *)this + 159) > 0.0)
            {
              uint64_t v74 = CGColorSpaceCreateDeviceRGB();
              float32x4_t v75 = *((float32x4_t *)this + 39);
              *(float64x2_t *)components = vcvtq_f64_f32(*(float32x2_t *)v75.f32);
              float64x2_t v101 = vcvt_hight_f64_f32(v75);
              uint64_t v76 = CGColorCreate(v74, components);
              CGContextSetFillColorWithColor(v73, v76);
              v116.origin.CGFloat x = 0.0;
              v116.origin.double y = 0.0;
              v116.size.CGFloat width = v69;
              v116.size.double height = v70;
              CGContextFillRect(v73, v116);
              CGColorRelease(v76);
              CGColorSpaceRelease(v74);
            }
            CGContextScaleCTM(v73, COERCE_FLOAT(*((void *)this + 80)), (float)-COERCE_FLOAT(HIDWORD(*((void *)this + 80))));
            CGContextTranslateCTM(v73, 0.0, -v68);
            CGContextTranslateCTM(v73, v66 - v40, v66 - v41);
            if (Line)
            {
              CTLineDraw(Line, v73);
            }
            else if (Frame)
            {
              CTFrameDraw(Frame, v73);
            }
            uint64_t v91 = +[SKTexture _textureByTransferingData:size:](SKTexture, "_textureByTransferingData:size:", v71, v69, v70);
            float32x4_t v92 = (void *)*((void *)this + 87);
            *((void *)this + 87) = v91;

            CGContextRelease(v73);
            operator new();
          }
        }
        if (Line) {
          CFRelease(Line);
        }
        if (Frame) {
          CFRelease(Frame);
        }
      }
      *((unsigned char *)this + 712) = 0;
    }
  }
}

void sub_20AE80568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void ___ZN12SKCLabelNode12rebuildLabelEP13SKCRenderInfo_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(float32x2_t **)(a1 + 32);
  SKCLabelNode::rebuildFont((SKCLabelNode *)v2);
  if (*(void *)(a1 + 40))
  {
    if (!*(void *)&v2[88])
    {
      float32x2_t v3 = vadd_f32(v2[80], (float32x2_t)0xC0000000C0000000);
      if (sqrtf(vaddv_f32(vmul_f32(v3, v3))) > 0.00000011921)
      {
        v2[80] = (float32x2_t)0x4000000040000000;
        v2[89].i8[0] = 1;
      }
    }
  }

  SKCLabelNode::rebuildText((SKCLabelNode *)v2);
}

void SKCLabelNode::setColor(SKCNode *a1, _OWORD *a2)
{
  SKCNode::setColor(a1, a2);
  *((unsigned char *)a1 + 712) = 1;

  SKCNode::setDirty(a1);
}

void SKCLabelNode::setColorBlendFactor(SKCLabelNode *this, float *a2)
{
  SKCNode::setColorBlendFactor(this, a2);
  *((unsigned char *)this + 712) = 1;

  SKCNode::setDirty(this);
}

char *std::vector<SKCNode *>::__insert_with_size[abi:ne180100]<std::__wrap_iter<SKCSpriteNode **>,std::__wrap_iter<SKCSpriteNode **>>(uint64_t a1, char *__src, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v5 = __src;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v7 = a3;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 3)
  {
    float32x4_t v13 = *(unsigned char **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 3);
    if (v14 >> 61) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v15 = (__src - v13) >> 3;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v14) {
      unint64_t v14 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v40 = v9;
    if (v17) {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    CFAttributedStringRef v31 = &v18[8 * v15];
    std::string __p = v18;
    int v37 = v31;
    unsigned int v39 = &v18[8 * v17];
    uint64_t v32 = 8 * a5;
    float32x4_t v33 = &v31[8 * a5];
    do
    {
      uint64_t v34 = *v7++;
      *(void *)CFAttributedStringRef v31 = v34;
      v31 += 8;
      v32 -= 8;
    }
    while (v32);
    float v38 = v33;
    uint64_t v5 = std::vector<SKCNode *>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v38 != v37) {
      v38 += (v37 - v38 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = (uint64_t)(v12 - (void)__src) >> 3;
  if (v19 >= a5)
  {
    double v20 = &a3[a5];
    double v21 = *(char **)(v9 - 8);
LABEL_18:
    double v25 = &__src[8 * a5];
    double v26 = &v21[-8 * a5];
    CGFloat v27 = v21;
    if ((unint64_t)v26 < v12)
    {
      CGFloat v27 = v21;
      do
      {
        uint64_t v28 = *(void *)v26;
        v26 += 8;
        *(void *)CGFloat v27 = v28;
        v27 += 8;
      }
      while ((unint64_t)v26 < v12);
    }
    *(void *)(a1 + 8) = v27;
    if (v21 != v25) {
      memmove(&v21[-8 * ((v21 - v25) >> 3)], __src, v21 - v25);
    }
    if (v20 != v7)
    {
      CGFloat v29 = v5;
      do
      {
        uint64_t v30 = *v7++;
        *(void *)CGFloat v29 = v30;
        v29 += 8;
      }
      while (v7 != v20);
    }
    return v5;
  }
  double v20 = &a3[v19];
  double v21 = *(char **)(v9 - 8);
  if (v20 != a4)
  {
    double v22 = v20;
    float32x2_t v23 = *(void **)(v9 - 8);
    do
    {
      uint64_t v24 = *v22++;
      *v23++ = v24;
      v21 += 8;
    }
    while (v22 != a4);
  }
  *(void *)(a1 + 8) = v21;
  if ((uint64_t)(v12 - (void)__src) >= 1) {
    goto LABEL_18;
  }
  return v5;
}

void sub_20AE80914(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SKCRendererEnsureBufferPoolCapacity(uint64_t a1, int a2, int a3)
{
  unsigned int v4 = *(_DWORD *)(*(void *)a1 + 16);
  unsigned int v5 = a3 + a2;
  if (v5 >= v4)
  {
    if (v5 > 0xAAA8) {
      return 0;
    }
    kdebug_trace();
    (***(void (****)(void))a1)();
  }
  return 1;
}

uint64_t SKCRendererEnsureBufferCapacity(void *a1, int a2, int a3)
{
  unsigned int v4 = *(_DWORD *)(*a1 + 48);
  unsigned int v5 = a3 + a2;
  if (v5 >= v4)
  {
    if (v5 > 0xAAA8) {
      return 0;
    }
    double v8 = (double)v5 * 1.5;
    if (v8 < (double)(2 * v4)) {
      double v8 = (double)(2 * v4);
    }
    if (v8 > 43688.0) {
      double v8 = 43688.0;
    }
    uint64_t v9 = (int)v8;
    kdebug_trace();
    (*(void (**)(void, uint64_t))(*(void *)*a1 + 32))(*a1, v9);
  }
  return 1;
}

void SKCRendererSetup(void)
{
  if (SKCRendererSetup(void)::onceToken != -1) {
    dispatch_once(&SKCRendererSetup(void)::onceToken, &__block_literal_global_13);
  }
}

void ___Z16SKCRendererSetupv_block_invoke()
{
  v3[2] = *MEMORY[0x263EF8340];
  jet_setClientLabel(&cfstr_ComAppleSprite_9.isa);
  dispatch_queue_t v0 = dispatch_queue_create("SKCRenderer_resource_queue", 0);
  float32x2_t v1 = (void *)SKCRenderer_resource_queue;
  SKCRenderer_resource_queue = (uint64_t)v0;

  if (SKGetShouldEnableMetal())
  {
    SKGetGlobalMetalDevice();
    if (objc_claimAutoreleasedReturnValue()) {
      operator new();
    }
    uint64_t Context = jet_createContext();
    std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context,void>(v3, Context);
  }
  SKEnsureGlobalGLShareContext();
  operator new();
}

void sub_20AE80E04(_Unwind_Exception *a1)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void SKCPerformResourceOperation(void *a1)
{
  id v1 = a1;
  if (SKCRendererSetup(void)::onceToken != -1) {
    dispatch_once(&SKCRendererSetup(void)::onceToken, &__block_literal_global_13);
  }
  uint64_t v2 = SKCRenderer_resource_queue;
  if (SKCRenderer_resource_queue)
  {
    block[0] = MEMORY[0x263EF8330];
    block[1] = 3221225472;
    block[2] = ___Z27SKCPerformResourceOperationU13block_pointerFvNSt3__110shared_ptrI11jet_contextEEE_block_invoke;
    block[3] = &unk_263FEA238;
    id v4 = v1;
    dispatch_sync(v2, block);
  }
}

void ___Z27SKCPerformResourceOperationU13block_pointerFvNSt3__110shared_ptrI11jet_contextEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = SKCRendererGlobals::GetInstance(void)::instance;
  float32x2_t v3 = (std::__shared_weak_count *)qword_267684038;
  if (qword_267684038) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_267684038 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(v1 + 16))(v1, &v2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_20AE80FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SKCPerformResourceOperationAsync(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  if (SKCRendererSetup(void)::onceToken != -1) {
    dispatch_once(&SKCRendererSetup(void)::onceToken, &__block_literal_global_13);
  }
  unsigned int v5 = SKCRenderer_resource_queue;
  if (SKCRenderer_resource_queue)
  {
    v6[0] = MEMORY[0x263EF8330];
    v6[1] = 3221225472;
    v6[2] = ___Z32SKCPerformResourceOperationAsyncU13block_pointerFvNSt3__110shared_ptrI11jet_contextEEEU13block_pointerFvvE_block_invoke;
    void v6[3] = &unk_263FEA748;
    id v7 = v3;
    id v8 = v4;
    dispatch_async(v5, v6);
  }
}

uint64_t ___Z32SKCPerformResourceOperationAsyncU13block_pointerFvNSt3__110shared_ptrI11jet_contextEEEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = SKCRendererGlobals::GetInstance(void)::instance;
  unsigned int v5 = (std::__shared_weak_count *)qword_267684038;
  if (qword_267684038) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_267684038 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(v2 + 16))(v2, &v4);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(result + 16))(result);
  }
  return result;
}

void sub_20AE8116C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void SKCRenderer::loadShaders(SKCRenderer *this)
{
  if ((*(unsigned int (**)(void))(**((void **)this + 126) + 136))(*((void *)this + 126)) == 1) {
    SKEnsureGlobalMetalLibrary();
  }
  uint64_t v2 = *((void *)this + 126);
  id v3 = (std::__shared_weak_count *)*((void *)this + 127);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 136))(v2) == 1)
  {
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v4 = SKGetGlobalMetalLibrary();
    unsigned int v5 = (void *)[v4 newFunctionWithName:@"WhiteShader_VertexFunc"];

    simd_float4 v6 = SKGetGlobalMetalLibrary();
    id v7 = (void *)[v6 newFunctionWithName:@"WhiteShader_FragFunc"];

    uint64_t v8 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 424))(v2, v5);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, void *))(*(void *)v2 + 424))(v2, v7);

    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
  }
  else
  {
    uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, void))(*(void *)v2 + 72))(v2, [(__CFString *)WhiteShader_vsh[0] UTF8String], "main", 1, 0);
    uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, const char *, uint64_t, void))(*(void *)v2 + 72))(v2, [(__CFString *)WhiteShader_fsh[0] UTF8String], "main", 2, 0);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 80))(v2, v8, v9);
  std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(&v11, v10);
}

void sub_20AE83388(_Unwind_Exception *a1)
{
  if (v1)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(a1);
}

void SKCRenderer::SKCRenderer(uint64_t a1, void *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 56) = a1 + 56;
  *(void *)(a1 + 64) = a1 + 56;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 664) = 0;
  *(_DWORD *)(a1 + 668) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(void *)(a1 + 672) = 0x100000003;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 724) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  SKCStats::SKCStats((SKCStats *)(a1 + 808));
  *(void *)(a1 + 984) = 0;
  *(_WORD *)(a1 + 1000) = 0;
  *(unsigned char *)(a1 + 1002) = 0;
  *(void *)(a1 + 1008) = *a2;
  uint64_t v4 = a2[1];
  *(void *)(a1 + 1016) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 1048) = 0u;
  *(_OWORD *)(a1 + 1024) = 0u;
  *(void *)(a1 + 1040) = a1 + 1048;
  *(void *)(a1 + 1072) = 0;
  *(_OWORD *)(a1 + 1080) = 0u;
  *(void *)(a1 + 1064) = a1 + 1072;
  *(_OWORD *)(a1 + 1096) = 0u;
  *(_OWORD *)(a1 + 1120) = 0u;
  *(void *)(a1 + 1112) = a1 + 1120;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(void *)(a1 + 1176) = a1 + 1176;
  *(void *)(a1 + 1184) = a1 + 1176;
  *(void *)(a1 + 1192) = 0;
  *(void *)(a1 + 1200) = a1 + 1200;
  *(void *)(a1 + 1208) = a1 + 1200;
  *(_OWORD *)(a1 + 1216) = 0u;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1248) = 0u;
  *(_OWORD *)(a1 + 1264) = 0u;
  dispatch_semaphore_t v5 = dispatch_semaphore_create(1);
  simd_float4 v6 = *(void **)a1;
  *(void *)a1 = v5;

  *(void *)(a1 + 1224) = *(void *)(a1 + 1208);
  if (SKCRendererSetup(void)::onceToken != -1) {
    dispatch_once(&SKCRendererSetup(void)::onceToken, &__block_literal_global_13);
  }
  if (*(void *)(a1 + 1008)) {
    operator new();
  }
  Shareduint64_t Context = jet_createSharedContext();
  std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context,void>(&v8, SharedContext);
}

void sub_20AE83EE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v28 = *(std::__shared_weak_count **)(v20 + 1264);
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  a19 = v20 + 1232;
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  std::__list_imp<SKCRenderSortInfo *>::clear(v27);
  std::__list_imp<SKCRenderSortInfo *>::clear(v26);
  std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::destroy(v20 + 1112, *v25);
  CGFloat v29 = *v24;
  if (*v24)
  {
    *(void *)(v20 + 1096) = v29;
    operator delete(v29);
  }
  std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::destroy(a11, *(void **)(v20 + 1072));
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(a12, *(void **)(v20 + 1048));
  uint64_t v30 = *(std::__shared_weak_count **)(v20 + 1032);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  CFAttributedStringRef v31 = *(std::__shared_weak_count **)(v20 + 1016);
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }

  SKCStats::~SKCStats(v23);
  SKCRenderInfo::~SKCRenderInfo(v22);
  std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(v21);
  uint64_t v32 = *(std::__shared_weak_count **)(v20 + 48);
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  float32x4_t v33 = *(std::__shared_weak_count **)(v20 + 24);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }

  _Unwind_Resume(a1);
}

uint64_t SKCRenderer::commitBuffers(std::__shared_weak_count **this)
{
  uint64_t result = SKCRenderer::flushRenderOps(this);
  *((_DWORD *)this + 8) = 0;
  *((_DWORD *)this + 20) = 0;
  return result;
}

uint64_t SKCRenderer::flushRenderOps(std::__shared_weak_count **this)
{
  SKCRenderer::flushCurrentBatch((SKCRenderer *)this);
  uint64_t v2 = this[51];
  int v3 = LODWORD(v2[1].__shared_weak_owners_) - 1;
  if (v3 > 7) {
    int v4 = 4;
  }
  else {
    int v4 = dword_20AE9CE70[v3];
  }
  ((void (*)(std::__shared_weak_count *, void, void))v2->__get_deleter)(v2, (v4 * *((_DWORD *)this + 20) * HIDWORD(v2[1].__shared_weak_owners_)), 0);
  dispatch_semaphore_t v5 = this[53];
  int v6 = LODWORD(v5[1].__shared_weak_owners_) - 1;
  if (v6 > 7) {
    int v7 = 4;
  }
  else {
    int v7 = dword_20AE9CE70[v6];
  }
  ((void (*)(std::__shared_weak_count *, void, void))v5->__get_deleter)(v5, (v7 * *((_DWORD *)this + 20) * HIDWORD(v5[1].__shared_weak_owners_)), 0);
  long long v8 = this[52];
  int v9 = LODWORD(v8[1].__shared_weak_owners_) - 1;
  if (v9 > 7) {
    int v10 = 4;
  }
  else {
    int v10 = dword_20AE9CE70[v9];
  }
  uint64_t result = ((uint64_t (*)(std::__shared_weak_count *, void, void))v8->__get_deleter)(v8, (v10 * *((_DWORD *)this + 20) * HIDWORD(v8[1].__shared_weak_owners_)), 0);
  unint64_t v12 = this[5]->__shared_weak_owners_ - this[5]->__shared_owners_;
  if (v12)
  {
    LODWORD(this[93][6].__vftable) -= 1431655765 * (v12 >> 6);
    ((void (*)(long long *__return_ptr))this[126]->~__shared_weak_count)(&v15);
    long long v13 = v15;
    long long v15 = 0uLL;
    unint64_t v14 = this[129];
    *((_OWORD *)this + 64) = v13;
    if (v14)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      if (*((void *)&v15 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    operator new();
  }
  this[51] = 0;
  this[52] = 0;
  this[53] = 0;
  return result;
}

void sub_20AE842B0(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v1, 0xA1C4030951706);
  _Unwind_Resume(a1);
}

uint64_t SKCRenderer::ensureBuffers(uint64_t this)
{
  uint64_t v1 = this;
  if (!*(void *)(this + 408))
  {
    uint64_t buffer = jet_buffer_pool::next_buffer(*(jet_buffer_pool **)(this + 432));
    *(void *)(v1 + 408) = buffer;
    this = (*(uint64_t (**)(uint64_t))(*(void *)buffer + 16))(buffer);
    *(void *)(v1 + 104) = this;
  }
  if (!*(void *)(v1 + 416))
  {
    uint64_t v3 = jet_buffer_pool::next_buffer(*(jet_buffer_pool **)(v1 + 448));
    *(void *)(v1 + 416) = v3;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    *(void *)(v1 + 88) = this;
  }
  if (!*(void *)(v1 + 424))
  {
    uint64_t v4 = jet_buffer_pool::next_buffer(*(jet_buffer_pool **)(v1 + 464));
    *(void *)(v1 + 424) = v4;
    this = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
    *(void *)(v1 + 96) = this;
  }
  return this;
}

void SKCRenderer::flushCurrentBatch(SKCRenderer *this)
{
  if (*((int *)this + 167) < 1) {
    goto LABEL_62;
  }
  uint64_t v2 = (void *)*((void *)this + 85);
  if (v2)
  {
    [v2 _backingProgram];
    CGSize size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    std::string::size_type v4 = __p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__r.__words[0]) {
      *((void *)this + 86) = __p.__r_.__value_.__r.__words[0];
    }
  }
  else
  {
    unsigned int v5 = *((_DWORD *)this + 183);
    if (v5 && SKCRenderer::requireLighting(this, v5))
    {
      command_uint64_t buffer = jet_context::create_command_buffer(*((jet_context **)this + 126));
      std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(&__p, command_buffer);
    }
    std::string::size_type v4 = 0;
    CGSize size = 0;
  }
  uint64_t v7 = *((void *)this + 86);
  if (*((unsigned char *)this + 656) && v7 == *((void *)this + 31))
  {
    unint64_t v12 = (uint64_t *)*((void *)this + 5);
    uint64_t v7 = *((void *)this + 33);
    LODWORD(__p.__r_.__value_.__l.__data_) = 31;
    unint64_t v13 = v12[2];
    if (v13 >= v12[3])
    {
      uint64_t v11 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v12 + 1, (int *)&__p);
    }
    else
    {
      *(void *)unint64_t v13 = &unk_26BEEC420;
      *(_DWORD *)(v13 + 8) = 31;
      *(void *)(v13 + 24) = 0;
      *(void *)(v13 + 32) = 0;
      *(void *)(v13 + 16) = 0;
      *(void *)(v13 + 64) = 0;
      uint64_t v11 = v13 + 192;
      *(void *)(v13 + 96) = 0;
    }
    v12[2] = v11;
    int v9 = 1;
  }
  else
  {
    long long v8 = (uint64_t *)*((void *)this + 5);
    int v9 = *((_DWORD *)this + 169);
    LODWORD(__p.__r_.__value_.__l.__data_) = 31;
    unint64_t v10 = v8[2];
    if (v10 >= v8[3])
    {
      uint64_t v11 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v8 + 1, (int *)&__p);
    }
    else
    {
      *(void *)unint64_t v10 = &unk_26BEEC420;
      *(_DWORD *)(v10 + 8) = 31;
      *(void *)(v10 + 24) = 0;
      *(void *)(v10 + 32) = 0;
      *(void *)(v10 + 16) = 0;
      *(void *)(v10 + 64) = 0;
      uint64_t v11 = v10 + 192;
      *(void *)(v10 + 96) = 0;
    }
    v8[2] = v11;
  }
  *(void *)(v11 - 80) = v7;
  *(_DWORD *)(v11 - 64) = v9;
  *(_OWORD *)(v11 - 60) = xmmword_20AE9B300;
  *(_DWORD *)(v11 - 44) = 3;
  unint64_t v14 = (uint64_t *)*((void *)this + 5);
  if (*((void *)this + 87))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
    jet_command_buffer::set_fragment_texture(v14, &__p, *((void *)this + 87));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    long long v15 = (uint64_t *)*((void *)this + 5);
    if (*((void *)this + 89))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
      jet_command_buffer::set_fragment_sampler(v15, &__p, *((void *)this + 89));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
      jet_command_buffer::set_fragment_sampler(v15, &__p, *((void *)this + 70));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
    jet_command_buffer::set_fragment_texture(v14, &__p, qword_267684040);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v16 = (uint64_t *)*((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture");
    jet_command_buffer::set_fragment_sampler(v16, &__p, *((void *)this + 70));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (*((void *)this + 88))
  {
    unint64_t v17 = (uint64_t *)*((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture2");
    jet_command_buffer::set_fragment_texture(v17, &__p, *((void *)this + 88));
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v18 = (uint64_t *)*((void *)this + 5);
    if (*((void *)this + 90))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture2");
      jet_command_buffer::set_fragment_sampler(v18, &__p, *((void *)this + 90));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "u_texture2");
      jet_command_buffer::set_fragment_sampler(v18, &__p, *((void *)this + 70));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v19 = (uint64_t *)*((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
  jet_command_buffer::set_vertex_buffer(v19, &__p, *((void *)this + 51));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v20 = (uint64_t *)*((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(&__p, "a_color");
  jet_command_buffer::set_vertex_buffer(v20, &__p, *((void *)this + 52));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  double v21 = (uint64_t *)*((void *)this + 5);
  std::string::basic_string[abi:ne180100]<0>(&__p, "a_tex_coord");
  jet_command_buffer::set_vertex_buffer(v21, &__p, *((void *)this + 53));
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v4) {
      goto LABEL_54;
    }
LABEL_46:
    double v22 = (jet_command_buffer *)*((void *)this + 5);
    float32x2_t v23 = (void *)*((void *)this + 85);
    if (v23)
    {
      [v23 _commandsForBatchOffset:*((unsigned int *)this + 8) count:*((unsigned int *)this + 167)];
      uint64_t v24 = (jet_command_buffer *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      uint64_t v24 = 0;
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    }
    jet_command_buffer::add_command_buffer(v22, v24);
    if (__p.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
    {
      SKCRenderer::flushCurrentBatch(void)::baseTime = skCurrentTime();
    }
    double v25 = skCurrentTime();
    double v26 = *(double *)&SKCRenderer::flushCurrentBatch(void)::baseTime;
    CGFloat v27 = (uint64_t *)*((void *)this + 5);
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_time");
    float v28 = v25 - v26;
    float v29 = fmodf(v28, 43200.0);
    jet_command_buffer::set_fragment_constant_value(v27, &__p, v29);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_54;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (v4) {
    goto LABEL_46;
  }
LABEL_54:
  int v30 = 3 * (*((_DWORD *)this + 8) >> 2);
  int v31 = 6 * (*((_DWORD *)this + 8) >> 2);
  unsigned int v32 = 6 * (*((_DWORD *)this + 167) / 4);
  float32x4_t v33 = (_DWORD *)*((void *)this + 93);
  ++v33[41];
  v33[37] += v32 / 6;
  unsigned int v34 = v32 + 2 * v30;
  if (v33[43] > v34) {
    unsigned int v34 = v33[43];
  }
  v33[43] = v34;
  jet_command_buffer::draw_indexed(*((uint64_t **)this + 5), *((_DWORD *)this + 168), *((void *)this + 60), v31, v32);
  if ((*((unsigned char *)this + 661) & 0x10) != 0) {
    NSLog(&cfstr_SkcrendererPPa.isa, this, *(unsigned int *)(*((void *)this + 93) + 168), (*(_DWORD *)(*((void *)this + 93) + 164) - 1), (*((_DWORD *)this + 167) / 4), *((void *)this + 86), *((void *)this + 87), *((void *)this + 88), *((unsigned int *)this + 169));
  }
  uint64_t v35 = [*((id *)this + 159) objectForKey:@"debugDrawSpriteBounds"];
  int v36 = [v35 BOOLValue];

  if (v36)
  {
    __asm { FMOV            V0.4S, #1.0 }
    SKCRenderer::addDebugStroke((uint64_t)this, v31, v32, _Q0);
  }
  *((_DWORD *)this + 167) = 0;
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
LABEL_62:
  *((_DWORD *)this + 8) = *((_DWORD *)this + 20);
}

void sub_20AE84A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(a1);
}

uint64_t SKCRenderer::requireLighting(SKCRenderer *this, unsigned int a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  v38[0] = a2;
  for (uint64_t i = (uint64_t *)*((void *)this + 134); i; uint64_t i = (uint64_t *)*i)
  {
    unsigned int v3 = *((_DWORD *)i + 8);
    if (v3 <= a2)
    {
      if (v3 >= a2) {
        return 1;
      }
      ++i;
    }
  }
  std::string::size_type v4 = (SKCRenderer *)*((void *)this + 130);
  if (v4 == (SKCRenderer *)((char *)this + 1048)) {
    return 0;
  }
  uint64_t v5 = 0;
  char v6 = 0;
  float32x4_t v7 = 0uLL;
  do
  {
    long long v8 = (float32x4_t *)*((void *)v4 + 4);
    if ((v8[40].i32[1] & a2) != 0)
    {
      float32x4_t v9 = v8[38];
      if ((v9.i32[3] & 0x80000000) == 0 && (v9.i32[3] & 0x60000000) != 0)
      {
        float32x4_t v10 = vmlaq_laneq_f32(v7, v9, v9, 3);
        v10.i32[3] = v7.i32[3];
        char v6 = 1;
        float32x4_t v7 = v10;
      }
      float32x4_t v11 = v8[37];
      if ((v11.i32[3] & 0x80000000) == 0 && (v11.i32[3] & 0x60000000) != 0 && (int)v5 <= 7)
      {
        float32x4_t v13 = vmulq_laneq_f32(v11, v11, 3);
        *(_DWORD *)&v39[12 * (int)v5] = v13.i32[0];
        LODWORD(v14) = vdup_lane_s32(*(int32x2_t *)v13.f32, 1).u32[0];
        uint64_t v15 = 12 * v5 + 4;
        HIDWORD(v14) = v13.i32[2];
        *(void *)&v39[v15] = v14;
        long long v16 = *((_OWORD *)v4 + 3);
        v38[3 * (int)v5 + 10] = v16;
        *(unsigned int *)((char *)&v38[10] + v15) = DWORD1(v16);
        v38[3 * v5 + 12] = 1065353216;
        v38[(int)v5 + 2] = v8[40].u32[0];
        uint64_t v5 = (v5 + 1);
        char v6 = 1;
      }
    }
    unint64_t v17 = (SKCRenderer *)*((void *)v4 + 1);
    if (v17)
    {
      do
      {
        uint64_t v18 = v17;
        unint64_t v17 = *(SKCRenderer **)v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        uint64_t v18 = (SKCRenderer *)*((void *)v4 + 2);
        _ZF = *(void *)v18 == (void)v4;
        std::string::size_type v4 = v18;
      }
      while (!_ZF);
    }
    std::string::size_type v4 = v18;
  }
  while (v18 != (SKCRenderer *)((char *)this + 1048));
  if ((v6 & 1) == 0) {
    return 0;
  }
  *(_DWORD *)&v34[24] = 0;
  *(void *)&v34[16] = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  LODWORD(v33) = v5;
  __asm { FMOV            V3.2S, #1.0 }
  *(int8x8_t *)&long long v24 = vand_s8(vbsl_s8((int8x8_t)vcgt_u32((uint32x2_t)(v7.i64[0] & 0x7FFFFFFF7FFFFFFFLL), (uint32x2_t)_D3), _D3, *(int8x8_t *)v7.f32), (int8x8_t)vcgt_s32(*(int32x2_t *)v7.f32, (int32x2_t)-1));
  v7.i32[0] = v7.i32[2];
  if ((v7.i32[2] & 0x7FFFFFFFu) > 0x3F800000) {
    v7.f32[0] = 1.0;
  }
  if (v7.i32[2] < 0) {
    v7.f32[0] = 0.0;
  }
  *((void *)&v24 + SKCNode::setFlags(this, 66, 1) = v7.u32[0];
  *(_OWORD *)unsigned int v34 = v24;
  if ((int)v5 >= 1)
  {
    uint64_t v25 = (*(uint64_t (**)(void, void, uint64_t, uint64_t, unsigned char *))(**((void **)this + 126) + 24))(*((void *)this + 126), 0, 3, v5, v39);
    std::shared_ptr<jet_constant>::shared_ptr[abi:ne180100]<jet_constant,void>(&v32, v25);
  }
  *(void *)&long long v32 = v38;
  CGFloat v27 = std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)this + 133, v38, (uint64_t)&std::piecewise_construct, (_DWORD **)&v32);
  long long v28 = *(_OWORD *)v34;
  *((_OWORD *)v27 + 3) = v33;
  *((_OWORD *)v27 + 4) = v28;
  *(_OWORD *)((char *)v27 + 76) = *(_OWORD *)&v34[12];
  float v29 = (std::__shared_weak_count *)v27[13];
  v27[12] = 0;
  v27[13] = 0;
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  int v30 = (std::__shared_weak_count *)v27[15];
  v27[14] = 0;
  v27[15] = 0;
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  int v31 = (std::__shared_weak_count *)v27[17];
  v27[16] = 0;
  v27[17] = 0;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  return 1;
}

void sub_20AE84F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  SKCLightMaskUniforms::~SKCLightMaskUniforms((SKCLightMaskUniforms *)va);
  _Unwind_Resume(a1);
}

void SKCRenderer::setLightingUniforms(uint64_t a1, unsigned int a2, uint64_t **a3, float a4)
{
  unsigned int v47 = a2;
  std::string::size_type v4 = *a3;
  if (*a3)
  {
    double v8 = *MEMORY[0x263EF8998];
    double v9 = *(double *)(MEMORY[0x263EF8998] + 8);
    std::string::basic_string[abi:ne180100]<0>(__p, "u_normals_tex_coord_xform");
    jet_command_buffer::set_vertex_constant_value(v4, (std::string *)__p, v8, v9);
    if ((v40[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    float32x4_t v10 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "u_ambient");
    jet_command_buffer::set_fragment_constant_value(v10, (std::string *)__p, 1.0);
    if ((v40[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    float32x4_t v11 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "u_diffuse");
    jet_command_buffer::set_fragment_constant_value(v11, (std::string *)__p, 1.0);
    if ((v40[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    unint64_t v12 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "u_specular");
    jet_command_buffer::set_fragment_constant_value(v12, (std::string *)__p, 0.3);
    if ((v40[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    float32x2_t v13 = vcvt_f32_u32(*(uint32x2_t *)(*(void *)(a1 + 16) + 56));
    __asm { FMOV            V2.2S, #1.0 }
    if (v13.f32[0] > 0.0 && v13.f32[1] > 0.0)
    {
      if (v13.f32[0] <= v13.f32[1])
      {
        __asm { FMOV            V2.2S, #1.0 }
        *((float *)&_D2 + SKCNode::setFlags(this, 66, 1) = v13.f32[1] / v13.f32[0];
      }
      else
      {
        __asm { FMOV            V2.2S, #1.0 }
        *(float *)&_D2 = v13.f32[0] / v13.f32[1];
      }
    }
    double v37 = _D2;
    uint64_t v19 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "u_aspect");
    jet_command_buffer::set_fragment_constant_value(v19, (std::string *)__p, v37);
    if ((v40[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    float v20 = sinf(a4);
    double v21 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "u_rotation_sin");
    jet_command_buffer::set_fragment_constant_value(v21, (std::string *)__p, v20);
    float v22 = cosf(a4);
    if ((v40[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    float32x2_t v23 = *a3;
    std::string::basic_string[abi:ne180100]<0>(__p, "u_rotation_cos");
    jet_command_buffer::set_fragment_constant_value(v23, (std::string *)__p, v22);
    if ((v40[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    if (SKCRenderer::requireLighting((SKCRenderer *)a1, v47))
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
      long long v24 = std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 1064), &v47, (uint64_t)&std::piecewise_construct, &__str);
      long long v25 = *((_OWORD *)v24 + 4);
      *(_OWORD *)std::string __p = *((_OWORD *)v24 + 3);
      *(_OWORD *)uint64_t v40 = v25;
      *(_OWORD *)&v40[12] = *(_OWORD *)((char *)v24 + 76);
      uint64_t v27 = (uint64_t)v24[12];
      double v26 = (std::__shared_weak_count *)v24[13];
      uint64_t v41 = v27;
      double v42 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v29 = (uint64_t)v24[14];
      long long v28 = (std::__shared_weak_count *)v24[15];
      uint64_t v43 = v29;
      float32x2_t v44 = v28;
      if (v28) {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = (uint64_t)v24[16];
      int v30 = (std::__shared_weak_count *)v24[17];
      uint64_t v45 = v31;
      int16x8_t v46 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v32 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__str, "u_num_lights");
      jet_command_buffer::set_fragment_constant_value(v32, &__str, (int)__p[0]);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      long long v33 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__str, "u_ambient_color");
      jet_command_buffer::set_fragment_constant_value(v33, &__str, *(__n128 *)v40);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      unsigned int v34 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__str, "u_light_color");
      jet_command_buffer::set_fragment_constant(v34, &__str, v27);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      long long v35 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__str, "u_light_position");
      jet_command_buffer::set_fragment_constant(v35, &__str, v29);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      long long v36 = *a3;
      std::string::basic_string[abi:ne180100]<0>(&__str, "u_light_decay");
      jet_command_buffer::set_fragment_constant(v36, &__str, v31);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
    }
  }
}

void sub_20AE85330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  SKCLightMaskUniforms::~SKCLightMaskUniforms((SKCLightMaskUniforms *)&a18);
  _Unwind_Resume(a1);
}

void SKCRenderer::addDebugStroke(uint64_t a1, int a2, unsigned int a3, __n128 a4)
{
  float32x4_t v7 = *(uint64_t **)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 232);
  LODWORD(__p.__r_.__value_.__l.__data_) = 31;
  unint64_t v9 = v7[2];
  if (v9 >= v7[3])
  {
    uint64_t v10 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v7 + 1, (int *)&__p);
  }
  else
  {
    *(void *)unint64_t v9 = &unk_26BEEC420;
    *(_DWORD *)(v9 + 8) = 31;
    *(void *)(v9 + 24) = 0;
    *(void *)(v9 + 32) = 0;
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + 64) = 0;
    uint64_t v10 = v9 + 192;
    *(void *)(v9 + 96) = 0;
  }
  void v7[2] = v10;
  *(void *)(v10 - 80) = v8;
  *(_OWORD *)(v10 - 64) = xmmword_20AE9A980;
  *(void *)(v10 - 48) = 0x30000000FLL;
  float32x4_t v11 = *(uint64_t **)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
  jet_command_buffer::set_vertex_buffer(v11, &__p, *(void *)(a1 + 408));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v12 = *(uint64_t **)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&__p, "u_color");
  jet_command_buffer::set_fragment_constant_value(v12, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (a3)
  {
    unsigned int v13 = 0;
    do
    {
      jet_command_buffer::draw_indexed(*(uint64_t **)(a1 + 40), 2, *(void *)(a1 + 480), a2 + v13, 6);
      v13 += 6;
    }
    while (v13 < a3);
  }
}

void sub_20AE85504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SKCLightMaskUniforms::~SKCLightMaskUniforms(SKCLightMaskUniforms *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  unsigned int v3 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::string::size_type v4 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

std::string *jet_command_buffer::set_vertex_constant_value(uint64_t *a1, std::string *__str, double a3, double a4)
{
  int v11 = 19;
  unint64_t v8 = a1[2];
  if (v8 >= a1[3])
  {
    uint64_t v9 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v11);
  }
  else
  {
    *(void *)unint64_t v8 = &unk_26BEEC420;
    *(_DWORD *)(v8 + 8) = 19;
    *(void *)(v8 + 24) = 0;
    *(void *)(v8 + 32) = 0;
    *(void *)(v8 + 16) = 0;
    *(void *)(v8 + 64) = 0;
    uint64_t v9 = v8 + 192;
    *(void *)(v8 + 96) = 0;
  }
  a1[2] = v9;
  uint64_t result = std::string::operator=((std::string *)(v9 - 176), __str);
  *(double *)(v9 - 64) = a3;
  *(double *)(v9 - 56) = a4;
  return result;
}

std::string *jet_command_buffer::set_fragment_constant_value(uint64_t *a1, std::string *__str, int a3)
{
  int v9 = 38;
  unint64_t v6 = a1[2];
  if (v6 >= a1[3])
  {
    uint64_t v7 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v9);
  }
  else
  {
    *(void *)unint64_t v6 = &unk_26BEEC420;
    *(_DWORD *)(v6 + 8) = 38;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 64) = 0;
    uint64_t v7 = v6 + 192;
    *(void *)(v6 + 96) = 0;
  }
  a1[2] = v7;
  uint64_t result = std::string::operator=((std::string *)(v7 - 176), __str);
  *(_DWORD *)(v7 - 64) = a3;
  return result;
}

std::string *jet_command_buffer::set_fragment_constant(uint64_t *a1, std::string *__str, uint64_t a3)
{
  int v9 = 9;
  unint64_t v6 = a1[2];
  if (v6 >= a1[3])
  {
    uint64_t v7 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v9);
  }
  else
  {
    *(void *)unint64_t v6 = &unk_26BEEC420;
    *(_DWORD *)(v6 + 8) = 9;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 64) = 0;
    uint64_t v7 = v6 + 192;
    *(void *)(v6 + 96) = 0;
  }
  a1[2] = v7;
  *(void *)(v7 - 80) = a3;
  return std::string::operator=((std::string *)(v7 - 176), __str);
}

void SKCRenderer::applyDebugOptions(SKCRenderer *this)
{
  SKCRenderer::applyDebugOptions(void)::count = (SKCRenderer::applyDebugOptions(void)::count + 1) % 0x64u;
  *((float *)this + 2) = (float)(fabsf((float)((float)SKCRenderer::applyDebugOptions(void)::count / -99.0)+ 0.5)* 0.8)+ 0.2;
  *((_DWORD *)this + 165) = 0;
  uint64_t v2 = [*((id *)this + 159) valueForKey:@"debugColorEffectNodes"];
  int v3 = [v2 BOOLValue];

  if (v3) {
    *((_DWORD *)this + 165) |= 2u;
  }
  std::string::size_type v4 = [*((id *)this + 159) valueForKey:@"debugColorCropNodes"];
  int v5 = [v4 BOOLValue];

  if (v5) {
    *((_DWORD *)this + 165) |= 4u;
  }
  unint64_t v6 = [*((id *)this + 159) valueForKey:@"debugColorCustomShaders"];
  int v7 = [v6 BOOLValue];

  if (v7) {
    *((_DWORD *)this + 165) |= 8u;
  }
  unint64_t v8 = [*((id *)this + 159) valueForKey:@"debugDisableEffectNodeEffects"];
  int v9 = [v8 BOOLValue];

  if (v9) {
    *((_DWORD *)this + 165) |= 0x20u;
  }
  uint64_t v10 = [*((id *)this + 159) valueForKey:@"debugDisableEffectNodeRasterize"];
  int v11 = [v10 BOOLValue];

  if (v11) {
    *((_DWORD *)this + 165) |= 0x40u;
  }
  unint64_t v12 = [*((id *)this + 159) valueForKey:@"debugDisableCropNodes"];
  int v13 = [v12 BOOLValue];

  if (v13) {
    *((_DWORD *)this + 165) |= 0x80u;
  }
  uint64_t v14 = [*((id *)this + 159) valueForKey:@"debugDisableCustomShaders"];
  int v15 = [v14 BOOLValue];

  if (v15) {
    *((_DWORD *)this + 165) |= 0x100u;
  }
  long long v16 = [*((id *)this + 159) valueForKey:@"debugDisable3DNodes"];
  int v17 = [v16 BOOLValue];

  if (v17) {
    *((_DWORD *)this + 165) |= 0x200u;
  }
  uint64_t v18 = [*((id *)this + 159) valueForKey:@"debugColorCustomShadersRecompile"];
  int v19 = [v18 BOOLValue];

  if (v19) {
    *((_DWORD *)this + 165) |= 0x10u;
  }
  float v20 = [*((id *)this + 159) valueForKey:@"debugDisableCoreImage"];
  int v21 = [v20 BOOLValue];

  if (v21) {
    *((_DWORD *)this + 165) |= 0x800u;
  }
  float v22 = [*((id *)this + 159) valueForKey:@"debugLogBatching"];
  int v23 = [v22 BOOLValue];

  if (v23) {
    *((_DWORD *)this + 165) |= 0x1000u;
  }
}

void sub_20AE85A30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCRenderer::addPerNodeDebugOverlays(SKCRenderer *this, void *lpsrc, uint64_t a3, unsigned int a4, unsigned int a5)
{
  int v10 = *((_DWORD *)this + 165);
  if ((v10 & 2) != 0)
  {
    if (!lpsrc) {
      goto LABEL_14;
    }
    if (v11)
    {
      unint64_t v12 = v11;
      SKCRenderer::flushCurrentBatch(this);
      if (SKCEffectNode::getEnableEffects(v12))
      {
        if (SKCEffectNode::getShouldRasterize(v12))
        {
          v13.i32[0] = 0;
          v14.i32[0] = *((_DWORD *)v12 + 169);
          float32x4_t v15 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v14, v13), 0), (int8x16_t)xmmword_20AE9AE20, (int8x16_t)xmmword_20AE9ADF0);
        }
        else
        {
          float32x4_t v15 = (float32x4_t)xmmword_20AE9C3A0;
        }
      }
      else
      {
        float32x4_t v15 = (float32x4_t)xmmword_20AE9C390;
      }
      __n128 v34 = (__n128)v15;
      __asm { FMOV            V0.4S, #0.25 }
      SKCRenderer::addDebugFill((uint64_t)this, 6 * (a4 >> 2), 6 * (a5 >> 2), (__n128)vmulq_f32(v15, _Q0));
      SKCRenderer::addDebugStroke((uint64_t)this, 6 * (a4 >> 2), 6 * (a5 >> 2), v34);
      int v10 = *((_DWORD *)this + 165);
    }
  }
  if (lpsrc)
  {
    if ((v10 & 4) != 0)
    {
      if (v21)
      {
        float v22 = v21;
        SKCRenderer::flushCurrentBatch(this);
        v23.i64[0] = 0;
        v24.i64[0] = v22[71];
        __n128 v35 = (__n128)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v24, v23).i64[0], 0), (int8x16_t)xmmword_20AE9C390, (int8x16_t)xmmword_20AE9BF60);
        __asm { FMOV            V0.4S, #0.25 }
        SKCRenderer::addDebugFill((uint64_t)this, 6 * (a4 >> 2), 6 * (a5 >> 2), (__n128)vmulq_f32((float32x4_t)v35, _Q0));
        SKCRenderer::addDebugStroke((uint64_t)this, 6 * (a4 >> 2), 6 * (a5 >> 2), v35);
        int v10 = *((_DWORD *)this + 165);
      }
    }
  }
LABEL_14:
  if ((v10 & 8) != 0 && *(void *)(a3 + 16))
  {
    SKCRenderer::flushCurrentBatch(this);
    SKCRenderer::addDebugFill((uint64_t)this, 6 * (a4 >> 2), 6 * (a5 >> 2), (__n128)xmmword_20AE9C3B0);
    SKCRenderer::addDebugStroke((uint64_t)this, 6 * (a4 >> 2), 6 * (a5 >> 2), (__n128)xmmword_20AE9C390);
    int v10 = *((_DWORD *)this + 165);
  }
  if ((v10 & 0x10) != 0)
  {
    double v26 = *(void **)(a3 + 16);
    if (v26)
    {
      if ([v26 _backingProgramIsDirty])
      {
        SKCRenderer::flushCurrentBatch(this);
        uint64_t v27 = *(void **)(a3 + 16);
        if (v27)
        {
          [v27 _backingProgram];
          v28.i64[0] = 0;
          v29.i64[0] = v38;
          float32x4_t v30 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v29, v28).i64[0], 0), (int8x16_t)xmmword_20AE9C3C0, (int8x16_t)xmmword_20AE9A950);
          if (v39)
          {
            float32x4_t v36 = v30;
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
            float32x4_t v30 = v36;
          }
        }
        else
        {
          float32x4_t v30 = (float32x4_t)xmmword_20AE9C3C0;
        }
        __n128 v37 = (__n128)v30;
        __asm { FMOV            V0.4S, #0.25 }
        int v32 = 6 * (a4 >> 2);
        int v33 = 6 * (a5 >> 2);
        SKCRenderer::addDebugFill((uint64_t)this, v32, v33, (__n128)vmulq_f32(v30, _Q0));
        SKCRenderer::addDebugStroke((uint64_t)this, v32, v33, v37);
      }
    }
  }
}

uint64_t SKCRenderer::addDebugFill(uint64_t a1, int a2, int a3, __n128 a4)
{
  int v7 = *(uint64_t **)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 232);
  LODWORD(__p.__r_.__value_.__l.__data_) = 31;
  unint64_t v9 = v7[2];
  if (v9 >= v7[3])
  {
    uint64_t v10 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v7 + 1, (int *)&__p);
  }
  else
  {
    *(void *)unint64_t v9 = &unk_26BEEC420;
    *(_DWORD *)(v9 + 8) = 31;
    *(void *)(v9 + 24) = 0;
    *(void *)(v9 + 32) = 0;
    *(void *)(v9 + 16) = 0;
    *(void *)(v9 + 64) = 0;
    uint64_t v10 = v9 + 192;
    *(void *)(v9 + 96) = 0;
  }
  void v7[2] = v10;
  *(void *)(v10 - 80) = v8;
  *(_OWORD *)(v10 - 64) = xmmword_20AE9A980;
  *(void *)(v10 - 48) = 0x30000000FLL;
  int v11 = *(uint64_t **)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
  jet_command_buffer::set_vertex_buffer(v11, &__p, *(void *)(a1 + 408));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v12 = *(uint64_t **)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&__p, "u_color");
  jet_command_buffer::set_fragment_constant_value(v12, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return jet_command_buffer::draw_indexed(*(uint64_t **)(a1 + 40), 3, *(void *)(a1 + 480), a2, a3);
}

void sub_20AE85EFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void SKCRenderer::render(uint64_t a1, _OWORD *a2, uint64_t *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  a5;
  a8;
  objc_storeStrong((id *)(a1 + 1272), a5);
  int32x4_t v14 = [*(id *)(a1 + 1272) objectForKeyedSubscript:@"ignoresSiblingOrder"];
  *(unsigned char *)(a1 + 1000) = [v14 BOOLValue];

  float32x4_t v15 = [*(id *)(a1 + 1272) objectForKeyedSubscript:@"cullNonVisibleNodes"];
  *(unsigned char *)(a1 + 100SKCNode::setFlags(this, 66, 1) = [v15 BOOLValue];

  long long v16 = [*(id *)(a1 + 1272) objectForKeyedSubscript:@"doNotRenderChildNodes"];
  *(unsigned char *)(a1 + 1002) = [v16 BOOLValue];

  int v17 = [*(id *)(a1 + 1272) objectForKeyedSubscript:@"debugDisablePresentationTime"];
  [v17 BOOLValue];

  uint64_t v18 = [*(id *)(a1 + 1272) objectForKeyedSubscript:@"_client"];
  *(void *)(a1 + 992) = [v18 pointerValue];

  SKCStats::SKCStats(&v30);
  long long v19 = *(_OWORD *)&v30.constraints.constraintCount;
  long long v20 = *(_OWORD *)&v30.render.nodeTraversalCount;
  *(_OWORD *)(a1 + 944) = *(_OWORD *)&v30.render.duration;
  *(_OWORD *)(a1 + 960) = v20;
  *(void *)(a1 + 976) = *(void *)&v30.render.passCount;
  long long v21 = *(_OWORD *)&v30.clientUpdate.duration;
  long long v22 = *(_OWORD *)&v30.physics.duration;
  *(_OWORD *)(a1 + 880) = *(_OWORD *)&v30.update.duration;
  *(_OWORD *)(a1 + 896) = v22;
  *(_OWORD *)(a1 + 912) = *(_OWORD *)&v30.constraints.beginTime;
  *(_OWORD *)(a1 + 928) = v19;
  long long v23 = *(_OWORD *)&v30.baseTime;
  *(_OWORD *)(a1 + 816) = *(_OWORD *)&v30.frameBeginTime;
  *(_OWORD *)(a1 + 832) = v23;
  *(_OWORD *)(a1 + 848) = *(_OWORD *)&v30.frameCount;
  *(_OWORD *)(a1 + 864) = v21;
  SKCStats::~SKCStats(&v30);
  if (a6) {
    *(void *)(a1 + 744) = a6;
  }
  int64x2_t v24 = *(SKCStats **)(a1 + 744);
  if (a7) {
    uint64_t v25 = a7;
  }
  else {
    uint64_t v25 = *(void *)(a1 + 744);
  }
  *(void *)(a1 + 800) = v25;
  double v26 = CACurrentMediaTime();
  SKCStats::beginRender(v24, v26);
  dispatch_semaphore_wait((dispatch_semaphore_t)*(id *)a1, 0xFFFFFFFFFFFFFFFFLL);
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy(a1 + 1040, *(void **)(a1 + 1048));
  *(void *)(a1 + 1040) = a1 + 1048;
  *(void *)(a1 + 1056) = 0;
  *(void *)(a1 + 1048) = 0;
  std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::destroy(a1 + 1064, *(void **)(a1 + 1072));
  *(void *)(a1 + 1064) = a1 + 1072;
  *(void *)(a1 + 1080) = 0;
  *(void *)(a1 + 1072) = 0;
  std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::destroy(a1 + 1112, *(void **)(a1 + 1120));
  *(void *)(a1 + 1112) = a1 + 1120;
  *(void *)(a1 + 1128) = 0;
  *(void *)(a1 + 1120) = 0;
  *(void *)(a1 + 1096) = *(void *)(a1 + 1088);
  uint64_t v27 = *a3;
  if (*a3)
  {
    *(_DWORD *)(v27 + 216) = 0;
    if (a2)
    {
      {
        long long v28 = a2[19];
      }
      else
      {
        long long v28 = xmmword_20AE9A910;
      }
    }
    else
    {
      long long v28 = xmmword_20AE9C3D0;
    }
    *(_OWORD *)(v27 + 32) = v28;
  }
LABEL_14:
  *(_DWORD *)(a1 + 80) = 0;
  SKCRenderer::applyDebugOptions((SKCRenderer *)a1);
  if ((*(unsigned char *)(a1 + 661) & 0x10) != 0) {
    NSLog(&cfstr_SkcrendererPBe.isa, a1);
  }
  operator new();
}

void sub_20AE86A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_semaphore_t dsema, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a34);
  }
  dispatch_semaphore_signal(dsema);

  _Unwind_Resume(a1);
}

void SKCRenderer::buildRenderPass(uint64_t a1, void *a2)
{
  int v3 = (void *)*a2;
  *(void *)(a1 + 1152) = *a2;
  std::string::size_type v4 = (void *)v3[1];
  if (v4 != v3)
  {
    do
    {
      unint64_t v6 = (std::__shared_weak_count *)v4[3];
      uint64_t v10 = v4[2];
      int v11 = v6;
      if (v6) {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      SKCRenderer::buildRenderGroup(a1, &v10);
      if (v6) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
      std::string::size_type v4 = (void *)v4[1];
    }
    while (v4 != v3);
    int v3 = (void *)*a2;
  }
  int v7 = v3 + 3;
  for (uint64_t i = (void *)v3[4]; i != v7; uint64_t i = (void *)i[1])
  {
    unint64_t v9 = (std::__shared_weak_count *)i[3];
    uint64_t v10 = i[2];
    int v11 = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SKCRenderer::buildRenderGroup(a1, &v10);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
}

void sub_20AE86BDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void SKCRenderer::generateShadowGeometery(SKCRenderer *this)
{
  uint64_t v1 = (uint64_t *)*((void *)this + 136);
  uint64_t v38 = (uint64_t *)*((void *)this + 137);
  if (v1 != v38)
  {
    uint64_t v2 = (char *)this + 1048;
    int v3 = (void *)((char *)this + 1120);
    __n128 v37 = this;
    do
    {
      std::string::size_type v4 = (char *)*((void *)this + 130);
      if (v4 != v2)
      {
        uint64_t v5 = *v1;
        int v6 = *(_DWORD *)(*(void *)*v1 + 564);
        do
        {
          unint64_t v7 = *((void *)v4 + 4);
          unint64_t v40 = v7;
          if ((*(_DWORD *)(v7 + 644) & v6) != 0)
          {
            uint64_t v8 = (void *)*v3;
            if (!*v3) {
              goto LABEL_17;
            }
            unint64_t v9 = v3;
            do
            {
              unint64_t v10 = v8[4];
              BOOL v11 = v10 >= v7;
              if (v10 >= v7) {
                unint64_t v12 = v8;
              }
              else {
                unint64_t v12 = v8 + 1;
              }
              if (v11) {
                unint64_t v9 = v8;
              }
              uint64_t v8 = (void *)*v12;
            }
            while (*v12);
            if (v9 == v3 || v7 < v9[4]) {
LABEL_17:
            }
              operator new();
            int32x4_t v13 = (void **)v9[5];
            int32x4_t v14 = v13[1];
            unint64_t v15 = (unint64_t)v13[2];
            if ((unint64_t)v14 >= v15)
            {
              uint64_t v17 = ((char *)v14 - (unsigned char *)*v13) >> 3;
              if ((unint64_t)(v17 + 1) >> 61) {
                std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
              }
              uint64_t v18 = v15 - (void)*v13;
              uint64_t v19 = v18 >> 2;
              if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
                uint64_t v19 = v17 + 1;
              }
              if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v20 = v19;
              }
              if (v20) {
                long long v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>((uint64_t)(v13 + 2), v20);
              }
              else {
                long long v21 = 0;
              }
              long long v22 = &v21[8 * v17];
              *(void *)long long v22 = v5;
              long long v16 = v22 + 8;
              int64x2_t v24 = (char *)*v13;
              long long v23 = (char *)v13[1];
              if (v23 != *v13)
              {
                do
                {
                  uint64_t v25 = *((void *)v23 - 1);
                  v23 -= 8;
                  *((void *)v22 - SKCNode::setFlags(this, 66, 1) = v25;
                  v22 -= 8;
                }
                while (v23 != v24);
                long long v23 = (char *)*v13;
              }
              unsigned char *v13 = v22;
              v13[1] = v16;
              v13[2] = &v21[8 * v20];
              if (v23) {
                operator delete(v23);
              }
            }
            else
            {
              void *v14 = v5;
              long long v16 = v14 + 1;
            }
            v13[1] = v16;
          }
          double v26 = (char *)*((void *)v4 + 1);
          if (v26)
          {
            do
            {
              uint64_t v27 = v26;
              double v26 = *(char **)v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v27 = (char *)*((void *)v4 + 2);
              BOOL v28 = *(void *)v27 == (void)v4;
              std::string::size_type v4 = v27;
            }
            while (!v28);
          }
          std::string::size_type v4 = v27;
        }
        while (v27 != v2);
      }
      ++v1;
      this = v37;
    }
    while (v1 != v38);
  }
  int64x2_t v29 = (char *)*((void *)this + 139);
  SKCStats v30 = (char *)this + 1120;
  if (v29 != (char *)this + 1120)
  {
    uint64_t v31 = (uint64_t **)((char *)this + 1040);
    do
    {
      uint64_t v32 = *((void *)v29 + 4);
      int v33 = (void *)*((void *)v29 + 5);
      __n128 v34 = (std::__shared_weak_count *)*((void *)v29 + 6);
      if (v34)
      {
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v41 = v32;
      *(void *)&long long v39 = &v41;
      _ZNSt3__16__treeINS_12__value_typeIP12SKCLightNodeDv4_fEENS_19__map_value_compareIS3_S5_NS_4lessIS3_EELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS_5tupleIJRKS3_EEENSH_IJEEEEEENS_4pairINS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEbEERKT_DpOT0_(v31, (unint64_t *)&v41, (uint64_t)&std::piecewise_construct, (uint64_t **)&v39);
      if (*v33 != v33[1]) {
        SKCLightNode::generateShadowGeometry(v41);
      }
      if (v34)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      __n128 v35 = (char *)*((void *)v29 + 1);
      if (v35)
      {
        do
        {
          float32x4_t v36 = v35;
          __n128 v35 = *(char **)v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          float32x4_t v36 = (char *)*((void *)v29 + 2);
          BOOL v28 = *(void *)v36 == (void)v29;
          int64x2_t v29 = v36;
        }
        while (!v28);
      }
      int64x2_t v29 = v36;
    }
    while (v36 != v30);
  }
}

void sub_20AE86F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v12)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t jet_command_buffer::set_viewport(jet_command_buffer *this, int a2, int a3, int a4, int a5)
{
  int v12 = 11;
  unint64_t v10 = *((void *)this + 2);
  if (v10 >= *((void *)this + 3))
  {
    uint64_t result = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>((uint64_t *)this + 1, &v12);
  }
  else
  {
    *(void *)unint64_t v10 = &unk_26BEEC420;
    *(_DWORD *)(v10 + 8) = 11;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 64) = 0;
    uint64_t result = v10 + 192;
    *(void *)(v10 + 96) = 0;
  }
  *((void *)this + 2) = result;
  *(_DWORD *)(result - 64) = a2;
  *(_DWORD *)(result - 60) = a3;
  *(_DWORD *)(result - 56) = a4;
  *(_DWORD *)(result - 52) = a5;
  return result;
}

uint64_t jet_command_buffer::set_scissor_rect(jet_command_buffer *this, int a2, int a3, int a4, int a5)
{
  int v12 = 12;
  unint64_t v10 = *((void *)this + 2);
  if (v10 >= *((void *)this + 3))
  {
    uint64_t result = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>((uint64_t *)this + 1, &v12);
  }
  else
  {
    *(void *)unint64_t v10 = &unk_26BEEC420;
    *(_DWORD *)(v10 + 8) = 12;
    *(void *)(v10 + 24) = 0;
    *(void *)(v10 + 32) = 0;
    *(void *)(v10 + 16) = 0;
    *(void *)(v10 + 64) = 0;
    uint64_t result = v10 + 192;
    *(void *)(v10 + 96) = 0;
  }
  *((void *)this + 2) = result;
  *(_DWORD *)(result - 64) = a2;
  *(_DWORD *)(result - 60) = a3;
  *(_DWORD *)(result - 56) = a4;
  *(_DWORD *)(result - 52) = a5;
  return result;
}

void SKCRenderer::expandRenderPass(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  ++*(_DWORD *)(*(void *)(a1 + 744) + 168);
  jet_command_buffer::begin_render_pass(*(jet_command_buffer **)(a1 + 40), *(jet_framebuffer **)(*a2 + 80));
  uint64_t v6 = *a2;
  if (*(unsigned char *)(*a2 + 160))
  {
    jet_command_buffer::set_scissor_rect(*(jet_command_buffer **)(a1 + 40), *(_DWORD *)(v6 + 176), *(_DWORD *)(v6 + 180), *(_DWORD *)(v6 + 184), *(_DWORD *)(v6 + 188));
    uint64_t v6 = *a2;
  }
  if (*(unsigned char *)(v6 + 192))
  {
    jet_command_buffer::set_viewport(*(jet_command_buffer **)(a1 + 40), *(_DWORD *)(v6 + 208), *(_DWORD *)(v6 + 212), *(_DWORD *)(v6 + 216), *(_DWORD *)(v6 + 220));
    uint64_t v6 = *a2;
  }
  for (uint64_t i = *(void **)(v6 + 8); i != (void *)v6; uint64_t i = (void *)i[1])
  {
    uint64_t v8 = (std::__shared_weak_count *)i[3];
    v9[0] = i[2];
    v9[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SKCRenderer::expandRenderGroup(a1, v9, a3);
    if (v8) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_20AE871D4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *jet_command_buffer::add_schedule_handler(uint64_t *a1, uint64_t a2)
{
  int v7 = 43;
  unint64_t v4 = a1[2];
  if (v4 >= a1[3])
  {
    uint64_t v5 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v7);
  }
  else
  {
    *(void *)unint64_t v4 = &unk_26BEEC420;
    *(_DWORD *)(v4 + 8) = 43;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 64) = 0;
    uint64_t v5 = v4 + 192;
    *(void *)(v4 + 96) = 0;
  }
  a1[2] = v5;
  return std::function<void ()(void)>::operator=((void *)(v5 - 120), a2);
}

void SKCRenderer::addDebugGroup(uint64_t a1, __n128 a2)
{
  unint64_t v68 = a2.n128_u64[1];
  uint64_t v109 = *MEMORY[0x263EF8340];
  uint64_t v2 = [*(id *)(a1 + 1272) valueForKey:@"highlightNodes"];
  int v3 = *(void **)(a1 + 984);
  *(void *)(a1 + 984) = v2;

  if (*(void *)(a1 + 984))
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      long long v97 = 0u;
      long long v98 = 0u;
      long long v95 = 0u;
      long long v96 = 0u;
      id obj = *(id *)(a1 + 984);
      uint64_t v71 = [obj countByEnumeratingWithState:&v95 objects:v108 count:16];
      if (v71)
      {
        uint64_t v70 = *(void *)v96;
        __asm { FMOV            V0.4S, #1.0 }
        unsigned int v72 = HIDWORD(_Q0);
        do
        {
          for (uint64_t i = 0; i != v71; ++i)
          {
            if (*(void *)v96 != v70) {
              objc_enumerationMutation(obj);
            }
            unint64_t v9 = *(void **)(*((void *)&v95 + 1) + 8 * i);
            uint64_t v77 = [v9 objectForKey:@"color"];
            *(void *)&long long v80 = [v9 objectForKey:@"fillColor"];
            *((void *)&v80 + SKCNode::setFlags(this, 66, 1) = [v9 objectForKey:@"strokeColor"];
            id v78 = [v9 objectForKey:@"accumulated_bounds_fillColor"];
            id v79 = [v9 objectForKey:@"accumulated_bounds_strokeColor"];
            float32x4_t v75 = [v9 objectForKey:@"node_bounds_fillColor"];
            uint64_t v76 = [v9 objectForKey:@"node_bounds_strokeColor"];
            CGPoint v73 = [v9 objectForKey:@"nodeList"];
            if (!v77)
            {
              uint64_t v77 = [MEMORY[0x263F1C550] cyanColor];
            }
            if (v80 == 0)
            {
              id v10 = v77;
              BOOL v11 = (void *)MEMORY[0x263F1C550];
              *(void *)&long long v80 = v10;
              [v10 red];
              double v13 = v12;
              [(id)v80 green];
              double v15 = v14;
              [(id)v80 blue];
              double v17 = v16;
              [(id)v80 alpha];
              *((void *)&v80 + SKCNode::setFlags(this, 66, 1) = [v11 colorWithRed:v13 green:v15 blue:v17 alpha:v18 * 0.25];
            }
            if (!v78) {
              id v78 = (id)v80;
            }
            if (!v79) {
              id v79 = *((id *)&v80 + 1);
            }
            __n128 v83 = 0u;
            __n128 v84 = 0u;
            if (v78)
            {
              [v78 componentRGBA];
              v21.i64[0] = __PAIR64__(v20, v19);
              v21.i64[1] = __PAIR64__(v72, v22);
              __n128 v83 = (__n128)vmulq_n_f32(v21, v23);
            }
            if (v79)
            {
              [v79 componentRGBA];
              v26.i64[0] = __PAIR64__(v25, v24);
              v26.i64[1] = __PAIR64__(v72, v27);
              __n128 v84 = (__n128)vmulq_n_f32(v26, v28);
            }
            __n128 v81 = 0u;
            __n128 v82 = 0u;
            if (v75)
            {
              [v75 componentRGBA];
              v31.i64[0] = __PAIR64__(v30, v29);
              v31.i64[1] = __PAIR64__(v72, v32);
              __n128 v81 = (__n128)vmulq_n_f32(v31, v33);
            }
            if (v76)
            {
              [v76 componentRGBA];
              v36.i64[0] = __PAIR64__(v35, v34);
              v36.i64[1] = __PAIR64__(v72, v37);
              __n128 v82 = (__n128)vmulq_n_f32(v36, v38);
            }
            long long v39 = v73;
            if (v73)
            {
              uint64_t v40 = [v73 count];
              long long v39 = v73;
              if (v40)
              {
                long long v93 = 0u;
                long long v94 = 0u;
                long long v91 = 0u;
                long long v92 = 0u;
                id v85 = v73;
                uint64_t v41 = [v85 countByEnumeratingWithState:&v91 objects:v107 count:16];
                if (v41)
                {
                  uint64_t v42 = *(void *)v92;
                  BOOL v43 = v83.n128_f32[3] > 0.0 || v84.n128_f32[3] > 0.0;
                  BOOL v44 = v81.n128_f32[3] > 0.0 || v82.n128_f32[3] > 0.0;
                  do
                  {
                    for (uint64_t j = 0; j != v41; ++j)
                    {
                      if (*(void *)v92 != v42) {
                        objc_enumerationMutation(v85);
                      }
                      int16x8_t v46 = *(void **)(*((void *)&v91 + 1) + 8 * j);
                      unsigned int v47 = [v46 scene];
                      double v48 = (SKCSceneNode *)[v47 _backingNode];

                      if (v43)
                      {
                        long long v89 = 0u;
                        long long v90 = 0u;
                        long long v87 = 0u;
                        long long v88 = 0u;
                        [v46 globalAccumulatedBoundingVerts];
                        long long v87 = v49;
                        long long v88 = v50;
                        long long v89 = v51;
                        long long v90 = v52;
                        LODWORD(v49) = v68;
                        SKCSceneNode::matrixForDestination(v48, *(double *)&v49, *((float *)&v68 + 1));
                        uint64_t v57 = 0;
                        long long v99 = v87;
                        long long v100 = v88;
                        long long v101 = v89;
                        long long v102 = v90;
                        do
                        {
                          *(long long *)((char *)&v103 + v57) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v53, COERCE_FLOAT(*(long long *)((char *)&v99 + v57))), v54, *(float32x2_t *)((char *)&v99 + v57), 1), v55, *(float32x4_t *)((char *)&v99 + v57), 2), v56, *(float32x4_t *)((char *)&v99 + v57), 3);
                          v57 += 16;
                        }
                        while (v57 != 64);
                        long long v87 = v103;
                        long long v88 = v104;
                        long long v89 = v105;
                        long long v90 = v106;
                        SKCRenderer::drawSolidColorQuads(a1, &v87, 1, 0, v83, v84);
                      }
                      if (v44)
                      {
                        long long v89 = 0u;
                        long long v90 = 0u;
                        long long v87 = 0u;
                        long long v88 = 0u;
                        [v46 globalBoundingVerts];
                        long long v87 = v58;
                        long long v88 = v59;
                        long long v89 = v60;
                        long long v90 = v61;
                        LODWORD(v58) = v68;
                        SKCSceneNode::matrixForDestination(v48, *(double *)&v58, *((float *)&v68 + 1));
                        uint64_t v66 = 0;
                        long long v99 = v87;
                        long long v100 = v88;
                        long long v101 = v89;
                        long long v102 = v90;
                        do
                        {
                          *(long long *)((char *)&v103 + v66) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v62, COERCE_FLOAT(*(long long *)((char *)&v99 + v66))), v63, *(float32x2_t *)((char *)&v99 + v66), 1), v64, *(float32x4_t *)((char *)&v99 + v66), 2), v65, *(float32x4_t *)((char *)&v99 + v66), 3);
                          v66 += 16;
                        }
                        while (v66 != 64);
                        long long v87 = v103;
                        long long v88 = v104;
                        long long v89 = v105;
                        long long v90 = v106;
                        SKCRenderer::drawSolidColorQuads(a1, &v87, 1, 0, v81, v82);
                      }
                    }
                    uint64_t v41 = [v85 countByEnumeratingWithState:&v91 objects:v107 count:16];
                  }
                  while (v41);
                }

                long long v39 = v73;
              }
            }
          }
          uint64_t v71 = [obj countByEnumeratingWithState:&v95 objects:v108 count:16];
        }
        while (v71);
      }
    }
  }
  if (*(void *)(a1 + 800)) {
    operator new();
  }
}

void sub_20AE888D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,void *a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a72);
  }
  _Unwind_Resume(a1);
}

uint64_t jet_command_buffer::present(jet_command_buffer *this, jet_texture *a2, double a3)
{
  int v8 = 33;
  unint64_t v6 = *((void *)this + 2);
  if (v6 >= *((void *)this + 3))
  {
    uint64_t result = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>((uint64_t *)this + 1, &v8);
  }
  else
  {
    *(void *)unint64_t v6 = &unk_26BEEC420;
    *(_DWORD *)(v6 + 8) = 33;
    *(void *)(v6 + 24) = 0;
    *(void *)(v6 + 32) = 0;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 64) = 0;
    uint64_t result = v6 + 192;
    *(void *)(v6 + 96) = 0;
  }
  *((void *)this + 2) = result;
  *(void *)(result - 80) = a2;
  *(double *)(result - 64) = a3;
  return result;
}

uint64_t SKCRenderer::resizeBatchBufferCapacity(SKCRenderer *this, unsigned int a2)
{
  kdebug_trace();
  (***((void (****)(void))this + 54))();
  (***((void (****)(void))this + 58))();
  (***((void (****)(void))this + 56))();
  uint64_t v5 = *((void *)this + 51);
  if (v5) {
    *((void *)this + 13) = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  uint64_t v6 = *((void *)this + 53);
  if (v6) {
    *((void *)this + 12) = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6);
  }
  uint64_t v7 = *((void *)this + 52);
  if (v7) {
    *((void *)this + 1SKCNode::setFlags(this, 66, 1) = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 16))(v7);
  }
  LODWORD(v4) = vcvtpd_u64_f64((double)a2 * 1.5);
  (*(void (**)(void, uint64_t))(**((void **)this + 60) + 32))(*((void *)this + 60), v4);
  SKCRendererGenerateQuadIndexBufferData<unsigned short>((unsigned int **)this + 60);
  uint64_t result = (*(uint64_t (**)(void, void, void))(**((void **)this + 60) + 24))(*((void *)this + 60), 0, 0);
  *((_DWORD *)this + 2SKCNode::setFlags(this, 66, 1) = a2;
  return result;
}

void std::vector<SKCRenderSortInfo *>::push_back[abi:ne180100](void **a1, void *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(void **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = ((char *)v7 - (unsigned char *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v5 - (void)*a1;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      double v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<PKCLineSeg *>>(v4, v12);
    }
    else {
      double v13 = 0;
    }
    double v14 = &v13[8 * v9];
    double v15 = &v13[8 * v12];
    *(void *)double v14 = *a2;
    int v8 = v14 + 8;
    double v17 = (char *)*a1;
    double v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - SKCNode::setFlags(this, 66, 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      double v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *uint64_t v7 = *a2;
    int v8 = v7 + 1;
  }
  a1[1] = v8;
}

void SKCRenderer::drawSolidColorQuads(uint64_t a1, const void *a2, uint64_t a3, int a4, __n128 a5, __n128 a6)
{
  SKCRenderer::flushCurrentBatch((SKCRenderer *)a1);
  if (a2) {
    memcpy((void *)(*(void *)(a1 + 104) + 16 * *(unsigned int *)(a1 + 80)), a2, a3 << 6);
  }
  *(_DWORD *)(a1 + 80) += 4 * a3;
  uint64_t v10 = *(uint64_t **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 232);
  LODWORD(__p.__r_.__value_.__l.__data_) = 31;
  unint64_t v12 = v10[2];
  if (v12 >= v10[3])
  {
    uint64_t v13 = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(v10 + 1, (int *)&__p);
  }
  else
  {
    *(void *)unint64_t v12 = &unk_26BEEC420;
    *(_DWORD *)(v12 + 8) = 31;
    *(void *)(v12 + 24) = 0;
    *(void *)(v12 + 32) = 0;
    *(void *)(v12 + 16) = 0;
    *(void *)(v12 + 64) = 0;
    uint64_t v13 = v12 + 192;
    *(void *)(v12 + 96) = 0;
  }
  v10[2] = v13;
  *(void *)(v13 - 80) = v11;
  *(_DWORD *)(v13 - 64) = a4;
  *(_OWORD *)(v13 - 60) = xmmword_20AE9B300;
  *(_DWORD *)(v13 - 44) = 3;
  double v14 = *(uint64_t **)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(&__p, "a_position");
  jet_command_buffer::set_vertex_buffer(v14, &__p, *(void *)(a1 + 408));
  float v16 = a5.n128_f32[3];
  float v15 = a6.n128_f32[3];
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    float v16 = a5.n128_f32[3];
    float v15 = a6.n128_f32[3];
  }
  unsigned int v17 = *(_DWORD *)(a1 + 32);
  if (v16 > 0.0)
  {
    uint64_t v18 = *(uint64_t **)(a1 + 40);
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_color");
    jet_command_buffer::set_fragment_constant_value(v18, &__p, a5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    jet_command_buffer::draw_indexed(*(uint64_t **)(a1 + 40), 3, *(void *)(a1 + 480), 6 * (v17 >> 2), 6 * a3);
    float v15 = a6.n128_f32[3];
  }
  if (v15 > 0.0)
  {
    unsigned int v19 = *(uint64_t **)(a1 + 40);
    std::string::basic_string[abi:ne180100]<0>(&__p, "u_color");
    jet_command_buffer::set_fragment_constant_value(v19, &__p, a6);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (a3)
    {
      int v20 = 6 * (v17 >> 2);
      do
      {
        jet_command_buffer::draw_indexed(*(uint64_t **)(a1 + 40), 2, *(void *)(a1 + 480), v20, 6);
        v20 += 6;
        --a3;
      }
      while (a3);
    }
  }
}

void sub_20AE89268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SKCRenderer::buildRenderGroup(uint64_t a1, uint64_t *a2)
{
  unint64_t v3 = 0;
  uint64_t v4 = *a2;
  *(void *)(a1 + 1160) = *a2;
  *(_DWORD *)(a1 + 1168) = 0;
  unint64_t v5 = *(float32x4_t **)(a1 + 16);
  float32x4_t v6 = v5[6];
  float32x4_t v7 = v5[7];
  float32x4_t v8 = v5[8];
  float32x4_t v9 = v5[9];
  float32x4_t v10 = *(float32x4_t *)(v4 + 144);
  float32x4_t v11 = *(float32x4_t *)(v4 + 160);
  float32x4_t v12 = *(float32x4_t *)(v4 + 176);
  float32x4_t v44 = *(float32x4_t *)(v4 + 128);
  float32x4_t v45 = v10;
  float32x4_t v46 = v11;
  float32x4_t v47 = v12;
  do
  {
    *(float32x4_t *)((char *)&v48 + v3) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v6, COERCE_FLOAT(*(_OWORD *)((char *)&v44 + v3))), v7, *(float32x2_t *)&v44.f32[v3 / 4], 1), v8, *(float32x4_t *)((char *)&v44 + v3), 2), v9, *(float32x4_t *)((char *)&v44 + v3), 3);
    v3 += 16;
  }
  while (v3 != 64);
  uint64_t v13 = *(const void ***)(v4 + 8);
  double v14 = *(const void ***)(v4 + 16);
  if (v13 != v14)
  {
    float32x4_t v41 = v49;
    float32x4_t v42 = v48;
    float v15 = (float32x4_t *)MEMORY[0x263EF89A8];
    float32x4_t v16 = v51;
    float32x4_t v40 = v50;
    float32x4_t v43 = v51;
    do
    {
      unsigned int v17 = *v13;
      if (*v13)
      {
        int v20 = *(float32x4_t **)(a1 + 16);
        if (v18)
        {
          float32x4_t v21 = v18;
          LODWORD(v19) = v20[4].i32[2];
          SKCSceneNode::matrixForDestination(v18, v19, v20[4].f32[3]);
          SKCSceneNode::getCropGroup(v21);
        }
        float32x4_t v16 = v43;
      }
      else
      {
        int v20 = *(float32x4_t **)(a1 + 16);
      }
      float32x4_t v22 = v20[4];
      if (v20[14].i8[0])
      {
        float32x4_t v23 = vnegq_f32(v22);
        v22.f32[1] = v22.f32[1] + v22.f32[3];
        v22.i32[3] = v23.i32[3];
      }
      unint64_t v24 = 0;
      float32x4_t v25 = *v15;
      float32x4_t v26 = v15[1];
      float32x4_t v35 = v15[2];
      float32x4_t v36 = v15[3];
      float32x4_t v27 = v35;
      v27.i32[2] = -1174203793;
      float32x2_t v28 = vadd_f32(*(float32x2_t *)v22.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL));
      float32x2_t v29 = vsub_f32(v28, *(float32x2_t *)v22.f32);
      float32x4_t v30 = *v15;
      v30.f32[0] = 2.0 / v29.f32[0];
      float32x4_t v31 = v26;
      v31.f32[1] = 2.0 / v29.f32[1];
      float32x2_t v32 = vneg_f32(vadd_f32(*(float32x2_t *)v22.f32, v28));
      int8x16_t v33 = (int8x16_t)v36;
      v33.i32[2] = 0x80000000;
      *(float32x2_t *)v34.f32 = vdiv_f32(v32, v29);
      v34.i64[1] = vextq_s8(v33, v33, 8uLL).u64[0];
      v35.i32[2] = 0.5;
      v36.i32[2] = 0.5;
      float32x4_t v44 = v30;
      float32x4_t v45 = v31;
      float32x4_t v46 = v27;
      float32x4_t v47 = v34;
      do
      {
        *(float32x4_t *)((char *)&v48 + v24) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(*(_OWORD *)((char *)&v44 + v24))), v26, *(float32x2_t *)&v44.f32[v24 / 4], 1), v35, *(float32x4_t *)((char *)&v44 + v24), 2), v36, *(float32x4_t *)((char *)&v44 + v24), 3);
        v24 += 16;
      }
      while (v24 != 64);
      unint64_t v37 = 0;
      float32x4_t v44 = v48;
      float32x4_t v45 = v49;
      float32x4_t v46 = v50;
      float32x4_t v47 = v51;
      do
      {
        *(float32x4_t *)((char *)&v48 + v37) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v42, COERCE_FLOAT(*(_OWORD *)((char *)&v44 + v37))), v41, *(float32x2_t *)&v44.f32[v37 / 4], 1), v40, *(float32x4_t *)((char *)&v44 + v37), 2), v16, *(float32x4_t *)((char *)&v44 + v37), 3);
        v37 += 16;
      }
      while (v37 != 64);
      SKCRenderer::doBuildRenderGroup(a1, (uint64_t)v17, 1.0, 0.0, v48, v49, v50, v51);
      ++v13;
      float32x4_t v16 = v43;
    }
    while (v13 != v14);
    uint64_t v4 = *a2;
  }
  return std::list<SKCAction *>::splice(v4 + 32, *(uint64_t **)(v4 + 40), a1 + 1200, *(void **)(a1 + 1208), *(void **)(a1 + 1224));
}

void sub_20AE895E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  _Unwind_Resume(exception_object);
}

void SKCRenderer::expandRenderGroup(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v3 = a2;
  uint64_t v5 = *a2;
  float32x4_t v6 = (uint64_t **)(*a2 + 32);
  v67[0] = (jet_framebuffer *)compare_node_sort;
  std::list<SKCRenderSortInfo *>::__sort<BOOL (*)(SKCRenderSortInfo *,SKCRenderSortInfo *)>(*(uint64_t ***)(v5 + 40), v6, *(void *)(v5 + 48), (unsigned int (**)(uint64_t, uint64_t))v67);
  uint64_t v72 = (uint64_t)&v72;
  CGPoint v73 = &v72;
  uint64_t v74 = 0;
  uint64_t v7 = *v3;
  float32x4_t v8 = *(jet_command_buffer **)(*v3 + 80);
  if (v8)
  {
    jet_command_buffer::add_command_buffer(*(jet_command_buffer **)(a1 + 40), v8);
    uint64_t v7 = *v3;
  }
  uint64_t v9 = *(void *)(v7 + 40);
  uint64_t v53 = v7 + 32;
  if (v9 != v7 + 32)
  {
    int v55 = 0;
    uint64_t v56 = a1 + 80;
    long long v52 = v3;
    while (1)
    {
      uint64_t v54 = v9;
      float32x4_t v10 = *(uint64_t **)(v9 + 16);
      uint64_t v11 = *v10;
      long long v12 = *((_OWORD *)v10 + 2);
      long long v13 = *((_OWORD *)v10 + 3);
      long long v14 = *((_OWORD *)v10 + 5);
      *(_OWORD *)(a1 + 144) = *((_OWORD *)v10 + 4);
      *(_OWORD *)(a1 + 160) = v14;
      *(_OWORD *)(a1 + 112) = v12;
      *(_OWORD *)(a1 + 128) = v13;
      *(_DWORD *)(a1 + 176) = *((_DWORD *)v10 + 24);
      int v15 = (**(uint64_t (***)(uint64_t, uint64_t))v11)(v11, v56);
      if (v15)
      {
        SKCRenderer::ensureBatchBufferCapacity((SKCRenderer *)a1, v15);
        ++v55;
        if ((*(_DWORD *)(a1 + 80) + v15) > *(_DWORD *)(a1 + 84))
        {
          uint64_t v16 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 16) + 80) + 16))(*(void *)(*(void *)(a1 + 16) + 80));
          std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(v67, v16);
        }
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v11 + 8))(v11, v56))
      {
        int v17 = v55;
        if (!v15) {
          int v17 = v55 + 1;
        }
        int v55 = v17;
        if ((*(unsigned char *)(a1 + 661) & 0x10) != 0 && *(int *)(*(void *)(a1 + 744) + 164) >= 1)
        {
          id v18 = *(id *)(v11 + 8);
          uint64_t v19 = *(void *)(v11 + 80);
          if (v18) {
            BOOL v20 = 1;
          }
          else {
            BOOL v20 = v19 == 0;
          }
          if (!v20)
          {
            do
            {
              id v21 = *(id *)(v19 + 8);
              uint64_t v19 = *(void *)(v19 + 80);
              if (v21) {
                BOOL v22 = 1;
              }
              else {
                BOOL v22 = v19 == 0;
              }
            }
            while (!v22);
            id v18 = v21;
          }
          NSLog(&cfstr_SkcrendererPPa_0.isa, a1, *(unsigned int *)(*(void *)(a1 + 744) + 168), *(unsigned int *)(*(void *)(a1 + 744) + 164), v18);
        }
        SKCRenderer::flushCurrentBatch((SKCRenderer *)a1);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v11 + 72))(v11, v56, a1 + 40);
      }
      if (!v15) {
        goto LABEL_56;
      }
      if (*(int *)(a1 + 668) < 1) {
        goto LABEL_40;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 16))(v11, v56) & 1) == 0) {
        break;
      }
LABEL_41:
      if ((*(unsigned char *)(a1 + 661) & 0x10) != 0)
      {
        id v28 = *(id *)(v11 + 8);
        if (!v28)
        {
          uint64_t v29 = *(void *)(v11 + 80);
          if (v29)
          {
            do
            {
              id v30 = *(id *)(v29 + 8);
              uint64_t v29 = *(void *)(v29 + 80);
              if (v30) {
                BOOL v31 = 1;
              }
              else {
                BOOL v31 = v29 == 0;
              }
            }
            while (!v31);
            id v28 = v30;
          }
        }
        NSLog(&cfstr_SkcrendererPPa_2.isa, a1, *(unsigned int *)(*(void *)(a1 + 744) + 168), *(unsigned int *)(*(void *)(a1 + 744) + 164), v28);
      }
      uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v11 + 32))(v11, v56);
      int8x16_t v33 = *(void **)(a1 + 680);
      if (v33)
      {
        float32x4_t v34 = [v33 attributes];
        uint64_t v35 = [v34 count];

        if (v35) {
          (*(void (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)v11 + 40))(v11, v56, *(void *)(a1 + 680), v32, *(unsigned int *)(a1 + 80));
        }
      }
      unsigned int v36 = *(_DWORD *)(a1 + 80);
      *(_DWORD *)(a1 + 668) += v32;
      *(_DWORD *)(a1 + 80) = v36 + v32;
      if ((*(unsigned char *)(a1 + 660) & 0x1E) != 0)
      {
        (*(void (**)(jet_framebuffer **__return_ptr, uint64_t, uint64_t))(*(void *)v11 + 24))(v67, v11, v56);
        SKCRenderer::addPerNodeDebugOverlays((SKCRenderer *)a1, (void *)v11, (uint64_t)v67, v36, v32);
      }
LABEL_56:
      (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v11 + 56))(v11, v56, &v72);
      if (v74)
      {
        SKCRenderer::flushCurrentBatch((SKCRenderer *)a1);
        float v37 = *(float *)(a1 + 176);
        float32x4_t v60 = *(float32x4_t *)(a1 + 128);
        float32x4_t v61 = *(float32x4_t *)(a1 + 112);
        float32x4_t v58 = *(float32x4_t *)(a1 + 160);
        float32x4_t v59 = *(float32x4_t *)(a1 + 144);
        for (uint64_t i = v73; i != &v72; uint64_t i = (uint64_t *)i[1])
        {
          uint64_t v40 = i[2];
          long long v39 = (std::__shared_weak_count *)i[3];
          v66[0] = v40;
          v66[1] = v39;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unint64_t v41 = 0;
          *(void *)(a1 + 1160) = v40;
          *(_DWORD *)(a1 + 1168) = 0;
          char v42 = *(unsigned char *)(a1 + 656);
          *(unsigned char *)(a1 + 656) = *(unsigned char *)(v40 + 192);
          long long v43 = *(_OWORD *)(v40 + 144);
          long long v44 = *(_OWORD *)(v40 + 160);
          long long v45 = *(_OWORD *)(v40 + 176);
          v75[0] = *(_OWORD *)(v40 + 128);
          v75[1] = v43;
          v75[2] = v44;
          v75[3] = v45;
          do
          {
            *(float32x4_t *)&v67[v41 / 8] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v61, COERCE_FLOAT(v75[v41 / 0x10])), v60, *(float32x2_t *)&v75[v41 / 0x10], 1), v59, (float32x4_t)v75[v41 / 0x10], 2), v58, (float32x4_t)v75[v41 / 0x10], 3);
            v41 += 16;
          }
          while (v41 != 64);
          float32x4_t v47 = *(uint64_t **)(v40 + 8);
          float32x4_t v46 = *(uint64_t **)(v40 + 16);
          if (v47 != v46)
          {
            float32x4_t v64 = v68;
            float32x4_t v65 = *(float32x4_t *)v67;
            float32x4_t v62 = v70;
            float32x4_t v63 = v69;
            do
              SKCRenderer::doBuildRenderGroup(a1, *v47++, v37, 0.0, v65, v64, v63, v62);
            while (v47 != v46);
          }
          std::list<SKCAction *>::splice(v40 + 32, *(uint64_t **)(v40 + 40), a1 + 1200, *(void **)(a1 + 1208), *(void **)(a1 + 1224));
          SKCRenderer::expandRenderGroup(a1, v66, a3);
          *(unsigned char *)(a1 + 656) = v42;
          if (v39) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v39);
          }
        }
        *(float32x4_t *)(a1 + 112) = v61;
        *(float32x4_t *)(a1 + 128) = v60;
        *(float32x4_t *)(a1 + 144) = v59;
        *(float32x4_t *)(a1 + 160) = v58;
        *(float *)(a1 + 176) = v37;
      }
      std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(&v72);
      uint64_t v9 = *(void *)(v54 + 8);
      if (v9 == v53)
      {
        unint64_t v3 = v52;
        uint64_t v7 = *v52;
        int v48 = v55;
        goto LABEL_73;
      }
    }
    if ((*(unsigned char *)(a1 + 661) & 0x10) != 0)
    {
      id v23 = *(id *)(v11 + 8);
      uint64_t v24 = *(void *)(v11 + 80);
      if (v23) {
        BOOL v25 = 1;
      }
      else {
        BOOL v25 = v24 == 0;
      }
      if (!v25)
      {
        do
        {
          id v26 = *(id *)(v24 + 8);
          uint64_t v24 = *(void *)(v24 + 80);
          if (v26) {
            BOOL v27 = 1;
          }
          else {
            BOOL v27 = v24 == 0;
          }
        }
        while (!v27);
        id v23 = v26;
      }
      NSLog(&cfstr_SkcrendererPPa_1.isa, a1, *(unsigned int *)(*(void *)(a1 + 744) + 168), *(unsigned int *)(*(void *)(a1 + 744) + 164), v23);
    }
LABEL_40:
    SKCRenderer::flushCurrentBatch((SKCRenderer *)a1);
    (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(*(void *)v11 + 24))(v71, v11, v56);
    SKCRenderBatch::operator=(a1 + 664, (uint64_t)v71);
    *(_DWORD *)(a1 + 668) = 0;
    goto LABEL_41;
  }
  int v48 = 0;
LABEL_73:
  uint64_t v49 = *(void *)(a1 + 744);
  *(_DWORD *)(v49 + 152) += *(_DWORD *)(v7 + 48);
  *(_DWORD *)(v49 + 160) += v48;
  SKCRenderer::flushCurrentBatch((SKCRenderer *)a1);
  uint64_t v50 = *v3;
  float32x4_t v51 = *(jet_command_buffer **)(*v3 + 96);
  if (v51)
  {
    jet_command_buffer::add_command_buffer(*(jet_command_buffer **)(a1 + 40), v51);
    uint64_t v50 = *v3;
  }
  std::list<SKCAction *>::splice(a1 + 1200, *(uint64_t **)(a1 + 1208), v50 + 32, *(void **)(v50 + 40), (void *)(v50 + 32));
  *(void *)(a1 + 1224) = *(void *)(a1 + 1208);
  std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear(&v72);
}

void sub_20AE89D58(_Unwind_Exception *a1)
{
  std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear((uint64_t *)(v1 - 200));
  _Unwind_Resume(a1);
}

uint64_t SKCRenderer::getBackingContext@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 1016);
  *a2 = *(void *)(this + 1008);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

double SKCRenderer::doBuildRenderGroup(uint64_t a1, uint64_t a2, float a3, float a4, float32x4_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  if (*(unsigned char *)(a2 + 280) || (float v10 = a3 * *(float *)(a2 + 324), v10 <= 0.0))
  {
    return SKCNode::clearDirty((SKCNode *)a2);
  }
  else
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 96))(a2))
    {
      *(void *)&v48[0] = a2;
      if (*(unsigned char *)(a2 + 584))
      {
        __n128 Translation = SKCNode::getTranslation((__n128 *)a2);
        *(void *)&v49[0] = v48;
        *((float32x4_t *)_ZNSt3__16__treeINS_12__value_typeIP12SKCLightNodeDv4_fEENS_19__map_value_compareIS3_S5_NS_4lessIS3_EELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS_5tupleIJRKS3_EEENSH_IJEEEEEENS_4pairINS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 1040), (unint64_t *)v48, (uint64_t)&std::piecewise_construct, (uint64_t **)v49)+ 3) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, Translation.n128_f32[0]), a6, (float32x2_t)Translation.n128_u64[0], 1), a7, (float32x4_t)Translation, 2), a8, (float32x4_t)Translation, 3);
      }
    }
    std::string __p = 0;
    float32x4_t v46 = 0;
    uint64_t v47 = 0;
    v44[0] = a5;
    v44[1] = a6;
    void v44[2] = a7;
    v44[3] = a8;
    *(double *)&long long v13 = (*(double (**)(uint64_t))(*(void *)a2 + 104))(a2);
    uint64_t v14 = 0;
    v48[0] = v13;
    v48[1] = v15;
    v48[2] = v16;
    v48[3] = v17;
    do
    {
      v49[v14] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a5, COERCE_FLOAT(v48[v14])), a6, *(float32x2_t *)&v48[v14], 1), a7, (float32x4_t)v48[v14], 2), a8, (float32x4_t)v48[v14], 3);
      ++v14;
    }
    while (v14 != 4);
    __n128 v41 = (__n128)v49[1];
    __n128 v43 = (__n128)v49[0];
    __n128 v37 = (__n128)v49[3];
    __n128 v39 = (__n128)v49[2];
    Z__n128 Translation = SKCNode::getZTranslation((SKCNode *)a2);
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 48))(a2, a1 + 80, &__p);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 64))(a2, a1 + 80, a1 + 56);
    double v19 = SKCNode::clearDirty((SKCNode *)a2);
    float v20 = a4 + ZTranslation;
    if (!*(unsigned char *)(a1 + 1001)
      || (*(unsigned int (**)(uint64_t, _OWORD *, double))(*(void *)a2 + 128))(a2, v44, v19))
    {
      uint64_t Info = SKCRenderer::{unnamed type#1}::nextInfo(a1 + 1152);
      *(void *)&v48[0] = Info;
      *(void *)uint64_t Info = a2;
      *(__n128 *)(Info + 32) = v43;
      *(__n128 *)(Info + 48) = v41;
      *(__n128 *)(Info + 64) = v39;
      *(__n128 *)(Info + 80) = v37;
      *(float *)(Info + 96) = a3;
      *(float *)(Info + 8) = v20;
      if (*(unsigned char *)(a1 + 1000))
      {
        uint64_t v23 = *(void *)(a2 + 288) & 0xFLL;
        if (v24)
        {
          BOOL v25 = v24;
          id v26 = v24[76];
          BOOL v27 = v26;
          if (v26)
          {
            [v26 _backingTexture];
            uint64_t v28 = 32 * (v49[0] & 0x7FFFFLL);
            if (*((void *)&v49[0] + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v49[0] + 1));
            }
          }
          else
          {
            uint64_t v28 = 0;
            v49[0] = 0uLL;
          }

          id v29 = v25[75];
          id v30 = v29;
          if (v29)
          {
            [v29 _backingTexture];
            uint64_t v31 = (*(void *)&v49[0] & 0x7FFFFLL) << 25;
            if (*((void *)&v49[0] + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v49[0] + 1));
            }
          }
          else
          {
            uint64_t v31 = 0;
            v49[0] = 0uLL;
          }

          v23 |= v28 | v31 | ((void)v25[74] << 45);
        }
      }
      else
      {
        uint64_t v23 = *(unsigned int *)(a1 + 1168);
      }
      *(void *)(Info + 16) = v23;
      if (v32 && v32[141]) {
        std::vector<SKCRenderSortInfo *>::push_back[abi:ne180100]((void **)(a1 + 1088), v48);
      }
      ++*(_DWORD *)(a1 + 1168);
    }
    int8x16_t v33 = __p;
    if (!*(unsigned char *)(a1 + 1002))
    {
      float32x4_t v34 = v46;
      if (v46 != __p)
      {
        do
          SKCRenderer::doBuildRenderGroup(a1, *v33++, v10, v20, v43, v41, v39, v37);
        while (v33 != v34);
        int8x16_t v33 = __p;
      }
    }
    if (v33)
    {
      float32x4_t v46 = v33;
      operator delete(v33);
    }
  }
  return result;
}

void sub_20AE8A294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SKCRenderer::{unnamed type#1}::nextInfo(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  if (v1 == a1 + 48) {
    operator new();
  }
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(a1 + 72) = *(void *)(v1 + 8);
  return v2;
}

void SKCRenderer::addPerSceneDebugOverlays(SKCRenderer *this, id *a2, simd_float4x4 a3)
{
  simd_float4x4 v27 = a3;
  uint64_t v5 = [*((id *)this + 159) valueForKey:@"debugDrawPhysics"];
  uint64_t v6 = [v5 BOOLValue];

  uint64_t v7 = [*((id *)this + 159) valueForKey:@"debugDrawPhysicsFields"];
  uint64_t v8 = [v7 BOOLValue];

  if ((v8 | v6) == 1)
  {
    id v9 = a2[1];
    float v10 = [v9 _pkPhysicsWorld];
    PKGet_PTM_RATIO();
    unsigned __int32 v12 = v11;
    sk_matrix_get_GLKMatrix((uint64_t)&v27, (uint64_t)&__p);
    __n128 v13 = glsk_matrix_make(&__p, (uint64_t)v26);
    v13.n128_u32[0] = v12;
    [v10 debugDraw:v26 matrix:v6 showsPhysics:0 showsOutlineInterior:v8 showsFields:v13.n128_f64[0]];

    uint64_t v14 = [v9 _pkPhysicsWorld];
    long long v15 = (uint64_t *)[v14 debugDrawPacket];

    unint64_t v16 = (unint64_t)(v15[1] - *v15) >> 3;
    if (v16)
    {
      long long v17 = (jet_buffer_pool **)((char *)this + 1256);
      id v18 = (jet_buffer_pool *)*((void *)this + 157);
      if (!v18
        || *((_DWORD *)v18 + 4) < v16
        && ((v19 = (std::__shared_weak_count *)*((void *)this + 158), *long long v17 = 0, *((void *)this + 158) = 0, !v19)
         || (std::__shared_weak_count::__release_shared[abi:ne180100](v19), (id v18 = *v17) == 0)))
      {
        uint64_t v20 = (*(uint64_t (**)(void, void, uint64_t, unint64_t))(**((void **)this + 126) + 16))(*((void *)this + 126), 0, 4, v16);
        std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(&__p, v20);
      }
      jet_buffer_pool::next_buffer(v18);
      std::vector<std::shared_ptr<jet_buffer_pool>>::push_back[abi:ne180100]((uint64_t *)this + 97, (long long *)((char *)this + 1256));
      unint64_t v21 = _ZN15jet_buffer_pool8get_dataIDv4_fEEPT_j(*v17, 0);
      uint64_t v22 = *v15;
      if (v15[1] != *v15)
      {
        unint64_t v23 = 0;
        do
        {
          *(void *)&long long v24 = *(void *)(v22 + 8 * v23);
          *((void *)&v24 + SKCNode::setFlags(this, 66, 1) = 0x3F80000000000000;
          *(_OWORD *)(v21 + 16 * v23++) = v24;
          uint64_t v22 = *v15;
        }
        while (v23 < (v15[1] - *v15) >> 3);
      }
      jet_buffer_pool::commit_data(*v17);
      operator new();
    }
  }
}

void sub_20AE8A710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }

  _Unwind_Resume(a1);
}

id SKCRenderer::textureFromNode(SKCRenderer *this, char **a2, float a3, NSDictionary *a4)
{
  uint64_t v7 = a4;
  uint64_t v8 = v7;
  if (v7
    && ([(NSDictionary *)v7 valueForKey:@"textureFromNodeCropRect"],
        id v9 = objc_claimAutoreleasedReturnValue(),
        v9,
        v9))
  {
    float v10 = [(NSDictionary *)v8 valueForKey:@"textureFromNodeCropRect"];
    CGRect v41 = CGRectFromString(v10);
    CGFloat y = v41.origin.y;
    CGFloat x = v41.origin.x;
    CGFloat width = v41.size.width;
    CGFloat height = v41.size.height;

    v11.f64[0] = width;
    v11.f64[1] = height;
    v12.f64[0] = x;
    v12.f64[1] = y;
    float32x4_t AABB = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v12), v11);
  }
  else
  {
    if (!a2 {
      || (uint64_t v14 = *a2,
    }
    {
      long long v15 = [(NSDictionary *)v8 objectForKeyedSubscript:@"doNotRenderChildNodes"];
      int v16 = [v15 BOOLValue];

      if (!v16)
      {
        v39.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox(a2);
        v39.columns[1] = v21;
        v39.columns[2] = v22;
        v39.columns[3] = v23;
        float32x4_t AABB = SKCBoundingBoxGetAABB(&v39);
        goto LABEL_10;
      }
      uint64_t v14 = *a2;
    }
    *(double *)v17.i64 = (*((double (**)(char **))v14 + 15))(a2);
    v39.columns[0] = v17;
    v39.columns[1] = v18;
    v39.columns[2] = v19;
    v39.columns[3] = v20;
    float32x4_t AABB = SKCBoundingBoxGetAABB(&v39);
  }
LABEL_10:
  unsigned int v24 = (float)(ceilf(AABB.f32[2]) * a3);
  unsigned int v25 = (float)(ceilf(AABB.f32[3]) * a3);
  if (v8)
  {
    id v26 = [(NSDictionary *)v8 valueForKey:@"textureMaxRenderSize"];

    if (v26)
    {
      simd_float4x4 v27 = [(NSDictionary *)v8 valueForKey:@"textureMaxRenderSize"];
      uint64_t v28 = v27;
      if (v27)
      {
        unsigned int v29 = [v27 unsignedIntegerValue];
        if (v24 > v29 || v25 > v29)
        {
          if (v24 <= v25)
          {
            if (v25 <= v24) {
              unsigned int v24 = v29;
            }
            else {
              unsigned int v24 = (float)((float)((float)v24 / (float)v25) * (float)v29);
            }
            unsigned int v25 = v29;
          }
          else
          {
            unsigned int v25 = (float)((float)((float)v25 / (float)v24) * (float)v29);
            unsigned int v24 = v29;
          }
        }
      }
    }
  }
  if (v24) {
    BOOL v31 = v25 == 0;
  }
  else {
    BOOL v31 = 1;
  }
  if (!v31)
  {
    uint64_t v32 = *((void *)this + 127);
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t texture_2d = jet_context::create_texture_2d();
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v39, texture_2d);
  }

  return 0;
}

void sub_20AE8AC6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void **std::vector<std::shared_ptr<jet_buffer_pool>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<jet_buffer_pool>>::__swap_out_circular_buffer(a1, v18);
    id v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<jet_buffer>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    id v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20AE8AE48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<jet_buffer>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

unint64_t _ZN15jet_buffer_pool8get_dataIDv4_fEEPT_j(jet_buffer_pool *a1, unsigned int a2)
{
  uint64_t data = jet_buffer_pool::get_data(a1);
  unsigned int v5 = *((_DWORD *)a1 + 2) - 1;
  if (v5 > 7) {
    int v6 = 4;
  }
  else {
    int v6 = dword_20AE9CE70[v5];
  }
  return data + (*((_DWORD *)a1 + 3) * v6) * (unint64_t)a2;
}

uint64_t jet_command_buffer::begin_render_pass(jet_command_buffer *this, jet_framebuffer *a2)
{
  int v6 = 32;
  unint64_t v4 = *((void *)this + 2);
  if (v4 >= *((void *)this + 3))
  {
    uint64_t result = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>((uint64_t *)this + 1, &v6);
  }
  else
  {
    *(void *)unint64_t v4 = &unk_26BEEC420;
    *(_DWORD *)(v4 + 8) = 32;
    *(void *)(v4 + 24) = 0;
    *(void *)(v4 + 32) = 0;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 64) = 0;
    uint64_t result = v4 + 192;
    *(void *)(v4 + 96) = 0;
  }
  *((void *)this + 2) = result;
  *(void *)(result - 80) = a2;
  return result;
}

BOOL compare_node_sort(uint64_t a1, uint64_t a2)
{
  float v2 = *(float *)(a1 + 8);
  float v3 = *(float *)(a2 + 8);
  if ((COERCE_UNSIGNED_INT(v2 - v3) & 0x60000000) != 0) {
    return v2 < v3;
  }
  else {
    return *(void *)(a1 + 16) < *(void *)(a2 + 16);
  }
}

uint64_t SKCRenderer::ensureBatchBufferCapacity(SKCRenderer *this, int a2)
{
  unsigned int v2 = *((_DWORD *)this + 21);
  unsigned int v3 = *((_DWORD *)this + 20) + a2;
  if (v3 >= v2)
  {
    if (v3 > 0xAAA8) {
      return 0;
    }
    double v5 = (double)v3 * 1.5;
    unsigned int v6 = 2 * v2;
    if (v5 < (double)v6) {
      double v5 = (double)v6;
    }
    if (v5 > 43688.0) {
      double v5 = 43688.0;
    }
    SKCRenderer::resizeBatchBufferCapacity(this, v5);
  }
  return 1;
}

void **std::vector<std::shared_ptr<jet_framebuffer>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<jet_render_op>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    void v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer>>>((uint64_t)result, v13);
    long long v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<jet_framebuffer>>::__swap_out_circular_buffer(a1, v18);
    id v9 = (void *)a1[1];
    uint64_t result = std::__split_buffer<std::shared_ptr<jet_buffer>>::~__split_buffer(v18);
  }
  else
  {
    *uint64_t v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    id v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_20AE8B0F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<jet_buffer>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t SKCRenderBatch::operator=(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  objc_storeStrong((id *)(a1 + 16), *(id *)(a2 + 16));
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);

  return a1;
}

void SKCRenderer::~SKCRenderer(SKCRenderer *this)
{
  while (dispatch_semaphore_signal(*(dispatch_semaphore_t *)this))
    ;
  for (uint64_t i = (void *)*((void *)this + 151); i != (void *)((char *)this + 1200); uint64_t i = (void *)i[1])
  {
    uint64_t v3 = i[2];
    if (v3) {
      MEMORY[0x21052EA30](v3, 0x1020C40601E13ABLL);
    }
  }
  std::__list_imp<SKCRenderSortInfo *>::clear((void *)this + 150);
  for (uint64_t j = (void *)*((void *)this + 148); j != (void *)((char *)this + 1176); uint64_t j = (void *)j[1])
  {
    uint64_t v5 = j[2];
    if (v5) {
      MEMORY[0x21052EA30](v5, 0x1020C40601E13ABLL);
    }
  }
  std::__list_imp<SKCRenderSortInfo *>::clear((void *)this + 147);
  uint64_t v6 = *((void *)this + 143);
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 88))(v6);
  }
  uint64_t v7 = *((void *)this + 142);
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 88))(v7);
  }

  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 158);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v14 = (void **)((char *)this + 1232);
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100](&v14);
  std::__list_imp<SKCRenderSortInfo *>::clear((void *)this + 150);
  std::__list_imp<SKCRenderSortInfo *>::clear((void *)this + 147);
  std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::destroy((uint64_t)this + 1112, *((void **)this + 140));
  id v9 = (void *)*((void *)this + 136);
  if (v9)
  {
    *((void *)this + 137) = v9;
    operator delete(v9);
  }
  std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::destroy((uint64_t)this + 1064, *((void **)this + 134));
  std::__tree<std::__value_type<unsigned short,double>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,double>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,double>>>::destroy((uint64_t)this + 1040, *((void **)this + 131));
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 129);
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  unint64_t v11 = (std::__shared_weak_count *)*((void *)this + 127);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }

  SKCStats::~SKCStats((SKCStats *)((char *)this + 808));
  SKCRenderInfo::~SKCRenderInfo((id *)this + 10);
  std::__list_imp<std::shared_ptr<SKCRenderSortGroup>>::clear((uint64_t *)this + 7);
  uint64_t v12 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  unint64_t v13 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
}

void SKCRenderInfo::~SKCRenderInfo(id *this)
{
  uint64_t v28 = this + 87;
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100](&v28);
  uint64_t v28 = this + 84;
  std::vector<std::shared_ptr<PKCField>>::__destroy_vector::operator()[abi:ne180100](&v28);

  unsigned int v2 = (std::__shared_weak_count *)this[71];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)this[69];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)this[67];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)this[65];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)this[63];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)this[61];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)this[59];
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  id v9 = (std::__shared_weak_count *)this[57];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = (std::__shared_weak_count *)this[55];
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  unint64_t v11 = (std::__shared_weak_count *)this[53];
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  uint64_t v12 = (std::__shared_weak_count *)this[51];
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  unint64_t v13 = (std::__shared_weak_count *)this[49];
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = (std::__shared_weak_count *)this[47];
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  long long v15 = (std::__shared_weak_count *)this[45];
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  uint64_t v16 = (std::__shared_weak_count *)this[40];
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  long long v17 = (std::__shared_weak_count *)this[38];
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  simd_float4 v18 = (std::__shared_weak_count *)this[36];
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  simd_float4 v19 = (std::__shared_weak_count *)this[34];
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  simd_float4 v20 = (std::__shared_weak_count *)this[32];
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  simd_float4 v21 = (std::__shared_weak_count *)this[30];
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  simd_float4 v22 = (std::__shared_weak_count *)this[28];
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  simd_float4 v23 = (std::__shared_weak_count *)this[26];
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  unsigned int v24 = (std::__shared_weak_count *)this[24];
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  unsigned int v25 = (std::__shared_weak_count *)this[22];
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  id v26 = (std::__shared_weak_count *)this[20];
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  simd_float4x4 v27 = (std::__shared_weak_count *)this[18];
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
}

void std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20AE8B540(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context_Metal,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_context *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context>,std::allocator<jet_context>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_context *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context>,std::allocator<jet_context>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 128))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_context *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context>,std::allocator<jet_context>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context_OpenGL,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20AE8B670(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context_Metal,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_context_OpenGL *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context_OpenGL>,std::allocator<jet_context_OpenGL>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_context_OpenGL *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context_OpenGL>,std::allocator<jet_context_OpenGL>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 128))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_context_OpenGL *,std::shared_ptr<jet_context>::__shared_ptr_default_delete<jet_context,jet_context_OpenGL>,std::allocator<jet_context_OpenGL>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,SKCLightMaskUniforms>,0>(a2 + 4);
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,SKCLightMaskUniforms>,0>(void *a1)
{
  unsigned int v2 = (std::__shared_weak_count *)a1[13];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[11];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[9];
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::destroy(a1, a2[1]);
    unint64_t v4 = (std::__shared_weak_count *)a2[6];
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    operator delete(a2);
  }
}

void std::shared_ptr<jet_sampler>::shared_ptr[abi:ne180100]<jet_sampler,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20AE8B8B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_sampler>::shared_ptr[abi:ne180100]<jet_sampler,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_sampler *,std::shared_ptr<jet_sampler>::__shared_ptr_default_delete<jet_sampler,jet_sampler>,std::allocator<jet_sampler>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_sampler *,std::shared_ptr<jet_sampler>::__shared_ptr_default_delete<jet_sampler,jet_sampler>,std::allocator<jet_sampler>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_sampler *,std::shared_ptr<jet_sampler>::__shared_ptr_default_delete<jet_sampler,jet_sampler>,std::allocator<jet_sampler>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<jet_stencil_mode>::shared_ptr[abi:ne180100]<jet_stencil_mode,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20AE8B9E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_stencil_mode>::shared_ptr[abi:ne180100]<jet_stencil_mode,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_stencil_mode *,std::shared_ptr<jet_stencil_mode>::__shared_ptr_default_delete<jet_stencil_mode,jet_stencil_mode>,std::allocator<jet_stencil_mode>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_stencil_mode *,std::shared_ptr<jet_stencil_mode>::__shared_ptr_default_delete<jet_stencil_mode,jet_stencil_mode>,std::allocator<jet_stencil_mode>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_stencil_mode *,std::shared_ptr<jet_stencil_mode>::__shared_ptr_default_delete<jet_stencil_mode,jet_stencil_mode>,std::allocator<jet_stencil_mode>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<jet_depth_stencil_mode>::shared_ptr[abi:ne180100]<jet_depth_stencil_mode,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20AE8BB18(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_depth_stencil_mode>::shared_ptr[abi:ne180100]<jet_depth_stencil_mode,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_depth_stencil_mode *,std::shared_ptr<jet_depth_stencil_mode>::__shared_ptr_default_delete<jet_depth_stencil_mode,jet_depth_stencil_mode>,std::allocator<jet_depth_stencil_mode>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_depth_stencil_mode *,std::shared_ptr<jet_depth_stencil_mode>::__shared_ptr_default_delete<jet_depth_stencil_mode,jet_depth_stencil_mode>,std::allocator<jet_depth_stencil_mode>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_depth_stencil_mode *,std::shared_ptr<jet_depth_stencil_mode>::__shared_ptr_default_delete<jet_depth_stencil_mode,jet_depth_stencil_mode>,std::allocator<jet_depth_stencil_mode>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::shared_ptr<jet_constant>::shared_ptr[abi:ne180100]<jet_constant,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20AE8BC48(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::shared_ptr<jet_constant>::shared_ptr[abi:ne180100]<jet_constant,void>(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<jet_constant *,std::shared_ptr<jet_constant>::__shared_ptr_default_delete<jet_constant,jet_constant>,std::allocator<jet_constant>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

uint64_t std::__shared_ptr_pointer<jet_constant *,std::shared_ptr<jet_constant>::__shared_ptr_default_delete<jet_constant,jet_constant>,std::allocator<jet_constant>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 112))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<jet_constant *,std::shared_ptr<jet_constant>::__shared_ptr_default_delete<jet_constant,jet_constant>,std::allocator<jet_constant>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int,SKCLightMaskUniforms>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,SKCLightMaskUniforms>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,SKCLightMaskUniforms>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  uint64_t v8 = a1 + 1;
  id v9 = a1 + 1;
  if (v6)
  {
    unsigned int v10 = *a2;
    while (1)
    {
      while (1)
      {
        id v9 = (uint64_t **)v6;
        unsigned int v11 = *((_DWORD *)v6 + 8);
        if (v10 >= v11) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    uint64_t v12 = operator new(0x90uLL);
    v14[1] = v7;
    v12[8] = **a4;
    *((_OWORD *)v12 + 7) = 0u;
    *((_OWORD *)v12 + 8) = 0u;
    *((_OWORD *)v12 + 5) = 0u;
    *((_OWORD *)v12 + 6) = 0u;
    *((_OWORD *)v12 + 3) = 0u;
    *((_OWORD *)v12 + 4) = 0u;
    char v15 = 1;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,SKCLightMaskUniforms>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,SKCLightMaskUniforms>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,SKCLightMaskUniforms>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,SKCLightMaskUniforms>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned int const,SKCLightMaskUniforms>,0>(v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t _ZNSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_ED1Ev(uint64_t a1)
{
  return a1;
}

void _ZNSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_ED0Ev(uint64_t a1)
{
  JUMPOUT(0x21052EA30);
}

void *_ZNKSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_E7__cloneEv(uint64_t a1)
{
  unsigned int v2 = operator new(0x10uLL);
  *unsigned int v2 = &unk_26BEEEE60;
  v2[1] = MEMORY[0x21052F3F0](*(void *)(a1 + 8));
  return v2;
}

uint64_t _ZNKSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_E7__cloneEPNS0_6__baseISH_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26BEEEE60;
  uint64_t result = MEMORY[0x21052F3F0](*(void *)(a1 + 8));
  a2[1] = result;
  return result;
}

void _ZNSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_E7destroyEv(uint64_t a1)
{
}

void _ZNSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_E18destroy_deallocateEv(id *a1)
{
  operator delete(a1);
}

uint64_t _ZNSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_EclEv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t _ZNKSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_E6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNSt3__110shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSE_dU13block_pointerFvvEE3__0))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNS_10shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSG_dU13block_pointerFvvEE3__0NS_9allocatorISJ_EESH_E11target_typeEv()
{
  return &_ZTIZN11SKCRenderer6renderEP7SKCNodeDv4_fRKNSt3__110shared_ptrI15jet_framebufferEEDv4_j13simd_float4x4bP12NSDictionaryP8SKCStatsSE_dU13block_pointerFvvEE3__0;
}

uint64_t *std::__tree<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::__map_value_compare<SKCLightNode *,std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>,std::less<SKCLightNode *>,true>,std::allocator<std::__value_type<SKCLightNode *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>>>>::__emplace_unique_key_args<SKCLightNode *,std::piecewise_construct_t const&,std::tuple<SKCLightNode * const&>,std::tuple<>>(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        id v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    id v9 = a1 + 1;
LABEL_10:
    unsigned int v11 = (uint64_t *)operator new(0x38uLL);
    float32x4_t v11[4] = **a4;
    v11[5] = 0;
    v11[6] = 0;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void std::shared_ptr<std::vector<SKCRenderSortInfo *>>::shared_ptr[abi:ne180100]<std::vector<SKCRenderSortInfo *>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_20AE8C148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    std::default_delete<std::vector<SKCRenderSortInfo *>>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::vector<SKCRenderSortInfo *> *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>::__shared_ptr_default_delete<std::vector<SKCRenderSortInfo *>,std::vector<SKCRenderSortInfo *>>,std::allocator<std::vector<SKCRenderSortInfo *>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x21052EA30);
}

void std::__shared_ptr_pointer<std::vector<SKCRenderSortInfo *> *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>::__shared_ptr_default_delete<std::vector<SKCRenderSortInfo *>,std::vector<SKCRenderSortInfo *>>,std::allocator<std::vector<SKCRenderSortInfo *>>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<std::vector<SKCRenderSortInfo *> *,std::shared_ptr<std::vector<SKCRenderSortInfo *>>::__shared_ptr_default_delete<std::vector<SKCRenderSortInfo *>,std::vector<SKCRenderSortInfo *>>,std::allocator<std::vector<SKCRenderSortInfo *>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::default_delete<std::vector<SKCRenderSortInfo *>>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unsigned int v2 = *(void **)a2;
    if (*(void *)a2)
    {
      *(void *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x21052EA30);
  }
}

uint64_t *_ZNSt3__16__treeINS_12__value_typeIP12SKCLightNodeDv4_fEENS_19__map_value_compareIS3_S5_NS_4lessIS3_EELb1EEENS_9allocatorIS5_EEE25__emplace_unique_key_argsIS3_JRKNS_21piecewise_construct_tENS_5tupleIJRKS3_EEENSH_IJEEEEEENS_4pairINS_15__tree_iteratorIS5_PNS_11__tree_nodeIS5_PvEElEEbEERKT_DpOT0_(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        id v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    id v9 = a1 + 1;
LABEL_10:
    unsigned int v11 = (uint64_t *)operator new(0x40uLL);
    float32x4_t v11[4] = **a4;
    v11[6] = 0;
    v11[7] = 0;
    std::__tree<std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,SKSpriteNode * {__strong}>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,SKSpriteNode * {__strong}>>>::__insert_node_at(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t std::vector<std::shared_ptr<jet_buffer_pool>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer_pool>>,std::reverse_iterator<std::shared_ptr<jet_buffer_pool>*>,std::reverse_iterator<std::shared_ptr<jet_buffer_pool>*>,std::reverse_iterator<std::shared_ptr<jet_buffer_pool>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<jet_buffer_pool>>,std::reverse_iterator<std::shared_ptr<jet_buffer_pool>*>,std::reverse_iterator<std::shared_ptr<jet_buffer_pool>*>,std::reverse_iterator<std::shared_ptr<jet_buffer_pool>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + SKCNode::setFlags(this, 66, 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + SKCNode::setFlags(this, 66, 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<jet_buffer_pool>>,std::reverse_iterator<std::shared_ptr<jet_buffer_pool>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<jet_buffer_pool>>,std::reverse_iterator<std::shared_ptr<jet_buffer_pool>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<jet_buffer>>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t *std::list<SKCRenderSortInfo *>::__sort<BOOL (*)(SKCRenderSortInfo *,SKCRenderSortInfo *)>(uint64_t **a1, uint64_t **a2, unint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  unint64_t v4 = a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      uint64_t v7 = *a2;
      if ((*a4)((*a2)[2], (uint64_t)a1[2]))
      {
        uint64_t v8 = *v7;
        *(void *)(v8 + 8) = v7[1];
        *(void *)v7[1] = v8;
        long long v9 = *v4;
        v9[1] = (uint64_t)v7;
        *uint64_t v7 = (uint64_t)v9;
        *unint64_t v4 = v7;
        v7[1] = (uint64_t)v4;
        return v7;
      }
    }
    else
    {
      unint64_t v11 = a3 >> 1;
      unint64_t v12 = (a3 >> 1) + 1;
      char v13 = a1;
      do
      {
        char v13 = (uint64_t **)v13[1];
        --v12;
      }
      while (v12 > 1);
      long long v14 = (uint64_t **)std::list<SKCRenderSortInfo *>::__sort<BOOL (*)(SKCRenderSortInfo *,SKCRenderSortInfo *)>(a1, v13, a3 >> 1, a4);
      unint64_t v4 = (uint64_t **)std::list<SKCRenderSortInfo *>::__sort<BOOL (*)(SKCRenderSortInfo *,SKCRenderSortInfo *)>(v13, a2, a3 - v11, a4);
      if ((*a4)((uint64_t)v4[2], (uint64_t)v14[2]))
      {
        for (uint64_t i = v4[1]; i != (uint64_t *)a2; uint64_t i = (uint64_t *)i[1])
        {
          if (!(*a4)(i[2], (uint64_t)v14[2])) {
            goto LABEL_14;
          }
        }
        uint64_t i = (uint64_t *)a2;
LABEL_14:
        uint64_t v17 = *i;
        simd_float4 v18 = *v4;
        v18[1] = *(void *)(*i + 8);
        **(void **)(v17 + 8) = v18;
        simd_float4 v19 = *v14;
        uint64_t v16 = v14[1];
        v19[1] = (uint64_t)v4;
        *unint64_t v4 = v19;
        std::__shared_weak_count *v14 = (uint64_t *)v17;
        *(void *)(v17 + 8) = v14;
      }
      else
      {
        uint64_t v16 = v14[1];
        uint64_t i = (uint64_t *)v4;
        unint64_t v4 = v14;
      }
      if (v16 != i && i != (uint64_t *)a2)
      {
        simd_float4 v20 = i;
        do
        {
          if ((*a4)(i[2], v16[2]))
          {
            for (uint64_t j = (uint64_t *)i[1]; j != (uint64_t *)a2; uint64_t j = (uint64_t *)j[1])
            {
              if (!(*a4)(j[2], v16[2])) {
                goto LABEL_25;
              }
            }
            uint64_t j = (uint64_t *)a2;
LABEL_25:
            uint64_t v23 = *j;
            uint64_t v24 = *i;
            *(void *)(v24 + 8) = *(void *)(*j + 8);
            **(void **)(v23 + 8) = v24;
            if (v20 == i) {
              simd_float4 v20 = j;
            }
            uint64_t v25 = *v16;
            simd_float4 v22 = (uint64_t *)v16[1];
            *(void *)(v25 + 8) = i;
            *uint64_t i = v25;
            uint64_t *v16 = v23;
            *(void *)(v23 + 8) = v16;
            uint64_t i = j;
          }
          else
          {
            simd_float4 v22 = (uint64_t *)v16[1];
          }
          BOOL v26 = v22 == v20 || i == (uint64_t *)a2;
          uint64_t v16 = v22;
        }
        while (!v26);
      }
    }
  }
  return (uint64_t *)v4;
}

uint64_t std::vector<std::shared_ptr<jet_framebuffer>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<jet_framebuffer>>,std::reverse_iterator<std::shared_ptr<jet_framebuffer>*>,std::reverse_iterator<std::shared_ptr<jet_framebuffer>*>,std::reverse_iterator<std::shared_ptr<jet_framebuffer>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<jet_framebuffer>>,std::reverse_iterator<std::shared_ptr<jet_framebuffer>*>,std::reverse_iterator<std::shared_ptr<jet_framebuffer>*>,std::reverse_iterator<std::shared_ptr<jet_framebuffer>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + SKCNode::setFlags(this, 66, 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + SKCNode::setFlags(this, 66, 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<jet_framebuffer>>,std::reverse_iterator<std::shared_ptr<jet_framebuffer>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<jet_framebuffer>>,std::reverse_iterator<std::shared_ptr<jet_framebuffer>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<jet_buffer>>,std::reverse_iterator<std::shared_ptr<jet_buffer>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

BOOL SKGenerateNormalMapWithMultiSampling(int a1, int a2, unsigned int *a3, unint64_t a4, double a5, double a6)
{
  if (a4 >= 4) {
    uint64_t v11 = 4;
  }
  else {
    uint64_t v11 = a4;
  }
  if (v11)
  {
    unint64_t v12 = [MEMORY[0x263EFF980] arrayWithCapacity:v11];
    if (v12)
    {
      size_t size = 4 * a1 * a2;
      float32x4_t v63 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", a3);
      uint64_t v54 = v12;
      int v55 = a3;
      SKGenerateNormalMap(a1, a2, a3, a5, a6);
      uint64_t v13 = 0;
      uint64_t v62 = 4 * a1;
      double v67 = (double)a2;
      double v68 = (double)a1;
      unsigned int v61 = *MEMORY[0x263F008B0];
      uint64_t v60 = *MEMORY[0x263F00968];
      uint64_t v59 = *MEMORY[0x263F009D0];
      double v56 = a6 + a6;
      int v57 = a1;
      int v58 = a2;
      uint64_t v64 = a2 * (uint64_t)a1;
      do
      {
        DeviceRGB = CGColorSpaceCreateDeviceRGB();
        uint64_t v15 = objc_msgSend(MEMORY[0x263F00650], "imageWithBitmapData:bytesPerRow:size:format:colorSpace:", v63, v62, v61, DeviceRGB, v68, v67);
        CGColorSpaceRelease(DeviceRGB);
        uint64_t v16 = (void *)MEMORY[0x263F00640];
        ++v13;
        *(float *)&double v17 = (float)(int)v13 + (float)(int)v13;
        simd_float4 v18 = [NSNumber numberWithFloat:v17];
        float32x4_t v65 = (void *)v15;
        simd_float4 v19 = objc_msgSend(v16, "filterWithName:keysAndValues:", @"CIGaussianBlur", v60, v15, @"inputRadius", v18, 0);

        simd_float4 v20 = [v19 valueForKey:v59];
        [v20 extent];
        double v22 = v21;
        double v24 = v23;
        double v26 = v25;
        double v28 = v27;
        unsigned int v29 = [MEMORY[0x263F00628] contextWithOptions:0];
        id v30 = (CGImage *)objc_msgSend(v29, "createCGImage:fromRect:", v20, v22 + (v26 - v68) * 0.5, v24 + (v28 - v67) * 0.5);
        DataProvider = CGImageGetDataProvider(v30);
        CFDataRef v32 = CGDataProviderCopyData(DataProvider);
        BytePtr = CFDataGetBytePtr(v32);
        float32x4_t v34 = malloc_type_malloc(size, 0xC1D1C082uLL);
        memcpy(v34, BytePtr, size);
        SKGenerateNormalMap(v57, v58, (unsigned int *)v34, a5, v56 * (double)(int)v13);
        if (v64)
        {
          uint64_t v39 = v64;
          uint64_t v40 = v55;
          do
          {
            LOBYTE(v35) = *((unsigned char *)v40 + 3);
            float v35 = (float)LODWORD(v35) * 0.0039216;
            LOBYTE(v36) = BytePtr[3];
            float v36 = (float)LODWORD(v36) * 0.0039216;
            float v41 = fminf(v35, v36);
            if (v41 != 0.0)
            {
              float v42 = v35 + (float)((float)(1.0 - v35) * v41);
              if (v42 != 0.0)
              {
                uint64_t v43 = 0;
                float v44 = v41 / v42;
                float v45 = 1.0 - v44;
                do
                {
                  LOBYTE(v37) = *((unsigned char *)v40 + v43);
                  LOBYTE(v38) = BytePtr[v43];
                  float v46 = (float)(v45 * (float)((float)((float)LODWORD(v37) / v35) * 0.0039216))
                      + (float)((float)((float)((float)((float)LODWORD(v37) / v35) * 0.0039216)
                                      * (float)((float)((float)((float)LODWORD(v37) / v35) * 0.0039216)
                                              + (float)((float)((float)((float)((float)v38 / v36) * 0.0039216)
                                                              + (float)((float)((float)v38 / v36) * 0.0039216))
                                                      * (float)(1.0
                                                              - (float)((float)((float)LODWORD(v37) / v35) * 0.0039216)))))
                              * v44);
                  unsigned int v38 = 1132396544;
                  float v37 = v46 * 255.0;
                  *((unsigned char *)v40 + v43++) = (int)v37;
                }
                while (v43 != 3);
                LOBYTE(v36) = *(unsigned char *)v40;
                float v36 = (float)((float)((float)LODWORD(v36) * 0.0039216) + -0.5)
                    + (float)((float)((float)LODWORD(v36) * 0.0039216) + -0.5);
                LOBYTE(v44) = *((unsigned char *)v40 + 1);
                float v47 = (float)((float)((float)LODWORD(v44) * 0.0039216) + -0.5)
                    + (float)((float)((float)LODWORD(v44) * 0.0039216) + -0.5);
                LOBYTE(v45) = *((unsigned char *)v40 + 2);
                float v48 = (float)((float)((float)LODWORD(v45) * 0.0039216) + -0.5)
                    + (float)((float)((float)LODWORD(v45) * 0.0039216) + -0.5);
                float v37 = sqrtf((float)((float)(v47 * v47) + (float)(v36 * v36)) + (float)(v48 * v48));
                if (v37 <= 0.0001)
                {
                  *((unsigned char *)v40 + 2) = 0;
                  *(_WORD *)uint64_t v40 = 0;
                }
                else
                {
                  float v49 = 1.0 / v37;
                  float v50 = v47 * v49;
                  float v51 = v48 * v49;
                  float v52 = v35 * (float)((float)(v36 * v49) + 1.0);
                  float v37 = 127.5;
                  *(unsigned char *)uint64_t v40 = (int)(float)(v52 * 127.5);
                  *((unsigned char *)v40 + SKCNode::setFlags(this, 66, 1) = (int)(float)((float)(v35 * (float)(v50 + 1.0)) * 127.5);
                  float v36 = v51 + 1.0;
                  float v35 = (float)(v35 * (float)(v51 + 1.0)) * 127.5;
                  *((unsigned char *)v40 + 2) = (int)v35;
                }
              }
            }
            ++v40;
            BytePtr += 4;
            --v39;
          }
          while (v39);
        }
        free(v34);
        CGImageRelease(v30);
        CFRelease(v32);
      }
      while (v13 != v11);

      unint64_t v12 = v54;
    }

    return 1;
  }
  else
  {
    return SKGenerateNormalMap(a1, a2, a3, a5, a6);
  }
}

void sub_20AE8CC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

BOOL SKGenerateNormalMap(int a1, int a2, unsigned int *a3, double a4, double a5)
{
  uint64_t v10 = (float *)malloc_type_malloc(4 * a2 * a1, 0x100004052888210uLL);
  uint64_t v11 = v10;
  if (v10)
  {
    float v12 = a4;
    unint64_t v13 = (unint64_t)(fminf(fmaxf(v12, 0.0), 1.0) * 5.0);
    if (v13 >= 4) {
      unint64_t v13 = 4;
    }
    int v14 = a2 - 1;
    if (a2 >= 1)
    {
      uint64_t v15 = 0;
      uint64_t v16 = gNormalFilterInfo[325 * v13];
      double v17 = v10;
      simd_float4 v18 = a3;
      do
      {
        uint64_t v19 = a1;
        simd_float4 v20 = v17;
        int v21 = a1 - 1;
        if (a1 >= 1)
        {
          do
          {
            unsigned int v23 = *v18++;
            unsigned int v22 = v23;
            float v24 = 0.0;
            int v25 = HIBYTE(v23);
            if (HIBYTE(v23))
            {
              float v26 = 255.0 / (double)v25;
              float v24 = fminf(fmaxf((float)((float)((float)((float)((float)BYTE1(v22) * 0.59)+ (float)((float)v22 * 0.3))+ (float)((float)BYTE2(v22) * 0.11))* v26)* 0.0039216, 0.0), 1.0);
            }
            *v20++ = v24;
            --v19;
          }
          while (v19);
        }
        ++v15;
        v17 += a1;
      }
      while (v15 != a2);
      int v27 = 0;
      do
      {
        if (a1 >= 1)
        {
          int v28 = 0;
          do
          {
            if (v16)
            {
              uint64_t v29 = 0;
              float v30 = 0.0;
              BOOL v31 = (float *)&gNormalFilterInfo[325 * v13 + 1];
              float v32 = 0.0;
              do
              {
                int v33 = v28 + *(char *)v31;
                int v34 = v27 + *((char *)v31 + 1);
                if (v33 >= v21) {
                  int v35 = a1 - 1;
                }
                else {
                  int v35 = v28 + *(char *)v31;
                }
                if (v33 >= 0) {
                  int v36 = v35;
                }
                else {
                  int v36 = 0;
                }
                if (v34 >= v14) {
                  int v37 = a2 - 1;
                }
                else {
                  int v37 = v27 + *((char *)v31 + 1);
                }
                if (v34 >= 0) {
                  int v38 = v37;
                }
                else {
                  int v38 = 0;
                }
                float v39 = v11[v36 + v38 * a1];
                uint64_t v40 = (float *)&gNormalFilterInfo[325 * v13 + 2 * (v16 + v29)];
                int v41 = v28 + *((char *)v40 + 4);
                int v42 = v27 + *((char *)v40 + 5);
                if (v41 >= v21) {
                  int v43 = a1 - 1;
                }
                else {
                  int v43 = v28 + *((char *)v40 + 4);
                }
                if (v41 >= 0) {
                  int v44 = v43;
                }
                else {
                  int v44 = 0;
                }
                if (v42 >= v14) {
                  int v45 = a2 - 1;
                }
                else {
                  int v45 = v27 + *((char *)v40 + 5);
                }
                if (v42 >= 0) {
                  int v46 = v45;
                }
                else {
                  int v46 = 0;
                }
                float v32 = v32 + (float)(v39 * v31[1]);
                float v30 = v30 + (float)(v11[v44 + v46 * a1] * v40[2]);
                ++v29;
                v31 += 2;
              }
              while (v16 != v29);
            }
            else
            {
              float v32 = 0.0;
              float v30 = 0.0;
            }
            unsigned int v47 = *a3 & 0xFF000000;
            float v48 = (float)-v32 * a5;
            float v49 = (float)-v30 * a5;
            float v50 = sqrtf((float)((float)(v49 * v49) + (float)(v48 * v48)) + 1.0);
            if (v50 > 0.0001) {
              v47 |= (float)((float)((float)((float)((float)((float)HIBYTE(*a3) * 0.0039216) / v50) * v48)
            }
                                                 + 1.0)
                                         * 127.5) | ((float)((float)((float)((float)((float)HIBYTE(*a3)
                                                                                                 * 0.0039216)
                                                                                         / v50)
                                                                                 + 1.0)
                                                                         * 127.5) << 16) | ((float)((float)((float)((float)((float)((float)HIBYTE(*a3) * 0.0039216) / v50) * v49) + 1.0) * 127.5) << 8);
            *a3++ = v47;
            ++v28;
          }
          while (v28 != a1);
        }
        ++v27;
      }
      while (v27 != a2);
    }
    free(v11);
  }
  return v11 != 0;
}

void sub_20AE8D0C8(_Unwind_Exception *a1)
{
  MEMORY[0x21052EA30](v2, 0x1081C40983EBE18);

  _Unwind_Resume(a1);
}

void sub_20AE8D35C(_Unwind_Exception *a1)
{
  unint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE8D57C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE8D61C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE8D6C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SKCFalloff::SKCFalloff(SKCFalloff *this, SKCAction *a2)
{
  SKCAction::SKCAction((SKCAction *)this);
  *(void *)uint64_t v3 = &unk_26BEEEF68;
  *(_OWORD *)(v3 + 40) = *(_OWORD *)&a2->var6;
  *(_WORD *)(v3 + 72) = *(_WORD *)&a2->var11;
  *(void *)(v3 + 56) = *(void *)&a2->var8;
  *(void *)(v3 + 88) = a2->var14;
  *(unsigned char *)(v3 + 32) = 1;
}

void SKCFalloff::~SKCFalloff(SKCFalloff *this)
{
  SKCAction::~SKCAction((SKCAction *)this);

  JUMPOUT(0x21052EA30);
}

void SKCKeyframeSequence::SKCKeyframeSequence(SKCKeyframeSequence *this, int a2, int a3)
{
  this->uint64_t var0 = a2;
  this->uint64_t var1 = a3;
  *(int64x2_t *)&this->float var2 = vdupq_n_s64(1uLL);
  this->unint64_t var4 = 0;
  this->var5 = 0;
  this->var5 = (float *)malloc_type_malloc(4 * a2, 0x100004052888210uLL);
  unint64_t v4 = (float *)malloc_type_malloc(4 * this->var1 * (uint64_t)this->var0, 0x2361244AuLL);
  this->unint64_t var4 = v4;
  uint64_t var0 = this->var0;
  if ((int)var0 >= 1)
  {
    uint64_t v6 = v4;
    int v7 = 0;
    var5 = this->var5;
    uint64_t var1 = this->var1;
    do
    {
      float *var5 = 0.0;
      if ((int)var1 >= 1) {
        bzero(&v6[v7], 4 * var1);
      }
      v7 += var1;
      ++var5;
      --var0;
    }
    while (var0);
  }
}

SKCKeyframeSequence *SKCKeyframeSequence::setInterpMode(SKCKeyframeSequence *this, int64_t a2)
{
  this->float var2 = a2;
  return this;
}

SKCKeyframeSequence *SKCKeyframeSequence::setRepeatMode(SKCKeyframeSequence *this, int64_t a2)
{
  this->var3 = a2;
  return this;
}

void SKCKeyframeSequence::sample(SKCKeyframeSequence *this, float a2, float *a3)
{
  var5 = this->var5;
  uint64_t var0 = this->var0;
  float v7 = var5[(int)var0 - 1];
  int64_t var3 = this->var3;
  if (var3 == 2)
  {
    if ((LODWORD(a2) & 0x80000000) != 0) {
      a2 = v7 - fmodf(COERCE_FLOAT(LODWORD(a2) & 0x7FFFFFFF), var5[(int)var0 - 1]);
    }
    else {
      a2 = fmodf(a2, var5[(int)var0 - 1]);
    }
  }
  else if (var3 == 1)
  {
    if (v7 < a2) {
      a2 = var5[(int)var0 - 1];
    }
    if (a2 < 0.0) {
      a2 = 0.0;
    }
  }
  int64_t var2 = this->var2;
  switch(var2)
  {
    case 1:
      SKCKeyframeSequence::_sampleLinear(this, a2, a3);
      break;
    case 2:
      SKCKeyframeSequence::_sampleSpline(this, a2, a3);
      break;
    case 3:
      if ((int)var0 < 1)
      {
        LODWORD(v10) = 0;
      }
      else
      {
        uint64_t v10 = 0;
        while ((COERCE_UNSIGNED_INT(a2 - var5[v10]) & 0x80000000) == 0)
        {
          if (var0 == ++v10)
          {
            LODWORD(v10) = var0;
            break;
          }
        }
      }
      BOOL v11 = v10 != 0;
      int v12 = v10 - 1;
      if (!v11) {
        int v12 = 0;
      }
      uint64_t var1 = this->var1;
      int v14 = &this->var4[(int)var1 * v12];
      memcpy(a3, v14, 4 * var1);
      break;
  }
}

void *SKCKeyframeSequence::_sampleStep(SKCKeyframeSequence *this, float a2, float *a3)
{
  uint64_t var0 = this->var0;
  if ((int)var0 < 1)
  {
    LODWORD(v4) = 0;
  }
  else
  {
    uint64_t v4 = 0;
    while ((COERCE_UNSIGNED_INT(a2 - this->var5[v4]) & 0x80000000) == 0)
    {
      if (var0 == ++v4)
      {
        LODWORD(v4) = this->var0;
        break;
      }
    }
  }
  BOOL v5 = v4 != 0;
  int v6 = v4 - 1;
  if (!v5) {
    int v6 = 0;
  }
  return memcpy(a3, &this->var4[this->var1 * v6], 4 * this->var1);
}

SKCKeyframeSequence *SKCKeyframeSequence::_sampleLinear(SKCKeyframeSequence *this, float a2, float *a3)
{
  uint64_t var0 = this->var0;
  var5 = this->var5;
  if ((int)var0 < 1)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = 0;
    while ((COERCE_UNSIGNED_INT(a2 - var5[v5]) & 0x80000000) == 0)
    {
      if (var0 == ++v5)
      {
        LODWORD(v5) = this->var0;
        break;
      }
    }
  }
  int v6 = v5 - 1;
  if (!v5) {
    int v6 = 0;
  }
  if ((int)v5 >= (int)var0) {
    LODWORD(v5) = var0 - 1;
  }
  float v7 = var5[v6];
  float v8 = var5[(int)v5];
  float v9 = 1.0;
  if ((COERCE_UNSIGNED_INT(v7 - v8) & 0x60000000) != 0) {
    float v9 = (float)(a2 - v7) / (float)(v8 - v7);
  }
  if (v9 <= 1.0) {
    float v10 = v9;
  }
  else {
    float v10 = 1.0;
  }
  if (v10 < 0.0) {
    float v10 = 0.0;
  }
  uint64_t var1 = this->var1;
  if ((int)var1 >= 1)
  {
    unint64_t var4 = this->var4;
    unint64_t v13 = &var4[(int)var1 * v6];
    int v14 = &var4[(int)var1 * (int)v5];
    do
    {
      float v15 = *v13++;
      float v16 = v15;
      float v17 = *v14++;
      *a3++ = (float)(v10 * v17) + (float)(v16 * (float)(1.0 - v10));
      --var1;
    }
    while (var1);
  }
  return this;
}

SKCKeyframeSequence *SKCKeyframeSequence::_sampleSpline(SKCKeyframeSequence *this, float a2, float *a3)
{
  uint64_t var0 = this->var0;
  var5 = this->var5;
  if ((int)var0 < 1)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = 0;
    while ((COERCE_UNSIGNED_INT(a2 - var5[v5]) & 0x80000000) == 0)
    {
      if (var0 == ++v5)
      {
        LODWORD(v5) = this->var0;
        break;
      }
    }
  }
  int v6 = v5 - 1;
  if (!v5) {
    int v6 = 0;
  }
  int v7 = var0 - 1;
  if ((int)v5 >= (int)var0) {
    LODWORD(v5) = var0 - 1;
  }
  int v8 = v6 - 1;
  if (v6 <= 0) {
    int v8 = 0;
  }
  float v9 = var5[v8];
  float v10 = var5[v6];
  if ((int)v5 < v7) {
    int v7 = v5 + 1;
  }
  float v11 = var5[(int)v5];
  float v12 = var5[v7];
  uint64_t var1 = this->var1;
  float v14 = v10 - v9;
  float v15 = v11 - v10;
  float v16 = v12 - v11;
  float v17 = v14 / (float)(v14 + v15);
  BOOL v18 = (COERCE_UNSIGNED_INT(v14 + v15) & 0x60000000) == 0;
  float v19 = v16 / (float)(v15 + v16);
  float v20 = v15 / (float)(v15 + v16);
  float v21 = v15 + v16;
  if ((COERCE_UNSIGNED_INT(v14 + v15) & 0x60000000) != 0) {
    float v22 = v15 / (float)(v14 + v15);
  }
  else {
    float v22 = 0.0;
  }
  if (v18) {
    float v23 = 0.0;
  }
  else {
    float v23 = v17;
  }
  if ((LODWORD(v21) & 0x60000000) != 0)
  {
    float v24 = v20;
  }
  else
  {
    float v19 = 0.0;
    float v24 = 0.0;
  }
  float v25 = (float)(a2 - v10) / v15;
  if ((LODWORD(v15) & 0x60000000) != 0) {
    float v26 = v25;
  }
  else {
    float v26 = 0.0;
  }
  if ((int)var1 >= 1)
  {
    unint64_t var4 = this->var4;
    int v28 = &var4[(int)var1 * v8];
    uint64_t v29 = &var4[(int)var1 * v6];
    float v30 = &var4[(int)var1 * (int)v5];
    BOOL v31 = &var4[(int)var1 * v7];
    float v32 = v26 * v26;
    float v33 = v26 * (float)(v26 * v26);
    float v34 = (float)(v26 * v26) * 3.0;
    float v35 = 1.0 - (float)(v34 - (float)(v33 * 2.0));
    float v36 = v26 + (float)(v33 + (float)((float)(v26 * v26) * -2.0));
    float v37 = v33 - v32;
    float v38 = v34 + (float)(v33 * -2.0);
    do
    {
      float v39 = *v28++;
      float v40 = v39;
      float v41 = *v29++;
      float v42 = v41;
      float v43 = *v30++;
      float v44 = v43;
      float v45 = *v31++;
      *a3++ = (float)((float)((float)(v36
                                    * (float)((float)(v23 * (float)(v44 - v42)) + (float)((float)(v42 - v40) * v22)))
                            + (float)(v35 * v42))
                    + (float)(v37 * (float)((float)(v24 * (float)(v45 - v44)) + (float)((float)(v44 - v42) * v19))))
            + (float)(v38 * v44);
      --var1;
    }
    while (var1);
  }
  return this;
}

SKCKeyframeSequence *SKCKeyframeSequence::_getKeyframesForTime(SKCKeyframeSequence *this, float a2, int *a3, int *a4)
{
  uint64_t var0 = this->var0;
  if ((int)var0 < 1)
  {
    LODWORD(v5) = 0;
  }
  else
  {
    uint64_t v5 = 0;
    while ((COERCE_UNSIGNED_INT(a2 - this->var5[v5]) & 0x80000000) == 0)
    {
      if (var0 == ++v5)
      {
        LODWORD(v5) = this->var0;
        break;
      }
    }
  }
  int v6 = v5 - 1;
  if (!v5) {
    int v6 = 0;
  }
  *a3 = v6;
  if ((int)v5 >= this->var0) {
    LODWORD(v5) = this->var0 - 1;
  }
  *a4 = v5;
  return this;
}

void *SKCKeyframeSequence::setKeyframe(SKCKeyframeSequence *this, int a2, float a3, const float *a4)
{
  unint64_t var4 = this->var4;
  this->var5[a2] = a3;
  return memcpy(&var4[this->var1 * a2], a4, 4 * this->var1);
}

void *SKCKeyframeSequence::getKeyframe(SKCKeyframeSequence *this, int a2, float *a3, float *__dst)
{
  unint64_t var4 = this->var4;
  *a3 = this->var5[a2];
  return memcpy(__dst, &var4[this->var1 * a2], 4 * this->var1);
}

void SKCKeyframeSequence::~SKCKeyframeSequence(SKCKeyframeSequence *this)
{
  var5 = this->var5;
  if (var5)
  {
    free(var5);
    this->var5 = 0;
  }
  unint64_t var4 = this->var4;
  if (var4)
  {
    free(var4);
    this->unint64_t var4 = 0;
  }
}

void SKCEffectNode::SKCEffectNode(SKCEffectNode *this)
{
  SKCNode::SKCNode(this);
  *(void *)uint64_t v1 = &unk_26BEEF000;
  *(void *)(v1 + 560) = 0;
  *(unsigned char *)(v1 + 568) = 1;
  *(_OWORD *)(v1 + 576) = 0u;
  *(_OWORD *)(v1 + 592) = 0u;
  *(_OWORD *)(v1 + 608) = 0u;
  *(_OWORD *)(v1 + 624) = 0u;
  *(void *)(v1 + 640) = 0;
  *(unsigned char *)(v1 + 672) = 1;
  *(_DWORD *)(v1 + 676) = 0;
  *(void *)(v1 + 680) = 0;
  *(_WORD *)(v1 + 704) = 1;
  *(void *)(v1 + 712) = 0;
  *(_DWORD *)(v1 + 720) = 2;
}

void SKCEffectNode::setSubdivisionLevels(SKCNode *this, int a2)
{
  *((_DWORD *)this + 180) = a2;
  SKCNode::setDirty(this);
}

void SKCEffectNode::setWarpGeometry(id *this, SKWarpGeometry *a2)
{
  uint64_t v5 = a2;
  objc_storeStrong(this + 89, a2);
  uint64_t v4 = (std::__shared_weak_count *)this[33];
  this[32] = 0;
  this[33] = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  SKCNode::setDirty((SKCNode *)this);
}

void sub_20AE8DF60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL SKCEffectNode::needsWarp(SKCEffectNode *this)
{
  uint64_t v1 = (void *)*((void *)this + 89);
  return v1 && ![v1 isIdentityWarp];
}

uint64_t SKCEffectNode::generatesVisibleGeometry(SKCEffectNode *this, const simd_float4x4 *a2)
{
  return 1;
}

void SKCEffectNode::setShouldRasterize(SKCNode *this, char a2)
{
  *((unsigned char *)this + 705) = a2;
  *((unsigned char *)this + 672) = 1;
  SKCNode::setDirty(this);
}

uint64_t SKCEffectNode::getShouldRasterize(SKCEffectNode *this)
{
  return *((unsigned __int8 *)this + 705);
}

void SKCEffectNode::setEnableEffects(SKCNode *this, char a2)
{
  *((unsigned char *)this + 704) = a2;
  *((unsigned char *)this + 672) = 1;
  SKCNode::setDirty(this);
}

uint64_t SKCEffectNode::getEnableEffects(SKCEffectNode *this)
{
  return *((unsigned __int8 *)this + 704);
}

void SKCEffectNode::getBatchInfo(SKCEffectNode *this@<X0>, SKCRenderInfo *a2@<X1>, uint64_t a3@<X8>)
{
  if (!*((unsigned char *)this + 704)
    || (*((unsigned char *)a2 + 580) & 0x20) != 0
    || *((void *)this + 11) == *((void *)this + 12) && *((void *)this + 14) == *((void *)this + 15))
  {
    SKCNode::getBatchInfo(a3);
  }
  else
  {
    *(unsigned char *)a3 = 0;
    *(void *)(a3 + 4) = 0x300000000;
    *(_DWORD *)(a3 + 12) = 1;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 60) = 0u;
    *(_DWORD *)(a3 + 4) = (**(uint64_t (***)(SKCEffectNode *, SKCRenderInfo *))this)(this, a2);
    *(unsigned char *)a3 = 1;
    if (!*((void *)this + 70) || (*((unsigned char *)a2 + 581) & 8) != 0) {
      int v6 = (char *)this + 600;
    }
    else {
      int v6 = (char *)this + 632;
    }
    *(void *)(a3 + 32) = *(void *)v6;
    *(_DWORD *)(a3 + 8) = 3;
    *(_DWORD *)(a3 + 12) = SKBlendModeGetBackingBlendMode(*((SKBlendMode *)this + 36));
    *(void *)(a3 + 24) = *((void *)a2 + 21);
    int v7 = (void *)*((void *)this + 72);
    if (v7)
    {
      if ((*((unsigned char *)a2 + 581) & 1) == 0) {
        *(void *)(a3 + 16) = v7;
      }
    }
  }
}

void SKCEffectNode::subclassRecomputeFlags(id *this)
{
  if ([this[72] _usesTimeUniform]
    && !*((unsigned char *)this + 172)
    && (*((unsigned char *)this + 171) & 0x60) != 0)
  {
    SKCNode::setFlags((SKCNode *)this, 66, 1);
  }
}

BOOL SKCEffectNode::getNeedsCustomRenderOps(uint64_t a1, uint64_t a2)
{
  return *(unsigned char *)(a1 + 704)
      && (*(unsigned char *)(a2 + 580) & 0x20) == 0
      && (*(void *)(a1 + 88) != *(void *)(a1 + 96) || *(void *)(a1 + 112) != *(void *)(a1 + 120));
}

uint64_t SKCEffectNode::getMaxBatchRenderElementCount(SKCEffectNode *this, SKCRenderInfo *a2)
{
  if (!*((unsigned char *)this + 704)
    || (*((unsigned char *)a2 + 580) & 0x20) != 0
    || *((void *)this + 11) == *((void *)this + 12) && *((void *)this + 14) == *((void *)this + 15))
  {
    return 0;
  }
  uint64_t v3 = (void *)*((void *)this + 89);
  if (!v3) {
    return 4;
  }
  if ([v3 isIdentityWarp]) {
    return 4;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    return 4;
  }
  id v4 = *((id *)this + 89);
  int v5 = [v4 numberOfColumns];
  double v6 = (double)(int)([v4 numberOfRows] * v5);
  uint64_t v7 = (exp2((double)(*((_DWORD *)this + 180) + 1)+ (double)(*((_DWORD *)this + 180) + 1))* v6);

  return v7;
}

void sub_20AE8E2B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SKCEffectNode::addBatchRenderElements(SKCEffectNode *this, float32x4_t *a2)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  if (!*((unsigned char *)this + 704)
    || (a2[36].i8[4] & 0x20) != 0
    || *((void *)this + 11) == *((void *)this + 12) && *((void *)this + 14) == *((void *)this + 15))
  {
    return SKCNode::addBatchRenderElements();
  }
  else
  {
    if (*((void *)this + 70) && (id v4 = (uint64_t (***)(void))*((void *)this + 79)) != 0)
    {
      int v5 = (char *)this + 632;
      double v6 = (char *)this + 656;
    }
    else
    {
      double v6 = (char *)this + 688;
      int v5 = (char *)this + 600;
      id v4 = (uint64_t (***)(void))*((void *)this + 75);
    }
    long long v61 = *(_OWORD *)v6;
    unsigned int v8 = (**v4)(v4);
    *(float32x2_t *)v9.f32 = vmul_f32(vcvt_f32_u32((uint32x2_t)__PAIR64__((*(uint64_t (**)(void))(**(void **)v5 + 8))(), v8)), (float32x2_t)0x3F0000003F000000);
    __asm { FMOV            V0.2S, #1.0 }
    long long v59 = (unint64_t)_D0;
    v9.i64[1] = _D0;
    float32x4_t v60 = v9;
    float v15 = (void *)*((void *)this + 89);
    if (v15
      && ([v15 isIdentityWarp] & 1) == 0
      && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      id v16 = *((id *)this + 89);
      uint64_t v17 = a2->u32[0];
      uint64_t v18 = a2[1].i64[1] + 16 * v17;
      uint64_t v62 = (void *)(a2[1].i64[0] + 8 * v17);
      v63.i64[0] = v18;
      int v58 = [v16 numberOfColumns];
      int v19 = [v16 numberOfRows];
      uint64_t v56 = [v16 sourcePositions];
      uint64_t v55 = [v16 destPositions];
      uint64_t v54 = v16;
      if (v19 < 1)
      {
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        uint64_t v57 = v19;
        uint64_t v22 = 8 * (v58 + 1);
        do
        {
          if (v58 <= 0)
          {
            uint64_t v23 = v20 + 1;
          }
          else
          {
            uint64_t v23 = v20 + 1;
            uint64_t v24 = v22 * (v20 + 1);
            uint64_t v25 = v22 * v20;
            uint64_t v27 = v58;
            uint64_t v26 = v55;
            uint64_t v28 = v56;
            do
            {
              v29.i64[0] = *(void *)(v26 + v25);
              v30.i64[0] = *(void *)(v26 + v25 + 8);
              v29.i64[1] = 0x3F80000000000000;
              v30.i64[1] = 0x3F80000000000000;
              v32.i64[0] = *(void *)(v26 + v24);
              v31.i64[0] = *(void *)(v26 + v24 + 8);
              v31.i64[1] = 0x3F80000000000000;
              v32.i64[1] = 0x3F80000000000000;
              float32x4_t v33 = a2[2];
              float32x4_t v34 = a2[3];
              float32x4_t v35 = a2[4];
              float32x4_t v36 = a2[5];
              float32x4_t v37 = vmlaq_f32((float32x4_t)(unint64_t)v61, v60, v29);
              float32x4_t v38 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v37.f32[0]), v34, *(float32x2_t *)v37.f32, 1), v35, v37, 2), v36, v37, 3);
              float32x4_t v39 = vmlaq_f32((float32x4_t)(unint64_t)v61, v60, v30);
              __n128 v40 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v39.f32[0]), v34, *(float32x2_t *)v39.f32, 1), v35, v39, 2), v36, v39, 3);
              float32x4_t v41 = vmlaq_f32((float32x4_t)(unint64_t)v61, v60, v31);
              __n128 v42 = (__n128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v41.f32[0]), v34, *(float32x2_t *)v41.f32, 1), v35, v41, 2), v36, v41, 3);
              float32x4_t v43 = vmlaq_f32((float32x4_t)(unint64_t)v61, v60, v32);
              uint64_t v21 = add_subdivs(&v63, &v62, *((_DWORD *)this + 180), v38, v40, v42, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, v43.f32[0]), v34, *(float32x2_t *)v43.f32, 1), v35, v43, 2), v36, v43, 3), vmla_lane_f32(vmla_n_f32(0, (float32x2_t)1065353216, COERCE_FLOAT(*(void *)(v28 + v25))), (float32x2_t)0x3F80000000000000, *(float32x2_t *)(v28 + v25),
                                      1),
                                    vmla_lane_f32(vmla_n_f32(0, (float32x2_t)1065353216, COERCE_FLOAT(*(void *)(v28 + v25 + 8))), (float32x2_t)0x3F80000000000000, *(float32x2_t *)(v28 + v25 + 8), 1), vmla_lane_f32(vmla_n_f32(0, (float32x2_t)1065353216, COERCE_FLOAT(*(void *)(v28 + v24 + 8))), (float32x2_t)0x3F80000000000000, *(float32x2_t *)(v28 + v24 + 8), 1), vmla_lane_f32(vmla_n_f32(0, (float32x2_t)1065353216, COERCE_FLOAT(*(void *)(v28 + v24))), (float32x2_t)0x3F80000000000000, *(float32x2_t *)(v28 + v24),
                                      1))
                  + v21;
              v28 += 8;
              v26 += 8;
              --v27;
            }
            while (v27);
          }
          uint64_t v20 = v23;
        }
        while (v23 != v57);
      }
    }
    else
    {
      unint64_t v44 = 0;
      float32x4_t v63 = vmlaq_f32((float32x4_t)(unint64_t)v61, (float32x4_t)xmmword_20AE9A910, v60);
      float32x4_t v64 = vmlaq_f32((float32x4_t)(unint64_t)v61, (float32x4_t)xmmword_20AE9AE20, v60);
      float32x4_t v65 = vmlaq_f32((float32x4_t)(unint64_t)v61, (float32x4_t)xmmword_20AE9A950, v60);
      float32x4_t v66 = vmlaq_f32((float32x4_t)(unint64_t)v61, (float32x4_t)xmmword_20AE9ADF0, v60);
      float32x4_t v45 = a2[2];
      float32x4_t v46 = a2[3];
      float32x4_t v47 = a2[4];
      float32x4_t v48 = a2[5];
      do
      {
        *(float32x4_t *)((char *)&v63 + v44) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v45, COERCE_FLOAT(*(_OWORD *)((char *)&v63 + v44))), v46, *(float32x2_t *)&v63.f32[v44 / 4], 1), v47, *(float32x4_t *)((char *)&v63 + v44), 2), v48, *(float32x4_t *)((char *)&v63 + v44), 3);
        v44 += 16;
      }
      while (v44 != 64);
      *(float32x4_t *)(a2[1].i64[1] + 16 * a2->u32[0]) = v63;
      *(float32x4_t *)(a2[1].i64[1] + 16 * (a2->i32[0] + 1)) = v64;
      *(float32x4_t *)(a2[1].i64[1] + 16 * (a2->i32[0] + 2)) = v65;
      *(float32x4_t *)(a2[1].i64[1] + 16 * (a2->i32[0] + 3)) = v66;
      *(void *)(a2[1].i64[0] + 8 * a2->u32[0]) = 0;
      *(void *)(a2[1].i64[0] + 8 * (a2->i32[0] + 1)) = 1065353216;
      v49.i64[1] = *((void *)&v59 + 1);
      *(void *)(a2[1].i64[0] + 8 * (a2->i32[0] + 2)) = v59;
      v49.i32[1] = 1065353216;
      *(void *)(a2[1].i64[0] + 8 * (a2->i32[0] + 3)) = 0x3F80000000000000;
      uint64_t v21 = 4;
    }
    if (v21)
    {
      v49.f32[0] = fminf(fmaxf(*((float *)this + 81) * a2[6].f32[0], 0.0), 1.0) * 255.0;
      int16x8_t v50 = (int16x8_t)vcvtq_s32_f32(v49);
      *(int16x4_t *)v50.i8 = vdup_lane_s16(vmovn_s32((int32x4_t)v50), 0);
      float v51 = (unsigned __int32 *)(a2->i64[1] + 4 * a2->u32[0]);
      unsigned __int32 v52 = vmovn_s16(v50).u32[0];
      int v53 = v21;
      do
      {
        *v51++ = v52;
        --v53;
      }
      while (v53);
    }
    *((unsigned char *)this + 672) = 0;
    return v21;
  }
}

void sub_20AE8E7F4(_Unwind_Exception *exception_object)
{
}

uint64_t SKCEffectNode::addRenderOps(uint64_t result, uint64_t a2)
{
  if (!*(unsigned char *)(result + 704)
    || (*(unsigned char *)(a2 + 580) & 0x20) != 0
    || *(void *)(result + 88) == *(void *)(result + 96) && *(void *)(result + 112) == *(void *)(result + 120))
  {
    return SKCNode::addRenderOps();
  }
  return result;
}

char *SKCEffectNode::addRenderableChildren(char *result, uint64_t a2, uint64_t a3)
{
  if (!result[704]
    || (*(unsigned char *)(a2 + 580) & 0x20) != 0
    || *((void *)result + 11) == *((void *)result + 12) && *((void *)result + 14) == *((void *)result + 15))
  {
    return SKCNode::addRenderableChildren(result, a2, a3);
  }
  return result;
}

void SKCEffectNode::ensure_framebuffers(float32x4_t *lpsrc, uint64_t a2)
{
  uint64_t v54 = 0;
  uint64_t v55 = &v54;
  uint64_t v56 = 0x7012000000;
  uint64_t v57 = __Block_byref_object_copy__7;
  int v58 = __Block_byref_object_dispose__7;
  long long v59 = "";
  long long v60 = *(_OWORD *)SKCBoundingBoxEmpty;
  long long v61 = *(_OWORD *)&SKCBoundingBoxEmpty[16];
  long long v62 = *(_OWORD *)&SKCBoundingBoxEmpty[32];
  long long v63 = *(_OWORD *)&SKCBoundingBoxEmpty[48];
  if (lpsrc {
    && (uint64_t v4 = lpsrc->i64[0],
  }
  {
    *(double *)v5.i64 = (*(double (**)(float32x4_t *))(v4 + 120))(lpsrc);
    v53.columns[0] = v5;
    v53.columns[1] = v6;
    v53.columns[2] = v7;
    v53.columns[3] = v8;
    float32x4_t AABB = SKCBoundingBoxGetAABB(&v53);
    lpsrc[43] = AABB;
    float v10 = (void *)lpsrc->i64[1];
    if (v10)
    {
      id v11 = v10;
      [v11 visibleRect];
      *(float *)&double v12 = v12;
      lpsrc[43].i32[0] = LODWORD(v12);
      [v11 visibleRect];
      float32_t v14 = v13;
      lpsrc[43].f32[1] = v14;
      [v11 visibleRect];
      float32_t v16 = v15;
      lpsrc[43].f32[2] = v16;
      [v11 visibleRect];
      float32_t v18 = v17;
      lpsrc[43].f32[3] = v18;
      int v19 = [v11 camera];
      uint64_t v20 = (SKCNode *)[v19 _backingNode];

      if (v20)
      {
        SKCNode::getConversionMatrixFromWorld(v20);
        v22.i64[0] = vsubq_f32(lpsrc[43], v21).u64[0];
        v22.i64[1] = lpsrc[43].i64[1];
        lpsrc[43] = v22;
      }

      float32x4_t AABB = lpsrc[43];
    }
  }
  else
  {
    v52[0] = MEMORY[0x263EF8330];
    v52[1] = 3221225472;
    v52[2] = ___ZN13SKCEffectNode19ensure_framebuffersEP13SKCRenderInfoDv4_j_block_invoke;
    v52[3] = &unk_263FE9F18;
    v52[4] = &v54;
    SKCNode::walkChildren((char **)lpsrc, v52, 0, 1);
    float32x4_t v23 = SKCBoundingBoxGetAABB((const simd_float4x4 *)(v55 + 6));
    *(float32x2_t *)AABB.f32 = vrndm_f32(*(float32x2_t *)v23.f32);
    *(float32x2_t *)&AABB.u32[2] = vrndp_f32(vsub_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), vsub_f32(*(float32x2_t *)AABB.f32, *(float32x2_t *)v23.f32)));
    lpsrc[43] = AABB;
  }
  float32x2_t v49 = vmaxnm_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)AABB, (int8x16_t)AABB, 8uLL), (float32x2_t)vdup_n_s32(0x3DCCCCCDu));
  *(float32x2_t *)&AABB.u32[2] = v49;
  lpsrc[43] = AABB;
  SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v53);
  int v24 = (*(uint64_t (**)(uint64_t, void))(*(void *)v53.columns[0].i64[0] + 152))(v53.columns[0].i64[0], 0);
  v25.n128_u64[0] = (unint64_t)vmaxnm_f32(vadd_f32(v49, v49), (float32x2_t)0x4000000040000000);
  float v26 = (float)v24;
  if (v25.n128_f32[0] > (float)v24)
  {
    float v27 = v25.n128_f32[0] - v26;
    v25.n128_f32[0] = (float)v24;
    float v28 = v27 * 0.5;
    float32x4_t v29 = lpsrc[43];
    v29.f32[0] = v29.f32[0] + (float)(v28 * 0.5);
    v29.f32[2] = COERCE_FLOAT(lpsrc[43].i64[1]) - v28;
    lpsrc[43] = v29;
  }
  float32x4_t v30 = &lpsrc[36].i64[1];
  float v31 = v25.n128_f32[1];
  if (v25.n128_f32[1] > v26)
  {
    v25.n128_f32[1] = (float)v24;
    float v32 = (float)(v31 - v26) * 0.5;
    float32x4_t v33 = lpsrc[43];
    v33.f32[1] = COERCE_FLOAT(HIDWORD(lpsrc[43].i64[0])) + (float)(v32 * 0.5);
    v33.f32[3] = COERCE_FLOAT(HIDWORD(*(_OWORD *)&lpsrc[43])) - v32;
    lpsrc[43] = v33;
  }
  float32x4_t v34 = (unsigned int (***)(void))lpsrc[37].i64[1];
  if (!v34) {
    goto LABEL_21;
  }
  __n128 v50 = v25;
  v35.n128_f32[0] = (float)(**v34)(v34);
  __n128 v36 = v50;
  if (v50.n128_f32[0] > v35.n128_f32[0]
    || (v35.n128_f32[0] = (float)(*(unsigned int (**)(uint64_t, float, __n128))(*(void *)lpsrc[37].i64[1]
                                                                                        + 8))(lpsrc[37].i64[1], v35.n128_f32[0], v50), float32x2_t v37 = (float32x2_t)v50.n128_u64[0], v36.n128_u32[0] = v50.n128_u32[1], v50.n128_f32[1] > v35.n128_f32[0]))
  {
    unsigned int v38 = (**(uint64_t (***)(uint64_t, __n128, __n128))lpsrc[37].i64[1])(lpsrc[37].i64[1], v35, v36);
    v35.n128_u64[0] = __PAIR64__((*(uint64_t (**)(uint64_t))(*(void *)lpsrc[37].i64[1] + 8))(lpsrc[37].i64[1]), v38);
    float32x4_t v39 = (std::__shared_weak_count *)lpsrc[38].i64[0];
    lpsrc[37].i64[1] = 0;
    lpsrc[38].i64[0] = 0;
    if (v39)
    {
      __n128 v48 = v35;
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
      __n128 v35 = v48;
    }
    float32x2_t v40 = vcvt_f32_u32((uint32x2_t)v35.n128_u64[0]);
    float32x4_t v41 = (std::__shared_weak_count *)lpsrc[39].i64[0];
    lpsrc[38].i64[1] = 0;
    lpsrc[39].i64[0] = 0;
    if (v41) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v41);
    }
    float32x2_t v37 = vmaxnm_f32(v40, (float32x2_t)v50.n128_u64[0]);
    lpsrc[42].i8[0] = 1;
  }
  v35.n128_u64[0] = (unint64_t)vrndp_f32(v37);
  if (!lpsrc[37].i64[1])
  {
LABEL_21:
    uint64_t texture_2d = jet_context::create_texture_2d();
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v51, texture_2d);
  }
  if (!lpsrc[38].i64[1])
  {
    uint64_t v47 = jet_context::create_texture_2d();
    std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v51, v47);
  }
  float32x4_t v43 = (float32x4_t *)*v30;
  if (!*v30)
  {
    uint64_t v44 = (*(uint64_t (**)(uint64_t, __n128, __n128))(*(void *)v53.columns[0].i64[0] + 112))(v53.columns[0].i64[0], v35, v36);
    std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(&v51, v44);
  }
  v43[1].i64[0] = lpsrc[37].i64[1];
  uint64_t v45 = lpsrc[38].i64[1];
  v43[13].i64[0] = v45;
  v43[14].i64[1] = v45;
  {
    float32x4_t v46 = lpsrc[19];
  }
  else
  {
    float32x4_t v46 = 0uLL;
  }
  v43[2] = v46;
  if (v53.columns[0].i64[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v53.columns[0].i64[1]);
  }
  _Block_object_dispose(&v54, 8);
}

void sub_20AE8EE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  _Block_object_dispose(&a29, 8);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__7(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void ___ZN13SKCEffectNode19ensure_framebuffersEP13SKCRenderInfoDv4_j_block_invoke(uint64_t a1, char **this)
{
  long long v3 = (const simd_float4x4 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  v12.columns[0] = (simd_float4)SKCNode::getAccumulatedBoundingBox(this);
  v12.columns[1] = v4;
  v12.columns[2] = v5;
  v12.columns[3] = v6;
  float32x4_t v7 = SKCBoundingBoxUnion(v3, &v12);
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  *(float32x4_t *)(v8 + 48) = v7;
  *(_OWORD *)(v8 + 64) = v9;
  *(_OWORD *)(v8 + 80) = v10;
  *(_OWORD *)(v8 + 96) = v11;
}

uint64_t SKCEffectNode::addRequistePasses(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 704)
    || (*(unsigned char *)(a2 + 580) & 0x20) != 0
    || *(void *)(a1 + 88) == *(void *)(a1 + 96) && *(void *)(a1 + 112) == *(void *)(a1 + 120))
  {
    return SKCNode::addRequistePasses();
  }
  else
  {
    simd_float4 v4 = *(void **)(a1 + 680);
    *(void *)(a1 + 680) = 0;

    if (!*(unsigned char *)(a1 + 705)
      || *(unsigned char *)(a1 + 672)
      || (uint64_t result = SKCNode::matchesAnyFlags((SKCNode *)a1, 2, 2), (result & 1) != 0)
      || (*(unsigned char *)(a2 + 580) & 0x40) != 0)
    {
      *(_DWORD *)(a1 + 676) = 0;
      SKCEffectNode::ensure_framebuffers((float32x4_t *)a1, a2);
      (***(void (****)(void))(a1 + 600))();
      (*(void (**)(void))(**(void **)(a1 + 600) + 8))(*(void *)(a1 + 600));
      if (*(void *)(a1 + 560) && (*(unsigned char *)(a2 + 581) & 8) == 0)
      {
        SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v27);
        simd_float4 v6 = (*(void (**)(uint64_t, void))(*(void *)v27 + 48))(v27, *(void *)(a1 + 600));
        if (v28) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v28);
        }
        [*(id *)(a1 + 560) setValue:v6 forKey:@"inputImage"];
        if (*(unsigned char *)(a1 + 568))
        {
          float32x4_t v7 = [*(id *)(a1 + 560) inputKeys];
          int v8 = [v7 containsObject:@"inputCenter"];

          if (v8)
          {
            [v6 extent];
            CGFloat x = v30.origin.x;
            CGFloat y = v30.origin.y;
            CGFloat width = v30.size.width;
            CGFloat height = v30.size.height;
            BOOL IsInfinite = CGRectIsInfinite(v30);
            *(void *)&long long v14 = 0x3F0000003F000000;
            long long v25 = v14;
            if (!IsInfinite)
            {
              v31.origin.CGFloat x = x;
              v31.origin.CGFloat y = y;
              v31.size.CGFloat width = width;
              v31.size.CGFloat height = height;
              if (!CGRectIsEmpty(v31))
              {
                [v6 extent];
                double MidX = CGRectGetMidX(v32);
                [v6 extent];
                CGFloat MidY = CGRectGetMidY(v33);
                *(float *)&long long v17 = MidX;
                *(float *)&CGFloat MidY = MidY;
                DWORD1(v17) = LODWORD(MidY);
                long long v25 = v17;
              }
            }
            float32_t v18 = objc_msgSend(MEMORY[0x263F00680], "vectorWithX:Y:", *(float *)&v25, *((float *)&v25 + 1), v25);
            [*(id *)(a1 + 560) setValue:v18 forKey:@"inputCenter"];
          }
        }
        uint64_t v19 = [*(id *)(a1 + 560) valueForKey:@"outputImage"];
        uint64_t v20 = *(void **)(a1 + 680);
        *(void *)(a1 + 680) = v19;

        {
          float32x4_t v21 = *(void **)(a1 + 680);
          [v6 extent];
          uint64_t v22 = objc_msgSend(v21, "imageByCroppingToRect:");
          float32x4_t v23 = *(void **)(a1 + 680);
          *(void *)(a1 + 680) = v22;
        }
        [*(id *)(a1 + 680) extent];
        SKCRenderer::getBackingContext(*(void *)(a2 + 104), &v26);
        uint64_t texture_2d = jet_context::create_texture_2d();
        std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(&v27, texture_2d);
      }
      operator new();
    }
    ++*(_DWORD *)(a1 + 676);
  }
  return result;
}

void sub_20AE8F5AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t jet_command_buffer::render_CIImage_to_texture(uint64_t *a1, uint64_t a2, uint64_t a3, __n128 a4)
{
  int v10 = 42;
  unint64_t v7 = a1[2];
  if (v7 >= a1[3])
  {
    __n128 v9 = a4;
    uint64_t result = std::vector<jet_render_op>::__emplace_back_slow_path<jet_render_opcode>(a1 + 1, &v10);
    a4 = v9;
  }
  else
  {
    *(void *)unint64_t v7 = &unk_26BEEC420;
    *(_DWORD *)(v7 + 8) = 42;
    *(void *)(v7 + 24) = 0;
    *(void *)(v7 + 32) = 0;
    *(void *)(v7 + 16) = 0;
    *(void *)(v7 + 64) = 0;
    uint64_t result = v7 + 192;
    *(void *)(v7 + 96) = 0;
  }
  a1[2] = result;
  *(void *)(result - 80) = a2;
  *(void *)(result - 72) = a3;
  *(__n128 *)(result - 64) = a4;
  return result;
}

void SKCEffectNode::~SKCEffectNode(id *this)
{
  *this = &unk_26BEEF000;

  uint64_t v2 = (std::__shared_weak_count *)this[80];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v3 = (std::__shared_weak_count *)this[78];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  simd_float4 v4 = (std::__shared_weak_count *)this[76];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  simd_float4 v5 = (std::__shared_weak_count *)this[74];
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }

  SKCNode::~SKCNode(this);
}

{
  uint64_t vars8;

  SKCEffectNode::~SKCEffectNode(this);

  JUMPOUT(0x21052EA30);
}

void sub_20AE8F8A4(_Unwind_Exception *a1)
{
  simd_float4 v5 = v4;

  _Unwind_Resume(a1);
}

void sub_20AE8F958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_20AE8FA08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE8FA88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE8FB98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE8FD0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE8FD70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE8FDD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE8FE38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_20AE900E4(_Unwind_Exception *a1)
{
  simd_float4 v4 = v3;

  _Unwind_Resume(a1);
}

void sub_20AE901D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void (***std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<jet_render_op>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>,std::reverse_iterator<jet_render_op*>>(void (***a1)(void), void (***a2)(void)))(void)
{
  long long v3 = a1;
  simd_float4 v4 = a1;
  do
  {
    simd_float4 v5 = *v4;
    v4 += 24;
    (*v5)();
    v3 += 24;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

uint64_t std::shared_ptr<jet_buffer_pool>::shared_ptr[abi:ne180100]<jet_buffer_pool,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 16))();
}

uint64_t std::shared_ptr<jet_framebuffer>::shared_ptr[abi:ne180100]<jet_framebuffer,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t std::shared_ptr<jet_texture>::shared_ptr[abi:ne180100]<jet_texture,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t std::shared_ptr<jet_context>::shared_ptr[abi:ne180100]<jet_context_Metal,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 128))();
}

uint64_t std::shared_ptr<SKCRenderSortGroup>::shared_ptr[abi:ne180100]<SKCRenderSortGroup,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t std::shared_ptr<jet_command_buffer>::shared_ptr[abi:ne180100]<jet_command_buffer,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t std::shared_ptr<jet_buffer>::shared_ptr[abi:ne180100]<jet_buffer,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 48))();
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<jet_render_op>,jet_render_op*,jet_render_op*,jet_render_op*>()
{
  OUTLINED_FUNCTION_0();
  do
  {
    simd_float4 v4 = *v3;
    v3 -= 24;
    uint64_t result = (*v4)(v1);
    v2 -= 192;
    BOOL v6 = v1 == v0;
    uint64_t v1 = v3;
  }
  while (!v6);
  return result;
}

uint64_t std::shared_ptr<MaxRectTexturePacker>::shared_ptr[abi:ne180100]<MaxRectTexturePacker,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t std::shared_ptr<jet_program>::shared_ptr[abi:ne180100]<jet_program,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t std::shared_ptr<jet_sampler>::shared_ptr[abi:ne180100]<jet_sampler,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t std::shared_ptr<jet_stencil_mode>::shared_ptr[abi:ne180100]<jet_stencil_mode,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t std::shared_ptr<jet_depth_stencil_mode>::shared_ptr[abi:ne180100]<jet_depth_stencil_mode,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

uint64_t std::shared_ptr<jet_constant>::shared_ptr[abi:ne180100]<jet_constant,void>(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 112))();
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x270F18A48]();
}

OSStatus AudioFileClose(AudioFileID inAudioFile)
{
  return MEMORY[0x270EE20D8](inAudioFile);
}

OSStatus AudioFileGetProperty(AudioFileID inAudioFile, AudioFilePropertyID inPropertyID, UInt32 *ioDataSize, void *outPropertyData)
{
  return MEMORY[0x270EE20F0](inAudioFile, *(void *)&inPropertyID, ioDataSize, outPropertyData);
}

OSStatus AudioFileOpenURL(CFURLRef inFileRef, AudioFilePermissions inPermissions, AudioFileTypeID inFileTypeHint, AudioFileID *outAudioFile)
{
  return MEMORY[0x270EE2118](inFileRef, inPermissions, *(void *)&inFileTypeHint, outAudioFile);
}

OSStatus AudioFileReadBytes(AudioFileID inAudioFile, Boolean inUseCache, SInt64 inStartingByte, UInt32 *ioNumBytes, void *outBuffer)
{
  return MEMORY[0x270EE2130](inAudioFile, inUseCache, inStartingByte, ioNumBytes, outBuffer);
}

CFTimeInterval CACurrentMediaTime(void)
{
  MEMORY[0x270EFB790]();
  return result;
}

uint64_t CARenderServerGetFrameCounter()
{
  return MEMORY[0x270EFB8A8]();
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x270EE42F0](allocator, values, numValues, callBacks);
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x270EE43B0](alloc, str, attributes);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x270EE4908](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EE4920](allocator, capacity, keyCallBacks, valueCallBacks);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x270EE4BE8](allocator, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x270EE50B0](alloc, maxLength);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x270EE59B0](retstr, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x270EE59E8](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x270EE59F8](context);
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x270EE5B50](space, components);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return MEMORY[0x270EE5B98](color1, color2);
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5BC8](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x270EE5BD0](color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x270EE5BE0](color);
}

void CGColorRelease(CGColorRef color)
{
}

CFStringRef CGColorSpaceCopyName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x270EE5C38](space);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C68]();
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5CA8](name);
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x270EE5D08](space);
}

uint64_t CGColorSpaceGetProcessColorModel()
{
  return MEMORY[0x270EE5D20]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

BOOL CGColorSpaceUsesExtendedRange(CGColorSpaceRef space)
{
  return MEMORY[0x270EE5D78](space);
}

void CGContextClearRect(CGContextRef c, CGRect rect)
{
}

void CGContextConcatCTM(CGContextRef c, CGAffineTransform *transform)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetAllowsAntialiasing(CGContextRef c, BOOL allowsAntialiasing)
{
}

void CGContextSetAllowsFontSmoothing(CGContextRef c, BOOL allowsFontSmoothing)
{
}

void CGContextSetAllowsFontSubpixelPositioning(CGContextRef c, BOOL allowsFontSubpixelPositioning)
{
}

void CGContextSetAllowsFontSubpixelQuantization(CGContextRef c, BOOL allowsFontSubpixelQuantization)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
}

void CGContextSetRenderingIntent(CGContextRef c, CGColorRenderingIntent intent)
{
}

void CGContextSetShouldAntialias(CGContextRef c, BOOL shouldAntialias)
{
}

void CGContextSetShouldSmoothFonts(CGContextRef c, BOOL shouldSmoothFonts)
{
}

void CGContextSetShouldSubpixelPositionFonts(CGContextRef c, BOOL shouldSubpixelPositionFonts)
{
}

void CGContextSetShouldSubpixelQuantizeFonts(CGContextRef c, BOOL shouldSubpixelQuantizeFonts)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x270EE62B8](provider);
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x270EE6750](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F20](data, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x270EF4F48](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x270EE6778](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x270EE6790](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x270EE67A0](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x270EE67C0](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x270EE67D8](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x270EE67E8](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x270EE6800](image);
}

uint64_t CGImageGetImageProvider()
{
  return MEMORY[0x270EE6810]();
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x270EE6868](image);
}

uint64_t CGImageIsSubimage()
{
  return MEMORY[0x270EE6880]();
}

uint64_t CGImageProviderCopyIOSurface()
{
  return MEMORY[0x270EE6898]();
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x270EE6908](image);
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5040](url, options);
}

void CGPathAddCurveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathApply(CGPathRef path, void *info, CGPathApplierFunction function)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

BOOL CGPathContainsPoint(CGPathRef path, const CGAffineTransform *m, CGPoint point, BOOL eoFill)
{
  return MEMORY[0x270EE6FD0](path, m, eoFill, (__n128)point, *(__n128 *)&point.y);
}

CGPathRef CGPathCreateCopy(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x270EE6FD8](path);
}

CGPathRef CGPathCreateCopyByStrokingPath(CGPathRef path, const CGAffineTransform *transform, CGFloat lineWidth, CGLineCap lineCap, CGLineJoin lineJoin, CGFloat miterLimit)
{
  return (CGPathRef)MEMORY[0x270EE6FF0](path, transform, *(void *)&lineCap, *(void *)&lineJoin, lineWidth, miterLimit);
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x270EE7030]();
}

CGMutablePathRef CGPathCreateMutableCopyByTransformingPath(CGPathRef path, const CGAffineTransform *transform)
{
  return (CGMutablePathRef)MEMORY[0x270EE7040](path, transform);
}

CGPathRef CGPathCreateWithEllipseInRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7050](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7058](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x270EE7060](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, cornerWidth, cornerHeight);
}

BOOL CGPathEqualToPath(CGPathRef path1, CGPathRef path2)
{
  return MEMORY[0x270EE7068](path1, path2);
}

CGRect CGPathGetBoundingBox(CGPathRef path)
{
  MEMORY[0x270EE7070](path);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

CGRect CGPathGetPathBoundingBox(CGPathRef path)
{
  MEMORY[0x270EE7090](path);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

BOOL CGPathIsEmpty(CGPathRef path)
{
  return MEMORY[0x270EE70C8](path);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CGPathRef CGPathRetain(CGPathRef path)
{
  return (CGPathRef)MEMORY[0x270EE7108](path);
}

CGPoint CGPointFromString(NSString *string)
{
  MEMORY[0x270F05E70](string);
  result.CGFloat y = v2;
  result.CGFloat x = v1;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x270EE7170]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE71A0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGRect CGRectFromString(NSString *string)
{
  MEMORY[0x270F05E78](string);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x270EE71A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x270EE71C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x270EE71D0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x270EE71D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x270EE71F0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x270EE71F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x270EE7210]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x270EE7218]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x270EE7230]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE7250]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x270EE7260]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x270EE7268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x270EE7290]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

CGSize CGSizeFromString(NSString *string)
{
  MEMORY[0x270F05E80](string);
  result.CGFloat height = v2;
  result.CGFloat width = v1;
  return result;
}

uint64_t CSIsNull()
{
  return MEMORY[0x270F236B0]();
}

uint64_t CSRelease()
{
  return MEMORY[0x270F236D8]();
}

uint64_t CSSymbolGetRange()
{
  return MEMORY[0x270F23740]();
}

uint64_t CSSymbolicatorCreateWithPid()
{
  return MEMORY[0x270F23830]();
}

uint64_t CSSymbolicatorForeachSymbolWithMangledNameAtTime()
{
  return MEMORY[0x270F23870]();
}

uint64_t CSSymbolicatorGetTask()
{
  return MEMORY[0x270F238F8]();
}

CTFontRef CTFontCreateWithFontDescriptor(CTFontDescriptorRef descriptor, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x270EE9AE0](descriptor, matrix, size);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x270EE9AF8](name, matrix, size);
}

CTFontDescriptorRef CTFontDescriptorCreateMatchingFontDescriptor(CTFontDescriptorRef descriptor, CFSetRef mandatoryAttributes)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9B48](descriptor, mandatoryAttributes);
}

CTFontDescriptorRef CTFontDescriptorCreateWithNameAndSize(CFStringRef name, CGFloat size)
{
  return (CTFontDescriptorRef)MEMORY[0x270EE9B70](name, size);
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x270EE9D38](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x270EE9D40](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  MEMORY[0x270EE9D48](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.CGFloat height = v6;
  result.CGFloat width = v5;
  return result;
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  MEMORY[0x270EE9DB0](line, options);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

CTLineRef CTTypesetterCreateLine(CTTypesetterRef typesetter, CFRange stringRange)
{
  return (CTLineRef)MEMORY[0x270EE9EF8](typesetter, stringRange.location, stringRange.length);
}

CTTypesetterRef CTTypesetterCreateWithAttributedString(CFAttributedStringRef string)
{
  return (CTTypesetterRef)MEMORY[0x270EE9F08](string);
}

CVReturn CVMetalTextureCacheCreate(CFAllocatorRef allocator, CFDictionaryRef cacheAttributes, id metalDevice, CFDictionaryRef textureAttributes, CVMetalTextureCacheRef *cacheOut)
{
  return MEMORY[0x270EEA0E0](allocator, cacheAttributes, metalDevice, textureAttributes, cacheOut);
}

CVReturn CVMetalTextureCacheCreateTextureFromImage(CFAllocatorRef allocator, CVMetalTextureCacheRef textureCache, CVImageBufferRef sourceImage, CFDictionaryRef textureAttributes, MTLPixelFormat pixelFormat, size_t width, size_t height, size_t planeIndex, CVMetalTextureRef *textureOut)
{
  return MEMORY[0x270EEA0F0](allocator, textureCache, sourceImage, textureAttributes, pixelFormat, width, height, planeIndex);
}

void CVMetalTextureCacheFlush(CVMetalTextureCacheRef textureCache, CVOptionFlags options)
{
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x270EEA110](image);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1E8](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA220](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA240](pixelBuffer);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x270EEA320](texture);
}

OSStatus ExtAudioFileDispose(ExtAudioFileRef inExtAudioFile)
{
  return MEMORY[0x270EE2368](inExtAudioFile);
}

OSStatus ExtAudioFileGetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x270EE2370](inExtAudioFile, *(void *)&inPropertyID, ioPropertyDataSize, outPropertyData);
}

OSStatus ExtAudioFileRead(ExtAudioFileRef inExtAudioFile, UInt32 *ioNumberFrames, AudioBufferList *ioData)
{
  return MEMORY[0x270EE2398](inExtAudioFile, ioNumberFrames, ioData);
}

OSStatus ExtAudioFileSetProperty(ExtAudioFileRef inExtAudioFile, ExtAudioFilePropertyID inPropertyID, UInt32 inPropertyDataSize, const void *inPropertyData)
{
  return MEMORY[0x270EE23B8](inExtAudioFile, *(void *)&inPropertyID, *(void *)&inPropertyDataSize, inPropertyData);
}

OSStatus ExtAudioFileWrapAudioFileID(AudioFileID inFileID, Boolean inForWriting, ExtAudioFileRef *outExtAudioFile)
{
  return MEMORY[0x270EE23C8](inFileID, inForWriting, outExtAudioFile);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x270EF4790](*(void *)&iterator);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x270EF4820](*(void *)&object);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x270EF49D8](*(void *)&entry, key, allocator, *(void *)&options);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x270EF4AB8](*(void *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x270EF4AD0](name);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x270EF4C28](properties);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4C50](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x270EF4C58](buffer);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D48](buffer);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D68](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4D80](buffer);
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x270EF4DE0](buffer);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E18](buffer, *(void *)&options, seed);
}

IOSurfaceRef IOSurfaceLookup(IOSurfaceID csid)
{
  return (IOSurfaceRef)MEMORY[0x270EF4E28](*(void *)&csid);
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x270EF4E88](buffer, *(void *)&options, seed);
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x270EF2A50](aClassName);
}

NSZone *NSDefaultMallocZone(void)
{
  return (NSZone *)MEMORY[0x270EF2A70]();
}

void NSLog(NSString *format, ...)
{
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x270EF2BD8](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x270EF2BE8](aSelectorName);
}

NSString *__cdecl NSStringFromCGPoint(CGPoint point)
{
  return (NSString *)MEMORY[0x270F05E98]((__n128)point, *(__n128 *)&point.y);
}

NSString *__cdecl NSStringFromCGRect(CGRect rect)
{
  return (NSString *)MEMORY[0x270F05EA0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

NSString *__cdecl NSStringFromCGSize(CGSize size)
{
  return (NSString *)MEMORY[0x270F05EA8]((__n128)size, *(__n128 *)&size.height);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x270EF2C08](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x270EF2C38](aSelector);
}

uint64_t PKArrayFromCGPath()
{
  return MEMORY[0x270F54110]();
}

uint64_t PKCGPathCreateFromArray()
{
  return MEMORY[0x270F54118]();
}

uint64_t PKGet_INV_PTM_RATIO()
{
  return MEMORY[0x270F54120]();
}

uint64_t PKGet_PTM_RATIO()
{
  return MEMORY[0x270F54128]();
}

uint64_t PKPathCreateFromCGPathWithOptions()
{
  return MEMORY[0x270F54130]();
}

NSData *__cdecl UIImagePNGRepresentation(UIImage *image)
{
  return (NSData *)MEMORY[0x270F06078](image);
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t floatToHalfFloat(float a1)
{
  return MEMORY[0x270F44E30](a1);
}

uint64_t jet_createContext(void)
{
  return MEMORY[0x270F44E38]();
}

uint64_t jet_setClientLabel(NSString *a1)
{
  return MEMORY[0x270F44E40](a1);
}

uint64_t jet_isMetalSupported(void)
{
  return MEMORY[0x270F44E48]();
}

uint64_t jet_createSharedContext()
{
  return MEMORY[0x270F44E50]();
}

uint64_t jet_convert_pixel_data_rgb_565_to_rgba_8888(const void *a1, void *a2)
{
  return MEMORY[0x270F44E58](a1, a2);
}

uint64_t jet_convert_pixel_data_rgba_4444_to_rgba_8888(const void *a1, void *a2)
{
  return MEMORY[0x270F44E60](a1, a2);
}

uint64_t jet_convert_pixel_data_rgba_5551_to_rgba_8888(const void *a1, void *a2)
{
  return MEMORY[0x270F44E68](a1, a2);
}

uint64_t jet_convert_pixel_data_rgba_fp32_to_rgba_fp16(const void *a1, void *a2)
{
  return MEMORY[0x270F44E70](a1, a2);
}

uint64_t jet_convert_pixel_data_rgba_fp32_to_argb64_xr10_srgb(const void *a1, void *a2)
{
  return MEMORY[0x270F44E78](a1, a2);
}

uint64_t jet_context::create_texture_2d()
{
  return MEMORY[0x270F44E80]();
}

uint64_t jet_context::create_command_buffer(jet_context *this)
{
  return MEMORY[0x270F44E88](this);
}

uint64_t jet_buffer_pool::commit_data(jet_buffer_pool *this)
{
  return MEMORY[0x270F44E90](this);
}

uint64_t jet_buffer_pool::next_buffer(jet_buffer_pool *this)
{
  return MEMORY[0x270F44E98](this);
}

uint64_t jet_buffer_pool::get_data(jet_buffer_pool *this)
{
  return MEMORY[0x270F44EA0](this);
}

uint64_t jet_context_Metal::override_Metal_render_state()
{
  return MEMORY[0x270F44EA8]();
}

uint64_t jet_context_Metal::jet_context_Metal()
{
  return MEMORY[0x270F44EB0]();
}

void jet_context_Metal::~jet_context_Metal(jet_context_Metal *this)
{
}

uint64_t jet_context_OpenGL::synchronize_OpenGL_state(jet_context_OpenGL *this)
{
  return MEMORY[0x270F44EC0](this);
}

void jet_context_OpenGL::jet_context_OpenGL(jet_context_OpenGL *this, EAGLContext *a2)
{
}

uint64_t PKPath::createPath(PKPath *this)
{
  return MEMORY[0x270F54138](this);
}

uint64_t PKCAether::Evaluator::Evaluator(PKCAether::Evaluator *this, const PKCAether *a2)
{
  return MEMORY[0x270F54140](this, a2);
}

uint64_t jet_buffer_pool::get_current_buffer(jet_buffer_pool *this)
{
  return MEMORY[0x270F44ED0](this);
}

uint64_t PKCAether::Evaluator::evalFieldsVec2()
{
  return MEMORY[0x270F54148]();
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x270F98560](this, __str);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x270F98BF0]();
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

void *__dynamic_cast(const void *lpsrc, const struct __class_type_info *lpstype, const struct __class_type_info *lpdtype, ptrdiff_t s2d)
{
  return (void *)MEMORY[0x270F98F30](lpsrc, lpstype, lpdtype, s2d);
}

double __exp10(double a1)
{
  MEMORY[0x270ED7DC8](a1);
  return result;
}

simd_float4x4 __invert_f4(simd_float4x4 a1)
{
  MEMORY[0x270ED7E20]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2], (__n128)a1.columns[3]);
  result.columns[3].i64[1] = v8;
  result.columns[3].i64[0] = v7;
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

uint64_t _os_crash()
{
  return MEMORY[0x270ED8060]();
}

float acosf(float a1)
{
  MEMORY[0x270ED8598](a1);
  return result;
}

void alBufferData(ALuint bid, ALenum format, const ALvoid *data, ALsizei size, ALsizei freq)
{
}

void alDeleteBuffers(ALsizei n, const ALuint *buffers)
{
}

void alDeleteSources(ALsizei n, const ALuint *sources)
{
}

void alGenBuffers(ALsizei n, ALuint *buffers)
{
}

void alGenSources(ALsizei n, ALuint *sources)
{
}

ALenum alGetError(void)
{
  return MEMORY[0x270EF96D8]();
}

void alGetListener3f(ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3)
{
}

void alGetListenerf(ALenum param, ALfloat *value)
{
}

void alGetSource3f(ALuint sid, ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3)
{
}

void alGetSourcef(ALuint sid, ALenum param, ALfloat *value)
{
}

void alGetSourcei(ALuint sid, ALenum param, ALint *value)
{
}

void alListener3f(ALenum param, ALfloat value1, ALfloat value2, ALfloat value3)
{
}

void alListenerf(ALenum param, ALfloat value)
{
}

void alSource3f(ALuint sid, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3)
{
}

void alSourcePause(ALuint sid)
{
}

void alSourcePlay(ALuint sid)
{
}

void alSourceQueueBuffers(ALuint sid, ALsizei numEntries, const ALuint *bids)
{
}

void alSourceStop(ALuint sid)
{
}

void alSourceUnqueueBuffers(ALuint sid, ALsizei numEntries, ALuint *bids)
{
}

void alSourcef(ALuint sid, ALenum param, ALfloat value)
{
}

void alSourcei(ALuint sid, ALenum param, ALint value)
{
}

ALCBOOLean alcCloseDevice(ALCdevice *device)
{
  return MEMORY[0x270EF9758](device);
}

ALCcontext *__cdecl alcCreateContext(ALCdevice *device, const ALCint *attrlist)
{
  return (ALCcontext *)MEMORY[0x270EF9760](device, attrlist);
}

void alcDestroyContext(ALCcontext *context)
{
}

ALCcontext *alcGetCurrentContext(void)
{
  return (ALCcontext *)MEMORY[0x270EF9770]();
}

ALCBOOLean alcMakeContextCurrent(ALCcontext *context)
{
  return MEMORY[0x270EF9778](context);
}

ALCdevice *__cdecl alcOpenDevice(const ALCchar *devicename)
{
  return (ALCdevice *)MEMORY[0x270EF9780](devicename);
}

void alcProcessContext(ALCcontext *context)
{
}

void alcSuspendContext(ALCcontext *context)
{
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x270ED85F8](*(void *)&__upper_bound);
}

float asinf(float a1)
{
  MEMORY[0x270ED8618](a1);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

void bzero(void *a1, size_t a2)
{
}

uint64_t clear_mapped_memory()
{
  return MEMORY[0x270F23928]();
}

float cosf(float a1)
{
  MEMORY[0x270ED9130](a1);
  return result;
}

uint64_t create_mapped_memory_cache_for_task()
{
  return MEMORY[0x270F23930]();
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x270F9C698](strm, *(void *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x270F9C6A8](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x270F9C6B0](strm, *(void *)&level, *(void *)&method, *(void *)&windowBits, *(void *)&memLevel, *(void *)&strategy, version, *(void *)&stream_size);
}

uint64_t destroy_mapped_memory_cache()
{
  return MEMORY[0x270F23940]();
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x270ED9318](identifier, flags);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x270ED9340]();
}

void dispatch_group_notify(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x270ED9458](attr, *(void *)&qos_class, *(void *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x270ED94B8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x270ED94C8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x270ED94D0](dsema, timeout);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x270ED95A8](when, delta);
}

uint64_t dyld_get_active_platform()
{
  return MEMORY[0x270ED9698]();
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x270ED96A8]();
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

uint64_t fieldRepresentedObject()
{
  return MEMORY[0x270F54150]();
}

float fmodf(float a1, float a2)
{
  MEMORY[0x270ED99D8](a1, a2);
  return result;
}

void free(void *a1)
{
}

void glBindFramebuffer(GLenum target, GLuint framebuffer)
{
}

void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
{
}

GLenum glCheckFramebufferStatus(GLenum target)
{
  return MEMORY[0x270EF9828](*(void *)&target);
}

void glClear(GLbitfield mask)
{
}

void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
{
}

void glDepthMask(GLBOOLean flag)
{
}

void glDisable(GLenum cap)
{
}

void glEnable(GLenum cap)
{
}

void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
{
}

void glGetBooleanv(GLenum pname, GLBOOLean *params)
{
}

GLenum glGetError(void)
{
  return MEMORY[0x270EF9990]();
}

void glGetFloatv(GLenum pname, GLfloat *params)
{
}

void glGetIntegerv(GLenum pname, GLint *params)
{
}

void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
{
}

void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
{
}

void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
{
}

kern_return_t host_processor_info(host_t host, processor_flavor_t flavor, natural_t *out_processor_count, processor_info_array_t *out_processor_info, mach_msg_type_number_t *out_processor_infoCnt)
{
  return MEMORY[0x270ED9E28](*(void *)&host, *(void *)&flavor, out_processor_count, out_processor_info, out_processor_infoCnt);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x270F9C730](strm, *(void *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x270F9C738](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x270F9C740](strm, *(void *)&windowBits, version, *(void *)&stream_size);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x270ED9F50]();
}

uint64_t mach_approximate_time(void)
{
  return MEMORY[0x270EDA140]();
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x270EDA178]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x270EDA288](info);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

uint64_t mapped_memory_read()
{
  return MEMORY[0x270F23950]();
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x270EDA770](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

{
  MEMORY[0x270F9A570](context);
}

{
  return (void *)MEMORY[0x270F9A588]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x270F9A598](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_copyWeak(id *to, id *from)
{
}

void objc_destroyWeak(id *location)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_rethrow(void)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_initWeak(id *location, id val)
{
  return (id)MEMORY[0x270F9A688](location, val);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x270F9A6B0](location);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6D0](a1, a2);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x270F9A728]();
}

uint64_t self
{
  return MEMORY[0x270F9A730]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A890](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x270F9A9F8](location, obj);
}

void objc_terminate(void)
{
}

id objc_unsafeClaimAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x270F9AA38](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int rand(void)
{
  return MEMORY[0x270EDB0D8]();
}

float sinf(float a1)
{
  MEMORY[0x270EDB4F0](a1);
  return result;
}

uint64_t snoise2()
{
  return MEMORY[0x270F54160]();
}

uint64_t srdnoise3()
{
  return MEMORY[0x270F54170]();
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

kern_return_t vm_deallocate(vm_map_t target_task, vm_address_t address, vm_size_t size)
{
  return MEMORY[0x270EDBA90](*(void *)&target_task, address, size);
}