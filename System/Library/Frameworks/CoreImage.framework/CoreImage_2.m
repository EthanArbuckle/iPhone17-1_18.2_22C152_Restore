BOOL SurfaceCroppedWriteBmtlToFile(__IOSurface *a1, const char *a2, double a3, double a4)
{
  size_t Width;
  size_t Height;
  size_t BytesPerRow;
  signed int PixelFormat;
  unint64_t v12;
  unint64_t v13;
  signed int v15;
  BOOL v16;
  int v17;
  FILE *v18;
  FILE *v19;
  void *BaseAddress;
  int v22;
  long long v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  signed int v29;

  if (IOSurfaceGetPlaneCount(a1)) {
    return 0;
  }
  Width = IOSurfaceGetWidth(a1);
  Height = IOSurfaceGetHeight(a1);
  BytesPerRow = IOSurfaceGetBytesPerRow(a1);
  PixelFormat = IOSurfaceGetPixelFormat(a1);
  v12 = Width >= (unint64_t)a3 ? (unint64_t)a3 : Width;
  v13 = Height >= (unint64_t)a4 ? (unint64_t)a4 : Height;
  if (!v12 || v13 == 0) {
    return 0;
  }
  v15 = PixelFormat;
  v16 = 0;
  if (PixelFormat > 843264309)
  {
    if (PixelFormat <= 1380401728)
    {
      switch(PixelFormat)
      {
        case 843264310:
          v17 = 60;
          break;
        case 1111970369:
          v17 = 80;
          break;
        case 1278226488:
          v17 = 1;
          break;
        default:
          return v16;
      }
    }
    else if (PixelFormat > 1380411456)
    {
      if (PixelFormat == 1380411457)
      {
        v17 = 115;
      }
      else
      {
        if (PixelFormat != 1815491698) {
          return v16;
        }
        v17 = 110;
      }
    }
    else if (PixelFormat == 1380401729)
    {
      v17 = 70;
    }
    else
    {
      if (PixelFormat != 1380410945) {
        return v16;
      }
      v17 = 125;
    }
  }
  else if (PixelFormat <= 826487093)
  {
    switch(PixelFormat)
    {
      case 826486840:
        v17 = 10;
        break;
      case 826486886:
        v17 = 55;
        break;
      case 826486888:
        v17 = 25;
        break;
      default:
        return v16;
    }
  }
  else if (PixelFormat > 843264101)
  {
    if (PixelFormat == 843264102)
    {
      v17 = 105;
    }
    else
    {
      if (PixelFormat != 843264104) {
        return v16;
      }
      v17 = 65;
    }
  }
  else if (PixelFormat == 826487094)
  {
    v17 = 20;
  }
  else
  {
    if (PixelFormat != 843264056) {
      return v16;
    }
    v17 = 30;
  }
  v18 = fopen(a2, "wb");
  if (!v18) {
    return 0;
  }
  v19 = v18;
  v22 = 1280593218;
  v23 = xmmword_1939584F0;
  v24 = v12;
  v25 = v13;
  v26 = 0x100000001;
  v27 = v17;
  v28 = BytesPerRow;
  v29 = v15;
  if (fwrite(&v22, 1uLL, 0x30uLL, v18) == 48 && !IOSurfaceLock(a1, 1u, 0))
  {
    BaseAddress = IOSurfaceGetBaseAddress(a1);
    if (BaseAddress) {
      v16 = fwrite(BaseAddress, BytesPerRow, Height, v19) == Height;
    }
    else {
      v16 = 0;
    }
    IOSurfaceUnlock(a1, 1u, 0);
  }
  else
  {
    v16 = 0;
  }
  fclose(v19);
  return v16;
}

void *__TrashSurface_block_invoke(int a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return memset(__b, 191, a6 * a5);
}

CGImageRef SurfaceCreateCGImage(__IOSurface *a1, CGColorSpace *a2, int a3)
{
  signed int PixelFormat = IOSurfaceGetPixelFormat(a1);
  size_t Width = IOSurfaceGetWidth(a1);
  size_t Height = IOSurfaceGetHeight(a1);
  CGImageRef v9 = 0;
  if (!Width) {
    return v9;
  }
  size_t v10 = Height;
  if (!Height) {
    return v9;
  }
  CFTypeRef v11 = IOSurfaceCopyValue(a1, @"IOSurfaceAlphaIsOpaque");
  CFTypeRef v12 = v11;
  if (v11) {
    CFRelease(v11);
  }
  if (IOSurfaceGetPlaneCount(a1) != 2)
  {
    CGImageRef v9 = 0;
    CFTypeRef v19 = (CFTypeRef)*MEMORY[0x1E4F1CFD0];
    if (PixelFormat > 1278226735)
    {
      if (PixelFormat > 1667838821)
      {
        if (PixelFormat <= 1919365991)
        {
          if (PixelFormat <= 1815361649)
          {
            if (PixelFormat != 1667838822)
            {
              if (PixelFormat != 1667838824)
              {
                if (PixelFormat != 1815162994) {
                  return v9;
                }
                CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1EE462280;
                if (v12 == v19) {
                  CGBitmapInfo v20 = 4357;
                }
                else {
                  CGBitmapInfo v20 = 4355;
                }
                unint64_t BytesPerRow = 2 * IOSurfaceGetBytesPerRow(a1);
                CFRetain(a1);
                v22 = CGDataProviderCreateDirect(a1, BytesPerRow * v10, &callbacks);
                int v23 = 0;
LABEL_157:
                size_t v38 = 64;
                size_t v41 = 16;
                if (a2) {
                  goto LABEL_199;
                }
                goto LABEL_194;
              }
              int v23 = 0;
              CGBitmapInfo v20 = 4352;
              goto LABEL_162;
            }
            int v23 = 0;
            CGBitmapInfo v20 = 8448;
            size_t v38 = 96;
LABEL_172:
            size_t v41 = 32;
            goto LABEL_179;
          }
          if (PixelFormat == 1815361650)
          {
            int v23 = 0;
            CGBitmapInfo v20 = 4096;
LABEL_162:
            size_t v38 = 48;
LABEL_178:
            size_t v41 = 16;
            goto LABEL_179;
          }
          if (PixelFormat != 1815491698)
          {
            if (PixelFormat != 1919365990) {
              return v9;
            }
            goto LABEL_87;
          }
          int v23 = 0;
          BOOL v42 = v12 == v19;
          int v43 = 4097;
          int v44 = 4101;
LABEL_174:
          if (v42) {
            CGBitmapInfo v20 = v44;
          }
          else {
            CGBitmapInfo v20 = v43;
          }
          size_t v38 = 64;
          goto LABEL_178;
        }
        if (PixelFormat <= 2033463351)
        {
          if (PixelFormat != 1919365992)
          {
            if (PixelFormat == 1999843442)
            {
              CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1EE462230;
              unint64_t BytesPerRow = 2 * IOSurfaceGetBytesPerRow(a1);
            }
            else
            {
              if (PixelFormat != 1999908961) {
                return v9;
              }
              CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1EE462258;
              unint64_t BytesPerRow = IOSurfaceGetBytesPerRow(a1);
            }
            CFRetain(a1);
            v22 = CGDataProviderCreateDirect(a1, BytesPerRow * v10, &callbacks);
            int v23 = 0;
            CGBitmapInfo v20 = 4353;
            goto LABEL_157;
          }
LABEL_87:
          if (PixelFormat == 1919365992) {
            size_t v38 = 48;
          }
          else {
            size_t v38 = 96;
          }
          unint64_t BytesPerRow = (v38 >> 3) * Width;
          Mutable = CFDataCreateMutable(0, BytesPerRow * v10);
          if (!Mutable) {
            return 0;
          }
          CFDataRef v40 = Mutable;
          if (PixelFormat == 1919365992) {
            size_t v41 = 16;
          }
          else {
            size_t v41 = 32;
          }
          if (PixelFormat == 1919365992) {
            CGBitmapInfo v20 = 4352;
          }
          else {
            CGBitmapInfo v20 = 8448;
          }
          CFDataSetLength(Mutable, BytesPerRow * v10);
          v61[0] = MEMORY[0x1E4F143A8];
          v61[1] = 0x40000000;
          v61[2] = __SurfaceCreateCGImage_block_invoke;
          v61[3] = &__block_descriptor_tmp_5;
          BOOL v62 = PixelFormat == 1919365992;
          v61[4] = v40;
          v61[5] = BytesPerRow / (v38 >> 3) * v10;
          SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v61);
          v22 = CGDataProviderCreateWithCFData(v40);
          CFRelease(v40);
          int v23 = 0;
          if (a2) {
            goto LABEL_199;
          }
LABEL_194:
          a2 = CopySurfaceColorSpace(a1);
          if (!a2)
          {
            if (v23) {
              CGColorSpaceRef DeviceGray = CGColorSpaceCreateDeviceGray();
            }
            else {
              CGColorSpaceRef DeviceGray = CGColorSpaceCreateDeviceRGB();
            }
            a2 = DeviceGray;
          }
          goto LABEL_199;
        }
        if (PixelFormat != 2033463352)
        {
          if (PixelFormat == 2037741158)
          {
            v45 = &xmmword_1EE4620A0;
          }
          else
          {
            if (PixelFormat != 2037741171) {
              return v9;
            }
            v45 = &xmmword_1EE462050;
          }
          goto LABEL_190;
        }
        CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1EE4620F0;
        unint64_t BytesPerRow = IOSurfaceGetBytesPerRow(a1);
        CFRetain(a1);
        v22 = CGDataProviderCreateDirect(a1, BytesPerRow * v10, &callbacks);
        int v23 = 0;
        CGBitmapInfo v20 = 3;
LABEL_192:
        size_t v38 = 32;
        goto LABEL_193;
      }
      if (PixelFormat > 1279340647)
      {
        if (PixelFormat > 1380410944)
        {
          switch(PixelFormat)
          {
            case 1380410945:
              int v23 = 0;
              if (v12 == v19) {
                CGBitmapInfo v20 = 8453;
              }
              else {
                CGBitmapInfo v20 = 8449;
              }
              size_t v38 = 128;
              goto LABEL_172;
            case 1380411457:
              int v23 = 0;
              BOOL v42 = v12 == v19;
              int v43 = 4353;
              int v44 = 4357;
              break;
            case 1664496754:
              int v23 = 0;
              BOOL v42 = v12 == v19;
              int v43 = 4098;
              int v44 = 4102;
              break;
            default:
              return v9;
          }
          goto LABEL_174;
        }
        switch(PixelFormat)
        {
          case 1279340648:
            BOOL v47 = v12 == v19;
            int v48 = 4353;
            int v49 = 4357;
            break;
          case 1279340854:
            BOOL v47 = v12 == v19;
            int v48 = 4097;
            int v49 = 4101;
            break;
          case 1380401729:
            int v23 = 0;
            if (v12 == v19) {
              CGBitmapInfo v20 = 5;
            }
            else {
              CGBitmapInfo v20 = 1;
            }
            goto LABEL_153;
          default:
            return v9;
        }
        if (v47) {
          CGBitmapInfo v20 = v49;
        }
        else {
          CGBitmapInfo v20 = v48;
        }
        int v23 = 1;
        size_t v38 = 32;
        goto LABEL_178;
      }
      if ((PixelFormat - 1278226736) > 6 || ((1 << (PixelFormat - 48)) & 0x45) == 0)
      {
        if (PixelFormat != 1279340600)
        {
          if (PixelFormat != 1279340646) {
            return v9;
          }
          if (v12 == v19) {
            CGBitmapInfo v20 = 8453;
          }
          else {
            CGBitmapInfo v20 = 8449;
          }
          int v23 = 1;
          size_t v38 = 64;
          goto LABEL_172;
        }
        if (v12 == v19) {
          CGBitmapInfo v20 = 5;
        }
        else {
          CGBitmapInfo v20 = 1;
        }
        int v23 = 1;
        size_t v38 = 16;
LABEL_154:
        size_t v41 = 8;
        goto LABEL_179;
      }
      int v23 = 1;
      CGBitmapInfo v20 = 4096;
LABEL_112:
      size_t v41 = 16;
      size_t v38 = 16;
      goto LABEL_179;
    }
    if (PixelFormat > 843264303)
    {
      if (PixelFormat <= 1093677111)
      {
        if ((PixelFormat - 843264304) <= 6 && ((1 << (PixelFormat - 48)) & 0x45) != 0)
        {
          CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1EE462140;
          unint64_t BytesPerRow = 2 * IOSurfaceGetBytesPerRow(a1);
LABEL_69:
          CFRetain(a1);
          v22 = CGDataProviderCreateDirect(a1, BytesPerRow * v10, &callbacks);
          int v23 = 0;
          CGBitmapInfo v20 = 4101;
          goto LABEL_157;
        }
        if (PixelFormat == 846624102)
        {
          v45 = &xmmword_1EE4620C8;
        }
        else
        {
          if (PixelFormat != 846624121) {
            return v9;
          }
          v45 = &xmmword_1EE462078;
        }
        goto LABEL_190;
      }
      if (PixelFormat <= 1278226487)
      {
        switch(PixelFormat)
        {
          case 1093677112:
            CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1EE4622A8;
            unint64_t BytesPerRow = 4 * IOSurfaceGetBytesPerRow(a1);
            CFRetain(a1);
            v22 = CGDataProviderCreateDirect(a1, BytesPerRow * v10, &callbacks);
            int v23 = 0;
            CGBitmapInfo v20 = 1;
            goto LABEL_192;
          case 1094862674:
            int v23 = 0;
            BOOL v24 = v12 == v19;
            int v25 = 8193;
            int v26 = 8197;
            break;
          case 1111970369:
            int v23 = 0;
            BOOL v24 = v12 == v19;
            int v25 = 8194;
            int v26 = 8198;
            break;
          default:
            return v9;
        }
        goto LABEL_150;
      }
      switch(PixelFormat)
      {
        case 1278226488:
          CGBitmapInfo v20 = 0;
          int v23 = 1;
          size_t v41 = 8;
          size_t v38 = 8;
          break;
        case 1278226534:
          int v23 = 1;
          CGBitmapInfo v20 = 8448;
          size_t v41 = 32;
          size_t v38 = 32;
          break;
        case 1278226536:
          int v23 = 1;
          CGBitmapInfo v20 = 4352;
          goto LABEL_112;
        default:
          return v9;
      }
    }
    else
    {
      if (PixelFormat > 826487087)
      {
        if (PixelFormat <= 843264055)
        {
          if ((PixelFormat - 826487088) > 6 || ((1 << (PixelFormat - 48)) & 0x45) == 0) {
            return v9;
          }
          CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1EE4621E0;
          unint64_t BytesPerRow = 4 * IOSurfaceGetBytesPerRow(a1);
          goto LABEL_69;
        }
        if (PixelFormat != 843264056)
        {
          if (PixelFormat != 843264102)
          {
            if (PixelFormat != 843264104) {
              return v9;
            }
            CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1EE462168;
            unint64_t BytesPerRow = 2 * IOSurfaceGetBytesPerRow(a1);
LABEL_103:
            CFRetain(a1);
            v22 = CGDataProviderCreateDirect(a1, BytesPerRow * v10, &callbacks);
            int v23 = 0;
            CGBitmapInfo v20 = 4357;
            goto LABEL_157;
          }
          CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1EE462190;
          unint64_t BytesPerRow = 2 * IOSurfaceGetBytesPerRow(a1);
          goto LABEL_166;
        }
        v45 = &xmmword_1EE462118;
LABEL_190:
        long long v50 = v45[1];
        *(_OWORD *)&callbacks.version = *v45;
        *(_OWORD *)&callbacks.releaseBytePointer = v50;
        callbacks.releaseInfo = (CGDataProviderReleaseInfoCallback)*((void *)v45 + 4);
        unint64_t BytesPerRow = 2 * IOSurfaceGetBytesPerRow(a1);
        goto LABEL_191;
      }
      if (PixelFormat > 826486839)
      {
        if (PixelFormat == 826486840)
        {
          CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1EE4621B8;
          unint64_t BytesPerRow = 4 * IOSurfaceGetBytesPerRow(a1);
LABEL_191:
          CFRetain(a1);
          v22 = CGDataProviderCreateDirect(a1, BytesPerRow * v10, &callbacks);
          int v23 = 0;
          CGBitmapInfo v20 = 5;
          goto LABEL_192;
        }
        if (PixelFormat != 826486886)
        {
          if (PixelFormat != 826486888) {
            return v9;
          }
          v27 = (size_t (__cdecl *)(void *, void *, off_t, size_t))providerGetBytesAtPositionCallback_1C0h_surface;
          if (a3) {
            v27 = (size_t (__cdecl *)(void *, void *, off_t, size_t))providerGetBytesAtPositionCallback_1C0h_surface_lut;
          }
          memset(&callbacks, 0, 24);
          callbacks.getBytesAtPosition = v27;
          callbacks.releaseInfo = (CGDataProviderReleaseInfoCallback)providerReleaseCFInfoCallback;
          unint64_t BytesPerRow = 4 * IOSurfaceGetBytesPerRow(a1);
          goto LABEL_103;
        }
        CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1EE462208;
        unint64_t BytesPerRow = 4 * IOSurfaceGetBytesPerRow(a1);
LABEL_166:
        CFRetain(a1);
        v22 = CGDataProviderCreateDirect(a1, BytesPerRow * v10, &callbacks);
        int v23 = 0;
        CGBitmapInfo v20 = 8453;
        size_t v38 = 128;
        size_t v41 = 32;
        if (a2) {
          goto LABEL_199;
        }
        goto LABEL_194;
      }
      if (PixelFormat != 24)
      {
        if (PixelFormat != 32) {
          return v9;
        }
        int v23 = 0;
        BOOL v24 = v12 == v19;
        int v25 = 2;
        int v26 = 6;
LABEL_150:
        if (v24) {
          CGBitmapInfo v20 = v26;
        }
        else {
          CGBitmapInfo v20 = v25;
        }
LABEL_153:
        size_t v38 = 32;
        goto LABEL_154;
      }
      CGBitmapInfo v20 = 0;
      int v23 = 0;
      size_t v41 = 8;
      size_t v38 = 24;
    }
LABEL_179:
    CGDataProviderDirectCallbacks callbacks = *(CGDataProviderDirectCallbacks *)byte_1EE4622D0;
    unint64_t BytesPerRow = IOSurfaceGetBytesPerRow(a1);
    CFRetain(a1);
    v22 = CGDataProviderCreateDirect(a1, BytesPerRow * v10, &callbacks);
    if (a2) {
      goto LABEL_199;
    }
    goto LABEL_194;
  }
  v13 = CFDataCreateMutable(0, 3 * Width * v10);
  if (!v13) {
    return 0;
  }
  v14 = v13;
  CFDataSetLength(v13, 3 * Width * v10);
  MutableBytePtr = CFDataGetMutableBytePtr(v14);
  size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(a1, 0);
  size_t v58 = IOSurfaceGetBytesPerRowOfPlane(a1, 1uLL);
  int WidthOfPlane = IOSurfaceGetWidthOfPlane(a1, 1uLL);
  int HeightOfPlane = IOSurfaceGetHeightOfPlane(a1, 1uLL);
  if ((PixelFormat & 0xFD000000) != 0x2D000000 && PixelFormat >> 24 != 124 && PixelFormat >> 24 != 38)
  {
    int v16 = 709;
    int v17 = 118;
    if (PixelFormat > 1937126451)
    {
      if (PixelFormat <= 2016686639)
      {
        if (PixelFormat > 1953903153)
        {
          if (PixelFormat == 1953903154) {
            goto LABEL_47;
          }
          unsigned __int16 v46 = 13364;
        }
        else
        {
          if (PixelFormat == 1937126452) {
            goto LABEL_47;
          }
          unsigned __int16 v46 = 12848;
        }
        int v28 = v46 | 0x74760000;
      }
      else if (PixelFormat <= 2016687155)
      {
        if (PixelFormat == 2016686640) {
          goto LABEL_47;
        }
        int v28 = 2016686642;
      }
      else
      {
        if (PixelFormat == 2016687156 || PixelFormat == 2033463352) {
          goto LABEL_47;
        }
        int v28 = 2037741171;
      }
    }
    else if (PixelFormat <= 1882468911)
    {
      if (PixelFormat > 875704949)
      {
        if (PixelFormat == 875704950) {
          goto LABEL_47;
        }
        int v28 = 875836534;
      }
      else
      {
        if (PixelFormat == 846624121) {
          goto LABEL_47;
        }
        int v28 = 875704438;
      }
    }
    else if (PixelFormat <= 1882469427)
    {
      if (PixelFormat == 1882468912) {
        goto LABEL_47;
      }
      int v28 = 1882468914;
    }
    else
    {
      if (PixelFormat == 1882469428 || PixelFormat == 1937125936) {
        goto LABEL_47;
      }
      int v28 = 1937125938;
    }
    if (PixelFormat == v28) {
      goto LABEL_47;
    }
    goto LABEL_14;
  }
  int v16 = 709;
  int v17 = 118;
  if ((PixelFormat & 0xFFFFFFu) - 3700272 > 4 || ((1 << (PixelFormat - 48)) & 0x15) == 0)
  {
    int v18 = PixelFormat & 0xFFFFFF | 0x20000000;
    if (((v18 - 544765488) > 4 || ((1 << (PixelFormat - 48)) & 0x15) == 0) && v18 != 544830835)
    {
LABEL_14:
      int v16 = 601;
      int v17 = 102;
    }
  }
LABEL_47:
  if (IOSurfaceLockPlane()) {
    goto LABEL_49;
  }
  if (IOSurfaceLockPlane()) {
    goto LABEL_49;
  }
  BaseAddressOfPlane = (__int16 *)IOSurfaceGetBaseAddressOfPlane(a1, 0);
  if (!BaseAddressOfPlane
    || (int v30 = v17,
        int v31 = v16,
        int v32 = HeightOfPlane,
        v33 = BaseAddressOfPlane,
        v34 = IOSurfaceGetBaseAddressOfPlane(a1, 1uLL),
        int v36 = v30,
        unint64_t BytesPerRow = 3 * Width,
        !v34))
  {
LABEL_49:
    CFRelease(v14);
    return 0;
  }
  if (PixelFormat <= 1937125937)
  {
    if (PixelFormat <= 1885745711)
    {
      if (PixelFormat <= 1882468911)
      {
        switch(PixelFormat)
        {
          case 1751527984:
            Convert_420h_to_RGB(v31, Width, v10, WidthOfPlane, v32, 3 * Width, BytesPerRowOfPlane, v58, (uint64_t)MutableBytePtr, (uint64_t)v33, (uint64_t)v34);
            goto LABEL_265;
          case 1751527986:
            Convert_422h_to_RGB(v31, Width, v10, WidthOfPlane, 3 * Width, BytesPerRowOfPlane, v58, (uint64_t)MutableBytePtr, (uint64_t)v33, (uint64_t)v34);
            goto LABEL_265;
          case 1751528500:
            Convert_444h_to_RGB(v31, Width, v10, 3 * Width, BytesPerRowOfPlane, v58, (uint64_t)MutableBytePtr, v33, (uint64_t)v34);
            goto LABEL_265;
        }
        goto LABEL_261;
      }
      if (PixelFormat != 1882468912)
      {
        if (PixelFormat != 1882468914)
        {
          int v55 = 1882469428;
LABEL_242:
          if (PixelFormat == v55)
          {
            Convert_444p_to_RGB(v36, v31, Width, v10, 3 * Width, BytesPerRowOfPlane, v58, (uint64_t)MutableBytePtr, (uint64_t)v33, (uint64_t)v34);
            goto LABEL_265;
          }
          goto LABEL_261;
        }
LABEL_258:
        Convert_422p_to_RGB(v36, v31, Width, v10, WidthOfPlane, 3 * Width, BytesPerRowOfPlane, v58, (uint64_t)MutableBytePtr, (uint64_t)v33, (uint64_t)v34);
        goto LABEL_265;
      }
    }
    else
    {
      if (PixelFormat > 1936077359)
      {
        if (PixelFormat > 1936077875)
        {
          if (PixelFormat != 1936077876)
          {
            int v54 = 1937125936;
LABEL_250:
            if (PixelFormat != v54) {
              goto LABEL_261;
            }
            goto LABEL_251;
          }
LABEL_255:
          Convert_444x_to_RGB(v36, v31, Width, v10, 3 * Width, BytesPerRowOfPlane, v58, (uint64_t)MutableBytePtr, (unsigned __int16 *)v33, (uint64_t)v34);
          goto LABEL_265;
        }
        if (PixelFormat != 1936077360)
        {
          int v53 = 1936077362;
          goto LABEL_246;
        }
LABEL_251:
        Convert_420x_to_RGB(v36, v31, Width, v10, WidthOfPlane, v32, 3 * Width, BytesPerRowOfPlane, v58, (uint64_t)MutableBytePtr, (uint64_t)v33, (uint64_t)v34);
        goto LABEL_265;
      }
      if (PixelFormat != 1885745712)
      {
        if (PixelFormat != 1885745714)
        {
          int v55 = 1885746228;
          goto LABEL_242;
        }
        goto LABEL_258;
      }
    }
    Convert_420p_to_RGB(v36, v31, Width, v10, WidthOfPlane, v32, 3 * Width, BytesPerRowOfPlane, v58, (uint64_t)MutableBytePtr, (uint64_t)v33, (uint64_t)v34);
    goto LABEL_265;
  }
  if (PixelFormat > 1953903667)
  {
    if (PixelFormat > 2016687155)
    {
      if (PixelFormat > 2019963441)
      {
        if (PixelFormat != 2019963442)
        {
          int v37 = 2019963956;
LABEL_254:
          if (PixelFormat == v37) {
            goto LABEL_255;
          }
          goto LABEL_261;
        }
LABEL_256:
        Convert_422x_to_RGB(v36, v31, Width, v10, WidthOfPlane, 3 * Width, BytesPerRowOfPlane, v58, (uint64_t)MutableBytePtr, (uint64_t)v33, (uint64_t)v34);
        goto LABEL_265;
      }
      if (PixelFormat != 2016687156)
      {
        int v54 = 2019963440;
        goto LABEL_250;
      }
      goto LABEL_255;
    }
    if (PixelFormat == 1953903668) {
      goto LABEL_255;
    }
    if (PixelFormat != 2016686640)
    {
      int v53 = 2016686642;
      goto LABEL_246;
    }
    goto LABEL_251;
  }
  if (PixelFormat <= 1952854577)
  {
    if (PixelFormat == 1937125938) {
      goto LABEL_256;
    }
    if (PixelFormat != 1937126452)
    {
      int v54 = 1952854576;
      goto LABEL_250;
    }
    goto LABEL_255;
  }
  if (PixelFormat <= 1953903151)
  {
    if (PixelFormat != 1952854578)
    {
      int v37 = 1952855092;
      goto LABEL_254;
    }
    goto LABEL_256;
  }
  if (PixelFormat == 1953903152) {
    goto LABEL_251;
  }
  int v53 = 1953903154;
LABEL_246:
  if (PixelFormat == v53) {
    goto LABEL_256;
  }
LABEL_261:
  if ((PixelFormat & 0xFFFFFFEF) == 0x34323266)
  {
    Convert_422_to_RGB(v36, v31, Width, v10, WidthOfPlane, 3 * Width, BytesPerRowOfPlane, v58, v35, (uint64_t)MutableBytePtr, (uint64_t)v33, (uint64_t)v34);
  }
  else
  {
    if ((PixelFormat & 0xFFFFFFEF) != 0x34323066)
    {
      IOSurfaceUnlockPlane();
      IOSurfaceUnlockPlane();
      v22 = 0;
      goto LABEL_266;
    }
    Convert_420_to_RGB(v36, v31, Width, v10, WidthOfPlane, v32, 3 * Width, BytesPerRowOfPlane, v35, v58, (uint64_t)MutableBytePtr, (uint64_t)v33, (uint64_t)v34);
  }
LABEL_265:
  IOSurfaceUnlockPlane();
  IOSurfaceUnlockPlane();
  v22 = CGDataProviderCreateWithCFData(v14);
LABEL_266:
  CFRelease(v14);
  CGBitmapInfo v20 = 0;
  int v23 = 0;
  size_t v38 = 24;
LABEL_193:
  size_t v41 = 8;
  if (!a2) {
    goto LABEL_194;
  }
LABEL_199:
  if (v22)
  {
    CGImageRef v9 = CGImageCreate(Width, v10, v41, v38, BytesPerRow, a2, v20, v22, 0, 1, kCGRenderingIntentDefault);
    CGDataProviderRelease(v22);
  }
  else
  {
    CGImageRef v9 = 0;
  }
  CGColorSpaceRelease(a2);
  return v9;
}

void Convert_420h_to_RGB(int a1, uint64_t a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a3)
  {
    uint64_t v13 = 0;
    int v57 = a5 - 1;
    int v14 = a4 - 1;
    do
    {
      if ((int)v13 >= 0) {
        int v16 = v13;
      }
      else {
        int v16 = v13 + 1;
      }
      uint64_t v60 = v13;
      int v17 = 2 * (v13 & 1) + (v16 >> 1) - 1;
      if (v57 >= v16 >> 1) {
        int v18 = v16 >> 1;
      }
      else {
        int v18 = v57;
      }
      if (v57 >= v17) {
        int v19 = v17;
      }
      else {
        int v19 = v57;
      }
      if (a2)
      {
        char v20 = 0;
        uint64_t v21 = 0;
        uint64_t v22 = a11 + (v18 & ~(v18 >> 31)) * a8;
        uint64_t v23 = a11 + (v19 & ~(v19 >> 31)) * a8;
        BOOL v24 = (unsigned char *)(a9 + v60 * a6);
        do
        {
          if ((int)v21 >= 0) {
            int v25 = v21;
          }
          else {
            int v25 = v21 + 1;
          }
          int v26 = (v20 & 2) + (v25 >> 1) - 1;
          if (v14 >= v25 >> 1) {
            int v27 = v25 >> 1;
          }
          else {
            int v27 = v14;
          }
          int v28 = v27 & ~(v27 >> 31);
          if (v14 >= v26) {
            int v29 = v26;
          }
          else {
            int v29 = v14;
          }
          v61[0] = *(_WORD *)(a10 + 2 * v21);
          _H0 = *(_WORD *)(v22 + 2 * (2 * v28));
          __asm { FCVT            S0, H0 }
          unsigned int v36 = 2 * (v29 & ~(v29 >> 31));
          _H1 = *(_WORD *)(v22 + 2 * v36);
          __asm { FCVT            S1, H1 }
          float v39 = (float)(_S1 * 3.0) + (float)(_S0 * 9.0);
          LOWORD(_S1) = *(_WORD *)(v23 + 2 * (2 * v28));
          __asm { FCVT            S1, H1 }
          _H2 = *(_WORD *)(v23 + 2 * v36);
          float v42 = v39 + (float)(_S1 * 3.0);
          __asm { FCVT            S1, H2 }
          _S0 = (float)(v42 + _S1) * 0.0625;
          __asm { FCVT            H0, S0 }
          v61[1] = LOWORD(_S0);
          unsigned int v45 = (2 * v28) | 1;
          LOWORD(_S0) = *(_WORD *)(v22 + 2 * v45);
          __asm { FCVT            S0, H0 }
          _H2 = *(_WORD *)(v22 + 2 * (v36 | 1));
          __asm { FCVT            S2, H2 }
          float v49 = (float)(_S2 * 3.0) + (float)(_S0 * 9.0);
          LOWORD(_S2) = *(_WORD *)(v23 + 2 * v45);
          __asm { FCVT            S2, H2 }
          _H3 = *(_WORD *)(v23 + 2 * (v36 | 1));
          float v52 = v49 + (float)(_S2 * 3.0);
          __asm { FCVT            S2, H3 }
          _S0 = (float)(v52 + _S2) * 0.0625;
          __asm { FCVT            H0, S0 }
          v61[2] = LOWORD(_S0);
          Convert_one_YCCh_to_RGB(a1, v24, v61);
          ++v21;
          v24 += 3;
          v20 += 2;
        }
        while (a2 != v21);
      }
      uint64_t v13 = v60 + 1;
      a10 += a7;
    }
    while (v60 + 1 != a3);
  }
}

void Convert_422h_to_RGB(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a3)
  {
    uint64_t v13 = 0;
    int v15 = a4 - 1;
    do
    {
      if (a2)
      {
        char v16 = 0;
        uint64_t v17 = 0;
        uint64_t v18 = a10 + v13 * a7;
        int v19 = (unsigned char *)(a8 + v13 * a5);
        do
        {
          if ((int)v17 >= 0) {
            int v20 = v17;
          }
          else {
            int v20 = v17 + 1;
          }
          int v21 = (v16 & 2) + (v20 >> 1) - 1;
          if (v15 >= v20 >> 1) {
            int v22 = v20 >> 1;
          }
          else {
            int v22 = v15;
          }
          int v23 = v22 & ~(v22 >> 31);
          if (v15 >= v21) {
            int v24 = v21;
          }
          else {
            int v24 = v15;
          }
          int v25 = v24 & ~(v24 >> 31);
          _H1 = *(_WORD *)(v18 + 2 * (2 * v23));
          v42[0] = *(_WORD *)(a9 + 2 * v17);
          __asm { FCVT            S0, H1 }
          _H1 = *(_WORD *)(v18 + 2 * (2 * v25));
          __asm { FCVT            S1, H1 }
          _S0 = (float)(_S1 + (float)(_S0 * 3.0)) * 0.25;
          __asm { FCVT            H0, S0 }
          v42[1] = LOWORD(_S0);
          LOWORD(_S0) = *(_WORD *)(v18 + 2 * ((2 * v23) | 1u));
          LOWORD(_S1) = *(_WORD *)(v18 + 2 * ((2 * v25) | 1u));
          __asm
          {
            FCVT            S0, H0
            FCVT            S1, H1
          }
          _S0 = (float)(_S1 + (float)(_S0 * 3.0)) * 0.25;
          __asm { FCVT            H0, S0 }
          v42[2] = LOWORD(_S0);
          Convert_one_YCCh_to_RGB(a1, v19, v42);
          ++v17;
          v19 += 3;
          v16 += 2;
        }
        while (a2 != v17);
      }
      ++v13;
      a9 += a6;
    }
    while (v13 != a3);
  }
}

void Convert_444h_to_RGB(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 *a8, uint64_t a9)
{
  if (a3)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a9 + 2;
    do
    {
      if (a2)
      {
        int v15 = (unsigned char *)(a7 + v13 * a4);
        uint64_t v16 = v14;
        uint64_t v17 = a8;
        uint64_t v18 = a2;
        do
        {
          __int16 v19 = *v17++;
          __int16 v24 = v19;
          int v25 = *(_DWORD *)(v16 - 2);
          Convert_one_YCCh_to_RGB(a1, v15, &v24);
          v15 += 3;
          v16 += 4;
          --v18;
        }
        while (v18);
      }
      ++v13;
      a8 = (__int16 *)((char *)a8 + a5);
      v14 += a6;
    }
    while (v13 != a3);
  }
}

void Convert_420p_to_RGB(int a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a4)
  {
    uint64_t v15 = 0;
    int v36 = a6 - 1;
    int v16 = a5 - 1;
    do
    {
      if ((int)v15 >= 0) {
        int v17 = v15;
      }
      else {
        int v17 = v15 + 1;
      }
      uint64_t v38 = v15;
      int v18 = 2 * (v15 & 1) + (v17 >> 1) - 1;
      if (v36 >= v17 >> 1) {
        int v19 = v17 >> 1;
      }
      else {
        int v19 = v36;
      }
      if (v36 >= v18) {
        int v20 = v18;
      }
      else {
        int v20 = v36;
      }
      if (a3)
      {
        char v21 = 0;
        uint64_t v22 = 0;
        uint64_t v23 = a12 + (v19 & ~(v19 >> 31)) * a9;
        uint64_t v24 = a12 + (v20 & ~(v20 >> 31)) * a9;
        int v25 = (unsigned char *)(a10 + v38 * a7);
        do
        {
          if ((int)v22 >= 0) {
            int v26 = v22;
          }
          else {
            int v26 = v22 + 1;
          }
          int v27 = (v21 & 2) + (v26 >> 1) - 1;
          if (v16 >= v26 >> 1) {
            int v28 = v26 >> 1;
          }
          else {
            int v28 = v16;
          }
          int v29 = v28 & ~(v28 >> 31);
          if (v16 < v27) {
            int v27 = v16;
          }
          int v30 = v27 & ~(v27 >> 31);
          unint64_t v31 = (2 * v29) / 3uLL;
          unsigned int v32 = *(_DWORD *)(v23 + 4 * v31);
          v39[0] = (unsigned __int16)(*(_DWORD *)(a11 + v38 * a8 + 4 * ((int)v22 / 3)) >> (10
                                                                                           * (v22
                                                                                            - 3
                                                                                            * (((unint64_t)(1431655766 * (int)v22) >> 32)
                                                                                             + (1431655766 * (int)v22 < 0))))) << 6;
          v39[1] = ((((*(_DWORD *)(v24 + 4 * ((2 * v30) / 3uLL)) >> (10 * (2 * v30 % 3u))) & 0x3FF) << 6)
                  + 576 * ((v32 >> (10 * (2 * v29 % 3u))) & 0x3FF)
                  + 3
                  * ((((*(_DWORD *)(v24 + 4 * v31) >> (10 * (2 * v29 % 3u))) & 0x3FF) << 6)
                   + (((*(_DWORD *)(v23 + 4 * ((2 * v30) / 3uLL)) >> (10 * (2 * v30 % 3u))) & 0x3FF) << 6))) >> 4;
          unsigned int v33 = (2 * v29) | 1;
          LODWORD(v31) = (2 * v30) | 1;
          v39[2] = ((((*(_DWORD *)(v24 + 4 * (v31 / 3uLL)) >> (10 * (v31 % 3))) & 0x3FF) << 6)
                  + 576 * ((*(_DWORD *)(v23 + 4 * (v33 / 3uLL)) >> (10 * (v33 % 3))) & 0x3FF)
                  + 3
                  * ((((*(_DWORD *)(v24 + 4 * (v33 / 3uLL)) >> (10 * (v33 % 3))) & 0x3FF) << 6)
                   + (((*(_DWORD *)(v23 + 4 * (v31 / 3uLL)) >> (10 * (v31 % 3))) & 0x3FFu) << 6))) >> 4;
          Convert_one_YCC_10bit_to_RGB(a1, a2, v25, v39);
          ++v22;
          v25 += 3;
          v21 += 2;
        }
        while (a3 != v22);
      }
      uint64_t v15 = v38 + 1;
    }
    while (v38 + 1 != a4);
  }
}

void Convert_422p_to_RGB(int a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a4)
  {
    uint64_t v28 = 0;
    int v14 = a5 - 1;
    do
    {
      if (a3)
      {
        char v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = a11 + v28 * a8;
        int v18 = (unsigned char *)(a9 + v28 * a6);
        do
        {
          if ((int)v16 >= 0) {
            int v19 = v16;
          }
          else {
            int v19 = v16 + 1;
          }
          int v20 = (v15 & 2) + (v19 >> 1) - 1;
          if (v14 >= v19 >> 1) {
            int v21 = v19 >> 1;
          }
          else {
            int v21 = v14;
          }
          int v22 = v21 & ~(v21 >> 31);
          if (v14 < v20) {
            int v20 = v14;
          }
          int v23 = v20 & ~(v20 >> 31);
          v29[0] = (unsigned __int16)(*(_DWORD *)(a10 + v28 * a7 + 4 * ((int)v16 / 3)) >> (10 * ((int)v16 % 3))) << 6;
          v29[1] = (192 * ((*(_DWORD *)(v17 + 4 * ((2 * v22) / 3uLL)) >> (10 * (2 * v22 % 3u))) & 0x3FF)
                  + (((*(_DWORD *)(v17 + 4 * ((2 * v23) / 3uLL)) >> (10 * (2 * v23 % 3u))) & 0x3FFu) << 6)) >> 2;
          v29[2] = (192 * ((*(_DWORD *)(v17 + 4 * (((2 * v22) | 1u) / 3uLL)) >> (10 * (((2 * v22) | 1u) % 3))) & 0x3FF)
                  + (((*(_DWORD *)(v17 + 4 * (((2 * v23) | 1u) / 3uLL)) >> (10 * (((2 * v23) | 1u) % 3))) & 0x3FFu) << 6)) >> 2;
          Convert_one_YCC_10bit_to_RGB(a1, a2, v18, v29);
          ++v16;
          v18 += 3;
          v15 += 2;
        }
        while (a3 != v16);
      }
      ++v28;
    }
    while (v28 != a4);
  }
}

void Convert_444p_to_RGB(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a4)
  {
    for (uint64_t i = 0; i != a4; ++i)
    {
      if (a3)
      {
        int v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = a10 + i * a7;
        uint64_t v17 = (unsigned char *)(a8 + i * a5);
        do
        {
          v23[0] = (unsigned __int16)(*(_DWORD *)(a9 + i * a6 + 4 * ((int)v15 / 3)) >> (10 * ((int)v15 % 3))) << 6;
          v23[1] = (unsigned __int16)(*(_DWORD *)(v16 + 4 * (v14 / 3)) >> (10 * (v14 % 3))) << 6;
          v23[2] = (unsigned __int16)(*(_DWORD *)(v16 + 4 * ((v14 + 1) / 3)) >> (10 * ((v14 + 1) % 3))) << 6;
          Convert_one_YCC_10bit_to_RGB(a1, a2, v17, v23);
          ++v15;
          v17 += 3;
          v14 += 2;
        }
        while (a3 != v15);
      }
    }
  }
}

void Convert_420x_to_RGB(int a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a4)
  {
    uint64_t v15 = 0;
    int v35 = a6 - 1;
    int v17 = a5 - 1;
    do
    {
      if ((int)v15 >= 0) {
        int v18 = v15;
      }
      else {
        int v18 = v15 + 1;
      }
      uint64_t v38 = v15;
      int v19 = 2 * (v15 & 1) + (v18 >> 1) - 1;
      if (v35 >= v18 >> 1) {
        int v20 = v18 >> 1;
      }
      else {
        int v20 = v35;
      }
      if (v35 >= v19) {
        int v21 = v19;
      }
      else {
        int v21 = v35;
      }
      if (a3)
      {
        char v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = a12 + (v20 & ~(v20 >> 31)) * a9;
        uint64_t v25 = a12 + (v21 & ~(v21 >> 31)) * a9;
        int v26 = (unsigned char *)(a10 + v38 * a7);
        do
        {
          if ((int)v23 >= 0) {
            int v27 = v23;
          }
          else {
            int v27 = v23 + 1;
          }
          int v28 = (v22 & 2) + (v27 >> 1) - 1;
          if (v17 >= v27 >> 1) {
            int v29 = v27 >> 1;
          }
          else {
            int v29 = v17;
          }
          int v30 = v29 & ~(v29 >> 31);
          if (v17 >= v28) {
            int v31 = v28;
          }
          else {
            int v31 = v17;
          }
          int v32 = v31 & ~(v31 >> 31);
          int v33 = *(unsigned __int16 *)(v24 + 2 * (2 * v30));
          v39[0] = *(_WORD *)(a11 + 2 * v23);
          v39[1] = (9 * v33
                  + *(unsigned __int16 *)(v25 + 2 * (2 * v32))
                  + 3
                  * (*(unsigned __int16 *)(v25 + 2 * (2 * v30))
                   + *(unsigned __int16 *)(v24 + 2 * (2 * v32)))
                  + 8) >> 4;
          v39[2] = (9 * *(unsigned __int16 *)(v24 + 2 * ((2 * v30) | 1u))
                  + *(unsigned __int16 *)(v25 + 2 * ((2 * v32) | 1u))
                  + 3
                  * (*(unsigned __int16 *)(v25 + 2 * ((2 * v30) | 1u))
                   + *(unsigned __int16 *)(v24 + 2 * ((2 * v32) | 1u)))
                  + 8) >> 4;
          Convert_one_YCC_10bit_to_RGB(a1, a2, v26, v39);
          ++v23;
          v26 += 3;
          v22 += 2;
        }
        while (a3 != v23);
      }
      uint64_t v15 = v38 + 1;
      a11 += a8;
    }
    while (v38 + 1 != a4);
  }
}

void Convert_422x_to_RGB(int a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a4)
  {
    uint64_t v14 = 0;
    int v15 = a5 - 1;
    do
    {
      if (a3)
      {
        char v17 = 0;
        uint64_t v18 = 0;
        uint64_t v19 = a11 + v14 * a8;
        int v20 = (unsigned char *)(a9 + v14 * a6);
        do
        {
          if ((int)v18 >= 0) {
            int v21 = v18;
          }
          else {
            int v21 = v18 + 1;
          }
          int v22 = (v17 & 2) + (v21 >> 1) - 1;
          if (v15 >= v21 >> 1) {
            int v23 = v21 >> 1;
          }
          else {
            int v23 = v15;
          }
          int v24 = v23 & ~(v23 >> 31);
          if (v15 >= v22) {
            int v25 = v22;
          }
          else {
            int v25 = v15;
          }
          int v26 = v25 & ~(v25 >> 31);
          v31[0] = *(_WORD *)(a10 + 2 * v18);
          v31[1] = (*(unsigned __int16 *)(v19 + 2 * (2 * v26))
                  + 3 * *(unsigned __int16 *)(v19 + 2 * (2 * v24))
                  + 2) >> 2;
          v31[2] = (*(unsigned __int16 *)(v19 + 2 * ((2 * v26) | 1u))
                  + 3 * *(unsigned __int16 *)(v19 + 2 * ((2 * v24) | 1u))
                  + 2) >> 2;
          Convert_one_YCC_10bit_to_RGB(a1, a2, v20, v31);
          ++v18;
          v20 += 3;
          v17 += 2;
        }
        while (a3 != v18);
      }
      ++v14;
      a10 += a7;
    }
    while (v14 != a4);
  }
}

void Convert_444x_to_RGB(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int16 *a9, uint64_t a10)
{
  if (a4)
  {
    uint64_t v13 = 0;
    uint64_t v15 = a10 + 2;
    do
    {
      if (a3)
      {
        uint64_t v16 = (unsigned char *)(a8 + v13 * a5);
        uint64_t v17 = v15;
        uint64_t v18 = a9;
        uint64_t v19 = a3;
        do
        {
          unsigned __int16 v20 = *v18++;
          unsigned __int16 v26 = v20;
          int v27 = *(_DWORD *)(v17 - 2);
          Convert_one_YCC_10bit_to_RGB(a1, a2, v16, &v26);
          v16 += 3;
          v17 += 4;
          --v19;
        }
        while (v19);
      }
      ++v13;
      a9 = (unsigned __int16 *)((char *)a9 + a6);
      v15 += a7;
    }
    while (v13 != a4);
  }
}

void Convert_420_to_RGB(int a1, int a2, uint64_t a3, uint64_t a4, int a5, int a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a4)
  {
    uint64_t v16 = 0;
    int v37 = a6 - 1;
    int v18 = a5 - 1;
    do
    {
      if ((int)v16 >= 0) {
        int v19 = v16;
      }
      else {
        int v19 = v16 + 1;
      }
      uint64_t v40 = v16;
      int v20 = 2 * (v16 & 1) + (v19 >> 1) - 1;
      if (v37 >= v19 >> 1) {
        int v21 = v19 >> 1;
      }
      else {
        int v21 = v37;
      }
      if (v37 >= v20) {
        int v22 = v20;
      }
      else {
        int v22 = v37;
      }
      if (a3)
      {
        char v23 = 0;
        uint64_t v24 = 0;
        uint64_t v25 = a13 + (v21 & ~(v21 >> 31)) * a10;
        uint64_t v26 = a13 + (v22 & ~(v22 >> 31)) * a10;
        int v27 = (unsigned char *)(a11 + v40 * a7);
        do
        {
          if ((int)v24 >= 0) {
            int v28 = v24;
          }
          else {
            int v28 = v24 + 1;
          }
          int v29 = (v23 & 2) + (v28 >> 1) - 1;
          if (v18 >= v28 >> 1) {
            int v30 = v28 >> 1;
          }
          else {
            int v30 = v18;
          }
          unsigned int v31 = v30 & ~(v30 >> 31);
          if (v18 >= v29) {
            int v32 = v29;
          }
          else {
            int v32 = v18;
          }
          unsigned int v33 = v32 & ~(v32 >> 31);
          uint64_t v34 = 2 * v31;
          int v35 = *(unsigned __int8 *)(v25 + v34);
          v41[0] = *(unsigned char *)(a12 + v24);
          v41[1] = (9 * v35
                  + *(unsigned __int8 *)(v26 + 2 * v33)
                  + 3 * (*(unsigned __int8 *)(v26 + v34) + *(unsigned __int8 *)(v25 + 2 * v33))
                  + 8) >> 4;
          v41[2] = (9 * *(unsigned __int8 *)(v25 + (v34 | 1))
                  + *(unsigned __int8 *)(v26 + ((2 * v33) | 1))
                  + 3
                  * (*(unsigned __int8 *)(v26 + (v34 | 1)) + *(unsigned __int8 *)(v25 + ((2 * v33) | 1)))
                  + 8) >> 4;
          a9 = Convert_one_YCC_to_RGB(a1, a2, v27, v41, a9);
          ++v24;
          v27 += 3;
          v23 += 2;
        }
        while (a3 != v24);
      }
      uint64_t v16 = v40 + 1;
      a12 += a8;
    }
    while (v40 + 1 != a4);
  }
}

void Convert_422_to_RGB(int a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a4)
  {
    uint64_t v15 = 0;
    int v16 = a5 - 1;
    do
    {
      if (a3)
      {
        char v18 = 0;
        uint64_t v19 = 0;
        uint64_t v20 = a12 + v15 * a8;
        int v21 = (unsigned char *)(a10 + v15 * a6);
        do
        {
          if ((int)v19 >= 0) {
            int v22 = v19;
          }
          else {
            int v22 = v19 + 1;
          }
          int v23 = (v18 & 2) + (v22 >> 1) - 1;
          if (v16 >= v22 >> 1) {
            int v24 = v22 >> 1;
          }
          else {
            int v24 = v16;
          }
          unsigned int v25 = v24 & ~(v24 >> 31);
          if (v16 >= v23) {
            int v26 = v23;
          }
          else {
            int v26 = v16;
          }
          v33[0] = *(unsigned char *)(a11 + v19);
          int v27 = (unsigned __int8 *)(v20 + 2 * v25);
          int v28 = (unsigned __int8 *)(v20 + 2 * (v26 & ~(v26 >> 31)));
          v33[1] = (*v28 + 3 * *v27 + 2) >> 2;
          v33[2] = (v28[1] + 3 * v27[1] + 2) >> 2;
          a9 = Convert_one_YCC_to_RGB(a1, a2, v21, v33, a9);
          ++v19;
          v21 += 3;
          v18 += 2;
        }
        while (a3 != v19);
      }
      ++v15;
      a11 += a7;
    }
    while (v15 != a4);
  }
}

float __SurfaceCreateCGImage_block_invoke(uint64_t a1, float *a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a1 + 48);
  MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)(a1 + 32));
  uint64_t v9 = *(void *)(a1 + 40);
  if (v6)
  {
    if (v9)
    {
      size_t v10 = &MutableBytePtr[2 * a3];
      do
      {
        __int16 v11 = *(_WORD *)a2;
        a2 = (float *)((char *)a2 + 2);
        LOWORD(result) = v11;
        *(_WORD *)size_t v10 = v11;
        v10 += 6;
        --v9;
      }
      while (v9);
    }
  }
  else if (v9)
  {
    CFTypeRef v12 = (float *)&MutableBytePtr[4 * a3];
    do
    {
      float v13 = *a2++;
      float result = v13;
      *CFTypeRef v12 = v13;
      v12 += 3;
      --v9;
    }
    while (v9);
  }
  return result;
}

unint64_t providerGetBytesAtPositionCallback_YCbYCr_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_YCbYCr_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_YCbYCr_surface_cold_2();
  }
  if ((a3 & 3) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_YCbYCr_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_21;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFFCLL;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

void providerReleaseCFInfoCallback(CFTypeRef cf)
{
  if (cf) {
    CFRelease(cf);
  }
}

unint64_t providerGetBytesAtPositionCallback_CbYCrY_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_CbYCrY_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_CbYCrY_surface_cold_2();
  }
  if ((a3 & 3) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_CbYCrY_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_22;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFFCLL;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_YCbYCrFull_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_YCbYCrFull_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_YCbYCrFull_surface_cold_2();
  }
  if ((a3 & 3) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_YCbYCrFull_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_23_1;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFFCLL;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_CbYCrYFull_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_CbYCrYFull_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_CbYCrYFull_surface_cold_2();
  }
  if ((a3 & 3) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_CbYCrYFull_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_24;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFFCLL;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_AYCbCr8_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_AYCbCr8_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_AYCbCr8_surface_cold_2();
  }
  if ((a3 & 3) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_AYCbCr8_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_25;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFFCLL;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_2C08_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_2C08_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_2C08_surface_cold_2();
  }
  if ((a3 & 3) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_2C08_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_26_0;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFFCLL;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_2C16_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_2C16_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_2C16_surface_cold_2();
  }
  if ((a3 & 7) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_2C16_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_27_0;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFF8;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFF8;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_2C0h_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_2C0h_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_2C0h_surface_cold_2();
  }
  if ((a3 & 7) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_2C0h_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_28;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFF8;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFF8;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_2C0f_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_2C0f_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_2C0f_surface_cold_2();
  }
  if ((a3 & 0xF) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_2C0f_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_29;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFF0;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFF0;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_1C08_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_1C08_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_1C08_surface_cold_2();
  }
  if ((a3 & 3) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_1C08_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_30_0;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFFCLL;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_1C16_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_1C16_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_1C16_surface_cold_2();
  }
  if ((a3 & 7) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_1C16_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_31_0;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFF8;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFF8;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_1C0h_surface_lut(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_1C0h_surface_lut_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_1C0h_surface_lut_cold_2();
  }
  if ((a3 & 7) != 0) {
    return 0;
  }
  unint64_t v6 = a4 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = 0;
  uint64_t v17 = &v16;
  uint64_t v18 = 0x2000000000;
  int v19 = 0;
  uint64_t v12 = 0;
  float v13 = (float *)&v12;
  uint64_t v14 = 0x2000000000;
  int v15 = 1065353216;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  v11[2] = __providerGetBytesAtPositionCallback_1C0h_surface_lut_block_invoke;
  v11[3] = &unk_1E57737A8;
  v11[4] = &v16;
  v11[5] = &v12;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v11);
  v8 = v13;
  if (*((float *)v17 + 6) >= v13[6])
  {
    *((_DWORD *)v17 + 6) = 0;
    v8[6] = 1.0;
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 0x40000000;
  v10[2] = __providerGetBytesAtPositionCallback_1C0h_surface_lut_block_invoke_2;
  v10[3] = &unk_1E57737D0;
  v10[6] = a3;
  v10[7] = a2;
  v10[8] = v6;
  v10[4] = &v16;
  v10[5] = &v12;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v10);
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v16, 8);
  return v6;
}

unint64_t providerGetBytesAtPositionCallback_1C0h_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_1C0h_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_1C0h_surface_cold_2();
  }
  if ((a3 & 7) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_1C0h_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_34;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFF8;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFF8;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_1C0f_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_1C0f_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_1C0f_surface_cold_2();
  }
  if ((a3 & 0xF) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_1C0f_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_35;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFF0;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFF0;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_w30r_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_w30r_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_w30r_surface_cold_2();
  }
  if ((a3 & 7) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_w30r_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_36;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFF8;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFF8;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_w40a_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_w40a_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_w40a_surface_cold_2();
  }
  if ((a3 & 7) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_w40a_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_37;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFF8;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFF8;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_l10r_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_l10r_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_l10r_surface_cold_2();
  }
  if ((a3 & 7) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_l10r_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_38;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFF8;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFF8;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

unint64_t providerGetBytesAtPositionCallback_A008_surface(__IOSurface *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    providerGetBytesAtPositionCallback_A008_surface_cold_1();
  }
  if (!a2) {
    providerGetBytesAtPositionCallback_A008_surface_cold_2();
  }
  if ((a3 & 3) != 0) {
    return 0;
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = __providerGetBytesAtPositionCallback_A008_surface_block_invoke;
  v6[3] = &__block_descriptor_tmp_39;
  unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFFCLL;
  v6[4] = a3;
  v6[5] = a2;
  v6[6] = a4 & 0xFFFFFFFFFFFFFFFCLL;
  SurfaceApplyPlaneReadOnlyBlock(a1, (uint64_t)v6);
  return v4;
}

void *providerGetBytePointerCallback(__IOSurface *a1)
{
  if (!a1) {
    providerGetBytePointerCallback_cold_1();
  }
  if (IOSurfaceLock(a1, 1u, 0)) {
    return 0;
  }

  return IOSurfaceGetBaseAddress(a1);
}

uint64_t providerReleaseBytePointerCallback(__IOSurface *a1)
{
  if (!a1) {
    providerReleaseBytePointerCallback_cold_1();
  }
  return IOSurfaceUnlock(a1, 1u, 0);
}

float Convert_one_YCCh_to_RGB(int a1, unsigned char *a2, __int16 *a3)
{
  _H0 = *a3;
  __asm { FCVT            S1, H0 }
  _H0 = a3[1];
  __asm { FCVT            S2, H0 }
  _H0 = a3[2];
  __asm { FCVT            S3, H0 }
  if (a1 == 601)
  {
    float v13 = _S1 + (float)(_S3 * 1.402);
    float v14 = (float)(_S1 + (float)(_S2 * -0.34414)) + (float)(_S3 * -0.71414);
    float v15 = 1.772;
  }
  else
  {
    float v13 = _S1 + (float)(_S3 * 1.5748);
    float v14 = (float)(_S1 + (float)(_S2 * -0.18732)) + (float)(_S3 * -0.46812);
    float v15 = 1.8556;
  }
  *a2 = llroundf(fmaxf(fminf(v13 * 255.0, 255.0), 0.0));
  a2[1] = llroundf(fmaxf(fminf(v14 * 255.0, 255.0), 0.0));
  float result = fmaxf(fminf((float)(_S1 + (float)(_S2 * v15)) * 255.0, 255.0), 0.0);
  a2[2] = llroundf(result);
  return result;
}

float Convert_one_YCC_10bit_to_RGB(int a1, int a2, unsigned char *a3, unsigned __int16 *a4)
{
  float v4 = (float)(*a4 >> 6);
  float v5 = (float)(a4[1] >> 6) + -512.0;
  float v6 = (float)(a4[2] >> 6) + -512.0;
  if (a1 == 118) {
    float v4 = v4 + -64.0;
  }
  float v7 = 1.1678;
  float v8 = 1.0;
  if (a1 == 102) {
    float v7 = 1.0;
  }
  else {
    float v8 = 1.1417;
  }
  float v9 = (float)((float)(v8 * flt_193958770[a2 == 601]) * v6) + (float)(v4 * v7);
  float v10 = (float)((float)(v8 * flt_193958778[a2 == 601]) * v5) + (float)(v4 * v7);
  float v11 = (float)((float)(v8 * flt_193958788[a2 == 601]) * v5) + (float)(v4 * v7);
  float v12 = v9 * 0.249266862;
  float v13 = (float)(v10 + (float)((float)(v8 * flt_193958780[a2 == 601]) * v6)) * 0.249266862;
  float v14 = v11 * 0.249266862;
  *a3 = llroundf(fmaxf(fminf(v12, 255.0), 0.0));
  a3[1] = llroundf(fmaxf(fminf(v13, 255.0), 0.0));
  float result = fmaxf(fminf(v14, 255.0), 0.0);
  a3[2] = llroundf(result);
  return result;
}

float Convert_one_YCC_to_RGB(int a1, int a2, unsigned char *a3, unsigned char *a4, float a5)
{
  LOBYTE(a5) = *a4;
  float v5 = (float)LODWORD(a5);
  LOBYTE(a5) = a4[1];
  float v6 = (float)LODWORD(a5);
  LOBYTE(a5) = a4[2];
  float v7 = (float)LODWORD(a5);
  if (a2 != 601)
  {
    if (a1 == 102)
    {
      float v8 = v6 + -128.0;
      float v13 = v7 + -128.0;
      float v10 = (float)((float)(v7 + -128.0) * 1.581) + v5;
      float v11 = (float)(v5 + (float)(v8 * -0.18806)) + (float)(v13 * -0.46997);
      float v12 = 1.8629;
      goto LABEL_6;
    }
    float v15 = v5 + -16.0;
    float v16 = v6 + -128.0;
    float v19 = v7 + -128.0;
    float v10 = (float)((float)(v7 + -128.0) * 1.7927) + (float)(v15 * 1.1644);
    float v11 = (float)((float)(v16 * -0.21325) + (float)(v15 * 1.1644)) + (float)(v19 * -0.53291);
    float v18 = 2.1124;
LABEL_9:
    float v14 = (float)(v16 * v18) + (float)(v15 * 1.1644);
    goto LABEL_10;
  }
  if (a1 != 102)
  {
    float v15 = v5 + -16.0;
    float v16 = v6 + -128.0;
    float v17 = v7 + -128.0;
    float v10 = (float)((float)(v7 + -128.0) * 1.596) + (float)(v15 * 1.1644);
    float v11 = (float)((float)(v16 * -0.39176) + (float)(v15 * 1.1644)) + (float)(v17 * -0.81297);
    float v18 = 2.0172;
    goto LABEL_9;
  }
  float v8 = v6 + -128.0;
  float v9 = v7 + -128.0;
  float v10 = (float)((float)(v7 + -128.0) * 1.4075) + v5;
  float v11 = (float)(v5 + (float)(v8 * -0.34549)) + (float)(v9 * -0.71695);
  float v12 = 1.779;
LABEL_6:
  float v14 = (float)(v8 * v12) + v5;
LABEL_10:
  *a3 = llroundf(fmaxf(fminf(v10, 255.0), 0.0));
  a3[1] = llroundf(fmaxf(fminf(v11, 255.0), 0.0));
  float result = fmaxf(fminf(v14, 255.0), 0.0);
  a3[2] = llroundf(result);
  return result;
}

void *__providerGetBytesAtPositionCallback_2C08_surface_block_invoke(void *result, uint64_t a2)
{
  if (result[6])
  {
    unint64_t v2 = 0;
    uint64_t v3 = result[5];
    float v4 = (unsigned char *)(a2 + result[4] / 2);
    do
    {
      uint64_t v5 = v3 + v2;
      *(unsigned char *)uint64_t v5 = *v4;
      *(unsigned char *)(v5 + 1) = v4[1];
      *(_WORD *)(v5 + 2) = -256;
      v2 += 4;
      v4 += 2;
    }
    while (v2 < result[6]);
  }
  return result;
}

void *__providerGetBytesAtPositionCallback_2C16_surface_block_invoke(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[5];
    uint64_t v5 = (_WORD *)(a2 + 2 * (result[4] / 4));
    do
    {
      uint64_t v6 = v4 + v3;
      *(_WORD *)uint64_t v6 = *v5;
      *(_WORD *)(v6 + 2) = v5[1];
      *(_DWORD *)(v6 + 4) = -65536;
      v3 += 8;
      v5 += 2;
    }
    while (v3 < v2);
  }
  return result;
}

__int16 __providerGetBytesAtPositionCallback_2C0h_surface_block_invoke@<H0>(void *a1@<X0>, uint64_t a2@<X1>)
{
  unint64_t v2 = a1[6];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = a1[5];
    uint64_t v5 = (_WORD *)(a2 + 2 * (a1[4] / 4));
    do
    {
      uint64_t v6 = v4 + v3;
      *(_WORD *)uint64_t v6 = *v5;
      __int16 result = v5[1];
      *(_WORD *)(v6 + 2) = result;
      *(_DWORD *)(v6 + 4) = 1006632960;
      v3 += 8;
      v5 += 2;
    }
    while (v3 < v2);
  }
  return result;
}

void *__providerGetBytesAtPositionCallback_2C0f_surface_block_invoke(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[5];
    uint64_t v5 = (_DWORD *)(a2 + 4 * (result[4] / 8));
    do
    {
      uint64_t v6 = v4 + v3;
      *(_DWORD *)uint64_t v6 = *v5;
      *(_DWORD *)(v6 + 4) = v5[1];
      *(void *)(v6 + 8) = 0x3F80000000000000;
      v3 += 16;
      v5 += 2;
    }
    while (v3 < v2);
  }
  return result;
}

void *__providerGetBytesAtPositionCallback_1C08_surface_block_invoke(void *result, uint64_t a2)
{
  if (result[6])
  {
    unint64_t v2 = 0;
    uint64_t v3 = result[5];
    uint64_t v4 = (char *)(a2 + result[4] / 4);
    do
    {
      uint64_t v5 = v3 + v2;
      char v6 = *v4++;
      *(unsigned char *)uint64_t v5 = v6;
      *(_WORD *)(v5 + 1) = 0;
      *(unsigned char *)(v5 + 3) = -1;
      v2 += 4;
    }
    while (v2 < result[6]);
  }
  return result;
}

void *__providerGetBytesAtPositionCallback_1C16_surface_block_invoke(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[5];
    uint64_t v5 = (__int16 *)(a2 + 2 * (result[4] / 8));
    do
    {
      __int16 v6 = *v5++;
      uint64_t v7 = v4 + v3;
      *(_WORD *)uint64_t v7 = v6;
      *(_DWORD *)(v7 + 2) = 0;
      *(_WORD *)(v7 + 6) = -1;
      v3 += 8;
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t __providerGetBytesAtPositionCallback_1C0h_surface_lut_block_invoke(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5)
  {
    uint64_t v6 = 0;
    while (!a4)
    {
LABEL_13:
      ++v6;
      a2 += a6;
      if (v6 == a5) {
        return result;
      }
    }
    uint64_t v7 = 0;
    while (1)
    {
      _H0 = *(_WORD *)(a2 + 2 * v7);
      __asm { FCVT            S0, H0 }
      uint64_t v14 = *(void *)(*(void *)(result + 32) + 8);
      if (v7 | v6)
      {
        if (*(float *)(v14 + 24) > _S0) {
          *(float *)(v14 + 24) = _S0;
        }
        uint64_t v15 = *(void *)(*(void *)(result + 40) + 8);
        if (*(float *)(v15 + 24) >= _S0) {
          goto LABEL_12;
        }
      }
      else
      {
        *(float *)(v14 + 24) = _S0;
        uint64_t v15 = *(void *)(*(void *)(result + 40) + 8);
      }
      *(float *)(v15 + 24) = _S0;
LABEL_12:
      if (a4 == ++v7) {
        goto LABEL_13;
      }
    }
  }
  return result;
}

void *__providerGetBytesAtPositionCallback_1C0h_surface_lut_block_invoke_2(void *result, uint64_t a2)
{
  unint64_t v2 = result[8];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[7];
    uint64_t v5 = (__int16 *)(a2 + 2 * (result[6] / 8));
    do
    {
      __int16 v6 = *v5++;
      _H1 = v6;
      __asm { FCVT            S1, H1 }
      float v13 = *(float *)(*(void *)(result[4] + 8) + 24);
      uint64_t v14 = llroundf((float)((float)(_S1 - v13) / (float)(*(float *)(*(void *)(result[5] + 8) + 24) - v13)) * 255.0);
      unint64_t v15 = v14 & ~(v14 >> 63);
      if (v15 >= 0xFF) {
        unint64_t v15 = 255;
      }
      float v16 = (char *)&parulaColorMap + 8 * v15;
      uint64_t v17 = v4 + v3;
      *(_DWORD *)uint64_t v17 = *(_DWORD *)v16;
      *(_WORD *)(v17 + 4) = *((_WORD *)v16 + 2);
      *(_WORD *)(v17 + 6) = COERCE_UNSIGNED_INT(1.0);
      v3 += 8;
    }
    while (v3 < v2);
  }
  return result;
}

void *__providerGetBytesAtPositionCallback_1C0h_surface_block_invoke(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[5];
    uint64_t v5 = (__int16 *)(a2 + 2 * (result[4] / 8));
    do
    {
      __int16 v6 = *v5++;
      uint64_t v7 = v4 + v3;
      *(_WORD *)uint64_t v7 = v6;
      *(_DWORD *)(v7 + 2) = 0;
      *(_WORD *)(v7 + 6) = COERCE_UNSIGNED_INT(1.0);
      v3 += 8;
    }
    while (v3 < v2);
  }
  return result;
}

float __providerGetBytesAtPositionCallback_1C0f_surface_block_invoke(void *a1, uint64_t a2)
{
  unint64_t v2 = a1[6];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = a1[5];
    uint64_t v5 = (float *)(a2 + 4 * (a1[4] / 16));
    do
    {
      float v6 = *v5++;
      float result = v6;
      float v8 = (float *)(v4 + v3);
      float *v8 = v6;
      v8[1] = 0.0;
      v8[2] = 0.0;
      v8[3] = 1.0;
      v3 += 16;
    }
    while (v3 < v2);
  }
  return result;
}

void *__providerGetBytesAtPositionCallback_w30r_surface_block_invoke(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[5];
    uint64_t v5 = (unsigned int *)(a2 + 4 * (result[4] / 8));
    do
    {
      unsigned int v6 = *v5++;
      uint64_t v7 = (_WORD *)(v4 + v3);
      _S1 = (float)((float)((v6 >> 20) & 0x3FF) + -384.0) / 510.0;
      __asm { FCVT            H1, S1 }
      *uint64_t v7 = LOWORD(_S1);
      _S2 = (float)((float)((v6 >> 10) & 0x3FF) + -384.0) / 510.0;
      __asm { FCVT            H2, S2 }
      v7[1] = LOWORD(_S2);
      _S1 = (float)((float)(v6 & 0x3FF) + -384.0) / 510.0;
      __asm { FCVT            H1, S1 }
      v7[2] = LOWORD(_S1);
      v7[3] = COERCE_UNSIGNED_INT(1.0);
      v3 += 8;
    }
    while (v3 < v2);
  }
  return result;
}

void *__providerGetBytesAtPositionCallback_w40a_surface_block_invoke(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[5];
    uint64_t v5 = a2 + ((result[4] + ((uint64_t)result[4] < 0 ? 7uLL : 0)) & 0xFFFFFFFFFFFFFFF8);
    do
    {
      unint64_t v6 = *(void *)(v5 + v3);
      uint64_t v7 = (_WORD *)(v4 + v3);
      _S2 = (float)((float)((v6 >> 38) & 0x3FF) + -384.0) / 510.0;
      __asm { FCVT            H2, S2 }
      *uint64_t v7 = LOWORD(_S2);
      _S3 = (float)((float)(v6 >> 22) + -384.0) / 510.0;
      __asm { FCVT            H3, S3 }
      v7[1] = LOWORD(_S3);
      _S3 = (float)((float)((unsigned __int16)v6 >> 6) + -384.0) / 510.0;
      __asm { FCVT            H3, S3 }
      _S2 = (float)((float)(v6 >> 54) + -384.0) / 510.0;
      __asm
      {
        FCVT            H2, S2
        FCVT            S2, H2
      }
      v7[2] = LOWORD(_S3);
      _S2 = fminf(fmaxf(_S2, 0.0), 1.0);
      __asm { FCVT            H2, S2 }
      v7[3] = LOWORD(_S2);
      v3 += 8;
    }
    while (v3 < v2);
  }
  return result;
}

void *__providerGetBytesAtPositionCallback_l10r_surface_block_invoke(void *result, uint64_t a2)
{
  unint64_t v2 = result[6];
  if (v2)
  {
    unint64_t v3 = 0;
    uint64_t v4 = result[5];
    uint64_t v5 = (unsigned int *)(a2 + 4 * (result[4] / 8));
    do
    {
      unsigned int v6 = *v5++;
      *(float32x2_t *)v7.f32 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)vdup_n_s32(v6), (uint32x2_t)0xFFFFFFF6FFFFFFECLL), (int8x8_t)0x300000003));
      v7.f32[2] = (float)(v6 & 0x3FF);
      v7.i32[3] = v7.i32[0];
      *(float16x4_t *)(v4 + v3) = vcvt_f16_f32(vdivq_f32(v7, (float32x4_t)xmmword_19394C810));
      v3 += 8;
    }
    while (v3 < v2);
  }
  return result;
}

double InvertMatrix(double *a1, double *a2)
{
  double result = *a1;
  double v3 = a1[1];
  double v5 = a1[2];
  double v4 = a1[3];
  double v6 = a1[4];
  double v7 = a1[5];
  double v8 = a1[6];
  double v9 = a1[7];
  double v10 = a1[8];
  double v11 = -(*a1 * v7);
  double v12 = v5 * -(v8 * v6) + *a1 * v6 * v10 + v5 * v4 * v9 + -(v4 * v3) * v10 + v3 * v7 * v8 + v11 * v9;
  if (v12 != 0.0)
  {
    *a2 = (v6 * v10 - v9 * v7) / v12;
    a2[1] = (v9 * v5 - v3 * v10) / v12;
    a2[2] = (v3 * v7 - v6 * v5) / v12;
    a2[3] = (v10 * -v4 + v8 * v7) / v12;
    a2[4] = (v5 * -v8 + result * v10) / v12;
    a2[5] = (v11 + v4 * v5) / v12;
    a2[6] = (v4 * v9 - v8 * v6) / v12;
    a2[7] = (v9 * -result + v8 * v3) / v12;
    double result = (result * v6 - v4 * v3) / v12;
    a2[8] = result;
  }
  return result;
}

double GetAdaptationMatrix(double *a1, double *a2, double *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  double v4 = a1[1];
  double v5 = a1[2];
  double v6 = v4 * 0.0;
  double v7 = *a1 + v4 * 0.0 + v5 * 0.0;
  double v8 = v4 + *a1 * 0.0 + v5 * 0.0;
  double v9 = v5 + v6 + *a1 * 0.0;
  double v10 = a2[1];
  double v11 = a2[2];
  double v12 = v10 * 0.0;
  double v13 = *a2 + v10 * 0.0 + v11 * 0.0;
  double v14 = v10 + *a2 * 0.0 + v11 * 0.0;
  double v15 = v11 + v12 + *a2 * 0.0;
  uint64_t v19 = 0;
  uint64_t v22 = 0;
  long long v21 = 0u;
  long long v18 = 0u;
  double v17 = v13 / v7;
  double v20 = v14 / v8;
  double v23 = v15 / v9;
  MatrixMatrix(GetAdaptationMatrix_identity_mtx, &v17, a3);

  return MatrixMatrix(a3, GetAdaptationMatrix_identity_mtx, a3);
}

void phosphors_to_rgbxyz_matrix(double *a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  v35[3] = *(double *)MEMORY[0x1E4F143B8];
  double v10 = ((a4 - a6) * a3 - (a2 - a6) * a5 + (a2 - a4) * a7) * a9;
  if (v10 >= 0.0001 || v10 <= -0.0001)
  {
    double v14 = ((a4 - a6) * a9 - (a8 - a6) * a5 + (a8 - a4) * a7) * a3 / v10;
    double v15 = -(a5 * ((a2 - a6) * a9 - (a8 - a6) * a3 + (a8 - a2) * a7)) / v10;
    double v16 = ((a2 - a4) * a9 - (a8 - a4) * a3 + (a8 - a2) * a5) * a7 / v10;
    double v17 = v14 * a2 / a3;
    double v18 = ((1.0 - a2) / a3 + -1.0) * v14;
    double v19 = v15 * a4 / a5;
    double v20 = ((1.0 - a4) / a5 + -1.0) * v15;
    double v29 = ((1.0 - a6) / a7 + -1.0) * v16;
    v35[0] = a8 / a9;
    v35[1] = 1.0;
    v35[2] = (1.0 - a8 - a9) / a9;
    double v34 = 0.0;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    double v21 = v16 * a6 / a7;
    GetAdaptationMatrix(v35, d50, (double *)&v30);
    double v13 = v14 * *((double *)&v30 + 1) + v17 * *(double *)&v30 + v18 * *(double *)&v31;
    double v22 = v14 * *(double *)&v32 + v17 * *((double *)&v31 + 1) + v18 * *((double *)&v32 + 1);
    double v23 = v34;
    double v24 = v14 * *((double *)&v33 + 1) + v17 * *(double *)&v33 + v18 * v34;
    double v12 = v15 * *((double *)&v30 + 1) + v19 * *(double *)&v30 + v20 * *(double *)&v31;
    double v25 = v15 * *(double *)&v32 + v19 * *((double *)&v31 + 1) + v20 * *((double *)&v32 + 1);
    double v26 = v15 * *((double *)&v33 + 1) + v19 * *(double *)&v33 + v20 * v34;
    double v27 = v16 * *(double *)&v32 + v21 * *((double *)&v31 + 1) + v29 * *((double *)&v32 + 1);
    double v28 = v16 * *((double *)&v33 + 1) + v21 * *(double *)&v33;
    a1[2] = v16 * *((double *)&v30 + 1) + v21 * *(double *)&v30 + v29 * *(double *)&v31;
    a1[3] = v22;
    a1[4] = v25;
    a1[5] = v27;
    a1[6] = v24;
    a1[7] = v26;
    a1[8] = v28 + v29 * v23;
  }
  else
  {
    int64x2_t v11 = vdupq_n_s64(0x7FF8000000000000uLL);
    a1[8] = NAN;
    *((int64x2_t *)a1 + 2) = v11;
    *((int64x2_t *)a1 + 3) = v11;
    *((int64x2_t *)a1 + 1) = v11;
    double v12 = NAN;
    double v13 = NAN;
  }
  *a1 = v13;
  a1[1] = v12;
}

double tempTint_to_XYZ(uint64_t a1, double a2, double a3)
{
  double v6 = 0.0;
  double v7 = 0.0;
  CI_TempTint_to_xy(&v7, &v6, a2, a3);
  double result = v6;
  if (v6 >= 1.0e-20)
  {
    double v5 = v7;
    *(double *)a1 = v7 / v6;
    *(void *)(a1 + 8) = 0x3FF0000000000000;
    double result = (1.0 - v5) / result + -1.0;
    *(double *)(a1 + 16) = result;
  }
  return result;
}

double CI_TempTint_to_xy(double *a1, double *a2, double a3, double a4)
{
  uint64_t v4 = 0x20u;
  double v5 = 1000000.0 / a3;
  do
  {
    double v6 = *(double *)((char *)&kTempTable + v4);
    uint64_t v7 = v4 + 32;
    if (v4 == 960) {
      break;
    }
    v4 += 32;
  }
  while (v5 >= v6);
  double v8 = a4 * -0.000333333333;
  double v9 = (double *)((char *)&kTempTable + v7);
  double v10 = (v6 - v5) / (v6 - *(double *)((char *)&kTempTable + v7 - 64));
  double v11 = *(v9 - 3) * (1.0 - v10) + *(v9 - 7) * v10;
  double v12 = *(double *)((char *)&kTempTable + v7 - 40);
  double v13 = (1.0 - v10) * *(v9 - 2) + *(v9 - 6) * v10;
  double v14 = *(double *)((char *)&kTempTable + v7 - 8);
  double v15 = sqrt(v12 * v12 + 1.0);
  double v16 = sqrt(v14 * v14 + 1.0);
  double v17 = (1.0 - v10) * (1.0 / v16) + 1.0 / v15 * v10;
  double v18 = (1.0 - v10) * (v14 / v16) + v12 / v15 * v10;
  double v19 = sqrt(v18 * v18 + v17 * v17);
  double v20 = v11 + v17 / v19 * v8;
  double v21 = v13 + v18 / v19 * v8;
  double v22 = v20 * 1.5;
  double v23 = v20 + v21 * -4.0 + 2.0;
  *a1 = v22 / v23;
  double result = v21 / v23;
  *a2 = result;
  return result;
}

double tempTint_to_matrix(uint64_t a1, double a2, double a3)
{
  v11[3] = *(double *)MEMORY[0x1E4F143B8];
  memset(v11, 0, 24);
  tempTint_to_XYZ((uint64_t)v11, a2, a3);
  uint64_t v10 = 0;
  memset(v9, 0, sizeof(v9));
  GetAdaptationMatrix(v11, d50, (double *)v9);
  uint64_t v8 = 0;
  memset(v7, 0, sizeof(v7));
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  phosphors_to_rgbxyz_matrix((double *)v7, 0.63, 0.34, 0.295, 0.605, 0.155, 0.077, 0.3127, 0.329);
  InvertMatrix((double *)v7, (double *)v5);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  *(void *)a1 = 0x3FF0000000000000;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0x3FF0000000000000;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  MatrixMatrix((double *)a1, (double *)v7, (double *)a1);
  MatrixMatrix((double *)a1, (double *)v9, (double *)a1);
  return MatrixMatrix((double *)a1, (double *)v5, (double *)a1);
}

double CI_GenericRGBLinear_to_TempTint(float *a1, double *a2, double *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  double v5 = *a1;
  double v6 = a1[1];
  double v7 = a1[2];
  double v18 = 0.0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  phosphors_to_rgbxyz_matrix((double *)&v14, 0.63, 0.34, 0.295, 0.605, 0.155, 0.077, 0.3127, 0.329);
  double result = *((double *)&v14 + 1) * v6 + v5 * *(double *)&v14 + v7 * *(double *)&v15;
  double v9 = *(double *)&v16 * v6 + v5 * *((double *)&v15 + 1) + v7 * *((double *)&v16 + 1);
  double v10 = *((double *)&v17 + 1) * v6 + v5 * *(double *)&v17 + v7 * v18;
  if (result >= 1.0e-20 || v9 >= 1.0e-20 || v10 >= 1.0e-20)
  {
    double v11 = result + v9 + v10;
    double v12 = result / v11;
    double v13 = v9 / v11;
    return CI_xy_to_TempTint(a2, a3, v12, v13);
  }
  else
  {
    *a3 = NAN;
    *a2 = NAN;
  }
  return result;
}

double CI_xy_to_TempTint(double *a1, double *a2, double a3, double a4)
{
  double v4 = 1.5 - a3 + a4 * 6.0;
  double v5 = (a3 + a3) / v4;
  double v6 = a4 * 3.0 / v4;
  double v7 = 0.0;
  uint64_t v8 = 0x100000000;
  uint64_t v9 = 0x38u;
  double v10 = 0.0;
  double v11 = 0.0;
  do
  {
    double v12 = v11;
    double v13 = v10;
    double v14 = v7;
    double v15 = *(double *)((char *)&kTempTable + v9);
    double v16 = sqrt(v15 * v15 + 1.0);
    double v7 = 1.0 / v16;
    double v10 = v15 / v16;
    double v18 = *(double *)((char *)&kTempTable + v9 - 16);
    double v17 = *(double *)((char *)&kTempTable + v9 - 8);
    double v11 = (v6 - v17) * v7 - (v5 - v18) * v10;
    v8 -= 0x100000000;
    uint64_t v19 = v9 + 32;
    if (v9 == 984) {
      break;
    }
    v9 += 32;
  }
  while (v11 > 0.0);
  if (v8)
  {
    double v20 = 0.0;
    if (v11 <= 0.0) {
      double v20 = (v6 - v17) * v7 - (v5 - v18) * v10;
    }
    double v21 = -v20 / (v12 - v20);
  }
  else
  {
    double v21 = 0.0;
  }
  double v22 = (double *)((char *)&kTempTable + (-v8 >> 27));
  *a1 = 1000000.0 / ((1.0 - v21) * *(double *)((char *)&kTempTable + v19 - 56) + *v22 * v21);
  double v23 = v14 * v21 + v7 * (1.0 - v21);
  double v24 = v13 * v21 + v10 * (1.0 - v21);
  double v25 = sqrt(v24 * v24 + v23 * v23);
  double result = (v24 / v25 * (v6 - (v17 * (1.0 - v21) + v22[2] * v21))
          + (v5 - (v18 * (1.0 - v21) + v22[1] * v21)) * (v23 / v25))
         * -3000.0;
  *a2 = result;
  return result;
}

uint64_t wrapGLIsUsable()
{
  return 1;
}

uint64_t wrapGLIsAccelerated()
{
  return 1;
}

uint64_t wrapGetCurrentContext()
{
  return [MEMORY[0x1E4F38D58] currentContext];
}

uint64_t wrapSetCurrentContext(uint64_t a1)
{
  return [MEMORY[0x1E4F38D58] setCurrentContext:a1];
}

uint64_t wrapGetContextAPI(void *a1)
{
  if (a1) {
    return [a1 API];
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t wrapGetFormatInfo(int a1, int a2)
{
  uint64_t result = 0x190600001906;
  switch(a2)
  {
    case 1:
      return 0x80E100001908;
    case 2:
      return 0x190800001908;
    case 3:
      return 0x19080000805BLL;
    case 4:
      BOOL v4 = a1 == 3;
      uint64_t v5 = 0x190800001908;
      uint64_t v6 = 0x19080000881ALL;
      goto LABEL_17;
    case 5:
      return 0x190800008814;
    case 6:
      BOOL v7 = a1 == 3;
      unint64_t v8 = 0x80E100008C43;
      goto LABEL_39;
    case 7:
      BOOL v7 = a1 == 3;
      uint64_t v9 = 35907;
      goto LABEL_38;
    case 8:
      return 0x93F2000093F2;
    case 9:
      return result;
    case 10:
      return 0x190900001909;
    case 11:
      return 0x190A0000190ALL;
    case 12:
      if (a1 == 3) {
        return 0x190300008229;
      }
      else {
        return 0x190300001903;
      }
    case 14:
      uint64_t v6 = 0x19030000822DLL;
      BOOL v4 = a1 == 3;
      uint64_t v5 = 0x190300001903;
LABEL_17:
      if (v4) {
        return v6;
      }
      else {
        return v5;
      }
    case 15:
      if (a1 == 3) {
        return 0x19030000822ELL;
      }
      else {
        return 0x190300001903;
      }
    case 16:
      if (a1 == 3) {
        return 0x82270000822BLL;
      }
      else {
        return 0x822700008227;
      }
    case 18:
      if (a1 == 3) {
        return 0x82270000822FLL;
      }
      else {
        return 0x822700008227;
      }
    case 19:
      if (a1 == 3) {
        return 0x822700008230;
      }
      else {
        return 0x822700008227;
      }
    case 24:
      return 0x8A1F00001907;
    case 25:
      return 0x8A1F00001907;
    case 26:
      return 0x93FB00001907;
    case 28:
      BOOL v7 = a1 == 3;
      uint64_t v9 = 32857;
LABEL_38:
      unint64_t v8 = v9 & 0xFFFF0000FFFFFFFFLL | 0x190800000000;
LABEL_39:
      if (v7) {
        uint64_t result = v8;
      }
      else {
        uint64_t result = 0;
      }
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

void *wrapEAGLContextCreate(int a1, void *a2)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v5 = *MEMORY[0x1E4F1CFD0];
  [v4 setObject:*MEMORY[0x1E4F1CFD0] forKey:*MEMORY[0x1E4F38D70]];
  [v4 setObject:v5 forKey:*MEMORY[0x1E4F38D78]];
  [v4 setObject:v5 forKey:*MEMORY[0x1E4F38D88]];
  uint64_t v6 = [a2 sharegroup];
  if (v6) {
    [v4 setObject:v6 forKey:*MEMORY[0x1E4F38D80]];
  }
  BOOL v7 = (void *)[objc_alloc(MEMORY[0x1E4F38D58]) initWithAPI:a1 properties:v4];

  [v7 setDebugLabel:@"CI Internal Context"];
  return v7;
}

void *wrapEAGLContextSetParameter(void *result, uint64_t a2, int a3)
{
  int v3 = a3;
  if (result) {
    return (void *)[result setParameter:a2 to:&v3];
  }
  return result;
}

void *wrapEAGLContextSetBackgroundEnabled(void *result, int a2)
{
  if (result)
  {
    int v2 = a2;
    return (void *)[result setParameter:321 to:&v2];
  }
  return result;
}

void *wrapEAGLContextRetain(void *a1)
{
  if (a1) {
    id v2 = a1;
  }
  return a1;
}

void wrapEAGLContextRelease(id a1)
{
  if (a1) {
}
  }

uint64_t wrapEAGLContextTexImageIOSurface(void *a1, GLenum a2, uint64_t a3, uint64_t a4, GLint a5, signed int a6, signed int a7, __IOSurface *a8, unsigned int a9)
{
  if (!a1) {
    return 0;
  }
  GLenum v10 = a7;
  unsigned int v13 = a4;
  unsigned int v14 = a3;
  BYTE4(v37) = 0;
  LODWORD(v37) = a9;
  if ((objc_msgSend(a1, "texImageIOSurface:target:internalFormat:width:height:format:type:plane:invert:", a8, a2, a5, a3, a4, a6, a7, v37) & 1) == 0)
  {
    GLenum v41 = a6;
    size_t BytesPerRowOfPlane = IOSurfaceGetBytesPerRowOfPlane(a8, a9);
    size_t BytesPerElementOfPlane = IOSurfaceGetBytesPerElementOfPlane(a8, a9);
    Elementint WidthOfPlane = IOSurfaceGetElementWidthOfPlane(a8, a9);
    if (IOSurfaceGetElementHeightOfPlane(a8, a9) == 1 && ElementWidthOfPlane - 3 >= 0xFFFFFFFFFFFFFFFELL)
    {
      GLenum v40 = a2;
      uint64_t v21 = v14 % ElementWidthOfPlane ? v14 + 1 : v14;
      BaseAddressOfPlane = (char *)IOSurfaceGetBaseAddressOfPlane(a8, a9);
      if (BaseAddressOfPlane)
      {
        __src = BaseAddressOfPlane;
        unsigned int v39 = v13;
        size_t v23 = BytesPerElementOfPlane / ElementWidthOfPlane * v21;
        unint64_t v24 = (v23 + 3) & 0xFFFFFFFFFFFFFFFCLL;
        if (BytesPerRowOfPlane == v24)
        {
          double v25 = 0;
          goto LABEL_20;
        }
        uint64_t v26 = v39;
        double v27 = (char *)malloc_type_malloc(v24 * v39, 0xE689878FuLL);
        if (v27)
        {
          double v25 = v27;
          if (v39)
          {
            GLenum v43 = v10;
            uint64_t v28 = 0;
            double v29 = __src;
            do
            {
              memcpy(&v25[v24 * v28++], v29, v23);
              v29 += BytesPerRowOfPlane;
              --v26;
            }
            while (v26);
            GLenum v10 = v43;
          }
LABEL_20:
          long long v30 = (void *)[MEMORY[0x1E4F38D58] currentContext];
          long long v31 = v30;
          if (v30) {
            id v32 = v30;
          }
          uint64_t v17 = [MEMORY[0x1E4F38D58] setCurrentContext:a1];
          v44[0] = MEMORY[0x1E4F143A8];
          v44[1] = 3221225472;
          unsigned int v45 = __wrapEAGLContextTexImageIOSurface_block_invoke;
          unsigned __int16 v46 = &__block_descriptor_40_e5_v8__0l;
          BOOL v47 = v31;
          if (v17)
          {
            if (a5 == 35906) {
              GLenum v33 = 35906;
            }
            else {
              GLenum v33 = v41;
            }
            pixels = __src;
            if (v25) {
              pixels = v25;
            }
            glTexImage2D(v40, 0, a5, v14, v39, 0, v33, v10, pixels);
          }
          else
          {
            int v36 = ci_logger_render();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              wrapEAGLContextTexImageIOSurface_cold_1((uint64_t)a1, v36);
              if (!v25) {
                goto LABEL_34;
              }
              goto LABEL_33;
            }
          }
          if (!v25)
          {
LABEL_34:
            v45((uint64_t)v44);
            return v17;
          }
LABEL_33:
          free(v25);
          goto LABEL_34;
        }
      }
    }
    return 0;
  }
  return 1;
}

void sub_1938BDA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, void (*a18)(char *))
{
}

void __wrapEAGLContextTexImageIOSurface_block_invoke(uint64_t a1)
{
  [MEMORY[0x1E4F38D58] setCurrentContext:*(void *)(a1 + 32)];
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
  }
}

uint64_t wrapIsA9_or_higher()
{
  if (wrapIsA9_or_higher_didCheck != -1) {
    dispatch_once(&wrapIsA9_or_higher_didCheck, &__block_literal_global_80);
  }
  return wrapIsA9_or_higher_is_A9_gpu;
}

uint64_t __wrapIsA9_or_higher_block_invoke()
{
  uint64_t result = [objc_alloc(MEMORY[0x1E4F38D58]) initWithAPI:3];
  if (result)
  {
    uint64_t v1 = (void *)result;
    id v2 = (void *)[MEMORY[0x1E4F38D58] currentContext];
    int v3 = v2;
    if (v2) {
      id v4 = v2;
    }
    int v5 = [MEMORY[0x1E4F38D58] setCurrentContext:v1];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    unint64_t v8 = __wrapIsA9_or_higher_block_invoke_2;
    uint64_t v9 = &__block_descriptor_40_e5_v8__0l;
    GLenum v10 = v3;
    if (v5)
    {
      GLint params = 0;
      glGetIntegerv(0xD33u, &params);
      wrapIsA9_or_higher_is_A9_gpu = params >= 0x4000;
    }

    return ((uint64_t (*)(void *))v8)(v7);
  }
  return result;
}

void sub_1938BDC08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, void (*a12)(char *))
{
}

void __wrapIsA9_or_higher_block_invoke_2(uint64_t a1)
{
  [MEMORY[0x1E4F38D58] setCurrentContext:*(void *)(a1 + 32)];
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
  }
}

uint64_t wrapGetMacroContext@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  bzero(a2, 0x2C8uLL);
  uint64_t result = [a1 getMacroContextPrivate];
  if (result)
  {
    a2[1] = result;
    a2[2] = _ActiveTexture;
    a2[3] = _AttachShader;
    a2[4] = _Begin;
    a2[5] = _BindAttribLocation;
    a2[6] = _BindBuffer;
    a2[7] = _BindFramebuffer;
    a2[8] = _BindRenderbuffer;
    a2[9] = _BindTexture;
    a2[10] = _BlendColor;
    a2[11] = _BlendEquationSeparate;
    a2[12] = _BlendFunc;
    a2[13] = _BlendFuncSeparate;
    a2[14] = _CheckFramebufferStatus;
    a2[15] = _ClearColor;
    a2[16] = _ClientWaitSync;
    a2[17] = _CompileShader;
    a2[18] = _CopyTexImage2D;
    a2[19] = _CopyTexSubImage2D;
    a2[20] = _CreateProgram;
    a2[21] = _CreateShader;
    a2[22] = _DeleteFramebuffers;
    a2[23] = _DeleteProgram;
    a2[24] = _DeleteRenderbuffers;
    a2[25] = _DeleteShader;
    a2[26] = _DeleteSync;
    a2[27] = _DeleteTextures;
    a2[28] = _DepthMask;
    a2[29] = _Disable;
    a2[30] = _DisableVertexAttribArray;
    a2[31] = _DrawArrays;
    a2[32] = _DrawBuffers;
    a2[33] = _Enable;
    a2[34] = _EnableVertexAttribArray;
    a2[35] = _End;
    a2[36] = _FenceSync;
    a2[37] = _Finish;
    a2[38] = _Flush;
    a2[39] = _FinishRenderAPPLE;
    a2[40] = _FlushRenderAPPLE;
    a2[41] = _FramebufferRenderbuffer;
    a2[42] = _FramebufferTexture2D;
    a2[43] = _GenFramebuffers;
    a2[44] = _GenRenderbuffers;
    a2[45] = _GenTextures;
    a2[46] = _GetBooleanv;
    a2[47] = _GetDoublev;
    a2[48] = _GetError;
    a2[49] = _GetFramebufferAttachmentParameteriv;
    a2[50] = _GetIntegerv;
    a2[51] = _GetProgramInfoLog;
    a2[52] = _GetProgramiv;
    a2[53] = _GetRenderbufferParameteriv;
    a2[54] = _GetShaderInfoLog;
    a2[55] = _GetShaderiv;
    a2[56] = _GetString;
    a2[57] = _GetTexImage;
    a2[58] = _GetTexLevelParameteriv;
    a2[59] = _GetUniformLocation;
    a2[60] = _GetVertexAttribPointerv;
    a2[61] = _GetVertexAttribiv;
    a2[62] = _InsertEventMarkerEXT;
    a2[63] = _IsEnabled;
    a2[64] = _IsFramebuffer;
    a2[65] = _IsTexture;
    a2[66] = _LinkProgram;
    a2[67] = _MultiTexCoord2f;
    a2[68] = _PixelStorei;
    a2[69] = _ReadPixels;
    a2[70] = _RenderbufferStorage;
    a2[71] = _Scissor;
    a2[72] = _ShaderSource;
    a2[73] = _TexImage2D;
    a2[74] = _TexParameterfv;
    a2[75] = _TexParameteri;
    a2[76] = _Uniform1f;
    a2[77] = _Uniform1i;
    a2[78] = _Uniform2f;
    a2[79] = _Uniform3f;
    a2[80] = _Uniform4f;
    a2[81] = _UniformMatrix2fv;
    a2[82] = _UniformMatrix3fv;
    a2[83] = _UniformMatrix4fv;
    a2[84] = _UseProgram;
    a2[85] = _ValidateProgram;
    a2[86] = _Vertex2f;
    a2[87] = _VertexAttribPointer;
    a2[88] = _Viewport;
    *(unsigned char *)a2 = 1;
  }
  return result;
}

uint64_t _ActiveTexture(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 2744))(*(void *)a1);
}

uint64_t _AttachShader(uint64_t a1, unsigned int a2, unsigned int a3)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 4792))(*(void *)a1, a2, a3);
}

uint64_t _BindAttribLocation(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(void, void))(a1 + 5048))(*(void *)a1, a2);
}

uint64_t _BindBuffer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5144))(*(void *)a1);
}

uint64_t _BindFramebuffer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5384))(*(void *)a1);
}

uint64_t _BindRenderbuffer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5336))(*(void *)a1);
}

uint64_t _BindTexture(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 48))(*(void *)a1);
}

uint64_t _BlendColor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 2704))(*(void *)a1);
}

uint64_t _BlendEquationSeparate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 3672))(*(void *)a1);
}

uint64_t _BlendFunc(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 64))(*(void *)a1);
}

uint64_t _BlendFuncSeparate(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 2696))(*(void *)a1);
}

uint64_t _CheckFramebufferStatus(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5408))(*(void *)a1);
}

uint64_t _ClearColor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 104))(*(void *)a1);
}

uint64_t _ClientWaitSync(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 6264))(*(void *)a1);
}

uint64_t _CompileShader(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(void, void))(a1 + 4776))(*(void *)a1, a2);
}

uint64_t _CopyTexImage2D(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 440))(*(void *)a1);
}

uint64_t _CopyTexSubImage2D(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 456))(*(void *)a1);
}

uint64_t _CreateProgram(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4784))(*(void *)a1);
}

uint64_t _CreateShader(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4760))(*(void *)a1);
}

uint64_t _DeleteFramebuffers(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5392))(*(void *)a1);
}

uint64_t _DeleteProgram(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(void, void))(a1 + 4736))(*(void *)a1, a2);
}

uint64_t _DeleteRenderbuffers(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5344))(*(void *)a1);
}

uint64_t _DeleteShader(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(void, void))(a1 + 4736))(*(void *)a1, a2);
}

uint64_t _DeleteSync(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 6256))(*(void *)a1);
}

uint64_t _DeleteTextures(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 480))(*(void *)a1);
}

uint64_t _DepthMask(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 496))(*(void *)a1);
}

uint64_t _Disable(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 512))(*(void *)a1);
}

uint64_t _DisableVertexAttribArray(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4112))(*(void *)a1);
}

uint64_t _DrawArrays(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 528))(*(void *)a1);
}

uint64_t _DrawBuffers(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5240))(*(void *)a1);
}

uint64_t _Enable(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 584))(*(void *)a1);
}

uint64_t _EnableVertexAttribArray(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4104))(*(void *)a1);
}

uint64_t _FenceSync(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 6240))(*(void *)a1);
}

uint64_t _Finish(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 720))(*(void *)a1);
}

uint64_t _Flush(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 728))(*(void *)a1);
}

uint64_t _FramebufferRenderbuffer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5440))(*(void *)a1);
}

uint64_t _FramebufferTexture2D(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5424))(*(void *)a1);
}

uint64_t _GenFramebuffers(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5400))(*(void *)a1);
}

uint64_t _GenRenderbuffers(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5352))(*(void *)a1);
}

uint64_t _GenTextures(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 792))(*(void *)a1);
}

uint64_t _GetBooleanv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 800))(*(void *)a1);
}

uint64_t _GetError(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 824))(*(void *)a1);
}

uint64_t _GetFramebufferAttachmentParameteriv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5448))(*(void *)a1);
}

uint64_t _GetIntegerv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 840))(*(void *)a1);
}

uint64_t _GetProgramInfoLog(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5288))(*(void *)a1);
}

uint64_t _GetProgramiv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5272))(*(void *)a1);
}

uint64_t _GetRenderbufferParameteriv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5368))(*(void *)a1);
}

uint64_t _GetShaderInfoLog(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5280))(*(void *)a1);
}

uint64_t _GetShaderiv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5264))(*(void *)a1);
}

uint64_t _GetString(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 944))(*(void *)a1);
}

uint64_t _GetTexLevelParameteriv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 1008))(*(void *)a1);
}

uint64_t _GetUniformLocation(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(void, void))(a1 + 5008))(*(void *)a1, a2);
}

uint64_t _GetVertexAttribPointerv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4144))(*(void *)a1);
}

uint64_t _GetVertexAttribiv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4136))(*(void *)a1);
}

uint64_t _InsertEventMarkerEXT(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 6536))(*(void *)a1);
}

uint64_t _IsEnabled(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 1152))(*(void *)a1);
}

uint64_t _IsFramebuffer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5376))(*(void *)a1);
}

uint64_t _IsTexture(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 1168))(*(void *)a1);
}

uint64_t _LinkProgram(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(void, void))(a1 + 4800))(*(void *)a1, a2);
}

uint64_t _PixelStorei(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 1568))(*(void *)a1);
}

uint64_t _ReadPixels(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 1904))(*(void *)a1);
}

uint64_t _RenderbufferStorage(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 5360))(*(void *)a1);
}

uint64_t _Scissor(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 2016))(*(void *)a1);
}

uint64_t _ShaderSource(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(void, void))(a1 + 4768))(*(void *)a1, a2);
}

uint64_t _TexImage2D(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 2416))(*(void *)a1);
}

uint64_t _TexParameterfv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 2432))(*(void *)a1);
}

uint64_t _TexParameteri(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 2440))(*(void *)a1);
}

uint64_t _Uniform1f(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4824))(*(void *)a1);
}

uint64_t _Uniform1i(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4856))(*(void *)a1);
}

uint64_t _Uniform2f(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4832))(*(void *)a1);
}

uint64_t _Uniform3f(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4840))(*(void *)a1);
}

uint64_t _Uniform4f(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4848))(*(void *)a1);
}

uint64_t _UniformMatrix2fv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4952))(*(void *)a1);
}

uint64_t _UniformMatrix3fv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4960))(*(void *)a1);
}

uint64_t _UniformMatrix4fv(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4968))(*(void *)a1);
}

uint64_t _UseProgram(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(void, void))(a1 + 4808))(*(void *)a1, a2);
}

uint64_t _ValidateProgram(uint64_t a1, unsigned int a2)
{
  return (*(uint64_t (**)(void, void))(a1 + 4816))(*(void *)a1, a2);
}

uint64_t _VertexAttribPointer(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 4096))(*(void *)a1);
}

uint64_t _Viewport(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 2688))(*(void *)a1);
}

double CI::Bitmap::Bitmap(CI::Bitmap *this)
{
  *(void *)this = &unk_1EE45DF30;
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = &unk_1EE45B098;
  atomic_fetch_add(&dword_1EB466E78[53], 1u);
  *(void *)this = &unk_1EE45DBF8;
  *((void *)this + 2) = &unk_1EE45DC30;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 4) = 0;
  *((unsigned char *)this + 56) = 0;
  double result = 0.0;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *(_OWORD *)((char *)this + 92) = 0u;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 14) = 0;
  *((_WORD *)this + 68) = 0;
  return result;
}

CI::Bitmap *CI::Bitmap::Bitmap(CI::Bitmap *this, CGImage *a2)
{
  *(void *)this = &unk_1EE45DF30;
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = &unk_1EE45B098;
  atomic_fetch_add(&dword_1EB466E78[53], 1u);
  *(void *)this = &unk_1EE45DBF8;
  *((void *)this + 2) = &unk_1EE45DC30;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  CI::Bitmap::init(this, a2);
  return this;
}

const __CFData *CI::Bitmap::init(CI::Bitmap *this, CGImageRef image)
{
  *((void *)this + 10) = CGImageGetWidth(image);
  *((void *)this + 11) = CGImageGetHeight(image);
  *((void *)this + 12) = CGImageGetBytesPerRow(image);
  int v5 = CI::format_from_CGImage((uint64_t)image, v4);
  *((_DWORD *)this + 26) = v5;
  *((void *)this + 14) = (int)CI::format_component_count(v5);
  *((void *)this + 15) = (int)CI::format_bytes_per_pixel(*((_DWORD *)this + 26));
  *((void *)this + 16) = (int)CI::format_bits_per_component(*((_DWORD *)this + 26));
  *((unsigned char *)this + 137) = CI::format_is_half_float(*((_DWORD *)this + 26));
  *((unsigned char *)this + 136) = CI::format_is_float(*((_DWORD *)this + 26));
  *((unsigned char *)this + 24) = 1;
  CI::alpha_mode_from_CGImage((uint64_t)image, v6);
  ColorSpace = CGImageGetColorSpace(image);
  *((void *)this + 4) = CGColorSpaceRetain(ColorSpace);
  DataProvider = CGImageGetDataProvider(image);
  uint64_t v9 = CGDataProviderRetainBytePtr();
  if (v9)
  {
    *((void *)this + 9) = v9;
    *((void *)this + 6) = CGDataProviderRetain(DataProvider);
  }
  else
  {
    CFDataRef result = CGDataProviderCopyData(DataProvider);
    if (!result) {
      return result;
    }
    *((void *)this + 5) = result;
    *((void *)this + 9) = CFDataGetBytePtr(result);
  }
  return (const __CFData *)1;
}

CFTypeRef CI::Bitmap::initWithIOSurface(uint64_t a1, IOSurfaceRef buffer, uint64_t a3, int a4, int a5)
{
  size_t v9 = a5;
  size_t WidthOfPlane = IOSurfaceGetWidthOfPlane(buffer, a5);
  size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(buffer, v9);
  int v13 = *(_DWORD *)a3;
  int v12 = *(_DWORD *)(a3 + 4);
  uint64_t v15 = *(void *)(a3 + 8);
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v16 = 0x7FFFFFFFLL;
  if (v13 == 0x7FFFFFFF && v12 == 0x7FFFFFFF && v15 == 0 && v14 == 0)
  {
    size_t HeightOfPlane = 0;
    size_t WidthOfPlane = 0;
    int v31 = 0x7FFFFFFF;
  }
  else if (v13 == -2147483647 && v12 == -2147483647 && v15 == 0xFFFFFFFFLL && v14 == 0xFFFFFFFFLL)
  {
    uint64_t v16 = 0;
    int v31 = 0;
  }
  else
  {
    int v23 = v13 & ~(v13 >> 31);
    int v24 = v13 + v15;
    if ((int)WidthOfPlane < v24) {
      int v24 = WidthOfPlane;
    }
    uint64_t v25 = v12 & ~(v12 >> 31);
    int v26 = v12 + v14;
    if ((int)HeightOfPlane < v26) {
      int v26 = HeightOfPlane;
    }
    size_t v27 = v24 - v23;
    BOOL v28 = v26 < (int)v25;
    if (v26 >= (int)v25) {
      size_t v29 = v26 - (int)v25;
    }
    else {
      size_t v29 = 0;
    }
    if (v28)
    {
      size_t v27 = 0;
      uint64_t v25 = 0x7FFFFFFFLL;
      int v30 = 0x7FFFFFFF;
    }
    else
    {
      int v30 = v23;
    }
    if (v24 >= v23) {
      size_t HeightOfPlane = v29;
    }
    else {
      size_t HeightOfPlane = 0;
    }
    if (v24 >= v23) {
      size_t WidthOfPlane = v27;
    }
    else {
      size_t WidthOfPlane = 0;
    }
    if (v24 >= v23) {
      uint64_t v16 = v25;
    }
    else {
      uint64_t v16 = 0x7FFFFFFFLL;
    }
    if (v24 >= v23) {
      int v31 = v30;
    }
    else {
      int v31 = 0x7FFFFFFF;
    }
  }
  *(void *)(a1 + 80) = WidthOfPlane;
  *(void *)(a1 + 88) = HeightOfPlane;
  *(_DWORD *)(a1 + 104) = a4;
  *(void *)(a1 + 96) = IOSurfaceGetBytesPerRowOfPlane(buffer, v9);
  *(void *)(a1 + 112) = (int)CI::format_component_count(*(_DWORD *)(a1 + 104));
  *(void *)(a1 + 120) = (int)CI::format_bytes_per_pixel(*(_DWORD *)(a1 + 104));
  *(void *)(a1 + 128) = (int)CI::format_bits_per_component(*(_DWORD *)(a1 + 104));
  *(unsigned char *)(a1 + 137) = CI::format_is_half_float(*(_DWORD *)(a1 + 104));
  *(unsigned char *)(a1 + 136) = CI::format_is_float(*(_DWORD *)(a1 + 104));
  *(void *)(a1 + 32) = 0;
  id v32 = (char *)IOSurfaceGetBaseAddressOfPlane(buffer, v9) + *(void *)(a1 + 96) * v16;
  *(void *)(a1 + 72) = &v32[(int)(CI::format_bytes_per_pixel(*(_DWORD *)(a1 + 104)) * v31)];
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  CFTypeRef result = CFRetain(buffer);
  *(void *)(a1 + 64) = result;
  return result;
}

uint64_t CI::Bitmap::Bitmap(uint64_t a1, IOSurfaceRef buffer, uint64_t a3, int a4)
{
  *(void *)a1 = &unk_1EE45DF30;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = &unk_1EE45B098;
  atomic_fetch_add(&dword_1EB466E78[53], 1u);
  *(void *)a1 = &unk_1EE45DBF8;
  *(void *)(a1 + 16) = &unk_1EE45DC30;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  if (IOSurfaceGetPlaneCount(buffer) < 2)
  {
    CI::Bitmap::initWithIOSurface(a1, buffer, a3, a4, 0);
  }
  else
  {
    unint64_t v8 = ci_logger_render();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      CI::Bitmap::Bitmap(v8);
    }
  }
  return a1;
}

CI::Bitmap *CI::Bitmap::Bitmap(CI::Bitmap *this, __IOSurface *a2, int a3)
{
  *(void *)this = &unk_1EE45DF30;
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = &unk_1EE45B098;
  atomic_fetch_add(&dword_1EB466E78[53], 1u);
  *(void *)this = &unk_1EE45DBF8;
  *((void *)this + 2) = &unk_1EE45DC30;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  int v6 = CI::format_from_IOSurface(a2, a2);
  if (CI::format_is_ycc_biplanar(v6))
  {
    uint64_t v12 = 0;
    size_t WidthOfPlane = IOSurfaceGetWidthOfPlane(a2, a3);
    size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(a2, a3);
    int v7 = CI::format_of_plane(v6, a3);
    unint64_t v8 = this;
    size_t v9 = a2;
    int v10 = a3;
  }
  else
  {
    uint64_t v12 = 0;
    size_t WidthOfPlane = IOSurfaceGetWidth(a2);
    size_t HeightOfPlane = IOSurfaceGetHeight(a2);
    unint64_t v8 = this;
    size_t v9 = a2;
    int v7 = v6;
    int v10 = 0;
  }
  CI::Bitmap::initWithIOSurface((uint64_t)v8, v9, (uint64_t)&v12, v7, v10);
  return this;
}

void non-virtual thunk to'CI::Bitmap::~Bitmap(CI::Bitmap *this)
{
}

{
  uint64_t vars8;

  CI::Bitmap::~Bitmap((CI::Bitmap *)((char *)this - 16));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::Bitmap::type(CI::Bitmap *this)
{
  return 55;
}

uint64_t non-virtual thunk to'CI::Bitmap::type(CI::Bitmap *this)
{
  return 55;
}

uint64_t CI::InstanceCounted<(CI::Type)55>::type()
{
  return 55;
}

void *CI::InstanceCounted<(CI::Type)55>::~InstanceCounted(void *result)
{
  *CFTypeRef result = &unk_1EE45B098;
  atomic_fetch_add(&dword_1EB466E78[53], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)55>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B098;
  atomic_fetch_add(&dword_1EB466E78[53], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

int8x16_t *haarTransform32x32_NEON(int8x16_t *result, uint64_t a2, int32x4_t *a3)
{
  int v3 = 32;
  id v4 = a3;
  do
  {
    int8x16_t v5 = *result;
    int8x16_t v6 = result[1];
    CFTypeRef result = (int8x16_t *)((char *)result + a2);
    uint8x16_t v7 = (uint8x16_t)vuzp1q_s8(v5, v6);
    uint8x16_t v8 = (uint8x16_t)vuzp2q_s8(v5, v6);
    int16x8_t v9 = (int16x8_t)vaddl_u8(*(uint8x8_t *)v7.i8, *(uint8x8_t *)v8.i8);
    int16x8_t v10 = (int16x8_t)vaddl_high_u8(v7, v8);
    uint16x8_t v11 = vsubl_u8(*(uint8x8_t *)v7.i8, *(uint8x8_t *)v8.i8);
    uint16x8_t v12 = vsubl_high_u8(v7, v8);
    int16x8_t v13 = vuzp1q_s16(v9, v10);
    int16x8_t v14 = vuzp2q_s16(v9, v10);
    int16x8_t v15 = vaddq_s16(v13, v14);
    int32x4_t v16 = (int32x4_t)vsubq_s16(v13, v14);
    int16x8_t v17 = vrev32q_s16(v15);
    int16x8_t v18 = vaddq_s16(v17, v15);
    int16x8_t v19 = vsubq_s16(v17, v15);
    int16x8_t v20 = vzip1q_s16(v18, v19);
    int32x4_t v21 = (int32x4_t)vzip2q_s16(v18, v19);
    v21.i32[2] = v21.i32[1];
    v21.i64[0] = __PAIR64__(v20.u32[3], v20.u32[1]);
    int32x4_t v22 = vzip1q_s32(v21, v16);
    int32x4_t v23 = vzip2q_s32(v21, v16);
    v21.i64[0] = v22.i64[0];
    v21.i64[1] = v11.i64[0];
    v11.i64[0] = v22.i64[1];
    v16.i64[0] = v23.i64[0];
    v16.i64[1] = v12.i64[0];
    v12.i64[0] = v23.i64[1];
    *id v4 = v21;
    v4[1] = (int32x4_t)v11;
    int v24 = v4 + 2;
    *int v24 = v16;
    v24[1] = (int32x4_t)v12;
    id v4 = v24 + 2;
    --v3;
  }
  while (v3);
  int v25 = 4;
  do
  {
    int v26 = (int16x8_t *)a3;
    int v27 = 4;
    do
    {
      int16x8_t v28 = v26[4];
      int16x8_t v29 = v26[8];
      int16x8_t v30 = v26[12];
      int16x8_t v31 = v26[16];
      int16x8_t v32 = v26[20];
      int16x8_t v33 = v26[24];
      int16x8_t v34 = v26[28];
      int16x8_t v35 = vaddq_s16(*v26, v28);
      int16x8_t v36 = vaddq_s16(v29, v30);
      int16x8_t v37 = vaddq_s16(v31, v32);
      int16x8_t v38 = vaddq_s16(v33, v34);
      int16x8_t v39 = vsubq_s16(*v26, v28);
      int16x8_t v40 = vaddq_s16(v35, v36);
      int16x8_t v41 = vaddq_s16(v37, v38);
      *int v26 = vaddq_s16(v40, v41);
      v26[4] = vsubq_s16(v40, v41);
      v26[8] = vsubq_s16(v35, v36);
      v26[12] = vsubq_s16(v37, v38);
      v26[16] = v39;
      v26[20] = vsubq_s16(v29, v30);
      v26[24] = vsubq_s16(v31, v32);
      v26[28] = vsubq_s16(v33, v34);
      ++v26;
      --v27;
    }
    while (v27);
    a3 += 32;
    --v25;
  }
  while (v25);
  return result;
}

uint64_t horzDiff32x32(int8x16_t *_X0, uint64_t a2, int a3)
{
  __asm { PRFM            #0, [X0] }
  uint16x8_t v8 = 0uLL;
  do
  {
    int8x16_t v9 = *_X0;
    int8x16_t v10 = _X0[1];
    _X0 = (int8x16_t *)((char *)_X0 + a2);
    __asm { PRFM            #0, [X0] }
    uint8x16_t v12 = (uint8x16_t)vextq_s8(v10, v9, 0xFuLL);
    uint8x16_t v13 = (uint8x16_t)vextq_s8(v9, v10, 0xFuLL);
    uint16x8_t v8 = vabal_high_u8(vabal_u8(vabal_high_u8(vabal_u8(v8, *(uint8x8_t *)v9.i8, *(uint8x8_t *)v12.i8), (uint8x16_t)v9, v12), *(uint8x8_t *)v10.i8, *(uint8x8_t *)v13.i8), (uint8x16_t)v10, v13);
    --a3;
  }
  while (a3);
  int64x2_t v14 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(v8));
  return vpaddq_s64(v14, v14).u32[0];
}

void sub_1938BEFCC(uint64_t a1, uint64_t a2, signed int a3, uint64_t a4, int16x8_t *a5, int16x4_t *a6)
{
  uint64_t v6 = 4;
  do
  {
    int16x8_t v7 = *a5;
    v7.i64[0] = a5[1].i64[1];
    uint32x4_t v8 = (uint32x4_t)vaddq_s32(vaddq_s32(vmull_s16(a6[2], a6[2]), vmull_s16(*(int16x4_t *)v7.i8, *(int16x4_t *)v7.i8)), vmull_high_s16(*(int16x8_t *)a6[2].i8, *(int16x8_t *)a6[2].i8));
    signed int v9 = vmaxvq_u32((uint32x4_t)vaddq_s32(vaddq_s32(vmull_s16(*a6, *a6), vmull_high_s16(v7, v7)), vmull_high_s16(*(int16x8_t *)a6->i8, *(int16x8_t *)a6->i8)));
    if (a3 <= v9) {
      a3 = v9;
    }
    signed int v10 = vmaxvq_u32(v8);
    if (a3 <= v10) {
      a3 = v10;
    }
    a5 += 4;
    a6 += 8;
    --v6;
  }
  while (v6);
}

uint64_t computeEdge1Squared16x16_NEON(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1938BEFCC(a1, a2, 0, a4, (int16x8_t *)a1, (int16x4_t *)(a1 + 256));
  sub_1938BEFCC(v4, v5, v6, v7, (int16x8_t *)(v4 + 512), (int16x4_t *)(v4 + 768));
  return v8;
}

void CI::Buffer::copy_to(CI::Buffer *this, unsigned __int8 *a2)
{
  CFDataRef v2 = (const __CFData *)*((void *)this + 3);
  if (v2)
  {
    v4.length = CFDataGetLength(*((CFDataRef *)this + 3));
    v4.location = 0;
    CFDataGetBytes(v2, v4, a2);
  }
}

CFStringRef CI::Buffer::description(CI::Buffer *this)
{
  uint64_t v1 = *((void *)this + 3);
  if (v1) {
    CFIndex Length = CFDataGetLength(*((CFDataRef *)this + 3));
  }
  else {
    CFIndex Length = 0;
  }
  return CFStringCreateWithFormat(0, 0, @"<CI::Buffer %p>[%zu bytes]", v1, Length);
}

uint64_t CI::Buffer::print(CI::Buffer *this, __sFILE *a2)
{
  CFDataRef v4 = (const __CFData *)*((void *)this + 3);
  if (v4)
  {
    unint64_t Length = CFDataGetLength(v4);
    unint64_t v6 = Length;
    if (Length > 0x20)
    {
      fprintf(a2, "[len:%zu ", Length);
      XXH64_reset(v11, 0);
      CI::XXHashHelper::add((CI::XXHashHelper *)v11, *((CFDataRef *)this + 3));
      unint64_t v10 = XXH64_digest((uint64_t)v11);
      return fprintf(a2, "digest:%016llX]", v10);
    }
    CFDataRef v4 = (const __CFData *)*((void *)this + 3);
  }
  else
  {
    unint64_t v6 = 0;
  }
  BytePtr = CFDataGetBytePtr(v4);
  for (uint64_t result = fwrite("0x", 2uLL, 1uLL, a2); v6; --v6)
  {
    int v9 = *BytePtr++;
    uint64_t result = fprintf(a2, "%02X", v9);
  }
  return result;
}

void CI::Buffer::~Buffer(CI::Buffer *this)
{
  CI::Buffer::~Buffer(this);

  JUMPOUT(0x1997023B0);
}

{
  const void *v2;

  *(void *)this = &unk_1EE45DC58;
  *((void *)this + 2) = &unk_1EE45DC90;
  CFDataRef v2 = (const void *)*((void *)this + 3);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 2) = &unk_1EE45B0C0;
  atomic_fetch_add(&dword_1EB466E78[55], 0xFFFFFFFF);
}

uint64_t CI::Buffer::type(CI::Buffer *this)
{
  return 57;
}

uint64_t non-virtual thunk to'CI::Buffer::type(CI::Buffer *this)
{
  return 57;
}

void non-virtual thunk to'CI::Buffer::~Buffer(CI::Buffer *this)
{
}

{
  uint64_t vars8;

  CI::Buffer::~Buffer((CI::Buffer *)((char *)this - 16));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::originating_process_is_in_background(CI *this)
{
  if (CI_FORCE_IS_BACKGROUND() == 89) {
    return 1;
  }
  if (CI_FORCE_IS_BACKGROUND() != 78) {
    proc_pidoriginatorinfo();
  }
  return 0;
}

uint64_t CI::Color::Color(uint64_t this, float a2, float a3, float a4, float a5)
{
  *(void *)this = &unk_1EE45DF30;
  *(_DWORD *)(this + 8) = 1;
  *(void *)(this + 16) = &unk_1EE45B110;
  atomic_fetch_add(&dword_1EB466F58[1], 1u);
  *(void *)this = &unk_1EE45DA38;
  *(void *)(this + 16) = &unk_1EE45DA80;
  *(float *)(this + 24) = a2;
  *(float *)(this + 28) = a3;
  *(float *)(this + 32) = a4;
  *(float *)(this + 36) = a5;
  *(void *)(this + 40) = 0;
  return this;
}

void non-virtual thunk to'CI::Color::~Color(CI::Color *this)
{
  *((void *)this - 2) = &unk_1EE45DA38;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE45DA80;
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 3));
  *((void *)this + 3) = 0;
  *(void *)this = &unk_1EE45B110;
  atomic_fetch_add(&dword_1EB466F58[1], 0xFFFFFFFF);
}

{
  CI::Color::~Color((CI::Color *)((char *)this - 16));
}

CFStringRef CI::Color::description(CI::Color *this)
{
  return CFStringCreateWithFormat(0, 0, @"<CI::Color %p>[%g %g %g %g]", this, *((float *)this + 6), *((float *)this + 7), *((float *)this + 8), *((float *)this + 9));
}

uint64_t CI::Color::print(CI::Color *this, __sFILE *a2)
{
  fprintf(a2, "[%g %g %g %g ", *((float *)this + 6), *((float *)this + 7), *((float *)this + 8), *((float *)this + 9));
  CI::fprintf_cs(a2, *((__sFILE **)this + 5), (CGColorSpace *)1);

  return fputc(93, a2);
}

BOOL CI::Color::isEmpty(CI::Color *this)
{
  return *((float *)this + 6) == 0.0
      && *((float *)this + 7) == 0.0
      && *((float *)this + 8) == 0.0
      && *((float *)this + 9) == 0.0;
}

BOOL CI::Color::isExtended(CI::Color *this)
{
  float v1 = *((float *)this + 6);
  if (v1 < 0.0) {
    return 1;
  }
  float v2 = *((float *)this + 7);
  if (v2 < 0.0) {
    return 1;
  }
  float v3 = *((float *)this + 8);
  if (v3 < 0.0) {
    return 1;
  }
  float v5 = *((float *)this + 9);
  BOOL v6 = v5 < 0.0;
  if (v1 > v5) {
    BOOL v6 = 1;
  }
  if (v2 > v5) {
    BOOL v6 = 1;
  }
  if (v3 > v5) {
    BOOL v6 = 1;
  }
  return v1 > 1.0 || v6;
}

uint64_t non-virtual thunk to'CI::Color::type(CI::Color *this)
{
  return 59;
}

uint64_t CI::InstanceCounted<(CI::Type)59>::type()
{
  return 59;
}

void *CI::InstanceCounted<(CI::Type)59>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45B110;
  atomic_fetch_add(&dword_1EB466F58[1], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)59>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B110;
  atomic_fetch_add(&dword_1EB466F58[1], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void CI::GLTextureManager::GLTextureManager(CI::GLTextureManager *this, CI::GLContext *a2)
{
  int v3 = (*(uint64_t (**)(CI::GLContext *))(*(void *)a2 + 272))(a2);
  CI::TextureManager::TextureManager(this, v3);
}

void ___ZN2CI16GLTextureManagerC2EPNS_9GLContextE_block_invoke(uint64_t a1, CFTypeRef a2)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  float v5 = ci_signpost_log_render();
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  if ((unint64_t)((v6 << 32) - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v7 = v5;
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6 << 32, "release_surface_block", "", buf, 2u);
      uint64_t v6 = *(unsigned int *)(a1 + 40);
    }
  }
  TimerBase::TimerBase((uint64_t)v58, v6, 0, (uint64_t)"release_surface_block", 32);
  uint64_t v8 = *(void *)(v4 + 176);
  uint64_t v9 = *(void *)(v8 + 8);
  while (v9 != v8)
  {
    uint64_t v11 = v9 + 8;
    uint64_t v9 = *(void *)(v9 + 8);
    unint64_t v10 = *(CFTypeRef **)(v11 + 8);
    int v57 = v10;
    if (!*((unsigned char *)v10 + 24) && *v10 == a2)
    {
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      *(_OWORD *)buf = 0u;
      long long v25 = 0u;
      GetMacroContext(*(void **)(v4 + 184), buf);
      if (!buf[0])
      {
        uint8x16_t v12 = ci_logger_render();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          uint64_t v13 = *(void *)(v4 + 184);
          *(_DWORD *)uint64_t v60 = 134349056;
          uint64_t v61 = v13;
          _os_log_error_impl(&dword_193671000, v12, OS_LOG_TYPE_ERROR, "Unable to get macro state for the GLContext: %{public}p.\n", v60, 0xCu);
        }
      }
      (*((void (**)(void, uint64_t, char *))&v37 + 1))(*(void *)&buf[8], 1, (char *)v57 + 8);
      CFRelease(*v57);
      *int v57 = 0;
      std::list<CI::attached_surface_t *>::remove(*(void **)(v4 + 176), &v57);
      free(v57);
      uint64_t v8 = *(void *)(v4 + 176);
    }
  }
  uint64_t v14 = *(void *)(v4 + 136);
  uint64_t v15 = *(void *)(v14 + 8);
  if (v15 != v14)
  {
    do
    {
      uint64_t v16 = v15 + 8;
      uint64_t v15 = *(void *)(v15 + 8);
      int v57 = *(CFTypeRef **)(v16 + 8);
      if ((CFTypeRef)(*(uint64_t (**)(CFTypeRef *))*v57)(v57) == a2)
      {
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v36 = 0u;
        long long v37 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        long long v26 = 0u;
        long long v27 = 0u;
        *(_OWORD *)buf = 0u;
        long long v25 = 0u;
        GetMacroContext(*(void **)(v4 + 184), buf);
        if (!buf[0])
        {
          int16x8_t v17 = ci_logger_render();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
          {
            uint64_t v19 = *(void *)(v4 + 184);
            *(_DWORD *)uint64_t v60 = 134349056;
            uint64_t v61 = v19;
            _os_log_error_impl(&dword_193671000, v17, OS_LOG_TYPE_ERROR, "Unable to get macro state for the GLContext: %{public}p.\n", v60, 0xCu);
          }
        }
        int v23 = 0;
        (*((void (**)(uint8_t *__return_ptr))*v57 + 3))(v60);
        int v23 = *(_DWORD *)v60;
        v56(*(void *)&buf[8]);
        (*((void (**)(void, uint64_t, int *))&v37 + 1))(*(void *)&buf[8], 1, &v23);
        std::list<CI::attached_surface_t *>::remove(*(void **)(v4 + 136), &v57);
        int16x8_t v18 = (const void *)(*(uint64_t (**)(void))*v57)();
        CFRelease(v18);
        if (v57) {
          (*((void (**)(CFTypeRef *))*v57 + 6))(v57);
        }
      }
    }
    while (v15 != *(void *)(v4 + 136));
  }
  int16x8_t v20 = ci_signpost_log_render();
  os_signpost_id_t v21 = v59;
  if (v59 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int32x4_t v22 = v20;
    if (os_signpost_enabled(v20))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v22, OS_SIGNPOST_INTERVAL_END, v21, "release_surface_block", "", buf, 2u);
    }
  }
  TimerBase::~TimerBase((TimerBase *)v58);
}

void CI::GLTextureManager::~GLTextureManager(CI::GLTextureManager *this)
{
  *(void *)this = &unk_1EE45BDC0;
  float v2 = *((void *)this + 12);
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v9 = 0x40000000;
  unint64_t v10 = ___ZN2CI16GLTextureManager19purge_intermediatesEm_block_invoke;
  uint64_t v11 = &__block_descriptor_tmp_9_0;
  uint8x16_t v12 = this;
  uint64_t v13 = 0;
  dispatch_async(v2, &block);
  dispatch_sync(*((dispatch_queue_t *)this + 12), &__block_literal_global_81);
  CI::TextureManager::remove_all(this);
  if (CI_RECYCLE_OPENGL_TEXTURES() && CI_IOSURFACE_INTERMEDIATES()) {
    RemoveReleaseSurfaceBlock(*((void *)this + 13));
  }
  int v3 = *((void *)this + 13);
  uint64_t block = MEMORY[0x1E4F143A8];
  uint64_t v9 = 0x40000000;
  unint64_t v10 = ___ZN2CI16GLTextureManager23purge_attached_surfacesEm_block_invoke;
  uint64_t v11 = &__block_descriptor_tmp_15_2;
  uint8x16_t v12 = this;
  uint64_t v13 = 0;
  dispatch_sync(v3, &block);
  uint64_t v4 = *((void *)this + 22);
  if (v4)
  {
    std::__list_imp<CI::attached_surface_t *>::clear(*((void **)this + 22));
    MEMORY[0x1997023B0](v4, 0x1020C4062D53EE8);
  }
  uint64_t v5 = *((void *)this + 23);
  uint64_t v6 = *((void *)this + 13);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = ___ZN2CI16GLTextureManagerD2Ev_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_3_3;
  _OWORD v7[4] = v5;
  dispatch_async(v6, v7);
  CI::TextureManager::~TextureManager((dispatch_queue_t *)this);
}

{
  uint64_t vars8;

  CI::GLTextureManager::~GLTextureManager(this);

  JUMPOUT(0x1997023B0);
}

void ___ZN2CI16GLTextureManagerD2Ev_block_invoke_2(uint64_t a1)
{
}

uint64_t CI::GLTextureManager::create_intermediate(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  long long v32 = *(_OWORD *)(a5 + 8);
  if (*(void *)(a5 + 8)) {
    BOOL v7 = *(void *)(a5 + 16) == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (v7) {
    return 0;
  }
  int v30 = *a2;
  __int16 v31 = 0;
  if ((a2[1] & 2) != 0) {
    LOBYTE(v31) = 1;
  }
  v27[0] = 0;
  v27[1] = v27;
  v27[2] = 0x3802000000;
  v27[3] = __Block_byref_object_copy__21;
  v27[4] = __Block_byref_object_dispose__21;
  uint64_t v28 = 0;
  int v29 = 0;
  int API = CIEAGLContextGetAPI(*(void **)(*(void *)(a1 + 168) + 392));
  uint64_t v28 = CI::gl_format_info_for_format((uint64_t)&v30, API);
  int v29 = v15;
  uint64_t v23 = 0;
  int v24 = &v23;
  uint64_t v25 = 0x2000000000;
  uint64_t v26 = 0;
  uint64_t v16 = *(NSObject **)(a1 + 104);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke;
  block[3] = &unk_1E57738D8;
  block[6] = a1;
  block[7] = a3;
  long long v19 = v32;
  block[4] = &v23;
  block[5] = v27;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  char v22 = a7;
  dispatch_sync(v16, block);
  uint64_t v8 = v24[3];
  _Block_object_dispose(&v23, 8);
  _Block_object_dispose(v27, 8);
  return v8;
}

uint64_t __Block_byref_object_copy__21(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(_DWORD *)(result + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(result + 40) = v2;
  return result;
}

uint64_t CI::gl_format_info_for_format(uint64_t a1, int a2)
{
  uint64_t result = 0;
  int v4 = *(_DWORD *)a1;
  if (*(int *)a1 <= 2048)
  {
    if (v4 <= 532)
    {
      int v5 = v4 - 257;
      int v6 = 9;
      switch(v5)
      {
        case 0:
        case 1:
          return CIGLGetFormatInfo(a2, v6);
        case 2:
          int v6 = 10;
          return CIGLGetFormatInfo(a2, v6);
        case 3:
          int v6 = 11;
          return CIGLGetFormatInfo(a2, v6);
        case 4:
          int v6 = 12;
          return CIGLGetFormatInfo(a2, v6);
        case 5:
          int v6 = 16;
          return CIGLGetFormatInfo(a2, v6);
        case 6:
          int v6 = 20;
          return CIGLGetFormatInfo(a2, v6);
        case 7:
        case 11:
          if (*(unsigned char *)(a1 + 4)) {
            int v6 = 7;
          }
          else {
            int v6 = 2;
          }
          return CIGLGetFormatInfo(a2, v6);
        case 9:
        case 13:
          if (*(unsigned char *)(a1 + 4)) {
            int v6 = 6;
          }
          else {
            int v6 = 1;
          }
          return CIGLGetFormatInfo(a2, v6);
        case 17:
          int v6 = 26;
          return CIGLGetFormatInfo(a2, v6);
        case 19:
          int v6 = 24;
          return CIGLGetFormatInfo(a2, v6);
        case 20:
          goto LABEL_27;
        default:
          return result;
      }
      return result;
    }
    if (v4 > 783)
    {
      switch(v4)
      {
        case 1793:
        case 1794:
        case 1795:
        case 1797:
          goto LABEL_32;
        case 1796:
        case 1798:
          goto LABEL_31;
        case 1799:
          int v6 = 21;
          return CIGLGetFormatInfo(a2, v6);
        case 1800:
        case 1804:
          int v6 = 3;
          return CIGLGetFormatInfo(a2, v6);
        case 1801:
        case 1802:
        case 1803:
          return result;
        default:
          if (v4 == 784)
          {
            int v6 = 27;
          }
          else
          {
            if (v4 != 785) {
              return result;
            }
            int v6 = 28;
          }
          break;
      }
      return CIGLGetFormatInfo(a2, v6);
    }
    if (v4 <= 772)
    {
      if (v4 != 533)
      {
        if (v4 != 771) {
          return result;
        }
        goto LABEL_32;
      }
LABEL_27:
      int v6 = 25;
      return CIGLGetFormatInfo(a2, v6);
    }
    if (v4 != 773)
    {
      if (v4 != 774) {
        return result;
      }
LABEL_31:
      int v6 = 17;
      return CIGLGetFormatInfo(a2, v6);
    }
    goto LABEL_32;
  }
  if (v4 <= 2304)
  {
    switch(v4)
    {
      case 2049:
      case 2050:
      case 2051:
      case 2053:
        int v6 = 14;
        return CIGLGetFormatInfo(a2, v6);
      case 2052:
      case 2054:
        int v6 = 18;
        return CIGLGetFormatInfo(a2, v6);
      case 2055:
        int v6 = 22;
        return CIGLGetFormatInfo(a2, v6);
      case 2056:
      case 2060:
        int v6 = 4;
        return CIGLGetFormatInfo(a2, v6);
      default:
        return result;
    }
  }
  else
  {
    if (v4 > 2566)
    {
      if (v4 <= 3332)
      {
        if (v4 == 2567)
        {
          int v6 = 8;
          return CIGLGetFormatInfo(a2, v6);
        }
        if (v4 != 3331) {
          return result;
        }
        goto LABEL_32;
      }
      if (v4 != 3333)
      {
        if (v4 != 3334) {
          return result;
        }
        goto LABEL_31;
      }
LABEL_32:
      int v6 = 13;
      return CIGLGetFormatInfo(a2, v6);
    }
    switch(v4)
    {
      case 2305:
      case 2306:
      case 2307:
      case 2309:
        int v6 = 15;
        return CIGLGetFormatInfo(a2, v6);
      case 2308:
      case 2310:
        int v6 = 19;
        return CIGLGetFormatInfo(a2, v6);
      case 2311:
        int v6 = 23;
        return CIGLGetFormatInfo(a2, v6);
      case 2312:
      case 2316:
        int v6 = 5;
        return CIGLGetFormatInfo(a2, v6);
      default:
        return result;
    }
  }
  return result;
}

void ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 48);
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v32 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  memset(v28, 0, sizeof(v28));
  GetMacroContext(v2[23], v28);
  if (!LOBYTE(v28[0]))
  {
    int v3 = ci_logger_render();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  v58.width = (double)*(unint64_t *)(a1 + 64);
  v58.height = (double)*(unint64_t *)(a1 + 72);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CI::TextureManager::_find_match_for_surface((CI::TextureManager *)v2, *(IOSurfaceRef *)(a1 + 56), v58);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(*(void *)(v4 + 8) + 24);
  if (v5)
  {
    int v6 = v57;
    uint64_t v7 = *((void *)&v28[0] + 1);
    (*(void (**)(void *__return_ptr))(*(void *)v5 + 24))(v27);
    v6(v7, LODWORD(v27[0]));
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(*(void *)(v4 + 8) + 24);
    int v26 = 0;
    if (v8)
    {
      (*(void (**)(void *__return_ptr))(*(void *)v8 + 24))(v27);
      uint64_t v4 = *(void *)(a1 + 32);
      if (LODWORD(v27[0]))
      {
        uint64_t v9 = (void (*)(uint64_t, uint64_t, void))*((void *)&v29 + 1);
        uint64_t v10 = *((void *)&v28[0] + 1);
        (*(void (**)(void *__return_ptr))(**(void **)(*(void *)(v4 + 8) + 24) + 24))(v27);
        v9(v10, 3553, LODWORD(v27[0]));
        ((void (*)(void, uint64_t, void, uint64_t, int *))v54)(*((void *)&v28[0] + 1), 3553, 0, 4099, &v26);
        (*((void (**)(void, uint64_t, void))&v29 + 1))(*((void *)&v28[0] + 1), 3553, 0);
        uint64_t v4 = *(void *)(a1 + 32);
      }
    }
  }
  else
  {
    int v26 = 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v4 + 8) + 24);
  if (!v11
    || *(void *)(v11 + 64)
    || !CI_RECYCLE_OPENGL_TEXTURES()
    || v26 != *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 40))
  {
    operator new();
  }
  uint64_t v16 = *(uint64_t **)(a1 + 80);
  uint64_t v17 = *v16;
  uint64x2_t v18 = *(uint64x2_t *)(v16 + 1);
  int v19 = *v16;
  if (v19 == -2147483647)
  {
    if (HIDWORD(v17) == -2147483647 && *(_OWORD *)&v18 == __PAIR128__(0xFFFFFFFFLL, 0xFFFFFFFFLL))
    {
      uint64_t v20 = (float64x2_t *)MEMORY[0x1E4F1DB10];
      goto LABEL_28;
    }
LABEL_29:
    v23.i64[0] = (int)v17;
    v23.i64[1] = SHIDWORD(v17);
    float64x2_t v22 = vcvtq_f64_s64(v23);
    float64x2_t v21 = vcvtq_f64_u64(v18);
    goto LABEL_30;
  }
  if (v19 != 0x7FFFFFFF || HIDWORD(v17) != 0x7FFFFFFF || *(_OWORD *)&v18 != 0) {
    goto LABEL_29;
  }
  uint64_t v20 = (float64x2_t *)MEMORY[0x1E4F1DB20];
LABEL_28:
  float64x2_t v22 = *v20;
  float64x2_t v21 = v20[1];
LABEL_30:
  int v24 = *(float64x2_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  v24[2] = v22;
  v24[3] = v21;
  uint64_t v25 = (void *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 64);
  *v25 += *(void *)(a1 + 88);
  *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 72) = *(unsigned char *)(a1 + 96);
  uint8x16_t v12 = *(uint64_t (****)(void))(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v12 && (**v12)(v12) && *(void *)(a1 + 88) >= 2uLL)
  {
    unint64_t v13 = 1;
    do
    {
      uint64_t v14 = *(uint64_t (****)(void))(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      int v15 = (const void *)(**v14)(v14);
      RetainSurfaceFromCache(v15);
      ++v13;
    }
    while (v13 < *(void *)(a1 + 88));
  }
}

uint64_t CI::GLTextureManager::create_intermediate(void *a1, int *a2, uint64_t a3, CGFloat *a4, uint64_t a5, uint64_t a6, char a7)
{
  CGFloat v14 = *a4;
  CGFloat v15 = a4[1];
  CGFloat v16 = a4[2];
  CGFloat v17 = a4[3];
  v52.origin.x = *a4;
  v52.origin.y = v15;
  v52.size.width = v16;
  v52.size.height = v17;
  if (CGRectIsNull(v52)) {
    return 0;
  }
  v53.origin.x = v14;
  v53.origin.y = v15;
  v53.size.width = v16;
  v53.size.height = v17;
  if (!CGRectIsInfinite(v53))
  {
    v54.origin.x = v14;
    v54.origin.y = v15;
    v54.size.width = v16;
    v54.size.height = v17;
    CGRect v55 = CGRectInset(v54, 0.000001, 0.000001);
    CGRect v56 = CGRectIntegral(v55);
    *(_DWORD *)long long v51 = (int)v56.origin.x;
    *(_DWORD *)&v51[4] = (int)v56.origin.y;
    *(void *)&v51[8] = (unint64_t)v56.size.width;
    *(void *)&v51[16] = (unint64_t)v56.size.height;
    long long v50 = *(_OWORD *)&v51[8];
    if ((unint64_t)v56.size.width) {
      BOOL v18 = (unint64_t)v56.size.height == 0;
    }
    else {
      BOOL v18 = 1;
    }
    if (!v18) {
      goto LABEL_10;
    }
    return 0;
  }
  *(_OWORD *)long long v51 = IRectInfinite;
  *(void *)&v51[16] = 0xFFFFFFFFLL;
  long long v50 = *(_OWORD *)&v51[8];
LABEL_10:
  int v48 = *a2;
  __int16 v49 = 0;
  if ((a2[1] & 2) != 0) {
    LOBYTE(v49) = 1;
  }
  v45[0] = 0;
  v45[1] = v45;
  v45[2] = 0x3802000000;
  v45[3] = __Block_byref_object_copy__21;
  v45[4] = __Block_byref_object_dispose__21;
  uint64_t v46 = 0;
  int v47 = 0;
  int API = CIEAGLContextGetAPI(*(void **)(a1[21] + 392));
  uint64_t v46 = CI::gl_format_info_for_format((uint64_t)&v48, API);
  int v47 = v21;
  uint64_t v41 = 0;
  long long v42 = &v41;
  uint64_t v43 = 0x2000000000;
  uint64_t v44 = 0;
  uint64_t v37 = 0;
  long long v38 = &v37;
  uint64_t v39 = 0x2000000000;
  uint64_t v40 = 0;
  uint64_t v33 = 0;
  long long v34 = &v33;
  uint64_t v35 = 0x2000000000;
  char v36 = 0;
  float64x2_t v22 = a1[13];
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 0x40000000;
  v25[2] = ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorENS_17NodeContentDigestERK6CGRectmmb_block_invoke;
  v25[3] = &unk_1E5773900;
  v25[8] = a1;
  v25[9] = a3;
  v25[10] = a2;
  char v32 = a7;
  v25[4] = v45;
  v25[5] = &v37;
  uint64_t v27 = *(void *)&v51[16];
  long long v26 = *(_OWORD *)v51;
  long long v28 = v50;
  v25[6] = &v33;
  v25[7] = &v41;
  uint64_t v29 = a5;
  long long v30 = a4;
  uint64_t v31 = a6;
  dispatch_sync(v22, v25);
  uint64_t v23 = v38[3];
  if (v23) {
    uint64_t v19 = (*(uint64_t (**)(void *, int *, uint64_t, void, unsigned char *, uint64_t, void))(*a1 + 48))(a1, a2, v23, 0, v51, a6, *((unsigned __int8 *)v34 + 24));
  }
  else {
    uint64_t v19 = v42[3];
  }
  _Block_object_dispose(&v33, 8);
  _Block_object_dispose(&v37, 8);
  _Block_object_dispose(&v41, 8);
  _Block_object_dispose(v45, 8);
  return v19;
}

void ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorENS_17NodeContentDigestERK6CGRectmmb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  memset(v26, 0, 512);
  GetMacroContext(*(void **)(v2 + 184), v26);
  if (!LOBYTE(v26[0]))
  {
    int v3 = ci_logger_render();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  if (CI_IOSURFACE_INTERMEDIATES())
  {
    CFStringRef v4 = CFStringCreateWithFormat(0, 0, @"%llX(%04x,%04x,%04x)", *(void *)(a1 + 72), *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 44), *(unsigned int *)(*(void *)(*(void *)(a1 + 32) + 8) + 48));
    int v5 = CI::PixelFormatType_from_format(**(_DWORD **)(a1 + 80));
    if (*(unsigned char *)(a1 + 152))
    {
      long long v24 = *(_OWORD *)(a1 + 88);
      uint64_t v25 = *(void *)(a1 + 104);
      LODWORD(v22) = 0;
      int v6 = *(void **)(v2 + 168);
      uint64_t v7 = v6[47];
      *((void *)&v22 + 1) = 0;
      uint64_t v23 = v7;
      int v8 = (*(uint64_t (**)(void *))(*v6 + 272))(v6);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = GetValidSurfaceFromCache(&v24, v5, &v22, v8, 0, *(_DWORD *)(*(void *)(a1 + 80) + 12), (uint64_t)v4);
    }
    else
    {
      theArray = CFArrayCreateMutable(0, *(void *)(*(void *)(v2 + 136) + 16), 0);
      if (CI_RECYCLE_OPENGL_TEXTURES())
      {
        uint64_t v10 = *(void *)(v2 + 136);
        for (uint64_t i = *(void *)(v10 + 8); i != v10; uint64_t i = *(void *)(i + 8))
        {
          uint64_t v12 = *(void *)(i + 16);
          if (!(*(uint64_t (**)(uint64_t))(*(void *)v12 + 16))(v12)
            && *(double *)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12) + 16) == (double)*(unint64_t *)(a1 + 112)
            && *(double *)((*(uint64_t (**)(uint64_t))(*(void *)v12 + 32))(v12) + 24) == (double)*(unint64_t *)(a1 + 120))
          {
            unint64_t v13 = (const void *)(**(uint64_t (***)(uint64_t))v12)(v12);
            CFArrayAppendValue(theArray, v13);
          }
        }
      }
      uint64_t v14 = *(void *)(a1 + 128);
      long long v20 = *(_OWORD *)(a1 + 88);
      uint64_t v21 = *(void *)(a1 + 104);
      LODWORD(v18) = 0;
      CGFloat v15 = *(void **)(v2 + 168);
      uint64_t v16 = v15[47];
      *((void *)&v18 + 1) = 0;
      uint64_t v19 = v16;
      int v17 = (*(uint64_t (**)(void *))(*v15 + 272))(v15);
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = GetSurfaceFromCache(&v20, v14, v14, v5, &v18, v17, 0, *(_DWORD *)(*(void *)(a1 + 80) + 12), (uint64_t)v4, *(void *)(*(void *)(a1 + 48) + 8) + 24, theArray);
      CFRelease(theArray);
    }
    CFRelease(v4);
  }
  else if (!*(unsigned char *)(a1 + 152))
  {
    operator new();
  }
}

uint64_t CI::GLTextureManager::wiredBytes(CI::GLTextureManager *this)
{
  uint64_t v5 = 0;
  int v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  float v1 = *((void *)this + 13);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZN2CI16GLTextureManager10wiredBytesEv_block_invoke;
  v4[3] = &unk_1E5773928;
  v4[4] = &v5;
  v4[5] = this;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZN2CI16GLTextureManager10wiredBytesEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 136);
  uint64_t v2 = *(void *)(v1 + 8);
  if (v2 != v1)
  {
    uint64_t v3 = result;
    do
    {
      uint64_t v4 = *(void *)(v2 + 16);
      uint64_t v5 = (__IOSurface *)(**(uint64_t (***)(uint64_t))v4)(v4);
      uint64_t result = SurfaceIsVolatileEmpty(v5);
      if ((result & 1) == 0)
      {
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
        if (!result)
        {
          int v6 = (__IOSurface *)(**(uint64_t (***)(uint64_t))v4)(v4);
          uint64_t result = SurfaceGetMemorySize(v6);
          *(void *)(*(void *)(*(void *)(v3 + 32) + 8) + 24) += result;
        }
      }
      uint64_t v2 = *(void *)(v2 + 8);
    }
    while (v2 != v1);
  }
  return result;
}

void CI::GLTextureManager::purge_intermediates(CI::GLTextureManager *this, uint64_t a2)
{
  uint64_t v2 = *((void *)this + 12);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZN2CI16GLTextureManager19purge_intermediatesEm_block_invoke;
  v3[3] = &__block_descriptor_tmp_9_0;
  v3[4] = this;
  v3[5] = a2;
  dispatch_async(v2, v3);
}

void ___ZN2CI16GLTextureManager19purge_intermediatesEm_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(CI::TextureManager **)(a1 + 32);
  if (CI_RECYCLE_OPENGL_TEXTURES() && CI_IOSURFACE_INTERMEDIATES())
  {
    uint64_t v3 = *((void *)v2 + 13);
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = ___ZN2CI16GLTextureManager19purge_intermediatesEm_block_invoke_2;
    v5[3] = &__block_descriptor_tmp_8_2;
    uint64_t v4 = *(void *)(a1 + 40);
    _OWORD v5[4] = v2;
    v5[5] = v4;
    dispatch_sync(v3, v5);
  }
  CI::TextureManager::purge_intermediates(v2);
}

void *___ZN2CI16GLTextureManager19purge_intermediatesEm_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 136);
  unint64_t v3 = v2[2];
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  v10[2] = 0;
  for (uint64_t i = (void *)v2[1]; i != v2; uint64_t i = (void *)v7[1])
  {
    if (v3 <= *(void *)(a1 + 40) || (uint64_t v6 = i[2], (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6)))
    {
      uint64_t v7 = i;
    }
    else
    {
      long long v11 = *(_OWORD *)(v6 + 8);
      (**(void (***)(uint64_t, long long *))v1)(v1, &v11);
      long long v11 = 0uLL;
      CFRelease(*(CFTypeRef *)(v6 + 24));
      (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
      uint64_t v7 = (void *)i[1];
      if (v7 == v2)
      {
LABEL_14:
        std::list<CI::attached_surface_t *>::splice((uint64_t)v10, v10, (uint64_t)v2, i, v2);
        return std::__list_imp<CI::attached_surface_t *>::clear(v10);
      }
      --v3;
      while (v3 > *(void *)(a1 + 40))
      {
        uint64_t v8 = v7[2];
        if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8)) {
          break;
        }
        long long v11 = *(_OWORD *)(v8 + 8);
        (**(void (***)(uint64_t, long long *))v1)(v1, &v11);
        long long v11 = 0uLL;
        CFRelease(*(CFTypeRef *)(v8 + 24));
        (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
        uint64_t v7 = (void *)v7[1];
        --v3;
        if (v7 == v2) {
          goto LABEL_14;
        }
      }
      std::list<CI::attached_surface_t *>::splice((uint64_t)v10, v10, (uint64_t)v2, i, v7);
    }
  }
  return std::__list_imp<CI::attached_surface_t *>::clear(v10);
}

uint64_t CI::GLTextureManager::_release_intermediate(uint64_t a1, uint64_t a2)
{
  if (!CI_RECYCLE_OPENGL_TEXTURES() || (uint64_t result = CI_IOSURFACE_INTERMEDIATES(), !result))
  {
    return CI::TextureManager::_release_intermediate(a1, a2);
  }
  return result;
}

void CI::GLTextureManager::release_texture(CI::GLTextureManager *this, Texture a2)
{
  if (*(_DWORD *)a2.var0.var0)
  {
    var0 = (int *)a2.var0.var0;
    unint64_t v3 = *(void **)(*((void *)this + 21) + 416);
    uint64_t v4 = (CI::Context *)CI_IOSURFACE_INTERMEDIATES();
    if (v4)
    {
      int v5 = *var0;
      uint64_t v6 = CI::Context::render_completion_queue(v4);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ___ZNK2CI16GLTextureManager15release_textureENS_7TextureE_block_invoke;
      block[3] = &__block_descriptor_tmp_10_0;
      block[4] = v3;
      int v35 = v5;
      dispatch_async(v6, block);
    }
    else
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v15 = 0u;
      memset(v14, 0, sizeof(v14));
      GetMacroContext(v3, v14);
      if (!LOBYTE(v14[0]))
      {
        uint64_t v7 = ci_logger_render();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          CI::GLTextureManager::release_texture((uint64_t)v3, v7, v8, v9, v10, v11, v12, v13);
        }
      }
      (*((void (**)(void, uint64_t, int *))&v15 + 1))(*((void *)&v14[0] + 1), 1, var0);
    }
  }
}

uint64_t ___ZNK2CI16GLTextureManager15release_textureENS_7TextureE_block_invoke(uint64_t a1)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  memset(v4, 0, sizeof(v4));
  GetMacroContext(*(void **)(a1 + 32), v4);
  if (!LOBYTE(v4[0]))
  {
    uint64_t v2 = ci_logger_render();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  v24(*((void *)&v4[0] + 1), *(unsigned int *)(a1 + 40));
  return (*((uint64_t (**)(void, uint64_t, uint64_t))&v5 + 1))(*((void *)&v4[0] + 1), 1, a1 + 40);
}

uint64_t CI::GLTextureManager::upload_texture(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  memset(v23, 0, sizeof(v23));
  GetMacroContext(*(void **)(*(void *)(a1 + 168) + 392), v23);
  if (!LOBYTE(v23[0]))
  {
    long long v15 = ci_logger_render();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      CI::GLTextureManager::upload_texture();
    }
  }
  unsigned int v22 = 0;
  ((void (*)(void, uint64_t, unsigned int *))v45)(*((void *)&v23[0] + 1), 32873, &v22);
  unsigned int v21 = 0;
  (*((void (**)(void, uint64_t, unsigned int *))&v42 + 1))(*((void *)&v23[0] + 1), 1, &v21);
  (*((void (**)(void, uint64_t, void))&v24 + 1))(*((void *)&v23[0] + 1), 3553, v21);
  int API = CIEAGLContextGetAPI(*(void **)(*(void *)(a1 + 168) + 392));
  unint64_t v17 = CI::gl_format_info_for_format(a8, API);
  v52(*((void *)&v23[0] + 1), 3553, 0, v17, a5, a6, 0, HIDWORD(v17), v18, a4);
  (*((void (**)(void, uint64_t, void))&v24 + 1))(*((void *)&v23[0] + 1), 3553, v22);
  long long v19 = malloc_type_malloc(0x20uLL, 0x10C20408CADBB15uLL);
  *long long v19 = v21;
  v19[1] = 3553;
  *((void *)v19 + 1) = 0;
  v19[4] = a3;
  v19[5] = 1;
  *((unsigned char *)v19 + 24) = 0;
  CI::TextureManager::append_to_lru(a1, a2, (uint64_t)v19);
  return v21;
}

uint64_t CI::GLTextureManager::texture_for_CGImage(void **a1, CGImage *a2, uint64_t a3)
{
  long long v6 = (unsigned int *)((uint64_t (*)(void **))(*a1)[1])(a1);
  if (!v6)
  {
    size_t Width = CGImageGetWidth(a2);
    size_t Height = CGImageGetHeight(a2);
    size_t BytesPerRow = CGImageGetBytesPerRow(a2);
    size_t BitsPerPixel = CGImageGetBitsPerPixel(a2);
    if (Width > (*(uint64_t (**)(void))(*a1[21] + 440))()
      || Height > (*(uint64_t (**)(void *))(*a1[21] + 440))(a1[21]))
    {
      x_log("Cannot handle a (%lu x %lu) sized texture with the given GLES context!\n", Width, Height);
      return 0;
    }
    DataProvider = CGImageGetDataProvider(a2);
    uint64_t v14 = CGDataProviderRetainBytePtr();
    if (v14)
    {
      long long v16 = (char *)v14;
      CFDataRef v27 = 0;
    }
    else
    {
      CFDataRef v19 = CGDataProviderCopyData(DataProvider);
      if (!v19) {
        return 0;
      }
      CFDataRef v20 = v19;
      if (CFDataGetLength(v19) < 1 || (BytePtr = CFDataGetBytePtr(v20)) == 0)
      {
        uint64_t v7 = 0;
LABEL_24:
        CFRelease(v20);
        return v7;
      }
      long long v16 = (char *)BytePtr;
      CFDataRef v27 = v20;
    }
    size_t v17 = (BitsPerPixel >> 3) * Width;
    unint64_t v18 = (v17 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (BytesPerRow == v18)
    {
      uint64_t v7 = CI::GLTextureManager::upload_texture((uint64_t)a1, (uint64_t)a2, 1, (uint64_t)v16, Width, Height, v15, a3);
    }
    else
    {
      __dst = (char *)malloc_type_malloc(v18 * Height, 0x4F3E6C1FuLL);
      if (__dst)
      {
        uint64_t v25 = a3;
        if (Height)
        {
          size_t v23 = Height;
          long long v24 = __dst;
          do
          {
            memcpy(v24, v16, v17);
            v16 += BytesPerRow;
            v24 += v18;
            --v23;
          }
          while (v23);
        }
        uint64_t v7 = CI::GLTextureManager::upload_texture((uint64_t)a1, (uint64_t)a2, 1, (uint64_t)__dst, Width, Height, v22, v25);
        free(__dst);
      }
      else
      {
        uint64_t v7 = 0;
      }
    }
    CFDataRef v20 = v27;
    if (!v27)
    {
      CGDataProviderReleaseBytePtr();
      return v7;
    }
    goto LABEL_24;
  }
  return *v6;
}

uint64_t CI::GLTextureManager::find_attached_surface(CI::GLTextureManager *this, __IOSurface *a2, int a3, int a4, int a5)
{
  long long v6 = (void *)*((void *)this + 22);
  for (uint64_t i = (void *)v6[1]; ; uint64_t i = (void *)i[1])
  {
    if (i == v6) {
      return 0;
    }
    uint64_t v8 = i[2];
    uint64_t v13 = v8;
    if (*(__IOSurface **)v8 == a2
      && *(unsigned __int8 *)(v8 + 12) == a3
      && *(_DWORD *)(v8 + 20) == a5
      && (!a3 || *(_DWORD *)(v8 + 16) == a4))
    {
      break;
    }
  }
  std::list<CI::attached_surface_t *>::remove(v6, &v13);
  long long v10 = (uint64_t *)*((void *)this + 22);
  long long v11 = operator new(0x18uLL);
  v11[2] = v13;
  uint64_t v12 = *v10;
  *long long v11 = *v10;
  v11[1] = v10;
  *(void *)(v12 + 8) = v11;
  *long long v10 = (uint64_t)v11;
  ++v10[2];
  return v13;
}

void *___ZN2CI16GLTextureManager16attach_IOSurfaceEP11__IOSurfacebiRKNS_17TextureDescriptorEiiib_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(CI::GLTextureManager **)(a1 + 32);
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  unint64_t v3 = (void *)((char *)v2 + 168);
  GetMacroContext(*(void **)(*((void *)v2 + 21) + 392), &v26);
  if (!(_BYTE)v26)
  {
    uint64_t v4 = ci_logger_render();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      CI::GLTextureManager::upload_texture();
    }
  }
  uint64_t attached_surface = CI::GLTextureManager::find_attached_surface(v2, *(__IOSurface **)(a1 + 40), *(unsigned __int8 *)(a1 + 72), *(_DWORD *)(a1 + 56), **(_DWORD **)(a1 + 48));
  ((void (*)(void, void))v27)(*((void *)&v26 + 1), (*(_DWORD *)(a1 + 60) + 33984));
  if (attached_surface)
  {
    uint64_t result = (void *)(*((uint64_t (**)(void, uint64_t, void))&v30 + 1))(*((void *)&v26 + 1), 3553, *(unsigned int *)(attached_surface + 8));
    *(unsigned char *)(attached_surface + 24) |= *(unsigned char *)(a1 + 73);
    return result;
  }
  uint64_t v7 = malloc_type_malloc(0x20uLL, 0x102004016E47894uLL);
  unsigned int v25 = 0;
  (*((void (**)(void, uint64_t, unsigned int *))&v48 + 1))(*((void *)&v26 + 1), 1, &v25);
  (*((void (**)(void, uint64_t, void))&v30 + 1))(*((void *)&v26 + 1), 3553, v25);
  v58(*((void *)&v26 + 1), 3553, 10240, *(unsigned int *)(a1 + 64));
  v58(*((void *)&v26 + 1), 3553, 10241, *(unsigned int *)(a1 + 64));
  v58(*((void *)&v26 + 1), 3553, 10242, *(unsigned int *)(a1 + 68));
  v58(*((void *)&v26 + 1), 3553, 10243, *(unsigned int *)(a1 + 68));
  size_t Width = IOSurfaceGetWidth(*(IOSurfaceRef *)(a1 + 40));
  size_t Height = IOSurfaceGetHeight(*(IOSurfaceRef *)(a1 + 40));
  uint64_t v10 = *(void *)(a1 + 48);
  int API = CIEAGLContextGetAPI(*(void **)(*v3 + 392));
  uint64_t v13 = CI::gl_format_info_for_format(v10, API);
  uint64_t v14 = "GLTextureManager::attach_IOSurface unsupported format %s!\n";
  if (v13)
  {
    size_t HeightOfPlane = Height;
    if (HIDWORD(v13))
    {
      signed int v16 = v12;
      if (v12)
      {
        if (*(unsigned char *)(a1 + 72))
        {
          size_t WidthOfPlane = IOSurfaceGetWidthOfPlane(*(IOSurfaceRef *)(a1 + 40), *(int *)(a1 + 56));
          size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(*(IOSurfaceRef *)(a1 + 40), *(int *)(a1 + 56));
        }
        else
        {
          size_t WidthOfPlane = Width;
        }
        uint64_t v23 = HeightOfPlane;
        size_t v17 = *(void **)(*v3 + 392);
        unint64_t v18 = *(__IOSurface **)(a1 + 40);
        unsigned int v19 = *(_DWORD *)(a1 + 56);
        ((void (*)(void, uint64_t))v54)(*((void *)&v26 + 1), 7936);
        if (CIEAGLContextTexImageIOSurface(v17, 0xDE1u, WidthOfPlane, v23, v13, SHIDWORD(v13), v16, v18, v19)) {
          goto LABEL_15;
        }
        uint64_t v14 = "CIEAGLContextTexImageIOSurface failed for %s!\n";
      }
    }
  }
  CFDataRef v20 = CI::name_for_format(**(_DWORD **)(a1 + 48));
  x_log(v14, v20);
LABEL_15:
  CFRetain(*(CFTypeRef *)(a1 + 40));
  *(void *)uint64_t v7 = *(void *)(a1 + 40);
  void v7[2] = v25;
  *((unsigned char *)v7 + 12) = *(unsigned char *)(a1 + 72);
  _OWORD v7[4] = *(_DWORD *)(a1 + 56);
  void v7[5] = **(_DWORD **)(a1 + 48);
  *((unsigned char *)v7 + 24) = *(unsigned char *)(a1 + 73);
  unsigned int v21 = (uint64_t *)*((void *)v2 + 22);
  uint64_t result = operator new(0x18uLL);
  result[1] = v21;
  result[2] = v7;
  uint64_t v22 = *v21;
  *uint64_t result = *v21;
  *(void *)(v22 + 8) = result;
  *unsigned int v21 = (uint64_t)result;
  ++v21[2];
  return result;
}

void *___ZN2CI16GLTextureManager23purge_attached_surfacesEm_block_invoke(void *result)
{
  uint64_t v1 = result[4];
  uint64_t v2 = *(void *)(v1 + 176);
  unint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    unint64_t v4 = result[5];
    long long v54 = &v54;
    long long v55 = &v54;
    uint64_t v56 = 0;
    uint64_t v5 = *(void *)(v2 + 8);
    if (v5 == v2)
    {
      uint64_t v7 = 0;
      uint64_t v6 = 0;
      uint64_t v8 = &v54;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v7 = 0;
      uint64_t v8 = &v54;
      do
      {
        uint64_t v9 = *(void *)(v5 + 16);
        if (!*(unsigned char *)(v9 + 24))
        {
          uint64_t v10 = operator new(0x18uLL);
          v10[1] = &v54;
          v10[2] = v9;
          *uint64_t v10 = v8;
          v8[1] = v10;
          ++v7;
          uint64_t v6 = (v6 + 1);
          uint64_t v8 = v10;
          long long v54 = v10;
          uint64_t v56 = v7;
        }
        uint64_t v5 = *(void *)(v5 + 8);
      }
      while (v5 != v2);
    }
    if (v3 >= v4) {
      unint64_t v11 = v3 - v4;
    }
    else {
      unint64_t v11 = 0;
    }
    if (v11 > (int)v6)
    {
      for (uint64_t i = *(void *)(v2 + 8); i != v2; uint64_t i = *(void *)(i + 8))
      {
        uint64_t v13 = *(void *)(i + 16);
        if (*(unsigned char *)(v13 + 24)) {
          BOOL v14 = v11 > (int)v6;
        }
        else {
          BOOL v14 = 0;
        }
        if (v14)
        {
          uint64_t v15 = operator new(0x18uLL);
          v15[1] = &v54;
          v15[2] = v13;
          *uint64_t v15 = v8;
          v8[1] = v15;
          ++v7;
          uint64_t v6 = (v6 + 1);
          uint64_t v8 = v15;
          long long v54 = v15;
          uint64_t v56 = v7;
        }
      }
    }
    if (v6)
    {
      signed int v16 = malloc_type_malloc(4 * (int)v6, 0x100004052888210uLL);
      size_t v17 = v16;
      unint64_t v18 = v55;
      if (v55 != &v54)
      {
        unsigned int v19 = v16;
        do
        {
          CFDataRef v20 = (CFTypeRef *)v18[2];
          v22[0] = v20;
          *v19++ = *((_DWORD *)v20 + 2);
          CFRelease(*v20);
          *(void *)v22[0] = 0;
          std::list<CI::attached_surface_t *>::remove(*(void **)(v1 + 176), v22);
          free(v22[0]);
          unint64_t v18 = (void *)v18[1];
        }
        while (v18 != &v54);
      }
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      *(_OWORD *)uint64_t v22 = 0u;
      long long v23 = 0u;
      GetMacroContext(*(void **)(v1 + 184), v22);
      if (!LOBYTE(v22[0]))
      {
        unsigned int v21 = ci_logger_render();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
        }
      }
      (*((void (**)(void *, uint64_t, void *))&v35 + 1))(v22[1], v6, v17);
      free(v17);
    }
    return std::__list_imp<CI::attached_surface_t *>::clear(&v54);
  }
  return result;
}

void CI::GLMainProgram::GLMainProgram(uint64_t a1, const CI::Context *a2, uint64_t a3, const char *a4, const char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = CI::MainProgram::MainProgram((int64x2_t *)a1, a4, a5, a6, a7);
  v9[6].i64[0] = (uint64_t)&unk_1EE456A80;
  atomic_fetch_add(&dword_1EB466F58[13], 1u);
  v9->i64[0] = (uint64_t)&unk_1EE458F80;
  v9[6].i64[0] = (uint64_t)&unk_1EE458FE8;
  v9[8].i64[0] = 0;
  v9[8].i64[1] = 0;
  *(void *)(a1 + 128) = CIEAGLContextRetain(*((void **)a2 + 49));
  *(_DWORD *)(a1 + 40) = (*(uint64_t (**)(const CI::Context *))(*(void *)a2 + 272))(a2);
  *(_DWORD *)(a1 + 136) = *((_DWORD *)a2 + 108);
  int v10 = CI::MainProgram::vector_arguments_size((CI::MainProgram *)a1, a2);
  if ((*(uint64_t (**)(const CI::Context *))(*(void *)a2 + 480))(a2) < (unint64_t)v10)
  {
    int API = CIEAGLContextGetAPI(*(void **)(a1 + 128));
    int v12 = CI::MainProgram::vector_arguments_size((CI::MainProgram *)a1, a2);
    uint64_t v13 = (*(uint64_t (**)(const CI::Context *))(*(void *)a2 + 480))(a2);
    x_log("Program exceeds GLES%d uniform size limit. (%d > %zu)\n", API, v12, v13);
  }
  *(void *)(a1 + 104) = (int)CI::MainProgram::num_arguments((CI::MainProgram *)a1);
  operator new[]();
}

void CI::GLMainProgram::~GLMainProgram(CI::GLMainProgram *this)
{
  *(void *)this = &unk_1EE458F80;
  *((void *)this + 12) = &unk_1EE458FE8;
  if (*((_DWORD *)this + 35))
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v6 = 0u;
    memset(v5, 0, sizeof(v5));
    GetMacroContext(*((void **)this + 16), v5);
    if (!LOBYTE(v5[0]))
    {
      uint64_t v2 = ci_logger_render();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
        ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
      }
    }
    (*((void (**)(void, void))&v6 + 1))(*((void *)&v5[0] + 1), *((unsigned int *)this + 35));
  }
  CIEAGLContextRelease(*((void **)this + 16));
  uint64_t v3 = *((void *)this + 14);
  if (v3) {
    MEMORY[0x199702390](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 15);
  if (v4) {
    MEMORY[0x199702390](v4, 0x1000C8052888210);
  }
  *((void *)this + 12) = &unk_1EE456A80;
  atomic_fetch_add(&dword_1EB466F58[13], 0xFFFFFFFF);
  CI::MainProgram::~MainProgram(this);
}

{
  uint64_t vars8;

  CI::GLMainProgram::~GLMainProgram(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::GLMainProgram::~GLMainProgram(CI::GLMainProgram *this)
{
}

{
  uint64_t vars8;

  CI::GLMainProgram::~GLMainProgram((CI::GLMainProgram *)((char *)this - 96));

  JUMPOUT(0x1997023B0);
}

void CI::GLMainProgram::compile(uint64_t a1, int a2)
{
  if (CI_VERBOSE_SIGNPOSTS())
  {
    uint64_t v4 = ci_signpost_log_compile();
    os_signpost_id_t v5 = a2 | ((unint64_t)*(unsigned int *)(a1 + 40) << 32);
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      long long v6 = v4;
      if (os_signpost_enabled(v4))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "compile_gl", "", buf, 2u);
      }
    }
  }
  TimerBase::TimerBase((uint64_t)v58, *(unsigned int *)(a1 + 40), a2, (uint64_t)"compile_gl", 28);
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)buf = 0u;
  long long v26 = 0u;
  GetMacroContext(*(void **)(a1 + 128), buf);
  if (!buf[0])
  {
    long long v8 = ci_logger_render();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  uint64_t v9 = *(unsigned int *)(a1 + 136);
  uint64_t v10 = CI::GLContext::compile_shader(*(unsigned int *)(a1 + 40), a2, *(void **)(a1 + 128), *(void *)(a1 + 56), 35632);
  uint64_t v11 = ((uint64_t (*)(void))v35)(*(void *)&buf[8]);
  (*((void (**)(void, uint64_t, uint64_t))&v26 + 1))(*(void *)&buf[8], v11, v9);
  (*((void (**)(void, uint64_t, uint64_t))&v26 + 1))(*(void *)&buf[8], v11, v10);
  (*((void (**)(void, uint64_t, void, const char *))&v27 + 1))(*(void *)&buf[8], v11, 0, "position");
  (*((void (**)(void, uint64_t, uint64_t, const char *))&v27 + 1))(*(void *)&buf[8], v11, 1, "texcoord");
  if (CI_VERBOSE_SIGNPOSTS())
  {
    long long v12 = ci_signpost_log_compile();
    os_signpost_id_t v13 = a2 | ((unint64_t)*(unsigned int *)(a1 + 40) << 32);
    if (v13 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      long long v14 = v12;
      if (os_signpost_enabled(v12))
      {
        *(_WORD *)long long v23 = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v13, "link_shader", "", v23, 2u);
      }
    }
  }
  TimerBase::TimerBase((uint64_t)v23, *(unsigned int *)(a1 + 40), a2, (uint64_t)"link_shader", 0);
  v57(*(void *)&buf[8], v11);
  if (CI_VERBOSE_SIGNPOSTS())
  {
    long long v15 = ci_signpost_log_compile();
    os_signpost_id_t v16 = v24;
    if (v24 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      long long v17 = v15;
      if (os_signpost_enabled(v15))
      {
        *(_WORD *)uint64_t v60 = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v17, OS_SIGNPOST_INTERVAL_END, v16, "link_shader", "", v60, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)v23);
  if (*(void *)(a1 + 104))
  {
    unint64_t v18 = 0;
    do
    {
      uint64_t v19 = (*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 48))(a1, v18);
      *(_DWORD *)(*(void *)(a1 + 112) + 4 * v18++) = (*((uint64_t (**)(void, uint64_t, uint64_t))&v54 + 1))(*(void *)&buf[8], v11, v19);
    }
    while (*(void *)(a1 + 104) > v18);
  }
  *(_DWORD *)(a1 + 140) = v11;
  (*((void (**)(void, uint64_t))&v37 + 1))(*(void *)&buf[8], v10);
  *(double *)(a1 + 24) = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v7.__d_.__rep_) / 1000000000.0;
  if (CI_VERBOSE_SIGNPOSTS())
  {
    long long v20 = ci_signpost_log_compile();
    os_signpost_id_t v21 = v59;
    if (v59 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      long long v22 = v20;
      if (os_signpost_enabled(v20))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v22, OS_SIGNPOST_INTERVAL_END, v21, "compile_gl", "", buf, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)v58);
}

uint64_t CI::GLContext::compile_shader(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v52 = a4;
  if (CI_VERBOSE_SIGNPOSTS())
  {
    uint64_t v10 = ci_signpost_log_render();
    if ((a2 | (unint64_t)(a1 << 32)) - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v11 = v10;
      if (os_signpost_enabled(v10))
      {
        LOWORD(v24[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v11, OS_SIGNPOST_INTERVAL_BEGIN, a2 | (unint64_t)(a1 << 32), "compile_shader", "", (uint8_t *)v24, 2u);
      }
    }
  }
  TimerBase::TimerBase((uint64_t)v50, a1, a2, (uint64_t)"compile_shader", 20);
  if (a4)
  {
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    memset(v24, 0, sizeof(v24));
    GetMacroContext(a3, v24);
    if (!LOBYTE(v24[0]))
    {
      long long v12 = ci_logger_render();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        CI::GLTextureManager::release_texture((uint64_t)a3, v12, v13, v14, v15, v16, v17, v18);
      }
    }
    uint64_t v19 = (*((uint64_t (**)(void, uint64_t))&v27 + 1))(*((void *)&v24[0] + 1), a5);
    v49(*((void *)&v24[0] + 1), v19, 1, &v52, 0);
    (*((void (**)(void, uint64_t))&v25 + 1))(*((void *)&v24[0] + 1), v19);
  }
  else
  {
    uint64_t v19 = 0;
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    long long v20 = ci_signpost_log_render();
    os_signpost_id_t v21 = v51;
    if (v51 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      long long v22 = v20;
      if (os_signpost_enabled(v20))
      {
        LOWORD(v24[0]) = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v22, OS_SIGNPOST_INTERVAL_END, v21, "compile_shader", "", (uint8_t *)v24, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)v50);
  return v19;
}

void CI::GLContext::GLContext(CI::GLContext *this, const CI::GLContext *a2)
{
}

void CI::GLContext::init(CI::GLContext *this)
{
  *((_DWORD *)this + 226) = 1;
  *((unsigned char *)this + 908) = 0;
  operator new();
}

void CI::GLContext::GLContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dyld_program_sdk_at_least()) {
    int v15 = 2056;
  }
  else {
    int v15 = 264;
  }
  if (a5) {
    int v16 = a5;
  }
  else {
    int v16 = v15;
  }
  CI::Context::Context(a1, a3, a4, v16, a6, a7, a8, 0);
}

{
  CI::GLContext::GLContext(a1, a2, a3, a4, a5, a6, a7, a8);
}

void CI::GLContext::~GLContext(CI::GLContext *this)
{
  *(void *)this = &unk_1EE45F2F0;
  *((void *)this + 48) = &unk_1EE45F570;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  GetMacroContext(*((void **)this + 49), v11);
  if (!LOBYTE(v11[0]))
  {
    uint64_t v2 = ci_logger_render();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  if (*((_DWORD *)this + 108))
  {
    (*((void (**)(void))&v13 + 1))(v11[1]);
    *((_DWORD *)this + 108) = 0;
  }
  if (*((_DWORD *)this + 222)) {
    (*((void (**)(void))&v12 + 1))(v11[1]);
  }
  ((void (*)(void, uint64_t, char *))v13)(v11[1], 1, (char *)this + 756);
  ((void (*)(void, uint64_t, char *))v12)(v11[1], 1, (char *)this + 752);
  uint64_t v3 = *((void *)this + 53);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 32))(v3);
  }
  uint64_t v4 = (CI::Context *)((uint64_t (*)(void))v20)(v11[1]);
  v10[0] = 0;
  v10[1] = v10;
  v10[2] = 0x2000000000;
  uint64_t v5 = *((void *)this + 49);
  uint64_t v10[3] = *((void *)this + 50);
  v9[0] = 0;
  v9[1] = v9;
  v9[2] = 0x2000000000;
  v9[3] = v5;
  v8[0] = 0;
  v8[1] = v8;
  v8[2] = 0x2000000000;
  v8[3] = *((void *)this + 52);
  long long v6 = CI::Context::render_completion_queue(v4);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI9GLContextD2Ev_block_invoke;
  block[3] = &unk_1E57739F0;
  block[4] = v8;
  void block[5] = v9;
  block[6] = v10;
  dispatch_async(v6, block);
  _Block_object_dispose(v8, 8);
  _Block_object_dispose(v9, 8);
  _Block_object_dispose(v10, 8);
  *((void *)this + 48) = &unk_1EE456D08;
  atomic_fetch_add(&dword_1EB466F58[18], 0xFFFFFFFF);
  CI::Context::~Context((CGColorSpaceRef *)this);
}

{
  uint64_t vars8;

  CI::GLContext::~GLContext(this);

  JUMPOUT(0x1997023B0);
}

void ___ZN2CI9GLContextD2Ev_block_invoke(void *a1)
{
  CIEAGLContextRelease(*(void **)(*(void *)(a1[4] + 8) + 24));
  CIEAGLContextRelease(*(void **)(*(void *)(a1[5] + 8) + 24));
  uint64_t v2 = *(void **)(*(void *)(a1[6] + 8) + 24);
  if (v2)
  {
    CIEAGLContextRelease(v2);
  }
}

void non-virtual thunk to'CI::GLContext::~GLContext(CI::GLContext *this)
{
}

{
  uint64_t vars8;

  CI::GLContext::~GLContext((CI::GLContext *)((char *)this - 384));

  JUMPOUT(0x1997023B0);
}

char *CI::GLContext::update_limits(void **this)
{
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v39 = 0u;
  memset(v38, 0, sizeof(v38));
  GetMacroContext(this[49], v38);
  if (!LOBYTE(v38[0]))
  {
    uint64_t v2 = ci_logger_render();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  uint64_t v3 = (char *)((uint64_t (*)(void, uint64_t))v42)(*((void *)&v38[0] + 1), 7939);
  uint64_t v4 = (char *)((uint64_t (*)(void, uint64_t))v42)(*((void *)&v38[0] + 1), 35358);
  this[112] = (void *)((uint64_t (*)(void, uint64_t))v42)(*((void *)&v38[0] + 1), 7937);
  ((void (*)(void, uint64_t, void **))v39)(*((void *)&v38[0] + 1), 3379, this + 104);
  int v5 = *((_DWORD *)this + 208);
  if (v5 >= (int)CI_MAX_TEXTURE_SIZE()) {
    int v6 = CI_MAX_TEXTURE_SIZE();
  }
  else {
    int v6 = *((_DWORD *)this + 208);
  }
  *((_DWORD *)this + 208) = v6;
  ((void (*)(void, uint64_t, char *))v39)(*((void *)&v38[0] + 1), 3386, (char *)this + 836);
  ((void (*)(void, uint64_t, void **))v39)(*((void *)&v38[0] + 1), 34921, this + 105);
  this[109] = 0;
  ((void (*)(void, uint64_t, char *))v39)(*((void *)&v38[0] + 1), 36347, (char *)this + 844);
  ((void (*)(void, uint64_t, void **))v39)(*((void *)&v38[0] + 1), 36349, this + 106);
  ((void (*)(void, uint64_t, char *))v39)(*((void *)&v38[0] + 1), 36348, (char *)this + 852);
  ((void (*)(void, uint64_t, void **))v39)(*((void *)&v38[0] + 1), 35661, this + 107);
  ((void (*)(void, uint64_t, char *))v39)(*((void *)&v38[0] + 1), 34930, (char *)this + 860);
  ((void (*)(void, uint64_t, void **))v39)(*((void *)&v38[0] + 1), 34024, this + 108);
  if (CI::search_extension_list(v3, "GL_APPLE_client_storage", v7)) {
    unsigned __int8 v9 = 1;
  }
  else {
    unsigned __int8 v9 = CI::search_extension_list(v4, "GL_APPLE_client_storage", v8);
  }
  char v10 = (_BYTE)this[110] & 0xFE | v9;
  *((unsigned char *)this + 880) = v10;
  if ((CI::search_extension_list(v3, "GL_APPLE_texture_ycbcr_basic_formats", v8) & 1) != 0
    || CI::search_extension_list(v4, "GL_APPLE_texture_ycbcr_basic_formats", v11))
  {
    char v12 = 2;
  }
  else
  {
    char v12 = 0;
  }
  char v13 = v10 & 0xFD;
  char v14 = v12 | v10 & 0xFD;
  *((unsigned char *)this + 880) = v12 | v13;
  if ((CI::search_extension_list(v3, "GL_APPLE_texture_ycbcr_extended_formats", v11) & 1) != 0
    || CI::search_extension_list(v4, "GL_APPLE_texture_ycbcr_extended_formats", v15))
  {
    char v16 = 4;
  }
  else
  {
    char v16 = 0;
  }
  char v17 = v14 & 0xFB;
  char v18 = v16 | v14 & 0xFB;
  *((unsigned char *)this + 880) = v16 | v17;
  if ((CI::search_extension_list(v3, "GL_EXT_color_buffer_half_float", v15) & 1) != 0
    || CI::search_extension_list(v4, "GL_EXT_color_buffer_half_float", v19))
  {
    char v20 = 8;
  }
  else
  {
    char v20 = 0;
  }
  char v21 = v18 & 0xF7;
  char v22 = v20 | v18 & 0xF7;
  *((unsigned char *)this + 880) = v20 | v21;
  if ((CI::search_extension_list(v3, "GL_EXT_shader_texture_lod", v19) & 1) != 0
    || CI::search_extension_list(v4, "GL_EXT_shader_texture_lod", v23))
  {
    char v24 = 16;
  }
  else
  {
    char v24 = 0;
  }
  char v25 = v22 & 0xEF;
  char v26 = v24 | v22 & 0xEF;
  *((unsigned char *)this + 880) = v24 | v25;
  if ((CI::search_extension_list(v3, "GL_OES_texture_half_float", v23) & 1) != 0
    || CI::search_extension_list(v4, "GL_OES_texture_half_float", v27))
  {
    char v28 = 32;
  }
  else
  {
    char v28 = 0;
  }
  char v29 = v26 & 0xDF;
  char v30 = v28 | v26 & 0xDF;
  *((unsigned char *)this + 880) = v28 | v29;
  if ((CI::search_extension_list(v3, "GL_OES_texture_float", v27) & 1) != 0
    || CI::search_extension_list(v4, "GL_OES_texture_float", v31))
  {
    char v32 = 64;
  }
  else
  {
    char v32 = 0;
  }
  char v33 = v30 & 0xBF;
  char v34 = v32 | v30 & 0xBF;
  *((unsigned char *)this + 880) = v32 | v33;
  uint64_t result = CI::search_extension_list(v3, "GL_APPLE_texture_xr", v31);
  if ((result & 1) != 0
    || (uint64_t result = CI::search_extension_list(v4, "GL_APPLE_texture_xr", v36), result))
  {
    char v37 = 0x80;
  }
  else
  {
    char v37 = 0;
  }
  *((unsigned char *)this + 880) = v37 | v34 & 0x7F;
  return result;
}

const char *CI::GLContext::name(CI::GLContext *this)
{
  unsigned int v1 = *((_DWORD *)this + 102) - 1;
  if (v1 > 2) {
    return "opengl";
  }
  else {
    return off_1E5773B08[v1];
  }
}

uint64_t CI::GLContext::setPriority(uint64_t result, int a2)
{
  if (a2 == 1)
  {
    int v2 = 0;
  }
  else
  {
    if (a2 != -1) {
      return result;
    }
    int v2 = 2;
  }
  *(_DWORD *)(result + 904) = v2;
  return result;
}

uint64_t CI::GLContext::priority(CI::GLContext *this)
{
  int v1 = *((_DWORD *)this + 226);
  if (v1 == 2) {
    unsigned int v2 = -1;
  }
  else {
    unsigned int v2 = 0;
  }
  if (v1) {
    return v2;
  }
  else {
    return 1;
  }
}

uint64_t CI::GLContext::check_user_destination(CI::GLContext *this)
{
  *((unsigned char *)this + 761) = 1;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  memset(v7, 0, sizeof(v7));
  GetMacroContext(*((void **)this + 50), v7);
  if (!LOBYTE(v7[0]))
  {
    unsigned int v2 = ci_logger_render();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  ((void (*)(void))v23)(*((void *)&v7[0] + 1));
  int v6 = 0;
  ((void (*)(void, uint64_t, int *))v29)(*((void *)&v7[0] + 1), 36006, &v6);
  *((_DWORD *)this + 191) = v6;
  uint64_t result = v36(*((void *)&v7[0] + 1));
  if (result
    && (uint64_t result = ((uint64_t (*)(void, uint64_t))v11)(*((void *)&v7[0] + 1), 36160),
        result == 36053))
  {
    unsigned int v4 = 0;
    int v5 = 0;
    if (v6)
    {
      (*((void (**)(void, uint64_t, uint64_t, uint64_t, int *))&v28 + 1))(*((void *)&v7[0] + 1), 36160, 36064, 36048, &v5);
      (*((void (**)(void, uint64_t, uint64_t, uint64_t, unsigned int *))&v28 + 1))(*((void *)&v7[0] + 1), 36160, 36064, 36049, &v4);
      if (v5 == 5890)
      {
        (*((void (**)(void, uint64_t, void))&v8 + 1))(*((void *)&v7[0] + 1), 3553, v4);
        ((void (*)(void, uint64_t, void, uint64_t, char *))v33)(*((void *)&v7[0] + 1), 3553, 0, 4099, (char *)this + 768);
        ((void (*)(void, uint64_t, void, uint64_t, char *))v33)(*((void *)&v7[0] + 1), 3553, 0, 4096, (char *)this + 772);
        ((void (*)(void, uint64_t, void, uint64_t, char *))v33)(*((void *)&v7[0] + 1), 3553, 0, 4097, (char *)this + 776);
      }
      else if (v5 == 36161)
      {
        (*((void (**)(void, uint64_t, uint64_t, char *))&v30 + 1))(*((void *)&v7[0] + 1), 36161, 36164, (char *)this + 768);
        (*((void (**)(void, uint64_t, uint64_t, char *))&v30 + 1))(*((void *)&v7[0] + 1), 36161, 36162, (char *)this + 772);
        (*((void (**)(void, uint64_t, uint64_t, char *))&v30 + 1))(*((void *)&v7[0] + 1), 36161, 36163, (char *)this + 776);
      }
    }
    uint64_t result = ((uint64_t (*)(void, uint64_t, char *))v29)(*((void *)&v7[0] + 1), 3042, (char *)this + 804);
    if (*((_DWORD *)this + 201))
    {
      ((void (*)(void, uint64_t, char *))v29)(*((void *)&v7[0] + 1), 32969, (char *)this + 808);
      ((void (*)(void, uint64_t, char *))v29)(*((void *)&v7[0] + 1), 32968, (char *)this + 812);
      ((void (*)(void, uint64_t, char *))v29)(*((void *)&v7[0] + 1), 32777, (char *)this + 816);
      ((void (*)(void, uint64_t, char *))v29)(*((void *)&v7[0] + 1), 32971, (char *)this + 820);
      ((void (*)(void, uint64_t, char *))v29)(*((void *)&v7[0] + 1), 32970, (char *)this + 824);
      return ((uint64_t (*)(void, uint64_t, char *))v29)(*((void *)&v7[0] + 1), 34877, (char *)this + 828);
    }
  }
  else
  {
    *((unsigned char *)this + 761) = 0;
  }
  return result;
}

uint64_t CI::GLContext::flush_render(void **this)
{
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  long long v4 = 0u;
  memset(v3, 0, sizeof(v3));
  GetMacroContext(this[49], v3);
  if (!LOBYTE(v3[0]))
  {
    int v1 = ci_logger_render();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  ((void (*)(void))v4)(*((void *)&v3[0] + 1));
  return 1;
}

uint64_t CI::GLContext::waitForCompletion(void **this)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  memset(v3, 0, sizeof(v3));
  GetMacroContext(this[49], v3);
  if (!LOBYTE(v3[0]))
  {
    int v1 = ci_logger_render();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  return (*((uint64_t (**)(void))&v4 + 1))(*((void *)&v3[0] + 1));
}

void CI::GLContext::finish_render(void **a1, uint64_t a2)
{
  long long v4 = ci_signpost_log_render();
  os_signpost_id_t v5 = (*((uint64_t (**)(void **))*a1 + 34))(a1) << 32;
  if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
  {
    LOWORD(v11[0]) = 0;
    _os_signpost_emit_with_name_impl(&dword_193671000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "finish_render", "", (uint8_t *)v11, 2u);
  }
  uint64_t v6 = (*((uint64_t (**)(void **))*a1 + 34))(a1);
  TimerBase::TimerBase((uint64_t)v25, v6, 0, (uint64_t)"finish_render", 16);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  GetMacroContext(a1[49], v11);
  if (!LOBYTE(v11[0]))
  {
    long long v7 = ci_logger_render();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  ((void (*)(void))v12)(*((void *)&v11[0] + 1));
  (*(void (**)(uint64_t))(a2 + 16))(a2);
  long long v8 = ci_signpost_log_render();
  os_signpost_id_t v9 = v26;
  if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v10 = v8;
    if (os_signpost_enabled(v8))
    {
      LOWORD(v11[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v10, OS_SIGNPOST_INTERVAL_END, v9, "finish_render", "", (uint8_t *)v11, 2u);
    }
  }
  TimerBase::~TimerBase((TimerBase *)v25);
}

void CI::GLContext::after_render(CI::TextureManager **this)
{
  unsigned int v2 = ci_signpost_log_render();
  os_signpost_id_t v3 = (*((uint64_t (**)(CI::TextureManager **))*this + 34))(this) << 32;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v2))
  {
    *(_WORD *)long long v13 = 0;
    _os_signpost_emit_with_name_impl(&dword_193671000, v2, OS_SIGNPOST_INTERVAL_BEGIN, v3, "after_render", "", v13, 2u);
  }
  uint64_t v4 = (*((uint64_t (**)(CI::TextureManager **))*this + 34))(this);
  TimerBase::TimerBase((uint64_t)v13, v4, 0, (uint64_t)"after_render", 8);
  CI::TextureManager::remove_all(this[53]);
  os_signpost_id_t v5 = this[53];
  if (CI_RECYCLE_OPENGL_TEXTURES()) {
    uint64_t v6 = CI_INTERMEDIATE_CACHE_SIZE();
  }
  else {
    uint64_t v6 = 0;
  }
  (*(void (**)(CI::TextureManager *, uint64_t))(*(void *)v5 + 64))(v5, v6);
  uint64_t v7 = (int)CI_INPUT_CACHE_SIZE();
  long long v8 = this[53];
  os_signpost_id_t v9 = *((void *)v8 + 13);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI16GLTextureManager23purge_attached_surfacesEm_block_invoke;
  block[3] = &__block_descriptor_tmp_15_2;
  block[4] = v8;
  void block[5] = v7;
  dispatch_sync(v9, block);
  long long v10 = ci_signpost_log_render();
  os_signpost_id_t v11 = v14;
  if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v12 = v10;
    if (os_signpost_enabled(v10))
    {
      LOWORD(block[0]) = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v12, OS_SIGNPOST_INTERVAL_END, v11, "after_render", "", (uint8_t *)block, 2u);
    }
  }
  TimerBase::~TimerBase((TimerBase *)v13);
}

uint64_t CI::GLContext::set_viewport(CI::GLContext *this, CGRect a2)
{
  CGRect v11 = CGRectIntegral(a2);
  double x = v11.origin.x;
  double y = v11.origin.y;
  double width = v11.size.width;
  double height = v11.size.height;
  uint64_t result = CGRectEqualToRect(v11, *(CGRect *)((char *)this + 440));
  if ((result & 1) == 0)
  {
    memset(v9, 0, 512);
    GetMacroContext(*((void **)this + 49), v9);
    if (!LOBYTE(v9[0]))
    {
      long long v8 = ci_logger_render();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
      }
    }
    *((double *)this + 55) = x;
    *((double *)this + 56) = y;
    *((double *)this + 57) = width;
    *((double *)this + 58) = height;
    return v10(*((void *)&v9[0] + 1), (int)x, (int)y, (int)width, (int)height);
  }
  return result;
}

uint64_t CI::GLContext::set_framebuffer(uint64_t this, uint64_t a2)
{
  if (*(_DWORD *)(this + 472) != a2)
  {
    uint64_t v3 = this;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    long long v7 = 0u;
    long long v8 = 0u;
    long long v6 = 0u;
    memset(v5, 0, sizeof(v5));
    GetMacroContext(*(void **)(this + 392), v5);
    if (!LOBYTE(v5[0]))
    {
      uint64_t v4 = ci_logger_render();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
      }
    }
    this = (*((uint64_t (**)(void, uint64_t, uint64_t))&v6 + 1))(*((void *)&v5[0] + 1), 36160, a2);
    *(_DWORD *)(v3 + 472) = a2;
  }
  return this;
}

uint64_t CI::GLContext::set_program(uint64_t this, uint64_t a2)
{
  if (*(_DWORD *)(this + 476) != a2)
  {
    uint64_t v3 = this;
    memset(v5, 0, 512);
    GetMacroContext(*(void **)(this + 392), v5);
    if (!LOBYTE(v5[0]))
    {
      uint64_t v4 = ci_logger_render();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
      }
    }
    this = v6(*((void *)&v5[0] + 1), a2);
    *(_DWORD *)(v3 + 476) = a2;
  }
  return this;
}

uint64_t CI::GLContext::set_blend(uint64_t this, int a2)
{
  if (*(unsigned __int8 *)(this + 480) != a2)
  {
    uint64_t v3 = this;
    memset(v6, 0, 512);
    GetMacroContext(*(void **)(this + 392), v6);
    if (!LOBYTE(v6[0]))
    {
      uint64_t v4 = ci_logger_render();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
        ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
      }
    }
    uint64_t v5 = 232;
    if (a2) {
      uint64_t v5 = 264;
    }
    this = (*(uint64_t (**)(void, uint64_t))((char *)v6 + v5))(*((void *)&v6[0] + 1), 3042);
    *(unsigned char *)(v3 + 480) = a2;
  }
  return this;
}

void CI::GLContext::set_blend(void **this, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CI::GLContext::set_blend((uint64_t)this, a2);
  if (a2)
  {
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v18 = 0u;
    memset(v17, 0, sizeof(v17));
    GetMacroContext(this[49], v17);
    if (!LOBYTE(v17[0]))
    {
      long long v16 = ci_logger_render();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
      }
    }
    if (*((_DWORD *)this + 121) != a3
      || *((_DWORD *)this + 124) != a4
      || *((_DWORD *)this + 122) != a5
      || *((_DWORD *)this + 125) != a6)
    {
      (*((void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))&v19 + 1))(*((void *)&v17[0] + 1), a3, a5, a4, a6);
      *((_DWORD *)this + 121) = a3;
      *((_DWORD *)this + 124) = a4;
      *((_DWORD *)this + 122) = a5;
      *((_DWORD *)this + 125) = a6;
    }
    if (*((_DWORD *)this + 123) != a7 || *((_DWORD *)this + 126) != a8)
    {
      (*((void (**)(void, uint64_t, uint64_t))&v18 + 1))(*((void *)&v17[0] + 1), a7, a8);
      *((_DWORD *)this + 123) = a7;
      *((_DWORD *)this + 126) = a8;
    }
  }
}

uint64_t CI::GLContext::max_input_image_size(CI::GLContext *this)
{
  return *((int *)this + 208);
}

uint64_t CI::GLContext::max_output_image_size(CI::GLContext *this)
{
  int v1 = *((_DWORD *)this + 216);
  if (v1 >= *((_DWORD *)this + 209)) {
    return *((int *)this + 209);
  }
  return v1;
}

uint64_t CI::GLContext::max_texture_image_units(CI::GLContext *this)
{
  return *((int *)this + 215);
}

uint64_t CI::GLContext::max_fragment_uniform_vectors(CI::GLContext *this)
{
  return *((int *)this + 212);
}

uint64_t CI::GLContext::max_fragment_uniform_size(CI::GLContext *this)
{
  return 16 * *((int *)this + 212);
}

unint64_t CI::GLContext::surface_rowbytes_alignment_for_input(uint64_t a1, int a2)
{
  if (is_gpu_A9_or_higher()) {
    unint64_t v3 = 16;
  }
  else {
    unint64_t v3 = 4;
  }
  if (v3 < (int)CI::format_bytes_per_pixel(a2)) {
    return (int)CI::format_bytes_per_pixel(a2);
  }
  return v3;
}

unint64_t CI::GLContext::surface_rowbytes_alignment_for_output(uint64_t a1, int a2)
{
  if (is_gpu_A9_or_higher()) {
    unint64_t v3 = 16;
  }
  else {
    unint64_t v3 = 4;
  }
  if (v3 < (int)CI::format_bytes_per_pixel(a2)) {
    return (int)CI::format_bytes_per_pixel(a2);
  }
  return v3;
}

uint64_t CI::GLContext::insert_event_marker(void **this, const char *a2)
{
  long long v7 = 0u;
  memset(v6, 0, sizeof(v6));
  GetMacroContext(this[49], v6);
  if (!LOBYTE(v6[0]))
  {
    unint64_t v3 = ci_logger_render();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  size_t v4 = strlen(a2);
  return ((uint64_t (*)(void, size_t, const char *))v7)(*((void *)&v6[0] + 1), v4, a2);
}

void CI::GLContext::subdivideQuad(void **a1, int a2, double *a3, float *a4, float *a5)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  if (CI::CI_SUBDIVIDE_QUADS(void)::didCheck != -1) {
    dispatch_once(&CI::CI_SUBDIVIDE_QUADS(void)::didCheck, &__block_literal_global_70_0);
  }
  if (*(double *)&CI::CI_SUBDIVIDE_QUADS(void)::v == 0.0) {
    double v10 = 256.0;
  }
  else {
    double v10 = *(double *)&CI::CI_SUBDIVIDE_QUADS(void)::v;
  }
  unsigned int v11 = vcvtpd_u64_f64(a3[1] / v10);
  if (v11)
  {
    int v12 = 0;
    float v14 = a5[1];
    float v13 = a5[2];
    float v15 = a5[5];
    float v17 = a4[1];
    float v16 = a4[2];
    float v18 = a4[5];
    unsigned int v19 = vcvtpd_u64_f64(*a3 / v10);
    double v20 = (float)((float)(v13 - *a5) / (float)v19);
    double v21 = (float)((float)(v16 - *a4) / (float)v19);
    double v22 = (float)((float)(v18 - v17) / (float)v11);
    double v50 = v18;
    double v48 = v15;
    double v49 = v18 - v22;
    double v46 = (float)((float)(v15 - v14) / (float)v11);
    double v47 = v15 - v46;
    double v45 = v22;
    double v53 = v14;
    double v54 = v17;
    double v52 = v17 + v22;
    double v51 = v14 + v46;
    double v23 = *a4;
    double v24 = *a5;
    double v59 = v16;
    double v57 = v13;
    double v58 = v16 - v21;
    double v56 = v13 - v20;
    double v25 = 0.0;
    do
    {
      double v27 = v53;
      double v26 = v54;
      double v28 = v51;
      double v29 = v52;
      if (v12)
      {
        unsigned int v30 = v12 + 1;
        double v27 = v47;
        double v28 = v48;
        double v26 = v49;
        double v29 = v50;
        if (v12 + 1 != v11)
        {
          double v26 = v54 + v45 * v25;
          double v29 = v54 + v45 * (double)v30;
          double v27 = v53 + v46 * v25;
          double v28 = v53 + v46 * (double)v30;
        }
      }
      double v55 = v25;
      if (v19)
      {
        unsigned int v31 = 0;
        float v32 = v27;
        float v33 = v28;
        float v34 = v26;
        float v35 = v29;
        do
        {
          if (v31)
          {
            unsigned int v36 = v31 + 1;
            if (v31 + 1 == v19)
            {
              double v37 = v56;
              double v38 = v57;
              double v39 = v58;
              double v40 = v59;
            }
            else
            {
              double v39 = v23 + v21 * (double)v31;
              double v40 = v23 + v21 * (double)v36;
              double v37 = v24 + v20 * (double)v31;
              double v38 = v24 + v20 * (double)v36;
            }
          }
          else
          {
            unsigned int v36 = 1;
            double v37 = v24;
            double v38 = v24 + v20;
            double v40 = v23 + v21;
            double v39 = v23;
          }
          float v41 = v37;
          *(float *)uint64_t v61 = v41;
          *(float *)&v61[1] = v32;
          float v42 = v38;
          *(float *)&v61[2] = v42;
          *(float *)&__int16 v61[3] = v32;
          *(float *)&v61[4] = v41;
          *(float *)&v61[5] = v33;
          *(float *)&void v61[6] = v42;
          *(float *)&v61[7] = v33;
          float v43 = v39;
          *(float *)uint64_t v60 = v43;
          *(float *)&v60[1] = v34;
          float v44 = v40;
          *(float *)&v60[2] = v44;
          *(float *)&v60[3] = v34;
          *(float *)&uint8_t v60[4] = v43;
          *(float *)&v60[5] = v35;
          *(float *)&v60[6] = v44;
          *(float *)&v60[7] = v35;
          CI::GLContext::quad(a1, a2, (uint64_t)v60, (uint64_t)v61);
          CI::GLContext::flush_render(a1);
          unsigned int v31 = v36;
        }
        while (v36 != v19);
      }
      double v25 = v55 + 1.0;
      ++v12;
    }
    while (v12 != v11);
  }
}

void CI::GLContext::quad(void **a1, int a2, uint64_t a3, uint64_t a4)
{
  if (CI_VERBOSE_SIGNPOSTS())
  {
    long long v8 = ci_signpost_log_render();
    os_signpost_id_t v9 = a2 | (unint64_t)((*((uint64_t (**)(void **))*a1 + 34))(a1) << 32);
    if (v9 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v8, OS_SIGNPOST_INTERVAL_BEGIN, v9, "quad", "", buf, 2u);
    }
  }
  uint64_t v10 = (*((uint64_t (**)(void **))*a1 + 34))(a1);
  TimerBase::TimerBase((uint64_t)v50, v10, a2, (uint64_t)"quad", 12);
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)buf = 0u;
  long long v18 = 0u;
  GetMacroContext(a1[49], buf);
  if (!buf[0])
  {
    unsigned int v11 = ci_logger_render();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  uint64_t v16 = 0;
  (*((void (**)(void, void, uint64_t, char *))&v47 + 1))(*(void *)&buf[8], 0, 34338, (char *)&v16 + 4);
  (*((void (**)(void, uint64_t, uint64_t, uint64_t *))&v47 + 1))(*(void *)&buf[8], 1, 34338, &v16);
  ((void (*)(void, uint64_t, void))v20)(*(void *)&buf[8], 34962, 0);
  v49(*(void *)&buf[8], 0, 2, 5126, 0, 0, a3);
  ((void (*)(void, void))v34)(*(void *)&buf[8], 0);
  v49(*(void *)&buf[8], 1, 2, 5126, 0, 0, a4);
  ((void (*)(void, uint64_t))v34)(*(void *)&buf[8], 1);
  if (!CI_NO_RENDER())
  {
    if (CI_LIMIT_RENDER()) {
      uint64_t v12 = 0;
    }
    else {
      uint64_t v12 = 5;
    }
    (*((void (**)(void, uint64_t, void, uint64_t))&v32 + 1))(*(void *)&buf[8], v12, 0, 4);
  }
  if (!v16) {
    ((void (*)(void, uint64_t))v32)(*(void *)&buf[8], 1);
  }
  if (!HIDWORD(v16)) {
    ((void (*)(void, void))v32)(*(void *)&buf[8], 0);
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    float v13 = ci_signpost_log_render();
    os_signpost_id_t v14 = v51;
    if (v51 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      float v15 = v13;
      if (os_signpost_enabled(v13))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v15, OS_SIGNPOST_INTERVAL_END, v14, "quad", "", buf, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)v50);
}

void CI::GLContext::quad(void **a1, int a2, int a3, double *a4, CMatrix *a5)
{
  uint64_t v98 = *MEMORY[0x1E4F143B8];
  os_signpost_id_t v9 = a4 + 2;
  double v10 = *a4;
  double v11 = a4[1];
  float v12 = *a4 + a4[2];
  v93[0] = v12;
  float v13 = v11;
  v93[1] = v13;
  float v14 = v10;
  v93[2] = v14;
  v93[3] = v13;
  float v94 = v12;
  float v15 = v11 + a4[3];
  float v95 = v15;
  float v96 = v14;
  float v97 = v15;
  if (a5)
  {
    CMatrix::CMatrix((CMatrix *)v63, a5);
    CMatrix::CMatrix((CMatrix *)v84, 1u, 4u, 0.0, v16, v17, 0, 0, 0x3FF0000000000000);
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v18;
    *(double *)CMatrixRow::operator[]((uint64_t)v83, 0) = v12;
    double v19 = v13;
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v20;
    *(double *)CMatrixRow::operator[]((uint64_t)v83, 1u) = v19;
    CMatrix::operator*(v84, v63, v83);
    CMatrix::operator=(v84, v83);
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v21;
    float v22 = *(double *)CMatrixRow::operator[]((uint64_t)v83, 0);
    float v85 = v22;
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v23;
    float v24 = *(double *)CMatrixRow::operator[]((uint64_t)v83, 1u);
    float v86 = v24;
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v25;
    *(double *)CMatrixRow::operator[]((uint64_t)v83, 0) = v14;
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v26;
    *(double *)CMatrixRow::operator[]((uint64_t)v83, 1u) = v19;
    CMatrix::operator*(v84, v63, v83);
    CMatrix::operator=(v84, v83);
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v27;
    float v28 = *(double *)CMatrixRow::operator[]((uint64_t)v83, 0);
    float v87 = v28;
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v29;
    float v30 = *(double *)CMatrixRow::operator[]((uint64_t)v83, 1u);
    float v88 = v30;
    double v31 = v94;
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v32;
    *(double *)CMatrixRow::operator[]((uint64_t)v83, 0) = v31;
    double v33 = v95;
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v34;
    *(double *)CMatrixRow::operator[]((uint64_t)v83, 1u) = v33;
    CMatrix::operator*(v84, v63, v83);
    CMatrix::operator=(v84, v83);
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v35;
    float v36 = *(double *)CMatrixRow::operator[]((uint64_t)v83, 0);
    float v89 = v36;
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v37;
    float v38 = *(double *)CMatrixRow::operator[]((uint64_t)v83, 1u);
    float v90 = v38;
    double v39 = v96;
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v40;
    *(double *)CMatrixRow::operator[]((uint64_t)v83, 0) = v39;
    double v41 = v97;
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v42;
    *(double *)CMatrixRow::operator[]((uint64_t)v83, 1u) = v41;
    CMatrix::operator*(v84, v63, v83);
    CMatrix::operator=(v84, v83);
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v43;
    float v44 = *(double *)CMatrixRow::operator[]((uint64_t)v83, 0);
    float v91 = v44;
    *(void *)v83 = CMatrix::operator[](v84, 0);
    *(void *)&v83[2] = v45;
    float v46 = *(double *)CMatrixRow::operator[]((uint64_t)v83, 1u);
  }
  else
  {
    float v46 = 1.0;
    float v85 = 1.0;
    if (a3) {
      float v46 = -1.0;
    }
    float v86 = -v46;
    float v87 = -1.0;
    float v88 = -v46;
    float v89 = 1.0;
    float v90 = v46;
    float v91 = -1.0;
  }
  float v92 = v46;
  if (CI::CI_SUBDIVIDE_QUADS(void)::didCheck != -1) {
    dispatch_once(&CI::CI_SUBDIVIDE_QUADS(void)::didCheck, &__block_literal_global_70_0);
  }
  if (*(double *)&CI::CI_SUBDIVIDE_QUADS(void)::v <= 0.0
    || *v9 <= *(double *)&CI::CI_SUBDIVIDE_QUADS(void)::v && a4[3] <= *(double *)&CI::CI_SUBDIVIDE_QUADS(void)::v)
  {
    CI::GLContext::quad(a1, a2, (uint64_t)&v85, (uint64_t)v93);
  }
  else if (a5)
  {
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    memset(v63, 0, sizeof(v63));
    GetMacroContext(a1[49], v63);
    if (!LOBYTE(v63[0]))
    {
      long long v47 = ci_logger_render();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
        ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
      }
    }
    char v62 = 0;
    ((void (*)(void, uint64_t, char *))v73)(*((void *)&v63[0] + 1), 3089, &v62);
    ((void (*)(void, uint64_t, unsigned int *))v75)(*((void *)&v63[0] + 1), 3088, v83);
    if (v62) {
      *(_OWORD *)v84 = *(_OWORD *)v83;
    }
    else {
      ((void (*)(void, uint64_t, unsigned int *))v75)(*((void *)&v63[0] + 1), 2978, v84);
    }
    (*((void (**)(void, uint64_t))&v66 + 1))(*((void *)&v63[0] + 1), 3089);
    unsigned int v49 = v84[0];
    unsigned int v50 = v84[2];
    unsigned int v51 = v84[1];
    unsigned int v52 = v84[3];
    if (CI::CI_SUBDIVIDE_QUADS(void)::didCheck != -1)
    {
      unsigned int v61 = v84[2];
      dispatch_once(&CI::CI_SUBDIVIDE_QUADS(void)::didCheck, &__block_literal_global_70_0);
      unsigned int v50 = v61;
    }
    int v53 = v50 + v49;
    v48.n128_u64[0] = CI::CI_SUBDIVIDE_QUADS(void)::v;
    if (*(double *)&CI::CI_SUBDIVIDE_QUADS(void)::v == 0.0) {
      double v54 = 256.0;
    }
    else {
      double v54 = *(double *)&CI::CI_SUBDIVIDE_QUADS(void)::v;
    }
    uint64_t v55 = v84[0];
    if ((int)v84[0] < v53)
    {
      int v56 = v52 + v51;
      do
      {
        uint64_t v57 = v84[1];
        if ((int)v84[1] < v56)
        {
          double v58 = (double)(v53 - (int)v55);
          if (v54 < v58) {
            double v58 = v54;
          }
          uint64_t v59 = (int)v58;
          do
          {
            double v60 = (double)(v56 - (int)v57);
            if (v54 < v60) {
              double v60 = v54;
            }
            v82(*((void *)&v63[0] + 1), v55, v57, v59, (int)v60);
            CI::GLContext::quad(a1, a2, (uint64_t)&v85, (uint64_t)v93);
            CI::GLContext::flush_render(a1);
            uint64_t v57 = (int)(v54 + (double)(int)v57);
          }
          while (v56 > (int)v57);
        }
        v48.n128_f64[0] = v54 + (double)(int)v55;
        uint64_t v55 = (int)v48.n128_f64[0];
      }
      while (v53 > (int)v55);
    }
    if (!v62) {
      (*((void (**)(void, uint64_t, __n128))&v64 + 1))(*((void *)&v63[0] + 1), 3089, v48);
    }
    ((void (*)(void, void, void, void, void, __n128))v82)(*((void *)&v63[0] + 1), v83[0], v83[1], v83[2], v83[3], v48);
  }
  else
  {
    CI::GLContext::subdivideQuad(a1, a2, v9, &v85, v93);
  }
}

uint64_t CI::GLContext::set_texture_destination(CI::GLContext *this, Texture a2, const CGSize *a3)
{
  *((unsigned char *)this + 762) = 0;
  *((unsigned char *)this + 780) = 1;
  *((void *)this + 98) = 0;
  *((_OWORD *)this + 32) = *(_OWORD *)a2.var0.var2.var1;
  *((_DWORD *)this + 132) = *((_DWORD *)this + 188);
  *((_DWORD *)this + 133) = *(_DWORD *)a2.var0.var0;
  *((_DWORD *)this + 135) = 5890;
  *((_DWORD *)this + 136) = *(_DWORD *)(a2.var0.var0 + 4);
  return 1;
}

size_t CI::GLContext::set_surface_destination(uint64_t a1, __IOSurface *a2, double *a3, int *a4)
{
  *(unsigned char *)(a1 + 762) = 0;
  *(unsigned char *)(a1 + 780) = 1;
  *(void *)(a1 + 784) = a2;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  memset(v29, 0, sizeof(v29));
  long long v8 = (void **)(a1 + 392);
  GetMacroContext(*(void **)(a1 + 392), v29);
  if (!LOBYTE(v29[0]))
  {
    os_signpost_id_t v9 = ci_logger_render();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  (*((void (**)(void, uint64_t, uint64_t))&v48 + 1))(*((void *)&v29[0] + 1), 1, a1 + 792);
  (*((void (**)(void, uint64_t, void))&v30 + 1))(*((void *)&v29[0] + 1), 3553, *(unsigned int *)(a1 + 792));
  uint64_t v10 = (unint64_t)*a3;
  uint64_t v11 = (unint64_t)a3[1];
  int API = CIEAGLContextGetAPI(*(void **)(a1 + 392));
  uint64_t v13 = CI::gl_format_info_for_format((uint64_t)a4, API);
  float v15 = "GLContext::set_surface_destination unsupported format %s!\n";
  if (!v13 || !HIDWORD(v13) || !v14) {
    goto LABEL_9;
  }
  if ((CIEAGLContextTexImageIOSurface(*v8, 0xDE1u, v10, v11, v13, SHIDWORD(v13), v14, a2, 0) & 1) == 0)
  {
    float v15 = "CIEAGLContextTexImageIOSurface failed for %s!\n";
LABEL_9:
    uint64_t v16 = CI::name_for_format(*a4);
    x_log(v15, v16);
  }
  *(double *)(a1 + 512) = (double)(unint64_t)v10;
  *(double *)(a1 + 520) = (double)(unint64_t)v11;
  *(_DWORD *)(a1 + 528) = *(_DWORD *)(a1 + 752);
  *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 792);
  *(void *)(a1 + 540) = 0xDE100001702;
  size_t result = IOSurfaceGetPlaneCount(a2);
  if (result == 2)
  {
    int v19 = *a4;
    if (*a4 == 261 || v19 == 2053 || v19 == 1797)
    {
      int v20 = CI::format_from_IOSurface(a2, v18);
      CI::format_is_ycc_biplanar(v20);
      if (*a4 == 1797) {
        int v21 = 1798;
      }
      else {
        int v21 = 2054;
      }
      if (*a4 == 261) {
        int v22 = 262;
      }
      else {
        int v22 = v21;
      }
      int v27 = v22;
      __int16 v28 = 0;
      int v23 = CIEAGLContextGetAPI(*(void **)(a1 + 392));
      unint64_t v24 = CI::gl_format_info_for_format((uint64_t)&v27, v23);
      int v26 = v25;
      (*((void (**)(void, uint64_t, uint64_t))&v48 + 1))(*((void *)&v29[0] + 1), 1, a1 + 796);
      (*((void (**)(void, uint64_t, void))&v30 + 1))(*((void *)&v29[0] + 1), 3553, *(unsigned int *)(a1 + 796));
      size_t result = v58(*((void *)&v29[0] + 1), 3553, 0, v24, v10, v11, 0, HIDWORD(v24), v26, 0);
      *(_DWORD *)(a1 + 536) = *(_DWORD *)(a1 + 796);
    }
  }
  return result;
}

uint64_t CI::GLContext::set_bitmap_destination(uint64_t a1, uint64_t a2, double *a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 762) = 0;
  *(unsigned char *)(a1 + 780) = 0;
  double v7 = a3[1];
  uint64_t v8 = (int)*a3;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  memset(v21, 0, sizeof(v21));
  os_signpost_id_t v9 = (void **)(a1 + 392);
  GetMacroContext(*(void **)(a1 + 392), v21);
  if (!LOBYTE(v21[0]))
  {
    uint64_t v10 = ci_logger_render();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  int v11 = (int)v7;
  int v12 = *(_DWORD *)(a1 + 864);
  if (v12 < (int)v8 || v12 < v11) {
    return x_log("Destination buffer size too large (%d x %d); cannot be larger than %d x %d.\n",
  }
             v8,
             (int)v7,
             *(_DWORD *)(a1 + 864),
             v12);
  int v13 = *(_DWORD *)a4;
  switch(*(_DWORD *)a4)
  {
    case 0x803:
    case 0x805:
      goto LABEL_7;
    case 0x804:
    case 0x806:
      if ((*(unsigned char *)(a1 + 880) & 8) != 0)
      {
        uint64_t v14 = 33327;
      }
      else
      {
        if (v13 == 2053)
        {
LABEL_7:
          if ((*(unsigned char *)(a1 + 880) & 8) != 0)
          {
            uint64_t v14 = 33325;
            goto LABEL_28;
          }
        }
LABEL_14:
        if (CI::format_bytes_per_pixel(v13) == 1
          && CI::format_bits_per_component(*(_DWORD *)a4) == 8)
        {
          uint64_t v14 = 33321;
        }
        else if (CI::format_bytes_per_pixel(*(_DWORD *)a4) == 2 {
               && CI::format_bits_per_component(*(_DWORD *)a4) == 8)
        }
        {
          uint64_t v14 = 33323;
        }
        else
        {
          int API = CIEAGLContextGetAPI(*v9);
          unsigned int v17 = CI::gl_format_info_for_format(a4, API);
          if (*(unsigned char *)(a4 + 4)) {
            unsigned int v18 = 35907;
          }
          else {
            unsigned int v18 = 32856;
          }
          if (*(_DWORD *)a4 == 264) {
            uint64_t v14 = v18;
          }
          else {
            uint64_t v14 = v17;
          }
        }
      }
LABEL_28:
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      CI::format_get_clear_color(*(unsigned int *)(a2 + 104), (_DWORD *)&v20 + 1, (int *)&v20, (_DWORD *)&v19 + 1, &v19);
      (*((void (**)(void, float, float, float, float))&v22 + 1))(*((void *)&v21[0] + 1), *((float *)&v20 + 1), *(float *)&v20, *((float *)&v19 + 1), *(float *)&v19);
      uint64_t result = v47(*((void *)&v21[0] + 1), 36161, v14, v8, (int)v7);
      *(double *)(a1 + 512) = (double)(int)v8;
      *(double *)(a1 + 520) = (double)v11;
      *(void *)(a1 + 528) = *(void *)(a1 + 752);
      *(_DWORD *)(a1 + 540) = 36161;
      break;
    case 0x808:
      if ((*(unsigned char *)(a1 + 880) & 8) == 0) {
        goto LABEL_14;
      }
      uint64_t v14 = 34842;
      goto LABEL_28;
    default:
      goto LABEL_14;
  }
  return result;
}

char *CI::search_extension_list(char *this, const char *a2, const char *a3)
{
  if (this)
  {
    size_t v4 = this;
    this = strstr(this, a2);
    if (this)
    {
      if (this <= v4 || *(this - 1) == 32) {
        return (char *)((this[strlen(a2)] & 0xDF) == 0);
      }
      else {
        return 0;
      }
    }
  }
  return this;
}

uint64_t CI::GLContext::unbind_render_target(uint64_t this)
{
  uint64_t v1 = this;
  if (*(_DWORD *)(this + 540) == 5890 && *(_DWORD *)(this + 792))
  {
    unsigned int v2 = (void *)(this + 792);
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v8 = 0u;
    long long v9 = 0u;
    long long v6 = 0u;
    long long v7 = 0u;
    long long v5 = 0u;
    memset(v4, 0, sizeof(v4));
    GetMacroContext(*(void **)(this + 392), v4);
    if (!LOBYTE(v4[0]))
    {
      unint64_t v3 = ci_logger_render();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
        ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
      }
    }
    this = (*((uint64_t (**)(void, uint64_t, uint64_t))&v5 + 1))(*((void *)&v4[0] + 1), 3, v1 + 792);
    *(_DWORD *)(v1 + 800) = 0;
    *unsigned int v2 = 0;
  }
  if (*(void *)(v1 + 400))
  {
    if (*(unsigned char *)(v1 + 762)) {
      return CI::GLContext::set_framebuffer(v1, 0);
    }
  }
  return this;
}

BOOL CI::GLContext::set_user_destination(CI::GLContext *this)
{
  int v1 = *((unsigned __int8 *)this + 760);
  if (*((unsigned char *)this + 760))
  {
    *((unsigned char *)this + 762) = 1;
    *((unsigned char *)this + 780) = 0;
    CI::GLContext::check_user_destination(this);
    uint64_t v3 = *(void *)((char *)this + 772);
    v4.i64[0] = (int)v3;
    v4.i64[1] = SHIDWORD(v3);
    *((float64x2_t *)this + 32) = vcvtq_f64_s64(v4);
    *((_DWORD *)this + 132) = *((_DWORD *)this + 191);
    *((_DWORD *)this + 133) = -1;
    *((_DWORD *)this + 135) = 36161;
  }
  return v1 != 0;
}

uint64_t CI::GLContext::user_destination_format(CI::GLContext *this)
{
  if (!*((unsigned char *)this + 760)) {
    return 0;
  }
  int v1 = *((_DWORD *)this + 192);
  if (v1 <= 35445)
  {
    if (v1 == 34836) {
      return 2312;
    }
    if (v1 == 34842) {
      return 2056;
    }
  }
  else if ((v1 - 35446) < 2 || v1 == 37874 || v1 == 37881)
  {
    return 2567;
  }
  return 264;
}

BOOL CI::GLContext::is_user_destination_srgb(CI::GLContext *this)
{
  int v1 = *((_DWORD *)this + 192);
  return v1 == 35447 || v1 == 37874 || v1 == 37881;
}

uint64_t CI::GLContext::insert_fence(void **this)
{
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v4 = 0u;
  long long v5 = 0u;
  memset(v3, 0, sizeof(v3));
  GetMacroContext(this[49], v3);
  if (!LOBYTE(v3[0]))
  {
    int v1 = ci_logger_render();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  return ((uint64_t (*)(void, uint64_t, void))v4)(*((void *)&v3[0] + 1), 37143, 0);
}

uint64_t CI::GLContext::bind_render_target(void **this)
{
  v21[1] = *MEMORY[0x1E4F143B8];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  memset(v4, 0, sizeof(v4));
  GetMacroContext(this[49], v4);
  if (!LOBYTE(v4[0]))
  {
    unsigned int v2 = ci_logger_render();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  uint64_t result = CI::GLContext::set_framebuffer((uint64_t)this, *((unsigned int *)this + 132));
  if ((*((_DWORD *)this + 133) & 0x80000000) == 0)
  {
    if (*((_DWORD *)this + 135) == 36161)
    {
      return (*((uint64_t (**)(void, uint64_t, uint64_t, uint64_t))&v9 + 1))(*((void *)&v4[0] + 1), 36160, 36064, 36161);
    }
    else
    {
      uint64_t result = ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))v10)(*((void *)&v4[0] + 1), 36160, 36064, 3553);
      if (*((_DWORD *)this + 199))
      {
        ((void (*)(void, uint64_t, uint64_t, uint64_t, void, void))v10)(*((void *)&v4[0] + 1), 36160, 36065, 3553, *((unsigned int *)this + 134), 0);
        v21[0] = 0x8CE100008CE0;
        return ((uint64_t (*)(void, uint64_t, void *))v5)(*((void *)&v4[0] + 1), 2, v21);
      }
    }
  }
  return result;
}

void CI::GLContext::render_root_node(uint64_t a1, CI::TileTask *a2, CI::parentROI *this, uint64_t a4, uint64_t a5)
{
  uint64_t v143 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)this;
  v104.origin.float x = CI::parentROI::roi(this);
  v104.origin.float y = v11;
  v104.size.double width = v12;
  v104.size.double height = v13;
  if (!v10) {
    return;
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    long long v14 = ci_signpost_log_render();
    os_signpost_id_t v15 = *(int *)(v10 + 36) | (unint64_t)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1) << 32);
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 256;
      *(_WORD *)&buf[8] = 2082;
      *(void *)&buf[10] = CI::Context::programName((dispatch_queue_t *)v10, v16);
      _os_signpost_emit_with_name_impl(&dword_193671000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v15, "render_node", "%{public}.256s", buf, 0x12u);
    }
  }
  uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  TimerBase::TimerBase((uint64_t)v102, v17, *(_DWORD *)(v10 + 36), (uint64_t)"render_node", 0);
  CI::TileTask::addROIForNode(a2, (CI::ProgramNode *)v10, &v104);
  if (!*(unsigned char *)(a1 + 760) || !*(unsigned char *)(a1 + 762) || *(unsigned char *)(a1 + 761))
  {
    uint64_t v18 = *(void *)(v10 + 48);
    if ((*(int (**)(uint64_t))(*(void *)v18 + 16))(v18) >= 41
      && (*(int (**)(uint64_t))(*(void *)v18 + 16))(v18) <= 42)
    {
      if (*(unsigned char *)(a1 + 780) && *(void *)(a1 + 784))
      {
        CI::GLContext::flush_render((void **)a1);
        long long v19 = *(__IOSurface **)(a1 + 784);
        int v20 = *(_DWORD *)(a1 + 544);
        LODWORD(v100) = *(_DWORD *)(a1 + 532);
        HIDWORD(v100) = v20;
        uint64_t v101 = 0;
        v144.var0.var0 = (unint64_t)&v100;
        long long v21 = (CI::Context *)CI::Context::render_processor_node((CI::Context *)a1, a2, this, v19, v144);
        uint64_t v101 = 0;
        uint64_t v100 = 0;
        long long v22 = CI::Context::render_completion_queue(v21);
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ___ZN2CI9GLContext16render_root_nodeEPNS_8TileTaskERKNS_9parentROIEU13block_pointerFvvES7__block_invoke;
        block[3] = &unk_1E5773A18;
        block[4] = a5;
        dispatch_async(v22, block);
      }
      goto LABEL_46;
    }
    CI::GLContext::bind_render_target((void **)a1);
    v145.size.double width = *(CGFloat *)(a1 + 512);
    v145.size.double height = *(CGFloat *)(a1 + 520);
    v145.origin.float x = 0.0;
    v145.origin.float y = 0.0;
    CI::GLContext::set_viewport((CI::GLContext *)a1, v145);
    if (*(unsigned char *)(a1 + 762) || *(unsigned char *)(a1 + 780))
    {
      if (*(void *)(a1 + 400))
      {
        CI::GLContext::set_blend((void **)a1, *(_DWORD *)(a1 + 804) != 0, *(unsigned int *)(a1 + 808), *(unsigned int *)(a1 + 820), *(unsigned int *)(a1 + 812), *(unsigned int *)(a1 + 824), *(unsigned int *)(a1 + 816), *(unsigned int *)(a1 + 828));
        goto LABEL_21;
      }
      int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 288))(a1);
      uint64_t v24 = a1;
    }
    else
    {
      uint64_t v24 = a1;
      int v23 = 0;
    }
    CI::GLContext::set_blend(v24, v23);
LABEL_21:
    CMatrix::CMatrix((CMatrix *)v98, 4u, 4u);
    double v25 = 2.0 / *(double *)(a1 + 512);
    *(void *)buf = CMatrix::operator[](v98, 0);
    *(void *)&buf[8] = v26;
    *(double *)CMatrixRow::operator[]((uint64_t)buf, 0) = v25;
    double v27 = 2.0 / *(double *)(a1 + 520);
    *(void *)buf = CMatrix::operator[](v98, 1u);
    *(void *)&buf[8] = v28;
    *(double *)CMatrixRow::operator[]((uint64_t)buf, 1u) = v27;
    *(void *)buf = CMatrix::operator[](v98, 3u);
    *(void *)&buf[8] = v29;
    *(void *)CMatrixRow::operator[]((uint64_t)buf, 1u) = 0xBFF0000000000000;
    *(void *)float v95 = CMatrix::operator[](v98, 3u);
    uint64_t v96 = v30;
    *(void *)CMatrixRow::operator[]((uint64_t)v95, 0) = 0xBFF0000000000000;
    *(void *)buf = CMatrix::operator[](v98, 3u);
    *(void *)&buf[8] = v31;
    *(void *)CMatrixRow::operator[]((uint64_t)buf, 3u) = 0x3FF0000000000000;
    *(void *)float v95 = CMatrix::operator[](v98, 3u);
    uint64_t v96 = v32;
    *(void *)CMatrixRow::operator[]((uint64_t)v95, 2u) = 0x3FF0000000000000;
    if (CI_VERBOSE_SIGNPOSTS())
    {
      long long v33 = ci_signpost_log_render();
      os_signpost_id_t v34 = *(int *)(v10 + 36) | (unint64_t)((*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1) << 32);
      if (v34 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v33))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v33, OS_SIGNPOST_INTERVAL_BEGIN, v34, "render_node_mainProgram", "", buf, 2u);
      }
    }
    uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
    TimerBase::TimerBase((uint64_t)buf, v35, *(_DWORD *)(v10 + 36), (uint64_t)"render_node_mainProgram", 0);
    long long v36 = (unsigned int *)CI::ProgramNode::mainProgram((dispatch_queue_t *)v10);
    if ((*(unsigned int (**)(unsigned int *))(*(void *)v36 + 16))(v36) != 71) {
      long long v36 = 0;
    }
    if (CI_VERBOSE_SIGNPOSTS())
    {
      long long v37 = ci_signpost_log_render();
      os_signpost_id_t v38 = *(void *)&buf[8];
      if ((unint64_t)(*(void *)&buf[8] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        long long v39 = v37;
        if (os_signpost_enabled(v37))
        {
          *(_WORD *)float v95 = 0;
          _os_signpost_emit_with_name_impl(&dword_193671000, v39, OS_SIGNPOST_INTERVAL_END, v38, "render_node_mainProgram", "", v95, 2u);
        }
      }
    }
    TimerBase::~TimerBase((TimerBase *)buf);
    uint64_t v40 = v36[35];
    if (v40
      || ((*(void (**)(unsigned int *, void))(*(void *)v36 + 80))(v36, *(unsigned int *)(v10 + 36)),
          uint64_t v40 = v36[35],
          v40))
    {
      CI::GLContext::set_program(a1, v40);
      CI::GLContext::bind_arguments((void **)a1, (const CI::ProgramNode *)v10, &v104, a2);
      CI::GLContext::quad((void **)a1, *(_DWORD *)(v10 + 36), 0, &v104.origin.x, (CMatrix *)v98);
    }
    if (*(_DWORD *)(a1 + 796))
    {
      uint64_t v89 = a4;
      uint64_t v90 = a5;
      long long v140 = 0u;
      long long v139 = 0u;
      long long v138 = 0u;
      long long v137 = 0u;
      long long v136 = 0u;
      long long v135 = 0u;
      long long v134 = 0u;
      long long v133 = 0u;
      long long v132 = 0u;
      long long v131 = 0u;
      long long v130 = 0u;
      long long v129 = 0u;
      long long v128 = 0u;
      long long v127 = 0u;
      long long v126 = 0u;
      long long v125 = 0u;
      long long v124 = 0u;
      long long v123 = 0u;
      long long v122 = 0u;
      long long v121 = 0u;
      long long v120 = 0u;
      long long v119 = 0u;
      long long v118 = 0u;
      long long v117 = 0u;
      long long v116 = 0u;
      long long v115 = 0u;
      long long v114 = 0u;
      long long v113 = 0u;
      long long v111 = 0u;
      long long v112 = 0u;
      memset(buf, 0, sizeof(buf));
      GetMacroContext(*(void **)(a1 + 392), buf);
      if (!buf[0])
      {
        long long v41 = ci_logger_render();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
          ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
        }
      }
      size_t WidthOfPlane = IOSurfaceGetWidthOfPlane(*(IOSurfaceRef *)(a1 + 784), 1uLL);
      size_t HeightOfPlane = IOSurfaceGetHeightOfPlane(*(IOSurfaceRef *)(a1 + 784), 1uLL);
      int v45 = CI::format_from_IOSurface(*(CI **)(a1 + 784), v44);
      int v46 = CI::format_of_plane_old(v45, 1);
      uint64_t v47 = *(unsigned int *)(a1 + 544);
      (*((void (**)(void, uint64_t, uint64_t))&v131 + 1))(*(void *)&buf[8], 1, a1 + 800);
      (*((void (**)(void, uint64_t, void))&v113 + 1))(*(void *)&buf[8], v47, *(unsigned int *)(a1 + 800));
      *(_DWORD *)float v95 = v46;
      *(_WORD *)&v95[4] = 0;
      int API = CIEAGLContextGetAPI(*(void **)(a1 + 392));
      uint64_t v49 = CI::gl_format_info_for_format((uint64_t)v95, API);
      CIEAGLContextTexImageIOSurface(*(void **)(a1 + 392), v47, WidthOfPlane, HeightOfPlane, v49, SHIDWORD(v49), v50, *(__IOSurface **)(a1 + 784), 1u);
      CI::GLContext::set_framebuffer(a1, *(unsigned int *)(a1 + 528));
      int v97 = 36064;
      ((void (*)(void, uint64_t, uint64_t, uint64_t, void, void))v130)(*(void *)&buf[8], 36160, 36064, v47, *(unsigned int *)(a1 + 800), 0);
      ((void (*)(void, uint64_t, int *))v125)(*(void *)&buf[8], 1, &v97);
      v146.size.double width = (double)WidthOfPlane;
      v146.size.double height = (double)HeightOfPlane;
      v146.origin.float x = 0.0;
      v146.origin.float y = 0.0;
      CI::GLContext::set_viewport((CI::GLContext *)a1, v146);
      CI::GLContext::set_blend(a1, 0);
      if (!*(_DWORD *)(a1 + 888))
      {
        uint64_t v51 = ((uint64_t (*)(void))v119)(*(void *)&buf[8]);
        uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
        uint64_t v53 = CI::GLContext::compile_shader(v52, *(_DWORD *)(v10 + 36), *(void **)(a1 + 392), (uint64_t)"attribute highp vec4 position;\n"
                         "attribute highp vec4 texcoord;\n"
                         "varying highp vec2 p0;\n"
                         "void main()\n"
                         "{\n"
                         "  gl_Position = position;\n"
                         "  p0 = texcoord.xy;\n"
                         "}\n",
                35633);
        (*(void (**)(void, uint64_t, uint64_t))&buf[24])(*(void *)&buf[8], v51, v53);
        uint64_t v54 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
        uint64_t v55 = CI::GLContext::compile_shader(v54, *(_DWORD *)(v10 + 36), *(void **)(a1 + 392), (uint64_t)"varying highp vec2 p0;\n"
                         "uniform sampler2D s0;\n"
                         "void main()\n"
                         "{\n"
                         "  gl_FragColor = texture2D(s0, p0);\n"
                         "}\n",
                35632);
        (*(void (**)(void, uint64_t, uint64_t))&buf[24])(*(void *)&buf[8], v51, v55);
        (*((void (**)(void, uint64_t, void, const char *))&v111 + 1))(*(void *)&buf[8], v51, 0, "position");
        (*((void (**)(void, uint64_t, uint64_t, const char *))&v111 + 1))(*(void *)&buf[8], v51, 1, "texcoord");
        v141(*(void *)&buf[8], v51);
        (*((void (**)(void, uint64_t))&v121 + 1))(*(void *)&buf[8], v53);
        (*((void (**)(void, uint64_t))&v121 + 1))(*(void *)&buf[8], v55);
        *(_DWORD *)(a1 + 888) = v51;
        *(_DWORD *)(a1 + 892) = (*((uint64_t (**)(void, uint64_t, const char *))&v138 + 1))(*(void *)&buf[8], v51, "s0");
      }
      (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 80))(a1, *(unsigned int *)(a1 + 796), v47, 1, 1, 0);
      CI::GLContext::set_program(a1, *(unsigned int *)(a1 + 888));
      v142(*(void *)&buf[8], *(unsigned int *)(a1 + 892), 0);
      float y = v104.origin.y;
      float x = v104.origin.x;
      *(float *)&v105[2] = x;
      *(float *)&v105[3] = y;
      float v107 = x;
      float32x2_t v58 = vcvt_f32_f64(vaddq_f64((float64x2_t)v104.origin, (float64x2_t)v104.size));
      *(float *)&v105[1] = y;
      v105[0] = v58.i32[0];
      float32x2_t v106 = v58;
      __int32 v108 = v58.i32[1];
      __asm { FMOV            V1.2D, #0.5 }
      float64x2_t v64 = vcvtq_f64_f32(vrndp_f32(vcvt_f32_f64(vmulq_f64((float64x2_t)v104.size, _Q1))));
      int8x8_t v65 = (int8x8_t)vcvt_f32_f64(vdivq_f64((float64x2_t)v104.size, vaddq_f64(v64, v64)));
      __int32 is_ycc_444 = CI::format_is_ycc_444(v45);
      int is_ycc_422 = CI::format_is_ycc_422(v45);
      uint64_t v70 = 0;
      v71.i32[0] = is_ycc_444;
      v71.i32[1] = is_ycc_422 | is_ycc_444;
      __asm { FMOV            V9.2S, #1.0 }
      float32x2_t v73 = (float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(v71, 0x1FuLL)), (int8x8_t)_D9, v65);
      __asm { FMOV            V11.2S, #-1.0 }
      a4 = v89;
      a5 = v90;
      do
      {
        long long v75 = (float *)&v105[v70];
        double v76 = *(float *)&v105[v70];
        double v77 = *(float *)&v105[v70 + 1];
        CMatrix::CMatrix((CMatrix *)v95, 1u, 4u, v76, v68, v69, *(void *)&v77, 0, 0x3FF0000000000000);
        CMatrix::operator*((unsigned int *)v95, v98, (unsigned int *)&v93);
        CMatrix::operator=((unsigned int *)v95, (unsigned int *)&v93);
        uint64_t v93 = CMatrix::operator[]((unsigned int *)v95, 0);
        uint64_t v94 = v78;
        float64_t v91 = *(double *)CMatrixRow::operator[]((uint64_t)&v93, 0);
        uint64_t v93 = CMatrix::operator[]((unsigned int *)v95, 0);
        uint64_t v94 = v79;
        long long v80 = (float64_t *)CMatrixRow::operator[]((uint64_t)&v93, 1u);
        v81.f64[0] = v91;
        v81.f64[1] = *v80;
        *(float32x2_t *)&v109[v70 * 4] = vmla_f32(_D11, v73, vadd_f32(vcvt_f32_f64(v81), _D9));
        *(float *)v81.f64 = v76 / *(double *)(a1 + 512);
        float v82 = v77 / *(double *)(a1 + 520);
        *long long v75 = *(float *)v81.f64;
        v75[1] = v82;
        v70 += 2;
      }
      while (v70 != 8);
      CI::GLContext::quad((void **)a1, *(_DWORD *)(v10 + 36), (uint64_t)v109, (uint64_t)v105);
    }
    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2000000000;
    *(void *)&buf[24] = *(void *)(a1 + 416);
    uint64_t inserted = CI::GLContext::insert_fence((void **)a1);
    CI::GLContext::finish_render((void **)a1, a4);
    if (a2) {
      v84 = (CI::Context *)CI::Object::ref((uint64_t)a2);
    }
    float v85 = CI::Context::render_completion_queue(v84);
    v92[0] = MEMORY[0x1E4F143A8];
    v92[1] = 0x40000000;
    v92[2] = ___ZN2CI9GLContext16render_root_nodeEPNS_8TileTaskERKNS_9parentROIEU13block_pointerFvvES7__block_invoke_39;
    v92[3] = &unk_1E5773A40;
    v92[6] = inserted;
    v92[7] = a2;
    v92[4] = a5;
    v92[5] = buf;
    dispatch_async(v85, v92);
    _Block_object_dispose(buf, 8);
  }
LABEL_46:
  if (CI_VERBOSE_SIGNPOSTS())
  {
    float v86 = ci_signpost_log_render();
    os_signpost_id_t v87 = v103;
    if (v103 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      float v88 = v86;
      if (os_signpost_enabled(v86))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v88, OS_SIGNPOST_INTERVAL_END, v87, "render_node", "", buf, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)v102);
}

uint64_t ___ZN2CI9GLContext16render_root_nodeEPNS_8TileTaskERKNS_9parentROIEU13block_pointerFvvES7__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void CI::GLContext::bind_arguments(void **this, const CI::ProgramNode *a2, const CGRect *a3, CI::TileTask *a4)
{
  *(void *)&v85[116] = *MEMORY[0x1E4F143B8];
  if (CI_VERBOSE_SIGNPOSTS())
  {
    long long v6 = ci_signpost_log_render();
    os_signpost_id_t v7 = *((int *)a2 + 9) | (unint64_t)((*((uint64_t (**)(void **))*this + 34))(this) << 32);
    if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v7, "bind_arguments", "", buf, 2u);
    }
  }
  uint64_t v8 = (*((uint64_t (**)(void **))*this + 34))(this);
  TimerBase::TimerBase((uint64_t)v80, v8, *((_DWORD *)a2 + 9), (uint64_t)"bind_arguments", 11);
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  *(_OWORD *)buf = 0u;
  long long v41 = 0u;
  GetMacroContext(this[49], buf);
  if (!buf[0])
  {
    long long v9 = ci_logger_render();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  dispatch_queue_t v10 = CI::ProgramNode::mainProgram((dispatch_queue_t *)a2);
  if ((*((unsigned int (**)(dispatch_queue_t))v10->isa + 2))(v10) == 71)
  {
    Class isa = v10[13].isa;
    Class v11 = v10[14].isa;
    Class v13 = v10[15].isa;
    if (CI_VERBOSE_SIGNPOSTS())
    {
      long long v14 = ci_signpost_log_render();
      os_signpost_id_t v15 = *((int *)a2 + 9) | (unint64_t)((*((uint64_t (**)(void **))*this + 34))(this) << 32);
      if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
      {
        *(_WORD *)float v82 = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v15, "render_node_arguments", "", v82, 2u);
      }
    }
    uint64_t v16 = (*((uint64_t (**)(void **))*this + 34))(this);
    TimerBase::TimerBase((uint64_t)v82, v16, *((_DWORD *)a2 + 9), (uint64_t)"render_node_arguments", 0);
    dispatch_sync(*((dispatch_queue_t *)a2 + 13), &__block_literal_global_77);
    uint64_t v17 = (int *)*((void *)a2 + 16);
    if (CI_VERBOSE_SIGNPOSTS())
    {
      uint64_t v18 = ci_signpost_log_render();
      os_signpost_id_t v19 = v83;
      if ((unint64_t)(v83 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        int v20 = v18;
        if (os_signpost_enabled(v18))
        {
          LOWORD(v38.origin.x) = 0;
          _os_signpost_emit_with_name_impl(&dword_193671000, v20, OS_SIGNPOST_INTERVAL_END, v19, "render_node_arguments", "", (uint8_t *)&v38, 2u);
        }
      }
    }
    TimerBase::~TimerBase((TimerBase *)v82);
    if (v17 && isa == (Class)*v17 && isa)
    {
      unint64_t v21 = 0;
      unsigned int v34 = 0;
      long long v22 = (CI::TextureSampler **)(v17 + 6);
      while (2)
      {
        int v23 = v22;
        if (v21 >= 0xA) {
          int v23 = (CI::TextureSampler **)(*((void *)v17 + 2) + 8 * (v21 - 10));
        }
        int v24 = *((_DWORD *)v13 + v21);
        double v25 = *v23;
        switch(v24)
        {
          case 1:
          case 2:
          case 3:
          case 4:
            if ((*(unsigned int (**)(CI::TextureSampler *))(*(void *)v25 + 16))(v25) == 60)
            {
              if (*((_DWORD *)v11 + v21) != -1)
              {
                CI::ProgramNode::roiKeys_of_child(a2, *a3, *((unsigned int *)v25 + 8), v82);
                CI::Context::bind_sampler(this, (uint64_t)v25, *(uint64_t *)v82, v34, v24, a4);
                v73(*(void *)&buf[8], *((unsigned int *)v11 + v21), v34);
                if (*(void *)v82)
                {
                  uint64_t v83 = *(void *)v82;
                  operator delete(*(void **)v82);
                }
              }
              ++v34;
              goto LABEL_62;
            }
            break;
          case 5:
          case 12:
            if ((*(unsigned int (**)(CI::TextureSampler *))(*(void *)v25 + 16))(v25) == 58)
            {
              if (*((_DWORD *)v11 + v21) != -1) {
                v72(*(void *)&buf[8], *((float *)v25 + 7));
              }
              goto LABEL_62;
            }
            break;
          case 6:
          case 13:
            if ((*(unsigned int (**)(CI::TextureSampler *))(*(void *)v25 + 16))(v25) == 58)
            {
              if (*((_DWORD *)v11 + v21) != -1) {
                v74(*(void *)&buf[8], *((float *)v25 + 7), *((float *)v25 + 8));
              }
              goto LABEL_62;
            }
            break;
          case 7:
          case 14:
            if ((*(unsigned int (**)(CI::TextureSampler *))(*(void *)v25 + 16))(v25) == 58)
            {
              if (*((_DWORD *)v11 + v21) != -1) {
                v75(*(void *)&buf[8], *((float *)v25 + 7), *((float *)v25 + 8), *((float *)v25 + 9));
              }
              goto LABEL_62;
            }
            break;
          case 8:
          case 15:
          case 27:
            if ((*(unsigned int (**)(CI::TextureSampler *))(*(void *)v25 + 16))(v25) == 58)
            {
              if (*((_DWORD *)v11 + v21) != -1) {
                v76(*(void *)&buf[8], *((float *)v25 + 7), *((float *)v25 + 8), *((float *)v25 + 9), *((float *)v25 + 10));
              }
              goto LABEL_62;
            }
            break;
          case 9:
          case 16:
            if ((*(unsigned int (**)(CI::TextureSampler *))(*(void *)v25 + 16))(v25) == 58)
            {
              if (*((_DWORD *)v11 + v21) != -1) {
                v77(*(void *)&buf[8]);
              }
              goto LABEL_62;
            }
            break;
          case 10:
          case 17:
            if ((*(unsigned int (**)(CI::TextureSampler *))(*(void *)v25 + 16))(v25) == 58)
            {
              if (*((_DWORD *)v11 + v21) != -1) {
                v78(*(void *)&buf[8]);
              }
              goto LABEL_62;
            }
            break;
          case 11:
          case 18:
            if ((*(unsigned int (**)(CI::TextureSampler *))(*(void *)v25 + 16))(v25) == 58)
            {
              if (*((_DWORD *)v11 + v21) != -1) {
                v79(*(void *)&buf[8]);
              }
              goto LABEL_62;
            }
            break;
          case 19:
            if ((*(unsigned int (**)(CI::TextureSampler *))(*(void *)v25 + 16))(v25) == 58)
            {
              uint64_t v26 = *((unsigned int *)v11 + v21);
              if (v26 != -1) {
                v73(*(void *)&buf[8], v26, (int)*((float *)v25 + 7));
              }
              goto LABEL_62;
            }
            break;
          case 40:
            if ((*(unsigned int (**)(CI::TextureSampler *))(*(void *)v25 + 16))(v25) == 60)
            {
              if (*((_DWORD *)v11 + v21) == -1) {
                goto LABEL_62;
              }
              memset(&v38, 0, sizeof(v38));
              v38.origin.float x = CI::Node::region_of_child(a2, *a3);
              v38.origin.float y = v27;
              v38.size.double width = v28;
              v38.size.double height = v29;
              CI::TextureSampler::transform(v25, (const CI::Context *)this, &v38, (float64x2_t *)&v39);
              CI::Vector::Vector((CI::Vector *)v82, &v39);
              ((void (*)(void, void, uint64_t, void, unsigned char *))v78)(*(void *)&buf[8], *((unsigned int *)v11 + v21), 1, 0, v85);
              v84 = &unk_1EE45B0E8;
              goto LABEL_61;
            }
            break;
          case 41:
          case 42:
          case 43:
          case 46:
          case 47:
            goto LABEL_62;
          case 44:
            if ((*(unsigned int (**)(CI::TextureSampler *))(*(void *)v25 + 16))(v25) != 58) {
              break;
            }
            CI::Vector::affine(v25, (double *)v82);
            CI::Affine::inverse((CI::Affine *)v82, &v38.origin.x);
            CI::Affine::inverse((CI::Affine *)&v38, &v37.a);
            CI::Vector::Vector((CI::Vector *)v82, &v37);
            uint64_t v30 = *((unsigned int *)v11 + v21);
            if (v30 != -1) {
              ((void (*)(void, uint64_t, uint64_t, void, unsigned char *))v78)(*(void *)&buf[8], v30, 1, 0, v85);
            }
            v84 = &unk_1EE45B0E8;
LABEL_61:
            atomic_fetch_add(dword_1EB466F58, 0xFFFFFFFF);
LABEL_62:
            ++v21;
            ++v22;
            if (isa == (Class)v21) {
              break;
            }
            continue;
          default:
            x_log("Unhandled type: %d\n", *((_DWORD *)v13 + v21));
            goto LABEL_62;
        }
        break;
      }
    }
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    uint64_t v31 = ci_signpost_log_render();
    os_signpost_id_t v32 = v81;
    if (v81 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      long long v33 = v31;
      if (os_signpost_enabled(v31))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v33, OS_SIGNPOST_INTERVAL_END, v32, "bind_arguments", "", buf, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)v80);
}

uint64_t ___ZN2CI9GLContext16render_root_nodeEPNS_8TileTaskERKNS_9parentROIEU13block_pointerFvvES7__block_invoke_39(void *a1)
{
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  memset(v6, 0, sizeof(v6));
  GetMacroContext(*(void **)(*(void *)(a1[5] + 8) + 24), v6);
  if (!LOBYTE(v6[0]))
  {
    unsigned int v2 = ci_logger_render();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI9GLContext16render_root_nodeEPNS_8TileTaskERKNS_9parentROIEU13block_pointerFvvES7__block_invoke_39_cold_1();
    }
  }
  ((void (*)(void, void, void, uint64_t))v7)(*((void *)&v6[0] + 1), a1[6], 0, -1);
  ((void (*)(void, void))v12)(*((void *)&v6[0] + 1), a1[6]);
  uint64_t v3 = a1[7];
  *(CFAbsoluteTime *)(v3 + 40) = CFAbsoluteTimeGetCurrent();
  long long v4 = (CI::Object *)a1[7];
  if (v4) {
    CI::Object::unref(v4);
  }
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

void CI::GLContext::render_intermediate_node(CI::GLContext *a1, CI::TileTask *a2, CI::parentROI *this, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v100 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *(void *)this;
  v66.origin.double x = CI::parentROI::roi(this);
  v66.origin.double y = v12;
  v66.size.CGFloat width = v13;
  v66.size.CGFloat height = v14;
  if (a4 && v11)
  {
    if (CI_VERBOSE_SIGNPOSTS())
    {
      long long v15 = ci_signpost_log_render();
      os_signpost_id_t v16 = *(int *)(v11 + 36) | (unint64_t)((*(uint64_t (**)(CI::GLContext *))(*(void *)a1 + 272))(a1) << 32);
      if (v16 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v15))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 256;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = CI::Context::programName((dispatch_queue_t *)v11, v17);
        _os_signpost_emit_with_name_impl(&dword_193671000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v16, "render_node", "%{public}.256s", buf, 0x12u);
      }
    }
    uint64_t v18 = (*(uint64_t (**)(CI::GLContext *))(*(void *)a1 + 272))(a1);
    TimerBase::TimerBase((uint64_t)v64, v18, *(_DWORD *)(v11 + 36), (uint64_t)"render_node", 0);
    CI::TileTask::addROIForNode(a2, (CI::ProgramNode *)v11, &v66);
    long long v98 = 0u;
    long long v99 = 0u;
    long long v96 = 0u;
    long long v97 = 0u;
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    long long v90 = 0u;
    long long v91 = 0u;
    long long v88 = 0u;
    long long v89 = 0u;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v84 = 0u;
    long long v85 = 0u;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    memset(buf, 0, sizeof(buf));
    GetMacroContext(*((void **)a1 + 49), buf);
    if (!buf[0])
    {
      long long v19 = ci_logger_render();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
      }
    }
    uint64_t v20 = *(void *)(v11 + 48);
    if ((*(int (**)(uint64_t))(*(void *)v20 + 16))(v20) < 41
      || (*(int (**)(uint64_t))(*(void *)v20 + 16))(v20) > 42)
    {
      CI::GLContext::set_framebuffer((uint64_t)a1, *((unsigned int *)a1 + 188));
      long long v29 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))v89;
      uint64_t v30 = *(void *)&buf[8];
      (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a4 + 24))(v67, a4);
      v29(v30, 36160, 36064, 3553, *(unsigned int *)v67, 0);
      double x = v66.origin.x;
      double y = v66.origin.y;
      CGFloat width = v66.size.width;
      CGFloat height = v66.size.height;
      if (*(unsigned char *)(v11 + 148))
      {
        CGRect v102 = *(CGRect *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
        CGFloat MidY = CGRectGetMidY(v102);
        v62.b = 0.0;
        v62.c = 0.0;
        v62.a = 1.0;
        *(_OWORD *)&v62.d = xmmword_193951E50;
        v62.tdouble y = MidY + MidY;
        v103.origin.double x = x;
        v103.origin.double y = y;
        v103.size.CGFloat width = width;
        v103.size.CGFloat height = height;
        CGRect v104 = CGRectApplyAffineTransform(v103, &v62);
        double x = v104.origin.x;
        double y = v104.origin.y;
        CGFloat width = v104.size.width;
        CGFloat height = v104.size.height;
      }
      CGFloat v36 = x - *(double *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
      v105.origin.double y = y - *(double *)((*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4) + 8);
      v105.origin.double x = v36;
      v105.size.CGFloat width = width;
      v105.size.CGFloat height = height;
      CI::GLContext::set_viewport(a1, v105);
      CI::GLContext::set_blend((uint64_t)a1, 0);
      if (CI_VERBOSE_SIGNPOSTS())
      {
        CGAffineTransform v37 = ci_signpost_log_render();
        os_signpost_id_t v38 = *(int *)(v11 + 36) | (unint64_t)((*(uint64_t (**)(CI::GLContext *))(*(void *)a1 + 272))(a1) << 32);
        if (v38 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v37))
        {
          *(_WORD *)long long v67 = 0;
          _os_signpost_emit_with_name_impl(&dword_193671000, v37, OS_SIGNPOST_INTERVAL_BEGIN, v38, "render_node_mainProgram", "", v67, 2u);
        }
      }
      uint64_t v39 = (*(uint64_t (**)(CI::GLContext *))(*(void *)a1 + 272))(a1);
      TimerBase::TimerBase((uint64_t)v67, v39, *(_DWORD *)(v11 + 36), (uint64_t)"render_node_mainProgram", 0);
      uint64_t v40 = (unsigned int *)CI::ProgramNode::mainProgram((dispatch_queue_t *)v11);
      if ((*(unsigned int (**)(unsigned int *))(*(void *)v40 + 16))(v40) != 71) {
        uint64_t v40 = 0;
      }
      if (CI_VERBOSE_SIGNPOSTS())
      {
        long long v41 = ci_signpost_log_render();
        os_signpost_id_t v42 = *(void *)&v68[4];
        if ((unint64_t)(*(void *)&v68[4] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        {
          long long v43 = v41;
          if (os_signpost_enabled(v41))
          {
            *(_WORD *)long long v58 = 0;
            _os_signpost_emit_with_name_impl(&dword_193671000, v43, OS_SIGNPOST_INTERVAL_END, v42, "render_node_mainProgram", "", v58, 2u);
          }
        }
      }
      TimerBase::~TimerBase((TimerBase *)v67);
      uint64_t v44 = v40[35];
      if (v44
        || ((*(void (**)(unsigned int *, void))(*(void *)v40 + 80))(v40, *(unsigned int *)(v11 + 36)),
            uint64_t v44 = v40[35],
            v44))
      {
        CI::GLContext::set_program((uint64_t)a1, v44);
        CI::GLContext::bind_arguments((void **)a1, (const CI::ProgramNode *)v11, &v66, a2);
        CI::GLContext::quad((void **)a1, *(_DWORD *)(v11 + 36), *(unsigned __int8 *)(v11 + 148), &v66.origin.x, 0);
      }
    }
    else
    {
      uint64_t v21 = *(void *)(v11 + 48);
      if (*(unsigned char *)(v21 + 153) && (*(int (**)(void))(*(void *)v21 + 40))(*(void *)(v11 + 48)) >= 1)
      {
        if (CI_VERBOSE_SIGNPOSTS())
        {
          log = ci_signpost_log_render();
          os_signpost_id_t v22 = *(int *)(v21 + 36) | (unint64_t)((*(uint64_t (**)(CI::GLContext *))(*(void *)a1 + 272))(a1) << 32);
          if (v22 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(log))
          {
            uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 24))(v21);
            *(_DWORD *)long long v67 = 138543362;
            *(void *)long long v68 = v23;
            _os_signpost_emit_with_name_impl(&dword_193671000, log, OS_SIGNPOST_INTERVAL_BEGIN, v22, "processor_syncinputs", "%{public}@", v67, 0xCu);
          }
        }
        uint64_t v24 = (*(uint64_t (**)(CI::GLContext *))(*(void *)a1 + 272))(a1);
        TimerBase::TimerBase((uint64_t)v67, v24, *(_DWORD *)(v21 + 36), (uint64_t)"processor_syncinputs", 0);
        CI::GLContext::flush_render((void **)a1);
        if (CI_VERBOSE_SIGNPOSTS())
        {
          long long v25 = ci_signpost_log_render();
          os_signpost_id_t v26 = *(void *)&v68[4];
          if ((unint64_t)(*(void *)&v68[4] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
          {
            long long v27 = v25;
            if (os_signpost_enabled(v25))
            {
              *(_WORD *)long long v58 = 0;
              _os_signpost_emit_with_name_impl(&dword_193671000, v27, OS_SIGNPOST_INTERVAL_END, v26, "processor_syncinputs", "", v58, 2u);
            }
          }
        }
        TimerBase::~TimerBase((TimerBase *)v67);
      }
      long long v28 = (__IOSurface *)(**(uint64_t (***)(uint64_t))a4)(a4);
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)a4 + 24))(v63, a4);
      v101.var0.var0 = (unint64_t)v63;
      CI::Context::render_processor_node(a1, a2, this, v28, v101);
      v63[0] = 0;
      v63[1] = 0;
    }
    if (CI_VERBOSE_SIGNPOSTS())
    {
      long long v45 = ci_signpost_log_render();
      os_signpost_id_t v46 = *(int *)(v11 + 36) | (unint64_t)((*(uint64_t (**)(CI::GLContext *))(*(void *)a1 + 272))(a1) << 32);
      if (v46 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v45))
      {
        *(_WORD *)long long v67 = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v45, OS_SIGNPOST_INTERVAL_BEGIN, v46, "after_render", "", v67, 2u);
      }
    }
    uint64_t v47 = (*(uint64_t (**)(CI::GLContext *))(*(void *)a1 + 272))(a1);
    TimerBase::TimerBase((uint64_t)v67, v47, *(_DWORD *)(v11 + 36), (uint64_t)"after_render", 8);
    *(void *)long long v58 = 0;
    long long v59 = v58;
    uint64_t v60 = 0x2000000000;
    uint64_t v61 = *((void *)a1 + 52);
    uint64_t inserted = (CI::Context *)CI::GLContext::insert_fence((void **)a1);
    long long v49 = CI::Context::render_completion_queue(inserted);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN2CI9GLContext24render_intermediate_nodeEPNS_8TileTaskERKNS_9parentROIEPNS_14intermediate_tEbU13block_pointerFvvE_block_invoke;
    block[3] = &unk_1E5773A68;
    void block[5] = v58;
    void block[6] = inserted;
    block[4] = a6;
    dispatch_async(v49, block);
    _Block_object_dispose(v58, 8);
    if (CI_VERBOSE_SIGNPOSTS())
    {
      long long v50 = ci_signpost_log_render();
      os_signpost_id_t v51 = *(void *)&v68[4];
      if ((unint64_t)(*(void *)&v68[4] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        long long v52 = v50;
        if (os_signpost_enabled(v50))
        {
          *(_WORD *)long long v58 = 0;
          _os_signpost_emit_with_name_impl(&dword_193671000, v52, OS_SIGNPOST_INTERVAL_END, v51, "after_render", "", v58, 2u);
        }
      }
    }
    TimerBase::~TimerBase((TimerBase *)v67);
    if (CI_VERBOSE_SIGNPOSTS())
    {
      long long v53 = ci_signpost_log_render();
      os_signpost_id_t v54 = v65;
      if (v65 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        long long v55 = v53;
        if (os_signpost_enabled(v53))
        {
          *(_WORD *)buf = 0;
          _os_signpost_emit_with_name_impl(&dword_193671000, v55, OS_SIGNPOST_INTERVAL_END, v54, "render_node", "", buf, 2u);
        }
      }
    }
    TimerBase::~TimerBase((TimerBase *)v64);
  }
}

uint64_t ___ZN2CI9GLContext24render_intermediate_nodeEPNS_8TileTaskERKNS_9parentROIEPNS_14intermediate_tEbU13block_pointerFvvE_block_invoke(void *a1)
{
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  memset(v4, 0, sizeof(v4));
  GetMacroContext(*(void **)(*(void *)(a1[5] + 8) + 24), v4);
  if (!LOBYTE(v4[0]))
  {
    unsigned int v2 = ci_logger_render();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI9GLContext16render_root_nodeEPNS_8TileTaskERKNS_9parentROIEU13block_pointerFvvES7__block_invoke_39_cold_1();
    }
  }
  ((void (*)(void, void, void, uint64_t))v5)(*((void *)&v4[0] + 1), a1[6], 0, -1);
  ((void (*)(void, void))v10)(*((void *)&v4[0] + 1), a1[6]);
  return (*(uint64_t (**)(void))(a1[4] + 16))();
}

uint64_t CI::GLContext::pre_render(CI::GLContext *this)
{
  int v2 = *((_DWORD *)this + 226);
  uint64_t v3 = (CI *)CI_FORCE_GPU_PRIORITY();
  if (v3 <= 0x4Bu)
  {
    if ((_BYTE)v3)
    {
      if (v3 == 72) {
        int v2 = 0;
      }
      goto LABEL_11;
    }
    if (!CI::originating_process_is_in_background(v3)) {
      goto LABEL_11;
    }
    x_log("Using low GPU priority for background rendering.\n");
LABEL_10:
    int v2 = 2;
    goto LABEL_11;
  }
  if (v3 == 76) {
    goto LABEL_10;
  }
  if (v3 == 78) {
    int v2 = 1;
  }
LABEL_11:
  CIEAGLContextSetParameter(*((void **)this + 49), 608, v2);
  return 1;
}

void CI::GLContext::readback_bitmap(uint64_t a1, void *a2, int *a3)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  long long v6 = ci_signpost_log_render();
  os_signpost_id_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1) << 32;
  if (v7 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v6))
  {
    uint64_t v8 = a2[10];
    uint64_t v9 = a2[11];
    *(_DWORD *)buf = 134218240;
    *(void *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 2048;
    *(void *)&buf[14] = v9;
    _os_signpost_emit_with_name_impl(&dword_193671000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v7, "readback_bitmap", "[%zu %zu]", buf, 0x16u);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  TimerBase::TimerBase((uint64_t)&v36, v10, 0, (uint64_t)"readback_bitmap", 7);
  if (a2)
  {
    *(_DWORD *)buf = *a3;
    *(_WORD *)&buf[4] = 0;
    int API = CIEAGLContextGetAPI(*(void **)(a1 + 392));
    unint64_t v12 = CI::gl_format_info_for_format((uint64_t)buf, API);
    uint64_t v14 = v13;
    long long v15 = *(void **)(a1 + 392);
    uint64_t v16 = (int)*(double *)(a1 + 512);
    uint64_t v17 = (int)*(double *)(a1 + 520);
    uint64_t v18 = a2[9];
    unint64_t v19 = a2[12];
    unint64_t v20 = (int)CI::format_bytes_per_pixel(*a3);
    BOOL v21 = (int)v16 < 1 || (int)v17 < 1;
    BOOL v22 = v21 || v19 == 0;
    if (!v22 && v20 != 0)
    {
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v50 = 0u;
      long long v51 = 0u;
      long long v48 = 0u;
      long long v49 = 0u;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      memset(buf, 0, sizeof(buf));
      GetMacroContext(v15, buf);
      if (!buf[0])
      {
        long long v27 = ci_logger_render();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
          CI::GLTextureManager::release_texture((uint64_t)v15, v27, v28, v29, v30, v31, v32, v33);
        }
      }
      unsigned int v38 = 0;
      ((void (*)(void, uint64_t, unsigned int *))v63)(*(void *)&buf[8], 3333, &v38);
      uint64_t v34 = v20 * v16;
      if (v20 * v16 == v19)
      {
        v71(*(void *)&buf[8], 0, 0, v16, v17, HIDWORD(v12), v14, v18);
      }
      else
      {
        if ((v18 & 1) != 0 || ((v34 + 1) & 0xFFFFFFFFFFFFFFFELL) != v19)
        {
          if ((v18 & 3) != 0 || ((v34 + 3) & 0xFFFFFFFFFFFFFFFCLL) != v19)
          {
            if ((v18 & 7) != 0 || ((v34 + 7) & 0xFFFFFFFFFFFFFFF8) != v19)
            {
              if ((int)CIEAGLContextGetAPI(v15) < 3 || v19 % v20)
              {
                uint64_t v35 = 0;
                do
                {
                  v71(*(void *)&buf[8], 0, v35++, v16, 1, HIDWORD(v12), v14, v18);
                  v18 += v19;
                }
                while (v17 != v35);
              }
              else
              {
                v70(*(void *)&buf[8], 3330, (int)v19 / v20);
                v71(*(void *)&buf[8], 0, 0, v16, v17, HIDWORD(v12), v14, v18);
                v70(*(void *)&buf[8], 3330, 0);
              }
              goto LABEL_16;
            }
            v70(*(void *)&buf[8], 3333, 8uLL);
          }
          else
          {
            v70(*(void *)&buf[8], 3333, 4uLL);
          }
        }
        else
        {
          v70(*(void *)&buf[8], 3333, 2uLL);
        }
        v71(*(void *)&buf[8], 0, 0, v16, v17, HIDWORD(v12), v14, v18);
        v70(*(void *)&buf[8], 3333, v38);
      }
    }
  }
LABEL_16:
  long long v24 = ci_signpost_log_render();
  os_signpost_id_t v25 = v37;
  if (v37 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    long long v26 = v24;
    if (os_signpost_enabled(v24))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v26, OS_SIGNPOST_INTERVAL_END, v25, "readback_bitmap", "", buf, 2u);
    }
  }
  TimerBase::~TimerBase((TimerBase *)&v36);
}

uint64_t CI::GLContext::format_is_directly_supported_for_input(uint64_t a1, int a2)
{
  if (CI::format_is_ycc_biplanar(a2))
  {
    uint64_t v4 = CI::format_of_plane_old(a2, 0);
    uint64_t v5 = CI::format_of_plane_old(a2, 1);
    LODWORD(v4) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 424))(a1, v4);
    return v4 & (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)a1 + 424))(a1, v5);
  }
  int API = CIEAGLContextGetAPI(*(void **)(a1 + 392));
  uint64_t result = 0;
  BOOL v8 = API == 3;
  uint64_t v9 = 1;
  if (a2 <= 784)
  {
    if (((a2 - 257) > 0x14 || ((1 << (a2 - 1)) & 0x1802BD) == 0) && (a2 - 532) >= 2)
    {
      if (a2 != 784) {
        return result;
      }
      return 0;
    }
    return v9;
  }
  if (a2 <= 2308)
  {
    if ((a2 - 2053) > 3 || a2 == 2055)
    {
      uint64_t v9 = v8;
      if (a2 != 785)
      {
        if (a2 != 1800) {
          return result;
        }
        return CI_DISABLE_WORKAROUND() == 28765295;
      }
    }
    return v9;
  }
  if ((a2 - 2309) < 2) {
    return v9;
  }
  if (a2 == 2567) {
    return *(char *)(a1 + 880) < 0;
  }
  uint64_t v9 = v8;
  if (a2 == 2312) {
    return v9;
  }
  return result;
}

BOOL CI::GLContext::format_is_directly_supported_for_output(uint64_t a1, int a2, int a3)
{
  int API = CIEAGLContextGetAPI(*(void **)(a1 + 392));
  BOOL result = 0;
  uint64_t v8 = 1;
  if (a2 > 1798)
  {
    if (a2 > 2308)
    {
      if ((a2 - 2309) > 3 || a2 == 2311)
      {
        if (a2 != 2567) {
          return result;
        }
        return a3 == 2 && *(char *)(a1 + 880) < 0;
      }
      return v8;
    }
    if ((a2 - 2053) <= 3 && a2 != 2055) {
      return (*(unsigned __int8 *)(a1 + 880) >> 3) & 1;
    }
    if (a2 != 1799) {
      return result;
    }
    return a3 != 1;
  }
  if (a2 <= 273)
  {
    if ((a2 - 261) < 2) {
      return v8;
    }
    if (a2 != 263)
    {
      if (a2 != 264) {
        return result;
      }
      return v8;
    }
    return a3 != 1;
  }
  if (a2 > 783)
  {
    if (a2 == 784) {
      return 0;
    }
    if (a2 != 785) {
      return result;
    }
    return API == 3;
  }
  if (a2 == 274 || a2 == 530) {
    return (*(unsigned __int8 *)(a1 + 880) >> 2) & 1;
  }
  return result;
}

uint64_t CI::GLContext::bind_cgimage(void ***a1, CGImage *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2) {
    return 0;
  }
  uint64_t v10 = CI::GLTextureManager::texture_for_CGImage(a1[53], a2, a3);
  long long v11 = (*a1)[10];

  return ((uint64_t (*)(void ***, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v11)(a1, v10, 3553, a4, a5, a6);
}

BOOL CI::GLContext::bind_surface(uint64_t a1, IOSurfaceRef buffer, int *a3, char a4, int a5, int a6, int a7, int a8)
{
  if (buffer)
  {
    if (a5) {
      int v14 = 9729;
    }
    else {
      int v14 = 9728;
    }
    if (a6) {
      int v15 = 33071;
    }
    else {
      int v15 = 33069;
    }
    if (IOSurfaceGetPlaneCount(buffer) == 2)
    {
      int v16 = CI::format_of_plane_old(*a3, a8);
      uint64_t v17 = *(void *)(a1 + 424);
      int v21 = v16;
      __int16 v22 = 0;
      uint64_t v18 = *(NSObject **)(v17 + 104);
      uint64_t block = MEMORY[0x1E4F143A8];
      uint64_t v24 = 0x40000000;
      os_signpost_id_t v25 = ___ZN2CI16GLTextureManager16attach_IOSurfaceEP11__IOSurfacebiRKNS_17TextureDescriptorEiiib_block_invoke;
      long long v26 = &__block_descriptor_tmp_14;
      uint64_t v27 = v17;
      IOSurfaceRef v28 = buffer;
      char v34 = 1;
      uint64_t v29 = &v21;
    }
    else
    {
      uint64_t v19 = *(void *)(a1 + 424);
      uint64_t v18 = *(NSObject **)(v19 + 104);
      uint64_t block = MEMORY[0x1E4F143A8];
      uint64_t v24 = 0x40000000;
      os_signpost_id_t v25 = ___ZN2CI16GLTextureManager16attach_IOSurfaceEP11__IOSurfacebiRKNS_17TextureDescriptorEiiib_block_invoke;
      long long v26 = &__block_descriptor_tmp_14;
      uint64_t v27 = v19;
      IOSurfaceRef v28 = buffer;
      char v34 = 0;
      uint64_t v29 = a3;
    }
    int v30 = a8;
    int v31 = a7;
    char v35 = a4;
    int v32 = v14;
    int v33 = v15;
    dispatch_sync(v18, &block);
  }
  return buffer != 0;
}

uint64_t CI::GLContext::bind_texture(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  if (a2) {
    BOOL v6 = a3 == 3553;
  }
  else {
    BOOL v6 = 0;
  }
  uint64_t v7 = v6;
  if (v6)
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    GetMacroContext(*(void **)(a1 + 392), &v16);
    if (!(_BYTE)v16)
    {
      unint64_t v12 = ci_logger_render();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
      }
    }
    ((void (*)(void, void))v17)(*((void *)&v16 + 1), (a6 + 33984));
    (*((void (**)(void, uint64_t, uint64_t))&v20 + 1))(*((void *)&v16 + 1), 3553, a2);
    if (a4) {
      uint64_t v13 = 9729;
    }
    else {
      uint64_t v13 = 9728;
    }
    if (a5) {
      uint64_t v14 = 33071;
    }
    else {
      uint64_t v14 = 33069;
    }
    v48(*((void *)&v16 + 1), 3553, 10240, v13);
    v48(*((void *)&v16 + 1), 3553, 10241, v13);
    v48(*((void *)&v16 + 1), 3553, 10242, v14);
    v48(*((void *)&v16 + 1), 3553, 10243, v14);
  }
  return v7;
}

uint64_t CI::GLContext::bind_intermediate(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 80))(a1, *a2, a2[1], a3, a4, a5);
}

uint64_t CI::GLContext::supported_compute_features(void **this)
{
  if (CIEAGLContextGetAPI(this[49]) == 3) {
    return 36;
  }
  else {
    return 32;
  }
}

BOOL CI::GLContext::supports_sRGB_texture_for_format(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 2567:
      int v2 = 8;
      goto LABEL_7;
    case 266:
      int v2 = 6;
      goto LABEL_7;
    case 264:
      int v2 = 7;
LABEL_7:
      int API = CIEAGLContextGetAPI(*(void **)(a1 + 392));
      return CIGLGetFormatInfo(API, v2) != 0;
  }
  return 0;
}

uint64_t CI::GLContext::blitSurface(void **a1, CI *a2, unsigned int *a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v49 = 0u;
  memset(v48, 0, sizeof(v48));
  unint64_t v12 = a1 + 49;
  GetMacroContext(a1[49], v48);
  if (!LOBYTE(v48[0]))
  {
    uint64_t v14 = ci_logger_render();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  uint64_t v15 = CI::format_from_IOSurface(a2, v13);
  if (!(*((unsigned int (**)(void **, uint64_t, uint64_t))*a1 + 54))(a1, v15, 1)) {
    return 0;
  }
  int API = CIEAGLContextGetAPI(*v12);
  unint64_t v17 = CI::gl_format_info_for_format(a6, API);
  GLint v18 = v17;
  signed int v20 = v19;
  unint64_t v21 = HIDWORD(v17);
  long long v22 = (const char *)((uint64_t (*)(void, uint64_t))v74)(*((void *)&v48[0] + 1), 7936);
  BOOL v23 = v20 == 5126 || v20 == 5131;
  if (v23 && v21 == 6403)
  {
    long long v24 = "NVIDIA";
    size_t v25 = 6;
    goto LABEL_15;
  }
  if (v20 == 5123 && v21 == 6408)
  {
    long long v24 = "Intel";
    size_t v25 = 5;
LABEL_15:
    if (strncmp(v22, v24, v25)) {
      goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  long long v40 = a3;
  uint64_t v47 = 0;
  unsigned int v46 = 0;
  ((void (*)(void, uint64_t, uint64_t *))v71)(*((void *)&v48[0] + 1), 36006, &v47);
  ((void (*)(void, uint64_t, unsigned int *))v71)(*((void *)&v48[0] + 1), 32873, &v46);
  (*((void (**)(void, uint64_t, char *))&v68 + 1))(*((void *)&v48[0] + 1), 1, (char *)&v47 + 4);
  unsigned int v45 = 0;
  long long v41 = a1[52];
  (*((void (**)(void, uint64_t, unsigned int *))&v67 + 1))(*((void *)&v48[0] + 1), 1, &v45);
  (*((void (**)(void, uint64_t, void))&v49 + 1))(*((void *)&v48[0] + 1), 36160, v45);
  long long v26 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void, void))v67;
  uint64_t v27 = *((void *)&v48[0] + 1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a4 + 24))(&v44, a4);
  v26(v27, 36160, 36064, 3553, v44, 0);
  long long v28 = &qword_193950000;
  if (((unsigned int (*)(void, uint64_t))v53)(*((void *)&v48[0] + 1), 36160) == 36053)
  {
    (*((void (**)(void, uint64_t, void))&v50 + 1))(*((void *)&v48[0] + 1), 3553, HIDWORD(v47));
    long long v29 = *v12;
    size_t Width = IOSurfaceGetWidth(a2);
    size_t Height = IOSurfaceGetHeight(a2);
    uint64_t v39 = ((uint64_t (*)(void, uint64_t))v74)(*((void *)&v48[0] + 1), 7936);
    if (CIEAGLContextTexImageIOSurface(v29, 0xDE1u, Width, Height, v18, v21, v20, a2, 0))
    {
      (*((void (**)(void, uint64_t, void))&v50 + 1))(*((void *)&v48[0] + 1), 3553, HIDWORD(v47));
      (*((void (**)(void, uint64_t, void, void, void, void, void, void, _DWORD, uint64_t))&v55 + 1))(*((void *)&v48[0] + 1), 3553, 0, *v40, v40[1], *a5, a5[1], a5[2], *((void *)a5 + 2), v39);
      uint64_t inserted = (CI::Context *)CI::GLContext::insert_fence(a1);
      long long v33 = CI::Context::render_completion_queue(inserted);
      block[0] = MEMORY[0x1E4F143A8];
      long long v28 = &qword_193950000;
      block[1] = 0x40000000;
      block[2] = ___ZNK2CI9GLContext11blitSurfaceEP11__IOSurface5IRectPNS_14intermediate_tES3_RKNS_17TextureDescriptorE_block_invoke;
      block[3] = &__block_descriptor_tmp_46;
      block[4] = a1;
      long long v34 = v41;
      void block[5] = v41;
      void block[6] = inserted;
      void block[7] = a4;
      dispatch_async(v33, block);
      uint64_t v35 = 1;
    }
    else
    {
      uint64_t v35 = 0;
      uint64_t inserted = 0;
      long long v34 = v41;
      long long v28 = &qword_193950000;
    }
  }
  else
  {
    uint64_t v35 = 0;
    uint64_t inserted = 0;
    long long v34 = v41;
  }
  ((void (*)(void, uint64_t, unsigned int *))v57)(*((void *)&v48[0] + 1), 1, &v45);
  (*((void (**)(void, uint64_t, char *))&v59 + 1))(*((void *)&v48[0] + 1), 1, (char *)&v47 + 4);
  (*((void (**)(void, uint64_t, void))&v49 + 1))(*((void *)&v48[0] + 1), 36160, v47);
  long long v36 = (CI::Context *)(*((uint64_t (**)(void, uint64_t, void))&v50 + 1))(*((void *)&v48[0] + 1), 3553, v46);
  long long v37 = CI::Context::render_completion_queue(v36);
  v42[0] = MEMORY[0x1E4F143A8];
  v42[1] = v28[197];
  v42[2] = ___ZNK2CI9GLContext11blitSurfaceEP11__IOSurface5IRectPNS_14intermediate_tES3_RKNS_17TextureDescriptorE_block_invoke_47;
  __int16 v42[3] = &__block_descriptor_tmp_48;
  v42[4] = v34;
  v42[5] = inserted;
  dispatch_async(v37, v42);
  return v35;
}

void ___ZNK2CI9GLContext11blitSurfaceEP11__IOSurface5IRectPNS_14intermediate_tES3_RKNS_17TextureDescriptorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  memset(v5, 0, sizeof(v5));
  GetMacroContext(*(void **)(a1 + 40), v5);
  if (!LOBYTE(v5[0]))
  {
    uint64_t v3 = ci_logger_render();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  ((void (*)(void, void, void, uint64_t))v6)(*((void *)&v5[0] + 1), *(void *)(a1 + 48), 0, -1);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 112))(v2);
  CI::TextureManager::complete_intermediate(v4, 52, *(void *)(a1 + 56));
}

uint64_t ___ZNK2CI9GLContext11blitSurfaceEP11__IOSurface5IRectPNS_14intermediate_tES3_RKNS_17TextureDescriptorE_block_invoke_47(uint64_t a1)
{
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  long long v5 = 0u;
  memset(v4, 0, sizeof(v4));
  GetMacroContext(*(void **)(a1 + 32), v4);
  if (!LOBYTE(v4[0]))
  {
    uint64_t v2 = ci_logger_render();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1();
    }
  }
  return ((uint64_t (*)(void, void))v5)(*((void *)&v4[0] + 1), *(void *)(a1 + 40));
}

uint64_t CI::GLMainProgram::type(CI::GLMainProgram *this)
{
  return 71;
}

const char *CI::MainProgram::get_type_name(CI::MainProgram *this)
{
  return "cikl";
}

uint64_t non-virtual thunk to'CI::GLMainProgram::type(CI::GLMainProgram *this)
{
  return 71;
}

uint64_t CI::GLContext::type(CI::GLContext *this)
{
  return 76;
}

uint64_t CI::GLContext::bind_texture()
{
  return 0;
}

uint64_t CI::GLContext::texture_manager(CI::GLContext *this)
{
  return *((void *)this + 53);
}

uint64_t CI::GLContext::is_cpu(CI::GLContext *this)
{
  return 0;
}

const char *CI::GLContext::deviceName(CI::GLContext *this)
{
  if (*((void *)this + 112)) {
    return (const char *)*((void *)this + 112);
  }
  else {
    return "Unknown OpenGL Device";
  }
}

uint64_t CI::Context::switch_dictionary(CI::Context *this)
{
  return 0;
}

uint64_t CI::GLContext::max_texture_size(CI::GLContext *this)
{
  return *((int *)this + 208);
}

uint64_t CI::GLContext::max_render_load_bytes(CI::GLContext *this)
{
  uint64_t v1 = *((void *)this + 45);
  if (v1) {
    return v1 << 20;
  }
  else {
    return 0x8000000;
  }
}

uint64_t CI::GLContext::max_device_memory(CI::GLContext *this)
{
  return *((void *)this + 109);
}

uint64_t CI::GLContext::supportsDeferredCGImage(CI::GLContext *this)
{
  return *((unsigned __int8 *)this + 909);
}

BOOL CI::GLContext::supports_edge_mode(uint64_t a1, int a2)
{
  return a2 == 1;
}

uint64_t CI::GLContext::supports_sample_mode(uint64_t a1, int a2, int a3)
{
  if (a2 == 1) {
    return CI::format_is_full_float(a3) ^ 1;
  }
  else {
    return 1;
  }
}

double CI::GLContext::sampler_transform_for_extent@<D0>(const CGRect *a1@<X1>, double *a2@<X8>)
{
  double y = a1->origin.y;
  double v4 = 1.0 / a1->size.height;
  CGFloat v5 = a1->origin.x * -0.0 - y * v4 + 0.0;
  double v6 = 1.0 / a1->size.width;
  double v7 = y * -0.0 - a1->origin.x * v6;
  *a2 = v6 + 0.0;
  a2[1] = v4 * 0.0 + 0.0;
  a2[2] = v6 * 0.0 + 0.0;
  a2[3] = v4 + 0.0;
  double result = v7 + 0.0;
  a2[4] = result;
  a2[5] = v5;
  return result;
}

void CI::GLContext::createMainProgram()
{
}

uint64_t non-virtual thunk to'CI::GLContext::type(CI::GLContext *this)
{
  return 76;
}

void ___ZN2CIL18CI_SUBDIVIDE_QUADSEv_block_invoke()
{
  v0 = getenv("CI_SUBDIVIDE_QUADS");
  if (v0) {
    *(double *)&uint64_t v1 = atof(v0);
  }
  else {
    uint64_t v1 = CI::CI_SUBDIVIDE_QUADS(void)::v;
  }
  CI::CI_SUBDIVIDE_QUADS(void)::v = v1;
}

uint64_t CI::InstanceCounted<(CI::Type)58>::type()
{
  return 58;
}

void *CI::InstanceCounted<(CI::Type)58>::~InstanceCounted(void *result)
{
  *double result = &unk_1EE45B0E8;
  atomic_fetch_add(dword_1EB466F58, 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)58>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B0E8;
  atomic_fetch_add(dword_1EB466F58, 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)71>::type()
{
  return 71;
}

void *CI::InstanceCounted<(CI::Type)71>::~InstanceCounted(void *result)
{
  *double result = &unk_1EE456A80;
  atomic_fetch_add(&dword_1EB466F58[13], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)71>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE456A80;
  atomic_fetch_add(&dword_1EB466F58[13], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)76>::type()
{
  return 76;
}

void *CI::InstanceCounted<(CI::Type)76>::~InstanceCounted(void *result)
{
  *double result = &unk_1EE456D08;
  atomic_fetch_add(&dword_1EB466F58[18], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)76>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE456D08;
  atomic_fetch_add(&dword_1EB466F58[18], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void OUTLINED_FUNCTION_3_3(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void ___ZN2CI19MetalTextureManagerC2EPNS_12MetalContextE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  CGFloat v5 = ci_signpost_log_render();
  uint64_t v6 = *(unsigned int *)(a1 + 40);
  if ((unint64_t)((v6 << 32) - 1) <= 0xFFFFFFFFFFFFFFFDLL)
  {
    double v7 = v5;
    if (os_signpost_enabled(v5))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v7, OS_SIGNPOST_INTERVAL_BEGIN, v6 << 32, "release_surface_block", "", buf, 2u);
      uint64_t v6 = *(unsigned int *)(a1 + 40);
    }
  }
  TimerBase::TimerBase((uint64_t)buf, v6, 0, (uint64_t)"release_surface_block", 32);
  uint64_t v8 = *(void *)(v4 + 136);
  uint64_t v9 = *(void *)(v8 + 8);
  while (v9 != v8)
  {
    uint64_t v10 = v9 + 8;
    uint64_t v9 = *(void *)(v9 + 8);
    uint64_t v13 = *(void *)(v10 + 8);
    if ((**(uint64_t (***)(uint64_t))v13)(v13) == a2)
    {
      long long v12 = *(_OWORD *)(v13 + 8);
      (**(void (***)(uint64_t, long long *))v4)(v4, &v12);
      long long v12 = 0uLL;
      std::list<CI::attached_surface_t *>::remove(*(void **)(v4 + 136), &v13);
      long long v11 = (const void *)(**(uint64_t (***)(uint64_t))v13)(v13);
      CFRelease(v11);
      if (v13) {
        (*(void (**)(uint64_t))(*(void *)v13 + 48))(v13);
      }
    }
    uint64_t v8 = *(void *)(v4 + 136);
  }
  _ZZZN2CI19MetalTextureManagerC1EPNS_12MetalContextEEUb_EN13SignpostTimerD1Ev((TimerBase *)buf);
}

void sub_1938C9E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  _ZZZN2CI19MetalTextureManagerC1EPNS_12MetalContextEEUb_EN13SignpostTimerD1Ev((TimerBase *)va);
  _Unwind_Resume(a1);
}

void _ZZZN2CI19MetalTextureManagerC1EPNS_12MetalContextEEUb_EN13SignpostTimerD1Ev(TimerBase *a1)
{
  uint64_t v2 = ci_signpost_log_render();
  os_signpost_id_t v3 = *((void *)a1 + 1);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)CGFloat v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v4, OS_SIGNPOST_INTERVAL_END, v3, "release_surface_block", "", v5, 2u);
    }
  }
  TimerBase::~TimerBase(a1);
}

void sub_1938C9EDC(_Unwind_Exception *a1)
{
  TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

void CI::MetalTextureManager::~MetalTextureManager(CI::MetalTextureManager *this)
{
  *(void *)this = &unk_1EE45D1C8;
  uint64_t v2 = *((void *)this + 12);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = ___ZN2CI19MetalTextureManager19purge_intermediatesEm_block_invoke;
  v3[3] = &__block_descriptor_48_e5_v8__0l;
  v3[4] = this;
  v3[5] = 0;
  dispatch_async(v2, v3);
  dispatch_sync(*((dispatch_queue_t *)this + 12), &__block_literal_global_82);
  CI::TextureManager::remove_all(this);
  if (CI_RECYCLE_METAL_TEXTURES() && CI_IOSURFACE_INTERMEDIATES()) {
    RemoveReleaseSurfaceBlock(*((void *)this + 13));
  }
  CI::TextureManager::~TextureManager((dispatch_queue_t *)this);
}

{
  uint64_t vars8;

  CI::MetalTextureManager::~MetalTextureManager(this);

  JUMPOUT(0x1997023B0);
}

void sub_1938C9FC0(_Unwind_Exception *a1)
{
  CI::TextureManager::~TextureManager(v1);
  _Unwind_Resume(a1);
}

uint64_t CI::MetalTextureManager::convert_to_sRGB(uint64_t a1, void *a2)
{
  (*(void (**)(void *__return_ptr, void *))(*a2 + 24))(v15, a2);
  uint64_t v4 = (void *)v15[0];
  LOBYTE(v15[0]) = 0;
  uint64_t result = CIFormatFromCIMetalTextureFormat([v4 pixelFormat], v15);
  if (!LOBYTE(v15[0]))
  {
    unsigned int v6 = CIMetalFormatForFormat(result, 1);
    uint64_t v7 = [v4 width];
    uint64_t v8 = [v4 height];
    uint64_t v9 = *(void *)(a1 + 168);
    uint64_t v10 = *(void *)(v9 + 1920);
    long long v11 = (void *)[*(id *)(v9 + 392) device];
    uint64_t v12 = (*(uint64_t (**)(void *))*a2)(a2);
    uint64_t v13 = CIMetalTextureCreateFromPaddedIOSurface(v7, v8, v10, v11, v12, 0, v6, [v4 usage]);
    (*(void (**)(void *__return_ptr, void *))(*a2 + 24))(v14, a2);
    uint64_t result = (**(uint64_t (***)(uint64_t, void *))a1)(a1, v14);
    a2[1] = v13;
    a2[2] = 0;
  }
  return result;
}

uint64_t CI::MetalTextureManager::create_intermediate(uint64_t a1, unsigned __int8 *a2, CI *this, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v13 = CI::format_from_IOSurface_ignore_values(this, (__IOSurface *)a2);
  CI::Context::swizzler_for_output(*(void *)(a1 + 168), v13, 1, &v33);
  int v14 = CIMetalFormatForFormat(v33.i32[0], (a2[4] >> 1) & 1);
  int v15 = CIMetalFormatForFormat(v33.i32[1], (a2[4] >> 1) & 1);
  signed int PixelFormat = IOSurfaceGetPixelFormat(this);
  int v17 = PixelFormat >> 24;
  uint64_t v29 = 0;
  long long v30 = &v29;
  uint64_t v31 = 0x2020000000;
  BOOL v18 = (PixelFormat & 0xFD000000) == 0x2D000000 || v17 == 38;
  uint64_t v32 = 0;
  long long v19 = *(NSObject **)(a1 + 104);
  block[0] = MEMORY[0x1E4F143A8];
  BOOL v20 = v18 || v17 == 124;
  block[1] = 3221225472;
  block[2] = ___ZN2CI19MetalTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke;
  block[3] = &unk_1E5773B48;
  if (v20) {
    int v21 = 16391;
  }
  else {
    int v21 = 7;
  }
  block[4] = &v29;
  void block[5] = a1;
  void block[6] = this;
  void block[7] = a5;
  int v25 = v14;
  int v26 = v21;
  int v27 = v15;
  void block[8] = a6;
  char v28 = a7;
  dispatch_sync(v19, block);
  uint64_t v22 = v30[3];
  _Block_object_dispose(&v29, 8);
  return v22;
}

void ___ZN2CI19MetalTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(CI::TextureManager **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 56);
  v31.CGFloat width = (double)*(unint64_t *)(v3 + 8);
  v31.CGFloat height = (double)*(unint64_t *)(v3 + 16);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CI::TextureManager::_find_match_for_surface(v2, *(IOSurfaceRef *)(a1 + 48), v31);
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
    || !CI_RECYCLE_METAL_TEXTURES()
    || ((*(void (**)(CFTypeRef *__return_ptr))(**(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24)
                                                        + 24))(cf),
        CIMetalTextureGetFormat((void *)cf[0]) != *(_DWORD *)(a1 + 72)))
  {
    operator new();
  }
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4))
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 24))(&v29);
    CGFloat v5 = *(uint64_t **)(a1 + 56);
    uint64_t v6 = *v5;
    uint64x2_t v7 = *(uint64x2_t *)(v5 + 1);
    int v8 = *v5;
    if (v8 == -2147483647)
    {
      if (HIDWORD(v6) == -2147483647 && *(_OWORD *)&v7 == __PAIR128__(0xFFFFFFFFLL, 0xFFFFFFFFLL))
      {
        uint64_t v9 = (float64x2_t *)MEMORY[0x1E4F1DB10];
        goto LABEL_30;
      }
    }
    else if (v8 == 0x7FFFFFFF && HIDWORD(v6) == 0x7FFFFFFF && *(_OWORD *)&v7 == 0)
    {
      uint64_t v9 = (float64x2_t *)MEMORY[0x1E4F1DB20];
LABEL_30:
      float64x2_t v25 = *v9;
      float64x2_t v24 = v9[1];
      goto LABEL_32;
    }
    v26.i64[0] = (int)v6;
    v26.i64[1] = SHIDWORD(v6);
    float64x2_t v25 = vcvtq_f64_s64(v26);
    float64x2_t v24 = vcvtq_f64_u64(v7);
LABEL_32:
    *(float64x2_t *)cf = v25;
    float64x2_t v28 = v24;
    v30.var0.var0 = (unint64_t)&v29;
    v30.var0.var2.var1 = 0;
    CI::TextureManager::intermediate(v2, v30, (__IOSurface *)cf, 0);
  }
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 24))(cf);
  CFGetRetainCount(cf[0]);
  [*(id *)(*((void *)v2 + 21) + 392) device];
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 24))(cf);
  [(id)cf[0] device];
  uint64_t v10 = *(uint64_t **)(a1 + 56);
  uint64_t v11 = *v10;
  uint64x2_t v12 = *(uint64x2_t *)(v10 + 1);
  int v13 = *v10;
  if (v13 == -2147483647)
  {
    if (HIDWORD(v11) == -2147483647 && *(_OWORD *)&v12 == __PAIR128__(0xFFFFFFFFLL, 0xFFFFFFFFLL))
    {
      int v14 = (float64x2_t *)MEMORY[0x1E4F1DB10];
      goto LABEL_19;
    }
LABEL_20:
    v17.i64[0] = (int)v11;
    v17.i64[1] = SHIDWORD(v11);
    float64x2_t v16 = vcvtq_f64_s64(v17);
    float64x2_t v15 = vcvtq_f64_u64(v12);
    goto LABEL_21;
  }
  if (v13 != 0x7FFFFFFF || HIDWORD(v11) != 0x7FFFFFFF || *(_OWORD *)&v12 != 0) {
    goto LABEL_20;
  }
  int v14 = (float64x2_t *)MEMORY[0x1E4F1DB20];
LABEL_19:
  float64x2_t v16 = *v14;
  float64x2_t v15 = v14[1];
LABEL_21:
  BOOL v18 = *(float64x2_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  v18[2] = v16;
  v18[3] = v15;
  uint64_t v19 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  *(void *)(v19 + 64) += *(void *)(a1 + 64);
  *(unsigned char *)(*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) + 72) = *(unsigned char *)(a1 + 84);
  BOOL v20 = *(uint64_t (****)(void))(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v20 && (**v20)(v20) && *(void *)(a1 + 64) >= 2uLL)
  {
    unint64_t v21 = 1;
    do
    {
      uint64_t v22 = *(uint64_t (****)(void))(*(void *)(*(void *)(a1 + 32) + 8) + 24);
      long long v23 = (const void *)(**v22)(v22);
      RetainSurfaceFromCache(v23);
      ++v21;
    }
    while (v21 < *(void *)(a1 + 64));
  }
}

uint64_t CI::MetalTextureManager::create_intermediate(void *a1, uint64_t a2, uint64_t a3, CGFloat *a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v86 = *MEMORY[0x1E4F143B8];
  CGFloat v14 = *a4;
  CGFloat v15 = a4[1];
  CGFloat v16 = a4[2];
  CGFloat v17 = a4[3];
  v87.origin.double x = *a4;
  v87.origin.double y = v15;
  v87.size.unint64_t width = v16;
  v87.size.unint64_t height = v17;
  if (CGRectIsNull(v87)) {
    return 0;
  }
  v88.origin.double x = v14;
  v88.origin.double y = v15;
  v88.size.unint64_t width = v16;
  v88.size.unint64_t height = v17;
  if (CGRectIsInfinite(v88))
  {
    long long v83 = IRectInfinite;
    unint64_t height = 0xFFFFFFFFLL;
    unint64_t v84 = 0xFFFFFFFFLL;
    unint64_t width = 0xFFFFFFFFLL;
  }
  else
  {
    v89.origin.double x = v14;
    v89.origin.double y = v15;
    v89.size.unint64_t width = v16;
    v89.size.unint64_t height = v17;
    CGRect v90 = CGRectInset(v89, 0.000001, 0.000001);
    CGRect v91 = CGRectIntegral(v90);
    unint64_t width = (unint64_t)v91.size.width;
    unint64_t height = (unint64_t)v91.size.height;
    LODWORD(v83) = (int)v91.origin.x;
    DWORD1(v83) = (int)v91.origin.y;
    *((void *)&v83 + 1) = (unint64_t)v91.size.width;
    unint64_t v84 = (unint64_t)v91.size.height;
  }
  if (!width || height == 0) {
    return 0;
  }
  int v22 = CIMetalFormatForFormat(*(_DWORD *)a2, (*(unsigned __int8 *)(a2 + 4) >> 1) & 1);
  int v53 = v22;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  char v55 = a7;
  uint64_t v54 = a3;
  if (*(unsigned char *)(a2 + 6)
    || CI::MetalContext::use_imageblocks_for_format(a1[21], *(_DWORD *)a2)
    && CI_ENABLE_METAL_IMAGEBLOCKS() == 2)
  {
    int v23 = 7;
  }
  else
  {
    int v23 = 3;
  }
  int v52 = v23;
  uint64_t v79 = 0;
  long long v80 = &v79;
  uint64_t v81 = 0x2020000000;
  uint64_t v82 = 0;
  uint64_t v75 = 0;
  long long v76 = &v75;
  uint64_t v77 = 0x2020000000;
  uint64_t v78 = 0;
  uint64_t v71 = 0;
  long long v72 = &v71;
  uint64_t v73 = 0x2020000000;
  char v74 = 0;
  int is_packed = CI::format_is_packed(*(_DWORD *)a2);
  int v25 = is_packed;
  if (((height * width) & 0xFFFFFFFFFFFF0000) != 0 && width > 0xF && height > 0xF) {
    int v28 = 1;
  }
  else {
    int v28 = is_packed;
  }
  if (*(unsigned char *)(a2 + 7)) {
    BOOL v29 = 1;
  }
  else {
    BOOL v29 = (*(unsigned __int8 *)(a2 + 5) | *(unsigned __int8 *)(a2 + 6)) == 0;
  }
  int v30 = !v29;
  LODWORD(v49) = (*(uint64_t (**)(void))(*(void *)a1[21] + 168))(a1[21]);
  HIDWORD(v49) = v25;
  if (CI_PRINT_TREE_dump_intermediates() & 1) != 0 || (CI_PRINT_TREE_dump_raw_intermediates()) {
    int v31 = 1;
  }
  else {
    int v31 = CI_PRINT_TREE_dump_bmtl_intermediates();
  }
  uint64_t v32 = objc_msgSend(*(id *)(a1[21] + 392), "device", v49);
  char v34 = CIMetalDeviceSupportsFamilyApple7(v32, v33);
  uint64_t v35 = (void *)[*(id *)(a1[21] + 392) device];
  char v37 = CIMetalDeviceSupportsFamilyApple8(v35, v36);
  if ((v30 | v31 | v28 ^ 1))
  {
    char v38 = 0;
    char v39 = 0;
  }
  else
  {
    char v40 = v37;
    int v41 = CI_LOSSY_COMPRESSED_INTERMEDIATES();
    int v42 = CI_LOSSLESS_COMPRESSED_INTERMEDIATES();
    if (v41) {
      char v43 = v40;
    }
    else {
      char v43 = 0;
    }
    char v38 = v43 & v50;
    if (v42) {
      char v39 = v34;
    }
    else {
      char v39 = 0;
    }
  }
  if (v51)
  {
    if ((v39 & 1) == 0)
    {
      uint64_t v44 = ci_logger_render();
      if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
        unsigned int v45 = CI::name_for_format(*(_DWORD *)a2);
        CI::MetalTextureManager::create_intermediate((uint64_t)v45, buf, v44);
      }
    }
  }
  unsigned int v46 = a1[13];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN2CI19MetalTextureManager19create_intermediateERKNS_22IntermediateDescriptorENS_17NodeContentDigestERK6CGRectmmb_block_invoke;
  block[3] = &unk_1E5773B70;
  void block[8] = v54;
  void block[9] = a2;
  char v68 = v39;
  char v69 = v38;
  char v70 = v55;
  long long v59 = v83;
  unint64_t v60 = v84;
  unint64_t v61 = width;
  unint64_t v62 = height;
  uint64_t v63 = v56;
  block[4] = &v79;
  void block[5] = &v71;
  void block[6] = &v75;
  void block[7] = a1;
  long long v64 = a4;
  uint64_t v65 = v57;
  int v66 = v53;
  int v67 = v52;
  dispatch_sync(v46, block);
  uint64_t v47 = v80[3];
  if (v47) {
    uint64_t v21 = (*(uint64_t (**)(void *, uint64_t, uint64_t, void, long long *, uint64_t, void))(*a1 + 48))(a1, a2, v47, 0, &v83, v57, *((unsigned __int8 *)v72 + 24));
  }
  else {
    uint64_t v21 = v76[3];
  }
  _Block_object_dispose(&v71, 8);
  _Block_object_dispose(&v75, 8);
  _Block_object_dispose(&v79, 8);
  return v21;
}

void sub_1938CAE28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
}

void ___ZN2CI19MetalTextureManager19create_intermediateERKNS_22IntermediateDescriptorENS_17NodeContentDigestERK6CGRectmmb_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  if (CI_IOSURFACE_INTERMEDIATES())
  {
    CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"%llX(%04X)", *(void *)(a1 + 64), *(unsigned int *)(a1 + 144));
    uint64_t v4 = CI::PixelFormatType_from_format(**(_DWORD **)(a1 + 72));
    uint64_t v5 = v4;
    if (!*(unsigned char *)(a1 + 152)) {
      goto LABEL_85;
    }
    uint64_t v6 = equivalent_uncompressed_format(v4);
    uint64_t v5 = v6;
    if ((int)v6 <= 1647534391)
    {
      if ((int)v6 > 875836533)
      {
        if ((int)v6 <= 1278226735)
        {
          if ((int)v6 <= 1278226487)
          {
            if (v6 != 875836534)
            {
              if (v6 == 1111970369) {
                uint64_t v5 = 641877825;
              }
              goto LABEL_85;
            }
            int v12 = 641234482;
LABEL_80:
            uint64_t v5 = (v12 + 2);
            goto LABEL_85;
          }
          if (v6 == 1278226488)
          {
            uint64_t v5 = 642527288;
            goto LABEL_85;
          }
          if (v6 != 1278226536) {
            goto LABEL_85;
          }
          int v11 = 642527288;
LABEL_73:
          uint64_t v5 = (v11 + 48);
          goto LABEL_85;
        }
        if ((int)v6 > 1278226741)
        {
          if (v6 == 1278226742)
          {
            uint64_t v5 = 642527542;
          }
          else if (v6 == 1380411457)
          {
            uint64_t v5 = 642934849;
          }
        }
        else if (v6 == 1278226736)
        {
          uint64_t v5 = 642527536;
        }
        else if (v6 == 1278226738)
        {
          uint64_t v5 = 642527538;
        }
LABEL_85:
        if (!*(unsigned char *)(a1 + 153)) {
          goto LABEL_125;
        }
        int v14 = equivalent_uncompressed_format(v5);
        LODWORD(v5) = v14;
        if (v14 > 1380411456)
        {
          if (v14 > 1882469427)
          {
            if (v14 > 1885745713)
            {
              if (v14 != 1885745714)
              {
                if (v14 == 1885746228) {
                  LODWORD(v5) = 762865204;
                }
                goto LABEL_125;
              }
              unsigned __int16 v17 = 26162;
            }
            else
            {
              if (v14 != 1882469428)
              {
                if (v14 == 1885745712) {
                  LODWORD(v5) = 762865200;
                }
                goto LABEL_125;
              }
              unsigned __int16 v17 = 30260;
            }
            LODWORD(v5) = v17 | 0x2D780000;
          }
          else
          {
            if (v14 <= 1882468911)
            {
              if (v14 == 1380411457)
              {
                LODWORD(v5) = 760375361;
              }
              else if (v14 == 1751527984)
              {
                LODWORD(v5) = 761816624;
              }
              goto LABEL_125;
            }
            if (v14 == 1882468912)
            {
              LODWORD(v5) = 762869296;
              goto LABEL_125;
            }
            if (v14 == 1882468914)
            {
              int v15 = 762865202;
LABEL_116:
              LODWORD(v5) = v15 | 0x1000;
              goto LABEL_125;
            }
          }
          goto LABEL_125;
        }
        if (v14 <= 875704437)
        {
          if (v14 == 843264056)
          {
            LODWORD(v5) = 758263864;
            goto LABEL_125;
          }
          if (v14 != 843264104)
          {
            if (v14 == 875704422) {
              LODWORD(v5) = 758670896;
            }
            goto LABEL_125;
          }
          int v16 = 758263864;
        }
        else
        {
          if (v14 <= 1278226487)
          {
            if (v14 != 875704438)
            {
              if (v14 == 1111970369) {
                LODWORD(v5) = 759318337;
              }
              goto LABEL_125;
            }
            int v15 = 758670896;
            goto LABEL_116;
          }
          if (v14 == 1278226488)
          {
            LODWORD(v5) = 759967800;
            goto LABEL_125;
          }
          if (v14 != 1278226536)
          {
LABEL_125:
            if (*(unsigned char *)(a1 + 154))
            {
              long long v38 = *(_OWORD *)(a1 + 80);
              uint64_t v39 = *(void *)(a1 + 96);
              LODWORD(v36) = 0;
              uint64_t v18 = (*(uint64_t (**)(void))(**(void **)(v2 + 168) + 616))(*(void *)(v2 + 168));
              uint64_t v19 = *(void **)(v2 + 168);
              uint64_t v20 = v19[47];
              *((void *)&v36 + 1) = v18;
              uint64_t v37 = v20;
              int v21 = (*(uint64_t (**)(void *))(*v19 + 272))(v19);
              *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = GetValidSurfaceFromCache(&v38, v5, &v36, v21, 0, *(_DWORD *)(*(void *)(a1 + 72) + 12), (uint64_t)v3);
            }
            else
            {
              Mutable = CFArrayCreateMutable(0, *(void *)(*(void *)(v2 + 136) + 16), 0);
              if (CI_RECYCLE_METAL_TEXTURES())
              {
                uint64_t v23 = *(void *)(v2 + 136);
                for (uint64_t i = *(void *)(v23 + 8); i != v23; uint64_t i = *(void *)(i + 8))
                {
                  uint64_t v25 = *(void *)(i + 16);
                  if (!(*(uint64_t (**)(uint64_t))(*(void *)v25 + 16))(v25)
                    && *(double *)((*(uint64_t (**)(uint64_t))(*(void *)v25 + 32))(v25) + 16) == (double)*(unint64_t *)(a1 + 104)
                    && *(double *)((*(uint64_t (**)(uint64_t))(*(void *)v25 + 32))(v25) + 24) == (double)*(unint64_t *)(a1 + 112))
                  {
                    int64x2_t v26 = (const void *)(**(uint64_t (***)(uint64_t))v25)(v25);
                    CFArrayAppendValue(Mutable, v26);
                  }
                }
              }
              long long v34 = *(_OWORD *)(a1 + 80);
              uint64_t v35 = *(void *)(a1 + 96);
              uint64_t v27 = *(void *)(a1 + 120);
              LODWORD(v32) = 0;
              uint64_t v28 = (*(uint64_t (**)(void))(**(void **)(v2 + 168) + 616))(*(void *)(v2 + 168));
              BOOL v29 = *(void **)(v2 + 168);
              uint64_t v30 = v29[47];
              *((void *)&v32 + 1) = v28;
              uint64_t v33 = v30;
              int v31 = (*(uint64_t (**)(void *))(*v29 + 272))(v29);
              *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = GetSurfaceFromCache(&v34, v27, v27, v5, &v32, v31, 0, *(_DWORD *)(*(void *)(a1 + 72) + 12), (uint64_t)v3, *(void *)(*(void *)(a1 + 40) + 8)+ 24, Mutable);
              CFRelease(Mutable);
            }
            CFRelease(v3);
            return;
          }
          int v16 = 759967800;
        }
        LODWORD(v5) = v16 + 48;
        goto LABEL_125;
      }
      if ((int)v6 <= 875704437)
      {
        if (v6 == 843264056)
        {
          uint64_t v5 = 640823352;
          goto LABEL_85;
        }
        if (v6 == 843264104)
        {
          int v11 = 640823352;
          goto LABEL_73;
        }
        if (v6 != 875704422) {
          goto LABEL_85;
        }
        unsigned __int16 v10 = 26160;
      }
      else
      {
        if ((int)v6 <= 875704949)
        {
          if (v6 != 875704438)
          {
            if (v6 != 875704934) {
              goto LABEL_85;
            }
            int v8 = 641230384;
            goto LABEL_66;
          }
          int v13 = 641230384;
LABEL_69:
          uint64_t v5 = v13 | 0x1000u;
          goto LABEL_85;
        }
        if (v6 != 875704950)
        {
          if (v6 != 875836518) {
            goto LABEL_85;
          }
          int v7 = 641230384;
          goto LABEL_53;
        }
        unsigned __int16 v10 = 30258;
      }
      uint64_t v5 = v10 | 0x26380000u;
      goto LABEL_85;
    }
    if ((int)v6 <= 1885745713)
    {
      if ((int)v6 <= 1882468911)
      {
        switch(v6)
        {
          case 0x62336138:
            uint64_t v5 = 643969848;
            break;
          case 0x68663230:
            uint64_t v5 = 644376112;
            break;
          case 0x6C313072:
            uint64_t v5 = 644624754;
            break;
        }
        goto LABEL_85;
      }
      if ((int)v6 > 1882469427)
      {
        if (v6 == 1882469428)
        {
          int v12 = 645428786;
          goto LABEL_80;
        }
        if (v6 != 1885745712) {
          goto LABEL_85;
        }
        unsigned __int16 v9 = 26160;
      }
      else
      {
        if (v6 == 1882468912)
        {
          int v13 = 645424688;
          goto LABEL_69;
        }
        if (v6 != 1882468914) {
          goto LABEL_85;
        }
        unsigned __int16 v9 = 30258;
      }
      uint64_t v5 = v9 | 0x26780000u;
      goto LABEL_85;
    }
    if ((int)v6 > 2016687215)
    {
      if ((int)v6 > 2037741157)
      {
        if (v6 == 2037741158)
        {
          uint64_t v5 = 645494118;
        }
        else if (v6 == 2037741171)
        {
          uint64_t v5 = 645494131;
        }
      }
      else if (v6 == 2016687216)
      {
        uint64_t v5 = 640955504;
      }
      else if (v6 == 2019964016)
      {
        uint64_t v5 = 644232304;
      }
      goto LABEL_85;
    }
    if ((int)v6 > 1999843441)
    {
      if (v6 == 1999843442)
      {
        uint64_t v5 = 645346162;
      }
      else if (v6 == 1999908961)
      {
        uint64_t v5 = 645346401;
      }
      goto LABEL_85;
    }
    if (v6 == 1885745714)
    {
      int v8 = 645424688;
LABEL_66:
      uint64_t v5 = v8 | 2u;
      goto LABEL_85;
    }
    if (v6 != 1885746228) {
      goto LABEL_85;
    }
    int v7 = 645424688;
LABEL_53:
    uint64_t v5 = v7 | 4u;
    goto LABEL_85;
  }
  if (!*(unsigned char *)(a1 + 154)) {
    operator new();
  }
}

void *___ZN2CI19MetalTextureManager19purge_intermediatesEm_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(v1 + 136);
  unint64_t v3 = *(void *)(v2 + 16);
  v11[0] = (uint64_t)v11;
  v11[1] = (uint64_t)v11;
  v11[2] = 0;
  uint64_t v4 = *(void **)(v2 + 8);
  if (v4 != (void *)v2)
  {
    do
    {
      if (v3 <= *(void *)(a1 + 40) || (uint64_t v6 = v4[2], (*(uint64_t (**)(uint64_t))(*(void *)v6 + 16))(v6)))
      {
        uint64_t i = v4;
      }
      else
      {
        long long v12 = *(_OWORD *)(v6 + 8);
        (**(void (***)(uint64_t, long long *))v1)(v1, &v12);
        long long v12 = 0uLL;
        CFRelease(*(CFTypeRef *)(v6 + 24));
        (*(void (**)(uint64_t))(*(void *)v6 + 48))(v6);
        --v3;
        for (uint64_t i = (void *)v4[1]; ; uint64_t i = (void *)i[1])
        {
          if (i == (void *)v2)
          {
            char v9 = 1;
            uint64_t i = (void *)v2;
            goto LABEL_15;
          }
          if (v3 <= *(void *)(a1 + 40)) {
            break;
          }
          uint64_t v8 = i[2];
          if ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 16))(v8)) {
            break;
          }
          long long v12 = *(_OWORD *)(v8 + 8);
          (**(void (***)(uint64_t, long long *))v1)(v1, &v12);
          long long v12 = 0uLL;
          CFRelease(*(CFTypeRef *)(v8 + 24));
          (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
          --v3;
        }
        char v9 = 0;
LABEL_15:
        std::list<CI::attached_surface_t *>::splice((uint64_t)v11, v11, v2, v4, i);
        if (v9) {
          goto LABEL_6;
        }
      }
      uint64_t i = (void *)i[1];
LABEL_6:
      uint64_t v4 = i;
    }
    while (i != (void *)v2);
  }
  return std::__list_imp<CI::attached_surface_t *>::clear(v11);
}

void sub_1938CBB70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__list_imp<CI::attached_surface_t *>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t CI::MetalTextureManager::remove_matching_texture(uint64_t a1, long long **a2)
{
  if ((isImageConversionServiceProcess() & 1) != 0
    || (isMobileSlideShowOrCamera() & 1) != 0
    || (uint64_t result = isQuickLookSideCar(), result))
  {
    memset(v11, 0, sizeof(v11));
    int v12 = 1065353216;
    uint64_t v6 = *a2;
    uint64_t v5 = a2[1];
    while (v6 != v5)
    {
      long long v10 = *v6;
      std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::__emplace_unique_key_args<void const*,void const* const&>((uint64_t)v11, &v10, &v10);
      ++v6;
    }
    int v7 = *(NSObject **)(a1 + 104);
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3321888768;
    v8[2] = ___ZN2CI19MetalTextureManager23remove_matching_textureERKNSt3__16vectorINS_7TextureENS1_9allocatorIS3_EEEE_block_invoke;
    v8[3] = &__block_descriptor_80_e8_40c83_ZTSNSt3__113unordered_setIPKvNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE_e5_v8__0l;
    void v8[4] = a1;
    std::unordered_set<void const*>::unordered_set((uint64_t)v9, (uint64_t)v11);
    dispatch_sync(v7, v8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v9);
    return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v11);
  }
  return result;
}

void sub_1938CBC8C(_Unwind_Exception *a1)
{
  std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(v1 - 80);
  _Unwind_Resume(a1);
}

void ___ZN2CI19MetalTextureManager23remove_matching_textureERKNSt3__16vectorINS_7TextureENS1_9allocatorIS3_EEEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(CI::TextureManager **)(a1 + 32);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  int v21 = 0;
  uint64_t v2 = (void *)*((void *)v1 + 14);
  if (v2 != (void *)((char *)v1 + 120))
  {
    unint64_t v3 = (void *)(a1 + 40);
    do
    {
      uint64_t v5 = (CI::Object *)v2[4];
      uint64_t v4 = (void *)v2[5];
      if (CI::allowRemoval((BOOL)v4)
        && std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(v3, v4))
      {
        if (v20 >= v21)
        {
          uint64_t v7 = ((char *)v20 - v19) >> 3;
          if ((unint64_t)(v7 + 1) >> 61) {
            abort();
          }
          unint64_t v8 = ((char *)v21 - v19) >> 2;
          if (v8 <= v7 + 1) {
            unint64_t v8 = v7 + 1;
          }
          if ((unint64_t)((char *)v21 - v19) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v9 = v8;
          }
          if (v9) {
            long long v10 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v21, v9);
          }
          else {
            long long v10 = 0;
          }
          int v11 = &v10[8 * v7];
          *(void *)int v11 = v5;
          uint64_t v6 = (CI::Object **)(v11 + 8);
          int v12 = v20;
          if (v20 != (CI::Object **)v19)
          {
            do
            {
              uint64_t v13 = (uint64_t)*--v12;
              *((void *)v11 - 1) = v13;
              v11 -= 8;
            }
            while (v12 != (CI::Object **)v19);
            int v12 = (CI::Object **)v19;
          }
          uint64_t v19 = v11;
          int v21 = (CI::Object **)&v10[8 * v9];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *uint64_t v20 = v5;
          uint64_t v6 = v20 + 1;
        }
        uint64_t v20 = v6;
      }
      int v14 = (void *)v2[1];
      if (v14)
      {
        do
        {
          int v15 = v14;
          int v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          int v15 = (void *)v2[2];
          BOOL v16 = *v15 == (void)v2;
          uint64_t v2 = v15;
        }
        while (!v16);
      }
      uint64_t v2 = v15;
    }
    while (v15 != (void *)((char *)v1 + 120));
    uint64_t v18 = (CI::Object **)v19;
    unsigned __int16 v17 = v20;
    if (v19 != (char *)v20)
    {
      do
        CI::TextureManager::remove_lru(v1, *v18++);
      while (v18 != v20);
      unsigned __int16 v17 = (CI::Object **)v19;
    }
    if (v17) {
      operator delete(v17);
    }
  }
}

void sub_1938CBE50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_40c83_ZTSNSt3__113unordered_setIPKvNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE(uint64_t a1, uint64_t a2)
{
  return std::unordered_set<void const*>::unordered_set(a1 + 40, a2 + 40);
}

uint64_t __destroy_helper_block_e8_40c83_ZTSNSt3__113unordered_setIPKvNS_4hashIS2_EENS_8equal_toIS2_EENS_9allocatorIS2_EEEE(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t CI::MetalTextureManager::_release_intermediate(uint64_t a1, uint64_t a2)
{
  if (!CI_RECYCLE_METAL_TEXTURES() || (uint64_t result = CI_IOSURFACE_INTERMEDIATES(), !result))
  {
    return CI::TextureManager::_release_intermediate(a1, a2);
  }
  return result;
}

void *CI::MetalTextureManager::create_texture(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v16 = CIMetalFormatForFormat(*(_DWORD *)a8, *(unsigned __int8 *)(a8 + 4));
  unsigned __int16 v17 = CIMetalTextureCreate(*(void *)(*(void *)(a1 + 168) + 1920), (void *)[*(id *)(*(void *)(a1 + 168) + 392) device], v16, a5, a6, 1);
  CIMetalTextureSetBytes(v17, a4, a7);
  uint64_t v18 = malloc_type_malloc(0x20uLL, 0x10C20408CADBB15uLL);
  *uint64_t v18 = v17;
  v18[1] = 0;
  *((_DWORD *)v18 + 4) = a3;
  *((_DWORD *)v18 + 5) = 1;
  *((unsigned char *)v18 + 24) = *(unsigned char *)(a8 + 5);
  CI::TextureManager::append_to_lru(a1, a2, (uint64_t)v18);
  return v17;
}

void CI::MetalMainProgram::~MetalMainProgram(CI::MetalMainProgram *this)
{
  *(void *)this = &unk_1EE45BE28;
  *((void *)this + 12) = &unk_1EE45BE90;
  uint64_t v2 = *((void *)this + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN2CI16MetalMainProgramD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v2, block);
  dispatch_release(*((dispatch_object_t *)this + 16));
  uint64_t v3 = *((void *)this + 14);
  if (v3)
  {
    uint64_t v4 = *(void **)(v3 + 16);
    if (v4) {
      free(v4);
    }
    MEMORY[0x1997023B0](v3, 0x1010C40C0D7B093);
  }
  *((void *)this + 14) = 0;
  uint64_t v5 = (const void *)*((void *)this + 19);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 19) = 0;
  *((void *)this + 12) = &unk_1EE45B160;
  atomic_fetch_add(&dword_1EB466F58[9], 0xFFFFFFFF);
  CI::MainProgram::~MainProgram(this);
}

{
  uint64_t vars8;

  CI::MetalMainProgram::~MetalMainProgram(this);

  JUMPOUT(0x1997023B0);
}

void sub_1938CC1B4(_Unwind_Exception *a1)
{
  *((void *)v1 + 12) = &unk_1EE45B160;
  atomic_fetch_add(&dword_1EB466F58[9], 0xFFFFFFFF);
  CI::MainProgram::~MainProgram(v1);
  _Unwind_Resume(a1);
}

void ___ZN2CI16MetalMainProgramD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(const void **)(v1 + 160);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(v1 + 160) = 0;
}

void non-virtual thunk to'CI::MetalMainProgram::~MetalMainProgram(CI::MetalMainProgram *this)
{
}

{
  uint64_t vars8;

  CI::MetalMainProgram::~MetalMainProgram((CI::MetalMainProgram *)((char *)this - 96));

  JUMPOUT(0x1997023B0);
}

void CI::MetalMainProgram::compile(uint64_t a1, int a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 128));
  if (CI_VERBOSE_SIGNPOSTS())
  {
    uint64_t v4 = ci_signpost_log_compile();
    os_signpost_id_t v5 = a2 | ((unint64_t)*(unsigned int *)(a1 + 40) << 32);
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v6 = v4;
      if (os_signpost_enabled(v4))
      {
        *(_WORD *)int v12 = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v6, OS_SIGNPOST_INTERVAL_BEGIN, v5, "compile_metal", "", v12, 2u);
      }
    }
  }
  TimerBase::TimerBase((uint64_t)v12, *(unsigned int *)(a1 + 40), a2, (uint64_t)"compile_metal", 25);
  v7.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  unint64_t v8 = CI::find_in_archive(*(NSObject ***)(a1 + 120), *(void *)(a1 + 16), *(const char **)(a1 + 48));
  long long v10 = v8;
  if (*(unsigned char *)(a1 + 144))
  {
    if (v8) {
      uint64_t RenderPipelineState = CreateRenderPipelineState(*(void **)(a1 + 152), (uint64_t)v8, (uint64_t)v9, *(_DWORD *)(a1 + 148), 0);
    }
    else {
      uint64_t RenderPipelineState = (uint64_t)CIMetalRenderPipelineStateCreateFromSource(*(void *)(a1 + 136), *(void **)(a1 + 152), *(void *)(a1 + 56), *(void *)(a1 + 48), *(void *)(a1 + 16), *(_DWORD *)(a1 + 148));
    }
  }
  else if (v8)
  {
    uint64_t RenderPipelineState = CreateComputePipelineState(*(void **)(a1 + 152), v8, v9, 0);
  }
  else
  {
    uint64_t RenderPipelineState = (uint64_t)CIMetalComputePipelineStateCreateFromSource(*(void *)(a1 + 136), *(void **)(a1 + 152), *(void *)(a1 + 56), *(void *)(a1 + 48), *(void *)(a1 + 16));
  }
  *(void *)(a1 + 160) = RenderPipelineState;
  *(unsigned char *)(a1 + 168) = v10 != 0;
  *(double *)(a1 + 24) = (double)(std::chrono::steady_clock::now().__d_.__rep_ - v7.__d_.__rep_) / 1000000000.0;
  CI::MetalMainProgram::compile(CI::NodeIndex)::SignpostTimer::~SignpostTimer((TimerBase *)v12);
}

void sub_1938CC424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void CI::MetalMainProgram::compile(CI::NodeIndex)::SignpostTimer::~SignpostTimer(TimerBase *a1)
{
  if (CI_VERBOSE_SIGNPOSTS())
  {
    uint64_t v2 = ci_signpost_log_compile();
    os_signpost_id_t v3 = *((void *)a1 + 1);
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v4 = v2;
      if (os_signpost_enabled(v2))
      {
        *(_WORD *)os_signpost_id_t v5 = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v4, OS_SIGNPOST_INTERVAL_END, v3, "compile_metal", "", v5, 2u);
      }
    }
  }
  TimerBase::~TimerBase(a1);
}

void sub_1938CC4CC(_Unwind_Exception *a1)
{
  TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

void CI::MetalContext::MetalContext(CI::MetalContext *this, const CI::MetalContext *a2)
{
}

void sub_1938CC5CC(_Unwind_Exception *a1)
{
  os_signpost_id_t v5 = *(CI::Object **)(v1 + 1824);
  *(void *)(v1 + 1824) = 0;
  if (v5) {
    CI::Object::unref(v5);
  }
  *(void *)(v1 + 384) = v2;
  atomic_fetch_add((atomic_uint *volatile)(v3 + 308), 0xFFFFFFFF);
  CI::Context::~Context((CGColorSpaceRef *)v1);
  _Unwind_Resume(a1);
}

uint64_t CI::GLContext::MTLShadow(CI::GLContext *this)
{
  if (!*((void *)this + 44)) {
    operator new();
  }
  uint64_t v1 = *((void *)this + 44);

  return CI::Object::ref(v1);
}

void sub_1938CC670(_Unwind_Exception *a1)
{
  MEMORY[0x1997023B0](v1, 0x10F1C4010D716A0);
  _Unwind_Resume(a1);
}

uint64_t CI::SWContext::MTLShadow(CI::SWContext *this)
{
  if (!*((void *)this + 44)) {
    operator new();
  }
  return *((void *)this + 44);
}

void sub_1938CC6F4(_Unwind_Exception *a1)
{
  MEMORY[0x1997023B0](v1, 0x10F1C4010D716A0);
  _Unwind_Resume(a1);
}

uint64_t CI::Context::MTLShadow(CI::Context *this)
{
  return *((void *)this + 44);
}

void CI::MetalContext::MetalContext(CI::MetalContext *this, const CI::Context *a2, const char *a3)
{
}

void sub_1938CC844(_Unwind_Exception *a1)
{
  os_signpost_id_t v5 = *(CI::Object **)(v1 + 1824);
  *(void *)(v1 + 1824) = 0;
  if (v5) {
    CI::Object::unref(v5);
  }
  *(void *)(v1 + 384) = v2;
  atomic_fetch_add((atomic_uint *volatile)(v3 + 308), 0xFFFFFFFF);
  CI::Context::~Context((CGColorSpaceRef *)v1);
  _Unwind_Resume(a1);
}

uint64_t CI::MetalContext::SWShadow(CI::MetalContext *this)
{
  return CI::Object::ref(*((void *)this + 228));
}

uint64_t CI::MetalContext::binaryArchiveCache(CI::MetalContext *this)
{
  if (CI::MetalContext::binaryArchiveCache(void)::onceToken != -1) {
    dispatch_once(&CI::MetalContext::binaryArchiveCache(void)::onceToken, &__block_literal_global_12_0);
  }
  return CI::MetalContext::binaryArchiveCache(void)::cache;
}

void CI::MetalContext::add_archive(NSObject ***this, const __CFString *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (CI_USE_ARCHIVED_KERNELS())
  {
    if (CI::MetalContext::binaryArchiveCache(void)::onceToken != -1) {
      dispatch_once(&CI::MetalContext::binaryArchiveCache(void)::onceToken, &__block_literal_global_12_0);
    }
    uint64_t v4 = (void *)CI::MetalContext::binaryArchiveCache(void)::cache;
    objc_sync_enter((id)CI::MetalContext::binaryArchiveCache(void)::cache);
    os_signpost_id_t v5 = (void *)[v4 objectForKey:a2];
    objc_sync_exit(v4);
    if (v5)
    {
      uint64_t v6 = ci_logger_render();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v7 = ((uint64_t (*)(NSObject ***))(*this)[34])(this);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)&buf[4] = v7;
        LOWORD(v19) = 2114;
        *(void *)((char *)&v19 + 2) = a2;
        _os_log_impl(&dword_193671000, v6, OS_LOG_TYPE_INFO, "Context[%d] uses %{public}@ archive", buf, 0x12u);
      }
      unint64_t v8 = this[244];
      if (!v8)
      {
        *(void *)buf = 0;
        long long v19 = 0uLL;
        uint64_t v9 = [v5 objectForKeyedSubscript:@"air"];
        uint64_t v10 = [v5 objectForKeyedSubscript:@"bin"];
        int v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>((uint64_t)&v19 + 8, 1uLL);
        uint64_t v13 = &v11[16 * v12];
        *(void *)int v11 = v9;
        *((void *)v11 + 1) = v10;
        int v14 = (long long *)(v11 + 16);
        unsigned int v16 = *(char **)buf;
        int v15 = (char *)v19;
        if ((void)v19 != *(void *)buf)
        {
          do
          {
            *((_OWORD *)v11 - 1) = *((_OWORD *)v15 - 1);
            v11 -= 16;
            v15 -= 16;
          }
          while (v15 != v16);
          int v15 = *(char **)buf;
        }
        *(void *)buf = v11;
        *(void *)&long long v19 = v14;
        *((void *)&v19 + 1) = v13;
        if (v15)
        {
          operator delete(v15);
          int v11 = *(char **)buf;
        }
        *(void *)&long long v19 = v14;
        memset(__p, 0, sizeof(__p));
        std::vector<std::pair<void const*,void const*>>::__init_with_size[abi:nn180100]<std::pair<void const*,void const*>*,std::pair<void const*,void const*>*>((char *)__p, (long long *)v11, v14, ((char *)v14 - v11) >> 4);
        CI::new_kernel_archive();
      }
      CI::add_to_kernel_archive(v8, [v5 objectForKeyedSubscript:@"air"], objc_msgSend(v5, "objectForKeyedSubscript:", @"bin"));
    }
  }
}

void sub_1938CCB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void CI::MetalContext::~MetalContext(CI::MetalContext *this)
{
  *(void *)this = &unk_1EE458600;
  *((void *)this + 48) = &unk_1EE458880;
  CI::delete_precompiled_kernels(*((void *)this + 241));
  CI::delete_precompiled_kernels(*((void *)this + 242));
  CI::release_ci_dylib(*((id **)this + 243), v2);
  CI::release_kernel_archive(*((dispatch_object_t **)this + 244), v3);
  *((void *)this + 244) = 0;
  *((void *)this + 241) = 0;
  *((void *)this + 242) = 0;
  uint64_t v4 = (const void *)*((void *)this + 239);
  if (v4)
  {
    CFRelease(v4);
    *((void *)this + 239) = 0;
  }
  uint64_t v5 = 0;
  char v6 = 1;
  do
  {
    uint64_t v7 = 0;
    char v8 = v6;
    char v9 = 1;
    do
    {
      char v10 = v9;
      int v11 = (char *)this + 16 * v5 + 8 * v7;
      uint64_t v12 = (const void *)*((void *)v11 + 219);
      if (v12)
      {
        CFRelease(v12);
        *((void *)v11 + 219) = 0;
      }
      char v9 = 0;
      uint64_t v7 = 1;
    }
    while ((v10 & 1) != 0);
    char v6 = 0;
    uint64_t v5 = 1;
  }
  while ((v8 & 1) != 0);
  uint64_t v13 = (const void *)*((void *)this + 49);
  if (v13)
  {
    CFRelease(v13);
    *((void *)this + 49) = 0;
  }
  uint64_t v14 = *((void *)this + 227);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 32))(v14);
  }
  int v15 = (CI::Object *)*((void *)this + 228);
  *((void *)this + 227) = 0;
  *((void *)this + 228) = 0;
  if (v15) {
    CI::Object::unref(v15);
  }
  *((void *)this + 48) = &unk_1EE456D30;
  atomic_fetch_add(&dword_1EB466F58[19], 0xFFFFFFFF);

  CI::Context::~Context((CGColorSpaceRef *)this);
}

{
  uint64_t vars8;

  CI::MetalContext::~MetalContext(this);

  JUMPOUT(0x1997023B0);
}

void sub_1938CCD04(_Unwind_Exception *a1)
{
  uint64_t v3 = *(CI::Object **)(v1 + 1824);
  *(void *)(v1 + 1824) = 0;
  if (v3) {
    CI::Object::unref(v3);
  }
  *(void *)(v1 + 384) = &unk_1EE456D30;
  atomic_fetch_add(&dword_1EB466F58[19], 0xFFFFFFFF);
  CI::Context::~Context((CGColorSpaceRef *)v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'CI::MetalContext::~MetalContext(CI::MetalContext *this)
{
}

{
  uint64_t vars8;

  CI::MetalContext::~MetalContext((CI::MetalContext *)((char *)this - 384));

  JUMPOUT(0x1997023B0);
}

void *CI::MetalContext::protectionOptions(CI::MetalContext *this)
{
  uint64_t result = (void *)*((void *)this + 224);
  if (result) {
    return (void *)[result protectionOptions];
  }
  uint64_t result = (void *)*((void *)this + 226);
  if (result) {
    return (void *)[result protectionOptions];
  }
  return result;
}

const char *CI::MetalContext::deviceName(id *this)
{
  uint64_t v1 = objc_msgSend((id)objc_msgSend(this[49], "device"), "name");
  if (!v1) {
    return "Unknown Metal Device";
  }

  return (const char *)[v1 UTF8String];
}

uint64_t CI::MetalContext::setPriority(uint64_t a1, const char *a2)
{
  return CIMetalCommandQueueSetPriority(*(void **)(a1 + 392), a2);
}

uint64_t CI::MetalContext::priority(id *this)
{
  uint64_t v1 = [this[49] getGPUPriority];
  if (v1 == 2) {
    unsigned int v2 = -1;
  }
  else {
    unsigned int v2 = 0;
  }
  if (v1) {
    return v2;
  }
  else {
    return 1;
  }
}

__CFDictionary *CI::MetalContext::switch_dictionary(CI::MetalContext *this)
{
  uint64_t result = (__CFDictionary *)*((void *)this + 239);
  if (!result)
  {
    Mutable = CFDictionaryCreateMutable(0, 3, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    *((void *)this + 239) = Mutable;
    BOOL v4 = CIMetalDeviceSupportsMPS((void *)[*((id *)this + 49) device]);
    __CFDictionary::setValue(Mutable, (__CFDictionary *)@"kContextInfoSupportsMPS", (const __CFString *)v4, v5);
    __CFDictionary::setValue(*((__CFDictionary **)this + 239), (__CFDictionary *)@"kContextInfoIsMetal", (const __CFString *)1, v6);
    __CFDictionary::setValue(*((__CFDictionary **)this + 239), (__CFDictionary *)@"kContextInfoWorkingFormat", (const __CFString *)*((unsigned int *)this + 8));
    char v8 = (const void *)*((void *)this + 3);
    uint64_t result = (__CFDictionary *)*((void *)this + 239);
    if (v8)
    {
      __CFDictionary::setValue(result, @"kContextInfoWorkingSpace", v8, v7);
      return (__CFDictionary *)*((void *)this + 239);
    }
  }
  return result;
}

void CI::MetalContext::invalidate_switch_dictionary(CI::MetalContext *this)
{
  unsigned int v2 = (const void *)*((void *)this + 239);
  if (v2)
  {
    CFRelease(v2);
    *((void *)this + 239) = 0;
  }
}

void CI::MetalContext::waitForCompletion(CI::MetalContext *this)
{
  unsigned int v2 = (void *)*((void *)this + 224);
  if (v2) {
    BOOL v3 = v2 == *((void **)this + 226);
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    CIMetalCommandBufferWaitUntilCompleted(v2);
    if (!*((void *)this + 226))
    {
      BOOL v4 = *(NSObject **)((*(uint64_t (**)(CI::MetalContext *))(*(void *)this + 112))(this) + 88);
      dispatch_group_wait(v4, 0xFFFFFFFFFFFFFFFFLL);
    }
  }
}

BOOL CI::MetalContext::set_texture_destination(CI::MetalContext *this, Texture a2, const CGSize *a3)
{
  uint64_t v3 = *(void *)a2.var0.var0;
  if (*(void *)a2.var0.var0)
  {
    *((_WORD *)this + 952) = 1;
    *(_OWORD *)((char *)this + 1832) = *(_OWORD *)a2.var0.var2.var1;
    CFTypeRef v5 = *(CFTypeRef *)a2.var0.var0;
    if (*(void *)a2.var0.var0) {
      CFTypeRef v5 = CFRetain(v5);
    }
    *((void *)this + 233) = v5;
  }
  return v3 != 0;
}

BOOL CI::MetalContext::set_texture_destination(uint64_t a1, void *aBlock, _OWORD *a3)
{
  if (aBlock)
  {
    *(_WORD *)(a1 + 1904) = 1;
    *(_OWORD *)(a1 + 1832) = *a3;
    *(void *)(a1 + 1888) = _Block_copy(aBlock);
  }
  return aBlock != 0;
}

CFTypeRef CI::MetalContext::set_command_buffer(CFTypeRef this, CFTypeRef cf)
{
  if (cf)
  {
    uint64_t v2 = (uint64_t)this;
    this = CFRetain(cf);
    *(void *)(v2 + 1808) = this;
  }
  return this;
}

void sub_1938CD144(_Unwind_Exception *a1)
{
  TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

void ___ZN2CI12MetalContext16render_root_nodeEPNS_8TileTaskERKNS_9parentROIEU13block_pointerFvvES7__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CI::TileTask::incrementCyclesForNode(*(CI::TileTask **)(a1 + 32), *(const CI::ProgramNode **)(a1 + 40), a2);
  CFTypeRef v5 = *(CI::TileTask **)(a1 + 32);
  char v6 = *(const CI::ProgramNode **)(a1 + 40);

  CI::TileTask::incrementNanoSecForNode(v5, v6, a3);
}

void CI::MetalContext::render_intermediate_node(CI::MetalContext *a1, CI::TileTask *a2, CI::parentROI *this, uint64_t a4, int a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)this;
  v29.origin.double x = CI::parentROI::roi(this);
  v29.origin.double y = v11;
  v29.size.unint64_t width = v12;
  v29.size.unint64_t height = v13;
  if (CI_VERBOSE_SIGNPOSTS())
  {
    uint64_t v14 = ci_signpost_log_render();
    os_signpost_id_t v15 = *(int *)(v10 + 36) | (unint64_t)((*(uint64_t (**)(CI::MetalContext *))(*(void *)a1 + 272))(a1) << 32);
    if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
    {
      *(_DWORD *)buf = 68289026;
      int v32 = 256;
      __int16 v33 = 2082;
      long long v34 = CI::Context::programName((dispatch_queue_t *)v10, v16);
      _os_signpost_emit_with_name_impl(&dword_193671000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v15, "render_node", "%{public}.256s", buf, 0x12u);
    }
  }
  uint64_t v17 = (*(uint64_t (**)(CI::MetalContext *))(*(void *)a1 + 272))(a1);
  TimerBase::TimerBase((uint64_t)buf, v17, *(_DWORD *)(v10 + 36), (uint64_t)"render_node", 0);
  if (a4)
  {
    *((void *)a1 + 225) = *((void *)a1 + 224);
    uint64_t v18 = *(void *)(v10 + 48);
    BOOL v19 = (*(int (**)(uint64_t))(*(void *)v18 + 16))(v18) >= 41
       && (*(int (**)(uint64_t))(*(void *)v18 + 16))(v18) < 43;
    if (!CI_ENABLE_METAL_DEBUG()
      || *((void *)a1 + 226)
      || (uint64_t v23 = *(void *)(v10 + 48), (*(int (**)(uint64_t))(*(void *)v23 + 16))(v23) >= 41)
      && (*(int (**)(uint64_t))(*(void *)v23 + 16))(v23) < 43)
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = v28;
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 3221225472;
      v28[2] = ___ZN2CI12MetalContext24render_intermediate_nodeEPNS_8TileTaskERKNS_9parentROIEPNS_14intermediate_tEbU13block_pointerFvvE_block_invoke;
      v28[3] = &__block_descriptor_48_e11_v24__0Q8Q16l;
      _OWORD v28[4] = a2;
      v28[5] = v10;
    }
    int v21 = (void *)*((void *)a1 + 226);
    if (a5)
    {
      if (v21) {
        int v22 = (void *)[v21 commandQueue];
      }
      else {
        int v22 = (void *)*((void *)a1 + 49);
      }
      int v21 = CIMetalCommandBufferCreate(*((void *)a1 + 240), v22, !v19, v20);
    }
    else if (!v21)
    {
      int v21 = CIMetalCommandBufferCreate(*((void *)a1 + 240), *((void **)a1 + 49), !v19, v20);
    }
    *((void *)a1 + 224) = v21;
    (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)a4 + 24))(&v27, a4);
    int64x2_t v26 = (__IOSurface *)(**(uint64_t (***)(uint64_t))a4)(a4);
    *(_OWORD *)uint64_t v30 = v27;
    float64x2_t v24 = (const CGRect *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 32))(a4);
    if (*((void *)&v27 + 1)) {
      uint64_t v25 = 2;
    }
    else {
      uint64_t v25 = 1;
    }
    CI::MetalContext::render_node(a1, a2, this, v24, v30, &v26, v25);
    CI::ProgramNode::program_name((CI::ProgramNode *)v10);
    CI::TileTask::addROIForNode(a2, (CI::ProgramNode *)v10, &v29);
    if (a2) {
      CI::Object::ref((uint64_t)a2);
    }
    operator new();
  }
  CI::MetalContext::render_intermediate_node(CI::TileTask *,CI::parentROI const&,CI::intermediate_t *,BOOL,void({block_pointer})(void))::SignpostTimer::~SignpostTimer((TimerBase *)buf);
}

void sub_1938CD844(_Unwind_Exception *a1)
{
  CI::MetalContext::render_intermediate_node(CI::TileTask *,CI::parentROI const&,CI::intermediate_t *,BOOL,void({block_pointer})(void))::SignpostTimer::~SignpostTimer((TimerBase *)(v1 - 160));
  _Unwind_Resume(a1);
}

void ___ZN2CI12MetalContext24render_intermediate_nodeEPNS_8TileTaskERKNS_9parentROIEPNS_14intermediate_tEbU13block_pointerFvvE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CI::TileTask::incrementCyclesForNode(*(CI::TileTask **)(a1 + 32), *(const CI::ProgramNode **)(a1 + 40), a2);
  CFTypeRef v5 = *(CI::TileTask **)(a1 + 32);
  char v6 = *(const CI::ProgramNode **)(a1 + 40);

  CI::TileTask::incrementNanoSecForNode(v5, v6, a3);
}

uint64_t ___ZN2CI12MetalContext24render_intermediate_nodeEPNS_8TileTaskERKNS_9parentROIEPNS_14intermediate_tEbU13block_pointerFvvE_block_invoke_2(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a1 + 40);
  if ([a2 status] == 5)
  {
    CFTypeRef v5 = *(CI::TileTask **)(a1 + 48);
    id v6 = (id)[a2 error];
  }
  else
  {
    if (!internalError(a2)) {
      goto LABEL_6;
    }
    CFTypeRef v5 = *(CI::TileTask **)(a1 + 48);
    id v6 = internalError(a2);
  }
  CI::TileTask::setCommandBufferError(v5, v6);
LABEL_6:
  if (!*(unsigned char *)(a1 + 80))
  {
    if ((CI_PRINT_TIME() & 0x100) != 0)
    {
      uint64_t v7 = *(const char **)(a1 + 56);
      CIMetalCommandBufferGetGPUTime(a2);
      x_log("CI_PRINT_TIME [GPU] intermediate program (%s) = %.1f ms\n", v7, v8 * 1000.0);
    }
    CIMetalCommandBufferGetGPUTime(a2);
    CI::TileTask::incrementTimeForNode(*(CI::TileTask **)(a1 + 48), *(const CI::ProgramNode **)(a1 + 64), v9);
  }
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 112))(v4);
  (*(void (**)(uint64_t, void))(*(void *)v10 + 80))(v10, *(void *)(a1 + 72));
  uint64_t v11 = *(void *)(a1 + 72);
  if (v11)
  {
    uint64_t v14 = *(void ***)(a1 + 72);
    std::vector<CI::Texture>::__destroy_vector::operator()[abi:nn180100](&v14);
    MEMORY[0x1997023B0](v11, 0x20C40960023A9);
  }
  CGFloat v12 = *(CI::Object **)(a1 + 48);
  if (v12) {
    CI::Object::unref(v12);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void CI::MetalContext::render_intermediate_node(CI::TileTask *,CI::parentROI const&,CI::intermediate_t *,BOOL,void({block_pointer})(void))::SignpostTimer::~SignpostTimer(TimerBase *a1)
{
  if (CI_VERBOSE_SIGNPOSTS())
  {
    uint64_t v2 = ci_signpost_log_render();
    os_signpost_id_t v3 = *((void *)a1 + 1);
    if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v4 = v2;
      if (os_signpost_enabled(v2))
      {
        *(_WORD *)CFTypeRef v5 = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v4, OS_SIGNPOST_INTERVAL_END, v3, "render_node", "", v5, 2u);
      }
    }
  }
  TimerBase::~TimerBase(a1);
}

void sub_1938CDAC8(_Unwind_Exception *a1)
{
  TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

BOOL CI::MetalContext::formatIsWritable(id *this, unsigned int a2)
{
  uint64_t v4 = a2;
  if (a2 > 0x2FF || (int v5 = *((unsigned __int8 *)this + a2 + 460), !*((unsigned char *)this + a2 + 460)))
  {
    [this[49] device];
    MTLPixelFormatGetInfoForDevice();
    int v5 = 0;
    if (a2 <= 0x2FF) {
      *((unsigned char *)this + v4 + 460) = 0;
    }
  }
  return v5 == 119;
}

uint64_t CI::MetalContext::bind_cgimage(void ***a1, CGImage *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a2) {
    return 0;
  }
  uint64_t v10 = CI::MetalTextureManager::texture_for_CGImage(a1[227], a2, a3);
  uint64_t v11 = (*a1)[11];

  return ((uint64_t (*)(void ***, void *, uint64_t, uint64_t, uint64_t))v11)(a1, v10, a4, a5, a6);
}

uint64_t CI::MetalContext::bind_intermediate(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 88))(a1, *a2);
}

BOOL CI::MetalContext::blitSurface(uint64_t a1, __IOSurface *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v11 = CIMetalFormatForFormat(*(_DWORD *)a6, *(unsigned __int8 *)(a6 + 4));
  CGFloat v12 = CIMetalTextureCreateFromIOSurface(*(void *)(a1 + 1920), (void *)[*(id *)(a1 + 392) device], a2, 0, v11, 2);
  if (v12)
  {
    CGFloat v13 = CIMetalCommandBufferCreate(*(void *)(a1 + 1920), *(void **)(a1 + 392), 0, 0);
    int v14 = *(_DWORD *)a3;
    int v15 = *(_DWORD *)(a3 + 4);
    uint64_t v17 = *(void *)(a3 + 8);
    uint64_t v16 = *(void *)(a3 + 16);
    if (*(_DWORD *)a3 == -2147483647)
    {
      if (v15 == -2147483647 && v17 == 0xFFFFFFFFLL && v16 == 0xFFFFFFFFLL)
      {
        uint64_t v18 = (double *)MEMORY[0x1E4F1DB10];
        goto LABEL_12;
      }
    }
    else if (v14 == 0x7FFFFFFF && v15 == 0x7FFFFFFF && !v17 && !v16)
    {
      uint64_t v18 = (double *)MEMORY[0x1E4F1DB20];
LABEL_12:
      double v19 = *v18;
      double v20 = v18[1];
      goto LABEL_14;
    }
    double v19 = (double)v14;
    double v20 = (double)v15;
LABEL_14:
    int v21 = *(_DWORD *)a5;
    int v22 = *(_DWORD *)(a5 + 4);
    unint64_t v23 = *(void *)(a5 + 8);
    unint64_t v24 = *(void *)(a5 + 16);
    if (*(_DWORD *)a5 == -2147483647)
    {
      if (v22 == -2147483647 && v23 == 0xFFFFFFFF && v24 == 0xFFFFFFFF)
      {
        uint64_t v25 = (double *)MEMORY[0x1E4F1DB10];
        goto LABEL_24;
      }
    }
    else if (v21 == 0x7FFFFFFF && v22 == 0x7FFFFFFF && !v23 && !v24)
    {
      uint64_t v25 = (double *)MEMORY[0x1E4F1DB20];
LABEL_24:
      double v26 = *v25;
      double v27 = v25[1];
      double v28 = v25[2];
      double v29 = v25[3];
LABEL_26:
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a4 + 24))(&v32, a4);
      CIMetalCommandBufferCopyTexture(v13, (uint64_t)v12, v32, v19, v20, v26, v27, v28, v29);
      CFRelease(v12);
      v31[0] = MEMORY[0x1E4F143A8];
      v31[1] = 3221225472;
      v31[2] = ___ZNK2CI12MetalContext11blitSurfaceEP11__IOSurface5IRectPNS_14intermediate_tES3_RKNS_17TextureDescriptorE_block_invoke;
      unsigned __int16 v31[3] = &__block_descriptor_48_e28_v16__0___MTLCommandBuffer__8l;
      v31[4] = a1;
      v31[5] = a4;
      CIMetalCommandBufferAddCompletionHandler(v13, (uint64_t)v31);
      CIMetalCommandBufferCommit(v13);
      return v12 != 0;
    }
    double v26 = (double)v21;
    double v27 = (double)v22;
    double v28 = (double)v23;
    double v29 = (double)v24;
    goto LABEL_26;
  }
  return v12 != 0;
}

void ___ZNK2CI12MetalContext11blitSurfaceEP11__IOSurface5IRectPNS_14intermediate_tES3_RKNS_17TextureDescriptorE_block_invoke(uint64_t a1)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 112))(*(void *)(a1 + 32));
  uint64_t v3 = *(void *)(a1 + 40);

  CI::TextureManager::complete_intermediate(v2, 52, v3);
}

uint64_t CI::MetalMainProgram::type(CI::MetalMainProgram *this)
{
  return 67;
}

const char *CI::MetalMainProgram::get_type_name(CI::MetalMainProgram *this)
{
  if (*((unsigned char *)this + 168)) {
    return "cikl-from_archive";
  }
  else {
    return "cikl";
  }
}

uint64_t non-virtual thunk to'CI::MetalMainProgram::type(CI::MetalMainProgram *this)
{
  return 67;
}

uint64_t CI::MetalContext::bind_texture()
{
  return 0;
}

uint64_t CI::MetalContext::setLossyIntermediates(uint64_t this, char a2)
{
  *(unsigned char *)(this + 1228) = a2;
  return this;
}

uint64_t CI::MetalContext::lossyIntermediates(CI::MetalContext *this)
{
  return *((unsigned __int8 *)this + 1228);
}

uint64_t CI::MetalContext::is_cpu(CI::MetalContext *this)
{
  return 0;
}

uint64_t CI::MetalContext::set_user_destination(CI::MetalContext *this)
{
  return 0;
}

uint64_t CI::MetalContext::max_fragment_uniform_vectors(CI::MetalContext *this)
{
  return *((void *)this + 52);
}

uint64_t CI::MetalContext::max_fragment_uniform_size(CI::MetalContext *this)
{
  return *((void *)this + 52);
}

uint64_t CI::MetalContext::max_device_memory(CI::MetalContext *this)
{
  uint64_t result = *((void *)this + 56);
  if (!result) {
    return *((void *)this + 55);
  }
  return result;
}

uint64_t CI::MetalContext::bitmap_destination_rowbytes_alignment()
{
  return 64;
}

BOOL CI::MetalContext::supports_edge_mode(uint64_t a1, unsigned int a2)
{
  return a2 < 2;
}

void CI::MetalContext::createMainProgram()
{
}

void sub_1938CE040(_Unwind_Exception *a1)
{
  MEMORY[0x1997023B0](v1, 0x10F1C40F8089CA4);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'CI::MetalContext::type(CI::MetalContext *this)
{
  return 77;
}

void std::vector<CI::Texture>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    int v5 = **a1;
    if (v4 != v2)
    {
      bzero(&v4[-((v4 - v2) & 0xFFFFFFFFFFFFFFF0)], (v4 - v2) & 0xFFFFFFFFFFFFFFF0);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::__emplace_unique_key_args<void const*,void const* const&>(uint64_t a1, void *a2, void *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unsigned int v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x18uLL);
  *uint64_t i = 0;
  i[1] = v8;
  i[2] = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__rehash<true>(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  int v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *int v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    int v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1938CE328(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  uint64_t result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      uint64_t result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t std::unordered_set<void const*>::unordered_set(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__rehash<true>(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::__emplace_unique_key_args<void const*,void const* const&>(a1, i + 2, i + 2);
  return a1;
}

void sub_1938CE488(_Unwind_Exception *a1)
{
  std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

uint64_t CI::InstanceCounted<(CI::Type)67>::type()
{
  return 67;
}

void *CI::InstanceCounted<(CI::Type)67>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45B160;
  atomic_fetch_add(&dword_1EB466F58[9], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)67>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B160;
  atomic_fetch_add(&dword_1EB466F58[9], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)77>::type()
{
  return 77;
}

void *CI::InstanceCounted<(CI::Type)77>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE456D30;
  atomic_fetch_add(&dword_1EB466F58[19], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)77>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE456D30;
  atomic_fetch_add(&dword_1EB466F58[19], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::Context::render_completion_queue(CI::Context *this)
{
  if (CI::Context::render_completion_queue(void)::onceToken != -1) {
    dispatch_once(&CI::Context::render_completion_queue(void)::onceToken, &__block_literal_global_83);
  }
  return CI::Context::render_completion_queue(void)::sRenderCompletionQueue;
}

void ___ZN2CI7Context23render_completion_queueEv_block_invoke_2()
{
}

uint64_t CI::Context::defaultWorkingSpace(CI::Context *this)
{
  if (CI::Context::defaultWorkingSpace(void)::didCreate != -1) {
    dispatch_once(&CI::Context::defaultWorkingSpace(void)::didCreate, &__block_literal_global_24);
  }
  return CI::Context::defaultWorkingSpace(void)::space;
}

void CI::Context::~Context(CGColorSpaceRef *this)
{
  *this = (CGColorSpaceRef)&unk_1EE45E140;
  CGColorSpaceRelease(this[2]);
  this[2] = 0;
  CGColorSpaceRelease(this[3]);
  this[3] = 0;
  CGContextRelease(this[6]);
  this[6] = 0;
  *((unsigned char *)this + 236) = 0;
  int8x8_t v2 = this[44];
  if (v2) {
    CI::Object::unref(v2);
  }
  this[44] = 0;
  CGColorSpaceRef v3 = this[38];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  _OWORD v11[2] = ___ZN2CI11ObjectCacheINS_11MainProgramENS_13ProgramDigestELb0EE5clearEv_block_invoke;
  uint64_t v11[3] = &__block_descriptor_tmp_107;
  double v11[4] = v3;
  Queue::execute_async((dispatch_queue_t *)v3 + 7, v11);
  int v4 = (*((uint64_t (**)(CGColorSpaceRef *))*this + 34))(this);
  RemoveCacheEntriesForContext(v4);
  uint64_t v5 = (uint64_t)this[38];
  if (v5)
  {
    uint64_t v6 = CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::~ObjectCache(v5);
    MEMORY[0x1997023B0](v6, 0x10E0C40C1366CD6);
  }
  uint64_t v7 = (uint64_t)this[39];
  if (v7)
  {
    uint64_t v8 = CI::ObjectCache<CI::Node,unsigned long long,false>::~ObjectCache(v7);
    MEMORY[0x1997023B0](v8, 0x10E0C40C1366CD6);
  }
  uint64_t v9 = (uint64_t)this[40];
  if (v9)
  {
    uint64_t v10 = CI::ObjectCache<CI::Node,unsigned long long,false>::~ObjectCache(v9);
    MEMORY[0x1997023B0](v10, 0x10E0C40C1366CD6);
  }
}

uint64_t CI::Context::set_client_name(uint64_t this, CFStringRef theString)
{
  CGColorSpaceRef v3 = (char *)(this + 236);
  if (theString) {
    return CFStringGetCString(theString, v3, 64, 0x8000100u);
  }
  *CGColorSpaceRef v3 = 0;
  return this;
}

void CI::Context::clear_caches(CI::Context *this)
{
  uint64_t v2 = *((void *)this + 39);
  uint64_t v5 = MEMORY[0x1E4F143A8];
  uint64_t v6 = 0x40000000;
  uint64_t v7 = ___ZN2CI11ObjectCacheINS_4NodeEyLb0EE5clearEv_block_invoke;
  uint64_t v8 = &__block_descriptor_tmp_104;
  uint64_t v9 = v2;
  Queue::execute_async((dispatch_queue_t *)(v2 + 56), &v5);
  uint64_t v3 = *((void *)this + 40);
  uint64_t v5 = MEMORY[0x1E4F143A8];
  uint64_t v6 = 0x40000000;
  uint64_t v7 = ___ZN2CI11ObjectCacheINS_4NodeEyLb0EE5clearEv_block_invoke;
  uint64_t v8 = &__block_descriptor_tmp_104;
  uint64_t v9 = v3;
  Queue::execute_async((dispatch_queue_t *)(v3 + 56), &v5);
  int v4 = (*(uint64_t (**)(CI::Context *))(*(void *)this + 272))(this);
  RemoveCacheEntriesForContext(v4);
}

void CI::Context::setPriority(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v2 = ci_logger_render();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl(&dword_193671000, v2, OS_LOG_TYPE_INFO, "Context does not support non-default priority", v3, 2u);
    }
  }
}

uint64_t *std::unique_ptr<CI::intermediate_t>::~unique_ptr[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
  }
  return a1;
}

uint64_t CI::Context::render_processor_node(CI::Context *this, CI::TileTask *a2, const CI::parentROI *a3, __IOSurface *a4, Texture a5)
{
  unint64_t var0 = a5.var0.var0;
  double v10 = CI::parentROI::roi(a3);
  *(double *)int v53 = v10;
  *(double *)&v53[1] = v11;
  *(double *)&v53[2] = v12;
  *(double *)&v53[3] = v13;
  float v14 = *(CI::ProgramNode **)a3;
  if (!*(void *)a3) {
    return 0;
  }
  uint64_t v15 = *((void *)v14 + 6);
  if (!v15) {
    return 0;
  }
  CGFloat v16 = v10;
  CGFloat v17 = v11;
  CGFloat v18 = v12;
  CGFloat v19 = v13;
  if ((*(int (**)(void))(*(void *)v15 + 16))(*((void *)v14 + 6)) < 41
    || (*(int (**)(uint64_t))(*(void *)v15 + 16))(v15) > 42)
  {
    return 0;
  }
  int v41 = (long long *)var0;
  int v42 = a2;
  char v43 = a4;
  uint64_t v40 = *((void *)v14 + 6);
  uint64_t v20 = (*(uint64_t (**)(CI::Context *))(*(void *)this + 112))(this);
  unsigned int v21 = (*(uint64_t (**)(CI::ProgramNode *))(*(void *)v14 + 40))(v14);
  __p = 0;
  int v51 = 0;
  uint64_t v52 = 0;
  if (v21)
  {
    unsigned int v22 = v21;
    uint64_t v44 = v21;
    std::vector<unsigned long>::__vallocate[abi:nn180100](&__p, v21);
    unint64_t v23 = (char *)v51;
    bzero(v51, 8 * v22);
    uint64_t v24 = 0;
    int v51 = &v23[8 * v22];
    do
    {
      v54.origin.double x = v16;
      v54.origin.double y = v17;
      v54.size.unint64_t width = v18;
      v54.size.unint64_t height = v19;
      CI::ProgramNode::roiKeys_of_child(v14, v54, v24, &v48);
      double v26 = v48;
      uint64_t v25 = v49;
      if (v48 != v49)
      {
        do
        {
          *(_OWORD *)uint64_t v47 = *v26;
          double v27 = (void *)CI::Node::rois(v47[0]);
          uint64_t v28 = *v27 + 120 * SLODWORD(v47[1]);
          uint64_t v29 = *(void *)(v28 + 32);
          uint64_t v30 = *(void *)(v28 + 40);
          while (v29 != v30)
          {
            if (*(void *)v29 == *(void *)a3
              && *((_DWORD *)a3 + 3) == *(_DWORD *)(v29 + 12)
              && *((_DWORD *)a3 + 2) == *(_DWORD *)(v29 + 8)
              && *((_DWORD *)a3 + 5) == *(_DWORD *)(v29 + 20))
            {
              v46.origin.double x = CI::Node::roi(v47[0], (int)v47[1]);
              v46.origin.double y = v34;
              v46.size.unint64_t width = v35;
              v46.size.unint64_t height = v36;
              uint64_t intermediate_for_node = CI::TextureManager::get_intermediate_for_node(v20, (uint64_t)v47);
              if (!intermediate_for_node)
              {
                long long v38 = (CI::TextureManager *)(*(uint64_t (**)(CI::Context *))(*(void *)this + 112))(this);
                CI::TextureManager::intermediate(v38, 0, &v46);
              }
              *((void *)__p + v24) = intermediate_for_node;
            }
            v29 += 48;
          }
          ++v26;
        }
        while (v26 != v25);
        double v26 = v48;
      }
      if (v26)
      {
        uint64_t v49 = v26;
        operator delete(v26);
      }
      ++v24;
    }
    while (v24 != v44);
  }
  long long v45 = *v41;
  (*(void (**)(uint64_t, CI::TileTask *, CI::Context *, void **, __IOSurface *, long long *, void *, void))(*(void *)v40 + 416))(v40, v42, this, &__p, v43, &v45, v53, *((unsigned int *)a3 + 5));
  long long v45 = 0uLL;
  if (__p)
  {
    int v51 = __p;
    operator delete(__p);
  }
  return 1;
}

uint64_t CI::Context::blitSurface(CI::Context *this, __IOSurface *a2, IRect *a3, __IOSurface *a4, IRect *a5)
{
  OSType PixelFormat = IOSurfaceGetPixelFormat(this);
  uint64_t result = IOSurfaceGetPixelFormat((IOSurfaceRef)a3);
  if (PixelFormat == result
    && *((void *)a2 + 1) == *((void *)a4 + 1)
    && *((void *)a2 + 2) == *((void *)a4 + 2))
  {
    double v11 = (CI *)IOSurfaceGetPixelFormat(this);
    int v12 = CI::format_from_PixelFormatType(v11);
    int v13 = CI::format_bytes_per_pixel(v12);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 0x40000000;
    void v14[2] = ___ZN2CI7Context11blitSurfaceEP11__IOSurface5IRectS2_S3__block_invoke;
    v14[3] = &__block_descriptor_tmp_16_0;
    v14[4] = a3;
    long long v15 = *(_OWORD *)a4;
    uint64_t v16 = *((void *)a4 + 2);
    int v19 = v13;
    long long v17 = *(_OWORD *)a2;
    uint64_t v18 = *((void *)a2 + 2);
    return SurfaceApplyPlaneBlock(this, (uint64_t)v14);
  }
  return result;
}

uint64_t ___ZN2CI7Context11blitSurfaceEP11__IOSurface5IRectS2_S3__block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(__IOSurface **)(a1 + 32);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZN2CI7Context11blitSurfaceEP11__IOSurface5IRectS2_S3__block_invoke_2;
  v9[3] = &__block_descriptor_tmp_14_0;
  long long v10 = *(_OWORD *)(a1 + 40);
  uint64_t v7 = *(void *)(a1 + 56);
  int v16 = *(_DWORD *)(a1 + 88);
  uint64_t v11 = v7;
  uint64_t v12 = a2;
  long long v13 = *(_OWORD *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = a6;
  return SurfaceApplyPlaneReadOnlyBlock(v6, (uint64_t)v9);
}

void *___ZN2CI7Context11blitSurfaceEP11__IOSurface5IRectS2_S3__block_invoke_2(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result[6])
  {
    uint64_t v8 = result;
    unint64_t v9 = 0;
    do
    {
      uint64_t result = memmove((void *)(v8[7] + (v9 + *((int *)v8 + 17)) * v8[11] + *((int *)v8 + 16) * (uint64_t)*((int *)v8 + 24)), (const void *)(a2 + (v9 + *((int *)v8 + 9)) * a6 + *((int *)v8 + 24) * (uint64_t)*((int *)v8 + 8)), v8[5] * *((int *)v8 + 24));
      ++v9;
    }
    while (v9 < v8[6]);
  }
  return result;
}

CI::Context *CI::Context::assemble_leafTiles(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v58[0] = 0;
  long long v56 = *(_OWORD *)a3;
  uint64_t v57 = *(void *)(a3 + 16);
  int v10 = (*(uint64_t (**)(void *))*a2)(a2);
  LODWORD(v54) = 0;
  uint64_t v11 = (*(uint64_t (**)(void *))(*a1 + 616))(a1);
  uint64_t v12 = a1[47];
  *((void *)&v54 + 1) = v11;
  uint64_t v55 = v12;
  int v13 = (*(uint64_t (**)(void *))(*a1 + 272))(a1);
  SurfaceFromCache = (CI::Context *)GetSurfaceFromCache(&v56, 1, 1, v10, &v54, v13, 0, -1, a4, (uint64_t)v58, 0);
  if (SurfaceFromCache) {
    BOOL v14 = v58[0] == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    unint64_t v16 = 0;
    long long v17 = (void *)a2[1];
    uint64_t v18 = (void *)a2[2];
    while (1)
    {
      if (v17 == v18)
      {
        unint64_t v20 = 0;
      }
      else
      {
        uint64_t v19 = v17[1];
        if (*v17 == v19) {
          unint64_t v20 = 0;
        }
        else {
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - *v17) >> 3);
        }
      }
      if (v16 >= v20) {
        return SurfaceFromCache;
      }
      unint64_t v21 = 0;
      unint64_t v41 = v16;
      while (1)
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (v18 - v17);
        if (v17 == v18) {
          unint64_t v22 = 0;
        }
        if (v21 >= v22) {
          break;
        }
        uint64_t v52 = 0;
        uint64_t v53 = 0;
        uint64_t v51 = 0;
        (*(void (**)(uint64_t *__return_ptr, void *, unint64_t, unint64_t))(*a2 + 16))(&v51, a2, v21, v16);
        int v24 = v51;
        int v23 = HIDWORD(v51);
        int v26 = *(_DWORD *)a3;
        int v25 = *(_DWORD *)(a3 + 4);
        uint64_t v28 = *(void *)(a3 + 8);
        uint64_t v27 = *(void *)(a3 + 16);
        if (v51 == 0x7FFFFFFF7FFFFFFFLL && !v52 && !v53 || v26 == 0x7FFFFFFF && v25 == 0x7FFFFFFF && !v28 && !v27) {
          goto LABEL_51;
        }
        if (v51 == 0x8000000180000001 && v52 == 0xFFFFFFFFLL && v53 == 0xFFFFFFFFLL)
        {
          int v29 = *(_DWORD *)(a3 + 4);
          int v30 = *(_DWORD *)a3;
          if (!v28) {
            goto LABEL_51;
          }
          goto LABEL_34;
        }
        if (v26 == -2147483647 && v25 == -2147483647 && v28 == 0xFFFFFFFFLL && v27 == 0xFFFFFFFFLL)
        {
          uint64_t v27 = v53;
          uint64_t v28 = v52;
          int v29 = HIDWORD(v51);
          int v30 = v51;
          if (!v52) {
            goto LABEL_51;
          }
LABEL_34:
          if (v27)
          {
            int v42 = v29;
            int v43 = v30;
            uint64_t v50 = 0;
            double Current = CFAbsoluteTimeGetCurrent();
            uint64_t v32 = (IRect *)(*(uint64_t (**)(void *, unint64_t, unint64_t, uint64_t *))(*a2 + 8))(a2, v21, v16, &v50);
            *(double *)a6 = *(double *)a6 + CFAbsoluteTimeGetCurrent() - Current;
            *(void *)(a6 + 8) += v50;
            if (v32)
            {
              v47[0] = v43 - v26;
              v47[1] = v42 - v25;
              uint64_t v48 = v28;
              uint64_t v49 = v27;
              v44[0] = v43 - v24;
              v44[1] = v42 - v23;
              uint64_t v45 = v28;
              uint64_t v46 = v27;
              CI::Context::blitSurface(SurfaceFromCache, (__IOSurface *)v47, v32, (__IOSurface *)v44, v33);
              ReturnSurfaceToCache((uint64_t)v32);
            }
            unint64_t v16 = v41;
          }
          goto LABEL_51;
        }
        if ((int)v51 <= v26) {
          int v30 = *(_DWORD *)a3;
        }
        else {
          int v30 = v51;
        }
        int v34 = v51 + v52;
        if ((int)v51 + (int)v52 >= v26 + (int)v28) {
          int v34 = v26 + v28;
        }
        BOOL v35 = __OFSUB__(v34, v30);
        int v36 = v34 - v30;
        if (v36 < 0 == v35)
        {
          if (SHIDWORD(v51) <= v25) {
            int v29 = *(_DWORD *)(a3 + 4);
          }
          else {
            int v29 = HIDWORD(v51);
          }
          int v37 = HIDWORD(v51) + v53;
          if (HIDWORD(v51) + (int)v53 >= v25 + (int)v27) {
            int v37 = v25 + v27;
          }
          BOOL v35 = __OFSUB__(v37, v29);
          int v38 = v37 - v29;
          if (v38 < 0 == v35)
          {
            uint64_t v28 = v36;
            uint64_t v27 = v38;
            if (v36) {
              goto LABEL_34;
            }
          }
        }
LABEL_51:
        ++v21;
        long long v17 = (void *)a2[1];
        uint64_t v18 = (void *)a2[2];
      }
      ++v16;
    }
  }
  return SurfaceFromCache;
}

uint64_t CI::Context::kernel_argument_size(uint64_t a1, int a2)
{
  uint64_t result = 4;
  switch(a2)
  {
    case 2:
      int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 520);
      uint64_t result = v4(a1, 10);
      break;
    case 3:
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 520))(a1, 10);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 520))(a1, 6) + v5;
      break;
    case 5:
    case 13:
      return result;
    case 6:
    case 15:
      uint64_t result = 8;
      break;
    case 7:
      uint64_t result = 12;
      break;
    case 8:
    case 16:
    case 27:
    case 42:
    case 43:
    case 46:
    case 47:
      uint64_t result = 16;
      break;
    case 9:
    case 18:
      uint64_t result = 32;
      break;
    case 10:
    case 40:
    case 44:
      uint64_t result = 48;
      break;
    case 11:
    case 41:
      uint64_t result = 64;
      break;
    case 12:
      uint64_t result = 2;
      break;
    case 14:
      uint64_t result = 6;
      break;
    case 17:
      uint64_t result = 24;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

BOOL CI::Context::format_is_supported_for_input(uint64_t a1, uint64_t a2)
{
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = ___ZNK2CI7Context29format_is_supported_for_inputENS_11PixelFormatE_block_invoke;
  v3[3] = &__block_descriptor_tmp_18;
  v3[4] = a1;
  return CI::format_swizzle_for_input(a2, (uint64_t)v3) != 0;
}

uint64_t ___ZNK2CI7Context29format_is_supported_for_inputENS_11PixelFormatE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 424))();
}

CGContext *CI::Context::set_cgcontext(CI::Context *this, CGContext *a2)
{
  uint64_t result = (CGContext *)*((void *)this + 6);
  if (result != a2)
  {
    CGContextRelease(result);
    uint64_t result = CGContextRetain(a2);
    *((void *)this + 6) = result;
  }
  return result;
}

void CI::Context::updateColorSpace(CGColorSpaceRef *this, CGColorSpaceRef space)
{
  if (space)
  {
    if (this[2])
    {
      CGColorSpaceRetain(space);
      CGColorSpaceRelease(this[2]);
      this[2] = space;
    }
  }
}

void CI::Context::updateWorkingSpace(CGColorSpaceRef *this, CGColorSpaceRef space)
{
  if (space)
  {
    if (this[3])
    {
      CGColorSpaceRetain(space);
      CGColorSpaceRelease(this[3]);
      this[3] = space;
    }
  }
}

uint64_t CI::Context::defaultOutputRGBSpace(CI::Context *this)
{
  if (CI::Context::defaultOutputRGBSpace(void)::didCreate != -1) {
    dispatch_once(&CI::Context::defaultOutputRGBSpace(void)::didCreate, &__block_literal_global_27);
  }
  return CI::Context::defaultOutputRGBSpace(void)::space;
}

CGColorSpaceRef ___ZN2CI7Context21defaultOutputRGBSpaceEv_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
  CI::Context::defaultOutputRGBSpace(void)::space = (uint64_t)result;
  return result;
}

uint64_t CI::Context::defaultOutputGraySpace(CI::Context *this)
{
  if (CI::Context::defaultOutputGraySpace(void)::didCreate != -1) {
    dispatch_once(&CI::Context::defaultOutputGraySpace(void)::didCreate, &__block_literal_global_30);
  }
  return CI::Context::defaultOutputGraySpace(void)::space;
}

CGColorSpaceRef ___ZN2CI7Context22defaultOutputGraySpaceEv_block_invoke()
{
  CGColorSpaceRef result = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC00]);
  CI::Context::defaultOutputGraySpace(void)::space = (uint64_t)result;
  return result;
}

uint64_t CI::Context::supported_compute_features(CI::Context *this)
{
  return 0;
}

uint64_t ___ZN2CIL26dump_intermediate_for_nodeEPKNS_11ProgramNodeEPKNS_14intermediate_tEP16dispatch_group_s_block_invoke()
{
  CI::dump_intermediate_for_node(CI::ProgramNode const*,CI::intermediate_t const*,dispatch_group_s *)::sRGB = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
  CI::dump_intermediate_for_node(CI::ProgramNode const*,CI::intermediate_t const*,dispatch_group_s *)::sRGBLinear = (uint64_t)CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC88]);
  CI::dump_intermediate_for_node(CI::ProgramNode const*,CI::intermediate_t const*,dispatch_group_s *)::dumpPngImages = CI_PRINT_TREE_dump_intermediates();
  CI::dump_intermediate_for_node(CI::ProgramNode const*,CI::intermediate_t const*,dispatch_group_s *)::dumpRawImages = CI_PRINT_TREE_dump_raw_intermediates();
  uint64_t result = CI_PRINT_TREE_dump_bmtl_intermediates();
  CI::dump_intermediate_for_node(CI::ProgramNode const*,CI::intermediate_t const*,dispatch_group_s *)::dumpBmtlImages = result;
  return result;
}

void ___ZN2CIL26dump_intermediate_for_nodeEPKNS_11ProgramNodeEPKNS_14intermediate_tEP16dispatch_group_s_block_invoke_2(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  dispatch_group_wait(*(dispatch_group_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  if (CI::dump_intermediate_for_node(CI::ProgramNode const*,CI::intermediate_t const*,dispatch_group_s *)::dumpPngImages)
  {
    uint64_t v2 = CI_TEMP_DIR();
    pid_t v3 = getpid();
    snprintf(__str, 0x100uLL, "%s/%d_intermediate_%d_%d_%d_%d_%d.png", v2, v3, *(_DWORD *)(a1 + 96), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 108), *(_DWORD *)(a1 + 112));
    if (SurfaceCroppedWriteToFile(*(__IOSurface **)(a1 + 48), *(CGColorSpace **)(a1 + 56), __str, *(CGFloat *)(a1 + 80), *(CGFloat *)(a1 + 88)))
    {
      int v4 = ci_logger_render();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        int v13 = __str;
        _os_log_impl(&dword_193671000, v4, OS_LOG_TYPE_DEFAULT, "Dumped intermediate to: %{public}s\n", buf, 0xCu);
      }
    }
  }
  if (CI::dump_intermediate_for_node(CI::ProgramNode const*,CI::intermediate_t const*,dispatch_group_s *)::dumpRawImages)
  {
    uint64_t v5 = CI_TEMP_DIR();
    pid_t v6 = getpid();
    snprintf(__str, 0x100uLL, "%s/%d_intermediate_%d_%d_%d_%d_%d.raw", v5, v6, *(_DWORD *)(a1 + 96), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 108), *(_DWORD *)(a1 + 112));
    if (SurfaceCroppedWriteRawToFile(*(__IOSurface **)(a1 + 48), __str, *(double *)(a1 + 80), *(double *)(a1 + 88)))
    {
      uint64_t v7 = ci_logger_render();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        int v13 = __str;
        _os_log_impl(&dword_193671000, v7, OS_LOG_TYPE_DEFAULT, "Dumped raw intermediate to: %{public}s\n", buf, 0xCu);
      }
    }
  }
  if (CI::dump_intermediate_for_node(CI::ProgramNode const*,CI::intermediate_t const*,dispatch_group_s *)::dumpBmtlImages)
  {
    uint64_t v8 = CI_TEMP_DIR();
    pid_t v9 = getpid();
    snprintf(__str, 0x100uLL, "%s/%d_%s_%d_%d_%d_%d_%d.bmtl", v8, v9, *(const char **)(*(void *)(*(void *)(a1 + 32) + 8) + 24), *(_DWORD *)(a1 + 96), *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), *(_DWORD *)(a1 + 108), *(_DWORD *)(a1 + 112));
    if (SurfaceCroppedWriteBmtlToFile(*(__IOSurface **)(a1 + 48), __str, *(double *)(a1 + 80), *(double *)(a1 + 88)))
    {
      int v10 = ci_logger_render();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446210;
        int v13 = __str;
        _os_log_impl(&dword_193671000, v10, OS_LOG_TYPE_DEFAULT, "Dumped bmtl intermediate to: %{public}s\n", buf, 0xCu);
      }
    }
  }
  uint64_t v11 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v11)
  {
    free(v11);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 0;
  }
  ReturnSurfaceToCache(*(void *)(a1 + 48));
  ReturnSurfaceToCache(*(void *)(a1 + 48));
}

uint64_t ___ZN2CIL23CI_ASSEMBLE_INPUT_TILESEv_block_invoke()
{
  v0 = getenv("CI_ASSEMBLE_INPUT_TILES");
  if (v0) {
    uint64_t result = atoi(v0);
  }
  else {
    uint64_t result = CI::CI_ASSEMBLE_INPUT_TILES(void)::v;
  }
  CI::CI_ASSEMBLE_INPUT_TILES(void)::v = result;
  return result;
}

uint64_t CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::~ObjectCache(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI11ObjectCacheINS_11MainProgramENS_13ProgramDigestELb0EED2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_100;
  block[4] = a1;
  uint64_t v2 = (NSObject **)(a1 + 56);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 56), block);
  Queue::~Queue(v2);
  std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::~__hash_table(a1 + 16);
  return a1;
}

void ___ZN2CI11ObjectCacheINS_11MainProgramENS_13ProgramDigestELb0EED2Ev_block_invoke(uint64_t a1)
{
}

void std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      pid_t v3 = (void *)*v2;
      CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry::~Entry((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry::~Entry(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 0x40000000;
    v4[2] = ___ZN2CI11ObjectCacheINS_11MainProgramENS_13ProgramDigestELb0EE5EntryD2Ev_block_invoke;
    v4[3] = &__block_descriptor_tmp_101;
    v4[4] = a1;
    CI::Object::performDeferredRoot(v4);
  }
  else
  {
    uint64_t v2 = *(CI::Object **)a1;
    if (*(void *)a1) {
      CI::Object::unref(v2);
    }
  }
  return a1;
}

void ___ZN2CI11ObjectCacheINS_11MainProgramENS_13ProgramDigestELb0EE5EntryD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = **(CI::Object ***)(a1 + 32);
  if (v1) {
    CI::Object::unref(v1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

uint64_t CI::ObjectCache<CI::Node,unsigned long long,false>::~ObjectCache(uint64_t a1)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI11ObjectCacheINS_4NodeEyLb0EED2Ev_block_invoke;
  block[3] = &__block_descriptor_tmp_102;
  block[4] = a1;
  uint64_t v2 = (NSObject **)(a1 + 56);
  dispatch_sync(*(dispatch_queue_t *)(a1 + 56), block);
  Queue::~Queue(v2);
  std::__hash_table<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>>>::~__hash_table(a1 + 16);
  return a1;
}

void ___ZN2CI11ObjectCacheINS_4NodeEyLb0EED2Ev_block_invoke(uint64_t a1)
{
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>>>::__deallocate_node(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      pid_t v3 = (void *)*v2;
      CI::ObjectCache<CI::Node,unsigned long long,false>::Entry::~Entry((uint64_t)(v2 + 3));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

uint64_t CI::ObjectCache<CI::Node,unsigned long long,false>::Entry::~Entry(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 16))
  {
    v4[0] = MEMORY[0x1E4F143A8];
    v4[1] = 0x40000000;
    v4[2] = ___ZN2CI11ObjectCacheINS_4NodeEyLb0EE5EntryD2Ev_block_invoke;
    v4[3] = &__block_descriptor_tmp_103;
    v4[4] = a1;
    CI::Object::performDeferredRoot(v4);
  }
  else
  {
    uint64_t v2 = *(CI::Object **)a1;
    if (*(void *)a1) {
      CI::Object::unref(v2);
    }
  }
  return a1;
}

void ___ZN2CI11ObjectCacheINS_4NodeEyLb0EE5EntryD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = **(CI::Object ***)(a1 + 32);
  if (v1) {
    CI::Object::unref(v1);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void ___ZN2CI11ObjectCacheINS_4NodeEyLb0EE5clearEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::__hash_table<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>>>::clear(v1 + 16);
  *(void *)(v1 + 8) = 0;
}

void CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::evict(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    do
    {
      if (v2[4] < v1[4]) {
        uint64_t v1 = v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::remove((void *)(a1 + 16), v1, (uint64_t)v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,void *>>>>::reset[abi:nn180100]((uint64_t)v3, 0);
}

void *std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  pid_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    uint64_t v7 = v6;
    pid_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *uint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void ___ZN2CI11ObjectCacheINS_11MainProgramENS_13ProgramDigestELb0EE5clearEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::clear(v1 + 16);
  *(void *)(v1 + 8) = 0;
}

const char *CI::name_for_conversion(unsigned int a1)
{
  if (a1 > 0x36) {
    return "unknown-conversion";
  }
  else {
    return off_1E5774068[a1];
  }
}

__CFString *CI::cfname_for_conversion(unsigned int a1)
{
  if (a1 > 0x36) {
    return @"unknown-conversion";
  }
  else {
    return (__CFString *)*((void *)&off_1E5774220 + (int)a1);
  }
}

uint64_t CI::conversion_is_alpha_one(unsigned int a1)
{
  return (a1 < 0x37) & (0x7FFFFFFFFFFE1EuLL >> a1);
}

void CI::convert_buffer_to_texture(uint64_t a1, __IOSurface *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, __IOSurface *a6, uint64_t *a7, unsigned int a8)
{
  uint64_t v78 = *MEMORY[0x1E4F143B8];
  if (CI_ENABLE_METAL_CONVERT())
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == 77)
    {
      uint64_t v45 = *a7;
      uint64_t v46 = (void *)CI::MetalContext::device((id *)a1);
      if (v46)
      {
        long long v17 = *(void **)(a1 + 1792);
        if (v17)
        {
          uint64_t v18 = [CIMetalConverter alloc];
          uint64_t v19 = NSString;
          uint64_t v44 = CI::name_for_conversion(a8);
          uint64_t v20 = objc_msgSend(v19, "stringWithUTF8String:");
          unint64_t v21 = v18;
          unint64_t v22 = v17;
          uint64_t v23 = [(CIMetalConverter *)v21 initWithDevice:v46 kernelName:v20];
          if (v23)
          {
            int v24 = (void *)v23;
            int v25 = (void *)[v46 newBufferWithBytes:a5[4].i64[1] length:CI::Bitmap::length((CI::Bitmap *)a5) options:0];
            unint64_t BaseAddress = (unint64_t)IOSurfaceGetBaseAddress(a6);
            unint64_t MemorySize = SurfaceGetMemorySize(a6);
            {
              CI::convert_metal(CI::MetalContext const*,CI::Bitmap const&,__IOSurface *,CI::Texture,CI::ConvertType)::sPageSize = getpagesize();
            }
            uint64_t v28 = CI::convert_metal(CI::MetalContext const*,CI::Bitmap const&,__IOSurface *,CI::Texture,CI::ConvertType)::sPageSize
                - 1;
            if ((CI::convert_metal(CI::MetalContext const*,CI::Bitmap const&,__IOSurface *,CI::Texture,CI::ConvertType)::sPageSize & (CI::convert_metal(CI::MetalContext const*,CI::Bitmap const&,__IOSurface *,CI::Texture,CI::ConvertType)::sPageSize - 1)) != 0)
            {
              if (BaseAddress
                 % CI::convert_metal(CI::MetalContext const*,CI::Bitmap const&,__IOSurface *,CI::Texture,CI::ConvertType)::sPageSize)
              {
                goto LABEL_19;
              }
              unint64_t v29 = MemorySize
                  % CI::convert_metal(CI::MetalContext const*,CI::Bitmap const&,__IOSurface *,CI::Texture,CI::ConvertType)::sPageSize;
            }
            else
            {
              if ((v28 & BaseAddress) != 0) {
                goto LABEL_19;
              }
              unint64_t v29 = v28 & MemorySize;
            }
            if (!v29)
            {
              BOOL v35 = v24;
              int v38 = ci_logger_performance();
              if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136446210;
                uint64_t v77 = v44;
                _os_log_impl(&dword_193671000, v38, OS_LOG_TYPE_INFO, "CI_CONVERSION: (Metal) %{public}s_buffer", buf, 0xCu);
              }
              IOSurfaceLock(a6, 2u, 0);
              CFRetain(a6);
              uint64_t v66 = MEMORY[0x1E4F143A8];
              uint64_t v67 = 3221225472;
              uint64_t v68 = (uint64_t)___ZN2CIL13convert_metalEPKNS_12MetalContextERKNS_6BitmapEP11__IOSurfaceNS_7TextureENS_11ConvertTypeE_block_invoke;
              char v69 = (__n128 (*)(uint64_t, uint64_t))&__block_descriptor_40_e12_v24__0_v8Q16l;
              char v70 = (uint64_t (*)())a6;
              uint64_t v39 = (void *)[v46 newBufferWithBytesNoCopy:BaseAddress length:MemorySize options:0 deallocator:&v66];
              uint64_t v40 = a5[6].i64[0];
              size_t BytesPerRow = IOSurfaceGetBytesPerRow(a6);
              size_t Width = IOSurfaceGetWidth(a6);
              size_t Height = IOSurfaceGetHeight(a6);
              v75[0] = Width;
              v75[1] = Height;
              v75[2] = 0;
              [v35 encodeToCommandBuffer:v22 sourceBuffer:v25 sourceRowBytes:v40 destinationBuffer:v39 destinationRowBytes:BytesPerRow destinationSize:v75];

              IOSurfaceUnlock(a6, 2u, 0);
              goto LABEL_22;
            }
LABEL_19:
            int v34 = ci_logger_performance();
            if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446210;
              uint64_t v77 = v44;
              _os_log_impl(&dword_193671000, v34, OS_LOG_TYPE_INFO, "CI_CONVERSION: (Metal) %{public}s_texture", buf, 0xCu);
            }
            BOOL v35 = v24;
            [v24 encodeToCommandBuffer:v22 sourceBuffer:v25 sourceRowBytes:a5[6].i64[0] destinationTexture:v45];
LABEL_22:
            if (CI_KDEBUG())
            {
              int v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
              uint64_t v37 = v36;
              uint64_t v58 = MEMORY[0x1E4F143A8];
              uint64_t v59 = 3221225472;
              uint64_t v60 = (uint64_t)___ZN2CIL13convert_metalEPKNS_12MetalContextERKNS_6BitmapEP11__IOSurfaceNS_7TextureENS_11ConvertTypeE_block_invoke_231;
              unint64_t v61 = (__n128 (*)(uint64_t, uint64_t))&__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
              unint64_t v62 = (uint64_t (*)())v36;
              [v22 addScheduledHandler:&v58];
              v74[0] = MEMORY[0x1E4F143A8];
              v74[1] = 3221225472;
              v74[2] = ___ZN2CIL13convert_metalEPKNS_12MetalContextERKNS_6BitmapEP11__IOSurfaceNS_7TextureENS_11ConvertTypeE_block_invoke_234;
              v74[3] = &__block_descriptor_40_e28_v16__0___MTLCommandBuffer__8l;
              v74[4] = v37;
              [v22 addCompletedHandler:v74];
            }

            return;
          }
        }
      }
    }
  }
  if (a2 && (int v30 = CI::format_from_IOSurface(a2, v16), a6))
  {
    int v31 = v30;
    if (IOSurfaceGetPlaneCount(a2) < 2)
    {
      v53[0] = MEMORY[0x1E4F143A8];
      v53[1] = 3221225472;
      v53[2] = ___ZN2CI25convert_buffer_to_textureEPNS_7ContextEP11__IOSurfacexxRKNS_6BitmapES3_NS_7TextureENS_11ConvertTypeE_block_invoke_3;
      v53[3] = &__block_descriptor_72_e21_v48__0_v8Q16Q24Q32Q40l;
      v53[4] = a2;
      void v53[5] = a4;
      v53[6] = a3;
      v53[7] = a1;
      int v54 = v31;
      unsigned int v55 = a8;
      SurfaceApplyPlaneBlock(a6, (uint64_t)v53);
    }
    else
    {
      uint64_t v66 = 0;
      uint64_t v67 = (uint64_t)&v66;
      uint64_t v68 = 0x5012000000;
      char v69 = __Block_byref_object_copy__22;
      char v70 = __Block_byref_object_dispose__22;
      uint64_t v71 = "";
      long long v72 = 0u;
      long long v73 = 0u;
      uint64_t v58 = 0;
      uint64_t v59 = (uint64_t)&v58;
      uint64_t v60 = 0x5012000000;
      unint64_t v61 = __Block_byref_object_copy__22;
      unint64_t v62 = __Block_byref_object_dispose__22;
      uint64_t v63 = "";
      long long v64 = 0u;
      long long v65 = 0u;
      v56[0] = MEMORY[0x1E4F143A8];
      v56[1] = 3221225472;
      v56[2] = ___ZN2CI25convert_buffer_to_textureEPNS_7ContextEP11__IOSurfacexxRKNS_6BitmapES3_NS_7TextureENS_11ConvertTypeE_block_invoke;
      v56[3] = &unk_1E5773FA8;
      v56[4] = &v66;
      v56[5] = &v58;
      v56[6] = a2;
      v56[7] = a1;
      v56[8] = a3;
      v56[9] = a4;
      unsigned int v57 = a8;
      SurfaceApplyPlaneBlock(a6, (uint64_t)v56);
      _Block_object_dispose(&v58, 8);
      _Block_object_dispose(&v66, 8);
    }
  }
  else
  {
    uint64_t v32 = a5[4].i64[1];
    uint64_t v33 = a5[6].i64[0];
    v47[0] = MEMORY[0x1E4F143A8];
    v47[1] = 3221225472;
    _DWORD v47[2] = ___ZN2CI25convert_buffer_to_textureEPNS_7ContextEP11__IOSurfacexxRKNS_6BitmapES3_NS_7TextureENS_11ConvertTypeE_block_invoke_5;
    v47[3] = &__block_descriptor_92_e21_v48__0_v8Q16Q24Q32Q40l;
    v47[4] = a1;
    v47[5] = v32;
    int8x16_t v48 = vextq_s8(a5[5], a5[5], 8uLL);
    uint64_t v49 = v33;
    uint64_t v50 = a3;
    uint64_t v51 = a4;
    unsigned int v52 = a8;
    SurfaceApplyPlaneBlock(a6, (uint64_t)v47);
  }
}

void sub_1938D07DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
}

__n128 __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  long long v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

uint64_t ___ZN2CI25convert_buffer_to_textureEPNS_7ContextEP11__IOSurfacexxRKNS_6BitmapES3_NS_7TextureENS_11ConvertTypeE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZN2CI25convert_buffer_to_textureEPNS_7ContextEP11__IOSurfacexxRKNS_6BitmapES3_NS_7TextureENS_11ConvertTypeE_block_invoke_2;
  v8[3] = &unk_1E5773F80;
  long long v9 = *(_OWORD *)(a1 + 32);
  pid_t v6 = *(__IOSurface **)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 64);
  uint64_t v12 = a2;
  uint64_t v13 = a5;
  uint64_t v14 = a4;
  uint64_t v15 = a6;
  int v16 = *(_DWORD *)(a1 + 80);
  return SurfaceApplyPlaneReadOnlyBlock(v6, (uint64_t)v8);
}

void ___ZN2CI25convert_buffer_to_textureEPNS_7ContextEP11__IOSurfacexxRKNS_6BitmapES3_NS_7TextureENS_11ConvertTypeE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a3 == 1)
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 48) = a2;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 56) = a5;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 64) = a4;
    uint64_t v6 = *(void *)(a1 + 40);
  }
  else
  {
    if (a3) {
      goto LABEL_6;
    }
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = a2;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 56) = a5;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 64) = a4;
    uint64_t v6 = *(void *)(a1 + 32);
  }
  *(void *)(*(void *)(v6 + 8) + 72) = a6;
LABEL_6:
  uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v9 = *(void *)(v7 + 48);
  unint64_t v8 = (_OWORD *)(v7 + 48);
  if (v9)
  {
    uint64_t v10 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v12 = *(void *)(v10 + 48);
    long long v11 = (_OWORD *)(v10 + 48);
    if (v12)
    {
      long long v13 = v8[1];
      *(_OWORD *)&v21.data = *v8;
      *(_OWORD *)&v21.unint64_t width = v13;
      long long v14 = v11[1];
      v20[0] = *v11;
      v20[1] = v14;
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v15 = *(void *)(a1 + 56);
      unint64_t v17 = *(void *)(a1 + 64);
      long long v18 = *(_OWORD *)(a1 + 88);
      *(_OWORD *)&v19.data = *(_OWORD *)(a1 + 72);
      *(_OWORD *)&v19.unint64_t width = v18;
      CI::convert_cpu(v16, &v21, (uint64_t *)v20, v15, v17, &v19, *(_DWORD *)(a1 + 104));
    }
  }
}

void CI::convert_cpu(uint64_t a1, const vImage_Buffer *a2, uint64_t *a3, uint64_t a4, unint64_t a5, const vImage_Buffer *a6, unsigned int a7)
{
  uint64_t v278 = *MEMORY[0x1E4F143B8];
  long long v13 = ci_logger_performance();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v277 = CI::name_for_conversion(a7);
    _os_log_impl(&dword_193671000, v13, OS_LOG_TYPE_INFO, "CI_CONVERSION: (CPU) %{public}s", buf, 0xCu);
  }
  long long v14 = ci_signpost_log_render();
  os_signpost_id_t v15 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1) << 32;
  if (v15 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v14))
  {
    *(_WORD *)buf = 0;
    _os_signpost_emit_with_name_impl(&dword_193671000, v14, OS_SIGNPOST_INTERVAL_BEGIN, v15, "convert_cpu", "", buf, 2u);
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  TimerBase::TimerBase((uint64_t)buf, v16, 0, (uint64_t)"convert_cpu", 30);
  long long color = xmmword_19394C7E0;
  Pixel_16U v17 = -1;
  char v18 = 2;
  switch(a7)
  {
    case 1u:
      vImageConvert_RGB888toRGBA8888(a2, 0, 0xFFu, a6, 0, 0);
      break;
    case 2u:
      goto LABEL_184;
    case 3u:
      Pixel_16U v17 = 15360;
LABEL_184:
      vImageConvert_RGB16UtoRGBA16U(a2, 0, v17, a6, 0, 0);
      break;
    case 4u:
      vImageConvert_RGBFFFtoRGBAFFFF(a2, 0, 1.0, a6, 0, 0);
      break;
    case 5u:
      a2->width *= 4;
      a6->width *= 4;
      vImageConvert_16Fto16U(a2, a6, 0);
      break;
    case 6u:
      a2->width *= 4;
      goto LABEL_188;
    case 7u:
      goto LABEL_210;
    case 8u:
      goto LABEL_212;
    case 9u:
      vImageConvert_RGB16UtoRGBA16U(a2, 0, 0xFFFFu, a6, 0, 0);
      a2 = a6;
LABEL_188:
      a6->width *= 4;
      vImageConvert_16Uto16F(a2, a6, 0);
      break;
    case 0xAu:
      vImagePixelCount height = a6->height;
      if (height)
      {
        unint64_t v220 = 0;
        size_t rowBytes = a2->rowBytes;
        unint64_t v222 = a2->height - 1;
        uint64_t v223 = (uint64_t)a2->data + 12 * a4;
        data = (char *)a6->data;
        vImagePixelCount width = a6->width;
        size_t v225 = a6->rowBytes;
        do
        {
          if (width)
          {
            if (height - 1 >= v220) {
              unint64_t v227 = v220;
            }
            else {
              unint64_t v227 = height - 1;
            }
            v228 = &data[v227 * v225];
            unint64_t v229 = v220 + a5;
            if (v222 < v220 + a5) {
              unint64_t v229 = v222;
            }
            v230 = (int *)(v223 + v229 * rowBytes);
            vImagePixelCount v231 = width;
            do
            {
              _S1 = *v230;
              __asm { FCVT            H1, S1 }
              *(_WORD *)v228 = _S1;
              _S1 = v230[1];
              __asm { FCVT            H1, S1 }
              *((_WORD *)v228 + 1) = _S1;
              _S1 = v230[2];
              __asm { FCVT            H1, S1 }
              *((_WORD *)v228 + 2) = _S1;
              *((_WORD *)v228 + 3) = COERCE_UNSIGNED_INT(1.0);
              v230 += 3;
              v228 += 8;
              --v231;
            }
            while (v231);
          }
          ++v220;
        }
        while (v220 != height);
      }
      break;
    case 0xBu:
      vImageConvert_Planar8toPlanar16F(a2, a6, 0);
      break;
    case 0xCu:
      vImageConvert_Planar16FtoPlanar8(a2, a6, 0);
      break;
    case 0xDu:
      vImageConvert_Planar8toPlanarF(a2, a6, 1.0, 0.0, 0);
      break;
    case 0xEu:
      vImageConvert_PlanarFtoPlanar8(a2, a6, 1.0, 0.0, 0);
      break;
    case 0xFu:
      vImageConvert_Planar16FtoPlanarF(a2, a6, 0);
      break;
    case 0x10u:
      vImageConvert_PlanarFtoPlanar16F(a2, a6, 0);
      break;
    case 0x11u:
      vImagePixelCount v235 = a6->height;
      if (v235)
      {
        unint64_t v236 = 0;
        v237 = (char *)a2->data;
        size_t v238 = a2->rowBytes;
        unint64_t v239 = a2->height - 1;
        v240 = (char *)a6->data;
        vImagePixelCount v242 = a6->width;
        size_t v241 = a6->rowBytes;
        do
        {
          if (v236 >= v235 - 1) {
            unint64_t v243 = v235 - 1;
          }
          else {
            unint64_t v243 = v236;
          }
          if (v239 >= v236 + a5) {
            unint64_t v244 = v236 + a5;
          }
          else {
            unint64_t v244 = v239;
          }
          if (v242)
          {
            v245 = &v240[v241 * v243];
            vImagePixelCount v246 = v242;
            uint64_t v247 = a4;
            v248 = &v237[v244 * v238];
            do
            {
              _S1 = (float)((*(_DWORD *)&v248[4 * (v247 / 3)] >> (10 * (v247 % 3))) & 0x3FF) / 1023.0;
              __asm { FCVT            H1, S1 }
              *(_WORD *)v245 = LOWORD(_S1);
              v245 += 2;
              ++v247;
              --v246;
            }
            while (v246);
          }
          ++v236;
        }
        while (v236 != v235);
      }
      break;
    case 0x12u:
      vImagePixelCount v250 = a6->height;
      if (v250)
      {
        unint64_t v251 = 0;
        v252 = (char *)a2->data;
        size_t v253 = a2->rowBytes;
        unint64_t v254 = a2->height - 1;
        vImagePixelCount v256 = a6->width;
        size_t v255 = a6->rowBytes;
        uint64_t v257 = (uint64_t)a6->data + 2;
        do
        {
          if (v251 >= v250 - 1) {
            unint64_t v258 = v250 - 1;
          }
          else {
            unint64_t v258 = v251;
          }
          if (v254 >= v251 + a5) {
            unint64_t v259 = v251 + a5;
          }
          else {
            unint64_t v259 = v254;
          }
          if (v256)
          {
            v260 = (_WORD *)(v257 + v255 * v258);
            vImagePixelCount v261 = v256;
            uint64_t v262 = 2 * a4;
            v263 = &v252[v259 * v253];
            do
            {
              _S1 = (float)((*(_DWORD *)&v263[4 * (v262 / 3)] >> (10 * (v262 % 3))) & 0x3FF) / 1023.0;
              __asm { FCVT            H1, S1 }
              *(v260 - 1) = LOWORD(_S1);
              _S1 = (float)((*(_DWORD *)&v263[4 * ((v262 + 1) / 3)] >> (10 * ((v262 + 1) % 3))) & 0x3FF) / 1023.0;
              __asm { FCVT            H1, S1 }
              _WORD *v260 = LOWORD(_S1);
              v262 += 2;
              v260 += 2;
              --v261;
            }
            while (v261);
          }
          ++v251;
        }
        while (v251 != v250);
      }
      break;
    case 0x13u:
      a2->width *= 2;
      a6->width *= 2;
      vImageConvert_Planar8toPlanar16F(a2, a6, 0);
      break;
    case 0x14u:
      a2->width *= 2;
      a6->width *= 2;
      vImageConvert_Planar16FtoPlanar8(a2, a6, 0);
      break;
    case 0x15u:
      a2->width *= 2;
      a6->width *= 2;
      vImageConvert_Planar8toPlanarF(a2, a6, 1.0, 0.0, 0);
      break;
    case 0x16u:
      a2->width *= 2;
      a6->width *= 2;
      vImageConvert_PlanarFtoPlanar8(a2, a6, 1.0, 0.0, 0);
      break;
    case 0x17u:
      char v18 = 1;
LABEL_210:
      a2->width <<= v18;
      a6->width <<= v18;
      vImageConvert_Planar16FtoPlanarF(a2, a6, 0);
      break;
    case 0x18u:
      char v18 = 1;
LABEL_212:
      a2->width <<= v18;
      a6->width <<= v18;
      vImageConvert_PlanarFtoPlanar16F(a2, a6, 0);
      break;
    case 0x19u:
      vImageExtractChannel_ARGB16U(a2, a6, 0, 0);
      break;
    case 0x1Au:
      vImageConvert_Planar16UtoARGB16U(a2, a2, a2, a2, a6, 0);
      *(void *)the_pixel = 0x3C00000000000000;
      vImageOverwriteChannelsWithPixel_ARGB16U(the_pixel, a6, a6, 7u, 0);
      break;
    case 0x1Bu:
      vImageExtractChannel_ARGBFFFF(a2, a6, 0, 0);
      break;
    case 0x1Cu:
      vImageBufferFill_ARGBFFFF(a6, (const float *)&color, 0);
      vImageOverwriteChannels_ARGBFFFF(a2, a6, a6, 8u, 0);
      break;
    case 0x1Du:
    case 0x1Eu:
      vImagePixelCount v113 = a6->height;
      if (v113)
      {
        vImagePixelCount v114 = 0;
        vImagePixelCount v115 = a6->width;
        do
        {
          if (v115)
          {
            vImagePixelCount v116 = 0;
            vImagePixelCount v117 = v113 - 1;
            if (v117 >= v114) {
              vImagePixelCount v117 = v114;
            }
            long long v118 = (char *)a6->data + v117 * a6->rowBytes;
            unint64_t v119 = a2->height - 1;
            if (v119 >= v114 + a5) {
              unint64_t v119 = v114 + a5;
            }
            long long v120 = (char *)a2->data + 2 * a4 + v119 * a2->rowBytes;
            if (a7 == 29) {
              uint64_t v121 = (uint64_t)(v120 + 1);
            }
            else {
              uint64_t v121 = (uint64_t)a2->data + 2 * a4 + v119 * a2->rowBytes;
            }
            if (a7 != 29) {
              ++v120;
            }
            do
            {
              char v122 = *v120;
              v120 += 2;
              *long long v118 = v122;
              v118[1] = *(unsigned char *)(v121 + (((uint64_t)(v116 << 63) >> 63) & 0xFFFFFFFFFFFFFFFELL));
              if (v116) {
                long long v123 = (unsigned char *)v121;
              }
              else {
                long long v123 = (unsigned char *)(v121 + 2);
              }
              v118[2] = *v123;
              v118[3] = -1;
              ++v116;
              v118 += 4;
              vImagePixelCount v115 = a6->width;
              v121 += 2;
            }
            while (v115 > v116);
            vImagePixelCount v113 = a6->height;
          }
          ++v114;
        }
        while (v113 > v114);
      }
      break;
    case 0x1Fu:
    case 0x20u:
    case 0x25u:
    case 0x26u:
    case 0x2Bu:
    case 0x2Cu:
      vImagePixelCount v19 = a6->height;
      if (v19)
      {
        unint64_t v20 = 0;
        size_t v270 = a2->rowBytes;
        unint64_t v21 = a2->height - 1;
        uint64_t v22 = *a3;
        uint64_t v23 = a3[3];
        unint64_t v24 = a3[1] - 1;
        vImagePixelCount v25 = a6->width;
        size_t v267 = a6->rowBytes;
        uint64_t v26 = (uint64_t)a6->data + 4;
        uint64_t v27 = (uint64_t)a2->data + 2 * a5;
        unint64_t v28 = a5;
        do
        {
          if (v20 >= v19 - 1) {
            unint64_t v29 = v19 - 1;
          }
          else {
            unint64_t v29 = v20;
          }
          if (v28 >= v21) {
            unint64_t v30 = v21;
          }
          else {
            unint64_t v30 = v28;
          }
          unint64_t v31 = v20 + a5;
          if ((uint64_t)(v20 + a5) < 0 != __OFADD__(v20, a5)) {
            uint64_t v32 = v31 + 1;
          }
          else {
            uint64_t v32 = v20 + a5;
          }
          uint64_t v33 = v32 >> 1;
          unint64_t v34 = 2 * (v31 & 1) + (v32 >> 1) - 1;
          if (v24 < v32 >> 1) {
            uint64_t v33 = v24;
          }
          if (v24 >= v34) {
            unint64_t v35 = v34;
          }
          else {
            unint64_t v35 = v24;
          }
          if (v25)
          {
            char v36 = 0;
            uint64_t v37 = 0;
            int v38 = (_WORD *)(v26 + v267 * v29);
            uint64_t v39 = v27 + v270 * v30;
            uint64_t v40 = v22 + v33 * v23;
            uint64_t v41 = v22 + v35 * v23;
            signed int v42 = *((_DWORD *)a3 + 4);
            do
            {
              signed int v43 = v37 >> 1;
              signed int v44 = (v36 & 2) + (v37 >> 1);
              if ((int)(v37 >> 1) >= v42) {
                signed int v43 = v42 - 1;
              }
              int v45 = v43 & ~(v43 >> 31);
              if (v44 <= v42) {
                int v46 = v44 - 1;
              }
              else {
                int v46 = v42 - 1;
              }
              uint64_t v47 = (2 * v45) + a4;
              uint64_t v48 = 2 * (2 * (v46 & ~(v46 >> 31)) + a4);
              __int16 v49 = 9 * (*(_WORD *)(v40 + 2 * v47) >> 6)
                  + (*(_WORD *)(v41 + v48) >> 6)
                  + 3 * ((*(_WORD *)(v41 + 2 * v47) >> 6) + (*(_WORD *)(v40 + v48) >> 6));
              LODWORD(v48) = (unsigned __int16)(9 * (*(_WORD *)(v40 + 2 * v47 + 2) >> 6)
                                              + (*(_WORD *)(v41 + v48 + 2) >> 6)
                                              + 3
                                              * ((*(_WORD *)(v41 + 2 * v47 + 2) >> 6) + (*(_WORD *)(v40 + v48 + 2) >> 6))
                                              + 8) >> 4;
              _D2 = (double)(*(unsigned __int16 *)(v39 + 2 * v37) >> 6) / 1023.0;
              __asm { FCVT            H2, D2 }
              _D3 = (double)((unsigned __int16)(v49 + 8) >> 4) / 1023.0;
              *(v38 - 2) = LOWORD(_D2);
              __asm { FCVT            H2, D3 }
              _D3 = (double)v48 / 1023.0;
              __asm { FCVT            H3, D3 }
              *(v38 - 1) = LOWORD(_D2);
              *int v38 = LOWORD(_D3);
              v38[1] = COERCE_UNSIGNED_INT(1.0);
              ++v37;
              v36 += 2;
              v38 += 4;
            }
            while (v25 != v37);
          }
          ++v20;
          ++v28;
        }
        while (v20 != v19);
      }
      break;
    case 0x21u:
    case 0x22u:
    case 0x27u:
    case 0x28u:
    case 0x2Du:
    case 0x2Eu:
      vImagePixelCount v57 = a6->height;
      if (v57)
      {
        unint64_t v58 = 0;
        size_t v59 = a2->rowBytes;
        unint64_t v60 = a2->height - 1;
        uint64_t v61 = *a3;
        uint64_t v62 = a3[3];
        unint64_t v63 = a3[1] - 1;
        vImagePixelCount v65 = a6->width;
        size_t v64 = a6->rowBytes;
        uint64_t v66 = (uint64_t)a6->data + 4;
        uint64_t v67 = (uint64_t)a2->data + 2 * a4;
        unint64_t v68 = a5;
        do
        {
          if (v58 >= v57 - 1) {
            unint64_t v69 = v57 - 1;
          }
          else {
            unint64_t v69 = v58;
          }
          if (v68 >= v60) {
            unint64_t v70 = v60;
          }
          else {
            unint64_t v70 = v68;
          }
          if (v63 >= v58 + a5) {
            unint64_t v71 = v58 + a5;
          }
          else {
            unint64_t v71 = v63;
          }
          if (v65)
          {
            char v72 = 0;
            uint64_t v73 = 0;
            char v74 = (_WORD *)(v66 + v64 * v69);
            uint64_t v75 = v67 + v59 * v70;
            uint64_t v76 = v61 + v71 * v62;
            signed int v77 = *((_DWORD *)a3 + 4);
            do
            {
              signed int v78 = v73 >> 1;
              signed int v79 = (v72 & 2) + (v73 >> 1);
              if ((int)(v73 >> 1) >= v77) {
                signed int v78 = v77 - 1;
              }
              int v80 = v78 & ~(v78 >> 31);
              if (v79 <= v77) {
                int v81 = v79 - 1;
              }
              else {
                int v81 = v77 - 1;
              }
              uint64_t v82 = (unsigned __int16 *)(v76 + 2 * ((2 * v80) + a4));
              long long v83 = (unsigned __int16 *)(v76 + 2 * (2 * (v81 & ~(v81 >> 31)) + a4));
              unsigned int v84 = 3 * (*v82 >> 6) + (*v83 >> 6) + 2;
              LODWORD(v82) = (3 * (v82[1] >> 6) + (v83[1] >> 6) + 2) >> 2;
              _D2 = (double)(*(unsigned __int16 *)(v75 + 2 * v73) >> 6) / 1023.0;
              __asm { FCVT            H2, D2 }
              _D3 = (double)(v84 >> 2) / 1023.0;
              *(v74 - 2) = LOWORD(_D2);
              __asm { FCVT            H2, D3 }
              _D3 = (double)v82 / 1023.0;
              __asm { FCVT            H3, D3 }
              *(v74 - 1) = LOWORD(_D2);
              *char v74 = LOWORD(_D3);
              v74[1] = COERCE_UNSIGNED_INT(1.0);
              ++v73;
              v72 += 2;
              v74 += 4;
            }
            while (v65 != v73);
          }
          ++v58;
          ++v68;
        }
        while (v58 != v57);
      }
      break;
    case 0x23u:
    case 0x24u:
    case 0x29u:
    case 0x2Au:
    case 0x2Fu:
    case 0x30u:
      vImagePixelCount v88 = a6->height;
      if (v88)
      {
        unint64_t v89 = 0;
        size_t v90 = a2->rowBytes;
        unint64_t v91 = a2->height - 1;
        uint64_t v92 = a3[3];
        unint64_t v93 = a3[1] - 1;
        uint64_t v94 = (uint64_t)a2->data + 2 * a4;
        vImagePixelCount v96 = a6->width;
        size_t v95 = a6->rowBytes;
        uint64_t v97 = *a3 + 4 * a4 + 2;
        uint64_t v98 = (uint64_t)a6->data + 4;
        do
        {
          if (a5 >= v93) {
            unint64_t v99 = v93;
          }
          else {
            unint64_t v99 = a5;
          }
          if (a5 >= v91) {
            unint64_t v100 = v91;
          }
          else {
            unint64_t v100 = a5;
          }
          if (v89 >= v88 - 1) {
            unint64_t v101 = v88 - 1;
          }
          else {
            unint64_t v101 = v89;
          }
          if (v96)
          {
            CGRect v102 = (unsigned __int16 *)(v97 + v92 * v99);
            CGRect v103 = (unsigned __int16 *)(v94 + v90 * v100);
            vImagePixelCount v104 = v96;
            CGRect v105 = (_WORD *)(v98 + v95 * v101);
            do
            {
              unsigned int v106 = *v103++;
              unsigned int v107 = v106 >> 6;
              unsigned int v108 = *(v102 - 1) >> 6;
              unsigned int v109 = *v102;
              v102 += 2;
              _D2 = (double)v107 / 1023.0;
              __asm { FCVT            H2, D2 }
              *(v105 - 2) = LOWORD(_D2);
              _D2 = (double)v108 / 1023.0;
              __asm { FCVT            H2, D2 }
              _D3 = (double)(v109 >> 6) / 1023.0;
              *(v105 - 1) = LOWORD(_D2);
              __asm { FCVT            H2, D3 }
              *CGRect v105 = LOWORD(_D2);
              v105[1] = COERCE_UNSIGNED_INT(1.0);
              v105 += 4;
              --v104;
            }
            while (v104);
          }
          ++v89;
          ++a5;
        }
        while (v89 != v88);
      }
      break;
    case 0x31u:
    case 0x32u:
      vImagePixelCount v124 = a6->height;
      if (v124)
      {
        unint64_t v125 = 0;
        long long v126 = (char *)a2->data;
        unint64_t v127 = a2->height - 1;
        uint64_t v128 = *a3;
        uint64_t v129 = a3[3];
        unint64_t v130 = a3[1] - 1;
        vImagePixelCount v131 = a6->width;
        size_t v268 = a6->rowBytes;
        size_t v271 = a2->rowBytes;
        uint64_t v266 = (uint64_t)a6->data + 4;
        do
        {
          if (v125 >= v124 - 1) {
            unint64_t v132 = v124 - 1;
          }
          else {
            unint64_t v132 = v125;
          }
          unint64_t v133 = v125 + a5;
          if ((uint64_t)(v125 + a5) < 0 != __OFADD__(v125, a5)) {
            uint64_t v134 = v133 + 1;
          }
          else {
            uint64_t v134 = v125 + a5;
          }
          uint64_t v135 = v134 >> 1;
          if (v127 >= v133) {
            unint64_t v136 = v125 + a5;
          }
          else {
            unint64_t v136 = v127;
          }
          unint64_t v137 = 2 * (v133 & 1) + (v134 >> 1) - 1;
          if (v130 < v134 >> 1) {
            uint64_t v135 = v130;
          }
          if (v130 >= v137) {
            unint64_t v138 = v137;
          }
          else {
            unint64_t v138 = v130;
          }
          if (v131)
          {
            char v139 = 0;
            uint64_t v140 = 0;
            v141 = (_WORD *)(v266 + v268 * v132);
            v142 = &v126[v136 * v271];
            uint64_t v143 = v128 + v135 * v129;
            uint64_t v144 = v128 + v138 * v129;
            signed int v145 = *((_DWORD *)a3 + 4);
            do
            {
              signed int v146 = v140 >> 1;
              signed int v147 = (v139 & 2) + (v140 >> 1);
              if ((int)(v140 >> 1) >= v145) {
                signed int v146 = v145 - 1;
              }
              if (v147 <= v145) {
                int v148 = v147 - 1;
              }
              else {
                int v148 = v145 - 1;
              }
              uint64_t v149 = 2 * (v146 & ~(v146 >> 31)) + a4;
              uint64_t v150 = v149 / 3;
              char v151 = 10 * (v149 % 3);
              uint64_t v152 = 2 * (v148 & ~(v148 >> 31)) + a4;
              char v153 = 10 * (v152 % 3);
              int v154 = *(_DWORD *)(v143 + 4 * (v152 / 3)) >> v153;
              int v155 = *(_DWORD *)(v144 + 4 * (v152 / 3)) >> v153;
              char v156 = v149 + 1;
              unint64_t v157 = (unsigned __int128)((v149 + 1) * (__int128)0x5555555555555556) >> 64;
              unint64_t v158 = v157 + (v157 >> 63);
              ++v152;
              int v159 = (v155 & 0x3FF) + 9 * ((*(_DWORD *)(v143 + 4 * v150) >> v151) & 0x3FF);
              uint64_t v160 = v152 / 3;
              LODWORD(v160) = (((*(_DWORD *)(v144 + 4 * v160) >> (10 * (v152 - 3 * v160))) & 0x3FF)
                             + 9 * ((*(_DWORD *)(v143 + 4 * v158) >> (10 * (v156 - 3 * v158))) & 0x3FF)
                             + 3
                             * (((*(_DWORD *)(v144 + 4 * v158) >> (10 * (v156 - 3 * v158))) & 0x3FF)
                              + ((*(_DWORD *)(v143 + 4 * v160) >> (10 * (v152 - 3 * v160))) & 0x3FFu))
                             + 8) >> 4;
              _D2 = (double)((*(_DWORD *)&v142[4 * ((a4 + v140) / 3)] >> (10 * ((char)(a4 + v140) % 3))) & 0x3FF)
                  / 1023.0;
              __asm { FCVT            H2, D2 }
              _D3 = (double)((v159 + 3 * (((*(_DWORD *)(v144 + 4 * v150) >> v151) & 0x3FF) + (v154 & 0x3FFu)) + 8) >> 4)
                  / 1023.0;
              *(v141 - 2) = LOWORD(_D2);
              __asm { FCVT            H2, D3 }
              _D3 = (double)(int)v160 / 1023.0;
              __asm { FCVT            H3, D3 }
              *(v141 - 1) = LOWORD(_D2);
              _WORD *v141 = LOWORD(_D3);
              v141[1] = COERCE_UNSIGNED_INT(1.0);
              ++v140;
              v139 += 2;
              v141 += 4;
            }
            while (v131 != v140);
          }
          ++v125;
        }
        while (v125 != v124);
      }
      break;
    case 0x33u:
    case 0x34u:
      vImagePixelCount v164 = a6->height;
      if (v164)
      {
        unint64_t v165 = 0;
        size_t v269 = a2->rowBytes;
        v272 = (char *)a2->data;
        unint64_t v166 = a2->height - 1;
        uint64_t v167 = *a3;
        uint64_t v168 = a3[3];
        unint64_t v169 = a3[1] - 1;
        vImagePixelCount v170 = a6->width;
        size_t v171 = a6->rowBytes;
        uint64_t v172 = (uint64_t)a6->data + 4;
        do
        {
          if (v165 >= v164 - 1) {
            unint64_t v173 = v164 - 1;
          }
          else {
            unint64_t v173 = v165;
          }
          if (v166 >= v165 + a5) {
            unint64_t v174 = v165 + a5;
          }
          else {
            unint64_t v174 = v166;
          }
          if (v169 >= v165 + a5) {
            unint64_t v175 = v165 + a5;
          }
          else {
            unint64_t v175 = v169;
          }
          if (v170)
          {
            char v176 = 0;
            uint64_t v177 = 0;
            v178 = (_WORD *)(v172 + v171 * v173);
            v179 = &v272[v174 * v269];
            uint64_t v180 = v167 + v175 * v168;
            signed int v181 = *((_DWORD *)a3 + 4);
            do
            {
              signed int v182 = v177 >> 1;
              signed int v183 = (v176 & 2) + (v177 >> 1);
              if ((int)(v177 >> 1) >= v181) {
                signed int v182 = v181 - 1;
              }
              int v184 = v182 & ~(v182 >> 31);
              if (v183 <= v181) {
                int v185 = v183 - 1;
              }
              else {
                int v185 = v181 - 1;
              }
              uint64_t v186 = (2 * v184) + a4;
              uint64_t v187 = 2 * (v185 & ~(v185 >> 31)) + a4;
              int v188 = 3 * ((*(_DWORD *)(v180 + 4 * ((v186 + 1) / 3)) >> (10 * ((v186 + 1) % 3))) & 0x3FF);
              int v189 = ((*(_DWORD *)(v180 + 4 * (v187 / 3)) >> (10 * (v187 % 3))) & 0x3FF)
                   + 3 * ((*(_DWORD *)(v180 + 4 * (v186 / 3)) >> (10 * (v186 % 3))) & 0x3FF);
              LOBYTE(v186) = v187 + 1;
              uint64_t v190 = (unsigned __int128)((v187 + 1) * (__int128)0x5555555555555556) >> 64;
              unsigned int v191 = (((*(_DWORD *)(v180 + 4 * (v190 + ((unint64_t)v190 >> 63))) >> (10
                                                                                          * (v186
                                                                                           - 3 * (v190 + (v190 < 0))))) & 0x3FFu)
                    + v188
                    + 2) >> 2;
              _D2 = (double)((*(_DWORD *)&v179[4 * ((a4 + v177) / 3)] >> (10 * ((char)(a4 + v177) % 3))) & 0x3FF)
                  / 1023.0;
              __asm { FCVT            H2, D2 }
              _D3 = (double)((v189 + 2) >> 2) / 1023.0;
              *(v178 - 2) = LOWORD(_D2);
              __asm { FCVT            H2, D3 }
              _D3 = (double)v191 / 1023.0;
              __asm { FCVT            H3, D3 }
              *(v178 - 1) = LOWORD(_D2);
              _WORD *v178 = LOWORD(_D3);
              v178[1] = COERCE_UNSIGNED_INT(1.0);
              ++v177;
              v176 += 2;
              v178 += 4;
            }
            while (v170 != v177);
          }
          ++v165;
        }
        while (v165 != v164);
      }
      break;
    case 0x35u:
    case 0x36u:
      vImagePixelCount v195 = a6->height;
      if (v195)
      {
        unint64_t v196 = 0;
        v197 = (char *)a2->data;
        size_t v198 = a2->rowBytes;
        unint64_t v199 = a2->height - 1;
        uint64_t v200 = *a3;
        uint64_t v201 = a3[3];
        unint64_t v202 = a3[1] - 1;
        vImagePixelCount v203 = a6->width;
        size_t v204 = a6->rowBytes;
        uint64_t v205 = (uint64_t)a6->data + 4;
        do
        {
          if (v196 >= v195 - 1) {
            unint64_t v206 = v195 - 1;
          }
          else {
            unint64_t v206 = v196;
          }
          if (v199 >= v196 + a5) {
            unint64_t v207 = v196 + a5;
          }
          else {
            unint64_t v207 = v199;
          }
          if (v202 >= v196 + a5) {
            unint64_t v208 = v196 + a5;
          }
          else {
            unint64_t v208 = v202;
          }
          if (v203)
          {
            v209 = (_WORD *)(v205 + v204 * v206);
            v210 = &v197[v207 * v198];
            uint64_t v211 = a4;
            uint64_t v212 = 2 * a4;
            vImagePixelCount v213 = v203;
            uint64_t v214 = v200 + v208 * v201;
            do
            {
              unsigned int v215 = (*(_DWORD *)(v214 + 4 * ((v212 + 1) / 3)) >> (10 * ((char)(v212 + 1) % 3))) & 0x3FF;
              _D2 = (double)((*(_DWORD *)&v210[4 * (v211 / 3)] >> (10 * (v211 % 3))) & 0x3FF) / 1023.0;
              __asm { FCVT            H2, D2 }
              _D3 = (double)((*(_DWORD *)(v214 + 4 * (v212 / 3)) >> (10 * (v212 % 3))) & 0x3FF) / 1023.0;
              *(v209 - 2) = LOWORD(_D2);
              __asm { FCVT            H2, D3 }
              _D3 = (double)v215 / 1023.0;
              __asm { FCVT            H3, D3 }
              *(v209 - 1) = LOWORD(_D2);
              _WORD *v209 = LOWORD(_D3);
              v209[1] = COERCE_UNSIGNED_INT(1.0);
              v212 += 2;
              v209 += 4;
              ++v211;
              --v213;
            }
            while (v213);
          }
          ++v196;
        }
        while (v196 != v195);
      }
      break;
    default:
      break;
  }
  CI::convert_cpu(CI::Context *,vImage_Buffer,vImage_Buffer,long long,long long,vImage_Buffer,CI::ConvertType)::SignpostTimer::~SignpostTimer((TimerBase *)buf);
}

void sub_1938D1B90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  CI::convert_cpu(CI::Context *,vImage_Buffer,vImage_Buffer,long long,long long,vImage_Buffer,CI::ConvertType)::SignpostTimer::~SignpostTimer((TimerBase *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN2CI25convert_buffer_to_textureEPNS_7ContextEP11__IOSurfacexxRKNS_6BitmapES3_NS_7TextureENS_11ConvertTypeE_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(__IOSurface **)(a1 + 32);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  v8[2] = ___ZN2CI25convert_buffer_to_textureEPNS_7ContextEP11__IOSurfacexxRKNS_6BitmapES3_NS_7TextureENS_11ConvertTypeE_block_invoke_4;
  v8[3] = &__block_descriptor_96_e22_v48__0r_v8Q16Q24Q32Q40l;
  long long v9 = *(_OWORD *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = a2;
  uint64_t v12 = a5;
  uint64_t v13 = a4;
  uint64_t v14 = a6;
  uint64_t v15 = *(void *)(a1 + 64);
  return SurfaceApplyPlaneReadOnlyBlock(v6, (uint64_t)v8);
}

void ___ZN2CI25convert_buffer_to_textureEPNS_7ContextEP11__IOSurfacexxRKNS_6BitmapES3_NS_7TextureENS_11ConvertTypeE_block_invoke_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t a6)
{
  size_t v10 = a2 + *(void *)(a1 + 32) * a6;
  uint64_t v11 = (void *)(v10 + CI::format_bytes_for_width_of_plane(*(_DWORD *)(a1 + 88), *(void *)(a1 + 40), 0));
  vImagePixelCount v12 = a5 - *(void *)(a1 + 32);
  vImagePixelCount v13 = a4 - *(void *)(a1 + 40);
  memset(v17, 0, sizeof(v17));
  uint64_t v14 = *(void *)(a1 + 48);
  v18.data = v11;
  v18.vImagePixelCount height = v12;
  v18.vImagePixelCount width = v13;
  v18.size_t rowBytes = a6;
  long long v15 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)&v16.data = *(_OWORD *)(a1 + 56);
  *(_OWORD *)&v16.vImagePixelCount width = v15;
  CI::convert_cpu(v14, &v18, (uint64_t *)v17, 0, 0, &v16, *(_DWORD *)(a1 + 92));
}

void ___ZN2CI25convert_buffer_to_textureEPNS_7ContextEP11__IOSurfacexxRKNS_6BitmapES3_NS_7TextureENS_11ConvertTypeE_block_invoke_5(uint64_t a1, void *a2, uint64_t a3, vImagePixelCount a4, vImagePixelCount a5, size_t a6)
{
  memset(v11, 0, sizeof(v11));
  uint64_t v6 = *(void *)(a1 + 32);
  long long v7 = *(_OWORD *)(a1 + 56);
  *(_OWORD *)&v12.data = *(_OWORD *)(a1 + 40);
  *(_OWORD *)&v12.vImagePixelCount width = v7;
  uint64_t v8 = *(void *)(a1 + 72);
  unint64_t v9 = *(void *)(a1 + 80);
  v10.data = a2;
  v10.vImagePixelCount height = a5;
  v10.vImagePixelCount width = a4;
  v10.size_t rowBytes = a6;
  CI::convert_cpu(v6, &v12, (uint64_t *)v11, v8, v9, &v10, *(_DWORD *)(a1 + 88));
}

void ___ZN2CIL13convert_metalEPKNS_12MetalContextERKNS_6BitmapEP11__IOSurfaceNS_7TextureENS_11ConvertTypeE_block_invoke(uint64_t a1)
{
}

void ___ZN2CIL13convert_metalEPKNS_12MetalContextERKNS_6BitmapEP11__IOSurfaceNS_7TextureENS_11ConvertTypeE_block_invoke_231(uint64_t a1)
{
  kdebug_trace();
  uint64_t v2 = ci_signpost_log_render();
  os_signpost_id_t v3 = *(void *)(a1 + 32);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)uint8x8_t v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v3, "convert_metal", "", v5, 2u);
    }
  }
}

void ___ZN2CIL13convert_metalEPKNS_12MetalContextERKNS_6BitmapEP11__IOSurfaceNS_7TextureENS_11ConvertTypeE_block_invoke_234(uint64_t a1)
{
  kdebug_trace();
  uint64_t v2 = ci_signpost_log_render();
  os_signpost_id_t v3 = *(void *)(a1 + 32);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)uint8x8_t v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v4, OS_SIGNPOST_INTERVAL_END, v3, "convert_metal", "", v5, 2u);
    }
  }
}

void CI::convert_cpu(CI::Context *,vImage_Buffer,vImage_Buffer,long long,long long,vImage_Buffer,CI::ConvertType)::SignpostTimer::~SignpostTimer(TimerBase *a1)
{
  uint64_t v2 = ci_signpost_log_render();
  os_signpost_id_t v3 = *((void *)a1 + 1);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    unint64_t v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)uint8x8_t v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v4, OS_SIGNPOST_INTERVAL_END, v3, "convert_cpu", "", v5, 2u);
    }
  }
  TimerBase::~TimerBase(a1);
}

void sub_1938D1FE4(_Unwind_Exception *a1)
{
  TimerBase::~TimerBase(v1);
  _Unwind_Resume(a1);
}

void CI::log_old_format(CI *this, const char *a2, const char *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint8x8_t v5 = ci_logger_api();
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    int v6 = 136446466;
    long long v7 = this;
    __int16 v8 = 2082;
    unint64_t v9 = a2;
    _os_log_impl(&dword_193671000, v5, OS_LOG_TYPE_INFO, "%{public}s an old value for kPixelFormat%{public}s was used.", (uint8_t *)&v6, 0x16u);
  }
}

unint64_t CI::format_bytes_per_row(int a1, uint64_t a2)
{
  if (a1 == 1286)
  {
    uint64_t v2 = 2 * a2 + 2;
    return (2 * (((unint64_t)v2 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  }
  if (a1 == 1285)
  {
    uint64_t v2 = a2 + 2;
    return (2 * (((unint64_t)v2 * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64)) & 0xFFFFFFFFFFFFFFFCLL;
  }
  return ((unint64_t)CI::format_bits_per_pixel(a1) * a2 + 7) >> 3;
}

unint64_t CI::format_bytes_for_width_of_plane(int a1, uint64_t a2, int a3)
{
  int v5 = a1;
  if (CI::format_is_ycc_biplanar(a1)) {
    int v5 = CI::format_of_plane(v5, a3);
  }

  return CI::format_bytes_per_row(v5, a2);
}

uint64_t CI::format_is_r(int a1)
{
  HIDWORD(v1) = a1 - 261;
  LODWORD(v1) = a1 - 261;
  return ((v1 >> 8) < 0xD) & (0x11D5u >> ((unsigned __int16)(a1 - 261) >> 8));
}

uint64_t CI::format_is_rg(int a1)
{
  HIDWORD(v1) = a1 - 262;
  LODWORD(v1) = a1 - 262;
  return ((v1 >> 8) < 0xD) & (0x11D5u >> ((unsigned __int16)(a1 - 262) >> 8));
}

uint64_t CI::format_get_clear_color(uint64_t result, _DWORD *a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  *a5 = 0;
  *a4 = 0;
  *a3 = 0;
  *a2 = 0;
  if ((int)result > 531)
  {
    if (result == 535)
    {
      *a2 = 1031831681;
      *a3 = 1056997505;
      *a4 = 1056997505;
      return result;
    }
    if (result != 533)
    {
      if (result == 532)
      {
        *a2 = 1056997505;
        int v5 = 1031831681;
LABEL_12:
        *a3 = v5;
        return result;
      }
      return result;
    }
    *a2 = 1031831681;
LABEL_11:
    int v5 = 1056997505;
    goto LABEL_12;
  }
  if (result == 276)
  {
    *a2 = 1056997505;
    return result;
  }
  if (result == 277) {
    goto LABEL_11;
  }
  return result;
}

uint64_t CI::format_is_supported_source_provider(int a1)
{
  uint64_t result = 0;
  BOOL v3 = (a1 - 1285) < 2 || a1 == 0;
  if (!v3 && a1 != 2824) {
    return CI::format_is_ycc_biplanar(a1) ^ 1;
  }
  return result;
}

uint64_t CI::format_is_not_supported_as_destination_on_gles(int a1)
{
  unsigned int v1 = ((a1 - 2305) < 0xC) & (0x9FFu >> (a1 - 1));
  if ((a1 - 1285) < 2) {
    LOBYTE(v1) = 1;
  }
  if ((a1 & 0xFFFFFFFE) == 0x708) {
    LOBYTE(v1) = 1;
  }
  if (a1 == 263) {
    LOBYTE(v1) = 1;
  }
  if (a1 == 1799) {
    LOBYTE(v1) = 1;
  }
  if ((a1 & 0xFFFFFEFF) == 0x807) {
    LOBYTE(v1) = 1;
  }
  return v1 & 1;
}

uint64_t CI::input_format_for_conversion(int a1)
{
  if ((a1 - 1) > 0x35) {
    return 0;
  }
  else {
    return dword_193959790[a1 - 1];
  }
}

uint64_t CI::output_format_for_conversion(int a1)
{
  if ((a1 - 1) > 0x35) {
    return 0;
  }
  else {
    return dword_193959868[a1 - 1];
  }
}

uint64_t CI::PixelFormatType_approx_from_format(int a1)
{
  uint64_t result = 0;
  if (a1 <= 1792)
  {
    if (a1 > 770)
    {
      if (a1 > 1042)
      {
        if (a1 == 1558) {
          int v9 = 1882468914;
        }
        else {
          int v9 = 0;
        }
        if (a1 == 1555) {
          unsigned int v10 = 1882469428;
        }
        else {
          unsigned int v10 = v9;
        }
        if (a1 == 1554) {
          unsigned int v10 = 1882468912;
        }
        if (a1 == 1302) {
          int v11 = 1885745714;
        }
        else {
          int v11 = 0;
        }
        if (a1 == 1299) {
          int v12 = 1885746228;
        }
        else {
          int v12 = v11;
        }
        if (a1 <= 1553) {
          unsigned int v10 = v12;
        }
        unsigned int v13 = 1885745712;
        if (a1 != 1298) {
          unsigned int v13 = 0;
        }
        if (a1 == 1286) {
          unsigned int v13 = 845361456;
        }
        if (a1 == 1285) {
          unsigned int v13 = 828584240;
        }
        if (a1 == 1046) {
          int v14 = 2016686642;
        }
        else {
          int v14 = 0;
        }
        if (a1 == 1043) {
          int v14 = 2016687156;
        }
        if (a1 <= 1284) {
          unsigned int v13 = v14;
        }
        if (a1 <= 1298) {
          return v13;
        }
        else {
          return v10;
        }
      }
      else
      {
        switch(a1)
        {
          case 771:
            int v29 = 1278226488;
            goto LABEL_149;
          case 772:
          case 776:
          case 777:
          case 778:
          case 779:
          case 780:
          case 781:
          case 782:
          case 783:
          case 788:
          case 789:
            return result;
          case 773:
            int v29 = 826486840;
            goto LABEL_149;
          case 774:
            int v29 = 843264056;
LABEL_149:
            uint64_t result = (v29 + 248);
            break;
          case 775:
          case 784:
            uint64_t result = 1815162994;
            break;
          case 785:
            unsigned __int16 v26 = 12592;
LABEL_151:
            uint64_t result = v26 | 0x63690000u;
            break;
          case 786:
            uint64_t result = 2019963440;
            break;
          case 787:
            uint64_t result = 2019963956;
            break;
          case 790:
            uint64_t result = 2019963442;
            break;
          default:
            if (a1 == 1042) {
              uint64_t result = 2016686640;
            }
            else {
              uint64_t result = 0;
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 257:
          uint64_t result = 1093677112;
          break;
        case 258:
          int v24 = 1667844406;
LABEL_159:
          uint64_t result = (v24 + 2);
          break;
        case 259:
          uint64_t result = 1278226488;
          break;
        case 260:
          uint64_t result = 1279340600;
          break;
        case 261:
          uint64_t result = 826486840;
          break;
        case 262:
          uint64_t result = 843264056;
          break;
        case 263:
          uint64_t result = 24;
          break;
        case 264:
        case 268:
          unsigned __int16 v3 = 16961;
LABEL_10:
          uint64_t result = v3 | 0x52470000u;
          break;
        case 265:
        case 269:
          uint64_t result = 32;
          break;
        case 266:
        case 270:
          uint64_t result = 1111970369;
          break;
        case 267:
        case 271:
          uint64_t result = 1094862674;
          break;
        case 272:
        case 273:
          return result;
        case 274:
          uint64_t result = 875704422;
          break;
        case 275:
          uint64_t result = 875836518;
          break;
        case 276:
          uint64_t result = 846624102;
          break;
        case 277:
          uint64_t result = 2037741158;
          break;
        case 278:
          uint64_t result = 875704934;
          break;
        default:
          switch(a1)
          {
            case 530:
              int v15 = 875704422;
              goto LABEL_170;
            case 531:
              int v15 = 875836518;
LABEL_170:
              uint64_t result = v15 | 0x10u;
              break;
            case 532:
              uint64_t result = 846624121;
              break;
            case 533:
              uint64_t result = 2037741171;
              break;
            case 534:
              uint64_t result = 875704950;
              break;
            case 535:
              uint64_t result = 2033463352;
              break;
            default:
              return result;
          }
          break;
      }
    }
  }
  else
  {
    if (a1 > 2304)
    {
      if (a1 > 3080)
      {
        if (a1 <= 3349)
        {
          if (a1 == 3347) {
            int v16 = 1952855092;
          }
          else {
            int v16 = 0;
          }
          if (a1 == 3346) {
            int v17 = 1952854576;
          }
          else {
            int v17 = v16;
          }
          if (a1 == 3334) {
            unsigned int v5 = 843264306;
          }
          else {
            unsigned int v5 = v17;
          }
          if (a1 == 3333) {
            int v18 = 826487090;
          }
          else {
            int v18 = 0;
          }
          if (a1 == 3331) {
            int v19 = 1278226738;
          }
          else {
            int v19 = v18;
          }
          if (a1 == 3081) {
            unsigned int v7 = 1667839024;
          }
          else {
            unsigned int v7 = v19;
          }
          BOOL v8 = a1 <= 3333;
        }
        else
        {
          if (a1 == 3862) {
            int v4 = 1937125938;
          }
          else {
            int v4 = 0;
          }
          if (a1 == 3859) {
            unsigned int v5 = 1937126452;
          }
          else {
            unsigned int v5 = v4;
          }
          if (a1 == 3858) {
            int v6 = 1937125936;
          }
          else {
            int v6 = 0;
          }
          if (a1 == 3606) {
            int v6 = 1953903154;
          }
          if (a1 <= 3858) {
            unsigned int v5 = v6;
          }
          unsigned int v7 = 1953903668;
          if (a1 != 3603) {
            unsigned int v7 = 0;
          }
          if (a1 == 3602) {
            unsigned int v7 = 1953903152;
          }
          if (a1 == 3350) {
            unsigned int v7 = 1952854578;
          }
          BOOL v8 = a1 <= 3605;
        }
      }
      else
      {
        if (a1 <= 2566)
        {
          switch(a1)
          {
            case 2305:
              int v22 = 1093677112;
              goto LABEL_117;
            case 2306:
              int v23 = 1667844406;
              goto LABEL_162;
            case 2307:
              int v22 = 1278226488;
              goto LABEL_117;
            case 2308:
              return 1279340646;
            case 2309:
              int v22 = 826486840;
              goto LABEL_117;
            case 2310:
              int v22 = 843264056;
LABEL_117:
              uint64_t result = (v22 + 46);
              break;
            case 2311:
              uint64_t result = 1667838822;
              break;
            case 2312:
            case 2313:
            case 2316:
              unsigned __int16 v3 = 26177;
              goto LABEL_10;
            default:
              return result;
          }
          return result;
        }
        if (a1 == 3079) {
          int v20 = 1667838768;
        }
        else {
          int v20 = 0;
        }
        if (a1 == 2824) {
          unsigned int v5 = 1815491698;
        }
        else {
          unsigned int v5 = v20;
        }
        if (a1 == 2569) {
          int v21 = 1999908961;
        }
        else {
          int v21 = 0;
        }
        if (a1 == 2567) {
          unsigned int v7 = 1999843442;
        }
        else {
          unsigned int v7 = v21;
        }
        BOOL v8 = a1 <= 2823;
      }
      if (v8) {
        return v7;
      }
      else {
        return v5;
      }
    }
    switch(a1)
    {
      case 1793:
        int v25 = 1093677112;
        goto LABEL_137;
      case 1794:
        unsigned __int16 v26 = 18742;
        goto LABEL_151;
      case 1795:
        int v25 = 1278226488;
        goto LABEL_137;
      case 1796:
        return 1279340854;
      case 1797:
        int v25 = 826486840;
        goto LABEL_137;
      case 1798:
        int v25 = 843264056;
LABEL_137:
        uint64_t result = (v25 + 254);
        break;
      case 1799:
        uint64_t result = 1815361650;
        break;
      case 1800:
      case 1804:
        uint64_t result = 1815491698;
        break;
      case 1801:
        uint64_t result = 1664496754;
        break;
      case 1802:
      case 1803:
      case 1805:
      case 1806:
      case 1807:
      case 1808:
      case 1809:
      case 1812:
      case 1813:
        return result;
      case 1810:
        uint64_t result = 1936077360;
        break;
      case 1811:
        int v27 = 1936077360;
LABEL_166:
        uint64_t result = (v27 + 516);
        break;
      case 1814:
        int v28 = 1936077360;
LABEL_168:
        uint64_t result = v28 | 2u;
        break;
      default:
        switch(a1)
        {
          case 2049:
            int v23 = 1093677112;
            goto LABEL_162;
          case 2050:
            return 1667844456;
          case 2051:
            int v23 = 1278226488;
            goto LABEL_162;
          case 2052:
            int v24 = 1279340646;
            goto LABEL_159;
          case 2053:
            int v23 = 826486840;
            goto LABEL_162;
          case 2054:
            int v23 = 843264056;
LABEL_162:
            uint64_t result = (v23 + 48);
            break;
          case 2055:
            uint64_t result = 1667838824;
            break;
          case 2056:
          case 2060:
            uint64_t result = 1380411457;
            break;
          case 2066:
            uint64_t result = 1751527984;
            break;
          case 2067:
            int v27 = 1751527984;
            goto LABEL_166;
          case 2070:
            int v28 = 1751527984;
            goto LABEL_168;
          default:
            return result;
        }
        break;
    }
  }
  return result;
}

uint64_t CI::format_from_IOSurface_ignore_values(CI *this, __IOSurface *a2)
{
  OSType PixelFormat = (CI *)IOSurfaceGetPixelFormat(this);

  return CI::format_from_PixelFormatType(PixelFormat);
}

uint64_t CI::buffer_size_for_format(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (a3 - 1) * a4 + ((CI::format_bits_per_pixel(a1) + 7) >> 3) * a2;
}

uint64_t CI::FoslAdapter::FoslAdapter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a1 + 64;
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 72) = 0;
  do
  {
    uint64_t v9 = a1 + v8;
    *(void *)(v9 + 88) = 0;
    *(void *)(v9 + 96) = 0;
    *(void *)(a1 + v8 + 80) = a1 + v8 + 88;
    v8 += 24;
  }
  while (v8 != 48);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a4;
  *(void *)(a1 + 208) = a5;
  *(void *)(a1 + 216) = a6;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  *(_DWORD *)(a1 + 256) = 0;
  int v10 = (*(uint64_t (**)(void))(**(void **)a1 + 16))();
  BOOL v11 = 0;
  if (v10 == 76)
  {
    if (*(unsigned char *)(a3 + 136)) {
      BOOL v11 = 0;
    }
    else {
      BOOL v11 = *(unsigned char *)(a3 + 137) != 0;
    }
  }
  *(unsigned char *)(a1 + 260) = v11;
  *(void *)(a1 + 24) = fosl_filter_createGraph();
  return a1;
}

uint64_t CI::FoslAdapter::getOrCreateImage(uint64_t a1, CI *this, uint64_t a3, int *a4, int a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a5 == 3) {
    uint64_t v9 = (uint64_t **)(a1 + 56);
  }
  else {
    uint64_t v9 = (uint64_t **)(a1 + 32);
  }
  unint64_t v15 = CI::hash_image_node_id((uint64_t)this, (const CI::Node *)a4[8]);
  *(void *)__str = &v15;
  if (std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v9, &v15, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[5])
  {
    *(void *)__str = &v15;
    return std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v9, &v15, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[5];
  }
  else
  {
    CI::SerialValArray<int>::append(*(void ***)(a1 + 200), a5);
    CI::SerialObjectPtrArray::append(*(void *)(a1 + 216), (CI::Object *)a4);
    uint64_t v11 = *(unsigned int *)(a1 + 20);
    *(_DWORD *)(a1 + 20) = v11 + 1;
    if (*(unsigned char *)(a1 + 260)) {
      int v12 = snprintf(__str, 0x40uLL, "_samplers[%d]");
    }
    else {
      int v12 = snprintf(__str, 0x40uLL, "_i%d");
    }
    CI::SerialStringArray::append(*(CI::SerialStringArray **)(a1 + 208), __str, v12);
    if (a3) {
      uint64_t v13 = *(unsigned __int8 *)(a3 + 161);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t Image = fosl_filter_createImage(*(void *)(a1 + 24), v11, v13);
    int v16 = &v15;
    std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v9, &v15, (uint64_t)&std::piecewise_construct, (uint64_t **)&v16)[5] = Image;
  }
  return Image;
}

uint64_t CI::FoslAdapter::getOrCreateFix(CI::FoslAdapter *this, IOSurfaceRef *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *((unsigned int *)a2 + 9);
  int v4 = (uint64_t **)((char *)this + 128);
  *(void *)__str = &v8;
  if (!std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)this + 16, &v8, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[5])
  {
    int v5 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = v5 + 1;
    CI::SerialValArray<int>::append(*((void ***)this + 25), 6);
    int v6 = snprintf(__str, 0x40uLL, "_u%d", v5);
    CI::SerialStringArray::append(*((CI::SerialStringArray **)this + 26), __str, v6);
    CI::SurfaceNode::chroma_scale_fix(a2);
    operator new();
  }
  *(void *)__str = &v8;
  return std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v4, &v8, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[5];
}

uint64_t CI::FoslAdapter::getOrCreateFix(CI::FoslAdapter *this, CI::ProviderNode *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = *((unsigned int *)a2 + 9);
  int v4 = (uint64_t **)((char *)this + 128);
  *(void *)__str = &v8;
  if (!std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)this + 16, &v8, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[5])
  {
    int v5 = *((_DWORD *)this + 4);
    *((_DWORD *)this + 4) = v5 + 1;
    CI::SerialValArray<int>::append(*((void ***)this + 25), 6);
    int v6 = snprintf(__str, 0x40uLL, "_u%d", v5);
    CI::SerialStringArray::append(*((CI::SerialStringArray **)this + 26), __str, v6);
    CI::ProviderNode::chroma_scale_fix(a2);
    operator new();
  }
  *(void *)__str = &v8;
  return std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v4, &v8, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[5];
}

uint64_t CI::FoslAdapter::getOrCreateTransformUniform(CI::FoslAdapter *this, CI::Node *a2, CI::TextureSampler *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v13 = CI::hash_image_node_id((uint64_t)a2, (const CI::Node *)*((int *)a3 + 8));
  int v5 = (uint64_t **)((char *)this + 80);
  *(void *)__str = &v13;
  if (std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)this + 10, &v13, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[5])
  {
    *(void *)__str = &v13;
    return std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>((uint64_t **)this + 10, &v13, (uint64_t)&std::piecewise_construct, (uint64_t **)__str)[5];
  }
  else
  {
    if (*((unsigned char *)this + 260))
    {
      int v7 = *((_DWORD *)this + 5);
      BOOL v8 = v7 != 0;
      unsigned int v9 = v7 - 1;
      if (v8) {
        uint64_t v10 = v9;
      }
      else {
        uint64_t v10 = 0;
      }
    }
    else
    {
      uint64_t v10 = *((unsigned int *)this + 4);
      *((_DWORD *)this + 4) = v10 + 1;
    }
    CI::SerialValArray<int>::append(*((void ***)this + 25), 40);
    if (*((unsigned char *)this + 260)) {
      unsigned int v11 = snprintf(__str, 0x40uLL, "_transforms[%d]");
    }
    else {
      unsigned int v11 = snprintf(__str, 0x40uLL, "_t%d");
    }
    CI::SerialStringArray::append(*((CI::SerialStringArray **)this + 26), __str, v11);
    CI::SerialObjectPtrArray::append(*((void *)this + 27), a3);
    TransformMatridouble x = fosl_filter_createTransformMatrix(*((void *)this + 3), v10);
    int v14 = &v13;
    std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v5, &v13, (uint64_t)&std::piecewise_construct, (uint64_t **)&v14)[5] = TransformMatrix;
  }
  return TransformMatrix;
}

void CI::FoslAdapter::createReadPixel(CI::FoslAdapter *this, CI::Node *a2, const CI::Kernel *a3)
{
  int v6 = (*(uint64_t (**)(CI::Node *))(*(void *)a2 + 16))(a2);
  uint64_t v7 = *(void *)a2;
  if (v6 == 46)
  {
    if ((*(int (**)(CI::Node *))(v7 + 208))(a2) < 1)
    {
      int v8 = 1;
      goto LABEL_10;
    }
  }
  else
  {
    if ((*(unsigned int (**)(CI::Node *))(v7 + 16))(a2) != 44)
    {
      int v9 = 0;
      BOOL v10 = 0;
      int v8 = 1;
      goto LABEL_11;
    }
    if ((*(int (**)(CI::Node *))(*(void *)a2 + 208))(a2) < 1)
    {
      int v8 = 1;
      goto LABEL_10;
    }
  }
  int v8 = (*(uint64_t (**)(CI::Node *))(*(void *)a2 + 208))(a2);
LABEL_10:
  BOOL v10 = (*(uint64_t (**)(CI::Node *))(*(void *)a2 + 304))(a2) == 1;
  int v9 = (*(uint64_t (**)(CI::Node *))(*(void *)a2 + 408))(a2);
LABEL_11:
  unsigned int v11 = "vec4 _read_pixel(sampler2D image, vec2 c, mat3 m){ return texture2D(image, (vec3(c, 1.0) * m).xy);}";
  if (a3)
  {
    BOOL v12 = *((unsigned char *)a3 + 161) != 0;
    if (*((unsigned char *)a3 + 161)) {
      unsigned int v11 = "hvec4 _read_pixel(hsampler2D image, vec2 c, mat3 m){ return texture2D(image, (vec3(c, 1.0) * m).xy);}";
    }
  }
  else
  {
    BOOL v12 = 0;
  }
  if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 77) {
    int v13 = *(unsigned char *)(*(void *)this + 456) & 1;
  }
  else {
    int v13 = 0;
  }
  int v14 = "vec4 _read_pixel_420(sampler2D Y, sampler2D cc, vec2 c, vec2 f, mat3 m){\n"
        " highp vec3 p = vec3(c, 1.0) * m;\n"
        " return vec4(texture2D(Y, p.xy).r, texture2D(cc, f*p.xy).rg, 1.0);}";
  if (v12) {
    unint64_t v15 = "hvec4 _read_pixel_420(hsampler2D Y, hsampler2D cc, vec2 c, vec2 f, mat3 m){\n"
  }
          " highp vec3 p = vec3(c, 1.0) * m;\n"
          " return hvec4(texture2D(Y, p.xy).r, texture2D(cc, f*p.xy).rg, 1.0);}";
  else {
    unint64_t v15 = "vec4 _read_pixel_420(sampler2D Y, sampler2D cc, vec2 c, vec2 f, mat3 m){\n"
  }
          " highp vec3 p = vec3(c, 1.0) * m;\n"
          " return vec4(texture2D(Y, p.xy).r, texture2D(cc, f*p.xy).rg, 1.0);}";
  int v16 = v9 ^ 1 | v13;
  int v17 = "vec4 _read_pixel_420_10p(sampler2D Y, sampler2D cc, vec2 c, vec2 f, mat3 m)\n"
        "  {\n"
        "     int cInt = int(c.x);\n"
        "     int cInt2 = int(c.x*0.5);\n"
        " \n"
        "     int lumaX = cInt/3;\n"
        "     highp vec3 pLuma = vec3(lumaX+0.5, c.y, 1.0) * m;\n"
        "     vec3 lumaGroup = texture2D(Y, pLuma.xy).rgb;\n"
        "     int lumaRem = cInt - lumaX*3;\n"
        "     float luma = (lumaRem==0) ? lumaGroup.z : (lumaRem==1) ? lumaGroup.y : lumaGroup.x;\n"
        " \n"
        "     int chromaX = (cInt2/3)*2;\n"
        "     highp vec3 pChromaMinus1 = vec3(2.0*(chromaX - 0.5), c.y, 1.0) * m;\n"
        "     highp vec3 pChroma1 = vec3(2.0*(chromaX + 0.5), c.y, 1.0) * m;\n"
        "     highp vec3 pChroma2 = vec3(2.0*(chromaX + 1.5), c.y, 1.0) * m;\n"
        "     highp vec3 pChroma3 = vec3(2.0*(chromaX + 2.5), c.y, 1.0) * m;\n"
        "     vec3 ccGroupMinus1 = texture2D(cc, pChromaMinus1.xy * f).rgb;\n"
        "     vec3 ccGroup1 = texture2D(cc, pChroma1.xy * f).rgb;\n"
        "     vec3 ccGroup2 = texture2D(cc, pChroma2.xy * f).rgb;\n"
        "     vec3 ccGroup3 = texture2D(cc, pChroma3.xy * f).rgb;\n"
        "     vec2 ccMinus1 = ccGroupMinus1.yx; \n"
        "     vec2 cc1 = ccGroup1.zy; \n"
        "     vec2 cc2 = vec2(ccGroup1.x, ccGroup2.z); \n"
        "     vec2 cc3 = ccGroup2.yx; \n"
        "     vec2 cc4 = ccGroup3.zy; \n"
        "     float mixer = (cInt & 1)*0.5; \n"
        "     int chromaRem = cInt - (cInt/6)*6;\n"
        "     vec2 chroma = vec2(0);\n"
        "     if (chromaRem == 0) {\n"
        "         chroma = mix(ccMinus1, cc1, 0.75);\n"
        "     } else if (chromaRem == 1) { \n"
        "         chroma = mix(cc1, cc2, 0.25);\n"
        "     } else if (chromaRem == 2) { \n"
        "         chroma = mix(cc1, cc2, 0.75);\n"
        "     } else if (chromaRem == 3) { \n"
        "         chroma = mix(cc2, cc3, 0.25);\n"
        "     } else if (chromaRem == 4) { \n"
        "         chroma = mix(cc2, cc3, 0.75);\n"
        "     } else if (chromaRem == 5) { \n"
        "         chroma = mix(cc3, cc4, 0.25);\n"
        "     }\n"
        "     return vec4(luma, chroma.xy, 1.0); \n"
        " }";
  if (v12)
  {
    int v17 = "hvec4 _read_pixel_420_10p(hsampler2D Y, hsampler2D cc, vec2 c, vec2 f, mat3 m)  {\n"
          "     int cInt = int(c.x);\n"
          "     int cInt2 = int(c.x*0.5);\n"
          " \n"
          "     int lumaX = cInt/3;\n"
          "     highp vec3 pLuma = vec3(lumaX+0.5, c.y, 1.0) * m;\n"
          "     hvec3 lumaGroup = texture2D(Y, pLuma.xy).rgb;\n"
          "     int lumaRem = cInt - lumaX*3;\n"
          "     float luma = (lumaRem==0) ? lumaGroup.z : (lumaRem==1) ? lumaGroup.y : lumaGroup.x;\n"
          " \n"
          "     int chromaX = (cInt2/3)*2;\n"
          "     highp vec3 pChromaMinus1 = vec3(2.0*(chromaX - 0.5), c.y, 1.0) * m;\n"
          "     highp vec3 pChroma1 = vec3(2.0*(chromaX + 0.5), c.y, 1.0) * m;\n"
          "     highp vec3 pChroma2 = vec3(2.0*(chromaX + 1.5), c.y, 1.0) * m;\n"
          "     highp vec3 pChroma3 = vec3(2.0*(chromaX + 2.5), c.y, 1.0) * m;\n"
          "     hvec3 ccGroupMinus1 = texture2D(cc, pChromaMinus1.xy * f).rgb;\n"
          "     hvec3 ccGroup1 = texture2D(cc, pChroma1.xy * f).rgb;\n"
          "     hvec3 ccGroup2 = texture2D(cc, pChroma2.xy * f).rgb;\n"
          "     hvec3 ccGroup3 = texture2D(cc, pChroma3.xy * f).rgb;\n"
          "     hvec2 ccMinus1 = ccGroupMinus1.yx; \n"
          "     hvec2 cc1 = ccGroup1.zy; \n"
          "     hvec2 cc2 = hvec2(ccGroup1.x, ccGroup2.z); \n"
          "     hvec2 cc3 = ccGroup2.yx; \n"
          "     hvec2 cc4 = ccGroup3.zy; \n"
          "     float mixer = (cInt & 1)*0.5; \n"
          "     int chromaRem = cInt - (cInt/6)*6;\n"
          "     hvec2 chroma = vec2(0);\n"
          "     if (chromaRem == 0) {\n"
          "         chroma = mix(ccMinus1, cc1, 0.75);\n"
          "     } else if (chromaRem == 1) { \n"
          "         chroma = mix(cc1, cc2, 0.25);\n"
          "     } else if (chromaRem == 2) { \n"
          "         chroma = mix(cc1, cc2, 0.75);\n"
          "     } else if (chromaRem == 3) { \n"
          "         chroma = mix(cc2, cc3, 0.25);\n"
          "     } else if (chromaRem == 4) { \n"
          "         chroma = mix(cc2, cc3, 0.75);\n"
          "     } else if (chromaRem == 5) { \n"
          "         chroma = mix(cc3, cc4, 0.25);\n"
          "     }\n"
          "     return hvec4(luma, chroma.xy, 1.0); \n"
          " }";
    int v14 = "hvec4 _read_pixel_420(hsampler2D Y, hsampler2D cc, vec2 c, vec2 f, mat3 m){\n"
          " highp vec3 p = vec3(c, 1.0) * m;\n"
          " return hvec4(texture2D(Y, p.xy).r, texture2D(cc, f*p.xy).rg, 1.0);}";
  }
  if (v16 == 1) {
    uint64_t v18 = v14;
  }
  else {
    uint64_t v18 = v17;
  }
  if (!v10) {
    uint64_t v18 = v15;
  }
  if (v8 == 2) {
    uint64_t v19 = (uint64_t)v18;
  }
  else {
    uint64_t v19 = (uint64_t)v11;
  }
  fosl_filter_createSampleTransform(*((void *)this + 3), v19);
  operator new();
}

void CI::FoslAdapter::createReadTable(CI::FoslAdapter *this, CI::Node *a2, const CI::Kernel *a3, char *a4, int a5, char a6)
{
  a4[a5] = a6 + 48;
  a4[a5 + 1] = 0;
  CI::SerialStringArray::firstIndexOfString(*(CI::SerialStringArray **)(*((void *)this + 1) + 56), a4 + 1);
  operator new();
}

uint64_t CI::FoslAdapter::createGeneralKernel(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t Kernel = fosl_filter_createKernel(a1[3], *(void *)(v10 + 32));
  if (*(unsigned char *)(v10 + 12)) {
    unsigned int v12 = CI::KernelArguments::count((CI::KernelArguments *)(v10 + 144));
  }
  else {
    unsigned int v12 = *(_DWORD *)(v10 + 20);
  }
  if (v12)
  {
    unint64_t v13 = 0;
    uint64_t v14 = 0;
    unsigned int v55 = (uint64_t **)(a1 + 29);
    unint64_t v56 = a5;
    unsigned int v58 = a5 + 1;
    uint64_t v15 = v12;
    uint64_t v57 = v12;
    while (1)
    {
      uint64_t v16 = *(void *)(a2 + 48);
      if (*(unsigned char *)(v16 + 12))
      {
        int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v16 + 144), v13);
      }
      else
      {
        if ((uint64_t)v13 >= *(int *)(v16 + 20))
        {
          int type = 0;
LABEL_19:
          if (CI::KernelArguments::is_uniform(type))
          {
            uint64_t v23 = *((unsigned int *)a1 + 4);
            *((_DWORD *)a1 + 4) = v23 + 1;
            if ((type - 5) > 0x16) {
              uint64_t v24 = 0;
            }
            else {
              uint64_t v24 = dword_193959978[type - 5];
            }
            uint64_t Uniform = fosl_filter_createUniform(a1[3], v23, v24);
            fosl_filter_addChild(a1[3], Kernel, Uniform);
            CI::SerialValArray<int>::append((void **)a1[25], type);
            uint64_t v47 = *(void *)(a2 + 56);
            if (v13 > 9) {
              uint64_t v48 = (CI::Object **)(*(void *)(v47 + 16) + 8 * (v13 - 10));
            }
            else {
              uint64_t v48 = (CI::Object **)(v47 + 8 * v13 + 24);
            }
            CI::SerialObjectPtrArray::append(a1[27], *v48);
            if ((*(unsigned int (**)(void))(*(void *)*a1 + 16))() != 77)
            {
              int v49 = snprintf(__str, 0x40uLL, "_u%d", v23);
              CI::SerialStringArray::append((CI::SerialStringArray *)a1[26], __str, v49);
            }
            uint64_t v15 = v57;
          }
          goto LABEL_50;
        }
        int type = *(_DWORD *)(*(void *)(v16 + 72) + 4 * v13);
      }
      if (type != 1)
      {
        if ((type & 0xFFFFFFFE) == 2)
        {
          double v61 = 0.0;
          double v62 = 0.0;
          double v60 = 1.0;
          double v63 = 1.0;
          double v64 = 0.0;
          double v65 = 0.0;
          uint64_t v20 = *(void *)(a2 + 56);
          if (v13 > 9) {
            int v21 = (double **)(*(void *)(v20 + 16) + 8 * (v13 - 10));
          }
          else {
            int v21 = (double **)(v20 + 8 * v13 + 24);
          }
          int v25 = *v21;
          size_t v26 = CI::ProgramNode::child_depth((CI::ProgramNode *)a1[1], v14);
          if (v26 - 1 > v56)
          {
            unint64_t v27 = ~v56 + v26;
            do
            {
              if ((*(unsigned int (**)(double *))(*(void *)v25 + 16))(v25) == 28)
              {
                double v28 = v25[7];
                double v29 = v25[8];
                double v30 = v29 * v62 + v28 * v60;
                double v31 = v29 * v63 + v28 * v61;
                double v32 = v25[9];
                double v33 = v25[10];
                double v34 = v62 * v33 + v32 * v60;
                double v35 = v63 * v33 + v32 * v61;
                double v36 = v25[11];
                double v37 = v25[12];
                double v38 = v64 + v62 * v37 + v36 * v60;
                double v39 = v63 * v37 + v36 * v61 + v65;
                double v60 = v30;
                double v61 = v31;
                double v62 = v34;
                double v63 = v35;
                double v64 = v38;
                double v65 = v39;
              }
              else
              {
                int v40 = (*(uint64_t (**)(double *))(*(void *)v25 + 16))(v25);
                uint64_t v41 = *(void *)v25;
                if (v40 == 45)
                {
                  (*(void (**)(double *))(v41 + 408))(v25);
                }
                else if ((*(unsigned int (**)(double *))(v41 + 16))(v25) != 30 {
                       && (*(unsigned int (**)(double *))(*(void *)v25 + 16))(v25) == 47)
                }
                {
                  int v42 = *((_DWORD *)a1 + 56);
                  int v43 = (*(uint64_t (**)(double *))(*(void *)v25 + 408))(v25);
                  if (!v42) {
                    *((_DWORD *)a1 + 56) = v43;
                  }
                }
              }
              int v25 = (double *)(*(uint64_t (**)(double *, void))(*(void *)v25 + 48))(v25, 0);
              --v27;
            }
            while (v27);
          }
          uint64_t v44 = (*(uint64_t (**)(void, uint64_t))(*(void *)a1[1] + 48))(a1[1], v14);
          if ((*(unsigned int (**)(uint64_t))(*(void *)v44 + 16))(v44) == 52)
          {
            unsigned __int8 v59 = 0;
            char v45 = *(unsigned char *)(v44 + 144);
            if (v45)
            {
              unsigned int v54 = *(_DWORD *)(v44 + 140);
              *(void *)uint64_t v66 = *(void *)(v44 + 145);
              *(_DWORD *)&v66[7] = *(_DWORD *)(v44 + 152);
              if (CI_INTERMEDIATE_SRGB_TEXTURES()
                && (*(unsigned int (**)(void, void, uint64_t))(*(void *)*a1 + 584))(*a1, v54, 1))
              {
                *(_DWORD *)(v44 + 140) = v54;
                *(unsigned char *)(v44 + 144) = v45 | 4;
                *(void *)(v44 + 145) = *(void *)v66;
                *(_DWORD *)(v44 + 152) = *(_DWORD *)&v66[7];
              }
              else
              {
                unsigned __int8 v59 = 1;
              }
            }
            std::__tree<BOOL>::__emplace_unique_key_args<BOOL,BOOL const&>(v55, &v59, &v59);
          }
          else
          {
            v66[0] = 0;
            std::__tree<BOOL>::__emplace_unique_key_args<BOOL,BOOL const&>(v55, v66, v66);
          }
          operator new();
        }
        goto LABEL_19;
      }
      uint64_t v18 = *(void *)(a2 + 56);
      if (v13 > 9) {
        uint64_t v19 = (void *)(*(void *)(v18 + 16) + 8 * (v13 - 10));
      }
      else {
        uint64_t v19 = (void *)(v18 + 8 * v13 + 24);
      }
      uint64_t v22 = CI::FoslAdapter::convertTree(a1, *v19, v10, a3, a4, v58, v14);
      fosl_filter_addChild(a1[3], Kernel, v22);
      uint64_t v14 = (v14 + 1);
LABEL_50:
      if (++v13 == v15) {
        goto LABEL_53;
      }
    }
  }
  LODWORD(v14) = 0;
LABEL_53:
  if (a1[31] > 1uLL)
  {
    std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(a1 + 29), (void *)a1[30]);
    a1[29] = a1 + 30;
    a1[30] = 0;
    a1[31] = 0;
    if ((int)v14 >= 1)
    {
      uint64_t v50 = 0;
      do
      {
        uint64_t v51 = (*(uint64_t (**)(void, uint64_t))(*(void *)a1[1] + 48))(a1[1], v50);
        if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 16))(v51) == 52
          && (*(unsigned char *)(v51 + 144) & 5) == 1)
        {
          unsigned int v52 = CI::name_for_format(*(_DWORD *)(v51 + 140));
          x_log("Cannot use sRGB texture binding with format %s for sampler %d in kernel '%s'.\n", v52, v50, *(const char **)(*(void *)(a2 + 48) + 24));
        }
        uint64_t v50 = (v50 + 1);
      }
      while (v14 != v50);
    }
  }
  return Kernel;
}

uint64_t CI::FoslAdapter::convertTree(uint64_t **a1, CI::Node *a2, const CI::Kernel *a3, uint64_t a4, uint64_t a5, unsigned int a6, char a7)
{
  *(unsigned char *)(a5 + a6) = a7 + 48;
  *(unsigned char *)(a5 + a6 + 1) = 0;
  uint64_t IndexOfString = CI::SerialStringArray::firstIndexOfString((CI::SerialStringArray *)a1[1][7], (const char *)(a5 + 1));
  if (IndexOfString != -1) {
    a2 = (CI::Node *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1[1] + 48))(a1[1], IndexOfString);
  }
  uint64_t v14 = (uint64_t *)CI::hash_dag_node_id((unint64_t)a2, a4, (char *)a5);
  uint64_t v15 = a1 + 19;
  unint64_t v27 = (unint64_t *)v14;
  v26[0] = (uint64_t *)&v27;
  if (!std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a1 + 19, (unint64_t *)&v27, (uint64_t)&std::piecewise_construct, v26)[5])
  {
    if (IndexOfString != -1) {
      CI::FoslAdapter::createReadPixel((CI::FoslAdapter *)a1, a2, a3);
    }
    v26[0] = (uint64_t *)a2;
    if (a2) {
      CI::Object::ref((uint64_t)a2);
    }
    uint64_t v18 = (uint64_t *)(*(uint64_t (**)(CI::Node *, uint64_t *))(*(void *)a2 + 320))(a2, *a1);
    v26[1] = v18;
    if (v18) {
      a2 = (CI::Node *)v18;
    }
    if ((*(unsigned int (**)(CI::Node *))(*(void *)a2 + 16))(a2) == 51)
    {
      Generaluint64_t Kernel = CI::FoslAdapter::createGeneralKernel(a1, (uint64_t)a2, a4, a5, a6);
    }
    else
    {
      if ((*(unsigned int (**)(CI::Node *))(*(void *)a2 + 16))(a2) != 49)
      {
        if ((*(unsigned int (**)(CI::Node *))(*(void *)a2 + 16))(a2) != 50)
        {
          x_log("Invalid DAG node type");
          uint64_t v16 = 0;
          goto LABEL_23;
        }
        Warpuint64_t Kernel = CI::FoslAdapter::createWarpKernel((uint64_t)a1, a2, (uint64_t)a3, a4, (char *)a5, a6);
        int v25 = v14;
        unint64_t v27 = (unint64_t *)&v25;
        std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v15, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, (uint64_t **)&v27)[5] = WarpKernel;
        int v25 = v14;
        unint64_t v27 = (unint64_t *)&v25;
        uint64_t v23 = v15;
        goto LABEL_21;
      }
      Generaluint64_t Kernel = CI::FoslAdapter::createColorKernel((uint64_t)a1, a2, a4, (char *)a5, a6);
    }
    int v25 = v14;
    unint64_t v27 = (unint64_t *)&v25;
    std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a1 + 19, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, (uint64_t **)&v27)[5] = GeneralKernel;
    uint64_t Cast = CI::FoslAdapter::createCast((CI::FoslAdapter *)a1, a2, a3);
    if (Cast)
    {
      uint64_t v16 = Cast;
      uint64_t v21 = (uint64_t)a1[3];
      int v25 = v14;
      unint64_t v27 = (unint64_t *)&v25;
      uint64_t v22 = std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v15, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, (uint64_t **)&v27);
      fosl_filter_addChild(v21, v16, v22[5]);
LABEL_23:
      CI::ConvertedNodeRAII::~ConvertedNodeRAII((CI::ConvertedNodeRAII *)v26);
      return v16;
    }
    int v25 = v14;
    unint64_t v27 = (unint64_t *)&v25;
    uint64_t v23 = a1 + 19;
LABEL_21:
    uint64_t v16 = std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v23, (unint64_t *)&v25, (uint64_t)&std::piecewise_construct, (uint64_t **)&v27)[5];
    goto LABEL_23;
  }
  unint64_t v27 = (unint64_t *)v14;
  v26[0] = (uint64_t *)&v27;
  return std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(a1 + 19, (unint64_t *)&v27, (uint64_t)&std::piecewise_construct, v26)[5];
}

uint64_t CI::FoslAdapter::createColorKernel(uint64_t a1, CI::ColorKernelNode *a2, uint64_t a3, char *a4, int a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *((void *)a2 + 6);
  uint64_t Kernel = fosl_filter_createKernel(*(void *)(a1 + 24), *(void *)(v10 + 32));
  double v30 = (CI::Kernel *)v10;
  if (*(unsigned char *)(v10 + 12))
  {
    int v12 = CI::KernelArguments::count((CI::KernelArguments *)(v10 + 144));
    if (!v12) {
      return Kernel;
    }
  }
  else
  {
    int v12 = *(_DWORD *)(v10 + 20);
    if (!v12) {
      return Kernel;
    }
  }
  unsigned int v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = (a5 + 1);
  uint64_t v29 = a3;
  unsigned int v28 = v15;
  do
  {
    int v16 = CI::ColorKernelNode::kernel_argument_type(a2, v13);
    int v17 = v16;
    if (v16 == 4 || v16 == 1)
    {
      argument = (CI::Node *)CI::ColorKernelNode::get_argument(a2, v13);
      if (v17 == 4) {
        CI::FoslAdapter::createReadTable((CI::FoslAdapter *)a1, argument, v30, a4, v15, v14);
      }
      uint64_t v25 = CI::FoslAdapter::convertTree(a1, argument, v30, a3, a4, v15, v14);
      fosl_filter_addChild(*(void *)(a1 + 24), Kernel, v25);
      uint64_t v14 = (v14 + 1);
    }
    else if (CI::KernelArguments::is_uniform(v16))
    {
      uint64_t v19 = a4;
      uint64_t v20 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v20 + 1;
      CI::SerialValArray<int>::append(*(void ***)(a1 + 200), v17);
      uint64_t v21 = *(void *)(a1 + 216);
      uint64_t v22 = (CI::Object *)CI::ColorKernelNode::get_argument(a2, v13);
      CI::SerialObjectPtrArray::append(v21, v22);
      int v23 = snprintf(__str, 0x40uLL, "_u%d", v20);
      CI::SerialStringArray::append(*(CI::SerialStringArray **)(a1 + 208), __str, v23);
      if ((v17 - 5) > 0x16) {
        uint64_t v24 = 0;
      }
      else {
        uint64_t v24 = dword_193959978[v17 - 5];
      }
      a4 = v19;
      uint64_t Uniform = fosl_filter_createUniform(*(void *)(a1 + 24), v20, v24);
      fosl_filter_addChild(*(void *)(a1 + 24), Kernel, Uniform);
      a3 = v29;
      uint64_t v15 = v28;
    }
    ++v13;
  }
  while (v12 != v13);
  return Kernel;
}

uint64_t CI::FoslAdapter::createWarpKernel(uint64_t a1, CI::ColorKernelNode *a2, uint64_t a3, uint64_t a4, char *a5, int a6)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  uint64_t CoordinateTransform = fosl_filter_createCoordinateTransform(*(void *)(a1 + 24), *(void *)(*((void *)a2 + 6) + 32));
  uint64_t v9 = *((void *)a2 + 6);
  if (*(unsigned char *)(v9 + 12))
  {
    int v10 = CI::KernelArguments::count((CI::KernelArguments *)(v9 + 144));
    if (!v10) {
      goto LABEL_12;
    }
  }
  else
  {
    int v10 = *(_DWORD *)(v9 + 20);
    if (!v10) {
      goto LABEL_12;
    }
  }
  for (unsigned int i = 0; i != v10; ++i)
  {
    int v12 = CI::ColorKernelNode::kernel_argument_type(a2, i);
    if (CI::KernelArguments::is_uniform(v12))
    {
      uint64_t v13 = *(unsigned int *)(a1 + 16);
      *(_DWORD *)(a1 + 16) = v13 + 1;
      if ((v12 - 5) > 0x16) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = dword_193959978[v12 - 5];
      }
      uint64_t Uniform = fosl_filter_createUniform(*(void *)(a1 + 24), v13, v14);
      CI::SerialValArray<int>::append(*(void ***)(a1 + 200), v12);
      uint64_t v16 = *(void *)(a1 + 216);
      argument = (CI::Object *)CI::ColorKernelNode::get_argument(a2, i);
      CI::SerialObjectPtrArray::append(v16, argument);
      int v18 = snprintf(__str, 0x40uLL, "_u%d", v13);
      CI::SerialStringArray::append(*(CI::SerialStringArray **)(a1 + 208), __str, v18);
      fosl_filter_addChild(*(void *)(a1 + 24), CoordinateTransform, Uniform);
    }
  }
LABEL_12:
  uint64_t v19 = (*(uint64_t (**)(CI::ColorKernelNode *, void))(*(void *)a2 + 48))(a2, 0);
  uint64_t PositionUpdate = fosl_filter_createPositionUpdate(*(void *)(a1 + 24));
  fosl_filter_setPositionUpdatePosition(PositionUpdate, CoordinateTransform);
  unint64_t v21 = CI::hash_dag_node_id((unint64_t)a2, a4, a5);
  uint64_t v22 = CI::FoslAdapter::convertTree(a1, v19, a3, v21, a5, (a6 + 1), 0);
  fosl_filter_setPositionUpdateContinuation(PositionUpdate, v22);
  return PositionUpdate;
}

uint64_t CI::FoslAdapter::createCast(CI::FoslAdapter *this, CI::Node *a2, const CI::Kernel *a3)
{
  if (!a3) {
    return 0;
  }
  if ((*(unsigned int (**)(CI::Node *))(*(void *)a2 + 16))(a2) == 49) {
    uint64_t v6 = *((void *)a2 + 6);
  }
  else {
    uint64_t v6 = 0;
  }
  if ((*(unsigned int (**)(CI::Node *))(*(void *)a2 + 16))(a2) == 51) {
    uint64_t v6 = *((void *)a2 + 6);
  }
  int v7 = *(_DWORD *)(v6 + 16);
  if (!*((unsigned char *)a3 + 161))
  {
    if (v7 == 3)
    {
      int v8 = "vec4 _cast_hvec4_to_vec4(hvec4 v) { return vec4(v); }";
      goto LABEL_12;
    }
    return 0;
  }
  if (v7 == 3) {
    return 0;
  }
  int v8 = "hvec4 _cast_vec4_to_hvec4(vec4 v) { return hvec4(v); }";
LABEL_12:
  uint64_t v9 = *((void *)this + 3);

  return fosl_filter_createKernel(v9, (uint64_t)v8);
}

uint64_t CI::FoslAdapter::convertTree(CI::FoslAdapter *this, CI::Node *a2, char *a3, unsigned int a4, int a5)
{
  *((_DWORD *)this + 64) = a5;
  uint64_t v6 = CI::FoslAdapter::convertTree((uint64_t **)this, a2, 0, 0, (uint64_t)a3, a4, 0);
  if (*(unsigned char *)(*((void *)this + 1) + 144))
  {
    uint64_t Kernel = fosl_filter_createKernel(*((void *)this + 3), (uint64_t)"vec4 _ci_linear_to_srgb (vec4 s) { return _linear_to_srgb(s); }");
    fosl_filter_addChild(*((void *)this + 3), Kernel, v6);
    return Kernel;
  }
  return v6;
}

void CI::FoslAdapter::addLibraryFunctions(CI::FoslAdapter *this, const char *a2)
{
}

uint64_t CI::FoslAdapter::constructShader(CI::FoslAdapter *this, const char *a2, uint64_t a3)
{
  fosl_filter_assignRoot(*((void *)this + 3), a3);
  int v5 = newlocale(16, 0, 0);
  uint64_t v6 = uselocale(v5);
  fosl_filter_parseNodesInGraph(*((void *)this + 3));
  if (FOSL_DUMP_GRAPH()) {
    fosl_filter_dumpGraph(*((void *)this + 3));
  }
  uint64_t v7 = *((void *)this + 30);
  if (v7)
  {
    int v8 = (CI::FoslAdapter *)((char *)this + 240);
    do
    {
      if (*(unsigned char *)(v7 + 25)) {
        uint64_t v9 = (uint64_t *)v7;
      }
      else {
        uint64_t v9 = (uint64_t *)(v7 + 8);
      }
      if (*(unsigned char *)(v7 + 25)) {
        int v8 = (CI::FoslAdapter *)v7;
      }
      uint64_t v7 = *v9;
    }
    while (*v9);
    if (v8 != (CI::FoslAdapter *)((char *)this + 240)) {
      fosl_filter_setSamplerNeedsSRGBToLinear(*((void *)this + 3));
    }
  }
  int v10 = *((_DWORD *)this + 56);
  if ((v10 - 1) <= 0x19)
  {
    fosl_filter_setSamplerSwizzleMask(*((void *)this + 3), (uint64_t)off_1E57745D0[v10 - 1]);
    int v10 = *((_DWORD *)this + 56);
  }
  unsigned int v11 = v10 - 27;
  if (v11 <= 9) {
    fosl_filter_setSamplerSwizzleMacro(*((void *)this + 3), (uint64_t)off_1E57746A0[v11]);
  }
  fosl_filter_setMainEntryPointName(*((void *)this + 3), (uint64_t)a2);
  uint64_t v12 = *((void *)this + 3);
  int v13 = (*(uint64_t (**)(void))(**(void **)this + 16))();
  switch(v13)
  {
    case 'M':
      uint64_t v14 = v12;
      uint64_t v15 = 2;
      goto LABEL_23;
    case 'L':
      uint64_t v14 = v12;
      uint64_t v15 = 0;
      goto LABEL_23;
    case 'J':
      uint64_t v14 = v12;
      uint64_t v15 = 1;
LABEL_23:
      fosl_filter_synthesizeMainInGraphOfType(v14, v15);
      goto LABEL_25;
  }
  fosl_filter_synthesizeMainInGraph(v12);
LABEL_25:
  if (FOSL_PRINT_GRAPH()) {
    fosl_filter_printGraph(*((void *)this + 3));
  }
  uint64_t StringForGraph = fosl_filter_getStringForGraph(*((void *)this + 3));
  int v17 = uselocale(v6);
  freelocale(v17);
  return StringForGraph;
}

uint64_t **std::__tree<BOOL>::__emplace_unique_key_args<BOOL,BOOL const&>(uint64_t **a1, unsigned __int8 *a2, unsigned char *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int8 *)v5 + 25);
        if (v7 >= v9) {
          break;
        }
        int v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      int v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = a1 + 1;
LABEL_10:
    int v10 = (uint64_t *)operator new(0x20uLL);
    *((unsigned char *)v10 + 25) = *a3;
    std::__tree<std::__value_type<std::string,CI::SWFunction>,std::__map_value_compare<std::string,std::__value_type<std::string,CI::SWFunction>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,CI::SWFunction>>>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void *foslFunctions::initializeFunctions(foslFunctions *this)
{
  uint64_t v2 = dlopen("/usr/lib/libFosl_dynamic.dylib", 2);
  if (!v2) {
    return (void *)fprintf((FILE *)*MEMORY[0x1E4F143C8], "Unable to open Fosl library at path %s\n", "/usr/lib/libFosl_dynamic.dylib");
  }
  unsigned __int16 v3 = v2;
  *(void *)this = dlsym(v2, "fosl_filter_interface_version");
  *((void *)this + 1) = dlsym(v3, "fosl_filter_kernelpool_createPool");
  *((void *)this + 2) = dlsym(v3, "fosl_filter_kernelpool_hasError");
  *((void *)this + 3) = dlsym(v3, "fosl_filter_kernelpool_addLibrary");
  *((void *)this + 4) = dlsym(v3, "fosl_filter_kernelpool_addString");
  *((void *)this + 5) = dlsym(v3, "fosl_filter_kernelpool_destroyPool");
  *((void *)this + 6) = dlsym(v3, "fosl_filter_kernelpool_getNumKernels");
  *((void *)this + 7) = dlsym(v3, "fosl_filter_kernelpool_lookupKernel");
  *((void *)this + 8) = dlsym(v3, "fosl_filter_kernelpool_getKernelByIdx");
  *((void *)this + 9) = dlsym(v3, "fosl_filter_kernelpool_getNumDiagnostics");
  *((void *)this + 10) = dlsym(v3, "fosl_filter_kernelpool_getDiagnosticByIdx");
  *((void *)this + 11) = dlsym(v3, "fosl_filter_kernelpool_getKernelKind");
  *((void *)this + 12) = dlsym(v3, "fosl_filter_kernelpool_getKernelReturnType");
  *((void *)this + 13) = dlsym(v3, "fosl_filter_kernelpool_getKernelName");
  *((void *)this + 14) = dlsym(v3, "fosl_filter_kernelpool_getPrintedKernel");
  *((void *)this + 15) = dlsym(v3, "fosl_filter_kernelpool_getKernelDimensionality");
  *((void *)this + 16) = dlsym(v3, "fosl_filter_kernelpool_isPositionInvariant");
  *((void *)this + 17) = dlsym(v3, "fosl_filter_kernelpool_preservesAlpha");
  *((void *)this + 18) = dlsym(v3, "fosl_filter_kernelpool_getNumKernelParameters");
  *((void *)this + 19) = dlsym(v3, "fosl_filter_kernelpool_getParamName");
  *((void *)this + 20) = dlsym(v3, "fosl_filter_kernelpool_getParamType");
  *((void *)this + 21) = dlsym(v3, "fosl_filter_kernelpool_getNumKernelAttributes");
  *((void *)this + 22) = dlsym(v3, "fosl_filter_kernelpool_getAttributeKeyword");
  *((void *)this + 23) = dlsym(v3, "fosl_filter_kernelpool_getAttributeParameters");
  *((void *)this + 24) = dlsym(v3, "fosl_filter_kernelpool_hasAttributeParameters");
  *((void *)this + 25) = dlsym(v3, "fosl_filter_createGraph");
  *((void *)this + 26) = dlsym(v3, "fosl_filter_assignRoot");
  *((void *)this + 27) = dlsym(v3, "fosl_filter_destroyGraph");
  *((void *)this + 28) = dlsym(v3, "fosl_filter_createKernel");
  *((void *)this + 29) = dlsym(v3, "fosl_filter_addLibraryFunction");
  *((void *)this + 30) = dlsym(v3, "fosl_filter_addChild");
  *((void *)this + 31) = dlsym(v3, "fosl_filter_createSampler");
  *((void *)this + 32) = dlsym(v3, "fosl_filter_createImage");
  *((void *)this + 33) = dlsym(v3, "fosl_filter_createUniform");
  *((void *)this + 34) = dlsym(v3, "fosl_filter_createConstant");
  *((void *)this + 35) = dlsym(v3, "fosl_filter_createTransformMatrix");
  *((void *)this + 36) = dlsym(v3, "fosl_filter_createSampleTransform");
  *((void *)this + 37) = dlsym(v3, "fosl_filter_createUsePosition");
  *((void *)this + 38) = dlsym(v3, "fosl_filter_createPositionUpdate");
  *((void *)this + 39) = dlsym(v3, "fosl_filter_createCoordinateTransform");
  *((void *)this + 40) = dlsym(v3, "fosl_filter_setPositionUpdatePosition");
  *((void *)this + 41) = dlsym(v3, "fosl_filter_setPositionUpdateContinuation");
  *((void *)this + 42) = dlsym(v3, "fosl_filter_setSamplerNeedsSRGBToLinear");
  *((void *)this + 43) = dlsym(v3, "fosl_filter_setSamplerSwizzleMask");
  *((void *)this + 44) = dlsym(v3, "fosl_filter_setSamplerSwizzleMacro");
  *((void *)this + 45) = dlsym(v3, "fosl_filter_setMainEntryPointName");
  *((void *)this + 46) = dlsym(v3, "fosl_filter_parseNodesInGraph");
  *((void *)this + 47) = dlsym(v3, "fosl_filter_synthesizeMainInGraph");
  *((void *)this + 48) = dlsym(v3, "fosl_filter_synthesizeMainInGraphOfType");
  *((void *)this + 49) = dlsym(v3, "fosl_filter_synthesizeMainInGraphOfTypeWithOptions");
  *((void *)this + 50) = dlsym(v3, "fosl_filter_dumpGraph");
  *((void *)this + 51) = dlsym(v3, "fosl_filter_printGraph");
  *((void *)this + 52) = dlsym(v3, "fosl_filter_getStringForGraph");
  uint64_t result = dlsym(v3, "fosl_filter_getStringForGraphWithOptions");
  *((void *)this + 53) = result;
  return result;
}

void ___ZN13foslFunctions24initializeWrapperLibraryEv_block_invoke()
{
}

uint64_t (*fosl_filter_interface_version())(void)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  uint64_t result = *(uint64_t (**)(void))foslFuncs;
  if (*(void *)foslFuncs)
  {
    return (uint64_t (*)(void))result();
  }
  return result;
}

uint64_t fosl_filter_kernelpool_createPool()
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  v0 = *(uint64_t (**)(void))(foslFuncs + 8);

  return v0();
}

void fosl_filter_kernelpool_addLibrary(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    int v4 = *(void (**)(uint64_t, uint64_t))(foslFuncs + 24);
    v4(a1, a2);
  }
}

void fosl_filter_kernelpool_addString(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    int v4 = *(void (**)(uint64_t, uint64_t))(foslFuncs + 32);
    v4(a1, a2);
  }
}

void fosl_filter_kernelpool_destroyPool(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    uint64_t v2 = *(void (**)(uint64_t))(foslFuncs + 40);
    v2(a1);
  }
}

uint64_t fosl_filter_kernelpool_getNumKernels(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 48);

  return v2(a1);
}

uint64_t fosl_filter_kernelpool_getKernelByIdx(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(foslFuncs + 64);

  return v4(a1, a2);
}

uint64_t fosl_filter_kernelpool_getNumDiagnostics(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 72);

  return v2(a1);
}

uint64_t fosl_filter_kernelpool_getDiagnosticByIdx(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(foslFuncs + 80);

  return v4(a1, a2);
}

uint64_t fosl_filter_kernelpool_getKernelKind(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 88);

  return v2(a1);
}

uint64_t fosl_filter_kernelpool_getKernelReturnType(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 96);

  return v2(a1);
}

uint64_t fosl_filter_kernelpool_getKernelName(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 104);

  return v2(a1);
}

uint64_t fosl_filter_kernelpool_getPrintedKernel(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 112);

  return v2(a1);
}

uint64_t fosl_filter_kernelpool_isPositionInvariant(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 128);

  return v2(a1);
}

uint64_t fosl_filter_kernelpool_preservesAlpha(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 136);

  return v2(a1);
}

uint64_t fosl_filter_kernelpool_getNumKernelParameters(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 144);

  return v2(a1);
}

uint64_t fosl_filter_kernelpool_getParamName(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(foslFuncs + 152);

  return v4(a1, a2);
}

uint64_t fosl_filter_kernelpool_getParamType(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(foslFuncs + 160);

  return v4(a1, a2);
}

uint64_t fosl_filter_kernelpool_getNumKernelAttributes(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 168);

  return v2(a1);
}

uint64_t fosl_filter_kernelpool_getAttributeKeyword(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(foslFuncs + 176);

  return v4(a1, a2);
}

uint64_t fosl_filter_kernelpool_getAttributeParameters(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(foslFuncs + 184);

  return v4(a1, a2);
}

uint64_t fosl_filter_kernelpool_hasAttributeParameters(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(foslFuncs + 192);

  return v4(a1, a2);
}

uint64_t fosl_filter_createGraph()
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  v0 = *(uint64_t (**)(void))(foslFuncs + 200);

  return v0();
}

void fosl_filter_assignRoot(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    int v4 = *(void (**)(uint64_t, uint64_t))(foslFuncs + 208);
    v4(a1, a2);
  }
}

void fosl_filter_destroyGraph(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    uint64_t v2 = *(void (**)(uint64_t))(foslFuncs + 216);
    v2(a1);
  }
}

uint64_t fosl_filter_createKernel(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(foslFuncs + 224);

  return v4(a1, a2);
}

void fosl_filter_addLibraryFunction(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    int v4 = *(void (**)(uint64_t, uint64_t))(foslFuncs + 232);
    v4(a1, a2);
  }
}

void fosl_filter_addChild(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(foslFuncs + 240);
    v6(a1, a2, a3);
  }
}

uint64_t fosl_filter_createSampler(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(foslFuncs + 248);

  return v6(a1, a2, a3);
}

uint64_t fosl_filter_createImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(foslFuncs + 256);

  return v6(a1, a2, a3);
}

uint64_t fosl_filter_createUniform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(foslFuncs + 264);

  return v6(a1, a2, a3);
}

uint64_t fosl_filter_createTransformMatrix(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(foslFuncs + 280);

  return v4(a1, a2);
}

uint64_t fosl_filter_createSampleTransform(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(foslFuncs + 288);

  return v4(a1, a2);
}

uint64_t fosl_filter_createUsePosition(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 296);

  return v2(a1);
}

uint64_t fosl_filter_createPositionUpdate(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 304);

  return v2(a1);
}

uint64_t fosl_filter_createCoordinateTransform(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(foslFuncs + 312);

  return v4(a1, a2);
}

void fosl_filter_setPositionUpdatePosition(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    int v4 = *(void (**)(uint64_t, uint64_t))(foslFuncs + 320);
    v4(a1, a2);
  }
}

void fosl_filter_setPositionUpdateContinuation(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    int v4 = *(void (**)(uint64_t, uint64_t))(foslFuncs + 328);
    v4(a1, a2);
  }
}

void fosl_filter_setSamplerNeedsSRGBToLinear(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    uint64_t v2 = *(void (**)(uint64_t))(foslFuncs + 336);
    v2(a1);
  }
}

void fosl_filter_setSamplerSwizzleMask(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    int v4 = *(void (**)(uint64_t, uint64_t))(foslFuncs + 344);
    v4(a1, a2);
  }
}

void fosl_filter_setSamplerSwizzleMacro(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    int v4 = *(void (**)(uint64_t, uint64_t))(foslFuncs + 352);
    v4(a1, a2);
  }
}

void fosl_filter_setMainEntryPointName(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    int v4 = *(void (**)(uint64_t, uint64_t))(foslFuncs + 360);
    v4(a1, a2);
  }
}

void fosl_filter_parseNodesInGraph(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    uint64_t v2 = *(void (**)(uint64_t))(foslFuncs + 368);
    v2(a1);
  }
}

void fosl_filter_synthesizeMainInGraph(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    uint64_t v2 = *(void (**)(uint64_t))(foslFuncs + 376);
    v2(a1);
  }
}

void fosl_filter_synthesizeMainInGraphOfType(uint64_t a1, uint64_t a2)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    int v4 = *(void (**)(uint64_t, uint64_t))(foslFuncs + 384);
    v4(a1, a2);
  }
}

void fosl_filter_dumpGraph(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    uint64_t v2 = *(void (**)(uint64_t))(foslFuncs + 400);
    v2(a1);
  }
}

void fosl_filter_printGraph(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (foslFuncs)
  {
    uint64_t v2 = *(void (**)(uint64_t))(foslFuncs + 408);
    v2(a1);
  }
}

uint64_t fosl_filter_getStringForGraph(uint64_t a1)
{
  if (foslFunctions::initializeWrapperLibrary(void)::onceToken != -1) {
    dispatch_once(&foslFunctions::initializeWrapperLibrary(void)::onceToken, &__block_literal_global_84);
  }
  if (!foslFuncs) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t))(foslFuncs + 416);

  return v2(a1);
}

void foslFunctions::foslFunctions(foslFunctions *this)
{
  ci_signpost_log_render();
  TimerBase::TimerBase((uint64_t)v2, 0, 0, (uint64_t)"foslFunctions", 31);
  foslFunctions::initializeFunctions(this);
  foslFunctions::foslFunctions(void)::SignpostTimer::~SignpostTimer((TimerBase *)v2);
}

void foslFunctions::foslFunctions(void)::SignpostTimer::~SignpostTimer(TimerBase *a1)
{
  uint64_t v2 = ci_signpost_log_render();
  os_signpost_id_t v3 = *((void *)a1 + 1);
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    int v4 = v2;
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)int v5 = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v4, OS_SIGNPOST_INTERVAL_END, v3, "foslFunctions", "", v5, 2u);
    }
  }
  TimerBase::~TimerBase(a1);
}

BOOL Rectangle::isNearIntegral(Rectangle *this, double a2)
{
  return vabdd_f64(this->var0, round(this->var0)) < a2
      && vabdd_f64(this->var1, round(this->var1)) < a2
      && vabdd_f64(this->var2, round(this->var2)) < a2
      && vabdd_f64(this->var3, round(this->var3)) < a2;
}

uint64_t CI::AffineImage::output_format(CI::AffineImage *this)
{
  uint64_t v2 = (*(uint64_t (**)(CI::AffineImage *, void))(*(void *)this + 48))(this, 0);
  v14.origin.double x = (*(double (**)(uint64_t))(*(void *)v2 + 88))(v2);
  double x = v14.origin.x;
  double y = v14.origin.y;
  double width = v14.size.width;
  double height = v14.size.height;
  if (!CGRectIsInfinite(v14))
  {
    v15.origin.double x = x;
    v15.origin.double y = y;
    v15.size.double width = width;
    v15.size.double height = height;
    BOOL v7 = !CGRectIsNull(v15) && x == -8.98846567e307;
    BOOL v8 = v7 && y == -8.98846567e307;
    BOOL v9 = v8 && width == 1.79769313e308;
    BOOL v10 = v9 && height == 1.79769313e308;
    if (!v10
      && (fabs(*((double *)this + 16)) >= 0.0001 || fabs(*((double *)this + 17)) >= 0.0001)
      && (fabs(*((double *)this + 15)) >= 0.0001 || fabs(*((double *)this + 18)) >= 0.0001))
    {
      return 0;
    }
  }
  unsigned int v11 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::AffineImage *, void))(*(void *)this + 48))(this, 0)+ 144);

  return v11();
}

uint64_t CI::AffineImage::print_for_graphviz(uint64_t a1, FILE *__stream, uint64_t a3, int a4)
{
  fwrite("affine ", 7uLL, 1uLL, __stream);
  int v7 = *(unsigned __int8 *)(a1 + 168);
  if (v7 == 110)
  {
    fwrite("loQ ", 4uLL, 1uLL, __stream);
    int v7 = *(unsigned __int8 *)(a1 + 168);
  }
  if (v7 == 121) {
    fwrite("hiQ ", 4uLL, 1uLL, __stream);
  }
  if (a4) {
    return fprintf(__stream, "[%g %g %g %g %g %g]");
  }
  fprintf(__stream, "%c%g  %g  %g", 10, *(double *)(a1 + 120), *(double *)(a1 + 128), *(double *)(a1 + 152));
  return fprintf(__stream, "%c%g  %g  %g");
}

uint64_t CI::AffineImage::shape_for_graphviz(CI::AffineImage *this)
{
  return 2;
}

uint64_t CI::AffineImage::color_for_graphviz(CI::AffineImage *this)
{
  if (*((unsigned char *)this + 168)) {
    return 5;
  }
  else {
    return 6;
  }
}

uint64_t CI::Image::max_dimension(CI::Image *this)
{
  return 0;
}

uint64_t CI::AffineImage::is_warp(CI::AffineImage *this)
{
  return 1;
}

uint64_t CI::AffineImage::print_for_graph_core(CI::AffineImage *this, __sFILE *a2)
{
  int v4 = *((unsigned __int8 *)this + 168);
  int v5 = "";
  if (v4 == 121) {
    int v5 = "hiQ ";
  }
  if (v4 == 110) {
    uint64_t v6 = "loQ ";
  }
  else {
    uint64_t v6 = v5;
  }
  fprintf(a2, "affine %s", v6);
  return fprintf(a2, "[%g %g %g %g %g %g]", *((double *)this + 15), *((double *)this + 16), *((double *)this + 17), *((double *)this + 18), *((double *)this + 19), *((double *)this + 20));
}

uint64_t CI::ImageWithChild::properties(CI::ImageWithChild *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 200))();
}

uint64_t CI::ImageWithChild::avdepthdata(CI::ImageWithChild *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 208))();
}

uint64_t CI::ImageWithChild::avmatte(CI::ImageWithChild *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 216))();
}

uint64_t CI::ImageWithChild::ssmatte(CI::ImageWithChild *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 224))();
}

uint64_t non-virtual thunk to'CI::AffineImage::type(CI::AffineImage *this)
{
  return 2;
}

void non-virtual thunk to'CI::AffineImage::~AffineImage(CI::AffineImage *this)
{
  *(void *)this = &unk_1EE45ACB0;
  atomic_fetch_add(dword_1EB466E78, 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::AffineImage *)((char *)this - 112));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45ACB0;
  atomic_fetch_add(dword_1EB466E78, 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::AffineImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

__n128 *CI::CGImage::CGImage(__n128 *a1, CGImage *a2, uint64_t a3, const void *a4, unsigned __int32 a5, unsigned __int8 a6, unsigned __int8 a7, unsigned __int8 a8, float a9)
{
  CI::Image::Image(a1);
  *(void *)(v18 + 104) = &unk_1EE45AE68;
  atomic_fetch_add(&dword_1EB466E78[1], 1u);
  *(void *)uint64_t v18 = &unk_1EE45DFC8;
  *(void *)(v18 + 104) = &unk_1EE45E118;
  *(_DWORD *)(v18 + 120) = 0;
  *(void *)(v18 + 128) = a3;
  uint64_t v19 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  a1[10].n128_u64[0] = (unint64_t)dispatch_queue_create("CI_CGNode_SurfaceCacheQueue", v19);
  a1[7].n128_u64[0] = (unint64_t)CGImageRetain(a2);
  if (a4) {
    CFTypeRef v21 = CFRetain(a4);
  }
  else {
    CFTypeRef v21 = 0;
  }
  a1[8].n128_u64[1] = (unint64_t)v21;
  a1[9].n128_u32[1] = a5;
  int v22 = CI::alpha_mode_from_CGImage((uint64_t)a2, v20);
  if ((a7 & (v22 == 0)) != 0) {
    int v23 = 4;
  }
  else {
    int v23 = v22;
  }
  if ((a7 & (v23 == 2)) != 0) {
    int v23 = 6;
  }
  a1[9].n128_u32[0] = v23;
  a1[9].n128_u8[8] = a6;
  a1[9].n128_u8[9] = a8;
  if (a9 == 0.0)
  {
    v29[0].i32[0] = 0;
    CGImageGetHeadroomInfo();
    a9 = v25;
    int v26 = CI::format_from_CGImage(a1[7].n128_i64[0], v24);
    if (!CI::format_is_extended(v26) && !CI::format_is_float(v26)) {
      a9 = 1.0;
    }
  }
  a1[7].n128_f32[2] = a9;
  XXH64_reset(v29, 0);
  LODWORD(__src) = (*(uint64_t (**)(__n128 *))(a1->n128_u64[0] + 16))(a1);
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  if (a1[8].n128_u64[0])
  {
    size_t __src = a1[8].n128_u64[0];
    size_t v27 = 8;
  }
  else
  {
    LODWORD(__src) = CGImageGetIdentifier();
    size_t v27 = 4;
  }
  XXH64_update((uint64_t)v29, (char *)&__src, v27);
  size_t __src = CGImageGetWidth(a2);
  XXH64_update((uint64_t)v29, (char *)&__src, 8uLL);
  size_t __src = CGImageGetHeight(a2);
  XXH64_update((uint64_t)v29, (char *)&__src, 8uLL);
  LODWORD(__src) = CGImageGetBitmapInfo(a2);
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  LODWORD(__src) = CGImageGetImageProvider() != 0;
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[9].n128_u32[0];
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[9].n128_u32[1];
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[9].n128_u8[8];
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[7].n128_u32[2];
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  a1[5].n128_u64[0] = XXH64_digest((uint64_t)v29);
  XXH64_reset(v29, 0);
  LODWORD(__src) = (*(uint64_t (**)(__n128 *))(a1->n128_u64[0] + 16))(a1);
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  size_t __src = CGImageGetWidth(a2);
  XXH64_update((uint64_t)v29, (char *)&__src, 8uLL);
  size_t __src = CGImageGetHeight(a2);
  XXH64_update((uint64_t)v29, (char *)&__src, 8uLL);
  LODWORD(__src) = CGImageGetBitmapInfo(a2);
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  LODWORD(__src) = CGImageGetImageProvider() != 0;
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[9].n128_u32[0];
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[9].n128_u32[1];
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[9].n128_u8[8];
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[7].n128_u32[2];
  XXH64_update((uint64_t)v29, (char *)&__src, 4uLL);
  a1[5].n128_u64[1] = XXH64_digest((uint64_t)v29);
  a1[6].n128_u16[0] = 257;
  return a1;
}

void CI::CGImage::~CGImage(CI::CGImage *this)
{
  *(void *)this = &unk_1EE45DFC8;
  *((void *)this + 13) = &unk_1EE45E118;
  CGImageRelease(*((CGImageRef *)this + 14));
  *((void *)this + 14) = 0;
  uint64_t v2 = (const void *)*((void *)this + 17);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 17) = 0;
  dispatch_release(*((dispatch_object_t *)this + 20));
  *((void *)this + 13) = &unk_1EE45AE68;
  atomic_fetch_add(&dword_1EB466E78[1], 0xFFFFFFFF);

  CI::Image::~Image(this);
}

{
  uint64_t vars8;

  CI::CGImage::~CGImage(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::CGImage::~CGImage(CI::CGImage *this)
{
}

{
  uint64_t vars8;

  CI::CGImage::~CGImage((CI::CGImage *)((char *)this - 104));

  JUMPOUT(0x1997023B0);
}

BOOL CI::CGImage::tileable(CI::CGImage *this)
{
  return CGImageGetImageProvider() != 0;
}

uint64_t CI::CGImage::add_args_to_hash(uint64_t a1, uint64_t a2)
{
  CGBitmapInfo __src = CGImageGetBitmapInfo(*(CGImageRef *)(a1 + 112));
  XXH64_update(a2, (char *)&__src, 4uLL);
  CGBitmapInfo __src = CGImageGetImageProvider() != 0;
  XXH64_update(a2, (char *)&__src, 4uLL);
  CGBitmapInfo __src = *(_DWORD *)(a1 + 144);
  XXH64_update(a2, (char *)&__src, 4uLL);
  CGBitmapInfo __src = *(_DWORD *)(a1 + 148);
  XXH64_update(a2, (char *)&__src, 4uLL);
  CGBitmapInfo __src = *(unsigned __int8 *)(a1 + 152);
  XXH64_update(a2, (char *)&__src, 4uLL);
  CGBitmapInfo __src = *(_DWORD *)(a1 + 120);
  return XXH64_update(a2, (char *)&__src, 4uLL);
}

uint64_t CI::CGImage::print_for_graph_core(CI::CGImage *this, __sFILE *a2)
{
  fprintf(a2, "CGImageRef %p", *((const void **)this + 14));
  if (*((void *)this + 16))
  {
    fprintf(a2, " content:%016llX");
  }
  else
  {
    CGImageGetIdentifier();
    fprintf(a2, "(%d)");
  }
  int v5 = CI::format_from_CGImage(*((void *)this + 14), v4);
  uint64_t v6 = CI::name_for_format(v5);
  fprintf(a2, " %s", v6);
  size_t Width = CGImageGetWidth(*((CGImageRef *)this + 14));
  size_t Height = CGImageGetHeight(*((CGImageRef *)this + 14));
  uint64_t result = fprintf(a2, " %ldx%ld", Width, Height);
  BOOL v10 = "alpha_one";
  switch(*((_DWORD *)this + 36))
  {
    case 0:
      goto LABEL_10;
    case 1:
      goto LABEL_9;
    case 2:
      BOOL v10 = "alpha_unpremul";
      goto LABEL_9;
    case 4:
      BOOL v10 = "alpha_premul-clear-edges";
      goto LABEL_9;
    case 6:
      BOOL v10 = "alpha_unpremul-clear-edges";
      goto LABEL_9;
    default:
      BOOL v10 = "alpha_unknown";
LABEL_9:
      uint64_t result = fprintf(a2, " %s", v10);
LABEL_10:
      int v11 = *((_DWORD *)this + 37);
      if (v11)
      {
        if (v11 == 1) {
          uint64_t v12 = "edge_clamp";
        }
        else {
          uint64_t v12 = "edge_unknown";
        }
        uint64_t result = fprintf(a2, " %s", v12);
      }
      if (*((unsigned char *)this + 152)) {
        uint64_t result = fwrite(" nearestsampling", 0x10uLL, 1uLL, a2);
      }
      if (*((unsigned char *)this + 153))
      {
        return fwrite(" cache", 6uLL, 1uLL, a2);
      }
      return result;
  }
}

void CI::CGImage::render_graph_core(uint64_t a1, CGImage *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = CI::format_from_CGImage(*(void *)(a1 + 112), a2);
  if (v7 == 1799)
  {
    if (CGImageGetImageProvider()) {
      uint64_t v7 = 1800;
    }
    else {
      uint64_t v7 = 1799;
    }
  }
  if (*(_DWORD *)(a1 + 148) != 1 && (*(_DWORD *)(a1 + 144) | 2) != 6)
  {
    if ((*(unsigned int (**)(CGImage *))(*(void *)a2 + 16))(a2) == 74) {
      goto LABEL_19;
    }
    double v10 = CI::Image::lookup_union_roi(a1, a4);
    CGFloat v12 = v11;
    CGFloat v14 = v13;
    CGFloat v16 = v15;
    v17.origin.double x = (*(double (**)(uint64_t))(*(void *)a1 + 88))(a1);
    v18.origin.double x = v10;
    v18.origin.double y = v12;
    v18.size.double width = v14;
    v18.size.double height = v16;
    if (!CGRectContainsRect(v17, v18))
    {
LABEL_19:
      if ((*(unsigned int (**)(CGImage *, void))(*(void *)a2 + 560))(a2, 0)) {
        CI::format_has_alpha(v7);
      }
    }
  }
  uint64_t v9 = CI::Context::swizzler_for_input((uint64_t)a2, v7);
  if (v8) {
    CI::input_format_for_conversion(v8);
  }
  if (!*(unsigned char *)(a1 + 152)) {
    (*(void (**)(CGImage *, uint64_t, uint64_t))(*(void *)a2 + 568))(a2, 1, v9);
  }
  operator new();
}

void CI::CGImage::restore_resources(CI::CGImage *this, CGImage **a2)
{
  if ((*((unsigned int (**)(CGImage **))*a2 + 2))(a2) == 29)
  {
    int v4 = (CGImage *)*((void *)this + 14);
    if (a2[13] != v4)
    {
      uint64_t v5 = *((void *)this + 16);
      uint64_t v6 = *((void *)this + 20);
      CI::CGNode::set_image((uint64_t)a2, v4, v5, v6);
    }
  }
}

void *CI::CGImage::node_for_graphviz(uint64_t a1, void *a2)
{
  os_signpost_id_t v3 = CI::Image::node_for_graphviz((unsigned int *)a1, a2);
  if (CI_PRINT_TREE_dump_inputs()) {
    CIGVNodeAddImage(v3, *(const char **)(a1 + 112));
  }
  return v3;
}

uint64_t CI::CGImage::print_for_graphviz(uint64_t a1, FILE *__stream)
{
  fwrite("CGImageRef", 0xAuLL, 1uLL, __stream);
  if (*(void *)(a1 + 128))
  {
    fprintf(__stream, " content:%016llX");
  }
  else if (*(void *)(a1 + 112))
  {
    fprintf(__stream, " %p", *(const void **)(a1 + 112));
    CGImageGetIdentifier();
    fprintf(__stream, "(%d)");
  }
  int v5 = CI::format_from_CGImage(*(void *)(a1 + 112), v4);
  uint64_t v6 = CI::name_for_format(v5);
  uint64_t result = fputs(v6, __stream);
  int v8 = "alpha_one";
  switch(*(_DWORD *)(a1 + 144))
  {
    case 0:
      goto LABEL_11;
    case 1:
      goto LABEL_10;
    case 2:
      int v8 = "alpha_unpremul";
      goto LABEL_10;
    case 4:
      int v8 = "alpha_premul-clear-edges";
      goto LABEL_10;
    case 6:
      int v8 = "alpha_unpremul-clear-edges";
      goto LABEL_10;
    default:
      int v8 = "alpha_unknown";
LABEL_10:
      uint64_t result = fprintf(__stream, " %s", v8);
LABEL_11:
      int v9 = *(_DWORD *)(a1 + 148);
      if (v9)
      {
        if (v9 == 1) {
          double v10 = "edge_clamp";
        }
        else {
          double v10 = "edge_unknown";
        }
        uint64_t result = fprintf(__stream, " %s", v10);
      }
      if (*(unsigned char *)(a1 + 152)) {
        uint64_t result = fwrite(" nearestsampling", 0x10uLL, 1uLL, __stream);
      }
      if (*(unsigned char *)(a1 + 153))
      {
        return fwrite(" cache", 6uLL, 1uLL, __stream);
      }
      return result;
  }
}

uint64_t CI::CGImage::type(CI::CGImage *this)
{
  return 3;
}

uint64_t CI::CGImage::child_count(CI::CGImage *this)
{
  return 0;
}

uint64_t CI::CGImage::child(CI::CGImage *this)
{
  return 0;
}

uint64_t CI::CGImage::shape_for_graphviz(CI::CGImage *this)
{
  return 0;
}

uint64_t CI::CGImage::color_for_graphviz(CI::CGImage *this)
{
  return 12;
}

_DWORD *CI::CGImage::extent(_DWORD *this)
{
  if (!this[37]) {
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)this + 96))(this);
  }
  return this;
}

double CI::CGImage::extent_unclamped(CGImageRef *this)
{
  return 0.0;
}

size_t CI::CGImage::max_dimension(CGImageRef *this)
{
  size_t Width = CGImageGetWidth(this[14]);
  size_t Height = CGImageGetHeight(this[14]);
  int v4 = this[14];
  if (Width <= Height) {
    return CGImageGetHeight(v4);
  }
  else {
    return CGImageGetWidth(v4);
  }
}

BOOL CI::CGImage::alpha_one(CI::CGImage *this)
{
  int v1 = *((_DWORD *)this + 36);
  return v1 == 1 || v1 == -1;
}

uint64_t CI::CGImage::output_format(CI::CGImage *this, CGImage *a2)
{
  uint64_t result = *((void *)this + 14);
  if (result) {
    return CI::format_from_CGImage(result, a2);
  }
  return result;
}

uint64_t CI::CGImage::properties(CI::CGImage *this)
{
  return *((void *)this + 17);
}

float CI::CGImage::headroom(CI::CGImage *this)
{
  return *((float *)this + 30);
}

CGColorSpaceRef CI::CGImage::colorspace(CGImageRef *this)
{
  return CGImageGetColorSpace(this[14]);
}

uint64_t CI::CGImage::baseColorspace(CI::CGImage *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 240))();
}

uint64_t non-virtual thunk to'CI::CGImage::type(CI::CGImage *this)
{
  return 3;
}

uint64_t CI::InstanceCounted<(CI::Type)3>::type()
{
  return 3;
}

void *CI::InstanceCounted<(CI::Type)3>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AE68;
  atomic_fetch_add(&dword_1EB466E78[1], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)3>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AE68;
  atomic_fetch_add(&dword_1EB466E78[1], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::ClampImage::shape_for_graphviz(CI::ClampImage *this)
{
  return 2;
}

uint64_t CI::ClampImage::color_for_graphviz(CI::ClampImage *this)
{
  return 5;
}

uint64_t CI::ClampImage::alpha_one(CI::ClampImage *this)
{
  uint64_t v2 = (*(uint64_t (**)(CI::ClampImage *, void))(*(void *)this + 48))(this, 0);
  v6.origin.double x = (*(double (**)(uint64_t))(*(void *)v2 + 88))(v2);
  uint64_t result = CGRectContainsRect(v6, *(CGRect *)((char *)this + 120));
  if (result)
  {
    int v4 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::ClampImage *, void))(*(void *)this + 48))(this, 0)+ 128);
    return v4();
  }
  return result;
}

uint64_t CI::ClampImage::is_warp(CI::ClampImage *this)
{
  return 1;
}

uint64_t CI::ClampImage::output_format(CI::ClampImage *this)
{
  uint64_t v2 = (*(uint64_t (**)(CI::ClampImage *, void))(*(void *)this + 48))(this, 0);
  v6.origin.double x = (*(double (**)(uint64_t))(*(void *)v2 + 88))(v2);
  uint64_t result = CGRectContainsRect(v6, *(CGRect *)((char *)this + 120));
  if (result)
  {
    int v4 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::ClampImage *, void))(*(void *)this + 48))(this, 0)+ 144);
    return v4();
  }
  return result;
}

size_t CI::ClampImage::print_for_graph_core(CI::ClampImage *this, __sFILE *__stream)
{
  fwrite("clampRect ", 0xAuLL, 1uLL, __stream);
  uint64_t v5 = *((void *)this + 15);
  uint64_t v6 = *((void *)this + 16);
  uint64_t v7 = *((void *)this + 17);
  uint64_t v8 = *((void *)this + 18);

  return CI::fprintf(__stream, v4, *(CGRect *)&v5);
}

uint64_t CI::ClampImage::headroom(CI::ClampImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 232))();
}

uint64_t CI::ClampImage::colorspace(CI::ClampImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 240))();
}

uint64_t non-virtual thunk to'CI::ClampImage::type(CI::ClampImage *this)
{
  return 7;
}

void non-virtual thunk to'CI::ClampImage::~ClampImage(CI::ClampImage *this)
{
  *(void *)this = &unk_1EE45B200;
  atomic_fetch_add(&dword_1EB466E78[5], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::ClampImage *)((char *)this - 112));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45B200;
  atomic_fetch_add(&dword_1EB466E78[5], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::ClampImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::ClampToAlphaImage::shape_for_graphviz(CI::ClampToAlphaImage *this)
{
  return 2;
}

uint64_t CI::ClampToAlphaImage::color_for_graphviz(CI::ClampToAlphaImage *this)
{
  return 4;
}

uint64_t CI::ImageWithChild::alpha_one(CI::ImageWithChild *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 128))();
}

uint64_t CI::ClampToAlphaImage::output_format(CI::ClampToAlphaImage *this)
{
  int v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::ClampToAlphaImage *, void))(*(void *)this + 48))(this, 0)+ 144);

  return v1();
}

size_t CI::ClampToAlphaImage::print_for_graph_core(CI::ClampToAlphaImage *this, __sFILE *__stream)
{
  return fwrite("clamp_to_alpha", 0xEuLL, 1uLL, __stream);
}

float CI::ClampToAlphaImage::headroom(CI::ClampToAlphaImage *this)
{
  return 1.0;
}

uint64_t non-virtual thunk to'CI::ClampToAlphaImage::type(CI::ClampToAlphaImage *this)
{
  return 8;
}

void non-virtual thunk to'CI::ClampToAlphaImage::~ClampToAlphaImage(CI::ClampToAlphaImage *this)
{
  *(void *)this = &unk_1EE45B2A0;
  atomic_fetch_add(&dword_1EB466E78[6], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::ClampToAlphaImage *)((char *)this - 112));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45B2A0;
  atomic_fetch_add(&dword_1EB466E78[6], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::ClampToAlphaImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

float CI::ColorMatrixImage::headroom(CI::ColorMatrixImage *this)
{
  uint64_t v2 = (*(uint64_t (**)(CI::ColorMatrixImage *, void))(*(void *)this + 48))(this, 0);
  float v3 = (*(float (**)(uint64_t))(*(void *)v2 + 232))(v2);
  if (v3 < 1.0) {
    return 0.0;
  }
  double v5 = v3;
  double v6 = *((double *)this + 15);
  double v7 = *((double *)this + 16);
  double v8 = *((double *)this + 17);
  double v9 = *((double *)this + 18);
  double v10 = *((double *)this + 31);
  double v11 = *((double *)this + 32);
  float v12 = v10 + v9 + v7 * v5 + v6 * v5 + v8 * v5;
  double v13 = *((double *)this + 19);
  double v14 = *((double *)this + 20);
  double v15 = *((double *)this + 21);
  double v16 = *((double *)this + 22);
  float v17 = v11 + v16 + v14 * v5 + v13 * v5 + v15 * v5;
  double v18 = *((double *)this + 23);
  double v19 = *((double *)this + 24);
  double v20 = *((double *)this + 25);
  double v21 = *((double *)this + 26);
  double v22 = *((double *)this + 33);
  *(float *)&double v5 = v22 + v21 + v19 * v5 + v18 * v5 + v20 * v5;
  *(float *)&double v6 = v10 + v9 + v7 * 0.0 + v6 * 0.0 + v8 * 0.0;
  *(float *)&double v7 = v11 + v16 + v14 * 0.0 + v13 * 0.0 + v15 * 0.0;
  float v23 = v22 + v21 + v19 * 0.0 + v18 * 0.0 + v20 * 0.0;
  return fmaxf(fmaxf(fmaxf(*(float *)&v6, *(float *)&v7), v23), fmaxf(fmaxf(fmaxf(v12, v17), *(float *)&v5), 1.0));
}

uint64_t CI::ColorMatrixImage::alpha_one(CI::ColorMatrixImage *this, const double (*a2)[4])
{
  float v3 = (CI::ColorMatrixImage *)((char *)this + 120);
  if (CI::ColorMatrixNode::is_alpha_one((CI::ColorMatrixImage *)((char *)this + 120), a2)) {
    return 1;
  }
  uint64_t result = CI::ColorMatrixNode::is_alpha_preserving(v3, v4);
  if (result)
  {
    double v6 = *(uint64_t (**)(void))(**((void **)this + 13) + 128);
    return v6();
  }
  return result;
}

uint64_t CI::ColorMatrixImage::print_for_graph_core(CI::ColorMatrixImage *this, __sFILE *__stream)
{
  fwrite("color_matrix", 0xCuLL, 1uLL, __stream);
  if (CI::ColorMatrixNode::is_biased((CI::ColorMatrixImage *)((char *)this + 120), v4)) {
    uint64_t v5 = 5;
  }
  else {
    uint64_t v5 = 4;
  }
  double v6 = (double *)((char *)this + 144);
  double v7 = (const char **)off_1E57746F0;
  do
  {
    double v8 = *v7++;
    uint64_t result = fprintf(__stream, " %s=(%g %g %g %g)", v8, *(v6 - 3), *(v6 - 2), *(v6 - 1), *v6);
    v6 += 4;
    --v5;
  }
  while (v5);
  return result;
}

uint64_t CI::ColorMatrixImage::print_for_graphviz(uint64_t a1, FILE *__stream, uint64_t a3, int a4)
{
  fwrite("color_matrix", 0xCuLL, 1uLL, __stream);
  BOOL is_biased = CI::ColorMatrixNode::is_biased((CI::ColorMatrixNode *)(a1 + 120), v7);
  if (a4) {
    uint64_t v9 = 32;
  }
  else {
    uint64_t v9 = 10;
  }
  if (is_biased) {
    uint64_t v10 = 5;
  }
  else {
    uint64_t v10 = 4;
  }
  double v11 = (double *)(a1 + 144);
  float v12 = (const char **)off_1E57746F0;
  do
  {
    double v13 = *v12++;
    uint64_t result = fprintf(__stream, "%c%s=(%g %g %g %g)", v9, v13, *(v11 - 3), *(v11 - 2), *(v11 - 1), *v11);
    v11 += 4;
    --v10;
  }
  while (v10);
  return result;
}

uint64_t CI::ColorMatrixImage::shape_for_graphviz(CI::ColorMatrixImage *this)
{
  return 2;
}

uint64_t CI::ColorMatrixImage::color_for_graphviz(CI::ColorMatrixImage *this)
{
  return 4;
}

uint64_t CI::ImageWithChild::colorspace(CI::ImageWithChild *this)
{
  return 0;
}

uint64_t non-virtual thunk to'CI::ColorMatrixImage::type(CI::ColorMatrixImage *this)
{
  return 5;
}

void non-virtual thunk to'CI::ColorMatrixImage::~ColorMatrixImage(CI::ColorMatrixImage *this)
{
  *(void *)this = &unk_1EE45B138;
  atomic_fetch_add(&dword_1EB466E78[3], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::ColorMatrixImage *)((char *)this - 112));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45B138;
  atomic_fetch_add(&dword_1EB466E78[3], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::ColorMatrixImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)5>::type()
{
  return 5;
}

void *CI::InstanceCounted<(CI::Type)5>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45B138;
  atomic_fetch_add(&dword_1EB466E78[3], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)5>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B138;
  atomic_fetch_add(&dword_1EB466E78[3], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

CI::ColorMatchImage *CI::ColorMatchImage::ColorMatchImage(CI::ColorMatchImage *this, CI::Image *a2, CGColorSpace *a3, float a4)
{
  double v8 = CI::ImageWithChild::ImageWithChild(this, a2);
  *((void *)v8 + 14) = &unk_1EE45AFD0;
  atomic_fetch_add(&dword_1EB466E78[2], 1u);
  *(void *)double v8 = &unk_1EE45A690;
  *((void *)v8 + 14) = &unk_1EE45A7E8;
  *((unsigned char *)v8 + 138) = 0;
  *((_DWORD *)v8 + 35) = 0;
  CGColorSpaceRef v9 = CGColorSpaceRetain(a3);
  *((_WORD *)this + 68) = 256;
  *((void *)this + 15) = v9;
  *((void *)this + 16) = 0;
  BOOL v10 = a4 != 0.0 && CGColorSpaceIsHDR(a3);
  *((unsigned char *)this + 138) = v10;
  *((float *)this + 35) = a4;
  *((void *)this + 10) = CI::ColorMatchImage::makeDigest(*((void *)a2 + 10), a3, 0, a4);
  *((void *)this + 11) = CI::ColorMatchImage::makeDigest(*((void *)a2 + 11), a3, 0, *((float *)this + 35));
  return this;
}

void non-virtual thunk to'CI::ColorMatchImage::~ColorMatchImage(CI::ColorMatchImage *this)
{
}

{
  uint64_t vars8;

  CI::ColorMatchImage::~ColorMatchImage((CI::ColorMatchImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

float CI::ColorMatchImage::headroom(CI::ColorMatchImage *this)
{
  if (*((unsigned char *)this + 138)) {
    return *((float *)this + 35);
  }
  float v2 = (*(float (**)(void))(**((void **)this + 13) + 232))(*((void *)this + 13));
  if (v2 <= 1.0)
  {
    float v3 = (CGColorSpace *)*((void *)this + 15);
    if (v3) {
      BOOL v4 = !CGColorSpaceIsPQBased(v3) && !CGColorSpaceIsHLGBased(*((CGColorSpaceRef *)this + 15));
    }
    else {
      BOOL v4 = 1;
    }
    uint64_t v5 = (CGColorSpace *)*((void *)this + 16);
    if (v5) {
      BOOL v6 = !CGColorSpaceIsPQBased(v5) && !CGColorSpaceIsHLGBased(*((CGColorSpaceRef *)this + 16));
    }
    else {
      BOOL v6 = 1;
    }
    if (*((unsigned char *)this + 137)) {
      int v7 = v4;
    }
    else {
      int v7 = 1;
    }
    if (v7 == 1)
    {
      if (!*((unsigned char *)this + 136)) {
        BOOL v6 = 1;
      }
      if (!v6) {
        return 4.9261;
      }
    }
    else
    {
      return 4.9261;
    }
  }
  return v2;
}

uint64_t CI::ColorMatchImage::print_for_graph_core(__sFILE **this, __sFILE *__stream)
{
  fwrite("colormatch", 0xAuLL, 1uLL, __stream);
  fputc(32, __stream);
  if (*((unsigned char *)this + 136)) {
    fwrite("workingspace", 0xCuLL, 1uLL, __stream);
  }
  else {
    CI::fprintf_cs(__stream, this[15], (CGColorSpace *)1);
  }
  if (*((unsigned char *)this + 138))
  {
    uint64_t result = fwrite("_tonemapped", 0xBuLL, 1uLL, __stream);
    float v5 = *((float *)this + 35);
    if (v5 == 1.0)
    {
      BOOL v6 = "_to_sdr";
      size_t v7 = 7;
LABEL_9:
      return fwrite(v6, v7, 1uLL, __stream);
    }
    if (v5 >= 1.0) {
      return fprintf(__stream, "_to%.2f", v5);
    }
  }
  else
  {
    fwrite("_to_", 4uLL, 1uLL, __stream);
    if (*((unsigned char *)this + 137))
    {
      BOOL v6 = "workingspace";
      size_t v7 = 12;
      goto LABEL_9;
    }
    double v8 = this[16];
    return CI::fprintf_cs(__stream, v8, (CGColorSpace *)1);
  }
  return result;
}

uint64_t CI::ColorMatchImage::print_for_graphviz(uint64_t a1, FILE *a2, uint64_t a3, int a4)
{
  uint64_t v6 = 10;
  if (a4) {
    uint64_t v6 = 32;
  }
  fprintf(a2, "colormatch%c", v6);
  if (*(unsigned char *)(a1 + 136)) {
    fwrite("workingspace", 0xCuLL, 1uLL, a2);
  }
  else {
    CI::fprintf_cs(a2, *(__sFILE **)(a1 + 120), 0);
  }
  if (*(unsigned char *)(a1 + 138))
  {
    uint64_t result = fwrite("_tonemapped", 0xBuLL, 1uLL, a2);
    float v8 = *(float *)(a1 + 140);
    if (v8 == 1.0)
    {
      CGColorSpaceRef v9 = "_to_sdr";
      size_t v10 = 7;
LABEL_11:
      return fwrite(v9, v10, 1uLL, a2);
    }
    if (v8 >= 1.0) {
      return fprintf(a2, "_to%.2f", v8);
    }
  }
  else
  {
    fwrite("_to_", 4uLL, 1uLL, a2);
    if (*(unsigned char *)(a1 + 137))
    {
      CGColorSpaceRef v9 = "workingspace";
      size_t v10 = 12;
      goto LABEL_11;
    }
    double v11 = *(__sFILE **)(a1 + 128);
    return CI::fprintf_cs(a2, v11, 0);
  }
  return result;
}

float CI::TagColorSpaceImage::headroom(CI::TagColorSpaceImage *this)
{
  float v2 = (*(float (**)(void))(**((void **)this + 13) + 232))(*((void *)this + 13));
  if (v2 > 1.0) {
    return v2;
  }
  float v3 = (CGColorSpace *)*((void *)this + 15);
  if (!v3) {
    return v2;
  }
  float v4 = 4.9261;
  if (!CGColorSpaceIsPQBased(v3) && !CGColorSpaceIsHLGBased(*((CGColorSpaceRef *)this + 15))) {
    return v2;
  }
  return v4;
}

void CI::TagColorSpaceImage::~TagColorSpaceImage(CI::TagColorSpaceImage *this)
{
  CI::TagColorSpaceImage::~TagColorSpaceImage(this);

  JUMPOUT(0x1997023B0);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45CF70;
  *((void *)this + 14) = &unk_1EE45D0C8;
  CGColorSpaceRelease(*((CGColorSpaceRef *)this + 15));
  *((void *)this + 14) = &unk_1EE45AC10;
  *((void *)this + 15) = 0;
  atomic_fetch_add(&dword_1EB466E78[22], 0xFFFFFFFF);

  CI::ImageWithChild::~ImageWithChild(this);
}

uint64_t CI::TagColorSpaceImage::type(CI::TagColorSpaceImage *this)
{
  return 24;
}

uint64_t CI::TagColorSpaceImage::shape_for_graphviz(CI::TagColorSpaceImage *this)
{
  return 2;
}

uint64_t CI::TagColorSpaceImage::color_for_graphviz(CI::TagColorSpaceImage *this)
{
  return 4;
}

void CI::TagColorSpaceImage::add_args_to_hash(uint64_t a1, CI::XXHashHelper *this)
{
}

uint64_t CI::TagColorSpaceImage::print_for_graph_core(CI::TagColorSpaceImage *this, __sFILE *__stream)
{
  fwrite("tagcolorspace ", 0xEuLL, 1uLL, __stream);
  float v4 = (__sFILE *)*((void *)this + 15);

  return CI::fprintf_cs(__stream, v4, (CGColorSpace *)1);
}

uint64_t CI::TagColorSpaceImage::print_for_graphviz(uint64_t a1, FILE *a2, uint64_t a3, int a4)
{
  uint64_t v6 = 10;
  if (a4) {
    uint64_t v6 = 32;
  }
  fprintf(a2, "tagcolorspace%c", v6);
  size_t v7 = *(__sFILE **)(a1 + 120);

  return CI::fprintf_cs(a2, v7, (CGColorSpace *)1);
}

uint64_t CI::TagColorSpaceImage::colorspace(CI::TagColorSpaceImage *this)
{
  return *((void *)this + 15);
}

uint64_t CI::TagColorSpaceImage::baseColorspace(CI::TagColorSpaceImage *this)
{
  return *((void *)this + 15);
}

uint64_t CI::TagColorSpaceImage::render_graph_core(int a1, int a2, CI::Object *this)
{
  if (this) {
    return CI::Object::ref((uint64_t)this);
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'CI::TagColorSpaceImage::type(CI::TagColorSpaceImage *this)
{
  return 24;
}

void non-virtual thunk to'CI::TagColorSpaceImage::~TagColorSpaceImage(CI::TagColorSpaceImage *this)
{
}

{
  uint64_t vars8;

  CI::TagColorSpaceImage::~TagColorSpaceImage((CI::TagColorSpaceImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::ColorMatchImage::shape_for_graphviz(CI::ColorMatchImage *this)
{
  return 2;
}

uint64_t CI::ColorMatchImage::color_for_graphviz(CI::ColorMatchImage *this)
{
  return 4;
}

uint64_t CI::ColorMatchImage::baseColorspace(CI::ColorMatchImage *this)
{
  if (*((unsigned char *)this + 138)) {
    return 0;
  }
  else {
    return (*(uint64_t (**)(void))(*(void *)this + 240))();
  }
}

uint64_t non-virtual thunk to'CI::ColorMatchImage::type(CI::ColorMatchImage *this)
{
  return 4;
}

uint64_t ___ZN2CIL19AppendColorSpaceSrcEPNS_7ContextEPNS_4NodeENS_10ImageIndexEP12CGColorSpacebfb_block_invoke(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 40))(a2) == 1
    && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 248))(a2, 3) & 1) != 0)
  {
    return 0;
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 400))(a2);
  return 1;
}

CI::Object *CI::CurveNode::append_to_tree_and_unref(CI::CurveNode *this, CI::Node *a2, double a3)
{
  float v4 = CI::CurveNode::append_to_tree(this, a2, a3, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0);
  if (this) {
    CI::Object::unref(this);
  }
  return v4;
}

CI::PremultiplyNode *CI::AppendConverterArray(int a1, CI::PremultiplyNode *a2, int a3, CFArrayRef theArray, int a5, CI::Node *a6)
{
  CFArrayRef v7 = theArray;
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  if (CFArrayGetCount(theArray) && CFArrayGetCount(v7) >= 1)
  {
    CFIndex v9 = 0;
    unsigned int v60 = a6;
    CFArrayRef v62 = v7;
    do
    {
      ValueAtIndedouble x = CFArrayGetValueAtIndex(v7, v9);
      char Properties = CGColorFunctionGetProperties();
      CFTypeID v12 = CFGetTypeID(ValueAtIndex);
      if (v12 == CGColorTRCGetTypeID())
      {
        memset(v63, 0, 36);
        CGColorTRCGetFunction();
        int v13 = v63[0];
        uint64_t v14 = *(void *)((char *)v63 + 4);
        float v15 = *((float *)v63 + 3);
        long long v16 = v63[1];
        int v17 = CGColorTRCGetGammaID();
        double v18 = CI::PremultiplyNode::append_to_tree(a2, (CI::Node *)0xFFFFFFFFLL, (int)a6);
        if (a2) {
          CI::Object::unref(a2);
        }
        switch(v13)
        {
          case -1:
            double v19 = CI::CurveNode::append_to_tree(v18, a6, *(float *)&v14, *((float *)&v14 + 1), v15, *(float *)&v16, *((float *)&v16 + 1), *((float *)&v16 + 2), 0.0);
            if (v18) {
              CI::Object::unref(v18);
            }
            double v20 = *((float *)&v16 + 3);
            double v21 = v19;
            goto LABEL_31;
          case 0:
            double v20 = *(float *)&v14;
            double v21 = v18;
LABEL_31:
            uint64_t v32 = CI::CurveNode::append_to_tree_and_unref(v21, a6, v20);
            goto LABEL_45;
          case 1:
            uint64_t v32 = CI::CurveNode::append_to_tree_and_unref(v18, a6, *(float *)&v14, *((float *)&v14 + 1), v15);
            goto LABEL_45;
          case 2:
            uint64_t v32 = CI::CurveNode::append_to_tree_and_unref(v18, a6, *(float *)&v14, *((float *)&v14 + 1), v15, *(float *)&v16);
            goto LABEL_45;
          case 3:
            if (v17 == 1
              || (double v44 = *((float *)&v14 + 1),
                  double v45 = v15,
                  double v46 = *(float *)&v16,
                  double v47 = *((float *)&v16 + 1),
                  fabs(*(float *)&v14 + -2.4) < 0.00001)
              && fabs(v44 + -0.947867) < 0.00001
              && fabs(v45 + -0.0521327) < 0.00001
              && fabs(v46 + -0.0773994) < 0.00001
              && fabs(v47 + -0.04045) < 0.00001)
            {
              double v33 = v18;
              uint64_t v34 = 0xFFFFFFFFLL;
              goto LABEL_38;
            }
            uint64_t v32 = CI::CurveNode::append_to_tree_and_unref(v18, a6, *(float *)&v14, v44, v45, v46, v47);
LABEL_45:
            double v18 = v32;
LABEL_46:
            if ((Properties & 2) != 0) {
              goto LABEL_47;
            }
            goto LABEL_91;
          case 4:
            if (v17 == 4
              || (double v48 = *((float *)&v14 + 1),
                  double v49 = v15,
                  double v50 = *(float *)&v16,
                  double v51 = *((float *)&v16 + 1),
                  double v52 = *((float *)&v16 + 2),
                  double v53 = *((float *)&v16 + 3),
                  fabs(*(float *)&v14 + -0.4166667) < 0.00001)
              && fabs(v48 + -1.137119) < 0.00001
              && fabs(v49) < 0.00001
              && fabs(v50 + -12.92) < 0.00001
              && fabs(v51 + -0.0031308) < 0.00001
              && fabs(v52 + 0.055) < 0.00001
              && fabs(v53) < 0.00001)
            {
              double v33 = v18;
              uint64_t v34 = 1;
LABEL_38:
              double v35 = CI::SRGBNode::append_to_tree(v33, (CI::Node *)v34, (int)a6);
            }
            else
            {
              double v35 = CI::CurveNode::append_to_tree(v18, a6, *(float *)&v14, v48, v49, v50, v51, v52, v53);
            }
            unsigned int v54 = v35;
            if (v18) {
              CI::Object::unref(v18);
            }
            double v18 = v54;
            if ((Properties & 2) == 0) {
              goto LABEL_91;
            }
LABEL_47:
            if (a5
              && (CGColorFunctionGetOutputRange(), fabsf(v36) < 1.0e-10)
              && (CGColorFunctionGetOutputRange(), fabs(v37 + -1.0) < 1.0e-10))
            {
              double v38 = CI::ClampToZeroToOneNode::append_to_tree(v18, a6);
              if (v18) {
                CI::Object::unref(v18);
              }
            }
            else
            {
LABEL_91:
              double v38 = v18;
            }
            double v18 = CI::PremultiplyNode::append_to_tree(v38, (CI::Node *)1, (int)a6);
            if (v38) {
              CI::Object::unref(v38);
            }
LABEL_94:
            a2 = v18;
            CFArrayRef v7 = v62;
            break;
          case 5:
            if (*(void *)((char *)v63 + 4) >= 2uLL)
            {
              CI::calc_hash(*(CI **)((char *)v63 + 12), 4 * *(void *)((char *)v63 + 4));
              operator new();
            }
            goto LABEL_94;
          case 6:
            operator new();
          case 7:
            operator new();
          case 8:
            operator new();
          case 9:
            operator new();
          case 10:
            goto LABEL_46;
          default:
            double v31 = ci_logger_render();
            if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
              goto LABEL_46;
            }
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v13;
            _os_log_error_impl(&dword_193671000, v31, OS_LOG_TYPE_ERROR, "Could not support CGColorTRCType type: %d", buf, 8u);
            if ((Properties & 2) == 0) {
              goto LABEL_91;
            }
            goto LABEL_47;
        }
      }
      else
      {
        CFTypeID v22 = CFGetTypeID(ValueAtIndex);
        if (v22 == CGColorMatrixGetTypeID())
        {
          long long v73 = 0u;
          long long v74 = 0u;
          *(_OWORD *)buf = 0u;
          CGColorMatrixGetMatrix();
          uint64_t v23 = 0;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v67 = 0u;
          uint64_t v68 = 0;
          float64x2_t v65 = 0u;
          float64x2_t v66 = 0u;
          float64x2_t v64 = 0u;
          memset(v63, 0, sizeof(v63));
          uint64_t v69 = 0x3FF0000000000000;
          do
          {
            float32x4_t v24 = *(float32x4_t *)&buf[16 * v23];
            float v25 = (float64x2_t *)&v63[2 * v23];
            *float v25 = vcvtq_f64_f32(*(float32x2_t *)v24.f32);
            v25[1] = vcvt_hight_f64_f32(v24);
            ++v23;
          }
          while (v23 != 3);
          if ((vmaxv_u8((uint8x8_t)vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64((float64x2_t)v63[2]), (int32x4_t)vceqzq_f64(v64)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v65), (int32x4_t)vceqzq_f64(v66)))))) & 1) == 0)
          {
            uint64_t v26 = 2;
            for (uint64_t i = 1; i != 3; ++i)
            {
              for (uint64_t j = 0; j != 2; ++j)
                v63[v26 + j] = v63[j];
              v26 += 2;
            }
          }
          uint64_t v29 = CI::ColorMatrixNode::append_to_tree(a2, (CI::Node *)v63, (const double (*)[4])a6);
          if (a2) {
            CI::Object::unref(a2);
          }
          a2 = v29;
        }
        else
        {
          CFTypeID v30 = CFGetTypeID(ValueAtIndex);
          if (v30 == CGColorNxMTransformGetTypeID())
          {
            memset(v63, 0, 36);
            CGColorNxMTransformGetTransform();
            switch(LODWORD(v63[0]))
            {
              case 7:
                CI::PremultiplyNode::append_to_tree(a2, (CI::Node *)0xFFFFFFFFLL, (int)a6);
                if (a2) {
                  CI::Object::unref(a2);
                }
                operator new();
              case 8:
                CI::PremultiplyNode::append_to_tree(a2, (CI::Node *)0xFFFFFFFFLL, (int)a6);
                if (a2) {
                  CI::Object::unref(a2);
                }
                operator new();
              case 9:
                CI::PremultiplyNode::append_to_tree(a2, (CI::Node *)0xFFFFFFFFLL, (int)a6);
                if (a2) {
                  CI::Object::unref(a2);
                }
                operator new();
              case 0xB:
                CI::PremultiplyNode::append_to_tree(a2, (CI::Node *)0xFFFFFFFFLL, (int)a6);
                if (a2) {
                  CI::Object::unref(a2);
                }
                operator new();
              default:
                if ((v63[0] & 0xFFFFFFFB) == 1)
                {
                  if (HIDWORD(v63[0]) == 1) {
                    size_t v39 = 2;
                  }
                  else {
                    size_t v39 = 8;
                  }
                  if (SDWORD1(v63[0]) >= 1)
                  {
                    int v40 = DWORD1(v63[0]);
                    do
                    {
                      v39 *= SDWORD1(v63[1]);
                      --v40;
                    }
                    while (v40);
                  }
                  if (DWORD1(v63[1]))
                  {
                    uint64_t v41 = *(CI **)((char *)&v63[1] + 12);
                    if (DWORD1(v63[1]) == 2 && DWORD1(v63[0]) == 3 && HIDWORD(v63[0]) == 3)
                    {
                      int v42 = *(CI **)((char *)&v63[1] + 12);
                      int v43 = memcmp(*(const void **)((char *)&v63[1] + 12), &unk_193959ADC, 0x40uLL);
                      uint64_t v41 = v42;
                      if (v43) {
                        goto LABEL_118;
                      }
                    }
                    else
                    {
                      BOOL v56 = DWORD1(v63[1]) == 2 && DWORD1(v63[0]) == 1;
                      int v57 = v56;
                      if (v56 && HIDWORD(v63[0]) == 3)
                      {
                        if (**(void **)((char *)&v63[1] + 12) != 0x3C00000000000000
                          || *(void *)(*(void *)((char *)&v63[1] + 12) + 8) != 0x3C003C003C003C00)
                        {
                          goto LABEL_118;
                        }
                      }
                      else
                      {
                        if (HIDWORD(v63[0]) != 1) {
                          int v57 = 0;
                        }
                        if (v57 != 1 || **(_DWORD **)((char *)&v63[1] + 12) != 1006632960)
                        {
LABEL_118:
                          CI::calc_hash(v41, v39);
                          CI::PremultiplyNode::append_to_tree(a2, (CI::Node *)0xFFFFFFFFLL, v60);
                          if (a2) {
                            CI::Object::unref(a2);
                          }
                          operator new();
                        }
                      }
                    }
                  }
                  a6 = (CI::Node *)v60;
                }
                else
                {
                  unsigned int v55 = ci_logger_render();
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 67109120;
                    *(_DWORD *)&uint8_t buf[4] = v63[0];
                    _os_log_error_impl(&dword_193671000, v55, OS_LOG_TYPE_ERROR, "Could not support CGColorNxMTransform format %d.", buf, 8u);
                  }
                }
                break;
            }
          }
        }
      }
      ++v9;
    }
    while (v9 < CFArrayGetCount(v7));
  }
  return a2;
}

uint64_t ___ZN2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPS0_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

__CFArray *CI::createConverterArray(CI *this, CGColorSpace *a2, CGColorSpace *a3, float a4, float a5)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  CGColorSpaceGetNumberOfComponents(a2);
  CGColorSpaceGetNumberOfComponents(this);
  uint64_t v10 = 0;
  size_t v27 = (__CFDictionary *)*MEMORY[0x1E4F1DD00];
  unsigned int v28 = (__CFDictionary *)*MEMORY[0x1E4F1DB48];
  do
  {
    CFArrayRemoveAllValues(Mutable);
    v29[0] = 0;
    v29[1] = v29;
    v29[2] = 0x2000000000;
    char v30 = 0;
    double v11 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    int v13 = v11;
    if (v11) {
      CFDictionarySetValue(v11, @"Client", @"CoreImage");
    }
    if (a4 == 0.0)
    {
      float v17 = 203.0;
    }
    else
    {
      __CFDictionary::setValue(v13, (__CFDictionary *)@"kCGHLGInvOETFOpticalScale", v12, a4);
      __CFDictionary::setValue(v13, (__CFDictionary *)@"kCGHLGOETFOpticalScale", v14, 1.0 / a4);
      __CFDictionary::setValue(v13, (__CFDictionary *)@"kCGHLGSkipOOTF", (const __CFString *)1, v15);
      __CFDictionary::setValue(v13, (__CFDictionary *)@"kCGHLGSkipInvOOTF", (const __CFString *)1, v16);
      float v17 = 100.0;
    }
    __CFDictionary::setValue(v13, (__CFDictionary *)@"kCGHDRMediaReferenceWhite", v12, v17);
    if (this)
    {
      int v19 = CGColorSpaceContainsFlexGTCInfo();
      if (a5 >= 1.0)
      {
        if (v19)
        {
          __CFDictionary::setValue(v13, v28, (const __CFString *)1, v18);
          __CFDictionary::setValue(v13, v27, v20, a5);
        }
      }
    }
    __CFDictionary::setValue(v13, (__CFDictionary *)@"kCGPQEETF3DLut", 0, v18);
    __CFDictionary::setValue(v13, (__CFDictionary *)@"kCGHLGSceneMapping3DLut", 0, v21);
    int v22 = CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacksAndOptions();
    CFRelease(v13);
    if (v10 == 2 && (v22 & 1) == 0)
    {
      CI::snprintf_cs((CI *)v36, (char *)0x100, this, 0);
      CI::snprintf_cs((CI *)v35, (char *)0x100, a2, 0);
      uint64_t v23 = ci_logger_render();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        uint64_t v32 = v36;
        __int16 v33 = 2082;
        uint64_t v34 = v35;
        _os_log_error_impl(&dword_193671000, v23, OS_LOG_TYPE_ERROR, "Failed to create a ColorSync converter: from %{public}s to %{public}s", buf, 0x16u);
      }
    }
    _Block_object_dispose(v29, 8);
    if (v10++ == 2) {
      int v25 = 1;
    }
    else {
      int v25 = v22;
    }
  }
  while (v25 != 1);
  return Mutable;
}

const char *___ZN2CIL15CI_EXTENDED_PCSEv_block_invoke()
{
  uint64_t result = getenv("CI_EXTENDED_PCS");
  if (result)
  {
    uint64_t result = (const char *)atoi(result);
    BOOL v1 = result == 0;
  }
  else
  {
    BOOL v1 = CI::CI_EXTENDED_PCS(void)::v == 0;
  }
  char v2 = !v1;
  CI::CI_EXTENDED_PCS(void)::v = v2;
  return result;
}

void __CFDictionary::setValue(__CFDictionary *this, __CFDictionary *a2, const __CFString *a3, float a4)
{
  float valuePtr = a4;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  __CFDictionary::setValue(this, a2, v6, v7);
  if (v6) {
    CFRelease(v6);
  }
}

BOOL ___ZN2CIL20createConverterArrayEP12CGColorSpaceS1_ff_block_invoke(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  if (*(uint64_t *)(a2 + 28) >= 1)
  {
    uint64_t v3 = 0;
    do
    {
      CGColorTRCGetFunction();
      ++v3;
    }
    while (*(void *)(a2 + 28) > v3);
  }
  if (*(uint64_t *)(a2 + 44) < 1)
  {
    unsigned int v5 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    unsigned int v5 = 0;
    do
    {
      CGColorNxMTransformGetTransform();
      ++v5;
      ++v4;
    }
    while (*(void *)(a2 + 44) > v4);
  }
  return v5 < 2 && v5 < 3;
}

uint64_t ___ZN2CIL20createConverterArrayEP12CGColorSpaceS1_ff_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6 = *a5;
  if (a4 < 2)
  {
LABEL_5:
    uint64_t v10 = *(const void **)(*(void *)(a2 + 52) + 8 * v6);
    CGColorTRCGetFunction();
    CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), v10);
    return 1;
  }
  else
  {
    uint64_t v7 = a4 - 1;
    float v8 = a5 + 1;
    while (1)
    {
      uint64_t v9 = *v8++;
      if (v9 != v6) {
        return 0;
      }
      if (!--v7) {
        goto LABEL_5;
      }
    }
  }
}

uint64_t ___ZN2CIL20createConverterArrayEP12CGColorSpaceS1_ff_block_invoke_3(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return 1;
}

uint64_t ___ZN2CIL20createConverterArrayEP12CGColorSpaceS1_ff_block_invoke_4()
{
  return 0;
}

CI::Object *CI::CurveNode::append_to_tree_and_unref(CI::CurveNode *this, CI::Node *a2, double a3, double a4, double a5)
{
  if (a5 == 0.0) {
    double v6 = 0.0;
  }
  else {
    double v6 = -a5 / a4;
  }
  uint64_t v7 = CI::CurveNode::append_to_tree(this, a2, a3, a4, a5, 0.0, v6, 0.0, 0.0);
  if (this) {
    CI::Object::unref(this);
  }
  return v7;
}

CI::Object *CI::CurveNode::append_to_tree_and_unref(CI::CurveNode *this, CI::Node *a2, double a3, double a4, double a5, double a6)
{
  if (a5 == 0.0) {
    double v7 = 0.0;
  }
  else {
    double v7 = -a5 / a4;
  }
  float v8 = CI::CurveNode::append_to_tree(this, a2, a3, a4, a5, 0.0, v7, a6, a6);
  if (this) {
    CI::Object::unref(this);
  }
  return v8;
}

CI::Object *CI::CurveNode::append_to_tree_and_unref(CI::CurveNode *this, CI::Node *a2, double a3, double a4, double a5, double a6, double a7)
{
  float v8 = CI::CurveNode::append_to_tree(this, a2, a3, a4, a5, a6, a7, 0.0, 0.0);
  if (this) {
    CI::Object::unref(this);
  }
  return v8;
}

unint64_t CI::calc_hash(CI *this, size_t a2)
{
  XXH64_reset(v5, 0);
  if (this && a2) {
    XXH64_update((uint64_t)v5, (char *)this, a2);
  }
  return XXH64_digest((uint64_t)v5);
}

__int16 ___ZN2CIL20AppendConverterArrayEPNS_7ContextEPNS_4NodeENS_10ImageIndexEPK9__CFArrayNS_18ConverterDirectionEbb_block_invoke@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>)
{
  if (a4)
  {
    uint64_t v7 = 0;
    int64x2_t v11 = vdupq_n_s64(1uLL);
    do
    {
      int v15 = *(_DWORD *)(*(void *)(a1 + 32) + 4 * *(void *)(a1 + 40) * v7);
      __int16 v14 = 0;
      dest.size_t rowBytes = 2;
      src.data = &v15;
      *(int64x2_t *)&src.double height = v11;
      src.size_t rowBytes = 4;
      dest.data = &v14;
      *(int64x2_t *)&dest.double height = v11;
      vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
      v8.i16[1] = 15360;
      v8.i32[1] = 1006648320;
      v8.i16[0] = v14;
      int16x4_t v9 = vzip1_s16(v8, v8);
      v9.i16[2] = v14;
      *(int16x4_t *)(a2 + 8 * v7++) = v9;
    }
    while (a4 != v7);
  }
  return v8.i16[0];
}

__int16 ___ZN2CIL20AppendConverterArrayEPNS_7ContextEPNS_4NodeENS_10ImageIndexEPK9__CFArrayNS_18ConverterDirectionEbb_block_invoke_102@<H0>(uint64_t a1@<X0>, int16x4_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>)
{
  if (a4)
  {
    uint64_t v4 = (int *)(*(void *)(a1 + 32) + 36);
    do
    {
      int v5 = *v4++;
      _S0 = v5;
      __asm { FCVT            H0, S0 }
      v12.i16[1] = 15360;
      v12.i32[1] = 1006648320;
      v12.i16[0] = result;
      int16x4_t v13 = vzip1_s16(v12, v12);
      v13.i16[2] = result;
      *a2++ = v13;
      --a4;
    }
    while (a4);
  }
  return result;
}

uint64_t ___ZN2CIL20AppendConverterArrayEPNS_7ContextEPNS_4NodeENS_10ImageIndexEPK9__CFArrayNS_18ConverterDirectionEbb_block_invoke_109(uint64_t result, int16x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *(__int16 **)(result + 32);
    uint64_t v8 = *(void *)(result + 40);
    int v9 = *(_DWORD *)(result + 48);
    do
    {
      if (v9 == 3)
      {
        if (v8)
        {
          for (uint64_t i = 0; i != v8; ++i)
            a2->i16[i] = v7[i];
        }
      }
      else
      {
        int64x2_t v11 = a2;
        int16x4_t v12 = v7;
        for (uint64_t j = a4; j; --j)
        {
          v14.i16[1] = 15360;
          v14.i32[1] = 1006648320;
          v14.i16[0] = *v12++;
          int16x4_t v15 = vzip1_s16(v14, v14);
          v15.i16[2] = v14.i16[0];
          *v11++ = v15;
        }
      }
      ++v6;
      v7 += v8;
      a2 = (int16x4_t *)((char *)a2 + a6);
    }
    while (v6 != a5);
  }
  return result;
}

void CI::CachedSurfaceNode::~CachedSurfaceNode(CI::CachedSurfaceNode *this)
{
  CI::SurfaceNode::~SurfaceNode(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::Node::print(CI::Node *this, __sFILE *a2)
{
  memset(v3, 0, sizeof(v3));
  int v4 = 1065353216;
  CI::Node::print_graph((uint64_t)this, a2, (uint64_t)v3);
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v3);
}

uint64_t CI::SurfaceNode::child(CI::SurfaceNode *this)
{
  return 0;
}

uint64_t CI::SurfaceNode::shape_for_graphviz(CI::SurfaceNode *this)
{
  return 0;
}

uint64_t CI::SurfaceNode::color_for_graphviz(CI::SurfaceNode *this)
{
  return 12;
}

uint64_t CI::Node::node_for_graphviz(uint64_t a1, uint64_t a2)
{
  memset(v3, 0, 57);
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *))(*(void *)a1 + 144))(a1, a2, v3);
}

uint64_t CI::SurfaceNode::imageIndex(CI::SurfaceNode *this)
{
  return *((unsigned int *)this + 27);
}

const char *CI::Node::short_name(CI::Node *this)
{
  unsigned int v1 = (*(uint64_t (**)(CI::Node *))(*(void *)this + 16))(this);

  return CI::name_for_type(v1);
}

uint64_t CI::Node::print_for_graph_short(CI::Node *this, __sFILE *a2)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(CI::Node *))(*(void *)this + 104))(this);

  return fputs(v3, a2);
}

uint64_t CI::Node::print_for_graphviz(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 120))(a1, a2, a3, 0);
}

uint64_t CI::Node::setMultiUse(uint64_t this)
{
  *(unsigned char *)(this + 32) = 1;
  return this;
}

uint64_t CI::SurfaceNode::child_type_is_image(CI::SurfaceNode *this)
{
  return 0;
}

uint64_t CI::Node::is_position_invariant(CI::Node *this)
{
  return (*(unsigned int (**)(CI::Node *))(*(void *)this + 232))(this) ^ 1;
}

uint64_t CI::SurfaceNode::may_be_extended_range(CI::SurfaceNode *this)
{
  return *((unsigned __int8 *)this + 105);
}

uint64_t CI::SurfaceNode::output_is_rg(CI **this, __IOSurface *a2)
{
  int v2 = CI::format_from_IOSurface(this[7], a2);

  return CI::format_is_rg(v2);
}

uint64_t CI::SurfaceNode::output_is_r(CI **this, __IOSurface *a2)
{
  int v2 = CI::format_from_IOSurface(this[7], a2);

  return CI::format_is_r(v2);
}

uint64_t CI::Node::is_color_general(CI::Node *this)
{
  return 0;
}

uint64_t CI::Node::output_format(CI::Node *this)
{
  return 0;
}

uint64_t CI::SurfaceNode::alpha_mode(CI::SurfaceNode *this)
{
  return *((unsigned int *)this + 24);
}

uint64_t non-virtual thunk to'CI::SurfaceNode::type(CI::SurfaceNode *this)
{
  return 46;
}

void non-virtual thunk to'CI::CachedSurfaceNode::~CachedSurfaceNode(CI::CachedSurfaceNode *this)
{
}

{
  uint64_t vars8;

  CI::SurfaceNode::~SurfaceNode((CI::CachedSurfaceNode *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::Node::print_graph(uint64_t a1, FILE *a2, uint64_t a3)
{
  v30[128] = *MEMORY[0x1E4F143B8];
  if (CI::print_graph_recursive<CI::Node,CI::NodeIndex,CI::Node::NodeStats>(__sFILE *,CI::Node const*,int,std::unordered_map<CI::NodeIndex,CI::Node::NodeStats> const&)::onceToken == -1)
  {
    if (a1)
    {
LABEL_3:
      uint64_t v17 = 0;
      double v18 = &v17;
      uint64_t v19 = 0x5002000000;
      CFStringRef v20 = __Block_byref_object_copy__23;
      double v21 = __Block_byref_object_dispose__23;
      memset(v22, 0, sizeof(v22));
      int v23 = 1065353216;
      uint64_t v10 = 0;
      int64x2_t v11 = (float *)&v10;
      uint64_t v12 = 0x5002000000;
      int16x4_t v13 = __Block_byref_object_copy__116;
      int16x4_t v14 = __Block_byref_object_dispose__117;
      memset(v15, 0, sizeof(v15));
      int v16 = 1065353216;
      std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__rehash<true>((uint64_t)v22, 0x80uLL);
      std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__rehash<true>((uint64_t)(v11 + 10), vcvtps_u32_f32(128.0 / v11[18]));
      v9[0] = MEMORY[0x1E4F143A8];
      v9[1] = 0x40000000;
      v9[2] = ___ZN2CIL21print_graph_recursiveINS_4NodeENS_9NodeIndexENS1_9NodeStatsEEEvP7__sFILEPKT_iRKNSt3__113unordered_mapIT0_T1_NS9_4hashISB_EENS9_8equal_toISB_EENS9_9allocatorINS9_4pairIKSB_SC_EEEEEE_block_invoke_118;
      v9[3] = &unk_1E5774870;
      void v9[4] = &v17;
      v9[5] = &v10;
      uint64_t v25 = MEMORY[0x1E4F143A8];
      uint64_t v26 = 0x40000000;
      uint64_t v27 = (uint64_t)___ZNK2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPKS0_S2_iiE_block_invoke;
      unsigned int v28 = (void *(*)(uint64_t, uint64_t))&unk_1E57748C0;
      uint64_t v29 = (uint64_t (*)())v9;
      CI::GraphObject::traverse_preorder_stoppable(a1, 0, 0, 0, (uint64_t)&v25);
      std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::clear(v18 + 5);
      uint64_t v25 = 0;
      uint64_t v26 = (uint64_t)&v25;
      uint64_t v27 = 0x42802000000;
      unsigned int v28 = __Block_byref_object_copy__121;
      uint64_t v29 = __Block_byref_object_dispose__122;
      bzero(v30, 0x400uLL);
      v7[0] = MEMORY[0x1E4F143A8];
      v7[1] = 0x40000000;
      void v7[2] = ___ZN2CIL21print_graph_recursiveINS_4NodeENS_9NodeIndexENS1_9NodeStatsEEEvP7__sFILEPKT_iRKNSt3__113unordered_mapIT0_T1_NS9_4hashISB_EENS9_8equal_toISB_EENS9_9allocatorINS9_4pairIKSB_SC_EEEEEE_block_invoke_123;
      v7[3] = &unk_1E5774898;
      int v8 = 1;
      _OWORD v7[4] = &v25;
      void v7[5] = &v17;
      v7[6] = &v10;
      v7[7] = a2;
      v7[8] = a3;
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 0x40000000;
      v24[2] = ___ZNK2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPKS0_S2_iiE_block_invoke;
      v24[3] = &unk_1E57748C0;
      v24[4] = v7;
      CI::GraphObject::traverse_preorder_stoppable(a1, 0, 0, 0, (uint64_t)v24);
      _Block_object_dispose(&v25, 8);
      _Block_object_dispose(&v10, 8);
      std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v15);
      _Block_object_dispose(&v17, 8);
      return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v22);
    }
  }
  else
  {
    dispatch_once(&CI::print_graph_recursive<CI::Node,CI::NodeIndex,CI::Node::NodeStats>(__sFILE *,CI::Node const*,int,std::unordered_map<CI::NodeIndex,CI::Node::NodeStats> const&)::onceToken, &__block_literal_global_114);
    if (a1) {
      goto LABEL_3;
    }
  }
  return fprintf(a2, "%.*sNULL\n", 2, CI::print_graph_recursive<CI::Node,CI::NodeIndex,CI::Node::NodeStats>(__sFILE *,CI::Node const*,int,std::unordered_map<CI::NodeIndex,CI::Node::NodeStats> const&)::indent_str);
}

void *___ZN2CIL21print_graph_recursiveINS_4NodeENS_9NodeIndexENS1_9NodeStatsEEEvP7__sFILEPKT_iRKNSt3__113unordered_mapIT0_T1_NS9_4hashISB_EENS9_8equal_toISB_EENS9_9allocatorINS9_4pairIKSB_SC_EEEEEE_block_invoke()
{
  __int16 result = memset(CI::print_graph_recursive<CI::Node,CI::NodeIndex,CI::Node::NodeStats>(__sFILE *,CI::Node const*,int,std::unordered_map<CI::NodeIndex,CI::Node::NodeStats> const&)::indent_str, 32, sizeof(CI::print_graph_recursive<CI::Node,CI::NodeIndex,CI::Node::NodeStats>(__sFILE *,CI::Node const*,int,std::unordered_map<CI::NodeIndex,CI::Node::NodeStats> const&)::indent_str));
  byte_1E9333CE0 = 0;
  return result;
}

uint64_t __Block_byref_object_copy__23(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__23(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t __Block_byref_object_copy__116(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__117(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

BOOL ___ZN2CIL21print_graph_recursiveINS_4NodeENS_9NodeIndexENS1_9NodeStatsEEEvP7__sFILEPKT_iRKNSt3__113unordered_mapIT0_T1_NS9_4hashISB_EENS9_8equal_toISB_EENS9_9allocatorINS9_4pairIKSB_SC_EEEEEE_block_invoke_118(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  uint64_t v3 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v7);
  if (v3)
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v6 = *(void *)(v4 + 64);
    std::__hash_table<std::__hash_value_type<CI::Node const*,unsigned long>,std::__unordered_map_hasher<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,true>,std::__unordered_map_equal<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::equal_to<CI::Node const*>,std::hash<CI::Node const*>,true>,std::allocator<std::__hash_value_type<CI::Node const*,unsigned long>>>::__emplace_unique_key_args<CI::Node const*,CI::Node const*&,unsigned long>(v4 + 40, &v7, &v7, &v6);
  }
  else
  {
    std::__hash_table<CI::Node const*,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,std::allocator<CI::Node const*>>::__emplace_unique_key_args<CI::Node const*,CI::Node const* const&>(*(void *)(*(void *)(a1 + 32) + 8) + 40, &v7, &v7);
  }
  return v3 != 0;
}

void *__Block_byref_object_copy__121(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x400uLL);
}

BOOL ___ZN2CIL21print_graph_recursiveINS_4NodeENS_9NodeIndexENS1_9NodeStatsEEEvP7__sFILEPKT_iRKNSt3__113unordered_mapIT0_T1_NS9_4hashISB_EENS9_8equal_toISB_EENS9_9allocatorINS9_4pairIKSB_SC_EEEEEE_block_invoke_123(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v30 = a2;
  fprintf(*(FILE **)(a1 + 56), "%.*s", 2 * *(_DWORD *)(a1 + 72), CI::print_graph_recursive<CI::Node,CI::NodeIndex,CI::Node::NodeStats>(__sFILE *,CI::Node const*,int,std::unordered_map<CI::NodeIndex,CI::Node::NodeStats> const&)::indent_str);
  if (a4 <= 0x3FF) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + a4 + 40) = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
  }
  if (a4 >= 1)
  {
    unint64_t v9 = 0;
    do
    {
      if (v9 <= 0x3FF
        && (int v10 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + v9 + 40),
            BOOL v11 = v10 != 0,
            int v12 = v10 - 1,
            v12 != 0 && v11))
      {
        unint64_t v13 = v9 + 1;
        int16x4_t v14 = *(FILE **)(a1 + 56);
        if (v9 + 1 == a4 && v12 == a5)
        {
          fwrite("╰─", 6uLL, 1uLL, v14);
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + v9 + 40) = 0;
        }
        else
        {
          if (v13 == a4)
          {
            int16x4_t v15 = "├─";
            size_t v16 = 6;
          }
          else
          {
            int16x4_t v15 = "│ ";
            size_t v16 = 4;
          }
          fwrite(v15, v16, 1uLL, v14);
        }
      }
      else
      {
        fwrite("  ", 2uLL, 1uLL, *(FILE **)(a1 + 56));
        unint64_t v13 = v9 + 1;
      }
      unint64_t v9 = v13;
    }
    while (v13 != a4);
  }
  uint64_t v17 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), &v30);
  if (v17)
  {
    double v18 = *(FILE **)(a1 + 56);
    uint64_t v19 = *(void *)(*(void *)(a1 + 48) + 8) + 40;
    *(void *)&v29[0] = &v30;
    CFStringRef v20 = std::__hash_table<std::__hash_value_type<CI::Node const*,unsigned long>,std::__unordered_map_hasher<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,true>,std::__unordered_map_equal<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::equal_to<CI::Node const*>,std::hash<CI::Node const*>,true>,std::allocator<std::__hash_value_type<CI::Node const*,unsigned long>>>::__emplace_unique_key_args<CI::Node const*,std::piecewise_construct_t const&,std::tuple<CI::Node const* const&>,std::tuple<>>(v19, &v30, (uint64_t)&std::piecewise_construct, (void **)v29);
    fprintf(v18, "<%ld>\n", v20[3]);
  }
  else
  {
    double v21 = std::__hash_table<std::__hash_value_type<CI::ImageIndex,CI::Image::ImageStats>,std::__unordered_map_hasher<CI::ImageIndex,std::__hash_value_type<CI::ImageIndex,CI::Image::ImageStats>,std::hash<CI::ImageIndex>,std::equal_to<CI::ImageIndex>,true>,std::__unordered_map_equal<CI::ImageIndex,std::__hash_value_type<CI::ImageIndex,CI::Image::ImageStats>,std::equal_to<CI::ImageIndex>,std::hash<CI::ImageIndex>,true>,std::allocator<std::__hash_value_type<CI::ImageIndex,CI::Image::ImageStats>>>::find<CI::ImageIndex>(*(void **)(a1 + 64), (unsigned int *)(v30 + 36));
    if (v21)
    {
      int v22 = *(FILE **)(a1 + 56);
      int v23 = v21 + 3;
      uint64_t v24 = v30;
    }
    else
    {
      uint64_t v24 = v30;
      int v22 = *(FILE **)(a1 + 56);
      memset(v29, 0, sizeof(v29));
      int v23 = v29;
    }
    CI::Node::print_for_graph(v24, v22, (uint64_t)v23);
    if (std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), &v30))
    {
      uint64_t v25 = *(FILE **)(a1 + 56);
      uint64_t v26 = *(void *)(*(void *)(a1 + 48) + 8) + 40;
      *(void *)&v29[0] = &v30;
      uint64_t v27 = std::__hash_table<std::__hash_value_type<CI::Node const*,unsigned long>,std::__unordered_map_hasher<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,true>,std::__unordered_map_equal<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::equal_to<CI::Node const*>,std::hash<CI::Node const*>,true>,std::allocator<std::__hash_value_type<CI::Node const*,unsigned long>>>::__emplace_unique_key_args<CI::Node const*,std::piecewise_construct_t const&,std::tuple<CI::Node const* const&>,std::tuple<>>(v26, &v30, (uint64_t)&std::piecewise_construct, (void **)v29);
      fprintf(v25, " <%ld>", v27[3]);
    }
    fputc(10, *(FILE **)(a1 + 56));
    std::__hash_table<CI::Node const*,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,std::allocator<CI::Node const*>>::__emplace_unique_key_args<CI::Node const*,CI::Node const* const&>(*(void *)(*(void *)(a1 + 40) + 8) + 40, &v30, &v30);
  }
  return v17 != 0;
}

uint64_t ___ZNK2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPKS0_S2_iiE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void *std::__hash_table<std::__hash_value_type<CI::Node const*,unsigned long>,std::__unordered_map_hasher<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,true>,std::__unordered_map_equal<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::equal_to<CI::Node const*>,std::hash<CI::Node const*>,true>,std::allocator<std::__hash_value_type<CI::Node const*,unsigned long>>>::__emplace_unique_key_args<CI::Node const*,CI::Node const*&,unsigned long>(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  unint64_t v8 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v9 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v8 >> 47) ^ v8);
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
    }
    else
    {
      unint64_t v4 = v10 & (v11 - 1);
    }
    unint64_t v13 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = (void *)*i)
      {
        unint64_t v15 = i[1];
        if (v15 == v10)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v12.u32[0] > 1uLL)
          {
            if (v15 >= v11) {
              v15 %= v11;
            }
          }
          else
          {
            v15 &= v11 - 1;
          }
          if (v15 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v10;
  uint64_t v16 = *a4;
  i[2] = *a3;
  i[3] = v16;
  float v17 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    BOOL v19 = 1;
    if (v11 >= 3) {
      BOOL v19 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v20 = v19 | (2 * v11);
    unint64_t v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21) {
      size_t v22 = v21;
    }
    else {
      size_t v22 = v20;
    }
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__rehash<true>(a1, v22);
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v4 = v10 % v11;
      }
      else {
        unint64_t v4 = v10;
      }
    }
    else
    {
      unint64_t v4 = (v11 - 1) & v10;
    }
  }
  uint64_t v23 = *(void *)a1;
  uint64_t v24 = *(void **)(*(void *)a1 + 8 * v4);
  if (v24)
  {
    *uint64_t i = *v24;
LABEL_38:
    *uint64_t v24 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v23 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v25 = *(void *)(*i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v25 >= v11) {
        v25 %= v11;
      }
    }
    else
    {
      v25 &= v11 - 1;
    }
    uint64_t v24 = (void *)(*(void *)a1 + 8 * v25);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void *std::__hash_table<std::__hash_value_type<CI::Node const*,unsigned long>,std::__unordered_map_hasher<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,true>,std::__unordered_map_equal<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::equal_to<CI::Node const*>,std::hash<CI::Node const*>,true>,std::allocator<std::__hash_value_type<CI::Node const*,unsigned long>>>::__emplace_unique_key_args<CI::Node const*,std::piecewise_construct_t const&,std::tuple<CI::Node const* const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint8x8_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  size_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    void *v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    size_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

double cikernel::_cmlut(uint64x2_t *a1, float32x4_t a2, double a3, double a4, double a5, int8x16_t a6, int8x16_t a7, int8x16_t a8)
{
  a2.i32[3] = 0;
  float32x4_t v10 = vmaxnmq_f32(a2, (float32x4_t)0);
  v10.i32[3] = 0;
  float32x4_t v11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a3, 1);
  float64x2_t v25 = (float64x2_t)vaddq_f32(v11, vmulq_n_f32(vminnmq_f32(v10, (float32x4_t)xmmword_1939508C0), *(float *)&a3));
  double v12 = CI::BitmapSampler::read(a1, COERCE_DOUBLE(LODWORD(v25.f64[0]) | 0x3F00000000000000), v25, *(double *)v11.i64, *(double *)a2.i64, a6, a7, a8);
  unsigned int v26 = LODWORD(v12);
  double v18 = CI::BitmapSampler::read(a1, COERCE_DOUBLE(HIDWORD(v25.f64[0]) | 0x3F00000000000000), v25, v13, v14, v15, v16, v17);
  double v27 = COERCE_DOUBLE(__PAIR64__(LODWORD(v18), v26));
  CI::BitmapSampler::read(a1, COERCE_DOUBLE(LODWORD(v25.f64[1]) | 0x3F00000000000000), v25, v19, v20, v21, v22, v23);
  return v27;
}

float32x4_t cikernel::_pq_eotf(float32x4_t a1, float a2)
{
  float32x4_t v2 = (float32x4_t)_simd_pow_f4((simd_float4)(*(_OWORD *)&a1 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (simd_float4)vdupq_n_s64(0x3C4FCDAC3C4FCDACuLL));
  float32x4_t result = (float32x4_t)_simd_pow_f4((simd_float4)vdivq_f32(vmaxnmq_f32(vaddq_f32(v2, (float32x4_t)vdupq_n_s32(0xBF560000)), (float32x4_t)0), vaddq_f32(vmulq_f32(v2, (float32x4_t)vdupq_n_s32(0xC1958000)), (float32x4_t)vdupq_n_s32(0x4196D000u))), (simd_float4)vdupq_n_s64(0x40C8E06B40C8E06BuLL));
  v3.i64[0] = 0x8000000080000000;
  v3.i64[1] = 0x8000000080000000;
  __asm { FMOV            V2.4S, #1.0 }
  result.i64[0] = vmulq_f32(vmulq_n_f32((float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a1), (int8x16_t)vcgtzq_f32(a1)), vorrq_s8(vandq_s8((int8x16_t)a1, v3), _Q2), (int8x16_t)0), a2), result).u64[0];
  result.i32[3] = a1.i32[3];
  return result;
}

float32x4_t cikernel::_pq_inv_eotf(float32x4_t a1, float a2)
{
  float32x4_t v2 = (float32x4_t)_simd_pow_f4((simd_float4)vmulq_n_f32((float32x4_t)(*(_OWORD *)&a1 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), a2), (simd_float4)vdupq_n_s64(0x3E2320003E232000uLL));
  __asm { FMOV            V2.4S, #1.0 }
  int8x16_t v10 = (int8x16_t)_Q2;
  float32x4_t result = (float32x4_t)_simd_pow_f4((simd_float4)vdivq_f32(vaddq_f32(vmulq_f32(v2, (float32x4_t)vdupq_n_s32(0x4196D000u)), (float32x4_t)vdupq_n_s32(0x3F560000u)), vaddq_f32(vmulq_f32(v2, (float32x4_t)vdupq_n_s32(0x41958000u)), _Q2)), (simd_float4)vdupq_n_s64(0x429DB000429DB000uLL));
  v8.i64[0] = 0x8000000080000000;
  v8.i64[1] = 0x8000000080000000;
  result.i64[0] = vmulq_f32((float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a1), (int8x16_t)vcgtzq_f32(a1)), vorrq_s8(vandq_s8((int8x16_t)a1, v8), v10), (int8x16_t)0), result).u64[0];
  result.i32[3] = a1.i32[3];
  return result;
}

int8x16_t cikernel::_hlg_inv_oetf(float32x4_t a1, float a2)
{
  float v2 = a2 * 4.0;
  float32x4_t v3 = vmaxnmq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&a1 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (float32x4_t)0), (float32x4_t)0);
  v4.i64[0] = 0xBF000000BF000000;
  v4.i64[1] = 0xBF000000BF000000;
  int8x16_t result = vbslq_s8((int8x16_t)vcltzq_f32(vaddq_f32(v3, v4)), (int8x16_t)vmulq_n_f32(vmulq_f32(v3, v3), v2), (int8x16_t)vmulq_n_f32(vaddq_f32((float32x4_t)_simd_exp_f4((simd_float4)vdivq_f32(vaddq_f32(v3, (float32x4_t)vdupq_n_s32(0xBF0F564F)), (float32x4_t)vdupq_n_s32(0x3E371FF0u))), (float32x4_t)vdupq_n_s32(0x3E91C020u)), a2));
  result.i64[0] = vbslq_s8((int8x16_t)vcltzq_f32(a1), (int8x16_t)vnegq_f32((float32x4_t)result), result).u64[0];
  result.i32[3] = a1.i32[3];
  return result;
}

int8x16_t cikernel::_hlg_oetf(float32x4_t a1, float a2)
{
  float32x4_t v2 = vabsq_f32(vmulq_n_f32(a1, a2));
  __asm { FMOV            V1.4S, #3.0 }
  int8x16_t v10 = (int8x16_t)vsqrtq_f32(vmulq_f32(v2, _Q1));
  __asm { FMOV            V1.4S, #12.0 }
  int8x16_t result = vbslq_s8((int8x16_t)vcltzq_f32(vaddq_f32(v2, (float32x4_t)vdupq_n_s32(0xBDAAAAAB))), v10, (int8x16_t)vaddq_f32(vmulq_f32((float32x4_t)_simd_log_f4((simd_float4)vaddq_f32(vmulq_f32(vmaxnmq_f32(v2, (float32x4_t)vdupq_n_s32(0x3DAAAAABu)), _Q1), (float32x4_t)vdupq_n_s32(0xBE91C020))), (float32x4_t)vdupq_n_s32(0x3E371FF0u)), (float32x4_t)vdupq_n_s32(0x3F0F564Fu)));
  result.i64[0] = vbslq_s8((int8x16_t)vcltzq_f32(a1), (int8x16_t)vnegq_f32((float32x4_t)result), result).u64[0];
  result.i32[3] = a1.i32[3];
  return result;
}

__n128 cikernel::_hlg_lumscale(float32x4_t a1, float32x4_t a2, double a3)
{
  float32x4_t v3 = a1;
  v3.i32[3] = fmaxf(fmaxf(a1.f32[0], a1.f32[1]), a1.f32[2]);
  int8x16_t v4 = (int8x16_t)vmulq_f32(a2, v3);
  result.n128_u64[0] = vmulq_n_f32(a1, vmuls_lane_f32(powf(fmaxf(fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)))), 0.0001), *(float *)&a3), *(float32x2_t *)&a3, 1)).u64[0];
  result.n128_u32[3] = a1.u32[3];
  return result;
}

void CI::f4_s_f4_f2(void *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a1[6];
  float32x4_t v11 = (double (*)(void *, __n128, __n128, double))a1[3];
  int v12 = *(_DWORD *)(v10 + 16);
  uint64_t v13 = *(void *)(v10 + 8);
  int v14 = *(_DWORD *)(v10 + 40);
  uint64_t v15 = *(void *)(v10 + 32);
  int v16 = *(_DWORD *)(v10 + 64);
  uint64_t v17 = *(void *)(v10 + 56);
  if (*((unsigned char *)a1 + 64)) {
    a1 = CI::setDC((CI *)(a3 + 16 * *(void *)(v10 + 80)), a2);
  }
  double v18 = (double *)(a3 + 16 * v17);
  if (v16 != 5) {
    double v18 = (double *)((char *)a2 + 64 * v17);
  }
  double v19 = (__n128 *)(a3 + 16 * v15);
  if (v14 != 5) {
    double v19 = (__n128 *)((char *)a2 + 64 * v15);
  }
  double v20 = (__n128 *)(a3 + 16 * v13);
  if (v12 != 5) {
    double v20 = (__n128 *)((char *)a2 + 64 * v13);
  }
  *(double *)&long long v21 = v11(a1, *v20, *v19, *v18);
  *(_OWORD *)(a3 + 16 * a7) = v21;
}

float32x4_t cikernel::_hlg_srmapping(float32x4_t a1, float32x4_t a2, float32x2_t a3)
{
  __int32 v10 = a1.i32[3];
  float32x4_t v3 = vmulq_lane_f32(a1, a3, 1);
  v3.i32[3] = fmaxf(fmaxf(v3.f32[0], v3.f32[1]), v3.f32[2]);
  int8x16_t v4 = (int8x16_t)vmulq_f32(a2, v3);
  int32x2_t v5 = (int32x2_t)vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
  float32x4_t result = (float32x4_t)_simd_pow_f4((simd_float4)v3, (simd_float4)vdupq_lane_s32((int32x2_t)a3, 0));
  int8x16_t v7 = (int8x16_t)vmulq_f32(a2, result);
  *(float32x2_t *)v7.i8 = vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  *(float32x2_t *)v7.i8 = vadd_f32((float32x2_t)vzip1_s32(v5, *(int32x2_t *)v7.i8), (float32x2_t)vzip2_s32(v5, *(int32x2_t *)v7.i8));
  float v8 = *(float *)v7.i32 / *(float *)&v7.i32[1];
  if (*(float *)&v7.i32[1] == 0.0) {
    float v8 = 1.0;
  }
  result.i64[0] = vmulq_n_f32(result, v8).u64[0];
  result.i32[3] = v10;
  return result;
}

float32x4_t cikernel::_pq_tonemapping(float32x4_t result, double a2, float32x4_t a3, double a4, double a5, double a6, float32x4_t a7)
{
  float32x4_t v7 = vmulq_f32(result, a7);
  float v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0];
  if (v8 != 0.0)
  {
    float32x4_t v29 = result;
    float v9 = *((float *)&a4 + 1);
    float v28 = v8;
    float v26 = *(float *)&a4;
    _S0 = powf(v8 / 10000.0, *(float *)&a2);
    _V3.S[1] = a3.u32[1];
    __asm { FMLA            S2, S0, V3.S[1] }
    float v17 = pow(_S2 / (vmuls_lane_f32(_S0, a3, 2) + 1.0), *((float *)&a2 + 1));
    float v18 = (float)(v17 - v9) / (float)(v26 - v9);
    if (v18 >= *(float *)&a6)
    {
      float v20 = *(float *)&a5;
      float v21 = vmuls_lane_f32(v18 - *(float *)&a6, *(float32x2_t *)&a6, 1);
      float v18 = (1.0 - *(float *)&a6)
          * (float)(v21 + (float)((float)(v21 * (float)(v21 * -2.0)) + (float)((float)(v21 * v21) * v21)))
          + (1.0 - ((float)(v21 * (float)(v21 * 3.0)) - (v21 + v21) * v21 * v21)) * *(float *)&a6
          + ((float)(v21 * (float)(v21 * 3.0)) + v21 * -2.0 * v21 * v21) * *((float *)&a5 + 1);
      float32x4_t v19 = a3;
    }
    else
    {
      float32x4_t v19 = a3;
      float v20 = *(float *)&a5;
    }
    float v22 = v19.f32[1];
    float v23 = v19.f32[2];
    if (v18 >= 0.0)
    {
      if (v18 >= 1.0) {
        float v20 = v18;
      }
      else {
        float v20 = v18
      }
            + (float)((float)((float)(1.0 - v18) * (float)((float)(1.0 - v18) * (float)(v20 * (float)(1.0 - v18))))
                    * (float)(1.0 - v18));
    }
    float v24 = pow((float)(v9 + (float)(v20 * (float)(v26 - v9))), 1.0 / *((float *)&a2 + 1));
    result.f32[0] = pow((float)(fmaxf(v24 - a3.f32[0], 0.0) / (float)(v22 - (float)(v23 * v24))), 1.0 / *(float *)&a2);
    result.i64[0] = vmulq_n_f32(v29, (float)(result.f32[0] * 10000.0) / v28).u64[0];
    result.i32[3] = v29.i32[3];
  }
  return result;
}

void CI::f4_s_f2_f3_f4_f2_f2_f4(uint64_t a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(void *)(a1 + 48);
  __int32 v10 = *(double (**)(__n128, double, __n128, __n128, double, double, __n128))(a1 + 24);
  int v11 = *(_DWORD *)(v9 + 16);
  uint64_t v12 = *(void *)(v9 + 8);
  int v13 = *(_DWORD *)(v9 + 40);
  uint64_t v14 = *(void *)(v9 + 32);
  uint64_t v15 = *(void *)(v9 + 56);
  int v16 = *(_DWORD *)(v9 + 88);
  uint64_t v17 = *(void *)(v9 + 80);
  int v18 = *(_DWORD *)(v9 + 112);
  uint64_t v19 = *(void *)(v9 + 104);
  int v20 = *(_DWORD *)(v9 + 136);
  uint64_t v21 = *(void *)(v9 + 128);
  int v22 = *(_DWORD *)(v9 + 160);
  uint64_t v23 = *(void *)(v9 + 152);
  if (*(unsigned char *)(a1 + 64))
  {
    double v35 = *(double (**)(__n128, double, __n128, __n128, double, double, __n128))(a1 + 24);
    int v33 = *(_DWORD *)(v9 + 16);
    int v34 = *(_DWORD *)(v9 + 88);
    int v36 = *(_DWORD *)(v9 + 40);
    int v32 = *(_DWORD *)(v9 + 136);
    uint64_t v31 = *(void *)(v9 + 80);
    CI::setDC((CI *)(a3 + 16 * *(void *)(v9 + 176)), a2);
    uint64_t v17 = v31;
    int v20 = v32;
    int v11 = v33;
    int v16 = v34;
    int v13 = v36;
    __int32 v10 = v35;
  }
  float v24 = (__n128 *)(a3 + 16 * v23);
  if (v22 != 5) {
    float v24 = (__n128 *)((char *)a2 + 64 * v23);
  }
  float64x2_t v25 = (double *)(a3 + 16 * v21);
  if (v20 != 5) {
    float64x2_t v25 = (double *)((char *)a2 + 64 * v21);
  }
  float v26 = (double *)(a3 + 16 * v19);
  if (v18 != 5) {
    float v26 = (double *)((char *)a2 + 64 * v19);
  }
  double v27 = (__n128 *)(a3 + 16 * v17);
  if (v16 != 5) {
    double v27 = (__n128 *)((char *)a2 + 64 * v17);
  }
  float v28 = (double *)(a3 + 16 * v14);
  if (v13 != 5) {
    float v28 = (double *)((char *)a2 + 64 * v14);
  }
  float32x4_t v29 = (__n128 *)(a3 + 16 * v12);
  if (v11 != 5) {
    float32x4_t v29 = (__n128 *)((char *)a2 + 64 * v12);
  }
  *(double *)&long long v30 = v10(*v29, *v28, *((__n128 *)a2 + 4 * v15), *v27, *v26, *v25, *v24);
  *(_OWORD *)(a3 + 16 * a7) = v30;
}

__n128 cikernel::_flexLumaScaling(uint64x2_t *a1, float32x4_t a2, double a3, float32x4_t a4, float a5, int8x16_t a6, int8x16_t a7, int8x16_t a8)
{
  float32x4_t v9 = a2;
  v9.i32[3] = fmaxf(a2.f32[0], fmaxf(a2.f32[1], a2.f32[2]));
  int8x16_t v10 = (int8x16_t)vmulq_f32(a4, v9);
  int8x16_t v11 = vextq_s8(v10, v10, 8uLL);
  *(float32x2_t *)v10.i8 = vadd_f32(*(float32x2_t *)v10.i8, *(float32x2_t *)v11.i8);
  *(float *)v10.i32 = vaddv_f32(*(float32x2_t *)v10.i8);
  v11.i32[0] = 1.0;
  v12.i64[0] = 0x8000000080000000;
  v12.i64[1] = 0x8000000080000000;
  *(void *)&double v13 = vbslq_s8(v12, v11, v10).u64[0];
  if (*(float *)v10.i32 == 0.0) {
    *(float *)&double v13 = 0.0;
  }
  float v14 = *(float *)&v13;
  LODWORD(v13) = 897988541;
  float v15 = fmaxf(fabsf(*(float *)v10.i32), 0.000001);
  if (v15 > 1.0) {
    float v15 = 1.0;
  }
  *(float *)v11.i32 = vmlas_n_f32(*(float *)&a6.i32[1], v15, *(float *)a6.i32);
  result.n128_f64[0] = CI::BitmapSampler::read(a1, COERCE_DOUBLE(v11.u32[0] | 0x3F00000000000000), (float64x2_t)v11, v13, 0.0, a6, a7, a8);
  result.n128_u64[0] = vmulq_n_f32(a2, (float)(v14 * result.n128_f32[0]) * a5).u64[0];
  result.n128_u32[3] = a2.u32[3];
  return result;
}

void CI::f4_s_f2_f4_f_sr2d_f2(uint64_t a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(void *)(a1 + 48);
  int8x16_t v10 = *(double (**)(uint64_t, __n128, double, __n128, float, double))(a1 + 24);
  int v11 = *(_DWORD *)(v9 + 16);
  uint64_t v12 = *(void *)(v9 + 8);
  int v13 = *(_DWORD *)(v9 + 40);
  uint64_t v14 = *(void *)(v9 + 32);
  int v15 = *(_DWORD *)(v9 + 64);
  uint64_t v16 = *(void *)(v9 + 56);
  uint64_t v17 = *(void *)(v9 + 80);
  uint64_t v18 = *((void *)a2 + 8 * *(void *)(v9 + 104));
  int v19 = *(_DWORD *)(v9 + 136);
  uint64_t v20 = *(void *)(v9 + 128);
  if (*(unsigned char *)(a1 + 64))
  {
    int v27 = *(_DWORD *)(v9 + 64);
    int v28 = *(_DWORD *)(v9 + 16);
    uint64_t v26 = *(void *)(v9 + 8);
    CI::setDC((CI *)(a3 + 16 * *(void *)(v9 + 152)), a2);
    int v15 = v27;
    int v11 = v28;
    uint64_t v12 = v26;
  }
  uint64_t v21 = (double *)(a3 + 16 * v20);
  if (v19 != 5) {
    uint64_t v21 = (double *)((char *)a2 + 64 * v20);
  }
  int v22 = (__n128 *)(a3 + 16 * v16);
  if (v15 != 5) {
    int v22 = (__n128 *)((char *)a2 + 64 * v16);
  }
  uint64_t v23 = (double *)(a3 + 16 * v14);
  if (v13 != 5) {
    uint64_t v23 = (double *)((char *)a2 + 64 * v14);
  }
  float v24 = (__n128 *)(a3 + 16 * v12);
  if (v11 != 5) {
    float v24 = (__n128 *)((char *)a2 + 64 * v12);
  }
  *(double *)&long long v25 = v10(v18, *v24, *v23, *v22, *((float *)a2 + 16 * v17), *v21);
  *(_OWORD *)(a3 + 16 * a7) = v25;
}

double cikernel::_cmcubeopaque(uint64x2_t *a1, float32x4_t a2, int8x16_t a3, double a4, double a5, int8x16_t a6, int8x16_t a7, int8x16_t a8)
{
  a2.i32[3] = 0;
  float32x4_t v10 = vmaxnmq_f32(a2, (float32x4_t)xmmword_193959AB0);
  v10.i32[3] = 0;
  float32x4_t v11 = vmulq_n_f32(vminnmq_f32(v10, (float32x4_t)xmmword_193959AC0), *(float *)a3.i32);
  float v12 = v11.f32[2];
  float v13 = fmaxf(floorf(v11.f32[2]), 0.0);
  *(float32x2_t *)v11.f32 = vadd_f32(*(float32x2_t *)v11.f32, (float32x2_t)0x3F0000003F000000);
  *(double *)a6.i64 = *(float *)a3.i32 + 1.0;
  *(float *)&__int32 v14 = *(double *)a6.i64 * v13;
  a7.i32[0] = 0;
  a8.i32[0] = 0;
  a8.i32[1] = v14;
  float32x2_t v15 = vadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)a8.i8);
  *(double *)a2.i64 = *(double *)a6.i64 * fminf(v13 + 1.0, *(float *)a3.i32);
  a2.f32[0] = *(double *)a2.i64;
  a7.i32[1] = a2.i32[0];
  float32x2_t v16 = vadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)a7.i8);
  float32x2_t v26 = (float32x2_t)vextq_s8(a3, a3, 8uLL).u64[0];
  *(double *)v17.i64 = CI::BitmapSampler::read(a1, COERCE_DOUBLE(vmul_f32(v26, v15)), (float64x2_t)a3, *(double *)&v15, *(double *)a2.i64, a6, a7, a8);
  float32x4_t v27 = v17;
  *(double *)v24.i64 = CI::BitmapSampler::read(a1, COERCE_DOUBLE(vmul_f32(v26, v16)), v18, v19, v20, v21, v22, v23);
  *(void *)&double result = vmlaq_n_f32(vmulq_n_f32(v27, 1.0 - (float)(v12 - v13)), v24, v12 - v13).u64[0];
  return result;
}

__n128 cikernel::_cm1x3lut(uint64x2_t *a1, float32x4_t a2, float32x4_t a3, double a4, double a5, int8x16_t a6, int8x16_t a7, int8x16_t a8)
{
  unsigned __int32 v13 = a2.u32[3];
  float32x4_t v8 = a2;
  v8.i32[3] = 0;
  float32x4_t v9 = vmaxnmq_f32(v8, (float32x4_t)0);
  v9.i32[3] = 0;
  float32x4_t v10 = vmulq_f32(a3, vminnmq_f32(v9, (float32x4_t)xmmword_1939508C0));
  *(int32x2_t *)a3.f32 = vdup_lane_s32(*(int32x2_t *)a3.f32, 1);
  float64x2_t v11 = (float64x2_t)vaddq_f32(a3, v10);
  result.n128_f64[0] = CI::BitmapSampler::read(a1, COERCE_DOUBLE(LODWORD(v11.f64[0]) | 0x3F00000000000000), v11, 0.00781250185, *(double *)v8.i64, a6, a7, a8);
  result.n128_u32[3] = v13;
  return result;
}

uint64_t CI::InstanceCounted<(CI::Type)4>::type()
{
  return 4;
}

void *CI::InstanceCounted<(CI::Type)4>::~InstanceCounted(void *result)
{
  *__n128 result = &unk_1EE45AFD0;
  atomic_fetch_add(&dword_1EB466E78[2], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)4>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AFD0;
  atomic_fetch_add(&dword_1EB466E78[2], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::CropImage::shape_for_graphviz(CI::CropImage *this)
{
  return 2;
}

uint64_t CI::CropImage::color_for_graphviz(CI::CropImage *this)
{
  return 3;
}

size_t CI::CropImage::print_for_graph_core(CI::CropImage *this, __sFILE *__stream)
{
  fwrite("crop ", 5uLL, 1uLL, __stream);
  uint64_t v5 = *((void *)this + 15);
  uint64_t v6 = *((void *)this + 16);
  uint64_t v7 = *((void *)this + 17);
  uint64_t v8 = *((void *)this + 18);

  return CI::fprintf(__stream, v4, *(CGRect *)&v5);
}

uint64_t CI::CropImage::headroom(CI::CropImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 232))();
}

uint64_t non-virtual thunk to'CI::CropImage::type(CI::CropImage *this)
{
  return 6;
}

void non-virtual thunk to'CI::CropImage::~CropImage(CI::CropImage *this)
{
  *(void *)this = &unk_1EE45B188;
  atomic_fetch_add(&dword_1EB466E78[4], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::CropImage *)((char *)this - 112));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45B188;
  atomic_fetch_add(&dword_1EB466E78[4], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::CropImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

void CI::FillImage::FillImage(__n128 *this, CGColor *a2)
{
  CI::Image::Image(this);
  v2[13] = &unk_1EE45B2C8;
  atomic_fetch_add(&dword_1EB466E78[7], 1u);
  *float32x4_t v2 = &unk_1EE45F178;
  v2[13] = &unk_1EE45F2C8;
  operator new();
}

char *CI::XXHashHelper::add(CI::XXHashHelper *this, CGColorRef color)
{
  if (color)
  {
    ColorSpace = CGColorGetColorSpace(color);
    CI::XXHashHelper::add(this, ColorSpace);
    size_t NumberOfComponents = CGColorGetNumberOfComponents(color);
    __n128 result = (char *)CGColorGetComponents(color);
    if (result && 8 * NumberOfComponents)
    {
      return (char *)XXH64_update((uint64_t)this, result, 8 * NumberOfComponents);
    }
  }
  else
  {
    int __src = 0;
    return (char *)XXH64_update((uint64_t)this, (char *)&__src, 4uLL);
  }
  return result;
}

__n128 *CI::FillImage::FillImage(__n128 *this, float a2, float a3, float a4, float a5)
{
  CI::Image::Image(this);
  v10[13] = &unk_1EE45B2C8;
  atomic_fetch_add(&dword_1EB466E78[7], 1u);
  *float32x4_t v10 = &unk_1EE45F178;
  v10[13] = &unk_1EE45F2C8;
  if (a2 != 0.0 || a3 != 0.0 || a4 != 0.0 || a5 != 0.0) {
    operator new();
  }
  this[7].n128_u64[0] = 0;
  XXH64_reset(v13, 0);
  LODWORD(__src) = (*(uint64_t (**)(__n128 *))(this->n128_u64[0] + 16))(this);
  XXH64_update((uint64_t)v13, (char *)&__src, 4uLL);
  if (this[7].n128_u64[0])
  {
    unint64_t __src = this[7].n128_u64[0];
    XXH64_update((uint64_t)v13, (char *)&__src, 8uLL);
  }
  unint64_t v11 = XXH64_digest((uint64_t)v13);
  this[5].n128_u64[0] = v11;
  this[5].n128_u64[1] = v11;
  this[6].n128_u16[0] = 1;
  return this;
}

void CI::FillImage::~FillImage(CI::FillImage *this)
{
  *(void *)this = &unk_1EE45F178;
  *((void *)this + 13) = &unk_1EE45F2C8;
  float32x4_t v2 = (CI::Object *)*((void *)this + 14);
  if (v2) {
    CI::Object::unref(v2);
  }
  *((void *)this + 13) = &unk_1EE45B2C8;
  *((void *)this + 14) = 0;
  atomic_fetch_add(&dword_1EB466E78[7], 0xFFFFFFFF);

  CI::Image::~Image(this);
}

{
  uint64_t vars8;

  CI::FillImage::~FillImage(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::FillImage::~FillImage(CI::FillImage *this)
{
}

{
  uint64_t vars8;

  CI::FillImage::~FillImage((CI::FillImage *)((char *)this - 104));

  JUMPOUT(0x1997023B0);
}

size_t CI::FillImage::print_for_graph_core(CI::FillImage *this, __sFILE *__stream)
{
  fwrite("fill ", 5uLL, 1uLL, __stream);
  uint64_t v4 = *((void *)this + 14);
  if (v4)
  {
    uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 32);
    return v5();
  }
  else
  {
    return fwrite("clear", 5uLL, 1uLL, __stream);
  }
}

void CI::FillImage::render_graph_core()
{
}

uint64_t CI::FillImage::child_count(CI::FillImage *this)
{
  return 0;
}

uint64_t CI::FillImage::child(CI::FillImage *this)
{
  return 0;
}

uint64_t CI::FillImage::shape_for_graphviz(CI::FillImage *this)
{
  return 1;
}

uint64_t CI::FillImage::color_for_graphviz(CI::FillImage *this)
{
  return 4;
}

double CI::FillImage::extent_unclamped(CI::FillImage *this)
{
  return 0.0;
}

uint64_t CI::FillImage::add_args_to_hash(uint64_t result, CI::XXHashHelper *this)
{
  uint64_t v2 = *(void *)(result + 112);
  if (v2)
  {
    uint64_t v4 = result;
    CI::XXHashHelper::add(this, *(CGColorSpaceRef *)(v2 + 40));
    uint64_t v5 = (char *)(*(void *)(v4 + 112) + 24);
    return XXH64_update((uint64_t)this, v5, 0x10uLL);
  }
  return result;
}

BOOL CI::FillImage::alpha_one(CI::FillImage *this)
{
  uint64_t v1 = *((void *)this + 14);
  return v1 && *(float *)(v1 + 36) == 1.0;
}

uint64_t CI::FillImage::properties(CI::FillImage *this)
{
  return 0;
}

double CI::FillImage::headroom(CI::FillImage *this)
{
  return 0.0;
}

uint64_t CI::FillImage::colorspace(CI::FillImage *this)
{
  return 0;
}

uint64_t non-virtual thunk to'CI::FillImage::type(CI::FillImage *this)
{
  return 9;
}

uint64_t CI::InstanceCounted<(CI::Type)9>::type()
{
  return 9;
}

void *CI::InstanceCounted<(CI::Type)9>::~InstanceCounted(void *result)
{
  *__n128 result = &unk_1EE45B2C8;
  atomic_fetch_add(&dword_1EB466E78[7], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)9>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B2C8;
  atomic_fetch_add(&dword_1EB466E78[7], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

CI::PremultiplyNode *CI::GammaImage::render_graph_core(double *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (CI::Node *)(*(uint64_t (**)(double *))(*(void *)a1 + 184))(a1);
  if (a3)
  {
    uint64_t v6 = (CI::PremultiplyNode *)CI::Object::ref(a3);
    uint64_t v7 = CI::PremultiplyNode::append_to_tree(v6, (CI::Node *)0xFFFFFFFFLL, (int)v5);
    if (v6) {
      CI::Object::unref(v6);
    }
  }
  else
  {
    uint64_t v7 = CI::PremultiplyNode::append_to_tree(0, (CI::Node *)0xFFFFFFFFLL, (int)v5);
  }
  uint64_t v8 = CI::GammaNode::append_to_tree(v7, v5, a1[15]);
  if (v7) {
    CI::Object::unref(v7);
  }
  float32x4_t v9 = CI::PremultiplyNode::append_to_tree(v8, (CI::Node *)1, (int)v5);
  if (v8) {
    CI::Object::unref(v8);
  }
  return v9;
}

float CI::GammaImage::headroom(CI::GammaImage *this)
{
  uint64_t v2 = (*(uint64_t (**)(CI::GammaImage *, void))(*(void *)this + 48))(this, 0);
  float v3 = (*(float (**)(uint64_t))(*(void *)v2 + 232))(v2);
  float result = 0.0;
  if (v3 >= 1.0) {
    return pow(v3, *((long double *)this + 15));
  }
  return result;
}

void CI::GammaImage::~GammaImage(CI::GammaImage *this)
{
  *(void *)this = &unk_1EE457628;
  *((void *)this + 14) = &unk_1EE45A9E0;
  *((void *)this + 15) = 0;
  atomic_fetch_add(&dword_1EB466E78[8], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE457628;
  *((void *)this + 14) = &unk_1EE45A9E0;
  *((void *)this + 15) = 0;
  atomic_fetch_add(&dword_1EB466E78[8], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::GammaImage::type(CI::GammaImage *this)
{
  return 10;
}

uint64_t CI::GammaImage::shape_for_graphviz(CI::GammaImage *this)
{
  return 2;
}

uint64_t CI::GammaImage::color_for_graphviz(CI::GammaImage *this)
{
  return 4;
}

uint64_t CI::GammaImage::add_args_to_hash(uint64_t a1, uint64_t a2)
{
  uint64_t __src = *(void *)(a1 + 120);
  return XXH64_update(a2, (char *)&__src, 8uLL);
}

uint64_t CI::GammaImage::print_for_graph_core(CI::GammaImage *this, __sFILE *a2)
{
  return fprintf(a2, "gamma %g", *((double *)this + 15));
}

uint64_t non-virtual thunk to'CI::GammaImage::type(CI::GammaImage *this)
{
  return 10;
}

void non-virtual thunk to'CI::GammaImage::~GammaImage(CI::GammaImage *this)
{
  *((void *)this - 14) = &unk_1EE457628;
  *(void *)this = &unk_1EE45A9E0;
  *((void *)this + 1) = 0;
  atomic_fetch_add(&dword_1EB466E78[8], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::GammaImage *)((char *)this - 112));
}

{
  CI::GammaImage::~GammaImage((CI::GammaImage *)((char *)this - 112));
}

void non-virtual thunk to'CI::ColorKernelImage::~ColorKernelImage(CI::ColorKernelImage *this)
{
}

{
  uint64_t vars8;

  CI::ColorKernelImage::~ColorKernelImage((CI::ColorKernelImage *)((char *)this - 104));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::ColorKernelImage::properties(CI::ColorKernelImage *this)
{
  uint64_t v1 = **((unsigned int **)this + 15);
  if ((int)v1 < 1) {
    return 0;
  }
  unint64_t v3 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v5 = *((void *)this + 15);
    uint64_t v6 = (void *)(v3 > 9 ? *(void *)(v5 + 16) + 8 * (v3 - 10) : v5 + i);
    uint64_t v7 = *v6;
    int v8 = (*(uint64_t (**)(void))(*(void *)*v6 + 16))(*v6);
    if (CI::is_any_TypeImage(v8)) {
      break;
    }
    if (v1 == ++v3) {
      return 0;
    }
  }
  float32x4_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 200);

  return v10(v7);
}

uint64_t CI::ColorKernelImage::avdepthdata(CI::ColorKernelImage *this)
{
  uint64_t v1 = **((unsigned int **)this + 15);
  if ((int)v1 < 1) {
    return 0;
  }
  unint64_t v3 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v5 = *((void *)this + 15);
    uint64_t v6 = (void *)(v3 > 9 ? *(void *)(v5 + 16) + 8 * (v3 - 10) : v5 + i);
    uint64_t v7 = *v6;
    int v8 = (*(uint64_t (**)(void))(*(void *)*v6 + 16))(*v6);
    if (CI::is_any_TypeImage(v8)) {
      break;
    }
    if (v1 == ++v3) {
      return 0;
    }
  }
  float32x4_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 208);

  return v10(v7);
}

uint64_t CI::ColorKernelImage::avmatte(CI::ColorKernelImage *this)
{
  uint64_t v1 = **((unsigned int **)this + 15);
  if ((int)v1 < 1) {
    return 0;
  }
  unint64_t v3 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v5 = *((void *)this + 15);
    uint64_t v6 = (void *)(v3 > 9 ? *(void *)(v5 + 16) + 8 * (v3 - 10) : v5 + i);
    uint64_t v7 = *v6;
    int v8 = (*(uint64_t (**)(void))(*(void *)*v6 + 16))(*v6);
    if (CI::is_any_TypeImage(v8)) {
      break;
    }
    if (v1 == ++v3) {
      return 0;
    }
  }
  float32x4_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 216);

  return v10(v7);
}

uint64_t CI::ColorKernelImage::ssmatte(CI::ColorKernelImage *this)
{
  uint64_t v1 = **((unsigned int **)this + 15);
  if ((int)v1 < 1) {
    return 0;
  }
  unint64_t v3 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v5 = *((void *)this + 15);
    uint64_t v6 = (void *)(v3 > 9 ? *(void *)(v5 + 16) + 8 * (v3 - 10) : v5 + i);
    uint64_t v7 = *v6;
    int v8 = (*(uint64_t (**)(void))(*(void *)*v6 + 16))(*v6);
    if (CI::is_any_TypeImage(v8)) {
      break;
    }
    if (v1 == ++v3) {
      return 0;
    }
  }
  float32x4_t v10 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 224);

  return v10(v7);
}

uint64_t CI::ColorKernelImage::print_for_graph_core(CI::ColorKernelImage *this, __sFILE *a2)
{
  fprintf(a2, "colorkernel %s", *(const char **)(*((void *)this + 14) + 24));
  uint64_t v4 = **((unsigned int **)this + 15);
  if ((int)v4 >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 24;
    do
    {
      uint64_t v7 = *((void *)this + 15);
      if (v5 > 9) {
        int v8 = (uint64_t *)(*(void *)(v7 + 16) + 8 * (v5 - 10));
      }
      else {
        int v8 = (uint64_t *)(v7 + v6);
      }
      uint64_t v9 = *v8;
      if (v5) {
        int v10 = 44;
      }
      else {
        int v10 = 40;
      }
      fputc(v10, a2);
      uint64_t v11 = *((void *)this + 14);
      if (*(unsigned char *)(v11 + 12))
      {
        name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v11 + 144), v5);
      }
      else if ((uint64_t)v5 >= *(int *)(v11 + 20))
      {
        name = 0;
      }
      else
      {
        name = *(const char **)(*(void *)(v11 + 80) + 8 * v5);
      }
      fputs(name, a2);
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
      if (!CI::is_any_TypeImage(v13))
      {
        fputc(61, a2);
        (*(void (**)(uint64_t, __sFILE *, void))(*(void *)v9 + 32))(v9, a2, 0);
      }
      ++v5;
      v6 += 8;
    }
    while (v4 != v5);
  }
  if (v4) {
    fputc(41, a2);
  }
  uint64_t result = *((unsigned int *)this + 43);
  if (result)
  {
    float32x2_t v15 = CI::name_for_format(result);
    return fprintf(a2, " outputFormat=%s", v15);
  }
  return result;
}

uint64_t CI::ColorKernelImage::color_for_graphviz(CI::ColorKernelImage *this)
{
  if (*(unsigned char *)(*((void *)this + 14) + 165)) {
    return 4;
  }
  else {
    return 3;
  }
}

uint64_t CI::ColorKernelImage::print_for_graphviz(uint64_t a1, FILE *a2, void *a3, int a4)
{
  if (a4) {
    uint64_t v7 = 32;
  }
  else {
    uint64_t v7 = 10;
  }
  fprintf(a2, "colorkernel %s", *(const char **)(*(void *)(a1 + 112) + 24));
  uint64_t v8 = **(unsigned int **)(a1 + 120);
  if ((int)v8 >= 1)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 24;
    do
    {
      uint64_t v11 = *(void *)(a1 + 120);
      if (v9 > 9) {
        float v12 = (void *)(*(void *)(v11 + 16) + 8 * (v9 - 10));
      }
      else {
        float v12 = (void *)(v11 + v10);
      }
      int v13 = (_DWORD *)*v12;
      if ((*(int (**)(void))(*(void *)*v12 + 16))(*v12) >= 1
        && (*(int (**)(_DWORD *))(*(void *)v13 + 16))(v13) <= 25
        && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1) == 1)
      {
        goto LABEL_25;
      }
      uint64_t v14 = *(void *)(a1 + 112);
      if (*(unsigned char *)(v14 + 12))
      {
        name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v14 + 144), v9);
      }
      else if ((uint64_t)v9 >= *(int *)(v14 + 20))
      {
        name = 0;
      }
      else
      {
        name = *(const char **)(*(void *)(v14 + 80) + 8 * v9);
      }
      fprintf(a2, "%c%s", v7, name);
      if ((*(int (**)(_DWORD *))(*(void *)v13 + 16))(v13) < 1
        || (*(int (**)(_DWORD *))(*(void *)v13 + 16))(v13) > 25)
      {
        fputc(61, a2);
        (*(void (**)(_DWORD *, FILE *, void))(*(void *)v13 + 32))(v13, a2, 0);
      }
      else
      {
        if (CI_GRAPHVIZ_INTERNAL())
        {
          int v16 = v13[25];
LABEL_24:
          fprintf(a2, "=(%d)", v16);
          goto LABEL_25;
        }
        int8x16_t v23 = v13;
        float32x4_t v17 = std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v23);
        if (v17)
        {
          int v16 = *((_DWORD *)v17 + 6);
          goto LABEL_24;
        }
      }
LABEL_25:
      ++v9;
      v10 += 8;
    }
    while (v8 != v9);
  }
  CFDictionaryRef v18 = (const __CFDictionary *)(*(uint64_t (**)(void))(**(void **)(a1 + 112) + 40))(*(void *)(a1 + 112));
  if (v18)
  {
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 0x40000000;
    void v21[2] = ___ZNK2CI16ColorKernelImage18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke;
    v21[3] = &__block_descriptor_tmp_10;
    v21[4] = a2;
    char v22 = v7;
    __CFDictionary::for_each(v18, v21);
  }
  uint64_t result = *(unsigned int *)(a1 + 172);
  if (result)
  {
    double v20 = CI::name_for_format(result);
    return fprintf(a2, "%coutputFormat=%s", v7, v20);
  }
  return result;
}

void __CFDictionary::for_each(const __CFDictionary *a1, void *a2)
{
  if (a1 && CFDictionaryGetCount(a1))
  {
    CFDictionaryApplyFunction(a1, (CFDictionaryApplierFunction)__CFDictionary::_dictionaryApplierFunction, a2);
  }
}

void ___ZNK2CI16ColorKernelImage18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke(uint64_t a1, __CFObject *a2, __CFObject *a3)
{
  fputc(*(char *)(a1 + 40), *(FILE **)(a1 + 32));
  __CFObject::fprint(a2, *(FILE **)(a1 + 32), v6);
  fputc(61, *(FILE **)(a1 + 32));
  uint64_t v8 = *(FILE **)(a1 + 32);

  __CFObject::fprint(a3, v8, v7);
}

void __CFObject::fprint(__CFObject *this, FILE *a2, __sFILE *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (this)
  {
    CFTypeID v5 = CFGetTypeID(this);
    if (v5 == CFBooleanGetTypeID())
    {
      __CFBoolean::fprint((uint64_t)this, a2, v6);
    }
    else
    {
      CFTypeID v7 = CFGetTypeID(this);
      if (v7 == CFNumberGetTypeID())
      {
        __CFNumber::fprint(this, a2, v8);
      }
      else
      {
        CFTypeID v9 = CFGetTypeID(this);
        if (v9 == CFStringGetTypeID()) {
          CFStringRef v10 = (const __CFString *)CFRetain(this);
        }
        else {
          CFStringRef v10 = CFCopyDescription(this);
        }
        CFStringRef v11 = v10;
        if (v10)
        {
          bzero(buffer, 0x400uLL);
          CStringPtr = CFStringGetCStringPtr(v11, 0x8000100u);
          if (!CStringPtr)
          {
            if (CFStringGetCString(v11, buffer, 1024, 0x8000100u)) {
              CStringPtr = buffer;
            }
            else {
              CStringPtr = 0;
            }
          }
          fputs(CStringPtr, a2);
          CFRelease(v11);
        }
      }
    }
  }
}

uint64_t CI::ColorKernelImage::shape_for_graphviz(CI::ColorKernelImage *this)
{
  return 1;
}

uint64_t CI::ColorKernelImage::is_warp(CI::ColorKernelImage *this)
{
  return 0;
}

uint64_t CI::ColorKernelImage::output_format(CI::ColorKernelImage *this)
{
  return *((unsigned int *)this + 43);
}

uint64_t non-virtual thunk to'CI::ColorKernelImage::type(CI::ColorKernelImage *this)
{
  return 11;
}

uint64_t __CFDictionary::_dictionaryApplierFunction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a3, a1, a2);
}

uint64_t __CFBoolean::fprint(uint64_t this, FILE *__stream, __sFILE *a3)
{
  if (this)
  {
    uint64_t v4 = this;
    if (*MEMORY[0x1E4F1CFD0] == this) {
      this = fwrite("true", 4uLL, 1uLL, __stream);
    }
    if (*MEMORY[0x1E4F1CFC8] == v4)
    {
      return fwrite("false", 5uLL, 1uLL, __stream);
    }
  }
  return this;
}

const __CFNumber *__CFNumber::fprint(const __CFNumber *this, FILE *a2, __sFILE *a3)
{
  if (this)
  {
    CFNumberRef v4 = this;
    CFTypeID v5 = CFGetTypeID(this);
    this = (const __CFNumber *)CFNumberGetTypeID();
    if ((const __CFNumber *)v5 == this)
    {
      uint64_t valuePtr = 0;
      if (CFNumberIsFloatType(v4))
      {
        CFNumberGetValue(v4, kCFNumberDoubleType, &valuePtr);
        return (const __CFNumber *)fprintf(a2, "%g");
      }
      else
      {
        CFNumberGetValue(v4, kCFNumberLongLongType, &valuePtr);
        return (const __CFNumber *)fprintf(a2, "%lld");
      }
    }
  }
  return this;
}

uint64_t CI::InstanceCounted<(CI::Type)11>::type()
{
  return 11;
}

void *CI::InstanceCounted<(CI::Type)11>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AA08;
  atomic_fetch_add(&dword_1EB466E78[9], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)11>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AA08;
  atomic_fetch_add(&dword_1EB466E78[9], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::GeneralKernelImage::GeneralKernelImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, int a6, int a7, double a8, double a9, double a10, double a11)
{
  *(double *)&long long v39 = a8;
  *((double *)&v39 + 1) = a9;
  *(double *)&long long v40 = a10;
  *((double *)&v40 + 1) = a11;
  CI::Image::Image((__n128 *)a1);
  v18[13] = &unk_1EE45AA58;
  atomic_fetch_add(&dword_1EB466E78[11], 1u);
  *CFDictionaryRef v18 = &unk_1EE45CD58;
  v18[13] = &unk_1EE45CEA8;
  std::vector<CGRect>::vector(v18 + 16, a4);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  if (a2)
  {
    uint64_t v19 = a2;
    if (*(unsigned char *)(a2 + 12)) {
      uint64_t v19 = CI::Object::ref(a2);
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  *(void *)(a1 + 112) = v19;
  *(void *)(a1 + 120) = a3;
  long long v20 = v40;
  *(_OWORD *)(a1 + 152) = v39;
  *(_OWORD *)(a1 + 168) = v20;
  *(void *)(a1 + 184) = _Block_copy(a5);
  if (a6)
  {
    *(unsigned char *)(a1 + 192) = a7;
    int8x16_t v21 = (unsigned char *)(a1 + 192);
    *(_DWORD *)(a1 + 196) = a6;
    int v22 = a6;
  }
  else
  {
    *(unsigned char *)(a1 + 192) = a7;
    int8x16_t v21 = (unsigned char *)(a1 + 192);
    int v22 = *(_DWORD *)(*(void *)(a1 + 112) + 120);
    *(_DWORD *)(a1 + 196) = v22;
    if (!v22) {
      goto LABEL_10;
    }
  }
  if ((CI::format_has_alpha(v22) & 1) == 0) {
    *int8x16_t v21 = 1;
  }
LABEL_10:
  *(_DWORD *)(a1 + 72) = 0;
  int v23 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  if (v23 >= 1)
  {
    uint64_t v24 = 0;
    unsigned int v25 = *(_DWORD *)(a1 + 72);
    do
    {
      if (v25 <= *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v24) + 72) + 1) {
        unsigned int v25 = *(_DWORD *)((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v24) + 72) + 1;
      }
      else {
        unsigned int v25 = *(_DWORD *)(a1 + 72);
      }
      *(_DWORD *)(a1 + 72) = v25;
      uint64_t v24 = (v24 + 1);
    }
    while (v23 != v24);
  }
  XXH64_reset(v38, 0);
  int __src = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  XXH64_update((uint64_t)v38, (char *)&__src, 4uLL);
  (*(void (**)(uint64_t, int64x2_t *))(*(void *)a2 + 64))(a2, v38);
  float32x2_t v26 = *(int **)(a1 + 120);
  if (*v26 >= 1)
  {
    unint64_t v27 = 0;
    uint64_t v28 = 6;
    do
    {
      if (v27 > 9) {
        float32x4_t v29 = (CI::XXHashHelper **)(*((void *)v26 + 2) + 8 * (v27 - 10));
      }
      else {
        float32x4_t v29 = (CI::XXHashHelper **)&v26[v28];
      }
      CI::Kernel::add_argument_to_digest((CI::Kernel *)v38, *v29, 0);
      ++v27;
      float32x2_t v26 = *(int **)(a1 + 120);
      v28 += 2;
    }
    while ((uint64_t)v27 < *v26);
  }
  XXH64_update((uint64_t)v38, (char *)&v39, 0x20uLL);
  int __src = a6;
  XXH64_update((uint64_t)v38, (char *)&__src, 4uLL);
  int __src = a7;
  XXH64_update((uint64_t)v38, (char *)&__src, 4uLL);
  *(void *)(a1 + 80) = XXH64_digest((uint64_t)v38);
  XXH64_reset(v38, 0);
  int __src = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  XXH64_update((uint64_t)v38, (char *)&__src, 4uLL);
  (*(void (**)(uint64_t, int64x2_t *))(*(void *)a2 + 64))(a2, v38);
  long long v30 = *(int **)(a1 + 120);
  if (*v30 >= 1)
  {
    unint64_t v31 = 0;
    uint64_t v32 = 6;
    do
    {
      if (v31 > 9) {
        int v33 = (CI::XXHashHelper **)(*((void *)v30 + 2) + 8 * (v31 - 10));
      }
      else {
        int v33 = (CI::XXHashHelper **)&v30[v32];
      }
      CI::Kernel::add_argument_to_digest((CI::Kernel *)v38, *v33, (const CI::Object *)1);
      ++v31;
      long long v30 = *(int **)(a1 + 120);
      v32 += 2;
    }
    while ((uint64_t)v31 < *v30);
  }
  XXH64_update((uint64_t)v38, (char *)&v39, 0x20uLL);
  int __src = a6;
  XXH64_update((uint64_t)v38, (char *)&__src, 4uLL);
  int __src = a7;
  XXH64_update((uint64_t)v38, (char *)&__src, 4uLL);
  *(void *)(a1 + 88) = XXH64_digest((uint64_t)v38);
  *(unsigned char *)(a1 + 96) = *(void *)(a2 + 48) != 0;
  if (v23 >= 1)
  {
    uint64_t v34 = 0;
    do
    {
      if (*(unsigned char *)((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, v34) + 96)) {
        BOOL v35 = *(unsigned char *)(a1 + 96) == 0;
      }
      else {
        BOOL v35 = 1;
      }
      char v36 = !v35;
      *(unsigned char *)(a1 + 96) = v36;
      uint64_t v34 = (v34 + 1);
    }
    while (v23 != v34);
  }
  *(unsigned char *)(a1 + 97) = 0;
  return a1;
}

void CI::GeneralKernelImage::~GeneralKernelImage(CI::GeneralKernelImage *this)
{
  *(void *)this = &unk_1EE45CD58;
  *((void *)this + 13) = &unk_1EE45CEA8;
  uint64_t v2 = (CI::Object *)*((void *)this + 14);
  if (v2 && *((unsigned char *)v2 + 12)) {
    CI::Object::unref(v2);
  }
  unint64_t v3 = (CI::SerialObjectPtrArray *)*((void *)this + 15);
  if (v3)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v3);
    MEMORY[0x1997023B0]();
  }
  _Block_release(*((const void **)this + 23));
  CFNumberRef v4 = (void *)*((void *)this + 16);
  if (v4)
  {
    *((void *)this + 17) = v4;
    operator delete(v4);
  }
  *((void *)this + 13) = &unk_1EE45AA58;
  atomic_fetch_add(&dword_1EB466E78[11], 0xFFFFFFFF);

  CI::Image::~Image(this);
}

{
  uint64_t vars8;

  CI::GeneralKernelImage::~GeneralKernelImage(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::GeneralKernelImage::~GeneralKernelImage(CI::GeneralKernelImage *this)
{
}

{
  uint64_t vars8;

  CI::GeneralKernelImage::~GeneralKernelImage((CI::GeneralKernelImage *)((char *)this - 104));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::GeneralKernelImage::add_args_to_hash(uint64_t a1, CI::Kernel *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 112) + 64))(*(void *)(a1 + 112));
  unsigned int __src = **(_DWORD **)(a1 + 120);
  uint64_t v4 = __src;
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  if ((int)v4 >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 24;
    do
    {
      uint64_t v7 = *(void *)(a1 + 120);
      if (v5 > 9) {
        uint64_t v8 = (CI::XXHashHelper **)(*(void *)(v7 + 16) + 8 * (v5 - 10));
      }
      else {
        uint64_t v8 = (CI::XXHashHelper **)(v7 + v6);
      }
      CFTypeID v9 = *v8;
      int v10 = (*(uint64_t (**)(CI::XXHashHelper *))(*(void *)*v8 + 16))(*v8);
      if (!CI::is_any_TypeImage(v10)) {
        CI::Kernel::add_argument_to_digest(a2, v9, 0);
      }
      ++v5;
      v6 += 8;
    }
    while (v4 != v5);
  }
  uint64_t v13 = (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 56))(*(void *)(a1 + 112));
  return XXH64_update((uint64_t)a2, (char *)&v13, 8uLL);
}

double CI::GeneralKernelImage::roi_of_child(CI::GeneralKernelImage *this, CGRect a2, uint64_t a3)
{
  double height = a2.size.height;
  double width = a2.size.width;
  double y = a2.origin.y;
  double x = a2.origin.x;
  if ((a3 & 0x80000000) == 0 && **((_DWORD **)this + 15) > (int)a3)
  {
    if (!CI::GeneralKernelImage::child_type_is_image(this, a3))
    {
      uint64_t v11 = (*(uint64_t (**)(CI::GeneralKernelImage *, uint64_t))(*(void *)this + 48))(this, a3);
      unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
      if (!CI::is_raster_TypeImage(v12)) {
        return *MEMORY[0x1E4F1DB10];
      }
      return (*(double (**)(uint64_t))(*(void *)v11 + 96))(v11);
    }
    uint64_t v9 = *((void *)this + 23);
    if (v9)
    {
      (*(void (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 16))(v9, a3, x, y, width, height);
      return v10;
    }
  }
  return x;
}

BOOL CI::GeneralKernelImage::child_type_is_image(CI::GeneralKernelImage *this, int a2)
{
  uint64_t v2 = **((unsigned int **)this + 15);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  while (1)
  {
    uint64_t v7 = *((void *)this + 14);
    if (*(unsigned char *)(v7 + 12))
    {
      unsigned int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v7 + 144), v5);
      goto LABEL_7;
    }
    if (v5 < *(int *)(v7 + 20)) {
      break;
    }
LABEL_13:
    if (v2 == ++v5) {
      return 0;
    }
  }
  unsigned int type = *(_DWORD *)(*(void *)(v7 + 72) + 4 * v5);
LABEL_7:
  if (type > 4 || ((1 << type) & 0x16) == 0) {
    goto LABEL_13;
  }
  if (v6 != a2)
  {
    ++v6;
    goto LABEL_13;
  }
  return type - 1 < 2;
}

void *CI::GeneralKernelImage::restore_resources(CI::GeneralKernelImage *this, CI::Node *a2)
{
  uint64_t result = (void *)(*(uint64_t (**)(CI::Node *))(*(void *)a2 + 16))(a2);
  if (result == 51)
  {
    uint64_t v5 = (void *)*((void *)this + 23);
    return CI::GeneralKernelNode::set_roi_callback((uint64_t)a2, v5);
  }
  return result;
}

void *CI::GeneralKernelNode::set_roi_callback(uint64_t a1, void *aBlock)
{
  uint64_t v4 = *(const void **)(a1 + 120);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t result = _Block_copy(aBlock);
  *(void *)(a1 + 120) = result;
  return result;
}

uint64_t CI::GeneralKernelImage::print_for_graph_core(CI::GeneralKernelImage *this, __sFILE *a2)
{
  fprintf(a2, "kernel %s", *(const char **)(*((void *)this + 14) + 24));
  uint64_t v4 = **((unsigned int **)this + 15);
  if ((int)v4 >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 24;
    do
    {
      uint64_t v7 = *((void *)this + 15);
      if (v5 > 9) {
        uint64_t v8 = (uint64_t *)(*(void *)(v7 + 16) + 8 * (v5 - 10));
      }
      else {
        uint64_t v8 = (uint64_t *)(v7 + v6);
      }
      uint64_t v9 = *v8;
      if (v5) {
        int v10 = 44;
      }
      else {
        int v10 = 40;
      }
      fputc(v10, a2);
      uint64_t v11 = *((void *)this + 14);
      if (*(unsigned char *)(v11 + 12))
      {
        name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v11 + 144), v5);
      }
      else if ((uint64_t)v5 >= *(int *)(v11 + 20))
      {
        name = 0;
      }
      else
      {
        name = *(const char **)(*(void *)(v11 + 80) + 8 * v5);
      }
      fputs(name, a2);
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
      if (!CI::is_any_TypeImage(v13))
      {
        fputc(61, a2);
        (*(void (**)(uint64_t, __sFILE *, void))(*(void *)v9 + 32))(v9, a2, 0);
      }
      ++v5;
      v6 += 8;
    }
    while (v4 != v5);
  }
  if (v4) {
    fputc(41, a2);
  }
  uint64_t result = *((unsigned int *)this + 49);
  if (result)
  {
    float32x2_t v15 = CI::name_for_format(result);
    return fprintf(a2, " outputFormat=%s", v15);
  }
  return result;
}

void CI::GeneralKernelImage::render_graph_core(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  unint64_t v3 = *(void **)(a1 + 112);
  if (!(*(uint64_t (**)(void *))(*v3 + 72))(v3)
    || v3[4]
    || (*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 77)
  {
    operator new();
  }
  uint64_t v4 = ci_logger_render();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 112) + 24);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
    *(_DWORD *)buf = 136446466;
    uint64_t v9 = v5;
    __int16 v10 = 2082;
    uint64_t v11 = v6;
    _os_log_error_impl(&dword_193671000, v4, OS_LOG_TYPE_ERROR, "Cannot render image (with Metal kernel '%{public}s') using an %{public}s context.", buf, 0x16u);
  }
  operator new();
}

uint64_t CI::GeneralKernelImage::properties(CI::GeneralKernelImage *this)
{
  uint64_t v1 = **((unsigned int **)this + 15);
  if ((int)v1 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v5 = *((void *)this + 14);
    if (*(unsigned char *)(v5 + 12))
    {
      int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v5 + 144), v3);
      goto LABEL_7;
    }
    if (v3 < *(int *)(v5 + 20)) {
      break;
    }
LABEL_8:
    if (v1 == ++v3) {
      return 0;
    }
  }
  int type = *(_DWORD *)(*(void *)(v5 + 72) + 4 * v3);
LABEL_7:
  if ((type - 3) < 0xFFFFFFFE) {
    goto LABEL_8;
  }
  uint64_t v8 = *((void *)this + 15);
  if (v3 > 9) {
    uint64_t v9 = *(void *)(v8 + 16) + 8 * (v3 - 10);
  }
  else {
    uint64_t v9 = v8 + i;
  }
  __int16 v10 = *(uint64_t (**)(void))(**(void **)v9 + 200);

  return v10();
}

uint64_t CI::GeneralKernelImage::avdepthdata(CI::GeneralKernelImage *this)
{
  uint64_t v1 = **((unsigned int **)this + 15);
  if ((int)v1 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v5 = *((void *)this + 14);
    if (*(unsigned char *)(v5 + 12))
    {
      int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v5 + 144), v3);
      goto LABEL_7;
    }
    if (v3 < *(int *)(v5 + 20)) {
      break;
    }
LABEL_8:
    if (v1 == ++v3) {
      return 0;
    }
  }
  int type = *(_DWORD *)(*(void *)(v5 + 72) + 4 * v3);
LABEL_7:
  if ((type - 3) < 0xFFFFFFFE) {
    goto LABEL_8;
  }
  uint64_t v8 = *((void *)this + 15);
  if (v3 > 9) {
    uint64_t v9 = *(void *)(v8 + 16) + 8 * (v3 - 10);
  }
  else {
    uint64_t v9 = v8 + i;
  }
  __int16 v10 = *(uint64_t (**)(void))(**(void **)v9 + 208);

  return v10();
}

uint64_t CI::GeneralKernelImage::avmatte(CI::GeneralKernelImage *this)
{
  uint64_t v1 = **((unsigned int **)this + 15);
  if ((int)v1 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v5 = *((void *)this + 14);
    if (*(unsigned char *)(v5 + 12))
    {
      int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v5 + 144), v3);
      goto LABEL_7;
    }
    if (v3 < *(int *)(v5 + 20)) {
      break;
    }
LABEL_8:
    if (v1 == ++v3) {
      return 0;
    }
  }
  int type = *(_DWORD *)(*(void *)(v5 + 72) + 4 * v3);
LABEL_7:
  if ((type - 3) < 0xFFFFFFFE) {
    goto LABEL_8;
  }
  uint64_t v8 = *((void *)this + 15);
  if (v3 > 9) {
    uint64_t v9 = *(void *)(v8 + 16) + 8 * (v3 - 10);
  }
  else {
    uint64_t v9 = v8 + i;
  }
  __int16 v10 = *(uint64_t (**)(void))(**(void **)v9 + 216);

  return v10();
}

double CI::GeneralKernelImage::headroom(CI::GeneralKernelImage *this)
{
  if (!*(unsigned char *)(*((void *)this + 14) + 164)) {
    return 0.0;
  }
  uint64_t v1 = *(void (**)(void))(*(void *)(*(uint64_t (**)(CI::GeneralKernelImage *, void))(*(void *)this + 48))(this, 0)+ 232);

  v1();
  return result;
}

uint64_t CI::GeneralKernelImage::colorspace(CI::GeneralKernelImage *this)
{
  if (!*(unsigned char *)(*((void *)this + 14) + 164)) {
    return 0;
  }
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::GeneralKernelImage *, void))(*(void *)this + 48))(this, 0)+ 240);

  return v1();
}

uint64_t CI::GeneralKernelImage::ssmatte(CI::GeneralKernelImage *this)
{
  uint64_t v1 = **((unsigned int **)this + 15);
  if ((int)v1 < 1) {
    return 0;
  }
  uint64_t v3 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v5 = *((void *)this + 14);
    if (*(unsigned char *)(v5 + 12))
    {
      int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v5 + 144), v3);
      goto LABEL_7;
    }
    if (v3 < *(int *)(v5 + 20)) {
      break;
    }
LABEL_8:
    if (v1 == ++v3) {
      return 0;
    }
  }
  int type = *(_DWORD *)(*(void *)(v5 + 72) + 4 * v3);
LABEL_7:
  if ((type - 3) < 0xFFFFFFFE) {
    goto LABEL_8;
  }
  uint64_t v8 = *((void *)this + 15);
  if (v3 > 9) {
    uint64_t v9 = *(void *)(v8 + 16) + 8 * (v3 - 10);
  }
  else {
    uint64_t v9 = v8 + i;
  }
  __int16 v10 = *(uint64_t (**)(void))(**(void **)v9 + 224);

  return v10();
}

uint64_t CI::GeneralKernelImage::child_count(CI::GeneralKernelImage *this)
{
  uint64_t v1 = **((unsigned int **)this + 15);
  if ((int)v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *((void *)this + 14);
      if (*(unsigned char *)(v5 + 12)) {
        break;
      }
      if (v3 < *(int *)(v5 + 20))
      {
        unsigned int type = *(_DWORD *)(*(void *)(v5 + 72) + 4 * v3);
        goto LABEL_7;
      }
LABEL_13:
      if (v1 == ++v3) {
        return v4;
      }
    }
    unsigned int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v5 + 144), v3);
LABEL_7:
    if (type > 4 || ((1 << type) & 0x16) == 0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = (v4 + 1);
    }
    goto LABEL_13;
  }
  return 0;
}

uint64_t CI::GeneralKernelImage::child(CI::GeneralKernelImage *this, int a2)
{
  uint64_t v2 = **((unsigned int **)this + 15);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v8 = *((void *)this + 14);
    if (*(unsigned char *)(v8 + 12))
    {
      unsigned int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v8 + 144), v5);
      goto LABEL_7;
    }
    if (v5 < *(int *)(v8 + 20)) {
      break;
    }
LABEL_13:
    if (v2 == ++v5) {
      return 0;
    }
  }
  unsigned int type = *(_DWORD *)(*(void *)(v8 + 72) + 4 * v5);
LABEL_7:
  if (type > 4 || ((1 << type) & 0x16) == 0) {
    goto LABEL_13;
  }
  if (v6 != a2)
  {
    ++v6;
    goto LABEL_13;
  }
  uint64_t v12 = *((void *)this + 15);
  if (v5 > 9) {
    uint64_t v13 = *(void *)(v12 + 16) + 8 * (v5 - 10);
  }
  else {
    uint64_t v13 = v12 + i;
  }
  return *(void *)v13;
}

uint64_t CI::GeneralKernelImage::print_for_graphviz(uint64_t a1, FILE *a2, void *a3, int a4)
{
  if (a4) {
    uint64_t v7 = 32;
  }
  else {
    uint64_t v7 = 10;
  }
  fprintf(a2, "kernel %s", *(const char **)(*(void *)(a1 + 112) + 24));
  uint64_t v8 = **(unsigned int **)(a1 + 120);
  if ((int)v8 >= 1)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 24;
    do
    {
      uint64_t v11 = *(void *)(a1 + 120);
      if (v9 > 9) {
        uint64_t v12 = (void *)(*(void *)(v11 + 16) + 8 * (v9 - 10));
      }
      else {
        uint64_t v12 = (void *)(v11 + v10);
      }
      uint64_t v13 = (_DWORD *)*v12;
      if ((*(int (**)(void))(*(void *)*v12 + 16))(*v12) >= 1
        && (*(int (**)(_DWORD *))(*(void *)v13 + 16))(v13) <= 25
        && (*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1) == 1)
      {
        goto LABEL_25;
      }
      uint64_t v14 = *(void *)(a1 + 112);
      if (*(unsigned char *)(v14 + 12))
      {
        name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v14 + 144), v9);
      }
      else if ((uint64_t)v9 >= *(int *)(v14 + 20))
      {
        name = 0;
      }
      else
      {
        name = *(const char **)(*(void *)(v14 + 80) + 8 * v9);
      }
      fprintf(a2, "%c%s", v7, name);
      if ((*(int (**)(_DWORD *))(*(void *)v13 + 16))(v13) < 1
        || (*(int (**)(_DWORD *))(*(void *)v13 + 16))(v13) > 25)
      {
        fputc(61, a2);
        (*(void (**)(_DWORD *, FILE *, void))(*(void *)v13 + 32))(v13, a2, 0);
      }
      else
      {
        if (CI_GRAPHVIZ_INTERNAL())
        {
          int v16 = v13[25];
LABEL_24:
          fprintf(a2, "=(%d)", v16);
          goto LABEL_25;
        }
        unint64_t v27 = v13;
        float32x4_t v17 = std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v27);
        if (v17)
        {
          int v16 = *((_DWORD *)v17 + 6);
          goto LABEL_24;
        }
      }
LABEL_25:
      ++v9;
      v10 += 8;
    }
    while (v8 != v9);
  }
  CFDictionaryRef v18 = (const __CFDictionary *)(*(uint64_t (**)(void))(**(void **)(a1 + 112) + 40))(*(void *)(a1 + 112));
  if (v18)
  {
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 0x40000000;
    v25[2] = ___ZNK2CI18GeneralKernelImage18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke;
    v25[3] = &__block_descriptor_tmp_11;
    v25[4] = a2;
    char v26 = v7;
    __CFDictionary::for_each(v18, v25);
  }
  uint64_t result = *(unsigned int *)(a1 + 196);
  if (result)
  {
    long long v20 = CI::name_for_format(result);
    uint64_t result = fprintf(a2, "%coutputFormat=%s", v7, v20);
  }
  int v21 = *(_DWORD *)(a1 + 200);
  if (v21)
  {
    if (*(_DWORD *)(a1 + 204))
    {
      int v22 = *(_DWORD *)(a1 + 208);
      if (v22) {
        uint64_t result = fprintf(a2, "%cthreadsPerGroup=(%d,%d,%d)", v7, v21, *(_DWORD *)(a1 + 204), v22);
      }
    }
  }
  int v23 = *(_DWORD *)(a1 + 212);
  if (v23 && *(_DWORD *)(a1 + 216))
  {
    int v24 = *(_DWORD *)(a1 + 220);
    if (v24) {
      return fprintf(a2, "%cthreadgroupsPerGrid=(%d,%d,%d)", v7, v23, *(_DWORD *)(a1 + 216), v24);
    }
  }
  return result;
}

void ___ZNK2CI18GeneralKernelImage18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke(uint64_t a1, __CFObject *a2, __CFObject *a3)
{
  fputc(*(char *)(a1 + 40), *(FILE **)(a1 + 32));
  __CFObject::fprint(a2, *(FILE **)(a1 + 32), v6);
  fputc(61, *(FILE **)(a1 + 32));
  uint64_t v8 = *(FILE **)(a1 + 32);

  __CFObject::fprint(a3, v8, v7);
}

uint64_t CI::GeneralKernelImage::type(CI::GeneralKernelImage *this)
{
  return 13;
}

uint64_t CI::GeneralKernelImage::shape_for_graphviz(CI::GeneralKernelImage *this)
{
  return 1;
}

uint64_t CI::GeneralKernelImage::color_for_graphviz(CI::GeneralKernelImage *this)
{
  return 9;
}

double CI::GeneralKernelImage::extent(CI::GeneralKernelImage *this)
{
  return *((double *)this + 19);
}

double CI::GeneralKernelImage::extent_unclamped(CI::GeneralKernelImage *this)
{
  return *((double *)this + 19);
}

uint64_t CI::GeneralKernelImage::alpha_one(CI::GeneralKernelImage *this)
{
  return *((unsigned __int8 *)this + 192);
}

uint64_t CI::GeneralKernelImage::output_format(CI::GeneralKernelImage *this)
{
  return *((unsigned int *)this + 49);
}

uint64_t non-virtual thunk to'CI::GeneralKernelImage::type(CI::GeneralKernelImage *this)
{
  return 13;
}

uint64_t CI::InstanceCounted<(CI::Type)13>::type()
{
  return 13;
}

void *CI::InstanceCounted<(CI::Type)13>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AA58;
  atomic_fetch_add(&dword_1EB466E78[11], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)13>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AA58;
  atomic_fetch_add(&dword_1EB466E78[11], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::WarpKernelImage::WarpKernelImage(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4, const void *a5, double a6, double a7, double a8, double a9)
{
  CFDictionaryRef v18 = CI::ImageWithChild::ImageWithChild((CI::ImageWithChild *)a1, (CI::Image *)a2);
  *((void *)v18 + 14) = &unk_1EE45AA30;
  atomic_fetch_add(&dword_1EB466E78[10], 1u);
  *(void *)CFDictionaryRef v18 = &unk_1EE45B770;
  *((void *)v18 + 14) = &unk_1EE45B8C8;
  *((void *)v18 + 15) = a3;
  if (a3 && *(unsigned char *)(a3 + 12)) {
    CI::Object::ref(a3);
  }
  *(void *)(a1 + 128) = a4;
  *(double *)(a1 + 136) = a6;
  *(double *)(a1 + 144) = a7;
  *(double *)(a1 + 152) = a8;
  *(double *)(a1 + 160) = a9;
  *(void *)(a1 + 168) = _Block_copy(a5);
  *(void *)(a1 + 80) = CI::WarpKernelImage::makeDigest(a2[10], a3, a4, a6, a7, a8, a9);
  *(void *)(a1 + 88) = CI::WarpKernelImage::makeDigest(a2[11], a3, a4, a6, a7, a8, a9);
  if (!*(void *)(a3 + 48)) {
    *(unsigned char *)(a1 + 96) = 0;
  }
  *(unsigned char *)(a1 + 97) = 0;
  return a1;
}

unint64_t CI::WarpKernelImage::makeDigest(uint64_t a1, uint64_t a2, int *a3, double a4, double a5, double a6, double a7)
{
  *(double *)float32x2_t v15 = a4;
  *(double *)&v15[1] = a5;
  *(double *)&void v15[2] = a6;
  *(double *)&v15[3] = a7;
  XXH64_reset(v14, 0);
  LODWORD(__src) = 12;
  XXH64_update((uint64_t)v14, (char *)&__src, 4uLL);
  uint64_t __src = a1;
  XXH64_update((uint64_t)v14, (char *)&__src, 8uLL);
  (*(void (**)(uint64_t, int64x2_t *))(*(void *)a2 + 64))(a2, v14);
  if (*a3 >= 1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = (CI::XXHashHelper **)(a3 + 6);
    do
    {
      uint64_t v12 = v11;
      if (v10 >= 0xA) {
        uint64_t v12 = (CI::XXHashHelper **)(*((void *)a3 + 2) + 8 * (v10 - 10));
      }
      CI::Kernel::add_argument_to_digest((CI::Kernel *)v14, *v12, 0);
      ++v10;
      ++v11;
    }
    while ((uint64_t)v10 < *a3);
  }
  XXH64_update((uint64_t)v14, (char *)v15, 0x20uLL);
  return XXH64_digest((uint64_t)v14);
}

void CI::WarpKernelImage::~WarpKernelImage(CI::WarpKernelImage *this)
{
  *(void *)this = &unk_1EE45B770;
  *((void *)this + 14) = &unk_1EE45B8C8;
  uint64_t v2 = (CI::Object *)*((void *)this + 15);
  if (v2 && *((unsigned char *)v2 + 12)) {
    CI::Object::unref(v2);
  }
  uint64_t v3 = (CI::SerialObjectPtrArray *)*((void *)this + 16);
  if (v3)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v3);
    MEMORY[0x1997023B0]();
  }
  _Block_release(*((const void **)this + 21));
  *((void *)this + 21) = 0;
  *((void *)this + 14) = &unk_1EE45AA30;
  atomic_fetch_add(&dword_1EB466E78[10], 0xFFFFFFFF);

  CI::ImageWithChild::~ImageWithChild(this);
}

{
  uint64_t vars8;

  CI::WarpKernelImage::~WarpKernelImage(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::WarpKernelImage::~WarpKernelImage(CI::WarpKernelImage *this)
{
}

{
  uint64_t vars8;

  CI::WarpKernelImage::~WarpKernelImage((CI::WarpKernelImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::WarpKernelImage::add_args_to_hash(uint64_t a1, CI::Kernel *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 120) + 64))(*(void *)(a1 + 120));
  unsigned int __src = **(_DWORD **)(a1 + 128);
  uint64_t v4 = __src;
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  if ((int)v4 >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 24;
    do
    {
      uint64_t v7 = *(void *)(a1 + 128);
      if (v5 > 9) {
        uint64_t v8 = (CI::XXHashHelper **)(*(void *)(v7 + 16) + 8 * (v5 - 10));
      }
      else {
        uint64_t v8 = (CI::XXHashHelper **)(v7 + v6);
      }
      CI::Kernel::add_argument_to_digest(a2, *v8, 0);
      ++v5;
      v6 += 8;
    }
    while (v4 != v5);
  }
  uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 120) + 56))(*(void *)(a1 + 120));
  return XXH64_update((uint64_t)a2, (char *)&v11, 8uLL);
}

void CI::WarpKernelImage::render_graph_core(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void **)(a1 + 120);
  if (!(*(uint64_t (**)(void *))(*v3 + 72))(v3)
    || v3[4]
    || (*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 77)
  {
    operator new();
  }
  uint64_t v4 = ci_logger_render();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 120) + 24);
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 304))(a2);
    *(_DWORD *)buf = 136446466;
    uint64_t v9 = v5;
    __int16 v10 = 2082;
    uint64_t v11 = v6;
    _os_log_error_impl(&dword_193671000, v4, OS_LOG_TYPE_ERROR, "Cannot render image (with Metal kernel '%{public}s') using an %{public}s context.", buf, 0x16u);
  }
  operator new();
}

void *CI::WarpKernelImage::restore_resources(CI::WarpKernelImage *this, CI::Node *a2)
{
  uint64_t result = (void *)(*(uint64_t (**)(CI::Node *))(*(void *)a2 + 16))(a2);
  if (result == 50)
  {
    uint64_t v5 = (void *)*((void *)this + 21);
    return CI::WarpKernelNode::set_roi_callback((uint64_t)a2, v5);
  }
  return result;
}

void *CI::WarpKernelNode::set_roi_callback(uint64_t a1, void *aBlock)
{
  uint64_t v4 = *(const void **)(a1 + 96);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t result = _Block_copy(aBlock);
  *(void *)(a1 + 96) = result;
  return result;
}

uint64_t CI::WarpKernelImage::print_for_graph_core(CI::WarpKernelImage *this, __sFILE *a2)
{
  fprintf(a2, "warpkernel %s", *(const char **)(*((void *)this + 15) + 24));
  uint64_t v4 = **((unsigned int **)this + 16);
  if ((int)v4 >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 24;
    do
    {
      uint64_t v7 = *((void *)this + 16);
      if (v5 > 9) {
        uint64_t v8 = (uint64_t *)(*(void *)(v7 + 16) + 8 * (v5 - 10));
      }
      else {
        uint64_t v8 = (uint64_t *)(v7 + v6);
      }
      uint64_t v9 = *v8;
      if (v5) {
        int v10 = 44;
      }
      else {
        int v10 = 40;
      }
      fputc(v10, a2);
      uint64_t v11 = *((void *)this + 15);
      if (*(unsigned char *)(v11 + 12))
      {
        name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v11 + 144), v5);
      }
      else if ((uint64_t)v5 >= *(int *)(v11 + 20))
      {
        name = 0;
      }
      else
      {
        name = *(const char **)(*(void *)(v11 + 80) + 8 * v5);
      }
      fputs(name, a2);
      int v13 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
      if (!CI::is_any_TypeImage(v13))
      {
        fputc(61, a2);
        (*(void (**)(uint64_t, __sFILE *, void))(*(void *)v9 + 32))(v9, a2, 0);
      }
      ++v5;
      v6 += 8;
    }
    while (v4 != v5);
  }
  if (v4) {
    fputc(41, a2);
  }
  uint64_t result = (*(uint64_t (**)(CI::WarpKernelImage *))(*(void *)this + 144))(this);
  if (result)
  {
    int v15 = (*(uint64_t (**)(CI::WarpKernelImage *))(*(void *)this + 144))(this);
    int v16 = CI::name_for_format(v15);
    return fprintf(a2, " outputFormat=%s", v16);
  }
  return result;
}

uint64_t CI::WarpKernelImage::roi_of_child(uint64_t this, CGRect a2, unsigned int a3)
{
  if (a3 <= 1)
  {
    this = *(void *)(this + 168);
    if (this) {
      return (*(uint64_t (**)(uint64_t, void, CGPoint, __n128, CGSize, __n128))(this + 16))(this, 0, a2.origin, *(__n128 *)&a2.origin.y, a2.size, *(__n128 *)&a2.size.height);
    }
  }
  return this;
}

uint64_t CI::WarpKernelImage::print_for_graphviz(uint64_t a1, FILE *a2, void *a3, int a4)
{
  if (a4) {
    uint64_t v7 = 32;
  }
  else {
    uint64_t v7 = 10;
  }
  fprintf(a2, "warpkernel %s", *(const char **)(*(void *)(a1 + 120) + 24));
  uint64_t v8 = **(unsigned int **)(a1 + 128);
  if ((int)v8 >= 1)
  {
    unint64_t v9 = 0;
    uint64_t v10 = 24;
    do
    {
      uint64_t v11 = *(void *)(a1 + 128);
      if (v9 > 9) {
        uint64_t v12 = (_DWORD **)(*(void *)(v11 + 16) + 8 * (v9 - 10));
      }
      else {
        uint64_t v12 = (_DWORD **)(v11 + v10);
      }
      int v13 = *v12;
      uint64_t v14 = *(void *)(a1 + 120);
      if (*(unsigned char *)(v14 + 12))
      {
        name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v14 + 144), v9);
      }
      else if ((uint64_t)v9 >= *(int *)(v14 + 20))
      {
        name = 0;
      }
      else
      {
        name = *(const char **)(*(void *)(v14 + 80) + 8 * v9);
      }
      fprintf(a2, "%c%s", v7, name);
      int v16 = (*(uint64_t (**)(_DWORD *))(*(void *)v13 + 16))(v13);
      if (CI::is_any_TypeImage(v16))
      {
        if (CI_GRAPHVIZ_INTERNAL())
        {
          int v17 = v13[25];
LABEL_20:
          fprintf(a2, "=(%d)", v17);
          goto LABEL_21;
        }
        unsigned int v25 = v13;
        CFDictionaryRef v18 = std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v25);
        if (v18)
        {
          int v17 = *((_DWORD *)v18 + 6);
          goto LABEL_20;
        }
      }
      else
      {
        fputc(61, a2);
        (*(void (**)(_DWORD *, FILE *, void))(*(void *)v13 + 32))(v13, a2, 0);
      }
LABEL_21:
      ++v9;
      v10 += 8;
    }
    while (v8 != v9);
  }
  CFDictionaryRef v19 = (const __CFDictionary *)(*(uint64_t (**)(void))(**(void **)(a1 + 120) + 40))(*(void *)(a1 + 120));
  if (v19)
  {
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 0x40000000;
    v23[2] = ___ZNK2CI15WarpKernelImage18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke;
    unsigned __int16 v23[3] = &__block_descriptor_tmp_12;
    _OWORD v23[4] = a2;
    char v24 = v7;
    __CFDictionary::for_each(v19, v23);
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
  if (result)
  {
    int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 144))(a1);
    int v22 = CI::name_for_format(v21);
    return fprintf(a2, "%coutputFormat=%s", v7, v22);
  }
  return result;
}

void ___ZNK2CI15WarpKernelImage18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke(uint64_t a1, __CFObject *a2, __CFObject *a3)
{
  fputc(*(char *)(a1 + 40), *(FILE **)(a1 + 32));
  __CFObject::fprint(a2, *(FILE **)(a1 + 32), v6);
  fputc(61, *(FILE **)(a1 + 32));
  uint64_t v8 = *(FILE **)(a1 + 32);

  __CFObject::fprint(a3, v8, v7);
}

uint64_t CI::WarpKernelImage::type(CI::WarpKernelImage *this)
{
  return 12;
}

uint64_t CI::WarpKernelImage::shape_for_graphviz(CI::WarpKernelImage *this)
{
  return 1;
}

uint64_t CI::WarpKernelImage::color_for_graphviz(CI::WarpKernelImage *this)
{
  return 5;
}

double CI::WarpKernelImage::extent(CI::WarpKernelImage *this)
{
  return *((double *)this + 17);
}

double CI::WarpKernelImage::extent_unclamped(CI::WarpKernelImage *this)
{
  return *((double *)this + 17);
}

uint64_t CI::WarpKernelImage::alpha_one(CI::WarpKernelImage *this)
{
  v5.origin.double x = (*(double (**)(void))(**((void **)this + 13) + 88))(*((void *)this + 13));
  uint64_t result = CGRectIsInfinite(v5);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 13) + 128);
    return v3();
  }
  return result;
}

uint64_t CI::WarpKernelImage::is_warp(CI::WarpKernelImage *this)
{
  return 1;
}

uint64_t CI::WarpKernelImage::output_format(CI::WarpKernelImage *this)
{
  v5.origin.double x = (*(double (**)(void))(**((void **)this + 13) + 88))(*((void *)this + 13));
  uint64_t result = CGRectIsInfinite(v5);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 13) + 144);
    return v3();
  }
  return result;
}

uint64_t CI::WarpKernelImage::headroom(CI::WarpKernelImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 232))();
}

uint64_t CI::WarpKernelImage::colorspace(CI::WarpKernelImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 240))();
}

uint64_t CI::ImageWithChild::render_graph_core()
{
  return 0;
}

uint64_t non-virtual thunk to'CI::WarpKernelImage::type(CI::WarpKernelImage *this)
{
  return 12;
}

uint64_t CI::InstanceCounted<(CI::Type)12>::type()
{
  return 12;
}

void *CI::InstanceCounted<(CI::Type)12>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AA30;
  atomic_fetch_add(&dword_1EB466E78[10], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)12>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AA30;
  atomic_fetch_add(&dword_1EB466E78[10], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void CI::NoopImage::render_graph_core(unsigned __int8 *a1, int a2, CI::Object *this)
{
  if (this) {
    CI::Object::ref((uint64_t)this);
  }
  int v4 = a1[120];
  if (v4 != 1 && v4 != 255 && a1[121])
  {
    v6.origin.double x = (*(double (**)(unsigned __int8 *))(*(void *)a1 + 88))(a1);
    CGRectIsInfinite(v6);
  }

  CI::NoopNode::append_to_tree_and_unref();
}

void CI::NoopImage::~NoopImage(CI::NoopImage *this)
{
  *((void *)this + 14) = &unk_1EE45AAA8;
  atomic_fetch_add(&dword_1EB466E78[13], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild(this);
}

{
  uint64_t vars8;

  *((void *)this + 14) = &unk_1EE45AAA8;
  atomic_fetch_add(&dword_1EB466E78[13], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::NoopImage::type(CI::NoopImage *this)
{
  return 15;
}

uint64_t CI::NoopImage::shape_for_graphviz(CI::NoopImage *this)
{
  return 3;
}

uint64_t CI::NoopImage::color_for_graphviz(CI::NoopImage *this)
{
  return 0;
}

uint64_t CI::NoopImage::output_format(CI::NoopImage *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::NoopImage *, void))(*(void *)this + 48))(this, 0)+ 144);

  return v1();
}

size_t CI::NoopImage::print_for_graph_core(CI::NoopImage *this, __sFILE *__stream)
{
  int v3 = *((unsigned __int8 *)this + 120);
  if (v3 == 1)
  {
    int v4 = "intermediate-cached";
    size_t v5 = 19;
  }
  else if (v3 == 255)
  {
    int v4 = "intermediate-uncached";
    size_t v5 = 21;
  }
  else
  {
    int v4 = "intermediate";
    size_t v5 = 12;
  }
  return fwrite(v4, v5, 1uLL, __stream);
}

uint64_t CI::NoopImage::headroom(CI::NoopImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 232))();
}

uint64_t CI::NoopImage::colorspace(CI::NoopImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 240))();
}

double CI::NoopImage::region_of_child(CI::NoopImage *this, CGRect a2)
{
  CGFloat height = a2.size.height;
  CGFloat width = a2.size.width;
  CGFloat y = a2.origin.y;
  double x = a2.origin.x;
  if (*((unsigned char *)this + 121))
  {
    v11.origin.double x = (*(double (**)(CI::NoopImage *))(*(void *)this + 88))(this);
    if (!CGRectIsInfinite(v11))
    {
      v15.origin.double x = (*(double (**)(CI::NoopImage *))(*(void *)this + 88))(this);
      v15.origin.CGFloat y = v7;
      v15.size.CGFloat width = v8;
      v15.size.CGFloat height = v9;
      v12.origin.double x = x;
      v12.origin.CGFloat y = y;
      v12.size.CGFloat width = width;
      v12.size.CGFloat height = height;
      if (CGRectIntersectsRect(v12, v15))
      {
        v13.origin.double x = (*(double (**)(CI::NoopImage *))(*(void *)this + 88))(this);
        CGRect v14 = CGRectInset(v13, -1.0, -1.0);
        *(void *)&double x = (unint64_t)CGRectIntegral(v14);
      }
    }
  }
  return x;
}

uint64_t non-virtual thunk to'CI::NoopImage::type(CI::NoopImage *this)
{
  return 15;
}

void non-virtual thunk to'CI::NoopImage::~NoopImage(CI::NoopImage *this)
{
  *(void *)this = &unk_1EE45AAA8;
  atomic_fetch_add(&dword_1EB466E78[13], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::NoopImage *)((char *)this - 112));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45AAA8;
  atomic_fetch_add(&dword_1EB466E78[13], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::NoopImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

CI::PremultiplyNode *CI::PremultiplyImage::render_graph_core(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  int v5 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 184))(a1);
  if (a3)
  {
    CGRect v6 = (CI::PremultiplyNode *)CI::Object::ref(a3);
    CGFloat v7 = CI::PremultiplyNode::append_to_tree(v6, (CI::Node *)a1[30], v5);
    if (v6) {
      CI::Object::unref(v6);
    }
    return v7;
  }
  else
  {
    CGFloat v9 = (CI::Node *)a1[30];
    return CI::PremultiplyNode::append_to_tree(0, v9, v5);
  }
}

void CI::PremultiplyImage::~PremultiplyImage(CI::PremultiplyImage *this)
{
  *((void *)this + 14) = &unk_1EE45AAD0;
  atomic_fetch_add(&dword_1EB466E78[14], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild(this);
}

{
  uint64_t vars8;

  *((void *)this + 14) = &unk_1EE45AAD0;
  atomic_fetch_add(&dword_1EB466E78[14], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::PremultiplyImage::type(CI::PremultiplyImage *this)
{
  return 16;
}

uint64_t CI::PremultiplyImage::shape_for_graphviz(CI::PremultiplyImage *this)
{
  return 2;
}

uint64_t CI::PremultiplyImage::color_for_graphviz(CI::PremultiplyImage *this)
{
  return 4;
}

uint64_t CI::PremultiplyImage::add_args_to_hash(uint64_t a1, uint64_t a2)
{
  int __src = *(_DWORD *)(a1 + 120);
  return XXH64_update(a2, (char *)&__src, 4uLL);
}

uint64_t CI::PremultiplyImage::print_for_graph_core(CI::PremultiplyImage *this, __sFILE *a2)
{
  if (*((_DWORD *)this + 30) == -1) {
    uint64_t v2 = "un";
  }
  else {
    uint64_t v2 = "";
  }
  return fprintf(a2, "%spremultiply", v2);
}

uint64_t CI::PremultiplyImage::headroom(CI::PremultiplyImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 232))();
}

uint64_t CI::PremultiplyImage::colorspace(CI::PremultiplyImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 240))();
}

uint64_t non-virtual thunk to'CI::PremultiplyImage::type(CI::PremultiplyImage *this)
{
  return 16;
}

void non-virtual thunk to'CI::PremultiplyImage::~PremultiplyImage(CI::PremultiplyImage *this)
{
  *(void *)this = &unk_1EE45AAD0;
  atomic_fetch_add(&dword_1EB466E78[14], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::PremultiplyImage *)((char *)this - 112));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45AAD0;
  atomic_fetch_add(&dword_1EB466E78[14], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::PremultiplyImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

void CI::ProcessorImage::ProcessorImage(__n128 *a1, CI::Image *a2)
{
}

{
  CI::ProcessorImage::ProcessorImage(a1, a2);
}

void CI::ImageWithChildren::ImageWithChildren(__n128 *this, CI::Image *a2)
{
  CI::Image::Image(this);
  *uint64_t v2 = &unk_1EE45C918;
  v2[13] = 0;
  operator new();
}

__n128 *CI::ProcessorImage::ProcessorImage(__n128 *a1, CI::SerialObjectPtrArray *a2, const __CFString *a3, unint64_t a4, unsigned __int8 a5, void *a6, void *a7, unsigned __int32 a8, double a9, double a10, double a11, double a12, unsigned __int8 a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17, unsigned __int8 a18, const void *a19, const void *a20)
{
  v43.n128_f64[0] = a9;
  v43.n128_f64[1] = a10;
  v44.n128_f64[0] = a11;
  v44.n128_f64[1] = a12;
  unsigned int v25 = CI::ImageWithChildren::ImageWithChildren(a1, a2);
  v25[7].n128_u64[0] = (unint64_t)&unk_1EE45AAF8;
  atomic_fetch_add(&dword_1EB466E78[15], 1u);
  v25->n128_u64[0] = (unint64_t)&unk_1EE459E00;
  __n128 v26 = v44;
  *(__n128 *)((char *)v25 + 120) = v43;
  v25[7].n128_u64[0] = (unint64_t)&unk_1EE459F50;
  v25[10].n128_u8[8] = 0;
  v25[14].n128_u8[0] = 0;
  v25[12].n128_u64[0] = 0;
  v25[12].n128_u32[2] = 0;
  *(__n128 *)((char *)v25 + 136) = v26;
  a1[9].n128_u64[1] = (unint64_t)CFRetain(a3);
  a1[10].n128_u64[0] = a4;
  a1[10].n128_u8[8] = a5;
  if (a2 && (int v27 = *(_DWORD *)a2) != 0)
  {
    uint64_t v28 = malloc_type_calloc(4uLL, v27, 0x7B4513B0uLL);
    a1[11].n128_u64[0] = (unint64_t)v28;
    memcpy(v28, a6, 4 * v27);
    char v29 = 1;
    long long v30 = malloc_type_calloc(1uLL, v27, 0x53C4D362uLL);
    a1[12].n128_u64[0] = (unint64_t)v30;
    memcpy(v30, a7, v27);
    unint64_t v31 = _Block_copy(a19);
  }
  else
  {
    unint64_t v31 = 0;
    char v29 = 0;
    int v27 = 0;
    a1[11].n128_u64[0] = 0;
  }
  a1[13].n128_u64[0] = (unint64_t)v31;
  a1[11].n128_u32[2] = a8;
  a1[12].n128_u8[8] = a13;
  a1[12].n128_u8[10] = a15;
  a1[12].n128_u8[9] = a16;
  a1[12].n128_u8[11] = a17;
  a1[14].n128_u8[0] = a14;
  a1[12].n128_u8[12] = v29 & a18;
  a1[13].n128_u64[1] = (unint64_t)_Block_copy(a20);
  XXH64_reset(v42, 0);
  *(_DWORD *)double v45 = (*(uint64_t (**)(__n128 *))(a1->n128_u64[0] + 16))(a1);
  XXH64_update((uint64_t)v42, v45, 4uLL);
  if (v27 >= 1)
  {
    uint64_t v32 = 0;
    do
    {
      *(void *)double v45 = *(void *)((*(uint64_t (**)(__n128 *, uint64_t))(a1->n128_u64[0] + 48))(a1, v32) + 80);
      XXH64_update((uint64_t)v42, v45, 8uLL);
      uint64_t v32 = (v32 + 1);
    }
    while (v27 != v32);
  }
  XXH64_update((uint64_t)v42, (char *)&v43, 0x20uLL);
  CI::XXHashHelper::add((CI::XXHashHelper *)v42, a3);
  *(void *)double v45 = a4;
  XXH64_update((uint64_t)v42, v45, 8uLL);
  if (a6) {
    BOOL v33 = v27 == 0;
  }
  else {
    BOOL v33 = 1;
  }
  int v34 = !v33;
  if (!v33) {
    XXH64_update((uint64_t)v42, (char *)a6, 4 * v27);
  }
  if (a7) {
    BOOL v35 = v27 == 0;
  }
  else {
    BOOL v35 = 1;
  }
  int v36 = !v35;
  if (!v35) {
    XXH64_update((uint64_t)v42, (char *)a7, v27);
  }
  *(_DWORD *)double v45 = a8;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)double v45 = a13;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)double v45 = a14;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)double v45 = a16;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)double v45 = a17;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)double v45 = a18;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  a1[5].n128_u64[0] = XXH64_digest((uint64_t)v42);
  XXH64_reset(v42, 0);
  *(_DWORD *)double v45 = (*(uint64_t (**)(__n128 *))(a1->n128_u64[0] + 16))(a1);
  XXH64_update((uint64_t)v42, v45, 4uLL);
  if (v27 >= 1)
  {
    uint64_t v37 = 0;
    do
    {
      *(void *)double v45 = *(void *)((*(uint64_t (**)(__n128 *, uint64_t))(a1->n128_u64[0] + 48))(a1, v37) + 88);
      XXH64_update((uint64_t)v42, v45, 8uLL);
      uint64_t v37 = (v37 + 1);
    }
    while (v27 != v37);
  }
  XXH64_update((uint64_t)v42, (char *)&v43, 0x20uLL);
  CI::XXHashHelper::add((CI::XXHashHelper *)v42, a3);
  *(void *)double v45 = a4;
  XXH64_update((uint64_t)v42, v45, 8uLL);
  if (v34) {
    XXH64_update((uint64_t)v42, (char *)a6, 4 * v27);
  }
  if (v36) {
    XXH64_update((uint64_t)v42, (char *)a7, v27);
  }
  *(_DWORD *)double v45 = a8;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)double v45 = a13;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)double v45 = a14;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)double v45 = a16;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)double v45 = a17;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  *(_DWORD *)double v45 = a18;
  XXH64_update((uint64_t)v42, v45, 4uLL);
  a1[5].n128_u64[1] = XXH64_digest((uint64_t)v42);
  a1[6].n128_u16[0] = 0;
  return a1;
}

{
  return CI::ProcessorImage::ProcessorImage(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20);
}

__n128 *CI::ImageWithChildren::ImageWithChildren(__n128 *this, CI::SerialObjectPtrArray *a2)
{
  __n128 v4 = CI::Image::Image(this);
  *(void *)uint64_t v5 = &unk_1EE45C918;
  *(void *)(v5 + 104) = a2;
  *(_DWORD *)(v5 + 72) = 0;
  if (a2)
  {
    int v6 = *(_DWORD *)a2;
    if (*(int *)a2 >= 1)
    {
      unsigned int v7 = 0;
      uint64_t v8 = 0;
      do
      {
        if (v7 <= *(_DWORD *)((*(uint64_t (**)(__n128 *, uint64_t, __n128))(this->n128_u64[0] + 48))(this, v8, v4)+ 72)+ 1)unsigned int v7 = *(_DWORD *)((*(uint64_t (**)(__n128 *, uint64_t))(this->n128_u64[0] + 48))(this, v8) + 72) + 1; {
        else
        }
          unsigned int v7 = this[4].n128_u32[2];
        this[4].n128_u32[2] = v7;
        uint64_t v8 = (v8 + 1);
      }
      while (v6 != v8);
    }
  }
  return this;
}

void CI::ProcessorImage::~ProcessorImage(CI::ProcessorImage *this)
{
  *(void *)this = &unk_1EE459E00;
  *((void *)this + 14) = &unk_1EE459F50;
  uint64_t v2 = (const void *)*((void *)this + 19);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 19) = 0;
  int v3 = (void *)*((void *)this + 22);
  if (v3) {
    free(v3);
  }
  __n128 v4 = (void *)*((void *)this + 24);
  if (v4) {
    free(v4);
  }
  _Block_release(*((const void **)this + 26));
  *((void *)this + 26) = 0;
  _Block_release(*((const void **)this + 27));
  *((void *)this + 27) = 0;
  *((void *)this + 14) = &unk_1EE45AAF8;
  atomic_fetch_add(&dword_1EB466E78[15], 0xFFFFFFFF);

  CI::ImageWithChildren::~ImageWithChildren(this);
}

{
  uint64_t vars8;

  CI::ProcessorImage::~ProcessorImage(this);

  JUMPOUT(0x1997023B0);
}

void CI::ImageWithChildren::~ImageWithChildren(CI::ImageWithChildren *this)
{
  *(void *)this = &unk_1EE45C918;
  uint64_t v2 = (CI::SerialObjectPtrArray *)*((void *)this + 13);
  if (v2)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v2);
    MEMORY[0x1997023B0]();
  }
  *((void *)this + 13) = 0;

  CI::Image::~Image(this);
}

void non-virtual thunk to'CI::ProcessorImage::~ProcessorImage(CI::ProcessorImage *this)
{
}

{
  uint64_t vars8;

  CI::ProcessorImage::~ProcessorImage((CI::ProcessorImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::ProcessorImage::add_args_to_hash(uint64_t a1, CI::XXHashHelper *a2)
{
  if (*(void *)(a1 + 160))
  {
    uint64_t v8 = *(void *)(a1 + 160);
    p_vImage_Buffer src = (char *)&v8;
    uint64_t v5 = (uint64_t)a2;
    size_t v6 = 8;
  }
  else
  {
    int __src = *(_DWORD *)(a1 + 100);
    p_vImage_Buffer src = (char *)&__src;
    uint64_t v5 = (uint64_t)a2;
    size_t v6 = 4;
  }
  XXH64_update(v5, p_src, v6);
  return CI::XXHashHelper::add(a2, *(CFStringRef *)(a1 + 152));
}

void CI::ProcessorImage::region_of_child(CI::ProcessorImage *this, CGRect a2, uint64_t a3)
{
  double height = a2.size.height;
  double width = a2.size.width;
  double y = a2.origin.y;
  double x = a2.origin.x;
  if (!CGRectIsEmpty(a2))
  {
    v13.origin.double x = (*(double (**)(CI::ProcessorImage *, uint64_t, double, double, double, double))(*(void *)this + 80))(this, a3, x, y, width, height);
    CGFloat v9 = v13.origin.x;
    CGFloat v10 = v13.origin.y;
    CGFloat v11 = v13.size.width;
    CGFloat v12 = v13.size.height;
    if (!CGRectIsEmpty(v13))
    {
      v14.origin.double x = v9;
      v14.origin.double y = v10;
      v14.size.double width = v11;
      v14.size.double height = v12;
      if (!CGRectIsInfinite(v14))
      {
        v15.origin.double x = v9;
        v15.origin.double y = v10;
        v15.size.double width = v11;
        v15.size.double height = v12;
        CGRect v16 = CGRectInset(v15, 0.001, 0.001);
        CGRectIntegral(v16);
      }
    }
  }
}

double CI::ProcessorImage::roi_of_child(CI::ProcessorImage *this, CGRect a2)
{
  double height = a2.size.height;
  double width = a2.size.width;
  double y = a2.origin.y;
  double x = a2.origin.x;
  unsigned int v7 = (double *)operator new(0x20uLL);
  *unsigned int v7 = x;
  v7[1] = y;
  void v7[2] = width;
  v7[3] = height;
  uint64_t v8 = *((void *)this + 26);
  if (v8)
  {
    (*(void (**)(void **__return_ptr, double, double, double, double))(v8 + 16))(&__p, x, y, width, height);
  }
  else
  {
    __p = 0;
    CGRect v15 = 0;
    uint64_t v16 = 0;
    std::vector<CGRect>::__vallocate[abi:nn180100](&__p, 1uLL);
    CGFloat v9 = v15;
    long long v10 = *((_OWORD *)v7 + 1);
    *CGRect v15 = *(_OWORD *)v7;
    v9[1] = v10;
    CGRect v15 = v9 + 2;
  }
  CI::ProcessorNode::unionROI((uint64_t **)&__p);
  double v12 = v11;
  if (__p)
  {
    CGRect v15 = __p;
    operator delete(__p);
  }
  operator delete(v7);
  return v12;
}

void CI::ProcessorNode::unionROI(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  uint64_t v4 = (*a1)[2];
  uint64_t v5 = (*a1)[3];
  if ((unint64_t)((char *)a1[1] - (char *)*a1) >= 0x21)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 1;
    do
    {
      *(CGRect *)&uint64_t v2 = CGRectUnion(*(CGRect *)&v2, *(CGRect *)&v1[v7 + 4]);
      ++v8;
      uint64_t v1 = *a1;
      v7 += 4;
    }
    while (v8 < ((char *)a1[1] - (char *)*a1) >> 5);
  }
}

void CI::ProcessorImage::render_graph_core(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 40))(a1)) {
    operator new();
  }
  CI::ProcessorNode::append_to_tree();
}

CI::Object *CI::ConvertNode::append_to_tree_and_unref(CI::Object *a1, int a2)
{
  uint64_t v3 = CI::ConvertNode::append_to_tree(a1, a2);
  if (a1) {
    CI::Object::unref(a1);
  }
  return v3;
}

void *CI::ProcessorImage::restore_resources(void **this, CI::Node *a2)
{
  uint64_t result = (void *)(*(uint64_t (**)(CI::Node *))(*(void *)a2 + 16))(a2);
  if (result == 41)
  {
    CI::ProcessorNode::set_callback((uint64_t)a2, this[27]);
    uint64_t v5 = this[26];
    return CI::ProcessorNode::set_roi_callback((uint64_t)a2, v5);
  }
  return result;
}

void *CI::ProcessorNode::set_callback(uint64_t a1, void *aBlock)
{
  uint64_t v4 = *(const void **)(a1 + 64);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t result = _Block_copy(aBlock);
  *(void *)(a1 + 64) = result;
  return result;
}

void *CI::ProcessorNode::set_roi_callback(uint64_t a1, void *aBlock)
{
  uint64_t v4 = *(const void **)(a1 + 56);
  if (v4) {
    _Block_release(v4);
  }
  uint64_t result = _Block_copy(aBlock);
  *(void *)(a1 + 56) = result;
  return result;
}

uint64_t CI::ProcessorImage::print_for_graph_core(CFStringRef *this, __sFILE *__stream)
{
  fwrite("processor ", 0xAuLL, 1uLL, __stream);
  CI::fprintf(__stream, this[19], v4);
  if (this[20]) {
    fprintf(__stream, ":%016llX", this[20]);
  }
  uint64_t result = *((unsigned int *)this + 46);
  if (result)
  {
    size_t v6 = CI::name_for_format(result);
    uint64_t result = fprintf(__stream, " outputFormat=%s", v6);
  }
  if (!*((unsigned char *)this + 203)) {
    uint64_t result = fwrite(" noPartialOutput", 0x10uLL, 1uLL, __stream);
  }
  if (*((unsigned char *)this + 201)) {
    uint64_t result = fwrite(" canReduceChannels", 0x12uLL, 1uLL, __stream);
  }
  if (*((unsigned char *)this + 168))
  {
    return fwrite(" supportsCompressed", 0x13uLL, 1uLL, __stream);
  }
  return result;
}

uint64_t CI::ProcessorImage::print_for_graphviz(CFStringRef *a1, FILE *__stream, uint64_t a3, char a4)
{
  fwrite("processor ", 0xAuLL, 1uLL, __stream);
  CI::fprintf(__stream, a1[19], v7);
  if ((a4 & 1) == 0
    && CI_GRAPHVIZ_INTERNAL()
    && ((int (*)(CFStringRef *))(*a1)[1].info)(a1) >= 1)
  {
    uint64_t v8 = 0;
    do
    {
      if (v8) {
        CGFloat v9 = " ";
      }
      else {
        CGFloat v9 = "\n  ";
      }
      uint64_t v10 = ((uint64_t (*)(CFStringRef *, uint64_t))(*a1)[1].data)(a1, v8);
      fprintf(__stream, "%s(%d)", v9, *(_DWORD *)(v10 + 100));
      uint64_t v8 = (v8 + 1);
    }
    while ((int)v8 < ((int (*)(CFStringRef *))(*a1)[1].info)(a1));
  }
  if (a1[20]) {
    fprintf(__stream, "\n  argsDigest=%016llX", a1[20]);
  }
  uint64_t result = *((unsigned int *)a1 + 46);
  if (result)
  {
    double v12 = CI::name_for_format(result);
    uint64_t result = fprintf(__stream, "\n  outputFormat=%s", v12);
  }
  if (a1[22])
  {
    uint64_t result = ((uint64_t (*)(CFStringRef *))(*a1)[1].info)(a1);
    if (result == 1)
    {
      uint64_t result = LODWORD(a1[22]->isa);
      if (result)
      {
        CGRect v13 = CI::name_for_format(result);
        uint64_t result = fprintf(__stream, "\n  inputFormat=%s", v13);
      }
    }
  }
  if (!*((unsigned char *)a1 + 203)) {
    uint64_t result = fwrite("\n  noPartialOutput", 0x12uLL, 1uLL, __stream);
  }
  if (*((unsigned char *)a1 + 201)) {
    uint64_t result = fwrite("\n  canReduceChannels", 0x14uLL, 1uLL, __stream);
  }
  if (*((unsigned char *)a1 + 168))
  {
    return fwrite("\n  supportsCompressed", 0x15uLL, 1uLL, __stream);
  }
  return result;
}

uint64_t CI::ProcessorImage::type(CI::ProcessorImage *this)
{
  return 17;
}

uint64_t CI::ImageWithChildren::child_count(CI::ImageWithChildren *this)
{
  uint64_t v1 = (unsigned int *)*((void *)this + 13);
  if (v1) {
    return *v1;
  }
  else {
    return 0;
  }
}

uint64_t CI::ImageWithChildren::child(CI::ImageWithChildren *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  if ((*(int (**)(CI::ImageWithChildren *))(*(void *)this + 40))(this) <= (int)a2) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 13);
  if (a2 > 9) {
    uint64_t v5 = *(void *)(v4 + 16) + 8 * (a2 - 10);
  }
  else {
    uint64_t v5 = v4 + 8 * a2 + 24;
  }
  return *(void *)v5;
}

uint64_t CI::ProcessorImage::shape_for_graphviz(CI::ProcessorImage *this)
{
  return 1;
}

uint64_t CI::ProcessorImage::color_for_graphviz(CI::ProcessorImage *this)
{
  return 1;
}

double CI::ProcessorImage::extent(CI::ProcessorImage *this)
{
  return *((double *)this + 15);
}

double CI::ProcessorImage::extent_unclamped(CI::ProcessorImage *this)
{
  return *((double *)this + 15);
}

uint64_t CI::ProcessorImage::alpha_one(CI::ProcessorImage *this)
{
  return *((unsigned __int8 *)this + 224);
}

uint64_t CI::ProcessorImage::output_format(CI::ProcessorImage *this)
{
  return *((unsigned int *)this + 46);
}

uint64_t CI::ImageWithChildren::properties(CI::ImageWithChildren *this)
{
  uint64_t result = (*(uint64_t (**)(CI::ImageWithChildren *, void))(*(void *)this + 48))(this, 0);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 200);
    return v2();
  }
  return result;
}

uint64_t CI::ImageWithChildren::avdepthdata(CI::ImageWithChildren *this)
{
  uint64_t result = (*(uint64_t (**)(CI::ImageWithChildren *, void))(*(void *)this + 48))(this, 0);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 208);
    return v2();
  }
  return result;
}

uint64_t CI::ImageWithChildren::avmatte(CI::ImageWithChildren *this)
{
  uint64_t result = (*(uint64_t (**)(CI::ImageWithChildren *, void))(*(void *)this + 48))(this, 0);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 216);
    return v2();
  }
  return result;
}

uint64_t CI::ImageWithChildren::ssmatte(CI::ImageWithChildren *this)
{
  uint64_t result = (*(uint64_t (**)(CI::ImageWithChildren *, void))(*(void *)this + 48))(this, 0);
  if (result)
  {
    uint64_t v2 = *(uint64_t (**)(void))(*(void *)result + 224);
    return v2();
  }
  return result;
}

double CI::ImageWithChildren::headroom(CI::ImageWithChildren *this)
{
  return 0.0;
}

uint64_t CI::ImageWithChildren::colorspace(CI::ImageWithChildren *this)
{
  return 0;
}

uint64_t non-virtual thunk to'CI::ProcessorImage::type(CI::ProcessorImage *this)
{
  return 17;
}

uint64_t CI::Image::type(CI::Image *this)
{
  return 1;
}

uint64_t CI::GraphObject::shape_for_graphviz(CI::GraphObject *this)
{
  return 2;
}

uint64_t CI::GraphObject::color_for_graphviz(CI::GraphObject *this)
{
  return 0;
}

uint64_t CI::Image::print_for_graph_core(CI::Image *this, __sFILE *a2)
{
  unsigned int v3 = (*(uint64_t (**)(CI::Image *))(*(void *)this + 16))(this);
  uint64_t v4 = CI::name_for_type(v3);

  return fputs(v4, a2);
}

uint64_t CI::InstanceCounted<(CI::Type)17>::type()
{
  return 17;
}

void *CI::InstanceCounted<(CI::Type)17>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AAF8;
  atomic_fetch_add(&dword_1EB466E78[15], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)17>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AAF8;
  atomic_fetch_add(&dword_1EB466E78[15], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

__n128 *CI::ProviderImage::ProviderImage(__n128 *a1, uint64_t a2, const void *a3, const void *a4, unint64_t a5, unint64_t a6, uint64_t *a7, int a8, float a9, unsigned __int32 a10, const void *a11, unsigned __int32 a12, unsigned __int32 a13, unsigned __int8 a14, unsigned __int8 a15, unsigned __int8 a16)
{
  CI::Image::Image(a1);
  *(void *)(v25 + 104) = &unk_1EE45AB20;
  atomic_fetch_add(&dword_1EB466E78[16], 1u);
  *(void *)uint64_t v25 = &unk_1EE459610;
  *(void *)(v25 + 104) = &unk_1EE459778;
  *(void *)(v25 + 112) = a2;
  *(void *)(v25 + 160) = 0;
  __n128 v26 = (uint64_t *)(v25 + 160);
  *(void *)(v25 + 168) = 0;
  *(void *)(v25 + 176) = 0;
  *(_DWORD *)(v25 + 220) = 0;
  *(void *)(v25 + 200) = 0;
  *(void *)(v25 + 208) = 0;
  *(void *)(v25 + 192) = 0;
  a1[8].n128_u64[0] = (unint64_t)_Block_copy(a4);
  int v27 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  a1[8].n128_u64[1] = (unint64_t)dispatch_queue_create("ProviderImageSurfaceCacheQueue", v27);
  a1[9].n128_u64[0] = a5;
  a1[9].n128_u64[1] = a6;
  if (v26 != a7) {
    std::vector<std::vector<IRect>>::__assign_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v26, *a7, a7[1], 0xAAAAAAAAAAAAAAABLL * ((a7[1] - *a7) >> 3));
  }
  a1[13].n128_u32[2] = a8;
  if (a3) {
    CFTypeRef v28 = CFRetain(a3);
  }
  else {
    CFTypeRef v28 = 0;
  }
  a1[7].n128_u64[1] = (unint64_t)v28;
  a1[14].n128_u32[0] = a10;
  a1[14].n128_u32[1] = a12;
  if (a11) {
    CFTypeRef v29 = CFRetain(a11);
  }
  else {
    CFTypeRef v29 = 0;
  }
  a1[11].n128_u64[1] = (unint64_t)v29;
  a1[14].n128_u32[2] = a13;
  a1[14].n128_u8[12] = a14;
  a1[14].n128_u8[13] = a15;
  a1[14].n128_u8[14] = a16;
  if (!CI::format_is_extended(a8) && !CI::format_is_float(a8)) {
    a9 = 1.0;
  }
  a1[13].n128_f32[3] = a9;
  XXH64_reset(v31, 0);
  LODWORD(__src) = (*(uint64_t (**)(__n128 *))(a1->n128_u64[0] + 16))(a1);
  XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
  if (a1[7].n128_u64[0])
  {
    unint64_t __src = a1[7].n128_u64[0];
    XXH64_update((uint64_t)v31, (char *)&__src, 8uLL);
    unint64_t __src = a1[9].n128_u64[0];
    XXH64_update((uint64_t)v31, (char *)&__src, 8uLL);
    unint64_t __src = a1[9].n128_u64[1];
    XXH64_update((uint64_t)v31, (char *)&__src, 8uLL);
    LODWORD(__src) = a1[13].n128_u32[2];
    XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
    LODWORD(__src) = a1[14].n128_u32[0];
    XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
    LODWORD(__src) = a1[14].n128_u32[1];
    XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
    LODWORD(__src) = a1[14].n128_u32[2];
    XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
    LODWORD(__src) = a1[14].n128_u8[12];
    XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
    LODWORD(__src) = a1[13].n128_u32[3];
  }
  else
  {
    LODWORD(__src) = a1[6].n128_u32[1];
  }
  XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
  a1[5].n128_u64[0] = XXH64_digest((uint64_t)v31);
  XXH64_reset(v31, 0);
  LODWORD(__src) = (*(uint64_t (**)(__n128 *))(a1->n128_u64[0] + 16))(a1);
  XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
  unint64_t __src = a1[9].n128_u64[0];
  XXH64_update((uint64_t)v31, (char *)&__src, 8uLL);
  unint64_t __src = a1[9].n128_u64[1];
  XXH64_update((uint64_t)v31, (char *)&__src, 8uLL);
  LODWORD(__src) = a1[13].n128_u32[2];
  XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[14].n128_u32[0];
  XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[14].n128_u32[1];
  XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[14].n128_u32[2];
  XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[14].n128_u8[12];
  XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[13].n128_u32[3];
  XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
  a1[5].n128_u64[1] = XXH64_digest((uint64_t)v31);
  a1[6].n128_u16[0] = 1;
  return a1;
}

{
  return CI::ProviderImage::ProviderImage(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

void CI::ProviderImage::~ProviderImage(CI::ProviderImage *this)
{
  *(void *)this = &unk_1EE459610;
  *((void *)this + 13) = &unk_1EE459778;
  uint64_t v2 = (const void *)*((void *)this + 16);
  if (v2) {
    _Block_release(v2);
  }
  *((void *)this + 16) = 0;
  unsigned int v3 = (const void *)*((void *)this + 15);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 15) = 0;
  uint64_t v4 = *((void *)this + 17);
  if (v4) {
    dispatch_release(v4);
  }
  *((void *)this + 17) = 0;
  uint64_t v5 = (const void *)*((void *)this + 23);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 23) = 0;
  PurgeCacheEntriesForImage(*((_DWORD *)this + 25));
  size_t v6 = (void **)((char *)this + 160);
  std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v6);
  *((void *)this + 13) = &unk_1EE45AB20;
  atomic_fetch_add(&dword_1EB466E78[16], 0xFFFFFFFF);
  CI::Image::~Image(this);
}

{
  uint64_t vars8;

  CI::ProviderImage::~ProviderImage(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::ProviderImage::~ProviderImage(CI::ProviderImage *this)
{
}

{
  uint64_t vars8;

  CI::ProviderImage::~ProviderImage((CI::ProviderImage *)((char *)this - 104));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::ProviderImage::add_args_to_hash(uint64_t a1, uint64_t a2)
{
  int __src = *(_DWORD *)(a1 + 216);
  XXH64_update(a2, (char *)&__src, 4uLL);
  int __src = *(_DWORD *)(a1 + 224);
  XXH64_update(a2, (char *)&__src, 4uLL);
  int __src = *(_DWORD *)(a1 + 228);
  XXH64_update(a2, (char *)&__src, 4uLL);
  int __src = *(_DWORD *)(a1 + 232);
  XXH64_update(a2, (char *)&__src, 4uLL);
  int __src = *(_DWORD *)(a1 + 220);
  XXH64_update(a2, (char *)&__src, 4uLL);
  int __src = *(unsigned __int8 *)(a1 + 236);
  return XXH64_update(a2, (char *)&__src, 4uLL);
}

void CI::ProviderImage::print_for_graph_core(CI::ProviderImage *this, __sFILE *__stream)
{
  fwrite("provider", 8uLL, 1uLL, __stream);
  if (*((void *)this + 14)) {
    fprintf(__stream, " content:%016llX");
  }
  else {
    fprintf(__stream, " %d");
  }
  if (*((void *)this + 15))
  {
    fputc(58, __stream);
    CI::fprintf(__stream, *((CFStringRef *)this + 15), v4);
  }
  uint64_t v5 = CI::name_for_format(*((_DWORD *)this + 54));
  fprintf(__stream, " %s", v5);
  if (*((_DWORD *)this + 56)) {
    fprintf(__stream, "-%d", *((_DWORD *)this + 56));
  }
  uint64_t v6 = *((void *)this + 20);
  uint64_t v7 = *((void *)this + 21);
  if (v6 != v7)
  {
    memset(v66, 0, sizeof(v66));
    std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v66, v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
    int HasVaryingTileSizes = CI::Tileable::findHasVaryingTileSizes((uint64_t)v66);
    long long v67 = (void **)v66;
    std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v67);
    if (HasVaryingTileSizes)
    {
      double v63 = 0;
      float64x2_t v64 = 0;
      uint64_t v65 = 0;
      std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(&v63, *((void *)this + 20), *((void *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 3));
      CGFloat v9 = v63;
      unint64_t v10 = 0;
      if (v64 != v63)
      {
        unint64_t v11 = (v64 - v63) / 24;
        if (v11 <= 1) {
          unint64_t v11 = 1;
        }
        do
        {
          uint64_t v12 = *(void *)v9;
          v9 += 24;
          unint64_t v13 = *(void *)(v12 + 8);
          if (v13 > v10) {
            unint64_t v10 = v13;
          }
          --v11;
        }
        while (v11);
      }
      memset(v62, 0, sizeof(v62));
      std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v62, *((void *)this + 20), *((void *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 3));
      unint64_t v14 = 0;
      uint64_t v15 = *(void *)(v62[0] + 8) - *(void *)v62[0];
      if (v15)
      {
        unint64_t v16 = v15 / 24;
        if (v16 <= 1) {
          unint64_t v16 = 1;
        }
        int v17 = (unint64_t *)(*(void *)v62[0] + 16);
        do
        {
          unint64_t v19 = *v17;
          v17 += 3;
          unint64_t v18 = v19;
          if (v19 > v14) {
            unint64_t v14 = v18;
          }
          --v16;
        }
        while (v16);
      }
      fprintf(__stream, " tiles of varying sizes with max %zu,%zu", v10, v14);
      long long v67 = (void **)v62;
      std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v67);
      long long v20 = (void **)&v63;
    }
    else
    {
      unsigned __int8 v59 = 0;
      unsigned int v60 = 0;
      uint64_t v61 = 0;
      std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(&v59, *((void *)this + 20), *((void *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 3));
      int v21 = v59;
      unint64_t v22 = 0;
      if (v60 != v59)
      {
        unint64_t v23 = (v60 - v59) / 24;
        if (v23 <= 1) {
          unint64_t v23 = 1;
        }
        do
        {
          uint64_t v24 = *(void *)v21;
          v21 += 24;
          unint64_t v25 = *(void *)(v24 + 8);
          if (v25 > v22) {
            unint64_t v22 = v25;
          }
          --v23;
        }
        while (v23);
      }
      memset(v58, 0, sizeof(v58));
      std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v58, *((void *)this + 20), *((void *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 3));
      uint64_t v26 = *(void *)(v58[0] + 8);
      unint64_t v27 = 0;
      if (v26 != *(void *)v58[0])
      {
        unint64_t v28 = (v26 - *(void *)v58[0]) / 24;
        if (v28 <= 1) {
          unint64_t v28 = 1;
        }
        CFTypeRef v29 = (unint64_t *)(*(void *)v58[0] + 16);
        do
        {
          unint64_t v31 = *v29;
          v29 += 3;
          unint64_t v30 = v31;
          if (v31 > v27) {
            unint64_t v27 = v30;
          }
          --v28;
        }
        while (v28);
      }
      long long v67 = (void **)v58;
      std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v67);
      long long v67 = (void **)&v59;
      std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v67);
      if (v22 == v27)
      {
        double v51 = 0;
        double v52 = 0;
        uint64_t v53 = 0;
        std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(&v51, *((void *)this + 20), *((void *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 3));
        uint64_t v32 = v51;
        if (v52 == v51)
        {
          unint64_t v33 = 0;
        }
        else
        {
          unint64_t v33 = 0;
          unint64_t v34 = (v52 - v51) / 24;
          if (v34 <= 1) {
            unint64_t v34 = 1;
          }
          do
          {
            uint64_t v35 = *(void *)v32;
            v32 += 24;
            unint64_t v36 = *(void *)(v35 + 8);
            if (v36 > v33) {
              unint64_t v33 = v36;
            }
            --v34;
          }
          while (v34);
        }
        fprintf(__stream, " tile %zu", v33);
        long long v67 = (void **)&v51;
        goto LABEL_62;
      }
      unsigned int v55 = 0;
      BOOL v56 = 0;
      uint64_t v57 = 0;
      std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(&v55, *((void *)this + 20), *((void *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 3));
      uint64_t v37 = v55;
      unint64_t v38 = 0;
      if (v56 != v55)
      {
        unint64_t v39 = (v56 - v55) / 24;
        if (v39 <= 1) {
          unint64_t v39 = 1;
        }
        do
        {
          uint64_t v40 = *(void *)v37;
          v37 += 24;
          unint64_t v41 = *(void *)(v40 + 8);
          if (v41 > v38) {
            unint64_t v38 = v41;
          }
          --v39;
        }
        while (v39);
      }
      memset(v54, 0, sizeof(v54));
      std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v54, *((void *)this + 20), *((void *)this + 21), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 21) - *((void *)this + 20)) >> 3));
      unint64_t v42 = 0;
      uint64_t v43 = *(void *)(v54[0] + 8) - *(void *)v54[0];
      if (v43)
      {
        unint64_t v44 = v43 / 24;
        if (v44 <= 1) {
          unint64_t v44 = 1;
        }
        double v45 = (unint64_t *)(*(void *)v54[0] + 16);
        do
        {
          unint64_t v47 = *v45;
          v45 += 3;
          unint64_t v46 = v47;
          if (v47 > v42) {
            unint64_t v42 = v46;
          }
          --v44;
        }
        while (v44);
      }
      fprintf(__stream, " tile %zu,%zu", v38, v42);
      long long v67 = (void **)v54;
      std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v67);
      long long v20 = (void **)&v55;
    }
    long long v67 = v20;
LABEL_62:
    std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v67);
  }
  double v48 = "alpha_one";
  switch(*((_DWORD *)this + 57))
  {
    case 0:
      goto LABEL_69;
    case 1:
      goto LABEL_68;
    case 2:
      double v48 = "alpha_unpremul";
      goto LABEL_68;
    case 4:
      double v48 = "alpha_premul-clear-edges";
      goto LABEL_68;
    case 6:
      double v48 = "alpha_unpremul-clear-edges";
      goto LABEL_68;
    default:
      double v48 = "alpha_unknown";
LABEL_68:
      fprintf(__stream, " %s", v48);
LABEL_69:
      int v49 = *((_DWORD *)this + 58);
      if (v49)
      {
        if (v49 == 1) {
          double v50 = "edge_clamp";
        }
        else {
          double v50 = "edge_unknown";
        }
        fprintf(__stream, " %s", v50);
      }
      if (*((unsigned char *)this + 236)) {
        fwrite(" nearestsampling", 0x10uLL, 1uLL, __stream);
      }
      if (*((unsigned char *)this + 237)) {
        fwrite(" cache", 6uLL, 1uLL, __stream);
      }
      return;
  }
}

uint64_t CI::Tileable::findHasVaryingTileSizes(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)a1 != v2)
  {
    unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((v2 - (uint64_t)v1) >> 3);
    if (v3 >= 2)
    {
      unint64_t v4 = v3 - 1;
      uint64_t v5 = &v1[3 * v3];
      uint64_t v6 = v5 - 6;
      uint64_t v7 = v5 - 3;
      uint64_t v8 = *(uint64_t **)a1;
      do
      {
        if (v4 == 1)
        {
          if (*(void *)(*v6 + 8) != *(void *)(*v7 + 8)) {
            return 1;
          }
        }
        else if (*(void *)(*v8 + 8) < *(void *)(v8[3] + 8))
        {
          return 1;
        }
        v8 += 3;
        --v4;
      }
      while (v4);
      uint64_t v9 = *v1;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v1[1] - *v1) >> 3);
      if (v10 >= 2)
      {
        unint64_t v11 = v10 - 1;
        uint64_t v12 = v9 + 24 * v10;
        unint64_t v13 = (void *)(v12 - 32);
        unint64_t v14 = (void *)(v12 - 8);
        uint64_t v15 = (void *)(v9 + 40);
        do
        {
          if (v11 == 1)
          {
            if (*v13 != *v14) {
              return 1;
            }
          }
          else if (*(v15 - 3) < *v15)
          {
            return 1;
          }
          v15 += 3;
          --v11;
        }
        while (v11);
      }
    }
  }
  return 0;
}

uint64_t CI::ProviderImage::matrix_bias(CI::ProviderImage *this, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t result = CI::format_is_ycc_or_ycca(*((_DWORD *)this + 54));
  if (result)
  {
    int is_ycc_full_range = CI::format_is_ycc_full_range(*((_DWORD *)this + 54));
    if (CI::format_is_float(*((_DWORD *)this + 54)))
    {
      int v12 = 0;
    }
    else if (CI::format_is_deep(*((_DWORD *)this + 54)))
    {
      int v12 = 10;
    }
    else
    {
      int v12 = 8;
    }
    default_ycc_color_matridouble x = *((_DWORD *)this + 56);
    if (!default_ycc_color_matrix) {
      default_ycc_color_matridouble x = CI::format_get_default_ycc_color_matrix(*((_DWORD *)this + 54));
    }
    return get_ycc_to_rgb_matrix(default_ycc_color_matrix, is_ycc_full_range, v12, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5);
  }
  return result;
}

void CI::ProviderImage::render_graph_core(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = CI::ProviderNode::FormatConversion(*(unsigned int *)(a1 + 216));
  if (CI::Context::format_is_supported_for_input(a2, v7))
  {
    uint64_t v8 = CI::Context::swizzler_for_input(a2, v7);
    int v10 = v9;
    if (CI::PixelFormatType_from_format(v8))
    {
      if (*(_DWORD *)(a1 + 232) != 1 && (*(_DWORD *)(a1 + 228) | 2) != 6)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 74) {
          goto LABEL_23;
        }
        double v13 = CI::Image::lookup_union_roi(a1, a4);
        CGFloat v15 = v14;
        CGFloat v17 = v16;
        CGFloat v19 = v18;
        v20.origin.double x = (*(double (**)(uint64_t))(*(void *)a1 + 88))(a1);
        v21.origin.double x = v13;
        v21.origin.double y = v15;
        v21.size.double width = v17;
        v21.size.double height = v19;
        if (!CGRectContainsRect(v20, v21))
        {
LABEL_23:
          if ((*(unsigned int (**)(uint64_t, void))(*(void *)a2 + 560))(a2, 0)) {
            CI::format_has_alpha(*(_DWORD *)(a1 + 216));
          }
        }
      }
      if (v10) {
        CI::input_format_for_conversion(v10);
      }
      if (!*(unsigned char *)(a1 + 236)) {
        (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 568))(a2, 1, v8);
      }
      operator new();
    }
    int v12 = ci_logger_render();
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
LABEL_9:
    }
      operator new();
  }
  else
  {
    unint64_t v11 = ci_logger_render();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
  }
  CI::ProviderImage::render_graph_core(v7);
  goto LABEL_9;
}

void CI::ProviderImage::restore_resources(CI::ProviderImage *this, CI::Node *a2)
{
  if ((*(unsigned int (**)(CI::Node *))(*(void *)a2 + 16))(a2) == 44)
  {
    int v4 = *((_DWORD *)this + 25);
    uint64_t v5 = (CI *)*((void *)this + 14);
    uint64_t v6 = (void *)*((void *)this + 16);
    uint64_t v7 = *((void *)this + 17);
    CI::ProviderNode::set_provider((uint64_t)a2, v4, v5, v6, v7);
  }
}

void *CI::ProviderImage::node_for_graphviz(uint64_t a1, void *a2)
{
  unint64_t v3 = CI::Image::node_for_graphviz((unsigned int *)a1, a2);
  if (CI_PRINT_TREE_dump_inputs())
  {
    uint64_t v4 = CI::PixelFormatType_from_format(*(_DWORD *)(a1 + 216));
    if (v4)
    {
      if (*(void *)(a1 + 160) == *(void *)(a1 + 168))
      {
        Surface = CreateSurface(*(__CVBuffer **)(a1 + 144), *(__CVBuffer **)(a1 + 152), 0, v4, 0);
        if (Surface)
        {
          uint64_t v6 = Surface;
          v9[0] = MEMORY[0x1E4F143A8];
          v9[1] = 0x40000000;
          v9[2] = ___ZNK2CI13ProviderImage17node_for_graphvizERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEE_block_invoke;
          v9[3] = &__block_descriptor_tmp_14;
          void v9[4] = a1;
          SurfaceApplyPlaneBlock(Surface, (uint64_t)v9);
          CGuint64_t Image = (char *)SurfaceCreateCGImage(v6, 0, 1);
          CIGVNodeAddImage(v3, CGImage);
          CGImageRelease((CGImageRef)CGImage);
          CFRelease(v6);
        }
      }
    }
  }
  return v3;
}

uint64_t ___ZNK2CI13ProviderImage17node_for_graphvizERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3 == 1 && !CI::format_is_ycc_422(*(_DWORD *)(v3 + 216))) {
    CI::format_is_ycc_444(*(_DWORD *)(v3 + 216));
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(v3 + 128) + 16);

  return v4();
}

void CI::ProviderImage::print_for_graphviz(uint64_t a1, FILE *__stream, uint64_t a3, int a4)
{
  if (a4) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = 10;
  }
  fwrite("provider", 8uLL, 1uLL, __stream);
  if (*(void *)(a1 + 112)) {
    fprintf(__stream, " content:%016llX");
  }
  else {
    fprintf(__stream, " %d");
  }
  if (*(void *)(a1 + 120))
  {
    fputc(58, __stream);
    CI::fprintf(__stream, *(CFStringRef *)(a1 + 120), v7);
  }
  uint64_t v8 = CI::name_for_format(*(_DWORD *)(a1 + 216));
  fprintf(__stream, " %s", v8);
  if (*(_DWORD *)(a1 + 224)) {
    fprintf(__stream, " %d", *(_DWORD *)(a1 + 224));
  }
  fprintf(__stream, " %ldx%ld", *(void *)(a1 + 144), *(void *)(a1 + 152));
  uint64_t v9 = *(void *)(a1 + 160);
  uint64_t v10 = *(void *)(a1 + 168);
  if (v9 != v10)
  {
    memset(v30, 0, sizeof(v30));
    std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v30, v9, v10, 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3));
    if (CI::Tileable::findHasVaryingTileSizes((uint64_t)v30)) {
      unint64_t v11 = "varying size with max ";
    }
    else {
      unint64_t v11 = "";
    }
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    unint64_t v27 = 0;
    std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(&v27, *(void *)(a1 + 160), *(void *)(a1 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3));
    int v12 = v27;
    unint64_t v13 = 0;
    if (v28 != v27)
    {
      unint64_t v14 = (v28 - v27) / 24;
      if (v14 <= 1) {
        unint64_t v14 = 1;
      }
      do
      {
        uint64_t v15 = *(void *)v12;
        v12 += 24;
        unint64_t v16 = *(void *)(v15 + 8);
        if (v16 > v13) {
          unint64_t v13 = v16;
        }
        --v14;
      }
      while (v14);
    }
    memset(v26, 0, sizeof(v26));
    std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v26, *(void *)(a1 + 160), *(void *)(a1 + 168), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 3));
    unint64_t v17 = 0;
    uint64_t v18 = *(void *)(v26[0] + 8) - *(void *)v26[0];
    if (v18)
    {
      unint64_t v19 = v18 / 24;
      if (v19 <= 1) {
        unint64_t v19 = 1;
      }
      CGRect v20 = (unint64_t *)(*(void *)v26[0] + 16);
      do
      {
        unint64_t v22 = *v20;
        v20 += 3;
        unint64_t v21 = v22;
        if (v22 > v17) {
          unint64_t v17 = v21;
        }
        --v19;
      }
      while (v19);
    }
    fprintf(__stream, "%ctile=%s%zux%zu", v6, v11, v13, v17);
    unint64_t v31 = (char **)v26;
    std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v31);
    unint64_t v31 = &v27;
    std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v31);
    unint64_t v31 = (char **)v30;
    std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v31);
  }
  if (*(_DWORD *)(a1 + 228) || *(_DWORD *)(a1 + 232) || *(unsigned char *)(a1 + 236) || *(unsigned char *)(a1 + 237))
  {
    fputc(v6, __stream);
    unint64_t v23 = "alpha_one";
    switch(*(_DWORD *)(a1 + 228))
    {
      case 0:
        break;
      case 1:
        goto LABEL_38;
      case 2:
        unint64_t v23 = "alpha_unpremul";
        goto LABEL_38;
      case 4:
        unint64_t v23 = "alpha_premul-clear-edges";
        goto LABEL_38;
      case 6:
        unint64_t v23 = "alpha_unpremul-clear-edges";
        goto LABEL_38;
      default:
        unint64_t v23 = "alpha_unknown";
LABEL_38:
        fprintf(__stream, "%s ", v23);
        break;
    }
  }
  int v24 = *(_DWORD *)(a1 + 232);
  if (v24)
  {
    if (v24 == 1) {
      unint64_t v25 = "edge_clamp";
    }
    else {
      unint64_t v25 = "edge_unknown";
    }
    fprintf(__stream, "%s ", v25);
  }
  if (*(unsigned char *)(a1 + 236)) {
    fwrite("nearestsampling ", 0x10uLL, 1uLL, __stream);
  }
  if (*(unsigned char *)(a1 + 237)) {
    fwrite("cache ", 6uLL, 1uLL, __stream);
  }
}

uint64_t CI::ProviderImage::type(CI::ProviderImage *this)
{
  return 18;
}

uint64_t CI::ProviderImage::child_count(CI::ProviderImage *this)
{
  return 0;
}

uint64_t CI::ProviderImage::child(CI::ProviderImage *this)
{
  return 0;
}

uint64_t CI::ProviderImage::shape_for_graphviz(CI::ProviderImage *this)
{
  return 0;
}

uint64_t CI::ProviderImage::color_for_graphviz(CI::ProviderImage *this)
{
  return 12;
}

_DWORD *CI::ProviderImage::extent(_DWORD *this)
{
  if (!this[58]) {
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)this + 96))(this);
  }
  return this;
}

double CI::ProviderImage::extent_unclamped(CI::ProviderImage *this)
{
  return 0.0;
}

uint64_t CI::ProviderImage::max_dimension(CI::ProviderImage *this)
{
  if (*((void *)this + 18) <= *((void *)this + 19)) {
    return *((void *)this + 19);
  }
  else {
    return *((void *)this + 18);
  }
}

BOOL CI::ProviderImage::alpha_one(CI::ProviderImage *this)
{
  return *((_DWORD *)this + 57) == 1;
}

uint64_t CI::ProviderImage::output_format(CI::ProviderImage *this)
{
  return *((unsigned int *)this + 54);
}

uint64_t CI::ProviderImage::properties(CI::ProviderImage *this)
{
  return *((void *)this + 23);
}

uint64_t CI::ProviderImage::avdepthdata(CI::ProviderImage *this)
{
  return *((void *)this + 24);
}

uint64_t CI::ProviderImage::avmatte(CI::ProviderImage *this)
{
  return *((void *)this + 25);
}

uint64_t CI::ProviderImage::ssmatte(CI::ProviderImage *this)
{
  return *((void *)this + 26);
}

float CI::ProviderImage::headroom(CI::ProviderImage *this)
{
  return *((float *)this + 55);
}

uint64_t CI::ProviderImage::colorspace(CI::ProviderImage *this)
{
  return 0;
}

void CI::ProviderImage::set_avdepthdata(CI::ProviderImage *this, CFTypeRef cf)
{
  CFRetain(cf);
  uint64_t v4 = (const void *)*((void *)this + 24);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 24) = cf;
}

void CI::ProviderImage::set_avmatte(CI::ProviderImage *this, CFTypeRef cf)
{
  CFRetain(cf);
  uint64_t v4 = (const void *)*((void *)this + 25);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 25) = cf;
}

void CI::ProviderImage::set_ssmatte(CI::ProviderImage *this, CFTypeRef cf)
{
  CFRetain(cf);
  uint64_t v4 = (const void *)*((void *)this + 26);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 26) = cf;
}

uint64_t non-virtual thunk to'CI::ProviderImage::type(CI::ProviderImage *this)
{
  return 18;
}

void std::vector<std::vector<IRect>>::__assign_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a4)
  {
    if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v8) >> 3) >= a4)
    {
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<IRect> *,std::vector<IRect> *,std::vector<IRect> *>((int)&v24, a2, a3, v8);
      uint64_t v18 = v17;
      uint64_t v19 = a1[1];
      if (v19 != v17)
      {
        uint64_t v20 = a1[1];
        do
        {
          unint64_t v22 = *(void **)(v20 - 24);
          v20 -= 24;
          unint64_t v21 = v22;
          if (v22)
          {
            *(void *)(v19 - 16) = v21;
            operator delete(v21);
          }
          uint64_t v19 = v20;
        }
        while (v20 != v18);
      }
      a1[1] = v18;
    }
    else
    {
      uint64_t v13 = a2 + 8 * ((a1[1] - (uint64_t)v8) >> 3);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<IRect> *,std::vector<IRect> *,std::vector<IRect> *>((int)&v23, a2, v13, v8);
      uint64_t v14 = a1[1];
      if (v13 != a3)
      {
        uint64_t v15 = (void *)a1[1];
        do
        {
          unint64_t v16 = std::vector<IRect>::vector(v15, v13);
          v13 += 24;
          uint64_t v15 = v16 + 3;
          v14 += 24;
        }
        while (v13 != a3);
      }
      a1[1] = v14;
    }
  }
  else
  {
    std::vector<std::vector<IRect>>::__vdeallocate(a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v9 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<CI::SWRendererFunctionInputNode>::__vallocate[abi:nn180100](a1, v10);
    unint64_t v11 = (void *)a1[1];
    while (v6 != a3)
    {
      int v12 = std::vector<IRect>::vector(v11, v6);
      v6 += 24;
      unint64_t v11 = v12 + 3;
    }
    a1[1] = (uint64_t)v11;
  }
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::vector<IRect> *,std::vector<IRect> *,std::vector<IRect> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4) {
        std::vector<IRect>::__assign_with_size[abi:nn180100]<IRect*,IRect*>(a4, *(char **)v5, *(void *)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3));
      }
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

char *std::vector<IRect>::__assign_with_size[abi:nn180100]<IRect*,IRect*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  CFStringRef v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)result) >> 3) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *CFStringRef v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<CI::SWRendererFunctionInputNode>::__vallocate[abi:nn180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 3) >= a4) {
    goto LABEL_16;
  }
  unint64_t v16 = &__src[8 * ((v15 - v9) >> 3)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  void *v13 = &v9[v17];
  return result;
}

uint64_t CI::InstanceCounted<(CI::Type)18>::type()
{
  return 18;
}

void *CI::InstanceCounted<(CI::Type)18>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AB20;
  atomic_fetch_add(&dword_1EB466E78[16], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)18>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AB20;
  atomic_fetch_add(&dword_1EB466E78[16], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::SampleModeImage::render_graph_core(uint64_t a1, int a2, CI::Object *this)
{
  if (this)
  {
    uint64_t v4 = (CI::Object *)CI::Object::ref((uint64_t)this);
    unsigned int v6 = *(_DWORD *)(a1 + 120);
    uint64_t v5 = (_DWORD *)(a1 + 120);
    uint64_t v7 = CI::SampleModeNode::append_to_tree((uint64_t)v4, v6);
    if (v4) {
      CI::Object::unref(v4);
    }
  }
  else
  {
    uint64_t v5 = (_DWORD *)(a1 + 120);
    uint64_t v7 = CI::SampleModeNode::append_to_tree(0, *(unsigned int *)(a1 + 120));
  }
  uint64_t result = v7;
  if (*v5 == 1)
  {
    CI::NoopNode::append_to_tree_and_unref();
  }
  return result;
}

CGFloat CI::SampleModeImage::roi_of_child(CI::SampleModeImage *this, CGRect a2)
{
  int v2 = *((_DWORD *)this + 30);
  if (v2 == 1)
  {
    CGFloat v3 = -0.499;
    goto LABEL_5;
  }
  if (!v2)
  {
    CGFloat v3 = 0.001;
LABEL_5:
    CGRect v5 = CGRectInset(a2, v3, v3);
    *(void *)&a2.origin.double x = (unint64_t)CGRectIntegral(v5);
  }
  return a2.origin.x;
}

__n64 CI::SampleModeImage::extent(CI::SampleModeImage *this)
{
  (*(void (**)(void))(**((void **)this + 13) + 88))(*((void *)this + 13));
  int v6 = *((_DWORD *)this + 30);
  if (!v6)
  {
    CGRect v7 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    *(CGRect *)result.n64_u64 = CGRectIntegral(v7);
    int v6 = *((_DWORD *)this + 30);
  }
  if (v6 == 1)
  {
    CGRect v8 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    return (__n64)CGRectIntegral(v8);
  }
  return result;
}

__n64 CI::SampleModeImage::extent_unclamped(CI::SampleModeImage *this)
{
  (*(void (**)(void))(**((void **)this + 13) + 96))(*((void *)this + 13));
  int v6 = *((_DWORD *)this + 30);
  if (!v6)
  {
    CGRect v7 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    *(CGRect *)result.n64_u64 = CGRectIntegral(v7);
    int v6 = *((_DWORD *)this + 30);
  }
  if (v6 == 1)
  {
    CGRect v8 = CGRectInset(*(CGRect *)result.n64_u64, -0.499, -0.499);
    return (__n64)CGRectIntegral(v8);
  }
  return result;
}

void CI::SampleModeImage::~SampleModeImage(CI::SampleModeImage *this)
{
  *((void *)this + 14) = &unk_1EE45AB70;
  atomic_fetch_add(&dword_1EB466E78[18], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild(this);
}

{
  uint64_t vars8;

  *((void *)this + 14) = &unk_1EE45AB70;
  atomic_fetch_add(&dword_1EB466E78[18], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::SampleModeImage::type(CI::SampleModeImage *this)
{
  return 20;
}

uint64_t CI::SampleModeImage::shape_for_graphviz(CI::SampleModeImage *this)
{
  return 3;
}

uint64_t CI::SampleModeImage::color_for_graphviz(CI::SampleModeImage *this)
{
  return 2;
}

uint64_t CI::SampleModeImage::add_args_to_hash(uint64_t a1, uint64_t a2)
{
  int __src = *(_DWORD *)(a1 + 120);
  return XXH64_update(a2, (char *)&__src, 4uLL);
}

uint64_t CI::SampleModeImage::alpha_one(CI::SampleModeImage *this)
{
  return 0;
}

uint64_t CI::SampleModeImage::print_for_graph_core(CI::SampleModeImage *this, __sFILE *a2)
{
  unsigned int v2 = *((_DWORD *)this + 30) + 1;
  if (v2 > 2) {
    CGFloat v3 = "unknown";
  }
  else {
    CGFloat v3 = off_1E57748E0[v2];
  }
  return fprintf(a2, "samplemode %s", v3);
}

uint64_t CI::SampleModeImage::headroom(CI::SampleModeImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 232))();
}

uint64_t CI::SampleModeImage::colorspace(CI::SampleModeImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 240))();
}

uint64_t non-virtual thunk to'CI::SampleModeImage::type(CI::SampleModeImage *this)
{
  return 20;
}

void non-virtual thunk to'CI::SampleModeImage::~SampleModeImage(CI::SampleModeImage *this)
{
  *(void *)this = &unk_1EE45AB70;
  atomic_fetch_add(&dword_1EB466E78[18], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::SampleModeImage *)((char *)this - 112));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45AB70;
  atomic_fetch_add(&dword_1EB466E78[18], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::SampleModeImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::SetPropsImage::render_graph_core(int a1, int a2, CI::Object *this)
{
  if (this) {
    return CI::Object::ref((uint64_t)this);
  }
  else {
    return 0;
  }
}

void CI::SetPropsImage::~SetPropsImage(CI::SetPropsImage *this)
{
  CI::SetPropsImage::~SetPropsImage(this);

  JUMPOUT(0x1997023B0);
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE4597A0;
  *((void *)this + 14) = &unk_1EE4598F8;
  unsigned int v2 = (const void *)*((void *)this + 15);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 14) = &unk_1EE45AB98;
  *((void *)this + 15) = 0;
  atomic_fetch_add(&dword_1EB466E78[19], 0xFFFFFFFF);

  CI::ImageWithChild::~ImageWithChild(this);
}

uint64_t CI::SetPropsImage::type(CI::SetPropsImage *this)
{
  return 21;
}

uint64_t CI::SetPropsImage::shape_for_graphviz(CI::SetPropsImage *this)
{
  return 2;
}

uint64_t CI::SetPropsImage::color_for_graphviz(CI::SetPropsImage *this)
{
  return 0;
}

uint64_t CI::SetPropsImage::output_format(CI::SetPropsImage *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::SetPropsImage *, void))(*(void *)this + 48))(this, 0)+ 144);

  return v1();
}

size_t CI::SetPropsImage::print_for_graph_core(CI::SetPropsImage *this, __sFILE *__stream)
{
  return fwrite("setprops", 8uLL, 1uLL, __stream);
}

uint64_t CI::SetPropsImage::properties(CI::SetPropsImage *this)
{
  return *((void *)this + 15);
}

uint64_t CI::SetPropsImage::headroom(CI::SetPropsImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 232))();
}

uint64_t CI::SetPropsImage::colorspace(CI::SetPropsImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 240))();
}

uint64_t non-virtual thunk to'CI::SetPropsImage::type(CI::SetPropsImage *this)
{
  return 21;
}

void non-virtual thunk to'CI::SetPropsImage::~SetPropsImage(CI::SetPropsImage *this)
{
}

{
  uint64_t vars8;

  CI::SetPropsImage::~SetPropsImage((CI::SetPropsImage *)((char *)this - 112));

  JUMPOUT(0x1997023B0);
}

size_t CI::SRGBImage::print_for_graph_core(CI::SRGBImage *this, __sFILE *__stream)
{
  int v3 = *((_DWORD *)this + 30);
  switch(v3)
  {
    case 1:
      uint64_t v4 = "linear_to_srgb";
      break;
    case 0:
      uint64_t v4 = "srgb_noop";
      size_t v5 = 9;
      return fwrite(v4, v5, 1uLL, __stream);
    case -1:
      uint64_t v4 = "srgb_to_linear";
      break;
    default:
      uint64_t v4 = "srgb_invalid";
      size_t v5 = 12;
      return fwrite(v4, v5, 1uLL, __stream);
  }
  size_t v5 = 14;
  return fwrite(v4, v5, 1uLL, __stream);
}

float CI::SRGBImage::headroom(CI::SRGBImage *this)
{
  uint64_t v2 = (*(uint64_t (**)(CI::SRGBImage *, void))(*(void *)this + 48))(this, 0);
  *(float *)v3.i32 = (*(float (**)(uint64_t))(*(void *)v2 + 232))(v2);
  v5.i64[0] = 0;
  if (*(float *)v3.i32 >= 1.0)
  {
    int v6 = *((_DWORD *)this + 30);
    switch(v6)
    {
      case 1:
        float v9 = fabsf(*(float *)v3.i32);
        if (v9 < 0.0031308)
        {
          float v8 = 12.92;
          goto LABEL_9;
        }
        v5.i32[0] = 1.0;
        v13.i64[0] = 0x8000000080000000;
        v13.i64[1] = 0x8000000080000000;
        v5.i32[0] = vbslq_s8(v13, v5, v3).u32[0];
        if (*(float *)v3.i32 == 0.0) {
          *(float *)v5.i32 = 0.0;
        }
        float v11 = *(float *)v5.i32;
        float v12 = (float)(powf(v9, 0.41667) * 1.055) + -0.055;
LABEL_17:
        *(float *)v5.i32 = v11 * v12;
        return *(float *)v5.i32;
      case 0:
        v5.i32[0] = v3.i32[0];
        return *(float *)v5.i32;
      case -1:
        float v7 = fabsf(*(float *)v3.i32);
        if (v7 < 0.04045)
        {
          float v8 = 0.077399;
LABEL_9:
          *(float *)v5.i32 = *(float *)v3.i32 * v8;
          return *(float *)v5.i32;
        }
        v4.i32[0] = 1.0;
        v10.i64[0] = 0x8000000080000000;
        v10.i64[1] = 0x8000000080000000;
        v4.i32[0] = vbslq_s8(v10, v4, v3).u32[0];
        if (*(float *)v3.i32 == 0.0) {
          *(float *)v4.i32 = 0.0;
        }
        float v11 = *(float *)v4.i32;
        float v12 = powf((float)(v7 * 0.94787) + 0.052133, 2.4);
        goto LABEL_17;
    }
  }
  return *(float *)v5.i32;
}

CI::PremultiplyNode *CI::SRGBImage::render_graph_core(unsigned int *a1, uint64_t a2, uint64_t a3)
{
  int v5 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 184))(a1);
  if (a3)
  {
    int v6 = (CI::PremultiplyNode *)CI::Object::ref(a3);
    float v7 = CI::PremultiplyNode::append_to_tree(v6, (CI::Node *)0xFFFFFFFFLL, v5);
    if (v6) {
      CI::Object::unref(v6);
    }
  }
  else
  {
    float v7 = CI::PremultiplyNode::append_to_tree(0, (CI::Node *)0xFFFFFFFFLL, v5);
  }
  float v8 = CI::SRGBNode::append_to_tree(v7, (CI::Node *)a1[30], v5);
  if (v7) {
    CI::Object::unref(v7);
  }
  float v9 = CI::PremultiplyNode::append_to_tree(v8, (CI::Node *)1, v5);
  if (v8) {
    CI::Object::unref(v8);
  }
  return v9;
}

void CI::SRGBImage::~SRGBImage(CI::SRGBImage *this)
{
  *(void *)this = &unk_1EE45F8E8;
  *((_DWORD *)this + 30) = 0;
  *((void *)this + 14) = &unk_1EE45AA80;
  atomic_fetch_add(&dword_1EB466E78[12], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45F8E8;
  *((_DWORD *)this + 30) = 0;
  *((void *)this + 14) = &unk_1EE45AA80;
  atomic_fetch_add(&dword_1EB466E78[12], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::SRGBImage::type(CI::SRGBImage *this)
{
  return 14;
}

uint64_t CI::SRGBImage::shape_for_graphviz(CI::SRGBImage *this)
{
  return 2;
}

uint64_t CI::SRGBImage::color_for_graphviz(CI::SRGBImage *this)
{
  return 4;
}

uint64_t CI::SRGBImage::add_args_to_hash(uint64_t a1, uint64_t a2)
{
  int __src = *(_DWORD *)(a1 + 120);
  return XXH64_update(a2, (char *)&__src, 4uLL);
}

uint64_t non-virtual thunk to'CI::SRGBImage::type(CI::SRGBImage *this)
{
  return 14;
}

void non-virtual thunk to'CI::SRGBImage::~SRGBImage(CI::SRGBImage *this)
{
  *((void *)this - 14) = &unk_1EE45F8E8;
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1EE45AA80;
  atomic_fetch_add(&dword_1EB466E78[12], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::SRGBImage *)((char *)this - 112));
}

{
  CI::SRGBImage::~SRGBImage((CI::SRGBImage *)((char *)this - 112));
}

void non-virtual thunk to'CI::SurfaceImage::~SurfaceImage(CI::SurfaceImage *this)
{
}

{
  uint64_t vars8;

  CI::SurfaceImage::~SurfaceImage((CI::SurfaceImage *)((char *)this - 104));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::SurfaceImage::print_for_graph_core(CI::SurfaceImage *this, __sFILE *__stream)
{
  fwrite("IOSurface", 9uLL, 1uLL, __stream);
  if (*((void *)this + 15))
  {
    fprintf(__stream, " content:%016llX");
  }
  else if (*((void *)this + 14))
  {
    fprintf(__stream, " %p", *((const void **)this + 14));
    IOSurfaceID ID = IOSurfaceGetID(*((IOSurfaceRef *)this + 14));
    fprintf(__stream, "(%d)", ID);
    IOSurfaceGetSeed(*((IOSurfaceRef *)this + 14));
    fprintf(__stream, " seed:%d");
  }
  int v5 = CI::name_for_format(*((_DWORD *)this + 42));
  fprintf(__stream, " %s", v5);
  uint64_t result = *((void *)this + 14);
  if (result)
  {
    uint64_t result = IOSurfaceGetPixelFormat((IOSurfaceRef)result);
    int v7 = (int)result >> 24;
    if ((result & 0xFD000000) == 0x2D000000)
    {
      if (v7 <= 46)
      {
        if (v7 != 38)
        {
          if (v7 == 45)
          {
            float v8 = "lossy75";
LABEL_20:
            uint64_t result = fprintf(__stream, "-%s", v8);
            goto LABEL_21;
          }
LABEL_18:
          float v8 = "";
          goto LABEL_20;
        }
LABEL_14:
        float v8 = "compressed";
        goto LABEL_20;
      }
      if (v7 == 47)
      {
        float v8 = "lossy62";
        goto LABEL_20;
      }
      if (v7 != 124) {
        goto LABEL_18;
      }
LABEL_17:
      float v8 = "lossy50";
      goto LABEL_20;
    }
    if (v7 == 38) {
      goto LABEL_14;
    }
    if (v7 == 124) {
      goto LABEL_17;
    }
  }
LABEL_21:
  if (*((_DWORD *)this + 44)) {
    uint64_t result = fprintf(__stream, " %d", *((_DWORD *)this + 44));
  }
  float v9 = "alpha_one";
  switch(*((_DWORD *)this + 45))
  {
    case 0:
      goto LABEL_29;
    case 1:
      goto LABEL_28;
    case 2:
      float v9 = "alpha_unpremul";
      goto LABEL_28;
    case 4:
      float v9 = "alpha_premul-clear-edges";
      goto LABEL_28;
    case 6:
      float v9 = "alpha_unpremul-clear-edges";
      goto LABEL_28;
    default:
      float v9 = "alpha_unknown";
LABEL_28:
      uint64_t result = fprintf(__stream, " %s", v9);
LABEL_29:
      int v10 = *((_DWORD *)this + 46);
      if (v10)
      {
        if (v10 == 1) {
          float v11 = "edge_clamp";
        }
        else {
          float v11 = "edge_unknown";
        }
        uint64_t result = fprintf(__stream, " %s", v11);
      }
      if (*((unsigned char *)this + 188)) {
        uint64_t result = fwrite(" nearestsampling", 0x10uLL, 1uLL, __stream);
      }
      if (*((unsigned char *)this + 189))
      {
        return fwrite(" cache", 6uLL, 1uLL, __stream);
      }
      return result;
  }
}

void *CI::SurfaceImage::node_for_graphviz(uint64_t a1, void *a2)
{
  int8x16_t v3 = CI::Image::node_for_graphviz((unsigned int *)a1, a2);
  if (CI_PRINT_TREE_dump_inputs())
  {
    CGuint64_t Image = (char *)SurfaceCreateCGImage(*(__IOSurface **)(a1 + 112), 0, 1);
    CIGVNodeAddImage(v3, CGImage);
    CGImageRelease((CGImageRef)CGImage);
  }
  return v3;
}

uint64_t CI::SurfaceImage::child(CI::SurfaceImage *this)
{
  return 0;
}

uint64_t CI::SurfaceImage::shape_for_graphviz(CI::SurfaceImage *this)
{
  return 0;
}

uint64_t CI::SurfaceImage::color_for_graphviz(CI::SurfaceImage *this)
{
  return 12;
}

size_t CI::SurfaceImage::max_dimension(IOSurfaceRef *this)
{
  size_t Width = IOSurfaceGetWidth(this[14]);
  size_t Height = IOSurfaceGetHeight(this[14]);
  int8x16_t v4 = this[14];
  if (Width <= Height) {
    return IOSurfaceGetHeight(v4);
  }
  else {
    return IOSurfaceGetWidth(v4);
  }
}

BOOL CI::SurfaceImage::alpha_one(CI::SurfaceImage *this)
{
  return *((_DWORD *)this + 45) == 1;
}

uint64_t CI::SurfaceImage::output_format(CI::SurfaceImage *this)
{
  return *((unsigned int *)this + 42);
}

uint64_t CI::SurfaceImage::properties(CI::SurfaceImage *this)
{
  return *((void *)this + 17);
}

uint64_t CI::SurfaceImage::avdepthdata(CI::SurfaceImage *this)
{
  return *((void *)this + 18);
}

uint64_t CI::SurfaceImage::avmatte(CI::SurfaceImage *this)
{
  return *((void *)this + 19);
}

uint64_t CI::SurfaceImage::ssmatte(CI::SurfaceImage *this)
{
  return *((void *)this + 20);
}

float CI::SurfaceImage::headroom(CI::SurfaceImage *this)
{
  return *((float *)this + 43);
}

uint64_t CI::SurfaceImage::colorspace(CI::SurfaceImage *this)
{
  return 0;
}

void CI::SurfaceImage::set_avdepthdata(CI::SurfaceImage *this, CFTypeRef cf)
{
  CFRetain(cf);
  int8x16_t v4 = (const void *)*((void *)this + 18);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 18) = cf;
}

void CI::SurfaceImage::set_avmatte(CI::SurfaceImage *this, CFTypeRef cf)
{
  CFRetain(cf);
  int8x16_t v4 = (const void *)*((void *)this + 19);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 19) = cf;
}

void CI::SurfaceImage::set_ssmatte(CI::SurfaceImage *this, CFTypeRef cf)
{
  CFRetain(cf);
  int8x16_t v4 = (const void *)*((void *)this + 20);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 20) = cf;
}

uint64_t non-virtual thunk to'CI::SurfaceImage::type(CI::SurfaceImage *this)
{
  return 19;
}

uint64_t CI::InstanceCounted<(CI::Type)19>::type()
{
  return 19;
}

void *CI::InstanceCounted<(CI::Type)19>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AB48;
  atomic_fetch_add(&dword_1EB466E78[17], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)19>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AB48;
  atomic_fetch_add(&dword_1EB466E78[17], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

__n128 *CI::SwitchImage::SwitchImage(__n128 *a1, uint64_t a2, const void *a3)
{
  CI::Image::Image(a1);
  *(void *)(v6 + 104) = &unk_1EE45ABC0;
  atomic_fetch_add(&dword_1EB466E78[20], 1u);
  *(void *)uint64_t v6 = &unk_1EE4580A0;
  *(void *)(v6 + 104) = &unk_1EE4581F8;
  *(void *)(v6 + 112) = a2;
  long long v7 = *MEMORY[0x1E4F1DB20];
  long long v8 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  *(_OWORD *)(v6 + 136) = *MEMORY[0x1E4F1DB20];
  *(_OWORD *)(v6 + 152) = v8;
  *(_OWORD *)(v6 + 168) = v7;
  *(_OWORD *)(v6 + 184) = v8;
  *(unsigned char *)(v6 + 128) = 1;
  *(_DWORD *)(v6 + 72) = 0;
  XXH64_reset(v32, 0);
  XXH64_reset(v31, 0);
  LODWORD(__src) = (*(uint64_t (**)(__n128 *))(a1->n128_u64[0] + 16))(a1);
  XXH64_update((uint64_t)v32, (char *)&__src, 4uLL);
  LODWORD(__src) = (*(uint64_t (**)(__n128 *))(a1->n128_u64[0] + 16))(a1);
  XXH64_update((uint64_t)v31, (char *)&__src, 4uLL);
  float v9 = (int *)a1[7].n128_u64[0];
  if (*v9 >= 1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 6;
    do
    {
      if (v10 > 9) {
        uint64_t v12 = *((void *)v9 + 2) + 8 * (v10 - 10);
      }
      else {
        uint64_t v12 = (uint64_t)&v9[v11];
      }
      uint64_t v13 = *(void *)v12;
      uint64_t __src = *(void *)(*(void *)v12 + 80);
      XXH64_update((uint64_t)v32, (char *)&__src, 8uLL);
      uint64_t __src = *(void *)(v13 + 88);
      XXH64_update((uint64_t)v31, (char *)&__src, 8uLL);
      CGFloat v14 = a1[8].n128_f64[1];
      CGFloat v15 = a1[9].n128_f64[0];
      CGFloat v16 = a1[9].n128_f64[1];
      CGFloat v17 = a1[10].n128_f64[0];
      v36.origin.double x = (*(double (**)(uint64_t))(*(void *)v13 + 88))(v13);
      v36.origin.double y = v18;
      v36.size.double width = v19;
      v36.size.double height = v20;
      v34.origin.double x = v14;
      v34.origin.double y = v15;
      v34.size.double width = v16;
      v34.size.double height = v17;
      *(CGRect *)&a1[8].n128_i8[8] = CGRectUnion(v34, v36);
      CGFloat v21 = a1[10].n128_f64[1];
      CGFloat v22 = a1[11].n128_f64[0];
      CGFloat v23 = a1[11].n128_f64[1];
      CGFloat v24 = a1[12].n128_f64[0];
      v37.origin.double x = (*(double (**)(uint64_t))(*(void *)v13 + 96))(v13);
      v37.origin.double y = v25;
      v37.size.double width = v26;
      v37.size.double height = v27;
      v35.origin.double x = v21;
      v35.origin.double y = v22;
      v35.size.double width = v23;
      v35.size.double height = v24;
      *(CGRect *)&a1[10].n128_i8[8] = CGRectUnion(v35, v37);
      if (a1[8].n128_u8[0] && ((*(uint64_t (**)(uint64_t))(*(void *)v13 + 128))(v13) & 1) == 0) {
        a1[8].n128_u8[0] = 0;
      }
      unsigned int v28 = a1[4].n128_u32[2];
      int v29 = *(_DWORD *)(v13 + 72);
      if (v28 <= v29 + 1) {
        unsigned int v28 = v29 + 1;
      }
      a1[4].n128_u32[2] = v28;
      ++v10;
      float v9 = (int *)a1[7].n128_u64[0];
      v11 += 2;
    }
    while ((uint64_t)v10 < *v9);
  }
  a1[5].n128_u64[0] = XXH64_digest((uint64_t)v32);
  a1[5].n128_u64[1] = XXH64_digest((uint64_t)v31);
  a1[7].n128_u64[1] = (unint64_t)_Block_copy(a3);
  a1[6].n128_u16[0] = *(unsigned __int8 *)(*(void *)(a1[7].n128_u64[0] + 24) + 96);
  return a1;
}

void CI::SwitchImage::~SwitchImage(CI::SwitchImage *this)
{
  *(void *)this = &unk_1EE4580A0;
  *((void *)this + 13) = &unk_1EE4581F8;
  uint64_t v2 = (CI::SerialObjectPtrArray *)*((void *)this + 14);
  if (v2)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v2);
    MEMORY[0x1997023B0]();
  }
  _Block_release(*((const void **)this + 15));
  *((void *)this + 15) = 0;
  *((void *)this + 13) = &unk_1EE45ABC0;
  atomic_fetch_add(&dword_1EB466E78[20], 0xFFFFFFFF);

  CI::Image::~Image(this);
}

{
  uint64_t vars8;

  CI::SwitchImage::~SwitchImage(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::SwitchImage::~SwitchImage(CI::SwitchImage *this)
{
}

{
  uint64_t vars8;

  CI::SwitchImage::~SwitchImage((CI::SwitchImage *)((char *)this - 104));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::SwitchImage::render_graph_core(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1[15];
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 320))(a2);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v5, v6);
  if ((v7 & 0x80000000) != 0 || (uint64_t v8 = v7, (int)v7 >= (*(int (**)(void *))(*a1 + 40))(a1))) {
    operator new();
  }
  unint64_t v9 = *(void *)((*(uint64_t (**)(void *, uint64_t))(*a1 + 48))(a1, v8) + 80);

  return CI::ImageToNodeMap::findAndRef(a3, v9);
}

uint64_t CI::SwitchImage::type(CI::SwitchImage *this)
{
  return 22;
}

uint64_t CI::SwitchImage::child_count(CI::SwitchImage *this)
{
  return **((unsigned int **)this + 14);
}

uint64_t CI::SwitchImage::child(CI::SwitchImage *this, int a2)
{
  uint64_t v2 = *((void *)this + 14);
  if (a2 > 9) {
    uint64_t v3 = *(void *)(v2 + 16) + 8 * (a2 - 10);
  }
  else {
    uint64_t v3 = v2 + 8 * a2 + 24;
  }
  return *(void *)v3;
}

uint64_t CI::SwitchImage::shape_for_graphviz(CI::SwitchImage *this)
{
  return 2;
}

uint64_t CI::SwitchImage::color_for_graphviz(CI::SwitchImage *this)
{
  return 0;
}

double CI::SwitchImage::extent(CI::SwitchImage *this)
{
  return *((double *)this + 17);
}

double CI::SwitchImage::extent_unclamped(CI::SwitchImage *this)
{
  return *((double *)this + 21);
}

uint64_t CI::SwitchImage::alpha_one(CI::SwitchImage *this)
{
  return *((unsigned __int8 *)this + 128);
}

size_t CI::SwitchImage::print_for_graph_core(CI::SwitchImage *this, __sFILE *__stream)
{
  return fwrite("switch", 6uLL, 1uLL, __stream);
}

uint64_t CI::SwitchImage::properties(CI::SwitchImage *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::SwitchImage *, void))(*(void *)this + 48))(this, 0)+ 200);

  return v1();
}

uint64_t CI::SwitchImage::avdepthdata(CI::SwitchImage *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::SwitchImage *, void))(*(void *)this + 48))(this, 0)+ 208);

  return v1();
}

uint64_t CI::SwitchImage::avmatte(CI::SwitchImage *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::SwitchImage *, void))(*(void *)this + 48))(this, 0)+ 216);

  return v1();
}

uint64_t CI::SwitchImage::ssmatte(CI::SwitchImage *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::SwitchImage *, void))(*(void *)this + 48))(this, 0)+ 224);

  return v1();
}

uint64_t CI::SwitchImage::headroom(CI::SwitchImage *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::SwitchImage *, void))(*(void *)this + 48))(this, 0)+ 232);

  return v1();
}

uint64_t CI::SwitchImage::colorspace(CI::SwitchImage *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::SwitchImage *, void))(*(void *)this + 48))(this, 0)+ 240);

  return v1();
}

uint64_t CI::SwitchImage::callCallback(CI::SwitchImage *this, const __CFDictionary *a2)
{
  return (*(uint64_t (**)(void))(*((void *)this + 15) + 16))();
}

uint64_t non-virtual thunk to'CI::SwitchImage::type(CI::SwitchImage *this)
{
  return 22;
}

uint64_t CI::InstanceCounted<(CI::Type)22>::type()
{
  return 22;
}

void *CI::InstanceCounted<(CI::Type)22>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45ABC0;
  atomic_fetch_add(&dword_1EB466E78[20], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)22>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45ABC0;
  atomic_fetch_add(&dword_1EB466E78[20], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::SwizzleImage::shape_for_graphviz(CI::SwizzleImage *this)
{
  if ((*(unsigned int (**)(CI::SwizzleImage *))(*(void *)this + 328))(this)) {
    return 2;
  }
  else {
    return 3;
  }
}

uint64_t CI::SwizzleImage::color_for_graphviz(CI::SwizzleImage *this)
{
  if ((*(unsigned int (**)(CI::SwizzleImage *))(*(void *)this + 328))(this)) {
    return 4;
  }
  else {
    return 2;
  }
}

uint64_t CI::SwizzleImage::print_for_graph_core(CI::SwizzleImage *this, __sFILE *a2)
{
  uint64_t v2 = *((int *)this + 30);
  if (v2 > 0x58) {
    uint64_t v3 = "unknown-swizzle";
  }
  else {
    uint64_t v3 = off_1E57748F8[v2];
  }
  return fputs(v3, a2);
}

double CI::ImageWithChild::headroom(CI::ImageWithChild *this)
{
  return 0.0;
}

uint64_t CI::SwizzleImage::colorspace(CI::SwizzleImage *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 13) + 240))();
}

BOOL CI::SwizzleImage::isSimple(CI::SwizzleImage *this)
{
  return (*((_DWORD *)this + 30) - 1) < 0x24;
}

uint64_t non-virtual thunk to'CI::SwizzleImage::type(CI::SwizzleImage *this)
{
  return 23;
}

void non-virtual thunk to'CI::SwizzleImage::~SwizzleImage(CI::SwizzleImage *this)
{
  *((void *)this - 14) = &unk_1EE458C60;
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1EE45ABE8;
  atomic_fetch_add(&dword_1EB466E78[21], 0xFFFFFFFF);
  CI::ImageWithChild::~ImageWithChild((CI::SwizzleImage *)((char *)this - 112));
}

{
  CI::SwizzleImage::~SwizzleImage((CI::SwizzleImage *)((char *)this - 112));
}

__n128 *CI::TextureImage::TextureImage(__n128 *a1, _OWORD *a2, uint64_t a3, unsigned __int32 a4, unsigned __int32 a5, const void *a6, unsigned __int32 a7, unsigned __int32 a8)
{
  CI::Image::Image(a1);
  *(void *)(v16 + 104) = &unk_1EE45AC38;
  atomic_fetch_add(&dword_1EB466E78[23], 1u);
  *(void *)uint64_t v16 = &unk_1EE458DE8;
  *(void *)(v16 + 104) = &unk_1EE458F58;
  *(_OWORD *)(v16 + 112) = *a2;
  *(void *)(v16 + 128) = a3;
  if (a6) {
    CFTypeRef v17 = CFRetain(a6);
  }
  else {
    CFTypeRef v17 = 0;
  }
  a1[8].n128_u64[1] = (unint64_t)v17;
  a1[9].n128_u32[0] = a4;
  a1[9].n128_u32[1] = a5;
  a1[9].n128_u32[2] = a7;
  a1[9].n128_u32[3] = a8;
  XXH64_reset(v19, 0);
  LODWORD(__src) = (*(uint64_t (**)(__n128 *))(a1->n128_u64[0] + 16))(a1);
  XXH64_update((uint64_t)v19, (char *)&__src, 4uLL);
  if (a1[8].n128_u64[0])
  {
    unint64_t __src = a1[8].n128_u64[0];
    XXH64_update((uint64_t)v19, (char *)&__src, 8uLL);
    LODWORD(__src) = a1[9].n128_u32[0];
    XXH64_update((uint64_t)v19, (char *)&__src, 4uLL);
    LODWORD(__src) = a1[9].n128_u32[1];
    XXH64_update((uint64_t)v19, (char *)&__src, 4uLL);
    LODWORD(__src) = a1[9].n128_u32[2];
    XXH64_update((uint64_t)v19, (char *)&__src, 4uLL);
    LODWORD(__src) = a1[9].n128_u32[3];
  }
  else
  {
    LODWORD(__src) = a1[6].n128_u32[1];
  }
  XXH64_update((uint64_t)v19, (char *)&__src, 4uLL);
  a1[5].n128_u64[0] = XXH64_digest((uint64_t)v19);
  XXH64_reset(v19, 0);
  LODWORD(__src) = (*(uint64_t (**)(__n128 *))(a1->n128_u64[0] + 16))(a1);
  XXH64_update((uint64_t)v19, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[9].n128_u32[0];
  XXH64_update((uint64_t)v19, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[9].n128_u32[1];
  XXH64_update((uint64_t)v19, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[9].n128_u32[2];
  XXH64_update((uint64_t)v19, (char *)&__src, 4uLL);
  LODWORD(__src) = a1[9].n128_u32[3];
  XXH64_update((uint64_t)v19, (char *)&__src, 4uLL);
  a1[5].n128_u64[1] = XXH64_digest((uint64_t)v19);
  a1[6].n128_u16[0] = 0;
  return a1;
}

void sub_1938E964C(_Unwind_Exception *a1)
{
  *((void *)v1 + 14) = 0;
  *((void *)v1 + 15) = 0;
  *((void *)v1 + 13) = v2;
  atomic_fetch_add((atomic_uint *volatile)(v3 + 100), 0xFFFFFFFF);
  CI::Image::~Image(v1);
  _Unwind_Resume(a1);
}

void CI::TextureImage::~TextureImage(CI::TextureImage *this)
{
  *(void *)this = &unk_1EE458DE8;
  *((void *)this + 13) = &unk_1EE458F58;
  uint64_t v2 = (const void *)*((void *)this + 17);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 17) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 13) = &unk_1EE45AC38;
  atomic_fetch_add(&dword_1EB466E78[23], 0xFFFFFFFF);

  CI::Image::~Image(this);
}

void sub_1938E9734(_Unwind_Exception *a1)
{
  *((void *)v1 + 14) = 0;
  *((void *)v1 + 15) = 0;
  *((void *)v1 + 13) = &unk_1EE45AC38;
  atomic_fetch_add(&dword_1EB466E78[23], 0xFFFFFFFF);
  CI::Image::~Image(v1);
  _Unwind_Resume(a1);
}

uint64_t CI::TextureImage::print_for_graph_core(CI::TextureImage *this, __sFILE *a2)
{
  if ((*(unsigned int (**)(CI::TextureImage *))(*(void *)this + 336))(this)) {
    fprintf(a2, "GLTexture %d", *((_DWORD *)this + 28));
  }
  uint64_t result = (*(uint64_t (**)(CI::TextureImage *))(*(void *)this + 344))(this);
  if (result)
  {
    fprintf(a2, "MTLTexture %p", *((const void **)this + 14));
    pixelFormatForMetalTexture(*((void **)this + 14));
    uint64_t v5 = stringForMetalTextureFormat();
    uint64_t result = fprintf(a2, " %s", v5);
  }
  if (*((void *)this + 16)) {
    uint64_t result = fprintf(a2, " content:%016llX", *((void *)this + 16));
  }
  uint64_t v6 = "alpha_one";
  switch(*((_DWORD *)this + 38))
  {
    case 0:
      goto LABEL_13;
    case 1:
      goto LABEL_12;
    case 2:
      uint64_t v6 = "alpha_unpremul";
      goto LABEL_12;
    case 4:
      uint64_t v6 = "alpha_premul-clear-edges";
      goto LABEL_12;
    case 6:
      uint64_t v6 = "alpha_unpremul-clear-edges";
      goto LABEL_12;
    default:
      uint64_t v6 = "alpha_unknown";
LABEL_12:
      uint64_t result = fprintf(a2, " %s", v6);
LABEL_13:
      int v7 = *((_DWORD *)this + 39);
      if (v7)
      {
        if (v7 == 1) {
          uint64_t v8 = "edge_clamp";
        }
        else {
          uint64_t v8 = "edge_unknown";
        }
        return fprintf(a2, " %s", v8);
      }
      return result;
  }
}

uint64_t CI::TextureImage::add_args_to_hash(_DWORD *a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 336))(a1))
  {
    int __src = a1[29];
    XXH64_update(a2, (char *)&__src, 4uLL);
  }
  int v6 = a1[38];
  XXH64_update(a2, (char *)&v6, 4uLL);
  int v7 = a1[39];
  return XXH64_update(a2, (char *)&v7, 4uLL);
}

void CI::TextureImage::render_graph_core(_DWORD *a1, id *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  if (a1[39] != 1 && (a1[38] | 2) != 6)
  {
    if ((*((unsigned int (**)(id *))*a2 + 2))(a2) == 74) {
      goto LABEL_19;
    }
    double v14 = CI::Image::lookup_union_roi((uint64_t)a1, a4);
    CGFloat v16 = v15;
    CGFloat v18 = v17;
    CGFloat v20 = v19;
    v28.origin.double x = (*(double (**)(_DWORD *))(*(void *)a1 + 88))(a1);
    v29.origin.double x = v14;
    v29.origin.double y = v16;
    v29.size.double width = v18;
    v29.size.double height = v20;
    if (!CGRectContainsRect(v28, v29)) {
LABEL_19:
    }
      (*((void (**)(id *, void))*a2 + 70))(a2, 0);
  }
  if ((*((unsigned int (**)(id *))*a2 + 2))(a2) == 76
    || (*((unsigned int (**)(id *))*a2 + 2))(a2) == 74)
  {
    if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 336))(a1)) {
      operator new();
    }
  }
  else if ((*((unsigned int (**)(id *))*a2 + 2))(a2) == 77 {
         && (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 344))(a1))
  }
  {
    uint64_t v6 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 344))(a1);
    uint64_t Device = CIMetalTextureGetDevice(v6);
    if (Device == CI::MetalContext::device(a2)) {
      operator new();
    }
    uint64_t v8 = ci_logger_render();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      CI::TextureImage::render_graph_core(v8);
    }
  }
  if ((*(uint64_t (**)(_DWORD *))(*(void *)a1 + 344))(a1))
  {
    uint64_t v9 = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 344))(a1);
    IOSurface = (CI *)CIMetalTextureGetIOSurface(v9);
    if (IOSurface)
    {
      CI::format_from_IOSurface(IOSurface, v11);
      operator new();
    }
  }
  uint64_t v12 = ci_logger_render();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 336))(a1)) {
      CGFloat v21 = "GL";
    }
    else {
      CGFloat v21 = "Metal";
    }
    uint64_t v22 = (*((uint64_t (**)(id *))*a2 + 38))(a2);
    int buf = 136446466;
    buf_4 = v21;
    __int16 buf_12 = 2082;
    uint64_t buf_14 = v22;
    _os_log_error_impl(&dword_193671000, v12, OS_LOG_TYPE_ERROR, "Cannot render image (with an input %{public}s texture) using a %{public}s context.\n", (uint8_t *)&buf, 0x16u);
  }
  operator new();
}

void sub_1938EA038(_Unwind_Exception *a1)
{
  MEMORY[0x1997023B0](v1, 0x10E3C40C0CE6CF6);
  _Unwind_Resume(a1);
}

uint64_t CI::TextureImage::restore_resources(CI::TextureImage *this, CI::Node *a2)
{
  uint64_t result = (*(uint64_t (**)(CI::Node *))(*(void *)a2 + 16))(a2);
  if (result == 48)
  {
    long long v5 = *((_OWORD *)this + 7);
    return (*(uint64_t (**)(CI::Node *, long long *, void))(*(void *)a2 + 440))(a2, &v5, *((void *)this + 16));
  }
  return result;
}

uint64_t CI::MetalTextureImage::format(CI::MetalTextureImage *this)
{
  uint64_t v1 = (void *)(*(uint64_t (**)(CI::MetalTextureImage *))(*(void *)this + 344))(this);
  int Format = CIMetalTextureGetFormat(v1);

  return CIFormatFromCIMetalTextureFormat(Format, 0);
}

void *CI::MetalTextureImage::node_for_graphviz(unsigned int *a1, void *a2)
{
  uint64_t v3 = CI::Image::node_for_graphviz(a1, a2);
  if (CI_PRINT_TREE_dump_inputs()
    && (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 344))(a1))
  {
    uint64_t v4 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 344))(a1);
    IOSurface = (__IOSurface *)CIMetalTextureGetIOSurface(v4);
    if (IOSurface)
    {
      CGuint64_t Image = (char *)SurfaceCreateCGImage(IOSurface, 0, 1);
      CIGVNodeAddImage(v3, CGImage);
      CGImageRelease((CGImageRef)CGImage);
    }
    else
    {
      int v7 = (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 320))(a1);
      size_t v8 = (int)CI::format_bits_per_pixel(v7);
      size_t v9 = (int)CI::format_bits_per_component(v7);
      int v10 = (*(unsigned int (**)(unsigned int *))(*(void *)a1 + 328))(a1) != 2
         && (*(uint64_t (**)(unsigned int *))(*(void *)a1 + 328))(a1) != 6;
      CGBitmapInfo v11 = CI::format_CGBitmapInfo(v7, v10);
      uint64_t v12 = (void *)(*(uint64_t (**)(unsigned int *))(*(void *)a1 + 344))(a1);
      uint64_t v13 = [v12 width];
      size_t v14 = [v12 height];
      size_t v15 = CI::format_bytes_per_row(v7, v13);
      CGFloat v16 = (void *)[MEMORY[0x1E4F1CA58] dataWithLength:v15 * v14];
      memset(v21, 0, 24);
      v21[3] = v13;
      v21[4] = v14;
      void v21[5] = 1;
      objc_msgSend(v12, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", objc_msgSend(v16, "mutableBytes"), v15, v21, 0);
      double v17 = CGDataProviderCreateWithCFData((CFDataRef)v16);
      CGFloat v18 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
      double v19 = (char *)CGImageCreate(v13, v14, v9, v8, v15, v18, v11, v17, 0, 0, kCGRenderingIntentDefault);
      if (v19) {
        CIGVNodeAddImage(v3, v19);
      }
      CGDataProviderRelease(v17);
      CGImageRelease((CGImageRef)v19);
      CGColorSpaceRelease(v18);
    }
  }
  return v3;
}

void CI::MetalTextureImage::~MetalTextureImage(CI::MetalTextureImage *this)
{
  CI::MetalTextureImage::~MetalTextureImage(this);

  JUMPOUT(0x1997023B0);
}

{
  const void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE45CA68;
  *((void *)this + 13) = &unk_1EE45CBD8;
  uint64_t v2 = (const void *)*((void *)this + 14);
  if (v2) {
    CFRelease(v2);
  }

  CI::TextureImage::~TextureImage(this);
}

uint64_t CI::MetalTextureImage::texture_id(CI::MetalTextureImage *this)
{
  return 0;
}

uint64_t CI::TextureImage::texture_ref(CI::TextureImage *this)
{
  return *((void *)this + 14);
}

void non-virtual thunk to'CI::MetalTextureImage::~MetalTextureImage(CI::MetalTextureImage *this)
{
}

{
  uint64_t vars8;

  CI::MetalTextureImage::~MetalTextureImage((CI::MetalTextureImage *)((char *)this - 104));

  JUMPOUT(0x1997023B0);
}

void CI::GLTextureNode::~GLTextureNode(CI::GLTextureNode *this)
{
  CI::TextureNode::~TextureNode(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::TextureNode::type(CI::TextureNode *this)
{
  return 48;
}

uint64_t CI::TextureNode::child_count(CI::TextureNode *this)
{
  return 0;
}

uint64_t CI::TextureNode::child(CI::TextureNode *this)
{
  return 0;
}

uint64_t CI::TextureNode::shape_for_graphviz(CI::TextureNode *this)
{
  return 0;
}

uint64_t CI::TextureNode::color_for_graphviz(CI::TextureNode *this)
{
  return 11;
}

uint64_t CI::Node::imageIndex(CI::Node *this)
{
  return 0;
}

_DWORD *CI::TextureNode::extent(_DWORD *this)
{
  if (!this[21]) {
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)this + 168))(this);
  }
  return this;
}

double CI::TextureNode::extent_unclamped(CI::TextureNode *this)
{
  return 0.0;
}

uint64_t CI::TextureNode::child_type_is_image(CI::TextureNode *this)
{
  return 0;
}

uint64_t CI::TextureNode::may_be_extended_range(CI::TextureNode *this)
{
  return *((unsigned __int8 *)this + 88);
}

BOOL CI::TextureNode::alpha_one(CI::TextureNode *this)
{
  return *((_DWORD *)this + 20) == 1;
}

uint64_t CI::Node::output_is_rg(CI::Node *this)
{
  return 0;
}

uint64_t CI::Node::output_is_r(CI::Node *this)
{
  return 0;
}

uint64_t CI::Node::output_is_luma(CI::Node *this)
{
  return 0;
}

uint64_t CI::TextureNode::output_depth(CI::TextureNode *this)
{
  if (*((unsigned char *)this + 88)) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t CI::GLTextureNode::format(CI::GLTextureNode *this)
{
  return 0;
}

uint64_t CI::TextureNode::alpha_mode(CI::TextureNode *this)
{
  return *((unsigned int *)this + 20);
}

uint64_t CI::TextureNode::texture_id(CI::TextureNode *this)
{
  return *((unsigned int *)this + 12);
}

uint64_t CI::GLTextureNode::texture_ref(CI::GLTextureNode *this)
{
  return 0;
}

__n128 CI::TextureNode::set_texture(__n128 *a1, __n128 *a2, unint64_t a3)
{
  __n128 result = *a2;
  a1[3] = *a2;
  a1[4].n128_u64[0] = a3;
  return result;
}

uint64_t non-virtual thunk to'CI::TextureNode::type(CI::TextureNode *this)
{
  return 48;
}

void non-virtual thunk to'CI::GLTextureNode::~GLTextureNode(CI::GLTextureNode *this)
{
}

{
  uint64_t vars8;

  CI::TextureNode::~TextureNode((CI::GLTextureNode *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

void CI::MetalTextureNode::MetalTextureNode(CI::Node *a1)
{
}

void sub_1938EA740(_Unwind_Exception *a1)
{
  CI::TextureNode::~TextureNode(v1);
  _Unwind_Resume(a1);
}

void sub_1938EA7D0(_Unwind_Exception *a1)
{
  CI::TextureImage::~TextureImage(v1);
  _Unwind_Resume(a1);
}

uint64_t CI::InstanceCounted<(CI::Type)25>::type()
{
  return 25;
}

void *CI::InstanceCounted<(CI::Type)25>::~InstanceCounted(void *result)
{
  *__n128 result = &unk_1EE45AC38;
  atomic_fetch_add(&dword_1EB466E78[23], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)25>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AC38;
  atomic_fetch_add(&dword_1EB466E78[23], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void CI::Image::set_url(CI::Image *this, CFTypeRef cf)
{
  CFTypeRef v3 = (CFTypeRef)*((void *)this + 6);
  if (v3 != cf)
  {
    if (cf)
    {
      CFRetain(cf);
      CFTypeRef v3 = (CFTypeRef)*((void *)this + 6);
    }
    if (v3) {
      CFRelease(v3);
    }
    *((void *)this + 6) = cf;
  }
}

size_t CI::Image::print_for_graph(void *a1, FILE *a2)
{
  if (CI_GRAPHVIZ_INTERNAL() || CI_PRINT_TREE_dump_inputs()) {
    fprintf(a2, "{%d} ", *((_DWORD *)a1 + 25));
  }
  (*(void (**)(void *, FILE *))(*a1 + 160))(a1, a2);
  if (!CGRectIsNull(*(CGRect *)(a1 + 2)))
  {
    fwrite(" roi=", 5uLL, 1uLL, a2);
    CI::fprintf(a2, v4, *(CGRect *)(a1 + 2));
  }
  if ((*(float (**)(void *))(*a1 + 232))(a1) > 1.0)
  {
    float v5 = (*(float (**)(void *))(*a1 + 232))(a1);
    fprintf(a2, " headroom=%.3f", v5);
  }
  if ((*(unsigned int (**)(void *))(*a1 + 128))(a1)) {
    fwrite(" opaque", 7uLL, 1uLL, a2);
  }
  fwrite(" extent=", 8uLL, 1uLL, a2);
  v19.origin.double x = (*(double (**)(void *))(*a1 + 88))(a1);
  CI::fprintf(a2, v6, v19);
  CGFloat v7 = (*(double (**)(void *))(*a1 + 88))(a1);
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  v22.origin.double x = (*(double (**)(void *))(*a1 + 96))(a1);
  v22.origin.double y = v14;
  v22.size.double width = v15;
  v22.size.double height = v16;
  v20.origin.double x = v7;
  v20.origin.double y = v9;
  v20.size.double width = v11;
  v20.size.double height = v13;
  size_t result = CGRectEqualToRect(v20, v22);
  if ((result & 1) == 0)
  {
    v21.origin.double x = (*(double (**)(void *))(*a1 + 96))(a1);
    size_t result = CI::fprintf(a2, v18, v21);
  }
  if (a1[11]) {
    return fprintf(a2, " recipe=%08X", a1[11]);
  }
  return result;
}

void *CI::Image::node_for_graphviz(unsigned int *a1, void *a2)
{
  double v4 = (*(double (**)(unsigned int *))(*(void *)a1 + 88))(a1);
  double v8 = (void *)CIGVNodeCreateForNode((uint64_t)a1, v4, v5, v6, v7);
  CGFloat v9 = (const char *)(*(uint64_t (**)(unsigned int *))(*(void *)a1 + 56))(a1);
  CIGVNodeSetShape(v8, v9);
  double v10 = (const char *)(*(uint64_t (**)(unsigned int *))(*(void *)a1 + 64))(a1);
  CIGVNodeSetColor(v8, v10);
  if (CI_GRAPHVIZ_INTERNAL())
  {
    uint64_t v11 = a1[25];
LABEL_5:
    CGFloat v13 = (const char *)CFStringCreateWithFormat(0, 0, @"%u", v11);
    CIGVNodeSetTitle(v8, v13);
    CFRelease(v13);
    goto LABEL_6;
  }
  double v17 = a1;
  double v12 = std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a2, &v17);
  if (v12)
  {
    uint64_t v11 = *((unsigned int *)v12 + 6);
    goto LABEL_5;
  }
LABEL_6:
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 0x40000000;
  v16[2] = ___ZNK2CI5Image17node_for_graphvizERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEE_block_invoke;
  v16[3] = &__block_descriptor_tmp_15;
  v16[4] = a1;
  v16[5] = a2;
  CGFloat v14 = (const char *)stream_to_string((uint64_t)v16);
  CIGVNodeSetLabel(v8, v14);
  CFRelease(v14);
  return v8;
}

size_t ___ZNK2CI5Image17node_for_graphvizERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEE_block_invoke(uint64_t a1, FILE *a2)
{
  CFTypeRef v3 = *(void **)(a1 + 32);
  (*(void (**)(void *, FILE *, void, void))(*v3 + 168))(v3, a2, *(void *)(a1 + 40), 0);
  if (!CGRectIsNull(*(CGRect *)(v3 + 2)))
  {
    fprintf(a2, "%croi=", 10);
    CI::fprintf(a2, v4, *(CGRect *)(v3 + 2));
  }
  if ((*(float (**)(void *))(*v3 + 232))(v3) > 1.0)
  {
    float v5 = (*(float (**)(void *))(*v3 + 232))(v3);
    fprintf(a2, "%cheadroom=%.3f", 10, v5);
  }
  if ((*(unsigned int (**)(void *))(*v3 + 128))(v3)) {
    fprintf(a2, "%copaque", 10);
  }
  fprintf(a2, "%cextent=", 10);
  v21.origin.double x = (*(double (**)(void *))(*v3 + 88))(v3);
  CI::fprintf(a2, v6, v21);
  CGFloat v7 = (*(double (**)(void *))(*v3 + 88))(v3);
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  v24.origin.double x = (*(double (**)(void *))(*v3 + 96))(v3);
  v24.origin.double y = v14;
  v24.size.double width = v15;
  v24.size.double height = v16;
  v22.origin.double x = v7;
  v22.origin.double y = v9;
  v22.size.double width = v11;
  v22.size.double height = v13;
  size_t result = CGRectEqualToRect(v22, v24);
  if ((result & 1) == 0)
  {
    v23.origin.double x = (*(double (**)(void *))(*v3 + 96))(v3);
    size_t result = CI::fprintf(a2, v18, v23);
  }
  uint64_t v19 = v3[10];
  if (v19) {
    size_t result = fprintf(a2, "%cdigest=%016llX", 10, v19);
  }
  uint64_t v20 = v3[11];
  if (v20) {
    return fprintf(a2, "%crecipe=%016llX", 10, v20);
  }
  return result;
}

double CI::Image::headroom(CI::Image *this)
{
  return 0.0;
}

char *CI::KernelArguments::name_for_type(int a1)
{
  if (a1 > 47) {
    return 0;
  }
  else {
    return CI::KernelArguments::name_for_type(CI::KernelArgumentType)::names[a1];
  }
}

BOOL CI::KernelArguments::is_texture(int a1)
{
  return (a1 - 1) < 4;
}

void CI::KernelArguments::print_names(CI::KernelArguments *this, __sFILE *a2)
{
  uint64_t v2 = *((void *)this + 1);
  if (v2)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    _OWORD v3[2] = ___ZNK2CI17SerialStringArray5printEP7__sFILE_block_invoke;
    v3[3] = &__block_descriptor_tmp_51;
    _OWORD v3[4] = v2;
    stream_to_file(a2, (uint64_t)v3);
  }
}

void CI::KernelArguments::print_types(CI::KernelArguments *this, __sFILE *a2)
{
  uint64_t v2 = *(void *)this;
  if (*(void *)this)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 0x40000000;
    _OWORD v3[2] = ___ZNK2CI14SerialValArrayIiE5printEP7__sFILEU13block_pointerFPKciE_block_invoke;
    v3[3] = &unk_1E5770540;
    _OWORD v3[4] = &__block_literal_global_87;
    void v3[5] = v2;
    stream_to_file(a2, (uint64_t)v3);
  }
}

char *___ZNK2CI15KernelArguments11print_typesEP7__sFILE_block_invoke(uint64_t a1, int a2)
{
  if (a2 > 47) {
    return 0;
  }
  else {
    return CI::KernelArguments::name_for_type(CI::KernelArgumentType)::names[a2];
  }
}

uint64_t CI::KernelArguments::get_name(CI::KernelArguments *this, unsigned int a2)
{
  uint64_t result = 0;
  if ((a2 & 0x80000000) == 0)
  {
    uint64_t v4 = *((void *)this + 1);
    if (v4)
    {
      if (*(_DWORD *)v4 <= (signed int)a2) {
        return 0;
      }
      else {
        return *(void *)(*(void *)(v4 + 32) + 8 * a2);
      }
    }
  }
  return result;
}

uint64_t *CI::KernelArguments::set_type(uint64_t *result, int a2, int a3)
{
  uint64_t v3 = *result;
  if (*result)
  {
    if (a2 > 9) {
      uint64_t v4 = (_DWORD *)(*(void *)(v3 + 16) + 4 * (a2 - 10));
    }
    else {
      uint64_t v4 = (_DWORD *)(v3 + 4 * a2 + 24);
    }
    *uint64_t v4 = a3;
  }
  return result;
}

uint64_t ___ZNK2CI17SerialStringArray5printEP7__sFILE_block_invoke(uint64_t result, FILE *a2)
{
  uint64_t v2 = *(int **)(result + 32);
  if (*v2 >= 1)
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t result = fprintf(a2, "[%i] = %s\n", v4, *(const char **)(*((void *)v2 + 4) + 8 * v4));
      ++v4;
    }
    while (v4 < *v2);
  }
  return result;
}

uint64_t ___ZNK2CI14SerialValArrayIiE5printEP7__sFILEU13block_pointerFPKciE_block_invoke(uint64_t result, FILE *a2)
{
  uint64_t v2 = *(int **)(result + 40);
  if (*v2 >= 1)
  {
    uint64_t v4 = result;
    uint64_t v5 = 0;
    double v6 = v2 + 6;
    do
    {
      CGFloat v7 = (const char *)(*(uint64_t (**)(void))(*(void *)(v4 + 32) + 16))();
      uint64_t result = fprintf(a2, "[%d] = %s\n", v5++, v7);
      ++v6;
    }
    while (v5 < *v2);
  }
  return result;
}

uint64_t CI::ColorKernel::ColorKernel(uint64_t a1, const char *a2, char *a3, char *a4, char a5, void **a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t *a11, char a12, char a13)
{
  uint64_t v15 = CI::Kernel::Kernel(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8, a9, a10, *a11, a11[1]);
  *(void *)uint64_t v15 = off_1EE4579D0;
  *(void *)(v15 + 168) = 0;
  *(unsigned char *)(v15 + 176) = a12;
  if (a13) {
    CI::SerialValArray<int>::append(a6, 30);
  }
  return a1;
}

{
  return CI::ColorKernel::ColorKernel(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

uint64_t CI::GeneralKernel::GeneralKernel(uint64_t a1, const char *a2, char *a3, char *a4, char a5, void **a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t *a11, char a12)
{
  *(void *)CI::Kernel::Kernel(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8, a9, a10, *a11, a11[1]) = off_1EE459208;
  if (a12) {
    CI::SerialValArray<int>::append(a6, 30);
  }
  return a1;
}

{
  return CI::GeneralKernel::GeneralKernel(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void sub_1938EB520(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938EB678(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1938EC6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __Block_byref_object_copy__24(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__24(uint64_t a1)
{
}

void ___ZL23newMTLLibraryWithSourcePU19objcproto9MTLDevice11objc_objectP8NSStringPP7NSError_block_invoke()
{
  unint64_t size = 0;
  v0 = getsectdatafromFramework("CoreImage", "__TEXT", "__runtimeheader", &size);
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = [NSString alloc];
    newMTLLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,NSError **)::_runtime_header = [v2 initWithBytesNoCopy:v1 length:size encoding:1 freeWhenDone:0];
    if (newMTLLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,NSError **)::_runtime_header) {
      return;
    }
    goto LABEL_7;
  }
  uint64_t v3 = ci_logger_compile();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_193671000, v3, OS_LOG_TYPE_INFO, "Could not initialize header file", buf, 2u);
  }
  if (!newMTLLibraryWithSource(objc_object  {objcproto9MTLDevice}*,NSString *,NSError **)::_runtime_header)
  {
LABEL_7:
    uint64_t v4 = ci_logger_compile();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_193671000, v4, OS_LOG_TYPE_INFO, "Could not create the runtime headers string", v5, 2u);
    }
  }
}

void *___ZL26isHarvestingForThisProcessv_block_invoke(uint64_t a1)
{
  uint64_t v1 = (void *)[NSString stringWithCString:*(void *)(a1 + 32) encoding:1];
  uint64_t result = (void *)[MEMORY[0x1E4F28F80] processInfo];
  if (result) {
    uint64_t result = objc_msgSend(v1, "containsString:", objc_msgSend(result, "processName"));
  }
  isHarvestingForThisProcess(void)::isListed = (char)result;
  return result;
}

void ___ZL37addSpecializedFunctionToBinaryArchiveP21MTLFunctionDescriptorPU21objcproto10MTLLibrary11objc_object_block_invoke(uint64_t a1)
{
  id v4 = 0;
  id v2 = objc_opt_new();
  objc_msgSend(v2, "setSpecializedName:", objc_msgSend(*(id *)(a1 + 32), "specializedName"));
  objc_msgSend(v2, "setName:", objc_msgSend(*(id *)(a1 + 32), "name"));
  objc_msgSend(v2, "setConstantValues:", objc_msgSend(*(id *)(a1 + 32), "constantValues"));
  if (([*(id *)(a1 + 40) addFunctionWithDescriptor:v2 library:*(void *)(a1 + 48) error:&v4] & 1) == 0)
  {
    uint64_t v3 = ci_logger_compile();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      ___ZL37addSpecializedFunctionToBinaryArchiveP21MTLFunctionDescriptorPU21objcproto10MTLLibrary11objc_object_block_invoke_cold_1(&v4, v3);
    }
  }
}

void CI::MainProgram::~MainProgram(CI::MainProgram *this)
{
  *(void *)this = &unk_1EE457C28;
  id v2 = (void *)*((void *)this + 6);
  if (v2) {
    free(v2);
  }
  *((void *)this + 6) = 0;
  uint64_t v3 = (void *)*((void *)this + 7);
  if (v3) {
    free(v3);
  }
  *((void *)this + 7) = 0;
  CI::KernelArguments::~KernelArguments((CI::MainProgram *)((char *)this + 64));
}

uint64_t CI::MainProgram::print_program(const char **this, __sFILE *__stream)
{
  return fprintf(__stream, "%s\n", this[7]);
}

void CI::MainProgram::print_argument_types(CI::MainProgram *this, __sFILE *a2)
{
}

void CI::MainProgram::print_argument_names(CI::MainProgram *this, __sFILE *a2)
{
}

uint64_t CI::MainProgram::vector_arguments_size(CI::MainProgram *this, const CI::Context *a2)
{
  if (!a2) {
    return 0;
  }
  int v4 = CI::KernelArguments::count((CI::MainProgram *)((char *)this + 64));
  if (v4 < 1) {
    return 0;
  }
  int v5 = v4;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  do
  {
    uint64_t v8 = (*(uint64_t (**)(CI::MainProgram *, uint64_t))(*(void *)this + 40))(this, v7);
    if (!CI::KernelArguments::is_texture(v8)) {
      uint64_t v6 = v6
    }
         + (*(unsigned int (**)(const CI::Context *, uint64_t))(*(void *)a2 + 520))(a2, v8);
    uint64_t v7 = (v7 + 1);
  }
  while (v5 != v7);
  return v6;
}

uint64_t CI::MainProgram::argument_name(CI::MainProgram *this, unsigned int a2)
{
  return CI::KernelArguments::get_name((CI::MainProgram *)((char *)this + 64), a2);
}

uint64_t CI::MainProgram::type(CI::MainProgram *this)
{
  return 66;
}

void CI::LegacyDAGDescriptor::ArgumentInfo::add(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  switch(a2)
  {
    case 0:
    case 1:
      unint64_t v7 = a1[4];
      uint64_t v8 = (char *)a1[3];
      if ((unint64_t)v8 < v7)
      {
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = a3;
        CGFloat v9 = v8 + 24;
        *((void *)v8 + 2) = a4;
LABEL_89:
        a1[3] = v9;
        return;
      }
      uint64_t v20 = (char *)a1[2];
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v20) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v20) >> 3);
        if (2 * v23 > v22) {
          unint64_t v22 = 2 * v23;
        }
        if (v23 >= 0x555555555555555) {
          unint64_t v24 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24)
        {
          CGFloat v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v24);
          uint64_t v20 = (char *)a1[2];
          uint64_t v8 = (char *)a1[3];
        }
        else
        {
          CGFloat v25 = 0;
        }
        CFArrayRef v62 = &v25[24 * v21];
        double v63 = &v25[24 * v24];
        *(void *)CFArrayRef v62 = 0;
        *((void *)v62 + 1) = a3;
        *((void *)v62 + 2) = a4;
        CGFloat v9 = v62 + 24;
        if (v8 != v20)
        {
          do
          {
            long long v64 = *(_OWORD *)(v8 - 24);
            *((void *)v62 - 1) = *((void *)v8 - 1);
            *(_OWORD *)(v62 - 24) = v64;
            v62 -= 24;
            v8 -= 24;
          }
          while (v8 != v20);
          uint64_t v20 = (char *)a1[2];
        }
        a1[2] = v62;
        a1[3] = v9;
        a1[4] = v63;
        if (v20) {
          operator delete(v20);
        }
        goto LABEL_89;
      }
      goto LABEL_121;
    case 2:
      unint64_t v14 = a1[4];
      CGFloat v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 < v14)
      {
        uint64_t v12 = 1;
        goto LABEL_18;
      }
      CGFloat v26 = (uint64_t *)a1[2];
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
      unint64_t v38 = v37 + 1;
      if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_121;
      }
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - (void)v26) >> 3);
      if (2 * v39 > v38) {
        unint64_t v38 = 2 * v39;
      }
      if (v39 >= 0x555555555555555) {
        unint64_t v40 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v40 = v38;
      }
      if (v40)
      {
        unint64_t v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v40);
        CGFloat v26 = (uint64_t *)a1[2];
        CGFloat v11 = (uint64_t *)a1[3];
      }
      else
      {
        unint64_t v41 = 0;
      }
      uint64_t v65 = &v41[24 * v37];
      float64x2_t v66 = &v41[24 * v40];
      *(void *)uint64_t v65 = 1;
      *((void *)v65 + 1) = a3;
      *((void *)v65 + 2) = a4;
      uint64_t v19 = v65 + 24;
      if (v11 == v26) {
        goto LABEL_118;
      }
      do
      {
        long long v69 = *(_OWORD *)(v11 - 3);
        *((void *)v65 - 1) = *(v11 - 1);
        *(_OWORD *)(v65 - 24) = v69;
        v65 -= 24;
        v11 -= 3;
      }
      while (v11 != v26);
      goto LABEL_117;
    case 3:
      unint64_t v15 = a1[4];
      CGFloat v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 < v15)
      {
        uint64_t v12 = 2;
        goto LABEL_18;
      }
      CGFloat v26 = (uint64_t *)a1[2];
      unint64_t v42 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
      unint64_t v43 = v42 + 1;
      if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_121;
      }
      unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - (void)v26) >> 3);
      if (2 * v44 > v43) {
        unint64_t v43 = 2 * v44;
      }
      if (v44 >= 0x555555555555555) {
        unint64_t v45 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v45 = v43;
      }
      if (v45)
      {
        unint64_t v46 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v45);
        CGFloat v26 = (uint64_t *)a1[2];
        CGFloat v11 = (uint64_t *)a1[3];
      }
      else
      {
        unint64_t v46 = 0;
      }
      uint64_t v65 = &v46[24 * v42];
      float64x2_t v66 = &v46[24 * v45];
      *(void *)uint64_t v65 = 2;
      *((void *)v65 + 1) = a3;
      *((void *)v65 + 2) = a4;
      uint64_t v19 = v65 + 24;
      if (v11 == v26) {
        goto LABEL_118;
      }
      do
      {
        long long v70 = *(_OWORD *)(v11 - 3);
        *((void *)v65 - 1) = *(v11 - 1);
        *(_OWORD *)(v65 - 24) = v70;
        v65 -= 24;
        v11 -= 3;
      }
      while (v11 != v26);
      goto LABEL_117;
    case 4:
    case 5:
      unint64_t v10 = a1[4];
      CGFloat v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 >= v10)
      {
        CGFloat v26 = (uint64_t *)a1[2];
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
        unint64_t v28 = v27 + 1;
        if (v27 + 1 > 0xAAAAAAAAAAAAAAALL) {
LABEL_121:
        }
          abort();
        unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (void)v26) >> 3);
        if (2 * v29 > v28) {
          unint64_t v28 = 2 * v29;
        }
        if (v29 >= 0x555555555555555) {
          unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v30 = v28;
        }
        if (v30)
        {
          unint64_t v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v30);
          CGFloat v26 = (uint64_t *)a1[2];
          CGFloat v11 = (uint64_t *)a1[3];
        }
        else
        {
          unint64_t v31 = 0;
        }
        uint64_t v65 = &v31[24 * v27];
        float64x2_t v66 = &v31[24 * v30];
        *(void *)uint64_t v65 = 3;
        *((void *)v65 + 1) = a3;
        *((void *)v65 + 2) = a4;
        uint64_t v19 = v65 + 24;
        if (v11 != v26)
        {
          do
          {
            long long v67 = *(_OWORD *)(v11 - 3);
            *((void *)v65 - 1) = *(v11 - 1);
            *(_OWORD *)(v65 - 24) = v67;
            v65 -= 24;
            v11 -= 3;
          }
          while (v11 != v26);
LABEL_117:
          CGFloat v26 = (uint64_t *)a1[2];
        }
LABEL_118:
        a1[2] = v65;
        a1[3] = v19;
        a1[4] = v66;
        if (v26) {
          operator delete(v26);
        }
        goto LABEL_120;
      }
      uint64_t v12 = 3;
LABEL_18:
      *CGFloat v11 = v12;
      v11[1] = a3;
      _OWORD v11[2] = a4;
      uint64_t v19 = v11 + 3;
LABEL_120:
      a1[3] = v19;
      return;
    case 6:
      unint64_t v16 = a1[4];
      CGFloat v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 < v16)
      {
        uint64_t v12 = 4;
        goto LABEL_18;
      }
      CGFloat v26 = (uint64_t *)a1[2];
      unint64_t v47 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
      unint64_t v48 = v47 + 1;
      if (v47 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_121;
      }
      unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - (void)v26) >> 3);
      if (2 * v49 > v48) {
        unint64_t v48 = 2 * v49;
      }
      if (v49 >= 0x555555555555555) {
        unint64_t v50 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50)
      {
        double v51 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v50);
        CGFloat v26 = (uint64_t *)a1[2];
        CGFloat v11 = (uint64_t *)a1[3];
      }
      else
      {
        double v51 = 0;
      }
      uint64_t v65 = &v51[24 * v47];
      float64x2_t v66 = &v51[24 * v50];
      *(void *)uint64_t v65 = 4;
      *((void *)v65 + 1) = a3;
      *((void *)v65 + 2) = a4;
      uint64_t v19 = v65 + 24;
      if (v11 == v26) {
        goto LABEL_118;
      }
      do
      {
        long long v71 = *(_OWORD *)(v11 - 3);
        *((void *)v65 - 1) = *(v11 - 1);
        *(_OWORD *)(v65 - 24) = v71;
        v65 -= 24;
        v11 -= 3;
      }
      while (v11 != v26);
      goto LABEL_117;
    case 7:
    case 8:
      unint64_t v13 = a1[4];
      CGFloat v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 < v13)
      {
        uint64_t v12 = 5;
        goto LABEL_18;
      }
      CGFloat v26 = (uint64_t *)a1[2];
      unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
      unint64_t v33 = v32 + 1;
      if (v32 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_121;
      }
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (void)v26) >> 3);
      if (2 * v34 > v33) {
        unint64_t v33 = 2 * v34;
      }
      if (v34 >= 0x555555555555555) {
        unint64_t v35 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        CGRect v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v35);
        CGFloat v26 = (uint64_t *)a1[2];
        CGFloat v11 = (uint64_t *)a1[3];
      }
      else
      {
        CGRect v36 = 0;
      }
      uint64_t v65 = &v36[24 * v32];
      float64x2_t v66 = &v36[24 * v35];
      *(void *)uint64_t v65 = 5;
      *((void *)v65 + 1) = a3;
      *((void *)v65 + 2) = a4;
      uint64_t v19 = v65 + 24;
      if (v11 == v26) {
        goto LABEL_118;
      }
      do
      {
        long long v68 = *(_OWORD *)(v11 - 3);
        *((void *)v65 - 1) = *(v11 - 1);
        *(_OWORD *)(v65 - 24) = v68;
        v65 -= 24;
        v11 -= 3;
      }
      while (v11 != v26);
      goto LABEL_117;
    case 9:
      unint64_t v17 = a1[4];
      CGFloat v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 < v17)
      {
        uint64_t v12 = 6;
        goto LABEL_18;
      }
      CGFloat v26 = (uint64_t *)a1[2];
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_121;
      }
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v26) >> 3);
      if (2 * v54 > v53) {
        unint64_t v53 = 2 * v54;
      }
      if (v54 >= 0x555555555555555) {
        unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55)
      {
        BOOL v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v55);
        CGFloat v26 = (uint64_t *)a1[2];
        CGFloat v11 = (uint64_t *)a1[3];
      }
      else
      {
        BOOL v56 = 0;
      }
      uint64_t v65 = &v56[24 * v52];
      float64x2_t v66 = &v56[24 * v55];
      *(void *)uint64_t v65 = 6;
      *((void *)v65 + 1) = a3;
      *((void *)v65 + 2) = a4;
      uint64_t v19 = v65 + 24;
      if (v11 == v26) {
        goto LABEL_118;
      }
      do
      {
        long long v72 = *(_OWORD *)(v11 - 3);
        *((void *)v65 - 1) = *(v11 - 1);
        *(_OWORD *)(v65 - 24) = v72;
        v65 -= 24;
        v11 -= 3;
      }
      while (v11 != v26);
      goto LABEL_117;
    case 10:
      unint64_t v18 = a1[4];
      CGFloat v11 = (uint64_t *)a1[3];
      if ((unint64_t)v11 < v18)
      {
        uint64_t v12 = 7;
        goto LABEL_18;
      }
      CGFloat v26 = (uint64_t *)a1[2];
      unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * (v11 - v26);
      unint64_t v58 = v57 + 1;
      if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
        goto LABEL_121;
      }
      unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)v26) >> 3);
      if (2 * v59 > v58) {
        unint64_t v58 = 2 * v59;
      }
      if (v59 >= 0x555555555555555) {
        unint64_t v60 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v60 = v58;
      }
      if (v60)
      {
        uint64_t v61 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 4), v60);
        CGFloat v26 = (uint64_t *)a1[2];
        CGFloat v11 = (uint64_t *)a1[3];
      }
      else
      {
        uint64_t v61 = 0;
      }
      uint64_t v65 = &v61[24 * v57];
      float64x2_t v66 = &v61[24 * v60];
      *(void *)uint64_t v65 = 7;
      *((void *)v65 + 1) = a3;
      *((void *)v65 + 2) = a4;
      uint64_t v19 = v65 + 24;
      if (v11 == v26) {
        goto LABEL_118;
      }
      do
      {
        long long v73 = *(_OWORD *)(v11 - 3);
        *((void *)v65 - 1) = *(v11 - 1);
        *(_OWORD *)(v65 - 24) = v73;
        v65 -= 24;
        v11 -= 3;
      }
      while (v11 != v26);
      goto LABEL_117;
    default:
      goto LABEL_121;
  }
}

void CI::StitchableFunctionDAGDescriptor::print(id *this, __sFILE *a2)
{
  uint64_t v4 = 0;
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  v28[0] = 0;
  v28[1] = 0;
  unint64_t v27 = (uint64_t *)v28;
  while (v4 < (int)[this[9] count])
  {
    uint64_t v26 = [this[9] objectAtIndexedSubscript:v4];
    unint64_t v29 = &v26;
    *((_DWORD *)std::__tree<std::__value_type<CI::ImageDigest,int>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,int>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,int>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest const&>,std::tuple<>>(&v27, (unint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v29)+ 10) = v4++;
  }
  fwrite("// Stitched DAG Functions\n", 0x1AuLL, 1uLL, a2);
  for (unint64_t i = 0; i < [this[9] count]; unint64_t i = v21 + 1)
  {
    fprintf(a2, "#%zu = ", i);
    unint64_t v21 = i;
    uint64_t v6 = (void *)[this[9] objectAtIndexedSubscript:i];
    unint64_t v7 = 0;
    char v8 = 1;
    while (v7 < objc_msgSend((id)objc_msgSend(v6, "arguments"), "count"))
    {
      objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v7);
      v8 &= CI::StitchableFunctionDAGDescriptor::get_argument_type() == 7;
      ++v7;
    }
    fputs((const char *)objc_msgSend((id)objc_msgSend(v6, "name"), "UTF8String"), a2);
    if (objc_msgSend((id)objc_msgSend(v6, "arguments"), "count"))
    {
      unint64_t v9 = 0;
      if (v8)
      {
        while (v9 < objc_msgSend((id)objc_msgSend(v6, "arguments"), "count"))
        {
          if (v9) {
            uint64_t v10 = 44;
          }
          else {
            uint64_t v10 = 40;
          }
          uint64_t v26 = objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v9);
          unint64_t v29 = &v26;
          CGFloat v11 = std::__tree<std::__value_type<CI::ImageDigest,int>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,int>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,int>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest const&>,std::tuple<>>(&v27, (unint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v29);
          fprintf(a2, "%c #%zu", v10, *((int *)v11 + 10));
          ++v9;
        }
      }
      else
      {
        while (v9 < objc_msgSend((id)objc_msgSend(v6, "arguments"), "count"))
        {
          if (v9) {
            uint64_t v12 = 44;
          }
          else {
            uint64_t v12 = 40;
          }
          fprintf(a2, "%c ", v12);
          objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v9);
          switch(CI::StitchableFunctionDAGDescriptor::get_argument_type())
          {
            case 0u:
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v9), "bindIndex");
              fprintf(a2, "Texture%zu");
              break;
            case 3u:
              objc_msgSend((id)objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v9), "bindIndex");
              fprintf(a2, "Sampler%zu");
              break;
            case 4u:
              unint64_t v14 = objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v9);
              [v14 bindIndex];
              [v14 byteOffset];
              fprintf(a2, "Buffer%zu+%zu");
              break;
            case 7u:
              uint64_t v26 = objc_msgSend((id)objc_msgSend(v6, "arguments"), "objectAtIndexedSubscript:", v9);
              unint64_t v29 = &v26;
              std::__tree<std::__value_type<CI::ImageDigest,int>,std::__map_value_compare<CI::ImageDigest,std::__value_type<CI::ImageDigest,int>,std::less<CI::ImageDigest>,true>,std::allocator<std::__value_type<CI::ImageDigest,int>>>::__emplace_unique_key_args<CI::ImageDigest,std::piecewise_construct_t const&,std::tuple<CI::ImageDigest const&>,std::tuple<>>(&v27, (unint64_t *)&v26, (uint64_t)&std::piecewise_construct, &v29);
              fprintf(a2, "#%zu");
              break;
            default:
              fputs(v13, a2);
              break;
          }
          ++v9;
        }
      }
      unint64_t v15 = ")\n";
      size_t v16 = 2;
    }
    else
    {
      unint64_t v15 = "()\n";
      size_t v16 = 3;
    }
    fwrite(v15, v16, 1uLL, a2);
  }
  if (this[2])
  {
    unint64_t v17 = (void *)[this[2] performSelector:NSSelectorFromString(&cfstr_Newnamedconsta.isa)];
    if ([v17 count])
    {
      fputc(10, a2);
      fwrite("// Function Constants\n", 0x16uLL, 1uLL, a2);
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      long long v25 = 0u;
      uint64_t v18 = [v17 countByEnumeratingWithState:&v22 objects:v30 count:16];
      if (v18)
      {
        uint64_t v19 = *(void *)v23;
        do
        {
          for (uint64_t j = 0; j != v18; ++j)
          {
            if (*(void *)v23 != v19) {
              objc_enumerationMutation(v17);
            }
            fprintf(a2, "%s\n", (const char *)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v22 + 1) + 8 * j), "description"), "UTF8String"));
          }
          uint64_t v18 = [v17 countByEnumeratingWithState:&v22 objects:v30 count:16];
        }
        while (v18);
      }
    }
  }
  fputc(10, a2);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v27, v28[0]);
}

void sub_1938ED934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,void *a23)
{
}

uint64_t CI::StitchableFunctionDAGDescriptor::get_argument_type()
{
  if (objc_opt_isKindOfClass()) {
    return 6;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 4;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 0;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 3;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 9;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 10;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return 7;
  }
  else {
    return 11;
  }
}

void CI::MetalDAG::~MetalDAG(CI::MetalDAG *this)
{
  *(void *)this = &unk_1EE45E778;
  *((void *)this + 12) = &unk_1EE45E7E0;
  *((void *)this + 22) = &unk_1EE45E808;
  id v2 = *((void *)this + 16);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN2CI8MetalDAGD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v2, block);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v3);
  }
  *((void *)this + 22) = &unk_1EE456A58;
  atomic_fetch_add(&dword_1EB466F58[10], 0xFFFFFFFF);
  CI::MetalMainProgram::~MetalMainProgram(this);
}

{
  uint64_t vars8;

  CI::MetalDAG::~MetalDAG(this);

  JUMPOUT(0x1997023B0);
}

void ___ZN2CI8MetalDAGD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = *(const void **)(v1 + 160);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)(v1 + 160) = 0;
}

void non-virtual thunk to'CI::MetalDAG::~MetalDAG(CI::MetalDAG *this)
{
}

{
  CI::MetalDAG::~MetalDAG((CI::MetalDAG *)((char *)this - 176));
}

{
  uint64_t vars8;

  CI::MetalDAG::~MetalDAG((CI::MetalDAG *)((char *)this - 96));

  JUMPOUT(0x1997023B0);
}

{
  uint64_t vars8;

  CI::MetalDAG::~MetalDAG((CI::MetalDAG *)((char *)this - 176));

  JUMPOUT(0x1997023B0);
}

void *CI::LegacyDAGDescriptor::compile(uint64_t a1, uint64_t a2, char *a3, int a4, void *a5, uint64_t a6)
{
  CGFloat v11 = *(NSObject ***)(a1 + 32);
  if (v11)
  {
    uint64_t v12 = (void *)CI::KernelArchive::find(v11, a6, a3);
    *(unsigned char *)(a1 + 24) = v12 != 0;
    if (v12)
    {
      return (void *)CreateComputePipelineState(a5, v12, v13, 0);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 0;
  }
  uint64_t v15 = *(void *)(a1 + 88);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 16);

  return CIMetalComputePipelineStateCreateFromDAG(a2, (uint64_t)a3, a5, v15, v16, v17, a6);
}

void *CI::LegacyDAGDescriptor::compile(uint64_t a1, uint64_t a2, char *a3, int a4, void *a5, uint64_t a6, unsigned int a7)
{
  unint64_t v13 = *(NSObject ***)(a1 + 32);
  if (v13)
  {
    uint64_t v14 = CI::KernelArchive::find(v13, a6, a3);
    *(unsigned char *)(a1 + 24) = v14 != 0;
    if (v14)
    {
      return (void *)CreateRenderPipelineState(a5, v14, v15, a7, 0);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 0;
  }
  uint64_t v17 = *(void *)(a1 + 88);
  uint64_t v18 = *(void *)(a1 + 40);
  uint64_t v19 = *(void *)(a1 + 16);

  return CIMetalRenderPipelineStateCreateFromDAG(a2, (uint64_t)a3, a5, v17, v18, v19, a6, a7);
}

uint64_t CI::LegacyDAGDescriptor::print(id *this, __sFILE *__stream)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  fwrite("// DAG Functions\n", 0x11uLL, 1uLL, __stream);
  if ([this[11] count])
  {
    unint64_t v4 = 0;
    uint64_t v26 = this;
    do
    {
      fprintf(__stream, "#%zu: ", v4);
      int v5 = (void *)[this[11] objectAtIndexedSubscript:v4];
      uint64_t v6 = (void *)[v5 returnType];
      unint64_t v7 = [v6 dataType];
      data_type_name = CI::get_data_type_name(v7, v8);
      int v10 = *(unsigned __int8 *)data_type_name;
      if (v10 == 78)
      {
        if (data_type_name[1] != 111) {
          goto LABEL_9;
        }
        fwrite("void ", 5uLL, 1uLL, __stream);
      }
      else
      {
        if (v10 != 117 || data_type_name[1] != 110)
        {
LABEL_9:
          fprintf(__stream, "%s ");
          goto LABEL_10;
        }
        [v6 dataType];
        fprintf(__stream, "type%lu ");
      }
LABEL_10:
      fprintf(__stream, "%s ", (const char *)objc_msgSend((id)objc_msgSend(v5, "name"), "UTF8String"));
      uint64_t v11 = (uint64_t)this[5] + 24 * v4;
      uint64_t v12 = *(void *)(v11 + 8);
      uint64_t v13 = *(void *)(v11 + 16);
      fputc(40, __stream);
      if (v12)
      {
        uint64_t v14 = 0;
        uint64_t v15 = v13 + 8;
        do
        {
          uint64_t v16 = objc_msgSend((id)objc_msgSend((id)objc_msgSend(v5, "arguments"), "objectAtIndexedSubscript:", v14), "dataTypeDescription");
          unint64_t v17 = [v16 dataType];
          uint64_t v19 = CI::get_data_type_name(v17, v18);
          if (*v19 == 117 && v19[1] == 110)
          {
            [v16 dataType];
            fprintf(__stream, "type%lu ");
          }
          else
          {
            fprintf(__stream, "%s ");
          }
          switch(*(void *)(v15 - 8))
          {
            case 3:
              fprintf(__stream, "Buffer[%zu]+%zu");
              break;
            case 4:
              fputs("ThreadPositionInGrid", __stream);
              break;
            case 5:
              fprintf(__stream, "#%zu");
              break;
            default:
              fprintf(__stream, "%s[%zu]");
              break;
          }
          if (v12 - 1 != v14) {
            fwrite(", ", 2uLL, 1uLL, __stream);
          }
          ++v14;
          v15 += 24;
        }
        while (v12 != v14);
      }
      fwrite(")\n", 2uLL, 1uLL, __stream);
      ++v4;
      this = v26;
    }
    while (v4 < [v26[11] count]);
  }
  if (this[2])
  {
    uint64_t v20 = (void *)[this[2] performSelector:NSSelectorFromString(&cfstr_Newnamedconsta.isa)];
    if ([v20 count])
    {
      fputc(10, __stream);
      fwrite("// Function Constants\n", 0x16uLL, 1uLL, __stream);
      long long v27 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      uint64_t v21 = [v20 countByEnumeratingWithState:&v27 objects:v31 count:16];
      if (v21)
      {
        uint64_t v22 = v21;
        uint64_t v23 = *(void *)v28;
        do
        {
          for (uint64_t i = 0; i != v22; ++i)
          {
            if (*(void *)v28 != v23) {
              objc_enumerationMutation(v20);
            }
            fprintf(__stream, "%s\n", (const char *)objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v27 + 1) + 8 * i), "description"), "UTF8String"));
          }
          uint64_t v22 = [v20 countByEnumeratingWithState:&v27 objects:v31 count:16];
        }
        while (v22);
      }
    }
  }
  return fputc(10, __stream);
}

const char *CI::get_data_type_name(unint64_t this, MTLDataType a2)
{
  if (this > 0x3C) {
    return "unknown";
  }
  else {
    return off_1E5774F58[this];
  }
}

uint64_t CI::MetalDAG::print_program(CI::MetalDAG *this, __sFILE *a2)
{
  return (*(uint64_t (**)(void, __sFILE *))(**((void **)this + 23) + 56))(*((void *)this + 23), a2);
}

uint64_t CI::PrecompiledKernels::new_function(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  dispatch_sync(*(dispatch_queue_t *)(a1 + 56), &__block_literal_global_157_0);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v6 = *(void **)(a1 + 8 * a3 + 24);
  uint64_t result = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (result)
  {
    uint64_t v8 = result;
    uint64_t v9 = *(void *)v12;
LABEL_3:
    uint64_t v10 = 0;
    while (1)
    {
      if (*(void *)v12 != v9) {
        objc_enumerationMutation(v6);
      }
      uint64_t result = objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * v10), "newExternFunctionWithName:", objc_msgSend(NSString, "stringWithUTF8String:", a2));
      if (result) {
        break;
      }
      if (v8 == ++v10)
      {
        uint64_t result = [v6 countByEnumeratingWithState:&v11 objects:v15 count:16];
        uint64_t v8 = result;
        if (result) {
          goto LABEL_3;
        }
        return result;
      }
    }
  }
  return result;
}

void *CI::MetalDAGHelper::get_unique_function(CI::MetalDAGHelper *this, const CI::MetalKernel *a2)
{
  uint64_t v4 = *(void *)(*((void *)this + 3) + 1952);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 80);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = objc_msgSend(*((id *)this + 25), "objectForKey:", objc_msgSend(NSString, "stringWithUTF8String:", *((void *)a2 + 1)));
  id v11 = (id)objc_opt_new();
  [v11 setBinaryArchives:v5];
  if (v6)
  {
    if (objc_msgSend(v6, "isEqualToNumber:", objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", *((void *)a2 + 5))))
    {
      unint64_t v7 = (void *)CI::MetalKernel::function((uint64_t)a2, &v11);
    }
    else
    {
      uint64_t v8 = objc_msgSend((id)objc_msgSend(NSString, "stringWithUTF8String:", *((void *)a2 + 1)), "stringByAppendingFormat:", @"_%d", 0);
      uint64_t v9 = 1;
      while ([*((id *)this + 25) objectForKey:v8])
      {
        uint64_t v8 = objc_msgSend((id)objc_msgSend(NSString, "stringWithUTF8String:", *((void *)a2 + 1)), "stringByAppendingFormat:", @"_%d", v9);
        uint64_t v9 = (v9 + 1);
      }
      [v11 setSpecializedName:v8];
      unint64_t v7 = (void *)CI::MetalKernel::function((uint64_t)a2, &v11);
      objc_msgSend(*((id *)this + 25), "setObject:forKey:", objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", CI::mtl_func_hash(v7)), objc_msgSend(v7, "name"));
    }
  }
  else
  {
    unint64_t v7 = (void *)CI::MetalKernel::function((uint64_t)a2, &v11);
    objc_msgSend(*((id *)this + 25), "setObject:forKey:", objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", CI::mtl_func_hash(v7)), objc_msgSend(v7, "name"));
  }

  return v7;
}

void sub_1938EE694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t CI::MetalDAGHelper::add_read_pixel_function_info(uint64_t this, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(this + 64))
  {
    uint64_t v5 = this;
    if (*(void *)(this + 72))
    {
      uint64_t v9 = (void (***)(void))(***(uint64_t (****)(void, uint64_t))(this + 8))(*(void *)(this + 8), 4);
      (**v9)();
      ((void (*)(void (***)(void), uint64_t, uint64_t, void))**v9)(v9, 3, a3, 0);
      ((void (*)(void (***)(void), uint64_t, uint64_t, void))**v9)(v9, 7, a4, 0);
      ((void (*)(void (***)(void), uint64_t, void, uint64_t))**v9)(v9, 4, 0, a5);
      uint64_t v10 = *(uint64_t (**)(void))(**(void **)(v5 + 8) + 40);
      return v10();
    }
  }
  return this;
}

uint64_t CI::MetalDAGHelper::add_colour_inout_function_info(uint64_t this)
{
  if (*(void *)(this + 64))
  {
    uint64_t v1 = this;
    if (*(void *)(this + 72))
    {
      id v2 = (void (***)(void))(***(uint64_t (****)(void, uint64_t))(this + 8))(*(void *)(this + 8), 1);
      (**v2)();
      uint64_t v3 = *(uint64_t (**)(void))(**(void **)(v1 + 8) + 40);
      return v3();
    }
  }
  return this;
}

uint64_t CI::MetalDAGHelper::add_write_block_function_info(uint64_t this, uint64_t a2)
{
  if (*(void *)(this + 64))
  {
    uint64_t v2 = this;
    if (*(void *)(this + 72))
    {
      uint64_t v4 = (void (***)(void))(***(uint64_t (****)(void, uint64_t))(this + 8))(*(void *)(this + 8), 4);
      (**v4)();
      ((void (*)(void (***)(void), uint64_t, uint64_t, void))**v4)(v4, 7, a2, 0);
      ((void (*)(void (***)(void), uint64_t, void, void))**v4)(v4, 9, 0, 0);
      ((void (*)(void (***)(void), uint64_t, void, void))**v4)(v4, 4, 0, 0);
      uint64_t v5 = *(uint64_t (**)(void))(**(void **)(v2 + 8) + 40);
      return v5();
    }
  }
  return this;
}

uint64_t CI::MetalDAGHelper::add_group_write_function_info(uint64_t this, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(this + 64))
  {
    uint64_t v4 = this;
    if (*(void *)(this + 72))
    {
      uint64_t v8 = (void (***)(void))(***(uint64_t (****)(void, uint64_t))(this + 8))(*(void *)(this + 8), 5);
      (**v8)();
      ((void (*)(void (***)(void), uint64_t, uint64_t, void))**v8)(v8, 7, a2, 0);
      ((void (*)(void (***)(void), uint64_t, uint64_t, void))**v8)(v8, 7, a3, 0);
      ((void (*)(void (***)(void), uint64_t, void, void))**v8)(v8, 4, 0, 0);
      ((void (*)(void (***)(void), uint64_t, void, uint64_t))**v8)(v8, 4, 0, a4);
      uint64_t v9 = *(uint64_t (**)(void))(**(void **)(v4 + 8) + 40);
      return v9();
    }
  }
  return this;
}

uint64_t CI::MetalDAGHelper::add_function_info(CI::MetalDAGHelper *this, const CI::ProgramNode *a2, const CI::GeneralKernelNode *a3, CI::Object **a4, uint64_t a5, unint64_t a6)
{
  uint64_t v9 = *((void *)a3 + 6);
  (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  if (*(unsigned char *)(v9 + 12)) {
    int v10 = CI::KernelArguments::count((CI::KernelArguments *)(v9 + 144));
  }
  else {
    int v10 = *(_DWORD *)(v9 + 20);
  }
  uint64_t v11 = v10;
  if (*((_DWORD *)this + 8) == 1)
  {
    uint64_t v12 = v10 + (uint64_t)(int)CI::Kernel::num_sampler_arguments((CI::Kernel *)v9);
    uint64_t v13 = v12 + (int)CI::Kernel::num_sampler_arguments((CI::Kernel *)v9);
    uint64_t v11 = v13 + (int)CI::Kernel::num_sampler_arguments((CI::Kernel *)v9);
    if (*((_DWORD *)this + 8) == 1)
    {
      for (uint64_t i = 0; ; ++i)
      {
        if (*(unsigned char *)(v9 + 12)) {
          int v15 = CI::KernelArguments::count((CI::KernelArguments *)(v9 + 144));
        }
        else {
          int v15 = *(_DWORD *)(v9 + 20);
        }
        if (i >= v15) {
          break;
        }
        uint64_t v16 = *((void *)a3 + 6);
        if (*(unsigned char *)(v16 + 12))
        {
          int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v16 + 144), i);
        }
        else
        {
          if (i >= *(int *)(v16 + 20)) {
            continue;
          }
          int type = *(_DWORD *)(*(void *)(v16 + 72) + 4 * i);
        }
        if (type == 31) {
          v11 += 5;
        }
      }
    }
  }
  if (*((void *)this + 8) && *((void *)this + 9))
  {
    uint64_t v18 = (***((uint64_t (****)(void, uint64_t))this + 1))(*((void *)this + 1), v11);
    if (*((void *)this + 8) && *((void *)this + 9)) {
      (***((void (****)(void, uint64_t))this + 1))(*((void *)this + 1), v11);
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  for (unint64_t j = 0; ; ++j)
  {
    int v20 = *(unsigned char *)(v9 + 12) ? CI::KernelArguments::count((CI::KernelArguments *)(v9 + 144)) : *(_DWORD *)(v9 + 20);
    if ((uint64_t)j >= v20) {
      break;
    }
    uint64_t v21 = *((void *)a3 + 6);
    if (*(unsigned char *)(v21 + 12))
    {
      int v22 = CI::KernelArguments::get_type((CI::KernelArguments *)(v21 + 144), j);
    }
    else
    {
      if ((uint64_t)j >= *(int *)(v21 + 20))
      {
        int v22 = 0;
LABEL_45:
        CI::KernelArguments::is_uniform(v22);
        uint64_t v27 = *((void *)a3 + 7);
        if (j > 9) {
          long long v28 = (CI::Object **)(*(void *)(v27 + 16) + 8 * (j - 10));
        }
        else {
          long long v28 = (CI::Object **)(v27 + 8 * j + 24);
        }
        long long v29 = *v28;
        CI::SerialObjectPtrArray::append((uint64_t)a4, *v28);
        unint64_t v30 = CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, v22, v29);
        if (v22 == 29)
        {
          if (v18) {
            (**(void (***)(uint64_t, uint64_t, void, unint64_t))v18)(v18, 5, 0, v30);
          }
        }
        else if (v18)
        {
          (**(void (***)(uint64_t, uint64_t, void, unint64_t))v18)(v18, 4, 0, v30);
        }
        continue;
      }
      int v22 = *(_DWORD *)(*(void *)(v21 + 72) + 4 * j);
    }
    if (v22 <= 29)
    {
      if (v22 != 1)
      {
        if (v22 == 2)
        {
          uint64_t v39 = *((void *)a3 + 7);
          if (j > 9) {
            unint64_t v40 = (double **)(*(void *)(v39 + 16) + 8 * (j - 10));
          }
          else {
            unint64_t v40 = (double **)(v39 + 8 * j + 24);
          }
          unint64_t v42 = *v40;
          double v68 = 0.0;
          double v69 = 0.0;
          double v67 = 1.0;
          double v70 = 1.0;
          double v71 = 0.0;
          double v72 = 0.0;
          size_t v43 = CI::ProgramNode::child_depth(a2, 0);
          if (v43 - 1 > a6)
          {
            unint64_t v44 = ~a6 + v43;
            do
            {
              if ((*(unsigned int (**)(double *))(*(void *)v42 + 16))(v42) == 28)
              {
                double v45 = v42[7];
                double v46 = v42[8];
                double v47 = v46 * v69 + v45 * v67;
                double v48 = v46 * v70 + v45 * v68;
                double v49 = v42[9];
                double v50 = v42[10];
                double v51 = v69 * v50 + v49 * v67;
                double v52 = v70 * v50 + v49 * v68;
                double v53 = v42[11];
                double v54 = v42[12];
                double v55 = v71 + v69 * v54 + v53 * v67;
                double v56 = v70 * v54 + v53 * v68 + v72;
                double v67 = v47;
                double v68 = v48;
                double v69 = v51;
                double v70 = v52;
                double v71 = v55;
                double v72 = v56;
              }
              else
              {
                int v57 = (*(uint64_t (**)(double *))(*(void *)v42 + 16))(v42);
                uint64_t v58 = *(void *)v42;
                if (v57 == 45)
                {
                  (*(void (**)(double *))(v58 + 408))(v42);
                }
                else if ((*(unsigned int (**)(double *))(v58 + 16))(v42) != 30)
                {
                  (*(void (**)(double *))(*(void *)v42 + 16))(v42);
                }
              }
              unint64_t v42 = (double *)(*(uint64_t (**)(double *, void))(*(void *)v42 + 48))(v42, 0);
              --v44;
            }
            while (v44);
          }
          uint64_t v59 = (*(uint64_t (**)(const CI::ProgramNode *, void))(*(void *)a2 + 48))(a2, 0);
          if ((*(unsigned int (**)(uint64_t))(*(void *)v59 + 16))(v59) == 52)
          {
            uint64_t v60 = *(unsigned int *)(v59 + 140);
            char v61 = *(unsigned char *)(v59 + 144);
            *(void *)long long v73 = *(void *)(v59 + 145);
            *(_DWORD *)&v73[7] = *(_DWORD *)(v59 + 152);
            if (v61)
            {
              if (CI_INTERMEDIATE_SRGB_TEXTURES()
                && (*(unsigned int (**)(void, uint64_t, uint64_t))(**((void **)this + 3) + 584))(*((void *)this + 3), v60, 1))
              {
                *(_DWORD *)(v59 + 140) = v60;
                *(unsigned char *)(v59 + 144) = v61 | 4;
                *(void *)(v59 + 145) = *(void *)v73;
                *(_DWORD *)(v59 + 152) = *(_DWORD *)&v73[7];
              }
              else
              {
                CFArrayRef v62 = CI::name_for_format(v60);
                x_log("Cannot use sRGB texture binding with format %s for sampler %d in kernel '%s'.\n", v62, j, *(const char **)(v9 + 24));
              }
            }
          }
          operator new();
        }
        if (v22 != 4) {
          goto LABEL_45;
        }
      }
    }
    else
    {
      switch(v22)
      {
        case 30:
          if (v18) {
            (**(void (***)(uint64_t, uint64_t, uint64_t, void))v18)(v18, 7, a5, 0);
          }
          continue;
        case 31:
        case 32:
          if (*((_DWORD *)this + 8) == 2)
          {
            if (*((void *)this + 8)
              && *((void *)this + 9)
              && (uint64_t v23 = (void (***)(void, uint64_t, uint64_t, unint64_t))(***((uint64_t (****)(void, uint64_t))this
                                                                                              + 1))(*((void *)this + 1), 6), (long long v24 = v23) != 0))
            {
              (**v23)(v23, 8, a5, 0);
              (**v24)(v24, 6, 0, 0);
              (**v24)(v24, 4, 0, 0);
              unint64_t v25 = CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
              (**v24)(v24, 4, 0, v25);
              char v26 = 0;
            }
            else
            {
              CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
              long long v24 = 0;
              char v26 = 1;
            }
            if (a4) {
              CI::SerialObjectPtrArray::append((uint64_t)a4, a4[3]);
            }
            if ((v26 & 1) == 0) {
              (**v24)(v24, 2, 0, 0);
            }
            if (*(unsigned char *)(v9 + 166))
            {
              uint64_t v41 = *((void *)this + 10);
              *((void *)this + 10) = v41 + 1;
              if (v26)
              {
LABEL_118:
                uint64_t v35 = (*(uint64_t (**)(void, void (***)(void, uint64_t, uint64_t, unint64_t), BOOL))(**((void **)this + 1) + 24))(*((void *)this + 1), v24, v22 == 32);
                if (v18) {
LABEL_63:
                }
                  (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 8))(v18, v35);
                continue;
              }
            }
            else
            {
              uint64_t v41 = 0;
              if (v26) {
                goto LABEL_118;
              }
            }
            (**v24)(v24, 2, v41, 0);
            goto LABEL_118;
          }
          if (v18)
          {
            (**(void (***)(uint64_t, uint64_t, uint64_t, void))v18)(v18, 8, a5, 0);
            (**(void (***)(uint64_t, uint64_t, void, void))v18)(v18, 6, 0, 0);
            (**(void (***)(uint64_t, uint64_t, void, void))v18)(v18, 4, 0, 0);
            unint64_t v38 = CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
            (**(void (***)(uint64_t, uint64_t, void, unint64_t))v18)(v18, 4, 0, v38);
          }
          else
          {
            CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
          }
          if (a4) {
            CI::SerialObjectPtrArray::append((uint64_t)a4, a4[3]);
          }
          if (v18) {
            (**(void (***)(uint64_t, uint64_t, void, void))v18)(v18, 2, 0, 0);
          }
          if (*(unsigned char *)(v9 + 166))
          {
            uint64_t v37 = *((void *)this + 10);
            *((void *)this + 10) = v37 + 1;
            if (v18) {
              goto LABEL_107;
            }
          }
          else
          {
            uint64_t v37 = 0;
            if (!v18) {
              continue;
            }
LABEL_107:
            (**(void (***)(uint64_t, uint64_t, uint64_t, void))v18)(v18, 2, v37, 0);
          }
          break;
        case 33:
        case 34:
          if (*((void *)this + 8)
            && *((void *)this + 9)
            && (uint64_t v31 = (void (***)(void, uint64_t, uint64_t, void))(***((uint64_t (****)(void, uint64_t))this
                                                                                  + 1))(*((void *)this + 1), 5), (uint64_t v32 = v31) != 0))
          {
            (**v31)(v31, 7, a5, 0);
            (**v32)(v32, 6, 0, 0);
            (**v32)(v32, 4, 0, 0);
            unint64_t v33 = CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
            (**v32)(v32, 4, 0, v33);
            char v34 = 0;
          }
          else
          {
            CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
            uint64_t v32 = 0;
            char v34 = 1;
          }
          if (a4) {
            CI::SerialObjectPtrArray::append((uint64_t)a4, a4[3]);
          }
          if ((v34 & 1) == 0) {
            (**v32)(v32, 2, 0, 0);
          }
          uint64_t v35 = (*(uint64_t (**)(void, void (***)(void, uint64_t, void, unint64_t), BOOL))(**((void **)this + 1) + 32))(*((void *)this + 1), v32, v22 == 34);
          if (v18) {
            goto LABEL_63;
          }
          continue;
        case 35:
          if (v18) {
            (**(void (***)(uint64_t, uint64_t, void, void))v18)(v18, 6, 0, 0);
          }
          continue;
        case 36:
          if (v18) {
            (**(void (***)(uint64_t, uint64_t, void, void))v18)(v18, 4, 0, 0);
          }
          continue;
        case 37:
          unint64_t v36 = CI::MetalDAGHelper::add_argument_type_and_offset((uint64_t)this, 37, 0);
          if (v18) {
            (**(void (***)(uint64_t, uint64_t, void, unint64_t))v18)(v18, 4, 0, v36);
          }
          if (a4) {
            CI::SerialObjectPtrArray::append((uint64_t)a4, a4[3]);
          }
          continue;
        case 38:
          if (v18) {
            (**(void (***)(uint64_t, uint64_t, void, void))v18)(v18, 2, 0, 0);
          }
          continue;
        case 39:
          if (*(unsigned char *)(v9 + 166))
          {
            uint64_t v37 = *((void *)this + 10);
            *((void *)this + 10) = v37 + 1;
            if (v18) {
              goto LABEL_107;
            }
            continue;
          }
          uint64_t v37 = 0;
          if (!v18) {
            continue;
          }
          goto LABEL_107;
        default:
          goto LABEL_45;
      }
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(**((void **)this + 1) + 40))(*((void *)this + 1), v18);
}

void sub_1938EFFE0(_Unwind_Exception *a1)
{
  MEMORY[0x1997023B0](v1, 0x10A1C40000A9EE4);
  _Unwind_Resume(a1);
}

uint64_t CI::MetalDAGHelper::add_function_info(uint64_t a1, CI::ProgramNode *a2, uint64_t a3, CI::SerialObjectPtrArray *a4, uint64_t a5, unint64_t a6, uint64_t a7, char *a8, unsigned __int8 a9, void *a10, char a11)
{
  uint64_t v127 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = *(void *)(a3 + 48);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 16))(v15) != 64) {
    (*(void (**)(uint64_t))(*(void *)v15 + 16))(v15);
  }
  vImagePixelCount v116 = a4;
  if (*(unsigned char *)(v15 + 12)) {
    int v17 = CI::KernelArguments::count((CI::KernelArguments *)(v15 + 144));
  }
  else {
    int v17 = *(_DWORD *)(v15 + 20);
  }
  uint64_t v18 = v17;
  if (*(_DWORD *)(a1 + 32) == 1)
  {
    for (uint64_t i = 0; ; ++i)
    {
      if (*(unsigned char *)(v15 + 12)) {
        int v20 = CI::KernelArguments::count((CI::KernelArguments *)(v15 + 144));
      }
      else {
        int v20 = *(_DWORD *)(v15 + 20);
      }
      if (i >= v20)
      {
        if (*(_DWORD *)(a1 + 32) == 1)
        {
          uint64_t v23 = v18 + (int)CI::Kernel::num_sampler_arguments((CI::Kernel *)v15);
          uint64_t v24 = v23 + (int)CI::Kernel::num_sampler_arguments((CI::Kernel *)v15);
          uint64_t v18 = v24 + (int)CI::Kernel::num_sampler_arguments((CI::Kernel *)v15);
        }
        break;
      }
      uint64_t v21 = *(void *)(a3 + 48);
      if (*(unsigned char *)(v21 + 12))
      {
        int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v21 + 144), i);
      }
      else
      {
        if (i >= *(int *)(v21 + 20)) {
          continue;
        }
        int type = *(_DWORD *)(*(void *)(v21 + 72) + 4 * i);
      }
      if (type == 31) {
        v18 += 5;
      }
    }
  }
  if (*(void *)(a1 + 64) && *(void *)(a1 + 72))
  {
    uint64_t v25 = (***(uint64_t (****)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 8), v18);
    if (*(void *)(a1 + 64) && *(void *)(a1 + 72)) {
      (***(void (****)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 8), v18);
    }
  }
  else
  {
    uint64_t v25 = 0;
  }
  unint64_t v26 = 0;
  *(void *)vImagePixelCount v115 = 0;
  vImagePixelCount v117 = (const CI::ProgramNode *)(a8 + 1);
  vImagePixelCount v114 = (uint64_t **)(a1 + 128);
  unint64_t v111 = a6 + 1;
  long long v112 = (void *)(a1 + 136);
  uint64_t v110 = a1 + 152;
  while (1)
  {
    int v27 = *(unsigned char *)(v15 + 12) ? CI::KernelArguments::count((CI::KernelArguments *)(v15 + 144)) : *(_DWORD *)(v15 + 20);
    if ((uint64_t)v26 >= v27) {
      break;
    }
    uint64_t v28 = *(void *)(a3 + 48);
    if (*(unsigned char *)(v28 + 12))
    {
      int v29 = CI::KernelArguments::get_type((CI::KernelArguments *)(v28 + 144), v26);
    }
    else
    {
      if ((uint64_t)v26 >= *(int *)(v28 + 20))
      {
        int v29 = 0;
LABEL_49:
        CI::KernelArguments::is_uniform(v29);
        uint64_t v36 = *(void *)(a3 + 56);
        if (v26 > 9) {
          uint64_t v37 = (CI::Object **)(*(void *)(v36 + 16) + 8 * (v26 - 10));
        }
        else {
          uint64_t v37 = (CI::Object **)(v36 + 8 * v26 + 24);
        }
        unint64_t v38 = *v37;
        CI::SerialObjectPtrArray::append((uint64_t)v116, *v37);
        uint64_t v16 = (const CI::Node *)CI::MetalDAGHelper::add_argument_type_and_offset(a1, v29, v38);
        if (v29 == 29)
        {
          if (v25) {
            (**(void (***)(uint64_t, uint64_t, void, const CI::Node *))v25)(v25, 5, 0, v16);
          }
        }
        else if (v25)
        {
          (**(void (***)(uint64_t, uint64_t, void, const CI::Node *))v25)(v25, 4, 0, v16);
        }
        goto LABEL_210;
      }
      int v29 = *(_DWORD *)(*(void *)(v28 + 72) + 4 * v26);
    }
    if (v29 <= 29)
    {
      switch(v29)
      {
        case 1:
          goto LABEL_46;
        case 2:
          uint64_t v47 = *(void *)(a3 + 56);
          if (v26 > 9) {
            double v48 = (double **)(*(void *)(v47 + 16) + 8 * (v26 - 10));
          }
          else {
            double v48 = (double **)(v47 + 8 * v26 + 24);
          }
          long long v64 = *v48;
          v120.__r_.__value_.__r.__words[2] = 0;
          *(_OWORD *)&v120.__r_.__value_.__l.__data_ = 0x3FF0000000000000uLL;
          double v121 = 1.0;
          double v122 = 0.0;
          double v123 = 0.0;
          size_t v65 = CI::ProgramNode::child_depth(a2, v115[0]);
          if (v65 - 1 > a6)
          {
            unint64_t v66 = ~a6 + v65;
            do
            {
              if ((*(unsigned int (**)(double *))(*(void *)v64 + 16))(v64) == 28)
              {
                double v67 = v64[7];
                double v68 = v64[8];
                double v69 = v68 * *(double *)&v120.__r_.__value_.__r.__words[2]
                    + v67 * *(double *)&v120.__r_.__value_.__l.__data_;
                *(double *)&std::string::size_type v70 = v68 * v121 + v67 * *(double *)&v120.__r_.__value_.__l.__size_;
                double v71 = v64[9];
                double v72 = v64[10];
                double v73 = *(double *)&v120.__r_.__value_.__r.__words[2] * v72
                    + v71 * *(double *)&v120.__r_.__value_.__l.__data_;
                double v74 = v121 * v72 + v71 * *(double *)&v120.__r_.__value_.__l.__size_;
                double v75 = v64[11];
                double v76 = v64[12];
                double v77 = v122
                    + *(double *)&v120.__r_.__value_.__r.__words[2] * v76
                    + v75 * *(double *)&v120.__r_.__value_.__l.__data_;
                double v78 = v121 * v76 + v75 * *(double *)&v120.__r_.__value_.__l.__size_ + v123;
                *(double *)&v120.__r_.__value_.__l.__data_ = v69;
                v120.__r_.__value_.__l.__size_ = v70;
                *(double *)&v120.__r_.__value_.__r.__words[2] = v73;
                double v121 = v74;
                double v122 = v77;
                double v123 = v78;
              }
              else
              {
                int v79 = (*(uint64_t (**)(double *))(*(void *)v64 + 16))(v64);
                uint64_t v80 = *(void *)v64;
                if (v79 == 45)
                {
                  (*(void (**)(double *))(v80 + 408))(v64);
                }
                else if ((*(unsigned int (**)(double *))(v80 + 16))(v64) != 30)
                {
                  (*(void (**)(double *))(*(void *)v64 + 16))(v64);
                }
              }
              long long v64 = (double *)(*(uint64_t (**)(double *, void))(*(void *)v64 + 48))(v64, 0);
              --v66;
            }
            while (v66);
          }
          uint64_t v81 = (*(uint64_t (**)(CI::ProgramNode *, int *))(*(void *)a2 + 48))(a2, *(int **)v115);
          if ((*(unsigned int (**)(uint64_t))(*(void *)v81 + 16))(v81) == 52)
          {
            uint64_t v82 = *(unsigned int *)(v81 + 140);
            char v83 = *(unsigned char *)(v81 + 144);
            *(void *)unint64_t v125 = *(void *)(v81 + 145);
            *(_DWORD *)&v125[7] = *(_DWORD *)(v81 + 152);
            if (v83)
            {
              if (CI_INTERMEDIATE_SRGB_TEXTURES()
                && (*(unsigned int (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 24) + 584))(*(void *)(a1 + 24), v82, 1))
              {
                *(_DWORD *)(v81 + 140) = v82;
                *(unsigned char *)(v81 + 144) = v83 | 4;
                *(void *)(v81 + 145) = *(void *)v125;
                *(_DWORD *)(v81 + 152) = *(_DWORD *)&v125[7];
              }
              else
              {
                unsigned int v106 = CI::name_for_format(v82);
                x_log("Cannot use sRGB texture binding with format %s for sampler %d in kernel '%s'.\n", v106, v26, *(const char **)(v15 + 24));
              }
            }
          }
          operator new();
        case 4:
LABEL_46:
          uint64_t v34 = *(void *)(a3 + 56);
          if (v26 > 9) {
            uint64_t v35 = (CI::Node **)(*(void *)(v34 + 16) + 8 * (v26 - 10));
          }
          else {
            uint64_t v35 = (CI::Node **)(v34 + 8 * v26 + 24);
          }
          double v49 = *v35;
          if (v29 == 4)
          {
            (*(void (**)(CI::Node *))(*(void *)v49 + 232))(v49);
            CI::Node::rois_count(v49);
            *(void *)unint64_t v125 = 0;
            *(void *)unint64_t v125 = CI::hash_image_node_id((uint64_t)v49, 0);
            v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
            double v50 = std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long const&>,std::tuple<>>((uint64_t **)(a1 + 176), (unint64_t *)v125, (uint64_t)&std::piecewise_construct, &v120);
            if (v25) {
              (**(void (***)(uint64_t, void, uint64_t *, void))v25)(v25, 0, v50[5], 0);
            }
            goto LABEL_207;
          }
          a8[v111] = LOBYTE(v115[0]) + 48;
          a8[a6 + 2] = 0;
          double v51 = CI::replaceWithLeaf((CI::SerialStringArray **)a2, v117, (const char *)v49, v16);
          unint64_t v52 = CI::hash_dag_node_id((unint64_t)v51, a7, a8);
          if ((*(unsigned int (**)(const char *))(*(void *)v51 + 232))(v51))
          {
            uint64_t v53 = (uint64_t)&a8[a6 + 3];
            do
            {
              double v54 = (const char *)(*(uint64_t (**)(const char *, void))(*(void *)v51 + 48))(v51, 0);
              *(_WORD *)(v53 - 1) = 48;
              double v51 = CI::replaceWithLeaf((CI::SerialStringArray **)a2, v117, v54, v55);
              unint64_t v52 = CI::hash_dag_node_id((unint64_t)v51, v52, a8);
              ++v53;
            }
            while (((*(uint64_t (**)(const char *))(*(void *)v51 + 232))(v51) & 1) != 0);
          }
          double v56 = (void *)*v112;
          if (!*v112) {
            goto LABEL_105;
          }
          int v57 = (void *)(a1 + 136);
          do
          {
            unint64_t v58 = v56[4];
            BOOL v59 = v58 >= v52;
            if (v58 >= v52) {
              uint64_t v60 = v56;
            }
            else {
              uint64_t v60 = v56 + 1;
            }
            if (v59) {
              int v57 = v56;
            }
            double v56 = (void *)*v60;
          }
          while (*v60);
          if (v57 == v112 || v52 < v57[4])
          {
LABEL_105:
            unint64_t v119 = v52;
            *(void *)unint64_t v125 = &v119;
            char v61 = std::__tree<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::MetalDAGHelper::TextureReadFunction>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v110, &v119, (uint64_t)&std::piecewise_construct, (void **)v125);
            CFArrayRef v62 = v61;
            if (*((char *)v61 + 63) < 0) {
              std::string::__init_copy_ctor_external(&v120, (const std::string::value_type *)v61[5], v61[6]);
            }
            else {
              std::string v120 = *(std::string *)(v61 + 5);
            }
            std::vector<unsigned long>::vector(&v121, (uint64_t)(v62 + 8));
            char v124 = *((unsigned char *)v62 + 88);
            if (a11)
            {
              if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t size = HIBYTE(v120.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t size = v120.__r_.__value_.__l.__size_;
              }
              std::string::basic_string[abi:nn180100]((uint64_t)v125, size + 2);
              if (v126 >= 0) {
                unint64_t v93 = v125;
              }
              else {
                unint64_t v93 = *(unsigned char **)v125;
              }
              if (size)
              {
                if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v94 = &v120;
                }
                else {
                  uint64_t v94 = (std::string *)v120.__r_.__value_.__r.__words[0];
                }
                memmove(v93, v94, size);
              }
              strcpy(&v93[size], "_h");
              if (v126 >= 0) {
                size_t v95 = v125;
              }
              else {
                size_t v95 = *(const char **)v125;
              }
              CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, v95, 0);
              if (v126 < 0) {
                operator delete(*(void **)v125);
              }
              std::string::size_type v96 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
              if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v96 = v120.__r_.__value_.__l.__size_;
              }
              if (v96 != 14) {
                goto LABEL_189;
              }
              uint64_t v97 = &v120;
              if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v97 = (std::string *)v120.__r_.__value_.__r.__words[0];
              }
              std::string::size_type v98 = v97->__r_.__value_.__r.__words[0];
              uint64_t v99 = *(std::string::size_type *)((char *)v97->__r_.__value_.__r.__words + 6);
              if (v98 == 0x646165725F69635FLL && v99 == 0x6C657869705F6461) {
                CI::MetalDAGHelper::add_read_pixel_function_info(a1, **(void **)&v121, *(void *)(*(void *)&v121 + 8), *(void *)(*(void *)&v121 + 16), *(void *)(*(void *)&v121 + 24));
              }
              else {
LABEL_189:
              }
                CI::MetalDAGHelper::add_read_pixel_420_function_info(a1, **(void **)&v121, *(void *)(*(void *)&v121 + 8), *(void *)(*(void *)&v121 + 16), *(void *)(*(void *)&v121 + 24), *(void *)(*(void *)&v121 + 32), *(void *)(*(void *)&v121 + 40), *(void *)(*(void *)&v121 + 48));
              uint64_t v101 = (*a10)++;
              unint64_t v119 = v52;
              *(void *)unint64_t v125 = &v119;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, &v119, (uint64_t)&std::piecewise_construct, (uint64_t **)v125)+ 24) = v101;
              if (v124)
              {
                CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_srgb_to_linear_h", 0);
                unint64_t v119 = v52;
                *(void *)unint64_t v125 = &v119;
                std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, &v119, (uint64_t)&std::piecewise_construct, (uint64_t **)v125);
                CI::MetalDAGHelper::add_colour_inout_function_info(a1);
                uint64_t v102 = (*a10)++;
                unint64_t v119 = v52;
                *(void *)unint64_t v125 = &v119;
                *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, &v119, (uint64_t)&std::piecewise_construct, (uint64_t **)v125)+ 24) = v102;
              }
              unint64_t v119 = v52;
              *(void *)unint64_t v125 = &v119;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, &v119, (uint64_t)&std::piecewise_construct, (uint64_t **)v125)+ 20) = 0;
            }
            else
            {
              if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                unsigned int v84 = &v120;
              }
              else {
                unsigned int v84 = (std::string *)v120.__r_.__value_.__r.__words[0];
              }
              CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, (const char *)v84, 0);
              std::string::size_type v85 = HIBYTE(v120.__r_.__value_.__r.__words[2]);
              if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v85 = v120.__r_.__value_.__l.__size_;
              }
              if (v85 != 14) {
                goto LABEL_160;
              }
              uint64_t v86 = &v120;
              if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                uint64_t v86 = (std::string *)v120.__r_.__value_.__r.__words[0];
              }
              std::string::size_type v87 = v86->__r_.__value_.__r.__words[0];
              uint64_t v88 = *(std::string::size_type *)((char *)v86->__r_.__value_.__r.__words + 6);
              if (v87 == 0x646165725F69635FLL && v88 == 0x6C657869705F6461) {
                CI::MetalDAGHelper::add_read_pixel_function_info(a1, **(void **)&v121, *(void *)(*(void *)&v121 + 8), *(void *)(*(void *)&v121 + 16), *(void *)(*(void *)&v121 + 24));
              }
              else {
LABEL_160:
              }
                CI::MetalDAGHelper::add_read_pixel_420_function_info(a1, **(void **)&v121, *(void *)(*(void *)&v121 + 8), *(void *)(*(void *)&v121 + 16), *(void *)(*(void *)&v121 + 24), *(void *)(*(void *)&v121 + 32), *(void *)(*(void *)&v121 + 40), *(void *)(*(void *)&v121 + 48));
              uint64_t v90 = (*a10)++;
              unint64_t v119 = v52;
              *(void *)unint64_t v125 = &v119;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, &v119, (uint64_t)&std::piecewise_construct, (uint64_t **)v125)+ 20) = v90;
              if (v124)
              {
                CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_srgb_to_linear", 0);
                unint64_t v119 = v52;
                *(void *)unint64_t v125 = &v119;
                std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, &v119, (uint64_t)&std::piecewise_construct, (uint64_t **)v125);
                CI::MetalDAGHelper::add_colour_inout_function_info(a1);
                uint64_t v91 = (*a10)++;
                unint64_t v119 = v52;
                *(void *)unint64_t v125 = &v119;
                *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, &v119, (uint64_t)&std::piecewise_construct, (uint64_t **)v125)+ 20) = v91;
              }
              unint64_t v119 = v52;
              *(void *)unint64_t v125 = &v119;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, &v119, (uint64_t)&std::piecewise_construct, (uint64_t **)v125)+ 24) = 0;
            }
            *(void *)unint64_t v125 = v52;
            std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::__erase_unique<unsigned long long>(v110, (unint64_t *)v125);
            if (v121 != 0.0)
            {
              double v122 = v121;
              operator delete(*(void **)&v121);
            }
            if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v120.__r_.__value_.__l.__data_);
            }
          }
          if (a11)
          {
            *(void *)unint64_t v125 = v52;
            v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
            if (!*((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, (unint64_t *)v125, (uint64_t)&std::piecewise_construct, (uint64_t **)&v120)+ a9+ 24))
            {
              CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_float_to_half", 0);
              *(void *)unint64_t v125 = v52;
              v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
              std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, (unint64_t *)v125, (uint64_t)&std::piecewise_construct, (uint64_t **)&v120);
              CI::MetalDAGHelper::add_colour_inout_function_info(a1);
              uint64_t v105 = (*a10)++;
              *(void *)unint64_t v125 = v52;
              v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, (unint64_t *)v125, (uint64_t)&std::piecewise_construct, (uint64_t **)&v120)+ a9+ 24) = v105;
              *(void *)unint64_t v125 = v52;
              v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, (unint64_t *)v125, (uint64_t)&std::piecewise_construct, (uint64_t **)&v120)+ a9+ 20) = 0;
            }
            *(void *)unint64_t v125 = v52;
            v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
            uint64_t v104 = *((unsigned __int16 *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, (unint64_t *)v125, (uint64_t)&std::piecewise_construct, (uint64_t **)&v120)+ a9+ 24);
            if (!v25) {
              goto LABEL_206;
            }
          }
          else
          {
            *(void *)unint64_t v125 = v52;
            v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
            if (!*((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, (unint64_t *)v125, (uint64_t)&std::piecewise_construct, (uint64_t **)&v120)+ a9+ 20))
            {
              CI::MetalDAGHelper::add_function_with_name((CI::MetalDAGHelper *)a1, "_ci_half_to_float", 0);
              *(void *)unint64_t v125 = v52;
              v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
              std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, (unint64_t *)v125, (uint64_t)&std::piecewise_construct, (uint64_t **)&v120);
              CI::MetalDAGHelper::add_colour_inout_function_info(a1);
              uint64_t v103 = (*a10)++;
              *(void *)unint64_t v125 = v52;
              v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, (unint64_t *)v125, (uint64_t)&std::piecewise_construct, (uint64_t **)&v120)+ a9+ 20) = v103;
              *(void *)unint64_t v125 = v52;
              v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
              *((_WORD *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, (unint64_t *)v125, (uint64_t)&std::piecewise_construct, (uint64_t **)&v120)+ a9+ 24) = 0;
            }
            *(void *)unint64_t v125 = v52;
            v120.__r_.__value_.__r.__words[0] = (std::string::size_type)v125;
            uint64_t v104 = *((unsigned __int16 *)std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v114, (unint64_t *)v125, (uint64_t)&std::piecewise_construct, (uint64_t **)&v120)+ a9+ 20);
            if (!v25) {
              goto LABEL_206;
            }
          }
          (**(void (***)(uint64_t, uint64_t, uint64_t, void))v25)(v25, 7, v104, 0);
LABEL_206:
          a8[v111] = 0;
LABEL_207:
          *(void *)vImagePixelCount v115 = (v115[0] + 1);
          goto LABEL_210;
      }
      goto LABEL_49;
    }
    switch(v29)
    {
      case 30:
        if (v25) {
          (**(void (***)(uint64_t, uint64_t, uint64_t, void))v25)(v25, 7, a5, 0);
        }
        break;
      case 31:
      case 32:
        if (*(_DWORD *)(a1 + 32) == 2)
        {
          if (*(void *)(a1 + 64)
            && *(void *)(a1 + 72)
            && (unint64_t v30 = (void (***)(void, uint64_t, uint64_t, unint64_t))(***(uint64_t (****)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 8), 6), (v31 = v30) != 0))
          {
            (**v30)(v30, 8, a5, 0);
            (**v31)(v31, 6, 0, 0);
            (**v31)(v31, 4, 0, 0);
            unint64_t v32 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
            (**v31)(v31, 4, 0, v32);
            char v33 = 0;
          }
          else
          {
            CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
            uint64_t v31 = 0;
            char v33 = 1;
          }
          if (v116) {
            CI::SerialObjectPtrArray::append((uint64_t)v116, *((CI::Object **)v116 + 3));
          }
          if ((v33 & 1) == 0) {
            (**v31)(v31, 2, 0, 0);
          }
          if (*(unsigned char *)(v15 + 166))
          {
            uint64_t v63 = *(void *)(a1 + 80);
            *(void *)(a1 + 80) = v63 + 1;
            if (v33)
            {
LABEL_142:
              uint64_t v43 = (*(uint64_t (**)(void, void (***)(void, uint64_t, uint64_t, unint64_t), BOOL))(**(void **)(a1 + 8) + 24))(*(void *)(a1 + 8), v31, v29 == 32);
              if (v25) {
LABEL_67:
              }
                (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 8))(v25, v43);
              break;
            }
          }
          else
          {
            uint64_t v63 = 0;
            if (v33) {
              goto LABEL_142;
            }
          }
          (**v31)(v31, 2, v63, 0);
          goto LABEL_142;
        }
        if (v25)
        {
          (**(void (***)(uint64_t, uint64_t, uint64_t, void))v25)(v25, 8, a5, 0);
          (**(void (***)(uint64_t, uint64_t, void, void))v25)(v25, 6, 0, 0);
          (**(void (***)(uint64_t, uint64_t, void, void))v25)(v25, 4, 0, 0);
          unint64_t v46 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
          (**(void (***)(uint64_t, uint64_t, void, unint64_t))v25)(v25, 4, 0, v46);
        }
        else
        {
          CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
        }
        if (v116) {
          CI::SerialObjectPtrArray::append((uint64_t)v116, *((CI::Object **)v116 + 3));
        }
        if (v25) {
          (**(void (***)(uint64_t, uint64_t, void, void))v25)(v25, 2, 0, 0);
        }
        if (*(unsigned char *)(v15 + 166))
        {
          uint64_t v45 = *(void *)(a1 + 80);
          *(void *)(a1 + 80) = v45 + 1;
          if (v25) {
            goto LABEL_131;
          }
        }
        else
        {
          uint64_t v45 = 0;
          if (!v25) {
            break;
          }
LABEL_131:
          (**(void (***)(uint64_t, uint64_t, uint64_t, void))v25)(v25, 2, v45, 0);
        }
        break;
      case 33:
      case 34:
        if (*(void *)(a1 + 64)
          && *(void *)(a1 + 72)
          && (v39 = (void (***)(void, uint64_t, uint64_t, unint64_t))(***(uint64_t (****)(void, uint64_t))(a1 + 8))(*(void *)(a1 + 8), 5), (unint64_t v40 = v39) != 0))
        {
          (**v39)(v39, 7, a5, 0);
          (**v40)(v40, 6, 0, 0);
          (**v40)(v40, 4, 0, 0);
          unint64_t v41 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
          (**v40)(v40, 4, 0, v41);
          char v42 = 0;
        }
        else
        {
          CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
          unint64_t v40 = 0;
          char v42 = 1;
        }
        if (v116) {
          CI::SerialObjectPtrArray::append((uint64_t)v116, *((CI::Object **)v116 + 3));
        }
        if ((v42 & 1) == 0) {
          (**v40)(v40, 2, 0, 0);
        }
        uint64_t v43 = (*(uint64_t (**)(void, void (***)(void, uint64_t, void, unint64_t), BOOL))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), v40, v29 == 34);
        if (v25) {
          goto LABEL_67;
        }
        break;
      case 35:
        if (v25) {
          (**(void (***)(uint64_t, uint64_t, void, void))v25)(v25, 6, 0, 0);
        }
        break;
      case 36:
        if (v25) {
          (**(void (***)(uint64_t, uint64_t, void, void))v25)(v25, 4, 0, 0);
        }
        break;
      case 37:
        unint64_t v44 = CI::MetalDAGHelper::add_argument_type_and_offset(a1, 37, 0);
        if (v25) {
          (**(void (***)(uint64_t, uint64_t, void, unint64_t))v25)(v25, 4, 0, v44);
        }
        if (v116) {
          CI::SerialObjectPtrArray::append((uint64_t)v116, *((CI::Object **)v116 + 3));
        }
        break;
      case 38:
        if (v25) {
          (**(void (***)(uint64_t, uint64_t, void, void))v25)(v25, 2, 0, 0);
        }
        break;
      case 39:
        if (*(unsigned char *)(v15 + 166))
        {
          uint64_t v45 = *(void *)(a1 + 80);
          *(void *)(a1 + 80) = v45 + 1;
          if (v25) {
            goto LABEL_131;
          }
          break;
        }
        uint64_t v45 = 0;
        if (!v25) {
          break;
        }
        goto LABEL_131;
      default:
        goto LABEL_49;
    }
LABEL_210:
    ++v26;
  }
  CI::MetalDAGHelper::add_function_for_kernel((CI::MetalDAGHelper *)a1, (const CI::Kernel *)v15);
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 8) + 40))(*(void *)(a1 + 8), v25);
}

void sub_1938F1C18(_Unwind_Exception *a1)
{
  CI::DAGHelper::TextureReadFunction::~TextureReadFunction((CI::DAGHelper::TextureReadFunction *)(v1 - 208));
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__25(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

__n128 ___ZN2CI14MetalDAGHelper9build_dagEPKNS_4NodeEPKNS_11ProgramNodeEPNS_20SerialObjectPtrArrayEm_block_invoke_44(uint64_t a1, const CI::GeneralKernelNode *a2, uint64_t a3, int a4, uint64_t a5, unint64_t a6, uint64_t a7, char *a8, int a9)
{
  if (a9 == -1)
  {
    uint64_t v15 = *(uint64_t ***)(a1 + 48);
    if ((*(unsigned int (**)(const CI::GeneralKernelNode *))(*(void *)a2 + 16))(a2) == 51
      && ((*(uint64_t (**)(const CI::GeneralKernelNode *))(*(void *)a2 + 296))(a2) & 1) == 0)
    {
      unint64_t v17 = CI::hash_dag_node_id((unint64_t)a2, a7, a8);
      uint64_t v18 = (const CI::Kernel *)*((void *)a2 + 6);
      if (a6)
      {
        unint64_t v27 = CI::hash_dag_node_id(a6, a7, 0);
        uint64_t v28 = &v27;
        uint64_t v19 = std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v15 + 13, &v27, (uint64_t)&std::piecewise_construct, (uint64_t **)&v28)+ 5;
      }
      else
      {
        uint64_t v19 = (uint64_t *)(a1 + 56);
      }
      uint64_t v20 = *v19;
      unsigned int v21 = CI::MetalDAGHelper::add_function_for_kernel((CI::MetalDAGHelper *)v15, v18);
      CI::MetalDAGHelper::add_function_info((CI::MetalDAGHelper *)v15, *(const CI::ProgramNode **)(a1 + 64), a2, *(CI::Object ***)(a1 + 72), v20, a4);
      uint64_t v22 = CI::MetalDAGHelper::color_output_for_kernel((CI::MetalDAGHelper *)v15, v18, v21, (unint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      uint64_t v24 = v23;
      uint64_t v25 = v15 + 16;
      unint64_t v27 = v17;
      uint64_t v28 = &v27;
      unint64_t v26 = std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v25, &v27, (uint64_t)&std::piecewise_construct, (uint64_t **)&v28);
      v26[5] = v22;
      v26[6] = v24;
      unint64_t v27 = v17;
      uint64_t v28 = &v27;
      __n128 result = *(__n128 *)(std::__tree<std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v25, &v27, (uint64_t)&std::piecewise_construct, (uint64_t **)&v28)+ 5);
      *(__n128 *)(*(void *)(*(void *)(a1 + 40) + 8) + 48) = result;
    }
  }
  return result;
}

uint64_t ___ZN2CI14MetalDAGHelper15build_constantsEPKNS_11ProgramNodeE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 8) + 88))();
}

__n128 __Block_byref_object_copy__59(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

uint64_t CI::delete_precompiled_kernels(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

id *CI::release_ci_dylib(id *this, CI::CoreImageDylib *a2)
{
  if (this)
  {
    CI::CoreImageDylib::~CoreImageDylib(this);
    JUMPOUT(0x1997023B0);
  }
  return this;
}

void CI::add_to_kernel_archive(NSObject **a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    uint64_t v3 = *a1;
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = ___ZN2CI13KernelArchive10addArchiveENSt3__14pairIPKvS4_EE_block_invoke;
    block[3] = &__block_descriptor_56_e5_v8__0l;
    block[4] = a1;
    void block[5] = a2;
    void block[6] = a3;
    dispatch_barrier_sync(v3, block);
  }
}

dispatch_object_t *CI::release_kernel_archive(dispatch_object_t *this, CI::KernelArchive *a2)
{
  if (this)
  {
    CI::KernelArchive::~KernelArchive(this);
    JUMPOUT(0x1997023B0);
  }
  return this;
}

NSObject **CI::find_in_archive(NSObject **result, uint64_t a2, const char *a3)
{
  if (result) {
    return (NSObject **)CI::KernelArchive::find(result, a2, a3);
  }
  return result;
}

void CI::LegacyDAGDescriptor::create_argument_info(CI::LegacyDAGDescriptor *this)
{
}

void sub_1938F2184(_Unwind_Exception *a1)
{
  MEMORY[0x1997023B0](v1, 0x10A1C405897D53FLL);
  _Unwind_Resume(a1);
}

uint64_t CI::ConcatenatedDAGDescriptor::create_sampler_builder_function_info()
{
  return 0;
}

uint64_t CI::ConcatenatedDAGDescriptor::create_priv_dest_coord_builder_function_info()
{
  return 0;
}

uint64_t CI::ConcatenatedDAGDescriptor::create_group_dest_coord_builder_function_info()
{
  return 0;
}

void CI::LegacyDAGDescriptor::create_function_info(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    unint64_t v6 = a1[7];
    unint64_t v7 = a1[6];
    if (v7 >= v6)
    {
      uint64_t v9 = a1[5];
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13) {
        long long v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 7), v13);
      }
      else {
        long long v14 = 0;
      }
      uint64_t v15 = &v14[24 * v10];
      uint64_t v16 = &v14[24 * v13];
      *uint64_t v15 = 0;
      *((void *)v15 + 1) = v4;
      *((void *)v15 + 2) = v5;
      uint64_t v8 = v15 + 24;
      uint64_t v18 = (char *)a1[5];
      unint64_t v17 = (char *)a1[6];
      if (v17 != v18)
      {
        do
        {
          long long v19 = *(_OWORD *)(v17 - 24);
          *((void *)v15 - 1) = *((void *)v17 - 1);
          *(_OWORD *)(v15 - 24) = v19;
          v15 -= 24;
          v17 -= 24;
        }
        while (v17 != v18);
        unint64_t v17 = (char *)a1[5];
      }
      a1[5] = v15;
      a1[6] = v8;
      a1[7] = v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(unsigned char *)unint64_t v7 = 0;
      uint64_t v8 = (char *)(v7 + 24);
      *(void *)(v7 + 8) = v4;
      *(void *)(v7 + 16) = v5;
    }
    a1[6] = v8;
  }
}

void CI::LegacyDAGDescriptor::create_early_out_function_info(void *a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2);
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
    unint64_t v6 = a1[7];
    unint64_t v7 = a1[6];
    if (v7 >= v6)
    {
      uint64_t v9 = a1[5];
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - v9) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v9) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13) {
        long long v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 7), v13);
      }
      else {
        long long v14 = 0;
      }
      uint64_t v15 = &v14[24 * v10];
      uint64_t v16 = &v14[24 * v13];
      *uint64_t v15 = 1;
      *((void *)v15 + 1) = v4;
      *((void *)v15 + 2) = v5;
      uint64_t v8 = v15 + 24;
      uint64_t v18 = (char *)a1[5];
      unint64_t v17 = (char *)a1[6];
      if (v17 != v18)
      {
        do
        {
          long long v19 = *(_OWORD *)(v17 - 24);
          *((void *)v15 - 1) = *((void *)v17 - 1);
          *(_OWORD *)(v15 - 24) = v19;
          v15 -= 24;
          v17 -= 24;
        }
        while (v17 != v18);
        unint64_t v17 = (char *)a1[5];
      }
      a1[5] = v15;
      a1[6] = v8;
      a1[7] = v16;
      if (v17) {
        operator delete(v17);
      }
    }
    else
    {
      *(unsigned char *)unint64_t v7 = 1;
      *(void *)(v7 + 8) = v4;
      *(void *)(v7 + 16) = v5;
      uint64_t v8 = (char *)(v7 + 24);
    }
    a1[6] = v8;
  }
}

const char *CI::LegacyDAGDescriptor::get_type_name(CI::LegacyDAGDescriptor *this)
{
  if (*((unsigned char *)this + 24)) {
    return "metallibV1-from_archive";
  }
  else {
    return "metallibV1";
  }
}

uint64_t CI::ConcatenatedDAGDescriptor::set_function_constants(id *this, const void *a2, MTLDataType a3, NSString *a4)
{
  return [this[2] setConstantValue:a2 type:a3 withName:a4];
}

uint64_t CI::LegacyDAGDescriptor::add_function(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 88) addObject:a2];
}

uint64_t CI::ConcatenatedDAGDescriptor::add_function_from_kernel(unsigned char *a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  (*(void (**)(unsigned char *))(*(void *)a1 + 96))(a1);
  uint64_t result = [a2 importedLibraries];
  if (result)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    uint64_t v5 = objc_msgSend(a2, "importedLibraries", 0);
    uint64_t result = [v5 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (result)
    {
      uint64_t v6 = result;
      uint64_t v7 = *(void *)v10;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v5);
          }
          if ([*(id *)(*((void *)&v9 + 1) + 8 * v8) containsString:@"CoreImage.metallib"])a1[25] = 1; {
          ++v8;
          }
        }
        while (v6 != v8);
        uint64_t result = [v5 countByEnumeratingWithState:&v9 objects:v13 count:16];
        uint64_t v6 = result;
      }
      while (result);
    }
  }
  return result;
}

void CI::LegacyDAGDescriptor::~LegacyDAGDescriptor(id *this)
{
  CI::LegacyDAGDescriptor::~LegacyDAGDescriptor(this);

  JUMPOUT(0x1997023B0);
}

{
  void *v2;
  void *v3;
  id v4;

  *this = &unk_1EE45D138;

  uint64_t v2 = this[8];
  uint64_t v3 = this[9];
  if (v2 != v3)
  {
    do
    {
      if (*v2) {
        (*(void (**)(void))(*(void *)*v2 + 48))(*v2);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = this[8];
  }
  if (v2)
  {
    this[9] = v2;
    operator delete(v2);
  }
  uint64_t v4 = this[5];
  if (v4)
  {
    this[6] = v4;
    operator delete(v4);
  }
  *this = &unk_1EE45D6A8;
}

unint64_t CI::LegacyDAGDescriptor::ArgumentInfo::size(CI::LegacyDAGDescriptor::ArgumentInfo *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3);
}

uint64_t CI::LegacyDAGDescriptor::ArgumentInfo::data(CI::LegacyDAGDescriptor::ArgumentInfo *this)
{
  return *((void *)this + 2);
}

BOOL CI::LegacyDAGDescriptor::ArgumentInfo::validate(CI::LegacyDAGDescriptor::ArgumentInfo *this)
{
  return 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 3) - *((void *)this + 2)) >> 3) == *((void *)this + 1);
}

void CI::LegacyDAGDescriptor::ArgumentInfo::~ArgumentInfo(CI::LegacyDAGDescriptor::ArgumentInfo *this)
{
  *(void *)this = &unk_1EE45D0F0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }
}

{
  void *v2;
  uint64_t vars8;

  *(void *)this = &unk_1EE45D0F0;
  uint64_t v2 = (void *)*((void *)this + 2);
  if (v2)
  {
    *((void *)this + 3) = v2;
    operator delete(v2);
  }

  JUMPOUT(0x1997023B0);
}

void *CI::StitchableFunctionDAGDescriptor::create_sampler_builder_function_info(uint64_t a1, void *a2)
{
  uint64_t v2 = a2;
  v8[1] = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if ((objc_msgSend(*(id *)(a1 + 120), "containsObject:", objc_msgSend(*(id *)(a1 + 144), "name")) & 1) == 0)
    {
      [*(id *)(a1 + 128) addObject:*(void *)(a1 + 144)];
      objc_msgSend(*(id *)(a1 + 120), "addObject:", objc_msgSend(*(id *)(a1 + 144), "name"));
    }
    uint64_t v4 = (*(uint64_t (**)(void *))(*(void *)v2 + 24))(v2);
    id v5 = objc_alloc(MEMORY[0x1E4F35260]);
    uint64_t v6 = [*(id *)(a1 + 144) name];
    v8[0] = *(void *)(a1 + 40);
    uint64_t v2 = objc_msgSend(v5, "initWithName:arguments:controlDependencies:", v6, v4, objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v8, 1));
    [*(id *)(a1 + 72) addObject:v2];
    ++*(_DWORD *)(a1 + 80);
  }
  return v2;
}

void *CI::StitchableFunctionDAGDescriptor::create_group_dest_coord_builder_function_info(uint64_t a1, uint64_t a2, int a3)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  uint64_t v5 = 168;
  if (a3) {
    uint64_t v5 = 176;
  }
  uint64_t v6 = *(void **)(a1 + v5);
  if ((objc_msgSend(*(id *)(a1 + 120), "containsObject:", objc_msgSend(v6, "name")) & 1) == 0)
  {
    [*(id *)(a1 + 128) addObject:v6];
    objc_msgSend(*(id *)(a1 + 120), "addObject:", objc_msgSend(v6, "name"));
  }
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 24))(a2);
  id v8 = objc_alloc(MEMORY[0x1E4F35260]);
  uint64_t v9 = [v6 name];
  v12[0] = *(void *)(a1 + 40);
  long long v10 = objc_msgSend(v8, "initWithName:arguments:controlDependencies:", v9, v7, objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:count:", v12, 1));
  [*(id *)(a1 + 72) addObject:v10];
  ++*(_DWORD *)(a1 + 80);

  return v10;
}

const char *CI::StitchableFunctionDAGDescriptor::get_type_name(CI::StitchableFunctionDAGDescriptor *this)
{
  if (*((unsigned char *)this + 24)) {
    return "metallibV2-from_archive";
  }
  else {
    return "metallibV2";
  }
}

uint64_t CI::StitchableFunctionDAGDescriptor::compile(uint64_t a1, uint64_t a2, char *a3, CI::CoreImageDylib *a4, void *a5, uint64_t a6, unsigned int a7)
{
  dag_descriptor = CI::StitchableFunctionDAGDescriptor::create_dag_descriptor((CI::StitchableFunctionDAGDescriptor *)a1, a3);
  if (*(unsigned char *)(a1 + 25)) {
    uint64_t v15 = CI::CoreImageDylib::get(a4);
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(NSObject ***)(a1 + 32);
  if (!v16)
  {
    uint64_t v20 = 0;
    *(unsigned char *)(a1 + 24) = 0;
LABEL_11:
    uint64_t ComputePipelineState = CIMetalRenderPipelineStateCreateFromDagDescriptor(a2, (uint64_t)a3, a5, dag_descriptor, v20, v15, a6, a7);
    goto LABEL_12;
  }
  unint64_t v17 = (void *)CI::KernelArchive::find(v16, a6, a3);
  *(unsigned char *)(a1 + 24) = v17 != 0;
  if (!v17)
  {
    uint64_t v21 = *(void *)(a1 + 32);
    if (v21) {
      uint64_t v20 = *(void *)(v21 + 80);
    }
    else {
      uint64_t v20 = 0;
    }
    goto LABEL_11;
  }
  uint64_t ComputePipelineState = CreateComputePipelineState(a5, v17, v18, v15);
LABEL_12:
  uint64_t v22 = ComputePipelineState;

  return v22;
}

uint64_t CI::StitchableFunctionDAGDescriptor::ArgumentInfo::add(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 16) addObject:a2];
}

uint64_t CI::StitchableFunctionDAGDescriptor::ArgumentInfo::size(id *this)
{
  return [this[2] count];
}

BOOL CI::StitchableFunctionDAGDescriptor::ArgumentInfo::validate(id *this)
{
  return [this[2] count] == (void)this[1];
}

void CI::StitchableFunctionDAGDescriptor::ArgumentInfo::~ArgumentInfo(id *this)
{
  *this = &unk_1EE45D7B8;
}

{
  uint64_t vars8;

  *this = &unk_1EE45D7B8;

  JUMPOUT(0x1997023B0);
}

uint64_t CI::MetalDAG::get_type_name(CI::MetalDAG *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 23) + 64))();
}

uint64_t non-virtual thunk to'CI::MetalDAG::type(CI::MetalDAG *this)
{
  return 68;
}

{
  return 68;
}

unint64_t CI::mtl_func_hash(void *a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = (_OWORD *)[a1 bitCodeHash];
  long long v2 = v1[1];
  __src[0] = *v1;
  __src[1] = v2;
  XXH64_reset(v4, 0);
  XXH64_update((uint64_t)v4, (char *)__src, 0x20uLL);
  return XXH64_digest((uint64_t)v4);
}

uint64_t std::string::basic_string[abi:nn180100](uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  if (a2 > 0x16)
  {
    uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17) {
      uint64_t v4 = a2 | 7;
    }
    uint64_t v5 = v4 + 1;
    uint64_t v6 = operator new(v4 + 1);
    *(void *)(a1 + 8) = a2;
    *(void *)(a1 + 16) = v5 | 0x8000000000000000;
    *(void *)a1 = v6;
  }
  else
  {
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
    *(unsigned char *)(a1 + 23) = a2;
  }
  return a1;
}

void *std::allocate_shared[abi:nn180100]<CI::LegacyDAGDescriptor,std::allocator<CI::LegacyDAGDescriptor>,BOOL &,BOOL &,void>@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<CI::LegacyDAGDescriptor>::__shared_ptr_emplace[abi:nn180100]<BOOL &,BOOL &,std::allocator<CI::LegacyDAGDescriptor>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1938F2E34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<CI::LegacyDAGDescriptor>::__shared_ptr_emplace[abi:nn180100]<BOOL &,BOOL &,std::allocator<CI::LegacyDAGDescriptor>,0>(void *a1, char *a2, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_1EE45FA68;
  CI::LegacyDAGDescriptor::LegacyDAGDescriptor((CI::LegacyDAGDescriptor *)(a1 + 3), *a2, *a3);
  return a1;
}

void sub_1938F2E98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CI::LegacyDAGDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE45FA68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CI::LegacyDAGDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE45FA68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1997023B0);
}

uint64_t std::__shared_ptr_emplace<CI::LegacyDAGDescriptor>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 112))();
}

CI::LegacyDAGDescriptor *CI::LegacyDAGDescriptor::LegacyDAGDescriptor(CI::LegacyDAGDescriptor *this, char a2, char a3)
{
  *(void *)this = &unk_1EE45D6A8;
  *((unsigned char *)this + 8) = a2;
  *((unsigned char *)this + 9) = a3;
  *((_WORD *)this + 12) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = objc_opt_new();
  *(void *)this = &unk_1EE45D138;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((void *)this + 11) = objc_opt_new();
  return this;
}

void sub_1938F2FF4(_Unwind_Exception *a1)
{
  uint64_t v5 = *(void **)(v1 + 64);
  if (v5)
  {
    *(void *)(v1 + 72) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 48) = v6;
    operator delete(v6);
  }
  *(void *)uint64_t v1 = v2;

  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<CI::StitchableFunctionDAGDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE45FAA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<CI::StitchableFunctionDAGDescriptor>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1EE45FAA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x1997023B0);
}

void CI::PrecompiledKernels::~PrecompiledKernels(CI::PrecompiledKernels *this)
{
  *(void *)this = &unk_1EE45CED0;
  uint64_t v2 = (NSObject **)((char *)this + 56);
  dispatch_sync(*((dispatch_queue_t *)this + 7), &__block_literal_global_219);
  uint64_t v3 = 0;
  char v4 = 1;
  do
  {
    char v5 = v4;
    uint64_t v6 = (id *)((char *)this + 8 * v3);

    char v4 = 0;
    uint64_t v3 = 1;
  }
  while ((v5 & 1) != 0);

  Queue::~Queue(v2);
}

{
  uint64_t vars8;

  CI::PrecompiledKernels::~PrecompiledKernels(this);

  JUMPOUT(0x1997023B0);
}

void sub_1938F3138(_Unwind_Exception *a1)
{
  Queue::~Queue(v1);
  _Unwind_Resume(a1);
}

void CI::DAGPrecompiledKernels::~DAGPrecompiledKernels(CI::DAGPrecompiledKernels *this)
{
  CI::PrecompiledKernels::~PrecompiledKernels(this);

  JUMPOUT(0x1997023B0);
}

void CI::StitchableKernels::~StitchableKernels(CI::StitchableKernels *this)
{
  CI::PrecompiledKernels::~PrecompiledKernels(this);

  JUMPOUT(0x1997023B0);
}

void CI::CoreImageDylib::~CoreImageDylib(id *this)
{
  if (*this) {

  }
  id v2 = this[3];
  if (v2) {
}
  }

void ___ZN2CI13KernelArchive10addArchiveENSt3__14pairIPKvS4_EE_block_invoke(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v1)
  {
    uint64_t v4 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "functionNames"), "count");
    id v5 = (id)[MEMORY[0x1E4F1CA80] setWithCapacity:v4];
    objc_msgSend(v5, "addObjectsFromArray:", objc_msgSend(v1, "functionNames"));
    if (CI_LOG_AIR_ARCHIVE_ACTIVITY())
    {
      uint64_t v6 = ci_logger_render();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v50 = 138543362;
        uint64_t v51 = [v5 allObjects];
        _os_log_impl(&dword_193671000, v6, OS_LOG_TYPE_INFO, "An archive loaded with these functions %{public}@", (uint8_t *)&v50, 0xCu);
      }
    }
    unint64_t v7 = v2[9];
    id v8 = (void *)v2[8];
    if ((unint64_t)v8 >= v7)
    {
      uint64_t v11 = v2[7];
      uint64_t v12 = ((uint64_t)v8 - v11) >> 3;
      if ((unint64_t)(v12 + 1) >> 61) {
        abort();
      }
      uint64_t v13 = v7 - v11;
      uint64_t v14 = v13 >> 2;
      if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
        uint64_t v14 = v12 + 1;
      }
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v15 = v14;
      }
      if (v15) {
        uint64_t v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)(v2 + 9), v15);
      }
      else {
        uint64_t v16 = 0;
      }
      unint64_t v17 = &v16[8 * v12];
      uint64_t v18 = &v16[8 * v15];
      *(void *)unint64_t v17 = v5;
      uint64_t v9 = v17 + 8;
      uint64_t v20 = (char *)v2[7];
      long long v19 = (char *)v2[8];
      if (v19 != v20)
      {
        do
        {
          uint64_t v21 = *((void *)v19 - 1);
          v19 -= 8;
          *((void *)v17 - 1) = v21;
          v17 -= 8;
        }
        while (v19 != v20);
        long long v19 = (char *)v2[7];
      }
      v2[7] = v17;
      v2[8] = v9;
      v2[9] = v18;
      if (v19) {
        operator delete(v19);
      }
    }
    else
    {
      void *v8 = v5;
      uint64_t v9 = v8 + 1;
    }
    unint64_t v22 = v2[3];
    v2[8] = v9;
    uint64_t v23 = (void *)v2[2];
    if ((unint64_t)v23 >= v22)
    {
      uint64_t v25 = v2[1];
      uint64_t v26 = ((uint64_t)v23 - v25) >> 3;
      if ((unint64_t)(v26 + 1) >> 61) {
        abort();
      }
      uint64_t v27 = v22 - v25;
      uint64_t v28 = v27 >> 2;
      if (v27 >> 2 <= (unint64_t)(v26 + 1)) {
        uint64_t v28 = v26 + 1;
      }
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v29 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v29 = v28;
      }
      if (v29) {
        unint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)(v2 + 3), v29);
      }
      else {
        unint64_t v30 = 0;
      }
      uint64_t v31 = &v30[8 * v26];
      unint64_t v32 = &v30[8 * v29];
      *(void *)uint64_t v31 = v1;
      uint64_t v24 = v31 + 8;
      uint64_t v34 = (char *)v2[1];
      char v33 = (char *)v2[2];
      if (v33 != v34)
      {
        do
        {
          uint64_t v35 = *((void *)v33 - 1);
          v33 -= 8;
          *((void *)v31 - 1) = v35;
          v31 -= 8;
        }
        while (v33 != v34);
        char v33 = (char *)v2[1];
      }
      v2[1] = v31;
      v2[2] = v24;
      v2[3] = v32;
      if (v33) {
        operator delete(v33);
      }
    }
    else
    {
      *uint64_t v23 = v1;
      uint64_t v24 = v23 + 1;
    }
    unint64_t v36 = v2[6];
    v2[2] = v24;
    uint64_t v37 = (uint64_t *)v2[5];
    if ((unint64_t)v37 >= v36)
    {
      uint64_t v39 = v2[4];
      uint64_t v40 = ((uint64_t)v37 - v39) >> 3;
      if ((unint64_t)(v40 + 1) >> 61) {
        abort();
      }
      uint64_t v41 = v36 - v39;
      uint64_t v42 = v41 >> 2;
      if (v41 >> 2 <= (unint64_t)(v40 + 1)) {
        uint64_t v42 = v40 + 1;
      }
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v42;
      }
      if (v43) {
        unint64_t v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)(v2 + 6), v43);
      }
      else {
        unint64_t v44 = 0;
      }
      uint64_t v45 = &v44[8 * v40];
      unint64_t v46 = &v44[8 * v43];
      *(void *)uint64_t v45 = v3;
      unint64_t v38 = v45 + 8;
      double v48 = (char *)v2[4];
      uint64_t v47 = (char *)v2[5];
      if (v47 != v48)
      {
        do
        {
          uint64_t v49 = *((void *)v47 - 1);
          v47 -= 8;
          *((void *)v45 - 1) = v49;
          v45 -= 8;
        }
        while (v47 != v48);
        uint64_t v47 = (char *)v2[4];
      }
      v2[4] = v45;
      v2[5] = v38;
      v2[6] = v46;
      if (v47) {
        operator delete(v47);
      }
    }
    else
    {
      *uint64_t v37 = v3;
      unint64_t v38 = v37 + 1;
    }
    v2[5] = v38;
  }
  else if (v3)
  {
    long long v10 = (void *)v2[10];
    [v10 addObject:v3];
  }
}

void CI::KernelArchive::~KernelArchive(dispatch_object_t *this)
{
  id v2 = *this;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = ___ZN2CI13KernelArchiveD2Ev_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  dispatch_sync(v2, block);
  dispatch_release(*this);
  uint64_t v3 = this[7];
  if (v3)
  {
    this[8] = v3;
    operator delete(v3);
  }
  uint64_t v4 = this[4];
  if (v4)
  {
    this[5] = v4;
    operator delete(v4);
  }
  id v5 = this[1];
  if (v5)
  {
    this[2] = v5;
    operator delete(v5);
  }
}

void ___ZN2CI13KernelArchiveD2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = (void **)v1[7];
  uint64_t v3 = (void **)v1[8];
  while (v2 != v3)
  {
    uint64_t v4 = *v2++;
  }
  v1[2] = v1[1];
  v1[5] = v1[4];
  id v5 = (void *)v1[10];
}

void __Block_byref_object_copy__241(uint64_t a1, uint64_t a2)
{
}

void __Block_byref_object_dispose__242(uint64_t a1)
{
}

CI::LegacyDAGDescriptor::ArgumentInfo *CI::LegacyDAGDescriptor::ArgumentInfo::ArgumentInfo(CI::LegacyDAGDescriptor::ArgumentInfo *this, unint64_t a2)
{
  *(void *)this = &unk_1EE45D0F0;
  *((void *)this + 1) = a2;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  std::vector<LineCostProxy>::reserve((void **)this + 2, a2);
  return this;
}

void sub_1938F3734(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1938F382C(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void **)(v1 + 64);
  if (v3)
  {
    *(void *)(v1 + 72) = v3;
    operator delete(v3);
  }
  CI::LegacyDAGDescriptor::~LegacyDAGDescriptor(v1);
  *(void *)uint64_t v1 = &unk_1EE45D6A8;

  _Unwind_Resume(a1);
}

uint64_t CI::CoreImageDylib::get(CI::CoreImageDylib *this)
{
  uint64_t result = *(void *)this;
  if (!result)
  {
    if (*((unsigned char *)this + 8))
    {
      uint64_t v3 = *((void *)this + 3);
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = ___ZN2CI14CoreImageDylib3getEv_block_invoke;
      block[3] = &__block_descriptor_40_e5_v8__0l;
      block[4] = this;
      dispatch_sync(v3, block);
      return *(void *)this;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

id ___ZN2CI14CoreImageDylib3getEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id result = *(id *)v1;
  if (!*(void *)v1)
  {
    if (*(unsigned char *)(v1 + 8))
    {
      id result = +[CIKernelLibrary coreImageDylibWithDevice:*(void *)(v1 + 16)];
      *(void *)uint64_t v1 = result;
    }
    else
    {
      id result = 0;
    }
  }
  *(unsigned char *)(v1 + 8) = result != 0;
  return result;
}

uint64_t CI::InstanceCounted<(CI::Type)68>::type()
{
  return 68;
}

void *CI::InstanceCounted<(CI::Type)68>::~InstanceCounted(void *result)
{
  *id result = &unk_1EE456A58;
  atomic_fetch_add(&dword_1EB466F58[10], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)68>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE456A58;
  atomic_fetch_add(&dword_1EB466F58[10], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

CI::MetalKernel *CI::MetalKernel::MetalKernel(CI::MetalKernel *this, const char *__s1, CIKernelLibrary *a3, NSDictionary *a4, NSDictionary *a5, char a6, char a7)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  *(void *)this = &unk_1EE457C90;
  unint64_t v32 = __s1;
  *((void *)this + 1) = strdup(__s1);
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((unsigned char *)this + 48) = a6;
  *((void *)this + 7) = 0;
  *((unsigned char *)this + 64) = a7;
  *((void *)this + 9) = 0;
  *((void *)this + 2) = a3;
  uint64_t v34 = this;
  *((void *)this + 7) = objc_opt_new();
  if (a4) {
    uint64_t v13 = a4;
  }
  else {
    uint64_t v13 = (NSDictionary *)objc_opt_new();
  }
  *((void *)this + 9) = v13;
  *((void *)this + 3) = a5;
  v41[0] = MEMORY[0x1E4F143A8];
  v41[1] = 3221225472;
  v41[2] = ___ZN2CI11MetalKernelC2EPKcP15CIKernelLibraryP12NSDictionaryS6_bb_block_invoke;
  unsigned char v41[3] = &__block_descriptor_40_e26_v32__0r_v8Q16__NSString_24l;
  v41[4] = this;
  CI::MetalKernel::iterateOverFunctionConstants((uint64_t)this, (uint64_t)v41);
  uint64_t v14 = (void *)CI::MetalKernel::function(this);
  unint64_t v15 = (_OWORD *)[v14 bitCodeHash];
  long long v16 = v15[1];
  __src[0] = *v15;
  __src[1] = v16;
  XXH64_reset(v40, 0);
  XXH64_update((uint64_t)v40, (char *)__src, 0x20uLL);
  *((void *)this + 5) = XXH64_digest((uint64_t)v40);

  XXH64_reset(v39, 0);
  unint64_t v17 = [(NSArray *)[(NSDictionary *)a4 allKeys] sortedArrayUsingSelector:sel_compare_];
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v18 = [(NSArray *)v17 countByEnumeratingWithState:&v35 objects:v50 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v36;
    do
    {
      for (uint64_t i = 0; i != v18; ++i)
      {
        if (*(void *)v36 != v19) {
          objc_enumerationMutation(v17);
        }
        CFStringRef v21 = *(const __CFString **)(*((void *)&v35 + 1) + 8 * i);
        CI::XXHashHelper::add((CI::XXHashHelper *)v39, v21);
        CFNumberRef v22 = [(NSDictionary *)a4 valueForKey:v21];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          CI::XXHashHelper::add((CI::XXHashHelper *)v39, v22);
        }
        else
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            CI::XXHashHelper::add((CI::XXHashHelper *)v39, v22);
          }
        }
        CFNumberRef v23 = -[NSDictionary valueForKey:](a5, "valueForKey:", v21, v32);
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          CI::XXHashHelper::add((CI::XXHashHelper *)v39, v23);
        }
      }
      uint64_t v18 = [(NSArray *)v17 countByEnumeratingWithState:&v35 objects:v50 count:16];
    }
    while (v18);
  }
  *((void *)v34 + 4) = XXH64_digest((uint64_t)v39);
  if (CI_LOG_METAL_FUNCTION_HASH())
  {
    uint64_t v24 = ci_logger_compile();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      uint64_t v25 = (void *)*((void *)v34 + 4);
      uint64_t v26 = *((void *)v34 + 5);
      uint64_t v27 = [(NSArray *)v17 count];
      *(_DWORD *)int buf = 136446978;
      unint64_t v43 = v32;
      __int16 v44 = 2050;
      uint64_t v45 = v26;
      __int16 v46 = 2050;
      id v47 = v25;
      __int16 v48 = 2050;
      uint64_t v49 = v27;
      _os_log_impl(&dword_193671000, v24, OS_LOG_TYPE_INFO, "MTLFunction %{public}s bitcode digest %{public}llx constants digest %{public}llx constants key size %{public}lu", buf, 0x2Au);
    }
    if ([(NSArray *)v17 count])
    {
      uint64_t v28 = ci_logger_compile();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        uint64_t v29 = [(NSArray *)v17 objectAtIndexedSubscript:0];
        id v30 = [(NSDictionary *)a4 valueForKey:[(NSArray *)v17 objectAtIndexedSubscript:0]];
        *(_DWORD *)int buf = 136446722;
        unint64_t v43 = v33;
        __int16 v44 = 2114;
        uint64_t v45 = v29;
        __int16 v46 = 2114;
        id v47 = v30;
        _os_log_impl(&dword_193671000, v28, OS_LOG_TYPE_INFO, "MTLFunction %{public}s : %{public}@ : %{public}@", buf, 0x20u);
      }
    }
  }
  return v34;
}

void CI::MetalKernel::iterateOverFunctionConstants(uint64_t a1, uint64_t a2)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 72);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v24 = v2;
  obunint64_t j = (id)[v2 allKeys];
  uint64_t v23 = [obj countByEnumeratingWithState:&v33 objects:v42 count:16];
  if (v23)
  {
    uint64_t v22 = *(void *)v34;
    do
    {
      uint64_t v3 = 0;
      do
      {
        if (*(void *)v34 != v22) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void *)(*((void *)&v33 + 1) + 8 * v3);
        id v5 = (void *)[*(id *)(a1 + 24) objectForKeyedSubscript:v4];
        if (v5)
        {
          uint64_t v6 = (int)[v5 intValue];
          unint64_t v7 = (CI *)[v24 objectForKeyedSubscript:v4];
          uint64_t v8 = 4;
          uint64_t v9 = 3;
          uint64_t v27 = v6;
          uint64_t v28 = v3;
          switch(v6)
          {
            case 3:
            case 16:
            case 29:
            case 33:
            case 37:
            case 41:
            case 45:
            case 49:
            case 53:
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                long long v40 = 0u;
                long long v41 = 0u;
                long long v38 = 0u;
                long long v39 = 0u;
                CI::packSingleValue(v7, 0, v6, (MTLDataType)&v38, v10);
                goto LABEL_38;
              }
              NSLog(&cfstr_CouldNotSetThe_0.isa, v4, v20);
              return;
            case 4:
            case 17:
            case 30:
            case 34:
            case 38:
            case 42:
            case 46:
            case 50:
            case 54:
              uint64_t v9 = v6 - 1;
              uint64_t v8 = 2;
              goto LABEL_26;
            case 5:
            case 18:
            case 31:
            case 35:
            case 39:
            case 43:
            case 47:
            case 51:
            case 55:
              uint64_t v9 = v6 - 2;
              uint64_t v8 = 3;
              goto LABEL_26;
            case 6:
            case 19:
            case 32:
            case 36:
            case 40:
            case 44:
            case 48:
            case 52:
            case 56:
              uint64_t v8 = 4;
              uint64_t v9 = v6 - 3;
              goto LABEL_26;
            case 7:
              goto LABEL_26;
            case 8:
            case 10:
              uint64_t v8 = 6;
              goto LABEL_23;
            case 9:
            case 13:
              uint64_t v8 = 8;
              goto LABEL_23;
            case 11:
              uint64_t v8 = 9;
              goto LABEL_23;
            case 12:
            case 14:
              uint64_t v8 = 12;
              goto LABEL_23;
            case 15:
              uint64_t v8 = 16;
LABEL_23:
              uint64_t v9 = 3;
              goto LABEL_26;
            case 20:
              uint64_t v8 = 4;
              goto LABEL_25;
            case 21:
            case 23:
              uint64_t v8 = 6;
              goto LABEL_25;
            case 22:
            case 26:
              uint64_t v8 = 8;
              goto LABEL_25;
            case 24:
              uint64_t v8 = 9;
              goto LABEL_25;
            case 25:
            case 27:
              uint64_t v8 = 12;
LABEL_25:
              uint64_t v9 = 16;
              goto LABEL_26;
            case 28:
              uint64_t v9 = 16;
              uint64_t v8 = 16;
LABEL_26:
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0 || [(CI *)v7 count] != v8)
              {
                NSLog(&cfstr_CouldNotSetThe_1.isa, v4, v8);
                return;
              }
              long long v40 = 0u;
              long long v41 = 0u;
              long long v38 = 0u;
              long long v39 = 0u;
              long long v29 = 0u;
              long long v30 = 0u;
              long long v31 = 0u;
              long long v32 = 0u;
              uint64_t v12 = [(CI *)v7 countByEnumeratingWithState:&v29 objects:v37 count:16];
              if (v12)
              {
                uint64_t v13 = v12;
                uint64_t v14 = 0;
                uint64_t v15 = *(void *)v30;
                do
                {
                  for (uint64_t i = 0; i != v13; ++i)
                  {
                    if (*(void *)v30 != v15) {
                      objc_enumerationMutation(v7);
                    }
                    unint64_t v17 = *(CI **)(*((void *)&v29 + 1) + 8 * i);
                    objc_opt_class();
                    if (objc_opt_isKindOfClass()) {
                      CI::packSingleValue(v17, (NSNumber *)(v14 + i), v9, (MTLDataType)&v38, v18);
                    }
                    else {
                      NSLog(&cfstr_CouldNotSetInd.isa, v14 + i, v4);
                    }
                  }
                  uint64_t v13 = [(CI *)v7 countByEnumeratingWithState:&v29 objects:v37 count:16];
                  uint64_t v14 = (v14 + i);
                }
                while (v13);
              }
LABEL_38:
              (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(a2 + 16))(a2, &v38, v27, v4);
              uint64_t v3 = v28;
              break;
            default:
              NSLog(&cfstr_CouldNotSetThe.isa, v4, v20);
              return;
          }
        }
        else
        {
          LODWORD(v38) = 0;
          objc_msgSend((id)objc_msgSend(v24, "objectForKeyedSubscript:", v4), "floatValue");
          LODWORD(v38) = v11;
          (*(void (**)(uint64_t, long long *, uint64_t, uint64_t))(a2 + 16))(a2, &v38, 3, v4);
        }
        ++v3;
      }
      while (v3 != v23);
      uint64_t v19 = [obj countByEnumeratingWithState:&v33 objects:v42 count:16];
      uint64_t v23 = v19;
    }
    while (v19);
  }
}

uint64_t ___ZN2CI11MetalKernelC2EPKcP15CIKernelLibraryP12NSDictionaryS6_bb_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(*(void *)(a1 + 32) + 56) setConstantValue:a2 type:a3 withName:a4];
}

uint64_t CI::MetalKernel::function(CI::MetalKernel *this)
{
  int v2 = *((unsigned __int8 *)this + 48);
  uint64_t v3 = (void *)*((void *)this + 2);
  uint64_t v4 = [NSString stringWithUTF8String:*((void *)this + 1)];
  if (v2)
  {
    uint64_t v5 = *((void *)this + 7);
    return [v3 newSpecializedFunctionWithName:v4 constants:v5];
  }
  else
  {
    return [v3 newFunctionWithName:v4];
  }
}

uint64_t CI::MetalKernel::isFromLibrary(id *this, NSString *a2)
{
  uint64_t result = [this[2] url];
  if (result)
  {
    uint64_t v5 = objc_msgSend((id)objc_msgSend(this[2], "url"), "lastPathComponent");
    return [(NSString *)a2 containsString:v5];
  }
  return result;
}

uint64_t CI::MetalKernel::useMTLFunctionBitCodeHashForProgramDigest(id *this)
{
  int v1 = *((unsigned __int8 *)this + 64);
  int v2 = (void *)[this[2] url];
  if (v2)
  {
    uint64_t v3 = (void *)[v2 absoluteString];
    if ([v3 containsString:@"CCPortrait.bundle/CoreImageKernels.ci.metallib"]) {
      unsigned int v4 = 0;
    }
    else {
      unsigned int v4 = [v3 containsString:@"CCPortrait.bundle/CoreImageKernels_only.ci.metallib"] ^ 1;
    }
  }
  else
  {
    unsigned int v4 = 1;
  }
  if (v1) {
    return 0;
  }
  else {
    return v4;
  }
}

uint64_t CI::packSingleValue(CI *this, NSNumber *a2, uint64_t a3, MTLDataType a4, void *a5)
{
  int v6 = (int)a2;
  if (a3 <= 36)
  {
    if (a3 > 28)
    {
      if (a3 == 29)
      {
        uint64_t result = [(CI *)this intValue];
      }
      else
      {
        if (a3 != 33) {
          goto LABEL_25;
        }
        uint64_t result = [(CI *)this unsignedIntValue];
      }
      *(_DWORD *)(a4 + 4 * v6) = result;
    }
    else
    {
      if (a3 != 3)
      {
        if (a3 == 16)
        {
          uint64_t result = [(CI *)this floatValue];
          __asm { FCVT            H0, S0 }
          *(_WORD *)(a4 + 2 * v6) = _S0;
          return result;
        }
        goto LABEL_25;
      }
      uint64_t result = [(CI *)this floatValue];
      *(_DWORD *)(a4 + 4 * v6) = v13;
    }
  }
  else
  {
    if (a3 > 44)
    {
      switch(a3)
      {
        case '-':
          uint64_t result = [(CI *)this charValue];
          goto LABEL_19;
        case '1':
          uint64_t result = [(CI *)this unsignedCharValue];
          goto LABEL_19;
        case '5':
          uint64_t result = [(CI *)this BOOLValue];
LABEL_19:
          *(unsigned char *)(a4 + v6) = result;
          return result;
      }
LABEL_25:
      abort();
    }
    if (a3 == 37)
    {
      uint64_t result = [(CI *)this shortValue];
    }
    else
    {
      if (a3 != 41) {
        goto LABEL_25;
      }
      uint64_t result = [(CI *)this unsignedShortValue];
    }
    *(_WORD *)(a4 + 2 * v6) = result;
  }
  return result;
}

void CI::MetalKernel::~MetalKernel(id *this)
{
  *this = &unk_1EE457C90;

  id v2 = this[1];
  if (v2) {
    free(v2);
  }
}

{
  uint64_t vars8;

  CI::MetalKernel::~MetalKernel(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::MetalKernel::function(uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 48))
  {
    id v3 = *a2;
    objc_msgSend(*a2, "setName:", objc_msgSend(NSString, "stringWithUTF8String:", *(void *)(a1 + 8)));
    [v3 setConstantValues:*(void *)(a1 + 56)];
    unsigned int v4 = *(void **)(a1 + 16);
    return [v4 newSpecializedFunctionWithDescriptor:v3];
  }
  else
  {
    int v6 = *(void **)(a1 + 16);
    uint64_t v7 = [NSString stringWithUTF8String:*(void *)(a1 + 8)];
    return [v6 newFunctionWithName:v7];
  }
}

uint64_t CI::PrecompiledWarpKernel::add_to_digest(id *this, CI::XXHashHelper *a2)
{
  CI::Kernel::add_to_digest((CI::Kernel *)(this + 10), a2);
  uint64_t __src = (*((uint64_t (**)(id *))*this + 5))(this);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  uint64_t result = CI::MetalKernel::useMTLFunctionBitCodeHashForProgramDigest(this);
  if (result)
  {
    uint64_t __src = (uint64_t)this[5];
    return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  }
  return result;
}

uint64_t non-virtual thunk to'CI::PrecompiledWarpKernel::add_to_digest(id *this, CI::XXHashHelper *a2)
{
  return CI::PrecompiledWarpKernel::add_to_digest(this - 10, a2);
}

uint64_t CI::PrecompiledColorKernel::add_to_digest(id *this, CI::XXHashHelper *a2)
{
  CI::Kernel::add_to_digest((CI::Kernel *)(this + 10), a2);
  uint64_t __src = (*((uint64_t (**)(id *))*this + 5))(this);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  uint64_t result = CI::MetalKernel::useMTLFunctionBitCodeHashForProgramDigest(this);
  if (result)
  {
    uint64_t __src = (uint64_t)this[5];
    return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  }
  return result;
}

uint64_t non-virtual thunk to'CI::PrecompiledColorKernel::add_to_digest(id *this, CI::XXHashHelper *a2)
{
  return CI::PrecompiledColorKernel::add_to_digest(this - 10, a2);
}

uint64_t CI::PrecompiledGeneralKernel::add_to_digest(id *this, CI::XXHashHelper *a2)
{
  CI::Kernel::add_to_digest((CI::Kernel *)(this + 10), a2);
  uint64_t __src = (*((uint64_t (**)(id *))*this + 5))(this);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  uint64_t result = CI::MetalKernel::useMTLFunctionBitCodeHashForProgramDigest(this);
  if (result)
  {
    uint64_t __src = (uint64_t)this[5];
    return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  }
  return result;
}

uint64_t non-virtual thunk to'CI::PrecompiledGeneralKernel::add_to_digest(id *this, CI::XXHashHelper *a2)
{
  return CI::PrecompiledGeneralKernel::add_to_digest(this - 10, a2);
}

void CI::PrecompiledGeneralKernel::~PrecompiledGeneralKernel(id *this)
{
  CI::Kernel::~Kernel((CI::Kernel *)(this + 10));

  CI::MetalKernel::~MetalKernel(this);
}

{
  uint64_t vars8;

  CI::Kernel::~Kernel((CI::Kernel *)(this + 10));
  CI::MetalKernel::~MetalKernel(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::PrecompiledGeneralKernel::metalConstants(CI::PrecompiledGeneralKernel *this)
{
  return *(void *)((*(uint64_t (**)(CI::PrecompiledGeneralKernel *))(*(void *)this + 16))(this) + 72);
}

uint64_t CI::PrecompiledGeneralKernel::metalConstantTypes(CI::PrecompiledGeneralKernel *this)
{
  return *(void *)((*(uint64_t (**)(CI::PrecompiledGeneralKernel *))(*(void *)this + 16))(this) + 24);
}

uint64_t CI::PrecompiledGeneralKernel::metalConstantsDigest(CI::PrecompiledGeneralKernel *this)
{
  return *(void *)((*(uint64_t (**)(CI::PrecompiledGeneralKernel *))(*(void *)this + 16))(this) + 32);
}

void non-virtual thunk to'CI::PrecompiledGeneralKernel::~PrecompiledGeneralKernel(CI::PrecompiledGeneralKernel *this)
{
  int v1 = (id *)((char *)this - 80);
  CI::Kernel::~Kernel(this);

  CI::MetalKernel::~MetalKernel(v1);
}

{
  id *v1;
  uint64_t vars8;

  int v1 = (id *)((char *)this - 80);
  CI::Kernel::~Kernel(this);
  CI::MetalKernel::~MetalKernel(v1);

  JUMPOUT(0x1997023B0);
}

uint64_t non-virtual thunk to'CI::PrecompiledGeneralKernel::metalConstants(CI::PrecompiledGeneralKernel *this)
{
  return *(void *)((*(uint64_t (**)(void))(*((void *)this - 10) + 16))() + 72);
}

uint64_t non-virtual thunk to'CI::PrecompiledGeneralKernel::metalConstantTypes(CI::PrecompiledGeneralKernel *this)
{
  return *(void *)((*(uint64_t (**)(void))(*((void *)this - 10) + 16))() + 24);
}

uint64_t non-virtual thunk to'CI::PrecompiledGeneralKernel::metalConstantsDigest(CI::PrecompiledGeneralKernel *this)
{
  return *(void *)((*(uint64_t (**)(void))(*((void *)this - 10) + 16))() + 32);
}

uint64_t non-virtual thunk to'CI::PrecompiledGeneralKernel::metal_kernel(CI::PrecompiledGeneralKernel *this)
{
  return (uint64_t)this - 80;
}

void CI::PrecompiledColorKernel::~PrecompiledColorKernel(id *this)
{
  CI::Kernel::~Kernel((CI::Kernel *)(this + 10));

  CI::MetalKernel::~MetalKernel(this);
}

{
  uint64_t vars8;

  CI::Kernel::~Kernel((CI::Kernel *)(this + 10));
  CI::MetalKernel::~MetalKernel(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::PrecompiledColorKernel::metalConstants(CI::PrecompiledColorKernel *this)
{
  return *(void *)((*(uint64_t (**)(CI::PrecompiledColorKernel *))(*(void *)this + 16))(this) + 72);
}

uint64_t CI::PrecompiledColorKernel::metalConstantTypes(CI::PrecompiledColorKernel *this)
{
  return *(void *)((*(uint64_t (**)(CI::PrecompiledColorKernel *))(*(void *)this + 16))(this) + 24);
}

uint64_t CI::PrecompiledColorKernel::metalConstantsDigest(CI::PrecompiledColorKernel *this)
{
  return *(void *)((*(uint64_t (**)(CI::PrecompiledColorKernel *))(*(void *)this + 16))(this) + 32);
}

void non-virtual thunk to'CI::PrecompiledColorKernel::~PrecompiledColorKernel(CI::PrecompiledColorKernel *this)
{
  int v1 = (id *)((char *)this - 80);
  CI::Kernel::~Kernel(this);

  CI::MetalKernel::~MetalKernel(v1);
}

{
  id *v1;
  uint64_t vars8;

  int v1 = (id *)((char *)this - 80);
  CI::Kernel::~Kernel(this);
  CI::MetalKernel::~MetalKernel(v1);

  JUMPOUT(0x1997023B0);
}

uint64_t non-virtual thunk to'CI::PrecompiledColorKernel::metalConstants(CI::PrecompiledColorKernel *this)
{
  return *(void *)((*(uint64_t (**)(void))(*((void *)this - 10) + 16))() + 72);
}

uint64_t non-virtual thunk to'CI::PrecompiledColorKernel::metalConstantTypes(CI::PrecompiledColorKernel *this)
{
  return *(void *)((*(uint64_t (**)(void))(*((void *)this - 10) + 16))() + 24);
}

uint64_t non-virtual thunk to'CI::PrecompiledColorKernel::metalConstantsDigest(CI::PrecompiledColorKernel *this)
{
  return *(void *)((*(uint64_t (**)(void))(*((void *)this - 10) + 16))() + 32);
}

uint64_t non-virtual thunk to'CI::PrecompiledColorKernel::metal_kernel(CI::PrecompiledColorKernel *this)
{
  return (uint64_t)this - 80;
}

void CI::PrecompiledWarpKernel::~PrecompiledWarpKernel(id *this)
{
  CI::Kernel::~Kernel((CI::Kernel *)(this + 10));

  CI::MetalKernel::~MetalKernel(this);
}

{
  uint64_t vars8;

  CI::Kernel::~Kernel((CI::Kernel *)(this + 10));
  CI::MetalKernel::~MetalKernel(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::PrecompiledWarpKernel::metalConstants(CI::PrecompiledWarpKernel *this)
{
  return *(void *)((*(uint64_t (**)(CI::PrecompiledWarpKernel *))(*(void *)this + 16))(this) + 72);
}

uint64_t CI::PrecompiledWarpKernel::metalConstantTypes(CI::PrecompiledWarpKernel *this)
{
  return *(void *)((*(uint64_t (**)(CI::PrecompiledWarpKernel *))(*(void *)this + 16))(this) + 24);
}

uint64_t CI::PrecompiledWarpKernel::metalConstantsDigest(CI::PrecompiledWarpKernel *this)
{
  return *(void *)((*(uint64_t (**)(CI::PrecompiledWarpKernel *))(*(void *)this + 16))(this) + 32);
}

void non-virtual thunk to'CI::PrecompiledWarpKernel::~PrecompiledWarpKernel(CI::PrecompiledWarpKernel *this)
{
  int v1 = (id *)((char *)this - 80);
  CI::Kernel::~Kernel(this);

  CI::MetalKernel::~MetalKernel(v1);
}

{
  id *v1;
  uint64_t vars8;

  int v1 = (id *)((char *)this - 80);
  CI::Kernel::~Kernel(this);
  CI::MetalKernel::~MetalKernel(v1);

  JUMPOUT(0x1997023B0);
}

uint64_t non-virtual thunk to'CI::PrecompiledWarpKernel::metalConstants(CI::PrecompiledWarpKernel *this)
{
  return *(void *)((*(uint64_t (**)(void))(*((void *)this - 10) + 16))() + 72);
}

uint64_t non-virtual thunk to'CI::PrecompiledWarpKernel::metalConstantTypes(CI::PrecompiledWarpKernel *this)
{
  return *(void *)((*(uint64_t (**)(void))(*((void *)this - 10) + 16))() + 24);
}

uint64_t non-virtual thunk to'CI::PrecompiledWarpKernel::metalConstantsDigest(CI::PrecompiledWarpKernel *this)
{
  return *(void *)((*(uint64_t (**)(void))(*((void *)this - 10) + 16))() + 32);
}

uint64_t non-virtual thunk to'CI::PrecompiledWarpKernel::metal_kernel(CI::PrecompiledWarpKernel *this)
{
  return (uint64_t)this - 80;
}

uint64_t CI::WarpKernel::WarpKernel(uint64_t a1, const char *a2, char *a3, char *a4, char a5, void **a6, uint64_t a7, unsigned int a8, int a9, char a10)
{
  *(void *)CI::Kernel::Kernel(a1, a2, a3, a4, a5, (uint64_t)a6, a7, a8, a9, 0, 1, 1) = off_1EE4577F0;
  if (a10) {
    CI::SerialValArray<int>::append(a6, 30);
  }
  CI::Kernel::set_preserves_range(a1, 1);
  CI::Kernel::set_preserves_colorspace(a1, 1);
  return a1;
}

{
  return CI::WarpKernel::WarpKernel(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t CI::Kernel::Kernel(uint64_t a1, const char *a2, char *a3, char *a4, char a5, uint64_t a6, uint64_t a7, unsigned int a8, int a9, int a10, uint64_t a11, uint64_t a12)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &unk_1EE45DED0;
  *(unsigned char *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = a9;
  *(_OWORD *)(a1 + 20) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_DWORD *)(a1 + 84) = 0;
  *(int64x2_t *)(a1 + 88) = vdupq_n_s64(1uLL);
  *(unsigned char *)(a1 + 104) = a5;
  *(void *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = a10;
  *(void *)(a1 + 128) = a11;
  *(void *)(a1 + 136) = a12;
  CI::KernelArguments::KernelArguments((void *)(a1 + 144), a6, a7);
  *(_DWORD *)(a1 + 163) = 0;
  *(_DWORD *)(a1 + 160) = 0;
  if (a2) {
    *(void *)(a1 + 24) = strdup(a2);
  }
  if (a3)
  {
    if ((a5 & 1) == 0) {
      a3 = strdup(a3);
    }
    *(void *)(a1 + 32) = a3;
  }
  if (a4)
  {
    if ((a5 & 1) == 0) {
      a4 = strdup(a4);
    }
    *(void *)(a1 + 40) = a4;
  }
  *(unsigned char *)(a1 + 165) = a8 & 1;
  *(unsigned char *)(a1 + 166) = (a8 & 4) != 0;
  *(unsigned char *)(a1 + 164) = (a8 & 0x80) != 0;
  v18.i64[0] = *(void *)&vshl_u16((uint16x4_t)(*(void *)&vdup_n_s16(a8) & 0xFF00FF00FF00FFLL), (uint16x4_t)0xFFFBFFFFFFFCFFFALL) & 0xFF01FF01FF01FF01;
  *(_DWORD *)(a1 + 160) = vmovn_s16(v18).u32[0];
  return a1;
}

uint64_t *CI::Kernel::set_argument_type(uint64_t *a1, int a2, int a3)
{
  uint64_t v5 = a1 + 18;
  (*(void (**)(uint64_t *))(*a1 + 72))(a1);

  return CI::KernelArguments::set_type(v5, a2, a3);
}

uint64_t CI::Kernel::num_sample_arguments(CI::Kernel *this)
{
  if (*((unsigned char *)this + 12)) {
    int v2 = CI::KernelArguments::count((CI::Kernel *)((char *)this + 144));
  }
  else {
    int v2 = *((_DWORD *)this + 5);
  }
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = v2;
    while (!*((unsigned char *)this + 12))
    {
      if (v3 < *((int *)this + 5))
      {
        int type = *(_DWORD *)(*((void *)this + 9) + 4 * v3);
LABEL_10:
        if (type == 1) {
          uint64_t v4 = (v4 + 1);
        }
        else {
          uint64_t v4 = v4;
        }
      }
      if (v5 == ++v3) {
        return v4;
      }
    }
    int type = CI::KernelArguments::get_type((CI::Kernel *)((char *)this + 144), v3);
    goto LABEL_10;
  }
  return 0;
}

uint64_t CI::Kernel::num_sampler_arguments(CI::Kernel *this)
{
  if (*((unsigned char *)this + 12)) {
    int v2 = CI::KernelArguments::count((CI::Kernel *)((char *)this + 144));
  }
  else {
    int v2 = *((_DWORD *)this + 5);
  }
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    uint64_t v5 = v2;
    while (!*((unsigned char *)this + 12))
    {
      if (v3 < *((int *)this + 5))
      {
        int type = *(_DWORD *)(*((void *)this + 9) + 4 * v3);
LABEL_10:
        if (type == 2) {
          uint64_t v4 = (v4 + 1);
        }
        else {
          uint64_t v4 = v4;
        }
      }
      if (v5 == ++v3) {
        return v4;
      }
    }
    int type = CI::KernelArguments::get_type((CI::Kernel *)((char *)this + 144), v3);
    goto LABEL_10;
  }
  return 0;
}

uint64_t CI::Kernel::index_of_first_image_argument(CI::Kernel *this)
{
  if (*((unsigned char *)this + 12)) {
    int v2 = CI::KernelArguments::count((CI::Kernel *)((char *)this + 144));
  }
  else {
    int v2 = *((_DWORD *)this + 5);
  }
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2;
    do
    {
      if (*((unsigned char *)this + 12))
      {
        int type = CI::KernelArguments::get_type((CI::Kernel *)((char *)this + 144), v3);
      }
      else
      {
        if (v3 >= *((int *)this + 5)) {
          goto LABEL_13;
        }
        int type = *(_DWORD *)(*((void *)this + 9) + 4 * v3);
      }
      if (type == 1) {
        return v3;
      }
      if (*((unsigned char *)this + 12))
      {
        int v6 = CI::KernelArguments::get_type((CI::Kernel *)((char *)this + 144), v3);
        goto LABEL_15;
      }
LABEL_13:
      if (v3 < *((int *)this + 5))
      {
        int v6 = *(_DWORD *)(*((void *)this + 9) + 4 * v3);
LABEL_15:
        if (v6 == 2) {
          return v3;
        }
      }
      ++v3;
    }
    while (v4 != v3);
  }
  return 0xFFFFFFFFLL;
}

uint64_t CI::Kernel::set_output_size(uint64_t this, uint64_t a2, uint64_t a3)
{
  *(void *)(this + 128) = a2;
  *(void *)(this + 136) = a3;
  return this;
}

uint64_t CI::Kernel::set_preserves_alpha(uint64_t this, char a2)
{
  *(unsigned char *)(this + 162) = a2;
  return this;
}

uint64_t CI::Kernel::set_preserves_range(uint64_t this, char a2)
{
  *(unsigned char *)(this + 163) = a2;
  return this;
}

uint64_t CI::Kernel::set_preserves_colorspace(uint64_t this, char a2)
{
  *(unsigned char *)(this + 164) = a2;
  return this;
}

uint64_t CI::Kernel::set_can_reduce_output_channels(uint64_t this, char a2)
{
  *(unsigned char *)(this + 160) = a2;
  return this;
}

uint64_t CI::Kernel::set_half_color_inputs(uint64_t this, char a2)
{
  *(unsigned char *)(this + 161) = a2;
  return this;
}

double cikernel::_ci_bgra(int32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vrev64q_s32(a1);
  *(void *)&double result = vextq_s8(v1, v1, 0xCuLL).u64[0];
  return result;
}

double cikernel::_ci_abgr(int32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vrev64q_s32(a1);
  *(void *)&double result = vextq_s8(v1, v1, 8uLL).u64[0];
  return result;
}

double cikernel::_ci_argb(int8x16_t a1)
{
  *(void *)&double result = vextq_s8(a1, a1, 0xCuLL).u64[0];
  return result;
}

double cikernel::_ci_gbra(int32x4_t a1)
{
  *(void *)&double result = vzip2q_s32(vzip1q_s32(a1, (int32x4_t)vextq_s8((int8x16_t)a1, (int8x16_t)a1, 0xCuLL)), a1).u64[0];
  return result;
}

double cikernel::_ci_grab(int32x4_t a1)
{
  *(void *)&double result = vrev64q_s32(a1).u64[0];
  return result;
}

double cikernel::_ci_gbar(int8x16_t a1)
{
  *(void *)&double result = vextq_s8(a1, a1, 4uLL).u64[0];
  return result;
}

double cikernel::_ci_bgr1(int32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vrev64q_s32(a1);
  *(void *)&double result = vextq_s8(v1, v1, 0xCuLL).u64[0];
  return result;
}

double cikernel::_ci_arg1(int8x16_t a1)
{
  *(void *)&double result = vextq_s8(a1, a1, 0xCuLL).u64[0];
  return result;
}

double cikernel::_ci_gra1(int32x4_t a1)
{
  *(void *)&double result = vrev64q_s32(a1).u64[0];
  return result;
}

double cikernel::_ci_gba1(int8x16_t a1)
{
  *(void *)&double result = vextq_s8(a1, a1, 4uLL).u64[0];
  return result;
}

double cikernel::_ci_abg1(int8x16_t a1)
{
  *(void *)&double result = vrev64q_s32((int32x4_t)vextq_s8(a1, a1, 8uLL)).u64[0];
  return result;
}

double cikernel::_ci_1bgr(int32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vrev64q_s32(a1);
  int8x16_t v2 = vextq_s8(v1, v1, 0xCuLL);
  __asm { FMOV            V1.4S, #1.0 }
  *(void *)&double result = vextq_s8(vextq_s8(v2, _Q1, 4uLL), v2, 0xCuLL).u64[0];
  return result;
}

double cikernel::_ci_1rgb(int8x16_t a1)
{
  __asm { FMOV            V1.4S, #1.0 }
  *(void *)&double result = vextq_s8(vextq_s8(_Q1, _Q1, 4uLL), a1, 0xCuLL).u64[0];
  return result;
}

double cikernel::_ci_gb1r(int8x16_t a1)
{
  *(void *)&double result = vextq_s8(a1, a1, 4uLL).u64[0];
  return result;
}

double cikernel::_ci_gr1b(int32x4_t a1)
{
  __asm { FMOV            V1.4S, #1.0 }
  int32x4_t v6 = vtrn1q_s32(_Q1, a1);
  v6.i32[0] = a1.i32[1];
  return *(double *)v6.i64;
}

double cikernel::_ci_aaaa(int32x4_t a1)
{
  *(void *)&double result = vdupq_laneq_s32(a1, 3).u64[0];
  return result;
}

double cikernel::_ci_rrrr(int32x2_t a1)
{
  *(void *)&double result = vdupq_lane_s32(a1, 0).u64[0];
  return result;
}

double cikernel::_ci_000r()
{
  return 0.0;
}

double cikernel::_ci_rrr1(int32x2_t a1)
{
  *(void *)&double result = vdupq_lane_s32(a1, 0).u64[0];
  return result;
}

float cikernel::_ci_a001(__n128 a1)
{
  return a1.n128_f32[3];
}

double cikernel::_ci_ra01(__n128 a1)
{
  return COERCE_DOUBLE(__PAIR64__(a1.n128_u32[3], a1.n128_u32[0]));
}

double cikernel::_ci_aaa1(int32x4_t a1)
{
  *(void *)&double result = vdupq_laneq_s32(a1, 3).u64[0];
  return result;
}

double cikernel::_ci_rrrg(int32x4_t a1)
{
  *(void *)&double result = vzip1q_s32(a1, a1).u64[0];
  return result;
}

__n64 cikernel::_ci_rg_to_rr1(double a1)
{
  result.n64_f32[0] = (*(float *)&a1 + *((float *)&a1 + 1) * 256.0) / 257.0;
  result.n64_u32[1] = 0;
  return result;
}

double cikernel::_ci_rg_to_ll1(double a1)
{
  double v1 = (*(float *)&a1 + *((float *)&a1 + 1) * 256.0) / 257.0;
  *(float *)&double v1 = v1;
  *(void *)&double result = vdupq_lane_s32(*(int32x2_t *)&v1, 0).u64[0];
  return result;
}

double cikernel::_ci_rg_to_a()
{
  return 0.0;
}

double cikernel::_ci_rg_to_i(double a1)
{
  double v1 = (*(float *)&a1 + *((float *)&a1 + 1) * 256.0) / 257.0;
  *(float *)&double v1 = v1;
  *(void *)&double result = vdupq_lane_s32(*(int32x2_t *)&v1, 0).u64[0];
  return result;
}

double cikernel::_ci_la_to_ll1(__n128 a1)
{
  double v1 = (a1.n128_f32[0] + a1.n128_f32[3] * 256.0) / 257.0;
  *(float *)&double v1 = v1;
  *(void *)&double result = vdupq_lane_s32(*(int32x2_t *)&v1, 0).u64[0];
  return result;
}

double cikernel::_ci_la_to_a()
{
  return 0.0;
}

double cikernel::_ci_la_to_i(__n128 a1)
{
  double v1 = (a1.n128_f32[0] + a1.n128_f32[3] * 256.0) / 257.0;
  *(float *)&double v1 = v1;
  *(void *)&double result = vdupq_lane_s32(*(int32x2_t *)&v1, 0).u64[0];
  return result;
}

__n64 cikernel::_ci_la_to_rr1(__n128 a1)
{
  result.n64_f32[0] = (a1.n128_f32[0] + a1.n128_f32[3] * 256.0) / 257.0;
  result.n64_u32[1] = 0;
  return result;
}

float32x2_t cikernel::_ci_rgba_to_rrgg1(int8x16_t a1)
{
  int32x2_t v1 = (int32x2_t)vextq_s8(a1, a1, 8uLL).u64[0];
  return vcvt_f32_f64(vdivq_f64(vmlaq_f64(vcvtq_f64_f32((float32x2_t)vzip1_s32(*(int32x2_t *)a1.i8, v1)), (float64x2_t)vdupq_n_s64(0x4070000000000000uLL), vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)a1.i8, v1))), (float64x2_t)vdupq_n_s64(0x4070100000000000uLL)));
}

double cikernel::_ci_rgba_to_llaa(double a1)
{
  double v1 = (*(float *)&a1 + *((float *)&a1 + 1) * 256.0) / 257.0;
  *(float *)&double v1 = v1;
  *(void *)&double result = vdupq_lane_s32(*(int32x2_t *)&v1, 0).u64[0];
  return result;
}

double cikernel::_ci_to_r16_as_rg8(float a1)
{
  float v1 = 65535.0 * a1;
  v2.f32[0] = v1 + (float)(floorf(v1 * 0.0039062) * -256.0);
  v2.f32[1] = (float)(v1 - v2.f32[0]) * 0.0039062;
  v2.i32[2] = 0;
  v2.i32[3] = 1.0;
  *(void *)&double result = vdivq_f32(v2, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_to_l16_as_rg8(float32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_193950AB0);
  *(float *)v1.i32 = vaddv_f32(vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)))
                   * 65535.0;
  v2.f32[0] = *(float *)v1.i32 + (float)(floorf(*(float *)v1.i32 * 0.0039062) * -256.0);
  v2.f32[1] = (float)(*(float *)v1.i32 - v2.f32[0]) * 0.0039062;
  v2.i32[2] = 0;
  v2.i32[3] = 1.0;
  *(void *)&double result = vdivq_f32(v2, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_to_a16_as_rg8(float32x4_t a1)
{
  float v1 = vmuls_lane_f32(65535.0, a1, 3);
  v2.f32[0] = v1 + (float)(floorf(v1 * 0.0039062) * -256.0);
  v2.f32[1] = (float)(v1 - v2.f32[0]) * 0.0039062;
  v2.i32[2] = 0;
  v2.i32[3] = 1.0;
  *(void *)&double result = vdivq_f32(v2, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

float32x2_t cikernel::_ci_to_YCbYCr_as_rg8(CI *a1, int8x16_t a2)
{
  float32x2_t v11 = *(float32x2_t *)a2.i8;
  float32x2_t v2 = (float32x2_t)vzip1_s32(*(int32x2_t *)a2.i8, (int32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL));
  DC = (void *)CI::getDC(a1);
  int32x2_t v4 = 0;
  if ((float)((float)(0.5 * COERCE_FLOAT(*DC)) - floorf(0.5 * COERCE_FLOAT(*DC))) >= 0.5) {
    *(float *)v4.i32 = 1.0;
  }
  __asm { FMOV            V2.2S, #1.0 }
  return vmla_n_f32(vmul_f32(v11, vsub_f32(_D2, (float32x2_t)vdup_lane_s32(v4, 0))), v2, *(float *)v4.i32);
}

float32x2_t cikernel::_ci_to_CbYCrY_as_rg8(CI *a1, int8x16_t a2)
{
  float32x2_t v2 = (float32x2_t)vrev64_s32(*(int32x2_t *)a2.i8);
  v3.i32[0] = vextq_s8(a2, a2, 8uLL).u32[0];
  v3.i32[1] = a2.i32[0];
  float32x2_t v12 = v3;
  DC = (void *)CI::getDC(a1);
  int32x2_t v5 = 0;
  if ((float)((float)(0.5 * COERCE_FLOAT(*DC)) - floorf(0.5 * COERCE_FLOAT(*DC))) >= 0.5) {
    *(float *)v5.i32 = 1.0;
  }
  __asm { FMOV            V2.2S, #1.0 }
  return vmla_n_f32(vmul_f32(v2, vsub_f32(_D2, (float32x2_t)vdup_lane_s32(v5, 0))), v12, *(float *)v5.i32);
}

double cikernel::_ci_to_rg16_as_rgba8(double a1)
{
  v1.f32[0] = (float)(65535.0 * *(float *)&a1) + (float)(floorf((float)(65535.0 * *(float *)&a1) * 0.0039062) * -256.0);
  float32_t v2 = (float)((float)(65535.0 * *(float *)&a1) - v1.f32[0]) * 0.0039062;
  float v3 = vmuls_lane_f32(65535.0, *(float32x2_t *)&a1, 1);
  v1.f32[1] = v2;
  v1.f32[2] = v3 + (float)(floorf(v3 * 0.0039062) * -256.0);
  v1.f32[3] = (float)(v3 - v1.f32[2]) * 0.0039062;
  *(void *)&double result = vdivq_f32(v1, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_to_rg16_as_bgra8(double a1)
{
  float32_t v1 = (float)(65535.0 * *(float *)&a1) + (float)(floorf((float)(65535.0 * *(float *)&a1) * 0.0039062) * -256.0);
  float32_t v2 = (float)((float)(65535.0 * *(float *)&a1) - v1) * 0.0039062;
  float v3 = vmuls_lane_f32(65535.0, *(float32x2_t *)&a1, 1);
  v4.f32[0] = v3 + (float)(floorf(v3 * 0.0039062) * -256.0);
  v4.f32[1] = v2;
  v4.f32[2] = v1;
  v4.f32[3] = (float)(v3 - v4.f32[0]) * 0.0039062;
  *(void *)&double result = vdivq_f32(v4, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_to_la16_as_rgba8(float32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_193950AB0);
  *(float *)v1.i32 = vaddv_f32(vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)))
                   * 65535.0;
  v2.f32[0] = *(float *)v1.i32 + (float)(floorf(*(float *)v1.i32 * 0.0039062) * -256.0);
  float v3 = vmuls_lane_f32(65535.0, a1, 3);
  v2.f32[1] = (float)(*(float *)v1.i32 - v2.f32[0]) * 0.0039062;
  v2.f32[2] = v3 + (float)(floorf(v3 * 0.0039062) * -256.0);
  v2.f32[3] = (float)(v3 - v2.f32[2]) * 0.0039062;
  *(void *)&double result = vdivq_f32(v2, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_to_la16_as_bgra8(float32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_193950AB0);
  *(float *)v1.i32 = vaddv_f32(vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)))
                   * 65535.0;
  float32_t v2 = *(float *)v1.i32 + (float)(floorf(*(float *)v1.i32 * 0.0039062) * -256.0);
  float v3 = vmuls_lane_f32(65535.0, a1, 3);
  v4.f32[0] = v3 + (float)(floorf(v3 * 0.0039062) * -256.0);
  v4.f32[1] = (float)(*(float *)v1.i32 - v2) * 0.0039062;
  v4.f32[2] = v2;
  v4.f32[3] = (float)(v3 - v4.f32[0]) * 0.0039062;
  *(void *)&double result = vdivq_f32(v4, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

void CI::none_s(void *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a1[6];
  float32x2_t v11 = (double (*)(void *, __n128))a1[3];
  int v12 = *(_DWORD *)(v10 + 16);
  uint64_t v13 = *(void *)(v10 + 8);
  if (*((unsigned char *)a1 + 64)) {
    a1 = CI::setDC((CI *)(a3 + 16 * *(void *)(v10 + 32)), a2);
  }
  uint64_t v14 = (__n128 *)(a3 + 16 * v13);
  if (v12 != 5) {
    uint64_t v14 = (__n128 *)((char *)a2 + 64 * v13);
  }
  *(double *)&long long v15 = v11(a1, *v14);
  *(_OWORD *)(a3 + 16 * a7) = v15;
}

double cikernel::_ci_to_rgb10wide_as_rgba8(float32x4_t a1)
{
  float32x4_t v1 = vabsq_f32(a1);
  int8x16_t v9 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3B4D2E1Cu), v1);
  v2.i64[0] = 0x8000000080000000;
  v2.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v1.i32[3] = 0;
  *(void *)&double result = vaddq_f32(vmulq_f32((float32x4_t)vbslq_s8(v9, (int8x16_t)vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a1), (int8x16_t)vcgtzq_f32(a1)), vorrq_s8(vandq_s8((int8x16_t)a1, v2), _Q3), (int8x16_t)0), vmlaq_f32((float32x4_t)vdupq_n_s32(0xBD6147AE), (float32x4_t)vdupq_n_s32(0x3F870A3Du), (float32x4_t)_simd_pow_f4((simd_float4)v1, (simd_float4)xmmword_19394C960)))), (float32x4_t)vdupq_n_s32(0x3EFF3FD0u)), (float32x4_t)vdupq_n_s32(0x3EC0300Cu)).u64[0];
  return result;
}

double cikernel::_ci_to_rgb10widelinear_as_rgba8(float32x4_t a1)
{
  *(void *)&double result = vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x3EFF3FD0u)), (float32x4_t)vdupq_n_s32(0x3EC0300Cu)).u64[0];
  return result;
}

double cikernel::_ci_to_argb10wide_as_rgba16(int32x4_t a1)
{
  unsigned __int32 v13 = a1.u32[3];
  int8x16_t v1 = (int8x16_t)vrev64q_s32(a1);
  float32x4_t v2 = (float32x4_t)vextq_s8(v1, v1, 0xCuLL);
  float32x4_t v3 = vabsq_f32(v2);
  int8x16_t v12 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3B4D2E1Cu), v3);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v3.i32[3] = 0;
  float32x4_t v10 = (float32x4_t)vbslq_s8(v12, (int8x16_t)vmulq_f32(v2, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v2), (int8x16_t)vcgtzq_f32(v2)), vorrq_s8(vandq_s8((int8x16_t)v2, v4), _Q3), (int8x16_t)0), vmlaq_f32((float32x4_t)vdupq_n_s32(0xBD6147AE), (float32x4_t)vdupq_n_s32(0x3F870A3Du), (float32x4_t)_simd_pow_f4((simd_float4)v3, (simd_float4)xmmword_19394C960))));
  v10.i32[3] = v13;
  *(void *)&double result = vdivq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(vaddq_f32(vmulq_f32(v10, (float32x4_t)vdupq_n_s32(0x43FF0000u)), (float32x4_t)vdupq_n_s32(0x43C00000u)), (float32x4_t)0), (float32x4_t)vdupq_n_s32(0x447FC000u)), (float32x4_t)vdupq_n_s32(0x42800000u)), (float32x4_t)vdupq_n_s32(0x477FFF00u)).u64[0];
  return result;
}

float32x4_t cikernel::_ci_argb10wide(float32x4_t a1)
{
  int32x4_t v15 = (int32x4_t)vdivq_f32(vaddq_f32(vmulq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x477FFF00u)), (float32x4_t)vdupq_n_s32(0x3C800000u)), (float32x4_t)vdupq_n_s32(0xC3C00000)), (float32x4_t)vdupq_n_s32(0x43FF0000u));
  int8x16_t v1 = (int8x16_t)vrev64q_s32(v15);
  float32x4_t v2 = (float32x4_t)vextq_s8(v1, v1, 0xCuLL);
  float32x4_t v3 = vabsq_f32(v2);
  int8x16_t v13 = (int8x16_t)vmulq_f32(v2, (float32x4_t)vdupq_n_s32(0x3D9E8391u));
  int8x16_t v14 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), v3);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  float32x4_t v12 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v2), (int8x16_t)vcgtzq_f32(v2)), vorrq_s8(vandq_s8((int8x16_t)v2, v4), _Q3), (int8x16_t)0);
  simd_float4 v10 = (simd_float4)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3D558919u), (float32x4_t)vdupq_n_s32(0x3F72A76Eu), v3);
  v10.i32[3] = 0;
  float32x4_t result = (float32x4_t)_simd_pow_f4(v10, (simd_float4)xmmword_19394C950);
  result.i64[0] = vbslq_s8(v14, v13, (int8x16_t)vmulq_f32(v12, result)).u64[0];
  result.i32[3] = v15.i32[3];
  return result;
}

double cikernel::_ci_10of16(float32x4_t a1)
{
  __asm { FMOV            V1.4S, #1.0 }
  *(void *)&double result = vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x477FFF00u)), (float32x4_t)vdupq_n_s32(0x477FC000u)), (float32x4_t)0), _Q1).u64[0];
  return result;
}

__n64 cikernel::_ci_l10(float32x4_t a1)
{
  __asm { FMOV            V1.4S, #1.0 }
  result.n64_u32[0] = vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x477FFF00u)), (float32x4_t)vdupq_n_s32(0x477FC000u)), (float32x4_t)0), _Q1).u32[0];
  result.n64_u32[1] = result.n64_u32[0];
  return result;
}

double cikernel::_ci_to_10of16(float32x4_t a1)
{
  __asm { FMOV            V1.4S, #1.0 }
  *(void *)&double result = vminnmq_f32(vmaxnmq_f32(vdivq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x477FC000u)), (float32x4_t)vdupq_n_s32(0x477FFF00u)), (float32x4_t)0), _Q1).u64[0];
  return result;
}

double cikernel::_ci_to_l10_as_r16(float32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_193950AB0);
  *(double *)v1.i64 = vaddv_f32(vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL)))
                    * 65472.0
                    / 65535.0;
  *(float *)v1.i32 = *(double *)v1.i64;
  int8x16_t v2 = (int8x16_t)vdupq_laneq_s32((int32x4_t)a1, 3);
  *(void *)&double result = vextq_s8(vextq_s8(v2, v1, 4uLL), v2, 0xCuLL).u64[0];
  return result;
}

void CI::none_s_f4_f4_f4(uint64_t a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(void *)(a1 + 48);
  simd_float4 v10 = *(double (**)(__n128, __n128, __n128, __n128))(a1 + 24);
  int v11 = *(_DWORD *)(v9 + 16);
  uint64_t v12 = *(void *)(v9 + 8);
  int v13 = *(_DWORD *)(v9 + 40);
  uint64_t v14 = *(void *)(v9 + 32);
  int v15 = *(_DWORD *)(v9 + 64);
  uint64_t v16 = *(void *)(v9 + 56);
  int v17 = *(_DWORD *)(v9 + 88);
  uint64_t v18 = *(void *)(v9 + 80);
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v24 = *(double (**)(__n128, __n128, __n128, __n128))(a1 + 24);
    CI::setDC((CI *)(a3 + 16 * *(void *)(v9 + 104)), a2);
    simd_float4 v10 = v24;
  }
  uint64_t v19 = (__n128 *)(a3 + 16 * v18);
  if (v17 != 5) {
    uint64_t v19 = (__n128 *)((char *)a2 + 64 * v18);
  }
  uint64_t v20 = (__n128 *)(a3 + 16 * v16);
  if (v15 != 5) {
    uint64_t v20 = (__n128 *)((char *)a2 + 64 * v16);
  }
  CFStringRef v21 = (__n128 *)(a3 + 16 * v14);
  if (v13 != 5) {
    CFStringRef v21 = (__n128 *)((char *)a2 + 64 * v14);
  }
  uint64_t v22 = (__n128 *)(a3 + 16 * v12);
  if (v11 != 5) {
    uint64_t v22 = (__n128 *)((char *)a2 + 64 * v12);
  }
  *(double *)&long long v23 = v10(*v22, *v21, *v20, *v19);
  *(_OWORD *)(a3 + 16 * a7) = v23;
}

void CI::none_s_f4(void *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a1[6];
  int v11 = (double (*)(void *, __n128, __n128))a1[3];
  int v12 = *(_DWORD *)(v10 + 16);
  uint64_t v13 = *(void *)(v10 + 8);
  int v14 = *(_DWORD *)(v10 + 40);
  uint64_t v15 = *(void *)(v10 + 32);
  if (*((unsigned char *)a1 + 64)) {
    a1 = CI::setDC((CI *)(a3 + 16 * *(void *)(v10 + 56)), a2);
  }
  uint64_t v16 = (__n128 *)(a3 + 16 * v15);
  if (v14 != 5) {
    uint64_t v16 = (__n128 *)((char *)a2 + 64 * v15);
  }
  int v17 = (__n128 *)(a3 + 16 * v13);
  if (v12 != 5) {
    int v17 = (__n128 *)((char *)a2 + 64 * v13);
  }
  *(double *)&long long v18 = v11(a1, *v17, *v16);
  *(_OWORD *)(a3 + 16 * a7) = v18;
}

int8x16_t cikernel::_ci_writeSIMD_42X(int8x16_t a1, float32x4_t a2)
{
  float32x2_t v2 = (float32x2_t)vext_s8(*(int8x8_t *)a1.i8, (int8x8_t)*(_OWORD *)&vextq_s8(a1, a1, 8uLL), 4uLL);
  float32x2_t v5 = vadd_f32(vmul_laneq_f32(v2, a2, 3), vadd_f32(vmul_laneq_f32(v2, a2, 2), vadd_f32(vmul_lane_f32(v2, *(float32x2_t *)a2.f32, 1), vmul_n_f32(v2, a2.f32[0]))));
  vec2::get_xyxy((vec2 *)&v5);
  return a1;
}

void CI::none_f4_f4(void *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a1[6];
  int v11 = (double (*)(void *, __n128, __n128))a1[3];
  int v12 = *(_DWORD *)(v10 + 16);
  uint64_t v13 = *(void *)(v10 + 8);
  int v14 = *(_DWORD *)(v10 + 40);
  uint64_t v15 = *(void *)(v10 + 32);
  if (*((unsigned char *)a1 + 64)) {
    a1 = CI::setDC((CI *)(a3 + 16 * *(void *)(v10 + 56)), a2);
  }
  uint64_t v16 = (__n128 *)(a3 + 16 * v15);
  if (v14 != 5) {
    uint64_t v16 = (__n128 *)((char *)a2 + 64 * v15);
  }
  int v17 = (__n128 *)(a3 + 16 * v13);
  if (v12 != 5) {
    int v17 = (__n128 *)((char *)a2 + 64 * v13);
  }
  *(double *)&long long v18 = v11(a1, *v17, *v16);
  *(_OWORD *)(a3 + 16 * a7) = v18;
}

double cikernel::_ci_ycc_to_rgb(int8x16_t a1)
{
  *(void *)&double result = vuzp2q_s32((int32x4_t)vextq_s8(a1, a1, 4uLL), (int32x4_t)a1).u64[0];
  return result;
}

double cikernel::_ci_swizzle_to_laaa(float32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_193950AB0);
  *(float32x2_t *)v1.i8 = vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL));
  *(float32x2_t *)v1.i8 = vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1.i8, 1));
  int8x16_t v2 = (int8x16_t)vdupq_laneq_s32((int32x4_t)a1, 3);
  *(void *)&double result = vextq_s8(vextq_s8(v2, v1, 4uLL), v2, 0xCuLL).u64[0];
  return result;
}

float32x2_t cikernel::_ci_swizzle_rgba8_to_rgb10(float32x4_t a1)
{
  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  int8x16_t v2 = (int8x16_t)vrndmq_f32(vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)), v1));
  int32x2_t v3 = (int32x2_t)vextq_s8(v2, v2, 8uLL).u64[0];
  float32x2_t v4 = (float32x2_t)vrev64_s32(v3);
  v2.i32[0] = v3.i32[0];
  return vcvt_f32_f64(vdivq_f64(vmlaq_f64(vrndmq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v2.i8), (float64x2_t)xmmword_193959E00)), (float64x2_t)xmmword_193959E10, vcvtq_f64_f32(vmla_f32(v4, (float32x2_t)0xC1800000C2800000, vrndm_f32(vmul_f32(v4, (float32x2_t)0x3D8000003C800000))))), (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL)));
}

double cikernel::_ci_swizzle_rgba8_to_a2rgb10(float32x4_t a1)
{
  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  int8x16_t v2 = (int8x16_t)vrndmq_f32(vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)), v1));
  *(double *)v1.i64 = *(float *)v2.i32
                    + (float)(*(float *)&v2.i32[1]
                            + (float)(floorf(vmuls_lane_f32(0.25, *(float32x2_t *)v2.i8, 1)) * -4.0))
                    * 256.0;
  int32x2_t v3 = (int32x2_t)vextq_s8(v2, v2, 8uLL).u64[0];
  float32x2_t v4 = (float32x2_t)vrev64_s32(v3);
  v2.i32[0] = v3.i32[0];
  v1.i64[1] = floor(*(float *)&v2.i32[3] / 63.99999);
  *(void *)&double result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vmlaq_f64(vrndmq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v2.i8), (float64x2_t)xmmword_193959E00)), (float64x2_t)xmmword_193959E10, vcvtq_f64_f32(vmla_f32(v4, (float32x2_t)0xC1800000C2800000, vrndm_f32(vmul_f32(v4, (float32x2_t)0x3D8000003C800000))))), (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL))), vdivq_f64((float64x2_t)v1, (float64x2_t)xmmword_193959E20)).u64[0];
  return result;
}

double cikernel::_ci_swizzle_rgba8_to_a2bgr10(float32x4_t a1)
{
  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  float32x4_t v2 = vrndmq_f32(vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)), v1));
  v3.f64[0] = v2.f32[0];
  float32x2_t v4 = (float32x2_t)vextq_s8((int8x16_t)v2, (int8x16_t)v2, 4uLL).u64[0];
  v3.f64[1] = floor(v2.f32[1] * 0.25);
  *(double *)v2.i64 = floor(v2.f32[2] * 0.0625)
                    + (float)(v2.f32[3] + (float)(floorf(vmuls_lane_f32(0.015625, v2, 3)) * -64.0)) * 16.0;
  v2.i64[1] = floor(v2.f32[3] / 63.99999);
  *(void *)&double result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vmlaq_f64(v3, (float64x2_t)xmmword_193959E30, vcvtq_f64_f32(vmla_f32(v4, (float32x2_t)0xC1800000C0800000, vrndm_f32(vmul_f32(v4, (float32x2_t)0x3D8000003E800000))))), (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL))), vdivq_f64((float64x2_t)v2, (float64x2_t)xmmword_193959E20)).u64[0];
  return result;
}

double cikernel::_ci_swizzle_rgba8_to_rgb10_wide(float32x4_t a1)
{
  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  int8x16_t v2 = (int8x16_t)vrndmq_f32(vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)), v1));
  v1.f32[0] = (*(float *)v2.i32
             + (float)(*(float *)&v2.i32[1] + (float)(floorf(vmuls_lane_f32(0.25, *(float32x2_t *)v2.i8, 1)) * -4.0))
             * 256.0)
            / 1023.0;
  int32x2_t v3 = (int32x2_t)vextq_s8(v2, v2, 8uLL).u64[0];
  float32x2_t v4 = (float32x2_t)vrev64_s32(v3);
  v2.i32[0] = v3.i32[0];
  float32x4_t v5 = (float32x4_t)vdivq_f64(vmlaq_f64(vrndmq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v2.i8), (float64x2_t)xmmword_193959E00)), (float64x2_t)xmmword_193959E10, vcvtq_f64_f32(vmla_f32(v4, (float32x2_t)0xC1800000C2800000, vrndm_f32(vmul_f32(v4, (float32x2_t)0x3D8000003C800000))))), (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
  *(float32x2_t *)v5.f32 = vcvt_f32_f64((float64x2_t)v5);
  v5.i32[2] = v1.i32[0];
  float32x4_t v6 = vmulq_f32(vaddq_f32(v5, (float32x4_t)vdupq_n_s32(0xBEC0300C)), (float32x4_t)vdupq_n_s32(0x40006060u));
  float32x4_t v7 = vabsq_f32(v6);
  v1.i64[0] = 0x8000000080000000;
  v1.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  float32x4_t v15 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v6), (int8x16_t)vcgtzq_f32(v6)), vorrq_s8(vandq_s8((int8x16_t)v6, (int8x16_t)v1), _Q3), (int8x16_t)0);
  int8x16_t v16 = (int8x16_t)vmulq_f32(v6, (float32x4_t)vdupq_n_s32(0x3D9E8391u));
  simd_float4 v13 = (simd_float4)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3D558919u), (float32x4_t)vdupq_n_s32(0x3F72A76Eu), v7);
  v13.i32[3] = 0;
  *(void *)&double result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), v7), v16, (int8x16_t)vmulq_f32(v15, (float32x4_t)_simd_pow_f4(v13, (simd_float4)xmmword_19394C950))).u64[0];
  return result;
}

double cikernel::_ci_rgb10wide(float32x4_t a1)
{
  float32x4_t v1 = vmulq_f32(vaddq_f32(a1, (float32x4_t)vdupq_n_s32(0xBEC0300C)), (float32x4_t)vdupq_n_s32(0x40006060u));
  float32x4_t v2 = vabsq_f32(v1);
  v3.i64[0] = 0x8000000080000000;
  v3.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  float32x4_t v11 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v1), (int8x16_t)vcgtzq_f32(v1)), vorrq_s8(vandq_s8((int8x16_t)v1, v3), _Q3), (int8x16_t)0);
  int8x16_t v12 = (int8x16_t)vmulq_f32(v1, (float32x4_t)vdupq_n_s32(0x3D9E8391u));
  simd_float4 v9 = (simd_float4)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3D558919u), (float32x4_t)vdupq_n_s32(0x3F72A76Eu), v2);
  v9.i32[3] = 0;
  *(void *)&double result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), v2), v12, (int8x16_t)vmulq_f32(v11, (float32x4_t)_simd_pow_f4(v9, (simd_float4)xmmword_19394C950))).u64[0];
  return result;
}

double cikernel::_ci_bgr10wide(int32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vrev64q_s32(a1);
  float32x4_t v2 = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8(v1, v1, 0xCuLL), (float32x4_t)vdupq_n_s32(0xBEC0300C)), (float32x4_t)vdupq_n_s32(0x40006060u));
  float32x4_t v3 = vabsq_f32(v2);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  float32x4_t v12 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v2), (int8x16_t)vcgtzq_f32(v2)), vorrq_s8(vandq_s8((int8x16_t)v2, v4), _Q3), (int8x16_t)0);
  int8x16_t v13 = (int8x16_t)vmulq_f32(v2, (float32x4_t)vdupq_n_s32(0x3D9E8391u));
  simd_float4 v10 = (simd_float4)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3D558919u), (float32x4_t)vdupq_n_s32(0x3F72A76Eu), v3);
  v10.i32[3] = 0;
  *(void *)&double result = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), v3), v13, (int8x16_t)vmulq_f32(v12, (float32x4_t)_simd_pow_f4(v10, (simd_float4)xmmword_19394C950))).u64[0];
  return result;
}

double cikernel::_ci_to_rgb10wide(float32x4_t a1)
{
  float32x4_t v1 = vabsq_f32(a1);
  int8x16_t v9 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3B4D2E1Cu), v1);
  v2.i64[0] = 0x8000000080000000;
  v2.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v1.i32[3] = 0;
  *(void *)&double result = vaddq_f32(vmulq_f32((float32x4_t)vbslq_s8(v9, (int8x16_t)vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a1), (int8x16_t)vcgtzq_f32(a1)), vorrq_s8(vandq_s8((int8x16_t)a1, v2), _Q3), (int8x16_t)0), vmlaq_f32((float32x4_t)vdupq_n_s32(0xBD6147AE), (float32x4_t)vdupq_n_s32(0x3F870A3Du), (float32x4_t)_simd_pow_f4((simd_float4)v1, (simd_float4)xmmword_19394C960)))), (float32x4_t)vdupq_n_s32(0x3EFF3FD0u)), (float32x4_t)vdupq_n_s32(0x3EC0300Cu)).u64[0];
  return result;
}

double cikernel::_ci_to_bgr10wide(int32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vrev64q_s32(a1);
  float32x4_t v2 = (float32x4_t)vextq_s8(v1, v1, 0xCuLL);
  float32x4_t v3 = vabsq_f32(v2);
  int8x16_t v11 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3B4D2E1Cu), v3);
  v4.i64[0] = 0x8000000080000000;
  v4.i64[1] = 0x8000000080000000;
  __asm { FMOV            V3.4S, #1.0 }
  v3.i32[3] = 0;
  *(void *)&double result = vaddq_f32(vmulq_f32((float32x4_t)vbslq_s8(v11, (int8x16_t)vmulq_f32(v2, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)vmulq_f32((float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v2), (int8x16_t)vcgtzq_f32(v2)), vorrq_s8(vandq_s8((int8x16_t)v2, v4), _Q3), (int8x16_t)0), vmlaq_f32((float32x4_t)vdupq_n_s32(0xBD6147AE), (float32x4_t)vdupq_n_s32(0x3F870A3Du), (float32x4_t)_simd_pow_f4((simd_float4)v3, (simd_float4)xmmword_19394C960)))), (float32x4_t)vdupq_n_s32(0x3EFF3FD0u)), (float32x4_t)vdupq_n_s32(0x3EC0300Cu)).u64[0];
  return result;
}

double cikernel::_ci_swizzle_rgba8_to_rgb10widelinear(float32x4_t a1)
{
  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  int8x16_t v2 = (int8x16_t)vrndmq_f32(vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x437F0000u)), v1));
  v1.f32[0] = (*(float *)v2.i32
             + (float)(*(float *)&v2.i32[1] + (float)(floorf(vmuls_lane_f32(0.25, *(float32x2_t *)v2.i8, 1)) * -4.0))
             * 256.0)
            / 1023.0;
  int32x2_t v3 = (int32x2_t)vextq_s8(v2, v2, 8uLL).u64[0];
  float32x2_t v4 = (float32x2_t)vrev64_s32(v3);
  v2.i32[0] = v3.i32[0];
  float32x4_t v5 = (float32x4_t)vdivq_f64(vmlaq_f64(vrndmq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v2.i8), (float64x2_t)xmmword_193959E00)), (float64x2_t)xmmword_193959E10, vcvtq_f64_f32(vmla_f32(v4, (float32x2_t)0xC1800000C2800000, vrndm_f32(vmul_f32(v4, (float32x2_t)0x3D8000003C800000))))), (float64x2_t)vdupq_n_s64(0x408FF80000000000uLL));
  *(float32x2_t *)v5.f32 = vcvt_f32_f64((float64x2_t)v5);
  v5.i32[2] = v1.i32[0];
  *(void *)&double result = vmulq_f32(vaddq_f32(v5, (float32x4_t)vdupq_n_s32(0xBEC0300C)), (float32x4_t)vdupq_n_s32(0x40006060u)).u64[0];
  return result;
}

double cikernel::_ci_rgb10widelinear(float32x4_t a1)
{
  *(void *)&double result = vmulq_f32(vaddq_f32(a1, (float32x4_t)vdupq_n_s32(0xBEC0300C)), (float32x4_t)vdupq_n_s32(0x40006060u)).u64[0];
  return result;
}

double cikernel::_ci_bgr10widelinear(int32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vrev64q_s32(a1);
  *(void *)&double result = vmulq_f32(vaddq_f32((float32x4_t)vextq_s8(v1, v1, 0xCuLL), (float32x4_t)vdupq_n_s32(0xBEC0300C)), (float32x4_t)vdupq_n_s32(0x40006060u)).u64[0];
  return result;
}

double cikernel::_ci_to_rgb10widelinear(float32x4_t a1)
{
  *(void *)&double result = vaddq_f32(vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x3EFF3FD0u)), (float32x4_t)vdupq_n_s32(0x3EC0300Cu)).u64[0];
  return result;
}

double cikernel::_ci_to_bgr10widelinear(int32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vrev64q_s32(a1);
  *(void *)&double result = vaddq_f32(vmulq_f32((float32x4_t)vextq_s8(v1, v1, 0xCuLL), (float32x4_t)vdupq_n_s32(0x3EFF3FD0u)), (float32x4_t)vdupq_n_s32(0x3EC0300Cu)).u64[0];
  return result;
}

double cikernel::_ci_combine_r(int32x4_t a1, int32x4_t a2)
{
  *(void *)&double result = vzip1q_s32(a1, a2).u64[0];
  return result;
}

double cikernel::_ci_combine_gray(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4 = vmulq_f32(a1, (float32x4_t)xmmword_193950AB0);
  *(float32x2_t *)v4.f32 = vadd_f32(*(float32x2_t *)v4.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v4, (int8x16_t)v4, 8uLL));
  int8x16_t v5 = (int8x16_t)vmulq_f32(a2, (float32x4_t)xmmword_193950AB0);
  *(float32x2_t *)v5.i8 = vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  int8x16_t v6 = (int8x16_t)vmulq_f32(a3, (float32x4_t)xmmword_193950AB0);
  *(float32x2_t *)v6.i8 = vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  int8x16_t v7 = (int8x16_t)vmulq_f32(a4, (float32x4_t)xmmword_193950AB0);
  *(int32x2_t *)v8.f32 = vzip1_s32(*(int32x2_t *)v4.f32, *(int32x2_t *)v5.i8);
  v8.i32[2] = v6.i32[0];
  *(float32x2_t *)v7.i8 = vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL));
  v8.i32[3] = v7.i32[0];
  *(int32x2_t *)v4.f32 = vzip2_s32(*(int32x2_t *)v4.f32, *(int32x2_t *)v5.i8);
  v4.i64[1] = __PAIR64__(v7.u32[1], vdup_lane_s32(*(int32x2_t *)v6.i8, 1).u32[0]);
  *(void *)&double result = vaddq_f32(v8, v4).u64[0];
  return result;
}

double cikernel::_ci_combine_a(int32x4_t a1, int32x4_t a2)
{
  *(void *)&double result = vuzp2q_s32(vuzp2q_s32(a1, a2), a1).u64[0];
  return result;
}

double cikernel::_ci_combine_rg(int64x2_t a1, int64x2_t a2)
{
  *(void *)&double result = vzip1q_s64(a1, a2).u64[0];
  return result;
}

double cikernel::_ci_combine_r16(float a1, float a2)
{
  float v2 = 65535.0 * a1;
  v3.f32[0] = v2 + (float)(floorf(v2 * 0.0039062) * -256.0);
  float v4 = 65535.0 * a2;
  *(float *)&unsigned int v5 = v4 + (float)(floorf(v4 * 0.0039062) * -256.0);
  v3.f32[1] = (float)(v2 - v3.f32[0]) * 0.0039062;
  v3.i64[1] = __PAIR64__((float)(v4 - *(float *)&v5) * 0.0039062, v5);
  *(void *)&double result = vdivq_f32(v3, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_combine_a16(float32x4_t a1, float32x4_t a2)
{
  float v2 = vmuls_lane_f32(65535.0, a1, 3);
  v3.f32[0] = v2 + (float)(floorf(v2 * 0.0039062) * -256.0);
  float v4 = vmuls_lane_f32(65535.0, a2, 3);
  *(float *)&unsigned int v5 = v4 + (float)(floorf(v4 * 0.0039062) * -256.0);
  v3.f32[1] = (float)(v2 - v3.f32[0]) * 0.0039062;
  v3.i64[1] = __PAIR64__((float)(v4 - *(float *)&v5) * 0.0039062, v5);
  *(void *)&double result = vdivq_f32(v3, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_combine_l16(float32x4_t a1, float32x4_t a2)
{
  int8x16_t v2 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_193950AB0);
  *(float *)v2.i32 = vaddv_f32(vadd_f32(*(float32x2_t *)v2.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)))
                   * 65535.0;
  v3.f32[0] = *(float *)v2.i32 + (float)(floorf(*(float *)v2.i32 * 0.0039062) * -256.0);
  int8x16_t v4 = (int8x16_t)vmulq_f32(a2, (float32x4_t)xmmword_193950AB0);
  *(float *)v4.i32 = vaddv_f32(vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)))
                   * 65535.0;
  *(float *)&unsigned int v5 = *(float *)v4.i32 + (float)(floorf(*(float *)v4.i32 * 0.0039062) * -256.0);
  v3.f32[1] = (float)(*(float *)v2.i32 - v3.f32[0]) * 0.0039062;
  v3.i64[1] = __PAIR64__((float)(*(float *)v4.i32 - *(float *)&v5) * 0.0039062, v5);
  *(void *)&double result = vdivq_f32(v3, (float32x4_t)vdupq_n_s32(0x437F0000u)).u64[0];
  return result;
}

double cikernel::_ci_combine_la(float32x4_t a1)
{
  int8x16_t v1 = (int8x16_t)vmulq_f32(a1, (float32x4_t)xmmword_193950AB0);
  *(float32x2_t *)v1.i8 = vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1, v1, 8uLL));
  v1.i32[0] = vadd_f32(*(float32x2_t *)v1.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1.i8, 1)).u32[0];
  v1.i32[1] = a1.i32[3];
  return *(double *)v1.i64;
}

FILE *__cdecl open_memstream(char **__bufp, size_t *__sizep)
{
  if (__bufp && __sizep)
  {
    *__bufp = 0;
    *__sizep = 0;
    double result = (FILE *)malloc_type_calloc(1uLL, 0x28uLL, 0x10900400014C7C5uLL);
    if (!result) {
      return result;
    }
    unsigned int v5 = result;
    result->_p = 0;
    result->_r = 4096;
    int8x16_t v6 = malloc_type_calloc(0x1000uLL, 1uLL, 0xC99D2AC9uLL);
    *(void *)&v5->_flags = v6;
    if (v6)
    {
      v5->_bf._base = (unsigned __int8 *)__bufp;
      *(void *)&v5->_bf._size_t size = __sizep;
      double result = funopen(v5, (int (__cdecl *)(void *, char *, int))memstream_read, (int (__cdecl *)(void *, const char *, int))memstream_write, (fpos_t (__cdecl *)(void *, fpos_t, int))memstream_seek, (int (__cdecl *)(void *))memstream_close);
      if (result) {
        return result;
      }
      free(*(void **)&v5->_flags);
    }
    free(v5);
    return 0;
  }
  else
  {
    int8x16_t v7 = __error();
    double result = 0;
    *int8x16_t v7 = 22;
  }
  return result;
}

size_t memstream_read(uint64_t a1, void *__dst, int a3)
{
  float32x4_t v3 = *(const void **)(a1 + 16);
  if (v3)
  {
    int v5 = *(_DWORD *)(a1 + 4) - *(_DWORD *)a1;
    if (v5 >= a3) {
      size_t v6 = a3;
    }
    else {
      size_t v6 = v5;
    }
    if ((int)v6 < 1)
    {
      return 0;
    }
    else
    {
      memcpy(__dst, v3, v6);
      *(_DWORD *)a1 += v6;
    }
  }
  else
  {
    *__error() = 12;
    return 0xFFFFFFFFLL;
  }
  return v6;
}

uint64_t memstream_write(int *a1, void *__src, uint64_t a3)
{
  uint64_t v3 = *((void *)a1 + 2);
  if (!v3)
  {
    *__error() = 12;
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = a3;
  int v7 = *a1;
  int v8 = *a1 + a3;
  if (a1[2] <= v8)
  {
    if ((memstream_grow((uint64_t)a1, v8) & 0x80000000) == 0)
    {
      uint64_t v3 = *((void *)a1 + 2);
      int v7 = *a1;
      goto LABEL_5;
    }
    return 0xFFFFFFFFLL;
  }
LABEL_5:
  memcpy((void *)(v3 + v7), __src, (int)v4);
  int v9 = a1[1];
  uint64_t v10 = *a1 + (uint64_t)(int)v4;
  *a1 = v10;
  if (v9 < (int)v10)
  {
    a1[1] = v10;
    **((void **)a1 + 4) = v10;
    *(unsigned char *)(*((void *)a1 + 2) + v10) = 0;
    int v9 = a1[1];
  }
  if (v9 >= a1[2]) {
    memstream_write_cold_2();
  }
  if (*(unsigned char *)(*((void *)a1 + 2) + v9)) {
    memstream_write_cold_1();
  }
  return v4;
}

uint64_t memstream_seek(int *a1, uint64_t a2, int a3)
{
  if (!*((void *)a1 + 2))
  {
    int v6 = 12;
LABEL_18:
    *__error() = v6;
    return -1;
  }
  uint64_t v3 = a2;
  if (a3)
  {
    if (a3 == 2)
    {
      uint64_t v5 = a1[1];
    }
    else
    {
      if (a3 != 1)
      {
LABEL_17:
        int v6 = 22;
        goto LABEL_18;
      }
      uint64_t v5 = *a1;
    }
    uint64_t v3 = v5 + a2;
  }
  if (v3 < 0) {
    goto LABEL_17;
  }
  if (v3 >= a1[2]) {
    memstream_grow((uint64_t)a1, v3);
  }
  *a1 = v3;
  int v7 = a1[1];
  if (v7 < (int)v3)
  {
    a1[1] = v3;
    **((void **)a1 + 4) = (int)v3;
    int v7 = v3;
  }
  if (v7 >= a1[2] || *(unsigned char *)(*((void *)a1 + 2) + v7)) {
    memstream_seek_cold_1();
  }
  return v3;
}

uint64_t memstream_close(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    **(void **)(a1 + 24) = v1;
    int v2 = *(_DWORD *)(a1 + 8);
    uint64_t v3 = *(int *)(a1 + 4);
    **(void **)(a1 + 32) = v3;
    if ((int)v3 >= v2) {
      memstream_close_cold_1();
    }
    *(unsigned char *)(*(void *)(a1 + 16) + v3) = 0;
    free((void *)a1);
    return 0;
  }
  else
  {
    free((void *)a1);
    *__error() = 12;
    return 0xFFFFFFFFLL;
  }
}

void stream_to_file(FILE *a1, uint64_t a2)
{
  size_t v6 = 0;
  __bufp = 0;
  uint64_t v4 = open_memstream(&__bufp, &v6);
  if (v4)
  {
    uint64_t v5 = v4;
    (*(void (**)(uint64_t, FILE *))(a2 + 16))(a2, v4);
    fclose(v5);
    fwrite(__bufp, 1uLL, v6, a1);
    fflush(a1);
    free(__bufp);
  }
}

CFStringRef stream_to_string(uint64_t a1)
{
  size_t v6 = 0;
  __bufp = 0;
  int v2 = open_memstream(&__bufp, &v6);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  (*(void (**)(uint64_t, FILE *))(a1 + 16))(a1, v2);
  fclose(v3);
  CFStringRef v4 = CFStringCreateWithCString(0, __bufp, 0x8000100u);
  free(__bufp);
  return v4;
}

uint64_t memstream_grow(uint64_t a1, int a2)
{
  uint64_t v3 = *(void **)(a1 + 16);
  if (v3)
  {
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
    if ((int)v4 > a2) {
      return 0;
    }
    do
      uint64_t v4 = 2 * (int)v4;
    while ((int)v4 <= a2);
    size_t v6 = malloc_type_realloc(v3, (int)v4, 0xEA50944CuLL);
    if (v6)
    {
      *(void *)(a1 + 16) = v6;
      **(void **)(a1 + 24) = v6;
      bzero((void *)(*(void *)(a1 + 16) + *(int *)(a1 + 8)), v4 - *(int *)(a1 + 8));
      uint64_t result = 0;
      *(_DWORD *)(a1 + 8) = v4;
      return result;
    }
    int v7 = *(void **)(a1 + 16);
    if (v7) {
      free(v7);
    }
    *(void *)(a1 + 16) = 0;
    **(void **)(a1 + 24) = 0;
    *(_DWORD *)(a1 + 4) = 0;
    *(_DWORD *)(a1 + 8) = 0;
  }
  *__error() = 12;
  return 0xFFFFFFFFLL;
}

uint64_t CI::AffineNode::output_format(CI::AffineNode *this)
{
  uint64_t result = CI::Affine::isOrientationWithIntegralTranslation((CI::AffineNode *)((char *)this + 56));
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 312);
    return v3();
  }
  return result;
}

uint64_t CI::AffineNode::print_for_graph_core(double *a1, FILE *__stream, uint64_t a3, int a4)
{
  if (a4) {
    return fprintf(__stream, "[%g %g %g %g %g %g]");
  }
  fprintf(__stream, "%c%g  %g  %g", 10, a1[7], a1[8], a1[11]);
  return fprintf(__stream, "%c%g  %g  %g");
}

void CI::AffineNode::~AffineNode(CI::AffineNode *this)
{
  *((void *)this + 6) = &unk_1EE45AC60;
  atomic_fetch_add(&dword_1EB466E78[26], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  uint64_t vars8;

  *((void *)this + 6) = &unk_1EE45AC60;
  atomic_fetch_add(&dword_1EB466E78[26], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::AffineNode::shape_for_graphviz(CI::AffineNode *this)
{
  return 2;
}

uint64_t CI::AffineNode::color_for_graphviz(CI::AffineNode *this)
{
  return 5;
}

uint64_t CI::AffineNode::may_be_extended_range(CI::AffineNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 256))();
}

uint64_t CI::AffineNode::output_is_luma(CI::AffineNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::AffineNode *))(*(void *)this + 264))(this);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 288);
    return v3();
  }
  return result;
}

uint64_t CI::AffineNode::output_depth(CI::AffineNode *this)
{
  BOOL isOrientationWithIntegralTranslation = CI::Affine::isOrientationWithIntegralTranslation((CI::AffineNode *)((char *)this + 56));
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 5) + 304))(*((void *)this + 5));
  if (!isOrientationWithIntegralTranslation)
  {
    if ((int)result < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 5) + 304);
      return v4();
    }
  }
  return result;
}

uint64_t non-virtual thunk to'CI::AffineNode::type(CI::AffineNode *this)
{
  return 28;
}

void non-virtual thunk to'CI::AffineNode::~AffineNode(CI::AffineNode *this)
{
  *(void *)this = &unk_1EE45AC60;
  atomic_fetch_add(&dword_1EB466E78[26], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::AffineNode *)((char *)this - 48));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45AC60;
  atomic_fetch_add(&dword_1EB466E78[26], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::AffineNode *)((char *)this - 48));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::Node::type(CI::Node *this)
{
  return 27;
}

uint64_t CI::Node::print_for_graph_core(uint64_t a1, FILE *a2)
{
  uint64_t v3 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 104))(a1);

  return fputs(v3, a2);
}

uint64_t CI::NodeWithChild::output_depth(CI::NodeWithChild *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 304))();
}

uint64_t CI::InstanceCounted<(CI::Type)28>::type()
{
  return 28;
}

void *CI::InstanceCounted<(CI::Type)28>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AC60;
  atomic_fetch_add(&dword_1EB466E78[26], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)28>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AC60;
  atomic_fetch_add(&dword_1EB466E78[26], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

double ___ZN2CIL18appendAffineToNodeEPNS_4NodeENS_6AffineE_block_invoke(uint64_t a1, double a2, double a3, double a4, double a5)
{
  return CI::Affine::applyToRect((CI::Affine *)(a1 + 32), *(CGRect *)&a2);
}

float32x2_t cikernel::_ci_affine(CI *a1, float32x4_t a2, float32x4_t a3)
{
  v3.i64[0] = *(void *)CI::getDC(a1);
  v3.i64[1] = 1065353216;
  int8x16_t v4 = (int8x16_t)vmulq_f32(a2, v3);
  *(float32x2_t *)v4.i8 = vadd_f32(*(float32x2_t *)v4.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL));
  int8x16_t v5 = (int8x16_t)vmulq_f32(a3, v3);
  *(float32x2_t *)v5.i8 = vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  return vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v5.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v5.i8));
}

void CI::CGNode::CGNode(CI::Node *a1)
{
}

{
  CI::CGNode::CGNode(a1);
}

CFStringRef CI::cacheID(CI *this, CGImage *a2)
{
  uint64_t Identifier = CGImageGetIdentifier();
  CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"CGImageRef %d", Identifier);
  CFAutorelease(v3);
  return v3;
}

void CI::CGNode::~CGNode(CI::CGNode *this)
{
  *(void *)this = &unk_1EE45DCB8;
  *((void *)this + 5) = &unk_1EE45DE78;
  int v2 = (CI::CGNode *)((char *)this + 56);
  *((void *)this + 7) = &unk_1EE45DEA0;
  CI::CGNode::release_resources((CGImageRef *)this);
  CI::Tileable::~Tileable(v2);
  *((void *)this + 5) = &unk_1EE45AC88;
  atomic_fetch_add(&dword_1EB466E78[27], 0xFFFFFFFF);

  CI::Node::~Node(this);
}

{
  uint64_t vars8;

  CI::CGNode::~CGNode(this);

  JUMPOUT(0x1997023B0);
}

void CI::Tileable::~Tileable(CI::Tileable *this)
{
  *(void *)this = &unk_1EE45EC10;
  int v2 = (const void *)*((void *)this + 4);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 4) = 0;
  CFStringRef v3 = (void **)((char *)this + 8);
  std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v3);
}

void non-virtual thunk to'CI::CGNode::~CGNode(CI::CGNode *this)
{
}

{
  uint64_t vars8;

  CI::CGNode::~CGNode((CI::CGNode *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

void CI::CGNode::release_resources(CGImageRef *this)
{
  CGImageRelease(this[13]);
  int v2 = this[20];
  if (v2) {
    dispatch_release(v2);
  }
  this[13] = 0;
  this[20] = 0;
  CGImageRef v3 = this[11];
  if (v3) {
    CFRelease(v3);
  }
  this[11] = 0;
}

void CI::Tileable::updateCacheIdentity(CI::Tileable *this, CFTypeRef cf)
{
  if (cf) {
    CFRetain(cf);
  }
  int8x16_t v4 = (const void *)*((void *)this + 4);
  if (v4) {
    CFRelease(v4);
  }
  *((void *)this + 4) = cf;
}

void CI::CGNode::set_image(uint64_t a1, CGImageRef image, uint64_t a3, NSObject *a4)
{
  CGImageRetain(image);
  CGImageRelease(*(CGImageRef *)(a1 + 104));
  if (a4) {
    dispatch_retain(a4);
  }
  int v9 = *(NSObject **)(a1 + 160);
  if (v9) {
    dispatch_release(v9);
  }
  *(void *)(a1 + 104) = image;
  *(void *)(a1 + 112) = a3;
  *(void *)(a1 + 160) = a4;
  CFStringRef v10 = CI::cacheID(image, v8);

  CI::Tileable::updateCacheIdentity((CI::Tileable *)(a1 + 56), v10);
}

CGImageRef CI::CGNode::cgImageForROI@<X0>(CGImageRef *this@<X0>, const CGRect *a2@<X1>, CGImageRef *a3@<X8>)
{
  CGImageRef result = CGImageCreateWithImageInRect(this[13], *a2);
  *a3 = result;
  return result;
}

void CI::CGNode::tileRect(CI::CGNode *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  int v8 = (void *)*((void *)this + 8);
  int v9 = (void *)*((void *)this + 9);
  if (v8 == v9
    || 0xAAAAAAAAAAAAAAABLL * (v9 - v8) <= a2
    || (uint64_t v10 = v8[1], *v8 == v10)
    || 0xAAAAAAAAAAAAAAABLL * ((v10 - *v8) >> 3) <= a3)
  {
    long long v31 = ci_logger_render();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
LABEL_34:
      *(void *)(a4 + 16) = 0;
      goto LABEL_35;
    }
    long long v33 = (uint64_t *)*((void *)this + 8);
    long long v32 = (uint64_t *)*((void *)this + 9);
    if (v33 == v32)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v32 - v33);
      uint64_t v36 = *v33;
      uint64_t v35 = v33[1];
      if (v36 != v35)
      {
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v36) >> 3);
        goto LABEL_42;
      }
    }
    unint64_t v37 = 0;
LABEL_42:
    int v38 = 134218752;
    unint64_t v39 = a2;
    __int16 v40 = 2048;
    unint64_t v41 = a3;
    __int16 v42 = 2048;
    unint64_t v43 = v34;
    __int16 v44 = 2048;
    unint64_t v45 = v37;
    _os_log_error_impl(&dword_193671000, v31, OS_LOG_TYPE_ERROR, "Request for a tile outside of expected indexes. Requested tile %zu %zu but only have %zu tiles horizontally and %zu tile vertically", (uint8_t *)&v38, 0x2Au);
    goto LABEL_34;
  }
  uint64_t v11 = v8[3 * a2] + 24 * a3;
  int v13 = *(_DWORD *)v11;
  int v12 = *(_DWORD *)(v11 + 4);
  uint64_t v15 = *(void *)(v11 + 8);
  uint64_t v14 = *(void *)(v11 + 16);
  if (v13 == 0x7FFFFFFF && v12 == 0x7FFFFFFF && v15 == 0 && v14 == 0)
  {
LABEL_32:
    *(void *)(a4 + 16) = 0;
LABEL_35:
    *(_OWORD *)a4 = IRectNull;
    return;
  }
  uint64_t v20 = *((void *)this + 16);
  uint64_t v19 = *((void *)this + 17);
  if (v13 != -2147483647 || v12 != -2147483647 || v15 != 0xFFFFFFFFLL || v14 != 0xFFFFFFFFLL)
  {
    int v24 = v13 & ~(v13 >> 31);
    int v25 = v13 + v15;
    if (v25 >= (int)v20) {
      int v25 = *((void *)this + 16);
    }
    BOOL v26 = __OFSUB__(v25, v24);
    int v27 = v25 - v24;
    if (v27 < 0 == v26)
    {
      int v28 = v12 & ~(v12 >> 31);
      int v29 = v12 + v14;
      if (v29 >= (int)v19) {
        int v29 = *((void *)this + 17);
      }
      BOOL v26 = __OFSUB__(v29, v28);
      int v30 = v29 - v28;
      if (v30 < 0 == v26)
      {
        *(_DWORD *)a4 = v24;
        *(_DWORD *)(a4 + 4) = v28;
        *(void *)(a4 + 8) = v27;
        *(void *)(a4 + 16) = v30;
        return;
      }
    }
    goto LABEL_32;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v20;
  *(void *)(a4 + 16) = v19;
}

void non-virtual thunk to'CI::CGNode::tileRect(CI::CGNode *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t CI::CGNode::surfaceFormat(CI::CGNode *this)
{
  if (!CGImageGetImageProvider()) {
    return 0;
  }
  uint64_t ImageProvider = CGImageGetImageProvider();
  if (!CI::format_from_CGImageProvider(ImageProvider)) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 12);

  return CI::PixelFormatType_approx_from_format(v3);
}

uint64_t non-virtual thunk to'CI::CGNode::surfaceFormat(CI::CGNode *this)
{
  return CI::CGNode::surfaceFormat((CI::CGNode *)((char *)this - 56));
}

__IOSurface *CI::CGNode::tileSurface(CI::CGNode *this, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  int8x16_t v5 = this;
  memset(v13, 0, sizeof(v13));
  (*(void (**)(void *__return_ptr))(*(void *)this + 416))(v13);
  uint64_t v6 = *((void *)v5 + 7);
  int8x16_t v5 = (CI::CGNode *)((char *)v5 + 56);
  int v7 = *((_DWORD *)v5 + 10);
  int v8 = (CGImage *)*((void *)v5 + 6);
  int v9 = *((_DWORD *)v5 - 2);
  BOOL v10 = *((unsigned char *)v5 + 97) == 0;
  uint64_t v11 = (*(uint64_t (**)(CI::CGNode *, void))(v6 + 24))(v5, 0);
  return CI::ioSurfaceFromCGImage(v7, v8, v9, (uint64_t)v13, v10, v11, *((void *)v5 + 13), (uint64_t)a4);
}

__IOSurface *CI::ioSurfaceFromCGImage(int a1, CGImageRef image, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v16 = *(_DWORD *)a4;
  int v17 = *(_DWORD *)(a4 + 4);
  unint64_t v18 = *(void *)(a4 + 8);
  unint64_t v19 = *(void *)(a4 + 16);
  if (*(_DWORD *)a4 == -2147483647)
  {
    if (v17 != -2147483647 || v18 != 0xFFFFFFFF || v19 != 0xFFFFFFFF) {
      goto LABEL_21;
    }
    long long v23 = (double *)MEMORY[0x1E4F1DB10];
LABEL_23:
    double v26 = *v23;
    double v27 = v23[1];
    double v28 = v23[2];
    double v29 = v23[3];
    goto LABEL_24;
  }
  if (v16 == 0x7FFFFFFF && v17 == 0x7FFFFFFF && v18 == 0 && v19 == 0)
  {
    long long v23 = (double *)MEMORY[0x1E4F1DB20];
    goto LABEL_23;
  }
LABEL_21:
  double v26 = (double)v16;
  double v27 = (double)v17;
  double v28 = (double)v18;
  double v29 = (double)v19;
LABEL_24:
  CGFloat Width = (double)CGImageGetWidth(image);
  v46.size.double height = (double)CGImageGetHeight(image);
  v46.origin.double x = 0.0;
  v46.origin.double y = 0.0;
  v44.origin.double x = v26;
  v44.origin.double y = v27;
  v44.size.double width = v28;
  v44.size.double height = v29;
  v46.size.double width = Width;
  CGRect v45 = CGRectIntersection(v44, v46);
  long long v31 = CGImageCreateWithImageInRect(image, v45);
  uint64_t ImageProvider = CGImageGetImageProvider();
  CGImageProviderRetain();
  if (!ImageProvider
    || (int v33 = CI::format_from_CGImageProvider(ImageProvider)) == 0
    || (v34 = v33, uint64_t v35 = CI::PixelFormatType_approx_from_format(a3), !v35))
  {
LABEL_33:
    SurfaceFromCacheAndFill = 0;
    goto LABEL_34;
  }
  if (a5)
  {
    long long v42 = *(_OWORD *)a4;
    uint64_t v43 = *(void *)(a4 + 16);
    v39[0] = MEMORY[0x1E4F143A8];
    v39[1] = 0x40000000;
    v39[2] = ___ZN2CIL20ioSurfaceFromCGImageENS_10ImageIndexEP7CGImageNS_11PixelFormatERK5IRectbPK10__CFStringP16dispatch_queue_sRy_block_invoke;
    unsigned __int16 v39[3] = &__block_descriptor_tmp_17;
    v39[4] = a8;
    int64x2_t v39[5] = a4;
    v39[6] = ImageProvider;
    int v40 = v34;
    int v41 = a3;
    SurfaceFromCacheAndFill = (__IOSurface *)GetSurfaceFromCacheAndFill(&v42, v35, 0, a1, a6, a7, (uint64_t)v39);
    if (!SurfaceFromCacheAndFill)
    {
LABEL_31:
      unint64_t v37 = ci_logger_render();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_FAULT)) {
        CI::ioSurfaceFromCGImage();
      }
      goto LABEL_33;
    }
  }
  else
  {
    SurfaceFromCacheAndFill = CreateSurface((__CVBuffer *)*(unsigned int *)(a4 + 8), (__CVBuffer *)*(unsigned int *)(a4 + 16), (void *)0x10, v35, 0);
    CI::fillBlock(ImageProvider, v34, a3, SurfaceFromCacheAndFill);
    if (!SurfaceFromCacheAndFill) {
      goto LABEL_31;
    }
  }
LABEL_34:
  CGImageProviderRelease();
  CGImageRelease(v31);
  return SurfaceFromCacheAndFill;
}

__IOSurface *non-virtual thunk to'CI::CGNode::tileSurface(CI::CGNode *this, unint64_t a2, unint64_t a3, unint64_t *a4)
{
  return CI::CGNode::tileSurface((CI::CGNode *)((char *)this - 56), a2, a3, a4);
}

void CI::CGNode::surfaceForROI(uint64_t a1@<X0>, uint64_t a2@<X1>, CGFloat *a3@<X2>, uint64_t a4@<X3>, __IOSurface **a5@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (CI_VERBOSE_SIGNPOSTS())
  {
    BOOL v10 = ci_signpost_log_render();
    os_signpost_id_t v11 = *(int *)(a1 + 36) | (unint64_t)((*(uint64_t (**)(uint64_t))(*(void *)a2 + 272))(a2) << 32);
    if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v10))
    {
      CGFloat v12 = *a3;
      uint64_t v13 = *((void *)a3 + 1);
      uint64_t v14 = *((void *)a3 + 2);
      uint64_t v15 = *((void *)a3 + 3);
      *(_DWORD *)int buf = 134218752;
      *(CGFloat *)unint64_t v37 = v12;
      *(_WORD *)&v37[8] = 2048;
      *(void *)&v37[10] = v13;
      __int16 v38 = 2048;
      uint64_t v39 = v14;
      __int16 v40 = 2048;
      uint64_t v41 = v15;
      _os_signpost_emit_with_name_impl(&dword_193671000, v10, OS_SIGNPOST_INTERVAL_BEGIN, v11, "surface_for_roi_from_cg", "[%g %g %g %g]", buf, 0x2Au);
    }
  }
  uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 272))(a2);
  TimerBase::TimerBase((uint64_t)buf, v16, *(_DWORD *)(a1 + 36), (uint64_t)"surface_for_roi_from_cg", 22);
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v35 = 0;
  int v18 = *(_DWORD *)(a1 + 96);
  unint64_t v19 = *(CGImage **)(a1 + 104);
  int v20 = *(_DWORD *)(a1 + 48);
  CGFloat v21 = *a3;
  CGFloat v22 = a3[1];
  CGFloat v23 = a3[2];
  CGFloat v24 = a3[3];
  v43.origin.double x = *a3;
  v43.origin.double y = v22;
  v43.size.double width = v23;
  v43.size.unint64_t height = v24;
  if (CGRectIsNull(v43))
  {
    unint64_t height = 0;
    long long v33 = IRectNull;
  }
  else
  {
    v44.origin.double x = v21;
    v44.origin.double y = v22;
    v44.size.double width = v23;
    v44.size.unint64_t height = v24;
    if (CGRectIsInfinite(v44))
    {
      long long v33 = IRectInfinite;
      unint64_t height = 0xFFFFFFFFLL;
    }
    else
    {
      v45.origin.double x = v21;
      v45.origin.double y = v22;
      v45.size.double width = v23;
      v45.size.unint64_t height = v24;
      CGRect v46 = CGRectInset(v45, 0.000001, 0.000001);
      CGRect v47 = CGRectIntegral(v46);
      LODWORD(v33) = (int)v47.origin.x;
      DWORD1(v33) = (int)v47.origin.y;
      *((void *)&v33 + 1) = (unint64_t)v47.size.width;
      unint64_t height = (unint64_t)v47.size.height;
    }
  }
  uint64_t v26 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  BOOL v27 = *(unsigned char *)(v25 + 97) == 0;
  uint64_t v28 = (*(uint64_t (**)(uint64_t, void))(v26 + 24))(v25, 0);
  double v29 = CI::ioSurfaceFromCGImage(v18, v19, v20, (uint64_t)&v33, v27, v28, *(void *)(v25 + 104), (uint64_t)&v35);
  *(double *)a4 = *(double *)a4 + CFAbsoluteTimeGetCurrent() - Current;
  *(void *)(a4 + 8) += (unint64_t)a3[3] * (unint64_t)a3[2];
  if (v29) {
    CFRetain(v29);
  }
  *a5 = v29;
  if (CI_VERBOSE_SIGNPOSTS())
  {
    int v30 = ci_signpost_log_render();
    os_signpost_id_t v31 = *(void *)&v37[4];
    if ((unint64_t)(*(void *)&v37[4] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      long long v32 = v30;
      if (os_signpost_enabled(v30))
      {
        LOWORD(v33) = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v32, OS_SIGNPOST_INTERVAL_END, v31, "surface_for_roi_from_cg", "", (uint8_t *)&v33, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)buf);
}

uint64_t CI::CGNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  fwrite("CGImageRef", 0xAuLL, 1uLL, __stream);
  if (*(void *)(a1 + 112))
  {
    fprintf(__stream, " content:%016llX");
  }
  else if (*(void *)(a1 + 104))
  {
    fprintf(__stream, " %p", *(const void **)(a1 + 104));
    CGImageGetIdentifier();
    fprintf(__stream, "(%d)");
  }
  if (*(unsigned char *)(a1 + 52)) {
    int8x16_t v4 = "s";
  }
  else {
    int8x16_t v4 = "";
  }
  int8x16_t v5 = CI::name_for_format(*(_DWORD *)(a1 + 120));
  uint64_t result = fprintf(__stream, " %s%s", v4, v5);
  int v7 = "alpha_one";
  switch(*(_DWORD *)(a1 + 144))
  {
    case 0:
      goto LABEL_14;
    case 1:
      goto LABEL_13;
    case 2:
      int v7 = "alpha_unpremul";
      goto LABEL_13;
    case 4:
      int v7 = "alpha_premul-clear-edges";
      goto LABEL_13;
    case 6:
      int v7 = "alpha_unpremul-clear-edges";
      goto LABEL_13;
    default:
      int v7 = "alpha_unknown";
LABEL_13:
      uint64_t result = fprintf(__stream, " %s", v7);
LABEL_14:
      int v8 = *(_DWORD *)(a1 + 148);
      if (v8)
      {
        if (v8 == 1) {
          int v9 = "edge_clamp";
        }
        else {
          int v9 = "edge_unknown";
        }
        uint64_t result = fprintf(__stream, " %s", v9);
      }
      if (*(unsigned char *)(a1 + 152)) {
        uint64_t result = fwrite(" nearestsampling", 0x10uLL, 1uLL, __stream);
      }
      if (*(unsigned char *)(a1 + 153))
      {
        return fwrite(" cache", 6uLL, 1uLL, __stream);
      }
      return result;
  }
}

uint64_t CI::CGNode::add_args_to_hash(CI::CGNode *this, CI::XXHashHelper *a2)
{
  if (*((void *)this + 14))
  {
    uint64_t __src = *((void *)this + 14);
    int8x16_t v4 = a2;
    size_t v5 = 8;
  }
  else
  {
    LODWORD(__src) = CGImageGetIdentifier();
    int8x16_t v4 = a2;
    size_t v5 = 4;
  }
  XXH64_update((uint64_t)v4, (char *)&__src, v5);
  LODWORD(__src) = *((_DWORD *)this + 36);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((_DWORD *)this + 37);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 152);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 52);
  return XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
}

double CI::CGNode::find_matching_roi(CI::CGNode *this, const CGRect *a2)
{
  int8x16_t v4 = (CGRect **)CI::Node::rois(this);
  CGFloat x = a2->origin.x;
  CGFloat y = a2->origin.y;
  CGFloat width = a2->size.width;
  CGFloat height = a2->size.height;
  v16.origin.CGFloat x = (*(double (**)(CI::CGNode *))(*(void *)this + 168))(this);
  v16.origin.CGFloat y = v9;
  v16.size.CGFloat width = v10;
  v16.size.CGFloat height = v11;
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  CGRect v15 = CGRectIntersection(v14, v16);

  return CI::SerialRectArray::smallestContainingRect(v4, v15);
}

double CI::SerialRectArray::smallestContainingRect(CGRect **this, CGRect a2)
{
  CGFloat x = a2.origin.x;
  double v13 = *MEMORY[0x1E4F1DB20];
  int v3 = *this;
  if (*this != this[1])
  {
    CGFloat height = a2.size.height;
    CGFloat width = a2.size.width;
    CGFloat y = a2.origin.y;
    double v8 = -1.0;
    do
    {
      v14.origin.CGFloat x = x;
      v14.origin.CGFloat y = y;
      v14.size.CGFloat width = width;
      v14.size.CGFloat height = height;
      if (CGRectContainsRect(*v3, v14))
      {
        double v9 = v3->size.width;
        double v10 = v3->size.height;
        if (v8 < 0.0 || v9 * v10 < v8)
        {
          double v13 = v3->origin.x;
          double v8 = v9 * v10;
        }
      }
      int v3 = (CGRect *)((char *)v3 + 120);
    }
    while (v3 != this[1]);
  }
  return v13;
}

void CI::CGNode::add_roi(CI::CGNode *this, unint64_t a2, unint64_t a3, CGRect a4, const CI::parentROI *a5)
{
  CGFloat height = a4.size.height;
  CGFloat width = a4.size.width;
  CGFloat y = a4.origin.y;
  CGFloat x = a4.origin.x;
  if (CGRectIsEmpty(a4))
  {
    double v13 = this;
    unint64_t v14 = a2;
    unint64_t v15 = a3;
    double v16 = x;
    double v17 = y;
    double v18 = width;
    double v19 = height;
    goto LABEL_66;
  }
  v67.origin.CGFloat x = (*(double (**)(CI::CGNode *))(*(void *)this + 168))(this);
  CGFloat v20 = v67.origin.x;
  CGFloat v21 = v67.origin.y;
  CGFloat v22 = v67.size.width;
  CGFloat v23 = v67.size.height;
  if (CGRectIsNull(v67))
  {
    unint64_t v24 = 0;
    unint64_t v25 = 0;
    int v26 = 0x7FFFFFFF;
    int v27 = 0x7FFFFFFF;
  }
  else
  {
    v68.origin.CGFloat x = v20;
    v68.origin.CGFloat y = v21;
    v68.size.CGFloat width = v22;
    v68.size.CGFloat height = v23;
    if (CGRectIsInfinite(v68))
    {
      int v26 = -2147483647;
      unint64_t v24 = 0xFFFFFFFFLL;
      unint64_t v25 = 0xFFFFFFFFLL;
      int v27 = -2147483647;
    }
    else
    {
      v69.origin.CGFloat x = v20;
      v69.origin.CGFloat y = v21;
      v69.size.CGFloat width = v22;
      v69.size.CGFloat height = v23;
      CGRect v70 = CGRectInset(v69, 0.000001, 0.000001);
      CGRect v71 = CGRectIntegral(v70);
      int v27 = (int)v71.origin.x;
      int v26 = (int)v71.origin.y;
      unint64_t v25 = (unint64_t)v71.size.width;
      unint64_t v24 = (unint64_t)v71.size.height;
    }
  }
  v72.origin.CGFloat x = x;
  v72.origin.CGFloat y = y;
  v72.size.CGFloat width = width;
  v72.size.CGFloat height = height;
  if (CGRectIsNull(v72))
  {
    unint64_t v28 = 0;
    unint64_t v29 = 0;
    int v30 = 0x7FFFFFFF;
    int v31 = 0x7FFFFFFF;
  }
  else
  {
    v73.origin.CGFloat x = x;
    v73.origin.CGFloat y = y;
    v73.size.CGFloat width = width;
    v73.size.CGFloat height = height;
    if (CGRectIsInfinite(v73))
    {
      int v30 = -2147483647;
      unint64_t v28 = 0xFFFFFFFFLL;
      unint64_t v29 = 0xFFFFFFFFLL;
      int v31 = -2147483647;
    }
    else
    {
      v74.origin.CGFloat x = x;
      v74.origin.CGFloat y = y;
      v74.size.CGFloat width = width;
      v74.size.CGFloat height = height;
      CGRect v75 = CGRectInset(v74, 0.000001, 0.000001);
      CGRect v76 = CGRectIntegral(v75);
      int v31 = (int)v76.origin.x;
      int v30 = (int)v76.origin.y;
      unint64_t v29 = (unint64_t)v76.size.width;
      unint64_t v28 = (unint64_t)v76.size.height;
    }
  }
  if (*((_DWORD *)this + 37) != 1 || v27 == -2147483647 && v26 == -2147483647 && v25 == 0xFFFFFFFF && v24 == 0xFFFFFFFF) {
    goto LABEL_18;
  }
  int v34 = 0x7FFFFFFF;
  if (v31 == 0x7FFFFFFF)
  {
    if (v30 == 0x7FFFFFFF && !v29 && !v28)
    {
      uint64_t v32 = 0;
      uint64_t v33 = 0;
      int v35 = 0x7FFFFFFF;
      goto LABEL_19;
    }
  }
  else if (v31 == -2147483647 && v30 == -2147483647 && v29 == 0xFFFFFFFF && v28 == 0xFFFFFFFF)
  {
    goto LABEL_121;
  }
  if (v24) {
    BOOL v54 = 0;
  }
  else {
    BOOL v54 = v25 == 0;
  }
  BOOL v56 = v54 && v26 == 0x7FFFFFFF && v27 == 0x7FFFFFFF;
  if (!v56 && v27 <= v31 && v27 + (int)v25 >= v31 + (int)v29 && v26 <= v30 && v26 + (int)v24 >= v30 + (int)v28)
  {
LABEL_18:
    uint64_t v32 = v28;
    uint64_t v33 = v29;
    int v34 = v30;
    int v35 = v31;
    goto LABEL_19;
  }
LABEL_121:
  if ((v27 != 0x7FFFFFFF || v26 != 0x7FFFFFFF || v25 || v24) && (v31 != 0x7FFFFFFF || v30 != 0x7FFFFFFF || v29 || v28))
  {
    if (v31 != -2147483647
      || v30 != -2147483647
      || v29 != 0xFFFFFFFF
      || (uint64_t v32 = v24, v33 = v25, v34 = v26, v35 = v27, v28 != 0xFFFFFFFF))
    {
      if (v27 <= v31) {
        int v35 = v31;
      }
      else {
        int v35 = v27;
      }
      int v59 = v27 + v25;
      if (v27 + (int)v25 >= v31 + (int)v29) {
        int v59 = v31 + v29;
      }
      LODWORD(v33) = v59 - v35;
      if (v59 < v35) {
        goto LABEL_129;
      }
      if (v26 <= v30) {
        int v34 = v30;
      }
      else {
        int v34 = v26;
      }
      int v60 = v26 + v24;
      if (v26 + (int)v24 >= v30 + (int)v28) {
        int v60 = v30 + v28;
      }
      BOOL v61 = __OFSUB__(v60, v34);
      LODWORD(v32) = v60 - v34;
      if ((int)v32 < 0 != v61) {
        goto LABEL_129;
      }
      uint64_t v33 = (int)v33;
      uint64_t v32 = (int)v32;
    }
    if (v33 && v32) {
      goto LABEL_19;
    }
  }
LABEL_129:
  int v57 = v31 + v29;
  if (v57 >= v27)
  {
    int v58 = v27 + v25;
    if (v31 <= v27 + (int)v25)
    {
      if (v31 <= v27) {
        int v35 = v27;
      }
      else {
        int v35 = v31;
      }
      if (v57 >= v58) {
        int v62 = v27 + v25;
      }
      else {
        int v62 = v57;
      }
      uint64_t v33 = v62 - v35;
    }
    else
    {
      int v35 = v58 - 1;
      uint64_t v33 = 1;
    }
  }
  else
  {
    uint64_t v33 = 1;
    int v35 = v27;
  }
  int v63 = v30 + v28;
  if (v63 >= v26)
  {
    int v64 = v26 + v24;
    if (v30 <= v26 + (int)v24)
    {
      if (v30 <= v26) {
        int v34 = v26;
      }
      else {
        int v34 = v30;
      }
      if (v63 >= v64) {
        int v65 = v26 + v24;
      }
      else {
        int v65 = v63;
      }
      uint64_t v32 = v65 - v34;
    }
    else
    {
      int v34 = v64 - 1;
      uint64_t v32 = 1;
    }
  }
  else
  {
    uint64_t v32 = 1;
    int v34 = v26;
  }
LABEL_19:
  int v36 = 0x7FFFFFFF;
  BOOL v39 = v27 == 0x7FFFFFFF && v26 == 0x7FFFFFFF && v25 == 0 && v24 == 0;
  int v40 = v39;
  if (v39 || v35 == 0x7FFFFFFF && v34 == 0x7FFFFFFF && !v33 && !v32)
  {
    unint64_t v41 = 0;
    unint64_t v42 = 0;
    int v43 = 0x7FFFFFFF;
  }
  else
  {
    if (v27 == -2147483647 && v26 == -2147483647 && v25 == 0xFFFFFFFF && v24 == 0xFFFFFFFF)
    {
      unint64_t v42 = v32;
      unint64_t v41 = v33;
      int v43 = v34;
      int v36 = v35;
      goto LABEL_53;
    }
    if (v35 != -2147483647
      || v34 != -2147483647
      || v33 != 0xFFFFFFFFLL
      || (int v36 = v27, v43 = v26, v41 = v25, v42 = v24, v32 != 0xFFFFFFFFLL))
    {
      if (v27 <= v35) {
        int v45 = v35;
      }
      else {
        int v45 = v27;
      }
      int v46 = v27 + v25;
      if (v27 + (int)v25 >= v35 + (int)v33) {
        int v46 = v35 + v33;
      }
      if (v26 <= v34) {
        int v47 = v34;
      }
      else {
        int v47 = v26;
      }
      int v48 = v34 + v32;
      if (v26 + (int)v24 < v48) {
        int v48 = v26 + v24;
      }
      BOOL v49 = v48 < v47;
      unint64_t v50 = v48 - v47;
      if (v49) {
        int v51 = 0x7FFFFFFF;
      }
      else {
        int v51 = v45;
      }
      if (v49)
      {
        int v47 = 0x7FFFFFFF;
        unint64_t v52 = 0;
      }
      else
      {
        unint64_t v52 = v46 - v45;
      }
      if (v49) {
        unint64_t v50 = 0;
      }
      BOOL v53 = v46 < v45;
      if (v46 >= v45) {
        int v36 = v51;
      }
      else {
        int v36 = 0x7FFFFFFF;
      }
      if (v53) {
        int v43 = 0x7FFFFFFF;
      }
      else {
        int v43 = v47;
      }
      if (v53) {
        unint64_t v41 = 0;
      }
      else {
        unint64_t v41 = v52;
      }
      if (v53) {
        unint64_t v42 = 0;
      }
      else {
        unint64_t v42 = v50;
      }
    }
  }
  if (v25 > 0x1000 || v24 > 0x1000 || 3 * v24 * v25 > 4 * v41 * v42)
  {
LABEL_53:
    if (v36 == -2147483647)
    {
      if (v43 == -2147483647 && v41 == 0xFFFFFFFF && v42 == 0xFFFFFFFF)
      {
        CGRect v44 = (double *)MEMORY[0x1E4F1DB10];
        goto LABEL_63;
      }
    }
    else if (v36 == 0x7FFFFFFF && v43 == 0x7FFFFFFF && !v41 && !v42)
    {
      goto LABEL_58;
    }
    double v16 = (double)v36;
    double v17 = (double)v43;
    double v18 = (double)v41;
    double v19 = (double)v42;
    goto LABEL_65;
  }
  if (v40)
  {
LABEL_58:
    CGRect v44 = (double *)MEMORY[0x1E4F1DB20];
LABEL_63:
    double v16 = *v44;
    double v17 = v44[1];
    double v18 = v44[2];
    double v19 = v44[3];
    goto LABEL_65;
  }
  double v16 = (double)v27;
  double v17 = (double)v26;
  double v18 = (double)v25;
  double v19 = (double)v24;
LABEL_65:
  double v13 = this;
  unint64_t v14 = a2;
  unint64_t v15 = a3;
LABEL_66:

  CI::Node::add_roi(v13, v14, v15, *(CGRect *)&v16, a5);
}

uint64_t CI::CGNode::graphviz_add_images(CI::CGNode *this, void *a2)
{
  uint64_t result = CI_PRINT_TREE_dump_inputs();
  if (result)
  {
    size_t v5 = (const char *)*((void *)this + 13);
    return CIGVNodeAddImage(a2, v5);
  }
  return result;
}

uint64_t CI::CGNode::child_count(CI::CGNode *this)
{
  return 0;
}

uint64_t CI::CGNode::child(CI::CGNode *this)
{
  return 0;
}

uint64_t CI::CGNode::shape_for_graphviz(CI::CGNode *this)
{
  return 0;
}

uint64_t CI::CGNode::color_for_graphviz(CI::CGNode *this)
{
  return 12;
}

uint64_t CI::CGNode::imageIndex(CI::CGNode *this)
{
  return *((unsigned int *)this + 24);
}

_DWORD *CI::CGNode::extent(_DWORD *this)
{
  if (!this[37]) {
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)this + 168))(this);
  }
  return this;
}

double CI::CGNode::extent_unclamped(CI::CGNode *this)
{
  return 0.0;
}

uint64_t CI::CGNode::child_type_is_image(CI::CGNode *this)
{
  return 0;
}

uint64_t CI::CGNode::may_be_extended_range(CI::CGNode *this)
{
  if (*((_DWORD *)this + 36)) {
    return CI::format_is_float(*((_DWORD *)this + 30));
  }
  else {
    return 1;
  }
}

BOOL CI::CGNode::alpha_one(CI::CGNode *this)
{
  return *((_DWORD *)this + 36) == 1;
}

uint64_t CI::CGNode::output_depth(CI::CGNode *this)
{
  if (CI::format_is_deep(*((_DWORD *)this + 30))) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t CI::CGNode::roiAlignment(CI::CGNode *this)
{
  return 16;
}

uint64_t CI::CGNode::texture_bindable(CI::CGNode *this)
{
  return (uint64_t)this + 48;
}

uint64_t non-virtual thunk to'CI::CGNode::type(CI::CGNode *this)
{
  return 29;
}

uint64_t CI::Tileable::cacheIdentity(CI::Tileable *this)
{
  return *((void *)this + 4);
}

void ___ZN2CIL20ioSurfaceFromCGImageENS_10ImageIndexEP7CGImageNS_11PixelFormatERK5IRectbPK10__CFStringP16dispatch_queue_sRy_block_invoke(uint64_t a1, IOSurfaceRef buffer)
{
  **(void **)(a1 + 32) = *(void *)(*(void *)(a1 + 40) + 16) * *(void *)(*(void *)(a1 + 40) + 8);
  CI::fillBlock(*(void *)(a1 + 48), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), buffer);
}

void CI::fillBlock(uint64_t a1, int a2, int a3, IOSurfaceRef buffer)
{
  if (buffer)
  {
    if (a1)
    {
      size_t Width = IOSurfaceGetWidth(buffer);
      size_t Height = IOSurfaceGetHeight(buffer);
      size_t BytesPerElement = IOSurfaceGetBytesPerElement(buffer);
      uint64_t PixelSize = CGImageProviderGetPixelSize();
      Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      __CFDictionary::setValue(Mutable, (__CFDictionary *)*MEMORY[0x1E4F1DD40], (const __CFString *)1, v12);
      __CFDictionary::setValue(Mutable, (__CFDictionary *)*MEMORY[0x1E4F1DD48], 0, v13);
      __CFDictionary::setValue(Mutable, (__CFDictionary *)@"kCGImageBlockTileRequest", 0);
      CGImageProviderGetSize();
      CGFloat v15 = v14;
      CGFloat v17 = v16;
      uint64_t v18 = CGImageProviderCopyImageBlockSetWithOptions();
      if (v18)
      {
        uint64_t v19 = v18;
        CFRelease(Mutable);
LABEL_10:
        CGImageBlockSetGetRect();
        v27.origin.CGFloat x = 0.0;
        v27.origin.CGFloat y = 0.0;
        v27.size.CGFloat width = v15;
        v27.size.CGFloat height = v17;
        if (CGRectContainsRect(v26, v27))
        {
          v23[0] = MEMORY[0x1E4F143A8];
          v23[1] = 0x40000000;
          v23[2] = ___ZN2CIL9fillBlockEP15CGImageProviderNS_11PixelFormatES2_P11__IOSurface_block_invoke;
          unsigned __int16 v23[3] = &__block_descriptor_tmp_20_0;
          void v23[5] = 0;
          v23[6] = 0;
          _OWORD v23[4] = v19;
          *(double *)&v23[7] = (double)Width;
          *(double *)&uint8_t v23[8] = (double)Height;
          v23[9] = BytesPerElement;
          v23[10] = PixelSize;
          int v24 = a2;
          int v25 = a3;
          SurfaceApplyPlaneBlock(buffer, (uint64_t)v23);
        }
        CGImageBlockSetRelease();
        return;
      }
      uint64_t v19 = CGImageProviderCopyImageBlockSetWithOptions();
      CFRelease(Mutable);
      if (v19) {
        goto LABEL_10;
      }
      CGFloat v22 = ci_logger_render();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
        CI::fillBlock();
      }
    }
    else
    {
      CGFloat v21 = ci_logger_render();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        CI::fillBlock();
      }
    }
  }
  else
  {
    CGFloat v20 = ci_logger_render();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      CI::fillBlock();
    }
  }
}

void ___ZN2CIL9fillBlockEP15CGImageProviderNS_11PixelFormatES2_P11__IOSurface_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t a6)
{
  uint64_t Count = CGImageBlockSetGetCount();
  if (!Count) {
    return;
  }
  uint64_t v10 = Count;
  uint64_t v11 = 0;
  while (1)
  {
    CGImageBlockSetGetImageBlock();
    CGImageBlockGetRect();
    double v13 = v12;
    double v15 = v14;
    v33.size.double width = v16;
    v33.size.double height = v17;
    v33.origin.double x = v12;
    v33.origin.double y = v14;
    CGRect v31 = CGRectIntersection(*(CGRect *)(a1 + 40), v33);
    double x = v31.origin.x;
    double y = v31.origin.y;
    double width = v31.size.width;
    double height = v31.size.height;
    size_t BytesPerRow = CGImageBlockGetBytesPerRow();
    v32.origin.double x = x;
    v32.origin.double y = y;
    v32.size.double width = width;
    v32.size.double height = height;
    if (!CGRectIsEmpty(v32)) {
      break;
    }
LABEL_10:
    if (++v11 == v10) {
      return;
    }
  }
  uint64_t v23 = *(void *)(a1 + 72);
  uint64_t Data = CGImageBlockGetData();
  if (Data)
  {
    unint64_t v25 = (unint64_t)height;
    CGRect v26 = (char *)(a2 + v23 * (unint64_t)x + (unint64_t)y * a6);
    CGRect v27 = (char *)(Data
                 + *(void *)(a1 + 80) * ((unint64_t)x - (unint64_t)v13)
                 + ((unint64_t)y - (unint64_t)v15) * BytesPerRow);
    if (*(_DWORD *)(a1 + 88) == 1799 && *(_DWORD *)(a1 + 92) == 1800)
    {
      rgbSrc.data = (void *)(Data
                           + *(void *)(a1 + 80) * ((unint64_t)x - (unint64_t)v13)
                           + ((unint64_t)y - (unint64_t)v15) * BytesPerRow);
      rgbSrc.double height = (unint64_t)height;
      rgbSrc.double width = (unint64_t)width;
      rgbSrc.size_t rowBytes = BytesPerRow;
      v29.data = v26;
      v29.double height = (unint64_t)height;
      v29.double width = (unint64_t)width;
      v29.size_t rowBytes = a6;
      vImageConvert_RGB16UtoRGBA16U(&rgbSrc, 0, 0xFFFFu, &v29, 0, 0);
    }
    else
    {
      for (; v25; --v25)
      {
        memcpy(v26, v27, *(void *)(a1 + 80) * (unint64_t)width);
        v26 += a6;
        v27 += BytesPerRow;
      }
    }
    goto LABEL_10;
  }
  unint64_t v28 = ci_logger_render();
  if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
    ___ZN2CIL9fillBlockEP15CGImageProviderNS_11PixelFormatES2_P11__IOSurface_block_invoke_cold_1();
  }
}

uint64_t CI::InstanceCounted<(CI::Type)29>::type()
{
  return 29;
}

void *CI::InstanceCounted<(CI::Type)29>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AC88;
  atomic_fetch_add(&dword_1EB466E78[27], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)29>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AC88;
  atomic_fetch_add(&dword_1EB466E78[27], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void CI::ClampNode::convert_to_kernel_node(CI::ClampNode *this, CI::Context *a2)
{
}

void ___ZNK2CI9ClampNode22convert_to_kernel_nodeEPNS_7ContextE_block_invoke(CI::ClampNode *a1, double a2, double a3, double a4, double a5)
{
}

void CI::ClampNode::~ClampNode(CI::ClampNode *this)
{
  *((void *)this + 6) = &unk_1EE45ACD8;
  atomic_fetch_add(&dword_1EB466E78[28], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  uint64_t vars8;

  *((void *)this + 6) = &unk_1EE45ACD8;
  atomic_fetch_add(&dword_1EB466E78[28], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::ClampNode::type(CI::ClampNode *this)
{
  return 30;
}

uint64_t CI::ClampNode::shape_for_graphviz(CI::ClampNode *this)
{
  return 2;
}

uint64_t CI::ClampNode::color_for_graphviz(CI::ClampNode *this)
{
  return 5;
}

uint64_t CI::ClampNode::add_args_to_hash(CI::ClampNode *this, CI::XXHashHelper *a2)
{
  return XXH64_update((uint64_t)a2, (char *)this + 56, 0x20uLL);
}

const char *CI::ClampNode::short_name(CI::ClampNode *this)
{
  return "clampRect";
}

size_t CI::ClampNode::print_for_graph_core(void *a1, FILE *__stream)
{
  fwrite("clampRect ", 0xAuLL, 1uLL, __stream);
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[9];
  uint64_t v8 = a1[10];

  return CI::fprintf(__stream, v4, *(CGRect *)&v5);
}

double CI::ClampNode::extent(CI::ClampNode *this)
{
  return *MEMORY[0x1E4F1DB10];
}

double CI::ClampNode::extent_unclamped(CI::ClampNode *this)
{
  return *((double *)this + 7);
}

uint64_t CI::ClampNode::is_warp(CI::ClampNode *this)
{
  return 1;
}

uint64_t CI::ClampNode::may_be_extended_range(CI::ClampNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 256))();
}

uint64_t CI::ClampNode::alpha_one(CI::ClampNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::ClampNode *))(*(void *)this + 408))(this);
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 264);
    return v3();
  }
  return result;
}

uint64_t CI::ClampNode::output_is_rg(CI::ClampNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::ClampNode *))(*(void *)this + 408))(this);
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 272);
    return v3();
  }
  return result;
}

uint64_t CI::ClampNode::output_is_r(CI::ClampNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::ClampNode *))(*(void *)this + 408))(this);
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 280);
    return v3();
  }
  return result;
}

uint64_t CI::ClampNode::output_is_luma(CI::ClampNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::ClampNode *))(*(void *)this + 408))(this);
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 288);
    return v3();
  }
  return result;
}

uint64_t CI::ClampNode::output_depth(CI::ClampNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::ClampNode *))(*(void *)this + 408))(this);
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 304);
    return v3();
  }
  return result;
}

uint64_t CI::ClampNode::output_format(CI::ClampNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::ClampNode *))(*(void *)this + 408))(this);
  if (result)
  {
    int v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 312);
    return v3();
  }
  return result;
}

BOOL CI::ClampNode::is_simple(CI::ClampNode *this)
{
  v16.origin.CGFloat x = (*(double (**)(void))(**((void **)this + 5) + 160))(*((void *)this + 5));
  BOOL result = CGRectContainsRect(v16, *(CGRect *)((char *)this + 56));
  if (result)
  {
    CGFloat v3 = *((double *)this + 7);
    CGFloat v4 = *((double *)this + 8);
    CGFloat v5 = *((double *)this + 9);
    CGFloat v6 = *((double *)this + 10);
    v17.origin.CGFloat x = v3;
    v17.origin.CGFloat y = v4;
    v17.size.CGFloat width = v5;
    v17.size.CGFloat height = v6;
    CGRect v18 = CGRectIntegral(v17);
    CGFloat x = v18.origin.x;
    CGFloat y = v18.origin.y;
    CGFloat width = v18.size.width;
    CGFloat height = v18.size.height;
    CGFloat v11 = v3;
    CGFloat v12 = v4;
    CGFloat v13 = v5;
    CGFloat v14 = v6;
    return CGRectEqualToRect(*(CGRect *)&v11, *(CGRect *)&x);
  }
  return result;
}

uint64_t non-virtual thunk to'CI::ClampNode::type(CI::ClampNode *this)
{
  return 30;
}

void non-virtual thunk to'CI::ClampNode::~ClampNode(CI::ClampNode *this)
{
  *(void *)this = &unk_1EE45ACD8;
  atomic_fetch_add(&dword_1EB466E78[28], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::ClampNode *)((char *)this - 48));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45ACD8;
  atomic_fetch_add(&dword_1EB466E78[28], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::ClampNode *)((char *)this - 48));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)30>::type()
{
  return 30;
}

void *CI::InstanceCounted<(CI::Type)30>::~InstanceCounted(void *result)
{
  *BOOL result = &unk_1EE45ACD8;
  atomic_fetch_add(&dword_1EB466E78[28], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)30>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45ACD8;
  atomic_fetch_add(&dword_1EB466E78[28], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

float32x2_t cikernel::_ci_clamp_rect(CI *a1, int8x16_t a2)
{
  return vminnm_f32(vmaxnm_f32(*(float32x2_t *)CI::getDC(a1), *(float32x2_t *)a2.i8), (float32x2_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL));
}

CI::Object *CI::ClampToZeroToOneNode::append_to_tree(CI::ClampToZeroToOneNode *this, CI::Node *a2)
{
  int v2 = this;
  if (a2 && (*(unsigned int (**)(CI::ClampToZeroToOneNode *))(*(void *)this + 232))(this))
  {
    CGFloat v3 = 0;
    CGFloat v4 = v2;
    while (1)
    {
      CGFloat v5 = v4;
      if ((*(uint64_t (**)(CI::Object *))(*(void *)v4 + 176))(v4)) {
        break;
      }
      CGFloat v4 = (CI::Object *)(*(uint64_t (**)(CI::Object *, void))(*(void *)v4 + 48))(v4, 0);
      CGFloat v3 = v5;
      if (((*(uint64_t (**)(CI::Object *))(*(void *)v4 + 232))(v4) & 1) == 0) {
        goto LABEL_8;
      }
    }
    CGFloat v5 = v3;
  }
  else
  {
    CGFloat v5 = 0;
    CGFloat v4 = v2;
  }
LABEL_8:
  if ((*(unsigned int (**)(CI::Object *))(*(void *)v4 + 16))(v4) != 32) {
    operator new();
  }
  CI::Object::ref((uint64_t)v4);
  if (!v5) {
    return v4;
  }
  (*(void (**)(CI::Object *, CI::Object *, void))(*(void *)v5 + 200))(v5, v4, 0);
  CI::Object::unref(v4);
  if (v2) {
    CI::Object::ref((uint64_t)v2);
  }
  return v2;
}

void CI::ClampToZeroToOneNode::convert_to_kernel_node(CI::ClampToZeroToOneNode *this, CI::Context *a2)
{
}

void CI::ClampToAlphaNode::~ClampToAlphaNode(CI::ClampToAlphaNode *this)
{
  *((void *)this + 6) = &unk_1EE45AD00;
  atomic_fetch_add(&dword_1EB466E78[29], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  uint64_t vars8;

  *((void *)this + 6) = &unk_1EE45AD00;
  atomic_fetch_add(&dword_1EB466E78[29], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::ClampToAlphaNode::shape_for_graphviz(CI::ClampToAlphaNode *this)
{
  return 2;
}

uint64_t CI::ClampToAlphaNode::color_for_graphviz(CI::ClampToAlphaNode *this)
{
  return 4;
}

uint64_t CI::ClampToAlphaNode::may_be_extended_range(CI::ClampToAlphaNode *this)
{
  return 0;
}

uint64_t CI::ClampToAlphaNode::output_depth(CI::ClampToAlphaNode *this)
{
  return 0;
}

uint64_t CI::ClampToAlphaNode::output_format(CI::ClampToAlphaNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 312))();
}

uint64_t non-virtual thunk to'CI::ClampToAlphaNode::type(CI::ClampToAlphaNode *this)
{
  return 31;
}

void non-virtual thunk to'CI::ClampToAlphaNode::~ClampToAlphaNode(CI::ClampToAlphaNode *this)
{
  *(void *)this = &unk_1EE45AD00;
  atomic_fetch_add(&dword_1EB466E78[29], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::ClampToAlphaNode *)((char *)this - 48));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45AD00;
  atomic_fetch_add(&dword_1EB466E78[29], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::ClampToAlphaNode *)((char *)this - 48));

  JUMPOUT(0x1997023B0);
}

void CI::ClampToZeroToOneNode::~ClampToZeroToOneNode(CI::ClampToZeroToOneNode *this)
{
  *((void *)this + 6) = &unk_1EE45AD28;
  atomic_fetch_add(&dword_1EB466E78[30], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  uint64_t vars8;

  *((void *)this + 6) = &unk_1EE45AD28;
  atomic_fetch_add(&dword_1EB466E78[30], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::ClampToZeroToOneNode::type(CI::ClampToZeroToOneNode *this)
{
  return 31;
}

uint64_t CI::ClampToZeroToOneNode::shape_for_graphviz(CI::ClampToZeroToOneNode *this)
{
  return 2;
}

uint64_t CI::ClampToZeroToOneNode::color_for_graphviz(CI::ClampToZeroToOneNode *this)
{
  return 4;
}

const char *CI::ClampToZeroToOneNode::short_name(CI::ClampToZeroToOneNode *this)
{
  return "clamp_to_zero_one";
}

uint64_t CI::ClampToZeroToOneNode::may_be_extended_range(CI::ClampToZeroToOneNode *this)
{
  if ((*(uint64_t (**)(void))(**((void **)this + 5) + 264))(*((void *)this + 5))) {
    return 0;
  }
  CGFloat v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 256);

  return v3();
}

uint64_t CI::ClampToZeroToOneNode::output_depth(CI::ClampToZeroToOneNode *this)
{
  return 0;
}

uint64_t CI::ClampToZeroToOneNode::output_format(CI::ClampToZeroToOneNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 312))();
}

uint64_t non-virtual thunk to'CI::ClampToZeroToOneNode::type(CI::ClampToZeroToOneNode *this)
{
  return 31;
}

void non-virtual thunk to'CI::ClampToZeroToOneNode::~ClampToZeroToOneNode(CI::ClampToZeroToOneNode *this)
{
  *(void *)this = &unk_1EE45AD28;
  atomic_fetch_add(&dword_1EB466E78[30], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::ClampToZeroToOneNode *)((char *)this - 48));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45AD28;
  atomic_fetch_add(&dword_1EB466E78[30], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::ClampToZeroToOneNode *)((char *)this - 48));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)31>::type()
{
  return 31;
}

void *CI::InstanceCounted<(CI::Type)31>::~InstanceCounted(void *result)
{
  *BOOL result = &unk_1EE45AD00;
  atomic_fetch_add(&dword_1EB466E78[29], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)31>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AD00;
  atomic_fetch_add(&dword_1EB466E78[29], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

double cikernel::_ci_clamp_to_alpha(float32x4_t a1)
{
  *(void *)&double result = vminnmq_f32(vmaxnmq_f32(a1, (float32x4_t)0), (float32x4_t)vdupq_laneq_s32((int32x4_t)a1, 3)).u64[0];
  return result;
}

uint64_t CI::InstanceCounted<(CI::Type)32>::type()
{
  return 32;
}

void *CI::InstanceCounted<(CI::Type)32>::~InstanceCounted(void *result)
{
  *double result = &unk_1EE45AD28;
  atomic_fetch_add(&dword_1EB466E78[30], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)32>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AD28;
  atomic_fetch_add(&dword_1EB466E78[30], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

double cikernel::_ci_clamp_to_zero_to_one(float32x4_t a1)
{
  __asm { FMOV            V1.4S, #1.0 }
  *(void *)&double result = vminnmq_f32(vmaxnmq_f32(a1, (float32x4_t)0), _Q1).u64[0];
  return result;
}

BOOL CI::ColorMatrixNode::is_4x3(CI::ColorMatrixNode *this)
{
  return fabs(*((double *)this + 19)) < 0.0003
      && fabs(*((double *)this + 20)) < 0.0003
      && fabs(*((double *)this + 21)) < 0.0003
      && fabs(*((double *)this + 22) + -1.0) < 0.0003
      && fabs(*((double *)this + 23)) < 0.0003
      && fabs(*((double *)this + 24)) < 0.0003
      && fabs(*((double *)this + 25)) < 0.0003
      && fabs(*((double *)this + 26)) < 0.0003;
}

BOOL CI::ColorMatrixNode::is_biased(CI::ColorMatrixNode *this, const double (*a2)[4])
{
  return fabs(*((double *)this + 16)) >= 0.0003
      || fabs(*((double *)this + 17)) >= 0.0003
      || fabs(*((double *)this + 18)) >= 0.0003
      || fabs(*((double *)this + 19)) >= 0.0003;
}

size_t CI::ColorMatrixNode::print_for_graph_core(double *a1, FILE *a2, uint64_t a3, int a4)
{
  if (a4) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = 10;
  }
  uint64_t v7 = (CI *)(a1 + 7);
  if (CI::ColorMatrixNode::is_rrra((CI::ColorMatrixNode *)(a1 + 7), (const double (*)[4])a2))
  {
    return fwrite("color_matrix_rrra", 0x11uLL, 1uLL, a2);
  }
  else if (CI::ColorMatrixNode::is_diagonal((CI::ColorMatrixNode *)a1))
  {
    return fprintf(a2, "color_matrix_diag%c[%g, %g, %g]");
  }
  else if (CI::ColorMatrixNode::is_diagonal4((CI::ColorMatrixNode *)a1))
  {
    return fprintf(a2, "color_matrix_diag4%c[%g, %g, %g, %g]");
  }
  else if (CI::ColorMatrixNode::is_3x1((CI::ColorMatrixNode *)a1))
  {
    return fprintf(a2, "color_matrix_3x1%c[%g, %g, %g]");
  }
  else if (CI::ColorMatrixNode::is_3x3((CI::ColorMatrixNode *)a1))
  {
    uint64_t v10 = CI::name_matrix_3x3(v7, v9);
    fprintf(a2, "color_matrix_%s%c", v10, v6);
    fprintf(a2, "r=[%g %g %g]%c", a1[7], a1[8], a1[9], v6);
    fprintf(a2, "g=[%g %g %g]%c", a1[11], a1[12], a1[13], v6);
    return fprintf(a2, "b=[%g %g %g]");
  }
  else if (CI::ColorMatrixNode::is_3x4((CI::ColorMatrixNode *)a1))
  {
    CGFloat v12 = CI::name_matrix_3x4(v7, v11);
    fprintf(a2, "color_matrix_%s%c", v12, v6);
    fprintf(a2, "r=[%g %g %g]%c", a1[7], a1[8], a1[9], v6);
    fprintf(a2, "g=[%g %g %g]%c", a1[11], a1[12], a1[13], v6);
    fprintf(a2, "b=[%g %g %g]%c", a1[15], a1[16], a1[17], v6);
    return fprintf(a2, "bias=[%g %g %g]");
  }
  else if (CI::ColorMatrixNode::is_4x3((CI::ColorMatrixNode *)a1))
  {
    fprintf(a2, "color_matrix_4x3%c", v6);
    fprintf(a2, "r=[%g %g %g %g]%c", a1[7], a1[8], a1[9], a1[10], v6);
    fprintf(a2, "g=[%g %g %g %g]%c", a1[11], a1[12], a1[13], a1[14], v6);
    return fprintf(a2, "b=[%g %g %g %g]%c");
  }
  else
  {
    fprintf(a2, "color_matrix%c", v6);
    fprintf(a2, "r=[%g %g %g %g]%c", a1[7], a1[8], a1[9], a1[10], v6);
    fprintf(a2, "g=[%g %g %g %g]%c", a1[11], a1[12], a1[13], a1[14], v6);
    fprintf(a2, "b=[%g %g %g %g]%c", a1[15], a1[16], a1[17], a1[18], v6);
    fprintf(a2, "a=[%g %g %g %g]%c", a1[19], a1[20], a1[21], a1[22], v6);
    return fprintf(a2, "bias=[%g %g %g %g]");
  }
}

const char *CI::name_matrix_3x3(CI *this, const double (*a2)[4])
{
  double v3 = *(double *)this;
  if (fabs(*(double *)this + -1.22486) < 0.0003
    && fabs(*((double *)this + 1) + 0.225095) < 0.0003
    && fabs(*((double *)this + 2) + -0.0000143051) < 0.0003
    && fabs(*((double *)this + 4) + 0.0420312) < 0.0003
    && fabs(*((double *)this + 5) + -1.04215) < 0.0003
    && fabs(*((double *)this + 6) + -0.0000336338) < 0.0003
    && fabs(*((double *)this + 8) + 0.0196301) < 0.0003
    && fabs(*((double *)this + 9) + 0.0786319) < 0.0003
    && fabs(*((double *)this + 10) + -1.09799) < 0.0003)
  {
    return "P3_to_709";
  }
  if (fabs(v3 + -0.822518) < 0.0003
    && fabs(*((double *)this + 1) + -0.177654) < 0.0003
    && fabs(*((double *)this + 2) + 0.0000161231) < 0.0003
    && fabs(*((double *)this + 4) + -0.0331725) < 0.0003
    && fabs(*((double *)this + 5) + -0.966714) < 0.0003
    && fabs(*((double *)this + 6) + 0.0000300407) < 0.0003
    && fabs(*((double *)this + 8) + -0.0170808) < 0.0003
    && fabs(*((double *)this + 9) + -0.0724069) < 0.0003
    && fabs(*((double *)this + 10) + -0.910754) < 0.0003)
  {
    return "709_to_P3";
  }
  if (fabs(v3 + -1.66039) < 0.0003
    && fabs(*((double *)this + 1) + 0.587787) < 0.0003
    && fabs(*((double *)this + 2) + 0.0728179) < 0.0003
    && fabs(*((double *)this + 4) + 0.124542) < 0.0003
    && fabs(*((double *)this + 5) + -1.13299) < 0.0003
    && fabs(*((double *)this + 6) + 0.00833634) < 0.0003
    && fabs(*((double *)this + 8) + 0.0181401) < 0.0003
    && fabs(*((double *)this + 9) + 0.10058) < 0.0003
    && fabs(*((double *)this + 10) + -1.11843) < 0.0003)
  {
    return "2020_to_709";
  }
  if (fabs(v3 + -0.627445) < 0.0003
    && fabs(*((double *)this + 1) + -0.329358) < 0.0003
    && fabs(*((double *)this + 2) + -0.0433061) < 0.0003
    && fabs(*((double *)this + 4) + -0.0690914) < 0.0003
    && fabs(*((double *)this + 5) + -0.919472) < 0.0003
    && fabs(*((double *)this + 6) + -0.0113517) < 0.0003
    && fabs(*((double *)this + 8) + -0.01639) < 0.0003
    && fabs(*((double *)this + 9) + -0.0880293) < 0.0003
    && fabs(*((double *)this + 10) + -0.895833) < 0.0003)
  {
    return "709_to_2020";
  }
  if (fabs(v3 + -1.39826) < 0.0003
    && fabs(*((double *)this + 1) + 0.39846) < 0.0003
    && fabs(*((double *)this + 2) + -0.00000625849) < 0.0003
    && fabs(*((double *)this + 4) + -0.0000209321) < 0.0003
    && fabs(*((double *)this + 5) + -1.00008) < 0.0003
    && fabs(*((double *)this + 6) + -0.0000304971) < 0.0003
    && fabs(*((double *)this + 8) + -0.000014063) < 0.0003
    && fabs(*((double *)this + 9) + 0.0429515) < 0.0003
    && fabs(*((double *)this + 10) + -1.04267) < 0.0003)
  {
    return "AdobeRGB_to_709";
  }
  if (fabs(v3 + -0.715173) < 0.0003
    && fabs(*((double *)this + 1) + -0.284946) < 0.0003
    && fabs(*((double *)this + 2) + 0.0000126362) < 0.0003
    && fabs(*((double *)this + 4) + 0.0000149781) < 0.0003
    && fabs(*((double *)this + 5) + -0.999917) < 0.0003
    && fabs(*((double *)this + 6) + 0.0000292528) < 0.0003
    && fabs(*((double *)this + 8) + 0.0000102594) < 0.0003
    && fabs(*((double *)this + 9) + -0.0411866) < 0.0003
    && fabs(*((double *)this + 10) + -0.959077) < 0.0003)
  {
    return "709_to_AdobeRGB";
  }
  if (fabs(v3 + -1.34358) < 0.0003
    && fabs(*((double *)this + 1) + 0.282183) < 0.0003
    && fabs(*((double *)this + 2) + 0.061393) < 0.0003
    && fabs(*((double *)this + 4) + 0.0653165) < 0.0003
    && fabs(*((double *)this + 5) + -1.07578) < 0.0003
    && fabs(*((double *)this + 6) + 0.010508) < 0.0003
    && fabs(*((double *)this + 8) + -0.00282185) < 0.0003
    && fabs(*((double *)this + 9) + 0.0196068) < 0.0003
    && fabs(*((double *)this + 10) + -1.01677) < 0.0003)
  {
    return "2020_to_P3";
  }
  if (fabs(v3 + -0.753838) < 0.0003
    && fabs(*((double *)this + 1) + -0.198602) < 0.0003
    && fabs(*((double *)this + 2) + -0.0475697) < 0.0003
    && fabs(*((double *)this + 4) + -0.0457577) < 0.0003
    && fabs(*((double *)this + 5) + -0.941786) < 0.0003
    && fabs(*((double *)this + 6) + -0.012496) < 0.0003
    && fabs(*((double *)this + 8) + 0.00120976) < 0.0003
    && fabs(*((double *)this + 9) + -0.0176097) < 0.0003
    && fabs(*((double *)this + 10) + -0.983618) < 0.0003)
  {
    return "P3_to_2020";
  }
  if (CI::name_matrix_3x3(double const(*)[4])::onceToken != -1) {
    dispatch_once(&CI::name_matrix_3x3(double const(*)[4])::onceToken, &__block_literal_global_90);
  }
  uint64_t v5 = 0;
  double v6 = *(double *)this;
  double result = "3x3";
  while (1)
  {
    uint64_t v7 = (double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5);
    if (vabdd_f64(v6, *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 16)) < 0.0003
      && vabdd_f64(*((double *)this + 1), v7[3]) < 0.0003
      && vabdd_f64(*((double *)this + 2), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 32)) < 0.0003&& vabdd_f64(*((double *)this + 4), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 40)) < 0.0003&& vabdd_f64(*((double *)this + 5), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 48)) < 0.0003&& vabdd_f64(*((double *)this + 6), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 56)) < 0.0003&& vabdd_f64(*((double *)this + 8), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 64)) < 0.0003&& vabdd_f64(*((double *)this + 9), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 72)) < 0.0003&& vabdd_f64(*((double *)this + 10),
           *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 80)) < 0.0003)
    {
      uint64_t v8 = (char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 8;
      return *(const char **)v8;
    }
    if (vabdd_f64(v6, v7[15]) < 0.0003
      && vabdd_f64(*((double *)this + 1), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 128)) < 0.0003&& vabdd_f64(*((double *)this + 2), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 136)) < 0.0003&& vabdd_f64(*((double *)this + 4), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 144)) < 0.0003&& vabdd_f64(*((double *)this + 5), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 152)) < 0.0003&& vabdd_f64(*((double *)this + 6), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 160)) < 0.0003&& vabdd_f64(*((double *)this + 8), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 168)) < 0.0003&& vabdd_f64(*((double *)this + 9),
           *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 176)) < 0.0003
      && vabdd_f64(*((double *)this + 10), *(double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 184)) < 0.0003)
    {
      break;
    }
    v5 += 216;
    if (v5 == 1296) {
      return result;
    }
  }
  uint64_t v8 = (char *)&CI::name_matrix_3x3(double const(*)[4])::common + v5 + 112;
  return *(const char **)v8;
}

const char *CI::name_matrix_3x4(CI *this, const double (*a2)[4])
{
  if (CI::name_matrix_3x4(double const(*)[4])::onceToken != -1) {
    dispatch_once(&CI::name_matrix_3x4(double const(*)[4])::onceToken, &__block_literal_global_175);
  }
  double v3 = (double *)&qword_1E932F440;
  double v4 = *(double *)this;
  uint64_t v5 = 24;
  double result = "3x4";
  while (1)
  {
    if (vabdd_f64(v4, *(v3 - 11)) < 0.0003
      && vabdd_f64(*((double *)this + 1), *(v3 - 10)) < 0.0003
      && vabdd_f64(*((double *)this + 2), *(v3 - 9)) < 0.0003
      && vabdd_f64(*((double *)this + 4), *(v3 - 8)) < 0.0003
      && vabdd_f64(*((double *)this + 5), *(v3 - 7)) < 0.0003
      && vabdd_f64(*((double *)this + 6), *(v3 - 6)) < 0.0003
      && vabdd_f64(*((double *)this + 8), *(v3 - 5)) < 0.0003
      && vabdd_f64(*((double *)this + 9), *(v3 - 4)) < 0.0003
      && vabdd_f64(*((double *)this + 10), *(v3 - 3)) < 0.0003
      && vabdd_f64(*((double *)this + 16), *(v3 - 2)) < 0.0003
      && vabdd_f64(*((double *)this + 17), *(v3 - 1)) < 0.0003
      && vabdd_f64(*((double *)this + 18), *v3) < 0.0003)
    {
      uint64_t v7 = v3 - 12;
      return *(const char **)v7;
    }
    if (vabdd_f64(v4, v3[2]) < 0.0003
      && vabdd_f64(*((double *)this + 1), v3[3]) < 0.0003
      && vabdd_f64(*((double *)this + 2), v3[4]) < 0.0003
      && vabdd_f64(*((double *)this + 4), v3[5]) < 0.0003
      && vabdd_f64(*((double *)this + 5), v3[6]) < 0.0003
      && vabdd_f64(*((double *)this + 6), v3[7]) < 0.0003
      && vabdd_f64(*((double *)this + 8), v3[8]) < 0.0003
      && vabdd_f64(*((double *)this + 9), v3[9]) < 0.0003
      && vabdd_f64(*((double *)this + 10), v3[10]) < 0.0003
      && vabdd_f64(*((double *)this + 16), v3[11]) < 0.0003
      && vabdd_f64(*((double *)this + 17), v3[12]) < 0.0003
      && vabdd_f64(*((double *)this + 18), v3[13]) < 0.0003)
    {
      break;
    }
    v3 += 28;
    if (!--v5) {
      return result;
    }
  }
  uint64_t v7 = v3 + 1;
  return *(const char **)v7;
}

size_t CI::ColorMatrixNode::print_for_graph_short(CI::ColorMatrixNode *this, __sFILE *a2)
{
  double v4 = (CI::ColorMatrixNode *)((char *)this + 56);
  if (!CI::ColorMatrixNode::is_rrra((CI::ColorMatrixNode *)((char *)this + 56), (const double (*)[4])a2))
  {
    if (CI::ColorMatrixNode::is_diagonal(this))
    {
      uint64_t v5 = "color_matrix_diag";
      goto LABEL_5;
    }
    if (CI::ColorMatrixNode::is_diagonal4(this))
    {
      uint64_t v5 = "color_matrix_diag4";
      size_t v6 = 18;
      goto LABEL_6;
    }
    if (CI::ColorMatrixNode::is_3x1(this))
    {
      uint64_t v5 = "color_matrix_3x1";
LABEL_13:
      size_t v6 = 16;
      goto LABEL_6;
    }
    if (CI::ColorMatrixNode::is_3x3(this))
    {
      double v9 = CI::name_matrix_3x3(v4, v8);
    }
    else
    {
      if (!CI::ColorMatrixNode::is_3x4(this))
      {
        if (!CI::ColorMatrixNode::is_4x3(this))
        {
          uint64_t v5 = "color_matrix";
          size_t v6 = 12;
          goto LABEL_6;
        }
        uint64_t v5 = "color_matrix_4x3";
        goto LABEL_13;
      }
      double v9 = CI::name_matrix_3x4(v4, v10);
    }
    return fprintf(a2, "color_matrix_%s", v9);
  }
  uint64_t v5 = "color_matrix_rrra";
LABEL_5:
  size_t v6 = 17;
LABEL_6:

  return fwrite(v5, v6, 1uLL, a2);
}

uint64_t CI::ColorMatrixNode::shape_for_graphviz(CI::ColorMatrixNode *this)
{
  return 2;
}

uint64_t CI::ColorMatrixNode::color_for_graphviz(CI::ColorMatrixNode *this)
{
  return 4;
}

uint64_t CI::ColorMatrixNode::may_be_extended_range(CI::ColorMatrixNode *this, const double (*a2)[4])
{
  if (!CI::ColorMatrixNode::is_rrra((CI::ColorMatrixNode *)((char *)this + 56), a2)) {
    return 1;
  }
  double v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 256);

  return v3();
}

uint64_t CI::ColorMatrixNode::output_depth(CI::ColorMatrixNode *this)
{
  if ((*(int (**)(void))(**((void **)this + 5) + 304))(*((void *)this + 5)) < 1) {
    return 0;
  }
  int v2 = *(uint64_t (**)(void))(**((void **)this + 5) + 304);

  return v2();
}

uint64_t non-virtual thunk to'CI::ColorMatrixNode::type(CI::ColorMatrixNode *this)
{
  return 33;
}

void non-virtual thunk to'CI::ColorMatrixNode::~ColorMatrixNode(CI::ColorMatrixNode *this)
{
  *(void *)this = &unk_1EE45AD50;
  atomic_fetch_add(&dword_1EB466E78[31], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::ColorMatrixNode *)((char *)this - 48));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45AD50;
  atomic_fetch_add(&dword_1EB466E78[31], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::ColorMatrixNode *)((char *)this - 48));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)33>::type()
{
  return 33;
}

void *CI::InstanceCounted<(CI::Type)33>::~InstanceCounted(void *result)
{
  *double result = &unk_1EE45AD50;
  atomic_fetch_add(&dword_1EB466E78[31], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)33>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AD50;
  atomic_fetch_add(&dword_1EB466E78[31], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

double cikernel::_ci_colormatrix_rrra(float a1)
{
  *(float *)&double v1 = a1;
  *((float *)&v1 + 1) = a1;
  return v1;
}

double cikernel::_ci_colormatrixdiag(float32x4_t a1, float32x4_t a2)
{
  *(void *)&double result = vmulq_f32(a1, a2).u64[0];
  return result;
}

double cikernel::_ci_colormatrixdiag4(float32x4_t a1, float32x4_t a2)
{
  *(void *)&double result = vmulq_f32(a1, a2).u64[0];
  return result;
}

double cikernel::_ci_colormatrix3x1(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2 = vmulq_f32(a1, a2);
  *(void *)&double result = vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))), 0).u64[0];
  return result;
}

double cikernel::_ci_colormatrix3x3(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  *(void *)&double result = vaddq_f32(vmulq_laneq_f32(a4, a1, 2), vaddq_f32(vmulq_n_f32(a2, a1.f32[0]), vmulq_lane_f32(a3, *(float32x2_t *)a1.f32, 1))).u64[0];
  return result;
}

void CI::f4_s_f3_f3_f3(void *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a1[6];
  CGFloat v11 = (double (*)(void *, __n128, __n128, __n128, __n128))a1[3];
  int v12 = *(_DWORD *)(v10 + 16);
  uint64_t v13 = *(void *)(v10 + 8);
  uint64_t v14 = *(void *)(v10 + 32);
  uint64_t v15 = *(void *)(v10 + 56);
  uint64_t v16 = *(void *)(v10 + 80);
  if (*((unsigned char *)a1 + 64)) {
    a1 = CI::setDC((CI *)(a3 + 16 * *(void *)(v10 + 104)), a2);
  }
  CGRect v17 = (__n128 *)(a3 + 16 * v13);
  if (v12 != 5) {
    CGRect v17 = (__n128 *)((char *)a2 + 64 * v13);
  }
  *(double *)&long long v18 = v11(a1, *v17, *((__n128 *)a2 + 4 * v14), *((__n128 *)a2 + 4 * v15), *((__n128 *)a2 + 4 * v16));
  *(_OWORD *)(a3 + 16 * a7) = v18;
}

double cikernel::_ci_colormatrix3x4(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4 = vaddq_f32(vmulq_n_f32(a2, a1.f32[0]), vmulq_lane_f32(a3, *(float32x2_t *)a1.f32, 1));
  float32x4_t v5 = (float32x4_t)vuzp2q_s32(vuzp2q_s32((int32x4_t)a2, (int32x4_t)a3), (int32x4_t)a2);
  v5.i32[2] = a4.i32[3];
  *(void *)&double result = vaddq_f32(vmulq_laneq_f32(v5, a1, 3), vaddq_f32(vmulq_laneq_f32(a4, a1, 2), v4)).u64[0];
  return result;
}

double cikernel::_ci_colormatrix(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  float32x4_t v6 = vmulq_n_f32(a1, 1.0 / fmaxf(a1.f32[3], 0.00001));
  float32x4_t v7 = vaddq_f32(a6, vaddq_f32(vmulq_laneq_f32(a5, a1, 3), vaddq_f32(vmulq_laneq_f32(a4, v6, 2), vaddq_f32(vmulq_lane_f32(a3, *(float32x2_t *)v6.f32, 1), vmulq_n_f32(a2, v6.f32[0])))));
  *(void *)&double result = vmulq_laneq_f32(v7, v7, 3).u64[0];
  return result;
}

void CI::f4_s_f4_f4_f4_f4_f4(uint64_t a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(double (**)(__n128, __n128, __n128, __n128, __n128, __n128))(a1 + 24);
  int v11 = *(_DWORD *)(v9 + 16);
  uint64_t v12 = *(void *)(v9 + 8);
  int v13 = *(_DWORD *)(v9 + 40);
  uint64_t v14 = *(void *)(v9 + 32);
  int v15 = *(_DWORD *)(v9 + 64);
  uint64_t v16 = *(void *)(v9 + 56);
  int v17 = *(_DWORD *)(v9 + 88);
  uint64_t v18 = *(void *)(v9 + 80);
  int v19 = *(_DWORD *)(v9 + 112);
  uint64_t v20 = *(void *)(v9 + 104);
  int v21 = *(_DWORD *)(v9 + 136);
  uint64_t v22 = *(void *)(v9 + 128);
  if (*(unsigned char *)(a1 + 64))
  {
    CGRect v33 = *(double (**)(__n128, __n128, __n128, __n128, __n128, __n128))(a1 + 24);
    uint64_t v34 = *(void *)(v9 + 32);
    uint64_t v31 = *(void *)(v9 + 8);
    int v32 = *(_DWORD *)(v9 + 88);
    int v30 = *(_DWORD *)(v9 + 136);
    CI::setDC((CI *)(a3 + 16 * *(void *)(v9 + 152)), a2);
    int v21 = v30;
    int v17 = v32;
    uint64_t v10 = v33;
    uint64_t v14 = v34;
    uint64_t v12 = v31;
  }
  uint64_t v23 = (__n128 *)(a3 + 16 * v22);
  if (v21 != 5) {
    uint64_t v23 = (__n128 *)((char *)a2 + 64 * v22);
  }
  int v24 = (__n128 *)(a3 + 16 * v20);
  if (v19 != 5) {
    int v24 = (__n128 *)((char *)a2 + 64 * v20);
  }
  unint64_t v25 = (__n128 *)(a3 + 16 * v18);
  if (v17 != 5) {
    unint64_t v25 = (__n128 *)((char *)a2 + 64 * v18);
  }
  CGRect v26 = (__n128 *)(a3 + 16 * v16);
  if (v15 != 5) {
    CGRect v26 = (__n128 *)((char *)a2 + 64 * v16);
  }
  CGRect v27 = (__n128 *)(a3 + 16 * v14);
  if (v13 != 5) {
    CGRect v27 = (__n128 *)((char *)a2 + 64 * v14);
  }
  unint64_t v28 = (__n128 *)(a3 + 16 * v12);
  if (v11 != 5) {
    unint64_t v28 = (__n128 *)((char *)a2 + 64 * v12);
  }
  *(double *)&long long v29 = v10(*v28, *v27, *v26, *v25, *v24, *v23);
  *(_OWORD *)(a3 + 16 * a7) = v29;
}

void ___ZN2CIL15name_matrix_3x3EPA4_Kd_block_invoke()
{
  unint64_t v0 = 0xFFFFFFFFFFFFFAF0;
  do
  {
    get_rgb_to_ycc_matrix(*(_DWORD *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1296), *((unsigned __int8 *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1300), 0, (double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1384), (uint64_t)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1312, (uint64_t)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1336, (uint64_t)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1360);
    get_ycc_to_rgb_bias_matrix(*(_DWORD *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1296), *((unsigned __int8 *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1300), 0, (double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1416), (double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1440), (double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1464), (double *)((char *)&CI::name_matrix_3x3(double const(*)[4])::common + v0 + 1488));
    v0 += 216;
  }
  while (v0);
}

void ___ZN2CIL15name_matrix_3x4EPA4_Kd_block_invoke()
{
  unint64_t v0 = &CI::name_matrix_3x4(double const(*)[4])::common;
  uint64_t v1 = 24;
  do
  {
    get_rgb_to_ycc_matrix(*v0, *((unsigned __int8 *)v0 + 4), v0[2], (double *)v0 + 12, (uint64_t)(v0 + 6), (uint64_t)(v0 + 12), (uint64_t)(v0 + 18));
    get_ycc_to_rgb_bias_matrix(*v0, *((unsigned __int8 *)v0 + 4), v0[2], (double *)v0 + 16, (double *)v0 + 19, (double *)v0 + 22, (double *)v0 + 25);
    v0 += 56;
    --v1;
  }
  while (v1);
}

BOOL CI::CropNode::is_identity(CI::CropNode *this)
{
  CI::Node::roi((CGRect ***)this);
  if (CGRectIsInfinite(v20)) {
    return 0;
  }
  CGRect v21 = CGRectInset(*(CGRect *)((char *)this + 56), -0.01, -0.01);
  CGFloat x = v21.origin.x;
  CGFloat y = v21.origin.y;
  CGFloat width = v21.size.width;
  CGFloat height = v21.size.height;
  CI::Node::roi((CGRect ***)this);
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  CGFloat v15 = x;
  CGFloat v16 = y;
  CGFloat v17 = width;
  CGFloat v18 = height;

  return CGRectContainsRect(*(CGRect *)&v15, *(CGRect *)&v8);
}

uint64_t CI::CropNode::append_to_tree(CI::CropNode *this, CI::Node *a2, CGRect a3)
{
  char v3 = (char)a2;
  CGFloat height = a3.size.height;
  CGFloat width = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  if (!CGRectIsInfinite(a3))
  {
    while (1)
    {
      v35.origin.CGFloat x = (*(double (**)(CI::CropNode *))(*(void *)this + 160))(this);
      v35.origin.CGFloat y = v10;
      v35.size.CGFloat width = v11;
      v35.size.CGFloat height = v12;
      v31.origin.CGFloat x = x;
      v31.origin.CGFloat y = y;
      v31.size.CGFloat width = width;
      v31.size.CGFloat height = height;
      if (!CGRectIntersectsRect(v31, v35)) {
        operator new();
      }
      if ((*(unsigned int (**)(CI::CropNode *))(*(void *)this + 16))(this) == 34)
      {
        v37.origin.CGFloat x = x;
        v37.origin.CGFloat y = y;
        v37.size.CGFloat width = width;
        v37.size.CGFloat height = height;
        CGRectIntersection(*(CGRect *)((char *)this + 56), v37);
        operator new();
      }
      if ((*(unsigned int (**)(CI::CropNode *))(*(void *)this + 16))(this) != 30) {
        break;
      }
      v36.origin.CGFloat x = x;
      v36.origin.CGFloat y = y;
      v36.size.CGFloat width = width;
      v36.size.CGFloat height = height;
      if (!CGRectContainsRect(*(CGRect *)((char *)this + 56), v36)) {
        break;
      }
      this = (CI::CropNode *)(*(uint64_t (**)(CI::CropNode *, void))(*(void *)this + 48))(this, 0);
      v32.origin.CGFloat x = x;
      v32.origin.CGFloat y = y;
      v32.size.CGFloat width = width;
      v32.size.CGFloat height = height;
      char v3 = 0;
      if (CGRectIsInfinite(v32)) {
        goto LABEL_2;
      }
    }
    if (*(unsigned int (**)(CI::CropNode *))(*(void *)this + 16))(this) == 28 && (v3)
    {
      long long v13 = *(_OWORD *)((char *)this + 72);
      long long v27 = *(_OWORD *)((char *)this + 56);
      long long v28 = v13;
      long long v29 = *(_OWORD *)((char *)this + 88);
      CI::Affine::inverse((CI::Affine *)&v27, v26);
      if (fabs(*((double *)&v27 + 1)) >= 0.0001 || (double v14 = *(double *)&v28, fabs(*(double *)&v28) >= 0.0001))
      {
        double v15 = *(double *)&v27;
        if (fabs(*(double *)&v27) >= 0.0001) {
          goto LABEL_24;
        }
        double v16 = *((double *)&v28 + 1);
        if (fabs(*((double *)&v28 + 1)) >= 0.0001) {
          goto LABEL_24;
        }
        double v14 = *(double *)&v28;
      }
      else
      {
        double v15 = *(double *)&v27;
        double v16 = *((double *)&v28 + 1);
      }
      if (fabs(fabs(v15 * v16 - v14 * *((double *)&v27 + 1)) + -1.0) < 0.01)
      {
        v33.origin.CGFloat x = x;
        v33.origin.CGFloat y = y;
        v33.size.CGFloat width = width;
        v33.size.CGFloat height = height;
        double v17 = CI::Affine::applyToRect((CI::Affine *)v26, v33);
        CGFloat v19 = v18;
        CGFloat v21 = v20;
        CGFloat v23 = v22;
        int v24 = (CI::CropNode *)(*(uint64_t (**)(CI::CropNode *, void))(*(void *)this + 48))(this, 0);
        v34.origin.CGFloat x = v17;
        v34.origin.CGFloat y = v19;
        v34.size.CGFloat width = v21;
        v34.size.CGFloat height = v23;
        CI::CropNode::append_to_tree(v24, 0, v34, v25);
        operator new();
      }
    }
LABEL_24:
    operator new();
  }
LABEL_2:
  if (!this) {
    return 0;
  }

  return CI::Object::ref((uint64_t)this);
}

void CI::AffineNode::AffineNode(CI::AffineNode *this, CI::Node *a2, const CI::Affine *a3)
{
}

void CI::CropNode::convert_to_kernel_node(CI::CropNode *this, CI::Context *a2)
{
}

void CI::CropNode::~CropNode(CI::CropNode *this)
{
  *((void *)this + 6) = &unk_1EE45AD78;
  atomic_fetch_add(&dword_1EB466E78[32], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  uint64_t vars8;

  *((void *)this + 6) = &unk_1EE45AD78;
  atomic_fetch_add(&dword_1EB466E78[32], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::CropNode::type(CI::CropNode *this)
{
  return 34;
}

uint64_t CI::CropNode::shape_for_graphviz(CI::CropNode *this)
{
  return 2;
}

uint64_t CI::CropNode::color_for_graphviz(CI::CropNode *this)
{
  return 3;
}

double CI::CropNode::roi_of_child(CI::CropNode *this, CGRect a2)
{
  *(void *)&double result = (unint64_t)CGRectIntersection(a2, *(CGRect *)((char *)this + 56));
  return result;
}

uint64_t CI::CropNode::add_args_to_hash(CI::CropNode *this, CI::XXHashHelper *a2)
{
  return XXH64_update((uint64_t)a2, (char *)this + 56, 0x20uLL);
}

const char *CI::CropNode::short_name(CI::CropNode *this)
{
  return "crop";
}

size_t CI::CropNode::print_for_graph_core(void *a1, FILE *__stream)
{
  fwrite("crop ", 5uLL, 1uLL, __stream);
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[8];
  uint64_t v7 = a1[9];
  uint64_t v8 = a1[10];

  return CI::fprintf(__stream, v4, *(CGRect *)&v5);
}

double CI::CropNode::extent(CI::CropNode *this)
{
  (*(void (**)(void))(**((void **)this + 5) + 160))(*((void *)this + 5));
  uint64_t v6 = *((void *)this + 7);
  uint64_t v7 = *((void *)this + 8);
  uint64_t v8 = *((void *)this + 9);
  uint64_t v9 = *((void *)this + 10);

  *(void *)&double result = (unint64_t)CGRectIntersection(*(CGRect *)&v2, *(CGRect *)&v6);
  return result;
}

uint64_t CI::CropNode::extent_unclamped(CI::CropNode *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 160))();
}

uint64_t CI::CropNode::is_position_invariant(CI::CropNode *this)
{
  return 0;
}

uint64_t CI::CropNode::is_rgb_invariant(CI::CropNode *this, unsigned int a2)
{
  return (a2 >> 1) & 1;
}

uint64_t CI::CropNode::may_be_extended_range(CI::CropNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 256))();
}

uint64_t CI::CropNode::alpha_one(CI::CropNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::CropNode *))(*(void *)this + 408))(this);
  if (result)
  {
    char v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 264);
    return v3();
  }
  return result;
}

uint64_t CI::CropNode::output_is_rg(CI::CropNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::CropNode *))(*(void *)this + 408))(this);
  if (result)
  {
    char v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 272);
    return v3();
  }
  return result;
}

uint64_t CI::CropNode::output_is_r(CI::CropNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::CropNode *))(*(void *)this + 408))(this);
  if (result)
  {
    char v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 280);
    return v3();
  }
  return result;
}

uint64_t CI::CropNode::output_is_luma(CI::CropNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::CropNode *))(*(void *)this + 408))(this);
  if (result)
  {
    char v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 288);
    return v3();
  }
  return result;
}

uint64_t CI::CropNode::output_depth(CI::CropNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::CropNode *))(*(void *)this + 408))(this);
  if (result)
  {
    char v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 304);
    return v3();
  }
  return result;
}

uint64_t CI::CropNode::output_format(CI::CropNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::CropNode *))(*(void *)this + 408))(this);
  if (result)
  {
    char v3 = *(uint64_t (**)(void))(**((void **)this + 5) + 312);
    return v3();
  }
  return result;
}

BOOL CI::CropNode::is_simple(CI::CropNode *this)
{
  v16.origin.CGFloat x = (*(double (**)(void))(**((void **)this + 5) + 160))(*((void *)this + 5));
  BOOL result = CGRectContainsRect(v16, *(CGRect *)((char *)this + 56));
  if (result)
  {
    CGFloat v3 = *((double *)this + 7);
    CGFloat v4 = *((double *)this + 8);
    CGFloat v5 = *((double *)this + 9);
    CGFloat v6 = *((double *)this + 10);
    v17.origin.CGFloat x = v3;
    v17.origin.CGFloat y = v4;
    v17.size.CGFloat width = v5;
    v17.size.CGFloat height = v6;
    CGRect v18 = CGRectIntegral(v17);
    CGFloat x = v18.origin.x;
    CGFloat y = v18.origin.y;
    CGFloat width = v18.size.width;
    CGFloat height = v18.size.height;
    CGFloat v11 = v3;
    CGFloat v12 = v4;
    CGFloat v13 = v5;
    CGFloat v14 = v6;
    return CGRectEqualToRect(*(CGRect *)&v11, *(CGRect *)&x);
  }
  return result;
}

uint64_t non-virtual thunk to'CI::CropNode::type(CI::CropNode *this)
{
  return 34;
}

void non-virtual thunk to'CI::CropNode::~CropNode(CI::CropNode *this)
{
  *(void *)this = &unk_1EE45AD78;
  atomic_fetch_add(&dword_1EB466E78[32], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::CropNode *)((char *)this - 48));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45AD78;
  atomic_fetch_add(&dword_1EB466E78[32], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::CropNode *)((char *)this - 48));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)34>::type()
{
  return 34;
}

void *CI::InstanceCounted<(CI::Type)34>::~InstanceCounted(void *result)
{
  *BOOL result = &unk_1EE45AD78;
  atomic_fetch_add(&dword_1EB466E78[32], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)34>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AD78;
  atomic_fetch_add(&dword_1EB466E78[32], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

double cikernel::_ci_crop(CI *a1, float32x4_t a2, float32x4_t a3)
{
  uint64_t v15 = *(void *)CI::getDC(a1);
  v3.i64[0] = v15;
  *(double *)v4.i64 = vec2::get_xxy((vec2 *)&v15, v3);
  float32x4_t v5 = vaddq_f32(a3, vmulq_f32(v4, (float32x4_t)xmmword_19395A7F0));
  __asm { FMOV            V1.4S, #1.0 }
  float32x4_t v11 = vminnmq_f32(vmaxnmq_f32(vminnmq_f32(v5, (float32x4_t)vextq_s8((int8x16_t)v5, (int8x16_t)v5, 4uLL)), (float32x4_t)0), _Q1);
  *(void *)&double result = vmulq_n_f32(a2, vmulq_laneq_f32(v11, v11, 2).f32[0]).u64[0];
  return result;
}

BOOL CI::CurveNode::is_inverse(CI::CurveNode *this, double a2, long double a3, double a4, double a5, double a6, double a7, double a8)
{
  if (fabs(a5) < 1.0e-10) {
    return 0;
  }
  double v16 = pow(a3, -a2);
  return vabdd_f64(1.0 / a2, *((double *)this + 7)) < 0.00001
      && vabdd_f64(v16, *((double *)this + 8)) < 0.00001
      && vabdd_f64(-(a7 * v16), *((double *)this + 9)) < 0.00001
      && vabdd_f64(1.0 / a5, *((double *)this + 10)) < 0.00001
      && vabdd_f64(a8 + a5 * a6, *((double *)this + 11)) < 0.00001
      && vabdd_f64(-a4 / a3, *((double *)this + 12)) < 0.00001
      && vabdd_f64(-a8 / a5, *((double *)this + 13)) < 0.00001;
}

CI::Object *CI::CurveNode::append_to_tree(CI::CurveNode *this, CI::Node *a2, double a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  CGFloat v10 = this;
  if (a3 != 1.0)
  {
    if (a2 && (*(unsigned int (**)(CI::CurveNode *))(*(void *)this + 232))(this))
    {
      CGRect v18 = 0;
      CGFloat v19 = (uint64_t *)v10;
      while (1)
      {
        double v20 = v19;
        if ((*(uint64_t (**)(uint64_t *))(*v19 + 176))(v19)) {
          break;
        }
        CGFloat v19 = (uint64_t *)(*(uint64_t (**)(uint64_t *, void))(*v19 + 48))(v19, 0);
        CGRect v18 = v20;
        if (((*(uint64_t (**)(uint64_t *))(*v19 + 232))(v19) & 1) == 0) {
          goto LABEL_13;
        }
      }
      double v20 = v18;
    }
    else
    {
      double v20 = 0;
      CGFloat v19 = (uint64_t *)v10;
    }
LABEL_13:
    if ((*(unsigned int (**)(uint64_t *))(*v19 + 16))(v19) != 37
      || !(*(unsigned int (**)(uint64_t *, double, double, double, double, double, double, double))(*v19 + 408))(v19, a3, a4, a5, a6, a7, a8, a9))
    {
      operator new();
    }
    CGFloat v21 = (CI::Object *)v19[5];
    if (v21) {
      CI::Object::ref(v19[5]);
    }
    if (!v20) {
      return v21;
    }
    (*(void (**)(uint64_t *, CI::Object *, void))(*v20 + 200))(v20, v21, 0);
    if (v21) {
      CI::Object::unref(v21);
    }
    if (v10) {
      CI::Object::ref((uint64_t)v10);
    }
    return v10;
  }
  if (!this) {
    return v10;
  }

  return (CI::Object *)CI::Object::ref((uint64_t)this);
}

void CI::CurveNode::convert_to_kernel_node(CI::CurveNode *this, CI::Context *a2)
{
}

uint64_t CI::CurveNode::print_for_graph_core(double *a1, FILE *a2)
{
  int v4 = (*(uint64_t (**)(double *))(*(void *)a1 + 416))(a1);
  double v5 = a1[7];
  if (v4) {
    return fprintf(a2, "curve%cgamma=%g", v5);
  }
  else {
    return fprintf(a2, "curve%cgamma=%g%ca=%g b=%g c=%g d=%g e=%g f=%g", v5);
  }
}

void CI::CurveNode::~CurveNode(CI::CurveNode *this)
{
  *(void *)this = &unk_1EE45EF98;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  *((void *)this + 6) = &unk_1EE45ADF0;
  atomic_fetch_add(&dword_1EB466E78[35], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45EF98;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *((void *)this + 13) = 0;
  *((void *)this + 6) = &unk_1EE45ADF0;
  atomic_fetch_add(&dword_1EB466E78[35], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::CurveNode::type(CI::CurveNode *this)
{
  return 37;
}

uint64_t CI::CurveNode::shape_for_graphviz(CI::CurveNode *this)
{
  return 2;
}

uint64_t CI::CurveNode::color_for_graphviz(CI::CurveNode *this)
{
  return 4;
}

uint64_t CI::CurveNode::add_args_to_hash(CI::CurveNode *this, CI::XXHashHelper *a2)
{
  uint64_t __src = *((void *)this + 7);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  uint64_t __src = *((void *)this + 8);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  uint64_t __src = *((void *)this + 9);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  uint64_t __src = *((void *)this + 10);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  uint64_t __src = *((void *)this + 11);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  uint64_t __src = *((void *)this + 12);
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  uint64_t __src = *((void *)this + 13);
  return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
}

const char *CI::CurveNode::short_name(CI::CurveNode *this)
{
  return "curve";
}

BOOL CI::CurveNode::is_identity(CI::CurveNode *this)
{
  return *((double *)this + 7) == 1.0
      && *((double *)this + 8) == 1.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 1.0
      && *((double *)this + 12) == 0.0
      && *((double *)this + 13) == 0.0;
}

uint64_t CI::CurveNode::may_be_extended_range(CI::CurveNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 256))();
}

uint64_t CI::CurveNode::output_depth(CI::CurveNode *this)
{
  if ((*(int (**)(void))(**((void **)this + 5) + 304))(*((void *)this + 5)) < 1) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 5) + 304);

  return v2();
}

uint64_t CI::CurveNode::code_complexity(CI::CurveNode *this)
{
  return 2;
}

BOOL CI::CurveNode::is_just_gamma(CI::CurveNode *this)
{
  return *((double *)this + 8) == 1.0
      && *((double *)this + 9) == 0.0
      && *((double *)this + 10) == 0.0
      && *((double *)this + 12) == 0.0
      && *((double *)this + 13) == 0.0;
}

uint64_t non-virtual thunk to'CI::CurveNode::type(CI::CurveNode *this)
{
  return 37;
}

void non-virtual thunk to'CI::CurveNode::~CurveNode(CI::CurveNode *this)
{
  *((void *)this - 6) = &unk_1EE45EF98;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *((void *)this + 7) = 0;
  *(void *)this = &unk_1EE45ADF0;
  atomic_fetch_add(&dword_1EB466E78[35], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::CurveNode *)((char *)this - 48));
}

{
  CI::CurveNode::~CurveNode((CI::CurveNode *)((char *)this - 48));
}

uint64_t CI::InstanceCounted<(CI::Type)37>::type()
{
  return 37;
}

void *CI::InstanceCounted<(CI::Type)37>::~InstanceCounted(void *result)
{
  *double result = &unk_1EE45ADF0;
  atomic_fetch_add(&dword_1EB466E78[35], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)37>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45ADF0;
  atomic_fetch_add(&dword_1EB466E78[35], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

float32x4_t cikernel::_ci_curv(float32x4_t a1, int32x4_t a2, int32x4_t a3)
{
  float32x4_t v3 = vaddq_f32((float32x4_t)vdupq_laneq_s32(a2, 2), vmulq_lane_f32(a1, *(float32x2_t *)a2.i8, 1));
  v3.i32[3] = 0;
  simd_float4 v4 = (simd_float4)vmaxnmq_f32(v3, (float32x4_t)0);
  simd_float4 v5 = (simd_float4)vdupq_lane_s32(*(int32x2_t *)a2.i8, 0);
  v4.i32[3] = 0;
  v5.i32[3] = 0;
  float32x4_t result = (float32x4_t)_simd_pow_f4(v4, v5);
  __asm { FMOV            V3.4S, #1.0 }
  float32x4_t v11 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.i8, 0), a1), (int8x16_t)0, (int8x16_t)_Q3);
  result.i64[0] = vmlaq_f32(vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32(a3, 2), vmulq_laneq_f32(a1, (float32x4_t)a2, 3)), vsubq_f32(_Q3, v11)), v11, vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a3.i8, 1), result)).u64[0];
  result.i32[3] = a1.i32[3];
  return result;
}

void CI::f4_s_f4_f3(void *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = a1[6];
  float32x4_t v11 = (double (*)(void *, __n128, __n128, __n128))a1[3];
  int v12 = *(_DWORD *)(v10 + 16);
  uint64_t v13 = *(void *)(v10 + 8);
  int v14 = *(_DWORD *)(v10 + 40);
  uint64_t v15 = *(void *)(v10 + 32);
  uint64_t v16 = *(void *)(v10 + 56);
  if (*((unsigned char *)a1 + 64)) {
    a1 = CI::setDC((CI *)(a3 + 16 * *(void *)(v10 + 80)), a2);
  }
  CGRect v17 = (__n128 *)(a3 + 16 * v15);
  if (v14 != 5) {
    CGRect v17 = (__n128 *)((char *)a2 + 64 * v15);
  }
  CGRect v18 = (__n128 *)(a3 + 16 * v13);
  if (v12 != 5) {
    CGRect v18 = (__n128 *)((char *)a2 + 64 * v13);
  }
  *(double *)&long long v19 = v11(a1, *v18, *v17, *((__n128 *)a2 + 4 * v16));
  *(_OWORD *)(a3 + 16 * a7) = v19;
}

void CI::FillNode::FillNode(CI::FillNode *this)
{
}

void CI::FillNode::FillNode(CI::FillNode *this, CI::Color *a2)
{
}

void CI::FillNode::~FillNode(CI::FillNode *this)
{
  *(void *)this = &unk_1EE45E598;
  *((void *)this + 5) = &unk_1EE45E750;
  uint64_t v2 = (CI::Object *)*((void *)this + 6);
  if (v2) {
    CI::Object::unref(v2);
  }
  *((void *)this + 5) = &unk_1EE45ADA0;
  *((void *)this + 6) = 0;
  atomic_fetch_add(&dword_1EB466E78[33], 0xFFFFFFFF);

  CI::Node::~Node(this);
}

{
  uint64_t vars8;

  CI::FillNode::~FillNode(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::FillNode::~FillNode(CI::FillNode *this)
{
}

{
  uint64_t vars8;

  CI::FillNode::~FillNode((CI::FillNode *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

size_t CI::FillNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  fwrite("fill ", 5uLL, 1uLL, __stream);
  uint64_t v4 = *(void *)(a1 + 48);
  if (v4)
  {
    simd_float4 v5 = *(uint64_t (**)(void))(*(void *)v4 + 32);
    return v5();
  }
  else
  {
    return fwrite("clear", 5uLL, 1uLL, __stream);
  }
}

void CI::FillNode::convert_to_kernel_node(CI::FillNode *this, CGColorSpace **a2)
{
  uint64_t v2 = (CI::Color *)*((void *)this + 6);
  if (v2) {
    CI::Color::vector_in_workingspace(v2, a2);
  }
  operator new();
}

uint64_t CI::FillNode::type(CI::FillNode *this)
{
  return 35;
}

uint64_t CI::FillNode::child_count(CI::FillNode *this)
{
  return 0;
}

uint64_t CI::FillNode::child(CI::FillNode *this)
{
  return 0;
}

uint64_t CI::FillNode::shape_for_graphviz(CI::FillNode *this)
{
  return 1;
}

uint64_t CI::FillNode::color_for_graphviz(CI::FillNode *this)
{
  return 4;
}

void CI::FillNode::add_args_to_hash(CI::FillNode *this, CI::XXHashHelper *a2)
{
  uint64_t v2 = *((void *)this + 6);
  if (v2)
  {
    XXH64_update((uint64_t)a2, (char *)(v2 + 24), 0x10uLL);
    uint64_t v4 = *(CGColorSpace **)(v2 + 40);
    CI::XXHashHelper::add(a2, v4);
  }
}

const char *CI::FillNode::short_name(CI::FillNode *this)
{
  return "fill";
}

uint64_t CI::FillNode::extent_unclamped(CI::FillNode *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 160))();
}

uint64_t CI::FillNode::child_type_is_image(CI::FillNode *this)
{
  return 0;
}

uint64_t CI::FillNode::may_be_extended_range(CI::FillNode *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 48))();
  }
  return result;
}

BOOL CI::FillNode::alpha_one(CI::FillNode *this)
{
  uint64_t v1 = *((void *)this + 6);
  return v1 && *(float *)(v1 + 36) == 1.0;
}

uint64_t CI::FillNode::output_is_rg(CI::FillNode *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1 && *(float *)(v1 + 32) == 0.0) {
    return (*(uint64_t (**)(void))(*(void *)this + 264))();
  }
  else {
    return 0;
  }
}

uint64_t CI::FillNode::output_is_r(CI::FillNode *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1 && *(float *)(v1 + 28) == 0.0) {
    return (*(uint64_t (**)(void))(*(void *)this + 272))();
  }
  else {
    return 0;
  }
}

uint64_t CI::FillNode::output_is_luma(CI::FillNode *this)
{
  uint64_t v1 = (float *)*((void *)this + 6);
  if (v1 && (float v2 = v1[7], v1[6] == v2) && v2 == v1[8]) {
    return (*(uint64_t (**)(void))(*(void *)this + 264))();
  }
  else {
    return 0;
  }
}

uint64_t CI::FillNode::output_depth(CI::FillNode *this)
{
  uint64_t result = *((void *)this + 6);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 48))(result);
  }
  return result;
}

uint64_t CI::FillNode::color(CI::FillNode *this)
{
  return *((void *)this + 6);
}

uint64_t CI::FillNode::colorIsEmpty(CI::FillNode *this)
{
  uint64_t v1 = *((void *)this + 6);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 40))();
  }
  else {
    return 1;
  }
}

uint64_t non-virtual thunk to'CI::FillNode::type(CI::FillNode *this)
{
  return 35;
}

uint64_t CI::InstanceCounted<(CI::Type)35>::type()
{
  return 35;
}

void *CI::InstanceCounted<(CI::Type)35>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45ADA0;
  atomic_fetch_add(&dword_1EB466E78[33], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)35>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45ADA0;
  atomic_fetch_add(&dword_1EB466E78[33], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

CI::Object *CI::GammaNode::append_to_tree(CI::GammaNode *this, CI::Node *a2, double a3)
{
  uint64_t v4 = this;
  if (a3 != 1.0)
  {
    if (a2 && (*(unsigned int (**)(CI::GammaNode *))(*(void *)this + 232))(this))
    {
      CGFloat v6 = 0;
      uint64_t v7 = v4;
      while (1)
      {
        uint64_t v8 = v7;
        if ((*(uint64_t (**)(CI::Object *))(*(void *)v7 + 176))(v7)) {
          break;
        }
        uint64_t v7 = (CI::Object *)(*(uint64_t (**)(CI::Object *, void))(*(void *)v7 + 48))(v7, 0);
        CGFloat v6 = v8;
        if (((*(uint64_t (**)(CI::Object *))(*(void *)v7 + 232))(v7) & 1) == 0) {
          goto LABEL_13;
        }
      }
      uint64_t v8 = v6;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v7 = v4;
    }
LABEL_13:
    int v9 = (*(uint64_t (**)(CI::Object *))(*(void *)v7 + 16))(v7);
    uint64_t v10 = *(void *)v7;
    if (v9 == 35)
    {
      if (!(*(unsigned int (**)(CI::Object *))(v10 + 416))(v7)) {
LABEL_25:
      }
        operator new();
    }
    else
    {
      if ((*(unsigned int (**)(CI::Object *))(v10 + 16))(v7) != 36) {
        goto LABEL_25;
      }
      double v11 = *((double *)v7 + 7) * a3;
      *((double *)v7 + 7) = v11;
      if (fabs(v11 + -1.0) >= 0.0001) {
        operator new();
      }
      uint64_t v7 = (CI::Object *)*((void *)v7 + 5);
      if (!v7)
      {
LABEL_20:
        if (!v8) {
          return v7;
        }
        (*(void (**)(CI::Object *, CI::Object *, void))(*(void *)v8 + 200))(v8, v7, 0);
        if (v7) {
          CI::Object::unref(v7);
        }
        if (v4) {
          CI::Object::ref((uint64_t)v4);
        }
        return v4;
      }
    }
    CI::Object::ref((uint64_t)v7);
    goto LABEL_20;
  }
  if (!this) {
    return v4;
  }

  return (CI::Object *)CI::Object::ref((uint64_t)this);
}

uint64_t CI::GammaNode::add_to_kernel_hash(CI::GammaNode *this, CI::XXHashHelper *a2)
{
  double v3 = *((double *)this + 7);
  if (v3 == 2.0)
  {
    uint64_t v4 = "builtin_sqr";
  }
  else
  {
    simd_float4 v5 = "builtin_gamma";
    if (v3 == 0.5) {
      simd_float4 v5 = "builtin_sqrt";
    }
    if (v3 == 4.0) {
      uint64_t v4 = "builtin_pow4";
    }
    else {
      uint64_t v4 = (char *)v5;
    }
  }
  return CI::XXHashHelper::addstr((uint64_t)a2, v4);
}

void CI::GammaNode::convert_to_kernel_node(CI::GammaNode *this, CI::Context *a2)
{
  double v2 = *((double *)this + 7);
  if (v2 != 2.0 && v2 != 4.0 && v2 != 0.5) {
    operator new();
  }
  operator new();
}

size_t CI::GammaNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  double v3 = *(double *)(a1 + 56);
  if (v3 == 2.0)
  {
    uint64_t v4 = "sqr";
    size_t v5 = 3;
  }
  else
  {
    if (v3 == 0.5)
    {
      uint64_t v4 = "sqrt";
    }
    else
    {
      if (v3 != 4.0) {
        return fprintf(__stream, "gamma %g", *(double *)(a1 + 56));
      }
      uint64_t v4 = "pow4";
    }
    size_t v5 = 4;
  }

  return fwrite(v4, v5, 1uLL, __stream);
}

void CI::GammaNode::~GammaNode(CI::GammaNode *this)
{
  *(void *)this = &unk_1EE45F598;
  *((void *)this + 6) = &unk_1EE45ADC8;
  *((void *)this + 7) = 0;
  atomic_fetch_add(&dword_1EB466E78[34], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45F598;
  *((void *)this + 6) = &unk_1EE45ADC8;
  *((void *)this + 7) = 0;
  atomic_fetch_add(&dword_1EB466E78[34], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::GammaNode::type(CI::GammaNode *this)
{
  return 36;
}

uint64_t CI::GammaNode::shape_for_graphviz(CI::GammaNode *this)
{
  return 2;
}

uint64_t CI::GammaNode::color_for_graphviz(CI::GammaNode *this)
{
  return 4;
}

uint64_t CI::GammaNode::add_args_to_hash(CI::GammaNode *this, CI::XXHashHelper *a2)
{
  uint64_t __src = *((void *)this + 7);
  return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
}

const char *CI::GammaNode::short_name(CI::GammaNode *this)
{
  double v1 = *((double *)this + 7);
  if (v1 == 2.0) {
    return "sqr";
  }
  double v3 = "gamma";
  if (v1 == 4.0) {
    double v3 = "pow4";
  }
  if (v1 == 0.5) {
    return "sqrt";
  }
  else {
    return v3;
  }
}

BOOL CI::GammaNode::is_identity(CI::GammaNode *this)
{
  return fabs(*((double *)this + 7) + -1.0) < 0.0001;
}

uint64_t CI::GammaNode::may_be_extended_range(CI::GammaNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 256))();
}

uint64_t CI::GammaNode::output_depth(CI::GammaNode *this)
{
  if ((*(int (**)(void))(**((void **)this + 5) + 304))(*((void *)this + 5)) < 1) {
    return 0;
  }
  double v2 = *(uint64_t (**)(void))(**((void **)this + 5) + 304);

  return v2();
}

uint64_t non-virtual thunk to'CI::GammaNode::type(CI::GammaNode *this)
{
  return 36;
}

void non-virtual thunk to'CI::GammaNode::~GammaNode(CI::GammaNode *this)
{
  *((void *)this - 6) = &unk_1EE45F598;
  *(void *)this = &unk_1EE45ADC8;
  *((void *)this + 1) = 0;
  atomic_fetch_add(&dword_1EB466E78[34], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::GammaNode *)((char *)this - 48));
}

{
  CI::GammaNode::~GammaNode((CI::GammaNode *)((char *)this - 48));
}

uint64_t CI::InstanceCounted<(CI::Type)36>::type()
{
  return 36;
}

void *CI::InstanceCounted<(CI::Type)36>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45ADC8;
  atomic_fetch_add(&dword_1EB466E78[34], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)36>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45ADC8;
  atomic_fetch_add(&dword_1EB466E78[34], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

double cikernel::_ci_sqr(float32x4_t a1)
{
  a1.i32[3] = 0;
  float32x4_t v2 = vmaxnmq_f32(a1, (float32x4_t)0);
  *(void *)&double result = vmulq_f32(v2, v2).u64[0];
  return result;
}

double cikernel::_ci_pow4(float32x4_t a1)
{
  a1.i32[3] = 0;
  float32x4_t v2 = vmaxnmq_f32(a1, (float32x4_t)0);
  *(void *)&double result = vmulq_f32(v2, vmulq_f32(v2, vmulq_f32(v2, v2))).u64[0];
  return result;
}

double cikernel::_ci_sqrt(float32x4_t a1)
{
  a1.i32[3] = 0;
  float32x4_t v2 = vmaxnmq_f32(a1, (float32x4_t)0);
  v2.i32[3] = 0;
  *(void *)&double result = vsqrtq_f32(v2).u64[0];
  return result;
}

__n128 cikernel::_ci_gamma(float32x4_t a1, int32x2_t a2)
{
  unsigned __int32 v6 = a1.u32[3];
  float32x4_t v2 = a1;
  v2.i32[3] = 0;
  simd_float4 v3 = (simd_float4)vmaxnmq_f32(v2, (float32x4_t)0);
  v3.i32[3] = 0;
  simd_float4 v4 = (simd_float4)vdupq_lane_s32(a2, 0);
  v4.i32[3] = 0;
  result.n128_u64[0] = _simd_pow_f4(v3, v4).u64[0];
  result.n128_u32[3] = v6;
  return result;
}

void non-virtual thunk to'CI::ColorKernelNode::~ColorKernelNode(CI::ColorKernelNode *this)
{
}

{
  uint64_t vars8;

  CI::ColorKernelNode::~ColorKernelNode((CI::ColorKernelNode *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

BOOL CI::ColorKernelNode::output_is_luma(CI::ColorKernelNode *this)
{
  int v2 = *((_DWORD *)this + 30);
  BOOL result = 1;
  if (!v2 || (CI::format_is_r(v2) & 1) == 0)
  {
    if (!*(unsigned char *)(*((void *)this + 6) + 160)) {
      return 0;
    }
    if (!(*(uint64_t (**)(CI::ColorKernelNode *, void))(*(void *)this + 48))(this, 0)) {
      return 0;
    }
    uint64_t v3 = (*(uint64_t (**)(CI::ColorKernelNode *, void))(*(void *)this + 48))(this, 0);
    v6.origin.CGFloat x = (*(double (**)(uint64_t))(*(void *)v3 + 160))(v3);
    if (!CGRectIsInfinite(v6)) {
      return 0;
    }
    uint64_t v4 = *(void *)(*(uint64_t (**)(CI::ColorKernelNode *, void))(*(void *)this + 48))(this, 0);
    if (((*(uint64_t (**)(void))(v4 + 288))() & 1) == 0) {
      return 0;
    }
  }
  return result;
}

uint64_t CI::ColorKernelNode::output_depth(CI::ColorKernelNode *this)
{
  int v2 = *((_DWORD *)this + 30);
  if (v2)
  {
    if (CI::format_is_deep(v2)) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if (!*(unsigned char *)(*((void *)this + 6) + 163)) {
      return 0;
    }
    uint64_t result = (*(uint64_t (**)(CI::ColorKernelNode *, void))(*(void *)this + 48))(this, 0);
    if (!result) {
      return result;
    }
    uint64_t v4 = *(void *)(*(uint64_t (**)(CI::ColorKernelNode *, void))(*(void *)this + 48))(this, 0);
    if ((*(int (**)(void))(v4 + 304))() >= 1)
    {
      size_t v5 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::ColorKernelNode *, void))(*(void *)this + 48))(this, 0)+ 304);
      return v5();
    }
    else
    {
      return 0;
    }
  }
}

CI::SerialObjectPtrArray *CI::SerialObjectPtrArray::SerialObjectPtrArray(CI::SerialObjectPtrArray *this, const CI::SerialObjectPtrArray *a2)
{
  uint64_t v4 = CI::SerialObjectPtrArray::SerialObjectPtrArray(this, *(_DWORD *)a2);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  v6[2] = ___ZN2CI20SerialObjectPtrArrayC1ERKS0__block_invoke;
  v6[3] = &__block_descriptor_tmp_14_1;
  v6[4] = v4;
  CI::SerialObjectPtrArray::for_each((int *)a2, (uint64_t)v6);
  return this;
}

void CI::ColorKernelNode::set_child(CI::ColorKernelNode *this, CI::Node *a2, int a3)
{
  if (a3 < 0) {
    return;
  }
  uint64_t v4 = **((unsigned int **)this + 7);
  if ((int)v4 < 1) {
    return;
  }
  unint64_t v7 = 0;
  int v8 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v10 = *((void *)this + 7);
    if (v7 > 9) {
      double v11 = (void *)(*(void *)(v10 + 16) + 8 * (v7 - 10));
    }
    else {
      double v11 = (void *)(v10 + i);
    }
    uint64_t v12 = *v11;
    if ((*(int (**)(void))(*(void *)*v11 + 16))(*v11) < 27
      || (*(int (**)(uint64_t))(*(void *)v12 + 16))(v12) > 52)
    {
      goto LABEL_11;
    }
    if (v8 == a3) {
      break;
    }
    ++v8;
LABEL_11:
    if (v4 == ++v7) {
      return;
    }
  }
  uint64_t v13 = (CI::SerialObjectPtrArray *)*((void *)this + 7);

  CI::SerialObjectPtrArray::replace(v13, a2, v7);
}

uint64_t CI::ColorKernelNode::print_for_graph_core(uint64_t a1, FILE *a2, void *a3, int a4)
{
  uint64_t result = fprintf(a2, "colorkernel %s", *(const char **)(*(void *)(a1 + 48) + 24));
  uint64_t v8 = **(unsigned int **)(a1 + 56);
  if ((int)v8 >= 1)
  {
    int64_t v9 = 0;
    uint64_t v10 = 24;
    do
    {
      uint64_t v11 = *(void *)(a1 + 56);
      if ((unint64_t)v9 > 9) {
        uint64_t v12 = (_DWORD **)(*(void *)(v11 + 16) + 8 * (v9 - 10));
      }
      else {
        uint64_t v12 = (_DWORD **)(v11 + v10);
      }
      uint64_t v13 = *v12;
      if (a4)
      {
        if (v9) {
          int v14 = 44;
        }
        else {
          int v14 = 40;
        }
        fputc(v14, a2);
        uint64_t v15 = *(void *)(a1 + 48);
        if (*(unsigned char *)(v15 + 12))
        {
          name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v15 + 144), v9);
        }
        else if (v9 >= *(int *)(v15 + 20))
        {
          name = 0;
        }
        else
        {
          name = *(const char **)(*(void *)(v15 + 80) + 8 * v9);
        }
        fputs(name, a2);
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 48);
        if (*(unsigned char *)(v17 + 12))
        {
          CGRect v18 = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v17 + 144), v9);
        }
        else if (v9 >= *(int *)(v17 + 20))
        {
          CGRect v18 = 0;
        }
        else
        {
          CGRect v18 = *(const char **)(*(void *)(v17 + 80) + 8 * v9);
        }
        fprintf(a2, "\n%s", v18);
      }
      if ((*(int (**)(_DWORD *))(*(void *)v13 + 16))(v13) < 27
        || (*(int (**)(_DWORD *))(*(void *)v13 + 16))(v13) > 52)
      {
        fputc(61, a2);
        uint64_t result = (*(uint64_t (**)(_DWORD *, FILE *, void))(*(void *)v13 + 32))(v13, a2, 0);
      }
      else
      {
        if (CI_GRAPHVIZ_INTERNAL())
        {
          int v19 = v13[9];
LABEL_29:
          uint64_t result = fprintf(a2, "=(%d)", v19);
          goto LABEL_30;
        }
        BOOL v25 = v13;
        uint64_t result = (uint64_t)std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v25);
        if (result)
        {
          int v19 = *(_DWORD *)(result + 24);
          goto LABEL_29;
        }
      }
LABEL_30:
      ++v9;
      v10 += 8;
    }
    while (v8 != v9);
  }
  if v8 && (a4) {
    uint64_t result = fputc(41, a2);
  }
  if ((a4 & 1) == 0)
  {
    CFDictionaryRef v20 = (const __CFDictionary *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
    if (v20)
    {
      v24[0] = MEMORY[0x1E4F143A8];
      v24[1] = 0x40000000;
      v24[2] = ___ZNK2CI15ColorKernelNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke;
      v24[3] = &__block_descriptor_tmp_21;
      v24[4] = a2;
      __CFDictionary::for_each(v20, v24);
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1);
    if (result)
    {
      int v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 312))(a1);
      double v22 = CI::name_for_format(v21);
      return fprintf(a2, "\noutputFormat=%s", v22);
    }
  }
  return result;
}

void ___ZNK2CI15ColorKernelNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke(uint64_t a1, __CFObject *a2, __CFObject *a3)
{
  fputc(10, *(FILE **)(a1 + 32));
  __CFObject::fprint(a2, *(FILE **)(a1 + 32), v6);
  fputc(61, *(FILE **)(a1 + 32));
  uint64_t v8 = *(FILE **)(a1 + 32);

  __CFObject::fprint(a3, v8, v7);
}

CFStringRef CI::ColorKernelNode::description(CI::ColorKernelNode *this)
{
  unsigned int v2 = (*(uint64_t (**)(CI::ColorKernelNode *))(*(void *)this + 16))(this);
  uint64_t v3 = CI::name_for_type(v2);
  return CFStringCreateWithFormat(0, 0, @"<CI::%s %p, %s>", v3, this, *(void *)(*((void *)this + 6) + 24));
}

uint64_t CI::ColorKernelNode::shape_for_graphviz(CI::ColorKernelNode *this)
{
  return 1;
}

uint64_t CI::ColorKernelNode::color_for_graphviz(CI::ColorKernelNode *this)
{
  if (*(unsigned char *)(*((void *)this + 6) + 165)) {
    return 4;
  }
  else {
    return 3;
  }
}

uint64_t CI::ColorKernelNode::is_position_invariant(CI::ColorKernelNode *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 165);
}

uint64_t CI::ColorKernelNode::output_format(CI::ColorKernelNode *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t non-virtual thunk to'CI::ColorKernelNode::type(CI::ColorKernelNode *this)
{
  return 49;
}

int *CI::SerialObjectPtrArray::for_each(int *result, uint64_t a2)
{
  if (*result >= 1)
  {
    uint64_t v3 = result;
    unint64_t v4 = 0;
    size_t v5 = result + 6;
    do
    {
      CGRect v6 = v5;
      if (v4 >= 0xA) {
        CGRect v6 = (int *)(*((void *)v3 + 2) + 8 * (v4 - 10));
      }
      uint64_t result = (int *)(*(uint64_t (**)(uint64_t, unint64_t, void))(a2 + 16))(a2, v4++, *(void *)v6);
      v5 += 2;
    }
    while ((uint64_t)v4 < *v3);
  }
  return result;
}

uint64_t ___ZN2CI20SerialObjectPtrArrayC1ERKS0__block_invoke(uint64_t a1, int a2, CI::Object *a3)
{
  return CI::SerialObjectPtrArray::append(*(void *)(a1 + 32), a3);
}

uint64_t CI::InstanceCounted<(CI::Type)49>::type()
{
  return 49;
}

void *CI::InstanceCounted<(CI::Type)49>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AFA8;
  atomic_fetch_add(&dword_1EB466E78[47], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)49>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AFA8;
  atomic_fetch_add(&dword_1EB466E78[47], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void CI::GeneralKernelNode::GeneralKernelNode(CI::Node *a1)
{
}

void CI::GeneralKernelNode::~GeneralKernelNode(CI::GeneralKernelNode *this)
{
  *(void *)this = &unk_1EE45C738;
  *((void *)this + 5) = &unk_1EE45C8F0;
  unsigned int v2 = (CI::Object *)*((void *)this + 6);
  if (v2 && *((unsigned char *)v2 + 12)) {
    CI::Object::unref(v2);
  }
  uint64_t v3 = (CI::SerialObjectPtrArray *)*((void *)this + 7);
  if (v3)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v3);
    MEMORY[0x1997023B0]();
  }
  _Block_release(*((const void **)this + 15));
  *((void *)this + 15) = 0;
  unint64_t v4 = (void *)*((void *)this + 8);
  if (v4)
  {
    *((void *)this + 9) = v4;
    operator delete(v4);
  }
  *((void *)this + 5) = &unk_1EE45B020;
  atomic_fetch_add(&dword_1EB466E78[49], 0xFFFFFFFF);

  CI::Node::~Node(this);
}

{
  uint64_t vars8;

  CI::GeneralKernelNode::~GeneralKernelNode(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::GeneralKernelNode::~GeneralKernelNode(CI::GeneralKernelNode *this)
{
}

{
  uint64_t vars8;

  CI::GeneralKernelNode::~GeneralKernelNode((CI::GeneralKernelNode *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

void CI::GeneralKernelNode::release_resources(CI::GeneralKernelNode *this)
{
  unsigned int v2 = (const void *)*((void *)this + 15);
  if (v2) {
    _Block_release(v2);
  }
  *((void *)this + 15) = 0;
}

BOOL CI::GeneralKernelNode::alpha_one(CI::GeneralKernelNode *this)
{
  BOOL result = 1;
  if (!*((unsigned char *)this + 128))
  {
    if (!*(unsigned char *)(*((void *)this + 6) + 160)) {
      return 0;
    }
    if (!(*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0)) {
      return 0;
    }
    uint64_t v3 = (*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0);
    v5.origin.CGFloat x = (*(double (**)(uint64_t))(*(void *)v3 + 160))(v3);
    if (!CGRectIsInfinite(v5)) {
      return 0;
    }
    uint64_t v4 = *(void *)(*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0);
    if (((*(uint64_t (**)(void))(v4 + 264))() & 1) == 0) {
      return 0;
    }
  }
  return result;
}

BOOL CI::GeneralKernelNode::output_is_rg(CI::GeneralKernelNode *this)
{
  int v2 = *((_DWORD *)this + 33);
  BOOL result = 1;
  if (!v2 || (CI::format_is_rg(v2) & 1) == 0)
  {
    if (!*(unsigned char *)(*((void *)this + 6) + 160)) {
      return 0;
    }
    if (!(*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0)) {
      return 0;
    }
    uint64_t v3 = (*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0);
    v6.origin.CGFloat x = (*(double (**)(uint64_t))(*(void *)v3 + 160))(v3);
    if (!CGRectIsInfinite(v6)) {
      return 0;
    }
    uint64_t v4 = *(void *)(*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0);
    if (((*(uint64_t (**)(void))(v4 + 272))() & 1) == 0) {
      return 0;
    }
  }
  return result;
}

BOOL CI::GeneralKernelNode::output_is_r(CI::GeneralKernelNode *this)
{
  int v2 = *((_DWORD *)this + 33);
  BOOL result = 1;
  if (!v2 || (CI::format_is_r(v2) & 1) == 0)
  {
    if (!*(unsigned char *)(*((void *)this + 6) + 160)) {
      return 0;
    }
    if (!(*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0)) {
      return 0;
    }
    uint64_t v3 = (*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0);
    v6.origin.CGFloat x = (*(double (**)(uint64_t))(*(void *)v3 + 160))(v3);
    if (!CGRectIsInfinite(v6)) {
      return 0;
    }
    uint64_t v4 = *(void *)(*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0);
    if (((*(uint64_t (**)(void))(v4 + 280))() & 1) == 0) {
      return 0;
    }
  }
  return result;
}

BOOL CI::GeneralKernelNode::output_is_luma(CI::GeneralKernelNode *this)
{
  int v2 = *((_DWORD *)this + 33);
  BOOL result = 1;
  if (!v2
    || !CI::format_is_luminance(v2)
    || ((*(uint64_t (**)(CI::GeneralKernelNode *))(*(void *)this + 264))(this) & 1) == 0)
  {
    if (!*(unsigned char *)(*((void *)this + 6) + 160)) {
      return 0;
    }
    if (!(*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0)) {
      return 0;
    }
    uint64_t v3 = (*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0);
    v6.origin.CGFloat x = (*(double (**)(uint64_t))(*(void *)v3 + 160))(v3);
    if (!CGRectIsInfinite(v6)) {
      return 0;
    }
    uint64_t v4 = *(void *)(*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0);
    if (((*(uint64_t (**)(void))(v4 + 288))() & 1) == 0) {
      return 0;
    }
  }
  return result;
}

uint64_t CI::GeneralKernelNode::output_depth(CI::GeneralKernelNode *this)
{
  int v2 = *((_DWORD *)this + 33);
  if (v2)
  {
    if (CI::format_is_deep(v2)) {
      return 1;
    }
    else {
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    if (!*(unsigned char *)(*((void *)this + 6) + 163)) {
      return 0;
    }
    uint64_t result = (*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0);
    if (!result) {
      return result;
    }
    uint64_t v4 = *(void *)(*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0);
    if ((*(int (**)(void))(v4 + 304))() >= 1)
    {
      CGRect v5 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::GeneralKernelNode *, void))(*(void *)this + 48))(this, 0)+ 304);
      return v5();
    }
    else
    {
      return 0;
    }
  }
}

uint64_t CI::GeneralKernelNode::print_for_graph_core(uint64_t a1, FILE *a2, void *a3, int a4)
{
  uint64_t result = fprintf(a2, "kernel %s", *(const char **)(*(void *)(a1 + 48) + 24));
  uint64_t v8 = **(unsigned int **)(a1 + 56);
  if ((int)v8 >= 1)
  {
    int64_t v9 = 0;
    uint64_t v10 = 24;
    do
    {
      uint64_t v11 = *(void *)(a1 + 56);
      if ((unint64_t)v9 > 9) {
        uint64_t v12 = (_DWORD **)(*(void *)(v11 + 16) + 8 * (v9 - 10));
      }
      else {
        uint64_t v12 = (_DWORD **)(v11 + v10);
      }
      uint64_t v13 = *v12;
      if (a4)
      {
        if (v9) {
          int v14 = 44;
        }
        else {
          int v14 = 40;
        }
        fputc(v14, a2);
        uint64_t v15 = *(void *)(a1 + 48);
        if (*(unsigned char *)(v15 + 12))
        {
          name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v15 + 144), v9);
        }
        else if (v9 >= *(int *)(v15 + 20))
        {
          name = 0;
        }
        else
        {
          name = *(const char **)(*(void *)(v15 + 80) + 8 * v9);
        }
        fputs(name, a2);
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 48);
        if (*(unsigned char *)(v17 + 12))
        {
          CGRect v18 = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v17 + 144), v9);
        }
        else if (v9 >= *(int *)(v17 + 20))
        {
          CGRect v18 = 0;
        }
        else
        {
          CGRect v18 = *(const char **)(*(void *)(v17 + 80) + 8 * v9);
        }
        fprintf(a2, "\n%s", v18);
      }
      if ((*(int (**)(_DWORD *))(*(void *)v13 + 16))(v13) < 27
        || (*(int (**)(_DWORD *))(*(void *)v13 + 16))(v13) > 52)
      {
        fputc(61, a2);
        uint64_t result = (*(uint64_t (**)(_DWORD *, FILE *, void))(*(void *)v13 + 32))(v13, a2, 0);
      }
      else
      {
        if (CI_GRAPHVIZ_INTERNAL())
        {
          int v19 = v13[9];
LABEL_29:
          uint64_t result = fprintf(a2, "=(%d)", v19);
          goto LABEL_30;
        }
        long long v29 = v13;
        uint64_t result = (uint64_t)std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v29);
        if (result)
        {
          int v19 = *(_DWORD *)(result + 24);
          goto LABEL_29;
        }
      }
LABEL_30:
      ++v9;
      v10 += 8;
    }
    while (v8 != v9);
  }
  if (v8) {
    BOOL v20 = a4 == 0;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20) {
    uint64_t result = fputc(41, a2);
  }
  if ((a4 & 1) == 0)
  {
    CFDictionaryRef v21 = (const __CFDictionary *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
    if (v21)
    {
      v28[0] = MEMORY[0x1E4F143A8];
      v28[1] = 0x40000000;
      v28[2] = ___ZNK2CI17GeneralKernelNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke;
      v28[3] = &__block_descriptor_tmp_22;
      _OWORD v28[4] = a2;
      __CFDictionary::for_each(v21, v28);
    }
    uint64_t result = *(unsigned int *)(a1 + 132);
    if (result)
    {
      double v22 = CI::name_for_format(result);
      uint64_t result = fprintf(a2, "\noutputFormat=%s", v22);
    }
    int v23 = *(_DWORD *)(a1 + 136);
    if (v23)
    {
      if (*(_DWORD *)(a1 + 140))
      {
        int v24 = *(_DWORD *)(a1 + 144);
        if (v24) {
          uint64_t result = fprintf(a2, "\nthreadsPerGroup=(%d,%d,%d)", v23, *(_DWORD *)(a1 + 140), v24);
        }
      }
    }
    int v25 = *(_DWORD *)(a1 + 148);
    if (v25 && *(_DWORD *)(a1 + 152))
    {
      int v26 = *(_DWORD *)(a1 + 156);
      if (v26) {
        return fprintf(a2, "\nthreadgroupsPerGrid=(%d,%d,%d)", v25, *(_DWORD *)(a1 + 152), v26);
      }
    }
  }
  return result;
}

void ___ZNK2CI17GeneralKernelNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke(uint64_t a1, __CFObject *a2, __CFObject *a3)
{
  fputc(10, *(FILE **)(a1 + 32));
  __CFObject::fprint(a2, *(FILE **)(a1 + 32), v6);
  fputc(61, *(FILE **)(a1 + 32));
  uint64_t v8 = *(FILE **)(a1 + 32);

  __CFObject::fprint(a3, v8, v7);
}

uint64_t CI::GeneralKernelNode::code_complexity(CI::GeneralKernelNode *this)
{
  double v1 = *(unsigned char **)(*((void *)this + 6) + 32);
  if (v1)
  {
    uint64_t result = 0;
    while (1)
    {
      if (*v1 == 59)
      {
        ++result;
      }
      else if (!*v1)
      {
        return result;
      }
      ++v1;
    }
  }
  return 0;
}

double CI::GeneralKernelNode::roi_of_child(CI::GeneralKernelNode *this, CGRect a2, uint64_t a3)
{
  double height = a2.size.height;
  double width = a2.size.width;
  double y = a2.origin.y;
  double x = a2.origin.x;
  if ((a3 & 0x80000000) == 0 && **((_DWORD **)this + 7) > (int)a3)
  {
    if ((*(unsigned int (**)(CI::GeneralKernelNode *, uint64_t))(*(void *)this + 192))(this, a3))
    {
      uint64_t v9 = *((void *)this + 15);
      if (v9) {
        return (*(double (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 16))(v9, a3, x, y, width, height);
      }
      uint64_t v10 = ci_logger_render();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        CI::GeneralKernelNode::roi_of_child((uint64_t)this, v10);
      }
      uint64_t v9 = *((void *)this + 15);
      if (v9) {
        return (*(double (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 16))(v9, a3, x, y, width, height);
      }
    }
    else
    {
      return *MEMORY[0x1E4F1DB10];
    }
  }
  return x;
}

uint64_t CI::GeneralKernelNode::child_count(CI::GeneralKernelNode *this)
{
  uint64_t v1 = **((unsigned int **)this + 7);
  if ((int)v1 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    while (1)
    {
      uint64_t v5 = *((void *)this + 6);
      if (*(unsigned char *)(v5 + 12)) {
        break;
      }
      if (v3 < *(int *)(v5 + 20))
      {
        unsigned int type = *(_DWORD *)(*(void *)(v5 + 72) + 4 * v3);
        goto LABEL_7;
      }
LABEL_13:
      if (v1 == ++v3) {
        return v4;
      }
    }
    unsigned int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v5 + 144), v3);
LABEL_7:
    if (type > 4 || ((1 << type) & 0x16) == 0) {
      uint64_t v4 = v4;
    }
    else {
      uint64_t v4 = (v4 + 1);
    }
    goto LABEL_13;
  }
  return 0;
}

uint64_t CI::GeneralKernelNode::child(CI::GeneralKernelNode *this, int a2)
{
  uint64_t v2 = **((unsigned int **)this + 7);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v8 = *((void *)this + 6);
    if (*(unsigned char *)(v8 + 12))
    {
      unsigned int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v8 + 144), v5);
      goto LABEL_7;
    }
    if (v5 < *(int *)(v8 + 20)) {
      break;
    }
LABEL_13:
    if (v2 == ++v5) {
      return 0;
    }
  }
  unsigned int type = *(_DWORD *)(*(void *)(v8 + 72) + 4 * v5);
LABEL_7:
  if (type > 4 || ((1 << type) & 0x16) == 0) {
    goto LABEL_13;
  }
  if (v6 != a2)
  {
    ++v6;
    goto LABEL_13;
  }
  uint64_t v12 = *((void *)this + 7);
  if (v5 > 9) {
    uint64_t v13 = *(void *)(v12 + 16) + 8 * (v5 - 10);
  }
  else {
    uint64_t v13 = v12 + i;
  }
  return *(void *)v13;
}

BOOL CI::GeneralKernelNode::child_type_is_image(CI::GeneralKernelNode *this, int a2)
{
  uint64_t v2 = **((unsigned int **)this + 7);
  if ((int)v2 < 1) {
    return 0;
  }
  uint64_t v5 = 0;
  int v6 = 0;
  while (1)
  {
    uint64_t v7 = *((void *)this + 6);
    if (*(unsigned char *)(v7 + 12))
    {
      unsigned int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v7 + 144), v5);
      goto LABEL_7;
    }
    if (v5 < *(int *)(v7 + 20)) {
      break;
    }
LABEL_13:
    if (v2 == ++v5) {
      return 0;
    }
  }
  unsigned int type = *(_DWORD *)(*(void *)(v7 + 72) + 4 * v5);
LABEL_7:
  if (type > 4 || ((1 << type) & 0x16) == 0) {
    goto LABEL_13;
  }
  if (v6 != a2)
  {
    ++v6;
    goto LABEL_13;
  }
  return type - 1 < 2;
}

uint64_t CI::GeneralKernelNode::child_is_ArgumentTypeSampler(CI::GeneralKernelNode *this, int a2)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 7);
  unint64_t v3 = *v2;
  if ((int)v3 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    BOOL v8 = 1;
    while (1)
    {
      uint64_t v2 = (unsigned int *)*((void *)this + 6);
      if (*((unsigned char *)v2 + 12))
      {
        unsigned int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v2 + 36), v6);
      }
      else
      {
        if (v6 >= (int)v2[5]) {
          goto LABEL_13;
        }
        unsigned int type = *(_DWORD *)(*((void *)v2 + 9) + 4 * v6);
      }
      LODWORD(v2) = (1 << type) & 0x16;
      if (type <= 4 && v2 != 0)
      {
        if (v7 == a2)
        {
          LODWORD(v2) = type == 2;
          return v8 & v2 & 1;
        }
        ++v7;
      }
LABEL_13:
      BOOL v8 = ++v6 < v3;
      if (v3 == v6) {
        return v8 & v2 & 1;
      }
    }
  }
  BOOL v8 = 0;
  return v8 & v2 & 1;
}

uint64_t CI::GeneralKernelNode::child_is_ArgumentTypeSample(CI::GeneralKernelNode *this, int a2)
{
  uint64_t v2 = (unsigned int *)*((void *)this + 7);
  unint64_t v3 = *v2;
  if ((int)v3 >= 1)
  {
    uint64_t v6 = 0;
    int v7 = 0;
    BOOL v8 = 1;
    while (1)
    {
      uint64_t v2 = (unsigned int *)*((void *)this + 6);
      if (*((unsigned char *)v2 + 12))
      {
        unsigned int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v2 + 36), v6);
      }
      else
      {
        if (v6 >= (int)v2[5]) {
          goto LABEL_13;
        }
        unsigned int type = *(_DWORD *)(*((void *)v2 + 9) + 4 * v6);
      }
      LODWORD(v2) = (1 << type) & 0x16;
      if (type <= 4 && v2 != 0)
      {
        if (v7 == a2)
        {
          LODWORD(v2) = type == 1;
          return v8 & v2 & 1;
        }
        ++v7;
      }
LABEL_13:
      BOOL v8 = ++v6 < v3;
      if (v3 == v6) {
        return v8 & v2 & 1;
      }
    }
  }
  BOOL v8 = 0;
  return v8 & v2 & 1;
}

void CI::GeneralKernelNode::set_child(CI::GeneralKernelNode *this, CI::Node *a2, int a3)
{
  if (a3 < 0) {
    return;
  }
  uint64_t v4 = **((unsigned int **)this + 7);
  if ((int)v4 < 1) {
    return;
  }
  uint64_t v7 = 0;
  int v8 = 0;
  while (1)
  {
    uint64_t v9 = *((void *)this + 6);
    if (*(unsigned char *)(v9 + 12))
    {
      unsigned int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v9 + 144), v7);
      goto LABEL_8;
    }
    if (v7 < *(int *)(v9 + 20)) {
      break;
    }
LABEL_14:
    if (v4 == ++v7) {
      return;
    }
  }
  unsigned int type = *(_DWORD *)(*(void *)(v9 + 72) + 4 * v7);
LABEL_8:
  if (type > 4 || ((1 << type) & 0x16) == 0) {
    goto LABEL_14;
  }
  if (v8 != a3)
  {
    ++v8;
    goto LABEL_14;
  }
  uint64_t v12 = (CI::SerialObjectPtrArray *)*((void *)this + 7);

  CI::SerialObjectPtrArray::replace(v12, a2, v7);
}

CFStringRef CI::GeneralKernelNode::description(CI::GeneralKernelNode *this)
{
  unsigned int v2 = (*(uint64_t (**)(CI::GeneralKernelNode *))(*(void *)this + 16))(this);
  unint64_t v3 = CI::name_for_type(v2);
  return CFStringCreateWithFormat(0, 0, @"<CI::%s %p [%s]>", v3, this, *(void *)(*((void *)this + 6) + 24));
}

uint64_t CI::GeneralKernelNode::add_args_to_hash(CI::GeneralKernelNode *this, CI::XXHashHelper *a2)
{
  (*(void (**)(CI::GeneralKernelNode *))(*(void *)this + 392))(this);
  uint64_t v4 = **((unsigned int **)this + 7);
  if ((int)v4 >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 24;
    do
    {
      uint64_t v7 = *((void *)this + 7);
      if (v5 > 9) {
        int v8 = (CI::XXHashHelper **)(*(void *)(v7 + 16) + 8 * (v5 - 10));
      }
      else {
        int v8 = (CI::XXHashHelper **)(v7 + v6);
      }
      CI::Kernel::add_argument_to_digest(a2, *v8, 0);
      ++v5;
      v6 += 8;
    }
    while (v4 != v5);
  }
  uint64_t __src = (*(uint64_t (**)(void))(**((void **)this + 6) + 56))(*((void *)this + 6));
  return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
}

void CI::GeneralKernelNode::append_to_tree()
{
}

uint64_t CI::GeneralKernelNode::type(CI::GeneralKernelNode *this)
{
  return 51;
}

uint64_t CI::GeneralKernelNode::shape_for_graphviz(CI::GeneralKernelNode *this)
{
  return 1;
}

uint64_t CI::GeneralKernelNode::color_for_graphviz(CI::GeneralKernelNode *this)
{
  return 9;
}

uint64_t CI::GeneralKernelNode::short_name(CI::GeneralKernelNode *this)
{
  return *(void *)(*((void *)this + 6) + 24);
}

double CI::GeneralKernelNode::extent(CI::GeneralKernelNode *this)
{
  return *((double *)this + 11);
}

double CI::GeneralKernelNode::extent_unclamped(CI::GeneralKernelNode *this)
{
  return *((double *)this + 11);
}

BOOL CI::GeneralKernelNode::is_warp(CI::GeneralKernelNode *this)
{
  return (*(unsigned int (**)(void))(**((void **)this + 6) + 16))(*((void *)this + 6)) == 63;
}

uint64_t CI::GeneralKernelNode::is_position_invariant(CI::GeneralKernelNode *this)
{
  return *(unsigned __int8 *)(*((void *)this + 6) + 165);
}

uint64_t CI::GeneralKernelNode::may_be_extended_range(CI::GeneralKernelNode *this)
{
  return 1;
}

BOOL CI::GeneralKernelNode::is_color_general(CI::Kernel **this)
{
  return (int)CI::Kernel::num_sample_arguments(this[6]) > 0;
}

uint64_t CI::GeneralKernelNode::output_format(CI::GeneralKernelNode *this)
{
  return *((unsigned int *)this + 33);
}

uint64_t CI::GeneralKernelNode::add_to_kernel_hash(CI::GeneralKernelNode *this, CI::XXHashHelper *a2)
{
  return (*(uint64_t (**)(void, CI::XXHashHelper *))(**((void **)this + 6) + 64))(*((void *)this + 6), a2);
}

uint64_t non-virtual thunk to'CI::GeneralKernelNode::type(CI::GeneralKernelNode *this)
{
  return 51;
}

char *std::vector<CGRect>::__assign_with_size[abi:nn180100]<CGRect*,CGRect*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      void v7[2] = 0;
    }
    if (a4 >> 59) {
      abort();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<CGRect>::__vallocate[abi:nn180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      CGRect v18 = v9;
      int v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  int v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    CGRect v18 = v9;
    int v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t CI::InstanceCounted<(CI::Type)51>::type()
{
  return 51;
}

void *CI::InstanceCounted<(CI::Type)51>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45B020;
  atomic_fetch_add(&dword_1EB466E78[49], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)51>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B020;
  atomic_fetch_add(&dword_1EB466E78[49], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::WarpKernelNode::~WarpKernelNode(CI::WarpKernelNode *this)
{
}

{
  uint64_t vars8;

  CI::WarpKernelNode::~WarpKernelNode((CI::WarpKernelNode *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

void CI::WarpKernelNode::release_resources(CI::WarpKernelNode *this)
{
  unsigned int v2 = (const void *)*((void *)this + 12);
  if (v2) {
    _Block_release(v2);
  }
  *((void *)this + 12) = 0;
}

BOOL CI::WarpKernelNode::child_type_is_image(CI::WarpKernelNode *this, int a2)
{
  uint64_t v2 = **((unsigned int **)this + 7);
  if ((int)v2 < 1) {
    return 0;
  }
  unint64_t v5 = 0;
  int v6 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v8 = *((void *)this + 7);
    if (v5 > 9) {
      uint64_t v9 = (void *)(*(void *)(v8 + 16) + 8 * (v5 - 10));
    }
    else {
      uint64_t v9 = (void *)(v8 + i);
    }
    uint64_t v10 = *v9;
    if ((*(int (**)(void))(*(void *)*v9 + 16))(*v9) < 27
      || (*(int (**)(uint64_t))(*(void *)v10 + 16))(v10) > 52)
    {
      goto LABEL_10;
    }
    if (v6 == a2) {
      break;
    }
    ++v6;
LABEL_10:
    if (v2 == ++v5) {
      return 0;
    }
  }
  uint64_t v12 = *((void *)this + 6);
  if (*(unsigned char *)(v12 + 12)) {
    int v13 = CI::KernelArguments::count((CI::KernelArguments *)(v12 + 144));
  }
  else {
    int v13 = *(_DWORD *)(v12 + 20);
  }
  if (v13 <= (int)v5) {
    return 1;
  }
  uint64_t v14 = *((void *)this + 6);
  if (*(unsigned char *)(v14 + 12))
  {
    int type = CI::KernelArguments::get_type((CI::KernelArguments *)(v14 + 144), v5);
  }
  else if (*(_DWORD *)(v14 + 20) <= (int)v5)
  {
    int type = 0;
  }
  else
  {
    int type = *(_DWORD *)(*(void *)(v14 + 72) + 4 * v5);
  }
  return type != 4;
}

uint64_t CI::WarpKernelNode::child_count(CI::WarpKernelNode *this)
{
  uint64_t v1 = **((unsigned int **)this + 7);
  if ((int)v1 < 1) {
    return 0;
  }
  unint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = 24;
  do
  {
    uint64_t v6 = *((void *)this + 7);
    if (v3 > 9) {
      uint64_t v7 = (void *)(*(void *)(v6 + 16) + 8 * (v3 - 10));
    }
    else {
      uint64_t v7 = (void *)(v6 + v5);
    }
    uint64_t v8 = *v7;
    if ((*(int (**)(void))(*(void *)*v7 + 16))(*v7) >= 27)
    {
      if ((*(int (**)(uint64_t))(*(void *)v8 + 16))(v8) >= 53) {
        uint64_t v4 = v4;
      }
      else {
        uint64_t v4 = (v4 + 1);
      }
    }
    ++v3;
    v5 += 8;
  }
  while (v1 != v3);
  return v4;
}

uint64_t CI::WarpKernelNode::child(CI::WarpKernelNode *this, int a2)
{
  uint64_t v2 = **((unsigned int **)this + 7);
  if ((int)v2 >= 1)
  {
    unint64_t v5 = 0;
    int v6 = 0;
    uint64_t v7 = 24;
    do
    {
      uint64_t v8 = *((void *)this + 7);
      if (v5 > 9) {
        uint64_t v9 = (void *)(*(void *)(v8 + 16) + 8 * (v5 - 10));
      }
      else {
        uint64_t v9 = (void *)(v8 + v7);
      }
      uint64_t v10 = *v9;
      if ((*(int (**)(void))(*(void *)*v9 + 16))(*v9) >= 27
        && (*(int (**)(uint64_t))(*(void *)v10 + 16))(v10) <= 52)
      {
        if (v6 == a2) {
          return v10;
        }
        ++v6;
      }
      ++v5;
      v7 += 8;
    }
    while (v2 != v5);
  }
  return 0;
}

BOOL CI::WarpKernelNode::output_is_rg(CI::WarpKernelNode *this)
{
  v5.origin.double x = (*(double (**)(CI::WarpKernelNode *))(*(void *)this + 160))(this);
  BOOL result = 0;
  if (CGRectIsInfinite(v5))
  {
    uint64_t v2 = (*(uint64_t (**)(CI::WarpKernelNode *, void))(*(void *)this + 48))(this, 0);
    v6.origin.double x = (*(double (**)(uint64_t))(*(void *)v2 + 160))(v2);
    if (CGRectIsInfinite(v6))
    {
      uint64_t v3 = *(void *)(*(uint64_t (**)(CI::WarpKernelNode *, void))(*(void *)this + 48))(this, 0);
      if ((*(uint64_t (**)(void))(v3 + 272))()) {
        return 1;
      }
    }
  }
  return result;
}

BOOL CI::WarpKernelNode::output_is_r(CI::WarpKernelNode *this)
{
  v5.origin.double x = (*(double (**)(CI::WarpKernelNode *))(*(void *)this + 160))(this);
  BOOL result = 0;
  if (CGRectIsInfinite(v5))
  {
    uint64_t v2 = (*(uint64_t (**)(CI::WarpKernelNode *, void))(*(void *)this + 48))(this, 0);
    v6.origin.double x = (*(double (**)(uint64_t))(*(void *)v2 + 160))(v2);
    if (CGRectIsInfinite(v6))
    {
      uint64_t v3 = *(void *)(*(uint64_t (**)(CI::WarpKernelNode *, void))(*(void *)this + 48))(this, 0);
      if ((*(uint64_t (**)(void))(v3 + 280))()) {
        return 1;
      }
    }
  }
  return result;
}

BOOL CI::WarpKernelNode::output_is_luma(CI::WarpKernelNode *this)
{
  v5.origin.double x = (*(double (**)(CI::WarpKernelNode *))(*(void *)this + 160))(this);
  BOOL result = 0;
  if (CGRectIsInfinite(v5))
  {
    uint64_t v2 = (*(uint64_t (**)(CI::WarpKernelNode *, void))(*(void *)this + 48))(this, 0);
    v6.origin.double x = (*(double (**)(uint64_t))(*(void *)v2 + 160))(v2);
    if (CGRectIsInfinite(v6))
    {
      uint64_t v3 = *(void *)(*(uint64_t (**)(CI::WarpKernelNode *, void))(*(void *)this + 48))(this, 0);
      if ((*(uint64_t (**)(void))(v3 + 288))()) {
        return 1;
      }
    }
  }
  return result;
}

void CI::WarpKernelNode::append_to_tree()
{
}

void CI::WarpKernelNode::set_child(CI::WarpKernelNode *this, CI::Node *a2, int a3)
{
  if (a3 < 0) {
    return;
  }
  uint64_t v4 = **((unsigned int **)this + 7);
  if ((int)v4 < 1) {
    return;
  }
  unint64_t v7 = 0;
  int v8 = 0;
  for (uint64_t i = 24; ; i += 8)
  {
    uint64_t v10 = *((void *)this + 7);
    if (v7 > 9) {
      unint64_t v11 = (void *)(*(void *)(v10 + 16) + 8 * (v7 - 10));
    }
    else {
      unint64_t v11 = (void *)(v10 + i);
    }
    uint64_t v12 = *v11;
    if ((*(int (**)(void))(*(void *)*v11 + 16))(*v11) < 27
      || (*(int (**)(uint64_t))(*(void *)v12 + 16))(v12) > 52)
    {
      goto LABEL_11;
    }
    if (v8 == a3) {
      break;
    }
    ++v8;
LABEL_11:
    if (v4 == ++v7) {
      return;
    }
  }
  int v13 = (CI::SerialObjectPtrArray *)*((void *)this + 7);

  CI::SerialObjectPtrArray::replace(v13, a2, v7);
}

void CI::WarpKernelNode::print_for_graph_core(uint64_t a1, FILE *a2, uint64_t a3, int a4)
{
  fprintf(a2, "warpkernel %s", *(const char **)(*(void *)(a1 + 48) + 24));
  int v7 = **(_DWORD **)(a1 + 56);
  uint64_t v8 = v7
     - ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48)) == 63);
  if ((int)v8 >= 1)
  {
    int64_t v9 = 0;
    uint64_t v10 = 24;
    do
    {
      uint64_t v11 = *(void *)(a1 + 56);
      if ((unint64_t)v9 > 9) {
        uint64_t v12 = (uint64_t *)(*(void *)(v11 + 16) + 8 * (v9 - 10));
      }
      else {
        uint64_t v12 = (uint64_t *)(v11 + v10);
      }
      uint64_t v13 = *v12;
      if (a4)
      {
        if (v9) {
          int v14 = 44;
        }
        else {
          int v14 = 40;
        }
        fputc(v14, a2);
        uint64_t v15 = *(void *)(a1 + 48);
        if (*(unsigned char *)(v15 + 12))
        {
          name = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v15 + 144), v9);
        }
        else if (v9 >= *(int *)(v15 + 20))
        {
          name = 0;
        }
        else
        {
          name = *(const char **)(*(void *)(v15 + 80) + 8 * v9);
        }
        fputs(name, a2);
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 48);
        if (*(unsigned char *)(v17 + 12))
        {
          CGRect v18 = (const char *)CI::KernelArguments::get_name((CI::KernelArguments *)(v17 + 144), v9);
        }
        else if (v9 >= *(int *)(v17 + 20))
        {
          CGRect v18 = 0;
        }
        else
        {
          CGRect v18 = *(const char **)(*(void *)(v17 + 80) + 8 * v9);
        }
        fprintf(a2, "\n%s", v18);
      }
      if ((*(int (**)(uint64_t))(*(void *)v13 + 16))(v13) < 27
        || (*(int (**)(uint64_t))(*(void *)v13 + 16))(v13) >= 53)
      {
        fputc(61, a2);
        (*(void (**)(uint64_t, FILE *, void))(*(void *)v13 + 32))(v13, a2, 0);
      }
      ++v9;
      v10 += 8;
    }
    while (v8 != v9);
  }
  if v8 && (a4) {
    fputc(41, a2);
  }
  if ((a4 & 1) == 0)
  {
    CFDictionaryRef v19 = (const __CFDictionary *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 40))(*(void *)(a1 + 48));
    if (v19)
    {
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 0x40000000;
      _OWORD v20[2] = ___ZNK2CI14WarpKernelNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke;
      v20[3] = &__block_descriptor_tmp_23;
      v20[4] = a2;
      __CFDictionary::for_each(v19, v20);
    }
  }
}

void ___ZNK2CI14WarpKernelNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke(uint64_t a1, __CFObject *a2, __CFObject *a3)
{
  fputc(10, *(FILE **)(a1 + 32));
  __CFObject::fprint(a2, *(FILE **)(a1 + 32), v6);
  fputc(61, *(FILE **)(a1 + 32));
  uint64_t v8 = *(FILE **)(a1 + 32);

  __CFObject::fprint(a3, v8, v7);
}

CFStringRef CI::WarpKernelNode::description(CI::WarpKernelNode *this)
{
  unsigned int v2 = (*(uint64_t (**)(CI::WarpKernelNode *))(*(void *)this + 16))(this);
  uint64_t v3 = CI::name_for_type(v2);
  return CFStringCreateWithFormat(0, 0, @"<CI::%s %p, %s>", v3, this, *(void *)(*((void *)this + 6) + 24));
}

uint64_t CI::WarpKernelNode::code_complexity(CI::WarpKernelNode *this)
{
  uint64_t v1 = *(unsigned char **)(*((void *)this + 6) + 32);
  if (v1)
  {
    uint64_t result = 0;
    while (1)
    {
      if (*v1 == 59)
      {
        ++result;
      }
      else if (!*v1)
      {
        return result;
      }
      ++v1;
    }
  }
  return 0;
}

double CI::WarpKernelNode::roi_of_child(CI::WarpKernelNode *this, CGRect a2, uint64_t a3)
{
  double height = a2.size.height;
  double width = a2.size.width;
  double y = a2.origin.y;
  double x = a2.origin.x;
  if (a3 <= 1)
  {
    uint64_t v9 = *((void *)this + 12);
    if (v9) {
      return (*(double (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 16))(v9, a3, x, y, width, height);
    }
    uint64_t v10 = ci_logger_render();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      CI::WarpKernelNode::roi_of_child((uint64_t)this, v10);
    }
    uint64_t v9 = *((void *)this + 12);
    if (v9) {
      return (*(double (**)(uint64_t, uint64_t, double, double, double, double))(v9 + 16))(v9, a3, x, y, width, height);
    }
  }
  return x;
}

uint64_t CI::WarpKernelNode::add_args_to_hash(CI::WarpKernelNode *this, CI::XXHashHelper *a2)
{
  (*(void (**)(CI::WarpKernelNode *))(*(void *)this + 392))(this);
  uint64_t v4 = **((unsigned int **)this + 7);
  if ((int)v4 >= 1)
  {
    unint64_t v5 = 0;
    uint64_t v6 = 24;
    do
    {
      uint64_t v7 = *((void *)this + 7);
      if (v5 > 9) {
        uint64_t v8 = (CI::XXHashHelper **)(*(void *)(v7 + 16) + 8 * (v5 - 10));
      }
      else {
        uint64_t v8 = (CI::XXHashHelper **)(v7 + v6);
      }
      CI::Kernel::add_argument_to_digest(a2, *v8, 0);
      ++v5;
      v6 += 8;
    }
    while (v4 != v5);
  }
  uint64_t __src = (*(uint64_t (**)(void))(**((void **)this + 6) + 56))(*((void *)this + 6));
  return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
}

uint64_t CI::WarpKernelNode::shape_for_graphviz(CI::WarpKernelNode *this)
{
  return 1;
}

uint64_t CI::WarpKernelNode::color_for_graphviz(CI::WarpKernelNode *this)
{
  return 5;
}

uint64_t CI::WarpKernelNode::short_name(CI::WarpKernelNode *this)
{
  return *(void *)(*((void *)this + 6) + 24);
}

double CI::WarpKernelNode::extent(CI::WarpKernelNode *this)
{
  return *((double *)this + 8);
}

double CI::WarpKernelNode::extent_unclamped(CI::WarpKernelNode *this)
{
  return *((double *)this + 8);
}

uint64_t CI::WarpKernelNode::is_warp(CI::WarpKernelNode *this)
{
  return 1;
}

uint64_t CI::WarpKernelNode::is_position_invariant(CI::WarpKernelNode *this)
{
  return 0;
}

uint64_t CI::WarpKernelNode::may_be_extended_range(CI::WarpKernelNode *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::WarpKernelNode *, void))(*(void *)this + 48))(this, 0)+ 256);

  return v1();
}

uint64_t CI::WarpKernelNode::alpha_one(CI::WarpKernelNode *this)
{
  uint64_t v2 = (*(uint64_t (**)(CI::WarpKernelNode *, void))(*(void *)this + 48))(this, 0);
  v6.origin.double x = (*(double (**)(uint64_t))(*(void *)v2 + 160))(v2);
  uint64_t result = CGRectIsInfinite(v6);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::WarpKernelNode *, void))(*(void *)this
                                                                                                  + 48))(this, 0)+ 264);
    return v4();
  }
  return result;
}

uint64_t CI::WarpKernelNode::output_depth(CI::WarpKernelNode *this)
{
  uint64_t v1 = *(uint64_t (**)(void))(*(void *)(*(uint64_t (**)(CI::WarpKernelNode *, void))(*(void *)this + 48))(this, 0)+ 304);

  return v1();
}

uint64_t CI::WarpKernelNode::output_format(CI::WarpKernelNode *this)
{
  return 0;
}

uint64_t CI::WarpKernelNode::add_to_kernel_hash(CI::WarpKernelNode *this, CI::XXHashHelper *a2)
{
  return (*(uint64_t (**)(void, CI::XXHashHelper *))(**((void **)this + 6) + 64))(*((void *)this + 6), a2);
}

uint64_t non-virtual thunk to'CI::WarpKernelNode::type(CI::WarpKernelNode *this)
{
  return 50;
}

uint64_t CI::InstanceCounted<(CI::Type)50>::type()
{
  return 50;
}

void *CI::InstanceCounted<(CI::Type)50>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AFF8;
  atomic_fetch_add(&dword_1EB466E78[48], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)50>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AFF8;
  atomic_fetch_add(&dword_1EB466E78[48], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

size_t CI::NoopNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  switch(*(_DWORD *)(a1 + 56))
  {
    case 1:
      uint64_t v3 = "noop_full_intermediate";
      size_t v4 = 22;
      break;
    case 2:
      uint64_t v3 = "noop_intermediate_uncached";
      size_t v4 = 26;
      break;
    case 3:
      uint64_t v3 = "noop_intermediate_cached";
      size_t v4 = 24;
      break;
    case 4:
      uint64_t v3 = "noop_affine";
      size_t v4 = 11;
      break;
    case 5:
      uint64_t v3 = "noop_multiuse";
      size_t v4 = 13;
      break;
    case 6:
      uint64_t v3 = "noop_samplemode";
      size_t v4 = 15;
      break;
    case 7:
      uint64_t v3 = "noop_disablemerging";
      size_t v4 = 19;
      break;
    default:
      uint64_t v3 = "noop_intermediate";
      size_t v4 = 17;
      break;
  }
  return fwrite(v3, v4, 1uLL, __stream);
}

void CI::NoopNode::append_to_tree_and_unref()
{
}

CI::Node *CI::NoopNode::program_graph(CI::NoopNode *this, CI::Context *a2, CI::NodeToNodeMap *a3, uint64_t a4)
{
  uint64_t v8 = (CI::Node *)CI::NodeToNodeMap::findAndRef(a3, this);
  if (!v8)
  {
    uint64_t v8 = (CI::Node *)(*(uint64_t (**)(void, CI::Context *, CI::NodeToNodeMap *, uint64_t))(**((void **)this + 5) + 328))(*((void *)this + 5), a2, a3, a4);
    (*(void (**)(CI::Node *))(*(void *)v8 + 16))(v8);
    if ((*(unsigned int (**)(CI::Node *))(*(void *)v8 + 16))(v8) == 52)
    {
      uint64_t v9 = (void *)((char *)v8 + 140);
      uint64_t v13 = *(void *)((char *)v8 + 140);
      int v10 = *((_DWORD *)v8 + 38);
      int v14 = *((_DWORD *)v8 + 37);
      if ((*(unsigned int (**)(CI::NoopNode *))(*(void *)this + 408))(this) == 3)
      {
        if (v10 <= 7) {
          int v10 = 7;
        }
        *uint64_t v9 = v13;
        *((_DWORD *)v8 + 37) = v14;
        *((_DWORD *)v8 + 38) = v10;
      }
      if ((*(unsigned int (**)(CI::NoopNode *))(*(void *)this + 408))(this) == 2)
      {
        *uint64_t v9 = v13;
        *((_DWORD *)v8 + 37) = v14;
        int v10 = -1;
        *((_DWORD *)v8 + 38) = -1;
      }
      if ((*(unsigned int (**)(CI::NoopNode *))(*(void *)this + 408))(this) == 1)
      {
        if (v10 < 2) {
          int v11 = 2;
        }
        else {
          int v11 = v10;
        }
        *uint64_t v9 = v13;
        *((_DWORD *)v8 + 37) = v14;
        *((_DWORD *)v8 + 38) = v11;
      }
    }
    CI::NodeToNodeMap::add(a3, this, v8);
  }
  return v8;
}

void CI::NoopNode::~NoopNode(CI::NoopNode *this)
{
  *((void *)this + 6) = &unk_1EE45AE40;
  atomic_fetch_add(&dword_1EB466E78[37], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  uint64_t vars8;

  *((void *)this + 6) = &unk_1EE45AE40;
  atomic_fetch_add(&dword_1EB466E78[37], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::NoopNode::type(CI::NoopNode *this)
{
  return 39;
}

uint64_t CI::NoopNode::shape_for_graphviz(CI::NoopNode *this)
{
  return 3;
}

uint64_t CI::NoopNode::color_for_graphviz(CI::NoopNode *this)
{
  return 0;
}

const char *CI::NoopNode::short_name(CI::NoopNode *this)
{
  return "noop";
}

uint64_t CI::NoopNode::may_be_extended_range(CI::NoopNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 256))();
}

uint64_t CI::NoopNode::alpha_one(CI::NoopNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 264))();
}

uint64_t CI::NoopNode::output_format(CI::NoopNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 312))();
}

CI::CGRectArray *CI::NoopNode::regions_of_child@<X0>(CI::NoopNode *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, CI::CGRectArray *a3@<X8>)
{
  CGFloat height = a2.size.height;
  CGFloat width = a2.size.width;
  CGFloat y = a2.origin.y;
  CGFloat x = a2.origin.x;
  if ((*((_DWORD *)this + 14) & 0xFFFFFFFD) != 1) {
    goto LABEL_5;
  }
  v14.origin.CGFloat x = (*(double (**)(CI::NoopNode *))(*(void *)this + 168))(this);
  if (CGRectIsInfinite(v14)) {
    goto LABEL_5;
  }
  v19.origin.CGFloat x = (*(double (**)(CI::NoopNode *))(*(void *)this + 160))(this);
  v19.origin.CGFloat y = v9;
  v19.size.CGFloat width = v10;
  v19.size.CGFloat height = v11;
  v15.origin.CGFloat x = x;
  v15.origin.CGFloat y = y;
  v15.size.CGFloat width = width;
  v15.size.CGFloat height = height;
  if (CGRectIntersectsRect(v15, v19))
  {
    v16.origin.CGFloat x = (*(double (**)(CI::NoopNode *))(*(void *)this + 168))(this);
    CGRect v17 = CGRectInset(v16, -1.0, -1.0);
  }
  else
  {
LABEL_5:
    v17.origin.CGFloat x = x;
    v17.origin.CGFloat y = y;
    v17.size.CGFloat width = width;
    v17.size.CGFloat height = height;
  }
  CGRect v18 = CGRectInset(v17, 0.001, 0.001);
  CGRect v13 = CGRectIntegral(v18);
  return CI::CGRectArray::CGRectArray(a3, &v13);
}

uint64_t CI::NoopNode::reason(CI::NoopNode *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t non-virtual thunk to'CI::NoopNode::type(CI::NoopNode *this)
{
  return 39;
}

void non-virtual thunk to'CI::NoopNode::~NoopNode(CI::NoopNode *this)
{
  *(void *)this = &unk_1EE45AE40;
  atomic_fetch_add(&dword_1EB466E78[37], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::NoopNode *)((char *)this - 48));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45AE40;
  atomic_fetch_add(&dword_1EB466E78[37], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::NoopNode *)((char *)this - 48));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)39>::type()
{
  return 39;
}

void *CI::InstanceCounted<(CI::Type)39>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AE40;
  atomic_fetch_add(&dword_1EB466E78[37], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)39>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AE40;
  atomic_fetch_add(&dword_1EB466E78[37], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void CI::PremultiplyNode::PremultiplyNode(CI::PremultiplyNode *this, CI::Node *a2)
{
}

void CI::ClampToZeroToOneNode::ClampToZeroToOneNode(CI::ClampToZeroToOneNode *this, CI::Node *a2)
{
}

void CI::PremultiplyNode::~PremultiplyNode(CI::PremultiplyNode *this)
{
  *(void *)this = &unk_1EE45B2F0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 6) = &unk_1EE45AE90;
  atomic_fetch_add(&dword_1EB466E78[38], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45B2F0;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 6) = &unk_1EE45AE90;
  atomic_fetch_add(&dword_1EB466E78[38], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::PremultiplyNode::shape_for_graphviz(CI::PremultiplyNode *this)
{
  return 2;
}

uint64_t CI::PremultiplyNode::color_for_graphviz(CI::PremultiplyNode *this)
{
  return 4;
}

BOOL CI::PremultiplyNode::is_identity(CI::PremultiplyNode *this)
{
  return *((_DWORD *)this + 14) == 0;
}

uint64_t CI::PremultiplyNode::output_depth(CI::PremultiplyNode *this)
{
  if ((*(int (**)(void))(**((void **)this + 5) + 304))(*((void *)this + 5)) < 1) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)this + 5) + 304);

  return v2();
}

uint64_t non-virtual thunk to'CI::PremultiplyNode::type(CI::PremultiplyNode *this)
{
  return 40;
}

void non-virtual thunk to'CI::PremultiplyNode::~PremultiplyNode(CI::PremultiplyNode *this)
{
  *((void *)this - 6) = &unk_1EE45B2F0;
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1EE45AE90;
  atomic_fetch_add(&dword_1EB466E78[38], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::PremultiplyNode *)((char *)this - 48));
}

{
  CI::PremultiplyNode::~PremultiplyNode((CI::PremultiplyNode *)((char *)this - 48));
}

uint64_t CI::InstanceCounted<(CI::Type)40>::type()
{
  return 40;
}

void *CI::InstanceCounted<(CI::Type)40>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AE90;
  atomic_fetch_add(&dword_1EB466E78[38], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)40>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AE90;
  atomic_fetch_add(&dword_1EB466E78[38], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

double cikernel::_ci_premul(float32x4_t a1)
{
  *(void *)&double result = vmulq_laneq_f32(a1, a1, 3).u64[0];
  return result;
}

double cikernel::_ci_unpremul(float32x4_t a1)
{
  *(void *)&double result = vdivq_f32(a1, (float32x4_t)vdupq_laneq_s32((int32x4_t)vmaxnmq_f32(a1, (float32x4_t)vdupq_n_s32(0x3727C5ACu)), 3)).u64[0];
  return result;
}

void CI::ProcessorNode::ProcessorNode(CI::Node *a1)
{
}

{
  CI::Node::Node(a1);
}

void CI::ProcessorNode::ProcessorNode(CI::NodeWithChildren *a1, CI::Node *a2)
{
}

void CI::ProcessorNode::~ProcessorNode(CI::ProcessorNode *this)
{
  *(void *)this = &unk_1EE459430;
  *((void *)this + 6) = &unk_1EE4595E8;
  uint64_t v2 = (const void *)*((void *)this + 20);
  if (v2) {
    CFRelease(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 14);
  if (v3) {
    free(v3);
  }
  size_t v4 = (void *)*((void *)this + 16);
  if (v4) {
    free(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 18);
  if (v5) {
    free(v5);
  }
  _Block_release(*((const void **)this + 8));
  CGRect v6 = (const void *)*((void *)this + 7);
  if (v6) {
    _Block_release(v6);
  }
  *((void *)this + 6) = &unk_1EE45AEB8;
  atomic_fetch_add(&dword_1EB466E78[39], 0xFFFFFFFF);

  CI::NodeWithChildren::~NodeWithChildren(this);
}

{
  uint64_t vars8;

  CI::ProcessorNode::~ProcessorNode(this);

  JUMPOUT(0x1997023B0);
}

void CI::NodeWithChildren::~NodeWithChildren(CI::NodeWithChildren *this)
{
  *(void *)this = &unk_1EE45C0B0;
  uint64_t v2 = (CI::SerialObjectPtrArray *)*((void *)this + 5);
  if (v2)
  {
    CI::SerialObjectPtrArray::~SerialObjectPtrArray(v2);
    MEMORY[0x1997023B0]();
  }
  *((void *)this + 5) = 0;

  CI::Node::~Node(this);
}

void non-virtual thunk to'CI::ProcessorNode::~ProcessorNode(CI::ProcessorNode *this)
{
}

{
  uint64_t vars8;

  CI::ProcessorNode::~ProcessorNode((CI::ProcessorNode *)((char *)this - 48));

  JUMPOUT(0x1997023B0);
}

void CI::ProcessorNode::release_resources(CI::ProcessorNode *this)
{
  uint64_t v2 = (const void *)*((void *)this + 8);
  if (v2) {
    _Block_release(v2);
  }
  unint64_t v5 = (const void *)*((void *)this + 7);
  size_t v4 = (void *)((char *)this + 56);
  uint64_t v3 = v5;
  if (v5) {
    _Block_release(v3);
  }
  *size_t v4 = 0;
  v4[1] = 0;
}

uint64_t CI::ProcessorNode::print_for_graph_core(CFStringRef *a1, FILE *__stream, uint64_t a3, int a4)
{
  char v4 = a4;
  if (a4) {
    uint64_t v7 = 32;
  }
  else {
    uint64_t v7 = 10;
  }
  fwrite("processor ", 0xAuLL, 1uLL, __stream);
  CI::fprintf(__stream, a1[20], v8);
  if ((v4 & 1) == 0
    && CI_GRAPHVIZ_INTERNAL()
    && ((int (*)(CFStringRef *))(*a1)[1].info)(a1) >= 1)
  {
    uint64_t v9 = 0;
    do
    {
      if (v9) {
        CGFloat v10 = " ";
      }
      else {
        CGFloat v10 = "\n  ";
      }
      uint64_t v11 = ((uint64_t (*)(CFStringRef *, uint64_t))(*a1)[1].data)(a1, v9);
      fprintf(__stream, "%s(%d)", v10, *(_DWORD *)(v11 + 36));
      uint64_t v9 = (v9 + 1);
    }
    while ((int)v9 < ((int (*)(CFStringRef *))(*a1)[1].info)(a1));
  }
  CFStringRef v12 = a1[21];
  if (v12) {
    fprintf(__stream, "%c%016llX", v7, v12);
  }
  uint64_t result = *((unsigned int *)a1 + 30);
  if (result)
  {
    CGRect v14 = CI::name_for_format(result);
    uint64_t result = fprintf(__stream, "%coutputFormat=%s", v7, v14);
  }
  if (!*((unsigned char *)a1 + 139)) {
    uint64_t result = fprintf(__stream, "%cnoPartialOutput", v7);
  }
  if (*((unsigned char *)a1 + 137)) {
    uint64_t result = fprintf(__stream, "%ccanReduceChannels", v7);
  }
  if (*((unsigned char *)a1 + 104)) {
    return fprintf(__stream, "%csupportsCompressed", v7);
  }
  return result;
}

double CI::ProcessorNode::roi_of_child(CI::ProcessorNode *this, CGRect a2)
{
  double height = a2.size.height;
  double width = a2.size.width;
  double y = a2.origin.y;
  double x = a2.origin.x;
  uint64_t v7 = (double *)operator new(0x20uLL);
  *uint64_t v7 = x;
  v7[1] = y;
  void v7[2] = width;
  v7[3] = height;
  uint64_t v8 = *((void *)this + 7);
  if (v8)
  {
    (*(void (**)(void **__return_ptr, double, double, double, double))(v8 + 16))(&__p, x, y, width, height);
  }
  else
  {
    __p = 0;
    CGRect v15 = 0;
    uint64_t v16 = 0;
    std::vector<CGRect>::__vallocate[abi:nn180100](&__p, 1uLL);
    uint64_t v9 = v15;
    long long v10 = *((_OWORD *)v7 + 1);
    *CGRect v15 = *(_OWORD *)v7;
    v9[1] = v10;
    CGRect v15 = v9 + 2;
  }
  CI::ProcessorNode::unionROI((uint64_t **)&__p);
  double v12 = v11;
  if (__p)
  {
    CGRect v15 = __p;
    operator delete(__p);
  }
  operator delete(v7);
  return v12;
}

void CI::ProcessorNode::regions_of_child(CI::ProcessorNode *this@<X0>, CGRect a2@<0:D0, 8:D1, 16:D2, 24:D3>, uint64_t a3@<X1>, CI::CGRectArray *a4@<X8>)
{
  if ((a3 & 0x80000000) != 0
    || (height = a2.size.height, width = a2.size.width, y = a2.origin.y, double x = a2.origin.x, CGRectIsEmpty(a2)))
  {
    double v11 = (const CGRect *)MEMORY[0x1E4F1DB20];
    CI::CGRectArray::CGRectArray(a4, v11);
    return;
  }
  double v12 = (double *)operator new(0x20uLL);
  *double v12 = x;
  v12[1] = y;
  void v12[2] = width;
  v12[3] = height;
  uint64_t v13 = *((void *)this + 7);
  if (v13)
  {
    (*(void (**)(CGFloat **__return_ptr, double, double, double, double))(v13 + 16))(&v66, x, y, width, height);
    CGRect v14 = (CGFloat *)__p;
  }
  else
  {
    unint64_t v66 = 0;
    __p = 0;
    uint64_t v68 = 0;
    std::vector<CGRect>::__vallocate[abi:nn180100](&v66, 1uLL);
    CGRect v15 = __p;
    long long v16 = *((_OWORD *)v12 + 1);
    *(_OWORD *)__p = *(_OWORD *)v12;
    v15[1] = v16;
    CGRect v14 = (CGFloat *)(v15 + 2);
    __p = v15 + 2;
  }
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  CGRect v17 = v66;
  if (v66 != v14)
  {
    CGRect v18 = (CGPoint *)MEMORY[0x1E4F1DB20];
    CGRect v19 = (CGPoint *)MEMORY[0x1E4F1DB10];
    while (1)
    {
      double v20 = *v17;
      double v21 = v17[1];
      double v22 = v17[2];
      double v23 = v17[3];
      v70.origin.double x = *v17;
      v70.origin.double y = v21;
      v70.size.double width = v22;
      v70.size.double height = v23;
      if (CGRectIsEmpty(v70)) {
        break;
      }
      v71.origin.double x = v20;
      v71.origin.double y = v21;
      v71.size.double width = v22;
      v71.size.double height = v23;
      if (CGRectIsInfinite(v71))
      {
        int v25 = (CGRect *)*((void *)a4 + 1);
        unint64_t v28 = *((void *)a4 + 2);
        if ((unint64_t)v25 >= v28)
        {
          int v30 = *(CGRect **)a4;
          uint64_t v50 = ((uint64_t)v25 - *(void *)a4) >> 5;
          unint64_t v51 = v50 + 1;
          if ((unint64_t)(v50 + 1) >> 59) {
            goto LABEL_72;
          }
          uint64_t v52 = v28 - (void)v30;
          if (v52 >> 4 > v51) {
            unint64_t v51 = v52 >> 4;
          }
          if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v51;
          }
          if (v34)
          {
            CGRect v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>((uint64_t)a4 + 16, v34);
            int v30 = *(CGRect **)a4;
            int v25 = (CGRect *)*((void *)a4 + 1);
          }
          else
          {
            CGRect v35 = 0;
          }
          CGPoint v61 = v19[1];
          int v57 = &v35[32 * v50];
          *(CGPoint *)int v57 = *v19;
          *((CGPoint *)v57 + 1) = v61;
          if (v25 != v30)
          {
            int v62 = &v35[32 * v50];
            do
            {
              CGSize size = v25[-1].size;
              int v60 = v62 - 32;
              *((_OWORD *)v62 - 2) = v25[-1].origin;
              *((CGSize *)v62 - 1) = size;
              --v25;
              v62 -= 32;
            }
            while (v25 != v30);
            goto LABEL_65;
          }
          goto LABEL_64;
        }
        CGPoint v26 = *v19;
        CGSize v27 = (CGSize)v19[1];
        goto LABEL_17;
      }
      CGRect v36 = (unsigned char *)(*(uint64_t (**)(CI::ProcessorNode *, uint64_t))(*(void *)this + 48))(this, a3);
      double v37 = (*(double (**)(unsigned char *))(*(void *)v36 + 160))(v36);
      CGFloat v39 = v38;
      CGFloat v41 = v40;
      CGFloat v43 = v42;
      if ((*(int (**)(unsigned char *))(*(void *)v36 + 16))(v36) >= 41
        && (*(int (**)(unsigned char *))(*(void *)v36 + 16))(v36) <= 42)
      {
        v72.origin.double x = v37;
        v72.origin.double y = v39;
        v72.size.double width = v41;
        v72.size.double height = v43;
        if (!CGRectIsInfinite(v72) && !v36[139])
        {
          double v22 = v41;
          double v21 = v39;
          double v20 = v37;
          double v23 = v43;
        }
      }
      v73.origin.double x = v20;
      v73.origin.double y = v21;
      v73.size.double width = v22;
      v73.size.double height = v23;
      CGRect v74 = CGRectInset(v73, 0.001, 0.001);
      CGRect v75 = CGRectIntegral(v74);
      CGFloat v44 = v75.origin.x;
      CGFloat v45 = v75.origin.y;
      CGFloat v46 = v75.size.width;
      CGFloat v47 = v75.size.height;
      BOOL v49 = (CGRect *)*((void *)a4 + 1);
      unint64_t v48 = *((void *)a4 + 2);
      if ((unint64_t)v49 >= v48)
      {
        int v30 = *(CGRect **)a4;
        uint64_t v53 = ((uint64_t)v49 - *(void *)a4) >> 5;
        unint64_t v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 59) {
LABEL_72:
        }
          abort();
        uint64_t v55 = v48 - (void)v30;
        if (v55 >> 4 > v54) {
          unint64_t v54 = v55 >> 4;
        }
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v54;
        }
        if (v34)
        {
          CGRect v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>((uint64_t)a4 + 16, v34);
          int v30 = *(CGRect **)a4;
          BOOL v49 = (CGRect *)*((void *)a4 + 1);
        }
        else
        {
          CGRect v35 = 0;
        }
        int v57 = &v35[32 * v53];
        *(CGFloat *)int v57 = v44;
        *((CGFloat *)v57 + 1) = v45;
        *((CGFloat *)v57 + 2) = v46;
        *((CGFloat *)v57 + 3) = v47;
        if (v49 != v30)
        {
          int v64 = &v35[32 * v53];
          do
          {
            CGSize v65 = v49[-1].size;
            int v60 = v64 - 32;
            *((_OWORD *)v64 - 2) = v49[-1].origin;
            *((CGSize *)v64 - 1) = v65;
            --v49;
            v64 -= 32;
          }
          while (v49 != v30);
LABEL_65:
          long long v29 = (CGRect *)(v57 + 32);
          *(void *)a4 = v60;
          *((void *)a4 + 1) = v57 + 32;
          *((void *)a4 + 2) = &v35[32 * v34];
          if (v30) {
            operator delete(v30);
          }
          goto LABEL_67;
        }
LABEL_64:
        int v60 = v57;
        goto LABEL_65;
      }
      *BOOL v49 = v75;
      long long v29 = v49 + 1;
LABEL_67:
      *((void *)a4 + 1) = v29;
      v17 += 4;
      if (v17 == v14)
      {
        CGRect v14 = v66;
        goto LABEL_69;
      }
    }
    int v25 = (CGRect *)*((void *)a4 + 1);
    unint64_t v24 = *((void *)a4 + 2);
    if ((unint64_t)v25 >= v24)
    {
      int v30 = *(CGRect **)a4;
      uint64_t v31 = ((uint64_t)v25 - *(void *)a4) >> 5;
      unint64_t v32 = v31 + 1;
      if ((unint64_t)(v31 + 1) >> 59) {
        goto LABEL_72;
      }
      uint64_t v33 = v24 - (void)v30;
      if (v33 >> 4 > v32) {
        unint64_t v32 = v33 >> 4;
      }
      if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v34 = v32;
      }
      if (v34)
      {
        CGRect v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SoftwareDAGDescriptor::ArgumentInfo>>((uint64_t)a4 + 16, v34);
        int v30 = *(CGRect **)a4;
        int v25 = (CGRect *)*((void *)a4 + 1);
      }
      else
      {
        CGRect v35 = 0;
      }
      CGPoint v56 = v18[1];
      int v57 = &v35[32 * v31];
      *(CGPoint *)int v57 = *v18;
      *((CGPoint *)v57 + 1) = v56;
      if (v25 != v30)
      {
        int v58 = &v35[32 * v31];
        do
        {
          CGSize v59 = v25[-1].size;
          int v60 = v58 - 32;
          *((_OWORD *)v58 - 2) = v25[-1].origin;
          *((CGSize *)v58 - 1) = v59;
          --v25;
          v58 -= 32;
        }
        while (v25 != v30);
        goto LABEL_65;
      }
      goto LABEL_64;
    }
    CGPoint v26 = *v18;
    CGSize v27 = (CGSize)v18[1];
LABEL_17:
    v25->origin = v26;
    v25->CGSize size = v27;
    long long v29 = v25 + 1;
    goto LABEL_67;
  }
LABEL_69:
  if (v14)
  {
    __p = v14;
    operator delete(v14);
  }
  operator delete(v12);
}

uint64_t CI::ProcessorNode::output_depth(CI::ProcessorNode *this)
{
  int v1 = *((_DWORD *)this + 30);
  if ((v1 + 1) < 2) {
    return 0;
  }
  if (CI::format_is_deep(v1)) {
    return 1;
  }
  return 0xFFFFFFFFLL;
}

uint64_t CI::ProcessorNode::output_is_rg(CI::ProcessorNode *this)
{
  int v2 = *((_DWORD *)this + 30);
  if (!v2) {
    goto LABEL_12;
  }
  if (CI::format_is_rg(v2)) {
    return 1;
  }
  if (!*((_DWORD *)this + 30))
  {
LABEL_12:
    if (*((unsigned char *)this + 137))
    {
      if ((*(uint64_t (**)(CI::ProcessorNode *, void))(*(void *)this + 48))(this, 0))
      {
        uint64_t v4 = (*(uint64_t (**)(CI::ProcessorNode *, void))(*(void *)this + 48))(this, 0);
        v6.origin.double x = (*(double (**)(uint64_t))(*(void *)v4 + 160))(v4);
        if (CGRectIsInfinite(v6))
        {
          uint64_t v5 = *(void *)(*(uint64_t (**)(CI::ProcessorNode *, void))(*(void *)this + 48))(this, 0);
          if ((*(uint64_t (**)(void))(v5 + 272))()) {
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t CI::ProcessorNode::output_is_r(CI::ProcessorNode *this)
{
  int v2 = *((_DWORD *)this + 30);
  if (!v2) {
    goto LABEL_12;
  }
  if (CI::format_is_r(v2)) {
    return 1;
  }
  if (!*((_DWORD *)this + 30))
  {
LABEL_12:
    if (*((unsigned char *)this + 137))
    {
      if ((*(uint64_t (**)(CI::ProcessorNode *, void))(*(void *)this + 48))(this, 0))
      {
        uint64_t v4 = (*(uint64_t (**)(CI::ProcessorNode *, void))(*(void *)this + 48))(this, 0);
        v6.origin.double x = (*(double (**)(uint64_t))(*(void *)v4 + 160))(v4);
        if (CGRectIsInfinite(v6))
        {
          uint64_t v5 = *(void *)(*(uint64_t (**)(CI::ProcessorNode *, void))(*(void *)this + 48))(this, 0);
          if ((*(uint64_t (**)(void))(v5 + 280))()) {
            return 1;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t CI::ProcessorNode::add_args_to_hash(CFStringRef *this, CI::XXHashHelper *a2, const __CFString *a3)
{
  CI::XXHashHelper::add(a2, this[20]);
  CFStringRef v6 = this[21];
  if (!v6) {
    CFStringRef v6 = a3;
  }
  CFStringRef __src = v6;
  return XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
}

void CI::ProcessorNode::append_to_tree()
{
}

void CI::ProcessorNode::append_to_tree(CI::SerialObjectPtrArray *a1, uint64_t a2, uint64_t a3, double *a4)
{
  if (*(int *)a1 < 1) {
LABEL_16:
  }
    operator new();
  unint64_t v7 = 0;
  uint64_t v8 = (CGFloat **)((char *)a1 + 24);
  while (1)
  {
    uint64_t v9 = v8;
    if (v7 >= 0xA) {
      uint64_t v9 = (CGFloat **)(*((void *)a1 + 2) + 8 * (v7 - 10));
    }
    long long v10 = *v9;
    (*(void (**)(void **__return_ptr, uint64_t, void, double, double, double, double))(a2 + 16))(__p, a2, 0, *a4, a4[1], a4[2], a4[3]);
    int v11 = (*(uint64_t (**)(CGFloat *))(*(void *)v10 + 16))(v10);
    if (v11 != 30) {
      break;
    }
    CGFloat v25 = v10[7];
    CGFloat v26 = v10[8];
    CGFloat v27 = v10[9];
    CGFloat v28 = v10[10];
    CI::ProcessorNode::unionROI((uint64_t **)__p);
    v38.origin.double x = v29;
    v38.origin.double y = v30;
    v38.size.double width = v31;
    v38.size.double height = v32;
    v36.origin.double x = v25;
    v36.origin.double y = v26;
    v36.size.double width = v27;
    v36.size.double height = v28;
    if (CGRectContainsRect(v36, v38)) {
      goto LABEL_12;
    }
LABEL_13:
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    ++v7;
    ++v8;
    if ((uint64_t)v7 >= *(int *)a1) {
      goto LABEL_16;
    }
  }
  if (v11 != 34) {
    goto LABEL_13;
  }
  uint64_t v12 = (*(uint64_t (**)(CGFloat *, void))(*(void *)v10 + 48))(v10, 0);
  if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 16))(v12) != 41)
  {
    uint64_t v13 = (*(uint64_t (**)(CGFloat *, void))(*(void *)v10 + 48))(v10, 0);
    if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 16))(v13) != 42) {
      goto LABEL_13;
    }
  }
  CGFloat v14 = (*(double (**)(CGFloat *))(*(void *)v10 + 160))(v10);
  CGFloat v16 = v15;
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CI::ProcessorNode::unionROI((uint64_t **)__p);
  v37.origin.double x = v21;
  v37.origin.double y = v22;
  v37.size.double width = v23;
  v37.size.double height = v24;
  v35.origin.double x = v14;
  v35.origin.double y = v16;
  v35.size.double width = v18;
  v35.size.double height = v20;
  if (!CGRectContainsRect(v35, v37)) {
    goto LABEL_13;
  }
LABEL_12:
  uint64_t v33 = (CI::Object *)(*(uint64_t (**)(CGFloat *, void))(*(void *)v10 + 48))(v10, 0);
  CI::SerialObjectPtrArray::replace(a1, v33, v7);
  goto LABEL_13;
}

void CI::ProcessorNode::render(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, uint64_t a5, long long *a6, double *a7)
{
  uint64_t v83 = *MEMORY[0x1E4F143B8];
  if (CI_VERBOSE_SIGNPOSTS())
  {
    int v11 = ci_signpost_log_render();
    os_signpost_id_t v12 = *(int *)(a1 + 36) | (unint64_t)((*(uint64_t (**)(void *))(*a3 + 272))(a3) << 32);
    if (v12 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v11))
    {
      uint64_t v13 = *(void *)(a1 + 160);
      *(_DWORD *)int buf = 138543362;
      *(void *)uint64_t v82 = v13;
      _os_signpost_emit_with_name_impl(&dword_193671000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v12, "processor_render", "%{public}@", buf, 0xCu);
    }
  }
  uint64_t v14 = (*(uint64_t (**)(void *))(*a3 + 272))(a3);
  TimerBase::TimerBase((uint64_t)buf, v14, *(_DWORD *)(a1 + 36), (uint64_t)"processor_render", 15);
  uint64_t v16 = *a4;
  uint64_t v15 = a4[1];
  CGRect v76 = 0;
  double v77 = 0;
  uint64_t v78 = 0;
  uint64_t v62 = v16;
  uint64_t v63 = v15;
  size_t v17 = v15 - v16;
  unint64_t v18 = (v15 - v16) >> 3;
  if (v15 == v16)
  {
    CGRect v73 = 0;
    CGRect v74 = 0;
    uint64_t v75 = 0;
    CGRect v70 = 0;
    CGRect v71 = 0;
    uint64_t v72 = 0;
    __p = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
  }
  else
  {
    std::vector<unsigned long>::__vallocate[abi:nn180100](&v76, (v15 - v16) >> 3);
    double v19 = (char *)v77;
    bzero(v77, v17);
    double v77 = &v19[v17];
    CGRect v73 = 0;
    CGRect v74 = 0;
    uint64_t v75 = 0;
    std::vector<CI::Perspective::Line>::__vallocate[abi:nn180100](&v73, v18);
    CGFloat v20 = v74;
    CGFloat v21 = &v74[2 * v18];
    uint64_t v22 = 16 * v18;
    do
    {
      *CGFloat v20 = 0;
      v20 += 2;
      v22 -= 16;
    }
    while (v22);
    CGRect v74 = v21;
    CGRect v70 = 0;
    CGRect v71 = 0;
    uint64_t v72 = 0;
    std::vector<unsigned long>::__vallocate[abi:nn180100](&v70, v18);
    CGFloat v23 = (char *)v71;
    bzero(v71, v17);
    CGRect v71 = &v23[v17];
    __p = 0;
    uint64_t v68 = 0;
    uint64_t v69 = 0;
    std::vector<CGRect>::__vallocate[abi:nn180100](&__p, v18);
    CGFloat v24 = (char *)v68;
    bzero(v68, 4 * v17);
    uint64_t v68 = &v24[4 * v17];
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    CGFloat v25 = ci_signpost_log_render();
    os_signpost_id_t v26 = *(int *)(a1 + 36) | (unint64_t)((*(uint64_t (**)(void *))(*a3 + 272))(a3) << 32);
    if (v26 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v25))
    {
      uint64_t v27 = *(void *)(a1 + 160);
      LODWORD(v79) = 138543362;
      *(void *)((char *)&v79 + 4) = v27;
      _os_signpost_emit_with_name_impl(&dword_193671000, v25, OS_SIGNPOST_INTERVAL_BEGIN, v26, "processor_prepinputs", "%{public}@", (uint8_t *)&v79, 0xCu);
    }
  }
  uint64_t v28 = (*(uint64_t (**)(void *))(*a3 + 272))(a3);
  TimerBase::TimerBase((uint64_t)&v79, v28, *(_DWORD *)(a1 + 36), (uint64_t)"processor_prepinputs", 0);
  if (v63 != v62)
  {
    unint64_t v29 = 0;
    unint64_t v30 = 0;
    do
    {
      CGFloat v31 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(*(void *)a1 + 48))(a1, v30);
      CGFloat v32 = (_OWORD *)(*(uint64_t (**)(void))(**(void **)(*a4 + 8 * v29) + 32))(*(void *)(*a4 + 8 * v29));
      uint64_t v33 = (char *)__p + 32 * v29;
      long long v34 = v32[1];
      _OWORD *v33 = *v32;
      v33[1] = v34;
      uint64_t v35 = (***(uint64_t (****)(void))(*a4 + 8 * v29))();
      CGRect v36 = **(uint64_t (****)(void))(*a4 + 8 * v29);
      if (v35)
      {
        CGRect v37 = (const void *)(*v36)();
        *((void *)v76 + v29) = v37;
        RetainSurfaceFromCache(v37);
        CGRect v38 = &v73[16 * v29];
        (*(void (**)(__n128 *__return_ptr))(**(void **)(*a4 + 8 * v29) + 24))(&v66);
        std::vector<CI::Texture>::insert((__n128 **)&v73, (uint64_t)v38, &v66);
        if (v31) {
          goto LABEL_36;
        }
      }
      else
      {
        CGRect v84 = *(CGRect *)v36[4]();
        if (!CGRectIsEmpty(v84))
        {
          for (int i = (*(uint64_t (**)(char *))(*(void *)v31 + 16))(v31);
                i == 39;
                int i = (*(uint64_t (**)(char *))(*(void *)v31 + 16))(v31))
          {
            CGFloat v31 = (char *)(*(uint64_t (**)(char *, void))(*(void *)v31 + 48))(v31, 0);
          }
          CGFloat v41 = (CGFloat *)(*(uint64_t (**)(void))(**(void **)(*a4 + 8 * v29) + 32))(*(void *)(*a4 + 8 * v29));
          __n128 v66 = 0uLL;
          int v42 = (*(uint64_t (**)(char *))(*(void *)v31 + 16))(v31);
          if (v42 > 45)
          {
            if (v42 != 46)
            {
              if (v42 == 48) {
                std::vector<CI::Texture>::insert(&v73, &v73[16 * v29], v31 + 48);
              }
              goto LABEL_36;
            }
            CI::SurfaceNode::surfaceForROI((uint64_t)v31, (uint64_t)a3, (uint64_t)&v66, (__IOSurface **)&cf, *v41, v41[1], v41[2], v41[3]);
          }
          else
          {
            if (v42 != 29)
            {
              if (v42 == 44)
              {
                uint64_t v43 = CI::ProviderNode::surfaceForROI((uint64_t)v31, a3, v41, (uint64_t)&v66);
                *((void *)v76 + v29) = v43;
              }
LABEL_36:
              uint64_t v39 = (*(uint64_t (**)(char *))(*(void *)v31 + 384))(v31);
              goto LABEL_37;
            }
            CI::CGNode::surfaceForROI((uint64_t)v31, (uint64_t)a3, v41, (uint64_t)&v66, (__IOSurface **)&cf);
          }
          CFTypeRef v44 = cf;
          CFTypeRef cf = 0;
          *((void *)v76 + v29) = v44;
          CFTypeRef v45 = cf;
          CFTypeRef cf = 0;
          if (v45) {
            CFRelease(v45);
          }
          goto LABEL_36;
        }
        *((void *)v76 + v29) = 0;
        if (v31) {
          goto LABEL_36;
        }
      }
      uint64_t v39 = 0;
LABEL_37:
      *((void *)v70 + v29) = v39;
      unint64_t v29 = (v30 + 1);
      unint64_t v30 = v29;
    }
    while (v18 > v29);
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    CGFloat v46 = ci_signpost_log_render();
    os_signpost_id_t v47 = *((void *)&v79 + 1);
    if ((unint64_t)(*((void *)&v79 + 1) - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v48 = v46;
      if (os_signpost_enabled(v46))
      {
        v66.n128_u16[0] = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v48, OS_SIGNPOST_INTERVAL_END, v47, "processor_prepinputs", "", (uint8_t *)&v66, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)&v79);
  BOOL v49 = *(unsigned char **)(a1 + 144);
  if (v49)
  {
    int v50 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
    uint64_t v80 = 0;
    long long v79 = 0uLL;
    std::vector<BOOL>::__init_with_size[abi:nn180100]<BOOL *,BOOL *>(&v79, v49, &v49[v50], v50);
  }
  else
  {
    long long v79 = 0uLL;
    uint64_t v80 = 0;
  }
  uint64_t v51 = *(void *)(a1 + 64);
  long long v64 = *a6;
  uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
  (*(void (**)(uint64_t, void **, char **, void **, void **, long long *, uint64_t, long long *, double, double, double, double, uint64_t, _BYTE, void *, uint64_t))(v51 + 16))(v51, &v76, &v73, &v70, &__p, &v79, a5, &v64, *a7, a7[1], a7[2], a7[3], v52, *(unsigned char *)(a1 + 152), a3, a2);
  long long v64 = 0uLL;
  if (v63 != v62)
  {
    uint64_t v53 = 0;
    unsigned int v54 = 1;
    do
    {
      ReturnSurfaceToCache(*((void *)v76 + v53));
      uint64_t v53 = v54;
    }
    while (v18 > v54++);
  }
  if ((void)v79) {
    operator delete((void *)v79);
  }
  if (__p)
  {
    uint64_t v68 = __p;
    operator delete(__p);
  }
  if (v70)
  {
    CGRect v71 = v70;
    operator delete(v70);
  }
  *(void *)&long long v79 = &v73;
  std::vector<CI::Texture>::__destroy_vector::operator()[abi:nn180100]((void ***)&v79);
  if (v76)
  {
    double v77 = v76;
    operator delete(v76);
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    CGPoint v56 = ci_signpost_log_render();
    os_signpost_id_t v57 = *(void *)&v82[4];
    if ((unint64_t)(*(void *)&v82[4] - 1) <= 0xFFFFFFFFFFFFFFFDLL)
    {
      int v58 = v56;
      if (os_signpost_enabled(v56))
      {
        LOWORD(v79) = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v58, OS_SIGNPOST_INTERVAL_END, v57, "processor_render", "", (uint8_t *)&v79, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)buf);
}

__n128 *std::vector<CI::Texture>::insert(__n128 **a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5 = *a1;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v7 = a2 - (void)*a1;
  uint64_t v8 = v7 >> 4;
  uint64_t v9 = (__n128 *)((char *)*a1 + (v7 & 0xFFFFFFFFFFFFFFF0));
  unint64_t v12 = (unint64_t)a1[2];
  uint64_t v10 = (uint64_t)(a1 + 2);
  unint64_t v11 = v12;
  if (v6 >= v12)
  {
    unint64_t v18 = ((uint64_t)(v6 - (void)v5) >> 4) + 1;
    if (v18 >> 60) {
      abort();
    }
    uint64_t v19 = v11 - (void)v5;
    uint64_t v20 = v19 >> 3;
    if (v19 >> 3 <= v18) {
      uint64_t v20 = v18;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v21 = v20;
    }
    uint64_t v40 = v10;
    if (v21) {
      uint64_t v22 = (__n128 *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>(v10, v21);
    }
    else {
      uint64_t v22 = 0;
    }
    CGRect v36 = v22;
    CGRect v37 = &v22[v8];
    CGRect v38 = v37;
    uint64_t v39 = (char *)&v22[v21];
    std::__split_buffer<CI::Texture>::push_back((void **)&v36, a3);
    CGFloat v23 = v37;
    CGFloat v24 = *a1;
    CGFloat v25 = v37;
    if (*a1 != v9)
    {
      os_signpost_id_t v26 = v9;
      uint64_t v27 = v37;
      do
      {
        CGFloat v25 = v27 - 1;
        v27[-1] = v26[-1];
        --v26;
        --v27;
      }
      while (v26 != v24);
    }
    CGRect v37 = v25;
    uint64_t v28 = a1[1];
    unint64_t v29 = v38;
    if (v28 != v9)
    {
      do
      {
        __n128 v30 = *v9++;
        *v29++ = v30;
      }
      while (v9 != v28);
      CGFloat v25 = v37;
      uint64_t v9 = a1[1];
    }
    CGFloat v31 = *a1;
    *a1 = v25;
    a1[1] = v29;
    CGFloat v32 = a1[2];
    a1[2] = (__n128 *)v39;
    CGRect v38 = v9;
    uint64_t v39 = (char *)v32;
    CGRect v36 = v31;
    CGRect v37 = v31;
    if (v9 != v31)
    {
      do
      {
        CGRect v38 = v9 - 1;
        v9[-1].n128_u64[0] = 0;
        v9[-1].n128_u64[1] = 0;
        uint64_t v9 = v38;
      }
      while (v38 != v31);
      uint64_t v9 = v36;
    }
    if (v9) {
      operator delete(v9);
    }
    return v23;
  }
  else if (v9 == (__n128 *)v6)
  {
    *uint64_t v9 = *a3;
    a1[1] = v9 + 1;
  }
  else
  {
    uint64_t v13 = v9 + 1;
    uint64_t v14 = (_OWORD *)(v6 - 16);
    if (v6 < 0x10)
    {
      uint64_t v16 = (__n128 *)v6;
    }
    else
    {
      uint64_t v15 = (long long *)(v6 - 16);
      uint64_t v16 = (__n128 *)v6;
      do
      {
        __n128 v17 = (__n128)*v15++;
        *v16++ = v17;
      }
      while ((unint64_t)v15 < v6);
    }
    a1[1] = v16;
    if ((__n128 *)v6 != v13)
    {
      uint64_t v33 = 16 * ((uint64_t)(v6 - (void)v13) >> 4);
      uint64_t v34 = (uint64_t)&v5[v8 - 1];
      do
      {
        *v14-- = *(_OWORD *)(v34 + v33);
        v33 -= 16;
      }
      while (v33);
    }
    *uint64_t v9 = *a3;
  }
  return v9;
}

char *std::vector<CI::Texture>::insert(char **a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v6 = *a1;
  unint64_t v5 = (unint64_t)a1[1];
  uint64_t v7 = a2 - *a1;
  uint64_t v8 = v7 >> 4;
  uint64_t v9 = &(*a1)[v7 & 0xFFFFFFFFFFFFFFF0];
  uint64_t v11 = (uint64_t)(a1 + 2);
  unint64_t v10 = (unint64_t)a1[2];
  if (v5 >= v10)
  {
    unint64_t v17 = ((uint64_t)(v5 - (void)v6) >> 4) + 1;
    if (v17 >> 60) {
      abort();
    }
    uint64_t v19 = v10 - (void)v6;
    if (v19 >> 3 > v17) {
      unint64_t v17 = v19 >> 3;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v20 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v17;
    }
    if (v20) {
      unint64_t v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>((uint64_t)(a1 + 2), v20);
    }
    else {
      unint64_t v21 = 0;
    }
    uint64_t v22 = &v21[16 * v8];
    CGFloat v23 = &v21[16 * v20];
    if (v8 == v20)
    {
      if (v7 < 1)
      {
        if (v6 == a2) {
          unint64_t v26 = 1;
        }
        else {
          unint64_t v26 = v7 >> 3;
        }
        uint64_t v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>(v11, v26);
        uint64_t v22 = &v27[16 * (v26 >> 2)];
        CGFloat v23 = &v27[16 * v28];
        if (v21)
        {
          unint64_t v29 = &v27[16 * v28];
          operator delete(v21);
          CGFloat v23 = v29;
        }
      }
      else
      {
        unint64_t v24 = v8 + 2;
        if (v8 >= -1) {
          unint64_t v24 = v8 + 1;
        }
        v22 -= 16 * (v24 >> 1);
      }
    }
    *(_OWORD *)uint64_t v22 = *(_OWORD *)v3;
    __n128 v30 = v22 + 16;
    CGFloat v31 = *a1;
    CGFloat v32 = v22;
    if (*a1 != v9)
    {
      uint64_t v33 = v9;
      uint64_t v34 = v22;
      do
      {
        CGFloat v32 = v34 - 16;
        *((_OWORD *)v34 - 1) = *((_OWORD *)v33 - 1);
        v33 -= 16;
        v34 -= 16;
      }
      while (v33 != v31);
    }
    uint64_t v35 = a1[1];
    if (v35 != v9)
    {
      do
      {
        long long v36 = *(_OWORD *)v9;
        v9 += 16;
        *(_OWORD *)__n128 v30 = v36;
        v30 += 16;
      }
      while (v9 != v35);
      uint64_t v9 = a1[1];
    }
    CGRect v37 = *a1;
    *a1 = v32;
    a1[1] = v30;
    a1[2] = v23;
    if (v9 != v37) {
      bzero(&v9[-((v9 - v37 - 16) & 0xFFFFFFFFFFFFFFF0) - 16], ((v9 - v37 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
    }
    if (v37) {
      operator delete(v37);
    }
    return v22;
  }
  else if (v9 == (char *)v5)
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a3;
    a1[1] = v9 + 16;
  }
  else
  {
    unint64_t v12 = v9 + 16;
    uint64_t v13 = (_OWORD *)(v5 - 16);
    if (v5 < 0x10)
    {
      uint64_t v15 = a1[1];
    }
    else
    {
      uint64_t v14 = (long long *)(v5 - 16);
      uint64_t v15 = a1[1];
      do
      {
        long long v16 = *v14++;
        *(_OWORD *)uint64_t v15 = v16;
        v15 += 16;
      }
      while ((unint64_t)v14 < v5);
    }
    a1[1] = v15;
    if ((_OWORD *)v5 != v12)
    {
      uint64_t v25 = 16 * ((uint64_t)(v5 - (void)v12) >> 4);
      do
      {
        *v13-- = *(_OWORD *)&v6[16 * v8 - 16 + v25];
        v25 -= 16;
      }
      while (v25);
    }
    if (v9 <= a3) {
      uint64_t v3 = &a3[16 * (a1[1] > a3)];
    }
    *(_OWORD *)uint64_t v9 = *(_OWORD *)v3;
  }
  return v9;
}

void CI::ConvertNode::ConvertNode(CI::NodeWithChildren *a1, CI::Node *a2, unsigned int a3)
{
  (*(void (**)(CI::Node *))(*(void *)a2 + 160))(a2);
  CI::cfname_for_conversion(a3);
  unsigned int v6 = (*(uint64_t (**)(CI::Node *))(*(void *)a2 + 16))(a2);
  if ((CI::is_image_type(v6) & 1) == 0) {
    CI::input_format_for_conversion(a3);
  }
  CI::output_format_for_conversion(a3);
  CI::conversion_is_alpha_one(a3);
  unsigned int v7 = (*(uint64_t (**)(CI::Node *))(*(void *)a2 + 16))(a2);
  CI::is_image_type(v7);
  CI::ProcessorNode::ProcessorNode(a1, a2);
}

void ___ZN2CI11ConvertNode14append_to_treeEPNS_4NodeENS_11ConvertTypeE_block_invoke(uint64_t a1, __IOSurface ***a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6, uint64_t a7, uint64_t a8, CGFloat **a9, uint64_t a10, __IOSurface *a11, _OWORD *a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15 = **a2;
  if (!v15) {
    return;
  }
  CGFloat v23 = **a9;
  CGFloat v24 = (*a9)[1];
  CGFloat v25 = (*a9)[2];
  CGFloat v26 = (*a9)[3];
  v48.origin.int x = v23;
  v48.origin.int y = v24;
  v48.size.unint64_t width = v25;
  v48.size.unint64_t height = v26;
  if (CGRectIsNull(v48))
  {
    unint64_t height = 0;
    unint64_t width = 0;
    int y = 0x7FFFFFFF;
    int x = 0x7FFFFFFF;
  }
  else
  {
    v49.origin.int x = v23;
    v49.origin.int y = v24;
    v49.size.unint64_t width = v25;
    v49.size.unint64_t height = v26;
    if (CGRectIsInfinite(v49))
    {
      int y = -2147483647;
      unint64_t height = 0xFFFFFFFFLL;
      unint64_t width = 0xFFFFFFFFLL;
      int x = -2147483647;
    }
    else
    {
      v50.origin.int x = v23;
      v50.origin.int y = v24;
      v50.size.unint64_t width = v25;
      v50.size.unint64_t height = v26;
      CGRect v51 = CGRectInset(v50, 0.000001, 0.000001);
      CGRect v52 = CGRectIntegral(v51);
      int x = (int)v52.origin.x;
      int y = (int)v52.origin.y;
      unint64_t width = (unint64_t)v52.size.width;
      unint64_t height = (unint64_t)v52.size.height;
    }
  }
  v53.origin.int x = a3;
  v53.origin.int y = a4;
  v53.size.unint64_t width = a5;
  v53.size.unint64_t height = a6;
  if (CGRectIsNull(v53))
  {
    unint64_t v31 = 0;
    unint64_t v32 = 0;
    int v33 = 0x7FFFFFFF;
    int v34 = 0x7FFFFFFF;
  }
  else
  {
    v54.origin.int x = a3;
    v54.origin.int y = a4;
    v54.size.unint64_t width = a5;
    v54.size.unint64_t height = a6;
    if (CGRectIsInfinite(v54))
    {
      int v33 = -2147483647;
      unint64_t v31 = 0xFFFFFFFFLL;
      unint64_t v32 = 0xFFFFFFFFLL;
      int v34 = -2147483647;
    }
    else
    {
      v55.origin.int x = a3;
      v55.origin.int y = a4;
      v55.size.unint64_t width = a5;
      v55.size.unint64_t height = a6;
      CGRect v56 = CGRectInset(v55, 0.000001, 0.000001);
      CGRect v57 = CGRectIntegral(v56);
      int v34 = (int)v57.origin.x;
      int v33 = (int)v57.origin.y;
      unint64_t v32 = (unint64_t)v57.size.width;
      unint64_t v31 = (unint64_t)v57.size.height;
    }
  }
  if (x == -2147483647 && y == -2147483647 && width == 0xFFFFFFFF && height == 0xFFFFFFFF) {
    goto LABEL_16;
  }
  if (v34 != 0x7FFFFFFF)
  {
    if (v34 == -2147483647 && v33 == -2147483647 && v32 == 0xFFFFFFFF && v31 == 0xFFFFFFFF) {
      return;
    }
LABEL_33:
    if (height) {
      BOOL v38 = 0;
    }
    else {
      BOOL v38 = width == 0;
    }
    BOOL v40 = v38 && y == 0x7FFFFFFF && x == 0x7FFFFFFF;
    if (v40 || v34 < x || x + (int)width < v34 + (int)v32 || v33 < y || y + (int)height < v33 + (int)v31) {
      return;
    }
    goto LABEL_16;
  }
  if (v33 != 0x7FFFFFFF || v32 || v31) {
    goto LABEL_33;
  }
LABEL_16:
  int v35 = v34 - x;
  int v36 = v33 - y;
  v45[0] = v35;
  v45[1] = v33 - y;
  unint64_t v46 = v32;
  unint64_t v47 = v31;
  if (a11)
  {
    if (IOSurfaceGetPlaneCount(v15) == 2)
    {
      CI::Bitmap::Bitmap((CI::Bitmap *)v44, 0);
      *(_OWORD *)uint64_t v43 = *a12;
      CI::convert_buffer_to_texture(a15, v15, v35, v36, v44, a11, v43, *(_DWORD *)(a1 + 32));
      *(_OWORD *)uint64_t v43 = 0uLL;
    }
    else
    {
      CI::Bitmap::Bitmap((CI::Bitmap *)v44, 0);
      long long v42 = *a12;
      CI::convert_buffer_to_texture(a15, v15, v35, v36, v44, a11, (uint64_t *)&v42, *(_DWORD *)(a1 + 32));
      long long v42 = 0uLL;
    }
  }
  else
  {
    if (IOSurfaceLock(v15, 1u, 0)) {
      return;
    }
    uint64_t v37 = CI::input_format_for_conversion(*(_DWORD *)(a1 + 32));
    CI::Bitmap::Bitmap(v44, v15, v45, v37);
    long long v41 = *a12;
    CI::convert_buffer_to_texture(a15, v15, 0, 0, v44, 0, (uint64_t *)&v41, *(_DWORD *)(a1 + 32));
    long long v41 = 0uLL;
    IOSurfaceUnlock(v15, 1u, 0);
  }
  CI::Bitmap::~Bitmap((CI::Bitmap *)v44);
}

void CI::ConvertNode::render(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, __IOSurface *a5, long long *a6, CGRect *a7)
{
  uint64_t v14 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 48))(a1, 0);
  if (!v14) {
    goto LABEL_24;
  }
  uint64_t v15 = (CGImageRef *)v14;
  if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 16))(v14) != 29) {
    goto LABEL_24;
  }
  long long v16 = (CGRect *)(*(uint64_t (**)(void))(**(void **)*a4 + 32))(*(void *)*a4);
  v36[0] = 0;
  v36[1] = 0;
  CI::CGNode::surfaceForROI((uint64_t)v15, (uint64_t)a3, &v16->origin.x, (uint64_t)v36, &v35);
  uint64_t v28 = v35;
  if (v35)
  {
    ReturnSurfaceToCache((uint64_t)v35);
  }
  else
  {
    if (CI_VERBOSE_SIGNPOSTS())
    {
      log = ci_signpost_log_render();
      uint64_t v17 = (*(uint64_t (**)(void *))(*a3 + 272))(a3);
      if ((*(int *)(a1 + 36) | (unint64_t)(v17 << 32)) - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        os_signpost_id_t v26 = *(int *)(a1 + 36) | (unint64_t)(v17 << 32);
        if (os_signpost_enabled(log))
        {
          LOWORD(buf[0].origin.x) = 0;
          _os_signpost_emit_with_name_impl(&dword_193671000, log, OS_SIGNPOST_INTERVAL_BEGIN, v26, "convert_processor", "", (uint8_t *)buf, 2u);
        }
      }
    }
    uint64_t v18 = (*(uint64_t (**)(void *))(*a3 + 272))(a3);
    TimerBase::TimerBase((uint64_t)v33, v18, *(_DWORD *)(a1 + 36), (uint64_t)"convert_processor", 15);
    buf[0] = CGRectIntersection(*v16, *a7);
    CI::CGNode::cgImageForROI(v15, buf, &v32);
    uint64_t v19 = v32;
    if (v32)
    {
      CI::Bitmap::Bitmap((CI::Bitmap *)buf);
      if (CI::Bitmap::init((CI::Bitmap *)buf, v19))
      {
        long long v30 = *a6;
        CI::convert_buffer_to_texture((uint64_t)a3, 0, 0, 0, (int8x16_t *)buf, a5, (uint64_t *)&v30, *(_DWORD *)(a1 + 176));
        long long v30 = 0uLL;
      }
      else
      {
        unint64_t v20 = ci_logger_render();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG)) {
          CI::ConvertNode::render((uint64_t)v19, v20);
        }
      }
      CI::Bitmap::~Bitmap((CI::Bitmap *)buf);
      CGImageRef v21 = v32;
      CGImageRef v32 = 0;
      if (v21) {
        CFRelease(v21);
      }
    }
    if (CI_VERBOSE_SIGNPOSTS())
    {
      uint64_t v22 = ci_signpost_log_render();
      os_signpost_id_t v23 = v34;
      if (v34 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        CGFloat v24 = v22;
        if (os_signpost_enabled(v22))
        {
          LOWORD(buf[0].origin.x) = 0;
          _os_signpost_emit_with_name_impl(&dword_193671000, v24, OS_SIGNPOST_INTERVAL_END, v23, "convert_processor", "", (uint8_t *)buf, 2u);
        }
      }
    }
    TimerBase::~TimerBase((TimerBase *)v33);
  }
  CGFloat v25 = v35;
  int v35 = 0;
  if (v25) {
    CFRelease(v25);
  }
  if (v28)
  {
LABEL_24:
    long long v29 = *a6;
    CI::ProcessorNode::render(a1, a2, a3, a4, (uint64_t)a5, &v29, &a7->origin.x);
  }
}

uint64_t CI::ConvertNode::print_for_graph_core(uint64_t a1, FILE *a2)
{
  uint64_t v3 = CI::name_for_conversion(*(_DWORD *)(a1 + 176));

  return fputs(v3, a2);
}

uint64_t CI::ProcessorNode::type(CI::ProcessorNode *this)
{
  return 41;
}

uint64_t CI::ProcessorNode::description(CI::ProcessorNode *this)
{
  return *((void *)this + 20);
}

uint64_t CI::ProcessorNode::shape_for_graphviz(CI::ProcessorNode *this)
{
  return 1;
}

uint64_t CI::ProcessorNode::color_for_graphviz(CI::ProcessorNode *this)
{
  return 1;
}

double CI::ProcessorNode::extent(CI::ProcessorNode *this)
{
  return *((double *)this + 9);
}

double CI::ProcessorNode::extent_unclamped(CI::ProcessorNode *this)
{
  return *((double *)this + 9);
}

uint64_t CI::NodeWithChildren::child_type_is_image(CI::NodeWithChildren *this)
{
  return 1;
}

uint64_t CI::ProcessorNode::may_be_extended_range(CI::ProcessorNode *this)
{
  return 1;
}

uint64_t CI::ProcessorNode::alpha_one(CI::ProcessorNode *this)
{
  if (*((unsigned char *)this + 154)
    || ((*(uint64_t (**)(CI::ProcessorNode *))(*(void *)this + 272))(this) & 1) != 0)
  {
    return 1;
  }
  uint64_t v3 = *(uint64_t (**)(CI::ProcessorNode *))(*(void *)this + 280);

  return v3(this);
}

uint64_t CI::ProcessorNode::output_is_luma(CI::ProcessorNode *this)
{
  uint64_t result = CI::format_is_luminance(*((_DWORD *)this + 30));
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(CI::ProcessorNode *))(*(void *)this + 264);
    return v3(this);
  }
  return result;
}

uint64_t CI::ProcessorNode::output_format(CI::ProcessorNode *this)
{
  return *((unsigned int *)this + 30);
}

uint64_t CI::ProcessorNode::is_flipped(CI::ProcessorNode *this)
{
  return 1;
}

uint64_t non-virtual thunk to'CI::ProcessorNode::type(CI::ProcessorNode *this)
{
  return 41;
}

void CI::ConvertNode::~ConvertNode(CI::ConvertNode *this)
{
  CI::ProcessorNode::~ProcessorNode(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::ConvertNode::type(CI::ConvertNode *this)
{
  return 42;
}

double CI::ConvertNode::extent_unclamped(CI::ConvertNode *this)
{
  return *((double *)this + 23);
}

uint64_t CI::ConvertNode::is_flipped(CI::ConvertNode *this)
{
  uint64_t v1 = (*(uint64_t (**)(CI::ConvertNode *, void))(*(void *)this + 48))(this, 0);
  unsigned int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16))(v1);
  return CI::is_image_type(v2) ^ 1;
}

uint64_t CI::ConvertNode::conversion(CI::ConvertNode *this)
{
  return *((unsigned int *)this + 44);
}

uint64_t non-virtual thunk to'CI::ConvertNode::type(CI::ConvertNode *this)
{
  return 42;
}

void non-virtual thunk to'CI::ConvertNode::~ConvertNode(CI::ConvertNode *this)
{
}

{
  uint64_t vars8;

  CI::ProcessorNode::~ProcessorNode((CI::ConvertNode *)((char *)this - 48));

  JUMPOUT(0x1997023B0);
}

double CI::Node::extent(CI::Node *this)
{
  return *MEMORY[0x1E4F1DB20];
}

double CI::Node::extent_unclamped(CI::Node *this)
{
  return *MEMORY[0x1E4F1DB20];
}

uint64_t CI::Node::alpha_one(CI::Node *this)
{
  return 0;
}

uint64_t CI::Node::output_depth(CI::Node *this)
{
  return 0;
}

__n128 std::__split_buffer<CI::Texture>::push_back(void **a1, __n128 *a2)
{
  uint64_t v4 = (char *)a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  unint64_t v5 = (char *)a1[1];
  uint64_t v6 = v5 - (unsigned char *)*a1;
  if (v5 > *a1)
  {
    uint64_t v7 = v6 >> 4;
    BOOL v8 = v6 >> 4 < -1;
    uint64_t v9 = (v6 >> 4) + 2;
    if (!v8) {
      uint64_t v9 = v7 + 1;
    }
    if (v5 == v4)
    {
      unint64_t v10 = &v5[-16 * (v9 >> 1)];
    }
    else
    {
      do
      {
        *(_OWORD *)&v5[-16 * (v9 >> 1)] = *(_OWORD *)v5;
        v5 += 16;
      }
      while (v5 != v4);
      uint64_t v4 = (char *)a1[1];
      unint64_t v10 = &v5[-16 * (v9 >> 1)];
    }
    a1[1] = &v4[-16 * (v9 >> 1)];
    a1[2] = v10;
    goto LABEL_22;
  }
  uint64_t v12 = v4 - (unsigned char *)*a1;
  BOOL v11 = v12 == 0;
  uint64_t v13 = v12 >> 3;
  if (v11) {
    unint64_t v14 = 1;
  }
  else {
    unint64_t v14 = v13;
  }
  unint64_t v15 = v14 >> 2;
  long long v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>((uint64_t)a1[4], v14);
  uint64_t v17 = &v16[16 * v15];
  uint64_t v19 = &v16[16 * v18];
  unint64_t v20 = (long long *)a1[1];
  uint64_t v21 = (unsigned char *)a1[2] - (unsigned char *)v20;
  if (!v21)
  {
    long long v29 = *a1;
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v17;
    a1[3] = v19;
    if (!v29) {
      goto LABEL_22;
    }
LABEL_21:
    operator delete(v29);
    goto LABEL_22;
  }
  uint64_t v22 = v21 >> 4;
  os_signpost_id_t v23 = &v17[v21 & 0xFFFFFFFFFFFFFFF0];
  uint64_t v24 = 16 * v22;
  uint64_t v25 = 16 * v15;
  do
  {
    long long v26 = *v20++;
    *(_OWORD *)&v16[v25] = v26;
    v25 += 16;
    v24 -= 16;
  }
  while (v24);
  uint64_t v28 = a1[1];
  uint64_t v27 = a1[2];
  long long v29 = *a1;
  *a1 = v16;
  a1[1] = v17;
  a1[2] = v23;
  a1[3] = v19;
  if (v27 != v28) {
    bzero(&v27[-((v27 - v28 - 16) & 0xFFFFFFFFFFFFFFF0) - 16], ((v27 - v28 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
  }
  if (v29) {
    goto LABEL_21;
  }
LABEL_22:
  __n128 result = *a2;
  *(__n128 *)a1[2] = *a2;
  a1[2] = (char *)a1[2] + 16;
  return result;
}

void *std::vector<BOOL>::__vallocate[abi:nn180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    abort();
  }
  __n128 result = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *std::vector<BOOL>::__init_with_size[abi:nn180100]<BOOL *,BOOL *>(void *result, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = result;
    std::vector<BOOL>::__vallocate[abi:nn180100](result, a4);
    return std::vector<BOOL>::__construct_at_end<BOOL *,BOOL *>(v7, a2, a3, a4);
  }
  return result;
}

void *std::vector<BOOL>::__construct_at_end<BOOL *,BOOL *>(void *result, unsigned char *a2, unsigned char *a3, uint64_t a4)
{
  unint64_t v4 = result[1];
  unint64_t v5 = v4 + a4;
  result[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*result + 8 * v6) = 0;
  }
  if (a2 != a3)
  {
    int v7 = v4 & 0x3F;
    BOOL v8 = (uint64_t *)(*result + 8 * (v4 >> 6));
    do
    {
      uint64_t v9 = 1 << v7;
      if (*a2) {
        uint64_t v10 = *v8 | v9;
      }
      else {
        uint64_t v10 = *v8 & ~v9;
      }
      uint64_t *v8 = v10;
      ++a2;
      v8 += v7 == 63;
      if (v7 == 63) {
        int v7 = 0;
      }
      else {
        ++v7;
      }
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t CI::InstanceCounted<(CI::Type)41>::type()
{
  return 41;
}

void *CI::InstanceCounted<(CI::Type)41>::~InstanceCounted(void *result)
{
  *__n128 result = &unk_1EE45AEB8;
  atomic_fetch_add(&dword_1EB466E78[39], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)41>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AEB8;
  atomic_fetch_add(&dword_1EB466E78[39], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::ProgramNode::~ProgramNode(CI::ProgramNode *this)
{
}

{
  uint64_t vars8;

  CI::ProgramNode::~ProgramNode((CI::ProgramNode *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::ProgramNode::child_type_is_image(CI::ProgramNode *this, int a2)
{
  if (a2 < 0) {
    return 0;
  }
  if ((*(int (**)(CI::ProgramNode *))(*(void *)this + 40))(this) <= a2) {
    return 0;
  }
  unint64_t v4 = *(const char **)(*(void *)(*((void *)this + 7) + 32) + 8 * a2);
  size_t v5 = strlen(v4);
  if (!v5) {
    return 0;
  }
  size_t v6 = v5;
  uint64_t v7 = *((void *)this + 6);
  if (v6 != 1)
  {
    size_t v8 = v6 - 1;
    uint64_t v9 = v4;
    do
    {
      int v10 = *v9++;
      uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 48))(v7, (v10 - 48));
      --v8;
    }
    while (v8);
  }
  BOOL v11 = *(uint64_t (**)(void))(*(void *)v7 + 192);

  return v11();
}

size_t CI::ProgramNode::child_depth(CI::ProgramNode *this, int a2)
{
  if (a2 < 0 || (*(int (**)(CI::ProgramNode *))(*(void *)this + 40))(this) <= a2) {
    return 0;
  }
  unint64_t v4 = *(const char **)(*(void *)(*((void *)this + 7) + 32) + 8 * a2);

  return strlen(v4);
}

size_t CI::ProgramNode::child_can_sample_nearest(CI::ProgramNode *this, int a2)
{
  if (a2 < 0) {
    return 0;
  }
  if ((*(int (**)(CI::ProgramNode *))(*(void *)this + 40))(this) <= a2) {
    return 0;
  }
  unint64_t v4 = *(const char **)(*(void *)(*((void *)this + 7) + 32) + 8 * a2);
  size_t result = strlen(v4);
  if (result)
  {
    size_t v6 = result;
    uint64_t v7 = *((void *)this + 6);
    size_t v8 = result - 1;
    if (result != 1)
    {
      uint64_t v9 = v4;
      do
      {
        int v10 = *v9++;
        uint64_t v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 48))(v7, (v10 - 48));
        --v8;
      }
      while (v8);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 16))(v7) == 45
      && !(*(unsigned int (**)(uint64_t))(*(void *)v7 + 408))(v7))
    {
      return 1;
    }
    else
    {
      uint64_t v11 = *((void *)this + 6);
      if (v6 <= 1) {
        size_t v6 = 1;
      }
      while (1)
      {
        unsigned int v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
        size_t result = 0;
        if (v12 > 0x31) {
          break;
        }
        if (((1 << v12) & 0xA17EC0000000) == 0)
        {
          if (v12 == 28)
          {
            if (!CI::Affine::isOrientationWithIntegralTranslation((CI::Affine *)(v11 + 56))) {
              return 0;
            }
          }
          else
          {
            if (v12 != 49) {
              return result;
            }
            size_t result = (*(uint64_t (**)(uint64_t, void))(*(void *)v11 + 192))(v11, (*v4 - 48));
            if (!result) {
              return result;
            }
          }
        }
        int v13 = *v4++;
        uint64_t v11 = (*(uint64_t (**)(uint64_t, void))(*(void *)v11 + 48))(v11, (v13 - 48));
        if (!--v6) {
          return 1;
        }
      }
    }
  }
  return result;
}

void CI::ProgramNode::set_child(CI::ProgramNode *this, CI::Node *a2, int a3)
{
  if ((a3 & 0x80000000) == 0 && (*(int (**)(CI::ProgramNode *))(*(void *)this + 40))(this) > a3)
  {
    size_t v6 = (CI::SerialObjectPtrArray *)*((void *)this + 8);
    CI::SerialObjectPtrArray::replace(v6, a2, a3);
  }
}

void CI::ProgramNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  if (*(void *)(a1 + 160)) {
    fprintf(__stream, "program=%08X ", *(void *)(a1 + 160));
  }
  else {
    fwrite("program ", 8uLL, 1uLL, __stream);
  }
  dispatch_queue_t v4 = CI::ProgramNode::mainProgram((dispatch_queue_t *)a1);
  if (v4)
  {
    dispatch_queue_t v5 = v4;
    size_t v6 = (const char *)(*((uint64_t (**)(dispatch_queue_t))v4->isa + 8))(v4);
    fprintf(__stream, "type=%s ", v6);
    if (*(unsigned char *)(a1 + 168)) {
      fprintf(__stream, "compileTime=%0.1fms ", (*(double *)&v5[3].isa + *(double *)&v5[4].isa) * 1000.0);
    }
  }
  if (CI::ProgramNode::print_for_graph_core(__sFILE *,std::unordered_map<CI::GraphObject const*,unsigned int> const&,BOOL)const::onceToken != -1) {
    dispatch_once(&CI::ProgramNode::print_for_graph_core(__sFILE *,std::unordered_map<CI::GraphObject const*,unsigned int> const&,BOOL)const::onceToken, &__block_literal_global_92);
  }
  uint64_t v13 = 0;
  unint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  int v16 = -1;
  v12[0] = MEMORY[0x1E4F143A8];
  v12[1] = 0x40000000;
  void v12[2] = ___ZNK2CI11ProgramNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke_2;
  v12[3] = &unk_1E57754A8;
  v12[4] = &v13;
  v12[5] = __stream;
  CI::ProgramNode::traverse_graph_preorder_stoppable(a1, (uint64_t)v12);
  fprintf(__stream, "%.*s", *((_DWORD *)v14 + 6) + 1, (const char *)&CI::ProgramNode::print_for_graph_core(__sFILE *,std::unordered_map<CI::GraphObject const*,unsigned int> const&,BOOL)const::paren_str);
  int v7 = *(_DWORD *)(a1 + 140);
  if (v7)
  {
    size_t v8 = CI::name_for_format(v7);
    uint64_t v9 = "s'";
    if ((*(unsigned char *)(a1 + 144) & 2) == 0) {
      uint64_t v9 = "";
    }
    if (*(unsigned char *)(a1 + 144)) {
      int v10 = "s";
    }
    else {
      int v10 = v9;
    }
    fprintf(__stream, " format=%s%s", v8, v10);
  }
  uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
  if (v11) {
    fprintf(__stream, " digest=%08X", v11);
  }
  _Block_object_dispose(&v13, 8);
}

__n128 ___ZNK2CI11ProgramNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke()
{
  result.n128_u64[0] = 0x2929292929292929;
  result.n128_u64[1] = 0x2929292929292929;
  xmmword_1E9333E00 = (__int128)result;
  unk_1E9333E10 = result;
  xmmword_1E9333DE0 = (__int128)result;
  unk_1E9333DF0 = result;
  xmmword_1E9333DC0 = (__int128)result;
  unk_1E9333DD0 = result;
  xmmword_1E9333DA0 = (__int128)result;
  unk_1E9333DB0 = result;
  xmmword_1E9333D80 = (__int128)result;
  unk_1E9333D90 = result;
  xmmword_1E9333D60 = (__int128)result;
  unk_1E9333D70 = result;
  xmmword_1E9333D40 = (__int128)result;
  unk_1E9333D50 = result;
  CI::ProgramNode::print_for_graph_core(__sFILE *,std::unordered_map<CI::GraphObject const*,unsigned int> const&,BOOL)const::paren_str = (__int128)result;
  *(__n128 *)algn_1E9333D30 = result;
  byte_1E9333E20 = 0;
  return result;
}

uint64_t ___ZNK2CI11ProgramNode20print_for_graph_coreEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEEb_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a5) {
    fputc(44, *(FILE **)(a1 + 40));
  }
  if (a6 == -1)
  {
    (*(void (**)(uint64_t, void))(*(void *)a2 + 112))(a2, *(void *)(a1 + 40));
    fputc(40, *(FILE **)(a1 + 40));
  }
  else
  {
    fprintf(*(FILE **)(a1 + 40), "%d", a6);
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = a4;
  return 0;
}

CFStringRef CI::ProgramNode::description(CI::ProgramNode *this)
{
  unsigned int v2 = (*(uint64_t (**)(CI::ProgramNode *))(*(void *)this + 16))(this);
  uint64_t v3 = CI::name_for_type(v2);
  return CFStringCreateWithFormat(0, 0, @"<CI::%s %p>", v3, this);
}

double CI::ProgramNode::roi_of_child(CI::ProgramNode *this, CGRect a2)
{
  return *MEMORY[0x1E4F1DB20];
}

unint64_t CI::ProgramNode::digest(CI::ProgramNode *this)
{
  uint64_t v2 = (*(uint64_t (**)(void))(**((void **)this + 6) + 384))(*((void *)this + 6));
  XXH64_reset(v4, 0);
  uint64_t __src = v2;
  XXH64_update((uint64_t)v4, (char *)&__src, 8uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 145);
  XXH64_update((uint64_t)v4, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 146);
  XXH64_update((uint64_t)v4, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 147);
  XXH64_update((uint64_t)v4, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 148);
  XXH64_update((uint64_t)v4, (char *)&__src, 4uLL);
  LOBYTE(__src) = *((unsigned char *)this + 144);
  XXH64_update((uint64_t)v4, (char *)&__src, 1uLL);
  LODWORD(__src) = *((_DWORD *)this + 35);
  XXH64_update((uint64_t)v4, (char *)&__src, 4uLL);
  return XXH64_digest((uint64_t)v4);
}

uint64_t **CI::SerialRectArray::findRetiredParentROI@<X0>(uint64_t **result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  *(void *)a4 = a4 + 8;
  int v15 = 0;
  size_t v6 = *result;
  dispatch_queue_t v5 = result[1];
  if (v5 != *result)
  {
    uint64_t v9 = result;
    int v10 = 0;
    uint64_t v11 = 0;
    do
    {
      unsigned int v12 = &v6[15 * v11];
      uint64_t v13 = v12[7];
      uint64_t v14 = v12[8];
      if (v13 != v14)
      {
        do
        {
          if (*(void *)v13 == *(void *)a2
            && *(_DWORD *)(a2 + 16) == *(_DWORD *)(v13 + 16)
            && *(_DWORD *)(a2 + 12) == *(_DWORD *)(v13 + 12)
            && *(_DWORD *)(a2 + 8) == *(_DWORD *)(v13 + 8))
          {
            (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v13);
            __n128 result = std::__tree<int>::__emplace_unique_key_args<int,int const&>((uint64_t **)a4, &v15, &v15);
          }
          v13 += 48;
        }
        while (v13 != v14);
        int v10 = v15;
        size_t v6 = *v9;
        dispatch_queue_t v5 = v9[1];
      }
      int v15 = ++v10;
      uint64_t v11 = v10;
    }
    while (0xEEEEEEEEEEEEEEEFLL * (v5 - v6) > v10);
  }
  return result;
}

CFDictionaryRef ___ZN2CI11ProgramNode19build_program_graphEPNS_4NodeEPNS_7ContextERNS_13NodeToNodeMapEb_block_invoke_2(uint64_t a1, const void *a2, const void *a3)
{
  CFDictionaryRef result = *(const __CFDictionary **)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (result)
  {
    CFDictionaryRef result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      CFDictionaryRef result = (const __CFDictionary *)CFEqual(result, a3);
      if (!result) {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      }
    }
  }
  return result;
}

char *SwizzlerMask(int a1)
{
  if ((a1 - 1) > 0x19) {
    return 0;
  }
  else {
    return off_1E5775798[a1 - 1];
  }
}

uint64_t CI::update_intermediate_descriptor_for_processor(int *a1, uint64_t a2, unsigned char *a3, int a4, int a5)
{
  int v8 = a4;
  if (a4 <= 0) {
    int v8 = *(_DWORD *)(a2 + 32);
  }
  *a1 = v8;
  *((unsigned char *)a1 + 4) = 0;
  if ((a4 < 0 || a5)
    && !CI_NO_CM()
    && *(void *)(a2 + 24)
    && (int)CI::format_bits_per_component(*a1) <= 8)
  {
    if (CI_INTERMEDIATE_SRGB_TEXTURES()
      && ((*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 584))(a2, *a1, 3) & 1) != 0)
    {
      char v10 = 2;
    }
    else
    {
      char v10 = 1;
    }
    *((unsigned char *)a1 + 4) |= v10;
  }
  *((unsigned char *)a1 + 7) = a3[104];
  uint64_t result = CI_FLIP_IMAGE_PROCESSOR();
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a3 + 408))(a3);
    if (result) {
      *((unsigned char *)a1 + 8) = 1;
    }
  }
  return result;
}

__n128 __Block_byref_object_copy__26(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v2;
  __n128 result = *(__n128 *)(a2 + 72);
  long long v4 = *(_OWORD *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = v5;
  *(_OWORD *)(a1 + 88) = v4;
  *(__n128 *)(a1 + 72) = result;
  return result;
}

void *__Block_byref_object_copy__69(void *result, void *a2)
{
  result[5] = a2[5];
  long long v2 = a2 + 6;
  uint64_t v3 = a2[6];
  result[6] = v3;
  long long v4 = result + 6;
  uint64_t v5 = a2[7];
  result[7] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[5] = v2;
    *long long v2 = 0;
    a2[7] = 0;
  }
  else
  {
    result[5] = v4;
  }
  return result;
}

void __Block_byref_object_dispose__70(uint64_t a1)
{
}

uint64_t CI::ProgramNode::compute_kernel_attributes(CI::ProgramNode *this, CI::Context *a2)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2000000000;
  char v16 = 1;
  uint64_t v9 = 0;
  char v10 = &v9;
  uint64_t v11 = 0x2000000000;
  char v12 = 1;
  uint64_t v5 = 0;
  size_t v6 = &v5;
  uint64_t v7 = 0x2000000000;
  char v8 = 0;
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI11ProgramNode25compute_kernel_attributesEPNS_7ContextE_block_invoke;
  v4[3] = &unk_1E5770590;
  v4[4] = &v13;
  int64x2_t v4[5] = &v9;
  void v4[6] = &v5;
  v4[7] = a2;
  CI::ProgramNode::traverse_graph_preorder_stoppable((uint64_t)this, (uint64_t)v4);
  uint64_t v2 = *((unsigned __int8 *)v14 + 24) | (2 * *((unsigned __int8 *)v10 + 24)) | (4
                                                                              * *((unsigned __int8 *)v6
                                                                                              + 24));
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(&v9, 8);
  _Block_object_dispose(&v13, 8);
  return v2;
}

uint64_t ___ZNK2CI11ProgramNode25compute_kernel_attributesEPNS_7ContextE_block_invoke(void *a1, CI::Object *this, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  if (a6 == -1)
  {
    v19[4] = v6;
    int64x2_t v19[5] = v7;
    char v8 = this;
    v19[0] = this;
    if (this) {
      CI::Object::ref((uint64_t)this);
    }
    uint64_t v10 = (*(uint64_t (**)(CI::Object *, void))(*(void *)v8 + 320))(v8, a1[7]);
    v19[1] = v10;
    if (v10) {
      char v8 = (CI::Object *)v10;
    }
    if ((*(unsigned int (**)(CI::Object *))(*(void *)v8 + 16))(v8) == 49
      || (*(unsigned int (**)(CI::Object *))(*(void *)v8 + 16))(v8) == 50
      || (*(unsigned int (**)(CI::Object *))(*(void *)v8 + 16))(v8) == 51)
    {
      uint64_t v11 = (unsigned char *)*((void *)v8 + 6);
      if (v11)
      {
        uint64_t v12 = *(void *)(a1[4] + 8);
        if (v11[165]) {
          BOOL v13 = *(unsigned char *)(v12 + 24) == 0;
        }
        else {
          BOOL v13 = 1;
        }
        char v14 = !v13;
        *(unsigned char *)(v12 + 24) = v14;
        uint64_t v15 = *(void *)(a1[5] + 8);
        if (v11[162]) {
          BOOL v16 = *(unsigned char *)(v15 + 24) == 0;
        }
        else {
          BOOL v16 = 1;
        }
        char v17 = !v16;
        *(unsigned char *)(v15 + 24) = v17;
        *(unsigned char *)(*(void *)(a1[6] + 8) + 24) |= v11[166];
      }
    }
    CI::ConvertedNodeRAII::~ConvertedNodeRAII((CI::ConvertedNodeRAII *)v19);
  }
  return 0;
}

uint64_t ___ZN2CI11ProgramNode28create_program_and_argumentsEPNS_7ContextEPKc_block_invoke_78(uint64_t a1, FILE *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(const char **)(a1 + 40);
  uint64_t v6 = (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 304))(*(void *)(a1 + 48));
  int v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 272))();
  uint64_t v8 = *(void *)(a1 + 48);
  int v10 = *(unsigned __int8 *)(v8 + 236);
  uint64_t v9 = (const char *)(v8 + 236);
  if (v10) {
    uint64_t v11 = ":";
  }
  else {
    uint64_t v11 = "";
  }
  fprintf(a2, "CI_PRINT_PROGRAM %s (%s context %d%s%s frame %lu) node:%d digest:%016llX = \n", v5, v6, v7, v11, v9, *(void *)(v9 - 84), *(_DWORD *)(a1 + 56), *(void *)(v4 + 160));
  fwrite("// Argument Names\n", 0x12uLL, 1uLL, a2);
  CI::MainProgram::print_argument_names(*(CI::MainProgram **)(v4 + 120), a2);
  fputc(10, a2);
  fwrite("// Argument Types\n", 0x12uLL, 1uLL, a2);
  CI::MainProgram::print_argument_types(*(CI::MainProgram **)(v4 + 120), a2);
  fputc(10, a2);
  fwrite("// Arguments\n", 0xDuLL, 1uLL, a2);
  uint64_t v12 = *(void *)(v4 + 128);
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 0x40000000;
  void v14[2] = ___ZNK2CI20SerialObjectPtrArray5printEP7__sFILE_block_invoke;
  v14[3] = &__block_descriptor_tmp_226;
  v14[4] = v12;
  stream_to_file(a2, (uint64_t)v14);
  fputc(10, a2);
  return (*(uint64_t (**)(void, FILE *))(**(void **)(v4 + 120) + 56))(*(void *)(v4 + 120), a2);
}

uint64_t ___ZN2CI11ProgramNode28create_program_and_argumentsEPNS_7ContextEPKc_block_invoke_2(uint64_t a1, FILE *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(const char **)(a1 + 40);
  uint64_t v5 = *(void *)(v3 + 160);
  int v6 = CI::MainProgram::num_arguments(*(CI::MainProgram **)(v3 + 120));
  fprintf(a2, "Argument count mismatch for program (%s) <%016llx> (%d != %d).\n\n", v4, v5, v6, **(_DWORD **)(v3 + 128));
  fwrite("[argument types]\n", 0x11uLL, 1uLL, a2);
  CI::MainProgram::print_argument_types(*(CI::MainProgram **)(v3 + 120), a2);
  fputc(10, a2);
  fwrite("[argument names]\n", 0x11uLL, 1uLL, a2);
  CI::MainProgram::print_argument_names(*(CI::MainProgram **)(v3 + 120), a2);
  fputc(10, a2);
  fwrite("[argument objects]\n", 0x13uLL, 1uLL, a2);
  uint64_t v7 = *(void *)(v3 + 128);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK2CI20SerialObjectPtrArray5printEP7__sFILE_block_invoke;
  v9[3] = &__block_descriptor_tmp_226;
  void v9[4] = v7;
  stream_to_file(a2, (uint64_t)v9);
  return fputc(10, a2);
}

void CI::ProgramNode::graphvis_set_title(uint64_t a1, void *a2, void *a3)
{
  if (CI_GRAPHVIZ_INTERNAL()
    || (CI_PRINT_TREE_dump_intermediates() & 1) != 0
    || CI_PRINT_TREE_dump_outputs())
  {
    int v6 = (unsigned int *)(a1 + 36);
  }
  else
  {
    uint64_t v18 = a1;
    BOOL v13 = std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v18);
    if (!v13)
    {
      int v8 = *(_DWORD *)(a1 + 140);
      goto LABEL_17;
    }
    int v6 = (unsigned int *)(v13 + 3);
  }
  uint64_t v7 = *v6;
  int v8 = *(_DWORD *)(a1 + 140);
  if (v7)
  {
    if (v8)
    {
      uint64_t v9 = CI::name_for_format(v8);
      int v10 = "s'";
      if ((*(unsigned char *)(a1 + 144) & 2) == 0) {
        int v10 = "";
      }
      if (*(unsigned char *)(a1 + 144)) {
        uint64_t v11 = "s";
      }
      else {
        uint64_t v11 = v10;
      }
      uint64_t v12 = (const char *)CFStringCreateWithFormat(0, 0, @"%u  %s%s", v7, v9, v11);
    }
    else
    {
      uint64_t v12 = (const char *)CFStringCreateWithFormat(0, 0, @"%u", *v6);
    }
    goto LABEL_24;
  }
LABEL_17:
  if (!v8) {
    return;
  }
  char v14 = CI::name_for_format(v8);
  uint64_t v15 = "s'";
  if ((*(unsigned char *)(a1 + 144) & 2) == 0) {
    uint64_t v15 = "";
  }
  if (*(unsigned char *)(a1 + 144)) {
    BOOL v16 = "s";
  }
  else {
    BOOL v16 = v15;
  }
  uint64_t v12 = (const char *)CFStringCreateWithFormat(0, 0, @"%s%s", v14, v16);
LABEL_24:
  char v17 = v12;
  if (v12)
  {
    CIGVNodeSetTitle(a2, v12);
    CFRelease(v17);
  }
}

void CI::ProgramNode::print_for_graphviz(uint64_t a1, FILE *a2, uint64_t a3)
{
  v23[128] = *MEMORY[0x1E4F143B8];
  v20[0] = 0;
  v20[1] = v20;
  _OWORD v20[2] = 0x2000000000;
  int v21 = -1;
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 0x40000000;
  v19[2] = ___ZNK2CI11ProgramNode18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEENS_4Node9NodeStatsE_block_invoke;
  v19[3] = &unk_1E5775608;
  v19[4] = v20;
  CI::ProgramNode::traverse_graph_preorder_stoppable(a1, (uint64_t)v19);
  BOOL v6 = (*(unsigned int (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48)) == 30;
  v17[0] = 0;
  v17[1] = v17;
  _OWORD v17[2] = 0x2000000000;
  int v18 = -1;
  v14[0] = 0;
  v14[1] = v14;
  void v14[2] = 0x5002000000;
  v14[3] = __Block_byref_object_copy__105;
  v14[4] = __Block_byref_object_dispose__106;
  memset(v15, 0, sizeof(v15));
  int v16 = 1065353216;
  v12[0] = 0;
  v12[1] = v12;
  void v12[2] = 0x2000000000;
  char v13 = 0;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 0x40000000;
  _OWORD v11[2] = ___ZNK2CI11ProgramNode18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEENS_4Node9NodeStatsE_block_invoke_107;
  uint64_t v11[3] = &unk_1E5775630;
  double v11[4] = v14;
  void v11[5] = v17;
  CI::ProgramNode::traverse_graph_preorder_stoppable(a1, (uint64_t)v11);
  v22[0] = 0;
  v22[1] = v22;
  v22[2] = 0x42802000000;
  v22[3] = __Block_byref_object_copy__109;
  v22[4] = __Block_byref_object_dispose__110;
  bzero(v23, 0x400uLL);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 0x40000000;
  v9[2] = ___ZNK2CI11ProgramNode18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEENS_4Node9NodeStatsE_block_invoke_111;
  v9[3] = &unk_1E5775658;
  BOOL v10 = v6;
  void v9[4] = v22;
  void v9[5] = v14;
  v9[8] = a2;
  v9[9] = a3;
  void v9[6] = v12;
  v9[7] = a1;
  CI::ProgramNode::traverse_graph_preorder_stoppable(a1, (uint64_t)v9);
  fputc(10, a2);
  dispatch_queue_t v7 = CI::ProgramNode::mainProgram((dispatch_queue_t *)a1);
  if (v7)
  {
    int v8 = (const char *)(*((uint64_t (**)(dispatch_queue_t))v7->isa + 8))(v7);
    fprintf(a2, "\ntype=%s", v8);
  }
  _Block_object_dispose(v22, 8);
  _Block_object_dispose(v12, 8);
  _Block_object_dispose(v14, 8);
  std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v15);
  _Block_object_dispose(v17, 8);
  _Block_object_dispose(v20, 8);
}

uint64_t ___ZNK2CI11ProgramNode18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEENS_4Node9NodeStatsE_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  if (*(_DWORD *)(v4 + 24) < a4) {
    *(_DWORD *)(v4 + 24) = a4;
  }
  return 0;
}

uint64_t __Block_byref_object_copy__105(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__106(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

BOOL ___ZNK2CI11ProgramNode18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEENS_4Node9NodeStatsE_block_invoke_107(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = a2;
  uint64_t v3 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v8);
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v3)
  {
    uint64_t v9 = &v8;
    if (!*((_DWORD *)std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v4, &v8, (uint64_t)&std::piecewise_construct, &v9)+ 6))
    {
      int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
      uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
      uint64_t v9 = &v8;
      *((_DWORD *)std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v6, &v8, (uint64_t)&std::piecewise_construct, &v9)+ 6) = v5;
      --*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
    }
  }
  else
  {
    uint64_t v9 = &v8;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v4, &v8, (uint64_t)&std::piecewise_construct, &v9)+ 6) = 0;
  }
  return v3 != 0;
}

void *__Block_byref_object_copy__109(uint64_t a1, uint64_t a2)
{
  return memcpy((void *)(a1 + 40), (const void *)(a2 + 40), 0x400uLL);
}

uint64_t ___ZNK2CI11ProgramNode18print_for_graphvizEP7__sFILERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS3_4hashIS7_EENS3_8equal_toIS7_EENS3_9allocatorINS3_4pairIKS7_jEEEEEENS_4Node9NodeStatsE_block_invoke_111(uint64_t a1, _DWORD **a2, uint64_t a3, unsigned int a4, int a5, uint64_t a6)
{
  BOOL v38 = a2;
  uint64_t v11 = *(void **)(a1 + 56);
  if (a4 <= 0x3FF) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + a4 + 40) = (*((uint64_t (**)(_DWORD **))*a2 + 5))(a2);
  }
  if (a3)
  {
    fputc(10, *(FILE **)(a1 + 64));
    unint64_t v12 = *(unsigned __int8 *)(a1 + 80);
    if ((int)v12 < (int)a4)
    {
      do
      {
        if (v12 <= 0x3FF
          && (int v13 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + v12 + 40),
              BOOL v14 = v13 != 0,
              int v15 = v13 - 1,
              v15 != 0 && v14))
        {
          unint64_t v16 = v12 + 1;
          char v17 = *(FILE **)(a1 + 64);
          if (v12 + 1 == a4 && v15 == a5)
          {
            fwrite("╰─", 6uLL, 1uLL, v17);
            *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + v12 + 40) = 0;
          }
          else
          {
            if (v16 == a4)
            {
              int v18 = "├─";
              size_t v19 = 6;
            }
            else
            {
              int v18 = "│ ";
              size_t v19 = 4;
            }
            fwrite(v18, v19, 1uLL, v17);
          }
        }
        else
        {
          fwrite("  ", 2uLL, 1uLL, *(FILE **)(a1 + 64));
          unint64_t v16 = v12 + 1;
        }
        unint64_t v12 = v16;
      }
      while (v16 != a4);
    }
  }
  if (a6 == -1)
  {
    uint64_t v23 = *(void *)(*(void *)(a1 + 40) + 8) + 40;
    uint64_t v39 = &v38;
    if (*((int *)std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v23, &v38, (uint64_t)&std::piecewise_construct, &v39)+ 6) >= 1)
    {
      uint64_t v24 = *(FILE **)(a1 + 64);
      uint64_t v25 = *(void *)(*(void *)(a1 + 40) + 8) + 40;
      uint64_t v39 = &v38;
      long long v26 = std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v25, &v38, (uint64_t)&std::piecewise_construct, &v39);
      fprintf(v24, "<%d>", *((_DWORD *)v26 + 6));
      return 1;
    }
    if ((*((unsigned int (**)(_DWORD **))*v38 + 2))(v38) == 49)
    {
      int v28 = *v38[7];
      if ((*((unsigned int (**)(_DWORD **))*v38 + 39))(v38)) {
        ++v28;
      }
    }
    else
    {
      int v28 = 0;
    }
    if ((*((unsigned int (**)(_DWORD **))*v38 + 2))(v38) == 50)
    {
      int v28 = *v38[7];
      if ((*((unsigned int (**)(_DWORD **))*v38 + 39))(v38)) {
        ++v28;
      }
    }
    if ((*((unsigned int (**)(_DWORD **))*v38 + 2))(v38) == 51)
    {
      int v28 = *v38[7];
      if ((*((unsigned int (**)(_DWORD **))*v38 + 39))(v38)) {
        ++v28;
      }
    }
    if (a4) {
      BOOL v29 = 1;
    }
    else {
      BOOL v29 = v28 <= 2;
    }
    int v30 = !v29;
    if (a4 == 1)
    {
      if (*(unsigned char *)(a1 + 80)) {
        BOOL v31 = v28 <= 2;
      }
      else {
        BOOL v31 = 1;
      }
      int v30 = !v31;
    }
    (*((void (**)(_DWORD **, void, void, void))*v38 + 15))(v38, *(void *)(a1 + 64), *(void *)(a1 + 72), v30 ^ 1u);
    uint64_t v32 = *(void *)(*(void *)(a1 + 40) + 8) + 40;
    uint64_t v39 = &v38;
    if ((std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v32, &v38, (uint64_t)&std::piecewise_construct, &v39)[3] & 0x80000000) != 0)
    {
      uint64_t v33 = *(void *)(*(void *)(a1 + 40) + 8) + 40;
      uint64_t v39 = &v38;
      os_signpost_id_t v34 = std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v33, &v38, (uint64_t)&std::piecewise_construct, &v39);
      *((_DWORD *)v34 + 6) = -*((_DWORD *)v34 + 6);
      int v35 = *(FILE **)(a1 + 64);
      uint64_t v36 = *(void *)(*(void *)(a1 + 40) + 8) + 40;
      uint64_t v39 = &v38;
      std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v36, &v38, (uint64_t)&std::piecewise_construct, &v39);
      fprintf(v35, "<%d>");
    }
  }
  else
  {
    unint64_t v20 = (void *)(*(uint64_t (**)(void *, uint64_t))(*v11 + 48))(v11, a6);
    if (CI_GRAPHVIZ_INTERNAL()
      || (CI_PRINT_TREE_dump_intermediates() & 1) != 0
      || CI_PRINT_TREE_dump_outputs()
      || (uint64_t v37 = *(void **)(a1 + 72),
          uint64_t v39 = v20,
          std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(v37, &v39)))
    {
      fprintf(*(FILE **)(a1 + 64), "(%d)");
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
    uint64_t v21 = v11[9];
    if (v21) {
      uint64_t v22 = *(const char **)(*(void *)(v21 + 32) + 8 * (int)a6);
    }
    else {
      uint64_t v22 = "";
    }
    if (*v22) {
      fprintf(*(FILE **)(a1 + 64), " // stopped concat because %s");
    }
  }
  return 0;
}

void *CI::ProgramNode::node_for_graphviz_stats(CI::Node *a1, uint64_t a2, long long *a3)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  double v6 = (*(double (**)(CI::Node *))(*(void *)a1 + 168))(a1);
  BOOL v10 = (void *)CIGVNodeCreateForNode((uint64_t)a1, v6, v7, v8, v9);
  uint64_t v11 = (const char *)(*(uint64_t (**)(CI::Node *))(*(void *)a1 + 56))(a1);
  CIGVNodeSetShape(v10, v11);
  unint64_t v12 = (const char *)(*(uint64_t (**)(CI::Node *))(*(void *)a1 + 64))(a1);
  CIGVNodeSetColor(v10, v12);
  uint64_t v13 = (*(uint64_t (**)(CI::Node *))(*(void *)a1 + 384))(a1);
  uint64_t v15 = v13;
  v47[0] = 0;
  v47[1] = v47;
  _DWORD v47[2] = 0x4002000000;
  v47[3] = __Block_byref_object_copy__122;
  v47[4] = __Block_byref_object_dispose__123;
  memset(&v47[5], 0, 24);
  v46[0] = 0;
  v46[1] = v46;
  v46[2] = 0x2000000000;
  v46[3] = 0;
  if (v13)
  {
    unint64_t v16 = __CFString::createWithFormat((__CFString *)"%llX", v14, v13);
    char v17 = (const void *)CopyPeakNonVolatileList();
    v45[0] = MEMORY[0x1E4F143A8];
    v45[1] = 0x40000000;
    _DWORD v45[2] = ___ZNK2CI11ProgramNode23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS_4Node9NodeStatsE_block_invoke;
    v45[3] = &unk_1E5775680;
    v45[6] = v16;
    v45[7] = v10;
    v45[4] = v47;
    void v45[5] = v46;
    __CFArray::for_each((CFIndex)v17, (uint64_t)v45);
    if (v17) {
      CFRelease(v17);
    }
    if (v16) {
      CFRelease(v16);
    }
  }
  (*(void (**)(CI::Node *, void *, uint64_t))(*(void *)a1 + 128))(a1, v10, a2);
  v39[0] = MEMORY[0x1E4F143A8];
  v39[1] = 0x40000000;
  v39[2] = ___ZNK2CI11ProgramNode23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS_4Node9NodeStatsE_block_invoke_2;
  unsigned __int16 v39[3] = &unk_1E57756A8;
  v39[6] = a1;
  void v39[7] = a2;
  long long v18 = a3[1];
  long long v40 = *a3;
  long long v41 = v18;
  long long v19 = a3[3];
  long long v42 = a3[2];
  long long v43 = v19;
  v39[4] = v47;
  int64x2_t v39[5] = v46;
  uint64_t v44 = v15;
  unint64_t v20 = (const char *)stream_to_string((uint64_t)v39);
  CIGVNodeSetLabel(v10, v20);
  CFRelease(v20);
  if (CI_PRINT_TREE_dump_rois() && (int)CI::Node::rois_count(a1) >= 1)
  {
    int v21 = 0;
    do
    {
      double v22 = CI::Node::roi(a1, v21);
      CIGVNodeAddRoi(v10, v22);
      ++v21;
    }
    while (v21 < (int)CI::Node::rois_count(a1));
  }
  if (((CI_PRINT_TREE_dump_intermediates() & 1) != 0 || CI_PRINT_TREE_dump_outputs())
    && (int)CI::Node::rois_count(a1) >= 1)
  {
    int v23 = 0;
    do
    {
      int v24 = (int)CI::Node::roi(a1, v23);
      int v26 = (int)v25;
      int v28 = (int)v27;
      int v30 = (int)v29;
      BOOL v31 = CI_TEMP_DIR();
      pid_t v32 = getpid();
      snprintf(__str, 0x100uLL, "%s/%d_intermediate_%d_%d_%d_%d_%d.png", v31, v32, *((_DWORD *)a1 + 9), v24, v26, v28, v30);
      if (!stat(__str, &v48) && (__int16)v48.st_mode < 0)
      {
        if (v48.st_size)
        {
          uint64_t v33 = CGDataProviderCreateWithFilename(__str);
          os_signpost_id_t v34 = (char *)CGImageCreateWithPNGDataProvider(v33, 0, 1, kCGRenderingIntentDefault);
          CGDataProviderRelease(v33);
          if (v34) {
            goto LABEL_22;
          }
        }
      }
      int v35 = CI_TEMP_DIR();
      pid_t v36 = getpid();
      snprintf(__str, 0x100uLL, "%s/%d_output_%d_%d_%d_%d_%d.png", v35, v36, *((_DWORD *)a1 + 9), v24, v26, v28, v30);
      if (!stat(__str, &v48) && (__int16)v48.st_mode < 0)
      {
        if (v48.st_size)
        {
          uint64_t v37 = CGDataProviderCreateWithFilename(__str);
          os_signpost_id_t v34 = (char *)CGImageCreateWithPNGDataProvider(v37, 0, 1, kCGRenderingIntentDefault);
          CGDataProviderRelease(v37);
          if (v34)
          {
LABEL_22:
            CIGVNodeAddImage(v10, v34);
            CGImageRelease((CGImageRef)v34);
          }
        }
      }
      ++v23;
    }
    while (v23 < (int)CI::Node::rois_count(a1));
  }
  _Block_object_dispose(v46, 8);
  _Block_object_dispose(v47, 8);
  return v10;
}

__n128 __Block_byref_object_copy__122(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  return result;
}

__CFString *__CFString::createWithFormat(__CFString *this, const char *a2, ...)
{
  va_start(va, a2);
  if (this)
  {
    CFStringRef v2 = CFStringCreateWithCString(0, (const char *)this, 0x600u);
    return (__CFString *)CFStringCreateWithFormatAndArguments(0, 0, v2, va);
  }
  return this;
}

CFIndex __CFArray::for_each(CFIndex result, uint64_t a2)
{
  if (result)
  {
    uint64_t v3 = (__CFArray *)result;
    __n128 result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      for (CFArrayRef i = 0; (uint64_t)i < result; CFArrayRef i = (const __CFArray *)((char *)i + 1))
      {
        ObjectAtIndeint x = __CFArray::getObjectAtIndex(v3, i);
        (*(void (**)(uint64_t, const void *))(a2 + 16))(a2, ObjectAtIndex);
        __n128 result = CFArrayGetCount(v3);
      }
    }
  }
  return result;
}

CFStringRef ___ZNK2CI11ProgramNode23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS_4Node9NodeStatsE_block_invoke(uint64_t a1, __CFDictionary *this, const __CFString *a3)
{
  CFStringRef result = (const __CFString *)__CFDictionary::getString(this, (const __CFDictionary *)@"id", a3);
  if (result)
  {
    CFStringRef v6 = *(const __CFString **)(a1 + 48);
    if (v6)
    {
      CFStringRef result = (const __CFString *)CFStringHasPrefix(result, v6);
      if (result)
      {
        CIGVNodeSetColor(*(void **)(a1 + 56), (const char *)7);
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = __CFDictionary::getInt32(this, (const __CFDictionary *)@"x", 0);
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 44) = __CFDictionary::getInt32(this, (const __CFDictionary *)@"y", 0);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48) = (int)__CFDictionary::getInt32(this, (const __CFDictionary *)@"w", 0);
        *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 56) = (int)__CFDictionary::getInt32(this, (const __CFDictionary *)@"h", 0);
        CFStringRef result = __CFDictionary::getInt32(this, (const __CFDictionary *)@"size", 0);
        *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += (int)result;
      }
    }
  }
  return result;
}

const __CFDictionary *__CFDictionary::getString(const __CFDictionary *this, const __CFDictionary *a2, const __CFString *a3)
{
  if (this)
  {
    this = (const __CFDictionary *)CFDictionaryGetValue(this, a2);
    if (this)
    {
      CFDictionaryRef v3 = this;
      CFTypeID v4 = CFGetTypeID(this);
      if (v4 == CFStringGetTypeID()) {
        return v3;
      }
      else {
        return 0;
      }
    }
  }
  return this;
}

const __CFString *__CFDictionary::getInt32(__CFDictionary *this, const __CFDictionary *a2, const __CFString *a3)
{
  if (this && CFDictionaryContainsKey(this, a2))
  {
    CFDictionaryRef Number = __CFDictionary::getNumber(this, a2, v6);
    unsigned int valuePtr = 0;
    if (Number)
    {
      CFNumberGetValue(Number, kCFNumberSInt32Type, &valuePtr);
      return (const __CFString *)valuePtr;
    }
    else
    {
      return 0;
    }
  }
  return a3;
}

uint64_t ___ZNK2CI11ProgramNode23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS_4Node9NodeStatsE_block_invoke_2(uint64_t a1, FILE *a2)
{
  CFTypeID v4 = *(unsigned char **)(a1 + 48);
  if (*((void *)v4 + 20)) {
    fprintf(a2, "program=%016llX\n", *((void *)v4 + 20));
  }
  uint64_t v5 = *(void *)(a1 + 56);
  long long v6 = *(_OWORD *)(a1 + 80);
  v48[0] = *(_OWORD *)(a1 + 64);
  v48[1] = v6;
  long long v7 = *(_OWORD *)(a1 + 112);
  v48[2] = *(_OWORD *)(a1 + 96);
  _OWORD v48[3] = v7;
  (*(void (**)(unsigned char *, FILE *, uint64_t, _OWORD *))(*(void *)v4 + 152))(v4, a2, v5, v48);
  if ((int)CI::Node::rois_count((CI::Node *)v4) < 1)
  {
    unint64_t v9 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = 80;
    do
    {
      if (v10 == 80) {
        fprintf(a2, "\nrois=");
      }
      else {
        fprintf(a2, ",");
      }
      if (v10 != 80 && (v8 & 1) == 0) {
        fwrite("\n     ", 6uLL, 1uLL, a2);
      }
      v49.origin.CGFloat x = CI::Node::roi((CI::Node *)v4, v8);
      CGFloat x = v49.origin.x;
      CGFloat y = v49.origin.y;
      double width = v49.size.width;
      double height = v49.size.height;
      uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
      int v16 = *(_DWORD *)(v15 + 40);
      int v17 = *(_DWORD *)(v15 + 44);
      uint64_t v18 = *(void *)(v15 + 48);
      uint64_t v19 = *(void *)(v15 + 56);
      if (CGRectIsNull(v49))
      {
        unint64_t v21 = 0;
        unint64_t v22 = 0;
        int v23 = 0x7FFFFFFF;
        int v24 = 0x7FFFFFFF;
      }
      else
      {
        v50.origin.CGFloat x = x;
        v50.origin.CGFloat y = y;
        v50.size.double width = width;
        v50.size.double height = height;
        if (CGRectIsInfinite(v50))
        {
          int v23 = -2147483647;
          unint64_t v21 = 0xFFFFFFFFLL;
          unint64_t v22 = 0xFFFFFFFFLL;
          int v24 = -2147483647;
        }
        else
        {
          v51.origin.CGFloat x = x;
          v51.origin.CGFloat y = y;
          v51.size.double width = width;
          v51.size.double height = height;
          CGRect v52 = CGRectInset(v51, 0.000001, 0.000001);
          CGRect v53 = CGRectIntegral(v52);
          int v24 = (int)v53.origin.x;
          int v23 = (int)v53.origin.y;
          unint64_t v22 = (unint64_t)v53.size.width;
          unint64_t v21 = (unint64_t)v53.size.height;
        }
      }
      if (v16 == v24 && v17 == v23 && v18 == v22 && v19 == v21)
      {
        fputc(60, a2);
        v55.origin.CGFloat x = x;
        v55.origin.CGFloat y = y;
        v55.size.double width = width;
        v55.size.double height = height;
        CI::fprintf(a2, v28, v55);
        fputc(62, a2);
      }
      else
      {
        v54.origin.CGFloat x = x;
        v54.origin.CGFloat y = y;
        v54.size.double width = width;
        v54.size.double height = height;
        CI::fprintf(a2, v20, v54);
      }
      double v29 = (void *)CI::Node::rois((CI::Node *)v4);
      if (*(int *)(*v29 + v10) >= 2) {
        fprintf(a2, "/%d", *(_DWORD *)(*v29 + v10));
      }
      unint64_t v9 = (unint64_t)((double)v9 + width * height);
      ++v8;
      v10 += 120;
    }
    while (v8 < (int)CI::Node::rois_count((CI::Node *)v4));
  }
  uint64_t v30 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (v30) {
    fprintf(a2, "\npeakContribution=%.1fMB", (double)v30 * 0.000000953674316);
  }
  fprintf(a2, "\npixels=%ld", v9);
  fwrite("\nextent=", 8uLL, 1uLL, a2);
  v56.origin.CGFloat x = (*(double (**)(unsigned char *))(*(void *)v4 + 160))(v4);
  CI::fprintf(a2, v31, v56);
  CGFloat v32 = (*(double (**)(unsigned char *))(*(void *)v4 + 160))(v4);
  CGFloat v34 = v33;
  CGFloat v36 = v35;
  CGFloat v38 = v37;
  v59.origin.CGFloat x = (*(double (**)(unsigned char *))(*(void *)v4 + 168))(v4);
  v59.origin.CGFloat y = v39;
  v59.size.double width = v40;
  v59.size.double height = v41;
  v57.origin.CGFloat x = v32;
  v57.origin.CGFloat y = v34;
  v57.size.double width = v36;
  v57.size.double height = v38;
  if (!CGRectEqualToRect(v57, v59))
  {
    v58.origin.CGFloat x = (*(double (**)(unsigned char *))(*(void *)v4 + 168))(v4);
    CI::fprintf(a2, v42, v58);
  }
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 288))(v4))
  {
    long long v43 = "\nluma-only opaque";
    size_t v44 = 17;
  }
  else if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 280))(v4))
  {
    long long v43 = "\nr-only opaque";
    size_t v44 = 14;
  }
  else if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 272))(v4))
  {
    long long v43 = "\nrg-only opaque";
    size_t v44 = 15;
  }
  else
  {
    if (!(*(unsigned int (**)(unsigned char *))(*(void *)v4 + 264))(v4)) {
      goto LABEL_46;
    }
    long long v43 = "\nopaque";
    size_t v44 = 7;
  }
  fwrite(v43, v44, 1uLL, a2);
LABEL_46:
  if ((*(unsigned int (**)(unsigned char *))(*(void *)v4 + 304))(v4) == -1) {
    fwrite(" shallow", 8uLL, 1uLL, a2);
  }
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)v4 + 304))(v4);
  if (result == 1) {
    uint64_t result = fwrite(" deep", 5uLL, 1uLL, a2);
  }
  if (*(void *)(a1 + 128)) {
    uint64_t result = fprintf(a2, "\ndigest=%016llX", *(void *)(a1 + 128));
  }
  if (*(unsigned char *)(a1 + 120))
  {
    unint64_t v46 = (double *)(a1 + 64);
    if (CI::ProgramNode::mainProgram((dispatch_queue_t *)v4))
    {
      if (v4[168]) {
        unint64_t v47 = " cacheMiss";
      }
      else {
        unint64_t v47 = "";
      }
      fprintf(a2, "\ncompileTime=%.3fms (waited=%0.3fms%s)", *(double *)(a1 + 72) * 1000.0, *(double *)(a1 + 80) * 1000.0, v47);
    }
    if (*v46 == 0.0) {
      uint64_t result = fwrite("\nrenderTime=cacheHit", 0x14uLL, 1uLL, a2);
    }
    else {
      uint64_t result = fprintf(a2, "\nrenderTime=%.3fms", *v46 * 1000.0);
    }
    if (*(void *)(a1 + 104)) {
      return fprintf(a2, "\ncycles=%llu", *(void *)(a1 + 104));
    }
  }
  return result;
}

uint64_t CI::ProgramNode::shape_for_graphviz(CI::ProgramNode *this)
{
  return 1;
}

uint64_t CI::ProgramNode::color_for_graphviz(CI::ProgramNode *this)
{
  return 8
       * ((*(unsigned int (**)(void))(**((void **)this + 6) + 16))(*((void *)this + 6)) != 41);
}

uint64_t CI::ProgramNode::extent(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 160))();
}

uint64_t CI::ProgramNode::extent_unclamped(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 168))();
}

uint64_t CI::ProgramNode::is_warp(CI::ProgramNode *this)
{
  return 0;
}

uint64_t CI::ProgramNode::is_position_invariant(CI::ProgramNode *this)
{
  return 0;
}

uint64_t CI::ProgramNode::may_be_extended_range(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 256))();
}

uint64_t CI::ProgramNode::alpha_one(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 264))();
}

uint64_t CI::ProgramNode::output_is_rg(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 272))();
}

uint64_t CI::ProgramNode::output_is_r(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 280))();
}

uint64_t CI::ProgramNode::output_is_luma(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 288))();
}

uint64_t CI::ProgramNode::output_depth(CI::ProgramNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 6) + 304))();
}

uint64_t CI::ProgramNode::output_format(CI::ProgramNode *this)
{
  return *((unsigned int *)this + 35);
}

uint64_t non-virtual thunk to'CI::ProgramNode::type(CI::ProgramNode *this)
{
  return 52;
}

void *std::vector<CGRect>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(void **)(a2 + 8);
  long long v6 = (char *)*a1;
  long long v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    uint64_t v9 = *(void *)(a2 + 8);
    do
    {
      long long v10 = *((_OWORD *)v8 - 1);
      long long v7 = (void *)(v9 - 32);
      *(_OWORD *)(v9 - 32) = *((_OWORD *)v8 - 2);
      *(_OWORD *)(v9 - 16) = v10;
      v8 -= 32;
      v9 -= 32;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    long long v7 = *(void **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  BOOL v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  int v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void ___ZN14__CFDictionary9setValuesEPS_PKS__block_invoke(uint64_t a1, const void *a2, const void *a3, const void *a4)
{
}

int *___ZNK2CI20SerialObjectPtrArray5printEP7__sFILE_block_invoke(uint64_t a1, uint64_t a2)
{
  CFStringRef v2 = *(int **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI20SerialObjectPtrArray5printEP7__sFILE_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_225;
  v4[4] = a2;
  return CI::SerialObjectPtrArray::for_each(v2, (uint64_t)v4);
}

uint64_t ___ZNK2CI20SerialObjectPtrArray5printEP7__sFILE_block_invoke_2(uint64_t a1, int a2, const void *a3)
{
  long long v6 = *(FILE **)(a1 + 32);
  unsigned int v7 = (*(uint64_t (**)(const void *))(*(void *)a3 + 16))(a3);
  uint64_t v8 = CI::name_for_type(v7);
  fprintf(v6, "[%i] = %p <%s> ", a2, a3, v8);
  (*(void (**)(const void *, void, void))(*(void *)a3 + 32))(a3, *(void *)(a1 + 32), 0);
  uint64_t v9 = *(FILE **)(a1 + 32);

  return fputc(10, v9);
}

const void *__CFArray::getObjectAtIndex(__CFArray *this, const __CFArray *a2)
{
  if (!this || CFArrayGetCount(this) <= (uint64_t)a2) {
    return 0;
  }

  return CFArrayGetValueAtIndex(this, (CFIndex)a2);
}

const __CFDictionary *__CFDictionary::getNumber(const __CFDictionary *this, const __CFDictionary *a2, const __CFString *a3)
{
  if (this)
  {
    this = (const __CFDictionary *)CFDictionaryGetValue(this, a2);
    if (this)
    {
      CFDictionaryRef v3 = this;
      CFTypeID v4 = CFGetTypeID(this);
      if (v4 == CFNumberGetTypeID()) {
        return v3;
      }
      else {
        return 0;
      }
    }
  }
  return this;
}

uint64_t CI::InstanceCounted<(CI::Type)52>::type()
{
  return 52;
}

void *CI::InstanceCounted<(CI::Type)52>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45B048;
  atomic_fetch_add(&dword_1EB466E78[50], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)52>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B048;
  atomic_fetch_add(&dword_1EB466E78[50], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void *std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      int64_t v13 = *v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = v13[1];
          if (v14 == v9)
          {
            if (v13[2] == *a2) {
              return v13;
            }
          }
          else
          {
            if (v11.u32[0] > 1uLL)
            {
              if (v14 >= v10) {
                v14 %= v10;
              }
            }
            else
            {
              v14 &= v10 - 1;
            }
            if (v14 != v4) {
              break;
            }
          }
          int64_t v13 = (void *)*v13;
        }
        while (v13);
      }
    }
  }
  int64_t v13 = operator new(0x20uLL);
  void *v13 = 0;
  v13[1] = v9;
  v13[2] = **a4;
  *((_DWORD *)v13 + 6) = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__rehash<true>(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  unint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    void *v13 = *v22;
LABEL_38:
    void *v22 = v13;
    goto LABEL_39;
  }
  void *v13 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v13;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*v13)
  {
    unint64_t v23 = *(void *)(*v13 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    unint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v13;
}

uint64_t CI::ProviderNode::FormatConversion(uint64_t result)
{
  if ((result - 1799) >= 2) {
    return result;
  }
  else {
    return 2056;
  }
}

void CI::ProviderNode::ProviderNode(CI::Node *a1)
{
}

{
  CI::ProviderNode::ProviderNode(a1);
}

CFStringRef CI::makeCacheID(CI *this, uint64_t a2, dispatch_queue_s *a3)
{
  if (this)
  {
    CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"ProvAssembled %llu", this);
  }
  else if (a3)
  {
    CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"ProvAssembled %p frame %llu", a2, a3);
  }
  else
  {
    CFStringRef v3 = CFStringCreateWithFormat(0, 0, @"ProvAssembled %p", a2);
  }
  CFStringRef v4 = v3;
  CFAutorelease(v3);
  return v4;
}

void CI::ProviderNode::~ProviderNode(CI::ProviderNode *this)
{
  *(void *)this = &unk_1EE4588A8;
  *((void *)this + 5) = &unk_1EE458A78;
  CFStringRef v2 = (CI::ProviderNode *)((char *)this + 56);
  *((void *)this + 7) = &unk_1EE458AA0;
  CI::ProviderNode::release_resources(this);
  CFStringRef v3 = (void *)*((void *)this + 19);
  if (v3)
  {
    *((void *)this + 20) = v3;
    operator delete(v3);
  }
  CI::Tileable::~Tileable(v2);
  *((void *)this + 5) = &unk_1EE45AEE0;
  atomic_fetch_add(&dword_1EB466E78[42], 0xFFFFFFFF);

  CI::Node::~Node(this);
}

{
  uint64_t vars8;

  CI::ProviderNode::~ProviderNode(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::ProviderNode::~ProviderNode(CI::ProviderNode *this)
{
}

{
  uint64_t vars8;

  CI::ProviderNode::~ProviderNode((CI::ProviderNode *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

CFStringRef non-virtual thunk to'CI::ProviderNode::cacheIdentity(CI::ProviderNode *this, dispatch_queue_s *a2)
{
  if (*((unsigned char *)this + 131) && *((void *)this + 4)) {
    return (CFStringRef)*((void *)this + 4);
  }
  else {
    return CI::makeCacheID(*((CI **)this + 5), *((void *)this + 8), a2);
  }
}

void CI::ProviderNode::release_resources(CI::ProviderNode *this)
{
  CFStringRef v2 = (const void *)*((void *)this + 14);
  if (v2) {
    _Block_release(v2);
  }
  *((void *)this + 14) = 0;
  CFStringRef v3 = (const void *)*((void *)this + 13);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 13) = 0;
  CFStringRef v4 = *((void *)this + 15);
  if (v4) {
    dispatch_release(v4);
  }
  *((void *)this + 15) = 0;
  uint64_t v5 = (const void *)*((void *)this + 11);
  if (v5) {
    CFRelease(v5);
  }
  *((void *)this + 11) = 0;
}

void CI::ProviderNode::set_provider(uint64_t a1, int a2, CI *a3, void *aBlock, NSObject *a5)
{
  *(_DWORD *)(a1 + 188) = a2;
  *(void *)(a1 + 96) = a3;
  unint64_t v9 = *(const void **)(a1 + 112);
  if (v9) {
    _Block_release(v9);
  }
  *(void *)(a1 + 112) = _Block_copy(aBlock);
  dispatch_retain(a5);
  unint64_t v10 = *(NSObject **)(a1 + 120);
  if (v10) {
    dispatch_release(v10);
  }
  *(void *)(a1 + 120) = a5;
  if (*(unsigned char *)(a1 + 187))
  {
    CacheIOSurfaceID ID = CI::makeCacheID(a3, (uint64_t)a5, 0);
    CI::Tileable::updateCacheIdentity((CI::Tileable *)(a1 + 56), CacheID);
  }
}

double CI::ProviderNode::find_matching_roi(CI::ProviderNode *this, const CGRect *a2)
{
  CFStringRef v4 = (CGRect **)CI::Node::rois(this);
  CGFloat x = a2->origin.x;
  CGFloat y = a2->origin.y;
  CGFloat width = a2->size.width;
  CGFloat height = a2->size.height;
  v16.origin.CGFloat x = (*(double (**)(CI::ProviderNode *))(*(void *)this + 168))(this);
  v16.origin.CGFloat y = v9;
  v16.size.CGFloat width = v10;
  v16.size.CGFloat height = v11;
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  CGRect v15 = CGRectIntersection(v14, v16);

  return CI::SerialRectArray::smallestContainingRect(v4, v15);
}

unint64_t CI::ProviderNode::roiAlignment(CI::ProviderNode *this)
{
  if (*((unsigned char *)this + 192)) {
    return 4;
  }
  CFStringRef v3 = (CI::ProviderNode *)((char *)this + 56);
  if (CI::Tileable::widestTile((CI::ProviderNode *)((char *)this + 56)) >= 0x10)
  {
    if (CI::Tileable::widestTile(v3) <= 0x200) {
      unint64_t v1 = CI::Tileable::widestTile(v3);
    }
    else {
      unint64_t v1 = 512;
    }
  }
  else
  {
    unint64_t v1 = 16;
  }
  if (!*((unsigned char *)this + 192) && CI::Tileable::tallestTile(v3) >= 0x10 && CI::Tileable::tallestTile(v3) <= 0x200) {
    CI::Tileable::tallestTile(v3);
  }
  return v1;
}

unint64_t CI::Tileable::widestTile(CI::Tileable *this)
{
  unint64_t v7 = 0;
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(&v7, *((void *)this + 1), *((void *)this + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3));
  unint64_t v1 = v7;
  unint64_t v2 = 0;
  if (v8 != v7)
  {
    unint64_t v3 = (v8 - v7) / 24;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    do
    {
      uint64_t v4 = *(void *)v1;
      v1 += 24;
      unint64_t v5 = *(void *)(v4 + 8);
      if (v5 > v2) {
        unint64_t v2 = v5;
      }
      --v3;
    }
    while (v3);
  }
  CGFloat v10 = &v7;
  std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v10);
  return v2;
}

unint64_t CI::Tileable::tallestTile(CI::Tileable *this)
{
  memset(v8, 0, sizeof(v8));
  std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v8, *((void *)this + 1), *((void *)this + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3));
  uint64_t v1 = *(void *)(v8[0] + 8);
  unint64_t v2 = 0;
  if (v1 != *(void *)v8[0])
  {
    unint64_t v3 = (v1 - *(void *)v8[0]) / 24;
    if (v3 <= 1) {
      unint64_t v3 = 1;
    }
    uint64_t v4 = (unint64_t *)(*(void *)v8[0] + 16);
    do
    {
      unint64_t v6 = *v4;
      v4 += 3;
      unint64_t v5 = v6;
      if (v6 > v2) {
        unint64_t v2 = v5;
      }
      --v3;
    }
    while (v3);
  }
  uint64_t v9 = (void **)v8;
  std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v9);
  return v2;
}

void CI::ProviderNode::add_roi(CI::ProviderNode *this, unint64_t a2, unint64_t a3, CGRect a4, const CI::parentROI *a5)
{
  CGFloat height = a4.size.height;
  CGFloat width = a4.size.width;
  CGFloat y = a4.origin.y;
  CGFloat x = a4.origin.x;
  if (CGRectIsEmpty(a4))
  {
    int64_t v13 = this;
    unint64_t v14 = a2;
    unint64_t v15 = a3;
    double v16 = x;
    double v17 = y;
    double v18 = width;
    double v19 = height;
    goto LABEL_84;
  }
  unint64_t v21 = *((void *)this + 16);
  unint64_t v20 = *((void *)this + 17);
  v50.origin.CGFloat x = x;
  v50.origin.CGFloat y = y;
  v50.size.CGFloat width = width;
  v50.size.CGFloat height = height;
  if (CGRectIsNull(v50))
  {
    unint64_t v22 = 0;
    unint64_t v23 = 0;
    int v24 = 0x7FFFFFFF;
    int v25 = 0x7FFFFFFF;
  }
  else
  {
    v51.origin.CGFloat x = x;
    v51.origin.CGFloat y = y;
    v51.size.CGFloat width = width;
    v51.size.CGFloat height = height;
    if (CGRectIsInfinite(v51))
    {
      int v24 = -2147483647;
      unint64_t v22 = 0xFFFFFFFFLL;
      unint64_t v23 = 0xFFFFFFFFLL;
      int v25 = -2147483647;
    }
    else
    {
      v52.origin.CGFloat x = x;
      v52.origin.CGFloat y = y;
      v52.size.CGFloat width = width;
      v52.size.CGFloat height = height;
      CGRect v53 = CGRectInset(v52, 0.000001, 0.000001);
      CGRect v54 = CGRectIntegral(v53);
      int v25 = (int)v54.origin.x;
      int v24 = (int)v54.origin.y;
      unint64_t v23 = (unint64_t)v54.size.width;
      unint64_t v22 = (unint64_t)v54.size.height;
    }
  }
  if (*((_DWORD *)this + 45) != 1) {
    goto LABEL_19;
  }
  if (v25 != -2147483647)
  {
    int v26 = 0x7FFFFFFF;
    if (v25 == 0x7FFFFFFF)
    {
      if (v24 == 0x7FFFFFFF && !v23 && !v22)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        int v29 = 0x7FFFFFFF;
        goto LABEL_56;
      }
    }
    else if (v25 < 0)
    {
      goto LABEL_20;
    }
    if (v25 + (int)v23 <= (int)v21 && (v24 & 0x80000000) == 0 && v24 + (int)v22 <= (int)v20)
    {
LABEL_19:
      uint64_t v27 = v22;
      uint64_t v28 = v23;
      int v26 = v24;
      int v29 = v25;
      goto LABEL_56;
    }
  }
LABEL_20:
  if (v25 == 0x7FFFFFFF && v24 == 0x7FFFFFFF && !v23 && !v22) {
    goto LABEL_24;
  }
  if (v25 == -2147483647 && v24 == -2147483647 && v23 == 0xFFFFFFFF && v22 == 0xFFFFFFFF)
  {
    int v26 = 0;
    int v29 = 0;
    uint64_t v27 = v20;
    uint64_t v28 = v21;
    if (!v21) {
      goto LABEL_24;
    }
  }
  else
  {
    int v29 = v25 & ~(v25 >> 31);
    int v34 = v25 + v23;
    if ((int)v21 < v25 + (int)v23) {
      int v34 = v21;
    }
    BOOL v35 = __OFSUB__(v34, v29);
    int v36 = v34 - v29;
    if (v36 < 0 != v35) {
      goto LABEL_24;
    }
    int v26 = v24 & ~(v24 >> 31);
    int v37 = v24 + v22;
    if ((int)v20 < v24 + (int)v22) {
      int v37 = v20;
    }
    BOOL v35 = __OFSUB__(v37, v26);
    int v38 = v37 - v26;
    if (v38 < 0 != v35) {
      goto LABEL_24;
    }
    uint64_t v28 = v36;
    uint64_t v27 = v38;
    if (!v36) {
      goto LABEL_24;
    }
  }
  if (v27) {
    goto LABEL_56;
  }
LABEL_24:
  int v30 = v25 + v23;
  if (v30 < 0)
  {
    int v29 = 0;
  }
  else
  {
    if (v25 <= (int)v21)
    {
      int v29 = v25 & ~(v25 >> 31);
      if (v30 >= (int)v21) {
        int v31 = v21;
      }
      else {
        int v31 = v30;
      }
      uint64_t v28 = v31 - v29;
      goto LABEL_39;
    }
    int v29 = v21 - 1;
  }
  uint64_t v28 = 1;
LABEL_39:
  int v32 = v24 + v22;
  if (v32 < 0)
  {
    int v26 = 0;
    goto LABEL_43;
  }
  if (v24 > (int)v20)
  {
    int v26 = v20 - 1;
LABEL_43:
    uint64_t v27 = 1;
    goto LABEL_56;
  }
  int v26 = v24 & ~(v24 >> 31);
  if (v32 >= (int)v20) {
    int v33 = v20;
  }
  else {
    int v33 = v32;
  }
  uint64_t v27 = v33 - v26;
LABEL_56:
  if (CI::format_is_ycc_biplanar(*((_DWORD *)this + 36))) {
    goto LABEL_81;
  }
  int v39 = 0x7FFFFFFF;
  if (v29 == 0x7FFFFFFF && v26 == 0x7FFFFFFF && !v28 && !v27)
  {
    unint64_t v40 = 0;
    unint64_t v41 = 0;
LABEL_72:
    int v42 = 0x7FFFFFFF;
    goto LABEL_73;
  }
  if (v29 == -2147483647 && v26 == -2147483647 && v28 == 0xFFFFFFFFLL && v27 == 0xFFFFFFFFLL)
  {
    int v39 = 0;
    int v42 = 0;
    unint64_t v40 = v21;
    unint64_t v41 = v20;
  }
  else
  {
    int v39 = v29 & ~(v29 >> 31);
    int v43 = v29 + v28;
    if ((int)v21 < v29 + (int)v28) {
      int v43 = v21;
    }
    BOOL v35 = __OFSUB__(v43, v39);
    LODWORD(v40) = v43 - v39;
    if (((v40 & 0x80000000) != 0) != v35)
    {
      unint64_t v40 = 0;
      unint64_t v41 = 0;
      int v39 = 0x7FFFFFFF;
      goto LABEL_72;
    }
    int v44 = v26 & ~(v26 >> 31);
    int v45 = v26 + v27;
    if ((int)v20 < v26 + (int)v27) {
      int v45 = v20;
    }
    unint64_t v40 = (int)v40;
    BOOL v35 = __OFSUB__(v45, v44);
    int v47 = v45 - v44;
    char v46 = (v47 < 0) ^ v35;
    unint64_t v48 = v47;
    if (v46)
    {
      int v39 = 0x7FFFFFFF;
      int v42 = 0x7FFFFFFF;
    }
    else
    {
      int v42 = v26 & ~(v26 >> 31);
    }
    if (v46)
    {
      unint64_t v40 = 0;
      unint64_t v41 = 0;
    }
    else
    {
      unint64_t v41 = v48;
    }
  }
LABEL_73:
  if (v21 > 0x1000 || v20 > 0x1000 || 3 * v21 * v20 > 4 * v40 * v41)
  {
    if (v39 != 0x7FFFFFFF || v42 != 0x7FFFFFFF || v40 || v41)
    {
      double v16 = (double)v39;
      double v17 = (double)v42;
      double v18 = (double)v40;
      double v19 = (double)v41;
    }
    else
    {
      double v16 = *MEMORY[0x1E4F1DB20];
      double v17 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
      double v18 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
      double v19 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
    }
    goto LABEL_83;
  }
LABEL_81:
  double v18 = (double)v21;
  double v19 = (double)v20;
  double v16 = 0.0;
  double v17 = 0.0;
LABEL_83:
  int64_t v13 = this;
  unint64_t v14 = a2;
  unint64_t v15 = a3;
LABEL_84:

  CI::Node::add_roi(v13, v14, v15, *(CGRect *)&v16, a5);
}

uint64_t CI::ProviderNode::surfaceFormat(CI::ProviderNode *this)
{
  return CI::PixelFormatType_from_format(*((_DWORD *)this + 12));
}

uint64_t non-virtual thunk to'CI::ProviderNode::surfaceFormat(CI::ProviderNode *this)
{
  return CI::PixelFormatType_from_format(*((_DWORD *)this - 2));
}

void CI::ProviderNode::tileRect(CI::ProviderNode *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  unint64_t v8 = (void *)*((void *)this + 8);
  uint64_t v9 = (void *)*((void *)this + 9);
  if (v8 == v9
    || 0xAAAAAAAAAAAAAAABLL * (v9 - v8) <= a2
    || (uint64_t v10 = v8[1], *v8 == v10)
    || 0xAAAAAAAAAAAAAAABLL * ((v10 - *v8) >> 3) <= a3)
  {
    int v31 = ci_logger_render();
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
LABEL_34:
      *(void *)(a4 + 16) = 0;
      goto LABEL_35;
    }
    int v33 = (uint64_t *)*((void *)this + 8);
    int v32 = (uint64_t *)*((void *)this + 9);
    if (v33 == v32)
    {
      unint64_t v34 = 0;
    }
    else
    {
      unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v32 - v33);
      uint64_t v36 = *v33;
      uint64_t v35 = v33[1];
      if (v36 != v35)
      {
        unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((v35 - v36) >> 3);
        goto LABEL_42;
      }
    }
    unint64_t v37 = 0;
LABEL_42:
    int v38 = 134218752;
    unint64_t v39 = a2;
    __int16 v40 = 2048;
    unint64_t v41 = a3;
    __int16 v42 = 2048;
    unint64_t v43 = v34;
    __int16 v44 = 2048;
    unint64_t v45 = v37;
    _os_log_error_impl(&dword_193671000, v31, OS_LOG_TYPE_ERROR, "Request for a tile outside of expected indexes. Requested tile %zu %zu but only have %zu tiles horizontally and %zu tile vertically", (uint8_t *)&v38, 0x2Au);
    goto LABEL_34;
  }
  uint64_t v11 = v8[3 * a2] + 24 * a3;
  int v13 = *(_DWORD *)v11;
  int v12 = *(_DWORD *)(v11 + 4);
  uint64_t v15 = *(void *)(v11 + 8);
  uint64_t v14 = *(void *)(v11 + 16);
  if (v13 == 0x7FFFFFFF && v12 == 0x7FFFFFFF && v15 == 0 && v14 == 0)
  {
LABEL_32:
    *(void *)(a4 + 16) = 0;
LABEL_35:
    *(_OWORD *)a4 = IRectNull;
    return;
  }
  uint64_t v20 = *((void *)this + 16);
  uint64_t v19 = *((void *)this + 17);
  if (v13 != -2147483647 || v12 != -2147483647 || v15 != 0xFFFFFFFFLL || v14 != 0xFFFFFFFFLL)
  {
    int v24 = v13 & ~(v13 >> 31);
    int v25 = v13 + v15;
    if (v25 >= (int)v20) {
      int v25 = *((void *)this + 16);
    }
    BOOL v26 = __OFSUB__(v25, v24);
    int v27 = v25 - v24;
    if (v27 < 0 == v26)
    {
      int v28 = v12 & ~(v12 >> 31);
      int v29 = v12 + v14;
      if (v29 >= (int)v19) {
        int v29 = *((void *)this + 17);
      }
      BOOL v26 = __OFSUB__(v29, v28);
      int v30 = v29 - v28;
      if (v30 < 0 == v26)
      {
        *(_DWORD *)a4 = v24;
        *(_DWORD *)(a4 + 4) = v28;
        *(void *)(a4 + 8) = v27;
        *(void *)(a4 + 16) = v30;
        return;
      }
    }
    goto LABEL_32;
  }
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = v20;
  *(void *)(a4 + 16) = v19;
}

void non-virtual thunk to'CI::ProviderNode::tileRect(CI::ProviderNode *this@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

uint64_t CI::ProviderNode::tileSurface(CI::ProviderNode *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  if (*((void *)this + 12)) {
    CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"ProvTile %llu", *((void *)this + 12));
  }
  else {
    CFStringRef v8 = @"ProvTile";
  }
  long long v18 = 0uLL;
  uint64_t v19 = 0;
  (*(void (**)(long long *__return_ptr, CI::ProviderNode *, uint64_t, uint64_t))(*(void *)this + 424))(&v18, this, a2, a3);
  v15[0] = MEMORY[0x1E4F143A8];
  v15[1] = 0x40000000;
  void v15[2] = ___ZNK2CI12ProviderNode11tileSurfaceEmmRy_block_invoke;
  v15[3] = &__block_descriptor_tmp_6_2;
  void v15[4] = this;
  v15[5] = a4;
  long long v16 = v18;
  uint64_t v17 = v19;
  long long v13 = v18;
  uint64_t v14 = v19;
  uint64_t v9 = (*(uint64_t (**)(CI::ProviderNode *))(*(void *)this + 432))(this);
  if (*((void *)this + 12)) {
    int v10 = 0;
  }
  else {
    int v10 = *((_DWORD *)this + 47);
  }
  uint64_t SurfaceFromCacheAndFill = GetSurfaceFromCacheAndFill(&v13, v9, 0, v10, (uint64_t)v8, *((void *)this + 15), (uint64_t)v15);
  CFRelease(v8);
  return SurfaceFromCacheAndFill;
}

uint64_t ___ZNK2CI12ProviderNode11tileSurfaceEmmRy_block_invoke(uint64_t a1, __IOSurface *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  **(void **)(a1 + 40) = *(void *)(a1 + 64) * *(void *)(a1 + 56);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI12ProviderNode11tileSurfaceEmmRy_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_26;
  v4[4] = v2;
  long long v5 = *(_OWORD *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 64);
  return SurfaceApplyPlaneBlock(a2, (uint64_t)v4);
}

uint64_t ___ZNK2CI12ProviderNode11tileSurfaceEmmRy_block_invoke_2(void *a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, size_t a6)
{
  uint64_t v9 = a1[4];
  if (*(unsigned char *)(v9 + 149) || (int v10 = a2, *(unsigned char *)(v9 + 150))) {
    int v10 = &a2[2 * a4];
  }
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v9 + 112) + 16))();
  if (*(unsigned char *)(v9 + 149) || *(unsigned char *)(v9 + 150))
  {
    vImagePixelCount v13 = a1[6];
    vImagePixelCount v12 = a1[7];
    rgbSrc.data = v10;
    rgbSrc.CGFloat height = v12;
    rgbSrc.CGFloat width = v13;
    rgbSrc.size_t rowBytes = a6;
    v16.data = a2;
    v16.CGFloat height = v12;
    v16.CGFloat width = v13;
    v16.size_t rowBytes = a6;
    uint64_t result = vImageConvert_RGB16UtoRGBA16U(&rgbSrc, 0, 0xFFFFu, &v16, 0, 0);
  }
  if (*(unsigned char *)(v9 + 148) || *(unsigned char *)(v9 + 149))
  {
    uint64_t v15 = a1[6];
    vImagePixelCount v14 = a1[7];
    rgbSrc.data = a2;
    rgbSrc.CGFloat height = v14;
    rgbSrc.CGFloat width = 4 * v15;
    rgbSrc.size_t rowBytes = a6;
    v16.data = a2;
    v16.CGFloat height = v14;
    v16.CGFloat width = 4 * v15;
    v16.size_t rowBytes = a6;
    return vImageConvert_16Uto16F(&rgbSrc, &v16, 0);
  }
  return result;
}

uint64_t non-virtual thunk to'CI::ProviderNode::tileSurface(CI::ProviderNode *this, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  return CI::ProviderNode::tileSurface((CI::ProviderNode *)((char *)this - 56), a2, a3, a4);
}

uint64_t ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke(uint64_t a1, __IOSurface *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_2;
  v4[3] = &__block_descriptor_tmp_7_4;
  v4[4] = v2;
  long long v5 = *(_OWORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  return SurfaceApplyPlaneBlock(a2, (uint64_t)v4);
}

void ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v8 + 149) || *(unsigned char *)(v8 + 150))
  {
    int v9 = *(_DWORD *)(v8 + 48);
    unint64_t v10 = CI::Tileable::widestTile((CI::Tileable *)(v8 + 56));
    size_t v11 = CI::format_bytes_per_row(v9, v10);
    int v12 = CI::format_bytes_per_pixel(*(_DWORD *)(v8 + 48));
    unint64_t v13 = CI::Tileable::tallestTile((CI::Tileable *)(v8 + 56));
    vImagePixelCount v14 = (char *)malloc_type_malloc(v13 * v11, 0xA18EE06AuLL);
    __int16 v42 = &v14[2 * CI::Tileable::widestTile((CI::Tileable *)(v8 + 56))];
    unint64_t v43 = v14;
  }
  else
  {
    int v37 = *(_DWORD *)(v8 + 144);
    unint64_t v38 = CI::Tileable::widestTile((CI::Tileable *)(v8 + 56));
    size_t v11 = CI::format_bytes_per_row(v37, v38);
    int v12 = CI::format_bytes_per_pixel(*(_DWORD *)(v8 + 144));
    unint64_t v39 = CI::Tileable::tallestTile((CI::Tileable *)(v8 + 56));
    __int16 v42 = (char *)malloc_type_malloc(v39 * v11, 0x92BD7F84uLL);
    unint64_t v43 = v42;
  }
  unint64_t v44 = 0;
  uint64_t v40 = v12;
  uint64_t v15 = *(void **)(v8 + 64);
  vImage_Buffer v16 = *(void **)(v8 + 72);
LABEL_5:
  if (v15 == v16)
  {
    unint64_t v18 = 0;
  }
  else
  {
    uint64_t v17 = v15[1];
    if (*v15 == v17) {
      unint64_t v18 = 0;
    }
    else {
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v17 - *v15) >> 3);
    }
  }
  if (v44 < v18)
  {
    for (unint64_t i = 0; ; ++i)
    {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v16 - v15);
      if (v15 == v16) {
        unint64_t v20 = 0;
      }
      if (i >= v20)
      {
        ++v44;
        goto LABEL_5;
      }
      uint64_t v47 = 0;
      vImagePixelCount v48 = 0;
      vImagePixelCount v49 = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, unint64_t))(*(void *)v8 + 424))(&v47, v8, i, v44);
      int v22 = *(_DWORD *)(a1 + 40);
      int v21 = *(_DWORD *)(a1 + 44);
      vImagePixelCount v23 = *(void *)(a1 + 48);
      vImagePixelCount v24 = *(void *)(a1 + 56);
      if ((v47 != 0x7FFFFFFF7FFFFFFFLL || v48 || v49) && (v22 != 0x7FFFFFFF || v21 != 0x7FFFFFFF || v23 || v24))
      {
        if (v47 == 0x8000000180000001 && v48 == 0xFFFFFFFF && v49 == 0xFFFFFFFF) {
          goto LABEL_30;
        }
        if (v22 == -2147483647 && v21 == -2147483647 && v23 == 0xFFFFFFFF && v24 == 0xFFFFFFFF)
        {
          vImagePixelCount v24 = v49;
          vImagePixelCount v23 = v48;
          int v21 = HIDWORD(v47);
          int v22 = v47;
LABEL_30:
          if (!v23) {
            goto LABEL_54;
          }
LABEL_31:
          if (v24)
          {
            (*(void (**)(void))(*(void *)(v8 + 112) + 16))();
            if (*(unsigned char *)(v8 + 149) || *(unsigned char *)(v8 + 150))
            {
              rgbSrc.data = v42;
              rgbSrc.CGFloat height = v49;
              rgbSrc.CGFloat width = v48;
              rgbSrc.size_t rowBytes = v11;
              rgbaDest.data = v43;
              rgbaDest.CGFloat height = v49;
              rgbaDest.CGFloat width = v48;
              rgbaDest.size_t rowBytes = v11;
              vImageConvert_RGB16UtoRGBA16U(&rgbSrc, 0, 0xFFFFu, &rgbaDest, 0, 0);
            }
            if (*(unsigned char *)(v8 + 148) || *(unsigned char *)(v8 + 149))
            {
              rgbSrc.data = v43;
              rgbSrc.CGFloat height = v49;
              rgbSrc.CGFloat width = 4 * v48;
              rgbSrc.size_t rowBytes = v11;
              rgbaDest.data = v43;
              rgbaDest.CGFloat height = v49;
              rgbaDest.CGFloat width = 4 * v48;
              rgbaDest.size_t rowBytes = v11;
              vImageConvert_16Uto16F(&rgbSrc, &rgbaDest, 0);
            }
            uint64_t v25 = (v22 - (uint64_t)(int)v47) * v40;
            uint64_t v26 = (v22 - (uint64_t)*(int *)(a1 + 40)) * v40;
            size_t v27 = v23 * v40;
            int v28 = (char *)(a2 + v26 + a6 * (v21 - (uint64_t)*(int *)(a1 + 44)));
            int v29 = &v43[v25 + v11 * (v21 - (uint64_t)SHIDWORD(v47))];
            do
            {
              memmove(v28, v29, v27);
              v28 += a6;
              v29 += v11;
              --v24;
            }
            while (v24);
          }
          goto LABEL_54;
        }
        if ((int)v47 <= v22) {
          int v30 = *(_DWORD *)(a1 + 40);
        }
        else {
          int v30 = v47;
        }
        int v31 = v47 + v48;
        if ((int)v47 + (int)v48 >= v22 + (int)v23) {
          int v31 = v22 + v23;
        }
        int v32 = v31 - v30;
        if (v31 >= v30)
        {
          if (SHIDWORD(v47) <= v21) {
            int v33 = *(_DWORD *)(a1 + 44);
          }
          else {
            int v33 = HIDWORD(v47);
          }
          int v34 = HIDWORD(v47) + v49;
          if (HIDWORD(v47) + (int)v49 >= v21 + (int)v24) {
            int v34 = v21 + v24;
          }
          BOOL v35 = __OFSUB__(v34, v33);
          int v36 = v34 - v33;
          if (v36 < 0 == v35)
          {
            vImagePixelCount v23 = v32;
            vImagePixelCount v24 = v36;
            int v21 = v33;
            int v22 = v30;
            if (v32) {
              goto LABEL_31;
            }
          }
        }
      }
LABEL_54:
      uint64_t v15 = *(void **)(v8 + 64);
      vImage_Buffer v16 = *(void **)(v8 + 72);
    }
  }
  free(v43);
}

uint64_t ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_3(uint64_t a1, __IOSurface *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_4;
  v4[3] = &__block_descriptor_tmp_9_2;
  v4[4] = v2;
  long long v5 = *(_OWORD *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 56);
  return SurfaceApplyPlaneBlock(a2, (uint64_t)v4);
}

uint64_t ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_4(uint64_t a1, char *a2, uint64_t a3, vImagePixelCount a4, vImagePixelCount a5, size_t a6)
{
  uint64_t v10 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v10 + 149) || (size_t v11 = a2, *(unsigned char *)(v10 + 150))) {
    size_t v11 = &a2[2 * a4];
  }
  unint64_t v13 = v11;
  if (a3 == 1 && !CI::format_is_ycc_422(*(_DWORD *)(v10 + 144))) {
    CI::format_is_ycc_444(*(_DWORD *)(v10 + 144));
  }
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v10 + 112) + 16))();
  if (*(unsigned char *)(v10 + 149) || *(unsigned char *)(v10 + 150))
  {
    rgbSrc.data = v13;
    rgbSrc.CGFloat height = a5;
    rgbSrc.CGFloat width = a4;
    rgbSrc.size_t rowBytes = a6;
    rgbaDest.data = a2;
    rgbaDest.CGFloat height = a5;
    rgbaDest.CGFloat width = a4;
    rgbaDest.size_t rowBytes = a6;
    uint64_t result = vImageConvert_RGB16UtoRGBA16U(&rgbSrc, 0, 0xFFFFu, &rgbaDest, 0, 0);
  }
  if (*(unsigned char *)(v10 + 148) || *(unsigned char *)(v10 + 149))
  {
    rgbSrc.data = a2;
    rgbSrc.CGFloat height = a5;
    rgbSrc.CGFloat width = 4 * a4;
    rgbSrc.size_t rowBytes = a6;
    rgbaDest.data = a2;
    rgbaDest.CGFloat height = a5;
    rgbaDest.CGFloat width = 4 * a4;
    rgbaDest.size_t rowBytes = a6;
    return vImageConvert_16Uto16F(&rgbSrc, &rgbaDest, 0);
  }
  return result;
}

void ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_5(void *a1, __IOSurface *a2)
{
  uint64_t v4 = a1[4];
  int v5 = *(_DWORD *)(v4 + 48);
  unint64_t v6 = CI::format_bytes_per_row(*(_DWORD *)(v4 + 144), *(void *)(v4 + 128));
  unint64_t v7 = CI::format_bytes_per_row(v5, *(void *)(v4 + 128));
  int v8 = v5;
  if (v6 > v7) {
    int v8 = *(_DWORD *)(v4 + 144);
  }
  size_t v9 = CI::format_bytes_per_row(v8, *(void *)(v4 + 128));
  int v10 = CI::format_bytes_per_pixel(v5);
  uint64_t v12 = a1[5];
  uint64_t v11 = a1[6];
  unint64_t v13 = (char *)malloc_type_malloc(*(void *)(v4 + 136) * v9, 0x9038C50EuLL);
  vImagePixelCount v14 = v13;
  if (*(unsigned char *)(v4 + 149) || *(unsigned char *)(v4 + 150)) {
    uint64_t v15 = &v13[2 * *(void *)(v4 + 128)];
  }
  else {
    uint64_t v15 = v13;
  }
  (*(void (**)(void))(*(void *)(v4 + 112) + 16))();
  if (*(unsigned char *)(v4 + 149) || *(unsigned char *)(v4 + 150))
  {
    vImagePixelCount v17 = *(void *)(v4 + 128);
    vImagePixelCount v16 = *(void *)(v4 + 136);
    rgbSrc.data = v15;
    rgbSrc.CGFloat height = v16;
    rgbSrc.CGFloat width = v17;
    rgbSrc.size_t rowBytes = v9;
    rgbaDest.data = v14;
    rgbaDest.CGFloat height = v16;
    rgbaDest.CGFloat width = v17;
    rgbaDest.size_t rowBytes = v9;
    vImageConvert_RGB16UtoRGBA16U(&rgbSrc, 0, 0xFFFFu, &rgbaDest, 0, 0);
  }
  if (*(unsigned char *)(v4 + 148) || *(unsigned char *)(v4 + 149))
  {
    uint64_t v19 = *(void *)(v4 + 128);
    vImagePixelCount v18 = *(void *)(v4 + 136);
    rgbSrc.data = v14;
    rgbSrc.CGFloat height = v18;
    rgbSrc.CGFloat width = 4 * v19;
    rgbSrc.size_t rowBytes = v9;
    rgbaDest.data = v14;
    rgbaDest.CGFloat height = v18;
    rgbaDest.CGFloat width = 4 * v19;
    rgbaDest.size_t rowBytes = v9;
    vImageConvert_16Uto16F(&rgbSrc, &rgbaDest, 0);
  }
  v20[0] = MEMORY[0x1E4F143A8];
  v20[1] = 0x40000000;
  _OWORD v20[2] = ___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_6;
  void v20[3] = &__block_descriptor_tmp_11_4;
  v20[4] = v14;
  void v20[5] = v12 * v9 + v11 * v10;
  v20[6] = v9;
  v20[7] = v10;
  SurfaceApplyPlaneBlock(a2, (uint64_t)v20);
  free(v14);
}

void *___ZNK2CI12ProviderNode13surfaceForROIEPKNS_7ContextERK6CGRectRNS_8Tileable5StatsE_block_invoke_6(void *result, char *__dst, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a5)
  {
    uint64_t v7 = a5;
    int v10 = result;
    uint64_t v11 = (char *)(result[4] + result[5]);
    do
    {
      uint64_t result = memmove(__dst, v11, v10[7] * a4);
      __dst += a6;
      v11 += v10[6];
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t CI::ProviderNode::print_for_graph_core(uint64_t a1, FILE *__stream, uint64_t a3, int a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (a4) {
    uint64_t v6 = 32;
  }
  else {
    uint64_t v6 = 10;
  }
  fwrite("provider", 8uLL, 1uLL, __stream);
  if (*(void *)(a1 + 96)) {
    fprintf(__stream, " content:%016llX");
  }
  else {
    fprintf(__stream, " %d");
  }
  CFStringRef v7 = *(const __CFString **)(a1 + 104);
  if (v7 && CFStringGetCString(v7, buffer, 64, 0x8000100u)) {
    fprintf(__stream, ":%s", buffer);
  }
  if (*(unsigned char *)(a1 + 52)) {
    int v8 = "s";
  }
  else {
    int v8 = "";
  }
  size_t v9 = CI::name_for_format(*(_DWORD *)(a1 + 144));
  fprintf(__stream, " %s%s", v8, v9);
  uint64_t result = fprintf(__stream, " %ldx%ld", *(void *)(a1 + 128), *(void *)(a1 + 136));
  if (*(void *)(a1 + 64) != *(void *)(a1 + 72))
  {
    if (CI::Tileable::hasVaryingTileSizes((CI::Tileable *)(a1 + 56))) {
      uint64_t v11 = "varying with max ";
    }
    else {
      uint64_t v11 = "";
    }
    unint64_t v12 = CI::Tileable::widestTile((CI::Tileable *)(a1 + 56));
    unint64_t v13 = CI::Tileable::tallestTile((CI::Tileable *)(a1 + 56));
    uint64_t result = fprintf(__stream, "%ctile=%s%zux%zu", v6, v11, v12, v13);
  }
  if (*(_DWORD *)(a1 + 176) || *(_DWORD *)(a1 + 180) || *(unsigned char *)(a1 + 184) || *(unsigned char *)(a1 + 186))
  {
    uint64_t result = fputc(v6, __stream);
    vImagePixelCount v14 = "alpha_one";
    switch(*(_DWORD *)(a1 + 176))
    {
      case 0:
        break;
      case 1:
        goto LABEL_27;
      case 2:
        vImagePixelCount v14 = "alpha_unpremul";
        goto LABEL_27;
      case 4:
        vImagePixelCount v14 = "alpha_premul-clear-edges";
        goto LABEL_27;
      case 6:
        vImagePixelCount v14 = "alpha_unpremul-clear-edges";
        goto LABEL_27;
      default:
        vImagePixelCount v14 = "alpha_unknown";
LABEL_27:
        uint64_t result = fprintf(__stream, " %s", v14);
        break;
    }
  }
  int v15 = *(_DWORD *)(a1 + 180);
  if (v15)
  {
    if (v15 == 1) {
      vImagePixelCount v16 = "edge_clamp";
    }
    else {
      vImagePixelCount v16 = "edge_unknown";
    }
    uint64_t result = fprintf(__stream, " %s", v16);
  }
  if (*(unsigned char *)(a1 + 184)) {
    uint64_t result = fwrite(" nearestsampling", 0x10uLL, 1uLL, __stream);
  }
  if (*(unsigned char *)(a1 + 186)) {
    return fwrite(" cache", 6uLL, 1uLL, __stream);
  }
  return result;
}

uint64_t CI::Tileable::hasVaryingTileSizes(CI::Tileable *this)
{
  memset(v3, 0, sizeof(v3));
  std::vector<std::vector<IRect>>::__init_with_size[abi:nn180100]<std::vector<IRect>*,std::vector<IRect>*>(v3, *((void *)this + 1), *((void *)this + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)this + 2) - *((void *)this + 1)) >> 3));
  uint64_t HasVaryingTileSizes = CI::Tileable::findHasVaryingTileSizes((uint64_t)v3);
  uint64_t v4 = (void **)v3;
  std::vector<std::vector<IRect>>::__destroy_vector::operator()[abi:nn180100](&v4);
  return HasVaryingTileSizes;
}

uint64_t CI::ProviderNode::add_args_to_hash(CI::ProviderNode *this, CI::XXHashHelper *a2, uint64_t a3)
{
  if (*((void *)this + 12))
  {
    uint64_t __src = *((void *)this + 12);
  }
  else
  {
    uint64_t __src = *((void *)this + 14);
    XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
    uint64_t __src = *((void *)this + 15);
    XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
    if (*((unsigned char *)this + 187)) {
      goto LABEL_5;
    }
    uint64_t __src = a3;
  }
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
LABEL_5:
  LODWORD(__src) = *((_DWORD *)this + 36);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((_DWORD *)this + 44);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((_DWORD *)this + 45);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 184);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((unsigned __int8 *)this + 52);
  return XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
}

uint64_t CI::ProviderNode::chroma_scale_fix(CI::ProviderNode *this)
{
  uint64_t result = (*(uint64_t (**)(CI::ProviderNode *))(*(void *)this + 208))(this);
  if (result == 2)
  {
    CI::format_is_ycc_444(*((_DWORD *)this + 36));
    __asm { FMOV            V1.2S, #1.0 }
    return CI::format_is_ycc_422(*((_DWORD *)this + 36));
  }
  else
  {
    __asm { FMOV            V0.2S, #1.0 }
  }
  return result;
}

uint64_t CI::ProviderNode::child_count(CI::ProviderNode *this)
{
  return 0;
}

uint64_t CI::ProviderNode::child(CI::ProviderNode *this)
{
  return 0;
}

uint64_t CI::ProviderNode::shape_for_graphviz(CI::ProviderNode *this)
{
  return 0;
}

uint64_t CI::ProviderNode::color_for_graphviz(CI::ProviderNode *this)
{
  return 12;
}

uint64_t CI::ProviderNode::imageIndex(CI::ProviderNode *this)
{
  return *((unsigned int *)this + 47);
}

_DWORD *CI::ProviderNode::extent(_DWORD *this)
{
  if (!this[45]) {
    return (_DWORD *)(*(uint64_t (**)(_DWORD *))(*(void *)this + 168))(this);
  }
  return this;
}

double CI::ProviderNode::extent_unclamped(CI::ProviderNode *this)
{
  return 0.0;
}

uint64_t CI::ProviderNode::child_type_is_image(CI::ProviderNode *this)
{
  return 0;
}

uint64_t CI::ProviderNode::plane_count(CI::ProviderNode *this)
{
  if (CI::format_is_ycc_biplanar(*((_DWORD *)this + 36))) {
    return 2;
  }
  else {
    return 1;
  }
}

BOOL CI::ProviderNode::may_be_extended_range(CI::ProviderNode *this)
{
  return !*((_DWORD *)this + 44) || *((unsigned char *)this + 185) != 0;
}

BOOL CI::ProviderNode::alpha_one(CI::ProviderNode *this)
{
  return *((_DWORD *)this + 44) == 1;
}

uint64_t CI::ProviderNode::output_is_rg(CI::ProviderNode *this)
{
  return CI::format_is_rg(*((_DWORD *)this + 36));
}

uint64_t CI::ProviderNode::output_is_r(CI::ProviderNode *this)
{
  return CI::format_is_r(*((_DWORD *)this + 36));
}

uint64_t CI::ProviderNode::output_is_luma(CI::ProviderNode *this)
{
  uint64_t result = CI::format_is_luminance(*((_DWORD *)this + 36));
  if (result)
  {
    unint64_t v3 = *(uint64_t (**)(CI::ProviderNode *))(*(void *)this + 264);
    return v3(this);
  }
  return result;
}

uint64_t CI::ProviderNode::output_depth(CI::ProviderNode *this)
{
  if (CI::format_is_deep(*((_DWORD *)this + 36))) {
    return 1;
  }
  else {
    return 0xFFFFFFFFLL;
  }
}

uint64_t CI::ProviderNode::texture_bindable(CI::ProviderNode *this)
{
  return (uint64_t)this + 48;
}

uint64_t CI::ProviderNode::output_is_packed(CI::ProviderNode *this)
{
  return CI::format_is_packed(*((_DWORD *)this + 36));
}

uint64_t non-virtual thunk to'CI::ProviderNode::type(CI::ProviderNode *this)
{
  return 44;
}

uint64_t CI::InstanceCounted<(CI::Type)44>::type()
{
  return 44;
}

void *CI::InstanceCounted<(CI::Type)44>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AEE0;
  atomic_fetch_add(&dword_1EB466E78[42], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)44>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AEE0;
  atomic_fetch_add(&dword_1EB466E78[42], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::SampleModeNode::append_to_tree(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != 35)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == 28
      && CI::Affine::isOrientationWithIntegralTranslation((CI::Affine *)(a1 + 56)))
    {
      uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 48))(a1, 0);
      CI::SampleModeNode::append_to_tree(v5, a2);
      operator new();
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) != 45
      || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 408))(a1) != a2)
    {
      operator new();
    }
  }

  return CI::Object::ref(a1);
}

__n64 CI::SampleModeNode::extent(CI::SampleModeNode *this)
{
  (*(void (**)(void))(**((void **)this + 5) + 160))(*((void *)this + 5));
  int v6 = *((_DWORD *)this + 14);
  if (v6 == -1)
  {
    CGRect v8 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    *(CGRect *)result.n64_u64 = CGRectIntegral(v8);
    int v6 = *((_DWORD *)this + 14);
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v6)
  {
    goto LABEL_3;
  }
  CGRect v9 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
  *(CGRect *)result.n64_u64 = CGRectIntegral(v9);
  int v6 = *((_DWORD *)this + 14);
LABEL_3:
  if (v6 == 1)
  {
    CGRect v7 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    return (__n64)CGRectIntegral(v7);
  }
  return result;
}

__n64 CI::SampleModeNode::extent_unclamped(CI::SampleModeNode *this)
{
  (*(void (**)(void))(**((void **)this + 5) + 168))(*((void *)this + 5));
  int v6 = *((_DWORD *)this + 14);
  if (v6 == -1)
  {
    CGRect v8 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    *(CGRect *)result.n64_u64 = CGRectIntegral(v8);
    int v6 = *((_DWORD *)this + 14);
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v6)
  {
    goto LABEL_3;
  }
  CGRect v9 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
  *(CGRect *)result.n64_u64 = CGRectIntegral(v9);
  int v6 = *((_DWORD *)this + 14);
LABEL_3:
  if (v6 == 1)
  {
    CGRect v7 = CGRectInset(*(CGRect *)result.n64_u64, 0.001, 0.001);
    return (__n64)CGRectIntegral(v7);
  }
  return result;
}

void CI::SampleModeNode::convert_to_kernel_node(CI::SampleModeNode *this, CI::Context *a2)
{
}

CGFloat CI::SampleModeNode::roi_of_child(CI::SampleModeNode *this, CGRect a2)
{
  int v2 = *((_DWORD *)this + 14);
  if (v2 == 1)
  {
    CGFloat v3 = -0.499;
    goto LABEL_6;
  }
  if (!v2 || v2 == -1)
  {
    CGFloat v3 = 0.001;
LABEL_6:
    CGRect v5 = CGRectInset(a2, v3, v3);
    *(void *)&a2.origin.CGFloat x = (unint64_t)CGRectIntegral(v5);
  }
  return a2.origin.x;
}

void CI::SampleModeNode::~SampleModeNode(CI::SampleModeNode *this)
{
  *((void *)this + 6) = &unk_1EE45AF08;
  atomic_fetch_add(&dword_1EB466E78[43], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  uint64_t vars8;

  *((void *)this + 6) = &unk_1EE45AF08;
  atomic_fetch_add(&dword_1EB466E78[43], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::SampleModeNode::type(CI::SampleModeNode *this)
{
  return 45;
}

uint64_t CI::SampleModeNode::shape_for_graphviz(CI::SampleModeNode *this)
{
  return 3;
}

uint64_t CI::SampleModeNode::color_for_graphviz(CI::SampleModeNode *this)
{
  return 2;
}

uint64_t CI::SampleModeNode::add_args_to_hash(CI::SampleModeNode *this, CI::XXHashHelper *a2)
{
  int __src = 45;
  return XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
}

const char *CI::SampleModeNode::short_name(CI::SampleModeNode *this)
{
  unsigned int v1 = *((_DWORD *)this + 14) + 1;
  if (v1 > 2) {
    return "unknown";
  }
  else {
    return off_1E5775948[v1];
  }
}

size_t CI::SampleModeNode::print_for_graph_short(CI::SampleModeNode *this, __sFILE *__stream)
{
  return fwrite("samplemode", 0xAuLL, 1uLL, __stream);
}

uint64_t CI::SampleModeNode::print_for_graph_core(uint64_t a1, FILE *a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 56) + 1;
  if (v2 > 2) {
    CGFloat v3 = "unknown";
  }
  else {
    CGFloat v3 = off_1E5775948[v2];
  }
  return fprintf(a2, "samplemode %s", v3);
}

BOOL CI::SampleModeNode::is_warp(CI::SampleModeNode *this)
{
  return *((_DWORD *)this + 14) == 0;
}

uint64_t CI::SampleModeNode::may_be_extended_range(CI::SampleModeNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 256))();
}

uint64_t CI::SampleModeNode::alpha_one(CI::SampleModeNode *this)
{
  return 0;
}

uint64_t CI::SampleModeNode::output_depth(CI::SampleModeNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 304))();
}

uint64_t CI::SampleModeNode::mode(CI::SampleModeNode *this)
{
  return *((unsigned int *)this + 14);
}

uint64_t non-virtual thunk to'CI::SampleModeNode::type(CI::SampleModeNode *this)
{
  return 45;
}

void non-virtual thunk to'CI::SampleModeNode::~SampleModeNode(CI::SampleModeNode *this)
{
  *(void *)this = &unk_1EE45AF08;
  atomic_fetch_add(&dword_1EB466E78[43], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::SampleModeNode *)((char *)this - 48));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45AF08;
  atomic_fetch_add(&dword_1EB466E78[43], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::SampleModeNode *)((char *)this - 48));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)45>::type()
{
  return 45;
}

void *CI::InstanceCounted<(CI::Type)45>::~InstanceCounted(void *result)
{
  *__n64 result = &unk_1EE45AF08;
  atomic_fetch_add(&dword_1EB466E78[43], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)45>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AF08;
  atomic_fetch_add(&dword_1EB466E78[43], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

float32x2_t cikernel::_ci_nearest(cikernel *this)
{
  return vadd_f32(vrndm_f32(*(float32x2_t *)CI::getDC(this)), (float32x2_t)0x3F0000003F000000);
}

void CI::f2(void *a1, const vec2 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  CGRect v9 = (double (*)(void *))a1[3];
  if (*((unsigned char *)a1 + 64)) {
    a1 = CI::setDC((CI *)(a3 + 16 * *(void *)(a1[6] + 8)), a2);
  }
  *(double *)(a3 + 16 * a7) = v9(a1);
}

void CI::SRGBNode::~SRGBNode(CI::SRGBNode *this)
{
  *(void *)this = &unk_1EE45EA08;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 6) = &unk_1EE45AE18;
  atomic_fetch_add(&dword_1EB466E78[36], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45EA08;
  *((_DWORD *)this + 14) = 0;
  *((void *)this + 6) = &unk_1EE45AE18;
  atomic_fetch_add(&dword_1EB466E78[36], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::SRGBNode::shape_for_graphviz(CI::SRGBNode *this)
{
  return 2;
}

uint64_t CI::SRGBNode::color_for_graphviz(CI::SRGBNode *this)
{
  return 4;
}

BOOL CI::SRGBNode::is_identity(CI::SRGBNode *this)
{
  return *((_DWORD *)this + 14) == 0;
}

uint64_t CI::SRGBNode::output_depth(CI::SRGBNode *this)
{
  int v2 = *((_DWORD *)this + 14);
  uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 5) + 304))(*((void *)this + 5));
  if (v2)
  {
    if ((int)result < 1)
    {
      return 0;
    }
    else
    {
      uint64_t v4 = *(uint64_t (**)(void))(**((void **)this + 5) + 304);
      return v4();
    }
  }
  return result;
}

uint64_t non-virtual thunk to'CI::SRGBNode::type(CI::SRGBNode *this)
{
  return 38;
}

void non-virtual thunk to'CI::SRGBNode::~SRGBNode(CI::SRGBNode *this)
{
  *((void *)this - 6) = &unk_1EE45EA08;
  *((_DWORD *)this + 2) = 0;
  *(void *)this = &unk_1EE45AE18;
  atomic_fetch_add(&dword_1EB466E78[36], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::SRGBNode *)((char *)this - 48));
}

{
  CI::SRGBNode::~SRGBNode((CI::SRGBNode *)((char *)this - 48));
}

uint64_t CI::InstanceCounted<(CI::Type)38>::type()
{
  return 38;
}

void *CI::InstanceCounted<(CI::Type)38>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AE18;
  atomic_fetch_add(&dword_1EB466E78[36], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)38>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AE18;
  atomic_fetch_add(&dword_1EB466E78[36], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

float32x4_t cikernel::_ci_lin_to_srgb(float32x4_t a1)
{
  unsigned __int32 v11 = a1.u32[3];
  float32x4_t v2 = vabsq_f32(a1);
  int8x16_t v13 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3B4D2E1Cu), v2);
  int8x16_t v12 = (int8x16_t)vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x414EB852u));
  v3.i64[0] = 0x8000000080000000;
  v3.i64[1] = 0x8000000080000000;
  __asm { FMOV            V2.4S, #1.0 }
  float32x4_t v10 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a1), (int8x16_t)vcgtzq_f32(a1)), vorrq_s8(vandq_s8((int8x16_t)a1, v3), _Q2), (int8x16_t)0);
  v2.i32[3] = 0;
  float32x4_t result = (float32x4_t)_simd_pow_f4((simd_float4)v2, (simd_float4)xmmword_19394C960);
  result.i64[0] = vbslq_s8(v13, v12, (int8x16_t)vmulq_f32(v10, vmlaq_f32((float32x4_t)vdupq_n_s32(0xBD6147AE), (float32x4_t)vdupq_n_s32(0x3F870A3Du), result))).u64[0];
  result.i32[3] = v11;
  return result;
}

float32x4_t cikernel::_ci_srgb_to_lin(float32x4_t a1)
{
  unsigned __int32 v12 = a1.u32[3];
  float32x4_t v1 = vabsq_f32(a1);
  int8x16_t v14 = (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), v1);
  int8x16_t v13 = (int8x16_t)vmulq_f32(a1, (float32x4_t)vdupq_n_s32(0x3D9E8391u));
  v2.i64[0] = 0x8000000080000000;
  v2.i64[1] = 0x8000000080000000;
  int8x16_t v3 = vandq_s8((int8x16_t)a1, v2);
  __asm { FMOV            V2.4S, #1.0 }
  float32x4_t v11 = (float32x4_t)vbslq_s8(vorrq_s8((int8x16_t)vcltzq_f32(a1), (int8x16_t)vcgtzq_f32(a1)), vorrq_s8(v3, _Q2), (int8x16_t)0);
  simd_float4 v9 = (simd_float4)vmlaq_f32((float32x4_t)vdupq_n_s32(0x3D558919u), (float32x4_t)vdupq_n_s32(0x3F72A76Eu), v1);
  v9.i32[3] = 0;
  float32x4_t result = (float32x4_t)_simd_pow_f4(v9, (simd_float4)xmmword_19394C950);
  result.i64[0] = vbslq_s8(v14, v13, (int8x16_t)vmulq_f32(v11, result)).u64[0];
  result.i32[3] = v12;
  return result;
}

void CI::SurfaceNode::~SurfaceNode(CI::SurfaceNode *this)
{
  *(void *)this = &unk_1EE457EC0;
  *((void *)this + 5) = &unk_1EE458078;
  int8x16_t v2 = (const void *)*((void *)this + 7);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 7) = 0;
  *((void *)this + 5) = &unk_1EE45AF30;
  atomic_fetch_add(&dword_1EB466E78[44], 0xFFFFFFFF);

  CI::Node::~Node(this);
}

{
  uint64_t vars8;

  CI::SurfaceNode::~SurfaceNode(this);

  JUMPOUT(0x1997023B0);
}

void sub_19390C6E8(_Unwind_Exception *a1)
{
  *((void *)v1 + 5) = &unk_1EE45AF30;
  atomic_fetch_add(&dword_1EB466E78[44], 0xFFFFFFFF);
  CI::Node::~Node(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'CI::SurfaceNode::~SurfaceNode(CI::SurfaceNode *this)
{
}

{
  uint64_t vars8;

  CI::SurfaceNode::~SurfaceNode((CI::SurfaceNode *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::SurfaceNode::print_for_graph_core(uint64_t a1, FILE *__stream)
{
  fwrite("IOSurface", 9uLL, 1uLL, __stream);
  if (*(void *)(a1 + 64))
  {
    fprintf(__stream, " content:%016llX");
  }
  else if (*(void *)(a1 + 56))
  {
    fprintf(__stream, " %p", *(const void **)(a1 + 56));
    IOSurfaceID ID = IOSurfaceGetID(*(IOSurfaceRef *)(a1 + 56));
    fprintf(__stream, "(%d)", ID);
    IOSurfaceGetSeed(*(IOSurfaceRef *)(a1 + 56));
    fprintf(__stream, " seed:%d");
  }
  if (*(unsigned char *)(a1 + 52)) {
    CGRect v5 = "s";
  }
  else {
    CGRect v5 = "";
  }
  int v6 = CI::format_from_PixelFormatType((CI *)*(unsigned int *)(a1 + 72));
  CGRect v7 = CI::name_for_format(v6);
  uint64_t result = fprintf(__stream, " %s%s", v5, v7);
  int v9 = *(_DWORD *)(a1 + 72);
  int v10 = v9 >> 24;
  if ((v9 & 0xFD000000) != 0x2D000000)
  {
    if (v10 == 38) {
      goto LABEL_16;
    }
    if (v10 != 124) {
      goto LABEL_23;
    }
LABEL_19:
    float32x4_t v11 = "lossy50";
    goto LABEL_22;
  }
  if (v10 > 46)
  {
    if (v10 == 47)
    {
      float32x4_t v11 = "lossy62";
      goto LABEL_22;
    }
    if (v10 != 124) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v10 == 38)
  {
LABEL_16:
    float32x4_t v11 = "compressed";
    goto LABEL_22;
  }
  if (v10 != 45)
  {
LABEL_20:
    float32x4_t v11 = "";
    goto LABEL_22;
  }
  float32x4_t v11 = "lossy75";
LABEL_22:
  uint64_t result = fprintf(__stream, "-%s", v11);
LABEL_23:
  unsigned __int32 v12 = "alpha_one";
  switch(*(_DWORD *)(a1 + 96))
  {
    case 0:
      goto LABEL_29;
    case 1:
      goto LABEL_28;
    case 2:
      unsigned __int32 v12 = "alpha_unpremul";
      goto LABEL_28;
    case 4:
      unsigned __int32 v12 = "alpha_premul-clear-edges";
      goto LABEL_28;
    case 6:
      unsigned __int32 v12 = "alpha_unpremul-clear-edges";
      goto LABEL_28;
    default:
      unsigned __int32 v12 = "alpha_unknown";
LABEL_28:
      uint64_t result = fprintf(__stream, " %s", v12);
LABEL_29:
      int v13 = *(_DWORD *)(a1 + 100);
      if (v13)
      {
        if (v13 == 1) {
          int8x16_t v14 = "edge_clamp";
        }
        else {
          int8x16_t v14 = "edge_unknown";
        }
        uint64_t result = fprintf(__stream, " %s", v14);
      }
      if (*(unsigned char *)(a1 + 104)) {
        uint64_t result = fwrite(" nearestsampling", 0x10uLL, 1uLL, __stream);
      }
      if (*(unsigned char *)(a1 + 106))
      {
        return fwrite(" cache", 6uLL, 1uLL, __stream);
      }
      return result;
  }
}

double CI::SurfaceNode::find_matching_roi(CI::SurfaceNode *this, const CGRect *a2)
{
  uint64_t v4 = (CGRect **)CI::Node::rois(this);
  CGFloat x = a2->origin.x;
  CGFloat y = a2->origin.y;
  CGFloat width = a2->size.width;
  CGFloat height = a2->size.height;
  v16.origin.CGFloat x = (*(double (**)(CI::SurfaceNode *))(*(void *)this + 168))(this);
  v16.origin.CGFloat y = v9;
  v16.size.CGFloat width = v10;
  v16.size.CGFloat height = v11;
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  CGRect v15 = CGRectIntersection(v14, v16);

  return CI::SerialRectArray::smallestContainingRect(v4, v15);
}

void ___ZNK2CI11SurfaceNode13surfaceForROIEPKNS_7ContextE6CGRectRNS_8Tileable5StatsE_block_invoke(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
  int8x16_t v2 = *(const void **)(a1 + 40);

  CFRelease(v2);
}

uint64_t ___ZNK2CI11SurfaceNode13surfaceForROIEPKNS_7ContextE6CGRectRNS_8Tileable5StatsE_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 32);
  int v6 = *(__IOSurface **)(a1 + 40);
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = ___ZNK2CI11SurfaceNode13surfaceForROIEPKNS_7ContextE6CGRectRNS_8Tileable5StatsE_block_invoke_3;
  uint64_t v10[3] = &__block_descriptor_96_e21_v48__0_v8Q16Q24Q32Q40l;
  void v10[4] = v7;
  v10[5] = a3;
  long long v8 = *(_OWORD *)(a1 + 64);
  long long v11 = *(_OWORD *)(a1 + 48);
  long long v12 = v8;
  uint64_t v13 = a2;
  uint64_t v14 = a6;
  return SurfaceApplyPlaneBlock(v6, (uint64_t)v10);
}

uint64_t ___ZNK2CI11SurfaceNode13surfaceForROIEPKNS_7ContextE6CGRectRNS_8Tileable5StatsE_block_invoke_3(uint64_t result, char *a2, size_t planeIndex, unint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(void *)(result + 40) != planeIndex) {
    return result;
  }
  uint64_t v11 = result;
  uint64_t v12 = *(void *)(result + 32);
  Elementsize_t WidthOfPlane = IOSurfaceGetElementWidthOfPlane(*(IOSurfaceRef *)(v12 + 56), planeIndex);
  Elementsize_t HeightOfPlane = IOSurfaceGetElementHeightOfPlane(*(IOSurfaceRef *)(v12 + 56), *(void *)(v11 + 40));
  uint64_t result = IOSurfaceGetBytesPerElementOfPlane(*(IOSurfaceRef *)(v12 + 56), *(void *)(v11 + 40));
  uint64_t v16 = result;
  if (!planeIndex)
  {
    double v19 = 1.0;
    double v21 = 1.0;
    if (!a5) {
      return result;
    }
    goto LABEL_12;
  }
  int v17 = CI::format_from_IOSurface(*(CI **)(v12 + 56), v15);
  if (CI::format_is_ycc_biplanar(v17)) {
    double v19 = 2.0;
  }
  else {
    double v19 = 1.0;
  }
  int v20 = CI::format_from_IOSurface(*(CI **)(v12 + 56), v18);
  uint64_t result = CI::format_is_ycc_420(v20);
  if (result) {
    double v21 = 2.0;
  }
  else {
    double v21 = 1.0;
  }
  if (a5)
  {
LABEL_12:
    size_t v22 = a4 / ElementWidthOfPlane * v16;
    vImagePixelCount v23 = (char *)(*(void *)(v11 + 80)
                 + (unint64_t)(*(double *)(v11 + 48) / v19) / ElementWidthOfPlane * v16
                 + *(void *)(v11 + 88) * ((unint64_t)(*(double *)(v11 + 56) / v21) / ElementHeightOfPlane));
    do
    {
      uint64_t result = (uint64_t)memcpy(a2, v23, v22);
      v23 += *(void *)(v11 + 88);
      a2 += a6;
      --a5;
    }
    while (a5);
  }
  return result;
}

void CI::SurfaceNode::graphviz_add_images(__IOSurface **this, void *a2)
{
  if (CI_PRINT_TREE_dump_inputs())
  {
    CGuint64_t Image = (char *)SurfaceCreateCGImage(this[7], 0, 1);
    CIGVNodeAddImage(a2, CGImage);
    CGImageRelease((CGImageRef)CGImage);
  }
}

uint64_t CI::InstanceCounted<(CI::Type)46>::type()
{
  return 46;
}

void *CI::InstanceCounted<(CI::Type)46>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AF30;
  atomic_fetch_add(&dword_1EB466E78[44], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)46>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AF30;
  atomic_fetch_add(&dword_1EB466E78[44], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::SwizzleNode::alpha_one(CI::SwizzleNode *this)
{
  uint64_t v1 = 1;
  switch(*((_DWORD *)this + 14))
  {
    case 9:
      uint64_t v1 = 0;
      goto LABEL_2;
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1F:
    case 0x20:
    case 0x23:
    case 0x25:
    case 0x26:
    case 0x28:
    case 0x29:
    case 0x2A:
    case 0x2B:
    case 0x2C:
    case 0x2D:
    case 0x2E:
    case 0x32:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
    case 0x3A:
    case 0x3B:
    case 0x3C:
    case 0x42:
    case 0x43:
    case 0x44:
    case 0x45:
    case 0x46:
    case 0x51:
    case 0x52:
    case 0x53:
    case 0x55:
    case 0x56:
LABEL_2:
      uint64_t result = v1;
      break;
    default:
      uint64_t result = (*(uint64_t (**)(void))(**((void **)this + 5) + 264))();
      break;
  }
  return result;
}

uint64_t CI::SwizzleNode::output_format(CI::SwizzleNode *this)
{
  uint64_t v2 = *(void *)(*(uint64_t (**)(CI::SwizzleNode *, void))(*(void *)this + 48))(this, 0);
  uint64_t result = (*(uint64_t (**)(void))(v2 + 312))();
  if (result)
  {
    int is_float = CI::format_is_float(result);
    if ((*(unsigned int (**)(CI::SwizzleNode *))(*(void *)this + 272))(this))
    {
      if (is_float) {
        return 2054;
      }
      else {
        return 262;
      }
    }
    else
    {
      int v5 = (*(uint64_t (**)(CI::SwizzleNode *))(*(void *)this + 280))(this);
      if (is_float) {
        unsigned int v6 = 2053;
      }
      else {
        unsigned int v6 = 261;
      }
      if (v5) {
        return v6;
      }
      else {
        return 0;
      }
    }
  }
  return result;
}

void CI::SwizzleNode::~SwizzleNode(CI::SwizzleNode *this)
{
  *((void *)this + 6) = &unk_1EE45AF58;
  atomic_fetch_add(&dword_1EB466E78[45], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);
}

{
  uint64_t vars8;

  *((void *)this + 6) = &unk_1EE45AF58;
  atomic_fetch_add(&dword_1EB466E78[45], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::SwizzleNode::shape_for_graphviz(CI::SwizzleNode *this)
{
  if ((*(unsigned int (**)(CI::SwizzleNode *))(*(void *)this + 424))(this)) {
    return 2;
  }
  else {
    return 3;
  }
}

uint64_t CI::SwizzleNode::color_for_graphviz(CI::SwizzleNode *this)
{
  if ((*(unsigned int (**)(CI::SwizzleNode *))(*(void *)this + 424))(this)) {
    return 4;
  }
  else {
    return 2;
  }
}

uint64_t CI::SwizzleNode::output_depth(CI::SwizzleNode *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 5) + 304))();
}

uint64_t CI::SwizzleNode::used_for_output_format(CI::SwizzleNode *this)
{
  return *((unsigned __int8 *)this + 60);
}

BOOL CI::SwizzleNode::isSimple(CI::SwizzleNode *this)
{
  return (*((_DWORD *)this + 14) - 1) < 0x24;
}

uint64_t non-virtual thunk to'CI::SwizzleNode::type(CI::SwizzleNode *this)
{
  return 47;
}

void non-virtual thunk to'CI::SwizzleNode::~SwizzleNode(CI::SwizzleNode *this)
{
  *(void *)this = &unk_1EE45AF58;
  atomic_fetch_add(&dword_1EB466E78[45], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::SwizzleNode *)((char *)this - 48));
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45AF58;
  atomic_fetch_add(&dword_1EB466E78[45], 0xFFFFFFFF);
  CI::NodeWithChild::~NodeWithChild((CI::SwizzleNode *)((char *)this - 48));

  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)47>::type()
{
  return 47;
}

void *CI::InstanceCounted<(CI::Type)47>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45AF58;
  atomic_fetch_add(&dword_1EB466E78[45], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)47>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AF58;
  atomic_fetch_add(&dword_1EB466E78[45], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void CI::TextureNode::TextureNode(CI::Node *a1)
{
}

void CI::TextureNode::~TextureNode(CI::TextureNode *this)
{
  *(void *)this = &unk_1EE458408;
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 5) = &unk_1EE45AF80;
  atomic_fetch_add(&dword_1EB466E78[46], 0xFFFFFFFF);
  CI::Node::~Node(this);
}

uint64_t CI::TextureNode::print_for_graph_core(uint64_t a1, FILE *a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 424))(a1)) {
    fprintf(a2, "GLTexture %d", *(_DWORD *)(a1 + 48));
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1))
  {
    fprintf(a2, "MTLTexture %p", *(const void **)(a1 + 48));
    pixelFormatForMetalTexture(*(void **)(a1 + 48));
    uint64_t v4 = stringForMetalTextureFormat();
    fprintf(a2, " %s", v4);
  }
  if (*(void *)(a1 + 64)) {
    fprintf(a2, " content:%016llX", *(void *)(a1 + 64));
  }
  uint64_t result = fprintf(a2, " %dx%d", *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76));
  unsigned int v6 = "alpha_one";
  switch(*(_DWORD *)(a1 + 80))
  {
    case 0:
      goto LABEL_13;
    case 1:
      goto LABEL_12;
    case 2:
      unsigned int v6 = "alpha_unpremul";
      goto LABEL_12;
    case 4:
      unsigned int v6 = "alpha_premul-clear-edges";
      goto LABEL_12;
    case 6:
      unsigned int v6 = "alpha_unpremul-clear-edges";
      goto LABEL_12;
    default:
      unsigned int v6 = "alpha_unknown";
LABEL_12:
      uint64_t result = fprintf(a2, " %s", v6);
LABEL_13:
      int v7 = *(_DWORD *)(a1 + 84);
      if (v7)
      {
        if (v7 == 1) {
          long long v8 = "edge_clamp";
        }
        else {
          long long v8 = "edge_unknown";
        }
        return fprintf(a2, " %s", v8);
      }
      return result;
  }
}

uint64_t CI::TextureNode::add_args_to_hash(CI::TextureNode *this, CI::XXHashHelper *a2, uint64_t a3)
{
  if (*((void *)this + 8))
  {
    uint64_t __src = *((void *)this + 8);
  }
  else
  {
    XXH64_update((uint64_t)a2, (char *)this + 48, 0x10uLL);
    uint64_t __src = a3;
  }
  XXH64_update((uint64_t)a2, (char *)&__src, 8uLL);
  LODWORD(__src) = *((_DWORD *)this + 20);
  XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
  LODWORD(__src) = *((_DWORD *)this + 21);
  return XXH64_update((uint64_t)a2, (char *)&__src, 4uLL);
}

double CI::TextureNode::find_matching_roi(CI::TextureNode *this, const CGRect *a2)
{
  uint64_t v4 = (CGRect **)CI::Node::rois(this);
  CGFloat x = a2->origin.x;
  CGFloat y = a2->origin.y;
  CGFloat width = a2->size.width;
  CGFloat height = a2->size.height;
  v16.origin.CGFloat x = (*(double (**)(CI::TextureNode *))(*(void *)this + 168))(this);
  v16.origin.CGFloat y = v9;
  v16.size.CGFloat width = v10;
  v16.size.CGFloat height = v11;
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  CGRect v15 = CGRectIntersection(v14, v16);

  return CI::SerialRectArray::smallestContainingRect(v4, v15);
}

void CI::TextureNode::add_roi(CI::TextureNode *this, unint64_t a2, unint64_t a3, CGRect a4, const CI::parentROI *a5)
{
  CGFloat height = a4.size.height;
  CGFloat width = a4.size.width;
  CGFloat y = a4.origin.y;
  CGFloat x = a4.origin.x;
  if (!CGRectIsEmpty(a4))
  {
    CGFloat x = (*(double (**)(CI::TextureNode *))(*(void *)this + 168))(this);
    CGFloat y = v13;
    CGFloat width = v14;
    CGFloat height = v15;
  }
  CGFloat v16 = x;
  CGFloat v17 = y;
  CGFloat v18 = width;
  CGFloat v19 = height;

  CI::Node::add_roi(this, a2, a3, *(CGRect *)&v16, a5);
}

uint64_t CI::MetalTextureNode::format(CI::MetalTextureNode *this)
{
  uint64_t v1 = (void *)(*(uint64_t (**)(CI::MetalTextureNode *))(*(void *)this + 432))(this);
  int Format = CIMetalTextureGetFormat(v1);

  return CIFormatFromCIMetalTextureFormat(Format, 0);
}

void CI::MetalTextureNode::graphviz_add_images(CI::MetalTextureNode *this, void *a2)
{
  if (CI_PRINT_TREE_dump_inputs()
    && (*(uint64_t (**)(CI::MetalTextureNode *))(*(void *)this + 432))(this))
  {
    uint64_t v4 = (*(uint64_t (**)(CI::MetalTextureNode *))(*(void *)this + 432))(this);
    IOSurface = (__IOSurface *)CIMetalTextureGetIOSurface(v4);
    if (IOSurface)
    {
      CGuint64_t Image = (char *)SurfaceCreateCGImage(IOSurface, 0, 1);
      CIGVNodeAddImage(a2, CGImage);
      CGImageRelease((CGImageRef)CGImage);
    }
    else
    {
      int v7 = (*(uint64_t (**)(CI::MetalTextureNode *))(*(void *)this + 408))(this);
      size_t v8 = (int)CI::format_bits_per_pixel(v7);
      size_t v9 = (int)CI::format_bits_per_component(v7);
      int v10 = (*(unsigned int (**)(CI::MetalTextureNode *))(*(void *)this + 416))(this) != 2
         && (*(uint64_t (**)(CI::MetalTextureNode *))(*(void *)this + 416))(this) != 6;
      CGBitmapInfo v11 = CI::format_CGBitmapInfo(v7, v10);
      uint64_t v12 = (void *)(*(uint64_t (**)(CI::MetalTextureNode *))(*(void *)this + 432))(this);
      uint64_t v13 = [v12 width];
      size_t v14 = [v12 height];
      size_t v15 = CI::format_bytes_per_row(v7, v13);
      CGFloat v16 = (void *)[MEMORY[0x1E4F1CA58] dataWithLength:v15 * v14];
      memset(v20, 0, 24);
      void v20[3] = v13;
      v20[4] = v14;
      void v20[5] = 1;
      objc_msgSend(v12, "getBytes:bytesPerRow:fromRegion:mipmapLevel:", objc_msgSend(v16, "mutableBytes"), v15, v20, 0);
      CGFloat v17 = CGDataProviderCreateWithCFData((CFDataRef)v16);
      CGFloat v18 = CGColorSpaceCreateWithName((CFStringRef)*MEMORY[0x1E4F1DC98]);
      CGFloat v19 = (char *)CGImageCreate(v13, v14, v9, v8, v15, v18, v11, v17, 0, 0, kCGRenderingIntentDefault);
      if (v19) {
        CIGVNodeAddImage(a2, v19);
      }
      CGDataProviderRelease(v17);
      CGImageRelease((CGImageRef)v19);
      CGColorSpaceRelease(v18);
    }
  }
}

void CI::MetalTextureNode::~MetalTextureNode(CI::MetalTextureNode *this)
{
  CI::MetalTextureNode::~MetalTextureNode(this);

  JUMPOUT(0x1997023B0);
}

{
  const void *v2;
  void *v3;
  uint64_t vars8;

  *(void *)this = &unk_1EE45BEB8;
  *((void *)this + 5) = &unk_1EE45C088;
  int8x16_t v3 = (void *)((char *)this + 48);
  uint64_t v2 = (const void *)*((void *)this + 6);
  if (v2) {
    CFRelease(v2);
  }
  *(void *)this = &unk_1EE458408;
  *int8x16_t v3 = 0;
  v3[1] = 0;
  *((void *)this + 5) = &unk_1EE45AF80;
  atomic_fetch_add(&dword_1EB466E78[46], 0xFFFFFFFF);

  CI::Node::~Node(this);
}

uint64_t CI::MetalTextureNode::texture_id(CI::MetalTextureNode *this)
{
  return 0;
}

uint64_t CI::TextureNode::texture_ref(CI::TextureNode *this)
{
  return *((void *)this + 6);
}

CFTypeRef CI::MetalTextureNode::set_texture(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  unsigned int v6 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
  if (v6) {
    CFRelease(v6);
  }
  *(_OWORD *)(a1 + 48) = *a2;
  *(void *)(a1 + 64) = a3;
  CFTypeRef result = (CFTypeRef)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 432))(a1);
  if (result)
  {
    return CFRetain(result);
  }
  return result;
}

void non-virtual thunk to'CI::MetalTextureNode::~MetalTextureNode(CI::MetalTextureNode *this)
{
}

{
  uint64_t vars8;

  CI::MetalTextureNode::~MetalTextureNode((CI::MetalTextureNode *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

void sub_19390DE10(_Unwind_Exception *a1)
{
  int8x16_t v3 = v2;
  *(void *)uint64_t v1 = &unk_1EE458408;
  *int8x16_t v3 = 0;
  v3[1] = 0;
  *((void *)v1 + 5) = &unk_1EE45AF80;
  atomic_fetch_add(&dword_1EB466E78[46], 0xFFFFFFFF);
  CI::Node::~Node(v1);
  _Unwind_Resume(a1);
}

uint64_t CI::InstanceCounted<(CI::Type)48>::type()
{
  return 48;
}

void *CI::InstanceCounted<(CI::Type)48>::~InstanceCounted(void *result)
{
  *CFTypeRef result = &unk_1EE45AF80;
  atomic_fetch_add(&dword_1EB466E78[46], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)48>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45AF80;
  atomic_fetch_add(&dword_1EB466E78[46], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

double CI::Node::find_matching_roi(CGRect ***this, const CGRect *a2)
{
  return CI::SerialRectArray::smallestContainingRect(this[2], *a2);
}

void CI::Node::roi(CGRect ***this)
{
}

uint64_t ___ZN2CI4Node16remove_parentROIERKNS_9parentROIERKNS_6roiKeyEPNS_14TextureManagerEPv_block_invoke_2(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 40);
  long long v12 = v6;
  long long v13 = *(_OWORD *)(a1 + 72);
  DWORD1(v12) = *(_DWORD *)(a2 + 20);
  int v7 = (*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 48))(v5, *(unsigned int *)(a1 + 104));
  uint64_t v9 = (*(uint64_t (**)(uint64_t, void))(*(void *)v5 + 48))(v5, *(unsigned int *)(a1 + 104));
  int v10 = a3;
  return CI::Node::remove_parentROI(v7, (int)&v11, (int)&v9, *(void *)(a1 + 88), *(dispatch_object_t *)(a1 + 96));
}

uint64_t CI::Node::print_for_graph(uint64_t a1, FILE *a2, uint64_t a3)
{
  if (CI_GRAPHVIZ_INTERNAL()
    || (CI_PRINT_TREE_dump_intermediates() & 1) != 0
    || CI_PRINT_TREE_dump_outputs())
  {
    fprintf(a2, "{%d} ", *(_DWORD *)(a1 + 36));
  }
  memset(v30, 0, sizeof(v30));
  int v31 = 1065353216;
  (*(void (**)(uint64_t, FILE *, _OWORD *, uint64_t))(*(void *)a1 + 120))(a1, a2, v30, 1);
  std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v30);
  if ((int)(-286331153 * ((*(void *)(*(void *)(a1 + 16) + 8) - **(void **)(a1 + 16)) >> 3)) >= 1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    do
    {
      if (v6) {
        fprintf(a2, ",");
      }
      else {
        fprintf(a2, " rois=");
      }
      CI::fprintf(a2, v8, *(CGRect *)(**(void **)(a1 + 16) + v6));
      uint64_t v9 = *(uint64_t **)(a1 + 16);
      uint64_t v10 = *v9;
      if (*(int *)(*v9 + v6 + 80) >= 2)
      {
        fprintf(a2, "/%d", *(_DWORD *)(*v9 + v6 + 80));
        uint64_t v9 = *(uint64_t **)(a1 + 16);
        uint64_t v10 = *v9;
      }
      ++v7;
      v6 += 120;
    }
    while (v7 < (int)(-286331153 * ((unint64_t)(v9[1] - v10) >> 3)));
  }
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  if (result != 39)
  {
    fwrite(" extent=", 8uLL, 1uLL, a2);
    v32.origin.CGFloat x = (*(double (**)(uint64_t))(*(void *)a1 + 160))(a1);
    CI::fprintf(a2, v12, v32);
    CGFloat v13 = (*(double (**)(uint64_t))(*(void *)a1 + 160))(a1);
    CGFloat v15 = v14;
    CGFloat v17 = v16;
    CGFloat v19 = v18;
    v35.origin.CGFloat x = (*(double (**)(uint64_t))(*(void *)a1 + 168))(a1);
    v35.origin.CGFloat y = v20;
    v35.size.CGFloat width = v21;
    v35.size.CGFloat height = v22;
    v33.origin.CGFloat x = v13;
    v33.origin.CGFloat y = v15;
    v33.size.CGFloat width = v17;
    v33.size.CGFloat height = v19;
    if (!CGRectEqualToRect(v33, v35))
    {
      v34.origin.CGFloat x = (*(double (**)(uint64_t))(*(void *)a1 + 168))(a1);
      CI::fprintf(a2, v23, v34);
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 288))(a1))
    {
      vImagePixelCount v24 = " luma opaque";
      size_t v25 = 12;
    }
    else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 280))(a1))
    {
      vImagePixelCount v24 = " r-only opaque";
      size_t v25 = 14;
    }
    else if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 272))(a1))
    {
      vImagePixelCount v24 = " rg-only opaque";
      size_t v25 = 15;
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1);
      if (!result) {
        goto LABEL_25;
      }
      vImagePixelCount v24 = " opaque";
      size_t v25 = 7;
    }
    uint64_t result = fwrite(v24, v25, 1uLL, a2);
  }
LABEL_25:
  if (!*(unsigned char *)(a3 + 56)) {
    return result;
  }
  double v26 = *(double *)(a3 + 24);
  if (v26 != 0.0) {
    uint64_t result = fprintf(a2, " fill=%.1fms", v26 * 1000.0);
  }
  unint64_t v27 = *(void *)(a3 + 32);
  if (v27) {
    uint64_t result = fprintf(a2, " area=%.2fMP", (double)v27 * 0.000000953674316);
  }
  if (*(void *)(a3 + 40)) {
    uint64_t result = fprintf(a2, " cycles=%llu", *(void *)(a3 + 40));
  }
  unint64_t v28 = *(void *)(a3 + 48);
  if (v28)
  {
    double v29 = (double)v28 / 1000000.0;
  }
  else
  {
    if (*(double *)a3 == 0.0) {
      return result;
    }
    double v29 = *(double *)a3 * 1000.0;
  }
  return fprintf(a2, " time=%.1fms", v29);
}

void CI::Node::graphvis_set_title(uint64_t a1, void *a2, void *a3)
{
  if (CI_GRAPHVIZ_INTERNAL())
  {
    uint64_t v6 = (const char *)CFStringCreateWithFormat(0, 0, @"%u", *(unsigned int *)(a1 + 36));
    CIGVNodeSetTitle(a2, v6);
    CFRelease(v6);
  }
  else
  {
    uint64_t v9 = a1;
    uint64_t v7 = std::__hash_table<void const*,std::hash<void const*>,std::equal_to<void const*>,std::allocator<void const*>>::find<void const*>(a3, &v9);
    if (v7)
    {
      size_t v8 = (const char *)CFStringCreateWithFormat(0, 0, @"%u", *((unsigned int *)v7 + 6));
      CIGVNodeSetTitle(a2, v8);
      CFRelease(v8);
    }
  }
}

void *CI::Node::node_for_graphviz_stats(void **a1, uint64_t a2, long long *a3)
{
  double v6 = ((double (*)(void **))(*a1)[21])(a1);
  uint64_t v10 = (void *)CIGVNodeCreateForNode((uint64_t)a1, v6, v7, v8, v9);
  long long v11 = (const char *)((uint64_t (*)(void **))(*a1)[7])(a1);
  CIGVNodeSetShape(v10, v11);
  long long v12 = (const char *)((uint64_t (*)(void **))(*a1)[8])(a1);
  CIGVNodeSetColor(v10, v12);
  int v13 = ((uint64_t (*)(void **))(*a1)[12])(a1);
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x2000000000;
  unsigned __int16 v31[3] = 0;
  v30[0] = 0;
  v30[1] = v30;
  _OWORD v30[2] = 0x2000000000;
  void v30[3] = 0;
  if (v13)
  {
    int v14 = v13;
    CGFloat v15 = (const void *)CopyPeakNonVolatileList();
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 0x40000000;
    v28[2] = ___ZNK2CI4Node23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS0_9NodeStatsE_block_invoke;
    v28[3] = &unk_1E5775CC0;
    int v29 = v14;
    _OWORD v28[4] = v30;
    void v28[5] = v31;
    void v28[6] = v10;
    __CFArray::for_each((CFIndex)v15, (uint64_t)v28);
    if (v15) {
      CFRelease(v15);
    }
  }
  ((void (*)(void **, void *, uint64_t))(*a1)[16])(a1, v10, a2);
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 0x40000000;
  v23[2] = ___ZNK2CI4Node23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS0_9NodeStatsE_block_invoke_2;
  unsigned __int16 v23[3] = &unk_1E57704F0;
  v23[6] = a1;
  v23[7] = a2;
  long long v16 = a3[1];
  long long v24 = *a3;
  long long v25 = v16;
  long long v17 = a3[3];
  long long v26 = a3[2];
  long long v27 = v17;
  _OWORD v23[4] = v31;
  void v23[5] = v30;
  double v18 = (const char *)stream_to_string((uint64_t)v23);
  CIGVNodeSetLabel(v10, v18);
  CFRelease(v18);
  ((void (*)(void **, void *))(*a1)[17])(a1, v10);
  if (CI_PRINT_TREE_dump_rois())
  {
    uint64_t v19 = *a1[2];
    if ((int)(-286331153 * ((unint64_t)(a1[2][1] - v19) >> 3)) >= 1)
    {
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      do
      {
        CIGVNodeAddRoi(v10, *(double *)(v19 + v20));
        ++v21;
        uint64_t v19 = *a1[2];
        v20 += 120;
      }
      while (v21 < (int)(-286331153 * ((unint64_t)(a1[2][1] - v19) >> 3)));
    }
  }
  _Block_object_dispose(v30, 8);
  _Block_object_dispose(v31, 8);
  return v10;
}

CFStringRef ___ZNK2CI4Node23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS0_9NodeStatsE_block_invoke(uint64_t a1, __CFDictionary *this)
{
  CFStringRef result = __CFDictionary::getInt32(this, (const __CFDictionary *)@"imgIndex", 0);
  if (*(_DWORD *)(a1 + 56) == result)
  {
    ++*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    signed int Int32 = __CFDictionary::getInt32(this, (const __CFDictionary *)@"size", 0);
    double v6 = *(void **)(a1 + 48);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) += Int32;
    return (const __CFString *)CIGVNodeSetColor(v6, (const char *)0xB);
  }
  return result;
}

uint64_t ___ZNK2CI4Node23node_for_graphviz_statsERKNSt3__113unordered_mapIPKNS_11GraphObjectEjNS1_4hashIS5_EENS1_8equal_toIS5_EENS1_9allocatorINS1_4pairIKS5_jEEEEEENS0_9NodeStatsE_block_invoke_2(uint64_t a1, FILE *a2)
{
  uint64_t v4 = *(void ***)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  long long v5 = *(_OWORD *)(a1 + 80);
  v34[0] = *(_OWORD *)(a1 + 64);
  v34[1] = v5;
  long long v6 = *(_OWORD *)(a1 + 112);
  v34[2] = *(_OWORD *)(a1 + 96);
  v34[3] = v6;
  ((void (*)(void **, FILE *, uint64_t, _OWORD *))(*v4)[19])(v4, a2, v3, v34);
  if ((int)(-286331153 * ((v4[2][1] - *v4[2]) >> 3)) < 1)
  {
    unint64_t v9 = 0;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    unint64_t v9 = 0;
    do
    {
      if (v8) {
        fprintf(a2, ",");
      }
      else {
        fprintf(a2, "\nrois=");
      }
      if (v8 && (v8 & 1) == 0) {
        fwrite("\n     ", 6uLL, 1uLL, a2);
      }
      CI::fprintf(a2, v10, *(CGRect *)(*v4[2] + v7));
      long long v11 = v4[2];
      uint64_t v12 = *v11;
      uint64_t v13 = *v11 + v7;
      double v14 = *(double *)(v13 + 16);
      double v15 = *(double *)(v13 + 24);
      int v16 = *(_DWORD *)(v13 + 80);
      if (v16 >= 2)
      {
        fprintf(a2, "/%d", v16);
        long long v11 = v4[2];
        uint64_t v12 = *v11;
      }
      unint64_t v9 = (unint64_t)((double)v9 + v14 * v15);
      ++v8;
      v7 += 120;
    }
    while (v8 < (int)(-286331153 * ((unint64_t)(v11[1] - v12) >> 3)));
  }
  unint64_t v17 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  if (v17) {
    fprintf(a2, "\npeakContribution=%.1fMB", (double)v17 * 0.000000953674316);
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24)) {
    fprintf(a2, "\npeakContributionCount=%ld", *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
  }
  uint64_t result = ((uint64_t (*)(void **))(*v4)[2])(v4);
  if (result != 39)
  {
    fprintf(a2, "\npixels=%ld", v9);
    fprintf(a2, "%cextent=", 10);
    v35.origin.CGFloat x = ((double (*)(void **))(*v4)[20])(v4);
    CI::fprintf(a2, v19, v35);
    CGFloat v20 = ((double (*)(void **))(*v4)[20])(v4);
    CGFloat v22 = v21;
    CGFloat v24 = v23;
    CGFloat v26 = v25;
    v38.origin.CGFloat x = ((double (*)(void **))(*v4)[21])(v4);
    v38.origin.CGFloat y = v27;
    v38.size.CGFloat width = v28;
    v38.size.CGFloat height = v29;
    v36.origin.CGFloat x = v20;
    v36.origin.CGFloat y = v22;
    v36.size.CGFloat width = v24;
    v36.size.CGFloat height = v26;
    if (!CGRectEqualToRect(v36, v38))
    {
      v37.origin.CGFloat x = ((double (*)(void **))(*v4)[21])(v4);
      CI::fprintf(a2, v30, v37);
    }
    if (((uint64_t (*)(void **))(*v4)[36])(v4))
    {
      fprintf(a2, "%cluma opaque");
    }
    else if (((uint64_t (*)(void **))(*v4)[35])(v4))
    {
      fprintf(a2, "%cr-only opaque");
    }
    else if (((uint64_t (*)(void **))(*v4)[34])(v4))
    {
      fprintf(a2, "%crg-only opaque");
    }
    else if (((unsigned int (*)(void **))(*v4)[33])(v4))
    {
      fprintf(a2, "%copaque");
    }
    if (((unsigned int (*)(void **))(*v4)[38])(v4) == -1) {
      fwrite(" shallow", 8uLL, 1uLL, a2);
    }
    if (((unsigned int (*)(void **))(*v4)[38])(v4) == 1) {
      fwrite(" deep", 5uLL, 1uLL, a2);
    }
    uint64_t result = ((uint64_t (*)(void **))(*v4)[48])(v4);
    if (result)
    {
      uint64_t v31 = ((uint64_t (*)(void **))(*v4)[48])(v4);
      uint64_t result = fprintf(a2, "%cdigest=%016llX", 10, v31);
    }
  }
  if (*(unsigned char *)(a1 + 120))
  {
    double v32 = *(double *)(a1 + 88);
    if (v32 != 0.0) {
      uint64_t result = fprintf(a2, "\nfillTime=%.1fms", v32 * 1000.0);
    }
    if (*(void *)(a1 + 96)) {
      return fprintf(a2, "\nfillPixels=%llu", *(void *)(a1 + 96));
    }
  }
  return result;
}

__n128 std::construct_at[abi:nn180100]<CI::SerialRectArray::roiData,CI::SerialRectArray::roiData,CI::SerialRectArray::roiData*>(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 96) = 0;
  __n128 result = *(__n128 *)(a2 + 96);
  *(__n128 *)(a1 + 96) = result;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  return result;
}

void CI::Object::performDeferredRoot(void *a1)
{
  {
    CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool = (uint64_t)&CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool;
    qword_1EB466BF0 = (uint64_t)&CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool;
    qword_1EB466BF8 = 0;
    __cxa_atexit((void (*)(void *))std::list<dispatch_queue_s *>::~list, &CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool, &dword_193671000);
  }
  {
    CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool = (uint64_t)&CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool;
    qword_1EB466BD8 = (uint64_t)&CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool;
    qword_1EB466BE0 = 0;
    __cxa_atexit((void (*)(void *))std::list<dispatch_group_s *>::~list, &CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool, &dword_193671000);
  }
  {
    long long v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    CI::Object::performDeferredRoot(void({block_pointer})(void))::gPoolAccessQueue = (uint64_t)dispatch_queue_create("CI::DispatchPoolAccessQueue", v2);
  }
  uint64_t v9 = 0;
  uint64_t v10 = &v9;
  uint64_t v11 = 0x2000000000;
  uint64_t v12 = 0;
  uint64_t v5 = 0;
  long long v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI6Object19performDeferredRootEU13block_pointerFvvE_block_invoke;
  block[3] = &unk_1E5770990;
  block[4] = &v9;
  void block[5] = &v5;
  dispatch_sync((dispatch_queue_t)CI::Object::performDeferredRoot(void({block_pointer})(void))::gPoolAccessQueue, block);
  dispatch_queue_set_specific((dispatch_queue_t)v10[3], &CI::Object::_queueKey, (void *)v10[3], 0);
  dispatch_queue_set_specific((dispatch_queue_t)v10[3], &CI::Object::_groupKey, (void *)v6[3], 0);
  dispatch_group_async((dispatch_group_t)v6[3], (dispatch_queue_t)v10[3], a1);
  dispatch_group_wait((dispatch_group_t)v6[3], 0xFFFFFFFFFFFFFFFFLL);
  dispatch_queue_set_specific((dispatch_queue_t)v10[3], &CI::Object::_queueKey, 0, 0);
  dispatch_queue_set_specific((dispatch_queue_t)v10[3], &CI::Object::_groupKey, 0, 0);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  _OWORD v3[2] = ___ZN2CI6Object19performDeferredRootEU13block_pointerFvvE_block_invoke_2;
  void v3[3] = &unk_1E5775D38;
  _OWORD v3[4] = &v9;
  void v3[5] = &v5;
  dispatch_async((dispatch_queue_t)CI::Object::performDeferredRoot(void({block_pointer})(void))::gPoolAccessQueue, v3);
  _Block_object_dispose(&v5, 8);
  _Block_object_dispose(&v9, 8);
}

void *std::list<dispatch_queue_s *>::~list(void *a1)
{
  return a1;
}

void *std::list<dispatch_group_s *>::~list(void *a1)
{
  return a1;
}

void ___ZN2CI6Object19performDeferredRootEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v2 = qword_1EB466BF8;
  if (qword_1EB466BF8)
  {
    uint64_t v3 = (uint64_t *)qword_1EB466BF0;
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(void *)(qword_1EB466BF0 + 16);
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = v3[1];
    *(void *)v3[1] = v4;
    qword_1EB466BF8 = v2 - 1;
    operator delete(v3);
  }
  else
  {
    uint64_t v5 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = dispatch_queue_create("CI::PooledDispatchQueue", v5);
  }
  uint64_t v6 = qword_1EB466BE0;
  if (qword_1EB466BE0)
  {
    uint64_t v7 = (uint64_t *)qword_1EB466BD8;
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(void *)(qword_1EB466BD8 + 16);
    uint64_t v8 = *v7;
    *(void *)(v8 + 8) = v7[1];
    *(void *)v7[1] = v8;
    qword_1EB466BE0 = v6 - 1;
    operator delete(v7);
  }
  else
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = dispatch_group_create();
  }
}

void ___ZN2CI6Object19performDeferredRootEU13block_pointerFvvE_block_invoke_2(uint64_t a1)
{
  uint64_t v2 = qword_1EB466BF8;
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  if ((unint64_t)qword_1EB466BF8 > 9)
  {
    dispatch_release(*(dispatch_object_t *)(v3 + 24));
  }
  else
  {
    uint64_t v4 = operator new(0x18uLL);
    uint64_t v5 = *(void *)(v3 + 24);
    uint64_t v6 = CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool;
    v4[1] = &CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool;
    v4[2] = v5;
    *uint64_t v4 = v6;
    *(void *)(v6 + 8) = v4;
    CI::Object::performDeferredRoot(void({block_pointer})(void))::gQueuePool = (uint64_t)v4;
    qword_1EB466BF8 = v2 + 1;
  }
  uint64_t v7 = qword_1EB466BE0;
  uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
  if ((unint64_t)qword_1EB466BE0 > 9)
  {
    uint64_t v12 = *(NSObject **)(v8 + 24);
    dispatch_release(v12);
  }
  else
  {
    uint64_t v9 = operator new(0x18uLL);
    uint64_t v10 = *(void *)(v8 + 24);
    uint64_t v11 = CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool;
    v9[1] = &CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool;
    v9[2] = v10;
    *uint64_t v9 = v11;
    *(void *)(v11 + 8) = v9;
    CI::Object::performDeferredRoot(void({block_pointer})(void))::gGroupPool = (uint64_t)v9;
    qword_1EB466BE0 = v7 + 1;
  }
}

BOOL CI::is_any_TypeNode(int a1)
{
  return (a1 - 28) < 0x19;
}

const char *CI::name_for_type(unsigned int a1)
{
  if (a1 > 0x58) {
    return "Unknown";
  }
  else {
    return off_1E5775E68[a1];
  }
}

CFStringRef CI::Object::description(CI::Object *this)
{
  unsigned int v2 = (*(uint64_t (**)(CI::Object *))(*(void *)this + 16))(this);
  uint64_t v3 = CI::name_for_type(v2);
  uint64_t v4 = atomic_load((unsigned int *)this + 2);
  return CFStringCreateWithFormat(0, 0, @"<CI::Object %s %p ref=%u>", v3, this, v4);
}

size_t CI::fprintf(FILE *this, __sFILE *a2, CGRect a3)
{
  double height = a3.size.height;
  double width = a3.size.width;
  double y = a3.origin.y;
  double x = a3.origin.x;
  if (CGRectIsInfinite(a3))
  {
    uint64_t v8 = "[infinite]";
    size_t v9 = 10;
  }
  else
  {
    v12.origin.double x = x;
    v12.origin.double y = y;
    v12.size.double width = width;
    v12.size.double height = height;
    if (CGRectIsNull(v12))
    {
      uint64_t v8 = "[null]";
      size_t v9 = 6;
    }
    else
    {
      v13.origin.double x = x;
      v13.origin.double y = y;
      v13.size.double width = width;
      v13.size.double height = height;
      if (!CGRectIsEmpty(v13)) {
        return fprintf(this, "[%g %g %g %g]", x, y, width, height);
      }
      uint64_t v8 = "[empty]";
      size_t v9 = 7;
    }
  }

  return fwrite(v8, v9, 1uLL, this);
}

uint64_t CI::fprintf(FILE *__stream, CFStringRef theString, const __CFString *a3)
{
  v10[1] = *MEMORY[0x1E4F143B8];
  if (!theString) {
    fwrite("nil", 3uLL, 1uLL, __stream);
  }
  CFIndex Length = CFStringGetLength(theString);
  CFIndex MaximumSizeForEncoding = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u);
  MEMORY[0x1F4188790]();
  uint64_t v8 = (char *)v10 - v7;
  bzero((char *)v10 - v7, MaximumSizeForEncoding);
  uint64_t result = CFStringGetCString(theString, v8, MaximumSizeForEncoding, 0x8000100u);
  if (result) {
    return fputs(v8, __stream);
  }
  return result;
}

uint64_t __Block_byref_object_copy__27(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__27(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t __Block_byref_object_copy__92(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__93(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

void *CI::GraphObject::graphviz_representation(CI::GraphObject *this, CI::GraphObject *a2, const __CFString *a3, CGImage *a4)
{
  CGRect v34 = this;
  if (!this) {
    return 0;
  }
  id v7 = CIGVGraphCreate();
  uint64_t v8 = v7;
  if (v7)
  {
    v31[0] = 0;
    v31[1] = v31;
    v31[2] = 0x5002000000;
    unsigned __int16 v31[3] = __Block_byref_object_copy__98;
    void v31[4] = __Block_byref_object_dispose__99;
    memset(v32, 0, sizeof(v32));
    int v33 = 1065353216;
    v28[0] = 0;
    v28[1] = v28;
    v28[2] = 0x5002000000;
    v28[3] = __Block_byref_object_copy__100;
    _OWORD v28[4] = __Block_byref_object_dispose__101;
    memset(v29, 0, sizeof(v29));
    int v30 = 1065353216;
    uint64_t v21 = 0;
    CGFloat v22 = &v21;
    uint64_t v23 = 0x5002000000;
    CGFloat v24 = __Block_byref_object_copy__102;
    double v25 = __Block_byref_object_dispose__103;
    memset(v26, 0, sizeof(v26));
    int v27 = 1065353216;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 0x40000000;
    _OWORD v20[2] = ___ZN2CI11GraphObject23graphviz_representationEPS0_PK10__CFStringP7CGImage_block_invoke;
    void v20[3] = &unk_1E5775E20;
    v20[4] = &v21;
    void v20[5] = v31;
    void v20[6] = v28;
    v20[7] = v7;
    CI::GraphObject::traverse_preorder_stoppable((uint64_t)this, 0, 0, 0, (uint64_t)v20);
    uint64_t v13 = 0;
    double v14 = &v13;
    uint64_t v15 = 0x5002000000;
    int v16 = __Block_byref_object_copy__27;
    unint64_t v17 = __Block_byref_object_dispose__27;
    memset(v18, 0, sizeof(v18));
    int v19 = 1065353216;
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    void v12[2] = ___ZN2CI11GraphObject23graphviz_representationEPS0_PK10__CFStringP7CGImage_block_invoke_2;
    void v12[3] = &unk_1E5775E48;
    v12[4] = &v13;
    v12[5] = &v21;
    void v12[6] = v8;
    CI::GraphObject::traverse_preorder_stoppable((uint64_t)v34, 0, 0, 0, (uint64_t)v12);
    size_t v9 = CIGVNodeCreate();
    CIGVNodeSetColor(v9, (const char *)0xD);
    CIGVNodeSetShape(v9, 0);
    CIGVNodeSetLabel(v9, (const char *)a2);
    CIGVNodeAddImage(v9, (const char *)a3);
    CIGVGraphAddNode(v8, (const char *)v9);
    uint64_t v10 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>(v22 + 5, &v34);
    CIGVGraphAddEdge(v8, (const char *)v10[3], (uint64_t)v9);
    CFRelease(a2);
    CFRelease(v9);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::clear(v22 + 5);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::clear(v14 + 5);
    _Block_object_dispose(&v13, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v18);
    _Block_object_dispose(&v21, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v26);
    _Block_object_dispose(v28, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v29);
    _Block_object_dispose(v31, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v32);
  }
  return v8;
}

uint64_t __Block_byref_object_copy__98(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__99(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t __Block_byref_object_copy__100(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__101(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t __Block_byref_object_copy__102(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__103(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

BOOL ___ZN2CI11GraphObject23graphviz_representationEPS0_PK10__CFStringP7CGImage_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v13 = a2;
  uint64_t v3 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v13);
  if (!v3)
  {
    if (!CI_GRAPHVIZ_INTERNAL()
      && (*(int (**)(void *))(*v13 + 40))(v13) >= 2
      && (*(int (**)(void *))(*v13 + 40))(v13) >= 1)
    {
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v6 = v5 + 40;
        uint64_t v7 = *(void *)(v5 + 64);
        uint64_t v12 = (*(uint64_t (**)(void *, uint64_t))(*v13 + 48))(v13, v4);
        double v14 = &v12;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v6, &v12, (uint64_t)&std::piecewise_construct, &v14)+ 6) = v7;
        uint64_t v4 = (v4 + 1);
      }
      while ((int)v4 < (*(int (**)(void *))(*v13 + 40))(v13));
    }
    uint64_t v8 = (char *)(*(uint64_t (**)(void *, uint64_t))(*v13 + 72))(v13, *(void *)(*(void *)(a1 + 40) + 8) + 40);
    CIGVGraphAddNode(*(void **)(a1 + 56), v8);
    uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
    double v14 = (uint64_t *)&v13;
    std::__hash_table<std::__hash_value_type<CI::Node const*,unsigned long>,std::__unordered_map_hasher<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,true>,std::__unordered_map_equal<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::equal_to<CI::Node const*>,std::hash<CI::Node const*>,true>,std::allocator<std::__hash_value_type<CI::Node const*,unsigned long>>>::__emplace_unique_key_args<CI::Node const*,std::piecewise_construct_t const&,std::tuple<CI::Node const* const&>,std::tuple<>>(v9, &v13, (uint64_t)&std::piecewise_construct, &v14)[3] = v8;
    double v14 = 0;
    uint64_t v10 = 0;
    if ((*(unsigned int (**)(void *))(*v13 + 16))(v13) - 28 <= 0x18)
    {
      uint64_t v10 = (uint64_t *)(*(uint64_t (**)(void *))(*v13 + 384))(v13);
      double v14 = v10;
    }
    if ((*(unsigned int (**)(void *))(*v13 + 16))(v13) - 2 <= 0x17)
    {
      uint64_t v10 = (uint64_t *)v13[10];
      double v14 = v10;
    }
    if (v10)
    {
      if (std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::find<CI::ProgramDigest>((void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), (unint64_t *)&v14))
      {
        CIGVNodeSetColor(v8, (const char *)0xF);
      }
      std::__hash_table<CI::OtherDigest,std::hash<CI::OtherDigest>,std::equal_to<CI::OtherDigest>,std::allocator<CI::OtherDigest>>::__emplace_unique_key_args<CI::OtherDigest,CI::OtherDigest const&>(*(void *)(*(void *)(a1 + 48) + 8) + 40, (unint64_t *)&v14, &v14);
    }
  }
  return v3 != 0;
}

BOOL ___ZN2CI11GraphObject23graphviz_representationEPS0_PK10__CFStringP7CGImage_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v3 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v10);
  if (!v3)
  {
    std::__hash_table<CI::Node const*,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,std::allocator<CI::Node const*>>::__emplace_unique_key_args<CI::Node const*,CI::Node const* const&>(*(void *)(*(void *)(a1 + 32) + 8) + 40, &v10, &v10);
    uint64_t v4 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), &v10)[3];
    if ((*(int (**)(uint64_t))(*(void *)v10 + 40))(v10) >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = (void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 48))(v10, v5);
        uint64_t v7 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>(v6, &v9);
        CIGVGraphAddEdge(*(void **)(a1 + 48), (const char *)v7[3], v4);
        uint64_t v5 = (v5 + 1);
      }
      while ((int)v5 < (*(int (**)(uint64_t))(*(void *)v10 + 40))(v10));
    }
  }
  return v3 != 0;
}

void *std::__hash_table<CI::OtherDigest,std::hash<CI::OtherDigest>,std::equal_to<CI::OtherDigest>,std::allocator<CI::OtherDigest>>::__emplace_unique_key_args<CI::OtherDigest,CI::OtherDigest const&>(uint64_t a1, unint64_t *a2, void *a3)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = *a2;
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      for (unint64_t i = *v9; i; unint64_t i = (void *)*i)
      {
        unint64_t v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6) {
            return i;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3) {
            break;
          }
        }
      }
    }
  }
  unint64_t i = operator new(0x18uLL);
  *unint64_t i = 0;
  i[1] = v6;
  i[2] = *a3;
  float v12 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    BOOL v14 = 1;
    if (v7 >= 3) {
      BOOL v14 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v15 = v14 | (2 * v7);
    unint64_t v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v15;
    }
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__rehash<true>(a1, v17);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v3 = v6 % v7;
      }
      else {
        unint64_t v3 = v6;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & v6;
    }
  }
  uint64_t v18 = *(void *)a1;
  int v19 = *(void **)(*(void *)a1 + 8 * v3);
  if (v19)
  {
    *unint64_t i = *v19;
LABEL_38:
    *int v19 = i;
    goto LABEL_39;
  }
  *unint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v20 = *(void *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7) {
        v20 %= v7;
      }
    }
    else
    {
      v20 &= v7 - 1;
    }
    int v19 = (void *)(*(void *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

uint64_t perfInit()
{
  mach_timebase_info((mach_timebase_info_t)&timebase);
  uint64_t result = mach_absolute_time();
  g_initTime = result;
  return result;
}

double timeElapsedSinceInit()
{
  uint64_t v0 = g_initTime;
  if (!g_initTime)
  {
    mach_timebase_info((mach_timebase_info_t)&timebase);
    uint64_t v0 = mach_absolute_time();
    g_initTime = v0;
  }
  uint64_t v1 = mach_absolute_time();
  LODWORD(v2) = timebase;
  LODWORD(v3) = *(_DWORD *)algn_1E9333E34;
  return (double)(v1 - v0) * (double)v2 / (double)v3 / 1000000000.0;
}

double timestampToSeconds(unint64_t a1, double a2, double a3, double a4)
{
  LODWORD(a3) = timebase;
  LODWORD(a4) = *(_DWORD *)algn_1E9333E34;
  return (double)a1 * (double)*(unint64_t *)&a3 / (double)*(unint64_t *)&a4 / 1000000000.0;
}

uint64_t PixelSumASM(uint8x16_t *a1, int a2, int a3, unsigned int a4, _DWORD *a5, uint32x4_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((a2 & 0x1F) != 0 || (a3 & 1) != 0 || (a1 & 0xF) != 0 || (a4 & 0xF) != 0) {
    return -1;
  }
  uint64_t v9 = (uint16x8_t *)&a9;
  uint64_t v10 = (uint8x16_t *)((char *)a1 + a4 * (unint64_t)(a3 >> 1));
  unint64_t v11 = (_DWORD *)((char *)a5 + 2 * a3);
  unsigned int v12 = a4 - a2;
  int v13 = 1;
  int v14 = a2 >> 5;
  int v15 = 128;
  uint16x8_t v16 = 0uLL;
  uint16x8_t v17 = 0uLL;
  do
  {
    uint8x16_t v18 = *a1;
    uint8x16_t v19 = a1[1];
    uint8x16_t v20 = *v10;
    uint8x16_t v21 = v10[1];
    a1 += 2;
    v10 += 2;
    uint16x8_t v16 = vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(v16, *(uint8x8_t *)v18.i8), v18), *(uint8x8_t *)v19.i8), v19);
    uint16x8_t v17 = vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(v17, *(uint8x8_t *)v20.i8), v20), *(uint8x8_t *)v21.i8), v21);
    *uint64_t v9 = vaddw_u8(vmovl_u8(*(uint8x8_t *)v18.i8), *(uint8x8_t *)v20.i8);
    v9[1] = vaddw_high_u8(vmovl_high_u8(v18), v20);
    CGFloat v22 = v9 + 2;
    uint16x8_t *v22 = vaddw_u8(vmovl_u8(*(uint8x8_t *)v19.i8), *(uint8x8_t *)v21.i8);
    v22[1] = vaddw_high_u8(vmovl_high_u8(v19), v21);
    uint64_t v9 = v22 + 2;
    --v14;
  }
  while (v14);
  while (1)
  {
    a1 = (uint8x16_t *)((char *)a1 + v12);
    uint64_t v10 = (uint8x16_t *)((char *)v10 + v12);
    int64x2_t v33 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(v16));
    int64x2_t v34 = (int64x2_t)vpaddlq_u32(vpaddlq_u16(v17));
    *a5++ = vpaddq_s64(v33, v33).u32[0];
    *v11++ = vpaddq_s64(v34, v34).u32[0];
    uint16x8_t v16 = 0uLL;
    uint16x8_t v17 = 0uLL;
    uint64_t v9 = (uint16x8_t *)((char *)v9 - 2 * a2);
    int v32 = a2 >> 5;
    a3 -= 2;
    if (!a3 || (--v15, !v15))
    {
      int v35 = a2 >> 4;
      if (--v13)
      {
        do
        {
          uint16x8_t v39 = *v9;
          uint16x8_t v40 = v9[1];
          *uint64_t v9 = 0uLL;
          v9[1] = 0uLL;
          v9 += 2;
          uint32x4_t v42 = *a6;
          uint32x4_t v43 = a6[1];
          unint64_t v41 = a6 + 2;
          uint32x4_t v44 = *v41;
          uint32x4_t v45 = v41[1];
          v41 -= 2;
          *unint64_t v41 = vaddw_u16(v42, *(uint16x4_t *)v39.i8);
          v41[1] = vaddw_high_u16(v43, v39);
          v41 += 2;
          *unint64_t v41 = vaddw_u16(v44, *(uint16x4_t *)v40.i8);
          v41[1] = vaddw_high_u16(v45, v40);
          a6 = v41 + 2;
          --v35;
        }
        while (v35);
      }
      else
      {
        do
        {
          uint16x8_t v36 = *v9;
          uint16x8_t v37 = v9[1];
          *uint64_t v9 = 0uLL;
          v9[1] = 0uLL;
          v9 += 2;
          *a6 = vmovl_u16(*(uint16x4_t *)v36.i8);
          a6[1] = vmovl_high_u16(v36);
          CGRect v38 = a6 + 2;
          *CGRect v38 = vmovl_u16(*(uint16x4_t *)v37.i8);
          v38[1] = vmovl_high_u16(v37);
          a6 = v38 + 2;
          --v35;
        }
        while (v35);
      }
      uint64_t v9 = (uint16x8_t *)((char *)v9 - 2 * a2);
      a6 = (uint32x4_t *)((char *)a6 - 4 * a2);
      int v32 = a2 >> 5;
      int v15 = 128;
      if (!a3) {
        break;
      }
    }
    do
    {
      uint8x16_t v23 = *a1;
      uint8x16_t v24 = a1[1];
      uint8x16_t v25 = *v10;
      uint8x16_t v26 = v10[1];
      a1 += 2;
      v10 += 2;
      uint16x8_t v28 = *v9;
      uint16x8_t v29 = v9[1];
      int v27 = v9 + 2;
      uint16x8_t v16 = vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(v16, *(uint8x8_t *)v23.i8), v23), *(uint8x8_t *)v24.i8), v24);
      uint16x8_t v17 = vaddw_high_u8(vaddw_u8(vaddw_high_u8(vaddw_u8(v17, *(uint8x8_t *)v25.i8), v25), *(uint8x8_t *)v26.i8), v26);
      uint16x8_t v30 = vaddw_u8(vaddw_u8(*v27, *(uint8x8_t *)v24.i8), *(uint8x8_t *)v26.i8);
      uint16x8_t v31 = vaddw_high_u8(vaddw_high_u8(v27[1], v24), v26);
      v27 -= 2;
      *int v27 = vaddw_u8(vaddw_u8(v28, *(uint8x8_t *)v23.i8), *(uint8x8_t *)v25.i8);
      v27[1] = vaddw_high_u8(vaddw_high_u8(v29, v23), v25);
      v27 += 2;
      *int v27 = v30;
      v27[1] = v31;
      uint64_t v9 = v27 + 2;
      --v32;
    }
    while (v32);
  }
  return 0;
}

float MemDiff32(int32x4_t *a1, int32x4_t *a2, int a3)
{
  int32x4_t v3 = 0uLL;
  int32x4_t v4 = 0uLL;
  int v5 = a3 >> 3;
  do
  {
    int32x4_t v6 = *a1;
    int32x4_t v7 = a1[1];
    int32x4_t v8 = *a2;
    int32x4_t v9 = a2[1];
    a1 += 2;
    a2 += 2;
    int32x4_t v3 = vabaq_s32(v3, v6, v8);
    int32x4_t v4 = vabaq_s32(v4, v7, v9);
    --v5;
  }
  while (v5);
  int64x2_t v10 = (int64x2_t)vpaddlq_u32((uint32x4_t)vaddq_s32(v3, v4));
  LODWORD(result) = vpaddq_s64(v10, v10).u32[0];
  return result;
}

float MemDiffZeroMean32(int32x4_t *a1, unsigned int a2, int32x4_t *a3, unsigned int a4, int a5)
{
  int32x4_t v5 = 0uLL;
  int32x4_t v6 = 0uLL;
  int32x4_t v7 = vdupq_n_s32(a2);
  int32x4_t v8 = vdupq_n_s32(a4);
  int v9 = a5 >> 3;
  do
  {
    int32x4_t v10 = *a1;
    int32x4_t v11 = a1[1];
    int32x4_t v12 = *a3;
    int32x4_t v13 = a3[1];
    a1 += 2;
    a3 += 2;
    int32x4_t v5 = vabaq_s32(v5, vsubq_s32(v10, v7), vsubq_s32(v12, v8));
    int32x4_t v6 = vabaq_s32(v6, vsubq_s32(v11, v7), vsubq_s32(v13, v8));
    --v9;
  }
  while (v9);
  int64x2_t v14 = (int64x2_t)vpaddlq_u32((uint32x4_t)vaddq_s32(v5, v6));
  LODWORD(result) = vpaddq_s64(v14, v14).u32[0];
  return result;
}

float MemSum32(int32x4_t *a1, int a2)
{
  int32x4_t v2 = 0uLL;
  int32x4_t v3 = 0uLL;
  int v4 = a2 >> 3;
  do
  {
    int32x4_t v5 = *a1;
    int32x4_t v6 = a1[1];
    a1 += 2;
    int32x4_t v2 = vaddq_s32(v2, v5);
    int32x4_t v3 = vaddq_s32(v3, v6);
    --v4;
  }
  while (v4);
  int64x2_t v7 = (int64x2_t)vpaddlq_u32((uint32x4_t)vaddq_s32(v2, v3));
  LODWORD(result) = vpaddq_s64(v7, v7).u32[0];
  return result;
}

uint64_t getCFPreferenceNumber(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  CFStringRef v4 = (const __CFString *)CFPreferencesCopyValue(a1, a2, (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (v4)
  {
    CFStringRef v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFStringGetTypeID())
    {
      uint64_t IntValue = CFStringGetIntValue(v5);
      if ((int)IntValue <= 0)
      {
        uint64_t IntValue = 1;
        if (CFStringCompare(v5, @"true", 1uLL))
        {
          uint64_t IntValue = 1;
          if (CFStringCompare(v5, @"yes", 1uLL))
          {
            if (CFStringCompare(v5, @"false", 1uLL) == kCFCompareEqualTo
              || CFStringCompare(v5, @"no", 1uLL) == kCFCompareEqualTo
              || (uint64_t IntValue = a3, CFStringCompare(v5, @"0", 1uLL) == kCFCompareEqualTo))
            {
              uint64_t IntValue = 0;
            }
          }
        }
      }
    }
    else
    {
      CFTypeID v8 = CFGetTypeID(v5);
      if (v8 == CFNumberGetTypeID())
      {
        unsigned int valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr)) {
          uint64_t IntValue = valuePtr;
        }
        else {
          uint64_t IntValue = a3;
        }
      }
      else
      {
        CFTypeID v9 = CFGetTypeID(v5);
        uint64_t IntValue = a3;
        if (v9 == CFBooleanGetTypeID()) {
          uint64_t IntValue = CFEqual(v5, (CFTypeRef)*MEMORY[0x1E4F1CFD0]);
        }
      }
    }
    CFRelease(v5);
    return IntValue;
  }
  return a3;
}

float getCFPreferenceFloat(const __CFString *a1, const __CFString *a2, float DoubleValue)
{
  CFNumberRef v4 = (const __CFNumber *)CFPreferencesCopyValue(a1, a2, (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3C8]);
  if (v4)
  {
    CFNumberRef v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      if (CFNumberGetValue(v5, kCFNumberFloatType, &valuePtr)) {
        DoubleValue = (float)valuePtr;
      }
    }
    CFTypeID v7 = CFGetTypeID(v5);
    if (v7 == CFStringGetTypeID()) {
      DoubleValue = CFStringGetDoubleValue((CFStringRef)v5);
    }
    CFRelease(v5);
  }
  return DoubleValue;
}

void non-virtual thunk to'CI::RenderToBitmap::~RenderToBitmap(CI::RenderToBitmap *this)
{
}

{
  uint64_t vars8;

  CI::RenderToBitmap::~RenderToBitmap((CI::RenderToBitmap *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

CFStringRef CI::RenderToBitmap::description(CI::RenderToBitmap *this)
{
  return CFStringCreateWithFormat(0, 0, @"bitmap: %p", *((void *)this + 6));
}

uint64_t CI::RenderToBitmap::type(CI::RenderToBitmap *this)
{
  return 81;
}

uint64_t non-virtual thunk to'CI::RenderToBitmap::type(CI::RenderToBitmap *this)
{
  return 81;
}

uint64_t CI::RenderDestination::description(CI::RenderDestination *this)
{
  return 0;
}

uint64_t CI::RenderDestination::pointer(CI::RenderDestination *this)
{
  return 0;
}

uint64_t CI::RenderDestination::width(CI::RenderDestination *this)
{
  return 0;
}

uint64_t CI::RenderDestination::height(CI::RenderDestination *this)
{
  return 0;
}

uint64_t CI::InstanceCounted<(CI::Type)81>::type()
{
  return 81;
}

void *CI::InstanceCounted<(CI::Type)81>::~InstanceCounted(void *result)
{
  *float result = &unk_1EE45B228;
  atomic_fetch_add(&dword_1EB466F58[23], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)81>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B228;
  atomic_fetch_add(&dword_1EB466F58[23], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

CI::RenderToPixelBuffer *CI::RenderToPixelBuffer::RenderToPixelBuffer(CI::RenderToPixelBuffer *this, CFTypeRef cf)
{
  *((_DWORD *)this + 2) = 1;
  *(void *)this = &unk_1EE45CC00;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  *((_DWORD *)this + 8) = 0;
  *((void *)this + 5) = &unk_1EE45B250;
  atomic_fetch_add(&dword_1EB466F58[24], 1u);
  *(void *)this = &unk_1EE45D230;
  *((void *)this + 5) = &unk_1EE45D288;
  *((void *)this + 6) = cf;
  if (cf) {
    CFRetain(cf);
  }
  return this;
}

void CI::RenderToPixelBuffer::~RenderToPixelBuffer(CI::RenderToPixelBuffer *this)
{
  *(void *)this = &unk_1EE45D230;
  *((void *)this + 5) = &unk_1EE45D288;
  int32x4_t v2 = (const void *)*((void *)this + 6);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 5) = &unk_1EE45B250;
  atomic_fetch_add(&dword_1EB466F58[24], 0xFFFFFFFF);

  CI::RenderDestination::~RenderDestination(this);
}

{
  uint64_t vars8;

  CI::RenderToPixelBuffer::~RenderToPixelBuffer(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::RenderToPixelBuffer::~RenderToPixelBuffer(CI::RenderToPixelBuffer *this)
{
}

{
  uint64_t vars8;

  CI::RenderToPixelBuffer::~RenderToPixelBuffer((CI::RenderToPixelBuffer *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

CFStringRef CI::RenderToPixelBuffer::description(CI::RenderToPixelBuffer *this)
{
  return CFStringCreateWithFormat(0, 0, @"pixelbuffer: %p", *((void *)this + 6));
}

uint64_t CI::RenderToPixelBuffer::render(CI **this, CI::Image *a2, CI::Context *a3)
{
  uint64_t v69 = *MEMORY[0x1E4F143B8];
  int v6 = CI::format_from_CVPixelBuffer(this[6], a2);
  if (CI::format_is_ycc_biplanar(v6))
  {
    int is_ycc_full_range = CI::format_is_ycc_full_range(v6);
    BOOL is_deep = CI::format_is_deep(v6);
    CI::format_is_ycc_420(v6);
    CI::format_is_ycc_422(v6);
    CI::format_is_ycc_444(v6);
    int v8 = CI::format_bits_per_component(v6);
    CI::format_is_packed(v6);
    char is_half_float = CI::format_is_half_float(v6);
    size_t Width = CVPixelBufferGetWidth(this[6]);
    size_t Height = CVPixelBufferGetHeight(this[6]);
    v70.origin.CGFloat x = (*(double (**)(CI::Image *))(*(void *)a2 + 88))(a2);
    CGRect v71 = CGRectInset(v70, 0.00100000005, 0.00100000005);
    CGRect v72 = CGRectIntegral(v71);
    CGFloat x = v72.origin.x;
    CGFloat y = v72.origin.y;
    CGFloat v12 = v72.size.width;
    CGFloat v13 = v72.size.height;
    if (CGRectIsNull(v72))
    {
      LODWORD(v14) = 0;
      LODWORD(v15) = 0;
      goto LABEL_19;
    }
    v76.origin.CGFloat x = x;
    v76.origin.CGFloat y = y;
    v76.size.double width = v12;
    v76.size.double height = v13;
    if (CGRectIsInfinite(v76))
    {
      unint64_t v15 = 0xFFFFFFFFLL;
      unint64_t v14 = 0xFFFFFFFFLL;
      int v34 = -2147483647;
      int v35 = -2147483647;
    }
    else
    {
      v77.origin.CGFloat x = x;
      v77.origin.CGFloat y = y;
      v77.size.double width = v12;
      v77.size.double height = v13;
      CGRect v78 = CGRectInset(v77, 0.000001, 0.000001);
      CGRect v79 = CGRectIntegral(v78);
      int v35 = (int)v79.origin.x;
      int v34 = (int)v79.origin.y;
      unint64_t v14 = (unint64_t)v79.size.width;
      unint64_t v15 = (unint64_t)v79.size.height;
    }
    if (v35 == -2147483647 && v34 == -2147483647 && v14 == 0xFFFFFFFF)
    {
      int v34 = -2147483647;
      LODWORD(v14) = -1;
      if (!v15 || v15 == 0xFFFFFFFF) {
        goto LABEL_19;
      }
    }
    else if (!v14 || !v15)
    {
LABEL_19:
      int v37 = (*(uint64_t (**)(CI::Context *, uint64_t, uint64_t))(*(void *)a3 + 432))(a3, 784, 1);
      int v38 = (*(uint64_t (**)(CI::Context *, uint64_t, uint64_t))(*(void *)a3 + 432))(a3, 785, 1);
      if (is_half_float)
      {
        uint64_t v39 = 2056;
      }
      else if (v8 != 10 || v38 != 1)
      {
        int v40 = v37 ^ 1;
        if (v8 != 10) {
          int v40 = 1;
        }
        if (is_deep) {
          unsigned int v41 = 1800;
        }
        else {
          unsigned int v41 = 264;
        }
        if (v40) {
          uint64_t v39 = v41;
        }
        else {
          uint64_t v39 = 784;
        }
      }
      else
      {
        uint64_t v39 = 785;
      }
      uint64_t v42 = CI::PixelFormatType_from_format(v39);
      uint32x4_t v43 = ci_logger_performance();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)int buf = 136447234;
        *(void *)&CGRect buf[4] = "render";
        *(_WORD *)&buf[12] = 2082;
        *(void *)&buf[14] = CI::name_for_format(v39);
        *(_WORD *)&buf[22] = 2048;
        size_t v65 = Width;
        v66[0] = 2048;
        *(void *)&v66[1] = Height;
        v66[5] = 2082;
        CGRect v67 = CI::name_for_format(v6);
        _os_log_impl(&dword_193671000, v43, OS_LOG_TYPE_INFO, "%{public}s CI_CONVERSIONS: Rendered via an intermediate YCC444 (%{public}s) buffer instead of directly to a (%zux%zu) %{public}s pixel buffer.", buf, 0x34u);
      }
      unsigned int v44 = (*(uint64_t (**)(CI::Context *, uint64_t))(*(void *)a3 + 544))(a3, v39);
      Surface = CreateSurface((__CVBuffer *)v14, (__CVBuffer *)v15, (void *)v44, v42, 0);
      if (Surface)
      {
        if ((int)v39 > 1799)
        {
          if (v39 == 2056)
          {
            *(void *)int buf = 0x3C00000000000000;
            v62[0] = MEMORY[0x1E4F143A8];
            v62[1] = 0x40000000;
            v62[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2;
            void v62[3] = &__block_descriptor_tmp_4_4;
            v62[4] = buf;
            uint64_t v47 = v62;
          }
          else
          {
            *(void *)uint64_t v68 = 0xFFFF800080000040;
            vImagePixelCount v48 = v68;
            if (is_ycc_full_range) {
              vImagePixelCount v48 = buf;
            }
            v63[0] = MEMORY[0x1E4F143A8];
            v63[1] = 0x40000000;
            void v63[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke;
            _OWORD v63[3] = &__block_descriptor_tmp_29;
            v63[4] = v48;
            *(void *)int buf = 0xFFFF800080000000;
            uint64_t v47 = v63;
          }
        }
        else if (v39 == 784)
        {
          if (is_ycc_full_range) {
            int v50 = 524800;
          }
          else {
            int v50 = 67633664;
          }
          v60[0] = MEMORY[0x1E4F143A8];
          v60[1] = 0x40000000;
          v60[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3;
          v60[3] = &__block_descriptor_tmp_5_3;
          int v61 = v50;
          uint64_t v47 = v60;
        }
        else if (v39 == 785)
        {
          if (is_ycc_full_range) {
            int v46 = 537395200;
          }
          else {
            int v46 = 537395264;
          }
          v58[0] = MEMORY[0x1E4F143A8];
          v58[1] = 0x40000000;
          v58[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_4;
          void v58[3] = &__block_descriptor_tmp_6_3;
          int v59 = v46;
          uint64_t v47 = v58;
        }
        else
        {
          *(_DWORD *)int buf = -8355840;
          *(_DWORD *)uint64_t v68 = -8355824;
          vImagePixelCount v49 = v68;
          if (is_ycc_full_range) {
            vImagePixelCount v49 = buf;
          }
          v57[0] = MEMORY[0x1E4F143A8];
          v57[1] = 0x40000000;
          v57[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_5;
          v57[3] = &__block_descriptor_tmp_9_3;
          v57[4] = v49;
          uint64_t v47 = v57;
        }
        SurfaceApplyPlaneBlock(Surface, (uint64_t)v47);
        operator new();
      }
      operator new();
    }
    LODWORD(v14) = v35 + v14 + 1 - (v35 & 0xFFFFFFFE | (v35 + v14 + 1) & 1);
    LODWORD(v15) = v15 + v34 + 1 - (v34 & 0xFFFFFFFE | (v15 + v34 + 1) & 1);
    goto LABEL_19;
  }
  *(void *)int buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x2000000000;
  size_t v65 = 0;
  CGFloat v16 = (*(double (**)(CI::Image *))(*(void *)a2 + 88))(a2);
  CGFloat v18 = v17;
  CGFloat v20 = v19;
  CGFloat v22 = v21;
  uint64_t v23 = (*(uint64_t (**)(CI::Image *))(*(void *)a2 + 240))(a2);
  v73.origin.CGFloat x = v16;
  v73.origin.CGFloat y = v18;
  v73.size.double width = v20;
  v73.size.double height = v22;
  CGRect v74 = CGRectInset(v73, 0.00100000005, 0.00100000005);
  CGRect v75 = CGRectIntegral(v74);
  CGFloat v24 = v75.origin.x;
  CGFloat v25 = v75.origin.y;
  CGFloat v26 = v75.size.width;
  CGFloat v27 = v75.size.height;
  unint64_t v28 = (unint64_t)v75.origin.x;
  unint64_t v29 = (unint64_t)v75.origin.y;
  unint64_t v30 = (unint64_t)v75.size.width;
  unint64_t v31 = (unint64_t)v75.size.height;
  int v32 = CI::format_bytes_per_pixel(v6);
  int64x2_t v33 = this[6];
  v55[0] = MEMORY[0x1E4F143A8];
  v55[1] = 0x40000000;
  v55[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_25;
  v55[3] = &unk_1E5776298;
  v55[6] = v29;
  v55[7] = v28;
  v55[8] = v32;
  v55[9] = v30;
  int v56 = v6;
  v55[10] = v31;
  v55[11] = v23;
  *(CGFloat *)&v55[12] = v24;
  *(CGFloat *)&v55[13] = v25;
  *(CGFloat *)&v55[14] = v26;
  *(CGFloat *)&v55[15] = v27;
  v55[4] = buf;
  v55[5] = this;
  v55[16] = a3;
  v55[17] = a2;
  if (PixelBufferApplyPlaneBlock(v33, (uint64_t)v55)) {
    operator new();
  }
  uint64_t v36 = *(void *)(*(void *)&buf[8] + 24);
  _Block_object_dispose(buf, 8);
  return v36;
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_4(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_5(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  if (v7 > 1799)
  {
    if (v7 == 2056)
    {
      int v8 = *(__CVBuffer **)(v6 + 48);
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 0x40000000;
      _OWORD v17[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_7;
      void v17[3] = &__block_descriptor_tmp_20_1;
      v17[4] = a2;
      _OWORD v17[5] = a4;
      v17[6] = a5;
      v17[7] = a6;
      v17[8] = *(void *)(a1 + 44);
      char v18 = *(unsigned char *)(a1 + 53);
      __int16 v19 = *(_WORD *)(a1 + 54);
      CFTypeID v9 = v17;
      goto LABEL_17;
    }
    if (v7 != 1800) {
      goto LABEL_13;
    }
    int v8 = *(__CVBuffer **)(v6 + 48);
    if (*(unsigned char *)(a1 + 52))
    {
      v32[0] = MEMORY[0x1E4F143A8];
      v32[1] = 0x40000000;
      v32[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2_11;
      v32[3] = &__block_descriptor_tmp_12_2;
      v32[4] = a2;
      int64x2_t v32[5] = a4;
      v32[6] = a5;
      v32[7] = a6;
      v32[8] = *(void *)(a1 + 44);
      char v33 = *(unsigned char *)(a1 + 53);
      __int16 v34 = *(_WORD *)(a1 + 54);
      CFTypeID v9 = v32;
    }
    else
    {
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 0x40000000;
      void v14[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_8;
      v14[3] = &__block_descriptor_tmp_21_1;
      v14[4] = a2;
      void v14[5] = a4;
      v14[6] = a5;
      v14[7] = a6;
      v14[8] = *(void *)(a1 + 44);
      char v15 = *(unsigned char *)(a1 + 53);
      __int16 v16 = *(_WORD *)(a1 + 54);
      CFTypeID v9 = v14;
    }
  }
  else
  {
    if (v7 != 784)
    {
      if (v7 == 785)
      {
        int v8 = *(__CVBuffer **)(v6 + 48);
        if (*(unsigned char *)(a1 + 52))
        {
          v29[0] = MEMORY[0x1E4F143A8];
          v29[1] = 0x40000000;
          v29[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3_13;
          void v29[3] = &__block_descriptor_tmp_14_2;
          _OWORD v29[4] = a2;
          int64x2_t v29[5] = a4;
          v29[6] = a5;
          v29[7] = a6;
          v29[8] = *(void *)(a1 + 44);
          char v30 = *(unsigned char *)(a1 + 53);
          __int16 v31 = *(_WORD *)(a1 + 54);
          CFTypeID v9 = v29;
        }
        else
        {
          v26[0] = MEMORY[0x1E4F143A8];
          v26[1] = 0x40000000;
          v26[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_4_15;
          void v26[3] = &__block_descriptor_tmp_16_3;
          v26[4] = a2;
          v26[5] = a4;
          double v26[6] = a5;
          v26[7] = a6;
          v26[8] = *(void *)(a1 + 44);
          char v27 = *(unsigned char *)(a1 + 53);
          __int16 v28 = *(_WORD *)(a1 + 54);
          CFTypeID v9 = v26;
        }
        goto LABEL_17;
      }
LABEL_13:
      int v8 = *(__CVBuffer **)(v6 + 48);
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 0x40000000;
      _OWORD v11[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_9;
      uint64_t v11[3] = &__block_descriptor_tmp_22_1;
      double v11[4] = a2;
      void v11[5] = a4;
      void v11[6] = a5;
      v11[7] = a6;
      v11[8] = *(void *)(a1 + 44);
      char v12 = *(unsigned char *)(a1 + 53);
      __int16 v13 = *(_WORD *)(a1 + 54);
      CFTypeID v9 = v11;
      goto LABEL_17;
    }
    int v8 = *(__CVBuffer **)(v6 + 48);
    if (*(unsigned char *)(a1 + 52))
    {
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 0x40000000;
      v23[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_5_17;
      unsigned __int16 v23[3] = &__block_descriptor_tmp_18_0;
      _OWORD v23[4] = a2;
      void v23[5] = a4;
      v23[6] = a5;
      v23[7] = a6;
      void v23[8] = *(void *)(a1 + 44);
      char v24 = *(unsigned char *)(a1 + 53);
      __int16 v25 = *(_WORD *)(a1 + 54);
      CFTypeID v9 = v23;
    }
    else
    {
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 0x40000000;
      _OWORD v20[2] = ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_6;
      void v20[3] = &__block_descriptor_tmp_19_3;
      v20[4] = a2;
      void v20[5] = a4;
      void v20[6] = a5;
      v20[7] = a6;
      void v20[8] = *(void *)(a1 + 44);
      char v21 = *(unsigned char *)(a1 + 53);
      __int16 v22 = *(_WORD *)(a1 + 54);
      CFTypeID v9 = v20;
    }
  }
LABEL_17:
  if (PixelBufferApplyPlaneBlock(v8, (uint64_t)v9))
  {
    int32x4_t v10 = ci_logger_api();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_10_cold_1(v10);
    }
  }
}

unsigned __int16 *___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2_11(unsigned __int16 *result, uint64_t a2, uint64_t a3, double a4, double a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a3) {
    return CopyYCC444_to_Y_10packed(*((unsigned __int16 **)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a9);
  }
  if (*((unsigned char *)result + 72)) {
    return (unsigned __int16 *)CopyYCC444_to_CbCr444_10packed(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a9, a4, a5, a6);
  }
  if (*((unsigned char *)result + 73)) {
    return (unsigned __int16 *)CopyYCC444_to_CbCr422_10packed(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, *((int *)result + 17), a9);
  }
  if (*((unsigned char *)result + 74))
  {
    int v9 = *((_DWORD *)result + 17);
    if (v9 >= 0) {
      int v10 = *((_DWORD *)result + 17);
    }
    else {
      int v10 = v9 + 1;
    }
    return (unsigned __int16 *)CopyYCC444_to_CbCr_10packed(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, (uint64_t)v10 >> 1, a9);
  }
  return result;
}

uint64_t ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3_13(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return CopyYCC_A2BGR10_to_Y_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 72)) {
    return CopyYCC_A2BGR10_to_CbCr444_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 73)) {
    return CopyYCC_A2BGR10_to_CbCr422_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 74))
  {
    int v6 = *(_DWORD *)(result + 68);
    if (v6 >= 0) {
      int v7 = *(_DWORD *)(result + 68);
    }
    else {
      int v7 = v6 + 1;
    }
    return CopyYCC_A2BGR10_to_CbCr_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

const float *___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_4_15(const float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return (const float *)CopyYCC_A2BGR10_to_Y_10(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 72)) {
    return (const float *)CopyYCC_A2BGR10_to_CbCr444_10(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 73)) {
    return CopyYCC_A2BGR10_to_CbCr422_10(*((const float **)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 74))
  {
    int v6 = *((_DWORD *)result + 17);
    if (v6 >= 0) {
      int v7 = *((_DWORD *)result + 17);
    }
    else {
      int v7 = v6 + 1;
    }
    return (const float *)CopyYCC_A2BGR10_to_CbCr_10(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

uint64_t ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_5_17(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return CopyYCC_A2RGB10_to_Y_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 72)) {
    return CopyYCC_A2RGB10_to_CbCr444_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 73)) {
    return CopyYCC_A2RGB10_to_CbCr422_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 74))
  {
    int v6 = *(_DWORD *)(result + 68);
    if (v6 >= 0) {
      int v7 = *(_DWORD *)(result + 68);
    }
    else {
      int v7 = v6 + 1;
    }
    return CopyYCC_A2RGB10_to_CbCr_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

uint64_t ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_6(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return CopyYCC_A2RGB10_to_Y_10(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 72)) {
    return CopyYCC_A2RGB10_to_CbCr444_10(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 73)) {
    return CopyYCC_A2RGB10_to_CbCr422_10(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 74))
  {
    int v6 = *(_DWORD *)(result + 68);
    if (v6 >= 0) {
      int v7 = *(_DWORD *)(result + 68);
    }
    else {
      int v7 = v6 + 1;
    }
    return CopyYCC_A2RGB10_to_CbCr_10(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

short float *___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_7(short float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return (short float *)CopyYCC444_to_Y_half(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 72)) {
    return (short float *)CopyYCC444_to_CbCr444_half(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 73)) {
    return (short float *)CopyYCC444_to_CbCr422_half(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 74))
  {
    int v6 = *((_DWORD *)result + 17);
    if (v6 >= 0) {
      int v7 = *((_DWORD *)result + 17);
    }
    else {
      int v7 = v6 + 1;
    }
    return CopyYCC444_to_CbCr_half(*((short float **)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

__int16 *___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_8(__int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return CopyYCC444_to_Y_16(*((__int16 **)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 72)) {
    return (__int16 *)CopyYCC444_to_CbCr444_16(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 73)) {
    return (__int16 *)CopyYCC444_to_CbCr422_16(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 74))
  {
    int v6 = *((_DWORD *)result + 17);
    if (v6 >= 0) {
      int v7 = *((_DWORD *)result + 17);
    }
    else {
      int v7 = v6 + 1;
    }
    return (__int16 *)CopyYCC444_to_CbCr_16(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

uint64_t ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_9(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return CopyYCC444_to_Y_8(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 72)) {
    return CopyYCC444_to_CbCr444_8(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 73)) {
    return CopyYCC444_to_CbCr422_8(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 74))
  {
    int v6 = *(_DWORD *)(result + 68);
    if (v6 >= 0) {
      int v7 = *(_DWORD *)(result + 68);
    }
    else {
      int v7 = v6 + 1;
    }
    return CopyYCC444_to_CbCr_8(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_25(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a1 + 56);
  if (*(void *)(a1 + 72) >= (unint64_t)(a4 - v7)) {
    uint64_t v8 = a4 - v7;
  }
  else {
    uint64_t v8 = *(void *)(a1 + 72);
  }
  int v10 = *(CI::Bitmap **)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  if (*(void *)(a1 + 80) >= (unint64_t)(a5 - v9)) {
    uint64_t v11 = a5 - v9;
  }
  else {
    uint64_t v11 = *(void *)(a1 + 80);
  }
  CI::Bitmap::Bitmap(v13, a2 + v9 * a6 + *(void *)(a1 + 64) * v7, v8, v11, a6, *(unsigned int *)(a1 + 144), *(void *)(a1 + 88));
  v14.origin.CGFloat x = *(CGFloat *)(a1 + 96);
  v14.origin.CGFloat y = *(CGFloat *)(a1 + 104);
  v14.size.double width = (double)v13[10];
  v14.size.double height = (double)v13[11];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CI::image_render_to_bitmap(*(CI **)(a1 + 128), *(CI::Context **)(a1 + 136), *(CI::Image **)(a1 + 88), v14, (CGColorSpace *)v13, v10, v12);
  CI::Bitmap::~Bitmap((CI::Bitmap *)v13);
}

uint64_t CI::RenderToPixelBuffer::type(CI::RenderToPixelBuffer *this)
{
  return 82;
}

uint64_t CI::RenderToPixelBuffer::pointer(CI::RenderToPixelBuffer *this)
{
  return *((void *)this + 6);
}

size_t CI::RenderToPixelBuffer::width(CVPixelBufferRef *this)
{
  return CVPixelBufferGetWidth(this[6]);
}

size_t CI::RenderToPixelBuffer::height(CVPixelBufferRef *this)
{
  return CVPixelBufferGetHeight(this[6]);
}

uint64_t non-virtual thunk to'CI::RenderToPixelBuffer::type(CI::RenderToPixelBuffer *this)
{
  return 82;
}

uint64_t CI::InstanceCounted<(CI::Type)82>::type()
{
  return 82;
}

void *CI::InstanceCounted<(CI::Type)82>::~InstanceCounted(void *result)
{
  *float result = &unk_1EE45B250;
  atomic_fetch_add(&dword_1EB466F58[24], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)82>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B250;
  atomic_fetch_add(&dword_1EB466F58[24], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void CI::RenderToSurface::~RenderToSurface(CI::RenderToSurface *this)
{
  *(void *)this = &unk_1EE45B4C0;
  *((void *)this + 5) = &unk_1EE45B518;
  int32x4_t v2 = (const void *)*((void *)this + 6);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 5) = &unk_1EE456D58;
  atomic_fetch_add(&dword_1EB466F58[25], 0xFFFFFFFF);

  CI::RenderDestination::~RenderDestination(this);
}

{
  uint64_t vars8;

  CI::RenderToSurface::~RenderToSurface(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::RenderToSurface::~RenderToSurface(CI::RenderToSurface *this)
{
}

{
  uint64_t vars8;

  CI::RenderToSurface::~RenderToSurface((CI::RenderToSurface *)((char *)this - 40));

  JUMPOUT(0x1997023B0);
}

CFStringRef CI::RenderToSurface::description(CI::RenderToSurface *this)
{
  return CFStringCreateWithFormat(0, 0, @"surface: %p", *((void *)this + 6));
}

void ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_4(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_5(uint64_t a1, void *__b, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 32);
  int v7 = *(_DWORD *)(a1 + 40);
  if (v7 > 1799)
  {
    if (v7 == 2056)
    {
      uint64_t v8 = *(__IOSurface **)(v6 + 48);
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 0x40000000;
      _OWORD v17[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_7;
      void v17[3] = &__block_descriptor_tmp_20_2;
      v17[4] = a2;
      _OWORD v17[5] = a4;
      v17[6] = a5;
      v17[7] = a6;
      v17[8] = *(void *)(a1 + 44);
      char v18 = *(unsigned char *)(a1 + 53);
      __int16 v19 = *(_WORD *)(a1 + 54);
      uint64_t v9 = v17;
      goto LABEL_17;
    }
    if (v7 != 1800) {
      goto LABEL_13;
    }
    uint64_t v8 = *(__IOSurface **)(v6 + 48);
    if (*(unsigned char *)(a1 + 52))
    {
      v32[0] = MEMORY[0x1E4F143A8];
      v32[1] = 0x40000000;
      v32[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2_11;
      v32[3] = &__block_descriptor_tmp_12_3;
      v32[4] = a2;
      int64x2_t v32[5] = a4;
      v32[6] = a5;
      v32[7] = a6;
      v32[8] = *(void *)(a1 + 44);
      char v33 = *(unsigned char *)(a1 + 53);
      __int16 v34 = *(_WORD *)(a1 + 54);
      uint64_t v9 = v32;
    }
    else
    {
      v14[0] = MEMORY[0x1E4F143A8];
      v14[1] = 0x40000000;
      void v14[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_8;
      v14[3] = &__block_descriptor_tmp_21_2;
      v14[4] = a2;
      void v14[5] = a4;
      v14[6] = a5;
      v14[7] = a6;
      v14[8] = *(void *)(a1 + 44);
      char v15 = *(unsigned char *)(a1 + 53);
      __int16 v16 = *(_WORD *)(a1 + 54);
      uint64_t v9 = v14;
    }
  }
  else
  {
    if (v7 != 784)
    {
      if (v7 == 785)
      {
        uint64_t v8 = *(__IOSurface **)(v6 + 48);
        if (*(unsigned char *)(a1 + 52))
        {
          v29[0] = MEMORY[0x1E4F143A8];
          v29[1] = 0x40000000;
          v29[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3_13;
          void v29[3] = &__block_descriptor_tmp_14_3;
          _OWORD v29[4] = a2;
          int64x2_t v29[5] = a4;
          v29[6] = a5;
          v29[7] = a6;
          v29[8] = *(void *)(a1 + 44);
          char v30 = *(unsigned char *)(a1 + 53);
          __int16 v31 = *(_WORD *)(a1 + 54);
          uint64_t v9 = v29;
        }
        else
        {
          v26[0] = MEMORY[0x1E4F143A8];
          v26[1] = 0x40000000;
          v26[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_4_15;
          void v26[3] = &__block_descriptor_tmp_16_4;
          v26[4] = a2;
          v26[5] = a4;
          double v26[6] = a5;
          v26[7] = a6;
          v26[8] = *(void *)(a1 + 44);
          char v27 = *(unsigned char *)(a1 + 53);
          __int16 v28 = *(_WORD *)(a1 + 54);
          uint64_t v9 = v26;
        }
        goto LABEL_17;
      }
LABEL_13:
      uint64_t v8 = *(__IOSurface **)(v6 + 48);
      v11[0] = MEMORY[0x1E4F143A8];
      v11[1] = 0x40000000;
      _OWORD v11[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_9;
      uint64_t v11[3] = &__block_descriptor_tmp_22_2;
      double v11[4] = a2;
      void v11[5] = a4;
      void v11[6] = a5;
      v11[7] = a6;
      v11[8] = *(void *)(a1 + 44);
      char v12 = *(unsigned char *)(a1 + 53);
      __int16 v13 = *(_WORD *)(a1 + 54);
      uint64_t v9 = v11;
      goto LABEL_17;
    }
    uint64_t v8 = *(__IOSurface **)(v6 + 48);
    if (*(unsigned char *)(a1 + 52))
    {
      v23[0] = MEMORY[0x1E4F143A8];
      v23[1] = 0x40000000;
      v23[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_5_17;
      unsigned __int16 v23[3] = &__block_descriptor_tmp_18_1;
      _OWORD v23[4] = a2;
      void v23[5] = a4;
      v23[6] = a5;
      v23[7] = a6;
      void v23[8] = *(void *)(a1 + 44);
      char v24 = *(unsigned char *)(a1 + 53);
      __int16 v25 = *(_WORD *)(a1 + 54);
      uint64_t v9 = v23;
    }
    else
    {
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 0x40000000;
      _OWORD v20[2] = ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_6;
      void v20[3] = &__block_descriptor_tmp_19_4;
      v20[4] = a2;
      void v20[5] = a4;
      void v20[6] = a5;
      v20[7] = a6;
      void v20[8] = *(void *)(a1 + 44);
      char v21 = *(unsigned char *)(a1 + 53);
      __int16 v22 = *(_WORD *)(a1 + 54);
      uint64_t v9 = v20;
    }
  }
LABEL_17:
  if (SurfaceApplyPlaneBlock(v8, (uint64_t)v9))
  {
    int v10 = ci_logger_api();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_10_cold_1(v10);
    }
  }
}

unsigned __int16 *___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_2_11(unsigned __int16 *result, uint64_t a2, uint64_t a3, double a4, double a5, float a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a3) {
    return CopyYCC444_to_Y_10packed(*((unsigned __int16 **)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a9);
  }
  if (*((unsigned char *)result + 72)) {
    return (unsigned __int16 *)CopyYCC444_to_CbCr444_10packed(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a9, a4, a5, a6);
  }
  if (*((unsigned char *)result + 73)) {
    return (unsigned __int16 *)CopyYCC444_to_CbCr422_10packed(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, *((int *)result + 17), a9);
  }
  if (*((unsigned char *)result + 74))
  {
    int v9 = *((_DWORD *)result + 17);
    if (v9 >= 0) {
      int v10 = *((_DWORD *)result + 17);
    }
    else {
      int v10 = v9 + 1;
    }
    return (unsigned __int16 *)CopyYCC444_to_CbCr_10packed(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, (uint64_t)v10 >> 1, a9);
  }
  return result;
}

uint64_t ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_3_13(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return CopyYCC_A2BGR10_to_Y_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 72)) {
    return CopyYCC_A2BGR10_to_CbCr444_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 73)) {
    return CopyYCC_A2BGR10_to_CbCr422_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 74))
  {
    int v6 = *(_DWORD *)(result + 68);
    if (v6 >= 0) {
      int v7 = *(_DWORD *)(result + 68);
    }
    else {
      int v7 = v6 + 1;
    }
    return CopyYCC_A2BGR10_to_CbCr_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

const float *___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_4_15(const float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return (const float *)CopyYCC_A2BGR10_to_Y_10(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 72)) {
    return (const float *)CopyYCC_A2BGR10_to_CbCr444_10(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 73)) {
    return CopyYCC_A2BGR10_to_CbCr422_10(*((const float **)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 74))
  {
    int v6 = *((_DWORD *)result + 17);
    if (v6 >= 0) {
      int v7 = *((_DWORD *)result + 17);
    }
    else {
      int v7 = v6 + 1;
    }
    return (const float *)CopyYCC_A2BGR10_to_CbCr_10(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

uint64_t ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_5_17(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return CopyYCC_A2RGB10_to_Y_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 72)) {
    return CopyYCC_A2RGB10_to_CbCr444_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 73)) {
    return CopyYCC_A2RGB10_to_CbCr422_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 74))
  {
    int v6 = *(_DWORD *)(result + 68);
    if (v6 >= 0) {
      int v7 = *(_DWORD *)(result + 68);
    }
    else {
      int v7 = v6 + 1;
    }
    return CopyYCC_A2RGB10_to_CbCr_10p(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

uint64_t ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_6(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return CopyYCC_A2RGB10_to_Y_10(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 72)) {
    return CopyYCC_A2RGB10_to_CbCr444_10(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 73)) {
    return CopyYCC_A2RGB10_to_CbCr422_10(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 74))
  {
    int v6 = *(_DWORD *)(result + 68);
    if (v6 >= 0) {
      int v7 = *(_DWORD *)(result + 68);
    }
    else {
      int v7 = v6 + 1;
    }
    return CopyYCC_A2RGB10_to_CbCr_10(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

short float *___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_7(short float *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return (short float *)CopyYCC444_to_Y_half(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 72)) {
    return (short float *)CopyYCC444_to_CbCr444_half(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 73)) {
    return (short float *)CopyYCC444_to_CbCr422_half(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 74))
  {
    int v6 = *((_DWORD *)result + 17);
    if (v6 >= 0) {
      int v7 = *((_DWORD *)result + 17);
    }
    else {
      int v7 = v6 + 1;
    }
    return CopyYCC444_to_CbCr_half(*((short float **)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

__int16 *___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_8(__int16 *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return CopyYCC444_to_Y_16(*((__int16 **)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 72)) {
    return (__int16 *)CopyYCC444_to_CbCr444_16(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, *((int *)result + 16), *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 73)) {
    return (__int16 *)CopyYCC444_to_CbCr422_16(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, *((int *)result + 17), a6);
  }
  if (*((unsigned char *)result + 74))
  {
    int v6 = *((_DWORD *)result + 17);
    if (v6 >= 0) {
      int v7 = *((_DWORD *)result + 17);
    }
    else {
      int v7 = v6 + 1;
    }
    return (__int16 *)CopyYCC444_to_CbCr_16(*((void *)result + 4), *((void *)result + 5), *((void *)result + 6), *((void *)result + 7), a2, (uint64_t)(*((_DWORD *)result + 16) + (*((int *)result + 16) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

uint64_t ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_9(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a3) {
    return CopyYCC444_to_Y_8(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 72)) {
    return CopyYCC444_to_CbCr444_8(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, *(int *)(result + 64), *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 73)) {
    return CopyYCC444_to_CbCr422_8(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, *(int *)(result + 68), a6);
  }
  if (*(unsigned char *)(result + 74))
  {
    int v6 = *(_DWORD *)(result + 68);
    if (v6 >= 0) {
      int v7 = *(_DWORD *)(result + 68);
    }
    else {
      int v7 = v6 + 1;
    }
    return CopyYCC444_to_CbCr_8(*(void *)(result + 32), *(void *)(result + 40), *(void *)(result + 48), *(void *)(result + 56), a2, (uint64_t)(*(_DWORD *)(result + 64) + (*(int *)(result + 64) < 0)) >> 1, (uint64_t)v7 >> 1, a6);
  }
  return result;
}

uint64_t CI::RenderToSurface::type(CI::RenderToSurface *this)
{
  return 83;
}

uint64_t non-virtual thunk to'CI::RenderToSurface::type(CI::RenderToSurface *this)
{
  return 83;
}

uint64_t CI::InstanceCounted<(CI::Type)83>::type()
{
  return 83;
}

void *CI::InstanceCounted<(CI::Type)83>::~InstanceCounted(void *result)
{
  *float result = &unk_1EE456D58;
  atomic_fetch_add(&dword_1EB466F58[25], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)83>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE456D58;
  atomic_fetch_add(&dword_1EB466F58[25], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::RenderToGLTexture::RenderToGLTexture(uint64_t this, int a2, int a3, const CGSize *a4)
{
  *(_DWORD *)(this + 8) = 1;
  *(void *)(this + 16) = 0;
  *(void *)(this + 24) = 0;
  *(_DWORD *)(this + 32) = 0;
  *(void *)this = &unk_1EE45B540;
  *(CGSize *)(this + 40) = *a4;
  *(void *)(this + 56) = &unk_1EE456D80;
  atomic_fetch_add(&dword_1EB466F58[26], 1u);
  *(void *)this = &unk_1EE45CC58;
  *(void *)(this + 56) = &unk_1EE45CCB0;
  *(_DWORD *)(this + 64) = a2;
  *(_DWORD *)(this + 68) = a3;
  return this;
}

void CI::RenderToGLTexture::~RenderToGLTexture(CI::RenderToGLTexture *this)
{
  *(void *)this = &unk_1EE45CC58;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = &unk_1EE456D80;
  atomic_fetch_add(&dword_1EB466F58[26], 0xFFFFFFFF);
  CI::RenderDestination::~RenderDestination(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE45CC58;
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 7) = &unk_1EE456D80;
  atomic_fetch_add(&dword_1EB466F58[26], 0xFFFFFFFF);
  CI::RenderDestination::~RenderDestination(this);

  JUMPOUT(0x1997023B0);
}

void non-virtual thunk to'CI::RenderToGLTexture::~RenderToGLTexture(CI::RenderToGLTexture *this)
{
  *((void *)this - 7) = &unk_1EE45CC58;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = &unk_1EE456D80;
  atomic_fetch_add(&dword_1EB466F58[26], 0xFFFFFFFF);
  CI::RenderDestination::~RenderDestination((CI::RenderToGLTexture *)((char *)this - 56));
}

{
  CI::RenderToGLTexture::~RenderToGLTexture((CI::RenderToGLTexture *)((char *)this - 56));
}

CFStringRef CI::RenderToGLTexture::description(CI::RenderToGLTexture *this)
{
  return CFStringCreateWithFormat(0, 0, @"gltexture: %u", *((unsigned int *)this + 16));
}

void CI::RenderToGLTexture::render(CI::RenderToGLTexture *this, CI::Image *a2, CI::Context *a3)
{
  if ((*(unsigned int (**)(CI::Context *))(*(void *)a3 + 16))(a3) == 76)
  {
    long long v6 = *((_OWORD *)this + 4);
    CI::RenderToTexture<CI::Texture>::render_to_texture(this, a2, (char *)a3, (uint64_t)this + 40, &v6);
  }
  operator new();
}

void sub_193912DE8(_Unwind_Exception *a1)
{
  MEMORY[0x1997023B0](v1, 0x10F1C40D5E332FALL);
  _Unwind_Resume(a1);
}

void CI::RenderToTexture<CI::Texture>::render_to_texture(CI::Image *a1, CI::Context *a2, char *a3, uint64_t a4, long long *a5)
{
  long long v10 = *a5;
  char v8 = (*(uint64_t (**)(char *, long long *, uint64_t))(*(void *)a3 + 368))(a3, &v10, a4);
  long long v10 = 0uLL;
  if (v8) {
    CI::image_render((CI *)"render_to_texture", a3, a2, a1, v9);
  }
  operator new();
}

void sub_193912F14(_Unwind_Exception *a1)
{
  MEMORY[0x1997023B0](v1, 0x10F1C40D5E332FALL);
  _Unwind_Resume(a1);
}

uint64_t CI::RenderToMTLTexture::RenderToMTLTexture(uint64_t a1, CFTypeRef cf, uint64_t a3, _OWORD *a4, int a5)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1EE45B540;
  *(_OWORD *)(a1 + 40) = *a4;
  *(_DWORD *)(a1 + 32) = a5;
  *(void *)(a1 + 56) = &unk_1EE45B278;
  atomic_fetch_add(&dword_1EB466F58[27], 1u);
  *(void *)a1 = &unk_1EE45CEF0;
  *(void *)(a1 + 56) = &unk_1EE45CF48;
  *(void *)(a1 + 64) = a3;
  if (cf) {
    CFTypeRef v6 = CFRetain(cf);
  }
  else {
    CFTypeRef v6 = 0;
  }
  *(void *)(a1 + 72) = v6;
  *(void *)(a1 + 80) = 0;
  return a1;
}

void sub_193913020(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  *((void *)v1 + 7) = v2;
  atomic_fetch_add((atomic_uint *volatile)(v4 + 340), 0xFFFFFFFF);
  CI::RenderDestination::~RenderDestination(v1);
  _Unwind_Resume(a1);
}

void CI::RenderToMTLTexture::~RenderToMTLTexture(CI::RenderToMTLTexture *this)
{
  *(void *)this = &unk_1EE45CEF0;
  *((void *)this + 7) = &unk_1EE45CF48;
  uint64_t v3 = (void *)((char *)this + 72);
  uint64_t v2 = (const void *)*((void *)this + 9);
  if (v2) {
    CFRelease(v2);
  }
  *uint64_t v3 = 0;
  v3[1] = 0;
  *((void *)this + 7) = &unk_1EE45B278;
  atomic_fetch_add(&dword_1EB466F58[27], 0xFFFFFFFF);

  CI::RenderDestination::~RenderDestination(this);
}

{
  uint64_t vars8;

  CI::RenderToMTLTexture::~RenderToMTLTexture(this);

  JUMPOUT(0x1997023B0);
}

void sub_193913108(_Unwind_Exception *a1)
{
  *uint64_t v2 = 0;
  v2[1] = 0;
  *((void *)v1 + 7) = &unk_1EE45B278;
  atomic_fetch_add(&dword_1EB466F58[27], 0xFFFFFFFF);
  CI::RenderDestination::~RenderDestination(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'CI::RenderToMTLTexture::~RenderToMTLTexture(CI::RenderToMTLTexture *this)
{
}

{
  uint64_t vars8;

  CI::RenderToMTLTexture::~RenderToMTLTexture((CI::RenderToMTLTexture *)((char *)this - 56));

  JUMPOUT(0x1997023B0);
}

CFStringRef CI::RenderToMTLTexture::description(CI::RenderToMTLTexture *this)
{
  return CFStringCreateWithFormat(0, 0, @"mtltexture: %p", *((void *)this + 9));
}

void CI::RenderToMTLTexture::render(id *this, CI::Image *a2, id *a3)
{
  if ((*((unsigned int (**)(id *))*a3 + 2))(a3) == 77)
  {
    CI::MetalContext::device(a3);
    [this[9] pixelFormat];
    uint64_t v16 = 0;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v13 = 0u;
    MTLPixelFormatGetInfoForDevice();
    operator new();
  }
  if (!this[8])
  {
    uint64_t v6 = [this[9] iosurface];
    if (v6)
    {
      int v7 = (__IOSurface *)v6;
      (*(void (**)(CI::Image *))(*(void *)a2 + 88))(a2);
      CI::image_render_to_surface((CI *)a3, a2, v7, *(CGRect *)&v9, (__IOSurface *)this, v8);
    }
  }
  operator new();
}

void sub_1939133EC(_Unwind_Exception *a1)
{
  MEMORY[0x1997023B0](v1, 0x10F1C40D5E332FALL);
  _Unwind_Resume(a1);
}

uint64_t CI::RenderToMTLTextureProvider::RenderToMTLTextureProvider(uint64_t a1, void *aBlock, uint64_t a3, _OWORD *a4, int a5)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)a1 = &unk_1EE45B598;
  *(_OWORD *)(a1 + 40) = *a4;
  *(_DWORD *)(a1 + 32) = a5;
  *(void *)(a1 + 56) = &unk_1EE456AA8;
  atomic_fetch_add(&dword_1EB466F58[30], 1u);
  *(void *)a1 = &unk_1EE45D738;
  *(void *)(a1 + 56) = &unk_1EE45D790;
  *(void *)(a1 + 64) = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = _Block_copy(aBlock);
  return a1;
}

void sub_193913500(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;
  *((void *)v1 + 7) = v2;
  atomic_fetch_add(v4, 0xFFFFFFFF);
  CI::RenderDestination::~RenderDestination(v1);
  _Unwind_Resume(a1);
}

void CI::RenderToMTLTextureProvider::~RenderToMTLTextureProvider(CI::RenderToMTLTextureProvider *this)
{
  *(void *)this = &unk_1EE45D738;
  *((void *)this + 7) = &unk_1EE45D790;
  uint64_t v2 = (const void *)*((void *)this + 10);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 10) = 0;
  _Block_release(*((const void **)this + 9));
  *((void *)this + 7) = &unk_1EE456AA8;
  atomic_fetch_add(&dword_1EB466F58[30], 0xFFFFFFFF);

  CI::RenderDestination::~RenderDestination(this);
}

{
  uint64_t vars8;

  CI::RenderToMTLTextureProvider::~RenderToMTLTextureProvider(this);

  JUMPOUT(0x1997023B0);
}

void sub_1939135E0(_Unwind_Exception *a1)
{
  *((void *)v1 + 7) = &unk_1EE456AA8;
  atomic_fetch_add(&dword_1EB466F58[30], 0xFFFFFFFF);
  CI::RenderDestination::~RenderDestination(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'CI::RenderToMTLTextureProvider::~RenderToMTLTextureProvider(CI::RenderToMTLTextureProvider *this)
{
}

{
  uint64_t vars8;

  CI::RenderToMTLTextureProvider::~RenderToMTLTextureProvider((CI::RenderToMTLTextureProvider *)((char *)this - 56));

  JUMPOUT(0x1997023B0);
}

CFStringRef CI::RenderToMTLTextureProvider::description(CI::RenderToMTLTextureProvider *this)
{
  return CFStringCreateWithFormat(0, 0, @"mtltexprov: %p", *((void *)this + 9));
}

void CI::RenderToMTLTextureProvider::render(CI::RenderToMTLTextureProvider *this, CI::Image *a2, CI::Context *a3)
{
  if ((*(unsigned int (**)(CI::Context *))(*(void *)a3 + 16))(a3) == 77)
  {
    uint64_t v6 = (const void *)*((void *)this + 8);
    if (v6) {
      CI::MetalContext::set_command_buffer(a3, v6);
    }
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = ___ZNK2CI26RenderToMTLTextureProvider6renderEPNS_5ImageEPNS_7ContextE_block_invoke;
    v7[3] = &__block_descriptor_40_e33__Texture____Q___II_____v_v___8__0l;
    _OWORD v7[4] = this;
    CI::RenderToTexture<CI::Texture({block_pointer})(void)>::render_to_texture(this, a2, (char *)a3, (uint64_t)this + 40, (uint64_t)v7);
  }
  operator new();
}

void sub_1939137FC(_Unwind_Exception *a1)
{
  MEMORY[0x1997023B0](v1, 0x10F1C40D5E332FALL);
  _Unwind_Resume(a1);
}

void CI::RenderToTexture<CI::Texture({block_pointer})(void)>::render_to_texture(CI::Image *a1, CI::Context *a2, char *a3, uint64_t a4, uint64_t a5)
{
  if ((*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)a3 + 400))(a3, a5, a4)) {
    CI::image_render((CI *)"render_to_texture", a3, a2, a1, v8);
  }
  operator new();
}

void sub_193913918(_Unwind_Exception *a1)
{
  MEMORY[0x1997023B0](v1, 0x10F1C40D5E332FALL);
  _Unwind_Resume(a1);
}

const void *___ZNK2CI26RenderToMTLTextureProvider6renderEPNS_5ImageEPNS_7ContextE_block_invoke@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  float result = CI::RenderToMTLTextureProvider::texture(*(CI::RenderToMTLTextureProvider **)(a1 + 32));
  *a2 = result;
  a2[1] = 0;
  return result;
}

uint64_t CI::RenderToGLTexture::type(CI::RenderToGLTexture *this)
{
  return 84;
}

unint64_t CI::RenderToTexture<CI::Texture>::width(uint64_t a1)
{
  return (unint64_t)*(double *)(a1 + 40);
}

unint64_t CI::RenderToTexture<CI::Texture>::height(uint64_t a1)
{
  return (unint64_t)*(double *)(a1 + 48);
}

uint64_t non-virtual thunk to'CI::RenderToGLTexture::type(CI::RenderToGLTexture *this)
{
  return 84;
}

uint64_t CI::RenderToMTLTexture::type(CI::RenderToMTLTexture *this)
{
  return 85;
}

uint64_t CI::RenderToMTLTexture::pointer(CI::RenderToMTLTexture *this)
{
  return *((void *)this + 9);
}

uint64_t non-virtual thunk to'CI::RenderToMTLTexture::type(CI::RenderToMTLTexture *this)
{
  return 85;
}

uint64_t CI::RenderToMTLTextureProvider::type(CI::RenderToMTLTextureProvider *this)
{
  return 88;
}

uint64_t CI::RenderToMTLTextureProvider::pointer(CI::RenderToMTLTextureProvider *this)
{
  return *((void *)this + 10);
}

unint64_t CI::RenderToTexture<CI::Texture({block_pointer})(void)>::width(uint64_t a1)
{
  return (unint64_t)*(double *)(a1 + 40);
}

unint64_t CI::RenderToTexture<CI::Texture({block_pointer})(void)>::height(uint64_t a1)
{
  return (unint64_t)*(double *)(a1 + 48);
}

uint64_t non-virtual thunk to'CI::RenderToMTLTextureProvider::type(CI::RenderToMTLTextureProvider *this)
{
  return 88;
}

uint64_t CI::InstanceCounted<(CI::Type)84>::type()
{
  return 84;
}

void *CI::InstanceCounted<(CI::Type)84>::~InstanceCounted(void *result)
{
  *float result = &unk_1EE456D80;
  atomic_fetch_add(&dword_1EB466F58[26], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)84>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE456D80;
  atomic_fetch_add(&dword_1EB466F58[26], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)85>::type()
{
  return 85;
}

void *CI::InstanceCounted<(CI::Type)85>::~InstanceCounted(void *result)
{
  *float result = &unk_1EE45B278;
  atomic_fetch_add(&dword_1EB466F58[27], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)85>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B278;
  atomic_fetch_add(&dword_1EB466F58[27], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)88>::type()
{
  return 88;
}

void *CI::InstanceCounted<(CI::Type)88>::~InstanceCounted(void *result)
{
  *float result = &unk_1EE456AA8;
  atomic_fetch_add(&dword_1EB466F58[30], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)88>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE456AA8;
  atomic_fetch_add(&dword_1EB466F58[30], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void CI::dump_optimized_graph(uint64_t a1, uint64_t a2, uint64_t a3, CI::GraphObject *a4, void *a5, int a6)
{
  uint64_t v84 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    CFStringRef v9 = *(const __CFString **)(a2 + 16);
    if (v9) {
      CFStringRef v10 = CFStringCreateWithFormat(0, 0, @"destination=%@\n", *(void *)(a2 + 16));
    }
    else {
      CFStringRef v10 = &stru_1EE465CC0;
    }
    if ((*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2))
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
      CFStringRef v14 = CFStringCreateWithFormat(0, 0, @" %p", v13);
    }
    else
    {
      CFStringRef v14 = &stru_1EE465CC0;
    }
    CFStringRef theString = v9;
    BOOL v41 = v9 == 0;
    unsigned int v44 = (__CFString *)v10;
    if (a6) {
      int v12 = a6;
    }
    else {
      int v12 = *(_DWORD *)(a2 + 32);
    }
    uint64_t v11 = (__CFString *)v14;
  }
  else
  {
    CFStringRef theString = 0;
    BOOL v41 = 1;
    uint64_t v11 = &stru_1EE465CC0;
    unsigned int v44 = &stru_1EE465CC0;
    int v12 = a6;
  }
  long long v15 = CI::name_for_format(v12);
  if (*(_DWORD *)(a1 + 344)) {
    uint64_t v16 = "prepare";
  }
  else {
    uint64_t v16 = "";
  }
  uint32x4_t v45 = v15;
  int v46 = v16;
  int v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 264))(a1);
  char v18 = "highp ";
  if (v17 != 1) {
    char v18 = "";
  }
  if (v17 == -1) {
    __int16 v19 = "lowp ";
  }
  else {
    __int16 v19 = v18;
  }
  uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 304))(a1);
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
  if (*(unsigned char *)(a1 + 236)) {
    __int16 v22 = ":";
  }
  else {
    __int16 v22 = "";
  }
  uint64_t v23 = *(void *)(a1 + 152);
  char v24 = CI::name_for_format(*(_DWORD *)(a1 + 32));
  int v25 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 168))(a1);
  CGFloat v26 = "(lossyAllowed)";
  if (!v25) {
    CGFloat v26 = "";
  }
  char v27 = (CI::GraphObject *)CFStringCreateWithFormat(0, 0, @"optimized graph %s\n%s%@\n(%s%s context %d%s%s frame %lu)\n%@workingFormat=%s%s\nformat=%s\nroi=[%g %g %g %g]", v46, a3, v11, v19, v20, v21, v22, a1 + 236, v23, v44, v24, v26, v45, *a5, a5[1], a5[2],
                             a5[3]);
  unint64_t v29 = CI::GraphObject::graphviz_representation(a4, v27, 0, v28);
  if (v29)
  {
    char v30 = v29;
    long long v82 = 0u;
    long long v83 = 0u;
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    long long v70 = 0u;
    long long v71 = 0u;
    *(_OWORD *)__dst = 0u;
    long long v69 = 0u;
    if (v41)
    {
      strlcpy(__dst, (const char *)(a1 + 236), 0x100uLL);
      int v31 = a6;
      uint64_t v32 = a2;
      CFStringRef v33 = theString;
    }
    else
    {
      CFStringRef v33 = theString;
      CFStringGetCString(theString, __dst, 256, 0x8000100u);
      int v31 = a6;
      uint64_t v32 = a2;
    }
    __int16 v34 = "";
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    long long v62 = 0u;
    long long v63 = 0u;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    *(_OWORD *)__str = 0u;
    long long v53 = 0u;
    pid_t v35 = getpid();
    if (__dst[0]) {
      __int16 v34 = "_";
    }
    int v36 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 272))(a1);
    snprintf(__str, 0x100uLL, "%d%s%s_%d_%lu_optimized_graph", v35, v34, __dst, v36, *(void *)(a1 + 152));
    int v37 = (FILE *)CI_LOG_FILE();
    v50[0] = MEMORY[0x1E4F143A8];
    v50[1] = 0x40000000;
    v50[2] = ___ZN2CIL20dump_optimized_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke;
    v50[3] = &__block_descriptor_tmp_80;
    v50[4] = v33;
    v50[5] = __dst;
    v50[6] = a1;
    v50[7] = a3;
    int v51 = v31;
    unsigned char v50[8] = v32;
    v50[9] = a5;
    v50[10] = __str;
    stream_to_file(v37, (uint64_t)v50);
    if (CI::format_for_graphviz(void)::onceToken != -1) {
      dispatch_once(&CI::format_for_graphviz(void)::onceToken, &__block_literal_global_84_2);
    }
    unsigned int v38 = CI::format_for_graphviz(void)::fmt;
    uint64_t v39 = CI_TEMP_DIR();
    CIGVDumpToFile(v30, v38, (uint64_t)v39, (uint64_t)__str);
    CFRelease(v27);
    CFRelease(v30);
    CFRelease(v44);
    CFRelease(v11);
  }
  else
  {
    CFRelease(v44);
    CFRelease(v11);
    CFRelease(v27);
  }
}

void CI::print_optimized_graph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  int v12 = (FILE *)CI_LOG_FILE();
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 0x40000000;
  v13[2] = ___ZN2CIL21print_optimized_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke;
  void v13[3] = &__block_descriptor_tmp_95_1;
  v13[4] = a2;
  int64x2_t v13[5] = a1;
  int v14 = a6;
  v13[6] = a3;
  v13[7] = a5;
  uint8_t v13[8] = a4;
  stream_to_file(v12, (uint64_t)v13);
}

__n128 ___ZN2CI21prepare_initial_graphEPNS_7ContextEPKcPNS_5ImageEPKNS_17RenderDestinationE6CGRectP12CGColorSpaceNS_11PixelFormatENS_19output_swizzle_infoERKNS_6AffineEbPNS_17TextureDescriptorE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  CFNumberRef v5 = *(void **)(v2 + 8);
  uint64_t v3 = (void *)(v2 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unint64_t v6 = *(void *)(a2 + 80);
    int v7 = v3;
    do
    {
      unint64_t v8 = v4[4];
      BOOL v9 = v8 >= v6;
      if (v8 >= v6) {
        CFStringRef v10 = v4;
      }
      else {
        CFStringRef v10 = v4 + 1;
      }
      if (v9) {
        int v7 = v4;
      }
      uint64_t v4 = (void *)*v10;
    }
    while (*v10);
    if (v7 != v3 && v6 >= v7[4])
    {
      __n128 result = *(__n128 *)(v7 + 5);
      long long v12 = *(_OWORD *)(v7 + 7);
      *(__n128 *)(a2 + 16) = result;
      *(_OWORD *)(a2 + 32) = v12;
    }
  }
  return result;
}

__n128 ___ZN2CI21prepare_initial_graphEPNS_7ContextEPKcPNS_5ImageEPKNS_17RenderDestinationE6CGRectP12CGColorSpaceNS_11PixelFormatENS_19output_swizzle_infoERKNS_6AffineEbPNS_17TextureDescriptorE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)MEMORY[0x1E4F1DB20];
  long long v3 = *(_OWORD *)(MEMORY[0x1E4F1DB20] + 16);
  *(_OWORD *)(a2 + 16) = *MEMORY[0x1E4F1DB20];
  *(_OWORD *)(a2 + 32) = v3;
  return result;
}

uint64_t *__copy_helper_block_8_32c120_ZTSNSt3__13mapIN2CI10ImageIndexENS1_30ImageDigestForRenderGraphCacheENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 32) = a1 + 40;
  uint64_t v2 = (uint64_t *)(a1 + 32);
  v2[2] = 0;
  return std::map<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::__tree_node<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,void *> *,long>>>(v2, *(unsigned int **)(a2 + 32), (unsigned int *)(a2 + 40));
}

void __destroy_helper_block_8_32c120_ZTSNSt3__13mapIN2CI10ImageIndexENS1_30ImageDigestForRenderGraphCacheENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE(uint64_t a1)
{
}

uint64_t *__copy_helper_block_8_40c120_ZTSNSt3__13mapIN2CI10ImageIndexENS1_30ImageDigestForRenderGraphCacheENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 40) = a1 + 48;
  uint64_t v2 = (uint64_t *)(a1 + 40);
  v2[2] = 0;
  return std::map<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>::insert[abi:nn180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,std::__tree_node<std::__value_type<CI::ImageIndex,CI::ImageDigestForRenderGraphCache>,void *> *,long>>>(v2, *(unsigned int **)(a2 + 40), (unsigned int *)(a2 + 48));
}

void __destroy_helper_block_8_40c120_ZTSNSt3__13mapIN2CI10ImageIndexENS1_30ImageDigestForRenderGraphCacheENS_4lessIS2_EENS_9allocatorINS_4pairIKS2_S3_EEEEEE(uint64_t a1)
{
}

void CI::image_render(CI *this, char *a2, CI::Context *a3, CI::Image *a4, const CI::RenderDestination *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  CFAbsoluteTimeGetCurrent();
  v14.origin.CGFloat x = (*(double (**)(CI::Context *))(*(void *)a3 + 88))(a3);
  v14.origin.CGFloat y = v9;
  v14.size.double width = v10;
  v14.size.double height = v11;
  *(void *)int buf = 0x3FF0000000000000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0x3FF0000000000000;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  long long v12 = CI::prepare_initial_graph((uint64_t *)a2, (const char *)this, (unsigned int *)a3, (uint64_t)a4, 0, 0, (uint64_t)&CI::defaultSwizzle, (char *)buf, v14.origin.x, v9, v10, v11, 0, 0);
  if (v12) {
    CI::tile_node_graph((uint64_t)a2, (uint64_t)a4, (uint64_t)this, (uint64_t)v12, v13, &v14);
  }
  operator new();
}

void ___ZN2CI12image_renderEPKcPNS_7ContextEPNS_5ImageEPKNS_17RenderDestinationE_block_invoke(uint64_t a1, CI::ProgramNode *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  v6.origin.CGFloat x = a3;
  v6.origin.CGFloat y = a4;
  v6.size.double width = a5;
  v6.size.double height = a6;
  CI::Context::render(*(CI::Context **)(a1 + 32), a2, &v6);
}

uint64_t CI::image_render_to_display(uint64_t result, unsigned int *a2, int a3, CGFloat a4, CGFloat a5, CGFloat a6, CGFloat a7)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (result)
  {
    uint64_t v13 = (CI::GLContext *)result;
    __n128 result = (*(uint64_t (**)(uint64_t))(*(void *)result + 376))(result);
    if (result)
    {
      if ((*(unsigned int (**)(CI::GLContext *))(*(void *)v13 + 16))(v13) == 76) {
        a3 = CI::GLContext::user_destination_format(v13);
      }
      if (a2)
      {
        CFAbsoluteTimeGetCurrent();
        v21[0] = 0x3FF0000000000000;
        v21[1] = 0;
        void v21[2] = 0;
        v21[3] = 0x3FF0000000000000;
        *(double *)&v21[4] = -(a4 - a4);
        *(double *)&void v21[5] = -(a5 - a5);
        CGRect v14 = CI::prepare_initial_graph((uint64_t *)v13, "render_to_display", a2, 0, 0, a3, (uint64_t)&CI::defaultSwizzle, (char *)v21, a4, a5, a6, a7, 0, 0);
        if (v14)
        {
          uint64_t v16 = (uint64_t)v14;
          uint64_t v17 = v15;
          v24.origin.CGFloat x = a4;
          v24.origin.CGFloat y = a5;
          v24.size.double width = a6;
          v24.size.double height = a7;
          v22.origin.CGFloat x = CI::Affine::applyToRect((CI::Affine *)v21, v24);
          v22.origin.CGFloat y = v18;
          v22.size.double width = v19;
          v22.size.double height = v20;
          CI::tile_node_graph((uint64_t)v13, 0, (uint64_t)"render_to_display", v16, v17, &v22);
        }
      }
      return (*(uint64_t (**)(CI::GLContext *))(*(void *)v13 + 384))(v13);
    }
  }
  return result;
}

uint64_t ___ZN2CIL20dump_optimized_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke(uint64_t a1, FILE *a2)
{
  if (*(void *)(a1 + 32)) {
    fprintf(a2, "[%s] ", *(const char **)(a1 + 40));
  }
  if (*(_DWORD *)(*(void *)(a1 + 48) + 344)) {
    fprintf(a2, "optimized graph prepare %s ");
  }
  else {
    fprintf(a2, "optimized graph %s ");
  }
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 264))();
  CFNumberRef v5 = "highp ";
  if (v4 != 1) {
    CFNumberRef v5 = "";
  }
  if (v4 == -1) {
    CGRect v6 = "lowp ";
  }
  else {
    CGRect v6 = v5;
  }
  int v7 = (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 304))();
  int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 272))();
  uint64_t v9 = *(void *)(a1 + 48);
  int v11 = *(unsigned __int8 *)(v9 + 236);
  CGFloat v10 = (const char *)(v9 + 236);
  if (v11) {
    long long v12 = ":";
  }
  else {
    long long v12 = "";
  }
  fprintf(a2, "(%s%s context %d%s%s frame %lu) ", v6, v7, v8, v12, v10, *(void *)(v10 - 84));
  int v13 = *(_DWORD *)(a1 + 88);
  if (!v13)
  {
    uint64_t v14 = *(void *)(a1 + 64);
    if (v14) {
      int v13 = *(_DWORD *)(v14 + 32);
    }
    else {
      int v13 = 0;
    }
  }
  uint64_t v15 = CI::name_for_format(v13);
  fprintf(a2, "format=%s roi=", v15);
  CI::fprintf(a2, v16, *(CGRect *)*(void *)(a1 + 72));
  fwrite(" = \n", 4uLL, 1uLL, a2);
  uint64_t v17 = CI_TEMP_DIR();
  CGFloat v18 = *(const char **)(a1 + 80);
  CGFloat v19 = (const char *)CI_PRINT_TREE_graphviz();
  fprintf(a2, "  %s/%s.%s\n", v17, v18, v19);

  return fputc(10, a2);
}

uint64_t ___ZN2CIL19format_for_graphvizEv_block_invoke()
{
  uint64_t result = CI_PRINT_TREE_graphviz();
  if (result)
  {
    uint64_t v1 = (const char *)result;
    uint64_t result = strcmp((const char *)result, "pdf");
    if (result)
    {
      uint64_t result = strcmp(v1, "png");
      if (result)
      {
        uint64_t result = strcmp(v1, "dot");
        if (result) {
          return result;
        }
        int v2 = 2;
      }
      else
      {
        int v2 = 1;
      }
    }
    else
    {
      int v2 = 0;
    }
    CI::format_for_graphviz(void)::fmt = v2;
  }
  return result;
}

uint64_t ___ZN2CIL21print_optimized_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke(uint64_t a1, FILE *__stream)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    CFStringRef v5 = *(const __CFString **)(v4 + 16);
    if (v5)
    {
      fputc(91, __stream);
      CI::fprintf(__stream, v5, v6);
      fwrite("] ", 2uLL, 1uLL, __stream);
    }
  }
  fwrite("optimized graph ", 0x10uLL, 1uLL, __stream);
  if (*(_DWORD *)(*(void *)(a1 + 40) + 344)) {
    fwrite("prepare ", 8uLL, 1uLL, __stream);
  }
  fprintf(__stream, "%s ", *(const char **)(a1 + 48));
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7))
    {
      int v8 = (const void *)(*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
      fprintf(__stream, "%p ", v8);
    }
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
      uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))(*(void *)(a1 + 32));
      fprintf(__stream, "%ldx%ld ", v10, v11);
    }
  }
  int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 264))(*(void *)(a1 + 40));
  int v13 = "highp ";
  if (v12 != 1) {
    int v13 = "";
  }
  if (v12 == -1) {
    uint64_t v14 = "lowp ";
  }
  else {
    uint64_t v14 = v13;
  }
  uint64_t v15 = (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 304))();
  int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 272))();
  uint64_t v17 = *(void *)(a1 + 40);
  int v19 = *(unsigned __int8 *)(v17 + 236);
  CGFloat v18 = (const char *)(v17 + 236);
  if (v19) {
    CGFloat v20 = ":";
  }
  else {
    CGFloat v20 = "";
  }
  fprintf(__stream, "(%s%s context %d%s%s frame %lu) ", v14, v15, v16, v20, v18, *(void *)(v18 - 84));
  int v21 = *(_DWORD *)(a1 + 72);
  if (!v21)
  {
    uint64_t v22 = *(void *)(a1 + 32);
    if (v22) {
      int v21 = *(_DWORD *)(v22 + 32);
    }
    else {
      int v21 = 0;
    }
  }
  uint64_t v23 = CI::name_for_format(v21);
  fprintf(__stream, "format=%s roi=", v23);
  CI::fprintf(__stream, v24, *(CGRect *)*(void *)(a1 + 56));
  fwrite(" = \n", 4uLL, 1uLL, __stream);
  uint64_t v25 = *(void *)(a1 + 64);
  memset(v27, 0, sizeof(v27));
  int v28 = 1065353216;
  CI::Node::print_graph(v25, __stream, (uint64_t)v27);
  std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v27);
  return fputc(10, __stream);
}

uint64_t ___ZN2CIL18dump_initial_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_5ImageERK6CGRectNS_11PixelFormatE_block_invoke(uint64_t a1, FILE *__stream)
{
  if (*(void *)(a1 + 32)) {
    fprintf(__stream, "[%s] ", *(const char **)(a1 + 40));
  }
  if (*(_DWORD *)(*(void *)(a1 + 48) + 344))
  {
    uint64_t v4 = "initial graph prepare ";
    size_t v5 = 22;
  }
  else
  {
    uint64_t v4 = "initial graph ";
    size_t v5 = 14;
  }
  fwrite(v4, v5, 1uLL, __stream);
  fprintf(__stream, "%s ", *(const char **)(a1 + 56));
  uint64_t v6 = *(void *)(a1 + 64);
  if (v6)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 40))(v6))
    {
      uint64_t v7 = (const void *)(*(uint64_t (**)(void))(**(void **)(a1 + 64) + 40))(*(void *)(a1 + 64));
      fprintf(__stream, "%p ", v7);
    }
    uint64_t v8 = *(void *)(a1 + 64);
    if (v8)
    {
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 48))(v8);
      uint64_t v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 56))(*(void *)(a1 + 64));
      fprintf(__stream, "%ldx%ld ", v9, v10);
    }
  }
  int v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 264))(*(void *)(a1 + 48));
  int v12 = "highp ";
  if (v11 != 1) {
    int v12 = "";
  }
  if (v11 == -1) {
    int v13 = "lowp ";
  }
  else {
    int v13 = v12;
  }
  uint64_t v14 = (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 304))();
  int v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 272))();
  uint64_t v16 = *(void *)(a1 + 48);
  int v18 = *(unsigned __int8 *)(v16 + 236);
  uint64_t v17 = (const char *)(v16 + 236);
  if (v18) {
    int v19 = ":";
  }
  else {
    int v19 = "";
  }
  fprintf(__stream, "(%s%s context %d%s%s frame %lu) ", v13, v14, v15, v19, v17, *(void *)(v17 - 84));
  int v20 = *(_DWORD *)(a1 + 88);
  if (!v20)
  {
    uint64_t v21 = *(void *)(a1 + 64);
    if (v21) {
      int v20 = *(_DWORD *)(v21 + 32);
    }
    else {
      int v20 = 0;
    }
  }
  uint64_t v22 = CI::name_for_format(v20);
  fprintf(__stream, "format=%s roi=", v22);
  CI::fprintf(__stream, v23, *(CGRect *)*(void *)(a1 + 72));
  fwrite(" = \n", 4uLL, 1uLL, __stream);
  CGRect v24 = CI_TEMP_DIR();
  uint64_t v25 = *(const char **)(a1 + 80);
  CGFloat v26 = (const char *)CI_PRINT_TREE_graphviz();
  fprintf(__stream, "  %s/%s.%s\n", v24, v25, v26);

  return fputc(10, __stream);
}

uint64_t ___ZN2CIL19print_initial_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_5ImageERK6CGRectNS_11PixelFormatE_block_invoke(uint64_t a1, FILE *__stream)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    CFStringRef v5 = *(const __CFString **)(v4 + 16);
    if (v5)
    {
      fputc(91, __stream);
      CI::fprintf(__stream, v5, v6);
      fwrite("] ", 2uLL, 1uLL, __stream);
    }
  }
  fwrite("initial graph ", 0xEuLL, 1uLL, __stream);
  if (*(_DWORD *)(*(void *)(a1 + 40) + 344)) {
    fwrite("prepare ", 8uLL, 1uLL, __stream);
  }
  fprintf(__stream, "%s ", *(const char **)(a1 + 48));
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7))
    {
      uint64_t v8 = (const void *)(*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
      fprintf(__stream, "%p ", v8);
    }
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
      uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))(*(void *)(a1 + 32));
      fprintf(__stream, "%ldx%ld ", v10, v11);
    }
  }
  int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 264))(*(void *)(a1 + 40));
  int v13 = "highp ";
  if (v12 != 1) {
    int v13 = "";
  }
  if (v12 == -1) {
    uint64_t v14 = "lowp ";
  }
  else {
    uint64_t v14 = v13;
  }
  int v15 = (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 304))();
  int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 272))();
  uint64_t v17 = *(void *)(a1 + 40);
  int v19 = *(unsigned __int8 *)(v17 + 236);
  int v18 = (const char *)(v17 + 236);
  if (v19) {
    int v20 = ":";
  }
  else {
    int v20 = "";
  }
  fprintf(__stream, "(%s%s context %d%s%s frame %lu) ", v14, v15, v16, v20, v18, *(void *)(v18 - 84));
  int v21 = *(_DWORD *)(a1 + 72);
  if (!v21)
  {
    uint64_t v22 = *(void *)(a1 + 32);
    if (v22) {
      int v21 = *(_DWORD *)(v22 + 32);
    }
    else {
      int v21 = 0;
    }
  }
  uint64_t v23 = CI::name_for_format(v21);
  fprintf(__stream, "format=%s ", v23);
  CGRect v24 = *(__sFILE **)(*(void *)(a1 + 40) + 24);
  if (v24)
  {
    fwrite("workingspace=", 0xDuLL, 1uLL, __stream);
    CI::fprintf_cs(__stream, v24, (CGColorSpace *)1);
    fputc(32, __stream);
  }
  fwrite("roi=", 4uLL, 1uLL, __stream);
  CI::fprintf(__stream, v25, *(CGRect *)*(void *)(a1 + 56));
  fwrite(" = \n", 4uLL, 1uLL, __stream);
  CI::Image::print_graph(*(CI::Image **)(a1 + 64), __stream);

  return fputc(10, __stream);
}

void CI::OptimizedGraph::~OptimizedGraph(CI::OptimizedGraph *this)
{
  *(void *)this = &unk_1EE459C30;
  *((void *)this + 6) = &unk_1EE459DD8;
  CI::ImageToNodeMap::~ImageToNodeMap((CI::ImageToNodeMap **)this + 7);
  *((void *)this + 6) = &unk_1EE45B070;
  atomic_fetch_add(&dword_1EB466E78[52], 0xFFFFFFFF);

  CI::NodeWithChildren::~NodeWithChildren(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_1EE459C30;
  *((void *)this + 6) = &unk_1EE459DD8;
  CI::ImageToNodeMap::~ImageToNodeMap((CI::ImageToNodeMap **)this + 7);
  *((void *)this + 6) = &unk_1EE45B070;
  atomic_fetch_add(&dword_1EB466E78[52], 0xFFFFFFFF);
  CI::NodeWithChildren::~NodeWithChildren(this);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::OptimizedGraph::type(CI::OptimizedGraph *this)
{
  return 54;
}

uint64_t CI::OptimizedGraph::may_be_extended_range(CI::OptimizedGraph *this)
{
  return 0;
}

uint64_t CI::OptimizedGraph::alpha_one(CI::OptimizedGraph *this)
{
  return 0;
}

uint64_t non-virtual thunk to'CI::OptimizedGraph::type(CI::OptimizedGraph *this)
{
  return 54;
}

void non-virtual thunk to'CI::OptimizedGraph::~OptimizedGraph(CI::OptimizedGraph *this)
{
  int v2 = (CI::OptimizedGraph *)((char *)this - 48);
  *((void *)this - 6) = &unk_1EE459C30;
  *(void *)this = &unk_1EE459DD8;
  CI::ImageToNodeMap::~ImageToNodeMap((CI::ImageToNodeMap **)this + 1);
  *(void *)this = &unk_1EE45B070;
  atomic_fetch_add(&dword_1EB466E78[52], 0xFFFFFFFF);

  CI::NodeWithChildren::~NodeWithChildren(v2);
}

{
  CI::NodeWithChildren *v2;
  uint64_t vars8;

  int v2 = (CI::OptimizedGraph *)((char *)this - 48);
  *((void *)this - 6) = &unk_1EE459C30;
  *(void *)this = &unk_1EE459DD8;
  CI::ImageToNodeMap::~ImageToNodeMap((CI::ImageToNodeMap **)this + 1);
  *(void *)this = &unk_1EE45B070;
  atomic_fetch_add(&dword_1EB466E78[52], 0xFFFFFFFF);
  CI::NodeWithChildren::~NodeWithChildren(v2);

  JUMPOUT(0x1997023B0);
}

uint64_t CI::InstanceCounted<(CI::Type)54>::type()
{
  return 54;
}

void *CI::InstanceCounted<(CI::Type)54>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45B070;
  atomic_fetch_add(&dword_1EB466E78[52], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)54>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B070;
  atomic_fetch_add(&dword_1EB466E78[52], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

void CI::ImageToNodeMap::~ImageToNodeMap(CI::ImageToNodeMap **this)
{
  int v2 = this + 1;
  long long v3 = *this;
  if (*this != (CI::ImageToNodeMap *)(this + 1))
  {
    do
    {
      uint64_t v4 = (CI::Object *)*((void *)v3 + 5);
      if (v4) {
        CI::Object::unref(v4);
      }
      CFStringRef v5 = (CI::ImageToNodeMap *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          CFStringRef v6 = (CI::ImageToNodeMap **)v5;
          CFStringRef v5 = *(CI::ImageToNodeMap **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          CFStringRef v6 = (CI::ImageToNodeMap **)*((void *)v3 + 2);
          BOOL v7 = *v6 == v3;
          long long v3 = (CI::ImageToNodeMap *)v6;
        }
        while (!v7);
      }
      long long v3 = (CI::ImageToNodeMap *)v6;
    }
    while (v6 != v2);
  }
  uint64_t v8 = this[3];
  if (v8 != (CI::ImageToNodeMap *)(this + 4))
  {
    do
    {
      uint64_t v9 = (CI::Object *)*((void *)v8 + 5);
      if (v9) {
        CI::Object::unref(v9);
      }
      uint64_t v10 = (CI::ImageToNodeMap *)*((void *)v8 + 1);
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = *(CI::ImageToNodeMap **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (CI::ImageToNodeMap *)*((void *)v8 + 2);
          BOOL v7 = *(void *)v11 == (void)v8;
          uint64_t v8 = v11;
        }
        while (!v7);
      }
      uint64_t v8 = v11;
    }
    while (v11 != (CI::ImageToNodeMap *)(this + 4));
  }
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(this + 3), this[4]);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this, this[1]);
}

void ___ZN2CIL26gather_rois_for_node_graphEPNS_7ContextEPKcPNS_4NodeE6CGRect_block_invoke(int a1, CI::Node *this)
{
}

uint64_t CI::traverse_gathering_rois(uint64_t a1, CI::Node *a2, CI::Node *a3, int a4, int a5, uint64_t a6, int a7)
{
  NodeUseuint64_t Count = CI::Node::GetNodeUseCount(a6, (unint64_t)a2);
  int v15 = NodeUseCount;
  if (a7)
  {
    int v16 = *(void **)(a6 + 8);
    if (v16)
    {
      uint64_t v17 = a6 + 8;
      do
      {
        unint64_t v18 = v16[4];
        BOOL v19 = v18 >= (unint64_t)a2;
        if (v18 >= (unint64_t)a2) {
          int v20 = v16;
        }
        else {
          int v20 = v16 + 1;
        }
        if (v19) {
          uint64_t v17 = (uint64_t)v16;
        }
        int v16 = (void *)*v20;
      }
      while (*v20);
      if (v17 != a6 + 8 && *(void *)(v17 + 32) <= (unint64_t)a2) {
        --*(_DWORD *)(v17 + 40);
      }
    }
    int v15 = NodeUseCount - 1;
  }
  if (a3 && CI::Node::rois_count(a3))
  {
    v48.origin.CGFloat x = CI::Node::roi(a3, a5);
    double v21 = CI::Node::region_of_child(a3, v48);
    double v23 = v22;
    double v25 = v24;
    double v27 = v26;
  }
  else
  {
    double v21 = *MEMORY[0x1E4F1DB20];
    double v23 = *(double *)(MEMORY[0x1E4F1DB20] + 8);
    double v25 = *(double *)(MEMORY[0x1E4F1DB20] + 16);
    double v27 = *(double *)(MEMORY[0x1E4F1DB20] + 24);
  }
  v49.origin.CGFloat x = v21;
  v49.origin.CGFloat y = v23;
  v49.size.double width = v25;
  v49.size.double height = v27;
  uint64_t result = CGRectIsEmpty(v49);
  if ((result & 1) == 0)
  {
    int v40 = a3;
    int v41 = a5;
    int v42 = 0;
    int v43 = a4;
    int v44 = -1;
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    int v47 = 0;
    uint64_t v29 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 440))(a1);
    uint64_t result = (*(uint64_t (**)(CI::Node *, void, uint64_t, CI::Node **, double, double, double, double))(*(void *)a2 + 344))(a2, 0, v29, &v40, v21, v23, v25, v27);
  }
  if (!v15)
  {
    if (CI::Node::rois_count(a2))
    {
      uint64_t result = CI::Node::rois_count(a2);
      if ((int)result >= 1)
      {
        int v30 = result;
        uint64_t v31 = 0;
        do
        {
          double v32 = CI::Node::roi(a2, v31);
          uint64_t result = (*(uint64_t (**)(CI::Node *, double))(*(void *)a2 + 40))(a2, v32);
          int v33 = v31 + 1;
          if ((int)result >= 1)
          {
            int v34 = result;
            uint64_t v35 = 0;
            do
            {
              uint64_t v36 = (*(uint64_t (**)(CI::Node *, uint64_t))(*(void *)a2 + 48))(a2, v35);
              uint64_t result = CI::traverse_gathering_rois(a1, v36, a2, v35, v31, a6, v33 == v30);
              uint64_t v35 = (v35 + 1);
            }
            while (v34 != v35);
          }
          uint64_t v31 = (v31 + 1);
        }
        while (v33 != v30);
      }
    }
    else
    {
      uint64_t result = (*(uint64_t (**)(CI::Node *))(*(void *)a2 + 40))(a2);
      if ((int)result >= 1)
      {
        int v37 = result;
        uint64_t v38 = 0;
        do
        {
          uint64_t v39 = (*(uint64_t (**)(CI::Node *, uint64_t))(*(void *)a2 + 48))(a2, v38);
          uint64_t result = CI::traverse_gathering_rois(a1, v39, a2, v38, 0xFFFFFFFFLL, a6, 1);
          uint64_t v38 = (v38 + 1);
        }
        while (v37 != v38);
      }
    }
  }
  return result;
}

void ___ZN2CIL15tile_node_graphEPNS_7ContextEPKNS_17RenderDestinationEPKcNS_14GraphWithDepthERK6CGRectNS_11PixelFormatERKNS_19output_swizzle_infoEU13block_pointerFPNS_8TileTaskEPNS_11ProgramNodeES8_E_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    long long v3 = (FILE *)CI_LOG_FILE();
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 0x40000000;
    v5[2] = ___ZN2CIL23dump_program_graph_postEPNS_10RenderTaskE_block_invoke;
    _OWORD v5[3] = &__block_descriptor_tmp_260;
    _OWORD v5[4] = v1;
    stream_to_file(v3, (uint64_t)v5);
    uint64_t v4 = *(CI::Object **)(a1 + 32);
    if (v4) {
      CI::Object::unref(v4);
    }
  }
}

void CI::print_program_graph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, double a8)
{
  int v16 = (FILE *)CI_LOG_FILE();
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 0x40000000;
  _OWORD v17[2] = ___ZN2CIL19print_program_graphEPNS_7ContextEPKNS_17RenderDestinationEdPKNS_8TileTaskEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke;
  void v17[3] = &__block_descriptor_tmp_257;
  v17[4] = a2;
  _OWORD v17[5] = a1;
  int v18 = a7;
  v17[6] = a4;
  v17[7] = a6;
  v17[8] = a3;
  *(double *)&void v17[9] = a8;
  v17[10] = a5;
  stream_to_file(v16, (uint64_t)v17);
}

void ___ZN2CIL14recursive_tileEPNS_10RenderTaskEPNS_7ContextEPKNS_17RenderDestinationEPKcNS_14GraphWithDepthERK6CGRectNS_11PixelFormatERKNS_19output_swizzle_infoEU13block_pointerFPNS_8TileTaskEPNS_11ProgramNodeESA_E_block_invoke(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  double v4 = CI::RenderTask::completionTime(*(CI::RenderTask **)(a1 + 48));
  CI::print_program_graph(v2, v3, *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), a1 + 80, *(_DWORD *)(a1 + 112), v4);
  CFStringRef v5 = *(CI::Object **)(a1 + 40);
  if (v5) {
    CI::Object::unref(v5);
  }
  CFStringRef v6 = *(CI::Object **)(a1 + 56);
  if (v6) {
    CI::Object::unref(v6);
  }
  BOOL v7 = *(CI::Object **)(a1 + 48);
  if (v7) {
    CI::Object::unref(v7);
  }
  global_queue = dispatch_get_global_queue(17, 0);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN2CIL14recursive_tileEPNS_10RenderTaskEPNS_7ContextEPKNS_17RenderDestinationEPKcNS_14GraphWithDepthERK6CGRectNS_11PixelFormatERKNS_19output_swizzle_infoEU13block_pointerFPNS_8TileTaskEPNS_11ProgramNodeESA_E_block_invoke_2;
  block[3] = &__block_descriptor_tmp_219;
  block[4] = *(void *)(a1 + 32);
  dispatch_async(global_queue, block);
  uint64_t v9 = *(CI::Object **)(a1 + 72);
  if (v9) {
    CI::Object::unref(v9);
  }
  free(*(void **)(a1 + 64));
}

void ___ZN2CIL14recursive_tileEPNS_10RenderTaskEPNS_7ContextEPKNS_17RenderDestinationEPKcNS_14GraphWithDepthERK6CGRectNS_11PixelFormatERKNS_19output_swizzle_infoEU13block_pointerFPNS_8TileTaskEPNS_11ProgramNodeESA_E_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(CI::Object **)(a1 + 32);
  if (v1) {
    CI::Object::unref(v1);
  }
}

void CI::SerialRectArray::updateSubGraphLoad(CI::SerialRectArray *this, int a2, uint64_t a3, int a4)
{
  uint64_t v8 = *(void *)this + 120 * a2;
  unint64_t v11 = *(void *)(v8 + 112);
  uint64_t v10 = (char **)(v8 + 112);
  unint64_t v9 = v11;
  int v13 = v10 - 1;
  int v12 = *(v10 - 1);
  if ((unint64_t)v12 >= v11)
  {
    int v15 = (void **)(v10 - 2);
    int v16 = *(v10 - 2);
    uint64_t v17 = (v12 - v16) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
      abort();
    }
    uint64_t v19 = v9 - (void)v16;
    if (v19 >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      double v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)v10, v20);
      int v12 = *v13;
      int v16 = (char *)*v15;
    }
    else
    {
      double v21 = 0;
    }
    double v22 = &v21[8 * v17];
    double v23 = &v21[8 * v20];
    *(void *)double v22 = a3;
    uint64_t v14 = v22 + 8;
    while (v12 != v16)
    {
      uint64_t v24 = *((void *)v12 - 1);
      v12 -= 8;
      *((void *)v22 - 1) = v24;
      v22 -= 8;
    }
    *int v15 = v22;
    const char *v13 = v14;
    *uint64_t v10 = v23;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *(void *)int v12 = a3;
    uint64_t v14 = v12 + 8;
  }
  const char *v13 = v14;
  double v26 = *(unint64_t **)(*(void *)this + 120 * a2 + 96);
  double v25 = *(unint64_t **)(*(void *)this + 120 * a2 + 104);
  if (a4 == v25 - v26)
  {
    unint64_t v27 = *(void *)(*(void *)this + 120 * a2 + 88);
    if (v26 != v25)
    {
      unint64_t v28 = 0;
      uint64_t v29 = *(unint64_t **)(*(void *)this + 120 * a2 + 96);
      do
      {
        unint64_t v31 = *v29++;
        unint64_t v30 = v31;
        if (v28 <= v31) {
          unint64_t v28 = v30;
        }
      }
      while (v29 != v25);
      if (v27 <= v28)
      {
        unint64_t v27 = 0;
        do
        {
          unint64_t v33 = *v26++;
          unint64_t v32 = v33;
          if (v27 <= v33) {
            unint64_t v27 = v32;
          }
        }
        while (v26 != v25);
      }
    }
    CI::SerialRectArray::updateParents(this, a2, v27);
  }
}

void CI::_traverse_program_graph(CI::Node *a1, uint64_t a2, char **a3, unint64_t *a4)
{
  unsigned int v6 = a2;
  long long v54 = a1;
  uint64_t v55 = a2;
  for (unint64_t i = *a3; i != a3[1]; i += 24)
  {
    if (*(CI::Node **)i == a1 && *((_DWORD *)i + 2) == a2) {
      return;
    }
  }
  unint64_t v9 = (void *)CI::Node::rois(a1);
  CGRect v52 = 0;
  uint64_t v53 = 0;
  int v51 = 0;
  if ((v6 & 0x80000000) == 0)
  {
    uint64_t v10 = *v9 + 120 * v6;
    int v11 = *(_DWORD *)(v10 + 80);
    long long v12 = *(_OWORD *)(v10 + 16);
    long long v44 = *(_OWORD *)v10;
    long long v45 = v12;
    CI::SerialRectArray::recurseSubdivide((double *)&v44, v11, (void **)&v51);
    int v13 = v51;
    if (v52 != v51)
    {
      unint64_t v41 = 0;
      do
      {
        CGRect v48 = 0;
        CGRect v49 = 0;
        int v50 = 0;
        int v40 = (*(uint64_t (**)(CI::Node *))(*(void *)a1 + 40))(a1);
        if (v40)
        {
          uint64_t v14 = 0;
          do
          {
            *(void *)&long long v44 = a1;
            *((void *)&v44 + 1) = __PAIR64__(v41, v55);
            long long v45 = v14 | 0xFFFFFFFF00000000;
            uint64_t v46 = 0;
            int v47 = 0;
            int v15 = (CI::Node *)(*(uint64_t (**)(CI::Node *, uint64_t))(*(void *)a1 + 48))(a1, v14);
            int v16 = (uint64_t **)CI::Node::rois(v15);
            CI::SerialRectArray::findParentROI(v16, (uint64_t)&v44, (uint64_t)&__block_literal_global_237, (uint64_t)&v42);
            uint64_t v17 = v42;
            if (v42 != v43)
            {
              do
              {
                uint64_t v18 = (*(uint64_t (**)(CI::Node *, uint64_t))(*(void *)a1 + 48))(a1, v14);
                uint64_t v19 = v18;
                uint64_t v20 = *((unsigned int *)v17 + 7);
                double v21 = v49;
                if (v49 >= v50)
                {
                  uint64_t v23 = ((char *)v49 - (char *)v48) >> 4;
                  unint64_t v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 60) {
                    abort();
                  }
                  uint64_t v25 = (char *)v50 - (char *)v48;
                  if (v50 - v48 > v24) {
                    unint64_t v24 = v25 >> 3;
                  }
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
                    unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v26 = v24;
                  }
                  if (v26) {
                    unint64_t v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::Perspective::Line>>((uint64_t)&v50, v26);
                  }
                  else {
                    unint64_t v27 = 0;
                  }
                  unint64_t v28 = (uint64_t *)&v27[16 * v23];
                  *unint64_t v28 = v19;
                  v28[1] = v20;
                  unint64_t v30 = v48;
                  uint64_t v29 = v49;
                  unint64_t v31 = v28;
                  if (v49 != v48)
                  {
                    do
                    {
                      *((_OWORD *)v31 - 1) = *((_OWORD *)v29 - 1);
                      v31 -= 2;
                      v29 -= 2;
                    }
                    while (v29 != v30);
                    uint64_t v29 = v48;
                  }
                  double v22 = v28 + 2;
                  CGRect v48 = v31;
                  CGRect v49 = v28 + 2;
                  int v50 = (uint64_t *)&v27[16 * v26];
                  if (v29) {
                    operator delete(v29);
                  }
                }
                else
                {
                  *CGRect v49 = v18;
                  v21[1] = v20;
                  double v22 = v21 + 2;
                }
                CGRect v49 = v22;
                CI::_traverse_program_graph(v19, v20, a3, a4);
                unint64_t v32 = v17[1];
                if (v32)
                {
                  do
                  {
                    unint64_t v33 = (void **)v32;
                    unint64_t v32 = (void *)*v32;
                  }
                  while (v32);
                }
                else
                {
                  do
                  {
                    unint64_t v33 = (void **)v17[2];
                    BOOL v34 = *v33 == v17;
                    uint64_t v17 = v33;
                  }
                  while (!v34);
                }
                uint64_t v17 = v33;
              }
              while (v33 != v43);
            }
            std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)&v42, v43[0]);
            uint64_t v14 = (v14 + 1);
          }
          while (v14 != v40);
        }
        CI::liveROIs::add_roi(a3, (uint64_t)&v54);
        unint64_t v35 = *a4;
        if (v35 <= CI::liveROIs::currentMemory((CI::liveROIs *)a3)) {
          unint64_t v36 = CI::liveROIs::currentMemory((CI::liveROIs *)a3);
        }
        else {
          unint64_t v36 = *a4;
        }
        *a4 = v36;
        uint64_t v38 = v48;
        int v37 = v49;
        if (v48 != v49)
        {
          do
          {
            long long v39 = *(_OWORD *)v38;
            v38 += 2;
            long long v44 = v39;
            CI::liveROIs::unref_roi(a3, (uint64_t)&v44);
          }
          while (v38 != v37);
          uint64_t v38 = v48;
        }
        if (v38)
        {
          CGRect v49 = v38;
          operator delete(v38);
        }
        int v13 = v51;
        ++v41;
      }
      while (v41 < (v52 - v51) >> 5);
    }
    if (v13)
    {
      CGRect v52 = v13;
      operator delete(v13);
    }
  }
}

void CI::liveROIs::add_roi(char **a1, uint64_t a2)
{
  double v4 = (void *)CI::Node::rois(*(CI::Node **)a2);
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *v4 + 120 * v5;
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v7 = *(void *)(v6 + 40);
  unint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  if (*a1 == v10)
  {
    long long v12 = *a1;
  }
  else
  {
    int v11 = *(CI::Node **)a2;
    long long v12 = *a1;
    while (*(CI::Node **)v12 != v11 || *((_DWORD *)v12 + 2) != v5)
    {
      v12 += 24;
      if (v12 == v10) {
        goto LABEL_10;
      }
    }
  }
  if (v12 == v10)
  {
    int v11 = *(CI::Node **)a2;
LABEL_10:
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 4);
    uint64_t v14 = a1[2];
    if (v10 >= v14)
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v9) >> 3);
      unint64_t v17 = v16 + 1;
      if (v16 + 1 > 0xAAAAAAAAAAAAAAALL) {
        abort();
      }
      unint64_t v18 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v9) >> 3);
      if (2 * v18 > v17) {
        unint64_t v17 = 2 * v18;
      }
      if (v18 >= 0x555555555555555) {
        unint64_t v19 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v19 = v17;
      }
      if (v19) {
        uint64_t v20 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<CI::SWRendererFunctionInputNode>>((uint64_t)(a1 + 2), v19);
      }
      else {
        uint64_t v20 = 0;
      }
      double v21 = &v20[24 * v16];
      double v22 = &v20[24 * v19];
      *(void *)double v21 = v11;
      *((_DWORD *)v21 + 2) = v5;
      *((void *)v21 + 2) = v13;
      int v15 = v21 + 24;
      unint64_t v24 = *a1;
      uint64_t v23 = a1[1];
      if (v23 != *a1)
      {
        do
        {
          long long v25 = *(_OWORD *)(v23 - 24);
          *((void *)v21 - 1) = *((void *)v23 - 1);
          *(_OWORD *)(v21 - 24) = v25;
          v21 -= 24;
          v23 -= 24;
        }
        while (v23 != v24);
        uint64_t v23 = *a1;
      }
      *a1 = v21;
      a1[1] = v15;
      a1[2] = v22;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *(void *)uint64_t v10 = v11;
      *((_DWORD *)v10 + 2) = v5;
      int v15 = v10 + 24;
      *((void *)v10 + 2) = v13;
    }
    a1[1] = v15;
  }
}

unint64_t CI::liveROIs::currentMemory(CI::liveROIs *this)
{
  uint64_t v1 = *(void *)this;
  uint64_t v2 = *((void *)this + 1);
  if (*(void *)this != v2)
  {
    unint64_t v4 = 0;
    while (1)
    {
      int v5 = *(CI::Node **)v1;
      int v6 = *(_DWORD *)(v1 + 8);
      uint64_t v7 = *(void *)CI::Node::rois(*(CI::Node **)v1) + 120 * v6;
      double v8 = *(double *)(v7 + 16);
      double v9 = *(double *)(v7 + 24);
      if ((*(unsigned int (**)(CI::Node *))(*(void *)v5 + 16))(v5) != 46)
      {
        double v10 = v8 * v9;
        if ((*(unsigned int (**)(CI::Node *))(*(void *)v5 + 16))(v5) == 29)
        {
          size_t v11 = CGImageGetBitsPerPixel(*((CGImageRef *)v5 + 13)) >> 3;
          goto LABEL_13;
        }
        if ((*(unsigned int (**)(CI::Node *))(*(void *)v5 + 16))(v5) == 44)
        {
          int v12 = *((_DWORD *)v5 + 12);
          goto LABEL_8;
        }
        if ((*(unsigned int (**)(CI::Node *))(*(void *)v5 + 16))(v5) != 48)
        {
          if ((*(unsigned int (**)(CI::Node *))(*(void *)v5 + 16))(v5) != 52
            || (int v12 = *((_DWORD *)v5 + 35)) == 0)
          {
            size_t v11 = *((void *)this + 3);
            goto LABEL_13;
          }
LABEL_8:
          size_t v11 = (int)CI::format_bytes_per_pixel(v12);
LABEL_13:
          unint64_t v4 = (unint64_t)((double)v4 + v10 * (double)v11);
        }
      }
      v1 += 24;
      if (v1 == v2) {
        return v4;
      }
    }
  }
  return 0;
}

void *CI::liveROIs::unref_roi(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v4 = *result;
  uint64_t v3 = result[1];
  if (*result != v3)
  {
    while (*(void *)v4 != *(void *)a2 || *(_DWORD *)(v4 + 8) != *(_DWORD *)(a2 + 8))
    {
      v4 += 24;
      if (v4 == v3)
      {
        uint64_t v4 = result[1];
        break;
      }
    }
  }
  uint64_t v5 = *(void *)(v4 + 16) - 1;
  *(void *)(v4 + 16) = v5;
  if (!v5)
  {
    uint64_t v6 = v3 - (v4 + 24);
    if (v3 != v4 + 24) {
      uint64_t result = memmove((void *)v4, (const void *)(v4 + 24), v3 - (v4 + 24));
    }
    v2[1] = v4 + v6;
  }
  return result;
}

uint64_t ___ZN2CIL22dump_program_graph_preEPNS_7ContextEPKNS_17RenderDestinationEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke(uint64_t a1, FILE *__stream)
{
  if (*(void *)(a1 + 32)) {
    fprintf(__stream, "[%s] ", *(const char **)(a1 + 40));
  }
  fwrite("program graph ", 0xEuLL, 1uLL, __stream);
  if (*(_DWORD *)(*(void *)(a1 + 48) + 344)) {
    fwrite("prepare ", 8uLL, 1uLL, __stream);
  }
  fprintf(__stream, "%s ", *(const char **)(a1 + 56));
  int v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 264))();
  uint64_t v5 = "highp ";
  if (v4 != 1) {
    uint64_t v5 = "";
  }
  if (v4 == -1) {
    uint64_t v6 = "lowp ";
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 304))();
  int v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 48) + 272))();
  uint64_t v9 = *(void *)(a1 + 48);
  int v11 = *(unsigned __int8 *)(v9 + 236);
  double v10 = (const char *)(v9 + 236);
  if (v11) {
    int v12 = ":";
  }
  else {
    int v12 = "";
  }
  fprintf(__stream, "(%s%s context %d%s%s frame %lu tile %lu) ", v6, v7, v8, v12, v10, *(void *)(v10 - 84), *(void *)(v10 - 44));
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48)) == 77)
  {
    unint64_t v13 = (const void *)CI::MetalContext::queue(*(CI::MetalContext **)(a1 + 48));
    fprintf(__stream, "commandQueue=%p ", v13);
  }
  int v14 = *(_DWORD *)(a1 + 88);
  if (!v14)
  {
    uint64_t v15 = *(void *)(a1 + 64);
    if (v15) {
      int v14 = *(_DWORD *)(v15 + 32);
    }
    else {
      int v14 = 0;
    }
  }
  unint64_t v16 = CI::name_for_format(v14);
  fprintf(__stream, "format=%s roi=", v16);
  CI::fprintf(__stream, v17, *(CGRect *)*(void *)(a1 + 72));
  fwrite(" = \n", 4uLL, 1uLL, __stream);
  unint64_t v18 = CI_TEMP_DIR();
  unint64_t v19 = *(const char **)(a1 + 80);
  uint64_t v20 = (const char *)CI_PRINT_TREE_graphviz();
  fprintf(__stream, "  %s/%s.%s\n", v18, v19, v20);

  return fputc(10, __stream);
}

uint64_t ___ZN2CIL19print_program_graphEPNS_7ContextEPKNS_17RenderDestinationEdPKNS_8TileTaskEPKcPNS_4NodeERK6CGRectNS_11PixelFormatE_block_invoke(uint64_t a1, FILE *__stream)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    CFStringRef v5 = *(const __CFString **)(v4 + 16);
    if (v5)
    {
      fputc(91, __stream);
      CI::fprintf(__stream, v5, v6);
      fwrite("] ", 2uLL, 1uLL, __stream);
    }
  }
  fwrite("program graph ", 0xEuLL, 1uLL, __stream);
  if (*(_DWORD *)(*(void *)(a1 + 40) + 344)) {
    fwrite("prepare ", 8uLL, 1uLL, __stream);
  }
  fprintf(__stream, "%s ", *(const char **)(a1 + 48));
  uint64_t v7 = *(void *)(a1 + 32);
  if (v7)
  {
    if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7))
    {
      int v8 = (const void *)(*(uint64_t (**)(void))(**(void **)(a1 + 32) + 40))(*(void *)(a1 + 32));
      fprintf(__stream, "%p ", v8);
    }
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 48))(v9);
      uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(a1 + 32) + 56))(*(void *)(a1 + 32));
      fprintf(__stream, "%ldx%ld ", v10, v11);
    }
  }
  int v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 264))(*(void *)(a1 + 40));
  unint64_t v13 = "highp ";
  if (v12 != 1) {
    unint64_t v13 = "";
  }
  if (v12 == -1) {
    int v14 = "lowp ";
  }
  else {
    int v14 = v13;
  }
  uint64_t v15 = (const char *)(*(uint64_t (**)(void))(**(void **)(a1 + 40) + 304))();
  int v16 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 272))();
  uint64_t v17 = *(void *)(a1 + 40);
  int v19 = *(unsigned __int8 *)(v17 + 236);
  unint64_t v18 = (const char *)(v17 + 236);
  if (v19) {
    uint64_t v20 = ":";
  }
  else {
    uint64_t v20 = "";
  }
  fprintf(__stream, "(%s%s context %d%s%s frame %lu tile %lu) ", v14, v15, v16, v20, v18, *(void *)(v18 - 84), *(void *)(v18 - 44));
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 40) + 16))(*(void *)(a1 + 40)) == 77)
  {
    double v21 = (const void *)CI::MetalContext::queue(*(CI::MetalContext **)(a1 + 40));
    fprintf(__stream, "commandQueue=%p ", v21);
  }
  int v22 = *(_DWORD *)(a1 + 88);
  if (!v22)
  {
    uint64_t v23 = *(void *)(a1 + 32);
    if (v23) {
      int v22 = *(_DWORD *)(v23 + 32);
    }
    else {
      int v22 = 0;
    }
  }
  unint64_t v24 = CI::name_for_format(v22);
  fprintf(__stream, "format=%s roi=", v24);
  CI::fprintf(__stream, v25, *(CGRect *)*(void *)(a1 + 56));
  unint64_t v26 = *(CI::TileTask **)(a1 + 64);
  if (v26)
  {
    unint64_t v27 = CI::TileTask::executionNanoSec(v26);
    uint64_t v28 = CI::TileTask::executionCycles(*(CI::TileTask **)(a1 + 64));
    double v29 = CI::TileTask::compileTime(*(CI::TileTask **)(a1 + 64));
    double v30 = CI::TileTask::compileWaitTime(*(CI::TileTask **)(a1 + 64));
    fprintf(__stream, " frameTime=%dms", (int)(*(double *)(a1 + 72) * 1000.0 + 0.5));
    unint64_t SurfaceCachePeakNonVolatileSize = GetSurfaceCachePeakNonVolatileSize();
    fprintf(__stream, " peakNonVolatile=%ldMB", SurfaceCachePeakNonVolatileSize >> 20);
    if (v27) {
      double v32 = (double)v27 / 1000000.0 + 0.5;
    }
    else {
      double v32 = CI::TileTask::executionTime(*(CI::TileTask **)(a1 + 64)) * 1000.0 + 0.5;
    }
    fprintf(__stream, " executionTime=%dms", v32);
    fprintf(__stream, " compileTime=%.1fms", v29 * 1000.0);
    fprintf(__stream, " compileWait=%.1fms", v30 * 1000.0);
    if (v28) {
      fprintf(__stream, " kernelCycles=%d", v28);
    }
    fwrite(" = \n", 4uLL, 1uLL, __stream);
    CI::Node::print_graph(*(void *)(a1 + 80), __stream, *(void *)(a1 + 64) + 88);
  }
  else
  {
    fwrite(" = \n", 4uLL, 1uLL, __stream);
    uint64_t v33 = *(void *)(a1 + 80);
    memset(v35, 0, sizeof(v35));
    int v36 = 1065353216;
    CI::Node::print_graph(v33, __stream, (uint64_t)v35);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v35);
  }
  return fputc(10, __stream);
}

uint64_t ___ZN2CIL23dump_program_graph_postEPNS_10RenderTaskE_block_invoke(uint64_t a1, FILE *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(a1 + 32);
  CFStringRef v5 = *(const __CFString **)(v4 + 96);
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  *(_OWORD *)buffer = 0u;
  long long v40 = 0u;
  if (v5) {
    CFStringGetCString(v5, buffer, 256, 0x8000100u);
  }
  else {
    strlcpy(buffer, (const char *)(*(void *)(v4 + 24) + 236), 0x100uLL);
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)__str = 0u;
  long long v24 = 0u;
  pid_t v6 = getpid();
  if (buffer[0]) {
    uint64_t v7 = "_";
  }
  else {
    uint64_t v7 = "";
  }
  int v8 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 24) + 272))();
  snprintf(__str, 0x100uLL, "%d%s%s_%d_%lu_program_graph", v6, v7, buffer, v8, *(void *)(*(void *)(a1 + 32) + 32));
  if (v5) {
    fprintf(a2, "[%s] ", buffer);
  }
  fprintf(a2, "program graph file %s ", *(const char **)(*(void *)(a1 + 32) + 16));
  uint64_t v9 = (const char *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 24) + 304))();
  int v10 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 24) + 272))();
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(v11 + 24);
  uint64_t v12 = *(void *)(v11 + 32);
  int v15 = *(unsigned __int8 *)(v13 + 236);
  int v14 = (const char *)(v13 + 236);
  if (v15) {
    int v16 = ":";
  }
  else {
    int v16 = "";
  }
  fprintf(a2, "(%s%s context %d%s%s frame %lu) ", "", v9, v10, v16, v14, v12);
  uint64_t v17 = CI::name_for_format(*(_DWORD *)(*(void *)(a1 + 32) + 80));
  fprintf(a2, "format=%s roi=", v17);
  CI::fprintf(a2, v18, *(CGRect *)(*(void *)(a1 + 32) + 48));
  fwrite(" = \n", 4uLL, 1uLL, a2);
  int v19 = CI_TEMP_DIR();
  uint64_t v20 = (const char *)CI_PRINT_TREE_graphviz();
  fprintf(a2, "  %s/%s.%s\n", v19, __str, v20);
  double v21 = *(CI::RenderTask **)(a1 + 32);
  if (CI::format_for_graphviz(void)::onceToken != -1) {
    dispatch_once(&CI::format_for_graphviz(void)::onceToken, &__block_literal_global_84_2);
  }
  CI::RenderTask::dump_for_graphviz(v21, __str, CI::format_for_graphviz(void)::fmt);
  return fputc(10, a2);
}

void ___ZN2CIL13_image_renderEPKcPNS_7ContextEPNS_5ImageE6CGRectNS_11PixelFormatEmRK7CGPoint_block_invoke(uint64_t a1, CI::ProgramNode *a2, CGFloat a3, CGFloat a4, CGFloat a5, CGFloat a6)
{
  v6.origin.CGFloat x = a3;
  v6.origin.CGFloat y = a4;
  v6.size.double width = a5;
  v6.size.double height = a6;
  CI::Context::render(*(CI::Context **)(a1 + 32), a2, &v6);
}

void CI::ObjectCache<CI::Node,unsigned long long,false>::evict(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    do
    {
      if (v2[4] < v1[4]) {
        uint64_t v1 = v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::remove((void *)(a1 + 16), v1, (uint64_t)v3);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long,CI::ObjectCache<CI::Node,unsigned long long,false>::Entry>,void *>>>>::reset[abi:nn180100]((uint64_t)v3, 0);
}

void *CI::ShaderBuilder::ShaderBuilder(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = a2;
  a1[1] = a3;
  a1[2] = a4;
  CI::FoslAdapter::FoslAdapter(a1 + 3);
  a1[36] = 0;
  x_stream_init(a1 + 37);
  return a1;
}

void CI::ShaderBuilder::~ShaderBuilder(CI::ShaderBuilder *this)
{
}

void CI::ShaderBuilder::convert_tree(CI::ShaderBuilder *this, size_t a2, int a3)
{
  CGRect v6 = malloc_type_calloc(0x400uLL, 1uLL, 0xCBC4C74EuLL);
  memset(v6, 48, a2);
  *((void *)this + 36) = CI::FoslAdapter::convertTree((CI::ShaderBuilder *)((char *)this + 24), *((CI::Node **)this + 1), (char *)v6, a2, a3);

  free(v6);
}

void CI::ShaderBuilder::prepare_tree_and_arguments(CI::ShaderBuilder *this, size_t a2)
{
}

void CI::ShaderBuilder::prepare_arguments_only(CI::ShaderBuilder *this, size_t a2)
{
}

char *CI::ShaderBuilder::construct_shader(CI::ShaderBuilder *this, const char *a2)
{
  uint64_t v423 = *MEMORY[0x1E4F143B8];
  if (CI_VERBOSE_SIGNPOSTS())
  {
    uint64_t v4 = ci_signpost_log_render();
    os_signpost_id_t v5 = *(int *)(*((void *)this + 2) + 36) | (unint64_t)((*(uint64_t (**)(void))(**(void **)this + 272))(*(void *)this) << 32);
    if (v5 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v4))
    {
      *(_WORD *)int buf = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v4, OS_SIGNPOST_INTERVAL_BEGIN, v5, "construct_shader", "", buf, 2u);
    }
  }
  uint64_t v6 = (*(uint64_t (**)(void))(**(void **)this + 272))(*(void *)this);
  TimerBase::TimerBase((uint64_t)buf, v6, *(_DWORD *)(*((void *)this + 2) + 36), (uint64_t)"construct_shader", 4);
  x_stream_grow((char **)this + 37, 0x1000uLL);
  if (*(unsigned char *)(*((void *)this + 2) + 137))
  {
    if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 74)
    {
      uint64_t v7 = "static constant float4 _ci_constants = (float4)(1.0,0.0,1.0/257.0,256.0/257.0);\n";
      int v8 = (char *)this + 296;
      size_t v9 = 80;
    }
    else if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 76)
    {
      uint64_t v7 = "const lowp vec4 _ci_constants = vec4(1.0,0.0,1.0/257.0,256.0/257.0);\n";
      int v8 = (char *)this + 296;
      size_t v9 = 69;
    }
    else
    {
      if ((*(unsigned int (**)(void))(**(void **)this + 16))() != 77) {
        goto LABEL_13;
      }
      uint64_t v7 = "static constant metal::float4 _ci_constants = metal::float4(1.0,0.0,1.0/257.0,256.0/257.0);\n";
      int v8 = (char *)this + 296;
      size_t v9 = 92;
    }
    x_stream_write((uint64_t)v8, v7, v9);
  }
LABEL_13:
  if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 74)
  {
    x_stream_write((uint64_t)this + 296, "#define writeImage(c, p, _dc) write_imagef(_outputTexture, (int2)p, c)\n", 0x47uLL);
    x_stream_write((uint64_t)this + 296, "#define writeImagePlane(c, p, _dc) write_imagef(_outputTexturePlane, (int2)p, c)\n", 0x51uLL);
    x_stream_write((uint64_t)this + 296, "#define writePixel(r, g, b, a, p, _dc) write_imagei(_outputTexture, (int2)p, (int4)(r,g,b,a))\n", 0x5EuLL);
    int v10 = "#define writeCoord(_dc) (float2)_writeLoc\n\n";
    uint64_t v11 = (char *)this + 296;
    size_t v12 = 43;
  }
  else if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 76)
  {
    x_stream_write((uint64_t)this + 296, "#define writeImage(c, p) gl_FragData[0] = c\n", 0x2CuLL);
    x_stream_write((uint64_t)this + 296, "#define writeImagePlane(c, p) gl_FragData[1] = c\n", 0x31uLL);
    x_stream_write((uint64_t)this + 296, "#define writePixel(r, g, b, a, p) \n", 0x23uLL);
    int v10 = "#define writeCoord() p0\n\n";
    uint64_t v11 = (char *)this + 296;
    size_t v12 = 25;
  }
  else
  {
    if ((*(unsigned int (**)(void))(**(void **)this + 16))() != 77) {
      goto LABEL_20;
    }
    x_stream_write((uint64_t)this + 296, "#define writeImage(c, p, _dc) _outputTexture.write(c, static_cast<uint2>(p))\n", 0x4DuLL);
    x_stream_write((uint64_t)this + 296, "#define writeImageWidth(_dc) (int)_outputTexture.get_width()\n", 0x3DuLL);
    x_stream_write((uint64_t)this + 296, "#define writeImageHeight(_dc) (int)_outputTexture.get_height()\n", 0x3FuLL);
    x_stream_write((uint64_t)this + 296, "#define writeImagePlane(c, p, _dc) _outputTexturePlane.write(c, static_cast<uint2>(p))\n", 0x57uLL);
    x_stream_write((uint64_t)this + 296, "#define writePixel(r, g, b, a, p, _dc) _outputTexture.write(float4(r,g,b,a) / 255.0, static_cast<uint2>(p))\n", 0x6CuLL);
    x_stream_write((uint64_t)this + 296, "#define writeCoord(_dc) static_cast<float2>(_wc)\n\n", 0x32uLL);
    x_stream_write((uint64_t)this + 296, "#define _ci_simd_shuffle_down(c, p, _dc) simd_shuffle_down(c, p)\n", 0x41uLL);
    int v10 = "#define _ci_simdgroup_barrier(f) simdgroup_barrier(mem_flags::mem_threadgroup)\n";
    uint64_t v11 = (char *)this + 296;
    size_t v12 = 79;
  }
  x_stream_write((uint64_t)v11, v10, v12);
LABEL_20:
  CI::FoslAdapter::addLibraryFunctions((CI::ShaderBuilder *)((char *)this + 24), aCopyright2022A);
  (*(void (**)(void))(**(void **)this + 16))();
  uint64_t v13 = (std::string *)CI::FoslAdapter::constructShader((CI::ShaderBuilder *)((char *)this + 24), a2, *((void *)this + 36));
  std::string::basic_string[abi:nn180100]<0>(&v418, (char *)v13);
  v397 = (char **)((char *)this + 296);
  if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 77 && (int)fosl_filter_interface_version() <= 0)
  {
    int64_t size = HIBYTE(v418.__r_.__value_.__r.__words[2]);
    if ((v418.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      int v15 = &v418;
    }
    else
    {
      int64_t size = v418.__r_.__value_.__l.__size_;
      int v15 = (std::string *)v418.__r_.__value_.__r.__words[0];
    }
    if (size >= 81)
    {
      int v16 = (char *)v15 + size;
      uint64_t v17 = v15;
      do
      {
        unint64_t v18 = (char *)memchr(v17, 103, size - 80);
        if (!v18) {
          break;
        }
        int v19 = v18;
        if (!memcmp(v18, "gid += static_cast<uint2>(params.outputRect.xy * step(params.outputRect.w, 0.0));", 0x51uLL))
        {
          if (v19 != v16 && v19 - (char *)v15 != -1)
          {
            std::string::basic_string[abi:nn180100]<0>(&__p, "gid.y += lessThan(params.outputRect.w, 0) * ((-params.outputRect.w-1)-2*gid.y);\n"
              "  gid += static_cast<uint2>(params.outputRect.xy);");
            uint64_t v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__p
                : (std::string *)__p.__r_.__value_.__r.__words[0];
            std::string::size_type v21 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(__p.__r_.__value_.__r.__words[2])
                : __p.__r_.__value_.__l.__size_;
            std::string::replace(&v418, v19 - (char *)v15, 0x51uLL, (const std::string::value_type *)v20, v21);
            uint64_t v13 = (v418.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v418
                : (std::string *)v418.__r_.__value_.__r.__words[0];
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          break;
        }
        uint64_t v17 = (std::string *)(v19 + 1);
        int64_t size = v16 - (v19 + 1);
      }
      while (size >= 81);
    }
  }
  if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 74)
  {
    int v22 = "write_only image2d_t out";
  }
  else if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 77)
  {
    int v22 = "texture2d<float, access::write> outputTexture";
  }
  else
  {
    int v22 = 0;
  }
  if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 74)
  {
    uint64_t v23 = "write_imagef";
  }
  else if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 76)
  {
    uint64_t v23 = "gl_FragColor";
  }
  else if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 77)
  {
    uint64_t v23 = "outputTexture.write";
  }
  else
  {
    uint64_t v23 = 0;
  }
  long long v24 = (void *)*((void *)this + 1);
  if ((*(unsigned int (**)(void *))(*v24 + 232))(v24))
  {
    do
      long long v24 = (void *)(*(uint64_t (**)(void *, void))(*v24 + 48))(v24, 0);
    while (((*(uint64_t (**)(void *))(*v24 + 232))(v24) & 1) != 0);
  }
  int v25 = (*(uint64_t (**)(void *))(*v24 + 16))(v24);
  uint64_t v26 = *v24;
  if (v25 == 47)
  {
    unsigned int v27 = (*(uint64_t (**)(void *))(v26 + 408))(v24);
    if (v27 <= 0x3C && ((1 << v27) & 0x1FEFC00000000000) != 0)
    {
      int v29 = (*(uint64_t (**)(void *))(*v24 + 408))(v24);
      long long v30 = CI::Kernel::builtin(v29);
      long long v31 = (char **)((char *)this + 296);
      goto LABEL_64;
    }
LABEL_87:
    long long v31 = (char **)((char *)this + 296);
    goto LABEL_305;
  }
  if ((*(unsigned int (**)(void *))(v26 + 16))(v24) != 49) {
    goto LABEL_87;
  }
  long long v30 = (void (***)(CI::ColorKernel *__hidden))v24[6];
  long long v31 = (char **)((char *)this + 296);
  if (*((_DWORD *)v30 + 4)) {
    goto LABEL_305;
  }
LABEL_64:
  long long v32 = strstr((char *)v13, "writeImage");
  if (v32 > (char *)v13)
  {
    long long v33 = (std::string *)v32;
    x_stream_write((uint64_t)v31, v13, v32 - (char *)v13);
    x_stream_write((uint64_t)v31, "_STUB_", 6uLL);
    uint64_t v13 = v33;
  }
  long long v34 = strstr((char *)v13, "writeImageWidth");
  if (v34 > (char *)v13)
  {
    long long v35 = (std::string *)v34;
    x_stream_write((uint64_t)v31, v13, v34 - (char *)v13);
    x_stream_write((uint64_t)v31, "_STUB_", 6uLL);
    uint64_t v13 = v35;
  }
  long long v36 = strstr((char *)v13, "writeImageHeight");
  if (v36 > (char *)v13)
  {
    long long v37 = (std::string *)v36;
    x_stream_write((uint64_t)v31, v13, v36 - (char *)v13);
    x_stream_write((uint64_t)v31, "_STUB_", 6uLL);
    uint64_t v13 = v37;
  }
  long long v38 = strstr((char *)v13, "writeImagePlane");
  if (v38 > (char *)v13)
  {
    long long v39 = (std::string *)v38;
    x_stream_write((uint64_t)v31, v13, v38 - (char *)v13);
    x_stream_write((uint64_t)v31, "_STUB_", 6uLL);
    uint64_t v13 = v39;
  }
  long long v40 = strstr((char *)v13, "writePixel");
  if (v40 > (char *)v13)
  {
    long long v41 = (std::string *)v40;
    x_stream_write((uint64_t)v31, v13, v40 - (char *)v13);
    x_stream_write((uint64_t)v31, "_STUB_", 6uLL);
    uint64_t v13 = v41;
  }
  long long v42 = strstr((char *)v13, "writeCoord");
  if (v42 > (char *)v13)
  {
    long long v43 = (std::string *)v42;
    x_stream_write((uint64_t)v31, v13, v42 - (char *)v13);
    x_stream_write((uint64_t)v31, "_STUB_", 6uLL);
    uint64_t v13 = v43;
  }
  long long v44 = strstr((char *)v13, "_ci_simd_shuffle_down");
  if (v44 > (char *)v13)
  {
    long long v45 = (std::string *)v44;
    x_stream_write((uint64_t)v31, v13, v44 - (char *)v13);
    x_stream_write((uint64_t)v31, "_STUB_", 6uLL);
    uint64_t v13 = v45;
  }
  long long v46 = strstr((char *)v13, "_ci_simdgroup_barrier");
  if (v46 > (char *)v13)
  {
    long long v47 = (std::string *)v46;
    x_stream_write((uint64_t)v31, v13, v46 - (char *)v13);
    x_stream_write((uint64_t)v31, "_STUB_", 6uLL);
    uint64_t v13 = v47;
  }
  if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 76) {
    goto LABEL_303;
  }
  memset(&__p, 0, sizeof(__p));
  v414 = 0;
  v415 = 0;
  unint64_t v416 = 0;
  v400 = v23;
  if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 74)
  {
    std::string::size_type v48 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      uint64_t v52 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v52 + 1) >> 61) {
        goto LABEL_675;
      }
      unint64_t v53 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
      if (v53 <= v52 + 1) {
        unint64_t v53 = v52 + 1;
      }
      if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v54 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v54 = v53;
      }
      if (v54) {
        uint64_t v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v54);
      }
      else {
        uint64_t v55 = 0;
      }
      long long v60 = &v55[8 * v52];
      std::string::size_type v61 = (std::string::size_type)&v55[8 * v54];
      *(void *)long long v60 = "write_only image2d_t _outputTexture";
      long long v49 = v60 + 8;
      long long v62 = (char *)__p.__r_.__value_.__l.__size_;
      std::string::size_type v63 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        do
        {
          uint64_t v64 = *((void *)v62 - 1);
          v62 -= 8;
          *((void *)v60 - 1) = v64;
          v60 -= 8;
        }
        while (v62 != (char *)v63);
        long long v62 = (char *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v49;
      __p.__r_.__value_.__r.__words[2] = v61;
      if (v62) {
        operator delete(v62);
      }
    }
    else
    {
      *(void *)__p.__r_.__value_.__l.__size_ = "write_only image2d_t _outputTexture";
      long long v49 = (void *)(v48 + 8);
    }
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v49;
    if ((unint64_t)v49 >= __p.__r_.__value_.__r.__words[2])
    {
      uint64_t v66 = (uint64_t)((uint64_t)v49 - __p.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v66 + 1) >> 61) {
        goto LABEL_675;
      }
      unint64_t v67 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
      if (v67 <= v66 + 1) {
        unint64_t v67 = v66 + 1;
      }
      if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v68 = v67;
      }
      if (v68) {
        long long v69 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v68);
      }
      else {
        long long v69 = 0;
      }
      long long v70 = &v69[8 * v66];
      std::string::size_type v71 = (std::string::size_type)&v69[8 * v68];
      *(void *)long long v70 = "write_only image2d_t _outputTexturePlane";
      long long v65 = v70 + 8;
      long long v72 = (char *)__p.__r_.__value_.__l.__size_;
      std::string::size_type v73 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        do
        {
          uint64_t v74 = *((void *)v72 - 1);
          v72 -= 8;
          *((void *)v70 - 1) = v74;
          v70 -= 8;
        }
        while (v72 != (char *)v73);
        long long v72 = (char *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v70;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v65;
      __p.__r_.__value_.__r.__words[2] = v71;
      if (v72) {
        operator delete(v72);
      }
    }
    else
    {
      *long long v49 = "write_only image2d_t _outputTexturePlane";
      long long v65 = v49 + 1;
    }
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v65;
    if ((unint64_t)v65 >= __p.__r_.__value_.__r.__words[2])
    {
      uint64_t v76 = (uint64_t)((uint64_t)v65 - __p.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v76 + 1) >> 61) {
        goto LABEL_675;
      }
      unint64_t v77 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
      if (v77 <= v76 + 1) {
        unint64_t v77 = v76 + 1;
      }
      if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v78 = v77;
      }
      if (v78) {
        long long v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v78);
      }
      else {
        long long v79 = 0;
      }
      long long v80 = &v79[8 * v76];
      std::string::size_type v81 = (std::string::size_type)&v79[8 * v78];
      *(void *)long long v80 = "int2 _writeLoc";
      std::string::size_type v75 = (std::string::size_type)(v80 + 8);
      long long v82 = (char *)__p.__r_.__value_.__l.__size_;
      std::string::size_type v83 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        do
        {
          uint64_t v84 = *((void *)v82 - 1);
          v82 -= 8;
          *((void *)v80 - 1) = v84;
          v80 -= 8;
        }
        while (v82 != (char *)v83);
        long long v82 = (char *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
      __p.__r_.__value_.__l.__size_ = v75;
      __p.__r_.__value_.__r.__words[2] = v81;
      if (v82) {
        operator delete(v82);
      }
    }
    else
    {
      *long long v65 = "int2 _writeLoc";
      std::string::size_type v75 = (std::string::size_type)(v65 + 1);
    }
    __p.__r_.__value_.__l.__size_ = v75;
    std::string::size_type v85 = v415;
    if ((unint64_t)v415 >= v416)
    {
      uint64_t v87 = (v415 - (unsigned char *)v414) >> 3;
      if ((unint64_t)(v87 + 1) >> 61) {
        goto LABEL_675;
      }
      unint64_t v88 = (uint64_t)(v416 - (void)v414) >> 2;
      if (v88 <= v87 + 1) {
        unint64_t v88 = v87 + 1;
      }
      if (v416 - (unint64_t)v414 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v89 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v89 = v88;
      }
      if (v89) {
        uint64_t v90 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v416, v89);
      }
      else {
        uint64_t v90 = 0;
      }
      uint64_t v91 = &v90[8 * v87];
      uint64_t v92 = &v90[8 * v89];
      *(void *)uint64_t v91 = "out";
      uint64_t v86 = v91 + 8;
      uint64_t v94 = (char *)v414;
      unint64_t v93 = v415;
      if (v415 != v414)
      {
        do
        {
          uint64_t v95 = *((void *)v93 - 1);
          v93 -= 8;
          *((void *)v91 - 1) = v95;
          v91 -= 8;
        }
        while (v93 != v94);
        unint64_t v93 = (char *)v414;
      }
      v414 = v91;
      v415 = (char *)v86;
      unint64_t v416 = (unint64_t)v92;
      if (v93) {
        operator delete(v93);
      }
    }
    else
    {
      *(void *)v415 = "out";
      uint64_t v86 = v85 + 8;
    }
    v415 = (char *)v86;
    if ((unint64_t)v86 >= v416)
    {
      uint64_t v97 = ((char *)v86 - (unsigned char *)v414) >> 3;
      if ((unint64_t)(v97 + 1) >> 61) {
        goto LABEL_675;
      }
      unint64_t v98 = (uint64_t)(v416 - (void)v414) >> 2;
      if (v98 <= v97 + 1) {
        unint64_t v98 = v97 + 1;
      }
      if (v416 - (unint64_t)v414 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v99 = v98;
      }
      if (v99) {
        unint64_t v100 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v416, v99);
      }
      else {
        unint64_t v100 = 0;
      }
      uint64_t v101 = (const char **)&v100[8 * v97];
      uint64_t v102 = &v100[8 * v99];
      *uint64_t v101 = "out1";
      std::string::size_type v96 = v101 + 1;
      uint64_t v104 = (char *)v414;
      uint64_t v103 = v415;
      if (v415 != v414)
      {
        do
        {
          uint64_t v105 = (const char *)*((void *)v103 - 1);
          v103 -= 8;
          *--uint64_t v101 = v105;
        }
        while (v103 != v104);
        uint64_t v103 = (char *)v414;
      }
      v414 = v101;
      v415 = (char *)v96;
      unint64_t v416 = (unint64_t)v102;
      if (v103) {
        operator delete(v103);
      }
    }
    else
    {
      *uint64_t v86 = "out1";
      std::string::size_type v96 = (const char **)(v86 + 1);
    }
    v415 = (char *)v96;
    if ((unint64_t)v96 < v416)
    {
      unsigned int v106 = "_writeLoc";
LABEL_263:
      *std::string::size_type v96 = v106;
      vImagePixelCount v113 = (char *)(v96 + 1);
LABEL_278:
      v415 = v113;
      long long v31 = (char **)((char *)this + 296);
      goto LABEL_279;
    }
    uint64_t v107 = ((char *)v96 - (unsigned char *)v414) >> 3;
    if (!((unint64_t)(v107 + 1) >> 61))
    {
      unint64_t v108 = (uint64_t)(v416 - (void)v414) >> 2;
      if (v108 <= v107 + 1) {
        unint64_t v108 = v107 + 1;
      }
      if (v416 - (unint64_t)v414 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v109 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v109 = v108;
      }
      if (v109) {
        uint64_t v110 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v416, v109);
      }
      else {
        uint64_t v110 = 0;
      }
      unint64_t v111 = &v110[8 * v107];
      long long v112 = &v110[8 * v109];
      *(void *)unint64_t v111 = "_writeLoc";
      vImagePixelCount v113 = v111 + 8;
      vImagePixelCount v115 = (char *)v414;
      vImagePixelCount v114 = v415;
      if (v415 == v414) {
        goto LABEL_276;
      }
      do
      {
        uint64_t v116 = *((void *)v114 - 1);
        v114 -= 8;
        *((void *)v111 - 1) = v116;
        v111 -= 8;
      }
      while (v114 != v115);
LABEL_275:
      vImagePixelCount v114 = (char *)v414;
LABEL_276:
      v414 = v111;
      v415 = v113;
      unint64_t v416 = (unint64_t)v112;
      if (v114) {
        operator delete(v114);
      }
      goto LABEL_278;
    }
    goto LABEL_675;
  }
  if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 77)
  {
    std::string::size_type v50 = __p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
    {
      uint64_t v56 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v56 + 1) >> 61) {
        goto LABEL_675;
      }
      unint64_t v57 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
      if (v57 <= v56 + 1) {
        unint64_t v57 = v56 + 1;
      }
      if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v58 = v57;
      }
      if (v58) {
        long long v59 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v58);
      }
      else {
        long long v59 = 0;
      }
      vImagePixelCount v117 = &v59[8 * v56];
      std::string::size_type v118 = (std::string::size_type)&v59[8 * v58];
      *(void *)vImagePixelCount v117 = "texture2d<float, access::write> _outputTexture";
      long long v51 = v117 + 8;
      unint64_t v119 = (char *)__p.__r_.__value_.__l.__size_;
      std::string::size_type v120 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        do
        {
          uint64_t v121 = *((void *)v119 - 1);
          v119 -= 8;
          *((void *)v117 - 1) = v121;
          v117 -= 8;
        }
        while (v119 != (char *)v120);
        unint64_t v119 = (char *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v117;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
      __p.__r_.__value_.__r.__words[2] = v118;
      if (v119) {
        operator delete(v119);
      }
    }
    else
    {
      *(void *)__p.__r_.__value_.__l.__size_ = "texture2d<float, access::write> _outputTexture";
      long long v51 = (void *)(v50 + 8);
    }
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v51;
    if ((unint64_t)v51 >= __p.__r_.__value_.__r.__words[2])
    {
      uint64_t v123 = (uint64_t)((uint64_t)v51 - __p.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v123 + 1) >> 61) {
        goto LABEL_675;
      }
      unint64_t v124 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
      if (v124 <= v123 + 1) {
        unint64_t v124 = v123 + 1;
      }
      if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v125 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v125 = v124;
      }
      if (v125) {
        char v126 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v125);
      }
      else {
        char v126 = 0;
      }
      uint64_t v127 = &v126[8 * v123];
      std::string::size_type v128 = (std::string::size_type)&v126[8 * v125];
      *(void *)uint64_t v127 = "texture2d<float, access::write> _outputTexturePlane";
      double v122 = v127 + 8;
      uint64_t v129 = (char *)__p.__r_.__value_.__l.__size_;
      std::string::size_type v130 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        do
        {
          uint64_t v131 = *((void *)v129 - 1);
          v129 -= 8;
          *((void *)v127 - 1) = v131;
          v127 -= 8;
        }
        while (v129 != (char *)v130);
        uint64_t v129 = (char *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v127;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v122;
      __p.__r_.__value_.__r.__words[2] = v128;
      if (v129) {
        operator delete(v129);
      }
    }
    else
    {
      *long long v51 = "texture2d<float, access::write> _outputTexturePlane";
      double v122 = v51 + 1;
    }
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v122;
    if ((unint64_t)v122 >= __p.__r_.__value_.__r.__words[2])
    {
      uint64_t v133 = (uint64_t)((uint64_t)v122 - __p.__r_.__value_.__r.__words[0]) >> 3;
      if ((unint64_t)(v133 + 1) >> 61) {
        goto LABEL_675;
      }
      unint64_t v134 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
      if (v134 <= v133 + 1) {
        unint64_t v134 = v133 + 1;
      }
      if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v135 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v135 = v134;
      }
      if (v135) {
        unint64_t v136 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&__p.__r_.__value_.__r.__words[2], v135);
      }
      else {
        unint64_t v136 = 0;
      }
      unint64_t v137 = &v136[8 * v133];
      std::string::size_type v138 = (std::string::size_type)&v136[8 * v135];
      *(void *)unint64_t v137 = "uint2 _wc";
      std::string::size_type v132 = (std::string::size_type)(v137 + 8);
      char v139 = (char *)__p.__r_.__value_.__l.__size_;
      std::string::size_type v140 = __p.__r_.__value_.__r.__words[0];
      if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
      {
        do
        {
          uint64_t v141 = *((void *)v139 - 1);
          v139 -= 8;
          *((void *)v137 - 1) = v141;
          v137 -= 8;
        }
        while (v139 != (char *)v140);
        char v139 = (char *)__p.__r_.__value_.__r.__words[0];
      }
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v137;
      __p.__r_.__value_.__l.__size_ = v132;
      __p.__r_.__value_.__r.__words[2] = v138;
      if (v139) {
        operator delete(v139);
      }
    }
    else
    {
      *double v122 = "uint2 _wc";
      std::string::size_type v132 = (std::string::size_type)(v122 + 1);
    }
    __p.__r_.__value_.__l.__size_ = v132;
    v142 = v415;
    if ((unint64_t)v415 >= v416)
    {
      uint64_t v144 = (v415 - (unsigned char *)v414) >> 3;
      if ((unint64_t)(v144 + 1) >> 61) {
        goto LABEL_675;
      }
      unint64_t v145 = (uint64_t)(v416 - (void)v414) >> 2;
      if (v145 <= v144 + 1) {
        unint64_t v145 = v144 + 1;
      }
      if (v416 - (unint64_t)v414 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v146 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v146 = v145;
      }
      if (v146) {
        signed int v147 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v416, v146);
      }
      else {
        signed int v147 = 0;
      }
      int v148 = &v147[8 * v144];
      uint64_t v149 = &v147[8 * v146];
      *(void *)int v148 = "outputTexture";
      uint64_t v143 = v148 + 8;
      char v151 = (char *)v414;
      uint64_t v150 = v415;
      if (v415 != v414)
      {
        do
        {
          uint64_t v152 = *((void *)v150 - 1);
          v150 -= 8;
          *((void *)v148 - 1) = v152;
          v148 -= 8;
        }
        while (v150 != v151);
        uint64_t v150 = (char *)v414;
      }
      v414 = v148;
      v415 = (char *)v143;
      unint64_t v416 = (unint64_t)v149;
      if (v150) {
        operator delete(v150);
      }
    }
    else
    {
      *(void *)v415 = "outputTexture";
      uint64_t v143 = v142 + 8;
    }
    v415 = (char *)v143;
    if ((unint64_t)v143 >= v416)
    {
      uint64_t v153 = ((char *)v143 - (unsigned char *)v414) >> 3;
      if ((unint64_t)(v153 + 1) >> 61) {
        goto LABEL_675;
      }
      unint64_t v154 = (uint64_t)(v416 - (void)v414) >> 2;
      if (v154 <= v153 + 1) {
        unint64_t v154 = v153 + 1;
      }
      if (v416 - (unint64_t)v414 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v155 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v155 = v154;
      }
      if (v155) {
        char v156 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v416, v155);
      }
      else {
        char v156 = 0;
      }
      unint64_t v157 = (const char **)&v156[8 * v153];
      unint64_t v158 = &v156[8 * v155];
      *unint64_t v157 = "outputTexture1";
      std::string::size_type v96 = v157 + 1;
      uint64_t v160 = (char *)v414;
      int v159 = v415;
      if (v415 != v414)
      {
        do
        {
          v161 = (const char *)*((void *)v159 - 1);
          v159 -= 8;
          *--unint64_t v157 = v161;
        }
        while (v159 != v160);
        int v159 = (char *)v414;
      }
      v414 = v157;
      v415 = (char *)v96;
      unint64_t v416 = (unint64_t)v158;
      if (v159) {
        operator delete(v159);
      }
    }
    else
    {
      *uint64_t v143 = "outputTexture1";
      std::string::size_type v96 = (const char **)(v143 + 1);
    }
    v415 = (char *)v96;
    if ((unint64_t)v96 < v416)
    {
      unsigned int v106 = "_wc";
      goto LABEL_263;
    }
    uint64_t v162 = ((char *)v96 - (unsigned char *)v414) >> 3;
    if (!((unint64_t)(v162 + 1) >> 61))
    {
      unint64_t v163 = (uint64_t)(v416 - (void)v414) >> 2;
      if (v163 <= v162 + 1) {
        unint64_t v163 = v162 + 1;
      }
      if (v416 - (unint64_t)v414 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v164 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v164 = v163;
      }
      if (v164) {
        unint64_t v165 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v416, v164);
      }
      else {
        unint64_t v165 = 0;
      }
      unint64_t v111 = &v165[8 * v162];
      long long v112 = &v165[8 * v164];
      *(void *)unint64_t v111 = "_wc";
      vImagePixelCount v113 = v111 + 8;
      unint64_t v166 = (char *)v414;
      vImagePixelCount v114 = v415;
      if (v415 == v414) {
        goto LABEL_276;
      }
      do
      {
        uint64_t v167 = *((void *)v114 - 1);
        v114 -= 8;
        *((void *)v111 - 1) = v167;
        v111 -= 8;
      }
      while (v114 != v166);
      goto LABEL_275;
    }
LABEL_675:
    abort();
  }
LABEL_279:
  uint64_t v168 = (char *)v30[3];
  __dst = 0;
  uint64_t v413 = 0;
  v411 = 0;
  unint64_t v169 = (const void *)__p.__r_.__value_.__r.__words[0];
  int64_t v170 = __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
  {
    std::vector<unsigned long>::__vallocate[abi:nn180100](&v411, v170 >> 3);
    size_t v171 = (char *)__dst;
    memmove(__dst, v169, v170);
    __dst = &v171[v170];
  }
  appended = CI::append_arguments_to_kernel((uint64_t)v31, (char *)v13, v168, &v411);
  if (v411)
  {
    __dst = v411;
    operator delete(v411);
  }
  unint64_t v173 = (char *)v30[3];
  if (strstr(v173, "_ci_writeTG_42X"))
  {
    x_stream_printf((uint64_t)v31, ", %s", v174, v175, v176, v177, v178, v179, (uint64_t)"threadgroup float4 tgcc[]");
    unint64_t v173 = (char *)v30[3];
  }
  if (strstr(v173, "_ci_writeTG_42X"))
  {
    uint64_t v180 = strstr(appended, "float4 tgcc");
    if (v180 > appended)
    {
      signed int v181 = v180;
      x_stream_write((uint64_t)v31, appended, v180 - appended);
      x_stream_write((uint64_t)v31, "//", 2uLL);
      appended = v181;
    }
  }
  signed int v182 = strstr(appended, a2);
  signed int v183 = strstr(v182, v22);
  if (v183 > appended)
  {
    int v184 = v183;
    x_stream_write((uint64_t)v31, appended, v183 - appended);
    x_stream_printf((uint64_t)v31, "%s,", v185, v186, v187, v188, v189, v190, (uint64_t)v22);
    x_stream_printf((uint64_t)v31, " %s1,", v191, v192, v193, v194, v195, v196, (uint64_t)v22);
    size_t v197 = strlen(v22);
    appended = strchr(&v184[v197], 44) + 1;
  }
  size_t v198 = (char *)v30[3];
  if (strstr(v198, "_ci_writeTG_42X"))
  {
    unint64_t v199 = strchr(appended, 123);
    if (v199 > appended)
    {
      uint64_t v200 = v199;
      x_stream_write((uint64_t)v31, appended, v199 - appended);
      x_stream_write((uint64_t)v31, "{\nthreadgroup float4 _ci_writeTG_42X_tgcc[16*16] = {0.,0.,0.,0.};\n", 0x42uLL);
      appended = v200 + 1;
      size_t v198 = (char *)v30[3];
    }
  }
  v408 = 0;
  v409 = 0;
  uint64_t v410 = 0;
  uint64_t v201 = v414;
  int64_t v202 = v415 - (unsigned char *)v414;
  if (v415 != v414)
  {
    std::vector<unsigned long>::__vallocate[abi:nn180100](&v408, v202 >> 3);
    vImagePixelCount v203 = (char *)v409;
    memmove(v409, v201, v202);
    v409 = &v203[v202];
  }
  uint64_t v13 = (std::string *)CI::append_arguments_to_kernel((uint64_t)v31, appended, v198, &v408);
  if (v408)
  {
    v409 = v408;
    operator delete(v408);
  }
  uint64_t v23 = v400;
  if (strstr((char *)v30[3], "_ci_writeTG_42X")) {
    x_stream_printf((uint64_t)v31, ", %s", v204, v205, v206, v207, v208, v209, (uint64_t)"_ci_writeTG_42X_tgcc");
  }
  if (v414)
  {
    v415 = (char *)v414;
    operator delete(v414);
  }
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_303:
  v210 = strstr((char *)v13, v23);
  if (v210 > (char *)v13)
  {
    uint64_t v211 = (std::string *)v210;
    x_stream_write((uint64_t)v31, v13, v210 - (char *)v13);
    x_stream_write((uint64_t)v31, "//", 2uLL);
    uint64_t v13 = v211;
  }
LABEL_305:
  if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 77
    && CI::MetalContext::use_imageblocks_for_format(*(void *)this, *(_DWORD *)(*((void *)this + 2) + 140)))
  {
    uint64_t v212 = strstr((char *)v13, "kernel void");
    x_stream_write((uint64_t)v31, v13, v212 - (char *)v13);
    x_stream_write((uint64_t)v31, "struct PixelData {\n  float4 c", 0x1DuLL);
    if (CI_ENABLE_METAL_IMAGEBLOCKS() == 2) {
      x_stream_write((uint64_t)v31, " [[color(0)]]", 0xDuLL);
    }
    x_stream_write((uint64_t)v31, ";\n};\n\n", 6uLL);
    vImagePixelCount v213 = strstr(v212, v22);
    if (v213 > v212)
    {
      uint64_t v214 = v213;
      x_stream_write((uint64_t)v31, v212, v213 - v212);
      x_stream_write((uint64_t)v31, "imageblock<PixelData> imageBlock, ushort2 lid [[ thread_position_in_threadgroup ]],\n", 0x54uLL);
      uint64_t v212 = v214;
    }
    unsigned int v215 = strstr(v212, "if (gid.x >= abs(params.outputRect.z) || gid.y >= abs(params.outputRect.w)) return;");
    if (v215 > v212)
    {
      v216 = v215;
      x_stream_write((uint64_t)v31, v212, v215 - v212);
      x_stream_write((uint64_t)v31, "if (any(static_cast<float2>(gid) < params.outputRect.xy)) return;\n  ", 0x44uLL);
      x_stream_write((uint64_t)v31, "if (any(static_cast<float2>(gid) >= params.outputRect.xy + abs(params.outputRect.zw))) return;",
        0x5EuLL);
      uint64_t v212 = v216 + 83;
    }
    v217 = strstr(v212, " + params.outputRect.xy");
    if (v217 > v212)
    {
      v218 = v217;
      x_stream_write((uint64_t)v31, v212, v217 - v212);
      uint64_t v212 = v218 + 23;
    }
    v219 = strstr(v212, v23);
    if (v219 <= v212)
    {
      uint64_t v13 = (std::string *)v212;
    }
    else
    {
      unint64_t v220 = v219;
      x_stream_write((uint64_t)v31, v212, v219 - v212);
      if (CI_ENABLE_METAL_IMAGEBLOCKS() == 2)
      {
        x_stream_write((uint64_t)v31, "\n  PixelData output = { ", 0x18uLL);
        v221 = &v220[strlen(v23) + 1];
        unint64_t v222 = strchr(v220, 44);
        x_stream_write((uint64_t)v31, v221, v222 - v221);
        x_stream_write((uint64_t)v31, " };\n", 4uLL);
        x_stream_write((uint64_t)v31, "  imageBlock.write(output, lid);\n", 0x21uLL);
        uint64_t v13 = (std::string *)(strchr(v222, 59) + 2);
      }
      else
      {
        x_stream_write((uint64_t)v31, "\n  threadgroup_imageblock PixelData* output = imageBlock.data(lid);\n", 0x44uLL);
        x_stream_write((uint64_t)v31, "  output->c = ", 0xEuLL);
        uint64_t v223 = &v220[strlen(v23) + 1];
        uint64_t v13 = (std::string *)strchr(v220, 44);
        x_stream_write((uint64_t)v31, v223, (char *)v13 - v223);
        x_stream_write((uint64_t)v31, ";\n", 2uLL);
        x_stream_write((uint64_t)v31, "  threadgroup_barrier(mem_flags::mem_threadgroup_imageblock);\n", 0x3EuLL);
        x_stream_write((uint64_t)v31, "  if (lid.x == 0 && lid.y == 0)\n", 0x20uLL);
        x_stream_write((uint64_t)v31, "    outputTexture.write(imageBlock.slice(output->c)", 0x33uLL);
      }
    }
  }
  if ((*(unsigned int (**)(void))(**(void **)this + 16))() == 76)
  {
    uint64_t v224 = *((void *)this + 2);
    if (!*(unsigned char *)(v224 + 136))
    {
      if (*(unsigned char *)(v224 + 137))
      {
        p_p = &__p;
        std::string::basic_string[abi:nn180100]<0>(&__p, (char *)v13);
        v232 = (char *)&v414;
        std::string::basic_string[abi:nn180100]<0>(&v414, "sampler2D _i");
        std::string::size_type v233 = 0;
        int v398 = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          std::string::size_type v234 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else
        {
          std::string::size_type v234 = __p.__r_.__value_.__l.__size_;
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((v416 & 0x8000000000000000) == 0)
        {
          int64_t v235 = HIBYTE(v416);
        }
        else
        {
          v232 = (char *)v414;
          int64_t v235 = (int64_t)v415;
        }
        unint64_t v236 = (char *)p_p + v234;
        while (!v235)
        {
LABEL_349:
          if (v233 != -1)
          {
            ++v398;
            v233 += v235;
            if (v234 >= v233) {
              continue;
            }
          }
          goto LABEL_351;
        }
        v237 = (char *)p_p + v233;
        int64_t v238 = v234 - v233;
        if (v238 >= v235)
        {
          int v239 = *v232;
          do
          {
            int64_t v240 = v238 - v235;
            if (v240 == -1) {
              break;
            }
            size_t v241 = (char *)memchr(v237, v239, v240 + 1);
            if (!v241) {
              break;
            }
            vImagePixelCount v242 = v241;
            if (!memcmp(v241, v232, v235))
            {
              if (v242 == v236) {
                break;
              }
              std::string::size_type v233 = v242 - (char *)p_p;
              goto LABEL_349;
            }
            v237 = v242 + 1;
            int64_t v238 = v236 - (v242 + 1);
          }
          while (v238 >= v235);
        }
LABEL_351:
        std::string::basic_string[abi:nn180100]<0>(&v405, "uniform highp sampler2D _samplers [");
        if ((v407 & 0x80u) == 0) {
          unint64_t v243 = (char *)&v405;
        }
        else {
          unint64_t v243 = (char *)v405;
        }
        if ((v407 & 0x80u) == 0) {
          int64_t v244 = v407;
        }
        else {
          int64_t v244 = *(void *)v406;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v245 = &__p;
        }
        else {
          v245 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v246 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v246 = __p.__r_.__value_.__l.__size_;
        }
        if (v244)
        {
          uint64_t v247 = (char *)v245 + v246;
          if ((uint64_t)v246 >= v244)
          {
            int v275 = *v243;
            int64_t v276 = v246;
            v277 = v245;
            do
            {
              int64_t v278 = v276 - v244;
              if (v278 == -1) {
                break;
              }
              v279 = (char *)memchr(v277, v275, v278 + 1);
              if (!v279) {
                break;
              }
              v248 = v279;
              if (!memcmp(v279, v243, v244)) {
                goto LABEL_366;
              }
              v277 = (std::string *)(v248 + 1);
              int64_t v276 = v247 - (v248 + 1);
            }
            while (v276 >= v244);
          }
          v248 = (char *)v245 + v246;
LABEL_366:
          if (v248 == v247) {
            std::string::size_type v249 = -1;
          }
          else {
            std::string::size_type v249 = v248 - (char *)v245;
          }
          if (v246 < v249)
          {
            uint64_t v250 = -1;
            goto LABEL_380;
          }
        }
        else
        {
          std::string::size_type v249 = 0;
        }
        unint64_t v251 = (char *)v245 + v249;
        v252 = (char *)v245 + v246;
        size_t v253 = v246 - v249;
        if ((uint64_t)(v246 - v249) >= 1)
        {
          do
          {
            unint64_t v254 = memchr(v251, 59, v253);
            if (!v254) {
              break;
            }
            if (*v254 == 59) {
              goto LABEL_377;
            }
            unint64_t v251 = v254 + 1;
            size_t v253 = v252 - v251;
          }
          while (v252 - v251 > 0);
        }
        unint64_t v254 = (char *)v245 + v246;
LABEL_377:
        if (v254 == v252) {
          uint64_t v250 = -1;
        }
        else {
          uint64_t v250 = v254 - (unsigned char *)v245;
        }
LABEL_380:
        std::string::basic_string(&__str, &__p, v249 + v244, v250 - (v249 + v244), (std::allocator<char> *)&v403);
        unsigned int v255 = std::stoi(&__str, 0, 10);
        std::string::erase(&__p, v249, v250 - v249 + 1);
        unsigned int v256 = v255 + v398;
        std::to_string(&v422, v255 + v398);
        uint64_t v257 = std::string::insert(&v422, 0, "uniform highp sampler2D _samplers [", 0x23uLL);
        std::string::size_type v258 = v257->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v402.__r_.__value_.__l.__data_ = *(_OWORD *)&v257->__r_.__value_.__l.__data_;
        v402.__r_.__value_.__r.__words[2] = v258;
        v257->__r_.__value_.__l.__size_ = 0;
        v257->__r_.__value_.__r.__words[2] = 0;
        v257->__r_.__value_.__r.__words[0] = 0;
        unint64_t v259 = std::string::append(&v402, "];", 2uLL);
        std::string::size_type v260 = v259->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v403.__r_.__value_.__l.__data_ = *(_OWORD *)&v259->__r_.__value_.__l.__data_;
        v403.__r_.__value_.__r.__words[2] = v260;
        v259->__r_.__value_.__l.__size_ = 0;
        v259->__r_.__value_.__r.__words[2] = 0;
        v259->__r_.__value_.__r.__words[0] = 0;
        if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          vImagePixelCount v261 = &v403;
        }
        else {
          vImagePixelCount v261 = (std::string *)v403.__r_.__value_.__r.__words[0];
        }
        if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v262 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v262 = v403.__r_.__value_.__l.__size_;
        }
        std::string::insert(&__p, v249, (const std::string::value_type *)v261, v262);
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v403.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v402.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v422.__r_.__value_.__l.__data_);
        }
        std::to_string(&v402, v255);
        v263 = std::string::insert(&v402, 0, "uniform highp mat3 _transforms [", 0x20uLL);
        std::string::size_type v264 = v263->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v403.__r_.__value_.__l.__data_ = *(_OWORD *)&v263->__r_.__value_.__l.__data_;
        v403.__r_.__value_.__r.__words[2] = v264;
        v263->__r_.__value_.__l.__size_ = 0;
        v263->__r_.__value_.__r.__words[2] = 0;
        v263->__r_.__value_.__r.__words[0] = 0;
        v265 = std::string::append(&v403, "];", 2uLL);
        uint64_t v266 = (void *)v265->__r_.__value_.__r.__words[0];
        v422.__r_.__value_.__r.__words[0] = v265->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v422.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v265->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v267 = HIBYTE(v265->__r_.__value_.__r.__words[2]);
        v265->__r_.__value_.__l.__size_ = 0;
        v265->__r_.__value_.__r.__words[2] = 0;
        v265->__r_.__value_.__r.__words[0] = 0;
        if ((char)v407 < 0) {
          operator delete(v405);
        }
        v405 = v266;
        *(void *)v406 = v422.__r_.__value_.__r.__words[0];
        *(void *)&v406[7] = *(std::string::size_type *)((char *)v422.__r_.__value_.__r.__words + 7);
        unsigned __int8 v407 = v267;
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v403.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v402.__r_.__value_.__l.__data_);
        }
        int64_t v268 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v269 = &__p;
        }
        else {
          size_t v269 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((v407 & 0x80u) == 0) {
          size_t v270 = (char *)&v405;
        }
        else {
          size_t v270 = (char *)v405;
        }
        if ((v407 & 0x80u) == 0) {
          int64_t v271 = v407;
        }
        else {
          int64_t v271 = *(void *)v406;
        }
        if (v271)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int64_t v268 = __p.__r_.__value_.__l.__size_;
          }
          v272 = (char *)v269 + v268;
          if (v268 >= v271)
          {
            int v280 = *v270;
            v281 = v269;
            do
            {
              int64_t v282 = v268 - v271;
              if (v282 == -1) {
                break;
              }
              v283 = (char *)memchr(v281, v280, v282 + 1);
              if (!v283) {
                break;
              }
              v273 = v283;
              if (!memcmp(v283, v270, v271)) {
                goto LABEL_425;
              }
              v281 = (std::string *)(v273 + 1);
              int64_t v268 = v272 - (v273 + 1);
            }
            while (v268 >= v271);
            v273 = v272;
          }
          else
          {
            v273 = (char *)v269 + v268;
          }
LABEL_425:
          if (v273 == v272) {
            std::string::size_type v274 = -1;
          }
          else {
            std::string::size_type v274 = v273 - (char *)v269;
          }
        }
        else
        {
          std::string::size_type v274 = 0;
        }
        std::string::erase(&__p, v274, v271);
        std::to_string(&v422, v256);
        v284 = std::string::insert(&v422, 0, "uniform highp mat3 _transforms [", 0x20uLL);
        std::string::size_type v285 = v284->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v402.__r_.__value_.__l.__data_ = *(_OWORD *)&v284->__r_.__value_.__l.__data_;
        v402.__r_.__value_.__r.__words[2] = v285;
        v284->__r_.__value_.__l.__size_ = 0;
        v284->__r_.__value_.__r.__words[2] = 0;
        v284->__r_.__value_.__r.__words[0] = 0;
        v286 = std::string::append(&v402, "];", 2uLL);
        std::string::size_type v287 = v286->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v403.__r_.__value_.__l.__data_ = *(_OWORD *)&v286->__r_.__value_.__l.__data_;
        v403.__r_.__value_.__r.__words[2] = v287;
        v286->__r_.__value_.__l.__size_ = 0;
        v286->__r_.__value_.__r.__words[2] = 0;
        v286->__r_.__value_.__r.__words[0] = 0;
        if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v288 = &v403;
        }
        else {
          v288 = (std::string *)v403.__r_.__value_.__r.__words[0];
        }
        if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v289 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v289 = v403.__r_.__value_.__l.__size_;
        }
        std::string::insert(&__p, v274, (const std::string::value_type *)v288, v289);
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v403.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v402.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v422.__r_.__value_.__l.__data_);
        }
        std::to_string(&v402, v255);
        v290 = std::string::insert(&v402, 0, "uniform highp vec4 _extents [", 0x1DuLL);
        std::string::size_type v291 = v290->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v403.__r_.__value_.__l.__data_ = *(_OWORD *)&v290->__r_.__value_.__l.__data_;
        v403.__r_.__value_.__r.__words[2] = v291;
        v290->__r_.__value_.__l.__size_ = 0;
        v290->__r_.__value_.__r.__words[2] = 0;
        v290->__r_.__value_.__r.__words[0] = 0;
        v292 = std::string::append(&v403, "];", 2uLL);
        v293 = (void *)v292->__r_.__value_.__r.__words[0];
        v422.__r_.__value_.__r.__words[0] = v292->__r_.__value_.__l.__size_;
        *(std::string::size_type *)((char *)v422.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v292->__r_.__value_.__r.__words[1] + 7);
        unsigned __int8 v294 = HIBYTE(v292->__r_.__value_.__r.__words[2]);
        v292->__r_.__value_.__l.__size_ = 0;
        v292->__r_.__value_.__r.__words[2] = 0;
        v292->__r_.__value_.__r.__words[0] = 0;
        if ((char)v407 < 0) {
          operator delete(v405);
        }
        v405 = v293;
        *(void *)v406 = v422.__r_.__value_.__r.__words[0];
        *(void *)&v406[7] = *(std::string::size_type *)((char *)v422.__r_.__value_.__r.__words + 7);
        unsigned __int8 v407 = v294;
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v403.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v402.__r_.__value_.__l.__data_);
        }
        int64_t v295 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v296 = &__p;
        }
        else {
          v296 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((v407 & 0x80u) == 0) {
          v297 = (char *)&v405;
        }
        else {
          v297 = (char *)v405;
        }
        if ((v407 & 0x80u) == 0) {
          int64_t v298 = v407;
        }
        else {
          int64_t v298 = *(void *)v406;
        }
        if (v298)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int64_t v295 = __p.__r_.__value_.__l.__size_;
          }
          v299 = (char *)v296 + v295;
          if (v295 >= v298)
          {
            int v393 = *v297;
            v394 = v296;
            do
            {
              int64_t v395 = v295 - v298;
              if (v395 == -1) {
                break;
              }
              v396 = (char *)memchr(v394, v393, v395 + 1);
              if (!v396) {
                break;
              }
              v300 = v396;
              if (!memcmp(v396, v297, v298)) {
                goto LABEL_460;
              }
              v394 = (std::string *)(v300 + 1);
              int64_t v295 = v299 - (v300 + 1);
            }
            while (v295 >= v298);
          }
          v300 = v299;
LABEL_460:
          if (v300 == v299) {
            std::string::size_type v301 = -1;
          }
          else {
            std::string::size_type v301 = v300 - (char *)v296;
          }
        }
        else
        {
          std::string::size_type v301 = 0;
        }
        std::string::erase(&__p, v301, v298);
        std::to_string(&v422, v256);
        v302 = std::string::insert(&v422, 0, "uniform highp vec4 _extents [", 0x1DuLL);
        std::string::size_type v303 = v302->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v402.__r_.__value_.__l.__data_ = *(_OWORD *)&v302->__r_.__value_.__l.__data_;
        v402.__r_.__value_.__r.__words[2] = v303;
        v302->__r_.__value_.__l.__size_ = 0;
        v302->__r_.__value_.__r.__words[2] = 0;
        v302->__r_.__value_.__r.__words[0] = 0;
        v304 = std::string::append(&v402, "];", 2uLL);
        std::string::size_type v305 = v304->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v403.__r_.__value_.__l.__data_ = *(_OWORD *)&v304->__r_.__value_.__l.__data_;
        v403.__r_.__value_.__r.__words[2] = v305;
        v304->__r_.__value_.__l.__size_ = 0;
        v304->__r_.__value_.__r.__words[2] = 0;
        v304->__r_.__value_.__r.__words[0] = 0;
        if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v306 = &v403;
        }
        else {
          v306 = (std::string *)v403.__r_.__value_.__r.__words[0];
        }
        if ((v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v307 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v307 = v403.__r_.__value_.__l.__size_;
        }
        std::string::insert(&__p, v301, (const std::string::value_type *)v306, v307);
        if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v403.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v402.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v422.__r_.__value_.__l.__data_);
        }
        if (v398)
        {
          int v308 = 0;
          while (1)
          {
            int v399 = v308;
            std::string::basic_string[abi:nn180100]<0>(&v403, "uniform lowp sampler2D _i");
            v309 = (v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &v403
                 : (std::string *)v403.__r_.__value_.__r.__words[0];
            int64_t v310 = (v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? HIBYTE(v403.__r_.__value_.__r.__words[2])
                 : v403.__r_.__value_.__l.__size_;
            v311 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &__p
                 : (std::string *)__p.__r_.__value_.__r.__words[0];
            std::string::size_type v312 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? HIBYTE(__p.__r_.__value_.__r.__words[2])
                 : __p.__r_.__value_.__l.__size_;
            if (!v310) {
              break;
            }
            v313 = (char *)v311 + v312;
            if ((uint64_t)v312 >= v310)
            {
              int v382 = v309->__r_.__value_.__s.__data_[0];
              int64_t v383 = v312;
              v384 = v311;
              do
              {
                int64_t v385 = v383 - v310;
                if (v385 == -1) {
                  break;
                }
                v386 = (char *)memchr(v384, v382, v385 + 1);
                if (!v386) {
                  break;
                }
                v314 = v386;
                if (!memcmp(v386, v309, v310)) {
                  goto LABEL_493;
                }
                v384 = (std::string *)(v314 + 1);
                int64_t v383 = v313 - (v314 + 1);
              }
              while (v383 >= v310);
            }
            v314 = (char *)v311 + v312;
LABEL_493:
            if (v314 == v313) {
              std::string::size_type v315 = -1;
            }
            else {
              std::string::size_type v315 = v314 - (char *)v311;
            }
            if (v312 >= v315) {
              goto LABEL_499;
            }
            uint64_t v316 = -1;
LABEL_507:
            std::string::basic_string(&v402, &__p, v315 + v310, v316 - (v315 + v310), (std::allocator<char> *)&v422);
            unsigned int v321 = std::stoi(&v402, 0, 10);
            std::string::erase(&__p, v315, v316 - v315 + 1);
            std::to_string(&v422, v321);
            v322 = std::string::insert(&v422, 0, "_i", 2uLL);
            std::string::size_type v323 = v322->__r_.__value_.__r.__words[0];
            v421.__r_.__value_.__r.__words[0] = v322->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v421.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v322->__r_.__value_.__r.__words[1] + 7);
            std::string::size_type v324 = HIBYTE(v322->__r_.__value_.__r.__words[2]);
            v322->__r_.__value_.__r.__words[0] = 0;
            v322->__r_.__value_.__l.__size_ = 0;
            v322->__r_.__value_.__r.__words[2] = 0;
            if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v403.__r_.__value_.__l.__data_);
            }
            v403.__r_.__value_.__r.__words[0] = v323;
            v403.__r_.__value_.__l.__size_ = v421.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v403.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v421.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v403.__r_.__value_.__s + 23) = v324;
            if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v422.__r_.__value_.__l.__data_);
              std::string::size_type v324 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
              std::string::size_type v323 = v403.__r_.__value_.__r.__words[0];
            }
            std::string::size_type v325 = 0;
            std::string::size_type v326 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v327 = &__p;
            }
            else {
              v327 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v326 = __p.__r_.__value_.__l.__size_;
            }
            BOOL v328 = (v324 & 0x80u) != 0;
            std::string::size_type v329 = v403.__r_.__value_.__l.__size_;
            if ((v324 & 0x80u) == 0) {
              v330 = &v403;
            }
            else {
              v330 = (std::string *)v323;
            }
            if ((v324 & 0x80u) == 0) {
              int64_t v331 = v324;
            }
            else {
              int64_t v331 = v403.__r_.__value_.__l.__size_;
            }
            while (!v331)
            {
LABEL_532:
              if (v325 != -1)
              {
                if (v328) {
                  std::string::size_type v339 = v329;
                }
                else {
                  std::string::size_type v339 = v324;
                }
                std::string::erase(&__p, v325, v339);
                std::to_string(&v401, v321);
                v340 = std::string::insert(&v401, 0, "_samplers[", 0xAuLL);
                std::string::size_type v341 = v340->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v421.__r_.__value_.__l.__data_ = *(_OWORD *)&v340->__r_.__value_.__l.__data_;
                v421.__r_.__value_.__r.__words[2] = v341;
                v340->__r_.__value_.__l.__size_ = 0;
                v340->__r_.__value_.__r.__words[2] = 0;
                v340->__r_.__value_.__r.__words[0] = 0;
                v342 = std::string::append(&v421, "]", 1uLL);
                std::string::size_type v343 = v342->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v422.__r_.__value_.__l.__data_ = *(_OWORD *)&v342->__r_.__value_.__l.__data_;
                v422.__r_.__value_.__r.__words[2] = v343;
                v342->__r_.__value_.__l.__size_ = 0;
                v342->__r_.__value_.__r.__words[2] = 0;
                v342->__r_.__value_.__r.__words[0] = 0;
                if ((v422.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v344 = &v422;
                }
                else {
                  v344 = (std::string *)v422.__r_.__value_.__r.__words[0];
                }
                if ((v422.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v345 = HIBYTE(v422.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v345 = v422.__r_.__value_.__l.__size_;
                }
                std::string::insert(&__p, v325, (const std::string::value_type *)v344, v345);
                if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v422.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v421.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v401.__r_.__value_.__l.__data_);
                }
                v346 = (char *)HIBYTE(v416);
                if ((v416 & 0x8000000000000000) != 0) {
                  v346 = v415;
                }
                v325 += (std::string::size_type)v346;
                std::string::size_type v326 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v327 = &__p;
                }
                else {
                  v327 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v326 = __p.__r_.__value_.__l.__size_;
                }
                BOOL v328 = (v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
                std::string::size_type v329 = v403.__r_.__value_.__l.__size_;
                std::string::size_type v324 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
                v330 = (v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? &v403
                     : (std::string *)v403.__r_.__value_.__r.__words[0];
                int64_t v331 = (v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? HIBYTE(v403.__r_.__value_.__r.__words[2])
                     : v403.__r_.__value_.__l.__size_;
                if (v326 >= v325) {
                  continue;
                }
              }
              goto LABEL_562;
            }
            v332 = (char *)v327 + v325;
            v333 = (char *)v327 + v326;
            int64_t v334 = v326 - v325;
            if (v334 >= v331)
            {
              int v335 = v330->__r_.__value_.__s.__data_[0];
              do
              {
                int64_t v336 = v334 - v331;
                if (v336 == -1) {
                  break;
                }
                v337 = (char *)memchr(v332, v335, v336 + 1);
                if (!v337) {
                  break;
                }
                v338 = v337;
                if (!memcmp(v337, v330, v331))
                {
                  if (v338 == v333) {
                    break;
                  }
                  std::string::size_type v325 = v338 - (char *)v327;
                  goto LABEL_532;
                }
                v332 = v338 + 1;
                int64_t v334 = v333 - (v338 + 1);
              }
              while (v334 >= v331);
            }
LABEL_562:
            std::to_string(&v422, v321);
            v347 = std::string::insert(&v422, 0, "uniform highp mat3 _t", 0x15uLL);
            std::string::size_type v348 = v347->__r_.__value_.__r.__words[0];
            v421.__r_.__value_.__r.__words[0] = v347->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v421.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v347->__r_.__value_.__r.__words[1] + 7);
            int64_t v349 = HIBYTE(v347->__r_.__value_.__r.__words[2]);
            v347->__r_.__value_.__r.__words[0] = 0;
            v347->__r_.__value_.__l.__size_ = 0;
            v347->__r_.__value_.__r.__words[2] = 0;
            if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v403.__r_.__value_.__l.__data_);
            }
            v403.__r_.__value_.__r.__words[0] = v348;
            v403.__r_.__value_.__l.__size_ = v421.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v403.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v421.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v403.__r_.__value_.__s + 23) = v349;
            if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v422.__r_.__value_.__l.__data_);
              int64_t v349 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
              std::string::size_type v348 = v403.__r_.__value_.__r.__words[0];
            }
            int64_t v350 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v351 = &__p;
            }
            else {
              v351 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((v349 & 0x80u) == 0) {
              v352 = &v403;
            }
            else {
              v352 = (std::string *)v348;
            }
            if ((v349 & 0x80u) == 0) {
              int64_t v353 = v349;
            }
            else {
              int64_t v353 = v403.__r_.__value_.__l.__size_;
            }
            if (v353)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                int64_t v350 = __p.__r_.__value_.__l.__size_;
              }
              v354 = (char *)v351 + v350;
              if (v350 >= v353)
              {
                int v387 = v352->__r_.__value_.__s.__data_[0];
                v388 = v351;
                do
                {
                  int64_t v389 = v350 - v353;
                  if (v389 == -1) {
                    break;
                  }
                  v390 = (char *)memchr(v388, v387, v389 + 1);
                  if (!v390) {
                    break;
                  }
                  v355 = v390;
                  if (!memcmp(v390, v352, v353)) {
                    goto LABEL_580;
                  }
                  v388 = (std::string *)(v355 + 1);
                  int64_t v350 = v354 - (v355 + 1);
                }
                while (v350 >= v353);
              }
              v355 = v354;
LABEL_580:
              if (v355 == v354) {
                std::string::size_type v356 = -1;
              }
              else {
                std::string::size_type v356 = v355 - (char *)v351;
              }
            }
            else
            {
              std::string::size_type v356 = 0;
            }
            std::string::erase(&__p, v356, v353 + 1);
            std::to_string(&v422, v321);
            v357 = std::string::insert(&v422, 0, "_t", 2uLL);
            std::string::size_type v358 = v357->__r_.__value_.__r.__words[0];
            v421.__r_.__value_.__r.__words[0] = v357->__r_.__value_.__l.__size_;
            *(std::string::size_type *)((char *)v421.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v357->__r_.__value_.__r.__words[1] + 7);
            std::string::size_type v359 = HIBYTE(v357->__r_.__value_.__r.__words[2]);
            v357->__r_.__value_.__r.__words[0] = 0;
            v357->__r_.__value_.__l.__size_ = 0;
            v357->__r_.__value_.__r.__words[2] = 0;
            if (SHIBYTE(v403.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v403.__r_.__value_.__l.__data_);
            }
            v403.__r_.__value_.__r.__words[0] = v358;
            v403.__r_.__value_.__l.__size_ = v421.__r_.__value_.__r.__words[0];
            *(std::string::size_type *)((char *)&v403.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v421.__r_.__value_.__r.__words + 7);
            *((unsigned char *)&v403.__r_.__value_.__s + 23) = v359;
            if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v422.__r_.__value_.__l.__data_);
              std::string::size_type v359 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
              std::string::size_type v358 = v403.__r_.__value_.__r.__words[0];
            }
            std::string::size_type v360 = 0;
            std::string::size_type v361 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v362 = &__p;
            }
            else {
              v362 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v361 = __p.__r_.__value_.__l.__size_;
            }
            BOOL v363 = (v359 & 0x80u) != 0;
            std::string::size_type v364 = v403.__r_.__value_.__l.__size_;
            if ((v359 & 0x80u) == 0) {
              v365 = &v403;
            }
            else {
              v365 = (std::string *)v358;
            }
            if ((v359 & 0x80u) == 0) {
              int64_t v366 = v359;
            }
            else {
              int64_t v366 = v403.__r_.__value_.__l.__size_;
            }
            while (!v366)
            {
LABEL_609:
              if (v360 != -1)
              {
                if (v363) {
                  std::string::size_type v374 = v364;
                }
                else {
                  std::string::size_type v374 = v359;
                }
                std::string::erase(&__p, v360, v374);
                std::to_string(&v401, v321);
                v375 = std::string::insert(&v401, 0, "_transforms[", 0xCuLL);
                std::string::size_type v376 = v375->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v421.__r_.__value_.__l.__data_ = *(_OWORD *)&v375->__r_.__value_.__l.__data_;
                v421.__r_.__value_.__r.__words[2] = v376;
                v375->__r_.__value_.__l.__size_ = 0;
                v375->__r_.__value_.__r.__words[2] = 0;
                v375->__r_.__value_.__r.__words[0] = 0;
                v377 = std::string::append(&v421, "]", 1uLL);
                std::string::size_type v378 = v377->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v422.__r_.__value_.__l.__data_ = *(_OWORD *)&v377->__r_.__value_.__l.__data_;
                v422.__r_.__value_.__r.__words[2] = v378;
                v377->__r_.__value_.__l.__size_ = 0;
                v377->__r_.__value_.__r.__words[2] = 0;
                v377->__r_.__value_.__r.__words[0] = 0;
                if ((v422.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v379 = &v422;
                }
                else {
                  v379 = (std::string *)v422.__r_.__value_.__r.__words[0];
                }
                if ((v422.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v380 = HIBYTE(v422.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v380 = v422.__r_.__value_.__l.__size_;
                }
                std::string::insert(&__p, v360, (const std::string::value_type *)v379, v380);
                if (SHIBYTE(v422.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v422.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v421.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v421.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v401.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v401.__r_.__value_.__l.__data_);
                }
                v381 = (char *)HIBYTE(v416);
                if ((v416 & 0x8000000000000000) != 0) {
                  v381 = v415;
                }
                v360 += (std::string::size_type)v381;
                std::string::size_type v361 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v362 = &__p;
                }
                else {
                  v362 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v361 = __p.__r_.__value_.__l.__size_;
                }
                std::string::size_type v359 = HIBYTE(v403.__r_.__value_.__r.__words[2]);
                BOOL v363 = (v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
                std::string::size_type v364 = v403.__r_.__value_.__l.__size_;
                v365 = (v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? &v403
                     : (std::string *)v403.__r_.__value_.__r.__words[0];
                int64_t v366 = (v403.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                     ? HIBYTE(v403.__r_.__value_.__r.__words[2])
                     : v403.__r_.__value_.__l.__size_;
                if (v361 >= v360) {
                  continue;
                }
              }
              goto LABEL_639;
            }
            v367 = (char *)v362 + v360;
            v368 = (char *)v362 + v361;
            int64_t v369 = v361 - v360;
            if (v369 >= v366)
            {
              int v370 = v365->__r_.__value_.__s.__data_[0];
              do
              {
                int64_t v371 = v369 - v366;
                if (v371 == -1) {
                  break;
                }
                v372 = (char *)memchr(v367, v370, v371 + 1);
                if (!v372) {
                  break;
                }
                v373 = v372;
                if (!memcmp(v372, v365, v366))
                {
                  if (v373 == v368) {
                    break;
                  }
                  std::string::size_type v360 = v373 - (char *)v362;
                  goto LABEL_609;
                }
                v367 = v373 + 1;
                int64_t v369 = v368 - (v373 + 1);
              }
              while (v369 >= v366);
            }
LABEL_639:
            if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v402.__r_.__value_.__l.__data_);
              LOBYTE(v359) = *((unsigned char *)&v403.__r_.__value_.__s + 23);
            }
            if ((v359 & 0x80) != 0) {
              operator delete(v403.__r_.__value_.__l.__data_);
            }
            int v308 = v399 + 1;
            if (v399 + 1 == v398) {
              goto LABEL_657;
            }
          }
          std::string::size_type v315 = 0;
LABEL_499:
          v317 = (char *)v311 + v315;
          v318 = (char *)v311 + v312;
          int64_t v319 = v318 - ((char *)v311 + v315);
          if (v319 >= 1)
          {
            do
            {
              v320 = memchr(v317, 59, v319);
              if (!v320) {
                break;
              }
              if (*v320 == 59) {
                goto LABEL_504;
              }
              v317 = v320 + 1;
              int64_t v319 = v318 - v317;
            }
            while (v318 - v317 > 0);
          }
          v320 = v318;
LABEL_504:
          if (v320 == v318) {
            uint64_t v316 = -1;
          }
          else {
            uint64_t v316 = v320 - (unsigned char *)v311;
          }
          goto LABEL_507;
        }
LABEL_657:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v391 = (std::string *)__p.__r_.__value_.__r.__words[0];
          long long v31 = v397;
          if (!__p.__r_.__value_.__r.__words[0])
          {
LABEL_661:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            if ((char)v407 < 0) {
              operator delete(v405);
            }
            if (SHIBYTE(v416) < 0) {
              operator delete(v414);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_324;
          }
        }
        else
        {
          v391 = &__p;
          long long v31 = v397;
        }
        size_t v392 = strlen((const char *)v391);
        x_stream_write((uint64_t)v31, v391, v392);
        goto LABEL_661;
      }
    }
  }
  if (v13)
  {
    size_t v225 = strlen((const char *)v13);
    x_stream_write((uint64_t)v31, v13, v225);
  }
LABEL_324:
  v226 = x_stream_get(v31);
  if (SHIBYTE(v418.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v418.__r_.__value_.__l.__data_);
  }
  if (CI_VERBOSE_SIGNPOSTS())
  {
    unint64_t v227 = ci_signpost_log_render();
    os_signpost_id_t v228 = v420;
    if (v420 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      unint64_t v229 = v227;
      if (os_signpost_enabled(v227))
      {
        LOWORD(v418.__r_.__value_.__l.__data_) = 0;
        _os_signpost_emit_with_name_impl(&dword_193671000, v229, OS_SIGNPOST_INTERVAL_END, v228, "construct_shader", "", (uint8_t *)&v418, 2u);
      }
    }
  }
  TimerBase::~TimerBase((TimerBase *)buf);
  return v226;
}

char *CI::append_arguments_to_kernel(uint64_t a1, char *__s1, char *__s2, void *a4)
{
  os_signpost_id_t v5 = __s1;
  uint64_t v7 = strstr(__s1, __s2);
  if (v7 > v5)
  {
    int v8 = strchr(v7, 41);
    x_stream_write(a1, v5, v8 - v5);
    uint64_t v15 = a4[1] - *a4;
    if (v15)
    {
      uint64_t v16 = 0;
      unint64_t v17 = v15 >> 3;
      if (v17 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v17;
      }
      do
        x_stream_printf(a1, ", %s", v9, v10, v11, v12, v13, v14, *(void *)(*a4 + 8 * v16++));
      while (v18 != v16);
    }
    return v8;
  }
  return v5;
}

void CI::FoslAdapter::~FoslAdapter(CI::FoslAdapter *this)
{
  fosl_filter_destroyGraph(*((void *)this + 3));
  uint64_t v2 = (CI::FoslAdapter *)*((void *)this + 22);
  if (v2 != (CI::FoslAdapter *)((char *)this + 184))
  {
    do
    {
      free(*((void **)v2 + 5));
      uint64_t v3 = (CI::FoslAdapter *)*((void *)v2 + 1);
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = *(CI::FoslAdapter **)v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (CI::FoslAdapter *)*((void *)v2 + 2);
          BOOL v5 = *(void *)v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != (CI::FoslAdapter *)((char *)this + 184));
  }
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 232, *((void **)this + 30));
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 176, *((void **)this + 23));
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 152, *((void **)this + 20));
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 128, *((void **)this + 17));
  for (uint64_t i = 0; i != -48; i -= 24)
    std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + i + 104, *(void **)((char *)this + i + 112));
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 56, *((void **)this + 8));
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)this + 32, *((void **)this + 5));
}

uint64_t CI::gReleaseSurfaceBlockMap(CI *this)
{
  unint64_t v1 = 0x1EB466000uLL;
  {
    unint64_t v1 = 0x1EB466000;
    if (v3) {
      operator new();
    }
  }
  return *(void *)(v1 + 2808);
}

uint64_t CI::SurfaceCacheEntry::SurfaceCacheEntry(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6, int a7, int a8, const void *a9, NSObject *a10, const void *a11)
{
  unsigned int v13 = a5;
  v68[3] = *MEMORY[0x1E4F143B8];
  *(void *)a1 = &unk_1EE45DF30;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = &unk_1EE45B1D8;
  atomic_fetch_add(&dword_1EB466F58[20], 1u);
  *(void *)a1 = &unk_1EE45CCF8;
  *(void *)(a1 + 16) = &unk_1EE45CD30;
  *(void *)(a1 + 112) = a3;
  *(void *)(a1 + 120) = a4;
  long long v18 = *a6;
  *(void *)(a1 + 152) = *((void *)a6 + 2);
  *(_OWORD *)(a1 + 136) = v18;
  long long v62 = *a6;
  uint64_t v63 = *((void *)a6 + 2);
  CachedSurface = CreateCachedSurface((__CVBuffer *)a3, (__CVBuffer *)a4, (void *)0x20, a5, (uint64_t)&v62, 0);
  *(void *)(a1 + 24) = CachedSurface;
  if (CachedSurface)
  {
    OSType PixelFormat = IOSurfaceGetPixelFormat(CachedSurface);
    uint64_t v21 = *(void *)(a1 + 24);
    *(_DWORD *)(a1 + 128) = PixelFormat;
    if (v21) {
      goto LABEL_55;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 128) = 0;
  }
  int v22 = a7;
  int v23 = a8;
  unsigned int v61 = bswap32(v13);
  long long v24 = ci_logger_render();
  BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_FAULT);
  if (v13 < 0x29)
  {
    if (!v25) {
      goto LABEL_9;
    }
    *(_DWORD *)info = 134218496;
    *(void *)&info[4] = a3;
    __int16 v65 = 2048;
    uint64_t v66 = a4;
    __int16 v67 = 2048;
    v68[0] = v61;
    uint64_t v26 = "Failed to allocate IOSurface (%zux%zu format:%ld)";
    unsigned int v27 = v24;
    uint32_t v28 = 32;
  }
  else
  {
    if (!v25) {
      goto LABEL_9;
    }
    *(_DWORD *)info = 134218754;
    *(void *)&info[4] = a3;
    __int16 v65 = 2048;
    uint64_t v66 = a4;
    __int16 v67 = 1040;
    LODWORD(v68[0]) = 4;
    WORD2(v68[0]) = 2080;
    *(void *)((char *)v68 + 6) = &v61;
    uint64_t v26 = "Failed to allocate IOSurface (%zux%zu format:%.4s)";
    unsigned int v27 = v24;
    uint32_t v28 = 38;
  }
  _os_log_fault_impl(&dword_193671000, v27, OS_LOG_TYPE_FAULT, v26, info, v28);
LABEL_9:
  int v29 = (CI *)mach_timebase_info((mach_timebase_info_t)info);
  uint64_t CurrentCacheVolatileSize = CI::GetCurrentCacheVolatileSize(v29);
  unint64_t v31 = atomic_load(&CI::gCacheSize);
  unint64_t v32 = v31 - CurrentCacheVolatileSize;
  long long v33 = ci_logger_render();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_FAULT)) {
    CI::SurfaceCacheEntry::SurfaceCacheEntry(v32, v33);
  }
  uint64_t v34 = CI::gCacheList;
  a8 = v23;
  if (CI::gCacheList) {
    uint64_t v34 = *(void *)(CI::gCacheList + 16);
  }
  a7 = v22;
  unint64_t v35 = atomic_load(&CI::gCacheSize);
  if (v35 >= 0x80000001)
  {
    double v36 = (double)v35;
    double v37 = 9.31322575e-10;
LABEL_19:
    unint64_t v35 = llround(v36 * v37);
    goto LABEL_20;
  }
  if (v35 > 0x200000)
  {
    double v36 = (double)v35;
    double v37 = 0.000000953674316;
    goto LABEL_19;
  }
  if (v35 >= 0x801)
  {
    double v36 = (double)v35;
    double v37 = 0.0009765625;
    goto LABEL_19;
  }
LABEL_20:
  unint64_t v38 = atomic_load(&CI::gCacheSize);
  long long v39 = "B";
  if (v38 <= 0x80000000)
  {
    if (v38 <= 0x200000)
    {
      if (v38 <= 0x800) {
        long long v40 = "B";
      }
      else {
        long long v40 = "KB";
      }
    }
    else
    {
      long long v40 = "MB";
    }
  }
  else
  {
    long long v40 = "GB";
  }
  if (v32 <= 0x80000000)
  {
    if (v32 <= 0x200000)
    {
      unint64_t v41 = llround((double)v32 * 0.0009765625);
      if (v32 > 0x800)
      {
        long long v42 = "KB";
      }
      else
      {
        unint64_t v41 = v32;
        long long v42 = "B";
      }
    }
    else
    {
      unint64_t v41 = llround((double)v32 * 0.000000953674316);
      long long v42 = "MB";
    }
  }
  else
  {
    unint64_t v41 = llround((double)v32 * 9.31322575e-10);
    long long v42 = "GB";
  }
  unint64_t v43 = llround((double)(unint64_t)CI::gCacheSizePeak * 9.31322575e-10);
  long long v44 = "GB";
  unint64_t v45 = llround((double)(unint64_t)CI::gCacheSizePeak * 0.000000953674316);
  long long v46 = "MB";
  unint64_t v47 = llround((double)(unint64_t)CI::gCacheSizePeak * 0.0009765625);
  if ((unint64_t)CI::gCacheSizePeak > 0x800)
  {
    std::string::size_type v48 = "KB";
  }
  else
  {
    unint64_t v47 = CI::gCacheSizePeak;
    std::string::size_type v48 = "B";
  }
  if ((unint64_t)CI::gCacheSizePeak <= 0x200000)
  {
    unint64_t v45 = v47;
    long long v46 = v48;
  }
  if ((unint64_t)CI::gCacheSizePeak <= 0x80000000) {
    unint64_t v49 = v45;
  }
  else {
    unint64_t v49 = v43;
  }
  double v50 = (double)(unint64_t)CI::gCacheNonVolatileSizePeak;
  if ((unint64_t)CI::gCacheSizePeak <= 0x80000000) {
    long long v44 = v46;
  }
  unint64_t v51 = llround(v50 * 9.31322575e-10);
  unint64_t v52 = llround(v50 * 0.000000953674316);
  unint64_t v53 = llround(v50 * 0.0009765625);
  if ((unint64_t)CI::gCacheNonVolatileSizePeak > 0x800) {
    long long v39 = "KB";
  }
  else {
    unint64_t v53 = CI::gCacheNonVolatileSizePeak;
  }
  if ((unint64_t)CI::gCacheNonVolatileSizePeak <= 0x200000) {
    unint64_t v54 = v53;
  }
  else {
    unint64_t v54 = v52;
  }
  if ((unint64_t)CI::gCacheNonVolatileSizePeak > 0x200000) {
    long long v39 = "MB";
  }
  if ((unint64_t)CI::gCacheNonVolatileSizePeak > 0x80000000)
  {
    unint64_t v54 = v51;
    long long v39 = "GB";
  }
  snprintf(CI::SurfaceCacheEntry::SurfaceCacheEntry(IRect,ISize,unsigned int,iosurface_properties_t,unsigned int,unsigned int,__CFString const*,dispatch_queue_s *,void({block_pointer})(__IOSurface *))::msg, 0x400uLL, "Cache Stats: count=%ld size=%ld%s non-volatile=%ld%s peakCount=%ld peakSize=%ld%s peakNVSize=%ld%s", v34, v35, v40, v41, v42, CI::gCacheCountPeak, v49, v44, v54, v39);
  qword_1EB466910 = (uint64_t)CI::SurfaceCacheEntry::SurfaceCacheEntry(IRect,ISize,unsigned int,iosurface_properties_t,unsigned int,unsigned int,__CFString const*,dispatch_queue_s *,void({block_pointer})(__IOSurface *))::msg;
LABEL_55:
  long long v55 = *a2;
  *(void *)(a1 + 48) = *((void *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v55;
  *(_DWORD *)(a1 + 56) = a7;
  *(_DWORD *)(a1 + 60) = a8;
  *(void *)(a1 + 64) = CFRetain(a9);
  if (a10) {
    dispatch_retain(a10);
  }
  *(void *)(a1 + 72) = a10;
  *(void *)(a1 + 80) = 0;
  if (a11) {
    *(void *)(a1 + 80) = _Block_copy(a11);
  }
  unint64_t MemorySize = SurfaceGetMemorySize(*(__IOSurface **)(a1 + 24));
  *(void *)(a1 + 104) = MemorySize;
  atomic_fetch_add((atomic_ullong *volatile)&CI::gCacheSize, MemorySize);
  unint64_t v57 = CI::gCacheSizePeak;
  unint64_t v58 = atomic_load(&CI::gCacheSize);
  if (v57 < v58)
  {
    unint64_t v59 = atomic_load(&CI::gCacheSize);
    CI::gCacheSizePeak = v59;
  }
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1;
  return a1;
}

void CI::SurfaceCacheEntry::~SurfaceCacheEntry(CI::SurfaceCacheEntry *this)
{
  *(void *)this = &unk_1EE45CCF8;
  *((void *)this + 2) = &unk_1EE45CD30;
  atomic_fetch_add((atomic_ullong *volatile)&CI::gCacheSize, -*((void *)this + 13));
  uint64_t v2 = (const void *)*((void *)this + 3);
  if (v2) {
    CFRelease(v2);
  }
  *((void *)this + 3) = 0;
  *((void *)this + 7) = 0;
  int v3 = (const void *)*((void *)this + 8);
  if (v3) {
    CFRelease(v3);
  }
  *((void *)this + 8) = 0;
  uint64_t v4 = *((void *)this + 9);
  if (v4) {
    dispatch_release(v4);
  }
  *((void *)this + 9) = 0;
  BOOL v5 = (const void *)*((void *)this + 10);
  if (v5) {
    _Block_release(v5);
  }
  *((void *)this + 10) = 0;
  *((void *)this + 2) = &unk_1EE45B1D8;
  atomic_fetch_add(&dword_1EB466F58[20], 0xFFFFFFFF);
}

{
  uint64_t vars8;

  CI::SurfaceCacheEntry::~SurfaceCacheEntry(this);

  JUMPOUT(0x1997023B0);
}

void CI::SurfaceCacheEntry::setFillQueue(CI::SurfaceCacheEntry *this, dispatch_object_t object)
{
  if (object) {
    dispatch_retain(object);
  }
  uint64_t v4 = *((void *)this + 9);
  if (v4) {
    dispatch_release(v4);
  }
  *((void *)this + 9) = object;
}

void CI::SurfaceCacheEntry::setFillBlock(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    int v3 = _Block_copy(aBlock);
  }
  else {
    int v3 = 0;
  }
  uint64_t v4 = *(const void **)(a1 + 80);
  if (v4) {
    _Block_release(v4);
  }
  *(void *)(a1 + 80) = v3;
}

void non-virtual thunk to'CI::SurfaceCacheEntry::~SurfaceCacheEntry(CI::SurfaceCacheEntry *this)
{
}

{
  uint64_t vars8;

  CI::SurfaceCacheEntry::~SurfaceCacheEntry((CI::SurfaceCacheEntry *)((char *)this - 16));

  JUMPOUT(0x1997023B0);
}

void CI::SurfaceCacheEntry::fillAsync(CI::SurfaceCacheEntry *this)
{
  uint64_t v2 = *((void *)this + 9);
  if (v2)
  {
    if (*((void *)this + 10))
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = ___ZN2CI17SurfaceCacheEntry9fillAsyncEv_block_invoke;
      block[3] = &__block_descriptor_tmp_3_7;
      block[4] = this;
      dispatch_async(v2, block);
      CI::gCacheBytesFilled += *((void *)this + 13);
    }
  }
}

void ___ZN2CI17SurfaceCacheEntry9fillAsyncEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (CI_VERBOSE_SIGNPOSTS())
  {
    uint64_t v2 = ci_signpost_log_cache();
    if (os_signpost_enabled(v2))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "CacheEntryFillAsync", "", v4, 2u);
    }
  }
  uint64_t v3 = mach_absolute_time();
  (*(void (**)(void))(*(void *)(v1 + 80) + 16))();
  atomic_fetch_add_explicit(&CI::gTimeFilling, mach_absolute_time() - v3, memory_order_relaxed);
  ___ZN2CI17SurfaceCacheEntry9fillAsyncEv_block_invoke_1();
}

void ___ZN2CI17SurfaceCacheEntry9fillAsyncEv_block_invoke_1()
{
  if (CI_VERBOSE_SIGNPOSTS())
  {
    uint64_t v0 = ci_signpost_log_cache();
    if (os_signpost_enabled(v0))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_signpost_emit_with_name_impl(&dword_193671000, v0, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "CacheEntryFillAsync", "", v1, 2u);
    }
  }
}

uint64_t CI::SurfaceCacheEntry::print_core(CI::SurfaceCacheEntry *this, __sFILE *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  CFStringRef v4 = (const __CFString *)*((void *)this + 8);
  if (v4)
  {
    CStringPtr = CFStringGetCStringPtr(*((CFStringRef *)this + 8), 0x8000100u);
    if (!CStringPtr)
    {
      CStringPtr = buffer;
      if (!CFStringGetCString(v4, buffer, 1024, 0x8000100u)) {
        CStringPtr = 0;
      }
    }
  }
  else
  {
    CStringPtr = buffer;
  }
  uint64_t v6 = (__IOSurface *)*((void *)this + 3);
  IOSurfaceID ID = IOSurfaceGetID(v6);
  fprintf(a2, "surface=%p(%0.4u)", v6, ID);
  if (*((_DWORD *)this + 32) < 0x29u) {
    fprintf(a2, " fmt=%-4d");
  }
  else {
    fprintf(a2, " fmt=%.4s");
  }
  fprintf(a2, " width=%-4zu height=%-4zu", *((void *)this + 14), *((void *)this + 15));
  fprintf(a2, " x=%-4d y=%-4d w=%-4zu h=%-4zu ctx=%-4u img=%-4u vol=%-2d", *((_DWORD *)this + 8), *((_DWORD *)this + 9), *((void *)this + 5), *((void *)this + 6), *((_DWORD *)this + 14), *((_DWORD *)this + 15), *((_DWORD *)this + 24));
  unint64_t v8 = *((void *)this + 13);
  unint64_t v9 = llround((double)v8 * 9.31322575e-10);
  unint64_t v10 = llround((double)v8 * 0.000000953674316);
  uint64_t v11 = "MB";
  unint64_t v12 = llround((double)v8 * 0.0009765625);
  if (v8 <= 0x800) {
    unint64_t v12 = *((void *)this + 13);
  }
  unsigned int v13 = "B";
  if (v8 > 0x800) {
    unsigned int v13 = "KB";
  }
  if (v8 <= 0x200000)
  {
    unint64_t v10 = v12;
    uint64_t v11 = v13;
  }
  BOOL v14 = v8 > 0x80000000;
  if (v8 <= 0x80000000) {
    unint64_t v15 = v10;
  }
  else {
    unint64_t v15 = v9;
  }
  if (v14) {
    uint64_t v16 = "GB";
  }
  else {
    uint64_t v16 = v11;
  }
  fprintf(a2, " size=%ld%s", v15, v16);
  if (v4) {
    fprintf(a2, " id='%s'", CStringPtr);
  }
  else {
    fwrite(" id=nil", 7uLL, 1uLL, a2);
  }
  if (!*((void *)this + 8) || SurfaceIsVolatileEmpty(*((__IOSurface **)this + 3))) {
    fwrite(" empty", 6uLL, 1uLL, a2);
  }
  if (*((void *)this + 11)) {
    fprintf(a2, " use=%ld", *((void *)this + 11));
  }
  if (*((void *)this + 19)) {
    fprintf(a2, " pool=%lld", *((void *)this + 19));
  }
  return fputc(10, a2);
}

uint64_t CI::SurfaceCacheEntry::print(CI::SurfaceCacheEntry *this, __sFILE *__stream)
{
  fwrite("SurfaceCacheEntry ", 0x12uLL, 1uLL, __stream);

  return CI::SurfaceCacheEntry::print_core(this, __stream);
}

CFIndex CI::FindUnusedCacheEntryWithInfo(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, int a5, uint64_t a6, int a7, int a8, char a9, unsigned char *a10, CFArrayRef theArray)
{
  uint64_t v12 = a6;
  int v13 = a5;
  if (a10) {
    *a10 = 0;
  }
  uint64_t v18 = CI::gCacheList;
  if (!CI::gCacheList) {
    return 0;
  }
  CFArrayRef v19 = theArray;
  if (theArray)
  {
    int v20 = a7;
    CFIndex result = CFArrayGetCount(theArray);
    if (!result) {
      return result;
    }
    CFIndex v22 = result;
    uint64_t v18 = CI::gCacheList;
    a7 = v20;
    uint64_t v12 = a6;
    int v13 = a5;
    CFArrayRef v19 = theArray;
  }
  else
  {
    CFIndex v22 = 0;
  }
  uint64_t v23 = *(void *)(v18 + 8);
  int v69 = a8;
  if (v23 != v18)
  {
    int v45 = a7;
    int v46 = 0;
    CFIndex v24 = 0;
    CFIndex v25 = 0;
    int v26 = 0;
    CFIndex v27 = 0;
    CFIndex v28 = 0;
    while (1)
    {
      CFIndex v29 = *(void *)(v23 + 16);
      unint64_t v30 = *(void *)(v29 + 112);
      unint64_t v31 = *(void *)(v29 + 120);
      BOOL v34 = v30 < a1 || v30 > a3 || v31 < a2 || v31 > a4;
      if (v34
        || *(_DWORD *)(v29 + 128) != v13
        || *(void *)(v29 + 144) != *(void *)(v12 + 8)
        || *(_DWORD *)(v29 + 136) != *(_DWORD *)v12
        || *(void *)(v29 + 152) != *(void *)(v12 + 16))
      {
        goto LABEL_86;
      }
      if (*(void *)(v29 + 88))
      {
        CFIndex v51 = v28;
        CFIndex v53 = v24;
        int v62 = v26;
        CFIndex v57 = v25;
        CFIndex v47 = v22;
        CFArrayRef v66 = v19;
        CFIndex v35 = v27;
        int v36 = CI_USE_INFLIGHT_INTERMEDIATES();
        CFIndex v27 = v35;
        if (v36 && !v35 && *(void *)(v29 + 88) == 1 && *(_DWORD *)(v29 + 96) == -1 && *(_DWORD *)(v29 + 56) == v45)
        {
          CFIndex v28 = v29;
          CFIndex v27 = v29;
          CFIndex v24 = v29;
          CFArrayRef v19 = v66;
          CFIndex v22 = v47;
          CFIndex v25 = v57;
LABEL_49:
          int v26 = v62;
          goto LABEL_82;
        }
        int v26 = v62;
        CFIndex v28 = v51;
        if (v62)
        {
          CFArrayRef v19 = v66;
          CFIndex v22 = v47;
          CFIndex v24 = v53;
          CFIndex v25 = v57;
        }
        else
        {
          CFArrayRef v19 = v66;
          CFIndex v22 = v47;
          CFIndex v24 = v53;
          if (!v35) {
            int v26 = (*(void *)(v29 + 88) > 0) | v62;
          }
          CFIndex v25 = v57;
        }
        goto LABEL_82;
      }
      if (v22 >= 1)
      {
        CFIndex v52 = v28;
        CFIndex v54 = v24;
        int v62 = v26;
        CFIndex v48 = v27;
        CFIndex v58 = v25;
        CFArrayRef v67 = v19;
        v70.location = 0;
        CFIndex v37 = v22;
        v70.length = v22;
        if (CFArrayGetFirstIndexOfValue(v19, v70, *(const void **)(v29 + 24)) < 0)
        {
          CFArrayRef v19 = v67;
          CFIndex v22 = v37;
          CFIndex v24 = v54;
          CFIndex v25 = v58;
          CFIndex v27 = v48;
          CFIndex v28 = v52;
          goto LABEL_49;
        }
        CFIndex v22 = v37;
        CFIndex v28 = v52;
        if (v52)
        {
LABEL_38:
          if (!v46) {
            int v46 = *(_DWORD *)(v29 + 60);
          }
          goto LABEL_63;
        }
        uint64_t v38 = *(void *)(v29 + 64);
        if (*(_DWORD *)(v29 + 60))
        {
          CFArrayRef v19 = v67;
          CFIndex v27 = v48;
          if (v38)
          {
            if (v46)
            {
              CFIndex v28 = 0;
              goto LABEL_65;
            }
LABEL_61:
            IsVolatileEmptCGFloat y = SurfaceIsVolatileEmpty(*(__IOSurface **)(v29 + 24));
            CFIndex v28 = 0;
            CFIndex v22 = v37;
            if (!IsVolatileEmpty) {
              goto LABEL_38;
            }
            CFIndex v28 = v29;
LABEL_63:
            CFArrayRef v19 = v67;
            CFIndex v25 = v58;
            CFIndex v27 = v48;
LABEL_66:
            int v26 = v62;
            CFIndex v24 = v54;
            if (!v54)
            {
              if (*(int *)(v29 + 96) >= 7) {
                CFIndex v24 = 0;
              }
              else {
                CFIndex v24 = v29;
              }
            }
            goto LABEL_82;
          }
        }
        else
        {
          CFArrayRef v19 = v67;
          CFIndex v27 = v48;
          if (v38) {
            goto LABEL_61;
          }
        }
        CFIndex v28 = v29;
LABEL_65:
        CFIndex v25 = v58;
        goto LABEL_66;
      }
      if (v28)
      {
        if (v24) {
          goto LABEL_43;
        }
      }
      else
      {
        uint64_t v39 = *(void *)(v29 + 64);
        if (*(_DWORD *)(v29 + 60))
        {
          if (!v39) {
            goto LABEL_74;
          }
          if (!v46)
          {
            CFArrayRef v68 = v19;
            CFIndex v56 = v24;
            CFIndex v60 = v25;
            CFIndex v50 = v22;
            int v64 = v26;
            CFIndex v42 = v27;
            BOOL v43 = SurfaceIsVolatileEmpty(*(__IOSurface **)(v29 + 24));
            CFIndex v27 = v42;
            CFIndex v24 = v56;
            CFIndex v25 = v60;
            int v26 = v64;
            CFIndex v22 = v50;
            if (v43)
            {
              int v46 = 0;
              CFIndex v28 = v29;
              goto LABEL_93;
            }
            goto LABEL_92;
          }
          CFIndex v28 = 0;
          if (v24) {
            goto LABEL_43;
          }
        }
        else
        {
          if (!v39)
          {
LABEL_74:
            CFIndex v28 = *(void *)(v23 + 16);
            if (v24) {
              goto LABEL_43;
            }
            goto LABEL_75;
          }
          CFIndex v55 = v24;
          CFIndex v59 = v25;
          int v63 = v26;
          CFIndex v49 = v27;
          CFIndex v41 = v22;
          CFArrayRef v68 = v19;
          if (!SurfaceIsVolatileEmpty(*(__IOSurface **)(v29 + 24)))
          {
            CFIndex v22 = v41;
            CFIndex v24 = v55;
            CFIndex v25 = v59;
            CFIndex v27 = v49;
            int v26 = v63;
            if (v46)
            {
              CFIndex v28 = 0;
              goto LABEL_93;
            }
LABEL_92:
            CFIndex v28 = 0;
            int v46 = *(_DWORD *)(v29 + 60);
LABEL_93:
            CFArrayRef v19 = v68;
            if (v24)
            {
LABEL_43:
              if (v25) {
                goto LABEL_82;
              }
              goto LABEL_44;
            }
            goto LABEL_75;
          }
          CFIndex v28 = v29;
          CFArrayRef v19 = v68;
          CFIndex v22 = v41;
          CFIndex v24 = v55;
          CFIndex v25 = v59;
          CFIndex v27 = v49;
          int v26 = v63;
          if (v55) {
            goto LABEL_43;
          }
        }
      }
LABEL_75:
      if (*(int *)(v29 + 96) > 6)
      {
        CFIndex v24 = 0;
        if (v25) {
          goto LABEL_82;
        }
LABEL_44:
        if (*(int *)(v29 + 96) > 6)
        {
          CFIndex v25 = 0;
        }
        else if (*(_DWORD *)(v29 + 60))
        {
          CFIndex v25 = v29;
        }
        else
        {
          CFIndex v25 = 0;
        }
        goto LABEL_82;
      }
      if (*(_DWORD *)(v29 + 60)) {
        CFIndex v24 = 0;
      }
      else {
        CFIndex v24 = v29;
      }
      if (!v25) {
        goto LABEL_44;
      }
LABEL_82:
      if (v24 && v28 && v27 && (v26 & 1) != 0) {
        goto LABEL_96;
      }
LABEL_86:
      uint64_t v23 = *(void *)(v23 + 8);
      if (v23 == v18) {
        goto LABEL_96;
      }
    }
  }
  CFIndex v28 = 0;
  CFIndex v27 = 0;
  LOBYTE(v26) = 0;
  CFIndex v25 = 0;
  CFIndex v24 = 0;
LABEL_96:
  if (a10) {
    *a10 = v26 & 1;
  }
  CFIndex result = v27 ? v27 : v28;
  if (!v27 && (a9 & 1) == 0)
  {
    CFIndex result = v28;
    if (!v28)
    {
      CFIndex result = v24;
      if (!v24)
      {
        if (!v69) {
          return 0;
        }
        BOOL v44 = *(void *)(CI::gCacheList + 16) < 0x201uLL || v25 == 0;
        CFIndex result = v25;
        if (v44) {
          return 0;
        }
      }
    }
  }
  return result;
}

void *CI::AppendCacheEntry(CI *this, CI::SurfaceCacheEntry *a2)
{
  uint64_t v3 = (uint64_t *)CI::gCacheList;
  if (!CI::gCacheList) {
    operator new();
  }
  CFIndex result = operator new(0x18uLL);
  result[2] = this;
  uint64_t v5 = *v3;
  *CFIndex result = *v3;
  result[1] = v3;
  *(void *)(v5 + 8) = result;
  *uint64_t v3 = (uint64_t)result;
  ++v3[2];
  if (CI::gCacheList)
  {
    if ((unint64_t)CI::gCacheCountPeak < *(void *)(CI::gCacheList + 16)) {
      CI::gCacheCountPeak = *(void *)(CI::gCacheList + 16);
    }
  }
  return result;
}

void __GetSurfaceFromCacheAndFill_block_invoke_23(uint64_t a1, uint64_t a2, const char *a3)
{
}

void CI::LogCacheState(CI *this, uint64_t a2, const char *a3)
{
  int v4 = (int)this;
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = (CI *)CI_SURFACE_CACHE_CAPACITY();
  if (CI::gCacheList)
  {
    uint64_t v6 = *(void *)(CI::gCacheList + 16);
    if (v6)
    {
      uint64_t v7 = v5;
      uint64_t CurrentCacheVolatileSize = CI::GetCurrentCacheVolatileSize(v5);
      unint64_t v9 = atomic_load(&CI::gCacheSize);
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 0x40000000;
      v16[2] = ___ZN2CIL13LogCacheStateEbPKc_block_invoke;
      v16[3] = &__block_descriptor_tmp_113;
      v16[4] = a2;
      v16[5] = v6;
      void v16[6] = v9 - CurrentCacheVolatileSize;
      v16[7] = CurrentCacheVolatileSize;
      v16[8] = v7;
      CFStringRef v10 = stream_to_string((uint64_t)v16);
      if (v10)
      {
        CFStringRef v11 = v10;
        uint64_t v12 = ci_logger_cache();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 138543362;
          CFStringRef v18 = v11;
          _os_log_impl(&dword_193671000, v12, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
        }
        CFRelease(v11);
      }
      if (v4)
      {
        CFStringRef v13 = stream_to_string((uint64_t)&__block_literal_global_117);
        if (v13)
        {
          CFStringRef v14 = v13;
          unint64_t v15 = ci_logger_cache();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 138543362;
            CFStringRef v18 = v14;
            _os_log_impl(&dword_193671000, v15, OS_LOG_TYPE_DEFAULT, "%{public}@", buf, 0xCu);
          }
          CFRelease(v14);
        }
      }
    }
  }
}

uint64_t GetValidSurfaceFromCache(long long *a1, int a2, long long *a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (!*((void *)a1 + 1)) {
    return 0;
  }
  uint64_t v8 = 0;
  if (a7 && a2 && *((void *)a1 + 2))
  {
    if (a4 && a5)
    {
      unint64_t v15 = ci_logger_cache();
      int v16 = 0;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136446722;
        *(void *)&uint8_t buf[4] = "GetValidSurfaceFromCache";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = a4;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = a5;
        _os_log_impl(&dword_193671000, v15, OS_LOG_TYPE_DEFAULT, "%{public}s  was passed contextIndex=%d and imageIndex=%d.  Ignoring imageIndex.\n", buf, 0x18u);
        int v16 = 0;
      }
    }
    else
    {
      int v16 = a5;
    }
    *(void *)int buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2000000000;
    uint64_t v34 = 0;
    if (GetQueue(void)::onceToken != -1) {
      dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = __GetValidSurfaceFromCache_block_invoke;
    block[3] = &unk_1E5776930;
    long long v24 = *a1;
    uint64_t v25 = *((void *)a1 + 2);
    long long v26 = *a3;
    uint64_t v17 = *((void *)a3 + 2);
    int v29 = a2;
    int v30 = a4;
    uint64_t v27 = v17;
    uint64_t v28 = a7;
    block[4] = buf;
    int v31 = v16;
    int v32 = a6;
    dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
    int v18 = CI_LOG_SURFACE_CACHE();
    if (v18)
    {
      int v19 = v18;
      if (GetQueue(void)::onceToken != -1) {
        dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
      }
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 0x40000000;
      void v21[2] = __GetValidSurfaceFromCache_block_invoke_2;
      v21[3] = &__block_descriptor_tmp_26_2;
      int v22 = v19;
      dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, v21);
    }
    uint64_t v8 = *(void *)(*(void *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
  }
  return v8;
}

void __GetValidSurfaceFromCache_block_invoke(uint64_t a1)
{
  long long v12 = *(_OWORD *)(a1 + 40);
  uint64_t v13 = *(void *)(a1 + 56);
  long long v10 = *(_OWORD *)(a1 + 64);
  CFStringRef v2 = *(const __CFString **)(a1 + 88);
  uint64_t v11 = *(void *)(a1 + 80);
  CacheEntryWithInfo = (CI *)CI::FindCacheEntryWithInfo((uint64_t)&v12, *(_DWORD *)(a1 + 96), (uint64_t)&v10, *(_DWORD *)(a1 + 100), *(_DWORD *)(a1 + 104), v2);
  if (CacheEntryWithInfo)
  {
    int v4 = CacheEntryWithInfo;
    uint64_t v5 = (__IOSurface *)*((void *)CacheEntryWithInfo + 3);
    if (!v5 || SurfaceIsVolatileEmpty(v5)) {
      return;
    }
    if (SurfaceSetNonVolatile(*((__IOSurface **)v4 + 3)))
    {
      ++CI::gCacheGetCount;
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *((void *)v4 + 3);
      CFRetain(*(CFTypeRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
      unsigned int v6 = *(_DWORD *)(a1 + 108);
      if (v6 < 7) {
        ++v6;
      }
      *((_DWORD *)v4 + 24) = v6;
      CI::SurfaceCacheEntry::setIdentifier(v4, *(CFTypeRef *)(a1 + 88));
      uint64_t v8 = (const void *)*((void *)v4 + 10);
      if (v8) {
        _Block_release(v8);
      }
      *((void *)v4 + 10) = 0;
      unint64_t v9 = *((void *)v4 + 9);
      if (v9) {
        dispatch_release(v9);
      }
      *((void *)v4 + 9) = 0;
      ++*((void *)v4 + 11);
      CacheEntryWithInfo = (CI *)CI::MoveCacheEntryToEnd(v4, v7);
    }
    else
    {
      CI::SurfaceCacheEntry::empty((IOSurfaceRef *)v4);
    }
  }

  CI::UpdateVolatilityStats(CacheEntryWithInfo);
}

void CI::SurfaceCacheEntry::empty(IOSurfaceRef *this)
{
  SurfaceSetVolatileEmpty(this[3]);
  IOSurfaceRef v2 = this[8];
  if (v2) {
    CFRelease(v2);
  }
  this[8] = 0;
  *((_DWORD *)this + 15) = 0;
}

void __GetValidSurfaceFromCache_block_invoke_2(uint64_t a1, uint64_t a2, const char *a3)
{
}

uint64_t GetSurfaceFromCache(long long *a1, uint64_t a2, uint64_t a3, int a4, long long *a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, CFArrayRef theArray)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (theArray) {
    CFIndex Count = CFArrayGetCount(theArray);
  }
  else {
    CFIndex Count = 0;
  }
  uint64_t v44 = 0;
  int v45 = &v44;
  uint64_t v46 = 0x2000000000;
  uint64_t v47 = 0;
  if (*((void *)a1 + 1))
  {
    uint64_t v26 = a3;
    uint64_t v20 = 0;
    if (a10 && a9 && a4 && *((void *)a1 + 2))
    {
      if (a6 && a7)
      {
        log = ci_logger_cache();
        int v21 = 0;
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 136446722;
          CFIndex v49 = "GetSurfaceFromCache";
          __int16 v50 = 1024;
          int v51 = a6;
          __int16 v52 = 1024;
          int v53 = a7;
          _os_log_impl(&dword_193671000, log, OS_LOG_TYPE_DEFAULT, "%{public}s  was passed contextIndex=%d and imageIndex=%d.  Ignoring imageIndex.\n", buf, 0x18u);
          int v21 = 0;
        }
      }
      else
      {
        int v21 = a7;
      }
      if (GetQueue(void)::onceToken != -1) {
        dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 0x40000000;
      block[2] = __GetSurfaceFromCache_block_invoke;
      block[3] = &unk_1E5776998;
      int v40 = a6;
      int v41 = v21;
      long long v30 = *a1;
      uint64_t v31 = *((void *)a1 + 2);
      long long v32 = *a5;
      uint64_t v33 = *((void *)a5 + 2);
      uint64_t v34 = a9;
      block[4] = &v44;
      int v42 = a4;
      int v43 = a8;
      uint64_t v35 = a10;
      uint64_t v36 = a2;
      uint64_t v37 = v26;
      CFIndex v38 = Count;
      CFArrayRef v39 = theArray;
      dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
      int v22 = CI_LOG_SURFACE_CACHE();
      if (v22)
      {
        int v23 = v22;
        if (GetQueue(void)::onceToken != -1) {
          dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
        }
        v27[0] = MEMORY[0x1E4F143A8];
        v27[1] = 0x40000000;
        _OWORD v27[2] = __GetSurfaceFromCache_block_invoke_30;
        v27[3] = &__block_descriptor_tmp_31_1;
        int v28 = v23;
        dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, v27);
      }
      uint64_t v20 = v45[3];
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  _Block_object_dispose(&v44, 8);
  return v20;
}

uint64_t __GetSurfaceFromCache_block_invoke(uint64_t a1)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  if (CI_VERBOSE_SIGNPOSTS())
  {
    IOSurfaceRef v2 = ci_signpost_log_cache();
    if (os_signpost_enabled(v2))
    {
      int v3 = *(_DWORD *)(a1 + 136);
      int v4 = *(_DWORD *)(a1 + 140);
      int v5 = *(_DWORD *)(a1 + 40);
      int v6 = *(_DWORD *)(a1 + 44);
      uint64_t v7 = *(void *)(a1 + 48);
      uint64_t v8 = *(void *)(a1 + 56);
      *(_DWORD *)int buf = 67110400;
      int v61 = v3;
      __int16 v62 = 1024;
      int v63 = v4;
      __int16 v64 = 1024;
      int v65 = v5;
      __int16 v66 = 1024;
      int v67 = v6;
      __int16 v68 = 2048;
      uint64_t v69 = v7;
      __int16 v70 = 2048;
      uint64_t v71 = v8;
      _os_signpost_emit_with_name_impl(&dword_193671000, v2, OS_SIGNPOST_INTERVAL_BEGIN, 0xEEEEB0B5B2B2EEEELL, "GetSurfaceFromCache", "cid:%u iid:%u [%d %d %zu %zu]", buf, 0x2Eu);
    }
  }
  v53[0] = MEMORY[0x1E4F143A8];
  v53[1] = 0x40000000;
  uint64_t v54 = __GetSurfaceFromCache_block_invoke_27;
  CFIndex v55 = &__block_descriptor_tmp_28_2;
  int v9 = *(_DWORD *)(a1 + 140);
  int v58 = *(_DWORD *)(a1 + 136);
  int v59 = v9;
  long long v56 = *(_OWORD *)(a1 + 40);
  uint64_t v57 = *(void *)(a1 + 56);
  ++CI::gCacheGetCount;
  long long v51 = v56;
  uint64_t v52 = v57;
  int v10 = *(_DWORD *)(a1 + 144);
  long long v11 = *(_OWORD *)(a1 + 64);
  CFStringRef v12 = *(const __CFString **)(a1 + 88);
  uint64_t v50 = *(void *)(a1 + 80);
  long long v49 = v11;
  uint64_t CacheEntryWithInfo = CI::FindCacheEntryWithInfo((uint64_t)&v51, v10, (uint64_t)&v49, v58, v9, v12);
  if (CacheEntryWithInfo)
  {
    uint64_t v14 = CacheEntryWithInfo;
    unint64_t v15 = *(const void **)(CacheEntryWithInfo + 24);
    if (v15) {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFRetain(v15);
    }
    unsigned int v16 = *(_DWORD *)(a1 + 148);
    if (v16 < 7) {
      ++v16;
    }
    *(_DWORD *)(v14 + 96) = v16;
    CI::SurfaceCacheEntry::setIdentifier((CI::SurfaceCacheEntry *)v14, *(CFTypeRef *)(a1 + 88));
    uint64_t v17 = *(const void **)(v14 + 80);
    if (v17) {
      _Block_release(v17);
    }
    *(void *)(v14 + 80) = 0;
    int v18 = *(NSObject **)(v14 + 72);
    if (v18) {
      dispatch_release(v18);
    }
    *(void *)(v14 + 72) = 0;
    ++*(void *)(v14 + 88);
    BOOL v19 = SurfaceSetNonVolatile(*(__IOSurface **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    int v21 = *(unsigned char **)(a1 + 96);
    if (v19)
    {
      *int v21 = 0;
    }
    else
    {
      *int v21 = 1;
      ++CI::gCacheGetCountPurged;
    }
    int v28 = (CI *)CI::MoveCacheEntryToEnd((CI *)v14, v20);
  }
  else
  {
    ++CI::gCacheGetCountMissed;
    unint64_t v22 = (unint64_t)(*(void *)(a1 + 48) + *(void *)(a1 + 104) - 1)
        / *(void *)(a1 + 104)
        * *(void *)(a1 + 104);
    unint64_t v23 = (unint64_t)(*(void *)(a1 + 56) + *(void *)(a1 + 112) - 1)
        / *(void *)(a1 + 112)
        * *(void *)(a1 + 112);
    unint64_t v24 = atomic_load(&CI::gCacheSize);
    uint64_t v25 = equivalent_uncompressed_format(*(unsigned int *)(a1 + 144));
    Surfaceunint64_t MemorySize = CreateSurfaceMemorySize(v22, v23, 0x20uLL, v25);
    buf[0] = 0;
    char v27 = 0;
    if (SurfaceMemorySize + v24 < CI_SURFACE_CACHE_CAPACITY())
    {
      if (CI::gCacheList) {
        char v27 = *(void *)(CI::gCacheList + 16) < 0x100uLL;
      }
      else {
        char v27 = 1;
      }
    }
    int v29 = (long long *)(a1 + 64);
    if (!*(void *)(a1 + 120)
      || (unint64_t v30 = *(void *)(a1 + 48),
          unint64_t v31 = *(void *)(a1 + 56),
          int v33 = *(_DWORD *)(a1 + 140),
          int v32 = *(_DWORD *)(a1 + 144),
          long long v47 = *v29,
          uint64_t v48 = *(void *)(a1 + 80),
          (Unuseduint64_t CacheEntryWithInfo = CI::FindUnusedCacheEntryWithInfo(v30, v31, v22, v23, v32, (uint64_t)&v47, *(_DWORD *)(a1 + 136), v33, 1, buf, *(CFArrayRef *)(a1 + 128))) == 0))
    {
      unint64_t v35 = *(void *)(a1 + 48);
      unint64_t v36 = *(void *)(a1 + 56);
      int v38 = *(_DWORD *)(a1 + 140);
      int v37 = *(_DWORD *)(a1 + 144);
      long long v45 = *v29;
      uint64_t v46 = *(void *)(a1 + 80);
      Unuseduint64_t CacheEntryWithInfo = CI::FindUnusedCacheEntryWithInfo(v35, v36, v22, v23, v37, (uint64_t)&v45, *(_DWORD *)(a1 + 136), v38, v27, buf, 0);
    }
    if (buf[0]) {
      ++CI::gCacheGetCountInUseMissed;
    }
    if (!UnusedCacheEntryWithInfo)
    {
      ++CI::gCacheCountAllocated;
      operator new();
    }
    ++CI::gCacheGetCountRecycled;
    uint64_t v39 = *(void *)(a1 + 56);
    *(_OWORD *)(UnusedCacheEntryWithInfo + 32) = *(_OWORD *)(a1 + 40);
    *(void *)(UnusedCacheEntryWithInfo + 48) = v39;
    *(_DWORD *)(UnusedCacheEntryWithInfo + 56) = *(_DWORD *)(a1 + 136);
    *(_DWORD *)(UnusedCacheEntryWithInfo + 60) = *(_DWORD *)(a1 + 140);
    *(_DWORD *)(UnusedCacheEntryWithInfo + 96) = *(_DWORD *)(a1 + 148);
    CI::SurfaceCacheEntry::setIdentifier((CI::SurfaceCacheEntry *)UnusedCacheEntryWithInfo, *(CFTypeRef *)(a1 + 88));
    int v41 = *(const void **)(UnusedCacheEntryWithInfo + 80);
    if (v41) {
      _Block_release(v41);
    }
    *(void *)(UnusedCacheEntryWithInfo + 80) = 0;
    int v42 = *(NSObject **)(UnusedCacheEntryWithInfo + 72);
    if (v42) {
      dispatch_release(v42);
    }
    *(void *)(UnusedCacheEntryWithInfo + 72) = 0;
    ++*(void *)(UnusedCacheEntryWithInfo + 88);
    CI::MoveCacheEntryToEnd((CI *)UnusedCacheEntryWithInfo, v40);
    int v43 = *(const void **)(UnusedCacheEntryWithInfo + 24);
    if (v43) {
      *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = CFRetain(v43);
    }
    if (*(void *)(UnusedCacheEntryWithInfo + 88) == 1) {
      SurfaceSetVolatileEmpty(*(IOSurfaceRef *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    }
    int v28 = (CI *)SurfaceSetNonVolatile(*(__IOSurface **)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    **(unsigned char **)(a1 + 96) = 1;
  }
  CI::UpdateVolatilityStats(v28);
  return ((uint64_t (*)(void *))v54)(v53);
}

void __GetSurfaceFromCache_block_invoke_27(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  if (CI_VERBOSE_SIGNPOSTS())
  {
    IOSurfaceRef v2 = ci_signpost_log_cache();
    if (os_signpost_enabled(v2))
    {
      int v3 = *(_DWORD *)(a1 + 56);
      int v4 = *(_DWORD *)(a1 + 60);
      int v5 = *(_DWORD *)(a1 + 32);
      int v6 = *(_DWORD *)(a1 + 36);
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      v9[0] = 67110400;
      v9[1] = v3;
      __int16 v10 = 1024;
      int v11 = v4;
      __int16 v12 = 1024;
      int v13 = v5;
      __int16 v14 = 1024;
      int v15 = v6;
      __int16 v16 = 2048;
      uint64_t v17 = v7;
      __int16 v18 = 2048;
      uint64_t v19 = v8;
      _os_signpost_emit_with_name_impl(&dword_193671000, v2, OS_SIGNPOST_INTERVAL_END, 0xEEEEB0B5B2B2EEEELL, "GetSurfaceFromCache", "cid:%u iid:%u [%d %d %zu %zu]", (uint8_t *)v9, 0x2Eu);
    }
  }
}

void __GetSurfaceFromCache_block_invoke_30(uint64_t a1, uint64_t a2, const char *a3)
{
}

void __RetainSurfaceFromCache_block_invoke(CI *a1)
{
  uint64_t v1 = *((void *)a1 + 4);
  if (v1) {
    BOOL v2 = CI::gCacheList == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (!v2)
  {
    uint64_t v3 = CI::gCacheList;
    while (1)
    {
      uint64_t v3 = *(void *)(v3 + 8);
      if (v3 == CI::gCacheList) {
        break;
      }
      uint64_t v4 = *(void *)(v3 + 16);
      if (*(void *)(v4 + 24) == v1)
      {
        ++*(void *)(v4 + 88);
        CI::UpdateVolatilityStats(a1);
        int v5 = CI_LOG_SURFACE_CACHE();
        if (v5)
        {
          BOOL v7 = v5 > 1;
          CI::LogCacheState((CI *)v7, (uint64_t)"RetainSurfaceFromCache", v6);
        }
        return;
      }
    }
  }
}

void CI::RemoveCacheEntry(CI *this, CI::SurfaceCacheEntry *a2)
{
  int v13 = this;
  if (CI::gCacheList)
  {
    BOOL v2 = (CI *)std::list<CI::attached_surface_t *>::remove((void *)CI::gCacheList, &v13);
    uint64_t v3 = (const void *)*((void *)v13 + 3);
    uint64_t v4 = (void *)CI::gReleaseSurfaceBlockMap(v2);
    int v5 = v4 + 1;
    int v6 = (void *)*v4;
    if ((void *)*v4 != v4 + 1)
    {
      do
      {
        BOOL v7 = _Block_copy((const void *)v6[5]);
        CFRetain(v3);
        uint64_t v8 = v6[4];
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 0x40000000;
        block[2] = ___ZN2CIL16RemoveCacheEntryEPNS_17SurfaceCacheEntryE_block_invoke;
        block[3] = &unk_1E5776C08;
        block[4] = v7;
        void block[5] = v3;
        dispatch_async(v8, block);
        int v9 = (void *)v6[1];
        if (v9)
        {
          do
          {
            __int16 v10 = v9;
            int v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            __int16 v10 = (void *)v6[2];
            BOOL v11 = *v10 == (void)v6;
            int v6 = v10;
          }
          while (!v11);
        }
        int v6 = v10;
      }
      while (v10 != v5);
    }
  }
}

void AddReleaseSurfaceBlock(uint64_t a1, uint64_t a2)
{
  if (GetQueue(void)::onceToken != -1) {
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __AddReleaseSurfaceBlock_block_invoke;
  v4[3] = &unk_1E5776A20;
  v4[4] = a2;
  void v4[5] = a1;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, v4);
}

uint64_t *__AddReleaseSurfaceBlock_block_invoke(uint64_t a1)
{
  uint64_t v2 = CI::gReleaseSurfaceBlockMap((CI *)a1);
  uint64_t v3 = (uint64_t *)(a1 + 40);
  int v6 = *(void **)(v2 + 8);
  uint64_t v4 = (CI *)(v2 + 8);
  int v5 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  unint64_t v7 = *v3;
  uint64_t v8 = v4;
  do
  {
    unint64_t v9 = v5[4];
    BOOL v10 = v9 >= v7;
    if (v9 >= v7) {
      BOOL v11 = v5;
    }
    else {
      BOOL v11 = v5 + 1;
    }
    if (v10) {
      uint64_t v8 = (CI *)v5;
    }
    int v5 = (void *)*v11;
  }
  while (*v11);
  if (v8 == v4 || v7 < *((void *)v8 + 4)) {
LABEL_12:
  }
    uint64_t v8 = v4;
  if (v8 != (CI *)(CI::gReleaseSurfaceBlockMap(v4) + 8)) {
    __AddReleaseSurfaceBlock_block_invoke_cold_1();
  }
  dispatch_retain(*(dispatch_object_t *)(a1 + 40));
  __int16 v12 = (CI *)_Block_copy(*(const void **)(a1 + 32));
  int v13 = (uint64_t **)CI::gReleaseSurfaceBlockMap(v12);
  int v15 = v3;
  CFIndex result = std::__tree<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::ColorKernelOutputIdx>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v13, (unint64_t *)v3, (uint64_t)&std::piecewise_construct, &v15);
  result[5] = (uint64_t)v12;
  return result;
}

void RemoveReleaseSurfaceBlock(uint64_t a1)
{
  if (GetQueue(void)::onceToken != -1) {
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __RemoveReleaseSurfaceBlock_block_invoke;
  block[3] = &__block_descriptor_tmp_45_0;
  block[4] = a1;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
}

uint64_t __RemoveReleaseSurfaceBlock_block_invoke(CI *a1)
{
  uint64_t v2 = CI::gReleaseSurfaceBlockMap(a1);
  uint64_t v3 = (dispatch_object_t *)((char *)a1 + 32);
  int v6 = *(void **)(v2 + 8);
  uint64_t v4 = (CI *)(v2 + 8);
  int v5 = v6;
  if (!v6) {
    goto LABEL_12;
  }
  dispatch_object_t v7 = *v3;
  uint64_t v8 = v4;
  do
  {
    unint64_t v9 = v5[4];
    BOOL v10 = v9 >= (unint64_t)v7;
    if (v9 >= (unint64_t)v7) {
      BOOL v11 = v5;
    }
    else {
      BOOL v11 = v5 + 1;
    }
    if (v10) {
      uint64_t v8 = (CI *)v5;
    }
    int v5 = (void *)*v11;
  }
  while (*v11);
  if (v8 == v4 || (unint64_t)v7 < *((void *)v8 + 4)) {
LABEL_12:
  }
    uint64_t v8 = v4;
  uint64_t result = CI::gReleaseSurfaceBlockMap(v4);
  if (v8 != (CI *)(result + 8))
  {
    _Block_release(*((const void **)v8 + 5));
    dispatch_release(*v3);
    uint64_t v14 = CI::gReleaseSurfaceBlockMap(v13);
    return std::__tree<std::__value_type<dispatch_queue_s *,void({block_pointer})(__IOSurface *)>,std::__map_value_compare<dispatch_queue_s *,std::__value_type<dispatch_queue_s *,void({block_pointer})(__IOSurface *)>,std::less<dispatch_queue_s *>,true>,std::allocator<std::__value_type<dispatch_queue_s *,void({block_pointer})(__IOSurface *)>>>::__erase_unique<dispatch_queue_s *>(v14, (unint64_t *)v3);
  }
  return result;
}

void RemoveCacheEntriesForContext(int a1)
{
  if (GetQueue(void)::onceToken != -1) {
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __RemoveCacheEntriesForContext_block_invoke;
  block[3] = &__block_descriptor_tmp_50;
  int v3 = a1;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
}

void __RemoveCacheEntriesForContext_block_invoke(CI *a1, unint64_t a2)
{
  int v2 = *((_DWORD *)a1 + 8);
  uint64_t v3 = CI::gCacheList;
  if (v2) {
    BOOL v4 = CI::gCacheList == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4) {
    goto LABEL_37;
  }
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  __int16 v18 = 0;
  uint64_t v5 = *(void *)(CI::gCacheList + 8);
  if (v5 == CI::gCacheList) {
    goto LABEL_37;
  }
  int v6 = 0;
  char v7 = 0;
  do
  {
    uint64_t v8 = *(void *)(v5 + 16);
    if (*(_DWORD *)(v8 + 56) == v2 && !*(void *)(v8 + 88))
    {
      if (v6 >= (CI **)v20)
      {
        uint64_t v9 = ((char *)v6 - v18) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          abort();
        }
        unint64_t v10 = (v20 - v18) >> 2;
        if (v10 <= v9 + 1) {
          unint64_t v10 = v9 + 1;
        }
        if ((unint64_t)(v20 - v18) >= 0x7FFFFFFFFFFFFFF8) {
          a2 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          a2 = v10;
        }
        if (a2) {
          a1 = (CI *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)&v20, a2);
        }
        else {
          a1 = 0;
        }
        BOOL v11 = (void *)((char *)a1 + 8 * v9);
        *BOOL v11 = v8;
        int v6 = (CI **)(v11 + 1);
        __int16 v12 = v19;
        if (v19 != (CI **)v18)
        {
          do
          {
            uint64_t v13 = (uint64_t)*--v12;
            *--BOOL v11 = v13;
          }
          while (v12 != (CI **)v18);
          __int16 v12 = (CI **)v18;
        }
        __int16 v18 = (char *)v11;
        uint64_t v20 = (char *)a1 + 8 * a2;
        if (v12) {
          operator delete(v12);
        }
      }
      else
      {
        *v6++ = (CI *)v8;
      }
      uint64_t v19 = v6;
      char v7 = 1;
    }
    uint64_t v5 = *(void *)(v5 + 8);
  }
  while (v5 != v3);
  uint64_t v14 = (CI **)v18;
  if (v18 != (char *)v6)
  {
    do
    {
      int v15 = *v14;
      CI::RemoveCacheEntry(*v14, (CI::SurfaceCacheEntry *)a2);
      if (v15) {
        a1 = (CI *)(*(uint64_t (**)(CI *))(*(void *)v15 + 8))(v15);
      }
      ++v14;
    }
    while (v14 != v6);
    int v6 = (CI **)v18;
  }
  if (v6) {
    operator delete(v6);
  }
  if ((v7 & 1) == 0)
  {
LABEL_37:
    CI_LOG_SURFACE_CACHE();
  }
  else
  {
    CI::UpdateVolatilityStats(a1);
    int v16 = CI_LOG_SURFACE_CACHE();
    if (v16) {
      CI::LogCacheState((CI *)(v16 > 1), (uint64_t)"RemoveCacheEntriesForContext", v17);
    }
  }
}

void PurgeCacheEntriesForImage(int a1)
{
  if (GetQueue(void)::onceToken != -1) {
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __PurgeCacheEntriesForImage_block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  int v3 = a1;
  dispatch_async((dispatch_queue_t)gSurfaceCacheQueue, block);
}

float GetSurfaceCacheFillTime()
{
  uint64_t v3 = 0;
  BOOL v4 = (float *)&v3;
  uint64_t v5 = 0x2000000000;
  int v6 = 0;
  if (GetQueue(void)::onceToken != -1) {
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __GetSurfaceCacheFillTime_block_invoke;
  block[3] = &unk_1E5770568;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
  float v0 = v4[6];
  _Block_object_dispose(&v3, 8);
  return v0;
}

float __GetSurfaceCacheFillTime_block_invoke(uint64_t a1)
{
  mach_timebase_info(&info);
  LODWORD(v2) = info.numer;
  LODWORD(v3) = info.denom;
  float result = (double)CI::gTimeFilling * (double)v2 / ((double)v3 * 1000000000.0);
  *(float *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t GetSurfaceCacheNonVolatileSize()
{
  uint64_t v3 = 0;
  BOOL v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v6 = 0;
  if (GetQueue(void)::onceToken != -1) {
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __GetSurfaceCacheNonVolatileSize_block_invoke;
  block[3] = &unk_1E5776AC8;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
  uint64_t v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __GetSurfaceCacheNonVolatileSize_block_invoke(uint64_t result)
{
  unint64_t v1 = atomic_load(&CI::gCacheSize);
  unint64_t v2 = atomic_load(&CI::gVolatileSize);
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v1 - v2;
  return result;
}

uint64_t GetSurfaceCachePeakNonVolatileSize()
{
  uint64_t v3 = 0;
  BOOL v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v6 = 0;
  if (GetQueue(void)::onceToken != -1) {
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __GetSurfaceCachePeakNonVolatileSize_block_invoke;
  block[3] = &unk_1E5776AF0;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
  uint64_t v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __GetSurfaceCachePeakNonVolatileSize_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = CI::gCacheNonVolatileSizePeak;
  return result;
}

uint64_t GetSurfaceCacheNonVolatileSizeForContext(int a1)
{
  uint64_t v6 = 0;
  char v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  if (GetQueue(void)::onceToken != -1) {
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = __GetSurfaceCacheNonVolatileSizeForContext_block_invoke;
  v4[3] = &unk_1E5776B18;
  v4[4] = &v6;
  int v5 = a1;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, v4);
  uint64_t v2 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v2;
}

uint64_t __GetSurfaceCacheNonVolatileSizeForContext_block_invoke(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 40);
  if (v1) {
    BOOL v2 = CI::gCacheList == 0;
  }
  else {
    BOOL v2 = 1;
  }
  if (v2 || (uint64_t v3 = *(void *)(CI::gCacheList + 8), v3 == CI::gCacheList))
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = *(void *)(v3 + 16);
      if (*(_DWORD *)(v5 + 56) == v1 && *(void *)(v5 + 88)) {
        v4 += *(void *)(v5 + 104);
      }
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != CI::gCacheList);
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  return result;
}

uint64_t CopyPeakNonVolatileList()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v6 = 0;
  if (GetQueue(void)::onceToken != -1) {
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __CopyPeakNonVolatileList_block_invoke;
  block[3] = &unk_1E57704A8;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
  uint64_t v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

CFArrayRef __CopyPeakNonVolatileList_block_invoke(uint64_t a1, const __CFArray *a2)
{
  CFArrayRef result = __CFArray::createCopy((CFArrayRef)CI::gPeakNonVolatileList, a2);
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

uint64_t GetSurfaceCacheCountAllocated()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2000000000;
  uint64_t v6 = 0;
  if (GetQueue(void)::onceToken != -1) {
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = __GetSurfaceCacheCountAllocated_block_invoke;
  block[3] = &unk_1E5776B40;
  void block[4] = &v3;
  dispatch_sync((dispatch_queue_t)gSurfaceCacheQueue, block);
  uint64_t v0 = v4[3];
  _Block_object_dispose(&v3, 8);
  return v0;
}

uint64_t __GetSurfaceCacheCountAllocated_block_invoke(uint64_t result)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = CI::gCacheCountAllocated;
  return result;
}

void ResetCacheStatistics()
{
  if (GetQueue(void)::onceToken != -1) {
    dispatch_once(&GetQueue(void)::onceToken, &__block_literal_global_71);
  }
  uint64_t v0 = gSurfaceCacheQueue;

  dispatch_sync(v0, &__block_literal_global_63_0);
}

void __ResetCacheStatistics_block_invoke()
{
  CI::gCacheCountPeak = 0;
  CI::gCacheSizePeak = 0;
  CI::gCacheNonVolatileSizePeak = 0;
  CI::gCacheCountAllocated = 0;
  CI::gCacheBytesAllocated = 0;
  CI::gCacheBytesFilled = 0;
  if (CI::gPeakNonVolatileList) {
    CFArrayRemoveAllValues((CFMutableArrayRef)CI::gPeakNonVolatileList);
  }
  if (CI_LOG_SURFACE_CACHE())
  {
    CI::LogCacheState((CI *)1, (uint64_t)"ResetCacheStatistics", v0);
  }
}

uint64_t CI::SurfaceCacheEntry::type(CI::SurfaceCacheEntry *this)
{
  return 78;
}

uint64_t non-virtual thunk to'CI::SurfaceCacheEntry::type(CI::SurfaceCacheEntry *this)
{
  return 78;
}

BOOL CI::isPriorEntry(CI *this, const CI::SurfaceCacheEntry *a2)
{
  if (*((uint64_t *)this + 11) > 0) {
    return 1;
  }
  if (*((int *)this + 24) >= 7 && *((void *)this + 8)) {
    return !SurfaceIsVolatileEmpty(*((__IOSurface **)this + 3));
  }
  return 0;
}

void std::deque<CI::SurfaceCacheEntry *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<CI::SurfaceCacheEntry *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<CI::SurfaceCacheEntry *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v29 = 1;
      }
      else {
        unint64_t v29 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v5, v29);
      unint64_t v31 = &v30[8 * (v29 >> 2)];
      int v33 = &v30[8 * v32];
      uint64_t v34 = (uint64_t *)a1[1];
      unint64_t v8 = v31;
      uint64_t v35 = a1[2] - (void)v34;
      if (v35)
      {
        unint64_t v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v36 = 8 * (v35 >> 3);
        int v37 = &v30[8 * (v29 >> 2)];
        do
        {
          uint64_t v38 = *v34++;
          *(void *)int v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<CI::SurfaceCacheEntry **>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<CI::SurfaceCacheEntry **>::push_front((uint64_t)a1, &v54);
    int v40 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v41 = *v40;
    uint64_t v9 = (char *)(v40 + 1);
    uint64_t v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_29;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v46);
      unint64_t v31 = &v30[8 * (v46 >> 2)];
      int v33 = &v30[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v31;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        long long v51 = &v30[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)long long v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      uint64_t v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  long long v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  int v53 = operator new(0x1000uLL);
  std::__split_buffer<CI::SurfaceCacheEntry **>::push_back(&v54, &v53);
  char v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    int v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<CI::SurfaceCacheEntry **>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    int v28 = (char *)a1[2];
  }
  int v42 = (char *)*a1;
  long long v43 = v54;
  long long v44 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  uint64_t v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(void *)&long long v55 = v28;
  *((void *)&v55 + 1) = v45;
  if (v28 != v27) {
    *(void *)&long long v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (v42) {
    operator delete(v42);
  }
}

void std::__split_buffer<CI::SurfaceCacheEntry **>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      char v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(a1[4], v16);
      uint64_t v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<CI::SurfaceCacheEntry **>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned long>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

void __CFDictionary::setValue(__CFDictionary *this, __CFDictionary *a2, __CFString *a3)
{
  CFNumberRef v5 = __CFNumber::number((__CFNumber *)a3);
  __CFDictionary::setValue(this, a2, v5, v6);
  if (v5)
  {
    CFRelease(v5);
  }
}

CFNumberRef __CFNumber::number(__CFNumber *this)
{
  if ((this & 0x80000000) != 0)
  {
    uint64_t valuePtr = this;
    p_uint64_t valuePtr = &valuePtr;
    CFNumberType v2 = kCFNumberSInt64Type;
  }
  else
  {
    int v4 = (int)this;
    p_uint64_t valuePtr = (uint64_t *)&v4;
    CFNumberType v2 = kCFNumberSInt32Type;
  }
  return CFNumberCreate(0, v2, p_valuePtr);
}

uint64_t ___ZN2CIL13LogCacheStateEbPKc_block_invoke(uint64_t a1, FILE *a2)
{
  fprintf(a2, "SurfaceCache: %s\n", *(const char **)(a1 + 32));
  fprintf(a2, "  count: %ld\n", *(void *)(a1 + 40));
  unint64_t v6 = atomic_load(&CI::gCacheSize);
  if (v6 < 0x80000001)
  {
    if (v6 <= 0x200000)
    {
      if (v6 < 0x801) {
        goto LABEL_8;
      }
      double v7 = (double)v6;
      double v8 = 0.0009765625;
    }
    else
    {
      double v7 = (double)v6;
      double v8 = 0.000000953674316;
    }
  }
  else
  {
    double v7 = (double)v6;
    double v8 = 9.31322575e-10;
  }
  unint64_t v6 = llround(v7 * v8);
LABEL_8:
  unint64_t v9 = atomic_load(&CI::gCacheSize);
  if (v9 <= 0x80000000)
  {
    if (v9 <= 0x200000)
    {
      if (v9 <= 0x800) {
        uint64_t v10 = "B";
      }
      else {
        uint64_t v10 = "KB";
      }
    }
    else
    {
      uint64_t v10 = "MB";
    }
  }
  else
  {
    uint64_t v10 = "GB";
  }
  fprintf(a2, "  size: %ld%s\n", v6, v10);
  unint64_t v11 = *(void *)(a1 + 48);
  unint64_t v12 = llround((double)v11 * 9.31322575e-10);
  unint64_t v13 = llround((double)v11 * 0.000000953674316);
  uint64_t v14 = "MB";
  unint64_t v15 = llround((double)v11 * 0.0009765625);
  if (v11 > 0x800)
  {
    int64_t v16 = "KB";
  }
  else
  {
    unint64_t v15 = *(void *)(a1 + 48);
    int64_t v16 = "B";
  }
  if (v11 <= 0x200000)
  {
    unint64_t v13 = v15;
    uint64_t v14 = v16;
  }
  BOOL v17 = v11 > 0x80000000;
  if (v11 <= 0x80000000) {
    unint64_t v18 = v13;
  }
  else {
    unint64_t v18 = v12;
  }
  if (v17) {
    uint64_t v19 = "GB";
  }
  else {
    uint64_t v19 = v14;
  }
  fprintf(a2, "  non-volatile: %ld%s\n", v18, v19);
  unint64_t v20 = *(void *)(a1 + 56);
  unint64_t v21 = llround((double)v20 * 9.31322575e-10);
  unint64_t v22 = llround((double)v20 * 0.000000953674316);
  uint64_t v23 = "MB";
  unint64_t v24 = llround((double)v20 * 0.0009765625);
  if (v20 > 0x800)
  {
    unint64_t v25 = "KB";
  }
  else
  {
    unint64_t v24 = *(void *)(a1 + 56);
    unint64_t v25 = "B";
  }
  if (v20 <= 0x200000)
  {
    unint64_t v22 = v24;
    uint64_t v23 = v25;
  }
  BOOL v26 = v20 > 0x80000000;
  if (v20 <= 0x80000000) {
    unint64_t v27 = v22;
  }
  else {
    unint64_t v27 = v21;
  }
  if (v26) {
    int v28 = "GB";
  }
  else {
    int v28 = v23;
  }
  uint64_t result = fprintf(a2, "  volatile: %ld%s\n", v27, v28);
  unint64_t v30 = *(void *)(a1 + 64);
  if (v30 != -1)
  {
    unint64_t v31 = llround((double)v30 * 9.31322575e-10);
    unint64_t v32 = llround((double)v30 * 0.000000953674316);
    int v33 = "MB";
    unint64_t v34 = llround((double)v30 * 0.0009765625);
    if (v30 > 0x800)
    {
      uint64_t v35 = "KB";
    }
    else
    {
      unint64_t v34 = *(void *)(a1 + 64);
      uint64_t v35 = "B";
    }
    if (v30 <= 0x200000)
    {
      unint64_t v32 = v34;
      int v33 = v35;
    }
    BOOL v36 = v30 > 0x80000000;
    if (v30 <= 0x80000000) {
      unint64_t v37 = v32;
    }
    else {
      unint64_t v37 = v31;
    }
    if (v36) {
      uint64_t v38 = "GB";
    }
    else {
      uint64_t v38 = v33;
    }
    uint64_t result = fprintf(a2, "  capacity: %ld%s\n", v37, v38);
  }
  if (CI::gCacheGetCount)
  {
    mach_timebase_info(&info);
    double v39 = (double)CI::gTimeFilling;
    LODWORD(v2) = info.numer;
    LODWORD(v3) = info.denom;
    fwrite("  cumulativeStats:\n", 0x13uLL, 1uLL, a2);
    unint64_t v40 = CI::gCacheSizePeak;
    if ((unint64_t)CI::gCacheSizePeak <= 0x80000000)
    {
      if ((unint64_t)CI::gCacheSizePeak <= 0x200000)
      {
        unint64_t v42 = llround((double)(unint64_t)CI::gCacheSizePeak * 0.0009765625);
        if ((unint64_t)CI::gCacheSizePeak <= 0x800)
        {
          uint64_t v41 = "B";
        }
        else
        {
          unint64_t v40 = v42;
          uint64_t v41 = "KB";
        }
      }
      else
      {
        unint64_t v40 = llround((double)(unint64_t)CI::gCacheSizePeak * 0.000000953674316);
        uint64_t v41 = "MB";
      }
    }
    else
    {
      unint64_t v40 = llround((double)(unint64_t)CI::gCacheSizePeak * 9.31322575e-10);
      uint64_t v41 = "GB";
    }
    unint64_t v43 = CI::gCacheNonVolatileSizePeak;
    if ((unint64_t)CI::gCacheNonVolatileSizePeak <= 0x80000000)
    {
      if ((unint64_t)CI::gCacheNonVolatileSizePeak <= 0x200000)
      {
        unint64_t v45 = llround((double)(unint64_t)CI::gCacheNonVolatileSizePeak * 0.0009765625);
        if ((unint64_t)CI::gCacheNonVolatileSizePeak <= 0x800)
        {
          long long v44 = "B";
        }
        else
        {
          unint64_t v43 = v45;
          long long v44 = "KB";
        }
      }
      else
      {
        unint64_t v43 = llround((double)(unint64_t)CI::gCacheNonVolatileSizePeak * 0.000000953674316);
        long long v44 = "MB";
      }
    }
    else
    {
      unint64_t v43 = llround((double)(unint64_t)CI::gCacheNonVolatileSizePeak * 9.31322575e-10);
      long long v44 = "GB";
    }
    unint64_t v46 = CI::gCacheBytesAllocated;
    if ((unint64_t)CI::gCacheBytesAllocated <= 0x80000000)
    {
      if ((unint64_t)CI::gCacheBytesAllocated <= 0x200000)
      {
        unint64_t v48 = llround((double)(unint64_t)CI::gCacheBytesAllocated * 0.0009765625);
        if ((unint64_t)CI::gCacheBytesAllocated <= 0x800)
        {
          uint64_t v47 = "B";
        }
        else
        {
          unint64_t v46 = v48;
          uint64_t v47 = "KB";
        }
      }
      else
      {
        unint64_t v46 = llround((double)(unint64_t)CI::gCacheBytesAllocated * 0.000000953674316);
        uint64_t v47 = "MB";
      }
    }
    else
    {
      unint64_t v46 = llround((double)(unint64_t)CI::gCacheBytesAllocated * 9.31322575e-10);
      uint64_t v47 = "GB";
    }
    unint64_t v49 = CI::gCacheBytesFilled;
    if ((unint64_t)CI::gCacheBytesFilled <= 0x80000000)
    {
      if ((unint64_t)CI::gCacheBytesFilled <= 0x200000)
      {
        unint64_t v51 = llround((double)(unint64_t)CI::gCacheBytesFilled * 0.0009765625);
        if ((unint64_t)CI::gCacheBytesFilled <= 0x800)
        {
          uint64_t v50 = "B";
        }
        else
        {
          unint64_t v49 = v51;
          uint64_t v50 = "KB";
        }
      }
      else
      {
        unint64_t v49 = llround((double)(unint64_t)CI::gCacheBytesFilled * 0.000000953674316);
        uint64_t v50 = "MB";
      }
    }
    else
    {
      unint64_t v49 = llround((double)(unint64_t)CI::gCacheBytesFilled * 9.31322575e-10);
      uint64_t v50 = "GB";
    }
    fprintf(a2, "    allocCount=%ld peakCount=%ld peakSize=%ld%s peakNVSize=%ld%s totalAlloced=%ld%s totalFilled=%ld%s timeFilling=%.3gms\n", CI::gCacheCountAllocated, CI::gCacheCountPeak, v40, v41, v43, v44, v46, v47, v49, v50, v39 * 1000.0 * (double)v2 / ((double)v3 * 1000000000.0));
    return fprintf(a2, "    hits=%ld (%lu%%)  purgedHits=%ld (%lu%%)  recycledMisses=%ld (%lu%%)  misses=%ld (%lu%%)  inusemisses=%ld (%lu%%)\n", CI::gCacheGetCount - (CI::gCacheGetCountMissed + CI::gCacheGetCountPurged), 100* (CI::gCacheGetCount - (CI::gCacheGetCountMissed + CI::gCacheGetCountPurged))/ (unint64_t)CI::gCacheGetCount, CI::gCacheGetCountPurged, 100 * CI::gCacheGetCountPurged / (unint64_t)CI::gCacheGetCount, CI::gCacheGetCountRecycled, 100 * CI::gCacheGetCountRecycled / (unint64_t)CI::gCacheGetCount, CI::gCacheGetCountMissed - CI::gCacheGetCountRecycled, 100 * (CI::gCacheGetCountMissed - CI::gCacheGetCountRecycled) / (unint64_t)CI::gCacheGetCount, CI::gCacheGetCountInUseMissed, 100 * CI::gCacheGetCountInUseMissed / (unint64_t)CI::gCacheGetCount);
  }
  return result;
}

uint64_t ___ZN2CIL13LogCacheStateEbPKc_block_invoke_114(int a1, FILE *__stream)
{
  uint64_t v2 = CI::gCacheList;
  uint64_t v3 = *(void *)(CI::gCacheList + 8);
  if (v3 != CI::gCacheList)
  {
    do
    {
      CFNumberRef v5 = *(CI::SurfaceCacheEntry **)(v3 + 16);
      fwrite("  ", 2uLL, 1uLL, __stream);
      uint64_t result = CI::SurfaceCacheEntry::print_core(v5, __stream);
      uint64_t v3 = *(void *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return result;
}

void ___ZN2CIL16RemoveCacheEntryEPNS_17SurfaceCacheEntryE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  _Block_release(*(const void **)(a1 + 32));
  uint64_t v2 = *(const void **)(a1 + 40);

  CFRelease(v2);
}

CFArrayRef __CFArray::createCopy(CFArrayRef theArray, const __CFArray *a2)
{
  if (theArray) {
    return CFArrayCreateCopy(0, theArray);
  }
  else {
    return CFArrayCreate(0, 0, 0, MEMORY[0x1E4F1D510]);
  }
}

uint64_t CI::InstanceCounted<(CI::Type)78>::type()
{
  return 78;
}

void *CI::InstanceCounted<(CI::Type)78>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE45B1D8;
  atomic_fetch_add(&dword_1EB466F58[20], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)78>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE45B1D8;
  atomic_fetch_add(&dword_1EB466F58[20], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

uint64_t std::__tree<std::__value_type<dispatch_queue_s *,void({block_pointer})(__IOSurface *)>,std::__map_value_compare<dispatch_queue_s *,std::__value_type<dispatch_queue_s *,void({block_pointer})(__IOSurface *)>,std::less<dispatch_queue_s *>,true>,std::allocator<std::__value_type<dispatch_queue_s *,void({block_pointer})(__IOSurface *)>>>::__erase_unique<dispatch_queue_s *>(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  int v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      double v7 = v2;
    }
    else {
      double v7 = v2 + 1;
    }
    if (v6) {
      int v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::__remove_node_pointer((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void *CI::TileTask::setTaskError(void *this, CFTypeRef cf)
{
  if (!this[23])
  {
    this[23] = cf;
    return CFRetain(cf);
  }
  return this;
}

void CI::TileTask::setCommandBufferError(CI::TileTask *this, CFTypeRef cf)
{
  CFRetain(cf);
  int v4 = *((void *)this + 21);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  v5[2] = ___ZN2CI8TileTask21setCommandBufferErrorEP9__CFError_block_invoke;
  _OWORD v5[3] = &__block_descriptor_tmp_2_2;
  _OWORD v5[4] = this;
  void v5[5] = cf;
  dispatch_async(v4, v5);
}

void ___ZN2CI8TileTask21setCommandBufferErrorEP9__CFError_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (!*(void *)(v1 + 176))
  {
    *(void *)(v1 + 176) = CFRetain(*(CFTypeRef *)(a1 + 40));
    unint64_t v3 = *(const void **)(a1 + 40);
    CFRelease(v3);
  }
}

void CI::TileTask::incrementCyclesForNode(CI::TileTask *this, const CI::ProgramNode *a2, uint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = *((void *)this + 21);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN2CI8TileTask22incrementCyclesForNodeEPKNS_11ProgramNodeEy_block_invoke;
    block[3] = &__block_descriptor_tmp_7_5;
    void block[4] = this;
    void block[5] = a2;
    void block[6] = a3;
    dispatch_async(v3, block);
  }
}

char *___ZN2CI8TileTask22incrementCyclesForNodeEPKNS_11ProgramNodeEy_block_invoke(void *a1)
{
  uint64_t v2 = a1[4] + 88;
  unint64_t v5 = (unsigned int *)(a1[5] + 36);
  std::__hash_table<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::__unordered_map_hasher<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::hash<CI::NodeIndex>,std::equal_to<CI::NodeIndex>,true>,std::__unordered_map_equal<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::equal_to<CI::NodeIndex>,std::hash<CI::NodeIndex>,true>,std::allocator<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(v2, v5, (uint64_t)&std::piecewise_construct, &v5)[80] = 1;
  uint64_t v3 = a1[6];
  unint64_t v5 = (unsigned int *)(a1[5] + 36);
  uint64_t result = std::__hash_table<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::__unordered_map_hasher<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::hash<CI::NodeIndex>,std::equal_to<CI::NodeIndex>,true>,std::__unordered_map_equal<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::equal_to<CI::NodeIndex>,std::hash<CI::NodeIndex>,true>,std::allocator<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(v2, v5, (uint64_t)&std::piecewise_construct, &v5);
  *((void *)result + 8) += v3;
  return result;
}

void CI::TileTask::incrementNanoSecForNode(CI::TileTask *this, const CI::ProgramNode *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = *((void *)this + 21);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN2CI8TileTask23incrementNanoSecForNodeEPKNS_11ProgramNodeEy_block_invoke;
    block[3] = &__block_descriptor_tmp_8_4;
    void block[4] = this;
    void block[5] = a2;
    void block[6] = a3;
    dispatch_async(v3, block);
  }
}

char *___ZN2CI8TileTask23incrementNanoSecForNodeEPKNS_11ProgramNodeEy_block_invoke(void *a1)
{
  uint64_t v2 = a1[4] + 88;
  unint64_t v5 = (unsigned int *)(a1[5] + 36);
  std::__hash_table<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::__unordered_map_hasher<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::hash<CI::NodeIndex>,std::equal_to<CI::NodeIndex>,true>,std::__unordered_map_equal<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::equal_to<CI::NodeIndex>,std::hash<CI::NodeIndex>,true>,std::allocator<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(v2, v5, (uint64_t)&std::piecewise_construct, &v5)[80] = 1;
  uint64_t v3 = a1[6];
  unint64_t v5 = (unsigned int *)(a1[5] + 36);
  uint64_t result = std::__hash_table<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::__unordered_map_hasher<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::hash<CI::NodeIndex>,std::equal_to<CI::NodeIndex>,true>,std::__unordered_map_equal<CI::NodeIndex,std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>,std::equal_to<CI::NodeIndex>,std::hash<CI::NodeIndex>,true>,std::allocator<std::__hash_value_type<CI::NodeIndex,CI::Node::NodeStats>>>::__emplace_unique_key_args<CI::NodeIndex,std::piecewise_construct_t const&,std::tuple<CI::NodeIndex const&>,std::tuple<>>(v2, v5, (uint64_t)&std::piecewise_construct, &v5);
  *((void *)result + 9) += v3;
  return result;
}

uint64_t CI::TileTask::executionNanoSec(CI::TileTask *this)
{
  uint64_t v5 = 0;
  BOOL v6 = &v5;
  uint64_t v7 = 0x2000000000;
  uint64_t v8 = 0;
  uint64_t v1 = *((void *)this + 21);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  v4[2] = ___ZNK2CI8TileTask16executionNanoSecEv_block_invoke;
  v4[3] = &unk_1E5776DF8;
  v4[4] = &v5;
  void v4[5] = this;
  dispatch_sync(v1, v4);
  uint64_t v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

uint64_t ___ZNK2CI8TileTask16executionNanoSecEv_block_invoke(uint64_t result)
{
  uint64_t v1 = *(void **)(*(void *)(result + 40) + 104);
  if (v1)
  {
    uint64_t v2 = 0;
    while (1)
    {
      uint64_t v3 = v1[9];
      if (!v3) {
        break;
      }
      v2 += v3;
      uint64_t v1 = (void *)*v1;
      if (!v1) {
        goto LABEL_7;
      }
    }
  }
  else
  {
    uint64_t v2 = 0;
LABEL_7:
    *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  }
  return result;
}

void *CI::TileTask::graphviz_representation(CI::TileTask *this, const CI::RenderTask *a2)
{
  uint64_t v4 = *((void *)this + 6);
  id v5 = CIGVGraphCreate();
  BOOL v6 = v5;
  if (v5)
  {
    v32[0] = 0;
    v32[1] = v32;
    v32[2] = 0x5002000000;
    v32[3] = __Block_byref_object_copy__28;
    v32[4] = __Block_byref_object_dispose__28;
    memset(v33, 0, sizeof(v33));
    int v34 = 1065353216;
    v29[0] = 0;
    v29[1] = v29;
    v29[2] = 0x5002000000;
    void v29[3] = __Block_byref_object_copy__16;
    _OWORD v29[4] = __Block_byref_object_dispose__17;
    memset(v30, 0, sizeof(v30));
    int v31 = 1065353216;
    uint64_t v22 = 0;
    uint64_t v23 = &v22;
    uint64_t v24 = 0x5002000000;
    unint64_t v25 = __Block_byref_object_copy__18;
    BOOL v26 = __Block_byref_object_dispose__19;
    memset(v27, 0, sizeof(v27));
    int v28 = 1065353216;
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 0x40000000;
    void v21[2] = ___ZNK2CI8TileTask23graphviz_representationEPKNS_10RenderTaskE_block_invoke;
    v21[3] = &unk_1E5770AF8;
    void v21[4] = &v22;
    void v21[5] = v32;
    void v21[6] = v29;
    _OWORD v21[7] = this;
    v21[8] = v5;
    uint64_t v14 = MEMORY[0x1E4F143A8];
    uint64_t v15 = 0x40000000;
    uint64_t v16 = (uint64_t)___ZNK2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPKS0_E_block_invoke_0;
    BOOL v17 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E5776E68;
    unint64_t v18 = (uint64_t (*)(uint64_t))v21;
    CI::GraphObject::traverse_preorder_stoppable(v4, 0, 0, 0, (uint64_t)&v14);
    uint64_t v14 = 0;
    uint64_t v15 = (uint64_t)&v14;
    uint64_t v16 = 0x5002000000;
    BOOL v17 = __Block_byref_object_copy__22;
    unint64_t v18 = __Block_byref_object_dispose__23;
    memset(v19, 0, sizeof(v19));
    int v20 = 1065353216;
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 0x40000000;
    v13[2] = ___ZNK2CI8TileTask23graphviz_representationEPKNS_10RenderTaskE_block_invoke_24;
    void v13[3] = &unk_1E5776E20;
    v13[4] = &v14;
    int64x2_t v13[5] = &v22;
    v13[6] = v6;
    v35[0] = MEMORY[0x1E4F143A8];
    v35[1] = 0x40000000;
    _OWORD v35[2] = ___ZNK2CI4Node27traverse_preorder_stoppableEU13block_pointerFbPKS0_E_block_invoke_0;
    v35[3] = &unk_1E5776E68;
    double v35[4] = v13;
    CI::GraphObject::traverse_preorder_stoppable(v4, 0, 0, 0, (uint64_t)v35);
    uint64_t v7 = CIGVNodeCreate();
    CIGVNodeSetColor(v7, (const char *)0xD);
    CIGVNodeSetShape(v7, 0);
    if (*((void *)a2 + 12)) {
      CFStringRef v8 = CFStringCreateWithFormat(0, 0, @"destination=%@\n", *((void *)a2 + 12));
    }
    else {
      CFStringRef v8 = &stru_1EE465CC0;
    }
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    void v12[2] = ___ZNK2CI8TileTask23graphviz_representationEPKNS_10RenderTaskE_block_invoke_2;
    void v12[3] = &__block_descriptor_tmp_43;
    v12[4] = this;
    v12[5] = a2;
    unint64_t v9 = (const char *)stream_to_string((uint64_t)v12);
    CIGVNodeSetLabel(v7, v9);
    CFRelease(v8);
    CFRelease(v9);
    CIGVGraphAddNode(v6, (const char *)v7);
    v35[0] = v4;
    uint64_t v10 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>(v23 + 5, v35);
    CIGVGraphAddEdge(v6, (const char *)v10[3], (uint64_t)v7);
    CFRelease(v7);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::clear(v23 + 5);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::clear((void *)(v15 + 40));
    _Block_object_dispose(&v14, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v19);
    _Block_object_dispose(&v22, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v27);
    _Block_object_dispose(v29, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v30);
    _Block_object_dispose(v32, 8);
    std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table((uint64_t)v33);
  }
  return v6;
}

uint64_t __Block_byref_object_copy__28(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__28(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t __Block_byref_object_copy__16(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__17(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t __Block_byref_object_copy__18(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

uint64_t __Block_byref_object_dispose__19(uint64_t a1)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::~__hash_table(a1 + 40);
}

uint64_t ___ZNK2CI8TileTask23graphviz_representationEPKNS_10RenderTaskE_block_invoke(uint64_t a1, unsigned int *a2)
{
  uint64_t v23 = a2;
  uint64_t v3 = *(void *)(a1 + 56);
  if (std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v23))
  {
    return 1;
  }
  if (!CI_GRAPHVIZ_INTERNAL()
    && (*(int (**)(unsigned int *))(*(void *)v23 + 40))(v23) >= 2
    && (*(int (**)(unsigned int *))(*(void *)v23 + 40))(v23) >= 1)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v22 = 0;
      uint64_t v22 = (*(uint64_t (**)(unsigned int *, uint64_t))(*(void *)v23 + 48))(v23, v5);
      if (!std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), &v22))
      {
        uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v7 = *(void *)(v6 + 64);
        uint64_t v24 = (unsigned int **)&v22;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<CI::Node *,int>,std::__unordered_map_hasher<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::hash<CI::Node *>,std::equal_to<CI::Node *>,true>,std::__unordered_map_equal<CI::Node *,std::__hash_value_type<CI::Node *,int>,std::equal_to<CI::Node *>,std::hash<CI::Node *>,true>,std::allocator<std::__hash_value_type<CI::Node *,int>>>::__emplace_unique_key_args<CI::Node *,std::piecewise_construct_t const&,std::tuple<CI::Node * const&>,std::tuple<>>(v6 + 40, &v22, (uint64_t)&std::piecewise_construct, &v24)+ 6) = v7;
      }
      uint64_t v5 = (v5 + 1);
    }
    while ((int)v5 < (*(int (**)(unsigned int *))(*(void *)v23 + 40))(v23));
  }
  int v8 = (*(uint64_t (**)(unsigned int *))(*(void *)v23 + 16))(v23);
  BOOL is_any_TypeNode = CI::is_any_TypeNode(v8);
  if (is_any_TypeNode)
  {
    uint64_t v10 = std::__hash_table<std::__hash_value_type<CI::ImageIndex,CI::Image::ImageStats>,std::__unordered_map_hasher<CI::ImageIndex,std::__hash_value_type<CI::ImageIndex,CI::Image::ImageStats>,std::hash<CI::ImageIndex>,std::equal_to<CI::ImageIndex>,true>,std::__unordered_map_equal<CI::ImageIndex,std::__hash_value_type<CI::ImageIndex,CI::Image::ImageStats>,std::equal_to<CI::ImageIndex>,std::hash<CI::ImageIndex>,true>,std::allocator<std::__hash_value_type<CI::ImageIndex,CI::Image::ImageStats>>>::find<CI::ImageIndex>((void *)(v3 + 88), v23 + 9);
    if (v10)
    {
      long long v11 = *(_OWORD *)(v10 + 3);
      long long v12 = *(_OWORD *)(v10 + 5);
      long long v13 = *(_OWORD *)(v10 + 7);
      uint64_t v14 = v10[9];
      char v15 = *((unsigned char *)v10 + 80);
    }
    else
    {
      char v15 = 0;
      uint64_t v14 = 0;
      long long v11 = 0uLL;
      long long v13 = 0uLL;
      long long v12 = 0uLL;
    }
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8) + 40;
    v19[0] = v11;
    v19[1] = v12;
    v19[2] = v13;
    uint64_t v20 = v14;
    char v21 = v15;
    BOOL v17 = (void *)(*(uint64_t (**)(unsigned int *, uint64_t, _OWORD *))(*(void *)v23 + 144))(v23, v16, v19);
    uint64_t v24 = (unsigned int **)(*(uint64_t (**)(void))(*(void *)v23 + 384))();
    if (std::__hash_table<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::__unordered_map_hasher<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::hash<CI::ProgramDigest>,std::equal_to<CI::ProgramDigest>,true>,std::__unordered_map_equal<CI::ProgramDigest,std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>,std::equal_to<CI::ProgramDigest>,std::hash<CI::ProgramDigest>,true>,std::allocator<std::__hash_value_type<CI::ProgramDigest,CI::ObjectCache<CI::MainProgram,CI::ProgramDigest,false>::Entry>>>::find<CI::ProgramDigest>((void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), (unint64_t *)&v24))
    {
      CIGVNodeSetColor(v17, (const char *)0xF);
    }
    std::__hash_table<CI::OtherDigest,std::hash<CI::OtherDigest>,std::equal_to<CI::OtherDigest>,std::allocator<CI::OtherDigest>>::__emplace_unique_key_args<CI::OtherDigest,CI::OtherDigest const&>(*(void *)(*(void *)(a1 + 48) + 8) + 40, (unint64_t *)&v24, &v24);
    CIGVGraphAddNode(*(void **)(a1 + 64), (const char *)v17);
    uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
    uint64_t v24 = &v23;
    std::__hash_table<std::__hash_value_type<CI::Node const*,unsigned long>,std::__unordered_map_hasher<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,true>,std::__unordered_map_equal<CI::Node const*,std::__hash_value_type<CI::Node const*,unsigned long>,std::equal_to<CI::Node const*>,std::hash<CI::Node const*>,true>,std::allocator<std::__hash_value_type<CI::Node const*,unsigned long>>>::__emplace_unique_key_args<CI::Node const*,std::piecewise_construct_t const&,std::tuple<CI::Node const* const&>,std::tuple<>>(v18, &v23, (uint64_t)&std::piecewise_construct, &v24)[3] = v17;
  }
  return !is_any_TypeNode;
}

uint64_t __Block_byref_object_copy__22(uint64_t a1, uint64_t a2)
{
  return std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::__hash_table(a1 + 40, (uint64_t *)(a2 + 40));
}

BOOL ___ZNK2CI8TileTask23graphviz_representationEPKNS_10RenderTaskE_block_invoke_24(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t v3 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), &v10);
  if (!v3)
  {
    std::__hash_table<CI::Node const*,std::hash<CI::Node const*>,std::equal_to<CI::Node const*>,std::allocator<CI::Node const*>>::__emplace_unique_key_args<CI::Node const*,CI::Node const* const&>(*(void *)(*(void *)(a1 + 32) + 8) + 40, &v10, &v10);
    uint64_t v4 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>((void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), &v10)[3];
    if ((*(int (**)(uint64_t))(*(void *)v10 + 40))(v10) >= 1)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = (void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
        uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 48))(v10, v5);
        uint64_t v7 = std::__hash_table<CI::Image const*,std::hash<CI::Image const*>,std::equal_to<CI::Image const*>,std::allocator<CI::Image const*>>::find<CI::Image const*>(v6, &v9);
        CIGVGraphAddEdge(*(void **)(a1 + 48), (const char *)v7[3], v4);
        uint64_t v5 = (v5 + 1);
      }
      while ((int)v5 < (*(int (**)(uint64_t))(*(void *)v10 + 40))(v10));
    }
  }
  return v3 != 0;
}

uint64_t ___ZNK2CI8TileTask23graphviz_representationEPKNS_10RenderTaskE_block_invoke_2(uint64_t a1, FILE *a2)
{
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);
  uint64_t v6 = (const char *)v4[2];
  uint64_t v7 = (const void *)v4[13];
  uint64_t v8 = (*(uint64_t (**)(void *))(*v4 + 40))(v4);
  uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 48))(*(void *)(a1 + 40));
  fprintf(a2, "program graph\n%s %p %ldx%ld\n", v6, v7, v8, v9);
  uint64_t v10 = (const char *)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 24) + 304))();
  int v11 = (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 24) + 272))();
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v14 = *(void *)(v12 + 24);
  uint64_t v13 = *(void *)(v12 + 32);
  int v16 = *(unsigned __int8 *)(v14 + 236);
  char v15 = (const char *)(v14 + 236);
  if (v16) {
    BOOL v17 = ":";
  }
  else {
    BOOL v17 = "";
  }
  fprintf(a2, "(%s%s context %d%s%s frame %lu tile %lu)\n", "", v10, v11, v17, v15, v13, *(void *)(v5 + 32));
  uint64_t v18 = *(void *)(a1 + 40);
  CFStringRef v19 = *(const __CFString **)(v18 + 96);
  if (v19)
  {
    long long v51 = 0u;
    long long v52 = 0u;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v41 = 0u;
    long long v42 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    *(_OWORD *)buffer = 0u;
    long long v38 = 0u;
    CFStringGetCString(v19, buffer, 256, 0x8000100u);
    fprintf(a2, "destination=%s\n", buffer);
    uint64_t v18 = *(void *)(a1 + 40);
  }
  uint64_t v20 = (const char *)(*(uint64_t (**)(void))(**(void **)(v18 + 24) + 312))(*(void *)(v18 + 24));
  if ((*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 40) + 24) + 232))(*(void *)(*(void *)(a1 + 40) + 24)) == -1) {
    char v21 = "false";
  }
  else {
    char v21 = "true";
  }
  unint64_t v22 = (unint64_t)(*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 40) + 24) + 488))() >> 20;
  uint64_t v23 = CI::name_for_format(*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 24) + 32));
  if ((*(unsigned int (**)(void))(**(void **)(*(void *)(a1 + 40) + 24) + 168))(*(void *)(*(void *)(a1 + 40) + 24))) {
    uint64_t v24 = "(lossyAllowed)";
  }
  else {
    uint64_t v24 = "";
  }
  unint64_t v25 = CI::name_for_format(*(_DWORD *)(*(void *)(a1 + 40) + 80));
  double v26 = *(double *)(v5 + 72);
  double v27 = *(double *)(v5 + 80);
  uint64_t v28 = *(void *)(a1 + 40);
  long long v35 = *(_OWORD *)(v28 + 200);
  long long v36 = *(_OWORD *)(v5 + 56);
  uint64_t v29 = *(void *)(v28 + 216);
  unint64_t v30 = (unint64_t)GetSurfaceCachePeakNonVolatileSize() >> 20;
  double v31 = CI::RenderTask::completionTime(*(CI::RenderTask **)(a1 + 40));
  fprintf(a2, "deviceName=%s\ncacheIntermediates=%s\nintermediatesLimit=%ldMB\nworkingFormat=%s%s\nformat=%s\nroi=[%g %g %g %g]\npassCount=%ld\npixelsProcessed=%ld\npixelsOverdrawn=%ld\npeakNonVolatile=%ldMB\ncompletionTime=%.3fs", v20, v21, v22, v23, v24, v25, *(double *)&v36,
    *((double *)&v36 + 1),
    v26,
    v27,
    (void)v35,
    *((void *)&v35 + 1),
    v29,
    v30,
    v31);
  fprintf(a2, "\ncompileTime=%.3fms", *(double *)(*(void *)(a1 + 40) + 176) * 1000.0);
  uint64_t result = fprintf(a2, "\ncompileWaitTime=%.3fms", *(double *)(*(void *)(a1 + 40) + 184) * 1000.0);
  uint64_t v33 = *(void *)(a1 + 40);
  double v34 = *(double *)(v33 + 168);
  if (v34 != 0.0) {
    return fprintf(a2, "\nkernelExecutionTime=%.3fms\nrate=%.3fMP/s", v34 * 1000.0, (double)*(unint64_t *)(v33 + 208) / 1000000.0 / v34);
  }
  return result;
}

double CI::RenderTask::completionTime(CI::RenderTask *this)
{
  uint64_t v1 = *((void *)this + 18);
  double v2 = 0.0;
  if (v1 != *((void *)this + 17))
  {
    double v3 = *(double *)(*(void *)(v1 - 8) + 40);
    if (v3 <= 0.0)
    {
      uint64_t v4 = ci_logger_render();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG)) {
        CI::RenderTask::completionTime(v4);
      }
    }
    else
    {
      return v3 - *((double *)this + 20);
    }
  }
  return v2;
}

CI::RenderTask *CI::RenderTask::RenderTask(CI::RenderTask *this, CFTypeRef cf)
{
  *((_DWORD *)this + 2) = 1;
  *(void *)this = &unk_1EE4577A8;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  if (cf) {
    CFTypeRef v3 = CFRetain(cf);
  }
  else {
    CFTypeRef v3 = 0;
  }
  *((void *)this + 16) = v3;
  return this;
}

CI::RenderTask *CI::RenderTask::RenderTask(CI::RenderTask *this, const char *a2, ...)
{
  va_start(va, a2);
  *((_DWORD *)this + 2) = 1;
  *(void *)this = &unk_1EE4577A8;
  *((void *)this + 3) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 24) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 15) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  CFStringRef v3 = CFStringCreateWithCString(0, a2, 0x600u);
  *((void *)this + 16) = CFStringCreateWithFormatAndArguments(0, 0, v3, va);
  CFRelease(v3);
  return this;
}

void CI::RenderTask::raise(CI::RenderTask *this, const char *a2, ...)
{
  va_start(va, a2);
  CFStringRef v3 = CFStringCreateWithCString(0, a2, 0x600u);
  *((void *)this + 16) = CFStringCreateWithFormatAndArguments(0, 0, v3, va);
  CFRelease(v3);
}

uint64_t CI::RenderTask::quicklookDataForRenderTask(CI::RenderTask *this)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  {
    CI::RenderTask::quicklookDataForRenderTask(void)const::renderer = (uint64_t)CIGVRendererCreatePDFRenderer();
  }
  CIGVRendererSetOutputFileURL((void *)CI::RenderTask::quicklookDataForRenderTask(void)const::renderer, 0);
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v23 = 0u;
  double v2 = (const char *)(*(uint64_t (**)(void))(**((void **)this + 3) + 304))();
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 3) + 272))();
  uint64_t v4 = *((void *)this + 3);
  int v6 = *(unsigned __int8 *)(v4 + 236);
  uint64_t v5 = (const char *)(v4 + 236);
  uint64_t v7 = ":";
  if (v6) {
    uint64_t v8 = ":";
  }
  else {
    uint64_t v8 = "";
  }
  snprintf(__str, 0x200uLL, "CIRenderTask <%s context %d%s%s frame %lu>", v2, v3, v8, v5, *((void *)this + 4));
  CIGVRendererSetOutputFileTitle((void *)CI::RenderTask::quicklookDataForRenderTask(void)const::renderer, (uint64_t)__str);
  if (*((void *)this + 12)) {
    CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"destination=%@\n", *((void *)this + 12));
  }
  else {
    CFStringRef v9 = &stru_1EE465CC0;
  }
  uint64_t v10 = *((void *)this + 2);
  uint64_t v11 = (*(uint64_t (**)(void))(**((void **)this + 3) + 304))(*((void *)this + 3));
  uint64_t v12 = (*(uint64_t (**)(void))(**((void **)this + 3) + 272))();
  uint64_t v13 = *((void *)this + 3);
  uint64_t v14 = *((void *)this + 4);
  int v16 = *(unsigned __int8 *)(v13 + 236);
  uint64_t v15 = v13 + 236;
  if (!v16) {
    uint64_t v7 = "";
  }
  BOOL v17 = CI::name_for_format(*((_DWORD *)this + 20));
  uint64_t v18 = (CI::GraphObject *)CFStringCreateWithFormat(0, 0, @"optimized graph\n%s\n(%s context %d%s%s frame %lu)\n%@format=%s\nroi=[%g %g %g %g]", v10, v11, v12, v7, v15, v14, v9, v17, *((void *)this + 6), *((void *)this + 7), *((void *)this + 8), *((void *)this + 9), *(void *)__str, *(void *)&__str[8], v23, v24,
                             v25,
                             v26,
                             v27,
                             v28,
                             v29,
                             v30,
                             v31,
                             v32,
                             v33,
                             v34,
                             v35,
                             v36,
                             v37,
                             v38,
                             v39,
                             v40,
                             v41,
                             v42,
                             v43,
                             v44,
                             v45);
  uint64_t v20 = CI::GraphObject::graphviz_representation(*((CI::GraphObject **)this + 5), v18, 0, v19);
  CIGVGraphRender(v20, (const char *)CI::RenderTask::quicklookDataForRenderTask(void)const::renderer);
  CFRelease(v18);
  CFRelease(v20);
  CFRelease(v9);
  CIGVRenddererFlushRender(CI::RenderTask::quicklookDataForRenderTask(void)const::renderer);
  return CIGVRendererGetPDFData(CI::RenderTask::quicklookDataForRenderTask(void)const::renderer);
}

uint64_t CI::RenderTask::quicklookDataForRenderInfo(CI::RenderTask *this)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  {
    CI::RenderTask::quicklookDataForRenderInfo(void)const::renderer = (uint64_t)CIGVRendererCreatePDFRenderer();
  }
  CIGVRendererSetOutputFileURL((void *)CI::RenderTask::quicklookDataForRenderInfo(void)const::renderer, 0);
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v18 = 0u;
  double v2 = (const char *)(*(uint64_t (**)(void))(**((void **)this + 3) + 304))();
  int v3 = (*(uint64_t (**)(void))(**((void **)this + 3) + 272))();
  uint64_t v4 = *((void *)this + 3);
  uint64_t v5 = *((void *)this + 4);
  int v7 = *(unsigned __int8 *)(v4 + 236);
  int v6 = (const char *)(v4 + 236);
  if (v7) {
    uint64_t v8 = ":";
  }
  else {
    uint64_t v8 = "";
  }
  uint64_t v9 = *((void *)this + 25);
  uint64_t v10 = *((void *)this + 26);
  double v11 = CI::RenderTask::completionTime(this);
  snprintf(__str, 0x200uLL, "CIRenderInfo <%s context %d%s%s frame %lu>\npassCount=%ld\npixelsProcessed=%ld\ncompletionTime=%.3fs", v2, v3, v8, v6, v5, v9, v10, v11);
  CIGVRendererSetOutputFileTitle((void *)CI::RenderTask::quicklookDataForRenderInfo(void)const::renderer, (uint64_t)__str);
  uint64_t v12 = (CI::TileTask **)*((void *)this + 17);
  uint64_t v13 = (CI::TileTask **)*((void *)this + 18);
  while (v12 != v13)
  {
    uint64_t v14 = *v12++;
    uint64_t v15 = CI::TileTask::graphviz_representation(v14, this);
    CIGVGraphRender(v15, (const char *)CI::RenderTask::quicklookDataForRenderInfo(void)const::renderer);
    CFRelease(v15);
  }
  CIGVRenddererFlushRender(CI::RenderTask::quicklookDataForRenderInfo(void)const::renderer);
  return CIGVRendererGetPDFData(CI::RenderTask::quicklookDataForRenderInfo(void)const::renderer);
}

void CI::RenderTask::dump_for_graphviz(CI::RenderTask *this, const char *a2, unsigned int a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a3)
  {
    uint64_t v5 = (CI::TileTask **)*((void *)this + 17);
    int v6 = (CI::TileTask **)*((void *)this + 18);
    while (v5 != v6)
    {
      uint64_t v8 = CI::TileTask::graphviz_representation(*v5, this);
      uint64_t v9 = *v5++;
      snprintf(__str, 0x100uLL, "%s_%lu", a2, *((void *)v9 + 4));
      uint64_t v10 = CI_TEMP_DIR();
      CIGVDumpToFile(v8, a3, (uint64_t)v10, (uint64_t)__str);
      CFRelease(v8);
    }
  }
  else
  {
    CFDataRef v11 = (const __CFData *)CI::RenderTask::quicklookDataForRenderInfo(this);
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    *(_OWORD *)std::string __str = 0u;
    long long v17 = 0u;
    uint64_t v12 = CI_TEMP_DIR();
    snprintf(__str, 0x100uLL, "%s/%s.pdf", v12, a2);
    uint64_t v13 = fopen(__str, "w");
    BytePtr = CFDataGetBytePtr(v11);
    size_t Length = CFDataGetLength(v11);
    fwrite(BytePtr, Length, 1uLL, v13);
    fclose(v13);
    CFRelease(v11);
  }
}

uint64_t CI::TileTask::type(CI::TileTask *this)
{
  return 79;
}

uint64_t CI::RenderTask::type(CI::RenderTask *this)
{
  return 80;
}

uint64_t CI::RenderTask::destWidth(CI::RenderTask *this)
{
  return *((void *)this + 14);
}

uint64_t CI::RenderTask::destHeight(CI::RenderTask *this)
{
  return *((void *)this + 15);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(uint64_t result, uint64_t a2, uint64_t a3)
{
  double v3 = *(double *)a2;
  double v4 = *(double *)result;
  double v5 = *(double *)a3;
  if (*(double *)a2 >= *(double *)result)
  {
    if (v5 < v3)
    {
      *(double *)a2 = v5;
      *(double *)a3 = v3;
      int v7 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v7;
      double v8 = *(double *)result;
      if (*(double *)a2 < *(double *)result)
      {
        *(void *)uint64_t result = *(void *)a2;
        *(double *)a2 = v8;
        int v9 = *(_DWORD *)(result + 8);
        *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v9;
      }
    }
  }
  else
  {
    if (v5 >= v3)
    {
      *(double *)uint64_t result = v3;
      *(double *)a2 = v4;
      int v6 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = v6;
      if (*(double *)a3 >= v4) {
        return result;
      }
      *(void *)a2 = *(void *)a3;
      *(double *)a3 = v4;
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
    }
    else
    {
      *(double *)uint64_t result = v5;
      *(double *)a3 = v4;
      int v6 = *(_DWORD *)(result + 8);
      *(_DWORD *)(result + 8) = *(_DWORD *)(a3 + 8);
    }
    *(_DWORD *)(a3 + 8) = v6;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      double v6 = *(double *)(a2 - 16);
      double v7 = *(double *)a1;
      if (v6 < *(double *)a1)
      {
        *(double *)a1 = v6;
        *(double *)(a2 - 16) = v7;
        int v8 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v8;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(a1, a1 + 16, a2 - 16);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32, a2 - 16);
      return 1;
    case 5:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32, a1 + 48);
      double v19 = *(double *)(a2 - 16);
      double v20 = *(double *)(a1 + 48);
      if (v19 < v20)
      {
        *(double *)(a1 + 48) = v19;
        *(double *)(a2 - 16) = v20;
        int v21 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 - 8);
        *(_DWORD *)(a2 - 8) = v21;
        double v22 = *(double *)(a1 + 48);
        double v23 = *(double *)(a1 + 32);
        if (v22 < v23)
        {
          *(double *)(a1 + 32) = v22;
          *(double *)(a1 + 48) = v23;
          int v24 = *(_DWORD *)(a1 + 40);
          int v25 = *(_DWORD *)(a1 + 56);
          *(_DWORD *)(a1 + 40) = v25;
          *(_DWORD *)(a1 + 56) = v24;
          double v26 = *(double *)(a1 + 16);
          if (v22 < v26)
          {
            *(double *)(a1 + 16) = v22;
            *(double *)(a1 + 32) = v26;
            int v27 = *(_DWORD *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v25;
            *(_DWORD *)(a1 + 40) = v27;
            double v28 = *(double *)a1;
            if (v22 < *(double *)a1)
            {
              *(double *)a1 = v22;
              *(double *)(a1 + 16) = v28;
              int v29 = *(_DWORD *)(a1 + 8);
              *(_DWORD *)(a1 + 8) = v25;
              *(_DWORD *)(a1 + 24) = v29;
            }
          }
        }
      }
      return 1;
    default:
      int v9 = (double *)(a1 + 32);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(a1, a1 + 16, a1 + 32);
      uint64_t v10 = a1 + 48;
      if (a1 + 48 == a2) {
        return 1;
      }
      uint64_t v11 = 0;
      int v12 = 0;
      break;
  }
  while (1)
  {
    double v13 = *(double *)v10;
    double v14 = *v9;
    if (*(double *)v10 < *v9)
    {
      uint64_t v15 = *(void *)(v10 + 8);
      uint64_t v16 = v11;
      while (1)
      {
        uint64_t v17 = a1 + v16;
        *(double *)(v17 + 48) = v14;
        *(_DWORD *)(v17 + 56) = *(_DWORD *)(a1 + v16 + 40);
        if (v16 == -32) {
          break;
        }
        double v14 = *(double *)(v17 + 16);
        v16 -= 16;
        if (v13 >= v14)
        {
          uint64_t v18 = a1 + v16 + 48;
          goto LABEL_13;
        }
      }
      uint64_t v18 = a1;
LABEL_13:
      *(double *)uint64_t v18 = v13;
      *(_DWORD *)(v18 + 8) = v15;
      if (++v12 == 8) {
        return v10 + 16 == a2;
      }
    }
    int v9 = (double *)v10;
    v11 += 16;
    v10 += 16;
    if (v10 == a2) {
      return 1;
    }
  }
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,CI::TileTask::pixelsOverdrawn(void)::$_0::operator() const(std::vector<CGRect> const&)::{lambda(std::pair<double,int>,std::pair<double,int>)#1} &,std::pair<double,int>*>(a1, a2, a3);
  double v9 = *(double *)a3;
  if (*(double *)a4 < *(double *)a3)
  {
    *(void *)a3 = *(void *)a4;
    *(double *)a4 = v9;
    int v10 = *(_DWORD *)(a3 + 8);
    *(_DWORD *)(a3 + 8) = *(_DWORD *)(a4 + 8);
    *(_DWORD *)(a4 + 8) = v10;
    double v11 = *(double *)a2;
    if (*(double *)a3 < *(double *)a2)
    {
      *(void *)a2 = *(void *)a3;
      *(double *)a3 = v11;
      int v12 = *(_DWORD *)(a2 + 8);
      *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
      *(_DWORD *)(a3 + 8) = v12;
      double v13 = *(double *)a1;
      if (*(double *)a2 < *(double *)a1)
      {
        *(void *)a1 = *(void *)a2;
        *(double *)a2 = v13;
        int v14 = *(_DWORD *)(a1 + 8);
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = v14;
      }
    }
  }
  return result;
}

void CI::TextureManager::~TextureManager(dispatch_queue_t *this)
{
  *this = (dispatch_queue_t)&unk_1EE45A228;
  dispatch_sync(this[13], &__block_literal_global_95);
  dispatch_queue_t v2 = this[7];
  if (v2) {
    CFRelease(v2);
  }
  this[7] = 0;
  dispatch_queue_t v3 = this[17];
  if (v3)
  {
    std::__list_imp<CI::attached_surface_t *>::clear(this[17]);
    MEMORY[0x1997023B0](v3, 0x1020C4062D53EE8);
  }
  this[17] = 0;
  dispatch_release(this[13]);
  dispatch_release(this[11]);
  dispatch_release(this[12]);
  std::__tree<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>>>::destroy((uint64_t)(this + 18), this[19]);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(this + 14), this[15]);
  std::__list_imp<CI::attached_surface_t *>::clear(this + 8);
  std::__list_imp<CI::attached_surface_t *>::clear(this + 4);
}

__IOSurface *CI::TextureManager::get_empty_surface(CI::TextureManager *this)
{
  uint64_t result = (__IOSurface *)*((void *)this + 7);
  if (!result)
  {
    uint64_t result = CreateSurface((__CVBuffer *)1, (__CVBuffer *)1, (void *)0x10, 1111970369, 1);
    *((void *)this + 7) = result;
    if (!result)
    {
      x_log("TextureManager::TextureManager() failed to create empty surface\n");
      return (__IOSurface *)*((void *)this + 7);
    }
  }
  return result;
}

void *CI::TextureManager::mark_usage(CI::TextureManager *this, void *a2)
{
  double v7 = a2;
  dispatch_queue_t v3 = (char *)this + 32;
  std::list<CI::attached_surface_t *>::remove((void *)this + 4, &v7);
  uint64_t result = operator new(0x18uLL);
  double v5 = v7;
  result[1] = v3;
  result[2] = v5;
  uint64_t v6 = *((void *)this + 4);
  *uint64_t result = v6;
  *(void *)(v6 + 8) = result;
  *((void *)this + 4) = result;
  ++*((void *)this + 6);
  return result;
}

uint64_t CI::TextureManager::lookup_texture(CI::TextureManager *this, void *a2)
{
  uint64_t v6 = 0;
  double v7 = &v6;
  uint64_t v8 = 0x2000000000;
  uint64_t v9 = 0;
  dispatch_queue_t v2 = *((void *)this + 13);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 0x40000000;
  block[2] = ___ZN2CI14TextureManager14lookup_textureEPv_block_invoke;
  block[3] = &unk_1E5776ED0;
  void block[4] = &v6;
  void block[5] = this;
  void block[6] = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t ___ZN2CI14TextureManager14lookup_textureEPv_block_invoke(uint64_t a1)
{
  uint64_t result = CI::TextureManager::_lookup_texture(*(CI::TextureManager **)(a1 + 40), *(void **)(a1 + 48));
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void CI::TextureManager::intermediate(CI::TextureManager *this, Texture a2, __IOSurface *a3, const CGRect *a4)
{
}

void *CI::TextureManager::_find_match_for_surface(CI::TextureManager *this, IOSurfaceRef buffer, CGSize a3)
{
  uint64_t v4 = *((void *)this + 17);
  if (!v4 || (uint64_t v5 = *(void *)(v4 + 8), v5 == v4))
  {
LABEL_11:
    ++*((void *)this + 3);
    if (CI_LOG_TEXTURE_CACHE())
    {
      uint64_t v14 = *((void *)this + 17);
      if (v14) {
        uint64_t v14 = *(void *)(v14 + 16);
      }
      x_log("TextureCache Missed: context:%u count:%lu hits:%zu misses:%zu\n\n", *((_DWORD *)this + 2), v14, *((void *)this + 2), *((void *)this + 3));
    }
    return 0;
  }
  else
  {
    double height = a3.height;
    double width = a3.width;
    while (1)
    {
      uint64_t v9 = *(void **)(v5 + 16);
      int v21 = v9;
      if (v9[8] <= 1uLL)
      {
        IOSurfaceID ID = IOSurfaceGetID(buffer);
        double v11 = (__IOSurface *)(*(uint64_t (**)(void *))*v9)(v9);
        if (IOSurfaceGetID(v11) == ID)
        {
          uint64_t v12 = (*(uint64_t (**)(void *))(*v9 + 32))(v9);
          if (width == *(double *)(v12 + 16) && height == *(double *)(v12 + 24)) {
            break;
          }
        }
      }
      uint64_t v5 = *(void *)(v5 + 8);
      if (v5 == v4) {
        goto LABEL_11;
      }
    }
    uint64_t v16 = (const void *)(*(uint64_t (**)(void *))*v9)(v9);
    CFGetRetainCount(v16);
    std::list<CI::attached_surface_t *>::remove(*((void **)this + 17), &v21);
    uint64_t v17 = (uint64_t *)*((void *)this + 17);
    uint64_t v18 = operator new(0x18uLL);
    _OWORD v18[2] = v21;
    uint64_t v19 = *v17;
    *uint64_t v18 = *v17;
    v18[1] = v17;
    *(void *)(v19 + 8) = v18;
    *uint64_t v17 = (uint64_t)v18;
    ++v17[2];
    ++*((void *)this + 2);
    if (CI_LOG_TEXTURE_CACHE())
    {
      uint64_t v20 = *((void *)this + 17);
      if (v20) {
        uint64_t v20 = *(void *)(v20 + 16);
      }
      x_log("TextureCache Matched: context:%u count:%lu hits:%zu misses:%zu\n\n", *((_DWORD *)this + 2), v20, *((void *)this + 2), *((void *)this + 3));
    }
    return v21;
  }
}

uint64_t CI::TextureManager::releaseDeepIntermediate(CI::TextureManager *this)
{
  uint64_t v12 = 0;
  double v13 = &v12;
  uint64_t v14 = 0x2000000000;
  uint64_t v15 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2000000000;
  uint64_t v11 = 0;
  dispatch_queue_t v2 = *((void *)this + 13);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 0x40000000;
  void v7[2] = ___ZN2CI14TextureManager23releaseDeepIntermediateEv_block_invoke;
  v7[3] = &unk_1E5776F88;
  void v7[5] = &v8;
  v7[6] = this;
  _OWORD v7[4] = &v12;
  dispatch_sync(v2, v7);
  uint64_t v3 = v13[3];
  if (v3)
  {
    uint64_t v4 = *((void *)this + 13);
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 0x40000000;
    block[2] = ___ZN2CI14TextureManager21complete_intermediateENS_4TypeEPNS_14intermediate_tE_block_invoke;
    block[3] = &__block_descriptor_tmp_13_1;
    void block[4] = this;
    void block[5] = v3;
    int v17 = 52;
    dispatch_sync(v4, block);
  }
  uint64_t v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  _Block_object_dispose(&v12, 8);
  return v5;
}

void ___ZN2CI14TextureManager23releaseDeepIntermediateEv_block_invoke(void *a1)
{
  uint64_t v1 = a1[6];
  dispatch_queue_t v2 = *(uint64_t ***)(v1 + 144);
  uint64_t v3 = (uint64_t **)(v1 + 152);
  if (v2 == (uint64_t **)(v1 + 152)) {
    return;
  }
  uint64_t v5 = v1 + 64;
  while (1)
  {
    uint64_t v6 = (uint64_t **)v2[5];
    if (v6 != v2 + 6) {
      break;
    }
LABEL_27:
    double v22 = v2[1];
    if (v22)
    {
      do
      {
        double v23 = (uint64_t **)v22;
        double v22 = (uint64_t *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        double v23 = (uint64_t **)v2[2];
        BOOL v10 = *v23 == (uint64_t *)v2;
        dispatch_queue_t v2 = v23;
      }
      while (!v10);
    }
    dispatch_queue_t v2 = v23;
    if (v23 == v3) {
      return;
    }
  }
  while (1)
  {
    if ((unint64_t)(*(uint64_t (**)(uint64_t *))(*v6[5] + 16))(v6[5]) >= 2)
    {
      unsigned int v7 = (*(uint64_t (**)(uint64_t *))(*v2[4] + 16))(v2[4]);
      if ((CI::is_image_type(v7) & 1) == 0) {
        break;
      }
    }
LABEL_21:
    uint64_t v20 = v6[1];
    if (v20)
    {
      do
      {
        int v21 = (uint64_t **)v20;
        uint64_t v20 = (uint64_t *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        int v21 = (uint64_t **)v6[2];
        BOOL v10 = *v21 == (uint64_t *)v6;
        uint64_t v6 = v21;
      }
      while (!v10);
    }
    uint64_t v6 = v21;
    if (v21 == v2 + 6) {
      goto LABEL_27;
    }
  }
  uint64_t v8 = (CI::Node *)v2[4];
  uint64_t v9 = v5;
  while (1)
  {
    uint64_t v9 = *(void *)(v9 + 8);
    if (v9 == v5) {
      break;
    }
    BOOL v10 = v8 == *(CI::Node **)(v9 + 16) && *((_DWORD *)v6 + 8) == *(_DWORD *)(v9 + 24);
    if (v10) {
      goto LABEL_21;
    }
  }
  uint64_t v11 = (_OWORD **)CI::Node::rois(v8);
  memset(v30, 0, sizeof(v30));
  std::vector<CI::SerialRectArray::roiData>::__init_with_size[abi:nn180100]<CI::SerialRectArray::roiData*,CI::SerialRectArray::roiData*>(v30, *v11, v11[1], 0xEEEEEEEEEEEEEEEFLL * (((char *)v11[1] - (char *)*v11) >> 3));
  int v12 = *((_DWORD *)v6 + 8);
  uint64_t v13 = v30[0];
  uint64_t v14 = v30[0] + 120 * v12;
  uint64_t v15 = *(unint64_t **)(v14 + 96);
  uint64_t v16 = *(unint64_t **)(v14 + 104);
  if (v15 != v16)
  {
    unint64_t v17 = 0;
    do
    {
      unint64_t v19 = *v15++;
      unint64_t v18 = v19;
      if (v17 <= v19) {
        unint64_t v17 = v18;
      }
    }
    while (v15 != v16);
    if (v17)
    {
      long long v31 = (void **)v30;
      std::vector<CI::SerialRectArray::roiData>::__destroy_vector::operator()[abi:nn180100](&v31);
      goto LABEL_21;
    }
  }
  *(void *)(*(void *)(a1[4] + 8) + 24) = v6[5];
  uint64_t v24 = *(void *)(v13 + 120 * v12 + 40) - *(void *)(v13 + 120 * v12 + 32);
  if (v24)
  {
    unint64_t v25 = v24 / 48;
    if (v25 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v25;
    }
    do
    {
      int v27 = *(uint64_t (****)(void))(*(void *)(a1[4] + 8) + 24);
      double v28 = (__IOSurface *)(**v27)(v27);
      *(void *)(*(void *)(a1[5] + 8) + 24) = IOSurfaceGetAllocSize(v28);
      if (v28) {
        ReturnSurfaceToCache((uint64_t)v28);
      }
      uint64_t v29 = *(void *)(*(void *)(a1[4] + 8) + 24);
      --*(void *)(v29 + 64);
      --v26;
    }
    while (v26);
  }
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::__remove_node_pointer(v2 + 5, (uint64_t *)v6);
  operator delete(v6);
  long long v31 = (void **)v30;
  std::vector<CI::SerialRectArray::roiData>::__destroy_vector::operator()[abi:nn180100](&v31);
}

void *std::vector<CI::SerialRectArray::roiData>::__init_with_size[abi:nn180100]<CI::SerialRectArray::roiData*,CI::SerialRectArray::roiData*>(void *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<CI::SerialRectArray::roiData>::__vallocate[abi:nn180100](result, a4);
    uint64_t v7 = v6[1];
    while (a2 != a3)
    {
      uint64_t result = (void *)std::construct_at[abi:nn180100]<CI::SerialRectArray::roiData,CI::SerialRectArray::roiData&,CI::SerialRectArray::roiData*>(v7, a2);
      a2 = (_OWORD *)((char *)a2 + 120);
      v7 += 120;
    }
    v6[1] = v7;
  }
  return result;
}

void std::__tree<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>>>::destroy(a1, a2[1]);
    std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy((uint64_t)(a2 + 5), (void *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *std::__tree<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::__map_value_compare<CI::Node const*,std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>,std::less<CI::Node const*>,true>,std::allocator<std::__value_type<CI::Node const*,std::multimap<int const,CI::TextureManager::tmIntermediate_t *>>>>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::TextureReadFunction>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  std::__tree<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::__map_value_compare<unsigned long long,std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>,std::less<unsigned long long>,true>,std::allocator<std::__value_type<unsigned long long,CI::DAGHelper::ImageArgInfo>>>::destroy(a2 + 40, *(void **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t CI::TextureSampler::TextureSampler(uint64_t a1, CI::Object *this, int a3, long long *a4, long long *a5, int a6, int a7)
{
  *(void *)a1 = &unk_1EE45DF30;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = &unk_1EE456A30;
  atomic_fetch_add(&dword_1EB466F58[2], 1u);
  *(void *)a1 = &unk_1EE45A290;
  *(void *)(a1 + 16) = &unk_1EE45A2C8;
  if (this) {
    uint64_t v13 = CI::Object::ref((uint64_t)this);
  }
  else {
    uint64_t v13 = 0;
  }
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = a3;
  long long v14 = *a4;
  long long v15 = a4[1];
  *(_OWORD *)(a1 + 72) = a4[2];
  *(_OWORD *)(a1 + 56) = v15;
  *(_OWORD *)(a1 + 40) = v14;
  long long v16 = *a5;
  *(_OWORD *)(a1 + 104) = a5[1];
  *(_OWORD *)(a1 + 88) = v16;
  CI::set_sampler_modes_for_texture(v13, (_DWORD *)(a1 + 120), (int *)(a1 + 124));
  if (a6 != -1) {
    *(_DWORD *)(a1 + 120) = a6;
  }
  if (a7 != -1) {
    *(_DWORD *)(a1 + 124) = a7;
  }
  return a1;
}

void non-virtual thunk to'CI::TextureSampler::~TextureSampler(CI::TextureSampler *this)
{
}

{
  uint64_t vars8;

  CI::TextureSampler::~TextureSampler((CI::TextureSampler *)((char *)this - 16));

  JUMPOUT(0x1997023B0);
}

size_t CI::TextureSampler::print(CI::TextureSampler *this, __sFILE *a2)
{
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 3) + 16))(*((void *)this + 3));
  uint64_t v5 = (_DWORD *)*((void *)this + 3);
  if (v4 == 46) {
    int v6 = v5[12];
  }
  else {
    int v6 = 0;
  }
  int v7 = (*(uint64_t (**)(_DWORD *))(*(void *)v5 + 16))(v5);
  uint64_t v8 = (_DWORD *)*((void *)this + 3);
  if (v7 == 44) {
    int v6 = v8[12];
  }
  int v9 = (*(uint64_t (**)(_DWORD *))(*(void *)v8 + 16))(v8);
  uint64_t v10 = *((void *)this + 3);
  if (v9 == 29) {
    int v6 = *(_DWORD *)(v10 + 48);
  }
  fprintf(a2, "node%d", *(_DWORD *)(v10 + 36));
  if (v6)
  {
    uint64_t v11 = CI::name_for_format(v6);
    fprintf(a2, " %s", v11);
  }
  int v12 = "edge_unknown";
  int v14 = *((_DWORD *)this + 30);
  int v13 = *((_DWORD *)this + 31);
  if (v13 == 1) {
    int v12 = "edge_clamp";
  }
  if (!v13) {
    int v12 = "edge_black";
  }
  if ((v14 + 1) > 2) {
    long long v15 = "unknown";
  }
  else {
    long long v15 = off_1E5777010[v14 + 1];
  }
  fprintf(a2, " %s %s", v12, v15);
  fwrite(" transform:", 0xBuLL, 1uLL, a2);
  if (!CI::Affine::isIdentity((CI::TextureSampler *)((char *)this + 40))) {
    return fprintf(a2, "[%g %g %g %g %g %g]", *((double *)this + 5), *((double *)this + 6), *((double *)this + 7), *((double *)this + 8), *((double *)this + 9), *((double *)this + 10));
  }

  return fwrite("identity", 8uLL, 1uLL, a2);
}

uint64_t non-virtual thunk to'CI::TextureSampler::type(CI::TextureSampler *this)
{
  return 60;
}

uint64_t CI::InstanceCounted<(CI::Type)60>::type()
{
  return 60;
}

void *CI::InstanceCounted<(CI::Type)60>::~InstanceCounted(void *result)
{
  *uint64_t result = &unk_1EE456A30;
  atomic_fetch_add(&dword_1EB466F58[2], 0xFFFFFFFF);
  return result;
}

void CI::InstanceCounted<(CI::Type)60>::~InstanceCounted(void *a1)
{
  *a1 = &unk_1EE456A30;
  atomic_fetch_add(&dword_1EB466F58[2], 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

__n64 CI::Vector::Vector(CI::Vector *this, __n64 result, float a3, float a4)
{
  *(void *)this = &unk_1EE45DF30;
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = &unk_1EE45B0E8;
  atomic_fetch_add(dword_1EB466F58, 1u);
  *(void *)this = &unk_1EE45DF68;
  *((void *)this + 2) = &unk_1EE45DFA0;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 6) = 3;
  *((_DWORD *)this + 7) = result.n64_u32[0];
  *((float *)this + 8) = a3;
  *((float *)this + 9) = a4;
  result.n64_f32[1] = a3;
  *((float *)this + 26) = a4;
  *((__n64 *)this + 12) = result;
  return result;
}

CI::Vector *CI::Vector::Vector(CI::Vector *this, CGRect a2)
{
  CGFloat height = a2.size.height;
  CGFloat width = a2.size.width;
  CGFloat y = a2.origin.y;
  CGFloat x = a2.origin.x;
  *(void *)this = &unk_1EE45DF30;
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = &unk_1EE45B0E8;
  atomic_fetch_add(dword_1EB466F58, 1u);
  *(void *)this = &unk_1EE45DF68;
  *((void *)this + 2) = &unk_1EE45DFA0;
  *((void *)this + 12) = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 6) = 4;
  unsigned int IsInfinite = CGRectIsInfinite(a2);
  v4.f64[0] = width;
  v4.f64[1] = height;
  v5.f64[0] = x;
  v5.f64[1] = y;
  int8x16_t v6 = (int8x16_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v4);
  *(int8x16_t *)((char *)this + 28) = vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(IsInfinite)), 0x1FuLL)), (int8x16_t)xmmword_19395A9D0, v6);
  *((int8x16_t *)this + 6) = v6;
  return this;
}

uint64_t CI::Vector::Vector(uint64_t a1, double *a2, double a3, double a4, double a5, double a6)
{
  *(void *)a1 = &unk_1EE45DF30;
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)(a1 + 16) = &unk_1EE45B0E8;
  atomic_fetch_add(dword_1EB466F58, 1u);
  *(void *)a1 = &unk_1EE45DF68;
  *(void *)(a1 + 16) = &unk_1EE45DFA0;
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_DWORD *)(a1 + 24) = 13;
  *(float *)&unsigned int v11 = *a2;
  *(_DWORD *)(a1 + 28) = v11;
  *(float *)&unsigned int v12 = a2[2];
  *(_DWORD *)(a1 + 32) = v12;
  *(float *)&unsigned int v13 = a2[4];
  *(_DWORD *)(a1 + 36) = v13;
  *(float *)&unsigned int v14 = a2[1];
  *(_DWORD *)(a1 + 40) = v14;
  *(float *)&unsigned int v15 = a2[3];
  *(_DWORD *)(a1 + 44) = v15;
  *(float *)&unsigned int v16 = a2[5];
  *(_DWORD *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = 0x3F80000000000000;
  *(void *)&long long v21 = __PAIR64__(v12, v11);
  *((void *)&v21 + 1) = __PAIR64__(v14, v13);
  long long v22 = __PAIR64__(v16, v15);
  LODWORD(v23) = 1065353216;
  HIDWORD(v23) = mat3::type((mat3 *)&v21);
  long long v17 = v22;
  *(_OWORD *)(a1 + 96) = v21;
  *(_OWORD *)(a1 + 112) = v17;
  *(void *)(a1 + 128) = v23;
  float v18 = a3;
  *(float *)&long long v17 = a4;
  *(float *)(a1 + 64) = v18;
  *(_DWORD *)(a1 + 68) = v17;
  float v19 = a5;
  *(float *)&long long v17 = a6;
  *(float *)(a1 + 72) = v19;
  *(_DWORD *)(a1 + 76) = v17;
  return a1;
}

float CI::Vector::Vector(CI::Vector *this, double *a2, unsigned int a3)
{
  *(void *)this = &unk_1EE45DF30;
  *((_DWORD *)this + 2) = 1;
  *((void *)this + 2) = &unk_1EE45B0E8;
  atomic_fetch_add(dword_1EB466F58, 1u);
  *(void *)this = &unk_1EE45DF68;
  *((void *)this + 2) = &unk_1EE45DFA0;
  *((void *)this + 12) = 0;
  long long v3 = 0uLL;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  if (a3 >= 0x10) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = a3;
  }
  *(_OWORD *)((char *)this + 56) = 0uLL;
  *(_OWORD *)((char *)this + 72) = 0uLL;
  *((_DWORD *)this + 22) = 0;
  *((_DWORD *)this + 6) = v4;
  if (!a2) {
    CI::Vector::Vector();
  }
  if (v4)
  {
    float64x2_t v5 = (_DWORD *)((char *)this + 28);
    do
    {
      double v6 = *a2++;
      *(float *)&long long v3 = v6;
      *v5++ = v3;
      --v4;
    }
    while (v4);
  }
  return *(float *)&v3;
}

uint64_t CI::Vector::copy_to(CI::Vector *this, unsigned __int16 *a2)
{
  vImagePixelCount v3 = *((int *)this + 6);
  if (v3 == 9)
  {
    *(_OWORD *)&src.CGFloat height = xmmword_193959670;
    src.size_t rowBytes = 4;
    dest.data = a2;
    *(_OWORD *)&dest.CGFloat height = xmmword_193959670;
    dest.size_t rowBytes = 2;
    src.data = (char *)this + 28;
    vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
    a2[3] = 0;
    dest.size_t rowBytes = 2;
    src.data = (char *)this + 40;
    *(_OWORD *)&src.CGFloat height = xmmword_193959670;
    src.size_t rowBytes = 4;
    dest.data = a2 + 4;
    *(_OWORD *)&dest.CGFloat height = xmmword_193959670;
    vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
    a2[7] = 0;
    dest.size_t rowBytes = 2;
    src.data = (char *)this + 52;
    *(_OWORD *)&src.CGFloat height = xmmword_193959670;
    src.size_t rowBytes = 4;
    dest.data = a2 + 8;
    *(_OWORD *)&dest.CGFloat height = xmmword_193959670;
    uint64_t result = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
    a2[11] = 0;
  }
  else
  {
    src.data = (char *)this + 28;
    src.CGFloat height = v3;
    *(_OWORD *)&src.CGFloat width = xmmword_19394CBA0;
    dest.data = a2;
    dest.CGFloat height = v3;
    *(_OWORD *)&dest.CGFloat width = xmmword_19395A9E0;
    return vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
  }
  return result;
}

CFStringRef CI::Vector::description(CI::Vector *this)
{
  uint64_t v1 = *((unsigned int *)this + 6);
  switch((int)v1)
  {
    case 0:
      CFStringRef result = CFStringCreateWithFormat(0, 0, @"<CI::Vector %p>[]", this);
      break;
    case 1:
      CFStringRef result = CFStringCreateWithFormat(0, 0, @"<CI::Vector %p>[%g]", this, *((float *)this + 7));
      break;
    case 2:
      CFStringRef result = CFStringCreateWithFormat(0, 0, @"<CI::Vector %p>[%g %g]", this, *((float *)this + 7), *((float *)this + 8));
      break;
    case 3:
      CFStringRef result = CFStringCreateWithFormat(0, 0, @"<CI::Vector %p>[%g %g %g]", this, *((float *)this + 7), *((float *)this + 8), *((float *)this + 9));
      break;
    case 4:
      CFStringRef result = CFStringCreateWithFormat(0, 0, @"<CI::Vector %p>[%g %g %g %g]", this, *((float *)this + 7), *((float *)this + 8), *((float *)this + 9), *((float *)this + 10));
      break;
    case 9:
      CFStringRef result = CFStringCreateWithFormat(0, 0, @"<CI::Vector %p>[%g %g %g %g %g %g %g %g %g]", this, *((float *)this + 7), *((float *)this + 8), *((float *)this + 9), *((float *)this + 10), *((float *)this + 11), *((float *)this + 12), *((float *)this + 13), *((float *)this + 14), *((float *)this + 15));
      break;
    default:
      CFStringRef result = CFStringCreateWithFormat(0, 0, @"<CI::Vector %p>[%d values]", this, v1);
      break;
  }
  return result;
}

size_t CI::Vector::print(CI::Vector *this, __sFILE *__stream)
{
  int v3 = *((_DWORD *)this + 6);
  if (v3)
  {
    if (v3 == 1)
    {
      return fprintf(__stream, "%g", *((float *)this + 7));
    }
    else
    {
      if (v3 >= 1)
      {
        uint64_t v6 = 0;
        do
        {
          float v7 = *((float *)this + v6 + 7);
          if (v7 == 0.0) {
            float v7 = 0.0;
          }
          double v8 = v7;
          if (v6) {
            uint64_t v9 = 32;
          }
          else {
            uint64_t v9 = 91;
          }
          fprintf(__stream, "%c%g", v9, v8);
          ++v6;
        }
        while (v6 < *((int *)this + 6));
      }
      return fputc(93, __stream);
    }
  }
  else
  {
    return fwrite("[]", 2uLL, 1uLL, __stream);
  }
}

uint64_t non-virtual thunk to'CI::Vector::type(CI::Vector *this)
{
  return 58;
}

void non-virtual thunk to'CI::Vector::~Vector(CI::Vector *this)
{
  *(void *)this = &unk_1EE45B0E8;
  atomic_fetch_add(dword_1EB466F58, 0xFFFFFFFF);
}

{
  *(void *)this = &unk_1EE45B0E8;
  atomic_fetch_add(dword_1EB466F58, 0xFFFFFFFF);
  JUMPOUT(0x1997023B0);
}

long double pow_10(long double __x, long double __y)
{
  long double result = 1.0;
  if ((int)v2 >= 1)
  {
    if (v2 < 0x21)
    {
      unsigned int v4 = v2;
    }
    else
    {
      do
      {
        long double result = result * 1.0e32;
        unsigned int v4 = v2 - 32;
        BOOL v5 = v2 > 0x40;
        v2 -= 32;
      }
      while (v5);
    }
    unsigned int v6 = v4 - 1;
    float v7 = (double *)&pow_10_up;
    return result * v7[v6];
  }
  if ((v2 & 0x80000000) != 0)
  {
    if (v2 > 0xFFFFFFDF)
    {
      unsigned int v8 = v2;
    }
    else
    {
      do
      {
        long double result = result * 1.0e-32;
        unsigned int v8 = v2 + 32;
        BOOL v9 = __CFADD__(v2, 64);
        v2 += 32;
      }
      while (!v9);
    }
    unsigned int v6 = ~v8;
    float v7 = (double *)&pow_10_down;
    return result * v7[v6];
  }
  return result;
}

unsigned char *x_dtostr_(unsigned char *a1, unint64_t a2, char a3, double a4, double a5)
{
  double v5 = a4;
  if (a5 <= 0.0) {
    double v6 = 0.000001;
  }
  else {
    double v6 = a5;
  }
  if (a2 < 8) {
    return 0;
  }
  if (a4 >= 0.0)
  {
    unsigned int v11 = a1;
  }
  else
  {
    *a1 = 45;
    unsigned int v11 = a1 + 1;
    double v5 = -a4;
  }
  int v12 = __fpclassifyd(v5);
  switch(v12)
  {
    case 5:
      *unsigned int v11 = 48;
      return (char *)v11 + 1;
    case 2:
      int v13 = 6712905;
      goto LABEL_15;
    case 1:
      int v13 = 5136718;
LABEL_15:
      *(_DWORD *)unsigned int v11 = v13;
      return (char *)v11 + 3;
  }
  int __e = 0;
  if (v5 <= 0.0)
  {
    int __e = 0;
  }
  else
  {
    if (v5 >= 0.01 && v5 <= 100.0)
    {
      int v17 = 0;
      double v21 = v5;
      double v19 = v6;
    }
    else
    {
      frexp(v5, &__e);
      double v16 = (double)__e * 0.301029996;
      int v17 = llround(v16);
      long double v18 = pow_10(v16, 0.301029996);
      double v19 = v6 * v18;
      double v21 = v5 * pow_10(v18, v20);
    }
    for (double i = v21 + v6 * 0.5; i >= 10.0; double i = v21 + v6 * 0.5)
    {
      ++v17;
      double v21 = v21 * 0.1;
      double v19 = v19 * 10.0;
    }
    if (i < 1.0)
    {
      do
      {
        --v17;
        double v21 = v21 * 10.0;
        double v19 = v19 * 0.1;
      }
      while (v21 + v6 * 0.5 < 1.0);
    }
    int __e = v17;
    if (v17 >= 0) {
      unsigned int v23 = v17;
    }
    else {
      unsigned int v23 = -v17;
    }
    if (v23 <= 3)
    {
      int __e = 0;
      if (v19 < v6) {
        goto LABEL_36;
      }
    }
    else
    {
      double v5 = v21;
    }
  }
  double v19 = v6;
LABEL_36:
  uint64_t v24 = &a1[a2];
  double v25 = v5 + v19 * 0.5;
  double v26 = floor(v25);
  if (v26 > v19)
  {
    uint64_t v27 = 1;
    double v28 = v26;
    long double result = v11;
    while (result != v24)
    {
      uint64_t v29 = v27;
      double v30 = v28 * 0.1 + 0.05;
      double v28 = floor(v30);
      *result++ = (int)((v30 - v28) * 10.0) + 48;
      ++v27;
      if (v28 <= v19)
      {
        if (result <= (unsigned char *)v11)
        {
          unsigned int v11 = result;
          goto LABEL_46;
        }
        if (result - (unsigned char *)v11 >= 2)
        {
          uint64_t v31 = -1;
          do
          {
            char v32 = result[v31];
            result[v31] = *(unsigned char *)v11;
            *(unsigned char *)unsigned int v11 = v32;
            unsigned int v11 = (_WORD *)((char *)v11 + 1);
            v29 -= 2;
            --v31;
          }
          while (v29 > 1);
        }
        goto LABEL_47;
      }
    }
    return 0;
  }
LABEL_46:
  *(unsigned char *)unsigned int v11 = 48;
  long double result = (char *)v11 + 1;
LABEL_47:
  double v33 = v25 - v26;
  if (v33 > v19)
  {
    if (result != v24)
    {
      *result++ = 46;
      while (result != v24)
      {
        double v34 = v33 * 10.0;
        *result++ = vcvtmd_s64_f64(v34) + 48;
        double v33 = v34 - floor(v34);
        double v19 = v19 * 10.0;
        if (v33 <= v19) {
          goto LABEL_56;
        }
      }
    }
    return 0;
  }
  int v35 = __e;
  if (!(__e | a3 & 1))
  {
    if (v24 - result < 2) {
      return 0;
    }
    *(_WORD *)long double result = 12334;
    result += 2;
LABEL_56:
    int v35 = __e;
  }
  if (!v35) {
    goto LABEL_68;
  }
  if (v24 - result < 3) {
    return 0;
  }
  *long double result = 101;
  long long v36 = result + 1;
  int v37 = __e;
  if (__e < 0)
  {
    long long v36 = result + 2;
    result[1] = 45;
    int v37 = -__e;
    int __e = -__e;
  }
  long double result = v36;
  if (v37 >= 1)
  {
    long double result = v36;
    while (result != v24)
    {
      *result++ = (v37 % 0xAu) | 0x30;
      int v38 = __e;
      int v37 = __e / 10;
      __e /= 10;
      if (v38 <= 9) {
        goto LABEL_65;
      }
    }
    return 0;
  }
LABEL_65:
  uint64_t v39 = result - v36;
  if (result - v36 >= 2)
  {
    uint64_t v40 = -1;
    do
    {
      char v41 = result[v40];
      result[v40] = *v36;
      *v36++ = v41;
      v39 -= 2;
      --v40;
    }
    while (v39 > 1);
  }
LABEL_68:
  if (result == v24) {
    return 0;
  }
  *long double result = 0;
  return result;
}

uint64_t x_stream_printf(uint64_t a1, char *__s, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v9 = __s;
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  long long v48 = (double *)&a9;
  unsigned int v11 = strchr(__s, 37);
  if (v11)
  {
    int v12 = v11;
    do
    {
      int64_t v13 = v12 - v9;
      if (v12 <= v9) {
        goto LABEL_8;
      }
      unsigned int v14 = *(void **)(a1 + 8);
      if ((unint64_t)v14 + v13 >= *(void *)(a1 + 16))
      {
        if (!x_stream_grow((char **)a1, v12 - v9)) {
          goto LABEL_8;
        }
        unsigned int v14 = *(void **)(a1 + 8);
      }
      memcpy(v14, v9, v12 - v9);
      *(void *)(a1 + 8) += v13;
LABEL_8:
      double v16 = v12 + 1;
      int v15 = v12[1];
      if (v15 == 46)
      {
        int v17 = v12[2];
        if ((v17 - 48) > 9)
        {
          int v18 = 0;
        }
        else
        {
          int v18 = 0;
          double v19 = v12 + 1;
          do
          {
            int v18 = v17 + 10 * v18 - 48;
            double v16 = v19 + 1;
            int v17 = v19[2];
            ++v19;
          }
          while ((v17 - 48) < 0xA);
        }
        double v21 = __exp10((double)-v18);
        if (v21 >= 1.0 || v21 <= 0.0) {
          double v20 = 0.000001;
        }
        else {
          double v20 = v21;
        }
        LOBYTE(v15) = v16[1];
        int v12 = v16;
      }
      else
      {
        double v20 = 0.000001;
      }
      if ((char)v15 <= 96)
      {
        if (((char)v15 - 70) < 2)
        {
          double v30 = v48++;
          double v31 = *v30;
          if ((__fpclassifyd(*v30) - 1) >= 2) {
            double v24 = v31;
          }
          else {
            double v24 = 0.0;
          }
LABEL_36:
          if (!x_dtostr_(__str, 0x100uLL, 0, v24, v20)) {
            goto LABEL_68;
          }
LABEL_61:
          size_t v29 = strlen(__str);
        }
        else
        {
          if ((char)v15 == 37)
          {
            double v33 = *(char **)(a1 + 8);
            if ((unint64_t)(v33 + 1) >= *(void *)(a1 + 16))
            {
              if (!x_stream_grow((char **)a1, 1uLL)) {
                goto LABEL_68;
              }
              double v33 = *(char **)(a1 + 8);
            }
            char v34 = 37;
LABEL_74:
            char *v33 = v34;
            size_t v29 = 1;
            goto LABEL_67;
          }
          if ((char)v15 != 87) {
            goto LABEL_68;
          }
          double v25 = (int *)v48++;
          int v26 = *v25;
          if (v26 < 1) {
            goto LABEL_68;
          }
          size_t v27 = v26 & 7;
          if (v26 >> 3 >= 0xF8) {
            uint64_t v28 = 248;
          }
          else {
            uint64_t v28 = v26 >> 3;
          }
          size_t v29 = (v28 + v27);
          __memset_chk();
          memset(&__str[v28], 32, v27);
        }
LABEL_62:
        uint64_t v39 = *(void **)(a1 + 8);
        if ((unint64_t)v39 + v29 < *(void *)(a1 + 16)) {
          goto LABEL_65;
        }
        if (x_stream_grow((char **)a1, v29))
        {
          uint64_t v39 = *(void **)(a1 + 8);
LABEL_65:
          uint64_t v40 = __str;
LABEL_66:
          memcpy(v39, v40, v29);
LABEL_67:
          *(void *)(a1 + 8) += v29;
        }
      }
      else
      {
        switch((char)v15)
        {
          case 'a':
            ++v48;
            snprintf(__str, 0x100uLL, "%a");
            goto LABEL_61;
          case 'c':
            char v32 = v48++;
            __str[0] = *(_DWORD *)v32;
            double v33 = *(char **)(a1 + 8);
            if ((unint64_t)(v33 + 1) < *(void *)(a1 + 16)) {
              goto LABEL_42;
            }
            if (!x_stream_grow((char **)a1, 1uLL)) {
              break;
            }
            double v33 = *(char **)(a1 + 8);
LABEL_42:
            char v34 = __str[0];
            goto LABEL_74;
          case 'd':
            ++v48;
            snprintf(__str, 0x100uLL, "%d");
            goto LABEL_61;
          case 'f':
          case 'g':
            unsigned int v23 = v48++;
            double v24 = *v23;
            goto LABEL_36;
          case 'l':
            int v35 = v12[2];
            if (v35 > 116)
            {
              if (v35 == 117)
              {
                ++v48;
                snprintf(__str, 0x100uLL, "%lu");
              }
              else
              {
                if (v35 != 120) {
                  break;
                }
                ++v48;
                snprintf(__str, 0x100uLL, "%lx");
              }
            }
            else
            {
              if (v35 != 100)
              {
                if (v35 != 108) {
                  break;
                }
                int v36 = v12[3];
                if (v36 == 88)
                {
                  ++v48;
                  snprintf(__str, 0x100uLL, "%016llX");
                }
                else
                {
                  if (v36 != 120) {
                    break;
                  }
                  ++v48;
                  snprintf(__str, 0x100uLL, "%016llx");
                }
                size_t v29 = strlen(__str);
                long long v44 = *(void **)(a1 + 8);
                if ((unint64_t)v44 + v29 >= *(void *)(a1 + 16))
                {
                  if (!x_stream_grow((char **)a1, v29))
                  {
                    v12 += 2;
                    break;
                  }
                  long long v44 = *(void **)(a1 + 8);
                }
                memcpy(v44, __str, v29);
                v12 += 2;
                goto LABEL_67;
              }
              ++v48;
              snprintf(__str, 0x100uLL, "%ld");
            }
            size_t v29 = strlen(__str);
            long long v43 = *(void **)(a1 + 8);
            if ((unint64_t)v43 + v29 < *(void *)(a1 + 16)) {
              goto LABEL_83;
            }
            if (x_stream_grow((char **)a1, v29))
            {
              long long v43 = *(void **)(a1 + 8);
LABEL_83:
              memcpy(v43, __str, v29);
              ++v12;
              goto LABEL_67;
            }
            ++v12;
            break;
          case 's':
            int v37 = (const char **)v48++;
            int v38 = *v37;
            size_t v29 = strlen(*v37);
            uint64_t v39 = *(void **)(a1 + 8);
            if ((unint64_t)v39 + v29 < *(void *)(a1 + 16)) {
              goto LABEL_53;
            }
            if (!x_stream_grow((char **)a1, v29)) {
              break;
            }
            uint64_t v39 = *(void **)(a1 + 8);
LABEL_53:
            uint64_t v40 = (char *)v38;
            goto LABEL_66;
          case 'u':
            ++v48;
            snprintf(__str, 0x100uLL, "%u");
            goto LABEL_61;
          case 'w':
            char v41 = (int *)v48++;
            int v42 = *v41;
            if (v42 < 1) {
              break;
            }
            if (v42 >= 256) {
              size_t v29 = 256;
            }
            else {
              size_t v29 = v42;
            }
            __memset_chk();
            goto LABEL_62;
          case 'x':
            ++v48;
            snprintf(__str, 0x100uLL, "%x");
            goto LABEL_61;
          default:
            break;
        }
      }
LABEL_68:
      BOOL v9 = v12 + 2;
      int v12 = strchr(v12 + 2, 37);
    }
    while (v12);
  }
  size_t v45 = strlen(v9);
  long long v46 = *(void **)(a1 + 8);
  if ((unint64_t)v46 + v45 >= *(void *)(a1 + 16))
  {
    uint64_t result = x_stream_grow((char **)a1, v45);
    if (!result) {
      return result;
    }
    long long v46 = *(void **)(a1 + 8);
  }
  uint64_t result = (uint64_t)memcpy(v46, v9, v45);
  *(void *)(a1 + 8) += v45;
  return result;
}

const void *metadataPropertyWithBool()
{
  uint64_t v0 = (const void *)CGImageMetadataPropertyCreate();
  uint64_t v1 = (const void *)CGImageMetadataValueCreate();
  CGImageMetadataPropertySetValue();
  CFRelease(v1);
  if (v0) {
    CFAutorelease(v0);
  }
  return v0;
}

const void *metadataPropertyWithArray(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  double v5 = (void *)[MEMORY[0x1E4F1CA48] arrayWithCapacity:0];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  uint64_t v6 = [a4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v15;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(a4);
        }
        uint64_t v10 = (const void *)CGImageMetadataValueCreate();
        [v5 addObject:v10];
        CFRelease(v10);
        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [a4 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v7);
  }
  unsigned int v11 = (const void *)CGImageMetadataPropertyCreate();
  int v12 = (const void *)CGImageMetadataValueCreate();
  CGImageMetadataPropertySetValue();
  CFRelease(v12);
  if (v11) {
    CFAutorelease(v11);
  }
  return v11;
}

uint64_t metadataPropertyArrayGetArrayOfStrings()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (!GetMetadataPropertyMatchingSchemaAndPropertyName()) {
    return 0;
  }
  if (!CGImageMetadataPropertyGetValue()) {
    return [MEMORY[0x1E4F1CA48] array];
  }
  Value = (void *)CGImageMetadataValueGetValue();
  uint64_t v1 = (void *)[MEMORY[0x1E4F1CA48] array];
  if (Value)
  {
    CFTypeID v2 = CFGetTypeID(Value);
    if (v2 == CFArrayGetTypeID())
    {
      long long v11 = 0u;
      long long v12 = 0u;
      long long v9 = 0u;
      long long v10 = 0u;
      uint64_t v3 = [Value countByEnumeratingWithState:&v9 objects:v13 count:16];
      if (v3)
      {
        uint64_t v4 = v3;
        uint64_t v5 = *(void *)v10;
        do
        {
          for (uint64_t i = 0; i != v4; ++i)
          {
            if (*(void *)v10 != v5) {
              objc_enumerationMutation(Value);
            }
            if (*(void *)(*((void *)&v9 + 1) + 8 * i)) {
              uint64_t v7 = CGImageMetadataValueGetValue();
            }
            else {
              uint64_t v7 = 0;
            }
            [v1 addObject:v7];
          }
          uint64_t v4 = [Value countByEnumeratingWithState:&v9 objects:v13 count:16];
        }
        while (v4);
      }
    }
  }
  return (uint64_t)v1;
}

const void *metadataPropertyWithArrayOfStructs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  double v24 = (void *)[MEMORY[0x1E4F1CA48] array];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  obunint64_t j = a6;
  uint64_t v25 = [a6 countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v25)
  {
    uint64_t v23 = *(void *)v28;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v28 != v23) {
          objc_enumerationMutation(obj);
        }
        uint64_t v26 = v7;
        uint64_t v8 = *(void **)(*((void *)&v27 + 1) + 8 * v7);
        long long v9 = (void *)[MEMORY[0x1E4F1CA60] dictionary];
        long long v31 = 0u;
        long long v32 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v10 = (void *)[v8 allKeys];
        uint64_t v11 = [v10 countByEnumeratingWithState:&v31 objects:v36 count:16];
        if (v11)
        {
          uint64_t v12 = v11;
          uint64_t v13 = *(void *)v32;
          do
          {
            for (uint64_t i = 0; i != v12; ++i)
            {
              if (*(void *)v32 != v13) {
                objc_enumerationMutation(v10);
              }
              uint64_t v15 = *(void *)(*((void *)&v31 + 1) + 8 * i);
              long long v16 = (void *)[v8 objectForKey:v15];
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) == 0) {
                [v16 stringValue];
              }
              long long v17 = (const void *)CGImageMetadataValueCreate();
              CGImageMetadataValueSetNamespaceURI();
              CGImageMetadataValueSetSuggestedNamespacePrefix();
              [v9 setObject:v17 forKey:v15];
              CFRelease(v17);
            }
            uint64_t v12 = [v10 countByEnumeratingWithState:&v31 objects:v36 count:16];
          }
          while (v12);
        }
        int v18 = (const void *)CGImageMetadataValueCreate();
        [v24 addObject:v18];
        CFRelease(v18);
        uint64_t v7 = v26 + 1;
      }
      while (v26 + 1 != v25);
      uint64_t v25 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
    }
    while (v25);
  }
  uint64_t v19 = (const void *)CGImageMetadataPropertyCreate();
  double v20 = (const void *)CGImageMetadataValueCreate();
  CGImageMetadataPropertySetValue();
  CFRelease(v20);
  if (v19) {
    CFAutorelease(v19);
  }
  return v19;
}

uint64_t metadataPropertyArrayGetArrayOfStructs(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (!GetMetadataPropertyMatchingSchemaAndPropertyName()) {
    return 0;
  }
  if (!CGImageMetadataPropertyGetValue()) {
    return [MEMORY[0x1E4F1CA48] array];
  }
  Value = (void *)CGImageMetadataValueGetValue();
  double v24 = (void *)[MEMORY[0x1E4F1CA48] array];
  if (Value)
  {
    CFTypeID v5 = CFGetTypeID(Value);
    if (v5 == CFArrayGetTypeID())
    {
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      uint64_t v25 = [Value countByEnumeratingWithState:&v32 objects:v37 count:16];
      if (v25)
      {
        obunint64_t j = Value;
        uint64_t v23 = *(void *)v33;
        do
        {
          uint64_t v6 = 0;
          do
          {
            if (*(void *)v33 != v23) {
              objc_enumerationMutation(obj);
            }
            uint64_t v7 = *(void *)(*((void *)&v32 + 1) + 8 * v6);
            uint64_t v8 = objc_msgSend(MEMORY[0x1E4F1CA60], "dictionary", obj);
            uint64_t v26 = v6;
            if (v7) {
              long long v9 = (void *)CGImageMetadataValueGetValue();
            }
            else {
              long long v9 = 0;
            }
            long long v30 = 0u;
            long long v31 = 0u;
            long long v28 = 0u;
            long long v29 = 0u;
            long long v10 = (void *)[v9 allKeys];
            uint64_t v11 = [v10 countByEnumeratingWithState:&v28 objects:v36 count:16];
            if (v11)
            {
              uint64_t v12 = v11;
              uint64_t v13 = *(void *)v29;
              do
              {
                for (uint64_t i = 0; i != v12; ++i)
                {
                  if (*(void *)v29 != v13) {
                    objc_enumerationMutation(v10);
                  }
                  uint64_t v15 = *(void *)(*((void *)&v28 + 1) + 8 * i);
                  uint64_t v16 = [v9 objectForKey:v15];
                  int v17 = [a3 isEqualToString:CGImageMetadataValueGetNamespaceURI()];
                  if (v16) {
                    BOOL v18 = v17 == 0;
                  }
                  else {
                    BOOL v18 = 1;
                  }
                  if (!v18)
                  {
                    CFStringRef v19 = (const __CFString *)CGImageMetadataValueGetValue();
                    v39.length = CFStringGetLength(v19);
                    v39.location = 0;
                    if (CFStringFindWithOptions(v19, @" ", v39, 0, 0))
                    {
                      [v8 setObject:v19 forKey:v15];
                    }
                    else
                    {
                      double valuePtr = 0.0;
                      double valuePtr = CFStringGetDoubleValue(v19);
                      CFNumberRef v20 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
                      [v8 setObject:v20 forKey:v15];
                      CFRelease(v20);
                    }
                  }
                }
                uint64_t v12 = [v10 countByEnumeratingWithState:&v28 objects:v36 count:16];
              }
              while (v12);
            }
            [v24 addObject:v8];
            uint64_t v6 = v26 + 1;
          }
          while (v26 + 1 != v25);
          uint64_t v25 = [obj countByEnumeratingWithState:&v32 objects:v37 count:16];
        }
        while (v25);
      }
    }
  }
  return (uint64_t)v24;
}

const void *metadataPropertyWithDouble(double a1)
{
  CFTypeID v2 = (const void *)CGImageMetadataPropertyCreate();
  objc_msgSend(NSString, "stringWithFormat:", @"%g", *(void *)&a1);
  uint64_t v3 = (const void *)CGImageMetadataValueCreate();
  CGImageMetadataPropertySetValue();
  CFRelease(v3);
  if (v2) {
    CFAutorelease(v2);
  }
  return v2;
}

uint64_t metadataPropertyArrayGetDouble(uint64_t a1, uint64_t a2, uint64_t a3, double *a4)
{
  uint64_t result = GetMetadataPropertyMatchingSchemaAndPropertyName();
  if (result && (uint64_t result = CGImageMetadataPropertyGetValue()) != 0 && (uint64_t result = CGImageMetadataValueGetValue()) != 0)
  {
    double DoubleValue = CFStringGetDoubleValue((CFStringRef)result);
    uint64_t result = 1;
  }
  else
  {
    double DoubleValue = NAN;
  }
  *a4 = DoubleValue;
  return result;
}

uint64_t metadataPropertyArrayGetBool(uint64_t a1, uint64_t a2, uint64_t a3, BOOL *a4)
{
  if (GetMetadataPropertyMatchingSchemaAndPropertyName())
  {
    if (CGImageMetadataPropertyGetValue() && (CFStringRef Value = (const __CFString *)CGImageMetadataValueGetValue()) != 0)
    {
      uint64_t v6 = 1;
      BOOL v7 = CFStringCompare(Value, @"TRUE", 1uLL) == kCFCompareEqualTo;
    }
    else
    {
      uint64_t v6 = 0;
      BOOL v7 = 1;
    }
  }
  else
  {
    BOOL v7 = 0;
    uint64_t v6 = 0;
  }
  *a4 = v7;
  return v6;
}

const void *metadataPropertyWithString(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a4) {
    return 0;
  }
  uint64_t v4 = (const void *)CGImageMetadataPropertyCreate();
  CFTypeID v5 = (const void *)CGImageMetadataValueCreate();
  CGImageMetadataPropertySetValue();
  CFRelease(v5);
  if (v4) {
    CFAutorelease(v4);
  }
  return v4;
}

id metadataPropertyArrayGetString()
{
  if (!GetMetadataPropertyMatchingSchemaAndPropertyName()) {
    return 0;
  }
  uint64_t v0 = CGImageMetadataPropertyGetValue() ? (void *)CGImageMetadataValueGetValue() : 0;
  CFTypeID v1 = CFGetTypeID(v0);
  if (v1 != CFStringGetTypeID()) {
    return 0;
  }
  id v2 = v0;

  return v2;
}

double get_ycc_to_rgb_bias_matrix(int a1, int a2, int a3, double *a4, double *a5, double *a6, double *a7)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  double v15 = 0.0;
  double v16 = 0.0;
  double v17 = 0.0;
  get_ycc_to_rgb_matrix(a1, a2, a3, &v15, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6);
  double v11 = v15;
  double v12 = v16;
  double v13 = v17;
  *a7 = a4[1] * v16 + *a4 * v15 + a4[2] * v17;
  a7[1] = v12 * a5[1] + *a5 * v11 + a5[2] * v13;
  double result = v12 * a6[1] + *a6 * v11 + a6[2] * v13;
  a7[2] = result;
  return result;
}

void CI::BitmapSampler::write(uint64_t *a1, uint64_t a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(a2 + 88);
  int v5 = 134218240;
  uint64_t v6 = v3;
  __int16 v7 = 2048;
  uint64_t v8 = v4;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "Bitmap write error: Accessing corrupted bitmap size: (%zu,%zu)", (uint8_t *)&v5, 0x16u);
}

void getFCRFaceExpressionLeftEyeClosed_cold_1()
{
}

void getFCRFaceExpressionRightEyeClosed_cold_1()
{
}

void getFCRFaceExpressionSmile_cold_1()
{
}

void FaceCoreLibrary_cold_1(void *a1)
{
}

void __getFaceCoreDetectorClass_block_invoke_cold_1()
{
}

void __getFaceCoreImageClass_block_invoke_cold_1()
{
}

void __getFaceCoreFaceClass_block_invoke_cold_1()
{
}

void OptionIsTrueOrFalse(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 138543618;
  uint64_t v4 = a1;
  __int16 v5 = 2114;
  uint64_t v6 = a2;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "Unsupported object %{public}@ for key %{public}@.", (uint8_t *)&v3, 0x16u);
}

void GetOutputColorSpaceFromOptions(os_log_t log)
{
  *(_WORD *)CFTypeID v1 = 0;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "CIContext kCIContextOutputColorSpace must be [NSNull null], or a CGColorSpaceRef with kCGColorSpaceModelRGB or kCGColorSpaceModelMonochrome that supports output.", v1, 2u);
}

void GetWorkingColorSpaceFromOptions(os_log_t log)
{
  *(_WORD *)CFTypeID v1 = 0;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "CIContext kCIContextWorkingColorSpace must be [NSNull null], or a CGColorSpaceRef with kCGColorSpaceModelRGB that supports output.", v1, 2u);
}

void CI::copyImageBlockSetOptsCallback(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void canCreateDataRepresentation(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_1_2(&dword_193671000, a1, a3, "%{public}s unsupported colorspace.", a5, a6, a7, a8, 2u);
}

void getkCMPhotoCompressionContainerOption_Format()
{
}

void getkCMPhotoCompressionContainerOption_ImageCountHint()
{
}

void getkCMPhotoCompressionContainerOption_BackingType()
{
}

void soft_CMPhotoCompressionSessionOpenEmptyContainer()
{
}

void getkCMPhotoCompressionOption_ImageOrientation()
{
}

void getkCMPhotoCompressionOption_QualityControllerType()
{
}

void getkCMPhotoQualityControllerParameter_QualityValue()
{
}

void getkCMPhotoCompressionOption_QualityControllerParameters()
{
}

void soft_CMPhotoCompressionSessionAddImage()
{
}

void soft_CMPhotoCompressionSessionAddAuxiliaryImage()
{
}

void soft_CMPhotoCompressionSessionAddMetadataFromImageProperties()
{
}

void soft_CMPhotoCompressionSessionCloseContainerAndCopyBacking()
{
}

void CMPhotoLibrary(void *a1)
{
}

void ___ZL20getMLMultiArrayClassv_block_invoke_cold_1()
{
}

void CoreMLLibrary(void *a1)
{
}

void ___ZL22getMLFeatureValueClassv_block_invoke_cold_1()
{
}

void ___ZL27getMLPredictionOptionsClassv_block_invoke_cold_1()
{
}

void __getAVDepthDataClass_block_invoke_cold_1()
{
}

void AVFoundationLibrary_cold_1(void *a1)
{
}

void __getAVCameraCalibrationDataClass_block_invoke_cold_1()
{
}

void __getAVPortraitEffectsMatteClass_block_invoke_cold_1()
{
}

void __getAVSemanticSegmentationMatteClass_block_invoke_cold_1()
{
}

void soft_ACBSConfigCreate()
{
}

void soft_ACBSConfigFree()
{
}

void soft_ACBSConfigSetMaxQRModuleSamples()
{
}

void soft_ACBSCreateFrameInfoBySearchingForBarcodesInCVPixelBuffer()
{
}

void soft_ACBSConfigSetSymbologiesEnabled()
{
}

void soft_ACBSCreateSymbolDescriptorFromBasicDescriptorWithDefaultPayloadEncoding()
{
}

void QuaggaLibrary(void *a1)
{
}

void repairROIforEyePoints_cold_1(os_log_t log, float a2, float a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v3 = 136446722;
  uint64_t v4 = "repairROIforEyePoints";
  __int16 v5 = 2048;
  double v6 = a2;
  __int16 v7 = 2048;
  double v8 = a3;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "%{public}s eye outset = %.3f x %.3f", (uint8_t *)&v3, 0x20u);
}

void focusStatsForRegion_cold_1(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136446210;
  id v2 = "focusStatsForRegion";
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "%{public}s Focus Stats: Error in creating pixel buffer", (uint8_t *)&v1, 0xCu);
}

void ___ZL25getVNFaceObservationClassv_block_invoke_cold_1()
{
}

void VisionLibrary(void *a1)
{
}

void ___ZL42getVNTrackLegacyFaceCoreObjectRequestClassv_block_invoke_cold_1()
{
}

void ___ZL37getVNDetectFaceRectanglesRequestClassv_block_invoke_cold_1()
{
}

void ___ZL29getVNImageRequestHandlerClassv_block_invoke_cold_1()
{
}

void convertToFullFloatPixelBuffer_cold_1()
{
  __assert_rtn("createCroppedPixelBufferRf", "CIFastBilateralSolver.m", 344, "input.format == kCIFormatRf");
}

void convertToFullFloatPixelBuffer_cold_2()
{
  __assert_rtn("createCroppedPixelBufferRh", "CIFastBilateralSolver.m", 367, "input.format == kCIFormatRh");
}

void createPixelBuffer_cold_1()
{
  __assert_rtn("createPixelBuffer", "CIFastBilateralSolver.m", 317, "p != nil && pixelFormat == CVPixelBufferGetPixelFormatType(p)");
}

void CIGVDumpToFile_cold_1()
{
}

void OptionHeadroom()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "kCIImageContentHeadroom option should be 0 or greater than or equal to 1.0.", v2, v3, v4, v5, v6);
}

void getContentDigestFromOptions(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_1_2(&dword_193671000, a1, a3, "%{public}s kCIImageContentDigest value is not a NSString of at least length 16.", a5, a6, a7, a8, 2u);
}

void VisionLibrary_cold_1(void *a1)
{
}

void getContentDigestFromOptions()
{
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_0(&dword_193671000, v0, v1, "%{public}s %{public}@ value is not NSData of at least 16 bytes.", v2, v3, v4, v5, 2u);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2_0(&dword_193671000, v0, v1, "%{public}s %{public}@ value is not a NSString of at least length 16.", v2, v3, v4, v5, 2u);
}

void CIKernelReflection::reflect()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "[CIKernel initWithString:] failed because no valid kernels were in the string.", v2, v3, v4, v5, v6);
}

{
  uint64_t v0;
  NSObject *v1;
  uint8_t v2[12];
  __int16 v3;
  uint64_t v4;

  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  uint64_t v3 = 2082;
  uint64_t v4 = v0;
  OUTLINED_FUNCTION_3_0(&dword_193671000, v1, (uint64_t)v1, "[CIKernel initWithString:] failed because '%{public}s', the first kernel in the string, has an unsupported type for the parameter '%{public}s'.", v2);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Function '%{public}s' does not exist.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Function '%{public}s' has an unsupported return type.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Warp kernel function '%{public}s' cannot have coreimage:sampler arguments.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Warp kernel function '%{public}s' does not have a coreimage:destination argument.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint8_t v1[24];

  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_6_1();
  OUTLINED_FUNCTION_3_0(&dword_193671000, v0, (uint64_t)v0, "Function '%{public}s' has an unsupported type for the parameter '%{public}@'.", v1);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Function '%{public}s' has too many destination parameters.", v2, v3, v4, v5, v6);
}

void CIKernelReflection::reflect(id *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [*a1 functionNames];
  int v4 = 138543362;
  uint64_t v5 = v3;
  _os_log_debug_impl(&dword_193671000, a2, OS_LOG_TYPE_DEBUG, "Available function names are: %{public}@", (uint8_t *)&v4, 0xCu);
}

void CIKernelReflection::reflectConstants()
{
  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Could not determine required constants for '%{public}s'.", v2, v3, v4, v5, v6);
}

void check_cikl_string(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void CIKLLibraryMaker::createMetalLibraryFromFoslPool()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Library creation from converted CIKL source failed.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Converting CIKL source failed.", v2, v3, v4, v5, v6);
}

void ___ZN16CIKLLibraryMaker30createMetalLibraryFromFoslPoolEPv_block_invoke_2_cold_1(uint8_t *buf, unsigned char *a2, os_log_t log)
{
  *int buf = 0;
  *a2 = 0;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "[CIKernel initWithString:] failed because no valid kernels were in the string.", buf, 2u);
}

void metaFilterForFilter_cold_1()
{
}

void metaFilterForFilter_cold_2()
{
}

void metaFilterForFilter_cold_3()
{
}

void setValueForObject()
{
  __assert_rtn("setValueForObject", "CIMetaFilter.mm", 39, "value == object_getIvar(object, var)");
}

void __can_use_metal_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Metal disabled via CI_ENABLE_METAL_GPU envar.", v2, v3, v4, v5, v6);
}

void __can_use_metal_block_invoke_cold_2()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "No Metal renderer available.", v2, v3, v4, v5, v6);
}

void __CIGetHarvestingBinaryArchiveDict_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Binary archive queue creation failed\n", v2, v3, v4, v5, v6);
}

void __CIGetHarvestingBinaryArchiveDict_block_invoke_cold_2(void *a1, id *a2)
{
  [a1 url];
  [*a2 localizedDescription];
  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_1_0(&dword_193671000, v3, v4, "Binary archive newBinaryArchiveWithDescriptor: %{public}@ : %{public}@\n", v5, v6, v7, v8, 2u);
}

void __CIGetHarvestingBinaryArchiveDict_block_invoke_cold_3(void **a1, NSObject *a2)
{
  OUTLINED_FUNCTION_11_2(a1);
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_1_6(&dword_193671000, a2, v3, "Error creating CoreImage harvesting directory path: %{public}@", v4);
}

void CreateComputePipelineState_cold_1()
{
  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Metal compute pipeline state creation failed: %{public}@\n", v2, v3, v4, v5, v6);
}

void CreateComputePipelineState_cold_2(void *a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  [a1 name];
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_1_6(&dword_193671000, a2, v3, "No binary archive avaialble to find PSO for function %{public}@\n", v4);
}

void CreateComputePipelineState_cold_3(void *a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  [a1 name];
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_1_6(&dword_193671000, a2, v3, "Failed to find PSO for function %{public}@ in the binary archive\n", v4);
}

void CreateRenderPipelineState_cold_1()
{
  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Metal render pipeline state creation failed: %{public}@\n", v2, v3, v4, v5, v6);
}

void CreateFunctionFromSource_cold_1()
{
  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Metal library creation failed: %{public}@\n", v2, v3, v4, v5, v6);
}

void CreateFunctionFromSource_cold_2()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  OUTLINED_FUNCTION_10_1();
  uint64_t v3 = v0;
  _os_log_error_impl(&dword_193671000, v1, OS_LOG_TYPE_ERROR, "Could not get function '%{public}s' from source:\n%{public}s\n", v2, 0x16u);
}

void CreateFunctionFromSource_cold_3(uint64_t a1, void *a2)
{
  [a2 bundlePath];
  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_1_0(&dword_193671000, v2, v3, "Overriding function '%{public}s' with precompiled one in default metallib (from %{public}@).", v4, v5, v6, v7, 2u);
}

void CILoadBinaryArchive_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136446466;
  uint64_t v2 = "CILoadBinaryArchive";
  OUTLINED_FUNCTION_6_2();
  _os_log_error_impl(&dword_193671000, v0, OS_LOG_TYPE_ERROR, "%{public}s Failed to create device for loading binary archive from %{public}@", (uint8_t *)&v1, 0x16u);
}

void CILoadBinaryArchive_cold_2(uint64_t a1, id *a2, NSObject *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = [*a2 description];
  int v6 = 136446722;
  uint64_t v7 = "CILoadBinaryArchive";
  __int16 v8 = 2114;
  uint64_t v9 = a1;
  __int16 v10 = 2114;
  uint64_t v11 = v5;
  _os_log_error_impl(&dword_193671000, a3, OS_LOG_TYPE_ERROR, "%{public}s Failed loading the binary archive from %{public}@ with error: %{public}@", (uint8_t *)&v6, 0x20u);
}

void CILoadAIRArchive_cold_1()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136446466;
  uint64_t v2 = "CILoadAIRArchive";
  OUTLINED_FUNCTION_6_2();
  _os_log_error_impl(&dword_193671000, v0, OS_LOG_TYPE_ERROR, "%{public}s Failed to create device for using with %{public}@", (uint8_t *)&v1, 0x16u);
}

void testBinaryArchive_cold_1(void *a1, uint64_t a2)
{
}

void CreateStitchedFunctionFromDescriptor_cold_2()
{
  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Metal function creation/specialization failed: %{public}@\n", v2, v3, v4, v5, v6);
}

void CreateStitchedFunctionFromDescriptor_cold_3()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Failed finding stitched program for %{public}s function in the archives", v2, v3, v4, v5, v6);
}

void print_stitched_dag_cold_1()
{
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "%{public}@", v2, v3, v4, v5, v6);
}

void __CIMetalRenderToTextures_block_invoke_83_cold_1()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Calling abort() because a volatile surface was detected", v2, v3, v4, v5, v6);
}

void CIAbortIfICSAndUnsuccessfulCommandBufferExecution_cold_1()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Aborting ICS due to command buffer error", v2, v3, v4, v5, v6);
}

void CIAbortIfICSAndUnsuccessfulCommandBufferExecution_cold_2(void *a1)
{
  objc_msgSend((id)objc_msgSend(a1, "error"), "description");
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_1_0(&dword_193671000, v1, v2, "Error excuting command buffer = %{public}@ (%{public}s)", v3, v4, v5, v6, v7);
}

void serializeBinaryArchive_cold_1(uint64_t a1, id *a2)
{
  [*a2 localizedDescription];
  OUTLINED_FUNCTION_6_2();
  OUTLINED_FUNCTION_1_0(&dword_193671000, v2, v3, "Failed serializing binary archive to %{public}@ : %{public}@\n", v4, v5, v6, v7, 2u);
}

void ArchiveLibrary_cold_1()
{
  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Library serialization failed : %{public}@ ", v2, v3, v4, v5, v6);
}

void ArchiveLibrary_cold_2()
{
  __error();
  os_log_t v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_12_1(&dword_193671000, v1, v2, "Failed writing descriptor fot %{public}s: %d - message: %{public}s", v3, v4, v5, v6, v7);
}

void __ArchiveLibraryUsingStitchedDagDescriptor_block_invoke_cold_1(void **a1, NSObject *a2)
{
  OUTLINED_FUNCTION_11_2(a1);
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_1_6(&dword_193671000, a2, v3, "Failed addComputePipelineFunctionsWithDescriptor for binary archive: %{public}@\n", v4);
}

void __ArchiveLibraryUsingStitchedDagDescriptor_block_invoke_cold_2(void **a1, NSObject *a2)
{
  OUTLINED_FUNCTION_11_2(a1);
  OUTLINED_FUNCTION_1();
  OUTLINED_FUNCTION_1_6(&dword_193671000, a2, v3, "Failed addLibraryWithDescriptor for binary archive: %{public}@\n", v4);
}

void __ArchiveLibraryUsingStitchedDagDescriptor_block_invoke_cold_3()
{
  __error();
  os_log_t v0 = __error();
  strerror(*v0);
  OUTLINED_FUNCTION_7_1();
  OUTLINED_FUNCTION_12_1(&dword_193671000, v1, v2, "Failed writing descriptor fot %@: %d - message: %{public}s", v3, v4, v5, v6, v7);
}

void __getVNGeneratePersonSegmentationRequestClass_block_invoke_cold_1()
{
}

void __getVNImageRequestHandlerClass_block_invoke_cold_1()
{
}

void CIPerspectiveAutoCalcDefaultImpl()
{
}

void ___ZL33getVNDetectRectanglesRequestClassv_block_invoke_cold_1()
{
}

void convexFillHorizontal(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136446210;
  uint64_t v2 = "convexFillHorizontal";
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "%{public}s [ConvexFill] center lies outside of the buffer", (uint8_t *)&v1, 0xCu);
}

void convexFillHorizontal(unsigned __int8 *a1, int a2, os_log_t log)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v3 = *a1;
  int v4 = 136446722;
  uint64_t v5 = "convexFillHorizontal";
  __int16 v6 = 1024;
  int v7 = v3;
  __int16 v8 = 1024;
  int v9 = a2;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "%{public}s [ConvexFill] center is below threshold (%d < %d)", (uint8_t *)&v4, 0x18u);
}

void ___ZL52getVNGenerateAttentionBasedSaliencyImageRequestClassv_block_invoke_cold_1()
{
}

void __getVNFaceObservationClass_block_invoke_cold_1()
{
}

void CIVNDetectFaces_cold_1(uint64_t a1)
{
  [(id)OUTLINED_FUNCTION_2_5(a1) localizedDescription];
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_193671000, v1, v2, "%{public}s Error while detecting face segmentations: %{public}@", v3, v4, v5, v6, 2u);
}

void CIVNDetectFaces_cold_2(uint64_t a1)
{
  [(id)OUTLINED_FUNCTION_2_5(a1) localizedDescription];
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_193671000, v1, v2, "%{public}s Error while detecting face pose: %{public}@", v3, v4, v5, v6, 2u);
}

void CIVNDetectFaces_cold_3(uint64_t a1)
{
  [(id)OUTLINED_FUNCTION_2_5(a1) localizedDescription];
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_193671000, v1, v2, "%{public}s Error while detecting face landmarks: %{public}@", v3, v4, v5, v6, 2u);
}

void CIVNDetectFaces_cold_4(uint64_t a1)
{
  [(id)OUTLINED_FUNCTION_2_5(a1) localizedDescription];
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_193671000, v1, v2, "%{public}s Error while detecting face attributes: %{public}@", v3, v4, v5, v6, 2u);
}

void CIVNDetectFaces_cold_5(uint64_t a1)
{
  [(id)OUTLINED_FUNCTION_2_5(a1) localizedDescription];
  OUTLINED_FUNCTION_0_0();
  OUTLINED_FUNCTION_2(&dword_193671000, v1, v2, "%{public}s Error while detecting face rects: %{public}@", v3, v4, v5, v6, 2u);
}

void CIVNDetectFaces_cold_6()
{
}

void __getVNDetectFaceRectanglesRequestClass_block_invoke_cold_1()
{
}

void __getVNClassifyFaceAttributesRequestClass_block_invoke_cold_1()
{
}

void __getVNDetectFaceLandmarksRequestClass_block_invoke_cold_1()
{
}

void __getVNDetectFacePoseRequestClass_block_invoke_cold_1()
{
}

void __getVNGenerateFaceSegmentsRequestClass_block_invoke_cold_1()
{
}

void tuningParametersFromMetaData(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
    a5,
    a6,
    a7,
    a8,
    0);
}

void FigDepthBlurEffectRenderingParametersV1FromCFData()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Params data too small", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Size mismatch", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Incorrect parameters version", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Invalid parameters data; no start marker found", v2, v3, v4, v5, v6);
}

void ___ZL20getCCFacePointsClassv_block_invoke_cold_1()
{
}

void CCPortraitLibrary(void *a1)
{
}

void ___ZL25getCCMakeBlurMapArgsClassv_block_invoke_cold_1()
{
}

void ___ZL21getCCMakeBlurMapClassv_block_invoke_cold_1()
{
}

void ___ZL26getCCApplyBlurMapArgsClassv_block_invoke_cold_1()
{
}

void ___ZL22getCCApplyBlurMapClassv_block_invoke_cold_1()
{
}

void ___ZL22getCCSDOFMetadataClassv_block_invoke_cold_1()
{
}

void ___ZL23prewarmSDOFFilterGraphsP9CIContext_block_invoke_cold_1(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3_2(a1, a2);
  OUTLINED_FUNCTION_2_6(&dword_193671000, v2, v3, "Unable to create filter from string.\n", v4);
}

void ___ZL23prewarmSDOFFilterGraphsP9CIContext_block_invoke_cold_2(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3_2(a1, a2);
  OUTLINED_FUNCTION_2_6(&dword_193671000, v2, v3, "Unable to create CIImage from filter for prewarming\n", v4);
}

void ___ZL23prewarmSDOFFilterGraphsP9CIContext_block_invoke_cold_3(unsigned char *a1, unsigned char *a2)
{
  OUTLINED_FUNCTION_3_2(a1, a2);
  OUTLINED_FUNCTION_2_6(&dword_193671000, v2, v3, "Unable to create render destination for prewarming\n", v4);
}

void CI::SWContext::render_node(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

{
  OUTLINED_FUNCTION_0_2(&dword_193671000, a1, a3, "Rendering to a NULL buffer", a5, a6, a7, a8, 0);
}

{
  OUTLINED_FUNCTION_1_2(&dword_193671000, a1, a3, "%{public}s: Could not find a ROI", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_1_2(&dword_193671000, a1, a3, "%{public}s: Bad texture from sampler", a5, a6, a7, a8, 2u);
}

{
  OUTLINED_FUNCTION_1_2(&dword_193671000, a1, a3, "%{public}s: Empty ROI", a5, a6, a7, a8, 2u);
}

void CI::SWContext::render_node(uint64_t *a1, uint64_t *a2, os_log_t log)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  int v5 = 136446722;
  uint8_t v6 = "void CI::SWContext::render_node(ProgramNode *, const CGRect &, const CGRect &, const Bitmap *)";
  __int16 v7 = 2048;
  uint64_t v8 = v3;
  __int16 v9 = 2048;
  uint64_t v10 = v4;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "%{public}s: outBuffer with %zu width and %zu height", (uint8_t *)&v5, 0x20u);
}

void CI::SWContext::render_node(int a1, int a2, os_log_t log)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  int v3 = 136446722;
  uint64_t v4 = "void CI::SWContext::render_node(ProgramNode *, const CGRect &, const CGRect &, const Bitmap *)";
  __int16 v5 = 1024;
  int v6 = a1;
  __int16 v7 = 1024;
  int v8 = a2;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "%{public}s: Destination refCount changed from %d to %d", (uint8_t *)&v3, 0x18u);
}

void CI::TextureManager::convert_to_sRGB(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void seedFill_cold_1(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_debug_impl(&dword_193671000, log, OS_LOG_TYPE_DEBUG, "seedFill: seed is outside bitmask\n", v1, 2u);
}

void providerGetBytesAtPositionCallback_YCbYCr_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_YCbYCr_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_CbYCrY_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_CbYCrY_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_YCbYCrFull_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_YCbYCrFull_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_CbYCrYFull_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_CbYCrYFull_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_AYCbCr8_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_AYCbCr8_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_2C08_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_2C08_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_2C16_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_2C16_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_2C0h_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_2C0h_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_2C0f_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_2C0f_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_1C08_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_1C08_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_1C16_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_1C16_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_1C0h_surface_lut_cold_1()
{
}

void providerGetBytesAtPositionCallback_1C0h_surface_lut_cold_2()
{
}

void providerGetBytesAtPositionCallback_1C0h_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_1C0h_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_1C0f_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_1C0f_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_w30r_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_w30r_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_w40a_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_w40a_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_l10r_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_l10r_surface_cold_2()
{
}

void providerGetBytesAtPositionCallback_A008_surface_cold_1()
{
}

void providerGetBytesAtPositionCallback_A008_surface_cold_2()
{
}

void providerGetBytePointerCallback_cold_1()
{
}

void providerReleaseBytePointerCallback_cold_1()
{
}

void wrapEAGLContextTexImageIOSurface_cold_1(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "Could not set current EAGL context to %p.", (uint8_t *)&v2, 0xCu);
}

void CI::Bitmap::Bitmap(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "Failed to create CI::Bitmap because IOSurface is multi-planar", v1, 2u);
}

void ___ZN2CI16GLTextureManager19create_intermediateERKNS_22IntermediateDescriptorEP11__IOSurfaceiRK5IRectmb_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_8_0(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Unable to get macro state for the GLContext: %{public}p.\n", v2, v3, v4, v5, v6);
}

void CI::GLTextureManager::release_texture(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void CI::GLTextureManager::upload_texture()
{
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Unable to get macro state for the GLContext: %{public}p.\n", v2, v3, v4, v5, v6);
}

void ___ZN2CI9GLContext16render_root_nodeEPNS_8TileTaskERKNS_9parentROIEU13block_pointerFvvES7__block_invoke_39_cold_1()
{
  OUTLINED_FUNCTION_3_3(*MEMORY[0x1E4F143B8]);
  OUTLINED_FUNCTION_3_1();
  OUTLINED_FUNCTION_1_2(&dword_193671000, v0, v1, "Unable to get macro state for the GLContext: %{public}p.\n", v2, v3, v4, v5, v6);
}

void CI::MetalTextureManager::create_intermediate(uint64_t a1, uint8_t *buf, os_log_t log)
{
  *(_DWORD *)int buf = 136446210;
  *(void *)(buf + 4) = a1;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "Rendering with %{public}s requires compression!\n", buf, 0xCu);
}

void CI::allowRemoval(uint64_t *a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *a1;
  int v3 = 134217984;
  uint64_t v4 = v2;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "Released LRU for %p", (uint8_t *)&v3, 0xCu);
}

void CI::Context::recursive_render()
{
  qword_1EB466910 = (uint64_t)"Core Image cannot allocate IOSurface with unspecified format.";
  abort();
}

void CI::Context::recursive_render(double *a1, double *a2)
{
  CFStringRef v2 = CFStringCreateWithFormat(0, 0, @"Core Image cannot allocate surface of size %zu x %zu", (unint64_t)*a1, (unint64_t)*a2);
  qword_1EB466910 = (uint64_t)CFStringGetCStringPtr(v2, 0x600u);
  abort();
}

void CI::format_swizzle_for_input(int a1)
{
  CI::name_for_format(a1);
  OUTLINED_FUNCTION_0(&dword_193671000, v1, v2, "need a swizzler so that %{public}s can be read.\n", v3, v4, v5, v6, 2u);
}

void CI::format_swizzle_for_input()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_3(&dword_193671000, v0, v1, "CoreImage needs a %{public}s swizzler so that %{public}s can be read as %{public}s.\n", v2, v3, v4, v5, 2u);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_3(&dword_193671000, v0, v1, "CoreImage needs a %{public}s swizzler so that %{public}s can be read as %{public}s.\n", v2, v3, v4, v5, 2u);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_3(&dword_193671000, v0, v1, "CoreImage needs a %{public}s swizzler so that %{public}s can be read as %{public}s.\n", v2, v3, v4, v5, 2u);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_3(&dword_193671000, v0, v1, "CoreImage needs a %{public}s swizzler so that %{public}s can be read as %{public}s.\n", v2, v3, v4, v5, 2u);
}

void CI::format_swizzle_for_output(int a1)
{
  CI::name_for_format(a1);
  OUTLINED_FUNCTION_0(&dword_193671000, v1, v2, "CoreImage needs a swizzler so that %{public}s can be written.\n", v3, v4, v5, v6, 2u);
}

void CI::format_swizzle_for_output()
{
  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_3(&dword_193671000, v0, v1, "CoreImage needs a %{public}s swizzler so that %{public}s can be written as %{public}s.\n", v2, v3, v4, v5, 2u);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_2_7();
  OUTLINED_FUNCTION_0_5();
  OUTLINED_FUNCTION_1_3(&dword_193671000, v0, v1, "CoreImage needs a %{public}s swizzler so that %{public}s can be written as %{public}s.\n", v2, v3, v4, v5, 2u);
}

void CI::ColorMatchImage::render_graph_core(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 136446210;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "Could not support destination colorspace: %{public}s", (uint8_t *)&v2, 0xCu);
}

{
  int v2;
  uint64_t v3;
  uint64_t v4;

  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 136446210;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "Could not support source colorspace: %{public}s", (uint8_t *)&v2, 0xCu);
}

void CI::match_color(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 136446466;
  uint64_t v4 = a1;
  __int16 v5 = 2082;
  uint64_t v6 = a2;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "Matching a color failed: from %{public}s to %{public}s", (uint8_t *)&v3, 0x16u);
}

void CI::ProcessorImage::render_graph_core(int *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  int v3 = CI::name_for_format(*a1);
  int v4 = 136446210;
  __int16 v5 = v3;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "Could not convert from processors output format (%{public}s) to a format supported by the context.", (uint8_t *)&v4, 0xCu);
}

void CI::ProcessorImage::render_graph_core(uint8_t *a1, int *a2, const char **a3, NSObject *a4)
{
  uint64_t v7 = CI::name_for_format(*a2);
  *(_DWORD *)a1 = 136446210;
  *a3 = v7;
  _os_log_error_impl(&dword_193671000, a4, OS_LOG_TYPE_ERROR, "Could not convert from a format supported by the context to the processors input format (%{public}s).", a1, 0xCu);
}

void CI::ProviderImage::render_graph_core(int a1)
{
  CI::name_for_format(a1);
  OUTLINED_FUNCTION_0(&dword_193671000, v1, v2, "Render failed because a pixel format %{public}s is not supported.\n", v3, v4, v5, v6, 2u);
}

void CI::SurfaceImage::render_graph_core(int *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = CI::name_for_format(*a1);
  int v4 = 136446210;
  uint64_t v5 = v3;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "Render failed because a pixel format %{public}s is not supported.\n", (uint8_t *)&v4, 0xCu);
}

void CI::TextureImage::render_graph_core(os_log_t log)
{
  *(_WORD *)uint64_t v1 = 0;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "Input Metal texture was created with a device that does not match the current context device.\n", v1, 2u);
}

void ___ZL37addSpecializedFunctionToBinaryArchiveP21MTLFunctionDescriptorPU21objcproto10MTLLibrary11objc_object_block_invoke_cold_1(id *a1, NSObject *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = [*a1 localizedDescription];
  int v4 = 138543362;
  uint64_t v5 = v3;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "Failed addFunctionWithDescriptor for binary archive: %{public}@\n", (uint8_t *)&v4, 0xCu);
}

void CI::KernelArchive::KernelArchive(void **a1, void **a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  if (v5)
  {
    *(void *)(a3 + 40) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *a2;
  if (*a2)
  {
    *(void *)(a3 + 16) = v6;
    operator delete(v6);
  }
}

void CI::LegacyDAGDescriptor::~LegacyDAGDescriptor(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void CI::StitchableFunctionDAGDescriptor::~StitchableFunctionDAGDescriptor(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void CI::Kernel::builtin(int a1, NSObject *a2)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v2[0] = 67109120;
  v2[1] = a1;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "don't know how to create builtin kernel for type %d", (uint8_t *)v2, 8u);
}

void memstream_write_cold_1()
{
  __assert_rtn("memstream_write", "memstream.c", 114, "ms->contents[ms->size] == 0");
}

void memstream_write_cold_2()
{
}

void memstream_seek_cold_1()
{
  __assert_rtn("memstream_seek", "memstream.c", 164, "ms->size < ms->capacity && ms->contents[ms->size] == 0");
}

void memstream_close_cold_1()
{
}

void CI::ioSurfaceFromCGImage()
{
  OUTLINED_FUNCTION_2_3();
  _os_log_fault_impl(&dword_193671000, v0, OS_LOG_TYPE_FAULT, "Failed to allocate IOSurface for CGNode", v1, 2u);
}

void CI::fillBlock()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Destination surface is nil.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Source image provider is nil.", v2, v3, v4, v5, v6);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Source provider block set is nil.", v2, v3, v4, v5, v6);
}

void ___ZN2CIL9fillBlockEP15CGImageProviderNS_11PixelFormatES2_P11__IOSurface_block_invoke_cold_1()
{
  OUTLINED_FUNCTION_2_3();
  OUTLINED_FUNCTION_0_2(&dword_193671000, v0, v1, "Failed to access image block data.", v2, v3, v4, v5, v6);
}

void CI::GeneralKernelNode::roi_of_child(uint64_t a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 24);
  int v3 = 136446210;
  uint64_t v4 = v2;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "Error general kernel %{public}s no longer has its ROI callback.", (uint8_t *)&v3, 0xCu);
}

void CI::WarpKernelNode::roi_of_child(uint64_t a1, NSObject *a2)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(*(void *)(a1 + 48) + 24);
  int v3 = 136446210;
  uint64_t v4 = v2;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "Error warp kernel %{public}s no longer has its ROI callback.", (uint8_t *)&v3, 0xCu);
}

void CI::PremultiplyNode::convert_to_kernel_node(int *a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "Invalid premultiply power %d.", (uint8_t *)v3, 8u);
}

void CI::ConvertNode::render(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_debug_impl(&dword_193671000, a2, OS_LOG_TYPE_DEBUG, "Failed to render - cannot access data from CGImage %p", (uint8_t *)&v2, 0xCu);
}

void CI::SRGBNode::convert_to_kernel_node(int *a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = *a1;
  v3[0] = 67109120;
  v3[1] = v2;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "Invalid srgb direction %d.", (uint8_t *)v3, 8u);
}

void ___ZNK2CI19RenderToPixelBuffer6renderEPNS_5ImageEPNS_7ContextE_block_invoke_10_cold_1(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136446210;
  int v2 = "render_block_invoke";
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "%{public}s could not access pixelbuffer.", (uint8_t *)&v1, 0xCu);
}

void ___ZNK2CI15RenderToSurface6renderEPNS_5ImageEPNS_7ContextE_block_invoke_10_cold_1(os_log_t log)
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  int v1 = 136446210;
  int v2 = "render_block_invoke";
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "%{public}s could not access surface.", (uint8_t *)&v1, 0xCu);
}

void CI::tile_node_graph(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  int v2 = 134217984;
  uint64_t v3 = a1;
  _os_log_error_impl(&dword_193671000, a2, OS_LOG_TYPE_ERROR, "Failed to render %llu pixels", (uint8_t *)&v2, 0xCu);
}

void CI::tile_node_graph(uint64_t a1, uint64_t a2, os_log_t log)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  int v3 = 134218240;
  uint64_t v4 = a1 - a2;
  __int16 v5 = 2048;
  uint64_t v6 = a1;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "Failed to render %llu of %llu pixels", (uint8_t *)&v3, 0x16u);
}

void CI::SurfaceCacheEntry::SurfaceCacheEntry(unint64_t a1, NSObject *a2)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = CI::gCacheList;
  if (CI::gCacheList) {
    uint64_t v2 = *(void *)(CI::gCacheList + 16);
  }
  unint64_t v3 = atomic_load(&CI::gCacheSize);
  if (v3 <= 0x80000000)
  {
    if (v3 <= 0x200000)
    {
      if (v3 < 0x801) {
        goto LABEL_10;
      }
      double v4 = (double)v3;
      double v5 = 0.0009765625;
    }
    else
    {
      double v4 = (double)v3;
      double v5 = 0.000000953674316;
    }
  }
  else
  {
    double v4 = (double)v3;
    double v5 = 9.31322575e-10;
  }
  unint64_t v3 = llround(v4 * v5);
LABEL_10:
  unint64_t v6 = atomic_load(&CI::gCacheSize);
  uint64_t v7 = "B";
  if (v6 <= 0x80000000)
  {
    if (v6 <= 0x200000)
    {
      if (v6 <= 0x800) {
        int v8 = "B";
      }
      else {
        int v8 = "KB";
      }
    }
    else
    {
      int v8 = "MB";
    }
  }
  else
  {
    int v8 = "GB";
  }
  unint64_t v9 = llround((double)a1 * 9.31322575e-10);
  unint64_t v10 = llround((double)a1 * 0.000000953674316);
  uint64_t v11 = "MB";
  unint64_t v12 = llround((double)a1 * 0.0009765625);
  if (a1 > 0x800)
  {
    double v13 = "KB";
  }
  else
  {
    unint64_t v12 = a1;
    double v13 = "B";
  }
  if (a1 <= 0x200000)
  {
    unint64_t v10 = v12;
    uint64_t v11 = v13;
  }
  if (a1 <= 0x80000000) {
    unint64_t v14 = v10;
  }
  else {
    unint64_t v14 = v9;
  }
  if (a1 <= 0x80000000) {
    double v15 = v11;
  }
  else {
    double v15 = "GB";
  }
  unint64_t v16 = llround((double)(unint64_t)CI::gCacheSizePeak * 9.31322575e-10);
  unint64_t v17 = llround((double)(unint64_t)CI::gCacheSizePeak * 0.000000953674316);
  uint64_t v18 = "MB";
  unint64_t v19 = llround((double)(unint64_t)CI::gCacheSizePeak * 0.0009765625);
  if ((unint64_t)CI::gCacheSizePeak > 0x800)
  {
    CFNumberRef v20 = "KB";
  }
  else
  {
    unint64_t v19 = CI::gCacheSizePeak;
    CFNumberRef v20 = "B";
  }
  if ((unint64_t)CI::gCacheSizePeak <= 0x200000)
  {
    unint64_t v17 = v19;
    uint64_t v18 = v20;
  }
  if ((unint64_t)CI::gCacheSizePeak > 0x80000000)
  {
    double v21 = "GB";
  }
  else
  {
    unint64_t v16 = v17;
    double v21 = v18;
  }
  unint64_t v22 = llround((double)(unint64_t)CI::gCacheNonVolatileSizePeak * 9.31322575e-10);
  unint64_t v23 = llround((double)(unint64_t)CI::gCacheNonVolatileSizePeak * 0.000000953674316);
  unint64_t v24 = llround((double)(unint64_t)CI::gCacheNonVolatileSizePeak * 0.0009765625);
  if ((unint64_t)CI::gCacheNonVolatileSizePeak > 0x800) {
    uint64_t v7 = "KB";
  }
  else {
    unint64_t v24 = CI::gCacheNonVolatileSizePeak;
  }
  if ((unint64_t)CI::gCacheNonVolatileSizePeak <= 0x200000) {
    unint64_t v25 = v24;
  }
  else {
    unint64_t v25 = v23;
  }
  if ((unint64_t)CI::gCacheNonVolatileSizePeak > 0x200000) {
    uint64_t v7 = "MB";
  }
  if ((unint64_t)CI::gCacheNonVolatileSizePeak > 0x80000000)
  {
    unint64_t v25 = v22;
    uint64_t v7 = "GB";
  }
  int v26 = 134220290;
  uint64_t v27 = v2;
  __int16 v28 = 2048;
  unint64_t v29 = v3;
  __int16 v30 = 2080;
  long long v31 = v8;
  __int16 v32 = 2048;
  unint64_t v33 = v14;
  __int16 v34 = 2080;
  long long v35 = v15;
  __int16 v36 = 2048;
  uint64_t v37 = CI::gCacheCountPeak;
  __int16 v38 = 2048;
  unint64_t v39 = v16;
  __int16 v40 = 2080;
  char v41 = v21;
  __int16 v42 = 2048;
  unint64_t v43 = v25;
  __int16 v44 = 2080;
  size_t v45 = v7;
  _os_log_fault_impl(&dword_193671000, a2, OS_LOG_TYPE_FAULT, "Cache Stats: count=%ld size=%ld%s non-volatile=%ld%s peakCount=%ld peakSize=%ld%s peakNVSize=%ld%s", (uint8_t *)&v26, 0x66u);
}

void __ReturnSurfaceToCache_block_invoke_cold_1()
{
}

void __AddReleaseSurfaceBlock_block_invoke_cold_1()
{
  __assert_rtn("AddReleaseSurfaceBlock_block_invoke", "surface-cache.cpp", 1587, "CI::gReleaseSurfaceBlockMap().find(queue) == CI::gReleaseSurfaceBlockMap().end()");
}

void CI::RenderTask::completionTime(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_debug_impl(&dword_193671000, log, OS_LOG_TYPE_DEBUG, "Bad timestamp in RenderTask::completionTime()", v1, 2u);
}

void CI::TextureManager::remove_lru(os_log_t log)
{
  *(_WORD *)int v1 = 0;
  _os_log_error_impl(&dword_193671000, log, OS_LOG_TYPE_ERROR, "Relased LRU", v1, 2u);
}

void CI::Vector::Vector()
{
  __assert_rtn("Vector", "vector.cpp", 148, "values != NULL");
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x1F41138B8]();
}

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void)
{
  MEMORY[0x1F40D70A8]();
  return result;
}

CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext *context)
{
  return (CFAllocatorRef)MEMORY[0x1F40D70F8](allocator, context);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1F40D7170](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1F40D7178](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1F40D7190](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1F40D71B8](theArray);
}

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1F40D71C8](theArray, range.location, range.length, value);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1F40D71D8]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1F40D71F0](theArray, idx);
}

void CFArrayRemoveAllValues(CFMutableArrayRef theArray)
{
}

CFAttributedStringRef CFAttributedStringCreate(CFAllocatorRef alloc, CFStringRef str, CFDictionaryRef attributes)
{
  return (CFAttributedStringRef)MEMORY[0x1F40D7240](alloc, str, attributes);
}

CFIndex CFAttributedStringGetLength(CFAttributedStringRef aStr)
{
  return MEMORY[0x1F40D7298](aStr);
}

CFTypeRef CFAutorelease(CFTypeRef arg)
{
  return (CFTypeRef)MEMORY[0x1F40D72D8](arg);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1F40D7420]();
}

CFBundleRef CFBundleGetMainBundle(void)
{
  return (CFBundleRef)MEMORY[0x1F40D7598]();
}

CFTypeRef CFBundleGetValueForInfoDictionaryKey(CFBundleRef bundle, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40D75D0](bundle, key);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x1F40D77A8](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1F40D77E8](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1F40D77F8](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7808](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x1F40D7810](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1F40D7818](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1F40D7830](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1F40D7850](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1F40D7858](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1F40D7860]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void *context)
{
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1F40D7968](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1F40D7978](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1F40D7998](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1F40D79C0](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1F40D7A00]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1F40D7A10](theDict, key);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1F40D7A68](cf1, cf2);
}

CFIndex CFGetRetainCount(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B68](cf);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1F40D7B80](cf);
}

CFTypeRef CFMakeCollectable(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D7CA0](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1F40D7D80](allocator, theType, valuePtr);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1F40D7E10]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1F40D7E20](number, theType, valuePtr);
}

Boolean CFNumberIsFloatType(CFNumberRef number)
{
  return MEMORY[0x1F40D7E30](number);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7EA0](key, applicationID);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x1F40D7ED0](key, applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1F40D8048](cf);
}

void CFShow(CFTypeRef obj)
{
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1F40D8388](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1F40D8448](alloc, cStr, *(void *)&encoding);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1F40D8490](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x1F40D8498](alloc, formatOptions, format, arguments);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3 = MEMORY[0x1F40D84C8](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange *result)
{
  return MEMORY[0x1F40D84E0](theString, stringToFind, rangeToSearch.location, rangeToSearch.length, searchOptions, result);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8510](theString, buffer, bufferSize, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1F40D8520](theString, *(void *)&encoding);
}

double CFStringGetDoubleValue(CFStringRef str)
{
  MEMORY[0x1F40D8548](str);
  return result;
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1F40D8568](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1F40D8578](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1F40D8590](length, *(void *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1F40D85F0]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1F40D8600](theString, prefix);
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x1F40D8608](theString, suffix);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1F40D8848](allocator, buffer, bufLen, isDirectory);
}

CGAffineTransform *__cdecl CGAffineTransformConcat(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t1, CGAffineTransform *t2)
{
  return (CGAffineTransform *)MEMORY[0x1F40D9790](retstr, t1, t2);
}

CGAffineTransform *__cdecl CGAffineTransformInvert(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97A8](retstr, t);
}

BOOL CGAffineTransformIsIdentity(CGAffineTransform *t)
{
  return MEMORY[0x1F40D97B0](t);
}

CGAffineTransform *__cdecl CGAffineTransformMakeRotation(CGAffineTransform *__return_ptr retstr, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97C8](retstr, angle);
}

CGAffineTransform *__cdecl CGAffineTransformMakeScale(CGAffineTransform *__return_ptr retstr, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D0](retstr, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformMakeTranslation(CGAffineTransform *__return_ptr retstr, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97D8](retstr, tx, ty);
}

CGAffineTransform *__cdecl CGAffineTransformRotate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat angle)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97E8](retstr, t, angle);
}

CGAffineTransform *__cdecl CGAffineTransformScale(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat sx, CGFloat sy)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F0](retstr, t, sx, sy);
}

CGAffineTransform *__cdecl CGAffineTransformTranslate(CGAffineTransform *__return_ptr retstr, CGAffineTransform *t, CGFloat tx, CGFloat ty)
{
  return (CGAffineTransform *)MEMORY[0x1F40D97F8](retstr, t, tx, ty);
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1F40D9808](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1F40D9818](context);
}

CGBitmapInfo CGBitmapContextGetBitmapInfo(CGContextRef context)
{
  return MEMORY[0x1F40D9840](context);
}

size_t CGBitmapContextGetBitsPerComponent(CGContextRef context)
{
  return MEMORY[0x1F40D9848](context);
}

CGColorSpaceRef CGBitmapContextGetColorSpace(CGContextRef context)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9860](context);
}

size_t CGBitmapContextGetHeight(CGContextRef context)
{
  return MEMORY[0x1F40D9870](context);
}

size_t CGBitmapContextGetWidth(CGContextRef context)
{
  return MEMORY[0x1F40D9878](context);
}

uint64_t CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacks()
{
  return MEMORY[0x1F40D9958]();
}

uint64_t CGColorConversionInfoIterateColorSpaceFunctionsWithCallbacksAndOptions()
{
  return MEMORY[0x1F40D9960]();
}

CGColorRef CGColorCreate(CGColorSpaceRef space, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1F40D9970](space, components);
}

CGColorRef CGColorCreateSRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x1F40D99B0](red, green, blue, alpha);
}

CGColorRef CGColorCreateWithPattern(CGColorSpaceRef space, CGPatternRef pattern, const CGFloat *components)
{
  return (CGColorRef)MEMORY[0x1F40D99B8](space, pattern, components);
}

BOOL CGColorEqualToColor(CGColorRef color1, CGColorRef color2)
{
  return MEMORY[0x1F40D99D0](color1, color2);
}

uint64_t CGColorFunctionGetOutputRange()
{
  return MEMORY[0x1F40D99E0]();
}

uint64_t CGColorFunctionGetProperties()
{
  return MEMORY[0x1F40D99E8]();
}

CGFloat CGColorGetAlpha(CGColorRef color)
{
  MEMORY[0x1F40D99F0](color);
  return result;
}

CGColorSpaceRef CGColorGetColorSpace(CGColorRef color)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D99F8](color);
}

const CGFloat *__cdecl CGColorGetComponents(CGColorRef color)
{
  return (const CGFloat *)MEMORY[0x1F40D9A00](color);
}

size_t CGColorGetNumberOfComponents(CGColorRef color)
{
  return MEMORY[0x1F40D9A18](color);
}

CFTypeID CGColorGetTypeID(void)
{
  return MEMORY[0x1F40D9A30]();
}

uint64_t CGColorMatrixGetMatrix()
{
  return MEMORY[0x1F40D9A38]();
}

uint64_t CGColorMatrixGetTypeID()
{
  return MEMORY[0x1F40D9A40]();
}

uint64_t CGColorNxMTransformGetTransform()
{
  return MEMORY[0x1F40D9A48]();
}

uint64_t CGColorNxMTransformGetTypeID()
{
  return MEMORY[0x1F40D9A50]();
}

void CGColorRelease(CGColorRef color)
{
}

CGColorRef CGColorRetain(CGColorRef color)
{
  return (CGColorRef)MEMORY[0x1F40D9A60](color);
}

uint64_t CGColorSpaceContainsFlexGTCInfo()
{
  return MEMORY[0x1F40D9A68]();
}

CFDataRef CGColorSpaceCopyICCData(CGColorSpaceRef space)
{
  return (CFDataRef)MEMORY[0x1F40D9A98](space);
}

uint64_t CGColorSpaceCopyICCProfileDescription()
{
  return MEMORY[0x1F40D9AB0]();
}

CFPropertyListRef CGColorSpaceCopyPropertyList(CGColorSpaceRef space)
{
  return (CFPropertyListRef)MEMORY[0x1F40D9AC0](space);
}

CGColorSpaceRef CGColorSpaceCreateCalibratedGray(const CGFloat *whitePoint, const CGFloat *blackPoint, CGFloat gamma)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AC8](whitePoint, blackPoint, gamma);
}

CGColorSpaceRef CGColorSpaceCreateCalibratedRGB(const CGFloat *whitePoint, const CGFloat *blackPoint, const CGFloat *gamma, const CGFloat *matrix)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AD0](whitePoint, blackPoint, gamma, matrix);
}

CGColorSpaceRef CGColorSpaceCreateDeviceCMYK(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AE8]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceGray(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF0]();
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9AF8]();
}

CGColorSpaceRef CGColorSpaceCreateExtendedLinearized(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B08](space);
}

CGColorSpaceRef CGColorSpaceCreateICCBased(size_t nComponents, const CGFloat *range, CGDataProviderRef profile, CGColorSpaceRef alternate)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B18](nComponents, range, profile, alternate);
}

CGColorSpaceRef CGColorSpaceCreateLab(const CGFloat *whitePoint, const CGFloat *blackPoint, const CGFloat *range)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B28](whitePoint, blackPoint, range);
}

CGColorSpaceRef CGColorSpaceCreatePattern(CGColorSpaceRef baseSpace)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B38](baseSpace);
}

CGColorSpaceRef CGColorSpaceCreateWithICCData(CFTypeRef data)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B48](data);
}

CGColorSpaceRef CGColorSpaceCreateWithName(CFStringRef name)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B60](name);
}

CGColorSpaceRef CGColorSpaceCreateWithPlatformColorSpace(const void *ref)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B68](ref);
}

CGColorSpaceRef CGColorSpaceCreateWithPropertyList(CFPropertyListRef plist)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B70](plist);
}

uint64_t CGColorSpaceEqualToColorSpace()
{
  return MEMORY[0x1F40D9B78]();
}

CGColorSpaceRef CGColorSpaceGetBaseColorSpace(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9B90](space);
}

uint64_t CGColorSpaceGetCalibratedGrayData()
{
  return MEMORY[0x1F40D9BA0]();
}

uint64_t CGColorSpaceGetCalibratedRGBData()
{
  return MEMORY[0x1F40D9BA8]();
}

uint64_t CGColorSpaceGetLabData()
{
  return MEMORY[0x1F40D9BD0]();
}

CGColorSpaceModel CGColorSpaceGetModel(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9BE0](space);
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x1F40D9BE8](space);
}

size_t CGColorSpaceGetNumberOfComponents(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9BF0](space);
}

uint64_t CGColorSpaceGetType()
{
  return MEMORY[0x1F40D9C08]();
}

CFTypeID CGColorSpaceGetTypeID(void)
{
  return MEMORY[0x1F40D9C10]();
}

BOOL CGColorSpaceIsHDR(CGColorSpaceRef a1)
{
  return MEMORY[0x1F40D9C18](a1);
}

BOOL CGColorSpaceIsHLGBased(CGColorSpaceRef s)
{
  return MEMORY[0x1F40D9C20](s);
}

BOOL CGColorSpaceIsPQBased(CGColorSpaceRef s)
{
  return MEMORY[0x1F40D9C30](s);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

CGColorSpaceRef CGColorSpaceRetain(CGColorSpaceRef space)
{
  return (CGColorSpaceRef)MEMORY[0x1F40D9C50](space);
}

BOOL CGColorSpaceSupportsOutput(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9C58](space);
}

BOOL CGColorSpaceUsesExtendedRange(CGColorSpaceRef space)
{
  return MEMORY[0x1F40D9C60](space);
}

BOOL CGColorSpaceUsesITUR_2100TF(CGColorSpaceRef a1)
{
  return MEMORY[0x1F40D9C68](a1);
}

uint64_t CGColorTRCGetFunction()
{
  return MEMORY[0x1F40D9C70]();
}

uint64_t CGColorTRCGetGammaID()
{
  return MEMORY[0x1F40D9C78]();
}

uint64_t CGColorTRCGetTypeID()
{
  return MEMORY[0x1F40D9C80]();
}

uint64_t CGColorTRCPureGammaOriginal()
{
  return MEMORY[0x1F40D9C88]();
}

uint64_t CGColorTransformConvertColor()
{
  return MEMORY[0x1F40D9C90]();
}

uint64_t CGColorTransformConvertColorComponents()
{
  return MEMORY[0x1F40D9C98]();
}

uint64_t CGColorTransformCreate()
{
  return MEMORY[0x1F40D9CA8]();
}

uint64_t CGColorTransformRelease()
{
  return MEMORY[0x1F40D9CB8]();
}

void CGContextAddCurveToPoint(CGContextRef c, CGFloat cp1x, CGFloat cp1y, CGFloat cp2x, CGFloat cp2y, CGFloat x, CGFloat y)
{
}

void CGContextAddLineToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextAddPath(CGContextRef c, CGPathRef path)
{
}

void CGContextBeginPath(CGContextRef c)
{
}

void CGContextClosePath(CGContextRef c)
{
}

uint64_t CGContextCopyDeviceColorSpace()
{
  return MEMORY[0x1F40D9DA0]();
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

uint64_t CGContextDrawImageFromRect()
{
  return MEMORY[0x1F40D9E90]();
}

void CGContextDrawLayerAtPoint(CGContextRef context, CGPoint point, CGLayerRef layer)
{
}

void CGContextDrawPath(CGContextRef c, CGPathDrawingMode mode)
{
}

void CGContextFillPath(CGContextRef c)
{
}

void CGContextFillRect(CGContextRef c, CGRect rect)
{
}

void CGContextFlush(CGContextRef c)
{
}

uint64_t CGContextGetProperty()
{
  return MEMORY[0x1F40D9FF0]();
}

uint64_t CGContextGetType()
{
  return MEMORY[0x1F40DA030]();
}

void CGContextMoveToPoint(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGContextRelease(CGContextRef c)
{
}

CGContextRef CGContextRetain(CGContextRef c)
{
  return (CGContextRef)MEMORY[0x1F40DA090](c);
}

void CGContextScaleCTM(CGContextRef c, CGFloat sx, CGFloat sy)
{
}

void CGContextSetAlpha(CGContextRef c, CGFloat alpha)
{
}

void CGContextSetFillColor(CGContextRef c, const CGFloat *components)
{
}

void CGContextSetFillColorSpace(CGContextRef c, CGColorSpaceRef space)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetGrayFillColor(CGContextRef c, CGFloat gray, CGFloat alpha)
{
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
}

void CGContextSetLineDash(CGContextRef c, CGFloat phase, const CGFloat *lengths, size_t count)
{
}

void CGContextSetLineWidth(CGContextRef c, CGFloat width)
{
}

void CGContextSetPatternPhase(CGContextRef c, CGSize phase)
{
}

void CGContextSetRGBFillColor(CGContextRef c, CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
}

void CGContextSetShouldSmoothFonts(CGContextRef c, BOOL shouldSmoothFonts)
{
}

void CGContextSetStrokeColor(CGContextRef c, const CGFloat *components)
{
}

void CGContextSetStrokeColorSpace(CGContextRef c, CGColorSpaceRef space)
{
}

void CGContextSetStrokeColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextStrokePath(CGContextRef c)
{
}

void CGContextStrokeRect(CGContextRef c, CGRect rect)
{
}

void CGContextTranslateCTM(CGContextRef c, CGFloat tx, CGFloat ty)
{
}

CGDataConsumerRef CGDataConsumerCreateWithCFData(CFMutableDataRef data)
{
  return (CGDataConsumerRef)MEMORY[0x1F40DA2C0](data);
}

CGDataConsumerRef CGDataConsumerCreateWithURL(CFURLRef url)
{
  return (CGDataConsumerRef)MEMORY[0x1F40DA2C8](url);
}

void CGDataConsumerRelease(CGDataConsumerRef consumer)
{
}

CFDataRef CGDataProviderCopyData(CGDataProviderRef provider)
{
  return (CFDataRef)MEMORY[0x1F40DA2E8](provider);
}

CGDataProviderRef CGDataProviderCreateDirect(void *info, off_t size, const CGDataProviderDirectCallbacks *callbacks)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA2F0](info, size, callbacks);
}

CGDataProviderRef CGDataProviderCreateWithCFData(CFDataRef data)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA300](data);
}

uint64_t CGDataProviderCreateWithCopyOfData()
{
  return MEMORY[0x1F40DA308]();
}

CGDataProviderRef CGDataProviderCreateWithData(void *info, const void *data, size_t size, CGDataProviderReleaseDataCallback releaseData)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA310](info, data, size, releaseData);
}

CGDataProviderRef CGDataProviderCreateWithFilename(const char *filename)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA318](filename);
}

void CGDataProviderRelease(CGDataProviderRef provider)
{
}

uint64_t CGDataProviderReleaseBytePtr()
{
  return MEMORY[0x1F40DA350]();
}

CGDataProviderRef CGDataProviderRetain(CGDataProviderRef provider)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA358](provider);
}

uint64_t CGDataProviderRetainBytePtr()
{
  return MEMORY[0x1F40DA360]();
}

uint64_t CGIOSurfaceContextGetColorSpace()
{
  return MEMORY[0x1F40DA7D8]();
}

uint64_t CGImageBlockCreate()
{
  return MEMORY[0x1F40DA7E8]();
}

uint64_t CGImageBlockGetBytesPerRow()
{
  return MEMORY[0x1F40DA7F0]();
}

uint64_t CGImageBlockGetData()
{
  return MEMORY[0x1F40DA7F8]();
}

uint64_t CGImageBlockGetRect()
{
  return MEMORY[0x1F40DA800]();
}

uint64_t CGImageBlockSetCreate()
{
  return MEMORY[0x1F40DA810]();
}

uint64_t CGImageBlockSetGetCount()
{
  return MEMORY[0x1F40DA828]();
}

uint64_t CGImageBlockSetGetImageBlock()
{
  return MEMORY[0x1F40DA830]();
}

uint64_t CGImageBlockSetGetRect()
{
  return MEMORY[0x1F40DA848]();
}

uint64_t CGImageBlockSetRelease()
{
  return MEMORY[0x1F40DA850]();
}

uint64_t CGImageBlockSetRetain()
{
  return MEMORY[0x1F40DA858]();
}

CGImageRef CGImageCreate(size_t width, size_t height, size_t bitsPerComponent, size_t bitsPerPixel, size_t bytesPerRow, CGColorSpaceRef space, CGBitmapInfo bitmapInfo, CGDataProviderRef provider, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA868](width, height, bitsPerComponent, bitsPerPixel, bytesPerRow, space, *(void *)&bitmapInfo, provider);
}

CGImageRef CGImageCreateCopyWithColorSpace(CGImageRef image, CGColorSpaceRef space)
{
  return (CGImageRef)MEMORY[0x1F40DA880](image, space);
}

uint64_t CGImageCreateFromIOSurface()
{
  return MEMORY[0x1F40E96E0]();
}

CGImageRef CGImageCreateWithImageInRect(CGImageRef image, CGRect rect)
{
  return (CGImageRef)MEMORY[0x1F40DA890](image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

uint64_t CGImageCreateWithImageProvider()
{
  return MEMORY[0x1F40DA898]();
}

CGImageRef CGImageCreateWithPNGDataProvider(CGDataProviderRef source, const CGFloat *decode, BOOL shouldInterpolate, CGColorRenderingIntent intent)
{
  return (CGImageRef)MEMORY[0x1F40DA8B8](source, decode, shouldInterpolate, *(void *)&intent);
}

void CGImageDestinationAddAuxiliaryDataInfo(CGImageDestinationRef idst, CFStringRef auxiliaryImageDataType, CFDictionaryRef auxiliaryDataInfoDictionary)
{
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithData(CFMutableDataRef data, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1F40E9738](data, type, count, options);
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x1F40E9758](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x1F40E9760](idst);
}

CGImageAlphaInfo CGImageGetAlphaInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA8D0](image);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA8D8](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x1F40DA8E0](image);
}

size_t CGImageGetBitsPerPixel(CGImageRef image)
{
  return MEMORY[0x1F40DA8E8](image);
}

size_t CGImageGetBytesPerRow(CGImageRef image)
{
  return MEMORY[0x1F40DA8F0](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x1F40DA908](image);
}

CGDataProviderRef CGImageGetDataProvider(CGImageRef image)
{
  return (CGDataProviderRef)MEMORY[0x1F40DA920](image);
}

const CGFloat *__cdecl CGImageGetDecode(CGImageRef image)
{
  return (const CGFloat *)MEMORY[0x1F40DA928](image);
}

uint64_t CGImageGetHeadroomInfo()
{
  return MEMORY[0x1F40DA940]();
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1F40DA948](image);
}

uint64_t CGImageGetIdentifier()
{
  return MEMORY[0x1F40DA950]();
}

uint64_t CGImageGetImageProvider()
{
  return MEMORY[0x1F40DA958]();
}

uint64_t CGImageGetMask()
{
  return MEMORY[0x1F40DA960]();
}

uint64_t CGImageGetMaskingColors()
{
  return MEMORY[0x1F40DA968]();
}

CGImagePixelFormatInfo CGImageGetPixelFormatInfo(CGImageRef image)
{
  return MEMORY[0x1F40DA978](image);
}

uint64_t CGImageGetProperty()
{
  return MEMORY[0x1F40DA980]();
}

CGColorRenderingIntent CGImageGetRenderingIntent(CGImageRef image)
{
  return MEMORY[0x1F40DA988](image);
}

BOOL CGImageGetShouldInterpolate(CGImageRef image)
{
  return MEMORY[0x1F40DA990](image);
}

CFTypeID CGImageGetTypeID(void)
{
  return MEMORY[0x1F40DA9A8]();
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1F40DA9B8](image);
}

CGImageMetadataTagRef CGImageMetadataCopyTagWithPath(CGImageMetadataRef metadata, CGImageMetadataTagRef parent, CFStringRef path)
{
  return (CGImageMetadataTagRef)MEMORY[0x1F40E9798](metadata, parent, path);
}

uint64_t CGImageMetadataCreateFromData()
{
  return MEMORY[0x1F40E97A8]();
}

CGImageMetadataRef CGImageMetadataCreateFromXMPData(CFDataRef data)
{
  return (CGImageMetadataRef)MEMORY[0x1F40E97B8](data);
}

uint64_t CGImageMetadataCreateMetadataProperties()
{
  return MEMORY[0x1F40E97C0]();
}

CGMutableImageMetadataRef CGImageMetadataCreateMutable(void)
{
  return (CGMutableImageMetadataRef)MEMORY[0x1F40E97C8]();
}

CGMutableImageMetadataRef CGImageMetadataCreateMutableCopy(CGImageMetadataRef metadata)
{
  return (CGMutableImageMetadataRef)MEMORY[0x1F40E97D0](metadata);
}

uint64_t CGImageMetadataCreateSerializedData()
{
  return MEMORY[0x1F40E97D8]();
}

CFDataRef CGImageMetadataCreateXMPData(CGImageMetadataRef metadata, CFDictionaryRef options)
{
  return (CFDataRef)MEMORY[0x1F40E97E0](metadata, options);
}

void CGImageMetadataEnumerateTagsUsingBlock(CGImageMetadataRef metadata, CFStringRef rootPath, CFDictionaryRef options, CGImageMetadataTagBlock block)
{
}

CFTypeID CGImageMetadataGetTypeID(void)
{
  return MEMORY[0x1F40E97F0]();
}

uint64_t CGImageMetadataPropertyCreate()
{
  return MEMORY[0x1F40E97F8]();
}

uint64_t CGImageMetadataPropertyGetValue()
{
  return MEMORY[0x1F40E9800]();
}

uint64_t CGImageMetadataPropertySetValue()
{
  return MEMORY[0x1F40E9808]();
}

BOOL CGImageMetadataRegisterNamespaceForPrefix(CGMutableImageMetadataRef metadata, CFStringRef xmlns, CFStringRef prefix, CFErrorRef *err)
{
  return MEMORY[0x1F40E9810](metadata, xmlns, prefix, err);
}

BOOL CGImageMetadataSetTagWithPath(CGMutableImageMetadataRef metadata, CGImageMetadataTagRef parent, CFStringRef path, CGImageMetadataTagRef tag)
{
  return MEMORY[0x1F40E9820](metadata, parent, path, tag);
}

BOOL CGImageMetadataSetValueWithPath(CGMutableImageMetadataRef metadata, CGImageMetadataTagRef parent, CFStringRef path, CFTypeRef value)
{
  return MEMORY[0x1F40E9830](metadata, parent, path, value);
}

CFStringRef CGImageMetadataTagCopyName(CGImageMetadataTagRef tag)
{
  return (CFStringRef)MEMORY[0x1F40E9838](tag);
}

CFTypeRef CGImageMetadataTagCopyValue(CGImageMetadataTagRef tag)
{
  return (CFTypeRef)MEMORY[0x1F40E9850](tag);
}

CGImageMetadataTagRef CGImageMetadataTagCreate(CFStringRef xmlns, CFStringRef prefix, CFStringRef name, CGImageMetadataType type, CFTypeRef value)
{
  return (CGImageMetadataTagRef)MEMORY[0x1F40E9858](xmlns, prefix, name, *(void *)&type, value);
}

CGImageMetadataType CGImageMetadataTagGetType(CGImageMetadataTagRef tag)
{
  return MEMORY[0x1F40E9860](tag);
}

uint64_t CGImageMetadataValueCreate()
{
  return MEMORY[0x1F40E9870]();
}

uint64_t CGImageMetadataValueGetNamespaceURI()
{
  return MEMORY[0x1F40E9878]();
}

uint64_t CGImageMetadataValueGetValue()
{
  return MEMORY[0x1F40E9880]();
}

uint64_t CGImageMetadataValueSetNamespaceURI()
{
  return MEMORY[0x1F40E9888]();
}

uint64_t CGImageMetadataValueSetSuggestedNamespacePrefix()
{
  return MEMORY[0x1F40E9890]();
}

uint64_t CGImageProviderCopyIOSurface()
{
  return MEMORY[0x1F40DA9F8]();
}

uint64_t CGImageProviderCopyImageBlockSetWithOptions()
{
  return MEMORY[0x1F40DAA08]();
}

uint64_t CGImageProviderCreate()
{
  return MEMORY[0x1F40DAA18]();
}

uint64_t CGImageProviderGetAlphaInfo()
{
  return MEMORY[0x1F40DAA20]();
}

uint64_t CGImageProviderGetBitmapInfo()
{
  return MEMORY[0x1F40DAA28]();
}

uint64_t CGImageProviderGetColorSpace()
{
  return MEMORY[0x1F40DAA38]();
}

uint64_t CGImageProviderGetComponentType()
{
  return MEMORY[0x1F40DAA40]();
}

uint64_t CGImageProviderGetPixelSize()
{
  return MEMORY[0x1F40DAA58]();
}

uint64_t CGImageProviderGetProperty()
{
  return MEMORY[0x1F40DAA60]();
}

uint64_t CGImageProviderGetSize()
{
  return MEMORY[0x1F40DAA68]();
}

uint64_t CGImageProviderRelease()
{
  return MEMORY[0x1F40DAA70]();
}

uint64_t CGImageProviderRetain()
{
  return MEMORY[0x1F40DAA78]();
}

uint64_t CGImageProviderSetProperty()
{
  return MEMORY[0x1F40DAA88]();
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageRetain(CGImageRef image)
{
  return (CGImageRef)MEMORY[0x1F40DAA98](image);
}

uint64_t CGImageSetHeadroom()
{
  return MEMORY[0x1F40DAAA8]();
}

uint64_t CGImageSetProperty()
{
  return MEMORY[0x1F40DAAB0]();
}

CFDictionaryRef CGImageSourceCopyAuxiliaryDataInfoAtIndex(CGImageSourceRef isrc, size_t index, CFStringRef auxiliaryImageDataType)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9908](isrc, index, auxiliaryImageDataType);
}

uint64_t CGImageSourceCopyAuxiliaryDataInfoAtIndexWithOptions()
{
  return MEMORY[0x1F40E9910]();
}

CFDictionaryRef CGImageSourceCopyPropertiesAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CFDictionaryRef)MEMORY[0x1F40E9938](isrc, index, options);
}

CFArrayRef CGImageSourceCopyTypeIdentifiers(void)
{
  return (CFArrayRef)MEMORY[0x1F40E9958]();
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9968](isrc, index, options);
}

CGImageRef CGImageSourceCreateThumbnailAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x1F40E9988](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithData(CFDataRef data, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E9998](data, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x1F40E99C8](url, options);
}

CFStringRef CGImageSourceGetType(CGImageSourceRef isrc)
{
  return (CFStringRef)MEMORY[0x1F40E9A18](isrc);
}

uint64_t CGImageSourceGetTypeWithExtension()
{
  return MEMORY[0x1F40E9A38]();
}

CGLayerRef CGLayerCreateWithContext(CGContextRef context, CGSize size, CFDictionaryRef auxiliaryInfo)
{
  return (CGLayerRef)MEMORY[0x1F40DAB20](context, auxiliaryInfo, (__n128)size, *(__n128 *)&size.height);
}

CGContextRef CGLayerGetContext(CGLayerRef layer)
{
  return (CGContextRef)MEMORY[0x1F40DAB28](layer);
}

CGSize CGLayerGetSize(CGLayerRef layer)
{
  MEMORY[0x1F40DAB30](layer);
  result.CGFloat height = v2;
  result.CGFloat width = v1;
  return result;
}

uint64_t CGMetalContextGetColorSpace()
{
  return MEMORY[0x1F40DAB38]();
}

void CGPDFContextAddDestinationAtPoint(CGContextRef context, CFStringRef name, CGPoint point)
{
}

void CGPDFContextBeginPage(CGContextRef context, CFDictionaryRef pageInfo)
{
}

void CGPDFContextClose(CGContextRef context)
{
}

CGContextRef CGPDFContextCreate(CGDataConsumerRef consumer, const CGRect *mediaBox, CFDictionaryRef auxiliaryInfo)
{
  return (CGContextRef)MEMORY[0x1F40DABC0](consumer, mediaBox, auxiliaryInfo);
}

void CGPDFContextEndPage(CGContextRef context)
{
}

void CGPDFContextSetDestinationForRect(CGContextRef context, CFStringRef name, CGRect rect)
{
}

void CGPathAddLineToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathCloseSubpath(CGMutablePathRef path)
{
}

CGMutablePathRef CGPathCreateMutable(void)
{
  return (CGMutablePathRef)MEMORY[0x1F40DB068]();
}

CGPathRef CGPathCreateWithRect(CGRect rect, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1F40DB0A8](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

CGPathRef CGPathCreateWithRoundedRect(CGRect rect, CGFloat cornerWidth, CGFloat cornerHeight, const CGAffineTransform *transform)
{
  return (CGPathRef)MEMORY[0x1F40DB0B0](transform, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, cornerWidth, cornerHeight);
}

void CGPathMoveToPoint(CGMutablePathRef path, const CGAffineTransform *m, CGFloat x, CGFloat y)
{
}

void CGPathRelease(CGPathRef path)
{
}

CGPatternRef CGPatternCreate(void *info, CGRect bounds, CGAffineTransform *matrix, CGFloat xStep, CGFloat yStep, CGPatternTiling tiling, BOOL isColored, const CGPatternCallbacks *callbacks)
{
  return (CGPatternRef)MEMORY[0x1F40DB180](info, matrix, *(void *)&tiling, isColored, callbacks, (__n128)bounds.origin, *(__n128 *)&bounds.origin.y, (__n128)bounds.size, *(__n128 *)&bounds.size.height, xStep, yStep);
}

void CGPatternRelease(CGPatternRef pattern)
{
}

BOOL CGPointMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGPoint *point)
{
  return MEMORY[0x1F40DB210](dict, point);
}

CGRect CGRectApplyAffineTransform(CGRect rect, CGAffineTransform *t)
{
  MEMORY[0x1F40DB220](t, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

BOOL CGRectContainsPoint(CGRect rect, CGPoint point)
{
  return MEMORY[0x1F40DB228]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, (__n128)point, *(__n128 *)&point.y);
}

BOOL CGRectContainsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB230]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x1F40DB238]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB248]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGFloat CGRectGetHeight(CGRect rect)
{
  MEMORY[0x1F40DB250]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxX(CGRect rect)
{
  MEMORY[0x1F40DB268]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMaxY(CGRect rect)
{
  MEMORY[0x1F40DB270]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidX(CGRect rect)
{
  MEMORY[0x1F40DB280]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMidY(CGRect rect)
{
  MEMORY[0x1F40DB288]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinX(CGRect rect)
{
  MEMORY[0x1F40DB298]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetMinY(CGRect rect)
{
  MEMORY[0x1F40DB2A0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGFloat CGRectGetWidth(CGRect rect)
{
  MEMORY[0x1F40DB2A8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  return result;
}

CGRect CGRectInset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2B8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.CGFloat height = v6;
  result.size.CGFloat width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x1F40DB2C0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

CGRect CGRectIntersection(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB2C8]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

BOOL CGRectIntersectsRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x1F40DB2D0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x1F40DB2D8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsInfinite(CGRect rect)
{
  return MEMORY[0x1F40DB2E0]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectIsNull(CGRect rect)
{
  return MEMORY[0x1F40DB2E8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x1F40DB2F0](dict, rect);
}

CGRect CGRectOffset(CGRect rect, CGFloat dx, CGFloat dy)
{
  MEMORY[0x1F40DB2F8]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height, dx, dy);
  result.size.CGFloat height = v6;
  result.size.CGFloat width = v5;
  result.origin.CGFloat y = v4;
  result.origin.CGFloat x = v3;
  return result;
}

CGRect CGRectStandardize(CGRect rect)
{
  MEMORY[0x1F40DB300]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

CGRect CGRectUnion(CGRect r1, CGRect r2)
{
  MEMORY[0x1F40DB310]((__n128)r1.origin, *(__n128 *)&r1.origin.y, (__n128)r1.size, *(__n128 *)&r1.size.height, (__n128)r2.origin, *(__n128 *)&r2.origin.y, (__n128)r2.size, *(__n128 *)&r2.size.height);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

uint64_t CGSNewRegionWithRect()
{
  return MEMORY[0x1F40DB408]();
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  MEMORY[0x1F40DC100](time);
  return result;
}

CMTime *__cdecl CMTimeMakeFromDictionary(CMTime *__return_ptr retstr, CFDictionaryRef dictionaryRepresentation)
{
  return (CMTime *)MEMORY[0x1F40DC110](retstr, dictionaryRepresentation);
}

CTFontRef CTFontCreateUIFontForLanguage(CTFontUIFontType uiType, CGFloat size, CFStringRef language)
{
  return (CTFontRef)MEMORY[0x1F40DF370](*(void *)&uiType, language, size);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x1F40DF390](name, matrix, size);
}

void CTFrameDraw(CTFrameRef frame, CGContextRef context)
{
}

CTFrameRef CTFramesetterCreateFrame(CTFramesetterRef framesetter, CFRange stringRange, CGPathRef path, CFDictionaryRef frameAttributes)
{
  return (CTFrameRef)MEMORY[0x1F40DF6E0](framesetter, stringRange.location, stringRange.length, path, frameAttributes);
}

CTFramesetterRef CTFramesetterCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTFramesetterRef)MEMORY[0x1F40DF6E8](attrString);
}

CGSize CTFramesetterSuggestFrameSizeWithConstraints(CTFramesetterRef framesetter, CFRange stringRange, CFDictionaryRef frameAttributes, CGSize constraints, CFRange *fitRange)
{
  MEMORY[0x1F40DF700](framesetter, stringRange.location, stringRange.length, frameAttributes, fitRange, (__n128)constraints, *(__n128 *)&constraints.height);
  result.CGFloat height = v6;
  result.CGFloat width = v5;
  return result;
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x1F40DF790](attrString);
}

CGRect CTLineGetBoundsWithOptions(CTLineRef line, CTLineBoundsOptions options)
{
  MEMORY[0x1F40DF7C8](line, options);
  result.size.CGFloat height = v5;
  result.size.CGFloat width = v4;
  result.origin.CGFloat y = v3;
  result.origin.CGFloat x = v2;
  return result;
}

CTParagraphStyleRef CTParagraphStyleCreate(const CTParagraphStyleSetting *settings, size_t settingCount)
{
  return (CTParagraphStyleRef)MEMORY[0x1F40DF868](settings, settingCount);
}

CFTypeRef CVBufferCopyAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1F40DFB48](buffer, key, attachmentMode);
}

CFTypeRef CVBufferGetAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x1F40DFB58](buffer, key, attachmentMode);
}

CFDictionaryRef CVBufferGetAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x1F40DFB60](buffer, *(void *)&attachmentMode);
}

void CVBufferSetAttachment(CVBufferRef buffer, CFStringRef key, CFTypeRef value, CVAttachmentMode attachmentMode)
{
}

void CVBufferSetAttachments(CVBufferRef buffer, CFDictionaryRef theAttachments, CVAttachmentMode attachmentMode)
{
}

uint64_t CVCreateColorSpaceFromIOSurfaceBulkAttachments()
{
  return MEMORY[0x1F40DFBB8]();
}

CGColorSpaceRef CVImageBufferCreateColorSpaceFromAttachments(CFDictionaryRef attachments)
{
  return (CGColorSpaceRef)MEMORY[0x1F40DFC18](attachments);
}

CGSize CVImageBufferGetEncodedSize(CVImageBufferRef imageBuffer)
{
  MEMORY[0x1F40DFC38](imageBuffer);
  result.CGFloat height = v2;
  result.CGFloat width = v1;
  return result;
}

Boolean CVImageBufferIsFlipped(CVImageBufferRef imageBuffer)
{
  return MEMORY[0x1F40DFC40](imageBuffer);
}

id CVMetalTextureGetTexture(CVMetalTextureRef image)
{
  return (id)MEMORY[0x1F40DFC98](image);
}

CFTypeID CVMetalTextureGetTypeID(void)
{
  return MEMORY[0x1F40DFCA0]();
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFCE0](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithIOSurface(CFAllocatorRef allocator, IOSurfaceRef surface, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1F40DFD08](allocator, surface, pixelBufferAttributes, pixelBufferOut);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1F40DFD28](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1F40DFD30](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD40](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFD48](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD68](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFD70](pixelBuffer, planeIndex);
}

IOSurfaceRef CVPixelBufferGetIOSurface(CVPixelBufferRef pixelBuffer)
{
  return (IOSurfaceRef)MEMORY[0x1F40DFD78](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD80](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD88](pixelBuffer);
}

CFTypeID CVPixelBufferGetTypeID(void)
{
  return MEMORY[0x1F40DFD90]();
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1F40DFD98](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x1F40DFDA0](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1F40DFDB8](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1F40DFE48](pixelBuffer, unlockFlags);
}

uint64_t ColorSyncMakeProfile()
{
  return MEMORY[0x1F40D6558]();
}

CFDataRef ColorSyncProfileCopyHeader(ColorSyncProfileRef prof)
{
  return (CFDataRef)MEMORY[0x1F40D6570](prof);
}

ColorSyncMutableProfileRef ColorSyncProfileCreateMutableCopy(ColorSyncProfileRef prof)
{
  return (ColorSyncMutableProfileRef)MEMORY[0x1F40D6590](prof);
}

void ColorSyncProfileSetHeader(ColorSyncMutableProfileRef prof, CFDataRef header)
{
}

void ColorSyncProfileSetTag(ColorSyncMutableProfileRef prof, CFStringRef signature, CFDataRef data)
{
}

uint64_t FigDispatchQueueCreateWithPriority()
{
  return MEMORY[0x1F40DD3A8]();
}

uint64_t GetMetadataPropertyMatchingSchemaAndPropertyName()
{
  return MEMORY[0x1F40E9A90]();
}

CFTypeRef IOSurfaceCopyValue(IOSurfaceRef buffer, CFStringRef key)
{
  return (CFTypeRef)MEMORY[0x1F40E9300](buffer, key);
}

IOSurfaceRef IOSurfaceCreate(CFDictionaryRef properties)
{
  return (IOSurfaceRef)MEMORY[0x1F40E9308](properties);
}

size_t IOSurfaceGetAllocSize(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9350](buffer);
}

void *__cdecl IOSurfaceGetBaseAddress(IOSurfaceRef buffer)
{
  return (void *)MEMORY[0x1F40E9358](buffer);
}

void *__cdecl IOSurfaceGetBaseAddressOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return (void *)MEMORY[0x1F40E9380](buffer, planeIndex);
}

uint64_t IOSurfaceGetBulkAttachments()
{
  return MEMORY[0x1F40E9388]();
}

size_t IOSurfaceGetBytesPerElement(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9398](buffer);
}

size_t IOSurfaceGetBytesPerElementOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1F40E93A0](buffer, planeIndex);
}

size_t IOSurfaceGetBytesPerRow(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E93A8](buffer);
}

size_t IOSurfaceGetBytesPerRowOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1F40E93B8](buffer, planeIndex);
}

uint64_t IOSurfaceGetCompressionTypeOfPlane()
{
  return MEMORY[0x1F40E93F0]();
}

size_t IOSurfaceGetElementHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1F40E9410](buffer, planeIndex);
}

size_t IOSurfaceGetElementWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1F40E9420](buffer, planeIndex);
}

size_t IOSurfaceGetHeight(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9440](buffer);
}

size_t IOSurfaceGetHeightOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1F40E9450](buffer, planeIndex);
}

IOSurfaceID IOSurfaceGetID(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9460](buffer);
}

OSType IOSurfaceGetPixelFormat(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9480](buffer);
}

size_t IOSurfaceGetPlaneCount(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E9488](buffer);
}

size_t IOSurfaceGetPropertyMaximum(CFStringRef property)
{
  return MEMORY[0x1F40E94A0](property);
}

uint32_t IOSurfaceGetSeed(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E94C0](buffer);
}

uint64_t IOSurfaceGetSizeOfPlane()
{
  return MEMORY[0x1F40E94C8]();
}

size_t IOSurfaceGetWidth(IOSurfaceRef buffer)
{
  return MEMORY[0x1F40E94F8](buffer);
}

size_t IOSurfaceGetWidthOfPlane(IOSurfaceRef buffer, size_t planeIndex)
{
  return MEMORY[0x1F40E9508](buffer, planeIndex);
}

kern_return_t IOSurfaceLock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9540](buffer, *(void *)&options, seed);
}

uint64_t IOSurfaceLockPlane()
{
  return MEMORY[0x1F40E9548]();
}

uint64_t IOSurfaceSetBulkAttachments2()
{
  return MEMORY[0x1F40E95A0]();
}

kern_return_t IOSurfaceSetPurgeable(IOSurfaceRef buffer, uint32_t newState, uint32_t *oldState)
{
  return MEMORY[0x1F40E95D8](buffer, *(void *)&newState, oldState);
}

void IOSurfaceSetValue(IOSurfaceRef buffer, CFStringRef key, CFTypeRef value)
{
}

kern_return_t IOSurfaceUnlock(IOSurfaceRef buffer, IOSurfaceLockOptions options, uint32_t *seed)
{
  return MEMORY[0x1F40E9630](buffer, *(void *)&options, seed);
}

uint64_t IOSurfaceUnlockPlane()
{
  return MEMORY[0x1F40E9638]();
}

BOOL MPSSupportsMTLDevice(id device)
{
  return MEMORY[0x1F40EDEA8](device);
}

id MTLCreateSystemDefaultDevice(void)
{
  return (id)MEMORY[0x1F40EDE00]();
}

uint64_t MTLPixelFormatGetInfoForDevice()
{
  return MEMORY[0x1F40EDE38]();
}

Class NSClassFromString(NSString *aClassName)
{
  return (Class)MEMORY[0x1F40E7010](aClassName);
}

const char *__cdecl NSGetSizeAndAlignment(const char *typePtr, NSUInteger *sizep, NSUInteger *alignp)
{
  return (const char *)MEMORY[0x1F40D8B10](typePtr, sizep, alignp);
}

void NSLog(NSString *format, ...)
{
}

NSArray *__cdecl NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory directory, NSSearchPathDomainMask domainMask, BOOL expandTilde)
{
  return (NSArray *)MEMORY[0x1F40E7248](directory, domainMask, expandTilde);
}

SEL NSSelectorFromString(NSString *aSelectorName)
{
  return (SEL)MEMORY[0x1F40E7258](aSelectorName);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1F40E7280](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1F40E72B0](aSelector);
}

NSString *NSTemporaryDirectory(void)
{
  return (NSString *)MEMORY[0x1F40E72C8]();
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x1F41034D0](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1F41034F0](session, sourceBuffer, destinationBuffer);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return (void *)MEMORY[0x1F40C9A70](aBlock);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
}

void _Block_object_dispose(const void *a1, const int a2)
{
}

void _Block_release(const void *aBlock)
{
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x1F40D8EA0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1F417E390](this, __s);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1F417E408](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1F417E418](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1F417E588](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5A0](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E5C0](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1F417E608](this, __pos, __s, __n);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x1F417E628](this, __pos, __n1, __s, __n2);
}

std::string *__cdecl std::string::basic_string(std::string *this, const std::string *__str, std::string::size_type __pos, std::string::size_type __n, std::allocator<char> *__a)
{
  return (std::string *)MEMORY[0x1F417E660](this, __str, __pos, __n, __a);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1F417E670](this, __str);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1F417E830]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1F417E838]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1F417E848]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1F417E850]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1F417E898]();
}

{
  return MEMORY[0x1F417E8A0]();
}

{
  return MEMORY[0x1F417E8B0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1F417E940]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1F417E978]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1F417E980]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x1F417EBE0](__str, __idx, *(void *)&__base);
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x1F417EC38]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x1F417EC90]();
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1F417EE40]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1F417EE70](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1F417EE78](retstr, *(void *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1F417EE88](retstr, __val);
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1F40C9B60](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1F417EF48](a1);
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1F417EF80](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

int *__error(void)
{
  return (int *)MEMORY[0x1F40C9B88]();
}

double __exp10(double a1)
{
  MEMORY[0x1F40C9B90](a1);
  return result;
}

int __fpclassifyd(double a1)
{
  return MEMORY[0x1F40C9BC8](a1);
}

simd_float3x3 __invert_f3(simd_float3x3 a1)
{
  MEMORY[0x1F40C9BF8]((__n128)a1.columns[0], (__n128)a1.columns[1], (__n128)a1.columns[2]);
  result.columns[2].i64[1] = v6;
  result.columns[2].i64[0] = v5;
  result.columns[1].i64[1] = v4;
  result.columns[1].i64[0] = v3;
  result.columns[0].i64[1] = v2;
  result.columns[0].i64[0] = v1;
  return result;
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1F40C9C18](*(void *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1F40C9C28]();
}

uint64_t __memset_chk()
{
  return MEMORY[0x1F40C9C38]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x1F40C9C80](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x1F40C9C88](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_signpost_emit_with_name_impl(void *dso, os_log_t log, os_signpost_type_t type, os_signpost_id_t spid, const char *name, const char *format, uint8_t *buf, uint32_t size)
{
}

simd_float4 _simd_exp2_f4(simd_float4 x)
{
  MEMORY[0x1F40CA158]((__n128)x);
  return result;
}

simd_float4 _simd_exp_f4(simd_float4 x)
{
  MEMORY[0x1F40CA160]((__n128)x);
  return result;
}

simd_float4 _simd_log2_f4(simd_float4 x)
{
  MEMORY[0x1F40CA170]((__n128)x);
  return result;
}

simd_float4 _simd_log_f4(simd_float4 x)
{
  MEMORY[0x1F40CA178]((__n128)x);
  return result;
}

simd_float4 _simd_pow_f4(simd_float4 x, simd_float4 y)
{
  MEMORY[0x1F40CA188]((__n128)x, (__n128)y);
  return result;
}

simd_float4 _simd_sin_f4(simd_float4 x)
{
  MEMORY[0x1F40CA190]((__n128)x);
  return result;
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1F415B160]();
}

void abort(void)
{
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1F40CA210](a1, *(void *)&a2);
}

uint32_t arc4random(void)
{
  return MEMORY[0x1F40CA3A8]();
}

long double asin(long double __x)
{
  MEMORY[0x1F40CA3D0](__x);
  return result;
}

long double atan(long double __x)
{
  MEMORY[0x1F40CA450](__x);
  return result;
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x1F40CA460](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x1F40CA468](a1, a2);
  return result;
}

float atanf(float a1)
{
  MEMORY[0x1F40CA470](a1);
  return result;
}

int atexit(void (*a1)(void))
{
  return MEMORY[0x1F40CA488](a1);
}

int atexit_b(void *a1)
{
  return MEMORY[0x1F40CA490](a1);
}

double atof(const char *a1)
{
  MEMORY[0x1F40CA498](a1);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x1F40CA4A8](a1);
}

int backtrace(void **a1, int a2)
{
  return MEMORY[0x1F40CA4F8](a1, *(void *)&a2);
}

void bzero(void *a1, size_t a2)
{
}

long double cbrt(long double __x)
{
  MEMORY[0x1F40CA688](__x);
  return result;
}

BOOL class_addIvar(Class cls, const char *name, size_t size, uint8_t alignment, const char *types)
{
  return MEMORY[0x1F41814C0](cls, name, size, alignment, types);
}

BOOL class_addMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return MEMORY[0x1F41814C8](cls, name, imp, types);
}

Ivar *__cdecl class_copyIvarList(Class cls, unsigned int *outCount)
{
  return (Ivar *)MEMORY[0x1F41814E8](cls, outCount);
}

Method *__cdecl class_copyMethodList(Class cls, unsigned int *outCount)
{
  return (Method *)MEMORY[0x1F41814F8](cls, outCount);
}

objc_property_t *__cdecl class_copyPropertyList(Class cls, unsigned int *outCount)
{
  return (objc_property_t *)MEMORY[0x1F4181500](cls, outCount);
}

Method class_getInstanceMethod(Class cls, SEL name)
{
  return (Method)MEMORY[0x1F4181528](cls, name);
}

Ivar class_getInstanceVariable(Class cls, const char *name)
{
  return (Ivar)MEMORY[0x1F4181538](cls, name);
}

IMP class_replaceMethod(Class cls, SEL name, IMP imp, const char *types)
{
  return (IMP)MEMORY[0x1F4181578](cls, name, imp, types);
}

long double cos(long double __x)
{
  MEMORY[0x1F40CB8A8](__x);
  return result;
}

float cosf(float a1)
{
  MEMORY[0x1F40CB8B0](a1);
  return result;
}

void dispatch_after(dispatch_time_t when, dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_assert_queue_V2(dispatch_queue_t queue)
{
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

void dispatch_barrier_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_block_t dispatch_block_create_with_qos_class(dispatch_block_flags_t flags, dispatch_qos_class_t qos_class, int relative_priority, dispatch_block_t block)
{
  return (dispatch_block_t)MEMORY[0x1F40CB9C8](flags, *(void *)&qos_class, *(void *)&relative_priority, block);
}

dispatch_data_t dispatch_data_create(const void *buffer, size_t size, dispatch_queue_t queue, dispatch_block_t destructor)
{
  return (dispatch_data_t)MEMORY[0x1F40CBA10](buffer, size, queue, destructor);
}

dispatch_queue_t dispatch_get_current_queue(void)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBA58]();
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1F40CBA60](identifier, flags);
}

void *__cdecl dispatch_get_specific(const void *key)
{
  return (void *)MEMORY[0x1F40CBA68](key);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1F40CBA88]();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBAC0](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_autorelease_frequency(dispatch_queue_attr_t attr, dispatch_autorelease_frequency_t frequency)
{
  return (dispatch_queue_attr_t)MEMORY[0x1F40CBBA8](attr, frequency);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBC0](label, attr);
}

dispatch_queue_t dispatch_queue_create_with_target_V2(const char *label, dispatch_queue_attr_t attr, dispatch_queue_t target)
{
  return (dispatch_queue_t)MEMORY[0x1F40CBBD0](label, attr, target);
}

const char *__cdecl dispatch_queue_get_label(dispatch_queue_t queue)
{
  return (const char *)MEMORY[0x1F40CBBD8](queue);
}

void *__cdecl dispatch_queue_get_specific(dispatch_queue_t queue, const void *key)
{
  return (void *)MEMORY[0x1F40CBBE8](queue, key);
}

void dispatch_queue_set_specific(dispatch_queue_t queue, const void *key, void *context, dispatch_function_t destructor)
{
}

void dispatch_release(dispatch_object_t object)
{
}

void dispatch_resume(dispatch_object_t object)
{
}

void dispatch_retain(dispatch_object_t object)
{
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1F40CBC30](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1F40CBC40](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1F40CBC50](dsema, timeout);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x1F40CBC98](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_time_t dispatch_time(dispatch_time_t when, int64_t delta)
{
  return MEMORY[0x1F40CBD30](when, delta);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x1F40CBDA0](a1, a2);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1F40CBDB0]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1F40CBDB8](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1F40CBDC8](__handle, __symbol);
}

uint64_t dyld_get_active_platform()
{
  return MEMORY[0x1F40CBE10]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1F40CBEC8]();
}

long double erf(long double __x)
{
  MEMORY[0x1F40CBF50](__x);
  return result;
}

long double erfc(long double __x)
{
  MEMORY[0x1F40CBF58](__x);
  return result;
}

float erff(float a1)
{
  MEMORY[0x1F40CBF60](a1);
  return result;
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x1F40CBFE0](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x1F40CBFE8](__x);
  return result;
}

float exp2f(float a1)
{
  MEMORY[0x1F40CBFF0](a1);
  return result;
}

float expf(float a1)
{
  MEMORY[0x1F40CBFF8](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x1F40CC050](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1F40CC0C8](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x1F40CC1A0](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1F40CC1C0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1F40CC1D8](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1F40CC1E8](*(void *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1F40CC1F0](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC200](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

int freelocale(locale_t a1)
{
  return MEMORY[0x1F40CC238](a1);
}

long double frexp(long double __x, int *__e)
{
  MEMORY[0x1F40CC248](__e, __x);
  return result;
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x1F40CC290](a1, a2, *(void *)&a3);
}

FILE *__cdecl funopen(const void *a1, int (__cdecl *a2)(void *, char *, int), int (__cdecl *a3)(void *, const char *, int), fpos_t (__cdecl *a4)(void *, fpos_t, int), int (__cdecl *a5)(void *))
{
  return (FILE *)MEMORY[0x1F40CC320](a1, a2, a3, a4, a5);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1F40CC338](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1F40CC3B0](a1);
}

int getpagesize(void)
{
  return MEMORY[0x1F40CC480]();
}

pid_t getpid(void)
{
  return MEMORY[0x1F40CC4A0]();
}

char *__cdecl getsectdatafromFramework(const char *FrameworkName, const char *segname, const char *sectname, unint64_t *size)
{
  return (char *)MEMORY[0x1F40CC518](FrameworkName, segname, sectname, size);
}

void glGetIntegerv(GLenum pname, GLint *params)
{
}

void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const GLvoid *pixels)
{
}

long double hypot(long double __x, long double __y)
{
  MEMORY[0x1F40CC630](__x, __y);
  return result;
}

float hypotf(float a1, float a2)
{
  MEMORY[0x1F40CC640](a1, a2);
  return result;
}

const char *__cdecl ivar_getName(Ivar v)
{
  return (const char *)MEMORY[0x1F41815B8](v);
}

const char *__cdecl ivar_getTypeEncoding(Ivar v)
{
  return (const char *)MEMORY[0x1F41815C8](v);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x1F40CC700]();
}

long double ldexp(long double __x, int __e)
{
  MEMORY[0x1F40CC800](*(void *)&__e, __x);
  return result;
}

long double log(long double __x)
{
  MEMORY[0x1F40CC878](__x);
  return result;
}

float log10f(float a1)
{
  MEMORY[0x1F40CC888](a1);
  return result;
}

long double log2(long double __x)
{
  MEMORY[0x1F40CC8A8](__x);
  return result;
}

float log2f(float a1)
{
  MEMORY[0x1F40CC8B0](a1);
  return result;
}

float logf(float a1)
{
  MEMORY[0x1F40CC8C0](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x1F40CC910]();
}

kern_return_t mach_timebase_info(mach_timebase_info_t info)
{
  return MEMORY[0x1F40CCA60](info);
}

size_t malloc_size(const void *ptr)
{
  return MEMORY[0x1F40CCB80](ptr);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB90](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCB98](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1F40CCBA8](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCD8](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1F40CCCE8](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1F40CCCF0](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD10](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1F40CCD20](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
}

void memset_pattern8(void *__b, const void *__pattern8, size_t __len)
{
}

void method_exchangeImplementations(Method m1, Method m2)
{
}

IMP method_getImplementation(Method m)
{
  return (IMP)MEMORY[0x1F41815F8](m);
}

SEL method_getName(Method m)
{
  return (SEL)MEMORY[0x1F4181600](m);
}

const char *__cdecl method_getTypeEncoding(Method m)
{
  return (const char *)MEMORY[0x1F4181618](m);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1F40CCE40](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int mprotect(void *a1, size_t a2, int a3)
{
  return MEMORY[0x1F40CCE58](a1, a2, *(void *)&a3);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1F40CCE88](a1, a2);
}

locale_t newlocale(int a1, const char *a2, locale_t a3)
{
  return (locale_t)MEMORY[0x1F40CCFF0](*(void *)&a1, a2, a3);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1F4181638](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1F4181648]();
}

Class objc_allocateClassPair(Class superclass, const char *name, size_t extraBytes)
{
  return (Class)MEMORY[0x1F4181650](superclass, name, extraBytes);
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1F4181660](a1);
}

{
  MEMORY[0x1F4181668](context);
}

{
  return (void *)MEMORY[0x1F4181670]();
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1F4181680](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1F4181688]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_end_catch(void)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getAssociatedObject(id object, const void *key)
{
  return (id)MEMORY[0x1F4181718](object, key);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1F4181728](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1F4181748](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1F41817A8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1F41817B0]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1F41817B8]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1F41817C0]();
}

uint64_t objc_opt_respondsToSelector()
{
  return MEMORY[0x1F41817C8]();
}

uint64_t self
{
  return MEMORY[0x1F41817D0]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1F41818B0](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1F41818C0](a1);
}

void objc_setAssociatedObject(id object, const void *key, id value, void *policy)
{
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_atomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_setProperty_nonatomic_copy(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x1F4181A28](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x1F4181A30](obj);
}

void objc_terminate(void)
{
}

const char *__cdecl object_getClassName(id a1)
{
  return (const char *)MEMORY[0x1F4181A60](a1);
}

Ivar object_getInstanceVariable(id obj, const char *name, void **outValue)
{
  return (Ivar)MEMORY[0x1F4181A70](obj, name, outValue);
}

id object_getIvar(id a1, Ivar a2)
{
  return (id)MEMORY[0x1F4181A78](a1, a2);
}

Ivar object_setInstanceVariable(id obj, const char *name, void *value)
{
  return (Ivar)MEMORY[0x1F4181A98](obj, name, value);
}

void object_setIvar(id obj, Ivar ivar, id value)
{
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1F40CD360](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1F40CD3B8](oslog, type);
}

BOOL os_signpost_enabled(os_log_t log)
{
  return MEMORY[0x1F40CD550](log);
}

os_signpost_id_t os_signpost_id_make_with_pointer(os_log_t log, const void *ptr)
{
  return MEMORY[0x1F40CD560](log, ptr);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1F40CD648]();
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x1F40CD818](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x1F40CD828](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x1F40CD838](a1);
}

uint64_t proc_pidoriginatorinfo()
{
  return MEMORY[0x1F40CD8B0]();
}

objc_property_attribute_t *__cdecl property_copyAttributeList(objc_property_t property, unsigned int *outCount)
{
  return (objc_property_attribute_t *)MEMORY[0x1F4181AB8](property, outCount);
}

const char *__cdecl property_getName(objc_property_t property)
{
  return (const char *)MEMORY[0x1F4181AD0](property);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA78](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1F40CDA80](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA88](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1F40CDA98](a1);
}

int putchar(int a1)
{
  return MEMORY[0x1F40CDBA8](*(void *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x1F40CDBB8](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x1F40CDBD8]();
}

void qsort(void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
}

uint64_t random(void)
{
  return MEMORY[0x1F40CDC18]();
}

const char *__cdecl sel_getName(SEL sel)
{
  return (const char *)MEMORY[0x1F4181B28](sel);
}

SEL sel_getUid(const char *str)
{
  return (SEL)MEMORY[0x1F4181B30](str);
}

long double sin(long double __x)
{
  MEMORY[0x1F40CE058](__x);
  return result;
}

float sinf(float a1)
{
  MEMORY[0x1F40CE060](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1F40CE080](__str, __size, __format);
}

void srandom(unsigned int a1)
{
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1F40CE110](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE150](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1F40CE158](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1F40CE178](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1F40CE188](*(void *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1F40CE1B0](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1F40CE1C8](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1F40CE1F0](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1F40CE1F8](__dst, __src, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1F40CE230](__s, *(void *)&__c);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1F40CE258](__s1, __s2);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x1F40CE260](a1, a2);
  return result;
}

unint64_t strtoul(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1F40CE2E0](__str, __endptr, *(void *)&__base);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1F40CE3D0](a1, a2, a3, a4, a5);
}

void syslog(int a1, const char *a2, ...)
{
}

long double tan(long double __x)
{
  MEMORY[0x1F40CE420](__x);
  return result;
}

long double tanh(long double __x)
{
  MEMORY[0x1F40CE430](__x);
  return result;
}

locale_t uselocale(locale_t a1)
{
  return (locale_t)MEMORY[0x1F40CE600](a1);
}

void uuid_generate(uuid_t out)
{
}

void uuid_unparse(const uuid_t uu, uuid_string_t out)
{
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
}

void vDSP_vabs(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vflt32(const int *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsbsm(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsmsa(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

vImage_Error vImageBufferFill_ARGBFFFF(const vImage_Buffer *dest, const Pixel_FFFF color, vImage_Flags flags)
{
  return MEMORY[0x1F40D2280](dest, color, *(void *)&flags);
}

vImage_Error vImageConvert_16Fto16U(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D23A0](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_16Uto16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D23C0](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar16FtoPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D25A8](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D25B0](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar16UtoARGB16U(const vImage_Buffer *aSrc, const vImage_Buffer *rSrc, const vImage_Buffer *gSrc, const vImage_Buffer *bSrc, const vImage_Buffer *argbDest, vImage_Flags flags)
{
  return MEMORY[0x1F40D25C0](aSrc, rSrc, gSrc, bSrc, argbDest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar8toPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D2610](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_Planar8toPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x1F40D2618](src, dest, *(void *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x1F40D2648](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_PlanarFtoPlanar8(const vImage_Buffer *src, const vImage_Buffer *dest, Pixel_F maxFloat, Pixel_F minFloat, vImage_Flags flags)
{
  return MEMORY[0x1F40D2650](src, dest, *(void *)&flags, maxFloat, minFloat);
}

vImage_Error vImageConvert_RGB16UtoRGBA16U(const vImage_Buffer *rgbSrc, const vImage_Buffer *aSrc, Pixel_16U alpha, const vImage_Buffer *rgbaDest, BOOL premultiply, vImage_Flags flags)
{
  return MEMORY[0x1F40D2678](rgbSrc, aSrc, alpha, rgbaDest, premultiply, *(void *)&flags);
}

vImage_Error vImageConvert_RGB888toRGBA8888(const vImage_Buffer *a1, const vImage_Buffer *a2, Pixel_8 a3, const vImage_Buffer *a4, BOOL a5, vImage_Flags a6)
{
  return MEMORY[0x1F40D26D0](a1, a2, a3, a4, a5, *(void *)&a6);
}

vImage_Error vImageConvert_RGBFFFtoRGBAFFFF(const vImage_Buffer *a1, const vImage_Buffer *a2, Pixel_F a3, const vImage_Buffer *a4, BOOL a5, vImage_Flags flags)
{
  return MEMORY[0x1F40D2718](a1, a2, a4, a5, *(void *)&flags, a3);
}

vImage_Error vImageExtractChannel_ARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint64_t channelIndex, vImage_Flags flags)
{
  return MEMORY[0x1F40D28D8](src, dest, channelIndex, *(void *)&flags);
}

vImage_Error vImageExtractChannel_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, uint64_t channelIndex, vImage_Flags flags)
{
  return MEMORY[0x1F40D28E8](src, dest, channelIndex, *(void *)&flags);
}

vImage_Error vImageHistogramCalculation_ARGB8888(const vImage_Buffer *src, vImagePixelCount *histogram[4], vImage_Flags flags)
{
  return MEMORY[0x1F40D2950](src, histogram, *(void *)&flags);
}

vImage_Error vImageHistogramCalculation_ARGBFFFF(const vImage_Buffer *src, vImagePixelCount *histogram[4], unsigned int histogram_entries, Pixel_F minVal, Pixel_F maxVal, vImage_Flags flags)
{
  return MEMORY[0x1F40D2958](src, histogram, *(void *)&histogram_entries, *(void *)&flags, minVal, maxVal);
}

vImage_Error vImageOverwriteChannelsWithPixel_ARGB16U(const Pixel_ARGB_16U the_pixel, const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x1F40D2AE0](the_pixel, src, dest, copyMask, *(void *)&flags);
}

vImage_Error vImageOverwriteChannels_ARGBFFFF(const vImage_Buffer *newSrc, const vImage_Buffer *origSrc, const vImage_Buffer *dest, uint8_t copyMask, vImage_Flags flags)
{
  return MEMORY[0x1F40D2B38](newSrc, origSrc, dest, copyMask, *(void *)&flags);
}

vImage_Error vImagePermuteChannels_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1F40D2B60](src, dest, permuteMap, *(void *)&flags);
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1F40CE690](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1F40CE790](__str, __size, __format, a4);
}