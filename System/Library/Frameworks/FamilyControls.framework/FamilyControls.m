int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = type metadata accessor for Logger();
  v4 = *(void *)(v3 - 8);
  v6 = __chkstk_darwin(v3, v5);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v24 - v10;
  qword_100074B38 = (uint64_t)[objc_allocWithZone((Class)type metadata accessor for Agent()) init];
  if (static Feature.isAuthorizationEnabled.getter())
  {
    qword_100074B40 = 0xD00000000000001DLL;
    *(void *)algn_100074B48 = 0x80000001000608A0;
    if (_set_user_dir_suffix())
    {
      sub_10002AFE8();
      sub_10002AD3C(1, v12);
      dispatch_main();
    }
    static Logger.agent.getter();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc();
      v25 = swift_slowAlloc();
      v27 = v25;
      *(_DWORD *)v19 = 136446466;
      v20 = qword_100074B40;
      v21 = *(void *)algn_100074B48;
      swift_bridgeObjectRetain();
      v26 = sub_1000067CC(v20, v21, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 1024;
      LODWORD(v26) = errno.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to initialize sandbox %{public}s: %{darwin.errno}d", (uint8_t *)v19, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
    sub_10002AD3C(0, v22);
    exit(78);
  }
  static Logger.agent.getter();
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "The Family Controls feature is not enabled", v15, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
  sub_10002AD3C(0, v16);
  exit(77);
}

uint64_t sub_100005CBC(uint64_t a1, uint64_t a2)
{
  return sub_1000065D4(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100005CE0(uint64_t a1, id *a2)
{
  uint64_t result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t sub_100005D58(uint64_t a1, id *a2)
{
  char v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_100005DD8@<X0>(void *a1@<X8>)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

id sub_100005E24()
{
  return *v0;
}

uint64_t sub_100005E2C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void sub_100005E34(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_100005E3C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

BOOL sub_100005E50(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_100005E80(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_100005E94(void *result)
{
  *v1 &= *result;
  return result;
}

uint64_t sub_100005EA8(uint64_t a1)
{
  uint64_t v2 = sub_100007018(&qword_100073A70, type metadata accessor for CKError);

  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_100005F14(uint64_t a1)
{
  uint64_t v2 = sub_100007018(&qword_100073A70, type metadata accessor for CKError);

  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100005F84(uint64_t a1)
{
  uint64_t v2 = sub_100007018(&qword_100073AA8, type metadata accessor for CKError);

  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

void *sub_100005FF0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_100006000(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_100006010()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10000609C()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t sub_1000060AC(uint64_t a1)
{
  uint64_t v2 = sub_100007018(&qword_100073AA8, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_100006118(uint64_t a1)
{
  uint64_t v2 = sub_100007018(&qword_100073AA8, type metadata accessor for CKError);

  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100006184(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100007018(&qword_100073AA8, type metadata accessor for CKError);
  id v5 = a1;

  return _BridgedStoredNSError.init(_bridgedNSError:)(v5, a2, v4);
}

uint64_t sub_100006214()
{
  id v1 = *v0;
  uint64_t v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_10000624C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007018(&qword_100073AA8, type metadata accessor for CKError);

  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_1000062C8()
{
  return Hasher._finalize()();
}

void *sub_100006328@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100006338@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_100006364(uint64_t a1)
{
  uint64_t v2 = sub_100007018(&qword_100073B90, type metadata accessor for Identifier);
  uint64_t v3 = sub_100007018(&qword_100073B98, type metadata accessor for Identifier);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100006420@<X0>(void *a1@<X8>)
{
  NSString v2 = String._bridgeToObjectiveC()();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_100006468(uint64_t a1)
{
  uint64_t v2 = sub_100007018(&qword_100073BA0, type metadata accessor for Key);
  uint64_t v3 = sub_100007018(&qword_100073BA8, type metadata accessor for Key);

  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100006524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007018(&qword_100073AA8, type metadata accessor for CKError);

  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_1000065A8(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000065BC(uint64_t a1, uint64_t a2)
{
  return sub_1000065D4(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_1000065D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_100006618()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10000666C()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1000066E0(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_1000066F0(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_10000672C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100006754(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  sub_1000067CC(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_1000067CC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1000068A0(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    ObjectType = (void *)swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_100007314((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_100007314((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1000068A0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_100006A5C(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_100006A5C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_100006AF4(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100006CD4(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_100006CD4(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_100006AF4(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_100006C6C(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = _StringGuts.copyUTF8(into:)();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return v4;
      }
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      uint64_t v2 = String.UTF8View._foreignCount()();
      if (!v2) {
        return &_swiftEmptyArrayStorage;
      }
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return &_swiftEmptyArrayStorage;
  }
  return result;
}

void *sub_100006C6C(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_100007370(&qword_100073B10);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_100006CD4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007370(&qword_100073B10);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  uint64_t v12 = v10 + 32;
  v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unsigned char **sub_100006E24(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

void *sub_100006E34(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  if (__src) {
    uint64_t v5 = a2 - (void)__src;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!__dst)
  {
    if (v5 <= 0) {
      return __src;
    }
LABEL_12:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v5) {
    goto LABEL_12;
  }
  if (__src)
  {
    return memmove(__dst, __src, a2 - (void)__src);
  }
  return __src;
}

uint64_t sub_100006ED8@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

__n128 sub_100006F08(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100006F18(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_100006F38(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for CKError(uint64_t a1)
{
}

uint64_t sub_100006F88()
{
  return sub_100007018((unint64_t *)&unk_100073A60, type metadata accessor for CKError);
}

uint64_t sub_100006FD0()
{
  return sub_100007018(&qword_100074230, type metadata accessor for CKError);
}

uint64_t sub_100007018(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100007060()
{
  return sub_100007018(&qword_100073A70, type metadata accessor for CKError);
}

uint64_t sub_1000070A8()
{
  return sub_100007018(&qword_100073A78, type metadata accessor for CKError);
}

uint64_t sub_1000070F0()
{
  return sub_100007018(&qword_100073A80, type metadata accessor for CKError);
}

uint64_t sub_100007138()
{
  return sub_100007018(&qword_100073A88, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_100007194()
{
  return sub_100007018(&qword_100073A90, type metadata accessor for Code);
}

unint64_t sub_1000071E0()
{
  unint64_t result = qword_100073A98;
  if (!qword_100073A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100073A98);
  }
  return result;
}

uint64_t sub_100007234()
{
  return sub_100007018(&qword_100073AA0, type metadata accessor for Code);
}

uint64_t sub_10000727C()
{
  return sub_100007018(&qword_100073AA8, type metadata accessor for CKError);
}

uint64_t _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_100007314(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100007370(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

void type metadata accessor for Identifier(uint64_t a1)
{
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

void type metadata accessor for CTFont(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for ParticipantAcceptanceStatus(uint64_t a1)
{
}

void type metadata accessor for Result(uint64_t a1)
{
}

void type metadata accessor for Scope(uint64_t a1)
{
}

void sub_100007458(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1000074A0()
{
  return sub_100007018(&qword_100073B60, type metadata accessor for Key);
}

uint64_t sub_1000074E8()
{
  return sub_100007018(&qword_100073B68, type metadata accessor for Key);
}

uint64_t sub_100007530()
{
  return sub_100007018(&qword_100073B70, type metadata accessor for Identifier);
}

uint64_t sub_100007578()
{
  return sub_100007018(&qword_100073B78, type metadata accessor for Identifier);
}

uint64_t sub_1000075C0()
{
  return sub_100007018(&qword_100073B80, type metadata accessor for Identifier);
}

uint64_t sub_100007608()
{
  return sub_100007018(&qword_100073B88, type metadata accessor for Key);
}

uint64_t initializeBufferWithCopyOfBuffer for AuthorizationStore(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for AuthorizationManager(uint64_t a1)
{
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(a1);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(a1 + 40);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(a1 + 80);

  return swift_release();
}

uint64_t initializeWithCopy for AuthorizationManager(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  long long v6 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 80, a2 + 80);
  uint64_t v7 = *(void *)(a2 + 128);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v7;
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for AuthorizationManager(uint64_t *a1, uint64_t *a2)
{
  sub_100007848(a1, a2);
  sub_100007848(a1 + 5, a2 + 5);
  sub_100007848(a1 + 10, a2 + 10);
  uint64_t v4 = a2[16];
  a1[15] = a2[15];
  a1[16] = v4;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *sub_100007848(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        size_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for AuthorizationManager(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for AuthorizationManager(uint64_t a1, uint64_t a2)
{
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(a1 + 80);
  long long v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthorizationManager(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 136)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthorizationManager(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 136) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthorizationManager()
{
  return &type metadata for AuthorizationManager;
}

uint64_t sub_100007BE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  *((void *)&v21 + 1) = sub_1000084B4;
  uint64_t v22 = 0;
  sub_10000BFC4(a1, (uint64_t)v18);
  sub_10000BFC4(a2, (uint64_t)v19 + 8);
  sub_10000BFC4((uint64_t)a3, (uint64_t)v20);
  id v8 = [self standardUserDefaults];
  NSString v9 = String._bridgeToObjectiveC()();
  unsigned __int8 v10 = [v8 BOOLForKey:v9];

  if ((v10 & 1) == 0)
  {
    if (sub_100007D7C())
    {
      size_t v11 = (void **)sub_10000BE0C(a3, a3[3]);
      sub_1000348C8(0, *v11);
    }
    NSString v12 = String._bridgeToObjectiveC()();
    [v8 setBool:1 forKey:v12];

    id v8 = v12;
  }

  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(a2);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(a1);
  long long v13 = v21;
  *(_OWORD *)(a4 + 96) = v20[1];
  *(_OWORD *)(a4 + 112) = v13;
  *(void *)(a4 + 128) = v22;
  long long v14 = v19[1];
  *(_OWORD *)(a4 + 32) = v19[0];
  *(_OWORD *)(a4 + 48) = v14;
  long long v15 = v20[0];
  *(_OWORD *)(a4 + 64) = v19[2];
  *(_OWORD *)(a4 + 80) = v15;
  long long v16 = v18[1];
  *(_OWORD *)a4 = v18[0];
  *(_OWORD *)(a4 + 16) = v16;
  return _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)a3);
}

uint64_t sub_100007D7C()
{
  uint64_t v1 = type metadata accessor for Logger();
  v62 = *(void **)(v1 - 8);
  __chkstk_darwin(v1, v2);
  long long v4 = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v60 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  id v8 = (char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AuthorizationRecord();
  uint64_t v61 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9, v10);
  long long v13 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  long long v16 = (char *)v53 - v15;
  v17 = sub_100008674();
  uint64_t v58 = v0;
  v56 = v8;
  uint64_t v55 = v5;
  uint64_t v57 = 0;
  v59 = v4;
  uint64_t v54 = v1;
  uint64_t v24 = v17[2];
  v63 = v13;
  if (v24)
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
    v26 = (char *)v17 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
    v27 = (void (**)(char *, uint64_t))(v61 + 8);
    uint64_t v28 = *(void *)(v61 + 72);
    v53[1] = v17;
    swift_bridgeObjectRetain();
    while (1)
    {
      v25(v16, v26, v9);
      AuthorizationRecord.type.getter();
      uint64_t v29 = FamilyControlsMember.rawValue.getter();
      uint64_t v30 = FamilyControlsMember.rawValue.getter();
      (*v27)(v16, v9);
      if (v29 == v30) {
        break;
      }
      v26 += v28;
      if (!--v24)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease_n();
    sub_10000BDD4(v58, (uint64_t)v64);
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
LABEL_12:
  sub_10000BDD4(v58, (uint64_t)v64);
  sub_10000BE0C(v65, v65[3]);
  v32 = v56;
  dispatch thunk of Locatable.familyControlsInternalAuthorization.getter();
  id v33 = [self defaultManager];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  URL.path.getter();
  NSString v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v35 = [v33 fileExistsAtPath:v34];

  uint64_t v36 = v57;
  if (!v35)
  {

    swift_release();
    v52 = &_swiftEmptyArrayStorage;
    goto LABEL_17;
  }
  uint64_t v37 = Data.init(contentsOf:options:)();
  v39 = v59;
  if (!v36)
  {
    uint64_t v40 = v37;
    unint64_t v41 = v38;
    sub_100007370(&qword_100073C10);
    sub_10000BE80();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    sub_10000BF6C(v40, v41);

    swift_release();
    v52 = (void *)v66;
LABEL_17:
    (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v55);
    uint64_t v43 = v52[2];
    if (!v43)
    {
      swift_bridgeObjectRelease();
LABEL_24:
      uint64_t v31 = 0;
      goto LABEL_27;
    }
    v44 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
    v45 = (char *)v52 + ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80));
    v46 = (void (**)(char *, uint64_t))(v61 + 8);
    uint64_t v47 = *(void *)(v61 + 72);
    v62 = v52;
    swift_bridgeObjectRetain();
    v48 = v63;
    while (1)
    {
      v44(v48, v45, v9);
      AuthorizationRecord.type.getter();
      uint64_t v49 = FamilyControlsMember.rawValue.getter();
      uint64_t v50 = FamilyControlsMember.rawValue.getter();
      (*v46)(v48, v9);
      if (v49 == v50) {
        break;
      }
      v45 += v47;
      if (!--v43)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_26:
    uint64_t v31 = 1;
LABEL_27:
    sub_10000BE50((uint64_t)v64);
    return v31;
  }

  swift_release();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v32, v55);
  sub_10000BE50((uint64_t)v64);
  uint64_t v42 = v54;
  v18 = v62;
  static Logger.authorization.getter();
  swift_errorRetain();
  swift_errorRetain();
  v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    long long v21 = (uint8_t *)swift_slowAlloc();
    v64[0] = swift_slowAlloc();
    v59 = v39;
    *(_DWORD *)long long v21 = 136446210;
    uint64_t v66 = v36;
    swift_errorRetain();
    sub_100007370(&qword_1000741C0);
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v66 = sub_1000067CC(v22, v23, v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to fetch child authorization status: %{public}s", v21, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    ((void (*)(char *, uint64_t))v18[1])(v59, v42);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    ((void (*)(char *, uint64_t))v18[1])(v39, v42);
  }
  return 0;
}

double sub_1000084B4@<D0>(void *a1@<X0>, void *a2@<X8>)
{
  long long v21 = a2;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  id v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)&v20 - v10;
  id v12 = a1;
  static Logger.agent.getter();
  int v13 = [v12 processIdentifier];
  [v12 auditToken];
  long long v14 = v22;
  long long v15 = v23[0];
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v11, v3);
  sub_10002A62C(v13, v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v12, (uint64_t)v8, (uint64_t)&v22);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
  long long v16 = v21;
  v21[3] = &type metadata for ClientIdentity;
  v16[4] = sub_10000C30C();
  v17 = (_OWORD *)swift_allocObject();
  *long long v16 = v17;
  long long v18 = v23[0];
  v17[1] = v22;
  v17[2] = v18;
  double result = *(double *)((char *)v23 + 9);
  *(_OWORD *)((char *)v17 + 41) = *(_OWORD *)((char *)v23 + 9);
  return result;
}

id sub_100008674()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v4 = *(void (**)(void, void))(v35 - 8);
  __chkstk_darwin(v35, v5);
  uint64_t v36 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  NSString v34 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  long long v14 = (char *)&v31 - v13;
  static Logger.authorization.getter();
  long long v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    id v33 = v4;
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Authorization records", v17, 2u);
    uint64_t v2 = v1;
    uint64_t v4 = v33;
    swift_slowDealloc();
  }

  id v33 = *(void (**)(void, void))(v8 + 8);
  v33(v14, v7);
  sub_10000BE0C((void *)(v3 + 40), *(void *)(v3 + 64));
  dispatch thunk of Locatable.familyControlsAuthorization.getter();
  id v18 = [self defaultManager];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  URL.path.getter();
  NSString v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v20 = [v18 fileExistsAtPath:v19];

  if (v20)
  {
    uint64_t v32 = v7;
    long long v21 = v36;
    uint64_t v22 = Data.init(contentsOf:options:)();
    if (v2)
    {

      swift_release();
      (*((void (**)(char *, uint64_t))v4 + 1))(v21, v35);
      return v18;
    }
    uint64_t v28 = v22;
    unint64_t v29 = v23;
    sub_100007370(&qword_100073C10);
    sub_10000BE80();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    sub_10000BF6C(v28, v29);

    swift_release();
    id v18 = v37;
    uint64_t v7 = v32;
  }
  else
  {

    swift_release();
    id v18 = &_swiftEmptyArrayStorage;
  }
  (*((void (**)(char *, uint64_t))v4 + 1))(v36, v35);
  uint64_t v24 = v34;
  static Logger.authorization.getter();
  v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Authorization records succeeded", v27, 2u);
    swift_slowDealloc();
  }

  v33(v24, v7);
  return v18;
}

BOOL sub_100008AC4()
{
  uint64_t v1 = type metadata accessor for Logger();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BE0C((void *)(v0 + 40), *(void *)(v0 + 64));
  dispatch thunk of Locatable.familyControlsInternalAuthorization.getter();
  id v9 = [self defaultManager];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  URL.path.getter();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v11 = [v9 fileExistsAtPath:v10];

  if (v11)
  {
    v18[1] = v2;
    _OWORD v18[2] = v1;
    uint64_t v12 = Data.init(contentsOf:options:)();
    unint64_t v14 = v13;
    sub_100007370(&qword_100073C10);
    sub_10000BE80();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    sub_10000BF6C(v12, v14);

    swift_release();
    v17 = (void *)v18[4];
  }
  else
  {

    swift_release();
    v17 = &_swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v15 = v17[2];
  swift_bridgeObjectRelease();
  return v15 != 0;
}

BOOL sub_100008EFC()
{
  uint64_t v40 = type metadata accessor for Logger();
  uint64_t v41 = *(void *)(v40 - 8);
  __chkstk_darwin(v40, v1);
  uint64_t v42 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AuthorizationStatus();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  unsigned int v11 = (char *)&v33 - v10;
  uint64_t v12 = type metadata accessor for AuthorizationRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  os_log_type_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v0;
  id v18 = sub_100008674();
  uint64_t v42 = v11;
  uint64_t v40 = (uint64_t)v8;
  uint64_t v41 = v12;
  uint64_t v19 = v18[2];
  if (v19)
  {
    uint64_t v34 = v0;
    uint64_t v20 = v13 + 16;
    v39 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    long long v21 = (char *)v18 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    unsigned int v38 = enum case for AuthorizationStatus.approved(_:);
    uint64_t v37 = (void (**)(uint64_t, void, uint64_t))(v4 + 104);
    uint64_t v22 = (void (**)(uint64_t, uint64_t))(v4 + 8);
    uint64_t v36 = (void (**)(char *, uint64_t))(v13 + 8);
    uint64_t v35 = *(void *)(v13 + 72);
    id v33 = v18;
    swift_bridgeObjectRetain();
    uint64_t v23 = v41;
    while (1)
    {
      uint64_t v24 = v20;
      v39(v16, v21, v23);
      AuthorizationRecord.status.getter();
      uint64_t v25 = v40;
      (*v37)(v40, v38, v3);
      sub_100015E4C(&qword_100073C28, (void (*)(uint64_t))&type metadata accessor for AuthorizationStatus);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v27 = v43;
      uint64_t v26 = v44[0];
      uint64_t v28 = *v22;
      uint64_t v29 = v25;
      uint64_t v30 = v42;
      (*v22)(v29, v3);
      v28((uint64_t)v30, v3);
      uint64_t v23 = v41;
      (*v36)(v16, v41);
      if (v26 == v27) {
        break;
      }
      v21 += v35;
      --v19;
      uint64_t v20 = v24;
      if (!v19)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v17 = v34;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease_n();
    sub_10000BDD4(v34, (uint64_t)v44);
    BOOL v31 = 1;
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_6:
    sub_10000BDD4(v17, (uint64_t)v44);
    BOOL v31 = sub_100008AC4();
  }
  sub_10000BE50((uint64_t)v44);
  return v31;
}

uint64_t sub_100009498(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6, void (*a7)(void *), uint64_t a8)
{
  v107 = a7;
  uint64_t v108 = a1;
  v93 = a5;
  unint64_t v94 = a6;
  uint64_t v102 = a3;
  uint64_t v103 = a4;
  v105 = a2;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v97 = *(void *)(v9 - 8);
  uint64_t v98 = v9;
  __chkstk_darwin(v9, v10);
  v99 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v95 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v104 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AuthorizationRecord();
  uint64_t v100 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)&v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  v101 = (char *)&v84 - v21;
  uint64_t v106 = type metadata accessor for AuthorizationStatus();
  uint64_t v22 = *(void *)(v106 - 8);
  uint64_t v24 = __chkstk_darwin(v106, v23);
  uint64_t v26 = (char *)&v84 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v24, v27);
  uint64_t v30 = (char *)&v84 - v29;
  __chkstk_darwin(v28, v31);
  v109 = (char *)&v84 - v32;
  uint64_t v33 = sub_100007370(&qword_100073DD0);
  uint64_t v35 = __chkstk_darwin(v33, v34);
  uint64_t v37 = (uint64_t (**)(char *, uint64_t))((char *)&v84 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v35, v38);
  uint64_t v40 = (uint64_t (**)(char *, uint64_t))((char *)&v84 - v39);
  sub_1000157B4(v108, (uint64_t)&v84 - v39);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *uint64_t v37 = *v40;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v107((char *)v37);
    swift_errorRelease();
    return sub_100015758((uint64_t)v37, &qword_100073DD0);
  }
  else
  {
    uint64_t v86 = v12;
    v87 = v19;
    v88 = v26;
    uint64_t v91 = v33;
    v92 = (char *)v37;
    uint64_t v108 = v15;
    uint64_t v89 = a8;
    uint64_t v42 = v109;
    uint64_t v43 = v40;
    v44 = v30;
    uint64_t v45 = v106;
    (*(void (**)(char *, void *, uint64_t))(v22 + 32))(v109, v43, v106);
    uint64_t v90 = AuthorizationRecord.bundleIdentifier.getter();
    AuthorizationRecord.teamIdentifier.getter();
    AuthorizationRecord.recordIdentifier.getter();
    uint64_t v96 = v22;
    v46 = *(void (**)(char *, char *, uint64_t))(v22 + 16);
    v46(v44, v42, v45);
    uint64_t v47 = (uint64_t)v101;
    uint64_t v48 = v102;
    AuthorizationRecord.init(bundleIdentifier:teamIdentifier:recordIdentifier:status:type:)();
    uint64_t v49 = v103;
    sub_10004527C(v47);
    uint64_t v50 = v47;
    v85 = v46;
    uint64_t v90 = v22 + 16;
    uint64_t v51 = v96;
    uint64_t v52 = v106;
    (*(void (**)(char *, void, uint64_t))(v96 + 104))(v44, enum case for AuthorizationStatus.approved(_:), v106);
    sub_100015E4C(&qword_100073C28, (void (*)(uint64_t))&type metadata accessor for AuthorizationStatus);
    v53 = v44;
    uint64_t v54 = v109;
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v56 = v110;
    uint64_t v55 = v111[0];
    uint64_t v58 = *(uint64_t (**)(char *, uint64_t))(v51 + 8);
    uint64_t v57 = v51 + 8;
    v84 = v58;
    v58(v53, v52);
    if (v55 == v56)
    {
      v59 = (void **)sub_10000BE0C((void *)(v49 + 80), *(void *)(v49 + 104));
      uint64_t v60 = AuthorizationRecord.bundleIdentifier.getter();
      sub_100034C7C(v48, v60, v61, v93, v94, *v59);
      swift_bridgeObjectRelease();
    }
    v62 = v99;
    static Logger.authorization.getter();
    uint64_t v63 = v100;
    v64 = v87;
    (*(void (**)(char *, NSObject *, uint64_t))(v100 + 16))(v87, v105, v108);
    v65 = v88;
    uint64_t v66 = v85;
    v85(v88, v54, v52);
    v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.default.getter();
    v105 = v67;
    LODWORD(v103) = v68;
    BOOL v69 = os_log_type_enabled(v67, v68);
    uint64_t v70 = v86;
    if (v69)
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v102 = swift_slowAlloc();
      v111[0] = v102;
      *(_DWORD *)uint64_t v71 = 136446466;
      uint64_t v96 = v57;
      uint64_t v72 = v52;
      v73 = v104;
      AuthorizationRecord.recordIdentifier.getter();
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v75 = v70;
      unint64_t v77 = v76;
      (*(void (**)(char *, uint64_t))(v95 + 8))(v73, v75);
      uint64_t v110 = sub_1000067CC(v74, v77, v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v78 = *(void (**)(char *, uint64_t))(v63 + 8);
      v78(v64, v108);
      *(_WORD *)(v71 + 12) = 2080;
      sub_100015E4C(&qword_100073C58, (void (*)(uint64_t))&type metadata accessor for AuthorizationStatus);
      uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v110 = sub_1000067CC(v79, v80, v111);
      uint64_t v52 = v72;
      uint64_t v54 = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v81 = v84;
      v84(v65, v52);
      v82 = v105;
      _os_log_impl((void *)&_mh_execute_header, v105, (os_log_type_t)v103, "Request authorization for record identifier: %{public}s status: %s", (uint8_t *)v71, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v66 = v85;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v97 + 8))(v99, v98);
    }
    else
    {
      v78 = *(void (**)(char *, uint64_t))(v63 + 8);
      v78(v64, v108);
      v81 = v84;
      v84(v65, v52);

      (*(void (**)(char *, uint64_t))(v97 + 8))(v62, v98);
    }
    uint64_t v83 = (uint64_t)v92;
    v66(v92, v54, v52);
    swift_storeEnumTagMultiPayload();
    v107((void *)v83);
    sub_100015758(v83, &qword_100073DD0);
    v78((char *)v50, v108);
    return v81(v54, v52);
  }
}

uint64_t sub_100009E70(uint64_t a1, uint8_t *a2, char *a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v63 = a6;
  v64 = a5;
  uint64_t v54 = a4;
  uint64_t v60 = a2;
  unint64_t v61 = a3;
  uint64_t v62 = a1;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v56 = *(void *)(v6 - 8);
  uint64_t v57 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AuthorizationStatus();
  uint64_t v58 = *(void *)(v10 - 8);
  uint64_t v59 = v10;
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  uint64_t v20 = type metadata accessor for AuthorizationRecord();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v25, v26);
  uint64_t v28 = (char **)((char *)&v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000157B4(v62, (uint64_t)v28);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v29 = *v28;
    swift_errorRetain();
    v64(v29, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v50 = v18;
    uint64_t v51 = v9;
    uint64_t v52 = v28;
    uint64_t v53 = v21;
    uint64_t v62 = v20;
    AuthorizationRecord.bundleIdentifier.getter();
    AuthorizationRecord.teamIdentifier.getter();
    AuthorizationRecord.recordIdentifier.getter();
    (*(void (**)(char *, void, uint64_t))(v58 + 104))(v13, enum case for AuthorizationStatus.notDetermined(_:), v59);
    AuthorizationRecord.type.getter();
    AuthorizationRecord.init(bundleIdentifier:teamIdentifier:recordIdentifier:status:type:)();
    uint64_t v31 = v61;
    sub_10004527C((uint64_t)v24);
    uint64_t v32 = (void **)sub_10000BE0C((void *)v31 + 10, *((void *)v31 + 13));
    uint64_t v33 = AuthorizationRecord.bundleIdentifier.getter();
    sub_100035ABC(v33, v34, *v32);
    swift_bridgeObjectRelease();
    if ((sub_100007D7C() & 1) == 0)
    {
      id v35 = objc_msgSend((id)*sub_10000BE0C((void *)v31 + 10, *((void *)v31 + 13)), "deviceActivity");
      [v35 setSharingAppleIDs:0];
    }
    uint64_t v36 = v51;
    static Logger.authorization.getter();
    uint64_t v37 = v55;
    uint64_t v38 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v50, v54, v14);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    BOOL v41 = os_log_type_enabled(v39, v40);
    uint64_t v42 = v64;
    uint64_t v43 = v56;
    if (v41)
    {
      v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      unint64_t v61 = v24;
      uint64_t v66 = v45;
      *(_DWORD *)v44 = 136446210;
      uint64_t v60 = v44 + 4;
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v65 = sub_1000067CC(v46, v47, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v14);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Reset authorization for record identifier: %{public}s not determined", v44, 0xCu);
      swift_arrayDestroy();
      uint64_t v24 = v61;
      swift_slowDealloc();
      uint64_t v42 = v64;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v43 + 8))(v51, v57);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v14);

      (*(void (**)(char *, uint64_t))(v43 + 8))(v36, v57);
    }
    uint64_t v48 = v62;
    uint64_t v49 = v53;
    v42(0, 0);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v24, v48);
    return sub_100015758((uint64_t)v52, &qword_100073DD0);
  }
}

uint64_t sub_10000A4D4(uint64_t a1, int a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  v156 = a3;
  uint64_t v157 = a4;
  int v139 = a2;
  uint64_t v134 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v134, v6);
  v141 = (uint64_t *)((char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for FamilyControlsAuthenticationUIService.ServiceType();
  uint64_t v144 = *(void *)(v8 - 8);
  uint64_t v145 = v8;
  __chkstk_darwin(v8, v9);
  v142 = (char *)&v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = type metadata accessor for UUID();
  uint64_t v151 = *(void *)(v148 - 8);
  uint64_t v11 = *(void *)(v151 + 64);
  uint64_t v13 = __chkstk_darwin(v148, v12);
  v143 = (uint8_t *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13, v14);
  v138 = (char *)&v124 - v16;
  uint64_t v18 = __chkstk_darwin(v15, v17);
  v132 = (char *)&v124 - v19;
  __chkstk_darwin(v18, v20);
  v136 = (char *)&v124 - v21;
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v146 = v22;
  uint64_t v147 = v23;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  v133 = (char *)&v124 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  v135 = (char *)&v124 - v29;
  __chkstk_darwin(v28, v30);
  v140 = (char *)&v124 - v31;
  uint64_t v32 = type metadata accessor for AuthorizationStatus();
  uint64_t v149 = *(void *)(v32 - 8);
  uint64_t v150 = v32;
  __chkstk_darwin(v32, v33);
  v152 = (void **)((char *)&v124 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = sub_100007370((uint64_t *)&unk_100074370);
  __chkstk_darwin(v35 - 8, v36);
  uint64_t v38 = (void (*)(unint64_t, char *, uint64_t))((char *)&v124 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v39 = type metadata accessor for AuthorizationRecord();
  uint64_t v154 = *(void *)(v39 - 8);
  uint64_t v155 = v39;
  uint64_t v40 = *(void *)(v154 + 64);
  uint64_t v42 = __chkstk_darwin(v39, v41);
  uint64_t v44 = __chkstk_darwin(v42, v43);
  uint64_t v46 = (char *)&v124 - v45;
  __chkstk_darwin(v44, v47);
  uint64_t v49 = (char *)&v124 - v48;
  uint64_t v137 = v4;
  v153 = v38;
  sub_1000461CC(a1, (uint64_t)v38);
  uint64_t v129 = v4 + 40;
  uint64_t v130 = a1;
  uint64_t v125 = v40;
  v126 = v46;
  uint64_t v127 = v11;
  v128 = (char *)&v124 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = v49;
  uint64_t v51 = v154;
  uint64_t v50 = v155;
  uint64_t v52 = v152;
  uint64_t v53 = (uint64_t)v153;
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v154 + 48))(v153, 1, v155) == 1)
  {
    sub_100015758(v53, (uint64_t *)&unk_100074370);
    uint64_t v54 = type metadata accessor for FamilyControlsError();
    sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v55 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v54 - 8) + 104))(v56, enum case for FamilyControlsError.invalidArgument(_:), v54);
    swift_willThrow();
    swift_errorRetain();
    v156(v55, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v51 + 32);
  uint64_t v58 = (uint64_t)v131;
  v57(v131, v53, v50);
  AuthorizationRecord.status.getter();
  int v59 = (*(uint64_t (**)(void **, uint64_t))(v149 + 88))(v52, v150);
  if (v59 == enum case for AuthorizationStatus.notDetermined(_:))
  {
    sub_100044F00(v58);
    uint64_t v60 = v130;
    unint64_t v61 = v140;
    static Logger.authorization.getter();
    uint64_t v62 = v151;
    uint64_t v63 = v136;
    uint64_t v64 = v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v151 + 16))(v136, v60, v148);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc();
      v153 = (void (*)(unint64_t, char *, uint64_t))swift_slowAlloc();
      *(void *)&v161[0] = v153;
      *(_DWORD *)v67 = 136446210;
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
      v160[0] = sub_1000067CC(v68, v69, (uint64_t *)v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Revoked authorization for record identifier: %{public}s already not determined", v67, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v58 = (uint64_t)v131;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v147 + 8))(v140, v146);
LABEL_23:
      v156(0, 0);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v154 + 8))(v58, v155);
    }
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
    goto LABEL_22;
  }
  uint64_t v70 = v130;
  if (v59 == enum case for AuthorizationStatus.denied(_:))
  {
    sub_100044F00(v58);
    unint64_t v61 = v135;
    static Logger.authorization.getter();
    uint64_t v117 = v151;
    v118 = v132;
    uint64_t v119 = v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v151 + 16))(v132, v70, v148);
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v120 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v65, v120))
    {
      v121 = (uint8_t *)swift_slowAlloc();
      *(void *)&v161[0] = swift_slowAlloc();
      *(_DWORD *)v121 = 136446210;
      v153 = (void (*)(unint64_t, char *, uint64_t))(v121 + 4);
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v122 = dispatch thunk of CustomStringConvertible.description.getter();
      v160[0] = sub_1000067CC(v122, v123, (uint64_t *)v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v119);
      _os_log_impl((void *)&_mh_execute_header, v65, v120, "Revoked authorization for record identifier: %{public}s already denied", v121, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v58 = (uint64_t)v131;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v147 + 8))(v135, v146);
      goto LABEL_23;
    }
    (*(void (**)(char *, uint64_t))(v117 + 8))(v118, v119);
LABEL_22:

    (*(void (**)(char *, uint64_t))(v147 + 8))(v61, v146);
    goto LABEL_23;
  }
  v153 = (void (*)(unint64_t, char *, uint64_t))v57;
  if (v59 != enum case for AuthorizationStatus.approved(_:)) {
    goto LABEL_25;
  }
  uint64_t v72 = v137;
  sub_10000BFC4(v137, (uint64_t)v163);
  v152 = (void **)sub_10000BE0C(v163, v163[3]);
  v73 = v131;
  v140 = (char *)AuthorizationRecord.type.getter();
  uint64_t v149 = AuthorizationRecord.bundleIdentifier.getter();
  uint64_t v150 = v74;
  sub_10000BDD4(v72, (uint64_t)v161);
  uint64_t v75 = v155;
  uint64_t v76 = v154 + 16;
  unint64_t v77 = *(void (**)(char *, char *, uint64_t))(v154 + 16);
  v78 = v126;
  v77(v126, v73, v155);
  uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(v151 + 16);
  unint64_t v80 = v138;
  uint64_t v81 = v148;
  v79(v138, v130, v148);
  sub_10000BDD4((uint64_t)v161, (uint64_t)v160);
  v77(v128, v78, v75);
  v82 = v80;
  v79((char *)v143, (uint64_t)v80, v81);
  unint64_t v83 = (*(unsigned __int8 *)(v76 + 64) + 152) & ~(unint64_t)*(unsigned __int8 *)(v76 + 64);
  uint64_t v84 = v151;
  unint64_t v85 = (v125 + *(unsigned __int8 *)(v151 + 80) + v83) & ~(unint64_t)*(unsigned __int8 *)(v151 + 80);
  unint64_t v86 = (v127 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v87 = swift_allocObject();
  long long v88 = v161[7];
  *(_OWORD *)(v87 + 112) = v161[6];
  *(_OWORD *)(v87 + 128) = v88;
  *(void *)(v87 + 144) = v162;
  long long v89 = v161[3];
  *(_OWORD *)(v87 + 48) = v161[2];
  *(_OWORD *)(v87 + 64) = v89;
  long long v90 = v161[5];
  *(_OWORD *)(v87 + 80) = v161[4];
  *(_OWORD *)(v87 + 96) = v90;
  long long v91 = v161[1];
  *(_OWORD *)(v87 + 16) = v161[0];
  *(_OWORD *)(v87 + 32) = v91;
  v153(v87 + v83, v78, v155);
  (*(void (**)(unint64_t, char *, uint64_t))(v84 + 32))(v87 + v85, v82, v81);
  v92 = (void *)(v87 + v86);
  uint64_t v93 = v157;
  void *v92 = v156;
  v92[1] = v93;
  unint64_t v94 = (unsigned int *)&enum case for FamilyControlsAuthenticationUIService.ServiceType.authenticationForDeletion(_:);
  uint64_t v95 = (char *)*v152;
  if ((v139 & 1) == 0) {
    unint64_t v94 = (unsigned int *)&enum case for FamilyControlsAuthenticationUIService.ServiceType.authenticationForRevoke(_:);
  }
  uint64_t v96 = (uint64_t)v142;
  (*(void (**)(char *, void, uint64_t))(v144 + 104))(v142, *v94, v145);
  char v159 = 0;
  uint64_t v97 = *(NSObject **)&v95[OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_syncQueue];
  uint64_t v98 = (void *)swift_allocObject();
  v98[2] = v95;
  v98[3] = sub_1000156F0;
  v98[4] = v87;
  v98[5] = &v159;
  uint64_t v99 = swift_allocObject();
  *(void *)(v99 + 16) = sub_100016110;
  *(void *)(v99 + 24) = v98;
  v158[4] = sub_10001610C;
  v158[5] = v99;
  v158[0] = _NSConcreteStackBlock;
  v158[1] = 1107296256;
  v158[2] = sub_10000BDAC;
  v158[3] = &unk_10006E080;
  uint64_t v100 = _Block_copy(v158);
  swift_retain_n();
  v95;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v97, v100);
  _Block_release(v100);
  LOBYTE(v97) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v97)
  {
    __break(1u);
LABEL_25:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v102 = v146;
  uint64_t v101 = v147;
  uint64_t v103 = v141;
  if (v159 == 1)
  {
    v104 = (char *)v96;
    sub_10001744C(v96, v149, v150);
    uint64_t v105 = v148;
    uint64_t v106 = v143;
    uint64_t v107 = (uint64_t)v128;
  }
  else
  {
    uint64_t v108 = v133;
    static Logger.authentication.getter();
    v109 = Logger.logObject.getter();
    os_log_type_t v110 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v109, v110))
    {
      v111 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v111 = 0;
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "Already prompting for authorization. Rejecting new request.", v111, 2u);
      uint64_t v103 = v141;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v101 + 8))(v108, v102);
    uint64_t v112 = type metadata accessor for FamilyControlsError();
    sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v113 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v112 - 8) + 104))(v114, enum case for FamilyControlsError.authorizationConflict(_:), v112);
    *uint64_t v103 = v113;
    swift_storeEnumTagMultiPayload();
    uint64_t v107 = (uint64_t)v128;
    uint64_t v106 = v143;
    sub_10000B4AC((uint64_t)v103, (uint64_t)v160, (uint64_t)v128, v143, v156, v157);
    sub_100015758((uint64_t)v103, &qword_100073DD0);
    uint64_t v105 = v148;
    v104 = v142;
  }
  swift_release();
  (*(void (**)(char *, uint64_t))(v144 + 8))(v104, v145);
  swift_release();
  sub_10000BE50((uint64_t)v160);
  uint64_t v115 = v155;
  v116 = *(void (**)(uint64_t, uint64_t))(v154 + 8);
  v116(v107, v155);
  (*(void (**)(uint8_t *, uint64_t))(v151 + 8))(v106, v105);
  swift_bridgeObjectRelease();
  swift_release();
  v116((uint64_t)v131, v115);
  return _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v163);
}

uint64_t sub_10000B4AC(uint64_t a1, uint64_t a2, uint64_t a3, uint8_t *a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v48 = a4;
  uint64_t v50 = a3;
  uint64_t v51 = a2;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v49 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v18, v19);
  uint64_t v21 = (uint64_t *)((char *)&v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000157B4(a1, (uint64_t)v21);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = *v21;
    swift_errorRetain();
    a5(v22, 1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v45 = v14;
    uint64_t v46 = v21;
    uint64_t v43 = v12;
    uint64_t v44 = v17;
    uint64_t v47 = a6;
    uint64_t v24 = v51;
    sub_100044F00(v50);
    uint64_t v42 = a5;
    uint64_t v25 = (void **)sub_10000BE0C((void *)(v24 + 80), *(void *)(v24 + 104));
    uint64_t v26 = AuthorizationRecord.bundleIdentifier.getter();
    sub_100035ABC(v26, v27, *v25);
    swift_bridgeObjectRelease();
    if ((sub_100007D7C() & 1) == 0)
    {
      id v28 = objc_msgSend((id)*sub_10000BE0C((void *)(v24 + 80), *(void *)(v24 + 104)), "deviceActivity");
      [v28 setSharingAppleIDs:0];
    }
    uint64_t v29 = v44;
    static Logger.authorization.getter();
    uint64_t v30 = v49;
    uint64_t v31 = v43;
    uint64_t v32 = v9;
    (*(void (**)(char *, uint8_t *, uint64_t))(v49 + 16))(v43, v48, v9);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    BOOL v35 = os_log_type_enabled(v33, v34);
    uint64_t v36 = v13;
    uint64_t v37 = v45;
    if (v35)
    {
      uint64_t v51 = v36;
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      uint64_t v53 = v50;
      *(_DWORD *)uint64_t v38 = 136446210;
      uint64_t v48 = v38 + 4;
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v52 = sub_1000067CC(v39, v40, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Revoked authorization for record identifier: %{public}s not determined", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v51);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v32);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v36);
    }
    v42(0, 0);
    return sub_100015758((uint64_t)v46, &qword_100073DD0);
  }
}

uint64_t sub_10000B970(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  uint64_t v35 = a1;
  uint64_t v5 = sub_100007370((uint64_t *)&unk_100074370);
  __chkstk_darwin(v5 - 8, v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AuthorizationRecord();
  uint64_t v34 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  uint64_t v33 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.authorization.getter();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v32 = v8;
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Revoking authorization", v19, 2u);
    uint64_t v3 = v2;
    uint64_t v8 = v32;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  uint64_t result = sub_1000461CC(v35, (uint64_t)v8);
  if (!v3)
  {
    uint64_t v21 = v4;
    uint64_t v22 = v34;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v8, 1, v9) == 1)
    {
      sub_100015758((uint64_t)v8, (uint64_t *)&unk_100074370);
      uint64_t v23 = type metadata accessor for FamilyControlsError();
      sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 104))(v24, enum case for FamilyControlsError.invalidArgument(_:), v23);
      return swift_willThrow();
    }
    else
    {
      uint64_t v25 = (uint64_t)v33;
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v33, v8, v9);
      sub_100044F00(v25);
      uint64_t v26 = v9;
      uint64_t v27 = (void **)sub_10000BE0C((void *)(v21 + 80), *(void *)(v21 + 104));
      uint64_t v28 = AuthorizationRecord.bundleIdentifier.getter();
      sub_100035ABC(v28, v29, *v27);
      swift_bridgeObjectRelease();
      if ((sub_100007D7C() & 1) == 0)
      {
        id v30 = objc_msgSend((id)*sub_10000BE0C((void *)(v21 + 80), *(void *)(v21 + 104)), "deviceActivity");
        [v30 setSharingAppleIDs:0];
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(v25, v26);
    }
  }
  return result;
}

uint64_t sub_10000BD84(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_10000BDAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10000BDD4(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *sub_10000BE0C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_10000BE50(uint64_t a1)
{
  return a1;
}

unint64_t sub_10000BE80()
{
  unint64_t result = qword_100073C18;
  if (!qword_100073C18)
  {
    sub_10000BF24(&qword_100073C10);
    sub_100015E4C(&qword_100073C20, (void (*)(uint64_t))&type metadata accessor for AuthorizationRecord);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100073C18);
  }
  return result;
}

uint64_t sub_10000BF24(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000BF6C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10000BFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_10000C028(uint64_t a1, void *a2)
{
  NSObject._rawHashValue(seed:)(a2[5]);
  unint64_t result = _HashTable.nextHole(atOrAfter:)();
  *(void *)((char *)a2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 56) |= 1 << result;
  *(void *)(a2[6] + 8 * result) = a1;
  ++a2[2];
  return result;
}

uint64_t sub_10000C0AC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release();
    return (uint64_t)v9;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  sub_100007370(&qword_100073C48);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v9 = (void *)result;
  uint64_t v29 = a1;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    uint64_t v15 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_39;
    }
    if (v15 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v15];
    ++v11;
    if (!v16)
    {
      uint64_t v11 = v15 + 1;
      if (v15 + 1 >= a2) {
        goto LABEL_36;
      }
      unint64_t v16 = v29[v11];
      if (!v16)
      {
        uint64_t v11 = v15 + 2;
        if (v15 + 2 >= a2) {
          goto LABEL_36;
        }
        unint64_t v16 = v29[v11];
        if (!v16) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    Swift::Int v18 = v9[5];
    id v19 = *(id *)(*(void *)(v4 + 48) + 8 * v14);
    uint64_t result = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1 << *((unsigned char *)v9 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6))) != 0)
    {
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v12 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v12 + 8 * v22);
      }
      while (v27 == -1);
      unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(void *)(v12 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    *(void *)(v9[6] + 8 * v23) = v19;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5) {
      goto LABEL_36;
    }
  }
  uint64_t v17 = v15 + 3;
  if (v17 >= a2) {
    goto LABEL_36;
  }
  unint64_t v16 = v29[v17];
  if (v16)
  {
    uint64_t v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v11 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v11 >= a2) {
      goto LABEL_36;
    }
    unint64_t v16 = v29[v11];
    ++v17;
    if (v16) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_10000C30C()
{
  unint64_t result = qword_100073C30;
  if (!qword_100073C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100073C30);
  }
  return result;
}

uint64_t sub_10000C360()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 57, 7);
}

uint64_t sub_10000C3A0(NSObject *a1, uint64_t a2, uint8_t *a3, uint8_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v175 = a5;
  v185 = a3;
  v186 = a4;
  os_log_t v189 = a1;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v169 = *(void *)(v12 - 8);
  uint64_t v170 = v12;
  __chkstk_darwin(v12, v13);
  v168 = (char *)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v181, v15);
  v182 = (uint64_t *)((char *)&v162 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for FamilyControlsAuthenticationUIService.ServiceType();
  uint64_t v172 = *(void *)(v17 - 8);
  uint64_t v173 = v17;
  __chkstk_darwin(v17, v18);
  v178 = (char *)&v162 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = type metadata accessor for AuthorizationRecord();
  uint64_t v190 = *(void *)(v192 - 8);
  uint64_t v20 = *(void *)(v190 + 64);
  uint64_t v22 = __chkstk_darwin(v192, v21);
  v184 = (uint8_t *)&v162 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22, v23);
  v174 = (char *)&v162 - v25;
  uint64_t v27 = __chkstk_darwin(v24, v26);
  v164 = (char *)&v162 - v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v171 = (uint64_t)&v162 - v31;
  __chkstk_darwin(v30, v32);
  v166 = (char *)&v162 - v33;
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v179 = v34;
  uint64_t v180 = v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  v165 = (char *)&v162 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v37, v39);
  v163 = (char *)&v162 - v41;
  uint64_t v43 = __chkstk_darwin(v40, v42);
  v167 = (char *)&v162 - v44;
  __chkstk_darwin(v43, v45);
  uint64_t v47 = (char *)&v162 - v46;
  uint64_t v48 = type metadata accessor for AuthorizationStatus();
  uint64_t v49 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v50);
  uint64_t v52 = (char *)&v162 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)v53 + 2) = a6;
  *((void *)v53 + 3) = a7;
  v183 = (void (*)(id, uint64_t))a7;
  v191 = v53;
  *((void *)v53 + 4) = a8;
  uint64_t v188 = a6;
  swift_retain_n();
  uint64_t v187 = a8;
  swift_retain_n();
  AuthorizationRecord.status.getter();
  uint64_t v176 = v49;
  v177 = (void **)v48;
  uint64_t v54 = (*(uint64_t (**)(char *, uint64_t))(v49 + 88))(v52, v48);
  if (v54 == enum case for AuthorizationStatus.notDetermined(_:))
  {
    uint64_t v55 = v175;
    uint64_t v56 = (void **)sub_10000BE0C((void *)(v175 + 80), *(void *)(v175 + 104));
    AuthorizationRecord.bundleIdentifier.getter();
    uint64_t v57 = *v56;
    uint64_t v58 = FamilyControlsMember.rawValue.getter();
    uint64_t v59 = a2;
    if (v58 == FamilyControlsMember.rawValue.getter())
    {
      id v60 = [v57 allowedClient];
      id v61 = [v60 allowedClient];

      id v62 = objc_allocWithZone((Class)MOApplication);
      swift_bridgeObjectRetain();
      NSString v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v64 = [v62 initWithBundleIdentifier:v63];

      if (v61)
      {
        sub_100015694();
        id v65 = v64;
        id v66 = v61;
        char v67 = static NSObject.== infix(_:_:)();
        swift_bridgeObjectRelease();

        if ((v67 & 1) == 0)
        {
          uint64_t v68 = v163;
          static Logger.authorization.getter();
          uint64_t v69 = v190;
          uint64_t v70 = v164;
          uint64_t v71 = v192;
          (*(void (**)(char *, uint64_t, uint64_t))(v190 + 16))(v164, v59, v192);
          uint64_t v72 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v72, v73))
          {
            uint64_t v74 = (uint8_t *)swift_slowAlloc();
            os_log_t v189 = (os_log_t)swift_slowAlloc();
            *(void *)&v196[0] = v189;
            *(_DWORD *)uint64_t v74 = 136446210;
            v185 = v74 + 4;
            v186 = v74;
            uint64_t v75 = v168;
            AuthorizationRecord.recordIdentifier.getter();
            sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v76 = v170;
            uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v79 = v78;
            (*(void (**)(char *, uint64_t))(v169 + 8))(v75, v76);
            v195[0] = sub_1000067CC(v77, v79, (uint64_t *)v196);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v69 + 8))(v164, v192);
            _os_log_impl((void *)&_mh_execute_header, v72, v73, "Unable to request authorization for record identifier %{public}s because a different app already enrolled a child", v186, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
          }

          (*(void (**)(char *, uint64_t))(v180 + 8))(v68, v179);
          uint64_t v158 = type metadata accessor for FamilyControlsError();
          sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
          uint64_t v159 = swift_allocError();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v158 - 8) + 104))(v160, enum case for FamilyControlsError.authorizationConflict(_:), v158);
          uint64_t v111 = (uint64_t)v182;
          uint64_t *v182 = v159;
          swift_storeEnumTagMultiPayload();
          uint64_t v112 = v111;
          uint64_t v110 = v188;
LABEL_28:
          uint64_t v114 = v110;
          uint64_t v115 = v183;
LABEL_29:
          sub_10002E640(v112, v114, v115);
          sub_100015758(v111, &qword_100073DD0);
          swift_release();
          swift_release();
          return swift_release();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v116 = v55;
    sub_10000BFC4(v55, (uint64_t)v198);
    v177 = (void **)sub_10000BE0C(v198, v198[3]);
    uint64_t v171 = AuthorizationRecord.bundleIdentifier.getter();
    uint64_t v176 = v117;
    uint64_t v118 = v190;
    uint64_t v119 = *(void (**)(char *, uint64_t, uint64_t))(v190 + 16);
    os_log_type_t v120 = v174;
    uint64_t v121 = v192;
    v119(v174, v59, v192);
    sub_10000BDD4(v116, (uint64_t)v196);
    v119((char *)v184, (uint64_t)v120, v121);
    sub_10000BDD4((uint64_t)v196, (uint64_t)v195);
    unint64_t v122 = (*(unsigned __int8 *)(v118 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
    unint64_t v123 = (v20 + v122 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v124 = (v123 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v125 = (v124 + 143) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v126 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v118 + 32))(v126 + v122, v120, v121);
    *(void *)(v126 + v123) = v189;
    unint64_t v127 = v126 + v124;
    long long v128 = v196[3];
    *(_OWORD *)(v127 + 32) = v196[2];
    *(_OWORD *)(v127 + 48) = v128;
    long long v129 = v196[1];
    *(_OWORD *)unint64_t v127 = v196[0];
    *(_OWORD *)(v127 + 16) = v129;
    *(void *)(v127 + 128) = v197;
    long long v130 = v196[7];
    *(_OWORD *)(v127 + 96) = v196[6];
    *(_OWORD *)(v127 + 112) = v130;
    long long v131 = v196[5];
    *(_OWORD *)(v127 + 64) = v196[4];
    *(_OWORD *)(v127 + 80) = v131;
    v132 = (uint8_t **)(v126 + v125);
    uint64_t v134 = (uint64_t)v185;
    v133 = v186;
    char *v132 = v185;
    v132[1] = v133;
    v135 = (uint64_t (**)(uint64_t))(v126 + ((v125 + 23) & 0xFFFFFFFFFFFFFFF8));
    v136 = v191;
    char *v135 = sub_100015ED8;
    v135[1] = v136;
    uint64_t v137 = (char *)*v177;
    sub_100015DDC(v134, (unint64_t)v133);
    swift_retain();
    sub_100015DDC(v134, (unint64_t)v133);
    swift_retain();
    uint64_t v138 = (uint64_t)v178;
    FamilyControlsAuthenticationUIService.ServiceType.init(member:)();
    char v194 = 0;
    int v139 = *(NSObject **)&v137[OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_syncQueue];
    v140 = (void *)swift_allocObject();
    v140[2] = v137;
    v140[3] = sub_100015DD8;
    v140[4] = v126;
    v140[5] = &v194;
    uint64_t v141 = swift_allocObject();
    *(void *)(v141 + 16) = sub_100016110;
    *(void *)(v141 + 24) = v140;
    v193[4] = sub_10001610C;
    v193[5] = v141;
    v193[0] = _NSConcreteStackBlock;
    v193[1] = 1107296256;
    v193[2] = sub_10000BDAC;
    v193[3] = &unk_10006E3A0;
    v142 = _Block_copy(v193);
    v137;
    v177 = (void **)v126;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v139, v142);
    _Block_release(v142);
    LOBYTE(v139) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v139 & 1) == 0)
    {
      if (v194 == 1)
      {
        v143 = (char *)v138;
        sub_10001744C(v138, v171, v176);
        uint64_t v145 = v185;
        uint64_t v144 = v186;
        uint64_t v146 = v184;
      }
      else
      {
        uint64_t v147 = v165;
        static Logger.authentication.getter();
        uint64_t v148 = Logger.logObject.getter();
        os_log_type_t v149 = static os_log_type_t.error.getter();
        BOOL v150 = os_log_type_enabled(v148, v149);
        uint64_t v151 = v187;
        uint64_t v146 = v184;
        uint64_t v145 = v185;
        if (v150)
        {
          v152 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v152 = 0;
          _os_log_impl((void *)&_mh_execute_header, v148, v149, "Already prompting for authorization. Rejecting new request.", v152, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v180 + 8))(v147, v179);
        uint64_t v153 = type metadata accessor for FamilyControlsError();
        sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
        uint64_t v154 = swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v153 - 8) + 104))(v155, enum case for FamilyControlsError.authorizationConflict(_:), v153);
        uint64_t v156 = (uint64_t)v182;
        uint64_t *v182 = v154;
        swift_storeEnumTagMultiPayload();
        uint64_t v157 = v188;
        swift_retain();
        swift_retain();
        uint64_t v144 = v186;
        sub_10000DC2C(v156, v146, (uint64_t)v189, (uint64_t)v195, v145, (unint64_t)v186, v157, (uint64_t)v183, v151, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_10002E640);
        swift_release();
        swift_release();
        sub_100015758(v156, &qword_100073DD0);
        v143 = v178;
      }
      swift_release();
      (*(void (**)(char *, uint64_t))(v172 + 8))(v143, v173);
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(NSObject *, uint64_t))(v190 + 8))(v146, v192);
      sub_10000BE50((uint64_t)v195);
      sub_10000BF6C((uint64_t)v145, (unint64_t)v144);
      swift_release();
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v198);
      swift_release();
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  else
  {
    uint64_t v80 = v54;
    if (v54 == enum case for AuthorizationStatus.denied(_:))
    {
      static Logger.authorization.getter();
      uint64_t v81 = v190;
      v82 = v166;
      uint64_t v83 = a2;
      uint64_t v84 = v192;
      (*(void (**)(char *, uint64_t, uint64_t))(v190 + 16))(v166, v83, v192);
      unint64_t v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.default.getter();
      int v87 = v86;
      if (os_log_type_enabled(v85, v86))
      {
        os_log_t v189 = v85;
        uint64_t v88 = swift_slowAlloc();
        LODWORD(v185) = v87;
        long long v89 = (uint8_t *)v88;
        v186 = (uint8_t *)swift_slowAlloc();
        *(void *)&v196[0] = v186;
        v184 = v89;
        *(_DWORD *)long long v89 = 136446210;
        v178 = (char *)(v89 + 4);
        long long v90 = v168;
        AuthorizationRecord.recordIdentifier.getter();
        sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v91 = v170;
        uint64_t v92 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v94 = v93;
        (*(void (**)(char *, uint64_t))(v169 + 8))(v90, v91);
        v195[0] = sub_1000067CC(v92, v94, (uint64_t *)v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v192);
        unint64_t v85 = v189;
        _os_log_impl((void *)&_mh_execute_header, v189, (os_log_type_t)v185, "Requested authorization for record identifier: %{public}s already denied", v184, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v84);
      }

      (*(void (**)(char *, uint64_t))(v180 + 8))(v47, v179);
      uint64_t v110 = v188;
      uint64_t v111 = (uint64_t)v182;
      (*(void (**)(uint64_t *, uint64_t, void **))(v176 + 104))(v182, v80, v177);
      swift_storeEnumTagMultiPayload();
      uint64_t v112 = v111;
      goto LABEL_28;
    }
    uint64_t v95 = v190;
    if (v54 == enum case for AuthorizationStatus.approved(_:))
    {
      uint64_t v96 = v167;
      static Logger.authorization.getter();
      uint64_t v97 = v171;
      uint64_t v98 = a2;
      uint64_t v99 = v192;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v171, v98, v192);
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.default.getter();
      int v102 = v101;
      if (os_log_type_enabled(v100, v101))
      {
        os_log_t v189 = v100;
        uint64_t v103 = swift_slowAlloc();
        LODWORD(v185) = v102;
        v104 = (uint8_t *)v103;
        v186 = (uint8_t *)swift_slowAlloc();
        *(void *)&v196[0] = v186;
        v184 = v104;
        *(_DWORD *)v104 = 136446210;
        v178 = (char *)(v104 + 4);
        uint64_t v105 = v168;
        AuthorizationRecord.recordIdentifier.getter();
        sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v106 = v170;
        uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v109 = v108;
        (*(void (**)(char *, uint64_t))(v169 + 8))(v105, v106);
        v195[0] = sub_1000067CC(v107, v109, (uint64_t *)v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v171, v99);
        uint64_t v100 = v189;
        _os_log_impl((void *)&_mh_execute_header, v189, (os_log_type_t)v185, "Requested authorization for record identifier: %{public}s already approved", v184, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v97, v99);
      }

      (*(void (**)(char *, uint64_t))(v180 + 8))(v96, v179);
      uint64_t v113 = v188;
      uint64_t v111 = (uint64_t)v182;
      (*(void (**)(uint64_t *, uint64_t, void **))(v176 + 104))(v182, v80, v177);
      swift_storeEnumTagMultiPayload();
      uint64_t v112 = v111;
      uint64_t v114 = v113;
      uint64_t v115 = v183;
      goto LABEL_29;
    }
  }
  swift_release_n();
  swift_release_n();
  swift_release();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10000D718(NSObject *a1, void *a2, uint8_t *a3, uint8_t *a4, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t), uint64_t a8)
{
  void (*v27)(void *__return_ptr);
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(id, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  uint8_t *v50;
  uint8_t *v51;
  uint64_t v52;
  void (*v53)(id, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void v56[3];
  uint64_t v57;

  uint64_t v53 = a7;
  uint64_t v50 = a3;
  uint64_t v51 = a4;
  uint64_t v49 = a1;
  uint64_t v52 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v52, v12);
  uint64_t v14 = (uint64_t *)((char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = type metadata accessor for AuthorizationRecord();
  uint64_t v47 = *(void *)(v15 - 8);
  uint64_t v48 = v15;
  __chkstk_darwin(v15, v16);
  uint64_t v18 = (char *)&v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Logger();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a6;
  swift_retain();
  uint64_t v54 = a8;
  swift_retain();
  static Logger.authorization.getter();
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Request authorization", v26, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  if (!a2)
  {
    uint64_t v39 = type metadata accessor for FamilyControlsError();
    sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v37 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104))(v40, enum case for FamilyControlsError.invalidArgument(_:), v39);
    swift_willThrow();
    goto LABEL_9;
  }
  uint64_t v27 = *(void (**)(void *__return_ptr))(a5 + 120);
  uint64_t v28 = a2;
  v27(v56);
  uint64_t v29 = sub_10000BE0C(v56, v57);
  uint64_t v30 = v29[2];
  if (!v30 || (uint64_t v31 = v29[1], v32 = sub_10000BE0C(v56, v57), (v33 = v32[4]) == 0))
  {
    uint64_t v36 = type metadata accessor for FamilyControlsError();
    sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v37 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, enum case for FamilyControlsError.invalidArgument(_:), v36);
    swift_willThrow();

    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v56);
LABEL_9:
    uint64_t v41 = v55;
    uint64_t v42 = v53;
    *uint64_t v14 = v37;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    sub_10002E640((uint64_t)v14, v41, v42);
    swift_errorRelease();
    sub_100015758((uint64_t)v14, &qword_100073DD0);
    goto LABEL_10;
  }
  uint64_t v34 = v32[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100045A38(v31, v30, v34, v33, (uint64_t)v18);
  uint64_t v35 = (uint64_t)v53;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v56);
  uint64_t v44 = v55;
  swift_retain();
  uint64_t v45 = v54;
  swift_retain();
  sub_10000C3A0(v49, (uint64_t)v18, v50, v51, a5, v44, v35, v45);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v18, v48);
LABEL_10:
  swift_release();
  return swift_release();
}

uint64_t sub_10000DC2C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, void *a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(void *, uint64_t, uint64_t, uint64_t))
{
  uint64_t v110 = a2;
  uint64_t v111 = a7;
  uint64_t v97 = a5;
  unint64_t v98 = a6;
  uint64_t v106 = a3;
  uint64_t v107 = a4;
  uint64_t v112 = a10;
  uint64_t v113 = a9;
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v100 = *(void *)(v12 - 8);
  uint64_t v101 = v12;
  __chkstk_darwin(v12, v13);
  int v102 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v99 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  unint64_t v108 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AuthorizationRecord();
  uint64_t v104 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18, v19);
  uint64_t v22 = (char *)&v89 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  uint64_t v105 = (char *)&v89 - v24;
  uint64_t v25 = type metadata accessor for AuthorizationStatus();
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v30 = (char *)&v89 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v28, v31);
  unint64_t v109 = (char *)&v89 - v33;
  __chkstk_darwin(v32, v34);
  uint64_t v114 = (char *)&v89 - v35;
  uint64_t v36 = sub_100007370(&qword_100073DD0);
  uint64_t v38 = __chkstk_darwin(v36, v37);
  uint64_t v40 = (char *)&v89 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v38, v41);
  uint64_t v43 = (void (**)(char *, char *, uint64_t))((char *)&v89 - v42);
  uint64_t v44 = a1;
  uint64_t v46 = v45;
  sub_1000157B4(v44, (uint64_t)&v89 - v42);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(void *)uint64_t v40 = *v43;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    v112(v40, v111, a8, v113);
    swift_errorRelease();
    return sub_100015758((uint64_t)v40, &qword_100073DD0);
  }
  else
  {
    uint64_t v90 = v15;
    uint64_t v91 = v22;
    uint64_t v92 = v30;
    uint64_t v93 = v46;
    unint64_t v94 = v40;
    uint64_t v103 = v18;
    uint64_t v95 = a8;
    uint64_t v48 = v26;
    uint64_t v49 = v114;
    (*(void (**)(char *, void *, uint64_t))(v26 + 32))(v114, v43, v25);
    AuthorizationRecord.bundleIdentifier.getter();
    uint64_t v96 = v50;
    AuthorizationRecord.teamIdentifier.getter();
    AuthorizationRecord.recordIdentifier.getter();
    uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v26 + 16);
    v51(v109, v49, v25);
    uint64_t v52 = (uint64_t)v105;
    uint64_t v53 = v106;
    AuthorizationRecord.init(bundleIdentifier:teamIdentifier:recordIdentifier:status:type:)();
    uint64_t v54 = v107;
    sub_10004527C(v52);
    uint64_t v55 = v52;
    long long v89 = v51;
    uint64_t v96 = v48 + 16;
    uint64_t v56 = v109;
    (*(void (**)(char *, void, uint64_t))(v48 + 104))(v109, enum case for AuthorizationStatus.approved(_:), v25);
    sub_100015E4C(&qword_100073C28, (void (*)(uint64_t))&type metadata accessor for AuthorizationStatus);
    uint64_t v57 = v114;
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v59 = v115;
    uint64_t v58 = v116[0];
    id v61 = *(char **)(v48 + 8);
    id v60 = (char *)(v48 + 8);
    unint64_t v109 = v61;
    ((void (*)(char *, uint64_t))v61)(v56, v25);
    if (v58 == v59)
    {
      id v62 = (void **)sub_10000BE0C((void *)(v54 + 80), *(void *)(v54 + 104));
      uint64_t v63 = AuthorizationRecord.bundleIdentifier.getter();
      sub_100034C7C(v53, v63, v64, v97, v98, *v62);
      swift_bridgeObjectRelease();
    }
    id v65 = v102;
    static Logger.authorization.getter();
    uint64_t v66 = v104;
    char v67 = v91;
    (*(void (**)(char *, NSObject *, uint64_t))(v104 + 16))(v91, v110, v103);
    uint64_t v68 = v92;
    uint64_t v69 = v89;
    v89(v92, v57, v25);
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.default.getter();
    uint64_t v110 = v70;
    LODWORD(v107) = v71;
    BOOL v72 = os_log_type_enabled(v70, v71);
    uint64_t v73 = v90;
    if (v72)
    {
      uint64_t v74 = swift_slowAlloc();
      uint64_t v106 = swift_slowAlloc();
      v116[0] = v106;
      *(_DWORD *)uint64_t v74 = 136446466;
      uint64_t v75 = v108;
      AuthorizationRecord.recordIdentifier.getter();
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v77 = v73;
      unint64_t v79 = v78;
      (*(void (**)(char *, uint64_t))(v99 + 8))(v75, v77);
      uint64_t v115 = sub_1000067CC(v76, v79, v116);
      unint64_t v108 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v104 = *(void *)(v66 + 8);
      ((void (*)(char *, uint64_t))v104)(v67, v103);
      *(_WORD *)(v74 + 12) = 2080;
      sub_100015E4C(&qword_100073C58, (void (*)(uint64_t))&type metadata accessor for AuthorizationStatus);
      uint64_t v80 = v92;
      uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v115 = sub_1000067CC(v81, v82, v116);
      uint64_t v69 = v89;
      uint64_t v57 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v83 = v80;
      uint64_t v84 = v109;
      ((void (*)(char *, uint64_t))v109)(v83, v25);
      unint64_t v85 = v110;
      _os_log_impl((void *)&_mh_execute_header, v110, (os_log_type_t)v107, "Request authorization for record identifier: %{public}s status: %s", (uint8_t *)v74, 0x16u);
      swift_arrayDestroy();
      os_log_type_t v86 = (void (*)(char *, uint64_t))v104;
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v100 + 8))(v102, v101);
    }
    else
    {
      os_log_type_t v86 = *(void (**)(char *, uint64_t))(v66 + 8);
      v86(v67, v103);
      uint64_t v84 = v109;
      ((void (*)(char *, uint64_t))v109)(v68, v25);

      (*(void (**)(char *, uint64_t))(v100 + 8))(v65, v101);
    }
    uint64_t v87 = v113;
    uint64_t v88 = (uint64_t)v94;
    v69(v94, v57, v25);
    swift_storeEnumTagMultiPayload();
    v112((void *)v88, v111, v95, v87);
    sub_100015758(v88, &qword_100073DD0);
    v86((char *)v55, v103);
    return ((uint64_t (*)(char *, uint64_t))v84)(v57, v25);
  }
}

uint64_t sub_10000E610(NSObject *a1, uint64_t a2, uint8_t *a3, uint8_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v175 = a5;
  v185 = a3;
  v186 = a4;
  os_log_t v189 = a1;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v169 = *(void *)(v12 - 8);
  uint64_t v170 = v12;
  __chkstk_darwin(v12, v13);
  v168 = (char *)&v162 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v181 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v181, v15);
  v182 = (uint64_t *)((char *)&v162 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v17 = type metadata accessor for FamilyControlsAuthenticationUIService.ServiceType();
  uint64_t v172 = *(void *)(v17 - 8);
  uint64_t v173 = v17;
  __chkstk_darwin(v17, v18);
  v178 = (char *)&v162 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v192 = type metadata accessor for AuthorizationRecord();
  uint64_t v190 = *(void *)(v192 - 8);
  uint64_t v20 = *(void *)(v190 + 64);
  uint64_t v22 = __chkstk_darwin(v192, v21);
  v184 = (uint8_t *)&v162 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22, v23);
  v174 = (char *)&v162 - v25;
  uint64_t v27 = __chkstk_darwin(v24, v26);
  v164 = (char *)&v162 - v28;
  uint64_t v30 = __chkstk_darwin(v27, v29);
  uint64_t v171 = (uint64_t)&v162 - v31;
  __chkstk_darwin(v30, v32);
  v166 = (char *)&v162 - v33;
  uint64_t v34 = type metadata accessor for Logger();
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v179 = v34;
  uint64_t v180 = v35;
  uint64_t v37 = __chkstk_darwin(v34, v36);
  v165 = (char *)&v162 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = __chkstk_darwin(v37, v39);
  v163 = (char *)&v162 - v41;
  uint64_t v43 = __chkstk_darwin(v40, v42);
  v167 = (char *)&v162 - v44;
  __chkstk_darwin(v43, v45);
  uint64_t v47 = (char *)&v162 - v46;
  uint64_t v48 = type metadata accessor for AuthorizationStatus();
  uint64_t v49 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v50);
  uint64_t v52 = (char *)&v162 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = (uint64_t (*)(uint64_t))swift_allocObject();
  *((void *)v53 + 2) = a6;
  *((void *)v53 + 3) = a7;
  v183 = (void (*)(uint64_t))a7;
  v191 = v53;
  *((void *)v53 + 4) = a8;
  uint64_t v188 = a6;
  swift_retain_n();
  uint64_t v187 = a8;
  swift_retain_n();
  AuthorizationRecord.status.getter();
  uint64_t v176 = v49;
  v177 = (void **)v48;
  uint64_t v54 = (*(uint64_t (**)(char *, uint64_t))(v49 + 88))(v52, v48);
  if (v54 == enum case for AuthorizationStatus.notDetermined(_:))
  {
    uint64_t v55 = v175;
    uint64_t v56 = (void **)sub_10000BE0C((void *)(v175 + 80), *(void *)(v175 + 104));
    AuthorizationRecord.bundleIdentifier.getter();
    uint64_t v57 = *v56;
    uint64_t v58 = FamilyControlsMember.rawValue.getter();
    uint64_t v59 = a2;
    if (v58 == FamilyControlsMember.rawValue.getter())
    {
      id v60 = [v57 allowedClient];
      id v61 = [v60 allowedClient];

      id v62 = objc_allocWithZone((Class)MOApplication);
      swift_bridgeObjectRetain();
      NSString v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v64 = [v62 initWithBundleIdentifier:v63];

      if (v61)
      {
        sub_100015694();
        id v65 = v64;
        id v66 = v61;
        char v67 = static NSObject.== infix(_:_:)();
        swift_bridgeObjectRelease();

        if ((v67 & 1) == 0)
        {
          uint64_t v68 = v163;
          static Logger.authorization.getter();
          uint64_t v69 = v190;
          uint64_t v70 = v164;
          uint64_t v71 = v192;
          (*(void (**)(char *, uint64_t, uint64_t))(v190 + 16))(v164, v59, v192);
          BOOL v72 = Logger.logObject.getter();
          os_log_type_t v73 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v72, v73))
          {
            uint64_t v74 = (uint8_t *)swift_slowAlloc();
            os_log_t v189 = (os_log_t)swift_slowAlloc();
            *(void *)&v196[0] = v189;
            *(_DWORD *)uint64_t v74 = 136446210;
            v185 = v74 + 4;
            v186 = v74;
            uint64_t v75 = v168;
            AuthorizationRecord.recordIdentifier.getter();
            sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v76 = v170;
            uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v79 = v78;
            (*(void (**)(char *, uint64_t))(v169 + 8))(v75, v76);
            v195[0] = sub_1000067CC(v77, v79, (uint64_t *)v196);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v69 + 8))(v164, v192);
            _os_log_impl((void *)&_mh_execute_header, v72, v73, "Unable to request authorization for record identifier %{public}s because a different app already enrolled a child", v186, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
          }

          (*(void (**)(char *, uint64_t))(v180 + 8))(v68, v179);
          uint64_t v158 = type metadata accessor for FamilyControlsError();
          sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
          uint64_t v159 = swift_allocError();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v158 - 8) + 104))(v160, enum case for FamilyControlsError.authorizationConflict(_:), v158);
          uint64_t v111 = (uint64_t)v182;
          uint64_t *v182 = v159;
          swift_storeEnumTagMultiPayload();
          uint64_t v112 = v111;
          uint64_t v110 = v188;
LABEL_28:
          uint64_t v114 = v110;
          uint64_t v115 = v183;
LABEL_29:
          sub_10002F910(v112, v114, v115);
          sub_100015758(v111, &qword_100073DD0);
          swift_release();
          swift_release();
          return swift_release();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    uint64_t v116 = v55;
    sub_10000BFC4(v55, (uint64_t)v198);
    v177 = (void **)sub_10000BE0C(v198, v198[3]);
    uint64_t v171 = AuthorizationRecord.bundleIdentifier.getter();
    uint64_t v176 = v117;
    uint64_t v118 = v190;
    uint64_t v119 = *(void (**)(char *, uint64_t, uint64_t))(v190 + 16);
    os_log_type_t v120 = v174;
    uint64_t v121 = v192;
    v119(v174, v59, v192);
    sub_10000BDD4(v116, (uint64_t)v196);
    v119((char *)v184, (uint64_t)v120, v121);
    sub_10000BDD4((uint64_t)v196, (uint64_t)v195);
    unint64_t v122 = (*(unsigned __int8 *)(v118 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
    unint64_t v123 = (v20 + v122 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v124 = (v123 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v125 = (v124 + 143) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v126 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v118 + 32))(v126 + v122, v120, v121);
    *(void *)(v126 + v123) = v189;
    unint64_t v127 = v126 + v124;
    long long v128 = v196[3];
    *(_OWORD *)(v127 + 32) = v196[2];
    *(_OWORD *)(v127 + 48) = v128;
    long long v129 = v196[1];
    *(_OWORD *)unint64_t v127 = v196[0];
    *(_OWORD *)(v127 + 16) = v129;
    *(void *)(v127 + 128) = v197;
    long long v130 = v196[7];
    *(_OWORD *)(v127 + 96) = v196[6];
    *(_OWORD *)(v127 + 112) = v130;
    long long v131 = v196[5];
    *(_OWORD *)(v127 + 64) = v196[4];
    *(_OWORD *)(v127 + 80) = v131;
    v132 = (uint8_t **)(v126 + v125);
    uint64_t v134 = (uint64_t)v185;
    v133 = v186;
    char *v132 = v185;
    v132[1] = v133;
    v135 = (uint64_t (**)(uint64_t))(v126 + ((v125 + 23) & 0xFFFFFFFFFFFFFFF8));
    v136 = v191;
    char *v135 = sub_100015DC8;
    v135[1] = v136;
    uint64_t v137 = (char *)*v177;
    sub_100015DDC(v134, (unint64_t)v133);
    swift_retain();
    sub_100015DDC(v134, (unint64_t)v133);
    swift_retain();
    uint64_t v138 = (uint64_t)v178;
    FamilyControlsAuthenticationUIService.ServiceType.init(member:)();
    char v194 = 0;
    int v139 = *(NSObject **)&v137[OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_syncQueue];
    v140 = (void *)swift_allocObject();
    v140[2] = v137;
    v140[3] = sub_100015DD8;
    v140[4] = v126;
    v140[5] = &v194;
    uint64_t v141 = swift_allocObject();
    *(void *)(v141 + 16) = sub_100016110;
    *(void *)(v141 + 24) = v140;
    v193[4] = sub_10001610C;
    v193[5] = v141;
    v193[0] = _NSConcreteStackBlock;
    v193[1] = 1107296256;
    v193[2] = sub_10000BDAC;
    v193[3] = &unk_10006E2D8;
    v142 = _Block_copy(v193);
    v137;
    v177 = (void **)v126;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v139, v142);
    _Block_release(v142);
    LOBYTE(v139) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v139 & 1) == 0)
    {
      if (v194 == 1)
      {
        v143 = (char *)v138;
        sub_10001744C(v138, v171, v176);
        uint64_t v145 = v185;
        uint64_t v144 = v186;
        uint64_t v146 = v184;
      }
      else
      {
        uint64_t v147 = v165;
        static Logger.authentication.getter();
        uint64_t v148 = Logger.logObject.getter();
        os_log_type_t v149 = static os_log_type_t.error.getter();
        BOOL v150 = os_log_type_enabled(v148, v149);
        uint64_t v151 = v187;
        uint64_t v146 = v184;
        uint64_t v145 = v185;
        if (v150)
        {
          v152 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v152 = 0;
          _os_log_impl((void *)&_mh_execute_header, v148, v149, "Already prompting for authorization. Rejecting new request.", v152, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v180 + 8))(v147, v179);
        uint64_t v153 = type metadata accessor for FamilyControlsError();
        sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
        uint64_t v154 = swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v153 - 8) + 104))(v155, enum case for FamilyControlsError.authorizationConflict(_:), v153);
        uint64_t v156 = (uint64_t)v182;
        uint64_t *v182 = v154;
        swift_storeEnumTagMultiPayload();
        uint64_t v157 = v188;
        swift_retain();
        swift_retain();
        uint64_t v144 = v186;
        sub_10000DC2C(v156, v146, (uint64_t)v189, (uint64_t)v195, v145, (unint64_t)v186, v157, (uint64_t)v183, v151, (void (*)(void *, uint64_t, uint64_t, uint64_t))sub_10002F910);
        swift_release();
        swift_release();
        sub_100015758(v156, &qword_100073DD0);
        v143 = v178;
      }
      swift_release();
      (*(void (**)(char *, uint64_t))(v172 + 8))(v143, v173);
      swift_release();
      swift_bridgeObjectRelease();
      (*(void (**)(NSObject *, uint64_t))(v190 + 8))(v146, v192);
      sub_10000BE50((uint64_t)v195);
      sub_10000BF6C((uint64_t)v145, (unint64_t)v144);
      swift_release();
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v198);
      swift_release();
      swift_release();
      return swift_release();
    }
    __break(1u);
  }
  else
  {
    uint64_t v80 = v54;
    if (v54 == enum case for AuthorizationStatus.denied(_:))
    {
      static Logger.authorization.getter();
      uint64_t v81 = v190;
      unint64_t v82 = v166;
      uint64_t v83 = a2;
      uint64_t v84 = v192;
      (*(void (**)(char *, uint64_t, uint64_t))(v190 + 16))(v166, v83, v192);
      unint64_t v85 = Logger.logObject.getter();
      os_log_type_t v86 = static os_log_type_t.default.getter();
      int v87 = v86;
      if (os_log_type_enabled(v85, v86))
      {
        os_log_t v189 = v85;
        uint64_t v88 = swift_slowAlloc();
        LODWORD(v185) = v87;
        long long v89 = (uint8_t *)v88;
        v186 = (uint8_t *)swift_slowAlloc();
        *(void *)&v196[0] = v186;
        v184 = v89;
        *(_DWORD *)long long v89 = 136446210;
        v178 = (char *)(v89 + 4);
        uint64_t v90 = v168;
        AuthorizationRecord.recordIdentifier.getter();
        sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v91 = v170;
        uint64_t v92 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v94 = v93;
        (*(void (**)(char *, uint64_t))(v169 + 8))(v90, v91);
        v195[0] = sub_1000067CC(v92, v94, (uint64_t *)v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v192);
        unint64_t v85 = v189;
        _os_log_impl((void *)&_mh_execute_header, v189, (os_log_type_t)v185, "Requested authorization for record identifier: %{public}s already denied", v184, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v84);
      }

      (*(void (**)(char *, uint64_t))(v180 + 8))(v47, v179);
      uint64_t v110 = v188;
      uint64_t v111 = (uint64_t)v182;
      (*(void (**)(uint64_t *, uint64_t, void **))(v176 + 104))(v182, v80, v177);
      swift_storeEnumTagMultiPayload();
      uint64_t v112 = v111;
      goto LABEL_28;
    }
    uint64_t v95 = v190;
    if (v54 == enum case for AuthorizationStatus.approved(_:))
    {
      uint64_t v96 = v167;
      static Logger.authorization.getter();
      uint64_t v97 = v171;
      uint64_t v98 = a2;
      uint64_t v99 = v192;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v95 + 16))(v171, v98, v192);
      uint64_t v100 = Logger.logObject.getter();
      os_log_type_t v101 = static os_log_type_t.default.getter();
      int v102 = v101;
      if (os_log_type_enabled(v100, v101))
      {
        os_log_t v189 = v100;
        uint64_t v103 = swift_slowAlloc();
        LODWORD(v185) = v102;
        uint64_t v104 = (uint8_t *)v103;
        v186 = (uint8_t *)swift_slowAlloc();
        *(void *)&v196[0] = v186;
        v184 = v104;
        *(_DWORD *)uint64_t v104 = 136446210;
        v178 = (char *)(v104 + 4);
        uint64_t v105 = v168;
        AuthorizationRecord.recordIdentifier.getter();
        sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v106 = v170;
        uint64_t v107 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v109 = v108;
        (*(void (**)(char *, uint64_t))(v169 + 8))(v105, v106);
        v195[0] = sub_1000067CC(v107, v109, (uint64_t *)v196);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v171, v99);
        uint64_t v100 = v189;
        _os_log_impl((void *)&_mh_execute_header, v189, (os_log_type_t)v185, "Requested authorization for record identifier: %{public}s already approved", v184, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v97, v99);
      }

      (*(void (**)(char *, uint64_t))(v180 + 8))(v96, v179);
      uint64_t v113 = v188;
      uint64_t v111 = (uint64_t)v182;
      (*(void (**)(uint64_t *, uint64_t, void **))(v176 + 104))(v182, v80, v177);
      swift_storeEnumTagMultiPayload();
      uint64_t v112 = v111;
      uint64_t v114 = v113;
      uint64_t v115 = v183;
      goto LABEL_29;
    }
  }
  swift_release_n();
  swift_release_n();
  swift_release();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10000F988(void *a1, void *a2, void *a3, void (*a4)(id, uint64_t), uint64_t a5)
{
  void (*v36)(void *__return_ptr);
  id v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  NSObject *v58;
  uint64_t v59;
  uint8_t *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  void **v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  id v69;
  NSObject *v70;
  os_log_type_t v71;
  BOOL v72;
  void (*v73)(char *, uint64_t);
  uint8_t *v74;
  uint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void (*v89)(id, uint64_t);
  id v90;
  uint64_t v91;
  void v92[3];
  uint64_t v93;

  uint64_t v90 = a3;
  uint64_t v91 = a5;
  long long v89 = a4;
  int v87 = a2;
  uint64_t v88 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v88, v6);
  uint64_t v8 = (uint64_t *)((char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for AuthorizationStatus();
  uint64_t v84 = *(void *)(v9 - 8);
  unint64_t v85 = v9;
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for AuthorizationRecord();
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v82 = v13;
  uint64_t v83 = v14;
  __chkstk_darwin(v13, v15);
  os_log_type_t v86 = (uint64_t)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v20 = __chkstk_darwin(v17, v19);
  uint64_t v81 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v20, v22);
  uint64_t v80 = (char *)&v75 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v28 = (char *)&v75 - v27;
  __chkstk_darwin(v26, v29);
  uint64_t v31 = (char *)&v75 - v30;
  static Logger.authorization.getter();
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Revoke authorization", v34, 2u);
    swift_slowDealloc();
  }

  uint64_t v35 = *(void (**)(char *, uint64_t))(v18 + 8);
  v35(v31, v17);
  if (!a1)
  {
    uint64_t v48 = type metadata accessor for FamilyControlsError();
    sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v46 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v48 - 8) + 104))(v49, enum case for FamilyControlsError.invalidArgument(_:), v48);
    swift_willThrow();
    goto LABEL_9;
  }
  unint64_t v78 = v28;
  unint64_t v79 = v17;
  uint64_t v36 = (void (*)(void *__return_ptr))v87[15];
  uint64_t v37 = a1;
  v36(v92);
  uint64_t v38 = sub_10000BE0C(v92, v93);
  uint64_t v39 = v38[2];
  if (!v39 || (uint64_t v40 = v38[1], v41 = sub_10000BE0C(v92, v93), (v42 = v41[4]) == 0))
  {
    uint64_t v45 = type metadata accessor for FamilyControlsError();
    sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v46 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v45 - 8) + 104))(v47, enum case for FamilyControlsError.invalidArgument(_:), v45);
    swift_willThrow();

    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v92);
LABEL_9:
    *uint64_t v8 = v46;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    sub_10002E9E4((uint64_t)v8, (uint64_t)v90, v89);
    swift_errorRelease();
    return sub_100015758((uint64_t)v8, &qword_100073DD0);
  }
  uint64_t v76 = v35;
  uint64_t v77 = v8;
  uint64_t v43 = v41[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v44 = v86;
  sub_100045A38(v40, v39, v43, v42, v86);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v92);
  AuthorizationRecord.status.getter();
  uint64_t v51 = (*(uint64_t (**)(char *, uint64_t))(v84 + 88))(v12, v85);
  uint64_t v52 = v51;
  uint64_t v53 = enum case for AuthorizationStatus.notDetermined(_:);
  uint64_t v54 = v44;
  if (v51 == enum case for AuthorizationStatus.notDetermined(_:))
  {
    sub_100044F00(v44);
    uint64_t v55 = (uint64_t)v77;
    uint64_t v56 = v79;
    uint64_t v57 = v80;
    static Logger.authorization.getter();
    uint64_t v58 = Logger.logObject.getter();
    uint64_t v59 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v58, (os_log_type_t)v59)) {
      goto LABEL_20;
    }
    id v60 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v60 = 0;
    id v61 = "Revoked authorization already not determined";
    goto LABEL_19;
  }
  uint64_t v55 = (uint64_t)v77;
  uint64_t v56 = v79;
  if (v51 == enum case for AuthorizationStatus.denied(_:))
  {
    uint64_t v57 = v78;
    static Logger.authorization.getter();
    uint64_t v58 = Logger.logObject.getter();
    LOBYTE(v59) = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v58, (os_log_type_t)v59))
    {
LABEL_20:

      v76(v57, v56);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 104))(v55, v52, v85);
      swift_storeEnumTagMultiPayload();
      sub_10002E9E4(v55, (uint64_t)v90, v89);
      sub_100015758(v55, &qword_100073DD0);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v83 + 8))(v54, v82);
    }
    id v60 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v60 = 0;
    id v61 = "Revoked authorization already denied";
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v59, v61, v60, 2u);
    swift_slowDealloc();
    goto LABEL_20;
  }
  if (v51 == enum case for AuthorizationStatus.approved(_:))
  {
    sub_100044F00(v54);
    id v62 = v53;
    NSString v63 = v87;
    id v64 = (void **)sub_10000BE0C(v87 + 10, v87[13]);
    id v65 = AuthorizationRecord.bundleIdentifier.getter();
    sub_100035ABC(v65, v66, *v64);
    swift_bridgeObjectRelease();
    char v67 = sub_100007D7C();
    uint64_t v68 = v83;
    if ((v67 & 1) == 0)
    {
      uint64_t v69 = objc_msgSend((id)*sub_10000BE0C(v63 + 10, v63[13]), "deviceActivity");
      [v69 setSharingAppleIDs:0];
    }
    static Logger.authorization.getter();
    uint64_t v70 = Logger.logObject.getter();
    uint64_t v71 = static os_log_type_t.default.getter();
    BOOL v72 = os_log_type_enabled(v70, v71);
    os_log_type_t v73 = v76;
    if (v72)
    {
      uint64_t v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v74 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Revoked authorization not determined", v74, 2u);
      swift_slowDealloc();
    }

    v73(v81, v56);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v84 + 104))(v55, v62, v85);
    swift_storeEnumTagMultiPayload();
    sub_10002E9E4(v55, (uint64_t)v90, v89);
    sub_100015758(v55, &qword_100073DD0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 8))(v86, v82);
  }
  else
  {
    swift_release();

    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t sub_100010330(uint64_t a1, uint8_t *a2, uint8_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v63 = a4;
  uint64_t v53 = a2;
  uint64_t v54 = a3;
  uint64_t v57 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v57, v11);
  uint64_t v58 = (uint64_t *)((char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = sub_100007370((uint64_t *)&unk_100074370);
  __chkstk_darwin(v13 - 8, v14);
  uint64_t v61 = (uint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for AuthorizationRecord();
  uint64_t v55 = *(void *)(v16 - 8);
  uint64_t v56 = v16;
  __chkstk_darwin(v16, v17);
  uint64_t v52 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v59 = *(void *)(v24 - 8);
  uint64_t v60 = v24;
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v48 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  swift_retain();
  static Logger.authorization.getter();
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v62 = a1;
  v28(v23, a1, v19);
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = swift_slowAlloc();
    uint64_t v49 = a6;
    uint64_t v32 = (uint8_t *)v31;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v50 = a7;
    v65[0] = v33;
    uint64_t v51 = a5;
    *(_DWORD *)uint64_t v32 = 136446210;
    uint64_t v48 = v32 + 4;
    sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v64 = sub_1000067CC(v34, v35, v65);
    a5 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Request authorization for record identifier: %{public}s", v32, 0xCu);
    swift_arrayDestroy();
    a7 = v50;
    swift_slowDealloc();
    a6 = v49;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  }

  (*(void (**)(char *, uint64_t))(v59 + 8))(v27, v60);
  uint64_t v36 = v63;
  uint64_t v37 = v61;
  sub_1000461CC(v62, v61);
  uint64_t v38 = v55;
  uint64_t v39 = v56;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v37, 1, v56) == 1)
  {
    sub_100015758(v37, (uint64_t *)&unk_100074370);
    uint64_t v40 = type metadata accessor for FamilyControlsError();
    sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v41 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v40 - 8) + 104))(v42, enum case for FamilyControlsError.invalidArgument(_:), v40);
    swift_willThrow();
    uint64_t v43 = (uint64_t)v58;
    *uint64_t v58 = v41;
    swift_storeEnumTagMultiPayload();
    swift_errorRetain();
    sub_10002F910(v43, a5, a6);
    swift_errorRelease();
    sub_100015758(v43, &qword_100073DD0);
  }
  else
  {
    uint64_t v44 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v52, v37, v39);
    uint64_t v45 = v38;
    uint64_t v46 = AuthorizationRecord.type.getter();
    swift_retain();
    swift_retain();
    sub_10000E610(v46, v44, v53, v54, v36, a5, (uint64_t)a6, a7);
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v39);
  }
  swift_release();
  return swift_release();
}

uint64_t sub_100010948(uint64_t a1, char *a2, uint8_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v56 = a4;
  uint64_t v63 = a3;
  id v66 = a2;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v61 = *(void *)(v11 - 8);
  uint64_t v62 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v60 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AuthorizationStatus();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v58 = *(void *)(v19 - 8);
  uint64_t v59 = v19;
  uint64_t v21 = __chkstk_darwin(v19, v20);
  uint64_t v57 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v23);
  uint64_t v24 = type metadata accessor for AuthorizationRecord();
  uint64_t v64 = *(void *)(v24 - 8);
  uint64_t v65 = v24;
  __chkstk_darwin(v24, v25);
  uint64_t v27 = (char *)&v52 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v28, v29);
  uint64_t v31 = a1;
  uint64_t v32 = (uint64_t *)((char *)&v52 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000157B4(v31, (uint64_t)v32);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v33 = *v32;
    swift_errorRetain();
    a6(v33);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v52 = a5;
    uint64_t v53 = v32;
    uint64_t v54 = a6;
    uint64_t v55 = a7;
    AuthorizationRecord.bundleIdentifier.getter();
    AuthorizationRecord.teamIdentifier.getter();
    AuthorizationRecord.recordIdentifier.getter();
    (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for AuthorizationStatus.notDetermined(_:), v14);
    AuthorizationRecord.type.getter();
    AuthorizationRecord.init(bundleIdentifier:teamIdentifier:recordIdentifier:status:type:)();
    unint64_t v35 = v63;
    sub_10004527C((uint64_t)v27);
    uint64_t v36 = v27;
    uint64_t v37 = (void **)sub_10000BE0C((void *)v35 + 10, *((void *)v35 + 13));
    uint64_t v38 = AuthorizationRecord.bundleIdentifier.getter();
    sub_100035ABC(v38, v39, *v37);
    swift_bridgeObjectRelease();
    if ((sub_100007D7C() & 1) == 0)
    {
      id v40 = objc_msgSend((id)*sub_10000BE0C((void *)v35 + 10, *((void *)v35 + 13)), "deviceActivity");
      [v40 setSharingAppleIDs:0];
    }
    uint64_t v41 = v60;
    static Logger.authorization.getter();
    uint64_t v43 = v57;
    uint64_t v42 = v58;
    uint64_t v44 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v57, v56, v59);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      id v66 = v36;
      uint64_t v68 = v48;
      *(_DWORD *)uint64_t v47 = 136446210;
      uint64_t v63 = v47 + 4;
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v67 = sub_1000067CC(v49, v50, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Reset authorization for record identifier: %{public}s not determined", v47, 0xCu);
      swift_arrayDestroy();
      uint64_t v36 = v66;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
    }

    (*(void (**)(char *, uint64_t))(v61 + 8))(v41, v62);
    uint64_t v51 = v54;
    if (!sub_100008EFC())
    {
      if (qword_100073A38 != -1) {
        swift_once();
      }
      sub_100051518();
    }
    v51(0);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v36, v65);
    return sub_100015758((uint64_t)v53, &qword_100073DD0);
  }
}

uint64_t sub_100010FF8(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v206 = a2;
  uint64_t v173 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v173, v9);
  v174 = (uint64_t *)((char *)&v170 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for FamilyControlsAuthenticationUIService.ServiceType();
  uint64_t v185 = *(void *)(v11 - 8);
  uint64_t v186 = v11;
  __chkstk_darwin(v11, v12);
  uint64_t v184 = (uint64_t)&v170 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AuthorizationStatus();
  v195 = *(uint64_t (***)(char *, void **))(v14 - 8);
  v196 = (void **)v14;
  uint64_t v16 = __chkstk_darwin(v14, v15);
  uint64_t v179 = (char *)&v170 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  v193 = (char *)&v170 - v19;
  uint64_t v20 = sub_100007370((uint64_t *)&unk_100074370);
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v204 = (uint64_t)&v170 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for AuthorizationRecord();
  uint64_t v201 = *(void *)(v23 - 8);
  uint64_t v202 = v23;
  uint64_t v25 = __chkstk_darwin(v23, v24);
  uint64_t v181 = (char *)&v170 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v25, v27);
  v183 = (char *)&v170 - v29;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v180 = (char *)&v170 - v32;
  uint64_t v178 = v33;
  __chkstk_darwin(v31, v34);
  v200 = (char *)&v170 - v35;
  uint64_t v36 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v39 = __chkstk_darwin(v36, v38);
  uint64_t v171 = (char *)&v170 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v39, v41);
  uint64_t v176 = (char *)&v170 - v43;
  uint64_t v45 = __chkstk_darwin(v42, v44);
  v182 = (char *)&v170 - v46;
  uint64_t v48 = __chkstk_darwin(v45, v47);
  uint64_t v188 = (char *)&v170 - v49;
  uint64_t v51 = __chkstk_darwin(v48, v50);
  uint64_t v187 = (char *)&v170 - v52;
  uint64_t v177 = v53;
  __chkstk_darwin(v51, v54);
  uint64_t v56 = (char *)&v170 - v55;
  uint64_t v57 = type metadata accessor for Logger();
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v207 = v57;
  uint64_t v208 = v58;
  uint64_t v60 = __chkstk_darwin(v57, v59);
  uint64_t v175 = (char *)&v170 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = __chkstk_darwin(v60, v62);
  uint64_t v172 = (char *)&v170 - v64;
  uint64_t v66 = __chkstk_darwin(v63, v65);
  uint64_t v190 = (uint64_t)&v170 - v67;
  __chkstk_darwin(v66, v68);
  uint64_t v70 = (char *)&v170 - v69;
  uint64_t v71 = (void *)swift_allocObject();
  v71[2] = a3;
  v71[3] = a4;
  v205 = v71;
  v71[4] = a5;
  id v72 = a3;
  swift_retain_n();
  id v203 = v72;
  static Logger.authorization.getter();
  os_log_type_t v73 = *(void (**)(char *, uint8_t *, uint64_t))(v37 + 16);
  v209 = (uint8_t *)a1;
  v191 = v73;
  uint64_t v192 = v37 + 16;
  v73(v56, (uint8_t *)a1, v36);
  uint64_t v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.default.getter();
  BOOL v76 = os_log_type_enabled(v74, v75);
  uint64_t v197 = v36;
  uint64_t v194 = v37;
  if (v76)
  {
    uint64_t v77 = swift_slowAlloc();
    v198 = a4;
    uint64_t v199 = a5;
    unint64_t v78 = (uint8_t *)v77;
    uint64_t v170 = swift_slowAlloc();
    *(void *)&v213[0] = v170;
    *(_DWORD *)unint64_t v78 = 136446210;
    os_log_t v189 = (void (*)(char *, uint64_t))(v78 + 4);
    sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v79 = dispatch thunk of CustomStringConvertible.description.getter();
    v212[0] = sub_1000067CC(v79, v80, (uint64_t *)v213);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_t v189 = *(void (**)(char *, uint64_t))(v37 + 8);
    v189(v56, v36);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "Reset authorization for record identifier: %{public}s", v78, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a4 = v198;
    a5 = v199;
    swift_slowDealloc();
  }
  else
  {
    os_log_t v189 = *(void (**)(char *, uint64_t))(v37 + 8);
    v189(v56, v36);
  }

  uint64_t v81 = *(void (**)(char *, uint64_t))(v208 + 8);
  v81(v70, v207);
  uint64_t v82 = v204;
  sub_1000461CC((uint64_t)v209, v204);
  uint64_t v84 = v201;
  uint64_t v83 = v202;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v201 + 48))(v82, 1, v202) == 1)
  {
    sub_100015758(v82, (uint64_t *)&unk_100074370);
    uint64_t v85 = type metadata accessor for FamilyControlsError();
    sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v86 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v85 - 8) + 104))(v87, enum case for FamilyControlsError.invalidArgument(_:), v85);
    swift_willThrow();
    swift_errorRetain();
    a4(v86);
    swift_errorRelease();
    swift_errorRelease();
    swift_release();

    return swift_release();
  }
  v198 = a4;
  uint64_t v199 = a5;
  long long v89 = *(uint64_t (***)(char *, void **))(v84 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v89)(v200, v82, v83);
  uint64_t v90 = v193;
  AuthorizationRecord.status.getter();
  int v91 = v195[11](v90, v196);
  uint64_t v92 = enum case for AuthorizationStatus.notDetermined(_:);
  if (v91 == enum case for AuthorizationStatus.notDetermined(_:))
  {
    uint64_t v93 = v190;
    static Logger.authorization.getter();
    unint64_t v94 = v187;
    uint64_t v95 = v197;
    v191(v187, v209, v197);
    uint64_t v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v96, v97))
    {
      uint64_t v98 = (uint8_t *)swift_slowAlloc();
      *(void *)&v213[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v98 = 136446210;
      v209 = v98 + 4;
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter();
      v212[0] = sub_1000067CC(v99, v100, (uint64_t *)v213);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v189(v94, v95);
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "Reset authorization for record identifier: %{public}s already not determined", v98, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v101 = v190;
    }
    else
    {
      v189(v94, v95);

      uint64_t v101 = v93;
    }
    v81((char *)v101, v207);
    uint64_t v104 = v198;
    id v105 = v203;
    if (!sub_100008EFC())
    {
      if (qword_100073A38 != -1) {
        swift_once();
      }
      sub_100051518();
    }
    v104(0);
    (*(void (**)(char *, uint64_t))(v201 + 8))(v200, v202);
    swift_release();

    return swift_release();
  }
  if (v91 == enum case for AuthorizationStatus.denied(_:))
  {
    uint64_t v206 = AuthorizationRecord.bundleIdentifier.getter();
    uint64_t v204 = v102;
    v193 = (char *)AuthorizationRecord.teamIdentifier.getter();
    AuthorizationRecord.recordIdentifier.getter();
    ((void (*)(char *, uint64_t, void **))v195[13])(v179, v92, v196);
    AuthorizationRecord.type.getter();
    uint64_t v103 = (uint64_t)v181;
    AuthorizationRecord.init(bundleIdentifier:teamIdentifier:recordIdentifier:status:type:)();
    sub_10004527C(v103);
    uint64_t v156 = v175;
    static Logger.authorization.getter();
    uint64_t v157 = v171;
    uint64_t v158 = v197;
    v191(v171, v209, v197);
    uint64_t v159 = Logger.logObject.getter();
    os_log_type_t v160 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v159, v160))
    {
      v161 = v157;
      uint64_t v162 = (uint8_t *)swift_slowAlloc();
      *(void *)&v213[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v162 = 136446210;
      v209 = v162 + 4;
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v163 = dispatch thunk of CustomStringConvertible.description.getter();
      v212[0] = sub_1000067CC(v163, v164, (uint64_t *)v213);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v189(v161, v158);
      _os_log_impl((void *)&_mh_execute_header, v159, v160, "Reset authorization for record identifier: %{public}s not determined", v162, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v165 = v175;
    }
    else
    {
      v189(v157, v158);

      v165 = v156;
    }
    v81(v165, v207);
    v133 = v198;
    id v131 = v203;
    BOOL v166 = sub_100008EFC();
    uint64_t v135 = (uint64_t)v181;
    if (v166) {
      goto LABEL_32;
    }
    if (qword_100073A38 == -1)
    {
LABEL_31:
      sub_100051518();
LABEL_32:
      v133(0);
      uint64_t v167 = v202;
      v168 = *(void (**)(uint64_t, uint64_t))(v201 + 8);
      v168(v135, v202);
      v168((uint64_t)v200, v167);
      swift_release();

      return swift_release();
    }
LABEL_34:
    swift_once();
    goto LABEL_31;
  }
  v195 = v89;
  uint64_t v106 = (uint64_t)v209;
  if (v91 == enum case for AuthorizationStatus.approved(_:))
  {
    uint64_t v107 = v206;
    sub_10000BFC4(v206, (uint64_t)v215);
    v196 = (void **)sub_10000BE0C(v215, v215[3]);
    unint64_t v108 = v200;
    v193 = (char *)AuthorizationRecord.type.getter();
    uint64_t v190 = AuthorizationRecord.bundleIdentifier.getter();
    uint64_t v204 = v109;
    uint64_t v110 = v201 + 16;
    uint64_t v111 = *(void (**)(char *, char *, uint64_t))(v201 + 16);
    uint64_t v112 = v180;
    uint64_t v113 = v108;
    uint64_t v114 = v202;
    v111(v180, v113, v202);
    sub_10000BDD4(v107, (uint64_t)v213);
    uint64_t v115 = v188;
    uint64_t v116 = v106;
    uint64_t v117 = v197;
    uint64_t v118 = (void (*)(char *, char *, uint64_t))v191;
    v191(v188, (uint8_t *)v116, v197);
    v111(v183, v112, v114);
    sub_10000BDD4((uint64_t)v213, (uint64_t)v212);
    v118(v182, v115, v117);
    unint64_t v119 = (*(unsigned __int8 *)(v110 + 64) + 16) & ~(unint64_t)*(unsigned __int8 *)(v110 + 64);
    unint64_t v120 = (v178 + v119 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v121 = v194;
    unint64_t v122 = (*(unsigned __int8 *)(v194 + 80) + v120 + 136) & ~(unint64_t)*(unsigned __int8 *)(v194 + 80);
    unint64_t v123 = (v177 + v122 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v124 = swift_allocObject();
    ((void (*)(unint64_t, char *, uint64_t))v195)(v124 + v119, v112, v114);
    unint64_t v125 = v124 + v120;
    long long v126 = v213[7];
    *(_OWORD *)(v125 + 96) = v213[6];
    *(_OWORD *)(v125 + 112) = v126;
    *(void *)(v125 + 128) = v214;
    long long v127 = v213[3];
    *(_OWORD *)(v125 + 32) = v213[2];
    *(_OWORD *)(v125 + 48) = v127;
    long long v128 = v213[5];
    *(_OWORD *)(v125 + 64) = v213[4];
    *(_OWORD *)(v125 + 80) = v128;
    long long v129 = v213[1];
    *(_OWORD *)unint64_t v125 = v213[0];
    *(_OWORD *)(v125 + 16) = v129;
    (*(void (**)(unint64_t, char *, uint64_t))(v121 + 32))(v124 + v122, v188, v197);
    long long v130 = (uint64_t (**)(uint64_t, char))(v124 + v123);
    id v131 = v205;
    *long long v130 = sub_1000156DC;
    v130[1] = (uint64_t (*)(uint64_t, char))v131;
    v132 = (char *)*v196;
    (*(void (**)(uint64_t, void, uint64_t))(v185 + 104))(v184, enum case for FamilyControlsAuthenticationUIService.ServiceType.authenticationForRevoke(_:), v186);
    char v211 = 0;
    v133 = *(void (**)(uint64_t))&v132[OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_syncQueue];
    uint64_t v134 = (void *)swift_allocObject();
    v134[2] = v132;
    v134[3] = sub_100015C98;
    v134[4] = v124;
    v134[5] = &v211;
    uint64_t v135 = swift_allocObject();
    *(void *)(v135 + 16) = sub_100016110;
    *(void *)(v135 + 24) = v134;
    v210[4] = sub_10001610C;
    v210[5] = v135;
    v210[0] = _NSConcreteStackBlock;
    v210[1] = 1107296256;
    v210[2] = sub_10000BDAC;
    v210[3] = &unk_10006E210;
    v136 = _Block_copy(v210);
    swift_retain_n();
    v132;
    v209 = (uint8_t *)v124;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync((dispatch_queue_t)v133, v136);
    _Block_release(v136);
    LOBYTE(v119) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v119 & 1) == 0)
    {
      uint64_t v137 = v197;
      uint64_t v138 = v208;
      if (v211)
      {
        uint64_t v139 = v184;
        sub_10001744C(v184, v190, v204);
        id v140 = v203;
        uint64_t v142 = (uint64_t)v182;
        uint64_t v141 = v183;
      }
      else
      {
        v143 = v172;
        static Logger.authentication.getter();
        uint64_t v144 = Logger.logObject.getter();
        os_log_type_t v145 = static os_log_type_t.error.getter();
        BOOL v146 = os_log_type_enabled(v144, v145);
        uint64_t v142 = (uint64_t)v182;
        if (v146)
        {
          uint64_t v147 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v147 = 0;
          _os_log_impl((void *)&_mh_execute_header, v144, v145, "Already prompting for authorization. Rejecting new request.", v147, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v138 + 8))(v143, v207);
        uint64_t v148 = type metadata accessor for FamilyControlsError();
        sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
        uint64_t v149 = swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v148 - 8) + 104))(v150, enum case for FamilyControlsError.authorizationConflict(_:), v148);
        uint64_t v151 = (uint64_t)v174;
        uint64_t *v174 = v149;
        swift_storeEnumTagMultiPayload();
        id v140 = v203;
        id v152 = v203;
        uint64_t v153 = v199;
        swift_retain();
        uint64_t v141 = v183;
        sub_100010948(v151, v183, (uint8_t *)v212, v142, (uint64_t)v152, v198, v153);

        swift_release();
        sub_100015758(v151, &qword_100073DD0);
        uint64_t v139 = v184;
      }
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v185 + 8))(v139, v186);
      swift_release();
      uint64_t v154 = v202;
      uint64_t v155 = *(void (**)(char *, uint64_t))(v201 + 8);
      v155(v141, v202);
      sub_10000BE50((uint64_t)v212);
      (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v142, v137);
      swift_bridgeObjectRelease();
      swift_release();
      v155(v200, v154);
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v215);
      swift_release();

      return swift_release();
    }
    __break(1u);
    goto LABEL_34;
  }
  swift_release_n();
  id v169 = v203;

  swift_release();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000124BC(uint64_t a1, int a2, uint64_t a3, void *a4, void (*a5)(uint64_t), uint64_t a6)
{
  unint64_t v164 = (uint8_t *)a1;
  v165 = a5;
  int v143 = a2;
  uint64_t v138 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v138, v9);
  uint64_t v139 = (uint64_t *)((char *)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v152 = v11;
  uint64_t v153 = v12;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v137 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v141 = (char *)&v132 - v18;
  __chkstk_darwin(v17, v19);
  uint64_t v145 = (uint64_t)&v132 - v20;
  uint64_t v21 = type metadata accessor for FamilyControlsAuthenticationUIService.ServiceType();
  uint64_t v149 = *(void *)(v21 - 8);
  uint64_t v150 = v21;
  __chkstk_darwin(v21, v22);
  BOOL v146 = (char *)&v132 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = type metadata accessor for UUID();
  uint64_t v157 = *(void *)(v154 - 8);
  uint64_t v24 = *(void *)(v157 + 64);
  uint64_t v26 = __chkstk_darwin(v154, v25);
  id v140 = (char *)&v132 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v144 = (char *)&v132 - v29;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v148 = (char *)&v132 - v32;
  __chkstk_darwin(v31, v33);
  uint64_t v151 = (char *)&v132 - v34;
  uint64_t v35 = type metadata accessor for AuthorizationStatus();
  uint64_t v155 = *(void *)(v35 - 8);
  uint64_t v156 = (void **)v35;
  __chkstk_darwin(v35, v36);
  uint64_t v158 = (char *)&v132 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100007370((uint64_t *)&unk_100074370);
  __chkstk_darwin(v38 - 8, v39);
  uint64_t v41 = (char *)&v132 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for AuthorizationRecord();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v159 = v42;
  uint64_t v160 = v43;
  uint64_t v44 = *(void *)(v43 + 64);
  uint64_t v46 = __chkstk_darwin(v42, v45);
  uint64_t v147 = (char *)&v132 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __chkstk_darwin(v46, v47);
  uint64_t v50 = (char *)&v132 - v49;
  __chkstk_darwin(v48, v51);
  uint64_t v53 = (char *)&v132 - v52;
  uint64_t v54 = (uint64_t (*)(uint64_t, char))swift_allocObject();
  uint64_t v55 = v165;
  *((void *)v54 + 2) = a4;
  *((void *)v54 + 3) = v55;
  uint64_t v162 = v54;
  *((void *)v54 + 4) = a6;
  uint64_t v142 = a3;
  uint64_t v56 = a3 + 40;
  id v57 = a4;
  uint64_t v161 = a6;
  swift_retain_n();
  uint64_t v163 = v57;
  sub_1000461CC((uint64_t)v164, (uint64_t)v41);
  uint64_t v134 = v50;
  uint64_t v135 = v56;
  uint64_t v58 = v158;
  uint64_t v59 = v159;
  uint64_t v132 = v24;
  uint64_t v133 = v44;
  v136 = v53;
  uint64_t v60 = v160;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v41, 1, v159) == 1)
  {
    sub_100015758((uint64_t)v41, (uint64_t *)&unk_100074370);
    uint64_t v61 = type metadata accessor for FamilyControlsError();
    sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v62 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v61 - 8) + 104))(v63, enum case for FamilyControlsError.invalidArgument(_:), v61);
    swift_willThrow();
    unint64_t v80 = v163;
    swift_errorRetain();
    v165(v62);
    swift_errorRelease();
    swift_errorRelease();
    swift_release();

    return swift_release();
  }
  uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
  uint64_t v65 = (uint64_t)v136;
  v64(v136, v41, v59);
  AuthorizationRecord.status.getter();
  int v66 = (*(uint64_t (**)(char *, void **))(v155 + 88))(v58, v156);
  if (v66 == enum case for AuthorizationStatus.notDetermined(_:))
  {
    sub_100044F00(v65);
    uint64_t v67 = (uint64_t)v164;
    uint64_t v68 = v145;
    static Logger.authorization.getter();
    uint64_t v69 = v157;
    uint64_t v70 = v144;
    uint64_t v71 = v154;
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 16))(v144, v67, v154);
    id v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.default.getter();
    BOOL v74 = os_log_type_enabled(v72, v73);
    os_log_type_t v75 = v163;
    if (v74)
    {
      BOOL v76 = (uint8_t *)swift_slowAlloc();
      *(void *)&v169[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v76 = 136446210;
      unint64_t v164 = v76 + 4;
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
      v168[0] = sub_1000067CC(v77, v78, (uint64_t *)v169);
      os_log_type_t v75 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v144, v71);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Revoked authorization for record identifier: %{public}s already not determined", v76, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v145, v152);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v79 = (uint64_t)v164;
  if (v66 == enum case for AuthorizationStatus.denied(_:))
  {
    sub_100044F00(v65);
    uint64_t v68 = (uint64_t)v141;
    static Logger.authorization.getter();
    uint64_t v69 = v157;
    uint64_t v70 = v140;
    uint64_t v71 = v154;
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 16))(v140, v79, v154);
    id v72 = Logger.logObject.getter();
    os_log_type_t v126 = static os_log_type_t.default.getter();
    BOOL v127 = os_log_type_enabled(v72, v126);
    os_log_type_t v75 = v163;
    if (v127)
    {
      long long v128 = (uint8_t *)swift_slowAlloc();
      *(void *)&v169[0] = swift_slowAlloc();
      *(_DWORD *)long long v128 = 136446210;
      unint64_t v164 = v128 + 4;
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v129 = dispatch thunk of CustomStringConvertible.description.getter();
      v168[0] = sub_1000067CC(v129, v130, (uint64_t *)v169);
      os_log_type_t v75 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v140, v71);
      _os_log_impl((void *)&_mh_execute_header, v72, v126, "Revoked authorization for record identifier: %{public}s already denied", v128, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v153 + 8))(v141, v152);
      goto LABEL_22;
    }
LABEL_21:
    (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);

    (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v68, v152);
LABEL_22:
    if (sub_100008EFC())
    {
LABEL_25:
      v165(0);
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v65, v159);
      swift_release();

      return swift_release();
    }
    if (qword_100073A38 == -1)
    {
LABEL_24:
      sub_100051518();
      goto LABEL_25;
    }
LABEL_27:
    swift_once();
    goto LABEL_24;
  }
  uint64_t v158 = (char *)v64;
  if (v66 == enum case for AuthorizationStatus.approved(_:))
  {
    uint64_t v82 = v142;
    sub_10000BFC4(v142, (uint64_t)v171);
    uint64_t v156 = (void **)sub_10000BE0C(v171, v171[3]);
    uint64_t v144 = (char *)AuthorizationRecord.type.getter();
    uint64_t v145 = AuthorizationRecord.bundleIdentifier.getter();
    uint64_t v155 = v83;
    sub_10000BDD4(v82, (uint64_t)v169);
    uint64_t v84 = v159;
    uint64_t v85 = v160 + 16;
    uint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v160 + 16);
    uint64_t v87 = v134;
    v86(v134, v65, v159);
    uint64_t v88 = *(void (**)(char *, uint8_t *, uint64_t))(v157 + 16);
    long long v89 = v151;
    uint64_t v90 = v154;
    v88(v151, v164, v154);
    sub_10000BDD4((uint64_t)v169, (uint64_t)v168);
    v86(v147, (uint64_t)v87, v84);
    v88(v148, (uint8_t *)v89, v90);
    unint64_t v91 = (*(unsigned __int8 *)(v85 + 64) + 152) & ~(unint64_t)*(unsigned __int8 *)(v85 + 64);
    uint64_t v92 = v157;
    unint64_t v93 = (v133 + *(unsigned __int8 *)(v157 + 80) + v91) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80);
    unint64_t v94 = (v132 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v65 = swift_allocObject();
    long long v95 = v169[7];
    *(_OWORD *)(v65 + 112) = v169[6];
    *(_OWORD *)(v65 + 128) = v95;
    *(void *)(v65 + 144) = v170;
    long long v96 = v169[3];
    *(_OWORD *)(v65 + 48) = v169[2];
    *(_OWORD *)(v65 + 64) = v96;
    long long v97 = v169[5];
    *(_OWORD *)(v65 + 80) = v169[4];
    *(_OWORD *)(v65 + 96) = v97;
    long long v98 = v169[1];
    *(_OWORD *)(v65 + 16) = v169[0];
    *(_OWORD *)(v65 + 32) = v98;
    ((void (*)(unint64_t, char *, uint64_t))v158)(v65 + v91, v87, v84);
    (*(void (**)(unint64_t, char *, uint64_t))(v92 + 32))(v65 + v93, v151, v90);
    uint64_t v99 = (uint64_t (**)(uint64_t, char))(v65 + v94);
    unint64_t v100 = v162;
    char *v99 = sub_1000156DC;
    v99[1] = v100;
    uint64_t v101 = (unsigned int *)&enum case for FamilyControlsAuthenticationUIService.ServiceType.authenticationForDeletion(_:);
    uint64_t v102 = (char *)*v156;
    if ((v143 & 1) == 0) {
      uint64_t v101 = (unsigned int *)&enum case for FamilyControlsAuthenticationUIService.ServiceType.authenticationForRevoke(_:);
    }
    uint64_t v103 = (uint64_t)v146;
    (*(void (**)(char *, void, uint64_t))(v149 + 104))(v146, *v101, v150);
    char v167 = 0;
    os_log_type_t v75 = *(NSObject **)&v102[OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_syncQueue];
    uint64_t v104 = (void *)swift_allocObject();
    v104[2] = v102;
    v104[3] = sub_1000156F0;
    v104[4] = v65;
    v104[5] = &v167;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_100016110;
    *(void *)(v105 + 24) = v104;
    v166[4] = sub_10001610C;
    v166[5] = v105;
    v166[0] = _NSConcreteStackBlock;
    v166[1] = 1107296256;
    v166[2] = sub_10000BDAC;
    v166[3] = &unk_10006E148;
    uint64_t v106 = _Block_copy(v166);
    swift_retain_n();
    v102;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v75, v106);
    _Block_release(v106);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      uint64_t v109 = v152;
      uint64_t v108 = v153;
      if (v167 == 1)
      {
        uint64_t v110 = (char *)v103;
        sub_10001744C(v103, v145, v155);
        uint64_t v111 = v154;
        uint64_t v112 = (uint64_t)v147;
        uint64_t v113 = (uint64_t)v148;
      }
      else
      {
        uint64_t v114 = v137;
        static Logger.authentication.getter();
        uint64_t v115 = Logger.logObject.getter();
        os_log_type_t v116 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v115, v116))
        {
          uint64_t v117 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v117 = 0;
          _os_log_impl((void *)&_mh_execute_header, v115, v116, "Already prompting for authorization. Rejecting new request.", v117, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v108 + 8))(v114, v109);
        uint64_t v118 = type metadata accessor for FamilyControlsError();
        sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
        uint64_t v119 = swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v118 - 8) + 104))(v120, enum case for FamilyControlsError.authorizationConflict(_:), v118);
        uint64_t v121 = (uint64_t)v139;
        *uint64_t v139 = v119;
        swift_storeEnumTagMultiPayload();
        unint64_t v122 = v163;
        uint64_t v123 = v161;
        swift_retain();
        uint64_t v112 = (uint64_t)v147;
        uint64_t v113 = (uint64_t)v148;
        sub_1000135A8(v121, (uint64_t)v168, (uint64_t)v147, (uint64_t)v148, (uint64_t)v122, v165, v123);

        swift_release();
        sub_100015758(v121, &qword_100073DD0);
        uint64_t v111 = v154;
        uint64_t v110 = v146;
      }
      swift_release();
      (*(void (**)(char *, uint64_t))(v149 + 8))(v110, v150);
      swift_release();
      sub_10000BE50((uint64_t)v168);
      uint64_t v124 = v159;
      unint64_t v125 = *(void (**)(uint64_t, uint64_t))(v160 + 8);
      v125(v112, v159);
      (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v113, v111);
      swift_bridgeObjectRelease();
      swift_release();
      v125((uint64_t)v136, v124);
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v171);
      swift_release();

      return swift_release();
    }
    __break(1u);
    goto LABEL_27;
  }
  swift_release_n();
  id v131 = v163;

  swift_release();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1000135A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v44 = a5;
  uint64_t v40 = a4;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  uint64_t v15 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v42 = *(void *)(v16 - 8);
  uint64_t v43 = v16;
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (void *)((char *)v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000157B4(a1, (uint64_t)v23);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v24 = *v23;
    swift_errorRetain();
    a6(v24);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v39 = a7;
    sub_100044F00(a3);
    uint64_t v38 = a6;
    uint64_t v26 = (void **)sub_10000BE0C((void *)(a2 + 80), *(void *)(a2 + 104));
    uint64_t v27 = AuthorizationRecord.bundleIdentifier.getter();
    sub_100035ABC(v27, v28, *v26);
    swift_bridgeObjectRelease();
    if ((sub_100007D7C() & 1) == 0)
    {
      id v29 = objc_msgSend((id)*sub_10000BE0C((void *)(a2 + 80), *(void *)(a2 + 104)), "deviceActivity");
      [v29 setSharingAppleIDs:0];
    }
    static Logger.authorization.getter();
    uint64_t v30 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v41 + 16))(v15, v40, v12);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      uint64_t v46 = v40;
      *(_DWORD *)uint64_t v33 = 136446210;
      v37[1] = v33 + 4;
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v45 = sub_1000067CC(v34, v35, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v12);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Revoked authorization for record identifier: %{public}s not determined", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v15, v12);
    }

    (*(void (**)(char *, uint64_t))(v42 + 8))(v19, v43);
    uint64_t v36 = v38;
    if (!sub_100008EFC())
    {
      if (qword_100073A38 != -1) {
        swift_once();
      }
      sub_100051518();
    }
    v36(0);
    return sub_100015758((uint64_t)v23, &qword_100073DD0);
  }
}

uint64_t sub_100013A80(uint64_t a1, int a2, uint64_t a3, void *a4, void (*a5)(uint64_t), uint64_t a6)
{
  unint64_t v164 = (uint8_t *)a1;
  v165 = a5;
  int v143 = a2;
  uint64_t v138 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v138, v9);
  uint64_t v139 = (uint64_t *)((char *)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v152 = v11;
  uint64_t v153 = v12;
  uint64_t v14 = __chkstk_darwin(v11, v13);
  uint64_t v137 = (char *)&v132 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v141 = (char *)&v132 - v18;
  __chkstk_darwin(v17, v19);
  uint64_t v145 = (uint64_t)&v132 - v20;
  uint64_t v21 = type metadata accessor for FamilyControlsAuthenticationUIService.ServiceType();
  uint64_t v149 = *(void *)(v21 - 8);
  uint64_t v150 = v21;
  __chkstk_darwin(v21, v22);
  BOOL v146 = (char *)&v132 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = type metadata accessor for UUID();
  uint64_t v157 = *(void *)(v154 - 8);
  uint64_t v24 = *(void *)(v157 + 64);
  uint64_t v26 = __chkstk_darwin(v154, v25);
  id v140 = (char *)&v132 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  uint64_t v144 = (char *)&v132 - v29;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v148 = (char *)&v132 - v32;
  __chkstk_darwin(v31, v33);
  uint64_t v151 = (char *)&v132 - v34;
  uint64_t v35 = type metadata accessor for AuthorizationStatus();
  uint64_t v155 = *(void *)(v35 - 8);
  uint64_t v156 = (void **)v35;
  __chkstk_darwin(v35, v36);
  uint64_t v158 = (char *)&v132 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_100007370((uint64_t *)&unk_100074370);
  __chkstk_darwin(v38 - 8, v39);
  uint64_t v41 = (char *)&v132 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for AuthorizationRecord();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v159 = v42;
  uint64_t v160 = v43;
  uint64_t v44 = *(void *)(v43 + 64);
  uint64_t v46 = __chkstk_darwin(v42, v45);
  uint64_t v147 = (char *)&v132 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __chkstk_darwin(v46, v47);
  uint64_t v50 = (char *)&v132 - v49;
  __chkstk_darwin(v48, v51);
  uint64_t v53 = (char *)&v132 - v52;
  uint64_t v54 = (uint64_t (*)(uint64_t, char))swift_allocObject();
  uint64_t v55 = v165;
  *((void *)v54 + 2) = a4;
  *((void *)v54 + 3) = v55;
  uint64_t v162 = v54;
  *((void *)v54 + 4) = a6;
  uint64_t v142 = a3;
  uint64_t v56 = a3 + 40;
  id v57 = a4;
  uint64_t v161 = a6;
  swift_retain_n();
  uint64_t v163 = v57;
  sub_1000461CC((uint64_t)v164, (uint64_t)v41);
  uint64_t v134 = v50;
  uint64_t v135 = v56;
  uint64_t v58 = v158;
  uint64_t v59 = v159;
  uint64_t v132 = v24;
  uint64_t v133 = v44;
  v136 = v53;
  uint64_t v60 = v160;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v160 + 48))(v41, 1, v159) == 1)
  {
    sub_100015758((uint64_t)v41, (uint64_t *)&unk_100074370);
    uint64_t v61 = type metadata accessor for FamilyControlsError();
    sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v62 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v61 - 8) + 104))(v63, enum case for FamilyControlsError.invalidArgument(_:), v61);
    swift_willThrow();
    unint64_t v80 = v163;
    swift_errorRetain();
    v165(v62);
    swift_errorRelease();
    swift_errorRelease();
    swift_release();

    return swift_release();
  }
  uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
  uint64_t v65 = (uint64_t)v136;
  v64(v136, v41, v59);
  AuthorizationRecord.status.getter();
  int v66 = (*(uint64_t (**)(char *, void **))(v155 + 88))(v58, v156);
  if (v66 == enum case for AuthorizationStatus.notDetermined(_:))
  {
    sub_100044F00(v65);
    uint64_t v67 = (uint64_t)v164;
    uint64_t v68 = v145;
    static Logger.authorization.getter();
    uint64_t v69 = v157;
    uint64_t v70 = v144;
    uint64_t v71 = v154;
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 16))(v144, v67, v154);
    id v72 = Logger.logObject.getter();
    os_log_type_t v73 = static os_log_type_t.default.getter();
    BOOL v74 = os_log_type_enabled(v72, v73);
    os_log_type_t v75 = v163;
    if (v74)
    {
      BOOL v76 = (uint8_t *)swift_slowAlloc();
      *(void *)&v169[0] = swift_slowAlloc();
      *(_DWORD *)BOOL v76 = 136446210;
      unint64_t v164 = v76 + 4;
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter();
      v168[0] = sub_1000067CC(v77, v78, (uint64_t *)v169);
      os_log_type_t v75 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v144, v71);
      _os_log_impl((void *)&_mh_execute_header, v72, v73, "Revoked authorization for record identifier: %{public}s already not determined", v76, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v145, v152);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  uint64_t v79 = (uint64_t)v164;
  if (v66 == enum case for AuthorizationStatus.denied(_:))
  {
    sub_100044F00(v65);
    uint64_t v68 = (uint64_t)v141;
    static Logger.authorization.getter();
    uint64_t v69 = v157;
    uint64_t v70 = v140;
    uint64_t v71 = v154;
    (*(void (**)(char *, uint64_t, uint64_t))(v157 + 16))(v140, v79, v154);
    id v72 = Logger.logObject.getter();
    os_log_type_t v126 = static os_log_type_t.default.getter();
    BOOL v127 = os_log_type_enabled(v72, v126);
    os_log_type_t v75 = v163;
    if (v127)
    {
      long long v128 = (uint8_t *)swift_slowAlloc();
      *(void *)&v169[0] = swift_slowAlloc();
      *(_DWORD *)long long v128 = 136446210;
      unint64_t v164 = v128 + 4;
      sub_100015E4C((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v129 = dispatch thunk of CustomStringConvertible.description.getter();
      v168[0] = sub_1000067CC(v129, v130, (uint64_t *)v169);
      os_log_type_t v75 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v140, v71);
      _os_log_impl((void *)&_mh_execute_header, v72, v126, "Revoked authorization for record identifier: %{public}s already denied", v128, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v153 + 8))(v141, v152);
      goto LABEL_22;
    }
LABEL_21:
    (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);

    (*(void (**)(uint64_t, uint64_t))(v153 + 8))(v68, v152);
LABEL_22:
    if (sub_100008EFC())
    {
LABEL_25:
      v165(0);
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v65, v159);
      swift_release();

      return swift_release();
    }
    if (qword_100073A38 == -1)
    {
LABEL_24:
      sub_100051518();
      goto LABEL_25;
    }
LABEL_27:
    swift_once();
    goto LABEL_24;
  }
  uint64_t v158 = (char *)v64;
  if (v66 == enum case for AuthorizationStatus.approved(_:))
  {
    uint64_t v82 = v142;
    sub_10000BFC4(v142, (uint64_t)v171);
    uint64_t v156 = (void **)sub_10000BE0C(v171, v171[3]);
    uint64_t v144 = (char *)AuthorizationRecord.type.getter();
    uint64_t v145 = AuthorizationRecord.bundleIdentifier.getter();
    uint64_t v155 = v83;
    sub_10000BDD4(v82, (uint64_t)v169);
    uint64_t v84 = v159;
    uint64_t v85 = v160 + 16;
    uint64_t v86 = *(void (**)(char *, uint64_t, uint64_t))(v160 + 16);
    uint64_t v87 = v134;
    v86(v134, v65, v159);
    uint64_t v88 = *(void (**)(char *, uint8_t *, uint64_t))(v157 + 16);
    long long v89 = v151;
    uint64_t v90 = v154;
    v88(v151, v164, v154);
    sub_10000BDD4((uint64_t)v169, (uint64_t)v168);
    v86(v147, (uint64_t)v87, v84);
    v88(v148, (uint8_t *)v89, v90);
    unint64_t v91 = (*(unsigned __int8 *)(v85 + 64) + 152) & ~(unint64_t)*(unsigned __int8 *)(v85 + 64);
    uint64_t v92 = v157;
    unint64_t v93 = (v133 + *(unsigned __int8 *)(v157 + 80) + v91) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80);
    unint64_t v94 = (v132 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v65 = swift_allocObject();
    long long v95 = v169[7];
    *(_OWORD *)(v65 + 112) = v169[6];
    *(_OWORD *)(v65 + 128) = v95;
    *(void *)(v65 + 144) = v170;
    long long v96 = v169[3];
    *(_OWORD *)(v65 + 48) = v169[2];
    *(_OWORD *)(v65 + 64) = v96;
    long long v97 = v169[5];
    *(_OWORD *)(v65 + 80) = v169[4];
    *(_OWORD *)(v65 + 96) = v97;
    long long v98 = v169[1];
    *(_OWORD *)(v65 + 16) = v169[0];
    *(_OWORD *)(v65 + 32) = v98;
    ((void (*)(unint64_t, char *, uint64_t))v158)(v65 + v91, v87, v84);
    (*(void (**)(unint64_t, char *, uint64_t))(v92 + 32))(v65 + v93, v151, v90);
    uint64_t v99 = (uint64_t (**)(uint64_t, char))(v65 + v94);
    unint64_t v100 = v162;
    char *v99 = sub_1000156DC;
    v99[1] = v100;
    uint64_t v101 = (unsigned int *)&enum case for FamilyControlsAuthenticationUIService.ServiceType.authenticationForDeletion(_:);
    uint64_t v102 = (char *)*v156;
    if ((v143 & 1) == 0) {
      uint64_t v101 = (unsigned int *)&enum case for FamilyControlsAuthenticationUIService.ServiceType.authenticationForRevoke(_:);
    }
    uint64_t v103 = (uint64_t)v146;
    (*(void (**)(char *, void, uint64_t))(v149 + 104))(v146, *v101, v150);
    char v167 = 0;
    os_log_type_t v75 = *(NSObject **)&v102[OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_syncQueue];
    uint64_t v104 = (void *)swift_allocObject();
    v104[2] = v102;
    v104[3] = sub_1000156F0;
    v104[4] = v65;
    v104[5] = &v167;
    uint64_t v105 = swift_allocObject();
    *(void *)(v105 + 16) = sub_1000156FC;
    *(void *)(v105 + 24) = v104;
    v166[4] = sub_100015718;
    v166[5] = v105;
    v166[0] = _NSConcreteStackBlock;
    v166[1] = 1107296256;
    v166[2] = sub_10000BDAC;
    v166[3] = &unk_10006DFE0;
    uint64_t v106 = _Block_copy(v166);
    swift_retain_n();
    v102;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v75, v106);
    _Block_release(v106);
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      uint64_t v109 = v152;
      uint64_t v108 = v153;
      if (v167 == 1)
      {
        uint64_t v110 = (char *)v103;
        sub_10001744C(v103, v145, v155);
        uint64_t v111 = v154;
        uint64_t v112 = (uint64_t)v147;
        uint64_t v113 = (uint64_t)v148;
      }
      else
      {
        uint64_t v114 = v137;
        static Logger.authentication.getter();
        uint64_t v115 = Logger.logObject.getter();
        os_log_type_t v116 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v115, v116))
        {
          uint64_t v117 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v117 = 0;
          _os_log_impl((void *)&_mh_execute_header, v115, v116, "Already prompting for authorization. Rejecting new request.", v117, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v108 + 8))(v114, v109);
        uint64_t v118 = type metadata accessor for FamilyControlsError();
        sub_100015E4C(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
        uint64_t v119 = swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v118 - 8) + 104))(v120, enum case for FamilyControlsError.authorizationConflict(_:), v118);
        uint64_t v121 = (uint64_t)v139;
        *uint64_t v139 = v119;
        swift_storeEnumTagMultiPayload();
        unint64_t v122 = v163;
        uint64_t v123 = v161;
        swift_retain();
        uint64_t v112 = (uint64_t)v147;
        uint64_t v113 = (uint64_t)v148;
        sub_1000135A8(v121, (uint64_t)v168, (uint64_t)v147, (uint64_t)v148, (uint64_t)v122, v165, v123);

        swift_release();
        sub_100015758(v121, &qword_100073DD0);
        uint64_t v111 = v154;
        uint64_t v110 = v146;
      }
      swift_release();
      (*(void (**)(char *, uint64_t))(v149 + 8))(v110, v150);
      swift_release();
      sub_10000BE50((uint64_t)v168);
      uint64_t v124 = v159;
      unint64_t v125 = *(void (**)(uint64_t, uint64_t))(v160 + 8);
      v125(v112, v159);
      (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v113, v111);
      swift_bridgeObjectRelease();
      swift_release();
      v125((uint64_t)v136, v124);
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v171);
      swift_release();

      return swift_release();
    }
    __break(1u);
    goto LABEL_27;
  }
  swift_release_n();
  id v131 = v163;

  swift_release();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100014B6C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a2;
  uint64_t v30 = 0;
  int64_t v7 = 0;
  uint64_t v10 = *(void *)(a3 + 56);
  uint64_t v8 = a3 + 56;
  uint64_t v9 = v10;
  uint64_t v11 = 1 << *(unsigned char *)(v8 - 24);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v9;
  uint64_t v31 = v8;
  int64_t v32 = (unint64_t)(v11 + 63) >> 6;
  while (v13)
  {
    unint64_t v14 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v15 = v14 | (v7 << 6);
LABEL_21:
    id v19 = *(id *)(*(void *)(a3 + 48) + 8 * v15);
    id v20 = objc_msgSend(v19, "bundleIdentifier", v28);
    if (v20)
    {
      uint64_t v21 = v20;
      uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v24 = v23;

      if (v22 == a4 && v24 == a5)
      {

        swift_bridgeObjectRelease();
      }
      else
      {
        char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        if ((v26 & 1) == 0) {
          goto LABEL_29;
        }
      }
    }
    else
    {

LABEL_29:
      *(unint64_t *)((char *)a1 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      if (__OFADD__(v30++, 1))
      {
        __break(1u);
LABEL_32:
        swift_retain();
        sub_10000C0AC(a1, v28, v30, a3);
        return;
      }
    }
  }
  int64_t v16 = v7 + 1;
  if (__OFADD__(v7, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if (v16 >= v32) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v31 + 8 * v16);
  ++v7;
  if (v17) {
    goto LABEL_20;
  }
  int64_t v7 = v16 + 1;
  if (v16 + 1 >= v32) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v31 + 8 * v7);
  if (v17) {
    goto LABEL_20;
  }
  int64_t v7 = v16 + 2;
  if (v16 + 2 >= v32) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v31 + 8 * v7);
  if (v17)
  {
LABEL_20:
    unint64_t v13 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v7 << 6);
    goto LABEL_21;
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v32) {
    goto LABEL_32;
  }
  unint64_t v17 = *(void *)(v31 + 8 * v18);
  if (v17)
  {
    int64_t v7 = v18;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v7 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v7 >= v32) {
      goto LABEL_32;
    }
    unint64_t v17 = *(void *)(v31 + 8 * v7);
    ++v18;
    if (v17) {
      goto LABEL_20;
    }
  }
LABEL_34:
  __break(1u);
}

uint64_t sub_100014DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v7 = *(unsigned char *)(a1 + 32);
  unsigned int v8 = v7 & 0x3F;
  unint64_t v9 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v10 = 8 * v9;
  uint64_t isStackAllocationSafe = swift_bridgeObjectRetain_n();
  if (v8 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v12);
    bzero((char *)&v18 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0), v10);
    swift_bridgeObjectRetain();
    sub_100014B6C((unint64_t *)((char *)&v18 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0)), v9, a1, a2, a3);
    uint64_t v14 = v13;
    swift_release();
    swift_bridgeObjectRelease();
    if (v3) {
      swift_willThrow();
    }
    swift_bridgeObjectRelease_n();
  }
  else
  {
    unint64_t v15 = (void *)swift_slowAlloc();
    bzero(v15, v10);
    swift_bridgeObjectRetain();
    sub_100014B6C((unint64_t *)v15, v9, a1, a2, a3);
    uint64_t v14 = v16;
    swift_release();
    swift_bridgeObjectRelease();
    swift_slowDealloc();
    swift_bridgeObjectRelease_n();
  }
  return v14;
}

Swift::Int sub_100014F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_100014DB4(a1, a2, a3);
  }
  swift_bridgeObjectRetain();
  __CocoaSet.makeIterator()();
  if (__CocoaSet.Iterator.next()())
  {
    sub_100015694();
    while (1)
    {
      swift_dynamicCast();
      id v11 = [v22 bundleIdentifier];
      if (!v11) {
        break;
      }
      uint64_t v12 = v11;
      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v15 = v14;

      if (v13 == a2 && v15 == a3)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v17 & 1) == 0) {
          break;
        }
      }

LABEL_7:
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_27;
      }
    }
    if (*((void *)&_swiftEmptySetSingleton + 3) <= *((void *)&_swiftEmptySetSingleton + 2)) {
      sub_10003F6AC();
    }
    Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
    uint64_t v6 = (char *)&_swiftEmptySetSingleton + 56;
    uint64_t v7 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
    unint64_t v8 = result & ~v7;
    unint64_t v9 = v8 >> 6;
    if (((-1 << v8) & ~*((void *)&_swiftEmptySetSingleton + (v8 >> 6) + 7)) != 0)
    {
      unint64_t v10 = __clz(__rbit64((-1 << v8) & ~*((void *)&_swiftEmptySetSingleton + (v8 >> 6) + 7))) | v8 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v18 = 0;
      unint64_t v19 = (unint64_t)(63 - v7) >> 6;
      do
      {
        if (++v9 == v19 && (v18 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        BOOL v20 = v9 == v19;
        if (v9 == v19) {
          unint64_t v9 = 0;
        }
        v18 |= v20;
        uint64_t v21 = *(void *)&v6[8 * v9];
      }
      while (v21 == -1);
      unint64_t v10 = __clz(__rbit64(~v21)) + (v9 << 6);
    }
    *(void *)&v6[(v10 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v10;
    *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v10) = v22;
    ++*((void *)&_swiftEmptySetSingleton + 2);
    goto LABEL_7;
  }
LABEL_27:
  swift_bridgeObjectRelease();
  swift_release();
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_100015210(void *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v28 = a4;
  uint64_t v29 = a3;
  uint64_t v27 = a2;
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  unint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.authorization.getter();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    char v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Revoke internal authorization", v17, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_10000BE0C(a1 + 5, a1[8]);
  dispatch thunk of Locatable.familyControlsInternalAuthorization.getter();
  sub_100046890(&_swiftEmptyArrayStorage);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  char v18 = (id *)sub_10000BE0C(a1 + 10, a1[13]);
  id v19 = *v18;
  id v20 = objc_msgSend(*v18, "deviceActivity", v27, v28);
  id v21 = [v20 allowedClients];

  if (v21)
  {
    sub_100015694();
    sub_100015E4C((unint64_t *)&qword_100073C40, (void (*)(uint64_t))sub_100015694);
    uint64_t v22 = static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v22 = 0;
  }
  id v23 = [v19 deviceActivity];
  if (v22)
  {
    sub_100014F8C(v22, 0xD000000000000014, 0x8000000100060BA0);
    sub_100015694();
    sub_100015E4C((unint64_t *)&qword_100073C40, (void (*)(uint64_t))sub_100015694);
    v24.super.isa = Set._bridgeToObjectiveC()().super.isa;
    swift_release();
  }
  else
  {
    v24.super.isa = 0;
  }
  [v23 setAllowedClients:v24.super.isa];

  if ((sub_100007D7C() & 1) == 0)
  {
    id v25 = objc_msgSend((id)*sub_10000BE0C(a1 + 10, a1[13]), "deviceActivity");
    [v25 setSharingAppleIDs:0];
  }
  if (!sub_100008EFC())
  {
    if (qword_100073A38 != -1) {
      swift_once();
    }
    sub_100051518();
  }
  return v29(0);
}

unint64_t sub_100015694()
{
  unint64_t result = qword_100073C38;
  if (!qword_100073C38)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100073C38);
  }
  return result;
}

uint64_t sub_1000156D4()
{
  return sub_1000160B0(40);
}

uint64_t sub_1000156DC(uint64_t a1, char a2)
{
  return sub_10002FE08(a1, a2 & 1, v2[2], v2[3], v2[4]);
}

uint64_t sub_1000156F4()
{
  return sub_1000160B0(48);
}

uint64_t sub_1000156FC()
{
  return sub_1000173F4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char **)(v0 + 40));
}

uint64_t sub_100015708()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100015718()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100015740(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100015750()
{
  return swift_release();
}

uint64_t sub_100015758(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_100007370(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000157B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007370(&qword_100073DD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100015820()
{
  return sub_1000160B0(48);
}

uint64_t sub_100015828()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100015838()
{
  return sub_1000160B0(40);
}

uint64_t sub_100015844()
{
  uint64_t v1 = type metadata accessor for AuthorizationRecord();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 152) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v0 + 16);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v0 + 56);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v0 + 96);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release();

  return _swift_deallocObject(v0, v11, v10);
}

uint64_t sub_1000159CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AuthorizationRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (uint8_t *)(v1 + v7);
  uint64_t v9 = v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))v9;
  uint64_t v11 = *(void *)(v9 + 8);

  return sub_10000B4AC(a1, v1 + 16, v1 + v4, v8, v10, v11);
}

uint64_t sub_100015AD4()
{
  return sub_1000160B0(48);
}

uint64_t sub_100015ADC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100015AEC()
{
  return sub_1000160B0(40);
}

uint64_t sub_100015AF4()
{
  uint64_t v1 = type metadata accessor for AuthorizationRecord();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 136) & ~v8;
  uint64_t v12 = v3 | v8 | 7;
  unint64_t v10 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v0 + v5);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v0 + v5 + 40);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v0 + v5 + 80);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release();

  return _swift_deallocObject(v0, v10 + 16, v12);
}

uint64_t sub_100015C98(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AuthorizationRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 136) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = v1 + v7;
  uint64_t v9 = v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))v9;
  uint64_t v11 = *(void *)(v9 + 8);

  return sub_100009E70(a1, (uint8_t *)(v1 + v4), (char *)(v1 + v5), v8, v10, v11);
}

uint64_t sub_100015DAC()
{
  return sub_1000160B0(48);
}

uint64_t sub_100015DB4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100015DC8(uint64_t a1)
{
  return sub_10002F910(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_100015DDC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_100015E34()
{
  return sub_1000160B0(48);
}

uint64_t sub_100015E3C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100015E4C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100015E98()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100015ED8(uint64_t a1)
{
  return sub_10002E640(a1, *(void *)(v1 + 16), *(void (**)(id, uint64_t))(v1 + 24));
}

uint64_t sub_100015EE8()
{
  uint64_t v1 = type metadata accessor for AuthorizationRecord();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 143) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v8 = v0 + v6;
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v8);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v8 + 40);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v8 + 80);
  swift_release();
  sub_10000BF6C(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8));
  swift_release();

  return _swift_deallocObject(v0, ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

uint64_t sub_100015FE0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AuthorizationRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 143) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = (v1 + v4);
  uint64_t v9 = *(void *)(v1 + v5);
  unint64_t v10 = *(void **)(v1 + v7);
  unint64_t v11 = *(void *)(v1 + v7 + 8);
  uint64_t v12 = v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v13 = *(void (**)(void *))v12;
  uint64_t v14 = *(void *)(v12 + 8);

  return sub_100009498(a1, v8, v9, v1 + v6, v10, v11, v13, v14);
}

uint64_t sub_1000160A8()
{
  return sub_1000160B0(48);
}

uint64_t sub_1000160B0(uint64_t a1)
{
  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000160FC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001613C()
{
  id v1 = [*v0 receivedInvitations];
  sub_100016650();
  sub_100016690();
  uint64_t v2 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

void sub_1000161A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
}

void sub_1000161C4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  unint64_t v6 = v5;
  uint64_t v12 = sub_100007370(&qword_100073CC0);
  __chkstk_darwin(v12 - 8, v13);
  uint64_t v15 = (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000165E8(a2, (uint64_t)v15);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
  }
  if (a4)
  {
    aBlock[4] = a4;
    aBlock[5] = a5;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100016394;
    aBlock[3] = &unk_10006E450;
    a4 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
  }
  [v6 sendInvitationToDestination:a1 expirationDate:isa context:a3 serverAcknowledgedBlock:a4];
  _Block_release(a4);
}

void sub_100016394(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_100016420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7 = *v4;
  if (a3)
  {
    v9[4] = a3;
    v9[5] = a4;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_10004BC8C;
    v9[3] = &unk_10006E428;
    uint64_t v8 = _Block_copy(v9);
    swift_retain();
    swift_release();
  }
  else
  {
    uint64_t v8 = 0;
  }
  [v7 acceptInvitation:a1 withContext:a2 serverAcknowledgedBlock:v8];
  _Block_release(v8);
}

void sub_1000164FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = *v3;
  if (a2)
  {
    v7[4] = a2;
    v7[5] = a3;
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1107296256;
    v7[2] = sub_10004BC8C;
    v7[3] = &unk_10006E400;
    id v6 = _Block_copy(v7);
    swift_retain();
    swift_release();
  }
  else
  {
    id v6 = 0;
  }
  [v5 declineInvitation:a1 serverAcknowledgedBlock:v6];
  _Block_release(v6);
}

uint64_t sub_1000165D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000165E0()
{
  return swift_release();
}

uint64_t sub_1000165E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007370(&qword_100073CC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100016650()
{
  unint64_t result = qword_100073CC8;
  if (!qword_100073CC8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100073CC8);
  }
  return result;
}

unint64_t sub_100016690()
{
  unint64_t result = qword_100073CD0;
  if (!qword_100073CD0)
  {
    sub_100016650();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100073CD0);
  }
  return result;
}

uint64_t sub_1000166F8()
{
  CFErrorRef error = 0;
  CFStringRef v1 = SecTaskCopySigningIdentifier(v0, &error);
  if (v1)
  {
    uint64_t v2 = (__CFString *)v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    CFErrorRef v4 = error;
    uint64_t result = v3;
    if (!error) {
      return result;
    }
    goto LABEL_3;
  }
  id v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    v11[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446210;
    swift_beginAccess();
    sub_100007370(&qword_100073D40);
    uint64_t v9 = String.init<A>(describing:)();
    sub_1000067CC(v9, v10, v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to extract bundle identifier from SecTask: %{public}s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  swift_beginAccess();
  uint64_t v3 = 0;
  uint64_t result = 0;
  CFErrorRef v4 = error;
  if (error)
  {
LABEL_3:

    return v3;
  }
  return result;
}

_UNKNOWN **sub_100016910()
{
  return &off_100073D48;
}

id sub_10001691C@<X0>(void *a1@<X8>)
{
  id result = [(id)swift_getObjCClassFromMetadata() sharedInstance];
  *a1 = result;
  return result;
}

unint64_t sub_10001695C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7, uint64_t a8)
{
  return (unint64_t)sub_100016984(a1, a2, a3, a4, a5, a6, a7, a8) & 1;
}

id sub_100016984(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, NSString a5, uint64_t a6, void *a7, uint64_t a8)
{
  NSString v13 = a3;
  if (a1)
  {
    v14.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    if (!v13) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  v14.super.Class isa = 0;
  if (a3) {
LABEL_3:
  }
    NSString v13 = String._bridgeToObjectiveC()();
LABEL_4:
  if (a5) {
    a5 = String._bridgeToObjectiveC()();
  }
  if (a7)
  {
    v17[4] = a7;
    v17[5] = a8;
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 1107296256;
    v17[2] = sub_100016ADC;
    v17[3] = &unk_10006E478;
    a7 = _Block_copy(v17);
    swift_retain();
    swift_release();
  }
  id v15 = [v8 refreshIDStatusForDestinations:v14.super.isa service:v13 listenerID:a5 queue:a6 completionBlock:a7];
  _Block_release(a7);

  return v15;
}

uint64_t sub_100016ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void (**)(uint64_t))(a1 + 32);
  if (a2) {
    uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  swift_retain();
  v2(v3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100016B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100016B7C()
{
  return swift_release();
}

uint64_t sub_100016B84(char a1)
{
  if (!a1) {
    return 0xD000000000000010;
  }
  if (a1 == 1) {
    return 0x6E614D4D444D6F6ELL;
  }
  return 7105633;
}

uint64_t sub_100016BE4(char a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  id v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v7 = os_variant_allows_internal_security_policies();
  unsigned __int8 v36 = 0;
  id v8 = objc_allocWithZone((Class)NSUserDefaults);
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 initWithSuiteName:v9];

  if (v10)
  {
    NSString v11 = String._bridgeToObjectiveC()();
    unsigned int v12 = [v10 BOOLForKey:v11];

    if (v12)
    {

      char v13 = 1;
LABEL_8:
      unsigned __int8 v36 = v13;
      goto LABEL_10;
    }
    NSString v14 = String._bridgeToObjectiveC()();
    unsigned __int8 v15 = [v10 BOOLForKey:v14];

    char v16 = a1;
    NSString v17 = String._bridgeToObjectiveC()();
    unsigned __int8 v18 = [v10 BOOLForKey:v17];

    a1 = v16;
    if (v16 == 2)
    {
      char v13 = v15 & v18;
      goto LABEL_8;
    }
    if (v16 == 1) {
      unsigned __int8 v36 = v18;
    }
    else {
      unsigned __int8 v36 = v15;
    }
  }
LABEL_10:
  static Logger.permissions.getter();
  id v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v30 = v3;
    uint64_t v32 = v2;
    uint64_t v21 = swift_slowAlloc();
    v35[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136315650;
    int v31 = v7;
    if (v7) {
      uint64_t v22 = 0;
    }
    else {
      uint64_t v22 = 1953459744;
    }
    if (v7) {
      unint64_t v23 = 0xE000000000000000;
    }
    else {
      unint64_t v23 = 0xE400000000000000;
    }
    uint64_t v34 = sub_1000067CC(v22, v23, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 12) = 2080;
    if (a1)
    {
      if (a1 == 1)
      {
        unint64_t v24 = 0xEF746E656D656761;
        uint64_t v25 = 0x6E614D4D444D6F6ELL;
      }
      else
      {
        unint64_t v24 = 0xE300000000000000;
        uint64_t v25 = 7105633;
      }
    }
    else
    {
      uint64_t v25 = 0xD000000000000010;
      unint64_t v24 = 0x8000000100060CD0;
    }
    uint64_t v34 = sub_1000067CC(v25, v24, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    swift_beginAccess();
    if (v36) {
      uint64_t v27 = 0;
    }
    else {
      uint64_t v27 = 1953459744;
    }
    if (v36) {
      unint64_t v28 = 0xE000000000000000;
    }
    else {
      unint64_t v28 = 0xE400000000000000;
    }
    uint64_t v33 = sub_1000067CC(v27, v28, v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "This device is%s internal and the permission requirement %s is%s overridden.", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v32);
    if (v31) {
      goto LABEL_31;
    }
    return 0;
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  if (!v7) {
    return 0;
  }
LABEL_31:
  swift_beginAccess();
  return v36;
}

char *sub_100017084()
{
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v2);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5, v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v7 - 8, v8);
  uint64_t v9 = OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_anonymousListener;
  id v10 = self;
  NSString v11 = v0;
  *(void *)&v0[v9] = [v10 anonymousListener];
  uint64_t v12 = OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_syncQueue;
  sub_10001958C(0, (unint64_t *)&qword_100073ED0);
  static DispatchQoS.unspecified.getter();
  unint64_t v24 = &_swiftEmptyArrayStorage;
  sub_1000195C8(&qword_100073ED8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007370(&qword_100073EE0);
  sub_100019610();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v22);
  *(void *)&v11[v12] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  char v13 = &v11[OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_requestCompletionHandler];
  *(void *)char v13 = 0;
  *((void *)v13 + 1) = 0;
  NSString v14 = &v11[OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_requestResponse];
  uint64_t v15 = sub_100007370(&qword_100073DD0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);

  char v16 = (objc_class *)type metadata accessor for AuthorizationAuthenticator();
  v23.receiver = v11;
  v23.super_class = v16;
  NSString v17 = (char *)objc_msgSendSuper2(&v23, "init");
  unsigned __int8 v18 = *(void **)&v17[OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_anonymousListener];
  id v19 = v17;
  [v18 setDelegate:v19];
  id v20 = v18;
  [v20 resume];

  return v19;
}

uint64_t sub_1000173F4(uint64_t result, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v4 = (void *)(result + OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_requestCompletionHandler);
  if (!*(void *)(result + OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_requestCompletionHandler))
  {
    *uint64_t v4 = a2;
    v4[1] = a3;
    swift_retain();
    id result = sub_100018E74(0);
    *a4 = 1;
  }
  return result;
}

void sub_10001744C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  id v7 = objc_allocWithZone((Class)SBSRemoteAlertDefinition);
  NSString v8 = String._bridgeToObjectiveC()();
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v7 initWithServiceName:v8 viewControllerClassName:v9];

  id v11 = [objc_allocWithZone((Class)SBSRemoteAlertConfigurationContext) init];
  id v12 = [*(id *)(v4 + OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_anonymousListener) endpoint];
  id v13 = [v12 _endpoint];

  [v11 setXpcEndpoint:v13];
  swift_unknownObjectRelease();
  sub_100007370(&qword_100073EC8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10005FBB0;
  type metadata accessor for FamilyControlsAuthenticationUIService();
  *(void *)(inited + 32) = static FamilyControlsAuthenticationUIService.ServiceTypeKey.getter();
  *(void *)(inited + 40) = v15;
  uint64_t v16 = FamilyControlsAuthenticationUIService.ServiceType.rawValue.getter();
  *(void *)(inited + 72) = &type metadata for Int;
  *(void *)(inited + 48) = v16;
  *(void *)(inited + 80) = static FamilyControlsAuthenticationUIService.ServiceBundleIdentifierKey.getter();
  *(void *)(inited + 88) = v17;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 96) = a2;
  *(void *)(inited + 104) = a3;
  swift_bridgeObjectRetain();
  *(void *)(inited + 128) = static FamilyControlsAuthenticationUIService.ServiceMemberKey.getter();
  *(void *)(inited + 136) = v18;
  uint64_t v19 = FamilyControlsMember.rawValue.getter();
  *(void *)(inited + 168) = &type metadata for Int;
  *(void *)(inited + 144) = v19;
  unint64_t v20 = sub_10004A020(inited);
  sub_10001CB5C(v20);
  swift_bridgeObjectRelease();
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v11 setUserInfo:isa];

  id v22 = [self newHandleWithDefinition:v10 configurationContext:v11];
  id v23 = [objc_allocWithZone((Class)SBSRemoteAlertActivationContext) init];
  [v22 registerObserver:v4];
  [v22 activateWithContext:v23];
}

id sub_100017700()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AuthorizationAuthenticator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000177A4()
{
  return type metadata accessor for AuthorizationAuthenticator();
}

uint64_t type metadata accessor for AuthorizationAuthenticator()
{
  uint64_t result = qword_100073DB8;
  if (!qword_100073DB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1000177F8()
{
  sub_1000178A4();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_1000178A4()
{
  if (!qword_100073DC8)
  {
    sub_10000BF24(&qword_100073DD0);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100073DC8);
    }
  }
}

uint64_t sub_100017958(void *a1)
{
  objc_super v2 = (uint8_t *)sub_100007370(&qword_100073DD0);
  uint64_t v71 = *((void *)v2 - 1);
  uint64_t v4 = __chkstk_darwin(v2, v3);
  uint64_t v70 = (uint8_t **)((char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4, v6);
  uint64_t v63 = (uint64_t)&v62 - v7;
  uint64_t v8 = sub_100007370((uint64_t *)&unk_100073EA0);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  id v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v62 - v14;
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v65 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v64 = (char *)&v62 - v23;
  __chkstk_darwin(v22, v24);
  char v26 = (char *)&v62 - v25;
  static Logger.authentication.getter();
  uint64_t v27 = a1;
  unint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v67 = v12;
  if (v30)
  {
    uint64_t v31 = v16;
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v33 = (void *)swift_slowAlloc();
    uint64_t v68 = v15;
    int v66 = v32;
    *(_DWORD *)uint64_t v32 = 138543362;
    uint64_t v62 = v32 + 4;
    aBlock[0] = v27;
    uint64_t v34 = v27;
    uint64_t v72 = v17;
    uint64_t v35 = v34;
    uint64_t v16 = v31;
    uint64_t v15 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v33 = v27;

    uint64_t v17 = v72;
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Did deactivate service: %{public}@", v66, 0xCu);
    sub_100007370(&qword_100073EC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    unint64_t v28 = v27;
  }

  uint64_t v37 = *(char **)(v17 + 8);
  uint64_t v36 = v17 + 8;
  uint64_t v38 = v16;
  uint64_t v68 = v37;
  ((void (*)(char *, uint64_t))v37)(v26, v16);
  v74[0] = 0;
  v74[1] = 0;
  uint64_t v39 = *(void (**)(char *, uint64_t, uint64_t, uint8_t *))(v71 + 56);
  int v66 = v2;
  v39(v15, 1, 1, v2);
  uint64_t v40 = v69;
  uint64_t v41 = *(NSObject **)&v69[OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_syncQueue];
  uint64_t v42 = (void *)swift_allocObject();
  v42[2] = v74;
  v42[3] = v40;
  v42[4] = v15;
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = sub_100019490;
  *(void *)(v43 + 24) = v42;
  aBlock[4] = sub_10001966C;
  aBlock[5] = v43;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000BDAC;
  aBlock[3] = &unk_10006E580;
  uint64_t v44 = _Block_copy(aBlock);
  id v45 = v40;
  swift_retain();
  swift_release();
  dispatch_sync(v41, v44);
  _Block_release(v44);
  LOBYTE(v44) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if (v44)
  {
    __break(1u);
  }
  else
  {
    uint64_t v72 = v36;
    uint64_t v47 = (void (*)(void *))v74[0];
    if (v74[0])
    {
      uint64_t v69 = (char *)v38;
      uint64_t v48 = (uint64_t)v67;
      sub_1000194AC((uint64_t)v15, (uint64_t)v67);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint8_t *))(v71 + 48))(v48, 1, v66) == 1)
      {
        swift_retain();
        sub_100015758(v48, (uint64_t *)&unk_100073EA0);
        uint64_t v49 = v64;
        static Logger.authentication.getter();
        uint64_t v50 = Logger.logObject.getter();
        os_log_type_t v51 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v50, v51))
        {
          uint64_t v52 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v52 = 0;
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Service deactivated without returning a response. Treating it as a cancel.", v52, 2u);
          swift_slowDealloc();
        }

        ((void (*)(char *, char *))v68)(v49, v69);
        uint64_t v53 = type metadata accessor for FamilyControlsError();
        sub_1000195C8(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
        uint64_t v54 = swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v53 - 8) + 104))(v55, enum case for FamilyControlsError.authorizationCanceled(_:), v53);
        *uint64_t v70 = v54;
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        uint64_t v60 = v63;
        sub_100019514(v48, v63);
        swift_retain();
        uint64_t v70 = (void *)v60;
      }
      uint64_t v61 = (uint64_t)v70;
      v47(v70);
      sub_100018E74((uint64_t)v47);
      sub_100015758(v61, &qword_100073DD0);
    }
    else
    {
      uint64_t v56 = v65;
      static Logger.authentication.getter();
      id v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v59 = 0;
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Missing authentication request completion handler", v59, 2u);
        swift_slowDealloc();
      }

      ((void (*)(char *, uint64_t))v68)(v56, v38);
    }
    sub_100015758((uint64_t)v15, (uint64_t *)&unk_100073EA0);
    sub_100018E74(v74[0]);
    return swift_release();
  }
  return result;
}

uint64_t sub_1000180CC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100007370((uint64_t *)&unk_100073EA0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = &v18[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = (uint64_t *)(a2 + OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_requestCompletionHandler);
  uint64_t v11 = *(void *)(a2 + OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_requestCompletionHandler);
  uint64_t v12 = *(void *)(a2 + OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_requestCompletionHandler + 8);
  uint64_t v13 = *a1;
  *a1 = v11;
  a1[1] = v12;
  sub_10001957C(v11);
  sub_100018E74(v13);
  uint64_t v14 = a2 + OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_requestResponse;
  swift_beginAccess();
  sub_1000194AC(v14, (uint64_t)v9);
  sub_100018F08((uint64_t)v9, a3);
  uint64_t v15 = *v10;
  *uint64_t v10 = 0;
  v10[1] = 0;
  sub_100018E74(v15);
  uint64_t v16 = sub_100007370(&qword_100073DD0);
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 1, 1, v16);
  swift_beginAccess();
  sub_100018F08((uint64_t)v9, v14);
  return swift_endAccess();
}

uint64_t sub_100018310(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v24 - v12;
  sub_10001958C(0, &qword_100073EB0);
  char v14 = static NSObject.== infix(_:_:)();
  if (v14)
  {
    static Logger.authentication.getter();
    uint64_t v15 = a2;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v24 = v3;
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 67109120;
      unsigned int v25 = [v15 processIdentifier];
      uint64_t v3 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received connection from process %d", v18, 8u);
      swift_slowDealloc();
    }
    else
    {

      uint64_t v16 = v15;
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
    type metadata accessor for FamilyControlsAuthenticationUIService();
    uint64_t v22 = (void *)static FamilyControlsAuthenticationUIService.agentInterface.getter();
    [v15 setExportedInterface:v22];

    [v15 setExportedObject:v3];
    [v15 resume];
  }
  else
  {
    static Logger.authentication.getter();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Received connection for unknown listener", v21, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }
  return v14 & 1;
}

uint64_t sub_10001866C(void *a1, uint64_t a2)
{
  uint64_t v5 = *(NSObject **)&v2[OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_syncQueue];
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = v2;
  v6[3] = a2;
  v6[4] = a1;
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_100018ECC;
  *(void *)(v7 + 24) = v6;
  v13[4] = sub_100018EE8;
  v13[5] = v7;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_10000BDAC;
  v13[3] = &unk_10006E508;
  uint64_t v8 = _Block_copy(v13);
  uint64_t v9 = v2;
  swift_errorRetain();
  id v10 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v5, v8);
  _Block_release(v8);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000187E0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  uint64_t v8 = __chkstk_darwin(v6, v7);
  id v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v14 = sub_100007370(&qword_100073E98);
  __chkstk_darwin(v14 - 8, v15);
  os_log_type_t v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AuthorizationStatus();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  uint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100007370((uint64_t *)&unk_100073EA0);
  __chkstk_darwin(v23 - 8, v24);
  char v26 = (uint64_t *)((char *)&v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v44 = a1;
  if (*(void *)(a1 + OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_requestCompletionHandler))
  {
    if (a2)
    {
      uint64_t *v26 = a2;
      uint64_t v27 = sub_100007370(&qword_100073DD0);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v26, 0, 1, v27);
      uint64_t v28 = v44 + OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_requestResponse;
      swift_beginAccess();
      swift_errorRetain();
    }
    else
    {
      if (a3)
      {
        [a3 integerValue];
        AuthorizationStatus.init(rawValue:)();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v17, v18);
          (*(void (**)(uint64_t *, char *, uint64_t))(v19 + 16))(v26, v22, v18);
          uint64_t v40 = sub_100007370(&qword_100073DD0);
          swift_storeEnumTagMultiPayload();
          (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v26, 0, 1, v40);
          uint64_t v41 = v44 + OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_requestResponse;
          swift_beginAccess();
          sub_100018F08((uint64_t)v26, v41);
          swift_endAccess();
          return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v22, v18);
        }
        sub_100015758((uint64_t)v17, &qword_100073E98);
      }
      static Logger.authentication.getter();
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unknown authentication UI results. Treating it as a cancel.", v35, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v42 + 8))(v13, v43);
      uint64_t v36 = type metadata accessor for FamilyControlsError();
      sub_1000195C8(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
      uint64_t v37 = swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v36 - 8) + 104))(v38, enum case for FamilyControlsError.authorizationCanceled(_:), v36);
      uint64_t *v26 = v37;
      uint64_t v39 = sub_100007370(&qword_100073DD0);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v26, 0, 1, v39);
      uint64_t v28 = v44 + OBJC_IVAR____TtC19FamilyControlsAgent26AuthorizationAuthenticator_requestResponse;
      swift_beginAccess();
    }
    sub_100018F08((uint64_t)v26, v28);
    return swift_endAccess();
  }
  else
  {
    static Logger.authentication.getter();
    os_log_type_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Request completion handler is missing. Ignoring response.", v31, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v10, v43);
  }
}

uint64_t sub_100018E74(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_100018E84()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100018ECC()
{
  return sub_1000187E0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t sub_100018ED8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100018EE8()
{
  return sub_10000BD84(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_100018EF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100018F00()
{
  return swift_release();
}

uint64_t sub_100018F08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007370((uint64_t *)&unk_100073EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100018F70(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.authentication.getter();
  uint64_t v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v17 = v2;
    uint64_t v10 = swift_slowAlloc();
    uint64_t v16 = v3;
    uint64_t v11 = (uint8_t *)v10;
    uint64_t v12 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 138543362;
    uint64_t v18 = v7;
    uint64_t v13 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v12 = v7;

    uint64_t v2 = v17;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Did activate service: %{public}@", v11, 0xCu);
    sub_100007370(&qword_100073EC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v16;
    swift_slowDealloc();
  }
  else
  {

    uint64_t v8 = v7;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

uint64_t sub_10001916C(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.authentication.getter();
  id v9 = a1;
  swift_errorRetain();
  id v10 = v9;
  swift_errorRetain();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v25 = v5;
    uint64_t v14 = v13;
    uint64_t v15 = swift_slowAlloc();
    os_log_t v22 = v11;
    uint64_t v16 = (void *)v15;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v26 = (uint64_t)v10;
    uint64_t v27 = v23;
    *(_DWORD *)uint64_t v14 = 138543618;
    uint64_t v24 = v4;
    id v17 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v16 = v10;

    *(_WORD *)(v14 + 12) = 2082;
    uint64_t v26 = a2;
    swift_errorRetain();
    sub_100007370(&qword_100073EB8);
    uint64_t v18 = String.init<A>(describing:)();
    uint64_t v26 = sub_1000067CC(v18, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    os_log_t v20 = v22;
    _os_log_impl((void *)&_mh_execute_header, v22, v12, "Did invalidate service: %{public}@ with error: %{public}s", (uint8_t *)v14, 0x16u);
    sub_100007370(&qword_100073EC0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v8, v24);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
}

uint64_t sub_100019458()
{
  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100019490()
{
  return sub_1000180CC(*(uint64_t **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10001949C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000194AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007370((uint64_t *)&unk_100073EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100019514(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007370(&qword_100073DD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001957C(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10001958C(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000195C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100019610()
{
  unint64_t result = qword_100073EE8;
  if (!qword_100073EE8)
  {
    sub_10000BF24(&qword_100073EE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100073EE8);
  }
  return result;
}

unint64_t sub_100019678(char a1)
{
  unint64_t result = 0xD000000000000023;
  if (a1 == 1) {
    return 0xD000000000000027;
  }
  return result;
}

BOOL sub_100019798(uint64_t a1)
{
  sub_10001A934(a1, (uint64_t)v9);
  if (v10)
  {
    type metadata accessor for LabelSlotTag();
    if (swift_dynamicCast())
    {
      uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC19FamilyControlsAgent12LabelSlotTag_activityItem);
      uint64_t v3 = *(void *)&v8[OBJC_IVAR____TtC19FamilyControlsAgent12LabelSlotTag_activityItem];
      BOOL v4 = *(void *)(v2 + 24) == *(void *)(v3 + 24) && *(void *)(v2 + 32) == *(void *)(v3 + 32);
      if (v4 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        uint64_t v5 = LabelSlotType.rawValue.getter();
        uint64_t v6 = LabelSlotType.rawValue.getter();

        return v5 == v6;
      }
    }
  }
  else
  {
    sub_10001A8D4((uint64_t)v9);
  }
  return 0;
}

id sub_100019920()
{
  return sub_100019BF0(type metadata accessor for LabelSlotTag);
}

uint64_t type metadata accessor for LabelSlotTag()
{
  return self;
}

id sub_1000199DC()
{
  return sub_100019BF0(type metadata accessor for TextDrawing);
}

uint64_t type metadata accessor for TextDrawing()
{
  return self;
}

id sub_100019BD8()
{
  return sub_100019BF0(type metadata accessor for FamilyActivityDrawer);
}

id sub_100019BF0(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for FamilyActivityDrawer()
{
  return self;
}

unint64_t sub_100019C64(char a1)
{
  unint64_t result = 0xD000000000000022;
  if (a1)
  {
    if (a1 == 1) {
      return 0xD000000000000041;
    }
    else {
      return 0xD000000000000045;
    }
  }
  return result;
}

BOOL sub_100019CC4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100019CD8()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100019D20()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100019D4C()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

unint64_t sub_100019D90()
{
  return sub_100019C64(*v0);
}

double sub_100019DB0(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for EnvironmentValues();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2) {
    return *(double *)&a1;
  }
  swift_retain();
  os_log_type_t v9 = static os_log_type_t.fault.getter();
  uint64_t v10 = static Log.runtimeIssuesLog.getter();
  os_log_type_t v11 = v9;
  if (os_log_type_enabled(v10, v9))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v12 = 136315138;
    uint64_t v14 = sub_1000067CC(0x74616F6C464743, 0xE700000000000000, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath();
  sub_10001A8C0(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return *(double *)&v15;
}

uint64_t sub_100019FBC@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.displayScale.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_100019FE8()
{
  return EnvironmentValues.displayScale.setter();
}

_OWORD *sub_10001A160(void *a1, void *a2)
{
  *(void *)&v2[OBJC_IVAR____TtC19FamilyControlsAgent11TextDrawing_tag] = a1;
  *(void *)&v2[OBJC_IVAR____TtC19FamilyControlsAgent11TextDrawing_style] = a2;
  uint64_t v5 = v2;
  a1;
  id v6 = a2;
  CTFontRef UIFontForLanguage = CTFontCreateUIFontForLanguage(kCTFontUIFontLabel, 20.0, 0);
  id v8 = [v6 userInterfaceStyle];
  os_log_type_t v9 = self;
  uint64_t v10 = &selRef_blackColor;
  if (v8) {
    uint64_t v10 = &selRef_whiteColor;
  }
  id v11 = [v9 *v10];
  id v12 = [v11 CGColor];

  sub_100007370((uint64_t *)&unk_100074060);
  uint64_t result = (_OWORD *)swift_initStackObject();
  result[1] = xmmword_10005FC80;
  *((void *)result + 4) = NSFontAttributeName;
  if (UIFontForLanguage)
  {
    uint64_t v14 = result;
    type metadata accessor for CTFont(0);
    v14[5] = UIFontForLanguage;
    v14[8] = v15;
    v14[9] = NSForegroundColorAttributeName;
    type metadata accessor for CGColor(0);
    v14[13] = v16;
    v14[10] = v12;
    id v17 = NSFontAttributeName;
    uint64_t v18 = UIFontForLanguage;
    unint64_t v19 = NSForegroundColorAttributeName;
    id v20 = v12;
    sub_10004A158((uint64_t)v14);
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    NSString v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    type metadata accessor for Key(0);
    sub_10001A99C(&qword_100073BA0, type metadata accessor for Key);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v23 = objc_msgSend(objc_allocWithZone((Class)UISTextLineDrawing), "initWithString:attributes:lineBreakMode:textAlignment:width:scale:", v21, isa, 2, 0, NAN, (double)objc_msgSend(v6, "displayScale"));

    *(void *)&v5[OBJC_IVAR____TtC19FamilyControlsAgent11TextDrawing_title] = v23;
    id v24 = v23;
    [v24 drawingSize];
    uint64_t v26 = v25;
    uint64_t v28 = v27;

    os_log_type_t v29 = &v5[OBJC_IVAR____TtC19FamilyControlsAgent11TextDrawing_drawingSize];
    *(void *)os_log_type_t v29 = v26;
    *((void *)v29 + 1) = v28;

    v30.receiver = v5;
    v30.super_class = (Class)type metadata accessor for TextDrawing();
    return objc_msgSendSuper2(&v30, "init");
  }
  else
  {
    __break(1u);
  }
  return result;
}

_OWORD *sub_10001A468(void *a1, uint64_t a2)
{
  sub_100007314(a2, (uint64_t)v14);
  type metadata accessor for LabelSlotTag();
  if (!swift_dynamicCast()) {
    return 0;
  }
  uint64_t v3 = *(void *)&v13[OBJC_IVAR____TtC19FamilyControlsAgent12LabelSlotTag_activityItem];
  if (*(unsigned char *)(v3 + 16) && *(unsigned char *)(v3 + 16) != 1)
  {
    swift_retain();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_retain();
  swift_bridgeObjectRelease();
  if (v4) {
    goto LABEL_10;
  }
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  uint64_t v6 = v14[0];
  unint64_t v5 = v14[1];
  swift_bridgeObjectRelease();
  uint64_t v7 = HIBYTE(v5) & 0xF;
  if ((v5 & 0x2000000000000000) == 0) {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFLL;
  }
  if (v7)
  {
LABEL_10:
    uint64_t v8 = LabelSlotType.rawValue.getter();
    if (v8 != LabelSlotType.rawValue.getter())
    {
      id v10 = objc_allocWithZone((Class)type metadata accessor for TextDrawing());
      id v11 = a1;
      os_log_type_t v9 = sub_10001A160(v13, v11);
      swift_release();

      return v9;
    }
  }

  swift_release();
  return 0;
}

id sub_10001A634(void *a1)
{
  type metadata accessor for LabelSlotTag();
  uint64_t v3 = swift_dynamicCastClass();
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = a1;
    uint64_t v6 = LabelSlotType.rawValue.getter();
    if (v6 == LabelSlotType.rawValue.getter())
    {
      id v7 = [self imageDescriptorNamed:kISImageDescriptorHomeScreen];
      uint64_t v8 = v1 + OBJC_IVAR____TtC19FamilyControlsAgent20FamilyActivityDrawer__displayScale;
      uint64_t v9 = *(void *)(v1 + OBJC_IVAR____TtC19FamilyControlsAgent20FamilyActivityDrawer__displayScale);
      char v10 = *(unsigned char *)(v8 + 8);
      sub_10001A8B4(v9, v10);
      double v11 = sub_100019DB0(v9, v10);
      sub_10001A8C0(v9, v10);
      [v7 setScale:v11];
      if (*(unsigned char *)(*(void *)(v4 + OBJC_IVAR____TtC19FamilyControlsAgent12LabelSlotTag_activityItem) + 16))
      {
        if (*(unsigned char *)(*(void *)(v4 + OBJC_IVAR____TtC19FamilyControlsAgent12LabelSlotTag_activityItem) + 16) == 1)
        {
          swift_bridgeObjectRetain();
          NSString v12 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          Class isa = sub_100049300(v12).super.isa;

          id v14 = [(objc_class *)isa CGImage];
LABEL_11:

          return v14;
        }
        NSString v20 = String._bridgeToObjectiveC()();
        id v18 = [self imageNamed:v20];

        id v19 = [v18 CGImage];
      }
      else
      {
        id v15 = objc_allocWithZone((Class)ISIcon);
        swift_bridgeObjectRetain();
        NSString v16 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v17 = [v15 initWithBundleIdentifier:v16];

        id v18 = [v17 prepareImageForDescriptor:v7];
        id v19 = [v18 CGImage];
      }
      id v14 = v19;

      goto LABEL_11;
    }
  }
  return 0;
}

uint64_t sub_10001A8B4(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_10001A8C0(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    return swift_release();
  }
  return result;
}

uint64_t sub_10001A8D4(uint64_t a1)
{
  uint64_t v2 = sub_100007370(&qword_100074070);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001A934(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007370(&qword_100074070);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10001A99C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10001A9E4(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned char *initializeBufferWithCopyOfBuffer for ActivityItem.ActivityItemType(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ActivityItem.ActivityItemType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for FamilyActivityLabelError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10001AB58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t sub_10001AB80(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_10001AB8C(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for FamilyActivityLabelError()
{
  return &type metadata for FamilyActivityLabelError;
}

unint64_t sub_10001ABA8()
{
  unint64_t result = qword_100074080;
  if (!qword_100074080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100074080);
  }
  return result;
}

unint64_t sub_10001AC00()
{
  unint64_t result = qword_100074088;
  if (!qword_100074088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100074088);
  }
  return result;
}

id sub_10001AC54@<X0>(void *a1@<X8>)
{
  id result = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) init];
  *a1 = result;
  return result;
}

uint64_t sub_10001AC90(uint64_t a1, uint64_t a2)
{
  v5[4] = a1;
  v5[5] = a2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_10004BC8C;
  v5[3] = &unk_10006E680;
  int v2 = _Block_copy(v5);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata();
  swift_retain();
  [ObjCClassFromMetadata synchronizeUsageWithCompletionHandler:v2];
  _Block_release(v2);
  return swift_release();
}

uint64_t sub_10001AD4C(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = *v4;
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  v12[4] = a3;
  v12[5] = a4;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_10001AE28;
  uint64_t v12[3] = &unk_10006E658;
  char v10 = _Block_copy(v12);
  swift_retain();
  [v8 fetchReportsDuringInterval:isa partitionInterval:v10 completionHandler:a1];
  _Block_release(v10);

  return swift_release();
}

uint64_t sub_10001AE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v8 = a2;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10001AF48();
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a3)
  {
    sub_100007370(&qword_100074098);
    a3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  if (a4)
  {
    sub_10001AF48();
    a4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v10 = a5;
  v9(v8, a3, a4, a5);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10001AF30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10001AF40()
{
  return swift_release();
}

unint64_t sub_10001AF48()
{
  unint64_t result = qword_100074090;
  if (!qword_100074090)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100074090);
  }
  return result;
}

id sub_10001AF90()
{
  id result = [self mainBundle];
  qword_1000740A0 = (uint64_t)result;
  return result;
}

void sub_10001AFCC()
{
  qword_1000740A8 = 0x617A696C61636F4CLL;
  unk_1000740B0 = 0xEB00000000656C62;
}

uint64_t sub_10001AFF8()
{
  uint64_t v0 = sub_100007370(&qword_1000740B8);
  __chkstk_darwin(v0 - 8, v1);
  int v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100073960 != -1) {
    swift_once();
  }
  unsigned int v4 = (void *)qword_1000740A0;
  NSString v5 = String._bridgeToObjectiveC()();
  if (qword_100073968 != -1) {
    swift_once();
  }
  NSString v6 = String._bridgeToObjectiveC()();
  id v7 = [v4 localizedStringForKey:v5 value:0 table:v6];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  static Locale.autoupdatingCurrent.getter();
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v3, 0, 1, v8);
  uint64_t v9 = String.init(format:locale:arguments:)();
  swift_bridgeObjectRelease();
  sub_10001B1C8((uint64_t)v3);
  return v9;
}

uint64_t sub_10001B1C8(uint64_t a1)
{
  uint64_t v2 = sub_100007370(&qword_1000740B8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_10001B228(uint64_t a1)
{
  return sub_10001B250(a1, (SEL *)&selRef_privateCloudDatabase, &qword_100074B50);
}

id sub_10001B23C(uint64_t a1)
{
  return sub_10001B250(a1, (SEL *)&selRef_sharedCloudDatabase, &qword_100074B58);
}

id sub_10001B250(uint64_t a1, SEL *a2, void *a3)
{
  if (qword_100073A48 != -1) {
    swift_once();
  }
  id result = [(id)qword_100074C60 *a2];
  *a3 = result;
  return result;
}

void sub_10001B2C0()
{
  qword_100074B60 = 0x7974697669746361;
  *(void *)algn_100074B68 = 0xE800000000000000;
}

void sub_10001B2E4()
{
  qword_100074B70 = 0x79726F6765746163;
  *(void *)algn_100074B78 = 0xE800000000000000;
}

void sub_10001B308()
{
  qword_100074B80 = 0x696669746E656469;
  *(void *)algn_100074B88 = 0xEA00000000007265;
}

void sub_10001B330()
{
  qword_100074B90 = 0x6173556C61746F74;
  *(void *)algn_100074B98 = 0xEA00000000006567;
}

void sub_10001B358()
{
  qword_100074BA0 = 1701869940;
  *(void *)algn_100074BA8 = 0xE400000000000000;
}

void sub_10001B374()
{
  qword_100074BB0 = 0x7974697669746341;
  *(void *)algn_100074BB8 = 0xE800000000000000;
}

CKRecordZoneID sub_10001B398()
{
  sub_10001958C(0, (unint64_t *)&qword_1000740F0);
  if (qword_1000739A8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_100074BB0;
  uint64_t v1 = *(void **)algn_100074BB8;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned int v4 = v3;
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v0;
  v5._object = v1;
  v6._countAndFlagsBits = v2;
  v6._object = v4;
  result.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v5, v6).super.isa;
  qword_100074BC0 = (uint64_t)result.super.isa;
  return result;
}

id sub_10001B458(uint64_t a1)
{
  return sub_10001C7E8(a1, &qword_1000739B0, &qword_100074BC0, &qword_100074BC8);
}

Class sub_10001B484()
{
  uint64_t v25 = type metadata accessor for UsageItemRecord.UsageType();
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v0);
  uint64_t v2 = (char *)&v23 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001958C(0, &qword_1000740E0);
  uint64_t v3 = UsageItemRecord.recordName.getter();
  Swift::String v5 = v4;
  if (qword_1000739B0 != -1) {
    swift_once();
  }
  id v6 = (id)qword_100074BC0;
  v7._countAndFlagsBits = v3;
  v7._object = v5;
  v8.super.Class isa = CKRecordID.init(recordName:zoneID:)(v7, (CKRecordZoneID)v6).super.isa;
  sub_10001958C(0, &qword_1000740E8);
  if (qword_100073980 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_100074B60;
  id v10 = *(void **)algn_100074B68;
  swift_bridgeObjectRetain();
  uint64_t v11 = v8.super.isa;
  v12._countAndFlagsBits = v9;
  v12._object = v10;
  id v24 = v11;
  v13.super.Class isa = CKRecord.init(recordType:recordID:)(v12, (CKRecordID)v11).super.isa;
  [(objc_class *)v13.super.isa encryptedValues];
  swift_getObjectType();
  if (qword_100073988 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v14 = UsageItemRecord.category.getter();
  uint64_t v28 = &type metadata for String;
  os_log_type_t v29 = &protocol witness table for String;
  uint64_t v26 = v14;
  uint64_t v27 = v15;
  CKRecordKeyValueSetting.subscript.setter();
  swift_unknownObjectRelease();
  [(objc_class *)v13.super.isa encryptedValues];
  swift_getObjectType();
  if (qword_100073990 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  uint64_t v16 = UsageItemRecord.identifier.getter();
  uint64_t v28 = &type metadata for String;
  os_log_type_t v29 = &protocol witness table for String;
  uint64_t v26 = v16;
  uint64_t v27 = v17;
  CKRecordKeyValueSetting.subscript.setter();
  swift_unknownObjectRelease();
  [(objc_class *)v13.super.isa encryptedValues];
  swift_getObjectType();
  if (qword_100073998 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  UsageItemRecord.totalUsage.getter();
  uint64_t v28 = &type metadata for Double;
  os_log_type_t v29 = &protocol witness table for Double;
  uint64_t v26 = v18;
  CKRecordKeyValueSetting.subscript.setter();
  swift_unknownObjectRelease();
  [(objc_class *)v13.super.isa encryptedValues];
  swift_getObjectType();
  if (qword_1000739A0 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  UsageItemRecord.type.getter();
  uint64_t v19 = UsageItemRecord.UsageType.rawValue.getter();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v23 + 8))(v2, v25);
  uint64_t v28 = &type metadata for String;
  os_log_type_t v29 = &protocol witness table for String;
  uint64_t v26 = v19;
  uint64_t v27 = v21;
  CKRecordKeyValueSetting.subscript.setter();
  swift_unknownObjectRelease();

  return v13.super.isa;
}

uint64_t sub_10001B900@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UsageItemRecord.Source();
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  __chkstk_darwin(v4, v5);
  uint64_t v44 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100007370((uint64_t *)&unk_100074100);
  __chkstk_darwin(v7 - 8, v8);
  id v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UsageItemRecord.UsageType();
  uint64_t v47 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v39 - v17;
  id v19 = [a1 encryptedValues];
  if (qword_100073988 != -1) {
    swift_once();
  }
  NSString v20 = String._bridgeToObjectiveC()();
  id v21 = [v19 objectForKeyedSubscript:v20];

  if (!v21 || (id v50 = v21, sub_100007370(&qword_1000740F8), (swift_dynamicCast() & 1) == 0))
  {
    swift_unknownObjectRelease();

    goto LABEL_20;
  }
  id v41 = v48;
  uint64_t v42 = v49;
  uint64_t v43 = a2;
  if (qword_100073990 != -1) {
    swift_once();
  }
  NSString v22 = String._bridgeToObjectiveC()();
  id v23 = [v19 objectForKeyedSubscript:v22];

  if (!v23)
  {
    swift_unknownObjectRelease();

LABEL_24:
    swift_bridgeObjectRelease();
    a2 = v43;
    goto LABEL_20;
  }
  id v50 = v23;
  char v24 = swift_dynamicCast();
  a2 = v43;
  if ((v24 & 1) == 0)
  {
    swift_unknownObjectRelease();

LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  id v39 = v48;
  uint64_t v40 = v49;
  if (qword_100073998 != -1) {
    swift_once();
  }
  NSString v25 = String._bridgeToObjectiveC()();
  id v26 = objc_msgSend(v19, "objectForKeyedSubscript:", v25, v39, v40, v41, v42);

  if (!v26) {
    goto LABEL_23;
  }
  id v48 = v26;
  char v27 = swift_dynamicCast();
  a2 = v43;
  if ((v27 & 1) == 0)
  {
LABEL_25:
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  if (qword_1000739A0 != -1) {
    swift_once();
  }
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v19 objectForKeyedSubscript:v28];

  if (!v29)
  {
LABEL_23:
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  id v50 = v29;
  char v30 = swift_dynamicCast();
  a2 = v43;
  if ((v30 & 1) == 0) {
    goto LABEL_25;
  }
  UsageItemRecord.UsageType.init(rawValue:)();
  uint64_t v31 = v47;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v10, 1, v11) == 1)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100015758((uint64_t)v10, (uint64_t *)&unk_100074100);
LABEL_20:
    uint64_t v32 = type metadata accessor for UsageItemRecord();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(a2, 1, 1, v32);
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v18, v10, v11);
  uint64_t v34 = v31;
  id v35 = [a1 recordID];
  uint64_t v36 = a2;
  id v37 = [v35 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v15, v18, v11);
  (*(void (**)(char *, void, uint64_t))(v45 + 104))(v44, enum case for UsageItemRecord.Source.remote(_:), v46);
  UsageItemRecord.init(identifier:recordName:type:source:category:totalUsage:)();
  swift_unknownObjectRelease();

  (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v11);
  uint64_t v38 = type metadata accessor for UsageItemRecord();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v36, 0, 1, v38);
}

uint64_t UsageStore.subscript.getter@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_100007370(&qword_1000740C0);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = &v21[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = sub_100007370(&qword_1000740C8);
  __chkstk_darwin(v8, v9);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = a1;
  UsageStore.first(where:)();
  uint64_t v12 = sub_100007370(&qword_1000740D0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v7, 1, v12) == 1)
  {
    sub_100015758((uint64_t)v7, &qword_1000740C0);
    uint64_t v13 = type metadata accessor for UsageItemRecord();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(a2, 1, 1, v13);
  }
  else
  {
    uint64_t v15 = v7[1];
    uint64_t v16 = (char *)v7 + *(int *)(v12 + 48);
    uint64_t v17 = &v11[*(int *)(v8 + 48)];
    *(void *)uint64_t v11 = *v7;
    *((void *)v11 + 1) = v15;
    uint64_t v18 = type metadata accessor for UsageItemRecord();
    uint64_t v19 = *(void *)(v18 - 8);
    NSString v20 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
    v20(v17, v16, v18);
    swift_bridgeObjectRelease();
    v20(a2, &v11[*(int *)(v8 + 48)], v18);
    return (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(a2, 0, 1, v18);
  }
}

uint64_t sub_10001C1E8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = UsageItemRecord.recordName.getter();
  uint64_t v7 = v6;
  id v8 = [a4 recordName];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  if (v5 == v9 && v7 == v11) {
    char v13 = 1;
  }
  else {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

uint64_t sub_10001C29C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10001C1E8(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t UsageStore.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UsageItemRecord();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  NSString v25 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007370(&qword_1000740D8);
  uint64_t v10 = __chkstk_darwin(v8 - 8, v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v16 = (char *)&v25 - v15;
  __chkstk_darwin(v14, v17);
  uint64_t v19 = (char *)&v25 - v18;
  uint64_t v20 = a1;
  sub_10001C528(a1, (uint64_t)&v25 - v18);
  id v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v21(v19, 1, v4) != 1)
  {
    uint64_t v22 = (void *)a2;
LABEL_6:
    uint64_t v23 = v20;
    UsageItemRecord.identifier.getter();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v19, v4);
    sub_10001C528(v20, (uint64_t)v12);
    UsageStore.subscript.setter();
    goto LABEL_7;
  }
  sub_100015758((uint64_t)v19, &qword_1000740D8);
  uint64_t v22 = (void *)a2;
  UsageStore.subscript.getter(a2, v16);
  if (!v21(v16, 1, v4))
  {
    uint64_t v19 = v25;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v25, v16, v4);
    sub_100015758((uint64_t)v16, &qword_1000740D8);
    goto LABEL_6;
  }
  sub_100015758((uint64_t)v16, &qword_1000740D8);
  uint64_t v23 = v20;
LABEL_7:

  return sub_100015758(v23, &qword_1000740D8);
}

uint64_t sub_10001C528(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007370(&qword_1000740D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void (*UsageStore.subscript.modify(uint64_t *a1, uint64_t a2))(uint64_t a1, char a2)
{
  *a1 = a2;
  a1[1] = v2;
  size_t v5 = *(void *)(*(void *)(sub_100007370(&qword_1000740D8) - 8) + 64);
  a1[2] = (uint64_t)malloc(v5);
  uint64_t v6 = (char *)malloc(v5);
  a1[3] = (uint64_t)v6;
  UsageStore.subscript.getter(a2, v6);
  return sub_10001C624;
}

void sub_10001C624(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = *(void **)(a1 + 24);
  uint64_t v4 = *(void **)a1;
  if (a2)
  {
    sub_10001C528(*(void *)(a1 + 24), (uint64_t)v2);
    UsageStore.subscript.setter((uint64_t)v2, (uint64_t)v4);
    sub_100015758((uint64_t)v3, &qword_1000740D8);
  }
  else
  {
    UsageStore.subscript.setter((uint64_t)v3, (uint64_t)v4);
  }
  free(v3);

  free(v2);
}

void sub_10001C6B0()
{
  qword_100074BD0 = 1635017060;
  *(void *)algn_100074BD8 = 0xE400000000000000;
}

void sub_10001C6CC()
{
  *(_WORD *)&algn_100074BE8[6] = -4864;
}

CKRecordZoneID sub_10001C6FC()
{
  sub_10001958C(0, (unint64_t *)&qword_1000740F0);
  if (qword_1000739C8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_100074BE0;
  uint64_t v1 = *(void **)algn_100074BE8;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v0;
  v5._object = v1;
  v6._countAndFlagsBits = v2;
  v6._object = v4;
  result.super.Class isa = CKRecordZoneID.init(zoneName:ownerName:)(v5, v6).super.isa;
  qword_100074BF0 = (uint64_t)result.super.isa;
  return result;
}

id sub_10001C7BC(uint64_t a1)
{
  return sub_10001C7E8(a1, &qword_1000739D0, &qword_100074BF0, &qword_100074BF8);
}

id sub_10001C7E8(uint64_t a1, void *a2, void *a3, void *a4)
{
  if (*a2 != -1) {
    swift_once();
  }
  id v6 = [objc_allocWithZone((Class)CKRecordZone) initWithZoneID:*a3];
  id result = [v6 setCapabilities:8];
  *a4 = v6;
  return result;
}

CKRecordID sub_10001C860()
{
  sub_10001958C(0, &qword_1000740E0);
  if (qword_1000739D0 != -1) {
    swift_once();
  }
  id v0 = (id)qword_100074BF0;
  v1._object = (void *)0x80000001000612C0;
  v1._countAndFlagsBits = 0xD000000000000010;
  result.super.Class isa = CKRecordID.init(recordName:zoneID:)(v1, (CKRecordZoneID)v0).super.isa;
  qword_100074C00 = (uint64_t)result.super.isa;
  return result;
}

Class sub_10001C8FC(uint64_t a1, unint64_t a2)
{
  if (qword_1000739E0 != -1) {
    swift_once();
  }
  id v4 = (id)qword_100074C00;
  v5._object = (void *)0x80000001000612C0;
  v5._countAndFlagsBits = 0xD000000000000010;
  v6.super.Class isa = CKRecord.init(recordType:recordID:)(v5, (CKRecordID)v4).super.isa;
  id v7 = [(objc_class *)v6.super.isa encryptedValues];
  swift_getObjectType();
  if (qword_1000739C0 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  sub_100015DDC(a1, a2);
  CKRecordKeyValueSetting.subscript.setter();
  sub_10000BF6C(a1, a2);
  swift_unknownObjectRelease();
  return v6.super.isa;
}

uint64_t sub_10001CA54()
{
  id v1 = [v0 encryptedValues];
  if (qword_1000739C0 != -1) {
    swift_once();
  }
  NSString v2 = String._bridgeToObjectiveC()();
  id v3 = [v1 objectForKeyedSubscript:v2];
  swift_unknownObjectRelease();

  if (!v3) {
    return 0;
  }
  sub_100007370(&qword_1000740F8);
  if (swift_dynamicCast()) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_10001CB5C(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100007370(&qword_100074210);
    NSString v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    NSString v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  CKRecord v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v11 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v13);
    int64_t v15 = v8 + 1;
    if (!v14)
    {
      int64_t v15 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_37;
      }
      unint64_t v14 = *(void *)(v28 + 8 * v15);
      if (!v14)
      {
        int64_t v15 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_37;
        }
        unint64_t v14 = *(void *)(v28 + 8 * v15);
        if (!v14)
        {
          int64_t v15 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_37;
          }
          unint64_t v14 = *(void *)(v28 + 8 * v15);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    unint64_t v5 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v15 << 6);
    int64_t v8 = v15;
LABEL_28:
    uint64_t v17 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v12);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    sub_100007314(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v40);
    *(void *)&long long v39 = v19;
    *((void *)&v39 + 1) = v18;
    void v37[2] = v39;
    v38[0] = v40[0];
    v38[1] = v40[1];
    *(void *)&v37[0] = v19;
    *((void *)&v37[0] + 1) = v18;
    swift_bridgeObjectRetain();
    swift_dynamicCast();
    sub_1000262D0(v38, v32);
    long long v33 = v29;
    long long v34 = v30;
    uint64_t v35 = v31;
    sub_1000262D0(v32, v36);
    long long v29 = v33;
    long long v30 = v34;
    uint64_t v31 = v35;
    sub_1000262D0(v36, v37);
    sub_1000262D0(v37, &v33);
    uint64_t result = AnyHashable._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = v2[6] + 40 * v9;
    *(_OWORD *)uint64_t v10 = v29;
    *(_OWORD *)(v10 + 16) = v30;
    *(void *)(v10 + 32) = v31;
    uint64_t result = (uint64_t)sub_1000262D0(&v33, (_OWORD *)(v2[7] + 32 * v9));
    ++v2[2];
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_37:
    swift_release();
    sub_1000262C8();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v28 + 8 * v16);
  if (v14)
  {
    int64_t v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v15 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v15 >= v27) {
      goto LABEL_37;
    }
    unint64_t v14 = *(void *)(v28 + 8 * v15);
    ++v16;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_39:
  __break(1u);
  return result;
}

NSString sub_10001CF24()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100074C08 = (uint64_t)result;
  return result;
}

void sub_10001CF60()
{
  HIBYTE(qword_100074C18) = -18;
}

void sub_10001CF90(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  int64_t v8 = (char *)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_10000BE0C(a1, v9);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 16))(v9, v10);
  uint64_t v13 = v11;
  if ((v11 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10001958C(0, (unint64_t *)&qword_100073CC8);
    sub_100016690();
    Set.Iterator.init(_cocoa:)();
    uint64_t v13 = v57[1];
    uint64_t v46 = v57[2];
    uint64_t v14 = v57[3];
    uint64_t v15 = v57[4];
    unint64_t v16 = v57[5];
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v17 = -1 << *(unsigned char *)(v11 + 32);
    uint64_t v18 = *(void *)(v11 + 56);
    uint64_t v46 = v11 + 56;
    uint64_t v14 = ~v17;
    uint64_t v19 = -v17;
    if (v19 < 64) {
      uint64_t v20 = ~(-1 << v19);
    }
    else {
      uint64_t v20 = -1;
    }
    unint64_t v16 = v20 & v18;
  }
  v44[2] = v13 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v45 = (unint64_t)(v14 + 64) >> 6;
  unint64_t v21 = (void (**)(char *, uint64_t))(v5 + 8);
  *(void *)&long long v12 = 136446210;
  long long v48 = v12;
  uint64_t v47 = (char *)&type metadata for Any + 8;
  v44[1] = (char *)&type metadata for Swift.AnyObject + 8;
  uint64_t v50 = v13;
  uint64_t v51 = v14;
  uint64_t v49 = v21;
  while (v13 < 0)
  {
    uint64_t v24 = __CocoaSet.Iterator.next()();
    if (!v24) {
      goto LABEL_33;
    }
    uint64_t v56 = v24;
    sub_10001958C(0, (unint64_t *)&qword_100073CC8);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v25 = (id)v57[0];
    swift_unknownObjectRelease();
    uint64_t v23 = v15;
    uint64_t v55 = v16;
    if (!v25) {
      goto LABEL_33;
    }
LABEL_31:
    uint64_t v54 = v23;
    static Logger.syncEngine.getter();
    id v29 = v25;
    long long v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (_DWORD *)swift_slowAlloc();
      uint64_t v52 = v32;
      uint64_t v53 = swift_slowAlloc();
      v57[0] = v53;
      _DWORD *v32 = v48;
      id v33 = v29;
      long long v34 = v8;
      uint64_t v35 = a2;
      id v36 = [v33 description];
      uint64_t v37 = v4;
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v40 = v39;

      a2 = v35;
      int64_t v8 = v34;
      uint64_t v41 = v38;
      uint64_t v4 = v37;
      uint64_t v42 = sub_1000067CC(v41, v40, v57);
      uint64_t v43 = (uint8_t *)v52;
      *(void *)(v52 + 1) = v42;

      unint64_t v21 = v49;
      uint64_t v13 = v50;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Handling pending invitation: %{public}s", v43, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*v21)(v8, v4);
    sub_10001D47C(v29);

    uint64_t v15 = v54;
    unint64_t v16 = v55;
  }
  if (v16)
  {
    uint64_t v55 = (v16 - 1) & v16;
    unint64_t v22 = __clz(__rbit64(v16)) | (v15 << 6);
    uint64_t v23 = v15;
LABEL_30:
    id v25 = *(id *)(*(void *)(v13 + 48) + 8 * v22);
    if (!v25) {
      goto LABEL_33;
    }
    goto LABEL_31;
  }
  int64_t v26 = v15 + 1;
  if (!__OFADD__(v15, 1))
  {
    if (v26 >= v45) {
      goto LABEL_33;
    }
    unint64_t v27 = *(void *)(v46 + 8 * v26);
    uint64_t v23 = v15 + 1;
    if (!v27)
    {
      uint64_t v23 = v15 + 2;
      if (v15 + 2 >= v45) {
        goto LABEL_33;
      }
      unint64_t v27 = *(void *)(v46 + 8 * v23);
      if (!v27)
      {
        uint64_t v23 = v15 + 3;
        if (v15 + 3 >= v45) {
          goto LABEL_33;
        }
        unint64_t v27 = *(void *)(v46 + 8 * v23);
        if (!v27)
        {
          uint64_t v23 = v15 + 4;
          if (v15 + 4 >= v45) {
            goto LABEL_33;
          }
          unint64_t v27 = *(void *)(v46 + 8 * v23);
          if (!v27)
          {
            uint64_t v28 = v15 + 5;
            while (v45 != v28)
            {
              unint64_t v27 = *(void *)(v46 + 8 * v28++);
              if (v27)
              {
                uint64_t v23 = v28 - 1;
                goto LABEL_29;
              }
            }
LABEL_33:
            sub_1000262C8();
            return;
          }
        }
      }
    }
LABEL_29:
    uint64_t v55 = (v27 - 1) & v27;
    unint64_t v22 = __clz(__rbit64(v27)) + (v23 << 6);
    goto LABEL_30;
  }
  __break(1u);
}

uint64_t sub_10001D47C(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  uint64_t v11 = (char *)&v107 - v10;
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v107 - v13;
  uint64_t v15 = sub_100007370(&qword_1000741F8);
  uint64_t v17 = __chkstk_darwin(v15 - 8, v16);
  uint64_t v19 = (char *)&v107 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  unint64_t v22 = (char *)&v107 - v21;
  uint64_t v23 = type metadata accessor for URL();
  uint64_t v110 = *(void *)(v23 - 8);
  uint64_t v111 = v23;
  __chkstk_darwin(v23, v24);
  uint64_t v112 = (char *)&v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v26 = [a1 context];
  self;
  unint64_t v27 = (void *)swift_dynamicCastObjCClass();
  if (!v27)
  {
    swift_unknownObjectRelease();
    static Logger.syncEngine.getter();
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Failed to extract context from invitation. Declining the invitation.", v46, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
    uint64_t v47 = *(void *)&v115[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                         + 24];
    uint64_t v48 = *(void *)&v115[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                         + 32];
    sub_10000BE0C(&v115[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager], v47);
    return (*(uint64_t (**)(void *, uint64_t (*)(uint64_t), void, uint64_t, uint64_t))(v48 + 48))(a1, sub_100024BDC, 0, v47, v48);
  }
  uint64_t v28 = v27;
  *(void *)&long long v109 = v19;
  uint64_t v113 = a1;
  id v114 = v26;
  id v29 = [v27 schemaIdentifier];
  uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v32 = v31;

  if (v30 == 0xD00000000000002CLL && v32 == 0x8000000100061420
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v33 = [v28 dictionary];
    uint64_t v34 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (qword_1000739F0 != -1) {
      swift_once();
    }
    if (*(void *)(v34 + 16))
    {
      uint64_t v35 = qword_100074C18;
      uint64_t v36 = qword_100074C10;
      swift_bridgeObjectRetain();
      unint64_t v37 = sub_10004A7B8(v36, v35);
      if (v38)
      {
        sub_100007314(*(void *)(v34 + 56) + 32 * v37, (uint64_t)&v116);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*((void *)&v117 + 1))
        {
          if (swift_dynamicCast())
          {
            uint64_t v107 = v119;
            unint64_t v108 = v120;
            id v39 = [v28 dictionary];
            uint64_t v40 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            if (*(void *)(v40 + 16))
            {
              unint64_t v41 = sub_10004A7B8(0xD000000000000018, 0x8000000100061490);
              uint64_t v42 = v109;
              if (v43)
              {
                sub_100007314(*(void *)(v40 + 56) + 32 * v41, (uint64_t)&v116);
              }
              else
              {
                long long v116 = 0u;
                long long v117 = 0u;
              }
              uint64_t v51 = v113;
            }
            else
            {
              long long v116 = 0u;
              long long v117 = 0u;
              uint64_t v51 = v113;
              uint64_t v42 = v109;
            }
            swift_bridgeObjectRelease();
            if (!*((void *)&v117 + 1))
            {
              sub_10000BF6C(v107, v108);
              sub_100015758((uint64_t)&v116, &qword_100074070);
              goto LABEL_25;
            }
            if ((swift_dynamicCast() & 1) == 0)
            {
              sub_10000BF6C(v107, v108);
              goto LABEL_25;
            }
            URL.init(string:)();
            swift_bridgeObjectRelease();
            uint64_t v73 = v110;
            uint64_t v74 = v111;
            *(void *)&long long v109 = *(void *)(v110 + 48);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v109)(v22, 1, v111) == 1)
            {
              sub_10000BF6C(v107, v108);
              sub_100015758((uint64_t)v22, &qword_1000741F8);
              goto LABEL_25;
            }
            os_log_type_t v75 = v112;
            (*(void (**)(char *, char *, uint64_t))(v73 + 32))(v112, v22, v74);
            BOOL v76 = *(void (**)(uint64_t, char *, uint64_t))(v73 + 16);
            v76(v42, v75, v74);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v73 + 56))(v42, 0, 1, v74);
            sub_100015DDC(v107, v108);
            v77.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
            uint64_t v79 = v74;
            uint64_t v80 = v73;
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v109)(v42, 1, v74) == 1)
            {
              uint64_t v81 = 0;
            }
            else
            {
              URL._bridgeToObjectiveC()(v78);
              uint64_t v81 = v82;
              (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v42, v74);
            }
            id v83 = [objc_allocWithZone((Class)CKDeviceToDeviceShareInvitationToken) initWithSharingInvitationData:v77.super.isa shareURL:v81];
            sub_10000BF6C(v107, v108);

            sub_100007370(&qword_100074270);
            unint64_t v84 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
            uint64_t v85 = swift_allocObject();
            long long v109 = xmmword_10005FEC0;
            *(_OWORD *)(v85 + 16) = xmmword_10005FEC0;
            uint64_t v86 = v112;
            v76(v85 + v84, v112, v79);
            sub_100007370(&qword_100074278);
            uint64_t v87 = (int *)(sub_100007370(&qword_100074280) - 8);
            uint64_t v88 = v80;
            unint64_t v89 = (*(unsigned __int8 *)(*(void *)v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v87 + 80);
            uint64_t v90 = swift_allocObject();
            *(_OWORD *)(v90 + 16) = v109;
            unint64_t v91 = v90 + v89;
            uint64_t v92 = v87[14];
            v76(v91, v86, v79);
            *(void *)(v91 + v92) = v83;
            id v93 = v83;
            sub_10004A288(v90);
            id v94 = objc_allocWithZone((Class)CKFetchShareMetadataOperation);
            Class isa = Array._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            sub_10001958C(0, &qword_100074288);
            sub_100028C64(&qword_100074290, (void (*)(uint64_t))&type metadata accessor for URL);
            Class v96 = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            id v97 = [v94 initWithShareURLs:isa invitationTokensByShareURL:v96];

            [v97 setQualityOfService:25];
            uint64_t v98 = swift_allocObject();
            uint64_t v99 = v115;
            unint64_t v100 = v113;
            *(void *)(v98 + 16) = v115;
            *(void *)(v98 + 24) = v100;
            uint64_t v101 = v99;
            id v102 = v100;
            CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter();
            uint64_t v103 = *(void *)&v101[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_container
                                  + 24];
            uint64_t v104 = *(void *)&v101[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_container
                                  + 32];
            sub_10000BE0C(&v101[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_container], v103);
            *((void *)&v117 + 1) = sub_10001958C(0, &qword_100074298);
            uint64_t v118 = &off_10006F390;
            *(void *)&long long v116 = v97;
            uint64_t v105 = *(void (**)(long long *, uint64_t, uint64_t))(v104 + 8);
            id v106 = v97;
            v105(&v116, v103, v104);

            swift_unknownObjectRelease();
            sub_10000BF6C(v107, v108);
            (*(void (**)(char *, uint64_t))(v88 + 8))(v112, v79);
            return _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v116);
          }
LABEL_24:
          uint64_t v51 = v113;
LABEL_25:
          static Logger.syncEngine.getter();
          uint64_t v52 = Logger.logObject.getter();
          os_log_type_t v53 = static os_log_type_t.error.getter();
          BOOL v54 = os_log_type_enabled(v52, v53);
          uint64_t v55 = v115;
          if (v54)
          {
            uint64_t v56 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v56 = 0;
            _os_log_impl((void *)&_mh_execute_header, v52, v53, "Failed to extract share metadata from invitation. Declining the invitation.", v56, 2u);
            swift_slowDealloc();
          }

          (*(void (**)(char *, uint64_t))(v3 + 8))(v14, v2);
          uint64_t v57 = *(void *)&v55[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                              + 24];
          uint64_t v58 = *(void *)&v55[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                              + 32];
          sub_10000BE0C(&v55[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager], v57);
          (*(void (**)(void *, uint64_t (*)(uint64_t), void, uint64_t, uint64_t))(v58 + 48))(v51, sub_100024BDC, 0, v57, v58);
          return swift_unknownObjectRelease();
        }
LABEL_23:
        sub_100015758((uint64_t)&v116, &qword_100074070);
        goto LABEL_24;
      }
      long long v116 = 0u;
      long long v117 = 0u;
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v116 = 0u;
      long long v117 = 0u;
    }
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (v30 == 0xD000000000000033 && v32 == 0x8000000100061450)
  {
    swift_bridgeObjectRelease();
    uint64_t v50 = v115;
  }
  else
  {
    char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v50 = v115;
    if ((v59 & 1) == 0)
    {
      static Logger.syncEngine.getter();
      swift_bridgeObjectRetain();
      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = (uint8_t *)swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        *(_DWORD *)uint64_t v71 = 136446210;
        uint64_t v115 = v71 + 4;
        *(void *)&long long v116 = v72;
        swift_bridgeObjectRetain();
        uint64_t v119 = sub_1000067CC(v30, v32, (uint64_t *)&v116);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Received invitation using unknown schema: %{public}s", v71, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      swift_unknownObjectRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v11, v2);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v60 = *(void *)&v50[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_database + 24];
  uint64_t v61 = *(void *)&v50[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_database + 32];
  sub_10000BE0C(&v50[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_database], v60);
  uint64_t v62 = v113;
  if (qword_1000739D8 != -1) {
    swift_once();
  }
  uint64_t v63 = qword_100074BF8;
  uint64_t v64 = swift_allocObject();
  *(void *)(v64 + 16) = v50;
  *(void *)(v64 + 24) = v62;
  uint64_t v65 = v62;
  int v66 = *(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v61 + 16);
  uint64_t v67 = v50;
  id v68 = v65;
  v66(v63, sub_100029F44, v64, v60, v61);
  swift_release();

  return swift_unknownObjectRelease();
}

id sub_10001E270()
{
  v2.receiver = v0;
  v2.super_class = (Class)_s18SharingCoordinatorCMa();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s18SharingCoordinatorCMa()
{
  return self;
}

uint64_t sub_10001E334(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(uint64_t *)a1;
  uint64_t v5 = *(uint64_t *)a2;
  char v6 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8))
  {
    if (v6) {
      return sub_100024F90(v4, v5);
    }
  }
  else if ((v6 & 1) == 0 && *(double *)&v4 == *(double *)&v5)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_10001E37C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v85 = a3;
  uint64_t v84 = a2;
  uint64_t v100 = a1;
  uint64_t v91 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91, v4);
  uint64_t v88 = (char *)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for DispatchQoS();
  uint64_t v87 = *(void *)(v89 - 8);
  __chkstk_darwin(v89, v6);
  uint64_t v86 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v93 - 8);
  uint64_t v10 = __chkstk_darwin(v93, v9);
  uint64_t v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v98 = (char *)&v83 - v14;
  uint64_t v99 = v3;
  uint64_t v15 = &v3[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_idsStatusFetching];
  uint64_t v16 = *(void *)&v3[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_idsStatusFetching];
  uint64_t v17 = *((void *)v15 + 1);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v17 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  uint64_t v24 = (char *)&v83 - v23;
  v18(v16, v17);
  uint64_t v25 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
    static Logger.syncEngine.getter();
    id v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to create an IDS status fetcher", v28, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v12, v93);
  }
  uint64_t v113 = (void *)AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v30 = sub_100025234((uint64_t *)&aBlock);
  (*(void (**)(uint64_t *, char *, uint64_t))(v25 + 32))(v30, v24, AssociatedTypeWitness);
  sub_100028C4C(&aBlock, (uint64_t)&v118);
  dispatch_group_t v110 = dispatch_group_create();
  uint64_t v31 = *(void *)(v100 + 64);
  uint64_t v94 = v100 + 64;
  uint64_t v32 = 1 << *(unsigned char *)(v100 + 32);
  uint64_t v33 = -1;
  if (v32 < 64) {
    uint64_t v33 = ~(-1 << v32);
  }
  unint64_t v34 = v33 & v31;
  uint64_t v97 = OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationQueue;
  int64_t v95 = (unint64_t)(v32 + 63) >> 6;
  uint64_t v92 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v35 = swift_bridgeObjectRetain();
  int64_t v36 = 0;
  unint64_t v96 = 0x80000001000613F0;
  uint64_t v37 = v35;
  while (1)
  {
    if (v34)
    {
      unint64_t v38 = __clz(__rbit64(v34));
      uint64_t v39 = (v34 - 1) & v34;
      unint64_t v40 = v38 | (v36 << 6);
    }
    else
    {
      if (__OFADD__(v36++, 1)) {
        goto LABEL_52;
      }
      if (v36 >= v95)
      {
LABEL_50:
        swift_release();
        uint64_t v75 = swift_allocObject();
        uint64_t v76 = v84;
        uint64_t v77 = v85;
        *(void *)(v75 + 16) = v84;
        *(void *)(v75 + 24) = v77;
        uint64_t AssociatedConformanceWitness = (uint64_t)sub_10002637C;
        uint64_t v115 = v75;
        *(void *)&long long aBlock = _NSConcreteStackBlock;
        *((void *)&aBlock + 1) = 1107296256;
        uint64_t v112 = sub_100036EDC;
        uint64_t v113 = &unk_10006E720;
        unint64_t v78 = _Block_copy(&aBlock);
        sub_10001957C(v76);
        uint64_t v79 = v86;
        static DispatchQoS.unspecified.getter();
        v116[0] = (uint64_t)&_swiftEmptyArrayStorage;
        sub_100028C64((unint64_t *)&unk_100074180, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_100007370(&qword_100074360);
        sub_1000263C8();
        uint64_t v80 = v88;
        uint64_t v81 = v91;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        dispatch_group_t v82 = v110;
        OS_dispatch_group.notify(qos:flags:queue:execute:)();
        _Block_release(v78);

        (*(void (**)(char *, uint64_t))(v90 + 8))(v80, v81);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v79, v89);
        swift_release();
        return _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v118);
      }
      unint64_t v42 = *(void *)(v94 + 8 * v36);
      if (!v42)
      {
        int64_t v43 = v36 + 1;
        if (v36 + 1 >= v95) {
          goto LABEL_50;
        }
        unint64_t v42 = *(void *)(v94 + 8 * v43);
        if (!v42)
        {
          int64_t v43 = v36 + 2;
          if (v36 + 2 >= v95) {
            goto LABEL_50;
          }
          unint64_t v42 = *(void *)(v94 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v36 + 3;
            if (v36 + 3 >= v95) {
              goto LABEL_50;
            }
            unint64_t v42 = *(void *)(v94 + 8 * v43);
            if (!v42)
            {
              while (1)
              {
                int64_t v36 = v43 + 1;
                if (__OFADD__(v43, 1)) {
                  goto LABEL_53;
                }
                if (v36 >= v95) {
                  goto LABEL_50;
                }
                unint64_t v42 = *(void *)(v94 + 8 * v36);
                ++v43;
                if (v42) {
                  goto LABEL_22;
                }
              }
            }
          }
        }
        int64_t v36 = v43;
      }
LABEL_22:
      uint64_t v39 = (v42 - 1) & v42;
      unint64_t v40 = __clz(__rbit64(v42)) + (v36 << 6);
    }
    uint64_t v44 = 8 * v40;
    os_log_type_t v45 = *(void **)(*(void *)(v37 + 48) + v44);
    uint64_t v46 = *(void *)(*(void *)(v37 + 56) + v44);
    v116[0] = (uint64_t)&_swiftEmptyDictionarySingleton;
    uint64_t v47 = *(void *)(v46 + 16);
    id v107 = v45;
    if (v47)
    {
      uint64_t v48 = v46 + 32;
      uint64_t v49 = v45;
      swift_bridgeObjectRetain_n();
      id v50 = v49;
      do
      {
        sub_10000BFC4(v48, (uint64_t)&aBlock);
        sub_10001EF7C(v116, &aBlock);
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&aBlock);
        v48 += 40;
        --v47;
      }
      while (v47);
      swift_bridgeObjectRelease_n();
      uint64_t v51 = v116[0];
    }
    else
    {
      id v52 = v45;
      uint64_t v51 = &_swiftEmptyDictionarySingleton;
    }
    unint64_t v108 = v39;
    int64_t v109 = v36;
    dispatch_group_enter(v110);
    uint64_t v104 = v120;
    uint64_t v105 = v119;
    id v106 = sub_10000BE0C(&v118, v119);
    uint64_t isa = (uint64_t)v51[2].isa;
    if (isa) {
      break;
    }
    BOOL v54 = (uint64_t *)&_swiftEmptyArrayStorage;
LABEL_34:
    dispatch_group_t v103 = v51;
    int64_t v57 = v54[2];
    if (v57)
    {
      long long v117 = &_swiftEmptyArrayStorage;
      sub_10003DD24(0, v57, 0);
      uint64_t v58 = v117;
      char v59 = v54 + 5;
      do
      {
        uint64_t v60 = *v59;
        v116[0] = *(v59 - 1);
        v116[1] = v60;
        swift_bridgeObjectRetain();
        swift_dynamicCast();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003DD24(0, v58[2] + 1, 1);
          uint64_t v58 = v117;
        }
        unint64_t v62 = v58[2];
        unint64_t v61 = v58[3];
        if (v62 >= v61 >> 1)
        {
          sub_10003DD24(v61 > 1, v62 + 1, 1);
          uint64_t v58 = v117;
        }
        v59 += 2;
        v58[2] = v62 + 1;
        sub_1000262D0(&aBlock, &v58[4 * v62 + 4]);
        --v57;
      }
      while (v57);
      swift_release();
    }
    else
    {
      swift_release();
      uint64_t v58 = &_swiftEmptyArrayStorage;
    }
    uint64_t v101 = static FamilyControlsService.nameIDS.getter();
    uint64_t v64 = v63;
    uint64_t v65 = v99;
    uint64_t v102 = *(void *)&v99[v97];
    int v66 = (void *)swift_allocObject();
    dispatch_group_t v67 = v110;
    v66[2] = v103;
    v66[3] = v67;
    id v68 = v107;
    v66[4] = v65;
    v66[5] = v68;
    uint64_t v69 = v104;
    os_log_type_t v70 = *(uint64_t (**)(void *, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, void (*)(void *), void *, uint64_t, uint64_t))(v104 + 32);
    id v107 = v68;
    dispatch_group_t v103 = v67;
    id v71 = v65;
    LOBYTE(v69) = v70(v58, v101, v64, 0xD00000000000002BLL, v96, v102, sub_100026330, v66, v105, v69);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v37 = v100;
    unint64_t v34 = v108;
    int64_t v36 = v109;
    if ((v69 & 1) == 0)
    {
      static Logger.syncEngine.getter();
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v74 = 0;
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Failed to refresh IDS ID status for family members", v74, 2u);
        swift_slowDealloc();
      }

      (*v92)(v98, v93);
      dispatch_group_leave(v103);
    }
  }
  sub_100007370(&qword_100074178);
  BOOL v54 = (uint64_t *)swift_allocObject();
  int64_t v55 = j__malloc_size(v54);
  uint64_t v56 = v55 - 32;
  if (v55 < 32) {
    uint64_t v56 = v55 - 17;
  }
  v54[2] = isa;
  v54[3] = 2 * (v56 >> 4);
  uint64_t v102 = sub_1000260C8((uint64_t)&aBlock, v54 + 4, isa, (uint64_t)v51);
  swift_bridgeObjectRetain_n();
  sub_1000262C8();
  if (v102 == isa)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  swift_bridgeObjectRelease();
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&aBlock);
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_10001EF7C(uint64_t *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v33 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)v31 - v10;
  sub_10000BE0C(a2, a2[3]);
  uint64_t result = dispatch thunk of FamilyMemberable.isMe.getter();
  if ((result & 1) == 0)
  {
    sub_10000BE0C(a2, a2[3]);
    uint64_t v13 = dispatch thunk of FamilyMemberable.appleID.getter();
    if (v14)
    {
      uint64_t v15 = v13;
      unint64_t v16 = v14;
      NSString v17 = String._bridgeToObjectiveC()();
      uint64_t v18 = (void *)IDSCopyIDForEmailAddress();

      if (v18)
      {
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v21 = v20;

        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v35[0] = *a1;
        *a1 = 0x8000000000000000;
        sub_100025D84(v15, v16, v19, v21, isUniquelyReferenced_nonNull_native);
        *a1 = v35[0];
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      else
      {
        static Logger.syncEngine.getter();
        swift_bridgeObjectRetain();
        uint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          v35[0] = v32;
          *(_DWORD *)uint64_t v30 = 136446210;
          v31[1] = v30 + 4;
          swift_bridgeObjectRetain();
          v34[0] = sub_1000067CC(v15, v16, v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to get IDS destination for %{public}s", v30, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v8, v4);
      }
    }
    else
    {
      static Logger.syncEngine.getter();
      sub_10000BFC4((uint64_t)a2, (uint64_t)v35);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136446210;
        uint64_t v32 = (uint64_t)(v25 + 4);
        sub_10000BFC4((uint64_t)v35, (uint64_t)v34);
        sub_100007370(&qword_100074248);
        uint64_t v26 = String.init<A>(describing:)();
        v34[0] = sub_1000067CC(v26, v27, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v35);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to share zone with family member because they do not have an Apple ID: %{public}s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v35);
      }

      return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v11, v4);
    }
  }
  return result;
}

void sub_10001F3D0(void *a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5)
{
  uint64_t v63 = a2;
  uint64_t v66 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v66 - 8);
  uint64_t v11 = __chkstk_darwin(v66, v10);
  dispatch_group_t v67 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v55 - v14;
  unint64_t v71 = (unint64_t)&_swiftEmptyArrayStorage;
  if (a1)
  {
    uint64_t v16 = sub_10001FB54((uint64_t)a1);
    if (v16)
    {
      unint64_t v18 = v16;
      uint64_t v57 = a4;
      uint64_t v58 = a3;
      uint64_t v56 = a5;
      if ((v16 & 0xC000000000000001) != 0)
      {
        uint64_t v19 = __CocoaDictionary.makeIterator()();
        uint64_t v64 = 0;
        uint64_t v20 = 0;
        unint64_t v21 = 0;
        unint64_t v18 = v19 | 0x8000000000000000;
      }
      else
      {
        uint64_t v25 = -1 << *(unsigned char *)(v16 + 32);
        uint64_t v26 = *(void *)(v16 + 64);
        uint64_t v64 = v16 + 64;
        uint64_t v27 = ~v25;
        uint64_t v28 = -v25;
        if (v28 < 64) {
          uint64_t v29 = ~(-1 << v28);
        }
        else {
          uint64_t v29 = -1;
        }
        unint64_t v21 = v29 & v26;
        uint64_t v20 = v27;
      }
      a5 = 0;
      uint64_t v55 = v20;
      uint64_t v61 = v18 & 0x7FFFFFFFFFFFFFFFLL;
      int64_t v62 = (unint64_t)(v20 + 64) >> 6;
      uint64_t v65 = (void (**)(char *, uint64_t))(v9 + 8);
      *(void *)&long long v17 = 138543362;
      long long v59 = v17;
      uint64_t v60 = (char *)&type metadata for Swift.AnyObject + 8;
      uint64_t v30 = v63;
      while (1)
      {
        if ((v18 & 0x8000000000000000) != 0)
        {
          uint64_t v36 = __CocoaDictionary.Iterator.next()();
          if (!v36) {
            goto LABEL_51;
          }
          uint64_t v38 = v37;
          uint64_t v68 = v36;
          sub_10001958C(0, &qword_1000741A0);
          swift_unknownObjectRetain();
          a1 = v60;
          swift_dynamicCast();
          id v39 = (id)v69;
          swift_unknownObjectRelease();
          uint64_t v68 = v38;
          sub_10001958C(0, &qword_1000741A8);
          swift_unknownObjectRetain();
          swift_dynamicCast();
          uint64_t v33 = v69;
          swift_unknownObjectRelease();
          a3 = a5;
          uint64_t v34 = v21;
          if (!v39) {
            goto LABEL_51;
          }
        }
        else
        {
          if (v21)
          {
            uint64_t v34 = (v21 - 1) & v21;
            unint64_t v35 = __clz(__rbit64(v21)) | ((void)a5 << 6);
            a3 = a5;
          }
          else
          {
            int64_t v40 = (int64_t)a5 + 1;
            if (__OFADD__(a5, 1))
            {
              __break(1u);
              goto LABEL_56;
            }
            if (v40 >= v62) {
              goto LABEL_51;
            }
            unint64_t v41 = *(void *)(v64 + 8 * v40);
            a3 = ((char *)a5 + 1);
            if (!v41)
            {
              a3 = ((char *)a5 + 2);
              if ((uint64_t)a5 + 2 >= v62) {
                goto LABEL_51;
              }
              unint64_t v41 = *(void *)(v64 + 8 * (void)a3);
              if (!v41)
              {
                a3 = ((char *)a5 + 3);
                if ((uint64_t)a5 + 3 >= v62) {
                  goto LABEL_51;
                }
                unint64_t v41 = *(void *)(v64 + 8 * (void)a3);
                if (!v41)
                {
                  a3 = ((char *)a5 + 4);
                  if ((uint64_t)a5 + 4 >= v62) {
                    goto LABEL_51;
                  }
                  unint64_t v41 = *(void *)(v64 + 8 * (void)a3);
                  if (!v41)
                  {
                    unint64_t v42 = (char *)a5 + 5;
                    while ((char *)v62 != v42)
                    {
                      unint64_t v41 = *(void *)(v64 + 8 * (void)v42++);
                      if (v41)
                      {
                        a3 = (v42 - 1);
                        goto LABEL_35;
                      }
                    }
LABEL_51:
                    sub_1000262C8();
                    a3 = v58;
                    a5 = v56;
                    goto LABEL_52;
                  }
                }
              }
            }
LABEL_35:
            uint64_t v34 = (v41 - 1) & v41;
            unint64_t v35 = __clz(__rbit64(v41)) + ((void)a3 << 6);
          }
          uint64_t v43 = 8 * v35;
          a1 = *(void **)(*(void *)(v18 + 56) + v43);
          id v39 = *(id *)(*(void *)(v18 + 48) + v43);
          uint64_t v33 = a1;
          if (!v39) {
            goto LABEL_51;
          }
        }
        uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        if (*(void *)(v30 + 16) && (sub_10004A7B8(v44, v45), (v46 & 1) != 0))
        {
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if ([v33 integerValue] == (id)1)
          {
            id v47 = objc_allocWithZone((Class)CKUserIdentityLookupInfo);
            NSString v48 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v47 initWithEmailAddress:v48];

            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
            if (*(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            }
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
            swift_bridgeObjectRelease();
            id v52 = [self defaultCenter];
            if (qword_1000739E8 != -1) {
              swift_once();
            }
            uint64_t v53 = qword_100074C08;
            if (qword_100073A30 != -1) {
              swift_once();
            }
            uint64_t v69 = qword_100074C48;
            char v70 = 0;
            [v52 postNotificationName:v53 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

            swift_unknownObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          static Logger.syncEngine.getter();
          uint64_t v49 = v39;
          uint64_t v32 = Logger.logObject.getter();
          os_log_type_t v50 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v32, v50))
          {
            uint64_t v51 = swift_slowAlloc();
            a1 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v51 = v59;
            *(void *)(v51 + 4) = v49;
            *a1 = v39;
            _os_log_impl((void *)&_mh_execute_header, v32, v50, "Failed to get Apple ID for %{public}@", (uint8_t *)v51, 0xCu);
            sub_100007370(&qword_100073EC0);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v30 = v63;
            swift_slowDealloc();
            uint64_t v31 = v49;
          }
          else
          {

            uint64_t v31 = v33;
            uint64_t v32 = v49;
            uint64_t v33 = v49;
          }

          (*v65)(v67, v66);
        }
        a5 = a3;
        unint64_t v21 = v34;
      }
    }
  }
  static Logger.syncEngine.getter();
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to get IDS status for family members", v24, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v15, v66);
LABEL_52:
  a1 = (void *)v71;
  if (v71 >> 62)
  {
LABEL_56:
    swift_bridgeObjectRetain();
    uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v54) {
      goto LABEL_54;
    }
  }
  else if (*(void *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_54:
    sub_10001FF64(a5, (uint64_t)a1, a3);
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRelease();
  dispatch_group_leave(a3);
}

uint64_t sub_10001FB54(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_100007370(&qword_1000741B0);
    objc_super v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    objc_super v2 = &_swiftEmptyDictionarySingleton;
  }
  uint64_t v28 = a1 + 64;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v27 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v11 = (v5 - 1) & v5;
      unint64_t v12 = __clz(__rbit64(v5)) | (v8 << 6);
      int64_t v13 = v8;
      goto LABEL_28;
    }
    int64_t v14 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    if (v14 >= v27) {
      goto LABEL_42;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    int64_t v13 = v8 + 1;
    if (!v15)
    {
      int64_t v13 = v8 + 2;
      if (v8 + 2 >= v27) {
        goto LABEL_42;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v13);
      if (!v15)
      {
        int64_t v13 = v8 + 3;
        if (v8 + 3 >= v27) {
          goto LABEL_42;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v13);
        if (!v15)
        {
          int64_t v13 = v8 + 4;
          if (v8 + 4 >= v27) {
            goto LABEL_42;
          }
          unint64_t v15 = *(void *)(v28 + 8 * v13);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v11 = (v15 - 1) & v15;
    unint64_t v12 = __clz(__rbit64(v15)) + (v13 << 6);
LABEL_28:
    sub_100026424(*(void *)(a1 + 48) + 40 * v12, (uint64_t)v34);
    sub_100007314(*(void *)(a1 + 56) + 32 * v12, (uint64_t)v35 + 8);
    v32[0] = v35[0];
    v32[1] = v35[1];
    uint64_t v33 = v36;
    v31[0] = v34[0];
    v31[1] = v34[1];
    v17.uint64_t isa = AnyHashable._bridgeToObjectiveC()().isa;
    self;
    uint64_t v18 = swift_dynamicCastObjCClass();
    if (!v18)
    {

      sub_100015758((uint64_t)v31, &qword_1000741B8);
      swift_release();
      goto LABEL_41;
    }
    uint64_t v19 = v18;
    sub_100007314((uint64_t)v32 + 8, (uint64_t)v30);
    sub_100015758((uint64_t)v31, &qword_1000741B8);
    sub_10001958C(0, &qword_1000741A8);
    if ((swift_dynamicCast() & 1) == 0)
    {

      swift_release();
LABEL_41:
      sub_1000262C8();
      swift_release();
      return 0;
    }
    uint64_t result = NSObject._rawHashValue(seed:)(v2[5]);
    uint64_t v20 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v21) & ~*(void *)&v6[8 * (v21 >> 6)])) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v23 = 0;
      unint64_t v24 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        BOOL v25 = v22 == v24;
        if (v22 == v24) {
          unint64_t v22 = 0;
        }
        v23 |= v25;
        uint64_t v26 = *(void *)&v6[8 * v22];
      }
      while (v26 == -1);
      unint64_t v9 = __clz(__rbit64(~v26)) + (v22 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    uint64_t v10 = 8 * v9;
    *(void *)(v2[6] + v10) = v19;
    *(void *)(v2[7] + v10) = v29;
    ++v2[2];
    int64_t v8 = v13;
    unint64_t v5 = v11;
  }
  int64_t v16 = v8 + 5;
  if (v8 + 5 >= v27)
  {
LABEL_42:
    swift_release();
    sub_1000262C8();
    return (uint64_t)v2;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v13 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v13 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v13 >= v27) {
      goto LABEL_42;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v13);
    ++v16;
    if (v15) {
      goto LABEL_27;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_10001FF64(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = *(void *)&v4[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_cloudSharing + 8];
  int64_t v8 = *(void (**)(void))(v7 + 32);
  v41[3] = *(void *)&v4[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_cloudSharing];
  v41[4] = v7;
  sub_100025234(v41);
  id v9 = a1;
  v8();
  uint64_t v11 = *(void *)&v4[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_shareParticipantFetching
                     + 8];
  unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v39 = *(void *)&v4[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_shareParticipantFetching];
  uint64_t v10 = v39;
  uint64_t v40 = v11;
  sub_100025234(v38);
  uint64_t v13 = swift_bridgeObjectRetain();
  v12(v13, v10, v11);
  uint64_t v14 = v39;
  uint64_t v15 = v40;
  sub_100026480((uint64_t)v38, v39);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 + 8) + 16))(25, v14);
  sub_10000BFC4((uint64_t)v41, (uint64_t)&v35);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v9;
  sub_100028C4C(&v35, v16 + 24);
  uint64_t v17 = v39;
  uint64_t v18 = v40;
  sub_100026480((uint64_t)v38, v39);
  uint64_t v19 = *(void (**)(uint64_t (*)(void *), uint64_t, uint64_t, uint64_t))(v18 + 32);
  id v20 = v9;
  v19(sub_100026510, v16, v17, v18);
  sub_10000BFC4((uint64_t)v41, (uint64_t)&v35);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v4;
  sub_100028C4C(&v35, v21 + 24);
  *(void *)(v21 + 64) = a3;
  uint64_t v22 = v39;
  uint64_t v23 = v40;
  sub_100026480((uint64_t)v38, v39);
  unint64_t v24 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v23 + 56);
  BOOL v25 = v4;
  id v26 = a3;
  v24(sub_100026564, v21, v22, v23);
  int64_t v27 = &v25[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_container];
  uint64_t v28 = *(void *)&v25[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_container + 24];
  uint64_t v29 = *(void *)&v25[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_container + 32];
  sub_10000BE0C(v27, v28);
  uint64_t v30 = v39;
  uint64_t v31 = v40;
  uint64_t v32 = sub_10000BE0C(v38, v39);
  uint64_t v36 = v30;
  uint64_t v37 = *(void *)(v31 + 8);
  uint64_t v33 = sub_100025234((uint64_t *)&v35);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v30 - 8) + 16))(v33, v32, v30);
  (*(void (**)(long long *, uint64_t, uint64_t))(v29 + 8))(&v35, v28, v29);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v35);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v38);
  return _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v41);
}

uint64_t sub_100020240(void *a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)v41 - v13;
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_10000BE0C(a1, v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v16 + 56))(v49, v15, v16);
  id v17 = objc_msgSend((id)*sub_10000BE0C(v49, v49[3]), "lookupInfo");
  if (v17
    && (uint64_t v18 = v17, v19 = [v17 emailAddress], v18, v19))
  {
    uint64_t v46 = v6;
    uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v21 = v20;

    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v49);
    static Logger.syncEngine.getter();
    id v22 = a2;
    swift_bridgeObjectRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      v49[0] = v42;
      *(_DWORD *)uint64_t v25 = 136446466;
      v41[1] = v25 + 4;
      id v26 = [v22 zoneName];
      uint64_t v43 = v7;
      id v27 = v26;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v44 = a3;
      uint64_t v29 = v28;
      unint64_t v31 = v30;

      v47[0] = sub_1000067CC(v29, v31, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2082;
      swift_bridgeObjectRetain();
      v47[0] = sub_1000067CC(v45, v21, v49);
      a3 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Sharing %{public}s with family member: %{public}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v43 + 8))(v11, v46);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v46);
    }
    uint64_t v38 = a3;
    uint64_t v39 = a3[3];
    uint64_t v40 = a3[4];
    sub_10000BE0C(v38, v39);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(v40 + 40))(a1, v39, v40);
  }
  else
  {
    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v49);
    static Logger.syncEngine.getter();
    sub_10000BFC4((uint64_t)a1, (uint64_t)v49);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136446210;
      sub_10000BFC4((uint64_t)v49, (uint64_t)v47);
      sub_100007370((uint64_t *)&unk_100074200);
      uint64_t v35 = String.init<A>(describing:)();
      v47[0] = sub_1000067CC(v35, v36, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v49);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to share zone with participant because they do not have an email: %{public}s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v49);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
}

uint64_t sub_100020768(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v25 = a4;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v23 = a3;
      uint64_t v26 = a1;
      uint64_t v27 = v16;
      uint64_t v24 = a2;
      *(_DWORD *)uint64_t v15 = 136446210;
      v22[1] = v15 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v26 = sub_1000067CC(v17, v18, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a4 = v25;
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to fetch participants: %{public}s", v15, 0xCu);
      swift_arrayDestroy();
      a3 = v23;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    id v19 = [self defaultCenter];
    if (qword_1000739E8 != -1) {
      swift_once();
    }
    uint64_t v20 = qword_100074C08;
    if (qword_100073A28 != -1) {
      swift_once();
    }
    uint64_t v27 = qword_100074C40;
    char v28 = 0;
    [v19 postNotificationName:v20 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    swift_errorRelease();
  }
  return sub_100020AA8(a3, a4);
}

uint64_t sub_100020AA8(void *a1, void *a2)
{
  uint64_t v3 = v2;
  id v52 = a2;
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  sub_10000BFC4((uint64_t)a1, (uint64_t)v57);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v50 = v5;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(void *)&long long v54 = v49;
    uint64_t v51 = v2;
    *(_DWORD *)uint64_t v12 = 136446210;
    uint64_t v48 = v12 + 4;
    uint64_t v13 = v58;
    uint64_t v14 = v59;
    sub_10000BE0C(v57, v58);
    uint64_t v15 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v14 + 8) + 8))(v13);
    id v16 = [v15 zoneID];

    id v17 = [v16 zoneName];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v20 = v19;

    uint64_t v53 = sub_1000067CC(v18, v20, (uint64_t *)&v54);
    uint64_t v3 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v57);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Saving share record for: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v50);
  }
  else
  {
    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v57);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  uint64_t v21 = *(void *)&v3[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_recordModifying + 8];
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v21 + 16);
  uint64_t v58 = *(void *)&v3[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_recordModifying];
  uint64_t v22 = v58;
  uint64_t v59 = v21;
  sub_100025234(v57);
  v23(v22, v21);
  uint64_t v24 = v58;
  uint64_t v25 = v59;
  sub_100026480((uint64_t)v57, v58);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v25 + 8) + 16))(25, v24);
  sub_100007370(&qword_1000741C8);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_10005FEC0;
  uint64_t v27 = a1[3];
  uint64_t v28 = a1[4];
  uint64_t v29 = sub_10000BE0C(a1, v27);
  *(void *)(v26 + 56) = v27;
  *(void *)(v26 + 64) = *(void *)(v28 + 8);
  unint64_t v30 = sub_100025234((uint64_t *)(v26 + 32));
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v27 - 8) + 16))(v30, v29, v27);
  uint64_t v31 = v58;
  uint64_t v32 = v59;
  sub_100026480((uint64_t)v57, v58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 56))(v26, v31, v32);
  sub_10000BFC4((uint64_t)a1, (uint64_t)&v54);
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = v52;
  *(void *)(v33 + 16) = v52;
  *(void *)(v33 + 24) = v3;
  sub_100028C4C(&v54, v33 + 32);
  uint64_t v35 = v58;
  uint64_t v36 = v59;
  sub_100026480((uint64_t)v57, v58);
  uint64_t v37 = *(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v36 + 32);
  id v38 = v34;
  uint64_t v39 = v3;
  v37(sub_1000265BC, v33, v35, v36);
  uint64_t v40 = &v39[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_database];
  uint64_t v41 = *(void *)&v39[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_database + 24];
  uint64_t v42 = *(void *)&v39[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_database + 32];
  sub_10000BE0C(v40, v41);
  uint64_t v43 = v58;
  uint64_t v44 = v59;
  uint64_t v45 = sub_10000BE0C(v57, v58);
  uint64_t v55 = v43;
  uint64_t v56 = *(void *)(v44 + 8);
  uint64_t v46 = sub_100025234((uint64_t *)&v54);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v43 - 8) + 16))(v46, v45, v43);
  (*(void (**)(long long *, uint64_t))(*(void *)(v42 + 8) + 8))(&v54, v41);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v54);
  return _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v57);
}

uint64_t sub_100020FA4(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, void *a5)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000265EC(a2, (uint64_t)v40, &qword_1000741D0);
  if (v41)
  {
    sub_1000226E0(*(uint64_t *)&v40[0], a5, a3);
    return swift_errorRelease();
  }
  else
  {
    sub_100028C4C(v40, (uint64_t)v39);
    sub_10000BFC4((uint64_t)v39, (uint64_t)v32);
    sub_100007370(&qword_1000741D8);
    sub_100007370(&qword_1000741E0);
    if (swift_dynamicCast())
    {
      sub_100028C4C(v30, (uint64_t)&v35);
      uint64_t v14 = v37;
      uint64_t v15 = v38;
      sub_10000BE0C(&v35, v37);
      uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v14, v15);
      uint64_t v17 = *(void *)(v16 + 16);
      if (v17)
      {
        uint64_t v18 = v16 + 32;
        do
        {
          sub_10000BFC4(v18, (uint64_t)v32);
          uint64_t v19 = v33;
          uint64_t v20 = v34;
          sub_10000BE0C(v32, v33);
          if ((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 8))(v19, v20) != 2)
          {
            dispatch_group_enter(a3);
            sub_10000BFC4((uint64_t)&v35, (uint64_t)v30);
            sub_100021488(v32, (uint64_t)v30, 0xD00000000000002CLL, 0x8000000100061420, a3);
            sub_100015758((uint64_t)v30, (uint64_t *)&unk_1000741E8);
          }
          _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v32);
          v18 += 40;
          --v17;
        }
        while (v17);
      }
      swift_bridgeObjectRelease();
      dispatch_group_leave(a3);
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v39);
      uint64_t v26 = &v35;
    }
    else
    {
      uint64_t v31 = 0;
      memset(v30, 0, sizeof(v30));
      sub_100015758((uint64_t)v30, (uint64_t *)&unk_1000741E8);
      static Logger.syncEngine.getter();
      sub_10000BFC4((uint64_t)v39, (uint64_t)&v35);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(void *)&v30[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446210;
        v29[1] = v23 + 4;
        sub_10000BFC4((uint64_t)&v35, (uint64_t)v32);
        uint64_t v24 = String.init<A>(describing:)();
        v32[0] = sub_1000067CC(v24, v25, (uint64_t *)v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v35);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Saved record does not conform to CloudSharing: %{public}s", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v35);
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      id v27 = [self defaultCenter];
      if (qword_1000739E8 != -1) {
        swift_once();
      }
      uint64_t v28 = qword_100074C08;
      if (qword_100073A28 != -1) {
        swift_once();
      }
      uint64_t v35 = qword_100074C40;
      char v36 = 0;
      [v27 postNotificationName:v28 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

      swift_unknownObjectRelease();
      dispatch_group_leave(a3);
      uint64_t v26 = (uint64_t *)v39;
    }
    return _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v26);
  }
}

void sub_100021488(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, NSObject *a5)
{
  uint64_t v6 = v5;
  dispatch_group_t v133 = a5;
  unint64_t v134 = a4;
  uint64_t v132 = a3;
  uint64_t v128 = a2;
  uint64_t v8 = sub_100007370(&qword_100073CC0);
  __chkstk_darwin(v8 - 8, v9);
  BOOL v127 = (char *)&v119 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100007370(&qword_1000741F8);
  __chkstk_darwin(v11 - 8, v12);
  os_log_type_t v126 = (uint64_t *)((char *)&v119 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = type metadata accessor for Logger();
  unint64_t v15 = *(void *)(v14 - 8);
  uint64_t v17 = __chkstk_darwin(v14, v16);
  uint64_t v19 = (char *)&v119 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v124 = (char *)&v119 - v22;
  uint64_t v24 = __chkstk_darwin(v21, v23);
  unint64_t v130 = (char *)&v119 - v25;
  __chkstk_darwin(v24, v26);
  uint64_t v28 = (char *)&v119 - v27;
  uint64_t v29 = a1[3];
  uint64_t v30 = a1[4];
  sub_10000BE0C(a1, v29);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v30 + 56))(&v137, v29, v30);
  id v31 = objc_msgSend((id)*sub_10000BE0C(&v137, v139), "lookupInfo");
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v137);
  if (!v31)
  {
LABEL_30:
    static Logger.syncEngine.getter();
    sub_10000BFC4((uint64_t)a1, (uint64_t)&v137);
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v83, v84))
    {
      unint64_t v134 = v14;
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      uint64_t v136 = swift_slowAlloc();
      *(_DWORD *)uint64_t v85 = 136446210;
      sub_10000BFC4((uint64_t)&v137, (uint64_t)&v135);
      sub_100007370((uint64_t *)&unk_100074200);
      uint64_t v86 = String.init<A>(describing:)();
      uint64_t v135 = sub_1000067CC(v86, v87, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v137);
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Failed to create invitation for: %{public}s", v85, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, unint64_t))(v15 + 8))(v19, v134);
    }
    else
    {
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v137);

      (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
    }
    id v88 = [self defaultCenter];
    if (qword_1000739E8 != -1) {
      swift_once();
    }
    uint64_t v89 = qword_100074C08;
    if (qword_100073A28 != -1) {
      swift_once();
    }
    uint64_t v137 = qword_100074C40;
    char v138 = 0;
    [v88 postNotificationName:v89 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    dispatch_group_leave(v133);
    return;
  }
  id v32 = [v31 emailAddress];
  if (!v32)
  {
    id v32 = [v31 phoneNumber];
    if (!v32)
    {

      goto LABEL_30;
    }
  }
  uint64_t v121 = v6;
  uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v131 = v33;

  static Logger.syncEngine.getter();
  sub_10000BFC4((uint64_t)a1, (uint64_t)&v137);
  unint64_t v34 = v134;
  swift_bridgeObjectRetain_n();
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  BOOL v37 = os_log_type_enabled(v35, v36);
  id v125 = v31;
  if (v37)
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v136 = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 136446466;
    unint64_t v123 = v15;
    swift_bridgeObjectRetain();
    uint64_t v39 = v132;
    uint64_t v135 = sub_1000067CC(v132, v134, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v38 + 12) = 2082;
    sub_10000BFC4((uint64_t)&v137, (uint64_t)&v135);
    sub_100007370((uint64_t *)&unk_100074200);
    uint64_t v40 = String.init<A>(describing:)();
    uint64_t v135 = sub_1000067CC(v40, v41, &v136);
    unint64_t v15 = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v137);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Sending %{public}s to participant: %{public}s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    unint64_t v34 = v134;
    swift_slowDealloc();

    uint64_t v42 = *(void (**)(char *, uint64_t))(v15 + 8);
    v42(v28, v14);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v137);

    uint64_t v42 = *(void (**)(char *, uint64_t))(v15 + 8);
    v42(v28, v14);
    uint64_t v39 = v132;
  }
  NSString v43 = String._bridgeToObjectiveC()();
  if ((v39 != 0xD00000000000002CLL || v34 != 0x8000000100061420)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    if (v39 == 0xD000000000000033 && v34 == 0x8000000100061450
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      sub_10004A47C((uint64_t)&_swiftEmptyArrayStorage);
      id v59 = objc_allocWithZone((Class)IDSDictionaryInvitationContext);
      swift_bridgeObjectRetain();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      NSString v61 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v62 = [v59 initWithDictionary:isa schema:v61];

      uint64_t v63 = *(void *)(v121
                      + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                      + 24);
      uint64_t v64 = *(void *)(v121
                      + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                      + 32);
      sub_10000BE0C((void *)(v121 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager), v63);
      uint64_t v65 = (uint64_t)v127;
      static Date.distantFuture.getter();
      uint64_t v66 = type metadata accessor for Date();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v65, 0, 1, v66);
      dispatch_group_t v67 = (void *)swift_allocObject();
      uint64_t v68 = v131;
      v67[2] = v129;
      v67[3] = v68;
      dispatch_group_t v69 = v133;
      v67[4] = v133;
      char v70 = *(void (**)(NSString, uint64_t, id, void (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v64 + 32);
      unint64_t v71 = v69;
      id v72 = v62;
      v70(v43, v65, v72, sub_1000265CC, v67, v63, v64);

      swift_release();
      sub_100015758(v65, &qword_100073CC0);
    }
    else
    {
      uint64_t v113 = v42;
      swift_bridgeObjectRelease();
      id v114 = v124;
      static Logger.syncEngine.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v115 = Logger.logObject.getter();
      os_log_type_t v116 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v115, v116))
      {
        long long v117 = (uint8_t *)swift_slowAlloc();
        uint64_t v137 = swift_slowAlloc();
        NSString v122 = v43;
        *(_DWORD *)long long v117 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v135 = sub_1000067CC(v132, v34, &v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v115, v116, "Tried to send invitation using unknown schema: %{public}s", v117, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        NSString v43 = v122;
        uint64_t v118 = v124;
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v118 = v114;
      }
      v113(v118, v14);
      dispatch_group_leave(v133);
    }
    return;
  }
  uint64_t v124 = (char *)v42;
  uint64_t v44 = a1[3];
  uint64_t v45 = a1[4];
  sub_10000BE0C(a1, v44);
  uint64_t v46 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v45 + 16))(v44, v45);
  NSString v122 = v43;
  if (!v46)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    os_log_type_t v73 = v130;
    static Logger.syncEngine.getter();
    sub_10000BFC4((uint64_t)a1, (uint64_t)&v137);
    uint64_t v74 = Logger.logObject.getter();
    os_log_type_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v74, v75))
    {
      uint64_t v76 = (uint8_t *)swift_slowAlloc();
      uint64_t v77 = swift_slowAlloc();
      unint64_t v123 = v15;
      uint64_t v136 = v77;
      *(_DWORD *)uint64_t v76 = 136446210;
      sub_10000BFC4((uint64_t)&v137, (uint64_t)&v135);
      sub_100007370((uint64_t *)&unk_100074200);
      uint64_t v78 = String.init<A>(describing:)();
      uint64_t v135 = sub_1000067CC(v78, v79, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v137);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed to create share invitation for: %{public}s", v76, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v137);
    }

    ((void (*)(char *, uint64_t))v124)(v73, v14);
    id v80 = [self defaultCenter];
    uint64_t v81 = v122;
    if (qword_1000739E8 != -1) {
      swift_once();
    }
    uint64_t v82 = qword_100074C08;
    if (qword_100073A28 != -1) {
      swift_once();
    }
    uint64_t v137 = qword_100074C40;
    char v138 = 0;
    [v80 postNotificationName:v82 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    dispatch_group_leave(v133);

    return;
  }
  id v47 = v46;
  id v48 = [v46 sharingInvitationData];

  uint64_t v49 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v51 = v50;

  sub_1000265EC(v128, (uint64_t)&v137, (uint64_t *)&unk_1000741E8);
  uint64_t v52 = v139;
  if (!v139)
  {
    swift_bridgeObjectRelease();
    sub_10000BF6C(v49, v51);
    uint64_t v57 = (uint64_t *)&unk_1000741E8;
    uint64_t v58 = &v137;
    goto LABEL_20;
  }
  uint64_t v120 = v49;
  unint64_t v123 = v51;
  uint64_t v53 = v140;
  sub_10000BE0C(&v137, v139);
  long long v54 = v126;
  (*(void (**)(uint64_t, uint64_t))(v53 + 24))(v52, v53);
  uint64_t v55 = type metadata accessor for URL();
  uint64_t v56 = *(void *)(v55 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55) == 1)
  {
    swift_bridgeObjectRelease();
    sub_10000BF6C(v120, v123);
    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v137);
    uint64_t v57 = &qword_1000741F8;
    uint64_t v58 = v54;
LABEL_20:
    sub_100015758((uint64_t)v58, v57);
    goto LABEL_21;
  }
  uint64_t v90 = URL.absoluteString.getter();
  uint64_t v92 = v91;
  (*(void (**)(uint64_t *, uint64_t))(v56 + 8))(v54, v55);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v137);
  sub_100007370(&qword_100073EC8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10005FC80;
  if (qword_1000739F0 != -1) {
    swift_once();
  }
  uint64_t v94 = qword_100074C18;
  *(void *)(inited + 32) = qword_100074C10;
  *(void *)(inited + 40) = v94;
  uint64_t v95 = v120;
  unint64_t v96 = v123;
  *(void *)(inited + 48) = v120;
  *(void *)(inited + 56) = v96;
  *(void *)(inited + 72) = &type metadata for Data;
  *(void *)(inited + 80) = 0xD000000000000018;
  *(void *)(inited + 120) = &type metadata for String;
  *(void *)(inited + 88) = 0x8000000100061490;
  *(void *)(inited + 96) = v90;
  *(void *)(inited + 104) = v92;
  swift_bridgeObjectRetain();
  sub_100015DDC(v95, v96);
  unint64_t v97 = sub_10004A020(inited);
  sub_10001CB5C(v97);
  swift_bridgeObjectRelease();
  id v98 = objc_allocWithZone((Class)IDSDictionaryInvitationContext);
  swift_bridgeObjectRetain();
  Class v99 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  NSString v100 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v101 = [v98 initWithDictionary:v99 schema:v100];

  uint64_t v102 = *(void *)(v121
                   + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                   + 24);
  uint64_t v103 = *(void *)(v121
                   + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                   + 32);
  sub_10000BE0C((void *)(v121 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager), v102);
  uint64_t v104 = (uint64_t)v127;
  static Date.distantFuture.getter();
  uint64_t v105 = type metadata accessor for Date();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56))(v104, 0, 1, v105);
  id v106 = (void *)swift_allocObject();
  uint64_t v107 = v131;
  v106[2] = v129;
  v106[3] = v107;
  dispatch_group_t v108 = v133;
  v106[4] = v133;
  int64_t v109 = *(void (**)(NSString, uint64_t, id, void (*)(uint64_t, uint64_t), void *, uint64_t, uint64_t))(v103 + 32);
  id v110 = v101;
  uint64_t v111 = v108;
  uint64_t v112 = v122;
  v109(v122, v104, v110, sub_10002A190, v106, v102, v103);

  swift_release();
  sub_10000BF6C(v120, v123);
  sub_100015758(v104, &qword_100073CC0);
}

void sub_1000226E0(uint64_t a1, void *a2, NSObject *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  os_log_type_t v84 = (char *)v79 - v13;
  *(void *)&long long v86 = a1;
  swift_errorRetain();
  sub_100007370(&qword_1000741C0);
  sub_100007370(&qword_100074218);
  if (swift_dynamicCast())
  {
    sub_100028C4C(&v90, (uint64_t)&v93);
    if ((void)v95) {
      goto LABEL_3;
    }
LABEL_15:
    sub_100015758((uint64_t)&v93, &qword_100074220);
    sub_100028930(a1, a3);
    return;
  }
  uint64_t v92 = 0;
  long long v90 = 0u;
  long long v91 = 0u;
  v85[0] = a1;
  swift_errorRetain();
  type metadata accessor for CKError(0);
  uint64_t v23 = v22;
  if (swift_dynamicCast())
  {
    uint64_t v24 = v89;
    *(void *)&long long v95 = v23;
    *((void *)&v95 + 1) = sub_100028C64(&qword_100074228, type metadata accessor for CKError);
  }
  else
  {
    uint64_t v24 = 0;
    long long v94 = 0u;
    long long v95 = 0u;
  }
  uint64_t v93 = (char *)v24;
  sub_100015758((uint64_t)&v90, &qword_100074220);
  if (!(void)v95) {
    goto LABEL_15;
  }
LABEL_3:
  uint64_t v83 = v7;
  sub_100028C4C((long long *)&v93, (uint64_t)v96);
  sub_10000BE0C(v96, v97);
  uint64_t v14 = *(uint64_t (**)(void))(sub_100028C64(&qword_100074228, type metadata accessor for CKError) + 48);
  type metadata accessor for CKError(0);
  uint64_t v15 = v14();
  if (v15 != 14)
  {
    if (v15 == 26)
    {
      uint64_t v33 = a2[3];
      uint64_t v32 = a2[4];
      sub_10000BE0C(a2, v33);
      unint64_t v34 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v32 + 8) + 8))(v33);
      id v35 = [v34 zoneID];

      static Logger.syncEngine.getter();
      id v36 = v35;
      BOOL v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc();
        os_log_type_t v84 = (char *)swift_slowAlloc();
        uint64_t v93 = v84;
        *(_DWORD *)uint64_t v39 = 136446210;
        uint64_t v81 = v39 + 4;
        id v40 = [v36 zoneName];
        uint64_t v82 = v6;
        id v41 = v40;
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v44 = v43;

        *(void *)&long long v90 = sub_1000067CC(v42, v44, (uint64_t *)&v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "%{public}s was not found, posting zone deletion notification.", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(char *, uint64_t))(v83 + 8))(v11, v82);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v83 + 8))(v11, v6);
      }
      id v55 = [self defaultCenter];
      if (qword_100073A00 != -1) {
        swift_once();
      }
      [v55 postNotificationName:qword_100074C20 object:v36];

      dispatch_group_leave(a3);
      goto LABEL_36;
    }
    if (v15 == 33)
    {
      uint64_t v16 = a2[3];
      uint64_t v17 = a2[4];
      sub_10000BE0C(a2, v16);
      uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
      uint64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        uint64_t v20 = v18 + 32;
        do
        {
          sub_10000BFC4(v20, (uint64_t)&v93);
          long long v21 = v95;
          sub_10000BE0C(&v93, v95);
          if ((*(uint64_t (**)(void, void))(*((void *)&v21 + 1) + 8))(v21, *((void *)&v21 + 1)) != 2)
          {
            dispatch_group_enter(a3);
            uint64_t v92 = 0;
            long long v90 = 0u;
            long long v91 = 0u;
            sub_100021488(&v93, (uint64_t)&v90, 0xD000000000000033, 0x8000000100061450, a3);
            sub_100015758((uint64_t)&v90, (uint64_t *)&unk_1000741E8);
          }
          _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v93);
          v20 += 40;
          --v19;
        }
        while (v19);
      }
      swift_bridgeObjectRelease();
      dispatch_group_leave(a3);
      goto LABEL_36;
    }
    goto LABEL_32;
  }
  uint64_t v82 = v6;
  sub_10000BE0C(v96, v97);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = type metadata accessor for Optional();
  uint64_t v81 = v79;
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v28);
  uint64_t v30 = (void *)((char *)v79 - v29);
  *uint64_t v30 = related decl 'e' for CKErrorCode.serverRecord.getter();
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48))(v30, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(uint64_t *, uint64_t))(v27 + 8))(v30, v26);
    long long v90 = 0u;
    long long v91 = 0u;
    uint64_t v92 = 0;
  }
  else
  {
    *((void *)&v87 + 1) = AssociatedTypeWitness;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v45 = sub_100025234((uint64_t *)&v86);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v31 + 32))(v45, v30, AssociatedTypeWitness);
    sub_100007370(&qword_1000741D8);
    sub_100007370(&qword_1000741E0);
    if (swift_dynamicCast())
    {
      if (*((void *)&v91 + 1))
      {
        sub_100028C4C(&v90, (uint64_t)&v93);
        uint64_t v46 = v97;
        uint64_t v47 = v98;
        uint64_t v81 = sub_10000BE0C(v96, v97);
        v79[0] = v47;
        v79[1] = v46;
        uint64_t v48 = swift_getAssociatedTypeWitness();
        uint64_t v49 = type metadata accessor for Optional();
        id v80 = v79;
        uint64_t v50 = *(void *)(v49 - 8);
        __chkstk_darwin(v49, v51);
        uint64_t v53 = (void *)((char *)v79 - v52);
        uint64_t *v53 = related decl 'e' for CKErrorCode.clientRecord.getter();
        uint64_t v54 = *(void *)(v48 - 8);
        if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v54 + 48))(v53, 1, v48) == 1)
        {
          (*(void (**)(uint64_t *, uint64_t))(v50 + 8))(v53, v49);
          long long v86 = 0u;
          long long v87 = 0u;
          uint64_t AssociatedConformanceWitness = 0;
        }
        else
        {
          v85[3] = v48;
          v85[4] = swift_getAssociatedConformanceWitness();
          uint64_t v65 = sub_100025234(v85);
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v54 + 32))(v65, v53, v48);
          if (swift_dynamicCast())
          {
            if (*((void *)&v87 + 1))
            {
              sub_100028C4C(&v86, (uint64_t)&v90);
              uint64_t v66 = v84;
              static Logger.syncEngine.getter();
              sub_10000BFC4((uint64_t)&v93, (uint64_t)&v86);
              dispatch_group_t v67 = Logger.logObject.getter();
              os_log_type_t v68 = static os_log_type_t.debug.getter();
              if (os_log_type_enabled(v67, v68))
              {
                dispatch_group_t v69 = (uint8_t *)swift_slowAlloc();
                uint64_t v81 = (void *)swift_slowAlloc();
                v85[0] = (uint64_t)v81;
                *(_DWORD *)dispatch_group_t v69 = 136446210;
                id v80 = v69 + 4;
                uint64_t v71 = *((void *)&v87 + 1);
                uint64_t v70 = AssociatedConformanceWitness;
                sub_10000BE0C(&v86, *((uint64_t *)&v87 + 1));
                id v72 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v70 + 8) + 8))(v71);
                id v73 = [v72 zoneID];

                id v74 = [v73 zoneName];
                uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                unint64_t v77 = v76;

                uint64_t v89 = sub_1000067CC(v75, v77, v85);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v86);
                _os_log_impl((void *)&_mh_execute_header, v67, v68, "Updating share for: %{public}s", v69, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v86);
              }

              (*(void (**)(char *, uint64_t))(v83 + 8))(v66, v82);
              sub_100026C3C(&v93, &v90);
              if (v78) {
                sub_100020AA8(&v93, a3);
              }
              else {
                dispatch_group_leave(a3);
              }
              _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v90);
              _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v93);
              goto LABEL_36;
            }
          }
          else
          {
            uint64_t AssociatedConformanceWitness = 0;
            long long v87 = 0u;
            long long v86 = 0u;
          }
        }
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v93);
        uint64_t v56 = &v86;
        goto LABEL_31;
      }
    }
    else
    {
      uint64_t v92 = 0;
      long long v90 = 0u;
      long long v91 = 0u;
    }
  }
  uint64_t v56 = &v90;
LABEL_31:
  sub_100015758((uint64_t)v56, (uint64_t *)&unk_1000741E8);
LABEL_32:
  uint64_t v57 = v97;
  uint64_t v58 = sub_10000BE0C(v96, v97);
  uint64_t v59 = *(void *)(v57 - 8);
  __chkstk_darwin(v58, v58);
  NSString v61 = (char *)v79 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v59 + 16))(v61);
  sub_100028C64(&qword_100074230, type metadata accessor for CKError);
  uint64_t v62 = _getErrorEmbeddedNSError<A>(_:)();
  if (v62)
  {
    uint64_t v63 = v62;
    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v57);
  }
  else
  {
    uint64_t v63 = swift_allocError();
    (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v64, v61, v57);
  }
  sub_100028930(v63, a3);
  swift_errorRelease();
LABEL_36:
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v96);
}

void sub_1000234F4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, NSObject *a5)
{
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v30 - v16;
  if (a2)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v32 = a5;
      uint64_t v33 = v21;
      *(_DWORD *)uint64_t v20 = 136446466;
      uint64_t v31 = v9;
      swift_bridgeObjectRetain();
      uint64_t v35 = sub_1000067CC(a3, a4, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v20 + 12) = 2082;
      uint64_t v35 = a2;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v35 = sub_1000067CC(v22, v23, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to send invitation to %{public}s: %{public}s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      a5 = v32;
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v31);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    }
    id v28 = [self defaultCenter];
    if (qword_1000739E8 != -1) {
      swift_once();
    }
    uint64_t v29 = qword_100074C08;
    if (qword_100073A28 != -1) {
      swift_once();
    }
    uint64_t v33 = qword_100074C40;
    char v34 = 0;
    [v28 postNotificationName:v29 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    swift_errorRelease();
  }
  else
  {
    static Logger.syncEngine.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v32 = a5;
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v31 = v9;
      uint64_t v33 = v27;
      *(_DWORD *)uint64_t v26 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v35 = sub_1000067CC(a3, a4, &v33);
      a5 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Successfully sent invitation to %{public}s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v31);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    }
  }
  dispatch_group_leave(a5);
}

void sub_100023A7C(uint64_t a1, void *a2, int a3, uint64_t a4, void *a5)
{
  LODWORD(v7) = a3;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v29 - v16;
  if (v7)
  {
    uint64_t v31 = a5;
    LODWORD(v32) = v7;
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v30 = a4;
      uint64_t v33 = (uint64_t)a2;
      uint64_t v34 = v21;
      *(_DWORD *)uint64_t v20 = 136446210;
      uint64_t v29 = v20 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v33 = sub_1000067CC(v22, v23, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100029F58(a2, 1);
      sub_100029F58(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to fetch share metadata: %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      a4 = v30;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100029F58(a2, 1);
      sub_100029F58(a2, 1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
    uint64_t v7 = *(void *)(a4
                   + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                   + 24);
    uint64_t v28 = *(void *)(a4
                    + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                    + 32);
    sub_10000BE0C((void *)(a4 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager), v7);
    (*(void (**)(void *, uint64_t (*)(uint64_t), void, uint64_t, uint64_t))(v28 + 48))(v31, sub_100024BDC, 0, v7, v28);
    LOBYTE(v7) = (_BYTE)v32;
  }
  else
  {
    id v24 = a2;
    static Logger.syncEngine.getter();
    os_log_type_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      id v32 = v24;
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully fetched share metadata", v27, 2u);
      id v24 = v32;
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    sub_100023E20(v24, a5);
  }
  sub_100029F58(a2, v7 & 1);
}

uint64_t sub_100023E20(void *a1, void *a2)
{
  uint64_t v3 = v2;
  sub_100007370(&qword_1000742A0);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_10005FED0;
  *(void *)(v6 + 32) = a1;
  v20[0] = v6;
  specialized Array._endMutation()();
  id v7 = objc_allocWithZone((Class)CKAcceptSharesOperation);
  sub_10001958C(0, &qword_1000742A8);
  id v8 = a1;
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v10 = [v7 initWithShareMetadatas:isa];

  [v10 setQualityOfService:25];
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = v3;
  *(void *)(v11 + 24) = a2;
  uint64_t v12 = v3;
  id v13 = a2;
  CKAcceptSharesOperation.acceptSharesResultBlock.setter();
  uint64_t v14 = &v12[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_container];
  uint64_t v15 = *(void *)&v12[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_container + 24];
  uint64_t v16 = *(void *)&v12[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_container + 32];
  sub_10000BE0C(v14, v15);
  v20[3] = sub_10001958C(0, &qword_1000742B0);
  v20[4] = &off_10006F390;
  v20[0] = v10;
  uint64_t v17 = *(void (**)(void *, uint64_t, uint64_t))(v16 + 8);
  id v18 = v10;
  v17(v20, v15, v16);

  return _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v20);
}

uint64_t sub_100023FD8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v35 - v14;
  if (a2)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v36 = v7;
      os_log_type_t v19 = (uint8_t *)v18;
      uint64_t v20 = swift_slowAlloc();
      os_log_type_t v38 = a4;
      uint64_t v39 = a2;
      uint64_t v40 = v20;
      *(_DWORD *)os_log_type_t v19 = 136446210;
      uint64_t v37 = a3;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v21 = String.init<A>(describing:)();
      uint64_t v39 = sub_1000067CC(v21, v22, &v40);
      a3 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to save authorization zone: %{public}s", v19, 0xCu);
      swift_arrayDestroy();
      a4 = v38;
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v36);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    }
    id v32 = (void *)(a3 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager);
    uint64_t v33 = *(void *)(a3
                    + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                    + 24);
    uint64_t v34 = *(void *)(a3
                    + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                    + 32);
    sub_10000BE0C(v32, v33);
    (*(void (**)(void *, uint64_t (*)(uint64_t), void, uint64_t, uint64_t))(v34 + 48))(a4, sub_100024BDC, 0, v33, v34);
    return swift_errorRelease();
  }
  else
  {
    static Logger.syncEngine.getter();
    unint64_t v23 = Logger.logObject.getter();
    uint64_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, (os_log_type_t)v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v24, "Successfully saved authorization zone", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v8 + 8))(v15, v7);
    os_log_type_t v26 = (void *)(a3 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager);
    uint64_t v27 = *(void *)(a3
                    + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                    + 24);
    uint64_t v28 = *(void *)(a3
                    + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                    + 32);
    sub_10000BE0C(v26, v27);
    id v29 = [a4 context];
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = a4;
    (*(void (**)(void *, id, uint64_t (*)(), uint64_t, uint64_t, uint64_t))(v28 + 40))(a4, v29, sub_10002A188, v30, v27, v28);
    swift_unknownObjectRelease();
    return swift_release();
  }
}

uint64_t sub_1000243E0(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v34 - v15;
  if (a2)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v35 = a3;
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v36 = a4;
      uint64_t v37 = a1;
      uint64_t v38 = v28;
      *(_DWORD *)uint64_t v27 = 136446210;
      v34[1] = v27 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v37 = sub_1000067CC(v29, v30, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a3 = v35;
      swift_bridgeObjectRelease();
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to accept share: %{public}s", v27, 0xCu);
      swift_arrayDestroy();
      a4 = v36;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    uint64_t v31 = (void *)(a3 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager);
    uint64_t v32 = *(void *)(a3
                    + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                    + 24);
    uint64_t v33 = v31[4];
    sub_10000BE0C(v31, v32);
    (*(void (**)(void *, uint64_t (*)(uint64_t), void, uint64_t, uint64_t))(v33 + 48))(a4, sub_100024BDC, 0, v32, v33);
    return sub_100029F70(a1, 1);
  }
  else
  {
    static Logger.syncEngine.getter();
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully accepted share", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    uint64_t v20 = *(void *)(a3
                    + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                    + 24);
    uint64_t v21 = *(void *)(a3
                    + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager
                    + 32);
    sub_10000BE0C((void *)(a3 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager), v20);
    id v22 = [a4 context];
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = a4;
    (*(void (**)(void *, id, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v21 + 40))(a4, v22, sub_100029FB4, v23, v20, v21);
    swift_unknownObjectRelease();
    return swift_release();
  }
}

uint64_t sub_1000247F0(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  uint64_t v12 = (char *)v31 - v11;
  if (a1)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v34 = a1;
      uint64_t v35 = v16;
      uint64_t v33 = v4;
      *(_DWORD *)uint64_t v15 = 136446210;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v34 = sub_1000067CC(v17, v18, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to accept invitation: %{public}s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v33);
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    unint64_t v30 = v9;
  }
  else
  {
    static Logger.syncEngine.getter();
    id v20 = a2;
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v35 = v32;
      uint64_t v33 = v4;
      *(_DWORD *)uint64_t v23 = 136446210;
      v31[1] = v23 + 4;
      id v24 = v20;
      id v25 = [v24 description];
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v28 = v27;

      uint64_t v34 = sub_1000067CC(v26, v28, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Successfully accepted invitation %{public}s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v33);
    }

    uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    unint64_t v30 = v12;
  }
  return v29(v30, v4);
}

uint64_t sub_100024BDC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)&v23 - v9;
  if (a1)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v24 = v2;
      uint64_t v25 = a1;
      uint64_t v26 = v14;
      *(_DWORD *)uint64_t v13 = 136446210;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v15 = String.init<A>(describing:)();
      uint64_t v25 = sub_1000067CC(v15, v16, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to decline invitation: %{public}s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v24);
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    uint64_t v21 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    os_log_type_t v22 = v7;
  }
  else
  {
    static Logger.syncEngine.getter();
    unint64_t v18 = Logger.logObject.getter();
    uint64_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "Successfully declined invitation", v20, 2u);
      swift_slowDealloc();
    }

    uint64_t v21 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    os_log_type_t v22 = v10;
  }
  return v21(v22, v2);
}

void sub_100024F18(void *a1, uint64_t a2, void *a3, void *a4, void (*a5)(id))
{
  id v8 = a3;
  id v9 = a4;
  id v10 = a1;
  a5(v9);
}

uint64_t sub_100024F90(uint64_t result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v3 = 0;
  uint64_t v29 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  else {
    uint64_t v5 = -1;
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v30 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = a2 + 56;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      int64_t v31 = v3;
      unint64_t v9 = v8 | (v3 << 6);
      goto LABEL_26;
    }
    int64_t v10 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v10 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v10);
    int64_t v12 = v3 + 1;
    if (!v11)
    {
      int64_t v12 = v3 + 2;
      if (v3 + 2 >= v30) {
        return 1;
      }
      unint64_t v11 = *(void *)(v29 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v3 + 3;
        if (v3 + 3 >= v30) {
          return 1;
        }
        unint64_t v11 = *(void *)(v29 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v3 + 4;
          if (v3 + 4 >= v30) {
            return 1;
          }
          unint64_t v11 = *(void *)(v29 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }
LABEL_25:
    unint64_t v6 = (v11 - 1) & v11;
    int64_t v31 = v12;
    unint64_t v9 = __clz(__rbit64(v11)) + (v12 << 6);
LABEL_26:
    uint64_t v14 = result;
    uint64_t v15 = (uint64_t *)(*(void *)(result + 48) + 16 * v9);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v18 = Hasher._finalize()();
    uint64_t v19 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v20 = v18 & ~v19;
    if (((*(void *)(v7 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_41;
    }
    uint64_t v21 = *(void *)(a2 + 48);
    os_log_type_t v22 = (void *)(v21 + 16 * v20);
    BOOL v23 = *v22 == v17 && v22[1] == v16;
    if (!v23 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v24 = ~v19;
      for (unint64_t i = v20 + 1; ; unint64_t i = v26 + 1)
      {
        uint64_t v26 = i & v24;
        if (((*(void *)(v7 + (((i & v24) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v24)) & 1) == 0) {
          break;
        }
        unint64_t v27 = (void *)(v21 + 16 * v26);
        BOOL v28 = *v27 == v17 && v27[1] == v16;
        if (v28 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          goto LABEL_7;
        }
      }
LABEL_41:
      swift_bridgeObjectRelease();
      return 0;
    }
LABEL_7:
    swift_bridgeObjectRelease();
    uint64_t result = v14;
    int64_t v3 = v31;
  }
  uint64_t v13 = v3 + 5;
  if (v3 + 5 >= v30) {
    return 1;
  }
  unint64_t v11 = *(void *)(v29 + 8 * v13);
  if (v11)
  {
    int64_t v12 = v3 + 5;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v12 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v12 >= v30) {
      return 1;
    }
    unint64_t v11 = *(void *)(v29 + 8 * v12);
    ++v13;
    if (v11) {
      goto LABEL_25;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t *sub_100025234(uint64_t *a1)
{
  id v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

char *sub_100025298(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007370(&qword_100074178);
      int64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      int64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100026894(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

char *sub_1000253A8(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_1000253E0(a1, a2, a3, a4, (uint64_t *)&unk_100074260, &qword_100074248);
}

uint64_t sub_1000253BC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100025644(a1, a2, a3, a4, &qword_1000742B8, (uint64_t (*)(void))&type metadata accessor for AuthorizationRecord, (uint64_t (*)(void))&type metadata accessor for AuthorizationRecord);
}

char *sub_1000253E0(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  char v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v10 = a2;
    goto LABEL_8;
  }
  unint64_t v9 = *((void *)a4 + 3);
  uint64_t v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v10 + 0x4000000000000000 >= 0)
  {
    uint64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v10 = a2;
    }
LABEL_8:
    uint64_t v11 = *((void *)a4 + 2);
    if (v10 <= v11) {
      uint64_t v12 = *((void *)a4 + 2);
    }
    else {
      uint64_t v12 = v10;
    }
    if (v12)
    {
      sub_100007370(a5);
      uint64_t v13 = (char *)swift_allocObject();
      size_t v14 = j__malloc_size(v13);
      *((void *)v13 + 2) = v11;
      *((void *)v13 + 3) = 2 * ((uint64_t)(v14 - 32) / 40);
      uint64_t v15 = v13 + 32;
      if (v8)
      {
LABEL_13:
        if (v13 != a4 || v15 >= &a4[40 * v11 + 32]) {
          memmove(v15, a4 + 32, 40 * v11);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v15 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result) {
        goto LABEL_13;
      }
    }
    sub_10002699C(0, v11, (unint64_t)v15, (uint64_t)a4, a6);
LABEL_22:
    swift_bridgeObjectRelease();
    return v13;
  }
  __break(1u);
  return result;
}

char *sub_100025510(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    uint64_t v7 = a2;
    goto LABEL_8;
  }
  unint64_t v6 = *((void *)a4 + 3);
  uint64_t v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2) {
    goto LABEL_8;
  }
  if (v7 + 0x4000000000000000 >= 0)
  {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
      uint64_t v7 = a2;
    }
LABEL_8:
    uint64_t v8 = *((void *)a4 + 2);
    if (v7 <= v8) {
      uint64_t v9 = *((void *)a4 + 2);
    }
    else {
      uint64_t v9 = v7;
    }
    if (v9)
    {
      sub_100007370((uint64_t *)&unk_1000742C0);
      uint64_t v10 = (char *)swift_allocObject();
      int64_t v11 = j__malloc_size(v10);
      uint64_t v12 = v11 - 32;
      if (v11 < 32) {
        uint64_t v12 = v11 - 17;
      }
      *((void *)v10 + 2) = v8;
      *((void *)v10 + 3) = 2 * (v12 >> 4);
      uint64_t v13 = v10 + 32;
      if (v5) {
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
      uint64_t v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if (result)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[16 * v8 + 32]) {
          memmove(v13, a4 + 32, 16 * v8);
        }
        *((void *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100029CB4(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_100025620(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100025644(a1, a2, a3, a4, &qword_100074258, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingRecordZoneChange, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingRecordZoneChange);
}

uint64_t sub_100025644(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v11 = *(void *)(a4 + 24);
    uint64_t v12 = v11 >> 1;
    if ((uint64_t)(v11 >> 1) < a2)
    {
      if (v12 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      uint64_t v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v11 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v12 = a2;
      }
    }
  }
  else
  {
    uint64_t v12 = a2;
  }
  uint64_t v13 = *(void *)(a4 + 16);
  if (v12 <= v13) {
    uint64_t v14 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v14 = v12;
  }
  if (!v14)
  {
    Swift::Int v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100007370(a5);
  uint64_t v15 = *(void *)(a6(0) - 8);
  uint64_t v16 = *(void *)(v15 + 72);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  Swift::Int v18 = (void *)swift_allocObject();
  size_t v19 = j__malloc_size(v18);
  if (!v16 || (v19 - v17 == 0x8000000000000000 ? (BOOL v20 = v16 == -1) : (BOOL v20 = 0), v20))
  {
LABEL_29:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  _OWORD v18[2] = v13;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
LABEL_19:
  uint64_t v21 = *(void *)(a6(0) - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  unint64_t v23 = (unint64_t)v18 + v22;
  if (a1)
  {
    if ((unint64_t)v18 < a4 || v23 >= a4 + v22 + *(void *)(v21 + 72) * v13)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != (void *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    sub_100029DA8(0, v13, v23, a4, a7);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v18;
}

uint64_t sub_1000258C4(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1000258EC(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  unint64_t v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

char *sub_1000259A4(uint64_t a1)
{
  return sub_1000253E0(0, *(void *)(a1 + 16), 0, (char *)a1, (uint64_t *)&unk_100074260, &qword_100074248);
}

uint64_t sub_1000259DC(unint64_t a1)
{
  return sub_100025644(0, *(void *)(a1 + 16), 0, a1, &qword_1000742B8, (uint64_t (*)(void))&type metadata accessor for AuthorizationRecord, (uint64_t (*)(void))&type metadata accessor for AuthorizationRecord);
}

char *sub_100025A24(uint64_t a1)
{
  return sub_1000253E0(0, *(void *)(a1 + 16), 0, (char *)a1, &qword_100074240, (uint64_t *)&unk_100074200);
}

uint64_t sub_100025A5C(uint64_t a1, char a2)
{
  int64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_100007370(&qword_100074250);
  char v42 = a2;
  uint64_t v6 = static _DictionaryStorage.resize(original:capacity:move:)();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    uint64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          int64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    uint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    uint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    size_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    void *v19 = v34;
    v19[1] = v33;
    BOOL v20 = (void *)(*(void *)(v7 + 56) + v18);
    *BOOL v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  int64_t v3 = v39;
  uint64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *int64_t v3 = v7;
  return result;
}

uint64_t sub_100025D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_10004A7B8(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_100025F0C();
LABEL_7:
    BOOL v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      unint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      *unint64_t v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_100025A5C(v17, a5 & 1);
  unint64_t v23 = sub_10004A7B8(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  BOOL v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  unint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  uint64_t *v25 = a3;
  v25[1] = a4;
  int64_t v26 = (void *)(v20[7] + 16 * v14);
  void *v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  _OWORD v20[2] = v29;

  return swift_bridgeObjectRetain();
}

void *sub_100025F0C()
{
  id v1 = v0;
  sub_100007370(&qword_100074250);
  uint64_t v2 = *v0;
  uint64_t v3 = static _DictionaryStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    BOOL v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    unint64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *unint64_t v23 = v19;
    v23[1] = v18;
    char v24 = (void *)(*(void *)(v4 + 56) + v16);
    *char v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1000260C8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    BOOL v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1000262C8()
{
  return swift_release();
}

_OWORD *sub_1000262D0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1000262E0()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

void sub_100026330(void *a1)
{
  sub_10001F3D0(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10002633C()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002637C()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 16);
  if (v1) {
    return v1(1);
  }
  return result;
}

uint64_t sub_1000263B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000263C0()
{
  return swift_release();
}

unint64_t sub_1000263C8()
{
  unint64_t result = qword_100074190;
  if (!qword_100074190)
  {
    sub_10000BF24(&qword_100074360);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100074190);
  }
  return result;
}

uint64_t sub_100026424(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100026480(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t sub_1000264D0()
{
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100026510(void *a1)
{
  return sub_100020240(a1, *(void **)(v1 + 16), (void *)(v1 + 24));
}

uint64_t sub_10002651C()
{
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100026564(uint64_t a1)
{
  return sub_100020768(a1, *(void *)(v1 + 16), (void *)(v1 + 24), *(void **)(v1 + 64));
}

uint64_t sub_100026574()
{
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v0 + 32);

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000265BC(uint64_t a1, uint64_t a2)
{
  return sub_100020FA4(a1, a2, *(NSObject **)(v2 + 16), *(void *)(v2 + 24), (void *)(v2 + 32));
}

void sub_1000265CC(uint64_t a1, uint64_t a2)
{
  sub_1000234F4(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(NSObject **)(v2 + 32));
}

uint64_t sub_1000265EC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100007370(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100026654()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100026694(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    BOOL v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100026894(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100026988(uint64_t a1, int64_t a2)
{
  return sub_100026AA8(a1, a2, (uint64_t *)&unk_100074260, &qword_100074248);
}

uint64_t sub_10002699C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      sub_100007370(a5);
      swift_arrayInitWithCopy();
      return v7;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100026AA8(uint64_t a1, int64_t a2, uint64_t *a3, uint64_t *a4)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  unint64_t v6 = *v4;
  int64_t v7 = *((void *)*v4 + 2);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v10 = a1 - a2;
  if (__OFSUB__(0, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v11 = v7 - v9;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v11 > *((void *)v6 + 3) >> 1)
  {
    if (v7 <= v11) {
      int64_t v15 = v7 + v10;
    }
    else {
      int64_t v15 = v7;
    }
    unint64_t v6 = sub_1000253E0(isUniquelyReferenced_nonNull_native, v15, 1, v6, a3, a4);
  }
  sub_100007370(a4);
  uint64_t result = swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v17 = *((void *)v6 + 2);
  BOOL v18 = __OFSUB__(v17, a2);
  uint64_t v19 = v17 - a2;
  if (v18) {
    goto LABEL_26;
  }
  if ((v19 & 0x8000000000000000) == 0)
  {
    BOOL v20 = &v6[40 * a2 + 32];
    if (a1 != a2 || &v6[40 * a1 + 32] >= &v20[40 * v19]) {
      uint64_t result = (uint64_t)memmove(&v6[40 * a1 + 32], v20, 40 * v19);
    }
    uint64_t v21 = *((void *)v6 + 2);
    BOOL v18 = __OFADD__(v21, v10);
    uint64_t v22 = v21 - v9;
    if (!v18)
    {
      *((void *)v6 + 2) = v22;
LABEL_20:
      *uint64_t v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100026C3C(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v7 = __chkstk_darwin(v4, v6);
  v227 = (char *)&v213 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  v215 = (char *)&v213 - v11;
  uint64_t v13 = __chkstk_darwin(v10, v12);
  v230 = (char *)&v213 - v14;
  uint64_t v16 = __chkstk_darwin(v13, v15);
  v225 = (char *)&v213 - v17;
  uint64_t v19 = __chkstk_darwin(v16, v18);
  v218 = (char *)&v213 - v20;
  uint64_t v22 = __chkstk_darwin(v19, v21);
  v217 = (char *)&v213 - v23;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  v216 = (char *)&v213 - v26;
  __chkstk_darwin(v25, v27);
  v220 = (char *)&v213 - v28;
  uint64_t v30 = a2[3];
  uint64_t v29 = a2[4];
  sub_10000BE0C(a2, v30);
  uint64_t v31 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)(v29 + 8) + 8))(v30);
  id v32 = [v31 zoneID];

  id v33 = [v32 zoneName];
  uint64_t v233 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v35 = v34;

  uint64_t v36 = a2[3];
  uint64_t v37 = a2[4];
  v226 = a2;
  sub_10000BE0C(a2, v36);
  uint64_t v256 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 16))(v36, v37);
  uint64_t v38 = a1[3];
  uint64_t v39 = a1[4];
  v231 = a1;
  sub_10000BE0C(a1, v38);
  uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 16))(v38, v39);
  uint64_t v42 = v40;
  unint64_t v43 = *(char **)(v40 + 16);
  uint64_t v236 = v4;
  unint64_t v237 = v35;
  uint64_t v221 = v5;
  if (v43)
  {
    unint64_t v44 = 0;
    LODWORD(v234) = 0;
    uint64_t v45 = v40 + 32;
    v232 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v214 = (char *)&v242 + 8;
    *(void *)&long long v41 = 136446466;
    long long v223 = v41;
    v219 = (char *)&type metadata for Any + 8;
    *(void *)&long long v41 = 136446210;
    long long v213 = v41;
    uint64_t v46 = v230;
    v228 = v43;
    uint64_t v235 = v40 + 32;
    uint64_t v224 = v40;
    while (1)
    {
      uint64_t v47 = v44 + 1;
      sub_10000BFC4(v45 + 40 * (void)v44, (uint64_t)v253);
      uint64_t v48 = v254;
      uint64_t v49 = v255;
      sub_10000BE0C(v253, v254);
      uint64_t v50 = (*(uint64_t (**)(uint64_t, uint64_t))(v49 + 32))(v48, v49);
      sub_10000BFC4((uint64_t)v253, (uint64_t)v250);
      if (v50 == 1)
      {
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v250);
        goto LABEL_4;
      }
      uint64_t v51 = v251;
      uint64_t v52 = v252;
      sub_10000BE0C(v250, v251);
      char v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 24))(v51, v52);
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v250);
      if (v53) {
        goto LABEL_4;
      }
      uint64_t v54 = v254;
      uint64_t v55 = v255;
      sub_10000BE0C(v253, v254);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v55 + 56))(v248, v54, v55);
      id v56 = objc_msgSend((id)*sub_10000BE0C(v248, v249), "lookupInfo");
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v248);
      if (!v56) {
        goto LABEL_51;
      }
      id v57 = [v56 emailAddress];
      if (!v57)
      {
        id v57 = [v56 phoneNumber];
        if (!v57)
        {

LABEL_51:
          static Logger.syncEngine.getter();
          sub_10000BFC4((uint64_t)v253, (uint64_t)v250);
          swift_bridgeObjectRetain_n();
          uint64_t v104 = Logger.logObject.getter();
          os_log_type_t v105 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v104, v105))
          {
            uint64_t v106 = swift_slowAlloc();
            *(void *)&long long v245 = swift_slowAlloc();
            *(_DWORD *)uint64_t v106 = v223;
            sub_10000BFC4((uint64_t)v250, (uint64_t)v248);
            sub_100007370((uint64_t *)&unk_100074200);
            uint64_t v107 = String.init<A>(describing:)();
            *(void *)(v106 + 4) = sub_1000067CC(v107, v108, (uint64_t *)&v245);
            uint64_t v46 = v230;
            swift_bridgeObjectRelease();
            _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v250);
            *(_WORD *)(v106 + 12) = 2082;
            swift_bridgeObjectRetain();
            *(void *)(v106 + 14) = sub_1000067CC(v233, v35, (uint64_t *)&v245);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v104, v105, "Removing %{public}s from %{public}s", (uint8_t *)v106, 0x16u);
            swift_arrayDestroy();
            unint64_t v43 = v228;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v250);

            swift_bridgeObjectRelease_n();
          }
          (*v232)(v46, v236);
          uint64_t v109 = v231[3];
          uint64_t v110 = v231[4];
          sub_10000BE0C(v231, v109);
          (*(void (**)(void *, uint64_t, uint64_t))(v110 + 48))(v253, v109, v110);
          _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v253);
          if (v47 != v43)
          {
            LODWORD(v234) = 1;
            goto LABEL_5;
          }
          swift_bridgeObjectRelease();
          LODWORD(v234) = 1;
          goto LABEL_131;
        }
      }
      id v229 = v56;
      *(void *)&long long v239 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v240 = v58;

      uint64_t v59 = v226[3];
      uint64_t v60 = v226[4];
      sub_10000BE0C(v226, v59);
      uint64_t v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 16))(v59, v60);
      uint64_t v62 = *(void *)(v61 + 16);
      v238 = v47;
      if (!v62)
      {
LABEL_30:
        uint64_t v247 = 0;
        long long v245 = 0u;
        long long v246 = 0u;
        swift_bridgeObjectRelease();
        uint64_t v81 = v225;
        if (!*((void *)&v246 + 1)) {
          goto LABEL_76;
        }
        goto LABEL_31;
      }
      uint64_t v63 = v61 + 32;
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_10000BFC4(v63, (uint64_t)&v242);
        uint64_t v64 = v243;
        uint64_t v65 = v244;
        sub_10000BE0C(&v242, v243);
        (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v65 + 56))(v241, v64, v65);
        id v66 = objc_msgSend((id)*sub_10000BE0C(v241, v241[3]), "lookupInfo");
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v241);
        if (!v66) {
          goto LABEL_14;
        }
        id v67 = [v66 emailAddress];
        if (v67)
        {
          os_log_type_t v68 = v67;
          uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v71 = v70;

          if ((void)v239 == v69 && v240 == v71)
          {
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            uint64_t v47 = v238;
            goto LABEL_75;
          }
          char v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          uint64_t v47 = v238;
          if (v73)
          {
            swift_bridgeObjectRelease();

            goto LABEL_75;
          }
        }
        id v74 = objc_msgSend(v66, "phoneNumber", (void)v213, *((void *)&v213 + 1));
        if (v74) {
          break;
        }

LABEL_14:
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v242);
        v63 += 40;
        if (!--v62)
        {
          swift_bridgeObjectRelease();
          uint64_t v45 = v235;
          goto LABEL_30;
        }
      }
      uint64_t v75 = v74;
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      char v78 = v77;

      if ((void)v239 != v76 || v240 != v78)
      {
        char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();

        uint64_t v47 = v238;
        if (v80) {
          goto LABEL_74;
        }
        goto LABEL_14;
      }
      swift_bridgeObjectRelease();

      uint64_t v47 = v238;
LABEL_74:
      swift_bridgeObjectRelease();
LABEL_75:
      sub_100028C4C(&v242, (uint64_t)&v245);
      swift_bridgeObjectRelease();
      uint64_t v81 = v225;
      uint64_t v45 = v235;
      if (!*((void *)&v246 + 1))
      {
LABEL_76:
        sub_100015758((uint64_t)&v245, &qword_100074238);
        static Logger.syncEngine.getter();
        swift_bridgeObjectRetain_n();
        unint64_t v148 = (unint64_t)v240;
        swift_bridgeObjectRetain();
        uint64_t v149 = Logger.logObject.getter();
        os_log_type_t v150 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v149, v150))
        {
          uint64_t v151 = swift_slowAlloc();
          v248[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v151 = v223;
          swift_bridgeObjectRetain();
          *(void *)(v151 + 4) = sub_1000067CC(v239, v148, v248);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v151 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v151 + 14) = sub_1000067CC(v233, v35, v248);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v149, v150, "Removing %{public}s from %{public}s", (uint8_t *)v151, 0x16u);
          swift_arrayDestroy();
          uint64_t v47 = v238;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        (*v232)(v81, v236);
        unint64_t v43 = v228;
        uint64_t v152 = v231[3];
        uint64_t v153 = v231[4];
        sub_10000BE0C(v231, v152);
        (*(void (**)(void *, uint64_t, uint64_t))(v153 + 48))(v253, v152, v153);

        LODWORD(v234) = 1;
        uint64_t v42 = v224;
        uint64_t v46 = v230;
        goto LABEL_4;
      }
LABEL_31:
      sub_100028C4C(&v245, (uint64_t)v248);
      int64_t v82 = *(void *)(v256 + 16);
      if (!v82)
      {
        unint64_t v84 = 0;
        goto LABEL_58;
      }
      uint64_t v83 = (void *)(v256 + 32);
      uint64_t v222 = v256;
      swift_bridgeObjectRetain();
      unint64_t v84 = 0;
      uint64_t v85 = 72;
      unint64_t v86 = 1;
      while (2)
      {
        uint64_t v87 = v83[3];
        uint64_t v88 = v83[4];
        sub_10000BE0C(v83, v87);
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v88 + 56))(&v245, v87, v88);
        id v89 = objc_msgSend((id)*sub_10000BE0C(&v245, *((uint64_t *)&v246 + 1)), "lookupInfo");
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v245);
        if (!v89)
        {
LABEL_34:
          ++v84;
          v83 += 5;
          ++v86;
          v85 += 40;
          if (v82 == v84)
          {
            uint64_t v111 = v222;
            swift_bridgeObjectRelease();
            unint64_t v84 = *(void *)(v111 + 16);
            uint64_t v112 = v256;
            uint64_t v45 = v235;
            uint64_t v47 = v238;
            goto LABEL_57;
          }
          continue;
        }
        break;
      }
      id v90 = [v89 emailAddress];
      if (!v90) {
        goto LABEL_42;
      }
      long long v91 = v90;
      uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      long long v94 = v93;

      if ((void)v239 == v92 && v240 == v94)
      {
        uint64_t v154 = v222;
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        goto LABEL_88;
      }
      char v96 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v96 & 1) == 0)
      {
LABEL_42:
        id v97 = objc_msgSend(v89, "phoneNumber", (void)v213);
        if (v97)
        {
          uint64_t v98 = v97;
          uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          id v101 = v100;

          if ((void)v239 == v99 && v240 == v101)
          {
            swift_bridgeObjectRelease();

            unint64_t v35 = v237;
LABEL_90:
            uint64_t v154 = v222;
            swift_bridgeObjectRelease();
            goto LABEL_91;
          }
          char v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();

          unint64_t v35 = v237;
          if (v103) {
            goto LABEL_90;
          }
        }
        else
        {

          unint64_t v35 = v237;
        }
        goto LABEL_34;
      }
      uint64_t v154 = v222;
      swift_bridgeObjectRelease();

LABEL_88:
      unint64_t v35 = v237;
LABEL_91:
      uint64_t v45 = v235;
      uint64_t v47 = v238;
      if (__OFADD__(v84, 1)) {
        goto LABEL_165;
      }
      uint64_t v112 = v256;
      if (v84 + 1 != *(void *)(v154 + 16))
      {
        while (2)
        {
          if (v86 >= *(void *)(v112 + 16)) {
            goto LABEL_156;
          }
          sub_10000BFC4(v112 + v85, (uint64_t)&v245);
          uint64_t v157 = *((void *)&v246 + 1);
          uint64_t v158 = v247;
          sub_10000BE0C(&v245, *((uint64_t *)&v246 + 1));
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v158 + 56))(&v242, v157, v158);
          id v159 = objc_msgSend((id)*sub_10000BE0C(&v242, v243), "lookupInfo");
          _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v242);
          if (v159)
          {
            id v160 = [v159 emailAddress];
            if (!v160) {
              goto LABEL_101;
            }
            uint64_t v161 = v160;
            uint64_t v162 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v164 = v163;

            if ((void)v239 == v162 && v240 == v164)
            {

              swift_bridgeObjectRelease();
              goto LABEL_126;
            }
            char v166 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if (v166) {
              goto LABEL_125;
            }
LABEL_101:
            id v167 = objc_msgSend(v159, "phoneNumber", (void)v213);
            if (v167)
            {
              v168 = v167;
              uint64_t v169 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v171 = v170;

              if ((void)v239 != v169 || v240 != v171)
              {
                char v173 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();

                _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v245);
                uint64_t v45 = v235;
                if ((v173 & 1) == 0)
                {
                  if (v86 == v84) {
                    goto LABEL_120;
                  }
LABEL_112:
                  if ((v84 & 0x8000000000000000) != 0) {
                    goto LABEL_159;
                  }
                  v174 = (char *)v256;
                  unint64_t v175 = *(void *)(v256 + 16);
                  if (v84 >= v175) {
                    goto LABEL_160;
                  }
                  sub_10000BFC4(v256 + 40 * v84 + 32, (uint64_t)&v245);
                  if (v86 >= v175) {
                    goto LABEL_161;
                  }
                  sub_10000BFC4((uint64_t)&v174[v85], (uint64_t)&v242);
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    v174 = sub_100025A24((uint64_t)v174);
                    uint64_t v256 = (uint64_t)v174;
                  }
                  if (v84 >= *((void *)v174 + 2)) {
                    goto LABEL_162;
                  }
                  uint64_t v176 = (uint64_t)&v174[40 * v84 + 32];
                  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v176);
                  sub_100028C4C(&v242, v176);
                  if (v86 >= *(void *)(v256 + 16)) {
                    goto LABEL_163;
                  }
                  uint64_t v177 = v256 + v85;
                  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v256 + v85);
                  sub_100028C4C(&v245, v177);
LABEL_120:
                  if (__OFADD__(v84++, 1)) {
                    goto LABEL_158;
                  }
                }
                unint64_t v179 = v86 + 1;
                if (__OFADD__(v86, 1)) {
                  goto LABEL_157;
                }
LABEL_127:
                uint64_t v112 = v256;
                ++v86;
                v85 += 40;
                if (v179 == *(void *)(v256 + 16)) {
                  goto LABEL_57;
                }
                continue;
              }
              swift_bridgeObjectRelease();
LABEL_125:

LABEL_126:
              _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v245);
              uint64_t v45 = v235;
              unint64_t v179 = v86 + 1;
              if (__OFADD__(v86, 1)) {
                goto LABEL_157;
              }
              goto LABEL_127;
            }

            uint64_t v45 = v235;
          }
          break;
        }
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v245);
        if (v86 != v84) {
          goto LABEL_112;
        }
        goto LABEL_120;
      }
LABEL_57:
      int64_t v82 = *(void *)(v112 + 16);
      uint64_t v46 = v230;
      if (v82 < (uint64_t)v84) {
        goto LABEL_164;
      }
LABEL_58:
      sub_100026AA8(v84, v82, &qword_100074240, (uint64_t *)&unk_100074200);
      uint64_t v113 = v254;
      uint64_t v114 = v255;
      sub_10000BE0C(v253, v254);
      unint64_t v115 = (*(uint64_t (**)(uint64_t, uint64_t))(v114 + 8))(v113, v114);
      if (v115 < 2)
      {
        unint64_t v123 = v220;
        static Logger.syncEngine.getter();
        swift_bridgeObjectRetain_n();
        unint64_t v124 = (unint64_t)v240;
        swift_bridgeObjectRetain();
        id v125 = Logger.logObject.getter();
        os_log_type_t v126 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v125, v126))
        {
          uint64_t v127 = swift_slowAlloc();
          *(void *)&long long v245 = swift_slowAlloc();
          *(_DWORD *)uint64_t v127 = v223;
          swift_bridgeObjectRetain();
          *(void *)&long long v242 = sub_1000067CC(v239, v124, (uint64_t *)&v245);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v127 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)&long long v242 = sub_1000067CC(v233, v35, (uint64_t *)&v245);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v125, v126, "Re-inviting %{public}s to %{public}s", (uint8_t *)v127, 0x16u);
          swift_arrayDestroy();
          uint64_t v47 = v238;
          swift_slowDealloc();
          swift_slowDealloc();

          (*v232)(v220, v236);
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          (*v232)(v123, v236);
        }
        uint64_t v42 = v224;
        int v143 = v231;
        uint64_t v144 = v231[3];
        uint64_t v145 = v231[4];
        sub_10000BE0C(v231, v144);
        (*(void (**)(void *, uint64_t, uint64_t))(v145 + 48))(v253, v144, v145);
        uint64_t v146 = v143[3];
        uint64_t v147 = v143[4];
        sub_10000BE0C(v143, v146);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v147 + 40))(v248, v146, v147);

        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v248);
        LODWORD(v234) = 1;
        unint64_t v43 = v228;
        uint64_t v45 = v235;
      }
      else if (v115 == 2)
      {
        uint64_t v128 = v217;
        static Logger.syncEngine.getter();
        swift_bridgeObjectRetain_n();
        unint64_t v129 = (unint64_t)v240;
        swift_bridgeObjectRetain();
        unint64_t v130 = Logger.logObject.getter();
        os_log_type_t v131 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v130, v131))
        {
          uint64_t v132 = swift_slowAlloc();
          *(void *)&long long v245 = swift_slowAlloc();
          *(_DWORD *)uint64_t v132 = v223;
          swift_bridgeObjectRetain();
          *(void *)(v132 + 4) = sub_1000067CC(v239, v129, (uint64_t *)&v245);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v132 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)(v132 + 14) = sub_1000067CC(v233, v35, (uint64_t *)&v245);
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v130, v131, "%{public}s is already sharing %{public}s", (uint8_t *)v132, 0x16u);
          swift_arrayDestroy();
          uint64_t v47 = v238;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }

        (*v232)(v128, v236);
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v248);
        uint64_t v42 = v224;
        unint64_t v43 = v228;
        uint64_t v46 = v230;
      }
      else if (v115 == 3)
      {
        os_log_type_t v116 = v216;
        static Logger.syncEngine.getter();
        swift_bridgeObjectRetain_n();
        unint64_t v117 = (unint64_t)v240;
        swift_bridgeObjectRetain();
        uint64_t v118 = Logger.logObject.getter();
        os_log_type_t v119 = static os_log_type_t.default.getter();
        int v120 = v119;
        if (os_log_type_enabled(v118, v119))
        {
          uint64_t v121 = swift_slowAlloc();
          LODWORD(v234) = v120;
          uint64_t v122 = v121;
          uint64_t v222 = swift_slowAlloc();
          *(void *)&long long v245 = v222;
          *(_DWORD *)uint64_t v122 = v223;
          swift_bridgeObjectRetain();
          *(void *)&long long v242 = sub_1000067CC(v239, v117, (uint64_t *)&v245);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v122 + 12) = 2082;
          swift_bridgeObjectRetain();
          *(void *)&long long v242 = sub_1000067CC(v233, v35, (uint64_t *)&v245);
          uint64_t v47 = v238;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v118, (os_log_type_t)v234, "Adding %{public}s to %{public}s", (uint8_t *)v122, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        (*v232)(v116, v236);
        uint64_t v42 = v224;
        unint64_t v43 = v228;
        uint64_t v155 = v231[3];
        uint64_t v156 = v231[4];
        sub_10000BE0C(v231, v155);
        (*(void (**)(uint64_t *, uint64_t, uint64_t))(v156 + 40))(v248, v155, v156);

        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v248);
        LODWORD(v234) = 1;
      }
      else
      {
        swift_bridgeObjectRelease();
        dispatch_group_t v133 = v218;
        static Logger.syncEngine.getter();
        sub_10000BFC4((uint64_t)v253, (uint64_t)&v245);
        unint64_t v134 = Logger.logObject.getter();
        os_log_type_t v135 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v134, v135))
        {
          uint64_t v136 = swift_slowAlloc();
          *(void *)&long long v242 = swift_slowAlloc();
          *(_DWORD *)uint64_t v136 = v213;
          uint64_t v137 = *((void *)&v246 + 1);
          uint64_t v138 = v247;
          sub_10000BE0C(&v245, *((uint64_t *)&v246 + 1));
          uint64_t v139 = *(uint64_t (**)(uint64_t, uint64_t))(v138 + 8);
          uint64_t v140 = v138;
          uint64_t v45 = v235;
          v241[0] = v139(v137, v140);
          type metadata accessor for ParticipantAcceptanceStatus(0);
          uint64_t v141 = String.init<A>(describing:)();
          *(void *)(v136 + 4) = sub_1000067CC(v141, v142, (uint64_t *)&v242);
          swift_bridgeObjectRelease();
          _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v245);
          _os_log_impl((void *)&_mh_execute_header, v134, v135, "Unknown acceptance status: %{public}s", (uint8_t *)v136, 0xCu);
          swift_arrayDestroy();
          uint64_t v46 = v230;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v245);
        }
        (*v232)(v133, v236);
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v248);
        uint64_t v42 = v224;
        unint64_t v43 = v228;
        uint64_t v47 = v238;
      }
LABEL_4:
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v253);
      if (v47 == v43)
      {
        swift_bridgeObjectRelease();
        goto LABEL_131;
      }
LABEL_5:
      unint64_t v44 = v47;
      if ((unint64_t)v47 >= *(void *)(v42 + 16)) {
        goto LABEL_155;
      }
    }
  }
  swift_bridgeObjectRelease();
  LODWORD(v234) = 0;
LABEL_131:
  uint64_t v180 = v256;
  uint64_t v181 = *(void *)(v256 + 16);
  if (!v181)
  {
LABEL_152:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return;
  }
  v240 = (void (**)(char *, uint64_t))(v221 + 8);
  swift_bridgeObjectRetain();
  unint64_t v182 = 0;
  uint64_t v235 = v181 - 1;
  v183 = (void (**)(char *, uint64_t))(v180 + 32);
  *(void *)&long long v184 = 136446466;
  long long v239 = v184;
  v238 = (char *)&type metadata for Any + 8;
  v232 = (void (**)(char *, uint64_t))(v180 + 32);
LABEL_133:
  uint64_t v185 = (uint64_t)&v183[5 * v182];
  unint64_t v186 = v182;
  uint64_t v187 = v227;
  while (v186 < *(void *)(v180 + 16))
  {
    sub_10000BFC4(v185, (uint64_t)v253);
    uint64_t v188 = v254;
    uint64_t v189 = v255;
    sub_10000BE0C(v253, v254);
    uint64_t v190 = (*(uint64_t (**)(uint64_t, uint64_t))(v189 + 32))(v188, v189);
    sub_10000BFC4((uint64_t)v253, (uint64_t)v250);
    if (v190 == 1)
    {
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v250);
    }
    else
    {
      uint64_t v191 = v251;
      uint64_t v192 = v252;
      sub_10000BE0C(v250, v251);
      char v193 = (*(uint64_t (**)(uint64_t, uint64_t))(v192 + 24))(v191, v192);
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v250);
      if ((v193 & 1) == 0)
      {
        uint64_t v194 = v254;
        uint64_t v195 = v255;
        sub_10000BE0C(v253, v254);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v195 + 56))(v248, v194, v195);
        id v196 = objc_msgSend((id)*sub_10000BE0C(v248, v249), "lookupInfo");
        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v248);
        if (v196)
        {
          id v197 = [v196 emailAddress];
          if (v197 || (id v197 = [v196 phoneNumber]) != 0)
          {
            uint64_t v204 = v197;
            uint64_t v234 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v206 = v205;

            uint64_t v207 = v215;
            static Logger.syncEngine.getter();
            swift_bridgeObjectRetain_n();
            swift_bridgeObjectRetain();
            uint64_t v208 = Logger.logObject.getter();
            os_log_type_t v209 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v208, v209))
            {
              uint64_t v210 = swift_slowAlloc();
              v250[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v210 = v239;
              swift_bridgeObjectRetain();
              *(void *)(v210 + 4) = sub_1000067CC(v234, v206, v250);
              swift_bridgeObjectRelease_n();
              *(_WORD *)(v210 + 12) = 2082;
              swift_bridgeObjectRetain();
              *(void *)(v210 + 14) = sub_1000067CC(v233, v237, v250);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v208, v209, "Adding %{public}s to %{public}s", (uint8_t *)v210, 0x16u);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();

              (*v240)(v215, v236);
            }
            else
            {

              swift_bridgeObjectRelease_n();
              swift_bridgeObjectRelease_n();
              (*v240)(v207, v236);
            }
            unint64_t v182 = v186 + 1;
            uint64_t v211 = v231[3];
            uint64_t v212 = v231[4];
            sub_10000BE0C(v231, v211);
            (*(void (**)(void *, uint64_t, uint64_t))(v212 + 40))(v253, v211, v212);

            _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v253);
            LODWORD(v234) = 1;
            v183 = v232;
            if (v235 == v186)
            {
LABEL_151:
              swift_bridgeObjectRelease();
              goto LABEL_152;
            }
            goto LABEL_133;
          }
        }
        static Logger.syncEngine.getter();
        sub_10000BFC4((uint64_t)v253, (uint64_t)v250);
        unint64_t v198 = v237;
        swift_bridgeObjectRetain_n();
        uint64_t v199 = Logger.logObject.getter();
        os_log_type_t v200 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v199, v200))
        {
          uint64_t v201 = swift_slowAlloc();
          *(void *)&long long v245 = swift_slowAlloc();
          *(_DWORD *)uint64_t v201 = v239;
          swift_bridgeObjectRetain();
          *(void *)(v201 + 4) = sub_1000067CC(v233, v198, (uint64_t *)&v245);
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v201 + 12) = 2082;
          sub_10000BFC4((uint64_t)v250, (uint64_t)v248);
          sub_100007370((uint64_t *)&unk_100074200);
          uint64_t v202 = String.init<A>(describing:)();
          *(void *)(v201 + 14) = sub_1000067CC(v202, v203, (uint64_t *)&v245);
          swift_bridgeObjectRelease();
          _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v250);
          _os_log_impl((void *)&_mh_execute_header, v199, v200, "Failed to share %{public}s with %{public}s", (uint8_t *)v201, 0x16u);
          swift_arrayDestroy();
          uint64_t v187 = v227;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_bridgeObjectRelease_n();
          _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v250);
        }

        (*v240)(v187, v236);
      }
    }
    ++v186;
    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v253);
    v185 += 40;
    if (v181 == v186) {
      goto LABEL_151;
    }
  }
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  __break(1u);
}

void sub_100028930(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v19 = v4;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v20 = a2;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = a1;
    uint64_t v22 = v13;
    *(_DWORD *)uint64_t v12 = 136446210;
    swift_errorRetain();
    sub_100007370(&qword_1000741C0);
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v21 = sub_1000067CC(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to save share: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v20;
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v19);
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  id v16 = [self defaultCenter];
  if (qword_1000739E8 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100074C08;
  if (qword_100073A28 != -1) {
    swift_once();
  }
  uint64_t v22 = qword_100074C40;
  char v23 = 0;
  [v16 postNotificationName:v17 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

  swift_unknownObjectRelease();
  dispatch_group_leave(a2);
}

uint64_t sub_100028C4C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100028C64(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100028CAC(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  id v9 = a1;
  os_log_type_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v25 = a2;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v24 = v5;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v27 = v22;
    *(_DWORD *)uint64_t v13 = 136446210;
    v21[1] = v13 + 4;
    id v14 = v9;
    id v15 = [v14 description];
    uint64_t v23 = v4;
    id v16 = v15;
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v19 = v18;

    uint64_t v26 = sub_1000067CC(v17, v19, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Handling incoming invitation %{public}s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v23);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  return sub_10001D47C(v9);
}

uint64_t sub_100028F14(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  id v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v19 = v2;
    os_log_type_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v21 = v18;
    *(_DWORD *)os_log_type_t v10 = 136446210;
    v17[1] = v10 + 4;
    id v11 = v7;
    id v12 = [v11 description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    uint64_t v20 = sub_1000067CC(v13, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Sender cancelled invitation %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v19);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_100029154(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  id v7 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v5, v8);
  id v11 = (char *)&v55 - v10;
  uint64_t v13 = __chkstk_darwin(v9, v12);
  unint64_t v15 = (char *)&v55 - v14;
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v55 - v17;
  id v19 = [a1 context];
  self;
  uint64_t v20 = (void *)swift_dynamicCastObjCClass();
  if (!v20)
  {
    swift_unknownObjectRelease();
    static Logger.syncEngine.getter();
    id v31 = a1;
    id v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v57 = v2;
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      uint64_t v58 = v56;
      *(_DWORD *)unint64_t v34 = 136446210;
      uint64_t v55 = v34 + 4;
      id v35 = v31;
      uint64_t v36 = v3;
      id v37 = [v35 description];
      uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v40 = v39;

      uint64_t v60 = sub_1000067CC(v38, v40, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to extract context from accepted invitation %{public}s", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v18, v57);
    }

    uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    uint64_t v30 = v18;
    return v29(v30, v2);
  }
  uint64_t v57 = v2;
  id v21 = [v20 schemaIdentifier];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v24 = v23;

  if (v22 == 0xD00000000000002CLL && v24 == 0x8000000100061420
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    static Logger.syncEngine.getter();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v2 = v57;
    if (v27)
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Receiver accepted share invitation", v28, 2u);
      swift_slowDealloc();
    }

    swift_unknownObjectRelease();
    uint64_t v29 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
    uint64_t v30 = v15;
    return v29(v30, v2);
  }
  if (v22 == 0xD000000000000033 && v24 == 0x8000000100061450
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v42 = objc_msgSend(objc_msgSend(a1, "destination"), "destinationURIs");
    swift_unknownObjectRelease();
    uint64_t v43 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

    static Logger.syncEngine.getter();
    swift_bridgeObjectRetain_n();
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      uint64_t v58 = v56;
      *(_DWORD *)uint64_t v46 = 136446210;
      uint64_t v55 = v46 + 4;
      swift_bridgeObjectRetain();
      uint64_t v47 = v3;
      uint64_t v48 = Set.description.getter();
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      uint64_t v60 = sub_1000067CC(v48, v50, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "%{public}s accepted verification invitation", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v47 + 8))(v11, v57);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v57);
    }
    id v51 = [self defaultCenter];
    if (qword_1000739E8 != -1) {
      swift_once();
    }
    uint64_t v58 = v43;
    char v59 = 1;
    [v51 postNotificationName:qword_100074C08 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    static Logger.syncEngine.getter();
    swift_bridgeObjectRetain();
    uint64_t v52 = Logger.logObject.getter();
    os_log_type_t v53 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136446210;
      uint64_t v56 = (uint64_t)(v54 + 4);
      swift_bridgeObjectRetain();
      uint64_t v60 = sub_1000067CC(v22, v24, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Receiver accepted invitation with unknown schema: %{public}s", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    swift_unknownObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v57);
  }
}

uint64_t sub_1000299A0(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  id v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v21 = v2;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v23 = v20;
    *(_DWORD *)uint64_t v10 = 136446210;
    id v19 = v10 + 4;
    id v11 = v7;
    id v12 = [v11 description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    uint64_t v22 = sub_1000067CC(v13, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Receiver declined invitation %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v21);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  id v16 = [self defaultCenter];
  if (qword_1000739E8 != -1) {
    swift_once();
  }
  uint64_t v17 = qword_100074C08;
  if (qword_100073A28 != -1) {
    swift_once();
  }
  uint64_t v23 = qword_100074C40;
  char v24 = 0;
  [v16 postNotificationName:v17 object:_bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()];

  return swift_unknownObjectRelease();
}

uint64_t sub_100029CB4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100029DA8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      return v13;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100029F04()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100029F44(uint64_t a1, uint64_t a2)
{
  return sub_100023FD8(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

void sub_100029F4C(uint64_t a1, void *a2, char a3)
{
  sub_100023A7C(a1, a2, a3 & 1, *(void *)(v3 + 16), *(void **)(v3 + 24));
}

void sub_100029F58(void *a1, char a2)
{
  if (a2) {
    swift_errorRelease();
  }
  else {
}
  }

uint64_t sub_100029F64(uint64_t a1, char a2)
{
  return sub_1000243E0(a1, a2 & 1, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t sub_100029F70(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100029F7C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100029FB4(uint64_t a1)
{
  return sub_1000247F0(a1, *(void **)(v1 + 16));
}

uint64_t _s18SharingCoordinatorC12RetryUrgencyOwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_10002A004(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_10002A004(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t _s18SharingCoordinatorC12RetryUrgencyOwxx(uint64_t a1)
{
  return sub_10002A020(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_10002A020(uint64_t a1, char a2)
{
  if (a2) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s18SharingCoordinatorC12RetryUrgencyOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_10002A004(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_10002A020(v5, v6);
  return a1;
}

uint64_t _s18SharingCoordinatorC12RetryUrgencyOwtk(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)uint64_t result = v2;
  return result;
}

uint64_t _s18SharingCoordinatorC12RetryUrgencyOwta(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  char v4 = *((unsigned char *)a2 + 8);
  uint64_t v5 = *(void *)a1;
  char v6 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  sub_10002A020(v5, v6);
  return a1;
}

uint64_t _s18SharingCoordinatorC12RetryUrgencyOwet(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s18SharingCoordinatorC12RetryUrgencyOwst(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_10002A160(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_10002A168(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *_s18SharingCoordinatorC12RetryUrgencyOMa()
{
  return &_s18SharingCoordinatorC12RetryUrgencyON;
}

unint64_t sub_10002A19C()
{
  int v1 = *v0;
  sub_10002ACA8((uint64_t)(v0 + 2), (uint64_t)v12);
  sub_10002ACA8((uint64_t)(v0 + 6), (uint64_t)v11);
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  unint64_t v9 = 0xD000000000000010;
  unint64_t v10 = 0x80000001000615C0;
  v8[0] = v1;
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x656C646E7562202CLL;
  v3._object = (void *)0xEB00000000204449;
  String.append(_:)(v3);
  sub_10002ACA8((uint64_t)v12, (uint64_t)v8);
  sub_10002AD10((uint64_t)v12);
  sub_100007370((uint64_t *)&unk_100074390);
  v4._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x44496D616574202CLL;
  v5._object = (void *)0xE900000000000020;
  String.append(_:)(v5);
  sub_10002ACA8((uint64_t)v11, (uint64_t)v8);
  sub_10002AD10((uint64_t)v11);
  v6._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_10002A30C(char a1)
{
  uint64_t v3 = 0xD000000000000023;
  CFErrorRef error = 0;
  Swift::String v4 = (__CFString *)String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  CFTypeRef v5 = SecTaskCopyValueForEntitlement(v1, v4, &error);

  uint64_t v16 = (uint64_t)v5;
  sub_100007370(&qword_1000742D0);
  if (swift_dynamicCast())
  {
    uint64_t v6 = v15;
    CFErrorRef v7 = error;
    if (!error) {
      return v6;
    }
    goto LABEL_14;
  }
  if (!error) {
    return 2;
  }
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    if (a1)
    {
      if (a1 == 1)
      {
        uint64_t v3 = 0xD000000000000027;
        unint64_t v11 = 0x8000000100060F30;
      }
      else
      {
        unint64_t v11 = 0x8000000100060F00;
      }
    }
    else
    {
      unint64_t v11 = 0x8000000100060F60;
    }
    sub_1000067CC(v3, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2082;
    sub_100007370(&qword_1000742D8);
    uint64_t v12 = String.init<A>(describing:)();
    sub_1000067CC(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to extract entitlement %s from SecTask: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  CFErrorRef v7 = error;
  uint64_t v6 = 2;
  if (error) {
LABEL_14:
  }

  return v6;
}

unint64_t sub_10002A5F0()
{
  return sub_10002A19C();
}

uint64_t sub_10002A62C@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  *(void *)token.val = a2;
  *(void *)&token.val[2] = a3;
  *(void *)&token.val[4] = a4;
  *(void *)&token.val[6] = a5;
  SecTaskRef v16 = SecTaskCreateWithAuditToken(0, &token);
  if (v16)
  {
    SecTaskRef v17 = v16;
    uint64_t v18 = sub_1000166F8();
    uint64_t v33 = v19;
    uint64_t v34 = v18;
    char v32 = sub_10002A30C(1) & 1;
    *(void *)token.val = a2;
    *(void *)&token.val[2] = a3;
    *(void *)&token.val[4] = a4;
    *(void *)&token.val[6] = a5;
    char v36 = 0;
    uint64_t v24 = static TeamIdentifierRetriever.teamIdentifier(from:)();
    uint64_t v26 = v25;

    uint64_t v27 = type metadata accessor for Logger();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(a7, v27);
    uint64_t v30 = v33;
    uint64_t v29 = v34;
    char v31 = v32;
  }
  else
  {
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to create SecTask from audit token", v22, 2u);
      swift_slowDealloc();
    }

    uint64_t v23 = type metadata accessor for Logger();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(a7, v23);
    char v31 = 0;
    uint64_t v24 = 0;
    uint64_t v26 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
  }
  *(_DWORD *)a8 = a1;
  *(void *)(a8 + 8) = v29;
  *(void *)(a8 + 16) = v30;
  *(void *)(a8 + 24) = v24;
  *(void *)(a8 + 32) = v26;
  *(unsigned char *)(a8 + 40) = v31;
  return result;
}

uint64_t destroy for ClientIdentity()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClientIdentity(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ClientIdentity(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

__n128 initializeWithTake for ClientIdentity(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ClientIdentity(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClientIdentity(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 41)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClientIdentity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 41) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClientIdentity()
{
  return &type metadata for ClientIdentity;
}

unint64_t sub_10002AC2C(uint64_t a1)
{
  unint64_t result = sub_10002AC54();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10002AC54()
{
  unint64_t result = qword_1000742E0;
  if (!qword_1000742E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000742E0);
  }
  return result;
}

uint64_t sub_10002ACA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007370((uint64_t *)&unk_100074390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002AD10(uint64_t a1)
{
  return a1;
}

uint64_t sub_10002AD3C(uint64_t result, uint64_t a2)
{
  char v3 = 0;
  uint64_t v4 = 0;
  char v5 = result & 1;
  do
  {
    char v6 = v3;
    char v7 = *((unsigned char *)&off_10006DBF8 + v4 + 32);
    if (v7) {
      unint64_t v8 = 0x8000000100061750;
    }
    else {
      unint64_t v8 = 0x8000000100061790;
    }
    __chkstk_darwin(result, a2);
    if ((v8 & 0x1000000000000000) != 0)
    {
      _StringGuts._slowWithCString<A>(_:)();
    }
    else
    {
      if ((v8 & 0x2000000000000000) != 0)
      {
        *(void *)stream = v9;
        uint64_t v24 = v8 & 0xFFFFFFFFFFFFFFLL;
        uint64_t v14 = swift_allocObject();
        *(unsigned char *)(v14 + 16) = v5;
        *(void *)(v14 + 24) = v2;
        *(unsigned char *)(v14 + 32) = v7;
        os_log_type_t v21 = sub_1000345C0;
        uint64_t v22 = v14;
        long long aBlock = _NSConcreteStackBlock;
        uint64_t v18 = 1107296256;
        uint64_t v19 = sub_10002B8F0;
        uint64_t v20 = &unk_10006EE08;
        unsigned __int8 v15 = _Block_copy(&aBlock);
        id v16 = v2;
        swift_release();
        xpc_set_event_stream_handler(stream, 0, v15);
        unint64_t v13 = v15;
      }
      else
      {
        uint64_t v10 = swift_allocObject();
        *(unsigned char *)(v10 + 16) = v5;
        *(void *)(v10 + 24) = v2;
        *(unsigned char *)(v10 + 32) = v7;
        os_log_type_t v21 = sub_1000345C0;
        uint64_t v22 = v10;
        long long aBlock = _NSConcreteStackBlock;
        uint64_t v18 = 1107296256;
        uint64_t v19 = sub_10002B8F0;
        uint64_t v20 = &unk_10006EE58;
        unint64_t v11 = _Block_copy(&aBlock);
        id v12 = v2;
        swift_release();
        xpc_set_event_stream_handler((const char *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32), 0, v11);
        unint64_t v13 = v11;
      }
      _Block_release(v13);
    }
    unint64_t result = swift_bridgeObjectRelease();
    char v3 = 1;
    uint64_t v4 = &_mh_execute_header.magic + 1;
  }
  while ((v6 & 1) == 0);
  return result;
}

id sub_10002AFE8()
{
  uint64_t v1 = v0;
  if (qword_100073A38 != -1) {
    swift_once();
  }
  if (sub_100008EFC()) {
    sub_100050678(0, 0);
  }
  Swift::String v2 = *(void **)(v0 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_listener);
  [*(id *)(v1 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_listener) setDelegate:v1];
  [v2 resume];
  char v3 = *(void **)(v1 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_listenerPrivate);
  [v3 setDelegate:v1];

  return [v3 resume];
}

id sub_10002B0D0()
{
  uint64_t v1 = OBJC_IVAR____TtC19FamilyControlsAgent5Agent____lazy_storage___slotMachine;
  Swift::String v2 = *(void **)(v0 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent____lazy_storage___slotMachine);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent____lazy_storage___slotMachine);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)UISSlotMachine) initWithSlotDrawer:*(void *)(v0 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_slotDrawer) options:2];
    char v5 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    Swift::String v2 = 0;
  }
  id v6 = v2;
  return v3;
}

void sub_10002B158()
{
  qword_1000742F0 = 0x6F666E4972657355;
  *(void *)algn_1000742F8 = 0xE800000000000000;
}

void sub_10002B17C(const char *a1, char a2, void *a3, char a4)
{
  char v7 = a4 & 1;
  uint64_t v8 = swift_allocObject();
  *(unsigned char *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  *(unsigned char *)(v8 + 32) = v7;
  v11[4] = sub_1000345C0;
  v11[5] = v8;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_10002B8F0;
  uint64_t v11[3] = &unk_10006EF98;
  uint64_t v9 = _Block_copy(v11);
  id v10 = a3;
  swift_release();
  xpc_set_event_stream_handler(a1, 0, v9);
  _Block_release(v9);
}

void sub_10002B274(void *a1, char a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  id v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v8, v11);
  uint64_t v14 = (char *)&v37 - v13;
  __chkstk_darwin(v12, v15);
  SecTaskRef v17 = (char *)&v37 - v16;
  if (xpc_dictionary_get_string(a1, _xpc_event_key_name))
  {
    uint64_t v18 = String.init(cString:)();
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    if (a2)
    {
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v18 && v27 == v21)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v29 & 1) == 0)
        {
          static Logger.agent.getter();
          swift_bridgeObjectRetain();
          uint64_t v30 = Logger.logObject.getter();
          os_log_type_t v31 = static os_log_type_t.fault.getter();
          if (os_log_type_enabled(v30, v31))
          {
            char v32 = (uint8_t *)swift_slowAlloc();
            uint64_t v40 = swift_slowAlloc();
            *(_DWORD *)char v32 = 136446210;
            id v38 = v32 + 4;
            swift_bridgeObjectRetain();
            uint64_t v39 = sub_1000067CC(v20, v21, &v40);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "Dropping unexpecting darwin notification %{public}s", v32, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(char *, uint64_t))(v6 + 8))(v14, v5);
          return;
        }
      }
      swift_bridgeObjectRelease();
      id v38 = v2;
      sub_1000439B8(v38);
      uint64_t v33 = v38;
    }
    else if (v18 == 0xD00000000000002ELL && v19 == 0x80000001000617B0 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      sub_100031218(a1);
    }
    else if (v20 == 0xD000000000000030 && v21 == 0x80000001000617E0 {
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    }
    {
      swift_bridgeObjectRelease();
      sub_10002B950(a1);
    }
    else
    {
      static Logger.agent.getter();
      swift_bridgeObjectRetain();
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v34, v35))
      {
        char v36 = (uint8_t *)swift_slowAlloc();
        uint64_t v40 = swift_slowAlloc();
        *(_DWORD *)char v36 = 136446210;
        id v38 = v36 + 4;
        swift_bridgeObjectRetain();
        uint64_t v39 = sub_1000067CC(v20, v21, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Dropping unexpecting distributed notification %{public}s", v36, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v6 + 8))(v17, v5);
    }
  }
  else
  {
    static Logger.agent.getter();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136446210;
      if (a2) {
        uint64_t v25 = 0xD00000000000001ALL;
      }
      else {
        uint64_t v25 = 0xD00000000000001CLL;
      }
      if (a2) {
        unint64_t v26 = 0x8000000100061750;
      }
      else {
        unint64_t v26 = 0x8000000100061790;
      }
      uint64_t v39 = sub_1000067CC(v25, v26, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to get XPC event name for %{public}s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }
}

uint64_t sub_10002B8F0(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();

  return swift_unknownObjectRelease();
}

uint64_t sub_10002B950(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void (***)(uint64_t, uint64_t))(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v56 = (char *)v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for AuthorizationRecord();
  uint64_t v52 = *(void *)(v57 - 8);
  __chkstk_darwin(v57, v8);
  uint64_t v58 = (char *)v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void (***)(char *, uint64_t))(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v13, v16);
  __chkstk_darwin(v17, v18);
  uint64_t v20 = (char *)v48 - v19;
  if (qword_1000739F8 != -1) {
    swift_once();
  }
  xpc_object_t v21 = xpc_dictionary_get_dictionary(a1, "UserInfo");
  if (v21)
  {
    xpc_object_t v22 = v21;
    id v51 = v11;
    xpc_object_t v23 = xpc_dictionary_get_array(v21, "bundleIDs");
    if (v23)
    {
      uint64_t v24 = v23;
      unint64_t v50 = v5;
      id v29 = sub_100008674();
      id v30 = v2;
      swift_unknownObjectRetain();
      os_log_type_t v31 = sub_100031428((uint64_t)v29, v24);
      swift_bridgeObjectRelease();
      id v55 = v30;

      swift_unknownObjectRelease();
      uint64_t v33 = v24;
      uint64_t v34 = *((void *)v31 + 2);
      if (v34)
      {
        v48[1] = v33;
        v48[2] = v22;
        unint64_t v35 = (*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
        v48[0] = v31;
        char v36 = &v31[v35];
        uint64_t v37 = *(void *)(v52 + 72);
        os_log_type_t v53 = (void (**)(char *, char *, uint64_t))(v52 + 16);
        uint64_t v54 = v37;
        ++v51;
        v52 += 8;
        ++v50;
        *(void *)&long long v32 = 136446210;
        long long v49 = v32;
        v48[3] = (char *)&type metadata for Any + 8;
        uint64_t v38 = v57;
        uint64_t v39 = v58;
        do
        {
          static Logger.agent.getter();
          (*v53)(v39, v36, v38);
          long long v41 = Logger.logObject.getter();
          os_log_type_t v42 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v41, v42))
          {
            uint64_t v43 = v4;
            uint64_t v44 = v10;
            uint64_t v45 = swift_slowAlloc();
            uint64_t v59 = swift_slowAlloc();
            *(_DWORD *)uint64_t v45 = v49;
            uint64_t v46 = AuthorizationRecord.bundleIdentifier.getter();
            *(void *)(v45 + 4) = sub_1000067CC(v46, v47, &v59);
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))v52)(v58, v57);
            _os_log_impl((void *)&_mh_execute_header, v41, v42, "Authorized Family Controls app %{public}s was removed, revoking authorization", (uint8_t *)v45, 0xCu);
            swift_arrayDestroy();
            uint64_t v38 = v57;
            swift_slowDealloc();
            uint64_t v10 = v44;
            uint64_t v4 = v43;
            uint64_t v39 = v58;
            swift_slowDealloc();
          }
          else
          {
            (*(void (**)(char *, uint64_t))v52)(v39, v38);
          }

          (*v51)(v20, v10);
          uint64_t v40 = (uint64_t)v56;
          AuthorizationRecord.recordIdentifier.getter();
          sub_10002C0A0(v40);
          (*v50)(v40, v4);
          v36 += v54;
          --v34;
        }
        while (v34);
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
    }
    swift_unknownObjectRelease();
    uint64_t v11 = v51;
  }
  static Logger.agent.getter();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "User info did not contain any bundle IDs", v27, 2u);
    swift_slowDealloc();
  }

  return ((uint64_t (*)(char *, uint64_t))v11[1])(v15, v10);
}

uint64_t sub_10002C0A0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  __chkstk_darwin(v2, v3);
  uint64_t v4 = type metadata accessor for Logger();
  __chkstk_darwin(v4, v5);
  sub_10000B970(a1);
  uint64_t result = sub_100008EFC();
  if ((result & 1) == 0)
  {
    if (qword_100073A38 != -1) {
      swift_once();
    }
    return sub_100051518();
  }
  return result;
}

uint64_t sub_10002C464(int a1, uint64_t a2, char *a3)
{
  uint64_t v104 = a3;
  LODWORD(v119) = a1;
  uint64_t v103 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v102 = *(void *)(v103 - 8);
  __chkstk_darwin(v103, v3);
  id v101 = (char *)v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = type metadata accessor for DispatchQoS();
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin(v100, v5);
  uint64_t v98 = (char *)v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v7 = *(void *)(v97 - 8);
  __chkstk_darwin(v97, v8);
  uint64_t v10 = (char *)v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for UUID();
  os_log_type_t v116 = *(void (***)(char *, uint64_t))(v96 - 8);
  __chkstk_darwin(v96, v11);
  long long v95 = (char *)v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for Logger();
  uint64_t v106 = *(void *)(v94 - 8);
  __chkstk_darwin(v94, v13);
  os_log_type_t v105 = (char *)v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AuthorizationStatus();
  uint64_t v107 = *(void (***)(char *, uint64_t))(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15, v16);
  uint64_t v19 = (char *)v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  xpc_object_t v22 = (char *)v82 - v21;
  uint64_t v23 = type metadata accessor for AuthorizationRecord();
  unint64_t v117 = *(void **)(v23 - 8);
  uint64_t v24 = v117[8];
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v28 = __chkstk_darwin(v26, v27);
  id v30 = (char *)v82 - v29;
  __chkstk_darwin(v28, v31);
  uint64_t v33 = (char *)v82 - v32;
  dispatch_group_t v34 = dispatch_group_create();
  if ((v119 & 1) == 0)
  {
    uint64_t v112 = v30;
    uint64_t v93 = (char *)v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v114 = v19;
    uint64_t v115 = v23;
    unint64_t v35 = v117;
    uint64_t v113 = v22;
    uint64_t v118 = v34;
    uint64_t v83 = v10;
    uint64_t v84 = v7;
    char v36 = &v104[OBJC_IVAR____TtC19FamilyControlsAgent5Agent_manager];
    uint64_t v37 = sub_100008674();
    uint64_t v38 = v37[2];
    if (v38)
    {
      uint64_t v111 = v15;
      uint64_t v92 = v36;
      uint64_t v40 = (void *)v35[2];
      uint64_t v39 = v35 + 2;
      unint64_t v117 = v40;
      uint64_t v41 = *((unsigned __int8 *)v39 + 64);
      v82[1] = v37;
      os_log_type_t v42 = (char *)v37 + ((v41 + 32) & ~v41);
      uint64_t v110 = v39[7];
      unsigned int v109 = enum case for AuthorizationStatus.approved(_:);
      unint64_t v108 = (void (**)(char *, void, uint64_t))(v107 + 13);
      ++v107;
      long long v91 = (void (**)(char *, uint64_t))(v106 + 8);
      uint64_t v89 = v41 | 7;
      uint64_t v90 = (v41 + 16) & ~v41;
      unint64_t v88 = (v24 + v90 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v87 = v88 + 8;
      unint64_t v86 = (void (**)(uint64_t, char *, uint64_t))(v39 + 2);
      uint64_t v85 = (void (**)(uint64_t, uint64_t))(v116 + 1);
      os_log_type_t v116 = (void (**)(char *, uint64_t))(v39 - 1);
      uint64_t v106 = (unint64_t)(v39 - 1) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v43 = v113;
      uint64_t v44 = v114;
      uint64_t v45 = v115;
      uint64_t v46 = (void (*)(char *, char *, uint64_t))v40;
      do
      {
        uint64_t v119 = v38;
        v46(v33, v42, v45);
        uint64_t v48 = v39;
        long long v49 = v43;
        AuthorizationRecord.status.getter();
        unint64_t v50 = v33;
        uint64_t v51 = v111;
        (*v108)(v44, v109, v111);
        sub_1000347A8(&qword_100073C28, (void (*)(uint64_t))&type metadata accessor for AuthorizationStatus);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        uint64_t v52 = v44;
        uint64_t v54 = v120;
        os_log_type_t v53 = (void *)aBlock[0];
        id v55 = *v107;
        (*v107)(v52, v51);
        uint64_t v56 = v49;
        uint64_t v39 = v48;
        uint64_t v45 = v115;
        uint64_t v57 = v51;
        uint64_t v33 = v50;
        v55(v56, v57);
        uint64_t v58 = v112;
        v46(v112, v50, v45);
        if (v53 == v54)
        {
          AuthorizationRecord.type.getter();
          uint64_t v59 = FamilyControlsMember.rawValue.getter();
          uint64_t v60 = FamilyControlsMember.rawValue.getter();
          uint64_t v61 = v58;
          uint64_t v62 = v60;
          unint64_t v47 = *v116;
          (*v116)(v61, v45);
          uint64_t v63 = v118;
          if (v59 == v62)
          {
            static Logger.agent.getter();
            uint64_t v64 = Logger.logObject.getter();
            os_log_type_t v65 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v64, v65))
            {
              id v66 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)id v66 = 0;
              _os_log_impl((void *)&_mh_execute_header, v64, v65, "Family Controls is not allowed, revoking all child authorizations", v66, 2u);
              uint64_t v63 = v118;
              swift_slowDealloc();
            }

            (*v91)(v105, v94);
            dispatch_group_enter(v63);
            uint64_t v67 = (uint64_t)v95;
            AuthorizationRecord.recordIdentifier.getter();
            os_log_type_t v68 = v93;
            ((void (*)(char *, char *, uint64_t))v117)(v93, v50, v45);
            uint64_t v69 = swift_allocObject();
            (*v86)(v69 + v90, v68, v45);
            *(void *)(v69 + v88) = v118;
            uint64_t v70 = v118;
            sub_10000A4D4(v67, 0, (void (*)(uint64_t, uint64_t))sub_1000346FC, v69);
            swift_release();
            (*v85)(v67, v96);
            v47(v50, v45);
            goto LABEL_6;
          }
        }
        else
        {
          unint64_t v47 = *v116;
          (*v116)(v58, v45);
        }
        v47(v50, v45);
LABEL_6:
        uint64_t v43 = v113;
        uint64_t v44 = v114;
        v42 += v110;
        uint64_t v38 = v119 - 1;
      }
      while (v119 != 1);
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v84;
    uint64_t v10 = v83;
    dispatch_group_t v34 = v118;
  }
  dispatch_group_t v71 = v34;
  sub_100031118();
  uint64_t v72 = v97;
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v10, enum case for DispatchQoS.QoSClass.default(_:), v97);
  char v73 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v72);
  uint64_t v74 = swift_allocObject();
  uint64_t v75 = v104;
  *(void *)(v74 + 16) = v104;
  aBlock[4] = sub_100034650;
  aBlock[5] = v74;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100036EDC;
  aBlock[3] = &unk_10006EF20;
  uint64_t v76 = _Block_copy(aBlock);
  id v77 = v75;
  char v78 = v98;
  static DispatchQoS.unspecified.getter();
  int v120 = &_swiftEmptyArrayStorage;
  sub_1000347A8((unint64_t *)&unk_100074180, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007370(&qword_100074360);
  sub_1000263C8();
  unint64_t v79 = v101;
  uint64_t v80 = v103;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v76);

  (*(void (**)(char *, uint64_t))(v102 + 8))(v79, v80);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v78, v100);
  return swift_release();
}

void sub_10002CF78(uint64_t a1, char a2, uint64_t a3, NSObject *a4)
{
  dispatch_group_t v44 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AuthorizationRecord();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v42 = *(void *)(v16 - 8);
  uint64_t v43 = v16;
  uint64_t v18 = __chkstk_darwin(v16, v17);
  uint64_t v20 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v37 - v22;
  if (a2)
  {
    swift_errorRetain();
    static Logger.agent.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v45 = a1;
      uint64_t v46 = v34;
      *(_DWORD *)uint64_t v33 = 136446210;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v35 = String.init<A>(describing:)();
      uint64_t v45 = sub_1000067CC(v35, v36, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failed to revoke authorization: %{public}s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100029F70(a1, 1);
    }
    else
    {
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v43);
  }
  else
  {
    static Logger.agent.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3, v11);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    int v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      int v40 = v26;
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v39 = swift_slowAlloc();
      uint64_t v46 = v39;
      *(_DWORD *)uint64_t v27 = 136446210;
      uint64_t v37 = v27 + 4;
      uint64_t v38 = v27;
      AuthorizationRecord.recordIdentifier.getter();
      sub_1000347A8((unint64_t *)&unk_100074400, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v30 = v29;
      (*(void (**)(char *, uint64_t))(v41 + 8))(v10, v7);
      uint64_t v45 = sub_1000067CC(v28, v30, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      _os_log_impl((void *)&_mh_execute_header, v24, (os_log_type_t)v40, "Successfully revoked authorization: %{public}s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    }

    (*(void (**)(char *, uint64_t))(v42 + 8))(v23, v43);
  }
  dispatch_group_leave(v44);
}

uint64_t sub_10002D4D4(uint64_t a1)
{
  sub_10000BDD4(a1 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_manager, (uint64_t)v4);
  if (sub_100008EFC())
  {
    if (qword_100073A38 != -1) {
      swift_once();
    }
    sub_100050678(0, 1);
  }
  else
  {
    if (qword_100073A38 != -1) {
      swift_once();
    }
    sub_100051518();
  }
  id v1 = [objc_allocWithZone((Class)MOLocalSettingsStore) init];
  if (sub_100007D7C())
  {
    sub_1000348C8(1, v1);
  }
  else
  {
    id v2 = [v1 deviceActivity];
    [v2 setSharingAppleIDs:0];

    id v1 = v2;
  }

  return sub_10000BE50((uint64_t)v4);
}

uint64_t sub_10002D608(int a1, xpc_object_t xstring)
{
  if (xpc_string_get_string_ptr(xstring))
  {
    Swift::Int v2 = String.init(cString:)();
    sub_10003E338(&v5, v2, v3);
    swift_bridgeObjectRelease();
  }
  return 1;
}

uint64_t sub_10002D664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v5 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  char v6 = v5(a2, a3);
  swift_unknownObjectRelease();
  return v6 & 1;
}

id sub_10002D6BC()
{
  id v1 = v0;
  ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v3 = OBJC_IVAR____TtC19FamilyControlsAgent5Agent_listener;
  uint64_t v4 = v0;
  static FamilyControlsService.name.getter();
  id v5 = objc_allocWithZone((Class)NSXPCListener);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v5 initWithMachServiceName:v6];

  *(void *)&v1[v3] = v7;
  uint64_t v8 = OBJC_IVAR____TtC19FamilyControlsAgent5Agent_listenerPrivate;
  static FamilyControlsService.namePrivate.getter();
  id v9 = objc_allocWithZone((Class)NSXPCListener);
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v11 = [v9 initWithMachServiceName:v10];

  *(void *)&v4[v8] = v11;
  uint64_t v12 = (uint64_t)&v4[OBJC_IVAR____TtC19FamilyControlsAgent5Agent_manager];
  Class v19 = (Class)type metadata accessor for AuthorizationAuthenticator();
  uint64_t v20 = &off_10006E4A0;
  v18[0] = [objc_allocWithZone(v19) init];
  v17[3] = type metadata accessor for Locations();
  v17[4] = (uint64_t)&protocol witness table for Locations;
  sub_100025234(v17);
  Locations.init(useExplicitLocations:)();
  v16[3] = &type metadata for AuthorizationManagedSettings;
  v16[4] = &off_10006EFE8;
  v16[0] = [objc_allocWithZone((Class)MOLocalSettingsStore) init];
  sub_100007BE8((uint64_t)v18, (uint64_t)v17, v16, v12);
  *(void *)&v4[OBJC_IVAR____TtC19FamilyControlsAgent5Agent_tokenDecoder] = 0;
  uint64_t v13 = OBJC_IVAR____TtC19FamilyControlsAgent5Agent_slotDrawer;
  *(void *)&v4[v13] = [objc_allocWithZone((Class)type metadata accessor for FamilyActivityDrawer()) init];
  *(void *)&v4[OBJC_IVAR____TtC19FamilyControlsAgent5Agent____lazy_storage___slotMachine] = 0;

  v15.receiver = v4;
  v15.super_class = ObjectType;
  return objc_msgSendSuper2(&v15, "init");
}

id sub_10002D8D8()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for Agent()
{
  return self;
}

void sub_10002DA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v5 = 0;
  }
  id v6 = (id)v5;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, a1);
}

uint64_t sub_10002DAA8(char a1, uint64_t a2, uint64_t a3, void (*a4)(id, uint64_t), uint64_t a5, char *a6, void *a7)
{
  void (*v31)(void *__return_ptr);
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  id v58;
  id v59;
  uint64_t v60;
  void (*v61)(char *, void, uint64_t);
  unsigned int v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  id v69;
  void (*v70)(id, uint64_t);
  uint64_t v71;
  void v72[3];
  uint64_t v73;

  os_log_type_t v68 = a6;
  uint64_t v69 = a7;
  uint64_t v70 = (void (*)(id, uint64_t))a4;
  uint64_t v11 = type metadata accessor for AuthorizationStatus();
  id v66 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11, v12);
  objc_super v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v60 - v17;
  uint64_t v19 = type metadata accessor for AuthorizationRecord();
  uint64_t v67 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v20);
  uint64_t v22 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_100007370(&qword_100074368);
  __chkstk_darwin(v23 - 8, v24);
  int v26 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v65 = a3;
  uint64_t v27 = FamilyControlsMember.rawValue.getter();
  if (v27 == FamilyControlsMember.rawValue.getter() && (a1 & 1) == 0)
  {
    sub_1000265EC(a2, (uint64_t)v26, &qword_100074368);
    uint64_t v28 = type metadata accessor for FamilyControlsError();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v26, 1, v28) == 1)
    {
      sub_100015758((uint64_t)v26, &qword_100074368);
      uint64_t v30 = 0;
    }
    else
    {
      sub_1000347A8(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
      uint64_t v30 = swift_allocError();
      (*(void (**)(uint64_t, char *, uint64_t))(v29 + 32))(v38, v26, v28);
    }
    v70(0, v30);
    return swift_errorRelease();
  }
  if (!v69)
  {
    uint64_t v42 = type metadata accessor for FamilyControlsError();
    sub_1000347A8(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    int v40 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v42 - 8) + 104))(v43, enum case for FamilyControlsError.invalidArgument(_:), v42);
    swift_willThrow();
    goto LABEL_13;
  }
  uint64_t v63 = a5;
  uint64_t v31 = *(void (**)(void *__return_ptr))&v68[OBJC_IVAR____TtC19FamilyControlsAgent5Agent_manager + 120];
  uint64_t v64 = v69;
  v31(v72);
  os_log_type_t v32 = sub_10000BE0C(v72, v73);
  uint64_t v33 = v32[2];
  if (!v33 || (uint64_t v34 = v32[1], v35 = sub_10000BE0C(v72, v73), (v36 = v35[4]) == 0))
  {
    uint64_t v39 = type metadata accessor for FamilyControlsError();
    sub_1000347A8(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    int v40 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v39 - 8) + 104))(v41, enum case for FamilyControlsError.invalidArgument(_:), v39);
    swift_willThrow();

    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v72);
LABEL_13:
    swift_errorRetain();
    v70(0, v40);
    swift_errorRelease();
    return swift_errorRelease();
  }
  uint64_t v37 = v35[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100045A38(v34, v33, v37, v36, (uint64_t)v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v72);
  AuthorizationRecord.status.getter();
  uint64_t v45 = v66;
  uint64_t v46 = *(void (**)(void))(v66 + 104);
  uint64_t v62 = enum case for AuthorizationStatus.approved(_:);
  uint64_t v61 = (void (*)(char *, void, uint64_t))v46;
  v46(v15);
  sub_1000347A8(&qword_100073C28, (void (*)(uint64_t))&type metadata accessor for AuthorizationStatus);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v48 = v71;
  unint64_t v47 = v72[0];
  long long v49 = *(void (**)(char *, uint64_t))(v45 + 8);
  v49(v15, v11);
  v49(v18, v11);
  if (v47 == v48)
  {
    v61(v18, v62, v11);
    unint64_t v50 = AuthorizationStatus.rawValue.getter();
    v49(v18, v11);
    uint64_t v51 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v50];
    v70(v51, 0);

    return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v22, v19);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v67 + 8))(v22, v19);
    uint64_t v52 = v63;
    if (qword_100073A38 != -1) {
      swift_once();
    }
    os_log_type_t v53 = qword_100074C50;
    uint64_t v54 = (void *)swift_allocObject();
    id v55 = v68;
    uint64_t v56 = v65;
    v54[2] = v68;
    v54[3] = v56;
    v54[4] = v69;
    v54[5] = v53;
    v54[6] = v70;
    v54[7] = v52;
    uint64_t v57 = (void *)swift_allocObject();
    v57[2] = v53;
    uint64_t v57[3] = sub_100034500;
    v57[4] = v54;
    swift_retain_n();
    uint64_t v58 = v64;
    uint64_t v59 = v55;
    swift_retain();
    swift_retain();
    sub_10004DDC0(1, 0, (uint64_t)sub_1000348C0, (uint64_t)v57);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_10002E270(uint8_t *a1, uint8_t *a2, char a3, uint64_t a4, NSObject *a5, void *a6, uint64_t a7, void (*a8)(id, uint64_t), uint64_t a9)
{
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v19 = __chkstk_darwin(v17, v18);
  uint64_t v22 = (char *)v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t v35 = v20;
    uint64_t v36 = v19;
    v34[1] = a9;
    swift_errorRetain();
    static Logger.authorization.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v37 = (uint64_t)a1;
      uint64_t v38 = v28;
      *(_DWORD *)uint64_t v27 = 136446210;
      v34[0] = v27 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v29 = String.init<A>(describing:)();
      uint64_t v37 = sub_1000067CC(v29, v30, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100034464((uint64_t)a1, (unint64_t)a2, 1);
      sub_100034464((uint64_t)a1, (unint64_t)a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to fetch or create authorization key: %{public}s", v27, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100034464((uint64_t)a1, (unint64_t)a2, 1);
      sub_100034464((uint64_t)a1, (unint64_t)a2, 1);
    }

    (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v36);
    uint64_t v31 = type metadata accessor for FamilyControlsError();
    sub_1000347A8(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v32 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, enum case for FamilyControlsError.unavailable(_:), v31);
    a8(0, v32);
    swift_errorRelease();
    return sub_100034464((uint64_t)a1, (unint64_t)a2, 1);
  }
  else
  {
    uint64_t v23 = a4 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_manager;
    swift_retain();
    swift_retain();
    sub_100034470((uint64_t)a1, (unint64_t)a2, 0);
    sub_10000D718(a5, a6, a1, a2, v23, a7, a8, a9);
    swift_release();
    swift_release();
    return sub_100034464((uint64_t)a1, (unint64_t)a2, 0);
  }
}

uint64_t sub_10002E640(uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t))
{
  v25[1] = a2;
  uint64_t v5 = type metadata accessor for AuthorizationStatus();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  NSString v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)v25 - v12;
  uint64_t v14 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (void *)((char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000265EC(a1, (uint64_t)v17, &qword_100073DD0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    swift_errorRetain();
    a3(0, v18);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v20 = a3;
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v13, v17, v5);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v10, enum case for AuthorizationStatus.approved(_:), v5);
    sub_1000347A8(&qword_100073C28, (void (*)(uint64_t))&type metadata accessor for AuthorizationStatus);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v22 = v25[2];
    uint64_t v21 = v25[3];
    uint64_t v23 = *(void (**)(char *, uint64_t))(v6 + 8);
    v23(v10, v5);
    if (v21 == v22) {
      sub_100050678(1, 1);
    }
    id v24 = [objc_allocWithZone((Class)NSNumber) initWithInteger:AuthorizationStatus.rawValue.getter()];
    v20(v24, 0);

    return ((uint64_t (*)(char *, uint64_t))v23)(v13, v5);
  }
}

uint64_t sub_10002E9E4(uint64_t a1, uint64_t a2, void (*a3)(id, uint64_t))
{
  uint64_t v5 = type metadata accessor for AuthorizationStatus();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (uint64_t *)((char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000265EC(a1, (uint64_t)v13, &qword_100073DD0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v14 = *v13;
    swift_errorRetain();
    a3(0, v14);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v9, v13, v5);
    if (!sub_100008EFC())
    {
      if (qword_100073A38 != -1) {
        swift_once();
      }
      sub_100051518();
    }
    id v16 = [objc_allocWithZone((Class)NSNumber) initWithInteger:AuthorizationStatus.rawValue.getter()];
    a3(v16, 0);

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

void sub_10002EECC(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_10002EF48(int a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v57 = a6;
  uint64_t v51 = a2;
  int v50 = a1;
  uint64_t v55 = type metadata accessor for UUID();
  uint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin(v55, v9);
  uint64_t v52 = v10;
  uint64_t v54 = &v49[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_100007370(&qword_100074368);
  __chkstk_darwin(v11 - 8, v12);
  uint64_t v14 = &v49[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = sub_100007370((uint64_t *)&unk_100074370);
  __chkstk_darwin(v15 - 8, v16);
  uint64_t v18 = &v49[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = type metadata accessor for AuthorizationRecord();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  uint64_t v23 = &v49[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v56 = a3;
  sub_1000461CC(a4, (uint64_t)v18);
  uint64_t v58 = a5;
  char v24 = v50;
  uint64_t v25 = v51;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_100015758((uint64_t)v18, (uint64_t *)&unk_100074370);
    uint64_t v26 = type metadata accessor for FamilyControlsError();
    sub_1000347A8(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v27 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v26 - 8) + 104))(v28, enum case for FamilyControlsError.invalidArgument(_:), v26);
    swift_willThrow();
    uint64_t v29 = v58;
    swift_errorRetain();
    unint64_t v30 = v57;
    v29(v27);
    swift_errorRelease();
    swift_errorRelease();
LABEL_3:
    if (qword_100073A38 != -1) {
      swift_once();
    }
    uint64_t v31 = qword_100074C50;
    uint64_t v33 = v53;
    uint64_t v32 = v54;
    uint64_t v34 = a4;
    uint64_t v35 = v55;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v53 + 16))(v54, v34, v55);
    unint64_t v36 = (*(unsigned __int8 *)(v33 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    unint64_t v37 = (v52 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v38 = swift_allocObject();
    uint64_t v39 = v56;
    *(void *)(v38 + 16) = v56;
    (*(void (**)(unint64_t, unsigned char *, uint64_t))(v33 + 32))(v38 + v36, v32, v35);
    *(void *)(v38 + v37) = v31;
    int v40 = (void (**)(uint64_t))(v38 + ((v37 + 15) & 0xFFFFFFFFFFFFFFF8));
    *int v40 = v58;
    v40[1] = v30;
    uint64_t v41 = (void *)swift_allocObject();
    void v41[2] = v31;
    v41[3] = sub_100034388;
    v41[4] = v38;
    swift_retain_n();
    id v42 = v39;
    swift_retain();
    swift_retain();
    sub_10004DDC0(1, 0, (uint64_t)sub_100034454, (uint64_t)v41);
    swift_release();
    return swift_release();
  }
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 32))(v23, v18, v19);
  AuthorizationRecord.type.getter();
  uint64_t v44 = FamilyControlsMember.rawValue.getter();
  if (v44 != FamilyControlsMember.rawValue.getter() || (v24 & 1) != 0)
  {
    (*(void (**)(unsigned char *, uint64_t))(v20 + 8))(v23, v19);
    unint64_t v30 = v57;
    goto LABEL_3;
  }
  sub_1000265EC(v25, (uint64_t)v14, &qword_100074368);
  uint64_t v45 = type metadata accessor for FamilyControlsError();
  uint64_t v46 = *(void *)(v45 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v46 + 48))(v14, 1, v45) == 1)
  {
    sub_100015758((uint64_t)v14, &qword_100074368);
    uint64_t v47 = 0;
  }
  else
  {
    sub_1000347A8(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v47 = swift_allocError();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v46 + 32))(v48, v14, v45);
  }
  v58(v47);
  swift_errorRelease();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v20 + 8))(v23, v19);
}

uint64_t sub_10002F548(uint8_t *a1, uint8_t *a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    uint64_t v35 = a7;
    uint64_t v36 = v19;
    uint64_t v37 = a8;
    swift_errorRetain();
    static Logger.agent.getter();
    swift_errorRetain();
    swift_errorRetain();
    char v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      uint64_t v38 = (uint64_t)a1;
      uint64_t v39 = v27;
      *(_DWORD *)uint64_t v26 = 136446210;
      uint64_t v34 = v26 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v28 = String.init<A>(describing:)();
      uint64_t v38 = sub_1000067CC(v28, v29, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100034464((uint64_t)a1, (unint64_t)a2, 1);
      sub_100034464((uint64_t)a1, (unint64_t)a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to fetch or create authorization key: %{public}s", v26, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100034464((uint64_t)a1, (unint64_t)a2, 1);
      sub_100034464((uint64_t)a1, (unint64_t)a2, 1);
    }

    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v36);
    unint64_t v30 = v35;
    uint64_t v31 = type metadata accessor for FamilyControlsError();
    sub_1000347A8(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    uint64_t v32 = swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v31 - 8) + 104))(v33, enum case for FamilyControlsError.unavailable(_:), v31);
    v30(v32);
    swift_errorRelease();
    return sub_100034464((uint64_t)a1, (unint64_t)a2, 1);
  }
  else
  {
    uint64_t v22 = a4 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_manager;
    swift_retain();
    swift_retain();
    sub_100034470((uint64_t)a1, (unint64_t)a2, 0);
    sub_100010330(a5, a1, a2, v22, a6, a7, a8);
    swift_release();
    swift_release();
    return sub_100034464((uint64_t)a1, (unint64_t)a2, 0);
  }
}

uint64_t sub_10002F910(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  v23[1] = a2;
  uint64_t v5 = type metadata accessor for AuthorizationStatus();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v8 = __chkstk_darwin(v5, v7);
  uint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)v23 - v12;
  uint64_t v14 = sub_100007370(&qword_100073DD0);
  __chkstk_darwin(v14, v15);
  uint64_t v17 = (void *)((char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000265EC(a1, (uint64_t)v17, &qword_100073DD0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    swift_errorRetain();
    a3(v18);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v6 + 32))(v13, v17, v5);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v10, enum case for AuthorizationStatus.approved(_:), v5);
    sub_1000347A8(&qword_100073C28, (void (*)(uint64_t))&type metadata accessor for AuthorizationStatus);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v21 = v23[2];
    uint64_t v20 = v23[3];
    uint64_t v22 = *(void (**)(char *, uint64_t))(v6 + 8);
    v22(v10, v5);
    if (v20 == v21) {
      sub_100050678(1, 1);
    }
    a3(0);
    return ((uint64_t (*)(char *, uint64_t))v22)(v13, v5);
  }
}

void sub_10002FDA4(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_1000300A0(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    a4(a1);
    return sub_100029F70(a1, 1);
  }
  else
  {
    if (!sub_100008EFC())
    {
      if (qword_100073A38 != -1) {
        swift_once();
      }
      sub_100051518();
    }
    return ((uint64_t (*)(void))a4)(0);
  }
}

uint64_t sub_1000303DC(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v33 = *(void *)(v2 - 8);
  uint64_t v34 = v2;
  __chkstk_darwin(v2, v3);
  uint64_t v31 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for DispatchQoS();
  uint64_t v30 = *(void *)(v32 - 8);
  __chkstk_darwin(v32, v5);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100073A38 != -1) {
    swift_once();
  }
  uint64_t v13 = dispatch_group_create();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = 0;
  if (sub_100008EFC())
  {
    dispatch_group_enter(v13);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v14;
    *(void *)(v15 + 24) = v13;
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_100031210;
    *(void *)(v16 + 24) = v15;
    swift_retain();
    uint64_t v17 = v13;
    swift_retain();
    sub_10004E1B4((uint64_t)sub_1000348C4, v16);
    swift_release();
    swift_release();
  }
  dispatch thunk of FamilyCircle.currentMember.getter();
  if (v37)
  {
    sub_10000BE0C(aBlock, (uint64_t)v37);
    char v18 = dispatch thunk of FamilyMemberable.isParent.getter();
    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)aBlock);
    if (v18)
    {
      dispatch_group_enter(v13);
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = v14;
      *(void *)(v19 + 24) = v13;
      swift_retain();
      uint64_t v20 = v13;
      sub_10004DDC0(1, 1, (uint64_t)sub_1000311C0, v19);
      swift_release();
    }
  }
  else
  {
    sub_100015758((uint64_t)aBlock, &qword_100074358);
  }
  sub_100031118();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v8);
  uint64_t v21 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  uint64_t v22 = (void *)swift_allocObject();
  uint64_t v23 = v29;
  void v22[2] = v28;
  v22[3] = v23;
  v22[4] = v14;
  uint64_t v38 = sub_100031198;
  uint64_t v39 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100036EDC;
  uint64_t v37 = &unk_10006EB60;
  char v24 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v35 = &_swiftEmptyArrayStorage;
  sub_1000347A8((unint64_t *)&unk_100074180, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007370(&qword_100074360);
  sub_1000263C8();
  os_log_type_t v25 = v31;
  uint64_t v26 = v34;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v25, v26);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v32);
  swift_release();
  return swift_release();
}

void sub_100030930(uint64_t a1, uint64_t a2, NSObject *a3)
{
  *(void *)(a2 + 16) = a1;
  swift_errorRetain();
  swift_errorRelease();
  dispatch_group_leave(a3);
}

void sub_10003099C(uint64_t a1, char a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)v27 - v15;
  if (a2)
  {
    uint64_t v20 = (uint64_t *)(a3 + 16);
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v29 = a4;
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      uint64_t v28 = v20;
      uint64_t v30 = a1;
      v31[0] = v24;
      *(_DWORD *)uint64_t v23 = 136446210;
      v27[1] = v23 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v30 = sub_1000067CC(v25, v26, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a4 = v29;
      swift_bridgeObjectRelease();
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to fetch all shared zones: %{public}s", v23, 0xCu);
      swift_arrayDestroy();
      uint64_t v20 = v28;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
    swift_beginAccess();
    *uint64_t v20 = a1;
    swift_errorRelease();
  }
  else
  {
    static Logger.syncEngine.getter();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully fetched all shared zones", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
  }
  dispatch_group_leave(a4);
}

uint64_t sub_100030CD8(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(a3 + 16);
  swift_errorRetain();
  a1(v5);
  return swift_errorRelease();
}

uint64_t sub_100030ED0(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  if ((a2 & 1) == 0) {
    return a3(0);
  }
  swift_errorRetain();
  a3(a1);

  return sub_100029F70(a1, 1);
}

uint64_t sub_100031048()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

void sub_100031080(uint64_t a1)
{
  sub_10002FDA4(a1, *(void *)(v1 + 16));
}

uint64_t sub_100031088()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000310C0(uint64_t a1, char a2)
{
  return sub_100030ED0(a1, a2 & 1, *(uint64_t (**)(uint64_t))(v2 + 16));
}

uint64_t sub_1000310E0()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

unint64_t sub_100031118()
{
  unint64_t result = qword_100073ED0;
  if (!qword_100073ED0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100073ED0);
  }
  return result;
}

uint64_t sub_100031158()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100031198()
{
  return sub_100030CD8(*(void (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1000311A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1000311B4()
{
  return swift_release();
}

void sub_1000311C0(uint64_t a1, char a2)
{
  sub_10003099C(a1, a2 & 1, *(void *)(v2 + 16), *(NSObject **)(v2 + 24));
}

uint64_t sub_1000311D0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100031210(uint64_t a1)
{
  sub_100030930(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_100031218(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1000739F8 != -1) {
    swift_once();
  }
  xpc_object_t v7 = xpc_dictionary_get_dictionary(a1, "UserInfo");
  if (!v7) {
    goto LABEL_6;
  }
  if (xpc_dictionary_get_BOOL(v7, "isPlaceholder"))
  {
    swift_unknownObjectRelease();
LABEL_6:
    static Logger.agent.getter();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Skipping activity update until the app installation has completed.", v10, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  if (qword_100073A38 != -1) {
    swift_once();
  }
  sub_10004D530(0, 0);

  return swift_unknownObjectRelease();
}

char *sub_100031428(uint64_t a1, void *a2)
{
  uint64_t v38 = type metadata accessor for AuthorizationRecord();
  uint64_t v6 = __chkstk_darwin(v38, v5);
  uint64_t v37 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)v30 - v10;
  unint64_t result = (char *)&_swiftEmptyArrayStorage;
  id v42 = (char *)&_swiftEmptyArrayStorage;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v14 = v9 + 16;
    uint64_t v16 = *(void *)(v14 + 56);
    unint64_t v32 = (*(unsigned __int8 *)(v14 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 64);
    uint64_t v17 = a1 + v32;
    uint64_t v35 = v40;
    uint64_t v36 = v15;
    v30[1] = v2;
    uint64_t v31 = (void (**)(char *, uint64_t))(v14 - 8);
    uint64_t v34 = (void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v33 = a2;
    while (1)
    {
      uint64_t v18 = v14;
      v36(v11, v17, v38);
      uint64_t v41 = &_swiftEmptySetSingleton;
      uint64_t v19 = swift_allocObject();
      *(void *)(v19 + 16) = &v41;
      uint64_t v20 = swift_allocObject();
      *(void *)(v20 + 16) = sub_1000345D4;
      *(void *)(v20 + 24) = v19;
      long long v40[2] = sub_1000345EC;
      v40[3] = v20;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v40[0] = sub_10002D664;
      v40[1] = &unk_10006EED0;
      uint64_t v21 = _Block_copy(aBlock);
      swift_retain();
      swift_release();
      xpc_array_apply(a2, v21);
      _Block_release(v21);
      LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
      unint64_t result = (char *)swift_release();
      if (v21) {
        break;
      }
      uint64_t v22 = (uint64_t)v41;
      swift_release();
      uint64_t v23 = AuthorizationRecord.bundleIdentifier.getter();
      char v25 = sub_10004DC88(v23, v24, v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v25)
      {
        unint64_t v26 = *v34;
        (*v34)(v37, v11, v38);
        uint64_t v27 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003DD64(0, *((void *)v27 + 2) + 1, 1);
          uint64_t v27 = v42;
        }
        unint64_t v29 = *((void *)v27 + 2);
        unint64_t v28 = *((void *)v27 + 3);
        if (v29 >= v28 >> 1)
        {
          sub_10003DD64(v28 > 1, v29 + 1, 1);
          uint64_t v27 = v42;
        }
        *((void *)v27 + 2) = v29 + 1;
        v26(&v27[v32 + v29 * v16], v37, v38);
        id v42 = v27;
        a2 = v33;
      }
      else
      {
        (*v31)(v11, v38);
      }
      v17 += v16;
      --v13;
      uint64_t v14 = v18;
      if (!v13) {
        return v42;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000317C0(void *a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v6, v9);
  uint64_t v12 = (char *)&v76 - v11;
  uint64_t v14 = __chkstk_darwin(v10, v13);
  uint64_t v16 = (char *)&v76 - v15;
  uint64_t v18 = __chkstk_darwin(v14, v17);
  uint64_t v20 = (char *)&v76 - v19;
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)&v76 - v22;
  id v24 = [a1 serviceName];
  if (!v24)
  {
    static Logger.authorization.getter();
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      unint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Received connection with missing service name", v32, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v8, v3);
    return 0;
  }
  char v25 = v24;
  uint64_t v79 = v1;
  uint64_t v80 = v12;
  id v77 = v16;
  uint64_t v82 = v4;
  uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v27 = v26;

  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [a1 valueForEntitlement:v28];

  if (v29)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v84 = 0u;
    long long v85 = 0u;
  }
  sub_100034538((uint64_t)&v84, (uint64_t)v86, &qword_100074070);
  char v78 = v20;
  if (v87)
  {
    if (swift_dynamicCast())
    {
      int v33 = v83;
      goto LABEL_13;
    }
  }
  else
  {
    sub_100015758((uint64_t)v86, &qword_100074070);
  }
  int v33 = 0;
LABEL_13:
  NSString v34 = String._bridgeToObjectiveC()();
  id v35 = [a1 valueForEntitlement:v34];

  if (v35)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v84 = 0u;
    long long v85 = 0u;
  }
  sub_100034538((uint64_t)&v84, (uint64_t)v86, &qword_100074070);
  if (v87)
  {
    if (swift_dynamicCast())
    {
      if ((v33 | v83))
      {
        char v36 = v33 ^ 1 | v83;
        goto LABEL_23;
      }
LABEL_25:
      uint64_t v48 = v3;
      long long v49 = v80;
      static Logger.authorization.getter();
      id v50 = a1;
      swift_bridgeObjectRetain();
      id v51 = v50;
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        v86[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v54 = 136446466;
        swift_bridgeObjectRetain();
        *(void *)&long long v84 = sub_1000067CC(v81, v27, v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v54 + 12) = 1024;
        unsigned int v55 = [v51 processIdentifier];

        LODWORD(v84) = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Rejecting %{public}s connection from process %d due to missing entitlement", (uint8_t *)v54, 0x12u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v82 + 8))(v49, v48);
      return 0;
    }
  }
  else
  {
    sub_100015758((uint64_t)v86, &qword_100074070);
  }
  if (!v33) {
    goto LABEL_25;
  }
  char v36 = 0;
LABEL_23:
  static Logger.authorization.getter();
  swift_bridgeObjectRetain_n();
  id v37 = a1;
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = swift_slowAlloc();
    v86[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136446466;
    swift_bridgeObjectRetain();
    *(void *)&long long v84 = sub_1000067CC(v81, v27, v86);
    uint64_t v80 = (char *)v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v40 + 12) = 1024;
    unint64_t v41 = v27;
    char v42 = v36;
    unsigned int v43 = [v37 processIdentifier];

    LODWORD(v84) = v43;
    char v36 = v42;
    unint64_t v27 = v41;
    uint64_t v44 = (uint64_t)v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Received %{public}s connection from process %d", (uint8_t *)v40, 0x12u);
    swift_arrayDestroy();
    uint64_t v3 = v44;
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v45 = *(void (**)(char *, uint64_t))(v82 + 8);
    uint64_t v46 = v23;
    uint64_t v47 = v81;
    v45(v46, v44);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v45 = *(void (**)(char *, uint64_t))(v82 + 8);
    v45(v23, v3);
    uint64_t v47 = v81;
  }
  if (static FamilyControlsService.name.getter() != v47 || v56 != v27)
  {
    char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v58) {
      goto LABEL_35;
    }
    if (static FamilyControlsService.namePrivate.getter() == v47 && v61 == v27)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v62 & 1) == 0)
      {
        dispatch_group_t v71 = v77;
        static Logger.authorization.getter();
        swift_bridgeObjectRetain();
        uint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v72, v73))
        {

          swift_bridgeObjectRelease_n();
          v45(v71, v3);
          return 0;
        }
        uint64_t v80 = (char *)v3;
        uint64_t v74 = (uint8_t *)swift_slowAlloc();
        v86[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v74 = 136446210;
        swift_bridgeObjectRetain();
        *(void *)&long long v84 = sub_1000067CC(v47, v27, v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Received connection with unknown service name: %{public}s", v74, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v75 = v77;
LABEL_50:
        v45(v75, (uint64_t)v80);
        return 0;
      }
    }
    uint64_t v80 = (char *)v3;
    uint64_t v59 = (void *)static FamilyControlsService.agentInterfacePrivate.getter();
    if (v36)
    {
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
    uint64_t v63 = v78;
    static Logger.authorization.getter();
    id v64 = v37;
    swift_bridgeObjectRetain();
    id v65 = v64;
    id v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v68 = v47;
      uint64_t v69 = swift_slowAlloc();
      uint64_t v81 = swift_slowAlloc();
      v86[0] = v81;
      *(_DWORD *)uint64_t v69 = 136446466;
      swift_bridgeObjectRetain();
      *(void *)&long long v84 = sub_1000067CC(v68, v27, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v69 + 12) = 1024;
      unsigned int v70 = [v65 processIdentifier];

      LODWORD(v84) = v70;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Rejecting %{public}s connection. Process %d missing required entitlement for this interface.", (uint8_t *)v69, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v75 = v63;
    goto LABEL_50;
  }
  swift_bridgeObjectRelease();
LABEL_35:
  swift_bridgeObjectRelease();
  uint64_t v59 = (void *)static FamilyControlsService.agentInterface.getter();
LABEL_36:
  uint64_t v60 = v79;
  [v37 setExportedInterface:v59];
  [v37 setExportedObject:v60];
  [v37 resume];

  return 1;
}

uint64_t sub_1000322F4(uint64_t a1, uint64_t a2)
{
  void (*v16)(void *__return_ptr);
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void v38[3];
  uint64_t v39;

  uint64_t v4 = type metadata accessor for AuthorizationStatus();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AuthorizationRecord();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = [self currentConnection];
  uint64_t v15 = v14;
  if (v14)
  {
    NSString v34 = v5;
    id v35 = v10;
    id v37 = a2;
    uint64_t v16 = *(void (**)(void *__return_ptr))(a1 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_manager + 120);
    char v36 = v14;
    v16(v38);
    uint64_t v17 = sub_10000BE0C(v38, v39);
    uint64_t v18 = v17[2];
    if (v18)
    {
      uint64_t v19 = v17[1];
      uint64_t v20 = sub_10000BE0C(v38, v39);
      uint64_t v21 = v20[4];
      if (v21)
      {
        int v33 = v9;
        uint64_t v22 = v20[3];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100045A38(v19, v18, v22, v21, (uint64_t)v13);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        NSString v28 = v36;

        _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v38);
        AuthorizationRecord.status.getter();
        id v29 = AuthorizationStatus.rawValue.getter();
        (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v4);
        uint64_t v30 = [objc_allocWithZone((Class)NSNumber) initWithInteger:v29];
        (*(void (**)(uint64_t, id, void))(v37 + 16))(v37, v30, 0);

        return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v13, v33);
      }
    }
    uint64_t v23 = type metadata accessor for FamilyControlsError();
    sub_1000347A8(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 104))(v24, enum case for FamilyControlsError.invalidArgument(_:), v23);
    swift_willThrow();

    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v38);
    a2 = v37;
  }
  else
  {
    char v25 = type metadata accessor for FamilyControlsError();
    sub_1000347A8(&qword_100073C50, (void (*)(uint64_t))&type metadata accessor for FamilyControlsError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v25 - 8) + 104))(v26, enum case for FamilyControlsError.invalidArgument(_:), v25);
    swift_willThrow();
  }
  swift_errorRetain();
  unint64_t v27 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void, void *))(a2 + 16))(a2, 0, v27);

  swift_errorRelease();
  return swift_errorRelease();
}

void sub_100032748(uint64_t a1, unint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  self;
  uint64_t v13 = swift_dynamicCastObjCClass();
  if (v13)
  {
    uint64_t v14 = v13;
    type metadata accessor for ActivityItem();
    swift_allocObject();
    id v15 = a4;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_1000472D8(0, a1, a2);
    uint64_t v17 = (objc_class *)type metadata accessor for LabelSlotTag();
    uint64_t v18 = (char *)objc_allocWithZone(v17);
    *(void *)&v18[OBJC_IVAR____TtC19FamilyControlsAgent12LabelSlotTag_slotType] = a5;
    *(void *)&v18[OBJC_IVAR____TtC19FamilyControlsAgent12LabelSlotTag_activityItem] = v16;
    v24.receiver = v18;
    v24.super_class = v17;
    swift_retain();
    id v19 = objc_msgSendSuper2(&v24, "init");
    id v20 = sub_10002B0D0();
    id v21 = objc_msgSend(v20, "remoteContentForLayerContextWithId:style:tag:", a3, v14, v19, v24.receiver, v24.super_class);

    (*(void (**)(uint64_t, id, void))(a7 + 16))(a7, v21, 0);
    swift_release();
  }
  else
  {
    sub_10001ABA8();
    swift_allocError();
    *uint64_t v22 = 0;
    uint64_t v23 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a7 + 16))(a7, 0, v23);

    swift_errorRelease();
  }
}

uint64_t sub_100032938(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = __chkstk_darwin(v6, v7);
  uint64_t v10 = __chkstk_darwin(v8, v9);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v19 - v12;
  if (a1 == 2)
  {
    if (*(void *)(v1 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_tokenDecoder))
    {
      swift_retain();
      uint64_t v17 = dispatch thunk of TokenDecoder.decode(categoryIdentifierToken:)();
      swift_release();
      return v17;
    }
    return 0;
  }
  if (a1 != 1)
  {
    if (!a1)
    {
      if (!*(void *)(v1 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_tokenDecoder)) {
        return 0;
      }
      swift_retain();
      uint64_t v17 = dispatch thunk of TokenDecoder.decode(bundleIdentifierToken:)();
      swift_release();
      return v17;
    }
    static Logger.activityItem.getter();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unable to decode activity token", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v13, v3);
    return 0;
  }
  if (!*(void *)(v1 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_tokenDecoder)) {
    return 0;
  }
  swift_retain();
  uint64_t v17 = dispatch thunk of TokenDecoder.decode(webDomainToken:)();
  swift_release();
  return v17;
}

void sub_100033098(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v73 = a6;
  uint64_t v74 = a7;
  uint64_t v71 = a4;
  unint64_t v72 = a5;
  uint64_t v69 = a3;
  uint64_t v70 = a1;
  uint64_t v10 = sub_100007370((uint64_t *)&unk_100074380);
  uint64_t v76 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v75 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v16 = __chkstk_darwin(v13, v15);
  uint64_t v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  id v21 = (char *)&v62 - v20;
  uint64_t v22 = type metadata accessor for KeyRetriever();
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  unint64_t v26 = (char *)&v62 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v27 = [self currentConnection];
  if (v27)
  {
    id v77 = v27;
    self;
    uint64_t v28 = swift_dynamicCastObjCClass();
    if (v28)
    {
      uint64_t v62 = v28;
      uint64_t v63 = v10;
      uint64_t v67 = v23;
      uint64_t v68 = v22;
      uint64_t v65 = a8;
      id v64 = a2;
      KeyRetriever.init()();
      id v29 = v77;
      id v66 = v26;
      id v30 = v29;
      static Logger.activityItem.getter();
      int v31 = [v30 processIdentifier];
      [v30 auditToken];
      uint64_t v33 = v80;
      uint64_t v32 = v81[0];
      uint64_t v34 = v81[1];
      uint64_t v35 = v81[2];
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v18, v21, v13);
      sub_10002A62C(v31, v33, v32, v34, v35, v77, (uint64_t)v18, (uint64_t)&v80);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
      if (v81[3])
      {
        uint64_t v36 = v68;
        v79[3] = v68;
        v79[4] = (uint64_t)&protocol witness table for KeyRetriever;
        id v37 = sub_100025234(v79);
        uint64_t v38 = v67;
        os_log_type_t v39 = v66;
        (*(void (**)(uint64_t *, char *, uint64_t))(v67 + 16))(v37, v66, v36);
        type metadata accessor for TokenDecoder();
        swift_allocObject();
        swift_bridgeObjectRetain();
        *(void *)(v74 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_tokenDecoder) = TokenDecoder.init(teamIdentifier:keyRetriever:)();
        swift_release();
        sub_100015DDC(v71, v72);
        uint64_t v40 = v75;
        Token.init(data:)();
        uint64_t v41 = sub_100032938(v73);
        unint64_t v43 = v42;
        int v45 = v44;
        sub_100034538((uint64_t)v81, (uint64_t)v79, (uint64_t *)&unk_100074390);
        sub_10003447C((uint64_t)v79);
        swift_bridgeObjectRelease();
        type metadata accessor for ActivityItem();
        swift_allocObject();
        if (v43)
        {
          uint64_t v46 = sub_1000472D8(v45, v41, v43);
          uint64_t v47 = (objc_class *)type metadata accessor for LabelSlotTag();
          uint64_t v48 = (char *)objc_allocWithZone(v47);
          *(void *)&v48[OBJC_IVAR____TtC19FamilyControlsAgent12LabelSlotTag_slotType] = v69;
          *(void *)&v48[OBJC_IVAR____TtC19FamilyControlsAgent12LabelSlotTag_activityItem] = v46;
          v78.receiver = v48;
          v78.super_class = v47;
          swift_retain();
          id v49 = objc_msgSendSuper2(&v78, "init");
          id v50 = sub_10002B0D0();
          id v51 = [v50 remoteContentForLayerContextWithId:v70 style:v62 tag:v49];

          (*(void (**)(uint64_t, id, void))(v65 + 16))(v65, v51, 0);
          swift_release();

          (*(void (**)(char *, uint64_t))(v76 + 8))(v40, v63);
          (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v36);
        }
        else
        {
          sub_1000472D8(1, 0x6E776F6E6B6E55, 0xE700000000000000);
          sub_10001ABA8();
          swift_allocError();
          unsigned char *v59 = 2;
          uint64_t v60 = v36;
          uint64_t v61 = (void *)_convertErrorToNSError(_:)();
          (*(void (**)(uint64_t, void, void *))(v65 + 16))(v65, 0, v61);

          swift_errorRelease();
          swift_release();

          (*(void (**)(char *, uint64_t))(v76 + 8))(v40, v63);
          (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v60);
        }
      }
      else
      {
        sub_100034538((uint64_t)v81, (uint64_t)v79, (uint64_t *)&unk_100074390);
        sub_10003447C((uint64_t)v79);
        sub_10001ABA8();
        swift_allocError();
        *uint64_t v57 = 1;
        char v58 = (void *)_convertErrorToNSError(_:)();
        (*(void (**)(uint64_t, void, void *))(v65 + 16))(v65, 0, v58);

        swift_errorRelease();
        (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v68);
      }
    }
    else
    {
      sub_10001ABA8();
      swift_allocError();
      *uint64_t v54 = 0;
      unsigned int v55 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, void, void *))(a8 + 16))(a8, 0, v55);

      swift_errorRelease();
      uint64_t v56 = v77;
    }
  }
  else
  {
    sub_10001ABA8();
    swift_allocError();
    unsigned char *v52 = 0;
    os_log_type_t v53 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a8 + 16))(a8, 0, v53);

    swift_errorRelease();
  }
}

void sub_100033888(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = a2;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v60 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for AuthorizationStatus();
  uint64_t v61 = *(char **)(v6 - 8);
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AuthorizationRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_100008674();
  uint64_t v17 = v61;
  uint64_t v18 = v46;
  char v58 = v14;
  if (v16[2])
  {
    uint64_t v59 = v16[2];
    uint64_t v56 = v5;
    uint64_t v19 = self;
    os_log_type_t v53 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    id v54 = v19;
    unint64_t v20 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v45[1] = v16;
    id v21 = (char *)v16 + v20;
    id v51 = (void (**)(char *, uint64_t))(v60 + 8);
    uint64_t v52 = (void (**)(char *, uint64_t))(v17 + 8);
    unsigned int v55 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v49 = *(void *)(v11 + 72);
    uint64_t v22 = (char *)&_swiftEmptyArrayStorage;
    uint64_t v23 = v58;
    uint64_t v57 = v10;
    uint64_t v47 = v11 + 16;
    uint64_t v48 = v6;
    id v50 = v9;
    while (1)
    {
      uint64_t v61 = v22;
      v53(v23, v21, v10);
      AuthorizationRecord.status.getter();
      uint64_t v60 = AuthorizationStatus.rawValue.getter();
      (*v52)(v9, v6);
      AuthorizationRecord.type.getter();
      uint64_t v24 = FamilyControlsMember.rawValue.getter();
      AuthorizationRecord.bundleIdentifier.getter();
      uint64_t v25 = v2;
      AuthorizationRecord.teamIdentifier.getter();
      unint64_t v26 = v56;
      AuthorizationRecord.recordIdentifier.getter();
      id v27 = objc_allocWithZone((Class)FOAuthorizationRecord);
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      id v31 = [v27 initWithBundleIdentifier:v28 teamIdentifier:v29 recordIdentifier:isa status:v60 type:v24];

      uint64_t v2 = v25;
      (*v51)(v26, v25);
      v62[0] = 0;
      id v32 = [v54 archivedDataWithRootObject:v31 requiringSecureCoding:1 error:v62];
      id v33 = v62[0];
      if (!v32) {
        break;
      }
      uint64_t v34 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v36 = v35;

      sub_100015DDC(v34, v36);
      id v37 = v61;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v37 = sub_100025510(0, *((void *)v37 + 2) + 1, 1, v37);
      }
      uint64_t v10 = v57;
      uint64_t v6 = v48;
      unint64_t v39 = *((void *)v37 + 2);
      unint64_t v38 = *((void *)v37 + 3);
      uint64_t v40 = v37;
      if (v39 >= v38 >> 1) {
        uint64_t v40 = sub_100025510((char *)(v38 > 1), v39 + 1, 1, v37);
      }
      *((void *)v40 + 2) = v39 + 1;
      uint64_t v22 = v40;
      uint64_t v41 = &v40[16 * v39];
      *((void *)v41 + 4) = v34;
      *((void *)v41 + 5) = v36;
      sub_10000BF6C(v34, v36);

      uint64_t v23 = v58;
      (*v55)(v58, v10);
      uint64_t v9 = v50;
      v21 += v49;
      if (!--v59)
      {
        swift_bridgeObjectRelease();
        uint64_t v43 = v46;
        goto LABEL_12;
      }
    }
    unint64_t v42 = v33;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _convertNSErrorToError(_:)();

    swift_willThrow();
    (*v55)(v58, v57);
    swift_errorRetain();
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(v46 + 16))(v46, 0, v15);

    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v43 = v18;
LABEL_12:
    Class v44 = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class, void))(v43 + 16))(v43, v44, 0);
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_100033E40(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, void))
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = FamilyControlsMember.init(rawValue:)();
  if (v11)
  {
    _Block_release(a3);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v12 = v10;
    uint64_t v13 = a2 + OBJC_IVAR____TtC19FamilyControlsAgent5Agent_manager;
    static Logger.authorization.getter();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Request internal authorization", v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    sub_1000456E4(v12);
    uint64_t v17 = (void **)sub_10000BE0C((void *)(v13 + 80), *(void *)(v13 + 104));
    sub_100035720(v12, 0xD000000000000014, 0x8000000100060BA0, *v17);
    if (qword_100073A38 != -1) {
      swift_once();
    }
    sub_100050678(1, 1);
    return a3[2](a3, 0);
  }
  return result;
}

uint64_t sub_1000340EC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000341D8(int a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void **)(v2 + 16);
  uint64_t v8 = v2 + v6;
  uint64_t v9 = (void (**)(uint64_t))(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  char v11 = v9[1];

  return sub_10002EF48(a1, a2, v7, v8, v10, v11);
}

uint64_t sub_10003428C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100034388(uint8_t *a1, uint8_t *a2, char a3)
{
  char v6 = a3 & 1;
  uint64_t v7 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)(v3 + 16);
  uint64_t v11 = *(void *)(v3 + v9);
  uint64_t v12 = v3 + v8;
  uint64_t v13 = v3 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = *(void (**)(uint64_t))v13;
  uint64_t v15 = *(void *)(v13 + 8);

  return sub_10002F548(a1, a2, v6, v10, v12, v11, v14, v15);
}

uint64_t sub_100034454(uint64_t a1, char a2)
{
  return sub_1000594E4(a1, a2 & 1, v2[2], v2[3], v2[4]);
}

uint64_t sub_100034464(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRelease();
  }
  else {
    return sub_10000BF6C(a1, a2);
  }
}

uint64_t sub_100034470(uint64_t a1, unint64_t a2, char a3)
{
  if (a3) {
    return swift_errorRetain();
  }
  else {
    return sub_100015DDC(a1, a2);
  }
}

uint64_t sub_10003447C(uint64_t a1)
{
  return a1;
}

void sub_1000344A8(uint64_t a1, uint64_t a2)
{
  sub_10002DA38(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1000344B0()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100034500(uint8_t *a1, uint8_t *a2, char a3)
{
  return sub_10002E270(a1, a2, a3 & 1, *(void *)(v3 + 16), *(NSObject **)(v3 + 24), *(void **)(v3 + 32), *(void *)(v3 + 40), *(void (**)(id, uint64_t))(v3 + 48), *(void *)(v3 + 56));
}

uint64_t sub_100034538(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100007370(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_10003459C(const char *a1)
{
  sub_10002B17C(a1, *(unsigned char *)(v1 + 16), *(void **)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t sub_1000345C4()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000345D4(int a1, void *a2)
{
  return sub_10002D608(a1, a2);
}

uint64_t sub_1000345DC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000345EC()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_100034618()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100034650()
{
  return sub_10002D4D4(*(void *)(v0 + 16));
}

uint64_t sub_100034658()
{
  uint64_t v1 = type metadata accessor for AuthorizationRecord();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000346FC(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for AuthorizationRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(NSObject **)(v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_10002CF78(a1, v4, v2 + v6, v7);
}

uint64_t sub_1000347A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000347F0()
{
  return _swift_deallocObject(v0, 33, 7);
}

void sub_100034828(void *a1)
{
  if (*(unsigned char *)(v1 + 16) == 1) {
    sub_10002B274(a1, *(unsigned char *)(v1 + 32));
  }
}

void sub_1000348C8(char a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  unint64_t v8 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34[5] = &_swiftEmptySetSingleton;
  unint64_t v9 = (SEL *)&unk_100072000;
  if ((a1 & 1) == 0)
  {
    id v10 = [a2 deviceActivity];
    id v11 = [v10 sharingAppleIDs];

    if (v11)
    {
      uint64_t v12 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      sub_10003593C(v12);
    }
  }
  type metadata accessor for FamilyCircle();
  swift_allocObject();
  FamilyCircle.init()();
  uint64_t v13 = dispatch thunk of FamilyCircle.guardians.getter();
  swift_release();
  uint64_t v15 = *(void *)(v13 + 16);
  if (v15)
  {
    NSString v28 = a2;
    v27[1] = v13;
    uint64_t v16 = v13 + 32;
    uint64_t v17 = (void (**)(char *, uint64_t))(v5 + 8);
    *(void *)&long long v14 = 136446210;
    long long v30 = v14;
    NSString v29 = (char *)&type metadata for Any + 8;
    do
    {
      sub_10000BFC4(v16, (uint64_t)v34);
      sub_10000BE0C(v34, v34[3]);
      Swift::Int v18 = dispatch thunk of FamilyMemberable.appleID.getter();
      if (v19)
      {
        sub_10003E338(&v33, v18, v19);
        swift_bridgeObjectRelease();
      }
      else
      {
        static Logger.agent.getter();
        sub_10000BFC4((uint64_t)v34, (uint64_t)&v33);
        unint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          *(_DWORD *)uint64_t v22 = v30;
          sub_10000BFC4((uint64_t)&v33, (uint64_t)v31);
          sub_100007370(&qword_100074248);
          uint64_t v23 = String.init<A>(describing:)();
          *(void *)(v22 + 4) = sub_1000067CC(v23, v24, &v32);
          swift_bridgeObjectRelease();
          _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v33);
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "Guardian does not have an Apple ID: %{public}s", (uint8_t *)v22, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v33);
        }

        (*v17)(v8, v4);
      }
      _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v34);
      v16 += 40;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    a2 = v28;
    unint64_t v9 = (SEL *)&unk_100072000;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  id v25 = [a2 v9[365]];
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v25 setSharingAppleIDs:isa];
}

void sub_100034C7C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4, unint64_t a5, void *a6)
{
  objc_super v78 = a4;
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v76 = *(void *)(v10 - 8);
  uint64_t v77 = v10;
  uint64_t v12 = __chkstk_darwin(v10, v11);
  long long v14 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v75 - v16;
  uint64_t v18 = FamilyControlsMember.rawValue.getter();
  if (v18 == FamilyControlsMember.rawValue.getter())
  {
    id v19 = [a6 allowedClient];
    id v20 = [v19 allowedClient];

    if (v20)
    {
      static Logger.agent.getter();
      swift_bridgeObjectRetain_n();
      os_log_type_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        v79[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v82 = sub_1000067CC(a2, a3, (uint64_t *)v79);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to enable family controls for %{public}s because a child authorization already exists.", v23, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(char *, uint64_t))(v76 + 8))(v14, v77);
      return;
    }
  }
  id v24 = [a6 deviceActivity];
  id v25 = [v24 allowedClients];

  if (v25)
  {
    sub_10001958C(0, (unint64_t *)&qword_100073C38);
    sub_100036328();
    unint64_t v26 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v26 = &_swiftEmptySetSingleton;
  }
  uint64_t v82 = (uint64_t)v26;
  id v27 = [a6 managedSettings];
  id v28 = [v27 allowedClients];

  unint64_t v75 = a5;
  if (v28)
  {
    sub_10001958C(0, (unint64_t *)&qword_100073C38);
    sub_100036328();
    NSString v29 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    NSString v29 = &_swiftEmptySetSingleton;
  }
  uint64_t v81 = v29;
  id v30 = objc_allocWithZone((Class)MOApplication);
  swift_bridgeObjectRetain();
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v32 = [v30 initWithBundleIdentifier:v31];

  swift_bridgeObjectRetain();
  char v33 = sub_10004DB28(v32, (uint64_t)v26);
  swift_bridgeObjectRelease();
  if (v33)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_10003EF34(v79, v32);

    id v34 = [a6 deviceActivity];
    sub_10001958C(0, (unint64_t *)&qword_100073C38);
    sub_100036328();
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v34 setAllowedClients:isa];

    uint64_t v36 = FamilyControlsMember.rawValue.getter();
    if (v36 == FamilyControlsMember.rawValue.getter()) {
      sub_1000348C8(0, a6);
    }
  }
  swift_bridgeObjectRetain();
  char v37 = sub_10004DB28(v32, (uint64_t)v29);
  swift_bridgeObjectRelease();
  if ((v37 & 1) == 0)
  {
    id v49 = v32;
    sub_10003EF34(v79, v49);

    id v50 = [a6 managedSettings];
    sub_10001958C(0, (unint64_t *)&qword_100073C38);
    sub_100036328();
    Class v51 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v50 setAllowedClients:v51];

    uint64_t v52 = FamilyControlsMember.rawValue.getter();
    if (v52 != FamilyControlsMember.rawValue.getter()) {
      goto LABEL_30;
    }
    id v53 = [a6 allowedClient];
    [v53 setAllowedClient:v49];

    id v54 = [a6 account];
    sub_10001958C(0, &qword_1000741A8);
    Class v55 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    [v54 setDenyiCloudLogout:v55];

    id v56 = [a6 allowedClient];
    Class v57 = NSNumber.init(BOOLeanLiteral:)(1).super.super.isa;
    [v56 setDenyMDMEnrollment:v57];

    id v58 = [a6 application];
    sub_100007370(&qword_1000742A0);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10005FED0;
    *(void *)(inited + 32) = v49;
    v79[0] = (id)inited;
    specialized Array._endMutation()();
    id v60 = v79[0];
    if ((unint64_t)v79[0] >> 62)
    {
      id v63 = v49;
      swift_bridgeObjectRetain();
      uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v64) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v61 = *(void *)(((unint64_t)v79[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
      id v62 = v49;
      if (!v61)
      {
LABEL_29:
        swift_bridgeObjectRelease();
        Class v65 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        [v58 setUnremovableApplications:v65];

        goto LABEL_30;
      }
    }
    sub_100036390((unint64_t)v60);
    goto LABEL_29;
  }
  swift_bridgeObjectRelease();
  if (v33)
  {
    static Logger.agent.getter();
    id v38 = v32;
    unint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc();
      unint64_t v42 = (void *)swift_slowAlloc();
      objc_super v78 = (void *)swift_slowAlloc();
      v79[0] = v78;
      *(_DWORD *)uint64_t v41 = 138543618;
      uint64_t v80 = (uint64_t)v38;
      id v43 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v42 = v38;

      *(_WORD *)(v41 + 12) = 2082;
      unint64_t v75 = v41 + 14;
      id v44 = v43;
      id v45 = [v44 description];
      uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v48 = v47;

      uint64_t v80 = sub_1000067CC(v46, v48, (uint64_t *)v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Ignoring attempt to enable family controls for %{public}@ because %{public}s is already enabled", (uint8_t *)v41, 0x16u);
      sub_100007370(&qword_100073EC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v76 + 8))(v17, v77);
    return;
  }
LABEL_30:
  id v66 = objc_msgSend(a6, "managedSettings", v75);
  uint64_t v67 = (uint64_t)v78;
  unint64_t v68 = v75;
  Class v69 = Data._bridgeToObjectiveC()().super.isa;
  [v66 setTokenEncodingKey:v69];

  id v70 = [a6 managedSettings];
  id v71 = [v70 tokenDecodingKeys];

  if (v71)
  {
    sub_100036E78();
    unint64_t v72 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    unint64_t v72 = &_swiftEmptySetSingleton;
  }
  uint64_t v80 = (uint64_t)v72;
  sub_100015DDC(v67, v68);
  sub_10003E4E8((uint64_t *)v79, v67, v68);
  sub_10000BF6C((uint64_t)v79[0], (unint64_t)v79[1]);
  id v73 = [a6 managedSettings];
  sub_100036E78();
  Class v74 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v73 setTokenDecodingKeys:v74];
}

void sub_100035720(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = objc_allocWithZone((Class)MOApplication);
  swift_bridgeObjectRetain();
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v7 = [v5 initWithBundleIdentifier:v6];

  id v8 = [a4 deviceActivity];
  id v9 = [v8 allowedClients];

  if (v9)
  {
    sub_10001958C(0, (unint64_t *)&qword_100073C38);
    sub_100036328();
    uint64_t v10 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v10 = &_swiftEmptySetSingleton;
  }
  v17[1] = v10;
  id v16 = v7;
  sub_10003EF34(v17, v16);

  id v11 = [a4 deviceActivity];
  sub_10001958C(0, (unint64_t *)&qword_100073C38);
  sub_100036328();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v11 setAllowedClients:isa];

  uint64_t v13 = FamilyControlsMember.rawValue.getter();
  if (v13 == FamilyControlsMember.rawValue.getter())
  {
    sub_1000348C8(0, a4);
    long long v14 = v16;
  }
  else
  {
    id v15 = [a4 deviceActivity];
    [v15 setSharingAppleIDs:0];

    long long v14 = v15;
  }
}

uint64_t sub_10003593C(uint64_t result)
{
  uint64_t v1 = result;
  int64_t v2 = 0;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v9 = v8 | (v2 << 6);
      goto LABEL_5;
    }
    int64_t v13 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_27:
      __break(1u);
      return result;
    }
    if (v13 >= v7) {
      goto LABEL_23;
    }
    unint64_t v14 = *(void *)(v3 + 8 * v13);
    ++v2;
    if (!v14)
    {
      int64_t v2 = v13 + 1;
      if (v13 + 1 >= v7) {
        goto LABEL_23;
      }
      unint64_t v14 = *(void *)(v3 + 8 * v2);
      if (!v14)
      {
        int64_t v2 = v13 + 2;
        if (v13 + 2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        if (!v14)
        {
          int64_t v2 = v13 + 3;
          if (v13 + 3 >= v7) {
            goto LABEL_23;
          }
          unint64_t v14 = *(void *)(v3 + 8 * v2);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v6 = (v14 - 1) & v14;
    unint64_t v9 = __clz(__rbit64(v14)) + (v2 << 6);
LABEL_5:
    uint64_t v10 = (Swift::Int *)(*(void *)(v1 + 48) + 16 * v9);
    Swift::Int v11 = *v10;
    Swift::Int v12 = v10[1];
    swift_bridgeObjectRetain();
    sub_10003E338(&v16, v11, v12);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v15 = v13 + 4;
  if (v15 < v7)
  {
    unint64_t v14 = *(void *)(v3 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v2 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_27;
        }
        if (v2 >= v7) {
          goto LABEL_23;
        }
        unint64_t v14 = *(void *)(v3 + 8 * v2);
        ++v15;
        if (v14) {
          goto LABEL_22;
        }
      }
    }
    int64_t v2 = v15;
    goto LABEL_22;
  }
LABEL_23:

  return swift_release();
}

uint64_t sub_100035ABC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  __chkstk_darwin(v4, v5);
  id v56 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a3 allowedClient];
  id v57 = [v7 allowedClient];

  id v8 = objc_allocWithZone((Class)MOApplication);
  swift_bridgeObjectRetain();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v10 = [v8 initWithBundleIdentifier:v9];

  id v11 = [a3 deviceActivity];
  id v12 = [v11 allowedClients];

  if (v12)
  {
    sub_10001958C(0, (unint64_t *)&qword_100073C38);
    sub_100036328();
    int64_t v13 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    int64_t v13 = &_swiftEmptySetSingleton;
  }
  id v14 = [a3 managedSettings];
  id v15 = [v14 allowedClients];

  if (v15)
  {
    sub_10001958C(0, (unint64_t *)&qword_100073C38);
    sub_100036328();
    Swift::Int v16 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    Swift::Int v16 = &_swiftEmptySetSingleton;
  }
  id v17 = v10;
  Swift::Int v18 = sub_100036B80((uint64_t)v13, v17);

  id v19 = [a3 deviceActivity];
  sub_10001958C(0, (unint64_t *)&qword_100073C38);
  sub_100036328();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  [v19 setAllowedClients:isa];

  id v21 = v17;
  Swift::Int v22 = sub_100036B80((uint64_t)v16, v21);

  swift_retain();
  id v23 = [a3 managedSettings];
  Class v24 = Set._bridgeToObjectiveC()().super.isa;
  [v23 setAllowedClients:v24];

  if ((v18 & 0xC000000000000001) != 0) {
    uint64_t v25 = __CocoaSet.count.getter();
  }
  else {
    uint64_t v25 = *(void *)(v18 + 16);
  }
  swift_release();
  if (!v25)
  {
    if ((v22 & 0xC000000000000001) != 0) {
      uint64_t v27 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v27 = *(void *)(v22 + 16);
    }
    swift_release();
    if (v27)
    {
      unint64_t v26 = v57;
      if (v57) {
        goto LABEL_18;
      }
    }
    else
    {
      id v49 = [a3 managedSettings];
      [v49 setTokenEncodingKey:0];

      id v50 = [a3 managedSettings];
      [v50 setTokenDecodingKeys:0];

      unint64_t v26 = v57;
      if (v57) {
        goto LABEL_18;
      }
    }
LABEL_23:

    goto LABEL_24;
  }
  swift_release();
  unint64_t v26 = v57;
  if (!v57) {
    goto LABEL_23;
  }
LABEL_18:
  id v28 = v21;
  id v29 = v26;
  char v30 = static NSObject.== infix(_:_:)();

  if ((v30 & 1) == 0)
  {
    unint64_t v35 = v56;
    static Logger.agent.getter();
    id v36 = v28;
    char v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      os_log_t v53 = v37;
      os_log_type_t v40 = (void *)v52;
      id v57 = (id)swift_slowAlloc();
      uint64_t v58 = (uint64_t)v36;
      v59[0] = v57;
      *(_DWORD *)uint64_t v39 = 138543618;
      id v41 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v40 = v36;

      *(_WORD *)(v39 + 12) = 2082;
      id v42 = v41;
      id v43 = [v42 description];
      uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v46 = v45;

      uint64_t v58 = sub_1000067CC(v44, v46, (uint64_t *)v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      os_log_t v47 = v53;
      _os_log_impl((void *)&_mh_execute_header, v53, v38, "Ignoring attempt to disable family controls for %{public}@ because %{public}s is enabled", (uint8_t *)v39, 0x16u);
      sub_100007370(&qword_100073EC0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v56, v55);
    }
    else
    {

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v35, v55);
    }
  }
  id v31 = [a3 allowedClient];
  [v31 setAllowedClient:0];

  id v32 = [a3 account];
  [v32 setDenyiCloudLogout:0];

  id v33 = [a3 allowedClient];
  [v33 setDenyMDMEnrollment:0];

  id v34 = [a3 application];
  [v34 setUnremovableApplications:0];

LABEL_24:

  return swift_release();
}

uint64_t Application.description.getter()
{
  uint64_t v0 = type metadata accessor for Application();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = Application.bundleIdentifier.getter();
  if (!v6)
  {
    static Application.none.getter();
    char v7 = static Application.== infix(_:_:)();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    if (v7) {
      return 1701736302;
    }
    else {
      return 0xD000000000000016;
    }
  }
  return result;
}

unint64_t sub_100036328()
{
  unint64_t result = qword_100073C40;
  if (!qword_100073C40)
  {
    sub_10001958C(255, (unint64_t *)&qword_100073C38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100073C40);
  }
  return result;
}

void sub_100036390(unint64_t a1)
{
  unint64_t v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      sub_100007370(&qword_100073C48);
      uint64_t v3 = (void *)static _SetStorage.allocate(capacity:)();
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
      if (!v2) {
        goto LABEL_4;
      }
LABEL_8:
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v5) {
        return;
      }
      goto LABEL_9;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8;
  if (v2) {
    goto LABEL_8;
  }
LABEL_4:
  uint64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    return;
  }
LABEL_9:
  char v7 = (char *)(v3 + 7);
  uint64_t v43 = v5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = 0;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        BOOL v10 = __OFADD__(v8++, 1);
        if (v10)
        {
          __break(1u);
          goto LABEL_36;
        }
        uint64_t v11 = v9;
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v3[5]);
        uint64_t v13 = -1 << *((unsigned char *)v3 + 32);
        unint64_t v14 = v12 & ~v13;
        unint64_t v15 = v14 >> 6;
        uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
        uint64_t v17 = 1 << v14;
        if (((1 << v14) & v16) != 0) {
          break;
        }
LABEL_20:
        *(void *)&v7[8 * v15] = v17 | v16;
        *(void *)(v3[6] + 8 * v14) = v11;
        uint64_t v23 = v3[2];
        BOOL v10 = __OFADD__(v23, 1);
        uint64_t v24 = v23 + 1;
        if (v10) {
          goto LABEL_37;
        }
        v3[2] = v24;
        if (v8 == v5) {
          return;
        }
      }
      sub_10001958C(0, (unint64_t *)&qword_100073C38);
      id v18 = *(id *)(v3[6] + 8 * v14);
      char v19 = static NSObject.== infix(_:_:)();

      if ((v19 & 1) == 0)
      {
        uint64_t v20 = ~v13;
        while (1)
        {
          unint64_t v14 = (v14 + 1) & v20;
          unint64_t v15 = v14 >> 6;
          uint64_t v16 = *(void *)&v7[8 * (v14 >> 6)];
          uint64_t v17 = 1 << v14;
          if ((v16 & (1 << v14)) == 0) {
            break;
          }
          id v21 = *(id *)(v3[6] + 8 * v14);
          char v22 = static NSObject.== infix(_:_:)();

          if (v22) {
            goto LABEL_11;
          }
        }
        uint64_t v5 = v43;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      uint64_t v5 = v43;
      if (v8 == v43) {
        return;
      }
    }
  }
  uint64_t v25 = 0;
  unint64_t v41 = a1 + 32;
  uint64_t v42 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v25 != v42)
  {
    Swift::Int v26 = v3[5];
    id v27 = *(id *)(v41 + 8 * v25);
    Swift::Int v28 = NSObject._rawHashValue(seed:)(v26);
    uint64_t v29 = -1 << *((unsigned char *)v3 + 32);
    unint64_t v30 = v28 & ~v29;
    unint64_t v31 = v30 >> 6;
    uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
    uint64_t v33 = 1 << v30;
    if (((1 << v30) & v32) != 0)
    {
      sub_10001958C(0, (unint64_t *)&qword_100073C38);
      id v34 = *(id *)(v3[6] + 8 * v30);
      char v35 = static NSObject.== infix(_:_:)();

      if (v35)
      {
LABEL_24:

        goto LABEL_25;
      }
      uint64_t v36 = ~v29;
      while (1)
      {
        unint64_t v30 = (v30 + 1) & v36;
        unint64_t v31 = v30 >> 6;
        uint64_t v32 = *(void *)&v7[8 * (v30 >> 6)];
        uint64_t v33 = 1 << v30;
        if ((v32 & (1 << v30)) == 0) {
          break;
        }
        id v37 = *(id *)(v3[6] + 8 * v30);
        char v38 = static NSObject.== infix(_:_:)();

        if (v38) {
          goto LABEL_24;
        }
      }
    }
    *(void *)&v7[8 * v31] = v33 | v32;
    *(void *)(v3[6] + 8 * v30) = v27;
    uint64_t v39 = v3[2];
    BOOL v10 = __OFADD__(v39, 1);
    uint64_t v40 = v39 + 1;
    if (v10) {
      goto LABEL_38;
    }
    v3[2] = v40;
LABEL_25:
    if (++v25 == v43) {
      return;
    }
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

void sub_1000366EC(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v29 = a2;
  uint64_t v31 = 0;
  int64_t v4 = 0;
  uint64_t v32 = a3 + 56;
  uint64_t v5 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a3 + 56);
  int64_t v33 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v8 = (SEL *)&unk_100072000;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      int64_t v36 = v4;
      unint64_t v10 = v9 | (v4 << 6);
      goto LABEL_23;
    }
    int64_t v11 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_42;
    }
    if (v11 >= v33) {
      goto LABEL_40;
    }
    unint64_t v12 = *(void *)(v32 + 8 * v11);
    int64_t v13 = v4 + 1;
    if (!v12)
    {
      int64_t v13 = v4 + 2;
      if (v4 + 2 >= v33) {
        goto LABEL_40;
      }
      unint64_t v12 = *(void *)(v32 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v4 + 3;
        if (v4 + 3 >= v33) {
          goto LABEL_40;
        }
        unint64_t v12 = *(void *)(v32 + 8 * v13);
        if (!v12) {
          break;
        }
      }
    }
LABEL_22:
    unint64_t v7 = (v12 - 1) & v12;
    int64_t v36 = v13;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    id v15 = *(id *)(*(void *)(a3 + 48) + 8 * v10);
    id v16 = objc_msgSend(v15, v8[369], v29);
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;
    }
    else
    {
      uint64_t v18 = 0;
      uint64_t v20 = 0;
    }
    id v21 = v8;
    id v22 = [a4 v8[369]];
    if (!v22)
    {
      if (!v20) {
        goto LABEL_5;
      }
      goto LABEL_36;
    }
    uint64_t v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v26 = v25;

    if (!v20)
    {
      if (!v26)
      {
LABEL_5:

        goto LABEL_6;
      }
      goto LABEL_36;
    }
    if (v26)
    {
      if (v18 == v24 && v20 == v26)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_6:
        uint64_t v8 = v21;
        int64_t v4 = v36;
      }
      else
      {
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v8 = v21;
        int64_t v4 = v36;
        if ((v27 & 1) == 0) {
          goto LABEL_37;
        }
      }
    }
    else
    {
LABEL_36:

      uint64_t v8 = v21;
      int64_t v4 = v36;
      swift_bridgeObjectRelease();
LABEL_37:
      *(unint64_t *)((char *)a1 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
      if (__OFADD__(v31++, 1))
      {
        __break(1u);
LABEL_40:
        swift_retain();
        sub_10000C0AC(a1, v29, v31, a3);
        return;
      }
    }
  }
  uint64_t v14 = v4 + 4;
  if (v4 + 4 >= v33) {
    goto LABEL_40;
  }
  unint64_t v12 = *(void *)(v32 + 8 * v14);
  if (v12)
  {
    int64_t v13 = v4 + 4;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v13 >= v33) {
      goto LABEL_40;
    }
    unint64_t v12 = *(void *)(v32 + 8 * v13);
    ++v14;
    if (v12) {
      goto LABEL_22;
    }
  }
LABEL_42:
  __break(1u);
}

uint64_t sub_1000369CC(uint64_t a1, void *a2)
{
  char v4 = *(unsigned char *)(a1 + 32);
  unsigned int v5 = v4 & 0x3F;
  unint64_t v6 = (unint64_t)((1 << v4) + 63) >> 6;
  uint64_t isStackAllocationSafe = a2;
  unint64_t v9 = (void *)isStackAllocationSafe;
  if (v5 <= 0xD || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, v8);
    unint64_t v10 = (char *)&v18 - ((8 * v6 + 15) & 0x3FFFFFFFFFFFFFF0);
    bzero(v10, 8 * v6);
    id v11 = v9;
    sub_1000366EC((unint64_t *)v10, v6, a1, v11);
    uint64_t v13 = v12;
    swift_release();

    if (v2) {
      swift_willThrow();
    }
  }
  else
  {
    uint64_t v14 = (void *)swift_slowAlloc();
    bzero(v14, 8 * v6);
    id v15 = v9;
    sub_1000366EC((unint64_t *)v14, v6, a1, v15);
    uint64_t v13 = v16;
    swift_release();

    swift_slowDealloc();
  }
  return v13;
}

Swift::Int sub_100036B80(uint64_t a1, void *a2)
{
  if ((a1 & 0xC000000000000001) == 0) {
    return sub_1000369CC(a1, a2);
  }
  uint64_t v3 = &_swiftEmptySetSingleton;
  id v26 = a2;
  __CocoaSet.makeIterator()();
  if (!__CocoaSet.Iterator.next()()) {
    goto LABEL_36;
  }
  uint64_t v25 = v2;
  sub_10001958C(0, (unint64_t *)&qword_100073C38);
  do
  {
    swift_dynamicCast();
    id v4 = [v27 bundleIdentifier];
    if (v4)
    {
      unsigned int v5 = v4;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v6 = 0;
      uint64_t v8 = 0;
    }
    id v9 = objc_msgSend(v26, "bundleIdentifier", v25);
    if (!v9)
    {
      if (!v8) {
        goto LABEL_5;
      }
LABEL_20:
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    unint64_t v10 = v9;
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = v12;

    if (!v8)
    {
      if (!v13) {
        goto LABEL_5;
      }
      goto LABEL_20;
    }
    if (!v13) {
      goto LABEL_20;
    }
    if (v6 == v11 && v8 == v13)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:

      continue;
    }
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v14) {
      goto LABEL_5;
    }
LABEL_21:
    if (*((void *)&_swiftEmptySetSingleton + 3) <= *((void *)&_swiftEmptySetSingleton + 2)) {
      sub_10003F6AC();
    }
    Swift::Int result = NSObject._rawHashValue(seed:)(*((void *)&_swiftEmptySetSingleton + 5));
    uint64_t v16 = (char *)&_swiftEmptySetSingleton + 56;
    uint64_t v17 = -1 << *((unsigned char *)&_swiftEmptySetSingleton + 32);
    unint64_t v18 = result & ~v17;
    unint64_t v19 = v18 >> 6;
    if (((-1 << v18) & ~*((void *)&_swiftEmptySetSingleton + (v18 >> 6) + 7)) != 0)
    {
      unint64_t v20 = __clz(__rbit64((-1 << v18) & ~*((void *)&_swiftEmptySetSingleton + (v18 >> 6) + 7))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v21 = 0;
      unint64_t v22 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v22 && (v21 & 1) != 0)
        {
          __break(1u);
          return result;
        }
        BOOL v23 = v19 == v22;
        if (v19 == v22) {
          unint64_t v19 = 0;
        }
        v21 |= v23;
        uint64_t v24 = *(void *)&v16[8 * v19];
      }
      while (v24 == -1);
      unint64_t v20 = __clz(__rbit64(~v24)) + (v19 << 6);
    }
    *(void *)&v16[(v20 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v20;
    *(void *)(*((void *)&_swiftEmptySetSingleton + 6) + 8 * v20) = v27;
    ++*((void *)&_swiftEmptySetSingleton + 2);
  }
  while (__CocoaSet.Iterator.next()());
  uint64_t v3 = &_swiftEmptySetSingleton;
LABEL_36:

  swift_release();
  return (Swift::Int)v3;
}

unint64_t sub_100036E78()
{
  unint64_t result = qword_100074410;
  if (!qword_100074410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100074410);
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthorizationManagedSettings()
{
  return &type metadata for AuthorizationManagedSettings;
}

uint64_t sub_100036EDC(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_100036F20(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v30 = type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
  uint64_t v7 = *(void *)(v30 - 8);
  uint64_t v9 = __chkstk_darwin(v30, v8);
  uint64_t v29 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v9, v11);
  char v14 = (char *)v22 - v13;
  id v15 = &_swiftEmptyArrayStorage;
  uint64_t v31 = &_swiftEmptyArrayStorage;
  uint64_t v28 = *(void *)(a3 + 16);
  if (v28)
  {
    unint64_t v16 = 0;
    uint64_t v23 = a3;
    uint64_t v24 = (void (**)(char *, uint64_t))(v7 + 8);
    id v26 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v27 = v7 + 16;
    v22[0] = a1;
    v22[1] = a2;
    while (v16 < *(void *)(a3 + 16))
    {
      unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      id v15 = *(void **)(v7 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v14, a3 + v17 + (void)v15 * v16, v30);
      char v18 = a1(v14);
      if (v3)
      {
        (*v24)(v14, v30);
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v15;
      }
      if (v18)
      {
        uint64_t v25 = *v26;
        v25(v29, v14, v30);
        unint64_t v19 = v31;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_10003DDA0(0, v19[2] + 1, 1);
          unint64_t v19 = v31;
        }
        unint64_t v21 = v19[2];
        unint64_t v20 = v19[3];
        if (v21 >= v20 >> 1)
        {
          sub_10003DDA0(v20 > 1, v21 + 1, 1);
          unint64_t v19 = v31;
        }
        v19[2] = v21 + 1;
        uint64_t result = ((uint64_t (*)(char *, char *, uint64_t))v25)((char *)v19 + v17 + v21 * (void)v15, v29, v30);
        uint64_t v31 = v19;
        a3 = v23;
        a1 = (uint64_t (*)(char *))v22[0];
      }
      else
      {
        uint64_t result = ((uint64_t (*)(char *, uint64_t))*v24)(v14, v30);
      }
      if (v28 == ++v16)
      {
        id v15 = v31;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v15;
  }
  return result;
}

NSString sub_1000371C4()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100074C20 = (uint64_t)result;
  return result;
}

NSString sub_1000371FC()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100074C28 = (uint64_t)result;
  return result;
}

NSString sub_100037234()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100074C30 = (uint64_t)result;
  return result;
}

uint64_t sub_10003731C()
{
  return _s10DataSourceCMa();
}

uint64_t _s10DataSourceCMa()
{
  uint64_t result = qword_100074458;
  if (!qword_100074458) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100037370()
{
  uint64_t result = type metadata accessor for Locations();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100037414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[4] = a3;
  v4[5] = v3;
  v4[2] = a1;
  v4[3] = a2;
  uint64_t v5 = type metadata accessor for CKSyncEngine.SendChangesOptions();
  v4[6] = v5;
  v4[7] = *(void *)(v5 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for CKSyncEngine.SendChangesOptions.Scope();
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  return _swift_task_switch(sub_100037534, 0, 0);
}

uint64_t sub_100037534()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[8];
  uint64_t v11 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[7];
  uint64_t v6 = v0[5];
  CKSyncEngine.SendChangesContext.options.getter();
  CKSyncEngine.SendChangesOptions.scope.getter();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  CKSyncEngine.state.getter();
  uint64_t v7 = CKSyncEngine.State.pendingRecordZoneChanges.getter();
  swift_release();
  uint64_t v8 = swift_task_alloc();
  *(void *)(v8 + 16) = v1;
  sub_100036F20((uint64_t (*)(char *))sub_10003DA5C, v8, v7);
  swift_task_dealloc();
  *(void *)(swift_task_alloc() + 16) = v6;
  CKSyncEngine.RecordZoneChangeBatch.init(pendingChanges:synchronousRecordProvider:)();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

Class sub_1000376B0(void *a1)
{
  uint64_t v2 = type metadata accessor for UsageItemRecord();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unint64_t v68 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007370(&qword_1000740D8);
  __chkstk_darwin(v6 - 8, v7);
  id v70 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  char v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v12, v15);
  char v18 = (char *)&v63 - v17;
  __chkstk_darwin(v16, v19);
  unint64_t v21 = (char *)&v63 - v20;
  static Logger.syncEngine.getter();
  id v22 = a1;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    Class v69 = v18;
    uint64_t v25 = swift_slowAlloc();
    id v71 = v14;
    id v26 = (uint8_t *)v25;
    uint64_t v64 = swift_slowAlloc();
    v74[0] = v64;
    uint64_t v72 = v9;
    *(_DWORD *)id v26 = 136446210;
    id v63 = v26 + 4;
    id v27 = v22;
    uint64_t v67 = v2;
    id v28 = v27;
    id v29 = [v27 description];
    id v65 = v22;
    uint64_t v30 = v10;
    id v31 = v29;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v3;
    unint64_t v34 = v33;

    uint64_t v10 = v30;
    uint64_t v75 = sub_1000067CC(v32, v34, v74);
    uint64_t v9 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v3 = v66;
    uint64_t v2 = v67;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Saving record: %{public}s", v26, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    char v14 = v71;
    swift_slowDealloc();

    char v35 = *(void (**)(char *, uint64_t))(v30 + 8);
    v35(v21, v9);
    int64_t v36 = v65;
  }
  else
  {

    int64_t v36 = v22;
    char v35 = *(void (**)(char *, uint64_t))(v10 + 8);
    v35(v21, v9);
  }
  if (qword_1000739E0 != -1) {
    swift_once();
  }
  id v37 = (void *)qword_100074C00;
  sub_10001958C(0, &qword_1000740E0);
  id v38 = v37;
  char v39 = static NSObject.== infix(_:_:)();

  if ((v39 & 1) == 0)
  {
    if (*(unsigned char *)(v73 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine10DataSource_collectActivity) == 1)
    {
      type metadata accessor for UsageStore();
      static UsageStore.shared.getter();
      uint64_t v42 = v70;
      UsageStore.subscript.getter((uint64_t)v36, v70);
      swift_release();
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v42, 1, v2))
      {
        uint64_t v58 = v68;
        (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v68, v42, v2);
        sub_100015758((uint64_t)v42, &qword_1000740D8);
        Class v40 = sub_10001B484();
        (*(void (**)(char *, uint64_t))(v3 + 8))(v58, v2);
        return v40;
      }
      sub_100015758((uint64_t)v42, &qword_1000740D8);
    }
    else
    {
      static Logger.syncEngine.getter();
      id v43 = v36;
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v73 = v10;
        uint64_t v46 = swift_slowAlloc();
        uint64_t v47 = swift_slowAlloc();
        uint64_t v72 = v9;
        v74[0] = v47;
        id v71 = v14;
        *(_DWORD *)uint64_t v46 = 136446210;
        id v70 = (char *)(v46 + 4);
        id v48 = v43;
        id v49 = [v48 description];
        uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v52 = v51;

        uint64_t v75 = sub_1000067CC(v50, v52, v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Not saving record: %{public}s because we haven't started collecting activity", (uint8_t *)v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v53 = v72;
        uint64_t v54 = v71;
      }
      else
      {

        uint64_t v54 = v14;
        uint64_t v53 = v9;
      }
      v35(v54, v53);
    }
    return 0;
  }
  Class v40 = *(Class *)(v73
                 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine10DataSource_cachedAuthorizationKeyRecord);
  if (v40)
  {
    unint64_t v41 = v40;
  }
  else
  {
    uint64_t v55 = v73 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine10DataSource_locations;
    uint64_t v56 = type metadata accessor for Locations();
    uint64_t v74[3] = v56;
    v74[4] = (uint64_t)&protocol witness table for Locations;
    id v57 = sub_100025234(v74);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16))(v57, v55, v56);
    uint64_t v59 = sub_10004B338(v74);
    unint64_t v61 = v60;
    sub_10001958C(0, &qword_1000740E8);
    return sub_10001C8FC(v59, v61);
  }
  return v40;
}

uint64_t sub_100037F64(uint64_t a1, uint64_t a2)
{
  v3[4] = a2;
  v3[5] = v2;
  v3[3] = a1;
  uint64_t RecordZoneChanges = type metadata accessor for CKSyncEngine.Event.DidFetchRecordZoneChanges();
  v3[6] = RecordZoneChanges;
  v3[7] = *(void *)(RecordZoneChanges - 8);
  v3[8] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for CKSyncEngine.Event.WillFetchRecordZoneChanges();
  v3[9] = v5;
  v3[10] = *(void *)(v5 - 8);
  v3[11] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for CKDatabase.DatabaseChange.Deletion();
  v3[12] = v6;
  v3[13] = *(void *)(v6 - 8);
  v3[14] = swift_task_alloc();
  sub_100007370(&qword_1000744A0);
  v3[15] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CKSyncEngine.Event.FetchedDatabaseChanges();
  v3[16] = v7;
  v3[17] = *(void *)(v7 - 8);
  v3[18] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges();
  v3[19] = v8;
  v3[20] = *(void *)(v8 - 8);
  v3[21] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for CKSyncEngine.State.Serialization();
  v3[22] = v9;
  v3[23] = *(void *)(v9 - 8);
  v3[24] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for CKSyncEngine.Event.StateUpdate();
  v3[25] = v10;
  v3[26] = *(void *)(v10 - 8);
  v3[27] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for CKDatabase.RecordZoneChange.Deletion();
  v3[28] = v11;
  v3[29] = *(void *)(v11 - 8);
  v3[30] = swift_task_alloc();
  sub_100007370(&qword_1000744A8);
  v3[31] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for CKDatabase.RecordZoneChange.Modification();
  v3[32] = v12;
  v3[33] = *(void *)(v12 - 8);
  v3[34] = swift_task_alloc();
  sub_100007370(&qword_1000744B0);
  v3[35] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for CKSyncEngine.Event.FetchedRecordZoneChanges();
  v3[36] = v13;
  v3[37] = *(void *)(v13 - 8);
  v3[38] = swift_task_alloc();
  uint64_t v14 = type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave();
  v3[39] = v14;
  v3[40] = *(void *)(v14 - 8);
  v3[41] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for Logger();
  v3[42] = v15;
  v3[43] = *(void *)(v15 - 8);
  v3[44] = swift_task_alloc();
  v3[45] = swift_task_alloc();
  v3[46] = swift_task_alloc();
  v3[47] = swift_task_alloc();
  uint64_t v16 = type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges();
  v3[48] = v16;
  v3[49] = *(void *)(v16 - 8);
  v3[50] = swift_task_alloc();
  uint64_t v17 = type metadata accessor for CKSyncEngine.Event();
  v3[51] = v17;
  v3[52] = *(void *)(v17 - 8);
  v3[53] = swift_task_alloc();
  v3[54] = swift_task_alloc();
  return _swift_task_switch(sub_10003859C, 0, 0);
}

uint64_t sub_10003859C()
{
  v225 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 3;
  uint64_t v3 = v0[54];
  uint64_t v4 = v0[51];
  uint64_t v5 = v0[52];
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v6(v3, v0[3], v4);
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 88))(v3, v4);
  uint64_t v8 = v0[51];
  long long v223 = v0;
  if (v7 == enum case for CKSyncEngine.Event.stateUpdate(_:))
  {
    uint64_t v9 = v0[54];
    uint64_t v10 = v0[52];
    uint64_t v12 = v0[26];
    uint64_t v11 = v1[27];
    uint64_t v13 = v1[25];
    uint64_t v14 = v1[24];
    uint64_t v15 = v223[23];
    uint64_t v16 = v223[22];
    uint64_t v17 = v223[4];
    (*(void (**)(uint64_t, uint64_t))(v10 + 96))(v9, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v11, v9, v13);
    CKSyncEngine.Event.StateUpdate.stateSerialization.getter();
    sub_10003B364(v14, v17);
    uint64_t v18 = v14;
    uint64_t v1 = v223;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v16);
LABEL_3:
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
LABEL_91:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v174 = (uint64_t (*)(void))v1[1];
    return v174();
  }
  if (v7 == enum case for CKSyncEngine.Event.fetchedDatabaseChanges(_:))
  {
    uint64_t v19 = v0[54];
    uint64_t v21 = v0[17];
    uint64_t v20 = v1[18];
    uint64_t v22 = v1[16];
    (*(void (**)(void, uint64_t))(v1[52] + 96))(v1[54], v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32))(v20, v19, v22);
    uint64_t v23 = CKSyncEngine.Event.FetchedDatabaseChanges.deletions.getter();
    uint64_t v24 = *(void *)(v23 + 16);
    uint64_t v25 = v1[13];
    if (v24)
    {
      id v27 = *(void (**)(uint64_t, unint64_t, uint64_t))(v25 + 16);
      uint64_t v26 = v25 + 16;
      unint64_t v28 = v23 + ((*(unsigned __int8 *)(v26 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 64));
      uint64_t v212 = *(void *)(v26 + 56);
      type = v27;
      id v29 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 40);
      uint64_t v30 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 32);
      uint64_t v207 = (void (**)(uint64_t, void, uint64_t))(v26 + 16);
      id v31 = (void (**)(uint64_t, uint64_t))(v26 - 8);
      while (1)
      {
        uint64_t v32 = v1[15];
        uint64_t v33 = v1[12];
        uint64_t v34 = v26;
        type(v32, v28, v33);
        char v35 = *v29;
        (*v29)(v32, 0, 1, v33);
        if ((*v30)(v32, 1, v33) == 1) {
          break;
        }
        uint64_t v36 = v1[14];
        uint64_t v37 = v1[12];
        (*v207)(v36, v1[15], v37);
        id v38 = (void *)CKDatabase.DatabaseChange.Deletion.zoneID.getter();
        sub_100042648(v38);

        uint64_t v1 = v223;
        (*v31)(v36, v37);
        v28 += v212;
        --v24;
        uint64_t v26 = v34;
        if (!v24) {
          goto LABEL_26;
        }
      }
    }
    else
    {
      char v35 = *(void (**)(void, uint64_t, uint64_t, void))(v25 + 56);
LABEL_26:
      v35(v1[15], 1, 1, v1[12]);
    }
    uint64_t v70 = v1[17];
    uint64_t v69 = v1[18];
    uint64_t v71 = v1[16];
    goto LABEL_89;
  }
  if (v7 == enum case for CKSyncEngine.Event.fetchedRecordZoneChanges(_:))
  {
    uint64_t v39 = v0[54];
    uint64_t v41 = v0[37];
    uint64_t v40 = v1[38];
    uint64_t v42 = v1[36];
    (*(void (**)(void, uint64_t))(v1[52] + 96))(v1[54], v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v40, v39, v42);
    uint64_t v43 = CKSyncEngine.Event.FetchedRecordZoneChanges.modifications.getter();
    uint64_t v44 = *(void *)(v43 + 16);
    uint64_t v45 = v1[33];
    if (v44)
    {
      uint64_t v47 = *(void (**)(uint64_t, unint64_t, uint64_t))(v45 + 16);
      uint64_t v46 = v45 + 16;
      unint64_t v48 = v43 + ((*(unsigned __int8 *)(v46 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 64));
      uint64_t v203 = *(void *)(v46 + 56);
      long long v213 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 40);
      typea = v47;
      while (1)
      {
        uint64_t v49 = v1[35];
        uint64_t v50 = v1[32];
        typea(v49, v48, v50);
        unint64_t v51 = *v213;
        (*v213)(v49, 0, 1, v50);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v49, 1, v50) == 1) {
          break;
        }
        uint64_t v53 = v1[34];
        uint64_t v52 = v1[35];
        uint64_t v54 = v223[32];
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v53, v52, v54);
        uint64_t v55 = (void *)CKDatabase.RecordZoneChange.Modification.record.getter();
        sub_10003A18C(v55);

        uint64_t v56 = v54;
        uint64_t v1 = v223;
        (*(void (**)(uint64_t, uint64_t))(v46 - 8))(v53, v56);
        v48 += v203;
        if (!--v44) {
          goto LABEL_80;
        }
      }
    }
    else
    {
      unint64_t v51 = *(void (**)(void, uint64_t, uint64_t, void))(v45 + 56);
LABEL_80:
      v51(v1[35], 1, 1, v1[32]);
    }
    swift_bridgeObjectRelease();
    uint64_t v161 = CKSyncEngine.Event.FetchedRecordZoneChanges.deletions.getter();
    uint64_t v162 = *(void *)(v161 + 16);
    uint64_t v163 = v1[29];
    if (v162)
    {
      v165 = *(void (**)(uint64_t, unint64_t, uint64_t))(v163 + 16);
      uint64_t v164 = v163 + 16;
      unint64_t v166 = v161 + ((*(unsigned __int8 *)(v164 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v164 + 64));
      id v167 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v164 + 40);
      typef = v165;
      uint64_t v211 = *(void *)(v164 + 56);
      while (1)
      {
        uint64_t v168 = v1[31];
        uint64_t v169 = v1[28];
        typef(v168, v166, v169);
        uint64_t v170 = *v167;
        (*v167)(v168, 0, 1, v169);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v164 + 32))(v168, 1, v169) == 1) {
          break;
        }
        uint64_t v171 = v1[30];
        uint64_t v172 = v1[28];
        (*(void (**)(uint64_t, void, uint64_t))(v164 + 16))(v171, v1[31], v172);
        char v173 = (void *)CKDatabase.RecordZoneChange.Deletion.recordID.getter();
        CKDatabase.RecordZoneChange.Deletion.recordType.getter();
        sub_100042060(v173);
        swift_bridgeObjectRelease();

        uint64_t v1 = v223;
        (*(void (**)(uint64_t, uint64_t))(v164 - 8))(v171, v172);
        v166 += v211;
        if (!--v162) {
          goto LABEL_87;
        }
      }
    }
    else
    {
      uint64_t v170 = *(void (**)(void, uint64_t, uint64_t, void))(v163 + 56);
LABEL_87:
      v170(v1[31], 1, 1, v1[28]);
    }
    uint64_t v70 = v1[37];
    uint64_t v69 = v1[38];
    uint64_t v71 = v1[36];
LABEL_89:
    swift_bridgeObjectRelease();
LABEL_90:
    (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
    goto LABEL_91;
  }
  if (v7 != enum case for CKSyncEngine.Event.sentDatabaseChanges(_:))
  {
    if (v7 == enum case for CKSyncEngine.Event.sentRecordZoneChanges(_:))
    {
      uint64_t v72 = v0[54];
      uint64_t v74 = v0[49];
      uint64_t v73 = v1[50];
      uint64_t v75 = v1[48];
      (*(void (**)(void, uint64_t))(v1[52] + 96))(v1[54], v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 32))(v73, v72, v75);
      unint64_t v76 = CKSyncEngine.Event.SentRecordZoneChanges.savedRecords.getter();
      unint64_t v61 = v76;
      if (v76 >> 62) {
        goto LABEL_108;
      }
      uint64_t result = *(void *)((v76 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!result) {
        goto LABEL_41;
      }
      goto LABEL_31;
    }
    if (v7 == enum case for CKSyncEngine.Event.willFetchRecordZoneChanges(_:))
    {
      uint64_t v175 = v0[54];
      uint64_t v12 = v0[10];
      uint64_t v11 = v1[11];
      uint64_t v13 = v1[9];
      (*(void (**)(void, uint64_t))(v1[52] + 96))(v1[54], v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v11, v175, v13);
      RecordZone = (void *)CKSyncEngine.Event.WillFetchRecordZoneChanges.zoneID.getter();
      sub_100042918(RecordZone);
    }
    else
    {
      if (v7 != enum case for CKSyncEngine.Event.didFetchRecordZoneChanges(_:))
      {
        uint64_t v179 = v0[53];
        uint64_t v180 = v0[3];
        static Logger.syncEngine.getter();
        uint64_t v181 = v180;
        uint64_t v1 = v0;
        v6(v179, v181, v8);
        unint64_t v182 = Logger.logObject.getter();
        os_log_type_t v183 = static os_log_type_t.debug.getter();
        BOOL v184 = os_log_type_enabled(v182, v183);
        uint64_t v186 = v0[52];
        uint64_t v185 = v0[53];
        uint64_t v187 = v0[51];
        uint64_t v189 = v0[43];
        uint64_t v188 = v0[44];
        uint64_t v190 = v223[42];
        if (v184)
        {
          uint64_t v191 = (uint8_t *)swift_slowAlloc();
          uint64_t v224 = swift_slowAlloc();
          *(_DWORD *)uint64_t v191 = 136446210;
          sub_100042DD4(&qword_1000744B8, (void (*)(uint64_t))&type metadata accessor for CKSyncEngine.Event);
          uint64_t v192 = dispatch thunk of CustomStringConvertible.description.getter();
          *(v2 - 1) = sub_1000067CC(v192, v193, &v224);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v194 = *(void (**)(uint64_t, uint64_t))(v186 + 8);
          v194(v185, v187);
          _os_log_impl((void *)&_mh_execute_header, v182, v183, "Received event: %{public}s", v191, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          uint64_t v1 = v223;
          swift_slowDealloc();

          (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v188, v190);
        }
        else
        {
          uint64_t v194 = *(void (**)(uint64_t, uint64_t))(v186 + 8);
          v194(v223[53], v223[51]);

          (*(void (**)(uint64_t, uint64_t))(v189 + 8))(v188, v190);
        }
        v194(v1[54], v1[51]);
        goto LABEL_91;
      }
      uint64_t v177 = v0[54];
      uint64_t v12 = v0[7];
      uint64_t v11 = v1[8];
      uint64_t v13 = v1[6];
      (*(void (**)(uint64_t, uint64_t))(v1[52] + 96))(v177, v8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v11, v177, v13);
      uint64_t v178 = (void *)CKSyncEngine.Event.DidFetchRecordZoneChanges.zoneID.getter();
      sub_10003BBE4(v178);
    }
    goto LABEL_3;
  }
  uint64_t v57 = v0[54];
  uint64_t v59 = v0[20];
  uint64_t v58 = v1[21];
  uint64_t v60 = v1[19];
  (*(void (**)(void, uint64_t))(v1[52] + 96))(v1[54], v8);
  id v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(v59 + 32);
  unint64_t v61 = v59 + 32;
  v62(v58, v57, v60);
  unint64_t v63 = CKSyncEngine.Event.SentDatabaseChanges.savedZones.getter();
  uint64_t v64 = v63;
  if (v63 >> 62) {
    goto LABEL_105;
  }
  uint64_t v65 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v65)
  {
LABEL_106:
    uint64_t v196 = v1[20];
    uint64_t v195 = v1[21];
    uint64_t v197 = v1[19];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v195, v197);
    goto LABEL_91;
  }
  while (1)
  {
    if (v65 >= 1)
    {
      for (uint64_t i = 0; i != v65; ++i)
      {
        if ((v64 & 0xC000000000000001) != 0) {
          id v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v67 = *(id *)(v64 + 8 * i + 32);
        }
        unint64_t v68 = v67;
        sub_100042364(v67);
      }
      goto LABEL_106;
    }
    __break(1u);
LABEL_108:
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    if (result) {
      break;
    }
LABEL_41:
    swift_bridgeObjectRelease();
    uint64_t v100 = CKSyncEngine.Event.SentRecordZoneChanges.failedRecordSaves.getter();
    uint64_t v101 = *(void *)(v100 + 16);
    if (v101)
    {
      uint64_t v102 = v1[40];
      uint64_t v104 = *(void (**)(uint64_t, unint64_t, uint64_t))(v102 + 16);
      uint64_t v103 = v102 + 16;
      unint64_t v105 = v100 + ((*(unsigned __int8 *)(v103 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v103 + 64));
      uint64_t v214 = *(void *)(v103 + 56);
      typec = v104;
      do
      {
        uint64_t v106 = v1[41];
        uint64_t v107 = v223[39];
        typec(v106, v105, v107);
        unint64_t v108 = (void *)CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.record.getter();
        unsigned int v109 = (void *)CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.error.getter();
        sub_100039A0C(v108, (uint64_t)v109);

        uint64_t v110 = v107;
        uint64_t v1 = v223;
        (*(void (**)(uint64_t, uint64_t))(v103 - 8))(v106, v110);
        v105 += v214;
        --v101;
      }
      while (v101);
    }
    swift_bridgeObjectRelease();
    unint64_t typed = CKSyncEngine.Event.SentRecordZoneChanges.deletedRecordIDs.getter();
    if (typed >> 62)
    {
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      if (!result) {
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t result = *(void *)((typed & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!result) {
        goto LABEL_56;
      }
    }
    uint64_t v111 = result - 1;
    if (result < 1) {
      goto LABEL_113;
    }
    uint64_t v112 = 0;
    unint64_t v113 = typed & 0xC000000000000001;
    uint64_t v114 = (void (**)(uint64_t, uint64_t))(v1[43] + 8);
    if ((typed & 0xC000000000000001) == 0)
    {
LABEL_51:
      id v115 = *(id *)(typed + 8 * v112 + 32);
      goto LABEL_52;
    }
    while (1)
    {
      id v115 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_52:
      os_log_type_t v116 = v115;
      static Logger.syncEngine.getter();
      id v117 = v116;
      uint64_t v118 = Logger.logObject.getter();
      os_log_type_t v119 = static os_log_type_t.debug.getter();
      BOOL v120 = os_log_type_enabled(v118, v119);
      uint64_t v121 = v1[46];
      uint64_t v122 = v1[42];
      if (v120)
      {
        uint64_t v123 = swift_slowAlloc();
        uint64_t v224 = swift_slowAlloc();
        *(_DWORD *)uint64_t v123 = 136446210;
        id v117 = v117;
        logb = v118;
        unint64_t v124 = v114;
        uint64_t v125 = v112;
        unint64_t v126 = v113;
        uint64_t v127 = v111;
        id v128 = [v117 description];
        uint64_t v205 = v122;
        uint64_t v209 = v121;
        uint64_t v129 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v131 = v130;

        uint64_t v111 = v127;
        unint64_t v113 = v126;
        uint64_t v112 = v125;
        uint64_t v114 = v124;

        *(void *)(v123 + 4) = sub_1000067CC(v129, v131, &v224);
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, logb, v119, "Deleting record: %{public}s", (uint8_t *)v123, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v1 = v223;
        swift_slowDealloc();

        (*v124)(v209, v205);
      }
      else
      {

        (*v114)(v121, v122);
      }

      if (v111 == v112) {
        break;
      }
      ++v112;
      if (!v113) {
        goto LABEL_51;
      }
    }
LABEL_56:
    uint64_t v64 = v1[50];
    unint64_t v61 = v1[43];
    swift_bridgeObjectRelease();
    uint64_t v132 = CKSyncEngine.Event.SentRecordZoneChanges.failedRecordDeletes.getter();
    uint64_t v133 = 0;
    uint64_t v134 = *(void *)(v132 + 64);
    uint64_t v199 = v132 + 64;
    uint64_t v135 = -1;
    uint64_t v136 = -1 << *(unsigned char *)(v132 + 32);
    if (-v136 < 64) {
      uint64_t v135 = ~(-1 << -(char)v136);
    }
    unint64_t v137 = v135 & v134;
    os_log_t log = (os_log_t)((unint64_t)(63 - v136) >> 6);
    uint64_t v138 = (void (**)(uint64_t, os_log_type_t *))(v61 + 8);
    unint64_t v198 = (void (**)(uint64_t, os_log_type_t *))(v61 + 8);
    if ((v135 & v134) != 0)
    {
      do
      {
        while (1)
        {
          unint64_t v139 = __clz(__rbit64(v137));
          v137 &= v137 - 1;
          unint64_t v140 = v139 | (v133 << 6);
LABEL_76:
          uint64_t v144 = 8 * v140;
          uint64_t v145 = *(void **)(*(void *)(v132 + 56) + v144);
          id v146 = *(id *)(*(void *)(v132 + 48) + v144);
          unint64_t v61 = v145;
          static Logger.syncEngine.getter();
          id v147 = v146;
          uint64_t v64 = Logger.logObject.getter();
          os_log_type_t v148 = static os_log_type_t.debug.getter();
          BOOL v149 = os_log_type_enabled((os_log_t)v64, v148);
          uint64_t v150 = v1[45];
          *(void *)typee = v1[42];
          if (v149) {
            break;
          }

          (*v138)(v150, *(os_log_type_t **)typee);
          if (!v137) {
            goto LABEL_62;
          }
        }
        uint64_t v151 = swift_slowAlloc();
        uint64_t v210 = swift_slowAlloc();
        uint64_t v224 = v210;
        *(_DWORD *)uint64_t v151 = 136446210;
        id v152 = v147;
        v215 = (void *)v61;
        uint64_t v153 = v132;
        id v154 = [v152 description];
        uint64_t v206 = v150;
        uint64_t v155 = v133;
        uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v157 = v137;
        unint64_t v159 = v158;

        uint64_t v132 = v153;
        uint64_t v160 = v156;
        uint64_t v133 = v155;
        *(void *)(v151 + 4) = sub_1000067CC(v160, v159, &v224);
        unint64_t v137 = v157;
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v64, v148, "Failed to delete record: %{public}s", (uint8_t *)v151, 0xCu);
        unint64_t v61 = v210;
        swift_arrayDestroy();
        uint64_t v1 = v223;
        swift_slowDealloc();
        uint64_t v138 = v198;
        swift_slowDealloc();

        (*v198)(v206, *(os_log_type_t **)typee);
      }
      while (v137);
    }
LABEL_62:
    uint64_t v141 = v133 + 1;
    if (__OFADD__(v133, 1))
    {
      __break(1u);
    }
    else
    {
      if (v141 >= (uint64_t)log) {
        goto LABEL_96;
      }
      unint64_t v142 = *(void *)(v199 + 8 * v141);
      ++v133;
      if (v142) {
        goto LABEL_75;
      }
      uint64_t v133 = v141 + 1;
      if (v141 + 1 >= (uint64_t)log) {
        goto LABEL_96;
      }
      unint64_t v142 = *(void *)(v199 + 8 * v133);
      if (v142) {
        goto LABEL_75;
      }
      uint64_t v133 = v141 + 2;
      if (v141 + 2 >= (uint64_t)log) {
        goto LABEL_96;
      }
      unint64_t v142 = *(void *)(v199 + 8 * v133);
      if (v142) {
        goto LABEL_75;
      }
      uint64_t v143 = v141 + 3;
      if (v143 >= (uint64_t)log)
      {
LABEL_96:
        uint64_t v70 = v1[49];
        uint64_t v69 = v1[50];
        uint64_t v71 = v1[48];
        swift_release();
        goto LABEL_90;
      }
      unint64_t v142 = *(void *)(v199 + 8 * v143);
      if (v142)
      {
        uint64_t v133 = v143;
LABEL_75:
        unint64_t v137 = (v142 - 1) & v142;
        unint64_t v140 = __clz(__rbit64(v142)) + (v133 << 6);
        goto LABEL_76;
      }
      while (1)
      {
        uint64_t v133 = v143 + 1;
        if (__OFADD__(v143, 1)) {
          break;
        }
        if (v133 >= (uint64_t)log) {
          goto LABEL_96;
        }
        unint64_t v142 = *(void *)(v199 + 8 * v133);
        ++v143;
        if (v142) {
          goto LABEL_75;
        }
      }
    }
    __break(1u);
LABEL_105:
    uint64_t v65 = _CocoaArrayWrapper.endIndex.getter();
    if (!v65) {
      goto LABEL_106;
    }
  }
LABEL_31:
  uint64_t v78 = result - 1;
  if (result >= 1)
  {
    uint64_t v79 = 0;
    unint64_t v80 = v61 & 0xC000000000000001;
    uint64_t v81 = (void (**)(uint64_t, uint64_t))(v1[43] + 8);
    if ((v61 & 0xC000000000000001) == 0)
    {
LABEL_36:
      id v82 = *(id *)(v61 + 8 * v79 + 32);
      goto LABEL_37;
    }
    while (1)
    {
      id v82 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_37:
      unsigned __int8 v83 = v82;
      static Logger.syncEngine.getter();
      id v84 = v83;
      long long v85 = Logger.logObject.getter();
      os_log_type_t typeb = static os_log_type_t.debug.getter();
      BOOL v86 = os_log_type_enabled(v85, typeb);
      uint64_t v87 = v1[47];
      uint64_t v88 = v1[42];
      if (v86)
      {
        uint64_t v89 = swift_slowAlloc();
        uint64_t v224 = swift_slowAlloc();
        *(_DWORD *)uint64_t v89 = 136446210;
        id v84 = v84;
        loga = v85;
        unint64_t v90 = v80;
        uint64_t v91 = v79;
        unint64_t v92 = v61;
        uint64_t v93 = v78;
        id v94 = [v84 description];
        uint64_t v204 = v88;
        uint64_t v208 = v87;
        long long v95 = v81;
        uint64_t v96 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v98 = v97;

        uint64_t v78 = v93;
        unint64_t v61 = v92;
        uint64_t v79 = v91;
        unint64_t v80 = v90;

        uint64_t v99 = v96;
        uint64_t v81 = v95;
        *(void *)(v89 + 4) = sub_1000067CC(v99, v98, &v224);
        swift_bridgeObjectRelease();

        _os_log_impl((void *)&_mh_execute_header, loga, typeb, "Saved record: %{public}s", (uint8_t *)v89, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v1 = v223;
        swift_slowDealloc();

        (*v95)(v208, v204);
      }
      else
      {

        (*v81)(v87, v88);
      }

      if (v78 == v79) {
        goto LABEL_41;
      }
      ++v79;
      if (!v80) {
        goto LABEL_36;
      }
    }
  }
  __break(1u);
LABEL_113:
  __break(1u);
  return result;
}

void sub_100039A0C(void *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v58 - v13;
  *(void *)&long long v62 = a2;
  swift_errorRetain();
  uint64_t v15 = sub_100007370(&qword_1000741C0);
  type metadata accessor for CKError(0);
  uint64_t v61 = v15;
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v16 = (void *)v65;
  sub_100042DD4(&qword_100073AA8, type metadata accessor for CKError);
  _BridgedStoredNSError.code.getter();
  if ((void)v62 != 14)
  {

    goto LABEL_7;
  }
  uint64_t v59 = v3;
  uint64_t v60 = v7;
  id v17 = [a1 recordID];
  id v18 = [v17 recordName];

  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v21 = v20;

  if (v19 == 0xD000000000000010 && v21 == 0x80000001000612C0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }
  char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v36 & 1) == 0)
  {

    uint64_t v7 = v60;
LABEL_7:
    static Logger.syncEngine.getter();
    swift_errorRetain();
    id v22 = a1;
    swift_errorRetain();
    id v23 = v22;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      *(void *)&long long v62 = v58;
      *(_DWORD *)uint64_t v26 = 136446466;
      id v27 = v23;
      id v28 = [v27 description];
      uint64_t v60 = v7;
      id v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v59 = v6;
      uint64_t v31 = v30;
      unint64_t v33 = v32;

      uint64_t v65 = sub_1000067CC(v31, v33, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2082;
      uint64_t v65 = a2;
      swift_errorRetain();
      uint64_t v34 = String.init<A>(describing:)();
      uint64_t v65 = sub_1000067CC(v34, v35, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to save record: %{public}s : %{public}s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v59);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
    }
    return;
  }
LABEL_11:
  uint64_t v37 = related decl 'e' for CKErrorCode.serverRecord.getter();
  if (!v37)
  {
LABEL_19:
    uint64_t v59 = v6;
    static Logger.syncEngine.getter();
    id v45 = a1;
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      unint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(void *)&long long v62 = v61;
      *(_DWORD *)unint64_t v48 = 136446210;
      uint64_t v58 = (uint64_t)(v48 + 4);
      uint64_t v49 = v48;
      id v50 = v45;
      id v51 = [v50 description];
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v54 = v53;

      uint64_t v65 = sub_1000067CC(v52, v54, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "No server or client record when merging: %{public}s", v49, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v60 + 8))(v14, v59);
    return;
  }
  id v38 = (void *)v37;
  uint64_t v39 = related decl 'e' for CKErrorCode.clientRecord.getter();
  if (!v39)
  {

    goto LABEL_19;
  }
  uint64_t v40 = (void *)v39;
  uint64_t v41 = sub_10001CA54();
  unint64_t v43 = v42;
  id v44 = [v38 encryptedValues];
  if (qword_1000739C0 != -1) {
    swift_once();
  }
  if (v43 >> 60 == 15)
  {
    uint64_t v64 = 0;
    long long v62 = 0u;
    long long v63 = 0u;
  }
  else
  {
    *((void *)&v63 + 1) = &type metadata for Data;
    uint64_t v64 = &protocol witness table for Data;
    *(void *)&long long v62 = v41;
    *((void *)&v62 + 1) = v43;
  }
  swift_getObjectType();
  swift_bridgeObjectRetain();
  sub_100042B58(v41, v43);
  CKRecordKeyValueSetting.subscript.setter();
  sub_100042B6C(v41, v43);
  swift_unknownObjectRelease();
  uint64_t v55 = *(void **)(v59
                 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine10DataSource_cachedAuthorizationKeyRecord);
  *(void *)(v59 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine10DataSource_cachedAuthorizationKeyRecord) = v38;
  id v56 = v38;

  id v57 = [self defaultCenter];
  if (qword_100073A10 != -1) {
    swift_once();
  }
  [v57 postNotificationName:qword_100074C30 object:0];
}

uint64_t sub_10003A18C(void *a1)
{
  uint64_t v2 = sub_100007370(&qword_1000740D8);
  uint64_t v4 = __chkstk_darwin(v2 - 8, v3);
  uint64_t v138 = (char *)&v133 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  uint64_t v140 = (uint64_t)&v133 - v7;
  uint64_t v8 = type metadata accessor for UsageItemRecord();
  uint64_t v141 = *(void *)(v8 - 8);
  uint64_t v142 = v8;
  __chkstk_darwin(v8, v9);
  unint64_t v139 = (char *)&v133 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v149 = *(void *)(v11 - 8);
  uint64_t v150 = (uint8_t *)v11;
  __chkstk_darwin(v11, v12);
  id v147 = (char *)&v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = type metadata accessor for DispatchQoS();
  uint64_t v146 = *(void *)(v148 - 8);
  __chkstk_darwin(v148, v14);
  uint64_t v145 = (char *)&v133 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v19 = __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)&v133 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v19, v22);
  id v152 = (char *)&v133 - v24;
  uint64_t v26 = __chkstk_darwin(v23, v25);
  uint64_t v143 = (char *)&v133 - v27;
  uint64_t v29 = __chkstk_darwin(v26, v28);
  uint64_t v144 = (char *)&v133 - v30;
  __chkstk_darwin(v29, v31);
  unint64_t v33 = (char *)&v133 - v32;
  id v34 = [a1 recordID];
  id v35 = [v34 recordName];
  uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v38 = v37;

  if (v36 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v38 == v39)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_5;
  }
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v40)
  {
LABEL_5:
    static Logger.syncEngine.getter();
    id v41 = v34;
    unint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      uint64_t v153 = v17;
      id v45 = (uint8_t *)v44;
      uint64_t v46 = swift_slowAlloc();
      id v152 = (char *)v16;
      aBlock[0] = v46;
      *(_DWORD *)id v45 = 136446210;
      uint64_t v151 = (void (*)(char *, uint64_t))(v45 + 4);
      id v47 = v41;
      id v48 = [v47 description];
      uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v51 = v50;

      uint64_t v155 = sub_1000067CC(v49, v51, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Ignoring fetched share: %{public}s", v45, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return (*(uint64_t (**)(char *, char *))(v153 + 8))(v21, v152);
    }
    else
    {

      return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    }
  }
  id v137 = v34;
  unint64_t v53 = (void *)CKSyncEngine.database.getter();
  id v54 = [v53 scope];

  static Logger.syncEngine.getter();
  id v55 = a1;
  id v56 = Logger.logObject.getter();
  os_log_type_t v57 = static os_log_type_t.debug.getter();
  BOOL v58 = os_log_type_enabled(v56, v57);
  uint64_t v153 = v17;
  id v135 = v54;
  id v136 = v55;
  if (v58)
  {
    uint64_t v59 = swift_slowAlloc();
    uint64_t v134 = swift_slowAlloc();
    aBlock[0] = v134;
    *(_DWORD *)uint64_t v59 = 136446466;
    if (v54 == (id)3) {
      uint64_t v60 = 0x646572616873;
    }
    else {
      uint64_t v60 = 0x65746176697270;
    }
    if (v54 == (id)3) {
      unint64_t v61 = 0xE600000000000000;
    }
    else {
      unint64_t v61 = 0xE700000000000000;
    }
    uint64_t v155 = sub_1000067CC(v60, v61, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v59 + 12) = 2082;
    uint64_t v133 = v59 + 14;
    id v62 = v55;
    uint64_t v63 = v16;
    id v64 = [v62 description];
    uint64_t v65 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v67 = v66;

    uint64_t v16 = v63;
    uint64_t v155 = sub_1000067CC(v65, v67, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Fetched %{public}s record from server: %{public}s", (uint8_t *)v59, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v68 = *(void (**)(char *, uint64_t))(v153 + 8);
    v68(v33, v63);
  }
  else
  {

    unint64_t v68 = *(void (**)(char *, uint64_t))(v17 + 8);
    v68(v33, v16);
  }
  uint64_t v69 = v152;
  id v70 = [v137 zoneID];
  id v71 = [v70 zoneName];

  uint64_t v72 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v74 = v73;

  if (qword_1000739C8 != -1) {
    swift_once();
  }
  if (qword_100074BE0 == v72 && *(void *)algn_100074BE8 == v74
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    id v75 = v136;
    uint64_t v76 = sub_10001CA54();
    if (v77 >> 60 != 15)
    {
      uint64_t v88 = v76;
      unint64_t v89 = v77;
      BOOL v90 = v135 == (id)3;
      id v91 = [objc_allocWithZone((Class)MOLocalSettingsStore) init];
      sub_10001958C(0, (unint64_t *)&qword_100073ED0);
      unint64_t v92 = (void *)static OS_dispatch_queue.main.getter();
      uint64_t v93 = swift_allocObject();
      *(void *)(v93 + 16) = v91;
      *(void *)(v93 + 24) = v88;
      *(void *)(v93 + 32) = v89;
      *(unsigned char *)(v93 + 40) = v90;
      id v94 = v151;
      *(void *)(v93 + 48) = v151;
      aBlock[4] = (uint64_t)sub_100042BE8;
      aBlock[5] = v93;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = (uint64_t)sub_100036EDC;
      void aBlock[3] = (uint64_t)&unk_10006F050;
      long long v95 = _Block_copy(aBlock);
      id v96 = v91;
      sub_100042B58(v88, v89);
      unint64_t v97 = v94;
      swift_release();
      unint64_t v98 = v145;
      static DispatchQoS.unspecified.getter();
      aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
      sub_100042DD4((unint64_t *)&unk_100074180, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_100007370(&qword_100074360);
      sub_1000263C8();
      uint64_t v99 = v147;
      uint64_t v100 = v150;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v95);

      sub_100042B6C(v88, v89);
      (*(void (**)(char *, uint8_t *))(v149 + 8))(v99, v100);
      return (*(uint64_t (**)(char *, uint64_t))(v146 + 8))(v98, v148);
    }
    id v152 = (char *)v16;
    uint64_t v69 = v144;
    static Logger.syncEngine.getter();
    id v78 = v75;
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v79, v80))
    {
      uint64_t v81 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v81 = 136446210;
      uint64_t v150 = v81 + 4;
      id v82 = v78;
      id v83 = [v82 description];
      uint64_t v84 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v151 = v68;
      uint64_t v85 = v84;
      unint64_t v87 = v86;

      uint64_t v155 = sub_1000067CC(v85, v87, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Missing authorization key data in record: %{public}s", v81, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return ((uint64_t (*)(char *, char *))v151)(v69, v152);
    }

    uint64_t v101 = v152;
    uint64_t v102 = v69;
    return ((uint64_t (*)(char *, char *))v68)(v102, v101);
  }
  if (qword_1000739A8 != -1) {
    swift_once();
  }
  if (qword_100074BB0 == v72 && *(void *)algn_100074BB8 == v74)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v103 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v103 & 1) == 0)
    {
      static Logger.syncEngine.getter();
      id v119 = v137;
      BOOL v120 = Logger.logObject.getter();
      os_log_type_t v121 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v120, v121))
      {
        uint64_t v151 = v68;
        uint64_t v122 = (uint8_t *)swift_slowAlloc();
        aBlock[0] = swift_slowAlloc();
        id v152 = (char *)v16;
        *(_DWORD *)uint64_t v122 = 136446210;
        uint64_t v150 = v122 + 4;
        id v123 = [v119 zoneID];
        id v124 = [v123 zoneName];

        uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v127 = v126;

        uint64_t v155 = sub_1000067CC(v125, v127, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v120, v121, "Unexpected zone: %{public}s", v122, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return ((uint64_t (*)(char *, char *))v151)(v69, v152);
      }

      uint64_t v102 = v69;
      goto LABEL_47;
    }
  }
  if ((*((unsigned char *)v151 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine10DataSource_collectActivity) & 1) == 0
    && v135 != (id)3)
  {
    uint64_t v104 = v143;
    static Logger.syncEngine.getter();
    id v105 = v136;
    uint64_t v106 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v106, v107))
    {
      unint64_t v108 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      id v152 = (char *)v16;
      *(_DWORD *)unint64_t v108 = 136446210;
      uint64_t v151 = (void (*)(char *, uint64_t))(v108 + 4);
      id v109 = v105;
      id v110 = [v109 description];
      uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v112 = (uint64_t (*)(char *, char *))v68;
      unint64_t v114 = v113;

      uint64_t v155 = sub_1000067CC(v111, v114, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v106, v107, "Ignoring record: %{public}s", v108, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return v112(v143, v152);
    }

    uint64_t v102 = v104;
LABEL_47:
    uint64_t v101 = (char *)v16;
    return ((uint64_t (*)(char *, char *))v68)(v102, v101);
  }
  id v115 = v136;
  uint64_t v116 = v140;
  sub_10001B900(v115, v140);
  uint64_t v118 = v141;
  uint64_t v117 = v142;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48))(v116, 1, v142) == 1)
  {

    return sub_100015758(v116, &qword_1000740D8);
  }
  else
  {
    id v128 = v139;
    (*(void (**)(char *, uint64_t, uint64_t))(v118 + 32))(v139, v116, v117);
    type metadata accessor for UsageStore();
    uint64_t v129 = static UsageStore.shared.getter();
    __chkstk_darwin(v129, v130);
    *(&v133 - 2) = (uint64_t)v128;
    char v131 = UsageStore.contains(where:)();
    swift_release();
    if ((v131 & 1) == 0)
    {
      static UsageStore.shared.getter();
      UsageItemRecord.identifier.getter();
      uint64_t v132 = v138;
      (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v138, v128, v117);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v118 + 56))(v132, 0, 1, v117);
      UsageStore.subscript.setter();
      swift_release();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v118 + 8))(v128, v117);
  }
}

uint64_t sub_10003B364(uint64_t a1, uint64_t a2)
{
  uint64_t v68 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v65 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3, v4);
  id v62 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  uint64_t v59 = (char *)v56 - v8;
  uint64_t v9 = sub_100007370(&qword_1000744C8);
  uint64_t v11 = __chkstk_darwin(v9 - 8, v10);
  unint64_t v61 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  BOOL v58 = (char *)v56 - v14;
  uint64_t v15 = type metadata accessor for CKSyncEngine.State.Serialization();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v20 = (char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  uint64_t v23 = (char *)v56 - v22;
  uint64_t v71 = type metadata accessor for Logger();
  uint64_t v24 = *(void *)(v71 - 8);
  uint64_t v26 = __chkstk_darwin(v71, v25);
  uint64_t v63 = (char *)v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v26, v28);
  uint64_t v60 = (char *)v56 - v30;
  __chkstk_darwin(v29, v31);
  unint64_t v33 = (char *)v56 - v32;
  static Logger.syncEngine.getter();
  uint64_t v67 = v16;
  id v34 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  uint64_t v64 = a1;
  v34(v23, a1, v15);
  id v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  BOOL v37 = os_log_type_enabled(v35, v36);
  uint64_t v69 = v34;
  uint64_t v70 = v24;
  uint64_t v66 = v3;
  if (v37)
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    v73[0] = v57;
    *(_DWORD *)uint64_t v38 = 136446210;
    v56[1] = v38 + 4;
    v34(v20, (uint64_t)v23, v15);
    uint64_t v39 = String.init<A>(describing:)();
    uint64_t v72 = sub_1000067CC(v39, v40, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v41 = v67;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v23, v15);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Updated sync serialization: %{public}s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v42 = *(void (**)(char *, uint64_t))(v70 + 8);
  }
  else
  {
    uint64_t v41 = v67;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v23, v15);

    unint64_t v42 = *(void (**)(char *, uint64_t))(v24 + 8);
  }
  v42(v33, v71);
  uint64_t v43 = v41;
  uint64_t v44 = (void *)CKSyncEngine.database.getter();
  id v45 = [v44 scope];

  if (v45 == (id)3)
  {
    uint64_t v46 = (uint64_t)v61;
    v69(v61, v64, v15);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, v15);
    uint64_t v47 = (uint64_t)v62;
    Locations.familyControlsSharedSyncSerialization.getter();
    goto LABEL_8;
  }
  if (v45 == (id)2)
  {
    uint64_t v46 = (uint64_t)v58;
    v69(v58, v64, v15);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v46, 0, 1, v15);
    uint64_t v47 = (uint64_t)v59;
    Locations.familyControlsPrivateSyncSerialization.getter();
LABEL_8:
    sub_100041A90(v46, v47);
    (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v47, v66);
    return sub_100015758(v46, &qword_1000744C8);
  }
  id v48 = v60;
  static Logger.syncEngine.getter();
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    unint64_t v51 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    uint64_t v72 = (uint64_t)v45;
    v73[0] = v52;
    *(_DWORD *)unint64_t v51 = 136446210;
    type metadata accessor for Scope(0);
    uint64_t v53 = String.init<A>(describing:)();
    uint64_t v72 = sub_1000067CC(v53, v54, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Not saving serialization for engine with scope: %{public}s", v51, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  return ((uint64_t (*)(char *, uint64_t))v42)(v48, v71);
}

void sub_10003BBE4(void *a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = __chkstk_darwin(v10, v11);
  id v48 = (char *)&v39 - v13;
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v39 - v15;
  static Logger.syncEngine.getter();
  id v17 = a1;
  uint64_t v47 = v16;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  int v20 = v19;
  BOOL v21 = os_log_type_enabled(v18, v19);
  uint64_t v46 = v6;
  if (v21)
  {
    uint64_t v45 = v7;
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v50 = v44;
    int v43 = v20;
    *(_DWORD *)uint64_t v22 = 136446210;
    uint64_t v41 = v22 + 4;
    unint64_t v42 = v22;
    id v23 = v17;
    id v24 = [v23 description];
    os_log_t v40 = v18;
    uint64_t v25 = v8;
    uint64_t v26 = v3;
    id v27 = v24;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;

    uint64_t v3 = v26;
    uint64_t v8 = v25;
    uint64_t v49 = sub_1000067CC(v28, v30, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v7 = v45;
    swift_bridgeObjectRelease();
    os_log_t v31 = v40;
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v43, "Did fetch changes for %{public}s", v42, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v32 = *(void (**)(char *, uint64_t))(v8 + 8);
  v32(v47, v7);
  sub_10001958C(0, (unint64_t *)&qword_1000740F0);
  if (qword_1000739B0 != -1) {
    swift_once();
  }
  id v33 = (id)qword_100074BC0;
  char v34 = static NSObject.== infix(_:_:)();

  if (v34)
  {
    static Logger.syncEngine.getter();
    id v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      BOOL v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Did fetch changes for activity zone, saving the local store.", v37, 2u);
      swift_slowDealloc();
    }

    v32(v48, v7);
    type metadata accessor for UsageStore();
    static UsageStore.shared.getter();
    uint64_t v38 = v46;
    Locations.familyControlsStore.getter();
    dispatch thunk of UsageStore.save(to:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v38, v2);
    swift_release();
  }
}

void sub_10003C22C(void *a1, uint64_t a2, unint64_t a3, int a4, uint64_t a5)
{
  uint64_t v45 = a5;
  int v44 = a4;
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  __chkstk_darwin(v11, v12);
  uint64_t v46 = (char *)&v42 - v13;
  id v14 = [a1 managedSettings];
  id v15 = [v14 tokenDecodingKeys];

  if (v15)
  {
    sub_100036E78();
    uint64_t v16 = (void *)static Set._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v16 = &_swiftEmptySetSingleton;
  }
  uint64_t v47[5] = (uint64_t)v16;
  sub_100015DDC(a2, a3);
  sub_10003E4E8(v47, a2, a3);
  sub_10000BF6C(v47[0], v47[1]);
  id v17 = [a1 managedSettings];
  sub_100036E78();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v17 setTokenDecodingKeys:isa];

  id v43 = a1;
  id v19 = [a1 managedSettings];
  id v20 = [v19 tokenEncodingKey];

  if (v20)
  {
    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v23 = v22;

    sub_100015DDC(a2, a3);
    sub_100015DDC(v21, v23);
    char v24 = sub_1000417F8(v21, v23, a2, a3);
    sub_10000BF6C(a2, a3);
    sub_10000BF6C(v21, v23);
    if (v24)
    {
      sub_10000BF6C(v21, v23);
      return;
    }
    if ((v44 & 1) == 0 && v23 >> 60 != 15)
    {
      uint64_t v42 = v9;
      uint64_t v34 = v8;
      uint64_t v35 = static Data.none.getter();
      unint64_t v37 = v36;
      sub_100042B58(v21, v23);
      sub_100042B58(v21, v23);
      char v38 = sub_1000417F8(v21, v23, v35, v37);
      sub_10000BF6C(v35, v37);
      sub_100042B6C(v21, v23);
      sub_100042B6C(v21, v23);
      if ((v38 & 1) == 0)
      {
LABEL_19:
        sub_100042B6C(v21, v23);
        return;
      }
      uint64_t v8 = v34;
      uint64_t v9 = v42;
    }
  }
  else
  {
    sub_100015DDC(a2, a3);
    unint64_t v23 = 0xF000000000000000;
    sub_100042B6C(0, 0xF000000000000000);
    sub_100042B6C(a2, a3);
    uint64_t v21 = 0;
  }
  static Logger.syncEngine.getter();
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    id v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Saving synced authorization key data", v27, 2u);
    swift_slowDealloc();
  }

  uint64_t v28 = v9 + 8;
  unint64_t v29 = *(void (**)(char *, uint64_t))(v9 + 8);
  unint64_t v30 = v46;
  uint64_t v46 = (char *)v8;
  uint64_t v42 = v28;
  v29(v30, v8);
  uint64_t v31 = v45 + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine10DataSource_locations;
  uint64_t v32 = type metadata accessor for Locations();
  v47[3] = v32;
  v47[4] = (uint64_t)&protocol witness table for Locations;
  id v33 = sub_100025234(v47);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(v33, v31, v32);
  sub_10004AFAC(a2, a3, v47);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v47);
  id v39 = [v43 managedSettings];
  Class v40 = Data._bridgeToObjectiveC()().super.isa;
  [v39 setTokenEncodingKey:v40];

  if ((v44 & 1) == 0) {
    goto LABEL_19;
  }
  id v41 = [self defaultCenter];
  if (qword_100073A10 != -1) {
    swift_once();
  }
  [v41 postNotificationName:qword_100074C30 object:0];
  sub_100042B6C(v21, v23);
}

uint64_t sub_10003C948(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a3;
  uint64_t v29 = a4;
  uint64_t v6 = sub_100007370(&qword_1000740D0);
  uint64_t v7 = v6 - 8;
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (uint64_t *)((char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9, v12);
  id v14 = (uint64_t *)((char *)&v27 - v13);
  id v15 = (char *)&v27 + *(int *)(v7 + 56) - v13;
  *id v14 = a1;
  v14[1] = a2;
  uint64_t v30 = (uint64_t)&v27 - v13;
  uint64_t v16 = type metadata accessor for UsageItemRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v15, v28, v16);
  id v19 = (char *)v11 + *(int *)(v7 + 56);
  *uint64_t v11 = a1;
  v11[1] = a2;
  v18(v19, (uint64_t)v15, v16);
  swift_bridgeObjectRetain();
  uint64_t v20 = UsageItemRecord.identifier.getter();
  uint64_t v22 = v21;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  if (v20 == UsageItemRecord.identifier.getter() && v22 == v23) {
    char v25 = 1;
  }
  else {
    char v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100015758(v30, &qword_1000740D0);
  return v25 & 1;
}

void sub_10003CB2C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v85 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)&v74 - v9;
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v81 = *(void *)(v11 - 8);
  uint64_t v82 = v11;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  uint64_t v80 = (uint64_t)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v17 = (char *)&v74 - v16;
  uint64_t v18 = sub_100007370(&qword_1000744C8);
  __chkstk_darwin(v18 - 8, v19);
  uint64_t v21 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v22 = [self defaultManager];
  URL.path(percentEncoded:)(1);
  NSString v23 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v84 = v22;
  unsigned int v24 = [v22 fileExistsAtPath:v23];

  if (v24)
  {
    uint64_t v85 = v10;
    uint64_t v79 = (uint64_t)v17;
    uint64_t v25 = v4;
    uint64_t v26 = v3;
    uint64_t v27 = v86;
    uint64_t v28 = Data.init(contentsOf:options:)();
    uint64_t v86 = v27;
    if (v27)
    {
LABEL_5:

      return;
    }
    uint64_t v30 = v28;
    unint64_t v31 = v29;
    uint64_t v32 = a1;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    uint64_t v33 = PropertyListDecoder.init()();
    sub_100007370(&qword_1000744E0);
    sub_100042D28();
    uint64_t v34 = v86;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    uint64_t v86 = v34;
    if (v34)
    {
      swift_release();
      sub_10000BF6C(v30, v31);
      goto LABEL_5;
    }
    uint64_t v45 = v88;
    uint64_t v46 = *(void *)(v88 + 16);
    uint64_t v80 = v30;
    uint64_t v77 = v26;
    id v78 = (uint8_t *)v33;
    if (v46 && (unint64_t v47 = sub_10004A7B8(0xD000000000000014, 0x8000000100061B30), (v48 & 1) != 0))
    {
      unint64_t v49 = v47;
      unint64_t v76 = *(void *)(v45 + 56);
      uint64_t v50 = type metadata accessor for CKSyncEngine.State.Serialization();
      uint64_t v51 = *(void *)(v50 - 8);
      uint64_t v52 = v51;
      uint64_t v53 = v76 + *(void *)(v51 + 72) * v49;
      uint64_t v54 = (uint64_t)v21;
      id v55 = v21;
      id v56 = (char *)v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v55, v53, v50);
      (*(void (**)(uint64_t, void, uint64_t, char *))(v52 + 56))(v54, 0, 1, v56);
    }
    else
    {
      uint64_t v57 = type metadata accessor for CKSyncEngine.State.Serialization();
      uint64_t v54 = (uint64_t)v21;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v21, 1, 1, v57);
      id v56 = (char *)v57;
    }
    BOOL v58 = v85;
    swift_bridgeObjectRelease();
    type metadata accessor for CKSyncEngine.State.Serialization();
    uint64_t v59 = *((void *)v56 - 1);
    uint64_t v60 = v54;
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v59 + 48))(v54, 1, v56) == 1)
    {
      uint64_t v85 = v56;
      sub_100015758(v54, &qword_1000744C8);
      uint64_t v61 = v79;
      static Logger.syncEngine.getter();
      id v62 = v58;
      uint64_t v63 = v32;
      uint64_t v64 = v58;
      uint64_t v65 = v77;
      (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v62, v63, v77);
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v66, v67))
      {
        os_log_t v75 = v66;
        uint64_t v68 = (uint8_t *)swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        unint64_t v76 = v31;
        uint64_t v88 = v69;
        *(_DWORD *)uint64_t v68 = 136446210;
        uint64_t v74 = v68 + 4;
        sub_100042DD4(&qword_100074500, (void (*)(uint64_t))&type metadata accessor for URL);
        uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v87 = sub_1000067CC(v70, v71, &v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v25 + 8))(v64, v65);
        os_log_t v72 = v75;
        _os_log_impl((void *)&_mh_execute_header, v75, v67, "Did not find sync state serialiazation at: %{public}s", v68, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
        sub_10000BF6C(v80, v76);

        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v79, v82);
      }
      else
      {
        swift_release();
        sub_10000BF6C(v80, v31);

        (*(void (**)(char *, uint64_t))(v25 + 8))(v64, v65);
        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v61, v82);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, char *))(v59 + 56))(v83, 1, 1, v85);
    }
    else
    {
      swift_release();
      sub_10000BF6C(v80, v31);

      uint64_t v73 = v83;
      (*(void (**)(uint64_t, uint64_t, char *))(v59 + 32))(v83, v60, v56);
      (*(void (**)(uint64_t, void, uint64_t, char *))(v59 + 56))(v73, 0, 1, v56);
    }
  }
  else
  {
    uint64_t v35 = v80;
    static Logger.syncEngine.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v85, a1, v3);
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    uint64_t v38 = v4;
    if (os_log_type_enabled(v36, v37))
    {
      id v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v79 = swift_slowAlloc();
      uint64_t v88 = v79;
      *(_DWORD *)id v39 = 136446210;
      id v78 = v39 + 4;
      sub_100042DD4(&qword_100074500, (void (*)(uint64_t))&type metadata accessor for URL);
      Class v40 = v85;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v87 = sub_1000067CC(v41, v42, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v40, v3);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Did not find sync state serialiazation at: %{public}s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v43 = v83;
      swift_slowDealloc();

      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v35, v82);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v4 + 8))(v85, v3);
      (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v35, v82);
      uint64_t v43 = v83;
    }
    uint64_t v44 = type metadata accessor for CKSyncEngine.State.Serialization();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v43, 1, 1, v44);
  }
}

uint64_t sub_10003D4AC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10003D550;
  return sub_100037F64(a1, a2);
}

uint64_t sub_10003D550()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10003D644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100042E1C;
  return sub_100037414(a1, a2, a3);
}

uint64_t sub_10003D6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_100042E1C;
  return CKSyncEngineDelegate.nextFetchChangesOptions(_:syncEngine:)(a1, a2, a3, ObjectType, a5);
}

uint64_t sub_10003D7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_10003D890;
  return CKSyncEngineDelegate.shouldFetchChanges(zoneID:syncEngine:)(a1, a2, ObjectType, a4);
}

uint64_t sub_10003D890(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_10003D98C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_10003D890;
  return CKSyncEngineDelegate.relatedApplicationBundleIdentifiers(zoneIDs:recordIDs:syncEngine:)(a1, a2, a3, ObjectType, a5);
}

uint64_t sub_10003DA5C()
{
  return CKSyncEngine.SendChangesOptions.Scope.contains(_:)() & 1;
}

Class sub_10003DA8C(void *a1)
{
  return sub_1000376B0(a1);
}

uint64_t sub_10003DAB0@<X0>(uint64_t __s1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, char *a4@<X8>)
{
  uint64_t v7 = (const void *)__s1;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v9 = (a2 >> 32) - (int)a2;
      if (a2 >> 32 < (int)a2)
      {
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      sub_100015DDC(a2, a3);
      uint64_t v10 = (char *)__DataStorage._bytes.getter();
      if (!v10) {
        goto LABEL_8;
      }
      uint64_t v11 = __DataStorage._offset.getter();
      if (__OFSUB__((int)a2, v11)) {
LABEL_33:
      }
        __break(1u);
      v10 += (int)a2 - v11;
LABEL_8:
      uint64_t v12 = __DataStorage._length.getter();
      if (v12 >= v9) {
        size_t v13 = (a2 >> 32) - (int)a2;
      }
      else {
        size_t v13 = v12;
      }
      if (!v7)
      {
LABEL_35:
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        JUMPOUT(0x10003DD14);
      }
      if (!v10) {
        goto LABEL_36;
      }
      int v14 = memcmp(v7, v10, v13);
      __s1 = sub_10000BF6C(a2, a3);
      BOOL v8 = v14 == 0;
LABEL_24:
      char v24 = v8;
LABEL_29:
      *a4 = v24;
      return __s1;
    case 2uLL:
      uint64_t v15 = *(void *)(a2 + 16);
      uint64_t v16 = *(void *)(a2 + 24);
      swift_retain();
      swift_retain();
      uint64_t v17 = (char *)__DataStorage._bytes.getter();
      if (!v17) {
        goto LABEL_17;
      }
      uint64_t v18 = __DataStorage._offset.getter();
      if (__OFSUB__(v15, v18)) {
        goto LABEL_32;
      }
      v17 += v15 - v18;
LABEL_17:
      BOOL v19 = __OFSUB__(v16, v15);
      int64_t v20 = v16 - v15;
      if (v19) {
        goto LABEL_31;
      }
      uint64_t v21 = __DataStorage._length.getter();
      if (v21 >= v20) {
        size_t v22 = v20;
      }
      else {
        size_t v22 = v21;
      }
      if (!v7) {
        goto LABEL_37;
      }
      if (!v17) {
        goto LABEL_38;
      }
      int v23 = memcmp(v7, v17, v22);
      swift_release();
      __s1 = swift_release();
      BOOL v8 = v23 == 0;
      goto LABEL_24;
    case 3uLL:
      if (!__s1) {
        goto LABEL_39;
      }
      char v24 = 1;
      goto LABEL_29;
    default:
      uint64_t __s2 = a2;
      __int16 v26 = a3;
      char v27 = BYTE2(a3);
      char v28 = BYTE3(a3);
      char v29 = BYTE4(a3);
      char v30 = BYTE5(a3);
      if (__s1)
      {
        __s1 = memcmp((const void *)__s1, &__s2, BYTE6(a3));
        BOOL v8 = __s1 == 0;
        goto LABEL_24;
      }
      __break(1u);
      goto LABEL_35;
  }
}

uint64_t sub_10003DD24(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003DDDC(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_10003DD44(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003DF4C(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10003DD64(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003E0F0(a1, a2, a3, (void *)*v3, &qword_1000742B8, (uint64_t (*)(void))&type metadata accessor for AuthorizationRecord);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10003DDA0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_10003E0F0(a1, a2, a3, (void *)*v3, &qword_100074258, (uint64_t (*)(void))&type metadata accessor for CKSyncEngine.PendingRecordZoneChange);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_10003DDDC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007370(&qword_1000744F8);
    uint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    uint64_t v10 = (char *)&_swiftEmptyArrayStorage;
  }
  size_t v13 = v10 + 32;
  int v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003DF4C(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_100007370(&qword_100074240);
    uint64_t v10 = (void *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    uint64_t v10 = &_swiftEmptyArrayStorage;
  }
  unint64_t v12 = (unint64_t)(v10 + 4);
  unint64_t v13 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8) {
      memmove(v10 + 4, a4 + 4, 40 * v8);
    }
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    sub_100007370((uint64_t *)&unk_100074200);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003E0F0(char a1, int64_t a2, char a3, void *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      int64_t v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v10 = a2;
      }
    }
  }
  else
  {
    int64_t v10 = a2;
  }
  uint64_t v11 = a4[2];
  if (v10 <= v11) {
    uint64_t v12 = a4[2];
  }
  else {
    uint64_t v12 = v10;
  }
  if (!v12)
  {
    uint64_t v16 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  sub_100007370(a5);
  uint64_t v13 = *(void *)(a6(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (void *)swift_allocObject();
  size_t v17 = j__malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1) {
    goto LABEL_34;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  uint64_t v19 = *(void *)(a6(0) - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (char *)v16 + v20;
  size_t v22 = (char *)a4 + v20;
  if (a1)
  {
    if (v16 < a4 || v21 >= &v22[*(void *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  uint64_t v23 = *(void *)(v19 + 72) * v11;
  char v24 = &v21[v23];
  unint64_t v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10003E338(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_10003FC2C(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_10003E4E8(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  Data.hash(into:)();
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  uint64_t v10 = v6 + 56;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
  {
LABEL_116:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)__s1 = *(void *)v81;
    *(void *)uint64_t v81 = 0x8000000000000000;
    sub_100015DDC(a2, a3);
    sub_10003FDC8(a2, a3, v9, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v81 = *(void *)__s1;
    swift_bridgeObjectRelease();
    *a1 = a2;
    a1[1] = a3;
    return 1;
  }
  uint64_t v86 = ~v8;
  unint64_t v11 = a3 >> 62;
  BOOL v12 = __OFSUB__(HIDWORD(a2), a2);
  BOOL v84 = v12;
  uint64_t v83 = v6;
  size_t __n = BYTE6(a3);
  uint64_t v85 = v6 + 56;
  uint64_t v79 = (a2 >> 32) - (int)a2;
  uint64_t v80 = a2 >> 32;
  unint64_t v78 = a3;
  while (2)
  {
    BOOL v13 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v9);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    uint64_t v16 = 0;
    switch(v15 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v14), v14))
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
        }
        uint64_t v16 = HIDWORD(v14) - (int)v14;
LABEL_14:
        sub_100015DDC(v14, v15);
        break;
      case 2uLL:
        uint64_t v18 = *(void *)(v14 + 16);
        uint64_t v17 = *(void *)(v14 + 24);
        uint64_t v16 = v17 - v18;
        if (!__OFSUB__(v17, v18)) {
          goto LABEL_14;
        }
        goto LABEL_120;
      case 3uLL:
        break;
      default:
        uint64_t v16 = BYTE6(v15);
        break;
    }
    size_t v19 = __n;
    switch((int)v11)
    {
      case 1:
        size_t v19 = HIDWORD(a2) - (int)a2;
        if (v84) {
          goto LABEL_121;
        }
        goto LABEL_19;
      case 2:
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v20 = *(void *)(a2 + 24);
        BOOL v22 = __OFSUB__(v20, v21);
        size_t v19 = v20 - v21;
        if (!v22) {
          goto LABEL_19;
        }
        goto LABEL_122;
      case 3:
        if (v16) {
          goto LABEL_7;
        }
        goto LABEL_117;
      default:
LABEL_19:
        if (v16 != v19)
        {
LABEL_7:
          sub_10000BF6C(v14, v15);
          goto LABEL_8;
        }
        if (v16 >= 1)
        {
          switch(v15 >> 62)
          {
            case 1uLL:
              if ((int)v14 > v14 >> 32) {
                goto LABEL_123;
              }
              char v27 = (char *)__DataStorage._bytes.getter();
              if (!v27) {
                goto LABEL_33;
              }
              uint64_t v28 = __DataStorage._offset.getter();
              if (__OFSUB__((int)v14, v28)) {
                goto LABEL_125;
              }
              v27 += (int)v14 - v28;
LABEL_33:
              __DataStorage._length.getter();
              uint64_t v10 = v85;
              if (v11)
              {
                if (v11 == 1)
                {
                  if (v80 < (int)a2) {
                    goto LABEL_134;
                  }
                  swift_retain();
                  char v29 = (char *)__DataStorage._bytes.getter();
                  if (v29)
                  {
                    uint64_t v30 = __DataStorage._offset.getter();
                    if (__OFSUB__((int)a2, v30)) {
                      goto LABEL_141;
                    }
                    v29 += (int)a2 - v30;
                  }
                  uint64_t v31 = __DataStorage._length.getter();
                  size_t v32 = (a2 >> 32) - (int)a2;
                  if (v31 < v79) {
                    size_t v32 = v31;
                  }
                  if (!v27) {
                    goto LABEL_143;
                  }
                  if (!v29) {
                    goto LABEL_144;
                  }
                  int v33 = memcmp(v27, v29, v32);
                  sub_10000BF6C(a2, a3);
                }
                else
                {
                  uint64_t v66 = *(void *)(a2 + 16);
                  uint64_t v65 = *(void *)(a2 + 24);
                  swift_retain();
                  swift_retain();
                  os_log_type_t v67 = (char *)__DataStorage._bytes.getter();
                  if (v67)
                  {
                    uint64_t v68 = __DataStorage._offset.getter();
                    if (__OFSUB__(v66, v68)) {
                      goto LABEL_140;
                    }
                    v67 += v66 - v68;
                  }
                  BOOL v22 = __OFSUB__(v65, v66);
                  int64_t v69 = v65 - v66;
                  if (v22) {
                    goto LABEL_135;
                  }
                  uint64_t v70 = __DataStorage._length.getter();
                  if (v70 >= v69) {
                    size_t v71 = v69;
                  }
                  else {
                    size_t v71 = v70;
                  }
                  if (!v27) {
                    goto LABEL_154;
                  }
                  a3 = v78;
                  uint64_t v6 = v83;
                  if (!v67) {
                    goto LABEL_155;
                  }
                  int v33 = memcmp(v27, v67, v71);
                  swift_release();
LABEL_112:
                  swift_release();
                }
                sub_10000BF6C(v14, v15);
LABEL_114:
                uint64_t v10 = v85;
                if (!v33) {
                  goto LABEL_118;
                }
              }
              else
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v27) {
                  goto LABEL_153;
                }
                unint64_t v47 = (uint64_t *)__s1;
                uint64_t v46 = v27;
LABEL_99:
                int v45 = memcmp(v46, v47, __n);
LABEL_100:
                sub_10000BF6C(v14, v15);
                if (!v45) {
                  goto LABEL_118;
                }
              }
              break;
            case 2uLL:
              uint64_t v34 = *(void *)(v14 + 16);
              swift_retain();
              swift_retain();
              uint64_t v35 = (char *)__DataStorage._bytes.getter();
              if (!v35) {
                goto LABEL_47;
              }
              uint64_t v36 = __DataStorage._offset.getter();
              if (__OFSUB__(v34, v36)) {
                goto LABEL_124;
              }
              v35 += v34 - v36;
LABEL_47:
              __DataStorage._length.getter();
              uint64_t v6 = v83;
              if (!v11)
              {
                *(void *)__s1 = a2;
                *(_WORD *)&__s1[8] = a3;
                __s1[10] = BYTE2(a3);
                __s1[11] = BYTE3(a3);
                __s1[12] = BYTE4(a3);
                __s1[13] = BYTE5(a3);
                if (!v35) {
                  goto LABEL_150;
                }
                int v33 = memcmp(v35, __s1, __n);
                swift_release();
                goto LABEL_112;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_128;
                }
                swift_retain();
                os_log_type_t v37 = (char *)__DataStorage._bytes.getter();
                if (v37)
                {
                  uint64_t v38 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)a2, v38)) {
                    goto LABEL_139;
                  }
                  v37 += (int)a2 - v38;
                }
                uint64_t v39 = __DataStorage._length.getter();
                size_t v40 = (a2 >> 32) - (int)a2;
                if (v39 < v79) {
                  size_t v40 = v39;
                }
                if (!v35) {
                  goto LABEL_145;
                }
                if (!v37) {
                  goto LABEL_146;
                }
                int v33 = memcmp(v35, v37, v40);
                sub_10000BF6C(a2, a3);
                swift_release();
              }
              else
              {
                uint64_t v59 = *(void *)(a2 + 16);
                uint64_t v77 = *(void *)(a2 + 24);
                swift_retain();
                swift_retain();
                uint64_t v60 = (char *)__DataStorage._bytes.getter();
                if (v60)
                {
                  uint64_t v61 = __DataStorage._offset.getter();
                  if (__OFSUB__(v59, v61)) {
                    goto LABEL_138;
                  }
                  v60 += v59 - v61;
                }
                BOOL v22 = __OFSUB__(v77, v59);
                int64_t v62 = v77 - v59;
                if (v22) {
                  goto LABEL_133;
                }
                uint64_t v63 = __DataStorage._length.getter();
                if (v63 >= v62) {
                  size_t v64 = v62;
                }
                else {
                  size_t v64 = v63;
                }
                if (!v35) {
                  goto LABEL_151;
                }
                a3 = v78;
                if (!v60) {
                  goto LABEL_152;
                }
                int v33 = memcmp(v35, v60, v64);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              sub_10000BF6C(v14, v15);
              uint64_t v6 = v83;
              goto LABEL_114;
            case 3uLL:
              *(void *)&__s1[6] = 0;
              *(void *)__s1 = 0;
              if (!v11) {
                goto LABEL_67;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_127;
                }
                sub_100015DDC(a2, a3);
                uint64_t v41 = __DataStorage._bytes.getter();
                if (!v41) {
                  goto LABEL_147;
                }
                uint64_t v24 = v41;
                uint64_t v42 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v42;
                if (__OFSUB__((int)a2, v42)) {
                  goto LABEL_132;
                }
LABEL_63:
                uint64_t v43 = __DataStorage._length.getter();
                if (v43 >= v79) {
                  size_t v44 = (a2 >> 32) - (int)a2;
                }
                else {
                  size_t v44 = v43;
                }
                int v45 = memcmp(__s1, (const void *)(v24 + v26), v44);
                a3 = v78;
                sub_10000BF6C(a2, v78);
                goto LABEL_100;
              }
              uint64_t v54 = *(void *)(a2 + 16);
              uint64_t v55 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v56 = __DataStorage._offset.getter();
                if (__OFSUB__(v54, v56)) {
                  goto LABEL_137;
                }
                v50 += v54 - v56;
              }
              BOOL v22 = __OFSUB__(v55, v54);
              int64_t v52 = v55 - v54;
              if (v22) {
                goto LABEL_130;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_149;
              }
LABEL_79:
              if (v53 >= v52) {
                size_t v57 = v52;
              }
              else {
                size_t v57 = v53;
              }
              int v58 = memcmp(__s1, v50, v57);
              swift_release();
              swift_release();
              sub_10000BF6C(v14, v15);
              uint64_t v6 = v83;
              uint64_t v10 = v85;
              if (!v58) {
                goto LABEL_118;
              }
              break;
            default:
              *(void *)__s1 = v14;
              *(_WORD *)&__s1[8] = v15;
              __s1[10] = BYTE2(v15);
              __s1[11] = BYTE3(v15);
              __s1[12] = BYTE4(v15);
              __s1[13] = BYTE5(v15);
              if (!v11)
              {
LABEL_67:
                uint64_t v88 = a2;
                __int16 v89 = a3;
                char v90 = BYTE2(a3);
                char v91 = BYTE3(a3);
                char v92 = BYTE4(a3);
                char v93 = BYTE5(a3);
                uint64_t v46 = __s1;
                unint64_t v47 = &v88;
                goto LABEL_99;
              }
              if (v11 == 1)
              {
                if (v80 < (int)a2) {
                  goto LABEL_126;
                }
                sub_100015DDC(a2, a3);
                uint64_t v23 = __DataStorage._bytes.getter();
                if (!v23)
                {
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_143:
                  __break(1u);
LABEL_144:
                  __break(1u);
LABEL_145:
                  __break(1u);
LABEL_146:
                  __break(1u);
LABEL_147:
                  __DataStorage._length.getter();
                  __break(1u);
LABEL_148:
                  __break(1u);
LABEL_149:
                  __break(1u);
LABEL_150:
                  __break(1u);
LABEL_151:
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
LABEL_155:
                  __break(1u);
                  JUMPOUT(0x10003EF04);
                }
                uint64_t v24 = v23;
                uint64_t v25 = __DataStorage._offset.getter();
                uint64_t v26 = (int)a2 - v25;
                if (__OFSUB__((int)a2, v25)) {
                  goto LABEL_131;
                }
                goto LABEL_63;
              }
              uint64_t v48 = *(void *)(a2 + 16);
              uint64_t v49 = *(void *)(a2 + 24);
              swift_retain();
              swift_retain();
              uint64_t v50 = (char *)__DataStorage._bytes.getter();
              if (v50)
              {
                uint64_t v51 = __DataStorage._offset.getter();
                if (__OFSUB__(v48, v51)) {
                  goto LABEL_136;
                }
                v50 += v48 - v51;
              }
              BOOL v22 = __OFSUB__(v49, v48);
              int64_t v52 = v49 - v48;
              if (v22) {
                goto LABEL_129;
              }
              uint64_t v53 = __DataStorage._length.getter();
              if (!v50) {
                goto LABEL_148;
              }
              goto LABEL_79;
          }
LABEL_8:
          unint64_t v9 = (v9 + 1) & v86;
          if (((*(void *)(v10 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
            goto LABEL_116;
          }
          continue;
        }
LABEL_117:
        sub_10000BF6C(v14, v15);
LABEL_118:
        swift_bridgeObjectRelease();
        sub_10000BF6C(a2, a3);
        uint64_t v74 = (uint64_t *)(*(void *)(*(void *)v81 + 48) + 16 * v9);
        uint64_t v75 = *v74;
        unint64_t v76 = v74[1];
        *a1 = *v74;
        a1[1] = v76;
        sub_100015DDC(v75, v76);
        return 0;
    }
  }
}

uint64_t sub_10003EF34(void *a1, void *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    id v8 = a2;
    uint64_t v9 = __CocoaSet.member(for:)();

    if (v9)
    {
      swift_bridgeObjectRelease();

      sub_10001958C(0, (unint64_t *)&qword_100073C38);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      *a1 = v27;
      swift_unknownObjectRelease();
      return 0;
    }
    uint64_t result = __CocoaSet.count.getter();
    if (__OFADD__(result, 1))
    {
      __break(1u);
      return result;
    }
    Swift::Int v22 = sub_10003F1D4(v7, result + 1);
    uint64_t v28 = (void *)v22;
    if (*(void *)(v22 + 24) <= *(void *)(v22 + 16))
    {
      id v26 = v8;
      sub_10003F6AC();
      uint64_t v23 = v28;
    }
    else
    {
      uint64_t v23 = (void *)v22;
      id v24 = v8;
    }
    sub_10000C028((uint64_t)v8, v23);
    *uint64_t v3 = (uint64_t)v23;
  }
  else
  {
    Swift::Int v11 = *(void *)(v6 + 40);
    swift_bridgeObjectRetain();
    Swift::Int v12 = NSObject._rawHashValue(seed:)(v11);
    uint64_t v13 = -1 << *(unsigned char *)(v6 + 32);
    unint64_t v14 = v12 & ~v13;
    if ((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      sub_10001958C(0, (unint64_t *)&qword_100073C38);
      id v15 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
      char v16 = static NSObject.== infix(_:_:)();

      if (v16)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v20 = *(void **)(*(void *)(*v3 + 48) + 8 * v14);
        *a1 = v20;
        id v21 = v20;
        return 0;
      }
      uint64_t v17 = ~v13;
      while (1)
      {
        unint64_t v14 = (v14 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
          break;
        }
        id v18 = *(id *)(*(void *)(v6 + 48) + 8 * v14);
        char v19 = static NSObject.== infix(_:_:)();

        if (v19) {
          goto LABEL_12;
        }
      }
    }
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    id v8 = a2;
    sub_1000407EC((uint64_t)v8, v14, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v29;
  }
  swift_bridgeObjectRelease();
  *a1 = v8;
  return 1;
}

Swift::Int sub_10003F1D4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100007370(&qword_100073C48);
    uint64_t v2 = static _SetStorage.convert(_:capacity:)();
    uint64_t v14 = v2;
    __CocoaSet.makeIterator()();
    if (__CocoaSet.Iterator.next()())
    {
      sub_10001958C(0, (unint64_t *)&qword_100073C38);
      do
      {
        swift_dynamicCast();
        uint64_t v2 = v14;
        if (*(void *)(v14 + 24) <= *(void *)(v14 + 16))
        {
          sub_10003F6AC();
          uint64_t v2 = v14;
        }
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
        uint64_t v4 = v2 + 56;
        uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
        unint64_t v6 = result & ~v5;
        unint64_t v7 = v6 >> 6;
        if (((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6))) != 0)
        {
          unint64_t v8 = __clz(__rbit64((-1 << v6) & ~*(void *)(v2 + 56 + 8 * (v6 >> 6)))) | v6 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          char v9 = 0;
          unint64_t v10 = (unint64_t)(63 - v5) >> 6;
          do
          {
            if (++v7 == v10 && (v9 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            BOOL v11 = v7 == v10;
            if (v7 == v10) {
              unint64_t v7 = 0;
            }
            v9 |= v11;
            uint64_t v12 = *(void *)(v4 + 8 * v7);
          }
          while (v12 == -1);
          unint64_t v8 = __clz(__rbit64(~v12)) + (v7 << 6);
        }
        *(void *)(v4 + ((v8 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v8;
        *(void *)(*(void *)(v2 + 48) + 8 * v8) = v13;
        ++*(void *)(v2 + 16);
      }
      while (__CocoaSet.Iterator.next()());
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return (Swift::Int)&_swiftEmptySetSingleton;
  }
  return v2;
}

uint64_t sub_10003F3CC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100007370(&qword_100074518);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      char v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      uint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_10003F6AC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100007370(&qword_100073C48);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v28 = v0;
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v6 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v7 = ~(-1 << v5);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v8 = v7 & *(void *)(v2 + 56);
    int64_t v9 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v10 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0;
    while (1)
    {
      if (v8)
      {
        unint64_t v14 = __clz(__rbit64(v8));
        v8 &= v8 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }
      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = v6[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v9) {
            goto LABEL_33;
          }
          unint64_t v17 = v6[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v9) {
              goto LABEL_33;
            }
            unint64_t v17 = v6[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v9)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v28;
                uint64_t v27 = 1 << *(unsigned char *)(v2 + 32);
                if (v27 > 63) {
                  bzero((void *)(v2 + 56), ((unint64_t)(v27 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v6 = -1 << v27;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v6[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v12 >= v9) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v6[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v12 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v8 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
      }
      uint64_t v19 = *(void *)(*(void *)(v2 + 48) + 8 * v15);
      uint64_t result = NSObject._rawHashValue(seed:)(*(void *)(v4 + 40));
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6))) != 0)
      {
        unint64_t v13 = __clz(__rbit64((-1 << v21) & ~*(void *)(v10 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v23 = 0;
        unint64_t v24 = (unint64_t)(63 - v20) >> 6;
        do
        {
          if (++v22 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v25 = v22 == v24;
          if (v22 == v24) {
            unint64_t v22 = 0;
          }
          v23 |= v25;
          uint64_t v26 = *(void *)(v10 + 8 * v22);
        }
        while (v26 == -1);
        unint64_t v13 = __clz(__rbit64(~v26)) + (v22 << 6);
      }
      *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
      *(void *)(*(void *)(v4 + 48) + 8 * v13) = v19;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

uint64_t sub_10003F94C()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100007370(&qword_1000744C0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    uint64_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    while (1)
    {
      if (v7)
      {
        unint64_t v14 = __clz(__rbit64(v7));
        v7 &= v7 - 1;
        unint64_t v15 = v14 | (v11 << 6);
      }
      else
      {
        int64_t v16 = v11 + 1;
        if (__OFADD__(v11, 1))
        {
LABEL_38:
          __break(1u);
LABEL_39:
          __break(1u);
          return result;
        }
        if (v16 >= v8) {
          goto LABEL_33;
        }
        unint64_t v17 = v30[v16];
        ++v11;
        if (!v17)
        {
          int64_t v11 = v16 + 1;
          if (v16 + 1 >= v8) {
            goto LABEL_33;
          }
          unint64_t v17 = v30[v11];
          if (!v17)
          {
            int64_t v11 = v16 + 2;
            if (v16 + 2 >= v8) {
              goto LABEL_33;
            }
            unint64_t v17 = v30[v11];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v8)
              {
LABEL_33:
                swift_release();
                uint64_t v1 = v0;
                uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
                if (v29 > 63) {
                  bzero(v30, ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *uint64_t v30 = -1 << v29;
                }
                *(void *)(v2 + 16) = 0;
                break;
              }
              unint64_t v17 = v30[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v11 = v18 + 1;
                  if (__OFADD__(v18, 1)) {
                    goto LABEL_39;
                  }
                  if (v11 >= v8) {
                    goto LABEL_33;
                  }
                  unint64_t v17 = v30[v11];
                  ++v18;
                  if (v17) {
                    goto LABEL_23;
                  }
                }
              }
              int64_t v11 = v18;
            }
          }
        }
LABEL_23:
        unint64_t v7 = (v17 - 1) & v17;
        unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
      }
      uint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
      uint64_t v20 = *v19;
      uint64_t v21 = v19[1];
      Hasher.init(_seed:)();
      Data.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v23 = result & ~v22;
      unint64_t v24 = v23 >> 6;
      if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
      {
        unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v25 = 0;
        unint64_t v26 = (unint64_t)(63 - v22) >> 6;
        do
        {
          if (++v24 == v26 && (v25 & 1) != 0)
          {
            __break(1u);
            goto LABEL_38;
          }
          BOOL v27 = v24 == v26;
          if (v24 == v26) {
            unint64_t v24 = 0;
          }
          v25 |= v27;
          uint64_t v28 = *(void *)(v9 + 8 * v24);
        }
        while (v28 == -1);
        unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
      }
      *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      unint64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
      void *v13 = v20;
      v13[1] = v21;
      ++*(void *)(v4 + 16);
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

Swift::Int sub_10003FC2C(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_10003F3CC();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)sub_100040974();
      goto LABEL_22;
    }
    sub_100040E88();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

Swift::Int sub_10003FDC8(Swift::Int result, unint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 <= v9 || (a4 & 1) == 0)
  {
    if (a4)
    {
      sub_10003F94C();
    }
    else
    {
      if (v10 > v9)
      {
        uint64_t result = (Swift::Int)sub_100040B28();
        goto LABEL_123;
      }
      sub_100041138();
    }
    uint64_t v11 = *v4;
    Hasher.init(_seed:)();
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
    a3 = result & ~v12;
    uint64_t v13 = v11 + 56;
    if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
    {
      uint64_t v88 = ~v12;
      uint64_t v84 = v11;
      uint64_t v86 = v11 + 56;
      BOOL v14 = __OFSUB__(HIDWORD(v8), v8);
      BOOL v85 = v14;
      unint64_t v87 = a2 >> 62;
      uint64_t v82 = (v8 >> 32) - (int)v8;
      uint64_t v83 = v8 >> 32;
      uint64_t v81 = v4;
      while (1)
      {
        unint64_t v15 = (uint64_t *)(*(void *)(v11 + 48) + 16 * a3);
        uint64_t v17 = *v15;
        unint64_t v16 = v15[1];
        uint64_t v18 = 0;
        switch(v16 >> 62)
        {
          case 1uLL:
            if (__OFSUB__(HIDWORD(v17), v17))
            {
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
LABEL_144:
              __break(1u);
LABEL_145:
              __break(1u);
LABEL_146:
              __break(1u);
LABEL_147:
              __break(1u);
LABEL_148:
              __break(1u);
            }
            uint64_t v18 = HIDWORD(v17) - (int)v17;
LABEL_21:
            sub_100015DDC(v17, v16);
LABEL_22:
            uint64_t v21 = BYTE6(a2);
            switch(a2 >> 62)
            {
              case 1uLL:
                uint64_t v21 = HIDWORD(v8) - (int)v8;
                if (v85) {
                  goto LABEL_127;
                }
                goto LABEL_26;
              case 2uLL:
                uint64_t v23 = *(void *)(v8 + 16);
                uint64_t v22 = *(void *)(v8 + 24);
                BOOL v24 = __OFSUB__(v22, v23);
                uint64_t v21 = v22 - v23;
                if (!v24) {
                  goto LABEL_26;
                }
                goto LABEL_128;
              case 3uLL:
                if (v18) {
                  goto LABEL_14;
                }
                goto LABEL_163;
              default:
LABEL_26:
                if (v18 != v21)
                {
LABEL_14:
                  uint64_t result = sub_10000BF6C(v17, v16);
                  goto LABEL_15;
                }
                if (v18 < 1) {
                  goto LABEL_163;
                }
                break;
            }
            break;
          case 2uLL:
            uint64_t v20 = *(void *)(v17 + 16);
            uint64_t v19 = *(void *)(v17 + 24);
            uint64_t v18 = v19 - v20;
            if (!__OFSUB__(v19, v20)) {
              goto LABEL_21;
            }
            goto LABEL_126;
          case 3uLL:
            goto LABEL_22;
          default:
            uint64_t v18 = BYTE6(v16);
            goto LABEL_22;
        }
        switch(v16 >> 62)
        {
          case 1uLL:
            if ((int)v17 > v17 >> 32) {
              goto LABEL_130;
            }
            uint64_t v43 = (unsigned char *)__DataStorage._bytes.getter();
            if (!v43) {
              goto LABEL_63;
            }
            uint64_t v44 = __DataStorage._offset.getter();
            if (__OFSUB__((int)v17, v44)) {
              goto LABEL_132;
            }
            v43 += (int)v17 - v44;
LABEL_63:
            __DataStorage._length.getter();
            uint64_t v13 = v86;
            if (!v87)
            {
              *(void *)__s1 = v8;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v43) {
                goto LABEL_158;
              }
              uint64_t v50 = (uint64_t *)__s1;
              uint64_t v49 = v43;
LABEL_107:
              int v68 = memcmp(v49, v50, BYTE6(a2));
              uint64_t result = sub_10000BF6C(v17, v16);
              if (!v68) {
                goto LABEL_164;
              }
              goto LABEL_15;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_141;
              }
              swift_retain();
              uint64_t v45 = __DataStorage._bytes.getter();
              if (v45)
              {
                uint64_t v46 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v8, v46)) {
                  goto LABEL_148;
                }
                v45 += (int)v8 - v46;
              }
              uint64_t v47 = __DataStorage._length.getter();
              uint64_t v48 = (v8 >> 32) - (int)v8;
              if (v47 < v82) {
                uint64_t v48 = v47;
              }
              if (!v43) {
                goto LABEL_153;
              }
              if (!v45) {
                goto LABEL_154;
              }
              size_t v41 = v48;
              uint64_t v42 = v43;
              size_t v40 = (const void *)v45;
              goto LABEL_74;
            }
            uint64_t v69 = *(void *)(v8 + 16);
            uint64_t v70 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            size_t v71 = (char *)__DataStorage._bytes.getter();
            if (v71)
            {
              uint64_t v72 = __DataStorage._offset.getter();
              if (__OFSUB__(v69, v72)) {
                goto LABEL_147;
              }
              v71 += v69 - v72;
            }
            BOOL v24 = __OFSUB__(v70, v69);
            int64_t v73 = v70 - v69;
            if (v24) {
              goto LABEL_142;
            }
            uint64_t v74 = __DataStorage._length.getter();
            if (v74 >= v73) {
              size_t v75 = v73;
            }
            else {
              size_t v75 = v74;
            }
            uint64_t v5 = v81;
            if (!v43) {
              goto LABEL_161;
            }
            uint64_t v11 = v84;
            if (!v71) {
              goto LABEL_162;
            }
            int v36 = memcmp(v43, v71, v75);
            swift_release();
            goto LABEL_119;
          case 2uLL:
            uint64_t v29 = *(void *)(v17 + 16);
            swift_retain();
            swift_retain();
            uint64_t v30 = (char *)__DataStorage._bytes.getter();
            if (!v30) {
              goto LABEL_39;
            }
            uint64_t v31 = __DataStorage._offset.getter();
            if (__OFSUB__(v29, v31)) {
              goto LABEL_131;
            }
            v30 += v29 - v31;
LABEL_39:
            __DataStorage._length.getter();
            uint64_t v11 = v84;
            if (v87)
            {
              if (v87 == 1)
              {
                if (v83 < (int)v8) {
                  goto LABEL_135;
                }
                swift_retain();
                size_t v32 = (char *)__DataStorage._bytes.getter();
                if (v32)
                {
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v8, v33)) {
                    goto LABEL_146;
                  }
                  v32 += (int)v8 - v33;
                }
                uint64_t v34 = __DataStorage._length.getter();
                size_t v35 = (v8 >> 32) - (int)v8;
                if (v34 < v82) {
                  size_t v35 = v34;
                }
                if (!v30) {
                  goto LABEL_150;
                }
                if (!v32) {
                  goto LABEL_151;
                }
                int v36 = memcmp(v30, v32, v35);
                sub_10000BF6C(v8, a2);
                swift_release();
              }
              else
              {
                uint64_t v62 = *(void *)(v8 + 16);
                uint64_t v80 = *(void *)(v8 + 24);
                swift_retain();
                swift_retain();
                uint64_t v63 = (char *)__DataStorage._bytes.getter();
                if (v63)
                {
                  uint64_t v64 = __DataStorage._offset.getter();
                  if (__OFSUB__(v62, v64)) {
                    goto LABEL_145;
                  }
                  v63 += v62 - v64;
                }
                BOOL v24 = __OFSUB__(v80, v62);
                int64_t v65 = v80 - v62;
                if (v24) {
                  goto LABEL_140;
                }
                uint64_t v66 = __DataStorage._length.getter();
                if (v66 >= v65) {
                  size_t v67 = v65;
                }
                else {
                  size_t v67 = v66;
                }
                if (!v30) {
                  goto LABEL_159;
                }
                uint64_t v11 = v84;
                if (!v63) {
                  goto LABEL_160;
                }
                int v36 = memcmp(v30, v63, v67);
                swift_release();
                swift_release();
                swift_release();
              }
              swift_release();
              uint64_t result = sub_10000BF6C(v17, v16);
              uint64_t v5 = v81;
            }
            else
            {
              *(void *)__s1 = v8;
              *(_WORD *)&__s1[8] = a2;
              __s1[10] = BYTE2(a2);
              __s1[11] = BYTE3(a2);
              __s1[12] = BYTE4(a2);
              __s1[13] = BYTE5(a2);
              if (!v30) {
                goto LABEL_157;
              }
              int v36 = memcmp(v30, __s1, BYTE6(a2));
              swift_release();
LABEL_119:
              swift_release();
LABEL_120:
              uint64_t result = sub_10000BF6C(v17, v16);
            }
            uint64_t v13 = v86;
            if (!v36) {
              goto LABEL_164;
            }
            goto LABEL_15;
          case 3uLL:
            *(void *)&__s1[6] = 0;
            *(void *)__s1 = 0;
            if (!v87) {
              goto LABEL_75;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_134;
              }
              sub_100015DDC(v8, a2);
              uint64_t v37 = __DataStorage._bytes.getter();
              if (!v37) {
                goto LABEL_152;
              }
              uint64_t v26 = v37;
              uint64_t v38 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v38;
              if (__OFSUB__((int)v8, v38)) {
                goto LABEL_139;
              }
              goto LABEL_55;
            }
            uint64_t v57 = *(void *)(v8 + 16);
            uint64_t v58 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v53 = (char *)__DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v59 = __DataStorage._offset.getter();
              if (__OFSUB__(v57, v59)) {
                goto LABEL_144;
              }
              v53 += v57 - v59;
            }
            BOOL v24 = __OFSUB__(v58, v57);
            int64_t v55 = v58 - v57;
            if (v24) {
              goto LABEL_137;
            }
            uint64_t v56 = __DataStorage._length.getter();
            uint64_t v11 = v84;
            if (!v53) {
              goto LABEL_156;
            }
            goto LABEL_87;
          default:
            *(void *)__s1 = v17;
            *(_WORD *)&__s1[8] = v16;
            __s1[10] = BYTE2(v16);
            __s1[11] = BYTE3(v16);
            __s1[12] = BYTE4(v16);
            __s1[13] = BYTE5(v16);
            if (!v87)
            {
LABEL_75:
              uint64_t v89 = v8;
              __int16 v90 = a2;
              char v91 = BYTE2(a2);
              char v92 = BYTE3(a2);
              char v93 = BYTE4(a2);
              char v94 = BYTE5(a2);
              uint64_t v49 = __s1;
              uint64_t v50 = &v89;
              goto LABEL_107;
            }
            if (v87 == 1)
            {
              if (v83 < (int)v8) {
                goto LABEL_133;
              }
              sub_100015DDC(v8, a2);
              uint64_t v25 = __DataStorage._bytes.getter();
              if (!v25)
              {
                __DataStorage._length.getter();
                __break(1u);
LABEL_150:
                __break(1u);
LABEL_151:
                __break(1u);
LABEL_152:
                __DataStorage._length.getter();
                __break(1u);
LABEL_153:
                __break(1u);
LABEL_154:
                __break(1u);
LABEL_155:
                __break(1u);
LABEL_156:
                __break(1u);
LABEL_157:
                __break(1u);
LABEL_158:
                __break(1u);
LABEL_159:
                __break(1u);
LABEL_160:
                __break(1u);
LABEL_161:
                __break(1u);
LABEL_162:
                __break(1u);
LABEL_163:
                sub_10000BF6C(v17, v16);
LABEL_164:
                ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x1000407BCLL);
              }
              uint64_t v26 = v25;
              uint64_t v27 = __DataStorage._offset.getter();
              uint64_t v28 = (int)v8 - v27;
              if (__OFSUB__((int)v8, v27)) {
                goto LABEL_138;
              }
LABEL_55:
              uint64_t v39 = __DataStorage._length.getter();
              size_t v40 = (const void *)(v26 + v28);
              if (v39 >= v82) {
                size_t v41 = (v8 >> 32) - (int)v8;
              }
              else {
                size_t v41 = v39;
              }
              uint64_t v42 = __s1;
LABEL_74:
              int v36 = memcmp(v42, v40, v41);
              sub_10000BF6C(v8, a2);
              goto LABEL_120;
            }
            uint64_t v51 = *(void *)(v8 + 16);
            uint64_t v52 = *(void *)(v8 + 24);
            swift_retain();
            swift_retain();
            uint64_t v53 = (char *)__DataStorage._bytes.getter();
            if (v53)
            {
              uint64_t v54 = __DataStorage._offset.getter();
              if (__OFSUB__(v51, v54)) {
                goto LABEL_143;
              }
              v53 += v51 - v54;
            }
            BOOL v24 = __OFSUB__(v52, v51);
            int64_t v55 = v52 - v51;
            if (v24) {
              goto LABEL_136;
            }
            uint64_t v56 = __DataStorage._length.getter();
            uint64_t v11 = v84;
            if (!v53) {
              goto LABEL_155;
            }
LABEL_87:
            if (v56 >= v55) {
              size_t v60 = v55;
            }
            else {
              size_t v60 = v56;
            }
            int v61 = memcmp(__s1, v53, v60);
            swift_release();
            swift_release();
            uint64_t result = sub_10000BF6C(v17, v16);
            uint64_t v13 = v86;
            if (!v61) {
              goto LABEL_164;
            }
LABEL_15:
            a3 = (a3 + 1) & v88;
            if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
              goto LABEL_123;
            }
            break;
        }
      }
    }
  }
LABEL_123:
  uint64_t v76 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v77 = (uint64_t *)(*(void *)(v76 + 48) + 16 * a3);
  *uint64_t v77 = v8;
  v77[1] = a2;
  uint64_t v78 = *(void *)(v76 + 16);
  BOOL v24 = __OFADD__(v78, 1);
  uint64_t v79 = v78 + 1;
  if (v24) {
    goto LABEL_129;
  }
  *(void *)(v76 + 16) = v79;
  return result;
}

void sub_1000407EC(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    sub_10003F6AC();
  }
  else
  {
    if (v7 > v6)
    {
      sub_100040CDC();
      goto LABEL_14;
    }
    sub_1000413EC();
  }
  uint64_t v8 = *v3;
  Swift::Int v9 = NSObject._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  a2 = v9 & ~v10;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    sub_10001958C(0, (unint64_t *)&qword_100073C38);
    id v11 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
    char v12 = static NSObject.== infix(_:_:)();

    if (v12)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v13 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        id v14 = *(id *)(*(void *)(v8 + 48) + 8 * a2);
        char v15 = static NSObject.== infix(_:_:)();

        if (v15) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v16 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = a1;
  uint64_t v17 = *(void *)(v16 + 16);
  BOOL v18 = __OFADD__(v17, 1);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
}

void *sub_100040974()
{
  uint64_t v1 = v0;
  sub_100007370(&qword_100074518);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = v17[1];
    uint64_t v19 = (void *)(*(void *)(v4 + 48) + v16);
    void *v19 = *v17;
    v19[1] = v18;
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 3;
  if (v22 >= v13) {
    goto LABEL_28;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_100040B28()
{
  uint64_t v1 = v0;
  sub_100007370(&qword_1000744C0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    long long v17 = *(_OWORD *)(*(void *)(v2 + 48) + v16);
    *(_OWORD *)(*(void *)(v4 + 48) + v16) = v17;
    uint64_t result = (void *)sub_100015DDC(v17, *((unint64_t *)&v17 + 1));
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

id sub_100040CDC()
{
  uint64_t v1 = v0;
  sub_100007370(&qword_100073C48);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }
LABEL_27:
    unint64_t v12 = (v19 - 1) & v19;
    unint64_t v15 = __clz(__rbit64(v19)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    long long v17 = *(void **)(*(void *)(v2 + 48) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    id result = v17;
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v13) {
    goto LABEL_28;
  }
  unint64_t v19 = *(void *)(v6 + 8 * v20);
  if (v19)
  {
    int64_t v9 = v20;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v9 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v9);
    ++v20;
    if (v19) {
      goto LABEL_27;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_100040E88()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100007370(&qword_100074518);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (void *)(*(void *)(v4 + 48) + 16 * v12);
    void *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100041138()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100007370(&qword_1000744C0);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v11 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v11;
    if (!v17)
    {
      int64_t v11 = v16 + 1;
      if (v16 + 1 >= v29) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v11);
      if (!v17)
      {
        int64_t v11 = v16 + 2;
        if (v16 + 2 >= v29) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v11);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v11 << 6);
LABEL_24:
    unint64_t v19 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    Hasher.init(_seed:)();
    sub_100015DDC(v20, v21);
    Data.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v22 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v23 = result & ~v22;
    unint64_t v24 = v23 >> 6;
    if (((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6))) != 0)
    {
      unint64_t v12 = __clz(__rbit64((-1 << v23) & ~*(void *)(v9 + 8 * (v23 >> 6)))) | v23 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v22) >> 6;
      do
      {
        if (++v24 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v27 = v24 == v26;
        if (v24 == v26) {
          unint64_t v24 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v9 + 8 * v24);
      }
      while (v28 == -1);
      unint64_t v12 = __clz(__rbit64(~v28)) + (v24 << 6);
    }
    *(void *)(v9 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
    int64_t v13 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v12);
    uint64_t *v13 = v20;
    v13[1] = v21;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v29)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v11 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v11 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v11);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1000413EC()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  sub_100007370(&qword_100073C48);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_35:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v28 = v0;
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v9 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v10 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v14 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_24;
    }
    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v16 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v9) {
        goto LABEL_33;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v9) {
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v12 << 6);
LABEL_24:
    Swift::Int v19 = *(void *)(v4 + 40);
    id v20 = *(id *)(*(void *)(v2 + 48) + 8 * v15);
    uint64_t result = NSObject._rawHashValue(seed:)(v19);
    uint64_t v21 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v22 = result & ~v21;
    unint64_t v23 = v22 >> 6;
    if (((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6))) != 0)
    {
      unint64_t v13 = __clz(__rbit64((-1 << v22) & ~*(void *)(v10 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_36;
        }
        BOOL v26 = v23 == v25;
        if (v23 == v25) {
          unint64_t v23 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v10 + 8 * v23);
      }
      while (v27 == -1);
      unint64_t v13 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(void *)(v10 + ((v13 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v13;
    *(void *)(*(void *)(v4 + 48) + 8 * v13) = v20;
    ++*(void *)(v4 + 16);
  }
  int64_t v18 = v16 + 3;
  if (v18 >= v9)
  {
LABEL_33:
    uint64_t result = swift_release_n();
    uint64_t v1 = v28;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v6 + 8 * v18);
  if (v17)
  {
    int64_t v12 = v18;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v12 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v12 >= v9) {
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v12);
    ++v18;
    if (v17) {
      goto LABEL_23;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_100041668(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t __s1 = a1;
  __int16 v9 = a2;
  char v10 = BYTE2(a2);
  char v11 = BYTE3(a2);
  char v12 = BYTE4(a2);
  char v13 = BYTE5(a2);
  sub_10003DAB0((uint64_t)&__s1, a3, a4, &v7);
  if (!v4) {
    char v5 = v7;
  }
  return v5 & 1;
}

uint64_t sub_100041740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_9:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  __DataStorage._length.getter();
  sub_10003DAB0(v11, a4, a5, &v13);
  if (!v5) {
    char v12 = v13;
  }
  return v12 & 1;
}

uint64_t sub_1000417F8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x100041A60);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_100015DDC(a3, a4);
                  sub_100015DDC(a1, a2);
                  char v17 = sub_100041740((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_10000BF6C(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_100015DDC(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_100041740(v21, v22, v20, a3, a4);
                  sub_10000BF6C(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_100015DDC(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_100015DDC(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_100041668(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_10000BF6C(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

void sub_100041A90(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v55 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  char v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_100007370(&qword_1000744C8);
  __chkstk_darwin(v8 - 8, v9);
  BOOL v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CKSyncEngine.State.Serialization();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v17 = [self defaultManager];
  sub_100042C14(a1, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_100015758((uint64_t)v11, &qword_1000744C8);
    URL.path(percentEncoded:)(1);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v19 = [v17 fileExistsAtPath:v18];

    if (v19)
    {
      URL._bridgeToObjectiveC()(v20);
      uint64_t v22 = v21;
      id v57 = 0;
      unsigned int v23 = [v17 removeItemAtURL:v21 error:&v57];

      if (v23)
      {
        id v24 = v57;
      }
      else
      {
        id v47 = v57;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }
    }
  }
  else
  {
    uint64_t v52 = v7;
    uint64_t v53 = v4;
    uint64_t v54 = a2;
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v16, v11, v12);
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    uint64_t v25 = PropertyListEncoder.init()();
    dispatch thunk of PropertyListEncoder.outputFormat.setter();
    sub_100007370(&qword_1000744D0);
    BOOL v26 = (int *)(sub_100007370(&qword_1000744D8) - 8);
    unint64_t v27 = (*(unsigned __int8 *)(*(void *)v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v26 + 80);
    uint64_t v28 = v12;
    int64_t v29 = v16;
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_10005FEC0;
    uint64_t v31 = (void *)(v30 + v27);
    unint64_t v32 = v30 + v27 + v26[14];
    *uint64_t v31 = 0xD000000000000014;
    v31[1] = 0x8000000100061B30;
    (*(void (**)(unint64_t, char *, uint64_t))(v13 + 16))(v32, v29, v28);
    id v57 = (id)sub_100049D14(v30);
    sub_100007370(&qword_1000744E0);
    sub_100042C7C();
    uint64_t v33 = v56;
    uint64_t v34 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v33)
    {
      swift_bridgeObjectRelease();

      swift_release();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v29, v28);
    }
    else
    {
      uint64_t v36 = v34;
      unint64_t v49 = v35;
      uint64_t v50 = v29;
      uint64_t v51 = v28;
      uint64_t v56 = v25;
      swift_bridgeObjectRelease();
      URL.path(percentEncoded:)(1);
      NSString v37 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unsigned __int8 v38 = [v17 fileExistsAtPath:v37];

      if (v38) {
        goto LABEL_9;
      }
      uint64_t v39 = v52;
      URL.deletingLastPathComponent()();
      URL._bridgeToObjectiveC()(v40);
      uint64_t v42 = v41;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v53);
      id v57 = 0;
      unsigned int v43 = [v17 createDirectoryAtURL:v42 withIntermediateDirectories:1 attributes:0 error:&v57];

      id v44 = v57;
      if (v43)
      {
LABEL_9:
        uint64_t v45 = v36;
        unint64_t v46 = v49;
        Data.write(to:options:)();
        (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v51);
        sub_10000BF6C(v45, v46);

        swift_release();
      }
      else
      {
        uint64_t v48 = v44;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10000BF6C(v36, v49);

        swift_release();
        (*(void (**)(char *, uint64_t))(v13 + 8))(v50, v51);
      }
    }
  }
}

uint64_t sub_100042060(void *a1)
{
  uint64_t v2 = sub_100007370(&qword_1000740D8);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  id v11 = a1;
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v28 = v5;
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    uint64_t v30 = v25;
    *(_DWORD *)uint64_t v14 = 136446210;
    v24[1] = v14 + 4;
    id v15 = v11;
    uint64_t v26 = v6;
    id v16 = v15;
    id v17 = [v15 description];
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v27 = v11;
    unint64_t v20 = v19;

    uint64_t v21 = v18;
    uint64_t v5 = v28;
    uint64_t v29 = sub_1000067CC(v21, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    id v11 = v27;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Record was deleted from server: %{public}s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v26);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  type metadata accessor for UsageStore();
  static UsageStore.shared.getter();
  uint64_t v22 = type metadata accessor for UsageItemRecord();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v5, 1, 1, v22);
  UsageStore.subscript.setter((uint64_t)v5, (uint64_t)v11);
  return swift_release();
}

void sub_100042364(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = [a1 zoneID];
  static Logger.syncEngine.getter();
  id v8 = v7;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v22 = v2;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v21 = v3;
    uint64_t v12 = (uint8_t *)v11;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v24 = v20;
    *(_DWORD *)uint64_t v12 = 136446210;
    unint64_t v19 = v12 + 4;
    id v13 = v8;
    id v14 = [v13 description];
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v17 = v16;

    uint64_t v23 = sub_1000067CC(v15, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Saved zone: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v22);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  id v18 = [self defaultCenter];
  if (qword_100073A08 != -1) {
    swift_once();
  }
  [v18 postNotificationName:qword_100074C28 object:v8];
}

void sub_100042648(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  id v7 = a1;
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    uint64_t v23 = v2;
    uint64_t v11 = (uint8_t *)v10;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v25 = v22;
    *(_DWORD *)uint64_t v11 = 136446210;
    uint64_t v20 = v11 + 4;
    id v12 = v7;
    id v13 = [v12 description];
    uint64_t v21 = v3;
    id v14 = v7;
    id v15 = v13;
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v18 = v17;

    id v7 = v14;
    uint64_t v24 = sub_1000067CC(v16, v18, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Zone was deleted from server: %{public}s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v21 + 8))(v6, v23);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  id v19 = [self defaultCenter];
  if (qword_100073A00 != -1) {
    swift_once();
  }
  [v19 postNotificationName:qword_100074C20 object:v7];
}

uint64_t sub_100042918(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  id v7 = a1;
  id v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v19 = v2;
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v21 = v18;
    *(_DWORD *)uint64_t v10 = 136446210;
    v17[1] = v10 + 4;
    id v11 = v7;
    id v12 = [v11 description];
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v15 = v14;

    uint64_t v20 = sub_1000067CC(v13, v15, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Will fetch changes for %{public}s", v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v19);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_100042B58(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_100015DDC(a1, a2);
  }
  return a1;
}

uint64_t sub_100042B6C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_10000BF6C(a1, a2);
  }
  return a1;
}

uint64_t sub_100042B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10003C948(a1, a2, a3, *(void *)(v3 + 16)) & 1;
}

uint64_t sub_100042BA0()
{
  sub_10000BF6C(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100042BE8()
{
  sub_10003C22C(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100042BFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100042C0C()
{
  return swift_release();
}

uint64_t sub_100042C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007370(&qword_1000744C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100042C7C()
{
  unint64_t result = qword_1000744E8;
  if (!qword_1000744E8)
  {
    sub_10000BF24(&qword_1000744E0);
    sub_100042DD4(&qword_1000744F0, (void (*)(uint64_t))&type metadata accessor for CKSyncEngine.State.Serialization);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000744E8);
  }
  return result;
}

unint64_t sub_100042D28()
{
  unint64_t result = qword_100074508;
  if (!qword_100074508)
  {
    sub_10000BF24(&qword_1000744E0);
    sub_100042DD4(&qword_100074510, (void (*)(uint64_t))&type metadata accessor for CKSyncEngine.State.Serialization);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100074508);
  }
  return result;
}

uint64_t sub_100042DD4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100042E20(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void, void), uint64_t a6)
{
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v65 = *(void *)(v11 - 8);
  uint64_t v66 = v11;
  uint64_t v13 = __chkstk_darwin(v11, v12);
  unint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v13, v16);
  uint64_t v19 = (char *)&v60 - v18;
  uint64_t v21 = __chkstk_darwin(v17, v20);
  uint64_t v23 = (char *)&v60 - v22;
  __chkstk_darwin(v21, v24);
  uint64_t v62 = (char *)&v60 - v25;
  uint64_t v26 = sub_100007370(&qword_100074368);
  __chkstk_darwin(v26 - 8, v27);
  uint64_t v29 = (char *)&v60 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v68 = (unsigned char *)(a3 + 16);
  uint64_t v30 = swift_projectBox();
  uint64_t v67 = a6;
  if (!a1)
  {
    if (a2)
    {
      swift_errorRetain();
      static Logger.permissions.getter();
      swift_errorRetain();
      swift_errorRetain();
      unsigned __int8 v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        size_t v40 = (uint8_t *)swift_slowAlloc();
        uint64_t v62 = (char *)swift_slowAlloc();
        uint64_t v70 = v62;
        *(_DWORD *)size_t v40 = 136315138;
        id v61 = v40 + 4;
        swift_getErrorValue();
        uint64_t v41 = Error.localizedDescription.getter();
        uint64_t v69 = sub_1000067CC(v41, v42, (uint64_t *)&v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to fetch Family Circle with error: %s", v40, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
      }
      (*(void (**)(char *, uint64_t))(v65 + 8))(v15, v66);
    }
    goto LABEL_34;
  }
  id v31 = a1;
  id v32 = [v31 members];
  sub_100044D5C();
  unint64_t v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v64 = a5;
  uint64_t v63 = v30;
  if (v33 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v34) {
      goto LABEL_4;
    }
LABEL_32:

LABEL_33:
    swift_bridgeObjectRelease();
    a5 = v64;
    uint64_t v30 = v63;
    goto LABEL_34;
  }
  uint64_t v34 = *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v34) {
    goto LABEL_32;
  }
LABEL_4:
  id v61 = v31;
  uint64_t v35 = 4;
  while (1)
  {
    if ((v33 & 0xC000000000000001) != 0) {
      id v36 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v36 = *(id *)(v33 + 8 * v35);
    }
    NSString v37 = v36;
    id v31 = (id)(v35 - 3);
    if (__OFADD__(v35 - 4, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if ([v36 isMe]) {
      break;
    }

    ++v35;
    if (v31 == (id)v34)
    {

      goto LABEL_33;
    }
  }
  unsigned int v43 = (char *)[v37 memberType];
  if ((unint64_t)(v43 - 1) < 2)
  {
    swift_bridgeObjectRelease();
    id v44 = v68;
    swift_beginAccess();
    unsigned char *v44 = 1;
    uint64_t v45 = type metadata accessor for FamilyControlsError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56))(v29, 1, 1, v45);
    uint64_t v30 = v63;
    swift_beginAccess();
    sub_100044D9C((uint64_t)v29, v30);
    unint64_t v46 = v62;
    static Logger.permissions.getter();
    id v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    BOOL v49 = os_log_type_enabled(v47, v48);
    a5 = v64;
    if (v49)
    {
      uint64_t v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Family Controls permissions requirement is satisfied", v50, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v65 + 8))(v46, v66);
LABEL_34:
    id v57 = v68;
    swift_beginAccess();
    uint64_t v58 = *v57;
    swift_beginAccess();
    sub_100044CF4(v30, (uint64_t)v29);
    a5(v58, v29);
    return sub_100044C5C((uint64_t)v29);
  }
  a5 = v64;
  uint64_t v30 = v63;
  if (v43 == (char *)-1)
  {
    swift_bridgeObjectRelease();
    static Logger.permissions.getter();
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Family Controls permissions requirement is not satisfied (account is type unknown)", v53, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v65 + 8))(v19, v66);
    goto LABEL_34;
  }
  if (!v43)
  {
    swift_bridgeObjectRelease();
    static Logger.permissions.getter();
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Family Controls permissions requirement is not satisfied (account is type adult)", v56, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v65 + 8))(v23, v66);
    goto LABEL_34;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_1000435C0(void *a1)
{
  uint64_t v2 = sub_100007370(&qword_100074368);
  __chkstk_darwin(v2, v3);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  uint64_t v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  uint64_t v12 = a1;
  if (sub_100016BE4(0))
  {
    static Logger.permissions.getter();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      unint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Family Controls permission requirement for a child account type is satisfied by override", v15, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    uint64_t v16 = type metadata accessor for FamilyControlsError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v5, 1, 1, v16);
    sub_10002C464(1, (uint64_t)v5, v12);
    sub_100044C5C((uint64_t)v5);
    swift_release();
  }
  else
  {
    uint64_t v17 = swift_allocObject();
    *(unsigned char *)(v17 + 16) = 0;
    uint64_t v18 = swift_allocBox();
    uint64_t v20 = v19;
    uint64_t v21 = enum case for FamilyControlsError.invalidAccountType(_:);
    uint64_t v22 = type metadata accessor for FamilyControlsError();
    uint64_t v23 = *(void *)(v22 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 104))(v20, v21, v22);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    id v24 = [objc_allocWithZone((Class)FAFetchFamilyCircleRequest) init];
    [v24 setCachePolicy:1];
    uint64_t v25 = (void *)swift_allocObject();
    v25[2] = v17;
    v25[3] = v18;
    void v25[4] = sub_100044E98;
    v25[5] = v11;
    aBlock[4] = sub_100044EF4;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100016394;
    void aBlock[3] = &unk_10006F1B8;
    uint64_t v26 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    [v24 startRequestWithCompletionHandler:v26];
    _Block_release(v26);
    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_1000439B8(void *a1)
{
  uint64_t v2 = sub_100007370(&qword_100074368);
  __chkstk_darwin(v2 - 8, v3);
  uint64_t v5 = (char *)&v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  os_log_type_t v14 = (char *)&v30 - v13;
  unint64_t v15 = self;
  uint64_t v16 = a1;
  id v17 = [v15 sharedConnection];
  if (v17)
  {
    uint64_t v18 = v17;
    id v19 = [v17 installedMDMProfileIdentifier];

    if (v19)
    {

      if ((sub_100016BE4(1) & 1) == 0)
      {
        static Logger.permissions.getter();
        id v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Family Controls permission requirement is not satisfied (device is managed by MDM)", v26, 2u);
          swift_slowDealloc();
        }

        (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
        uint64_t v27 = enum case for FamilyControlsError.restricted(_:);
        uint64_t v28 = type metadata accessor for FamilyControlsError();
        uint64_t v29 = *(void *)(v28 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v29 + 104))(v5, v27, v28);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v5, 0, 1, v28);
        sub_10002C464(0, (uint64_t)v5, v16);
        sub_100044C5C((uint64_t)v5);
        goto LABEL_11;
      }
      static Logger.permissions.getter();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Family Controls permission requirement for no MDM management is satisfied by override", v22, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v6);
    }
    uint64_t v23 = v16;
    sub_1000435C0(v23);

LABEL_11:
    return;
  }

  __break(1u);
}

void sub_100043D18(uint64_t a1, void (*a2)(id, uint64_t), uint64_t a3, void *a4, void *a5)
{
  uint64_t v10 = sub_100007370(&qword_100074368);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v41 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  id v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (void *)swift_allocObject();
  _OWORD v18[2] = a1;
  id v18[3] = a2;
  unint64_t v42 = a2;
  uint64_t v19 = a3;
  v18[4] = a3;
  v18[5] = a4;
  void v18[6] = a5;
  id v20 = a5;
  swift_retain();
  os_log_type_t v21 = a4;
  if (sub_100016BE4(0))
  {
    uint64_t v38 = v19;
    os_log_type_t v39 = a5;
    uint64_t v22 = v41;
    uint64_t v40 = a1;
    static Logger.permissions.getter();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      os_log_type_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Family Controls permission requirement for a child account type is satisfied by override", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v14);
    uint64_t v26 = type metadata accessor for FamilyControlsError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v13, 1, 1, v26);
    sub_10002DAA8(1, (uint64_t)v13, v40, v42, v38, v21, v39);
    sub_100044C5C((uint64_t)v13);
    swift_release();
  }
  else
  {
    uint64_t v27 = swift_allocObject();
    *(unsigned char *)(v27 + 16) = 0;
    uint64_t v28 = swift_allocBox();
    uint64_t v30 = v29;
    uint64_t v31 = enum case for FamilyControlsError.invalidAccountType(_:);
    uint64_t v32 = type metadata accessor for FamilyControlsError();
    uint64_t v33 = *(void *)(v32 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 104))(v30, v31, v32);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    id v34 = [objc_allocWithZone((Class)FAFetchFamilyCircleRequest) init];
    [v34 setCachePolicy:1];
    uint64_t v35 = (void *)swift_allocObject();
    _OWORD v35[2] = v27;
    uint64_t v35[3] = v28;
    v35[4] = sub_100044E4C;
    uint64_t v35[5] = v18;
    aBlock[4] = sub_100044EF4;
    aBlock[5] = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100016394;
    void aBlock[3] = &unk_10006F140;
    id v36 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    [v34 startRequestWithCompletionHandler:v36];
    _Block_release(v36);
    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_100044154(uint64_t a1, void (*a2)(id, uint64_t), uint64_t a3, void *a4, void *a5)
{
  uint64_t v39 = a1;
  uint64_t v40 = a2;
  uint64_t v8 = sub_100007370(&qword_100074368);
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  id v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  id v20 = (char *)&v38 - v19;
  os_log_type_t v21 = self;
  id v41 = a5;
  swift_retain();
  id v22 = a4;
  id v23 = [v21 sharedConnection];
  if (v23)
  {
    os_log_type_t v24 = v23;
    id v25 = [v23 installedMDMProfileIdentifier];

    if (!v25)
    {
LABEL_7:
      swift_retain();
      id v29 = v22;
      id v30 = v41;
      sub_100043D18(v39, v40, a3, v29, a5);
      swift_release_n();

      return;
    }

    if (sub_100016BE4(1))
    {
      static Logger.permissions.getter();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        uint64_t v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Family Controls permission requirement for no MDM management is satisfied by override", v28, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v13 + 8))(v20, v12);
      goto LABEL_7;
    }
    static Logger.permissions.getter();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Family Controls permission requirement is not satisfied (device is managed by MDM)", v33, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
    uint64_t v34 = enum case for FamilyControlsError.restricted(_:);
    uint64_t v35 = type metadata accessor for FamilyControlsError();
    uint64_t v36 = *(void *)(v35 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 104))(v11, v34, v35);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v11, 0, 1, v35);
    sub_10002DAA8(0, (uint64_t)v11, v39, v40, a3, (char *)v22, a5);
    sub_100044C5C((uint64_t)v11);

    swift_release();
  }
  else
  {
    id v37 = v41;

    swift_release_n();
    __break(1u);
  }
}

void sub_100044550(void (*a1)(uint64_t, char *), uint64_t a2)
{
  uint64_t v4 = sub_100007370(&qword_100074368);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (sub_100016BE4(0))
  {
    static Logger.permissions.getter();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Family Controls permission requirement for a child account type is satisfied by override", v15, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    uint64_t v16 = type metadata accessor for FamilyControlsError();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v7, 1, 1, v16);
    a1(1, v7);
    sub_100044C5C((uint64_t)v7);
  }
  else
  {
    uint64_t v17 = swift_allocObject();
    *(unsigned char *)(v17 + 16) = 0;
    uint64_t v18 = swift_allocBox();
    uint64_t v20 = v19;
    uint64_t v21 = enum case for FamilyControlsError.invalidAccountType(_:);
    uint64_t v22 = type metadata accessor for FamilyControlsError();
    uint64_t v23 = *(void *)(v22 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 104))(v20, v21, v22);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    id v24 = [objc_allocWithZone((Class)FAFetchFamilyCircleRequest) init];
    [v24 setCachePolicy:1];
    id v25 = (void *)swift_allocObject();
    v25[2] = v17;
    v25[3] = v18;
    void v25[4] = a1;
    v25[5] = a2;
    aBlock[4] = sub_100044CD0;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100016394;
    void aBlock[3] = &unk_10006F0C8;
    uint64_t v26 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    [v24 startRequestWithCompletionHandler:v26];
    _Block_release(v26);
    swift_release();
    swift_release();
  }
}

void sub_10004490C(void (*a1)(uint64_t, char *), uint64_t a2)
{
  uint64_t v4 = sub_100007370(&qword_100074368);
  __chkstk_darwin(v4 - 8, v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  uint64_t v16 = (char *)&v29 - v15;
  id v17 = [self sharedConnection];
  if (v17)
  {
    uint64_t v18 = v17;
    id v19 = [v17 installedMDMProfileIdentifier];

    if (!v19)
    {
LABEL_7:
      sub_100044550(a1, a2);
      return;
    }

    if (sub_100016BE4(1))
    {
      static Logger.permissions.getter();
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        uint64_t v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Family Controls permission requirement for no MDM management is satisfied by override", v22, 2u);
        swift_slowDealloc();
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      goto LABEL_7;
    }
    static Logger.permissions.getter();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      id v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Family Controls permission requirement is not satisfied (device is managed by MDM)", v25, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    uint64_t v26 = enum case for FamilyControlsError.restricted(_:);
    uint64_t v27 = type metadata accessor for FamilyControlsError();
    uint64_t v28 = *(void *)(v27 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v28 + 104))(v7, v26, v27);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v7, 0, 1, v27);
    a1(0, v7);
    sub_100044C5C((uint64_t)v7);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100044C5C(uint64_t a1)
{
  uint64_t v2 = sub_100007370(&qword_100074368);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100044CBC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100044CD0(void *a1, uint64_t a2)
{
  return sub_100042E20(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void, void))(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_100044CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100044CEC()
{
  return swift_release();
}

uint64_t sub_100044CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007370(&qword_100074368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100044D5C()
{
  unint64_t result = qword_100074520;
  if (!qword_100074520)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_100074520);
  }
  return result;
}

uint64_t sub_100044D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007370(&qword_100074368);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100044E04()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100044E4C(char a1, uint64_t a2)
{
  return sub_10002DAA8(a1, a2, *(void *)(v2 + 16), *(void (**)(id, uint64_t))(v2 + 24), *(void *)(v2 + 32), *(char **)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_100044E60()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100044E98(int a1, uint64_t a2)
{
  return sub_10002C464(a1, a2, *(char **)(v2 + 16));
}

uint64_t sub_100044EA4()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100044F00(uint64_t a1)
{
  uint64_t v25 = a1;
  uint64_t v3 = type metadata accessor for AuthorizationRecord();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v24 = v3;
  __chkstk_darwin(v3, v4);
  uint64_t v22 = (uint64_t)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v26 - 8);
  __chkstk_darwin(v26, v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BE0C(v1, v1[3]);
  dispatch thunk of Locatable.familyControlsAuthorization.getter();
  id v10 = [self defaultManager];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  URL.path.getter();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v12 = [v10 fileExistsAtPath:v11];

  if (v12)
  {
    uint64_t v13 = Data.init(contentsOf:options:)();
    if (v2)
    {

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v26);
    }
    uint64_t v15 = v13;
    unint64_t v16 = v14;
    sub_100007370(&qword_100073C10);
    sub_100046D14((unint64_t *)&qword_100073C18, &qword_100073C20);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    sub_10000BF6C(v15, v16);

    swift_release();
    uint64_t v20 = v27;
  }
  else
  {

    swift_release();
    uint64_t v20 = &_swiftEmptyArrayStorage;
  }
  uint64_t v27 = v20;
  swift_bridgeObjectRetain();
  unint64_t v18 = sub_1000466B8(v25, (uint64_t)v20);
  swift_bridgeObjectRelease();
  if (v18 != NSNotFound.getter())
  {
    uint64_t v19 = v22;
    sub_100046BB8(v18, v22);
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v19, v24);
    uint64_t v20 = v27;
  }
  sub_100046890(v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v26);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10004527C(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v28 = type metadata accessor for AuthorizationRecord();
  uint64_t v3 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v4);
  uint64_t v27 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BE0C(v1, v1[3]);
  dispatch thunk of Locatable.familyControlsAuthorization.getter();
  id v10 = [self defaultManager];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  URL.path.getter();
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v12 = [v10 fileExistsAtPath:v11];

  if (v12)
  {
    uint64_t v13 = Data.init(contentsOf:options:)();
    if (v2)
    {

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v9, v30);
    }
    uint64_t v15 = v13;
    unint64_t v16 = v14;
    sub_100007370(&qword_100073C10);
    sub_100046D14((unint64_t *)&qword_100073C18, &qword_100073C20);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    sub_10000BF6C(v15, v16);

    swift_release();
    uint64_t v24 = v31;
  }
  else
  {

    swift_release();
    uint64_t v24 = &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = v26;
  unint64_t v19 = sub_1000466B8(v26, (uint64_t)v24);
  swift_bridgeObjectRelease();
  uint64_t v20 = NSNotFound.getter();
  uint64_t v21 = v28;
  if (v19 == v20)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v27, v18, v28);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v24 = (void *)sub_1000253BC(0, v24[2] + 1, 1, (unint64_t)v24);
    }
    unint64_t v23 = v24[2];
    unint64_t v22 = v24[3];
    if (v23 >= v22 >> 1) {
      uint64_t v24 = (void *)sub_1000253BC(v22 > 1, v23 + 1, 1, (unint64_t)v24);
    }
    void v24[2] = v23 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v24+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v23, v27, v21);
    goto LABEL_16;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (result)
  {
    if ((v19 & 0x8000000000000000) == 0) {
      goto LABEL_14;
    }
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = sub_1000259DC((unint64_t)v24);
  uint64_t v24 = (void *)result;
  if ((v19 & 0x8000000000000000) != 0) {
    goto LABEL_18;
  }
LABEL_14:
  if (v19 < v24[2])
  {
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 24))((unint64_t)v24+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v19, v18, v21);
LABEL_16:
    sub_100046890(v24);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
    return swift_bridgeObjectRelease();
  }
LABEL_19:
  __break(1u);
  return result;
}

uint64_t sub_1000456E4(uint64_t a1)
{
  v19[1] = a1;
  uint64_t v23 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v23 - 8);
  __chkstk_darwin(v23, v1);
  uint64_t v20 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for AuthorizationStatus();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  __chkstk_darwin(v8 - 8, v9);
  uint64_t v10 = type metadata accessor for AuthorizationRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  unint64_t v14 = (char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v7, enum case for AuthorizationStatus.approved(_:), v3);
  AuthorizationRecord.init(bundleIdentifier:teamIdentifier:recordIdentifier:status:type:)();
  sub_100007370(&qword_1000742B8);
  unint64_t v15 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_10005FEC0;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 16))(v16 + v15, v14, v10);
  sub_10000BE0C(v21, v21[3]);
  id v17 = v20;
  dispatch thunk of Locatable.familyControlsInternalAuthorization.getter();
  sub_100046890((void *)v16);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v17, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_100045A38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v68 = a4;
  uint64_t v71 = a2;
  uint64_t v72 = a3;
  uint64_t v73 = a1;
  uint64_t v65 = a5;
  uint64_t v63 = type metadata accessor for AuthorizationStatus();
  uint64_t v61 = *(void *)(v63 - 8);
  __chkstk_darwin(v63, v7);
  uint64_t v62 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  __chkstk_darwin(v9 - 8, v10);
  uint64_t v60 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for AuthorizationRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v15 = __chkstk_darwin(v12, v14);
  uint64_t v74 = (char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  unint64_t v19 = (char *)v56 - v18;
  uint64_t v20 = type metadata accessor for URL();
  uint64_t v69 = *(void *)(v20 - 8);
  uint64_t v70 = v20;
  __chkstk_darwin(v20, v21);
  uint64_t v23 = (char *)v56 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_100007370((uint64_t *)&unk_100074370);
  uint64_t v26 = __chkstk_darwin(v24 - 8, v25);
  uint64_t v64 = (char *)v56 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v28);
  uint64_t v66 = v13;
  uint64_t v67 = (uint64_t)v56 - v29;
  uint64_t v58 = *(void (**)(void))(v13 + 56);
  uint64_t v59 = v13 + 56;
  v58();
  sub_10000BE0C(v5, v5[3]);
  dispatch thunk of Locatable.familyControlsAuthorization.getter();
  id v30 = [self defaultManager];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  URL.path.getter();
  NSString v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v32 = [v30 fileExistsAtPath:v31];

  if (v32)
  {
    uint64_t v33 = Data.init(contentsOf:options:)();
    if (v6)
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v69 + 8))(v23, v70);
      return sub_100046DD8(v67);
    }
    unint64_t v35 = v34;
    uint64_t v36 = v33;
    sub_100007370(&qword_100073C10);
    sub_100046D14((unint64_t *)&qword_100073C18, &qword_100073C20);
    uint64_t v57 = v36;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    sub_10000BF6C(v57, v35);

    swift_release();
    os_log_type_t v55 = v75;
  }
  else
  {

    swift_release();
    os_log_type_t v55 = &_swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, uint64_t))(v69 + 8))(v23, v70);
  uint64_t v38 = v55[2];
  uint64_t v39 = v71;
  uint64_t v40 = v66;
  if (!v38)
  {
    swift_bridgeObjectRelease();
    uint64_t v52 = v67;
    uint64_t v54 = (uint64_t)v64;
    uint64_t v53 = v65;
    goto LABEL_23;
  }
  v56[1] = v55;
  uint64_t v57 = v6;
  id v41 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
  unint64_t v42 = (char *)v55 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
  unsigned int v43 = (void (**)(char *, uint64_t))(v66 + 8);
  uint64_t v44 = *(void *)(v66 + 72);
  uint64_t v69 = (v66 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v70 = v44;
  v41(v19, v42, v12);
  while (1)
  {
    if (AuthorizationRecord.bundleIdentifier.getter() == v73 && v47 == v39)
    {
      swift_bridgeObjectRelease();
      v41(v74, v19, v12);
    }
    else
    {
      char v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      BOOL v49 = v74;
      v41(v74, v19, v12);
      if ((v48 & 1) == 0)
      {
        uint64_t v51 = v49;
        unint64_t v46 = *v43;
        (*v43)(v51, v12);
        goto LABEL_9;
      }
    }
    if (AuthorizationRecord.teamIdentifier.getter() == v72 && v50 == v68) {
      break;
    }
    char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    unint64_t v46 = *v43;
    (*v43)(v74, v12);
    if (v45) {
      goto LABEL_21;
    }
LABEL_9:
    uint64_t v39 = v71;
    v46(v19, v12);
    v42 += v70;
    if (!--v38)
    {
      swift_bridgeObjectRelease();
      uint64_t v53 = v65;
      uint64_t v40 = v66;
      uint64_t v52 = v67;
      goto LABEL_22;
    }
    v41(v19, v42, v12);
  }
  swift_bridgeObjectRelease();
  (*v43)(v74, v12);
LABEL_21:
  swift_bridgeObjectRelease();
  uint64_t v52 = v67;
  sub_100046DD8(v67);
  uint64_t v40 = v66;
  (*(void (**)(uint64_t, char *, uint64_t))(v66 + 32))(v52, v19, v12);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v58)(v52, 0, 1, v12);
  uint64_t v53 = v65;
LABEL_22:
  uint64_t v54 = (uint64_t)v64;
LABEL_23:
  sub_100046E38(v52, v54);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v54, 1, v12) == 1)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    UUID.init()();
    (*(void (**)(char *, void, uint64_t))(v61 + 104))(v62, enum case for AuthorizationStatus.notDetermined(_:), v63);
    AuthorizationRecord.init(bundleIdentifier:teamIdentifier:recordIdentifier:status:type:)();
    sub_100046DD8(v52);
    return sub_100046DD8(v54);
  }
  else
  {
    sub_100046DD8(v52);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v53, v54, v12);
  }
}

uint64_t sub_1000461CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v40 = *(void (***)(char *, uint64_t))(v47 - 8);
  __chkstk_darwin(v47, v5);
  unint64_t v46 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for AuthorizationRecord();
  uint64_t v8 = *(void **)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v39 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v44 = *(void *)(v11 - 8);
  char v45 = (void (*)(char *, char *, uint64_t))v11;
  __chkstk_darwin(v11, v12);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = v8;
  uint64_t v15 = (void (*)(uint64_t, void, uint64_t, uint64_t))v8[7];
  unint64_t v42 = v8 + 7;
  uint64_t v43 = a2;
  id v41 = v15;
  v15(a2, 1, 1, v7);
  uint64_t v16 = v14;
  sub_10000BE0C(v2, v2[3]);
  dispatch thunk of Locatable.familyControlsAuthorization.getter();
  id v17 = [self defaultManager];
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  URL.path.getter();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LODWORD(a2) = [v17 fileExistsAtPath:v18];

  if (a2)
  {
    uint64_t v19 = Data.init(contentsOf:options:)();
    if (v3)
    {

      swift_release();
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v44 + 8))(v16, v45);
      return sub_100046DD8(v43);
    }
    unint64_t v21 = v20;
    uint64_t v22 = v19;
    sub_100007370(&qword_100073C10);
    sub_100046D14((unint64_t *)&qword_100073C18, &qword_100073C20);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    sub_10000BF6C(v22, v21);

    swift_release();
    uint64_t v36 = v49;
  }
  else
  {

    swift_release();
    uint64_t v36 = &_swiftEmptyArrayStorage;
  }
  (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v44 + 8))(v16, v45);
  uint64_t v24 = v36[2];
  uint64_t v25 = v39;
  if (v24)
  {
    uint64_t v26 = v38 + 2;
    uint64_t v27 = (void (*)(char *, char *, uint64_t))v38[2];
    uint64_t v28 = *((unsigned __int8 *)v38 + 80);
    uint64_t v37 = v3;
    uint64_t v38 = v36;
    uint64_t v29 = (char *)v36 + ((v28 + 32) & ~v28);
    uint64_t v44 = v26[7];
    char v45 = v27;
    id v30 = v40 + 1;
    uint64_t v40 = (void (**)(char *, uint64_t))(v26 - 1);
    NSString v31 = (void (**)(uint64_t, char *, uint64_t))(v26 + 2);
    v27(v39, v29, v7);
    while (1)
    {
      uint64_t v32 = v7;
      uint64_t v33 = v46;
      AuthorizationRecord.recordIdentifier.getter();
      char v34 = static UUID.== infix(_:_:)();
      (*v30)(v33, v47);
      if (v34)
      {
        uint64_t v35 = v43;
        sub_100046DD8(v43);
        (*v31)(v35, v25, v32);
        v41(v35, 0, 1, v32);
      }
      else
      {
        (*v40)(v25, v32);
      }
      uint64_t v7 = v32;
      v29 += v44;
      if (!--v24) {
        break;
      }
      v45(v25, v29, v32);
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000466B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v6 = __chkstk_darwin(v3, v5);
  uint64_t v8 = (char *)v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  uint64_t v11 = (char *)v22 - v10;
  AuthorizationRecord.recordIdentifier.getter();
  uint64_t v12 = NSNotFound.getter();
  uint64_t v13 = v12;
  uint64_t v14 = *(void *)(a2 + 16);
  if (v14)
  {
    v22[0] = v12;
    uint64_t v13 = 0;
    uint64_t v15 = *(void *)(type metadata accessor for AuthorizationRecord() - 8);
    uint64_t v16 = a2 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v17 = *(void *)(v15 + 72);
    NSString v18 = (void (**)(char *, uint64_t))(v4 + 8);
    v22[1] = (unint64_t)v18 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    while (1)
    {
      AuthorizationRecord.recordIdentifier.getter();
      char v19 = static UUID.== infix(_:_:)();
      unint64_t v20 = *v18;
      (*v18)(v8, v3);
      if (v19) {
        break;
      }
      ++v13;
      v16 += v17;
      if (v14 == v13)
      {
        uint64_t v13 = v22[0];
        break;
      }
    }
  }
  else
  {
    unint64_t v20 = *(void (**)(char *, uint64_t))(v4 + 8);
  }
  v20(v11, v3);
  return v13;
}

uint64_t sub_100046890(void *a1)
{
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [self defaultManager];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  id v33 = a1;
  sub_100007370(&qword_100073C10);
  sub_100046D14(&qword_100074528, &qword_100074530);
  uint64_t v9 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (!v1)
  {
    uint64_t v30 = v4;
    uint64_t v31 = v9;
    unint64_t v32 = v10;
    URL.path.getter();
    NSString v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unsigned int v12 = [v8 fileExistsAtPath:v11];

    if (a1[2])
    {
      if (v12) {
        goto LABEL_5;
      }
      URL.deletingLastPathComponent()();
      URL._bridgeToObjectiveC()(v13);
      uint64_t v15 = v14;
      (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v3);
      id v33 = 0;
      unsigned int v16 = [v8 createDirectoryAtURL:v15 withIntermediateDirectories:1 attributes:0 error:&v33];

      id v17 = v33;
      if (v16)
      {
LABEL_5:
        uint64_t v19 = v31;
        unint64_t v18 = v32;
        Data.write(to:options:)();
        uint64_t v20 = v19;
        unint64_t v21 = v18;
LABEL_13:
        sub_10000BF6C(v20, v21);
        goto LABEL_14;
      }
      uint64_t v26 = v17;
      _convertNSErrorToError(_:)();

      goto LABEL_11;
    }
    if (v12)
    {
      URL._bridgeToObjectiveC()(0);
      uint64_t v23 = v22;
      id v33 = 0;
      unsigned int v24 = [v8 removeItemAtURL:v22 error:&v33];

      if (!v24)
      {
        id v27 = v33;
        _convertNSErrorToError(_:)();

LABEL_11:
        swift_willThrow();
        goto LABEL_12;
      }
      id v25 = v33;
    }
LABEL_12:
    uint64_t v20 = v31;
    unint64_t v21 = v32;
    goto LABEL_13;
  }
LABEL_14:

  return swift_release();
}

uint64_t sub_100046BB8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v5 = *v2;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v5 = sub_1000259DC(v5);
  }
  unint64_t v6 = *(void *)(v5 + 16);
  if (v6 <= a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  unint64_t v7 = v6 - 1;
  uint64_t v8 = type metadata accessor for AuthorizationRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 72);
  unint64_t v11 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)) + v10 * a1;
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(v9 + 32))(a2, v11, v8);
  if ((uint64_t)(v7 - a1) < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  if (v10 > 0 || v11 >= v11 + v10 + v10 * (v7 - a1))
  {
    uint64_t result = swift_arrayInitWithTakeFrontToBack();
  }
  else if (v10)
  {
    uint64_t result = swift_arrayInitWithTakeBackToFront();
  }
  *(void *)(v5 + 16) = v7;
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_100046D14(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000BF24(&qword_100073C10);
    sub_100046D94(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100046D94(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AuthorizationRecord();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100046DD8(uint64_t a1)
{
  uint64_t v2 = sub_100007370((uint64_t *)&unk_100074370);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100046E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100007370((uint64_t *)&unk_100074370);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for AuthorizationStore(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AuthorizationStore(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 initializeWithTake for AuthorizationStore(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AuthorizationStore(uint64_t a1, uint64_t a2)
{
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AuthorizationStore(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AuthorizationStore(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AuthorizationStore()
{
  return &type metadata for AuthorizationStore;
}

uint64_t sub_100047014(char a1, char a2)
{
  if (qword_100060458[a1] == qword_100060458[a2] && qword_100060470[a1] == qword_100060470[a2]) {
    char v3 = 1;
  }
  else {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

Swift::Int sub_10004709C()
{
  return Hasher._finalize()();
}

uint64_t sub_100047108()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10004715C()
{
  return Hasher._finalize()();
}

uint64_t sub_1000471C4(char a1)
{
  return qword_100060458[a1];
}

uint64_t sub_1000471E4(char *a1, char *a2)
{
  return sub_100047014(*a1, *a2);
}

Swift::Int sub_1000471F0()
{
  return sub_10004709C();
}

uint64_t sub_1000471F8()
{
  return sub_100047108();
}

Swift::Int sub_100047200()
{
  return sub_10004715C();
}

unint64_t sub_100047208@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100049C38(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100047238@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000471C4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100047264()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_1000472D8(int a1, uint64_t a2, unint64_t a3)
{
  unint64_t v171 = a3;
  uint64_t v176 = a2;
  LODWORD(v172) = a1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v167 = *(void *)(v4 - 8);
  uint64_t v168 = v4;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  unint64_t v158 = (char *)v147 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v165 = (char *)v147 - v9;
  uint64_t v162 = type metadata accessor for AppInfoSource();
  uint64_t v161 = *(void *)(v162 - 8);
  __chkstk_darwin(v162, v10);
  unint64_t v157 = (char *)v147 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = sub_100007370(&qword_100074790);
  uint64_t v13 = __chkstk_darwin(v166, v12);
  uint64_t v160 = (uint64_t)v147 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  uint64_t v154 = (uint64_t)v147 - v16;
  uint64_t v17 = sub_100007370(&qword_100074798);
  uint64_t v19 = __chkstk_darwin(v17 - 8, v18);
  uint64_t v159 = (uint64_t)v147 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v19, v21);
  uint64_t v170 = (uint64_t)v147 - v23;
  uint64_t v25 = __chkstk_darwin(v22, v24);
  uint64_t v169 = (uint64_t)v147 - v26;
  uint64_t v28 = __chkstk_darwin(v25, v27);
  uint64_t v148 = (uint64_t)v147 - v29;
  uint64_t v31 = __chkstk_darwin(v28, v30);
  uint64_t v155 = (uint64_t)v147 - v32;
  __chkstk_darwin(v31, v33);
  uint64_t v153 = (char *)v147 - v34;
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v36 = *(void *)(v35 - 8);
  __chkstk_darwin(v35, v37);
  id v152 = (char *)v147 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = sub_100007370(&qword_100074788);
  uint64_t v173 = *(void *)(v39 - 8);
  uint64_t v174 = v39;
  __chkstk_darwin(v39, v40);
  unint64_t v42 = (char *)v147 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_100007370(&qword_100074778);
  uint64_t v175 = *(void *)(v43 - 8);
  __chkstk_darwin(v43, v44);
  unint64_t v46 = (char *)v147 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_100007370(&qword_1000741F8);
  uint64_t v49 = __chkstk_darwin(v47, v48);
  uint64_t v163 = (char *)v147 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = __chkstk_darwin(v49, v51);
  uint64_t v54 = (char *)v147 - v53;
  __chkstk_darwin(v52, v55);
  uint64_t v57 = (char *)v147 - v56;
  uint64_t v58 = v3 + OBJC_IVAR____TtC19FamilyControlsAgent12ActivityItem__iconURL;
  uint64_t v156 = v36;
  uint64_t v60 = *(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56);
  uint64_t v59 = v36 + 56;
  uint64_t v164 = v35;
  uint64_t v149 = v60;
  v60((char *)v147 - v56, 1, 1, v35);
  sub_1000265EC((uint64_t)v57, (uint64_t)v54, &qword_1000741F8);
  uint64_t v150 = v47;
  Published.init(initialValue:)();
  sub_100015758((uint64_t)v57, &qword_1000741F8);
  uint64_t v61 = *(void (**)(uint64_t, char *, uint64_t))(v175 + 32);
  uint64_t v151 = v43;
  v61(v58, v46, v43);
  uint64_t v62 = v3 + OBJC_IVAR____TtC19FamilyControlsAgent12ActivityItem__needsSecondFetch;
  LOBYTE(v180) = 0;
  Published.init(initialValue:)();
  uint64_t v63 = *(void (**)(uint64_t, char *, uint64_t))(v173 + 32);
  uint64_t v64 = v62;
  uint64_t v65 = v174;
  v63(v64, v42, v174);
  uint64_t v66 = v3 + OBJC_IVAR____TtC19FamilyControlsAgent12ActivityItem__isSelected;
  LOBYTE(v180) = 0;
  unint64_t v67 = v171;
  Published.init(initialValue:)();
  v63(v66, v42, v65);
  uint64_t v68 = v176;
  char v69 = v172;
  *(unsigned char *)(v3 + 16) = v172;
  *(void *)(v3 + 24) = v68;
  *(void *)(v3 + 32) = v67;
  uint64_t v177 = v3;
  if (!v69)
  {
    v147[1] = v59;
    uint64_t v75 = (uint64_t)v163;
    unint64_t v158 = v54;
    uint64_t v76 = v175;
    uint64_t v78 = v164;
    uint64_t v77 = v165;
    type metadata accessor for AppInfoCache();
    swift_bridgeObjectRetain();
    static AppInfoCache.shared.getter();
    uint64_t v79 = dispatch thunk of AppInfoCache.appInfo(bundleIdentifier:)();
    swift_release();
    uint64_t v172 = v79;
    uint64_t v80 = dispatch thunk of AppInfo.displayName.getter();
    uint64_t v82 = v166;
    if (v81)
    {
      uint64_t v83 = v80;
      unint64_t v84 = v81;
      if ((v80 != v176 || v81 != v67) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v178 = v83;
        unint64_t v179 = v84;
        Published.init(initialValue:)();
        swift_endAccess();
        dispatch thunk of AppInfo.artworkURL.getter();
        uint64_t v127 = v156;
        uint64_t v128 = v78;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v75, 1, v78) == 1)
        {
          sub_100015758(v75, &qword_1000741F8);
          uint64_t v129 = (uint64_t)v153;
          dispatch thunk of AppInfo.source.getter();
          uint64_t v130 = v161;
          uint64_t v131 = v155;
          uint64_t v132 = v162;
          (*(void (**)(uint64_t, void, uint64_t))(v161 + 104))(v155, enum case for AppInfoSource.unknown(_:), v162);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v130 + 56))(v131, 0, 1, v132);
          uint64_t v133 = v154;
          uint64_t v134 = v154 + *(int *)(v82 + 48);
          id v135 = &qword_100074798;
          sub_1000265EC(v129, v154, &qword_100074798);
          sub_1000265EC(v131, v134, &qword_100074798);
          id v136 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v130 + 48);
          if (v136(v133, 1, v132) == 1)
          {
            sub_100015758(v131, &qword_100074798);
            sub_100015758(v129, &qword_100074798);
            if (v136(v134, 1, v132) == 1)
            {
              char v137 = -1;
            }
            else
            {
              id v135 = &qword_100074790;
              char v137 = 0;
            }
          }
          else
          {
            uint64_t v142 = v148;
            sub_1000265EC(v133, v148, &qword_100074798);
            if (v136(v134, 1, v132) == 1)
            {
              sub_100015758(v155, &qword_100074798);
              sub_100015758(v129, &qword_100074798);
              (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v142, v132);
              char v137 = 0;
              id v135 = &qword_100074790;
            }
            else
            {
              uint64_t v143 = v157;
              (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v157, v134, v132);
              sub_100049C8C(&qword_1000747A0, (void (*)(uint64_t))&type metadata accessor for AppInfoSource);
              char v137 = dispatch thunk of static Equatable.== infix(_:_:)();
              uint64_t v144 = *(void (**)(char *, uint64_t))(v130 + 8);
              v144(v143, v132);
              id v135 = &qword_100074798;
              sub_100015758(v155, &qword_100074798);
              sub_100015758(v129, &qword_100074798);
              v144((char *)v142, v132);
            }
          }
          uint64_t v145 = v173;
          sub_100015758(v133, v135);
          uint64_t v146 = v177 + OBJC_IVAR____TtC19FamilyControlsAgent12ActivityItem__needsSecondFetch;
          swift_beginAccess();
          (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v146, v174);
          LOBYTE(v178) = v137 & 1;
          Published.init(initialValue:)();
          swift_endAccess();
        }
        else
        {
          uint64_t v138 = v152;
          (*(void (**)(char *, uint64_t, uint64_t))(v127 + 32))(v152, v75, v128);
          (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v57, v138, v128);
          v149(v57, 0, 1, v128);
          uint64_t v139 = v177;
          uint64_t v140 = v177 + OBJC_IVAR____TtC19FamilyControlsAgent12ActivityItem__iconURL;
          swift_beginAccess();
          (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v140, v151);
          sub_1000265EC((uint64_t)v57, (uint64_t)v158, &qword_1000741F8);
          Published.init(initialValue:)();
          sub_100015758((uint64_t)v57, &qword_1000741F8);
          swift_endAccess();
          uint64_t v141 = v139 + OBJC_IVAR____TtC19FamilyControlsAgent12ActivityItem__needsSecondFetch;
          swift_beginAccess();
          (*(void (**)(uint64_t, uint64_t))(v173 + 8))(v141, v174);
          LOBYTE(v178) = 0;
          Published.init(initialValue:)();
          swift_endAccess();
          (*(void (**)(char *, uint64_t))(v127 + 8))(v138, v128);
        }
        goto LABEL_24;
      }
      swift_bridgeObjectRelease();
    }
    BOOL v85 = v77;
    static Logger.activityPicker.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = v82;
      uint64_t v89 = (uint8_t *)swift_slowAlloc();
      uint64_t v180 = swift_slowAlloc();
      *(_DWORD *)uint64_t v89 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v90 = v176;
      uint64_t v178 = sub_1000067CC(v176, v67, &v180);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "Could not initially resolve app info for bundle identifier: %s", v89, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v82 = v88;
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v167 + 8))(v85, v168);
      uint64_t v91 = v162;
      uint64_t v92 = v161;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v167 + 8))(v77, v168);
      uint64_t v91 = v162;
      uint64_t v92 = v161;
      uint64_t v90 = v176;
    }
    uint64_t v93 = v169;
    swift_beginAccess();
    uint64_t v178 = v90;
    unint64_t v179 = v67;
    Published.init(initialValue:)();
    swift_endAccess();
    dispatch thunk of AppInfo.source.getter();
    uint64_t v94 = v170;
    (*(void (**)(uint64_t, void, uint64_t))(v92 + 104))(v170, enum case for AppInfoSource.unknown(_:), v91);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v92 + 56))(v94, 0, 1, v91);
    uint64_t v95 = v160;
    uint64_t v96 = v160 + *(int *)(v82 + 48);
    unint64_t v97 = &qword_100074798;
    sub_1000265EC(v93, v160, &qword_100074798);
    sub_1000265EC(v94, v96, &qword_100074798);
    unint64_t v98 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48);
    if (v98(v95, 1, v91) == 1)
    {
      sub_100015758(v94, &qword_100074798);
      sub_100015758(v93, &qword_100074798);
      if (v98(v96, 1, v91) == 1)
      {
        char v99 = -1;
      }
      else
      {
        unint64_t v97 = &qword_100074790;
        char v99 = 0;
      }
    }
    else
    {
      uint64_t v100 = v159;
      sub_1000265EC(v95, v159, &qword_100074798);
      if (v98(v96, 1, v91) == 1)
      {
        sub_100015758(v170, &qword_100074798);
        sub_100015758(v169, &qword_100074798);
        (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v100, v91);
        char v99 = 0;
        unint64_t v97 = &qword_100074790;
      }
      else
      {
        uint64_t v106 = v157;
        (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v157, v96, v91);
        sub_100049C8C(&qword_1000747A0, (void (*)(uint64_t))&type metadata accessor for AppInfoSource);
        char v99 = dispatch thunk of static Equatable.== infix(_:_:)();
        os_log_type_t v107 = *(void (**)(char *, uint64_t))(v92 + 8);
        v107(v106, v91);
        unint64_t v97 = &qword_100074798;
        sub_100015758(v170, &qword_100074798);
        sub_100015758(v169, &qword_100074798);
        v107((char *)v100, v91);
      }
    }
    uint64_t v109 = v173;
    uint64_t v108 = v174;
    sub_100015758(v95, v97);
    uint64_t v110 = v177 + OBJC_IVAR____TtC19FamilyControlsAgent12ActivityItem__needsSecondFetch;
    swift_beginAccess();
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v110, v108);
    LOBYTE(v178) = v99 & 1;
    Published.init(initialValue:)();
    swift_endAccess();
LABEL_24:
    swift_beginAccess();
    LOBYTE(v178) = 1;
    Published.init(initialValue:)();
    swift_endAccess();
    swift_release();
    return v177;
  }
  if (v69 == 1)
  {
    swift_bridgeObjectRetain();
    NSString v70 = String._bridgeToObjectiveC()();
    uint64_t v71 = sub_1000487F8((uint64_t)v70);
    if (v72)
    {
      uint64_t v73 = v71;
      unint64_t v74 = v72;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      uint64_t v178 = v73;
      unint64_t v179 = v74;
    }
    else
    {
      uint64_t v101 = (uint64_t)v158;
      static Logger.activityPicker.getter();
      swift_bridgeObjectRetain_n();
      uint64_t v102 = Logger.logObject.getter();
      os_log_type_t v103 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v102, v103))
      {
        unint64_t v104 = v67;
        id v105 = (uint8_t *)swift_slowAlloc();
        uint64_t v180 = swift_slowAlloc();
        *(_DWORD *)id v105 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v178 = sub_1000067CC(v68, v104, &v180);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v102, v103, "Failed to resolve localized name for category identifier: %s", v105, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        unint64_t v67 = v104;
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      (*(void (**)(uint64_t, uint64_t))(v167 + 8))(v101, v168);
      swift_beginAccess();
      uint64_t v178 = v68;
      unint64_t v179 = v67;
    }
    Published.init(initialValue:)();
    swift_endAccess();
    uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v113 = v112;
    if (v111 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v113 == v114) {
      goto LABEL_29;
    }
    char v116 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v115 = 0;
    if (v116) {
      goto LABEL_32;
    }
    uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v120 = v119;
    if (v118 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v120 == v121)
    {
LABEL_29:
      char v115 = 0;
    }
    else
    {
      char v122 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v115 = 0;
      if (v122) {
        goto LABEL_32;
      }
      uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v125 = v124;
      if (v123 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v125 == v126) {
        char v115 = 0;
      }
      else {
        char v115 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_32:
    swift_beginAccess();
    LOBYTE(v178) = v115 & 1;
    Published.init(initialValue:)();
    swift_endAccess();

    return v177;
  }
  swift_beginAccess();
  uint64_t v178 = v68;
  unint64_t v179 = v67;
  swift_bridgeObjectRetain();
  Published.init(initialValue:)();
  swift_endAccess();
  swift_beginAccess();
  LOBYTE(v178) = 1;
  Published.init(initialValue:)();
  swift_endAccess();
  return v177;
}

uint64_t sub_1000487F8(uint64_t a1)
{
  if (qword_100073A18 != -1) {
    swift_once();
  }
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;
  if (v2 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v4 == v5)
  {
    swift_bridgeObjectRelease_n();
    goto LABEL_11;
  }
  char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v7)
  {
LABEL_11:
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = sub_10001AFF8();
    swift_bridgeObjectRelease();
    return v10;
  }
  id v8 = [self localizedNameForIdentifier:a1];
  if (!v8) {
    return 0;
  }
  uint64_t v9 = v8;
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v10;
}

uint64_t sub_100048934()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000489BC()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC19FamilyControlsAgent12ActivityItem__iconURL;
  uint64_t v2 = sub_100007370(&qword_100074778);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtC19FamilyControlsAgent12ActivityItem__localizedName;
  uint64_t v4 = sub_100007370(&qword_100074780);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  uint64_t v5 = v0 + OBJC_IVAR____TtC19FamilyControlsAgent12ActivityItem__isDisplayable;
  uint64_t v6 = sub_100007370(&qword_100074788);
  char v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v5, v6);
  v7(v0 + OBJC_IVAR____TtC19FamilyControlsAgent12ActivityItem__needsSecondFetch, v6);
  v7(v0 + OBJC_IVAR____TtC19FamilyControlsAgent12ActivityItem__isSelected, v6);
  uint64_t v8 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v9 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v8, v9);
}

uint64_t sub_100048B44()
{
  return type metadata accessor for ActivityItem();
}

uint64_t type metadata accessor for ActivityItem()
{
  uint64_t result = qword_100074588;
  if (!qword_100074588) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100048B98()
{
  sub_100048D64();
  if (v0 <= 0x3F)
  {
    sub_100048DC0(319, &qword_1000745A0);
    if (v1 <= 0x3F)
    {
      sub_100048DC0(319, (unint64_t *)&unk_1000745A8);
      if (v2 <= 0x3F) {
        swift_updateClassMetadata2();
      }
    }
  }
}

Swift::Int sub_100048CD4()
{
  return Hasher._finalize()();
}

void sub_100048D64()
{
  if (!qword_100074598)
  {
    sub_10000BF24(&qword_1000741F8);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_100074598);
    }
  }
}

void sub_100048DC0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for Published();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ActivityItem.ActivityItemType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100048ED4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ActivityItem.ActivityItemType()
{
  return &type metadata for ActivityItem.ActivityItemType;
}

void *sub_100048F0C()
{
  return &protocol witness table for String;
}

unint64_t sub_100048F1C()
{
  unint64_t result = qword_100074768;
  if (!qword_100074768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100074768);
  }
  return result;
}

void *sub_100048F70()
{
  return &protocol witness table for ObservableObjectPublisher;
}

Swift::Int sub_100048F7C@<X0>(Swift::Int *a1@<X8>)
{
  Swift::Int result = sub_100048CD4();
  *a1 = result;
  return result;
}

Swift::Int sub_100048FA8()
{
  return sub_100048CD4();
}

uint64_t sub_100048FCC()
{
  return sub_100048934();
}

Swift::Int sub_100048FF0()
{
  return Hasher._finalize()();
}

uint64_t sub_100049030(uint64_t *a1, uint64_t *a2)
{
  return sub_10004920C(*a1, *a2);
}

uint64_t sub_10004903C@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for ActivityItem();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10004907C()
{
  return sub_100049C8C(&qword_100074770, (void (*)(uint64_t))type metadata accessor for ActivityItem);
}

void *sub_1000490C4()
{
  return &protocol witness table for Int;
}

NSString sub_1000490D0()
{
  NSString result = String._bridgeToObjectiveC()();
  qword_100074C38 = (uint64_t)result;
  return result;
}

uint64_t sub_100049108@<X0>(void *a1@<X8>)
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  uint64_t result = swift_release();
  *a1 = v3;
  a1[1] = v4;
  return result;
}

uint64_t sub_100049188()
{
  return static Published.subscript.setter();
}

uint64_t sub_10004920C(uint64_t a1, uint64_t a2)
{
  if (qword_100060458[*(char *)(a1 + 16)] == qword_100060458[*(char *)(a2 + 16)]
    && qword_100060470[*(char *)(a1 + 16)] == qword_100060470[*(char *)(a2 + 16)])
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = 0;
    if ((v5 & 1) == 0) {
      return result;
    }
  }
  if (*(void *)(a1 + 24) == *(void *)(a2 + 24) && *(void *)(a1 + 32) == *(void *)(a2 + 32)) {
    return 1;
  }

  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

UIImage sub_100049300(void *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unsigned int v6 = (char *)v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100073A18 != -1) {
    swift_once();
  }
  uint64_t v7 = 0x737070416C6C41;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;
  if (v8 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v10 == v11)
  {
    swift_bridgeObjectRelease_n();
    uint64_t v14 = (void *)0xE700000000000000;
    goto LABEL_18;
  }
  char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = (void *)0xEA00000000007974;
    uint64_t v7 = 0x6976697461657243;
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v17 = v16;
    if (v15 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v17 != v18)
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v20) {
        goto LABEL_18;
      }
      uint64_t v14 = (void *)0xE90000000000006ELL;
      uint64_t v7 = 0x6F69746163756445;
      uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v22;
      if (v21 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v23 != v24)
      {
        char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v27) {
          goto LABEL_18;
        }
        uint64_t v14 = (void *)0xED0000746E656D6ELL;
        uint64_t v7 = 0x6961747265746E45;
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v30 = v29;
        if (v28 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v30 != v31)
        {
          char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v32) {
            goto LABEL_18;
          }
          uint64_t v7 = 0x73656D6147;
          uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v35 = v34;
          if (v33 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v35 == v36)
          {
            swift_bridgeObjectRelease_n();
            uint64_t v14 = (void *)0xE500000000000000;
            goto LABEL_18;
          }
          char v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v37)
          {
            uint64_t v14 = (void *)0xE500000000000000;
            goto LABEL_18;
          }
          uint64_t v14 = (void *)0xED00007373656E74;
          uint64_t v7 = 0x694668746C616548;
          uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v40 = v39;
          if (v38 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v40 != v41)
          {
            char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v42) {
              goto LABEL_18;
            }
            uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v45 = v44;
            if (v43 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v45 == v46)
            {
              swift_bridgeObjectRelease_n();
LABEL_35:
              uint64_t v7 = 0xD000000000000014;
              uint64_t v14 = (void *)0x8000000100061D10;
              goto LABEL_18;
            }
            char v47 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v47) {
              goto LABEL_35;
            }
            uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v50 = v49;
            if (v48 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v50 == v51)
            {
              swift_bridgeObjectRelease_n();
LABEL_40:
              uint64_t v14 = (void *)0xE500000000000000;
              uint64_t v7 = 0x726568744FLL;
              goto LABEL_18;
            }
            char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (v52) {
              goto LABEL_40;
            }
            uint64_t v14 = (void *)0xEC00000079746976;
            uint64_t v7 = 0x69746375646F7250;
            uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v55 = v54;
            if (v53 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v55 != v56)
            {
              char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v57) {
                goto LABEL_18;
              }
              uint64_t v14 = (void *)0xEF646F6F46646E41;
              uint64_t v7 = 0x676E6970706F6853;
              uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v60 = v59;
              if (v58 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v60 != v61)
              {
                char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (v62) {
                  goto LABEL_18;
                }
                uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v65 = v64;
                if (v63 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v65 == v66)
                {
                  swift_bridgeObjectRelease_n();
                }
                else
                {
                  char v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v67 & 1) == 0)
                  {
                    uint64_t v7 = 0x6C6576617254;
                    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v70 = v69;
                    if (v68 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v70 == v71)
                    {
                      swift_bridgeObjectRelease_n();
                      uint64_t v14 = (void *)0xE600000000000000;
                      goto LABEL_18;
                    }
                    char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (v72)
                    {
                      uint64_t v14 = (void *)0xE600000000000000;
                      goto LABEL_18;
                    }
                    uint64_t v7 = 0x656974696C697455;
                    uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    uint64_t v75 = v74;
                    if (v73 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v75 == v76)
                    {
                      swift_bridgeObjectRelease_n();
                      uint64_t v14 = (void *)0xE900000000000073;
                      goto LABEL_18;
                    }
                    char v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if (v77)
                    {
                      uint64_t v14 = (void *)0xE900000000000073;
                      goto LABEL_18;
                    }
                    static Logger.activityPicker.getter();
                    id v78 = a1;
                    uint64_t v79 = Logger.logObject.getter();
                    os_log_type_t v80 = static os_log_type_t.error.getter();
                    if (os_log_type_enabled(v79, v80))
                    {
                      unint64_t v81 = (uint8_t *)swift_slowAlloc();
                      uint64_t v85 = swift_slowAlloc();
                      *(_DWORD *)unint64_t v81 = 136315138;
                      v84[1] = v81 + 4;
                      uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                      v84[2] = sub_1000067CC(v82, v83, &v85);
                      UnsafeMutableRawBufferPointer.copyMemory(from:)();

                      swift_bridgeObjectRelease();
                      _os_log_impl((void *)&_mh_execute_header, v79, v80, "Failed to resolve icon for category identifier: %s", v81, 0xCu);
                      swift_arrayDestroy();
                      swift_slowDealloc();
                      swift_slowDealloc();
                    }
                    else
                    {
                    }
                    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
                    goto LABEL_40;
                  }
                }
                uint64_t v14 = (void *)0x8000000100061CF0;
                uint64_t v7 = 0xD000000000000010;
                goto LABEL_18;
              }
            }
          }
        }
      }
    }
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  uint64_t v14 = (void *)0xE700000000000000;
LABEL_18:
  sub_100049CD4();
  v25._countAndFlagsBits = v7;
  v25._object = v14;
  return UIImage.init(imageLiteralResourceName:)(v25);
}

unint64_t sub_100049C38(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10006DC20, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t sub_100049C8C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100049CD4()
{
  unint64_t result = qword_1000747A8;
  if (!qword_1000747A8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000747A8);
  }
  return result;
}

unint64_t sub_100049D14(uint64_t a1)
{
  uint64_t v2 = sub_100007370(&qword_1000744D8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  unsigned int v6 = (void *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007370(&qword_100074800);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = (char *)v6 + *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v26[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000265EC(v13, (uint64_t)v6, &qword_1000744D8);
    uint64_t v15 = *v6;
    uint64_t v16 = v6[1];
    unint64_t result = sub_10004A7B8(*v6, v16);
    if (v18) {
      break;
    }
    unint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    char v20 = (uint64_t *)(v8[6] + 16 * result);
    *char v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t v22 = type metadata accessor for CKSyncEngine.State.Serialization();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32))(v21 + *(void *)(*(void *)(v22 - 8) + 72) * v19, v10, v22);
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_11;
    }
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100049F14(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007370(&qword_100074820);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    uint64_t v5 = *v4;
    id v6 = (id)*(v4 - 1);
    swift_bridgeObjectRetain();
    unint64_t result = sub_10004A830((uint64_t)v6);
    if (v8) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    uint64_t v9 = 8 * result;
    *(void *)(v2[6] + v9) = v6;
    *(void *)(v2[7] + v9) = v5;
    uint64_t v10 = v2[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004A020(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007370(&qword_100074808);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000265EC(v6, (uint64_t)&v15, &qword_100074810);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_10004A7B8(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    BOOL v11 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_1000262D0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004A158(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007370(&qword_100074838);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000265EC(v6, (uint64_t)&v13, &qword_100074840);
    uint64_t v7 = v13;
    unint64_t result = sub_10004A8B8(v13);
    if (v9) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(void *)(v3[6] + 8 * result) = v7;
    unint64_t result = (unint64_t)sub_1000262D0(&v14, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v10 = v3[2];
    BOOL v11 = __OFADD__(v10, 1);
    uint64_t v12 = v10 + 1;
    if (v11) {
      goto LABEL_11;
    }
    v3[2] = v12;
    v6 += 40;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004A288(uint64_t a1)
{
  uint64_t v2 = sub_100007370(&qword_100074280);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(void *)(a1 + 16))
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007370(&qword_100074828);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_1000265EC(v13, (uint64_t)v6, &qword_100074280);
    unint64_t result = sub_10004A94C((uint64_t)v6);
    if (v16) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for URL();
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18 + *(void *)(*(void *)(v19 - 8) + 72) * v17, v6, v19);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v6[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004A47C(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007370(&qword_100074210);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1000265EC(v6, (uint64_t)v15, &qword_100074818);
    unint64_t result = sub_10004A874((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1000262D0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10004A5C0(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100007370(&qword_1000747F8);
  uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  uint64_t v4 = (unint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v5 = *(v4 - 3);
    uint64_t v6 = *(v4 - 2);
    uint64_t v7 = *(v4 - 1);
    unint64_t v8 = *v4;
    swift_bridgeObjectRetain();
    sub_100015DDC(v7, v8);
    unint64_t result = sub_10004A7B8(v5, v6);
    if (v10) {
      break;
    }
    *(void *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    long long v11 = (uint64_t *)(v2[6] + 16 * result);
    *long long v11 = v5;
    v11[1] = v6;
    uint64_t v12 = (uint64_t *)(v2[7] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    uint64_t v13 = v2[2];
    BOOL v14 = __OFADD__(v13, 1);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10004A6E8()
{
  return 1;
}

Swift::Int sub_10004A6F0()
{
  return Hasher._finalize()();
}

void sub_10004A734()
{
}

Swift::Int sub_10004A75C()
{
  return Hasher._finalize()();
}

void sub_10004A79C()
{
  qword_1000747B0 = 1635017060;
  qword_1000747B8 = 0xE400000000000000;
}

unint64_t sub_10004A7B8(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_10004A9D0(a1, a2, v4);
}

unint64_t sub_10004A830(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10004AAB4(a1, v4);
}

unint64_t sub_10004A874(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_10004ABC0(a1, v4);
}

unint64_t sub_10004A8B8(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_10004AC88(a1, v2);
}

unint64_t sub_10004A94C(uint64_t a1)
{
  type metadata accessor for URL();
  sub_10004BAC0(&qword_100074290);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_10004AE00(a1, v2);
}

unint64_t sub_10004A9D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10004AAB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10004BA80();
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = static NSObject.== infix(_:_:)();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_10004ABC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100026424(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_10004BA2C((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10004AC88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_10004AE00(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = a1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = v2;
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  uint64_t v19 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v14 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v13 = v5 + 16;
    uint64_t v12 = v14;
    uint64_t v15 = *(void *)(v13 + 56);
    do
    {
      v12(v8, *(void *)(v21 + 48) + v15 * v10, v4);
      sub_10004BAC0(&qword_100074830);
      char v16 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v13 - 8))(v8, v4);
      if (v16) {
        break;
      }
      unint64_t v10 = (v10 + 1) & v11;
    }
    while (((*(void *)(v19 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_10004AFAC(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  uint64_t v9 = __chkstk_darwin(v7, v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)&v32 - v13;
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  dispatch thunk of PropertyListEncoder.outputFormat.setter();
  sub_100007370(&qword_1000747E0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10005FEC0;
  if (qword_100073A20 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_1000747B8;
  *(void *)(inited + 32) = qword_1000747B0;
  *(void *)(inited + 40) = v16;
  *(void *)(inited + 48) = a1;
  *(void *)(inited + 56) = a2;
  swift_bridgeObjectRetain();
  sub_100015DDC(a1, a2);
  id v36 = (id)sub_10004A5C0(inited);
  sub_100007370(&qword_1000747C0);
  sub_10004B95C(&qword_1000747E8, (void (*)(void))sub_10004B9D8);
  uint64_t v17 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  unint64_t v19 = v18;
  swift_bridgeObjectRelease();
  if (v3) {
    return swift_release();
  }
  uint64_t v32 = v17;
  unint64_t v33 = v19;
  sub_10000BE0C(a3, a3[3]);
  dispatch thunk of Locatable.familyControlsKeyData.getter();
  id v20 = [self defaultManager];
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v21);
  uint64_t v23 = v22;
  uint64_t v24 = v35;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v34 + 8);
  v25(v11, v35);
  id v36 = 0;
  unsigned int v26 = [v20 createDirectoryAtURL:v23 withIntermediateDirectories:1 attributes:0 error:&v36];

  id v27 = v36;
  if (v26)
  {
    uint64_t v29 = v32;
    unint64_t v28 = v33;
    Data.write(to:options:)();
    v25(v14, v24);
    sub_10000BF6C(v29, v28);
    return swift_release();
  }
  uint64_t v31 = v27;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  sub_10000BF6C(v32, v33);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v25)(v14, v24);
}

uint64_t sub_10004B338(void *a1)
{
  uint64_t v3 = type metadata accessor for KeyGenerator();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for URL();
  uint64_t v32 = *(void *)(v34 - 8);
  __chkstk_darwin(v34, v8);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [self defaultManager];
  uint64_t v12 = a1[3];
  uint64_t v35 = a1;
  sub_10000BE0C(a1, v12);
  dispatch thunk of Locatable.familyControlsKeyData.getter();
  URL.path.getter();
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v33 = v11;
  LODWORD(a1) = [v11 fileExistsAtPath:v13];

  if (a1)
  {
    type metadata accessor for PropertyListDecoder();
    uint64_t v14 = swift_allocObject();
    uint64_t v15 = PropertyListDecoder.init()();
    uint64_t v16 = Data.init(contentsOf:options:)();
    if (v1)
    {
      (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v34);

      swift_release();
      goto LABEL_6;
    }
    uint64_t v22 = v16;
    unint64_t v23 = v17;
    sub_100007370(&qword_1000747C0);
    sub_10004B95C(&qword_1000747C8, (void (*)(void))sub_10004B8B4);
    uint64_t v14 = v15;
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    id v20 = v35;
    uint64_t v25 = v36;
    if (qword_100073A20 == -1)
    {
      if (!*(void *)(v36 + 16)) {
        goto LABEL_15;
      }
    }
    else
    {
      swift_once();
      if (!*(void *)(v25 + 16)) {
        goto LABEL_15;
      }
    }
    uint64_t v26 = qword_1000747B8;
    uint64_t v27 = qword_1000747B0;
    swift_bridgeObjectRetain();
    uint64_t v14 = v25;
    unint64_t v28 = sub_10004A7B8(v27, v26);
    if (v29)
    {
      uint64_t v30 = *(void *)(v25 + 56) + 16 * v28;
      v31[1] = v26;
      uint64_t v14 = *(void *)v30;
      sub_100015DDC(*(void *)v30, *(void *)(v30 + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v34);
      sub_10000BF6C(v22, v23);

      swift_release();
      goto LABEL_7;
    }
    swift_bridgeObjectRelease();
LABEL_15:
    swift_bridgeObjectRelease();
    sub_10004B908();
    swift_allocError();
    swift_willThrow();
    sub_10000BF6C(v22, v23);

    swift_release();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v34);
    goto LABEL_7;
  }
  KeyGenerator.init()();
  uint64_t v14 = (uint64_t)v7;
  uint64_t v18 = KeyGenerator.generateKeyData()();
  if (!v1)
  {
    uint64_t v14 = v18;
    unint64_t v24 = v19;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_100015DDC(v14, v24);
    id v20 = v35;
    sub_10004AFAC(v14, v24, v35);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v34);

    sub_10000BF6C(v14, v24);
    goto LABEL_7;
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v34);
LABEL_6:
  id v20 = v35;
LABEL_7:
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v20);
  return v14;
}

unint64_t sub_10004B8B4()
{
  unint64_t result = qword_1000747D0;
  if (!qword_1000747D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000747D0);
  }
  return result;
}

unint64_t sub_10004B908()
{
  unint64_t result = qword_1000747D8;
  if (!qword_1000747D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000747D8);
  }
  return result;
}

uint64_t sub_10004B95C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000BF24(&qword_1000747C0);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004B9D8()
{
  unint64_t result = qword_1000747F0;
  if (!qword_1000747F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1000747F0);
  }
  return result;
}

uint64_t sub_10004BA2C(uint64_t a1)
{
  return a1;
}

unint64_t sub_10004BA80()
{
  unint64_t result = qword_1000740F0;
  if (!qword_1000740F0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1000740F0);
  }
  return result;
}

uint64_t sub_10004BAC0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for URL();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AuthorizationKeyError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for AuthorizationKeyError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10004BBF4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10004BC1C()
{
  return 0;
}

ValueMetadata *type metadata accessor for AuthorizationKeyError()
{
  return &type metadata for AuthorizationKeyError;
}

unint64_t sub_10004BC38()
{
  unint64_t result = qword_100074848;
  if (!qword_100074848)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_100074848);
  }
  return result;
}

void sub_10004BC8C(uint64_t a1, void *a2)
{
  int v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_10004BCF8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  int v3 = &_swiftEmptyArrayStorage;
  if (!v2) {
    return (uint64_t)v3;
  }
  unint64_t v17 = &_swiftEmptyArrayStorage;
  uint64_t result = sub_10003DD44(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    int v3 = v17;
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v5 = 0;
      do
      {
        uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v17 = v3;
        unint64_t v8 = v3[2];
        unint64_t v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10003DD44(v7 > 1, v8 + 1, 1);
          int v3 = v17;
        }
        ++v5;
        uint64_t v15 = sub_10001958C(0, &qword_1000748A0);
        uint64_t v16 = &off_10006F488;
        *(void *)&long long v14 = v6;
        v3[2] = v8 + 1;
        sub_100028C4C(&v14, (uint64_t)&v3[5 * v8 + 4]);
      }
      while (v2 != v5);
    }
    else
    {
      uint64_t v9 = (void **)(a1 + 32);
      do
      {
        uint64_t v10 = *v9;
        unint64_t v17 = v3;
        unint64_t v12 = v3[2];
        unint64_t v11 = v3[3];
        id v13 = v10;
        if (v12 >= v11 >> 1)
        {
          sub_10003DD44(v11 > 1, v12 + 1, 1);
          int v3 = v17;
        }
        uint64_t v15 = sub_10001958C(0, &qword_1000748A0);
        uint64_t v16 = &off_10006F488;
        *(void *)&long long v14 = v13;
        v3[2] = v12 + 1;
        sub_100028C4C(&v14, (uint64_t)&v3[5 * v12 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

void sub_10004BEEC(uint64_t a1)
{
}

void sub_10004BF08(uint64_t a1)
{
}

id sub_10004BF44(uint64_t a1)
{
  return [*v1 setQualityOfService:a1];
}

id sub_10004BF58()
{
  id v1 = [*v0 recordID];

  return v1;
}

void sub_10004BF90(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  unint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    Class isa = 0;
    goto LABEL_5;
  }
  unint64_t v8 = sub_10004C164(a1);
  swift_bridgeObjectRelease();
  if (v8)
  {
    sub_10001958C(0, &qword_1000740E8);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
LABEL_5:
    [v1 setRecordsToSave:isa];
    Class v9 = isa;

    return;
  }
  static Logger.syncEngine.getter();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v10, v11))
  {
    unint64_t v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "New value does not contain CKRecords", v12, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void *sub_10004C164(uint64_t a1)
{
  uint64_t v6 = &_swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 40)
  {
    sub_10000BFC4(i, (uint64_t)v5);
    sub_100007370(&qword_1000741D8);
    sub_10001958C(0, &qword_1000740E8);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();

  return 0;
}

uint64_t sub_10004C288(uint64_t result, void *a2, char a3, void (*a4)(uint64_t, void *))
{
  uint64_t v6 = result;
  if (a3)
  {
    if (!a4) {
      return result;
    }
    v8[0] = a2;
    char v9 = 1;
    swift_errorRetain();
  }
  else
  {
    if (!a4) {
      return result;
    }
    v8[3] = sub_10001958C(0, &qword_1000740E8);
    _DWORD v8[4] = &off_10006F3B0;
    v8[0] = a2;
    char v9 = 0;
    id v7 = a2;
  }
  a4(v6, v8);
  return sub_10004D130((uint64_t)v8);
}

uint64_t sub_10004C330(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  sub_10001957C(a1);
  CKModifyRecordsOperation.perRecordSaveBlock.setter();

  return sub_100018E74(a1);
}

void sub_10004C3BC(uint64_t a1)
{
}

void sub_10004C3E0(uint64_t a1)
{
}

void sub_10004C3EC(uint64_t a1)
{
}

void sub_10004C3F8(uint64_t a1, SEL *a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  char v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000BFC4(a1, (uint64_t)v15);
  sub_100007370((uint64_t *)&unk_100074200);
  sub_10001958C(0, &qword_1000748A0);
  if (swift_dynamicCast())
  {
    uint64_t v10 = v14;
    objc_msgSend(v2, *a2, v14);
  }
  else
  {
    static Logger.syncEngine.getter();
    os_log_type_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Participant is not a CKShare.Participant", v13, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_10004C5A8()
{
  id v1 = [*v0 participants];
  sub_10001958C(0, &qword_1000748A0);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v3 = sub_10004BCF8(v2);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_10004C624@<X0>(uint64_t a1@<X8>)
{
  id v3 = [*v1 URL];
  if (v3)
  {
    uint64_t v4 = v3;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
    uint64_t v7 = v5;
    uint64_t v8 = a1;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v10 = type metadata accessor for URL();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56);
    uint64_t v7 = v10;
    uint64_t v8 = a1;
    uint64_t v9 = 1;
  }

  return v6(v8, v9, 1, v7);
}

void sub_10004C6EC(void *a1@<X0>, void *a2@<X8>)
{
  id v4 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithRecordZoneID:a1];

  *a2 = v4;
}

void sub_10004C740(uint64_t a1)
{
}

void sub_10004C76C(uint64_t a1)
{
}

uint64_t sub_10004C798(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = a1;
    *(void *)(v10 + 24) = a2;
    aBlock[4] = sub_10004D0DC;
    aBlock[5] = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_10004CA2C;
    void aBlock[3] = &unk_10006F578;
    os_log_type_t v11 = _Block_copy(aBlock);
    sub_10001957C(a1);
    swift_retain();
    swift_release();
    [v2 setShareParticipantFetchedBlock:v11];
    sub_100018E74(a1);
    _Block_release(v11);
    return swift_release();
  }
  else
  {
    static Logger.syncEngine.getter();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "New value is not of type ((CKShare.Participant) -> Void)?", v15, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
}

uint64_t sub_10004C9B4(void *a1, void (*a2)(void *))
{
  v6[3] = sub_10001958C(0, &qword_1000748A0);
  v6[4] = &off_10006F488;
  v6[0] = a1;
  id v4 = a1;
  a2(v6);
  return _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v6);
}

void sub_10004CA2C(uint64_t a1, void *a2)
{
  id v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

void sub_10004CA94(void *a1@<X8>)
{
  id v2 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  sub_10001958C(0, &qword_1000748A8);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v4 = [v2 initWithUserIdentityLookupInfos:isa];

  *a1 = v4;
}

uint64_t sub_10004CB20(uint64_t a1, uint64_t a2)
{
  return sub_10004C798(a1, a2);
}

void sub_10004CB44(uint64_t a1, uint64_t a2)
{
  id v3 = *v2;
  if (a1)
  {
    v5[4] = a1;
    v5[5] = a2;
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 1107296256;
    v5[2] = sub_10004BC8C;
    v5[3] = &unk_10006F528;
    id v4 = _Block_copy(v5);
    swift_release();
  }
  else
  {
    id v4 = 0;
  }
  [v3 setFetchShareParticipantsCompletionBlock:v4];
  _Block_release(v4);
}

id sub_10004CBF0()
{
  return [*v0 acceptanceStatus];
}

id sub_10004CC00()
{
  id v1 = [*v0 invitationToken];

  return v1;
}

id sub_10004CC38()
{
  return [*v0 isCurrentUser];
}

id sub_10004CC5C()
{
  return [*v0 role];
}

uint64_t sub_10004CC6C@<X0>(void *a1@<X8>)
{
  id v3 = [*v1 userIdentity];
  uint64_t result = sub_10001958C(0, &qword_100074898);
  a1[3] = result;
  a1[4] = &off_10006F4F0;
  *a1 = v3;
  return result;
}

void sub_10004CCD0(uint64_t a1)
{
}

void sub_10004CCEC(uint64_t a1, unint64_t *a2, uint64_t a3, const char *a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  os_log_type_t v12 = &v18[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000BFC4(a1, (uint64_t)v18);
  sub_100007370(&qword_100074888);
  sub_10001958C(0, a2);
  if (swift_dynamicCast())
  {
    uint64_t v13 = v17;
    [v4 addOperation:v17];
  }
  else
  {
    static Logger.syncEngine.getter();
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, a4, v16, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

uint64_t sub_10004CEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *v3;
  _DWORD v8[4] = a2;
  void v8[5] = a3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_100016394;
  v8[3] = &unk_10006F500;
  uint64_t v6 = _Block_copy(v8);
  swift_retain();
  [v5 saveRecordZone:a1 completionHandler:v6];
  _Block_release(v6);
  return swift_release();
}

void sub_10004CF60(uint64_t a1)
{
}

_UNKNOWN **sub_10004CF9C()
{
  return &off_10006F3B0;
}

uint64_t sub_10004CFA8()
{
  sub_10004D048(&qword_100073AA8);
  _BridgedStoredNSError.code.getter();
  return v1;
}

uint64_t sub_10004D004(uint64_t a1)
{
  uint64_t result = sub_10004D048(&qword_100074230);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10004D048(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CKError(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10004D08C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10004D09C()
{
  return swift_release();
}

uint64_t sub_10004D0A4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004D0DC(void *a1)
{
  return sub_10004C9B4(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_10004D0E4()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10004D124(uint64_t a1, void *a2, char a3)
{
  return sub_10004C288(a1, a2, a3 & 1, *(void (**)(uint64_t, void *))(v3 + 16));
}

uint64_t sub_10004D130(uint64_t a1)
{
  uint64_t v2 = sub_100007370(&qword_1000741D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004D1A0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_10004D268()
{
  id v1 = [v0 bundleIdentifier];
  if (!v1) {
    return;
  }

  id v2 = [v0 bundleIdentifier];
  if (!v2)
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v3 = v2;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v4._object = (void *)0x8000000100061F20;
  v4._countAndFlagsBits = 0xD000000000000010;
  LOBYTE(v3) = String.hasPrefix(_:)(v4);
  swift_bridgeObjectRelease();
  if (v3) {
    return;
  }
  id v5 = [v0 compatibilityObject];
  id v6 = [v5 applicationType];

  if (!v6) {
    goto LABEL_19;
  }
  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v9 = v8;

  if (v7 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v9 == v10) {
    goto LABEL_7;
  }
  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v11) {
    return;
  }
  id v12 = v0;
  id v13 = [v12 compatibilityObject];
  id v14 = [v13 applicationType];

  if (!v14)
  {
LABEL_20:
    __break(1u);
    return;
  }
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  if (v15 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v17 == v18)
  {

LABEL_7:
    swift_bridgeObjectRelease_n();
    return;
  }
  char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
  {
    id v20 = [v12 appTags];
    uint64_t v21 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v20) = sub_10004D1A0(0x6E6564646968, 0xE600000000000000, v21);
    swift_bridgeObjectRelease();
    if ((v20 & 1) == 0 && ([v12 isLaunchProhibited] & 1) == 0)
    {
      id v22 = [v12 applicationState];
      [v22 isRestricted];
    }
  }
}

void sub_10004D530(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for NSFastEnumerationIterator();
  uint64_t v55 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v12 = __chkstk_darwin(v9, v11);
  id v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  uint64_t v17 = (char *)&v51 - v16;
  if (*(unsigned char *)(v2 + 152) == 1)
  {
    uint64_t v52 = v2;
    uint64_t v53 = a1;
    uint64_t v54 = a2;
    static Logger.syncEngine.getter();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      id v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Updating installed applications", v20, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
    id v21 = [self enumeratorWithOptions:0];
    NSEnumerator.makeIterator()();
    id v51 = v21;

    uint64_t v22 = sub_10005CE94(&qword_100074A90, (void (*)(uint64_t))&type metadata accessor for NSFastEnumerationIterator);
    dispatch thunk of IteratorProtocol.next()();
    if (v62)
    {
      unint64_t v23 = (char *)&_swiftEmptyArrayStorage;
      unint64_t v24 = (unint64_t *)&unk_100074A98;
      uint64_t v25 = LSApplicationRecord_ptr;
      uint64_t v56 = (char *)&type metadata for Any + 8;
      while (1)
      {
        sub_1000262D0(&aBlock, v59);
        sub_100007314((uint64_t)v59, (uint64_t)v58);
        sub_10001958C(0, v24);
        if ((swift_dynamicCast() & 1) == 0) {
          break;
        }
        id v26 = v57;
        sub_10004D268();
        char v28 = v27;

        if ((v28 & 1) != 0 && (id v29 = [v26 bundleIdentifier]) != 0)
        {
          uint64_t v30 = v29;
          uint64_t v31 = v22;
          uint64_t v32 = v8;
          uint64_t v33 = v5;
          uint64_t v34 = v25;
          uint64_t v35 = v24;
          uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v38 = v37;

          _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v59);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v23 = sub_100025298(0, *((void *)v23 + 2) + 1, 1, v23);
          }
          unint64_t v40 = *((void *)v23 + 2);
          unint64_t v39 = *((void *)v23 + 3);
          if (v40 >= v39 >> 1) {
            unint64_t v23 = sub_100025298((char *)(v39 > 1), v40 + 1, 1, v23);
          }
          *((void *)v23 + 2) = v40 + 1;
          uint64_t v41 = &v23[16 * v40];
          *((void *)v41 + 4) = v36;
          *((void *)v41 + 5) = v38;
          unint64_t v24 = v35;
          uint64_t v25 = v34;
          uint64_t v5 = v33;
          uint64_t v8 = v32;
          uint64_t v22 = v31;
        }
        else
        {

          _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v59);
        }
        dispatch thunk of IteratorProtocol.next()();
        if (!v62) {
          goto LABEL_20;
        }
      }
      __break(1u);
    }
    else
    {
      unint64_t v23 = (char *)&_swiftEmptyArrayStorage;
LABEL_20:
      (*(void (**)(char *, uint64_t))(v55 + 8))(v8, v5);
      id v45 = [self sharedCategories];
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      uint64_t v47 = CTOSPlatformCurrent;
      uint64_t v48 = (void *)swift_allocObject();
      v48[2] = v23;
      uint64_t v49 = v53;
      v48[3] = v52;
      void v48[4] = v49;
      v48[5] = v54;
      uint64_t v63 = sub_10005B2EC;
      uint64_t v64 = v48;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      uint64_t v61 = sub_10005730C;
      char v62 = &unk_10006F820;
      uint64_t v50 = _Block_copy(&aBlock);
      swift_retain();
      sub_10001957C(v49);
      swift_release();
      [v45 categoriesForBundleIDs:isa platform:v47 completionHandler:v50];
      _Block_release(v50);
    }
  }
  else
  {
    static Logger.syncEngine.getter();
    char v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Skipping installed application update because we haven't started collecting activity", v44, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v9);
  }
}

uint64_t sub_10004DB28(void *a1, uint64_t a2)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v3 = a1;
    char v4 = __CocoaSet.contains(_:)();

    return v4 & 1;
  }
  if (!*(void *)(a2 + 16)
    || (Swift::Int v6 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40)),
        uint64_t v7 = -1 << *(unsigned char *)(a2 + 32),
        unint64_t v8 = v6 & ~v7,
        uint64_t v9 = a2 + 56,
        ((*(void *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0))
  {
LABEL_11:
    char v12 = 0;
    return v12 & 1;
  }
  sub_10001958C(0, (unint64_t *)&qword_100073C38);
  id v10 = *(id *)(*(void *)(a2 + 48) + 8 * v8);
  char v11 = static NSObject.== infix(_:_:)();

  if ((v11 & 1) == 0)
  {
    uint64_t v13 = ~v7;
    unint64_t v14 = (v8 + 1) & v13;
    if ((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
    {
      do
      {
        id v15 = *(id *)(*(void *)(a2 + 48) + 8 * v14);
        char v12 = static NSObject.== infix(_:_:)();

        if (v12) {
          break;
        }
        unint64_t v14 = (v14 + 1) & v13;
      }
      while (((*(void *)(v9 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
      return v12 & 1;
    }
    goto LABEL_11;
  }
  char v12 = 1;
  return v12 & 1;
}

uint64_t sub_10004DC88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    unint64_t v8 = v6 & ~v7;
    uint64_t v9 = a3 + 56;
    if ((*(void *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8))
    {
      uint64_t v10 = *(void *)(a3 + 48);
      char v11 = (void *)(v10 + 16 * v8);
      BOOL v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        return 1;
      }
      uint64_t v14 = ~v7;
      unint64_t v15 = (v8 + 1) & v14;
      if ((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15))
      {
        while (1)
        {
          uint64_t v16 = (void *)(v10 + 16 * v15);
          BOOL v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            break;
          }
          uint64_t result = 0;
          unint64_t v15 = (v15 + 1) & v14;
          if (((*(void *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v15) & 1) == 0) {
            return result;
          }
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_10004DDC0(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *v4;
  uint64_t v31 = a3;
  uint64_t v32 = v8;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v35 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  BOOL v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DispatchQoS();
  uint64_t v33 = *(void *)(v13 - 8);
  uint64_t v34 = v13;
  __chkstk_darwin(v13, v14);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v17 = dispatch_group_create();
  dispatch_group_enter(v17);
  id v18 = [self fetchAllRecordZonesOperation];
  [v18 setQualityOfService:25];
  uint64_t v19 = swift_allocObject();
  *(unsigned char *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = v17;
  *(void *)(v19 + 32) = v4;
  *(unsigned char *)(v19 + 40) = a2;
  id v20 = v17;
  swift_retain();
  CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter();
  id v21 = (void *)swift_allocObject();
  uint64_t v22 = v31;
  void v21[2] = v20;
  v21[3] = v22;
  v21[4] = a4;
  unint64_t v23 = v20;
  swift_retain();
  CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter();
  sub_10001958C(0, (unint64_t *)&qword_100073ED0);
  unint64_t v24 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = v32;
  *(void *)(v25 + 16) = v18;
  *(void *)(v25 + 24) = v26;
  aBlock[4] = sub_10005B3D4;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100036EDC;
  void aBlock[3] = &unk_10006F8C0;
  char v27 = _Block_copy(aBlock);
  id v28 = v18;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_10005CE94((unint64_t *)&unk_100074180, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007370(&qword_100074360);
  sub_10005CEDC((unint64_t *)&qword_100074190, &qword_100074360);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v16, v34);
}

uint64_t sub_10004E1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v57 = a1;
  uint64_t v58 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v61 = (char *)&v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for DispatchQoS();
  uint64_t v60 = *(void *)(v62 - 8);
  __chkstk_darwin(v62, v8);
  uint64_t v59 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Logger();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  id v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  unint64_t v23 = (char *)&v54 - v22;
  if (*(unsigned char *)(v3 + 152) == 1)
  {
    uint64_t v55 = v5;
    uint64_t v56 = v4;
    static Logger.syncEngine.getter();
    unint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Updating all activity", v26, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v23, v15);
    char v27 = *(void **)(v3 + 176);
    NSString v28 = String._bridgeToObjectiveC()();
    LOBYTE(v27) = [v27 BOOLForKey:v28];

    if ((v27 & 1) == 0)
    {
      swift_retain();
      CKSyncEngine.state.getter();
      swift_release();
      sub_100007370(&qword_100074A68);
      uint64_t v29 = type metadata accessor for CKSyncEngine.PendingDatabaseChange();
      uint64_t v30 = *(void *)(v29 - 8);
      unint64_t v31 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = xmmword_10005FEC0;
      uint64_t v33 = (void *)(v32 + v31);
      if (qword_1000739B8 != -1) {
        swift_once();
      }
      uint64_t v34 = (void *)qword_100074BC8;
      *uint64_t v33 = qword_100074BC8;
      (*(void (**)(void *, void, uint64_t))(v30 + 104))(v33, enum case for CKSyncEngine.PendingDatabaseChange.saveZone(_:), v29);
      id v35 = v34;
      CKSyncEngine.State.add(pendingDatabaseChanges:)((Swift::OpaquePointer)v32);
      swift_release();
      swift_bridgeObjectRelease();
    }
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = 0;
    uint64_t v37 = dispatch_group_create();
    dispatch_group_enter(v37);
    uint64_t v38 = swift_allocObject();
    *(void *)(v38 + 16) = v36;
    *(void *)(v38 + 24) = v37;
    swift_retain();
    unint64_t v39 = v37;
    sub_10004D530((uint64_t)sub_10005AFF0, v38);
    swift_release();
    dispatch_group_enter(v39);
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = v36;
    *(void *)(v40 + 24) = v39;
    swift_retain();
    uint64_t v41 = v39;
    sub_100055AAC((uint64_t)sub_10005B01C, v40);
    swift_release();
    sub_10001958C(0, (unint64_t *)&qword_100073ED0);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v10);
    char v42 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    os_log_type_t v43 = (void *)swift_allocObject();
    uint64_t v45 = v57;
    uint64_t v44 = v58;
    v43[2] = v36;
    v43[3] = v45;
    v43[4] = v44;
    aBlock[4] = sub_10005B08C;
    aBlock[5] = v43;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_100036EDC;
    void aBlock[3] = &unk_10006F780;
    uint64_t v46 = _Block_copy(aBlock);
    swift_retain();
    sub_10001957C(v45);
    uint64_t v47 = v59;
    static DispatchQoS.unspecified.getter();
    uint64_t v63 = &_swiftEmptyArrayStorage;
    sub_10005CE94((unint64_t *)&unk_100074180, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_100007370(&qword_100074360);
    sub_10005CEDC((unint64_t *)&qword_100074190, &qword_100074360);
    uint64_t v48 = v61;
    uint64_t v49 = v56;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_group.notify(qos:flags:queue:execute:)();
    _Block_release(v46);

    (*(void (**)(char *, uint64_t))(v55 + 8))(v48, v49);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v47, v62);
    swift_release();
    return swift_release();
  }
  else
  {
    static Logger.syncEngine.getter();
    id v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Skipping activity update because we haven't started collecting activity", v53, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v20, v15);
  }
}

uint64_t sub_10004E994(uint64_t (*a1)(void, void), uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v32 = a2;
  uint64_t v34 = a1;
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v35 - 8);
  __chkstk_darwin(v35, v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  uint64_t v33 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v29 - v14;
  static Logger.syncEngine.getter();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Removing all activity", v18, 2u);
    swift_slowDealloc();
  }

  uint64_t v30 = *(void (**)(char *, uint64_t))(v9 + 8);
  uint64_t v31 = v8;
  v30(v15, v8);
  swift_retain();
  CKSyncEngine.state.getter();
  swift_release();
  sub_100007370(&qword_100074A68);
  uint64_t v19 = type metadata accessor for CKSyncEngine.PendingDatabaseChange();
  uint64_t v20 = *(void *)(v19 - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_10005FEC0;
  unint64_t v23 = (void *)(v22 + v21);
  if (qword_1000739B0 != -1) {
    swift_once();
  }
  unint64_t v24 = (void *)qword_100074BC0;
  *unint64_t v23 = qword_100074BC0;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v23, enum case for CKSyncEngine.PendingDatabaseChange.deleteZone(_:), v19);
  id v25 = v24;
  CKSyncEngine.State.add(pendingDatabaseChanges:)((Swift::OpaquePointer)v22);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v26 = *(void **)(v3 + 176);
  NSString v27 = String._bridgeToObjectiveC()();
  [v26 removeObjectForKey:v27];

  type metadata accessor for UsageStore();
  static UsageStore.shared.getter();
  UsageStore.removeAll()();
  swift_release();
  static UsageStore.shared.getter();
  Locations.familyControlsStore.getter();
  dispatch thunk of UsageStore.save(to:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v35);
  uint64_t result = swift_release();
  if (v34) {
    return v34(0, 0);
  }
  return result;
}

double sub_10004EF50()
{
  double result = (double)XPC_ACTIVITY_INTERVAL_1_HOUR;
  *(double *)&qword_100074C40 = (double)XPC_ACTIVITY_INTERVAL_1_HOUR;
  return result;
}

double sub_10004EF6C()
{
  double result = (double)XPC_ACTIVITY_INTERVAL_1_DAY;
  *(double *)&qword_100074C48 = (double)XPC_ACTIVITY_INTERVAL_1_DAY;
  return result;
}

void *sub_10004EF88()
{
  uint64_t v0 = (void (*)(uint64_t, char *, uint64_t))sub_10001958C(0, &qword_100074AC8);
  type metadata accessor for FamilySyncEngine();
  swift_allocObject();
  double result = sub_10004F218(v0, (void (*)(char *, uint64_t, uint64_t))&off_10006E638);
  qword_100074C50 = (uint64_t)result;
  return result;
}

void sub_10004EFF0()
{
  id v0 = objc_allocWithZone((Class)CKContainerID);
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 initWithContainerIdentifier:v1 environment:1];

  qword_100074C58 = (uint64_t)v2;
}

void sub_10004F064()
{
  id v0 = [objc_allocWithZone((Class)CKContainerOptions) init];
  [v0 setUseZoneWidePCS:1];
  if (qword_100073A40 != -1) {
    swift_once();
  }
  id v1 = [objc_allocWithZone((Class)CKContainer) initWithContainerID:qword_100074C58 options:v0];

  qword_100074C60 = (uint64_t)v1;
}

uint64_t sub_10004F114()
{
  uint64_t v0 = dispatch thunk of FamilyCircle.guardians.getter();
  uint64_t v1 = dispatch thunk of FamilyCircle.children.getter();
  v8[0] = v0;
  sub_100054A04(v1);
  uint64_t v10 = v0;
  dispatch thunk of FamilyCircle.currentMember.getter();
  uint64_t v2 = v9;
  if (v9)
  {
    sub_10000BE0C(v8, v9);
    uint64_t v3 = dispatch thunk of FamilyMemberable.altDSID.getter();
    uint64_t v2 = v4;
    _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v8);
  }
  else
  {
    sub_100015758((uint64_t)v8, &qword_100074358);
    uint64_t v3 = 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_10005CA60(&v10, v3, v2);
  uint64_t result = swift_bridgeObjectRelease();
  int64_t v7 = *(void *)(v10 + 16);
  if (v7 < v5)
  {
    __break(1u);
  }
  else
  {
    sub_100026988(v5, v7);
    swift_bridgeObjectRelease();
    return v10;
  }
  return result;
}

void *sub_10004F218(void (*a1)(uint64_t, char *, uint64_t), void (*a2)(char *, uint64_t, uint64_t))
{
  uint64_t v3 = (void *)v2;
  os_log_type_t v107 = a2;
  uint64_t v106 = a1;
  uint64_t v100 = type metadata accessor for Logger();
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin(v100, v4);
  unint64_t v98 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_100007370(&qword_100074AB0);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v108 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = sub_100007370(&qword_100074AD0);
  uint64_t v10 = __chkstk_darwin(v109, v9);
  uint64_t v112 = (char *)&v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v110 = (char *)&v97 - v14;
  __chkstk_darwin(v13, v15);
  uint64_t v111 = (uint64_t)&v97 - v16;
  uint64_t v17 = type metadata accessor for Locations();
  uint64_t v105 = *(void *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  unint64_t v104 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (objc_class *)type metadata accessor for AuthorizationAuthenticator();
  id v21 = [objc_allocWithZone(v20) init];
  uint64_t v116[3] = v20;
  v116[4] = &off_10006E4A0;
  v116[0] = v21;
  v115[3] = v17;
  v115[4] = (uint64_t)&protocol witness table for Locations;
  sub_100025234(v115);
  Locations.init(useExplicitLocations:)();
  id v22 = [objc_allocWithZone((Class)MOLocalSettingsStore) init];
  v114[3] = &type metadata for AuthorizationManagedSettings;
  v114[4] = &off_10006EFE8;
  v114[0] = v22;
  sub_100007BE8((uint64_t)v116, (uint64_t)v115, v114, v2 + 16);
  *(unsigned char *)(v2 + 152) = 0;
  id v23 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v23 initWithIdentifier:v24];

  v3[20] = v25;
  v3[22] = [self standardUserDefaults];
  type metadata accessor for FamilyCircle();
  swift_allocObject();
  v3[23] = FamilyCircle.init()();
  uint64_t v26 = (char *)v3 + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_locations;
  Locations.init(useExplicitLocations:)();
  uint64_t v27 = OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_retrySharing;
  id v28 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
  NSString v29 = String._bridgeToObjectiveC()();
  id v30 = [v28 initWithIdentifier:v29];

  *(void *)((char *)v3 + v27) = v30;
  os_log_type_t v103 = (char *)OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_sharingCoordinator;
  uint64_t v31 = sub_10001958C(0, &qword_100074AD8);
  if (qword_100073A48 != -1) {
    swift_once();
  }
  id v32 = (id)qword_100074C60;
  id v33 = [v32 privateCloudDatabase];
  static FamilyControlsService.nameIDS.getter();
  id v34 = objc_allocWithZone((Class)IDSInvitationManager);
  NSString v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v36 = [v34 initWithServiceIdentifier:v35];

  uint64_t v37 = sub_10001958C(0, &qword_100074AE0);
  uint64_t v38 = sub_10001958C(0, &qword_100074AE8);
  uint64_t v39 = sub_10001958C(0, &qword_100074AF0);
  uint64_t v40 = (char *)objc_allocWithZone((Class)_s18SharingCoordinatorCMa());
  uint64_t v41 = sub_10005C338(v31, (uint64_t)&off_10006F408, (uint64_t)v32, (uint64_t)v33, v36, v37, (uint64_t)&off_10006F3C0, v38, (uint64_t)&off_10006F440, v39, (uint64_t)&off_100073D48, v40);
  *(void *)&v103[(void)v3] = v41;
  char v42 = (void (**)(uint64_t, char *, uint64_t))((char *)v3
                                                       + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_usageReporting);
  os_log_type_t v43 = v107;
  *char v42 = v106;
  v42[1] = (void (*)(uint64_t, char *, uint64_t))v43;
  uint64_t v44 = v105;
  uint64_t v45 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
  uint64_t v46 = v104;
  v45(v104, v26, v17);
  uint64_t v47 = (objc_class *)_s10DataSourceCMa();
  uint64_t v48 = objc_allocWithZone(v47);
  *(void *)&v48[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine10DataSource_cachedAuthorizationKeyRecord] = 0;
  v48[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine10DataSource_collectActivity] = 0;
  v45(&v48[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine10DataSource_locations], v46, v17);
  v113.receiver = v48;
  v113.super_class = v47;
  id v49 = objc_msgSendSuper2(&v113, "init");
  (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v17);
  v3[21] = v49;
  uint64_t v50 = v109;
  uint64_t v51 = v111;
  uint64_t v52 = v111 + *(int *)(v109 + 48);
  Locations.familyControlsPrivateSyncMetadata.getter();
  Locations.familyControlsPrivateSyncSerialization.getter();
  if (qword_100073970 != -1) {
    swift_once();
  }
  os_log_type_t v103 = (char *)qword_100074B50;
  uint64_t v102 = (void *)v3[21];
  uint64_t v53 = v110;
  uint64_t v54 = &v110[*(int *)(v50 + 48)];
  uint64_t v55 = type metadata accessor for URL();
  uint64_t v56 = *(void *)(v55 - 8);
  uint64_t v101 = v3;
  uint64_t v57 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 16);
  v57(v53, v51, v55);
  os_log_type_t v107 = v57;
  v57(v54, v52, v55);
  uint64_t v58 = sub_100007370(&qword_100074AB8);
  uint64_t v59 = (uint64_t)v108;
  uint64_t v60 = &v108[*(int *)(v58 + 48)];
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
  v61(v108, v53, v55);
  uint64_t v62 = v54;
  uint64_t v63 = v109;
  uint64_t v106 = (void (*)(uint64_t, char *, uint64_t))v61;
  v61(v60, v62, v55);
  uint64_t v64 = v63;
  uint64_t v65 = *(void *)(v58 - 8);
  uint64_t v105 = *(void *)(v65 + 56);
  unint64_t v104 = (char *)(v65 + 56);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v105)(v59, 0, 1, v58);
  uint64_t v66 = sub_10005B548(v103, v102, v59);
  sub_100015758(v59, &qword_100074AB0);
  char v67 = v101;
  *(void *)((char *)v101 + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_privateEngine) = v66;
  uint64_t v68 = v112;
  uint64_t v69 = &v112[*(int *)(v64 + 48)];
  Locations.familyControlsSharedSyncMetadata.getter();
  Locations.familyControlsSharedSyncSerialization.getter();
  if (qword_100073978 != -1) {
    swift_once();
  }
  os_log_type_t v103 = (char *)qword_100074B58;
  uint64_t v102 = (void *)v67[21];
  uint64_t v70 = v110;
  uint64_t v71 = &v110[*(int *)(v64 + 48)];
  char v72 = v68;
  uint64_t v73 = (void (*)(char *, char *, uint64_t))v107;
  v107(v110, (uint64_t)v72, v55);
  v73(v71, v69, v55);
  uint64_t v74 = v59 + *(int *)(v58 + 48);
  uint64_t v75 = v70;
  uint64_t v76 = v106;
  v106(v59, v75, v55);
  v76(v74, v71, v55);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v105)(v59, 0, 1, v58);
  uint64_t v77 = sub_10005B548(v103, v102, v59);
  sub_100015758(v59, &qword_100074AB0);
  *(void *)((char *)v67 + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_sharedEngine) = v77;
  id v78 = (id)v67[22];
  NSString v79 = String._bridgeToObjectiveC()();
  unsigned __int8 v80 = [v78 BOOLForKey:v79];

  if ((v80 & 1) == 0)
  {
    unint64_t v81 = v98;
    static Logger.syncEngine.getter();
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v82, v83))
    {
      unint64_t v84 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v84 = 0;
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Migrating CloudKit record names to UUIDs", v84, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v99 + 8))(v81, v100);
    if (qword_1000739B0 != -1) {
      swift_once();
    }
    sub_10004FF74((void *)qword_100074BC0);
    id v85 = (id)v67[22];
    NSString v86 = String._bridgeToObjectiveC()();
    [v85 setBool:1 forKey:v86];
  }
  os_log_type_t v87 = (void *)v67[20];
  [v87 setRepeats:1];
  uint64_t v88 = qword_100073A30;
  id v89 = v87;
  if (v88 != -1) {
    swift_once();
  }
  [v89 setInterval:*(double *)&qword_100074C48];

  id v90 = [self defaultCenter];
  uint64_t v91 = qword_100073A08;
  swift_retain();
  uint64_t v92 = (uint64_t)v112;
  if (v91 != -1) {
    swift_once();
  }
  [v90 addObserver:v67 selector:"recordZoneWasSavedWithNotification:" name:qword_100074C28 object:0];
  swift_release();
  uint64_t v93 = qword_100073A00;
  swift_retain();
  if (v93 != -1) {
    swift_once();
  }
  [v90 addObserver:v67 selector:"recordZoneWasDeletedWithNotification:" name:qword_100074C20 object:0];
  swift_release();
  uint64_t v94 = qword_100073A10;
  swift_retain();
  if (v94 != -1) {
    swift_once();
  }
  [v90 addObserver:v67 selector:"privateAuthorizationKeyNeedsUpdateWithNotification:" name:qword_100074C30 object:0];
  swift_release();
  uint64_t v95 = qword_1000739E8;
  swift_retain();
  if (v95 != -1) {
    swift_once();
  }
  [v90 addObserver:v67 selector:"retrySharingWithNotification:" name:qword_100074C08 object:0];

  swift_release();
  sub_100015758(v92, &qword_100074AD0);
  sub_100015758(v111, &qword_100074AD0);
  return v67;
}

uint64_t sub_10004FF74(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Logger();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v9 = sub_100008EFC();
  id v10 = [a1 zoneName];
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  if (qword_1000739A8 != -1) {
    swift_once();
  }
  BOOL v14 = qword_100074BB0 == v11 && *(void *)algn_100074BB8 == v13;
  if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void **)(v2 + 176);
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 removeObjectForKey:v16];

    sub_10004E994(0, 0);
    if (v9) {
      sub_10004E1B4(0, 0);
    }
    dispatch thunk of FamilyCircle.currentMember.getter();
    if (v49)
    {
      sub_10000BE0C(v48, v49);
      char v17 = dispatch thunk of FamilyMemberable.isParent.getter();
      uint64_t result = _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v48);
      if (v17) {
        return sub_10004DDC0(0, 1, (uint64_t)sub_1000523F4, 0);
      }
    }
    else
    {
      return sub_100015758((uint64_t)v48, &qword_100074358);
    }
  }
  else
  {
    if (qword_1000739C8 != -1) {
      swift_once();
    }
    if (qword_100074BE0 == v11 && *(void *)algn_100074BE8 == v13)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        static Logger.syncEngine.getter();
        id v36 = a1;
        uint64_t v37 = Logger.logObject.getter();
        os_log_type_t v38 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v47 = swift_slowAlloc();
          v48[0] = v47;
          *(_DWORD *)uint64_t v39 = 136446210;
          uint64_t v45 = v39 + 4;
          uint64_t v46 = v39;
          id v40 = v36;
          id v41 = [v40 description];
          uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v44 = v43;

          uint64_t v50 = sub_1000067CC(v42, v44, v48);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Unknown zone was deleted %{public}s", v46, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      }
    }
    uint64_t v20 = *(void **)(v2 + 176);
    NSString v21 = String._bridgeToObjectiveC()();
    [v20 removeObjectForKey:v21];

    swift_retain();
    CKSyncEngine.state.getter();
    swift_release();
    sub_100007370(&qword_100074A68);
    uint64_t v22 = type metadata accessor for CKSyncEngine.PendingDatabaseChange();
    uint64_t v23 = *(void *)(v22 - 8);
    unint64_t v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    uint64_t v25 = swift_allocObject();
    long long v47 = xmmword_10005FEC0;
    *(_OWORD *)(v25 + 16) = xmmword_10005FEC0;
    uint64_t v26 = (void *)(v25 + v24);
    if (qword_1000739D8 != -1) {
      swift_once();
    }
    uint64_t v27 = (void *)qword_100074BF8;
    void *v26 = qword_100074BF8;
    (*(void (**)(void *, void, uint64_t))(v23 + 104))(v26, enum case for CKSyncEngine.PendingDatabaseChange.saveZone(_:), v22);
    id v28 = v27;
    CKSyncEngine.State.add(pendingDatabaseChanges:)((Swift::OpaquePointer)v25);
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (v9)
    {
      swift_retain();
      CKSyncEngine.state.getter();
      swift_release();
      sub_100007370(&qword_100074258);
      uint64_t v29 = type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
      uint64_t v30 = *(void *)(v29 - 8);
      unint64_t v31 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
      uint64_t v32 = swift_allocObject();
      *(_OWORD *)(v32 + 16) = v47;
      id v33 = (void *)(v32 + v31);
      if (qword_1000739E0 != -1) {
        swift_once();
      }
      id v34 = (void *)qword_100074C00;
      *id v33 = qword_100074C00;
      (*(void (**)(void *, void, uint64_t))(v30 + 104))(v33, enum case for CKSyncEngine.PendingRecordZoneChange.saveRecord(_:), v29);
      id v35 = v34;
      CKSyncEngine.State.add(pendingRecordZoneChanges:)((Swift::OpaquePointer)v32);
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100050678(char a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100007370(&qword_100074AB0);
  __chkstk_darwin(v6 - 8, v7);
  BOOL v9 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  BOOL v14 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    char v17 = (uint8_t *)swift_slowAlloc();
    v45[0] = v9;
    *(_WORD *)char v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Starting up the sync engine, updating all activity data, and scheduling a background web sync", v17, 2u);
    BOOL v9 = (char *)v45[0];
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  *(unsigned char *)(v3 + 152) = 1;
  uint64_t v18 = *(unsigned char **)(v3 + 168);
  v18[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine10DataSource_collectActivity] = 1;
  if (a1)
  {
    if (qword_100073970 != -1) {
      swift_once();
    }
    char v19 = (void *)qword_100074B50;
    uint64_t v20 = sub_100007370(&qword_100074AB8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v9, 1, 1, v20);
    uint64_t v21 = sub_10005B548(v19, v18, (uint64_t)v9);
    sub_100015758((uint64_t)v9, &qword_100074AB0);
    *(void *)(v3 + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_privateEngine) = v21;
    swift_release();
  }
  sub_10004E1B4(0, 0);
  sub_100050CF8("Scheduling a background activity to sync web usage data", (uint64_t)sub_10005CE40, (uint64_t)&unk_10006FAA0);
  if (a2)
  {
    sub_100050CF8("Invalidating background sharing activity", (uint64_t)sub_10005AFAC, (uint64_t)&unk_10006F6B8);
    char v22 = sub_100007D7C();
    sub_100007370(&qword_100074A60);
    if (v22)
    {
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10005FC80;
      if (qword_1000739B0 != -1) {
        swift_once();
      }
      unint64_t v24 = (void *)qword_100074BC0;
      *(void *)(inited + 32) = qword_100074BC0;
      id v25 = v24;
      *(void *)(inited + 40) = dispatch thunk of FamilyCircle.guardians.getter();
      if (qword_1000739D0 != -1) {
        swift_once();
      }
      uint64_t v26 = (void *)qword_100074BF0;
      *(void *)(inited + 48) = qword_100074BF0;
      id v27 = v26;
      *(void *)(inited + 56) = sub_10004F114();
    }
    else
    {
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10005FEC0;
      if (qword_1000739D0 != -1) {
        swift_once();
      }
      unint64_t v31 = (void *)qword_100074BF0;
      *(void *)(inited + 32) = qword_100074BF0;
      id v32 = v31;
      *(void *)(inited + 40) = sub_10004F114();
    }
    unint64_t v33 = sub_100049F14(inited);
    sub_10001E37C(v33, 0, 0);
  }
  else
  {
    id v28 = *(void **)(v3 + 176);
    NSString v29 = String._bridgeToObjectiveC()();
    id v30 = [v28 objectForKey:v29];

    if (v30)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v46, 0, sizeof(v46));
    }
    sub_100034538((uint64_t)v46, (uint64_t)v47, &qword_100074070);
    if (!v48) {
      return sub_100015758((uint64_t)v47, &qword_100074070);
    }
    uint64_t result = swift_dynamicCast();
    if ((result & 1) == 0) {
      return result;
    }
    double v35 = *(double *)&v45[29];
    char v36 = sub_100007D7C();
    sub_100007370(&qword_100074A60);
    if (v36)
    {
      uint64_t v37 = swift_initStackObject();
      *(_OWORD *)(v37 + 16) = xmmword_10005FC80;
      if (qword_1000739B0 != -1) {
        swift_once();
      }
      os_log_type_t v38 = (void *)qword_100074BC0;
      *(void *)(v37 + 32) = qword_100074BC0;
      id v39 = v38;
      *(void *)(v37 + 40) = dispatch thunk of FamilyCircle.guardians.getter();
      if (qword_1000739D0 != -1) {
        swift_once();
      }
      id v40 = (void *)qword_100074BF0;
      *(void *)(v37 + 48) = qword_100074BF0;
      id v41 = v40;
      *(void *)(v37 + 56) = sub_10004F114();
    }
    else
    {
      uint64_t v37 = swift_initStackObject();
      *(_OWORD *)(v37 + 16) = xmmword_10005FEC0;
      if (qword_1000739D0 != -1) {
        swift_once();
      }
      uint64_t v42 = (void *)qword_100074BF0;
      *(void *)(v37 + 32) = qword_100074BF0;
      id v43 = v42;
      *(void *)(v37 + 40) = sub_10004F114();
    }
    unint64_t v44 = sub_100049F14(v37);
    sub_1000510D4(v44, v35);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100050CF8(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  id v25 = a1;
  uint64_t v4 = v3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v28 - 8);
  __chkstk_darwin(v28, v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  char v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    unint64_t v24 = v12;
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v25, v20, 2u);
    uint64_t v12 = v24;
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  sub_10001958C(0, (unint64_t *)&qword_100073ED0);
  uint64_t v21 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = v26;
  aBlock[5] = v4;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100036EDC;
  void aBlock[3] = v27;
  char v22 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_10005CE94((unint64_t *)&unk_100074180, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007370(&qword_100074360);
  sub_10005CEDC((unint64_t *)&qword_100074190, &qword_100074360);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v28);
}

uint64_t sub_1000510D4(uint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  uint64_t v7 = (char *)v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v29 - 8);
  __chkstk_darwin(v29, v9);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  char v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    os_log_type_t v19 = (uint8_t *)swift_slowAlloc();
    v28[0] = v7;
    uint64_t v20 = v4;
    uint64_t v21 = v8;
    uint64_t v22 = a1;
    uint64_t v23 = v19;
    *(_DWORD *)os_log_type_t v19 = 134349056;
    *(double *)long long aBlock = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Scheduling a background activity to retry sharing in %{public}f seconds", v23, 0xCu);
    a1 = v22;
    uint64_t v8 = v21;
    uint64_t v4 = v20;
    uint64_t v7 = (char *)v28[0];
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  sub_10001958C(0, (unint64_t *)&qword_100073ED0);
  unint64_t v24 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v28[1];
  *(double *)(v25 + 24) = a2;
  *(void *)(v25 + 32) = a1;
  aBlock[4] = sub_10005AEB8;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100036EDC;
  void aBlock[3] = &unk_10006F5F0;
  uint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_10005CE94((unint64_t *)&unk_100074180, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007370(&qword_100074360);
  sub_10005CEDC((unint64_t *)&qword_100074190, &qword_100074360);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v26);

  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v29);
}

uint64_t sub_100051518()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  uint64_t v6 = (char *)&v13[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Stopping the sync engine, removing all activity data, and invalidating the background web sync", v9, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *(unsigned char *)(v1 + 152) = 0;
  *(unsigned char *)(*(void *)(v1 + 168) + OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine10DataSource_collectActivity) = 0;
  sub_10004E994(0, 0);
  sub_100050CF8("Invalidating daily web sync activity", (uint64_t)sub_10005CE30, (uint64_t)&unk_10006FA78);
  sub_100050CF8("Invalidating background sharing activity", (uint64_t)sub_10005AFAC, (uint64_t)&unk_10006F6B8);
  dispatch thunk of FamilyCircle.currentMember.getter();
  if (!v14) {
    return sub_100015758((uint64_t)v13, &qword_100074358);
  }
  sub_10000BE0C(v13, v14);
  char v10 = dispatch thunk of FamilyMemberable.isParent.getter();
  uint64_t result = _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v13);
  if (v10) {
    return sub_10004DDC0(1, 1, (uint64_t)sub_100051754, 0);
  }
  return result;
}

uint64_t sub_100051754(uint64_t a1, char a2)
{
  return sub_100052400(a1, a2, "Successfully fetched all shared zones");
}

id *sub_100051760()
{
  sub_10000BE50((uint64_t)(v0 + 2));

  swift_release();
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_locations;
  uint64_t v2 = type metadata accessor for Locations();
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  swift_release();
  return v0;
}

uint64_t sub_10005182C()
{
  sub_100051760();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);

  return _swift_deallocClassInstance(v0, v1, v2);
}

uint64_t sub_100051884()
{
  return type metadata accessor for FamilySyncEngine();
}

uint64_t type metadata accessor for FamilySyncEngine()
{
  uint64_t result = qword_100074910;
  if (!qword_100074910) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1000518D8()
{
  uint64_t result = type metadata accessor for Locations();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

void sub_1000519B0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  char v10 = (char *)&v40 - v9;
  Notification.object.getter();
  if (!v45[3])
  {
    sub_100015758((uint64_t)v45, &qword_100074070);
    goto LABEL_11;
  }
  sub_10001958C(0, (unint64_t *)&qword_1000740F0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_11:
    static Logger.syncEngine.getter();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to get zone ID from zone saved notification", v23, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
    return;
  }
  id v11 = v44;
  id v12 = [v44 zoneName];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v15 = v14;

  if (qword_1000739A8 != -1) {
    swift_once();
  }
  if (qword_100074BB0 == v13 && *(void *)algn_100074BB8 == v15
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void **)(v1 + 176);
    NSString v17 = String._bridgeToObjectiveC()();
    [v16 setBool:1 forKey:v17];

    if (sub_100007D7C())
    {
      sub_100007370(&qword_100074A60);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_10005FEC0;
      *(void *)(inited + 32) = v11;
      id v19 = v11;
      *(void *)(inited + 40) = dispatch thunk of FamilyCircle.guardians.getter();
      unint64_t v20 = sub_100049F14(inited);
      sub_10001E37C(v20, 0, 0);
      swift_bridgeObjectRelease();
    }
    else
    {
    }
    return;
  }
  if (qword_1000739C8 != -1) {
    swift_once();
  }
  if (qword_100074BE0 == v13 && *(void *)algn_100074BE8 == v15)
  {
    swift_bridgeObjectRelease();
LABEL_21:
    uint64_t v25 = *(void **)(v1 + 176);
    NSString v26 = String._bridgeToObjectiveC()();
    [v25 setBool:1 forKey:v26];

    sub_100007370(&qword_100074A60);
    uint64_t v27 = swift_initStackObject();
    *(_OWORD *)(v27 + 16) = xmmword_10005FEC0;
    *(void *)(v27 + 32) = v11;
    id v28 = v11;
    *(void *)(v27 + 40) = sub_10004F114();
    unint64_t v29 = sub_100049F14(v27);
    sub_10001E37C(v29, 0, 0);
    swift_bridgeObjectRelease();

    return;
  }
  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v24) {
    goto LABEL_21;
  }
  static Logger.syncEngine.getter();
  id v30 = v11;
  unint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.error.getter();
  int v33 = v32;
  if (os_log_type_enabled(v31, v32))
  {
    int v43 = v33;
    id v34 = (uint8_t *)swift_slowAlloc();
    uint64_t v42 = swift_slowAlloc();
    v45[0] = v42;
    id v41 = v34;
    *(_DWORD *)id v34 = 136315138;
    id v40 = v34 + 4;
    id v35 = v30;
    id v36 = [v35 description];
    uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v39 = v38;

    id v44 = (id)sub_1000067CC(v37, v39, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v43, "Unknown zone was saved %s", v41, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
}

void sub_100051F9C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Notification.object.getter();
  if (v12)
  {
    sub_10001958C(0, (unint64_t *)&qword_1000740F0);
    if (swift_dynamicCast())
    {
      uint64_t v5 = v10;
      sub_10004FF74(v10);

      return;
    }
  }
  else
  {
    sub_100015758((uint64_t)v11, &qword_100074070);
  }
  static Logger.syncEngine.getter();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to get zone ID from zone deletion notification", v8, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_10005216C()
{
  uint64_t v0 = type metadata accessor for Logger();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Updating private authorization key", v7, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  swift_retain();
  CKSyncEngine.state.getter();
  swift_release();
  sub_100007370(&qword_100074258);
  uint64_t v8 = *(void *)(type metadata accessor for CKSyncEngine.PendingRecordZoneChange() - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_10005FEC0;
  if (qword_1000739E0 != -1) {
    swift_once();
  }
  id v11 = (void *)(v10 + v9);
  uint64_t v12 = (void *)qword_100074C00;
  *id v11 = qword_100074C00;
  (*(void (**)(void))(v8 + 104))();
  id v13 = v12;
  CKSyncEngine.State.add(pendingRecordZoneChanges:)((Swift::OpaquePointer)v10);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000523F4(uint64_t a1, char a2)
{
  return sub_100052400(a1, a2, "Successfully fetched all shared activity zones");
}

uint64_t sub_100052400(uint64_t a1, char a2, const char *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v9 = __chkstk_darwin(v6, v8);
  id v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  uint64_t v14 = (char *)v25 - v13;
  if (a2)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      uint64_t v26 = a1;
      uint64_t v27 = v22;
      *(_DWORD *)uint64_t v21 = 136446210;
      v25[1] = v21 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v23 = String.init<A>(describing:)();
      uint64_t v26 = sub_1000067CC(v23, v24, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to fetch all shared zones: %{public}s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100029F70(a1, 1);
    }
    else
    {
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
      swift_errorRelease();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v11, v6);
  }
  else
  {
    static Logger.syncEngine.getter();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      NSString v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, a3, v17, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }
}

void sub_100052700(uint64_t a1, void *a2, char a3, char a4, NSObject *a5, uint64_t a6, char a7)
{
  uint64_t v49 = type metadata accessor for Logger();
  uint64_t v13 = *(void *)(v49 - 8);
  uint64_t v15 = __chkstk_darwin(v49, v14);
  NSString v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  os_log_type_t v20 = (char *)&v46 - v19;
  if (a3)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      uint64_t v50 = (uint64_t)a2;
      uint64_t v51 = v32;
      *(_DWORD *)unint64_t v31 = 136446210;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v33 = String.init<A>(describing:)();
      uint64_t v50 = sub_1000067CC(v33, v34, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100029F58(a2, 1);
      sub_100029F58(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to fetch shared zones: %{public}s", v31, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100029F58(a2, 1);
    }
    else
    {
      sub_100029F58(a2, 1);
      sub_100029F58(a2, 1);
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v49);
  }
  else
  {
    uint64_t v47 = v13;
    uint64_t v48 = a6;
    id v21 = [a2 zoneID];
    id v22 = [v21 zoneName];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v25 = v24;

    if (qword_1000739C8 != -1) {
      swift_once();
    }
    BOOL v26 = qword_100074BE0 == v23 && *(void *)algn_100074BE8 == v25;
    if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (a4)
      {
        dispatch_group_enter(a5);
        uint64_t v27 = swift_allocObject();
        *(void *)(v27 + 16) = a5;
        id v28 = a5;
        sub_100052D78(0, v21, (uint64_t)sub_10005B4C8, v27);
LABEL_23:

        sub_100029F58(a2, 0);
        swift_release();
        return;
      }
    }
    else
    {
      if (qword_1000739A8 != -1) {
        swift_once();
      }
      if (qword_100074BB0 == v23 && *(void *)algn_100074BB8 == v25)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v35 & 1) == 0)
        {
          static Logger.syncEngine.getter();
          id v38 = v21;
          unint64_t v39 = Logger.logObject.getter();
          os_log_type_t v40 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v39, v40))
          {
            id v41 = (uint8_t *)swift_slowAlloc();
            uint64_t v48 = swift_slowAlloc();
            uint64_t v51 = v48;
            *(_DWORD *)id v41 = 136446210;
            id v42 = objc_msgSend(v38, "zoneName", v41 + 4);
            uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v45 = v44;

            uint64_t v50 = sub_1000067CC(v43, v45, &v51);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();

            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unknown record zone: %{public}s", v41, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
            sub_100029F58(a2, 0);
          }
          else
          {

            sub_100029F58(a2, 0);
          }
          (*(void (**)(char *, uint64_t))(v47 + 8))(v20, v49);
          return;
        }
      }
      if (a7)
      {
        dispatch_group_enter(a5);
        uint64_t v36 = swift_allocObject();
        *(void *)(v36 + 16) = a5;
        uint64_t v37 = a5;
        sub_100053740(0, v21, (uint64_t)sub_10005B498, v36);
        goto LABEL_23;
      }
    }

    sub_100029F58(a2, 0);
  }
}

uint64_t sub_100052D78(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v60 = a4;
  uint64_t v61 = a3;
  uint64_t v58 = a1;
  uint64_t v6 = *v4;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  id v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v62 - 8);
  __chkstk_darwin(v62, v13);
  uint64_t v15 = (char *)v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Logger();
  uint64_t v57 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  id v20 = a2;
  id v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.debug.getter();
  int v56 = v22;
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v63 = v12;
  if (v23)
  {
    uint64_t v53 = v15;
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    aBlock[0] = v51;
    uint64_t v55 = v7;
    uint64_t v50 = v24;
    *(_DWORD *)uint64_t v24 = 136446210;
    v49[1] = v24 + 4;
    id v25 = v20;
    id v26 = [v25 description];
    uint64_t v52 = v16;
    id v27 = v20;
    uint64_t v28 = v6;
    id v29 = v26;
    os_log_type_t v30 = v11;
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v54 = v8;
    unint64_t v33 = v32;

    uint64_t v6 = v28;
    id v20 = v27;
    uint64_t v34 = v31;
    id v11 = v30;
    uint64_t v64 = sub_1000067CC(v34, v33, aBlock);
    uint64_t v7 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v15 = v53;
    uint64_t v8 = v54;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v56, "Fetching authorization key for zone: %{public}s", v50, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v57 + 8))(v19, v52);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v57 + 8))(v19, v16);
  }
  uint64_t v36 = v59;
  uint64_t v35 = v60;
  if (v58)
  {
    id v37 = [objc_allocWithZone((Class)CKQueryOperation) initWithCursor:v58];
  }
  else
  {
    sub_10001958C(0, &qword_100074AA8);
    id v38 = (NSPredicate *)[self predicateWithValue:1];
    v39._object = (void *)0x80000001000612C0;
    v39._countAndFlagsBits = 0xD000000000000010;
    id v40 = v20;
    Class isa = CKQuery.init(recordType:predicate:)(v39, v38).super.isa;
    id v37 = [objc_allocWithZone((Class)CKQueryOperation) initWithQuery:isa];

    id v20 = v40;
  }
  [v37 setZoneID:v20];
  [v37 setQualityOfService:25];
  swift_retain();
  CKQueryOperation.recordMatchedBlock.setter();
  id v42 = (void *)swift_allocObject();
  v42[2] = v36;
  v42[3] = v20;
  v42[4] = v61;
  v42[5] = v35;
  id v43 = v20;
  swift_retain();
  swift_retain();
  CKQueryOperation.queryResultBlock.setter();
  sub_10001958C(0, (unint64_t *)&qword_100073ED0);
  unint64_t v44 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = v37;
  *(void *)(v45 + 24) = v6;
  aBlock[4] = (uint64_t)sub_10005D140;
  aBlock[5] = v45;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_100036EDC;
  void aBlock[3] = (uint64_t)&unk_10006F9D8;
  uint64_t v46 = _Block_copy(aBlock);
  id v47 = v37;
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
  sub_10005CE94((unint64_t *)&unk_100074180, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007370(&qword_100074360);
  sub_10005CEDC((unint64_t *)&qword_100074190, &qword_100074360);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v46);

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v15, v62);
}

void sub_100053428(uint64_t a1, char a2, NSObject *a3, const char *a4, const char *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)v28 - v17;
  if (a2)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      id v29 = a5;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      os_log_type_t v30 = a3;
      uint64_t v31 = a1;
      uint64_t v32 = v25;
      *(_DWORD *)uint64_t v24 = 136446210;
      v28[1] = v24 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v26 = String.init<A>(describing:)();
      uint64_t v31 = sub_1000067CC(v26, v27, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, v29, v24, 0xCu);
      swift_arrayDestroy();
      a3 = v30;
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100029F70(a1, 1);
    }
    else
    {
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  }
  else
  {
    static Logger.syncEngine.getter();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      id v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, a4, v21, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  }
  dispatch_group_leave(a3);
}

uint64_t sub_100053740(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v66 = *v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v62 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS();
  uint64_t v68 = *(void *)(v14 - 8);
  uint64_t v69 = v14;
  __chkstk_darwin(v14, v15);
  char v67 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v64 = *(void *)(v17 - 8);
  uint64_t v65 = v17;
  __chkstk_darwin(v17, v18);
  os_log_type_t v20 = (char *)&v54 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Logger.syncEngine.getter();
  id v21 = a2;
  uint64_t v63 = v20;
  os_log_type_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  int v24 = v23;
  if (os_log_type_enabled(v22, v23))
  {
    os_log_t v58 = v22;
    uint64_t v25 = swift_slowAlloc();
    int v56 = v24;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v57 = swift_slowAlloc();
    aBlock[0] = v57;
    uint64_t v60 = v10;
    uint64_t v55 = v26;
    *(_DWORD *)uint64_t v26 = 136446210;
    uint64_t v54 = v26 + 4;
    id v27 = v21;
    uint64_t v59 = v5;
    id v28 = v27;
    uint64_t v29 = a1;
    uint64_t v30 = a4;
    id v31 = [v27 description];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v61 = v21;
    uint64_t v33 = v32;
    unint64_t v35 = v34;

    a4 = v30;
    a1 = v29;
    id v21 = v61;
    uint64_t v70 = sub_1000067CC(v33, v35, aBlock);
    uint64_t v10 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v5 = v59;
    swift_bridgeObjectRelease();
    os_log_t v36 = v58;
    _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v56, "Fetching all shared activity from %{public}s", v55, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v65);
  sub_100042918(v21);
  if (a1)
  {
    id v37 = [objc_allocWithZone((Class)CKQueryOperation) initWithCursor:a1];
  }
  else
  {
    id v61 = v21;
    uint64_t v38 = a3;
    sub_10001958C(0, &qword_100074AA8);
    if (qword_100073980 != -1) {
      swift_once();
    }
    uint64_t v39 = qword_100074B60;
    id v40 = *(void **)algn_100074B68;
    id v41 = self;
    swift_bridgeObjectRetain();
    id v42 = (NSPredicate *)[v41 predicateWithValue:1];
    v43._countAndFlagsBits = v39;
    v43._object = v40;
    Class isa = CKQuery.init(recordType:predicate:)(v43, v42).super.isa;
    id v37 = [objc_allocWithZone((Class)CKQueryOperation) initWithQuery:isa];

    a3 = v38;
    id v21 = v61;
  }
  [v37 setZoneID:v21];
  [v37 setQualityOfService:25];
  swift_retain();
  CKQueryOperation.recordMatchedBlock.setter();
  uint64_t v45 = (void *)swift_allocObject();
  void v45[2] = v5;
  v45[3] = v21;
  v45[4] = a3;
  uint64_t v45[5] = a4;
  id v46 = v21;
  swift_retain();
  swift_retain();
  CKQueryOperation.queryResultBlock.setter();
  sub_10001958C(0, (unint64_t *)&qword_100073ED0);
  id v47 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v48 = swift_allocObject();
  uint64_t v49 = v66;
  *(void *)(v48 + 16) = v37;
  *(void *)(v48 + 24) = v49;
  aBlock[4] = (uint64_t)sub_10005CE14;
  aBlock[5] = v48;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_100036EDC;
  void aBlock[3] = (uint64_t)&unk_10006FA50;
  uint64_t v50 = _Block_copy(aBlock);
  id v51 = v37;
  swift_release();
  uint64_t v52 = v67;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
  sub_10005CE94((unint64_t *)&unk_100074180, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007370(&qword_100074360);
  sub_10005CEDC((unint64_t *)&qword_100074190, &qword_100074360);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v50);

  (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v52, v69);
}

uint64_t sub_100053E30(uint64_t a1, int a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = a3;
  int v24 = a3;
  int v23 = a2;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = &v22[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v25 - 8);
  __chkstk_darwin(v25, v15);
  uint64_t v17 = &v22[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  dispatch_group_leave(v7);
  sub_10001958C(0, (unint64_t *)&qword_100073ED0);
  uint64_t v18 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a4;
  *(void *)(v19 + 24) = a5;
  *(void *)(v19 + 32) = a1;
  LOBYTE(v7) = v23 & 1;
  *(unsigned char *)(v19 + 40) = v23 & 1;
  aBlock[4] = sub_10005B420;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100036EDC;
  void aBlock[3] = &unk_10006F910;
  os_log_type_t v20 = _Block_copy(aBlock);
  swift_retain();
  sub_10005B454(a1, (char)v7);
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = &_swiftEmptyArrayStorage;
  sub_10005CE94((unint64_t *)&unk_100074180, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007370(&qword_100074360);
  sub_10005CEDC((unint64_t *)&qword_100074190, &qword_100074360);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_group.notify(qos:flags:queue:execute:)();
  _Block_release(v20);

  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
  (*(void (**)(unsigned char *, uint64_t))(v14 + 8))(v17, v25);
  return swift_release();
}

void sub_100054134(uint64_t a1)
{
  if (qword_100073A48 != -1) {
    swift_once();
  }
  id v2 = [(id)qword_100074C60 sharedCloudDatabase];
  [v2 addOperation:a1];
}

uint64_t sub_1000541D0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v5 = __chkstk_darwin(v2, v4);
  uint64_t v7 = (char *)v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  uint64_t v10 = (char *)v61 - v9;
  Notification.object.getter();
  if (!v70[3])
  {
    sub_100015758((uint64_t)v70, &qword_100074070);
    goto LABEL_10;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    static Logger.syncEngine.getter();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v19, v20))
    {
      id v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to get retry urgency from notification", v21, 2u);
      swift_slowDealloc();
    }

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  }
  uint64_t v68 = v10;
  uint64_t v11 = (uint64_t)v71;
  char v12 = v72;
  char v13 = sub_100007D7C();
  sub_100007370(&qword_100074A60);
  if (v13)
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10005FC80;
    if (qword_1000739B0 != -1) {
      swift_once();
    }
    uint64_t v15 = (void *)qword_100074BC0;
    *(void *)(inited + 32) = qword_100074BC0;
    id v16 = v15;
    *(void *)(inited + 40) = dispatch thunk of FamilyCircle.guardians.getter();
    if (qword_1000739D0 != -1) {
      swift_once();
    }
    uint64_t v17 = (void *)qword_100074BF0;
    *(void *)(inited + 48) = qword_100074BF0;
    id v18 = v17;
    *(void *)(inited + 56) = sub_10004F114();
  }
  else
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10005FEC0;
    if (qword_1000739D0 != -1) {
      swift_once();
    }
    int v23 = (void *)qword_100074BF0;
    *(void *)(inited + 32) = qword_100074BF0;
    id v24 = v23;
    *(void *)(inited + 40) = sub_10004F114();
  }
  unint64_t v25 = sub_100049F14(inited);
  uint64_t v26 = v25;
  if ((v12 & 1) == 0)
  {
    sub_1000510D4(v25, *(double *)&v11);
    return swift_bridgeObjectRelease();
  }
  uint64_t v64 = v2;
  id v27 = *(void **)(v1 + 176);
  swift_bridgeObjectRetain();
  uint64_t v63 = "or";
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v27 stringArrayForKey:v28];

  if (v29)
  {
    uint64_t v30 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v30 = &_swiftEmptyArrayStorage;
  }
  uint64_t v71 = v30;
  id v31 = (_DWORD *)v30[2];
  if (!v31)
  {
LABEL_48:
    sub_100054B70(v11);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    NSString v60 = String._bridgeToObjectiveC()();
    [v27 setObject:isa forKey:v60];

    sub_100050CF8("Invalidating background sharing activity", (uint64_t)sub_10005AFAC, (uint64_t)&unk_10006F6B8);
    sub_10001E37C(v26, 0, 0);
    goto LABEL_49;
  }
  v61[0] = v27;
  uint64_t v62 = v26;
  uint64_t v66 = (uint64_t)(v30 + 4);
  uint64_t v32 = v11 + 56;
  v61[1] = v30;
  swift_bridgeObjectRetain();
  uint64_t v33 = 0;
  uint64_t v67 = v1;
  uint64_t v65 = v31;
  while (1)
  {
    if (!*(void *)(v11 + 16)) {
      goto LABEL_24;
    }
    unint64_t v34 = (uint64_t *)(v66 + 16 * v33);
    uint64_t v36 = *v34;
    uint64_t v35 = v34[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    Swift::Int v37 = Hasher._finalize()();
    uint64_t v38 = v11;
    uint64_t v39 = -1 << *(unsigned char *)(v11 + 32);
    unint64_t v40 = v37 & ~v39;
    if ((*(void *)(v32 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40)) {
      break;
    }
LABEL_23:
    swift_bridgeObjectRelease();
    uint64_t v11 = v38;
    id v31 = v65;
LABEL_24:
    if ((_DWORD *)++v33 == v31)
    {
      swift_bridgeObjectRelease();
      uint64_t v26 = v62;
      id v27 = (void *)v61[0];
      goto LABEL_48;
    }
  }
  uint64_t v41 = *(void *)(v11 + 48);
  id v42 = (void *)(v41 + 16 * v40);
  BOOL v43 = *v42 == v36 && v42[1] == v35;
  if (!v43 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v44 = ~v39;
    for (unint64_t i = v40 + 1; ; unint64_t i = v46 + 1)
    {
      uint64_t v46 = i & v44;
      if (((*(void *)(v32 + (((i & v44) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v44)) & 1) == 0) {
        break;
      }
      id v47 = (void *)(v41 + 16 * v46);
      BOOL v48 = *v47 == v36 && v47[1] == v35;
      if (v48 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v11 = v38;
        goto LABEL_41;
      }
    }
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
LABEL_41:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v49 = v68;
  static Logger.syncEngine.getter();
  sub_10002A004(v11, 1);
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  BOOL v52 = os_log_type_enabled(v50, v51);
  uint64_t v53 = v62;
  if (v52)
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    v70[0] = v66;
    *(_DWORD *)uint64_t v54 = 136446210;
    uint64_t v65 = v54 + 4;
    uint64_t v55 = v54;
    sub_10002A004(v11, 1);
    uint64_t v56 = Set.description.getter();
    unint64_t v58 = v57;
    sub_10002A020(v11, 1);
    uint64_t v69 = sub_1000067CC(v56, v58, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10002A020(v11, 1);
    sub_10002A020(v11, 1);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "%{public}s has already accepted their verification invitation to bootstrap their CloudKit container. Skipping high urgency attempt to retry sharing.", v55, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10002A020(v11, 1);
    sub_10002A020(v11, 1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v49, v64);
  if (qword_100073A28 != -1) {
    swift_once();
  }
  sub_1000510D4(v53, *(double *)&qword_100074C40);
LABEL_49:
  sub_10002A020(v11, 1);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100054A04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *v1;
  int64_t v4 = *((void *)*v1 + 2);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *((void *)v3 + 3) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_1000253A8(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = *((void *)v3 + 2);
  if ((*((void *)v3 + 3) >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[40 * v8 + 32];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  sub_100007370(&qword_100074248);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    char *v1 = v3;
    return result;
  }
  uint64_t v11 = *((void *)v3 + 2);
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    *((void *)v3 + 2) = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100054B70(uint64_t result)
{
  uint64_t v3 = *(void *)(result + 16);
  int64_t v4 = *v1;
  int64_t v5 = *((void *)*v1 + 2);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = *((void *)v4 + 3) >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      int64_t v10 = v5 + v3;
    }
    else {
      int64_t v10 = v5;
    }
    int64_t v4 = sub_100025298(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    int64_t v9 = *((void *)v4 + 3) >> 1;
  }
  uint64_t v11 = *((void *)v4 + 2);
  uint64_t v12 = v9 - v11;
  uint64_t result = sub_100026694((uint64_t)v38, &v4[16 * v11 + 32], v9 - v11, v7);
  if (result < v3) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v14 = *((void *)v4 + 2);
    BOOL v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_48;
    }
    *((void *)v4 + 2) = v16;
  }
  if (result != v12)
  {
LABEL_13:
    uint64_t result = sub_1000262C8();
    char *v1 = v4;
    return result;
  }
LABEL_16:
  int64_t v2 = *((void *)v4 + 2);
  uint64_t v3 = v38[0];
  uint64_t v37 = v38[1];
  uint64_t v13 = v39;
  int64_t v6 = v40;
  if (v41)
  {
    unint64_t v17 = (v41 - 1) & v41;
    unint64_t v18 = __clz(__rbit64(v41)) | (v40 << 6);
    int64_t v36 = (unint64_t)(v39 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_48:
  int64_t v32 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_66;
  }
  int64_t v36 = (unint64_t)(v13 + 64) >> 6;
  if (v32 >= v36) {
    goto LABEL_13;
  }
  unint64_t v33 = *(void *)(v37 + 8 * v32);
  int64_t v34 = v6 + 1;
  if (!v33)
  {
    int64_t v34 = v6 + 2;
    if (v6 + 2 >= v36) {
      goto LABEL_13;
    }
    unint64_t v33 = *(void *)(v37 + 8 * v34);
    if (!v33)
    {
      int64_t v34 = v6 + 3;
      if (v6 + 3 >= v36) {
        goto LABEL_13;
      }
      unint64_t v33 = *(void *)(v37 + 8 * v34);
      if (!v33)
      {
        int64_t v34 = v6 + 4;
        if (v6 + 4 >= v36) {
          goto LABEL_13;
        }
        unint64_t v33 = *(void *)(v37 + 8 * v34);
        if (!v33)
        {
          int64_t v34 = v6 + 5;
          if (v6 + 5 >= v36) {
            goto LABEL_13;
          }
          unint64_t v33 = *(void *)(v37 + 8 * v34);
          if (!v33)
          {
            int64_t v35 = v6 + 6;
            do
            {
              if (v36 == v35) {
                goto LABEL_13;
              }
              unint64_t v33 = *(void *)(v37 + 8 * v35++);
            }
            while (!v33);
            int64_t v34 = v35 - 1;
          }
        }
      }
    }
  }
  unint64_t v17 = (v33 - 1) & v33;
  unint64_t v18 = __clz(__rbit64(v33)) + (v34 << 6);
  int64_t v6 = v34;
LABEL_18:
  uint64_t v19 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v18);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v22 = *((void *)v4 + 3);
    int64_t v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v2 + 1) {
      break;
    }
    if (v2 < v23) {
      goto LABEL_23;
    }
LABEL_20:
    *((void *)v4 + 2) = v2;
  }
  uint64_t result = (uint64_t)sub_100025298((char *)(v22 > 1), v2 + 1, 1, v4);
  int64_t v4 = (char *)result;
  int64_t v23 = *(void *)(result + 24) >> 1;
  if (v2 >= v23) {
    goto LABEL_20;
  }
  while (1)
  {
LABEL_23:
    id v24 = &v4[16 * v2 + 32];
    *(void *)id v24 = v21;
    *((void *)v24 + 1) = v20;
    ++v2;
    if (v17)
    {
      unint64_t v25 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v26 = v25 | (v6 << 6);
      goto LABEL_41;
    }
    int64_t v27 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v27 >= v36) {
      goto LABEL_45;
    }
    unint64_t v28 = *(void *)(v37 + 8 * v27);
    int64_t v29 = v6 + 1;
    if (!v28)
    {
      int64_t v29 = v6 + 2;
      if (v6 + 2 >= v36) {
        goto LABEL_45;
      }
      unint64_t v28 = *(void *)(v37 + 8 * v29);
      if (!v28)
      {
        int64_t v29 = v6 + 3;
        if (v6 + 3 >= v36) {
          goto LABEL_45;
        }
        unint64_t v28 = *(void *)(v37 + 8 * v29);
        if (!v28)
        {
          int64_t v29 = v6 + 4;
          if (v6 + 4 >= v36) {
            goto LABEL_45;
          }
          unint64_t v28 = *(void *)(v37 + 8 * v29);
          if (!v28)
          {
            int64_t v29 = v6 + 5;
            if (v6 + 5 >= v36) {
              goto LABEL_45;
            }
            unint64_t v28 = *(void *)(v37 + 8 * v29);
            if (!v28)
            {
              int64_t v30 = v6 + 6;
              while (v36 != v30)
              {
                unint64_t v28 = *(void *)(v37 + 8 * v30++);
                if (v28)
                {
                  int64_t v29 = v30 - 1;
                  goto LABEL_40;
                }
              }
LABEL_45:
              *((void *)v4 + 2) = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_40:
    unint64_t v17 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v29 << 6);
    int64_t v6 = v29;
LABEL_41:
    id v31 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v26);
    uint64_t v21 = *v31;
    uint64_t v20 = v31[1];
    if (v2 >= v23)
    {
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    uint64_t result = swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t sub_100054F54(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v5 = type metadata accessor for Notification();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  int64_t v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  a4(v9);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

void sub_10005504C(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  int64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void **)(a1 + 176);
  NSString v12 = String._bridgeToObjectiveC()();
  id v13 = [v11 objectForKey:v12];

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v27, 0, sizeof(v27));
  }
  sub_100034538((uint64_t)v27, (uint64_t)aBlock, &qword_100074070);
  if (!v24)
  {
    sub_100015758((uint64_t)aBlock, &qword_100074070);
LABEL_11:
    NSString v17 = String._bridgeToObjectiveC()();
    [v11 setDouble:v17 forKey:a3];

    unint64_t v18 = *(void **)(a1 + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_retrySharing);
    [v18 setInterval:a3];
    uint64_t v19 = swift_allocObject();
    swift_weakInit();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v19;
    *(void *)(v20 + 24) = a2;
    unint64_t v25 = sub_10005AF58;
    uint64_t v26 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1000555A4;
    id v24 = &unk_10006F668;
    uint64_t v21 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_release();
    [v18 scheduleWithBlock:v21];
    _Block_release(v21);
    return;
  }
  if ((swift_dynamicCast() & 1) == 0 || v22[1] >= a3) {
    goto LABEL_11;
  }
  static Logger.syncEngine.getter();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Background activity to retry sharing has already been scheduled.", v16, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_10005539C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  uint64_t v11 = &v17[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  static Logger.syncEngine.getter();
  NSString v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Running background sharing activity", v14, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v11, v7);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    sub_100050CF8("Invalidating background sharing activity", (uint64_t)sub_10005AFAC, (uint64_t)&unk_10006F6B8);
    swift_release();
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    id v16 = *(id *)(Strong + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_sharingCoordinator);
    swift_release();
    sub_10001E37C(a4, a1, a2);
  }
}

uint64_t sub_1000555A4(uint64_t a1, void *aBlock)
{
  int64_t v2 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  v2(sub_10005AF98, v4);
  swift_release();

  return swift_release();
}

void sub_100055638(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 160);
  v3[4] = sub_10005CE48;
  v3[5] = a1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 1107296256;
  v3[2] = sub_1000555A4;
  v3[3] = &unk_10006FAC8;
  int64_t v2 = _Block_copy(v3);
  swift_retain();
  swift_release();
  [v1 scheduleWithBlock:v2];
  _Block_release(v2);
}

uint64_t sub_100055700(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  sub_100055AAC((uint64_t)sub_10005CE88, v4);

  return swift_release();
}

uint64_t sub_100055784(uint64_t a1, char a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v11 = __chkstk_darwin(v8, v10);
  os_log_type_t v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  id v16 = (char *)v27 - v15;
  if (a2)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      unint64_t v28 = a3;
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      _OWORD v27[2] = a4;
      uint64_t v29 = a1;
      uint64_t v30 = v23;
      *(_DWORD *)unint64_t v22 = 136446210;
      v27[1] = v22 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v29 = sub_1000067CC(v24, v25, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a3 = v28;
      swift_bridgeObjectRelease();
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Updating visited web domains was unsuccessful: %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100029F70(a1, 1);
    }
    else
    {
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }
  else
  {
    static Logger.syncEngine.getter();
    NSString v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully updated visited web domains", v19, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
  }
  return a3(1);
}

uint64_t sub_100055AAC(uint64_t a1, uint64_t a2)
{
  uint64_t v76 = a1;
  uint64_t v77 = a2;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v78 = *(void *)(v2 - 8);
  uint64_t v79 = v2;
  __chkstk_darwin(v2, v3);
  unint64_t v84 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DateInterval();
  uint64_t v73 = *(void *)(v5 - 8);
  uint64_t v74 = v5;
  uint64_t v7 = __chkstk_darwin(v5, v6);
  uint64_t v71 = v8;
  char v72 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  unint64_t v81 = (char *)&v70 - v10;
  uint64_t v11 = type metadata accessor for Calendar.Component();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  uint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for Calendar();
  uint64_t v16 = *(void *)(v82 - 8);
  __chkstk_darwin(v82, v17);
  uint64_t v19 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_100007370(&qword_100073CC0);
  __chkstk_darwin(v20 - 8, v21);
  uint64_t v23 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v85 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24, v25);
  os_log_type_t v83 = (char *)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = __chkstk_darwin(v26, v28);
  uint64_t v31 = __chkstk_darwin(v29, v30);
  unint64_t v33 = (char *)&v70 - v32;
  uint64_t v35 = __chkstk_darwin(v31, v34);
  unsigned __int8 v80 = (char *)&v70 - v36;
  __chkstk_darwin(v35, v37);
  uint64_t v39 = (char *)&v70 - v38;
  static Date.now.getter();
  static Calendar.current.getter();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v15, enum case for Calendar.Component.month(_:), v11);
  NSString v86 = v39;
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v40 = v24;
  uint64_t v41 = v85;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v82);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v23, 1, v40) == 1)
  {
    sub_100015758((uint64_t)v23, &qword_100073CC0);
    static Logger.syncEngine.getter();
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v83, v86, v40);
    id v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.fault.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v45 = v79;
    if (v44)
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v88 = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 136315138;
      sub_10005CE94(&qword_100074A70, (void (*)(uint64_t))&type metadata accessor for Date);
      id v47 = v83;
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v87 = sub_1000067CC(v48, v49, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void (**)(char *, uint64_t))(v41 + 8);
      v50(v47, v40);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Failed to subtract a month from now %s", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v78 + 8))(v84, v79);
    }
    else
    {

      uint64_t v50 = *(void (**)(char *, uint64_t))(v41 + 8);
      v50(v83, v40);
      (*(void (**)(char *, uint64_t))(v78 + 8))(v84, v45);
    }
    return ((uint64_t (*)(char *, uint64_t))v50)(v86, v40);
  }
  else
  {
    os_log_type_t v51 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    BOOL v52 = v80;
    uint64_t v70 = v40;
    v51(v80, v23, v40);
    (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v33, v52, v40);
    static Date.now.getter();
    uint64_t v53 = v81;
    DateInterval.init(start:end:)();
    uint64_t v55 = v74;
    uint64_t v54 = v75;
    uint64_t v57 = *(void *)(v75 + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_usageReporting);
    uint64_t v56 = *(void *)(v75 + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_usageReporting + 8);
    uint64_t v59 = v72;
    uint64_t v58 = v73;
    (*(void (**)(char *, char *, uint64_t))(v73 + 16))(v72, v53, v74);
    unint64_t v60 = (*(unsigned __int8 *)(v58 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
    unint64_t v61 = (v71 + v60 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v62 = swift_allocObject();
    *(void *)(v62 + 16) = v54;
    (*(void (**)(unint64_t, char *, uint64_t))(v58 + 32))(v62 + v60, v59, v55);
    uint64_t v63 = (uint64_t *)(v62 + v61);
    uint64_t v65 = v76;
    uint64_t v64 = v77;
    uint64_t *v63 = v76;
    v63[1] = v64;
    uint64_t v66 = *(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v56 + 16);
    swift_retain();
    sub_10001957C(v65);
    v66(sub_10005B17C, v62, v57, v56);
    swift_release();
    (*(void (**)(char *, uint64_t))(v58 + 8))(v81, v55);
    uint64_t v67 = *(void (**)(char *, uint64_t))(v85 + 8);
    uint64_t v68 = v70;
    v67(v80, v70);
    return ((uint64_t (*)(char *, uint64_t))v67)(v86, v68);
  }
}

void sub_100056284(uint64_t a1)
{
  [*(id *)(a1 + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_retrySharing) invalidate];
  uint64_t v2 = *(void **)(a1 + 176);
  NSString v3 = String._bridgeToObjectiveC()();
  [v2 removeObjectForKey:v3];
}

void sub_100056310(uint64_t a1, char a2, uint64_t a3, NSObject *a4, const char *a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_beginAccess();
    *(void *)(a3 + 16) = a1;
    swift_errorRetain();
    swift_errorRelease();
  }
  else
  {
    static Logger.syncEngine.getter();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, a5, v17, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  dispatch_group_leave(a4);
}

uint64_t sub_10005649C(uint64_t a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t result = swift_beginAccess();
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    if (a2)
    {
      swift_errorRetain();
      a2(v5, 1);
      return swift_errorRelease();
    }
  }
  else if (a2)
  {
    return ((uint64_t (*)(void, void))a2)(0, 0);
  }
  return result;
}

uint64_t sub_10005652C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void (**)(char *, void, uint64_t), uint64_t), uint64_t a6)
{
  uint64_t v81 = a6;
  uint64_t v88 = a5;
  uint64_t v9 = 0;
  uint64_t v87 = type metadata accessor for Logger();
  uint64_t v86 = *(void *)(v87 - 8);
  uint64_t v11 = __chkstk_darwin(v87, v10);
  uint64_t v85 = (char *)v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  unsigned __int8 v80 = (char *)v79 - v14;
  uint64_t v15 = type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  uint64_t v117 = (Class *)((char *)v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = sub_100007370(&qword_1000740D8);
  __chkstk_darwin(v19 - 8, v20);
  uint64_t v110 = (char *)v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v109 = type metadata accessor for UsageItemRecord.Source();
  uint64_t v114 = *(void (***)(char *, void, uint64_t))(v109 - 8);
  __chkstk_darwin(v109, v22);
  uint64_t v108 = (char *)v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v107 - 8);
  __chkstk_darwin(v107, v25);
  uint64_t v106 = (char *)v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for UsageItemRecord.UsageType();
  uint64_t v27 = *(void *)(v105 - 8);
  __chkstk_darwin(v105, v28);
  unint64_t v104 = (char *)v79 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for UsageItemRecord();
  uint64_t v30 = *(void *)(v116 - 8);
  __chkstk_darwin(v116, v31);
  char v115 = (char *)v79 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for URL();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84, v33);
  uint64_t v82 = (char *)v79 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121._rawValue = &_swiftEmptyArrayStorage;
  uint64_t v35 = *(void *)(a3 + 16);
  if (v35)
  {
    v79[1] = a4;
    uint64_t v118 = type metadata accessor for UsageStore();
    id v89 = (id)CTCategoryIdentifierOther;
    unsigned int v100 = enum case for UsageItemRecord.UsageType.application(_:);
    uint64_t v99 = (void (**)(char *, void, uint64_t))(v27 + 104);
    unint64_t v98 = (void (**)(char *, uint64_t))(v24 + 8);
    unsigned int v97 = enum case for UsageItemRecord.Source.local(_:);
    uint64_t v96 = v114 + 13;
    uint64_t v95 = (void (**)(char *, char *, uint64_t))(v30 + 16);
    uint64_t v94 = (void (**)(char *, void, uint64_t, uint64_t))(v30 + 56);
    int v93 = enum case for CKSyncEngine.PendingRecordZoneChange.saveRecord(_:);
    uint64_t v92 = (void (**)(void))(v16 + 104);
    uint64_t v103 = v16;
    uint64_t v91 = v16 + 32;
    id v90 = (void (**)(char *, uint64_t))(v30 + 8);
    swift_bridgeObjectRetain();
    v79[0] = a3;
    uint64_t v36 = (uint64_t *)(a3 + 40);
    uint64_t v102 = v15;
    uint64_t v101 = a1;
    while (1)
    {
      uint64_t v37 = *(v36 - 1);
      uint64_t v38 = *v36;
      swift_bridgeObjectRetain();
      uint64_t v39 = static UsageStore.shared.getter();
      __chkstk_darwin(v39, v40);
      v79[-2] = v37;
      v79[-1] = v38;
      char v41 = UsageStore.contains(where:)();
      swift_release();
      if ((v41 & 1) == 0) {
        break;
      }
      swift_bridgeObjectRelease();
LABEL_4:
      v36 += 2;
      if (!--v35)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }
    uint64_t v113 = v35;
    uint64_t v114 = v9;
    if (a1 && *(void *)(a1 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v42 = sub_10004A7B8(v37, v38);
      if (v43)
      {
        id v44 = *(id *)(*(void *)(a1 + 56) + 8 * v42);
        swift_bridgeObjectRelease();
        id v111 = v44;
        id v45 = objc_msgSend(v44, "identifier", v79[0]);
LABEL_12:
        (*v99)(v104, v100, v105);
        id v112 = v45;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        swift_bridgeObjectRetain();
        uint64_t v46 = v106;
        UUID.init()();
        UUID.uuidString.getter();
        (*v98)(v46, v107);
        (*v96)(v108, v97, v109);
        id v47 = v115;
        UsageItemRecord.init(identifier:recordName:type:source:category:totalUsage:)();
        static UsageStore.shared.getter();
        uint64_t v48 = v110;
        uint64_t v49 = v116;
        (*v95)(v110, v47, v116);
        (*v94)(v48, 0, 1, v49);
        UsageStore.subscript.setter();
        swift_release();
        sub_10001958C(0, &qword_1000740E0);
        uint64_t v50 = UsageItemRecord.recordName.getter();
        BOOL v52 = v51;
        if (qword_1000739B0 != -1) {
          swift_once();
        }
        id v53 = (id)qword_100074BC0;
        v54._countAndFlagsBits = v50;
        v54._object = v52;
        Class isa = CKRecordID.init(recordName:zoneID:)(v54, (CKRecordZoneID)v53).super.isa;
        *uint64_t v117 = isa;
        uint64_t v56 = v102;
        (*v92)();
        rawValue = v121._rawValue;
        uint64_t v58 = isa;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          rawValue = (void *)sub_100025620(0, rawValue[2] + 1, 1, (unint64_t)rawValue);
        }
        a1 = v101;
        uint64_t v35 = v113;
        unint64_t v60 = rawValue[2];
        unint64_t v59 = rawValue[3];
        uint64_t v61 = v103;
        if (v60 >= v59 >> 1)
        {
          uint64_t v62 = sub_100025620(v59 > 1, v60 + 1, 1, (unint64_t)rawValue);
          uint64_t v61 = v103;
          rawValue = (void *)v62;
        }
        rawValue[2] = v60 + 1;
        (*(void (**)(unint64_t, Class *, uint64_t))(v61 + 32))((unint64_t)rawValue+ ((*(unsigned __int8 *)(v61 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80))+ *(void *)(v61 + 72) * v60, v117, v56);

        v121._rawValue = rawValue;
        (*v90)(v115, v116);
        uint64_t v9 = v114;
        goto LABEL_4;
      }
      swift_bridgeObjectRelease();
    }
    id v45 = v89;
    id v111 = 0;
    goto LABEL_12;
  }
LABEL_20:
  type metadata accessor for UsageStore();
  static UsageStore.shared.getter();
  uint64_t v63 = v82;
  Locations.familyControlsStore.getter();
  dispatch thunk of UsageStore.save(to:)();
  uint64_t v64 = v85;
  if (v9)
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v83 + 8))(v63, v84);
    swift_bridgeObjectRelease();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v65 = Logger.logObject.getter();
    os_log_type_t v66 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      uint64_t v120 = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136446210;
      v121._rawValue = v9;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v68 = String.init<A>(describing:)();
      v121._rawValue = (void *)sub_1000067CC(v68, v69, &v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed to save usage store during category lookup: %{public}s", v67, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    (*(void (**)(char *, uint64_t))(v86 + 8))(v64, v87);
    uint64_t v77 = v88;
    if (v88)
    {
      swift_errorRetain();
      v77(v9, 1);
      swift_errorRelease();
    }
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v83 + 8))(v63, v84);
    swift_release();
    uint64_t v70 = v80;
    static Logger.syncEngine.getter();
    swift_bridgeObjectRetain_n();
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc();
      uint64_t v120 = swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v74 = Array.description.getter();
      unint64_t v76 = v75;
      swift_bridgeObjectRelease();
      uint64_t v119 = sub_1000067CC(v74, v76, &v120);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "telling sync engine about changes: %{public}s", v73, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v86 + 8))(v80, v87);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v70, v87);
    }
    swift_retain();
    CKSyncEngine.state.getter();
    swift_release();
    swift_beginAccess();
    CKSyncEngine.State.add(pendingRecordZoneChanges:)(v121);
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    if (v88) {
      return ((uint64_t (*)(void, void))v88)(0, 0);
    }
  }
  return result;
}

uint64_t sub_10005730C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_10001958C(0, &qword_100074AA0);
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  id v6 = a3;
  v5(v4, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1000573C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a4;
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  uint64_t v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v32 = a5;
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v30 = v9;
      uint64_t v34 = a1;
      v35[0] = v17;
      uint64_t v31 = a3;
      *(_DWORD *)uint64_t v16 = 136446210;
      v29[1] = v16 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v18 = String.init<A>(describing:)();
      uint64_t v34 = sub_1000067CC(v18, v19, v35);
      a3 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to synchronize usage: %{public}s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v30);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    }
    a5 = v32;
  }
  uint64_t v21 = *(void *)(a2 + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_usageReporting + 8);
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  uint64_t v36 = *(void *)(a2 + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_usageReporting);
  uint64_t v20 = v36;
  uint64_t v37 = v21;
  sub_100025234(v35);
  v22(v20, v21);
  DateInterval.duration.getter();
  double v24 = v23;
  uint64_t v25 = (void *)swift_allocObject();
  uint64_t v26 = v33;
  void v25[2] = v33;
  v25[3] = a5;
  void v25[4] = a2;
  uint64_t v27 = *(void (**)(uint64_t, uint64_t (*)(uint64_t, uint64_t, unint64_t, uint64_t), void *, uint64_t, uint64_t, double))(v21 + 24);
  sub_10001957C(v26);
  swift_retain();
  v27(a3, sub_10005B268, v25, v20, v21, v24);
  swift_release();
  return _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v35);
}

uint64_t sub_100057710(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t result = __chkstk_darwin(v13, v14);
  uint64_t v17 = (char *)&v24 - v16;
  if (a3)
  {
    uint64_t result = sub_100057B6C(a3);
    if (a5) {
      return a5(0, 0);
    }
  }
  else if (a4)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v26 = a6;
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      uint64_t v25 = v10;
      uint64_t v27 = a4;
      uint64_t v28 = v21;
      *(_DWORD *)uint64_t v20 = 136446210;
      double v24 = v20 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v22 = String.init<A>(describing:)();
      uint64_t v27 = sub_1000067CC(v22, v23, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to fetch usage: %{public}s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v25);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    }
    if (a5)
    {
      swift_errorRetain();
      a5(a4, 1);
      swift_errorRelease();
    }
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_100057B6C(unint64_t a1)
{
  uint64_t v110 = type metadata accessor for URL();
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110, v2);
  uint64_t v4 = (uint64_t)&v104 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v156 = type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
  uint64_t v149 = *(void *)(v156 - 8);
  uint64_t v6 = __chkstk_darwin(v156, v5);
  uint64_t v129 = (Class *)((char *)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v6, v8);
  uint64_t v153 = (Class *)((char *)&v104 - v9);
  uint64_t v10 = sub_100007370(&qword_1000740D8);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v148 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = type metadata accessor for UsageItemRecord.Source();
  uint64_t v13 = *(char **)(v147 - 8);
  __chkstk_darwin(v147, v14);
  uint64_t v146 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v145 = type metadata accessor for UUID();
  unint64_t v16 = *(void *)(v145 - 8);
  __chkstk_darwin(v145, v17);
  uint64_t v144 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = type metadata accessor for UsageItemRecord.UsageType();
  unint64_t v19 = *(void *)(v143 - 8);
  __chkstk_darwin(v143, v20);
  uint64_t v154 = (char *)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v22 = a1;
  uint64_t v155 = type metadata accessor for UsageItemRecord();
  uint64_t v23 = *(void *)(v155 - 8);
  uint64_t v25 = __chkstk_darwin(v155, v24);
  uint64_t v128 = (char *)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v27);
  unint64_t v157 = (char *)&v104 - v28;
  unint64_t v111 = v22;
  if (v22 >> 62) {
    goto LABEL_91;
  }
  uint64_t v29 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  uint64_t result = v29;
  if (!v29) {
    goto LABEL_92;
  }
  do
  {
    uint64_t v31 = 0;
    unint64_t v32 = v22 & 0xC000000000000001;
    uint64_t v106 = v22 & 0xFFFFFFFFFFFFFF8;
    unint64_t v105 = v22 + 32;
    unsigned int v142 = enum case for UsageItemRecord.UsageType.webDomain(_:);
    uint64_t v141 = (void (**)(char *, void, uint64_t))(v19 + 104);
    uint64_t v140 = (void (**)(char *, uint64_t))(v16 + 8);
    unsigned int v139 = enum case for UsageItemRecord.Source.local(_:);
    uint64_t v138 = (void (**)(char *, void, uint64_t))(v13 + 104);
    char v137 = (void (**)(char *, char *, uint64_t))(v23 + 16);
    id v136 = (void (**)(char *, void, uint64_t, uint64_t))(v23 + 56);
    int v135 = enum case for CKSyncEngine.PendingRecordZoneChange.saveRecord(_:);
    uint64_t v134 = (void (**)(void))(v149 + 104);
    uint64_t v133 = v149 + 32;
    uint64_t v132 = (void (**)(char *, uint64_t))(v23 + 8);
    v158._rawValue = &_swiftEmptyArrayStorage;
    uint64_t v116 = v4;
    uint64_t v108 = result;
    unint64_t v107 = v22 & 0xC000000000000001;
    while (1)
    {
      if (v32)
      {
        uint64_t v33 = v31;
        id v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((unint64_t)v31 >= *(void *)(v106 + 16))
        {
          __break(1u);
          return result;
        }
        uint64_t v33 = v31;
        id v34 = *(id *)(v105 + 8 * (void)v31);
      }
      id v115 = v34;
      BOOL v35 = __OFADD__(v33, 1);
      uint64_t v13 = v33 + 1;
      if (v35) {
        goto LABEL_90;
      }
      id v112 = v13;
      id v36 = [v115 categoryUsage];
      sub_10001958C(0, &qword_100074A78);
      unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      unint64_t v37 = v16;
      unint64_t v118 = v16;
      if (v16 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v102 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        uint64_t v38 = v102;
        unint64_t v37 = v118;
      }
      else
      {
        uint64_t v38 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      uint64_t v13 = v120;
      if (v38) {
        break;
      }
LABEL_79:
      unint64_t v16 = v37;

      swift_bridgeObjectRelease();
      uint64_t result = v108;
      uint64_t v31 = v112;
      unint64_t v32 = v107;
      if (v112 == (char *)v108)
      {
LABEL_85:
        swift_bridgeObjectRelease();
        goto LABEL_93;
      }
    }
    uint64_t v39 = 0;
    unint64_t v119 = v37 & 0xC000000000000001;
    uint64_t v114 = v37 & 0xFFFFFFFFFFFFFF8;
    unint64_t v113 = v37 + 32;
    uint64_t v117 = (char *)v38;
    while (1)
    {
      if (v119)
      {
        uint64_t v40 = v39;
        id v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((unint64_t)v39 >= *(void *)(v114 + 16)) {
          goto LABEL_89;
        }
        uint64_t v40 = v39;
        id v41 = *(id *)(v113 + 8 * (void)v39);
      }
      id v122 = v41;
      BOOL v35 = __OFADD__(v40, 1);
      uint64_t v13 = v40 + 1;
      if (v35) {
        goto LABEL_87;
      }
      Swift::OpaquePointer v121 = v13;
      id v42 = v122;
      id v150 = [v122 categoryIdentifier];
      id v43 = [v42 applicationUsage];
      sub_10001958C(0, &qword_100074A80);
      unint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v16 >> 62) {
        break;
      }
      uint64_t v13 = *(char **)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v13) {
        goto LABEL_21;
      }
LABEL_60:
      swift_bridgeObjectRelease();
      uint64_t v13 = (char *)[v122 webUsage];
      sub_10001958C(0, &qword_100074A88);
      unint64_t v19 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v19 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v4)
        {
LABEL_62:
          type metadata accessor for UsageStore();
          if (v4 < 1) {
            goto LABEL_88;
          }
          uint64_t v79 = 0;
          unint64_t v80 = v19 & 0xC000000000000001;
          unint64_t v151 = v19;
          uint64_t v131 = v4;
          id v130 = (id)(v19 & 0xC000000000000001);
          do
          {
            if (v80) {
              id v81 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
            }
            else {
              id v81 = *(id *)(v19 + 8 * v79 + 32);
            }
            uint64_t v82 = v81;
            unint64_t v16 = static UsageStore.shared.getter();
            __chkstk_darwin(v16, v83);
            *(&v104 - 2) = (uint64_t)v82;
            uint64_t v84 = v162;
            uint64_t v23 = UsageStore.contains(where:)();
            uint64_t v162 = v84;
            swift_release();
            if (v23)
            {
            }
            else
            {
              id v85 = [v82 domainIdentifier];
              uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)();

              (*v141)(v154, v142, v143);
              uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              int64_t v160 = v87;
              uint64_t v161 = v86;
              swift_bridgeObjectRetain();
              id v152 = v82;
              [v82 totalUsageTime];
              uint64_t v88 = v144;
              UUID.init()();
              UUID.uuidString.getter();
              (*v140)(v88, v145);
              (*v138)(v146, v139, v147);
              id v89 = v128;
              UsageItemRecord.init(identifier:recordName:type:source:category:totalUsage:)();
              static UsageStore.shared.getter();
              id v90 = v148;
              uint64_t v91 = v155;
              (*v137)(v148, v89, v155);
              (*v136)(v90, 0, 1, v91);
              UsageStore.subscript.setter();
              swift_release();
              sub_10001958C(0, &qword_1000740E0);
              uint64_t v92 = UsageItemRecord.recordName.getter();
              uint64_t v94 = v93;
              if (qword_1000739B0 != -1) {
                swift_once();
              }
              id v95 = (id)qword_100074BC0;
              v96._countAndFlagsBits = v92;
              v96._object = v94;
              Class isa = CKRecordID.init(recordName:zoneID:)(v96, (CKRecordZoneID)v95).super.isa;
              *uint64_t v129 = isa;
              (*v134)();
              unint64_t v16 = isa;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                v158._rawValue = (void *)sub_100025620(0, *((void *)v158._rawValue + 2) + 1, 1, (unint64_t)v158._rawValue);
              }
              unint64_t v19 = v151;
              unint64_t v98 = v152;
              uint64_t v4 = v131;
              unint64_t v80 = (unint64_t)v130;
              unint64_t v100 = *((void *)v158._rawValue + 2);
              unint64_t v99 = *((void *)v158._rawValue + 3);
              uint64_t v23 = v100 + 1;
              if (v100 >= v99 >> 1) {
                v158._rawValue = (void *)sub_100025620(v99 > 1, v100 + 1, 1, (unint64_t)v158._rawValue);
              }
              rawValue = v158._rawValue;
              *((void *)v158._rawValue + 2) = v23;
              (*(void (**)(unint64_t, Class *, uint64_t))(v149 + 32))((unint64_t)rawValue+ ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80))+ *(void *)(v149 + 72) * v100, v129, v156);

              (*v132)(v128, v155);
            }
            ++v79;
          }
          while (v4 != v79);
        }
      }
      else
      {
        uint64_t v4 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v4) {
          goto LABEL_62;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v39 = v121;
      uint64_t v13 = v120;
      uint64_t v4 = v116;
      unint64_t v37 = v118;
      if (v121 == v117) {
        goto LABEL_79;
      }
    }
    swift_bridgeObjectRetain();
    uint64_t v13 = (char *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v13) {
      goto LABEL_60;
    }
LABEL_21:
    unint64_t v19 = 0;
    unint64_t v127 = v16 & 0xC000000000000001;
    uint64_t v124 = v16 & 0xFFFFFFFFFFFFFF8;
    unint64_t v123 = v16 + 32;
    unint64_t v126 = v16;
    uint64_t v125 = v13;
LABEL_23:
    if (v127)
    {
      id v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      BOOL v35 = __OFADD__(v19, 1);
      unint64_t v45 = v19 + 1;
      if (v35) {
        goto LABEL_84;
      }
LABEL_29:
      uint64_t v131 = v45;
      id v130 = v44;
      id v46 = [v44 webUsageByDomain];
      sub_10001958C(0, &qword_1000741A8);
      uint64_t v47 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v4 = 0;
      uint64_t v48 = *(void *)(v47 + 64);
      uint64_t v159 = v47 + 64;
      uint64_t v161 = v47;
      uint64_t v49 = 1 << *(unsigned char *)(v47 + 32);
      if (v49 < 64) {
        uint64_t v50 = ~(-1 << v49);
      }
      else {
        uint64_t v50 = -1;
      }
      unint64_t v51 = v50 & v48;
      int64_t v160 = (unint64_t)(v49 + 63) >> 6;
      if ((v50 & v48) != 0)
      {
LABEL_33:
        unint64_t v52 = __clz(__rbit64(v51));
        v51 &= v51 - 1;
        unint64_t v53 = v52 | (v4 << 6);
        goto LABEL_34;
      }
      while (1)
      {
        BOOL v35 = __OFADD__(v4++, 1);
        if (v35)
        {
          __break(1u);
LABEL_83:
          __break(1u);
          goto LABEL_84;
        }
        if (v4 >= v160) {
          goto LABEL_22;
        }
        unint64_t v62 = *(void *)(v159 + 8 * v4);
        if (!v62)
        {
          uint64_t v63 = v4 + 1;
          if (v4 + 1 >= v160) {
            goto LABEL_22;
          }
          unint64_t v62 = *(void *)(v159 + 8 * v63);
          if (!v62)
          {
            uint64_t v63 = v4 + 2;
            if (v4 + 2 >= v160) {
              goto LABEL_22;
            }
            unint64_t v62 = *(void *)(v159 + 8 * v63);
            if (!v62)
            {
              uint64_t v63 = v4 + 3;
              if (v4 + 3 >= v160)
              {
LABEL_22:
                unint64_t v16 = v126;
                uint64_t v13 = v125;
                unint64_t v19 = v131;

                swift_release();
                if ((char *)v19 == v13) {
                  goto LABEL_60;
                }
                goto LABEL_23;
              }
              unint64_t v62 = *(void *)(v159 + 8 * v63);
              if (!v62)
              {
                while (1)
                {
                  uint64_t v4 = v63 + 1;
                  if (__OFADD__(v63, 1)) {
                    goto LABEL_83;
                  }
                  if (v4 >= v160) {
                    goto LABEL_22;
                  }
                  unint64_t v62 = *(void *)(v159 + 8 * v4);
                  ++v63;
                  if (v62) {
                    goto LABEL_46;
                  }
                }
              }
            }
          }
          uint64_t v4 = v63;
        }
LABEL_46:
        unint64_t v51 = (v62 - 1) & v62;
        unint64_t v53 = __clz(__rbit64(v62)) + (v4 << 6);
LABEL_34:
        Swift::String v54 = (uint64_t *)(*(void *)(v161 + 48) + 16 * v53);
        uint64_t v55 = *v54;
        uint64_t v23 = v54[1];
        uint64_t v56 = *(void **)(*(void *)(v161 + 56) + 8 * v53);
        type metadata accessor for UsageStore();
        swift_bridgeObjectRetain();
        id v57 = v56;
        uint64_t v58 = static UsageStore.shared.getter();
        __chkstk_darwin(v58, v59);
        *(&v104 - 2) = v55;
        *(&v104 - 1) = v23;
        uint64_t v60 = v162;
        char v61 = UsageStore.contains(where:)();
        uint64_t v162 = v60;
        swift_release();
        if (v61)
        {
          swift_bridgeObjectRelease();

          if (v51) {
            goto LABEL_33;
          }
        }
        else
        {
          (*v141)(v154, v142, v143);
          uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v151 = v65;
          id v152 = (void *)v64;
          swift_bridgeObjectRetain();
          [v57 doubleValue];
          os_log_type_t v66 = v144;
          UUID.init()();
          UUID.uuidString.getter();
          (*v140)(v66, v145);
          (*v138)(v146, v139, v147);
          UsageItemRecord.init(identifier:recordName:type:source:category:totalUsage:)();
          static UsageStore.shared.getter();
          uint64_t v67 = v148;
          uint64_t v68 = v155;
          (*v137)(v148, v157, v155);
          (*v136)(v67, 0, 1, v68);
          UsageStore.subscript.setter();
          swift_release();
          sub_10001958C(0, &qword_1000740E0);
          uint64_t v69 = UsageItemRecord.recordName.getter();
          uint64_t v71 = v70;
          if (qword_1000739B0 != -1) {
            swift_once();
          }
          id v72 = (id)qword_100074BC0;
          v73._countAndFlagsBits = v69;
          v73._object = v71;
          Class v74 = CKRecordID.init(recordName:zoneID:)(v73, (CKRecordZoneID)v72).super.isa;
          *uint64_t v153 = v74;
          (*v134)();
          unint64_t v75 = v74;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v158._rawValue = (void *)sub_100025620(0, *((void *)v158._rawValue + 2) + 1, 1, (unint64_t)v158._rawValue);
          }
          unint64_t v77 = *((void *)v158._rawValue + 2);
          unint64_t v76 = *((void *)v158._rawValue + 3);
          uint64_t v23 = v77 + 1;
          if (v77 >= v76 >> 1) {
            v158._rawValue = (void *)sub_100025620(v76 > 1, v77 + 1, 1, (unint64_t)v158._rawValue);
          }
          uint64_t v78 = v158._rawValue;
          *((void *)v158._rawValue + 2) = v23;
          (*(void (**)(unint64_t, Class *, uint64_t))(v149 + 32))((unint64_t)v78+ ((*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80))+ *(void *)(v149 + 72) * v77, v153, v156);

          (*v132)(v157, v155);
          if (v51) {
            goto LABEL_33;
          }
        }
      }
    }
    if (v19 < *(void *)(v124 + 16))
    {
      id v44 = *(id *)(v123 + 8 * v19);
      BOOL v35 = __OFADD__(v19, 1);
      unint64_t v45 = v19 + 1;
      if (v35)
      {
LABEL_84:
        __break(1u);
        goto LABEL_85;
      }
      goto LABEL_29;
    }
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    unint64_t v22 = v111;
  }
  while (result);
LABEL_92:
  swift_bridgeObjectRelease();
  v158._rawValue = &_swiftEmptyArrayStorage;
LABEL_93:
  type metadata accessor for UsageStore();
  static UsageStore.shared.getter();
  Locations.familyControlsStore.getter();
  uint64_t v103 = v162;
  dispatch thunk of UsageStore.save(to:)();
  if (v103)
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v4, v110);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v4, v110);
    swift_release();
    swift_retain();
    CKSyncEngine.state.getter();
    swift_release();
    CKSyncEngine.State.add(pendingRecordZoneChanges:)(v158);
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100058EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a3;
  uint64_t v7 = type metadata accessor for UsageItemRecord.Source();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v10 = __chkstk_darwin(v7, v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  uint64_t v15 = (char *)&v26 - v14;
  uint64_t v16 = type metadata accessor for UsageItemRecord();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  uint64_t v21 = (char *)&v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 == a4 && a2 == v19)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, v27, v16);
LABEL_5:
    UsageItemRecord.source.getter();
    (*(void (**)(char *, void, uint64_t))(v8 + 104))(v12, enum case for UsageItemRecord.Source.local(_:), v7);
    char v23 = static UsageItemRecord.Source.== infix(_:_:)();
    uint64_t v24 = *(void (**)(char *, uint64_t))(v8 + 8);
    v24(v12, v7);
    v24(v15, v7);
    goto LABEL_6;
  }
  char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, v27, v16);
  char v23 = 0;
  if (v22) {
    goto LABEL_5;
  }
LABEL_6:
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
  return v23 & 1;
}

uint64_t sub_100059160(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v31 = a1;
  uint64_t v32 = a3;
  uint64_t v30 = type metadata accessor for UsageItemRecord.Source();
  uint64_t v6 = *(void *)(v30 - 8);
  uint64_t v8 = __chkstk_darwin(v30, v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  uint64_t v13 = (char *)&v29 - v12;
  uint64_t v14 = type metadata accessor for UsageItemRecord();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v19 = [a4 domainIdentifier];
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v22 = v21;

  if (v20 == v31 && v22 == a2)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v32, v14);
  }
  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v32, v14);
    char v25 = 0;
    if ((v24 & 1) == 0) {
      goto LABEL_9;
    }
  }
  UsageItemRecord.source.getter();
  uint64_t v26 = v30;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v10, enum case for UsageItemRecord.Source.local(_:), v30);
  char v25 = static UsageItemRecord.Source.== infix(_:_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v6 + 8);
  v27(v10, v26);
  v27(v13, v26);
LABEL_9:
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return v25 & 1;
}

void sub_1000593FC(void *a1, char a2, uint64_t a3, void *a4, void (*a5)(void *, uint64_t), uint64_t a6)
{
  sub_10003BBE4(a4);
  if (a2)
  {
    swift_errorRetain();
    a5(a1, 1);
    uint64_t v12 = a1;
    char v13 = 1;
  }
  else
  {
    if (!a1)
    {
      a5(0, 0);
      return;
    }
    id v11 = a1;
    sub_100053740(a1, a4, a5, a6);
    uint64_t v12 = a1;
    char v13 = 0;
  }

  sub_100029F58(v12, v13);
}

uint64_t sub_1000594E4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v13 = __chkstk_darwin(v10, v12);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  uint64_t v18 = (char *)&v30 - v17;
  if (a2)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v32 = a3;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v33 = a5;
      char v25 = (uint8_t *)v24;
      uint64_t v26 = swift_slowAlloc();
      uint64_t v31 = a4;
      uint64_t v34 = a1;
      uint64_t v35 = v26;
      *(_DWORD *)char v25 = 136446210;
      uint64_t v30 = v25 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v27 = String.init<A>(describing:)();
      uint64_t v34 = sub_1000067CC(v27, v28, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to fetch shared authorization zones: %{public}s", v25, 0xCu);
      swift_arrayDestroy();
      a4 = v31;
      swift_slowDealloc();
      a5 = v33;
      swift_slowDealloc();

      sub_100029F70(a1, 1);
    }
    else
    {
      sub_100029F70(a1, 1);
      sub_100029F70(a1, 1);
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  }
  else
  {
    static Logger.syncEngine.getter();
    id v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Successfully fetched all shared authorization zones", v21, 2u);
      swift_slowDealloc();
    }

    (*(void (**)(char *, uint64_t))(v11 + 8))(v18, v10);
  }
  return sub_100059818(a4, a5);
}

uint64_t sub_100059818(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100007370(&qword_100074B10);
  __chkstk_darwin(v6 - 8, v7);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_100007370(&qword_100074AB0);
  __chkstk_darwin(v10 - 8, v11);
  uint64_t v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100073970 != -1) {
    swift_once();
  }
  uint64_t v14 = (void *)qword_100074B50;
  uint64_t v15 = *(void **)(v3 + 168);
  uint64_t v16 = sub_100007370(&qword_100074AB8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v13, 1, 1, v16);
  uint64_t v17 = sub_10005B548(v14, v15, (uint64_t)v13);
  sub_100015758((uint64_t)v13, &qword_100074AB0);
  *(void *)(v3 + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_privateEngine) = v17;
  swift_release();
  uint64_t v18 = *(void **)(v3 + 176);
  NSString v19 = String._bridgeToObjectiveC()();
  LOBYTE(v18) = [v18 BOOLForKey:v19];

  if ((v18 & 1) == 0)
  {
    swift_retain();
    CKSyncEngine.state.getter();
    swift_release();
    sub_100007370(&qword_100074A68);
    uint64_t v20 = type metadata accessor for CKSyncEngine.PendingDatabaseChange();
    uint64_t v21 = *(void *)(v20 - 8);
    unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_10005FEC0;
    uint64_t v24 = (void *)(v23 + v22);
    if (qword_1000739D8 != -1) {
      swift_once();
    }
    char v25 = (void *)qword_100074BF8;
    *uint64_t v24 = qword_100074BF8;
    (*(void (**)(void *, void, uint64_t))(v21 + 104))(v24, enum case for CKSyncEngine.PendingDatabaseChange.saveZone(_:), v20);
    id v26 = v25;
    CKSyncEngine.State.add(pendingDatabaseChanges:)((Swift::OpaquePointer)v23);
    swift_release();
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v9, 1, 1, v27);
  unint64_t v28 = (void *)swift_allocObject();
  void v28[2] = 0;
  v28[3] = 0;
  v28[4] = v3;
  v28[5] = a1;
  v28[6] = a2;
  swift_retain();
  swift_retain();
  sub_10005AAF8((uint64_t)v9, (uint64_t)&unk_100074B20, (uint64_t)v28);
  return swift_release();
}

void sub_100059BB4(uint64_t a1, void *a2, char a3, uint64_t a4, const char *a5)
{
  uint64_t v8 = type metadata accessor for Logger();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_errorRetain();
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v20 = a5;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      uint64_t v21 = (uint64_t)a2;
      uint64_t v22 = v16;
      *(_DWORD *)uint64_t v15 = 136446210;
      NSString v19 = v15 + 4;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v17 = String.init<A>(describing:)();
      uint64_t v21 = sub_1000067CC(v17, v18, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100029F58(a2, 1);
      sub_100029F58(a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, v20, v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100029F58(a2, 1);
    }
    else
    {
      sub_100029F58(a2, 1);
      sub_100029F58(a2, 1);
      swift_errorRelease();
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  else
  {
    sub_10005B53C(a2, 0);
    swift_retain();
    sub_10003A18C(a2);
    swift_release();
    sub_100029F58(a2, 0);
  }
}

void sub_100059E88(void *a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6)
{
  if (a2)
  {
    swift_errorRetain();
    a5(a1, 1);
    uint64_t v11 = a1;
    char v12 = 1;
  }
  else
  {
    if (!a1)
    {
      a5(0, 0);
      return;
    }
    id v10 = a1;
    sub_100052D78(a1, a4, a5, a6);
    uint64_t v11 = a1;
    char v12 = 0;
  }

  sub_100029F58(v11, v12);
}

uint64_t sub_100059F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[9] = a4;
  uint64_t v7 = type metadata accessor for Logger();
  v6[12] = v7;
  v6[13] = *(void *)(v7 - 8);
  v6[14] = swift_task_alloc();
  uint64_t Changes = type metadata accessor for CKSyncEngine.FetchChangesOptions.Scope();
  v6[15] = Changes;
  v6[16] = *(void *)(Changes - 8);
  v6[17] = swift_task_alloc();
  uint64_t ChangesOptions = type metadata accessor for CKSyncEngine.FetchChangesOptions();
  v6[18] = ChangesOptions;
  v6[19] = *(void *)(ChangesOptions - 8);
  v6[20] = swift_task_alloc();
  return _swift_task_switch(sub_10005A0C8, 0, 0);
}

uint64_t sub_10005A0C8()
{
  sub_100007370(&qword_1000742A0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_10005FED0;
  if (qword_1000739D0 != -1) {
    swift_once();
  }
  uint64_t v3 = v0[16];
  uint64_t v2 = (uint64_t *)v0[17];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[9];
  uint64_t v6 = (void *)qword_100074BF0;
  *(void *)(v1 + 32) = qword_100074BF0;
  specialized Array._endMutation()();
  *uint64_t v2 = v1;
  (*(void (**)(uint64_t *, void, uint64_t))(v3 + 104))(v2, enum case for CKSyncEngine.FetchChangesOptions.Scope.zoneIDs(_:), v4);
  id v7 = v6;
  CKSyncEngine.FetchChangesOptions.init(scope:operationGroup:)();
  uint64_t v8 = OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_privateEngine;
  v0[21] = OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_privateEngine;
  v0[22] = *(void *)(v5 + v8);
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[23] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10005A258;
  uint64_t v10 = v0[20];
  return CKSyncEngine.fetchChanges(_:)(v10);
}

uint64_t sub_10005A258()
{
  *(void *)(*(void *)v1 + 192) = v0;
  swift_task_dealloc();
  swift_release();
  if (v0) {
    uint64_t v2 = sub_10005A664;
  }
  else {
    uint64_t v2 = sub_10005A38C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10005A38C()
{
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[9] + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_locations;
  uint64_t v3 = type metadata accessor for Locations();
  v0[5] = v3;
  v0[6] = &protocol witness table for Locations;
  uint64_t v4 = sub_100025234(v0 + 2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16))(v4, v2, v3);
  uint64_t v5 = sub_10004B338(v0 + 2);
  if (v1)
  {
    id v7 = (void (*)(uint64_t, void, uint64_t))v0[10];
    swift_errorRetain();
    v7(v1, 0, 1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    uint64_t v8 = v5;
    unint64_t v9 = v6;
    swift_retain();
    CKSyncEngine.state.getter();
    swift_release();
    sub_100007370(&qword_100074258);
    uint64_t v10 = type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
    uint64_t v11 = *(void *)(v10 - 8);
    unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_10005FEC0;
    os_log_type_t v14 = (void *)(v13 + v12);
    if (qword_1000739E0 != -1) {
      swift_once();
    }
    uint64_t v15 = (void (*)(uint64_t, unint64_t, void))v0[10];
    uint64_t v16 = (void *)qword_100074C00;
    *os_log_type_t v14 = qword_100074C00;
    (*(void (**)(void *, void, uint64_t))(v11 + 104))(v14, enum case for CKSyncEngine.PendingRecordZoneChange.saveRecord(_:), v10);
    id v17 = v16;
    CKSyncEngine.State.add(pendingRecordZoneChanges:)((Swift::OpaquePointer)v13);
    swift_bridgeObjectRelease();
    swift_release();
    sub_100015DDC(v8, v9);
    v15(v8, v9, 0);
    sub_10000BF6C(v8, v9);
    sub_10000BF6C(v8, v9);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_10005A664()
{
  uint64_t v33 = v0;
  uint64_t v1 = v0;
  uint64_t v2 = v0 + 2;
  (*(void (**)(void, void))(v0[19] + 8))(v0[20], v0[18]);
  static Logger.syncEngine.getter();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = v0[24];
    uint64_t v6 = v0[13];
    uint64_t v30 = v0[12];
    uint64_t v31 = v0[14];
    id v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)id v7 = 136446210;
    uint64_t v32 = v8;
    v0[7] = v5;
    swift_errorRetain();
    sub_100007370(&qword_1000741C0);
    uint64_t v9 = String.init<A>(describing:)();
    v0[8] = sub_1000067CC(v9, v10, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to fetch changes for authorization zone: %{public}s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v0 + 2;
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v31, v30);
  }
  else
  {
    uint64_t v11 = v0[13];
    uint64_t v12 = v0[14];
    uint64_t v13 = v0[12];
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
  }
  uint64_t v14 = v0[9] + OBJC_IVAR____TtC19FamilyControlsAgent16FamilySyncEngine_locations;
  uint64_t v15 = type metadata accessor for Locations();
  v0[5] = v15;
  v0[6] = &protocol witness table for Locations;
  uint64_t v16 = sub_100025234(v2);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v16, v14, v15);
  uint64_t v17 = sub_10004B338(v2);
  unint64_t v19 = v18;
  swift_retain();
  CKSyncEngine.state.getter();
  swift_release();
  sub_100007370(&qword_100074258);
  uint64_t v20 = type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
  uint64_t v21 = *(void *)(v20 - 8);
  unint64_t v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_10005FEC0;
  uint64_t v24 = (void *)(v23 + v22);
  if (qword_1000739E0 != -1) {
    swift_once();
  }
  char v25 = (void (*)(uint64_t, unint64_t, void))v1[10];
  id v26 = (void *)qword_100074C00;
  *uint64_t v24 = qword_100074C00;
  (*(void (**)(void *, void, uint64_t))(v21 + 104))(v24, enum case for CKSyncEngine.PendingRecordZoneChange.saveRecord(_:), v20);
  id v27 = v26;
  CKSyncEngine.State.add(pendingRecordZoneChanges:)((Swift::OpaquePointer)v23);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100015DDC(v17, v19);
  v25(v17, v19, 0);
  sub_10000BF6C(v17, v19);
  sub_10000BF6C(v17, v19);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v28 = (uint64_t (*)(void))v1[1];
  return v28();
}

uint64_t sub_10005AAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_100015758(a1, &qword_100074B10);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_10005ACA4(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  os_log_type_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *os_log_type_t v4 = v2;
  v4[1] = sub_10005AD80;
  return v6(a1);
}

uint64_t sub_10005AD80()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_10005AE78()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_10005AEB8()
{
  sub_10005504C(*(void *)(v0 + 16), *(void *)(v0 + 32), *(double *)(v0 + 24));
}

uint64_t sub_10005AEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10005AED8()
{
  return swift_release();
}

uint64_t sub_10005AEE0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005AF18()
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_10005AF58(uint64_t a1, uint64_t a2)
{
  sub_10005539C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10005AF60()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005AF98()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void sub_10005AFAC()
{
  sub_100056284(v0);
}

uint64_t sub_10005AFB4()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_10005AFF0(uint64_t a1, char a2)
{
  sub_100056310(a1, a2 & 1, *(void *)(v2 + 16), *(NSObject **)(v2 + 24), "Successfully updated installed applications");
}

void sub_10005B01C(uint64_t a1, char a2)
{
  sub_100056310(a1, a2 & 1, *(void *)(v2 + 16), *(NSObject **)(v2 + 24), "Successfully updated visited web domains");
}

uint64_t sub_10005B044()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005B08C()
{
  return sub_10005649C(*(void *)(v0 + 16), *(void (**)(uint64_t, uint64_t))(v0 + 24));
}

uint64_t sub_10005B098()
{
  uint64_t v1 = type metadata accessor for DateInterval();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  if (*(void *)(v0 + v5)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v5 + 16, v3 | 7);
}

uint64_t sub_10005B17C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for DateInterval() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v4;
  uint64_t v7 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return sub_1000573C0(a1, v5, v6, v8, v9);
}

uint64_t sub_10005B220()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005B268(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_100057710(a1, a2, a3, a4, *(uint64_t (**)(uint64_t, uint64_t))(v4 + 16), *(void *)(v4 + 24));
}

uint64_t sub_10005B274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100058EF8(a1, a2, a3, *(void *)(v3 + 16)) & 1;
}

uint64_t sub_10005B294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100059160(a1, a2, a3, *(void **)(v3 + 16));
}

uint64_t sub_10005B29C()
{
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005B2EC(uint64_t a1, uint64_t a2)
{
  return sub_10005652C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void (**)(void (**)(char *, void, uint64_t), uint64_t))(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_10005B2F8()
{
  swift_release();

  return _swift_deallocObject(v0, 41, 7);
}

void sub_10005B338(uint64_t a1, void *a2, char a3)
{
  sub_100052700(a1, a2, a3 & 1, *(unsigned char *)(v3 + 16), *(NSObject **)(v3 + 24), *(void *)(v3 + 32), *(unsigned char *)(v3 + 40));
}

uint64_t sub_10005B34C()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10005B38C(uint64_t a1, char a2)
{
  return sub_100053E30(a1, a2 & 1, *(NSObject **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10005B39C()
{
  return _swift_deallocObject(v0, 32, 7);
}

void sub_10005B3D4()
{
  sub_100054134(*(void *)(v0 + 16));
}

uint64_t sub_10005B3DC()
{
  swift_release();
  sub_100029F70(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return _swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10005B420()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

uint64_t sub_10005B454(uint64_t a1, char a2)
{
  if (a2) {
    return swift_errorRetain();
  }
  return result;
}

uint64_t sub_10005B460()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_10005B498(uint64_t a1, char a2)
{
  sub_100053428(a1, a2 & 1, *(NSObject **)(v2 + 16), "Successfully fetched all shared activity", "Failed to fetch all shared activity: %{public}s");
}

void sub_10005B4C8(uint64_t a1, char a2)
{
  sub_100053428(a1, a2 & 1, *(NSObject **)(v2 + 16), "Successfully fetched shared authorization key", "Failed to fetch shared authorization key: %{public}s");
}

void sub_10005B4F8(uint64_t a1, void *a2, char a3)
{
  sub_100059BB4(a1, a2, a3 & 1, v3, "Failed to match authorization key record: %{public}s");
}

uint64_t sub_10005B524(uint64_t a1, char a2)
{
  return sub_10005CDFC(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100059E88);
}

id sub_10005B53C(void *a1, char a2)
{
  if (a2) {
    return (id)swift_errorRetain();
  }
  else {
    return a1;
  }
}

uint64_t sub_10005B548(void *a1, void *a2, uint64_t a3)
{
  id v130 = a1;
  id v131 = a2;
  uint64_t v4 = type metadata accessor for CKSyncEngine.Configuration();
  uint64_t v134 = *(void *)(v4 - 8);
  uint64_t v135 = v4;
  uint64_t v6 = __chkstk_darwin(v4, v5);
  uint64_t v133 = (char *)&v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  uint64_t v132 = (char *)&v109 - v9;
  uint64_t v10 = type metadata accessor for CKSyncEngine.State.Serialization();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  uint64_t v114 = (char *)&v109 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v126 = type metadata accessor for Logger();
  uint64_t v123 = *(void *)(v126 - 8);
  uint64_t v15 = __chkstk_darwin(v126, v14);
  id v122 = (char *)&v109 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15, v17);
  uint64_t v116 = (char *)&v109 - v19;
  __chkstk_darwin(v18, v20);
  unint64_t v22 = (char *)&v109 - v21;
  uint64_t v23 = sub_100007370(&qword_100074AB0);
  __chkstk_darwin(v23 - 8, v24);
  id v26 = (char *)&v109 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_100007370(&qword_100074AB8);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  uint64_t v31 = (char *)&v109 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_100007370(&qword_1000744C8);
  uint64_t v34 = __chkstk_darwin(v32 - 8, v33);
  id v115 = (char *)&v109 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v34, v36);
  uint64_t v129 = (uint64_t)&v109 - v38;
  uint64_t v40 = __chkstk_darwin(v37, v39);
  uint64_t v118 = (uint64_t)&v109 - v41;
  uint64_t v43 = __chkstk_darwin(v40, v42);
  uint64_t v125 = (uint64_t)&v109 - v44;
  uint64_t v46 = __chkstk_darwin(v43, v45);
  uint64_t v117 = (char *)&v109 - v47;
  __chkstk_darwin(v46, v48);
  uint64_t v50 = (char *)&v109 - v49;
  uint64_t v51 = sub_10005CE94(&qword_100074AC0, (void (*)(uint64_t))_s10DataSourceCMa);
  uint64_t v127 = v10;
  uint64_t v128 = v51;
  uint64_t v124 = v11;
  unint64_t v119 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v120 = v11 + 56;
  v119(v50, 1, 1, v10);
  sub_1000265EC(a3, (uint64_t)v26, &qword_100074AB0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27) == 1)
  {
    unint64_t v52 = &qword_100074AB0;
    uint64_t v53 = (uint64_t)v26;
LABEL_21:
    sub_100015758(v53, v52);
    goto LABEL_22;
  }
  uint64_t v54 = *(int *)(v27 + 48);
  uint64_t v55 = (uint64_t)&v31[v54];
  uint64_t v56 = &v26[v54];
  uint64_t v57 = type metadata accessor for URL();
  uint64_t v58 = *(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32);
  v58(v31, v26, v57);
  uint64_t v113 = v55;
  v58((char *)v55, v56, v57);
  id v59 = [self defaultManager];
  URL.path(percentEncoded:)(1);
  NSString v60 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v56) = [v59 fileExistsAtPath:v60];

  Swift::OpaquePointer v121 = v31;
  if (v56)
  {
    static Logger.syncEngine.getter();
    char v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    BOOL v63 = os_log_type_enabled(v61, v62);
    uint64_t v64 = v124;
    if (v63)
    {
      unint64_t v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Migrating deprecated sync metadata to sync state serialization", v65, 2u);
      swift_slowDealloc();
    }

    os_log_type_t v66 = (char *)(v123 + 8);
    id v112 = *(void (**)(char *, uint64_t))(v123 + 8);
    v112(v22, v126);
    uint64_t v67 = Data.init(contentsOf:options:)();
    uint64_t v68 = (uint64_t)v117;
    uint64_t v69 = v67;
    unint64_t v71 = v70;
    sub_100015DDC(v67, v70);
    id v72 = v114;
    CKSyncEngine.State.Serialization.init(deprecatedData:)();
    uint64_t v73 = v127;
    (*(void (**)(uint64_t, char *, uint64_t))(v64 + 16))(v68, v72, v127);
    v119((char *)v68, 0, 1, v73);
    Class v74 = 0;
    sub_100041A90(v68, v113);
    uint64_t v110 = (uint8_t *)v69;
    id v111 = (id)v71;
    uint64_t v100 = v68;
    uint64_t v101 = v66;
    sub_100015758(v100, &qword_1000744C8);
    URL.path(percentEncoded:)(1);
    NSString v102 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v137 = 0;
    unsigned __int8 v103 = [v59 removeItemAtPath:v102 error:&v137];

    if (v103)
    {
      id v104 = v137;
      sub_100015758((uint64_t)v50, &qword_1000744C8);
      sub_10000BF6C((uint64_t)v110, (unint64_t)v111);
      uint64_t v105 = v127;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v50, v114, v127);
      v119(v50, 0, 1, v105);
    }
    else
    {
      id v106 = v137;
      uint64_t v107 = _convertNSErrorToError(_:)();

      swift_willThrow();
      sub_10000BF6C((uint64_t)v110, (unint64_t)v111);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v114, v127);
      uint64_t v117 = 0;
      uint64_t v108 = v101;
      unint64_t v75 = v122;
      static Logger.syncEngine.getter();
      swift_errorRetain();
      swift_errorRetain();
      unint64_t v76 = Logger.logObject.getter();
      os_log_type_t v77 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v76, v77))
      {
        uint64_t v78 = swift_slowAlloc();
        id v111 = v59;
        uint64_t v79 = (uint8_t *)v78;
        id v137 = (id)swift_slowAlloc();
        uint64_t v114 = v108;
        *(_DWORD *)uint64_t v79 = 136446210;
        uint64_t v110 = v79 + 4;
        uint64_t v136 = v107;
        swift_errorRetain();
        sub_100007370(&qword_1000741C0);
        uint64_t v80 = String.init<A>(describing:)();
        uint64_t v136 = sub_1000067CC(v80, v81, (uint64_t *)&v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v76, v77, "Failed to migrate deprecated sync metadata: %{public}s", v79, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        id v59 = v111;
        swift_slowDealloc();

        swift_errorRelease();
        v112(v122, v126);
      }
      else
      {
        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();

        v112(v75, v126);
      }
      Class v74 = v117;
    }
  }
  else
  {
    Class v74 = 0;
    uint64_t v64 = v124;
  }
  uint64_t v82 = v125;
  sub_1000265EC((uint64_t)v50, v125, &qword_1000744C8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v82, 1, v127) != 1)
  {

    uint64_t v91 = v82;
LABEL_20:
    sub_100015758(v91, &qword_1000744C8);
    unint64_t v52 = &qword_100074AB8;
    uint64_t v53 = (uint64_t)v121;
    goto LABEL_21;
  }
  sub_100015758(v82, &qword_1000744C8);
  _s10DataSourceCMa();
  uint64_t v83 = v118;
  sub_10003CB2C(v113, v118);
  if (v74)
  {
    uint64_t v84 = (uint64_t)v74;
    id v85 = v116;
    static Logger.syncEngine.getter();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc();
      id v137 = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v88 = 136446210;
      uint64_t v136 = v84;
      swift_errorRetain();
      sub_100007370(&qword_1000741C0);
      uint64_t v89 = String.init<A>(describing:)();
      uint64_t v136 = sub_1000067CC(v89, v90, (uint64_t *)&v137);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "Failed to read sync serialization: %{public}s", v88, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v123 + 8))(v116, v126);
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      (*(void (**)(char *, uint64_t))(v123 + 8))(v85, v126);
    }
    uint64_t v92 = (uint64_t)v115;
    v119(v115, 1, 1, v127);
    sub_100041A90(v92, v113);

    swift_errorRelease();
    uint64_t v91 = v92;
    goto LABEL_20;
  }

  sub_100015758((uint64_t)v121, &qword_100074AB8);
  sub_100015758((uint64_t)v50, &qword_1000744C8);
  sub_100034538(v83, (uint64_t)v50, &qword_1000744C8);
LABEL_22:
  sub_1000265EC((uint64_t)v50, v129, &qword_1000744C8);
  id v93 = v130;
  id v94 = v131;
  id v95 = v132;
  CKSyncEngine.Configuration.init(database:stateSerialization:delegate:)();
  static FamilyControlsService.nameAPS.getter();
  CKSyncEngine.Configuration.apsMachServiceName.setter();
  uint64_t v96 = v134;
  uint64_t v97 = v135;
  (*(void (**)(char *, char *, uint64_t))(v134 + 16))(v133, v95, v135);
  type metadata accessor for CKSyncEngine();
  swift_allocObject();
  uint64_t v98 = CKSyncEngine.init(_:)();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v97);
  sub_100015758((uint64_t)v50, &qword_1000744C8);
  return v98;
}

char *sub_10005C338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12)
{
  uint64_t v57 = a8;
  uint64_t v54 = a7;
  uint64_t v53 = a6;
  id v49 = a5;
  uint64_t v51 = a2;
  uint64_t v50 = a1;
  uint64_t v56 = a10;
  uint64_t v52 = a9;
  uint64_t v55 = a11;
  uint64_t v46 = a12;
  uint64_t v61 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v62 = *(void *)(v61 - 8);
  __chkstk_darwin(v61, v15);
  NSString v60 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v17 = *(void *)(v48 - 8);
  __chkstk_darwin(v48, v18);
  uint64_t v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v21, v22);
  uint64_t v59 = type metadata accessor for DispatchQoS();
  uint64_t v58 = *(void *)(v59 - 8);
  __chkstk_darwin(v59, v23);
  uint64_t v25 = (char *)&v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69[3] = sub_10001958C(0, &qword_100074AF8);
  v69[4] = &off_10006F380;
  v69[0] = a3;
  v68[3] = sub_10001958C(0, &qword_100074B00);
  v68[4] = &off_10006F4C8;
  v68[0] = a4;
  v67[3] = sub_10001958C(0, &qword_100074B08);
  v67[4] = &off_10006E3C8;
  v67[0] = a5;
  uint64_t v47 = OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationQueue;
  sub_10001958C(0, (unint64_t *)&qword_100073ED0);
  id v26 = a12;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = &_swiftEmptyArrayStorage;
  sub_10005CE94(&qword_100073ED8, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_100007370(&qword_100073EE0);
  sub_10005CEDC((unint64_t *)&qword_100073EE8, &qword_100073EE0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v17 + 104))(v20, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v48);
  *(void *)&v46[v47] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v27 = &v26[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_cloudSharing];
  uint64_t v28 = v51;
  *(void *)uint64_t v27 = v50;
  *((void *)v27 + 1) = v28;
  sub_10000BFC4((uint64_t)v69, (uint64_t)&v26[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_container]);
  sub_10000BFC4((uint64_t)v68, (uint64_t)&v26[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_database]);
  sub_10000BFC4((uint64_t)v67, (uint64_t)&v26[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationManager]);
  uint64_t v29 = &v26[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_recordModifying];
  uint64_t v30 = v54;
  *(void *)uint64_t v29 = v53;
  *((void *)v29 + 1) = v30;
  uint64_t v31 = &v26[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_shareParticipantFetching];
  uint64_t v32 = v52;
  *(void *)uint64_t v31 = v57;
  *((void *)v31 + 1) = v32;
  uint64_t v33 = &v26[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_idsStatusFetching];
  uint64_t v34 = v55;
  *(void *)uint64_t v33 = v56;
  *((void *)v33 + 1) = v34;

  uint64_t v35 = (objc_class *)_s18SharingCoordinatorCMa();
  v66.receiver = v26;
  v66.super_class = v35;
  uint64_t v36 = (char *)objc_msgSendSuper2(&v66, "init");
  uint64_t v37 = *(void *)&v36[OBJC_IVAR____TtCC19FamilyControlsAgent16FamilySyncEngine18SharingCoordinator_invitationQueue];
  uint64_t v38 = v36;
  [v49 setDelegate:v38 queue:v37];
  sub_10000BFC4((uint64_t)v67, (uint64_t)v65);
  uint64_t v39 = swift_allocObject();
  sub_100028C4C(v65, v39 + 16);
  *(void *)(v39 + 56) = v38;
  aBlock[4] = sub_10005CF6C;
  aBlock[5] = v39;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100036EDC;
  void aBlock[3] = &unk_10006FB40;
  uint64_t v40 = _Block_copy(aBlock);
  uint64_t v41 = v38;
  static DispatchQoS.unspecified.getter();
  BOOL v63 = &_swiftEmptyArrayStorage;
  sub_10005CE94((unint64_t *)&unk_100074180, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_100007370(&qword_100074360);
  sub_10005CEDC((unint64_t *)&qword_100074190, &qword_100074360);
  uint64_t v42 = v60;
  uint64_t v43 = v61;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();

  _Block_release(v40);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v68);
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v69);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v42, v43);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v25, v59);
  swift_release();
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)v67);
  return v41;
}

uint64_t sub_10005CA60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (!v4) {
    return 0;
  }
  uint64_t v31 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  while (1)
  {
    sub_10000BE0C((void *)(v3 + v7 + 32), *(void *)(v3 + v7 + 56));
    uint64_t v9 = dispatch thunk of FamilyMemberable.altDSID.getter();
    if (!v10)
    {
      if (!a3) {
        goto LABEL_18;
      }
      goto LABEL_4;
    }
    if (a3) {
      break;
    }
    swift_bridgeObjectRelease();
LABEL_4:
    ++v8;
    v7 += 40;
    if (v4 == v8)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v3 + 16);
    }
  }
  if (v9 != v31 || v10 != a3)
  {
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_18;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
LABEL_18:
  uint64_t result = swift_bridgeObjectRelease();
  if (__OFADD__(v8, 1)) {
    goto LABEL_60;
  }
  unint64_t v14 = *(void *)(v3 + 16);
  if (v8 + 1 == v14) {
    return v8;
  }
  uint64_t v15 = v7 + 72;
  unint64_t v16 = v8 + 1;
  while (2)
  {
    if (v16 < v14)
    {
      sub_10000BFC4(v3 + v15, (uint64_t)&v29);
      sub_10000BE0C(&v29, v30);
      uint64_t v17 = dispatch thunk of FamilyMemberable.altDSID.getter();
      if (v18)
      {
        if (a3)
        {
          if (v17 != v31 || v18 != a3)
          {
            char v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            uint64_t result = _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v29);
            if ((v20 & 1) == 0)
            {
              if (v16 == v8) {
                goto LABEL_44;
              }
LABEL_36:
              if ((v8 & 0x8000000000000000) != 0) {
                goto LABEL_55;
              }
              uint64_t v21 = *a1;
              unint64_t v22 = *(void *)(*a1 + 16);
              if (v8 >= v22) {
                goto LABEL_56;
              }
              uint64_t result = sub_10000BFC4(v21 + 40 * v8 + 32, (uint64_t)&v29);
              if (v16 >= v22) {
                goto LABEL_57;
              }
              sub_10000BFC4(v21 + v15, (uint64_t)v28);
              uint64_t result = swift_isUniquelyReferenced_nonNull_native();
              *a1 = v21;
              if ((result & 1) == 0)
              {
                uint64_t result = (uint64_t)sub_1000259A4(v21);
                uint64_t v21 = result;
                *a1 = result;
              }
              if (v8 >= *(void *)(v21 + 16)) {
                goto LABEL_58;
              }
              uint64_t v23 = v21 + 40 * v8 + 32;
              _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v23);
              uint64_t result = sub_100028C4C(v28, v23);
              uint64_t v24 = *a1;
              if (v16 >= *(void *)(*a1 + 16)) {
                goto LABEL_59;
              }
              uint64_t v25 = v24 + v15;
              _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v24 + v15);
              uint64_t result = sub_100028C4C(&v29, v25);
              goto LABEL_44;
            }
LABEL_45:
            unint64_t v27 = v16 + 1;
            if (__OFADD__(v16, 1)) {
              goto LABEL_53;
            }
LABEL_50:
            uint64_t v3 = *a1;
            unint64_t v14 = *(void *)(*a1 + 16);
            ++v16;
            v15 += 40;
            if (v27 == v14) {
              return v8;
            }
            continue;
          }
          swift_bridgeObjectRelease();
LABEL_49:
          uint64_t result = _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v29);
          unint64_t v27 = v16 + 1;
          if (__OFADD__(v16, 1)) {
            goto LABEL_53;
          }
          goto LABEL_50;
        }
        swift_bridgeObjectRelease();
      }
      else if (!a3)
      {
        goto LABEL_49;
      }
      uint64_t result = _s19FamilyControlsAgent18AuthorizationStoreVwxx_0((uint64_t)&v29);
      if (v16 != v8) {
        goto LABEL_36;
      }
LABEL_44:
      if (__OFADD__(v8++, 1)) {
        goto LABEL_54;
      }
      goto LABEL_45;
    }
    break;
  }
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
LABEL_60:
  __break(1u);
  return result;
}

void sub_10005CD70(uint64_t a1, void *a2, char a3)
{
  sub_100059BB4(a1, a2, a3 & 1, v3, "Failed to match activity record: %{public}s");
}

uint64_t sub_10005CD9C()
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005CDE4(uint64_t a1, char a2)
{
  return sub_10005CDFC(a1, a2, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1000593FC);
}

uint64_t sub_10005CDFC(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, void, void, void, void, void))
{
  return a3(a1, a2 & 1, v3[2], v3[3], v3[4], v3[5]);
}

void sub_10005CE14()
{
  sub_100054134(*(void *)(v0 + 16));
}

id sub_10005CE30()
{
  return [*(id *)(v0 + 160) invalidate];
}

void sub_10005CE40()
{
  sub_100055638(v0);
}

uint64_t sub_10005CE48(uint64_t a1, uint64_t a2)
{
  return sub_100055700(a1, a2);
}

uint64_t sub_10005CE50()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005CE88(uint64_t a1, char a2)
{
  return sub_100055784(a1, a2 & 1, *(uint64_t (**)(void))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_10005CE94(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005CEDC(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000BF24(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10005CF2C()
{
  _s19FamilyControlsAgent18AuthorizationStoreVwxx_0(v0 + 16);

  return _swift_deallocObject(v0, 64, 7);
}

void sub_10005CF6C()
{
  sub_10001CF90((void *)(v0 + 16), *(void *)(v0 + 56));
}

uint64_t sub_10005CF78()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10005CFC0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_10003D550;
  return sub_100059F4C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10005D088(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10003D550;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_100074B28 + dword_100074B28);
  return v6(a1, v4);
}

uint64_t NSNotFound.getter()
{
  return NSNotFound.getter();
}

NSDateInterval __swiftcall DateInterval._bridgeToObjectiveC()()
{
  return (NSDateInterval)DateInterval._bridgeToObjectiveC()();
}

uint64_t DateInterval.init(start:end:)()
{
  return DateInterval.init(start:end:)();
}

uint64_t DateInterval.duration.getter()
{
  return DateInterval.duration.getter();
}

uint64_t type metadata accessor for DateInterval()
{
  return type metadata accessor for DateInterval();
}

uint64_t static Notification._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Notification._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Notification.object.getter()
{
  return Notification.object.getter();
}

uint64_t type metadata accessor for Notification()
{
  return type metadata accessor for Notification();
}

uint64_t __DataStorage._bytes.getter()
{
  return __DataStorage._bytes.getter();
}

uint64_t __DataStorage._length.getter()
{
  return __DataStorage._length.getter();
}

uint64_t __DataStorage._offset.getter()
{
  return __DataStorage._offset.getter();
}

uint64_t LocalizedError.helpAnchor.getter()
{
  return LocalizedError.helpAnchor.getter();
}

uint64_t LocalizedError.failureReason.getter()
{
  return LocalizedError.failureReason.getter();
}

uint64_t LocalizedError.recoverySuggestion.getter()
{
  return LocalizedError.recoverySuggestion.getter();
}

uint64_t dispatch thunk of PropertyListDecoder.decode<A>(_:from:)()
{
  return dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
}

uint64_t PropertyListDecoder.init()()
{
  return PropertyListDecoder.init()();
}

uint64_t type metadata accessor for PropertyListDecoder()
{
  return type metadata accessor for PropertyListDecoder();
}

uint64_t dispatch thunk of PropertyListEncoder.outputFormat.setter()
{
  return dispatch thunk of PropertyListEncoder.outputFormat.setter();
}

uint64_t dispatch thunk of PropertyListEncoder.encode<A>(_:)()
{
  return dispatch thunk of PropertyListEncoder.encode<A>(_:)();
}

uint64_t PropertyListEncoder.init()()
{
  return PropertyListEncoder.init()();
}

uint64_t type metadata accessor for PropertyListEncoder()
{
  return type metadata accessor for PropertyListEncoder();
}

uint64_t _BridgedStoredNSError.code.getter()
{
  return _BridgedStoredNSError.code.getter();
}

uint64_t _convertErrorToNSError(_:)()
{
  return _convertErrorToNSError(_:)();
}

uint64_t _convertNSErrorToError(_:)()
{
  return _convertNSErrorToError(_:)();
}

uint64_t type metadata accessor for NSFastEnumerationIterator()
{
  return type metadata accessor for NSFastEnumerationIterator();
}

uint64_t URL.absoluteString.getter()
{
  return URL.absoluteString.getter();
}

void __swiftcall URL._bridgeToObjectiveC()(NSURL *__return_ptr retstr)
{
}

uint64_t URL.deletingLastPathComponent()()
{
  return URL.deletingLastPathComponent()();
}

uint64_t static URL._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static URL._unconditionallyBridgeFromObjectiveC(_:)();
}

Swift::String __swiftcall URL.path(percentEncoded:)(Swift::Bool percentEncoded)
{
  uint64_t v1 = URL.path(percentEncoded:)(percentEncoded);
  result._object = v2;
  result._countAndFlagsBits = v1;
  return result;
}

uint64_t URL.path.getter()
{
  return URL.path.getter();
}

uint64_t URL.init(string:)()
{
  return URL.init(string:)();
}

uint64_t type metadata accessor for URL()
{
  return type metadata accessor for URL();
}

uint64_t Data.init(contentsOf:options:)()
{
  return Data.init(contentsOf:options:)();
}

uint64_t static Data.none.getter()
{
  return static Data.none.getter();
}

NSData __swiftcall Data._bridgeToObjectiveC()()
{
  return (NSData)Data._bridgeToObjectiveC()();
}

uint64_t static Data._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Data._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Data.hash(into:)()
{
  return Data.hash(into:)();
}

uint64_t Data.write(to:options:)()
{
  return Data.write(to:options:)();
}

uint64_t static Date.distantFuture.getter()
{
  return static Date.distantFuture.getter();
}

NSDate __swiftcall Date._bridgeToObjectiveC()()
{
  return (NSDate)Date._bridgeToObjectiveC()();
}

uint64_t static Date.now.getter()
{
  return static Date.now.getter();
}

uint64_t type metadata accessor for Date()
{
  return type metadata accessor for Date();
}

uint64_t UUID.uuidString.getter()
{
  return UUID.uuidString.getter();
}

NSUUID __swiftcall UUID._bridgeToObjectiveC()()
{
  return (NSUUID)UUID._bridgeToObjectiveC()();
}

uint64_t static UUID.== infix(_:_:)()
{
  return static UUID.== infix(_:_:)();
}

uint64_t static UUID._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t UUID.init()()
{
  return UUID.init()();
}

uint64_t type metadata accessor for UUID()
{
  return type metadata accessor for UUID();
}

uint64_t static Locale.autoupdatingCurrent.getter()
{
  return static Locale.autoupdatingCurrent.getter();
}

uint64_t type metadata accessor for Locale()
{
  return type metadata accessor for Locale();
}

uint64_t Calendar.date(byAdding:value:to:wrappingComponents:)()
{
  return Calendar.date(byAdding:value:to:wrappingComponents:)();
}

uint64_t static Calendar.current.getter()
{
  return static Calendar.current.getter();
}

uint64_t type metadata accessor for Calendar.Component()
{
  return type metadata accessor for Calendar.Component();
}

uint64_t type metadata accessor for Calendar()
{
  return type metadata accessor for Calendar();
}

uint64_t dispatch thunk of FamilyMemberable.isMe.getter()
{
  return dispatch thunk of FamilyMemberable.isMe.getter();
}

uint64_t dispatch thunk of FamilyMemberable.altDSID.getter()
{
  return dispatch thunk of FamilyMemberable.altDSID.getter();
}

uint64_t dispatch thunk of FamilyMemberable.appleID.getter()
{
  return dispatch thunk of FamilyMemberable.appleID.getter();
}

uint64_t dispatch thunk of FamilyMemberable.isParent.getter()
{
  return dispatch thunk of FamilyMemberable.isParent.getter();
}

uint64_t dispatch thunk of FamilyCircle.currentMember.getter()
{
  return dispatch thunk of FamilyCircle.currentMember.getter();
}

uint64_t dispatch thunk of FamilyCircle.children.getter()
{
  return dispatch thunk of FamilyCircle.children.getter();
}

uint64_t dispatch thunk of FamilyCircle.guardians.getter()
{
  return dispatch thunk of FamilyCircle.guardians.getter();
}

uint64_t FamilyCircle.init()()
{
  return FamilyCircle.init()();
}

uint64_t type metadata accessor for FamilyCircle()
{
  return type metadata accessor for FamilyCircle();
}

uint64_t FamilyControlsAuthenticationUIService.ServiceType.init(member:)()
{
  return FamilyControlsAuthenticationUIService.ServiceType.init(member:)();
}

uint64_t FamilyControlsAuthenticationUIService.ServiceType.rawValue.getter()
{
  return FamilyControlsAuthenticationUIService.ServiceType.rawValue.getter();
}

uint64_t type metadata accessor for FamilyControlsAuthenticationUIService.ServiceType()
{
  return type metadata accessor for FamilyControlsAuthenticationUIService.ServiceType();
}

uint64_t static FamilyControlsAuthenticationUIService.ServiceTypeKey.getter()
{
  return static FamilyControlsAuthenticationUIService.ServiceTypeKey.getter();
}

uint64_t static FamilyControlsAuthenticationUIService.agentInterface.getter()
{
  return static FamilyControlsAuthenticationUIService.agentInterface.getter();
}

uint64_t static FamilyControlsAuthenticationUIService.ServiceMemberKey.getter()
{
  return static FamilyControlsAuthenticationUIService.ServiceMemberKey.getter();
}

uint64_t static FamilyControlsAuthenticationUIService.ServiceBundleIdentifierKey.getter()
{
  return static FamilyControlsAuthenticationUIService.ServiceBundleIdentifierKey.getter();
}

uint64_t type metadata accessor for FamilyControlsAuthenticationUIService()
{
  return type metadata accessor for FamilyControlsAuthenticationUIService();
}

uint64_t type metadata accessor for FamilyControlsError()
{
  return type metadata accessor for FamilyControlsError();
}

uint64_t FamilyControlsMember.init(rawValue:)()
{
  return FamilyControlsMember.init(rawValue:)();
}

uint64_t FamilyControlsMember.rawValue.getter()
{
  return FamilyControlsMember.rawValue.getter();
}

uint64_t static FamilyControlsService.namePrivate.getter()
{
  return static FamilyControlsService.namePrivate.getter();
}

uint64_t static FamilyControlsService.agentInterface.getter()
{
  return static FamilyControlsService.agentInterface.getter();
}

uint64_t static FamilyControlsService.agentInterfacePrivate.getter()
{
  return static FamilyControlsService.agentInterfacePrivate.getter();
}

uint64_t static FamilyControlsService.name.getter()
{
  return static FamilyControlsService.name.getter();
}

uint64_t static FamilyControlsService.nameAPS.getter()
{
  return static FamilyControlsService.nameAPS.getter();
}

uint64_t static FamilyControlsService.nameIDS.getter()
{
  return static FamilyControlsService.nameIDS.getter();
}

uint64_t dispatch thunk of UsageStore.save(to:)()
{
  return dispatch thunk of UsageStore.save(to:)();
}

uint64_t UsageStore.first(where:)()
{
  return UsageStore.first(where:)();
}

uint64_t static UsageStore.shared.getter()
{
  return static UsageStore.shared.getter();
}

uint64_t UsageStore.contains(where:)()
{
  return UsageStore.contains(where:)();
}

Swift::Void __swiftcall UsageStore.removeAll()()
{
}

uint64_t type metadata accessor for UsageStore()
{
  return type metadata accessor for UsageStore();
}

uint64_t UsageStore.subscript.setter()
{
  return UsageStore.subscript.setter();
}

uint64_t dispatch thunk of AppInfoCache.appInfo(bundleIdentifier:)()
{
  return dispatch thunk of AppInfoCache.appInfo(bundleIdentifier:)();
}

uint64_t static AppInfoCache.shared.getter()
{
  return static AppInfoCache.shared.getter();
}

uint64_t type metadata accessor for AppInfoCache()
{
  return type metadata accessor for AppInfoCache();
}

uint64_t type metadata accessor for AppInfoSource()
{
  return type metadata accessor for AppInfoSource();
}

uint64_t LabelSlotType.rawValue.getter()
{
  return LabelSlotType.rawValue.getter();
}

uint64_t UsageItemRecord.totalUsage.getter()
{
  return UsageItemRecord.totalUsage.getter();
}

uint64_t UsageItemRecord.UsageType.init(rawValue:)()
{
  return UsageItemRecord.UsageType.init(rawValue:)();
}

uint64_t UsageItemRecord.UsageType.rawValue.getter()
{
  return UsageItemRecord.UsageType.rawValue.getter();
}

uint64_t type metadata accessor for UsageItemRecord.UsageType()
{
  return type metadata accessor for UsageItemRecord.UsageType();
}

uint64_t UsageItemRecord.init(identifier:recordName:type:source:category:totalUsage:)()
{
  return UsageItemRecord.init(identifier:recordName:type:source:category:totalUsage:)();
}

uint64_t UsageItemRecord.identifier.getter()
{
  return UsageItemRecord.identifier.getter();
}

uint64_t UsageItemRecord.recordName.getter()
{
  return UsageItemRecord.recordName.getter();
}

uint64_t UsageItemRecord.type.getter()
{
  return UsageItemRecord.type.getter();
}

uint64_t static UsageItemRecord.Source.== infix(_:_:)()
{
  return static UsageItemRecord.Source.== infix(_:_:)();
}

uint64_t type metadata accessor for UsageItemRecord.Source()
{
  return type metadata accessor for UsageItemRecord.Source();
}

uint64_t UsageItemRecord.source.getter()
{
  return UsageItemRecord.source.getter();
}

uint64_t UsageItemRecord.category.getter()
{
  return UsageItemRecord.category.getter();
}

uint64_t type metadata accessor for UsageItemRecord()
{
  return type metadata accessor for UsageItemRecord();
}

uint64_t AuthorizationRecord.teamIdentifier.getter()
{
  return AuthorizationRecord.teamIdentifier.getter();
}

uint64_t AuthorizationRecord.init(bundleIdentifier:teamIdentifier:recordIdentifier:status:type:)()
{
  return AuthorizationRecord.init(bundleIdentifier:teamIdentifier:recordIdentifier:status:type:)();
}

uint64_t AuthorizationRecord.bundleIdentifier.getter()
{
  return AuthorizationRecord.bundleIdentifier.getter();
}

uint64_t AuthorizationRecord.recordIdentifier.getter()
{
  return AuthorizationRecord.recordIdentifier.getter();
}

uint64_t AuthorizationRecord.type.getter()
{
  return AuthorizationRecord.type.getter();
}

uint64_t AuthorizationRecord.status.getter()
{
  return AuthorizationRecord.status.getter();
}

uint64_t type metadata accessor for AuthorizationRecord()
{
  return type metadata accessor for AuthorizationRecord();
}

uint64_t AuthorizationStatus.init(rawValue:)()
{
  return AuthorizationStatus.init(rawValue:)();
}

uint64_t AuthorizationStatus.rawValue.getter()
{
  return AuthorizationStatus.rawValue.getter();
}

uint64_t type metadata accessor for AuthorizationStatus()
{
  return type metadata accessor for AuthorizationStatus();
}

uint64_t dispatch thunk of AppInfo.artworkURL.getter()
{
  return dispatch thunk of AppInfo.artworkURL.getter();
}

uint64_t dispatch thunk of AppInfo.displayName.getter()
{
  return dispatch thunk of AppInfo.displayName.getter();
}

uint64_t dispatch thunk of AppInfo.source.getter()
{
  return dispatch thunk of AppInfo.source.getter();
}

uint64_t static Feature.isAuthorizationEnabled.getter()
{
  return static Feature.isAuthorizationEnabled.getter();
}

uint64_t dispatch thunk of Locatable.familyControlsAuthorization.getter()
{
  return dispatch thunk of Locatable.familyControlsAuthorization.getter();
}

uint64_t dispatch thunk of Locatable.familyControlsInternalAuthorization.getter()
{
  return dispatch thunk of Locatable.familyControlsInternalAuthorization.getter();
}

uint64_t dispatch thunk of Locatable.familyControlsKeyData.getter()
{
  return dispatch thunk of Locatable.familyControlsKeyData.getter();
}

uint64_t Locations.init(useExplicitLocations:)()
{
  return Locations.init(useExplicitLocations:)();
}

uint64_t Locations.familyControlsSharedSyncMetadata.getter()
{
  return Locations.familyControlsSharedSyncMetadata.getter();
}

uint64_t Locations.familyControlsPrivateSyncMetadata.getter()
{
  return Locations.familyControlsPrivateSyncMetadata.getter();
}

uint64_t Locations.familyControlsSharedSyncSerialization.getter()
{
  return Locations.familyControlsSharedSyncSerialization.getter();
}

uint64_t Locations.familyControlsPrivateSyncSerialization.getter()
{
  return Locations.familyControlsPrivateSyncSerialization.getter();
}

uint64_t Locations.familyControlsStore.getter()
{
  return Locations.familyControlsStore.getter();
}

uint64_t type metadata accessor for Locations()
{
  return type metadata accessor for Locations();
}

uint64_t Application.bundleIdentifier.getter()
{
  return Application.bundleIdentifier.getter();
}

uint64_t static Application.== infix(_:_:)()
{
  return static Application.== infix(_:_:)();
}

uint64_t static Application.none.getter()
{
  return static Application.none.getter();
}

uint64_t type metadata accessor for Application()
{
  return type metadata accessor for Application();
}

uint64_t Token.init(data:)()
{
  return Token.init(data:)();
}

uint64_t KeyGenerator.generateKeyData()()
{
  return KeyGenerator.generateKeyData()();
}

uint64_t KeyGenerator.init()()
{
  return KeyGenerator.init()();
}

uint64_t type metadata accessor for KeyGenerator()
{
  return type metadata accessor for KeyGenerator();
}

uint64_t KeyRetriever.init()()
{
  return KeyRetriever.init()();
}

uint64_t type metadata accessor for KeyRetriever()
{
  return type metadata accessor for KeyRetriever();
}

uint64_t TokenDecoder.init(teamIdentifier:keyRetriever:)()
{
  return TokenDecoder.init(teamIdentifier:keyRetriever:)();
}

uint64_t dispatch thunk of TokenDecoder.decode(bundleIdentifierToken:)()
{
  return dispatch thunk of TokenDecoder.decode(bundleIdentifierToken:)();
}

uint64_t dispatch thunk of TokenDecoder.decode(categoryIdentifierToken:)()
{
  return dispatch thunk of TokenDecoder.decode(categoryIdentifierToken:)();
}

uint64_t dispatch thunk of TokenDecoder.decode(webDomainToken:)()
{
  return dispatch thunk of TokenDecoder.decode(webDomainToken:)();
}

uint64_t type metadata accessor for TokenDecoder()
{
  return type metadata accessor for TokenDecoder();
}

uint64_t static TeamIdentifierRetriever.teamIdentifier(from:)()
{
  return static TeamIdentifierRetriever.teamIdentifier(from:)();
}

uint64_t static Logger.syncEngine.getter()
{
  return static Logger.syncEngine.getter();
}

uint64_t static Logger.permissions.getter()
{
  return static Logger.permissions.getter();
}

uint64_t static Logger.activityItem.getter()
{
  return static Logger.activityItem.getter();
}

uint64_t static Logger.authorization.getter()
{
  return static Logger.authorization.getter();
}

uint64_t static Logger.activityPicker.getter()
{
  return static Logger.activityPicker.getter();
}

uint64_t static Logger.authentication.getter()
{
  return static Logger.authentication.getter();
}

uint64_t static Logger.agent.getter()
{
  return static Logger.agent.getter();
}

uint64_t static Logger.usage.getter()
{
  return static Logger.usage.getter();
}

uint64_t Logger.logObject.getter()
{
  return Logger.logObject.getter();
}

uint64_t type metadata accessor for Logger()
{
  return type metadata accessor for Logger();
}

uint64_t errno.getter()
{
  return errno.getter();
}

uint64_t ObservableObject<>.objectWillChange.getter()
{
  return ObservableObject<>.objectWillChange.getter();
}

uint64_t Published.init(initialValue:)()
{
  return Published.init(initialValue:)();
}

uint64_t static Published.subscript.getter()
{
  return static Published.subscript.getter();
}

uint64_t static Published.subscript.setter()
{
  return static Published.subscript.setter();
}

uint64_t type metadata accessor for Published()
{
  return type metadata accessor for Published();
}

uint64_t EnvironmentValues.displayScale.getter()
{
  return EnvironmentValues.displayScale.getter();
}

uint64_t EnvironmentValues.displayScale.setter()
{
  return EnvironmentValues.displayScale.setter();
}

uint64_t EnvironmentValues.init()()
{
  return EnvironmentValues.init()();
}

uint64_t type metadata accessor for EnvironmentValues()
{
  return type metadata accessor for EnvironmentValues();
}

uint64_t static Log.runtimeIssuesLog.getter()
{
  return static Log.runtimeIssuesLog.getter();
}

uint64_t CKSyncEngine.Configuration.apsMachServiceName.setter()
{
  return CKSyncEngine.Configuration.apsMachServiceName.setter();
}

uint64_t CKSyncEngine.Configuration.init(database:stateSerialization:delegate:)()
{
  return CKSyncEngine.Configuration.init(database:stateSerialization:delegate:)();
}

uint64_t type metadata accessor for CKSyncEngine.Configuration()
{
  return type metadata accessor for CKSyncEngine.Configuration();
}

uint64_t CKSyncEngine.SendChangesContext.options.getter()
{
  return CKSyncEngine.SendChangesContext.options.getter();
}

uint64_t CKSyncEngine.SendChangesOptions.Scope.contains(_:)()
{
  return CKSyncEngine.SendChangesOptions.Scope.contains(_:)();
}

uint64_t type metadata accessor for CKSyncEngine.SendChangesOptions.Scope()
{
  return type metadata accessor for CKSyncEngine.SendChangesOptions.Scope();
}

uint64_t CKSyncEngine.SendChangesOptions.scope.getter()
{
  return CKSyncEngine.SendChangesOptions.scope.getter();
}

uint64_t type metadata accessor for CKSyncEngine.SendChangesOptions()
{
  return type metadata accessor for CKSyncEngine.SendChangesOptions();
}

uint64_t type metadata accessor for CKSyncEngine.FetchChangesOptions.Scope()
{
  return type metadata accessor for CKSyncEngine.FetchChangesOptions.Scope();
}

uint64_t CKSyncEngine.FetchChangesOptions.init(scope:operationGroup:)()
{
  return CKSyncEngine.FetchChangesOptions.init(scope:operationGroup:)();
}

uint64_t type metadata accessor for CKSyncEngine.FetchChangesOptions()
{
  return type metadata accessor for CKSyncEngine.FetchChangesOptions();
}

uint64_t type metadata accessor for CKSyncEngine.PendingDatabaseChange()
{
  return type metadata accessor for CKSyncEngine.PendingDatabaseChange();
}

uint64_t CKSyncEngine.RecordZoneChangeBatch.init(pendingChanges:synchronousRecordProvider:)()
{
  return CKSyncEngine.RecordZoneChangeBatch.init(pendingChanges:synchronousRecordProvider:)();
}

uint64_t type metadata accessor for CKSyncEngine.PendingRecordZoneChange()
{
  return type metadata accessor for CKSyncEngine.PendingRecordZoneChange();
}

uint64_t CKSyncEngine.Event.StateUpdate.stateSerialization.getter()
{
  return CKSyncEngine.Event.StateUpdate.stateSerialization.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.StateUpdate()
{
  return type metadata accessor for CKSyncEngine.Event.StateUpdate();
}

uint64_t CKSyncEngine.Event.SentDatabaseChanges.savedZones.getter()
{
  return CKSyncEngine.Event.SentDatabaseChanges.savedZones.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges()
{
  return type metadata accessor for CKSyncEngine.Event.SentDatabaseChanges();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.error.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.error.getter();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.record.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave.record.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave()
{
  return type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges.FailedRecordSave();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.failedRecordSaves.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.failedRecordSaves.getter();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.failedRecordDeletes.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.failedRecordDeletes.getter();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.deletedRecordIDs.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.deletedRecordIDs.getter();
}

uint64_t CKSyncEngine.Event.SentRecordZoneChanges.savedRecords.getter()
{
  return CKSyncEngine.Event.SentRecordZoneChanges.savedRecords.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges()
{
  return type metadata accessor for CKSyncEngine.Event.SentRecordZoneChanges();
}

uint64_t CKSyncEngine.Event.FetchedDatabaseChanges.deletions.getter()
{
  return CKSyncEngine.Event.FetchedDatabaseChanges.deletions.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.FetchedDatabaseChanges()
{
  return type metadata accessor for CKSyncEngine.Event.FetchedDatabaseChanges();
}

uint64_t CKSyncEngine.Event.FetchedRecordZoneChanges.modifications.getter()
{
  return CKSyncEngine.Event.FetchedRecordZoneChanges.modifications.getter();
}

uint64_t CKSyncEngine.Event.FetchedRecordZoneChanges.deletions.getter()
{
  return CKSyncEngine.Event.FetchedRecordZoneChanges.deletions.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.FetchedRecordZoneChanges()
{
  return type metadata accessor for CKSyncEngine.Event.FetchedRecordZoneChanges();
}

uint64_t CKSyncEngine.Event.DidFetchRecordZoneChanges.zoneID.getter()
{
  return CKSyncEngine.Event.DidFetchRecordZoneChanges.zoneID.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.DidFetchRecordZoneChanges()
{
  return type metadata accessor for CKSyncEngine.Event.DidFetchRecordZoneChanges();
}

uint64_t CKSyncEngine.Event.WillFetchRecordZoneChanges.zoneID.getter()
{
  return CKSyncEngine.Event.WillFetchRecordZoneChanges.zoneID.getter();
}

uint64_t type metadata accessor for CKSyncEngine.Event.WillFetchRecordZoneChanges()
{
  return type metadata accessor for CKSyncEngine.Event.WillFetchRecordZoneChanges();
}

uint64_t type metadata accessor for CKSyncEngine.Event()
{
  return type metadata accessor for CKSyncEngine.Event();
}

uint64_t CKSyncEngine.State.Serialization.init(deprecatedData:)()
{
  return CKSyncEngine.State.Serialization.init(deprecatedData:)();
}

uint64_t type metadata accessor for CKSyncEngine.State.Serialization()
{
  return type metadata accessor for CKSyncEngine.State.Serialization();
}

uint64_t CKSyncEngine.State.pendingRecordZoneChanges.getter()
{
  return CKSyncEngine.State.pendingRecordZoneChanges.getter();
}

Swift::Void __swiftcall CKSyncEngine.State.add(pendingDatabaseChanges:)(Swift::OpaquePointer pendingDatabaseChanges)
{
}

Swift::Void __swiftcall CKSyncEngine.State.add(pendingRecordZoneChanges:)(Swift::OpaquePointer pendingRecordZoneChanges)
{
}

uint64_t CKSyncEngine.state.getter()
{
  return CKSyncEngine.state.getter();
}

uint64_t CKSyncEngine.database.getter()
{
  return CKSyncEngine.database.getter();
}

uint64_t type metadata accessor for CKSyncEngine()
{
  return type metadata accessor for CKSyncEngine();
}

uint64_t CKSyncEngine.init(_:)()
{
  return CKSyncEngine.init(_:)();
}

uint64_t type metadata accessor for DispatchWorkItemFlags()
{
  return type metadata accessor for DispatchWorkItemFlags();
}

uint64_t type metadata accessor for DispatchQoS.QoSClass()
{
  return type metadata accessor for DispatchQoS.QoSClass();
}

uint64_t static DispatchQoS.unspecified.getter()
{
  return static DispatchQoS.unspecified.getter();
}

uint64_t type metadata accessor for DispatchQoS()
{
  return type metadata accessor for DispatchQoS();
}

uint64_t related decl 'e' for CKErrorCode.clientRecord.getter()
{
  return related decl 'e' for CKErrorCode.clientRecord.getter();
}

uint64_t related decl 'e' for CKErrorCode.serverRecord.getter()
{
  return related decl 'e' for CKErrorCode.serverRecord.getter();
}

NSDictionary __swiftcall Dictionary._bridgeToObjectiveC()()
{
  return (NSDictionary)Dictionary._bridgeToObjectiveC()();
}

uint64_t static Dictionary._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t dispatch thunk of Hashable._rawHashValue(seed:)()
{
  return dispatch thunk of Hashable._rawHashValue(seed:)();
}

uint64_t dispatch thunk of Hashable.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t dispatch thunk of static Equatable.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)();
}

NSString __swiftcall String._bridgeToObjectiveC()()
{
  return (NSString)String._bridgeToObjectiveC()();
}

uint64_t static String._forceBridgeFromObjectiveC(_:result:)()
{
  return static String._forceBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._conditionallyBridgeFromObjectiveC(_:result:)()
{
  return static String._conditionallyBridgeFromObjectiveC(_:result:)();
}

uint64_t static String._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t String.init(format:locale:arguments:)()
{
  return String.init(format:locale:arguments:)();
}

uint64_t String.init<A>(describing:)()
{
  return String.init<A>(describing:)();
}

uint64_t String.hash(into:)()
{
  return String.hash(into:)();
}

Swift::Void __swiftcall String.append(_:)(Swift::String a1)
{
}

uint64_t String.init(cString:)()
{
  return String.init(cString:)();
}

Swift::Int __swiftcall String.UTF8View._foreignCount()()
{
  return String.UTF8View._foreignCount()();
}

Swift::Bool __swiftcall String.hasPrefix(_:)(Swift::String a1)
{
  return String.hasPrefix(_:)(a1._countAndFlagsBits, a1._object);
}

uint64_t dispatch thunk of RawRepresentable.rawValue.getter()
{
  return dispatch thunk of RawRepresentable.rawValue.getter();
}

uint64_t specialized Array._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
}

NSArray __swiftcall Array._bridgeToObjectiveC()()
{
  return (NSArray)Array._bridgeToObjectiveC()();
}

uint64_t static Array._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Array.description.getter()
{
  return Array.description.getter();
}

uint64_t specialized Array._endMutation()()
{
  return specialized Array._endMutation()();
}

uint64_t specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t dispatch thunk of Actor.unownedExecutor.getter()
{
  return dispatch thunk of Actor.unownedExecutor.getter();
}

uint64_t TaskPriority.rawValue.getter()
{
  return TaskPriority.rawValue.getter();
}

uint64_t type metadata accessor for TaskPriority()
{
  return type metadata accessor for TaskPriority();
}

NSSet __swiftcall Set._bridgeToObjectiveC()()
{
  return (NSSet)Set._bridgeToObjectiveC()();
}

uint64_t static Set._unconditionallyBridgeFromObjectiveC(_:)()
{
  return static Set._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t Set.description.getter()
{
  return Set.description.getter();
}

uint64_t Set.Iterator.init(_cocoa:)()
{
  return Set.Iterator.init(_cocoa:)();
}

uint64_t dispatch thunk of Collection.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t dispatch thunk of Collection.distance(from:to:)()
{
  return dispatch thunk of Collection.distance(from:to:)();
}

uint64_t dispatch thunk of Collection.endIndex.getter()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t CKDatabase.DatabaseChange.Deletion.zoneID.getter()
{
  return CKDatabase.DatabaseChange.Deletion.zoneID.getter();
}

uint64_t type metadata accessor for CKDatabase.DatabaseChange.Deletion()
{
  return type metadata accessor for CKDatabase.DatabaseChange.Deletion();
}

uint64_t CKDatabase.RecordZoneChange.Modification.record.getter()
{
  return CKDatabase.RecordZoneChange.Modification.record.getter();
}

uint64_t type metadata accessor for CKDatabase.RecordZoneChange.Modification()
{
  return type metadata accessor for CKDatabase.RecordZoneChange.Modification();
}

uint64_t CKDatabase.RecordZoneChange.Deletion.recordType.getter()
{
  return CKDatabase.RecordZoneChange.Deletion.recordType.getter();
}

uint64_t CKDatabase.RecordZoneChange.Deletion.recordID.getter()
{
  return CKDatabase.RecordZoneChange.Deletion.recordID.getter();
}

uint64_t type metadata accessor for CKDatabase.RecordZoneChange.Deletion()
{
  return type metadata accessor for CKDatabase.RecordZoneChange.Deletion();
}

CKRecordID __swiftcall CKRecordID.init(recordName:zoneID:)(Swift::String recordName, CKRecordZoneID zoneID)
{
  return (CKRecordID)CKRecordID.init(recordName:zoneID:)(recordName._countAndFlagsBits, recordName._object, zoneID.super.isa);
}

uint64_t NSEnumerator.makeIterator()()
{
  return NSEnumerator.makeIterator()();
}

uint64_t static os_log_type_t.debug.getter()
{
  return static os_log_type_t.debug.getter();
}

uint64_t static os_log_type_t.error.getter()
{
  return static os_log_type_t.error.getter();
}

uint64_t static os_log_type_t.fault.getter()
{
  return static os_log_type_t.fault.getter();
}

uint64_t static os_log_type_t.default.getter()
{
  return static os_log_type_t.default.getter();
}

CKRecordZoneID __swiftcall CKRecordZoneID.init(zoneName:ownerName:)(Swift::String zoneName, Swift::String ownerName)
{
  return (CKRecordZoneID)CKRecordZoneID.init(zoneName:ownerName:)(zoneName._countAndFlagsBits, zoneName._object, ownerName._countAndFlagsBits, ownerName._object);
}

uint64_t CKQueryOperation.queryResultBlock.setter()
{
  return CKQueryOperation.queryResultBlock.setter();
}

uint64_t CKQueryOperation.recordMatchedBlock.setter()
{
  return CKQueryOperation.recordMatchedBlock.setter();
}

uint64_t OS_dispatch_group.notify(qos:flags:queue:execute:)()
{
  return OS_dispatch_group.notify(qos:flags:queue:execute:)();
}

uint64_t type metadata accessor for OS_dispatch_queue.Attributes()
{
  return type metadata accessor for OS_dispatch_queue.Attributes();
}

uint64_t type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency()
{
  return type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
}

uint64_t static OS_dispatch_queue.main.getter()
{
  return static OS_dispatch_queue.main.getter();
}

uint64_t OS_dispatch_queue.async(group:qos:flags:execute:)()
{
  return OS_dispatch_queue.async(group:qos:flags:execute:)();
}

uint64_t OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)()
{
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
}

uint64_t static OS_dispatch_queue.global(qos:)()
{
  return static OS_dispatch_queue.global(qos:)();
}

uint64_t CKAcceptSharesOperation.acceptSharesResultBlock.setter()
{
  return CKAcceptSharesOperation.acceptSharesResultBlock.setter();
}

uint64_t CKRecordKeyValueSetting.subscript.setter()
{
  return CKRecordKeyValueSetting.subscript.setter();
}

uint64_t CKModifyRecordsOperation.perRecordSaveBlock.setter()
{
  return CKModifyRecordsOperation.perRecordSaveBlock.setter();
}

uint64_t CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter()
{
  return CKFetchRecordZonesOperation.perRecordZoneResultBlock.setter();
}

uint64_t CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter()
{
  return CKFetchRecordZonesOperation.fetchRecordZonesResultBlock.setter();
}

uint64_t CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter()
{
  return CKFetchShareMetadataOperation.perShareMetadataResultBlock.setter();
}

CKQuery __swiftcall CKQuery.init(recordType:predicate:)(Swift::String recordType, NSPredicate *predicate)
{
  return (CKQuery)CKQuery.init(recordType:predicate:)(recordType._countAndFlagsBits, recordType._object, predicate);
}

UIImage __swiftcall UIImage.init(imageLiteralResourceName:)(Swift::String imageLiteralResourceName)
{
  return (UIImage)UIImage.init(imageLiteralResourceName:)(imageLiteralResourceName._countAndFlagsBits, imageLiteralResourceName._object);
}

CKRecord __swiftcall CKRecord.init(recordType:recordID:)(Swift::String recordType, CKRecordID recordID)
{
  return (CKRecord)CKRecord.init(recordType:recordID:)(recordType._countAndFlagsBits, recordType._object, recordID.super.isa);
}

NSNumber __swiftcall NSNumber.init(BOOLeanLiteral:)(Swift::Bool BOOLeanLiteral)
{
  return (NSNumber)NSNumber.init(BOOLeanLiteral:)(BOOLeanLiteral);
}

Swift::Int __swiftcall NSObject._rawHashValue(seed:)(Swift::Int seed)
{
  return NSObject._rawHashValue(seed:)(seed);
}

uint64_t static NSObject.== infix(_:_:)()
{
  return static NSObject.== infix(_:_:)();
}

uint64_t NSObject.hashValue.getter()
{
  return NSObject.hashValue.getter();
}

uint64_t type metadata accessor for Optional()
{
  return type metadata accessor for Optional();
}

uint64_t dispatch thunk of IteratorProtocol.next()()
{
  return dispatch thunk of IteratorProtocol.next()();
}

uint64_t UnsafeMutableRawBufferPointer.copyMemory(from:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t UnsafeMutableRawBufferPointer.subscript.setter()
{
  return UnsafeMutableRawBufferPointer.subscript.setter();
}

uint64_t _bridgeAnyObjectToAny(_:)()
{
  return _bridgeAnyObjectToAny(_:)();
}

uint64_t dispatch thunk of SetAlgebra.init<A>(_:)()
{
  return dispatch thunk of SetAlgebra.init<A>(_:)();
}

uint64_t _HashTable.nextHole(atOrAfter:)()
{
  return _HashTable.nextHole(atOrAfter:)();
}

uint64_t __CocoaSet.makeIterator()()
{
  return __CocoaSet.makeIterator()();
}

uint64_t __CocoaSet.count.getter()
{
  return __CocoaSet.count.getter();
}

uint64_t __CocoaSet.member(for:)()
{
  return __CocoaSet.member(for:)();
}

uint64_t __CocoaSet.Iterator.next()()
{
  return __CocoaSet.Iterator.next()();
}

uint64_t __CocoaSet.contains(_:)()
{
  return __CocoaSet.contains(_:)();
}

NSObject __swiftcall AnyHashable._bridgeToObjectiveC()()
{
  return (NSObject)AnyHashable._bridgeToObjectiveC()();
}

Swift::Int __swiftcall AnyHashable._rawHashValue(seed:)(Swift::Int seed)
{
  return AnyHashable._rawHashValue(seed:)(seed);
}

uint64_t static AnyHashable.== infix(_:_:)()
{
  return static AnyHashable.== infix(_:_:)();
}

uint64_t static _SetStorage.copy(original:)()
{
  return static _SetStorage.copy(original:)();
}

uint64_t static _SetStorage.resize(original:capacity:move:)()
{
  return static _SetStorage.resize(original:capacity:move:)();
}

uint64_t static _SetStorage.convert(_:capacity:)()
{
  return static _SetStorage.convert(_:capacity:)();
}

uint64_t static _SetStorage.allocate(capacity:)()
{
  return static _SetStorage.allocate(capacity:)();
}

uint64_t _StringGuts._slowWithCString<A>(_:)()
{
  return _StringGuts._slowWithCString<A>(_:)();
}

Swift::Void __swiftcall _StringGuts.grow(_:)(Swift::Int a1)
{
}

uint64_t _StringGuts.copyUTF8(into:)()
{
  return _StringGuts.copyUTF8(into:)();
}

uint64_t specialized _ArrayBuffer._getElementSlowPath(_:)()
{
  return specialized _ArrayBuffer._getElementSlowPath(_:)();
}

uint64_t _StringObject.sharedUTF8.getter()
{
  return _StringObject.sharedUTF8.getter();
}

uint64_t specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  return specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
}

uint64_t specialized ContiguousArray._endMutation()()
{
  return specialized ContiguousArray._endMutation()();
}

uint64_t specialized ContiguousArray.reserveCapacity(_:)()
{
  return specialized ContiguousArray.reserveCapacity(_:)();
}

uint64_t specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
}

uint64_t __CocoaDictionary.makeIterator()()
{
  return __CocoaDictionary.makeIterator()();
}

uint64_t __CocoaDictionary.Iterator.next()()
{
  return __CocoaDictionary.Iterator.next()();
}

uint64_t _assertionFailure(_:_:file:line:flags:)()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t _CocoaArrayWrapper.endIndex.getter()
{
  return _CocoaArrayWrapper.endIndex.getter();
}

uint64_t static _DictionaryStorage.copy(original:)()
{
  return static _DictionaryStorage.copy(original:)();
}

uint64_t static _DictionaryStorage.resize(original:capacity:move:)()
{
  return static _DictionaryStorage.resize(original:capacity:move:)();
}

uint64_t static _DictionaryStorage.allocate(capacity:)()
{
  return static _DictionaryStorage.allocate(capacity:)();
}

uint64_t _fatalErrorMessage(_:_:file:line:flags:)()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

Swift::Int __swiftcall _findStringSwitchCase(cases:string:)(Swift::OpaquePointer cases, Swift::String string)
{
  return _findStringSwitchCase(cases:string:)(cases._rawValue, string._countAndFlagsBits, string._object);
}

uint64_t dispatch thunk of CustomStringConvertible.description.getter()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t _getErrorEmbeddedNSError<A>(_:)()
{
  return _getErrorEmbeddedNSError<A>(_:)();
}

uint64_t _stringCompareWithSmolCheck(_:_:expecting:)()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)()
{
  return _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
}

uint64_t ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)()
{
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t Error.localizedDescription.getter()
{
  return Error.localizedDescription.getter();
}

uint64_t Error._getEmbeddedNSError()()
{
  return Error._getEmbeddedNSError()();
}

uint64_t Error._code.getter()
{
  return Error._code.getter();
}

uint64_t Error._domain.getter()
{
  return Error._domain.getter();
}

uint64_t Error._userInfo.getter()
{
  return Error._userInfo.getter();
}

uint64_t Hasher.init(_seed:)()
{
  return Hasher.init(_seed:)();
}

Swift::Void __swiftcall Hasher._combine(_:)(Swift::UInt a1)
{
}

Swift::Int __swiftcall Hasher.finalize()()
{
  return Hasher.finalize()();
}

Swift::Int __swiftcall Hasher._finalize()()
{
  return Hasher._finalize()();
}

uint64_t Hasher.init()()
{
  return Hasher.init()();
}

CTFontRef CTFontCreateUIFontForLanguage(CTFontUIFontType uiType, CGFloat size, CFStringRef language)
{
  return _CTFontCreateUIFontForLanguage(uiType, size, language);
}

uint64_t IDSCopyIDForEmailAddress()
{
  return _IDSCopyIDForEmailAddress();
}

CFStringRef SecTaskCopySigningIdentifier(SecTaskRef task, CFErrorRef *error)
{
  return _SecTaskCopySigningIdentifier(task, error);
}

CFTypeRef SecTaskCopyValueForEntitlement(SecTaskRef task, CFStringRef entitlement, CFErrorRef *error)
{
  return _SecTaskCopyValueForEntitlement(task, entitlement, error);
}

SecTaskRef SecTaskCreateWithAuditToken(CFAllocatorRef allocator, audit_token_t *token)
{
  return _SecTaskCreateWithAuditToken(allocator, token);
}

void *__cdecl _Block_copy(const void *aBlock)
{
  return __Block_copy(aBlock);
}

void _Block_release(const void *aBlock)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t _set_user_dir_suffix()
{
  return __set_user_dir_suffix();
}

uint64_t _swift_stdlib_reportUnimplementedInitializer()
{
  return __swift_stdlib_reportUnimplementedInitializer();
}

void bzero(void *a1, size_t a2)
{
}

dispatch_group_t dispatch_group_create(void)
{
  return _dispatch_group_create();
}

void dispatch_group_enter(dispatch_group_t group)
{
}

void dispatch_group_leave(dispatch_group_t group)
{
}

void dispatch_main(void)
{
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

void exit(int a1)
{
}

void free(void *a1)
{
}

void *__cdecl malloc(size_t __size)
{
  return _malloc(__size);
}

size_t malloc_size(const void *ptr)
{
  return _malloc_size(ptr);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return _memcmp(__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return _memcpy(__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return _memmove(__dst, __src, __len);
}

id objc_allocWithZone(Class a1)
{
  return _objc_allocWithZone(a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return _objc_autoreleaseReturnValue(a1);
}

id objc_msgSend(id a1, SEL a2, ...)
{
  return _[a1 a2];
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return _objc_msgSendSuper2(a1, a2);
}

uint64_t self
{
  return _self;
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return _objc_retain(a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return _a1;
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return _os_log_type_enabled(oslog, type);
}

uint64_t os_variant_allows_internal_security_policies()
{
  return _os_variant_allows_internal_security_policies();
}

uint64_t swift_allocBox()
{
  return _swift_allocBox();
}

uint64_t swift_allocError()
{
  return _swift_allocError();
}

uint64_t swift_allocObject()
{
  return _swift_allocObject();
}

uint64_t swift_arrayDestroy()
{
  return _swift_arrayDestroy();
}

uint64_t swift_arrayInitWithCopy()
{
  return _swift_arrayInitWithCopy();
}

uint64_t swift_arrayInitWithTakeBackToFront()
{
  return _swift_arrayInitWithTakeBackToFront();
}

uint64_t swift_arrayInitWithTakeFrontToBack()
{
  return _swift_arrayInitWithTakeFrontToBack();
}

uint64_t swift_beginAccess()
{
  return _swift_beginAccess();
}

uint64_t swift_bridgeObjectRelease()
{
  return _swift_bridgeObjectRelease();
}

uint64_t swift_bridgeObjectRelease_n()
{
  return _swift_bridgeObjectRelease_n();
}

uint64_t swift_bridgeObjectRetain()
{
  return _swift_bridgeObjectRetain();
}

uint64_t swift_bridgeObjectRetain_n()
{
  return _swift_bridgeObjectRetain_n();
}

uint64_t swift_dynamicCast()
{
  return _swift_dynamicCast();
}

uint64_t swift_dynamicCastClass()
{
  return _swift_dynamicCastClass();
}

uint64_t swift_dynamicCastObjCClass()
{
  return _swift_dynamicCastObjCClass();
}

uint64_t swift_endAccess()
{
  return _swift_endAccess();
}

uint64_t swift_errorRelease()
{
  return _swift_errorRelease();
}

uint64_t swift_errorRetain()
{
  return _swift_errorRetain();
}

uint64_t swift_getAssociatedConformanceWitness()
{
  return _swift_getAssociatedConformanceWitness();
}

uint64_t swift_getAssociatedTypeWitness()
{
  return _swift_getAssociatedTypeWitness();
}

uint64_t swift_getAtKeyPath()
{
  return _swift_getAtKeyPath();
}

uint64_t swift_getEnumCaseMultiPayload()
{
  return _swift_getEnumCaseMultiPayload();
}

uint64_t swift_getErrorValue()
{
  return _swift_getErrorValue();
}

uint64_t swift_getForeignTypeMetadata()
{
  return _swift_getForeignTypeMetadata();
}

uint64_t swift_getKeyPath()
{
  return _swift_getKeyPath();
}

uint64_t swift_getObjCClassFromMetadata()
{
  return _swift_getObjCClassFromMetadata();
}

uint64_t swift_getObjCClassMetadata()
{
  return _swift_getObjCClassMetadata();
}

uint64_t swift_getObjectType()
{
  return _swift_getObjectType();
}

uint64_t swift_getSingletonMetadata()
{
  return _swift_getSingletonMetadata();
}

uint64_t swift_getTypeByMangledNameInContext2()
{
  return _swift_getTypeByMangledNameInContext2();
}

uint64_t swift_getTypeByMangledNameInContextInMetadataState2()
{
  return _swift_getTypeByMangledNameInContextInMetadataState2();
}

uint64_t swift_getWitnessTable()
{
  return _swift_getWitnessTable();
}

uint64_t swift_initStackObject()
{
  return _swift_initStackObject();
}

uint64_t swift_isEscapingClosureAtFileLocation()
{
  return _swift_isEscapingClosureAtFileLocation();
}

uint64_t swift_isUniquelyReferenced_nonNull_native()
{
  return _swift_isUniquelyReferenced_nonNull_native();
}

uint64_t swift_makeBoxUnique()
{
  return _swift_makeBoxUnique();
}

uint64_t swift_once()
{
  return _swift_once();
}

uint64_t swift_projectBox()
{
  return _swift_projectBox();
}

uint64_t swift_release()
{
  return _swift_release();
}

uint64_t swift_release_n()
{
  return _swift_release_n();
}

uint64_t swift_retain()
{
  return _swift_retain();
}

uint64_t swift_retain_n()
{
  return _swift_retain_n();
}

uint64_t swift_slowAlloc()
{
  return _swift_slowAlloc();
}

uint64_t swift_slowDealloc()
{
  return _swift_slowDealloc();
}

uint64_t swift_stdlib_isStackAllocationSafe()
{
  return _swift_stdlib_isStackAllocationSafe();
}

uint64_t swift_storeEnumTagMultiPayload()
{
  return _swift_storeEnumTagMultiPayload();
}

uint64_t swift_task_alloc()
{
  return _swift_task_alloc();
}

uint64_t swift_task_create()
{
  return _swift_task_create();
}

uint64_t swift_task_dealloc()
{
  return _swift_task_dealloc();
}

uint64_t swift_unknownObjectRelease()
{
  return _swift_unknownObjectRelease();
}

uint64_t swift_unknownObjectRetain()
{
  return _swift_unknownObjectRetain();
}

uint64_t swift_updateClassMetadata2()
{
  return _swift_updateClassMetadata2();
}

uint64_t swift_weakDestroy()
{
  return _swift_weakDestroy();
}

uint64_t swift_weakInit()
{
  return _swift_weakInit();
}

uint64_t swift_weakLoadStrong()
{
  return _swift_weakLoadStrong();
}

uint64_t swift_willThrow()
{
  return _swift_willThrow();
}

BOOL xpc_array_apply(xpc_object_t xarray, xpc_array_applier_t applier)
{
  return _xpc_array_apply(xarray, applier);
}

xpc_object_t xpc_dictionary_get_array(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_array(xdict, key);
}

BOOL xpc_dictionary_get_BOOL(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_BOOL(xdict, key);
}

xpc_object_t xpc_dictionary_get_dictionary(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_dictionary(xdict, key);
}

const char *__cdecl xpc_dictionary_get_string(xpc_object_t xdict, const char *key)
{
  return _xpc_dictionary_get_string(xdict, key);
}

void xpc_set_event_stream_handler(const char *stream, dispatch_queue_t targetq, xpc_handler_t handler)
{
}

const char *__cdecl xpc_string_get_string_ptr(xpc_object_t xstring)
{
  return _xpc_string_get_string_ptr(xstring);
}